// $ANTLR 3.1.2 XQueryParser.g 2009-12-22 20:51:43

/*******************************************************************************
 * Copyright (c) 2008, 2009 28msec Inc. and others.
 * All rights reserved. This program and the accompanying materials
 * are made available under the terms of the Eclipse Public License v1.0
 * which accompanies this distribution, and is available at
 * http://www.eclipse.org/legal/epl-v10.html
 *
 * Contributors:
 *     Gabriel Petrovay (28msec) - initial API and implementation
 *     Sam Neth (Mark Logic)
 *******************************************************************************/
package org.eclipse.wst.xquery.internal.core.parser.antlr;


import org.antlr.runtime.*;
import java.util.Stack;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;

import org.antlr.runtime.tree.*;

@SuppressWarnings({ "unused", "unchecked" })
public class XQueryParser extends XQDTParser {
    public static final String[] tokenNames = new String[] {
        "<invalid>", "<EOR>", "<DOWN>", "<UP>", "L_QuotAttrContentChar", "L_AposAttrContentChar", "L_ElementContentChar", "L_CDataSection", "L_PredefinedEntityRef", "L_CharRef", "ESCAPE_LBRACKET", "ESCAPE_RBRACKET", "ESCAPE_APOS", "ESCAPE_QUOT", "CDATA_START", "CDATA_END", "ANCESTOR", "ANCESTOR_OR_SELF", "AND", "AS", "ASCENDING", "AT", "ATTRIBUTE", "BASE_URI", "BOUNDARY_SPACE", "BY", "CASE", "CAST", "CASTABLE", "CHILD", "COLLATION", "COMMENT", "CONSTRUCTION", "COPY_NAMESPACES", "DECLARE", "DEFAULT", "DESCENDANT", "DESCENDANT_OR_SELF", "DESCENDING", "DIV", "DOCUMENT", "DOCUMENT_NODE", "ELEMENT", "ELSE", "EMPTY", "EMPTY_SEQUENCE", "ENCODING", "EQ", "EVERY", "EXCEPT", "EXTERNAL", "FOLLOWING", "FOLLOWING_SIBLING", "FOR", "FUNCTION", "GE", "GREATEST", "GT", "IDIV", "IF", "IMPORT", "IN", "INHERIT", "INSTANCE", "INTERSECT", "IS", "ITEM", "LAX", "LE", "LEAST", "LET", "LT", "MOD", "MODULE", "NAMESPACE", "NE", "NO_INHERIT", "NO_PRESERVE", "NODE", "OF", "OPTION", "OR", "ORDER", "ORDERED", "ORDERING", "PARENT", "PRECEDING", "PRECEDING_SIBLING", "PRESERVE", "PROCESSING_INSTRUCTION", "RETURN", "SATISFIES", "SCHEMA", "SCHEMA_ATTRIBUTE", "SCHEMA_ELEMENT", "SELF", "SOME", "STABLE", "STRICT", "STRIP", "TEXT", "THEN", "TO", "TREAT", "TYPESWITCH", "UNION", "UNORDERED", "VALIDATE", "VARIABLE", "VERSION", "WHERE", "XQUERY", "CATCH", "CONTEXT", "COUNT", "DECIMAL_FORMAT", "DECIMAL_SEPARATOR", "DIGIT", "END", "GROUP", "GROUPING_SEPARATOR", "INFINITY", "MINUS_SIGN", "NAMESPACE_NODE", "NAN", "NEXT", "ONLY", "OUTER", "PATTERN_SEPARATOR", "PERCENT", "PER_MILLE", "PREVIOUS", "SLIDING", "START", "TRY", "TUMBLING", "WHEN", "WINDOW", "ZERO_DIGIT", "AFTER", "BEFORE", "COPY", "DELETE", "FIRST", "INSERT", "INTO", "LAST", "MODIFY", "NODES", "RENAME", "REPLACE", "REVALIDATION", "SKIP", "UPDATING", "VALUE", "WITH", "BLOCK", "CONSTANT", "EXIT", "RETURNING", "SEQUENTIAL", "SET", "SIMPLE", "WHILE", "EVAL", "USING", "BINARY", "PRIVATE", "AMP_ER", "APOS_ER", "QUOT_ER", "LPAREN", "RPAREN", "DOLLAR", "LBRACKET", "RBRACKET", "LSQUARE", "RSQUARE", "EQUAL", "BIND", "NOTEQUAL", "AMP", "COMMA", "QUESTION", "STAR", "PLUS", "MINUS", "SMALLER", "GREATER", "SMALLEREQ", "GREATEREQ", "SMALLER_SMALLER", "GREATER_GREATER", "SLASH", "SLASH_SLASH", "DOT", "DOT_DOT", "COLON", "COLON_COLON", "EMPTY_CLOSE_TAG", "CLOSE_TAG", "SEMICOLON", "VBAR", "PRAGMA_START", "PRAGMA_END", "XML_COMMENT_START", "XML_COMMENT_END", "PI_START", "PI_END", "ATTR_SIGN", "CHARREF_DEC", "CHARREF_HEX", "APOS", "QUOT", "NCNameStartChar", "NCNameChar", "L_NCName", "Letter", "HexLetter", "Digit", "Digits", "S", "SU", "L_Pragma", "L_DirCommentConstructor", "L_DirPIConstructor", "L_IntegerLiteral", "L_DecimalLiteral", "L_DoubleLiteral", "L_Comment", "L_AnyChar", "L_QuotStringLiteralChar", "L_AposStringLiteralChar", "LibraryModule", "MainModule", "VersionDecl", "VersionDeclEncoding", "VersionDeclVersion", "ModuleDecl", "Prolog", "DefaultNamespaceDecls", "DefaultNamespaceDecl", "Setters", "Setter", "NamespaceDecls", "NamespaceDecl", "Imports", "SchemaImport", "SchemaPrefix", "NamespaceName", "DefaultElementNamespace", "AtHints", "ModuleImport", "BaseURIDecl", "OrderedDecls", "VarDecl", "VarType", "VarValue", "VarDefaultValue", "VarConstantDecl", "VarVariableDecl", "FunctionDecl", "ParamList", "ReturnType", "OptionDecl", "TypeDeclaration", "Param", "EnclosedExpr", "QueryBody", "UnaryExpr", "DirElemConstructor", "DirAttributeList", "DirAttributeValue", "DirElemContent", "CommonContent", "SequenceType", "EmptySequenceTest", "KindTest", "ItemTest", "AtomicType", "StringLiteral", "ElementContentChar", "AttributeValueChar", "QName", "Block", "BlockDecls", "BlockVarDecl", "BinaryTest"
    };
    public static final int FUNCTION=54;
    public static final int APOS=212;
    public static final int STAR=184;
    public static final int LSQUARE=176;
    public static final int L_AnyChar=230;
    public static final int PER_MILLE=130;
    public static final int MOD=72;
    public static final int PATTERN_SEPARATOR=128;
    public static final int VersionDeclEncoding=236;
    public static final int DirAttributeList=271;
    public static final int VarVariableDecl=260;
    public static final int EXCEPT=49;
    public static final int EOF=-1;
    public static final int AttributeValueChar=282;
    public static final int L_DirPIConstructor=225;
    public static final int PI_END=208;
    public static final int LBRACKET=174;
    public static final int VBAR=202;
    public static final int BaseURIDecl=253;
    public static final int RPAREN=172;
    public static final int IMPORT=60;
    public static final int SLASH_SLASH=194;
    public static final int CDATA_END=15;
    public static final int USING=165;
    public static final int SchemaImport=247;
    public static final int BIND=179;
    public static final int PRECEDING=86;
    public static final int RETURN=90;
    public static final int ELEMENT=42;
    public static final int EQ=47;
    public static final int CHILD=29;
    public static final int GE=55;
    public static final int STRICT=98;
    public static final int PRESERVE=88;
    public static final int L_AposStringLiteralChar=232;
    public static final int LibraryModule=233;
    public static final int ELSE=43;
    public static final int TYPESWITCH=104;
    public static final int KindTest=277;
    public static final int SEMICOLON=201;
    public static final int S=221;
    public static final int EMPTY_CLOSE_TAG=199;
    public static final int VALUE=154;
    public static final int ParamList=262;
    public static final int Block=284;
    public static final int EMPTY=44;
    public static final int DefaultNamespaceDecls=240;
    public static final int INTERSECT=64;
    public static final int GROUP=119;
    public static final int BlockDecls=285;
    public static final int ReturnType=263;
    public static final int Setter=243;
    public static final int SCHEMA_ELEMENT=94;
    public static final int NO_PRESERVE=77;
    public static final int CONSTANT=157;
    public static final int GT=57;
    public static final int FunctionDecl=261;
    public static final int END=118;
    public static final int VersionDeclVersion=237;
    public static final int L_QuotAttrContentChar=4;
    public static final int NAN=124;
    public static final int RENAME=149;
    public static final int MODIFY=147;
    public static final int VarDefaultValue=258;
    public static final int OPTION=80;
    public static final int BOUNDARY_SPACE=24;
    public static final int ONLY=126;
    public static final int OrderedDecls=254;
    public static final int VERSION=109;
    public static final int SATISFIES=91;
    public static final int IDIV=58;
    public static final int L_DirCommentConstructor=224;
    public static final int ASCENDING=20;
    public static final int LPAREN=171;
    public static final int UPDATING=153;
    public static final int AT=21;
    public static final int AS=19;
    public static final int EMPTY_SEQUENCE=45;
    public static final int PARENT=85;
    public static final int CONSTRUCTION=32;
    public static final int SLASH=193;
    public static final int THEN=101;
    public static final int TypeDeclaration=265;
    public static final int DOCUMENT=40;
    public static final int COLLATION=30;
    public static final int REPLACE=150;
    public static final int MINUS_SIGN=122;
    public static final int PREVIOUS=131;
    public static final int ANCESTOR=16;
    public static final int NODES=148;
    public static final int SequenceType=275;
    public static final int PLUS=185;
    public static final int DefaultElementNamespace=250;
    public static final int NamespaceName=249;
    public static final int CASTABLE=28;
    public static final int DOT_DOT=196;
    public static final int PRAGMA_START=203;
    public static final int GREATEREQ=190;
    public static final int OUTER=127;
    public static final int BlockVarDecl=286;
    public static final int BY=25;
    public static final int L_DoubleLiteral=228;
    public static final int NCNameChar=215;
    public static final int QName=283;
    public static final int ITEM=66;
    public static final int TO=102;
    public static final int ESCAPE_RBRACKET=11;
    public static final int L_DecimalLiteral=227;
    public static final int INHERIT=62;
    public static final int ANCESTOR_OR_SELF=17;
    public static final int QUOT=213;
    public static final int SU=222;
    public static final int SET=161;
    public static final int COLON_COLON=198;
    public static final int TEXT=100;
    public static final int MINUS=186;
    public static final int Imports=246;
    public static final int MODULE=73;
    public static final int NamespaceDecl=245;
    public static final int ORDERED=83;
    public static final int ESCAPE_LBRACKET=10;
    public static final int NAMESPACE_NODE=123;
    public static final int UNION=105;
    public static final int SCHEMA_ATTRIBUTE=93;
    public static final int StringLiteral=280;
    public static final int COLON=197;
    public static final int FOLLOWING_SIBLING=52;
    public static final int APOS_ER=169;
    public static final int SCHEMA=92;
    public static final int WHEN=136;
    public static final int INSTANCE=63;
    public static final int VALIDATE=107;
    public static final int INFINITY=121;
    public static final int BLOCK=156;
    public static final int DECLARE=34;
    public static final int START=133;
    public static final int MainModule=234;
    public static final int DIV=39;
    public static final int DESCENDING=38;
    public static final int SEQUENTIAL=160;
    public static final int SELF=95;
    public static final int FIRST=143;
    public static final int CAST=27;
    public static final int XML_COMMENT_END=206;
    public static final int EXTERNAL=50;
    public static final int LT=71;
    public static final int WHILE=163;
    public static final int CASE=26;
    public static final int ENCODING=46;
    public static final int COUNT=114;
    public static final int AtomicType=279;
    public static final int DOCUMENT_NODE=41;
    public static final int NOTEQUAL=180;
    public static final int ModuleDecl=238;
    public static final int L_NCName=216;
    public static final int L_Comment=229;
    public static final int GREATER=188;
    public static final int GREATER_GREATER=192;
    public static final int QUOT_ER=170;
    public static final int INSERT=144;
    public static final int XML_COMMENT_START=205;
    public static final int UnaryExpr=269;
    public static final int Digits=220;
    public static final int RETURNING=159;
    public static final int L_Pragma=223;
    public static final int ZERO_DIGIT=138;
    public static final int VarValue=257;
    public static final int LAST=146;
    public static final int COMMENT=31;
    public static final int L_QuotStringLiteralChar=231;
    public static final int PRAGMA_END=204;
    public static final int INTO=145;
    public static final int REVALIDATION=151;
    public static final int NE=75;
    public static final int EXIT=158;
    public static final int NO_INHERIT=76;
    public static final int CHARREF_HEX=211;
    public static final int DirElemConstructor=270;
    public static final int NODE=78;
    public static final int L_ElementContentChar=6;
    public static final int EmptySequenceTest=276;
    public static final int ModuleImport=252;
    public static final int CHARREF_DEC=210;
    public static final int PRIVATE=167;
    public static final int DECIMAL_FORMAT=115;
    public static final int GREATEST=56;
    public static final int EVERY=48;
    public static final int PROCESSING_INSTRUCTION=89;
    public static final int DELETE=142;
    public static final int OF=79;
    public static final int TRY=134;
    public static final int NAMESPACE=74;
    public static final int SKIP=152;
    public static final int VARIABLE=108;
    public static final int Setters=242;
    public static final int EVAL=164;
    public static final int DESCENDANT_OR_SELF=37;
    public static final int BASE_URI=23;
    public static final int CDATA_START=14;
    public static final int OR=81;
    public static final int DirAttributeValue=272;
    public static final int CATCH=112;
    public static final int PRECEDING_SIBLING=87;
    public static final int Letter=217;
    public static final int SIMPLE=162;
    public static final int ESCAPE_APOS=12;
    public static final int CommonContent=274;
    public static final int DOLLAR=173;
    public static final int WHERE=110;
    public static final int LAX=67;
    public static final int ORDER=82;
    public static final int AMP=181;
    public static final int DefaultNamespaceDecl=241;
    public static final int ATTRIBUTE=22;
    public static final int ESCAPE_QUOT=13;
    public static final int SchemaPrefix=248;
    public static final int FOR=53;
    public static final int SMALLER_SMALLER=191;
    public static final int VarDecl=255;
    public static final int FOLLOWING=51;
    public static final int AND=18;
    public static final int SMALLER=187;
    public static final int ItemTest=278;
    public static final int DECIMAL_SEPARATOR=116;
    public static final int L_CharRef=9;
    public static final int CONTEXT=113;
    public static final int IF=59;
    public static final int ATTR_SIGN=209;
    public static final int Param=266;
    public static final int IN=61;
    public static final int COPY_NAMESPACES=33;
    public static final int OptionDecl=264;
    public static final int COMMA=182;
    public static final int IS=65;
    public static final int VarType=256;
    public static final int COPY=141;
    public static final int SOME=96;
    public static final int EQUAL=178;
    public static final int BinaryTest=287;
    public static final int L_CDataSection=7;
    public static final int L_PredefinedEntityRef=8;
    public static final int VarConstantDecl=259;
    public static final int NEXT=125;
    public static final int STRIP=99;
    public static final int DIGIT=117;
    public static final int RBRACKET=175;
    public static final int Prolog=239;
    public static final int DOT=195;
    public static final int SLIDING=132;
    public static final int STABLE=97;
    public static final int WITH=155;
    public static final int NCNameStartChar=214;
    public static final int PERCENT=129;
    public static final int XQUERY=111;
    public static final int L_IntegerLiteral=226;
    public static final int QueryBody=268;
    public static final int DirElemContent=273;
    public static final int DEFAULT=35;
    public static final int DESCENDANT=36;
    public static final int TUMBLING=135;
    public static final int BEFORE=140;
    public static final int CLOSE_TAG=200;
    public static final int PI_START=207;
    public static final int RSQUARE=177;
    public static final int AFTER=139;
    public static final int HexLetter=218;
    public static final int Digit=219;
    public static final int GROUPING_SEPARATOR=120;
    public static final int UNORDERED=106;
    public static final int ElementContentChar=281;
    public static final int L_AposAttrContentChar=5;
    public static final int QUESTION=183;
    public static final int ORDERING=84;
    public static final int AtHints=251;
    public static final int AMP_ER=168;
    public static final int NamespaceDecls=244;
    public static final int LEAST=69;
    public static final int WINDOW=137;
    public static final int SMALLEREQ=189;
    public static final int BINARY=166;
    public static final int VersionDecl=235;
    public static final int TREAT=103;
    public static final int LE=68;
    public static final int LET=70;
    public static final int EnclosedExpr=267;

    // delegates
    // delegators


        public XQueryParser(TokenStream input) {
            this(input, new RecognizerSharedState());
        }
        public XQueryParser(TokenStream input, RecognizerSharedState state) {
            super(input, state);
             
        }
        
    protected TreeAdaptor adaptor = new CommonTreeAdaptor();

    public void setTreeAdaptor(TreeAdaptor adaptor) {
        this.adaptor = adaptor;
    }
    public TreeAdaptor getTreeAdaptor() {
        return adaptor;
    }

    public String[] getTokenNames() { return XQueryParser.tokenNames; }
    public String getGrammarFileName() { return "XQueryParser.g"; }


    // dummy list for warning elimination
    List<Stack<Object>> dummy1 = new ArrayList<Stack<Object>>();
    Map<Object, Object> dummy2 = new HashMap<Object, Object>();


    public static class p_Module_return extends ParserRuleReturnScope {
        XQDTCommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "p_Module"
    // XQueryParser.g:128:1: p_Module : (vd= p_VersionDecl )? (lm= p_LibraryModule[$vd.tree] -> | mm= p_MainModule[$vd.tree] ->) EOF ;
    public final XQueryParser.p_Module_return p_Module() throws RecognitionException {
        XQueryParser.p_Module_return retval = new XQueryParser.p_Module_return();
        retval.start = input.LT(1);

        XQDTCommonTree root_0 = null;

        CommonToken EOF1=null;
        XQueryParser.p_VersionDecl_return vd = null;

        XQueryParser.p_LibraryModule_return lm = null;

        XQueryParser.p_MainModule_return mm = null;


        XQDTCommonTree EOF1_tree=null;
        RewriteRuleTokenStream stream_EOF=new RewriteRuleTokenStream(adaptor,"token EOF");
        RewriteRuleSubtreeStream stream_p_VersionDecl=new RewriteRuleSubtreeStream(adaptor,"rule p_VersionDecl");
        RewriteRuleSubtreeStream stream_p_LibraryModule=new RewriteRuleSubtreeStream(adaptor,"rule p_LibraryModule");
        RewriteRuleSubtreeStream stream_p_MainModule=new RewriteRuleSubtreeStream(adaptor,"rule p_MainModule");
        try {
            // XQueryParser.g:129:9: ( (vd= p_VersionDecl )? (lm= p_LibraryModule[$vd.tree] -> | mm= p_MainModule[$vd.tree] ->) EOF )
            // XQueryParser.g:129:11: (vd= p_VersionDecl )? (lm= p_LibraryModule[$vd.tree] -> | mm= p_MainModule[$vd.tree] ->) EOF
            {
            // XQueryParser.g:129:13: (vd= p_VersionDecl )?
            int alt1=2;
            int LA1_0 = input.LA(1);

            if ( (LA1_0==XQUERY) ) {
                int LA1_1 = input.LA(2);

                if ( (LA1_1==ENCODING||LA1_1==VERSION) ) {
                    alt1=1;
                }
            }
            switch (alt1) {
                case 1 :
                    // XQueryParser.g:129:13: vd= p_VersionDecl
                    {
                    pushFollow(FOLLOW_p_VersionDecl_in_p_Module610);
                    vd=p_VersionDecl();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_p_VersionDecl.add(vd.getTree());

                    }
                    break;

            }

            // XQueryParser.g:130:13: (lm= p_LibraryModule[$vd.tree] -> | mm= p_MainModule[$vd.tree] ->)
            int alt2=2;
            int LA2_0 = input.LA(1);

            if ( (LA2_0==MODULE) ) {
                int LA2_1 = input.LA(2);

                if ( (LA2_1==NAMESPACE) ) {
                    alt2=1;
                }
                else if ( (LA2_1==EOF||LA2_1==AND||(LA2_1>=CAST && LA2_1<=CASTABLE)||LA2_1==DIV||LA2_1==EQ||LA2_1==EXCEPT||LA2_1==GE||(LA2_1>=GT && LA2_1<=IDIV)||(LA2_1>=INSTANCE && LA2_1<=IS)||LA2_1==LE||(LA2_1>=LT && LA2_1<=MOD)||LA2_1==NE||LA2_1==OR||(LA2_1>=TO && LA2_1<=TREAT)||LA2_1==UNION||LA2_1==LPAREN||LA2_1==LSQUARE||LA2_1==EQUAL||LA2_1==NOTEQUAL||LA2_1==COMMA||(LA2_1>=STAR && LA2_1<=SLASH_SLASH)||LA2_1==COLON||(LA2_1>=SEMICOLON && LA2_1<=VBAR)) ) {
                    alt2=2;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 2, 1, input);

                    throw nvae;
                }
            }
            else if ( ((LA2_0>=ANCESTOR && LA2_0<=MOD)||(LA2_0>=NAMESPACE && LA2_0<=EXIT)||(LA2_0>=SEQUENTIAL && LA2_0<=LPAREN)||LA2_0==DOLLAR||(LA2_0>=STAR && LA2_0<=SMALLER)||(LA2_0>=SLASH && LA2_0<=DOT_DOT)||LA2_0==ATTR_SIGN||(LA2_0>=APOS && LA2_0<=QUOT)||LA2_0==L_NCName||(LA2_0>=L_Pragma && LA2_0<=L_DoubleLiteral)) ) {
                alt2=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 2, 0, input);

                throw nvae;
            }
            switch (alt2) {
                case 1 :
                    // XQueryParser.g:131:17: lm= p_LibraryModule[$vd.tree]
                    {
                    pushFollow(FOLLOW_p_LibraryModule_in_p_Module645);
                    lm=p_LibraryModule((vd!=null?((XQDTCommonTree)vd.tree):null));

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_p_LibraryModule.add(lm.getTree());


                    // AST REWRITE
                    // elements: 
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (XQDTCommonTree)adaptor.nil();
                    // 131:49: ->
                    {
                        adaptor.addChild(root_0, (lm!=null?((XQDTCommonTree)lm.tree):null));

                    }

                    retval.tree = root_0;}
                    }
                    break;
                case 2 :
                    // XQueryParser.g:132:15: mm= p_MainModule[$vd.tree]
                    {
                    pushFollow(FOLLOW_p_MainModule_in_p_Module671);
                    mm=p_MainModule((vd!=null?((XQDTCommonTree)vd.tree):null));

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_p_MainModule.add(mm.getTree());


                    // AST REWRITE
                    // elements: 
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (XQDTCommonTree)adaptor.nil();
                    // 132:49: ->
                    {
                        adaptor.addChild(root_0, (mm!=null?((XQDTCommonTree)mm.tree):null));

                    }

                    retval.tree = root_0;}
                    }
                    break;

            }

            EOF1=(CommonToken)match(input,EOF,FOLLOW_EOF_in_p_Module700); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_EOF.add(EOF1);


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (XQDTCommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (XQDTCommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "p_Module"

    public static class p_VersionDecl_return extends ParserRuleReturnScope {
        XQDTCommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "p_VersionDecl"
    // XQueryParser.g:137:1: p_VersionDecl : k+= XQUERY ( (k+= ENCODING enc= p_StringLiteral ) | (k+= VERSION ver= p_StringLiteral (k+= ENCODING enc= p_StringLiteral )? ) ) SEMICOLON -> ^( VersionDecl ^( VersionDeclVersion ( $ver)? ) ^( VersionDeclEncoding ( $enc)? ) ) ;
    public final XQueryParser.p_VersionDecl_return p_VersionDecl() throws RecognitionException {
        XQueryParser.p_VersionDecl_return retval = new XQueryParser.p_VersionDecl_return();
        retval.start = input.LT(1);

        XQDTCommonTree root_0 = null;

        CommonToken SEMICOLON2=null;
        CommonToken k=null;
        List list_k=null;
        XQueryParser.p_StringLiteral_return enc = null;

        XQueryParser.p_StringLiteral_return ver = null;


        XQDTCommonTree SEMICOLON2_tree=null;
        XQDTCommonTree k_tree=null;
        RewriteRuleTokenStream stream_ENCODING=new RewriteRuleTokenStream(adaptor,"token ENCODING");
        RewriteRuleTokenStream stream_VERSION=new RewriteRuleTokenStream(adaptor,"token VERSION");
        RewriteRuleTokenStream stream_SEMICOLON=new RewriteRuleTokenStream(adaptor,"token SEMICOLON");
        RewriteRuleTokenStream stream_XQUERY=new RewriteRuleTokenStream(adaptor,"token XQUERY");
        RewriteRuleSubtreeStream stream_p_StringLiteral=new RewriteRuleSubtreeStream(adaptor,"rule p_StringLiteral");
        try {
            // XQueryParser.g:138:9: (k+= XQUERY ( (k+= ENCODING enc= p_StringLiteral ) | (k+= VERSION ver= p_StringLiteral (k+= ENCODING enc= p_StringLiteral )? ) ) SEMICOLON -> ^( VersionDecl ^( VersionDeclVersion ( $ver)? ) ^( VersionDeclEncoding ( $enc)? ) ) )
            // XQueryParser.g:138:11: k+= XQUERY ( (k+= ENCODING enc= p_StringLiteral ) | (k+= VERSION ver= p_StringLiteral (k+= ENCODING enc= p_StringLiteral )? ) ) SEMICOLON
            {
            k=(CommonToken)match(input,XQUERY,FOLLOW_XQUERY_in_p_VersionDecl728); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_XQUERY.add(k);

            if (list_k==null) list_k=new ArrayList();
            list_k.add(k);

            // XQueryParser.g:138:21: ( (k+= ENCODING enc= p_StringLiteral ) | (k+= VERSION ver= p_StringLiteral (k+= ENCODING enc= p_StringLiteral )? ) )
            int alt4=2;
            int LA4_0 = input.LA(1);

            if ( (LA4_0==ENCODING) ) {
                alt4=1;
            }
            else if ( (LA4_0==VERSION) ) {
                alt4=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 4, 0, input);

                throw nvae;
            }
            switch (alt4) {
                case 1 :
                    // XQueryParser.g:138:22: (k+= ENCODING enc= p_StringLiteral )
                    {
                    // XQueryParser.g:138:22: (k+= ENCODING enc= p_StringLiteral )
                    // XQueryParser.g:138:23: k+= ENCODING enc= p_StringLiteral
                    {
                    k=(CommonToken)match(input,ENCODING,FOLLOW_ENCODING_in_p_VersionDecl734); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_ENCODING.add(k);

                    if (list_k==null) list_k=new ArrayList();
                    list_k.add(k);

                    pushFollow(FOLLOW_p_StringLiteral_in_p_VersionDecl738);
                    enc=p_StringLiteral();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_p_StringLiteral.add(enc.getTree());

                    }


                    }
                    break;
                case 2 :
                    // XQueryParser.g:139:13: (k+= VERSION ver= p_StringLiteral (k+= ENCODING enc= p_StringLiteral )? )
                    {
                    // XQueryParser.g:139:13: (k+= VERSION ver= p_StringLiteral (k+= ENCODING enc= p_StringLiteral )? )
                    // XQueryParser.g:139:14: k+= VERSION ver= p_StringLiteral (k+= ENCODING enc= p_StringLiteral )?
                    {
                    k=(CommonToken)match(input,VERSION,FOLLOW_VERSION_in_p_VersionDecl759); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_VERSION.add(k);

                    if (list_k==null) list_k=new ArrayList();
                    list_k.add(k);

                    pushFollow(FOLLOW_p_StringLiteral_in_p_VersionDecl763);
                    ver=p_StringLiteral();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_p_StringLiteral.add(ver.getTree());
                    if ( state.backtracking==0 ) {
                      setLanguageVersion(((XQDTCommonTree)ver.getTree()).getChild(0).getText());
                    }
                    // XQueryParser.g:139:122: (k+= ENCODING enc= p_StringLiteral )?
                    int alt3=2;
                    int LA3_0 = input.LA(1);

                    if ( (LA3_0==ENCODING) ) {
                        alt3=1;
                    }
                    switch (alt3) {
                        case 1 :
                            // XQueryParser.g:139:123: k+= ENCODING enc= p_StringLiteral
                            {
                            k=(CommonToken)match(input,ENCODING,FOLLOW_ENCODING_in_p_VersionDecl770); if (state.failed) return retval; 
                            if ( state.backtracking==0 ) stream_ENCODING.add(k);

                            if (list_k==null) list_k=new ArrayList();
                            list_k.add(k);

                            pushFollow(FOLLOW_p_StringLiteral_in_p_VersionDecl774);
                            enc=p_StringLiteral();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_p_StringLiteral.add(enc.getTree());

                            }
                            break;

                    }


                    }


                    }
                    break;

            }

            SEMICOLON2=(CommonToken)match(input,SEMICOLON,FOLLOW_SEMICOLON_in_p_VersionDecl780); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_SEMICOLON.add(SEMICOLON2);

            if ( state.backtracking==0 ) {
              ak(list_k);
            }


            // AST REWRITE
            // elements: enc, ver
            // token labels: 
            // rule labels: retval, ver, enc
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
            RewriteRuleSubtreeStream stream_ver=new RewriteRuleSubtreeStream(adaptor,"rule ver",ver!=null?ver.tree:null);
            RewriteRuleSubtreeStream stream_enc=new RewriteRuleSubtreeStream(adaptor,"rule enc",enc!=null?enc.tree:null);

            root_0 = (XQDTCommonTree)adaptor.nil();
            // 140:17: -> ^( VersionDecl ^( VersionDeclVersion ( $ver)? ) ^( VersionDeclEncoding ( $enc)? ) )
            {
                // XQueryParser.g:140:20: ^( VersionDecl ^( VersionDeclVersion ( $ver)? ) ^( VersionDeclEncoding ( $enc)? ) )
                {
                XQDTCommonTree root_1 = (XQDTCommonTree)adaptor.nil();
                root_1 = (XQDTCommonTree)adaptor.becomeRoot((XQDTCommonTree)adaptor.create(VersionDecl, "VersionDecl"), root_1);

                // XQueryParser.g:140:34: ^( VersionDeclVersion ( $ver)? )
                {
                XQDTCommonTree root_2 = (XQDTCommonTree)adaptor.nil();
                root_2 = (XQDTCommonTree)adaptor.becomeRoot((XQDTCommonTree)adaptor.create(VersionDeclVersion, "VersionDeclVersion"), root_2);

                // XQueryParser.g:140:55: ( $ver)?
                if ( stream_ver.hasNext() ) {
                    adaptor.addChild(root_2, stream_ver.nextTree());

                }
                stream_ver.reset();

                adaptor.addChild(root_1, root_2);
                }
                // XQueryParser.g:140:62: ^( VersionDeclEncoding ( $enc)? )
                {
                XQDTCommonTree root_2 = (XQDTCommonTree)adaptor.nil();
                root_2 = (XQDTCommonTree)adaptor.becomeRoot((XQDTCommonTree)adaptor.create(VersionDeclEncoding, "VersionDeclEncoding"), root_2);

                // XQueryParser.g:140:84: ( $enc)?
                if ( stream_enc.hasNext() ) {
                    adaptor.addChild(root_2, stream_enc.nextTree());

                }
                stream_enc.reset();

                adaptor.addChild(root_1, root_2);
                }

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (XQDTCommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (XQDTCommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "p_VersionDecl"

    public static class p_MainModule_return extends ParserRuleReturnScope {
        XQDTCommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "p_MainModule"
    // XQueryParser.g:144:1: p_MainModule[CommonTree vd] : pm_Prolog p_QueryBody -> ^( MainModule pm_Prolog p_QueryBody ) ;
    public final XQueryParser.p_MainModule_return p_MainModule(CommonTree vd) throws RecognitionException {
        XQueryParser.p_MainModule_return retval = new XQueryParser.p_MainModule_return();
        retval.start = input.LT(1);

        XQDTCommonTree root_0 = null;

        XQueryParser.pm_Prolog_return pm_Prolog3 = null;

        XQueryParser.p_QueryBody_return p_QueryBody4 = null;


        RewriteRuleSubtreeStream stream_p_QueryBody=new RewriteRuleSubtreeStream(adaptor,"rule p_QueryBody");
        RewriteRuleSubtreeStream stream_pm_Prolog=new RewriteRuleSubtreeStream(adaptor,"rule pm_Prolog");
        try {
            // XQueryParser.g:145:9: ( pm_Prolog p_QueryBody -> ^( MainModule pm_Prolog p_QueryBody ) )
            // XQueryParser.g:145:11: pm_Prolog p_QueryBody
            {
            pushFollow(FOLLOW_pm_Prolog_in_p_MainModule848);
            pm_Prolog3=pm_Prolog();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_pm_Prolog.add(pm_Prolog3.getTree());
            pushFollow(FOLLOW_p_QueryBody_in_p_MainModule850);
            p_QueryBody4=p_QueryBody();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_p_QueryBody.add(p_QueryBody4.getTree());


            // AST REWRITE
            // elements: p_QueryBody, pm_Prolog
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (XQDTCommonTree)adaptor.nil();
            // 146:17: -> ^( MainModule pm_Prolog p_QueryBody )
            {
                // XQueryParser.g:146:20: ^( MainModule pm_Prolog p_QueryBody )
                {
                XQDTCommonTree root_1 = (XQDTCommonTree)adaptor.nil();
                root_1 = (XQDTCommonTree)adaptor.becomeRoot((XQDTCommonTree)adaptor.create(MainModule, "MainModule"), root_1);

                adaptor.addChild(root_1, vd);
                adaptor.addChild(root_1, stream_pm_Prolog.nextTree());
                adaptor.addChild(root_1, stream_p_QueryBody.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (XQDTCommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (XQDTCommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "p_MainModule"

    public static class p_LibraryModule_return extends ParserRuleReturnScope {
        XQDTCommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "p_LibraryModule"
    // XQueryParser.g:150:1: p_LibraryModule[CommonTree vd] : p_ModuleDecl pm_Prolog -> ^( LibraryModule p_ModuleDecl pm_Prolog ) ;
    public final XQueryParser.p_LibraryModule_return p_LibraryModule(CommonTree vd) throws RecognitionException {
        XQueryParser.p_LibraryModule_return retval = new XQueryParser.p_LibraryModule_return();
        retval.start = input.LT(1);

        XQDTCommonTree root_0 = null;

        XQueryParser.p_ModuleDecl_return p_ModuleDecl5 = null;

        XQueryParser.pm_Prolog_return pm_Prolog6 = null;


        RewriteRuleSubtreeStream stream_pm_Prolog=new RewriteRuleSubtreeStream(adaptor,"rule pm_Prolog");
        RewriteRuleSubtreeStream stream_p_ModuleDecl=new RewriteRuleSubtreeStream(adaptor,"rule p_ModuleDecl");
        try {
            // XQueryParser.g:151:9: ( p_ModuleDecl pm_Prolog -> ^( LibraryModule p_ModuleDecl pm_Prolog ) )
            // XQueryParser.g:151:11: p_ModuleDecl pm_Prolog
            {
            pushFollow(FOLLOW_p_ModuleDecl_in_p_LibraryModule906);
            p_ModuleDecl5=p_ModuleDecl();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_p_ModuleDecl.add(p_ModuleDecl5.getTree());
            pushFollow(FOLLOW_pm_Prolog_in_p_LibraryModule908);
            pm_Prolog6=pm_Prolog();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_pm_Prolog.add(pm_Prolog6.getTree());


            // AST REWRITE
            // elements: p_ModuleDecl, pm_Prolog
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (XQDTCommonTree)adaptor.nil();
            // 152:17: -> ^( LibraryModule p_ModuleDecl pm_Prolog )
            {
                // XQueryParser.g:152:20: ^( LibraryModule p_ModuleDecl pm_Prolog )
                {
                XQDTCommonTree root_1 = (XQDTCommonTree)adaptor.nil();
                root_1 = (XQDTCommonTree)adaptor.becomeRoot((XQDTCommonTree)adaptor.create(LibraryModule, "LibraryModule"), root_1);

                adaptor.addChild(root_1, vd);
                adaptor.addChild(root_1, stream_p_ModuleDecl.nextTree());
                adaptor.addChild(root_1, stream_pm_Prolog.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (XQDTCommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (XQDTCommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "p_LibraryModule"

    public static class p_ModuleDecl_return extends ParserRuleReturnScope {
        XQDTCommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "p_ModuleDecl"
    // XQueryParser.g:156:1: p_ModuleDecl : k+= MODULE k+= NAMESPACE p_NCName EQUAL p_StringLiteral SEMICOLON -> ^( ModuleDecl p_NCName p_StringLiteral ) ;
    public final XQueryParser.p_ModuleDecl_return p_ModuleDecl() throws RecognitionException {
        XQueryParser.p_ModuleDecl_return retval = new XQueryParser.p_ModuleDecl_return();
        retval.start = input.LT(1);

        XQDTCommonTree root_0 = null;

        CommonToken EQUAL8=null;
        CommonToken SEMICOLON10=null;
        CommonToken k=null;
        List list_k=null;
        XQueryParser.p_NCName_return p_NCName7 = null;

        XQueryParser.p_StringLiteral_return p_StringLiteral9 = null;


        XQDTCommonTree EQUAL8_tree=null;
        XQDTCommonTree SEMICOLON10_tree=null;
        XQDTCommonTree k_tree=null;
        RewriteRuleTokenStream stream_SEMICOLON=new RewriteRuleTokenStream(adaptor,"token SEMICOLON");
        RewriteRuleTokenStream stream_MODULE=new RewriteRuleTokenStream(adaptor,"token MODULE");
        RewriteRuleTokenStream stream_NAMESPACE=new RewriteRuleTokenStream(adaptor,"token NAMESPACE");
        RewriteRuleTokenStream stream_EQUAL=new RewriteRuleTokenStream(adaptor,"token EQUAL");
        RewriteRuleSubtreeStream stream_p_NCName=new RewriteRuleSubtreeStream(adaptor,"rule p_NCName");
        RewriteRuleSubtreeStream stream_p_StringLiteral=new RewriteRuleSubtreeStream(adaptor,"rule p_StringLiteral");
        try {
            // XQueryParser.g:157:9: (k+= MODULE k+= NAMESPACE p_NCName EQUAL p_StringLiteral SEMICOLON -> ^( ModuleDecl p_NCName p_StringLiteral ) )
            // XQueryParser.g:157:11: k+= MODULE k+= NAMESPACE p_NCName EQUAL p_StringLiteral SEMICOLON
            {
            k=(CommonToken)match(input,MODULE,FOLLOW_MODULE_in_p_ModuleDecl964); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_MODULE.add(k);

            if (list_k==null) list_k=new ArrayList();
            list_k.add(k);

            k=(CommonToken)match(input,NAMESPACE,FOLLOW_NAMESPACE_in_p_ModuleDecl968); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_NAMESPACE.add(k);

            if (list_k==null) list_k=new ArrayList();
            list_k.add(k);

            pushFollow(FOLLOW_p_NCName_in_p_ModuleDecl970);
            p_NCName7=p_NCName();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_p_NCName.add(p_NCName7.getTree());
            EQUAL8=(CommonToken)match(input,EQUAL,FOLLOW_EQUAL_in_p_ModuleDecl972); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_EQUAL.add(EQUAL8);

            pushFollow(FOLLOW_p_StringLiteral_in_p_ModuleDecl974);
            p_StringLiteral9=p_StringLiteral();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_p_StringLiteral.add(p_StringLiteral9.getTree());
            SEMICOLON10=(CommonToken)match(input,SEMICOLON,FOLLOW_SEMICOLON_in_p_ModuleDecl976); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_SEMICOLON.add(SEMICOLON10);

            if ( state.backtracking==0 ) {
              ak(list_k);
            }


            // AST REWRITE
            // elements: p_NCName, p_StringLiteral
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (XQDTCommonTree)adaptor.nil();
            // 158:17: -> ^( ModuleDecl p_NCName p_StringLiteral )
            {
                // XQueryParser.g:158:21: ^( ModuleDecl p_NCName p_StringLiteral )
                {
                XQDTCommonTree root_1 = (XQDTCommonTree)adaptor.nil();
                root_1 = (XQDTCommonTree)adaptor.becomeRoot((XQDTCommonTree)adaptor.create(ModuleDecl, "ModuleDecl"), root_1);

                adaptor.addChild(root_1, stream_p_NCName.nextTree());
                adaptor.addChild(root_1, stream_p_StringLiteral.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (XQDTCommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (XQDTCommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "p_ModuleDecl"

    public static class pm_Prolog_return extends ParserRuleReturnScope {
        XQDTCommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "pm_Prolog"
    // XQueryParser.g:164:1: pm_Prolog : ( (dnd+= pm_DefaultNamespaceDecl | s+= p_Setter | nd+= pm_NamespaceDecl | i+= p_Import ) )* od= pg_OrderedDecl -> ^( Prolog ^( DefaultNamespaceDecls ( $dnd)* ) ^( Setters ( $s)* ) ^( NamespaceDecls ( $nd)* ) ^( Imports ( $i)* ) ^( OrderedDecls ( $od)* ) ) ;
    public final XQueryParser.pm_Prolog_return pm_Prolog() throws RecognitionException {
        XQueryParser.pm_Prolog_return retval = new XQueryParser.pm_Prolog_return();
        retval.start = input.LT(1);

        XQDTCommonTree root_0 = null;

        List list_dnd=null;
        List list_s=null;
        List list_nd=null;
        List list_i=null;
        XQueryParser.pg_OrderedDecl_return od = null;

        XQueryParser.pm_DefaultNamespaceDecl_return dnd = null;
         dnd = null;
        XQueryParser.p_Setter_return s = null;
         s = null;
        XQueryParser.pm_NamespaceDecl_return nd = null;
         nd = null;
        XQueryParser.p_Import_return i = null;
         i = null;
        RewriteRuleSubtreeStream stream_pm_NamespaceDecl=new RewriteRuleSubtreeStream(adaptor,"rule pm_NamespaceDecl");
        RewriteRuleSubtreeStream stream_p_Import=new RewriteRuleSubtreeStream(adaptor,"rule p_Import");
        RewriteRuleSubtreeStream stream_p_Setter=new RewriteRuleSubtreeStream(adaptor,"rule p_Setter");
        RewriteRuleSubtreeStream stream_pm_DefaultNamespaceDecl=new RewriteRuleSubtreeStream(adaptor,"rule pm_DefaultNamespaceDecl");
        RewriteRuleSubtreeStream stream_pg_OrderedDecl=new RewriteRuleSubtreeStream(adaptor,"rule pg_OrderedDecl");
        try {
            // XQueryParser.g:165:9: ( ( (dnd+= pm_DefaultNamespaceDecl | s+= p_Setter | nd+= pm_NamespaceDecl | i+= p_Import ) )* od= pg_OrderedDecl -> ^( Prolog ^( DefaultNamespaceDecls ( $dnd)* ) ^( Setters ( $s)* ) ^( NamespaceDecls ( $nd)* ) ^( Imports ( $i)* ) ^( OrderedDecls ( $od)* ) ) )
            // XQueryParser.g:165:11: ( (dnd+= pm_DefaultNamespaceDecl | s+= p_Setter | nd+= pm_NamespaceDecl | i+= p_Import ) )* od= pg_OrderedDecl
            {
            // XQueryParser.g:165:11: ( (dnd+= pm_DefaultNamespaceDecl | s+= p_Setter | nd+= pm_NamespaceDecl | i+= p_Import ) )*
            loop6:
            do {
                int alt6=2;
                int LA6_0 = input.LA(1);

                if ( (LA6_0==DECLARE) ) {
                    int LA6_1 = input.LA(2);

                    if ( ((LA6_1>=BASE_URI && LA6_1<=BOUNDARY_SPACE)||LA6_1==CONSTRUCTION||LA6_1==DEFAULT||LA6_1==ORDERING) ) {
                        alt6=1;
                    }
                    else if ( (LA6_1==REVALIDATION) && ((lc(XQU)))) {
                        alt6=1;
                    }
                    else if ( (LA6_1==COPY_NAMESPACES||LA6_1==NAMESPACE) ) {
                        alt6=1;
                    }


                }
                else if ( (LA6_0==IMPORT) ) {
                    int LA6_3 = input.LA(2);

                    if ( (LA6_3==MODULE||LA6_3==SCHEMA) ) {
                        alt6=1;
                    }


                }


                switch (alt6) {
            	case 1 :
            	    // XQueryParser.g:165:12: (dnd+= pm_DefaultNamespaceDecl | s+= p_Setter | nd+= pm_NamespaceDecl | i+= p_Import )
            	    {
            	    // XQueryParser.g:165:12: (dnd+= pm_DefaultNamespaceDecl | s+= p_Setter | nd+= pm_NamespaceDecl | i+= p_Import )
            	    int alt5=4;
            	    int LA5_0 = input.LA(1);

            	    if ( (LA5_0==DECLARE) ) {
            	        int LA5_1 = input.LA(2);

            	        if ( (LA5_1==DEFAULT) ) {
            	            int LA5_3 = input.LA(3);

            	            if ( (LA5_3==COLLATION||LA5_3==ORDER) ) {
            	                alt5=2;
            	            }
            	            else if ( (LA5_3==ELEMENT||LA5_3==FUNCTION) ) {
            	                alt5=1;
            	            }
            	            else {
            	                if (state.backtracking>0) {state.failed=true; return retval;}
            	                NoViableAltException nvae =
            	                    new NoViableAltException("", 5, 3, input);

            	                throw nvae;
            	            }
            	        }
            	        else if ( ((LA5_1>=BASE_URI && LA5_1<=BOUNDARY_SPACE)||LA5_1==CONSTRUCTION||LA5_1==ORDERING) ) {
            	            alt5=2;
            	        }
            	        else if ( (LA5_1==REVALIDATION) && ((lc(XQU)))) {
            	            alt5=2;
            	        }
            	        else if ( (LA5_1==COPY_NAMESPACES) ) {
            	            alt5=2;
            	        }
            	        else if ( (LA5_1==NAMESPACE) ) {
            	            alt5=3;
            	        }
            	        else {
            	            if (state.backtracking>0) {state.failed=true; return retval;}
            	            NoViableAltException nvae =
            	                new NoViableAltException("", 5, 1, input);

            	            throw nvae;
            	        }
            	    }
            	    else if ( (LA5_0==IMPORT) ) {
            	        alt5=4;
            	    }
            	    else {
            	        if (state.backtracking>0) {state.failed=true; return retval;}
            	        NoViableAltException nvae =
            	            new NoViableAltException("", 5, 0, input);

            	        throw nvae;
            	    }
            	    switch (alt5) {
            	        case 1 :
            	            // XQueryParser.g:165:13: dnd+= pm_DefaultNamespaceDecl
            	            {
            	            pushFollow(FOLLOW_pm_DefaultNamespaceDecl_in_pm_Prolog1037);
            	            dnd=pm_DefaultNamespaceDecl();

            	            state._fsp--;
            	            if (state.failed) return retval;
            	            if ( state.backtracking==0 ) stream_pm_DefaultNamespaceDecl.add(dnd.getTree());
            	            if (list_dnd==null) list_dnd=new ArrayList();
            	            list_dnd.add(dnd.getTree());


            	            }
            	            break;
            	        case 2 :
            	            // XQueryParser.g:165:44: s+= p_Setter
            	            {
            	            pushFollow(FOLLOW_p_Setter_in_pm_Prolog1043);
            	            s=p_Setter();

            	            state._fsp--;
            	            if (state.failed) return retval;
            	            if ( state.backtracking==0 ) stream_p_Setter.add(s.getTree());
            	            if (list_s==null) list_s=new ArrayList();
            	            list_s.add(s.getTree());


            	            }
            	            break;
            	        case 3 :
            	            // XQueryParser.g:165:58: nd+= pm_NamespaceDecl
            	            {
            	            pushFollow(FOLLOW_pm_NamespaceDecl_in_pm_Prolog1049);
            	            nd=pm_NamespaceDecl();

            	            state._fsp--;
            	            if (state.failed) return retval;
            	            if ( state.backtracking==0 ) stream_pm_NamespaceDecl.add(nd.getTree());
            	            if (list_nd==null) list_nd=new ArrayList();
            	            list_nd.add(nd.getTree());


            	            }
            	            break;
            	        case 4 :
            	            // XQueryParser.g:165:81: i+= p_Import
            	            {
            	            pushFollow(FOLLOW_p_Import_in_pm_Prolog1055);
            	            i=p_Import();

            	            state._fsp--;
            	            if (state.failed) return retval;
            	            if ( state.backtracking==0 ) stream_p_Import.add(i.getTree());
            	            if (list_i==null) list_i=new ArrayList();
            	            list_i.add(i.getTree());


            	            }
            	            break;

            	    }


            	    }
            	    break;

            	default :
            	    break loop6;
                }
            } while (true);

            pushFollow(FOLLOW_pg_OrderedDecl_in_pm_Prolog1062);
            od=pg_OrderedDecl();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_pg_OrderedDecl.add(od.getTree());


            // AST REWRITE
            // elements: s, dnd, od, nd, i
            // token labels: 
            // rule labels: retval, od
            // token list labels: 
            // rule list labels: s, nd, dnd, i
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
            RewriteRuleSubtreeStream stream_od=new RewriteRuleSubtreeStream(adaptor,"rule od",od!=null?od.tree:null);
            RewriteRuleSubtreeStream stream_s=new RewriteRuleSubtreeStream(adaptor,"token s",list_s);
            RewriteRuleSubtreeStream stream_nd=new RewriteRuleSubtreeStream(adaptor,"token nd",list_nd);
            RewriteRuleSubtreeStream stream_dnd=new RewriteRuleSubtreeStream(adaptor,"token dnd",list_dnd);
            RewriteRuleSubtreeStream stream_i=new RewriteRuleSubtreeStream(adaptor,"token i",list_i);
            root_0 = (XQDTCommonTree)adaptor.nil();
            // 166:17: -> ^( Prolog ^( DefaultNamespaceDecls ( $dnd)* ) ^( Setters ( $s)* ) ^( NamespaceDecls ( $nd)* ) ^( Imports ( $i)* ) ^( OrderedDecls ( $od)* ) )
            {
                // XQueryParser.g:166:21: ^( Prolog ^( DefaultNamespaceDecls ( $dnd)* ) ^( Setters ( $s)* ) ^( NamespaceDecls ( $nd)* ) ^( Imports ( $i)* ) ^( OrderedDecls ( $od)* ) )
                {
                XQDTCommonTree root_1 = (XQDTCommonTree)adaptor.nil();
                root_1 = (XQDTCommonTree)adaptor.becomeRoot((XQDTCommonTree)adaptor.create(Prolog, "Prolog"), root_1);

                // XQueryParser.g:167:33: ^( DefaultNamespaceDecls ( $dnd)* )
                {
                XQDTCommonTree root_2 = (XQDTCommonTree)adaptor.nil();
                root_2 = (XQDTCommonTree)adaptor.becomeRoot((XQDTCommonTree)adaptor.create(DefaultNamespaceDecls, "DefaultNamespaceDecls"), root_2);

                // XQueryParser.g:167:57: ( $dnd)*
                while ( stream_dnd.hasNext() ) {
                    adaptor.addChild(root_2, stream_dnd.nextTree());

                }
                stream_dnd.reset();

                adaptor.addChild(root_1, root_2);
                }
                // XQueryParser.g:168:33: ^( Setters ( $s)* )
                {
                XQDTCommonTree root_2 = (XQDTCommonTree)adaptor.nil();
                root_2 = (XQDTCommonTree)adaptor.becomeRoot((XQDTCommonTree)adaptor.create(Setters, "Setters"), root_2);

                // XQueryParser.g:168:43: ( $s)*
                while ( stream_s.hasNext() ) {
                    adaptor.addChild(root_2, stream_s.nextTree());

                }
                stream_s.reset();

                adaptor.addChild(root_1, root_2);
                }
                // XQueryParser.g:169:33: ^( NamespaceDecls ( $nd)* )
                {
                XQDTCommonTree root_2 = (XQDTCommonTree)adaptor.nil();
                root_2 = (XQDTCommonTree)adaptor.becomeRoot((XQDTCommonTree)adaptor.create(NamespaceDecls, "NamespaceDecls"), root_2);

                // XQueryParser.g:169:50: ( $nd)*
                while ( stream_nd.hasNext() ) {
                    adaptor.addChild(root_2, stream_nd.nextTree());

                }
                stream_nd.reset();

                adaptor.addChild(root_1, root_2);
                }
                // XQueryParser.g:170:33: ^( Imports ( $i)* )
                {
                XQDTCommonTree root_2 = (XQDTCommonTree)adaptor.nil();
                root_2 = (XQDTCommonTree)adaptor.becomeRoot((XQDTCommonTree)adaptor.create(Imports, "Imports"), root_2);

                // XQueryParser.g:170:43: ( $i)*
                while ( stream_i.hasNext() ) {
                    adaptor.addChild(root_2, stream_i.nextTree());

                }
                stream_i.reset();

                adaptor.addChild(root_1, root_2);
                }
                // XQueryParser.g:171:33: ^( OrderedDecls ( $od)* )
                {
                XQDTCommonTree root_2 = (XQDTCommonTree)adaptor.nil();
                root_2 = (XQDTCommonTree)adaptor.becomeRoot((XQDTCommonTree)adaptor.create(OrderedDecls, "OrderedDecls"), root_2);

                // XQueryParser.g:171:48: ( $od)*
                while ( stream_od.hasNext() ) {
                    adaptor.addChild(root_2, stream_od.nextTree());

                }
                stream_od.reset();

                adaptor.addChild(root_1, root_2);
                }

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (XQDTCommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (XQDTCommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "pm_Prolog"

    public static class pg_OrderedDecl_return extends ParserRuleReturnScope {
        XQDTCommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "pg_OrderedDecl"
    // XQueryParser.g:179:1: pg_OrderedDecl : ( pm_VarDecl | pm_ContextItemDecl | pm_FunctionDecl | pm_OptionDecl )* ;
    public final XQueryParser.pg_OrderedDecl_return pg_OrderedDecl() throws RecognitionException {
        XQueryParser.pg_OrderedDecl_return retval = new XQueryParser.pg_OrderedDecl_return();
        retval.start = input.LT(1);

        XQDTCommonTree root_0 = null;

        XQueryParser.pm_VarDecl_return pm_VarDecl11 = null;

        XQueryParser.pm_ContextItemDecl_return pm_ContextItemDecl12 = null;

        XQueryParser.pm_FunctionDecl_return pm_FunctionDecl13 = null;

        XQueryParser.pm_OptionDecl_return pm_OptionDecl14 = null;



        try {
            // XQueryParser.g:180:9: ( ( pm_VarDecl | pm_ContextItemDecl | pm_FunctionDecl | pm_OptionDecl )* )
            // XQueryParser.g:180:11: ( pm_VarDecl | pm_ContextItemDecl | pm_FunctionDecl | pm_OptionDecl )*
            {
            root_0 = (XQDTCommonTree)adaptor.nil();

            // XQueryParser.g:180:11: ( pm_VarDecl | pm_ContextItemDecl | pm_FunctionDecl | pm_OptionDecl )*
            loop7:
            do {
                int alt7=5;
                int LA7_0 = input.LA(1);

                if ( (LA7_0==DECLARE) ) {
                    int LA7_2 = input.LA(2);

                    if ( (LA7_2==CONTEXT) ) {
                        alt7=2;
                    }
                    else if ( (LA7_2==SEQUENTIAL) && ((lc(XQS)))) {
                        alt7=3;
                    }
                    else if ( (LA7_2==OPTION) ) {
                        alt7=4;
                    }
                    else if ( (LA7_2==PRIVATE) ) {
                        int LA7_6 = input.LA(3);

                        if ( (LA7_6==FUNCTION||LA7_6==UPDATING||LA7_6==SIMPLE) ) {
                            alt7=3;
                        }
                        else if ( (LA7_6==VARIABLE||LA7_6==CONSTANT) ) {
                            alt7=1;
                        }


                    }
                    else if ( (LA7_2==FUNCTION||LA7_2==UPDATING||LA7_2==SIMPLE) ) {
                        alt7=3;
                    }
                    else if ( (LA7_2==VARIABLE||LA7_2==CONSTANT) ) {
                        alt7=1;
                    }


                }


                switch (alt7) {
            	case 1 :
            	    // XQueryParser.g:180:12: pm_VarDecl
            	    {
            	    pushFollow(FOLLOW_pm_VarDecl_in_pg_OrderedDecl1340);
            	    pm_VarDecl11=pm_VarDecl();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, pm_VarDecl11.getTree());

            	    }
            	    break;
            	case 2 :
            	    // XQueryParser.g:180:25: pm_ContextItemDecl
            	    {
            	    pushFollow(FOLLOW_pm_ContextItemDecl_in_pg_OrderedDecl1344);
            	    pm_ContextItemDecl12=pm_ContextItemDecl();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, pm_ContextItemDecl12.getTree());

            	    }
            	    break;
            	case 3 :
            	    // XQueryParser.g:180:46: pm_FunctionDecl
            	    {
            	    pushFollow(FOLLOW_pm_FunctionDecl_in_pg_OrderedDecl1348);
            	    pm_FunctionDecl13=pm_FunctionDecl();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, pm_FunctionDecl13.getTree());

            	    }
            	    break;
            	case 4 :
            	    // XQueryParser.g:180:64: pm_OptionDecl
            	    {
            	    pushFollow(FOLLOW_pm_OptionDecl_in_pg_OrderedDecl1352);
            	    pm_OptionDecl14=pm_OptionDecl();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, pm_OptionDecl14.getTree());

            	    }
            	    break;

            	default :
            	    break loop7;
                }
            } while (true);


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (XQDTCommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (XQDTCommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "pg_OrderedDecl"

    public static class p_Setter_return extends ParserRuleReturnScope {
        XQDTCommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "p_Setter"
    // XQueryParser.g:185:1: p_Setter : ( pm_BoundarySpaceDecl | pm_DefaultCollationDecl | pm_BaseURIDecl | pm_ConstructionDecl | pm_OrderingModeDecl | pm_EmptyOrderDecl | {...}? => pm_RevalidationDecl | pm_CopyNamespacesDecl );
    public final XQueryParser.p_Setter_return p_Setter() throws RecognitionException {
        XQueryParser.p_Setter_return retval = new XQueryParser.p_Setter_return();
        retval.start = input.LT(1);

        XQDTCommonTree root_0 = null;

        XQueryParser.pm_BoundarySpaceDecl_return pm_BoundarySpaceDecl15 = null;

        XQueryParser.pm_DefaultCollationDecl_return pm_DefaultCollationDecl16 = null;

        XQueryParser.pm_BaseURIDecl_return pm_BaseURIDecl17 = null;

        XQueryParser.pm_ConstructionDecl_return pm_ConstructionDecl18 = null;

        XQueryParser.pm_OrderingModeDecl_return pm_OrderingModeDecl19 = null;

        XQueryParser.pm_EmptyOrderDecl_return pm_EmptyOrderDecl20 = null;

        XQueryParser.pm_RevalidationDecl_return pm_RevalidationDecl21 = null;

        XQueryParser.pm_CopyNamespacesDecl_return pm_CopyNamespacesDecl22 = null;



        try {
            // XQueryParser.g:186:9: ( pm_BoundarySpaceDecl | pm_DefaultCollationDecl | pm_BaseURIDecl | pm_ConstructionDecl | pm_OrderingModeDecl | pm_EmptyOrderDecl | {...}? => pm_RevalidationDecl | pm_CopyNamespacesDecl )
            int alt8=8;
            alt8 = dfa8.predict(input);
            switch (alt8) {
                case 1 :
                    // XQueryParser.g:186:13: pm_BoundarySpaceDecl
                    {
                    root_0 = (XQDTCommonTree)adaptor.nil();

                    pushFollow(FOLLOW_pm_BoundarySpaceDecl_in_p_Setter1383);
                    pm_BoundarySpaceDecl15=pm_BoundarySpaceDecl();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, pm_BoundarySpaceDecl15.getTree());

                    }
                    break;
                case 2 :
                    // XQueryParser.g:187:11: pm_DefaultCollationDecl
                    {
                    root_0 = (XQDTCommonTree)adaptor.nil();

                    pushFollow(FOLLOW_pm_DefaultCollationDecl_in_p_Setter1395);
                    pm_DefaultCollationDecl16=pm_DefaultCollationDecl();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, pm_DefaultCollationDecl16.getTree());

                    }
                    break;
                case 3 :
                    // XQueryParser.g:188:11: pm_BaseURIDecl
                    {
                    root_0 = (XQDTCommonTree)adaptor.nil();

                    pushFollow(FOLLOW_pm_BaseURIDecl_in_p_Setter1407);
                    pm_BaseURIDecl17=pm_BaseURIDecl();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, pm_BaseURIDecl17.getTree());

                    }
                    break;
                case 4 :
                    // XQueryParser.g:189:11: pm_ConstructionDecl
                    {
                    root_0 = (XQDTCommonTree)adaptor.nil();

                    pushFollow(FOLLOW_pm_ConstructionDecl_in_p_Setter1419);
                    pm_ConstructionDecl18=pm_ConstructionDecl();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, pm_ConstructionDecl18.getTree());

                    }
                    break;
                case 5 :
                    // XQueryParser.g:190:11: pm_OrderingModeDecl
                    {
                    root_0 = (XQDTCommonTree)adaptor.nil();

                    pushFollow(FOLLOW_pm_OrderingModeDecl_in_p_Setter1431);
                    pm_OrderingModeDecl19=pm_OrderingModeDecl();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, pm_OrderingModeDecl19.getTree());

                    }
                    break;
                case 6 :
                    // XQueryParser.g:191:11: pm_EmptyOrderDecl
                    {
                    root_0 = (XQDTCommonTree)adaptor.nil();

                    pushFollow(FOLLOW_pm_EmptyOrderDecl_in_p_Setter1443);
                    pm_EmptyOrderDecl20=pm_EmptyOrderDecl();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, pm_EmptyOrderDecl20.getTree());

                    }
                    break;
                case 7 :
                    // XQueryParser.g:192:11: {...}? => pm_RevalidationDecl
                    {
                    root_0 = (XQDTCommonTree)adaptor.nil();

                    if ( !((lc(XQU))) ) {
                        if (state.backtracking>0) {state.failed=true; return retval;}
                        throw new FailedPredicateException(input, "p_Setter", "lc(XQU)");
                    }
                    pushFollow(FOLLOW_pm_RevalidationDecl_in_p_Setter1458);
                    pm_RevalidationDecl21=pm_RevalidationDecl();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, pm_RevalidationDecl21.getTree());

                    }
                    break;
                case 8 :
                    // XQueryParser.g:193:11: pm_CopyNamespacesDecl
                    {
                    root_0 = (XQDTCommonTree)adaptor.nil();

                    pushFollow(FOLLOW_pm_CopyNamespacesDecl_in_p_Setter1470);
                    pm_CopyNamespacesDecl22=pm_CopyNamespacesDecl();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, pm_CopyNamespacesDecl22.getTree());

                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (XQDTCommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (XQDTCommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "p_Setter"

    public static class p_Import_return extends ParserRuleReturnScope {
        XQDTCommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "p_Import"
    // XQueryParser.g:197:1: p_Import : ( pm_SchemaImport | pm_ModuleImport );
    public final XQueryParser.p_Import_return p_Import() throws RecognitionException {
        XQueryParser.p_Import_return retval = new XQueryParser.p_Import_return();
        retval.start = input.LT(1);

        XQDTCommonTree root_0 = null;

        XQueryParser.pm_SchemaImport_return pm_SchemaImport23 = null;

        XQueryParser.pm_ModuleImport_return pm_ModuleImport24 = null;



        try {
            // XQueryParser.g:198:9: ( pm_SchemaImport | pm_ModuleImport )
            int alt9=2;
            int LA9_0 = input.LA(1);

            if ( (LA9_0==IMPORT) ) {
                int LA9_1 = input.LA(2);

                if ( (LA9_1==SCHEMA) ) {
                    alt9=1;
                }
                else if ( (LA9_1==MODULE) ) {
                    alt9=2;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 9, 1, input);

                    throw nvae;
                }
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 9, 0, input);

                throw nvae;
            }
            switch (alt9) {
                case 1 :
                    // XQueryParser.g:198:11: pm_SchemaImport
                    {
                    root_0 = (XQDTCommonTree)adaptor.nil();

                    pushFollow(FOLLOW_pm_SchemaImport_in_p_Import1496);
                    pm_SchemaImport23=pm_SchemaImport();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, pm_SchemaImport23.getTree());

                    }
                    break;
                case 2 :
                    // XQueryParser.g:198:29: pm_ModuleImport
                    {
                    root_0 = (XQDTCommonTree)adaptor.nil();

                    pushFollow(FOLLOW_pm_ModuleImport_in_p_Import1500);
                    pm_ModuleImport24=pm_ModuleImport();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, pm_ModuleImport24.getTree());

                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (XQDTCommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (XQDTCommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "p_Import"

    public static class pm_NamespaceDecl_return extends ParserRuleReturnScope {
        XQDTCommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "pm_NamespaceDecl"
    // XQueryParser.g:205:1: pm_NamespaceDecl : k+= DECLARE k+= NAMESPACE nn= p_NCName EQUAL us= p_StringLiteral SEMICOLON -> ^( NamespaceDecl $nn $us) ;
    public final XQueryParser.pm_NamespaceDecl_return pm_NamespaceDecl() throws RecognitionException {
        XQueryParser.pm_NamespaceDecl_return retval = new XQueryParser.pm_NamespaceDecl_return();
        retval.start = input.LT(1);

        XQDTCommonTree root_0 = null;

        CommonToken EQUAL25=null;
        CommonToken SEMICOLON26=null;
        CommonToken k=null;
        List list_k=null;
        XQueryParser.p_NCName_return nn = null;

        XQueryParser.p_StringLiteral_return us = null;


        XQDTCommonTree EQUAL25_tree=null;
        XQDTCommonTree SEMICOLON26_tree=null;
        XQDTCommonTree k_tree=null;
        RewriteRuleTokenStream stream_DECLARE=new RewriteRuleTokenStream(adaptor,"token DECLARE");
        RewriteRuleTokenStream stream_SEMICOLON=new RewriteRuleTokenStream(adaptor,"token SEMICOLON");
        RewriteRuleTokenStream stream_NAMESPACE=new RewriteRuleTokenStream(adaptor,"token NAMESPACE");
        RewriteRuleTokenStream stream_EQUAL=new RewriteRuleTokenStream(adaptor,"token EQUAL");
        RewriteRuleSubtreeStream stream_p_NCName=new RewriteRuleSubtreeStream(adaptor,"rule p_NCName");
        RewriteRuleSubtreeStream stream_p_StringLiteral=new RewriteRuleSubtreeStream(adaptor,"rule p_StringLiteral");
        try {
            // XQueryParser.g:206:9: (k+= DECLARE k+= NAMESPACE nn= p_NCName EQUAL us= p_StringLiteral SEMICOLON -> ^( NamespaceDecl $nn $us) )
            // XQueryParser.g:206:11: k+= DECLARE k+= NAMESPACE nn= p_NCName EQUAL us= p_StringLiteral SEMICOLON
            {
            k=(CommonToken)match(input,DECLARE,FOLLOW_DECLARE_in_pm_NamespaceDecl1531); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_DECLARE.add(k);

            if (list_k==null) list_k=new ArrayList();
            list_k.add(k);

            k=(CommonToken)match(input,NAMESPACE,FOLLOW_NAMESPACE_in_pm_NamespaceDecl1535); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_NAMESPACE.add(k);

            if (list_k==null) list_k=new ArrayList();
            list_k.add(k);

            pushFollow(FOLLOW_p_NCName_in_pm_NamespaceDecl1539);
            nn=p_NCName();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_p_NCName.add(nn.getTree());
            EQUAL25=(CommonToken)match(input,EQUAL,FOLLOW_EQUAL_in_pm_NamespaceDecl1541); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_EQUAL.add(EQUAL25);

            pushFollow(FOLLOW_p_StringLiteral_in_pm_NamespaceDecl1545);
            us=p_StringLiteral();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_p_StringLiteral.add(us.getTree());
            SEMICOLON26=(CommonToken)match(input,SEMICOLON,FOLLOW_SEMICOLON_in_pm_NamespaceDecl1547); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_SEMICOLON.add(SEMICOLON26);

            if ( state.backtracking==0 ) {
              ak(list_k);
            }


            // AST REWRITE
            // elements: us, nn
            // token labels: 
            // rule labels: retval, nn, us
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
            RewriteRuleSubtreeStream stream_nn=new RewriteRuleSubtreeStream(adaptor,"rule nn",nn!=null?nn.tree:null);
            RewriteRuleSubtreeStream stream_us=new RewriteRuleSubtreeStream(adaptor,"rule us",us!=null?us.tree:null);

            root_0 = (XQDTCommonTree)adaptor.nil();
            // 207:17: -> ^( NamespaceDecl $nn $us)
            {
                // XQueryParser.g:207:20: ^( NamespaceDecl $nn $us)
                {
                XQDTCommonTree root_1 = (XQDTCommonTree)adaptor.nil();
                root_1 = (XQDTCommonTree)adaptor.becomeRoot((XQDTCommonTree)adaptor.create(NamespaceDecl, "NamespaceDecl"), root_1);

                adaptor.addChild(root_1, stream_nn.nextTree());
                adaptor.addChild(root_1, stream_us.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (XQDTCommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (XQDTCommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "pm_NamespaceDecl"

    public static class pm_BoundarySpaceDecl_return extends ParserRuleReturnScope {
        XQDTCommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "pm_BoundarySpaceDecl"
    // XQueryParser.g:211:1: pm_BoundarySpaceDecl : k+= DECLARE k+= BOUNDARY_SPACE (k+= PRESERVE | k+= STRIP ) SEMICOLON ;
    public final XQueryParser.pm_BoundarySpaceDecl_return pm_BoundarySpaceDecl() throws RecognitionException {
        XQueryParser.pm_BoundarySpaceDecl_return retval = new XQueryParser.pm_BoundarySpaceDecl_return();
        retval.start = input.LT(1);

        XQDTCommonTree root_0 = null;

        CommonToken SEMICOLON27=null;
        CommonToken k=null;
        List list_k=null;

        XQDTCommonTree SEMICOLON27_tree=null;
        XQDTCommonTree k_tree=null;

        try {
            // XQueryParser.g:212:9: (k+= DECLARE k+= BOUNDARY_SPACE (k+= PRESERVE | k+= STRIP ) SEMICOLON )
            // XQueryParser.g:212:13: k+= DECLARE k+= BOUNDARY_SPACE (k+= PRESERVE | k+= STRIP ) SEMICOLON
            {
            root_0 = (XQDTCommonTree)adaptor.nil();

            k=(CommonToken)match(input,DECLARE,FOLLOW_DECLARE_in_pm_BoundarySpaceDecl1612); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            k_tree = (XQDTCommonTree)adaptor.create(k);
            adaptor.addChild(root_0, k_tree);
            }
            if (list_k==null) list_k=new ArrayList();
            list_k.add(k);

            k=(CommonToken)match(input,BOUNDARY_SPACE,FOLLOW_BOUNDARY_SPACE_in_pm_BoundarySpaceDecl1616); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            k_tree = (XQDTCommonTree)adaptor.create(k);
            adaptor.addChild(root_0, k_tree);
            }
            if (list_k==null) list_k=new ArrayList();
            list_k.add(k);

            // XQueryParser.g:212:42: (k+= PRESERVE | k+= STRIP )
            int alt10=2;
            int LA10_0 = input.LA(1);

            if ( (LA10_0==PRESERVE) ) {
                alt10=1;
            }
            else if ( (LA10_0==STRIP) ) {
                alt10=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 10, 0, input);

                throw nvae;
            }
            switch (alt10) {
                case 1 :
                    // XQueryParser.g:212:43: k+= PRESERVE
                    {
                    k=(CommonToken)match(input,PRESERVE,FOLLOW_PRESERVE_in_pm_BoundarySpaceDecl1621); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    k_tree = (XQDTCommonTree)adaptor.create(k);
                    adaptor.addChild(root_0, k_tree);
                    }
                    if (list_k==null) list_k=new ArrayList();
                    list_k.add(k);


                    }
                    break;
                case 2 :
                    // XQueryParser.g:212:57: k+= STRIP
                    {
                    k=(CommonToken)match(input,STRIP,FOLLOW_STRIP_in_pm_BoundarySpaceDecl1627); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    k_tree = (XQDTCommonTree)adaptor.create(k);
                    adaptor.addChild(root_0, k_tree);
                    }
                    if (list_k==null) list_k=new ArrayList();
                    list_k.add(k);


                    }
                    break;

            }

            SEMICOLON27=(CommonToken)match(input,SEMICOLON,FOLLOW_SEMICOLON_in_pm_BoundarySpaceDecl1630); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            SEMICOLON27_tree = (XQDTCommonTree)adaptor.create(SEMICOLON27);
            adaptor.addChild(root_0, SEMICOLON27_tree);
            }
            if ( state.backtracking==0 ) {
              ak(list_k);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (XQDTCommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (XQDTCommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "pm_BoundarySpaceDecl"

    public static class pm_DefaultNamespaceDecl_return extends ParserRuleReturnScope {
        XQDTCommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "pm_DefaultNamespaceDecl"
    // XQueryParser.g:216:1: pm_DefaultNamespaceDecl : k+= DECLARE k+= DEFAULT (k+= ELEMENT | k+= FUNCTION ) k+= NAMESPACE p_StringLiteral SEMICOLON ;
    public final XQueryParser.pm_DefaultNamespaceDecl_return pm_DefaultNamespaceDecl() throws RecognitionException {
        XQueryParser.pm_DefaultNamespaceDecl_return retval = new XQueryParser.pm_DefaultNamespaceDecl_return();
        retval.start = input.LT(1);

        XQDTCommonTree root_0 = null;

        CommonToken SEMICOLON29=null;
        CommonToken k=null;
        List list_k=null;
        XQueryParser.p_StringLiteral_return p_StringLiteral28 = null;


        XQDTCommonTree SEMICOLON29_tree=null;
        XQDTCommonTree k_tree=null;

        try {
            // XQueryParser.g:217:9: (k+= DECLARE k+= DEFAULT (k+= ELEMENT | k+= FUNCTION ) k+= NAMESPACE p_StringLiteral SEMICOLON )
            // XQueryParser.g:217:11: k+= DECLARE k+= DEFAULT (k+= ELEMENT | k+= FUNCTION ) k+= NAMESPACE p_StringLiteral SEMICOLON
            {
            root_0 = (XQDTCommonTree)adaptor.nil();

            k=(CommonToken)match(input,DECLARE,FOLLOW_DECLARE_in_pm_DefaultNamespaceDecl1660); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            k_tree = (XQDTCommonTree)adaptor.create(k);
            adaptor.addChild(root_0, k_tree);
            }
            if (list_k==null) list_k=new ArrayList();
            list_k.add(k);

            k=(CommonToken)match(input,DEFAULT,FOLLOW_DEFAULT_in_pm_DefaultNamespaceDecl1664); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            k_tree = (XQDTCommonTree)adaptor.create(k);
            adaptor.addChild(root_0, k_tree);
            }
            if (list_k==null) list_k=new ArrayList();
            list_k.add(k);

            // XQueryParser.g:217:33: (k+= ELEMENT | k+= FUNCTION )
            int alt11=2;
            int LA11_0 = input.LA(1);

            if ( (LA11_0==ELEMENT) ) {
                alt11=1;
            }
            else if ( (LA11_0==FUNCTION) ) {
                alt11=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 11, 0, input);

                throw nvae;
            }
            switch (alt11) {
                case 1 :
                    // XQueryParser.g:217:34: k+= ELEMENT
                    {
                    k=(CommonToken)match(input,ELEMENT,FOLLOW_ELEMENT_in_pm_DefaultNamespaceDecl1669); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    k_tree = (XQDTCommonTree)adaptor.create(k);
                    adaptor.addChild(root_0, k_tree);
                    }
                    if (list_k==null) list_k=new ArrayList();
                    list_k.add(k);


                    }
                    break;
                case 2 :
                    // XQueryParser.g:217:47: k+= FUNCTION
                    {
                    k=(CommonToken)match(input,FUNCTION,FOLLOW_FUNCTION_in_pm_DefaultNamespaceDecl1675); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    k_tree = (XQDTCommonTree)adaptor.create(k);
                    adaptor.addChild(root_0, k_tree);
                    }
                    if (list_k==null) list_k=new ArrayList();
                    list_k.add(k);


                    }
                    break;

            }

            k=(CommonToken)match(input,NAMESPACE,FOLLOW_NAMESPACE_in_pm_DefaultNamespaceDecl1680); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            k_tree = (XQDTCommonTree)adaptor.create(k);
            adaptor.addChild(root_0, k_tree);
            }
            if (list_k==null) list_k=new ArrayList();
            list_k.add(k);

            pushFollow(FOLLOW_p_StringLiteral_in_pm_DefaultNamespaceDecl1682);
            p_StringLiteral28=p_StringLiteral();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, p_StringLiteral28.getTree());
            SEMICOLON29=(CommonToken)match(input,SEMICOLON,FOLLOW_SEMICOLON_in_pm_DefaultNamespaceDecl1684); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            SEMICOLON29_tree = (XQDTCommonTree)adaptor.create(SEMICOLON29);
            adaptor.addChild(root_0, SEMICOLON29_tree);
            }
            if ( state.backtracking==0 ) {
              ak(list_k);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (XQDTCommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (XQDTCommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "pm_DefaultNamespaceDecl"

    public static class pm_OptionDecl_return extends ParserRuleReturnScope {
        XQDTCommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "pm_OptionDecl"
    // XQueryParser.g:221:1: pm_OptionDecl : k+= DECLARE k+= OPTION p_QName p_StringLiteral SEMICOLON ;
    public final XQueryParser.pm_OptionDecl_return pm_OptionDecl() throws RecognitionException {
        XQueryParser.pm_OptionDecl_return retval = new XQueryParser.pm_OptionDecl_return();
        retval.start = input.LT(1);

        XQDTCommonTree root_0 = null;

        CommonToken SEMICOLON32=null;
        CommonToken k=null;
        List list_k=null;
        XQueryParser.p_QName_return p_QName30 = null;

        XQueryParser.p_StringLiteral_return p_StringLiteral31 = null;


        XQDTCommonTree SEMICOLON32_tree=null;
        XQDTCommonTree k_tree=null;

        try {
            // XQueryParser.g:222:9: (k+= DECLARE k+= OPTION p_QName p_StringLiteral SEMICOLON )
            // XQueryParser.g:222:13: k+= DECLARE k+= OPTION p_QName p_StringLiteral SEMICOLON
            {
            root_0 = (XQDTCommonTree)adaptor.nil();

            k=(CommonToken)match(input,DECLARE,FOLLOW_DECLARE_in_pm_OptionDecl1716); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            k_tree = (XQDTCommonTree)adaptor.create(k);
            adaptor.addChild(root_0, k_tree);
            }
            if (list_k==null) list_k=new ArrayList();
            list_k.add(k);

            k=(CommonToken)match(input,OPTION,FOLLOW_OPTION_in_pm_OptionDecl1720); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            k_tree = (XQDTCommonTree)adaptor.create(k);
            adaptor.addChild(root_0, k_tree);
            }
            if (list_k==null) list_k=new ArrayList();
            list_k.add(k);

            pushFollow(FOLLOW_p_QName_in_pm_OptionDecl1722);
            p_QName30=p_QName();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, p_QName30.getTree());
            pushFollow(FOLLOW_p_StringLiteral_in_pm_OptionDecl1724);
            p_StringLiteral31=p_StringLiteral();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, p_StringLiteral31.getTree());
            SEMICOLON32=(CommonToken)match(input,SEMICOLON,FOLLOW_SEMICOLON_in_pm_OptionDecl1726); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            SEMICOLON32_tree = (XQDTCommonTree)adaptor.create(SEMICOLON32);
            adaptor.addChild(root_0, SEMICOLON32_tree);
            }
            if ( state.backtracking==0 ) {
              ak(list_k);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (XQDTCommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (XQDTCommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "pm_OptionDecl"

    public static class pm_OrderingModeDecl_return extends ParserRuleReturnScope {
        XQDTCommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "pm_OrderingModeDecl"
    // XQueryParser.g:226:1: pm_OrderingModeDecl : k+= DECLARE k+= ORDERING (k+= ORDERED | k+= UNORDERED ) SEMICOLON ;
    public final XQueryParser.pm_OrderingModeDecl_return pm_OrderingModeDecl() throws RecognitionException {
        XQueryParser.pm_OrderingModeDecl_return retval = new XQueryParser.pm_OrderingModeDecl_return();
        retval.start = input.LT(1);

        XQDTCommonTree root_0 = null;

        CommonToken SEMICOLON33=null;
        CommonToken k=null;
        List list_k=null;

        XQDTCommonTree SEMICOLON33_tree=null;
        XQDTCommonTree k_tree=null;

        try {
            // XQueryParser.g:227:9: (k+= DECLARE k+= ORDERING (k+= ORDERED | k+= UNORDERED ) SEMICOLON )
            // XQueryParser.g:227:13: k+= DECLARE k+= ORDERING (k+= ORDERED | k+= UNORDERED ) SEMICOLON
            {
            root_0 = (XQDTCommonTree)adaptor.nil();

            k=(CommonToken)match(input,DECLARE,FOLLOW_DECLARE_in_pm_OrderingModeDecl1758); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            k_tree = (XQDTCommonTree)adaptor.create(k);
            adaptor.addChild(root_0, k_tree);
            }
            if (list_k==null) list_k=new ArrayList();
            list_k.add(k);

            k=(CommonToken)match(input,ORDERING,FOLLOW_ORDERING_in_pm_OrderingModeDecl1762); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            k_tree = (XQDTCommonTree)adaptor.create(k);
            adaptor.addChild(root_0, k_tree);
            }
            if (list_k==null) list_k=new ArrayList();
            list_k.add(k);

            // XQueryParser.g:227:36: (k+= ORDERED | k+= UNORDERED )
            int alt12=2;
            int LA12_0 = input.LA(1);

            if ( (LA12_0==ORDERED) ) {
                alt12=1;
            }
            else if ( (LA12_0==UNORDERED) ) {
                alt12=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 12, 0, input);

                throw nvae;
            }
            switch (alt12) {
                case 1 :
                    // XQueryParser.g:227:37: k+= ORDERED
                    {
                    k=(CommonToken)match(input,ORDERED,FOLLOW_ORDERED_in_pm_OrderingModeDecl1767); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    k_tree = (XQDTCommonTree)adaptor.create(k);
                    adaptor.addChild(root_0, k_tree);
                    }
                    if (list_k==null) list_k=new ArrayList();
                    list_k.add(k);


                    }
                    break;
                case 2 :
                    // XQueryParser.g:227:50: k+= UNORDERED
                    {
                    k=(CommonToken)match(input,UNORDERED,FOLLOW_UNORDERED_in_pm_OrderingModeDecl1773); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    k_tree = (XQDTCommonTree)adaptor.create(k);
                    adaptor.addChild(root_0, k_tree);
                    }
                    if (list_k==null) list_k=new ArrayList();
                    list_k.add(k);


                    }
                    break;

            }

            SEMICOLON33=(CommonToken)match(input,SEMICOLON,FOLLOW_SEMICOLON_in_pm_OrderingModeDecl1776); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            SEMICOLON33_tree = (XQDTCommonTree)adaptor.create(SEMICOLON33);
            adaptor.addChild(root_0, SEMICOLON33_tree);
            }
            if ( state.backtracking==0 ) {
              ak(list_k);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (XQDTCommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (XQDTCommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "pm_OrderingModeDecl"

    public static class pm_EmptyOrderDecl_return extends ParserRuleReturnScope {
        XQDTCommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "pm_EmptyOrderDecl"
    // XQueryParser.g:231:1: pm_EmptyOrderDecl : k+= DECLARE k+= DEFAULT k+= ORDER k+= EMPTY (k+= GREATEST | k+= LEAST ) SEMICOLON ;
    public final XQueryParser.pm_EmptyOrderDecl_return pm_EmptyOrderDecl() throws RecognitionException {
        XQueryParser.pm_EmptyOrderDecl_return retval = new XQueryParser.pm_EmptyOrderDecl_return();
        retval.start = input.LT(1);

        XQDTCommonTree root_0 = null;

        CommonToken SEMICOLON34=null;
        CommonToken k=null;
        List list_k=null;

        XQDTCommonTree SEMICOLON34_tree=null;
        XQDTCommonTree k_tree=null;

        try {
            // XQueryParser.g:232:9: (k+= DECLARE k+= DEFAULT k+= ORDER k+= EMPTY (k+= GREATEST | k+= LEAST ) SEMICOLON )
            // XQueryParser.g:232:13: k+= DECLARE k+= DEFAULT k+= ORDER k+= EMPTY (k+= GREATEST | k+= LEAST ) SEMICOLON
            {
            root_0 = (XQDTCommonTree)adaptor.nil();

            k=(CommonToken)match(input,DECLARE,FOLLOW_DECLARE_in_pm_EmptyOrderDecl1808); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            k_tree = (XQDTCommonTree)adaptor.create(k);
            adaptor.addChild(root_0, k_tree);
            }
            if (list_k==null) list_k=new ArrayList();
            list_k.add(k);

            k=(CommonToken)match(input,DEFAULT,FOLLOW_DEFAULT_in_pm_EmptyOrderDecl1812); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            k_tree = (XQDTCommonTree)adaptor.create(k);
            adaptor.addChild(root_0, k_tree);
            }
            if (list_k==null) list_k=new ArrayList();
            list_k.add(k);

            k=(CommonToken)match(input,ORDER,FOLLOW_ORDER_in_pm_EmptyOrderDecl1816); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            k_tree = (XQDTCommonTree)adaptor.create(k);
            adaptor.addChild(root_0, k_tree);
            }
            if (list_k==null) list_k=new ArrayList();
            list_k.add(k);

            k=(CommonToken)match(input,EMPTY,FOLLOW_EMPTY_in_pm_EmptyOrderDecl1820); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            k_tree = (XQDTCommonTree)adaptor.create(k);
            adaptor.addChild(root_0, k_tree);
            }
            if (list_k==null) list_k=new ArrayList();
            list_k.add(k);

            // XQueryParser.g:232:53: (k+= GREATEST | k+= LEAST )
            int alt13=2;
            int LA13_0 = input.LA(1);

            if ( (LA13_0==GREATEST) ) {
                alt13=1;
            }
            else if ( (LA13_0==LEAST) ) {
                alt13=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 13, 0, input);

                throw nvae;
            }
            switch (alt13) {
                case 1 :
                    // XQueryParser.g:232:54: k+= GREATEST
                    {
                    k=(CommonToken)match(input,GREATEST,FOLLOW_GREATEST_in_pm_EmptyOrderDecl1825); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    k_tree = (XQDTCommonTree)adaptor.create(k);
                    adaptor.addChild(root_0, k_tree);
                    }
                    if (list_k==null) list_k=new ArrayList();
                    list_k.add(k);


                    }
                    break;
                case 2 :
                    // XQueryParser.g:232:68: k+= LEAST
                    {
                    k=(CommonToken)match(input,LEAST,FOLLOW_LEAST_in_pm_EmptyOrderDecl1831); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    k_tree = (XQDTCommonTree)adaptor.create(k);
                    adaptor.addChild(root_0, k_tree);
                    }
                    if (list_k==null) list_k=new ArrayList();
                    list_k.add(k);


                    }
                    break;

            }

            SEMICOLON34=(CommonToken)match(input,SEMICOLON,FOLLOW_SEMICOLON_in_pm_EmptyOrderDecl1834); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            SEMICOLON34_tree = (XQDTCommonTree)adaptor.create(SEMICOLON34);
            adaptor.addChild(root_0, SEMICOLON34_tree);
            }
            if ( state.backtracking==0 ) {
              ak(list_k);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (XQDTCommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (XQDTCommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "pm_EmptyOrderDecl"

    public static class pm_CopyNamespacesDecl_return extends ParserRuleReturnScope {
        XQDTCommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "pm_CopyNamespacesDecl"
    // XQueryParser.g:236:1: pm_CopyNamespacesDecl : k+= DECLARE k+= COPY_NAMESPACES p_PreserveMode COMMA p_InheritMode SEMICOLON ;
    public final XQueryParser.pm_CopyNamespacesDecl_return pm_CopyNamespacesDecl() throws RecognitionException {
        XQueryParser.pm_CopyNamespacesDecl_return retval = new XQueryParser.pm_CopyNamespacesDecl_return();
        retval.start = input.LT(1);

        XQDTCommonTree root_0 = null;

        CommonToken COMMA36=null;
        CommonToken SEMICOLON38=null;
        CommonToken k=null;
        List list_k=null;
        XQueryParser.p_PreserveMode_return p_PreserveMode35 = null;

        XQueryParser.p_InheritMode_return p_InheritMode37 = null;


        XQDTCommonTree COMMA36_tree=null;
        XQDTCommonTree SEMICOLON38_tree=null;
        XQDTCommonTree k_tree=null;

        try {
            // XQueryParser.g:237:9: (k+= DECLARE k+= COPY_NAMESPACES p_PreserveMode COMMA p_InheritMode SEMICOLON )
            // XQueryParser.g:237:13: k+= DECLARE k+= COPY_NAMESPACES p_PreserveMode COMMA p_InheritMode SEMICOLON
            {
            root_0 = (XQDTCommonTree)adaptor.nil();

            k=(CommonToken)match(input,DECLARE,FOLLOW_DECLARE_in_pm_CopyNamespacesDecl1866); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            k_tree = (XQDTCommonTree)adaptor.create(k);
            adaptor.addChild(root_0, k_tree);
            }
            if (list_k==null) list_k=new ArrayList();
            list_k.add(k);

            k=(CommonToken)match(input,COPY_NAMESPACES,FOLLOW_COPY_NAMESPACES_in_pm_CopyNamespacesDecl1870); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            k_tree = (XQDTCommonTree)adaptor.create(k);
            adaptor.addChild(root_0, k_tree);
            }
            if (list_k==null) list_k=new ArrayList();
            list_k.add(k);

            pushFollow(FOLLOW_p_PreserveMode_in_pm_CopyNamespacesDecl1872);
            p_PreserveMode35=p_PreserveMode();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, p_PreserveMode35.getTree());
            COMMA36=(CommonToken)match(input,COMMA,FOLLOW_COMMA_in_pm_CopyNamespacesDecl1874); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            COMMA36_tree = (XQDTCommonTree)adaptor.create(COMMA36);
            adaptor.addChild(root_0, COMMA36_tree);
            }
            pushFollow(FOLLOW_p_InheritMode_in_pm_CopyNamespacesDecl1876);
            p_InheritMode37=p_InheritMode();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, p_InheritMode37.getTree());
            SEMICOLON38=(CommonToken)match(input,SEMICOLON,FOLLOW_SEMICOLON_in_pm_CopyNamespacesDecl1878); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            SEMICOLON38_tree = (XQDTCommonTree)adaptor.create(SEMICOLON38);
            adaptor.addChild(root_0, SEMICOLON38_tree);
            }
            if ( state.backtracking==0 ) {
              ak(list_k);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (XQDTCommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (XQDTCommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "pm_CopyNamespacesDecl"

    public static class p_DecimalFormatDecl_return extends ParserRuleReturnScope {
        XQDTCommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "p_DecimalFormatDecl"
    // XQueryParser.g:241:1: p_DecimalFormatDecl : k+= DECLARE ( ( DECIMAL_FORMAT p_QName ) | ( DEFAULT DECIMAL_FORMAT ) ) ( p_DFPropertyName ) EQ p_StringLiteral SEMICOLON ;
    public final XQueryParser.p_DecimalFormatDecl_return p_DecimalFormatDecl() throws RecognitionException {
        XQueryParser.p_DecimalFormatDecl_return retval = new XQueryParser.p_DecimalFormatDecl_return();
        retval.start = input.LT(1);

        XQDTCommonTree root_0 = null;

        CommonToken DECIMAL_FORMAT39=null;
        CommonToken DEFAULT41=null;
        CommonToken DECIMAL_FORMAT42=null;
        CommonToken EQ44=null;
        CommonToken SEMICOLON46=null;
        CommonToken k=null;
        List list_k=null;
        XQueryParser.p_QName_return p_QName40 = null;

        XQueryParser.p_DFPropertyName_return p_DFPropertyName43 = null;

        XQueryParser.p_StringLiteral_return p_StringLiteral45 = null;


        XQDTCommonTree DECIMAL_FORMAT39_tree=null;
        XQDTCommonTree DEFAULT41_tree=null;
        XQDTCommonTree DECIMAL_FORMAT42_tree=null;
        XQDTCommonTree EQ44_tree=null;
        XQDTCommonTree SEMICOLON46_tree=null;
        XQDTCommonTree k_tree=null;

        try {
            // XQueryParser.g:242:9: (k+= DECLARE ( ( DECIMAL_FORMAT p_QName ) | ( DEFAULT DECIMAL_FORMAT ) ) ( p_DFPropertyName ) EQ p_StringLiteral SEMICOLON )
            // XQueryParser.g:242:13: k+= DECLARE ( ( DECIMAL_FORMAT p_QName ) | ( DEFAULT DECIMAL_FORMAT ) ) ( p_DFPropertyName ) EQ p_StringLiteral SEMICOLON
            {
            root_0 = (XQDTCommonTree)adaptor.nil();

            k=(CommonToken)match(input,DECLARE,FOLLOW_DECLARE_in_p_DecimalFormatDecl1910); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            k_tree = (XQDTCommonTree)adaptor.create(k);
            adaptor.addChild(root_0, k_tree);
            }
            if (list_k==null) list_k=new ArrayList();
            list_k.add(k);

            // XQueryParser.g:242:24: ( ( DECIMAL_FORMAT p_QName ) | ( DEFAULT DECIMAL_FORMAT ) )
            int alt14=2;
            int LA14_0 = input.LA(1);

            if ( (LA14_0==DECIMAL_FORMAT) ) {
                alt14=1;
            }
            else if ( (LA14_0==DEFAULT) ) {
                alt14=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 14, 0, input);

                throw nvae;
            }
            switch (alt14) {
                case 1 :
                    // XQueryParser.g:242:25: ( DECIMAL_FORMAT p_QName )
                    {
                    // XQueryParser.g:242:25: ( DECIMAL_FORMAT p_QName )
                    // XQueryParser.g:242:26: DECIMAL_FORMAT p_QName
                    {
                    DECIMAL_FORMAT39=(CommonToken)match(input,DECIMAL_FORMAT,FOLLOW_DECIMAL_FORMAT_in_p_DecimalFormatDecl1914); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    DECIMAL_FORMAT39_tree = (XQDTCommonTree)adaptor.create(DECIMAL_FORMAT39);
                    adaptor.addChild(root_0, DECIMAL_FORMAT39_tree);
                    }
                    pushFollow(FOLLOW_p_QName_in_p_DecimalFormatDecl1916);
                    p_QName40=p_QName();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, p_QName40.getTree());

                    }


                    }
                    break;
                case 2 :
                    // XQueryParser.g:242:52: ( DEFAULT DECIMAL_FORMAT )
                    {
                    // XQueryParser.g:242:52: ( DEFAULT DECIMAL_FORMAT )
                    // XQueryParser.g:242:53: DEFAULT DECIMAL_FORMAT
                    {
                    DEFAULT41=(CommonToken)match(input,DEFAULT,FOLLOW_DEFAULT_in_p_DecimalFormatDecl1922); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    DEFAULT41_tree = (XQDTCommonTree)adaptor.create(DEFAULT41);
                    adaptor.addChild(root_0, DEFAULT41_tree);
                    }
                    DECIMAL_FORMAT42=(CommonToken)match(input,DECIMAL_FORMAT,FOLLOW_DECIMAL_FORMAT_in_p_DecimalFormatDecl1924); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    DECIMAL_FORMAT42_tree = (XQDTCommonTree)adaptor.create(DECIMAL_FORMAT42);
                    adaptor.addChild(root_0, DECIMAL_FORMAT42_tree);
                    }

                    }


                    }
                    break;

            }

            // XQueryParser.g:242:78: ( p_DFPropertyName )
            // XQueryParser.g:242:79: p_DFPropertyName
            {
            pushFollow(FOLLOW_p_DFPropertyName_in_p_DecimalFormatDecl1929);
            p_DFPropertyName43=p_DFPropertyName();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, p_DFPropertyName43.getTree());

            }

            EQ44=(CommonToken)match(input,EQ,FOLLOW_EQ_in_p_DecimalFormatDecl1932); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            EQ44_tree = (XQDTCommonTree)adaptor.create(EQ44);
            adaptor.addChild(root_0, EQ44_tree);
            }
            pushFollow(FOLLOW_p_StringLiteral_in_p_DecimalFormatDecl1934);
            p_StringLiteral45=p_StringLiteral();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, p_StringLiteral45.getTree());
            SEMICOLON46=(CommonToken)match(input,SEMICOLON,FOLLOW_SEMICOLON_in_p_DecimalFormatDecl1936); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            SEMICOLON46_tree = (XQDTCommonTree)adaptor.create(SEMICOLON46);
            adaptor.addChild(root_0, SEMICOLON46_tree);
            }
            if ( state.backtracking==0 ) {
              ak(list_k);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (XQDTCommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (XQDTCommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "p_DecimalFormatDecl"

    public static class p_DFPropertyName_return extends ParserRuleReturnScope {
        XQDTCommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "p_DFPropertyName"
    // XQueryParser.g:246:1: p_DFPropertyName : (k= DECIMAL_SEPARATOR | k= GROUPING_SEPARATOR | k= INFINITY | k= MINUS_SIGN | k= NAN | k= PERCENT | k= PER_MILLE | k= ZERO_DIGIT | k= DIGIT | k= PATTERN_SEPARATOR );
    public final XQueryParser.p_DFPropertyName_return p_DFPropertyName() throws RecognitionException {
        XQueryParser.p_DFPropertyName_return retval = new XQueryParser.p_DFPropertyName_return();
        retval.start = input.LT(1);

        XQDTCommonTree root_0 = null;

        CommonToken k=null;

        XQDTCommonTree k_tree=null;

        try {
            // XQueryParser.g:247:9: (k= DECIMAL_SEPARATOR | k= GROUPING_SEPARATOR | k= INFINITY | k= MINUS_SIGN | k= NAN | k= PERCENT | k= PER_MILLE | k= ZERO_DIGIT | k= DIGIT | k= PATTERN_SEPARATOR )
            int alt15=10;
            switch ( input.LA(1) ) {
            case DECIMAL_SEPARATOR:
                {
                alt15=1;
                }
                break;
            case GROUPING_SEPARATOR:
                {
                alt15=2;
                }
                break;
            case INFINITY:
                {
                alt15=3;
                }
                break;
            case MINUS_SIGN:
                {
                alt15=4;
                }
                break;
            case NAN:
                {
                alt15=5;
                }
                break;
            case PERCENT:
                {
                alt15=6;
                }
                break;
            case PER_MILLE:
                {
                alt15=7;
                }
                break;
            case ZERO_DIGIT:
                {
                alt15=8;
                }
                break;
            case DIGIT:
                {
                alt15=9;
                }
                break;
            case PATTERN_SEPARATOR:
                {
                alt15=10;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 15, 0, input);

                throw nvae;
            }

            switch (alt15) {
                case 1 :
                    // XQueryParser.g:247:11: k= DECIMAL_SEPARATOR
                    {
                    root_0 = (XQDTCommonTree)adaptor.nil();

                    k=(CommonToken)match(input,DECIMAL_SEPARATOR,FOLLOW_DECIMAL_SEPARATOR_in_p_DFPropertyName1966); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    k_tree = (XQDTCommonTree)adaptor.create(k);
                    adaptor.addChild(root_0, k_tree);
                    }

                    }
                    break;
                case 2 :
                    // XQueryParser.g:247:33: k= GROUPING_SEPARATOR
                    {
                    root_0 = (XQDTCommonTree)adaptor.nil();

                    k=(CommonToken)match(input,GROUPING_SEPARATOR,FOLLOW_GROUPING_SEPARATOR_in_p_DFPropertyName1972); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    k_tree = (XQDTCommonTree)adaptor.create(k);
                    adaptor.addChild(root_0, k_tree);
                    }

                    }
                    break;
                case 3 :
                    // XQueryParser.g:247:56: k= INFINITY
                    {
                    root_0 = (XQDTCommonTree)adaptor.nil();

                    k=(CommonToken)match(input,INFINITY,FOLLOW_INFINITY_in_p_DFPropertyName1978); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    k_tree = (XQDTCommonTree)adaptor.create(k);
                    adaptor.addChild(root_0, k_tree);
                    }

                    }
                    break;
                case 4 :
                    // XQueryParser.g:247:69: k= MINUS_SIGN
                    {
                    root_0 = (XQDTCommonTree)adaptor.nil();

                    k=(CommonToken)match(input,MINUS_SIGN,FOLLOW_MINUS_SIGN_in_p_DFPropertyName1984); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    k_tree = (XQDTCommonTree)adaptor.create(k);
                    adaptor.addChild(root_0, k_tree);
                    }

                    }
                    break;
                case 5 :
                    // XQueryParser.g:247:84: k= NAN
                    {
                    root_0 = (XQDTCommonTree)adaptor.nil();

                    k=(CommonToken)match(input,NAN,FOLLOW_NAN_in_p_DFPropertyName1990); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    k_tree = (XQDTCommonTree)adaptor.create(k);
                    adaptor.addChild(root_0, k_tree);
                    }

                    }
                    break;
                case 6 :
                    // XQueryParser.g:247:92: k= PERCENT
                    {
                    root_0 = (XQDTCommonTree)adaptor.nil();

                    k=(CommonToken)match(input,PERCENT,FOLLOW_PERCENT_in_p_DFPropertyName1996); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    k_tree = (XQDTCommonTree)adaptor.create(k);
                    adaptor.addChild(root_0, k_tree);
                    }

                    }
                    break;
                case 7 :
                    // XQueryParser.g:247:104: k= PER_MILLE
                    {
                    root_0 = (XQDTCommonTree)adaptor.nil();

                    k=(CommonToken)match(input,PER_MILLE,FOLLOW_PER_MILLE_in_p_DFPropertyName2002); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    k_tree = (XQDTCommonTree)adaptor.create(k);
                    adaptor.addChild(root_0, k_tree);
                    }

                    }
                    break;
                case 8 :
                    // XQueryParser.g:247:118: k= ZERO_DIGIT
                    {
                    root_0 = (XQDTCommonTree)adaptor.nil();

                    k=(CommonToken)match(input,ZERO_DIGIT,FOLLOW_ZERO_DIGIT_in_p_DFPropertyName2008); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    k_tree = (XQDTCommonTree)adaptor.create(k);
                    adaptor.addChild(root_0, k_tree);
                    }

                    }
                    break;
                case 9 :
                    // XQueryParser.g:247:133: k= DIGIT
                    {
                    root_0 = (XQDTCommonTree)adaptor.nil();

                    k=(CommonToken)match(input,DIGIT,FOLLOW_DIGIT_in_p_DFPropertyName2014); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    k_tree = (XQDTCommonTree)adaptor.create(k);
                    adaptor.addChild(root_0, k_tree);
                    }

                    }
                    break;
                case 10 :
                    // XQueryParser.g:247:143: k= PATTERN_SEPARATOR
                    {
                    root_0 = (XQDTCommonTree)adaptor.nil();

                    k=(CommonToken)match(input,PATTERN_SEPARATOR,FOLLOW_PATTERN_SEPARATOR_in_p_DFPropertyName2020); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    k_tree = (XQDTCommonTree)adaptor.create(k);
                    adaptor.addChild(root_0, k_tree);
                    }
                    if ( state.backtracking==0 ) {
                      ak(k);
                    }

                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (XQDTCommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (XQDTCommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "p_DFPropertyName"

    public static class p_PreserveMode_return extends ParserRuleReturnScope {
        XQDTCommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "p_PreserveMode"
    // XQueryParser.g:251:1: p_PreserveMode : (k+= PRESERVE | k+= NO_PRESERVE ) ;
    public final XQueryParser.p_PreserveMode_return p_PreserveMode() throws RecognitionException {
        XQueryParser.p_PreserveMode_return retval = new XQueryParser.p_PreserveMode_return();
        retval.start = input.LT(1);

        XQDTCommonTree root_0 = null;

        CommonToken k=null;
        List list_k=null;

        XQDTCommonTree k_tree=null;

        try {
            // XQueryParser.g:252:9: ( (k+= PRESERVE | k+= NO_PRESERVE ) )
            // XQueryParser.g:252:13: (k+= PRESERVE | k+= NO_PRESERVE )
            {
            root_0 = (XQDTCommonTree)adaptor.nil();

            // XQueryParser.g:252:13: (k+= PRESERVE | k+= NO_PRESERVE )
            int alt16=2;
            int LA16_0 = input.LA(1);

            if ( (LA16_0==PRESERVE) ) {
                alt16=1;
            }
            else if ( (LA16_0==NO_PRESERVE) ) {
                alt16=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 16, 0, input);

                throw nvae;
            }
            switch (alt16) {
                case 1 :
                    // XQueryParser.g:252:14: k+= PRESERVE
                    {
                    k=(CommonToken)match(input,PRESERVE,FOLLOW_PRESERVE_in_p_PreserveMode2053); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    k_tree = (XQDTCommonTree)adaptor.create(k);
                    adaptor.addChild(root_0, k_tree);
                    }
                    if (list_k==null) list_k=new ArrayList();
                    list_k.add(k);


                    }
                    break;
                case 2 :
                    // XQueryParser.g:252:28: k+= NO_PRESERVE
                    {
                    k=(CommonToken)match(input,NO_PRESERVE,FOLLOW_NO_PRESERVE_in_p_PreserveMode2059); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    k_tree = (XQDTCommonTree)adaptor.create(k);
                    adaptor.addChild(root_0, k_tree);
                    }
                    if (list_k==null) list_k=new ArrayList();
                    list_k.add(k);


                    }
                    break;

            }

            if ( state.backtracking==0 ) {
              ak(list_k);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (XQDTCommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (XQDTCommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "p_PreserveMode"

    public static class p_InheritMode_return extends ParserRuleReturnScope {
        XQDTCommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "p_InheritMode"
    // XQueryParser.g:256:1: p_InheritMode : (k+= INHERIT | k+= NO_INHERIT ) ;
    public final XQueryParser.p_InheritMode_return p_InheritMode() throws RecognitionException {
        XQueryParser.p_InheritMode_return retval = new XQueryParser.p_InheritMode_return();
        retval.start = input.LT(1);

        XQDTCommonTree root_0 = null;

        CommonToken k=null;
        List list_k=null;

        XQDTCommonTree k_tree=null;

        try {
            // XQueryParser.g:257:9: ( (k+= INHERIT | k+= NO_INHERIT ) )
            // XQueryParser.g:257:13: (k+= INHERIT | k+= NO_INHERIT )
            {
            root_0 = (XQDTCommonTree)adaptor.nil();

            // XQueryParser.g:257:13: (k+= INHERIT | k+= NO_INHERIT )
            int alt17=2;
            int LA17_0 = input.LA(1);

            if ( (LA17_0==INHERIT) ) {
                alt17=1;
            }
            else if ( (LA17_0==NO_INHERIT) ) {
                alt17=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 17, 0, input);

                throw nvae;
            }
            switch (alt17) {
                case 1 :
                    // XQueryParser.g:257:14: k+= INHERIT
                    {
                    k=(CommonToken)match(input,INHERIT,FOLLOW_INHERIT_in_p_InheritMode2093); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    k_tree = (XQDTCommonTree)adaptor.create(k);
                    adaptor.addChild(root_0, k_tree);
                    }
                    if (list_k==null) list_k=new ArrayList();
                    list_k.add(k);


                    }
                    break;
                case 2 :
                    // XQueryParser.g:257:27: k+= NO_INHERIT
                    {
                    k=(CommonToken)match(input,NO_INHERIT,FOLLOW_NO_INHERIT_in_p_InheritMode2099); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    k_tree = (XQDTCommonTree)adaptor.create(k);
                    adaptor.addChild(root_0, k_tree);
                    }
                    if (list_k==null) list_k=new ArrayList();
                    list_k.add(k);


                    }
                    break;

            }

            if ( state.backtracking==0 ) {
              ak(list_k);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (XQDTCommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (XQDTCommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "p_InheritMode"

    public static class pm_DefaultCollationDecl_return extends ParserRuleReturnScope {
        XQDTCommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "pm_DefaultCollationDecl"
    // XQueryParser.g:261:1: pm_DefaultCollationDecl : k+= DECLARE k+= DEFAULT k+= COLLATION p_StringLiteral SEMICOLON ;
    public final XQueryParser.pm_DefaultCollationDecl_return pm_DefaultCollationDecl() throws RecognitionException {
        XQueryParser.pm_DefaultCollationDecl_return retval = new XQueryParser.pm_DefaultCollationDecl_return();
        retval.start = input.LT(1);

        XQDTCommonTree root_0 = null;

        CommonToken SEMICOLON48=null;
        CommonToken k=null;
        List list_k=null;
        XQueryParser.p_StringLiteral_return p_StringLiteral47 = null;


        XQDTCommonTree SEMICOLON48_tree=null;
        XQDTCommonTree k_tree=null;

        try {
            // XQueryParser.g:262:9: (k+= DECLARE k+= DEFAULT k+= COLLATION p_StringLiteral SEMICOLON )
            // XQueryParser.g:262:13: k+= DECLARE k+= DEFAULT k+= COLLATION p_StringLiteral SEMICOLON
            {
            root_0 = (XQDTCommonTree)adaptor.nil();

            k=(CommonToken)match(input,DECLARE,FOLLOW_DECLARE_in_pm_DefaultCollationDecl2140); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            k_tree = (XQDTCommonTree)adaptor.create(k);
            adaptor.addChild(root_0, k_tree);
            }
            if (list_k==null) list_k=new ArrayList();
            list_k.add(k);

            k=(CommonToken)match(input,DEFAULT,FOLLOW_DEFAULT_in_pm_DefaultCollationDecl2144); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            k_tree = (XQDTCommonTree)adaptor.create(k);
            adaptor.addChild(root_0, k_tree);
            }
            if (list_k==null) list_k=new ArrayList();
            list_k.add(k);

            k=(CommonToken)match(input,COLLATION,FOLLOW_COLLATION_in_pm_DefaultCollationDecl2148); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            k_tree = (XQDTCommonTree)adaptor.create(k);
            adaptor.addChild(root_0, k_tree);
            }
            if (list_k==null) list_k=new ArrayList();
            list_k.add(k);

            pushFollow(FOLLOW_p_StringLiteral_in_pm_DefaultCollationDecl2150);
            p_StringLiteral47=p_StringLiteral();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, p_StringLiteral47.getTree());
            SEMICOLON48=(CommonToken)match(input,SEMICOLON,FOLLOW_SEMICOLON_in_pm_DefaultCollationDecl2152); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            SEMICOLON48_tree = (XQDTCommonTree)adaptor.create(SEMICOLON48);
            adaptor.addChild(root_0, SEMICOLON48_tree);
            }
            if ( state.backtracking==0 ) {
              ak(list_k);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (XQDTCommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (XQDTCommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "pm_DefaultCollationDecl"

    public static class pm_BaseURIDecl_return extends ParserRuleReturnScope {
        XQDTCommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "pm_BaseURIDecl"
    // XQueryParser.g:266:1: pm_BaseURIDecl : k+= DECLARE k+= BASE_URI sl= p_StringLiteral SEMICOLON -> ^( BaseURIDecl $sl) ;
    public final XQueryParser.pm_BaseURIDecl_return pm_BaseURIDecl() throws RecognitionException {
        XQueryParser.pm_BaseURIDecl_return retval = new XQueryParser.pm_BaseURIDecl_return();
        retval.start = input.LT(1);

        XQDTCommonTree root_0 = null;

        CommonToken SEMICOLON49=null;
        CommonToken k=null;
        List list_k=null;
        XQueryParser.p_StringLiteral_return sl = null;


        XQDTCommonTree SEMICOLON49_tree=null;
        XQDTCommonTree k_tree=null;
        RewriteRuleTokenStream stream_DECLARE=new RewriteRuleTokenStream(adaptor,"token DECLARE");
        RewriteRuleTokenStream stream_SEMICOLON=new RewriteRuleTokenStream(adaptor,"token SEMICOLON");
        RewriteRuleTokenStream stream_BASE_URI=new RewriteRuleTokenStream(adaptor,"token BASE_URI");
        RewriteRuleSubtreeStream stream_p_StringLiteral=new RewriteRuleSubtreeStream(adaptor,"rule p_StringLiteral");
        try {
            // XQueryParser.g:267:9: (k+= DECLARE k+= BASE_URI sl= p_StringLiteral SEMICOLON -> ^( BaseURIDecl $sl) )
            // XQueryParser.g:267:13: k+= DECLARE k+= BASE_URI sl= p_StringLiteral SEMICOLON
            {
            k=(CommonToken)match(input,DECLARE,FOLLOW_DECLARE_in_pm_BaseURIDecl2192); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_DECLARE.add(k);

            if (list_k==null) list_k=new ArrayList();
            list_k.add(k);

            k=(CommonToken)match(input,BASE_URI,FOLLOW_BASE_URI_in_pm_BaseURIDecl2196); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_BASE_URI.add(k);

            if (list_k==null) list_k=new ArrayList();
            list_k.add(k);

            pushFollow(FOLLOW_p_StringLiteral_in_pm_BaseURIDecl2200);
            sl=p_StringLiteral();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_p_StringLiteral.add(sl.getTree());
            SEMICOLON49=(CommonToken)match(input,SEMICOLON,FOLLOW_SEMICOLON_in_pm_BaseURIDecl2202); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_SEMICOLON.add(SEMICOLON49);

            if ( state.backtracking==0 ) {
              ak(list_k);
            }


            // AST REWRITE
            // elements: sl
            // token labels: 
            // rule labels: sl, retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_sl=new RewriteRuleSubtreeStream(adaptor,"rule sl",sl!=null?sl.tree:null);
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (XQDTCommonTree)adaptor.nil();
            // 268:17: -> ^( BaseURIDecl $sl)
            {
                // XQueryParser.g:268:20: ^( BaseURIDecl $sl)
                {
                XQDTCommonTree root_1 = (XQDTCommonTree)adaptor.nil();
                root_1 = (XQDTCommonTree)adaptor.becomeRoot((XQDTCommonTree)adaptor.create(BaseURIDecl, "BaseURIDecl"), root_1);

                adaptor.addChild(root_1, stream_sl.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (XQDTCommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (XQDTCommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "pm_BaseURIDecl"

    public static class pm_SchemaImport_return extends ParserRuleReturnScope {
        XQDTCommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "pm_SchemaImport"
    // XQueryParser.g:272:1: pm_SchemaImport : k+= IMPORT k+= SCHEMA (sp= p_SchemaPrefix )? us= p_StringLiteral (k+= AT ah+= p_StringLiteral ( COMMA ah+= p_StringLiteral )* )? SEMICOLON -> ^( SchemaImport ^( SchemaPrefix ( $sp)? ) $us ^( AtHints ( $ah)* ) ) ;
    public final XQueryParser.pm_SchemaImport_return pm_SchemaImport() throws RecognitionException {
        XQueryParser.pm_SchemaImport_return retval = new XQueryParser.pm_SchemaImport_return();
        retval.start = input.LT(1);

        XQDTCommonTree root_0 = null;

        CommonToken COMMA50=null;
        CommonToken SEMICOLON51=null;
        CommonToken k=null;
        List list_k=null;
        List list_ah=null;
        XQueryParser.p_SchemaPrefix_return sp = null;

        XQueryParser.p_StringLiteral_return us = null;

        XQueryParser.p_StringLiteral_return ah = null;
         ah = null;
        XQDTCommonTree COMMA50_tree=null;
        XQDTCommonTree SEMICOLON51_tree=null;
        XQDTCommonTree k_tree=null;
        RewriteRuleTokenStream stream_AT=new RewriteRuleTokenStream(adaptor,"token AT");
        RewriteRuleTokenStream stream_IMPORT=new RewriteRuleTokenStream(adaptor,"token IMPORT");
        RewriteRuleTokenStream stream_SCHEMA=new RewriteRuleTokenStream(adaptor,"token SCHEMA");
        RewriteRuleTokenStream stream_SEMICOLON=new RewriteRuleTokenStream(adaptor,"token SEMICOLON");
        RewriteRuleTokenStream stream_COMMA=new RewriteRuleTokenStream(adaptor,"token COMMA");
        RewriteRuleSubtreeStream stream_p_SchemaPrefix=new RewriteRuleSubtreeStream(adaptor,"rule p_SchemaPrefix");
        RewriteRuleSubtreeStream stream_p_StringLiteral=new RewriteRuleSubtreeStream(adaptor,"rule p_StringLiteral");
        try {
            // XQueryParser.g:273:9: (k+= IMPORT k+= SCHEMA (sp= p_SchemaPrefix )? us= p_StringLiteral (k+= AT ah+= p_StringLiteral ( COMMA ah+= p_StringLiteral )* )? SEMICOLON -> ^( SchemaImport ^( SchemaPrefix ( $sp)? ) $us ^( AtHints ( $ah)* ) ) )
            // XQueryParser.g:273:11: k+= IMPORT k+= SCHEMA (sp= p_SchemaPrefix )? us= p_StringLiteral (k+= AT ah+= p_StringLiteral ( COMMA ah+= p_StringLiteral )* )? SEMICOLON
            {
            k=(CommonToken)match(input,IMPORT,FOLLOW_IMPORT_in_pm_SchemaImport2257); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_IMPORT.add(k);

            if (list_k==null) list_k=new ArrayList();
            list_k.add(k);

            k=(CommonToken)match(input,SCHEMA,FOLLOW_SCHEMA_in_pm_SchemaImport2261); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_SCHEMA.add(k);

            if (list_k==null) list_k=new ArrayList();
            list_k.add(k);

            // XQueryParser.g:273:33: (sp= p_SchemaPrefix )?
            int alt18=2;
            int LA18_0 = input.LA(1);

            if ( (LA18_0==DEFAULT||LA18_0==NAMESPACE) ) {
                alt18=1;
            }
            switch (alt18) {
                case 1 :
                    // XQueryParser.g:273:33: sp= p_SchemaPrefix
                    {
                    pushFollow(FOLLOW_p_SchemaPrefix_in_pm_SchemaImport2265);
                    sp=p_SchemaPrefix();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_p_SchemaPrefix.add(sp.getTree());

                    }
                    break;

            }

            pushFollow(FOLLOW_p_StringLiteral_in_pm_SchemaImport2270);
            us=p_StringLiteral();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_p_StringLiteral.add(us.getTree());
            // XQueryParser.g:273:69: (k+= AT ah+= p_StringLiteral ( COMMA ah+= p_StringLiteral )* )?
            int alt20=2;
            int LA20_0 = input.LA(1);

            if ( (LA20_0==AT) ) {
                alt20=1;
            }
            switch (alt20) {
                case 1 :
                    // XQueryParser.g:273:70: k+= AT ah+= p_StringLiteral ( COMMA ah+= p_StringLiteral )*
                    {
                    k=(CommonToken)match(input,AT,FOLLOW_AT_in_pm_SchemaImport2275); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_AT.add(k);

                    if (list_k==null) list_k=new ArrayList();
                    list_k.add(k);

                    pushFollow(FOLLOW_p_StringLiteral_in_pm_SchemaImport2279);
                    ah=p_StringLiteral();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_p_StringLiteral.add(ah.getTree());
                    if (list_ah==null) list_ah=new ArrayList();
                    list_ah.add(ah.getTree());

                    // XQueryParser.g:273:96: ( COMMA ah+= p_StringLiteral )*
                    loop19:
                    do {
                        int alt19=2;
                        int LA19_0 = input.LA(1);

                        if ( (LA19_0==COMMA) ) {
                            alt19=1;
                        }


                        switch (alt19) {
                    	case 1 :
                    	    // XQueryParser.g:273:97: COMMA ah+= p_StringLiteral
                    	    {
                    	    COMMA50=(CommonToken)match(input,COMMA,FOLLOW_COMMA_in_pm_SchemaImport2282); if (state.failed) return retval; 
                    	    if ( state.backtracking==0 ) stream_COMMA.add(COMMA50);

                    	    pushFollow(FOLLOW_p_StringLiteral_in_pm_SchemaImport2286);
                    	    ah=p_StringLiteral();

                    	    state._fsp--;
                    	    if (state.failed) return retval;
                    	    if ( state.backtracking==0 ) stream_p_StringLiteral.add(ah.getTree());
                    	    if (list_ah==null) list_ah=new ArrayList();
                    	    list_ah.add(ah.getTree());


                    	    }
                    	    break;

                    	default :
                    	    break loop19;
                        }
                    } while (true);


                    }
                    break;

            }

            SEMICOLON51=(CommonToken)match(input,SEMICOLON,FOLLOW_SEMICOLON_in_pm_SchemaImport2292); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_SEMICOLON.add(SEMICOLON51);

            if ( state.backtracking==0 ) {
              ak(list_k);
            }


            // AST REWRITE
            // elements: ah, sp, us
            // token labels: 
            // rule labels: retval, sp, us
            // token list labels: 
            // rule list labels: ah
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
            RewriteRuleSubtreeStream stream_sp=new RewriteRuleSubtreeStream(adaptor,"rule sp",sp!=null?sp.tree:null);
            RewriteRuleSubtreeStream stream_us=new RewriteRuleSubtreeStream(adaptor,"rule us",us!=null?us.tree:null);
            RewriteRuleSubtreeStream stream_ah=new RewriteRuleSubtreeStream(adaptor,"token ah",list_ah);
            root_0 = (XQDTCommonTree)adaptor.nil();
            // 274:17: -> ^( SchemaImport ^( SchemaPrefix ( $sp)? ) $us ^( AtHints ( $ah)* ) )
            {
                // XQueryParser.g:274:20: ^( SchemaImport ^( SchemaPrefix ( $sp)? ) $us ^( AtHints ( $ah)* ) )
                {
                XQDTCommonTree root_1 = (XQDTCommonTree)adaptor.nil();
                root_1 = (XQDTCommonTree)adaptor.becomeRoot((XQDTCommonTree)adaptor.create(SchemaImport, "SchemaImport"), root_1);

                // XQueryParser.g:274:35: ^( SchemaPrefix ( $sp)? )
                {
                XQDTCommonTree root_2 = (XQDTCommonTree)adaptor.nil();
                root_2 = (XQDTCommonTree)adaptor.becomeRoot((XQDTCommonTree)adaptor.create(SchemaPrefix, "SchemaPrefix"), root_2);

                // XQueryParser.g:274:50: ( $sp)?
                if ( stream_sp.hasNext() ) {
                    adaptor.addChild(root_2, stream_sp.nextTree());

                }
                stream_sp.reset();

                adaptor.addChild(root_1, root_2);
                }
                adaptor.addChild(root_1, stream_us.nextTree());
                // XQueryParser.g:274:60: ^( AtHints ( $ah)* )
                {
                XQDTCommonTree root_2 = (XQDTCommonTree)adaptor.nil();
                root_2 = (XQDTCommonTree)adaptor.becomeRoot((XQDTCommonTree)adaptor.create(AtHints, "AtHints"), root_2);

                // XQueryParser.g:274:70: ( $ah)*
                while ( stream_ah.hasNext() ) {
                    adaptor.addChild(root_2, stream_ah.nextTree());

                }
                stream_ah.reset();

                adaptor.addChild(root_1, root_2);
                }

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (XQDTCommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (XQDTCommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "pm_SchemaImport"

    public static class p_SchemaPrefix_return extends ParserRuleReturnScope {
        XQDTCommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "p_SchemaPrefix"
    // XQueryParser.g:278:1: p_SchemaPrefix : (k+= NAMESPACE nn= p_NCName EQUAL -> ^( NamespaceName $nn) | k+= DEFAULT k+= ELEMENT k+= NAMESPACE -> DefaultElementNamespace );
    public final XQueryParser.p_SchemaPrefix_return p_SchemaPrefix() throws RecognitionException {
        XQueryParser.p_SchemaPrefix_return retval = new XQueryParser.p_SchemaPrefix_return();
        retval.start = input.LT(1);

        XQDTCommonTree root_0 = null;

        CommonToken EQUAL52=null;
        CommonToken k=null;
        List list_k=null;
        XQueryParser.p_NCName_return nn = null;


        XQDTCommonTree EQUAL52_tree=null;
        XQDTCommonTree k_tree=null;
        RewriteRuleTokenStream stream_ELEMENT=new RewriteRuleTokenStream(adaptor,"token ELEMENT");
        RewriteRuleTokenStream stream_NAMESPACE=new RewriteRuleTokenStream(adaptor,"token NAMESPACE");
        RewriteRuleTokenStream stream_EQUAL=new RewriteRuleTokenStream(adaptor,"token EQUAL");
        RewriteRuleTokenStream stream_DEFAULT=new RewriteRuleTokenStream(adaptor,"token DEFAULT");
        RewriteRuleSubtreeStream stream_p_NCName=new RewriteRuleSubtreeStream(adaptor,"rule p_NCName");
        try {
            // XQueryParser.g:279:9: (k+= NAMESPACE nn= p_NCName EQUAL -> ^( NamespaceName $nn) | k+= DEFAULT k+= ELEMENT k+= NAMESPACE -> DefaultElementNamespace )
            int alt21=2;
            int LA21_0 = input.LA(1);

            if ( (LA21_0==NAMESPACE) ) {
                alt21=1;
            }
            else if ( (LA21_0==DEFAULT) ) {
                alt21=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 21, 0, input);

                throw nvae;
            }
            switch (alt21) {
                case 1 :
                    // XQueryParser.g:279:11: k+= NAMESPACE nn= p_NCName EQUAL
                    {
                    k=(CommonToken)match(input,NAMESPACE,FOLLOW_NAMESPACE_in_p_SchemaPrefix2364); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_NAMESPACE.add(k);

                    if (list_k==null) list_k=new ArrayList();
                    list_k.add(k);

                    pushFollow(FOLLOW_p_NCName_in_p_SchemaPrefix2368);
                    nn=p_NCName();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_p_NCName.add(nn.getTree());
                    EQUAL52=(CommonToken)match(input,EQUAL,FOLLOW_EQUAL_in_p_SchemaPrefix2370); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_EQUAL.add(EQUAL52);

                    if ( state.backtracking==0 ) {
                      ak(list_k);
                    }


                    // AST REWRITE
                    // elements: nn
                    // token labels: 
                    // rule labels: retval, nn
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
                    RewriteRuleSubtreeStream stream_nn=new RewriteRuleSubtreeStream(adaptor,"rule nn",nn!=null?nn.tree:null);

                    root_0 = (XQDTCommonTree)adaptor.nil();
                    // 280:17: -> ^( NamespaceName $nn)
                    {
                        // XQueryParser.g:280:20: ^( NamespaceName $nn)
                        {
                        XQDTCommonTree root_1 = (XQDTCommonTree)adaptor.nil();
                        root_1 = (XQDTCommonTree)adaptor.becomeRoot((XQDTCommonTree)adaptor.create(NamespaceName, "NamespaceName"), root_1);

                        adaptor.addChild(root_1, stream_nn.nextTree());

                        adaptor.addChild(root_0, root_1);
                        }

                    }

                    retval.tree = root_0;}
                    }
                    break;
                case 2 :
                    // XQueryParser.g:281:11: k+= DEFAULT k+= ELEMENT k+= NAMESPACE
                    {
                    k=(CommonToken)match(input,DEFAULT,FOLLOW_DEFAULT_in_p_SchemaPrefix2411); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_DEFAULT.add(k);

                    if (list_k==null) list_k=new ArrayList();
                    list_k.add(k);

                    k=(CommonToken)match(input,ELEMENT,FOLLOW_ELEMENT_in_p_SchemaPrefix2415); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_ELEMENT.add(k);

                    if (list_k==null) list_k=new ArrayList();
                    list_k.add(k);

                    k=(CommonToken)match(input,NAMESPACE,FOLLOW_NAMESPACE_in_p_SchemaPrefix2419); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_NAMESPACE.add(k);

                    if (list_k==null) list_k=new ArrayList();
                    list_k.add(k);

                    if ( state.backtracking==0 ) {
                      ak(list_k);
                    }


                    // AST REWRITE
                    // elements: 
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (XQDTCommonTree)adaptor.nil();
                    // 282:17: -> DefaultElementNamespace
                    {
                        adaptor.addChild(root_0, (XQDTCommonTree)adaptor.create(DefaultElementNamespace, "DefaultElementNamespace"));

                    }

                    retval.tree = root_0;}
                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (XQDTCommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (XQDTCommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "p_SchemaPrefix"

    public static class pm_ModuleImport_return extends ParserRuleReturnScope {
        XQDTCommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "pm_ModuleImport"
    // XQueryParser.g:286:1: pm_ModuleImport : k+= IMPORT k+= MODULE (k+= NAMESPACE nn= p_NCName EQUAL )? us= p_StringLiteral (k+= AT ah+= p_StringLiteral ( COMMA ah+= p_StringLiteral )* )? SEMICOLON -> ^( ModuleImport ^( NamespaceName ( $nn)? ) $us ^( AtHints ( $ah)* ) ) ;
    public final XQueryParser.pm_ModuleImport_return pm_ModuleImport() throws RecognitionException {
        XQueryParser.pm_ModuleImport_return retval = new XQueryParser.pm_ModuleImport_return();
        retval.start = input.LT(1);

        XQDTCommonTree root_0 = null;

        CommonToken EQUAL53=null;
        CommonToken COMMA54=null;
        CommonToken SEMICOLON55=null;
        CommonToken k=null;
        List list_k=null;
        List list_ah=null;
        XQueryParser.p_NCName_return nn = null;

        XQueryParser.p_StringLiteral_return us = null;

        XQueryParser.p_StringLiteral_return ah = null;
         ah = null;
        XQDTCommonTree EQUAL53_tree=null;
        XQDTCommonTree COMMA54_tree=null;
        XQDTCommonTree SEMICOLON55_tree=null;
        XQDTCommonTree k_tree=null;
        RewriteRuleTokenStream stream_AT=new RewriteRuleTokenStream(adaptor,"token AT");
        RewriteRuleTokenStream stream_IMPORT=new RewriteRuleTokenStream(adaptor,"token IMPORT");
        RewriteRuleTokenStream stream_SEMICOLON=new RewriteRuleTokenStream(adaptor,"token SEMICOLON");
        RewriteRuleTokenStream stream_MODULE=new RewriteRuleTokenStream(adaptor,"token MODULE");
        RewriteRuleTokenStream stream_COMMA=new RewriteRuleTokenStream(adaptor,"token COMMA");
        RewriteRuleTokenStream stream_NAMESPACE=new RewriteRuleTokenStream(adaptor,"token NAMESPACE");
        RewriteRuleTokenStream stream_EQUAL=new RewriteRuleTokenStream(adaptor,"token EQUAL");
        RewriteRuleSubtreeStream stream_p_NCName=new RewriteRuleSubtreeStream(adaptor,"rule p_NCName");
        RewriteRuleSubtreeStream stream_p_StringLiteral=new RewriteRuleSubtreeStream(adaptor,"rule p_StringLiteral");
        try {
            // XQueryParser.g:287:9: (k+= IMPORT k+= MODULE (k+= NAMESPACE nn= p_NCName EQUAL )? us= p_StringLiteral (k+= AT ah+= p_StringLiteral ( COMMA ah+= p_StringLiteral )* )? SEMICOLON -> ^( ModuleImport ^( NamespaceName ( $nn)? ) $us ^( AtHints ( $ah)* ) ) )
            // XQueryParser.g:287:11: k+= IMPORT k+= MODULE (k+= NAMESPACE nn= p_NCName EQUAL )? us= p_StringLiteral (k+= AT ah+= p_StringLiteral ( COMMA ah+= p_StringLiteral )* )? SEMICOLON
            {
            k=(CommonToken)match(input,IMPORT,FOLLOW_IMPORT_in_pm_ModuleImport2469); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_IMPORT.add(k);

            if (list_k==null) list_k=new ArrayList();
            list_k.add(k);

            k=(CommonToken)match(input,MODULE,FOLLOW_MODULE_in_pm_ModuleImport2473); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_MODULE.add(k);

            if (list_k==null) list_k=new ArrayList();
            list_k.add(k);

            // XQueryParser.g:287:31: (k+= NAMESPACE nn= p_NCName EQUAL )?
            int alt22=2;
            int LA22_0 = input.LA(1);

            if ( (LA22_0==NAMESPACE) ) {
                alt22=1;
            }
            switch (alt22) {
                case 1 :
                    // XQueryParser.g:287:32: k+= NAMESPACE nn= p_NCName EQUAL
                    {
                    k=(CommonToken)match(input,NAMESPACE,FOLLOW_NAMESPACE_in_pm_ModuleImport2478); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_NAMESPACE.add(k);

                    if (list_k==null) list_k=new ArrayList();
                    list_k.add(k);

                    pushFollow(FOLLOW_p_NCName_in_pm_ModuleImport2482);
                    nn=p_NCName();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_p_NCName.add(nn.getTree());
                    EQUAL53=(CommonToken)match(input,EQUAL,FOLLOW_EQUAL_in_pm_ModuleImport2484); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_EQUAL.add(EQUAL53);


                    }
                    break;

            }

            pushFollow(FOLLOW_p_StringLiteral_in_pm_ModuleImport2490);
            us=p_StringLiteral();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_p_StringLiteral.add(us.getTree());
            // XQueryParser.g:287:84: (k+= AT ah+= p_StringLiteral ( COMMA ah+= p_StringLiteral )* )?
            int alt24=2;
            int LA24_0 = input.LA(1);

            if ( (LA24_0==AT) ) {
                alt24=1;
            }
            switch (alt24) {
                case 1 :
                    // XQueryParser.g:287:85: k+= AT ah+= p_StringLiteral ( COMMA ah+= p_StringLiteral )*
                    {
                    k=(CommonToken)match(input,AT,FOLLOW_AT_in_pm_ModuleImport2495); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_AT.add(k);

                    if (list_k==null) list_k=new ArrayList();
                    list_k.add(k);

                    pushFollow(FOLLOW_p_StringLiteral_in_pm_ModuleImport2499);
                    ah=p_StringLiteral();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_p_StringLiteral.add(ah.getTree());
                    if (list_ah==null) list_ah=new ArrayList();
                    list_ah.add(ah.getTree());

                    // XQueryParser.g:287:111: ( COMMA ah+= p_StringLiteral )*
                    loop23:
                    do {
                        int alt23=2;
                        int LA23_0 = input.LA(1);

                        if ( (LA23_0==COMMA) ) {
                            alt23=1;
                        }


                        switch (alt23) {
                    	case 1 :
                    	    // XQueryParser.g:287:112: COMMA ah+= p_StringLiteral
                    	    {
                    	    COMMA54=(CommonToken)match(input,COMMA,FOLLOW_COMMA_in_pm_ModuleImport2502); if (state.failed) return retval; 
                    	    if ( state.backtracking==0 ) stream_COMMA.add(COMMA54);

                    	    pushFollow(FOLLOW_p_StringLiteral_in_pm_ModuleImport2506);
                    	    ah=p_StringLiteral();

                    	    state._fsp--;
                    	    if (state.failed) return retval;
                    	    if ( state.backtracking==0 ) stream_p_StringLiteral.add(ah.getTree());
                    	    if (list_ah==null) list_ah=new ArrayList();
                    	    list_ah.add(ah.getTree());


                    	    }
                    	    break;

                    	default :
                    	    break loop23;
                        }
                    } while (true);


                    }
                    break;

            }

            SEMICOLON55=(CommonToken)match(input,SEMICOLON,FOLLOW_SEMICOLON_in_pm_ModuleImport2512); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_SEMICOLON.add(SEMICOLON55);

            if ( state.backtracking==0 ) {
              ak(list_k);
            }


            // AST REWRITE
            // elements: nn, us, ah
            // token labels: 
            // rule labels: retval, nn, us
            // token list labels: 
            // rule list labels: ah
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
            RewriteRuleSubtreeStream stream_nn=new RewriteRuleSubtreeStream(adaptor,"rule nn",nn!=null?nn.tree:null);
            RewriteRuleSubtreeStream stream_us=new RewriteRuleSubtreeStream(adaptor,"rule us",us!=null?us.tree:null);
            RewriteRuleSubtreeStream stream_ah=new RewriteRuleSubtreeStream(adaptor,"token ah",list_ah);
            root_0 = (XQDTCommonTree)adaptor.nil();
            // 288:17: -> ^( ModuleImport ^( NamespaceName ( $nn)? ) $us ^( AtHints ( $ah)* ) )
            {
                // XQueryParser.g:288:20: ^( ModuleImport ^( NamespaceName ( $nn)? ) $us ^( AtHints ( $ah)* ) )
                {
                XQDTCommonTree root_1 = (XQDTCommonTree)adaptor.nil();
                root_1 = (XQDTCommonTree)adaptor.becomeRoot((XQDTCommonTree)adaptor.create(ModuleImport, "ModuleImport"), root_1);

                // XQueryParser.g:288:35: ^( NamespaceName ( $nn)? )
                {
                XQDTCommonTree root_2 = (XQDTCommonTree)adaptor.nil();
                root_2 = (XQDTCommonTree)adaptor.becomeRoot((XQDTCommonTree)adaptor.create(NamespaceName, "NamespaceName"), root_2);

                // XQueryParser.g:288:51: ( $nn)?
                if ( stream_nn.hasNext() ) {
                    adaptor.addChild(root_2, stream_nn.nextTree());

                }
                stream_nn.reset();

                adaptor.addChild(root_1, root_2);
                }
                adaptor.addChild(root_1, stream_us.nextTree());
                // XQueryParser.g:288:61: ^( AtHints ( $ah)* )
                {
                XQDTCommonTree root_2 = (XQDTCommonTree)adaptor.nil();
                root_2 = (XQDTCommonTree)adaptor.becomeRoot((XQDTCommonTree)adaptor.create(AtHints, "AtHints"), root_2);

                // XQueryParser.g:288:71: ( $ah)*
                while ( stream_ah.hasNext() ) {
                    adaptor.addChild(root_2, stream_ah.nextTree());

                }
                stream_ah.reset();

                adaptor.addChild(root_1, root_2);
                }

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (XQDTCommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (XQDTCommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "pm_ModuleImport"

    public static class pm_VarDecl_return extends ParserRuleReturnScope {
        XQDTCommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "pm_VarDecl"
    // XQueryParser.g:292:1: pm_VarDecl : k+= DECLARE p_PrivateOption vdt= pg_VarDeclType DOLLAR qn= p_QName (td= p_TypeDeclaration )? ( ( BIND es= p_ExprSingle ) | (k+= EXTERNAL ( BIND des= p_ExprSingle )? ) ) SEMICOLON -> ^( VarDecl $vdt $qn ^( VarType ( $td)? ) ^( VarValue ( $es)? ^( VarDefaultValue ( $des)? ) ) ) ;
    public final XQueryParser.pm_VarDecl_return pm_VarDecl() throws RecognitionException {
        XQueryParser.pm_VarDecl_return retval = new XQueryParser.pm_VarDecl_return();
        retval.start = input.LT(1);

        XQDTCommonTree root_0 = null;

        CommonToken DOLLAR57=null;
        CommonToken BIND58=null;
        CommonToken BIND59=null;
        CommonToken SEMICOLON60=null;
        CommonToken k=null;
        List list_k=null;
        XQueryParser.pg_VarDeclType_return vdt = null;

        XQueryParser.p_QName_return qn = null;

        XQueryParser.p_TypeDeclaration_return td = null;

        XQueryParser.p_ExprSingle_return es = null;

        XQueryParser.p_ExprSingle_return des = null;

        XQueryParser.p_PrivateOption_return p_PrivateOption56 = null;


        XQDTCommonTree DOLLAR57_tree=null;
        XQDTCommonTree BIND58_tree=null;
        XQDTCommonTree BIND59_tree=null;
        XQDTCommonTree SEMICOLON60_tree=null;
        XQDTCommonTree k_tree=null;
        RewriteRuleTokenStream stream_DOLLAR=new RewriteRuleTokenStream(adaptor,"token DOLLAR");
        RewriteRuleTokenStream stream_DECLARE=new RewriteRuleTokenStream(adaptor,"token DECLARE");
        RewriteRuleTokenStream stream_EXTERNAL=new RewriteRuleTokenStream(adaptor,"token EXTERNAL");
        RewriteRuleTokenStream stream_SEMICOLON=new RewriteRuleTokenStream(adaptor,"token SEMICOLON");
        RewriteRuleTokenStream stream_BIND=new RewriteRuleTokenStream(adaptor,"token BIND");
        RewriteRuleSubtreeStream stream_p_TypeDeclaration=new RewriteRuleSubtreeStream(adaptor,"rule p_TypeDeclaration");
        RewriteRuleSubtreeStream stream_p_QName=new RewriteRuleSubtreeStream(adaptor,"rule p_QName");
        RewriteRuleSubtreeStream stream_p_PrivateOption=new RewriteRuleSubtreeStream(adaptor,"rule p_PrivateOption");
        RewriteRuleSubtreeStream stream_p_ExprSingle=new RewriteRuleSubtreeStream(adaptor,"rule p_ExprSingle");
        RewriteRuleSubtreeStream stream_pg_VarDeclType=new RewriteRuleSubtreeStream(adaptor,"rule pg_VarDeclType");
        try {
            // XQueryParser.g:293:9: (k+= DECLARE p_PrivateOption vdt= pg_VarDeclType DOLLAR qn= p_QName (td= p_TypeDeclaration )? ( ( BIND es= p_ExprSingle ) | (k+= EXTERNAL ( BIND des= p_ExprSingle )? ) ) SEMICOLON -> ^( VarDecl $vdt $qn ^( VarType ( $td)? ) ^( VarValue ( $es)? ^( VarDefaultValue ( $des)? ) ) ) )
            // XQueryParser.g:293:11: k+= DECLARE p_PrivateOption vdt= pg_VarDeclType DOLLAR qn= p_QName (td= p_TypeDeclaration )? ( ( BIND es= p_ExprSingle ) | (k+= EXTERNAL ( BIND des= p_ExprSingle )? ) ) SEMICOLON
            {
            k=(CommonToken)match(input,DECLARE,FOLLOW_DECLARE_in_pm_VarDecl2583); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_DECLARE.add(k);

            if (list_k==null) list_k=new ArrayList();
            list_k.add(k);

            pushFollow(FOLLOW_p_PrivateOption_in_pm_VarDecl2585);
            p_PrivateOption56=p_PrivateOption();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_p_PrivateOption.add(p_PrivateOption56.getTree());
            pushFollow(FOLLOW_pg_VarDeclType_in_pm_VarDecl2589);
            vdt=pg_VarDeclType();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_pg_VarDeclType.add(vdt.getTree());
            DOLLAR57=(CommonToken)match(input,DOLLAR,FOLLOW_DOLLAR_in_pm_VarDecl2591); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_DOLLAR.add(DOLLAR57);

            pushFollow(FOLLOW_p_QName_in_pm_VarDecl2595);
            qn=p_QName();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_p_QName.add(qn.getTree());
            // XQueryParser.g:293:77: (td= p_TypeDeclaration )?
            int alt25=2;
            int LA25_0 = input.LA(1);

            if ( (LA25_0==AS) ) {
                alt25=1;
            }
            switch (alt25) {
                case 1 :
                    // XQueryParser.g:293:77: td= p_TypeDeclaration
                    {
                    pushFollow(FOLLOW_p_TypeDeclaration_in_pm_VarDecl2599);
                    td=p_TypeDeclaration();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_p_TypeDeclaration.add(td.getTree());

                    }
                    break;

            }

            // XQueryParser.g:293:97: ( ( BIND es= p_ExprSingle ) | (k+= EXTERNAL ( BIND des= p_ExprSingle )? ) )
            int alt27=2;
            int LA27_0 = input.LA(1);

            if ( (LA27_0==BIND) ) {
                alt27=1;
            }
            else if ( (LA27_0==EXTERNAL) ) {
                alt27=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 27, 0, input);

                throw nvae;
            }
            switch (alt27) {
                case 1 :
                    // XQueryParser.g:293:98: ( BIND es= p_ExprSingle )
                    {
                    // XQueryParser.g:293:98: ( BIND es= p_ExprSingle )
                    // XQueryParser.g:293:99: BIND es= p_ExprSingle
                    {
                    BIND58=(CommonToken)match(input,BIND,FOLLOW_BIND_in_pm_VarDecl2604); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_BIND.add(BIND58);

                    pushFollow(FOLLOW_p_ExprSingle_in_pm_VarDecl2608);
                    es=p_ExprSingle();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_p_ExprSingle.add(es.getTree());

                    }


                    }
                    break;
                case 2 :
                    // XQueryParser.g:293:123: (k+= EXTERNAL ( BIND des= p_ExprSingle )? )
                    {
                    // XQueryParser.g:293:123: (k+= EXTERNAL ( BIND des= p_ExprSingle )? )
                    // XQueryParser.g:293:124: k+= EXTERNAL ( BIND des= p_ExprSingle )?
                    {
                    k=(CommonToken)match(input,EXTERNAL,FOLLOW_EXTERNAL_in_pm_VarDecl2616); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_EXTERNAL.add(k);

                    if (list_k==null) list_k=new ArrayList();
                    list_k.add(k);

                    // XQueryParser.g:293:136: ( BIND des= p_ExprSingle )?
                    int alt26=2;
                    int LA26_0 = input.LA(1);

                    if ( (LA26_0==BIND) ) {
                        alt26=1;
                    }
                    switch (alt26) {
                        case 1 :
                            // XQueryParser.g:293:137: BIND des= p_ExprSingle
                            {
                            BIND59=(CommonToken)match(input,BIND,FOLLOW_BIND_in_pm_VarDecl2619); if (state.failed) return retval; 
                            if ( state.backtracking==0 ) stream_BIND.add(BIND59);

                            pushFollow(FOLLOW_p_ExprSingle_in_pm_VarDecl2623);
                            des=p_ExprSingle();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_p_ExprSingle.add(des.getTree());

                            }
                            break;

                    }


                    }


                    }
                    break;

            }

            SEMICOLON60=(CommonToken)match(input,SEMICOLON,FOLLOW_SEMICOLON_in_pm_VarDecl2629); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_SEMICOLON.add(SEMICOLON60);

            if ( state.backtracking==0 ) {
              ak(list_k);
            }


            // AST REWRITE
            // elements: es, qn, vdt, des, td
            // token labels: 
            // rule labels: qn, retval, des, td, vdt, es
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_qn=new RewriteRuleSubtreeStream(adaptor,"rule qn",qn!=null?qn.tree:null);
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
            RewriteRuleSubtreeStream stream_des=new RewriteRuleSubtreeStream(adaptor,"rule des",des!=null?des.tree:null);
            RewriteRuleSubtreeStream stream_td=new RewriteRuleSubtreeStream(adaptor,"rule td",td!=null?td.tree:null);
            RewriteRuleSubtreeStream stream_vdt=new RewriteRuleSubtreeStream(adaptor,"rule vdt",vdt!=null?vdt.tree:null);
            RewriteRuleSubtreeStream stream_es=new RewriteRuleSubtreeStream(adaptor,"rule es",es!=null?es.tree:null);

            root_0 = (XQDTCommonTree)adaptor.nil();
            // 294:17: -> ^( VarDecl $vdt $qn ^( VarType ( $td)? ) ^( VarValue ( $es)? ^( VarDefaultValue ( $des)? ) ) )
            {
                // XQueryParser.g:294:20: ^( VarDecl $vdt $qn ^( VarType ( $td)? ) ^( VarValue ( $es)? ^( VarDefaultValue ( $des)? ) ) )
                {
                XQDTCommonTree root_1 = (XQDTCommonTree)adaptor.nil();
                root_1 = (XQDTCommonTree)adaptor.becomeRoot((XQDTCommonTree)adaptor.create(VarDecl, "VarDecl"), root_1);

                adaptor.addChild(root_1, stream_vdt.nextTree());
                adaptor.addChild(root_1, stream_qn.nextTree());
                // XQueryParser.g:294:39: ^( VarType ( $td)? )
                {
                XQDTCommonTree root_2 = (XQDTCommonTree)adaptor.nil();
                root_2 = (XQDTCommonTree)adaptor.becomeRoot((XQDTCommonTree)adaptor.create(VarType, "VarType"), root_2);

                // XQueryParser.g:294:49: ( $td)?
                if ( stream_td.hasNext() ) {
                    adaptor.addChild(root_2, stream_td.nextTree());

                }
                stream_td.reset();

                adaptor.addChild(root_1, root_2);
                }
                // XQueryParser.g:294:55: ^( VarValue ( $es)? ^( VarDefaultValue ( $des)? ) )
                {
                XQDTCommonTree root_2 = (XQDTCommonTree)adaptor.nil();
                root_2 = (XQDTCommonTree)adaptor.becomeRoot((XQDTCommonTree)adaptor.create(VarValue, "VarValue"), root_2);

                // XQueryParser.g:294:66: ( $es)?
                if ( stream_es.hasNext() ) {
                    adaptor.addChild(root_2, stream_es.nextTree());

                }
                stream_es.reset();
                // XQueryParser.g:294:71: ^( VarDefaultValue ( $des)? )
                {
                XQDTCommonTree root_3 = (XQDTCommonTree)adaptor.nil();
                root_3 = (XQDTCommonTree)adaptor.becomeRoot((XQDTCommonTree)adaptor.create(VarDefaultValue, "VarDefaultValue"), root_3);

                // XQueryParser.g:294:89: ( $des)?
                if ( stream_des.hasNext() ) {
                    adaptor.addChild(root_3, stream_des.nextTree());

                }
                stream_des.reset();

                adaptor.addChild(root_2, root_3);
                }

                adaptor.addChild(root_1, root_2);
                }

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (XQDTCommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (XQDTCommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "pm_VarDecl"

    public static class pg_VarDeclType_return extends ParserRuleReturnScope {
        XQDTCommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "pg_VarDeclType"
    // XQueryParser.g:301:1: pg_VarDeclType : ({...}? =>ku= CONSTANT -> VarConstantDecl | kv= VARIABLE -> VarVariableDecl );
    public final XQueryParser.pg_VarDeclType_return pg_VarDeclType() throws RecognitionException {
        XQueryParser.pg_VarDeclType_return retval = new XQueryParser.pg_VarDeclType_return();
        retval.start = input.LT(1);

        XQDTCommonTree root_0 = null;

        CommonToken ku=null;
        CommonToken kv=null;

        XQDTCommonTree ku_tree=null;
        XQDTCommonTree kv_tree=null;
        RewriteRuleTokenStream stream_CONSTANT=new RewriteRuleTokenStream(adaptor,"token CONSTANT");
        RewriteRuleTokenStream stream_VARIABLE=new RewriteRuleTokenStream(adaptor,"token VARIABLE");

        try {
            // XQueryParser.g:302:9: ({...}? =>ku= CONSTANT -> VarConstantDecl | kv= VARIABLE -> VarVariableDecl )
            int alt28=2;
            int LA28_0 = input.LA(1);

            if ( (LA28_0==CONSTANT) && ((lc(XQS)))) {
                alt28=1;
            }
            else if ( (LA28_0==VARIABLE) ) {
                alt28=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 28, 0, input);

                throw nvae;
            }
            switch (alt28) {
                case 1 :
                    // XQueryParser.g:302:11: {...}? =>ku= CONSTANT
                    {
                    if ( !((lc(XQS))) ) {
                        if (state.backtracking>0) {state.failed=true; return retval;}
                        throw new FailedPredicateException(input, "pg_VarDeclType", "lc(XQS)");
                    }
                    ku=(CommonToken)match(input,CONSTANT,FOLLOW_CONSTANT_in_pg_VarDeclType2717); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_CONSTANT.add(ku);

                    if ( state.backtracking==0 ) {
                      ak(ku);
                    }


                    // AST REWRITE
                    // elements: 
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (XQDTCommonTree)adaptor.nil();
                    // 303:17: -> VarConstantDecl
                    {
                        adaptor.addChild(root_0, (XQDTCommonTree)adaptor.create(VarConstantDecl, "VarConstantDecl"));

                    }

                    retval.tree = root_0;}
                    }
                    break;
                case 2 :
                    // XQueryParser.g:304:11: kv= VARIABLE
                    {
                    kv=(CommonToken)match(input,VARIABLE,FOLLOW_VARIABLE_in_pg_VarDeclType2753); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_VARIABLE.add(kv);

                    if ( state.backtracking==0 ) {
                      ak(kv);
                    }


                    // AST REWRITE
                    // elements: 
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (XQDTCommonTree)adaptor.nil();
                    // 305:17: -> VarVariableDecl
                    {
                        adaptor.addChild(root_0, (XQDTCommonTree)adaptor.create(VarVariableDecl, "VarVariableDecl"));

                    }

                    retval.tree = root_0;}
                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (XQDTCommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (XQDTCommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "pg_VarDeclType"

    public static class pm_ContextItemDecl_return extends ParserRuleReturnScope {
        XQDTCommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "pm_ContextItemDecl"
    // XQueryParser.g:316:1: pm_ContextItemDecl : k+= DECLARE k+= CONTEXT k+= ITEM (k+= AS p_ItemType )? ( ( BIND p_ExprSingle ) | (k+= EXTERNAL ( BIND p_ExprSingle )? ) ) SEMICOLON ;
    public final XQueryParser.pm_ContextItemDecl_return pm_ContextItemDecl() throws RecognitionException {
        XQueryParser.pm_ContextItemDecl_return retval = new XQueryParser.pm_ContextItemDecl_return();
        retval.start = input.LT(1);

        XQDTCommonTree root_0 = null;

        CommonToken BIND62=null;
        CommonToken BIND64=null;
        CommonToken SEMICOLON66=null;
        CommonToken k=null;
        List list_k=null;
        XQueryParser.p_ItemType_return p_ItemType61 = null;

        XQueryParser.p_ExprSingle_return p_ExprSingle63 = null;

        XQueryParser.p_ExprSingle_return p_ExprSingle65 = null;


        XQDTCommonTree BIND62_tree=null;
        XQDTCommonTree BIND64_tree=null;
        XQDTCommonTree SEMICOLON66_tree=null;
        XQDTCommonTree k_tree=null;

        try {
            // XQueryParser.g:317:9: (k+= DECLARE k+= CONTEXT k+= ITEM (k+= AS p_ItemType )? ( ( BIND p_ExprSingle ) | (k+= EXTERNAL ( BIND p_ExprSingle )? ) ) SEMICOLON )
            // XQueryParser.g:317:13: k+= DECLARE k+= CONTEXT k+= ITEM (k+= AS p_ItemType )? ( ( BIND p_ExprSingle ) | (k+= EXTERNAL ( BIND p_ExprSingle )? ) ) SEMICOLON
            {
            root_0 = (XQDTCommonTree)adaptor.nil();

            k=(CommonToken)match(input,DECLARE,FOLLOW_DECLARE_in_pm_ContextItemDecl2812); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            k_tree = (XQDTCommonTree)adaptor.create(k);
            adaptor.addChild(root_0, k_tree);
            }
            if (list_k==null) list_k=new ArrayList();
            list_k.add(k);

            k=(CommonToken)match(input,CONTEXT,FOLLOW_CONTEXT_in_pm_ContextItemDecl2816); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            k_tree = (XQDTCommonTree)adaptor.create(k);
            adaptor.addChild(root_0, k_tree);
            }
            if (list_k==null) list_k=new ArrayList();
            list_k.add(k);

            k=(CommonToken)match(input,ITEM,FOLLOW_ITEM_in_pm_ContextItemDecl2820); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            k_tree = (XQDTCommonTree)adaptor.create(k);
            adaptor.addChild(root_0, k_tree);
            }
            if (list_k==null) list_k=new ArrayList();
            list_k.add(k);

            // XQueryParser.g:317:43: (k+= AS p_ItemType )?
            int alt29=2;
            int LA29_0 = input.LA(1);

            if ( (LA29_0==AS) ) {
                alt29=1;
            }
            switch (alt29) {
                case 1 :
                    // XQueryParser.g:317:44: k+= AS p_ItemType
                    {
                    k=(CommonToken)match(input,AS,FOLLOW_AS_in_pm_ContextItemDecl2825); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    k_tree = (XQDTCommonTree)adaptor.create(k);
                    adaptor.addChild(root_0, k_tree);
                    }
                    if (list_k==null) list_k=new ArrayList();
                    list_k.add(k);

                    pushFollow(FOLLOW_p_ItemType_in_pm_ContextItemDecl2827);
                    p_ItemType61=p_ItemType();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, p_ItemType61.getTree());

                    }
                    break;

            }

            // XQueryParser.g:317:63: ( ( BIND p_ExprSingle ) | (k+= EXTERNAL ( BIND p_ExprSingle )? ) )
            int alt31=2;
            int LA31_0 = input.LA(1);

            if ( (LA31_0==BIND) ) {
                alt31=1;
            }
            else if ( (LA31_0==EXTERNAL) ) {
                alt31=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 31, 0, input);

                throw nvae;
            }
            switch (alt31) {
                case 1 :
                    // XQueryParser.g:317:64: ( BIND p_ExprSingle )
                    {
                    // XQueryParser.g:317:64: ( BIND p_ExprSingle )
                    // XQueryParser.g:317:65: BIND p_ExprSingle
                    {
                    BIND62=(CommonToken)match(input,BIND,FOLLOW_BIND_in_pm_ContextItemDecl2833); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    BIND62_tree = (XQDTCommonTree)adaptor.create(BIND62);
                    adaptor.addChild(root_0, BIND62_tree);
                    }
                    pushFollow(FOLLOW_p_ExprSingle_in_pm_ContextItemDecl2835);
                    p_ExprSingle63=p_ExprSingle();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, p_ExprSingle63.getTree());

                    }


                    }
                    break;
                case 2 :
                    // XQueryParser.g:317:86: (k+= EXTERNAL ( BIND p_ExprSingle )? )
                    {
                    // XQueryParser.g:317:86: (k+= EXTERNAL ( BIND p_ExprSingle )? )
                    // XQueryParser.g:317:87: k+= EXTERNAL ( BIND p_ExprSingle )?
                    {
                    k=(CommonToken)match(input,EXTERNAL,FOLLOW_EXTERNAL_in_pm_ContextItemDecl2843); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    k_tree = (XQDTCommonTree)adaptor.create(k);
                    adaptor.addChild(root_0, k_tree);
                    }
                    if (list_k==null) list_k=new ArrayList();
                    list_k.add(k);

                    // XQueryParser.g:317:99: ( BIND p_ExprSingle )?
                    int alt30=2;
                    int LA30_0 = input.LA(1);

                    if ( (LA30_0==BIND) ) {
                        alt30=1;
                    }
                    switch (alt30) {
                        case 1 :
                            // XQueryParser.g:317:100: BIND p_ExprSingle
                            {
                            BIND64=(CommonToken)match(input,BIND,FOLLOW_BIND_in_pm_ContextItemDecl2846); if (state.failed) return retval;
                            if ( state.backtracking==0 ) {
                            BIND64_tree = (XQDTCommonTree)adaptor.create(BIND64);
                            adaptor.addChild(root_0, BIND64_tree);
                            }
                            pushFollow(FOLLOW_p_ExprSingle_in_pm_ContextItemDecl2848);
                            p_ExprSingle65=p_ExprSingle();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) adaptor.addChild(root_0, p_ExprSingle65.getTree());

                            }
                            break;

                    }


                    }


                    }
                    break;

            }

            SEMICOLON66=(CommonToken)match(input,SEMICOLON,FOLLOW_SEMICOLON_in_pm_ContextItemDecl2854); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            SEMICOLON66_tree = (XQDTCommonTree)adaptor.create(SEMICOLON66);
            adaptor.addChild(root_0, SEMICOLON66_tree);
            }
            if ( state.backtracking==0 ) {
              ak(list_k);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (XQDTCommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (XQDTCommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "pm_ContextItemDecl"

    public static class pm_ConstructionDecl_return extends ParserRuleReturnScope {
        XQDTCommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "pm_ConstructionDecl"
    // XQueryParser.g:324:1: pm_ConstructionDecl : k+= DECLARE k+= CONSTRUCTION (k+= STRIP | k+= PRESERVE ) SEMICOLON ;
    public final XQueryParser.pm_ConstructionDecl_return pm_ConstructionDecl() throws RecognitionException {
        XQueryParser.pm_ConstructionDecl_return retval = new XQueryParser.pm_ConstructionDecl_return();
        retval.start = input.LT(1);

        XQDTCommonTree root_0 = null;

        CommonToken SEMICOLON67=null;
        CommonToken k=null;
        List list_k=null;

        XQDTCommonTree SEMICOLON67_tree=null;
        XQDTCommonTree k_tree=null;

        try {
            // XQueryParser.g:325:9: (k+= DECLARE k+= CONSTRUCTION (k+= STRIP | k+= PRESERVE ) SEMICOLON )
            // XQueryParser.g:325:13: k+= DECLARE k+= CONSTRUCTION (k+= STRIP | k+= PRESERVE ) SEMICOLON
            {
            root_0 = (XQDTCommonTree)adaptor.nil();

            k=(CommonToken)match(input,DECLARE,FOLLOW_DECLARE_in_pm_ConstructionDecl2889); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            k_tree = (XQDTCommonTree)adaptor.create(k);
            adaptor.addChild(root_0, k_tree);
            }
            if (list_k==null) list_k=new ArrayList();
            list_k.add(k);

            k=(CommonToken)match(input,CONSTRUCTION,FOLLOW_CONSTRUCTION_in_pm_ConstructionDecl2893); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            k_tree = (XQDTCommonTree)adaptor.create(k);
            adaptor.addChild(root_0, k_tree);
            }
            if (list_k==null) list_k=new ArrayList();
            list_k.add(k);

            // XQueryParser.g:325:40: (k+= STRIP | k+= PRESERVE )
            int alt32=2;
            int LA32_0 = input.LA(1);

            if ( (LA32_0==STRIP) ) {
                alt32=1;
            }
            else if ( (LA32_0==PRESERVE) ) {
                alt32=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 32, 0, input);

                throw nvae;
            }
            switch (alt32) {
                case 1 :
                    // XQueryParser.g:325:41: k+= STRIP
                    {
                    k=(CommonToken)match(input,STRIP,FOLLOW_STRIP_in_pm_ConstructionDecl2898); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    k_tree = (XQDTCommonTree)adaptor.create(k);
                    adaptor.addChild(root_0, k_tree);
                    }
                    if (list_k==null) list_k=new ArrayList();
                    list_k.add(k);


                    }
                    break;
                case 2 :
                    // XQueryParser.g:325:52: k+= PRESERVE
                    {
                    k=(CommonToken)match(input,PRESERVE,FOLLOW_PRESERVE_in_pm_ConstructionDecl2904); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    k_tree = (XQDTCommonTree)adaptor.create(k);
                    adaptor.addChild(root_0, k_tree);
                    }
                    if (list_k==null) list_k=new ArrayList();
                    list_k.add(k);


                    }
                    break;

            }

            SEMICOLON67=(CommonToken)match(input,SEMICOLON,FOLLOW_SEMICOLON_in_pm_ConstructionDecl2907); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            SEMICOLON67_tree = (XQDTCommonTree)adaptor.create(SEMICOLON67);
            adaptor.addChild(root_0, SEMICOLON67_tree);
            }
            if ( state.backtracking==0 ) {
              ak(list_k);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (XQDTCommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (XQDTCommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "pm_ConstructionDecl"

    public static class pm_FunctionDecl_return extends ParserRuleReturnScope {
        XQDTCommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "pm_FunctionDecl"
    // XQueryParser.g:331:1: pm_FunctionDecl : ({...}? =>k+= DECLARE k+= SEQUENTIAL k+= FUNCTION qn= p_QName LPAREN (pl= p_ParamList )? RPAREN (td= p_TypeDeclaration )? (b= p_Block | k+= EXTERNAL ) SEMICOLON -> ^( FunctionDecl $qn ^( ParamList ( $pl)? ) ^( ReturnType ( $td)? ) ( $b)? ) | k+= DECLARE p_PrivateOption p_FunctionType k+= FUNCTION qn= p_QName LPAREN (pl= p_ParamList )? RPAREN (td= p_TypeDeclaration )? (ee= p_EnclosedExpr | k+= EXTERNAL ) SEMICOLON -> ^( FunctionDecl $qn ^( ParamList ( $pl)? ) ^( ReturnType ( $td)? ) ( $ee)? ) );
    public final XQueryParser.pm_FunctionDecl_return pm_FunctionDecl() throws RecognitionException {
        XQueryParser.pm_FunctionDecl_return retval = new XQueryParser.pm_FunctionDecl_return();
        retval.start = input.LT(1);

        XQDTCommonTree root_0 = null;

        CommonToken LPAREN68=null;
        CommonToken RPAREN69=null;
        CommonToken SEMICOLON70=null;
        CommonToken LPAREN73=null;
        CommonToken RPAREN74=null;
        CommonToken SEMICOLON75=null;
        CommonToken k=null;
        List list_k=null;
        XQueryParser.p_QName_return qn = null;

        XQueryParser.p_ParamList_return pl = null;

        XQueryParser.p_TypeDeclaration_return td = null;

        XQueryParser.p_Block_return b = null;

        XQueryParser.p_EnclosedExpr_return ee = null;

        XQueryParser.p_PrivateOption_return p_PrivateOption71 = null;

        XQueryParser.p_FunctionType_return p_FunctionType72 = null;


        XQDTCommonTree LPAREN68_tree=null;
        XQDTCommonTree RPAREN69_tree=null;
        XQDTCommonTree SEMICOLON70_tree=null;
        XQDTCommonTree LPAREN73_tree=null;
        XQDTCommonTree RPAREN74_tree=null;
        XQDTCommonTree SEMICOLON75_tree=null;
        XQDTCommonTree k_tree=null;
        RewriteRuleTokenStream stream_FUNCTION=new RewriteRuleTokenStream(adaptor,"token FUNCTION");
        RewriteRuleTokenStream stream_DECLARE=new RewriteRuleTokenStream(adaptor,"token DECLARE");
        RewriteRuleTokenStream stream_RPAREN=new RewriteRuleTokenStream(adaptor,"token RPAREN");
        RewriteRuleTokenStream stream_EXTERNAL=new RewriteRuleTokenStream(adaptor,"token EXTERNAL");
        RewriteRuleTokenStream stream_SEMICOLON=new RewriteRuleTokenStream(adaptor,"token SEMICOLON");
        RewriteRuleTokenStream stream_SEQUENTIAL=new RewriteRuleTokenStream(adaptor,"token SEQUENTIAL");
        RewriteRuleTokenStream stream_LPAREN=new RewriteRuleTokenStream(adaptor,"token LPAREN");
        RewriteRuleSubtreeStream stream_p_Block=new RewriteRuleSubtreeStream(adaptor,"rule p_Block");
        RewriteRuleSubtreeStream stream_p_TypeDeclaration=new RewriteRuleSubtreeStream(adaptor,"rule p_TypeDeclaration");
        RewriteRuleSubtreeStream stream_p_QName=new RewriteRuleSubtreeStream(adaptor,"rule p_QName");
        RewriteRuleSubtreeStream stream_p_ParamList=new RewriteRuleSubtreeStream(adaptor,"rule p_ParamList");
        RewriteRuleSubtreeStream stream_p_PrivateOption=new RewriteRuleSubtreeStream(adaptor,"rule p_PrivateOption");
        RewriteRuleSubtreeStream stream_p_FunctionType=new RewriteRuleSubtreeStream(adaptor,"rule p_FunctionType");
        RewriteRuleSubtreeStream stream_p_EnclosedExpr=new RewriteRuleSubtreeStream(adaptor,"rule p_EnclosedExpr");
        try {
            // XQueryParser.g:332:9: ({...}? =>k+= DECLARE k+= SEQUENTIAL k+= FUNCTION qn= p_QName LPAREN (pl= p_ParamList )? RPAREN (td= p_TypeDeclaration )? (b= p_Block | k+= EXTERNAL ) SEMICOLON -> ^( FunctionDecl $qn ^( ParamList ( $pl)? ) ^( ReturnType ( $td)? ) ( $b)? ) | k+= DECLARE p_PrivateOption p_FunctionType k+= FUNCTION qn= p_QName LPAREN (pl= p_ParamList )? RPAREN (td= p_TypeDeclaration )? (ee= p_EnclosedExpr | k+= EXTERNAL ) SEMICOLON -> ^( FunctionDecl $qn ^( ParamList ( $pl)? ) ^( ReturnType ( $td)? ) ( $ee)? ) )
            int alt39=2;
            int LA39_0 = input.LA(1);

            if ( (LA39_0==DECLARE) ) {
                int LA39_1 = input.LA(2);

                if ( (LA39_1==SEQUENTIAL) && ((lc(XQS)))) {
                    alt39=1;
                }
                else if ( (LA39_1==FUNCTION||LA39_1==UPDATING||LA39_1==SIMPLE||LA39_1==PRIVATE) ) {
                    alt39=2;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 39, 1, input);

                    throw nvae;
                }
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 39, 0, input);

                throw nvae;
            }
            switch (alt39) {
                case 1 :
                    // XQueryParser.g:332:13: {...}? =>k+= DECLARE k+= SEQUENTIAL k+= FUNCTION qn= p_QName LPAREN (pl= p_ParamList )? RPAREN (td= p_TypeDeclaration )? (b= p_Block | k+= EXTERNAL ) SEMICOLON
                    {
                    if ( !((lc(XQS))) ) {
                        if (state.backtracking>0) {state.failed=true; return retval;}
                        throw new FailedPredicateException(input, "pm_FunctionDecl", "lc(XQS)");
                    }
                    k=(CommonToken)match(input,DECLARE,FOLLOW_DECLARE_in_pm_FunctionDecl2944); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_DECLARE.add(k);

                    if (list_k==null) list_k=new ArrayList();
                    list_k.add(k);

                    k=(CommonToken)match(input,SEQUENTIAL,FOLLOW_SEQUENTIAL_in_pm_FunctionDecl2948); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_SEQUENTIAL.add(k);

                    if (list_k==null) list_k=new ArrayList();
                    list_k.add(k);

                    k=(CommonToken)match(input,FUNCTION,FOLLOW_FUNCTION_in_pm_FunctionDecl2952); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_FUNCTION.add(k);

                    if (list_k==null) list_k=new ArrayList();
                    list_k.add(k);

                    pushFollow(FOLLOW_p_QName_in_pm_FunctionDecl2956);
                    qn=p_QName();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_p_QName.add(qn.getTree());
                    LPAREN68=(CommonToken)match(input,LPAREN,FOLLOW_LPAREN_in_pm_FunctionDecl2958); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_LPAREN.add(LPAREN68);

                    // XQueryParser.g:332:83: (pl= p_ParamList )?
                    int alt33=2;
                    int LA33_0 = input.LA(1);

                    if ( (LA33_0==DOLLAR) ) {
                        alt33=1;
                    }
                    switch (alt33) {
                        case 1 :
                            // XQueryParser.g:332:83: pl= p_ParamList
                            {
                            pushFollow(FOLLOW_p_ParamList_in_pm_FunctionDecl2962);
                            pl=p_ParamList();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_p_ParamList.add(pl.getTree());

                            }
                            break;

                    }

                    RPAREN69=(CommonToken)match(input,RPAREN,FOLLOW_RPAREN_in_pm_FunctionDecl2965); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_RPAREN.add(RPAREN69);

                    // XQueryParser.g:332:106: (td= p_TypeDeclaration )?
                    int alt34=2;
                    int LA34_0 = input.LA(1);

                    if ( (LA34_0==AS) ) {
                        alt34=1;
                    }
                    switch (alt34) {
                        case 1 :
                            // XQueryParser.g:332:106: td= p_TypeDeclaration
                            {
                            pushFollow(FOLLOW_p_TypeDeclaration_in_pm_FunctionDecl2969);
                            td=p_TypeDeclaration();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_p_TypeDeclaration.add(td.getTree());

                            }
                            break;

                    }

                    // XQueryParser.g:332:126: (b= p_Block | k+= EXTERNAL )
                    int alt35=2;
                    int LA35_0 = input.LA(1);

                    if ( (LA35_0==LBRACKET) ) {
                        alt35=1;
                    }
                    else if ( (LA35_0==EXTERNAL) ) {
                        alt35=2;
                    }
                    else {
                        if (state.backtracking>0) {state.failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("", 35, 0, input);

                        throw nvae;
                    }
                    switch (alt35) {
                        case 1 :
                            // XQueryParser.g:332:127: b= p_Block
                            {
                            pushFollow(FOLLOW_p_Block_in_pm_FunctionDecl2975);
                            b=p_Block();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_p_Block.add(b.getTree());

                            }
                            break;
                        case 2 :
                            // XQueryParser.g:332:139: k+= EXTERNAL
                            {
                            k=(CommonToken)match(input,EXTERNAL,FOLLOW_EXTERNAL_in_pm_FunctionDecl2981); if (state.failed) return retval; 
                            if ( state.backtracking==0 ) stream_EXTERNAL.add(k);

                            if (list_k==null) list_k=new ArrayList();
                            list_k.add(k);


                            }
                            break;

                    }

                    SEMICOLON70=(CommonToken)match(input,SEMICOLON,FOLLOW_SEMICOLON_in_pm_FunctionDecl2984); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_SEMICOLON.add(SEMICOLON70);

                    if ( state.backtracking==0 ) {
                      ak(list_k);
                    }


                    // AST REWRITE
                    // elements: pl, qn, b, td
                    // token labels: 
                    // rule labels: qn, retval, b, pl, td
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_qn=new RewriteRuleSubtreeStream(adaptor,"rule qn",qn!=null?qn.tree:null);
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
                    RewriteRuleSubtreeStream stream_b=new RewriteRuleSubtreeStream(adaptor,"rule b",b!=null?b.tree:null);
                    RewriteRuleSubtreeStream stream_pl=new RewriteRuleSubtreeStream(adaptor,"rule pl",pl!=null?pl.tree:null);
                    RewriteRuleSubtreeStream stream_td=new RewriteRuleSubtreeStream(adaptor,"rule td",td!=null?td.tree:null);

                    root_0 = (XQDTCommonTree)adaptor.nil();
                    // 333:17: -> ^( FunctionDecl $qn ^( ParamList ( $pl)? ) ^( ReturnType ( $td)? ) ( $b)? )
                    {
                        // XQueryParser.g:333:20: ^( FunctionDecl $qn ^( ParamList ( $pl)? ) ^( ReturnType ( $td)? ) ( $b)? )
                        {
                        XQDTCommonTree root_1 = (XQDTCommonTree)adaptor.nil();
                        root_1 = (XQDTCommonTree)adaptor.becomeRoot((XQDTCommonTree)adaptor.create(FunctionDecl, "FunctionDecl"), root_1);

                        adaptor.addChild(root_1, stream_qn.nextTree());
                        // XQueryParser.g:333:39: ^( ParamList ( $pl)? )
                        {
                        XQDTCommonTree root_2 = (XQDTCommonTree)adaptor.nil();
                        root_2 = (XQDTCommonTree)adaptor.becomeRoot((XQDTCommonTree)adaptor.create(ParamList, "ParamList"), root_2);

                        // XQueryParser.g:333:51: ( $pl)?
                        if ( stream_pl.hasNext() ) {
                            adaptor.addChild(root_2, stream_pl.nextTree());

                        }
                        stream_pl.reset();

                        adaptor.addChild(root_1, root_2);
                        }
                        // XQueryParser.g:333:57: ^( ReturnType ( $td)? )
                        {
                        XQDTCommonTree root_2 = (XQDTCommonTree)adaptor.nil();
                        root_2 = (XQDTCommonTree)adaptor.becomeRoot((XQDTCommonTree)adaptor.create(ReturnType, "ReturnType"), root_2);

                        // XQueryParser.g:333:70: ( $td)?
                        if ( stream_td.hasNext() ) {
                            adaptor.addChild(root_2, stream_td.nextTree());

                        }
                        stream_td.reset();

                        adaptor.addChild(root_1, root_2);
                        }
                        // XQueryParser.g:333:76: ( $b)?
                        if ( stream_b.hasNext() ) {
                            adaptor.addChild(root_1, stream_b.nextTree());

                        }
                        stream_b.reset();

                        adaptor.addChild(root_0, root_1);
                        }

                    }

                    retval.tree = root_0;}
                    }
                    break;
                case 2 :
                    // XQueryParser.g:334:13: k+= DECLARE p_PrivateOption p_FunctionType k+= FUNCTION qn= p_QName LPAREN (pl= p_ParamList )? RPAREN (td= p_TypeDeclaration )? (ee= p_EnclosedExpr | k+= EXTERNAL ) SEMICOLON
                    {
                    k=(CommonToken)match(input,DECLARE,FOLLOW_DECLARE_in_pm_FunctionDecl3047); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_DECLARE.add(k);

                    if (list_k==null) list_k=new ArrayList();
                    list_k.add(k);

                    pushFollow(FOLLOW_p_PrivateOption_in_pm_FunctionDecl3049);
                    p_PrivateOption71=p_PrivateOption();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_p_PrivateOption.add(p_PrivateOption71.getTree());
                    pushFollow(FOLLOW_p_FunctionType_in_pm_FunctionDecl3051);
                    p_FunctionType72=p_FunctionType();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_p_FunctionType.add(p_FunctionType72.getTree());
                    k=(CommonToken)match(input,FUNCTION,FOLLOW_FUNCTION_in_pm_FunctionDecl3055); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_FUNCTION.add(k);

                    if (list_k==null) list_k=new ArrayList();
                    list_k.add(k);

                    pushFollow(FOLLOW_p_QName_in_pm_FunctionDecl3059);
                    qn=p_QName();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_p_QName.add(qn.getTree());
                    LPAREN73=(CommonToken)match(input,LPAREN,FOLLOW_LPAREN_in_pm_FunctionDecl3061); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_LPAREN.add(LPAREN73);

                    // XQueryParser.g:334:87: (pl= p_ParamList )?
                    int alt36=2;
                    int LA36_0 = input.LA(1);

                    if ( (LA36_0==DOLLAR) ) {
                        alt36=1;
                    }
                    switch (alt36) {
                        case 1 :
                            // XQueryParser.g:334:87: pl= p_ParamList
                            {
                            pushFollow(FOLLOW_p_ParamList_in_pm_FunctionDecl3065);
                            pl=p_ParamList();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_p_ParamList.add(pl.getTree());

                            }
                            break;

                    }

                    RPAREN74=(CommonToken)match(input,RPAREN,FOLLOW_RPAREN_in_pm_FunctionDecl3068); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_RPAREN.add(RPAREN74);

                    // XQueryParser.g:334:110: (td= p_TypeDeclaration )?
                    int alt37=2;
                    int LA37_0 = input.LA(1);

                    if ( (LA37_0==AS) ) {
                        alt37=1;
                    }
                    switch (alt37) {
                        case 1 :
                            // XQueryParser.g:334:110: td= p_TypeDeclaration
                            {
                            pushFollow(FOLLOW_p_TypeDeclaration_in_pm_FunctionDecl3072);
                            td=p_TypeDeclaration();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_p_TypeDeclaration.add(td.getTree());

                            }
                            break;

                    }

                    // XQueryParser.g:334:130: (ee= p_EnclosedExpr | k+= EXTERNAL )
                    int alt38=2;
                    int LA38_0 = input.LA(1);

                    if ( (LA38_0==LBRACKET) ) {
                        alt38=1;
                    }
                    else if ( (LA38_0==EXTERNAL) ) {
                        alt38=2;
                    }
                    else {
                        if (state.backtracking>0) {state.failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("", 38, 0, input);

                        throw nvae;
                    }
                    switch (alt38) {
                        case 1 :
                            // XQueryParser.g:334:131: ee= p_EnclosedExpr
                            {
                            pushFollow(FOLLOW_p_EnclosedExpr_in_pm_FunctionDecl3078);
                            ee=p_EnclosedExpr();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_p_EnclosedExpr.add(ee.getTree());

                            }
                            break;
                        case 2 :
                            // XQueryParser.g:334:151: k+= EXTERNAL
                            {
                            k=(CommonToken)match(input,EXTERNAL,FOLLOW_EXTERNAL_in_pm_FunctionDecl3084); if (state.failed) return retval; 
                            if ( state.backtracking==0 ) stream_EXTERNAL.add(k);

                            if (list_k==null) list_k=new ArrayList();
                            list_k.add(k);


                            }
                            break;

                    }

                    SEMICOLON75=(CommonToken)match(input,SEMICOLON,FOLLOW_SEMICOLON_in_pm_FunctionDecl3087); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_SEMICOLON.add(SEMICOLON75);

                    if ( state.backtracking==0 ) {
                      ak(list_k);
                    }


                    // AST REWRITE
                    // elements: qn, pl, td, ee
                    // token labels: 
                    // rule labels: qn, retval, ee, pl, td
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_qn=new RewriteRuleSubtreeStream(adaptor,"rule qn",qn!=null?qn.tree:null);
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
                    RewriteRuleSubtreeStream stream_ee=new RewriteRuleSubtreeStream(adaptor,"rule ee",ee!=null?ee.tree:null);
                    RewriteRuleSubtreeStream stream_pl=new RewriteRuleSubtreeStream(adaptor,"rule pl",pl!=null?pl.tree:null);
                    RewriteRuleSubtreeStream stream_td=new RewriteRuleSubtreeStream(adaptor,"rule td",td!=null?td.tree:null);

                    root_0 = (XQDTCommonTree)adaptor.nil();
                    // 335:17: -> ^( FunctionDecl $qn ^( ParamList ( $pl)? ) ^( ReturnType ( $td)? ) ( $ee)? )
                    {
                        // XQueryParser.g:335:20: ^( FunctionDecl $qn ^( ParamList ( $pl)? ) ^( ReturnType ( $td)? ) ( $ee)? )
                        {
                        XQDTCommonTree root_1 = (XQDTCommonTree)adaptor.nil();
                        root_1 = (XQDTCommonTree)adaptor.becomeRoot((XQDTCommonTree)adaptor.create(FunctionDecl, "FunctionDecl"), root_1);

                        adaptor.addChild(root_1, stream_qn.nextTree());
                        // XQueryParser.g:335:39: ^( ParamList ( $pl)? )
                        {
                        XQDTCommonTree root_2 = (XQDTCommonTree)adaptor.nil();
                        root_2 = (XQDTCommonTree)adaptor.becomeRoot((XQDTCommonTree)adaptor.create(ParamList, "ParamList"), root_2);

                        // XQueryParser.g:335:51: ( $pl)?
                        if ( stream_pl.hasNext() ) {
                            adaptor.addChild(root_2, stream_pl.nextTree());

                        }
                        stream_pl.reset();

                        adaptor.addChild(root_1, root_2);
                        }
                        // XQueryParser.g:335:57: ^( ReturnType ( $td)? )
                        {
                        XQDTCommonTree root_2 = (XQDTCommonTree)adaptor.nil();
                        root_2 = (XQDTCommonTree)adaptor.becomeRoot((XQDTCommonTree)adaptor.create(ReturnType, "ReturnType"), root_2);

                        // XQueryParser.g:335:70: ( $td)?
                        if ( stream_td.hasNext() ) {
                            adaptor.addChild(root_2, stream_td.nextTree());

                        }
                        stream_td.reset();

                        adaptor.addChild(root_1, root_2);
                        }
                        // XQueryParser.g:335:76: ( $ee)?
                        if ( stream_ee.hasNext() ) {
                            adaptor.addChild(root_1, stream_ee.nextTree());

                        }
                        stream_ee.reset();

                        adaptor.addChild(root_0, root_1);
                        }

                    }

                    retval.tree = root_0;}
                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (XQDTCommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (XQDTCommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "pm_FunctionDecl"

    public static class p_FunctionType_return extends ParserRuleReturnScope {
        XQDTCommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "p_FunctionType"
    // XQueryParser.g:342:1: p_FunctionType : ({...}? =>ku= UPDATING | {...}? =>ks= SIMPLE | );
    public final XQueryParser.p_FunctionType_return p_FunctionType() throws RecognitionException {
        XQueryParser.p_FunctionType_return retval = new XQueryParser.p_FunctionType_return();
        retval.start = input.LT(1);

        XQDTCommonTree root_0 = null;

        CommonToken ku=null;
        CommonToken ks=null;

        XQDTCommonTree ku_tree=null;
        XQDTCommonTree ks_tree=null;

        try {
            // XQueryParser.g:343:9: ({...}? =>ku= UPDATING | {...}? =>ks= SIMPLE | )
            int alt40=3;
            int LA40_0 = input.LA(1);

            if ( (LA40_0==UPDATING) && ((lc(XQU)))) {
                alt40=1;
            }
            else if ( (LA40_0==SIMPLE) && ((lc(XQS)))) {
                alt40=2;
            }
            else if ( (LA40_0==FUNCTION) ) {
                alt40=3;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 40, 0, input);

                throw nvae;
            }
            switch (alt40) {
                case 1 :
                    // XQueryParser.g:343:11: {...}? =>ku= UPDATING
                    {
                    root_0 = (XQDTCommonTree)adaptor.nil();

                    if ( !((lc(XQU))) ) {
                        if (state.backtracking>0) {state.failed=true; return retval;}
                        throw new FailedPredicateException(input, "p_FunctionType", "lc(XQU)");
                    }
                    ku=(CommonToken)match(input,UPDATING,FOLLOW_UPDATING_in_p_FunctionType3168); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    ku_tree = (XQDTCommonTree)adaptor.create(ku);
                    adaptor.addChild(root_0, ku_tree);
                    }
                    if ( state.backtracking==0 ) {
                      ak(ku);
                    }

                    }
                    break;
                case 2 :
                    // XQueryParser.g:344:11: {...}? =>ks= SIMPLE
                    {
                    root_0 = (XQDTCommonTree)adaptor.nil();

                    if ( !((lc(XQS))) ) {
                        if (state.backtracking>0) {state.failed=true; return retval;}
                        throw new FailedPredicateException(input, "p_FunctionType", "lc(XQS)");
                    }
                    ks=(CommonToken)match(input,SIMPLE,FOLLOW_SIMPLE_in_p_FunctionType3187); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    ks_tree = (XQDTCommonTree)adaptor.create(ks);
                    adaptor.addChild(root_0, ks_tree);
                    }
                    if ( state.backtracking==0 ) {
                      ak(ks);
                    }

                    }
                    break;
                case 3 :
                    // XQueryParser.g:346:9: 
                    {
                    root_0 = (XQDTCommonTree)adaptor.nil();

                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (XQDTCommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (XQDTCommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "p_FunctionType"

    public static class p_PrivateOption_return extends ParserRuleReturnScope {
        XQDTCommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "p_PrivateOption"
    // XQueryParser.g:348:1: p_PrivateOption : ({...}? =>kv= PRIVATE | );
    public final XQueryParser.p_PrivateOption_return p_PrivateOption() throws RecognitionException {
        XQueryParser.p_PrivateOption_return retval = new XQueryParser.p_PrivateOption_return();
        retval.start = input.LT(1);

        XQDTCommonTree root_0 = null;

        CommonToken kv=null;

        XQDTCommonTree kv_tree=null;

        try {
            // XQueryParser.g:349:9: ({...}? =>kv= PRIVATE | )
            int alt41=2;
            int LA41_0 = input.LA(1);

            if ( (LA41_0==PRIVATE) && ((lc(MLS)))) {
                alt41=1;
            }
            else if ( (LA41_0==CONSTANT) && ((lc(XQS)))) {
                alt41=2;
            }
            else if ( (LA41_0==VARIABLE) ) {
                alt41=2;
            }
            else if ( (LA41_0==UPDATING) && ((lc(XQU)))) {
                alt41=2;
            }
            else if ( (LA41_0==SIMPLE) && ((lc(XQS)))) {
                alt41=2;
            }
            else if ( (LA41_0==FUNCTION) ) {
                alt41=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 41, 0, input);

                throw nvae;
            }
            switch (alt41) {
                case 1 :
                    // XQueryParser.g:349:11: {...}? =>kv= PRIVATE
                    {
                    root_0 = (XQDTCommonTree)adaptor.nil();

                    if ( !((lc(MLS))) ) {
                        if (state.backtracking>0) {state.failed=true; return retval;}
                        throw new FailedPredicateException(input, "p_PrivateOption", "lc(MLS)");
                    }
                    kv=(CommonToken)match(input,PRIVATE,FOLLOW_PRIVATE_in_p_PrivateOption3231); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    kv_tree = (XQDTCommonTree)adaptor.create(kv);
                    adaptor.addChild(root_0, kv_tree);
                    }
                    if ( state.backtracking==0 ) {
                      ak(kv);
                    }

                    }
                    break;
                case 2 :
                    // XQueryParser.g:351:9: 
                    {
                    root_0 = (XQDTCommonTree)adaptor.nil();

                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (XQDTCommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (XQDTCommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "p_PrivateOption"

    public static class p_ParamList_return extends ParserRuleReturnScope {
        XQDTCommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "p_ParamList"
    // XQueryParser.g:357:1: p_ParamList : p+= p_Param ( COMMA p+= p_Param )* -> ( $p)+ ;
    public final XQueryParser.p_ParamList_return p_ParamList() throws RecognitionException {
        XQueryParser.p_ParamList_return retval = new XQueryParser.p_ParamList_return();
        retval.start = input.LT(1);

        XQDTCommonTree root_0 = null;

        CommonToken COMMA76=null;
        List list_p=null;
        XQueryParser.p_Param_return p = null;
         p = null;
        XQDTCommonTree COMMA76_tree=null;
        RewriteRuleTokenStream stream_COMMA=new RewriteRuleTokenStream(adaptor,"token COMMA");
        RewriteRuleSubtreeStream stream_p_Param=new RewriteRuleSubtreeStream(adaptor,"rule p_Param");
        try {
            // XQueryParser.g:358:9: (p+= p_Param ( COMMA p+= p_Param )* -> ( $p)+ )
            // XQueryParser.g:358:11: p+= p_Param ( COMMA p+= p_Param )*
            {
            pushFollow(FOLLOW_p_Param_in_p_ParamList3276);
            p=p_Param();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_p_Param.add(p.getTree());
            if (list_p==null) list_p=new ArrayList();
            list_p.add(p.getTree());

            // XQueryParser.g:358:22: ( COMMA p+= p_Param )*
            loop42:
            do {
                int alt42=2;
                int LA42_0 = input.LA(1);

                if ( (LA42_0==COMMA) ) {
                    alt42=1;
                }


                switch (alt42) {
            	case 1 :
            	    // XQueryParser.g:358:23: COMMA p+= p_Param
            	    {
            	    COMMA76=(CommonToken)match(input,COMMA,FOLLOW_COMMA_in_p_ParamList3279); if (state.failed) return retval; 
            	    if ( state.backtracking==0 ) stream_COMMA.add(COMMA76);

            	    pushFollow(FOLLOW_p_Param_in_p_ParamList3283);
            	    p=p_Param();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) stream_p_Param.add(p.getTree());
            	    if (list_p==null) list_p=new ArrayList();
            	    list_p.add(p.getTree());


            	    }
            	    break;

            	default :
            	    break loop42;
                }
            } while (true);



            // AST REWRITE
            // elements: p
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: p
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
            RewriteRuleSubtreeStream stream_p=new RewriteRuleSubtreeStream(adaptor,"token p",list_p);
            root_0 = (XQDTCommonTree)adaptor.nil();
            // 359:17: -> ( $p)+
            {
                if ( !(stream_p.hasNext()) ) {
                    throw new RewriteEarlyExitException();
                }
                while ( stream_p.hasNext() ) {
                    adaptor.addChild(root_0, stream_p.nextTree());

                }
                stream_p.reset();

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (XQDTCommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (XQDTCommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "p_ParamList"

    public static class p_Param_return extends ParserRuleReturnScope {
        XQDTCommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "p_Param"
    // XQueryParser.g:363:1: p_Param : DOLLAR qn= p_QName (td= p_TypeDeclaration )? -> ^( Param $qn ( $td)? ) ;
    public final XQueryParser.p_Param_return p_Param() throws RecognitionException {
        XQueryParser.p_Param_return retval = new XQueryParser.p_Param_return();
        retval.start = input.LT(1);

        XQDTCommonTree root_0 = null;

        CommonToken DOLLAR77=null;
        XQueryParser.p_QName_return qn = null;

        XQueryParser.p_TypeDeclaration_return td = null;


        XQDTCommonTree DOLLAR77_tree=null;
        RewriteRuleTokenStream stream_DOLLAR=new RewriteRuleTokenStream(adaptor,"token DOLLAR");
        RewriteRuleSubtreeStream stream_p_TypeDeclaration=new RewriteRuleSubtreeStream(adaptor,"rule p_TypeDeclaration");
        RewriteRuleSubtreeStream stream_p_QName=new RewriteRuleSubtreeStream(adaptor,"rule p_QName");
        try {
            // XQueryParser.g:364:9: ( DOLLAR qn= p_QName (td= p_TypeDeclaration )? -> ^( Param $qn ( $td)? ) )
            // XQueryParser.g:364:11: DOLLAR qn= p_QName (td= p_TypeDeclaration )?
            {
            DOLLAR77=(CommonToken)match(input,DOLLAR,FOLLOW_DOLLAR_in_p_Param3341); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_DOLLAR.add(DOLLAR77);

            pushFollow(FOLLOW_p_QName_in_p_Param3345);
            qn=p_QName();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_p_QName.add(qn.getTree());
            // XQueryParser.g:364:31: (td= p_TypeDeclaration )?
            int alt43=2;
            int LA43_0 = input.LA(1);

            if ( (LA43_0==AS) ) {
                alt43=1;
            }
            switch (alt43) {
                case 1 :
                    // XQueryParser.g:364:31: td= p_TypeDeclaration
                    {
                    pushFollow(FOLLOW_p_TypeDeclaration_in_p_Param3349);
                    td=p_TypeDeclaration();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_p_TypeDeclaration.add(td.getTree());

                    }
                    break;

            }



            // AST REWRITE
            // elements: td, qn
            // token labels: 
            // rule labels: qn, retval, td
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_qn=new RewriteRuleSubtreeStream(adaptor,"rule qn",qn!=null?qn.tree:null);
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
            RewriteRuleSubtreeStream stream_td=new RewriteRuleSubtreeStream(adaptor,"rule td",td!=null?td.tree:null);

            root_0 = (XQDTCommonTree)adaptor.nil();
            // 365:17: -> ^( Param $qn ( $td)? )
            {
                // XQueryParser.g:365:20: ^( Param $qn ( $td)? )
                {
                XQDTCommonTree root_1 = (XQDTCommonTree)adaptor.nil();
                root_1 = (XQDTCommonTree)adaptor.becomeRoot((XQDTCommonTree)adaptor.create(Param, "Param"), root_1);

                adaptor.addChild(root_1, stream_qn.nextTree());
                // XQueryParser.g:365:32: ( $td)?
                if ( stream_td.hasNext() ) {
                    adaptor.addChild(root_1, stream_td.nextTree());

                }
                stream_td.reset();

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (XQDTCommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (XQDTCommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "p_Param"

    public static class p_EnclosedExpr_return extends ParserRuleReturnScope {
        XQDTCommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "p_EnclosedExpr"
    // XQueryParser.g:369:1: p_EnclosedExpr : LBRACKET pm_Expr RBRACKET -> ^( EnclosedExpr pm_Expr ) ;
    public final XQueryParser.p_EnclosedExpr_return p_EnclosedExpr() throws RecognitionException {
        XQueryParser.p_EnclosedExpr_return retval = new XQueryParser.p_EnclosedExpr_return();
        retval.start = input.LT(1);

        XQDTCommonTree root_0 = null;

        CommonToken LBRACKET78=null;
        CommonToken RBRACKET80=null;
        XQueryParser.pm_Expr_return pm_Expr79 = null;


        XQDTCommonTree LBRACKET78_tree=null;
        XQDTCommonTree RBRACKET80_tree=null;
        RewriteRuleTokenStream stream_LBRACKET=new RewriteRuleTokenStream(adaptor,"token LBRACKET");
        RewriteRuleTokenStream stream_RBRACKET=new RewriteRuleTokenStream(adaptor,"token RBRACKET");
        RewriteRuleSubtreeStream stream_pm_Expr=new RewriteRuleSubtreeStream(adaptor,"rule pm_Expr");
        try {
            // XQueryParser.g:370:9: ( LBRACKET pm_Expr RBRACKET -> ^( EnclosedExpr pm_Expr ) )
            // XQueryParser.g:370:11: LBRACKET pm_Expr RBRACKET
            {
            LBRACKET78=(CommonToken)match(input,LBRACKET,FOLLOW_LBRACKET_in_p_EnclosedExpr3405); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_LBRACKET.add(LBRACKET78);

            pushFollow(FOLLOW_pm_Expr_in_p_EnclosedExpr3407);
            pm_Expr79=pm_Expr();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_pm_Expr.add(pm_Expr79.getTree());
            RBRACKET80=(CommonToken)match(input,RBRACKET,FOLLOW_RBRACKET_in_p_EnclosedExpr3409); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_RBRACKET.add(RBRACKET80);



            // AST REWRITE
            // elements: pm_Expr
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (XQDTCommonTree)adaptor.nil();
            // 371:17: -> ^( EnclosedExpr pm_Expr )
            {
                // XQueryParser.g:371:20: ^( EnclosedExpr pm_Expr )
                {
                XQDTCommonTree root_1 = (XQDTCommonTree)adaptor.nil();
                root_1 = (XQDTCommonTree)adaptor.becomeRoot((XQDTCommonTree)adaptor.create(EnclosedExpr, "EnclosedExpr"), root_1);

                adaptor.addChild(root_1, stream_pm_Expr.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (XQDTCommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (XQDTCommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "p_EnclosedExpr"

    public static class p_QueryBody_return extends ParserRuleReturnScope {
        XQDTCommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "p_QueryBody"
    // XQueryParser.g:375:1: p_QueryBody : pm_Expr -> ^( QueryBody pm_Expr ) ;
    public final XQueryParser.p_QueryBody_return p_QueryBody() throws RecognitionException {
        XQueryParser.p_QueryBody_return retval = new XQueryParser.p_QueryBody_return();
        retval.start = input.LT(1);

        XQDTCommonTree root_0 = null;

        XQueryParser.pm_Expr_return pm_Expr81 = null;


        RewriteRuleSubtreeStream stream_pm_Expr=new RewriteRuleSubtreeStream(adaptor,"rule pm_Expr");
        try {
            // XQueryParser.g:376:9: ( pm_Expr -> ^( QueryBody pm_Expr ) )
            // XQueryParser.g:376:11: pm_Expr
            {
            pushFollow(FOLLOW_pm_Expr_in_p_QueryBody3459);
            pm_Expr81=pm_Expr();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_pm_Expr.add(pm_Expr81.getTree());


            // AST REWRITE
            // elements: pm_Expr
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (XQDTCommonTree)adaptor.nil();
            // 377:17: -> ^( QueryBody pm_Expr )
            {
                // XQueryParser.g:377:20: ^( QueryBody pm_Expr )
                {
                XQDTCommonTree root_1 = (XQDTCommonTree)adaptor.nil();
                root_1 = (XQDTCommonTree)adaptor.becomeRoot((XQDTCommonTree)adaptor.create(QueryBody, "QueryBody"), root_1);

                adaptor.addChild(root_1, stream_pm_Expr.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (XQDTCommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (XQDTCommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "p_QueryBody"

    public static class pm_Expr_return extends ParserRuleReturnScope {
        XQDTCommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "pm_Expr"
    // XQueryParser.g:382:1: pm_Expr : p_ConcatExpr ({...}? => ( SEMICOLON ( pm_ApplyExpr )* )? | ) ({...}? => ( SEMICOLON p_ConcatExpr )+ | ) ;
    public final XQueryParser.pm_Expr_return pm_Expr() throws RecognitionException {
        XQueryParser.pm_Expr_return retval = new XQueryParser.pm_Expr_return();
        retval.start = input.LT(1);

        XQDTCommonTree root_0 = null;

        CommonToken SEMICOLON83=null;
        CommonToken SEMICOLON85=null;
        XQueryParser.p_ConcatExpr_return p_ConcatExpr82 = null;

        XQueryParser.pm_ApplyExpr_return pm_ApplyExpr84 = null;

        XQueryParser.p_ConcatExpr_return p_ConcatExpr86 = null;


        XQDTCommonTree SEMICOLON83_tree=null;
        XQDTCommonTree SEMICOLON85_tree=null;

        try {
            // XQueryParser.g:383:9: ( p_ConcatExpr ({...}? => ( SEMICOLON ( pm_ApplyExpr )* )? | ) ({...}? => ( SEMICOLON p_ConcatExpr )+ | ) )
            // XQueryParser.g:383:11: p_ConcatExpr ({...}? => ( SEMICOLON ( pm_ApplyExpr )* )? | ) ({...}? => ( SEMICOLON p_ConcatExpr )+ | )
            {
            root_0 = (XQDTCommonTree)adaptor.nil();

            pushFollow(FOLLOW_p_ConcatExpr_in_pm_Expr3510);
            p_ConcatExpr82=p_ConcatExpr();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, p_ConcatExpr82.getTree());
            // XQueryParser.g:384:11: ({...}? => ( SEMICOLON ( pm_ApplyExpr )* )? | )
            int alt46=2;
            int LA46_0 = input.LA(1);

            if ( (LA46_0==SEMICOLON) && ((((lc(XQS))&&(lc(MLS)))||((lc(XQS))&&(lc(MLS)))||((lc(XQS))&&(lc(MLS)))||((lc(XQS))&&(lc(MLS)))||((lc(XQS))&&(lc(MLS)))||((lc(XQS))&&(lc(MLS)))||((lc(XQS))&&(lc(MLS)))||((lc(XQS))&&(lc(MLS)))||((lc(XQS))&&(lc(MLS)))||((lc(XQS))&&(lc(MLS)))||((lc(XQS))&&(lc(MLS)))||((lc(XQS))&&(lc(MLS)))||((lc(XQS))&&(lc(MLS)))||((lc(XQS))&&(lc(MLS)))||((lc(XQS))&&(lc(MLS)))||((lc(XQS))&&(lc(MLS)))||((lc(XQS))&&(lc(MLS)))||((lc(XQS))&&(lc(MLS)))||((lc(XQS))&&(lc(MLS)))||((lc(XQS))&&(lc(MLS)))||((lc(XQS))&&(lc(MLS)))||((lc(XQS))&&(lc(MLS)))||((lc(XQS))&&(lc(MLS)))||((lc(XQS))&&(lc(MLS)))||((lc(XQS))&&(lc(MLS)))||((lc(XQS))&&(lc(MLS)))||((lc(XQS))&&(lc(MLS)))||((lc(XQS))&&(lc(MLS)))||((lc(XQS))&&(lc(MLS)))||((lc(XQS))&&(lc(MLS)))||((lc(XQS))&&(lc(MLS)))||((lc(XQS))&&(lc(MLS)))||((lc(XQS))&&(lc(MLS)))||((lc(XQS))&&(lc(MLS)))||((lc(XQS))&&(lc(MLS)))||((lc(XQS))&&(lc(MLS)))||((lc(XQS))&&(lc(MLS)))||((lc(XQS))&&(lc(MLS)))||((lc(XQS))&&(lc(MLS)))||((lc(XQS))&&(lc(MLS)))||((lc(XQS))&&(lc(MLS)))||((lc(XQS))&&(lc(MLS)))||((lc(XQS))&&(lc(MLS)))||((lc(XQS))&&(lc(MLS)))||((lc(XQS))&&(lc(MLS)))||((lc(XQS))&&(lc(MLS)))||((lc(XQS))&&(lc(MLS)))||((lc(XQS))&&(lc(MLS)))||((lc(XQS))&&(lc(MLS)))||((lc(XQS))&&(lc(MLS)))||((lc(XQS))&&(lc(MLS)))||((lc(XQS))&&(lc(MLS)))||((lc(XQS))&&(lc(MLS)))||((lc(XQS))&&(lc(MLS)))||((lc(XQS))&&(lc(MLS)))||((lc(XQS))&&(lc(MLS)))||((lc(XQS))&&(lc(MLS)))||((lc(XQS))&&(lc(MLS)))||((lc(XQS))&&(lc(MLS)))||((lc(XQS))&&(lc(MLS)))||((lc(XQS))&&(lc(MLS)))||((lc(XQS))&&(lc(MLS)))||((lc(XQS))&&(lc(MLS)))||((lc(XQS))&&(lc(MLS)))||((lc(XQS))&&(lc(MLS)))||((lc(XQS))&&(lc(MLS)))||((lc(XQS))&&(lc(MLS)))||((lc(XQS))&&(lc(MLS)))||((lc(XQS))&&(lc(MLS)))||((lc(XQS))&&(lc(MLS)))||((lc(XQS))&&(lc(MLS)))||((lc(XQS))&&(lc(MLS)))||((lc(XQS))&&(lc(MLS)))||((lc(XQS))&&(lc(MLS)))||((lc(XQS))&&(lc(MLS)))||((lc(XQS))&&(lc(MLS)))||((lc(XQS))&&(lc(MLS)))||((lc(XQS))&&(lc(MLS)))||((lc(XQS))&&(lc(MLS)))||((lc(XQS))&&(lc(MLS)))||((lc(XQS))&&(lc(MLS)))||((lc(XQS))&&(lc(MLS)))||((lc(XQS))&&(lc(MLS)))||((lc(XQS))&&(lc(MLS)))||((lc(XQS))&&(lc(MLS)))||((lc(XQS))&&(lc(MLS)))||((lc(XQS))&&(lc(MLS)))||((lc(XQS))&&(lc(MLS)))||((lc(XQS))&&(lc(MLS)))||((lc(XQS))&&(lc(MLS)))||((lc(XQS))&&(lc(MLS)))||((lc(XQS))&&(lc(MLS)))||((lc(XQS))&&(lc(MLS)))||((lc(XQS))&&(lc(MLS)))||((lc(XQS))&&(lc(MLS)))||((lc(XQS))&&(lc(MLS)))||((lc(XQS))&&(lc(MLS)))||((lc(XQS))&&(lc(MLS)))||((lc(XQS))&&(lc(MLS)))||((lc(XQS))&&(lc(MLS)))||((lc(XQS))&&(lc(MLS)))||((lc(XQS))&&(lc(MLS)))||((lc(XQS))&&(lc(MLS)))||((lc(XQS))&&(lc(MLS)))||((lc(XQS))&&(lc(MLS)))||((lc(XQS))&&(lc(MLS)))||((lc(XQS))&&(lc(MLS)))||((lc(XQS))&&(lc(MLS)))||((lc(XQS))&&(lc(MLS)))||((lc(XQS))&&(lc(MLS)))||((lc(XQS))&&(lc(MLS)))||((lc(XQS))&&(lc(MLS)))||((lc(XQS))&&(lc(MLS)))||((lc(XQS))&&(lc(MLS)))||((lc(XQS))&&(lc(MLS)))||((lc(XQS))&&(lc(MLS)))||((lc(XQS))&&(lc(MLS)))||((lc(XQS))&&(lc(MLS)))||((lc(XQS))&&(lc(MLS)))||((lc(XQS))&&(lc(MLS)))||((lc(XQS))&&(lc(MLS)))||((lc(XQS))&&(lc(MLS)))||((lc(XQS))&&(lc(MLS)))||((lc(XQS))&&(lc(MLS)))||((lc(XQS))&&(lc(MLS)))||((lc(XQS))&&(lc(MLS)))||((lc(XQS))&&(lc(MLS)))||((lc(XQS))&&(lc(MLS)))||((lc(XQS))&&(lc(MLS)))||((lc(XQS))&&(lc(MLS)))||((lc(XQS))&&(lc(MLS)))||((lc(XQS))&&(lc(MLS)))||((lc(XQS))&&(lc(MLS)))||((lc(XQS))&&(lc(MLS)))||((lc(XQS))&&(lc(MLS)))||((lc(XQS))&&(lc(MLS)))||((lc(XQS))&&(lc(MLS)))||((lc(XQS))&&(lc(MLS)))||((lc(XQS))&&(lc(MLS)))||((lc(XQS))&&(lc(MLS)))||((lc(XQS))&&(lc(MLS)))||((lc(XQS))&&(lc(MLS)))||((lc(XQS))&&(lc(MLS)))||((lc(XQS))&&(lc(MLS)))||((lc(XQS))&&(lc(MLS)))||((lc(XQS))&&(lc(MLS)))||((lc(XQS))&&(lc(MLS)))||((lc(XQS))&&(lc(MLS)))||((lc(XQS))&&(lc(MLS)))||((lc(XQS))&&(lc(MLS)))||((lc(XQS))&&(lc(MLS)))||((lc(XQS))&&(lc(MLS)))||((lc(XQS))&&(lc(MLS)))||((lc(XQS))&&(lc(MLS)))||((lc(XQS))&&(lc(MLS)))||((lc(XQS))&&(lc(MLS)))||((lc(XQS))&&(lc(MLS)))||((lc(XQS))&&(lc(MLS)))||((lc(XQS))&&(lc(MLS)))||((lc(XQS))&&(lc(MLS)))||((lc(XQS))&&(lc(MLS)))||((lc(XQS))&&(lc(MLS)))||((lc(XQS))&&(lc(MLS)))||((lc(XQS))&&(lc(MLS)))||((lc(XQS))&&(lc(MLS)))||((lc(XQS))&&(lc(MLS)))||((lc(XQS))&&(lc(MLS)))||((lc(XQS))&&(lc(MLS)))||((lc(XQS))&&(lc(MLS)))||((lc(XQS))&&(lc(MLS)))||((lc(XQS))&&(lc(MLS)))||((lc(XQS))&&(lc(MLS)))||((lc(XQS))&&(lc(MLS)))||((lc(XQS))&&(lc(MLS)))||((lc(XQS))&&(lc(MLS)))||((lc(XQS))&&(lc(MLS)))||((lc(XQS))&&(lc(MLS)))||((lc(XQS))&&(lc(MLS)))||((lc(XQS))&&(lc(MLS)))||((lc(XQS))&&(lc(MLS)))||((lc(XQS))&&(lc(MLS)))||((lc(XQS))&&(lc(MLS)))||((lc(XQS))&&(lc(MLS)))||((lc(XQS))&&(lc(MLS)))||((lc(XQS))&&(lc(MLS)))||((lc(XQS))&&(lc(MLS)))||((lc(XQS))&&(lc(MLS)))||((lc(XQS))&&(lc(MLS)))||((lc(XQS))&&(lc(MLS)))||((lc(XQS))&&(lc(MLS)))||((lc(XQS))&&(lc(MLS)))||((lc(XQS))&&(lc(MLS)))||((lc(XQS))&&(lc(MLS)))||((lc(XQS))&&(lc(MLS)))||((lc(XQS))&&(lc(MLS)))||((lc(XQS))&&(lc(MLS)))||((lc(XQS))&&(lc(MLS)))||((lc(XQS))&&(lc(MLS)))||((lc(XQS))&&(lc(MLS)))||((lc(XQS))&&(lc(MLS)))||((lc(XQS))&&(lc(MLS)))||((lc(XQS))&&(lc(MLS)))||((lc(XQS))&&(lc(MLS)))||((lc(XQS))&&(lc(MLS)))||((lc(XQS))&&(lc(MLS)))||((lc(XQS))&&(lc(MLS)))||((lc(XQS))&&(lc(MLS)))||((lc(XQS))&&(lc(MLS)))||((lc(XQS))&&(lc(MLS)))||((lc(XQS))&&(lc(MLS)))||((lc(XQS))&&(lc(MLS)))||((lc(XQS))&&(lc(MLS)))||((lc(XQS))&&(lc(MLS)))||((lc(XQS))&&(lc(MLS)))||((lc(XQS))&&(lc(MLS)))||((lc(XQS))&&(lc(MLS)))||((lc(XQS))&&(lc(MLS)))||((lc(XQS))&&(lc(MLS)))||((lc(XQS))&&(lc(MLS)))||((lc(XQS))&&(lc(MLS)))||((lc(XQS))&&(lc(MLS)))||((lc(XQS))&&(lc(MLS)))||((lc(XQS))&&(lc(MLS)))||((lc(XQS))&&(lc(MLS)))||((lc(XQS))&&(lc(MLS)))||((lc(XQS))&&(lc(MLS)))||((lc(XQS))&&(lc(MLS)))||((lc(XQS))&&(lc(MLS)))||((lc(XQS))&&(lc(MLS)))||((lc(XQS))&&(lc(MLS)))||((lc(XQS))&&(lc(MLS)))||((lc(XQS))&&(lc(MLS)))||((lc(XQS))&&(lc(MLS)))||((lc(XQS))&&(lc(MLS)))||((lc(XQS))&&(lc(MLS)))||((lc(XQS))&&(lc(MLS)))||((lc(XQS))&&(lc(MLS)))||((lc(XQS))&&(lc(MLS)))||((lc(XQS))&&(lc(MLS)))||((lc(XQS))&&(lc(MLS)))||((lc(XQS))&&(lc(MLS)))||((lc(XQS))&&(lc(MLS)))||((lc(XQS))&&(lc(MLS)))||((lc(XQS))&&(lc(MLS)))||((lc(XQS))&&(lc(MLS)))||((lc(XQS))&&(lc(MLS)))||((lc(XQS))&&(lc(MLS)))||((lc(XQS))&&(lc(MLS)))||((lc(XQS))&&(lc(MLS)))||((lc(XQS))&&(lc(MLS)))||((lc(XQS))&&(lc(MLS)))||((lc(XQS))&&(lc(MLS)))||((lc(XQS))&&(lc(MLS)))||((lc(XQS))&&(lc(MLS)))||((lc(XQS))&&(lc(MLS)))||((lc(XQS))&&(lc(MLS)))||((lc(XQS))&&(lc(MLS)))||((lc(XQS))&&(lc(MLS)))||((lc(XQS))&&(lc(MLS)))||((lc(XQS))&&(lc(MLS)))||((lc(XQS))&&(lc(MLS)))||((lc(XQS))&&(lc(MLS)))||((lc(XQS))&&(lc(MLS)))||((lc(XQS))&&(lc(MLS)))||((lc(XQS))&&(lc(MLS)))||((lc(XQS))&&(lc(MLS)))||((lc(XQS))&&(lc(MLS)))||((lc(XQS))&&(lc(MLS)))||((lc(XQS))&&(lc(MLS)))||((lc(XQS))&&(lc(MLS)))||((lc(XQS))&&(lc(MLS)))||((lc(XQS))&&(lc(MLS)))||((lc(XQS))&&(lc(MLS)))||((lc(XQS))&&(lc(MLS)))||((lc(XQS))&&(lc(MLS)))||((lc(XQS))&&(lc(MLS)))||((lc(XQS))&&(lc(MLS)))||((lc(XQS))&&(lc(MLS)))||((lc(XQS))&&(lc(MLS)))||((lc(XQS))&&(lc(MLS)))||((lc(XQS))&&(lc(MLS)))||((lc(XQS))&&(lc(MLS)))||((lc(XQS))&&(lc(MLS)))||((lc(XQS))&&(lc(MLS)))||((lc(XQS))&&(lc(MLS)))||((lc(XQS))&&(lc(MLS)))||((lc(XQS))&&(lc(MLS)))||((lc(XQS))&&(lc(MLS)))||((lc(XQS))&&(lc(MLS)))||((lc(XQS))&&(lc(MLS)))||((lc(XQS))&&(lc(MLS)))||((lc(XQS))&&(lc(MLS)))||((lc(XQS))&&(lc(MLS)))||((lc(XQS))&&(lc(MLS)))||((lc(XQS))&&(lc(MLS)))||((lc(XQS))&&(lc(MLS)))||((lc(XQS))&&(lc(MLS)))||((lc(XQS))&&(lc(MLS)))||((lc(XQS))&&(lc(MLS)))||((lc(XQS))&&(lc(MLS)))||((lc(XQS))&&(lc(MLS)))||((lc(XQS))&&(lc(MLS)))||((lc(XQS))&&(lc(MLS)))||((lc(XQS))&&(lc(MLS)))||((lc(XQS))&&(lc(MLS)))||((lc(XQS))&&(lc(MLS)))||((lc(XQS))&&(lc(MLS)))||((lc(XQS))&&(lc(MLS)))||((lc(XQS))&&(lc(MLS)))||((lc(XQS))&&(lc(MLS)))||((lc(XQS))&&(lc(MLS)))||((lc(XQS))&&(lc(MLS)))||((lc(XQS))&&(lc(MLS)))||((lc(XQS))&&(lc(MLS)))||((lc(XQS))&&(lc(MLS)))||((lc(XQS))&&(lc(MLS)))||((lc(XQS))&&(lc(MLS)))||((lc(XQS))&&(lc(MLS)))||((lc(XQS))&&(lc(MLS)))||((lc(XQS))&&(lc(MLS)))||((lc(XQS))&&(lc(MLS)))||((lc(XQS))&&(lc(MLS)))||((lc(XQS))&&(lc(MLS)))||((lc(XQS))&&(lc(MLS)))||((lc(XQS))&&(lc(MLS)))||((lc(XQS))&&(lc(MLS)))||((lc(XQS))&&(lc(MLS)))||((lc(XQS))&&(lc(MLS)))||((lc(XQS))&&(lc(MLS)))||((lc(XQS))&&(lc(MLS)))||((lc(XQS))&&(lc(MLS)))||((lc(XQS))&&(lc(MLS)))||((lc(XQS))&&(lc(MLS)))||((lc(XQS))&&(lc(MLS)))||((lc(XQS))&&(lc(MLS)))||((lc(XQS))&&(lc(MLS)))||((lc(XQS))&&(lc(MLS)))||((lc(XQS))&&(lc(MLS)))||((lc(XQS))&&(lc(MLS)))||((lc(XQS))&&(lc(MLS)))||((lc(XQS))&&(lc(MLS)))||((lc(XQS))&&(lc(MLS)))||((lc(XQS))&&(lc(MLS)))||((lc(XQS))&&(lc(MLS)))||((lc(XQS))&&(lc(MLS)))||((lc(XQS))&&(lc(MLS)))||((lc(XQS))&&(lc(MLS)))||((lc(XQS))&&(lc(MLS)))||((lc(XQS))&&(lc(MLS)))||((lc(XQS))&&(lc(MLS)))||((lc(XQS))&&(lc(MLS)))||((lc(XQS))&&(lc(MLS)))||((lc(XQS))&&(lc(MLS)))||((lc(XQS))&&(lc(MLS)))||((lc(XQS))&&(lc(MLS)))||((lc(XQS))&&(lc(MLS)))||((lc(XQS))&&(lc(MLS)))||((lc(XQS))&&(lc(MLS)))||((lc(XQS))&&(lc(MLS)))||((lc(XQS))&&(lc(MLS)))||((lc(XQS))&&(lc(MLS)))||((lc(XQS))&&(lc(MLS)))||((lc(XQS))&&(lc(MLS)))||((lc(XQS))&&(lc(MLS)))||((lc(XQS))&&(lc(MLS)))||((lc(XQS))&&(lc(MLS)))||((lc(XQS))&&(lc(MLS)))||((lc(XQS))&&(lc(MLS)))||((lc(XQS))&&(lc(MLS)))||((lc(XQS))&&(lc(MLS)))||((lc(XQS))&&(lc(MLS)))||((lc(XQS))&&(lc(MLS)))||((lc(XQS))&&(lc(MLS)))||((lc(XQS))&&(lc(MLS)))||((lc(XQS))&&(lc(MLS)))||((lc(XQS))&&(lc(MLS)))||((lc(XQS))&&(lc(MLS)))||((lc(XQS))&&(lc(MLS)))||((lc(XQS))&&(lc(MLS)))||((lc(XQS))&&(lc(MLS)))||((lc(XQS))&&(lc(MLS)))||((lc(XQS))&&(lc(MLS)))||((lc(XQS))&&(lc(MLS)))||((lc(XQS))&&(lc(MLS)))||((lc(XQS))&&(lc(MLS)))||((lc(XQS))&&(lc(MLS)))||((lc(XQS))&&(lc(MLS)))||((lc(XQS))&&(lc(MLS)))||(lc(XQS))||((lc(XQS))&&(lc(MLS)))||((lc(XQS))&&(lc(MLS)))||((lc(XQS))&&(lc(MLS)))||((lc(XQS))&&(lc(MLS)))||((lc(XQS))&&(lc(MLS)))||((lc(XQS))&&(lc(MLS)))||((lc(XQS))&&(lc(MLS)))||((lc(XQS))&&(lc(MLS)))||((lc(XQS))&&(lc(MLS)))||((lc(XQS))&&(lc(MLS)))||((lc(XQS))&&(lc(MLS)))||((lc(XQS))&&(lc(MLS)))||((lc(XQS))&&(lc(MLS)))||((lc(XQS))&&(lc(MLS)))||((lc(XQS))&&(lc(MLS)))||((lc(XQS))&&(lc(MLS)))||((lc(XQS))&&(lc(MLS)))||((lc(XQS))&&(lc(MLS)))||((lc(XQS))&&(lc(MLS)))||((lc(XQS))&&(lc(MLS)))||((lc(XQS))&&(lc(MLS)))||((lc(XQS))&&(lc(MLS)))||((lc(XQS))&&(lc(MLS)))||((lc(XQS))&&(lc(MLS)))||((lc(XQS))&&(lc(MLS)))||((lc(XQS))&&(lc(MLS)))||((lc(XQS))&&(lc(MLS)))||((lc(XQS))&&(lc(MLS)))||(lc(MLS))||((lc(XQS))&&(lc(MLS)))||((lc(XQS))&&(lc(MLS)))||((lc(XQS))&&(lc(MLS)))||((lc(XQS))&&(lc(MLS)))||((lc(XQS))&&(lc(MLS)))||((lc(XQS))&&(lc(MLS)))||((lc(XQS))&&(lc(MLS)))||((lc(XQS))&&(lc(MLS)))||((lc(XQS))&&(lc(MLS)))||((lc(XQS))&&(lc(MLS)))||((lc(XQS))&&(lc(MLS)))||((lc(XQS))&&(lc(MLS)))||((lc(XQS))&&(lc(MLS)))||((lc(XQS))&&(lc(MLS)))||((lc(XQS))&&(lc(MLS)))||((lc(XQS))&&(lc(MLS)))||((lc(XQS))&&(lc(MLS)))||((lc(XQS))&&(lc(MLS)))||((lc(XQS))&&(lc(MLS)))||((lc(XQS))&&(lc(MLS)))||((lc(XQS))&&(lc(MLS)))))) {
                int LA46_1 = input.LA(2);

                if ( (((lc(XQS))||((lc(XQS))&&(lc(MLS))))) ) {
                    alt46=1;
                }
                else if ( ((lc(MLS))) ) {
                    alt46=2;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 46, 1, input);

                    throw nvae;
                }
            }
            else if ( (LA46_0==RBRACKET) ) {
                int LA46_2 = input.LA(2);

                if ( ((lc(XQS))) ) {
                    alt46=1;
                }
                else if ( (true) ) {
                    alt46=2;
                }
            }
            else if ( (LA46_0==EOF) ) {
                int LA46_3 = input.LA(2);

                if ( ((lc(XQS))) ) {
                    alt46=1;
                }
                else if ( (true) ) {
                    alt46=2;
                }
            }
            else if ( (LA46_0==RPAREN) ) {
                int LA46_4 = input.LA(2);

                if ( ((lc(XQS))) ) {
                    alt46=1;
                }
                else if ( (true) ) {
                    alt46=2;
                }
            }
            else if ( (LA46_0==RSQUARE) ) {
                int LA46_5 = input.LA(2);

                if ( ((lc(XQS))) ) {
                    alt46=1;
                }
                else if ( (true) ) {
                    alt46=2;
                }
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 46, 0, input);

                throw nvae;
            }
            switch (alt46) {
                case 1 :
                    // XQueryParser.g:384:12: {...}? => ( SEMICOLON ( pm_ApplyExpr )* )?
                    {
                    if ( !((lc(XQS))) ) {
                        if (state.backtracking>0) {state.failed=true; return retval;}
                        throw new FailedPredicateException(input, "pm_Expr", "lc(XQS)");
                    }
                    // XQueryParser.g:384:25: ( SEMICOLON ( pm_ApplyExpr )* )?
                    int alt45=2;
                    int LA45_0 = input.LA(1);

                    if ( (LA45_0==SEMICOLON) ) {
                        int LA45_1 = input.LA(2);

                        if ( (!(((lc(MLS))))) ) {
                            alt45=1;
                        }
                    }
                    switch (alt45) {
                        case 1 :
                            // XQueryParser.g:384:26: SEMICOLON ( pm_ApplyExpr )*
                            {
                            SEMICOLON83=(CommonToken)match(input,SEMICOLON,FOLLOW_SEMICOLON_in_pm_Expr3527); if (state.failed) return retval;
                            if ( state.backtracking==0 ) {
                            SEMICOLON83_tree = (XQDTCommonTree)adaptor.create(SEMICOLON83);
                            adaptor.addChild(root_0, SEMICOLON83_tree);
                            }
                            // XQueryParser.g:384:36: ( pm_ApplyExpr )*
                            loop44:
                            do {
                                int alt44=2;
                                int LA44_0 = input.LA(1);

                                if ( ((LA44_0>=ANCESTOR && LA44_0<=EXIT)||(LA44_0>=SEQUENTIAL && LA44_0<=LPAREN)||LA44_0==DOLLAR||(LA44_0>=STAR && LA44_0<=SMALLER)||(LA44_0>=SLASH && LA44_0<=DOT_DOT)||LA44_0==ATTR_SIGN||(LA44_0>=APOS && LA44_0<=QUOT)||LA44_0==L_NCName||(LA44_0>=L_Pragma && LA44_0<=L_DoubleLiteral)) ) {
                                    alt44=1;
                                }


                                switch (alt44) {
                            	case 1 :
                            	    // XQueryParser.g:384:36: pm_ApplyExpr
                            	    {
                            	    pushFollow(FOLLOW_pm_ApplyExpr_in_pm_Expr3529);
                            	    pm_ApplyExpr84=pm_ApplyExpr();

                            	    state._fsp--;
                            	    if (state.failed) return retval;
                            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, pm_ApplyExpr84.getTree());

                            	    }
                            	    break;

                            	default :
                            	    break loop44;
                                }
                            } while (true);


                            }
                            break;

                    }


                    }
                    break;
                case 2 :
                    // XQueryParser.g:384:67: 
                    {
                    }
                    break;

            }

            // XQueryParser.g:385:11: ({...}? => ( SEMICOLON p_ConcatExpr )+ | )
            int alt48=2;
            int LA48_0 = input.LA(1);

            if ( (LA48_0==SEMICOLON) && ((lc(MLS)))) {
                alt48=1;
            }
            else if ( (LA48_0==EOF||LA48_0==RPAREN||LA48_0==RBRACKET||LA48_0==RSQUARE) ) {
                alt48=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 48, 0, input);

                throw nvae;
            }
            switch (alt48) {
                case 1 :
                    // XQueryParser.g:385:12: {...}? => ( SEMICOLON p_ConcatExpr )+
                    {
                    if ( !((lc(MLS))) ) {
                        if (state.backtracking>0) {state.failed=true; return retval;}
                        throw new FailedPredicateException(input, "pm_Expr", "lc(MLS)");
                    }
                    // XQueryParser.g:385:25: ( SEMICOLON p_ConcatExpr )+
                    int cnt47=0;
                    loop47:
                    do {
                        int alt47=2;
                        int LA47_0 = input.LA(1);

                        if ( (LA47_0==SEMICOLON) ) {
                            alt47=1;
                        }


                        switch (alt47) {
                    	case 1 :
                    	    // XQueryParser.g:385:26: SEMICOLON p_ConcatExpr
                    	    {
                    	    SEMICOLON85=(CommonToken)match(input,SEMICOLON,FOLLOW_SEMICOLON_in_pm_Expr3554); if (state.failed) return retval;
                    	    if ( state.backtracking==0 ) {
                    	    SEMICOLON85_tree = (XQDTCommonTree)adaptor.create(SEMICOLON85);
                    	    adaptor.addChild(root_0, SEMICOLON85_tree);
                    	    }
                    	    pushFollow(FOLLOW_p_ConcatExpr_in_pm_Expr3556);
                    	    p_ConcatExpr86=p_ConcatExpr();

                    	    state._fsp--;
                    	    if (state.failed) return retval;
                    	    if ( state.backtracking==0 ) adaptor.addChild(root_0, p_ConcatExpr86.getTree());

                    	    }
                    	    break;

                    	default :
                    	    if ( cnt47 >= 1 ) break loop47;
                    	    if (state.backtracking>0) {state.failed=true; return retval;}
                                EarlyExitException eee =
                                    new EarlyExitException(47, input);
                                throw eee;
                        }
                        cnt47++;
                    } while (true);


                    }
                    break;
                case 2 :
                    // XQueryParser.g:385:66: 
                    {
                    }
                    break;

            }


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (XQDTCommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (XQDTCommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "pm_Expr"

    public static class p_ExprSingle_return extends ParserRuleReturnScope {
        XQDTCommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "p_ExprSingle"
    // XQueryParser.g:390:1: p_ExprSingle : ( p_FLWORExpr | p_QuantifiedExpr | p_TypeswitchExpr | p_IfExpr | p_TryCatchExpr | {...}? => p_EvalExpr | {...}? => p_InsertExpr | {...}? => p_DeleteExpr | {...}? => p_RenameExpr | {...}? => p_ReplaceExpr | {...}? => p_TransformExpr | {...}? => p_BlockExpr | {...}? => p_AssignmentExpr | {...}? => p_ExitExpr | {...}? => p_WhileExpr | p_OrExpr );
    public final XQueryParser.p_ExprSingle_return p_ExprSingle() throws RecognitionException {
        XQueryParser.p_ExprSingle_return retval = new XQueryParser.p_ExprSingle_return();
        retval.start = input.LT(1);

        XQDTCommonTree root_0 = null;

        XQueryParser.p_FLWORExpr_return p_FLWORExpr87 = null;

        XQueryParser.p_QuantifiedExpr_return p_QuantifiedExpr88 = null;

        XQueryParser.p_TypeswitchExpr_return p_TypeswitchExpr89 = null;

        XQueryParser.p_IfExpr_return p_IfExpr90 = null;

        XQueryParser.p_TryCatchExpr_return p_TryCatchExpr91 = null;

        XQueryParser.p_EvalExpr_return p_EvalExpr92 = null;

        XQueryParser.p_InsertExpr_return p_InsertExpr93 = null;

        XQueryParser.p_DeleteExpr_return p_DeleteExpr94 = null;

        XQueryParser.p_RenameExpr_return p_RenameExpr95 = null;

        XQueryParser.p_ReplaceExpr_return p_ReplaceExpr96 = null;

        XQueryParser.p_TransformExpr_return p_TransformExpr97 = null;

        XQueryParser.p_BlockExpr_return p_BlockExpr98 = null;

        XQueryParser.p_AssignmentExpr_return p_AssignmentExpr99 = null;

        XQueryParser.p_ExitExpr_return p_ExitExpr100 = null;

        XQueryParser.p_WhileExpr_return p_WhileExpr101 = null;

        XQueryParser.p_OrExpr_return p_OrExpr102 = null;



        try {
            // XQueryParser.g:391:9: ( p_FLWORExpr | p_QuantifiedExpr | p_TypeswitchExpr | p_IfExpr | p_TryCatchExpr | {...}? => p_EvalExpr | {...}? => p_InsertExpr | {...}? => p_DeleteExpr | {...}? => p_RenameExpr | {...}? => p_ReplaceExpr | {...}? => p_TransformExpr | {...}? => p_BlockExpr | {...}? => p_AssignmentExpr | {...}? => p_ExitExpr | {...}? => p_WhileExpr | p_OrExpr )
            int alt49=16;
            alt49 = dfa49.predict(input);
            switch (alt49) {
                case 1 :
                    // XQueryParser.g:391:11: p_FLWORExpr
                    {
                    root_0 = (XQDTCommonTree)adaptor.nil();

                    pushFollow(FOLLOW_p_FLWORExpr_in_p_ExprSingle3590);
                    p_FLWORExpr87=p_FLWORExpr();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, p_FLWORExpr87.getTree());

                    }
                    break;
                case 2 :
                    // XQueryParser.g:392:11: p_QuantifiedExpr
                    {
                    root_0 = (XQDTCommonTree)adaptor.nil();

                    pushFollow(FOLLOW_p_QuantifiedExpr_in_p_ExprSingle3602);
                    p_QuantifiedExpr88=p_QuantifiedExpr();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, p_QuantifiedExpr88.getTree());

                    }
                    break;
                case 3 :
                    // XQueryParser.g:393:11: p_TypeswitchExpr
                    {
                    root_0 = (XQDTCommonTree)adaptor.nil();

                    pushFollow(FOLLOW_p_TypeswitchExpr_in_p_ExprSingle3614);
                    p_TypeswitchExpr89=p_TypeswitchExpr();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, p_TypeswitchExpr89.getTree());

                    }
                    break;
                case 4 :
                    // XQueryParser.g:394:11: p_IfExpr
                    {
                    root_0 = (XQDTCommonTree)adaptor.nil();

                    pushFollow(FOLLOW_p_IfExpr_in_p_ExprSingle3626);
                    p_IfExpr90=p_IfExpr();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, p_IfExpr90.getTree());

                    }
                    break;
                case 5 :
                    // XQueryParser.g:395:11: p_TryCatchExpr
                    {
                    root_0 = (XQDTCommonTree)adaptor.nil();

                    pushFollow(FOLLOW_p_TryCatchExpr_in_p_ExprSingle3638);
                    p_TryCatchExpr91=p_TryCatchExpr();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, p_TryCatchExpr91.getTree());

                    }
                    break;
                case 6 :
                    // XQueryParser.g:396:11: {...}? => p_EvalExpr
                    {
                    root_0 = (XQDTCommonTree)adaptor.nil();

                    if ( !((lc(ZORBA))) ) {
                        if (state.backtracking>0) {state.failed=true; return retval;}
                        throw new FailedPredicateException(input, "p_ExprSingle", "lc(ZORBA)");
                    }
                    pushFollow(FOLLOW_p_EvalExpr_in_p_ExprSingle3653);
                    p_EvalExpr92=p_EvalExpr();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, p_EvalExpr92.getTree());

                    }
                    break;
                case 7 :
                    // XQueryParser.g:397:11: {...}? => p_InsertExpr
                    {
                    root_0 = (XQDTCommonTree)adaptor.nil();

                    if ( !((lc(XQU))) ) {
                        if (state.backtracking>0) {state.failed=true; return retval;}
                        throw new FailedPredicateException(input, "p_ExprSingle", "lc(XQU)");
                    }
                    pushFollow(FOLLOW_p_InsertExpr_in_p_ExprSingle3668);
                    p_InsertExpr93=p_InsertExpr();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, p_InsertExpr93.getTree());

                    }
                    break;
                case 8 :
                    // XQueryParser.g:398:11: {...}? => p_DeleteExpr
                    {
                    root_0 = (XQDTCommonTree)adaptor.nil();

                    if ( !((lc(XQU))) ) {
                        if (state.backtracking>0) {state.failed=true; return retval;}
                        throw new FailedPredicateException(input, "p_ExprSingle", "lc(XQU)");
                    }
                    pushFollow(FOLLOW_p_DeleteExpr_in_p_ExprSingle3683);
                    p_DeleteExpr94=p_DeleteExpr();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, p_DeleteExpr94.getTree());

                    }
                    break;
                case 9 :
                    // XQueryParser.g:399:11: {...}? => p_RenameExpr
                    {
                    root_0 = (XQDTCommonTree)adaptor.nil();

                    if ( !((lc(XQU))) ) {
                        if (state.backtracking>0) {state.failed=true; return retval;}
                        throw new FailedPredicateException(input, "p_ExprSingle", "lc(XQU)");
                    }
                    pushFollow(FOLLOW_p_RenameExpr_in_p_ExprSingle3698);
                    p_RenameExpr95=p_RenameExpr();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, p_RenameExpr95.getTree());

                    }
                    break;
                case 10 :
                    // XQueryParser.g:400:11: {...}? => p_ReplaceExpr
                    {
                    root_0 = (XQDTCommonTree)adaptor.nil();

                    if ( !((lc(XQU))) ) {
                        if (state.backtracking>0) {state.failed=true; return retval;}
                        throw new FailedPredicateException(input, "p_ExprSingle", "lc(XQU)");
                    }
                    pushFollow(FOLLOW_p_ReplaceExpr_in_p_ExprSingle3713);
                    p_ReplaceExpr96=p_ReplaceExpr();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, p_ReplaceExpr96.getTree());

                    }
                    break;
                case 11 :
                    // XQueryParser.g:401:11: {...}? => p_TransformExpr
                    {
                    root_0 = (XQDTCommonTree)adaptor.nil();

                    if ( !((lc(XQU))) ) {
                        if (state.backtracking>0) {state.failed=true; return retval;}
                        throw new FailedPredicateException(input, "p_ExprSingle", "lc(XQU)");
                    }
                    pushFollow(FOLLOW_p_TransformExpr_in_p_ExprSingle3728);
                    p_TransformExpr97=p_TransformExpr();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, p_TransformExpr97.getTree());

                    }
                    break;
                case 12 :
                    // XQueryParser.g:402:11: {...}? => p_BlockExpr
                    {
                    root_0 = (XQDTCommonTree)adaptor.nil();

                    if ( !((lc(XQS))) ) {
                        if (state.backtracking>0) {state.failed=true; return retval;}
                        throw new FailedPredicateException(input, "p_ExprSingle", "lc(XQS)");
                    }
                    pushFollow(FOLLOW_p_BlockExpr_in_p_ExprSingle3743);
                    p_BlockExpr98=p_BlockExpr();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, p_BlockExpr98.getTree());

                    }
                    break;
                case 13 :
                    // XQueryParser.g:403:11: {...}? => p_AssignmentExpr
                    {
                    root_0 = (XQDTCommonTree)adaptor.nil();

                    if ( !((lc(XQS))) ) {
                        if (state.backtracking>0) {state.failed=true; return retval;}
                        throw new FailedPredicateException(input, "p_ExprSingle", "lc(XQS)");
                    }
                    pushFollow(FOLLOW_p_AssignmentExpr_in_p_ExprSingle3758);
                    p_AssignmentExpr99=p_AssignmentExpr();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, p_AssignmentExpr99.getTree());

                    }
                    break;
                case 14 :
                    // XQueryParser.g:404:11: {...}? => p_ExitExpr
                    {
                    root_0 = (XQDTCommonTree)adaptor.nil();

                    if ( !((lc(XQS))) ) {
                        if (state.backtracking>0) {state.failed=true; return retval;}
                        throw new FailedPredicateException(input, "p_ExprSingle", "lc(XQS)");
                    }
                    pushFollow(FOLLOW_p_ExitExpr_in_p_ExprSingle3773);
                    p_ExitExpr100=p_ExitExpr();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, p_ExitExpr100.getTree());

                    }
                    break;
                case 15 :
                    // XQueryParser.g:405:11: {...}? => p_WhileExpr
                    {
                    root_0 = (XQDTCommonTree)adaptor.nil();

                    if ( !((lc(XQS))) ) {
                        if (state.backtracking>0) {state.failed=true; return retval;}
                        throw new FailedPredicateException(input, "p_ExprSingle", "lc(XQS)");
                    }
                    pushFollow(FOLLOW_p_WhileExpr_in_p_ExprSingle3788);
                    p_WhileExpr101=p_WhileExpr();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, p_WhileExpr101.getTree());

                    }
                    break;
                case 16 :
                    // XQueryParser.g:406:11: p_OrExpr
                    {
                    root_0 = (XQDTCommonTree)adaptor.nil();

                    pushFollow(FOLLOW_p_OrExpr_in_p_ExprSingle3800);
                    p_OrExpr102=p_OrExpr();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, p_OrExpr102.getTree());

                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (XQDTCommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (XQDTCommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "p_ExprSingle"

    public static class p_FLWORExpr_return extends ParserRuleReturnScope {
        XQDTCommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "p_FLWORExpr"
    // XQueryParser.g:410:1: p_FLWORExpr : p_InitialClause ( p_IntermediateClause )* p_ReturnClause ;
    public final XQueryParser.p_FLWORExpr_return p_FLWORExpr() throws RecognitionException {
        XQueryParser.p_FLWORExpr_return retval = new XQueryParser.p_FLWORExpr_return();
        retval.start = input.LT(1);

        XQDTCommonTree root_0 = null;

        XQueryParser.p_InitialClause_return p_InitialClause103 = null;

        XQueryParser.p_IntermediateClause_return p_IntermediateClause104 = null;

        XQueryParser.p_ReturnClause_return p_ReturnClause105 = null;



        try {
            // XQueryParser.g:411:9: ( p_InitialClause ( p_IntermediateClause )* p_ReturnClause )
            // XQueryParser.g:411:11: p_InitialClause ( p_IntermediateClause )* p_ReturnClause
            {
            root_0 = (XQDTCommonTree)adaptor.nil();

            pushFollow(FOLLOW_p_InitialClause_in_p_FLWORExpr3826);
            p_InitialClause103=p_InitialClause();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, p_InitialClause103.getTree());
            // XQueryParser.g:411:27: ( p_IntermediateClause )*
            loop50:
            do {
                int alt50=2;
                int LA50_0 = input.LA(1);

                if ( (LA50_0==FOR||LA50_0==LET||LA50_0==ORDER||LA50_0==STABLE||LA50_0==WHERE||LA50_0==COUNT||LA50_0==GROUP) ) {
                    alt50=1;
                }


                switch (alt50) {
            	case 1 :
            	    // XQueryParser.g:411:27: p_IntermediateClause
            	    {
            	    pushFollow(FOLLOW_p_IntermediateClause_in_p_FLWORExpr3828);
            	    p_IntermediateClause104=p_IntermediateClause();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, p_IntermediateClause104.getTree());

            	    }
            	    break;

            	default :
            	    break loop50;
                }
            } while (true);

            pushFollow(FOLLOW_p_ReturnClause_in_p_FLWORExpr3831);
            p_ReturnClause105=p_ReturnClause();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, p_ReturnClause105.getTree());

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (XQDTCommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (XQDTCommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "p_FLWORExpr"

    public static class p_InitialClause_return extends ParserRuleReturnScope {
        XQDTCommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "p_InitialClause"
    // XQueryParser.g:415:1: p_InitialClause : ( p_ForClause | p_LetClause | p_WindowClause );
    public final XQueryParser.p_InitialClause_return p_InitialClause() throws RecognitionException {
        XQueryParser.p_InitialClause_return retval = new XQueryParser.p_InitialClause_return();
        retval.start = input.LT(1);

        XQDTCommonTree root_0 = null;

        XQueryParser.p_ForClause_return p_ForClause106 = null;

        XQueryParser.p_LetClause_return p_LetClause107 = null;

        XQueryParser.p_WindowClause_return p_WindowClause108 = null;



        try {
            // XQueryParser.g:416:9: ( p_ForClause | p_LetClause | p_WindowClause )
            int alt51=3;
            int LA51_0 = input.LA(1);

            if ( (LA51_0==FOR) ) {
                int LA51_1 = input.LA(2);

                if ( (LA51_1==DOLLAR) ) {
                    alt51=1;
                }
                else if ( (LA51_1==SLIDING||LA51_1==TUMBLING) ) {
                    alt51=3;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 51, 1, input);

                    throw nvae;
                }
            }
            else if ( (LA51_0==LET) ) {
                alt51=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 51, 0, input);

                throw nvae;
            }
            switch (alt51) {
                case 1 :
                    // XQueryParser.g:416:11: p_ForClause
                    {
                    root_0 = (XQDTCommonTree)adaptor.nil();

                    pushFollow(FOLLOW_p_ForClause_in_p_InitialClause3857);
                    p_ForClause106=p_ForClause();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, p_ForClause106.getTree());

                    }
                    break;
                case 2 :
                    // XQueryParser.g:416:25: p_LetClause
                    {
                    root_0 = (XQDTCommonTree)adaptor.nil();

                    pushFollow(FOLLOW_p_LetClause_in_p_InitialClause3861);
                    p_LetClause107=p_LetClause();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, p_LetClause107.getTree());

                    }
                    break;
                case 3 :
                    // XQueryParser.g:416:39: p_WindowClause
                    {
                    root_0 = (XQDTCommonTree)adaptor.nil();

                    pushFollow(FOLLOW_p_WindowClause_in_p_InitialClause3865);
                    p_WindowClause108=p_WindowClause();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, p_WindowClause108.getTree());

                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (XQDTCommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (XQDTCommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "p_InitialClause"

    public static class p_IntermediateClause_return extends ParserRuleReturnScope {
        XQDTCommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "p_IntermediateClause"
    // XQueryParser.g:420:1: p_IntermediateClause : ( p_InitialClause | p_WhereClause | p_GroupByClause | p_OrderByClause | p_CountClause );
    public final XQueryParser.p_IntermediateClause_return p_IntermediateClause() throws RecognitionException {
        XQueryParser.p_IntermediateClause_return retval = new XQueryParser.p_IntermediateClause_return();
        retval.start = input.LT(1);

        XQDTCommonTree root_0 = null;

        XQueryParser.p_InitialClause_return p_InitialClause109 = null;

        XQueryParser.p_WhereClause_return p_WhereClause110 = null;

        XQueryParser.p_GroupByClause_return p_GroupByClause111 = null;

        XQueryParser.p_OrderByClause_return p_OrderByClause112 = null;

        XQueryParser.p_CountClause_return p_CountClause113 = null;



        try {
            // XQueryParser.g:421:9: ( p_InitialClause | p_WhereClause | p_GroupByClause | p_OrderByClause | p_CountClause )
            int alt52=5;
            switch ( input.LA(1) ) {
            case FOR:
            case LET:
                {
                alt52=1;
                }
                break;
            case WHERE:
                {
                alt52=2;
                }
                break;
            case GROUP:
                {
                alt52=3;
                }
                break;
            case ORDER:
            case STABLE:
                {
                alt52=4;
                }
                break;
            case COUNT:
                {
                alt52=5;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 52, 0, input);

                throw nvae;
            }

            switch (alt52) {
                case 1 :
                    // XQueryParser.g:421:11: p_InitialClause
                    {
                    root_0 = (XQDTCommonTree)adaptor.nil();

                    pushFollow(FOLLOW_p_InitialClause_in_p_IntermediateClause3891);
                    p_InitialClause109=p_InitialClause();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, p_InitialClause109.getTree());

                    }
                    break;
                case 2 :
                    // XQueryParser.g:421:29: p_WhereClause
                    {
                    root_0 = (XQDTCommonTree)adaptor.nil();

                    pushFollow(FOLLOW_p_WhereClause_in_p_IntermediateClause3895);
                    p_WhereClause110=p_WhereClause();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, p_WhereClause110.getTree());

                    }
                    break;
                case 3 :
                    // XQueryParser.g:421:45: p_GroupByClause
                    {
                    root_0 = (XQDTCommonTree)adaptor.nil();

                    pushFollow(FOLLOW_p_GroupByClause_in_p_IntermediateClause3899);
                    p_GroupByClause111=p_GroupByClause();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, p_GroupByClause111.getTree());

                    }
                    break;
                case 4 :
                    // XQueryParser.g:421:63: p_OrderByClause
                    {
                    root_0 = (XQDTCommonTree)adaptor.nil();

                    pushFollow(FOLLOW_p_OrderByClause_in_p_IntermediateClause3903);
                    p_OrderByClause112=p_OrderByClause();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, p_OrderByClause112.getTree());

                    }
                    break;
                case 5 :
                    // XQueryParser.g:421:81: p_CountClause
                    {
                    root_0 = (XQDTCommonTree)adaptor.nil();

                    pushFollow(FOLLOW_p_CountClause_in_p_IntermediateClause3907);
                    p_CountClause113=p_CountClause();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, p_CountClause113.getTree());

                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (XQDTCommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (XQDTCommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "p_IntermediateClause"

    public static class p_ForClause_return extends ParserRuleReturnScope {
        XQDTCommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "p_ForClause"
    // XQueryParser.g:425:1: p_ForClause : k+= FOR DOLLAR p_VarName ( p_TypeDeclaration )? ( p_PositionalVar )? k+= IN p_ExprSingle ( COMMA p_QName ( p_TypeDeclaration )? ( p_PositionalVar )? k+= IN p_ExprSingle )* ;
    public final XQueryParser.p_ForClause_return p_ForClause() throws RecognitionException {
        XQueryParser.p_ForClause_return retval = new XQueryParser.p_ForClause_return();
        retval.start = input.LT(1);

        XQDTCommonTree root_0 = null;

        CommonToken DOLLAR114=null;
        CommonToken COMMA119=null;
        CommonToken k=null;
        List list_k=null;
        XQueryParser.p_VarName_return p_VarName115 = null;

        XQueryParser.p_TypeDeclaration_return p_TypeDeclaration116 = null;

        XQueryParser.p_PositionalVar_return p_PositionalVar117 = null;

        XQueryParser.p_ExprSingle_return p_ExprSingle118 = null;

        XQueryParser.p_QName_return p_QName120 = null;

        XQueryParser.p_TypeDeclaration_return p_TypeDeclaration121 = null;

        XQueryParser.p_PositionalVar_return p_PositionalVar122 = null;

        XQueryParser.p_ExprSingle_return p_ExprSingle123 = null;


        XQDTCommonTree DOLLAR114_tree=null;
        XQDTCommonTree COMMA119_tree=null;
        XQDTCommonTree k_tree=null;

        try {
            // XQueryParser.g:426:9: (k+= FOR DOLLAR p_VarName ( p_TypeDeclaration )? ( p_PositionalVar )? k+= IN p_ExprSingle ( COMMA p_QName ( p_TypeDeclaration )? ( p_PositionalVar )? k+= IN p_ExprSingle )* )
            // XQueryParser.g:426:11: k+= FOR DOLLAR p_VarName ( p_TypeDeclaration )? ( p_PositionalVar )? k+= IN p_ExprSingle ( COMMA p_QName ( p_TypeDeclaration )? ( p_PositionalVar )? k+= IN p_ExprSingle )*
            {
            root_0 = (XQDTCommonTree)adaptor.nil();

            k=(CommonToken)match(input,FOR,FOLLOW_FOR_in_p_ForClause3935); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            k_tree = (XQDTCommonTree)adaptor.create(k);
            adaptor.addChild(root_0, k_tree);
            }
            if (list_k==null) list_k=new ArrayList();
            list_k.add(k);

            DOLLAR114=(CommonToken)match(input,DOLLAR,FOLLOW_DOLLAR_in_p_ForClause3937); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            DOLLAR114_tree = (XQDTCommonTree)adaptor.create(DOLLAR114);
            adaptor.addChild(root_0, DOLLAR114_tree);
            }
            pushFollow(FOLLOW_p_VarName_in_p_ForClause3939);
            p_VarName115=p_VarName();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, p_VarName115.getTree());
            // XQueryParser.g:426:35: ( p_TypeDeclaration )?
            int alt53=2;
            int LA53_0 = input.LA(1);

            if ( (LA53_0==AS) ) {
                alt53=1;
            }
            switch (alt53) {
                case 1 :
                    // XQueryParser.g:426:35: p_TypeDeclaration
                    {
                    pushFollow(FOLLOW_p_TypeDeclaration_in_p_ForClause3941);
                    p_TypeDeclaration116=p_TypeDeclaration();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, p_TypeDeclaration116.getTree());

                    }
                    break;

            }

            // XQueryParser.g:426:54: ( p_PositionalVar )?
            int alt54=2;
            int LA54_0 = input.LA(1);

            if ( (LA54_0==AT) ) {
                alt54=1;
            }
            switch (alt54) {
                case 1 :
                    // XQueryParser.g:426:54: p_PositionalVar
                    {
                    pushFollow(FOLLOW_p_PositionalVar_in_p_ForClause3944);
                    p_PositionalVar117=p_PositionalVar();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, p_PositionalVar117.getTree());

                    }
                    break;

            }

            k=(CommonToken)match(input,IN,FOLLOW_IN_in_p_ForClause3949); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            k_tree = (XQDTCommonTree)adaptor.create(k);
            adaptor.addChild(root_0, k_tree);
            }
            if (list_k==null) list_k=new ArrayList();
            list_k.add(k);

            pushFollow(FOLLOW_p_ExprSingle_in_p_ForClause3951);
            p_ExprSingle118=p_ExprSingle();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, p_ExprSingle118.getTree());
            // XQueryParser.g:426:90: ( COMMA p_QName ( p_TypeDeclaration )? ( p_PositionalVar )? k+= IN p_ExprSingle )*
            loop57:
            do {
                int alt57=2;
                int LA57_0 = input.LA(1);

                if ( (LA57_0==COMMA) ) {
                    alt57=1;
                }


                switch (alt57) {
            	case 1 :
            	    // XQueryParser.g:426:91: COMMA p_QName ( p_TypeDeclaration )? ( p_PositionalVar )? k+= IN p_ExprSingle
            	    {
            	    COMMA119=(CommonToken)match(input,COMMA,FOLLOW_COMMA_in_p_ForClause3954); if (state.failed) return retval;
            	    if ( state.backtracking==0 ) {
            	    COMMA119_tree = (XQDTCommonTree)adaptor.create(COMMA119);
            	    adaptor.addChild(root_0, COMMA119_tree);
            	    }
            	    pushFollow(FOLLOW_p_QName_in_p_ForClause3956);
            	    p_QName120=p_QName();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, p_QName120.getTree());
            	    // XQueryParser.g:426:105: ( p_TypeDeclaration )?
            	    int alt55=2;
            	    int LA55_0 = input.LA(1);

            	    if ( (LA55_0==AS) ) {
            	        alt55=1;
            	    }
            	    switch (alt55) {
            	        case 1 :
            	            // XQueryParser.g:426:105: p_TypeDeclaration
            	            {
            	            pushFollow(FOLLOW_p_TypeDeclaration_in_p_ForClause3958);
            	            p_TypeDeclaration121=p_TypeDeclaration();

            	            state._fsp--;
            	            if (state.failed) return retval;
            	            if ( state.backtracking==0 ) adaptor.addChild(root_0, p_TypeDeclaration121.getTree());

            	            }
            	            break;

            	    }

            	    // XQueryParser.g:426:124: ( p_PositionalVar )?
            	    int alt56=2;
            	    int LA56_0 = input.LA(1);

            	    if ( (LA56_0==AT) ) {
            	        alt56=1;
            	    }
            	    switch (alt56) {
            	        case 1 :
            	            // XQueryParser.g:426:124: p_PositionalVar
            	            {
            	            pushFollow(FOLLOW_p_PositionalVar_in_p_ForClause3961);
            	            p_PositionalVar122=p_PositionalVar();

            	            state._fsp--;
            	            if (state.failed) return retval;
            	            if ( state.backtracking==0 ) adaptor.addChild(root_0, p_PositionalVar122.getTree());

            	            }
            	            break;

            	    }

            	    k=(CommonToken)match(input,IN,FOLLOW_IN_in_p_ForClause3966); if (state.failed) return retval;
            	    if ( state.backtracking==0 ) {
            	    k_tree = (XQDTCommonTree)adaptor.create(k);
            	    adaptor.addChild(root_0, k_tree);
            	    }
            	    if (list_k==null) list_k=new ArrayList();
            	    list_k.add(k);

            	    pushFollow(FOLLOW_p_ExprSingle_in_p_ForClause3968);
            	    p_ExprSingle123=p_ExprSingle();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, p_ExprSingle123.getTree());

            	    }
            	    break;

            	default :
            	    break loop57;
                }
            } while (true);

            if ( state.backtracking==0 ) {
              ak(list_k);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (XQDTCommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (XQDTCommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "p_ForClause"

    public static class p_PositionalVar_return extends ParserRuleReturnScope {
        XQDTCommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "p_PositionalVar"
    // XQueryParser.g:430:1: p_PositionalVar : ka= AT DOLLAR p_VarName ;
    public final XQueryParser.p_PositionalVar_return p_PositionalVar() throws RecognitionException {
        XQueryParser.p_PositionalVar_return retval = new XQueryParser.p_PositionalVar_return();
        retval.start = input.LT(1);

        XQDTCommonTree root_0 = null;

        CommonToken ka=null;
        CommonToken DOLLAR124=null;
        XQueryParser.p_VarName_return p_VarName125 = null;


        XQDTCommonTree ka_tree=null;
        XQDTCommonTree DOLLAR124_tree=null;

        try {
            // XQueryParser.g:431:9: (ka= AT DOLLAR p_VarName )
            // XQueryParser.g:431:11: ka= AT DOLLAR p_VarName
            {
            root_0 = (XQDTCommonTree)adaptor.nil();

            ka=(CommonToken)match(input,AT,FOLLOW_AT_in_p_PositionalVar4000); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            ka_tree = (XQDTCommonTree)adaptor.create(ka);
            adaptor.addChild(root_0, ka_tree);
            }
            if ( state.backtracking==0 ) {
              ak(ka);
            }
            DOLLAR124=(CommonToken)match(input,DOLLAR,FOLLOW_DOLLAR_in_p_PositionalVar4004); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            DOLLAR124_tree = (XQDTCommonTree)adaptor.create(DOLLAR124);
            adaptor.addChild(root_0, DOLLAR124_tree);
            }
            pushFollow(FOLLOW_p_VarName_in_p_PositionalVar4006);
            p_VarName125=p_VarName();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, p_VarName125.getTree());

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (XQDTCommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (XQDTCommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "p_PositionalVar"

    public static class p_LetClause_return extends ParserRuleReturnScope {
        XQDTCommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "p_LetClause"
    // XQueryParser.g:435:1: p_LetClause : kl= LET DOLLAR p_VarName ( p_TypeDeclaration )? BIND p_ExprSingle ( COMMA DOLLAR p_VarName ( p_TypeDeclaration )? BIND p_ExprSingle )* ;
    public final XQueryParser.p_LetClause_return p_LetClause() throws RecognitionException {
        XQueryParser.p_LetClause_return retval = new XQueryParser.p_LetClause_return();
        retval.start = input.LT(1);

        XQDTCommonTree root_0 = null;

        CommonToken kl=null;
        CommonToken DOLLAR126=null;
        CommonToken BIND129=null;
        CommonToken COMMA131=null;
        CommonToken DOLLAR132=null;
        CommonToken BIND135=null;
        XQueryParser.p_VarName_return p_VarName127 = null;

        XQueryParser.p_TypeDeclaration_return p_TypeDeclaration128 = null;

        XQueryParser.p_ExprSingle_return p_ExprSingle130 = null;

        XQueryParser.p_VarName_return p_VarName133 = null;

        XQueryParser.p_TypeDeclaration_return p_TypeDeclaration134 = null;

        XQueryParser.p_ExprSingle_return p_ExprSingle136 = null;


        XQDTCommonTree kl_tree=null;
        XQDTCommonTree DOLLAR126_tree=null;
        XQDTCommonTree BIND129_tree=null;
        XQDTCommonTree COMMA131_tree=null;
        XQDTCommonTree DOLLAR132_tree=null;
        XQDTCommonTree BIND135_tree=null;

        try {
            // XQueryParser.g:436:9: (kl= LET DOLLAR p_VarName ( p_TypeDeclaration )? BIND p_ExprSingle ( COMMA DOLLAR p_VarName ( p_TypeDeclaration )? BIND p_ExprSingle )* )
            // XQueryParser.g:436:11: kl= LET DOLLAR p_VarName ( p_TypeDeclaration )? BIND p_ExprSingle ( COMMA DOLLAR p_VarName ( p_TypeDeclaration )? BIND p_ExprSingle )*
            {
            root_0 = (XQDTCommonTree)adaptor.nil();

            kl=(CommonToken)match(input,LET,FOLLOW_LET_in_p_LetClause4034); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            kl_tree = (XQDTCommonTree)adaptor.create(kl);
            adaptor.addChild(root_0, kl_tree);
            }
            if ( state.backtracking==0 ) {
              ak(kl);
            }
            DOLLAR126=(CommonToken)match(input,DOLLAR,FOLLOW_DOLLAR_in_p_LetClause4038); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            DOLLAR126_tree = (XQDTCommonTree)adaptor.create(DOLLAR126);
            adaptor.addChild(root_0, DOLLAR126_tree);
            }
            pushFollow(FOLLOW_p_VarName_in_p_LetClause4040);
            p_VarName127=p_VarName();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, p_VarName127.getTree());
            // XQueryParser.g:436:46: ( p_TypeDeclaration )?
            int alt58=2;
            int LA58_0 = input.LA(1);

            if ( (LA58_0==AS) ) {
                alt58=1;
            }
            switch (alt58) {
                case 1 :
                    // XQueryParser.g:436:46: p_TypeDeclaration
                    {
                    pushFollow(FOLLOW_p_TypeDeclaration_in_p_LetClause4042);
                    p_TypeDeclaration128=p_TypeDeclaration();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, p_TypeDeclaration128.getTree());

                    }
                    break;

            }

            BIND129=(CommonToken)match(input,BIND,FOLLOW_BIND_in_p_LetClause4045); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            BIND129_tree = (XQDTCommonTree)adaptor.create(BIND129);
            adaptor.addChild(root_0, BIND129_tree);
            }
            pushFollow(FOLLOW_p_ExprSingle_in_p_LetClause4047);
            p_ExprSingle130=p_ExprSingle();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, p_ExprSingle130.getTree());
            // XQueryParser.g:436:83: ( COMMA DOLLAR p_VarName ( p_TypeDeclaration )? BIND p_ExprSingle )*
            loop60:
            do {
                int alt60=2;
                int LA60_0 = input.LA(1);

                if ( (LA60_0==COMMA) ) {
                    alt60=1;
                }


                switch (alt60) {
            	case 1 :
            	    // XQueryParser.g:436:84: COMMA DOLLAR p_VarName ( p_TypeDeclaration )? BIND p_ExprSingle
            	    {
            	    COMMA131=(CommonToken)match(input,COMMA,FOLLOW_COMMA_in_p_LetClause4050); if (state.failed) return retval;
            	    if ( state.backtracking==0 ) {
            	    COMMA131_tree = (XQDTCommonTree)adaptor.create(COMMA131);
            	    adaptor.addChild(root_0, COMMA131_tree);
            	    }
            	    DOLLAR132=(CommonToken)match(input,DOLLAR,FOLLOW_DOLLAR_in_p_LetClause4052); if (state.failed) return retval;
            	    if ( state.backtracking==0 ) {
            	    DOLLAR132_tree = (XQDTCommonTree)adaptor.create(DOLLAR132);
            	    adaptor.addChild(root_0, DOLLAR132_tree);
            	    }
            	    pushFollow(FOLLOW_p_VarName_in_p_LetClause4054);
            	    p_VarName133=p_VarName();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, p_VarName133.getTree());
            	    // XQueryParser.g:436:107: ( p_TypeDeclaration )?
            	    int alt59=2;
            	    int LA59_0 = input.LA(1);

            	    if ( (LA59_0==AS) ) {
            	        alt59=1;
            	    }
            	    switch (alt59) {
            	        case 1 :
            	            // XQueryParser.g:436:107: p_TypeDeclaration
            	            {
            	            pushFollow(FOLLOW_p_TypeDeclaration_in_p_LetClause4056);
            	            p_TypeDeclaration134=p_TypeDeclaration();

            	            state._fsp--;
            	            if (state.failed) return retval;
            	            if ( state.backtracking==0 ) adaptor.addChild(root_0, p_TypeDeclaration134.getTree());

            	            }
            	            break;

            	    }

            	    BIND135=(CommonToken)match(input,BIND,FOLLOW_BIND_in_p_LetClause4059); if (state.failed) return retval;
            	    if ( state.backtracking==0 ) {
            	    BIND135_tree = (XQDTCommonTree)adaptor.create(BIND135);
            	    adaptor.addChild(root_0, BIND135_tree);
            	    }
            	    pushFollow(FOLLOW_p_ExprSingle_in_p_LetClause4061);
            	    p_ExprSingle136=p_ExprSingle();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, p_ExprSingle136.getTree());

            	    }
            	    break;

            	default :
            	    break loop60;
                }
            } while (true);


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (XQDTCommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (XQDTCommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "p_LetClause"

    public static class p_WindowClause_return extends ParserRuleReturnScope {
        XQDTCommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "p_WindowClause"
    // XQueryParser.g:440:1: p_WindowClause : kf= FOR ( p_TumblingWindowClause | p_SlidingWindowClause ) ;
    public final XQueryParser.p_WindowClause_return p_WindowClause() throws RecognitionException {
        XQueryParser.p_WindowClause_return retval = new XQueryParser.p_WindowClause_return();
        retval.start = input.LT(1);

        XQDTCommonTree root_0 = null;

        CommonToken kf=null;
        XQueryParser.p_TumblingWindowClause_return p_TumblingWindowClause137 = null;

        XQueryParser.p_SlidingWindowClause_return p_SlidingWindowClause138 = null;


        XQDTCommonTree kf_tree=null;

        try {
            // XQueryParser.g:441:9: (kf= FOR ( p_TumblingWindowClause | p_SlidingWindowClause ) )
            // XQueryParser.g:441:11: kf= FOR ( p_TumblingWindowClause | p_SlidingWindowClause )
            {
            root_0 = (XQDTCommonTree)adaptor.nil();

            kf=(CommonToken)match(input,FOR,FOLLOW_FOR_in_p_WindowClause4091); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            kf_tree = (XQDTCommonTree)adaptor.create(kf);
            adaptor.addChild(root_0, kf_tree);
            }
            if ( state.backtracking==0 ) {
              ak(kf);
            }
            // XQueryParser.g:441:29: ( p_TumblingWindowClause | p_SlidingWindowClause )
            int alt61=2;
            int LA61_0 = input.LA(1);

            if ( (LA61_0==TUMBLING) ) {
                alt61=1;
            }
            else if ( (LA61_0==SLIDING) ) {
                alt61=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 61, 0, input);

                throw nvae;
            }
            switch (alt61) {
                case 1 :
                    // XQueryParser.g:441:30: p_TumblingWindowClause
                    {
                    pushFollow(FOLLOW_p_TumblingWindowClause_in_p_WindowClause4096);
                    p_TumblingWindowClause137=p_TumblingWindowClause();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, p_TumblingWindowClause137.getTree());

                    }
                    break;
                case 2 :
                    // XQueryParser.g:441:55: p_SlidingWindowClause
                    {
                    pushFollow(FOLLOW_p_SlidingWindowClause_in_p_WindowClause4100);
                    p_SlidingWindowClause138=p_SlidingWindowClause();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, p_SlidingWindowClause138.getTree());

                    }
                    break;

            }


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (XQDTCommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (XQDTCommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "p_WindowClause"

    public static class p_TumblingWindowClause_return extends ParserRuleReturnScope {
        XQDTCommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "p_TumblingWindowClause"
    // XQueryParser.g:445:1: p_TumblingWindowClause : k+= TUMBLING k+= WINDOW DOLLAR p_VarName ( p_TypeDeclaration )? IN p_ExprSingle p_WindowStartCondition ( p_WindowEndCondition )? ;
    public final XQueryParser.p_TumblingWindowClause_return p_TumblingWindowClause() throws RecognitionException {
        XQueryParser.p_TumblingWindowClause_return retval = new XQueryParser.p_TumblingWindowClause_return();
        retval.start = input.LT(1);

        XQDTCommonTree root_0 = null;

        CommonToken DOLLAR139=null;
        CommonToken IN142=null;
        CommonToken k=null;
        List list_k=null;
        XQueryParser.p_VarName_return p_VarName140 = null;

        XQueryParser.p_TypeDeclaration_return p_TypeDeclaration141 = null;

        XQueryParser.p_ExprSingle_return p_ExprSingle143 = null;

        XQueryParser.p_WindowStartCondition_return p_WindowStartCondition144 = null;

        XQueryParser.p_WindowEndCondition_return p_WindowEndCondition145 = null;


        XQDTCommonTree DOLLAR139_tree=null;
        XQDTCommonTree IN142_tree=null;
        XQDTCommonTree k_tree=null;

        try {
            // XQueryParser.g:446:9: (k+= TUMBLING k+= WINDOW DOLLAR p_VarName ( p_TypeDeclaration )? IN p_ExprSingle p_WindowStartCondition ( p_WindowEndCondition )? )
            // XQueryParser.g:446:11: k+= TUMBLING k+= WINDOW DOLLAR p_VarName ( p_TypeDeclaration )? IN p_ExprSingle p_WindowStartCondition ( p_WindowEndCondition )?
            {
            root_0 = (XQDTCommonTree)adaptor.nil();

            k=(CommonToken)match(input,TUMBLING,FOLLOW_TUMBLING_in_p_TumblingWindowClause4137); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            k_tree = (XQDTCommonTree)adaptor.create(k);
            adaptor.addChild(root_0, k_tree);
            }
            if (list_k==null) list_k=new ArrayList();
            list_k.add(k);

            k=(CommonToken)match(input,WINDOW,FOLLOW_WINDOW_in_p_TumblingWindowClause4141); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            k_tree = (XQDTCommonTree)adaptor.create(k);
            adaptor.addChild(root_0, k_tree);
            }
            if (list_k==null) list_k=new ArrayList();
            list_k.add(k);

            DOLLAR139=(CommonToken)match(input,DOLLAR,FOLLOW_DOLLAR_in_p_TumblingWindowClause4143); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            DOLLAR139_tree = (XQDTCommonTree)adaptor.create(DOLLAR139);
            adaptor.addChild(root_0, DOLLAR139_tree);
            }
            pushFollow(FOLLOW_p_VarName_in_p_TumblingWindowClause4145);
            p_VarName140=p_VarName();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, p_VarName140.getTree());
            // XQueryParser.g:446:50: ( p_TypeDeclaration )?
            int alt62=2;
            int LA62_0 = input.LA(1);

            if ( (LA62_0==AS) ) {
                alt62=1;
            }
            switch (alt62) {
                case 1 :
                    // XQueryParser.g:446:50: p_TypeDeclaration
                    {
                    pushFollow(FOLLOW_p_TypeDeclaration_in_p_TumblingWindowClause4147);
                    p_TypeDeclaration141=p_TypeDeclaration();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, p_TypeDeclaration141.getTree());

                    }
                    break;

            }

            IN142=(CommonToken)match(input,IN,FOLLOW_IN_in_p_TumblingWindowClause4150); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            IN142_tree = (XQDTCommonTree)adaptor.create(IN142);
            adaptor.addChild(root_0, IN142_tree);
            }
            pushFollow(FOLLOW_p_ExprSingle_in_p_TumblingWindowClause4152);
            p_ExprSingle143=p_ExprSingle();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, p_ExprSingle143.getTree());
            pushFollow(FOLLOW_p_WindowStartCondition_in_p_TumblingWindowClause4154);
            p_WindowStartCondition144=p_WindowStartCondition();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, p_WindowStartCondition144.getTree());
            // XQueryParser.g:446:108: ( p_WindowEndCondition )?
            int alt63=2;
            int LA63_0 = input.LA(1);

            if ( (LA63_0==END||LA63_0==ONLY) ) {
                alt63=1;
            }
            switch (alt63) {
                case 1 :
                    // XQueryParser.g:446:108: p_WindowEndCondition
                    {
                    pushFollow(FOLLOW_p_WindowEndCondition_in_p_TumblingWindowClause4156);
                    p_WindowEndCondition145=p_WindowEndCondition();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, p_WindowEndCondition145.getTree());

                    }
                    break;

            }

            if ( state.backtracking==0 ) {
              ak(list_k);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (XQDTCommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (XQDTCommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "p_TumblingWindowClause"

    public static class p_SlidingWindowClause_return extends ParserRuleReturnScope {
        XQDTCommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "p_SlidingWindowClause"
    // XQueryParser.g:450:1: p_SlidingWindowClause : k+= SLIDING k+= WINDOW DOLLAR p_VarName ( p_TypeDeclaration )? IN p_ExprSingle p_WindowStartCondition ( p_WindowEndCondition )? ;
    public final XQueryParser.p_SlidingWindowClause_return p_SlidingWindowClause() throws RecognitionException {
        XQueryParser.p_SlidingWindowClause_return retval = new XQueryParser.p_SlidingWindowClause_return();
        retval.start = input.LT(1);

        XQDTCommonTree root_0 = null;

        CommonToken DOLLAR146=null;
        CommonToken IN149=null;
        CommonToken k=null;
        List list_k=null;
        XQueryParser.p_VarName_return p_VarName147 = null;

        XQueryParser.p_TypeDeclaration_return p_TypeDeclaration148 = null;

        XQueryParser.p_ExprSingle_return p_ExprSingle150 = null;

        XQueryParser.p_WindowStartCondition_return p_WindowStartCondition151 = null;

        XQueryParser.p_WindowEndCondition_return p_WindowEndCondition152 = null;


        XQDTCommonTree DOLLAR146_tree=null;
        XQDTCommonTree IN149_tree=null;
        XQDTCommonTree k_tree=null;

        try {
            // XQueryParser.g:451:9: (k+= SLIDING k+= WINDOW DOLLAR p_VarName ( p_TypeDeclaration )? IN p_ExprSingle p_WindowStartCondition ( p_WindowEndCondition )? )
            // XQueryParser.g:451:11: k+= SLIDING k+= WINDOW DOLLAR p_VarName ( p_TypeDeclaration )? IN p_ExprSingle p_WindowStartCondition ( p_WindowEndCondition )?
            {
            root_0 = (XQDTCommonTree)adaptor.nil();

            k=(CommonToken)match(input,SLIDING,FOLLOW_SLIDING_in_p_SlidingWindowClause4187); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            k_tree = (XQDTCommonTree)adaptor.create(k);
            adaptor.addChild(root_0, k_tree);
            }
            if (list_k==null) list_k=new ArrayList();
            list_k.add(k);

            k=(CommonToken)match(input,WINDOW,FOLLOW_WINDOW_in_p_SlidingWindowClause4191); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            k_tree = (XQDTCommonTree)adaptor.create(k);
            adaptor.addChild(root_0, k_tree);
            }
            if (list_k==null) list_k=new ArrayList();
            list_k.add(k);

            DOLLAR146=(CommonToken)match(input,DOLLAR,FOLLOW_DOLLAR_in_p_SlidingWindowClause4193); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            DOLLAR146_tree = (XQDTCommonTree)adaptor.create(DOLLAR146);
            adaptor.addChild(root_0, DOLLAR146_tree);
            }
            pushFollow(FOLLOW_p_VarName_in_p_SlidingWindowClause4195);
            p_VarName147=p_VarName();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, p_VarName147.getTree());
            // XQueryParser.g:451:49: ( p_TypeDeclaration )?
            int alt64=2;
            int LA64_0 = input.LA(1);

            if ( (LA64_0==AS) ) {
                alt64=1;
            }
            switch (alt64) {
                case 1 :
                    // XQueryParser.g:451:49: p_TypeDeclaration
                    {
                    pushFollow(FOLLOW_p_TypeDeclaration_in_p_SlidingWindowClause4197);
                    p_TypeDeclaration148=p_TypeDeclaration();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, p_TypeDeclaration148.getTree());

                    }
                    break;

            }

            IN149=(CommonToken)match(input,IN,FOLLOW_IN_in_p_SlidingWindowClause4200); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            IN149_tree = (XQDTCommonTree)adaptor.create(IN149);
            adaptor.addChild(root_0, IN149_tree);
            }
            pushFollow(FOLLOW_p_ExprSingle_in_p_SlidingWindowClause4202);
            p_ExprSingle150=p_ExprSingle();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, p_ExprSingle150.getTree());
            pushFollow(FOLLOW_p_WindowStartCondition_in_p_SlidingWindowClause4204);
            p_WindowStartCondition151=p_WindowStartCondition();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, p_WindowStartCondition151.getTree());
            // XQueryParser.g:451:107: ( p_WindowEndCondition )?
            int alt65=2;
            int LA65_0 = input.LA(1);

            if ( (LA65_0==END||LA65_0==ONLY) ) {
                alt65=1;
            }
            switch (alt65) {
                case 1 :
                    // XQueryParser.g:451:107: p_WindowEndCondition
                    {
                    pushFollow(FOLLOW_p_WindowEndCondition_in_p_SlidingWindowClause4206);
                    p_WindowEndCondition152=p_WindowEndCondition();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, p_WindowEndCondition152.getTree());

                    }
                    break;

            }

            if ( state.backtracking==0 ) {
              ak(list_k);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (XQDTCommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (XQDTCommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "p_SlidingWindowClause"

    public static class p_WindowStartCondition_return extends ParserRuleReturnScope {
        XQDTCommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "p_WindowStartCondition"
    // XQueryParser.g:455:1: p_WindowStartCondition : k+= START p_WindowVars k+= WHEN p_ExprSingle ;
    public final XQueryParser.p_WindowStartCondition_return p_WindowStartCondition() throws RecognitionException {
        XQueryParser.p_WindowStartCondition_return retval = new XQueryParser.p_WindowStartCondition_return();
        retval.start = input.LT(1);

        XQDTCommonTree root_0 = null;

        CommonToken k=null;
        List list_k=null;
        XQueryParser.p_WindowVars_return p_WindowVars153 = null;

        XQueryParser.p_ExprSingle_return p_ExprSingle154 = null;


        XQDTCommonTree k_tree=null;

        try {
            // XQueryParser.g:456:9: (k+= START p_WindowVars k+= WHEN p_ExprSingle )
            // XQueryParser.g:456:11: k+= START p_WindowVars k+= WHEN p_ExprSingle
            {
            root_0 = (XQDTCommonTree)adaptor.nil();

            k=(CommonToken)match(input,START,FOLLOW_START_in_p_WindowStartCondition4237); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            k_tree = (XQDTCommonTree)adaptor.create(k);
            adaptor.addChild(root_0, k_tree);
            }
            if (list_k==null) list_k=new ArrayList();
            list_k.add(k);

            pushFollow(FOLLOW_p_WindowVars_in_p_WindowStartCondition4239);
            p_WindowVars153=p_WindowVars();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, p_WindowVars153.getTree());
            k=(CommonToken)match(input,WHEN,FOLLOW_WHEN_in_p_WindowStartCondition4243); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            k_tree = (XQDTCommonTree)adaptor.create(k);
            adaptor.addChild(root_0, k_tree);
            }
            if (list_k==null) list_k=new ArrayList();
            list_k.add(k);

            pushFollow(FOLLOW_p_ExprSingle_in_p_WindowStartCondition4245);
            p_ExprSingle154=p_ExprSingle();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, p_ExprSingle154.getTree());
            if ( state.backtracking==0 ) {
              ak(list_k);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (XQDTCommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (XQDTCommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "p_WindowStartCondition"

    public static class p_WindowEndCondition_return extends ParserRuleReturnScope {
        XQDTCommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "p_WindowEndCondition"
    // XQueryParser.g:460:1: p_WindowEndCondition : (k+= ONLY )? k+= END p_WindowVars k+= WHEN p_ExprSingle ;
    public final XQueryParser.p_WindowEndCondition_return p_WindowEndCondition() throws RecognitionException {
        XQueryParser.p_WindowEndCondition_return retval = new XQueryParser.p_WindowEndCondition_return();
        retval.start = input.LT(1);

        XQDTCommonTree root_0 = null;

        CommonToken k=null;
        List list_k=null;
        XQueryParser.p_WindowVars_return p_WindowVars155 = null;

        XQueryParser.p_ExprSingle_return p_ExprSingle156 = null;


        XQDTCommonTree k_tree=null;

        try {
            // XQueryParser.g:461:9: ( (k+= ONLY )? k+= END p_WindowVars k+= WHEN p_ExprSingle )
            // XQueryParser.g:461:11: (k+= ONLY )? k+= END p_WindowVars k+= WHEN p_ExprSingle
            {
            root_0 = (XQDTCommonTree)adaptor.nil();

            // XQueryParser.g:461:12: (k+= ONLY )?
            int alt66=2;
            int LA66_0 = input.LA(1);

            if ( (LA66_0==ONLY) ) {
                alt66=1;
            }
            switch (alt66) {
                case 1 :
                    // XQueryParser.g:461:12: k+= ONLY
                    {
                    k=(CommonToken)match(input,ONLY,FOLLOW_ONLY_in_p_WindowEndCondition4275); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    k_tree = (XQDTCommonTree)adaptor.create(k);
                    adaptor.addChild(root_0, k_tree);
                    }
                    if (list_k==null) list_k=new ArrayList();
                    list_k.add(k);


                    }
                    break;

            }

            k=(CommonToken)match(input,END,FOLLOW_END_in_p_WindowEndCondition4280); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            k_tree = (XQDTCommonTree)adaptor.create(k);
            adaptor.addChild(root_0, k_tree);
            }
            if (list_k==null) list_k=new ArrayList();
            list_k.add(k);

            pushFollow(FOLLOW_p_WindowVars_in_p_WindowEndCondition4282);
            p_WindowVars155=p_WindowVars();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, p_WindowVars155.getTree());
            k=(CommonToken)match(input,WHEN,FOLLOW_WHEN_in_p_WindowEndCondition4286); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            k_tree = (XQDTCommonTree)adaptor.create(k);
            adaptor.addChild(root_0, k_tree);
            }
            if (list_k==null) list_k=new ArrayList();
            list_k.add(k);

            pushFollow(FOLLOW_p_ExprSingle_in_p_WindowEndCondition4288);
            p_ExprSingle156=p_ExprSingle();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, p_ExprSingle156.getTree());
            if ( state.backtracking==0 ) {
              ak(list_k);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (XQDTCommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (XQDTCommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "p_WindowEndCondition"

    public static class p_WindowVars_return extends ParserRuleReturnScope {
        XQDTCommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "p_WindowVars"
    // XQueryParser.g:465:1: p_WindowVars : ( DOLLAR p_QName )? ( p_PositionalVar )? (k+= PREVIOUS DOLLAR p_QName )? (k+= NEXT DOLLAR p_QName )? ;
    public final XQueryParser.p_WindowVars_return p_WindowVars() throws RecognitionException {
        XQueryParser.p_WindowVars_return retval = new XQueryParser.p_WindowVars_return();
        retval.start = input.LT(1);

        XQDTCommonTree root_0 = null;

        CommonToken DOLLAR157=null;
        CommonToken DOLLAR160=null;
        CommonToken DOLLAR162=null;
        CommonToken k=null;
        List list_k=null;
        XQueryParser.p_QName_return p_QName158 = null;

        XQueryParser.p_PositionalVar_return p_PositionalVar159 = null;

        XQueryParser.p_QName_return p_QName161 = null;

        XQueryParser.p_QName_return p_QName163 = null;


        XQDTCommonTree DOLLAR157_tree=null;
        XQDTCommonTree DOLLAR160_tree=null;
        XQDTCommonTree DOLLAR162_tree=null;
        XQDTCommonTree k_tree=null;

        try {
            // XQueryParser.g:466:9: ( ( DOLLAR p_QName )? ( p_PositionalVar )? (k+= PREVIOUS DOLLAR p_QName )? (k+= NEXT DOLLAR p_QName )? )
            // XQueryParser.g:466:11: ( DOLLAR p_QName )? ( p_PositionalVar )? (k+= PREVIOUS DOLLAR p_QName )? (k+= NEXT DOLLAR p_QName )?
            {
            root_0 = (XQDTCommonTree)adaptor.nil();

            // XQueryParser.g:466:11: ( DOLLAR p_QName )?
            int alt67=2;
            int LA67_0 = input.LA(1);

            if ( (LA67_0==DOLLAR) ) {
                alt67=1;
            }
            switch (alt67) {
                case 1 :
                    // XQueryParser.g:466:12: DOLLAR p_QName
                    {
                    DOLLAR157=(CommonToken)match(input,DOLLAR,FOLLOW_DOLLAR_in_p_WindowVars4317); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    DOLLAR157_tree = (XQDTCommonTree)adaptor.create(DOLLAR157);
                    adaptor.addChild(root_0, DOLLAR157_tree);
                    }
                    pushFollow(FOLLOW_p_QName_in_p_WindowVars4319);
                    p_QName158=p_QName();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, p_QName158.getTree());

                    }
                    break;

            }

            // XQueryParser.g:466:29: ( p_PositionalVar )?
            int alt68=2;
            int LA68_0 = input.LA(1);

            if ( (LA68_0==AT) ) {
                alt68=1;
            }
            switch (alt68) {
                case 1 :
                    // XQueryParser.g:466:29: p_PositionalVar
                    {
                    pushFollow(FOLLOW_p_PositionalVar_in_p_WindowVars4323);
                    p_PositionalVar159=p_PositionalVar();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, p_PositionalVar159.getTree());

                    }
                    break;

            }

            // XQueryParser.g:466:46: (k+= PREVIOUS DOLLAR p_QName )?
            int alt69=2;
            int LA69_0 = input.LA(1);

            if ( (LA69_0==PREVIOUS) ) {
                alt69=1;
            }
            switch (alt69) {
                case 1 :
                    // XQueryParser.g:466:47: k+= PREVIOUS DOLLAR p_QName
                    {
                    k=(CommonToken)match(input,PREVIOUS,FOLLOW_PREVIOUS_in_p_WindowVars4329); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    k_tree = (XQDTCommonTree)adaptor.create(k);
                    adaptor.addChild(root_0, k_tree);
                    }
                    if (list_k==null) list_k=new ArrayList();
                    list_k.add(k);

                    DOLLAR160=(CommonToken)match(input,DOLLAR,FOLLOW_DOLLAR_in_p_WindowVars4331); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    DOLLAR160_tree = (XQDTCommonTree)adaptor.create(DOLLAR160);
                    adaptor.addChild(root_0, DOLLAR160_tree);
                    }
                    pushFollow(FOLLOW_p_QName_in_p_WindowVars4333);
                    p_QName161=p_QName();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, p_QName161.getTree());

                    }
                    break;

            }

            // XQueryParser.g:466:76: (k+= NEXT DOLLAR p_QName )?
            int alt70=2;
            int LA70_0 = input.LA(1);

            if ( (LA70_0==NEXT) ) {
                alt70=1;
            }
            switch (alt70) {
                case 1 :
                    // XQueryParser.g:466:77: k+= NEXT DOLLAR p_QName
                    {
                    k=(CommonToken)match(input,NEXT,FOLLOW_NEXT_in_p_WindowVars4340); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    k_tree = (XQDTCommonTree)adaptor.create(k);
                    adaptor.addChild(root_0, k_tree);
                    }
                    if (list_k==null) list_k=new ArrayList();
                    list_k.add(k);

                    DOLLAR162=(CommonToken)match(input,DOLLAR,FOLLOW_DOLLAR_in_p_WindowVars4342); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    DOLLAR162_tree = (XQDTCommonTree)adaptor.create(DOLLAR162);
                    adaptor.addChild(root_0, DOLLAR162_tree);
                    }
                    pushFollow(FOLLOW_p_QName_in_p_WindowVars4344);
                    p_QName163=p_QName();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, p_QName163.getTree());

                    }
                    break;

            }

            if ( state.backtracking==0 ) {
              ak(list_k);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (XQDTCommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (XQDTCommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "p_WindowVars"

    public static class p_CountClause_return extends ParserRuleReturnScope {
        XQDTCommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "p_CountClause"
    // XQueryParser.g:479:1: p_CountClause : kc+= COUNT DOLLAR p_VarName ;
    public final XQueryParser.p_CountClause_return p_CountClause() throws RecognitionException {
        XQueryParser.p_CountClause_return retval = new XQueryParser.p_CountClause_return();
        retval.start = input.LT(1);

        XQDTCommonTree root_0 = null;

        CommonToken DOLLAR164=null;
        CommonToken kc=null;
        List list_kc=null;
        XQueryParser.p_VarName_return p_VarName165 = null;


        XQDTCommonTree DOLLAR164_tree=null;
        XQDTCommonTree kc_tree=null;

        try {
            // XQueryParser.g:480:9: (kc+= COUNT DOLLAR p_VarName )
            // XQueryParser.g:480:11: kc+= COUNT DOLLAR p_VarName
            {
            root_0 = (XQDTCommonTree)adaptor.nil();

            kc=(CommonToken)match(input,COUNT,FOLLOW_COUNT_in_p_CountClause4385); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            kc_tree = (XQDTCommonTree)adaptor.create(kc);
            adaptor.addChild(root_0, kc_tree);
            }
            if (list_kc==null) list_kc=new ArrayList();
            list_kc.add(kc);

            if ( state.backtracking==0 ) {
              ak(list_kc);
            }
            DOLLAR164=(CommonToken)match(input,DOLLAR,FOLLOW_DOLLAR_in_p_CountClause4389); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            DOLLAR164_tree = (XQDTCommonTree)adaptor.create(DOLLAR164);
            adaptor.addChild(root_0, DOLLAR164_tree);
            }
            pushFollow(FOLLOW_p_VarName_in_p_CountClause4391);
            p_VarName165=p_VarName();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, p_VarName165.getTree());

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (XQDTCommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (XQDTCommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "p_CountClause"

    public static class p_WhereClause_return extends ParserRuleReturnScope {
        XQDTCommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "p_WhereClause"
    // XQueryParser.g:484:1: p_WhereClause : kw+= WHERE p_ExprSingle ;
    public final XQueryParser.p_WhereClause_return p_WhereClause() throws RecognitionException {
        XQueryParser.p_WhereClause_return retval = new XQueryParser.p_WhereClause_return();
        retval.start = input.LT(1);

        XQDTCommonTree root_0 = null;

        CommonToken kw=null;
        List list_kw=null;
        XQueryParser.p_ExprSingle_return p_ExprSingle166 = null;


        XQDTCommonTree kw_tree=null;

        try {
            // XQueryParser.g:485:9: (kw+= WHERE p_ExprSingle )
            // XQueryParser.g:485:11: kw+= WHERE p_ExprSingle
            {
            root_0 = (XQDTCommonTree)adaptor.nil();

            kw=(CommonToken)match(input,WHERE,FOLLOW_WHERE_in_p_WhereClause4427); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            kw_tree = (XQDTCommonTree)adaptor.create(kw);
            adaptor.addChild(root_0, kw_tree);
            }
            if (list_kw==null) list_kw=new ArrayList();
            list_kw.add(kw);

            if ( state.backtracking==0 ) {
              ak(list_kw);
            }
            pushFollow(FOLLOW_p_ExprSingle_in_p_WhereClause4431);
            p_ExprSingle166=p_ExprSingle();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, p_ExprSingle166.getTree());

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (XQDTCommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (XQDTCommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "p_WhereClause"

    public static class p_GroupByClause_return extends ParserRuleReturnScope {
        XQDTCommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "p_GroupByClause"
    // XQueryParser.g:489:1: p_GroupByClause : k+= GROUP k+= BY p_GroupingSpecList ;
    public final XQueryParser.p_GroupByClause_return p_GroupByClause() throws RecognitionException {
        XQueryParser.p_GroupByClause_return retval = new XQueryParser.p_GroupByClause_return();
        retval.start = input.LT(1);

        XQDTCommonTree root_0 = null;

        CommonToken k=null;
        List list_k=null;
        XQueryParser.p_GroupingSpecList_return p_GroupingSpecList167 = null;


        XQDTCommonTree k_tree=null;

        try {
            // XQueryParser.g:490:9: (k+= GROUP k+= BY p_GroupingSpecList )
            // XQueryParser.g:490:13: k+= GROUP k+= BY p_GroupingSpecList
            {
            root_0 = (XQDTCommonTree)adaptor.nil();

            k=(CommonToken)match(input,GROUP,FOLLOW_GROUP_in_p_GroupByClause4461); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            k_tree = (XQDTCommonTree)adaptor.create(k);
            adaptor.addChild(root_0, k_tree);
            }
            if (list_k==null) list_k=new ArrayList();
            list_k.add(k);

            k=(CommonToken)match(input,BY,FOLLOW_BY_in_p_GroupByClause4465); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            k_tree = (XQDTCommonTree)adaptor.create(k);
            adaptor.addChild(root_0, k_tree);
            }
            if (list_k==null) list_k=new ArrayList();
            list_k.add(k);

            pushFollow(FOLLOW_p_GroupingSpecList_in_p_GroupByClause4467);
            p_GroupingSpecList167=p_GroupingSpecList();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, p_GroupingSpecList167.getTree());
            if ( state.backtracking==0 ) {
              ak(list_k);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (XQDTCommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (XQDTCommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "p_GroupByClause"

    public static class p_GroupingSpecList_return extends ParserRuleReturnScope {
        XQDTCommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "p_GroupingSpecList"
    // XQueryParser.g:494:1: p_GroupingSpecList : p_GroupingSpec ( COMMA p_GroupingSpec )* ;
    public final XQueryParser.p_GroupingSpecList_return p_GroupingSpecList() throws RecognitionException {
        XQueryParser.p_GroupingSpecList_return retval = new XQueryParser.p_GroupingSpecList_return();
        retval.start = input.LT(1);

        XQDTCommonTree root_0 = null;

        CommonToken COMMA169=null;
        XQueryParser.p_GroupingSpec_return p_GroupingSpec168 = null;

        XQueryParser.p_GroupingSpec_return p_GroupingSpec170 = null;


        XQDTCommonTree COMMA169_tree=null;

        try {
            // XQueryParser.g:495:9: ( p_GroupingSpec ( COMMA p_GroupingSpec )* )
            // XQueryParser.g:495:13: p_GroupingSpec ( COMMA p_GroupingSpec )*
            {
            root_0 = (XQDTCommonTree)adaptor.nil();

            pushFollow(FOLLOW_p_GroupingSpec_in_p_GroupingSpecList4497);
            p_GroupingSpec168=p_GroupingSpec();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, p_GroupingSpec168.getTree());
            // XQueryParser.g:495:28: ( COMMA p_GroupingSpec )*
            loop71:
            do {
                int alt71=2;
                int LA71_0 = input.LA(1);

                if ( (LA71_0==COMMA) ) {
                    alt71=1;
                }


                switch (alt71) {
            	case 1 :
            	    // XQueryParser.g:495:29: COMMA p_GroupingSpec
            	    {
            	    COMMA169=(CommonToken)match(input,COMMA,FOLLOW_COMMA_in_p_GroupingSpecList4500); if (state.failed) return retval;
            	    if ( state.backtracking==0 ) {
            	    COMMA169_tree = (XQDTCommonTree)adaptor.create(COMMA169);
            	    adaptor.addChild(root_0, COMMA169_tree);
            	    }
            	    pushFollow(FOLLOW_p_GroupingSpec_in_p_GroupingSpecList4502);
            	    p_GroupingSpec170=p_GroupingSpec();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, p_GroupingSpec170.getTree());

            	    }
            	    break;

            	default :
            	    break loop71;
                }
            } while (true);


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (XQDTCommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (XQDTCommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "p_GroupingSpecList"

    public static class p_GroupingSpec_return extends ParserRuleReturnScope {
        XQDTCommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "p_GroupingSpec"
    // XQueryParser.g:499:1: p_GroupingSpec : DOLLAR p_VarName (kc= COLLATION p_StringLiteral )? ;
    public final XQueryParser.p_GroupingSpec_return p_GroupingSpec() throws RecognitionException {
        XQueryParser.p_GroupingSpec_return retval = new XQueryParser.p_GroupingSpec_return();
        retval.start = input.LT(1);

        XQDTCommonTree root_0 = null;

        CommonToken kc=null;
        CommonToken DOLLAR171=null;
        XQueryParser.p_VarName_return p_VarName172 = null;

        XQueryParser.p_StringLiteral_return p_StringLiteral173 = null;


        XQDTCommonTree kc_tree=null;
        XQDTCommonTree DOLLAR171_tree=null;

        try {
            // XQueryParser.g:500:9: ( DOLLAR p_VarName (kc= COLLATION p_StringLiteral )? )
            // XQueryParser.g:500:13: DOLLAR p_VarName (kc= COLLATION p_StringLiteral )?
            {
            root_0 = (XQDTCommonTree)adaptor.nil();

            DOLLAR171=(CommonToken)match(input,DOLLAR,FOLLOW_DOLLAR_in_p_GroupingSpec4532); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            DOLLAR171_tree = (XQDTCommonTree)adaptor.create(DOLLAR171);
            adaptor.addChild(root_0, DOLLAR171_tree);
            }
            pushFollow(FOLLOW_p_VarName_in_p_GroupingSpec4534);
            p_VarName172=p_VarName();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, p_VarName172.getTree());
            // XQueryParser.g:500:30: (kc= COLLATION p_StringLiteral )?
            int alt72=2;
            int LA72_0 = input.LA(1);

            if ( (LA72_0==COLLATION) ) {
                alt72=1;
            }
            switch (alt72) {
                case 1 :
                    // XQueryParser.g:500:31: kc= COLLATION p_StringLiteral
                    {
                    kc=(CommonToken)match(input,COLLATION,FOLLOW_COLLATION_in_p_GroupingSpec4539); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    kc_tree = (XQDTCommonTree)adaptor.create(kc);
                    adaptor.addChild(root_0, kc_tree);
                    }
                    pushFollow(FOLLOW_p_StringLiteral_in_p_GroupingSpec4541);
                    p_StringLiteral173=p_StringLiteral();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, p_StringLiteral173.getTree());
                    if ( state.backtracking==0 ) {
                      ak(kc);
                    }

                    }
                    break;

            }


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (XQDTCommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (XQDTCommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "p_GroupingSpec"

    public static class p_OrderByClause_return extends ParserRuleReturnScope {
        XQDTCommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "p_OrderByClause"
    // XQueryParser.g:504:1: p_OrderByClause : ( (k+= ORDER k+= BY ) | (k+= STABLE k+= ORDER k+= BY ) ) p_OrderSpecList ;
    public final XQueryParser.p_OrderByClause_return p_OrderByClause() throws RecognitionException {
        XQueryParser.p_OrderByClause_return retval = new XQueryParser.p_OrderByClause_return();
        retval.start = input.LT(1);

        XQDTCommonTree root_0 = null;

        CommonToken k=null;
        List list_k=null;
        XQueryParser.p_OrderSpecList_return p_OrderSpecList174 = null;


        XQDTCommonTree k_tree=null;

        try {
            // XQueryParser.g:505:9: ( ( (k+= ORDER k+= BY ) | (k+= STABLE k+= ORDER k+= BY ) ) p_OrderSpecList )
            // XQueryParser.g:505:13: ( (k+= ORDER k+= BY ) | (k+= STABLE k+= ORDER k+= BY ) ) p_OrderSpecList
            {
            root_0 = (XQDTCommonTree)adaptor.nil();

            // XQueryParser.g:505:13: ( (k+= ORDER k+= BY ) | (k+= STABLE k+= ORDER k+= BY ) )
            int alt73=2;
            int LA73_0 = input.LA(1);

            if ( (LA73_0==ORDER) ) {
                alt73=1;
            }
            else if ( (LA73_0==STABLE) ) {
                alt73=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 73, 0, input);

                throw nvae;
            }
            switch (alt73) {
                case 1 :
                    // XQueryParser.g:505:14: (k+= ORDER k+= BY )
                    {
                    // XQueryParser.g:505:14: (k+= ORDER k+= BY )
                    // XQueryParser.g:505:15: k+= ORDER k+= BY
                    {
                    k=(CommonToken)match(input,ORDER,FOLLOW_ORDER_in_p_OrderByClause4577); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    k_tree = (XQDTCommonTree)adaptor.create(k);
                    adaptor.addChild(root_0, k_tree);
                    }
                    if (list_k==null) list_k=new ArrayList();
                    list_k.add(k);

                    k=(CommonToken)match(input,BY,FOLLOW_BY_in_p_OrderByClause4581); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    k_tree = (XQDTCommonTree)adaptor.create(k);
                    adaptor.addChild(root_0, k_tree);
                    }
                    if (list_k==null) list_k=new ArrayList();
                    list_k.add(k);


                    }


                    }
                    break;
                case 2 :
                    // XQueryParser.g:505:33: (k+= STABLE k+= ORDER k+= BY )
                    {
                    // XQueryParser.g:505:33: (k+= STABLE k+= ORDER k+= BY )
                    // XQueryParser.g:505:34: k+= STABLE k+= ORDER k+= BY
                    {
                    k=(CommonToken)match(input,STABLE,FOLLOW_STABLE_in_p_OrderByClause4589); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    k_tree = (XQDTCommonTree)adaptor.create(k);
                    adaptor.addChild(root_0, k_tree);
                    }
                    if (list_k==null) list_k=new ArrayList();
                    list_k.add(k);

                    k=(CommonToken)match(input,ORDER,FOLLOW_ORDER_in_p_OrderByClause4593); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    k_tree = (XQDTCommonTree)adaptor.create(k);
                    adaptor.addChild(root_0, k_tree);
                    }
                    if (list_k==null) list_k=new ArrayList();
                    list_k.add(k);

                    k=(CommonToken)match(input,BY,FOLLOW_BY_in_p_OrderByClause4597); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    k_tree = (XQDTCommonTree)adaptor.create(k);
                    adaptor.addChild(root_0, k_tree);
                    }
                    if (list_k==null) list_k=new ArrayList();
                    list_k.add(k);


                    }


                    }
                    break;

            }

            pushFollow(FOLLOW_p_OrderSpecList_in_p_OrderByClause4601);
            p_OrderSpecList174=p_OrderSpecList();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, p_OrderSpecList174.getTree());
            if ( state.backtracking==0 ) {
              ak(list_k);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (XQDTCommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (XQDTCommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "p_OrderByClause"

    public static class p_OrderSpecList_return extends ParserRuleReturnScope {
        XQDTCommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "p_OrderSpecList"
    // XQueryParser.g:509:1: p_OrderSpecList : p_OrderSpec ( COMMA p_OrderSpec )* ;
    public final XQueryParser.p_OrderSpecList_return p_OrderSpecList() throws RecognitionException {
        XQueryParser.p_OrderSpecList_return retval = new XQueryParser.p_OrderSpecList_return();
        retval.start = input.LT(1);

        XQDTCommonTree root_0 = null;

        CommonToken COMMA176=null;
        XQueryParser.p_OrderSpec_return p_OrderSpec175 = null;

        XQueryParser.p_OrderSpec_return p_OrderSpec177 = null;


        XQDTCommonTree COMMA176_tree=null;

        try {
            // XQueryParser.g:510:9: ( p_OrderSpec ( COMMA p_OrderSpec )* )
            // XQueryParser.g:510:13: p_OrderSpec ( COMMA p_OrderSpec )*
            {
            root_0 = (XQDTCommonTree)adaptor.nil();

            pushFollow(FOLLOW_p_OrderSpec_in_p_OrderSpecList4631);
            p_OrderSpec175=p_OrderSpec();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, p_OrderSpec175.getTree());
            // XQueryParser.g:510:25: ( COMMA p_OrderSpec )*
            loop74:
            do {
                int alt74=2;
                int LA74_0 = input.LA(1);

                if ( (LA74_0==COMMA) ) {
                    alt74=1;
                }


                switch (alt74) {
            	case 1 :
            	    // XQueryParser.g:510:26: COMMA p_OrderSpec
            	    {
            	    COMMA176=(CommonToken)match(input,COMMA,FOLLOW_COMMA_in_p_OrderSpecList4634); if (state.failed) return retval;
            	    if ( state.backtracking==0 ) {
            	    COMMA176_tree = (XQDTCommonTree)adaptor.create(COMMA176);
            	    adaptor.addChild(root_0, COMMA176_tree);
            	    }
            	    pushFollow(FOLLOW_p_OrderSpec_in_p_OrderSpecList4636);
            	    p_OrderSpec177=p_OrderSpec();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, p_OrderSpec177.getTree());

            	    }
            	    break;

            	default :
            	    break loop74;
                }
            } while (true);


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (XQDTCommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (XQDTCommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "p_OrderSpecList"

    public static class p_OrderSpec_return extends ParserRuleReturnScope {
        XQDTCommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "p_OrderSpec"
    // XQueryParser.g:514:1: p_OrderSpec : p_ExprSingle p_OrderModifier ;
    public final XQueryParser.p_OrderSpec_return p_OrderSpec() throws RecognitionException {
        XQueryParser.p_OrderSpec_return retval = new XQueryParser.p_OrderSpec_return();
        retval.start = input.LT(1);

        XQDTCommonTree root_0 = null;

        XQueryParser.p_ExprSingle_return p_ExprSingle178 = null;

        XQueryParser.p_OrderModifier_return p_OrderModifier179 = null;



        try {
            // XQueryParser.g:515:9: ( p_ExprSingle p_OrderModifier )
            // XQueryParser.g:515:13: p_ExprSingle p_OrderModifier
            {
            root_0 = (XQDTCommonTree)adaptor.nil();

            pushFollow(FOLLOW_p_ExprSingle_in_p_OrderSpec4666);
            p_ExprSingle178=p_ExprSingle();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, p_ExprSingle178.getTree());
            pushFollow(FOLLOW_p_OrderModifier_in_p_OrderSpec4668);
            p_OrderModifier179=p_OrderModifier();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, p_OrderModifier179.getTree());

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (XQDTCommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (XQDTCommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "p_OrderSpec"

    public static class p_OrderModifier_return extends ParserRuleReturnScope {
        XQDTCommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "p_OrderModifier"
    // XQueryParser.g:519:1: p_OrderModifier : (ka= ASCENDING | k+= DESCENDING )? (k+= EMPTY (k+= GREATEST | k+= LEAST ) )? (k+= COLLATION p_StringLiteral )? ;
    public final XQueryParser.p_OrderModifier_return p_OrderModifier() throws RecognitionException {
        XQueryParser.p_OrderModifier_return retval = new XQueryParser.p_OrderModifier_return();
        retval.start = input.LT(1);

        XQDTCommonTree root_0 = null;

        CommonToken ka=null;
        CommonToken k=null;
        List list_k=null;
        XQueryParser.p_StringLiteral_return p_StringLiteral180 = null;


        XQDTCommonTree ka_tree=null;
        XQDTCommonTree k_tree=null;

        try {
            // XQueryParser.g:520:9: ( (ka= ASCENDING | k+= DESCENDING )? (k+= EMPTY (k+= GREATEST | k+= LEAST ) )? (k+= COLLATION p_StringLiteral )? )
            // XQueryParser.g:520:11: (ka= ASCENDING | k+= DESCENDING )? (k+= EMPTY (k+= GREATEST | k+= LEAST ) )? (k+= COLLATION p_StringLiteral )?
            {
            root_0 = (XQDTCommonTree)adaptor.nil();

            // XQueryParser.g:520:11: (ka= ASCENDING | k+= DESCENDING )?
            int alt75=3;
            int LA75_0 = input.LA(1);

            if ( (LA75_0==ASCENDING) ) {
                alt75=1;
            }
            else if ( (LA75_0==DESCENDING) ) {
                alt75=2;
            }
            switch (alt75) {
                case 1 :
                    // XQueryParser.g:520:12: ka= ASCENDING
                    {
                    ka=(CommonToken)match(input,ASCENDING,FOLLOW_ASCENDING_in_p_OrderModifier4697); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    ka_tree = (XQDTCommonTree)adaptor.create(ka);
                    adaptor.addChild(root_0, ka_tree);
                    }

                    }
                    break;
                case 2 :
                    // XQueryParser.g:520:27: k+= DESCENDING
                    {
                    k=(CommonToken)match(input,DESCENDING,FOLLOW_DESCENDING_in_p_OrderModifier4703); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    k_tree = (XQDTCommonTree)adaptor.create(k);
                    adaptor.addChild(root_0, k_tree);
                    }
                    if (list_k==null) list_k=new ArrayList();
                    list_k.add(k);


                    }
                    break;

            }

            // XQueryParser.g:520:43: (k+= EMPTY (k+= GREATEST | k+= LEAST ) )?
            int alt77=2;
            int LA77_0 = input.LA(1);

            if ( (LA77_0==EMPTY) ) {
                alt77=1;
            }
            switch (alt77) {
                case 1 :
                    // XQueryParser.g:520:44: k+= EMPTY (k+= GREATEST | k+= LEAST )
                    {
                    k=(CommonToken)match(input,EMPTY,FOLLOW_EMPTY_in_p_OrderModifier4710); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    k_tree = (XQDTCommonTree)adaptor.create(k);
                    adaptor.addChild(root_0, k_tree);
                    }
                    if (list_k==null) list_k=new ArrayList();
                    list_k.add(k);

                    // XQueryParser.g:520:53: (k+= GREATEST | k+= LEAST )
                    int alt76=2;
                    int LA76_0 = input.LA(1);

                    if ( (LA76_0==GREATEST) ) {
                        alt76=1;
                    }
                    else if ( (LA76_0==LEAST) ) {
                        alt76=2;
                    }
                    else {
                        if (state.backtracking>0) {state.failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("", 76, 0, input);

                        throw nvae;
                    }
                    switch (alt76) {
                        case 1 :
                            // XQueryParser.g:520:54: k+= GREATEST
                            {
                            k=(CommonToken)match(input,GREATEST,FOLLOW_GREATEST_in_p_OrderModifier4715); if (state.failed) return retval;
                            if ( state.backtracking==0 ) {
                            k_tree = (XQDTCommonTree)adaptor.create(k);
                            adaptor.addChild(root_0, k_tree);
                            }
                            if (list_k==null) list_k=new ArrayList();
                            list_k.add(k);


                            }
                            break;
                        case 2 :
                            // XQueryParser.g:520:68: k+= LEAST
                            {
                            k=(CommonToken)match(input,LEAST,FOLLOW_LEAST_in_p_OrderModifier4721); if (state.failed) return retval;
                            if ( state.backtracking==0 ) {
                            k_tree = (XQDTCommonTree)adaptor.create(k);
                            adaptor.addChild(root_0, k_tree);
                            }
                            if (list_k==null) list_k=new ArrayList();
                            list_k.add(k);


                            }
                            break;

                    }


                    }
                    break;

            }

            // XQueryParser.g:520:80: (k+= COLLATION p_StringLiteral )?
            int alt78=2;
            int LA78_0 = input.LA(1);

            if ( (LA78_0==COLLATION) ) {
                alt78=1;
            }
            switch (alt78) {
                case 1 :
                    // XQueryParser.g:520:81: k+= COLLATION p_StringLiteral
                    {
                    k=(CommonToken)match(input,COLLATION,FOLLOW_COLLATION_in_p_OrderModifier4729); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    k_tree = (XQDTCommonTree)adaptor.create(k);
                    adaptor.addChild(root_0, k_tree);
                    }
                    if (list_k==null) list_k=new ArrayList();
                    list_k.add(k);

                    pushFollow(FOLLOW_p_StringLiteral_in_p_OrderModifier4731);
                    p_StringLiteral180=p_StringLiteral();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, p_StringLiteral180.getTree());

                    }
                    break;

            }

            if ( state.backtracking==0 ) {
              ak(list_k);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (XQDTCommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (XQDTCommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "p_OrderModifier"

    public static class p_ReturnClause_return extends ParserRuleReturnScope {
        XQDTCommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "p_ReturnClause"
    // XQueryParser.g:524:1: p_ReturnClause : kr= RETURN p_ExprSingle ;
    public final XQueryParser.p_ReturnClause_return p_ReturnClause() throws RecognitionException {
        XQueryParser.p_ReturnClause_return retval = new XQueryParser.p_ReturnClause_return();
        retval.start = input.LT(1);

        XQDTCommonTree root_0 = null;

        CommonToken kr=null;
        XQueryParser.p_ExprSingle_return p_ExprSingle181 = null;


        XQDTCommonTree kr_tree=null;

        try {
            // XQueryParser.g:525:9: (kr= RETURN p_ExprSingle )
            // XQueryParser.g:525:11: kr= RETURN p_ExprSingle
            {
            root_0 = (XQDTCommonTree)adaptor.nil();

            kr=(CommonToken)match(input,RETURN,FOLLOW_RETURN_in_p_ReturnClause4763); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            kr_tree = (XQDTCommonTree)adaptor.create(kr);
            adaptor.addChild(root_0, kr_tree);
            }
            if ( state.backtracking==0 ) {
              ak(kr);
            }
            pushFollow(FOLLOW_p_ExprSingle_in_p_ReturnClause4767);
            p_ExprSingle181=p_ExprSingle();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, p_ExprSingle181.getTree());

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (XQDTCommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (XQDTCommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "p_ReturnClause"

    public static class p_QuantifiedExpr_return extends ParserRuleReturnScope {
        XQDTCommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "p_QuantifiedExpr"
    // XQueryParser.g:529:1: p_QuantifiedExpr : (k+= SOME | k+= EVERY ) DOLLAR p_VarName ( p_TypeDeclaration )? k+= IN p_ExprSingle ( COMMA DOLLAR p_QName ( p_TypeDeclaration )? k+= IN p_ExprSingle )* k+= SATISFIES p_ExprSingle ;
    public final XQueryParser.p_QuantifiedExpr_return p_QuantifiedExpr() throws RecognitionException {
        XQueryParser.p_QuantifiedExpr_return retval = new XQueryParser.p_QuantifiedExpr_return();
        retval.start = input.LT(1);

        XQDTCommonTree root_0 = null;

        CommonToken DOLLAR182=null;
        CommonToken COMMA186=null;
        CommonToken DOLLAR187=null;
        CommonToken k=null;
        List list_k=null;
        XQueryParser.p_VarName_return p_VarName183 = null;

        XQueryParser.p_TypeDeclaration_return p_TypeDeclaration184 = null;

        XQueryParser.p_ExprSingle_return p_ExprSingle185 = null;

        XQueryParser.p_QName_return p_QName188 = null;

        XQueryParser.p_TypeDeclaration_return p_TypeDeclaration189 = null;

        XQueryParser.p_ExprSingle_return p_ExprSingle190 = null;

        XQueryParser.p_ExprSingle_return p_ExprSingle191 = null;


        XQDTCommonTree DOLLAR182_tree=null;
        XQDTCommonTree COMMA186_tree=null;
        XQDTCommonTree DOLLAR187_tree=null;
        XQDTCommonTree k_tree=null;

        try {
            // XQueryParser.g:530:9: ( (k+= SOME | k+= EVERY ) DOLLAR p_VarName ( p_TypeDeclaration )? k+= IN p_ExprSingle ( COMMA DOLLAR p_QName ( p_TypeDeclaration )? k+= IN p_ExprSingle )* k+= SATISFIES p_ExprSingle )
            // XQueryParser.g:530:13: (k+= SOME | k+= EVERY ) DOLLAR p_VarName ( p_TypeDeclaration )? k+= IN p_ExprSingle ( COMMA DOLLAR p_QName ( p_TypeDeclaration )? k+= IN p_ExprSingle )* k+= SATISFIES p_ExprSingle
            {
            root_0 = (XQDTCommonTree)adaptor.nil();

            // XQueryParser.g:530:13: (k+= SOME | k+= EVERY )
            int alt79=2;
            int LA79_0 = input.LA(1);

            if ( (LA79_0==SOME) ) {
                alt79=1;
            }
            else if ( (LA79_0==EVERY) ) {
                alt79=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 79, 0, input);

                throw nvae;
            }
            switch (alt79) {
                case 1 :
                    // XQueryParser.g:530:14: k+= SOME
                    {
                    k=(CommonToken)match(input,SOME,FOLLOW_SOME_in_p_QuantifiedExpr4798); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    k_tree = (XQDTCommonTree)adaptor.create(k);
                    adaptor.addChild(root_0, k_tree);
                    }
                    if (list_k==null) list_k=new ArrayList();
                    list_k.add(k);


                    }
                    break;
                case 2 :
                    // XQueryParser.g:530:24: k+= EVERY
                    {
                    k=(CommonToken)match(input,EVERY,FOLLOW_EVERY_in_p_QuantifiedExpr4804); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    k_tree = (XQDTCommonTree)adaptor.create(k);
                    adaptor.addChild(root_0, k_tree);
                    }
                    if (list_k==null) list_k=new ArrayList();
                    list_k.add(k);


                    }
                    break;

            }

            DOLLAR182=(CommonToken)match(input,DOLLAR,FOLLOW_DOLLAR_in_p_QuantifiedExpr4807); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            DOLLAR182_tree = (XQDTCommonTree)adaptor.create(DOLLAR182);
            adaptor.addChild(root_0, DOLLAR182_tree);
            }
            pushFollow(FOLLOW_p_VarName_in_p_QuantifiedExpr4809);
            p_VarName183=p_VarName();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, p_VarName183.getTree());
            // XQueryParser.g:530:51: ( p_TypeDeclaration )?
            int alt80=2;
            int LA80_0 = input.LA(1);

            if ( (LA80_0==AS) ) {
                alt80=1;
            }
            switch (alt80) {
                case 1 :
                    // XQueryParser.g:530:51: p_TypeDeclaration
                    {
                    pushFollow(FOLLOW_p_TypeDeclaration_in_p_QuantifiedExpr4811);
                    p_TypeDeclaration184=p_TypeDeclaration();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, p_TypeDeclaration184.getTree());

                    }
                    break;

            }

            k=(CommonToken)match(input,IN,FOLLOW_IN_in_p_QuantifiedExpr4816); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            k_tree = (XQDTCommonTree)adaptor.create(k);
            adaptor.addChild(root_0, k_tree);
            }
            if (list_k==null) list_k=new ArrayList();
            list_k.add(k);

            pushFollow(FOLLOW_p_ExprSingle_in_p_QuantifiedExpr4818);
            p_ExprSingle185=p_ExprSingle();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, p_ExprSingle185.getTree());
            // XQueryParser.g:530:89: ( COMMA DOLLAR p_QName ( p_TypeDeclaration )? k+= IN p_ExprSingle )*
            loop82:
            do {
                int alt82=2;
                int LA82_0 = input.LA(1);

                if ( (LA82_0==COMMA) ) {
                    alt82=1;
                }


                switch (alt82) {
            	case 1 :
            	    // XQueryParser.g:530:90: COMMA DOLLAR p_QName ( p_TypeDeclaration )? k+= IN p_ExprSingle
            	    {
            	    COMMA186=(CommonToken)match(input,COMMA,FOLLOW_COMMA_in_p_QuantifiedExpr4821); if (state.failed) return retval;
            	    if ( state.backtracking==0 ) {
            	    COMMA186_tree = (XQDTCommonTree)adaptor.create(COMMA186);
            	    adaptor.addChild(root_0, COMMA186_tree);
            	    }
            	    DOLLAR187=(CommonToken)match(input,DOLLAR,FOLLOW_DOLLAR_in_p_QuantifiedExpr4823); if (state.failed) return retval;
            	    if ( state.backtracking==0 ) {
            	    DOLLAR187_tree = (XQDTCommonTree)adaptor.create(DOLLAR187);
            	    adaptor.addChild(root_0, DOLLAR187_tree);
            	    }
            	    pushFollow(FOLLOW_p_QName_in_p_QuantifiedExpr4825);
            	    p_QName188=p_QName();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, p_QName188.getTree());
            	    // XQueryParser.g:530:111: ( p_TypeDeclaration )?
            	    int alt81=2;
            	    int LA81_0 = input.LA(1);

            	    if ( (LA81_0==AS) ) {
            	        alt81=1;
            	    }
            	    switch (alt81) {
            	        case 1 :
            	            // XQueryParser.g:530:111: p_TypeDeclaration
            	            {
            	            pushFollow(FOLLOW_p_TypeDeclaration_in_p_QuantifiedExpr4827);
            	            p_TypeDeclaration189=p_TypeDeclaration();

            	            state._fsp--;
            	            if (state.failed) return retval;
            	            if ( state.backtracking==0 ) adaptor.addChild(root_0, p_TypeDeclaration189.getTree());

            	            }
            	            break;

            	    }

            	    k=(CommonToken)match(input,IN,FOLLOW_IN_in_p_QuantifiedExpr4832); if (state.failed) return retval;
            	    if ( state.backtracking==0 ) {
            	    k_tree = (XQDTCommonTree)adaptor.create(k);
            	    adaptor.addChild(root_0, k_tree);
            	    }
            	    if (list_k==null) list_k=new ArrayList();
            	    list_k.add(k);

            	    pushFollow(FOLLOW_p_ExprSingle_in_p_QuantifiedExpr4834);
            	    p_ExprSingle190=p_ExprSingle();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, p_ExprSingle190.getTree());

            	    }
            	    break;

            	default :
            	    break loop82;
                }
            } while (true);

            k=(CommonToken)match(input,SATISFIES,FOLLOW_SATISFIES_in_p_QuantifiedExpr4840); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            k_tree = (XQDTCommonTree)adaptor.create(k);
            adaptor.addChild(root_0, k_tree);
            }
            if (list_k==null) list_k=new ArrayList();
            list_k.add(k);

            pushFollow(FOLLOW_p_ExprSingle_in_p_QuantifiedExpr4842);
            p_ExprSingle191=p_ExprSingle();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, p_ExprSingle191.getTree());
            if ( state.backtracking==0 ) {
              ak(list_k);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (XQDTCommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (XQDTCommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "p_QuantifiedExpr"

    public static class p_TypeswitchExpr_return extends ParserRuleReturnScope {
        XQDTCommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "p_TypeswitchExpr"
    // XQueryParser.g:534:1: p_TypeswitchExpr : k+= TYPESWITCH LPAREN pm_Expr RPAREN ( p_CaseClause )+ k+= DEFAULT ( DOLLAR p_VarName )? k+= RETURN p_ExprSingle ;
    public final XQueryParser.p_TypeswitchExpr_return p_TypeswitchExpr() throws RecognitionException {
        XQueryParser.p_TypeswitchExpr_return retval = new XQueryParser.p_TypeswitchExpr_return();
        retval.start = input.LT(1);

        XQDTCommonTree root_0 = null;

        CommonToken LPAREN192=null;
        CommonToken RPAREN194=null;
        CommonToken DOLLAR196=null;
        CommonToken k=null;
        List list_k=null;
        XQueryParser.pm_Expr_return pm_Expr193 = null;

        XQueryParser.p_CaseClause_return p_CaseClause195 = null;

        XQueryParser.p_VarName_return p_VarName197 = null;

        XQueryParser.p_ExprSingle_return p_ExprSingle198 = null;


        XQDTCommonTree LPAREN192_tree=null;
        XQDTCommonTree RPAREN194_tree=null;
        XQDTCommonTree DOLLAR196_tree=null;
        XQDTCommonTree k_tree=null;

        try {
            // XQueryParser.g:535:9: (k+= TYPESWITCH LPAREN pm_Expr RPAREN ( p_CaseClause )+ k+= DEFAULT ( DOLLAR p_VarName )? k+= RETURN p_ExprSingle )
            // XQueryParser.g:535:11: k+= TYPESWITCH LPAREN pm_Expr RPAREN ( p_CaseClause )+ k+= DEFAULT ( DOLLAR p_VarName )? k+= RETURN p_ExprSingle
            {
            root_0 = (XQDTCommonTree)adaptor.nil();

            k=(CommonToken)match(input,TYPESWITCH,FOLLOW_TYPESWITCH_in_p_TypeswitchExpr4872); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            k_tree = (XQDTCommonTree)adaptor.create(k);
            adaptor.addChild(root_0, k_tree);
            }
            if (list_k==null) list_k=new ArrayList();
            list_k.add(k);

            LPAREN192=(CommonToken)match(input,LPAREN,FOLLOW_LPAREN_in_p_TypeswitchExpr4874); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            LPAREN192_tree = (XQDTCommonTree)adaptor.create(LPAREN192);
            adaptor.addChild(root_0, LPAREN192_tree);
            }
            pushFollow(FOLLOW_pm_Expr_in_p_TypeswitchExpr4876);
            pm_Expr193=pm_Expr();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, pm_Expr193.getTree());
            RPAREN194=(CommonToken)match(input,RPAREN,FOLLOW_RPAREN_in_p_TypeswitchExpr4878); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            RPAREN194_tree = (XQDTCommonTree)adaptor.create(RPAREN194);
            adaptor.addChild(root_0, RPAREN194_tree);
            }
            // XQueryParser.g:535:47: ( p_CaseClause )+
            int cnt83=0;
            loop83:
            do {
                int alt83=2;
                int LA83_0 = input.LA(1);

                if ( (LA83_0==CASE) ) {
                    alt83=1;
                }


                switch (alt83) {
            	case 1 :
            	    // XQueryParser.g:535:47: p_CaseClause
            	    {
            	    pushFollow(FOLLOW_p_CaseClause_in_p_TypeswitchExpr4880);
            	    p_CaseClause195=p_CaseClause();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, p_CaseClause195.getTree());

            	    }
            	    break;

            	default :
            	    if ( cnt83 >= 1 ) break loop83;
            	    if (state.backtracking>0) {state.failed=true; return retval;}
                        EarlyExitException eee =
                            new EarlyExitException(83, input);
                        throw eee;
                }
                cnt83++;
            } while (true);

            k=(CommonToken)match(input,DEFAULT,FOLLOW_DEFAULT_in_p_TypeswitchExpr4885); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            k_tree = (XQDTCommonTree)adaptor.create(k);
            adaptor.addChild(root_0, k_tree);
            }
            if (list_k==null) list_k=new ArrayList();
            list_k.add(k);

            // XQueryParser.g:535:72: ( DOLLAR p_VarName )?
            int alt84=2;
            int LA84_0 = input.LA(1);

            if ( (LA84_0==DOLLAR) ) {
                alt84=1;
            }
            switch (alt84) {
                case 1 :
                    // XQueryParser.g:535:73: DOLLAR p_VarName
                    {
                    DOLLAR196=(CommonToken)match(input,DOLLAR,FOLLOW_DOLLAR_in_p_TypeswitchExpr4888); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    DOLLAR196_tree = (XQDTCommonTree)adaptor.create(DOLLAR196);
                    adaptor.addChild(root_0, DOLLAR196_tree);
                    }
                    pushFollow(FOLLOW_p_VarName_in_p_TypeswitchExpr4890);
                    p_VarName197=p_VarName();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, p_VarName197.getTree());

                    }
                    break;

            }

            k=(CommonToken)match(input,RETURN,FOLLOW_RETURN_in_p_TypeswitchExpr4896); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            k_tree = (XQDTCommonTree)adaptor.create(k);
            adaptor.addChild(root_0, k_tree);
            }
            if (list_k==null) list_k=new ArrayList();
            list_k.add(k);

            pushFollow(FOLLOW_p_ExprSingle_in_p_TypeswitchExpr4898);
            p_ExprSingle198=p_ExprSingle();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, p_ExprSingle198.getTree());
            if ( state.backtracking==0 ) {
              ak(list_k);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (XQDTCommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (XQDTCommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "p_TypeswitchExpr"

    public static class p_CaseClause_return extends ParserRuleReturnScope {
        XQDTCommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "p_CaseClause"
    // XQueryParser.g:539:1: p_CaseClause : k+= CASE ( DOLLAR p_VarName k+= AS )? p_SequenceType k+= RETURN p_ExprSingle ;
    public final XQueryParser.p_CaseClause_return p_CaseClause() throws RecognitionException {
        XQueryParser.p_CaseClause_return retval = new XQueryParser.p_CaseClause_return();
        retval.start = input.LT(1);

        XQDTCommonTree root_0 = null;

        CommonToken DOLLAR199=null;
        CommonToken k=null;
        List list_k=null;
        XQueryParser.p_VarName_return p_VarName200 = null;

        XQueryParser.p_SequenceType_return p_SequenceType201 = null;

        XQueryParser.p_ExprSingle_return p_ExprSingle202 = null;


        XQDTCommonTree DOLLAR199_tree=null;
        XQDTCommonTree k_tree=null;

        try {
            // XQueryParser.g:540:9: (k+= CASE ( DOLLAR p_VarName k+= AS )? p_SequenceType k+= RETURN p_ExprSingle )
            // XQueryParser.g:540:11: k+= CASE ( DOLLAR p_VarName k+= AS )? p_SequenceType k+= RETURN p_ExprSingle
            {
            root_0 = (XQDTCommonTree)adaptor.nil();

            k=(CommonToken)match(input,CASE,FOLLOW_CASE_in_p_CaseClause4928); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            k_tree = (XQDTCommonTree)adaptor.create(k);
            adaptor.addChild(root_0, k_tree);
            }
            if (list_k==null) list_k=new ArrayList();
            list_k.add(k);

            // XQueryParser.g:540:19: ( DOLLAR p_VarName k+= AS )?
            int alt85=2;
            int LA85_0 = input.LA(1);

            if ( (LA85_0==DOLLAR) ) {
                alt85=1;
            }
            switch (alt85) {
                case 1 :
                    // XQueryParser.g:540:20: DOLLAR p_VarName k+= AS
                    {
                    DOLLAR199=(CommonToken)match(input,DOLLAR,FOLLOW_DOLLAR_in_p_CaseClause4931); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    DOLLAR199_tree = (XQDTCommonTree)adaptor.create(DOLLAR199);
                    adaptor.addChild(root_0, DOLLAR199_tree);
                    }
                    pushFollow(FOLLOW_p_VarName_in_p_CaseClause4933);
                    p_VarName200=p_VarName();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, p_VarName200.getTree());
                    k=(CommonToken)match(input,AS,FOLLOW_AS_in_p_CaseClause4937); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    k_tree = (XQDTCommonTree)adaptor.create(k);
                    adaptor.addChild(root_0, k_tree);
                    }
                    if (list_k==null) list_k=new ArrayList();
                    list_k.add(k);


                    }
                    break;

            }

            pushFollow(FOLLOW_p_SequenceType_in_p_CaseClause4941);
            p_SequenceType201=p_SequenceType();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, p_SequenceType201.getTree());
            k=(CommonToken)match(input,RETURN,FOLLOW_RETURN_in_p_CaseClause4945); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            k_tree = (XQDTCommonTree)adaptor.create(k);
            adaptor.addChild(root_0, k_tree);
            }
            if (list_k==null) list_k=new ArrayList();
            list_k.add(k);

            pushFollow(FOLLOW_p_ExprSingle_in_p_CaseClause4947);
            p_ExprSingle202=p_ExprSingle();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, p_ExprSingle202.getTree());
            if ( state.backtracking==0 ) {
              ak(list_k);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (XQDTCommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (XQDTCommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "p_CaseClause"

    public static class p_IfExpr_return extends ParserRuleReturnScope {
        XQDTCommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "p_IfExpr"
    // XQueryParser.g:544:1: p_IfExpr : k+= IF LPAREN pm_Expr RPAREN k+= THEN p_ExprSingle k+= ELSE p_ExprSingle ;
    public final XQueryParser.p_IfExpr_return p_IfExpr() throws RecognitionException {
        XQueryParser.p_IfExpr_return retval = new XQueryParser.p_IfExpr_return();
        retval.start = input.LT(1);

        XQDTCommonTree root_0 = null;

        CommonToken LPAREN203=null;
        CommonToken RPAREN205=null;
        CommonToken k=null;
        List list_k=null;
        XQueryParser.pm_Expr_return pm_Expr204 = null;

        XQueryParser.p_ExprSingle_return p_ExprSingle206 = null;

        XQueryParser.p_ExprSingle_return p_ExprSingle207 = null;


        XQDTCommonTree LPAREN203_tree=null;
        XQDTCommonTree RPAREN205_tree=null;
        XQDTCommonTree k_tree=null;

        try {
            // XQueryParser.g:545:9: (k+= IF LPAREN pm_Expr RPAREN k+= THEN p_ExprSingle k+= ELSE p_ExprSingle )
            // XQueryParser.g:545:11: k+= IF LPAREN pm_Expr RPAREN k+= THEN p_ExprSingle k+= ELSE p_ExprSingle
            {
            root_0 = (XQDTCommonTree)adaptor.nil();

            k=(CommonToken)match(input,IF,FOLLOW_IF_in_p_IfExpr4977); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            k_tree = (XQDTCommonTree)adaptor.create(k);
            adaptor.addChild(root_0, k_tree);
            }
            if (list_k==null) list_k=new ArrayList();
            list_k.add(k);

            LPAREN203=(CommonToken)match(input,LPAREN,FOLLOW_LPAREN_in_p_IfExpr4979); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            LPAREN203_tree = (XQDTCommonTree)adaptor.create(LPAREN203);
            adaptor.addChild(root_0, LPAREN203_tree);
            }
            pushFollow(FOLLOW_pm_Expr_in_p_IfExpr4981);
            pm_Expr204=pm_Expr();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, pm_Expr204.getTree());
            RPAREN205=(CommonToken)match(input,RPAREN,FOLLOW_RPAREN_in_p_IfExpr4983); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            RPAREN205_tree = (XQDTCommonTree)adaptor.create(RPAREN205);
            adaptor.addChild(root_0, RPAREN205_tree);
            }
            k=(CommonToken)match(input,THEN,FOLLOW_THEN_in_p_IfExpr4987); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            k_tree = (XQDTCommonTree)adaptor.create(k);
            adaptor.addChild(root_0, k_tree);
            }
            if (list_k==null) list_k=new ArrayList();
            list_k.add(k);

            pushFollow(FOLLOW_p_ExprSingle_in_p_IfExpr4989);
            p_ExprSingle206=p_ExprSingle();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, p_ExprSingle206.getTree());
            k=(CommonToken)match(input,ELSE,FOLLOW_ELSE_in_p_IfExpr4993); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            k_tree = (XQDTCommonTree)adaptor.create(k);
            adaptor.addChild(root_0, k_tree);
            }
            if (list_k==null) list_k=new ArrayList();
            list_k.add(k);

            pushFollow(FOLLOW_p_ExprSingle_in_p_IfExpr4995);
            p_ExprSingle207=p_ExprSingle();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, p_ExprSingle207.getTree());
            if ( state.backtracking==0 ) {
              ak(list_k);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (XQDTCommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (XQDTCommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "p_IfExpr"

    public static class p_OrExpr_return extends ParserRuleReturnScope {
        XQDTCommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "p_OrExpr"
    // XQueryParser.g:549:1: p_OrExpr : p_AndExpr (k= OR p_AndExpr )* ;
    public final XQueryParser.p_OrExpr_return p_OrExpr() throws RecognitionException {
        XQueryParser.p_OrExpr_return retval = new XQueryParser.p_OrExpr_return();
        retval.start = input.LT(1);

        XQDTCommonTree root_0 = null;

        CommonToken k=null;
        XQueryParser.p_AndExpr_return p_AndExpr208 = null;

        XQueryParser.p_AndExpr_return p_AndExpr209 = null;


        XQDTCommonTree k_tree=null;

        try {
            // XQueryParser.g:550:9: ( p_AndExpr (k= OR p_AndExpr )* )
            // XQueryParser.g:550:11: p_AndExpr (k= OR p_AndExpr )*
            {
            root_0 = (XQDTCommonTree)adaptor.nil();

            pushFollow(FOLLOW_p_AndExpr_in_p_OrExpr5023);
            p_AndExpr208=p_AndExpr();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, p_AndExpr208.getTree());
            // XQueryParser.g:550:21: (k= OR p_AndExpr )*
            loop86:
            do {
                int alt86=2;
                int LA86_0 = input.LA(1);

                if ( (LA86_0==OR) ) {
                    alt86=1;
                }


                switch (alt86) {
            	case 1 :
            	    // XQueryParser.g:550:23: k= OR p_AndExpr
            	    {
            	    k=(CommonToken)match(input,OR,FOLLOW_OR_in_p_OrExpr5029); if (state.failed) return retval;
            	    if ( state.backtracking==0 ) {
            	    k_tree = (XQDTCommonTree)adaptor.create(k);
            	    adaptor.addChild(root_0, k_tree);
            	    }
            	    if ( state.backtracking==0 ) {
            	      ak(k);
            	    }
            	    pushFollow(FOLLOW_p_AndExpr_in_p_OrExpr5033);
            	    p_AndExpr209=p_AndExpr();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, p_AndExpr209.getTree());

            	    }
            	    break;

            	default :
            	    break loop86;
                }
            } while (true);


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (XQDTCommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (XQDTCommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "p_OrExpr"

    public static class p_AndExpr_return extends ParserRuleReturnScope {
        XQDTCommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "p_AndExpr"
    // XQueryParser.g:554:1: p_AndExpr : p_ComparisonExpr (k= AND p_ComparisonExpr )* ;
    public final XQueryParser.p_AndExpr_return p_AndExpr() throws RecognitionException {
        XQueryParser.p_AndExpr_return retval = new XQueryParser.p_AndExpr_return();
        retval.start = input.LT(1);

        XQDTCommonTree root_0 = null;

        CommonToken k=null;
        XQueryParser.p_ComparisonExpr_return p_ComparisonExpr210 = null;

        XQueryParser.p_ComparisonExpr_return p_ComparisonExpr211 = null;


        XQDTCommonTree k_tree=null;

        try {
            // XQueryParser.g:555:9: ( p_ComparisonExpr (k= AND p_ComparisonExpr )* )
            // XQueryParser.g:555:13: p_ComparisonExpr (k= AND p_ComparisonExpr )*
            {
            root_0 = (XQDTCommonTree)adaptor.nil();

            pushFollow(FOLLOW_p_ComparisonExpr_in_p_AndExpr5064);
            p_ComparisonExpr210=p_ComparisonExpr();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, p_ComparisonExpr210.getTree());
            // XQueryParser.g:555:30: (k= AND p_ComparisonExpr )*
            loop87:
            do {
                int alt87=2;
                int LA87_0 = input.LA(1);

                if ( (LA87_0==AND) ) {
                    alt87=1;
                }


                switch (alt87) {
            	case 1 :
            	    // XQueryParser.g:555:32: k= AND p_ComparisonExpr
            	    {
            	    k=(CommonToken)match(input,AND,FOLLOW_AND_in_p_AndExpr5070); if (state.failed) return retval;
            	    if ( state.backtracking==0 ) {
            	    k_tree = (XQDTCommonTree)adaptor.create(k);
            	    adaptor.addChild(root_0, k_tree);
            	    }
            	    if ( state.backtracking==0 ) {
            	      ak(k);
            	    }
            	    pushFollow(FOLLOW_p_ComparisonExpr_in_p_AndExpr5074);
            	    p_ComparisonExpr211=p_ComparisonExpr();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, p_ComparisonExpr211.getTree());

            	    }
            	    break;

            	default :
            	    break loop87;
                }
            } while (true);


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (XQDTCommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (XQDTCommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "p_AndExpr"

    public static class p_ComparisonExpr_return extends ParserRuleReturnScope {
        XQDTCommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "p_ComparisonExpr"
    // XQueryParser.g:559:1: p_ComparisonExpr : p_RangeExpr ( ( p_ValueComp | p_GeneralComp | p_NodeComp ) p_RangeExpr )? ;
    public final XQueryParser.p_ComparisonExpr_return p_ComparisonExpr() throws RecognitionException {
        XQueryParser.p_ComparisonExpr_return retval = new XQueryParser.p_ComparisonExpr_return();
        retval.start = input.LT(1);

        XQDTCommonTree root_0 = null;

        XQueryParser.p_RangeExpr_return p_RangeExpr212 = null;

        XQueryParser.p_ValueComp_return p_ValueComp213 = null;

        XQueryParser.p_GeneralComp_return p_GeneralComp214 = null;

        XQueryParser.p_NodeComp_return p_NodeComp215 = null;

        XQueryParser.p_RangeExpr_return p_RangeExpr216 = null;



        try {
            // XQueryParser.g:560:9: ( p_RangeExpr ( ( p_ValueComp | p_GeneralComp | p_NodeComp ) p_RangeExpr )? )
            // XQueryParser.g:560:13: p_RangeExpr ( ( p_ValueComp | p_GeneralComp | p_NodeComp ) p_RangeExpr )?
            {
            root_0 = (XQDTCommonTree)adaptor.nil();

            pushFollow(FOLLOW_p_RangeExpr_in_p_ComparisonExpr5105);
            p_RangeExpr212=p_RangeExpr();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, p_RangeExpr212.getTree());
            // XQueryParser.g:560:25: ( ( p_ValueComp | p_GeneralComp | p_NodeComp ) p_RangeExpr )?
            int alt89=2;
            int LA89_0 = input.LA(1);

            if ( (LA89_0==EQ||LA89_0==GE||LA89_0==GT||LA89_0==IS||LA89_0==LE||LA89_0==LT||LA89_0==NE||LA89_0==EQUAL||LA89_0==NOTEQUAL||(LA89_0>=SMALLER && LA89_0<=GREATER_GREATER)) ) {
                alt89=1;
            }
            switch (alt89) {
                case 1 :
                    // XQueryParser.g:560:27: ( p_ValueComp | p_GeneralComp | p_NodeComp ) p_RangeExpr
                    {
                    // XQueryParser.g:560:27: ( p_ValueComp | p_GeneralComp | p_NodeComp )
                    int alt88=3;
                    switch ( input.LA(1) ) {
                    case EQ:
                    case GE:
                    case GT:
                    case LE:
                    case LT:
                    case NE:
                        {
                        alt88=1;
                        }
                        break;
                    case EQUAL:
                    case NOTEQUAL:
                    case SMALLER:
                    case GREATER:
                    case SMALLEREQ:
                    case GREATEREQ:
                        {
                        alt88=2;
                        }
                        break;
                    case IS:
                    case SMALLER_SMALLER:
                    case GREATER_GREATER:
                        {
                        alt88=3;
                        }
                        break;
                    default:
                        if (state.backtracking>0) {state.failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("", 88, 0, input);

                        throw nvae;
                    }

                    switch (alt88) {
                        case 1 :
                            // XQueryParser.g:560:28: p_ValueComp
                            {
                            pushFollow(FOLLOW_p_ValueComp_in_p_ComparisonExpr5110);
                            p_ValueComp213=p_ValueComp();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) adaptor.addChild(root_0, p_ValueComp213.getTree());

                            }
                            break;
                        case 2 :
                            // XQueryParser.g:560:42: p_GeneralComp
                            {
                            pushFollow(FOLLOW_p_GeneralComp_in_p_ComparisonExpr5114);
                            p_GeneralComp214=p_GeneralComp();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) adaptor.addChild(root_0, p_GeneralComp214.getTree());

                            }
                            break;
                        case 3 :
                            // XQueryParser.g:560:58: p_NodeComp
                            {
                            pushFollow(FOLLOW_p_NodeComp_in_p_ComparisonExpr5118);
                            p_NodeComp215=p_NodeComp();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) adaptor.addChild(root_0, p_NodeComp215.getTree());

                            }
                            break;

                    }

                    pushFollow(FOLLOW_p_RangeExpr_in_p_ComparisonExpr5121);
                    p_RangeExpr216=p_RangeExpr();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, p_RangeExpr216.getTree());

                    }
                    break;

            }


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (XQDTCommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (XQDTCommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "p_ComparisonExpr"

    public static class p_RangeExpr_return extends ParserRuleReturnScope {
        XQDTCommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "p_RangeExpr"
    // XQueryParser.g:564:1: p_RangeExpr : p_AdditiveExpr (k= TO p_AdditiveExpr )? ;
    public final XQueryParser.p_RangeExpr_return p_RangeExpr() throws RecognitionException {
        XQueryParser.p_RangeExpr_return retval = new XQueryParser.p_RangeExpr_return();
        retval.start = input.LT(1);

        XQDTCommonTree root_0 = null;

        CommonToken k=null;
        XQueryParser.p_AdditiveExpr_return p_AdditiveExpr217 = null;

        XQueryParser.p_AdditiveExpr_return p_AdditiveExpr218 = null;


        XQDTCommonTree k_tree=null;

        try {
            // XQueryParser.g:565:9: ( p_AdditiveExpr (k= TO p_AdditiveExpr )? )
            // XQueryParser.g:565:13: p_AdditiveExpr (k= TO p_AdditiveExpr )?
            {
            root_0 = (XQDTCommonTree)adaptor.nil();

            pushFollow(FOLLOW_p_AdditiveExpr_in_p_RangeExpr5152);
            p_AdditiveExpr217=p_AdditiveExpr();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, p_AdditiveExpr217.getTree());
            // XQueryParser.g:565:28: (k= TO p_AdditiveExpr )?
            int alt90=2;
            int LA90_0 = input.LA(1);

            if ( (LA90_0==TO) ) {
                alt90=1;
            }
            switch (alt90) {
                case 1 :
                    // XQueryParser.g:565:30: k= TO p_AdditiveExpr
                    {
                    k=(CommonToken)match(input,TO,FOLLOW_TO_in_p_RangeExpr5158); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    k_tree = (XQDTCommonTree)adaptor.create(k);
                    adaptor.addChild(root_0, k_tree);
                    }
                    if ( state.backtracking==0 ) {
                      ak(k);
                    }
                    pushFollow(FOLLOW_p_AdditiveExpr_in_p_RangeExpr5162);
                    p_AdditiveExpr218=p_AdditiveExpr();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, p_AdditiveExpr218.getTree());

                    }
                    break;

            }


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (XQDTCommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (XQDTCommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "p_RangeExpr"

    public static class p_AdditiveExpr_return extends ParserRuleReturnScope {
        XQDTCommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "p_AdditiveExpr"
    // XQueryParser.g:569:1: p_AdditiveExpr : p_MultiplicativeExpr ( ( PLUS | MINUS ) p_MultiplicativeExpr )* ;
    public final XQueryParser.p_AdditiveExpr_return p_AdditiveExpr() throws RecognitionException {
        XQueryParser.p_AdditiveExpr_return retval = new XQueryParser.p_AdditiveExpr_return();
        retval.start = input.LT(1);

        XQDTCommonTree root_0 = null;

        CommonToken set220=null;
        XQueryParser.p_MultiplicativeExpr_return p_MultiplicativeExpr219 = null;

        XQueryParser.p_MultiplicativeExpr_return p_MultiplicativeExpr221 = null;


        XQDTCommonTree set220_tree=null;

        try {
            // XQueryParser.g:570:9: ( p_MultiplicativeExpr ( ( PLUS | MINUS ) p_MultiplicativeExpr )* )
            // XQueryParser.g:570:13: p_MultiplicativeExpr ( ( PLUS | MINUS ) p_MultiplicativeExpr )*
            {
            root_0 = (XQDTCommonTree)adaptor.nil();

            pushFollow(FOLLOW_p_MultiplicativeExpr_in_p_AdditiveExpr5193);
            p_MultiplicativeExpr219=p_MultiplicativeExpr();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, p_MultiplicativeExpr219.getTree());
            // XQueryParser.g:570:34: ( ( PLUS | MINUS ) p_MultiplicativeExpr )*
            loop91:
            do {
                int alt91=2;
                int LA91_0 = input.LA(1);

                if ( ((LA91_0>=PLUS && LA91_0<=MINUS)) ) {
                    alt91=1;
                }


                switch (alt91) {
            	case 1 :
            	    // XQueryParser.g:570:36: ( PLUS | MINUS ) p_MultiplicativeExpr
            	    {
            	    set220=(CommonToken)input.LT(1);
            	    if ( (input.LA(1)>=PLUS && input.LA(1)<=MINUS) ) {
            	        input.consume();
            	        if ( state.backtracking==0 ) adaptor.addChild(root_0, (XQDTCommonTree)adaptor.create(set220));
            	        state.errorRecovery=false;state.failed=false;
            	    }
            	    else {
            	        if (state.backtracking>0) {state.failed=true; return retval;}
            	        MismatchedSetException mse = new MismatchedSetException(null,input);
            	        throw mse;
            	    }

            	    pushFollow(FOLLOW_p_MultiplicativeExpr_in_p_AdditiveExpr5205);
            	    p_MultiplicativeExpr221=p_MultiplicativeExpr();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, p_MultiplicativeExpr221.getTree());

            	    }
            	    break;

            	default :
            	    break loop91;
                }
            } while (true);


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (XQDTCommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (XQDTCommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "p_AdditiveExpr"

    public static class p_MultiplicativeExpr_return extends ParserRuleReturnScope {
        XQDTCommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "p_MultiplicativeExpr"
    // XQueryParser.g:574:1: p_MultiplicativeExpr : p_UnionExpr ( ( STAR | kd= DIV | ki= IDIV | km= MOD ) p_UnionExpr )* ;
    public final XQueryParser.p_MultiplicativeExpr_return p_MultiplicativeExpr() throws RecognitionException {
        XQueryParser.p_MultiplicativeExpr_return retval = new XQueryParser.p_MultiplicativeExpr_return();
        retval.start = input.LT(1);

        XQDTCommonTree root_0 = null;

        CommonToken kd=null;
        CommonToken ki=null;
        CommonToken km=null;
        CommonToken STAR223=null;
        XQueryParser.p_UnionExpr_return p_UnionExpr222 = null;

        XQueryParser.p_UnionExpr_return p_UnionExpr224 = null;


        XQDTCommonTree kd_tree=null;
        XQDTCommonTree ki_tree=null;
        XQDTCommonTree km_tree=null;
        XQDTCommonTree STAR223_tree=null;

        try {
            // XQueryParser.g:575:9: ( p_UnionExpr ( ( STAR | kd= DIV | ki= IDIV | km= MOD ) p_UnionExpr )* )
            // XQueryParser.g:575:13: p_UnionExpr ( ( STAR | kd= DIV | ki= IDIV | km= MOD ) p_UnionExpr )*
            {
            root_0 = (XQDTCommonTree)adaptor.nil();

            pushFollow(FOLLOW_p_UnionExpr_in_p_MultiplicativeExpr5236);
            p_UnionExpr222=p_UnionExpr();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, p_UnionExpr222.getTree());
            // XQueryParser.g:575:25: ( ( STAR | kd= DIV | ki= IDIV | km= MOD ) p_UnionExpr )*
            loop93:
            do {
                int alt93=2;
                int LA93_0 = input.LA(1);

                if ( (LA93_0==DIV||LA93_0==IDIV||LA93_0==MOD||LA93_0==STAR) ) {
                    alt93=1;
                }


                switch (alt93) {
            	case 1 :
            	    // XQueryParser.g:575:27: ( STAR | kd= DIV | ki= IDIV | km= MOD ) p_UnionExpr
            	    {
            	    // XQueryParser.g:575:27: ( STAR | kd= DIV | ki= IDIV | km= MOD )
            	    int alt92=4;
            	    switch ( input.LA(1) ) {
            	    case STAR:
            	        {
            	        alt92=1;
            	        }
            	        break;
            	    case DIV:
            	        {
            	        alt92=2;
            	        }
            	        break;
            	    case IDIV:
            	        {
            	        alt92=3;
            	        }
            	        break;
            	    case MOD:
            	        {
            	        alt92=4;
            	        }
            	        break;
            	    default:
            	        if (state.backtracking>0) {state.failed=true; return retval;}
            	        NoViableAltException nvae =
            	            new NoViableAltException("", 92, 0, input);

            	        throw nvae;
            	    }

            	    switch (alt92) {
            	        case 1 :
            	            // XQueryParser.g:575:28: STAR
            	            {
            	            STAR223=(CommonToken)match(input,STAR,FOLLOW_STAR_in_p_MultiplicativeExpr5241); if (state.failed) return retval;
            	            if ( state.backtracking==0 ) {
            	            STAR223_tree = (XQDTCommonTree)adaptor.create(STAR223);
            	            adaptor.addChild(root_0, STAR223_tree);
            	            }

            	            }
            	            break;
            	        case 2 :
            	            // XQueryParser.g:575:35: kd= DIV
            	            {
            	            kd=(CommonToken)match(input,DIV,FOLLOW_DIV_in_p_MultiplicativeExpr5247); if (state.failed) return retval;
            	            if ( state.backtracking==0 ) {
            	            kd_tree = (XQDTCommonTree)adaptor.create(kd);
            	            adaptor.addChild(root_0, kd_tree);
            	            }
            	            if ( state.backtracking==0 ) {
            	              ak(kd);
            	            }

            	            }
            	            break;
            	        case 3 :
            	            // XQueryParser.g:575:55: ki= IDIV
            	            {
            	            ki=(CommonToken)match(input,IDIV,FOLLOW_IDIV_in_p_MultiplicativeExpr5255); if (state.failed) return retval;
            	            if ( state.backtracking==0 ) {
            	            ki_tree = (XQDTCommonTree)adaptor.create(ki);
            	            adaptor.addChild(root_0, ki_tree);
            	            }
            	            if ( state.backtracking==0 ) {
            	              ak(ki);
            	            }

            	            }
            	            break;
            	        case 4 :
            	            // XQueryParser.g:575:76: km= MOD
            	            {
            	            km=(CommonToken)match(input,MOD,FOLLOW_MOD_in_p_MultiplicativeExpr5263); if (state.failed) return retval;
            	            if ( state.backtracking==0 ) {
            	            km_tree = (XQDTCommonTree)adaptor.create(km);
            	            adaptor.addChild(root_0, km_tree);
            	            }
            	            if ( state.backtracking==0 ) {
            	              ak(km);
            	            }

            	            }
            	            break;

            	    }

            	    pushFollow(FOLLOW_p_UnionExpr_in_p_MultiplicativeExpr5268);
            	    p_UnionExpr224=p_UnionExpr();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, p_UnionExpr224.getTree());

            	    }
            	    break;

            	default :
            	    break loop93;
                }
            } while (true);


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (XQDTCommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (XQDTCommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "p_MultiplicativeExpr"

    public static class p_UnionExpr_return extends ParserRuleReturnScope {
        XQDTCommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "p_UnionExpr"
    // XQueryParser.g:579:1: p_UnionExpr : p_IntersectExceptExpr ( (ku= UNION | VBAR ) p_IntersectExceptExpr )* ;
    public final XQueryParser.p_UnionExpr_return p_UnionExpr() throws RecognitionException {
        XQueryParser.p_UnionExpr_return retval = new XQueryParser.p_UnionExpr_return();
        retval.start = input.LT(1);

        XQDTCommonTree root_0 = null;

        CommonToken ku=null;
        CommonToken VBAR226=null;
        XQueryParser.p_IntersectExceptExpr_return p_IntersectExceptExpr225 = null;

        XQueryParser.p_IntersectExceptExpr_return p_IntersectExceptExpr227 = null;


        XQDTCommonTree ku_tree=null;
        XQDTCommonTree VBAR226_tree=null;

        try {
            // XQueryParser.g:580:9: ( p_IntersectExceptExpr ( (ku= UNION | VBAR ) p_IntersectExceptExpr )* )
            // XQueryParser.g:580:13: p_IntersectExceptExpr ( (ku= UNION | VBAR ) p_IntersectExceptExpr )*
            {
            root_0 = (XQDTCommonTree)adaptor.nil();

            pushFollow(FOLLOW_p_IntersectExceptExpr_in_p_UnionExpr5299);
            p_IntersectExceptExpr225=p_IntersectExceptExpr();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, p_IntersectExceptExpr225.getTree());
            // XQueryParser.g:580:35: ( (ku= UNION | VBAR ) p_IntersectExceptExpr )*
            loop95:
            do {
                int alt95=2;
                int LA95_0 = input.LA(1);

                if ( (LA95_0==UNION||LA95_0==VBAR) ) {
                    alt95=1;
                }


                switch (alt95) {
            	case 1 :
            	    // XQueryParser.g:580:37: (ku= UNION | VBAR ) p_IntersectExceptExpr
            	    {
            	    // XQueryParser.g:580:37: (ku= UNION | VBAR )
            	    int alt94=2;
            	    int LA94_0 = input.LA(1);

            	    if ( (LA94_0==UNION) ) {
            	        alt94=1;
            	    }
            	    else if ( (LA94_0==VBAR) ) {
            	        alt94=2;
            	    }
            	    else {
            	        if (state.backtracking>0) {state.failed=true; return retval;}
            	        NoViableAltException nvae =
            	            new NoViableAltException("", 94, 0, input);

            	        throw nvae;
            	    }
            	    switch (alt94) {
            	        case 1 :
            	            // XQueryParser.g:580:38: ku= UNION
            	            {
            	            ku=(CommonToken)match(input,UNION,FOLLOW_UNION_in_p_UnionExpr5306); if (state.failed) return retval;
            	            if ( state.backtracking==0 ) {
            	            ku_tree = (XQDTCommonTree)adaptor.create(ku);
            	            adaptor.addChild(root_0, ku_tree);
            	            }
            	            if ( state.backtracking==0 ) {
            	              ak(ku);
            	            }

            	            }
            	            break;
            	        case 2 :
            	            // XQueryParser.g:580:60: VBAR
            	            {
            	            VBAR226=(CommonToken)match(input,VBAR,FOLLOW_VBAR_in_p_UnionExpr5312); if (state.failed) return retval;
            	            if ( state.backtracking==0 ) {
            	            VBAR226_tree = (XQDTCommonTree)adaptor.create(VBAR226);
            	            adaptor.addChild(root_0, VBAR226_tree);
            	            }

            	            }
            	            break;

            	    }

            	    pushFollow(FOLLOW_p_IntersectExceptExpr_in_p_UnionExpr5315);
            	    p_IntersectExceptExpr227=p_IntersectExceptExpr();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, p_IntersectExceptExpr227.getTree());

            	    }
            	    break;

            	default :
            	    break loop95;
                }
            } while (true);


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (XQDTCommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (XQDTCommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "p_UnionExpr"

    public static class p_IntersectExceptExpr_return extends ParserRuleReturnScope {
        XQDTCommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "p_IntersectExceptExpr"
    // XQueryParser.g:584:1: p_IntersectExceptExpr : p_InstanceofExpr ( (k= INTERSECT | k= EXCEPT ) p_InstanceofExpr )* ;
    public final XQueryParser.p_IntersectExceptExpr_return p_IntersectExceptExpr() throws RecognitionException {
        XQueryParser.p_IntersectExceptExpr_return retval = new XQueryParser.p_IntersectExceptExpr_return();
        retval.start = input.LT(1);

        XQDTCommonTree root_0 = null;

        CommonToken k=null;
        XQueryParser.p_InstanceofExpr_return p_InstanceofExpr228 = null;

        XQueryParser.p_InstanceofExpr_return p_InstanceofExpr229 = null;


        XQDTCommonTree k_tree=null;

        try {
            // XQueryParser.g:585:9: ( p_InstanceofExpr ( (k= INTERSECT | k= EXCEPT ) p_InstanceofExpr )* )
            // XQueryParser.g:585:13: p_InstanceofExpr ( (k= INTERSECT | k= EXCEPT ) p_InstanceofExpr )*
            {
            root_0 = (XQDTCommonTree)adaptor.nil();

            pushFollow(FOLLOW_p_InstanceofExpr_in_p_IntersectExceptExpr5346);
            p_InstanceofExpr228=p_InstanceofExpr();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, p_InstanceofExpr228.getTree());
            // XQueryParser.g:585:30: ( (k= INTERSECT | k= EXCEPT ) p_InstanceofExpr )*
            loop97:
            do {
                int alt97=2;
                int LA97_0 = input.LA(1);

                if ( (LA97_0==EXCEPT||LA97_0==INTERSECT) ) {
                    alt97=1;
                }


                switch (alt97) {
            	case 1 :
            	    // XQueryParser.g:585:32: (k= INTERSECT | k= EXCEPT ) p_InstanceofExpr
            	    {
            	    // XQueryParser.g:585:32: (k= INTERSECT | k= EXCEPT )
            	    int alt96=2;
            	    int LA96_0 = input.LA(1);

            	    if ( (LA96_0==INTERSECT) ) {
            	        alt96=1;
            	    }
            	    else if ( (LA96_0==EXCEPT) ) {
            	        alt96=2;
            	    }
            	    else {
            	        if (state.backtracking>0) {state.failed=true; return retval;}
            	        NoViableAltException nvae =
            	            new NoViableAltException("", 96, 0, input);

            	        throw nvae;
            	    }
            	    switch (alt96) {
            	        case 1 :
            	            // XQueryParser.g:585:33: k= INTERSECT
            	            {
            	            k=(CommonToken)match(input,INTERSECT,FOLLOW_INTERSECT_in_p_IntersectExceptExpr5353); if (state.failed) return retval;
            	            if ( state.backtracking==0 ) {
            	            k_tree = (XQDTCommonTree)adaptor.create(k);
            	            adaptor.addChild(root_0, k_tree);
            	            }

            	            }
            	            break;
            	        case 2 :
            	            // XQueryParser.g:585:47: k= EXCEPT
            	            {
            	            k=(CommonToken)match(input,EXCEPT,FOLLOW_EXCEPT_in_p_IntersectExceptExpr5359); if (state.failed) return retval;
            	            if ( state.backtracking==0 ) {
            	            k_tree = (XQDTCommonTree)adaptor.create(k);
            	            adaptor.addChild(root_0, k_tree);
            	            }

            	            }
            	            break;

            	    }

            	    if ( state.backtracking==0 ) {
            	      ak(k);
            	    }
            	    pushFollow(FOLLOW_p_InstanceofExpr_in_p_IntersectExceptExpr5364);
            	    p_InstanceofExpr229=p_InstanceofExpr();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, p_InstanceofExpr229.getTree());

            	    }
            	    break;

            	default :
            	    break loop97;
                }
            } while (true);


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (XQDTCommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (XQDTCommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "p_IntersectExceptExpr"

    public static class p_InstanceofExpr_return extends ParserRuleReturnScope {
        XQDTCommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "p_InstanceofExpr"
    // XQueryParser.g:589:1: p_InstanceofExpr : p_TreatExpr (ki= INSTANCE ko= OF p_SequenceType )? ;
    public final XQueryParser.p_InstanceofExpr_return p_InstanceofExpr() throws RecognitionException {
        XQueryParser.p_InstanceofExpr_return retval = new XQueryParser.p_InstanceofExpr_return();
        retval.start = input.LT(1);

        XQDTCommonTree root_0 = null;

        CommonToken ki=null;
        CommonToken ko=null;
        XQueryParser.p_TreatExpr_return p_TreatExpr230 = null;

        XQueryParser.p_SequenceType_return p_SequenceType231 = null;


        XQDTCommonTree ki_tree=null;
        XQDTCommonTree ko_tree=null;

        try {
            // XQueryParser.g:590:9: ( p_TreatExpr (ki= INSTANCE ko= OF p_SequenceType )? )
            // XQueryParser.g:590:13: p_TreatExpr (ki= INSTANCE ko= OF p_SequenceType )?
            {
            root_0 = (XQDTCommonTree)adaptor.nil();

            pushFollow(FOLLOW_p_TreatExpr_in_p_InstanceofExpr5395);
            p_TreatExpr230=p_TreatExpr();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, p_TreatExpr230.getTree());
            // XQueryParser.g:590:25: (ki= INSTANCE ko= OF p_SequenceType )?
            int alt98=2;
            int LA98_0 = input.LA(1);

            if ( (LA98_0==INSTANCE) ) {
                alt98=1;
            }
            switch (alt98) {
                case 1 :
                    // XQueryParser.g:590:27: ki= INSTANCE ko= OF p_SequenceType
                    {
                    ki=(CommonToken)match(input,INSTANCE,FOLLOW_INSTANCE_in_p_InstanceofExpr5401); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    ki_tree = (XQDTCommonTree)adaptor.create(ki);
                    adaptor.addChild(root_0, ki_tree);
                    }
                    if ( state.backtracking==0 ) {
                      ak(ki);
                    }
                    ko=(CommonToken)match(input,OF,FOLLOW_OF_in_p_InstanceofExpr5407); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    ko_tree = (XQDTCommonTree)adaptor.create(ko);
                    adaptor.addChild(root_0, ko_tree);
                    }
                    if ( state.backtracking==0 ) {
                      ak(ko);
                    }
                    pushFollow(FOLLOW_p_SequenceType_in_p_InstanceofExpr5411);
                    p_SequenceType231=p_SequenceType();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, p_SequenceType231.getTree());

                    }
                    break;

            }


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (XQDTCommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (XQDTCommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "p_InstanceofExpr"

    public static class p_TreatExpr_return extends ParserRuleReturnScope {
        XQDTCommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "p_TreatExpr"
    // XQueryParser.g:594:1: p_TreatExpr : p_CastableExpr (kt= TREAT ka= AS p_SequenceType )? ;
    public final XQueryParser.p_TreatExpr_return p_TreatExpr() throws RecognitionException {
        XQueryParser.p_TreatExpr_return retval = new XQueryParser.p_TreatExpr_return();
        retval.start = input.LT(1);

        XQDTCommonTree root_0 = null;

        CommonToken kt=null;
        CommonToken ka=null;
        XQueryParser.p_CastableExpr_return p_CastableExpr232 = null;

        XQueryParser.p_SequenceType_return p_SequenceType233 = null;


        XQDTCommonTree kt_tree=null;
        XQDTCommonTree ka_tree=null;

        try {
            // XQueryParser.g:595:9: ( p_CastableExpr (kt= TREAT ka= AS p_SequenceType )? )
            // XQueryParser.g:595:13: p_CastableExpr (kt= TREAT ka= AS p_SequenceType )?
            {
            root_0 = (XQDTCommonTree)adaptor.nil();

            pushFollow(FOLLOW_p_CastableExpr_in_p_TreatExpr5441);
            p_CastableExpr232=p_CastableExpr();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, p_CastableExpr232.getTree());
            // XQueryParser.g:595:28: (kt= TREAT ka= AS p_SequenceType )?
            int alt99=2;
            int LA99_0 = input.LA(1);

            if ( (LA99_0==TREAT) ) {
                alt99=1;
            }
            switch (alt99) {
                case 1 :
                    // XQueryParser.g:595:30: kt= TREAT ka= AS p_SequenceType
                    {
                    kt=(CommonToken)match(input,TREAT,FOLLOW_TREAT_in_p_TreatExpr5447); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    kt_tree = (XQDTCommonTree)adaptor.create(kt);
                    adaptor.addChild(root_0, kt_tree);
                    }
                    if ( state.backtracking==0 ) {
                      ak(kt);
                    }
                    ka=(CommonToken)match(input,AS,FOLLOW_AS_in_p_TreatExpr5453); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    ka_tree = (XQDTCommonTree)adaptor.create(ka);
                    adaptor.addChild(root_0, ka_tree);
                    }
                    if ( state.backtracking==0 ) {
                      ak(ka);
                    }
                    pushFollow(FOLLOW_p_SequenceType_in_p_TreatExpr5457);
                    p_SequenceType233=p_SequenceType();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, p_SequenceType233.getTree());

                    }
                    break;

            }


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (XQDTCommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (XQDTCommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "p_TreatExpr"

    public static class p_CastableExpr_return extends ParserRuleReturnScope {
        XQDTCommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "p_CastableExpr"
    // XQueryParser.g:599:1: p_CastableExpr : p_CastExpr (kc= CASTABLE ka= AS p_SingleType )? ;
    public final XQueryParser.p_CastableExpr_return p_CastableExpr() throws RecognitionException {
        XQueryParser.p_CastableExpr_return retval = new XQueryParser.p_CastableExpr_return();
        retval.start = input.LT(1);

        XQDTCommonTree root_0 = null;

        CommonToken kc=null;
        CommonToken ka=null;
        XQueryParser.p_CastExpr_return p_CastExpr234 = null;

        XQueryParser.p_SingleType_return p_SingleType235 = null;


        XQDTCommonTree kc_tree=null;
        XQDTCommonTree ka_tree=null;

        try {
            // XQueryParser.g:600:9: ( p_CastExpr (kc= CASTABLE ka= AS p_SingleType )? )
            // XQueryParser.g:600:13: p_CastExpr (kc= CASTABLE ka= AS p_SingleType )?
            {
            root_0 = (XQDTCommonTree)adaptor.nil();

            pushFollow(FOLLOW_p_CastExpr_in_p_CastableExpr5496);
            p_CastExpr234=p_CastExpr();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, p_CastExpr234.getTree());
            // XQueryParser.g:600:24: (kc= CASTABLE ka= AS p_SingleType )?
            int alt100=2;
            int LA100_0 = input.LA(1);

            if ( (LA100_0==CASTABLE) ) {
                alt100=1;
            }
            switch (alt100) {
                case 1 :
                    // XQueryParser.g:600:26: kc= CASTABLE ka= AS p_SingleType
                    {
                    kc=(CommonToken)match(input,CASTABLE,FOLLOW_CASTABLE_in_p_CastableExpr5502); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    kc_tree = (XQDTCommonTree)adaptor.create(kc);
                    adaptor.addChild(root_0, kc_tree);
                    }
                    if ( state.backtracking==0 ) {
                      ak(kc);
                    }
                    ka=(CommonToken)match(input,AS,FOLLOW_AS_in_p_CastableExpr5508); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    ka_tree = (XQDTCommonTree)adaptor.create(ka);
                    adaptor.addChild(root_0, ka_tree);
                    }
                    if ( state.backtracking==0 ) {
                      ak(ka);
                    }
                    pushFollow(FOLLOW_p_SingleType_in_p_CastableExpr5512);
                    p_SingleType235=p_SingleType();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, p_SingleType235.getTree());

                    }
                    break;

            }


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (XQDTCommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (XQDTCommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "p_CastableExpr"

    public static class p_CastExpr_return extends ParserRuleReturnScope {
        XQDTCommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "p_CastExpr"
    // XQueryParser.g:604:1: p_CastExpr : p_UnaryExpr (kc= CAST ka= AS p_SingleType )? ;
    public final XQueryParser.p_CastExpr_return p_CastExpr() throws RecognitionException {
        XQueryParser.p_CastExpr_return retval = new XQueryParser.p_CastExpr_return();
        retval.start = input.LT(1);

        XQDTCommonTree root_0 = null;

        CommonToken kc=null;
        CommonToken ka=null;
        XQueryParser.p_UnaryExpr_return p_UnaryExpr236 = null;

        XQueryParser.p_SingleType_return p_SingleType237 = null;


        XQDTCommonTree kc_tree=null;
        XQDTCommonTree ka_tree=null;

        try {
            // XQueryParser.g:605:9: ( p_UnaryExpr (kc= CAST ka= AS p_SingleType )? )
            // XQueryParser.g:605:13: p_UnaryExpr (kc= CAST ka= AS p_SingleType )?
            {
            root_0 = (XQDTCommonTree)adaptor.nil();

            pushFollow(FOLLOW_p_UnaryExpr_in_p_CastExpr5551);
            p_UnaryExpr236=p_UnaryExpr();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, p_UnaryExpr236.getTree());
            // XQueryParser.g:605:25: (kc= CAST ka= AS p_SingleType )?
            int alt101=2;
            int LA101_0 = input.LA(1);

            if ( (LA101_0==CAST) ) {
                alt101=1;
            }
            switch (alt101) {
                case 1 :
                    // XQueryParser.g:605:27: kc= CAST ka= AS p_SingleType
                    {
                    kc=(CommonToken)match(input,CAST,FOLLOW_CAST_in_p_CastExpr5557); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    kc_tree = (XQDTCommonTree)adaptor.create(kc);
                    adaptor.addChild(root_0, kc_tree);
                    }
                    if ( state.backtracking==0 ) {
                      ak(kc);
                    }
                    ka=(CommonToken)match(input,AS,FOLLOW_AS_in_p_CastExpr5563); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    ka_tree = (XQDTCommonTree)adaptor.create(ka);
                    adaptor.addChild(root_0, ka_tree);
                    }
                    if ( state.backtracking==0 ) {
                      ak(ka);
                    }
                    pushFollow(FOLLOW_p_SingleType_in_p_CastExpr5567);
                    p_SingleType237=p_SingleType();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, p_SingleType237.getTree());

                    }
                    break;

            }


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (XQDTCommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (XQDTCommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "p_CastExpr"

    public static class p_UnaryExpr_return extends ParserRuleReturnScope {
        XQDTCommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "p_UnaryExpr"
    // XQueryParser.g:609:1: p_UnaryExpr : ( PLUS | MINUS )* p_ValueExpr -> ^( UnaryExpr ( PLUS )* p_ValueExpr ) ;
    public final XQueryParser.p_UnaryExpr_return p_UnaryExpr() throws RecognitionException {
        XQueryParser.p_UnaryExpr_return retval = new XQueryParser.p_UnaryExpr_return();
        retval.start = input.LT(1);

        XQDTCommonTree root_0 = null;

        CommonToken PLUS238=null;
        CommonToken MINUS239=null;
        XQueryParser.p_ValueExpr_return p_ValueExpr240 = null;


        XQDTCommonTree PLUS238_tree=null;
        XQDTCommonTree MINUS239_tree=null;
        RewriteRuleTokenStream stream_PLUS=new RewriteRuleTokenStream(adaptor,"token PLUS");
        RewriteRuleTokenStream stream_MINUS=new RewriteRuleTokenStream(adaptor,"token MINUS");
        RewriteRuleSubtreeStream stream_p_ValueExpr=new RewriteRuleSubtreeStream(adaptor,"rule p_ValueExpr");
        try {
            // XQueryParser.g:610:9: ( ( PLUS | MINUS )* p_ValueExpr -> ^( UnaryExpr ( PLUS )* p_ValueExpr ) )
            // XQueryParser.g:610:13: ( PLUS | MINUS )* p_ValueExpr
            {
            // XQueryParser.g:610:13: ( PLUS | MINUS )*
            loop102:
            do {
                int alt102=3;
                int LA102_0 = input.LA(1);

                if ( (LA102_0==PLUS) ) {
                    alt102=1;
                }
                else if ( (LA102_0==MINUS) ) {
                    alt102=2;
                }


                switch (alt102) {
            	case 1 :
            	    // XQueryParser.g:610:14: PLUS
            	    {
            	    PLUS238=(CommonToken)match(input,PLUS,FOLLOW_PLUS_in_p_UnaryExpr5599); if (state.failed) return retval; 
            	    if ( state.backtracking==0 ) stream_PLUS.add(PLUS238);


            	    }
            	    break;
            	case 2 :
            	    // XQueryParser.g:610:21: MINUS
            	    {
            	    MINUS239=(CommonToken)match(input,MINUS,FOLLOW_MINUS_in_p_UnaryExpr5603); if (state.failed) return retval; 
            	    if ( state.backtracking==0 ) stream_MINUS.add(MINUS239);


            	    }
            	    break;

            	default :
            	    break loop102;
                }
            } while (true);

            pushFollow(FOLLOW_p_ValueExpr_in_p_UnaryExpr5607);
            p_ValueExpr240=p_ValueExpr();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_p_ValueExpr.add(p_ValueExpr240.getTree());


            // AST REWRITE
            // elements: p_ValueExpr, PLUS
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (XQDTCommonTree)adaptor.nil();
            // 611:17: -> ^( UnaryExpr ( PLUS )* p_ValueExpr )
            {
                // XQueryParser.g:611:20: ^( UnaryExpr ( PLUS )* p_ValueExpr )
                {
                XQDTCommonTree root_1 = (XQDTCommonTree)adaptor.nil();
                root_1 = (XQDTCommonTree)adaptor.becomeRoot((XQDTCommonTree)adaptor.create(UnaryExpr, "UnaryExpr"), root_1);

                // XQueryParser.g:611:32: ( PLUS )*
                while ( stream_PLUS.hasNext() ) {
                    adaptor.addChild(root_1, stream_PLUS.nextNode());

                }
                stream_PLUS.reset();
                adaptor.addChild(root_1, stream_p_ValueExpr.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (XQDTCommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (XQDTCommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "p_UnaryExpr"

    public static class p_ValueExpr_return extends ParserRuleReturnScope {
        XQDTCommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "p_ValueExpr"
    // XQueryParser.g:618:1: p_ValueExpr : ( p_ValidateExpr | p_PathExpr | p_ExtensionExpr );
    public final XQueryParser.p_ValueExpr_return p_ValueExpr() throws RecognitionException {
        XQueryParser.p_ValueExpr_return retval = new XQueryParser.p_ValueExpr_return();
        retval.start = input.LT(1);

        XQDTCommonTree root_0 = null;

        XQueryParser.p_ValidateExpr_return p_ValidateExpr241 = null;

        XQueryParser.p_PathExpr_return p_PathExpr242 = null;

        XQueryParser.p_ExtensionExpr_return p_ExtensionExpr243 = null;



        try {
            // XQueryParser.g:619:9: ( p_ValidateExpr | p_PathExpr | p_ExtensionExpr )
            int alt103=3;
            alt103 = dfa103.predict(input);
            switch (alt103) {
                case 1 :
                    // XQueryParser.g:619:11: p_ValidateExpr
                    {
                    root_0 = (XQDTCommonTree)adaptor.nil();

                    pushFollow(FOLLOW_p_ValidateExpr_in_p_ValueExpr5663);
                    p_ValidateExpr241=p_ValidateExpr();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, p_ValidateExpr241.getTree());

                    }
                    break;
                case 2 :
                    // XQueryParser.g:620:11: p_PathExpr
                    {
                    root_0 = (XQDTCommonTree)adaptor.nil();

                    pushFollow(FOLLOW_p_PathExpr_in_p_ValueExpr5675);
                    p_PathExpr242=p_PathExpr();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, p_PathExpr242.getTree());

                    }
                    break;
                case 3 :
                    // XQueryParser.g:621:11: p_ExtensionExpr
                    {
                    root_0 = (XQDTCommonTree)adaptor.nil();

                    pushFollow(FOLLOW_p_ExtensionExpr_in_p_ValueExpr5687);
                    p_ExtensionExpr243=p_ExtensionExpr();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, p_ExtensionExpr243.getTree());

                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (XQDTCommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (XQDTCommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "p_ValueExpr"

    public static class p_GeneralComp_return extends ParserRuleReturnScope {
        XQDTCommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "p_GeneralComp"
    // XQueryParser.g:625:1: p_GeneralComp : ( EQUAL | NOTEQUAL | SMALLER | SMALLEREQ | GREATER | GREATEREQ );
    public final XQueryParser.p_GeneralComp_return p_GeneralComp() throws RecognitionException {
        XQueryParser.p_GeneralComp_return retval = new XQueryParser.p_GeneralComp_return();
        retval.start = input.LT(1);

        XQDTCommonTree root_0 = null;

        CommonToken set244=null;

        XQDTCommonTree set244_tree=null;

        try {
            // XQueryParser.g:626:9: ( EQUAL | NOTEQUAL | SMALLER | SMALLEREQ | GREATER | GREATEREQ )
            // XQueryParser.g:
            {
            root_0 = (XQDTCommonTree)adaptor.nil();

            set244=(CommonToken)input.LT(1);
            if ( input.LA(1)==EQUAL||input.LA(1)==NOTEQUAL||(input.LA(1)>=SMALLER && input.LA(1)<=GREATEREQ) ) {
                input.consume();
                if ( state.backtracking==0 ) adaptor.addChild(root_0, (XQDTCommonTree)adaptor.create(set244));
                state.errorRecovery=false;state.failed=false;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                MismatchedSetException mse = new MismatchedSetException(null,input);
                throw mse;
            }


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (XQDTCommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (XQDTCommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "p_GeneralComp"

    public static class p_ValueComp_return extends ParserRuleReturnScope {
        XQDTCommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "p_ValueComp"
    // XQueryParser.g:630:1: p_ValueComp : (k= EQ | k= NE | k= LT | k= LE | k= GT | k= GE ) ;
    public final XQueryParser.p_ValueComp_return p_ValueComp() throws RecognitionException {
        XQueryParser.p_ValueComp_return retval = new XQueryParser.p_ValueComp_return();
        retval.start = input.LT(1);

        XQDTCommonTree root_0 = null;

        CommonToken k=null;

        XQDTCommonTree k_tree=null;

        try {
            // XQueryParser.g:631:9: ( (k= EQ | k= NE | k= LT | k= LE | k= GT | k= GE ) )
            // XQueryParser.g:631:13: (k= EQ | k= NE | k= LT | k= LE | k= GT | k= GE )
            {
            root_0 = (XQDTCommonTree)adaptor.nil();

            // XQueryParser.g:631:13: (k= EQ | k= NE | k= LT | k= LE | k= GT | k= GE )
            int alt104=6;
            switch ( input.LA(1) ) {
            case EQ:
                {
                alt104=1;
                }
                break;
            case NE:
                {
                alt104=2;
                }
                break;
            case LT:
                {
                alt104=3;
                }
                break;
            case LE:
                {
                alt104=4;
                }
                break;
            case GT:
                {
                alt104=5;
                }
                break;
            case GE:
                {
                alt104=6;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 104, 0, input);

                throw nvae;
            }

            switch (alt104) {
                case 1 :
                    // XQueryParser.g:631:14: k= EQ
                    {
                    k=(CommonToken)match(input,EQ,FOLLOW_EQ_in_p_ValueComp5766); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    k_tree = (XQDTCommonTree)adaptor.create(k);
                    adaptor.addChild(root_0, k_tree);
                    }

                    }
                    break;
                case 2 :
                    // XQueryParser.g:631:21: k= NE
                    {
                    k=(CommonToken)match(input,NE,FOLLOW_NE_in_p_ValueComp5772); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    k_tree = (XQDTCommonTree)adaptor.create(k);
                    adaptor.addChild(root_0, k_tree);
                    }

                    }
                    break;
                case 3 :
                    // XQueryParser.g:631:28: k= LT
                    {
                    k=(CommonToken)match(input,LT,FOLLOW_LT_in_p_ValueComp5778); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    k_tree = (XQDTCommonTree)adaptor.create(k);
                    adaptor.addChild(root_0, k_tree);
                    }

                    }
                    break;
                case 4 :
                    // XQueryParser.g:631:35: k= LE
                    {
                    k=(CommonToken)match(input,LE,FOLLOW_LE_in_p_ValueComp5784); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    k_tree = (XQDTCommonTree)adaptor.create(k);
                    adaptor.addChild(root_0, k_tree);
                    }

                    }
                    break;
                case 5 :
                    // XQueryParser.g:631:42: k= GT
                    {
                    k=(CommonToken)match(input,GT,FOLLOW_GT_in_p_ValueComp5790); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    k_tree = (XQDTCommonTree)adaptor.create(k);
                    adaptor.addChild(root_0, k_tree);
                    }

                    }
                    break;
                case 6 :
                    // XQueryParser.g:631:49: k= GE
                    {
                    k=(CommonToken)match(input,GE,FOLLOW_GE_in_p_ValueComp5796); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    k_tree = (XQDTCommonTree)adaptor.create(k);
                    adaptor.addChild(root_0, k_tree);
                    }

                    }
                    break;

            }

            if ( state.backtracking==0 ) {
              ak(k);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (XQDTCommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (XQDTCommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "p_ValueComp"

    public static class p_NodeComp_return extends ParserRuleReturnScope {
        XQDTCommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "p_NodeComp"
    // XQueryParser.g:635:1: p_NodeComp : (ki= IS | SMALLER_SMALLER | GREATER_GREATER );
    public final XQueryParser.p_NodeComp_return p_NodeComp() throws RecognitionException {
        XQueryParser.p_NodeComp_return retval = new XQueryParser.p_NodeComp_return();
        retval.start = input.LT(1);

        XQDTCommonTree root_0 = null;

        CommonToken ki=null;
        CommonToken SMALLER_SMALLER245=null;
        CommonToken GREATER_GREATER246=null;

        XQDTCommonTree ki_tree=null;
        XQDTCommonTree SMALLER_SMALLER245_tree=null;
        XQDTCommonTree GREATER_GREATER246_tree=null;

        try {
            // XQueryParser.g:636:9: (ki= IS | SMALLER_SMALLER | GREATER_GREATER )
            int alt105=3;
            switch ( input.LA(1) ) {
            case IS:
                {
                alt105=1;
                }
                break;
            case SMALLER_SMALLER:
                {
                alt105=2;
                }
                break;
            case GREATER_GREATER:
                {
                alt105=3;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 105, 0, input);

                throw nvae;
            }

            switch (alt105) {
                case 1 :
                    // XQueryParser.g:636:13: ki= IS
                    {
                    root_0 = (XQDTCommonTree)adaptor.nil();

                    ki=(CommonToken)match(input,IS,FOLLOW_IS_in_p_NodeComp5829); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    ki_tree = (XQDTCommonTree)adaptor.create(ki);
                    adaptor.addChild(root_0, ki_tree);
                    }
                    if ( state.backtracking==0 ) {
                      ak(ki);
                    }

                    }
                    break;
                case 2 :
                    // XQueryParser.g:636:32: SMALLER_SMALLER
                    {
                    root_0 = (XQDTCommonTree)adaptor.nil();

                    SMALLER_SMALLER245=(CommonToken)match(input,SMALLER_SMALLER,FOLLOW_SMALLER_SMALLER_in_p_NodeComp5835); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    SMALLER_SMALLER245_tree = (XQDTCommonTree)adaptor.create(SMALLER_SMALLER245);
                    adaptor.addChild(root_0, SMALLER_SMALLER245_tree);
                    }

                    }
                    break;
                case 3 :
                    // XQueryParser.g:636:50: GREATER_GREATER
                    {
                    root_0 = (XQDTCommonTree)adaptor.nil();

                    GREATER_GREATER246=(CommonToken)match(input,GREATER_GREATER,FOLLOW_GREATER_GREATER_in_p_NodeComp5839); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    GREATER_GREATER246_tree = (XQDTCommonTree)adaptor.create(GREATER_GREATER246);
                    adaptor.addChild(root_0, GREATER_GREATER246_tree);
                    }

                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (XQDTCommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (XQDTCommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "p_NodeComp"

    public static class p_ValidateExpr_return extends ParserRuleReturnScope {
        XQDTCommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "p_ValidateExpr"
    // XQueryParser.g:640:1: p_ValidateExpr : kv= VALIDATE ( p_ValidationMode )? LBRACKET pm_Expr RBRACKET ;
    public final XQueryParser.p_ValidateExpr_return p_ValidateExpr() throws RecognitionException {
        XQueryParser.p_ValidateExpr_return retval = new XQueryParser.p_ValidateExpr_return();
        retval.start = input.LT(1);

        XQDTCommonTree root_0 = null;

        CommonToken kv=null;
        CommonToken LBRACKET248=null;
        CommonToken RBRACKET250=null;
        XQueryParser.p_ValidationMode_return p_ValidationMode247 = null;

        XQueryParser.pm_Expr_return pm_Expr249 = null;


        XQDTCommonTree kv_tree=null;
        XQDTCommonTree LBRACKET248_tree=null;
        XQDTCommonTree RBRACKET250_tree=null;

        try {
            // XQueryParser.g:641:9: (kv= VALIDATE ( p_ValidationMode )? LBRACKET pm_Expr RBRACKET )
            // XQueryParser.g:641:13: kv= VALIDATE ( p_ValidationMode )? LBRACKET pm_Expr RBRACKET
            {
            root_0 = (XQDTCommonTree)adaptor.nil();

            kv=(CommonToken)match(input,VALIDATE,FOLLOW_VALIDATE_in_p_ValidateExpr5869); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            kv_tree = (XQDTCommonTree)adaptor.create(kv);
            adaptor.addChild(root_0, kv_tree);
            }
            if ( state.backtracking==0 ) {
              ak(kv);
            }
            // XQueryParser.g:641:36: ( p_ValidationMode )?
            int alt106=2;
            int LA106_0 = input.LA(1);

            if ( (LA106_0==AS||LA106_0==LAX||LA106_0==STRICT) ) {
                alt106=1;
            }
            switch (alt106) {
                case 1 :
                    // XQueryParser.g:641:36: p_ValidationMode
                    {
                    pushFollow(FOLLOW_p_ValidationMode_in_p_ValidateExpr5873);
                    p_ValidationMode247=p_ValidationMode();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, p_ValidationMode247.getTree());

                    }
                    break;

            }

            LBRACKET248=(CommonToken)match(input,LBRACKET,FOLLOW_LBRACKET_in_p_ValidateExpr5876); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            LBRACKET248_tree = (XQDTCommonTree)adaptor.create(LBRACKET248);
            adaptor.addChild(root_0, LBRACKET248_tree);
            }
            pushFollow(FOLLOW_pm_Expr_in_p_ValidateExpr5878);
            pm_Expr249=pm_Expr();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, pm_Expr249.getTree());
            RBRACKET250=(CommonToken)match(input,RBRACKET,FOLLOW_RBRACKET_in_p_ValidateExpr5880); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            RBRACKET250_tree = (XQDTCommonTree)adaptor.create(RBRACKET250);
            adaptor.addChild(root_0, RBRACKET250_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (XQDTCommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (XQDTCommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "p_ValidateExpr"

    public static class p_ValidationMode_return extends ParserRuleReturnScope {
        XQDTCommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "p_ValidationMode"
    // XQueryParser.g:645:1: p_ValidationMode : (k= LAX | k= STRICT | (k= AS p_QName ) ) ;
    public final XQueryParser.p_ValidationMode_return p_ValidationMode() throws RecognitionException {
        XQueryParser.p_ValidationMode_return retval = new XQueryParser.p_ValidationMode_return();
        retval.start = input.LT(1);

        XQDTCommonTree root_0 = null;

        CommonToken k=null;
        XQueryParser.p_QName_return p_QName251 = null;


        XQDTCommonTree k_tree=null;

        try {
            // XQueryParser.g:646:9: ( (k= LAX | k= STRICT | (k= AS p_QName ) ) )
            // XQueryParser.g:646:13: (k= LAX | k= STRICT | (k= AS p_QName ) )
            {
            root_0 = (XQDTCommonTree)adaptor.nil();

            // XQueryParser.g:646:13: (k= LAX | k= STRICT | (k= AS p_QName ) )
            int alt107=3;
            switch ( input.LA(1) ) {
            case LAX:
                {
                alt107=1;
                }
                break;
            case STRICT:
                {
                alt107=2;
                }
                break;
            case AS:
                {
                alt107=3;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 107, 0, input);

                throw nvae;
            }

            switch (alt107) {
                case 1 :
                    // XQueryParser.g:646:14: k= LAX
                    {
                    k=(CommonToken)match(input,LAX,FOLLOW_LAX_in_p_ValidationMode5911); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    k_tree = (XQDTCommonTree)adaptor.create(k);
                    adaptor.addChild(root_0, k_tree);
                    }

                    }
                    break;
                case 2 :
                    // XQueryParser.g:646:22: k= STRICT
                    {
                    k=(CommonToken)match(input,STRICT,FOLLOW_STRICT_in_p_ValidationMode5917); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    k_tree = (XQDTCommonTree)adaptor.create(k);
                    adaptor.addChild(root_0, k_tree);
                    }

                    }
                    break;
                case 3 :
                    // XQueryParser.g:646:33: (k= AS p_QName )
                    {
                    // XQueryParser.g:646:33: (k= AS p_QName )
                    // XQueryParser.g:646:34: k= AS p_QName
                    {
                    k=(CommonToken)match(input,AS,FOLLOW_AS_in_p_ValidationMode5924); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    k_tree = (XQDTCommonTree)adaptor.create(k);
                    adaptor.addChild(root_0, k_tree);
                    }
                    pushFollow(FOLLOW_p_QName_in_p_ValidationMode5926);
                    p_QName251=p_QName();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, p_QName251.getTree());

                    }


                    }
                    break;

            }

            if ( state.backtracking==0 ) {
              ak(k);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (XQDTCommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (XQDTCommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "p_ValidationMode"

    public static class p_ExtensionExpr_return extends ParserRuleReturnScope {
        XQDTCommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "p_ExtensionExpr"
    // XQueryParser.g:650:1: p_ExtensionExpr : ( L_Pragma )+ LBRACKET ( pm_Expr )? RBRACKET ;
    public final XQueryParser.p_ExtensionExpr_return p_ExtensionExpr() throws RecognitionException {
        XQueryParser.p_ExtensionExpr_return retval = new XQueryParser.p_ExtensionExpr_return();
        retval.start = input.LT(1);

        XQDTCommonTree root_0 = null;

        CommonToken L_Pragma252=null;
        CommonToken LBRACKET253=null;
        CommonToken RBRACKET255=null;
        XQueryParser.pm_Expr_return pm_Expr254 = null;


        XQDTCommonTree L_Pragma252_tree=null;
        XQDTCommonTree LBRACKET253_tree=null;
        XQDTCommonTree RBRACKET255_tree=null;

        try {
            // XQueryParser.g:651:9: ( ( L_Pragma )+ LBRACKET ( pm_Expr )? RBRACKET )
            // XQueryParser.g:651:13: ( L_Pragma )+ LBRACKET ( pm_Expr )? RBRACKET
            {
            root_0 = (XQDTCommonTree)adaptor.nil();

            // XQueryParser.g:651:13: ( L_Pragma )+
            int cnt108=0;
            loop108:
            do {
                int alt108=2;
                int LA108_0 = input.LA(1);

                if ( (LA108_0==L_Pragma) ) {
                    alt108=1;
                }


                switch (alt108) {
            	case 1 :
            	    // XQueryParser.g:651:13: L_Pragma
            	    {
            	    L_Pragma252=(CommonToken)match(input,L_Pragma,FOLLOW_L_Pragma_in_p_ExtensionExpr5958); if (state.failed) return retval;
            	    if ( state.backtracking==0 ) {
            	    L_Pragma252_tree = (XQDTCommonTree)adaptor.create(L_Pragma252);
            	    adaptor.addChild(root_0, L_Pragma252_tree);
            	    }

            	    }
            	    break;

            	default :
            	    if ( cnt108 >= 1 ) break loop108;
            	    if (state.backtracking>0) {state.failed=true; return retval;}
                        EarlyExitException eee =
                            new EarlyExitException(108, input);
                        throw eee;
                }
                cnt108++;
            } while (true);

            LBRACKET253=(CommonToken)match(input,LBRACKET,FOLLOW_LBRACKET_in_p_ExtensionExpr5961); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            LBRACKET253_tree = (XQDTCommonTree)adaptor.create(LBRACKET253);
            adaptor.addChild(root_0, LBRACKET253_tree);
            }
            // XQueryParser.g:651:32: ( pm_Expr )?
            int alt109=2;
            int LA109_0 = input.LA(1);

            if ( ((LA109_0>=ANCESTOR && LA109_0<=EXIT)||(LA109_0>=SEQUENTIAL && LA109_0<=LPAREN)||LA109_0==DOLLAR||(LA109_0>=STAR && LA109_0<=SMALLER)||(LA109_0>=SLASH && LA109_0<=DOT_DOT)||LA109_0==ATTR_SIGN||(LA109_0>=APOS && LA109_0<=QUOT)||LA109_0==L_NCName||(LA109_0>=L_Pragma && LA109_0<=L_DoubleLiteral)) ) {
                alt109=1;
            }
            switch (alt109) {
                case 1 :
                    // XQueryParser.g:651:32: pm_Expr
                    {
                    pushFollow(FOLLOW_pm_Expr_in_p_ExtensionExpr5963);
                    pm_Expr254=pm_Expr();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, pm_Expr254.getTree());

                    }
                    break;

            }

            RBRACKET255=(CommonToken)match(input,RBRACKET,FOLLOW_RBRACKET_in_p_ExtensionExpr5966); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            RBRACKET255_tree = (XQDTCommonTree)adaptor.create(RBRACKET255);
            adaptor.addChild(root_0, RBRACKET255_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (XQDTCommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (XQDTCommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "p_ExtensionExpr"

    public static class p_PathExpr_return extends ParserRuleReturnScope {
        XQDTCommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "p_PathExpr"
    // XQueryParser.g:662:1: p_PathExpr : ( ( SLASH p_RelativePathExpr )=> ( SLASH p_RelativePathExpr ) | SLASH | SLASH_SLASH p_RelativePathExpr | p_RelativePathExpr );
    public final XQueryParser.p_PathExpr_return p_PathExpr() throws RecognitionException {
        XQueryParser.p_PathExpr_return retval = new XQueryParser.p_PathExpr_return();
        retval.start = input.LT(1);

        XQDTCommonTree root_0 = null;

        CommonToken SLASH256=null;
        CommonToken SLASH258=null;
        CommonToken SLASH_SLASH259=null;
        XQueryParser.p_RelativePathExpr_return p_RelativePathExpr257 = null;

        XQueryParser.p_RelativePathExpr_return p_RelativePathExpr260 = null;

        XQueryParser.p_RelativePathExpr_return p_RelativePathExpr261 = null;


        XQDTCommonTree SLASH256_tree=null;
        XQDTCommonTree SLASH258_tree=null;
        XQDTCommonTree SLASH_SLASH259_tree=null;

        try {
            // XQueryParser.g:663:9: ( ( SLASH p_RelativePathExpr )=> ( SLASH p_RelativePathExpr ) | SLASH | SLASH_SLASH p_RelativePathExpr | p_RelativePathExpr )
            int alt110=4;
            alt110 = dfa110.predict(input);
            switch (alt110) {
                case 1 :
                    // XQueryParser.g:663:11: ( SLASH p_RelativePathExpr )=> ( SLASH p_RelativePathExpr )
                    {
                    root_0 = (XQDTCommonTree)adaptor.nil();

                    // XQueryParser.g:663:41: ( SLASH p_RelativePathExpr )
                    // XQueryParser.g:663:42: SLASH p_RelativePathExpr
                    {
                    SLASH256=(CommonToken)match(input,SLASH,FOLLOW_SLASH_in_p_PathExpr6008); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    SLASH256_tree = (XQDTCommonTree)adaptor.create(SLASH256);
                    adaptor.addChild(root_0, SLASH256_tree);
                    }
                    pushFollow(FOLLOW_p_RelativePathExpr_in_p_PathExpr6010);
                    p_RelativePathExpr257=p_RelativePathExpr();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, p_RelativePathExpr257.getTree());

                    }


                    }
                    break;
                case 2 :
                    // XQueryParser.g:664:11: SLASH
                    {
                    root_0 = (XQDTCommonTree)adaptor.nil();

                    SLASH258=(CommonToken)match(input,SLASH,FOLLOW_SLASH_in_p_PathExpr6023); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    SLASH258_tree = (XQDTCommonTree)adaptor.create(SLASH258);
                    adaptor.addChild(root_0, SLASH258_tree);
                    }

                    }
                    break;
                case 3 :
                    // XQueryParser.g:665:11: SLASH_SLASH p_RelativePathExpr
                    {
                    root_0 = (XQDTCommonTree)adaptor.nil();

                    SLASH_SLASH259=(CommonToken)match(input,SLASH_SLASH,FOLLOW_SLASH_SLASH_in_p_PathExpr6035); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    SLASH_SLASH259_tree = (XQDTCommonTree)adaptor.create(SLASH_SLASH259);
                    adaptor.addChild(root_0, SLASH_SLASH259_tree);
                    }
                    pushFollow(FOLLOW_p_RelativePathExpr_in_p_PathExpr6037);
                    p_RelativePathExpr260=p_RelativePathExpr();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, p_RelativePathExpr260.getTree());

                    }
                    break;
                case 4 :
                    // XQueryParser.g:666:11: p_RelativePathExpr
                    {
                    root_0 = (XQDTCommonTree)adaptor.nil();

                    pushFollow(FOLLOW_p_RelativePathExpr_in_p_PathExpr6049);
                    p_RelativePathExpr261=p_RelativePathExpr();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, p_RelativePathExpr261.getTree());

                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (XQDTCommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (XQDTCommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "p_PathExpr"

    public static class p_RelativePathExpr_return extends ParserRuleReturnScope {
        XQDTCommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "p_RelativePathExpr"
    // XQueryParser.g:670:1: p_RelativePathExpr : p_StepExpr ( ( SLASH | SLASH_SLASH ) p_StepExpr )* ;
    public final XQueryParser.p_RelativePathExpr_return p_RelativePathExpr() throws RecognitionException {
        XQueryParser.p_RelativePathExpr_return retval = new XQueryParser.p_RelativePathExpr_return();
        retval.start = input.LT(1);

        XQDTCommonTree root_0 = null;

        CommonToken set263=null;
        XQueryParser.p_StepExpr_return p_StepExpr262 = null;

        XQueryParser.p_StepExpr_return p_StepExpr264 = null;


        XQDTCommonTree set263_tree=null;

        try {
            // XQueryParser.g:671:9: ( p_StepExpr ( ( SLASH | SLASH_SLASH ) p_StepExpr )* )
            // XQueryParser.g:671:11: p_StepExpr ( ( SLASH | SLASH_SLASH ) p_StepExpr )*
            {
            root_0 = (XQDTCommonTree)adaptor.nil();

            pushFollow(FOLLOW_p_StepExpr_in_p_RelativePathExpr6077);
            p_StepExpr262=p_StepExpr();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, p_StepExpr262.getTree());
            // XQueryParser.g:671:22: ( ( SLASH | SLASH_SLASH ) p_StepExpr )*
            loop111:
            do {
                int alt111=2;
                int LA111_0 = input.LA(1);

                if ( ((LA111_0>=SLASH && LA111_0<=SLASH_SLASH)) ) {
                    alt111=1;
                }


                switch (alt111) {
            	case 1 :
            	    // XQueryParser.g:671:23: ( SLASH | SLASH_SLASH ) p_StepExpr
            	    {
            	    set263=(CommonToken)input.LT(1);
            	    if ( (input.LA(1)>=SLASH && input.LA(1)<=SLASH_SLASH) ) {
            	        input.consume();
            	        if ( state.backtracking==0 ) adaptor.addChild(root_0, (XQDTCommonTree)adaptor.create(set263));
            	        state.errorRecovery=false;state.failed=false;
            	    }
            	    else {
            	        if (state.backtracking>0) {state.failed=true; return retval;}
            	        MismatchedSetException mse = new MismatchedSetException(null,input);
            	        throw mse;
            	    }

            	    pushFollow(FOLLOW_p_StepExpr_in_p_RelativePathExpr6088);
            	    p_StepExpr264=p_StepExpr();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, p_StepExpr264.getTree());

            	    }
            	    break;

            	default :
            	    break loop111;
                }
            } while (true);


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (XQDTCommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (XQDTCommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "p_RelativePathExpr"

    public static class p_StepExpr_return extends ParserRuleReturnScope {
        XQDTCommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "p_StepExpr"
    // XQueryParser.g:675:1: p_StepExpr : ( p_AxisStep | p_FilterExpr );
    public final XQueryParser.p_StepExpr_return p_StepExpr() throws RecognitionException {
        XQueryParser.p_StepExpr_return retval = new XQueryParser.p_StepExpr_return();
        retval.start = input.LT(1);

        XQDTCommonTree root_0 = null;

        XQueryParser.p_AxisStep_return p_AxisStep265 = null;

        XQueryParser.p_FilterExpr_return p_FilterExpr266 = null;



        try {
            // XQueryParser.g:676:9: ( p_AxisStep | p_FilterExpr )
            int alt112=2;
            alt112 = dfa112.predict(input);
            switch (alt112) {
                case 1 :
                    // XQueryParser.g:676:11: p_AxisStep
                    {
                    root_0 = (XQDTCommonTree)adaptor.nil();

                    pushFollow(FOLLOW_p_AxisStep_in_p_StepExpr6116);
                    p_AxisStep265=p_AxisStep();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, p_AxisStep265.getTree());

                    }
                    break;
                case 2 :
                    // XQueryParser.g:677:11: p_FilterExpr
                    {
                    root_0 = (XQDTCommonTree)adaptor.nil();

                    pushFollow(FOLLOW_p_FilterExpr_in_p_StepExpr6128);
                    p_FilterExpr266=p_FilterExpr();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, p_FilterExpr266.getTree());

                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (XQDTCommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (XQDTCommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "p_StepExpr"

    public static class p_AxisStep_return extends ParserRuleReturnScope {
        XQDTCommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "p_AxisStep"
    // XQueryParser.g:681:1: p_AxisStep : ( p_ReverseStep | p_ForwardStep ) p_PredicateList ;
    public final XQueryParser.p_AxisStep_return p_AxisStep() throws RecognitionException {
        XQueryParser.p_AxisStep_return retval = new XQueryParser.p_AxisStep_return();
        retval.start = input.LT(1);

        XQDTCommonTree root_0 = null;

        XQueryParser.p_ReverseStep_return p_ReverseStep267 = null;

        XQueryParser.p_ForwardStep_return p_ForwardStep268 = null;

        XQueryParser.p_PredicateList_return p_PredicateList269 = null;



        try {
            // XQueryParser.g:682:9: ( ( p_ReverseStep | p_ForwardStep ) p_PredicateList )
            // XQueryParser.g:682:11: ( p_ReverseStep | p_ForwardStep ) p_PredicateList
            {
            root_0 = (XQDTCommonTree)adaptor.nil();

            // XQueryParser.g:682:11: ( p_ReverseStep | p_ForwardStep )
            int alt113=2;
            switch ( input.LA(1) ) {
            case PARENT:
                {
                int LA113_1 = input.LA(2);

                if ( (LA113_1==COLON_COLON) ) {
                    alt113=1;
                }
                else if ( (LA113_1==EOF||(LA113_1>=AND && LA113_1<=ASCENDING)||(LA113_1>=CASE && LA113_1<=CASTABLE)||LA113_1==COLLATION||LA113_1==DEFAULT||(LA113_1>=DESCENDING && LA113_1<=DIV)||(LA113_1>=ELSE && LA113_1<=EMPTY)||LA113_1==EQ||LA113_1==EXCEPT||LA113_1==FOR||LA113_1==GE||(LA113_1>=GT && LA113_1<=IDIV)||(LA113_1>=INSTANCE && LA113_1<=IS)||LA113_1==LE||(LA113_1>=LET && LA113_1<=MOD)||LA113_1==NE||(LA113_1>=OR && LA113_1<=ORDER)||(LA113_1>=RETURN && LA113_1<=SATISFIES)||LA113_1==STABLE||(LA113_1>=TO && LA113_1<=TREAT)||LA113_1==UNION||LA113_1==WHERE||LA113_1==COUNT||(LA113_1>=END && LA113_1<=GROUP)||LA113_1==ONLY||LA113_1==START||(LA113_1>=AFTER && LA113_1<=BEFORE)||LA113_1==INTO||LA113_1==MODIFY||LA113_1==WITH||LA113_1==RPAREN||(LA113_1>=RBRACKET && LA113_1<=EQUAL)||LA113_1==NOTEQUAL||LA113_1==COMMA||(LA113_1>=STAR && LA113_1<=SLASH_SLASH)||LA113_1==COLON||(LA113_1>=SEMICOLON && LA113_1<=VBAR)) ) {
                    alt113=2;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 113, 1, input);

                    throw nvae;
                }
                }
                break;
            case ANCESTOR:
                {
                int LA113_2 = input.LA(2);

                if ( (LA113_2==COLON_COLON) ) {
                    alt113=1;
                }
                else if ( (LA113_2==EOF||(LA113_2>=AND && LA113_2<=ASCENDING)||(LA113_2>=CASE && LA113_2<=CASTABLE)||LA113_2==COLLATION||LA113_2==DEFAULT||(LA113_2>=DESCENDING && LA113_2<=DIV)||(LA113_2>=ELSE && LA113_2<=EMPTY)||LA113_2==EQ||LA113_2==EXCEPT||LA113_2==FOR||LA113_2==GE||(LA113_2>=GT && LA113_2<=IDIV)||(LA113_2>=INSTANCE && LA113_2<=IS)||LA113_2==LE||(LA113_2>=LET && LA113_2<=MOD)||LA113_2==NE||(LA113_2>=OR && LA113_2<=ORDER)||(LA113_2>=RETURN && LA113_2<=SATISFIES)||LA113_2==STABLE||(LA113_2>=TO && LA113_2<=TREAT)||LA113_2==UNION||LA113_2==WHERE||LA113_2==COUNT||(LA113_2>=END && LA113_2<=GROUP)||LA113_2==ONLY||LA113_2==START||(LA113_2>=AFTER && LA113_2<=BEFORE)||LA113_2==INTO||LA113_2==MODIFY||LA113_2==WITH||LA113_2==RPAREN||(LA113_2>=RBRACKET && LA113_2<=EQUAL)||LA113_2==NOTEQUAL||LA113_2==COMMA||(LA113_2>=STAR && LA113_2<=SLASH_SLASH)||LA113_2==COLON||(LA113_2>=SEMICOLON && LA113_2<=VBAR)) ) {
                    alt113=2;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 113, 2, input);

                    throw nvae;
                }
                }
                break;
            case PRECEDING_SIBLING:
                {
                int LA113_3 = input.LA(2);

                if ( (LA113_3==COLON_COLON) ) {
                    alt113=1;
                }
                else if ( (LA113_3==EOF||(LA113_3>=AND && LA113_3<=ASCENDING)||(LA113_3>=CASE && LA113_3<=CASTABLE)||LA113_3==COLLATION||LA113_3==DEFAULT||(LA113_3>=DESCENDING && LA113_3<=DIV)||(LA113_3>=ELSE && LA113_3<=EMPTY)||LA113_3==EQ||LA113_3==EXCEPT||LA113_3==FOR||LA113_3==GE||(LA113_3>=GT && LA113_3<=IDIV)||(LA113_3>=INSTANCE && LA113_3<=IS)||LA113_3==LE||(LA113_3>=LET && LA113_3<=MOD)||LA113_3==NE||(LA113_3>=OR && LA113_3<=ORDER)||(LA113_3>=RETURN && LA113_3<=SATISFIES)||LA113_3==STABLE||(LA113_3>=TO && LA113_3<=TREAT)||LA113_3==UNION||LA113_3==WHERE||LA113_3==COUNT||(LA113_3>=END && LA113_3<=GROUP)||LA113_3==ONLY||LA113_3==START||(LA113_3>=AFTER && LA113_3<=BEFORE)||LA113_3==INTO||LA113_3==MODIFY||LA113_3==WITH||LA113_3==RPAREN||(LA113_3>=RBRACKET && LA113_3<=EQUAL)||LA113_3==NOTEQUAL||LA113_3==COMMA||(LA113_3>=STAR && LA113_3<=SLASH_SLASH)||LA113_3==COLON||(LA113_3>=SEMICOLON && LA113_3<=VBAR)) ) {
                    alt113=2;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 113, 3, input);

                    throw nvae;
                }
                }
                break;
            case PRECEDING:
                {
                int LA113_4 = input.LA(2);

                if ( (LA113_4==COLON_COLON) ) {
                    alt113=1;
                }
                else if ( (LA113_4==EOF||(LA113_4>=AND && LA113_4<=ASCENDING)||(LA113_4>=CASE && LA113_4<=CASTABLE)||LA113_4==COLLATION||LA113_4==DEFAULT||(LA113_4>=DESCENDING && LA113_4<=DIV)||(LA113_4>=ELSE && LA113_4<=EMPTY)||LA113_4==EQ||LA113_4==EXCEPT||LA113_4==FOR||LA113_4==GE||(LA113_4>=GT && LA113_4<=IDIV)||(LA113_4>=INSTANCE && LA113_4<=IS)||LA113_4==LE||(LA113_4>=LET && LA113_4<=MOD)||LA113_4==NE||(LA113_4>=OR && LA113_4<=ORDER)||(LA113_4>=RETURN && LA113_4<=SATISFIES)||LA113_4==STABLE||(LA113_4>=TO && LA113_4<=TREAT)||LA113_4==UNION||LA113_4==WHERE||LA113_4==COUNT||(LA113_4>=END && LA113_4<=GROUP)||LA113_4==ONLY||LA113_4==START||(LA113_4>=AFTER && LA113_4<=BEFORE)||LA113_4==INTO||LA113_4==MODIFY||LA113_4==WITH||LA113_4==RPAREN||(LA113_4>=RBRACKET && LA113_4<=EQUAL)||LA113_4==NOTEQUAL||LA113_4==COMMA||(LA113_4>=STAR && LA113_4<=SLASH_SLASH)||LA113_4==COLON||(LA113_4>=SEMICOLON && LA113_4<=VBAR)) ) {
                    alt113=2;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 113, 4, input);

                    throw nvae;
                }
                }
                break;
            case ANCESTOR_OR_SELF:
                {
                int LA113_5 = input.LA(2);

                if ( (LA113_5==COLON_COLON) ) {
                    alt113=1;
                }
                else if ( (LA113_5==EOF||(LA113_5>=AND && LA113_5<=ASCENDING)||(LA113_5>=CASE && LA113_5<=CASTABLE)||LA113_5==COLLATION||LA113_5==DEFAULT||(LA113_5>=DESCENDING && LA113_5<=DIV)||(LA113_5>=ELSE && LA113_5<=EMPTY)||LA113_5==EQ||LA113_5==EXCEPT||LA113_5==FOR||LA113_5==GE||(LA113_5>=GT && LA113_5<=IDIV)||(LA113_5>=INSTANCE && LA113_5<=IS)||LA113_5==LE||(LA113_5>=LET && LA113_5<=MOD)||LA113_5==NE||(LA113_5>=OR && LA113_5<=ORDER)||(LA113_5>=RETURN && LA113_5<=SATISFIES)||LA113_5==STABLE||(LA113_5>=TO && LA113_5<=TREAT)||LA113_5==UNION||LA113_5==WHERE||LA113_5==COUNT||(LA113_5>=END && LA113_5<=GROUP)||LA113_5==ONLY||LA113_5==START||(LA113_5>=AFTER && LA113_5<=BEFORE)||LA113_5==INTO||LA113_5==MODIFY||LA113_5==WITH||LA113_5==RPAREN||(LA113_5>=RBRACKET && LA113_5<=EQUAL)||LA113_5==NOTEQUAL||LA113_5==COMMA||(LA113_5>=STAR && LA113_5<=SLASH_SLASH)||LA113_5==COLON||(LA113_5>=SEMICOLON && LA113_5<=VBAR)) ) {
                    alt113=2;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 113, 5, input);

                    throw nvae;
                }
                }
                break;
            case DOT_DOT:
                {
                alt113=1;
                }
                break;
            case AND:
            case AS:
            case ASCENDING:
            case AT:
            case ATTRIBUTE:
            case BASE_URI:
            case BOUNDARY_SPACE:
            case BY:
            case CASE:
            case CAST:
            case CASTABLE:
            case CHILD:
            case COLLATION:
            case COMMENT:
            case CONSTRUCTION:
            case COPY_NAMESPACES:
            case DECLARE:
            case DEFAULT:
            case DESCENDANT:
            case DESCENDANT_OR_SELF:
            case DESCENDING:
            case DIV:
            case DOCUMENT:
            case DOCUMENT_NODE:
            case ELEMENT:
            case ELSE:
            case EMPTY:
            case EMPTY_SEQUENCE:
            case ENCODING:
            case EQ:
            case EVERY:
            case EXCEPT:
            case EXTERNAL:
            case FOLLOWING:
            case FOLLOWING_SIBLING:
            case FOR:
            case FUNCTION:
            case GE:
            case GREATEST:
            case GT:
            case IDIV:
            case IF:
            case IMPORT:
            case IN:
            case INHERIT:
            case INSTANCE:
            case INTERSECT:
            case IS:
            case ITEM:
            case LAX:
            case LE:
            case LEAST:
            case LET:
            case LT:
            case MOD:
            case MODULE:
            case NAMESPACE:
            case NE:
            case NO_INHERIT:
            case NO_PRESERVE:
            case NODE:
            case OF:
            case OPTION:
            case OR:
            case ORDER:
            case ORDERED:
            case ORDERING:
            case PRESERVE:
            case PROCESSING_INSTRUCTION:
            case RETURN:
            case SATISFIES:
            case SCHEMA:
            case SCHEMA_ATTRIBUTE:
            case SCHEMA_ELEMENT:
            case SELF:
            case SOME:
            case STABLE:
            case STRICT:
            case STRIP:
            case TEXT:
            case THEN:
            case TO:
            case TREAT:
            case TYPESWITCH:
            case UNION:
            case UNORDERED:
            case VALIDATE:
            case VARIABLE:
            case VERSION:
            case WHERE:
            case XQUERY:
            case CATCH:
            case CONTEXT:
            case COUNT:
            case DECIMAL_FORMAT:
            case DECIMAL_SEPARATOR:
            case DIGIT:
            case END:
            case GROUP:
            case GROUPING_SEPARATOR:
            case INFINITY:
            case MINUS_SIGN:
            case NAMESPACE_NODE:
            case NAN:
            case NEXT:
            case ONLY:
            case OUTER:
            case PATTERN_SEPARATOR:
            case PERCENT:
            case PER_MILLE:
            case PREVIOUS:
            case SLIDING:
            case START:
            case TRY:
            case TUMBLING:
            case WHEN:
            case WINDOW:
            case ZERO_DIGIT:
            case AFTER:
            case BEFORE:
            case COPY:
            case DELETE:
            case FIRST:
            case INSERT:
            case INTO:
            case LAST:
            case MODIFY:
            case NODES:
            case RENAME:
            case REPLACE:
            case REVALIDATION:
            case SKIP:
            case UPDATING:
            case VALUE:
            case WITH:
            case BLOCK:
            case CONSTANT:
            case EXIT:
            case SEQUENTIAL:
            case SET:
            case SIMPLE:
            case WHILE:
            case EVAL:
            case USING:
            case BINARY:
            case PRIVATE:
            case AMP_ER:
            case APOS_ER:
            case QUOT_ER:
            case STAR:
            case ATTR_SIGN:
            case L_NCName:
                {
                alt113=2;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 113, 0, input);

                throw nvae;
            }

            switch (alt113) {
                case 1 :
                    // XQueryParser.g:682:12: p_ReverseStep
                    {
                    pushFollow(FOLLOW_p_ReverseStep_in_p_AxisStep6155);
                    p_ReverseStep267=p_ReverseStep();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, p_ReverseStep267.getTree());

                    }
                    break;
                case 2 :
                    // XQueryParser.g:682:28: p_ForwardStep
                    {
                    pushFollow(FOLLOW_p_ForwardStep_in_p_AxisStep6159);
                    p_ForwardStep268=p_ForwardStep();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, p_ForwardStep268.getTree());

                    }
                    break;

            }

            pushFollow(FOLLOW_p_PredicateList_in_p_AxisStep6162);
            p_PredicateList269=p_PredicateList();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, p_PredicateList269.getTree());

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (XQDTCommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (XQDTCommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "p_AxisStep"

    public static class p_ForwardStep_return extends ParserRuleReturnScope {
        XQDTCommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "p_ForwardStep"
    // XQueryParser.g:686:1: p_ForwardStep : ( ( p_ForwardAxis p_NodeTest ) | p_AbbrevForwardStep );
    public final XQueryParser.p_ForwardStep_return p_ForwardStep() throws RecognitionException {
        XQueryParser.p_ForwardStep_return retval = new XQueryParser.p_ForwardStep_return();
        retval.start = input.LT(1);

        XQDTCommonTree root_0 = null;

        XQueryParser.p_ForwardAxis_return p_ForwardAxis270 = null;

        XQueryParser.p_NodeTest_return p_NodeTest271 = null;

        XQueryParser.p_AbbrevForwardStep_return p_AbbrevForwardStep272 = null;



        try {
            // XQueryParser.g:687:9: ( ( p_ForwardAxis p_NodeTest ) | p_AbbrevForwardStep )
            int alt114=2;
            alt114 = dfa114.predict(input);
            switch (alt114) {
                case 1 :
                    // XQueryParser.g:687:11: ( p_ForwardAxis p_NodeTest )
                    {
                    root_0 = (XQDTCommonTree)adaptor.nil();

                    // XQueryParser.g:687:11: ( p_ForwardAxis p_NodeTest )
                    // XQueryParser.g:687:12: p_ForwardAxis p_NodeTest
                    {
                    pushFollow(FOLLOW_p_ForwardAxis_in_p_ForwardStep6189);
                    p_ForwardAxis270=p_ForwardAxis();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, p_ForwardAxis270.getTree());
                    pushFollow(FOLLOW_p_NodeTest_in_p_ForwardStep6191);
                    p_NodeTest271=p_NodeTest();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, p_NodeTest271.getTree());

                    }


                    }
                    break;
                case 2 :
                    // XQueryParser.g:687:40: p_AbbrevForwardStep
                    {
                    root_0 = (XQDTCommonTree)adaptor.nil();

                    pushFollow(FOLLOW_p_AbbrevForwardStep_in_p_ForwardStep6196);
                    p_AbbrevForwardStep272=p_AbbrevForwardStep();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, p_AbbrevForwardStep272.getTree());

                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (XQDTCommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (XQDTCommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "p_ForwardStep"

    public static class p_ForwardAxis_return extends ParserRuleReturnScope {
        XQDTCommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "p_ForwardAxis"
    // XQueryParser.g:691:1: p_ForwardAxis : ( CHILD COLON_COLON | DESCENDANT COLON_COLON | ATTRIBUTE COLON_COLON | SELF COLON_COLON | DESCENDANT_OR_SELF COLON_COLON | FOLLOWING_SIBLING COLON_COLON | FOLLOWING COLON_COLON );
    public final XQueryParser.p_ForwardAxis_return p_ForwardAxis() throws RecognitionException {
        XQueryParser.p_ForwardAxis_return retval = new XQueryParser.p_ForwardAxis_return();
        retval.start = input.LT(1);

        XQDTCommonTree root_0 = null;

        CommonToken CHILD273=null;
        CommonToken COLON_COLON274=null;
        CommonToken DESCENDANT275=null;
        CommonToken COLON_COLON276=null;
        CommonToken ATTRIBUTE277=null;
        CommonToken COLON_COLON278=null;
        CommonToken SELF279=null;
        CommonToken COLON_COLON280=null;
        CommonToken DESCENDANT_OR_SELF281=null;
        CommonToken COLON_COLON282=null;
        CommonToken FOLLOWING_SIBLING283=null;
        CommonToken COLON_COLON284=null;
        CommonToken FOLLOWING285=null;
        CommonToken COLON_COLON286=null;

        XQDTCommonTree CHILD273_tree=null;
        XQDTCommonTree COLON_COLON274_tree=null;
        XQDTCommonTree DESCENDANT275_tree=null;
        XQDTCommonTree COLON_COLON276_tree=null;
        XQDTCommonTree ATTRIBUTE277_tree=null;
        XQDTCommonTree COLON_COLON278_tree=null;
        XQDTCommonTree SELF279_tree=null;
        XQDTCommonTree COLON_COLON280_tree=null;
        XQDTCommonTree DESCENDANT_OR_SELF281_tree=null;
        XQDTCommonTree COLON_COLON282_tree=null;
        XQDTCommonTree FOLLOWING_SIBLING283_tree=null;
        XQDTCommonTree COLON_COLON284_tree=null;
        XQDTCommonTree FOLLOWING285_tree=null;
        XQDTCommonTree COLON_COLON286_tree=null;

        try {
            // XQueryParser.g:692:9: ( CHILD COLON_COLON | DESCENDANT COLON_COLON | ATTRIBUTE COLON_COLON | SELF COLON_COLON | DESCENDANT_OR_SELF COLON_COLON | FOLLOWING_SIBLING COLON_COLON | FOLLOWING COLON_COLON )
            int alt115=7;
            switch ( input.LA(1) ) {
            case CHILD:
                {
                alt115=1;
                }
                break;
            case DESCENDANT:
                {
                alt115=2;
                }
                break;
            case ATTRIBUTE:
                {
                alt115=3;
                }
                break;
            case SELF:
                {
                alt115=4;
                }
                break;
            case DESCENDANT_OR_SELF:
                {
                alt115=5;
                }
                break;
            case FOLLOWING_SIBLING:
                {
                alt115=6;
                }
                break;
            case FOLLOWING:
                {
                alt115=7;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 115, 0, input);

                throw nvae;
            }

            switch (alt115) {
                case 1 :
                    // XQueryParser.g:692:11: CHILD COLON_COLON
                    {
                    root_0 = (XQDTCommonTree)adaptor.nil();

                    CHILD273=(CommonToken)match(input,CHILD,FOLLOW_CHILD_in_p_ForwardAxis6222); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    CHILD273_tree = (XQDTCommonTree)adaptor.create(CHILD273);
                    adaptor.addChild(root_0, CHILD273_tree);
                    }
                    COLON_COLON274=(CommonToken)match(input,COLON_COLON,FOLLOW_COLON_COLON_in_p_ForwardAxis6224); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    COLON_COLON274_tree = (XQDTCommonTree)adaptor.create(COLON_COLON274);
                    adaptor.addChild(root_0, COLON_COLON274_tree);
                    }

                    }
                    break;
                case 2 :
                    // XQueryParser.g:693:11: DESCENDANT COLON_COLON
                    {
                    root_0 = (XQDTCommonTree)adaptor.nil();

                    DESCENDANT275=(CommonToken)match(input,DESCENDANT,FOLLOW_DESCENDANT_in_p_ForwardAxis6236); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    DESCENDANT275_tree = (XQDTCommonTree)adaptor.create(DESCENDANT275);
                    adaptor.addChild(root_0, DESCENDANT275_tree);
                    }
                    COLON_COLON276=(CommonToken)match(input,COLON_COLON,FOLLOW_COLON_COLON_in_p_ForwardAxis6238); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    COLON_COLON276_tree = (XQDTCommonTree)adaptor.create(COLON_COLON276);
                    adaptor.addChild(root_0, COLON_COLON276_tree);
                    }

                    }
                    break;
                case 3 :
                    // XQueryParser.g:694:11: ATTRIBUTE COLON_COLON
                    {
                    root_0 = (XQDTCommonTree)adaptor.nil();

                    ATTRIBUTE277=(CommonToken)match(input,ATTRIBUTE,FOLLOW_ATTRIBUTE_in_p_ForwardAxis6250); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    ATTRIBUTE277_tree = (XQDTCommonTree)adaptor.create(ATTRIBUTE277);
                    adaptor.addChild(root_0, ATTRIBUTE277_tree);
                    }
                    COLON_COLON278=(CommonToken)match(input,COLON_COLON,FOLLOW_COLON_COLON_in_p_ForwardAxis6252); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    COLON_COLON278_tree = (XQDTCommonTree)adaptor.create(COLON_COLON278);
                    adaptor.addChild(root_0, COLON_COLON278_tree);
                    }

                    }
                    break;
                case 4 :
                    // XQueryParser.g:695:11: SELF COLON_COLON
                    {
                    root_0 = (XQDTCommonTree)adaptor.nil();

                    SELF279=(CommonToken)match(input,SELF,FOLLOW_SELF_in_p_ForwardAxis6264); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    SELF279_tree = (XQDTCommonTree)adaptor.create(SELF279);
                    adaptor.addChild(root_0, SELF279_tree);
                    }
                    COLON_COLON280=(CommonToken)match(input,COLON_COLON,FOLLOW_COLON_COLON_in_p_ForwardAxis6266); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    COLON_COLON280_tree = (XQDTCommonTree)adaptor.create(COLON_COLON280);
                    adaptor.addChild(root_0, COLON_COLON280_tree);
                    }

                    }
                    break;
                case 5 :
                    // XQueryParser.g:696:11: DESCENDANT_OR_SELF COLON_COLON
                    {
                    root_0 = (XQDTCommonTree)adaptor.nil();

                    DESCENDANT_OR_SELF281=(CommonToken)match(input,DESCENDANT_OR_SELF,FOLLOW_DESCENDANT_OR_SELF_in_p_ForwardAxis6278); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    DESCENDANT_OR_SELF281_tree = (XQDTCommonTree)adaptor.create(DESCENDANT_OR_SELF281);
                    adaptor.addChild(root_0, DESCENDANT_OR_SELF281_tree);
                    }
                    COLON_COLON282=(CommonToken)match(input,COLON_COLON,FOLLOW_COLON_COLON_in_p_ForwardAxis6280); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    COLON_COLON282_tree = (XQDTCommonTree)adaptor.create(COLON_COLON282);
                    adaptor.addChild(root_0, COLON_COLON282_tree);
                    }

                    }
                    break;
                case 6 :
                    // XQueryParser.g:697:11: FOLLOWING_SIBLING COLON_COLON
                    {
                    root_0 = (XQDTCommonTree)adaptor.nil();

                    FOLLOWING_SIBLING283=(CommonToken)match(input,FOLLOWING_SIBLING,FOLLOW_FOLLOWING_SIBLING_in_p_ForwardAxis6292); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    FOLLOWING_SIBLING283_tree = (XQDTCommonTree)adaptor.create(FOLLOWING_SIBLING283);
                    adaptor.addChild(root_0, FOLLOWING_SIBLING283_tree);
                    }
                    COLON_COLON284=(CommonToken)match(input,COLON_COLON,FOLLOW_COLON_COLON_in_p_ForwardAxis6294); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    COLON_COLON284_tree = (XQDTCommonTree)adaptor.create(COLON_COLON284);
                    adaptor.addChild(root_0, COLON_COLON284_tree);
                    }

                    }
                    break;
                case 7 :
                    // XQueryParser.g:698:11: FOLLOWING COLON_COLON
                    {
                    root_0 = (XQDTCommonTree)adaptor.nil();

                    FOLLOWING285=(CommonToken)match(input,FOLLOWING,FOLLOW_FOLLOWING_in_p_ForwardAxis6306); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    FOLLOWING285_tree = (XQDTCommonTree)adaptor.create(FOLLOWING285);
                    adaptor.addChild(root_0, FOLLOWING285_tree);
                    }
                    COLON_COLON286=(CommonToken)match(input,COLON_COLON,FOLLOW_COLON_COLON_in_p_ForwardAxis6308); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    COLON_COLON286_tree = (XQDTCommonTree)adaptor.create(COLON_COLON286);
                    adaptor.addChild(root_0, COLON_COLON286_tree);
                    }

                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (XQDTCommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (XQDTCommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "p_ForwardAxis"

    public static class p_AbbrevForwardStep_return extends ParserRuleReturnScope {
        XQDTCommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "p_AbbrevForwardStep"
    // XQueryParser.g:702:1: p_AbbrevForwardStep : ( ATTR_SIGN )? p_NodeTest ;
    public final XQueryParser.p_AbbrevForwardStep_return p_AbbrevForwardStep() throws RecognitionException {
        XQueryParser.p_AbbrevForwardStep_return retval = new XQueryParser.p_AbbrevForwardStep_return();
        retval.start = input.LT(1);

        XQDTCommonTree root_0 = null;

        CommonToken ATTR_SIGN287=null;
        XQueryParser.p_NodeTest_return p_NodeTest288 = null;


        XQDTCommonTree ATTR_SIGN287_tree=null;

        try {
            // XQueryParser.g:703:9: ( ( ATTR_SIGN )? p_NodeTest )
            // XQueryParser.g:703:11: ( ATTR_SIGN )? p_NodeTest
            {
            root_0 = (XQDTCommonTree)adaptor.nil();

            // XQueryParser.g:703:11: ( ATTR_SIGN )?
            int alt116=2;
            int LA116_0 = input.LA(1);

            if ( (LA116_0==ATTR_SIGN) ) {
                alt116=1;
            }
            switch (alt116) {
                case 1 :
                    // XQueryParser.g:703:11: ATTR_SIGN
                    {
                    ATTR_SIGN287=(CommonToken)match(input,ATTR_SIGN,FOLLOW_ATTR_SIGN_in_p_AbbrevForwardStep6334); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    ATTR_SIGN287_tree = (XQDTCommonTree)adaptor.create(ATTR_SIGN287);
                    adaptor.addChild(root_0, ATTR_SIGN287_tree);
                    }

                    }
                    break;

            }

            pushFollow(FOLLOW_p_NodeTest_in_p_AbbrevForwardStep6337);
            p_NodeTest288=p_NodeTest();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, p_NodeTest288.getTree());

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (XQDTCommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (XQDTCommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "p_AbbrevForwardStep"

    public static class p_ReverseStep_return extends ParserRuleReturnScope {
        XQDTCommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "p_ReverseStep"
    // XQueryParser.g:707:1: p_ReverseStep : ( ( p_ReverseAxis p_NodeTest ) | p_AbbrevReverseStep );
    public final XQueryParser.p_ReverseStep_return p_ReverseStep() throws RecognitionException {
        XQueryParser.p_ReverseStep_return retval = new XQueryParser.p_ReverseStep_return();
        retval.start = input.LT(1);

        XQDTCommonTree root_0 = null;

        XQueryParser.p_ReverseAxis_return p_ReverseAxis289 = null;

        XQueryParser.p_NodeTest_return p_NodeTest290 = null;

        XQueryParser.p_AbbrevReverseStep_return p_AbbrevReverseStep291 = null;



        try {
            // XQueryParser.g:708:9: ( ( p_ReverseAxis p_NodeTest ) | p_AbbrevReverseStep )
            int alt117=2;
            int LA117_0 = input.LA(1);

            if ( ((LA117_0>=ANCESTOR && LA117_0<=ANCESTOR_OR_SELF)||(LA117_0>=PARENT && LA117_0<=PRECEDING_SIBLING)) ) {
                alt117=1;
            }
            else if ( (LA117_0==DOT_DOT) ) {
                alt117=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 117, 0, input);

                throw nvae;
            }
            switch (alt117) {
                case 1 :
                    // XQueryParser.g:708:11: ( p_ReverseAxis p_NodeTest )
                    {
                    root_0 = (XQDTCommonTree)adaptor.nil();

                    // XQueryParser.g:708:11: ( p_ReverseAxis p_NodeTest )
                    // XQueryParser.g:708:12: p_ReverseAxis p_NodeTest
                    {
                    pushFollow(FOLLOW_p_ReverseAxis_in_p_ReverseStep6364);
                    p_ReverseAxis289=p_ReverseAxis();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, p_ReverseAxis289.getTree());
                    pushFollow(FOLLOW_p_NodeTest_in_p_ReverseStep6366);
                    p_NodeTest290=p_NodeTest();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, p_NodeTest290.getTree());

                    }


                    }
                    break;
                case 2 :
                    // XQueryParser.g:708:40: p_AbbrevReverseStep
                    {
                    root_0 = (XQDTCommonTree)adaptor.nil();

                    pushFollow(FOLLOW_p_AbbrevReverseStep_in_p_ReverseStep6371);
                    p_AbbrevReverseStep291=p_AbbrevReverseStep();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, p_AbbrevReverseStep291.getTree());

                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (XQDTCommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (XQDTCommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "p_ReverseStep"

    public static class p_ReverseAxis_return extends ParserRuleReturnScope {
        XQDTCommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "p_ReverseAxis"
    // XQueryParser.g:712:1: p_ReverseAxis : ( PARENT COLON_COLON | ANCESTOR COLON_COLON | PRECEDING_SIBLING COLON_COLON | PRECEDING COLON_COLON | ANCESTOR_OR_SELF COLON_COLON );
    public final XQueryParser.p_ReverseAxis_return p_ReverseAxis() throws RecognitionException {
        XQueryParser.p_ReverseAxis_return retval = new XQueryParser.p_ReverseAxis_return();
        retval.start = input.LT(1);

        XQDTCommonTree root_0 = null;

        CommonToken PARENT292=null;
        CommonToken COLON_COLON293=null;
        CommonToken ANCESTOR294=null;
        CommonToken COLON_COLON295=null;
        CommonToken PRECEDING_SIBLING296=null;
        CommonToken COLON_COLON297=null;
        CommonToken PRECEDING298=null;
        CommonToken COLON_COLON299=null;
        CommonToken ANCESTOR_OR_SELF300=null;
        CommonToken COLON_COLON301=null;

        XQDTCommonTree PARENT292_tree=null;
        XQDTCommonTree COLON_COLON293_tree=null;
        XQDTCommonTree ANCESTOR294_tree=null;
        XQDTCommonTree COLON_COLON295_tree=null;
        XQDTCommonTree PRECEDING_SIBLING296_tree=null;
        XQDTCommonTree COLON_COLON297_tree=null;
        XQDTCommonTree PRECEDING298_tree=null;
        XQDTCommonTree COLON_COLON299_tree=null;
        XQDTCommonTree ANCESTOR_OR_SELF300_tree=null;
        XQDTCommonTree COLON_COLON301_tree=null;

        try {
            // XQueryParser.g:713:9: ( PARENT COLON_COLON | ANCESTOR COLON_COLON | PRECEDING_SIBLING COLON_COLON | PRECEDING COLON_COLON | ANCESTOR_OR_SELF COLON_COLON )
            int alt118=5;
            switch ( input.LA(1) ) {
            case PARENT:
                {
                alt118=1;
                }
                break;
            case ANCESTOR:
                {
                alt118=2;
                }
                break;
            case PRECEDING_SIBLING:
                {
                alt118=3;
                }
                break;
            case PRECEDING:
                {
                alt118=4;
                }
                break;
            case ANCESTOR_OR_SELF:
                {
                alt118=5;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 118, 0, input);

                throw nvae;
            }

            switch (alt118) {
                case 1 :
                    // XQueryParser.g:713:11: PARENT COLON_COLON
                    {
                    root_0 = (XQDTCommonTree)adaptor.nil();

                    PARENT292=(CommonToken)match(input,PARENT,FOLLOW_PARENT_in_p_ReverseAxis6397); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    PARENT292_tree = (XQDTCommonTree)adaptor.create(PARENT292);
                    adaptor.addChild(root_0, PARENT292_tree);
                    }
                    COLON_COLON293=(CommonToken)match(input,COLON_COLON,FOLLOW_COLON_COLON_in_p_ReverseAxis6399); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    COLON_COLON293_tree = (XQDTCommonTree)adaptor.create(COLON_COLON293);
                    adaptor.addChild(root_0, COLON_COLON293_tree);
                    }

                    }
                    break;
                case 2 :
                    // XQueryParser.g:714:11: ANCESTOR COLON_COLON
                    {
                    root_0 = (XQDTCommonTree)adaptor.nil();

                    ANCESTOR294=(CommonToken)match(input,ANCESTOR,FOLLOW_ANCESTOR_in_p_ReverseAxis6411); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    ANCESTOR294_tree = (XQDTCommonTree)adaptor.create(ANCESTOR294);
                    adaptor.addChild(root_0, ANCESTOR294_tree);
                    }
                    COLON_COLON295=(CommonToken)match(input,COLON_COLON,FOLLOW_COLON_COLON_in_p_ReverseAxis6413); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    COLON_COLON295_tree = (XQDTCommonTree)adaptor.create(COLON_COLON295);
                    adaptor.addChild(root_0, COLON_COLON295_tree);
                    }

                    }
                    break;
                case 3 :
                    // XQueryParser.g:715:11: PRECEDING_SIBLING COLON_COLON
                    {
                    root_0 = (XQDTCommonTree)adaptor.nil();

                    PRECEDING_SIBLING296=(CommonToken)match(input,PRECEDING_SIBLING,FOLLOW_PRECEDING_SIBLING_in_p_ReverseAxis6425); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    PRECEDING_SIBLING296_tree = (XQDTCommonTree)adaptor.create(PRECEDING_SIBLING296);
                    adaptor.addChild(root_0, PRECEDING_SIBLING296_tree);
                    }
                    COLON_COLON297=(CommonToken)match(input,COLON_COLON,FOLLOW_COLON_COLON_in_p_ReverseAxis6427); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    COLON_COLON297_tree = (XQDTCommonTree)adaptor.create(COLON_COLON297);
                    adaptor.addChild(root_0, COLON_COLON297_tree);
                    }

                    }
                    break;
                case 4 :
                    // XQueryParser.g:716:11: PRECEDING COLON_COLON
                    {
                    root_0 = (XQDTCommonTree)adaptor.nil();

                    PRECEDING298=(CommonToken)match(input,PRECEDING,FOLLOW_PRECEDING_in_p_ReverseAxis6439); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    PRECEDING298_tree = (XQDTCommonTree)adaptor.create(PRECEDING298);
                    adaptor.addChild(root_0, PRECEDING298_tree);
                    }
                    COLON_COLON299=(CommonToken)match(input,COLON_COLON,FOLLOW_COLON_COLON_in_p_ReverseAxis6441); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    COLON_COLON299_tree = (XQDTCommonTree)adaptor.create(COLON_COLON299);
                    adaptor.addChild(root_0, COLON_COLON299_tree);
                    }

                    }
                    break;
                case 5 :
                    // XQueryParser.g:717:11: ANCESTOR_OR_SELF COLON_COLON
                    {
                    root_0 = (XQDTCommonTree)adaptor.nil();

                    ANCESTOR_OR_SELF300=(CommonToken)match(input,ANCESTOR_OR_SELF,FOLLOW_ANCESTOR_OR_SELF_in_p_ReverseAxis6453); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    ANCESTOR_OR_SELF300_tree = (XQDTCommonTree)adaptor.create(ANCESTOR_OR_SELF300);
                    adaptor.addChild(root_0, ANCESTOR_OR_SELF300_tree);
                    }
                    COLON_COLON301=(CommonToken)match(input,COLON_COLON,FOLLOW_COLON_COLON_in_p_ReverseAxis6455); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    COLON_COLON301_tree = (XQDTCommonTree)adaptor.create(COLON_COLON301);
                    adaptor.addChild(root_0, COLON_COLON301_tree);
                    }

                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (XQDTCommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (XQDTCommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "p_ReverseAxis"

    public static class p_AbbrevReverseStep_return extends ParserRuleReturnScope {
        XQDTCommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "p_AbbrevReverseStep"
    // XQueryParser.g:721:1: p_AbbrevReverseStep : DOT_DOT ;
    public final XQueryParser.p_AbbrevReverseStep_return p_AbbrevReverseStep() throws RecognitionException {
        XQueryParser.p_AbbrevReverseStep_return retval = new XQueryParser.p_AbbrevReverseStep_return();
        retval.start = input.LT(1);

        XQDTCommonTree root_0 = null;

        CommonToken DOT_DOT302=null;

        XQDTCommonTree DOT_DOT302_tree=null;

        try {
            // XQueryParser.g:722:9: ( DOT_DOT )
            // XQueryParser.g:722:11: DOT_DOT
            {
            root_0 = (XQDTCommonTree)adaptor.nil();

            DOT_DOT302=(CommonToken)match(input,DOT_DOT,FOLLOW_DOT_DOT_in_p_AbbrevReverseStep6481); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            DOT_DOT302_tree = (XQDTCommonTree)adaptor.create(DOT_DOT302);
            adaptor.addChild(root_0, DOT_DOT302_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (XQDTCommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (XQDTCommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "p_AbbrevReverseStep"

    public static class p_NodeTest_return extends ParserRuleReturnScope {
        XQDTCommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "p_NodeTest"
    // XQueryParser.g:726:1: p_NodeTest : ( p_KindTest | p_NameTest );
    public final XQueryParser.p_NodeTest_return p_NodeTest() throws RecognitionException {
        XQueryParser.p_NodeTest_return retval = new XQueryParser.p_NodeTest_return();
        retval.start = input.LT(1);

        XQDTCommonTree root_0 = null;

        XQueryParser.p_KindTest_return p_KindTest303 = null;

        XQueryParser.p_NameTest_return p_NameTest304 = null;



        try {
            // XQueryParser.g:727:9: ( p_KindTest | p_NameTest )
            int alt119=2;
            alt119 = dfa119.predict(input);
            switch (alt119) {
                case 1 :
                    // XQueryParser.g:727:11: p_KindTest
                    {
                    root_0 = (XQDTCommonTree)adaptor.nil();

                    pushFollow(FOLLOW_p_KindTest_in_p_NodeTest6507);
                    p_KindTest303=p_KindTest();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, p_KindTest303.getTree());

                    }
                    break;
                case 2 :
                    // XQueryParser.g:727:24: p_NameTest
                    {
                    root_0 = (XQDTCommonTree)adaptor.nil();

                    pushFollow(FOLLOW_p_NameTest_in_p_NodeTest6511);
                    p_NameTest304=p_NameTest();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, p_NameTest304.getTree());

                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (XQDTCommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (XQDTCommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "p_NodeTest"

    public static class p_NameTest_return extends ParserRuleReturnScope {
        XQDTCommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "p_NameTest"
    // XQueryParser.g:731:1: p_NameTest : ( p_QName | p_Wildcard );
    public final XQueryParser.p_NameTest_return p_NameTest() throws RecognitionException {
        XQueryParser.p_NameTest_return retval = new XQueryParser.p_NameTest_return();
        retval.start = input.LT(1);

        XQDTCommonTree root_0 = null;

        XQueryParser.p_QName_return p_QName305 = null;

        XQueryParser.p_Wildcard_return p_Wildcard306 = null;



        try {
            // XQueryParser.g:732:9: ( p_QName | p_Wildcard )
            int alt120=2;
            switch ( input.LA(1) ) {
            case L_NCName:
                {
                int LA120_1 = input.LA(2);

                if ( (LA120_1==COLON) ) {
                    int LA120_4 = input.LA(3);

                    if ( (LA120_4==STAR) ) {
                        alt120=2;
                    }
                    else if ( ((LA120_4>=ANCESTOR && LA120_4<=EXIT)||(LA120_4>=SEQUENTIAL && LA120_4<=QUOT_ER)||LA120_4==L_NCName) ) {
                        alt120=1;
                    }
                    else {
                        if (state.backtracking>0) {state.failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("", 120, 4, input);

                        throw nvae;
                    }
                }
                else if ( (LA120_1==EOF||(LA120_1>=AND && LA120_1<=ASCENDING)||(LA120_1>=CASE && LA120_1<=CASTABLE)||LA120_1==COLLATION||LA120_1==DEFAULT||(LA120_1>=DESCENDING && LA120_1<=DIV)||(LA120_1>=ELSE && LA120_1<=EMPTY)||LA120_1==EQ||LA120_1==EXCEPT||LA120_1==FOR||LA120_1==GE||(LA120_1>=GT && LA120_1<=IDIV)||(LA120_1>=INSTANCE && LA120_1<=IS)||LA120_1==LE||(LA120_1>=LET && LA120_1<=MOD)||LA120_1==NE||(LA120_1>=OR && LA120_1<=ORDER)||(LA120_1>=RETURN && LA120_1<=SATISFIES)||LA120_1==STABLE||(LA120_1>=TO && LA120_1<=TREAT)||LA120_1==UNION||LA120_1==WHERE||LA120_1==COUNT||(LA120_1>=END && LA120_1<=GROUP)||LA120_1==ONLY||LA120_1==START||(LA120_1>=AFTER && LA120_1<=BEFORE)||LA120_1==INTO||LA120_1==MODIFY||LA120_1==WITH||(LA120_1>=LPAREN && LA120_1<=RPAREN)||(LA120_1>=LBRACKET && LA120_1<=EQUAL)||LA120_1==NOTEQUAL||LA120_1==COMMA||(LA120_1>=STAR && LA120_1<=SLASH_SLASH)||(LA120_1>=SEMICOLON && LA120_1<=VBAR)) ) {
                    alt120=1;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 120, 1, input);

                    throw nvae;
                }
                }
                break;
            case STAR:
                {
                alt120=2;
                }
                break;
            case ANCESTOR:
            case ANCESTOR_OR_SELF:
            case AND:
            case AS:
            case ASCENDING:
            case AT:
            case ATTRIBUTE:
            case BASE_URI:
            case BOUNDARY_SPACE:
            case BY:
            case CASE:
            case CAST:
            case CASTABLE:
            case CHILD:
            case COLLATION:
            case COMMENT:
            case CONSTRUCTION:
            case COPY_NAMESPACES:
            case DECLARE:
            case DEFAULT:
            case DESCENDANT:
            case DESCENDANT_OR_SELF:
            case DESCENDING:
            case DIV:
            case DOCUMENT:
            case DOCUMENT_NODE:
            case ELEMENT:
            case ELSE:
            case EMPTY:
            case EMPTY_SEQUENCE:
            case ENCODING:
            case EQ:
            case EVERY:
            case EXCEPT:
            case EXTERNAL:
            case FOLLOWING:
            case FOLLOWING_SIBLING:
            case FOR:
            case FUNCTION:
            case GE:
            case GREATEST:
            case GT:
            case IDIV:
            case IF:
            case IMPORT:
            case IN:
            case INHERIT:
            case INSTANCE:
            case INTERSECT:
            case IS:
            case ITEM:
            case LAX:
            case LE:
            case LEAST:
            case LET:
            case LT:
            case MOD:
            case MODULE:
            case NAMESPACE:
            case NE:
            case NO_INHERIT:
            case NO_PRESERVE:
            case NODE:
            case OF:
            case OPTION:
            case OR:
            case ORDER:
            case ORDERED:
            case ORDERING:
            case PARENT:
            case PRECEDING:
            case PRECEDING_SIBLING:
            case PRESERVE:
            case PROCESSING_INSTRUCTION:
            case RETURN:
            case SATISFIES:
            case SCHEMA:
            case SCHEMA_ATTRIBUTE:
            case SCHEMA_ELEMENT:
            case SELF:
            case SOME:
            case STABLE:
            case STRICT:
            case STRIP:
            case TEXT:
            case THEN:
            case TO:
            case TREAT:
            case TYPESWITCH:
            case UNION:
            case UNORDERED:
            case VALIDATE:
            case VARIABLE:
            case VERSION:
            case WHERE:
            case XQUERY:
            case CATCH:
            case CONTEXT:
            case COUNT:
            case DECIMAL_FORMAT:
            case DECIMAL_SEPARATOR:
            case DIGIT:
            case END:
            case GROUP:
            case GROUPING_SEPARATOR:
            case INFINITY:
            case MINUS_SIGN:
            case NAMESPACE_NODE:
            case NAN:
            case NEXT:
            case ONLY:
            case OUTER:
            case PATTERN_SEPARATOR:
            case PERCENT:
            case PER_MILLE:
            case PREVIOUS:
            case SLIDING:
            case START:
            case TRY:
            case TUMBLING:
            case WHEN:
            case WINDOW:
            case ZERO_DIGIT:
            case AFTER:
            case BEFORE:
            case COPY:
            case DELETE:
            case FIRST:
            case INSERT:
            case INTO:
            case LAST:
            case MODIFY:
            case NODES:
            case RENAME:
            case REPLACE:
            case REVALIDATION:
            case SKIP:
            case UPDATING:
            case VALUE:
            case WITH:
            case BLOCK:
            case CONSTANT:
            case EXIT:
            case SEQUENTIAL:
            case SET:
            case SIMPLE:
            case WHILE:
            case EVAL:
            case USING:
            case BINARY:
            case PRIVATE:
            case AMP_ER:
            case APOS_ER:
            case QUOT_ER:
                {
                alt120=1;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 120, 0, input);

                throw nvae;
            }

            switch (alt120) {
                case 1 :
                    // XQueryParser.g:732:11: p_QName
                    {
                    root_0 = (XQDTCommonTree)adaptor.nil();

                    pushFollow(FOLLOW_p_QName_in_p_NameTest6537);
                    p_QName305=p_QName();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, p_QName305.getTree());

                    }
                    break;
                case 2 :
                    // XQueryParser.g:732:21: p_Wildcard
                    {
                    root_0 = (XQDTCommonTree)adaptor.nil();

                    pushFollow(FOLLOW_p_Wildcard_in_p_NameTest6541);
                    p_Wildcard306=p_Wildcard();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, p_Wildcard306.getTree());

                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (XQDTCommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (XQDTCommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "p_NameTest"

    public static class p_Wildcard_return extends ParserRuleReturnScope {
        XQDTCommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "p_Wildcard"
    // XQueryParser.g:736:1: p_Wildcard : ( STAR ( COLON L_NCName )? | ( L_NCName COLON STAR ) );
    public final XQueryParser.p_Wildcard_return p_Wildcard() throws RecognitionException {
        XQueryParser.p_Wildcard_return retval = new XQueryParser.p_Wildcard_return();
        retval.start = input.LT(1);

        XQDTCommonTree root_0 = null;

        CommonToken STAR307=null;
        CommonToken COLON308=null;
        CommonToken L_NCName309=null;
        CommonToken L_NCName310=null;
        CommonToken COLON311=null;
        CommonToken STAR312=null;

        XQDTCommonTree STAR307_tree=null;
        XQDTCommonTree COLON308_tree=null;
        XQDTCommonTree L_NCName309_tree=null;
        XQDTCommonTree L_NCName310_tree=null;
        XQDTCommonTree COLON311_tree=null;
        XQDTCommonTree STAR312_tree=null;

        setWsExplicit(true);
        try {
            // XQueryParser.g:737:9: ( STAR ( COLON L_NCName )? | ( L_NCName COLON STAR ) )
            int alt122=2;
            int LA122_0 = input.LA(1);

            if ( (LA122_0==STAR) ) {
                alt122=1;
            }
            else if ( (LA122_0==L_NCName) ) {
                alt122=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 122, 0, input);

                throw nvae;
            }
            switch (alt122) {
                case 1 :
                    // XQueryParser.g:737:11: STAR ( COLON L_NCName )?
                    {
                    root_0 = (XQDTCommonTree)adaptor.nil();

                    STAR307=(CommonToken)match(input,STAR,FOLLOW_STAR_in_p_Wildcard6571); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    STAR307_tree = (XQDTCommonTree)adaptor.create(STAR307);
                    adaptor.addChild(root_0, STAR307_tree);
                    }
                    // XQueryParser.g:737:16: ( COLON L_NCName )?
                    int alt121=2;
                    int LA121_0 = input.LA(1);

                    if ( (LA121_0==COLON) ) {
                        alt121=1;
                    }
                    switch (alt121) {
                        case 1 :
                            // XQueryParser.g:737:17: COLON L_NCName
                            {
                            COLON308=(CommonToken)match(input,COLON,FOLLOW_COLON_in_p_Wildcard6574); if (state.failed) return retval;
                            if ( state.backtracking==0 ) {
                            COLON308_tree = (XQDTCommonTree)adaptor.create(COLON308);
                            adaptor.addChild(root_0, COLON308_tree);
                            }
                            L_NCName309=(CommonToken)match(input,L_NCName,FOLLOW_L_NCName_in_p_Wildcard6576); if (state.failed) return retval;
                            if ( state.backtracking==0 ) {
                            L_NCName309_tree = (XQDTCommonTree)adaptor.create(L_NCName309);
                            adaptor.addChild(root_0, L_NCName309_tree);
                            }

                            }
                            break;

                    }


                    }
                    break;
                case 2 :
                    // XQueryParser.g:737:36: ( L_NCName COLON STAR )
                    {
                    root_0 = (XQDTCommonTree)adaptor.nil();

                    // XQueryParser.g:737:36: ( L_NCName COLON STAR )
                    // XQueryParser.g:737:37: L_NCName COLON STAR
                    {
                    L_NCName310=(CommonToken)match(input,L_NCName,FOLLOW_L_NCName_in_p_Wildcard6583); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    L_NCName310_tree = (XQDTCommonTree)adaptor.create(L_NCName310);
                    adaptor.addChild(root_0, L_NCName310_tree);
                    }
                    COLON311=(CommonToken)match(input,COLON,FOLLOW_COLON_in_p_Wildcard6585); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    COLON311_tree = (XQDTCommonTree)adaptor.create(COLON311);
                    adaptor.addChild(root_0, COLON311_tree);
                    }
                    STAR312=(CommonToken)match(input,STAR,FOLLOW_STAR_in_p_Wildcard6587); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    STAR312_tree = (XQDTCommonTree)adaptor.create(STAR312);
                    adaptor.addChild(root_0, STAR312_tree);
                    }

                    }


                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (XQDTCommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (XQDTCommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            setWsExplicit(false);
        }
        return retval;
    }
    // $ANTLR end "p_Wildcard"

    public static class p_FilterExpr_return extends ParserRuleReturnScope {
        XQDTCommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "p_FilterExpr"
    // XQueryParser.g:742:1: p_FilterExpr : p_PrimaryExpr p_PredicateList ;
    public final XQueryParser.p_FilterExpr_return p_FilterExpr() throws RecognitionException {
        XQueryParser.p_FilterExpr_return retval = new XQueryParser.p_FilterExpr_return();
        retval.start = input.LT(1);

        XQDTCommonTree root_0 = null;

        XQueryParser.p_PrimaryExpr_return p_PrimaryExpr313 = null;

        XQueryParser.p_PredicateList_return p_PredicateList314 = null;



        try {
            // XQueryParser.g:743:9: ( p_PrimaryExpr p_PredicateList )
            // XQueryParser.g:743:13: p_PrimaryExpr p_PredicateList
            {
            root_0 = (XQDTCommonTree)adaptor.nil();

            pushFollow(FOLLOW_p_PrimaryExpr_in_p_FilterExpr6628);
            p_PrimaryExpr313=p_PrimaryExpr();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, p_PrimaryExpr313.getTree());
            pushFollow(FOLLOW_p_PredicateList_in_p_FilterExpr6630);
            p_PredicateList314=p_PredicateList();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, p_PredicateList314.getTree());

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (XQDTCommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (XQDTCommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "p_FilterExpr"

    public static class p_PredicateList_return extends ParserRuleReturnScope {
        XQDTCommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "p_PredicateList"
    // XQueryParser.g:747:1: p_PredicateList : ( p_Predicate )* ;
    public final XQueryParser.p_PredicateList_return p_PredicateList() throws RecognitionException {
        XQueryParser.p_PredicateList_return retval = new XQueryParser.p_PredicateList_return();
        retval.start = input.LT(1);

        XQDTCommonTree root_0 = null;

        XQueryParser.p_Predicate_return p_Predicate315 = null;



        try {
            // XQueryParser.g:748:9: ( ( p_Predicate )* )
            // XQueryParser.g:748:13: ( p_Predicate )*
            {
            root_0 = (XQDTCommonTree)adaptor.nil();

            // XQueryParser.g:748:13: ( p_Predicate )*
            loop123:
            do {
                int alt123=2;
                int LA123_0 = input.LA(1);

                if ( (LA123_0==LSQUARE) ) {
                    alt123=1;
                }


                switch (alt123) {
            	case 1 :
            	    // XQueryParser.g:748:13: p_Predicate
            	    {
            	    pushFollow(FOLLOW_p_Predicate_in_p_PredicateList6658);
            	    p_Predicate315=p_Predicate();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, p_Predicate315.getTree());

            	    }
            	    break;

            	default :
            	    break loop123;
                }
            } while (true);


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (XQDTCommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (XQDTCommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "p_PredicateList"

    public static class p_Predicate_return extends ParserRuleReturnScope {
        XQDTCommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "p_Predicate"
    // XQueryParser.g:752:1: p_Predicate : LSQUARE pm_Expr RSQUARE ;
    public final XQueryParser.p_Predicate_return p_Predicate() throws RecognitionException {
        XQueryParser.p_Predicate_return retval = new XQueryParser.p_Predicate_return();
        retval.start = input.LT(1);

        XQDTCommonTree root_0 = null;

        CommonToken LSQUARE316=null;
        CommonToken RSQUARE318=null;
        XQueryParser.pm_Expr_return pm_Expr317 = null;


        XQDTCommonTree LSQUARE316_tree=null;
        XQDTCommonTree RSQUARE318_tree=null;

        try {
            // XQueryParser.g:753:9: ( LSQUARE pm_Expr RSQUARE )
            // XQueryParser.g:753:13: LSQUARE pm_Expr RSQUARE
            {
            root_0 = (XQDTCommonTree)adaptor.nil();

            LSQUARE316=(CommonToken)match(input,LSQUARE,FOLLOW_LSQUARE_in_p_Predicate6687); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            LSQUARE316_tree = (XQDTCommonTree)adaptor.create(LSQUARE316);
            adaptor.addChild(root_0, LSQUARE316_tree);
            }
            pushFollow(FOLLOW_pm_Expr_in_p_Predicate6689);
            pm_Expr317=pm_Expr();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, pm_Expr317.getTree());
            RSQUARE318=(CommonToken)match(input,RSQUARE,FOLLOW_RSQUARE_in_p_Predicate6691); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            RSQUARE318_tree = (XQDTCommonTree)adaptor.create(RSQUARE318);
            adaptor.addChild(root_0, RSQUARE318_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (XQDTCommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (XQDTCommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "p_Predicate"

    public static class p_PrimaryExpr_return extends ParserRuleReturnScope {
        XQDTCommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "p_PrimaryExpr"
    // XQueryParser.g:757:1: p_PrimaryExpr : ( p_Literal | p_VarRef | p_ParenthesizedExpr | p_ContextItemExpr | p_FunctionCall | p_OrderedExpr | p_UnorderedExpr | p_Constructor );
    public final XQueryParser.p_PrimaryExpr_return p_PrimaryExpr() throws RecognitionException {
        XQueryParser.p_PrimaryExpr_return retval = new XQueryParser.p_PrimaryExpr_return();
        retval.start = input.LT(1);

        XQDTCommonTree root_0 = null;

        XQueryParser.p_Literal_return p_Literal319 = null;

        XQueryParser.p_VarRef_return p_VarRef320 = null;

        XQueryParser.p_ParenthesizedExpr_return p_ParenthesizedExpr321 = null;

        XQueryParser.p_ContextItemExpr_return p_ContextItemExpr322 = null;

        XQueryParser.p_FunctionCall_return p_FunctionCall323 = null;

        XQueryParser.p_OrderedExpr_return p_OrderedExpr324 = null;

        XQueryParser.p_UnorderedExpr_return p_UnorderedExpr325 = null;

        XQueryParser.p_Constructor_return p_Constructor326 = null;



        try {
            // XQueryParser.g:758:9: ( p_Literal | p_VarRef | p_ParenthesizedExpr | p_ContextItemExpr | p_FunctionCall | p_OrderedExpr | p_UnorderedExpr | p_Constructor )
            int alt124=8;
            alt124 = dfa124.predict(input);
            switch (alt124) {
                case 1 :
                    // XQueryParser.g:758:13: p_Literal
                    {
                    root_0 = (XQDTCommonTree)adaptor.nil();

                    pushFollow(FOLLOW_p_Literal_in_p_PrimaryExpr6719);
                    p_Literal319=p_Literal();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, p_Literal319.getTree());

                    }
                    break;
                case 2 :
                    // XQueryParser.g:759:11: p_VarRef
                    {
                    root_0 = (XQDTCommonTree)adaptor.nil();

                    pushFollow(FOLLOW_p_VarRef_in_p_PrimaryExpr6731);
                    p_VarRef320=p_VarRef();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, p_VarRef320.getTree());

                    }
                    break;
                case 3 :
                    // XQueryParser.g:760:11: p_ParenthesizedExpr
                    {
                    root_0 = (XQDTCommonTree)adaptor.nil();

                    pushFollow(FOLLOW_p_ParenthesizedExpr_in_p_PrimaryExpr6743);
                    p_ParenthesizedExpr321=p_ParenthesizedExpr();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, p_ParenthesizedExpr321.getTree());

                    }
                    break;
                case 4 :
                    // XQueryParser.g:761:11: p_ContextItemExpr
                    {
                    root_0 = (XQDTCommonTree)adaptor.nil();

                    pushFollow(FOLLOW_p_ContextItemExpr_in_p_PrimaryExpr6755);
                    p_ContextItemExpr322=p_ContextItemExpr();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, p_ContextItemExpr322.getTree());

                    }
                    break;
                case 5 :
                    // XQueryParser.g:762:11: p_FunctionCall
                    {
                    root_0 = (XQDTCommonTree)adaptor.nil();

                    pushFollow(FOLLOW_p_FunctionCall_in_p_PrimaryExpr6767);
                    p_FunctionCall323=p_FunctionCall();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, p_FunctionCall323.getTree());

                    }
                    break;
                case 6 :
                    // XQueryParser.g:763:11: p_OrderedExpr
                    {
                    root_0 = (XQDTCommonTree)adaptor.nil();

                    pushFollow(FOLLOW_p_OrderedExpr_in_p_PrimaryExpr6779);
                    p_OrderedExpr324=p_OrderedExpr();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, p_OrderedExpr324.getTree());

                    }
                    break;
                case 7 :
                    // XQueryParser.g:764:11: p_UnorderedExpr
                    {
                    root_0 = (XQDTCommonTree)adaptor.nil();

                    pushFollow(FOLLOW_p_UnorderedExpr_in_p_PrimaryExpr6791);
                    p_UnorderedExpr325=p_UnorderedExpr();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, p_UnorderedExpr325.getTree());

                    }
                    break;
                case 8 :
                    // XQueryParser.g:765:11: p_Constructor
                    {
                    root_0 = (XQDTCommonTree)adaptor.nil();

                    pushFollow(FOLLOW_p_Constructor_in_p_PrimaryExpr6803);
                    p_Constructor326=p_Constructor();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, p_Constructor326.getTree());

                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (XQDTCommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (XQDTCommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "p_PrimaryExpr"

    public static class p_Literal_return extends ParserRuleReturnScope {
        XQDTCommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "p_Literal"
    // XQueryParser.g:769:1: p_Literal : ( p_NumericLiteral | p_StringLiteral );
    public final XQueryParser.p_Literal_return p_Literal() throws RecognitionException {
        XQueryParser.p_Literal_return retval = new XQueryParser.p_Literal_return();
        retval.start = input.LT(1);

        XQDTCommonTree root_0 = null;

        XQueryParser.p_NumericLiteral_return p_NumericLiteral327 = null;

        XQueryParser.p_StringLiteral_return p_StringLiteral328 = null;



        try {
            // XQueryParser.g:770:9: ( p_NumericLiteral | p_StringLiteral )
            int alt125=2;
            int LA125_0 = input.LA(1);

            if ( ((LA125_0>=L_IntegerLiteral && LA125_0<=L_DoubleLiteral)) ) {
                alt125=1;
            }
            else if ( ((LA125_0>=APOS && LA125_0<=QUOT)) ) {
                alt125=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 125, 0, input);

                throw nvae;
            }
            switch (alt125) {
                case 1 :
                    // XQueryParser.g:770:13: p_NumericLiteral
                    {
                    root_0 = (XQDTCommonTree)adaptor.nil();

                    pushFollow(FOLLOW_p_NumericLiteral_in_p_Literal6831);
                    p_NumericLiteral327=p_NumericLiteral();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, p_NumericLiteral327.getTree());

                    }
                    break;
                case 2 :
                    // XQueryParser.g:770:32: p_StringLiteral
                    {
                    root_0 = (XQDTCommonTree)adaptor.nil();

                    pushFollow(FOLLOW_p_StringLiteral_in_p_Literal6835);
                    p_StringLiteral328=p_StringLiteral();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, p_StringLiteral328.getTree());

                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (XQDTCommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (XQDTCommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "p_Literal"

    public static class p_NumericLiteral_return extends ParserRuleReturnScope {
        XQDTCommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "p_NumericLiteral"
    // XQueryParser.g:774:1: p_NumericLiteral : ( L_IntegerLiteral | L_DecimalLiteral | L_DoubleLiteral );
    public final XQueryParser.p_NumericLiteral_return p_NumericLiteral() throws RecognitionException {
        XQueryParser.p_NumericLiteral_return retval = new XQueryParser.p_NumericLiteral_return();
        retval.start = input.LT(1);

        XQDTCommonTree root_0 = null;

        CommonToken set329=null;

        XQDTCommonTree set329_tree=null;

        try {
            // XQueryParser.g:775:9: ( L_IntegerLiteral | L_DecimalLiteral | L_DoubleLiteral )
            // XQueryParser.g:
            {
            root_0 = (XQDTCommonTree)adaptor.nil();

            set329=(CommonToken)input.LT(1);
            if ( (input.LA(1)>=L_IntegerLiteral && input.LA(1)<=L_DoubleLiteral) ) {
                input.consume();
                if ( state.backtracking==0 ) adaptor.addChild(root_0, (XQDTCommonTree)adaptor.create(set329));
                state.errorRecovery=false;state.failed=false;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                MismatchedSetException mse = new MismatchedSetException(null,input);
                throw mse;
            }


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (XQDTCommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (XQDTCommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "p_NumericLiteral"

    public static class p_VarRef_return extends ParserRuleReturnScope {
        XQDTCommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "p_VarRef"
    // XQueryParser.g:779:1: p_VarRef : DOLLAR p_VarName ;
    public final XQueryParser.p_VarRef_return p_VarRef() throws RecognitionException {
        XQueryParser.p_VarRef_return retval = new XQueryParser.p_VarRef_return();
        retval.start = input.LT(1);

        XQDTCommonTree root_0 = null;

        CommonToken DOLLAR330=null;
        XQueryParser.p_VarName_return p_VarName331 = null;


        XQDTCommonTree DOLLAR330_tree=null;

        try {
            // XQueryParser.g:780:9: ( DOLLAR p_VarName )
            // XQueryParser.g:780:13: DOLLAR p_VarName
            {
            root_0 = (XQDTCommonTree)adaptor.nil();

            DOLLAR330=(CommonToken)match(input,DOLLAR,FOLLOW_DOLLAR_in_p_VarRef6907); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            DOLLAR330_tree = (XQDTCommonTree)adaptor.create(DOLLAR330);
            adaptor.addChild(root_0, DOLLAR330_tree);
            }
            pushFollow(FOLLOW_p_VarName_in_p_VarRef6909);
            p_VarName331=p_VarName();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, p_VarName331.getTree());

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (XQDTCommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (XQDTCommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "p_VarRef"

    public static class p_VarName_return extends ParserRuleReturnScope {
        XQDTCommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "p_VarName"
    // XQueryParser.g:784:1: p_VarName : p_QName ;
    public final XQueryParser.p_VarName_return p_VarName() throws RecognitionException {
        XQueryParser.p_VarName_return retval = new XQueryParser.p_VarName_return();
        retval.start = input.LT(1);

        XQDTCommonTree root_0 = null;

        XQueryParser.p_QName_return p_QName332 = null;



        try {
            // XQueryParser.g:785:9: ( p_QName )
            // XQueryParser.g:785:13: p_QName
            {
            root_0 = (XQDTCommonTree)adaptor.nil();

            pushFollow(FOLLOW_p_QName_in_p_VarName6937);
            p_QName332=p_QName();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, p_QName332.getTree());

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (XQDTCommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (XQDTCommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "p_VarName"

    public static class p_ParenthesizedExpr_return extends ParserRuleReturnScope {
        XQDTCommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "p_ParenthesizedExpr"
    // XQueryParser.g:789:1: p_ParenthesizedExpr : LPAREN ( pm_Expr )? RPAREN ;
    public final XQueryParser.p_ParenthesizedExpr_return p_ParenthesizedExpr() throws RecognitionException {
        XQueryParser.p_ParenthesizedExpr_return retval = new XQueryParser.p_ParenthesizedExpr_return();
        retval.start = input.LT(1);

        XQDTCommonTree root_0 = null;

        CommonToken LPAREN333=null;
        CommonToken RPAREN335=null;
        XQueryParser.pm_Expr_return pm_Expr334 = null;


        XQDTCommonTree LPAREN333_tree=null;
        XQDTCommonTree RPAREN335_tree=null;

        try {
            // XQueryParser.g:790:9: ( LPAREN ( pm_Expr )? RPAREN )
            // XQueryParser.g:790:13: LPAREN ( pm_Expr )? RPAREN
            {
            root_0 = (XQDTCommonTree)adaptor.nil();

            LPAREN333=(CommonToken)match(input,LPAREN,FOLLOW_LPAREN_in_p_ParenthesizedExpr6965); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            LPAREN333_tree = (XQDTCommonTree)adaptor.create(LPAREN333);
            adaptor.addChild(root_0, LPAREN333_tree);
            }
            // XQueryParser.g:790:20: ( pm_Expr )?
            int alt126=2;
            int LA126_0 = input.LA(1);

            if ( ((LA126_0>=ANCESTOR && LA126_0<=EXIT)||(LA126_0>=SEQUENTIAL && LA126_0<=LPAREN)||LA126_0==DOLLAR||(LA126_0>=STAR && LA126_0<=SMALLER)||(LA126_0>=SLASH && LA126_0<=DOT_DOT)||LA126_0==ATTR_SIGN||(LA126_0>=APOS && LA126_0<=QUOT)||LA126_0==L_NCName||(LA126_0>=L_Pragma && LA126_0<=L_DoubleLiteral)) ) {
                alt126=1;
            }
            switch (alt126) {
                case 1 :
                    // XQueryParser.g:790:20: pm_Expr
                    {
                    pushFollow(FOLLOW_pm_Expr_in_p_ParenthesizedExpr6967);
                    pm_Expr334=pm_Expr();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, pm_Expr334.getTree());

                    }
                    break;

            }

            RPAREN335=(CommonToken)match(input,RPAREN,FOLLOW_RPAREN_in_p_ParenthesizedExpr6970); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            RPAREN335_tree = (XQDTCommonTree)adaptor.create(RPAREN335);
            adaptor.addChild(root_0, RPAREN335_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (XQDTCommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (XQDTCommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "p_ParenthesizedExpr"

    public static class p_ContextItemExpr_return extends ParserRuleReturnScope {
        XQDTCommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "p_ContextItemExpr"
    // XQueryParser.g:794:1: p_ContextItemExpr : DOT ;
    public final XQueryParser.p_ContextItemExpr_return p_ContextItemExpr() throws RecognitionException {
        XQueryParser.p_ContextItemExpr_return retval = new XQueryParser.p_ContextItemExpr_return();
        retval.start = input.LT(1);

        XQDTCommonTree root_0 = null;

        CommonToken DOT336=null;

        XQDTCommonTree DOT336_tree=null;

        try {
            // XQueryParser.g:795:9: ( DOT )
            // XQueryParser.g:795:13: DOT
            {
            root_0 = (XQDTCommonTree)adaptor.nil();

            DOT336=(CommonToken)match(input,DOT,FOLLOW_DOT_in_p_ContextItemExpr6998); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            DOT336_tree = (XQDTCommonTree)adaptor.create(DOT336);
            adaptor.addChild(root_0, DOT336_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (XQDTCommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (XQDTCommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "p_ContextItemExpr"

    public static class p_OrderedExpr_return extends ParserRuleReturnScope {
        XQDTCommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "p_OrderedExpr"
    // XQueryParser.g:799:1: p_OrderedExpr : k= ORDERED LBRACKET pm_Expr RBRACKET ;
    public final XQueryParser.p_OrderedExpr_return p_OrderedExpr() throws RecognitionException {
        XQueryParser.p_OrderedExpr_return retval = new XQueryParser.p_OrderedExpr_return();
        retval.start = input.LT(1);

        XQDTCommonTree root_0 = null;

        CommonToken k=null;
        CommonToken LBRACKET337=null;
        CommonToken RBRACKET339=null;
        XQueryParser.pm_Expr_return pm_Expr338 = null;


        XQDTCommonTree k_tree=null;
        XQDTCommonTree LBRACKET337_tree=null;
        XQDTCommonTree RBRACKET339_tree=null;

        try {
            // XQueryParser.g:800:9: (k= ORDERED LBRACKET pm_Expr RBRACKET )
            // XQueryParser.g:800:13: k= ORDERED LBRACKET pm_Expr RBRACKET
            {
            root_0 = (XQDTCommonTree)adaptor.nil();

            k=(CommonToken)match(input,ORDERED,FOLLOW_ORDERED_in_p_OrderedExpr7028); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            k_tree = (XQDTCommonTree)adaptor.create(k);
            adaptor.addChild(root_0, k_tree);
            }
            if ( state.backtracking==0 ) {
              ak(k);
            }
            LBRACKET337=(CommonToken)match(input,LBRACKET,FOLLOW_LBRACKET_in_p_OrderedExpr7032); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            LBRACKET337_tree = (XQDTCommonTree)adaptor.create(LBRACKET337);
            adaptor.addChild(root_0, LBRACKET337_tree);
            }
            pushFollow(FOLLOW_pm_Expr_in_p_OrderedExpr7034);
            pm_Expr338=pm_Expr();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, pm_Expr338.getTree());
            RBRACKET339=(CommonToken)match(input,RBRACKET,FOLLOW_RBRACKET_in_p_OrderedExpr7036); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            RBRACKET339_tree = (XQDTCommonTree)adaptor.create(RBRACKET339);
            adaptor.addChild(root_0, RBRACKET339_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (XQDTCommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (XQDTCommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "p_OrderedExpr"

    public static class p_UnorderedExpr_return extends ParserRuleReturnScope {
        XQDTCommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "p_UnorderedExpr"
    // XQueryParser.g:804:1: p_UnorderedExpr : k= UNORDERED LBRACKET pm_Expr RBRACKET ;
    public final XQueryParser.p_UnorderedExpr_return p_UnorderedExpr() throws RecognitionException {
        XQueryParser.p_UnorderedExpr_return retval = new XQueryParser.p_UnorderedExpr_return();
        retval.start = input.LT(1);

        XQDTCommonTree root_0 = null;

        CommonToken k=null;
        CommonToken LBRACKET340=null;
        CommonToken RBRACKET342=null;
        XQueryParser.pm_Expr_return pm_Expr341 = null;


        XQDTCommonTree k_tree=null;
        XQDTCommonTree LBRACKET340_tree=null;
        XQDTCommonTree RBRACKET342_tree=null;

        try {
            // XQueryParser.g:805:9: (k= UNORDERED LBRACKET pm_Expr RBRACKET )
            // XQueryParser.g:805:13: k= UNORDERED LBRACKET pm_Expr RBRACKET
            {
            root_0 = (XQDTCommonTree)adaptor.nil();

            k=(CommonToken)match(input,UNORDERED,FOLLOW_UNORDERED_in_p_UnorderedExpr7066); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            k_tree = (XQDTCommonTree)adaptor.create(k);
            adaptor.addChild(root_0, k_tree);
            }
            if ( state.backtracking==0 ) {
              ak(k);
            }
            LBRACKET340=(CommonToken)match(input,LBRACKET,FOLLOW_LBRACKET_in_p_UnorderedExpr7070); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            LBRACKET340_tree = (XQDTCommonTree)adaptor.create(LBRACKET340);
            adaptor.addChild(root_0, LBRACKET340_tree);
            }
            pushFollow(FOLLOW_pm_Expr_in_p_UnorderedExpr7072);
            pm_Expr341=pm_Expr();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, pm_Expr341.getTree());
            RBRACKET342=(CommonToken)match(input,RBRACKET,FOLLOW_RBRACKET_in_p_UnorderedExpr7074); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            RBRACKET342_tree = (XQDTCommonTree)adaptor.create(RBRACKET342);
            adaptor.addChild(root_0, RBRACKET342_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (XQDTCommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (XQDTCommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "p_UnorderedExpr"

    public static class p_FunctionCall_return extends ParserRuleReturnScope {
        XQDTCommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "p_FunctionCall"
    // XQueryParser.g:810:1: p_FunctionCall : p_FQName LPAREN ( p_ExprSingle ( COMMA p_ExprSingle )* )? RPAREN ;
    public final XQueryParser.p_FunctionCall_return p_FunctionCall() throws RecognitionException {
        XQueryParser.p_FunctionCall_return retval = new XQueryParser.p_FunctionCall_return();
        retval.start = input.LT(1);

        XQDTCommonTree root_0 = null;

        CommonToken LPAREN344=null;
        CommonToken COMMA346=null;
        CommonToken RPAREN348=null;
        XQueryParser.p_FQName_return p_FQName343 = null;

        XQueryParser.p_ExprSingle_return p_ExprSingle345 = null;

        XQueryParser.p_ExprSingle_return p_ExprSingle347 = null;


        XQDTCommonTree LPAREN344_tree=null;
        XQDTCommonTree COMMA346_tree=null;
        XQDTCommonTree RPAREN348_tree=null;

        try {
            // XQueryParser.g:811:9: ( p_FQName LPAREN ( p_ExprSingle ( COMMA p_ExprSingle )* )? RPAREN )
            // XQueryParser.g:811:13: p_FQName LPAREN ( p_ExprSingle ( COMMA p_ExprSingle )* )? RPAREN
            {
            root_0 = (XQDTCommonTree)adaptor.nil();

            pushFollow(FOLLOW_p_FQName_in_p_FunctionCall7103);
            p_FQName343=p_FQName();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, p_FQName343.getTree());
            LPAREN344=(CommonToken)match(input,LPAREN,FOLLOW_LPAREN_in_p_FunctionCall7105); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            LPAREN344_tree = (XQDTCommonTree)adaptor.create(LPAREN344);
            adaptor.addChild(root_0, LPAREN344_tree);
            }
            // XQueryParser.g:811:29: ( p_ExprSingle ( COMMA p_ExprSingle )* )?
            int alt128=2;
            int LA128_0 = input.LA(1);

            if ( ((LA128_0>=ANCESTOR && LA128_0<=EXIT)||(LA128_0>=SEQUENTIAL && LA128_0<=LPAREN)||LA128_0==DOLLAR||(LA128_0>=STAR && LA128_0<=SMALLER)||(LA128_0>=SLASH && LA128_0<=DOT_DOT)||LA128_0==ATTR_SIGN||(LA128_0>=APOS && LA128_0<=QUOT)||LA128_0==L_NCName||(LA128_0>=L_Pragma && LA128_0<=L_DoubleLiteral)) ) {
                alt128=1;
            }
            switch (alt128) {
                case 1 :
                    // XQueryParser.g:811:30: p_ExprSingle ( COMMA p_ExprSingle )*
                    {
                    pushFollow(FOLLOW_p_ExprSingle_in_p_FunctionCall7108);
                    p_ExprSingle345=p_ExprSingle();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, p_ExprSingle345.getTree());
                    // XQueryParser.g:811:43: ( COMMA p_ExprSingle )*
                    loop127:
                    do {
                        int alt127=2;
                        int LA127_0 = input.LA(1);

                        if ( (LA127_0==COMMA) ) {
                            alt127=1;
                        }


                        switch (alt127) {
                    	case 1 :
                    	    // XQueryParser.g:811:44: COMMA p_ExprSingle
                    	    {
                    	    COMMA346=(CommonToken)match(input,COMMA,FOLLOW_COMMA_in_p_FunctionCall7111); if (state.failed) return retval;
                    	    if ( state.backtracking==0 ) {
                    	    COMMA346_tree = (XQDTCommonTree)adaptor.create(COMMA346);
                    	    adaptor.addChild(root_0, COMMA346_tree);
                    	    }
                    	    pushFollow(FOLLOW_p_ExprSingle_in_p_FunctionCall7113);
                    	    p_ExprSingle347=p_ExprSingle();

                    	    state._fsp--;
                    	    if (state.failed) return retval;
                    	    if ( state.backtracking==0 ) adaptor.addChild(root_0, p_ExprSingle347.getTree());

                    	    }
                    	    break;

                    	default :
                    	    break loop127;
                        }
                    } while (true);


                    }
                    break;

            }

            RPAREN348=(CommonToken)match(input,RPAREN,FOLLOW_RPAREN_in_p_FunctionCall7119); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            RPAREN348_tree = (XQDTCommonTree)adaptor.create(RPAREN348);
            adaptor.addChild(root_0, RPAREN348_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (XQDTCommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (XQDTCommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "p_FunctionCall"

    public static class p_Constructor_return extends ParserRuleReturnScope {
        XQDTCommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "p_Constructor"
    // XQueryParser.g:815:1: p_Constructor : ( p_DirectConstructor | p_ComputedConstructor );
    public final XQueryParser.p_Constructor_return p_Constructor() throws RecognitionException {
        XQueryParser.p_Constructor_return retval = new XQueryParser.p_Constructor_return();
        retval.start = input.LT(1);

        XQDTCommonTree root_0 = null;

        XQueryParser.p_DirectConstructor_return p_DirectConstructor349 = null;

        XQueryParser.p_ComputedConstructor_return p_ComputedConstructor350 = null;



        try {
            // XQueryParser.g:816:9: ( p_DirectConstructor | p_ComputedConstructor )
            int alt129=2;
            int LA129_0 = input.LA(1);

            if ( (LA129_0==SMALLER||(LA129_0>=L_DirCommentConstructor && LA129_0<=L_DirPIConstructor)) ) {
                alt129=1;
            }
            else if ( (LA129_0==ATTRIBUTE||LA129_0==COMMENT||LA129_0==DOCUMENT||LA129_0==ELEMENT||LA129_0==NAMESPACE||LA129_0==PROCESSING_INSTRUCTION||LA129_0==TEXT) ) {
                alt129=2;
            }
            else if ( (LA129_0==BINARY) && ((lc(MLS)))) {
                alt129=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 129, 0, input);

                throw nvae;
            }
            switch (alt129) {
                case 1 :
                    // XQueryParser.g:816:13: p_DirectConstructor
                    {
                    root_0 = (XQDTCommonTree)adaptor.nil();

                    pushFollow(FOLLOW_p_DirectConstructor_in_p_Constructor7151);
                    p_DirectConstructor349=p_DirectConstructor();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, p_DirectConstructor349.getTree());

                    }
                    break;
                case 2 :
                    // XQueryParser.g:816:35: p_ComputedConstructor
                    {
                    root_0 = (XQDTCommonTree)adaptor.nil();

                    pushFollow(FOLLOW_p_ComputedConstructor_in_p_Constructor7155);
                    p_ComputedConstructor350=p_ComputedConstructor();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, p_ComputedConstructor350.getTree());

                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (XQDTCommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (XQDTCommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "p_Constructor"

    public static class p_DirectConstructor_return extends ParserRuleReturnScope {
        XQDTCommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "p_DirectConstructor"
    // XQueryParser.g:820:1: p_DirectConstructor : ( p_DirElemConstructor | L_DirCommentConstructor | L_DirPIConstructor );
    public final XQueryParser.p_DirectConstructor_return p_DirectConstructor() throws RecognitionException {
        XQueryParser.p_DirectConstructor_return retval = new XQueryParser.p_DirectConstructor_return();
        retval.start = input.LT(1);

        XQDTCommonTree root_0 = null;

        CommonToken L_DirCommentConstructor352=null;
        CommonToken L_DirPIConstructor353=null;
        XQueryParser.p_DirElemConstructor_return p_DirElemConstructor351 = null;


        XQDTCommonTree L_DirCommentConstructor352_tree=null;
        XQDTCommonTree L_DirPIConstructor353_tree=null;

        try {
            // XQueryParser.g:821:9: ( p_DirElemConstructor | L_DirCommentConstructor | L_DirPIConstructor )
            int alt130=3;
            switch ( input.LA(1) ) {
            case SMALLER:
                {
                alt130=1;
                }
                break;
            case L_DirCommentConstructor:
                {
                alt130=2;
                }
                break;
            case L_DirPIConstructor:
                {
                alt130=3;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 130, 0, input);

                throw nvae;
            }

            switch (alt130) {
                case 1 :
                    // XQueryParser.g:821:13: p_DirElemConstructor
                    {
                    root_0 = (XQDTCommonTree)adaptor.nil();

                    pushFollow(FOLLOW_p_DirElemConstructor_in_p_DirectConstructor7183);
                    p_DirElemConstructor351=p_DirElemConstructor();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, p_DirElemConstructor351.getTree());

                    }
                    break;
                case 2 :
                    // XQueryParser.g:822:11: L_DirCommentConstructor
                    {
                    root_0 = (XQDTCommonTree)adaptor.nil();

                    L_DirCommentConstructor352=(CommonToken)match(input,L_DirCommentConstructor,FOLLOW_L_DirCommentConstructor_in_p_DirectConstructor7195); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    L_DirCommentConstructor352_tree = (XQDTCommonTree)adaptor.create(L_DirCommentConstructor352);
                    adaptor.addChild(root_0, L_DirCommentConstructor352_tree);
                    }

                    }
                    break;
                case 3 :
                    // XQueryParser.g:823:11: L_DirPIConstructor
                    {
                    root_0 = (XQDTCommonTree)adaptor.nil();

                    L_DirPIConstructor353=(CommonToken)match(input,L_DirPIConstructor,FOLLOW_L_DirPIConstructor_in_p_DirectConstructor7207); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    L_DirPIConstructor353_tree = (XQDTCommonTree)adaptor.create(L_DirPIConstructor353);
                    adaptor.addChild(root_0, L_DirPIConstructor353_tree);
                    }

                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (XQDTCommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (XQDTCommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "p_DirectConstructor"

    public static class p_DirElemConstructor_return extends ParserRuleReturnScope {
        XQDTCommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "p_DirElemConstructor"
    // XQueryParser.g:827:1: p_DirElemConstructor : SMALLER p_QName p_DirAttributeList ( EMPTY_CLOSE_TAG | ( GREATER ( pm_DirElemContent )* CLOSE_TAG p_QName ( S )? GREATER ) ) -> ^( DirElemConstructor ^( DirAttributeList ( p_DirAttributeList )* ) ^( DirElemContent ( pm_DirElemContent )* ) ) ;
    public final XQueryParser.p_DirElemConstructor_return p_DirElemConstructor() throws RecognitionException {
        XQueryParser.p_DirElemConstructor_return retval = new XQueryParser.p_DirElemConstructor_return();
        retval.start = input.LT(1);

        XQDTCommonTree root_0 = null;

        CommonToken SMALLER354=null;
        CommonToken EMPTY_CLOSE_TAG357=null;
        CommonToken GREATER358=null;
        CommonToken CLOSE_TAG360=null;
        CommonToken S362=null;
        CommonToken GREATER363=null;
        XQueryParser.p_QName_return p_QName355 = null;

        XQueryParser.p_DirAttributeList_return p_DirAttributeList356 = null;

        XQueryParser.pm_DirElemContent_return pm_DirElemContent359 = null;

        XQueryParser.p_QName_return p_QName361 = null;


        XQDTCommonTree SMALLER354_tree=null;
        XQDTCommonTree EMPTY_CLOSE_TAG357_tree=null;
        XQDTCommonTree GREATER358_tree=null;
        XQDTCommonTree CLOSE_TAG360_tree=null;
        XQDTCommonTree S362_tree=null;
        XQDTCommonTree GREATER363_tree=null;
        RewriteRuleTokenStream stream_CLOSE_TAG=new RewriteRuleTokenStream(adaptor,"token CLOSE_TAG");
        RewriteRuleTokenStream stream_GREATER=new RewriteRuleTokenStream(adaptor,"token GREATER");
        RewriteRuleTokenStream stream_S=new RewriteRuleTokenStream(adaptor,"token S");
        RewriteRuleTokenStream stream_EMPTY_CLOSE_TAG=new RewriteRuleTokenStream(adaptor,"token EMPTY_CLOSE_TAG");
        RewriteRuleTokenStream stream_SMALLER=new RewriteRuleTokenStream(adaptor,"token SMALLER");
        RewriteRuleSubtreeStream stream_p_DirAttributeList=new RewriteRuleSubtreeStream(adaptor,"rule p_DirAttributeList");
        RewriteRuleSubtreeStream stream_pm_DirElemContent=new RewriteRuleSubtreeStream(adaptor,"rule pm_DirElemContent");
        RewriteRuleSubtreeStream stream_p_QName=new RewriteRuleSubtreeStream(adaptor,"rule p_QName");
        try {
            // XQueryParser.g:828:9: ( SMALLER p_QName p_DirAttributeList ( EMPTY_CLOSE_TAG | ( GREATER ( pm_DirElemContent )* CLOSE_TAG p_QName ( S )? GREATER ) ) -> ^( DirElemConstructor ^( DirAttributeList ( p_DirAttributeList )* ) ^( DirElemContent ( pm_DirElemContent )* ) ) )
            // XQueryParser.g:828:13: SMALLER p_QName p_DirAttributeList ( EMPTY_CLOSE_TAG | ( GREATER ( pm_DirElemContent )* CLOSE_TAG p_QName ( S )? GREATER ) )
            {
            SMALLER354=(CommonToken)match(input,SMALLER,FOLLOW_SMALLER_in_p_DirElemConstructor7236); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_SMALLER.add(SMALLER354);

            if ( state.backtracking==0 ) {
              pushXMLLexer();
            }
            pushFollow(FOLLOW_p_QName_in_p_DirElemConstructor7252);
            p_QName355=p_QName();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_p_QName.add(p_QName355.getTree());
            pushFollow(FOLLOW_p_DirAttributeList_in_p_DirElemConstructor7254);
            p_DirAttributeList356=p_DirAttributeList();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_p_DirAttributeList.add(p_DirAttributeList356.getTree());
            // XQueryParser.g:830:13: ( EMPTY_CLOSE_TAG | ( GREATER ( pm_DirElemContent )* CLOSE_TAG p_QName ( S )? GREATER ) )
            int alt133=2;
            int LA133_0 = input.LA(1);

            if ( (LA133_0==EMPTY_CLOSE_TAG) ) {
                alt133=1;
            }
            else if ( (LA133_0==GREATER) ) {
                alt133=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 133, 0, input);

                throw nvae;
            }
            switch (alt133) {
                case 1 :
                    // XQueryParser.g:830:14: EMPTY_CLOSE_TAG
                    {
                    EMPTY_CLOSE_TAG357=(CommonToken)match(input,EMPTY_CLOSE_TAG,FOLLOW_EMPTY_CLOSE_TAG_in_p_DirElemConstructor7270); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_EMPTY_CLOSE_TAG.add(EMPTY_CLOSE_TAG357);


                    }
                    break;
                case 2 :
                    // XQueryParser.g:830:32: ( GREATER ( pm_DirElemContent )* CLOSE_TAG p_QName ( S )? GREATER )
                    {
                    // XQueryParser.g:830:32: ( GREATER ( pm_DirElemContent )* CLOSE_TAG p_QName ( S )? GREATER )
                    // XQueryParser.g:830:33: GREATER ( pm_DirElemContent )* CLOSE_TAG p_QName ( S )? GREATER
                    {
                    GREATER358=(CommonToken)match(input,GREATER,FOLLOW_GREATER_in_p_DirElemConstructor7275); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_GREATER.add(GREATER358);

                    // XQueryParser.g:830:41: ( pm_DirElemContent )*
                    loop131:
                    do {
                        int alt131=2;
                        int LA131_0 = input.LA(1);

                        if ( ((LA131_0>=L_ElementContentChar && LA131_0<=ESCAPE_RBRACKET)||LA131_0==LBRACKET||LA131_0==SMALLER||(LA131_0>=L_DirCommentConstructor && LA131_0<=L_DirPIConstructor)) ) {
                            alt131=1;
                        }


                        switch (alt131) {
                    	case 1 :
                    	    // XQueryParser.g:830:41: pm_DirElemContent
                    	    {
                    	    pushFollow(FOLLOW_pm_DirElemContent_in_p_DirElemConstructor7277);
                    	    pm_DirElemContent359=pm_DirElemContent();

                    	    state._fsp--;
                    	    if (state.failed) return retval;
                    	    if ( state.backtracking==0 ) stream_pm_DirElemContent.add(pm_DirElemContent359.getTree());

                    	    }
                    	    break;

                    	default :
                    	    break loop131;
                        }
                    } while (true);

                    CLOSE_TAG360=(CommonToken)match(input,CLOSE_TAG,FOLLOW_CLOSE_TAG_in_p_DirElemConstructor7280); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_CLOSE_TAG.add(CLOSE_TAG360);

                    pushFollow(FOLLOW_p_QName_in_p_DirElemConstructor7282);
                    p_QName361=p_QName();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_p_QName.add(p_QName361.getTree());
                    // XQueryParser.g:830:78: ( S )?
                    int alt132=2;
                    int LA132_0 = input.LA(1);

                    if ( (LA132_0==S) ) {
                        alt132=1;
                    }
                    switch (alt132) {
                        case 1 :
                            // XQueryParser.g:830:78: S
                            {
                            S362=(CommonToken)match(input,S,FOLLOW_S_in_p_DirElemConstructor7284); if (state.failed) return retval; 
                            if ( state.backtracking==0 ) stream_S.add(S362);


                            }
                            break;

                    }

                    GREATER363=(CommonToken)match(input,GREATER,FOLLOW_GREATER_in_p_DirElemConstructor7287); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_GREATER.add(GREATER363);


                    }


                    }
                    break;

            }



            // AST REWRITE
            // elements: pm_DirElemContent, p_DirAttributeList
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (XQDTCommonTree)adaptor.nil();
            // 831:17: -> ^( DirElemConstructor ^( DirAttributeList ( p_DirAttributeList )* ) ^( DirElemContent ( pm_DirElemContent )* ) )
            {
                // XQueryParser.g:831:20: ^( DirElemConstructor ^( DirAttributeList ( p_DirAttributeList )* ) ^( DirElemContent ( pm_DirElemContent )* ) )
                {
                XQDTCommonTree root_1 = (XQDTCommonTree)adaptor.nil();
                root_1 = (XQDTCommonTree)adaptor.becomeRoot((XQDTCommonTree)adaptor.create(DirElemConstructor, "DirElemConstructor"), root_1);

                // XQueryParser.g:831:41: ^( DirAttributeList ( p_DirAttributeList )* )
                {
                XQDTCommonTree root_2 = (XQDTCommonTree)adaptor.nil();
                root_2 = (XQDTCommonTree)adaptor.becomeRoot((XQDTCommonTree)adaptor.create(DirAttributeList, "DirAttributeList"), root_2);

                // XQueryParser.g:831:60: ( p_DirAttributeList )*
                while ( stream_p_DirAttributeList.hasNext() ) {
                    adaptor.addChild(root_2, stream_p_DirAttributeList.nextTree());

                }
                stream_p_DirAttributeList.reset();

                adaptor.addChild(root_1, root_2);
                }
                // XQueryParser.g:831:81: ^( DirElemContent ( pm_DirElemContent )* )
                {
                XQDTCommonTree root_2 = (XQDTCommonTree)adaptor.nil();
                root_2 = (XQDTCommonTree)adaptor.becomeRoot((XQDTCommonTree)adaptor.create(DirElemContent, "DirElemContent"), root_2);

                // XQueryParser.g:831:98: ( pm_DirElemContent )*
                while ( stream_pm_DirElemContent.hasNext() ) {
                    adaptor.addChild(root_2, stream_pm_DirElemContent.nextTree());

                }
                stream_pm_DirElemContent.reset();

                adaptor.addChild(root_1, root_2);
                }

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (XQDTCommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (XQDTCommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            popLexer();
        }
        return retval;
    }
    // $ANTLR end "p_DirElemConstructor"

    public static class p_DirAttributeList_return extends ParserRuleReturnScope {
        XQDTCommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "p_DirAttributeList"
    // XQueryParser.g:836:1: p_DirAttributeList : ( S ( p_QName ( S )? EQUAL ( S )? p_DirAttributeValue )? )* ;
    public final XQueryParser.p_DirAttributeList_return p_DirAttributeList() throws RecognitionException {
        XQueryParser.p_DirAttributeList_return retval = new XQueryParser.p_DirAttributeList_return();
        retval.start = input.LT(1);

        XQDTCommonTree root_0 = null;

        CommonToken S364=null;
        CommonToken S366=null;
        CommonToken EQUAL367=null;
        CommonToken S368=null;
        XQueryParser.p_QName_return p_QName365 = null;

        XQueryParser.p_DirAttributeValue_return p_DirAttributeValue369 = null;


        XQDTCommonTree S364_tree=null;
        XQDTCommonTree S366_tree=null;
        XQDTCommonTree EQUAL367_tree=null;
        XQDTCommonTree S368_tree=null;

        try {
            // XQueryParser.g:837:9: ( ( S ( p_QName ( S )? EQUAL ( S )? p_DirAttributeValue )? )* )
            // XQueryParser.g:837:11: ( S ( p_QName ( S )? EQUAL ( S )? p_DirAttributeValue )? )*
            {
            root_0 = (XQDTCommonTree)adaptor.nil();

            // XQueryParser.g:837:11: ( S ( p_QName ( S )? EQUAL ( S )? p_DirAttributeValue )? )*
            loop137:
            do {
                int alt137=2;
                int LA137_0 = input.LA(1);

                if ( (LA137_0==S) ) {
                    alt137=1;
                }


                switch (alt137) {
            	case 1 :
            	    // XQueryParser.g:837:12: S ( p_QName ( S )? EQUAL ( S )? p_DirAttributeValue )?
            	    {
            	    S364=(CommonToken)match(input,S,FOLLOW_S_in_p_DirAttributeList7364); if (state.failed) return retval;
            	    if ( state.backtracking==0 ) {
            	    S364_tree = (XQDTCommonTree)adaptor.create(S364);
            	    adaptor.addChild(root_0, S364_tree);
            	    }
            	    // XQueryParser.g:837:14: ( p_QName ( S )? EQUAL ( S )? p_DirAttributeValue )?
            	    int alt136=2;
            	    int LA136_0 = input.LA(1);

            	    if ( ((LA136_0>=ANCESTOR && LA136_0<=EXIT)||(LA136_0>=SEQUENTIAL && LA136_0<=QUOT_ER)||LA136_0==L_NCName) ) {
            	        alt136=1;
            	    }
            	    switch (alt136) {
            	        case 1 :
            	            // XQueryParser.g:837:15: p_QName ( S )? EQUAL ( S )? p_DirAttributeValue
            	            {
            	            pushFollow(FOLLOW_p_QName_in_p_DirAttributeList7367);
            	            p_QName365=p_QName();

            	            state._fsp--;
            	            if (state.failed) return retval;
            	            if ( state.backtracking==0 ) adaptor.addChild(root_0, p_QName365.getTree());
            	            // XQueryParser.g:837:23: ( S )?
            	            int alt134=2;
            	            int LA134_0 = input.LA(1);

            	            if ( (LA134_0==S) ) {
            	                alt134=1;
            	            }
            	            switch (alt134) {
            	                case 1 :
            	                    // XQueryParser.g:837:23: S
            	                    {
            	                    S366=(CommonToken)match(input,S,FOLLOW_S_in_p_DirAttributeList7369); if (state.failed) return retval;
            	                    if ( state.backtracking==0 ) {
            	                    S366_tree = (XQDTCommonTree)adaptor.create(S366);
            	                    adaptor.addChild(root_0, S366_tree);
            	                    }

            	                    }
            	                    break;

            	            }

            	            EQUAL367=(CommonToken)match(input,EQUAL,FOLLOW_EQUAL_in_p_DirAttributeList7372); if (state.failed) return retval;
            	            if ( state.backtracking==0 ) {
            	            EQUAL367_tree = (XQDTCommonTree)adaptor.create(EQUAL367);
            	            adaptor.addChild(root_0, EQUAL367_tree);
            	            }
            	            // XQueryParser.g:837:32: ( S )?
            	            int alt135=2;
            	            int LA135_0 = input.LA(1);

            	            if ( (LA135_0==S) ) {
            	                alt135=1;
            	            }
            	            switch (alt135) {
            	                case 1 :
            	                    // XQueryParser.g:837:32: S
            	                    {
            	                    S368=(CommonToken)match(input,S,FOLLOW_S_in_p_DirAttributeList7374); if (state.failed) return retval;
            	                    if ( state.backtracking==0 ) {
            	                    S368_tree = (XQDTCommonTree)adaptor.create(S368);
            	                    adaptor.addChild(root_0, S368_tree);
            	                    }

            	                    }
            	                    break;

            	            }

            	            pushFollow(FOLLOW_p_DirAttributeValue_in_p_DirAttributeList7377);
            	            p_DirAttributeValue369=p_DirAttributeValue();

            	            state._fsp--;
            	            if (state.failed) return retval;
            	            if ( state.backtracking==0 ) adaptor.addChild(root_0, p_DirAttributeValue369.getTree());

            	            }
            	            break;

            	    }


            	    }
            	    break;

            	default :
            	    break loop137;
                }
            } while (true);


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (XQDTCommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (XQDTCommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "p_DirAttributeList"

    public static class p_DirAttributeValue_return extends ParserRuleReturnScope {
        XQDTCommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "p_DirAttributeValue"
    // XQueryParser.g:841:1: p_DirAttributeValue : ( ( QUOT ( ESCAPE_QUOT | pm_QuotAttrValueContent )* QUOT ) -> ^( DirAttributeValue ( pm_QuotAttrValueContent )* ) | ( APOS ( ESCAPE_APOS | pm_AposAttrValueContent )* APOS ) -> ^( DirAttributeValue ( pm_AposAttrValueContent )* ) );
    public final XQueryParser.p_DirAttributeValue_return p_DirAttributeValue() throws RecognitionException {
        XQueryParser.p_DirAttributeValue_return retval = new XQueryParser.p_DirAttributeValue_return();
        retval.start = input.LT(1);

        XQDTCommonTree root_0 = null;

        CommonToken QUOT370=null;
        CommonToken ESCAPE_QUOT371=null;
        CommonToken QUOT373=null;
        CommonToken APOS374=null;
        CommonToken ESCAPE_APOS375=null;
        CommonToken APOS377=null;
        XQueryParser.pm_QuotAttrValueContent_return pm_QuotAttrValueContent372 = null;

        XQueryParser.pm_AposAttrValueContent_return pm_AposAttrValueContent376 = null;


        XQDTCommonTree QUOT370_tree=null;
        XQDTCommonTree ESCAPE_QUOT371_tree=null;
        XQDTCommonTree QUOT373_tree=null;
        XQDTCommonTree APOS374_tree=null;
        XQDTCommonTree ESCAPE_APOS375_tree=null;
        XQDTCommonTree APOS377_tree=null;
        RewriteRuleTokenStream stream_ESCAPE_QUOT=new RewriteRuleTokenStream(adaptor,"token ESCAPE_QUOT");
        RewriteRuleTokenStream stream_APOS=new RewriteRuleTokenStream(adaptor,"token APOS");
        RewriteRuleTokenStream stream_ESCAPE_APOS=new RewriteRuleTokenStream(adaptor,"token ESCAPE_APOS");
        RewriteRuleTokenStream stream_QUOT=new RewriteRuleTokenStream(adaptor,"token QUOT");
        RewriteRuleSubtreeStream stream_pm_QuotAttrValueContent=new RewriteRuleSubtreeStream(adaptor,"rule pm_QuotAttrValueContent");
        RewriteRuleSubtreeStream stream_pm_AposAttrValueContent=new RewriteRuleSubtreeStream(adaptor,"rule pm_AposAttrValueContent");
        try {
            // XQueryParser.g:842:9: ( ( QUOT ( ESCAPE_QUOT | pm_QuotAttrValueContent )* QUOT ) -> ^( DirAttributeValue ( pm_QuotAttrValueContent )* ) | ( APOS ( ESCAPE_APOS | pm_AposAttrValueContent )* APOS ) -> ^( DirAttributeValue ( pm_AposAttrValueContent )* ) )
            int alt140=2;
            int LA140_0 = input.LA(1);

            if ( (LA140_0==QUOT) ) {
                alt140=1;
            }
            else if ( (LA140_0==APOS) ) {
                alt140=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 140, 0, input);

                throw nvae;
            }
            switch (alt140) {
                case 1 :
                    // XQueryParser.g:842:11: ( QUOT ( ESCAPE_QUOT | pm_QuotAttrValueContent )* QUOT )
                    {
                    // XQueryParser.g:842:11: ( QUOT ( ESCAPE_QUOT | pm_QuotAttrValueContent )* QUOT )
                    // XQueryParser.g:842:12: QUOT ( ESCAPE_QUOT | pm_QuotAttrValueContent )* QUOT
                    {
                    QUOT370=(CommonToken)match(input,QUOT,FOLLOW_QUOT_in_p_DirAttributeValue7408); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_QUOT.add(QUOT370);

                    // XQueryParser.g:842:17: ( ESCAPE_QUOT | pm_QuotAttrValueContent )*
                    loop138:
                    do {
                        int alt138=3;
                        int LA138_0 = input.LA(1);

                        if ( (LA138_0==ESCAPE_QUOT) ) {
                            alt138=1;
                        }
                        else if ( (LA138_0==L_QuotAttrContentChar||(LA138_0>=L_PredefinedEntityRef && LA138_0<=ESCAPE_RBRACKET)||LA138_0==LBRACKET) ) {
                            alt138=2;
                        }


                        switch (alt138) {
                    	case 1 :
                    	    // XQueryParser.g:842:18: ESCAPE_QUOT
                    	    {
                    	    ESCAPE_QUOT371=(CommonToken)match(input,ESCAPE_QUOT,FOLLOW_ESCAPE_QUOT_in_p_DirAttributeValue7411); if (state.failed) return retval; 
                    	    if ( state.backtracking==0 ) stream_ESCAPE_QUOT.add(ESCAPE_QUOT371);


                    	    }
                    	    break;
                    	case 2 :
                    	    // XQueryParser.g:842:32: pm_QuotAttrValueContent
                    	    {
                    	    pushFollow(FOLLOW_pm_QuotAttrValueContent_in_p_DirAttributeValue7415);
                    	    pm_QuotAttrValueContent372=pm_QuotAttrValueContent();

                    	    state._fsp--;
                    	    if (state.failed) return retval;
                    	    if ( state.backtracking==0 ) stream_pm_QuotAttrValueContent.add(pm_QuotAttrValueContent372.getTree());

                    	    }
                    	    break;

                    	default :
                    	    break loop138;
                        }
                    } while (true);

                    QUOT373=(CommonToken)match(input,QUOT,FOLLOW_QUOT_in_p_DirAttributeValue7419); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_QUOT.add(QUOT373);


                    }



                    // AST REWRITE
                    // elements: pm_QuotAttrValueContent
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (XQDTCommonTree)adaptor.nil();
                    // 843:17: -> ^( DirAttributeValue ( pm_QuotAttrValueContent )* )
                    {
                        // XQueryParser.g:843:20: ^( DirAttributeValue ( pm_QuotAttrValueContent )* )
                        {
                        XQDTCommonTree root_1 = (XQDTCommonTree)adaptor.nil();
                        root_1 = (XQDTCommonTree)adaptor.becomeRoot((XQDTCommonTree)adaptor.create(DirAttributeValue, "DirAttributeValue"), root_1);

                        // XQueryParser.g:843:40: ( pm_QuotAttrValueContent )*
                        while ( stream_pm_QuotAttrValueContent.hasNext() ) {
                            adaptor.addChild(root_1, stream_pm_QuotAttrValueContent.nextTree());

                        }
                        stream_pm_QuotAttrValueContent.reset();

                        adaptor.addChild(root_0, root_1);
                        }

                    }

                    retval.tree = root_0;}
                    }
                    break;
                case 2 :
                    // XQueryParser.g:844:11: ( APOS ( ESCAPE_APOS | pm_AposAttrValueContent )* APOS )
                    {
                    // XQueryParser.g:844:11: ( APOS ( ESCAPE_APOS | pm_AposAttrValueContent )* APOS )
                    // XQueryParser.g:844:12: APOS ( ESCAPE_APOS | pm_AposAttrValueContent )* APOS
                    {
                    APOS374=(CommonToken)match(input,APOS,FOLLOW_APOS_in_p_DirAttributeValue7458); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_APOS.add(APOS374);

                    // XQueryParser.g:844:17: ( ESCAPE_APOS | pm_AposAttrValueContent )*
                    loop139:
                    do {
                        int alt139=3;
                        int LA139_0 = input.LA(1);

                        if ( (LA139_0==ESCAPE_APOS) ) {
                            alt139=1;
                        }
                        else if ( (LA139_0==L_AposAttrContentChar||(LA139_0>=L_PredefinedEntityRef && LA139_0<=ESCAPE_RBRACKET)||LA139_0==LBRACKET) ) {
                            alt139=2;
                        }


                        switch (alt139) {
                    	case 1 :
                    	    // XQueryParser.g:844:18: ESCAPE_APOS
                    	    {
                    	    ESCAPE_APOS375=(CommonToken)match(input,ESCAPE_APOS,FOLLOW_ESCAPE_APOS_in_p_DirAttributeValue7461); if (state.failed) return retval; 
                    	    if ( state.backtracking==0 ) stream_ESCAPE_APOS.add(ESCAPE_APOS375);


                    	    }
                    	    break;
                    	case 2 :
                    	    // XQueryParser.g:844:32: pm_AposAttrValueContent
                    	    {
                    	    pushFollow(FOLLOW_pm_AposAttrValueContent_in_p_DirAttributeValue7465);
                    	    pm_AposAttrValueContent376=pm_AposAttrValueContent();

                    	    state._fsp--;
                    	    if (state.failed) return retval;
                    	    if ( state.backtracking==0 ) stream_pm_AposAttrValueContent.add(pm_AposAttrValueContent376.getTree());

                    	    }
                    	    break;

                    	default :
                    	    break loop139;
                        }
                    } while (true);

                    APOS377=(CommonToken)match(input,APOS,FOLLOW_APOS_in_p_DirAttributeValue7469); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_APOS.add(APOS377);


                    }



                    // AST REWRITE
                    // elements: pm_AposAttrValueContent
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (XQDTCommonTree)adaptor.nil();
                    // 845:17: -> ^( DirAttributeValue ( pm_AposAttrValueContent )* )
                    {
                        // XQueryParser.g:845:20: ^( DirAttributeValue ( pm_AposAttrValueContent )* )
                        {
                        XQDTCommonTree root_1 = (XQDTCommonTree)adaptor.nil();
                        root_1 = (XQDTCommonTree)adaptor.becomeRoot((XQDTCommonTree)adaptor.create(DirAttributeValue, "DirAttributeValue"), root_1);

                        // XQueryParser.g:845:40: ( pm_AposAttrValueContent )*
                        while ( stream_pm_AposAttrValueContent.hasNext() ) {
                            adaptor.addChild(root_1, stream_pm_AposAttrValueContent.nextTree());

                        }
                        stream_pm_AposAttrValueContent.reset();

                        adaptor.addChild(root_0, root_1);
                        }

                    }

                    retval.tree = root_0;}
                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (XQDTCommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (XQDTCommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "p_DirAttributeValue"

    public static class pm_QuotAttrValueContent_return extends ParserRuleReturnScope {
        XQDTCommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "pm_QuotAttrValueContent"
    // XQueryParser.g:849:1: pm_QuotAttrValueContent : ( pg_QuotAttrContentChar | pg_CommonContent | p_ElemEnclosedExpr );
    public final XQueryParser.pm_QuotAttrValueContent_return pm_QuotAttrValueContent() throws RecognitionException {
        XQueryParser.pm_QuotAttrValueContent_return retval = new XQueryParser.pm_QuotAttrValueContent_return();
        retval.start = input.LT(1);

        XQDTCommonTree root_0 = null;

        XQueryParser.pg_QuotAttrContentChar_return pg_QuotAttrContentChar378 = null;

        XQueryParser.pg_CommonContent_return pg_CommonContent379 = null;

        XQueryParser.p_ElemEnclosedExpr_return p_ElemEnclosedExpr380 = null;



        try {
            // XQueryParser.g:850:9: ( pg_QuotAttrContentChar | pg_CommonContent | p_ElemEnclosedExpr )
            int alt141=3;
            switch ( input.LA(1) ) {
            case L_QuotAttrContentChar:
                {
                alt141=1;
                }
                break;
            case L_PredefinedEntityRef:
            case L_CharRef:
            case ESCAPE_LBRACKET:
            case ESCAPE_RBRACKET:
                {
                alt141=2;
                }
                break;
            case LBRACKET:
                {
                alt141=3;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 141, 0, input);

                throw nvae;
            }

            switch (alt141) {
                case 1 :
                    // XQueryParser.g:850:11: pg_QuotAttrContentChar
                    {
                    root_0 = (XQDTCommonTree)adaptor.nil();

                    pushFollow(FOLLOW_pg_QuotAttrContentChar_in_pm_QuotAttrValueContent7521);
                    pg_QuotAttrContentChar378=pg_QuotAttrContentChar();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, pg_QuotAttrContentChar378.getTree());

                    }
                    break;
                case 2 :
                    // XQueryParser.g:850:36: pg_CommonContent
                    {
                    root_0 = (XQDTCommonTree)adaptor.nil();

                    pushFollow(FOLLOW_pg_CommonContent_in_pm_QuotAttrValueContent7525);
                    pg_CommonContent379=pg_CommonContent();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, pg_CommonContent379.getTree());

                    }
                    break;
                case 3 :
                    // XQueryParser.g:850:55: p_ElemEnclosedExpr
                    {
                    root_0 = (XQDTCommonTree)adaptor.nil();

                    pushFollow(FOLLOW_p_ElemEnclosedExpr_in_pm_QuotAttrValueContent7529);
                    p_ElemEnclosedExpr380=p_ElemEnclosedExpr();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, p_ElemEnclosedExpr380.getTree());

                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (XQDTCommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (XQDTCommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "pm_QuotAttrValueContent"

    public static class pg_QuotAttrContentChar_return extends ParserRuleReturnScope {
        XQDTCommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "pg_QuotAttrContentChar"
    // XQueryParser.g:857:1: pg_QuotAttrContentChar : L_QuotAttrContentChar -> ^( AttributeValueChar L_QuotAttrContentChar ) ;
    public final XQueryParser.pg_QuotAttrContentChar_return pg_QuotAttrContentChar() throws RecognitionException {
        XQueryParser.pg_QuotAttrContentChar_return retval = new XQueryParser.pg_QuotAttrContentChar_return();
        retval.start = input.LT(1);

        XQDTCommonTree root_0 = null;

        CommonToken L_QuotAttrContentChar381=null;

        XQDTCommonTree L_QuotAttrContentChar381_tree=null;
        RewriteRuleTokenStream stream_L_QuotAttrContentChar=new RewriteRuleTokenStream(adaptor,"token L_QuotAttrContentChar");

        try {
            // XQueryParser.g:858:9: ( L_QuotAttrContentChar -> ^( AttributeValueChar L_QuotAttrContentChar ) )
            // XQueryParser.g:858:11: L_QuotAttrContentChar
            {
            L_QuotAttrContentChar381=(CommonToken)match(input,L_QuotAttrContentChar,FOLLOW_L_QuotAttrContentChar_in_pg_QuotAttrContentChar7558); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_L_QuotAttrContentChar.add(L_QuotAttrContentChar381);



            // AST REWRITE
            // elements: L_QuotAttrContentChar
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (XQDTCommonTree)adaptor.nil();
            // 859:17: -> ^( AttributeValueChar L_QuotAttrContentChar )
            {
                // XQueryParser.g:859:20: ^( AttributeValueChar L_QuotAttrContentChar )
                {
                XQDTCommonTree root_1 = (XQDTCommonTree)adaptor.nil();
                root_1 = (XQDTCommonTree)adaptor.becomeRoot((XQDTCommonTree)adaptor.create(AttributeValueChar, "AttributeValueChar"), root_1);

                adaptor.addChild(root_1, stream_L_QuotAttrContentChar.nextNode());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (XQDTCommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (XQDTCommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "pg_QuotAttrContentChar"

    public static class pm_AposAttrValueContent_return extends ParserRuleReturnScope {
        XQDTCommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "pm_AposAttrValueContent"
    // XQueryParser.g:864:1: pm_AposAttrValueContent : ( pg_AposAttrContentChar | pg_CommonContent | p_ElemEnclosedExpr );
    public final XQueryParser.pm_AposAttrValueContent_return pm_AposAttrValueContent() throws RecognitionException {
        XQueryParser.pm_AposAttrValueContent_return retval = new XQueryParser.pm_AposAttrValueContent_return();
        retval.start = input.LT(1);

        XQDTCommonTree root_0 = null;

        XQueryParser.pg_AposAttrContentChar_return pg_AposAttrContentChar382 = null;

        XQueryParser.pg_CommonContent_return pg_CommonContent383 = null;

        XQueryParser.p_ElemEnclosedExpr_return p_ElemEnclosedExpr384 = null;



        try {
            // XQueryParser.g:865:9: ( pg_AposAttrContentChar | pg_CommonContent | p_ElemEnclosedExpr )
            int alt142=3;
            switch ( input.LA(1) ) {
            case L_AposAttrContentChar:
                {
                alt142=1;
                }
                break;
            case L_PredefinedEntityRef:
            case L_CharRef:
            case ESCAPE_LBRACKET:
            case ESCAPE_RBRACKET:
                {
                alt142=2;
                }
                break;
            case LBRACKET:
                {
                alt142=3;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 142, 0, input);

                throw nvae;
            }

            switch (alt142) {
                case 1 :
                    // XQueryParser.g:865:13: pg_AposAttrContentChar
                    {
                    root_0 = (XQDTCommonTree)adaptor.nil();

                    pushFollow(FOLLOW_pg_AposAttrContentChar_in_pm_AposAttrValueContent7611);
                    pg_AposAttrContentChar382=pg_AposAttrContentChar();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, pg_AposAttrContentChar382.getTree());

                    }
                    break;
                case 2 :
                    // XQueryParser.g:865:38: pg_CommonContent
                    {
                    root_0 = (XQDTCommonTree)adaptor.nil();

                    pushFollow(FOLLOW_pg_CommonContent_in_pm_AposAttrValueContent7615);
                    pg_CommonContent383=pg_CommonContent();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, pg_CommonContent383.getTree());

                    }
                    break;
                case 3 :
                    // XQueryParser.g:865:57: p_ElemEnclosedExpr
                    {
                    root_0 = (XQDTCommonTree)adaptor.nil();

                    pushFollow(FOLLOW_p_ElemEnclosedExpr_in_pm_AposAttrValueContent7619);
                    p_ElemEnclosedExpr384=p_ElemEnclosedExpr();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, p_ElemEnclosedExpr384.getTree());

                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (XQDTCommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (XQDTCommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "pm_AposAttrValueContent"

    public static class pg_AposAttrContentChar_return extends ParserRuleReturnScope {
        XQDTCommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "pg_AposAttrContentChar"
    // XQueryParser.g:872:1: pg_AposAttrContentChar : L_AposAttrContentChar -> ^( AttributeValueChar L_AposAttrContentChar ) ;
    public final XQueryParser.pg_AposAttrContentChar_return pg_AposAttrContentChar() throws RecognitionException {
        XQueryParser.pg_AposAttrContentChar_return retval = new XQueryParser.pg_AposAttrContentChar_return();
        retval.start = input.LT(1);

        XQDTCommonTree root_0 = null;

        CommonToken L_AposAttrContentChar385=null;

        XQDTCommonTree L_AposAttrContentChar385_tree=null;
        RewriteRuleTokenStream stream_L_AposAttrContentChar=new RewriteRuleTokenStream(adaptor,"token L_AposAttrContentChar");

        try {
            // XQueryParser.g:873:9: ( L_AposAttrContentChar -> ^( AttributeValueChar L_AposAttrContentChar ) )
            // XQueryParser.g:873:11: L_AposAttrContentChar
            {
            L_AposAttrContentChar385=(CommonToken)match(input,L_AposAttrContentChar,FOLLOW_L_AposAttrContentChar_in_pg_AposAttrContentChar7648); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_L_AposAttrContentChar.add(L_AposAttrContentChar385);



            // AST REWRITE
            // elements: L_AposAttrContentChar
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (XQDTCommonTree)adaptor.nil();
            // 874:17: -> ^( AttributeValueChar L_AposAttrContentChar )
            {
                // XQueryParser.g:874:20: ^( AttributeValueChar L_AposAttrContentChar )
                {
                XQDTCommonTree root_1 = (XQDTCommonTree)adaptor.nil();
                root_1 = (XQDTCommonTree)adaptor.becomeRoot((XQDTCommonTree)adaptor.create(AttributeValueChar, "AttributeValueChar"), root_1);

                adaptor.addChild(root_1, stream_L_AposAttrContentChar.nextNode());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (XQDTCommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (XQDTCommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "pg_AposAttrContentChar"

    public static class pm_DirElemContent_return extends ParserRuleReturnScope {
        XQDTCommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "pm_DirElemContent"
    // XQueryParser.g:879:1: pm_DirElemContent : ( p_DirectConstructor | L_CDataSection | p_ElemEnclosedExpr | pg_CommonContent | pg_ElementContentChar );
    public final XQueryParser.pm_DirElemContent_return pm_DirElemContent() throws RecognitionException {
        XQueryParser.pm_DirElemContent_return retval = new XQueryParser.pm_DirElemContent_return();
        retval.start = input.LT(1);

        XQDTCommonTree root_0 = null;

        CommonToken L_CDataSection387=null;
        XQueryParser.p_DirectConstructor_return p_DirectConstructor386 = null;

        XQueryParser.p_ElemEnclosedExpr_return p_ElemEnclosedExpr388 = null;

        XQueryParser.pg_CommonContent_return pg_CommonContent389 = null;

        XQueryParser.pg_ElementContentChar_return pg_ElementContentChar390 = null;


        XQDTCommonTree L_CDataSection387_tree=null;

        try {
            // XQueryParser.g:880:9: ( p_DirectConstructor | L_CDataSection | p_ElemEnclosedExpr | pg_CommonContent | pg_ElementContentChar )
            int alt143=5;
            switch ( input.LA(1) ) {
            case SMALLER:
            case L_DirCommentConstructor:
            case L_DirPIConstructor:
                {
                alt143=1;
                }
                break;
            case L_CDataSection:
                {
                alt143=2;
                }
                break;
            case LBRACKET:
                {
                alt143=3;
                }
                break;
            case L_PredefinedEntityRef:
            case L_CharRef:
            case ESCAPE_LBRACKET:
            case ESCAPE_RBRACKET:
                {
                alt143=4;
                }
                break;
            case L_ElementContentChar:
                {
                alt143=5;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 143, 0, input);

                throw nvae;
            }

            switch (alt143) {
                case 1 :
                    // XQueryParser.g:880:11: p_DirectConstructor
                    {
                    root_0 = (XQDTCommonTree)adaptor.nil();

                    pushFollow(FOLLOW_p_DirectConstructor_in_pm_DirElemContent7699);
                    p_DirectConstructor386=p_DirectConstructor();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, p_DirectConstructor386.getTree());

                    }
                    break;
                case 2 :
                    // XQueryParser.g:881:11: L_CDataSection
                    {
                    root_0 = (XQDTCommonTree)adaptor.nil();

                    L_CDataSection387=(CommonToken)match(input,L_CDataSection,FOLLOW_L_CDataSection_in_pm_DirElemContent7711); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    L_CDataSection387_tree = (XQDTCommonTree)adaptor.create(L_CDataSection387);
                    adaptor.addChild(root_0, L_CDataSection387_tree);
                    }

                    }
                    break;
                case 3 :
                    // XQueryParser.g:882:11: p_ElemEnclosedExpr
                    {
                    root_0 = (XQDTCommonTree)adaptor.nil();

                    pushFollow(FOLLOW_p_ElemEnclosedExpr_in_pm_DirElemContent7723);
                    p_ElemEnclosedExpr388=p_ElemEnclosedExpr();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, p_ElemEnclosedExpr388.getTree());

                    }
                    break;
                case 4 :
                    // XQueryParser.g:883:11: pg_CommonContent
                    {
                    root_0 = (XQDTCommonTree)adaptor.nil();

                    pushFollow(FOLLOW_pg_CommonContent_in_pm_DirElemContent7735);
                    pg_CommonContent389=pg_CommonContent();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, pg_CommonContent389.getTree());

                    }
                    break;
                case 5 :
                    // XQueryParser.g:884:11: pg_ElementContentChar
                    {
                    root_0 = (XQDTCommonTree)adaptor.nil();

                    pushFollow(FOLLOW_pg_ElementContentChar_in_pm_DirElemContent7747);
                    pg_ElementContentChar390=pg_ElementContentChar();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, pg_ElementContentChar390.getTree());

                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (XQDTCommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (XQDTCommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "pm_DirElemContent"

    public static class pg_ElementContentChar_return extends ParserRuleReturnScope {
        XQDTCommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "pg_ElementContentChar"
    // XQueryParser.g:891:1: pg_ElementContentChar : L_ElementContentChar -> ^( ElementContentChar L_ElementContentChar ) ;
    public final XQueryParser.pg_ElementContentChar_return pg_ElementContentChar() throws RecognitionException {
        XQueryParser.pg_ElementContentChar_return retval = new XQueryParser.pg_ElementContentChar_return();
        retval.start = input.LT(1);

        XQDTCommonTree root_0 = null;

        CommonToken L_ElementContentChar391=null;

        XQDTCommonTree L_ElementContentChar391_tree=null;
        RewriteRuleTokenStream stream_L_ElementContentChar=new RewriteRuleTokenStream(adaptor,"token L_ElementContentChar");

        try {
            // XQueryParser.g:892:9: ( L_ElementContentChar -> ^( ElementContentChar L_ElementContentChar ) )
            // XQueryParser.g:892:11: L_ElementContentChar
            {
            L_ElementContentChar391=(CommonToken)match(input,L_ElementContentChar,FOLLOW_L_ElementContentChar_in_pg_ElementContentChar7776); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_L_ElementContentChar.add(L_ElementContentChar391);



            // AST REWRITE
            // elements: L_ElementContentChar
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (XQDTCommonTree)adaptor.nil();
            // 893:17: -> ^( ElementContentChar L_ElementContentChar )
            {
                // XQueryParser.g:893:20: ^( ElementContentChar L_ElementContentChar )
                {
                XQDTCommonTree root_1 = (XQDTCommonTree)adaptor.nil();
                root_1 = (XQDTCommonTree)adaptor.becomeRoot((XQDTCommonTree)adaptor.create(ElementContentChar, "ElementContentChar"), root_1);

                adaptor.addChild(root_1, stream_L_ElementContentChar.nextNode());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (XQDTCommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (XQDTCommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "pg_ElementContentChar"

    public static class pg_CommonContent_return extends ParserRuleReturnScope {
        XQDTCommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "pg_CommonContent"
    // XQueryParser.g:901:1: pg_CommonContent : pm_CommonContent -> ^( CommonContent pm_CommonContent ) ;
    public final XQueryParser.pg_CommonContent_return pg_CommonContent() throws RecognitionException {
        XQueryParser.pg_CommonContent_return retval = new XQueryParser.pg_CommonContent_return();
        retval.start = input.LT(1);

        XQDTCommonTree root_0 = null;

        XQueryParser.pm_CommonContent_return pm_CommonContent392 = null;


        RewriteRuleSubtreeStream stream_pm_CommonContent=new RewriteRuleSubtreeStream(adaptor,"rule pm_CommonContent");
        try {
            // XQueryParser.g:902:9: ( pm_CommonContent -> ^( CommonContent pm_CommonContent ) )
            // XQueryParser.g:902:13: pm_CommonContent
            {
            pushFollow(FOLLOW_pm_CommonContent_in_pg_CommonContent7832);
            pm_CommonContent392=pm_CommonContent();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_pm_CommonContent.add(pm_CommonContent392.getTree());


            // AST REWRITE
            // elements: pm_CommonContent
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (XQDTCommonTree)adaptor.nil();
            // 903:17: -> ^( CommonContent pm_CommonContent )
            {
                // XQueryParser.g:903:20: ^( CommonContent pm_CommonContent )
                {
                XQDTCommonTree root_1 = (XQDTCommonTree)adaptor.nil();
                root_1 = (XQDTCommonTree)adaptor.becomeRoot((XQDTCommonTree)adaptor.create(CommonContent, "CommonContent"), root_1);

                adaptor.addChild(root_1, stream_pm_CommonContent.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (XQDTCommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (XQDTCommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "pg_CommonContent"

    public static class pm_CommonContent_return extends ParserRuleReturnScope {
        XQDTCommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "pm_CommonContent"
    // XQueryParser.g:908:1: pm_CommonContent : ( L_PredefinedEntityRef | L_CharRef | ESCAPE_LBRACKET | ESCAPE_RBRACKET );
    public final XQueryParser.pm_CommonContent_return pm_CommonContent() throws RecognitionException {
        XQueryParser.pm_CommonContent_return retval = new XQueryParser.pm_CommonContent_return();
        retval.start = input.LT(1);

        XQDTCommonTree root_0 = null;

        CommonToken set393=null;

        XQDTCommonTree set393_tree=null;

        try {
            // XQueryParser.g:909:9: ( L_PredefinedEntityRef | L_CharRef | ESCAPE_LBRACKET | ESCAPE_RBRACKET )
            // XQueryParser.g:
            {
            root_0 = (XQDTCommonTree)adaptor.nil();

            set393=(CommonToken)input.LT(1);
            if ( (input.LA(1)>=L_PredefinedEntityRef && input.LA(1)<=ESCAPE_RBRACKET) ) {
                input.consume();
                if ( state.backtracking==0 ) adaptor.addChild(root_0, (XQDTCommonTree)adaptor.create(set393));
                state.errorRecovery=false;state.failed=false;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                MismatchedSetException mse = new MismatchedSetException(null,input);
                throw mse;
            }


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (XQDTCommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (XQDTCommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "pm_CommonContent"

    public static class p_ElemEnclosedExpr_return extends ParserRuleReturnScope {
        XQDTCommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "p_ElemEnclosedExpr"
    // XQueryParser.g:916:1: p_ElemEnclosedExpr : LBRACKET ( pm_Expr ) RBRACKET ;
    public final XQueryParser.p_ElemEnclosedExpr_return p_ElemEnclosedExpr() throws RecognitionException {
        XQueryParser.p_ElemEnclosedExpr_return retval = new XQueryParser.p_ElemEnclosedExpr_return();
        retval.start = input.LT(1);

        XQDTCommonTree root_0 = null;

        CommonToken LBRACKET394=null;
        CommonToken RBRACKET396=null;
        XQueryParser.pm_Expr_return pm_Expr395 = null;


        XQDTCommonTree LBRACKET394_tree=null;
        XQDTCommonTree RBRACKET396_tree=null;

        try {
            // XQueryParser.g:917:9: ( LBRACKET ( pm_Expr ) RBRACKET )
            // XQueryParser.g:917:13: LBRACKET ( pm_Expr ) RBRACKET
            {
            root_0 = (XQDTCommonTree)adaptor.nil();

            LBRACKET394=(CommonToken)match(input,LBRACKET,FOLLOW_LBRACKET_in_p_ElemEnclosedExpr7928); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            LBRACKET394_tree = (XQDTCommonTree)adaptor.create(LBRACKET394);
            adaptor.addChild(root_0, LBRACKET394_tree);
            }
            // XQueryParser.g:918:13: ( pm_Expr )
            // XQueryParser.g:918:14: pm_Expr
            {
            if ( state.backtracking==0 ) {
              pushXQueryLexer();
            }
            pushFollow(FOLLOW_pm_Expr_in_p_ElemEnclosedExpr7945);
            pm_Expr395=pm_Expr();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, pm_Expr395.getTree());
            if ( state.backtracking==0 ) {
              popLexer();
            }

            }

            RBRACKET396=(CommonToken)match(input,RBRACKET,FOLLOW_RBRACKET_in_p_ElemEnclosedExpr7962); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            RBRACKET396_tree = (XQDTCommonTree)adaptor.create(RBRACKET396);
            adaptor.addChild(root_0, RBRACKET396_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (XQDTCommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (XQDTCommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "p_ElemEnclosedExpr"

    public static class p_ComputedConstructor_return extends ParserRuleReturnScope {
        XQDTCommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "p_ComputedConstructor"
    // XQueryParser.g:942:1: p_ComputedConstructor : ( p_CompDocConstructor | p_CompElemConstructor | p_CompAttrConstructor | p_CompNamespaceConstructor | p_CompTextConstructor | p_CompCommentConstructor | p_CompPIConstructor | {...}? => p_CompBinaryConstructor );
    public final XQueryParser.p_ComputedConstructor_return p_ComputedConstructor() throws RecognitionException {
        XQueryParser.p_ComputedConstructor_return retval = new XQueryParser.p_ComputedConstructor_return();
        retval.start = input.LT(1);

        XQDTCommonTree root_0 = null;

        XQueryParser.p_CompDocConstructor_return p_CompDocConstructor397 = null;

        XQueryParser.p_CompElemConstructor_return p_CompElemConstructor398 = null;

        XQueryParser.p_CompAttrConstructor_return p_CompAttrConstructor399 = null;

        XQueryParser.p_CompNamespaceConstructor_return p_CompNamespaceConstructor400 = null;

        XQueryParser.p_CompTextConstructor_return p_CompTextConstructor401 = null;

        XQueryParser.p_CompCommentConstructor_return p_CompCommentConstructor402 = null;

        XQueryParser.p_CompPIConstructor_return p_CompPIConstructor403 = null;

        XQueryParser.p_CompBinaryConstructor_return p_CompBinaryConstructor404 = null;



        try {
            // XQueryParser.g:943:9: ( p_CompDocConstructor | p_CompElemConstructor | p_CompAttrConstructor | p_CompNamespaceConstructor | p_CompTextConstructor | p_CompCommentConstructor | p_CompPIConstructor | {...}? => p_CompBinaryConstructor )
            int alt144=8;
            int LA144_0 = input.LA(1);

            if ( (LA144_0==DOCUMENT) ) {
                alt144=1;
            }
            else if ( (LA144_0==ELEMENT) ) {
                alt144=2;
            }
            else if ( (LA144_0==ATTRIBUTE) ) {
                alt144=3;
            }
            else if ( (LA144_0==NAMESPACE) ) {
                alt144=4;
            }
            else if ( (LA144_0==TEXT) ) {
                alt144=5;
            }
            else if ( (LA144_0==COMMENT) ) {
                alt144=6;
            }
            else if ( (LA144_0==PROCESSING_INSTRUCTION) ) {
                alt144=7;
            }
            else if ( (LA144_0==BINARY) && ((lc(MLS)))) {
                alt144=8;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 144, 0, input);

                throw nvae;
            }
            switch (alt144) {
                case 1 :
                    // XQueryParser.g:943:13: p_CompDocConstructor
                    {
                    root_0 = (XQDTCommonTree)adaptor.nil();

                    pushFollow(FOLLOW_p_CompDocConstructor_in_p_ComputedConstructor8013);
                    p_CompDocConstructor397=p_CompDocConstructor();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, p_CompDocConstructor397.getTree());

                    }
                    break;
                case 2 :
                    // XQueryParser.g:944:11: p_CompElemConstructor
                    {
                    root_0 = (XQDTCommonTree)adaptor.nil();

                    pushFollow(FOLLOW_p_CompElemConstructor_in_p_ComputedConstructor8025);
                    p_CompElemConstructor398=p_CompElemConstructor();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, p_CompElemConstructor398.getTree());

                    }
                    break;
                case 3 :
                    // XQueryParser.g:945:11: p_CompAttrConstructor
                    {
                    root_0 = (XQDTCommonTree)adaptor.nil();

                    pushFollow(FOLLOW_p_CompAttrConstructor_in_p_ComputedConstructor8037);
                    p_CompAttrConstructor399=p_CompAttrConstructor();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, p_CompAttrConstructor399.getTree());

                    }
                    break;
                case 4 :
                    // XQueryParser.g:946:11: p_CompNamespaceConstructor
                    {
                    root_0 = (XQDTCommonTree)adaptor.nil();

                    pushFollow(FOLLOW_p_CompNamespaceConstructor_in_p_ComputedConstructor8049);
                    p_CompNamespaceConstructor400=p_CompNamespaceConstructor();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, p_CompNamespaceConstructor400.getTree());

                    }
                    break;
                case 5 :
                    // XQueryParser.g:947:11: p_CompTextConstructor
                    {
                    root_0 = (XQDTCommonTree)adaptor.nil();

                    pushFollow(FOLLOW_p_CompTextConstructor_in_p_ComputedConstructor8061);
                    p_CompTextConstructor401=p_CompTextConstructor();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, p_CompTextConstructor401.getTree());

                    }
                    break;
                case 6 :
                    // XQueryParser.g:948:11: p_CompCommentConstructor
                    {
                    root_0 = (XQDTCommonTree)adaptor.nil();

                    pushFollow(FOLLOW_p_CompCommentConstructor_in_p_ComputedConstructor8073);
                    p_CompCommentConstructor402=p_CompCommentConstructor();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, p_CompCommentConstructor402.getTree());

                    }
                    break;
                case 7 :
                    // XQueryParser.g:949:11: p_CompPIConstructor
                    {
                    root_0 = (XQDTCommonTree)adaptor.nil();

                    pushFollow(FOLLOW_p_CompPIConstructor_in_p_ComputedConstructor8085);
                    p_CompPIConstructor403=p_CompPIConstructor();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, p_CompPIConstructor403.getTree());

                    }
                    break;
                case 8 :
                    // XQueryParser.g:950:11: {...}? => p_CompBinaryConstructor
                    {
                    root_0 = (XQDTCommonTree)adaptor.nil();

                    if ( !((lc(MLS))) ) {
                        if (state.backtracking>0) {state.failed=true; return retval;}
                        throw new FailedPredicateException(input, "p_ComputedConstructor", "lc(MLS)");
                    }
                    pushFollow(FOLLOW_p_CompBinaryConstructor_in_p_ComputedConstructor8100);
                    p_CompBinaryConstructor404=p_CompBinaryConstructor();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, p_CompBinaryConstructor404.getTree());

                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (XQDTCommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (XQDTCommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "p_ComputedConstructor"

    public static class p_CompDocConstructor_return extends ParserRuleReturnScope {
        XQDTCommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "p_CompDocConstructor"
    // XQueryParser.g:954:1: p_CompDocConstructor : k= DOCUMENT LBRACKET pm_Expr RBRACKET ;
    public final XQueryParser.p_CompDocConstructor_return p_CompDocConstructor() throws RecognitionException {
        XQueryParser.p_CompDocConstructor_return retval = new XQueryParser.p_CompDocConstructor_return();
        retval.start = input.LT(1);

        XQDTCommonTree root_0 = null;

        CommonToken k=null;
        CommonToken LBRACKET405=null;
        CommonToken RBRACKET407=null;
        XQueryParser.pm_Expr_return pm_Expr406 = null;


        XQDTCommonTree k_tree=null;
        XQDTCommonTree LBRACKET405_tree=null;
        XQDTCommonTree RBRACKET407_tree=null;

        try {
            // XQueryParser.g:955:9: (k= DOCUMENT LBRACKET pm_Expr RBRACKET )
            // XQueryParser.g:955:13: k= DOCUMENT LBRACKET pm_Expr RBRACKET
            {
            root_0 = (XQDTCommonTree)adaptor.nil();

            k=(CommonToken)match(input,DOCUMENT,FOLLOW_DOCUMENT_in_p_CompDocConstructor8134); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            k_tree = (XQDTCommonTree)adaptor.create(k);
            adaptor.addChild(root_0, k_tree);
            }
            if ( state.backtracking==0 ) {
              ak(k);
            }
            LBRACKET405=(CommonToken)match(input,LBRACKET,FOLLOW_LBRACKET_in_p_CompDocConstructor8138); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            LBRACKET405_tree = (XQDTCommonTree)adaptor.create(LBRACKET405);
            adaptor.addChild(root_0, LBRACKET405_tree);
            }
            pushFollow(FOLLOW_pm_Expr_in_p_CompDocConstructor8140);
            pm_Expr406=pm_Expr();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, pm_Expr406.getTree());
            RBRACKET407=(CommonToken)match(input,RBRACKET,FOLLOW_RBRACKET_in_p_CompDocConstructor8142); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            RBRACKET407_tree = (XQDTCommonTree)adaptor.create(RBRACKET407);
            adaptor.addChild(root_0, RBRACKET407_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (XQDTCommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (XQDTCommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "p_CompDocConstructor"

    public static class p_CompElemConstructor_return extends ParserRuleReturnScope {
        XQDTCommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "p_CompElemConstructor"
    // XQueryParser.g:959:1: p_CompElemConstructor : k= ELEMENT ( p_QName | ( LBRACKET pm_Expr RBRACKET ) ) LBRACKET ( pm_Expr )? RBRACKET ;
    public final XQueryParser.p_CompElemConstructor_return p_CompElemConstructor() throws RecognitionException {
        XQueryParser.p_CompElemConstructor_return retval = new XQueryParser.p_CompElemConstructor_return();
        retval.start = input.LT(1);

        XQDTCommonTree root_0 = null;

        CommonToken k=null;
        CommonToken LBRACKET409=null;
        CommonToken RBRACKET411=null;
        CommonToken LBRACKET412=null;
        CommonToken RBRACKET414=null;
        XQueryParser.p_QName_return p_QName408 = null;

        XQueryParser.pm_Expr_return pm_Expr410 = null;

        XQueryParser.pm_Expr_return pm_Expr413 = null;


        XQDTCommonTree k_tree=null;
        XQDTCommonTree LBRACKET409_tree=null;
        XQDTCommonTree RBRACKET411_tree=null;
        XQDTCommonTree LBRACKET412_tree=null;
        XQDTCommonTree RBRACKET414_tree=null;

        try {
            // XQueryParser.g:960:9: (k= ELEMENT ( p_QName | ( LBRACKET pm_Expr RBRACKET ) ) LBRACKET ( pm_Expr )? RBRACKET )
            // XQueryParser.g:960:13: k= ELEMENT ( p_QName | ( LBRACKET pm_Expr RBRACKET ) ) LBRACKET ( pm_Expr )? RBRACKET
            {
            root_0 = (XQDTCommonTree)adaptor.nil();

            k=(CommonToken)match(input,ELEMENT,FOLLOW_ELEMENT_in_p_CompElemConstructor8183); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            k_tree = (XQDTCommonTree)adaptor.create(k);
            adaptor.addChild(root_0, k_tree);
            }
            if ( state.backtracking==0 ) {
              ak(k);
            }
            // XQueryParser.g:960:33: ( p_QName | ( LBRACKET pm_Expr RBRACKET ) )
            int alt145=2;
            int LA145_0 = input.LA(1);

            if ( ((LA145_0>=ANCESTOR && LA145_0<=EXIT)||(LA145_0>=SEQUENTIAL && LA145_0<=QUOT_ER)||LA145_0==L_NCName) ) {
                alt145=1;
            }
            else if ( (LA145_0==LBRACKET) ) {
                alt145=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 145, 0, input);

                throw nvae;
            }
            switch (alt145) {
                case 1 :
                    // XQueryParser.g:960:34: p_QName
                    {
                    pushFollow(FOLLOW_p_QName_in_p_CompElemConstructor8188);
                    p_QName408=p_QName();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, p_QName408.getTree());

                    }
                    break;
                case 2 :
                    // XQueryParser.g:960:44: ( LBRACKET pm_Expr RBRACKET )
                    {
                    // XQueryParser.g:960:44: ( LBRACKET pm_Expr RBRACKET )
                    // XQueryParser.g:960:45: LBRACKET pm_Expr RBRACKET
                    {
                    LBRACKET409=(CommonToken)match(input,LBRACKET,FOLLOW_LBRACKET_in_p_CompElemConstructor8193); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    LBRACKET409_tree = (XQDTCommonTree)adaptor.create(LBRACKET409);
                    adaptor.addChild(root_0, LBRACKET409_tree);
                    }
                    pushFollow(FOLLOW_pm_Expr_in_p_CompElemConstructor8195);
                    pm_Expr410=pm_Expr();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, pm_Expr410.getTree());
                    RBRACKET411=(CommonToken)match(input,RBRACKET,FOLLOW_RBRACKET_in_p_CompElemConstructor8197); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    RBRACKET411_tree = (XQDTCommonTree)adaptor.create(RBRACKET411);
                    adaptor.addChild(root_0, RBRACKET411_tree);
                    }

                    }


                    }
                    break;

            }

            LBRACKET412=(CommonToken)match(input,LBRACKET,FOLLOW_LBRACKET_in_p_CompElemConstructor8201); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            LBRACKET412_tree = (XQDTCommonTree)adaptor.create(LBRACKET412);
            adaptor.addChild(root_0, LBRACKET412_tree);
            }
            // XQueryParser.g:960:82: ( pm_Expr )?
            int alt146=2;
            int LA146_0 = input.LA(1);

            if ( ((LA146_0>=ANCESTOR && LA146_0<=EXIT)||(LA146_0>=SEQUENTIAL && LA146_0<=LPAREN)||LA146_0==DOLLAR||(LA146_0>=STAR && LA146_0<=SMALLER)||(LA146_0>=SLASH && LA146_0<=DOT_DOT)||LA146_0==ATTR_SIGN||(LA146_0>=APOS && LA146_0<=QUOT)||LA146_0==L_NCName||(LA146_0>=L_Pragma && LA146_0<=L_DoubleLiteral)) ) {
                alt146=1;
            }
            switch (alt146) {
                case 1 :
                    // XQueryParser.g:960:82: pm_Expr
                    {
                    pushFollow(FOLLOW_pm_Expr_in_p_CompElemConstructor8203);
                    pm_Expr413=pm_Expr();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, pm_Expr413.getTree());

                    }
                    break;

            }

            RBRACKET414=(CommonToken)match(input,RBRACKET,FOLLOW_RBRACKET_in_p_CompElemConstructor8206); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            RBRACKET414_tree = (XQDTCommonTree)adaptor.create(RBRACKET414);
            adaptor.addChild(root_0, RBRACKET414_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (XQDTCommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (XQDTCommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "p_CompElemConstructor"

    public static class p_CompAttrConstructor_return extends ParserRuleReturnScope {
        XQDTCommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "p_CompAttrConstructor"
    // XQueryParser.g:967:1: p_CompAttrConstructor : k= ATTRIBUTE ( p_QName | ( LBRACKET pm_Expr RBRACKET ) ) LBRACKET ( pm_Expr )? RBRACKET ;
    public final XQueryParser.p_CompAttrConstructor_return p_CompAttrConstructor() throws RecognitionException {
        XQueryParser.p_CompAttrConstructor_return retval = new XQueryParser.p_CompAttrConstructor_return();
        retval.start = input.LT(1);

        XQDTCommonTree root_0 = null;

        CommonToken k=null;
        CommonToken LBRACKET416=null;
        CommonToken RBRACKET418=null;
        CommonToken LBRACKET419=null;
        CommonToken RBRACKET421=null;
        XQueryParser.p_QName_return p_QName415 = null;

        XQueryParser.pm_Expr_return pm_Expr417 = null;

        XQueryParser.pm_Expr_return pm_Expr420 = null;


        XQDTCommonTree k_tree=null;
        XQDTCommonTree LBRACKET416_tree=null;
        XQDTCommonTree RBRACKET418_tree=null;
        XQDTCommonTree LBRACKET419_tree=null;
        XQDTCommonTree RBRACKET421_tree=null;

        try {
            // XQueryParser.g:968:9: (k= ATTRIBUTE ( p_QName | ( LBRACKET pm_Expr RBRACKET ) ) LBRACKET ( pm_Expr )? RBRACKET )
            // XQueryParser.g:968:13: k= ATTRIBUTE ( p_QName | ( LBRACKET pm_Expr RBRACKET ) ) LBRACKET ( pm_Expr )? RBRACKET
            {
            root_0 = (XQDTCommonTree)adaptor.nil();

            k=(CommonToken)match(input,ATTRIBUTE,FOLLOW_ATTRIBUTE_in_p_CompAttrConstructor8239); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            k_tree = (XQDTCommonTree)adaptor.create(k);
            adaptor.addChild(root_0, k_tree);
            }
            if ( state.backtracking==0 ) {
              ak(k);
            }
            // XQueryParser.g:968:35: ( p_QName | ( LBRACKET pm_Expr RBRACKET ) )
            int alt147=2;
            int LA147_0 = input.LA(1);

            if ( ((LA147_0>=ANCESTOR && LA147_0<=EXIT)||(LA147_0>=SEQUENTIAL && LA147_0<=QUOT_ER)||LA147_0==L_NCName) ) {
                alt147=1;
            }
            else if ( (LA147_0==LBRACKET) ) {
                alt147=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 147, 0, input);

                throw nvae;
            }
            switch (alt147) {
                case 1 :
                    // XQueryParser.g:968:36: p_QName
                    {
                    pushFollow(FOLLOW_p_QName_in_p_CompAttrConstructor8244);
                    p_QName415=p_QName();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, p_QName415.getTree());

                    }
                    break;
                case 2 :
                    // XQueryParser.g:968:46: ( LBRACKET pm_Expr RBRACKET )
                    {
                    // XQueryParser.g:968:46: ( LBRACKET pm_Expr RBRACKET )
                    // XQueryParser.g:968:47: LBRACKET pm_Expr RBRACKET
                    {
                    LBRACKET416=(CommonToken)match(input,LBRACKET,FOLLOW_LBRACKET_in_p_CompAttrConstructor8249); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    LBRACKET416_tree = (XQDTCommonTree)adaptor.create(LBRACKET416);
                    adaptor.addChild(root_0, LBRACKET416_tree);
                    }
                    pushFollow(FOLLOW_pm_Expr_in_p_CompAttrConstructor8251);
                    pm_Expr417=pm_Expr();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, pm_Expr417.getTree());
                    RBRACKET418=(CommonToken)match(input,RBRACKET,FOLLOW_RBRACKET_in_p_CompAttrConstructor8253); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    RBRACKET418_tree = (XQDTCommonTree)adaptor.create(RBRACKET418);
                    adaptor.addChild(root_0, RBRACKET418_tree);
                    }

                    }


                    }
                    break;

            }

            LBRACKET419=(CommonToken)match(input,LBRACKET,FOLLOW_LBRACKET_in_p_CompAttrConstructor8257); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            LBRACKET419_tree = (XQDTCommonTree)adaptor.create(LBRACKET419);
            adaptor.addChild(root_0, LBRACKET419_tree);
            }
            // XQueryParser.g:968:84: ( pm_Expr )?
            int alt148=2;
            int LA148_0 = input.LA(1);

            if ( ((LA148_0>=ANCESTOR && LA148_0<=EXIT)||(LA148_0>=SEQUENTIAL && LA148_0<=LPAREN)||LA148_0==DOLLAR||(LA148_0>=STAR && LA148_0<=SMALLER)||(LA148_0>=SLASH && LA148_0<=DOT_DOT)||LA148_0==ATTR_SIGN||(LA148_0>=APOS && LA148_0<=QUOT)||LA148_0==L_NCName||(LA148_0>=L_Pragma && LA148_0<=L_DoubleLiteral)) ) {
                alt148=1;
            }
            switch (alt148) {
                case 1 :
                    // XQueryParser.g:968:84: pm_Expr
                    {
                    pushFollow(FOLLOW_pm_Expr_in_p_CompAttrConstructor8259);
                    pm_Expr420=pm_Expr();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, pm_Expr420.getTree());

                    }
                    break;

            }

            RBRACKET421=(CommonToken)match(input,RBRACKET,FOLLOW_RBRACKET_in_p_CompAttrConstructor8262); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            RBRACKET421_tree = (XQDTCommonTree)adaptor.create(RBRACKET421);
            adaptor.addChild(root_0, RBRACKET421_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (XQDTCommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (XQDTCommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "p_CompAttrConstructor"

    public static class p_CompNamespaceConstructor_return extends ParserRuleReturnScope {
        XQDTCommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "p_CompNamespaceConstructor"
    // XQueryParser.g:972:1: p_CompNamespaceConstructor : k= NAMESPACE ( p_NCName | ( LBRACKET pm_Expr RBRACKET ) ) LBRACKET ( pm_Expr )? RBRACKET ;
    public final XQueryParser.p_CompNamespaceConstructor_return p_CompNamespaceConstructor() throws RecognitionException {
        XQueryParser.p_CompNamespaceConstructor_return retval = new XQueryParser.p_CompNamespaceConstructor_return();
        retval.start = input.LT(1);

        XQDTCommonTree root_0 = null;

        CommonToken k=null;
        CommonToken LBRACKET423=null;
        CommonToken RBRACKET425=null;
        CommonToken LBRACKET426=null;
        CommonToken RBRACKET428=null;
        XQueryParser.p_NCName_return p_NCName422 = null;

        XQueryParser.pm_Expr_return pm_Expr424 = null;

        XQueryParser.pm_Expr_return pm_Expr427 = null;


        XQDTCommonTree k_tree=null;
        XQDTCommonTree LBRACKET423_tree=null;
        XQDTCommonTree RBRACKET425_tree=null;
        XQDTCommonTree LBRACKET426_tree=null;
        XQDTCommonTree RBRACKET428_tree=null;

        try {
            // XQueryParser.g:973:9: (k= NAMESPACE ( p_NCName | ( LBRACKET pm_Expr RBRACKET ) ) LBRACKET ( pm_Expr )? RBRACKET )
            // XQueryParser.g:973:11: k= NAMESPACE ( p_NCName | ( LBRACKET pm_Expr RBRACKET ) ) LBRACKET ( pm_Expr )? RBRACKET
            {
            root_0 = (XQDTCommonTree)adaptor.nil();

            k=(CommonToken)match(input,NAMESPACE,FOLLOW_NAMESPACE_in_p_CompNamespaceConstructor8290); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            k_tree = (XQDTCommonTree)adaptor.create(k);
            adaptor.addChild(root_0, k_tree);
            }
            if ( state.backtracking==0 ) {
              ak(k);
            }
            // XQueryParser.g:973:33: ( p_NCName | ( LBRACKET pm_Expr RBRACKET ) )
            int alt149=2;
            int LA149_0 = input.LA(1);

            if ( ((LA149_0>=ANCESTOR && LA149_0<=EXIT)||(LA149_0>=SEQUENTIAL && LA149_0<=QUOT_ER)||LA149_0==L_NCName) ) {
                alt149=1;
            }
            else if ( (LA149_0==LBRACKET) ) {
                alt149=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 149, 0, input);

                throw nvae;
            }
            switch (alt149) {
                case 1 :
                    // XQueryParser.g:973:34: p_NCName
                    {
                    pushFollow(FOLLOW_p_NCName_in_p_CompNamespaceConstructor8295);
                    p_NCName422=p_NCName();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, p_NCName422.getTree());

                    }
                    break;
                case 2 :
                    // XQueryParser.g:973:45: ( LBRACKET pm_Expr RBRACKET )
                    {
                    // XQueryParser.g:973:45: ( LBRACKET pm_Expr RBRACKET )
                    // XQueryParser.g:973:46: LBRACKET pm_Expr RBRACKET
                    {
                    LBRACKET423=(CommonToken)match(input,LBRACKET,FOLLOW_LBRACKET_in_p_CompNamespaceConstructor8300); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    LBRACKET423_tree = (XQDTCommonTree)adaptor.create(LBRACKET423);
                    adaptor.addChild(root_0, LBRACKET423_tree);
                    }
                    pushFollow(FOLLOW_pm_Expr_in_p_CompNamespaceConstructor8302);
                    pm_Expr424=pm_Expr();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, pm_Expr424.getTree());
                    RBRACKET425=(CommonToken)match(input,RBRACKET,FOLLOW_RBRACKET_in_p_CompNamespaceConstructor8304); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    RBRACKET425_tree = (XQDTCommonTree)adaptor.create(RBRACKET425);
                    adaptor.addChild(root_0, RBRACKET425_tree);
                    }

                    }


                    }
                    break;

            }

            LBRACKET426=(CommonToken)match(input,LBRACKET,FOLLOW_LBRACKET_in_p_CompNamespaceConstructor8308); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            LBRACKET426_tree = (XQDTCommonTree)adaptor.create(LBRACKET426);
            adaptor.addChild(root_0, LBRACKET426_tree);
            }
            // XQueryParser.g:973:83: ( pm_Expr )?
            int alt150=2;
            int LA150_0 = input.LA(1);

            if ( ((LA150_0>=ANCESTOR && LA150_0<=EXIT)||(LA150_0>=SEQUENTIAL && LA150_0<=LPAREN)||LA150_0==DOLLAR||(LA150_0>=STAR && LA150_0<=SMALLER)||(LA150_0>=SLASH && LA150_0<=DOT_DOT)||LA150_0==ATTR_SIGN||(LA150_0>=APOS && LA150_0<=QUOT)||LA150_0==L_NCName||(LA150_0>=L_Pragma && LA150_0<=L_DoubleLiteral)) ) {
                alt150=1;
            }
            switch (alt150) {
                case 1 :
                    // XQueryParser.g:973:83: pm_Expr
                    {
                    pushFollow(FOLLOW_pm_Expr_in_p_CompNamespaceConstructor8310);
                    pm_Expr427=pm_Expr();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, pm_Expr427.getTree());

                    }
                    break;

            }

            RBRACKET428=(CommonToken)match(input,RBRACKET,FOLLOW_RBRACKET_in_p_CompNamespaceConstructor8313); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            RBRACKET428_tree = (XQDTCommonTree)adaptor.create(RBRACKET428);
            adaptor.addChild(root_0, RBRACKET428_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (XQDTCommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (XQDTCommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "p_CompNamespaceConstructor"

    public static class p_CompTextConstructor_return extends ParserRuleReturnScope {
        XQDTCommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "p_CompTextConstructor"
    // XQueryParser.g:983:1: p_CompTextConstructor : k= TEXT LBRACKET pm_Expr RBRACKET ;
    public final XQueryParser.p_CompTextConstructor_return p_CompTextConstructor() throws RecognitionException {
        XQueryParser.p_CompTextConstructor_return retval = new XQueryParser.p_CompTextConstructor_return();
        retval.start = input.LT(1);

        XQDTCommonTree root_0 = null;

        CommonToken k=null;
        CommonToken LBRACKET429=null;
        CommonToken RBRACKET431=null;
        XQueryParser.pm_Expr_return pm_Expr430 = null;


        XQDTCommonTree k_tree=null;
        XQDTCommonTree LBRACKET429_tree=null;
        XQDTCommonTree RBRACKET431_tree=null;

        try {
            // XQueryParser.g:984:9: (k= TEXT LBRACKET pm_Expr RBRACKET )
            // XQueryParser.g:984:13: k= TEXT LBRACKET pm_Expr RBRACKET
            {
            root_0 = (XQDTCommonTree)adaptor.nil();

            k=(CommonToken)match(input,TEXT,FOLLOW_TEXT_in_p_CompTextConstructor8349); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            k_tree = (XQDTCommonTree)adaptor.create(k);
            adaptor.addChild(root_0, k_tree);
            }
            if ( state.backtracking==0 ) {
              ak(k);
            }
            LBRACKET429=(CommonToken)match(input,LBRACKET,FOLLOW_LBRACKET_in_p_CompTextConstructor8353); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            LBRACKET429_tree = (XQDTCommonTree)adaptor.create(LBRACKET429);
            adaptor.addChild(root_0, LBRACKET429_tree);
            }
            pushFollow(FOLLOW_pm_Expr_in_p_CompTextConstructor8355);
            pm_Expr430=pm_Expr();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, pm_Expr430.getTree());
            RBRACKET431=(CommonToken)match(input,RBRACKET,FOLLOW_RBRACKET_in_p_CompTextConstructor8357); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            RBRACKET431_tree = (XQDTCommonTree)adaptor.create(RBRACKET431);
            adaptor.addChild(root_0, RBRACKET431_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (XQDTCommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (XQDTCommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "p_CompTextConstructor"

    public static class p_CompBinaryConstructor_return extends ParserRuleReturnScope {
        XQDTCommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "p_CompBinaryConstructor"
    // XQueryParser.g:988:1: p_CompBinaryConstructor : k= BINARY LBRACKET pm_Expr RBRACKET ;
    public final XQueryParser.p_CompBinaryConstructor_return p_CompBinaryConstructor() throws RecognitionException {
        XQueryParser.p_CompBinaryConstructor_return retval = new XQueryParser.p_CompBinaryConstructor_return();
        retval.start = input.LT(1);

        XQDTCommonTree root_0 = null;

        CommonToken k=null;
        CommonToken LBRACKET432=null;
        CommonToken RBRACKET434=null;
        XQueryParser.pm_Expr_return pm_Expr433 = null;


        XQDTCommonTree k_tree=null;
        XQDTCommonTree LBRACKET432_tree=null;
        XQDTCommonTree RBRACKET434_tree=null;

        try {
            // XQueryParser.g:989:9: (k= BINARY LBRACKET pm_Expr RBRACKET )
            // XQueryParser.g:989:13: k= BINARY LBRACKET pm_Expr RBRACKET
            {
            root_0 = (XQDTCommonTree)adaptor.nil();

            k=(CommonToken)match(input,BINARY,FOLLOW_BINARY_in_p_CompBinaryConstructor8387); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            k_tree = (XQDTCommonTree)adaptor.create(k);
            adaptor.addChild(root_0, k_tree);
            }
            if ( state.backtracking==0 ) {
              ak(k);
            }
            LBRACKET432=(CommonToken)match(input,LBRACKET,FOLLOW_LBRACKET_in_p_CompBinaryConstructor8391); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            LBRACKET432_tree = (XQDTCommonTree)adaptor.create(LBRACKET432);
            adaptor.addChild(root_0, LBRACKET432_tree);
            }
            pushFollow(FOLLOW_pm_Expr_in_p_CompBinaryConstructor8393);
            pm_Expr433=pm_Expr();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, pm_Expr433.getTree());
            RBRACKET434=(CommonToken)match(input,RBRACKET,FOLLOW_RBRACKET_in_p_CompBinaryConstructor8395); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            RBRACKET434_tree = (XQDTCommonTree)adaptor.create(RBRACKET434);
            adaptor.addChild(root_0, RBRACKET434_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (XQDTCommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (XQDTCommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "p_CompBinaryConstructor"

    public static class p_CompCommentConstructor_return extends ParserRuleReturnScope {
        XQDTCommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "p_CompCommentConstructor"
    // XQueryParser.g:993:1: p_CompCommentConstructor : k= COMMENT LBRACKET pm_Expr RBRACKET ;
    public final XQueryParser.p_CompCommentConstructor_return p_CompCommentConstructor() throws RecognitionException {
        XQueryParser.p_CompCommentConstructor_return retval = new XQueryParser.p_CompCommentConstructor_return();
        retval.start = input.LT(1);

        XQDTCommonTree root_0 = null;

        CommonToken k=null;
        CommonToken LBRACKET435=null;
        CommonToken RBRACKET437=null;
        XQueryParser.pm_Expr_return pm_Expr436 = null;


        XQDTCommonTree k_tree=null;
        XQDTCommonTree LBRACKET435_tree=null;
        XQDTCommonTree RBRACKET437_tree=null;

        try {
            // XQueryParser.g:994:9: (k= COMMENT LBRACKET pm_Expr RBRACKET )
            // XQueryParser.g:994:13: k= COMMENT LBRACKET pm_Expr RBRACKET
            {
            root_0 = (XQDTCommonTree)adaptor.nil();

            k=(CommonToken)match(input,COMMENT,FOLLOW_COMMENT_in_p_CompCommentConstructor8425); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            k_tree = (XQDTCommonTree)adaptor.create(k);
            adaptor.addChild(root_0, k_tree);
            }
            if ( state.backtracking==0 ) {
              ak(k);
            }
            LBRACKET435=(CommonToken)match(input,LBRACKET,FOLLOW_LBRACKET_in_p_CompCommentConstructor8429); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            LBRACKET435_tree = (XQDTCommonTree)adaptor.create(LBRACKET435);
            adaptor.addChild(root_0, LBRACKET435_tree);
            }
            pushFollow(FOLLOW_pm_Expr_in_p_CompCommentConstructor8431);
            pm_Expr436=pm_Expr();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, pm_Expr436.getTree());
            RBRACKET437=(CommonToken)match(input,RBRACKET,FOLLOW_RBRACKET_in_p_CompCommentConstructor8433); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            RBRACKET437_tree = (XQDTCommonTree)adaptor.create(RBRACKET437);
            adaptor.addChild(root_0, RBRACKET437_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (XQDTCommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (XQDTCommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "p_CompCommentConstructor"

    public static class p_CompPIConstructor_return extends ParserRuleReturnScope {
        XQDTCommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "p_CompPIConstructor"
    // XQueryParser.g:998:1: p_CompPIConstructor : k= PROCESSING_INSTRUCTION ( p_NCName | ( LBRACKET pm_Expr RBRACKET ) ) LBRACKET ( pm_Expr )? RBRACKET ;
    public final XQueryParser.p_CompPIConstructor_return p_CompPIConstructor() throws RecognitionException {
        XQueryParser.p_CompPIConstructor_return retval = new XQueryParser.p_CompPIConstructor_return();
        retval.start = input.LT(1);

        XQDTCommonTree root_0 = null;

        CommonToken k=null;
        CommonToken LBRACKET439=null;
        CommonToken RBRACKET441=null;
        CommonToken LBRACKET442=null;
        CommonToken RBRACKET444=null;
        XQueryParser.p_NCName_return p_NCName438 = null;

        XQueryParser.pm_Expr_return pm_Expr440 = null;

        XQueryParser.pm_Expr_return pm_Expr443 = null;


        XQDTCommonTree k_tree=null;
        XQDTCommonTree LBRACKET439_tree=null;
        XQDTCommonTree RBRACKET441_tree=null;
        XQDTCommonTree LBRACKET442_tree=null;
        XQDTCommonTree RBRACKET444_tree=null;

        try {
            // XQueryParser.g:999:9: (k= PROCESSING_INSTRUCTION ( p_NCName | ( LBRACKET pm_Expr RBRACKET ) ) LBRACKET ( pm_Expr )? RBRACKET )
            // XQueryParser.g:999:13: k= PROCESSING_INSTRUCTION ( p_NCName | ( LBRACKET pm_Expr RBRACKET ) ) LBRACKET ( pm_Expr )? RBRACKET
            {
            root_0 = (XQDTCommonTree)adaptor.nil();

            k=(CommonToken)match(input,PROCESSING_INSTRUCTION,FOLLOW_PROCESSING_INSTRUCTION_in_p_CompPIConstructor8464); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            k_tree = (XQDTCommonTree)adaptor.create(k);
            adaptor.addChild(root_0, k_tree);
            }
            if ( state.backtracking==0 ) {
              ak(k);
            }
            // XQueryParser.g:999:48: ( p_NCName | ( LBRACKET pm_Expr RBRACKET ) )
            int alt151=2;
            int LA151_0 = input.LA(1);

            if ( ((LA151_0>=ANCESTOR && LA151_0<=EXIT)||(LA151_0>=SEQUENTIAL && LA151_0<=QUOT_ER)||LA151_0==L_NCName) ) {
                alt151=1;
            }
            else if ( (LA151_0==LBRACKET) ) {
                alt151=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 151, 0, input);

                throw nvae;
            }
            switch (alt151) {
                case 1 :
                    // XQueryParser.g:999:49: p_NCName
                    {
                    pushFollow(FOLLOW_p_NCName_in_p_CompPIConstructor8469);
                    p_NCName438=p_NCName();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, p_NCName438.getTree());

                    }
                    break;
                case 2 :
                    // XQueryParser.g:999:60: ( LBRACKET pm_Expr RBRACKET )
                    {
                    // XQueryParser.g:999:60: ( LBRACKET pm_Expr RBRACKET )
                    // XQueryParser.g:999:61: LBRACKET pm_Expr RBRACKET
                    {
                    LBRACKET439=(CommonToken)match(input,LBRACKET,FOLLOW_LBRACKET_in_p_CompPIConstructor8474); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    LBRACKET439_tree = (XQDTCommonTree)adaptor.create(LBRACKET439);
                    adaptor.addChild(root_0, LBRACKET439_tree);
                    }
                    pushFollow(FOLLOW_pm_Expr_in_p_CompPIConstructor8476);
                    pm_Expr440=pm_Expr();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, pm_Expr440.getTree());
                    RBRACKET441=(CommonToken)match(input,RBRACKET,FOLLOW_RBRACKET_in_p_CompPIConstructor8478); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    RBRACKET441_tree = (XQDTCommonTree)adaptor.create(RBRACKET441);
                    adaptor.addChild(root_0, RBRACKET441_tree);
                    }

                    }


                    }
                    break;

            }

            LBRACKET442=(CommonToken)match(input,LBRACKET,FOLLOW_LBRACKET_in_p_CompPIConstructor8482); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            LBRACKET442_tree = (XQDTCommonTree)adaptor.create(LBRACKET442);
            adaptor.addChild(root_0, LBRACKET442_tree);
            }
            // XQueryParser.g:999:98: ( pm_Expr )?
            int alt152=2;
            int LA152_0 = input.LA(1);

            if ( ((LA152_0>=ANCESTOR && LA152_0<=EXIT)||(LA152_0>=SEQUENTIAL && LA152_0<=LPAREN)||LA152_0==DOLLAR||(LA152_0>=STAR && LA152_0<=SMALLER)||(LA152_0>=SLASH && LA152_0<=DOT_DOT)||LA152_0==ATTR_SIGN||(LA152_0>=APOS && LA152_0<=QUOT)||LA152_0==L_NCName||(LA152_0>=L_Pragma && LA152_0<=L_DoubleLiteral)) ) {
                alt152=1;
            }
            switch (alt152) {
                case 1 :
                    // XQueryParser.g:999:98: pm_Expr
                    {
                    pushFollow(FOLLOW_pm_Expr_in_p_CompPIConstructor8484);
                    pm_Expr443=pm_Expr();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, pm_Expr443.getTree());

                    }
                    break;

            }

            RBRACKET444=(CommonToken)match(input,RBRACKET,FOLLOW_RBRACKET_in_p_CompPIConstructor8487); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            RBRACKET444_tree = (XQDTCommonTree)adaptor.create(RBRACKET444);
            adaptor.addChild(root_0, RBRACKET444_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (XQDTCommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (XQDTCommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "p_CompPIConstructor"

    public static class p_SingleType_return extends ParserRuleReturnScope {
        XQDTCommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "p_SingleType"
    // XQueryParser.g:1003:1: p_SingleType : p_AtomicType ( QUESTION )? ;
    public final XQueryParser.p_SingleType_return p_SingleType() throws RecognitionException {
        XQueryParser.p_SingleType_return retval = new XQueryParser.p_SingleType_return();
        retval.start = input.LT(1);

        XQDTCommonTree root_0 = null;

        CommonToken QUESTION446=null;
        XQueryParser.p_AtomicType_return p_AtomicType445 = null;


        XQDTCommonTree QUESTION446_tree=null;

        try {
            // XQueryParser.g:1004:9: ( p_AtomicType ( QUESTION )? )
            // XQueryParser.g:1004:13: p_AtomicType ( QUESTION )?
            {
            root_0 = (XQDTCommonTree)adaptor.nil();

            pushFollow(FOLLOW_p_AtomicType_in_p_SingleType8515);
            p_AtomicType445=p_AtomicType();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, p_AtomicType445.getTree());
            // XQueryParser.g:1004:26: ( QUESTION )?
            int alt153=2;
            int LA153_0 = input.LA(1);

            if ( (LA153_0==QUESTION) ) {
                alt153=1;
            }
            switch (alt153) {
                case 1 :
                    // XQueryParser.g:1004:26: QUESTION
                    {
                    QUESTION446=(CommonToken)match(input,QUESTION,FOLLOW_QUESTION_in_p_SingleType8517); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    QUESTION446_tree = (XQDTCommonTree)adaptor.create(QUESTION446);
                    adaptor.addChild(root_0, QUESTION446_tree);
                    }

                    }
                    break;

            }


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (XQDTCommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (XQDTCommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "p_SingleType"

    public static class p_TypeDeclaration_return extends ParserRuleReturnScope {
        XQDTCommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "p_TypeDeclaration"
    // XQueryParser.g:1008:1: p_TypeDeclaration : k= AS st= p_SequenceType -> ^( TypeDeclaration $st) ;
    public final XQueryParser.p_TypeDeclaration_return p_TypeDeclaration() throws RecognitionException {
        XQueryParser.p_TypeDeclaration_return retval = new XQueryParser.p_TypeDeclaration_return();
        retval.start = input.LT(1);

        XQDTCommonTree root_0 = null;

        CommonToken k=null;
        XQueryParser.p_SequenceType_return st = null;


        XQDTCommonTree k_tree=null;
        RewriteRuleTokenStream stream_AS=new RewriteRuleTokenStream(adaptor,"token AS");
        RewriteRuleSubtreeStream stream_p_SequenceType=new RewriteRuleSubtreeStream(adaptor,"rule p_SequenceType");
        try {
            // XQueryParser.g:1009:9: (k= AS st= p_SequenceType -> ^( TypeDeclaration $st) )
            // XQueryParser.g:1009:13: k= AS st= p_SequenceType
            {
            k=(CommonToken)match(input,AS,FOLLOW_AS_in_p_TypeDeclaration8548); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_AS.add(k);

            if ( state.backtracking==0 ) {
              ak(k);
            }
            pushFollow(FOLLOW_p_SequenceType_in_p_TypeDeclaration8554);
            st=p_SequenceType();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_p_SequenceType.add(st.getTree());


            // AST REWRITE
            // elements: st
            // token labels: 
            // rule labels: retval, st
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
            RewriteRuleSubtreeStream stream_st=new RewriteRuleSubtreeStream(adaptor,"rule st",st!=null?st.tree:null);

            root_0 = (XQDTCommonTree)adaptor.nil();
            // 1010:17: -> ^( TypeDeclaration $st)
            {
                // XQueryParser.g:1010:20: ^( TypeDeclaration $st)
                {
                XQDTCommonTree root_1 = (XQDTCommonTree)adaptor.nil();
                root_1 = (XQDTCommonTree)adaptor.becomeRoot((XQDTCommonTree)adaptor.create(TypeDeclaration, "TypeDeclaration"), root_1);

                adaptor.addChild(root_1, stream_st.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (XQDTCommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (XQDTCommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "p_TypeDeclaration"

    public static class p_SequenceType_return extends ParserRuleReturnScope {
        XQDTCommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "p_SequenceType"
    // XQueryParser.g:1014:1: p_SequenceType : (k= EMPTY_SEQUENCE l= LPAREN r= RPAREN -> ^( SequenceType ^( EmptySequenceTest $k $l $r) ) | it= p_ItemType ( ( p_OccurrenceIndicator )=>oi= p_OccurrenceIndicator )? -> ^( SequenceType $it ( $oi)? ) );
    public final XQueryParser.p_SequenceType_return p_SequenceType() throws RecognitionException {
        XQueryParser.p_SequenceType_return retval = new XQueryParser.p_SequenceType_return();
        retval.start = input.LT(1);

        XQDTCommonTree root_0 = null;

        CommonToken k=null;
        CommonToken l=null;
        CommonToken r=null;
        XQueryParser.p_ItemType_return it = null;

        XQueryParser.p_OccurrenceIndicator_return oi = null;


        XQDTCommonTree k_tree=null;
        XQDTCommonTree l_tree=null;
        XQDTCommonTree r_tree=null;
        RewriteRuleTokenStream stream_EMPTY_SEQUENCE=new RewriteRuleTokenStream(adaptor,"token EMPTY_SEQUENCE");
        RewriteRuleTokenStream stream_RPAREN=new RewriteRuleTokenStream(adaptor,"token RPAREN");
        RewriteRuleTokenStream stream_LPAREN=new RewriteRuleTokenStream(adaptor,"token LPAREN");
        RewriteRuleSubtreeStream stream_p_ItemType=new RewriteRuleSubtreeStream(adaptor,"rule p_ItemType");
        RewriteRuleSubtreeStream stream_p_OccurrenceIndicator=new RewriteRuleSubtreeStream(adaptor,"rule p_OccurrenceIndicator");
        try {
            // XQueryParser.g:1015:9: (k= EMPTY_SEQUENCE l= LPAREN r= RPAREN -> ^( SequenceType ^( EmptySequenceTest $k $l $r) ) | it= p_ItemType ( ( p_OccurrenceIndicator )=>oi= p_OccurrenceIndicator )? -> ^( SequenceType $it ( $oi)? ) )
            int alt155=2;
            int LA155_0 = input.LA(1);

            if ( (LA155_0==EMPTY_SEQUENCE) ) {
                int LA155_1 = input.LA(2);

                if ( (LA155_1==EOF||(LA155_1>=AND && LA155_1<=AT)||LA155_1==CASE||LA155_1==COLLATION||LA155_1==DEFAULT||(LA155_1>=DESCENDING && LA155_1<=DIV)||(LA155_1>=ELSE && LA155_1<=EMPTY)||LA155_1==EQ||(LA155_1>=EXCEPT && LA155_1<=EXTERNAL)||LA155_1==FOR||LA155_1==GE||(LA155_1>=GT && LA155_1<=IDIV)||LA155_1==IN||(LA155_1>=INSTANCE && LA155_1<=IS)||LA155_1==LE||(LA155_1>=LET && LA155_1<=MOD)||LA155_1==NE||(LA155_1>=OR && LA155_1<=ORDER)||(LA155_1>=RETURN && LA155_1<=SATISFIES)||LA155_1==STABLE||LA155_1==TO||LA155_1==UNION||LA155_1==WHERE||LA155_1==COUNT||(LA155_1>=END && LA155_1<=GROUP)||LA155_1==ONLY||LA155_1==START||(LA155_1>=AFTER && LA155_1<=BEFORE)||LA155_1==INTO||LA155_1==MODIFY||LA155_1==WITH||LA155_1==RPAREN||(LA155_1>=LBRACKET && LA155_1<=RBRACKET)||(LA155_1>=RSQUARE && LA155_1<=NOTEQUAL)||(LA155_1>=COMMA && LA155_1<=GREATER_GREATER)||LA155_1==COLON||(LA155_1>=SEMICOLON && LA155_1<=VBAR)) ) {
                    alt155=2;
                }
                else if ( (LA155_1==LPAREN) ) {
                    alt155=1;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 155, 1, input);

                    throw nvae;
                }
            }
            else if ( ((LA155_0>=ANCESTOR && LA155_0<=EMPTY)||(LA155_0>=ENCODING && LA155_0<=EXIT)||(LA155_0>=SEQUENTIAL && LA155_0<=QUOT_ER)||LA155_0==L_NCName) ) {
                alt155=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 155, 0, input);

                throw nvae;
            }
            switch (alt155) {
                case 1 :
                    // XQueryParser.g:1015:13: k= EMPTY_SEQUENCE l= LPAREN r= RPAREN
                    {
                    k=(CommonToken)match(input,EMPTY_SEQUENCE,FOLLOW_EMPTY_SEQUENCE_in_p_SequenceType8609); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_EMPTY_SEQUENCE.add(k);

                    if ( state.backtracking==0 ) {
                      ak(k);
                    }
                    l=(CommonToken)match(input,LPAREN,FOLLOW_LPAREN_in_p_SequenceType8615); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_LPAREN.add(l);

                    r=(CommonToken)match(input,RPAREN,FOLLOW_RPAREN_in_p_SequenceType8619); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_RPAREN.add(r);



                    // AST REWRITE
                    // elements: l, r, k
                    // token labels: r, l, k
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleTokenStream stream_r=new RewriteRuleTokenStream(adaptor,"token r",r);
                    RewriteRuleTokenStream stream_l=new RewriteRuleTokenStream(adaptor,"token l",l);
                    RewriteRuleTokenStream stream_k=new RewriteRuleTokenStream(adaptor,"token k",k);
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (XQDTCommonTree)adaptor.nil();
                    // 1016:17: -> ^( SequenceType ^( EmptySequenceTest $k $l $r) )
                    {
                        // XQueryParser.g:1016:20: ^( SequenceType ^( EmptySequenceTest $k $l $r) )
                        {
                        XQDTCommonTree root_1 = (XQDTCommonTree)adaptor.nil();
                        root_1 = (XQDTCommonTree)adaptor.becomeRoot((XQDTCommonTree)adaptor.create(SequenceType, "SequenceType"), root_1);

                        // XQueryParser.g:1016:35: ^( EmptySequenceTest $k $l $r)
                        {
                        XQDTCommonTree root_2 = (XQDTCommonTree)adaptor.nil();
                        root_2 = (XQDTCommonTree)adaptor.becomeRoot((XQDTCommonTree)adaptor.create(EmptySequenceTest, "EmptySequenceTest"), root_2);

                        adaptor.addChild(root_2, stream_k.nextNode());
                        adaptor.addChild(root_2, stream_l.nextNode());
                        adaptor.addChild(root_2, stream_r.nextNode());

                        adaptor.addChild(root_1, root_2);
                        }

                        adaptor.addChild(root_0, root_1);
                        }

                    }

                    retval.tree = root_0;}
                    }
                    break;
                case 2 :
                    // XQueryParser.g:1017:11: it= p_ItemType ( ( p_OccurrenceIndicator )=>oi= p_OccurrenceIndicator )?
                    {
                    pushFollow(FOLLOW_p_ItemType_in_p_SequenceType8668);
                    it=p_ItemType();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_p_ItemType.add(it.getTree());
                    // XQueryParser.g:1017:25: ( ( p_OccurrenceIndicator )=>oi= p_OccurrenceIndicator )?
                    int alt154=2;
                    alt154 = dfa154.predict(input);
                    switch (alt154) {
                        case 1 :
                            // XQueryParser.g:1017:26: ( p_OccurrenceIndicator )=>oi= p_OccurrenceIndicator
                            {
                            pushFollow(FOLLOW_p_OccurrenceIndicator_in_p_SequenceType8679);
                            oi=p_OccurrenceIndicator();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_p_OccurrenceIndicator.add(oi.getTree());

                            }
                            break;

                    }



                    // AST REWRITE
                    // elements: oi, it
                    // token labels: 
                    // rule labels: retval, it, oi
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
                    RewriteRuleSubtreeStream stream_it=new RewriteRuleSubtreeStream(adaptor,"rule it",it!=null?it.tree:null);
                    RewriteRuleSubtreeStream stream_oi=new RewriteRuleSubtreeStream(adaptor,"rule oi",oi!=null?oi.tree:null);

                    root_0 = (XQDTCommonTree)adaptor.nil();
                    // 1018:17: -> ^( SequenceType $it ( $oi)? )
                    {
                        // XQueryParser.g:1018:20: ^( SequenceType $it ( $oi)? )
                        {
                        XQDTCommonTree root_1 = (XQDTCommonTree)adaptor.nil();
                        root_1 = (XQDTCommonTree)adaptor.becomeRoot((XQDTCommonTree)adaptor.create(SequenceType, "SequenceType"), root_1);

                        adaptor.addChild(root_1, stream_it.nextTree());
                        // XQueryParser.g:1018:39: ( $oi)?
                        if ( stream_oi.hasNext() ) {
                            adaptor.addChild(root_1, stream_oi.nextTree());

                        }
                        stream_oi.reset();

                        adaptor.addChild(root_0, root_1);
                        }

                    }

                    retval.tree = root_0;}
                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (XQDTCommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (XQDTCommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "p_SequenceType"

    public static class p_OccurrenceIndicator_return extends ParserRuleReturnScope {
        XQDTCommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "p_OccurrenceIndicator"
    // XQueryParser.g:1022:1: p_OccurrenceIndicator : ( QUESTION | STAR | PLUS );
    public final XQueryParser.p_OccurrenceIndicator_return p_OccurrenceIndicator() throws RecognitionException {
        XQueryParser.p_OccurrenceIndicator_return retval = new XQueryParser.p_OccurrenceIndicator_return();
        retval.start = input.LT(1);

        XQDTCommonTree root_0 = null;

        CommonToken set447=null;

        XQDTCommonTree set447_tree=null;

        try {
            // XQueryParser.g:1023:9: ( QUESTION | STAR | PLUS )
            // XQueryParser.g:
            {
            root_0 = (XQDTCommonTree)adaptor.nil();

            set447=(CommonToken)input.LT(1);
            if ( (input.LA(1)>=QUESTION && input.LA(1)<=PLUS) ) {
                input.consume();
                if ( state.backtracking==0 ) adaptor.addChild(root_0, (XQDTCommonTree)adaptor.create(set447));
                state.errorRecovery=false;state.failed=false;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                MismatchedSetException mse = new MismatchedSetException(null,input);
                throw mse;
            }


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (XQDTCommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (XQDTCommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "p_OccurrenceIndicator"

    public static class p_ItemType_return extends ParserRuleReturnScope {
        XQDTCommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "p_ItemType"
    // XQueryParser.g:1027:1: p_ItemType : ( p_KindTest -> ^( KindTest p_KindTest ) | {...}? => ( BINARY LPAREN RPAREN ) -> ^( BinaryTest BINARY LPAREN RPAREN ) | ( ITEM LPAREN RPAREN ) -> ^( ItemTest ITEM LPAREN RPAREN ) | p_AtomicType );
    public final XQueryParser.p_ItemType_return p_ItemType() throws RecognitionException {
        XQueryParser.p_ItemType_return retval = new XQueryParser.p_ItemType_return();
        retval.start = input.LT(1);

        XQDTCommonTree root_0 = null;

        CommonToken BINARY449=null;
        CommonToken LPAREN450=null;
        CommonToken RPAREN451=null;
        CommonToken ITEM452=null;
        CommonToken LPAREN453=null;
        CommonToken RPAREN454=null;
        XQueryParser.p_KindTest_return p_KindTest448 = null;

        XQueryParser.p_AtomicType_return p_AtomicType455 = null;


        XQDTCommonTree BINARY449_tree=null;
        XQDTCommonTree LPAREN450_tree=null;
        XQDTCommonTree RPAREN451_tree=null;
        XQDTCommonTree ITEM452_tree=null;
        XQDTCommonTree LPAREN453_tree=null;
        XQDTCommonTree RPAREN454_tree=null;
        RewriteRuleTokenStream stream_RPAREN=new RewriteRuleTokenStream(adaptor,"token RPAREN");
        RewriteRuleTokenStream stream_ITEM=new RewriteRuleTokenStream(adaptor,"token ITEM");
        RewriteRuleTokenStream stream_BINARY=new RewriteRuleTokenStream(adaptor,"token BINARY");
        RewriteRuleTokenStream stream_LPAREN=new RewriteRuleTokenStream(adaptor,"token LPAREN");
        RewriteRuleSubtreeStream stream_p_KindTest=new RewriteRuleSubtreeStream(adaptor,"rule p_KindTest");
        try {
            // XQueryParser.g:1028:9: ( p_KindTest -> ^( KindTest p_KindTest ) | {...}? => ( BINARY LPAREN RPAREN ) -> ^( BinaryTest BINARY LPAREN RPAREN ) | ( ITEM LPAREN RPAREN ) -> ^( ItemTest ITEM LPAREN RPAREN ) | p_AtomicType )
            int alt156=4;
            alt156 = dfa156.predict(input);
            switch (alt156) {
                case 1 :
                    // XQueryParser.g:1028:11: p_KindTest
                    {
                    pushFollow(FOLLOW_p_KindTest_in_p_ItemType8781);
                    p_KindTest448=p_KindTest();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_p_KindTest.add(p_KindTest448.getTree());


                    // AST REWRITE
                    // elements: p_KindTest
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (XQDTCommonTree)adaptor.nil();
                    // 1029:17: -> ^( KindTest p_KindTest )
                    {
                        // XQueryParser.g:1029:20: ^( KindTest p_KindTest )
                        {
                        XQDTCommonTree root_1 = (XQDTCommonTree)adaptor.nil();
                        root_1 = (XQDTCommonTree)adaptor.becomeRoot((XQDTCommonTree)adaptor.create(KindTest, "KindTest"), root_1);

                        adaptor.addChild(root_1, stream_p_KindTest.nextTree());

                        adaptor.addChild(root_0, root_1);
                        }

                    }

                    retval.tree = root_0;}
                    }
                    break;
                case 2 :
                    // XQueryParser.g:1030:11: {...}? => ( BINARY LPAREN RPAREN )
                    {
                    if ( !((lc(MLS))) ) {
                        if (state.backtracking>0) {state.failed=true; return retval;}
                        throw new FailedPredicateException(input, "p_ItemType", "lc(MLS)");
                    }
                    // XQueryParser.g:1030:24: ( BINARY LPAREN RPAREN )
                    // XQueryParser.g:1030:25: BINARY LPAREN RPAREN
                    {
                    BINARY449=(CommonToken)match(input,BINARY,FOLLOW_BINARY_in_p_ItemType8821); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_BINARY.add(BINARY449);

                    LPAREN450=(CommonToken)match(input,LPAREN,FOLLOW_LPAREN_in_p_ItemType8823); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_LPAREN.add(LPAREN450);

                    RPAREN451=(CommonToken)match(input,RPAREN,FOLLOW_RPAREN_in_p_ItemType8825); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_RPAREN.add(RPAREN451);


                    }



                    // AST REWRITE
                    // elements: LPAREN, BINARY, RPAREN
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (XQDTCommonTree)adaptor.nil();
                    // 1031:17: -> ^( BinaryTest BINARY LPAREN RPAREN )
                    {
                        // XQueryParser.g:1031:20: ^( BinaryTest BINARY LPAREN RPAREN )
                        {
                        XQDTCommonTree root_1 = (XQDTCommonTree)adaptor.nil();
                        root_1 = (XQDTCommonTree)adaptor.becomeRoot((XQDTCommonTree)adaptor.create(BinaryTest, "BinaryTest"), root_1);

                        adaptor.addChild(root_1, stream_BINARY.nextNode());
                        adaptor.addChild(root_1, stream_LPAREN.nextNode());
                        adaptor.addChild(root_1, stream_RPAREN.nextNode());

                        adaptor.addChild(root_0, root_1);
                        }

                    }

                    retval.tree = root_0;}
                    }
                    break;
                case 3 :
                    // XQueryParser.g:1032:11: ( ITEM LPAREN RPAREN )
                    {
                    // XQueryParser.g:1032:11: ( ITEM LPAREN RPAREN )
                    // XQueryParser.g:1032:12: ITEM LPAREN RPAREN
                    {
                    ITEM452=(CommonToken)match(input,ITEM,FOLLOW_ITEM_in_p_ItemType8867); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_ITEM.add(ITEM452);

                    LPAREN453=(CommonToken)match(input,LPAREN,FOLLOW_LPAREN_in_p_ItemType8869); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_LPAREN.add(LPAREN453);

                    RPAREN454=(CommonToken)match(input,RPAREN,FOLLOW_RPAREN_in_p_ItemType8871); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_RPAREN.add(RPAREN454);


                    }



                    // AST REWRITE
                    // elements: ITEM, RPAREN, LPAREN
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (XQDTCommonTree)adaptor.nil();
                    // 1033:17: -> ^( ItemTest ITEM LPAREN RPAREN )
                    {
                        // XQueryParser.g:1033:20: ^( ItemTest ITEM LPAREN RPAREN )
                        {
                        XQDTCommonTree root_1 = (XQDTCommonTree)adaptor.nil();
                        root_1 = (XQDTCommonTree)adaptor.becomeRoot((XQDTCommonTree)adaptor.create(ItemTest, "ItemTest"), root_1);

                        adaptor.addChild(root_1, stream_ITEM.nextNode());
                        adaptor.addChild(root_1, stream_LPAREN.nextNode());
                        adaptor.addChild(root_1, stream_RPAREN.nextNode());

                        adaptor.addChild(root_0, root_1);
                        }

                    }

                    retval.tree = root_0;}
                    }
                    break;
                case 4 :
                    // XQueryParser.g:1034:11: p_AtomicType
                    {
                    root_0 = (XQDTCommonTree)adaptor.nil();

                    pushFollow(FOLLOW_p_AtomicType_in_p_ItemType8912);
                    p_AtomicType455=p_AtomicType();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, p_AtomicType455.getTree());

                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (XQDTCommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (XQDTCommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "p_ItemType"

    public static class p_AtomicType_return extends ParserRuleReturnScope {
        XQDTCommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "p_AtomicType"
    // XQueryParser.g:1038:1: p_AtomicType : p_QName -> ^( AtomicType p_QName ) ;
    public final XQueryParser.p_AtomicType_return p_AtomicType() throws RecognitionException {
        XQueryParser.p_AtomicType_return retval = new XQueryParser.p_AtomicType_return();
        retval.start = input.LT(1);

        XQDTCommonTree root_0 = null;

        XQueryParser.p_QName_return p_QName456 = null;


        RewriteRuleSubtreeStream stream_p_QName=new RewriteRuleSubtreeStream(adaptor,"rule p_QName");
        try {
            // XQueryParser.g:1039:9: ( p_QName -> ^( AtomicType p_QName ) )
            // XQueryParser.g:1039:11: p_QName
            {
            pushFollow(FOLLOW_p_QName_in_p_AtomicType8938);
            p_QName456=p_QName();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_p_QName.add(p_QName456.getTree());


            // AST REWRITE
            // elements: p_QName
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (XQDTCommonTree)adaptor.nil();
            // 1040:17: -> ^( AtomicType p_QName )
            {
                // XQueryParser.g:1040:20: ^( AtomicType p_QName )
                {
                XQDTCommonTree root_1 = (XQDTCommonTree)adaptor.nil();
                root_1 = (XQDTCommonTree)adaptor.becomeRoot((XQDTCommonTree)adaptor.create(AtomicType, "AtomicType"), root_1);

                adaptor.addChild(root_1, stream_p_QName.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (XQDTCommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (XQDTCommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "p_AtomicType"

    public static class p_KindTest_return extends ParserRuleReturnScope {
        XQDTCommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "p_KindTest"
    // XQueryParser.g:1044:1: p_KindTest : ( p_DocumentTest | p_ElementTest | p_AttributeTest | p_SchemaElementTest | p_SchemaAttributeTest | p_NamespaceNodeTest | p_PITest | p_CommentTest | p_TextTest | p_AnyKindTest );
    public final XQueryParser.p_KindTest_return p_KindTest() throws RecognitionException {
        XQueryParser.p_KindTest_return retval = new XQueryParser.p_KindTest_return();
        retval.start = input.LT(1);

        XQDTCommonTree root_0 = null;

        XQueryParser.p_DocumentTest_return p_DocumentTest457 = null;

        XQueryParser.p_ElementTest_return p_ElementTest458 = null;

        XQueryParser.p_AttributeTest_return p_AttributeTest459 = null;

        XQueryParser.p_SchemaElementTest_return p_SchemaElementTest460 = null;

        XQueryParser.p_SchemaAttributeTest_return p_SchemaAttributeTest461 = null;

        XQueryParser.p_NamespaceNodeTest_return p_NamespaceNodeTest462 = null;

        XQueryParser.p_PITest_return p_PITest463 = null;

        XQueryParser.p_CommentTest_return p_CommentTest464 = null;

        XQueryParser.p_TextTest_return p_TextTest465 = null;

        XQueryParser.p_AnyKindTest_return p_AnyKindTest466 = null;



        try {
            // XQueryParser.g:1045:9: ( p_DocumentTest | p_ElementTest | p_AttributeTest | p_SchemaElementTest | p_SchemaAttributeTest | p_NamespaceNodeTest | p_PITest | p_CommentTest | p_TextTest | p_AnyKindTest )
            int alt157=10;
            switch ( input.LA(1) ) {
            case DOCUMENT_NODE:
                {
                alt157=1;
                }
                break;
            case ELEMENT:
                {
                alt157=2;
                }
                break;
            case ATTRIBUTE:
                {
                alt157=3;
                }
                break;
            case SCHEMA_ELEMENT:
                {
                alt157=4;
                }
                break;
            case SCHEMA_ATTRIBUTE:
                {
                alt157=5;
                }
                break;
            case NAMESPACE_NODE:
                {
                alt157=6;
                }
                break;
            case PROCESSING_INSTRUCTION:
                {
                alt157=7;
                }
                break;
            case COMMENT:
                {
                alt157=8;
                }
                break;
            case TEXT:
                {
                alt157=9;
                }
                break;
            case NODE:
                {
                alt157=10;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 157, 0, input);

                throw nvae;
            }

            switch (alt157) {
                case 1 :
                    // XQueryParser.g:1045:11: p_DocumentTest
                    {
                    root_0 = (XQDTCommonTree)adaptor.nil();

                    pushFollow(FOLLOW_p_DocumentTest_in_p_KindTest8988);
                    p_DocumentTest457=p_DocumentTest();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, p_DocumentTest457.getTree());

                    }
                    break;
                case 2 :
                    // XQueryParser.g:1046:11: p_ElementTest
                    {
                    root_0 = (XQDTCommonTree)adaptor.nil();

                    pushFollow(FOLLOW_p_ElementTest_in_p_KindTest9000);
                    p_ElementTest458=p_ElementTest();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, p_ElementTest458.getTree());

                    }
                    break;
                case 3 :
                    // XQueryParser.g:1047:11: p_AttributeTest
                    {
                    root_0 = (XQDTCommonTree)adaptor.nil();

                    pushFollow(FOLLOW_p_AttributeTest_in_p_KindTest9012);
                    p_AttributeTest459=p_AttributeTest();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, p_AttributeTest459.getTree());

                    }
                    break;
                case 4 :
                    // XQueryParser.g:1048:11: p_SchemaElementTest
                    {
                    root_0 = (XQDTCommonTree)adaptor.nil();

                    pushFollow(FOLLOW_p_SchemaElementTest_in_p_KindTest9024);
                    p_SchemaElementTest460=p_SchemaElementTest();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, p_SchemaElementTest460.getTree());

                    }
                    break;
                case 5 :
                    // XQueryParser.g:1049:11: p_SchemaAttributeTest
                    {
                    root_0 = (XQDTCommonTree)adaptor.nil();

                    pushFollow(FOLLOW_p_SchemaAttributeTest_in_p_KindTest9036);
                    p_SchemaAttributeTest461=p_SchemaAttributeTest();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, p_SchemaAttributeTest461.getTree());

                    }
                    break;
                case 6 :
                    // XQueryParser.g:1050:11: p_NamespaceNodeTest
                    {
                    root_0 = (XQDTCommonTree)adaptor.nil();

                    pushFollow(FOLLOW_p_NamespaceNodeTest_in_p_KindTest9048);
                    p_NamespaceNodeTest462=p_NamespaceNodeTest();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, p_NamespaceNodeTest462.getTree());

                    }
                    break;
                case 7 :
                    // XQueryParser.g:1051:11: p_PITest
                    {
                    root_0 = (XQDTCommonTree)adaptor.nil();

                    pushFollow(FOLLOW_p_PITest_in_p_KindTest9060);
                    p_PITest463=p_PITest();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, p_PITest463.getTree());

                    }
                    break;
                case 8 :
                    // XQueryParser.g:1052:11: p_CommentTest
                    {
                    root_0 = (XQDTCommonTree)adaptor.nil();

                    pushFollow(FOLLOW_p_CommentTest_in_p_KindTest9072);
                    p_CommentTest464=p_CommentTest();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, p_CommentTest464.getTree());

                    }
                    break;
                case 9 :
                    // XQueryParser.g:1053:11: p_TextTest
                    {
                    root_0 = (XQDTCommonTree)adaptor.nil();

                    pushFollow(FOLLOW_p_TextTest_in_p_KindTest9084);
                    p_TextTest465=p_TextTest();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, p_TextTest465.getTree());

                    }
                    break;
                case 10 :
                    // XQueryParser.g:1054:11: p_AnyKindTest
                    {
                    root_0 = (XQDTCommonTree)adaptor.nil();

                    pushFollow(FOLLOW_p_AnyKindTest_in_p_KindTest9096);
                    p_AnyKindTest466=p_AnyKindTest();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, p_AnyKindTest466.getTree());

                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (XQDTCommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (XQDTCommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "p_KindTest"

    public static class p_AnyKindTest_return extends ParserRuleReturnScope {
        XQDTCommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "p_AnyKindTest"
    // XQueryParser.g:1058:1: p_AnyKindTest : NODE LPAREN RPAREN ;
    public final XQueryParser.p_AnyKindTest_return p_AnyKindTest() throws RecognitionException {
        XQueryParser.p_AnyKindTest_return retval = new XQueryParser.p_AnyKindTest_return();
        retval.start = input.LT(1);

        XQDTCommonTree root_0 = null;

        CommonToken NODE467=null;
        CommonToken LPAREN468=null;
        CommonToken RPAREN469=null;

        XQDTCommonTree NODE467_tree=null;
        XQDTCommonTree LPAREN468_tree=null;
        XQDTCommonTree RPAREN469_tree=null;

        try {
            // XQueryParser.g:1059:9: ( NODE LPAREN RPAREN )
            // XQueryParser.g:1059:13: NODE LPAREN RPAREN
            {
            root_0 = (XQDTCommonTree)adaptor.nil();

            NODE467=(CommonToken)match(input,NODE,FOLLOW_NODE_in_p_AnyKindTest9124); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            NODE467_tree = (XQDTCommonTree)adaptor.create(NODE467);
            adaptor.addChild(root_0, NODE467_tree);
            }
            LPAREN468=(CommonToken)match(input,LPAREN,FOLLOW_LPAREN_in_p_AnyKindTest9126); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            LPAREN468_tree = (XQDTCommonTree)adaptor.create(LPAREN468);
            adaptor.addChild(root_0, LPAREN468_tree);
            }
            RPAREN469=(CommonToken)match(input,RPAREN,FOLLOW_RPAREN_in_p_AnyKindTest9128); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            RPAREN469_tree = (XQDTCommonTree)adaptor.create(RPAREN469);
            adaptor.addChild(root_0, RPAREN469_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (XQDTCommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (XQDTCommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "p_AnyKindTest"

    public static class p_DocumentTest_return extends ParserRuleReturnScope {
        XQDTCommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "p_DocumentTest"
    // XQueryParser.g:1063:1: p_DocumentTest : DOCUMENT_NODE LPAREN ( p_ElementTest | p_SchemaElementTest )? RPAREN ;
    public final XQueryParser.p_DocumentTest_return p_DocumentTest() throws RecognitionException {
        XQueryParser.p_DocumentTest_return retval = new XQueryParser.p_DocumentTest_return();
        retval.start = input.LT(1);

        XQDTCommonTree root_0 = null;

        CommonToken DOCUMENT_NODE470=null;
        CommonToken LPAREN471=null;
        CommonToken RPAREN474=null;
        XQueryParser.p_ElementTest_return p_ElementTest472 = null;

        XQueryParser.p_SchemaElementTest_return p_SchemaElementTest473 = null;


        XQDTCommonTree DOCUMENT_NODE470_tree=null;
        XQDTCommonTree LPAREN471_tree=null;
        XQDTCommonTree RPAREN474_tree=null;

        try {
            // XQueryParser.g:1064:9: ( DOCUMENT_NODE LPAREN ( p_ElementTest | p_SchemaElementTest )? RPAREN )
            // XQueryParser.g:1064:13: DOCUMENT_NODE LPAREN ( p_ElementTest | p_SchemaElementTest )? RPAREN
            {
            root_0 = (XQDTCommonTree)adaptor.nil();

            DOCUMENT_NODE470=(CommonToken)match(input,DOCUMENT_NODE,FOLLOW_DOCUMENT_NODE_in_p_DocumentTest9156); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            DOCUMENT_NODE470_tree = (XQDTCommonTree)adaptor.create(DOCUMENT_NODE470);
            adaptor.addChild(root_0, DOCUMENT_NODE470_tree);
            }
            LPAREN471=(CommonToken)match(input,LPAREN,FOLLOW_LPAREN_in_p_DocumentTest9158); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            LPAREN471_tree = (XQDTCommonTree)adaptor.create(LPAREN471);
            adaptor.addChild(root_0, LPAREN471_tree);
            }
            // XQueryParser.g:1064:34: ( p_ElementTest | p_SchemaElementTest )?
            int alt158=3;
            int LA158_0 = input.LA(1);

            if ( (LA158_0==ELEMENT) ) {
                alt158=1;
            }
            else if ( (LA158_0==SCHEMA_ELEMENT) ) {
                alt158=2;
            }
            switch (alt158) {
                case 1 :
                    // XQueryParser.g:1064:35: p_ElementTest
                    {
                    pushFollow(FOLLOW_p_ElementTest_in_p_DocumentTest9161);
                    p_ElementTest472=p_ElementTest();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, p_ElementTest472.getTree());

                    }
                    break;
                case 2 :
                    // XQueryParser.g:1064:51: p_SchemaElementTest
                    {
                    pushFollow(FOLLOW_p_SchemaElementTest_in_p_DocumentTest9165);
                    p_SchemaElementTest473=p_SchemaElementTest();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, p_SchemaElementTest473.getTree());

                    }
                    break;

            }

            RPAREN474=(CommonToken)match(input,RPAREN,FOLLOW_RPAREN_in_p_DocumentTest9169); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            RPAREN474_tree = (XQDTCommonTree)adaptor.create(RPAREN474);
            adaptor.addChild(root_0, RPAREN474_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (XQDTCommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (XQDTCommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "p_DocumentTest"

    public static class p_TextTest_return extends ParserRuleReturnScope {
        XQDTCommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "p_TextTest"
    // XQueryParser.g:1067:1: p_TextTest : TEXT LPAREN RPAREN ;
    public final XQueryParser.p_TextTest_return p_TextTest() throws RecognitionException {
        XQueryParser.p_TextTest_return retval = new XQueryParser.p_TextTest_return();
        retval.start = input.LT(1);

        XQDTCommonTree root_0 = null;

        CommonToken TEXT475=null;
        CommonToken LPAREN476=null;
        CommonToken RPAREN477=null;

        XQDTCommonTree TEXT475_tree=null;
        XQDTCommonTree LPAREN476_tree=null;
        XQDTCommonTree RPAREN477_tree=null;

        try {
            // XQueryParser.g:1068:9: ( TEXT LPAREN RPAREN )
            // XQueryParser.g:1068:13: TEXT LPAREN RPAREN
            {
            root_0 = (XQDTCommonTree)adaptor.nil();

            TEXT475=(CommonToken)match(input,TEXT,FOLLOW_TEXT_in_p_TextTest9189); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            TEXT475_tree = (XQDTCommonTree)adaptor.create(TEXT475);
            adaptor.addChild(root_0, TEXT475_tree);
            }
            LPAREN476=(CommonToken)match(input,LPAREN,FOLLOW_LPAREN_in_p_TextTest9191); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            LPAREN476_tree = (XQDTCommonTree)adaptor.create(LPAREN476);
            adaptor.addChild(root_0, LPAREN476_tree);
            }
            RPAREN477=(CommonToken)match(input,RPAREN,FOLLOW_RPAREN_in_p_TextTest9193); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            RPAREN477_tree = (XQDTCommonTree)adaptor.create(RPAREN477);
            adaptor.addChild(root_0, RPAREN477_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (XQDTCommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (XQDTCommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "p_TextTest"

    public static class p_CommentTest_return extends ParserRuleReturnScope {
        XQDTCommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "p_CommentTest"
    // XQueryParser.g:1072:1: p_CommentTest : COMMENT LPAREN RPAREN ;
    public final XQueryParser.p_CommentTest_return p_CommentTest() throws RecognitionException {
        XQueryParser.p_CommentTest_return retval = new XQueryParser.p_CommentTest_return();
        retval.start = input.LT(1);

        XQDTCommonTree root_0 = null;

        CommonToken COMMENT478=null;
        CommonToken LPAREN479=null;
        CommonToken RPAREN480=null;

        XQDTCommonTree COMMENT478_tree=null;
        XQDTCommonTree LPAREN479_tree=null;
        XQDTCommonTree RPAREN480_tree=null;

        try {
            // XQueryParser.g:1073:9: ( COMMENT LPAREN RPAREN )
            // XQueryParser.g:1073:13: COMMENT LPAREN RPAREN
            {
            root_0 = (XQDTCommonTree)adaptor.nil();

            COMMENT478=(CommonToken)match(input,COMMENT,FOLLOW_COMMENT_in_p_CommentTest9221); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            COMMENT478_tree = (XQDTCommonTree)adaptor.create(COMMENT478);
            adaptor.addChild(root_0, COMMENT478_tree);
            }
            LPAREN479=(CommonToken)match(input,LPAREN,FOLLOW_LPAREN_in_p_CommentTest9223); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            LPAREN479_tree = (XQDTCommonTree)adaptor.create(LPAREN479);
            adaptor.addChild(root_0, LPAREN479_tree);
            }
            RPAREN480=(CommonToken)match(input,RPAREN,FOLLOW_RPAREN_in_p_CommentTest9225); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            RPAREN480_tree = (XQDTCommonTree)adaptor.create(RPAREN480);
            adaptor.addChild(root_0, RPAREN480_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (XQDTCommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (XQDTCommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "p_CommentTest"

    public static class p_NamespaceNodeTest_return extends ParserRuleReturnScope {
        XQDTCommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "p_NamespaceNodeTest"
    // XQueryParser.g:1077:1: p_NamespaceNodeTest : NAMESPACE_NODE LPAREN RPAREN ;
    public final XQueryParser.p_NamespaceNodeTest_return p_NamespaceNodeTest() throws RecognitionException {
        XQueryParser.p_NamespaceNodeTest_return retval = new XQueryParser.p_NamespaceNodeTest_return();
        retval.start = input.LT(1);

        XQDTCommonTree root_0 = null;

        CommonToken NAMESPACE_NODE481=null;
        CommonToken LPAREN482=null;
        CommonToken RPAREN483=null;

        XQDTCommonTree NAMESPACE_NODE481_tree=null;
        XQDTCommonTree LPAREN482_tree=null;
        XQDTCommonTree RPAREN483_tree=null;

        try {
            // XQueryParser.g:1078:9: ( NAMESPACE_NODE LPAREN RPAREN )
            // XQueryParser.g:1078:11: NAMESPACE_NODE LPAREN RPAREN
            {
            root_0 = (XQDTCommonTree)adaptor.nil();

            NAMESPACE_NODE481=(CommonToken)match(input,NAMESPACE_NODE,FOLLOW_NAMESPACE_NODE_in_p_NamespaceNodeTest9251); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            NAMESPACE_NODE481_tree = (XQDTCommonTree)adaptor.create(NAMESPACE_NODE481);
            adaptor.addChild(root_0, NAMESPACE_NODE481_tree);
            }
            LPAREN482=(CommonToken)match(input,LPAREN,FOLLOW_LPAREN_in_p_NamespaceNodeTest9253); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            LPAREN482_tree = (XQDTCommonTree)adaptor.create(LPAREN482);
            adaptor.addChild(root_0, LPAREN482_tree);
            }
            RPAREN483=(CommonToken)match(input,RPAREN,FOLLOW_RPAREN_in_p_NamespaceNodeTest9255); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            RPAREN483_tree = (XQDTCommonTree)adaptor.create(RPAREN483);
            adaptor.addChild(root_0, RPAREN483_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (XQDTCommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (XQDTCommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "p_NamespaceNodeTest"

    public static class p_PITest_return extends ParserRuleReturnScope {
        XQDTCommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "p_PITest"
    // XQueryParser.g:1082:1: p_PITest : PROCESSING_INSTRUCTION LPAREN ( p_NCName | p_StringLiteral )? RPAREN ;
    public final XQueryParser.p_PITest_return p_PITest() throws RecognitionException {
        XQueryParser.p_PITest_return retval = new XQueryParser.p_PITest_return();
        retval.start = input.LT(1);

        XQDTCommonTree root_0 = null;

        CommonToken PROCESSING_INSTRUCTION484=null;
        CommonToken LPAREN485=null;
        CommonToken RPAREN488=null;
        XQueryParser.p_NCName_return p_NCName486 = null;

        XQueryParser.p_StringLiteral_return p_StringLiteral487 = null;


        XQDTCommonTree PROCESSING_INSTRUCTION484_tree=null;
        XQDTCommonTree LPAREN485_tree=null;
        XQDTCommonTree RPAREN488_tree=null;

        try {
            // XQueryParser.g:1083:9: ( PROCESSING_INSTRUCTION LPAREN ( p_NCName | p_StringLiteral )? RPAREN )
            // XQueryParser.g:1083:13: PROCESSING_INSTRUCTION LPAREN ( p_NCName | p_StringLiteral )? RPAREN
            {
            root_0 = (XQDTCommonTree)adaptor.nil();

            PROCESSING_INSTRUCTION484=(CommonToken)match(input,PROCESSING_INSTRUCTION,FOLLOW_PROCESSING_INSTRUCTION_in_p_PITest9283); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            PROCESSING_INSTRUCTION484_tree = (XQDTCommonTree)adaptor.create(PROCESSING_INSTRUCTION484);
            adaptor.addChild(root_0, PROCESSING_INSTRUCTION484_tree);
            }
            LPAREN485=(CommonToken)match(input,LPAREN,FOLLOW_LPAREN_in_p_PITest9285); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            LPAREN485_tree = (XQDTCommonTree)adaptor.create(LPAREN485);
            adaptor.addChild(root_0, LPAREN485_tree);
            }
            // XQueryParser.g:1083:43: ( p_NCName | p_StringLiteral )?
            int alt159=3;
            int LA159_0 = input.LA(1);

            if ( ((LA159_0>=ANCESTOR && LA159_0<=EXIT)||(LA159_0>=SEQUENTIAL && LA159_0<=QUOT_ER)||LA159_0==L_NCName) ) {
                alt159=1;
            }
            else if ( ((LA159_0>=APOS && LA159_0<=QUOT)) ) {
                alt159=2;
            }
            switch (alt159) {
                case 1 :
                    // XQueryParser.g:1083:44: p_NCName
                    {
                    pushFollow(FOLLOW_p_NCName_in_p_PITest9288);
                    p_NCName486=p_NCName();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, p_NCName486.getTree());

                    }
                    break;
                case 2 :
                    // XQueryParser.g:1083:55: p_StringLiteral
                    {
                    pushFollow(FOLLOW_p_StringLiteral_in_p_PITest9292);
                    p_StringLiteral487=p_StringLiteral();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, p_StringLiteral487.getTree());

                    }
                    break;

            }

            RPAREN488=(CommonToken)match(input,RPAREN,FOLLOW_RPAREN_in_p_PITest9296); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            RPAREN488_tree = (XQDTCommonTree)adaptor.create(RPAREN488);
            adaptor.addChild(root_0, RPAREN488_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (XQDTCommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (XQDTCommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "p_PITest"

    public static class p_AttributeTest_return extends ParserRuleReturnScope {
        XQDTCommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "p_AttributeTest"
    // XQueryParser.g:1087:1: p_AttributeTest : ATTRIBUTE LPAREN ( p_AttribNameOrWildcard ( COMMA p_TypeName )? )? RPAREN ;
    public final XQueryParser.p_AttributeTest_return p_AttributeTest() throws RecognitionException {
        XQueryParser.p_AttributeTest_return retval = new XQueryParser.p_AttributeTest_return();
        retval.start = input.LT(1);

        XQDTCommonTree root_0 = null;

        CommonToken ATTRIBUTE489=null;
        CommonToken LPAREN490=null;
        CommonToken COMMA492=null;
        CommonToken RPAREN494=null;
        XQueryParser.p_AttribNameOrWildcard_return p_AttribNameOrWildcard491 = null;

        XQueryParser.p_TypeName_return p_TypeName493 = null;


        XQDTCommonTree ATTRIBUTE489_tree=null;
        XQDTCommonTree LPAREN490_tree=null;
        XQDTCommonTree COMMA492_tree=null;
        XQDTCommonTree RPAREN494_tree=null;

        try {
            // XQueryParser.g:1088:9: ( ATTRIBUTE LPAREN ( p_AttribNameOrWildcard ( COMMA p_TypeName )? )? RPAREN )
            // XQueryParser.g:1088:13: ATTRIBUTE LPAREN ( p_AttribNameOrWildcard ( COMMA p_TypeName )? )? RPAREN
            {
            root_0 = (XQDTCommonTree)adaptor.nil();

            ATTRIBUTE489=(CommonToken)match(input,ATTRIBUTE,FOLLOW_ATTRIBUTE_in_p_AttributeTest9324); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            ATTRIBUTE489_tree = (XQDTCommonTree)adaptor.create(ATTRIBUTE489);
            adaptor.addChild(root_0, ATTRIBUTE489_tree);
            }
            LPAREN490=(CommonToken)match(input,LPAREN,FOLLOW_LPAREN_in_p_AttributeTest9326); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            LPAREN490_tree = (XQDTCommonTree)adaptor.create(LPAREN490);
            adaptor.addChild(root_0, LPAREN490_tree);
            }
            // XQueryParser.g:1088:30: ( p_AttribNameOrWildcard ( COMMA p_TypeName )? )?
            int alt161=2;
            int LA161_0 = input.LA(1);

            if ( ((LA161_0>=ANCESTOR && LA161_0<=EXIT)||(LA161_0>=SEQUENTIAL && LA161_0<=QUOT_ER)||LA161_0==STAR||LA161_0==L_NCName) ) {
                alt161=1;
            }
            switch (alt161) {
                case 1 :
                    // XQueryParser.g:1088:31: p_AttribNameOrWildcard ( COMMA p_TypeName )?
                    {
                    pushFollow(FOLLOW_p_AttribNameOrWildcard_in_p_AttributeTest9329);
                    p_AttribNameOrWildcard491=p_AttribNameOrWildcard();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, p_AttribNameOrWildcard491.getTree());
                    // XQueryParser.g:1088:54: ( COMMA p_TypeName )?
                    int alt160=2;
                    int LA160_0 = input.LA(1);

                    if ( (LA160_0==COMMA) ) {
                        alt160=1;
                    }
                    switch (alt160) {
                        case 1 :
                            // XQueryParser.g:1088:55: COMMA p_TypeName
                            {
                            COMMA492=(CommonToken)match(input,COMMA,FOLLOW_COMMA_in_p_AttributeTest9332); if (state.failed) return retval;
                            if ( state.backtracking==0 ) {
                            COMMA492_tree = (XQDTCommonTree)adaptor.create(COMMA492);
                            adaptor.addChild(root_0, COMMA492_tree);
                            }
                            pushFollow(FOLLOW_p_TypeName_in_p_AttributeTest9334);
                            p_TypeName493=p_TypeName();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) adaptor.addChild(root_0, p_TypeName493.getTree());

                            }
                            break;

                    }


                    }
                    break;

            }

            RPAREN494=(CommonToken)match(input,RPAREN,FOLLOW_RPAREN_in_p_AttributeTest9340); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            RPAREN494_tree = (XQDTCommonTree)adaptor.create(RPAREN494);
            adaptor.addChild(root_0, RPAREN494_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (XQDTCommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (XQDTCommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "p_AttributeTest"

    public static class p_AttribNameOrWildcard_return extends ParserRuleReturnScope {
        XQDTCommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "p_AttribNameOrWildcard"
    // XQueryParser.g:1092:1: p_AttribNameOrWildcard : ( p_QName | STAR );
    public final XQueryParser.p_AttribNameOrWildcard_return p_AttribNameOrWildcard() throws RecognitionException {
        XQueryParser.p_AttribNameOrWildcard_return retval = new XQueryParser.p_AttribNameOrWildcard_return();
        retval.start = input.LT(1);

        XQDTCommonTree root_0 = null;

        CommonToken STAR496=null;
        XQueryParser.p_QName_return p_QName495 = null;


        XQDTCommonTree STAR496_tree=null;

        try {
            // XQueryParser.g:1093:9: ( p_QName | STAR )
            int alt162=2;
            int LA162_0 = input.LA(1);

            if ( ((LA162_0>=ANCESTOR && LA162_0<=EXIT)||(LA162_0>=SEQUENTIAL && LA162_0<=QUOT_ER)||LA162_0==L_NCName) ) {
                alt162=1;
            }
            else if ( (LA162_0==STAR) ) {
                alt162=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 162, 0, input);

                throw nvae;
            }
            switch (alt162) {
                case 1 :
                    // XQueryParser.g:1093:13: p_QName
                    {
                    root_0 = (XQDTCommonTree)adaptor.nil();

                    pushFollow(FOLLOW_p_QName_in_p_AttribNameOrWildcard9370);
                    p_QName495=p_QName();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, p_QName495.getTree());

                    }
                    break;
                case 2 :
                    // XQueryParser.g:1093:23: STAR
                    {
                    root_0 = (XQDTCommonTree)adaptor.nil();

                    STAR496=(CommonToken)match(input,STAR,FOLLOW_STAR_in_p_AttribNameOrWildcard9374); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    STAR496_tree = (XQDTCommonTree)adaptor.create(STAR496);
                    adaptor.addChild(root_0, STAR496_tree);
                    }

                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (XQDTCommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (XQDTCommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "p_AttribNameOrWildcard"

    public static class p_SchemaAttributeTest_return extends ParserRuleReturnScope {
        XQDTCommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "p_SchemaAttributeTest"
    // XQueryParser.g:1097:1: p_SchemaAttributeTest : SCHEMA_ATTRIBUTE LPAREN p_AttributeDeclaration RPAREN ;
    public final XQueryParser.p_SchemaAttributeTest_return p_SchemaAttributeTest() throws RecognitionException {
        XQueryParser.p_SchemaAttributeTest_return retval = new XQueryParser.p_SchemaAttributeTest_return();
        retval.start = input.LT(1);

        XQDTCommonTree root_0 = null;

        CommonToken SCHEMA_ATTRIBUTE497=null;
        CommonToken LPAREN498=null;
        CommonToken RPAREN500=null;
        XQueryParser.p_AttributeDeclaration_return p_AttributeDeclaration499 = null;


        XQDTCommonTree SCHEMA_ATTRIBUTE497_tree=null;
        XQDTCommonTree LPAREN498_tree=null;
        XQDTCommonTree RPAREN500_tree=null;

        try {
            // XQueryParser.g:1098:9: ( SCHEMA_ATTRIBUTE LPAREN p_AttributeDeclaration RPAREN )
            // XQueryParser.g:1098:13: SCHEMA_ATTRIBUTE LPAREN p_AttributeDeclaration RPAREN
            {
            root_0 = (XQDTCommonTree)adaptor.nil();

            SCHEMA_ATTRIBUTE497=(CommonToken)match(input,SCHEMA_ATTRIBUTE,FOLLOW_SCHEMA_ATTRIBUTE_in_p_SchemaAttributeTest9402); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            SCHEMA_ATTRIBUTE497_tree = (XQDTCommonTree)adaptor.create(SCHEMA_ATTRIBUTE497);
            adaptor.addChild(root_0, SCHEMA_ATTRIBUTE497_tree);
            }
            LPAREN498=(CommonToken)match(input,LPAREN,FOLLOW_LPAREN_in_p_SchemaAttributeTest9404); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            LPAREN498_tree = (XQDTCommonTree)adaptor.create(LPAREN498);
            adaptor.addChild(root_0, LPAREN498_tree);
            }
            pushFollow(FOLLOW_p_AttributeDeclaration_in_p_SchemaAttributeTest9406);
            p_AttributeDeclaration499=p_AttributeDeclaration();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, p_AttributeDeclaration499.getTree());
            RPAREN500=(CommonToken)match(input,RPAREN,FOLLOW_RPAREN_in_p_SchemaAttributeTest9408); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            RPAREN500_tree = (XQDTCommonTree)adaptor.create(RPAREN500);
            adaptor.addChild(root_0, RPAREN500_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (XQDTCommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (XQDTCommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "p_SchemaAttributeTest"

    public static class p_AttributeDeclaration_return extends ParserRuleReturnScope {
        XQDTCommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "p_AttributeDeclaration"
    // XQueryParser.g:1102:1: p_AttributeDeclaration : p_AttributeName ;
    public final XQueryParser.p_AttributeDeclaration_return p_AttributeDeclaration() throws RecognitionException {
        XQueryParser.p_AttributeDeclaration_return retval = new XQueryParser.p_AttributeDeclaration_return();
        retval.start = input.LT(1);

        XQDTCommonTree root_0 = null;

        XQueryParser.p_AttributeName_return p_AttributeName501 = null;



        try {
            // XQueryParser.g:1103:9: ( p_AttributeName )
            // XQueryParser.g:1103:11: p_AttributeName
            {
            root_0 = (XQDTCommonTree)adaptor.nil();

            pushFollow(FOLLOW_p_AttributeName_in_p_AttributeDeclaration9434);
            p_AttributeName501=p_AttributeName();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, p_AttributeName501.getTree());

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (XQDTCommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (XQDTCommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "p_AttributeDeclaration"

    public static class p_ElementTest_return extends ParserRuleReturnScope {
        XQDTCommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "p_ElementTest"
    // XQueryParser.g:1107:1: p_ElementTest : ELEMENT LPAREN ( p_ElementNameOrWildcard ( COMMA p_TypeName ( QUESTION )? )? )? RPAREN ;
    public final XQueryParser.p_ElementTest_return p_ElementTest() throws RecognitionException {
        XQueryParser.p_ElementTest_return retval = new XQueryParser.p_ElementTest_return();
        retval.start = input.LT(1);

        XQDTCommonTree root_0 = null;

        CommonToken ELEMENT502=null;
        CommonToken LPAREN503=null;
        CommonToken COMMA505=null;
        CommonToken QUESTION507=null;
        CommonToken RPAREN508=null;
        XQueryParser.p_ElementNameOrWildcard_return p_ElementNameOrWildcard504 = null;

        XQueryParser.p_TypeName_return p_TypeName506 = null;


        XQDTCommonTree ELEMENT502_tree=null;
        XQDTCommonTree LPAREN503_tree=null;
        XQDTCommonTree COMMA505_tree=null;
        XQDTCommonTree QUESTION507_tree=null;
        XQDTCommonTree RPAREN508_tree=null;

        try {
            // XQueryParser.g:1108:9: ( ELEMENT LPAREN ( p_ElementNameOrWildcard ( COMMA p_TypeName ( QUESTION )? )? )? RPAREN )
            // XQueryParser.g:1108:13: ELEMENT LPAREN ( p_ElementNameOrWildcard ( COMMA p_TypeName ( QUESTION )? )? )? RPAREN
            {
            root_0 = (XQDTCommonTree)adaptor.nil();

            ELEMENT502=(CommonToken)match(input,ELEMENT,FOLLOW_ELEMENT_in_p_ElementTest9462); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            ELEMENT502_tree = (XQDTCommonTree)adaptor.create(ELEMENT502);
            adaptor.addChild(root_0, ELEMENT502_tree);
            }
            LPAREN503=(CommonToken)match(input,LPAREN,FOLLOW_LPAREN_in_p_ElementTest9464); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            LPAREN503_tree = (XQDTCommonTree)adaptor.create(LPAREN503);
            adaptor.addChild(root_0, LPAREN503_tree);
            }
            // XQueryParser.g:1108:28: ( p_ElementNameOrWildcard ( COMMA p_TypeName ( QUESTION )? )? )?
            int alt165=2;
            int LA165_0 = input.LA(1);

            if ( ((LA165_0>=ANCESTOR && LA165_0<=EXIT)||(LA165_0>=SEQUENTIAL && LA165_0<=QUOT_ER)||LA165_0==STAR||LA165_0==L_NCName) ) {
                alt165=1;
            }
            switch (alt165) {
                case 1 :
                    // XQueryParser.g:1108:29: p_ElementNameOrWildcard ( COMMA p_TypeName ( QUESTION )? )?
                    {
                    pushFollow(FOLLOW_p_ElementNameOrWildcard_in_p_ElementTest9467);
                    p_ElementNameOrWildcard504=p_ElementNameOrWildcard();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, p_ElementNameOrWildcard504.getTree());
                    // XQueryParser.g:1108:53: ( COMMA p_TypeName ( QUESTION )? )?
                    int alt164=2;
                    int LA164_0 = input.LA(1);

                    if ( (LA164_0==COMMA) ) {
                        alt164=1;
                    }
                    switch (alt164) {
                        case 1 :
                            // XQueryParser.g:1108:54: COMMA p_TypeName ( QUESTION )?
                            {
                            COMMA505=(CommonToken)match(input,COMMA,FOLLOW_COMMA_in_p_ElementTest9470); if (state.failed) return retval;
                            if ( state.backtracking==0 ) {
                            COMMA505_tree = (XQDTCommonTree)adaptor.create(COMMA505);
                            adaptor.addChild(root_0, COMMA505_tree);
                            }
                            pushFollow(FOLLOW_p_TypeName_in_p_ElementTest9472);
                            p_TypeName506=p_TypeName();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) adaptor.addChild(root_0, p_TypeName506.getTree());
                            // XQueryParser.g:1108:71: ( QUESTION )?
                            int alt163=2;
                            int LA163_0 = input.LA(1);

                            if ( (LA163_0==QUESTION) ) {
                                alt163=1;
                            }
                            switch (alt163) {
                                case 1 :
                                    // XQueryParser.g:1108:71: QUESTION
                                    {
                                    QUESTION507=(CommonToken)match(input,QUESTION,FOLLOW_QUESTION_in_p_ElementTest9474); if (state.failed) return retval;
                                    if ( state.backtracking==0 ) {
                                    QUESTION507_tree = (XQDTCommonTree)adaptor.create(QUESTION507);
                                    adaptor.addChild(root_0, QUESTION507_tree);
                                    }

                                    }
                                    break;

                            }


                            }
                            break;

                    }


                    }
                    break;

            }

            RPAREN508=(CommonToken)match(input,RPAREN,FOLLOW_RPAREN_in_p_ElementTest9481); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            RPAREN508_tree = (XQDTCommonTree)adaptor.create(RPAREN508);
            adaptor.addChild(root_0, RPAREN508_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (XQDTCommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (XQDTCommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "p_ElementTest"

    public static class p_ElementNameOrWildcard_return extends ParserRuleReturnScope {
        XQDTCommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "p_ElementNameOrWildcard"
    // XQueryParser.g:1112:1: p_ElementNameOrWildcard : ( p_QName | STAR );
    public final XQueryParser.p_ElementNameOrWildcard_return p_ElementNameOrWildcard() throws RecognitionException {
        XQueryParser.p_ElementNameOrWildcard_return retval = new XQueryParser.p_ElementNameOrWildcard_return();
        retval.start = input.LT(1);

        XQDTCommonTree root_0 = null;

        CommonToken STAR510=null;
        XQueryParser.p_QName_return p_QName509 = null;


        XQDTCommonTree STAR510_tree=null;

        try {
            // XQueryParser.g:1113:9: ( p_QName | STAR )
            int alt166=2;
            int LA166_0 = input.LA(1);

            if ( ((LA166_0>=ANCESTOR && LA166_0<=EXIT)||(LA166_0>=SEQUENTIAL && LA166_0<=QUOT_ER)||LA166_0==L_NCName) ) {
                alt166=1;
            }
            else if ( (LA166_0==STAR) ) {
                alt166=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 166, 0, input);

                throw nvae;
            }
            switch (alt166) {
                case 1 :
                    // XQueryParser.g:1113:13: p_QName
                    {
                    root_0 = (XQDTCommonTree)adaptor.nil();

                    pushFollow(FOLLOW_p_QName_in_p_ElementNameOrWildcard9509);
                    p_QName509=p_QName();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, p_QName509.getTree());

                    }
                    break;
                case 2 :
                    // XQueryParser.g:1113:23: STAR
                    {
                    root_0 = (XQDTCommonTree)adaptor.nil();

                    STAR510=(CommonToken)match(input,STAR,FOLLOW_STAR_in_p_ElementNameOrWildcard9513); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    STAR510_tree = (XQDTCommonTree)adaptor.create(STAR510);
                    adaptor.addChild(root_0, STAR510_tree);
                    }

                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (XQDTCommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (XQDTCommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "p_ElementNameOrWildcard"

    public static class p_SchemaElementTest_return extends ParserRuleReturnScope {
        XQDTCommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "p_SchemaElementTest"
    // XQueryParser.g:1116:1: p_SchemaElementTest : SCHEMA_ELEMENT LPAREN p_ElementDeclaration RPAREN ;
    public final XQueryParser.p_SchemaElementTest_return p_SchemaElementTest() throws RecognitionException {
        XQueryParser.p_SchemaElementTest_return retval = new XQueryParser.p_SchemaElementTest_return();
        retval.start = input.LT(1);

        XQDTCommonTree root_0 = null;

        CommonToken SCHEMA_ELEMENT511=null;
        CommonToken LPAREN512=null;
        CommonToken RPAREN514=null;
        XQueryParser.p_ElementDeclaration_return p_ElementDeclaration513 = null;


        XQDTCommonTree SCHEMA_ELEMENT511_tree=null;
        XQDTCommonTree LPAREN512_tree=null;
        XQDTCommonTree RPAREN514_tree=null;

        try {
            // XQueryParser.g:1117:9: ( SCHEMA_ELEMENT LPAREN p_ElementDeclaration RPAREN )
            // XQueryParser.g:1117:13: SCHEMA_ELEMENT LPAREN p_ElementDeclaration RPAREN
            {
            root_0 = (XQDTCommonTree)adaptor.nil();

            SCHEMA_ELEMENT511=(CommonToken)match(input,SCHEMA_ELEMENT,FOLLOW_SCHEMA_ELEMENT_in_p_SchemaElementTest9533); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            SCHEMA_ELEMENT511_tree = (XQDTCommonTree)adaptor.create(SCHEMA_ELEMENT511);
            adaptor.addChild(root_0, SCHEMA_ELEMENT511_tree);
            }
            LPAREN512=(CommonToken)match(input,LPAREN,FOLLOW_LPAREN_in_p_SchemaElementTest9535); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            LPAREN512_tree = (XQDTCommonTree)adaptor.create(LPAREN512);
            adaptor.addChild(root_0, LPAREN512_tree);
            }
            pushFollow(FOLLOW_p_ElementDeclaration_in_p_SchemaElementTest9537);
            p_ElementDeclaration513=p_ElementDeclaration();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, p_ElementDeclaration513.getTree());
            RPAREN514=(CommonToken)match(input,RPAREN,FOLLOW_RPAREN_in_p_SchemaElementTest9539); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            RPAREN514_tree = (XQDTCommonTree)adaptor.create(RPAREN514);
            adaptor.addChild(root_0, RPAREN514_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (XQDTCommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (XQDTCommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "p_SchemaElementTest"

    public static class p_ElementDeclaration_return extends ParserRuleReturnScope {
        XQDTCommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "p_ElementDeclaration"
    // XQueryParser.g:1121:1: p_ElementDeclaration : p_ElementName ;
    public final XQueryParser.p_ElementDeclaration_return p_ElementDeclaration() throws RecognitionException {
        XQueryParser.p_ElementDeclaration_return retval = new XQueryParser.p_ElementDeclaration_return();
        retval.start = input.LT(1);

        XQDTCommonTree root_0 = null;

        XQueryParser.p_ElementName_return p_ElementName515 = null;



        try {
            // XQueryParser.g:1122:9: ( p_ElementName )
            // XQueryParser.g:1122:11: p_ElementName
            {
            root_0 = (XQDTCommonTree)adaptor.nil();

            pushFollow(FOLLOW_p_ElementName_in_p_ElementDeclaration9565);
            p_ElementName515=p_ElementName();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, p_ElementName515.getTree());

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (XQDTCommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (XQDTCommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "p_ElementDeclaration"

    public static class p_AttributeName_return extends ParserRuleReturnScope {
        XQDTCommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "p_AttributeName"
    // XQueryParser.g:1126:1: p_AttributeName : p_QName ;
    public final XQueryParser.p_AttributeName_return p_AttributeName() throws RecognitionException {
        XQueryParser.p_AttributeName_return retval = new XQueryParser.p_AttributeName_return();
        retval.start = input.LT(1);

        XQDTCommonTree root_0 = null;

        XQueryParser.p_QName_return p_QName516 = null;



        try {
            // XQueryParser.g:1127:9: ( p_QName )
            // XQueryParser.g:1127:13: p_QName
            {
            root_0 = (XQDTCommonTree)adaptor.nil();

            pushFollow(FOLLOW_p_QName_in_p_AttributeName9593);
            p_QName516=p_QName();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, p_QName516.getTree());

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (XQDTCommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (XQDTCommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "p_AttributeName"

    public static class p_ElementName_return extends ParserRuleReturnScope {
        XQDTCommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "p_ElementName"
    // XQueryParser.g:1131:1: p_ElementName : p_QName ;
    public final XQueryParser.p_ElementName_return p_ElementName() throws RecognitionException {
        XQueryParser.p_ElementName_return retval = new XQueryParser.p_ElementName_return();
        retval.start = input.LT(1);

        XQDTCommonTree root_0 = null;

        XQueryParser.p_QName_return p_QName517 = null;



        try {
            // XQueryParser.g:1132:9: ( p_QName )
            // XQueryParser.g:1132:13: p_QName
            {
            root_0 = (XQDTCommonTree)adaptor.nil();

            pushFollow(FOLLOW_p_QName_in_p_ElementName9621);
            p_QName517=p_QName();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, p_QName517.getTree());

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (XQDTCommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (XQDTCommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "p_ElementName"

    public static class p_TypeName_return extends ParserRuleReturnScope {
        XQDTCommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "p_TypeName"
    // XQueryParser.g:1136:1: p_TypeName : p_QName ;
    public final XQueryParser.p_TypeName_return p_TypeName() throws RecognitionException {
        XQueryParser.p_TypeName_return retval = new XQueryParser.p_TypeName_return();
        retval.start = input.LT(1);

        XQDTCommonTree root_0 = null;

        XQueryParser.p_QName_return p_QName518 = null;



        try {
            // XQueryParser.g:1137:9: ( p_QName )
            // XQueryParser.g:1137:13: p_QName
            {
            root_0 = (XQDTCommonTree)adaptor.nil();

            pushFollow(FOLLOW_p_QName_in_p_TypeName9649);
            p_QName518=p_QName();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, p_QName518.getTree());

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (XQDTCommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (XQDTCommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "p_TypeName"

    public static class p_TryCatchExpr_return extends ParserRuleReturnScope {
        XQDTCommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "p_TryCatchExpr"
    // XQueryParser.g:1147:1: p_TryCatchExpr : p_TryClause ( p_CatchClause )+ ;
    public final XQueryParser.p_TryCatchExpr_return p_TryCatchExpr() throws RecognitionException {
        XQueryParser.p_TryCatchExpr_return retval = new XQueryParser.p_TryCatchExpr_return();
        retval.start = input.LT(1);

        XQDTCommonTree root_0 = null;

        XQueryParser.p_TryClause_return p_TryClause519 = null;

        XQueryParser.p_CatchClause_return p_CatchClause520 = null;



        try {
            // XQueryParser.g:1148:9: ( p_TryClause ( p_CatchClause )+ )
            // XQueryParser.g:1148:11: p_TryClause ( p_CatchClause )+
            {
            root_0 = (XQDTCommonTree)adaptor.nil();

            pushFollow(FOLLOW_p_TryClause_in_p_TryCatchExpr9681);
            p_TryClause519=p_TryClause();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, p_TryClause519.getTree());
            // XQueryParser.g:1148:23: ( p_CatchClause )+
            int cnt167=0;
            loop167:
            do {
                int alt167=2;
                int LA167_0 = input.LA(1);

                if ( (LA167_0==CATCH) ) {
                    alt167=1;
                }


                switch (alt167) {
            	case 1 :
            	    // XQueryParser.g:1148:23: p_CatchClause
            	    {
            	    pushFollow(FOLLOW_p_CatchClause_in_p_TryCatchExpr9683);
            	    p_CatchClause520=p_CatchClause();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, p_CatchClause520.getTree());

            	    }
            	    break;

            	default :
            	    if ( cnt167 >= 1 ) break loop167;
            	    if (state.backtracking>0) {state.failed=true; return retval;}
                        EarlyExitException eee =
                            new EarlyExitException(167, input);
                        throw eee;
                }
                cnt167++;
            } while (true);


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (XQDTCommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (XQDTCommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "p_TryCatchExpr"

    public static class p_TryClause_return extends ParserRuleReturnScope {
        XQDTCommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "p_TryClause"
    // XQueryParser.g:1152:1: p_TryClause : kc= TRY LBRACKET pm_Expr RBRACKET ;
    public final XQueryParser.p_TryClause_return p_TryClause() throws RecognitionException {
        XQueryParser.p_TryClause_return retval = new XQueryParser.p_TryClause_return();
        retval.start = input.LT(1);

        XQDTCommonTree root_0 = null;

        CommonToken kc=null;
        CommonToken LBRACKET521=null;
        CommonToken RBRACKET523=null;
        XQueryParser.pm_Expr_return pm_Expr522 = null;


        XQDTCommonTree kc_tree=null;
        XQDTCommonTree LBRACKET521_tree=null;
        XQDTCommonTree RBRACKET523_tree=null;

        try {
            // XQueryParser.g:1153:9: (kc= TRY LBRACKET pm_Expr RBRACKET )
            // XQueryParser.g:1153:11: kc= TRY LBRACKET pm_Expr RBRACKET
            {
            root_0 = (XQDTCommonTree)adaptor.nil();

            kc=(CommonToken)match(input,TRY,FOLLOW_TRY_in_p_TryClause9712); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            kc_tree = (XQDTCommonTree)adaptor.create(kc);
            adaptor.addChild(root_0, kc_tree);
            }
            if ( state.backtracking==0 ) {
              ak(kc);
            }
            LBRACKET521=(CommonToken)match(input,LBRACKET,FOLLOW_LBRACKET_in_p_TryClause9716); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            LBRACKET521_tree = (XQDTCommonTree)adaptor.create(LBRACKET521);
            adaptor.addChild(root_0, LBRACKET521_tree);
            }
            pushFollow(FOLLOW_pm_Expr_in_p_TryClause9718);
            pm_Expr522=pm_Expr();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, pm_Expr522.getTree());
            RBRACKET523=(CommonToken)match(input,RBRACKET,FOLLOW_RBRACKET_in_p_TryClause9720); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            RBRACKET523_tree = (XQDTCommonTree)adaptor.create(RBRACKET523);
            adaptor.addChild(root_0, RBRACKET523_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (XQDTCommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (XQDTCommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "p_TryClause"

    public static class p_CatchClause_return extends ParserRuleReturnScope {
        XQDTCommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "p_CatchClause"
    // XQueryParser.g:1160:1: p_CatchClause : kc= CATCH p_CatchErrorList ( p_CatchVars )? LBRACKET pm_Expr RBRACKET ;
    public final XQueryParser.p_CatchClause_return p_CatchClause() throws RecognitionException {
        XQueryParser.p_CatchClause_return retval = new XQueryParser.p_CatchClause_return();
        retval.start = input.LT(1);

        XQDTCommonTree root_0 = null;

        CommonToken kc=null;
        CommonToken LBRACKET526=null;
        CommonToken RBRACKET528=null;
        XQueryParser.p_CatchErrorList_return p_CatchErrorList524 = null;

        XQueryParser.p_CatchVars_return p_CatchVars525 = null;

        XQueryParser.pm_Expr_return pm_Expr527 = null;


        XQDTCommonTree kc_tree=null;
        XQDTCommonTree LBRACKET526_tree=null;
        XQDTCommonTree RBRACKET528_tree=null;

        try {
            // XQueryParser.g:1161:9: (kc= CATCH p_CatchErrorList ( p_CatchVars )? LBRACKET pm_Expr RBRACKET )
            // XQueryParser.g:1161:11: kc= CATCH p_CatchErrorList ( p_CatchVars )? LBRACKET pm_Expr RBRACKET
            {
            root_0 = (XQDTCommonTree)adaptor.nil();

            kc=(CommonToken)match(input,CATCH,FOLLOW_CATCH_in_p_CatchClause9751); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            kc_tree = (XQDTCommonTree)adaptor.create(kc);
            adaptor.addChild(root_0, kc_tree);
            }
            if ( state.backtracking==0 ) {
              ak(kc);
            }
            pushFollow(FOLLOW_p_CatchErrorList_in_p_CatchClause9755);
            p_CatchErrorList524=p_CatchErrorList();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, p_CatchErrorList524.getTree());
            // XQueryParser.g:1161:48: ( p_CatchVars )?
            int alt168=2;
            int LA168_0 = input.LA(1);

            if ( (LA168_0==LPAREN) ) {
                alt168=1;
            }
            switch (alt168) {
                case 1 :
                    // XQueryParser.g:1161:48: p_CatchVars
                    {
                    pushFollow(FOLLOW_p_CatchVars_in_p_CatchClause9757);
                    p_CatchVars525=p_CatchVars();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, p_CatchVars525.getTree());

                    }
                    break;

            }

            LBRACKET526=(CommonToken)match(input,LBRACKET,FOLLOW_LBRACKET_in_p_CatchClause9760); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            LBRACKET526_tree = (XQDTCommonTree)adaptor.create(LBRACKET526);
            adaptor.addChild(root_0, LBRACKET526_tree);
            }
            pushFollow(FOLLOW_pm_Expr_in_p_CatchClause9762);
            pm_Expr527=pm_Expr();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, pm_Expr527.getTree());
            RBRACKET528=(CommonToken)match(input,RBRACKET,FOLLOW_RBRACKET_in_p_CatchClause9764); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            RBRACKET528_tree = (XQDTCommonTree)adaptor.create(RBRACKET528);
            adaptor.addChild(root_0, RBRACKET528_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (XQDTCommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (XQDTCommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "p_CatchClause"

    public static class p_CatchErrorList_return extends ParserRuleReturnScope {
        XQDTCommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "p_CatchErrorList"
    // XQueryParser.g:1165:1: p_CatchErrorList : ( p_NameTest ( VBAR p_NameTest )* | {...}? => () );
    public final XQueryParser.p_CatchErrorList_return p_CatchErrorList() throws RecognitionException {
        XQueryParser.p_CatchErrorList_return retval = new XQueryParser.p_CatchErrorList_return();
        retval.start = input.LT(1);

        XQDTCommonTree root_0 = null;

        CommonToken VBAR530=null;
        XQueryParser.p_NameTest_return p_NameTest529 = null;

        XQueryParser.p_NameTest_return p_NameTest531 = null;


        XQDTCommonTree VBAR530_tree=null;

        try {
            // XQueryParser.g:1166:9: ( p_NameTest ( VBAR p_NameTest )* | {...}? => () )
            int alt170=2;
            int LA170_0 = input.LA(1);

            if ( ((LA170_0>=ANCESTOR && LA170_0<=EXIT)||(LA170_0>=SEQUENTIAL && LA170_0<=QUOT_ER)||LA170_0==STAR||LA170_0==L_NCName) ) {
                alt170=1;
            }
            else if ( (LA170_0==LPAREN||LA170_0==LBRACKET) && ((lc(MLS)))) {
                alt170=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 170, 0, input);

                throw nvae;
            }
            switch (alt170) {
                case 1 :
                    // XQueryParser.g:1166:11: p_NameTest ( VBAR p_NameTest )*
                    {
                    root_0 = (XQDTCommonTree)adaptor.nil();

                    pushFollow(FOLLOW_p_NameTest_in_p_CatchErrorList9790);
                    p_NameTest529=p_NameTest();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, p_NameTest529.getTree());
                    // XQueryParser.g:1166:22: ( VBAR p_NameTest )*
                    loop169:
                    do {
                        int alt169=2;
                        int LA169_0 = input.LA(1);

                        if ( (LA169_0==VBAR) ) {
                            alt169=1;
                        }


                        switch (alt169) {
                    	case 1 :
                    	    // XQueryParser.g:1166:23: VBAR p_NameTest
                    	    {
                    	    VBAR530=(CommonToken)match(input,VBAR,FOLLOW_VBAR_in_p_CatchErrorList9793); if (state.failed) return retval;
                    	    if ( state.backtracking==0 ) {
                    	    VBAR530_tree = (XQDTCommonTree)adaptor.create(VBAR530);
                    	    adaptor.addChild(root_0, VBAR530_tree);
                    	    }
                    	    pushFollow(FOLLOW_p_NameTest_in_p_CatchErrorList9795);
                    	    p_NameTest531=p_NameTest();

                    	    state._fsp--;
                    	    if (state.failed) return retval;
                    	    if ( state.backtracking==0 ) adaptor.addChild(root_0, p_NameTest531.getTree());

                    	    }
                    	    break;

                    	default :
                    	    break loop169;
                        }
                    } while (true);


                    }
                    break;
                case 2 :
                    // XQueryParser.g:1167:11: {...}? => ()
                    {
                    root_0 = (XQDTCommonTree)adaptor.nil();

                    if ( !((lc(MLS))) ) {
                        if (state.backtracking>0) {state.failed=true; return retval;}
                        throw new FailedPredicateException(input, "p_CatchErrorList", "lc(MLS)");
                    }
                    // XQueryParser.g:1167:24: ()
                    // XQueryParser.g:1167:38: 
                    {
                    }


                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (XQDTCommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (XQDTCommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "p_CatchErrorList"

    public static class p_CatchVars_return extends ParserRuleReturnScope {
        XQDTCommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "p_CatchVars"
    // XQueryParser.g:1171:2: p_CatchVars : LPAREN DOLLAR p_VarName ( COMMA DOLLAR p_VarName ( COMMA DOLLAR p_VarName )? )? RPAREN ;
    public final XQueryParser.p_CatchVars_return p_CatchVars() throws RecognitionException {
        XQueryParser.p_CatchVars_return retval = new XQueryParser.p_CatchVars_return();
        retval.start = input.LT(1);

        XQDTCommonTree root_0 = null;

        CommonToken LPAREN532=null;
        CommonToken DOLLAR533=null;
        CommonToken COMMA535=null;
        CommonToken DOLLAR536=null;
        CommonToken COMMA538=null;
        CommonToken DOLLAR539=null;
        CommonToken RPAREN541=null;
        XQueryParser.p_VarName_return p_VarName534 = null;

        XQueryParser.p_VarName_return p_VarName537 = null;

        XQueryParser.p_VarName_return p_VarName540 = null;


        XQDTCommonTree LPAREN532_tree=null;
        XQDTCommonTree DOLLAR533_tree=null;
        XQDTCommonTree COMMA535_tree=null;
        XQDTCommonTree DOLLAR536_tree=null;
        XQDTCommonTree COMMA538_tree=null;
        XQDTCommonTree DOLLAR539_tree=null;
        XQDTCommonTree RPAREN541_tree=null;

        try {
            // XQueryParser.g:1172:9: ( LPAREN DOLLAR p_VarName ( COMMA DOLLAR p_VarName ( COMMA DOLLAR p_VarName )? )? RPAREN )
            // XQueryParser.g:1172:11: LPAREN DOLLAR p_VarName ( COMMA DOLLAR p_VarName ( COMMA DOLLAR p_VarName )? )? RPAREN
            {
            root_0 = (XQDTCommonTree)adaptor.nil();

            LPAREN532=(CommonToken)match(input,LPAREN,FOLLOW_LPAREN_in_p_CatchVars9841); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            LPAREN532_tree = (XQDTCommonTree)adaptor.create(LPAREN532);
            adaptor.addChild(root_0, LPAREN532_tree);
            }
            DOLLAR533=(CommonToken)match(input,DOLLAR,FOLLOW_DOLLAR_in_p_CatchVars9843); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            DOLLAR533_tree = (XQDTCommonTree)adaptor.create(DOLLAR533);
            adaptor.addChild(root_0, DOLLAR533_tree);
            }
            pushFollow(FOLLOW_p_VarName_in_p_CatchVars9845);
            p_VarName534=p_VarName();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, p_VarName534.getTree());
            // XQueryParser.g:1172:35: ( COMMA DOLLAR p_VarName ( COMMA DOLLAR p_VarName )? )?
            int alt172=2;
            int LA172_0 = input.LA(1);

            if ( (LA172_0==COMMA) ) {
                alt172=1;
            }
            switch (alt172) {
                case 1 :
                    // XQueryParser.g:1172:36: COMMA DOLLAR p_VarName ( COMMA DOLLAR p_VarName )?
                    {
                    COMMA535=(CommonToken)match(input,COMMA,FOLLOW_COMMA_in_p_CatchVars9848); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    COMMA535_tree = (XQDTCommonTree)adaptor.create(COMMA535);
                    adaptor.addChild(root_0, COMMA535_tree);
                    }
                    DOLLAR536=(CommonToken)match(input,DOLLAR,FOLLOW_DOLLAR_in_p_CatchVars9850); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    DOLLAR536_tree = (XQDTCommonTree)adaptor.create(DOLLAR536);
                    adaptor.addChild(root_0, DOLLAR536_tree);
                    }
                    pushFollow(FOLLOW_p_VarName_in_p_CatchVars9852);
                    p_VarName537=p_VarName();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, p_VarName537.getTree());
                    // XQueryParser.g:1172:59: ( COMMA DOLLAR p_VarName )?
                    int alt171=2;
                    int LA171_0 = input.LA(1);

                    if ( (LA171_0==COMMA) ) {
                        alt171=1;
                    }
                    switch (alt171) {
                        case 1 :
                            // XQueryParser.g:1172:60: COMMA DOLLAR p_VarName
                            {
                            COMMA538=(CommonToken)match(input,COMMA,FOLLOW_COMMA_in_p_CatchVars9855); if (state.failed) return retval;
                            if ( state.backtracking==0 ) {
                            COMMA538_tree = (XQDTCommonTree)adaptor.create(COMMA538);
                            adaptor.addChild(root_0, COMMA538_tree);
                            }
                            DOLLAR539=(CommonToken)match(input,DOLLAR,FOLLOW_DOLLAR_in_p_CatchVars9857); if (state.failed) return retval;
                            if ( state.backtracking==0 ) {
                            DOLLAR539_tree = (XQDTCommonTree)adaptor.create(DOLLAR539);
                            adaptor.addChild(root_0, DOLLAR539_tree);
                            }
                            pushFollow(FOLLOW_p_VarName_in_p_CatchVars9859);
                            p_VarName540=p_VarName();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) adaptor.addChild(root_0, p_VarName540.getTree());

                            }
                            break;

                    }


                    }
                    break;

            }

            RPAREN541=(CommonToken)match(input,RPAREN,FOLLOW_RPAREN_in_p_CatchVars9865); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            RPAREN541_tree = (XQDTCommonTree)adaptor.create(RPAREN541);
            adaptor.addChild(root_0, RPAREN541_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (XQDTCommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (XQDTCommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "p_CatchVars"

    public static class p_StringLiteral_return extends ParserRuleReturnScope {
        XQDTCommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "p_StringLiteral"
    // XQueryParser.g:1198:1: p_StringLiteral : ( QUOT p_QuotStringLiteralContent QUOT -> ^( StringLiteral ( p_QuotStringLiteralContent )* ) | APOS p_AposStringLiteralContent APOS -> ^( StringLiteral ( p_AposStringLiteralContent )* ) );
    public final XQueryParser.p_StringLiteral_return p_StringLiteral() throws RecognitionException {
        XQueryParser.p_StringLiteral_return retval = new XQueryParser.p_StringLiteral_return();
        retval.start = input.LT(1);

        XQDTCommonTree root_0 = null;

        CommonToken QUOT542=null;
        CommonToken QUOT544=null;
        CommonToken APOS545=null;
        CommonToken APOS547=null;
        XQueryParser.p_QuotStringLiteralContent_return p_QuotStringLiteralContent543 = null;

        XQueryParser.p_AposStringLiteralContent_return p_AposStringLiteralContent546 = null;


        XQDTCommonTree QUOT542_tree=null;
        XQDTCommonTree QUOT544_tree=null;
        XQDTCommonTree APOS545_tree=null;
        XQDTCommonTree APOS547_tree=null;
        RewriteRuleTokenStream stream_APOS=new RewriteRuleTokenStream(adaptor,"token APOS");
        RewriteRuleTokenStream stream_QUOT=new RewriteRuleTokenStream(adaptor,"token QUOT");
        RewriteRuleSubtreeStream stream_p_AposStringLiteralContent=new RewriteRuleSubtreeStream(adaptor,"rule p_AposStringLiteralContent");
        RewriteRuleSubtreeStream stream_p_QuotStringLiteralContent=new RewriteRuleSubtreeStream(adaptor,"rule p_QuotStringLiteralContent");
        try {
            // XQueryParser.g:1199:9: ( QUOT p_QuotStringLiteralContent QUOT -> ^( StringLiteral ( p_QuotStringLiteralContent )* ) | APOS p_AposStringLiteralContent APOS -> ^( StringLiteral ( p_AposStringLiteralContent )* ) )
            int alt173=2;
            int LA173_0 = input.LA(1);

            if ( (LA173_0==QUOT) ) {
                alt173=1;
            }
            else if ( (LA173_0==APOS) ) {
                alt173=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 173, 0, input);

                throw nvae;
            }
            switch (alt173) {
                case 1 :
                    // XQueryParser.g:1199:11: QUOT p_QuotStringLiteralContent QUOT
                    {
                    QUOT542=(CommonToken)match(input,QUOT,FOLLOW_QUOT_in_p_StringLiteral9914); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_QUOT.add(QUOT542);

                    if ( state.backtracking==0 ) {
                      pushStringLexer(false);
                    }
                    pushFollow(FOLLOW_p_QuotStringLiteralContent_in_p_StringLiteral9918);
                    p_QuotStringLiteralContent543=p_QuotStringLiteralContent();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_p_QuotStringLiteralContent.add(p_QuotStringLiteralContent543.getTree());
                    QUOT544=(CommonToken)match(input,QUOT,FOLLOW_QUOT_in_p_StringLiteral9920); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_QUOT.add(QUOT544);

                    if ( state.backtracking==0 ) {
                       popLexer(); 
                    }


                    // AST REWRITE
                    // elements: p_QuotStringLiteralContent
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (XQDTCommonTree)adaptor.nil();
                    // 1200:17: -> ^( StringLiteral ( p_QuotStringLiteralContent )* )
                    {
                        // XQueryParser.g:1200:20: ^( StringLiteral ( p_QuotStringLiteralContent )* )
                        {
                        XQDTCommonTree root_1 = (XQDTCommonTree)adaptor.nil();
                        root_1 = (XQDTCommonTree)adaptor.becomeRoot((XQDTCommonTree)adaptor.create(StringLiteral, "StringLiteral"), root_1);

                        // XQueryParser.g:1200:36: ( p_QuotStringLiteralContent )*
                        while ( stream_p_QuotStringLiteralContent.hasNext() ) {
                            adaptor.addChild(root_1, stream_p_QuotStringLiteralContent.nextTree());

                        }
                        stream_p_QuotStringLiteralContent.reset();

                        adaptor.addChild(root_0, root_1);
                        }

                    }

                    retval.tree = root_0;}
                    }
                    break;
                case 2 :
                    // XQueryParser.g:1201:13: APOS p_AposStringLiteralContent APOS
                    {
                    APOS545=(CommonToken)match(input,APOS,FOLLOW_APOS_in_p_StringLiteral9961); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_APOS.add(APOS545);

                    if ( state.backtracking==0 ) {
                      pushStringLexer(true);
                    }
                    pushFollow(FOLLOW_p_AposStringLiteralContent_in_p_StringLiteral9965);
                    p_AposStringLiteralContent546=p_AposStringLiteralContent();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_p_AposStringLiteralContent.add(p_AposStringLiteralContent546.getTree());
                    APOS547=(CommonToken)match(input,APOS,FOLLOW_APOS_in_p_StringLiteral9967); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_APOS.add(APOS547);

                    if ( state.backtracking==0 ) {
                       popLexer(); 
                    }


                    // AST REWRITE
                    // elements: p_AposStringLiteralContent
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (XQDTCommonTree)adaptor.nil();
                    // 1202:17: -> ^( StringLiteral ( p_AposStringLiteralContent )* )
                    {
                        // XQueryParser.g:1202:20: ^( StringLiteral ( p_AposStringLiteralContent )* )
                        {
                        XQDTCommonTree root_1 = (XQDTCommonTree)adaptor.nil();
                        root_1 = (XQDTCommonTree)adaptor.becomeRoot((XQDTCommonTree)adaptor.create(StringLiteral, "StringLiteral"), root_1);

                        // XQueryParser.g:1202:36: ( p_AposStringLiteralContent )*
                        while ( stream_p_AposStringLiteralContent.hasNext() ) {
                            adaptor.addChild(root_1, stream_p_AposStringLiteralContent.nextTree());

                        }
                        stream_p_AposStringLiteralContent.reset();

                        adaptor.addChild(root_0, root_1);
                        }

                    }

                    retval.tree = root_0;}
                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (XQDTCommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (XQDTCommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "p_StringLiteral"

    public static class p_QuotStringLiteralContent_return extends ParserRuleReturnScope {
        XQDTCommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "p_QuotStringLiteralContent"
    // XQueryParser.g:1209:1: p_QuotStringLiteralContent : ( ESCAPE_QUOT | L_CharRef | L_PredefinedEntityRef | ~ ( QUOT | AMP ) )* ;
    public final XQueryParser.p_QuotStringLiteralContent_return p_QuotStringLiteralContent() throws RecognitionException {
        XQueryParser.p_QuotStringLiteralContent_return retval = new XQueryParser.p_QuotStringLiteralContent_return();
        retval.start = input.LT(1);

        XQDTCommonTree root_0 = null;

        CommonToken set548=null;

        XQDTCommonTree set548_tree=null;

        try {
            // XQueryParser.g:1210:9: ( ( ESCAPE_QUOT | L_CharRef | L_PredefinedEntityRef | ~ ( QUOT | AMP ) )* )
            // XQueryParser.g:1210:11: ( ESCAPE_QUOT | L_CharRef | L_PredefinedEntityRef | ~ ( QUOT | AMP ) )*
            {
            root_0 = (XQDTCommonTree)adaptor.nil();

            // XQueryParser.g:1210:11: ( ESCAPE_QUOT | L_CharRef | L_PredefinedEntityRef | ~ ( QUOT | AMP ) )*
            loop174:
            do {
                int alt174=2;
                int LA174_0 = input.LA(1);

                if ( ((LA174_0>=L_QuotAttrContentChar && LA174_0<=NOTEQUAL)||(LA174_0>=COMMA && LA174_0<=APOS)||(LA174_0>=NCNameStartChar && LA174_0<=BinaryTest)) ) {
                    alt174=1;
                }


                switch (alt174) {
            	case 1 :
            	    // XQueryParser.g:
            	    {
            	    set548=(CommonToken)input.LT(1);
            	    if ( (input.LA(1)>=L_QuotAttrContentChar && input.LA(1)<=NOTEQUAL)||(input.LA(1)>=COMMA && input.LA(1)<=APOS)||(input.LA(1)>=NCNameStartChar && input.LA(1)<=BinaryTest) ) {
            	        input.consume();
            	        if ( state.backtracking==0 ) adaptor.addChild(root_0, (XQDTCommonTree)adaptor.create(set548));
            	        state.errorRecovery=false;state.failed=false;
            	    }
            	    else {
            	        if (state.backtracking>0) {state.failed=true; return retval;}
            	        MismatchedSetException mse = new MismatchedSetException(null,input);
            	        throw mse;
            	    }


            	    }
            	    break;

            	default :
            	    break loop174;
                }
            } while (true);


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (XQDTCommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (XQDTCommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "p_QuotStringLiteralContent"

    public static class p_AposStringLiteralContent_return extends ParserRuleReturnScope {
        XQDTCommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "p_AposStringLiteralContent"
    // XQueryParser.g:1218:1: p_AposStringLiteralContent : ( ESCAPE_QUOT | L_CharRef | L_PredefinedEntityRef | ~ ( APOS | AMP ) )* ;
    public final XQueryParser.p_AposStringLiteralContent_return p_AposStringLiteralContent() throws RecognitionException {
        XQueryParser.p_AposStringLiteralContent_return retval = new XQueryParser.p_AposStringLiteralContent_return();
        retval.start = input.LT(1);

        XQDTCommonTree root_0 = null;

        CommonToken set549=null;

        XQDTCommonTree set549_tree=null;

        try {
            // XQueryParser.g:1219:9: ( ( ESCAPE_QUOT | L_CharRef | L_PredefinedEntityRef | ~ ( APOS | AMP ) )* )
            // XQueryParser.g:1219:11: ( ESCAPE_QUOT | L_CharRef | L_PredefinedEntityRef | ~ ( APOS | AMP ) )*
            {
            root_0 = (XQDTCommonTree)adaptor.nil();

            // XQueryParser.g:1219:11: ( ESCAPE_QUOT | L_CharRef | L_PredefinedEntityRef | ~ ( APOS | AMP ) )*
            loop175:
            do {
                int alt175=2;
                int LA175_0 = input.LA(1);

                if ( ((LA175_0>=L_QuotAttrContentChar && LA175_0<=NOTEQUAL)||(LA175_0>=COMMA && LA175_0<=CHARREF_HEX)||(LA175_0>=QUOT && LA175_0<=BinaryTest)) ) {
                    alt175=1;
                }


                switch (alt175) {
            	case 1 :
            	    // XQueryParser.g:
            	    {
            	    set549=(CommonToken)input.LT(1);
            	    if ( (input.LA(1)>=L_QuotAttrContentChar && input.LA(1)<=NOTEQUAL)||(input.LA(1)>=COMMA && input.LA(1)<=CHARREF_HEX)||(input.LA(1)>=QUOT && input.LA(1)<=BinaryTest) ) {
            	        input.consume();
            	        if ( state.backtracking==0 ) adaptor.addChild(root_0, (XQDTCommonTree)adaptor.create(set549));
            	        state.errorRecovery=false;state.failed=false;
            	    }
            	    else {
            	        if (state.backtracking>0) {state.failed=true; return retval;}
            	        MismatchedSetException mse = new MismatchedSetException(null,input);
            	        throw mse;
            	    }


            	    }
            	    break;

            	default :
            	    break loop175;
                }
            } while (true);


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (XQDTCommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (XQDTCommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "p_AposStringLiteralContent"

    public static class p_QName_return extends ParserRuleReturnScope {
        XQDTCommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "p_QName"
    // XQueryParser.g:1252:1: p_QName : p_NCName p_LocalNCName -> ^( QName p_NCName ( p_LocalNCName )? ) ;
    public final XQueryParser.p_QName_return p_QName() throws RecognitionException {
        XQueryParser.p_QName_return retval = new XQueryParser.p_QName_return();
        retval.start = input.LT(1);

        XQDTCommonTree root_0 = null;

        XQueryParser.p_NCName_return p_NCName550 = null;

        XQueryParser.p_LocalNCName_return p_LocalNCName551 = null;


        RewriteRuleSubtreeStream stream_p_LocalNCName=new RewriteRuleSubtreeStream(adaptor,"rule p_LocalNCName");
        RewriteRuleSubtreeStream stream_p_NCName=new RewriteRuleSubtreeStream(adaptor,"rule p_NCName");
        setWsExplicit(true);
        try {
            // XQueryParser.g:1253:9: ( p_NCName p_LocalNCName -> ^( QName p_NCName ( p_LocalNCName )? ) )
            // XQueryParser.g:1253:11: p_NCName p_LocalNCName
            {
            pushFollow(FOLLOW_p_NCName_in_p_QName10165);
            p_NCName550=p_NCName();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_p_NCName.add(p_NCName550.getTree());
            pushFollow(FOLLOW_p_LocalNCName_in_p_QName10167);
            p_LocalNCName551=p_LocalNCName();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_p_LocalNCName.add(p_LocalNCName551.getTree());


            // AST REWRITE
            // elements: p_NCName, p_LocalNCName
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (XQDTCommonTree)adaptor.nil();
            // 1254:17: -> ^( QName p_NCName ( p_LocalNCName )? )
            {
                // XQueryParser.g:1254:20: ^( QName p_NCName ( p_LocalNCName )? )
                {
                XQDTCommonTree root_1 = (XQDTCommonTree)adaptor.nil();
                root_1 = (XQDTCommonTree)adaptor.becomeRoot((XQDTCommonTree)adaptor.create(QName, "QName"), root_1);

                adaptor.addChild(root_1, stream_p_NCName.nextTree());
                // XQueryParser.g:1254:37: ( p_LocalNCName )?
                if ( stream_p_LocalNCName.hasNext() ) {
                    adaptor.addChild(root_1, stream_p_LocalNCName.nextTree());

                }
                stream_p_LocalNCName.reset();

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (XQDTCommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (XQDTCommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "p_QName"

    public static class p_LocalNCName_return extends ParserRuleReturnScope {
        XQDTCommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "p_LocalNCName"
    // XQueryParser.g:1259:1: p_LocalNCName : ( COLON p_NCName )? ;
    public final XQueryParser.p_LocalNCName_return p_LocalNCName() throws RecognitionException {
        XQueryParser.p_LocalNCName_return retval = new XQueryParser.p_LocalNCName_return();
        retval.start = input.LT(1);

        XQDTCommonTree root_0 = null;

        CommonToken COLON552=null;
        XQueryParser.p_NCName_return p_NCName553 = null;


        XQDTCommonTree COLON552_tree=null;

        try {
            // XQueryParser.g:1260:9: ( ( COLON p_NCName )? )
            // XQueryParser.g:1260:11: ( COLON p_NCName )?
            {
            root_0 = (XQDTCommonTree)adaptor.nil();

            // XQueryParser.g:1260:11: ( COLON p_NCName )?
            int alt176=2;
            int LA176_0 = input.LA(1);

            if ( (LA176_0==COLON) ) {
                alt176=1;
            }
            switch (alt176) {
                case 1 :
                    // XQueryParser.g:1260:12: COLON p_NCName
                    {
                    COLON552=(CommonToken)match(input,COLON,FOLLOW_COLON_in_p_LocalNCName10222); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    COLON552_tree = (XQDTCommonTree)adaptor.create(COLON552);
                    adaptor.addChild(root_0, COLON552_tree);
                    }
                    pushFollow(FOLLOW_p_NCName_in_p_LocalNCName10224);
                    p_NCName553=p_NCName();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, p_NCName553.getTree());

                    }
                    break;

            }


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (XQDTCommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (XQDTCommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            setWsExplicit(false);
        }
        return retval;
    }
    // $ANTLR end "p_LocalNCName"

    public static class p_FQName_return extends ParserRuleReturnScope {
        XQDTCommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "p_FQName"
    // XQueryParser.g:1267:1: p_FQName : p_FNCName p_LocalFNCName ;
    public final XQueryParser.p_FQName_return p_FQName() throws RecognitionException {
        XQueryParser.p_FQName_return retval = new XQueryParser.p_FQName_return();
        retval.start = input.LT(1);

        XQDTCommonTree root_0 = null;

        XQueryParser.p_FNCName_return p_FNCName554 = null;

        XQueryParser.p_LocalFNCName_return p_LocalFNCName555 = null;



        setWsExplicit(true);
        try {
            // XQueryParser.g:1268:9: ( p_FNCName p_LocalFNCName )
            // XQueryParser.g:1268:11: p_FNCName p_LocalFNCName
            {
            root_0 = (XQDTCommonTree)adaptor.nil();

            pushFollow(FOLLOW_p_FNCName_in_p_FQName10271);
            p_FNCName554=p_FNCName();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, p_FNCName554.getTree());
            pushFollow(FOLLOW_p_LocalFNCName_in_p_FQName10273);
            p_LocalFNCName555=p_LocalFNCName();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, p_LocalFNCName555.getTree());

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (XQDTCommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (XQDTCommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "p_FQName"

    public static class p_LocalFNCName_return extends ParserRuleReturnScope {
        XQDTCommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "p_LocalFNCName"
    // XQueryParser.g:1273:1: p_LocalFNCName : ( COLON p_NCName )? ;
    public final XQueryParser.p_LocalFNCName_return p_LocalFNCName() throws RecognitionException {
        XQueryParser.p_LocalFNCName_return retval = new XQueryParser.p_LocalFNCName_return();
        retval.start = input.LT(1);

        XQDTCommonTree root_0 = null;

        CommonToken COLON556=null;
        XQueryParser.p_NCName_return p_NCName557 = null;


        XQDTCommonTree COLON556_tree=null;

        try {
            // XQueryParser.g:1274:9: ( ( COLON p_NCName )? )
            // XQueryParser.g:1274:11: ( COLON p_NCName )?
            {
            root_0 = (XQDTCommonTree)adaptor.nil();

            // XQueryParser.g:1274:11: ( COLON p_NCName )?
            int alt177=2;
            int LA177_0 = input.LA(1);

            if ( (LA177_0==COLON) ) {
                alt177=1;
            }
            switch (alt177) {
                case 1 :
                    // XQueryParser.g:1274:12: COLON p_NCName
                    {
                    COLON556=(CommonToken)match(input,COLON,FOLLOW_COLON_in_p_LocalFNCName10301); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    COLON556_tree = (XQDTCommonTree)adaptor.create(COLON556);
                    adaptor.addChild(root_0, COLON556_tree);
                    }
                    pushFollow(FOLLOW_p_NCName_in_p_LocalFNCName10303);
                    p_NCName557=p_NCName();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, p_NCName557.getTree());

                    }
                    break;

            }


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (XQDTCommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (XQDTCommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            setWsExplicit(false);
        }
        return retval;
    }
    // $ANTLR end "p_LocalFNCName"

    public static class p_NCName_return extends ParserRuleReturnScope {
        XQDTCommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "p_NCName"
    // XQueryParser.g:1280:1: p_NCName : ( L_NCName | ANCESTOR | ANCESTOR_OR_SELF | AND | AS | ASCENDING | AT | ATTRIBUTE | BASE_URI | BOUNDARY_SPACE | BY | CASE | CAST | CASTABLE | CHILD | COLLATION | COMMENT | CONSTRUCTION | COPY_NAMESPACES | DECLARE | DEFAULT | DESCENDANT | DESCENDANT_OR_SELF | DESCENDING | DIV | DOCUMENT | DOCUMENT_NODE | ELEMENT | ELSE | EMPTY | EMPTY_SEQUENCE | ENCODING | EQ | EVERY | EXCEPT | EXTERNAL | FOLLOWING | FOLLOWING_SIBLING | FOR | FUNCTION | GE | GREATEST | GT | IDIV | IF | IMPORT | IN | INHERIT | INSTANCE | INTERSECT | IS | ITEM | LAX | LE | LEAST | LET | LT | MOD | MODULE | NAMESPACE | NE | NO_INHERIT | NO_PRESERVE | NODE | OF | OPTION | OR | ORDER | ORDERED | ORDERING | PARENT | PRECEDING | PRECEDING_SIBLING | PRESERVE | PROCESSING_INSTRUCTION | RETURN | SATISFIES | SCHEMA | SCHEMA_ATTRIBUTE | SCHEMA_ELEMENT | SELF | SOME | STABLE | STRICT | STRIP | TEXT | THEN | TO | TREAT | TYPESWITCH | UNION | UNORDERED | VALIDATE | VARIABLE | VERSION | WHERE | XQUERY | CATCH | CONTEXT | COUNT | DECIMAL_FORMAT | DECIMAL_SEPARATOR | DIGIT | END | GROUP | GROUPING_SEPARATOR | INFINITY | MINUS_SIGN | NAMESPACE_NODE | NAN | NEXT | ONLY | OUTER | PATTERN_SEPARATOR | PERCENT | PER_MILLE | PREVIOUS | SLIDING | START | TRY | TUMBLING | WHEN | WINDOW | ZERO_DIGIT | AFTER | BEFORE | COPY | DELETE | FIRST | INSERT | INTO | LAST | MODIFY | NODES | RENAME | REPLACE | REVALIDATION | SKIP | UPDATING | VALUE | WITH | BLOCK | CONSTANT | EXIT | SEQUENTIAL | SET | SIMPLE | WHILE | EVAL | USING | BINARY | PRIVATE | AMP_ER | APOS_ER | QUOT_ER );
    public final XQueryParser.p_NCName_return p_NCName() throws RecognitionException {
        XQueryParser.p_NCName_return retval = new XQueryParser.p_NCName_return();
        retval.start = input.LT(1);

        XQDTCommonTree root_0 = null;

        CommonToken set558=null;

        XQDTCommonTree set558_tree=null;

        try {
            // XQueryParser.g:1281:9: ( L_NCName | ANCESTOR | ANCESTOR_OR_SELF | AND | AS | ASCENDING | AT | ATTRIBUTE | BASE_URI | BOUNDARY_SPACE | BY | CASE | CAST | CASTABLE | CHILD | COLLATION | COMMENT | CONSTRUCTION | COPY_NAMESPACES | DECLARE | DEFAULT | DESCENDANT | DESCENDANT_OR_SELF | DESCENDING | DIV | DOCUMENT | DOCUMENT_NODE | ELEMENT | ELSE | EMPTY | EMPTY_SEQUENCE | ENCODING | EQ | EVERY | EXCEPT | EXTERNAL | FOLLOWING | FOLLOWING_SIBLING | FOR | FUNCTION | GE | GREATEST | GT | IDIV | IF | IMPORT | IN | INHERIT | INSTANCE | INTERSECT | IS | ITEM | LAX | LE | LEAST | LET | LT | MOD | MODULE | NAMESPACE | NE | NO_INHERIT | NO_PRESERVE | NODE | OF | OPTION | OR | ORDER | ORDERED | ORDERING | PARENT | PRECEDING | PRECEDING_SIBLING | PRESERVE | PROCESSING_INSTRUCTION | RETURN | SATISFIES | SCHEMA | SCHEMA_ATTRIBUTE | SCHEMA_ELEMENT | SELF | SOME | STABLE | STRICT | STRIP | TEXT | THEN | TO | TREAT | TYPESWITCH | UNION | UNORDERED | VALIDATE | VARIABLE | VERSION | WHERE | XQUERY | CATCH | CONTEXT | COUNT | DECIMAL_FORMAT | DECIMAL_SEPARATOR | DIGIT | END | GROUP | GROUPING_SEPARATOR | INFINITY | MINUS_SIGN | NAMESPACE_NODE | NAN | NEXT | ONLY | OUTER | PATTERN_SEPARATOR | PERCENT | PER_MILLE | PREVIOUS | SLIDING | START | TRY | TUMBLING | WHEN | WINDOW | ZERO_DIGIT | AFTER | BEFORE | COPY | DELETE | FIRST | INSERT | INTO | LAST | MODIFY | NODES | RENAME | REPLACE | REVALIDATION | SKIP | UPDATING | VALUE | WITH | BLOCK | CONSTANT | EXIT | SEQUENTIAL | SET | SIMPLE | WHILE | EVAL | USING | BINARY | PRIVATE | AMP_ER | APOS_ER | QUOT_ER )
            // XQueryParser.g:
            {
            root_0 = (XQDTCommonTree)adaptor.nil();

            set558=(CommonToken)input.LT(1);
            if ( (input.LA(1)>=ANCESTOR && input.LA(1)<=EXIT)||(input.LA(1)>=SEQUENTIAL && input.LA(1)<=QUOT_ER)||input.LA(1)==L_NCName ) {
                input.consume();
                if ( state.backtracking==0 ) adaptor.addChild(root_0, (XQDTCommonTree)adaptor.create(set558));
                state.errorRecovery=false;state.failed=false;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                MismatchedSetException mse = new MismatchedSetException(null,input);
                throw mse;
            }


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (XQDTCommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (XQDTCommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "p_NCName"

    public static class p_FNCName_return extends ParserRuleReturnScope {
        XQDTCommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "p_FNCName"
    // XQueryParser.g:1297:1: p_FNCName : ( L_NCName | ANCESTOR | ANCESTOR_OR_SELF | AND | AS | ASCENDING | AT | BASE_URI | BOUNDARY_SPACE | BY | CASE | CAST | CASTABLE | CHILD | COLLATION | CONSTRUCTION | COPY_NAMESPACES | DECLARE | DEFAULT | DESCENDANT | DESCENDANT_OR_SELF | DESCENDING | DIV | DOCUMENT | ELSE | EMPTY | ENCODING | EQ | EVERY | EXCEPT | EXTERNAL | FOLLOWING | FOLLOWING_SIBLING | FOR | FUNCTION | GE | GREATEST | GT | IDIV | IMPORT | IN | INHERIT | INSTANCE | INTERSECT | IS | LAX | LE | LEAST | LET | LT | MOD | MODULE | NAMESPACE | NE | NO_INHERIT | NO_PRESERVE | OF | OPTION | OR | ORDER | ORDERED | ORDERING | PARENT | PRECEDING | PRECEDING_SIBLING | PRESERVE | RETURN | SATISFIES | SCHEMA | SELF | SOME | STABLE | STRICT | STRIP | THEN | TO | TREAT | UNION | UNORDERED | VALIDATE | VARIABLE | VERSION | WHERE | XQUERY | CATCH | CONTEXT | COUNT | DECIMAL_FORMAT | DECIMAL_SEPARATOR | DIGIT | END | GROUP | GROUPING_SEPARATOR | INFINITY | MINUS_SIGN | NAN | NEXT | ONLY | OUTER | PATTERN_SEPARATOR | PERCENT | PER_MILLE | PREVIOUS | SLIDING | START | TRY | TUMBLING | WHEN | WINDOW | ZERO_DIGIT | AFTER | BEFORE | COPY | DELETE | FIRST | INSERT | INTO | LAST | MODIFY | NODES | RENAME | REPLACE | REVALIDATION | SKIP | UPDATING | VALUE | WITH | BLOCK | CONSTANT | EXIT | SEQUENTIAL | SET | SIMPLE | EVAL | USING | BINARY | PRIVATE | AMP_ER | APOS_ER | QUOT_ER );
    public final XQueryParser.p_FNCName_return p_FNCName() throws RecognitionException {
        XQueryParser.p_FNCName_return retval = new XQueryParser.p_FNCName_return();
        retval.start = input.LT(1);

        XQDTCommonTree root_0 = null;

        CommonToken set559=null;

        XQDTCommonTree set559_tree=null;

        try {
            // XQueryParser.g:1298:9: ( L_NCName | ANCESTOR | ANCESTOR_OR_SELF | AND | AS | ASCENDING | AT | BASE_URI | BOUNDARY_SPACE | BY | CASE | CAST | CASTABLE | CHILD | COLLATION | CONSTRUCTION | COPY_NAMESPACES | DECLARE | DEFAULT | DESCENDANT | DESCENDANT_OR_SELF | DESCENDING | DIV | DOCUMENT | ELSE | EMPTY | ENCODING | EQ | EVERY | EXCEPT | EXTERNAL | FOLLOWING | FOLLOWING_SIBLING | FOR | FUNCTION | GE | GREATEST | GT | IDIV | IMPORT | IN | INHERIT | INSTANCE | INTERSECT | IS | LAX | LE | LEAST | LET | LT | MOD | MODULE | NAMESPACE | NE | NO_INHERIT | NO_PRESERVE | OF | OPTION | OR | ORDER | ORDERED | ORDERING | PARENT | PRECEDING | PRECEDING_SIBLING | PRESERVE | RETURN | SATISFIES | SCHEMA | SELF | SOME | STABLE | STRICT | STRIP | THEN | TO | TREAT | UNION | UNORDERED | VALIDATE | VARIABLE | VERSION | WHERE | XQUERY | CATCH | CONTEXT | COUNT | DECIMAL_FORMAT | DECIMAL_SEPARATOR | DIGIT | END | GROUP | GROUPING_SEPARATOR | INFINITY | MINUS_SIGN | NAN | NEXT | ONLY | OUTER | PATTERN_SEPARATOR | PERCENT | PER_MILLE | PREVIOUS | SLIDING | START | TRY | TUMBLING | WHEN | WINDOW | ZERO_DIGIT | AFTER | BEFORE | COPY | DELETE | FIRST | INSERT | INTO | LAST | MODIFY | NODES | RENAME | REPLACE | REVALIDATION | SKIP | UPDATING | VALUE | WITH | BLOCK | CONSTANT | EXIT | SEQUENTIAL | SET | SIMPLE | EVAL | USING | BINARY | PRIVATE | AMP_ER | APOS_ER | QUOT_ER )
            // XQueryParser.g:
            {
            root_0 = (XQDTCommonTree)adaptor.nil();

            set559=(CommonToken)input.LT(1);
            if ( (input.LA(1)>=ANCESTOR && input.LA(1)<=AT)||(input.LA(1)>=BASE_URI && input.LA(1)<=COLLATION)||(input.LA(1)>=CONSTRUCTION && input.LA(1)<=DOCUMENT)||(input.LA(1)>=ELSE && input.LA(1)<=EMPTY)||(input.LA(1)>=ENCODING && input.LA(1)<=IDIV)||(input.LA(1)>=IMPORT && input.LA(1)<=IS)||(input.LA(1)>=LAX && input.LA(1)<=NO_PRESERVE)||(input.LA(1)>=OF && input.LA(1)<=PRESERVE)||(input.LA(1)>=RETURN && input.LA(1)<=SCHEMA)||(input.LA(1)>=SELF && input.LA(1)<=STRIP)||(input.LA(1)>=THEN && input.LA(1)<=TREAT)||(input.LA(1)>=UNION && input.LA(1)<=MINUS_SIGN)||(input.LA(1)>=NAN && input.LA(1)<=EXIT)||(input.LA(1)>=SEQUENTIAL && input.LA(1)<=SIMPLE)||(input.LA(1)>=EVAL && input.LA(1)<=QUOT_ER)||input.LA(1)==L_NCName ) {
                input.consume();
                if ( state.backtracking==0 ) adaptor.addChild(root_0, (XQDTCommonTree)adaptor.create(set559));
                state.errorRecovery=false;state.failed=false;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                MismatchedSetException mse = new MismatchedSetException(null,input);
                throw mse;
            }


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (XQDTCommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (XQDTCommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "p_FNCName"

    public static class pm_RevalidationDecl_return extends ParserRuleReturnScope {
        XQDTCommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "pm_RevalidationDecl"
    // XQueryParser.g:1329:1: pm_RevalidationDecl : k+= DECLARE k+= REVALIDATION (k+= STRICT | k+= LAX | k+= SKIP ) ;
    public final XQueryParser.pm_RevalidationDecl_return pm_RevalidationDecl() throws RecognitionException {
        XQueryParser.pm_RevalidationDecl_return retval = new XQueryParser.pm_RevalidationDecl_return();
        retval.start = input.LT(1);

        XQDTCommonTree root_0 = null;

        CommonToken k=null;
        List list_k=null;

        XQDTCommonTree k_tree=null;

        try {
            // XQueryParser.g:1330:9: (k+= DECLARE k+= REVALIDATION (k+= STRICT | k+= LAX | k+= SKIP ) )
            // XQueryParser.g:1330:11: k+= DECLARE k+= REVALIDATION (k+= STRICT | k+= LAX | k+= SKIP )
            {
            root_0 = (XQDTCommonTree)adaptor.nil();

            k=(CommonToken)match(input,DECLARE,FOLLOW_DECLARE_in_pm_RevalidationDecl11825); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            k_tree = (XQDTCommonTree)adaptor.create(k);
            adaptor.addChild(root_0, k_tree);
            }
            if (list_k==null) list_k=new ArrayList();
            list_k.add(k);

            k=(CommonToken)match(input,REVALIDATION,FOLLOW_REVALIDATION_in_pm_RevalidationDecl11829); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            k_tree = (XQDTCommonTree)adaptor.create(k);
            adaptor.addChild(root_0, k_tree);
            }
            if (list_k==null) list_k=new ArrayList();
            list_k.add(k);

            // XQueryParser.g:1330:38: (k+= STRICT | k+= LAX | k+= SKIP )
            int alt178=3;
            switch ( input.LA(1) ) {
            case STRICT:
                {
                alt178=1;
                }
                break;
            case LAX:
                {
                alt178=2;
                }
                break;
            case SKIP:
                {
                alt178=3;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 178, 0, input);

                throw nvae;
            }

            switch (alt178) {
                case 1 :
                    // XQueryParser.g:1330:39: k+= STRICT
                    {
                    k=(CommonToken)match(input,STRICT,FOLLOW_STRICT_in_pm_RevalidationDecl11834); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    k_tree = (XQDTCommonTree)adaptor.create(k);
                    adaptor.addChild(root_0, k_tree);
                    }
                    if (list_k==null) list_k=new ArrayList();
                    list_k.add(k);


                    }
                    break;
                case 2 :
                    // XQueryParser.g:1330:51: k+= LAX
                    {
                    k=(CommonToken)match(input,LAX,FOLLOW_LAX_in_pm_RevalidationDecl11840); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    k_tree = (XQDTCommonTree)adaptor.create(k);
                    adaptor.addChild(root_0, k_tree);
                    }
                    if (list_k==null) list_k=new ArrayList();
                    list_k.add(k);


                    }
                    break;
                case 3 :
                    // XQueryParser.g:1330:60: k+= SKIP
                    {
                    k=(CommonToken)match(input,SKIP,FOLLOW_SKIP_in_pm_RevalidationDecl11846); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    k_tree = (XQDTCommonTree)adaptor.create(k);
                    adaptor.addChild(root_0, k_tree);
                    }
                    if (list_k==null) list_k=new ArrayList();
                    list_k.add(k);


                    }
                    break;

            }

            if ( state.backtracking==0 ) {
              ak(list_k);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (XQDTCommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (XQDTCommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "pm_RevalidationDecl"

    public static class p_InsertExprTargetChoice_return extends ParserRuleReturnScope {
        XQDTCommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "p_InsertExprTargetChoice"
    // XQueryParser.g:1334:1: p_InsertExprTargetChoice : ( ( (k+= AS (k+= FIRST | k+= LAST ) )? k+= INTO ) | ka= AFTER | kb= BEFORE );
    public final XQueryParser.p_InsertExprTargetChoice_return p_InsertExprTargetChoice() throws RecognitionException {
        XQueryParser.p_InsertExprTargetChoice_return retval = new XQueryParser.p_InsertExprTargetChoice_return();
        retval.start = input.LT(1);

        XQDTCommonTree root_0 = null;

        CommonToken ka=null;
        CommonToken kb=null;
        CommonToken k=null;
        List list_k=null;

        XQDTCommonTree ka_tree=null;
        XQDTCommonTree kb_tree=null;
        XQDTCommonTree k_tree=null;

        try {
            // XQueryParser.g:1335:9: ( ( (k+= AS (k+= FIRST | k+= LAST ) )? k+= INTO ) | ka= AFTER | kb= BEFORE )
            int alt181=3;
            switch ( input.LA(1) ) {
            case AS:
            case INTO:
                {
                alt181=1;
                }
                break;
            case AFTER:
                {
                alt181=2;
                }
                break;
            case BEFORE:
                {
                alt181=3;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 181, 0, input);

                throw nvae;
            }

            switch (alt181) {
                case 1 :
                    // XQueryParser.g:1335:11: ( (k+= AS (k+= FIRST | k+= LAST ) )? k+= INTO )
                    {
                    root_0 = (XQDTCommonTree)adaptor.nil();

                    // XQueryParser.g:1335:11: ( (k+= AS (k+= FIRST | k+= LAST ) )? k+= INTO )
                    // XQueryParser.g:1335:12: (k+= AS (k+= FIRST | k+= LAST ) )? k+= INTO
                    {
                    // XQueryParser.g:1335:12: (k+= AS (k+= FIRST | k+= LAST ) )?
                    int alt180=2;
                    int LA180_0 = input.LA(1);

                    if ( (LA180_0==AS) ) {
                        alt180=1;
                    }
                    switch (alt180) {
                        case 1 :
                            // XQueryParser.g:1335:13: k+= AS (k+= FIRST | k+= LAST )
                            {
                            k=(CommonToken)match(input,AS,FOLLOW_AS_in_p_InsertExprTargetChoice11879); if (state.failed) return retval;
                            if ( state.backtracking==0 ) {
                            k_tree = (XQDTCommonTree)adaptor.create(k);
                            adaptor.addChild(root_0, k_tree);
                            }
                            if (list_k==null) list_k=new ArrayList();
                            list_k.add(k);

                            // XQueryParser.g:1335:19: (k+= FIRST | k+= LAST )
                            int alt179=2;
                            int LA179_0 = input.LA(1);

                            if ( (LA179_0==FIRST) ) {
                                alt179=1;
                            }
                            else if ( (LA179_0==LAST) ) {
                                alt179=2;
                            }
                            else {
                                if (state.backtracking>0) {state.failed=true; return retval;}
                                NoViableAltException nvae =
                                    new NoViableAltException("", 179, 0, input);

                                throw nvae;
                            }
                            switch (alt179) {
                                case 1 :
                                    // XQueryParser.g:1335:20: k+= FIRST
                                    {
                                    k=(CommonToken)match(input,FIRST,FOLLOW_FIRST_in_p_InsertExprTargetChoice11884); if (state.failed) return retval;
                                    if ( state.backtracking==0 ) {
                                    k_tree = (XQDTCommonTree)adaptor.create(k);
                                    adaptor.addChild(root_0, k_tree);
                                    }
                                    if (list_k==null) list_k=new ArrayList();
                                    list_k.add(k);


                                    }
                                    break;
                                case 2 :
                                    // XQueryParser.g:1335:31: k+= LAST
                                    {
                                    k=(CommonToken)match(input,LAST,FOLLOW_LAST_in_p_InsertExprTargetChoice11890); if (state.failed) return retval;
                                    if ( state.backtracking==0 ) {
                                    k_tree = (XQDTCommonTree)adaptor.create(k);
                                    adaptor.addChild(root_0, k_tree);
                                    }
                                    if (list_k==null) list_k=new ArrayList();
                                    list_k.add(k);


                                    }
                                    break;

                            }


                            }
                            break;

                    }

                    k=(CommonToken)match(input,INTO,FOLLOW_INTO_in_p_InsertExprTargetChoice11897); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    k_tree = (XQDTCommonTree)adaptor.create(k);
                    adaptor.addChild(root_0, k_tree);
                    }
                    if (list_k==null) list_k=new ArrayList();
                    list_k.add(k);


                    }

                    if ( state.backtracking==0 ) {
                      ak(list_k);
                    }

                    }
                    break;
                case 2 :
                    // XQueryParser.g:1336:11: ka= AFTER
                    {
                    root_0 = (XQDTCommonTree)adaptor.nil();

                    ka=(CommonToken)match(input,AFTER,FOLLOW_AFTER_in_p_InsertExprTargetChoice11914); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    ka_tree = (XQDTCommonTree)adaptor.create(ka);
                    adaptor.addChild(root_0, ka_tree);
                    }
                    if ( state.backtracking==0 ) {
                      ak(ka);
                    }

                    }
                    break;
                case 3 :
                    // XQueryParser.g:1337:11: kb= BEFORE
                    {
                    root_0 = (XQDTCommonTree)adaptor.nil();

                    kb=(CommonToken)match(input,BEFORE,FOLLOW_BEFORE_in_p_InsertExprTargetChoice11930); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    kb_tree = (XQDTCommonTree)adaptor.create(kb);
                    adaptor.addChild(root_0, kb_tree);
                    }
                    if ( state.backtracking==0 ) {
                      ak(kb);
                    }

                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (XQDTCommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (XQDTCommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "p_InsertExprTargetChoice"

    public static class p_InsertExpr_return extends ParserRuleReturnScope {
        XQDTCommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "p_InsertExpr"
    // XQueryParser.g:1341:1: p_InsertExpr : k+= INSERT (k+= NODE | k+= NODES ) p_SourceExpr p_InsertExprTargetChoice p_TargetExpr ;
    public final XQueryParser.p_InsertExpr_return p_InsertExpr() throws RecognitionException {
        XQueryParser.p_InsertExpr_return retval = new XQueryParser.p_InsertExpr_return();
        retval.start = input.LT(1);

        XQDTCommonTree root_0 = null;

        CommonToken k=null;
        List list_k=null;
        XQueryParser.p_SourceExpr_return p_SourceExpr560 = null;

        XQueryParser.p_InsertExprTargetChoice_return p_InsertExprTargetChoice561 = null;

        XQueryParser.p_TargetExpr_return p_TargetExpr562 = null;


        XQDTCommonTree k_tree=null;

        try {
            // XQueryParser.g:1342:9: (k+= INSERT (k+= NODE | k+= NODES ) p_SourceExpr p_InsertExprTargetChoice p_TargetExpr )
            // XQueryParser.g:1342:11: k+= INSERT (k+= NODE | k+= NODES ) p_SourceExpr p_InsertExprTargetChoice p_TargetExpr
            {
            root_0 = (XQDTCommonTree)adaptor.nil();

            k=(CommonToken)match(input,INSERT,FOLLOW_INSERT_in_p_InsertExpr11960); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            k_tree = (XQDTCommonTree)adaptor.create(k);
            adaptor.addChild(root_0, k_tree);
            }
            if (list_k==null) list_k=new ArrayList();
            list_k.add(k);

            // XQueryParser.g:1342:21: (k+= NODE | k+= NODES )
            int alt182=2;
            int LA182_0 = input.LA(1);

            if ( (LA182_0==NODE) ) {
                alt182=1;
            }
            else if ( (LA182_0==NODES) ) {
                alt182=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 182, 0, input);

                throw nvae;
            }
            switch (alt182) {
                case 1 :
                    // XQueryParser.g:1342:22: k+= NODE
                    {
                    k=(CommonToken)match(input,NODE,FOLLOW_NODE_in_p_InsertExpr11965); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    k_tree = (XQDTCommonTree)adaptor.create(k);
                    adaptor.addChild(root_0, k_tree);
                    }
                    if (list_k==null) list_k=new ArrayList();
                    list_k.add(k);


                    }
                    break;
                case 2 :
                    // XQueryParser.g:1342:32: k+= NODES
                    {
                    k=(CommonToken)match(input,NODES,FOLLOW_NODES_in_p_InsertExpr11971); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    k_tree = (XQDTCommonTree)adaptor.create(k);
                    adaptor.addChild(root_0, k_tree);
                    }
                    if (list_k==null) list_k=new ArrayList();
                    list_k.add(k);


                    }
                    break;

            }

            pushFollow(FOLLOW_p_SourceExpr_in_p_InsertExpr11974);
            p_SourceExpr560=p_SourceExpr();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, p_SourceExpr560.getTree());
            pushFollow(FOLLOW_p_InsertExprTargetChoice_in_p_InsertExpr11976);
            p_InsertExprTargetChoice561=p_InsertExprTargetChoice();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, p_InsertExprTargetChoice561.getTree());
            pushFollow(FOLLOW_p_TargetExpr_in_p_InsertExpr11978);
            p_TargetExpr562=p_TargetExpr();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, p_TargetExpr562.getTree());
            if ( state.backtracking==0 ) {
              ak(list_k);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (XQDTCommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (XQDTCommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "p_InsertExpr"

    public static class p_DeleteExpr_return extends ParserRuleReturnScope {
        XQDTCommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "p_DeleteExpr"
    // XQueryParser.g:1346:1: p_DeleteExpr : k+= DELETE (k+= NODE | k+= NODES ) p_TargetExpr ;
    public final XQueryParser.p_DeleteExpr_return p_DeleteExpr() throws RecognitionException {
        XQueryParser.p_DeleteExpr_return retval = new XQueryParser.p_DeleteExpr_return();
        retval.start = input.LT(1);

        XQDTCommonTree root_0 = null;

        CommonToken k=null;
        List list_k=null;
        XQueryParser.p_TargetExpr_return p_TargetExpr563 = null;


        XQDTCommonTree k_tree=null;

        try {
            // XQueryParser.g:1347:9: (k+= DELETE (k+= NODE | k+= NODES ) p_TargetExpr )
            // XQueryParser.g:1347:11: k+= DELETE (k+= NODE | k+= NODES ) p_TargetExpr
            {
            root_0 = (XQDTCommonTree)adaptor.nil();

            k=(CommonToken)match(input,DELETE,FOLLOW_DELETE_in_p_DeleteExpr12008); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            k_tree = (XQDTCommonTree)adaptor.create(k);
            adaptor.addChild(root_0, k_tree);
            }
            if (list_k==null) list_k=new ArrayList();
            list_k.add(k);

            // XQueryParser.g:1347:21: (k+= NODE | k+= NODES )
            int alt183=2;
            int LA183_0 = input.LA(1);

            if ( (LA183_0==NODE) ) {
                alt183=1;
            }
            else if ( (LA183_0==NODES) ) {
                alt183=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 183, 0, input);

                throw nvae;
            }
            switch (alt183) {
                case 1 :
                    // XQueryParser.g:1347:22: k+= NODE
                    {
                    k=(CommonToken)match(input,NODE,FOLLOW_NODE_in_p_DeleteExpr12013); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    k_tree = (XQDTCommonTree)adaptor.create(k);
                    adaptor.addChild(root_0, k_tree);
                    }
                    if (list_k==null) list_k=new ArrayList();
                    list_k.add(k);


                    }
                    break;
                case 2 :
                    // XQueryParser.g:1347:32: k+= NODES
                    {
                    k=(CommonToken)match(input,NODES,FOLLOW_NODES_in_p_DeleteExpr12019); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    k_tree = (XQDTCommonTree)adaptor.create(k);
                    adaptor.addChild(root_0, k_tree);
                    }
                    if (list_k==null) list_k=new ArrayList();
                    list_k.add(k);


                    }
                    break;

            }

            pushFollow(FOLLOW_p_TargetExpr_in_p_DeleteExpr12022);
            p_TargetExpr563=p_TargetExpr();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, p_TargetExpr563.getTree());
            if ( state.backtracking==0 ) {
              ak(list_k);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (XQDTCommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (XQDTCommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "p_DeleteExpr"

    public static class p_ReplaceExpr_return extends ParserRuleReturnScope {
        XQDTCommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "p_ReplaceExpr"
    // XQueryParser.g:1351:1: p_ReplaceExpr : k+= REPLACE (k+= VALUE k+= OF )? k+= NODE p_ExprSingle k+= WITH p_ExprSingle ;
    public final XQueryParser.p_ReplaceExpr_return p_ReplaceExpr() throws RecognitionException {
        XQueryParser.p_ReplaceExpr_return retval = new XQueryParser.p_ReplaceExpr_return();
        retval.start = input.LT(1);

        XQDTCommonTree root_0 = null;

        CommonToken k=null;
        List list_k=null;
        XQueryParser.p_ExprSingle_return p_ExprSingle564 = null;

        XQueryParser.p_ExprSingle_return p_ExprSingle565 = null;


        XQDTCommonTree k_tree=null;

        try {
            // XQueryParser.g:1352:9: (k+= REPLACE (k+= VALUE k+= OF )? k+= NODE p_ExprSingle k+= WITH p_ExprSingle )
            // XQueryParser.g:1352:11: k+= REPLACE (k+= VALUE k+= OF )? k+= NODE p_ExprSingle k+= WITH p_ExprSingle
            {
            root_0 = (XQDTCommonTree)adaptor.nil();

            k=(CommonToken)match(input,REPLACE,FOLLOW_REPLACE_in_p_ReplaceExpr12052); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            k_tree = (XQDTCommonTree)adaptor.create(k);
            adaptor.addChild(root_0, k_tree);
            }
            if (list_k==null) list_k=new ArrayList();
            list_k.add(k);

            // XQueryParser.g:1352:22: (k+= VALUE k+= OF )?
            int alt184=2;
            int LA184_0 = input.LA(1);

            if ( (LA184_0==VALUE) ) {
                alt184=1;
            }
            switch (alt184) {
                case 1 :
                    // XQueryParser.g:1352:23: k+= VALUE k+= OF
                    {
                    k=(CommonToken)match(input,VALUE,FOLLOW_VALUE_in_p_ReplaceExpr12057); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    k_tree = (XQDTCommonTree)adaptor.create(k);
                    adaptor.addChild(root_0, k_tree);
                    }
                    if (list_k==null) list_k=new ArrayList();
                    list_k.add(k);

                    k=(CommonToken)match(input,OF,FOLLOW_OF_in_p_ReplaceExpr12061); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    k_tree = (XQDTCommonTree)adaptor.create(k);
                    adaptor.addChild(root_0, k_tree);
                    }
                    if (list_k==null) list_k=new ArrayList();
                    list_k.add(k);


                    }
                    break;

            }

            k=(CommonToken)match(input,NODE,FOLLOW_NODE_in_p_ReplaceExpr12067); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            k_tree = (XQDTCommonTree)adaptor.create(k);
            adaptor.addChild(root_0, k_tree);
            }
            if (list_k==null) list_k=new ArrayList();
            list_k.add(k);

            pushFollow(FOLLOW_p_ExprSingle_in_p_ReplaceExpr12069);
            p_ExprSingle564=p_ExprSingle();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, p_ExprSingle564.getTree());
            k=(CommonToken)match(input,WITH,FOLLOW_WITH_in_p_ReplaceExpr12073); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            k_tree = (XQDTCommonTree)adaptor.create(k);
            adaptor.addChild(root_0, k_tree);
            }
            if (list_k==null) list_k=new ArrayList();
            list_k.add(k);

            pushFollow(FOLLOW_p_ExprSingle_in_p_ReplaceExpr12075);
            p_ExprSingle565=p_ExprSingle();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, p_ExprSingle565.getTree());
            if ( state.backtracking==0 ) {
              ak(list_k);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (XQDTCommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (XQDTCommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "p_ReplaceExpr"

    public static class p_RenameExpr_return extends ParserRuleReturnScope {
        XQDTCommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "p_RenameExpr"
    // XQueryParser.g:1356:1: p_RenameExpr : k+= RENAME k+= NODE p_TargetExpr AS p_NewNameExpr ;
    public final XQueryParser.p_RenameExpr_return p_RenameExpr() throws RecognitionException {
        XQueryParser.p_RenameExpr_return retval = new XQueryParser.p_RenameExpr_return();
        retval.start = input.LT(1);

        XQDTCommonTree root_0 = null;

        CommonToken AS567=null;
        CommonToken k=null;
        List list_k=null;
        XQueryParser.p_TargetExpr_return p_TargetExpr566 = null;

        XQueryParser.p_NewNameExpr_return p_NewNameExpr568 = null;


        XQDTCommonTree AS567_tree=null;
        XQDTCommonTree k_tree=null;

        try {
            // XQueryParser.g:1357:9: (k+= RENAME k+= NODE p_TargetExpr AS p_NewNameExpr )
            // XQueryParser.g:1357:11: k+= RENAME k+= NODE p_TargetExpr AS p_NewNameExpr
            {
            root_0 = (XQDTCommonTree)adaptor.nil();

            k=(CommonToken)match(input,RENAME,FOLLOW_RENAME_in_p_RenameExpr12105); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            k_tree = (XQDTCommonTree)adaptor.create(k);
            adaptor.addChild(root_0, k_tree);
            }
            if (list_k==null) list_k=new ArrayList();
            list_k.add(k);

            k=(CommonToken)match(input,NODE,FOLLOW_NODE_in_p_RenameExpr12109); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            k_tree = (XQDTCommonTree)adaptor.create(k);
            adaptor.addChild(root_0, k_tree);
            }
            if (list_k==null) list_k=new ArrayList();
            list_k.add(k);

            pushFollow(FOLLOW_p_TargetExpr_in_p_RenameExpr12111);
            p_TargetExpr566=p_TargetExpr();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, p_TargetExpr566.getTree());
            AS567=(CommonToken)match(input,AS,FOLLOW_AS_in_p_RenameExpr12113); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            AS567_tree = (XQDTCommonTree)adaptor.create(AS567);
            adaptor.addChild(root_0, AS567_tree);
            }
            pushFollow(FOLLOW_p_NewNameExpr_in_p_RenameExpr12115);
            p_NewNameExpr568=p_NewNameExpr();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, p_NewNameExpr568.getTree());
            if ( state.backtracking==0 ) {
              ak(list_k);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (XQDTCommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (XQDTCommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "p_RenameExpr"

    public static class p_SourceExpr_return extends ParserRuleReturnScope {
        XQDTCommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "p_SourceExpr"
    // XQueryParser.g:1361:1: p_SourceExpr : p_ExprSingle ;
    public final XQueryParser.p_SourceExpr_return p_SourceExpr() throws RecognitionException {
        XQueryParser.p_SourceExpr_return retval = new XQueryParser.p_SourceExpr_return();
        retval.start = input.LT(1);

        XQDTCommonTree root_0 = null;

        XQueryParser.p_ExprSingle_return p_ExprSingle569 = null;



        try {
            // XQueryParser.g:1362:9: ( p_ExprSingle )
            // XQueryParser.g:1362:11: p_ExprSingle
            {
            root_0 = (XQDTCommonTree)adaptor.nil();

            pushFollow(FOLLOW_p_ExprSingle_in_p_SourceExpr12143);
            p_ExprSingle569=p_ExprSingle();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, p_ExprSingle569.getTree());

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (XQDTCommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (XQDTCommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "p_SourceExpr"

    public static class p_TargetExpr_return extends ParserRuleReturnScope {
        XQDTCommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "p_TargetExpr"
    // XQueryParser.g:1366:1: p_TargetExpr : p_ExprSingle ;
    public final XQueryParser.p_TargetExpr_return p_TargetExpr() throws RecognitionException {
        XQueryParser.p_TargetExpr_return retval = new XQueryParser.p_TargetExpr_return();
        retval.start = input.LT(1);

        XQDTCommonTree root_0 = null;

        XQueryParser.p_ExprSingle_return p_ExprSingle570 = null;



        try {
            // XQueryParser.g:1367:9: ( p_ExprSingle )
            // XQueryParser.g:1367:11: p_ExprSingle
            {
            root_0 = (XQDTCommonTree)adaptor.nil();

            pushFollow(FOLLOW_p_ExprSingle_in_p_TargetExpr12169);
            p_ExprSingle570=p_ExprSingle();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, p_ExprSingle570.getTree());

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (XQDTCommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (XQDTCommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "p_TargetExpr"

    public static class p_NewNameExpr_return extends ParserRuleReturnScope {
        XQDTCommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "p_NewNameExpr"
    // XQueryParser.g:1371:1: p_NewNameExpr : p_ExprSingle ;
    public final XQueryParser.p_NewNameExpr_return p_NewNameExpr() throws RecognitionException {
        XQueryParser.p_NewNameExpr_return retval = new XQueryParser.p_NewNameExpr_return();
        retval.start = input.LT(1);

        XQDTCommonTree root_0 = null;

        XQueryParser.p_ExprSingle_return p_ExprSingle571 = null;



        try {
            // XQueryParser.g:1372:9: ( p_ExprSingle )
            // XQueryParser.g:1372:11: p_ExprSingle
            {
            root_0 = (XQDTCommonTree)adaptor.nil();

            pushFollow(FOLLOW_p_ExprSingle_in_p_NewNameExpr12195);
            p_ExprSingle571=p_ExprSingle();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, p_ExprSingle571.getTree());

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (XQDTCommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (XQDTCommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "p_NewNameExpr"

    public static class p_TransformExpr_return extends ParserRuleReturnScope {
        XQDTCommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "p_TransformExpr"
    // XQueryParser.g:1376:1: p_TransformExpr : k+= COPY DOLLAR p_VarName BIND p_ExprSingle ( COMMA DOLLAR p_VarName BIND p_ExprSingle )* k+= MODIFY p_ExprSingle k+= RETURN p_ExprSingle ;
    public final XQueryParser.p_TransformExpr_return p_TransformExpr() throws RecognitionException {
        XQueryParser.p_TransformExpr_return retval = new XQueryParser.p_TransformExpr_return();
        retval.start = input.LT(1);

        XQDTCommonTree root_0 = null;

        CommonToken DOLLAR572=null;
        CommonToken BIND574=null;
        CommonToken COMMA576=null;
        CommonToken DOLLAR577=null;
        CommonToken BIND579=null;
        CommonToken k=null;
        List list_k=null;
        XQueryParser.p_VarName_return p_VarName573 = null;

        XQueryParser.p_ExprSingle_return p_ExprSingle575 = null;

        XQueryParser.p_VarName_return p_VarName578 = null;

        XQueryParser.p_ExprSingle_return p_ExprSingle580 = null;

        XQueryParser.p_ExprSingle_return p_ExprSingle581 = null;

        XQueryParser.p_ExprSingle_return p_ExprSingle582 = null;


        XQDTCommonTree DOLLAR572_tree=null;
        XQDTCommonTree BIND574_tree=null;
        XQDTCommonTree COMMA576_tree=null;
        XQDTCommonTree DOLLAR577_tree=null;
        XQDTCommonTree BIND579_tree=null;
        XQDTCommonTree k_tree=null;

        try {
            // XQueryParser.g:1377:9: (k+= COPY DOLLAR p_VarName BIND p_ExprSingle ( COMMA DOLLAR p_VarName BIND p_ExprSingle )* k+= MODIFY p_ExprSingle k+= RETURN p_ExprSingle )
            // XQueryParser.g:1377:11: k+= COPY DOLLAR p_VarName BIND p_ExprSingle ( COMMA DOLLAR p_VarName BIND p_ExprSingle )* k+= MODIFY p_ExprSingle k+= RETURN p_ExprSingle
            {
            root_0 = (XQDTCommonTree)adaptor.nil();

            k=(CommonToken)match(input,COPY,FOLLOW_COPY_in_p_TransformExpr12223); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            k_tree = (XQDTCommonTree)adaptor.create(k);
            adaptor.addChild(root_0, k_tree);
            }
            if (list_k==null) list_k=new ArrayList();
            list_k.add(k);

            DOLLAR572=(CommonToken)match(input,DOLLAR,FOLLOW_DOLLAR_in_p_TransformExpr12225); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            DOLLAR572_tree = (XQDTCommonTree)adaptor.create(DOLLAR572);
            adaptor.addChild(root_0, DOLLAR572_tree);
            }
            pushFollow(FOLLOW_p_VarName_in_p_TransformExpr12227);
            p_VarName573=p_VarName();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, p_VarName573.getTree());
            BIND574=(CommonToken)match(input,BIND,FOLLOW_BIND_in_p_TransformExpr12229); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            BIND574_tree = (XQDTCommonTree)adaptor.create(BIND574);
            adaptor.addChild(root_0, BIND574_tree);
            }
            pushFollow(FOLLOW_p_ExprSingle_in_p_TransformExpr12231);
            p_ExprSingle575=p_ExprSingle();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, p_ExprSingle575.getTree());
            // XQueryParser.g:1377:54: ( COMMA DOLLAR p_VarName BIND p_ExprSingle )*
            loop185:
            do {
                int alt185=2;
                int LA185_0 = input.LA(1);

                if ( (LA185_0==COMMA) ) {
                    alt185=1;
                }


                switch (alt185) {
            	case 1 :
            	    // XQueryParser.g:1377:55: COMMA DOLLAR p_VarName BIND p_ExprSingle
            	    {
            	    COMMA576=(CommonToken)match(input,COMMA,FOLLOW_COMMA_in_p_TransformExpr12234); if (state.failed) return retval;
            	    if ( state.backtracking==0 ) {
            	    COMMA576_tree = (XQDTCommonTree)adaptor.create(COMMA576);
            	    adaptor.addChild(root_0, COMMA576_tree);
            	    }
            	    DOLLAR577=(CommonToken)match(input,DOLLAR,FOLLOW_DOLLAR_in_p_TransformExpr12236); if (state.failed) return retval;
            	    if ( state.backtracking==0 ) {
            	    DOLLAR577_tree = (XQDTCommonTree)adaptor.create(DOLLAR577);
            	    adaptor.addChild(root_0, DOLLAR577_tree);
            	    }
            	    pushFollow(FOLLOW_p_VarName_in_p_TransformExpr12238);
            	    p_VarName578=p_VarName();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, p_VarName578.getTree());
            	    BIND579=(CommonToken)match(input,BIND,FOLLOW_BIND_in_p_TransformExpr12240); if (state.failed) return retval;
            	    if ( state.backtracking==0 ) {
            	    BIND579_tree = (XQDTCommonTree)adaptor.create(BIND579);
            	    adaptor.addChild(root_0, BIND579_tree);
            	    }
            	    pushFollow(FOLLOW_p_ExprSingle_in_p_TransformExpr12242);
            	    p_ExprSingle580=p_ExprSingle();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, p_ExprSingle580.getTree());

            	    }
            	    break;

            	default :
            	    break loop185;
                }
            } while (true);

            k=(CommonToken)match(input,MODIFY,FOLLOW_MODIFY_in_p_TransformExpr12248); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            k_tree = (XQDTCommonTree)adaptor.create(k);
            adaptor.addChild(root_0, k_tree);
            }
            if (list_k==null) list_k=new ArrayList();
            list_k.add(k);

            pushFollow(FOLLOW_p_ExprSingle_in_p_TransformExpr12250);
            p_ExprSingle581=p_ExprSingle();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, p_ExprSingle581.getTree());
            k=(CommonToken)match(input,RETURN,FOLLOW_RETURN_in_p_TransformExpr12254); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            k_tree = (XQDTCommonTree)adaptor.create(k);
            adaptor.addChild(root_0, k_tree);
            }
            if (list_k==null) list_k=new ArrayList();
            list_k.add(k);

            pushFollow(FOLLOW_p_ExprSingle_in_p_TransformExpr12256);
            p_ExprSingle582=p_ExprSingle();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, p_ExprSingle582.getTree());
            if ( state.backtracking==0 ) {
              ak(list_k);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (XQDTCommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (XQDTCommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "p_TransformExpr"

    public static class pm_ApplyExpr_return extends ParserRuleReturnScope {
        XQDTCommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "pm_ApplyExpr"
    // XQueryParser.g:1387:1: pm_ApplyExpr : p_ConcatExpr SEMICOLON ;
    public final XQueryParser.pm_ApplyExpr_return pm_ApplyExpr() throws RecognitionException {
        XQueryParser.pm_ApplyExpr_return retval = new XQueryParser.pm_ApplyExpr_return();
        retval.start = input.LT(1);

        XQDTCommonTree root_0 = null;

        CommonToken SEMICOLON584=null;
        XQueryParser.p_ConcatExpr_return p_ConcatExpr583 = null;


        XQDTCommonTree SEMICOLON584_tree=null;

        try {
            // XQueryParser.g:1388:9: ( p_ConcatExpr SEMICOLON )
            // XQueryParser.g:1388:11: p_ConcatExpr SEMICOLON
            {
            root_0 = (XQDTCommonTree)adaptor.nil();

            pushFollow(FOLLOW_p_ConcatExpr_in_pm_ApplyExpr12291);
            p_ConcatExpr583=p_ConcatExpr();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, p_ConcatExpr583.getTree());
            SEMICOLON584=(CommonToken)match(input,SEMICOLON,FOLLOW_SEMICOLON_in_pm_ApplyExpr12293); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            SEMICOLON584_tree = (XQDTCommonTree)adaptor.create(SEMICOLON584);
            adaptor.addChild(root_0, SEMICOLON584_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (XQDTCommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (XQDTCommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "pm_ApplyExpr"

    public static class p_ConcatExpr_return extends ParserRuleReturnScope {
        XQDTCommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "p_ConcatExpr"
    // XQueryParser.g:1392:1: p_ConcatExpr : p_ExprSingle ( COMMA p_ExprSingle )* ;
    public final XQueryParser.p_ConcatExpr_return p_ConcatExpr() throws RecognitionException {
        XQueryParser.p_ConcatExpr_return retval = new XQueryParser.p_ConcatExpr_return();
        retval.start = input.LT(1);

        XQDTCommonTree root_0 = null;

        CommonToken COMMA586=null;
        XQueryParser.p_ExprSingle_return p_ExprSingle585 = null;

        XQueryParser.p_ExprSingle_return p_ExprSingle587 = null;


        XQDTCommonTree COMMA586_tree=null;

        try {
            // XQueryParser.g:1393:9: ( p_ExprSingle ( COMMA p_ExprSingle )* )
            // XQueryParser.g:1393:11: p_ExprSingle ( COMMA p_ExprSingle )*
            {
            root_0 = (XQDTCommonTree)adaptor.nil();

            pushFollow(FOLLOW_p_ExprSingle_in_p_ConcatExpr12319);
            p_ExprSingle585=p_ExprSingle();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, p_ExprSingle585.getTree());
            // XQueryParser.g:1393:24: ( COMMA p_ExprSingle )*
            loop186:
            do {
                int alt186=2;
                int LA186_0 = input.LA(1);

                if ( (LA186_0==COMMA) ) {
                    alt186=1;
                }


                switch (alt186) {
            	case 1 :
            	    // XQueryParser.g:1393:25: COMMA p_ExprSingle
            	    {
            	    COMMA586=(CommonToken)match(input,COMMA,FOLLOW_COMMA_in_p_ConcatExpr12322); if (state.failed) return retval;
            	    if ( state.backtracking==0 ) {
            	    COMMA586_tree = (XQDTCommonTree)adaptor.create(COMMA586);
            	    adaptor.addChild(root_0, COMMA586_tree);
            	    }
            	    pushFollow(FOLLOW_p_ExprSingle_in_p_ConcatExpr12324);
            	    p_ExprSingle587=p_ExprSingle();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, p_ExprSingle587.getTree());

            	    }
            	    break;

            	default :
            	    break loop186;
                }
            } while (true);


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (XQDTCommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (XQDTCommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "p_ConcatExpr"

    public static class p_BlockExpr_return extends ParserRuleReturnScope {
        XQDTCommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "p_BlockExpr"
    // XQueryParser.g:1397:1: p_BlockExpr : kb= BLOCK p_Block ;
    public final XQueryParser.p_BlockExpr_return p_BlockExpr() throws RecognitionException {
        XQueryParser.p_BlockExpr_return retval = new XQueryParser.p_BlockExpr_return();
        retval.start = input.LT(1);

        XQDTCommonTree root_0 = null;

        CommonToken kb=null;
        XQueryParser.p_Block_return p_Block588 = null;


        XQDTCommonTree kb_tree=null;

        try {
            // XQueryParser.g:1398:9: (kb= BLOCK p_Block )
            // XQueryParser.g:1398:11: kb= BLOCK p_Block
            {
            root_0 = (XQDTCommonTree)adaptor.nil();

            kb=(CommonToken)match(input,BLOCK,FOLLOW_BLOCK_in_p_BlockExpr12354); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            kb_tree = (XQDTCommonTree)adaptor.create(kb);
            adaptor.addChild(root_0, kb_tree);
            }
            if ( state.backtracking==0 ) {
              ak(kb);
            }
            pushFollow(FOLLOW_p_Block_in_p_BlockExpr12358);
            p_Block588=p_Block();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, p_Block588.getTree());

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (XQDTCommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (XQDTCommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "p_BlockExpr"

    public static class p_Block_return extends ParserRuleReturnScope {
        XQDTCommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "p_Block"
    // XQueryParser.g:1402:1: p_Block : LBRACKET bd= pm_BlockDecls bb= p_BlockBody RBRACKET -> ^( Block $bd $bb) ;
    public final XQueryParser.p_Block_return p_Block() throws RecognitionException {
        XQueryParser.p_Block_return retval = new XQueryParser.p_Block_return();
        retval.start = input.LT(1);

        XQDTCommonTree root_0 = null;

        CommonToken LBRACKET589=null;
        CommonToken RBRACKET590=null;
        XQueryParser.pm_BlockDecls_return bd = null;

        XQueryParser.p_BlockBody_return bb = null;


        XQDTCommonTree LBRACKET589_tree=null;
        XQDTCommonTree RBRACKET590_tree=null;
        RewriteRuleTokenStream stream_LBRACKET=new RewriteRuleTokenStream(adaptor,"token LBRACKET");
        RewriteRuleTokenStream stream_RBRACKET=new RewriteRuleTokenStream(adaptor,"token RBRACKET");
        RewriteRuleSubtreeStream stream_p_BlockBody=new RewriteRuleSubtreeStream(adaptor,"rule p_BlockBody");
        RewriteRuleSubtreeStream stream_pm_BlockDecls=new RewriteRuleSubtreeStream(adaptor,"rule pm_BlockDecls");
        try {
            // XQueryParser.g:1403:9: ( LBRACKET bd= pm_BlockDecls bb= p_BlockBody RBRACKET -> ^( Block $bd $bb) )
            // XQueryParser.g:1403:11: LBRACKET bd= pm_BlockDecls bb= p_BlockBody RBRACKET
            {
            LBRACKET589=(CommonToken)match(input,LBRACKET,FOLLOW_LBRACKET_in_p_Block12384); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_LBRACKET.add(LBRACKET589);

            pushFollow(FOLLOW_pm_BlockDecls_in_p_Block12388);
            bd=pm_BlockDecls();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_pm_BlockDecls.add(bd.getTree());
            pushFollow(FOLLOW_p_BlockBody_in_p_Block12392);
            bb=p_BlockBody();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_p_BlockBody.add(bb.getTree());
            RBRACKET590=(CommonToken)match(input,RBRACKET,FOLLOW_RBRACKET_in_p_Block12394); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_RBRACKET.add(RBRACKET590);



            // AST REWRITE
            // elements: bb, bd
            // token labels: 
            // rule labels: retval, bb, bd
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
            RewriteRuleSubtreeStream stream_bb=new RewriteRuleSubtreeStream(adaptor,"rule bb",bb!=null?bb.tree:null);
            RewriteRuleSubtreeStream stream_bd=new RewriteRuleSubtreeStream(adaptor,"rule bd",bd!=null?bd.tree:null);

            root_0 = (XQDTCommonTree)adaptor.nil();
            // 1404:17: -> ^( Block $bd $bb)
            {
                // XQueryParser.g:1404:20: ^( Block $bd $bb)
                {
                XQDTCommonTree root_1 = (XQDTCommonTree)adaptor.nil();
                root_1 = (XQDTCommonTree)adaptor.becomeRoot((XQDTCommonTree)adaptor.create(Block, "Block"), root_1);

                adaptor.addChild(root_1, stream_bd.nextTree());
                adaptor.addChild(root_1, stream_bb.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (XQDTCommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (XQDTCommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "p_Block"

    public static class pm_BlockDecls_return extends ParserRuleReturnScope {
        XQDTCommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "pm_BlockDecls"
    // XQueryParser.g:1408:1: pm_BlockDecls : (bvd+= pm_BlockVarDecl )* -> ^( BlockDecls ( $bvd)* ) ;
    public final XQueryParser.pm_BlockDecls_return pm_BlockDecls() throws RecognitionException {
        XQueryParser.pm_BlockDecls_return retval = new XQueryParser.pm_BlockDecls_return();
        retval.start = input.LT(1);

        XQDTCommonTree root_0 = null;

        List list_bvd=null;
        XQueryParser.pm_BlockVarDecl_return bvd = null;
         bvd = null;
        RewriteRuleSubtreeStream stream_pm_BlockVarDecl=new RewriteRuleSubtreeStream(adaptor,"rule pm_BlockVarDecl");
        try {
            // XQueryParser.g:1409:9: ( (bvd+= pm_BlockVarDecl )* -> ^( BlockDecls ( $bvd)* ) )
            // XQueryParser.g:1409:11: (bvd+= pm_BlockVarDecl )*
            {
            // XQueryParser.g:1409:14: (bvd+= pm_BlockVarDecl )*
            loop187:
            do {
                int alt187=2;
                int LA187_0 = input.LA(1);

                if ( (LA187_0==DECLARE) ) {
                    int LA187_2 = input.LA(2);

                    if ( (LA187_2==DOLLAR) ) {
                        alt187=1;
                    }


                }


                switch (alt187) {
            	case 1 :
            	    // XQueryParser.g:1409:14: bvd+= pm_BlockVarDecl
            	    {
            	    pushFollow(FOLLOW_pm_BlockVarDecl_in_pm_BlockDecls12450);
            	    bvd=pm_BlockVarDecl();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) stream_pm_BlockVarDecl.add(bvd.getTree());
            	    if (list_bvd==null) list_bvd=new ArrayList();
            	    list_bvd.add(bvd.getTree());


            	    }
            	    break;

            	default :
            	    break loop187;
                }
            } while (true);



            // AST REWRITE
            // elements: bvd
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: bvd
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
            RewriteRuleSubtreeStream stream_bvd=new RewriteRuleSubtreeStream(adaptor,"token bvd",list_bvd);
            root_0 = (XQDTCommonTree)adaptor.nil();
            // 1410:17: -> ^( BlockDecls ( $bvd)* )
            {
                // XQueryParser.g:1410:20: ^( BlockDecls ( $bvd)* )
                {
                XQDTCommonTree root_1 = (XQDTCommonTree)adaptor.nil();
                root_1 = (XQDTCommonTree)adaptor.becomeRoot((XQDTCommonTree)adaptor.create(BlockDecls, "BlockDecls"), root_1);

                // XQueryParser.g:1410:33: ( $bvd)*
                while ( stream_bvd.hasNext() ) {
                    adaptor.addChild(root_1, stream_bvd.nextTree());

                }
                stream_bvd.reset();

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (XQDTCommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (XQDTCommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "pm_BlockDecls"

    public static class pm_BlockVarDecl_return extends ParserRuleReturnScope {
        XQDTCommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "pm_BlockVarDecl"
    // XQueryParser.g:1414:1: pm_BlockVarDecl : kd= DECLARE DOLLAR qn= p_VarName (td= p_TypeDeclaration )? ( BIND es= p_ExprSingle )? ( COMMA DOLLAR p_VarName ( p_TypeDeclaration )? ( BIND p_ExprSingle )? )* SEMICOLON -> ^( BlockVarDecl $qn ( $td)? ( $es)? ) ;
    public final XQueryParser.pm_BlockVarDecl_return pm_BlockVarDecl() throws RecognitionException {
        XQueryParser.pm_BlockVarDecl_return retval = new XQueryParser.pm_BlockVarDecl_return();
        retval.start = input.LT(1);

        XQDTCommonTree root_0 = null;

        CommonToken kd=null;
        CommonToken DOLLAR591=null;
        CommonToken BIND592=null;
        CommonToken COMMA593=null;
        CommonToken DOLLAR594=null;
        CommonToken BIND597=null;
        CommonToken SEMICOLON599=null;
        XQueryParser.p_VarName_return qn = null;

        XQueryParser.p_TypeDeclaration_return td = null;

        XQueryParser.p_ExprSingle_return es = null;

        XQueryParser.p_VarName_return p_VarName595 = null;

        XQueryParser.p_TypeDeclaration_return p_TypeDeclaration596 = null;

        XQueryParser.p_ExprSingle_return p_ExprSingle598 = null;


        XQDTCommonTree kd_tree=null;
        XQDTCommonTree DOLLAR591_tree=null;
        XQDTCommonTree BIND592_tree=null;
        XQDTCommonTree COMMA593_tree=null;
        XQDTCommonTree DOLLAR594_tree=null;
        XQDTCommonTree BIND597_tree=null;
        XQDTCommonTree SEMICOLON599_tree=null;
        RewriteRuleTokenStream stream_DOLLAR=new RewriteRuleTokenStream(adaptor,"token DOLLAR");
        RewriteRuleTokenStream stream_DECLARE=new RewriteRuleTokenStream(adaptor,"token DECLARE");
        RewriteRuleTokenStream stream_SEMICOLON=new RewriteRuleTokenStream(adaptor,"token SEMICOLON");
        RewriteRuleTokenStream stream_COMMA=new RewriteRuleTokenStream(adaptor,"token COMMA");
        RewriteRuleTokenStream stream_BIND=new RewriteRuleTokenStream(adaptor,"token BIND");
        RewriteRuleSubtreeStream stream_p_VarName=new RewriteRuleSubtreeStream(adaptor,"rule p_VarName");
        RewriteRuleSubtreeStream stream_p_TypeDeclaration=new RewriteRuleSubtreeStream(adaptor,"rule p_TypeDeclaration");
        RewriteRuleSubtreeStream stream_p_ExprSingle=new RewriteRuleSubtreeStream(adaptor,"rule p_ExprSingle");
        try {
            // XQueryParser.g:1415:9: (kd= DECLARE DOLLAR qn= p_VarName (td= p_TypeDeclaration )? ( BIND es= p_ExprSingle )? ( COMMA DOLLAR p_VarName ( p_TypeDeclaration )? ( BIND p_ExprSingle )? )* SEMICOLON -> ^( BlockVarDecl $qn ( $td)? ( $es)? ) )
            // XQueryParser.g:1415:11: kd= DECLARE DOLLAR qn= p_VarName (td= p_TypeDeclaration )? ( BIND es= p_ExprSingle )? ( COMMA DOLLAR p_VarName ( p_TypeDeclaration )? ( BIND p_ExprSingle )? )* SEMICOLON
            {
            kd=(CommonToken)match(input,DECLARE,FOLLOW_DECLARE_in_pm_BlockVarDecl12505); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_DECLARE.add(kd);

            if ( state.backtracking==0 ) {
              ak(kd);
            }
            DOLLAR591=(CommonToken)match(input,DOLLAR,FOLLOW_DOLLAR_in_pm_BlockVarDecl12509); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_DOLLAR.add(DOLLAR591);

            pushFollow(FOLLOW_p_VarName_in_pm_BlockVarDecl12513);
            qn=p_VarName();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_p_VarName.add(qn.getTree());
            // XQueryParser.g:1415:55: (td= p_TypeDeclaration )?
            int alt188=2;
            int LA188_0 = input.LA(1);

            if ( (LA188_0==AS) ) {
                alt188=1;
            }
            switch (alt188) {
                case 1 :
                    // XQueryParser.g:1415:55: td= p_TypeDeclaration
                    {
                    pushFollow(FOLLOW_p_TypeDeclaration_in_pm_BlockVarDecl12517);
                    td=p_TypeDeclaration();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_p_TypeDeclaration.add(td.getTree());

                    }
                    break;

            }

            // XQueryParser.g:1415:75: ( BIND es= p_ExprSingle )?
            int alt189=2;
            int LA189_0 = input.LA(1);

            if ( (LA189_0==BIND) ) {
                alt189=1;
            }
            switch (alt189) {
                case 1 :
                    // XQueryParser.g:1415:76: BIND es= p_ExprSingle
                    {
                    BIND592=(CommonToken)match(input,BIND,FOLLOW_BIND_in_pm_BlockVarDecl12521); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_BIND.add(BIND592);

                    pushFollow(FOLLOW_p_ExprSingle_in_pm_BlockVarDecl12525);
                    es=p_ExprSingle();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_p_ExprSingle.add(es.getTree());

                    }
                    break;

            }

            // XQueryParser.g:1415:99: ( COMMA DOLLAR p_VarName ( p_TypeDeclaration )? ( BIND p_ExprSingle )? )*
            loop192:
            do {
                int alt192=2;
                int LA192_0 = input.LA(1);

                if ( (LA192_0==COMMA) ) {
                    alt192=1;
                }


                switch (alt192) {
            	case 1 :
            	    // XQueryParser.g:1415:100: COMMA DOLLAR p_VarName ( p_TypeDeclaration )? ( BIND p_ExprSingle )?
            	    {
            	    COMMA593=(CommonToken)match(input,COMMA,FOLLOW_COMMA_in_pm_BlockVarDecl12530); if (state.failed) return retval; 
            	    if ( state.backtracking==0 ) stream_COMMA.add(COMMA593);

            	    DOLLAR594=(CommonToken)match(input,DOLLAR,FOLLOW_DOLLAR_in_pm_BlockVarDecl12532); if (state.failed) return retval; 
            	    if ( state.backtracking==0 ) stream_DOLLAR.add(DOLLAR594);

            	    pushFollow(FOLLOW_p_VarName_in_pm_BlockVarDecl12534);
            	    p_VarName595=p_VarName();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) stream_p_VarName.add(p_VarName595.getTree());
            	    // XQueryParser.g:1415:123: ( p_TypeDeclaration )?
            	    int alt190=2;
            	    int LA190_0 = input.LA(1);

            	    if ( (LA190_0==AS) ) {
            	        alt190=1;
            	    }
            	    switch (alt190) {
            	        case 1 :
            	            // XQueryParser.g:1415:123: p_TypeDeclaration
            	            {
            	            pushFollow(FOLLOW_p_TypeDeclaration_in_pm_BlockVarDecl12536);
            	            p_TypeDeclaration596=p_TypeDeclaration();

            	            state._fsp--;
            	            if (state.failed) return retval;
            	            if ( state.backtracking==0 ) stream_p_TypeDeclaration.add(p_TypeDeclaration596.getTree());

            	            }
            	            break;

            	    }

            	    // XQueryParser.g:1415:142: ( BIND p_ExprSingle )?
            	    int alt191=2;
            	    int LA191_0 = input.LA(1);

            	    if ( (LA191_0==BIND) ) {
            	        alt191=1;
            	    }
            	    switch (alt191) {
            	        case 1 :
            	            // XQueryParser.g:1415:143: BIND p_ExprSingle
            	            {
            	            BIND597=(CommonToken)match(input,BIND,FOLLOW_BIND_in_pm_BlockVarDecl12540); if (state.failed) return retval; 
            	            if ( state.backtracking==0 ) stream_BIND.add(BIND597);

            	            pushFollow(FOLLOW_p_ExprSingle_in_pm_BlockVarDecl12542);
            	            p_ExprSingle598=p_ExprSingle();

            	            state._fsp--;
            	            if (state.failed) return retval;
            	            if ( state.backtracking==0 ) stream_p_ExprSingle.add(p_ExprSingle598.getTree());

            	            }
            	            break;

            	    }


            	    }
            	    break;

            	default :
            	    break loop192;
                }
            } while (true);

            SEMICOLON599=(CommonToken)match(input,SEMICOLON,FOLLOW_SEMICOLON_in_pm_BlockVarDecl12548); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_SEMICOLON.add(SEMICOLON599);



            // AST REWRITE
            // elements: es, qn, td
            // token labels: 
            // rule labels: qn, retval, td, es
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_qn=new RewriteRuleSubtreeStream(adaptor,"rule qn",qn!=null?qn.tree:null);
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
            RewriteRuleSubtreeStream stream_td=new RewriteRuleSubtreeStream(adaptor,"rule td",td!=null?td.tree:null);
            RewriteRuleSubtreeStream stream_es=new RewriteRuleSubtreeStream(adaptor,"rule es",es!=null?es.tree:null);

            root_0 = (XQDTCommonTree)adaptor.nil();
            // 1416:17: -> ^( BlockVarDecl $qn ( $td)? ( $es)? )
            {
                // XQueryParser.g:1416:21: ^( BlockVarDecl $qn ( $td)? ( $es)? )
                {
                XQDTCommonTree root_1 = (XQDTCommonTree)adaptor.nil();
                root_1 = (XQDTCommonTree)adaptor.becomeRoot((XQDTCommonTree)adaptor.create(BlockVarDecl, "BlockVarDecl"), root_1);

                adaptor.addChild(root_1, stream_qn.nextTree());
                // XQueryParser.g:1416:40: ( $td)?
                if ( stream_td.hasNext() ) {
                    adaptor.addChild(root_1, stream_td.nextTree());

                }
                stream_td.reset();
                // XQueryParser.g:1416:45: ( $es)?
                if ( stream_es.hasNext() ) {
                    adaptor.addChild(root_1, stream_es.nextTree());

                }
                stream_es.reset();

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (XQDTCommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (XQDTCommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "pm_BlockVarDecl"

    public static class p_BlockBody_return extends ParserRuleReturnScope {
        XQDTCommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "p_BlockBody"
    // XQueryParser.g:1420:1: p_BlockBody : pm_Expr ;
    public final XQueryParser.p_BlockBody_return p_BlockBody() throws RecognitionException {
        XQueryParser.p_BlockBody_return retval = new XQueryParser.p_BlockBody_return();
        retval.start = input.LT(1);

        XQDTCommonTree root_0 = null;

        XQueryParser.pm_Expr_return pm_Expr600 = null;



        try {
            // XQueryParser.g:1421:9: ( pm_Expr )
            // XQueryParser.g:1421:11: pm_Expr
            {
            root_0 = (XQDTCommonTree)adaptor.nil();

            pushFollow(FOLLOW_pm_Expr_in_p_BlockBody12608);
            pm_Expr600=pm_Expr();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, pm_Expr600.getTree());

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (XQDTCommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (XQDTCommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "p_BlockBody"

    public static class p_AssignmentExpr_return extends ParserRuleReturnScope {
        XQDTCommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "p_AssignmentExpr"
    // XQueryParser.g:1425:1: p_AssignmentExpr : ks= SET DOLLAR p_VarName BIND p_ExprSingle ;
    public final XQueryParser.p_AssignmentExpr_return p_AssignmentExpr() throws RecognitionException {
        XQueryParser.p_AssignmentExpr_return retval = new XQueryParser.p_AssignmentExpr_return();
        retval.start = input.LT(1);

        XQDTCommonTree root_0 = null;

        CommonToken ks=null;
        CommonToken DOLLAR601=null;
        CommonToken BIND603=null;
        XQueryParser.p_VarName_return p_VarName602 = null;

        XQueryParser.p_ExprSingle_return p_ExprSingle604 = null;


        XQDTCommonTree ks_tree=null;
        XQDTCommonTree DOLLAR601_tree=null;
        XQDTCommonTree BIND603_tree=null;

        try {
            // XQueryParser.g:1426:9: (ks= SET DOLLAR p_VarName BIND p_ExprSingle )
            // XQueryParser.g:1426:11: ks= SET DOLLAR p_VarName BIND p_ExprSingle
            {
            root_0 = (XQDTCommonTree)adaptor.nil();

            ks=(CommonToken)match(input,SET,FOLLOW_SET_in_p_AssignmentExpr12636); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            ks_tree = (XQDTCommonTree)adaptor.create(ks);
            adaptor.addChild(root_0, ks_tree);
            }
            if ( state.backtracking==0 ) {
              ak(ks);
            }
            DOLLAR601=(CommonToken)match(input,DOLLAR,FOLLOW_DOLLAR_in_p_AssignmentExpr12640); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            DOLLAR601_tree = (XQDTCommonTree)adaptor.create(DOLLAR601);
            adaptor.addChild(root_0, DOLLAR601_tree);
            }
            pushFollow(FOLLOW_p_VarName_in_p_AssignmentExpr12642);
            p_VarName602=p_VarName();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, p_VarName602.getTree());
            BIND603=(CommonToken)match(input,BIND,FOLLOW_BIND_in_p_AssignmentExpr12644); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            BIND603_tree = (XQDTCommonTree)adaptor.create(BIND603);
            adaptor.addChild(root_0, BIND603_tree);
            }
            pushFollow(FOLLOW_p_ExprSingle_in_p_AssignmentExpr12646);
            p_ExprSingle604=p_ExprSingle();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, p_ExprSingle604.getTree());

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (XQDTCommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (XQDTCommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "p_AssignmentExpr"

    public static class p_ExitExpr_return extends ParserRuleReturnScope {
        XQDTCommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "p_ExitExpr"
    // XQueryParser.g:1430:1: p_ExitExpr : ke= EXIT kr= RETURNING p_ExprSingle ;
    public final XQueryParser.p_ExitExpr_return p_ExitExpr() throws RecognitionException {
        XQueryParser.p_ExitExpr_return retval = new XQueryParser.p_ExitExpr_return();
        retval.start = input.LT(1);

        XQDTCommonTree root_0 = null;

        CommonToken ke=null;
        CommonToken kr=null;
        XQueryParser.p_ExprSingle_return p_ExprSingle605 = null;


        XQDTCommonTree ke_tree=null;
        XQDTCommonTree kr_tree=null;

        try {
            // XQueryParser.g:1431:9: (ke= EXIT kr= RETURNING p_ExprSingle )
            // XQueryParser.g:1431:11: ke= EXIT kr= RETURNING p_ExprSingle
            {
            root_0 = (XQDTCommonTree)adaptor.nil();

            ke=(CommonToken)match(input,EXIT,FOLLOW_EXIT_in_p_ExitExpr12674); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            ke_tree = (XQDTCommonTree)adaptor.create(ke);
            adaptor.addChild(root_0, ke_tree);
            }
            if ( state.backtracking==0 ) {
              ak(ke);
            }
            kr=(CommonToken)match(input,RETURNING,FOLLOW_RETURNING_in_p_ExitExpr12680); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            kr_tree = (XQDTCommonTree)adaptor.create(kr);
            adaptor.addChild(root_0, kr_tree);
            }
            if ( state.backtracking==0 ) {
              ak(kr);
            }
            pushFollow(FOLLOW_p_ExprSingle_in_p_ExitExpr12684);
            p_ExprSingle605=p_ExprSingle();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, p_ExprSingle605.getTree());

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (XQDTCommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (XQDTCommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "p_ExitExpr"

    public static class p_WhileExpr_return extends ParserRuleReturnScope {
        XQDTCommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "p_WhileExpr"
    // XQueryParser.g:1435:1: p_WhileExpr : kw= WHILE LPAREN p_ExprSingle RPAREN p_WhileBody ;
    public final XQueryParser.p_WhileExpr_return p_WhileExpr() throws RecognitionException {
        XQueryParser.p_WhileExpr_return retval = new XQueryParser.p_WhileExpr_return();
        retval.start = input.LT(1);

        XQDTCommonTree root_0 = null;

        CommonToken kw=null;
        CommonToken LPAREN606=null;
        CommonToken RPAREN608=null;
        XQueryParser.p_ExprSingle_return p_ExprSingle607 = null;

        XQueryParser.p_WhileBody_return p_WhileBody609 = null;


        XQDTCommonTree kw_tree=null;
        XQDTCommonTree LPAREN606_tree=null;
        XQDTCommonTree RPAREN608_tree=null;

        try {
            // XQueryParser.g:1436:9: (kw= WHILE LPAREN p_ExprSingle RPAREN p_WhileBody )
            // XQueryParser.g:1436:11: kw= WHILE LPAREN p_ExprSingle RPAREN p_WhileBody
            {
            root_0 = (XQDTCommonTree)adaptor.nil();

            kw=(CommonToken)match(input,WHILE,FOLLOW_WHILE_in_p_WhileExpr12712); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            kw_tree = (XQDTCommonTree)adaptor.create(kw);
            adaptor.addChild(root_0, kw_tree);
            }
            if ( state.backtracking==0 ) {
              ak(kw);
            }
            LPAREN606=(CommonToken)match(input,LPAREN,FOLLOW_LPAREN_in_p_WhileExpr12716); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            LPAREN606_tree = (XQDTCommonTree)adaptor.create(LPAREN606);
            adaptor.addChild(root_0, LPAREN606_tree);
            }
            pushFollow(FOLLOW_p_ExprSingle_in_p_WhileExpr12718);
            p_ExprSingle607=p_ExprSingle();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, p_ExprSingle607.getTree());
            RPAREN608=(CommonToken)match(input,RPAREN,FOLLOW_RPAREN_in_p_WhileExpr12720); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            RPAREN608_tree = (XQDTCommonTree)adaptor.create(RPAREN608);
            adaptor.addChild(root_0, RPAREN608_tree);
            }
            pushFollow(FOLLOW_p_WhileBody_in_p_WhileExpr12722);
            p_WhileBody609=p_WhileBody();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, p_WhileBody609.getTree());

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (XQDTCommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (XQDTCommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "p_WhileExpr"

    public static class p_WhileBody_return extends ParserRuleReturnScope {
        XQDTCommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "p_WhileBody"
    // XQueryParser.g:1440:1: p_WhileBody : p_Block ;
    public final XQueryParser.p_WhileBody_return p_WhileBody() throws RecognitionException {
        XQueryParser.p_WhileBody_return retval = new XQueryParser.p_WhileBody_return();
        retval.start = input.LT(1);

        XQDTCommonTree root_0 = null;

        XQueryParser.p_Block_return p_Block610 = null;



        try {
            // XQueryParser.g:1441:9: ( p_Block )
            // XQueryParser.g:1441:11: p_Block
            {
            root_0 = (XQDTCommonTree)adaptor.nil();

            pushFollow(FOLLOW_p_Block_in_p_WhileBody12748);
            p_Block610=p_Block();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, p_Block610.getTree());

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (XQDTCommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (XQDTCommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "p_WhileBody"

    public static class p_EvalExpr_return extends ParserRuleReturnScope {
        XQDTCommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "p_EvalExpr"
    // XQueryParser.g:1449:1: p_EvalExpr : ( p_UsingClause )? ke= EVAL LBRACKET p_ExprSingle RBRACKET ;
    public final XQueryParser.p_EvalExpr_return p_EvalExpr() throws RecognitionException {
        XQueryParser.p_EvalExpr_return retval = new XQueryParser.p_EvalExpr_return();
        retval.start = input.LT(1);

        XQDTCommonTree root_0 = null;

        CommonToken ke=null;
        CommonToken LBRACKET612=null;
        CommonToken RBRACKET614=null;
        XQueryParser.p_UsingClause_return p_UsingClause611 = null;

        XQueryParser.p_ExprSingle_return p_ExprSingle613 = null;


        XQDTCommonTree ke_tree=null;
        XQDTCommonTree LBRACKET612_tree=null;
        XQDTCommonTree RBRACKET614_tree=null;

        try {
            // XQueryParser.g:1450:9: ( ( p_UsingClause )? ke= EVAL LBRACKET p_ExprSingle RBRACKET )
            // XQueryParser.g:1450:11: ( p_UsingClause )? ke= EVAL LBRACKET p_ExprSingle RBRACKET
            {
            root_0 = (XQDTCommonTree)adaptor.nil();

            // XQueryParser.g:1450:11: ( p_UsingClause )?
            int alt193=2;
            int LA193_0 = input.LA(1);

            if ( (LA193_0==USING) ) {
                alt193=1;
            }
            switch (alt193) {
                case 1 :
                    // XQueryParser.g:1450:11: p_UsingClause
                    {
                    pushFollow(FOLLOW_p_UsingClause_in_p_EvalExpr12778);
                    p_UsingClause611=p_UsingClause();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, p_UsingClause611.getTree());

                    }
                    break;

            }

            ke=(CommonToken)match(input,EVAL,FOLLOW_EVAL_in_p_EvalExpr12783); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            ke_tree = (XQDTCommonTree)adaptor.create(ke);
            adaptor.addChild(root_0, ke_tree);
            }
            if ( state.backtracking==0 ) {
              ak(ke);
            }
            LBRACKET612=(CommonToken)match(input,LBRACKET,FOLLOW_LBRACKET_in_p_EvalExpr12787); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            LBRACKET612_tree = (XQDTCommonTree)adaptor.create(LBRACKET612);
            adaptor.addChild(root_0, LBRACKET612_tree);
            }
            pushFollow(FOLLOW_p_ExprSingle_in_p_EvalExpr12789);
            p_ExprSingle613=p_ExprSingle();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, p_ExprSingle613.getTree());
            RBRACKET614=(CommonToken)match(input,RBRACKET,FOLLOW_RBRACKET_in_p_EvalExpr12791); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            RBRACKET614_tree = (XQDTCommonTree)adaptor.create(RBRACKET614);
            adaptor.addChild(root_0, RBRACKET614_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (XQDTCommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (XQDTCommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "p_EvalExpr"

    public static class p_UsingClause_return extends ParserRuleReturnScope {
        XQDTCommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "p_UsingClause"
    // XQueryParser.g:1453:1: p_UsingClause : ku= USING DOLLAR p_VarName ( COMMA DOLLAR p_VarName )* ;
    public final XQueryParser.p_UsingClause_return p_UsingClause() throws RecognitionException {
        XQueryParser.p_UsingClause_return retval = new XQueryParser.p_UsingClause_return();
        retval.start = input.LT(1);

        XQDTCommonTree root_0 = null;

        CommonToken ku=null;
        CommonToken DOLLAR615=null;
        CommonToken COMMA617=null;
        CommonToken DOLLAR618=null;
        XQueryParser.p_VarName_return p_VarName616 = null;

        XQueryParser.p_VarName_return p_VarName619 = null;


        XQDTCommonTree ku_tree=null;
        XQDTCommonTree DOLLAR615_tree=null;
        XQDTCommonTree COMMA617_tree=null;
        XQDTCommonTree DOLLAR618_tree=null;

        try {
            // XQueryParser.g:1454:9: (ku= USING DOLLAR p_VarName ( COMMA DOLLAR p_VarName )* )
            // XQueryParser.g:1454:11: ku= USING DOLLAR p_VarName ( COMMA DOLLAR p_VarName )*
            {
            root_0 = (XQDTCommonTree)adaptor.nil();

            ku=(CommonToken)match(input,USING,FOLLOW_USING_in_p_UsingClause12818); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            ku_tree = (XQDTCommonTree)adaptor.create(ku);
            adaptor.addChild(root_0, ku_tree);
            }
            if ( state.backtracking==0 ) {
              ak(ku);
            }
            DOLLAR615=(CommonToken)match(input,DOLLAR,FOLLOW_DOLLAR_in_p_UsingClause12823); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            DOLLAR615_tree = (XQDTCommonTree)adaptor.create(DOLLAR615);
            adaptor.addChild(root_0, DOLLAR615_tree);
            }
            pushFollow(FOLLOW_p_VarName_in_p_UsingClause12825);
            p_VarName616=p_VarName();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, p_VarName616.getTree());
            // XQueryParser.g:1454:49: ( COMMA DOLLAR p_VarName )*
            loop194:
            do {
                int alt194=2;
                int LA194_0 = input.LA(1);

                if ( (LA194_0==COMMA) ) {
                    alt194=1;
                }


                switch (alt194) {
            	case 1 :
            	    // XQueryParser.g:1454:50: COMMA DOLLAR p_VarName
            	    {
            	    COMMA617=(CommonToken)match(input,COMMA,FOLLOW_COMMA_in_p_UsingClause12828); if (state.failed) return retval;
            	    if ( state.backtracking==0 ) {
            	    COMMA617_tree = (XQDTCommonTree)adaptor.create(COMMA617);
            	    adaptor.addChild(root_0, COMMA617_tree);
            	    }
            	    DOLLAR618=(CommonToken)match(input,DOLLAR,FOLLOW_DOLLAR_in_p_UsingClause12830); if (state.failed) return retval;
            	    if ( state.backtracking==0 ) {
            	    DOLLAR618_tree = (XQDTCommonTree)adaptor.create(DOLLAR618);
            	    adaptor.addChild(root_0, DOLLAR618_tree);
            	    }
            	    pushFollow(FOLLOW_p_VarName_in_p_UsingClause12832);
            	    p_VarName619=p_VarName();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, p_VarName619.getTree());

            	    }
            	    break;

            	default :
            	    break loop194;
                }
            } while (true);


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (XQDTCommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (XQDTCommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "p_UsingClause"

    // $ANTLR start synpred1_XQueryParser
    public final void synpred1_XQueryParser_fragment() throws RecognitionException {   
        // XQueryParser.g:663:11: ( SLASH p_RelativePathExpr )
        // XQueryParser.g:663:12: SLASH p_RelativePathExpr
        {
        match(input,SLASH,FOLLOW_SLASH_in_synpred1_XQueryParser6000); if (state.failed) return ;
        pushFollow(FOLLOW_p_RelativePathExpr_in_synpred1_XQueryParser6002);
        p_RelativePathExpr();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred1_XQueryParser

    // $ANTLR start synpred2_XQueryParser
    public final void synpred2_XQueryParser_fragment() throws RecognitionException {   
        // XQueryParser.g:1017:26: ( p_OccurrenceIndicator )
        // XQueryParser.g:1017:27: p_OccurrenceIndicator
        {
        pushFollow(FOLLOW_p_OccurrenceIndicator_in_synpred2_XQueryParser8672);
        p_OccurrenceIndicator();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred2_XQueryParser

    // Delegated rules

    public final boolean synpred1_XQueryParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred1_XQueryParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred2_XQueryParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred2_XQueryParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }


    protected DFA8 dfa8 = new DFA8(this);
    protected DFA49 dfa49 = new DFA49(this);
    protected DFA103 dfa103 = new DFA103(this);
    protected DFA110 dfa110 = new DFA110(this);
    protected DFA112 dfa112 = new DFA112(this);
    protected DFA114 dfa114 = new DFA114(this);
    protected DFA119 dfa119 = new DFA119(this);
    protected DFA124 dfa124 = new DFA124(this);
    protected DFA154 dfa154 = new DFA154(this);
    protected DFA156 dfa156 = new DFA156(this);
    static final String DFA8_eotS =
        "\13\uffff";
    static final String DFA8_eofS =
        "\13\uffff";
    static final String DFA8_minS =
        "\1\42\1\27\1\uffff\1\36\7\uffff";
    static final String DFA8_maxS =
        "\1\42\1\u0097\1\uffff\1\122\7\uffff";
    static final String DFA8_acceptS =
        "\2\uffff\1\1\1\uffff\1\3\1\4\1\5\1\7\1\10\1\2\1\6";
    static final String DFA8_specialS =
        "\1\uffff\1\0\11\uffff}>";
    static final String[] DFA8_transitionS = {
            "\1\1",
            "\1\4\1\2\7\uffff\1\5\1\10\1\uffff\1\3\60\uffff\1\6\102\uffff"+
            "\1\7",
            "",
            "\1\11\63\uffff\1\12",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };

    static final short[] DFA8_eot = DFA.unpackEncodedString(DFA8_eotS);
    static final short[] DFA8_eof = DFA.unpackEncodedString(DFA8_eofS);
    static final char[] DFA8_min = DFA.unpackEncodedStringToUnsignedChars(DFA8_minS);
    static final char[] DFA8_max = DFA.unpackEncodedStringToUnsignedChars(DFA8_maxS);
    static final short[] DFA8_accept = DFA.unpackEncodedString(DFA8_acceptS);
    static final short[] DFA8_special = DFA.unpackEncodedString(DFA8_specialS);
    static final short[][] DFA8_transition;

    static {
        int numStates = DFA8_transitionS.length;
        DFA8_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA8_transition[i] = DFA.unpackEncodedString(DFA8_transitionS[i]);
        }
    }

    class DFA8 extends DFA {

        public DFA8(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 8;
            this.eot = DFA8_eot;
            this.eof = DFA8_eof;
            this.min = DFA8_min;
            this.max = DFA8_max;
            this.accept = DFA8_accept;
            this.special = DFA8_special;
            this.transition = DFA8_transition;
        }
        public String getDescription() {
            return "185:1: p_Setter : ( pm_BoundarySpaceDecl | pm_DefaultCollationDecl | pm_BaseURIDecl | pm_ConstructionDecl | pm_OrderingModeDecl | pm_EmptyOrderDecl | {...}? => pm_RevalidationDecl | pm_CopyNamespacesDecl );";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA8_1 = input.LA(1);

                         
                        int index8_1 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA8_1==BOUNDARY_SPACE) ) {s = 2;}

                        else if ( (LA8_1==DEFAULT) ) {s = 3;}

                        else if ( (LA8_1==BASE_URI) ) {s = 4;}

                        else if ( (LA8_1==CONSTRUCTION) ) {s = 5;}

                        else if ( (LA8_1==ORDERING) ) {s = 6;}

                        else if ( (LA8_1==REVALIDATION) && ((lc(XQU)))) {s = 7;}

                        else if ( (LA8_1==COPY_NAMESPACES) ) {s = 8;}

                         
                        input.seek(index8_1);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 8, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static final String DFA49_eotS =
        "\43\uffff";
    static final String DFA49_eofS =
        "\1\uffff\22\23\20\uffff";
    static final String DFA49_minS =
        "\1\20\22\22\20\uffff";
    static final String DFA49_maxS =
        "\1\u00e4\22\u00ca\20\uffff";
    static final String DFA49_acceptS =
        "\23\uffff\1\20\1\1\1\2\1\3\1\4\1\5\1\6\1\7\1\10\1\11\1\12\1\13\1"+
        "\14\1\15\1\16\1\17";
    static final String DFA49_specialS =
        "\10\uffff\1\12\1\5\1\11\1\4\1\6\1\0\1\7\1\1\1\3\1\10\1\2\20\uffff}>";
    static final String[] DFA49_transitionS = {
            "\40\23\1\4\4\23\1\1\5\23\1\6\12\23\1\2\31\23\1\3\7\23\1\5\35"+
            "\23\1\7\6\23\1\16\1\13\1\23\1\12\4\23\1\14\1\15\5\23\1\17\1"+
            "\23\1\21\1\uffff\1\23\1\20\1\23\1\22\1\11\1\10\6\23\1\uffff"+
            "\1\23\12\uffff\4\23\5\uffff\4\23\14\uffff\1\23\2\uffff\2\23"+
            "\2\uffff\1\23\6\uffff\6\23",
            "\3\23\5\uffff\3\23\1\uffff\1\23\4\uffff\1\23\2\uffff\2\23\3"+
            "\uffff\2\23\2\uffff\1\23\1\uffff\1\23\3\uffff\1\23\1\uffff\1"+
            "\23\1\uffff\2\23\4\uffff\3\23\2\uffff\1\23\1\uffff\3\23\2\uffff"+
            "\1\23\5\uffff\2\23\7\uffff\2\23\5\uffff\1\23\4\uffff\2\23\1"+
            "\uffff\1\23\4\uffff\1\23\3\uffff\1\23\3\uffff\2\23\6\uffff\1"+
            "\23\5\uffff\1\24\1\23\1\uffff\1\24\3\uffff\2\23\4\uffff\1\23"+
            "\1\uffff\1\23\7\uffff\1\23\17\uffff\2\23\1\24\1\uffff\4\23\1"+
            "\uffff\1\23\1\uffff\1\23\1\uffff\13\23\2\uffff\1\23\3\uffff"+
            "\2\23",
            "\3\23\5\uffff\3\23\1\uffff\1\23\4\uffff\1\23\2\uffff\2\23\3"+
            "\uffff\2\23\2\uffff\1\23\1\uffff\1\23\3\uffff\1\23\1\uffff\1"+
            "\23\1\uffff\2\23\4\uffff\3\23\2\uffff\1\23\1\uffff\3\23\2\uffff"+
            "\1\23\5\uffff\2\23\7\uffff\2\23\5\uffff\1\23\4\uffff\2\23\1"+
            "\uffff\1\23\4\uffff\1\23\3\uffff\1\23\3\uffff\2\23\6\uffff\1"+
            "\23\6\uffff\1\23\5\uffff\2\23\4\uffff\1\23\1\uffff\1\23\7\uffff"+
            "\1\23\17\uffff\2\23\1\24\1\uffff\4\23\1\uffff\1\23\1\uffff\1"+
            "\23\1\uffff\13\23\2\uffff\1\23\3\uffff\2\23",
            "\3\23\5\uffff\3\23\1\uffff\1\23\4\uffff\1\23\2\uffff\2\23\3"+
            "\uffff\2\23\2\uffff\1\23\1\uffff\1\23\3\uffff\1\23\1\uffff\1"+
            "\23\1\uffff\2\23\4\uffff\3\23\2\uffff\1\23\1\uffff\3\23\2\uffff"+
            "\1\23\5\uffff\2\23\7\uffff\2\23\5\uffff\1\23\4\uffff\2\23\1"+
            "\uffff\1\23\4\uffff\1\23\3\uffff\1\23\3\uffff\2\23\6\uffff\1"+
            "\23\6\uffff\1\23\5\uffff\2\23\4\uffff\1\23\1\uffff\1\23\7\uffff"+
            "\1\23\17\uffff\2\23\1\25\1\uffff\4\23\1\uffff\1\23\1\uffff\1"+
            "\23\1\uffff\13\23\2\uffff\1\23\3\uffff\2\23",
            "\3\23\5\uffff\3\23\1\uffff\1\23\4\uffff\1\23\2\uffff\2\23\3"+
            "\uffff\2\23\2\uffff\1\23\1\uffff\1\23\3\uffff\1\23\1\uffff\1"+
            "\23\1\uffff\2\23\4\uffff\3\23\2\uffff\1\23\1\uffff\3\23\2\uffff"+
            "\1\23\5\uffff\2\23\7\uffff\2\23\5\uffff\1\23\4\uffff\2\23\1"+
            "\uffff\1\23\4\uffff\1\23\3\uffff\1\23\3\uffff\2\23\6\uffff\1"+
            "\23\6\uffff\1\23\5\uffff\2\23\4\uffff\1\23\1\uffff\1\23\7\uffff"+
            "\1\23\17\uffff\2\23\1\25\1\uffff\4\23\1\uffff\1\23\1\uffff\1"+
            "\23\1\uffff\13\23\2\uffff\1\23\3\uffff\2\23",
            "\3\23\5\uffff\3\23\1\uffff\1\23\4\uffff\1\23\2\uffff\2\23\3"+
            "\uffff\2\23\2\uffff\1\23\1\uffff\1\23\3\uffff\1\23\1\uffff\1"+
            "\23\1\uffff\2\23\4\uffff\3\23\2\uffff\1\23\1\uffff\3\23\2\uffff"+
            "\1\23\5\uffff\2\23\7\uffff\2\23\5\uffff\1\23\4\uffff\2\23\1"+
            "\uffff\1\23\4\uffff\1\23\3\uffff\1\23\3\uffff\2\23\6\uffff\1"+
            "\23\6\uffff\1\23\5\uffff\2\23\4\uffff\1\23\1\uffff\1\23\7\uffff"+
            "\1\23\17\uffff\1\26\1\23\2\uffff\4\23\1\uffff\1\23\1\uffff\1"+
            "\23\1\uffff\13\23\2\uffff\1\23\3\uffff\2\23",
            "\3\23\5\uffff\3\23\1\uffff\1\23\4\uffff\1\23\2\uffff\2\23\3"+
            "\uffff\2\23\2\uffff\1\23\1\uffff\1\23\3\uffff\1\23\1\uffff\1"+
            "\23\1\uffff\2\23\4\uffff\3\23\2\uffff\1\23\1\uffff\3\23\2\uffff"+
            "\1\23\5\uffff\2\23\7\uffff\2\23\5\uffff\1\23\4\uffff\2\23\1"+
            "\uffff\1\23\4\uffff\1\23\3\uffff\1\23\3\uffff\2\23\6\uffff\1"+
            "\23\6\uffff\1\23\5\uffff\2\23\4\uffff\1\23\1\uffff\1\23\7\uffff"+
            "\1\23\17\uffff\1\27\1\23\2\uffff\4\23\1\uffff\1\23\1\uffff\1"+
            "\23\1\uffff\13\23\2\uffff\1\23\3\uffff\2\23",
            "\3\23\5\uffff\3\23\1\uffff\1\23\4\uffff\1\23\2\uffff\2\23\3"+
            "\uffff\2\23\2\uffff\1\23\1\uffff\1\23\3\uffff\1\23\1\uffff\1"+
            "\23\1\uffff\2\23\4\uffff\3\23\2\uffff\1\23\1\uffff\3\23\2\uffff"+
            "\1\23\5\uffff\2\23\7\uffff\2\23\5\uffff\1\23\4\uffff\2\23\1"+
            "\uffff\1\23\4\uffff\1\23\3\uffff\1\23\3\uffff\2\23\6\uffff\1"+
            "\23\6\uffff\1\23\5\uffff\2\23\4\uffff\1\23\1\uffff\1\23\7\uffff"+
            "\1\23\17\uffff\2\23\1\uffff\1\30\4\23\1\uffff\1\23\1\uffff\1"+
            "\23\1\uffff\13\23\2\uffff\1\23\3\uffff\2\23",
            "\3\23\5\uffff\3\23\1\uffff\1\23\4\uffff\1\23\2\uffff\2\23\3"+
            "\uffff\2\23\2\uffff\1\23\1\uffff\1\23\3\uffff\1\23\1\uffff\1"+
            "\23\1\uffff\2\23\4\uffff\3\23\2\uffff\1\23\1\uffff\3\23\2\uffff"+
            "\1\23\5\uffff\2\23\7\uffff\2\23\5\uffff\1\23\4\uffff\2\23\1"+
            "\uffff\1\23\4\uffff\1\23\3\uffff\1\23\3\uffff\2\23\6\uffff\1"+
            "\23\6\uffff\1\23\5\uffff\2\23\4\uffff\1\23\1\uffff\1\23\7\uffff"+
            "\1\23\17\uffff\2\23\1\31\1\uffff\4\23\1\uffff\1\23\1\uffff\1"+
            "\23\1\uffff\13\23\2\uffff\1\23\3\uffff\2\23",
            "\3\23\5\uffff\3\23\1\uffff\1\23\4\uffff\1\23\2\uffff\2\23\3"+
            "\uffff\2\23\2\uffff\1\23\1\uffff\1\23\3\uffff\1\23\1\uffff\1"+
            "\23\1\uffff\2\23\4\uffff\3\23\2\uffff\1\23\1\uffff\3\23\2\uffff"+
            "\1\23\5\uffff\2\23\7\uffff\2\23\5\uffff\1\23\4\uffff\2\23\1"+
            "\uffff\1\23\4\uffff\1\23\3\uffff\1\23\3\uffff\2\23\6\uffff\1"+
            "\23\6\uffff\1\23\5\uffff\2\23\4\uffff\1\23\1\uffff\1\23\7\uffff"+
            "\1\23\17\uffff\2\23\1\uffff\1\31\4\23\1\uffff\1\23\1\uffff\1"+
            "\23\1\uffff\13\23\2\uffff\1\23\3\uffff\2\23",
            "\3\23\5\uffff\3\23\1\uffff\1\23\4\uffff\1\23\2\uffff\2\23\3"+
            "\uffff\2\23\2\uffff\1\23\1\uffff\1\23\3\uffff\1\23\1\uffff\1"+
            "\23\1\uffff\2\23\4\uffff\3\23\2\uffff\1\23\1\uffff\3\23\2\uffff"+
            "\1\23\2\uffff\1\32\2\uffff\2\23\7\uffff\2\23\5\uffff\1\23\4"+
            "\uffff\2\23\1\uffff\1\23\4\uffff\1\23\3\uffff\1\23\3\uffff\2"+
            "\23\6\uffff\1\23\6\uffff\1\23\5\uffff\2\23\4\uffff\1\23\1\uffff"+
            "\1\23\1\32\6\uffff\1\23\17\uffff\2\23\2\uffff\4\23\1\uffff\1"+
            "\23\1\uffff\1\23\1\uffff\13\23\2\uffff\1\23\3\uffff\2\23",
            "\3\23\5\uffff\3\23\1\uffff\1\23\4\uffff\1\23\2\uffff\2\23\3"+
            "\uffff\2\23\2\uffff\1\23\1\uffff\1\23\3\uffff\1\23\1\uffff\1"+
            "\23\1\uffff\2\23\4\uffff\3\23\2\uffff\1\23\1\uffff\3\23\2\uffff"+
            "\1\23\2\uffff\1\33\2\uffff\2\23\7\uffff\2\23\5\uffff\1\23\4"+
            "\uffff\2\23\1\uffff\1\23\4\uffff\1\23\3\uffff\1\23\3\uffff\2"+
            "\23\6\uffff\1\23\6\uffff\1\23\5\uffff\2\23\4\uffff\1\23\1\uffff"+
            "\1\23\1\33\6\uffff\1\23\17\uffff\2\23\2\uffff\4\23\1\uffff\1"+
            "\23\1\uffff\1\23\1\uffff\13\23\2\uffff\1\23\3\uffff\2\23",
            "\3\23\5\uffff\3\23\1\uffff\1\23\4\uffff\1\23\2\uffff\2\23\3"+
            "\uffff\2\23\2\uffff\1\23\1\uffff\1\23\3\uffff\1\23\1\uffff\1"+
            "\23\1\uffff\2\23\4\uffff\3\23\2\uffff\1\23\1\uffff\3\23\2\uffff"+
            "\1\23\2\uffff\1\34\2\uffff\2\23\7\uffff\2\23\5\uffff\1\23\4"+
            "\uffff\2\23\1\uffff\1\23\4\uffff\1\23\3\uffff\1\23\3\uffff\2"+
            "\23\6\uffff\1\23\6\uffff\1\23\5\uffff\2\23\4\uffff\1\23\1\uffff"+
            "\1\23\7\uffff\1\23\17\uffff\2\23\2\uffff\4\23\1\uffff\1\23\1"+
            "\uffff\1\23\1\uffff\13\23\2\uffff\1\23\3\uffff\2\23",
            "\3\23\5\uffff\3\23\1\uffff\1\23\4\uffff\1\23\2\uffff\2\23\3"+
            "\uffff\2\23\2\uffff\1\23\1\uffff\1\23\3\uffff\1\23\1\uffff\1"+
            "\23\1\uffff\2\23\4\uffff\3\23\2\uffff\1\23\1\uffff\3\23\2\uffff"+
            "\1\23\2\uffff\1\35\2\uffff\2\23\7\uffff\2\23\5\uffff\1\23\4"+
            "\uffff\2\23\1\uffff\1\23\4\uffff\1\23\3\uffff\1\23\3\uffff\2"+
            "\23\6\uffff\1\23\6\uffff\1\23\5\uffff\2\23\4\uffff\1\23\1\uffff"+
            "\1\23\6\uffff\1\35\1\23\17\uffff\2\23\2\uffff\4\23\1\uffff\1"+
            "\23\1\uffff\1\23\1\uffff\13\23\2\uffff\1\23\3\uffff\2\23",
            "\3\23\5\uffff\3\23\1\uffff\1\23\4\uffff\1\23\2\uffff\2\23\3"+
            "\uffff\2\23\2\uffff\1\23\1\uffff\1\23\3\uffff\1\23\1\uffff\1"+
            "\23\1\uffff\2\23\4\uffff\3\23\2\uffff\1\23\1\uffff\3\23\2\uffff"+
            "\1\23\5\uffff\2\23\7\uffff\2\23\5\uffff\1\23\4\uffff\2\23\1"+
            "\uffff\1\23\4\uffff\1\23\3\uffff\1\23\3\uffff\2\23\6\uffff\1"+
            "\23\6\uffff\1\23\5\uffff\2\23\4\uffff\1\23\1\uffff\1\23\7\uffff"+
            "\1\23\17\uffff\2\23\1\36\1\uffff\4\23\1\uffff\1\23\1\uffff\1"+
            "\23\1\uffff\13\23\2\uffff\1\23\3\uffff\2\23",
            "\3\23\5\uffff\3\23\1\uffff\1\23\4\uffff\1\23\2\uffff\2\23\3"+
            "\uffff\2\23\2\uffff\1\23\1\uffff\1\23\3\uffff\1\23\1\uffff\1"+
            "\23\1\uffff\2\23\4\uffff\3\23\2\uffff\1\23\1\uffff\3\23\2\uffff"+
            "\1\23\5\uffff\2\23\7\uffff\2\23\5\uffff\1\23\4\uffff\2\23\1"+
            "\uffff\1\23\4\uffff\1\23\3\uffff\1\23\3\uffff\2\23\6\uffff\1"+
            "\23\6\uffff\1\23\5\uffff\2\23\4\uffff\1\23\1\uffff\1\23\7\uffff"+
            "\1\23\17\uffff\2\23\1\uffff\1\37\4\23\1\uffff\1\23\1\uffff\1"+
            "\23\1\uffff\13\23\2\uffff\1\23\3\uffff\2\23",
            "\3\23\5\uffff\3\23\1\uffff\1\23\4\uffff\1\23\2\uffff\2\23\3"+
            "\uffff\2\23\2\uffff\1\23\1\uffff\1\23\3\uffff\1\23\1\uffff\1"+
            "\23\1\uffff\2\23\4\uffff\3\23\2\uffff\1\23\1\uffff\3\23\2\uffff"+
            "\1\23\5\uffff\2\23\7\uffff\2\23\5\uffff\1\23\4\uffff\2\23\1"+
            "\uffff\1\23\4\uffff\1\23\3\uffff\1\23\3\uffff\2\23\6\uffff\1"+
            "\23\6\uffff\1\23\5\uffff\2\23\4\uffff\1\23\1\uffff\1\23\7\uffff"+
            "\1\23\17\uffff\2\23\1\40\1\uffff\4\23\1\uffff\1\23\1\uffff\1"+
            "\23\1\uffff\13\23\2\uffff\1\23\3\uffff\2\23",
            "\3\23\5\uffff\3\23\1\uffff\1\23\4\uffff\1\23\2\uffff\2\23\3"+
            "\uffff\2\23\2\uffff\1\23\1\uffff\1\23\3\uffff\1\23\1\uffff\1"+
            "\23\1\uffff\2\23\4\uffff\3\23\2\uffff\1\23\1\uffff\3\23\2\uffff"+
            "\1\23\5\uffff\2\23\7\uffff\2\23\5\uffff\1\23\4\uffff\2\23\1"+
            "\uffff\1\23\4\uffff\1\23\3\uffff\1\23\3\uffff\2\23\6\uffff\1"+
            "\23\6\uffff\1\23\5\uffff\2\23\4\uffff\1\23\1\uffff\1\23\7\uffff"+
            "\1\23\3\uffff\1\41\13\uffff\2\23\2\uffff\4\23\1\uffff\1\23\1"+
            "\uffff\1\23\1\uffff\13\23\2\uffff\1\23\3\uffff\2\23",
            "\3\23\5\uffff\3\23\1\uffff\1\23\4\uffff\1\23\2\uffff\2\23\3"+
            "\uffff\2\23\2\uffff\1\23\1\uffff\1\23\3\uffff\1\23\1\uffff\1"+
            "\23\1\uffff\2\23\4\uffff\3\23\2\uffff\1\23\1\uffff\3\23\2\uffff"+
            "\1\23\5\uffff\2\23\7\uffff\2\23\5\uffff\1\23\4\uffff\2\23\1"+
            "\uffff\1\23\4\uffff\1\23\3\uffff\1\23\3\uffff\2\23\6\uffff\1"+
            "\23\6\uffff\1\23\5\uffff\2\23\4\uffff\1\23\1\uffff\1\23\7\uffff"+
            "\1\23\17\uffff\1\42\1\23\2\uffff\4\23\1\uffff\1\23\1\uffff\1"+
            "\23\1\uffff\13\23\2\uffff\1\23\3\uffff\2\23",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };

    static final short[] DFA49_eot = DFA.unpackEncodedString(DFA49_eotS);
    static final short[] DFA49_eof = DFA.unpackEncodedString(DFA49_eofS);
    static final char[] DFA49_min = DFA.unpackEncodedStringToUnsignedChars(DFA49_minS);
    static final char[] DFA49_max = DFA.unpackEncodedStringToUnsignedChars(DFA49_maxS);
    static final short[] DFA49_accept = DFA.unpackEncodedString(DFA49_acceptS);
    static final short[] DFA49_special = DFA.unpackEncodedString(DFA49_specialS);
    static final short[][] DFA49_transition;

    static {
        int numStates = DFA49_transitionS.length;
        DFA49_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA49_transition[i] = DFA.unpackEncodedString(DFA49_transitionS[i]);
        }
    }

    class DFA49 extends DFA {

        public DFA49(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 49;
            this.eot = DFA49_eot;
            this.eof = DFA49_eof;
            this.min = DFA49_min;
            this.max = DFA49_max;
            this.accept = DFA49_accept;
            this.special = DFA49_special;
            this.transition = DFA49_transition;
        }
        public String getDescription() {
            return "390:1: p_ExprSingle : ( p_FLWORExpr | p_QuantifiedExpr | p_TypeswitchExpr | p_IfExpr | p_TryCatchExpr | {...}? => p_EvalExpr | {...}? => p_InsertExpr | {...}? => p_DeleteExpr | {...}? => p_RenameExpr | {...}? => p_ReplaceExpr | {...}? => p_TransformExpr | {...}? => p_BlockExpr | {...}? => p_AssignmentExpr | {...}? => p_ExitExpr | {...}? => p_WhileExpr | p_OrExpr );";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA49_13 = input.LA(1);

                         
                        int index49_13 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA49_13==NODE||LA49_13==VALUE) && ((lc(XQU)))) {s = 29;}

                        else if ( (LA49_13==EOF||(LA49_13>=AND && LA49_13<=ASCENDING)||(LA49_13>=CASE && LA49_13<=CASTABLE)||LA49_13==COLLATION||LA49_13==DEFAULT||(LA49_13>=DESCENDING && LA49_13<=DIV)||(LA49_13>=ELSE && LA49_13<=EMPTY)||LA49_13==EQ||LA49_13==EXCEPT||LA49_13==FOR||LA49_13==GE||(LA49_13>=GT && LA49_13<=IDIV)||(LA49_13>=INSTANCE && LA49_13<=IS)||LA49_13==LE||(LA49_13>=LET && LA49_13<=MOD)||LA49_13==NE||(LA49_13>=OR && LA49_13<=ORDER)||(LA49_13>=RETURN && LA49_13<=SATISFIES)||LA49_13==STABLE||(LA49_13>=TO && LA49_13<=TREAT)||LA49_13==UNION||LA49_13==WHERE||LA49_13==COUNT||(LA49_13>=END && LA49_13<=GROUP)||LA49_13==ONLY||LA49_13==START||(LA49_13>=AFTER && LA49_13<=BEFORE)||LA49_13==INTO||LA49_13==MODIFY||LA49_13==WITH||(LA49_13>=LPAREN && LA49_13<=RPAREN)||(LA49_13>=RBRACKET && LA49_13<=EQUAL)||LA49_13==NOTEQUAL||LA49_13==COMMA||(LA49_13>=STAR && LA49_13<=SLASH_SLASH)||LA49_13==COLON||(LA49_13>=SEMICOLON && LA49_13<=VBAR)) ) {s = 19;}

                         
                        input.seek(index49_13);
                        if ( s>=0 ) return s;
                        break;
                    case 1 : 
                        int LA49_15 = input.LA(1);

                         
                        int index49_15 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA49_15==LBRACKET) && ((lc(XQS)))) {s = 31;}

                        else if ( (LA49_15==EOF||(LA49_15>=AND && LA49_15<=ASCENDING)||(LA49_15>=CASE && LA49_15<=CASTABLE)||LA49_15==COLLATION||LA49_15==DEFAULT||(LA49_15>=DESCENDING && LA49_15<=DIV)||(LA49_15>=ELSE && LA49_15<=EMPTY)||LA49_15==EQ||LA49_15==EXCEPT||LA49_15==FOR||LA49_15==GE||(LA49_15>=GT && LA49_15<=IDIV)||(LA49_15>=INSTANCE && LA49_15<=IS)||LA49_15==LE||(LA49_15>=LET && LA49_15<=MOD)||LA49_15==NE||(LA49_15>=OR && LA49_15<=ORDER)||(LA49_15>=RETURN && LA49_15<=SATISFIES)||LA49_15==STABLE||(LA49_15>=TO && LA49_15<=TREAT)||LA49_15==UNION||LA49_15==WHERE||LA49_15==COUNT||(LA49_15>=END && LA49_15<=GROUP)||LA49_15==ONLY||LA49_15==START||(LA49_15>=AFTER && LA49_15<=BEFORE)||LA49_15==INTO||LA49_15==MODIFY||LA49_15==WITH||(LA49_15>=LPAREN && LA49_15<=RPAREN)||(LA49_15>=RBRACKET && LA49_15<=EQUAL)||LA49_15==NOTEQUAL||LA49_15==COMMA||(LA49_15>=STAR && LA49_15<=SLASH_SLASH)||LA49_15==COLON||(LA49_15>=SEMICOLON && LA49_15<=VBAR)) ) {s = 19;}

                         
                        input.seek(index49_15);
                        if ( s>=0 ) return s;
                        break;
                    case 2 : 
                        int LA49_18 = input.LA(1);

                         
                        int index49_18 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA49_18==LPAREN) && ((lc(XQS)))) {s = 34;}

                        else if ( (LA49_18==EOF||(LA49_18>=AND && LA49_18<=ASCENDING)||(LA49_18>=CASE && LA49_18<=CASTABLE)||LA49_18==COLLATION||LA49_18==DEFAULT||(LA49_18>=DESCENDING && LA49_18<=DIV)||(LA49_18>=ELSE && LA49_18<=EMPTY)||LA49_18==EQ||LA49_18==EXCEPT||LA49_18==FOR||LA49_18==GE||(LA49_18>=GT && LA49_18<=IDIV)||(LA49_18>=INSTANCE && LA49_18<=IS)||LA49_18==LE||(LA49_18>=LET && LA49_18<=MOD)||LA49_18==NE||(LA49_18>=OR && LA49_18<=ORDER)||(LA49_18>=RETURN && LA49_18<=SATISFIES)||LA49_18==STABLE||(LA49_18>=TO && LA49_18<=TREAT)||LA49_18==UNION||LA49_18==WHERE||LA49_18==COUNT||(LA49_18>=END && LA49_18<=GROUP)||LA49_18==ONLY||LA49_18==START||(LA49_18>=AFTER && LA49_18<=BEFORE)||LA49_18==INTO||LA49_18==MODIFY||LA49_18==WITH||LA49_18==RPAREN||(LA49_18>=RBRACKET && LA49_18<=EQUAL)||LA49_18==NOTEQUAL||LA49_18==COMMA||(LA49_18>=STAR && LA49_18<=SLASH_SLASH)||LA49_18==COLON||(LA49_18>=SEMICOLON && LA49_18<=VBAR)) ) {s = 19;}

                         
                        input.seek(index49_18);
                        if ( s>=0 ) return s;
                        break;
                    case 3 : 
                        int LA49_16 = input.LA(1);

                         
                        int index49_16 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA49_16==EOF||(LA49_16>=AND && LA49_16<=ASCENDING)||(LA49_16>=CASE && LA49_16<=CASTABLE)||LA49_16==COLLATION||LA49_16==DEFAULT||(LA49_16>=DESCENDING && LA49_16<=DIV)||(LA49_16>=ELSE && LA49_16<=EMPTY)||LA49_16==EQ||LA49_16==EXCEPT||LA49_16==FOR||LA49_16==GE||(LA49_16>=GT && LA49_16<=IDIV)||(LA49_16>=INSTANCE && LA49_16<=IS)||LA49_16==LE||(LA49_16>=LET && LA49_16<=MOD)||LA49_16==NE||(LA49_16>=OR && LA49_16<=ORDER)||(LA49_16>=RETURN && LA49_16<=SATISFIES)||LA49_16==STABLE||(LA49_16>=TO && LA49_16<=TREAT)||LA49_16==UNION||LA49_16==WHERE||LA49_16==COUNT||(LA49_16>=END && LA49_16<=GROUP)||LA49_16==ONLY||LA49_16==START||(LA49_16>=AFTER && LA49_16<=BEFORE)||LA49_16==INTO||LA49_16==MODIFY||LA49_16==WITH||(LA49_16>=LPAREN && LA49_16<=RPAREN)||(LA49_16>=RBRACKET && LA49_16<=EQUAL)||LA49_16==NOTEQUAL||LA49_16==COMMA||(LA49_16>=STAR && LA49_16<=SLASH_SLASH)||LA49_16==COLON||(LA49_16>=SEMICOLON && LA49_16<=VBAR)) ) {s = 19;}

                        else if ( (LA49_16==DOLLAR) && ((lc(XQS)))) {s = 32;}

                         
                        input.seek(index49_16);
                        if ( s>=0 ) return s;
                        break;
                    case 4 : 
                        int LA49_11 = input.LA(1);

                         
                        int index49_11 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA49_11==EOF||(LA49_11>=AND && LA49_11<=ASCENDING)||(LA49_11>=CASE && LA49_11<=CASTABLE)||LA49_11==COLLATION||LA49_11==DEFAULT||(LA49_11>=DESCENDING && LA49_11<=DIV)||(LA49_11>=ELSE && LA49_11<=EMPTY)||LA49_11==EQ||LA49_11==EXCEPT||LA49_11==FOR||LA49_11==GE||(LA49_11>=GT && LA49_11<=IDIV)||(LA49_11>=INSTANCE && LA49_11<=IS)||LA49_11==LE||(LA49_11>=LET && LA49_11<=MOD)||LA49_11==NE||(LA49_11>=OR && LA49_11<=ORDER)||(LA49_11>=RETURN && LA49_11<=SATISFIES)||LA49_11==STABLE||(LA49_11>=TO && LA49_11<=TREAT)||LA49_11==UNION||LA49_11==WHERE||LA49_11==COUNT||(LA49_11>=END && LA49_11<=GROUP)||LA49_11==ONLY||LA49_11==START||(LA49_11>=AFTER && LA49_11<=BEFORE)||LA49_11==INTO||LA49_11==MODIFY||LA49_11==WITH||(LA49_11>=LPAREN && LA49_11<=RPAREN)||(LA49_11>=RBRACKET && LA49_11<=EQUAL)||LA49_11==NOTEQUAL||LA49_11==COMMA||(LA49_11>=STAR && LA49_11<=SLASH_SLASH)||LA49_11==COLON||(LA49_11>=SEMICOLON && LA49_11<=VBAR)) ) {s = 19;}

                        else if ( (LA49_11==NODE||LA49_11==NODES) && ((lc(XQU)))) {s = 27;}

                         
                        input.seek(index49_11);
                        if ( s>=0 ) return s;
                        break;
                    case 5 : 
                        int LA49_9 = input.LA(1);

                         
                        int index49_9 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA49_9==EOF||(LA49_9>=AND && LA49_9<=ASCENDING)||(LA49_9>=CASE && LA49_9<=CASTABLE)||LA49_9==COLLATION||LA49_9==DEFAULT||(LA49_9>=DESCENDING && LA49_9<=DIV)||(LA49_9>=ELSE && LA49_9<=EMPTY)||LA49_9==EQ||LA49_9==EXCEPT||LA49_9==FOR||LA49_9==GE||(LA49_9>=GT && LA49_9<=IDIV)||(LA49_9>=INSTANCE && LA49_9<=IS)||LA49_9==LE||(LA49_9>=LET && LA49_9<=MOD)||LA49_9==NE||(LA49_9>=OR && LA49_9<=ORDER)||(LA49_9>=RETURN && LA49_9<=SATISFIES)||LA49_9==STABLE||(LA49_9>=TO && LA49_9<=TREAT)||LA49_9==UNION||LA49_9==WHERE||LA49_9==COUNT||(LA49_9>=END && LA49_9<=GROUP)||LA49_9==ONLY||LA49_9==START||(LA49_9>=AFTER && LA49_9<=BEFORE)||LA49_9==INTO||LA49_9==MODIFY||LA49_9==WITH||(LA49_9>=LPAREN && LA49_9<=RPAREN)||(LA49_9>=RBRACKET && LA49_9<=EQUAL)||LA49_9==NOTEQUAL||LA49_9==COMMA||(LA49_9>=STAR && LA49_9<=SLASH_SLASH)||LA49_9==COLON||(LA49_9>=SEMICOLON && LA49_9<=VBAR)) ) {s = 19;}

                        else if ( (LA49_9==LBRACKET) && ((lc(ZORBA)))) {s = 25;}

                         
                        input.seek(index49_9);
                        if ( s>=0 ) return s;
                        break;
                    case 6 : 
                        int LA49_12 = input.LA(1);

                         
                        int index49_12 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA49_12==NODE) && ((lc(XQU)))) {s = 28;}

                        else if ( (LA49_12==EOF||(LA49_12>=AND && LA49_12<=ASCENDING)||(LA49_12>=CASE && LA49_12<=CASTABLE)||LA49_12==COLLATION||LA49_12==DEFAULT||(LA49_12>=DESCENDING && LA49_12<=DIV)||(LA49_12>=ELSE && LA49_12<=EMPTY)||LA49_12==EQ||LA49_12==EXCEPT||LA49_12==FOR||LA49_12==GE||(LA49_12>=GT && LA49_12<=IDIV)||(LA49_12>=INSTANCE && LA49_12<=IS)||LA49_12==LE||(LA49_12>=LET && LA49_12<=MOD)||LA49_12==NE||(LA49_12>=OR && LA49_12<=ORDER)||(LA49_12>=RETURN && LA49_12<=SATISFIES)||LA49_12==STABLE||(LA49_12>=TO && LA49_12<=TREAT)||LA49_12==UNION||LA49_12==WHERE||LA49_12==COUNT||(LA49_12>=END && LA49_12<=GROUP)||LA49_12==ONLY||LA49_12==START||(LA49_12>=AFTER && LA49_12<=BEFORE)||LA49_12==INTO||LA49_12==MODIFY||LA49_12==WITH||(LA49_12>=LPAREN && LA49_12<=RPAREN)||(LA49_12>=RBRACKET && LA49_12<=EQUAL)||LA49_12==NOTEQUAL||LA49_12==COMMA||(LA49_12>=STAR && LA49_12<=SLASH_SLASH)||LA49_12==COLON||(LA49_12>=SEMICOLON && LA49_12<=VBAR)) ) {s = 19;}

                         
                        input.seek(index49_12);
                        if ( s>=0 ) return s;
                        break;
                    case 7 : 
                        int LA49_14 = input.LA(1);

                         
                        int index49_14 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA49_14==DOLLAR) && ((lc(XQU)))) {s = 30;}

                        else if ( (LA49_14==EOF||(LA49_14>=AND && LA49_14<=ASCENDING)||(LA49_14>=CASE && LA49_14<=CASTABLE)||LA49_14==COLLATION||LA49_14==DEFAULT||(LA49_14>=DESCENDING && LA49_14<=DIV)||(LA49_14>=ELSE && LA49_14<=EMPTY)||LA49_14==EQ||LA49_14==EXCEPT||LA49_14==FOR||LA49_14==GE||(LA49_14>=GT && LA49_14<=IDIV)||(LA49_14>=INSTANCE && LA49_14<=IS)||LA49_14==LE||(LA49_14>=LET && LA49_14<=MOD)||LA49_14==NE||(LA49_14>=OR && LA49_14<=ORDER)||(LA49_14>=RETURN && LA49_14<=SATISFIES)||LA49_14==STABLE||(LA49_14>=TO && LA49_14<=TREAT)||LA49_14==UNION||LA49_14==WHERE||LA49_14==COUNT||(LA49_14>=END && LA49_14<=GROUP)||LA49_14==ONLY||LA49_14==START||(LA49_14>=AFTER && LA49_14<=BEFORE)||LA49_14==INTO||LA49_14==MODIFY||LA49_14==WITH||(LA49_14>=LPAREN && LA49_14<=RPAREN)||(LA49_14>=RBRACKET && LA49_14<=EQUAL)||LA49_14==NOTEQUAL||LA49_14==COMMA||(LA49_14>=STAR && LA49_14<=SLASH_SLASH)||LA49_14==COLON||(LA49_14>=SEMICOLON && LA49_14<=VBAR)) ) {s = 19;}

                         
                        input.seek(index49_14);
                        if ( s>=0 ) return s;
                        break;
                    case 8 : 
                        int LA49_17 = input.LA(1);

                         
                        int index49_17 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA49_17==RETURNING) && ((lc(XQS)))) {s = 33;}

                        else if ( (LA49_17==EOF||(LA49_17>=AND && LA49_17<=ASCENDING)||(LA49_17>=CASE && LA49_17<=CASTABLE)||LA49_17==COLLATION||LA49_17==DEFAULT||(LA49_17>=DESCENDING && LA49_17<=DIV)||(LA49_17>=ELSE && LA49_17<=EMPTY)||LA49_17==EQ||LA49_17==EXCEPT||LA49_17==FOR||LA49_17==GE||(LA49_17>=GT && LA49_17<=IDIV)||(LA49_17>=INSTANCE && LA49_17<=IS)||LA49_17==LE||(LA49_17>=LET && LA49_17<=MOD)||LA49_17==NE||(LA49_17>=OR && LA49_17<=ORDER)||(LA49_17>=RETURN && LA49_17<=SATISFIES)||LA49_17==STABLE||(LA49_17>=TO && LA49_17<=TREAT)||LA49_17==UNION||LA49_17==WHERE||LA49_17==COUNT||(LA49_17>=END && LA49_17<=GROUP)||LA49_17==ONLY||LA49_17==START||(LA49_17>=AFTER && LA49_17<=BEFORE)||LA49_17==INTO||LA49_17==MODIFY||LA49_17==WITH||(LA49_17>=LPAREN && LA49_17<=RPAREN)||(LA49_17>=RBRACKET && LA49_17<=EQUAL)||LA49_17==NOTEQUAL||LA49_17==COMMA||(LA49_17>=STAR && LA49_17<=SLASH_SLASH)||LA49_17==COLON||(LA49_17>=SEMICOLON && LA49_17<=VBAR)) ) {s = 19;}

                         
                        input.seek(index49_17);
                        if ( s>=0 ) return s;
                        break;
                    case 9 : 
                        int LA49_10 = input.LA(1);

                         
                        int index49_10 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA49_10==NODE||LA49_10==NODES) && ((lc(XQU)))) {s = 26;}

                        else if ( (LA49_10==EOF||(LA49_10>=AND && LA49_10<=ASCENDING)||(LA49_10>=CASE && LA49_10<=CASTABLE)||LA49_10==COLLATION||LA49_10==DEFAULT||(LA49_10>=DESCENDING && LA49_10<=DIV)||(LA49_10>=ELSE && LA49_10<=EMPTY)||LA49_10==EQ||LA49_10==EXCEPT||LA49_10==FOR||LA49_10==GE||(LA49_10>=GT && LA49_10<=IDIV)||(LA49_10>=INSTANCE && LA49_10<=IS)||LA49_10==LE||(LA49_10>=LET && LA49_10<=MOD)||LA49_10==NE||(LA49_10>=OR && LA49_10<=ORDER)||(LA49_10>=RETURN && LA49_10<=SATISFIES)||LA49_10==STABLE||(LA49_10>=TO && LA49_10<=TREAT)||LA49_10==UNION||LA49_10==WHERE||LA49_10==COUNT||(LA49_10>=END && LA49_10<=GROUP)||LA49_10==ONLY||LA49_10==START||(LA49_10>=AFTER && LA49_10<=BEFORE)||LA49_10==INTO||LA49_10==MODIFY||LA49_10==WITH||(LA49_10>=LPAREN && LA49_10<=RPAREN)||(LA49_10>=RBRACKET && LA49_10<=EQUAL)||LA49_10==NOTEQUAL||LA49_10==COMMA||(LA49_10>=STAR && LA49_10<=SLASH_SLASH)||LA49_10==COLON||(LA49_10>=SEMICOLON && LA49_10<=VBAR)) ) {s = 19;}

                         
                        input.seek(index49_10);
                        if ( s>=0 ) return s;
                        break;
                    case 10 : 
                        int LA49_8 = input.LA(1);

                         
                        int index49_8 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA49_8==DOLLAR) && ((lc(ZORBA)))) {s = 25;}

                        else if ( (LA49_8==EOF||(LA49_8>=AND && LA49_8<=ASCENDING)||(LA49_8>=CASE && LA49_8<=CASTABLE)||LA49_8==COLLATION||LA49_8==DEFAULT||(LA49_8>=DESCENDING && LA49_8<=DIV)||(LA49_8>=ELSE && LA49_8<=EMPTY)||LA49_8==EQ||LA49_8==EXCEPT||LA49_8==FOR||LA49_8==GE||(LA49_8>=GT && LA49_8<=IDIV)||(LA49_8>=INSTANCE && LA49_8<=IS)||LA49_8==LE||(LA49_8>=LET && LA49_8<=MOD)||LA49_8==NE||(LA49_8>=OR && LA49_8<=ORDER)||(LA49_8>=RETURN && LA49_8<=SATISFIES)||LA49_8==STABLE||(LA49_8>=TO && LA49_8<=TREAT)||LA49_8==UNION||LA49_8==WHERE||LA49_8==COUNT||(LA49_8>=END && LA49_8<=GROUP)||LA49_8==ONLY||LA49_8==START||(LA49_8>=AFTER && LA49_8<=BEFORE)||LA49_8==INTO||LA49_8==MODIFY||LA49_8==WITH||(LA49_8>=LPAREN && LA49_8<=RPAREN)||(LA49_8>=RBRACKET && LA49_8<=EQUAL)||LA49_8==NOTEQUAL||LA49_8==COMMA||(LA49_8>=STAR && LA49_8<=SLASH_SLASH)||LA49_8==COLON||(LA49_8>=SEMICOLON && LA49_8<=VBAR)) ) {s = 19;}

                         
                        input.seek(index49_8);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 49, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static final String DFA103_eotS =
        "\56\uffff";
    static final String DFA103_eofS =
        "\56\uffff";
    static final String DFA103_minS =
        "\1\20\55\uffff";
    static final String DFA103_maxS =
        "\1\u00e4\55\uffff";
    static final String DFA103_acceptS =
        "\1\uffff\1\1\1\2\52\uffff\1\3";
    static final String DFA103_specialS =
        "\56\uffff}>";
    static final String[] DFA103_transitionS = {
            "\133\2\1\1\63\2\1\uffff\14\2\1\uffff\1\2\12\uffff\1\2\2\uffff"+
            "\1\2\5\uffff\4\2\14\uffff\1\2\2\uffff\2\2\2\uffff\1\2\6\uffff"+
            "\1\55\5\2",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };

    static final short[] DFA103_eot = DFA.unpackEncodedString(DFA103_eotS);
    static final short[] DFA103_eof = DFA.unpackEncodedString(DFA103_eofS);
    static final char[] DFA103_min = DFA.unpackEncodedStringToUnsignedChars(DFA103_minS);
    static final char[] DFA103_max = DFA.unpackEncodedStringToUnsignedChars(DFA103_maxS);
    static final short[] DFA103_accept = DFA.unpackEncodedString(DFA103_acceptS);
    static final short[] DFA103_special = DFA.unpackEncodedString(DFA103_specialS);
    static final short[][] DFA103_transition;

    static {
        int numStates = DFA103_transitionS.length;
        DFA103_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA103_transition[i] = DFA.unpackEncodedString(DFA103_transitionS[i]);
        }
    }

    class DFA103 extends DFA {

        public DFA103(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 103;
            this.eot = DFA103_eot;
            this.eof = DFA103_eof;
            this.min = DFA103_min;
            this.max = DFA103_max;
            this.accept = DFA103_accept;
            this.special = DFA103_special;
            this.transition = DFA103_transition;
        }
        public String getDescription() {
            return "618:1: p_ValueExpr : ( p_ValidateExpr | p_PathExpr | p_ExtensionExpr );";
        }
    }
    static final String DFA110_eotS =
        "\56\uffff";
    static final String DFA110_eofS =
        "\56\uffff";
    static final String DFA110_minS =
        "\1\20\1\0\54\uffff";
    static final String DFA110_maxS =
        "\1\u00e4\1\0\54\uffff";
    static final String DFA110_acceptS =
        "\2\uffff\1\3\1\4\50\uffff\1\1\1\2";
    static final String DFA110_specialS =
        "\1\uffff\1\0\54\uffff}>";
    static final String[] DFA110_transitionS = {
            "\u008f\3\1\uffff\14\3\1\uffff\1\3\12\uffff\1\3\2\uffff\1\3\5"+
            "\uffff\1\1\1\2\2\3\14\uffff\1\3\2\uffff\2\3\2\uffff\1\3\7\uffff"+
            "\5\3",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };

    static final short[] DFA110_eot = DFA.unpackEncodedString(DFA110_eotS);
    static final short[] DFA110_eof = DFA.unpackEncodedString(DFA110_eofS);
    static final char[] DFA110_min = DFA.unpackEncodedStringToUnsignedChars(DFA110_minS);
    static final char[] DFA110_max = DFA.unpackEncodedStringToUnsignedChars(DFA110_maxS);
    static final short[] DFA110_accept = DFA.unpackEncodedString(DFA110_acceptS);
    static final short[] DFA110_special = DFA.unpackEncodedString(DFA110_specialS);
    static final short[][] DFA110_transition;

    static {
        int numStates = DFA110_transitionS.length;
        DFA110_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA110_transition[i] = DFA.unpackEncodedString(DFA110_transitionS[i]);
        }
    }

    class DFA110 extends DFA {

        public DFA110(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 110;
            this.eot = DFA110_eot;
            this.eof = DFA110_eof;
            this.min = DFA110_min;
            this.max = DFA110_max;
            this.accept = DFA110_accept;
            this.special = DFA110_special;
            this.transition = DFA110_transition;
        }
        public String getDescription() {
            return "662:1: p_PathExpr : ( ( SLASH p_RelativePathExpr )=> ( SLASH p_RelativePathExpr ) | SLASH | SLASH_SLASH p_RelativePathExpr | p_RelativePathExpr );";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA110_1 = input.LA(1);

                         
                        int index110_1 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred1_XQueryParser()) ) {s = 44;}

                        else if ( (true) ) {s = 45;}

                         
                        input.seek(index110_1);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 110, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static final String DFA112_eotS =
        "\u00d3\uffff";
    static final String DFA112_eofS =
        "\1\uffff\5\6\1\uffff\15\6\1\uffff\5\6\u00b8\uffff\1\6";
    static final String DFA112_minS =
        "\1\20\5\22\1\uffff\2\22\1\20\4\22\2\20\4\22\1\uffff\2\22\1\20\2"+
        "\22\1\20\3\23\1\117\20\20\1\u0084\1\u00ad\1\20\2\31\1\122\1\u00ad"+
        "\1\20\1\25\1\166\1\25\2\36\1\70\1\u00ae\1\20\1\132\10\20\3\23\1"+
        "\117\20\20\1\u0084\1\u00ad\1\20\2\31\1\122\1\u00ad\1\20\1\25\1\166"+
        "\1\25\2\36\1\70\1\u00ae\1\20\1\132\10\20\3\23\1\117\20\20\1\u0084"+
        "\1\u00ad\1\20\2\31\1\122\1\u00ad\1\20\1\25\1\166\1\25\2\36\1\70"+
        "\1\u00ae\1\20\1\132\11\20\3\23\1\117\20\20\1\u0084\1\u00ad\1\20"+
        "\2\31\1\122\1\u00ad\1\20\1\25\1\166\1\25\2\36\1\70\1\u00ae\1\20"+
        "\1\132\10\20\2\uffff\1\22";
    static final String DFA112_maxS =
        "\1\u00e4\5\u00ca\1\uffff\2\u00ca\1\u00d8\4\u00ca\2\u00d8\4\u00ca"+
        "\1\uffff\2\u00ca\1\u00d8\2\u00ca\1\u00d8\4\u00c5\20\u00e4\2\u00c5"+
        "\1\u00e4\4\u00c5\1\u00e4\6\u00c5\1\u00d5\1\u00e4\1\u00c5\1\u00d8"+
        "\7\u00e4\4\u00c5\20\u00e4\2\u00c5\1\u00e4\4\u00c5\1\u00e4\6\u00c5"+
        "\1\u00d5\1\u00e4\1\u00c5\1\u00d8\7\u00e4\4\u00ae\20\u00e4\2\u00ae"+
        "\1\u00e4\4\u00ae\1\u00e4\3\u00ae\2\u00b6\1\u00ae\1\u00d5\1\u00e4"+
        "\1\u00ae\1\u00d8\7\u00e4\1\u00d8\4\u00ae\20\u00e4\2\u00ae\1\u00e4"+
        "\4\u00ae\1\u00e4\3\u00ae\2\u00b6\1\u00ae\1\u00d5\1\u00e4\1\u00ae"+
        "\1\u00d8\7\u00e4\2\uffff\1\u00ca";
    static final String DFA112_acceptS =
        "\6\uffff\1\1\15\uffff\1\2\u00bb\uffff\2\2\1\uffff";
    static final String DFA112_specialS =
        "\30\uffff\1\0\u00ba\uffff}>";
    static final String[] DFA112_transitionS = {
            "\1\2\1\5\4\31\1\11\6\31\1\7\1\31\1\20\4\31\1\10\1\13\2\31\1"+
            "\26\1\6\1\16\2\31\1\6\5\31\1\15\1\14\6\31\1\6\6\31\1\6\7\31"+
            "\1\27\3\31\1\6\4\31\1\23\1\31\1\1\1\4\1\3\1\31\1\17\3\31\2\6"+
            "\1\12\4\31\1\21\3\31\1\6\1\31\1\25\20\31\1\6\43\31\1\uffff\3"+
            "\31\1\6\2\31\1\30\4\31\1\24\1\uffff\1\24\12\uffff\1\6\2\uffff"+
            "\1\24\7\uffff\1\24\1\6\14\uffff\1\6\2\uffff\2\24\2\uffff\1\22"+
            "\7\uffff\5\24",
            "\3\6\5\uffff\3\6\1\uffff\1\6\4\uffff\1\6\2\uffff\2\6\3\uffff"+
            "\2\6\2\uffff\1\6\1\uffff\1\6\3\uffff\1\6\1\uffff\1\6\1\uffff"+
            "\2\6\4\uffff\3\6\2\uffff\1\6\1\uffff\3\6\2\uffff\1\6\5\uffff"+
            "\2\6\7\uffff\2\6\5\uffff\1\6\4\uffff\2\6\1\uffff\1\6\4\uffff"+
            "\1\6\3\uffff\1\6\3\uffff\2\6\6\uffff\1\6\6\uffff\1\6\5\uffff"+
            "\2\6\4\uffff\1\6\1\uffff\1\6\7\uffff\1\6\17\uffff\1\24\1\6\2"+
            "\uffff\4\6\1\uffff\1\6\1\uffff\1\6\1\uffff\13\6\2\uffff\1\32"+
            "\1\6\2\uffff\2\6",
            "\3\6\5\uffff\3\6\1\uffff\1\6\4\uffff\1\6\2\uffff\2\6\3\uffff"+
            "\2\6\2\uffff\1\6\1\uffff\1\6\3\uffff\1\6\1\uffff\1\6\1\uffff"+
            "\2\6\4\uffff\3\6\2\uffff\1\6\1\uffff\3\6\2\uffff\1\6\5\uffff"+
            "\2\6\7\uffff\2\6\5\uffff\1\6\4\uffff\2\6\1\uffff\1\6\4\uffff"+
            "\1\6\3\uffff\1\6\3\uffff\2\6\6\uffff\1\6\6\uffff\1\6\5\uffff"+
            "\2\6\4\uffff\1\6\1\uffff\1\6\7\uffff\1\6\17\uffff\1\24\1\6\2"+
            "\uffff\4\6\1\uffff\1\6\1\uffff\1\6\1\uffff\13\6\2\uffff\1\32"+
            "\1\6\2\uffff\2\6",
            "\3\6\5\uffff\3\6\1\uffff\1\6\4\uffff\1\6\2\uffff\2\6\3\uffff"+
            "\2\6\2\uffff\1\6\1\uffff\1\6\3\uffff\1\6\1\uffff\1\6\1\uffff"+
            "\2\6\4\uffff\3\6\2\uffff\1\6\1\uffff\3\6\2\uffff\1\6\5\uffff"+
            "\2\6\7\uffff\2\6\5\uffff\1\6\4\uffff\2\6\1\uffff\1\6\4\uffff"+
            "\1\6\3\uffff\1\6\3\uffff\2\6\6\uffff\1\6\6\uffff\1\6\5\uffff"+
            "\2\6\4\uffff\1\6\1\uffff\1\6\7\uffff\1\6\17\uffff\1\24\1\6\2"+
            "\uffff\4\6\1\uffff\1\6\1\uffff\1\6\1\uffff\13\6\2\uffff\1\32"+
            "\1\6\2\uffff\2\6",
            "\3\6\5\uffff\3\6\1\uffff\1\6\4\uffff\1\6\2\uffff\2\6\3\uffff"+
            "\2\6\2\uffff\1\6\1\uffff\1\6\3\uffff\1\6\1\uffff\1\6\1\uffff"+
            "\2\6\4\uffff\3\6\2\uffff\1\6\1\uffff\3\6\2\uffff\1\6\5\uffff"+
            "\2\6\7\uffff\2\6\5\uffff\1\6\4\uffff\2\6\1\uffff\1\6\4\uffff"+
            "\1\6\3\uffff\1\6\3\uffff\2\6\6\uffff\1\6\6\uffff\1\6\5\uffff"+
            "\2\6\4\uffff\1\6\1\uffff\1\6\7\uffff\1\6\17\uffff\1\24\1\6\2"+
            "\uffff\4\6\1\uffff\1\6\1\uffff\1\6\1\uffff\13\6\2\uffff\1\32"+
            "\1\6\2\uffff\2\6",
            "\3\6\5\uffff\3\6\1\uffff\1\6\4\uffff\1\6\2\uffff\2\6\3\uffff"+
            "\2\6\2\uffff\1\6\1\uffff\1\6\3\uffff\1\6\1\uffff\1\6\1\uffff"+
            "\2\6\4\uffff\3\6\2\uffff\1\6\1\uffff\3\6\2\uffff\1\6\5\uffff"+
            "\2\6\7\uffff\2\6\5\uffff\1\6\4\uffff\2\6\1\uffff\1\6\4\uffff"+
            "\1\6\3\uffff\1\6\3\uffff\2\6\6\uffff\1\6\6\uffff\1\6\5\uffff"+
            "\2\6\4\uffff\1\6\1\uffff\1\6\7\uffff\1\6\17\uffff\1\24\1\6\2"+
            "\uffff\4\6\1\uffff\1\6\1\uffff\1\6\1\uffff\13\6\2\uffff\1\32"+
            "\1\6\2\uffff\2\6",
            "",
            "\3\6\5\uffff\3\6\1\uffff\1\6\4\uffff\1\6\2\uffff\2\6\3\uffff"+
            "\2\6\2\uffff\1\6\1\uffff\1\6\3\uffff\1\6\1\uffff\1\6\1\uffff"+
            "\2\6\4\uffff\3\6\2\uffff\1\6\1\uffff\3\6\2\uffff\1\6\5\uffff"+
            "\2\6\7\uffff\2\6\5\uffff\1\6\4\uffff\2\6\1\uffff\1\6\4\uffff"+
            "\1\6\3\uffff\1\6\3\uffff\2\6\6\uffff\1\6\6\uffff\1\6\5\uffff"+
            "\2\6\4\uffff\1\6\1\uffff\1\6\7\uffff\1\6\17\uffff\1\24\1\6\2"+
            "\uffff\4\6\1\uffff\1\6\1\uffff\1\6\1\uffff\13\6\2\uffff\1\32"+
            "\1\6\2\uffff\2\6",
            "\3\6\5\uffff\3\6\1\uffff\1\6\4\uffff\1\6\2\uffff\2\6\3\uffff"+
            "\2\6\2\uffff\1\6\1\uffff\1\6\3\uffff\1\6\1\uffff\1\6\1\uffff"+
            "\2\6\4\uffff\3\6\2\uffff\1\6\1\uffff\3\6\2\uffff\1\6\5\uffff"+
            "\2\6\7\uffff\2\6\5\uffff\1\6\4\uffff\2\6\1\uffff\1\6\4\uffff"+
            "\1\6\3\uffff\1\6\3\uffff\2\6\6\uffff\1\6\6\uffff\1\6\5\uffff"+
            "\2\6\4\uffff\1\6\1\uffff\1\6\7\uffff\1\6\17\uffff\1\24\1\6\2"+
            "\uffff\4\6\1\uffff\1\6\1\uffff\1\6\1\uffff\13\6\2\uffff\1\32"+
            "\1\6\2\uffff\2\6",
            "\2\24\1\55\1\103\1\72\5\24\1\100\1\33\1\34\1\24\1\75\4\24\1"+
            "\77\2\24\1\73\1\42\3\24\1\101\1\74\2\24\1\46\1\24\1\40\3\24"+
            "\1\57\1\24\1\53\1\24\1\52\1\43\4\24\1\36\1\37\1\54\2\24\1\51"+
            "\1\24\1\60\1\50\1\44\2\24\1\47\5\24\1\56\1\63\7\24\1\66\1\76"+
            "\5\24\1\64\4\24\1\45\1\35\1\24\1\41\4\24\1\61\3\24\1\65\3\24"+
            "\1\71\1\62\6\24\1\70\6\24\1\67\5\24\1\105\1\106\4\24\1\104\1"+
            "\24\1\107\7\24\1\102\3\24\1\uffff\13\24\2\6\1\uffff\1\24\4\6"+
            "\1\uffff\1\6\1\uffff\1\6\1\uffff\13\6\2\uffff\2\6\2\uffff\2"+
            "\6\15\uffff\1\24",
            "\3\6\5\uffff\3\6\1\uffff\1\6\4\uffff\1\6\2\uffff\2\6\3\uffff"+
            "\2\6\2\uffff\1\6\1\uffff\1\6\3\uffff\1\6\1\uffff\1\6\1\uffff"+
            "\2\6\4\uffff\3\6\2\uffff\1\6\1\uffff\3\6\2\uffff\1\6\5\uffff"+
            "\2\6\7\uffff\2\6\5\uffff\1\6\4\uffff\2\6\1\uffff\1\6\4\uffff"+
            "\1\6\3\uffff\1\6\3\uffff\2\6\6\uffff\1\6\6\uffff\1\6\5\uffff"+
            "\2\6\4\uffff\1\6\1\uffff\1\6\7\uffff\1\6\17\uffff\1\24\1\6\2"+
            "\uffff\4\6\1\uffff\1\6\1\uffff\1\6\1\uffff\13\6\2\uffff\1\32"+
            "\1\6\2\uffff\2\6",
            "\3\6\5\uffff\3\6\1\uffff\1\6\4\uffff\1\6\2\uffff\2\6\3\uffff"+
            "\2\6\2\uffff\1\6\1\uffff\1\6\3\uffff\1\6\1\uffff\1\6\1\uffff"+
            "\2\6\4\uffff\3\6\2\uffff\1\6\1\uffff\3\6\2\uffff\1\6\5\uffff"+
            "\2\6\7\uffff\2\6\5\uffff\1\6\4\uffff\2\6\1\uffff\1\6\4\uffff"+
            "\1\6\3\uffff\1\6\3\uffff\2\6\6\uffff\1\6\6\uffff\1\6\5\uffff"+
            "\2\6\4\uffff\1\6\1\uffff\1\6\7\uffff\1\6\17\uffff\1\24\1\6\2"+
            "\uffff\4\6\1\uffff\1\6\1\uffff\1\6\1\uffff\13\6\2\uffff\1\32"+
            "\1\6\2\uffff\2\6",
            "\3\6\5\uffff\3\6\1\uffff\1\6\4\uffff\1\6\2\uffff\2\6\3\uffff"+
            "\2\6\2\uffff\1\6\1\uffff\1\6\3\uffff\1\6\1\uffff\1\6\1\uffff"+
            "\2\6\4\uffff\3\6\2\uffff\1\6\1\uffff\3\6\2\uffff\1\6\5\uffff"+
            "\2\6\7\uffff\2\6\5\uffff\1\6\4\uffff\2\6\1\uffff\1\6\4\uffff"+
            "\1\6\3\uffff\1\6\3\uffff\2\6\6\uffff\1\6\6\uffff\1\6\5\uffff"+
            "\2\6\4\uffff\1\6\1\uffff\1\6\7\uffff\1\6\17\uffff\1\24\1\6\2"+
            "\uffff\4\6\1\uffff\1\6\1\uffff\1\6\1\uffff\13\6\2\uffff\1\32"+
            "\1\6\2\uffff\2\6",
            "\3\6\5\uffff\3\6\1\uffff\1\6\4\uffff\1\6\2\uffff\2\6\3\uffff"+
            "\2\6\2\uffff\1\6\1\uffff\1\6\3\uffff\1\6\1\uffff\1\6\1\uffff"+
            "\2\6\4\uffff\3\6\2\uffff\1\6\1\uffff\3\6\2\uffff\1\6\5\uffff"+
            "\2\6\7\uffff\2\6\5\uffff\1\6\4\uffff\2\6\1\uffff\1\6\4\uffff"+
            "\1\6\3\uffff\1\6\3\uffff\2\6\6\uffff\1\6\6\uffff\1\6\5\uffff"+
            "\2\6\4\uffff\1\6\1\uffff\1\6\7\uffff\1\6\17\uffff\1\24\1\6\2"+
            "\uffff\4\6\1\uffff\1\6\1\uffff\1\6\1\uffff\13\6\2\uffff\1\32"+
            "\1\6\2\uffff\2\6",
            "\2\24\1\132\1\160\1\147\5\24\1\155\1\110\1\111\1\24\1\152\4"+
            "\24\1\154\2\24\1\150\1\117\3\24\1\156\1\151\2\24\1\123\1\24"+
            "\1\115\3\24\1\134\1\24\1\130\1\24\1\127\1\120\4\24\1\113\1\114"+
            "\1\131\2\24\1\126\1\24\1\135\1\125\1\121\2\24\1\124\5\24\1\133"+
            "\1\140\7\24\1\143\1\153\5\24\1\141\4\24\1\122\1\112\1\24\1\116"+
            "\4\24\1\136\3\24\1\142\3\24\1\146\1\137\6\24\1\145\6\24\1\144"+
            "\5\24\1\162\1\163\4\24\1\161\1\24\1\164\7\24\1\157\3\24\1\uffff"+
            "\13\24\2\6\1\uffff\1\24\4\6\1\uffff\1\6\1\uffff\1\6\1\uffff"+
            "\13\6\2\uffff\1\6\3\uffff\2\6\15\uffff\1\24",
            "\2\24\1\u0087\1\u009d\1\u0094\5\24\1\u009a\1\165\1\166\1\24"+
            "\1\u0097\4\24\1\u0099\2\24\1\u0095\1\174\3\24\1\u009b\1\u0096"+
            "\2\24\1\u0080\1\24\1\172\3\24\1\u0089\1\24\1\u0085\1\24\1\u0084"+
            "\1\175\4\24\1\170\1\171\1\u0086\2\24\1\u0083\1\24\1\u008a\1"+
            "\u0082\1\176\2\24\1\u0081\5\24\1\u0088\1\u008d\7\24\1\u0090"+
            "\1\u0098\5\24\1\u008e\4\24\1\177\1\167\1\24\1\173\4\24\1\u008b"+
            "\3\24\1\u008f\3\24\1\u0093\1\u008c\6\24\1\u0092\6\24\1\u0091"+
            "\5\24\1\u009f\1\u00a0\4\24\1\u009e\1\24\1\u00a1\7\24\1\u009c"+
            "\3\24\1\uffff\13\24\2\6\1\uffff\1\24\4\6\1\uffff\1\6\1\uffff"+
            "\1\6\1\uffff\13\6\2\uffff\1\6\3\uffff\2\6\15\uffff\1\24",
            "\3\6\5\uffff\3\6\1\uffff\1\6\4\uffff\1\6\2\uffff\2\6\3\uffff"+
            "\2\6\2\uffff\1\6\1\uffff\1\6\3\uffff\1\6\1\uffff\1\6\1\uffff"+
            "\2\6\4\uffff\3\6\2\uffff\1\6\1\uffff\3\6\2\uffff\1\6\5\uffff"+
            "\2\6\7\uffff\2\6\5\uffff\1\6\4\uffff\2\6\1\uffff\1\6\4\uffff"+
            "\1\6\3\uffff\1\6\3\uffff\2\6\6\uffff\1\6\6\uffff\1\6\5\uffff"+
            "\2\6\4\uffff\1\6\1\uffff\1\6\7\uffff\1\6\17\uffff\2\6\1\uffff"+
            "\1\24\4\6\1\uffff\1\6\1\uffff\1\6\1\uffff\13\6\2\uffff\1\6\3"+
            "\uffff\2\6",
            "\3\6\5\uffff\3\6\1\uffff\1\6\4\uffff\1\6\2\uffff\2\6\3\uffff"+
            "\2\6\2\uffff\1\6\1\uffff\1\6\3\uffff\1\6\1\uffff\1\6\1\uffff"+
            "\2\6\4\uffff\3\6\2\uffff\1\6\1\uffff\3\6\2\uffff\1\6\5\uffff"+
            "\2\6\7\uffff\2\6\5\uffff\1\6\4\uffff\2\6\1\uffff\1\6\4\uffff"+
            "\1\6\3\uffff\1\6\3\uffff\2\6\6\uffff\1\6\6\uffff\1\6\5\uffff"+
            "\2\6\4\uffff\1\6\1\uffff\1\6\7\uffff\1\6\17\uffff\2\6\1\uffff"+
            "\1\24\4\6\1\uffff\1\6\1\uffff\1\6\1\uffff\13\6\2\uffff\1\6\3"+
            "\uffff\2\6",
            "\3\6\5\uffff\3\6\1\uffff\1\6\4\uffff\1\6\2\uffff\2\6\3\uffff"+
            "\2\6\2\uffff\1\6\1\uffff\1\6\3\uffff\1\6\1\uffff\1\6\1\uffff"+
            "\2\6\4\uffff\3\6\2\uffff\1\6\1\uffff\3\6\2\uffff\1\6\5\uffff"+
            "\2\6\7\uffff\2\6\5\uffff\1\6\4\uffff\2\6\1\uffff\1\6\4\uffff"+
            "\1\6\3\uffff\1\6\3\uffff\2\6\6\uffff\1\6\6\uffff\1\6\5\uffff"+
            "\2\6\4\uffff\1\6\1\uffff\1\6\7\uffff\1\6\17\uffff\1\24\1\6\2"+
            "\uffff\4\6\1\uffff\1\6\1\uffff\1\6\1\uffff\13\6\2\uffff\1\u00a2"+
            "\3\uffff\2\6",
            "\3\6\5\uffff\3\6\1\uffff\1\6\4\uffff\1\6\2\uffff\2\6\3\uffff"+
            "\2\6\2\uffff\1\6\1\uffff\1\6\3\uffff\1\6\1\uffff\1\6\1\uffff"+
            "\2\6\4\uffff\3\6\2\uffff\1\6\1\uffff\3\6\2\uffff\1\6\5\uffff"+
            "\2\6\7\uffff\2\6\5\uffff\1\6\4\uffff\2\6\1\uffff\1\6\4\uffff"+
            "\1\6\3\uffff\1\6\3\uffff\2\6\6\uffff\1\6\6\uffff\1\6\5\uffff"+
            "\2\6\4\uffff\1\6\1\uffff\1\6\7\uffff\1\6\17\uffff\1\24\1\6\1"+
            "\uffff\1\24\4\6\1\uffff\1\6\1\uffff\1\6\1\uffff\13\6\2\uffff"+
            "\1\32\3\uffff\2\6",
            "",
            "\3\6\5\uffff\3\6\1\uffff\1\6\4\uffff\1\6\2\uffff\2\6\3\uffff"+
            "\2\6\2\uffff\1\6\1\uffff\1\6\3\uffff\1\6\1\uffff\1\6\1\uffff"+
            "\2\6\4\uffff\3\6\2\uffff\1\6\1\uffff\3\6\2\uffff\1\6\5\uffff"+
            "\2\6\7\uffff\2\6\5\uffff\1\6\4\uffff\2\6\1\uffff\1\6\4\uffff"+
            "\1\6\3\uffff\1\6\3\uffff\2\6\6\uffff\1\6\6\uffff\1\6\5\uffff"+
            "\2\6\4\uffff\1\6\1\uffff\1\6\7\uffff\1\6\17\uffff\1\24\1\6\1"+
            "\uffff\1\24\4\6\1\uffff\1\6\1\uffff\1\6\1\uffff\13\6\2\uffff"+
            "\1\32\3\uffff\2\6",
            "\3\6\5\uffff\3\6\1\uffff\1\6\4\uffff\1\6\2\uffff\2\6\3\uffff"+
            "\2\6\2\uffff\1\6\1\uffff\1\6\3\uffff\1\6\1\uffff\1\6\1\uffff"+
            "\2\6\4\uffff\3\6\2\uffff\1\6\1\uffff\3\6\2\uffff\1\6\5\uffff"+
            "\2\6\7\uffff\2\6\5\uffff\1\6\4\uffff\2\6\1\uffff\1\6\4\uffff"+
            "\1\6\3\uffff\1\6\3\uffff\2\6\6\uffff\1\6\6\uffff\1\6\5\uffff"+
            "\2\6\4\uffff\1\6\1\uffff\1\6\7\uffff\1\6\17\uffff\1\24\1\6\1"+
            "\uffff\1\24\4\6\1\uffff\1\6\1\uffff\1\6\1\uffff\13\6\2\uffff"+
            "\1\32\3\uffff\2\6",
            "\2\24\1\u00b5\1\u00cb\1\u00c2\5\24\1\u00c8\1\u00a3\1\u00a4"+
            "\1\24\1\u00c5\4\24\1\u00c7\2\24\1\u00c3\1\u00aa\3\24\1\u00c9"+
            "\1\u00c4\2\24\1\u00ae\1\24\1\u00a8\3\24\1\u00b7\1\24\1\u00b3"+
            "\1\24\1\u00b2\1\u00ab\4\24\1\u00a6\1\u00a7\1\u00b4\2\24\1\u00b1"+
            "\1\24\1\u00b8\1\u00b0\1\u00ac\2\24\1\u00af\5\24\1\u00b6\1\u00bb"+
            "\7\24\1\u00be\1\u00c6\5\24\1\u00bc\4\24\1\u00ad\1\u00a5\1\24"+
            "\1\u00a9\4\24\1\u00b9\3\24\1\u00bd\3\24\1\u00c1\1\u00ba\6\24"+
            "\1\u00c0\6\24\1\u00bf\5\24\1\u00cd\1\u00ce\4\24\1\u00cc\1\24"+
            "\1\u00cf\7\24\1\u00ca\3\24\1\uffff\14\24\1\6\1\uffff\1\24\4"+
            "\6\1\uffff\1\6\1\uffff\1\6\1\uffff\13\6\2\uffff\1\32\3\uffff"+
            "\2\6\15\uffff\1\24",
            "\3\6\5\uffff\3\6\1\uffff\1\6\4\uffff\1\6\2\uffff\2\6\3\uffff"+
            "\2\6\2\uffff\1\6\1\uffff\1\6\3\uffff\1\6\1\uffff\1\6\1\uffff"+
            "\2\6\4\uffff\3\6\2\uffff\1\6\1\uffff\3\6\2\uffff\1\6\5\uffff"+
            "\2\6\7\uffff\2\6\5\uffff\1\6\4\uffff\2\6\1\uffff\1\6\4\uffff"+
            "\1\6\3\uffff\1\6\3\uffff\2\6\6\uffff\1\6\6\uffff\1\6\5\uffff"+
            "\2\6\4\uffff\1\6\1\uffff\1\6\7\uffff\1\6\17\uffff\1\24\1\6\1"+
            "\uffff\1\u00d0\4\6\1\uffff\1\6\1\uffff\1\6\1\uffff\13\6\2\uffff"+
            "\1\32\3\uffff\2\6",
            "\3\6\5\uffff\3\6\1\uffff\1\6\4\uffff\1\6\2\uffff\2\6\3\uffff"+
            "\2\6\2\uffff\1\6\1\uffff\1\6\3\uffff\1\6\1\uffff\1\6\1\uffff"+
            "\2\6\4\uffff\3\6\2\uffff\1\6\1\uffff\3\6\2\uffff\1\6\5\uffff"+
            "\2\6\7\uffff\2\6\5\uffff\1\6\4\uffff\2\6\1\uffff\1\6\4\uffff"+
            "\1\6\3\uffff\1\6\3\uffff\2\6\6\uffff\1\6\6\uffff\1\6\5\uffff"+
            "\2\6\4\uffff\1\6\1\uffff\1\6\7\uffff\1\6\17\uffff\1\u00d1\1"+
            "\6\2\uffff\4\6\1\uffff\1\6\1\uffff\1\6\1\uffff\13\6\2\uffff"+
            "\1\32\3\uffff\2\6",
            "\u008f\u00d2\1\uffff\13\u00d2\55\uffff\1\u00d2",
            "\1\6\u009a\uffff\1\u00d1\26\uffff\1\u00d1",
            "\1\6\u009a\uffff\1\u00d1\26\uffff\1\u00d1",
            "\1\6\u009a\uffff\1\u00d1\26\uffff\1\u00d1",
            "\1\6\136\uffff\1\u00d1\26\uffff\1\u00d1",
            "\u008f\6\1\uffff\14\6\1\uffff\1\6\1\u00d1\11\uffff\4\6\5\uffff"+
            "\4\6\1\u00d1\13\uffff\1\6\2\uffff\2\6\2\uffff\1\6\6\uffff\6"+
            "\6",
            "\u008f\6\1\uffff\14\6\1\uffff\1\6\1\u00d1\11\uffff\4\6\5\uffff"+
            "\4\6\1\u00d1\13\uffff\1\6\2\uffff\2\6\2\uffff\1\6\6\uffff\6"+
            "\6",
            "\u008f\6\1\uffff\14\6\1\uffff\1\6\1\u00d1\11\uffff\4\6\5\uffff"+
            "\4\6\1\u00d1\13\uffff\1\6\2\uffff\2\6\2\uffff\1\6\6\uffff\6"+
            "\6",
            "\u008f\6\1\uffff\14\6\1\uffff\1\6\1\u00d1\11\uffff\4\6\5\uffff"+
            "\4\6\1\u00d1\13\uffff\1\6\2\uffff\2\6\2\uffff\1\6\6\uffff\6"+
            "\6",
            "\u008f\6\1\uffff\14\6\1\uffff\1\6\1\u00d1\11\uffff\4\6\5\uffff"+
            "\4\6\1\u00d1\13\uffff\1\6\2\uffff\2\6\2\uffff\1\6\6\uffff\6"+
            "\6",
            "\u008f\6\1\uffff\14\6\1\uffff\1\6\1\u00d1\11\uffff\4\6\5\uffff"+
            "\4\6\1\u00d1\13\uffff\1\6\2\uffff\2\6\2\uffff\1\6\6\uffff\6"+
            "\6",
            "\u008f\6\1\uffff\14\6\1\uffff\1\6\1\u00d1\11\uffff\4\6\5\uffff"+
            "\4\6\1\u00d1\13\uffff\1\6\2\uffff\2\6\2\uffff\1\6\6\uffff\6"+
            "\6",
            "\u008f\6\1\uffff\14\6\1\uffff\1\6\1\u00d1\11\uffff\4\6\5\uffff"+
            "\4\6\1\u00d1\13\uffff\1\6\2\uffff\2\6\2\uffff\1\6\6\uffff\6"+
            "\6",
            "\u008f\6\1\uffff\14\6\1\uffff\1\6\1\u00d1\11\uffff\4\6\5\uffff"+
            "\4\6\1\u00d1\13\uffff\1\6\2\uffff\2\6\2\uffff\1\6\6\uffff\6"+
            "\6",
            "\u008f\6\1\uffff\14\6\1\uffff\1\6\1\u00d1\11\uffff\4\6\5\uffff"+
            "\4\6\1\u00d1\13\uffff\1\6\2\uffff\2\6\2\uffff\1\6\6\uffff\6"+
            "\6",
            "\u008f\6\1\uffff\14\6\1\uffff\1\6\1\u00d1\11\uffff\4\6\5\uffff"+
            "\4\6\1\u00d1\13\uffff\1\6\2\uffff\2\6\2\uffff\1\6\6\uffff\6"+
            "\6",
            "\u008f\6\1\uffff\14\6\1\uffff\1\6\1\u00d1\11\uffff\4\6\5\uffff"+
            "\4\6\1\u00d1\13\uffff\1\6\2\uffff\2\6\2\uffff\1\6\6\uffff\6"+
            "\6",
            "\u008f\6\1\uffff\14\6\1\uffff\1\6\1\u00d1\11\uffff\4\6\5\uffff"+
            "\4\6\1\u00d1\13\uffff\1\6\2\uffff\2\6\2\uffff\1\6\6\uffff\6"+
            "\6",
            "\u008f\6\1\uffff\14\6\1\uffff\1\6\1\u00d1\11\uffff\4\6\5\uffff"+
            "\4\6\1\u00d1\13\uffff\1\6\2\uffff\2\6\2\uffff\1\6\6\uffff\6"+
            "\6",
            "\u008f\6\1\uffff\14\6\1\uffff\1\6\1\u00d1\11\uffff\4\6\5\uffff"+
            "\4\6\1\u00d1\13\uffff\1\6\2\uffff\2\6\2\uffff\1\6\6\uffff\6"+
            "\6",
            "\u008f\6\1\uffff\14\6\1\uffff\1\6\1\u00d1\11\uffff\4\6\5\uffff"+
            "\4\6\1\u00d1\13\uffff\1\6\2\uffff\2\6\2\uffff\1\6\6\uffff\6"+
            "\6",
            "\1\6\2\uffff\1\6\45\uffff\1\6\1\u00d1\26\uffff\1\u00d1",
            "\1\6\1\u00d1\26\uffff\1\u00d1",
            "\u008f\6\1\uffff\14\6\1\uffff\1\6\1\u00d1\11\uffff\4\6\5\uffff"+
            "\4\6\1\u00d1\13\uffff\1\6\2\uffff\2\6\2\uffff\1\6\6\uffff\6"+
            "\6",
            "\1\6\u0094\uffff\1\u00d1\26\uffff\1\u00d1",
            "\1\6\u0094\uffff\1\u00d1\26\uffff\1\u00d1",
            "\1\6\133\uffff\1\u00d1\26\uffff\1\u00d1",
            "\1\6\1\u00d1\26\uffff\1\u00d1",
            "\u008f\6\1\uffff\14\6\1\uffff\1\6\1\u00d1\11\uffff\4\6\5\uffff"+
            "\4\6\1\u00d1\13\uffff\1\6\2\uffff\2\6\2\uffff\1\6\6\uffff\6"+
            "\6",
            "\1\6\147\uffff\1\6\5\uffff\1\6\4\uffff\1\6\44\uffff\1\6\1\u00d1"+
            "\26\uffff\1\u00d1",
            "\1\6\67\uffff\1\u00d1\26\uffff\1\u00d1",
            "\1\6\147\uffff\1\6\5\uffff\1\6\4\uffff\1\6\44\uffff\1\6\1\u00d1"+
            "\26\uffff\1\u00d1",
            "\1\6\15\uffff\1\6\10\uffff\1\6\20\uffff\1\6\13\uffff\1\6\7"+
            "\uffff\1\6\6\uffff\1\6\14\uffff\1\6\3\uffff\1\6\4\uffff\1\6"+
            "\66\uffff\1\u00d1\7\uffff\1\6\16\uffff\1\u00d1",
            "\1\6\15\uffff\1\6\10\uffff\1\6\20\uffff\1\6\13\uffff\1\6\7"+
            "\uffff\1\6\6\uffff\1\6\14\uffff\1\6\3\uffff\1\6\4\uffff\1\6"+
            "\66\uffff\1\u00d1\7\uffff\1\6\16\uffff\1\u00d1",
            "\1\6\14\uffff\1\6\150\uffff\1\u00d1\26\uffff\1\u00d1",
            "\1\u00d1\26\uffff\1\u00d1\16\uffff\2\6",
            "\u008f\6\1\uffff\14\6\1\uffff\1\6\1\u00d1\11\uffff\4\6\5\uffff"+
            "\4\6\1\u00d1\13\uffff\1\6\2\uffff\2\6\2\uffff\1\6\6\uffff\6"+
            "\6",
            "\1\6\122\uffff\1\6\1\u00d1\26\uffff\1\u00d1",
            "\u008f\6\1\uffff\13\6\2\uffff\1\6\1\u00d1\26\uffff\1\u00d1"+
            "\22\uffff\1\6",
            "\u008f\6\1\uffff\14\6\1\uffff\1\6\1\u00d1\11\uffff\4\6\5\uffff"+
            "\4\6\1\u00d1\13\uffff\1\6\2\uffff\2\6\2\uffff\1\6\6\uffff\6"+
            "\6",
            "\u008f\6\1\uffff\14\6\1\uffff\1\6\1\u00d1\11\uffff\4\6\5\uffff"+
            "\4\6\1\u00d1\13\uffff\1\6\2\uffff\2\6\2\uffff\1\6\6\uffff\6"+
            "\6",
            "\u008f\6\1\uffff\14\6\1\uffff\1\6\1\u00d1\11\uffff\4\6\5\uffff"+
            "\4\6\1\u00d1\13\uffff\1\6\2\uffff\2\6\2\uffff\1\6\6\uffff\6"+
            "\6",
            "\u008f\6\1\uffff\14\6\1\uffff\1\6\1\u00d1\11\uffff\4\6\5\uffff"+
            "\4\6\1\u00d1\13\uffff\1\6\2\uffff\2\6\2\uffff\1\6\6\uffff\6"+
            "\6",
            "\u008f\6\1\uffff\14\6\1\uffff\1\6\1\u00d1\11\uffff\4\6\5\uffff"+
            "\4\6\1\u00d1\13\uffff\1\6\2\uffff\2\6\2\uffff\1\6\6\uffff\6"+
            "\6",
            "\u008f\6\1\uffff\14\6\1\uffff\1\6\1\u00d1\11\uffff\4\6\5\uffff"+
            "\4\6\1\u00d1\13\uffff\1\6\2\uffff\2\6\2\uffff\1\6\6\uffff\6"+
            "\6",
            "\u008f\6\1\uffff\14\6\1\uffff\1\6\1\u00d1\11\uffff\4\6\5\uffff"+
            "\4\6\1\u00d1\13\uffff\1\6\2\uffff\2\6\2\uffff\1\6\6\uffff\6"+
            "\6",
            "\1\6\u009a\uffff\1\u00d1\26\uffff\1\u00d1",
            "\1\6\u009a\uffff\1\u00d1\26\uffff\1\u00d1",
            "\1\6\u009a\uffff\1\u00d1\26\uffff\1\u00d1",
            "\1\6\136\uffff\1\u00d1\26\uffff\1\u00d1",
            "\u008f\6\1\uffff\14\6\1\uffff\1\6\1\u00d1\11\uffff\4\6\5\uffff"+
            "\4\6\1\u00d1\13\uffff\1\6\2\uffff\2\6\2\uffff\1\6\6\uffff\6"+
            "\6",
            "\u008f\6\1\uffff\14\6\1\uffff\1\6\1\u00d1\11\uffff\4\6\5\uffff"+
            "\4\6\1\u00d1\13\uffff\1\6\2\uffff\2\6\2\uffff\1\6\6\uffff\6"+
            "\6",
            "\u008f\6\1\uffff\14\6\1\uffff\1\6\1\u00d1\11\uffff\4\6\5\uffff"+
            "\4\6\1\u00d1\13\uffff\1\6\2\uffff\2\6\2\uffff\1\6\6\uffff\6"+
            "\6",
            "\u008f\6\1\uffff\14\6\1\uffff\1\6\1\u00d1\11\uffff\4\6\5\uffff"+
            "\4\6\1\u00d1\13\uffff\1\6\2\uffff\2\6\2\uffff\1\6\6\uffff\6"+
            "\6",
            "\u008f\6\1\uffff\14\6\1\uffff\1\6\1\u00d1\11\uffff\4\6\5\uffff"+
            "\4\6\1\u00d1\13\uffff\1\6\2\uffff\2\6\2\uffff\1\6\6\uffff\6"+
            "\6",
            "\u008f\6\1\uffff\14\6\1\uffff\1\6\1\u00d1\11\uffff\4\6\5\uffff"+
            "\4\6\1\u00d1\13\uffff\1\6\2\uffff\2\6\2\uffff\1\6\6\uffff\6"+
            "\6",
            "\u008f\6\1\uffff\14\6\1\uffff\1\6\1\u00d1\11\uffff\4\6\5\uffff"+
            "\4\6\1\u00d1\13\uffff\1\6\2\uffff\2\6\2\uffff\1\6\6\uffff\6"+
            "\6",
            "\u008f\6\1\uffff\14\6\1\uffff\1\6\1\u00d1\11\uffff\4\6\5\uffff"+
            "\4\6\1\u00d1\13\uffff\1\6\2\uffff\2\6\2\uffff\1\6\6\uffff\6"+
            "\6",
            "\u008f\6\1\uffff\14\6\1\uffff\1\6\1\u00d1\11\uffff\4\6\5\uffff"+
            "\4\6\1\u00d1\13\uffff\1\6\2\uffff\2\6\2\uffff\1\6\6\uffff\6"+
            "\6",
            "\u008f\6\1\uffff\14\6\1\uffff\1\6\1\u00d1\11\uffff\4\6\5\uffff"+
            "\4\6\1\u00d1\13\uffff\1\6\2\uffff\2\6\2\uffff\1\6\6\uffff\6"+
            "\6",
            "\u008f\6\1\uffff\14\6\1\uffff\1\6\1\u00d1\11\uffff\4\6\5\uffff"+
            "\4\6\1\u00d1\13\uffff\1\6\2\uffff\2\6\2\uffff\1\6\6\uffff\6"+
            "\6",
            "\u008f\6\1\uffff\14\6\1\uffff\1\6\1\u00d1\11\uffff\4\6\5\uffff"+
            "\4\6\1\u00d1\13\uffff\1\6\2\uffff\2\6\2\uffff\1\6\6\uffff\6"+
            "\6",
            "\u008f\6\1\uffff\14\6\1\uffff\1\6\1\u00d1\11\uffff\4\6\5\uffff"+
            "\4\6\1\u00d1\13\uffff\1\6\2\uffff\2\6\2\uffff\1\6\6\uffff\6"+
            "\6",
            "\u008f\6\1\uffff\14\6\1\uffff\1\6\1\u00d1\11\uffff\4\6\5\uffff"+
            "\4\6\1\u00d1\13\uffff\1\6\2\uffff\2\6\2\uffff\1\6\6\uffff\6"+
            "\6",
            "\u008f\6\1\uffff\14\6\1\uffff\1\6\1\u00d1\11\uffff\4\6\5\uffff"+
            "\4\6\1\u00d1\13\uffff\1\6\2\uffff\2\6\2\uffff\1\6\6\uffff\6"+
            "\6",
            "\u008f\6\1\uffff\14\6\1\uffff\1\6\1\u00d1\11\uffff\4\6\5\uffff"+
            "\4\6\1\u00d1\13\uffff\1\6\2\uffff\2\6\2\uffff\1\6\6\uffff\6"+
            "\6",
            "\1\6\2\uffff\1\6\45\uffff\1\6\1\u00d1\26\uffff\1\u00d1",
            "\1\6\1\u00d1\26\uffff\1\u00d1",
            "\u008f\6\1\uffff\14\6\1\uffff\1\6\1\u00d1\11\uffff\4\6\5\uffff"+
            "\4\6\1\u00d1\13\uffff\1\6\2\uffff\2\6\2\uffff\1\6\6\uffff\6"+
            "\6",
            "\1\6\u0094\uffff\1\u00d1\26\uffff\1\u00d1",
            "\1\6\u0094\uffff\1\u00d1\26\uffff\1\u00d1",
            "\1\6\133\uffff\1\u00d1\26\uffff\1\u00d1",
            "\1\6\1\u00d1\26\uffff\1\u00d1",
            "\u008f\6\1\uffff\14\6\1\uffff\1\6\1\u00d1\11\uffff\4\6\5\uffff"+
            "\4\6\1\u00d1\13\uffff\1\6\2\uffff\2\6\2\uffff\1\6\6\uffff\6"+
            "\6",
            "\1\6\147\uffff\1\6\5\uffff\1\6\4\uffff\1\6\44\uffff\1\6\1\u00d1"+
            "\26\uffff\1\u00d1",
            "\1\6\67\uffff\1\u00d1\26\uffff\1\u00d1",
            "\1\6\147\uffff\1\6\5\uffff\1\6\4\uffff\1\6\44\uffff\1\6\1\u00d1"+
            "\26\uffff\1\u00d1",
            "\1\6\15\uffff\1\6\10\uffff\1\6\20\uffff\1\6\13\uffff\1\6\7"+
            "\uffff\1\6\6\uffff\1\6\14\uffff\1\6\3\uffff\1\6\4\uffff\1\6"+
            "\66\uffff\1\u00d1\7\uffff\1\6\16\uffff\1\u00d1",
            "\1\6\15\uffff\1\6\10\uffff\1\6\20\uffff\1\6\13\uffff\1\6\7"+
            "\uffff\1\6\6\uffff\1\6\14\uffff\1\6\3\uffff\1\6\4\uffff\1\6"+
            "\66\uffff\1\u00d1\7\uffff\1\6\16\uffff\1\u00d1",
            "\1\6\14\uffff\1\6\150\uffff\1\u00d1\26\uffff\1\u00d1",
            "\1\u00d1\26\uffff\1\u00d1\16\uffff\2\6",
            "\u008f\6\1\uffff\14\6\1\uffff\1\6\1\u00d1\11\uffff\4\6\5\uffff"+
            "\4\6\1\u00d1\13\uffff\1\6\2\uffff\2\6\2\uffff\1\6\6\uffff\6"+
            "\6",
            "\1\6\122\uffff\1\6\1\u00d1\26\uffff\1\u00d1",
            "\u008f\6\1\uffff\13\6\2\uffff\1\6\1\u00d1\26\uffff\1\u00d1"+
            "\22\uffff\1\6",
            "\u008f\6\1\uffff\14\6\1\uffff\1\6\1\u00d1\11\uffff\4\6\5\uffff"+
            "\4\6\1\u00d1\13\uffff\1\6\2\uffff\2\6\2\uffff\1\6\6\uffff\6"+
            "\6",
            "\u008f\6\1\uffff\14\6\1\uffff\1\6\1\u00d1\11\uffff\4\6\5\uffff"+
            "\4\6\1\u00d1\13\uffff\1\6\2\uffff\2\6\2\uffff\1\6\6\uffff\6"+
            "\6",
            "\u008f\6\1\uffff\14\6\1\uffff\1\6\1\u00d1\11\uffff\4\6\5\uffff"+
            "\4\6\1\u00d1\13\uffff\1\6\2\uffff\2\6\2\uffff\1\6\6\uffff\6"+
            "\6",
            "\u008f\6\1\uffff\14\6\1\uffff\1\6\1\u00d1\11\uffff\4\6\5\uffff"+
            "\4\6\1\u00d1\13\uffff\1\6\2\uffff\2\6\2\uffff\1\6\6\uffff\6"+
            "\6",
            "\u008f\6\1\uffff\14\6\1\uffff\1\6\1\u00d1\11\uffff\4\6\5\uffff"+
            "\4\6\1\u00d1\13\uffff\1\6\2\uffff\2\6\2\uffff\1\6\6\uffff\6"+
            "\6",
            "\u008f\6\1\uffff\14\6\1\uffff\1\6\1\u00d1\11\uffff\4\6\5\uffff"+
            "\4\6\1\u00d1\13\uffff\1\6\2\uffff\2\6\2\uffff\1\6\6\uffff\6"+
            "\6",
            "\u008f\6\1\uffff\14\6\1\uffff\1\6\1\u00d1\11\uffff\4\6\5\uffff"+
            "\4\6\1\u00d1\13\uffff\1\6\2\uffff\2\6\2\uffff\1\6\6\uffff\6"+
            "\6",
            "\1\6\u009a\uffff\1\u00d1",
            "\1\6\u009a\uffff\1\u00d1",
            "\1\6\u009a\uffff\1\u00d1",
            "\1\6\136\uffff\1\u00d1",
            "\u008f\6\1\uffff\14\6\1\uffff\1\6\1\u00d1\11\uffff\4\6\5\uffff"+
            "\4\6\14\uffff\1\6\2\uffff\2\6\2\uffff\1\6\6\uffff\6\6",
            "\u008f\6\1\uffff\14\6\1\uffff\1\6\1\u00d1\11\uffff\4\6\5\uffff"+
            "\4\6\14\uffff\1\6\2\uffff\2\6\2\uffff\1\6\6\uffff\6\6",
            "\u008f\6\1\uffff\14\6\1\uffff\1\6\1\u00d1\11\uffff\4\6\5\uffff"+
            "\4\6\14\uffff\1\6\2\uffff\2\6\2\uffff\1\6\6\uffff\6\6",
            "\u008f\6\1\uffff\14\6\1\uffff\1\6\1\u00d1\11\uffff\4\6\5\uffff"+
            "\4\6\14\uffff\1\6\2\uffff\2\6\2\uffff\1\6\6\uffff\6\6",
            "\u008f\6\1\uffff\14\6\1\uffff\1\6\1\u00d1\11\uffff\4\6\5\uffff"+
            "\4\6\14\uffff\1\6\2\uffff\2\6\2\uffff\1\6\6\uffff\6\6",
            "\u008f\6\1\uffff\14\6\1\uffff\1\6\1\u00d1\11\uffff\4\6\5\uffff"+
            "\4\6\14\uffff\1\6\2\uffff\2\6\2\uffff\1\6\6\uffff\6\6",
            "\u008f\6\1\uffff\14\6\1\uffff\1\6\1\u00d1\11\uffff\4\6\5\uffff"+
            "\4\6\14\uffff\1\6\2\uffff\2\6\2\uffff\1\6\6\uffff\6\6",
            "\u008f\6\1\uffff\14\6\1\uffff\1\6\1\u00d1\11\uffff\4\6\5\uffff"+
            "\4\6\14\uffff\1\6\2\uffff\2\6\2\uffff\1\6\6\uffff\6\6",
            "\u008f\6\1\uffff\14\6\1\uffff\1\6\1\u00d1\11\uffff\4\6\5\uffff"+
            "\4\6\14\uffff\1\6\2\uffff\2\6\2\uffff\1\6\6\uffff\6\6",
            "\u008f\6\1\uffff\14\6\1\uffff\1\6\1\u00d1\11\uffff\4\6\5\uffff"+
            "\4\6\14\uffff\1\6\2\uffff\2\6\2\uffff\1\6\6\uffff\6\6",
            "\u008f\6\1\uffff\14\6\1\uffff\1\6\1\u00d1\11\uffff\4\6\5\uffff"+
            "\4\6\14\uffff\1\6\2\uffff\2\6\2\uffff\1\6\6\uffff\6\6",
            "\u008f\6\1\uffff\14\6\1\uffff\1\6\1\u00d1\11\uffff\4\6\5\uffff"+
            "\4\6\14\uffff\1\6\2\uffff\2\6\2\uffff\1\6\6\uffff\6\6",
            "\u008f\6\1\uffff\14\6\1\uffff\1\6\1\u00d1\11\uffff\4\6\5\uffff"+
            "\4\6\14\uffff\1\6\2\uffff\2\6\2\uffff\1\6\6\uffff\6\6",
            "\u008f\6\1\uffff\14\6\1\uffff\1\6\1\u00d1\11\uffff\4\6\5\uffff"+
            "\4\6\14\uffff\1\6\2\uffff\2\6\2\uffff\1\6\6\uffff\6\6",
            "\u008f\6\1\uffff\14\6\1\uffff\1\6\1\u00d1\11\uffff\4\6\5\uffff"+
            "\4\6\14\uffff\1\6\2\uffff\2\6\2\uffff\1\6\6\uffff\6\6",
            "\u008f\6\1\uffff\14\6\1\uffff\1\6\1\u00d1\11\uffff\4\6\5\uffff"+
            "\4\6\14\uffff\1\6\2\uffff\2\6\2\uffff\1\6\6\uffff\6\6",
            "\1\6\2\uffff\1\6\45\uffff\1\6\1\u00d1",
            "\1\6\1\u00d1",
            "\u008f\6\1\uffff\14\6\1\uffff\1\6\1\u00d1\11\uffff\4\6\5\uffff"+
            "\4\6\14\uffff\1\6\2\uffff\2\6\2\uffff\1\6\6\uffff\6\6",
            "\1\6\u0094\uffff\1\u00d1",
            "\1\6\u0094\uffff\1\u00d1",
            "\1\6\133\uffff\1\u00d1",
            "\1\6\1\u00d1",
            "\u008f\6\1\uffff\14\6\1\uffff\1\6\1\u00d1\11\uffff\4\6\5\uffff"+
            "\4\6\14\uffff\1\6\2\uffff\2\6\2\uffff\1\6\6\uffff\6\6",
            "\1\6\147\uffff\1\6\5\uffff\1\6\4\uffff\1\6\44\uffff\1\6\1\u00d1",
            "\1\6\67\uffff\1\u00d1",
            "\1\6\147\uffff\1\6\5\uffff\1\6\4\uffff\1\6\44\uffff\1\6\1\u00d1",
            "\1\6\15\uffff\1\6\10\uffff\1\6\20\uffff\1\6\13\uffff\1\6\7"+
            "\uffff\1\6\6\uffff\1\6\14\uffff\1\6\3\uffff\1\6\4\uffff\1\6"+
            "\66\uffff\1\u00d1\7\uffff\1\6",
            "\1\6\15\uffff\1\6\10\uffff\1\6\20\uffff\1\6\13\uffff\1\6\7"+
            "\uffff\1\6\6\uffff\1\6\14\uffff\1\6\3\uffff\1\6\4\uffff\1\6"+
            "\66\uffff\1\u00d1\7\uffff\1\6",
            "\1\6\14\uffff\1\6\150\uffff\1\u00d1",
            "\1\u00d1\45\uffff\2\6",
            "\u008f\6\1\uffff\14\6\1\uffff\1\6\1\u00d1\11\uffff\4\6\5\uffff"+
            "\4\6\14\uffff\1\6\2\uffff\2\6\2\uffff\1\6\6\uffff\6\6",
            "\1\6\122\uffff\1\6\1\u00d1",
            "\u008f\6\1\uffff\13\6\2\uffff\1\6\1\u00d1\51\uffff\1\6",
            "\u008f\6\1\uffff\14\6\1\uffff\1\6\1\u00d1\11\uffff\4\6\5\uffff"+
            "\4\6\14\uffff\1\6\2\uffff\2\6\2\uffff\1\6\6\uffff\6\6",
            "\u008f\6\1\uffff\14\6\1\uffff\1\6\1\u00d1\11\uffff\4\6\5\uffff"+
            "\4\6\14\uffff\1\6\2\uffff\2\6\2\uffff\1\6\6\uffff\6\6",
            "\u008f\6\1\uffff\14\6\1\uffff\1\6\1\u00d1\11\uffff\4\6\5\uffff"+
            "\4\6\14\uffff\1\6\2\uffff\2\6\2\uffff\1\6\6\uffff\6\6",
            "\u008f\6\1\uffff\14\6\1\uffff\1\6\1\u00d1\11\uffff\4\6\5\uffff"+
            "\4\6\14\uffff\1\6\2\uffff\2\6\2\uffff\1\6\6\uffff\6\6",
            "\u008f\6\1\uffff\14\6\1\uffff\1\6\1\u00d1\11\uffff\4\6\5\uffff"+
            "\4\6\14\uffff\1\6\2\uffff\2\6\2\uffff\1\6\6\uffff\6\6",
            "\u008f\6\1\uffff\14\6\1\uffff\1\6\1\u00d1\11\uffff\4\6\5\uffff"+
            "\4\6\14\uffff\1\6\2\uffff\2\6\2\uffff\1\6\6\uffff\6\6",
            "\u008f\6\1\uffff\14\6\1\uffff\1\6\1\u00d1\11\uffff\4\6\5\uffff"+
            "\4\6\14\uffff\1\6\2\uffff\2\6\2\uffff\1\6\6\uffff\6\6",
            "\u008f\u00d2\1\uffff\13\u00d2\15\uffff\1\6\37\uffff\1\u00d2",
            "\1\6\u009a\uffff\1\u00d1",
            "\1\6\u009a\uffff\1\u00d1",
            "\1\6\u009a\uffff\1\u00d1",
            "\1\6\136\uffff\1\u00d1",
            "\u008f\6\1\uffff\14\6\1\uffff\1\6\1\u00d1\11\uffff\4\6\5\uffff"+
            "\4\6\14\uffff\1\6\2\uffff\2\6\2\uffff\1\6\6\uffff\6\6",
            "\u008f\6\1\uffff\14\6\1\uffff\1\6\1\u00d1\11\uffff\4\6\5\uffff"+
            "\4\6\14\uffff\1\6\2\uffff\2\6\2\uffff\1\6\6\uffff\6\6",
            "\u008f\6\1\uffff\14\6\1\uffff\1\6\1\u00d1\11\uffff\4\6\5\uffff"+
            "\4\6\14\uffff\1\6\2\uffff\2\6\2\uffff\1\6\6\uffff\6\6",
            "\u008f\6\1\uffff\14\6\1\uffff\1\6\1\u00d1\11\uffff\4\6\5\uffff"+
            "\4\6\14\uffff\1\6\2\uffff\2\6\2\uffff\1\6\6\uffff\6\6",
            "\u008f\6\1\uffff\14\6\1\uffff\1\6\1\u00d1\11\uffff\4\6\5\uffff"+
            "\4\6\14\uffff\1\6\2\uffff\2\6\2\uffff\1\6\6\uffff\6\6",
            "\u008f\6\1\uffff\14\6\1\uffff\1\6\1\u00d1\11\uffff\4\6\5\uffff"+
            "\4\6\14\uffff\1\6\2\uffff\2\6\2\uffff\1\6\6\uffff\6\6",
            "\u008f\6\1\uffff\14\6\1\uffff\1\6\1\u00d1\11\uffff\4\6\5\uffff"+
            "\4\6\14\uffff\1\6\2\uffff\2\6\2\uffff\1\6\6\uffff\6\6",
            "\u008f\6\1\uffff\14\6\1\uffff\1\6\1\u00d1\11\uffff\4\6\5\uffff"+
            "\4\6\14\uffff\1\6\2\uffff\2\6\2\uffff\1\6\6\uffff\6\6",
            "\u008f\6\1\uffff\14\6\1\uffff\1\6\1\u00d1\11\uffff\4\6\5\uffff"+
            "\4\6\14\uffff\1\6\2\uffff\2\6\2\uffff\1\6\6\uffff\6\6",
            "\u008f\6\1\uffff\14\6\1\uffff\1\6\1\u00d1\11\uffff\4\6\5\uffff"+
            "\4\6\14\uffff\1\6\2\uffff\2\6\2\uffff\1\6\6\uffff\6\6",
            "\u008f\6\1\uffff\14\6\1\uffff\1\6\1\u00d1\11\uffff\4\6\5\uffff"+
            "\4\6\14\uffff\1\6\2\uffff\2\6\2\uffff\1\6\6\uffff\6\6",
            "\u008f\6\1\uffff\14\6\1\uffff\1\6\1\u00d1\11\uffff\4\6\5\uffff"+
            "\4\6\14\uffff\1\6\2\uffff\2\6\2\uffff\1\6\6\uffff\6\6",
            "\u008f\6\1\uffff\14\6\1\uffff\1\6\1\u00d1\11\uffff\4\6\5\uffff"+
            "\4\6\14\uffff\1\6\2\uffff\2\6\2\uffff\1\6\6\uffff\6\6",
            "\u008f\6\1\uffff\14\6\1\uffff\1\6\1\u00d1\11\uffff\4\6\5\uffff"+
            "\4\6\14\uffff\1\6\2\uffff\2\6\2\uffff\1\6\6\uffff\6\6",
            "\u008f\6\1\uffff\14\6\1\uffff\1\6\1\u00d1\11\uffff\4\6\5\uffff"+
            "\4\6\14\uffff\1\6\2\uffff\2\6\2\uffff\1\6\6\uffff\6\6",
            "\u008f\6\1\uffff\14\6\1\uffff\1\6\1\u00d1\11\uffff\4\6\5\uffff"+
            "\4\6\14\uffff\1\6\2\uffff\2\6\2\uffff\1\6\6\uffff\6\6",
            "\1\6\2\uffff\1\6\45\uffff\1\6\1\u00d1",
            "\1\6\1\u00d1",
            "\u008f\6\1\uffff\14\6\1\uffff\1\6\1\u00d1\11\uffff\4\6\5\uffff"+
            "\4\6\14\uffff\1\6\2\uffff\2\6\2\uffff\1\6\6\uffff\6\6",
            "\1\6\u0094\uffff\1\u00d1",
            "\1\6\u0094\uffff\1\u00d1",
            "\1\6\133\uffff\1\u00d1",
            "\1\6\1\u00d1",
            "\u008f\6\1\uffff\14\6\1\uffff\1\6\1\u00d1\11\uffff\4\6\5\uffff"+
            "\4\6\14\uffff\1\6\2\uffff\2\6\2\uffff\1\6\6\uffff\6\6",
            "\1\6\147\uffff\1\6\5\uffff\1\6\4\uffff\1\6\44\uffff\1\6\1\u00d1",
            "\1\6\67\uffff\1\u00d1",
            "\1\6\147\uffff\1\6\5\uffff\1\6\4\uffff\1\6\44\uffff\1\6\1\u00d1",
            "\1\6\15\uffff\1\6\10\uffff\1\6\20\uffff\1\6\13\uffff\1\6\7"+
            "\uffff\1\6\6\uffff\1\6\14\uffff\1\6\3\uffff\1\6\4\uffff\1\6"+
            "\66\uffff\1\u00d1\7\uffff\1\6",
            "\1\6\15\uffff\1\6\10\uffff\1\6\20\uffff\1\6\13\uffff\1\6\7"+
            "\uffff\1\6\6\uffff\1\6\14\uffff\1\6\3\uffff\1\6\4\uffff\1\6"+
            "\66\uffff\1\u00d1\7\uffff\1\6",
            "\1\6\14\uffff\1\6\150\uffff\1\u00d1",
            "\1\u00d1\45\uffff\2\6",
            "\u008f\6\1\uffff\14\6\1\uffff\1\6\1\u00d1\11\uffff\4\6\5\uffff"+
            "\4\6\14\uffff\1\6\2\uffff\2\6\2\uffff\1\6\6\uffff\6\6",
            "\1\6\122\uffff\1\6\1\u00d1",
            "\u008f\6\1\uffff\13\6\2\uffff\1\6\1\u00d1\51\uffff\1\6",
            "\u008f\6\1\uffff\14\6\1\uffff\1\6\1\u00d1\11\uffff\4\6\5\uffff"+
            "\4\6\14\uffff\1\6\2\uffff\2\6\2\uffff\1\6\6\uffff\6\6",
            "\u008f\6\1\uffff\14\6\1\uffff\1\6\1\u00d1\11\uffff\4\6\5\uffff"+
            "\4\6\14\uffff\1\6\2\uffff\2\6\2\uffff\1\6\6\uffff\6\6",
            "\u008f\6\1\uffff\14\6\1\uffff\1\6\1\u00d1\11\uffff\4\6\5\uffff"+
            "\4\6\14\uffff\1\6\2\uffff\2\6\2\uffff\1\6\6\uffff\6\6",
            "\u008f\6\1\uffff\14\6\1\uffff\1\6\1\u00d1\11\uffff\4\6\5\uffff"+
            "\4\6\14\uffff\1\6\2\uffff\2\6\2\uffff\1\6\6\uffff\6\6",
            "\u008f\6\1\uffff\14\6\1\uffff\1\6\1\u00d1\11\uffff\4\6\5\uffff"+
            "\4\6\14\uffff\1\6\2\uffff\2\6\2\uffff\1\6\6\uffff\6\6",
            "\u008f\6\1\uffff\14\6\1\uffff\1\6\1\u00d1\11\uffff\4\6\5\uffff"+
            "\4\6\14\uffff\1\6\2\uffff\2\6\2\uffff\1\6\6\uffff\6\6",
            "\u008f\6\1\uffff\14\6\1\uffff\1\6\1\u00d1\11\uffff\4\6\5\uffff"+
            "\4\6\14\uffff\1\6\2\uffff\2\6\2\uffff\1\6\6\uffff\6\6",
            "",
            "",
            "\3\6\5\uffff\3\6\1\uffff\1\6\4\uffff\1\6\2\uffff\2\6\3\uffff"+
            "\2\6\2\uffff\1\6\1\uffff\1\6\3\uffff\1\6\1\uffff\1\6\1\uffff"+
            "\2\6\4\uffff\3\6\2\uffff\1\6\1\uffff\3\6\2\uffff\1\6\5\uffff"+
            "\2\6\7\uffff\2\6\5\uffff\1\6\4\uffff\2\6\1\uffff\1\6\4\uffff"+
            "\1\6\3\uffff\1\6\3\uffff\2\6\6\uffff\1\6\6\uffff\1\6\5\uffff"+
            "\2\6\4\uffff\1\6\1\uffff\1\6\7\uffff\1\6\17\uffff\1\u00d1\1"+
            "\6\2\uffff\4\6\1\uffff\1\6\1\uffff\1\6\1\uffff\13\6\6\uffff"+
            "\2\6"
    };

    static final short[] DFA112_eot = DFA.unpackEncodedString(DFA112_eotS);
    static final short[] DFA112_eof = DFA.unpackEncodedString(DFA112_eofS);
    static final char[] DFA112_min = DFA.unpackEncodedStringToUnsignedChars(DFA112_minS);
    static final char[] DFA112_max = DFA.unpackEncodedStringToUnsignedChars(DFA112_maxS);
    static final short[] DFA112_accept = DFA.unpackEncodedString(DFA112_acceptS);
    static final short[] DFA112_special = DFA.unpackEncodedString(DFA112_specialS);
    static final short[][] DFA112_transition;

    static {
        int numStates = DFA112_transitionS.length;
        DFA112_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA112_transition[i] = DFA.unpackEncodedString(DFA112_transitionS[i]);
        }
    }

    class DFA112 extends DFA {

        public DFA112(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 112;
            this.eot = DFA112_eot;
            this.eof = DFA112_eof;
            this.min = DFA112_min;
            this.max = DFA112_max;
            this.accept = DFA112_accept;
            this.special = DFA112_special;
            this.transition = DFA112_transition;
        }
        public String getDescription() {
            return "675:1: p_StepExpr : ( p_AxisStep | p_FilterExpr );";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA112_24 = input.LA(1);

                         
                        int index112_24 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA112_24==COLON) ) {s = 26;}

                        else if ( (LA112_24==LPAREN) ) {s = 20;}

                        else if ( (LA112_24==EOF||(LA112_24>=AND && LA112_24<=ASCENDING)||(LA112_24>=CASE && LA112_24<=CASTABLE)||LA112_24==COLLATION||LA112_24==DEFAULT||(LA112_24>=DESCENDING && LA112_24<=DIV)||(LA112_24>=ELSE && LA112_24<=EMPTY)||LA112_24==EQ||LA112_24==EXCEPT||LA112_24==FOR||LA112_24==GE||(LA112_24>=GT && LA112_24<=IDIV)||(LA112_24>=INSTANCE && LA112_24<=IS)||LA112_24==LE||(LA112_24>=LET && LA112_24<=MOD)||LA112_24==NE||(LA112_24>=OR && LA112_24<=ORDER)||(LA112_24>=RETURN && LA112_24<=SATISFIES)||LA112_24==STABLE||(LA112_24>=TO && LA112_24<=TREAT)||LA112_24==UNION||LA112_24==WHERE||LA112_24==COUNT||(LA112_24>=END && LA112_24<=GROUP)||LA112_24==ONLY||LA112_24==START||(LA112_24>=AFTER && LA112_24<=BEFORE)||LA112_24==INTO||LA112_24==MODIFY||LA112_24==WITH||LA112_24==RPAREN||(LA112_24>=RBRACKET && LA112_24<=EQUAL)||LA112_24==NOTEQUAL||LA112_24==COMMA||(LA112_24>=STAR && LA112_24<=SLASH_SLASH)||(LA112_24>=SEMICOLON && LA112_24<=VBAR)) ) {s = 6;}

                        else if ( (LA112_24==LBRACKET) && ((lc(MLS)))) {s = 208;}

                         
                        input.seek(index112_24);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 112, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static final String DFA114_eotS =
        "\12\uffff";
    static final String DFA114_eofS =
        "\1\uffff\7\10\2\uffff";
    static final String DFA114_minS =
        "\1\20\7\22\2\uffff";
    static final String DFA114_maxS =
        "\1\u00d8\7\u00ca\2\uffff";
    static final String DFA114_acceptS =
        "\10\uffff\1\2\1\1";
    static final String DFA114_specialS =
        "\12\uffff}>";
    static final String[] DFA114_transitionS = {
            "\6\10\1\3\6\10\1\1\6\10\1\2\1\5\15\10\1\7\1\6\52\10\1\4\77\10"+
            "\1\uffff\13\10\15\uffff\1\10\30\uffff\1\10\6\uffff\1\10",
            "\3\10\5\uffff\3\10\1\uffff\1\10\4\uffff\1\10\2\uffff\2\10\3"+
            "\uffff\2\10\2\uffff\1\10\1\uffff\1\10\3\uffff\1\10\1\uffff\1"+
            "\10\1\uffff\2\10\4\uffff\3\10\2\uffff\1\10\1\uffff\3\10\2\uffff"+
            "\1\10\5\uffff\2\10\7\uffff\2\10\5\uffff\1\10\4\uffff\2\10\1"+
            "\uffff\1\10\4\uffff\1\10\3\uffff\1\10\3\uffff\2\10\6\uffff\1"+
            "\10\6\uffff\1\10\5\uffff\2\10\4\uffff\1\10\1\uffff\1\10\7\uffff"+
            "\1\10\20\uffff\1\10\2\uffff\4\10\1\uffff\1\10\1\uffff\1\10\1"+
            "\uffff\13\10\2\uffff\1\10\1\11\2\uffff\2\10",
            "\3\10\5\uffff\3\10\1\uffff\1\10\4\uffff\1\10\2\uffff\2\10\3"+
            "\uffff\2\10\2\uffff\1\10\1\uffff\1\10\3\uffff\1\10\1\uffff\1"+
            "\10\1\uffff\2\10\4\uffff\3\10\2\uffff\1\10\1\uffff\3\10\2\uffff"+
            "\1\10\5\uffff\2\10\7\uffff\2\10\5\uffff\1\10\4\uffff\2\10\1"+
            "\uffff\1\10\4\uffff\1\10\3\uffff\1\10\3\uffff\2\10\6\uffff\1"+
            "\10\6\uffff\1\10\5\uffff\2\10\4\uffff\1\10\1\uffff\1\10\7\uffff"+
            "\1\10\20\uffff\1\10\2\uffff\4\10\1\uffff\1\10\1\uffff\1\10\1"+
            "\uffff\13\10\2\uffff\1\10\1\11\2\uffff\2\10",
            "\3\10\5\uffff\3\10\1\uffff\1\10\4\uffff\1\10\2\uffff\2\10\3"+
            "\uffff\2\10\2\uffff\1\10\1\uffff\1\10\3\uffff\1\10\1\uffff\1"+
            "\10\1\uffff\2\10\4\uffff\3\10\2\uffff\1\10\1\uffff\3\10\2\uffff"+
            "\1\10\5\uffff\2\10\7\uffff\2\10\5\uffff\1\10\4\uffff\2\10\1"+
            "\uffff\1\10\4\uffff\1\10\3\uffff\1\10\3\uffff\2\10\6\uffff\1"+
            "\10\6\uffff\1\10\5\uffff\2\10\4\uffff\1\10\1\uffff\1\10\7\uffff"+
            "\1\10\17\uffff\2\10\2\uffff\4\10\1\uffff\1\10\1\uffff\1\10\1"+
            "\uffff\13\10\2\uffff\1\10\1\11\2\uffff\2\10",
            "\3\10\5\uffff\3\10\1\uffff\1\10\4\uffff\1\10\2\uffff\2\10\3"+
            "\uffff\2\10\2\uffff\1\10\1\uffff\1\10\3\uffff\1\10\1\uffff\1"+
            "\10\1\uffff\2\10\4\uffff\3\10\2\uffff\1\10\1\uffff\3\10\2\uffff"+
            "\1\10\5\uffff\2\10\7\uffff\2\10\5\uffff\1\10\4\uffff\2\10\1"+
            "\uffff\1\10\4\uffff\1\10\3\uffff\1\10\3\uffff\2\10\6\uffff\1"+
            "\10\6\uffff\1\10\5\uffff\2\10\4\uffff\1\10\1\uffff\1\10\7\uffff"+
            "\1\10\20\uffff\1\10\2\uffff\4\10\1\uffff\1\10\1\uffff\1\10\1"+
            "\uffff\13\10\2\uffff\1\10\1\11\2\uffff\2\10",
            "\3\10\5\uffff\3\10\1\uffff\1\10\4\uffff\1\10\2\uffff\2\10\3"+
            "\uffff\2\10\2\uffff\1\10\1\uffff\1\10\3\uffff\1\10\1\uffff\1"+
            "\10\1\uffff\2\10\4\uffff\3\10\2\uffff\1\10\1\uffff\3\10\2\uffff"+
            "\1\10\5\uffff\2\10\7\uffff\2\10\5\uffff\1\10\4\uffff\2\10\1"+
            "\uffff\1\10\4\uffff\1\10\3\uffff\1\10\3\uffff\2\10\6\uffff\1"+
            "\10\6\uffff\1\10\5\uffff\2\10\4\uffff\1\10\1\uffff\1\10\7\uffff"+
            "\1\10\20\uffff\1\10\2\uffff\4\10\1\uffff\1\10\1\uffff\1\10\1"+
            "\uffff\13\10\2\uffff\1\10\1\11\2\uffff\2\10",
            "\3\10\5\uffff\3\10\1\uffff\1\10\4\uffff\1\10\2\uffff\2\10\3"+
            "\uffff\2\10\2\uffff\1\10\1\uffff\1\10\3\uffff\1\10\1\uffff\1"+
            "\10\1\uffff\2\10\4\uffff\3\10\2\uffff\1\10\1\uffff\3\10\2\uffff"+
            "\1\10\5\uffff\2\10\7\uffff\2\10\5\uffff\1\10\4\uffff\2\10\1"+
            "\uffff\1\10\4\uffff\1\10\3\uffff\1\10\3\uffff\2\10\6\uffff\1"+
            "\10\6\uffff\1\10\5\uffff\2\10\4\uffff\1\10\1\uffff\1\10\7\uffff"+
            "\1\10\20\uffff\1\10\2\uffff\4\10\1\uffff\1\10\1\uffff\1\10\1"+
            "\uffff\13\10\2\uffff\1\10\1\11\2\uffff\2\10",
            "\3\10\5\uffff\3\10\1\uffff\1\10\4\uffff\1\10\2\uffff\2\10\3"+
            "\uffff\2\10\2\uffff\1\10\1\uffff\1\10\3\uffff\1\10\1\uffff\1"+
            "\10\1\uffff\2\10\4\uffff\3\10\2\uffff\1\10\1\uffff\3\10\2\uffff"+
            "\1\10\5\uffff\2\10\7\uffff\2\10\5\uffff\1\10\4\uffff\2\10\1"+
            "\uffff\1\10\4\uffff\1\10\3\uffff\1\10\3\uffff\2\10\6\uffff\1"+
            "\10\6\uffff\1\10\5\uffff\2\10\4\uffff\1\10\1\uffff\1\10\7\uffff"+
            "\1\10\20\uffff\1\10\2\uffff\4\10\1\uffff\1\10\1\uffff\1\10\1"+
            "\uffff\13\10\2\uffff\1\10\1\11\2\uffff\2\10",
            "",
            ""
    };

    static final short[] DFA114_eot = DFA.unpackEncodedString(DFA114_eotS);
    static final short[] DFA114_eof = DFA.unpackEncodedString(DFA114_eofS);
    static final char[] DFA114_min = DFA.unpackEncodedStringToUnsignedChars(DFA114_minS);
    static final char[] DFA114_max = DFA.unpackEncodedStringToUnsignedChars(DFA114_maxS);
    static final short[] DFA114_accept = DFA.unpackEncodedString(DFA114_acceptS);
    static final short[] DFA114_special = DFA.unpackEncodedString(DFA114_specialS);
    static final short[][] DFA114_transition;

    static {
        int numStates = DFA114_transitionS.length;
        DFA114_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA114_transition[i] = DFA.unpackEncodedString(DFA114_transitionS[i]);
        }
    }

    class DFA114 extends DFA {

        public DFA114(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 114;
            this.eot = DFA114_eot;
            this.eof = DFA114_eof;
            this.min = DFA114_min;
            this.max = DFA114_max;
            this.accept = DFA114_accept;
            this.special = DFA114_special;
            this.transition = DFA114_transition;
        }
        public String getDescription() {
            return "686:1: p_ForwardStep : ( ( p_ForwardAxis p_NodeTest ) | p_AbbrevForwardStep );";
        }
    }
    static final String DFA119_eotS =
        "\15\uffff";
    static final String DFA119_eofS =
        "\1\uffff\12\13\2\uffff";
    static final String DFA119_minS =
        "\1\20\12\22\2\uffff";
    static final String DFA119_maxS =
        "\1\u00d8\12\u00ca\2\uffff";
    static final String DFA119_acceptS =
        "\13\uffff\1\2\1\1";
    static final String DFA119_specialS =
        "\15\uffff}>";
    static final String[] DFA119_transitionS = {
            "\6\13\1\3\10\13\1\10\11\13\1\1\1\2\43\13\1\12\12\13\1\7\3\13"+
            "\1\5\1\4\5\13\1\11\26\13\1\6\43\13\1\uffff\13\13\15\uffff\1"+
            "\13\37\uffff\1\13",
            "\3\13\5\uffff\3\13\1\uffff\1\13\4\uffff\1\13\2\uffff\2\13\3"+
            "\uffff\2\13\2\uffff\1\13\1\uffff\1\13\3\uffff\1\13\1\uffff\1"+
            "\13\1\uffff\2\13\4\uffff\3\13\2\uffff\1\13\1\uffff\3\13\2\uffff"+
            "\1\13\5\uffff\2\13\7\uffff\2\13\5\uffff\1\13\4\uffff\2\13\1"+
            "\uffff\1\13\4\uffff\1\13\3\uffff\1\13\3\uffff\2\13\6\uffff\1"+
            "\13\6\uffff\1\13\5\uffff\2\13\4\uffff\1\13\1\uffff\1\13\7\uffff"+
            "\1\13\17\uffff\1\14\1\13\2\uffff\4\13\1\uffff\1\13\1\uffff\1"+
            "\13\1\uffff\13\13\2\uffff\1\13\3\uffff\2\13",
            "\3\13\5\uffff\3\13\1\uffff\1\13\4\uffff\1\13\2\uffff\2\13\3"+
            "\uffff\2\13\2\uffff\1\13\1\uffff\1\13\3\uffff\1\13\1\uffff\1"+
            "\13\1\uffff\2\13\4\uffff\3\13\2\uffff\1\13\1\uffff\3\13\2\uffff"+
            "\1\13\5\uffff\2\13\7\uffff\2\13\5\uffff\1\13\4\uffff\2\13\1"+
            "\uffff\1\13\4\uffff\1\13\3\uffff\1\13\3\uffff\2\13\6\uffff\1"+
            "\13\6\uffff\1\13\5\uffff\2\13\4\uffff\1\13\1\uffff\1\13\7\uffff"+
            "\1\13\17\uffff\1\14\1\13\2\uffff\4\13\1\uffff\1\13\1\uffff\1"+
            "\13\1\uffff\13\13\2\uffff\1\13\3\uffff\2\13",
            "\3\13\5\uffff\3\13\1\uffff\1\13\4\uffff\1\13\2\uffff\2\13\3"+
            "\uffff\2\13\2\uffff\1\13\1\uffff\1\13\3\uffff\1\13\1\uffff\1"+
            "\13\1\uffff\2\13\4\uffff\3\13\2\uffff\1\13\1\uffff\3\13\2\uffff"+
            "\1\13\5\uffff\2\13\7\uffff\2\13\5\uffff\1\13\4\uffff\2\13\1"+
            "\uffff\1\13\4\uffff\1\13\3\uffff\1\13\3\uffff\2\13\6\uffff\1"+
            "\13\6\uffff\1\13\5\uffff\2\13\4\uffff\1\13\1\uffff\1\13\7\uffff"+
            "\1\13\17\uffff\1\14\1\13\2\uffff\4\13\1\uffff\1\13\1\uffff\1"+
            "\13\1\uffff\13\13\2\uffff\1\13\3\uffff\2\13",
            "\3\13\5\uffff\3\13\1\uffff\1\13\4\uffff\1\13\2\uffff\2\13\3"+
            "\uffff\2\13\2\uffff\1\13\1\uffff\1\13\3\uffff\1\13\1\uffff\1"+
            "\13\1\uffff\2\13\4\uffff\3\13\2\uffff\1\13\1\uffff\3\13\2\uffff"+
            "\1\13\5\uffff\2\13\7\uffff\2\13\5\uffff\1\13\4\uffff\2\13\1"+
            "\uffff\1\13\4\uffff\1\13\3\uffff\1\13\3\uffff\2\13\6\uffff\1"+
            "\13\6\uffff\1\13\5\uffff\2\13\4\uffff\1\13\1\uffff\1\13\7\uffff"+
            "\1\13\17\uffff\1\14\1\13\2\uffff\4\13\1\uffff\1\13\1\uffff\1"+
            "\13\1\uffff\13\13\2\uffff\1\13\3\uffff\2\13",
            "\3\13\5\uffff\3\13\1\uffff\1\13\4\uffff\1\13\2\uffff\2\13\3"+
            "\uffff\2\13\2\uffff\1\13\1\uffff\1\13\3\uffff\1\13\1\uffff\1"+
            "\13\1\uffff\2\13\4\uffff\3\13\2\uffff\1\13\1\uffff\3\13\2\uffff"+
            "\1\13\5\uffff\2\13\7\uffff\2\13\5\uffff\1\13\4\uffff\2\13\1"+
            "\uffff\1\13\4\uffff\1\13\3\uffff\1\13\3\uffff\2\13\6\uffff\1"+
            "\13\6\uffff\1\13\5\uffff\2\13\4\uffff\1\13\1\uffff\1\13\7\uffff"+
            "\1\13\17\uffff\1\14\1\13\2\uffff\4\13\1\uffff\1\13\1\uffff\1"+
            "\13\1\uffff\13\13\2\uffff\1\13\3\uffff\2\13",
            "\3\13\5\uffff\3\13\1\uffff\1\13\4\uffff\1\13\2\uffff\2\13\3"+
            "\uffff\2\13\2\uffff\1\13\1\uffff\1\13\3\uffff\1\13\1\uffff\1"+
            "\13\1\uffff\2\13\4\uffff\3\13\2\uffff\1\13\1\uffff\3\13\2\uffff"+
            "\1\13\5\uffff\2\13\7\uffff\2\13\5\uffff\1\13\4\uffff\2\13\1"+
            "\uffff\1\13\4\uffff\1\13\3\uffff\1\13\3\uffff\2\13\6\uffff\1"+
            "\13\6\uffff\1\13\5\uffff\2\13\4\uffff\1\13\1\uffff\1\13\7\uffff"+
            "\1\13\17\uffff\1\14\1\13\2\uffff\4\13\1\uffff\1\13\1\uffff\1"+
            "\13\1\uffff\13\13\2\uffff\1\13\3\uffff\2\13",
            "\3\13\5\uffff\3\13\1\uffff\1\13\4\uffff\1\13\2\uffff\2\13\3"+
            "\uffff\2\13\2\uffff\1\13\1\uffff\1\13\3\uffff\1\13\1\uffff\1"+
            "\13\1\uffff\2\13\4\uffff\3\13\2\uffff\1\13\1\uffff\3\13\2\uffff"+
            "\1\13\5\uffff\2\13\7\uffff\2\13\5\uffff\1\13\4\uffff\2\13\1"+
            "\uffff\1\13\4\uffff\1\13\3\uffff\1\13\3\uffff\2\13\6\uffff\1"+
            "\13\6\uffff\1\13\5\uffff\2\13\4\uffff\1\13\1\uffff\1\13\7\uffff"+
            "\1\13\17\uffff\1\14\1\13\2\uffff\4\13\1\uffff\1\13\1\uffff\1"+
            "\13\1\uffff\13\13\2\uffff\1\13\3\uffff\2\13",
            "\3\13\5\uffff\3\13\1\uffff\1\13\4\uffff\1\13\2\uffff\2\13\3"+
            "\uffff\2\13\2\uffff\1\13\1\uffff\1\13\3\uffff\1\13\1\uffff\1"+
            "\13\1\uffff\2\13\4\uffff\3\13\2\uffff\1\13\1\uffff\3\13\2\uffff"+
            "\1\13\5\uffff\2\13\7\uffff\2\13\5\uffff\1\13\4\uffff\2\13\1"+
            "\uffff\1\13\4\uffff\1\13\3\uffff\1\13\3\uffff\2\13\6\uffff\1"+
            "\13\6\uffff\1\13\5\uffff\2\13\4\uffff\1\13\1\uffff\1\13\7\uffff"+
            "\1\13\17\uffff\1\14\1\13\2\uffff\4\13\1\uffff\1\13\1\uffff\1"+
            "\13\1\uffff\13\13\2\uffff\1\13\3\uffff\2\13",
            "\3\13\5\uffff\3\13\1\uffff\1\13\4\uffff\1\13\2\uffff\2\13\3"+
            "\uffff\2\13\2\uffff\1\13\1\uffff\1\13\3\uffff\1\13\1\uffff\1"+
            "\13\1\uffff\2\13\4\uffff\3\13\2\uffff\1\13\1\uffff\3\13\2\uffff"+
            "\1\13\5\uffff\2\13\7\uffff\2\13\5\uffff\1\13\4\uffff\2\13\1"+
            "\uffff\1\13\4\uffff\1\13\3\uffff\1\13\3\uffff\2\13\6\uffff\1"+
            "\13\6\uffff\1\13\5\uffff\2\13\4\uffff\1\13\1\uffff\1\13\7\uffff"+
            "\1\13\17\uffff\1\14\1\13\2\uffff\4\13\1\uffff\1\13\1\uffff\1"+
            "\13\1\uffff\13\13\2\uffff\1\13\3\uffff\2\13",
            "\3\13\5\uffff\3\13\1\uffff\1\13\4\uffff\1\13\2\uffff\2\13\3"+
            "\uffff\2\13\2\uffff\1\13\1\uffff\1\13\3\uffff\1\13\1\uffff\1"+
            "\13\1\uffff\2\13\4\uffff\3\13\2\uffff\1\13\1\uffff\3\13\2\uffff"+
            "\1\13\5\uffff\2\13\7\uffff\2\13\5\uffff\1\13\4\uffff\2\13\1"+
            "\uffff\1\13\4\uffff\1\13\3\uffff\1\13\3\uffff\2\13\6\uffff\1"+
            "\13\6\uffff\1\13\5\uffff\2\13\4\uffff\1\13\1\uffff\1\13\7\uffff"+
            "\1\13\17\uffff\1\14\1\13\2\uffff\4\13\1\uffff\1\13\1\uffff\1"+
            "\13\1\uffff\13\13\2\uffff\1\13\3\uffff\2\13",
            "",
            ""
    };

    static final short[] DFA119_eot = DFA.unpackEncodedString(DFA119_eotS);
    static final short[] DFA119_eof = DFA.unpackEncodedString(DFA119_eofS);
    static final char[] DFA119_min = DFA.unpackEncodedStringToUnsignedChars(DFA119_minS);
    static final char[] DFA119_max = DFA.unpackEncodedStringToUnsignedChars(DFA119_maxS);
    static final short[] DFA119_accept = DFA.unpackEncodedString(DFA119_acceptS);
    static final short[] DFA119_special = DFA.unpackEncodedString(DFA119_specialS);
    static final short[][] DFA119_transition;

    static {
        int numStates = DFA119_transitionS.length;
        DFA119_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA119_transition[i] = DFA.unpackEncodedString(DFA119_transitionS[i]);
        }
    }

    class DFA119 extends DFA {

        public DFA119(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 119;
            this.eot = DFA119_eot;
            this.eof = DFA119_eof;
            this.min = DFA119_min;
            this.max = DFA119_max;
            this.accept = DFA119_accept;
            this.special = DFA119_special;
            this.transition = DFA119_transition;
        }
        public String getDescription() {
            return "726:1: p_NodeTest : ( p_KindTest | p_NameTest );";
        }
    }
    static final String DFA124_eotS =
        "\17\uffff";
    static final String DFA124_eofS =
        "\17\uffff";
    static final String DFA124_minS =
        "\1\20\4\uffff\3\u00ab\1\uffff\1\20\1\u00ab\4\uffff";
    static final String DFA124_maxS =
        "\1\u00e4\4\uffff\3\u00c5\1\uffff\1\u00d8\1\u00c5\4\uffff";
    static final String DFA124_acceptS =
        "\1\uffff\1\1\1\2\1\3\1\4\3\uffff\1\10\2\uffff\1\5\1\6\1\7\1\10";
    static final String DFA124_specialS =
        "\12\uffff\1\0\4\uffff}>";
    static final String[] DFA124_transitionS = {
            "\6\13\1\10\10\13\1\10\10\13\1\7\1\uffff\1\10\2\13\1\uffff\15"+
            "\13\1\uffff\6\13\1\uffff\7\13\1\11\3\13\1\uffff\4\13\1\5\5\13"+
            "\1\10\3\13\2\uffff\5\13\1\10\3\13\1\uffff\1\13\1\6\20\13\1\uffff"+
            "\43\13\1\uffff\3\13\1\uffff\2\13\1\12\4\13\1\3\1\uffff\1\2\15"+
            "\uffff\1\10\7\uffff\1\4\20\uffff\2\1\2\uffff\1\13\7\uffff\2"+
            "\10\3\1",
            "",
            "",
            "",
            "",
            "\1\13\2\uffff\1\14\26\uffff\1\13",
            "\1\13\2\uffff\1\15\26\uffff\1\13",
            "\1\13\2\uffff\1\10\26\uffff\1\13",
            "",
            "\u008f\10\1\uffff\13\10\1\13\2\uffff\1\10\26\uffff\1\13\22"+
            "\uffff\1\10",
            "\1\13\2\uffff\1\16\26\uffff\1\13",
            "",
            "",
            "",
            ""
    };

    static final short[] DFA124_eot = DFA.unpackEncodedString(DFA124_eotS);
    static final short[] DFA124_eof = DFA.unpackEncodedString(DFA124_eofS);
    static final char[] DFA124_min = DFA.unpackEncodedStringToUnsignedChars(DFA124_minS);
    static final char[] DFA124_max = DFA.unpackEncodedStringToUnsignedChars(DFA124_maxS);
    static final short[] DFA124_accept = DFA.unpackEncodedString(DFA124_acceptS);
    static final short[] DFA124_special = DFA.unpackEncodedString(DFA124_specialS);
    static final short[][] DFA124_transition;

    static {
        int numStates = DFA124_transitionS.length;
        DFA124_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA124_transition[i] = DFA.unpackEncodedString(DFA124_transitionS[i]);
        }
    }

    class DFA124 extends DFA {

        public DFA124(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 124;
            this.eot = DFA124_eot;
            this.eof = DFA124_eof;
            this.min = DFA124_min;
            this.max = DFA124_max;
            this.accept = DFA124_accept;
            this.special = DFA124_special;
            this.transition = DFA124_transition;
        }
        public String getDescription() {
            return "757:1: p_PrimaryExpr : ( p_Literal | p_VarRef | p_ParenthesizedExpr | p_ContextItemExpr | p_FunctionCall | p_OrderedExpr | p_UnorderedExpr | p_Constructor );";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA124_10 = input.LA(1);

                         
                        int index124_10 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA124_10==LPAREN||LA124_10==COLON) ) {s = 11;}

                        else if ( (LA124_10==LBRACKET) && ((lc(MLS)))) {s = 14;}

                         
                        input.seek(index124_10);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 124, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static final String DFA154_eotS =
        "\76\uffff";
    static final String DFA154_eofS =
        "\1\2\75\uffff";
    static final String DFA154_minS =
        "\1\22\1\0\5\uffff\1\0\66\uffff";
    static final String DFA154_maxS =
        "\1\u00ca\1\0\5\uffff\1\0\66\uffff";
    static final String DFA154_acceptS =
        "\2\uffff\1\2\10\uffff\1\1\62\uffff";
    static final String DFA154_specialS =
        "\1\0\1\1\5\uffff\1\2\66\uffff}>";
    static final String[] DFA154_transitionS = {
            "\4\2\4\uffff\1\2\3\uffff\1\2\4\uffff\1\2\2\uffff\2\2\3\uffff"+
            "\2\2\2\uffff\1\2\1\uffff\2\2\2\uffff\1\2\1\uffff\1\2\1\uffff"+
            "\2\2\2\uffff\1\2\1\uffff\3\2\2\uffff\1\2\1\uffff\3\2\2\uffff"+
            "\1\2\5\uffff\2\2\7\uffff\2\2\5\uffff\1\2\4\uffff\1\2\2\uffff"+
            "\1\2\4\uffff\1\2\3\uffff\1\2\3\uffff\2\2\6\uffff\1\2\6\uffff"+
            "\1\2\5\uffff\2\2\4\uffff\1\2\1\uffff\1\2\7\uffff\1\2\20\uffff"+
            "\1\2\1\uffff\2\2\1\uffff\4\2\1\uffff\1\2\1\13\1\1\1\7\7\2\10"+
            "\uffff\2\2",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };

    static final short[] DFA154_eot = DFA.unpackEncodedString(DFA154_eotS);
    static final short[] DFA154_eof = DFA.unpackEncodedString(DFA154_eofS);
    static final char[] DFA154_min = DFA.unpackEncodedStringToUnsignedChars(DFA154_minS);
    static final char[] DFA154_max = DFA.unpackEncodedStringToUnsignedChars(DFA154_maxS);
    static final short[] DFA154_accept = DFA.unpackEncodedString(DFA154_acceptS);
    static final short[] DFA154_special = DFA.unpackEncodedString(DFA154_specialS);
    static final short[][] DFA154_transition;

    static {
        int numStates = DFA154_transitionS.length;
        DFA154_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA154_transition[i] = DFA.unpackEncodedString(DFA154_transitionS[i]);
        }
    }

    class DFA154 extends DFA {

        public DFA154(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 154;
            this.eot = DFA154_eot;
            this.eof = DFA154_eof;
            this.min = DFA154_min;
            this.max = DFA154_max;
            this.accept = DFA154_accept;
            this.special = DFA154_special;
            this.transition = DFA154_transition;
        }
        public String getDescription() {
            return "1017:25: ( ( p_OccurrenceIndicator )=>oi= p_OccurrenceIndicator )?";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA154_0 = input.LA(1);

                         
                        int index154_0 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA154_0==STAR) ) {s = 1;}

                        else if ( (LA154_0==EOF||(LA154_0>=AND && LA154_0<=AT)||LA154_0==CASE||LA154_0==COLLATION||LA154_0==DEFAULT||(LA154_0>=DESCENDING && LA154_0<=DIV)||(LA154_0>=ELSE && LA154_0<=EMPTY)||LA154_0==EQ||(LA154_0>=EXCEPT && LA154_0<=EXTERNAL)||LA154_0==FOR||LA154_0==GE||(LA154_0>=GT && LA154_0<=IDIV)||LA154_0==IN||(LA154_0>=INSTANCE && LA154_0<=IS)||LA154_0==LE||(LA154_0>=LET && LA154_0<=MOD)||LA154_0==NE||(LA154_0>=OR && LA154_0<=ORDER)||(LA154_0>=RETURN && LA154_0<=SATISFIES)||LA154_0==STABLE||LA154_0==TO||LA154_0==UNION||LA154_0==WHERE||LA154_0==COUNT||(LA154_0>=END && LA154_0<=GROUP)||LA154_0==ONLY||LA154_0==START||(LA154_0>=AFTER && LA154_0<=BEFORE)||LA154_0==INTO||LA154_0==MODIFY||LA154_0==WITH||LA154_0==RPAREN||(LA154_0>=LBRACKET && LA154_0<=RBRACKET)||(LA154_0>=RSQUARE && LA154_0<=NOTEQUAL)||LA154_0==COMMA||(LA154_0>=MINUS && LA154_0<=GREATER_GREATER)||(LA154_0>=SEMICOLON && LA154_0<=VBAR)) ) {s = 2;}

                        else if ( (LA154_0==PLUS) ) {s = 7;}

                        else if ( (LA154_0==QUESTION) && (synpred2_XQueryParser())) {s = 11;}

                         
                        input.seek(index154_0);
                        if ( s>=0 ) return s;
                        break;
                    case 1 : 
                        int LA154_1 = input.LA(1);

                         
                        int index154_1 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred2_XQueryParser()) ) {s = 11;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index154_1);
                        if ( s>=0 ) return s;
                        break;
                    case 2 : 
                        int LA154_7 = input.LA(1);

                         
                        int index154_7 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred2_XQueryParser()) ) {s = 11;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index154_7);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 154, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static final String DFA156_eotS =
        "\21\uffff";
    static final String DFA156_eofS =
        "\1\uffff\14\15\4\uffff";
    static final String DFA156_minS =
        "\1\20\14\22\4\uffff";
    static final String DFA156_maxS =
        "\1\u00d8\14\u00ca\4\uffff";
    static final String DFA156_acceptS =
        "\15\uffff\1\4\1\1\1\2\1\3";
    static final String DFA156_specialS =
        "\13\uffff\1\0\5\uffff}>";
    static final String[] DFA156_transitionS = {
            "\6\15\1\3\10\15\1\10\11\15\1\1\1\2\27\15\1\14\13\15\1\12\12"+
            "\15\1\7\3\15\1\5\1\4\5\15\1\11\26\15\1\6\43\15\1\uffff\6\15"+
            "\1\13\4\15\55\uffff\1\15",
            "\4\15\4\uffff\1\15\3\uffff\1\15\4\uffff\1\15\2\uffff\2\15\3"+
            "\uffff\2\15\2\uffff\1\15\1\uffff\2\15\2\uffff\1\15\1\uffff\1"+
            "\15\1\uffff\2\15\2\uffff\1\15\1\uffff\3\15\2\uffff\1\15\1\uffff"+
            "\3\15\2\uffff\1\15\5\uffff\2\15\7\uffff\2\15\5\uffff\1\15\4"+
            "\uffff\1\15\2\uffff\1\15\4\uffff\1\15\3\uffff\1\15\3\uffff\2"+
            "\15\6\uffff\1\15\6\uffff\1\15\5\uffff\2\15\4\uffff\1\15\1\uffff"+
            "\1\15\7\uffff\1\15\17\uffff\1\16\1\15\1\uffff\2\15\1\uffff\4"+
            "\15\1\uffff\13\15\4\uffff\1\15\3\uffff\2\15",
            "\4\15\4\uffff\1\15\3\uffff\1\15\4\uffff\1\15\2\uffff\2\15\3"+
            "\uffff\2\15\2\uffff\1\15\1\uffff\2\15\2\uffff\1\15\1\uffff\1"+
            "\15\1\uffff\2\15\2\uffff\1\15\1\uffff\3\15\2\uffff\1\15\1\uffff"+
            "\3\15\2\uffff\1\15\5\uffff\2\15\7\uffff\2\15\5\uffff\1\15\4"+
            "\uffff\1\15\2\uffff\1\15\4\uffff\1\15\3\uffff\1\15\3\uffff\2"+
            "\15\6\uffff\1\15\6\uffff\1\15\5\uffff\2\15\4\uffff\1\15\1\uffff"+
            "\1\15\7\uffff\1\15\17\uffff\1\16\1\15\1\uffff\2\15\1\uffff\4"+
            "\15\1\uffff\13\15\4\uffff\1\15\3\uffff\2\15",
            "\4\15\4\uffff\1\15\3\uffff\1\15\4\uffff\1\15\2\uffff\2\15\3"+
            "\uffff\2\15\2\uffff\1\15\1\uffff\2\15\2\uffff\1\15\1\uffff\1"+
            "\15\1\uffff\2\15\2\uffff\1\15\1\uffff\3\15\2\uffff\1\15\1\uffff"+
            "\3\15\2\uffff\1\15\5\uffff\2\15\7\uffff\2\15\5\uffff\1\15\4"+
            "\uffff\1\15\2\uffff\1\15\4\uffff\1\15\3\uffff\1\15\3\uffff\2"+
            "\15\6\uffff\1\15\6\uffff\1\15\5\uffff\2\15\4\uffff\1\15\1\uffff"+
            "\1\15\7\uffff\1\15\17\uffff\1\16\1\15\1\uffff\2\15\1\uffff\4"+
            "\15\1\uffff\13\15\4\uffff\1\15\3\uffff\2\15",
            "\4\15\4\uffff\1\15\3\uffff\1\15\4\uffff\1\15\2\uffff\2\15\3"+
            "\uffff\2\15\2\uffff\1\15\1\uffff\2\15\2\uffff\1\15\1\uffff\1"+
            "\15\1\uffff\2\15\2\uffff\1\15\1\uffff\3\15\2\uffff\1\15\1\uffff"+
            "\3\15\2\uffff\1\15\5\uffff\2\15\7\uffff\2\15\5\uffff\1\15\4"+
            "\uffff\1\15\2\uffff\1\15\4\uffff\1\15\3\uffff\1\15\3\uffff\2"+
            "\15\6\uffff\1\15\6\uffff\1\15\5\uffff\2\15\4\uffff\1\15\1\uffff"+
            "\1\15\7\uffff\1\15\17\uffff\1\16\1\15\1\uffff\2\15\1\uffff\4"+
            "\15\1\uffff\13\15\4\uffff\1\15\3\uffff\2\15",
            "\4\15\4\uffff\1\15\3\uffff\1\15\4\uffff\1\15\2\uffff\2\15\3"+
            "\uffff\2\15\2\uffff\1\15\1\uffff\2\15\2\uffff\1\15\1\uffff\1"+
            "\15\1\uffff\2\15\2\uffff\1\15\1\uffff\3\15\2\uffff\1\15\1\uffff"+
            "\3\15\2\uffff\1\15\5\uffff\2\15\7\uffff\2\15\5\uffff\1\15\4"+
            "\uffff\1\15\2\uffff\1\15\4\uffff\1\15\3\uffff\1\15\3\uffff\2"+
            "\15\6\uffff\1\15\6\uffff\1\15\5\uffff\2\15\4\uffff\1\15\1\uffff"+
            "\1\15\7\uffff\1\15\17\uffff\1\16\1\15\1\uffff\2\15\1\uffff\4"+
            "\15\1\uffff\13\15\4\uffff\1\15\3\uffff\2\15",
            "\4\15\4\uffff\1\15\3\uffff\1\15\4\uffff\1\15\2\uffff\2\15\3"+
            "\uffff\2\15\2\uffff\1\15\1\uffff\2\15\2\uffff\1\15\1\uffff\1"+
            "\15\1\uffff\2\15\2\uffff\1\15\1\uffff\3\15\2\uffff\1\15\1\uffff"+
            "\3\15\2\uffff\1\15\5\uffff\2\15\7\uffff\2\15\5\uffff\1\15\4"+
            "\uffff\1\15\2\uffff\1\15\4\uffff\1\15\3\uffff\1\15\3\uffff\2"+
            "\15\6\uffff\1\15\6\uffff\1\15\5\uffff\2\15\4\uffff\1\15\1\uffff"+
            "\1\15\7\uffff\1\15\17\uffff\1\16\1\15\1\uffff\2\15\1\uffff\4"+
            "\15\1\uffff\13\15\4\uffff\1\15\3\uffff\2\15",
            "\4\15\4\uffff\1\15\3\uffff\1\15\4\uffff\1\15\2\uffff\2\15\3"+
            "\uffff\2\15\2\uffff\1\15\1\uffff\2\15\2\uffff\1\15\1\uffff\1"+
            "\15\1\uffff\2\15\2\uffff\1\15\1\uffff\3\15\2\uffff\1\15\1\uffff"+
            "\3\15\2\uffff\1\15\5\uffff\2\15\7\uffff\2\15\5\uffff\1\15\4"+
            "\uffff\1\15\2\uffff\1\15\4\uffff\1\15\3\uffff\1\15\3\uffff\2"+
            "\15\6\uffff\1\15\6\uffff\1\15\5\uffff\2\15\4\uffff\1\15\1\uffff"+
            "\1\15\7\uffff\1\15\17\uffff\1\16\1\15\1\uffff\2\15\1\uffff\4"+
            "\15\1\uffff\13\15\4\uffff\1\15\3\uffff\2\15",
            "\4\15\4\uffff\1\15\3\uffff\1\15\4\uffff\1\15\2\uffff\2\15\3"+
            "\uffff\2\15\2\uffff\1\15\1\uffff\2\15\2\uffff\1\15\1\uffff\1"+
            "\15\1\uffff\2\15\2\uffff\1\15\1\uffff\3\15\2\uffff\1\15\1\uffff"+
            "\3\15\2\uffff\1\15\5\uffff\2\15\7\uffff\2\15\5\uffff\1\15\4"+
            "\uffff\1\15\2\uffff\1\15\4\uffff\1\15\3\uffff\1\15\3\uffff\2"+
            "\15\6\uffff\1\15\6\uffff\1\15\5\uffff\2\15\4\uffff\1\15\1\uffff"+
            "\1\15\7\uffff\1\15\17\uffff\1\16\1\15\1\uffff\2\15\1\uffff\4"+
            "\15\1\uffff\13\15\4\uffff\1\15\3\uffff\2\15",
            "\4\15\4\uffff\1\15\3\uffff\1\15\4\uffff\1\15\2\uffff\2\15\3"+
            "\uffff\2\15\2\uffff\1\15\1\uffff\2\15\2\uffff\1\15\1\uffff\1"+
            "\15\1\uffff\2\15\2\uffff\1\15\1\uffff\3\15\2\uffff\1\15\1\uffff"+
            "\3\15\2\uffff\1\15\5\uffff\2\15\7\uffff\2\15\5\uffff\1\15\4"+
            "\uffff\1\15\2\uffff\1\15\4\uffff\1\15\3\uffff\1\15\3\uffff\2"+
            "\15\6\uffff\1\15\6\uffff\1\15\5\uffff\2\15\4\uffff\1\15\1\uffff"+
            "\1\15\7\uffff\1\15\17\uffff\1\16\1\15\1\uffff\2\15\1\uffff\4"+
            "\15\1\uffff\13\15\4\uffff\1\15\3\uffff\2\15",
            "\4\15\4\uffff\1\15\3\uffff\1\15\4\uffff\1\15\2\uffff\2\15\3"+
            "\uffff\2\15\2\uffff\1\15\1\uffff\2\15\2\uffff\1\15\1\uffff\1"+
            "\15\1\uffff\2\15\2\uffff\1\15\1\uffff\3\15\2\uffff\1\15\1\uffff"+
            "\3\15\2\uffff\1\15\5\uffff\2\15\7\uffff\2\15\5\uffff\1\15\4"+
            "\uffff\1\15\2\uffff\1\15\4\uffff\1\15\3\uffff\1\15\3\uffff\2"+
            "\15\6\uffff\1\15\6\uffff\1\15\5\uffff\2\15\4\uffff\1\15\1\uffff"+
            "\1\15\7\uffff\1\15\17\uffff\1\16\1\15\1\uffff\2\15\1\uffff\4"+
            "\15\1\uffff\13\15\4\uffff\1\15\3\uffff\2\15",
            "\4\15\4\uffff\1\15\3\uffff\1\15\4\uffff\1\15\2\uffff\2\15\3"+
            "\uffff\2\15\2\uffff\1\15\1\uffff\2\15\2\uffff\1\15\1\uffff\1"+
            "\15\1\uffff\2\15\2\uffff\1\15\1\uffff\3\15\2\uffff\1\15\1\uffff"+
            "\3\15\2\uffff\1\15\5\uffff\2\15\7\uffff\2\15\5\uffff\1\15\4"+
            "\uffff\1\15\2\uffff\1\15\4\uffff\1\15\3\uffff\1\15\3\uffff\2"+
            "\15\6\uffff\1\15\6\uffff\1\15\5\uffff\2\15\4\uffff\1\15\1\uffff"+
            "\1\15\7\uffff\1\15\17\uffff\1\17\1\15\1\uffff\2\15\1\uffff\4"+
            "\15\1\uffff\13\15\4\uffff\1\15\3\uffff\2\15",
            "\4\15\4\uffff\1\15\3\uffff\1\15\4\uffff\1\15\2\uffff\2\15\3"+
            "\uffff\2\15\2\uffff\1\15\1\uffff\2\15\2\uffff\1\15\1\uffff\1"+
            "\15\1\uffff\2\15\2\uffff\1\15\1\uffff\3\15\2\uffff\1\15\1\uffff"+
            "\3\15\2\uffff\1\15\5\uffff\2\15\7\uffff\2\15\5\uffff\1\15\4"+
            "\uffff\1\15\2\uffff\1\15\4\uffff\1\15\3\uffff\1\15\3\uffff\2"+
            "\15\6\uffff\1\15\6\uffff\1\15\5\uffff\2\15\4\uffff\1\15\1\uffff"+
            "\1\15\7\uffff\1\15\17\uffff\1\20\1\15\1\uffff\2\15\1\uffff\4"+
            "\15\1\uffff\13\15\4\uffff\1\15\3\uffff\2\15",
            "",
            "",
            "",
            ""
    };

    static final short[] DFA156_eot = DFA.unpackEncodedString(DFA156_eotS);
    static final short[] DFA156_eof = DFA.unpackEncodedString(DFA156_eofS);
    static final char[] DFA156_min = DFA.unpackEncodedStringToUnsignedChars(DFA156_minS);
    static final char[] DFA156_max = DFA.unpackEncodedStringToUnsignedChars(DFA156_maxS);
    static final short[] DFA156_accept = DFA.unpackEncodedString(DFA156_acceptS);
    static final short[] DFA156_special = DFA.unpackEncodedString(DFA156_specialS);
    static final short[][] DFA156_transition;

    static {
        int numStates = DFA156_transitionS.length;
        DFA156_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA156_transition[i] = DFA.unpackEncodedString(DFA156_transitionS[i]);
        }
    }

    class DFA156 extends DFA {

        public DFA156(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 156;
            this.eot = DFA156_eot;
            this.eof = DFA156_eof;
            this.min = DFA156_min;
            this.max = DFA156_max;
            this.accept = DFA156_accept;
            this.special = DFA156_special;
            this.transition = DFA156_transition;
        }
        public String getDescription() {
            return "1027:1: p_ItemType : ( p_KindTest -> ^( KindTest p_KindTest ) | {...}? => ( BINARY LPAREN RPAREN ) -> ^( BinaryTest BINARY LPAREN RPAREN ) | ( ITEM LPAREN RPAREN ) -> ^( ItemTest ITEM LPAREN RPAREN ) | p_AtomicType );";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA156_11 = input.LA(1);

                         
                        int index156_11 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA156_11==LPAREN) && ((lc(MLS)))) {s = 15;}

                        else if ( (LA156_11==EOF||(LA156_11>=AND && LA156_11<=AT)||LA156_11==CASE||LA156_11==COLLATION||LA156_11==DEFAULT||(LA156_11>=DESCENDING && LA156_11<=DIV)||(LA156_11>=ELSE && LA156_11<=EMPTY)||LA156_11==EQ||(LA156_11>=EXCEPT && LA156_11<=EXTERNAL)||LA156_11==FOR||LA156_11==GE||(LA156_11>=GT && LA156_11<=IDIV)||LA156_11==IN||(LA156_11>=INSTANCE && LA156_11<=IS)||LA156_11==LE||(LA156_11>=LET && LA156_11<=MOD)||LA156_11==NE||(LA156_11>=OR && LA156_11<=ORDER)||(LA156_11>=RETURN && LA156_11<=SATISFIES)||LA156_11==STABLE||LA156_11==TO||LA156_11==UNION||LA156_11==WHERE||LA156_11==COUNT||(LA156_11>=END && LA156_11<=GROUP)||LA156_11==ONLY||LA156_11==START||(LA156_11>=AFTER && LA156_11<=BEFORE)||LA156_11==INTO||LA156_11==MODIFY||LA156_11==WITH||LA156_11==RPAREN||(LA156_11>=LBRACKET && LA156_11<=RBRACKET)||(LA156_11>=RSQUARE && LA156_11<=NOTEQUAL)||(LA156_11>=COMMA && LA156_11<=GREATER_GREATER)||LA156_11==COLON||(LA156_11>=SEMICOLON && LA156_11<=VBAR)) ) {s = 13;}

                         
                        input.seek(index156_11);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 156, _s, input);
            error(nvae);
            throw nvae;
        }
    }
 

    public static final BitSet FOLLOW_p_VersionDecl_in_p_Module610 = new BitSet(new long[]{0x1000000400000000L,0x0000000000000200L});
    public static final BitSet FOLLOW_p_LibraryModule_in_p_Module645 = new BitSet(new long[]{0x0000000000000000L});
    public static final BitSet FOLLOW_p_MainModule_in_p_Module671 = new BitSet(new long[]{0x0000000000000000L});
    public static final BitSet FOLLOW_EOF_in_p_Module700 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_XQUERY_in_p_VersionDecl728 = new BitSet(new long[]{0x0000400000000000L,0x0000200000000000L});
    public static final BitSet FOLLOW_ENCODING_in_p_VersionDecl734 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000300000L});
    public static final BitSet FOLLOW_p_StringLiteral_in_p_VersionDecl738 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000200L});
    public static final BitSet FOLLOW_VERSION_in_p_VersionDecl759 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000300000L});
    public static final BitSet FOLLOW_p_StringLiteral_in_p_VersionDecl763 = new BitSet(new long[]{0x0000400000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000200L});
    public static final BitSet FOLLOW_ENCODING_in_p_VersionDecl770 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000300000L});
    public static final BitSet FOLLOW_p_StringLiteral_in_p_VersionDecl774 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000200L});
    public static final BitSet FOLLOW_SEMICOLON_in_p_VersionDecl780 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_pm_Prolog_in_p_MainModule848 = new BitSet(new long[]{0xFFFFFFFFFFFF0000L,0xFFFFFFFFFFFFFFFFL,0x0F002FFF7FFFFFFFL,0x0000001F8132001EL});
    public static final BitSet FOLLOW_p_QueryBody_in_p_MainModule850 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_p_ModuleDecl_in_p_LibraryModule906 = new BitSet(new long[]{0x1000000400000000L,0x0000000000000200L});
    public static final BitSet FOLLOW_pm_Prolog_in_p_LibraryModule908 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_MODULE_in_p_ModuleDecl964 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000400L});
    public static final BitSet FOLLOW_NAMESPACE_in_p_ModuleDecl968 = new BitSet(new long[]{0xFFFFFFFFFFFF0000L,0xFFFFFFFFFFFFFFFFL,0x000007FF7FFFFFFFL,0x0000000001000000L});
    public static final BitSet FOLLOW_p_NCName_in_p_ModuleDecl970 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0004000000000000L});
    public static final BitSet FOLLOW_EQUAL_in_p_ModuleDecl972 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000300000L});
    public static final BitSet FOLLOW_p_StringLiteral_in_p_ModuleDecl974 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000200L});
    public static final BitSet FOLLOW_SEMICOLON_in_p_ModuleDecl976 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_pm_DefaultNamespaceDecl_in_pm_Prolog1037 = new BitSet(new long[]{0x1000000400000000L});
    public static final BitSet FOLLOW_p_Setter_in_pm_Prolog1043 = new BitSet(new long[]{0x1000000400000000L});
    public static final BitSet FOLLOW_pm_NamespaceDecl_in_pm_Prolog1049 = new BitSet(new long[]{0x1000000400000000L});
    public static final BitSet FOLLOW_p_Import_in_pm_Prolog1055 = new BitSet(new long[]{0x1000000400000000L});
    public static final BitSet FOLLOW_pg_OrderedDecl_in_pm_Prolog1062 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_pm_VarDecl_in_pg_OrderedDecl1340 = new BitSet(new long[]{0x0000000400000002L});
    public static final BitSet FOLLOW_pm_ContextItemDecl_in_pg_OrderedDecl1344 = new BitSet(new long[]{0x0000000400000002L});
    public static final BitSet FOLLOW_pm_FunctionDecl_in_pg_OrderedDecl1348 = new BitSet(new long[]{0x0000000400000002L});
    public static final BitSet FOLLOW_pm_OptionDecl_in_pg_OrderedDecl1352 = new BitSet(new long[]{0x0000000400000002L});
    public static final BitSet FOLLOW_pm_BoundarySpaceDecl_in_p_Setter1383 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_pm_DefaultCollationDecl_in_p_Setter1395 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_pm_BaseURIDecl_in_p_Setter1407 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_pm_ConstructionDecl_in_p_Setter1419 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_pm_OrderingModeDecl_in_p_Setter1431 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_pm_EmptyOrderDecl_in_p_Setter1443 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_pm_RevalidationDecl_in_p_Setter1458 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_pm_CopyNamespacesDecl_in_p_Setter1470 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_pm_SchemaImport_in_p_Import1496 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_pm_ModuleImport_in_p_Import1500 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_DECLARE_in_pm_NamespaceDecl1531 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000400L});
    public static final BitSet FOLLOW_NAMESPACE_in_pm_NamespaceDecl1535 = new BitSet(new long[]{0xFFFFFFFFFFFF0000L,0xFFFFFFFFFFFFFFFFL,0x000007FF7FFFFFFFL,0x0000000001000000L});
    public static final BitSet FOLLOW_p_NCName_in_pm_NamespaceDecl1539 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0004000000000000L});
    public static final BitSet FOLLOW_EQUAL_in_pm_NamespaceDecl1541 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000300000L});
    public static final BitSet FOLLOW_p_StringLiteral_in_pm_NamespaceDecl1545 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000200L});
    public static final BitSet FOLLOW_SEMICOLON_in_pm_NamespaceDecl1547 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_DECLARE_in_pm_BoundarySpaceDecl1612 = new BitSet(new long[]{0x0000000001000000L});
    public static final BitSet FOLLOW_BOUNDARY_SPACE_in_pm_BoundarySpaceDecl1616 = new BitSet(new long[]{0x0000000000000000L,0x0000000801000000L});
    public static final BitSet FOLLOW_PRESERVE_in_pm_BoundarySpaceDecl1621 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000200L});
    public static final BitSet FOLLOW_STRIP_in_pm_BoundarySpaceDecl1627 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000200L});
    public static final BitSet FOLLOW_SEMICOLON_in_pm_BoundarySpaceDecl1630 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_DECLARE_in_pm_DefaultNamespaceDecl1660 = new BitSet(new long[]{0x0000000800000000L});
    public static final BitSet FOLLOW_DEFAULT_in_pm_DefaultNamespaceDecl1664 = new BitSet(new long[]{0x0040040000000000L});
    public static final BitSet FOLLOW_ELEMENT_in_pm_DefaultNamespaceDecl1669 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000400L});
    public static final BitSet FOLLOW_FUNCTION_in_pm_DefaultNamespaceDecl1675 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000400L});
    public static final BitSet FOLLOW_NAMESPACE_in_pm_DefaultNamespaceDecl1680 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000300000L});
    public static final BitSet FOLLOW_p_StringLiteral_in_pm_DefaultNamespaceDecl1682 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000200L});
    public static final BitSet FOLLOW_SEMICOLON_in_pm_DefaultNamespaceDecl1684 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_DECLARE_in_pm_OptionDecl1716 = new BitSet(new long[]{0x0000000000000000L,0x0000000000010000L});
    public static final BitSet FOLLOW_OPTION_in_pm_OptionDecl1720 = new BitSet(new long[]{0xFFFFFFFFFFFF0000L,0xFFFFFFFFFFFFFFFFL,0x000007FF7FFFFFFFL,0x0000000001000000L});
    public static final BitSet FOLLOW_p_QName_in_pm_OptionDecl1722 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000300000L});
    public static final BitSet FOLLOW_p_StringLiteral_in_pm_OptionDecl1724 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000200L});
    public static final BitSet FOLLOW_SEMICOLON_in_pm_OptionDecl1726 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_DECLARE_in_pm_OrderingModeDecl1758 = new BitSet(new long[]{0x0000000000000000L,0x0000000000100000L});
    public static final BitSet FOLLOW_ORDERING_in_pm_OrderingModeDecl1762 = new BitSet(new long[]{0x0000000000000000L,0x0000040000080000L});
    public static final BitSet FOLLOW_ORDERED_in_pm_OrderingModeDecl1767 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000200L});
    public static final BitSet FOLLOW_UNORDERED_in_pm_OrderingModeDecl1773 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000200L});
    public static final BitSet FOLLOW_SEMICOLON_in_pm_OrderingModeDecl1776 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_DECLARE_in_pm_EmptyOrderDecl1808 = new BitSet(new long[]{0x0000000800000000L});
    public static final BitSet FOLLOW_DEFAULT_in_pm_EmptyOrderDecl1812 = new BitSet(new long[]{0x0000000000000000L,0x0000000000040000L});
    public static final BitSet FOLLOW_ORDER_in_pm_EmptyOrderDecl1816 = new BitSet(new long[]{0x0000100000000000L});
    public static final BitSet FOLLOW_EMPTY_in_pm_EmptyOrderDecl1820 = new BitSet(new long[]{0x0100000000000000L,0x0000000000000020L});
    public static final BitSet FOLLOW_GREATEST_in_pm_EmptyOrderDecl1825 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000200L});
    public static final BitSet FOLLOW_LEAST_in_pm_EmptyOrderDecl1831 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000200L});
    public static final BitSet FOLLOW_SEMICOLON_in_pm_EmptyOrderDecl1834 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_DECLARE_in_pm_CopyNamespacesDecl1866 = new BitSet(new long[]{0x0000000200000000L});
    public static final BitSet FOLLOW_COPY_NAMESPACES_in_pm_CopyNamespacesDecl1870 = new BitSet(new long[]{0x0000000000000000L,0x0000000001002000L});
    public static final BitSet FOLLOW_p_PreserveMode_in_pm_CopyNamespacesDecl1872 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0040000000000000L});
    public static final BitSet FOLLOW_COMMA_in_pm_CopyNamespacesDecl1874 = new BitSet(new long[]{0x4000000000000000L,0x0000000000001000L});
    public static final BitSet FOLLOW_p_InheritMode_in_pm_CopyNamespacesDecl1876 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000200L});
    public static final BitSet FOLLOW_SEMICOLON_in_pm_CopyNamespacesDecl1878 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_DECLARE_in_p_DecimalFormatDecl1910 = new BitSet(new long[]{0x0000000800000000L,0x0008000000000000L});
    public static final BitSet FOLLOW_DECIMAL_FORMAT_in_p_DecimalFormatDecl1914 = new BitSet(new long[]{0xFFFFFFFFFFFF0000L,0xFFFFFFFFFFFFFFFFL,0x000007FF7FFFFFFFL,0x0000000001000000L});
    public static final BitSet FOLLOW_p_QName_in_p_DecimalFormatDecl1916 = new BitSet(new long[]{0x0000000000000000L,0x1730000000000000L,0x0000000000000407L});
    public static final BitSet FOLLOW_DEFAULT_in_p_DecimalFormatDecl1922 = new BitSet(new long[]{0x0000000000000000L,0x0008000000000000L});
    public static final BitSet FOLLOW_DECIMAL_FORMAT_in_p_DecimalFormatDecl1924 = new BitSet(new long[]{0x0000000000000000L,0x1730000000000000L,0x0000000000000407L});
    public static final BitSet FOLLOW_p_DFPropertyName_in_p_DecimalFormatDecl1929 = new BitSet(new long[]{0x0000800000000000L});
    public static final BitSet FOLLOW_EQ_in_p_DecimalFormatDecl1932 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000300000L});
    public static final BitSet FOLLOW_p_StringLiteral_in_p_DecimalFormatDecl1934 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000200L});
    public static final BitSet FOLLOW_SEMICOLON_in_p_DecimalFormatDecl1936 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_DECIMAL_SEPARATOR_in_p_DFPropertyName1966 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_GROUPING_SEPARATOR_in_p_DFPropertyName1972 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_INFINITY_in_p_DFPropertyName1978 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_MINUS_SIGN_in_p_DFPropertyName1984 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_NAN_in_p_DFPropertyName1990 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_PERCENT_in_p_DFPropertyName1996 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_PER_MILLE_in_p_DFPropertyName2002 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ZERO_DIGIT_in_p_DFPropertyName2008 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_DIGIT_in_p_DFPropertyName2014 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_PATTERN_SEPARATOR_in_p_DFPropertyName2020 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_PRESERVE_in_p_PreserveMode2053 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_NO_PRESERVE_in_p_PreserveMode2059 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_INHERIT_in_p_InheritMode2093 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_NO_INHERIT_in_p_InheritMode2099 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_DECLARE_in_pm_DefaultCollationDecl2140 = new BitSet(new long[]{0x0000000800000000L});
    public static final BitSet FOLLOW_DEFAULT_in_pm_DefaultCollationDecl2144 = new BitSet(new long[]{0x0000000040000000L});
    public static final BitSet FOLLOW_COLLATION_in_pm_DefaultCollationDecl2148 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000300000L});
    public static final BitSet FOLLOW_p_StringLiteral_in_pm_DefaultCollationDecl2150 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000200L});
    public static final BitSet FOLLOW_SEMICOLON_in_pm_DefaultCollationDecl2152 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_DECLARE_in_pm_BaseURIDecl2192 = new BitSet(new long[]{0x0000000000800000L});
    public static final BitSet FOLLOW_BASE_URI_in_pm_BaseURIDecl2196 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000300000L});
    public static final BitSet FOLLOW_p_StringLiteral_in_pm_BaseURIDecl2200 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000200L});
    public static final BitSet FOLLOW_SEMICOLON_in_pm_BaseURIDecl2202 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_IMPORT_in_pm_SchemaImport2257 = new BitSet(new long[]{0x0000000000000000L,0x0000000010000000L});
    public static final BitSet FOLLOW_SCHEMA_in_pm_SchemaImport2261 = new BitSet(new long[]{0x0000000800000000L,0x0000000000000400L,0x0000000000000000L,0x0000000000300000L});
    public static final BitSet FOLLOW_p_SchemaPrefix_in_pm_SchemaImport2265 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000300000L});
    public static final BitSet FOLLOW_p_StringLiteral_in_pm_SchemaImport2270 = new BitSet(new long[]{0x0000000000200000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000200L});
    public static final BitSet FOLLOW_AT_in_pm_SchemaImport2275 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000300000L});
    public static final BitSet FOLLOW_p_StringLiteral_in_pm_SchemaImport2279 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0040000000000000L,0x0000000000000200L});
    public static final BitSet FOLLOW_COMMA_in_pm_SchemaImport2282 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000300000L});
    public static final BitSet FOLLOW_p_StringLiteral_in_pm_SchemaImport2286 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0040000000000000L,0x0000000000000200L});
    public static final BitSet FOLLOW_SEMICOLON_in_pm_SchemaImport2292 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_NAMESPACE_in_p_SchemaPrefix2364 = new BitSet(new long[]{0xFFFFFFFFFFFF0000L,0xFFFFFFFFFFFFFFFFL,0x000007FF7FFFFFFFL,0x0000000001000000L});
    public static final BitSet FOLLOW_p_NCName_in_p_SchemaPrefix2368 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0004000000000000L});
    public static final BitSet FOLLOW_EQUAL_in_p_SchemaPrefix2370 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_DEFAULT_in_p_SchemaPrefix2411 = new BitSet(new long[]{0x0000040000000000L});
    public static final BitSet FOLLOW_ELEMENT_in_p_SchemaPrefix2415 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000400L});
    public static final BitSet FOLLOW_NAMESPACE_in_p_SchemaPrefix2419 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_IMPORT_in_pm_ModuleImport2469 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000200L});
    public static final BitSet FOLLOW_MODULE_in_pm_ModuleImport2473 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000400L,0x0000000000000000L,0x0000000000300000L});
    public static final BitSet FOLLOW_NAMESPACE_in_pm_ModuleImport2478 = new BitSet(new long[]{0xFFFFFFFFFFFF0000L,0xFFFFFFFFFFFFFFFFL,0x000007FF7FFFFFFFL,0x0000000001000000L});
    public static final BitSet FOLLOW_p_NCName_in_pm_ModuleImport2482 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0004000000000000L});
    public static final BitSet FOLLOW_EQUAL_in_pm_ModuleImport2484 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000300000L});
    public static final BitSet FOLLOW_p_StringLiteral_in_pm_ModuleImport2490 = new BitSet(new long[]{0x0000000000200000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000200L});
    public static final BitSet FOLLOW_AT_in_pm_ModuleImport2495 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000300000L});
    public static final BitSet FOLLOW_p_StringLiteral_in_pm_ModuleImport2499 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0040000000000000L,0x0000000000000200L});
    public static final BitSet FOLLOW_COMMA_in_pm_ModuleImport2502 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000300000L});
    public static final BitSet FOLLOW_p_StringLiteral_in_pm_ModuleImport2506 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0040000000000000L,0x0000000000000200L});
    public static final BitSet FOLLOW_SEMICOLON_in_pm_ModuleImport2512 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_DECLARE_in_pm_VarDecl2583 = new BitSet(new long[]{0x0000000000000000L,0x0000100000000000L,0x0000008020000000L});
    public static final BitSet FOLLOW_p_PrivateOption_in_pm_VarDecl2585 = new BitSet(new long[]{0x0000000000000000L,0x0000100000000000L,0x0000008020000000L});
    public static final BitSet FOLLOW_pg_VarDeclType_in_pm_VarDecl2589 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000200000000000L});
    public static final BitSet FOLLOW_DOLLAR_in_pm_VarDecl2591 = new BitSet(new long[]{0xFFFFFFFFFFFF0000L,0xFFFFFFFFFFFFFFFFL,0x000007FF7FFFFFFFL,0x0000000001000000L});
    public static final BitSet FOLLOW_p_QName_in_pm_VarDecl2595 = new BitSet(new long[]{0x0004000000080000L,0x0000000000000000L,0x0008000000000000L});
    public static final BitSet FOLLOW_p_TypeDeclaration_in_pm_VarDecl2599 = new BitSet(new long[]{0x0004000000000000L,0x0000000000000000L,0x0008000000000000L});
    public static final BitSet FOLLOW_BIND_in_pm_VarDecl2604 = new BitSet(new long[]{0xFFFFFFFFFFFF0000L,0xFFFFFFFFFFFFFFFFL,0x0F002FFF7FFFFFFFL,0x0000001F8132001EL});
    public static final BitSet FOLLOW_p_ExprSingle_in_pm_VarDecl2608 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000200L});
    public static final BitSet FOLLOW_EXTERNAL_in_pm_VarDecl2616 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0008000000000000L,0x0000000000000200L});
    public static final BitSet FOLLOW_BIND_in_pm_VarDecl2619 = new BitSet(new long[]{0xFFFFFFFFFFFF0000L,0xFFFFFFFFFFFFFFFFL,0x0F002FFF7FFFFFFFL,0x0000001F8132001EL});
    public static final BitSet FOLLOW_p_ExprSingle_in_pm_VarDecl2623 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000200L});
    public static final BitSet FOLLOW_SEMICOLON_in_pm_VarDecl2629 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_CONSTANT_in_pg_VarDeclType2717 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_VARIABLE_in_pg_VarDeclType2753 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_DECLARE_in_pm_ContextItemDecl2812 = new BitSet(new long[]{0x0000000000000000L,0x0002000000000000L});
    public static final BitSet FOLLOW_CONTEXT_in_pm_ContextItemDecl2816 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000004L});
    public static final BitSet FOLLOW_ITEM_in_pm_ContextItemDecl2820 = new BitSet(new long[]{0x0004000000080000L,0x0000000000000000L,0x0008000000000000L});
    public static final BitSet FOLLOW_AS_in_pm_ContextItemDecl2825 = new BitSet(new long[]{0xFFFFFFFFFFFF0000L,0xFFFFFFFFFFFFFFFFL,0x000007FF7FFFFFFFL,0x0000000001000000L});
    public static final BitSet FOLLOW_p_ItemType_in_pm_ContextItemDecl2827 = new BitSet(new long[]{0x0004000000000000L,0x0000000000000000L,0x0008000000000000L});
    public static final BitSet FOLLOW_BIND_in_pm_ContextItemDecl2833 = new BitSet(new long[]{0xFFFFFFFFFFFF0000L,0xFFFFFFFFFFFFFFFFL,0x0F002FFF7FFFFFFFL,0x0000001F8132001EL});
    public static final BitSet FOLLOW_p_ExprSingle_in_pm_ContextItemDecl2835 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000200L});
    public static final BitSet FOLLOW_EXTERNAL_in_pm_ContextItemDecl2843 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0008000000000000L,0x0000000000000200L});
    public static final BitSet FOLLOW_BIND_in_pm_ContextItemDecl2846 = new BitSet(new long[]{0xFFFFFFFFFFFF0000L,0xFFFFFFFFFFFFFFFFL,0x0F002FFF7FFFFFFFL,0x0000001F8132001EL});
    public static final BitSet FOLLOW_p_ExprSingle_in_pm_ContextItemDecl2848 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000200L});
    public static final BitSet FOLLOW_SEMICOLON_in_pm_ContextItemDecl2854 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_DECLARE_in_pm_ConstructionDecl2889 = new BitSet(new long[]{0x0000000100000000L});
    public static final BitSet FOLLOW_CONSTRUCTION_in_pm_ConstructionDecl2893 = new BitSet(new long[]{0x0000000000000000L,0x0000000801000000L});
    public static final BitSet FOLLOW_STRIP_in_pm_ConstructionDecl2898 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000200L});
    public static final BitSet FOLLOW_PRESERVE_in_pm_ConstructionDecl2904 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000200L});
    public static final BitSet FOLLOW_SEMICOLON_in_pm_ConstructionDecl2907 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_DECLARE_in_pm_FunctionDecl2944 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000100000000L});
    public static final BitSet FOLLOW_SEQUENTIAL_in_pm_FunctionDecl2948 = new BitSet(new long[]{0x0040000000000000L});
    public static final BitSet FOLLOW_FUNCTION_in_pm_FunctionDecl2952 = new BitSet(new long[]{0xFFFFFFFFFFFF0000L,0xFFFFFFFFFFFFFFFFL,0x000007FF7FFFFFFFL,0x0000000001000000L});
    public static final BitSet FOLLOW_p_QName_in_pm_FunctionDecl2956 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000080000000000L});
    public static final BitSet FOLLOW_LPAREN_in_pm_FunctionDecl2958 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000300000000000L});
    public static final BitSet FOLLOW_p_ParamList_in_pm_FunctionDecl2962 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000100000000000L});
    public static final BitSet FOLLOW_RPAREN_in_pm_FunctionDecl2965 = new BitSet(new long[]{0x0004000000080000L,0x0000000000000000L,0x0000400000000000L});
    public static final BitSet FOLLOW_p_TypeDeclaration_in_pm_FunctionDecl2969 = new BitSet(new long[]{0x0004000000000000L,0x0000000000000000L,0x0000400000000000L});
    public static final BitSet FOLLOW_p_Block_in_pm_FunctionDecl2975 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000200L});
    public static final BitSet FOLLOW_EXTERNAL_in_pm_FunctionDecl2981 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000200L});
    public static final BitSet FOLLOW_SEMICOLON_in_pm_FunctionDecl2984 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_DECLARE_in_pm_FunctionDecl3047 = new BitSet(new long[]{0x0040000000000000L,0x0000000000000000L,0x0000008402000000L});
    public static final BitSet FOLLOW_p_PrivateOption_in_pm_FunctionDecl3049 = new BitSet(new long[]{0x0040000000000000L,0x0000000000000000L,0x0000000402000000L});
    public static final BitSet FOLLOW_p_FunctionType_in_pm_FunctionDecl3051 = new BitSet(new long[]{0x0040000000000000L});
    public static final BitSet FOLLOW_FUNCTION_in_pm_FunctionDecl3055 = new BitSet(new long[]{0xFFFFFFFFFFFF0000L,0xFFFFFFFFFFFFFFFFL,0x000007FF7FFFFFFFL,0x0000000001000000L});
    public static final BitSet FOLLOW_p_QName_in_pm_FunctionDecl3059 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000080000000000L});
    public static final BitSet FOLLOW_LPAREN_in_pm_FunctionDecl3061 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000300000000000L});
    public static final BitSet FOLLOW_p_ParamList_in_pm_FunctionDecl3065 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000100000000000L});
    public static final BitSet FOLLOW_RPAREN_in_pm_FunctionDecl3068 = new BitSet(new long[]{0x0004000000080000L,0x0000000000000000L,0x0000400000000000L});
    public static final BitSet FOLLOW_p_TypeDeclaration_in_pm_FunctionDecl3072 = new BitSet(new long[]{0x0004000000000000L,0x0000000000000000L,0x0000400000000000L});
    public static final BitSet FOLLOW_p_EnclosedExpr_in_pm_FunctionDecl3078 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000200L});
    public static final BitSet FOLLOW_EXTERNAL_in_pm_FunctionDecl3084 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000200L});
    public static final BitSet FOLLOW_SEMICOLON_in_pm_FunctionDecl3087 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_UPDATING_in_p_FunctionType3168 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_SIMPLE_in_p_FunctionType3187 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_PRIVATE_in_p_PrivateOption3231 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_p_Param_in_p_ParamList3276 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0040000000000000L});
    public static final BitSet FOLLOW_COMMA_in_p_ParamList3279 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000200000000000L});
    public static final BitSet FOLLOW_p_Param_in_p_ParamList3283 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0040000000000000L});
    public static final BitSet FOLLOW_DOLLAR_in_p_Param3341 = new BitSet(new long[]{0xFFFFFFFFFFFF0000L,0xFFFFFFFFFFFFFFFFL,0x000007FF7FFFFFFFL,0x0000000001000000L});
    public static final BitSet FOLLOW_p_QName_in_p_Param3345 = new BitSet(new long[]{0x0000000000080002L});
    public static final BitSet FOLLOW_p_TypeDeclaration_in_p_Param3349 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_LBRACKET_in_p_EnclosedExpr3405 = new BitSet(new long[]{0xFFFFFFFFFFFF0000L,0xFFFFFFFFFFFFFFFFL,0x0F002FFF7FFFFFFFL,0x0000001F8132001EL});
    public static final BitSet FOLLOW_pm_Expr_in_p_EnclosedExpr3407 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000800000000000L});
    public static final BitSet FOLLOW_RBRACKET_in_p_EnclosedExpr3409 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_pm_Expr_in_p_QueryBody3459 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_p_ConcatExpr_in_pm_Expr3510 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000200L});
    public static final BitSet FOLLOW_SEMICOLON_in_pm_Expr3527 = new BitSet(new long[]{0xFFFFFFFFFFFF0002L,0xFFFFFFFFFFFFFFFFL,0x0F002FFF7FFFFFFFL,0x0000001F8132021EL});
    public static final BitSet FOLLOW_pm_ApplyExpr_in_pm_Expr3529 = new BitSet(new long[]{0xFFFFFFFFFFFF0002L,0xFFFFFFFFFFFFFFFFL,0x0F002FFF7FFFFFFFL,0x0000001F8132021EL});
    public static final BitSet FOLLOW_SEMICOLON_in_pm_Expr3554 = new BitSet(new long[]{0xFFFFFFFFFFFF0000L,0xFFFFFFFFFFFFFFFFL,0x0F002FFF7FFFFFFFL,0x0000001F8132001EL});
    public static final BitSet FOLLOW_p_ConcatExpr_in_pm_Expr3556 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000200L});
    public static final BitSet FOLLOW_p_FLWORExpr_in_p_ExprSingle3590 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_p_QuantifiedExpr_in_p_ExprSingle3602 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_p_TypeswitchExpr_in_p_ExprSingle3614 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_p_IfExpr_in_p_ExprSingle3626 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_p_TryCatchExpr_in_p_ExprSingle3638 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_p_EvalExpr_in_p_ExprSingle3653 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_p_InsertExpr_in_p_ExprSingle3668 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_p_DeleteExpr_in_p_ExprSingle3683 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_p_RenameExpr_in_p_ExprSingle3698 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_p_ReplaceExpr_in_p_ExprSingle3713 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_p_TransformExpr_in_p_ExprSingle3728 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_p_BlockExpr_in_p_ExprSingle3743 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_p_AssignmentExpr_in_p_ExprSingle3758 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_p_ExitExpr_in_p_ExprSingle3773 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_p_WhileExpr_in_p_ExprSingle3788 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_p_OrExpr_in_p_ExprSingle3800 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_p_InitialClause_in_p_FLWORExpr3826 = new BitSet(new long[]{0x0020000000000000L,0x0084400204040040L});
    public static final BitSet FOLLOW_p_IntermediateClause_in_p_FLWORExpr3828 = new BitSet(new long[]{0x0020000000000000L,0x0084400204040040L});
    public static final BitSet FOLLOW_p_ReturnClause_in_p_FLWORExpr3831 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_p_ForClause_in_p_InitialClause3857 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_p_LetClause_in_p_InitialClause3861 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_p_WindowClause_in_p_InitialClause3865 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_p_InitialClause_in_p_IntermediateClause3891 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_p_WhereClause_in_p_IntermediateClause3895 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_p_GroupByClause_in_p_IntermediateClause3899 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_p_OrderByClause_in_p_IntermediateClause3903 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_p_CountClause_in_p_IntermediateClause3907 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_FOR_in_p_ForClause3935 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000200000000000L});
    public static final BitSet FOLLOW_DOLLAR_in_p_ForClause3937 = new BitSet(new long[]{0xFFFFFFFFFFFF0000L,0xFFFFFFFFFFFFFFFFL,0x000007FF7FFFFFFFL,0x0000000001000000L});
    public static final BitSet FOLLOW_p_VarName_in_p_ForClause3939 = new BitSet(new long[]{0x2000000000280000L});
    public static final BitSet FOLLOW_p_TypeDeclaration_in_p_ForClause3941 = new BitSet(new long[]{0x2000000000200000L});
    public static final BitSet FOLLOW_p_PositionalVar_in_p_ForClause3944 = new BitSet(new long[]{0x2000000000000000L});
    public static final BitSet FOLLOW_IN_in_p_ForClause3949 = new BitSet(new long[]{0xFFFFFFFFFFFF0000L,0xFFFFFFFFFFFFFFFFL,0x0F002FFF7FFFFFFFL,0x0000001F8132001EL});
    public static final BitSet FOLLOW_p_ExprSingle_in_p_ForClause3951 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0040000000000000L});
    public static final BitSet FOLLOW_COMMA_in_p_ForClause3954 = new BitSet(new long[]{0xFFFFFFFFFFFF0000L,0xFFFFFFFFFFFFFFFFL,0x000007FF7FFFFFFFL,0x0000000001000000L});
    public static final BitSet FOLLOW_p_QName_in_p_ForClause3956 = new BitSet(new long[]{0x2000000000280000L});
    public static final BitSet FOLLOW_p_TypeDeclaration_in_p_ForClause3958 = new BitSet(new long[]{0x2000000000200000L});
    public static final BitSet FOLLOW_p_PositionalVar_in_p_ForClause3961 = new BitSet(new long[]{0x2000000000000000L});
    public static final BitSet FOLLOW_IN_in_p_ForClause3966 = new BitSet(new long[]{0xFFFFFFFFFFFF0000L,0xFFFFFFFFFFFFFFFFL,0x0F002FFF7FFFFFFFL,0x0000001F8132001EL});
    public static final BitSet FOLLOW_p_ExprSingle_in_p_ForClause3968 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0040000000000000L});
    public static final BitSet FOLLOW_AT_in_p_PositionalVar4000 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000200000000000L});
    public static final BitSet FOLLOW_DOLLAR_in_p_PositionalVar4004 = new BitSet(new long[]{0xFFFFFFFFFFFF0000L,0xFFFFFFFFFFFFFFFFL,0x000007FF7FFFFFFFL,0x0000000001000000L});
    public static final BitSet FOLLOW_p_VarName_in_p_PositionalVar4006 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_LET_in_p_LetClause4034 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000200000000000L});
    public static final BitSet FOLLOW_DOLLAR_in_p_LetClause4038 = new BitSet(new long[]{0xFFFFFFFFFFFF0000L,0xFFFFFFFFFFFFFFFFL,0x000007FF7FFFFFFFL,0x0000000001000000L});
    public static final BitSet FOLLOW_p_VarName_in_p_LetClause4040 = new BitSet(new long[]{0x0000000000080000L,0x0000000000000000L,0x0008000000000000L});
    public static final BitSet FOLLOW_p_TypeDeclaration_in_p_LetClause4042 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0008000000000000L});
    public static final BitSet FOLLOW_BIND_in_p_LetClause4045 = new BitSet(new long[]{0xFFFFFFFFFFFF0000L,0xFFFFFFFFFFFFFFFFL,0x0F002FFF7FFFFFFFL,0x0000001F8132001EL});
    public static final BitSet FOLLOW_p_ExprSingle_in_p_LetClause4047 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0040000000000000L});
    public static final BitSet FOLLOW_COMMA_in_p_LetClause4050 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000200000000000L});
    public static final BitSet FOLLOW_DOLLAR_in_p_LetClause4052 = new BitSet(new long[]{0xFFFFFFFFFFFF0000L,0xFFFFFFFFFFFFFFFFL,0x000007FF7FFFFFFFL,0x0000000001000000L});
    public static final BitSet FOLLOW_p_VarName_in_p_LetClause4054 = new BitSet(new long[]{0x0000000000080000L,0x0000000000000000L,0x0008000000000000L});
    public static final BitSet FOLLOW_p_TypeDeclaration_in_p_LetClause4056 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0008000000000000L});
    public static final BitSet FOLLOW_BIND_in_p_LetClause4059 = new BitSet(new long[]{0xFFFFFFFFFFFF0000L,0xFFFFFFFFFFFFFFFFL,0x0F002FFF7FFFFFFFL,0x0000001F8132001EL});
    public static final BitSet FOLLOW_p_ExprSingle_in_p_LetClause4061 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0040000000000000L});
    public static final BitSet FOLLOW_FOR_in_p_WindowClause4091 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000090L});
    public static final BitSet FOLLOW_p_TumblingWindowClause_in_p_WindowClause4096 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_p_SlidingWindowClause_in_p_WindowClause4100 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_TUMBLING_in_p_TumblingWindowClause4137 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000200L});
    public static final BitSet FOLLOW_WINDOW_in_p_TumblingWindowClause4141 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000200000000000L});
    public static final BitSet FOLLOW_DOLLAR_in_p_TumblingWindowClause4143 = new BitSet(new long[]{0xFFFFFFFFFFFF0000L,0xFFFFFFFFFFFFFFFFL,0x000007FF7FFFFFFFL,0x0000000001000000L});
    public static final BitSet FOLLOW_p_VarName_in_p_TumblingWindowClause4145 = new BitSet(new long[]{0x2000000000080000L});
    public static final BitSet FOLLOW_p_TypeDeclaration_in_p_TumblingWindowClause4147 = new BitSet(new long[]{0x2000000000000000L});
    public static final BitSet FOLLOW_IN_in_p_TumblingWindowClause4150 = new BitSet(new long[]{0xFFFFFFFFFFFF0000L,0xFFFFFFFFFFFFFFFFL,0x0F002FFF7FFFFFFFL,0x0000001F8132001EL});
    public static final BitSet FOLLOW_p_ExprSingle_in_p_TumblingWindowClause4152 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000020L});
    public static final BitSet FOLLOW_p_WindowStartCondition_in_p_TumblingWindowClause4154 = new BitSet(new long[]{0x0000000000000002L,0x4040000000000000L});
    public static final BitSet FOLLOW_p_WindowEndCondition_in_p_TumblingWindowClause4156 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_SLIDING_in_p_SlidingWindowClause4187 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000200L});
    public static final BitSet FOLLOW_WINDOW_in_p_SlidingWindowClause4191 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000200000000000L});
    public static final BitSet FOLLOW_DOLLAR_in_p_SlidingWindowClause4193 = new BitSet(new long[]{0xFFFFFFFFFFFF0000L,0xFFFFFFFFFFFFFFFFL,0x000007FF7FFFFFFFL,0x0000000001000000L});
    public static final BitSet FOLLOW_p_VarName_in_p_SlidingWindowClause4195 = new BitSet(new long[]{0x2000000000080000L});
    public static final BitSet FOLLOW_p_TypeDeclaration_in_p_SlidingWindowClause4197 = new BitSet(new long[]{0x2000000000000000L});
    public static final BitSet FOLLOW_IN_in_p_SlidingWindowClause4200 = new BitSet(new long[]{0xFFFFFFFFFFFF0000L,0xFFFFFFFFFFFFFFFFL,0x0F002FFF7FFFFFFFL,0x0000001F8132001EL});
    public static final BitSet FOLLOW_p_ExprSingle_in_p_SlidingWindowClause4202 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000020L});
    public static final BitSet FOLLOW_p_WindowStartCondition_in_p_SlidingWindowClause4204 = new BitSet(new long[]{0x0000000000000002L,0x4040000000000000L});
    public static final BitSet FOLLOW_p_WindowEndCondition_in_p_SlidingWindowClause4206 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_START_in_p_WindowStartCondition4237 = new BitSet(new long[]{0x0000000000200000L,0x2000000000000000L,0x0000200000000108L});
    public static final BitSet FOLLOW_p_WindowVars_in_p_WindowStartCondition4239 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000100L});
    public static final BitSet FOLLOW_WHEN_in_p_WindowStartCondition4243 = new BitSet(new long[]{0xFFFFFFFFFFFF0000L,0xFFFFFFFFFFFFFFFFL,0x0F002FFF7FFFFFFFL,0x0000001F8132001EL});
    public static final BitSet FOLLOW_p_ExprSingle_in_p_WindowStartCondition4245 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ONLY_in_p_WindowEndCondition4275 = new BitSet(new long[]{0x0000000000000000L,0x0040000000000000L});
    public static final BitSet FOLLOW_END_in_p_WindowEndCondition4280 = new BitSet(new long[]{0x0000000000200000L,0x2000000000000000L,0x0000200000000108L});
    public static final BitSet FOLLOW_p_WindowVars_in_p_WindowEndCondition4282 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000100L});
    public static final BitSet FOLLOW_WHEN_in_p_WindowEndCondition4286 = new BitSet(new long[]{0xFFFFFFFFFFFF0000L,0xFFFFFFFFFFFFFFFFL,0x0F002FFF7FFFFFFFL,0x0000001F8132001EL});
    public static final BitSet FOLLOW_p_ExprSingle_in_p_WindowEndCondition4288 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_DOLLAR_in_p_WindowVars4317 = new BitSet(new long[]{0xFFFFFFFFFFFF0000L,0xFFFFFFFFFFFFFFFFL,0x000007FF7FFFFFFFL,0x0000000001000000L});
    public static final BitSet FOLLOW_p_QName_in_p_WindowVars4319 = new BitSet(new long[]{0x0000000000200002L,0x2000000000000000L,0x0000000000000008L});
    public static final BitSet FOLLOW_p_PositionalVar_in_p_WindowVars4323 = new BitSet(new long[]{0x0000000000000002L,0x2000000000000000L,0x0000000000000008L});
    public static final BitSet FOLLOW_PREVIOUS_in_p_WindowVars4329 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000200000000000L});
    public static final BitSet FOLLOW_DOLLAR_in_p_WindowVars4331 = new BitSet(new long[]{0xFFFFFFFFFFFF0000L,0xFFFFFFFFFFFFFFFFL,0x000007FF7FFFFFFFL,0x0000000001000000L});
    public static final BitSet FOLLOW_p_QName_in_p_WindowVars4333 = new BitSet(new long[]{0x0000000000000002L,0x2000000000000000L});
    public static final BitSet FOLLOW_NEXT_in_p_WindowVars4340 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000200000000000L});
    public static final BitSet FOLLOW_DOLLAR_in_p_WindowVars4342 = new BitSet(new long[]{0xFFFFFFFFFFFF0000L,0xFFFFFFFFFFFFFFFFL,0x000007FF7FFFFFFFL,0x0000000001000000L});
    public static final BitSet FOLLOW_p_QName_in_p_WindowVars4344 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_COUNT_in_p_CountClause4385 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000200000000000L});
    public static final BitSet FOLLOW_DOLLAR_in_p_CountClause4389 = new BitSet(new long[]{0xFFFFFFFFFFFF0000L,0xFFFFFFFFFFFFFFFFL,0x000007FF7FFFFFFFL,0x0000000001000000L});
    public static final BitSet FOLLOW_p_VarName_in_p_CountClause4391 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_WHERE_in_p_WhereClause4427 = new BitSet(new long[]{0xFFFFFFFFFFFF0000L,0xFFFFFFFFFFFFFFFFL,0x0F002FFF7FFFFFFFL,0x0000001F8132001EL});
    public static final BitSet FOLLOW_p_ExprSingle_in_p_WhereClause4431 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_GROUP_in_p_GroupByClause4461 = new BitSet(new long[]{0x0000000002000000L});
    public static final BitSet FOLLOW_BY_in_p_GroupByClause4465 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000200000000000L});
    public static final BitSet FOLLOW_p_GroupingSpecList_in_p_GroupByClause4467 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_p_GroupingSpec_in_p_GroupingSpecList4497 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0040000000000000L});
    public static final BitSet FOLLOW_COMMA_in_p_GroupingSpecList4500 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000200000000000L});
    public static final BitSet FOLLOW_p_GroupingSpec_in_p_GroupingSpecList4502 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0040000000000000L});
    public static final BitSet FOLLOW_DOLLAR_in_p_GroupingSpec4532 = new BitSet(new long[]{0xFFFFFFFFFFFF0000L,0xFFFFFFFFFFFFFFFFL,0x000007FF7FFFFFFFL,0x0000000001000000L});
    public static final BitSet FOLLOW_p_VarName_in_p_GroupingSpec4534 = new BitSet(new long[]{0x0000000040000002L});
    public static final BitSet FOLLOW_COLLATION_in_p_GroupingSpec4539 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000300000L});
    public static final BitSet FOLLOW_p_StringLiteral_in_p_GroupingSpec4541 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ORDER_in_p_OrderByClause4577 = new BitSet(new long[]{0x0000000002000000L});
    public static final BitSet FOLLOW_BY_in_p_OrderByClause4581 = new BitSet(new long[]{0xFFFFFFFFFFFF0000L,0xFFFFFFFFFFFFFFFFL,0x0F002FFF7FFFFFFFL,0x0000001F8132001EL});
    public static final BitSet FOLLOW_STABLE_in_p_OrderByClause4589 = new BitSet(new long[]{0x0000000000000000L,0x0000000000040000L});
    public static final BitSet FOLLOW_ORDER_in_p_OrderByClause4593 = new BitSet(new long[]{0x0000000002000000L});
    public static final BitSet FOLLOW_BY_in_p_OrderByClause4597 = new BitSet(new long[]{0xFFFFFFFFFFFF0000L,0xFFFFFFFFFFFFFFFFL,0x0F002FFF7FFFFFFFL,0x0000001F8132001EL});
    public static final BitSet FOLLOW_p_OrderSpecList_in_p_OrderByClause4601 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_p_OrderSpec_in_p_OrderSpecList4631 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0040000000000000L});
    public static final BitSet FOLLOW_COMMA_in_p_OrderSpecList4634 = new BitSet(new long[]{0xFFFFFFFFFFFF0000L,0xFFFFFFFFFFFFFFFFL,0x0F002FFF7FFFFFFFL,0x0000001F8132001EL});
    public static final BitSet FOLLOW_p_OrderSpec_in_p_OrderSpecList4636 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0040000000000000L});
    public static final BitSet FOLLOW_p_ExprSingle_in_p_OrderSpec4666 = new BitSet(new long[]{0x0000104040100000L});
    public static final BitSet FOLLOW_p_OrderModifier_in_p_OrderSpec4668 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ASCENDING_in_p_OrderModifier4697 = new BitSet(new long[]{0x0000100040000002L});
    public static final BitSet FOLLOW_DESCENDING_in_p_OrderModifier4703 = new BitSet(new long[]{0x0000100040000002L});
    public static final BitSet FOLLOW_EMPTY_in_p_OrderModifier4710 = new BitSet(new long[]{0x0100000000000000L,0x0000000000000020L});
    public static final BitSet FOLLOW_GREATEST_in_p_OrderModifier4715 = new BitSet(new long[]{0x0000000040000002L});
    public static final BitSet FOLLOW_LEAST_in_p_OrderModifier4721 = new BitSet(new long[]{0x0000000040000002L});
    public static final BitSet FOLLOW_COLLATION_in_p_OrderModifier4729 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000300000L});
    public static final BitSet FOLLOW_p_StringLiteral_in_p_OrderModifier4731 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_RETURN_in_p_ReturnClause4763 = new BitSet(new long[]{0xFFFFFFFFFFFF0000L,0xFFFFFFFFFFFFFFFFL,0x0F002FFF7FFFFFFFL,0x0000001F8132001EL});
    public static final BitSet FOLLOW_p_ExprSingle_in_p_ReturnClause4767 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_SOME_in_p_QuantifiedExpr4798 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000200000000000L});
    public static final BitSet FOLLOW_EVERY_in_p_QuantifiedExpr4804 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000200000000000L});
    public static final BitSet FOLLOW_DOLLAR_in_p_QuantifiedExpr4807 = new BitSet(new long[]{0xFFFFFFFFFFFF0000L,0xFFFFFFFFFFFFFFFFL,0x000007FF7FFFFFFFL,0x0000000001000000L});
    public static final BitSet FOLLOW_p_VarName_in_p_QuantifiedExpr4809 = new BitSet(new long[]{0x2000000000080000L});
    public static final BitSet FOLLOW_p_TypeDeclaration_in_p_QuantifiedExpr4811 = new BitSet(new long[]{0x2000000000000000L});
    public static final BitSet FOLLOW_IN_in_p_QuantifiedExpr4816 = new BitSet(new long[]{0xFFFFFFFFFFFF0000L,0xFFFFFFFFFFFFFFFFL,0x0F002FFF7FFFFFFFL,0x0000001F8132001EL});
    public static final BitSet FOLLOW_p_ExprSingle_in_p_QuantifiedExpr4818 = new BitSet(new long[]{0x0000000000000000L,0x0000000008000000L,0x0040000000000000L});
    public static final BitSet FOLLOW_COMMA_in_p_QuantifiedExpr4821 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000200000000000L});
    public static final BitSet FOLLOW_DOLLAR_in_p_QuantifiedExpr4823 = new BitSet(new long[]{0xFFFFFFFFFFFF0000L,0xFFFFFFFFFFFFFFFFL,0x000007FF7FFFFFFFL,0x0000000001000000L});
    public static final BitSet FOLLOW_p_QName_in_p_QuantifiedExpr4825 = new BitSet(new long[]{0x2000000000080000L});
    public static final BitSet FOLLOW_p_TypeDeclaration_in_p_QuantifiedExpr4827 = new BitSet(new long[]{0x2000000000000000L});
    public static final BitSet FOLLOW_IN_in_p_QuantifiedExpr4832 = new BitSet(new long[]{0xFFFFFFFFFFFF0000L,0xFFFFFFFFFFFFFFFFL,0x0F002FFF7FFFFFFFL,0x0000001F8132001EL});
    public static final BitSet FOLLOW_p_ExprSingle_in_p_QuantifiedExpr4834 = new BitSet(new long[]{0x0000000000000000L,0x0000000008000000L,0x0040000000000000L});
    public static final BitSet FOLLOW_SATISFIES_in_p_QuantifiedExpr4840 = new BitSet(new long[]{0xFFFFFFFFFFFF0000L,0xFFFFFFFFFFFFFFFFL,0x0F002FFF7FFFFFFFL,0x0000001F8132001EL});
    public static final BitSet FOLLOW_p_ExprSingle_in_p_QuantifiedExpr4842 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_TYPESWITCH_in_p_TypeswitchExpr4872 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000080000000000L});
    public static final BitSet FOLLOW_LPAREN_in_p_TypeswitchExpr4874 = new BitSet(new long[]{0xFFFFFFFFFFFF0000L,0xFFFFFFFFFFFFFFFFL,0x0F002FFF7FFFFFFFL,0x0000001F8132001EL});
    public static final BitSet FOLLOW_pm_Expr_in_p_TypeswitchExpr4876 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000100000000000L});
    public static final BitSet FOLLOW_RPAREN_in_p_TypeswitchExpr4878 = new BitSet(new long[]{0x0000000004000000L});
    public static final BitSet FOLLOW_p_CaseClause_in_p_TypeswitchExpr4880 = new BitSet(new long[]{0x0000000804000000L});
    public static final BitSet FOLLOW_DEFAULT_in_p_TypeswitchExpr4885 = new BitSet(new long[]{0x0000000000000000L,0x0000000004000000L,0x0000200000000000L});
    public static final BitSet FOLLOW_DOLLAR_in_p_TypeswitchExpr4888 = new BitSet(new long[]{0xFFFFFFFFFFFF0000L,0xFFFFFFFFFFFFFFFFL,0x000007FF7FFFFFFFL,0x0000000001000000L});
    public static final BitSet FOLLOW_p_VarName_in_p_TypeswitchExpr4890 = new BitSet(new long[]{0x0000000000000000L,0x0000000004000000L});
    public static final BitSet FOLLOW_RETURN_in_p_TypeswitchExpr4896 = new BitSet(new long[]{0xFFFFFFFFFFFF0000L,0xFFFFFFFFFFFFFFFFL,0x0F002FFF7FFFFFFFL,0x0000001F8132001EL});
    public static final BitSet FOLLOW_p_ExprSingle_in_p_TypeswitchExpr4898 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_CASE_in_p_CaseClause4928 = new BitSet(new long[]{0xFFFFFFFFFFFF0000L,0xFFFFFFFFFFFFFFFFL,0x000027FF7FFFFFFFL,0x0000000001000000L});
    public static final BitSet FOLLOW_DOLLAR_in_p_CaseClause4931 = new BitSet(new long[]{0xFFFFFFFFFFFF0000L,0xFFFFFFFFFFFFFFFFL,0x000007FF7FFFFFFFL,0x0000000001000000L});
    public static final BitSet FOLLOW_p_VarName_in_p_CaseClause4933 = new BitSet(new long[]{0x0000000000080000L});
    public static final BitSet FOLLOW_AS_in_p_CaseClause4937 = new BitSet(new long[]{0xFFFFFFFFFFFF0000L,0xFFFFFFFFFFFFFFFFL,0x000027FF7FFFFFFFL,0x0000000001000000L});
    public static final BitSet FOLLOW_p_SequenceType_in_p_CaseClause4941 = new BitSet(new long[]{0x0000000000000000L,0x0000000004000000L});
    public static final BitSet FOLLOW_RETURN_in_p_CaseClause4945 = new BitSet(new long[]{0xFFFFFFFFFFFF0000L,0xFFFFFFFFFFFFFFFFL,0x0F002FFF7FFFFFFFL,0x0000001F8132001EL});
    public static final BitSet FOLLOW_p_ExprSingle_in_p_CaseClause4947 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_IF_in_p_IfExpr4977 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000080000000000L});
    public static final BitSet FOLLOW_LPAREN_in_p_IfExpr4979 = new BitSet(new long[]{0xFFFFFFFFFFFF0000L,0xFFFFFFFFFFFFFFFFL,0x0F002FFF7FFFFFFFL,0x0000001F8132001EL});
    public static final BitSet FOLLOW_pm_Expr_in_p_IfExpr4981 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000100000000000L});
    public static final BitSet FOLLOW_RPAREN_in_p_IfExpr4983 = new BitSet(new long[]{0x0000000000000000L,0x0000002000000000L});
    public static final BitSet FOLLOW_THEN_in_p_IfExpr4987 = new BitSet(new long[]{0xFFFFFFFFFFFF0000L,0xFFFFFFFFFFFFFFFFL,0x0F002FFF7FFFFFFFL,0x0000001F8132001EL});
    public static final BitSet FOLLOW_p_ExprSingle_in_p_IfExpr4989 = new BitSet(new long[]{0x0000080000000000L});
    public static final BitSet FOLLOW_ELSE_in_p_IfExpr4993 = new BitSet(new long[]{0xFFFFFFFFFFFF0000L,0xFFFFFFFFFFFFFFFFL,0x0F002FFF7FFFFFFFL,0x0000001F8132001EL});
    public static final BitSet FOLLOW_p_ExprSingle_in_p_IfExpr4995 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_p_AndExpr_in_p_OrExpr5023 = new BitSet(new long[]{0x0000000000000002L,0x0000000000020000L});
    public static final BitSet FOLLOW_OR_in_p_OrExpr5029 = new BitSet(new long[]{0xFFFFFFFFFFFF0000L,0xFFFFFFFFFFFFFFFFL,0x0F002FFF7FFFFFFFL,0x0000001F8132001EL});
    public static final BitSet FOLLOW_p_AndExpr_in_p_OrExpr5033 = new BitSet(new long[]{0x0000000000000002L,0x0000000000020000L});
    public static final BitSet FOLLOW_p_ComparisonExpr_in_p_AndExpr5064 = new BitSet(new long[]{0x0000000000040002L});
    public static final BitSet FOLLOW_AND_in_p_AndExpr5070 = new BitSet(new long[]{0xFFFFFFFFFFFF0000L,0xFFFFFFFFFFFFFFFFL,0x0F002FFF7FFFFFFFL,0x0000001F8132001EL});
    public static final BitSet FOLLOW_p_ComparisonExpr_in_p_AndExpr5074 = new BitSet(new long[]{0x0000000000040002L});
    public static final BitSet FOLLOW_p_RangeExpr_in_p_ComparisonExpr5105 = new BitSet(new long[]{0x0280800000000002L,0x0000000000000892L,0xF814000000000000L,0x0000000000000001L});
    public static final BitSet FOLLOW_p_ValueComp_in_p_ComparisonExpr5110 = new BitSet(new long[]{0xFFFFFFFFFFFF0000L,0xFFFFFFFFFFFFFFFFL,0x0F002FFF7FFFFFFFL,0x0000001F8132001EL});
    public static final BitSet FOLLOW_p_GeneralComp_in_p_ComparisonExpr5114 = new BitSet(new long[]{0xFFFFFFFFFFFF0000L,0xFFFFFFFFFFFFFFFFL,0x0F002FFF7FFFFFFFL,0x0000001F8132001EL});
    public static final BitSet FOLLOW_p_NodeComp_in_p_ComparisonExpr5118 = new BitSet(new long[]{0xFFFFFFFFFFFF0000L,0xFFFFFFFFFFFFFFFFL,0x0F002FFF7FFFFFFFL,0x0000001F8132001EL});
    public static final BitSet FOLLOW_p_RangeExpr_in_p_ComparisonExpr5121 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_p_AdditiveExpr_in_p_RangeExpr5152 = new BitSet(new long[]{0x0000000000000002L,0x0000004000000000L});
    public static final BitSet FOLLOW_TO_in_p_RangeExpr5158 = new BitSet(new long[]{0xFFFFFFFFFFFF0000L,0xFFFFFFFFFFFFFFFFL,0x0F002FFF7FFFFFFFL,0x0000001F8132001EL});
    public static final BitSet FOLLOW_p_AdditiveExpr_in_p_RangeExpr5162 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_p_MultiplicativeExpr_in_p_AdditiveExpr5193 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0600000000000000L});
    public static final BitSet FOLLOW_set_in_p_AdditiveExpr5197 = new BitSet(new long[]{0xFFFFFFFFFFFF0000L,0xFFFFFFFFFFFFFFFFL,0x0F002FFF7FFFFFFFL,0x0000001F8132001EL});
    public static final BitSet FOLLOW_p_MultiplicativeExpr_in_p_AdditiveExpr5205 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0600000000000000L});
    public static final BitSet FOLLOW_p_UnionExpr_in_p_MultiplicativeExpr5236 = new BitSet(new long[]{0x0400008000000002L,0x0000000000000100L,0x0100000000000000L});
    public static final BitSet FOLLOW_STAR_in_p_MultiplicativeExpr5241 = new BitSet(new long[]{0xFFFFFFFFFFFF0000L,0xFFFFFFFFFFFFFFFFL,0x0F002FFF7FFFFFFFL,0x0000001F8132001EL});
    public static final BitSet FOLLOW_DIV_in_p_MultiplicativeExpr5247 = new BitSet(new long[]{0xFFFFFFFFFFFF0000L,0xFFFFFFFFFFFFFFFFL,0x0F002FFF7FFFFFFFL,0x0000001F8132001EL});
    public static final BitSet FOLLOW_IDIV_in_p_MultiplicativeExpr5255 = new BitSet(new long[]{0xFFFFFFFFFFFF0000L,0xFFFFFFFFFFFFFFFFL,0x0F002FFF7FFFFFFFL,0x0000001F8132001EL});
    public static final BitSet FOLLOW_MOD_in_p_MultiplicativeExpr5263 = new BitSet(new long[]{0xFFFFFFFFFFFF0000L,0xFFFFFFFFFFFFFFFFL,0x0F002FFF7FFFFFFFL,0x0000001F8132001EL});
    public static final BitSet FOLLOW_p_UnionExpr_in_p_MultiplicativeExpr5268 = new BitSet(new long[]{0x0400008000000002L,0x0000000000000100L,0x0100000000000000L});
    public static final BitSet FOLLOW_p_IntersectExceptExpr_in_p_UnionExpr5299 = new BitSet(new long[]{0x0000000000000002L,0x0000020000000000L,0x0000000000000000L,0x0000000000000400L});
    public static final BitSet FOLLOW_UNION_in_p_UnionExpr5306 = new BitSet(new long[]{0xFFFFFFFFFFFF0000L,0xFFFFFFFFFFFFFFFFL,0x0F002FFF7FFFFFFFL,0x0000001F8132001EL});
    public static final BitSet FOLLOW_VBAR_in_p_UnionExpr5312 = new BitSet(new long[]{0xFFFFFFFFFFFF0000L,0xFFFFFFFFFFFFFFFFL,0x0F002FFF7FFFFFFFL,0x0000001F8132001EL});
    public static final BitSet FOLLOW_p_IntersectExceptExpr_in_p_UnionExpr5315 = new BitSet(new long[]{0x0000000000000002L,0x0000020000000000L,0x0000000000000000L,0x0000000000000400L});
    public static final BitSet FOLLOW_p_InstanceofExpr_in_p_IntersectExceptExpr5346 = new BitSet(new long[]{0x0002000000000002L,0x0000000000000001L});
    public static final BitSet FOLLOW_INTERSECT_in_p_IntersectExceptExpr5353 = new BitSet(new long[]{0xFFFFFFFFFFFF0000L,0xFFFFFFFFFFFFFFFFL,0x0F002FFF7FFFFFFFL,0x0000001F8132001EL});
    public static final BitSet FOLLOW_EXCEPT_in_p_IntersectExceptExpr5359 = new BitSet(new long[]{0xFFFFFFFFFFFF0000L,0xFFFFFFFFFFFFFFFFL,0x0F002FFF7FFFFFFFL,0x0000001F8132001EL});
    public static final BitSet FOLLOW_p_InstanceofExpr_in_p_IntersectExceptExpr5364 = new BitSet(new long[]{0x0002000000000002L,0x0000000000000001L});
    public static final BitSet FOLLOW_p_TreatExpr_in_p_InstanceofExpr5395 = new BitSet(new long[]{0x8000000000000002L});
    public static final BitSet FOLLOW_INSTANCE_in_p_InstanceofExpr5401 = new BitSet(new long[]{0x0000000000000000L,0x0000000000008000L});
    public static final BitSet FOLLOW_OF_in_p_InstanceofExpr5407 = new BitSet(new long[]{0xFFFFFFFFFFFF0000L,0xFFFFFFFFFFFFFFFFL,0x000027FF7FFFFFFFL,0x0000000001000000L});
    public static final BitSet FOLLOW_p_SequenceType_in_p_InstanceofExpr5411 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_p_CastableExpr_in_p_TreatExpr5441 = new BitSet(new long[]{0x0000000000000002L,0x0000008000000000L});
    public static final BitSet FOLLOW_TREAT_in_p_TreatExpr5447 = new BitSet(new long[]{0x0000000000080000L});
    public static final BitSet FOLLOW_AS_in_p_TreatExpr5453 = new BitSet(new long[]{0xFFFFFFFFFFFF0000L,0xFFFFFFFFFFFFFFFFL,0x000027FF7FFFFFFFL,0x0000000001000000L});
    public static final BitSet FOLLOW_p_SequenceType_in_p_TreatExpr5457 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_p_CastExpr_in_p_CastableExpr5496 = new BitSet(new long[]{0x0000000010000002L});
    public static final BitSet FOLLOW_CASTABLE_in_p_CastableExpr5502 = new BitSet(new long[]{0x0000000000080000L});
    public static final BitSet FOLLOW_AS_in_p_CastableExpr5508 = new BitSet(new long[]{0xFFFFFFFFFFFF0000L,0xFFFFFFFFFFFFFFFFL,0x000007FF7FFFFFFFL,0x0000000001000000L});
    public static final BitSet FOLLOW_p_SingleType_in_p_CastableExpr5512 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_p_UnaryExpr_in_p_CastExpr5551 = new BitSet(new long[]{0x0000000008000002L});
    public static final BitSet FOLLOW_CAST_in_p_CastExpr5557 = new BitSet(new long[]{0x0000000000080000L});
    public static final BitSet FOLLOW_AS_in_p_CastExpr5563 = new BitSet(new long[]{0xFFFFFFFFFFFF0000L,0xFFFFFFFFFFFFFFFFL,0x000007FF7FFFFFFFL,0x0000000001000000L});
    public static final BitSet FOLLOW_p_SingleType_in_p_CastExpr5567 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_PLUS_in_p_UnaryExpr5599 = new BitSet(new long[]{0xFFFFFFFFFFFF0000L,0xFFFFFFFFFFFFFFFFL,0x0F002FFF7FFFFFFFL,0x0000001F8132001EL});
    public static final BitSet FOLLOW_MINUS_in_p_UnaryExpr5603 = new BitSet(new long[]{0xFFFFFFFFFFFF0000L,0xFFFFFFFFFFFFFFFFL,0x0F002FFF7FFFFFFFL,0x0000001F8132001EL});
    public static final BitSet FOLLOW_p_ValueExpr_in_p_UnaryExpr5607 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_p_ValidateExpr_in_p_ValueExpr5663 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_p_PathExpr_in_p_ValueExpr5675 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_p_ExtensionExpr_in_p_ValueExpr5687 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_set_in_p_GeneralComp0 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_EQ_in_p_ValueComp5766 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_NE_in_p_ValueComp5772 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_LT_in_p_ValueComp5778 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_LE_in_p_ValueComp5784 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_GT_in_p_ValueComp5790 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_GE_in_p_ValueComp5796 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_IS_in_p_NodeComp5829 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_SMALLER_SMALLER_in_p_NodeComp5835 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_GREATER_GREATER_in_p_NodeComp5839 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_VALIDATE_in_p_ValidateExpr5869 = new BitSet(new long[]{0x0000000000080000L,0x0000000400000008L,0x0000400000000000L});
    public static final BitSet FOLLOW_p_ValidationMode_in_p_ValidateExpr5873 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000400000000000L});
    public static final BitSet FOLLOW_LBRACKET_in_p_ValidateExpr5876 = new BitSet(new long[]{0xFFFFFFFFFFFF0000L,0xFFFFFFFFFFFFFFFFL,0x0F002FFF7FFFFFFFL,0x0000001F8132001EL});
    public static final BitSet FOLLOW_pm_Expr_in_p_ValidateExpr5878 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000800000000000L});
    public static final BitSet FOLLOW_RBRACKET_in_p_ValidateExpr5880 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_LAX_in_p_ValidationMode5911 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_STRICT_in_p_ValidationMode5917 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_AS_in_p_ValidationMode5924 = new BitSet(new long[]{0xFFFFFFFFFFFF0000L,0xFFFFFFFFFFFFFFFFL,0x000007FF7FFFFFFFL,0x0000000001000000L});
    public static final BitSet FOLLOW_p_QName_in_p_ValidationMode5926 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_L_Pragma_in_p_ExtensionExpr5958 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000400000000000L,0x0000000080000000L});
    public static final BitSet FOLLOW_LBRACKET_in_p_ExtensionExpr5961 = new BitSet(new long[]{0xFFFFFFFFFFFF0000L,0xFFFFFFFFFFFFFFFFL,0x0F00AFFF7FFFFFFFL,0x0000001F8132001EL});
    public static final BitSet FOLLOW_pm_Expr_in_p_ExtensionExpr5963 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000800000000000L});
    public static final BitSet FOLLOW_RBRACKET_in_p_ExtensionExpr5966 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_SLASH_in_p_PathExpr6008 = new BitSet(new long[]{0xFFFFFFFFFFFF0000L,0xFFFFFFFFFFFFFFFFL,0x09002FFF7FFFFFFFL,0x0000001F0132001EL});
    public static final BitSet FOLLOW_p_RelativePathExpr_in_p_PathExpr6010 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_SLASH_in_p_PathExpr6023 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_SLASH_SLASH_in_p_PathExpr6035 = new BitSet(new long[]{0xFFFFFFFFFFFF0000L,0xFFFFFFFFFFFFFFFFL,0x09002FFF7FFFFFFFL,0x0000001F0132001EL});
    public static final BitSet FOLLOW_p_RelativePathExpr_in_p_PathExpr6037 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_p_RelativePathExpr_in_p_PathExpr6049 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_p_StepExpr_in_p_RelativePathExpr6077 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000006L});
    public static final BitSet FOLLOW_set_in_p_RelativePathExpr6080 = new BitSet(new long[]{0xFFFFFFFFFFFF0000L,0xFFFFFFFFFFFFFFFFL,0x09002FFF7FFFFFFFL,0x0000001F0132001EL});
    public static final BitSet FOLLOW_p_StepExpr_in_p_RelativePathExpr6088 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000006L});
    public static final BitSet FOLLOW_p_AxisStep_in_p_StepExpr6116 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_p_FilterExpr_in_p_StepExpr6128 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_p_ReverseStep_in_p_AxisStep6155 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0001000000000000L});
    public static final BitSet FOLLOW_p_ForwardStep_in_p_AxisStep6159 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0001000000000000L});
    public static final BitSet FOLLOW_p_PredicateList_in_p_AxisStep6162 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_p_ForwardAxis_in_p_ForwardStep6189 = new BitSet(new long[]{0xFFFFFFFFFFFF0000L,0xFFFFFFFFFFFFFFFFL,0x010007FF7FFFFFFFL,0x0000000001020010L});
    public static final BitSet FOLLOW_p_NodeTest_in_p_ForwardStep6191 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_p_AbbrevForwardStep_in_p_ForwardStep6196 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_CHILD_in_p_ForwardAxis6222 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000040L});
    public static final BitSet FOLLOW_COLON_COLON_in_p_ForwardAxis6224 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_DESCENDANT_in_p_ForwardAxis6236 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000040L});
    public static final BitSet FOLLOW_COLON_COLON_in_p_ForwardAxis6238 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ATTRIBUTE_in_p_ForwardAxis6250 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000040L});
    public static final BitSet FOLLOW_COLON_COLON_in_p_ForwardAxis6252 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_SELF_in_p_ForwardAxis6264 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000040L});
    public static final BitSet FOLLOW_COLON_COLON_in_p_ForwardAxis6266 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_DESCENDANT_OR_SELF_in_p_ForwardAxis6278 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000040L});
    public static final BitSet FOLLOW_COLON_COLON_in_p_ForwardAxis6280 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_FOLLOWING_SIBLING_in_p_ForwardAxis6292 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000040L});
    public static final BitSet FOLLOW_COLON_COLON_in_p_ForwardAxis6294 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_FOLLOWING_in_p_ForwardAxis6306 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000040L});
    public static final BitSet FOLLOW_COLON_COLON_in_p_ForwardAxis6308 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ATTR_SIGN_in_p_AbbrevForwardStep6334 = new BitSet(new long[]{0xFFFFFFFFFFFF0000L,0xFFFFFFFFFFFFFFFFL,0x010007FF7FFFFFFFL,0x0000000001020010L});
    public static final BitSet FOLLOW_p_NodeTest_in_p_AbbrevForwardStep6337 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_p_ReverseAxis_in_p_ReverseStep6364 = new BitSet(new long[]{0xFFFFFFFFFFFF0000L,0xFFFFFFFFFFFFFFFFL,0x010007FF7FFFFFFFL,0x0000000001020010L});
    public static final BitSet FOLLOW_p_NodeTest_in_p_ReverseStep6366 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_p_AbbrevReverseStep_in_p_ReverseStep6371 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_PARENT_in_p_ReverseAxis6397 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000040L});
    public static final BitSet FOLLOW_COLON_COLON_in_p_ReverseAxis6399 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ANCESTOR_in_p_ReverseAxis6411 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000040L});
    public static final BitSet FOLLOW_COLON_COLON_in_p_ReverseAxis6413 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_PRECEDING_SIBLING_in_p_ReverseAxis6425 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000040L});
    public static final BitSet FOLLOW_COLON_COLON_in_p_ReverseAxis6427 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_PRECEDING_in_p_ReverseAxis6439 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000040L});
    public static final BitSet FOLLOW_COLON_COLON_in_p_ReverseAxis6441 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ANCESTOR_OR_SELF_in_p_ReverseAxis6453 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000040L});
    public static final BitSet FOLLOW_COLON_COLON_in_p_ReverseAxis6455 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_DOT_DOT_in_p_AbbrevReverseStep6481 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_p_KindTest_in_p_NodeTest6507 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_p_NameTest_in_p_NodeTest6511 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_p_QName_in_p_NameTest6537 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_p_Wildcard_in_p_NameTest6541 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_STAR_in_p_Wildcard6571 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000020L});
    public static final BitSet FOLLOW_COLON_in_p_Wildcard6574 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000001000000L});
    public static final BitSet FOLLOW_L_NCName_in_p_Wildcard6576 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_L_NCName_in_p_Wildcard6583 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000020L});
    public static final BitSet FOLLOW_COLON_in_p_Wildcard6585 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0100000000000000L});
    public static final BitSet FOLLOW_STAR_in_p_Wildcard6587 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_p_PrimaryExpr_in_p_FilterExpr6628 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0001000000000000L});
    public static final BitSet FOLLOW_p_PredicateList_in_p_FilterExpr6630 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_p_Predicate_in_p_PredicateList6658 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0001000000000000L});
    public static final BitSet FOLLOW_LSQUARE_in_p_Predicate6687 = new BitSet(new long[]{0xFFFFFFFFFFFF0000L,0xFFFFFFFFFFFFFFFFL,0x0F002FFF7FFFFFFFL,0x0000001F8132001EL});
    public static final BitSet FOLLOW_pm_Expr_in_p_Predicate6689 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0002000000000000L});
    public static final BitSet FOLLOW_RSQUARE_in_p_Predicate6691 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_p_Literal_in_p_PrimaryExpr6719 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_p_VarRef_in_p_PrimaryExpr6731 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_p_ParenthesizedExpr_in_p_PrimaryExpr6743 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_p_ContextItemExpr_in_p_PrimaryExpr6755 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_p_FunctionCall_in_p_PrimaryExpr6767 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_p_OrderedExpr_in_p_PrimaryExpr6779 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_p_UnorderedExpr_in_p_PrimaryExpr6791 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_p_Constructor_in_p_PrimaryExpr6803 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_p_NumericLiteral_in_p_Literal6831 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_p_StringLiteral_in_p_Literal6835 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_set_in_p_NumericLiteral0 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_DOLLAR_in_p_VarRef6907 = new BitSet(new long[]{0xFFFFFFFFFFFF0000L,0xFFFFFFFFFFFFFFFFL,0x000007FF7FFFFFFFL,0x0000000001000000L});
    public static final BitSet FOLLOW_p_VarName_in_p_VarRef6909 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_p_QName_in_p_VarName6937 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_LPAREN_in_p_ParenthesizedExpr6965 = new BitSet(new long[]{0xFFFFFFFFFFFF0000L,0xFFFFFFFFFFFFFFFFL,0x0F003FFF7FFFFFFFL,0x0000001F8132001EL});
    public static final BitSet FOLLOW_pm_Expr_in_p_ParenthesizedExpr6967 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000100000000000L});
    public static final BitSet FOLLOW_RPAREN_in_p_ParenthesizedExpr6970 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_DOT_in_p_ContextItemExpr6998 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ORDERED_in_p_OrderedExpr7028 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000400000000000L});
    public static final BitSet FOLLOW_LBRACKET_in_p_OrderedExpr7032 = new BitSet(new long[]{0xFFFFFFFFFFFF0000L,0xFFFFFFFFFFFFFFFFL,0x0F002FFF7FFFFFFFL,0x0000001F8132001EL});
    public static final BitSet FOLLOW_pm_Expr_in_p_OrderedExpr7034 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000800000000000L});
    public static final BitSet FOLLOW_RBRACKET_in_p_OrderedExpr7036 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_UNORDERED_in_p_UnorderedExpr7066 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000400000000000L});
    public static final BitSet FOLLOW_LBRACKET_in_p_UnorderedExpr7070 = new BitSet(new long[]{0xFFFFFFFFFFFF0000L,0xFFFFFFFFFFFFFFFFL,0x0F002FFF7FFFFFFFL,0x0000001F8132001EL});
    public static final BitSet FOLLOW_pm_Expr_in_p_UnorderedExpr7072 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000800000000000L});
    public static final BitSet FOLLOW_RBRACKET_in_p_UnorderedExpr7074 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_p_FQName_in_p_FunctionCall7103 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000080000000000L});
    public static final BitSet FOLLOW_LPAREN_in_p_FunctionCall7105 = new BitSet(new long[]{0xFFFFFFFFFFFF0000L,0xFFFFFFFFFFFFFFFFL,0x0F003FFF7FFFFFFFL,0x0000001F8132001EL});
    public static final BitSet FOLLOW_p_ExprSingle_in_p_FunctionCall7108 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0040100000000000L});
    public static final BitSet FOLLOW_COMMA_in_p_FunctionCall7111 = new BitSet(new long[]{0xFFFFFFFFFFFF0000L,0xFFFFFFFFFFFFFFFFL,0x0F002FFF7FFFFFFFL,0x0000001F8132001EL});
    public static final BitSet FOLLOW_p_ExprSingle_in_p_FunctionCall7113 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0040100000000000L});
    public static final BitSet FOLLOW_RPAREN_in_p_FunctionCall7119 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_p_DirectConstructor_in_p_Constructor7151 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_p_ComputedConstructor_in_p_Constructor7155 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_p_DirElemConstructor_in_p_DirectConstructor7183 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_L_DirCommentConstructor_in_p_DirectConstructor7195 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_L_DirPIConstructor_in_p_DirectConstructor7207 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_SMALLER_in_p_DirElemConstructor7236 = new BitSet(new long[]{0xFFFFFFFFFFFF0000L,0xFFFFFFFFFFFFFFFFL,0x000007FF7FFFFFFFL,0x0000000001000000L});
    public static final BitSet FOLLOW_p_QName_in_p_DirElemConstructor7252 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x1000000000000000L,0x0000000020000080L});
    public static final BitSet FOLLOW_p_DirAttributeList_in_p_DirElemConstructor7254 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x1000000000000000L,0x0000000000000080L});
    public static final BitSet FOLLOW_EMPTY_CLOSE_TAG_in_p_DirElemConstructor7270 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_GREATER_in_p_DirElemConstructor7275 = new BitSet(new long[]{0x0000000000000FC0L,0x0000000000000000L,0x0800400000000000L,0x0000000300000100L});
    public static final BitSet FOLLOW_pm_DirElemContent_in_p_DirElemConstructor7277 = new BitSet(new long[]{0x0000000000000FC0L,0x0000000000000000L,0x0800400000000000L,0x0000000300000100L});
    public static final BitSet FOLLOW_CLOSE_TAG_in_p_DirElemConstructor7280 = new BitSet(new long[]{0xFFFFFFFFFFFF0000L,0xFFFFFFFFFFFFFFFFL,0x000007FF7FFFFFFFL,0x0000000001000000L});
    public static final BitSet FOLLOW_p_QName_in_p_DirElemConstructor7282 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x1000000000000000L,0x0000000020000000L});
    public static final BitSet FOLLOW_S_in_p_DirElemConstructor7284 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x1000000000000000L});
    public static final BitSet FOLLOW_GREATER_in_p_DirElemConstructor7287 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_S_in_p_DirAttributeList7364 = new BitSet(new long[]{0xFFFFFFFFFFFF0002L,0xFFFFFFFFFFFFFFFFL,0x000007FF7FFFFFFFL,0x0000000021000000L});
    public static final BitSet FOLLOW_p_QName_in_p_DirAttributeList7367 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0004000000000000L,0x0000000020000000L});
    public static final BitSet FOLLOW_S_in_p_DirAttributeList7369 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0004000000000000L});
    public static final BitSet FOLLOW_EQUAL_in_p_DirAttributeList7372 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000020300000L});
    public static final BitSet FOLLOW_S_in_p_DirAttributeList7374 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000020300000L});
    public static final BitSet FOLLOW_p_DirAttributeValue_in_p_DirAttributeList7377 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000020000000L});
    public static final BitSet FOLLOW_QUOT_in_p_DirAttributeValue7408 = new BitSet(new long[]{0x0000000000002F10L,0x0000000000000000L,0x0000400000000000L,0x0000000000200000L});
    public static final BitSet FOLLOW_ESCAPE_QUOT_in_p_DirAttributeValue7411 = new BitSet(new long[]{0x0000000000002F10L,0x0000000000000000L,0x0000400000000000L,0x0000000000200000L});
    public static final BitSet FOLLOW_pm_QuotAttrValueContent_in_p_DirAttributeValue7415 = new BitSet(new long[]{0x0000000000002F10L,0x0000000000000000L,0x0000400000000000L,0x0000000000200000L});
    public static final BitSet FOLLOW_QUOT_in_p_DirAttributeValue7419 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_APOS_in_p_DirAttributeValue7458 = new BitSet(new long[]{0x0000000000001F20L,0x0000000000000000L,0x0000400000000000L,0x0000000000100000L});
    public static final BitSet FOLLOW_ESCAPE_APOS_in_p_DirAttributeValue7461 = new BitSet(new long[]{0x0000000000001F20L,0x0000000000000000L,0x0000400000000000L,0x0000000000100000L});
    public static final BitSet FOLLOW_pm_AposAttrValueContent_in_p_DirAttributeValue7465 = new BitSet(new long[]{0x0000000000001F20L,0x0000000000000000L,0x0000400000000000L,0x0000000000100000L});
    public static final BitSet FOLLOW_APOS_in_p_DirAttributeValue7469 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_pg_QuotAttrContentChar_in_pm_QuotAttrValueContent7521 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_pg_CommonContent_in_pm_QuotAttrValueContent7525 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_p_ElemEnclosedExpr_in_pm_QuotAttrValueContent7529 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_L_QuotAttrContentChar_in_pg_QuotAttrContentChar7558 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_pg_AposAttrContentChar_in_pm_AposAttrValueContent7611 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_pg_CommonContent_in_pm_AposAttrValueContent7615 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_p_ElemEnclosedExpr_in_pm_AposAttrValueContent7619 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_L_AposAttrContentChar_in_pg_AposAttrContentChar7648 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_p_DirectConstructor_in_pm_DirElemContent7699 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_L_CDataSection_in_pm_DirElemContent7711 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_p_ElemEnclosedExpr_in_pm_DirElemContent7723 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_pg_CommonContent_in_pm_DirElemContent7735 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_pg_ElementContentChar_in_pm_DirElemContent7747 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_L_ElementContentChar_in_pg_ElementContentChar7776 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_pm_CommonContent_in_pg_CommonContent7832 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_set_in_pm_CommonContent0 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_LBRACKET_in_p_ElemEnclosedExpr7928 = new BitSet(new long[]{0xFFFFFFFFFFFF0000L,0xFFFFFFFFFFFFFFFFL,0x0F002FFF7FFFFFFFL,0x0000001F8132001EL});
    public static final BitSet FOLLOW_pm_Expr_in_p_ElemEnclosedExpr7945 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000800000000000L});
    public static final BitSet FOLLOW_RBRACKET_in_p_ElemEnclosedExpr7962 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_p_CompDocConstructor_in_p_ComputedConstructor8013 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_p_CompElemConstructor_in_p_ComputedConstructor8025 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_p_CompAttrConstructor_in_p_ComputedConstructor8037 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_p_CompNamespaceConstructor_in_p_ComputedConstructor8049 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_p_CompTextConstructor_in_p_ComputedConstructor8061 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_p_CompCommentConstructor_in_p_ComputedConstructor8073 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_p_CompPIConstructor_in_p_ComputedConstructor8085 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_p_CompBinaryConstructor_in_p_ComputedConstructor8100 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_DOCUMENT_in_p_CompDocConstructor8134 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000400000000000L});
    public static final BitSet FOLLOW_LBRACKET_in_p_CompDocConstructor8138 = new BitSet(new long[]{0xFFFFFFFFFFFF0000L,0xFFFFFFFFFFFFFFFFL,0x0F002FFF7FFFFFFFL,0x0000001F8132001EL});
    public static final BitSet FOLLOW_pm_Expr_in_p_CompDocConstructor8140 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000800000000000L});
    public static final BitSet FOLLOW_RBRACKET_in_p_CompDocConstructor8142 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ELEMENT_in_p_CompElemConstructor8183 = new BitSet(new long[]{0xFFFFFFFFFFFF0000L,0xFFFFFFFFFFFFFFFFL,0x000047FF7FFFFFFFL,0x0000000001000000L});
    public static final BitSet FOLLOW_p_QName_in_p_CompElemConstructor8188 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000400000000000L});
    public static final BitSet FOLLOW_LBRACKET_in_p_CompElemConstructor8193 = new BitSet(new long[]{0xFFFFFFFFFFFF0000L,0xFFFFFFFFFFFFFFFFL,0x0F002FFF7FFFFFFFL,0x0000001F8132001EL});
    public static final BitSet FOLLOW_pm_Expr_in_p_CompElemConstructor8195 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000800000000000L});
    public static final BitSet FOLLOW_RBRACKET_in_p_CompElemConstructor8197 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000400000000000L});
    public static final BitSet FOLLOW_LBRACKET_in_p_CompElemConstructor8201 = new BitSet(new long[]{0xFFFFFFFFFFFF0000L,0xFFFFFFFFFFFFFFFFL,0x0F00AFFF7FFFFFFFL,0x0000001F8132001EL});
    public static final BitSet FOLLOW_pm_Expr_in_p_CompElemConstructor8203 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000800000000000L});
    public static final BitSet FOLLOW_RBRACKET_in_p_CompElemConstructor8206 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ATTRIBUTE_in_p_CompAttrConstructor8239 = new BitSet(new long[]{0xFFFFFFFFFFFF0000L,0xFFFFFFFFFFFFFFFFL,0x000047FF7FFFFFFFL,0x0000000001000000L});
    public static final BitSet FOLLOW_p_QName_in_p_CompAttrConstructor8244 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000400000000000L});
    public static final BitSet FOLLOW_LBRACKET_in_p_CompAttrConstructor8249 = new BitSet(new long[]{0xFFFFFFFFFFFF0000L,0xFFFFFFFFFFFFFFFFL,0x0F002FFF7FFFFFFFL,0x0000001F8132001EL});
    public static final BitSet FOLLOW_pm_Expr_in_p_CompAttrConstructor8251 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000800000000000L});
    public static final BitSet FOLLOW_RBRACKET_in_p_CompAttrConstructor8253 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000400000000000L});
    public static final BitSet FOLLOW_LBRACKET_in_p_CompAttrConstructor8257 = new BitSet(new long[]{0xFFFFFFFFFFFF0000L,0xFFFFFFFFFFFFFFFFL,0x0F00AFFF7FFFFFFFL,0x0000001F8132001EL});
    public static final BitSet FOLLOW_pm_Expr_in_p_CompAttrConstructor8259 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000800000000000L});
    public static final BitSet FOLLOW_RBRACKET_in_p_CompAttrConstructor8262 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_NAMESPACE_in_p_CompNamespaceConstructor8290 = new BitSet(new long[]{0xFFFFFFFFFFFF0000L,0xFFFFFFFFFFFFFFFFL,0x000047FF7FFFFFFFL,0x0000000001000000L});
    public static final BitSet FOLLOW_p_NCName_in_p_CompNamespaceConstructor8295 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000400000000000L});
    public static final BitSet FOLLOW_LBRACKET_in_p_CompNamespaceConstructor8300 = new BitSet(new long[]{0xFFFFFFFFFFFF0000L,0xFFFFFFFFFFFFFFFFL,0x0F002FFF7FFFFFFFL,0x0000001F8132001EL});
    public static final BitSet FOLLOW_pm_Expr_in_p_CompNamespaceConstructor8302 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000800000000000L});
    public static final BitSet FOLLOW_RBRACKET_in_p_CompNamespaceConstructor8304 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000400000000000L});
    public static final BitSet FOLLOW_LBRACKET_in_p_CompNamespaceConstructor8308 = new BitSet(new long[]{0xFFFFFFFFFFFF0000L,0xFFFFFFFFFFFFFFFFL,0x0F00AFFF7FFFFFFFL,0x0000001F8132001EL});
    public static final BitSet FOLLOW_pm_Expr_in_p_CompNamespaceConstructor8310 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000800000000000L});
    public static final BitSet FOLLOW_RBRACKET_in_p_CompNamespaceConstructor8313 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_TEXT_in_p_CompTextConstructor8349 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000400000000000L});
    public static final BitSet FOLLOW_LBRACKET_in_p_CompTextConstructor8353 = new BitSet(new long[]{0xFFFFFFFFFFFF0000L,0xFFFFFFFFFFFFFFFFL,0x0F002FFF7FFFFFFFL,0x0000001F8132001EL});
    public static final BitSet FOLLOW_pm_Expr_in_p_CompTextConstructor8355 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000800000000000L});
    public static final BitSet FOLLOW_RBRACKET_in_p_CompTextConstructor8357 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_BINARY_in_p_CompBinaryConstructor8387 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000400000000000L});
    public static final BitSet FOLLOW_LBRACKET_in_p_CompBinaryConstructor8391 = new BitSet(new long[]{0xFFFFFFFFFFFF0000L,0xFFFFFFFFFFFFFFFFL,0x0F002FFF7FFFFFFFL,0x0000001F8132001EL});
    public static final BitSet FOLLOW_pm_Expr_in_p_CompBinaryConstructor8393 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000800000000000L});
    public static final BitSet FOLLOW_RBRACKET_in_p_CompBinaryConstructor8395 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_COMMENT_in_p_CompCommentConstructor8425 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000400000000000L});
    public static final BitSet FOLLOW_LBRACKET_in_p_CompCommentConstructor8429 = new BitSet(new long[]{0xFFFFFFFFFFFF0000L,0xFFFFFFFFFFFFFFFFL,0x0F002FFF7FFFFFFFL,0x0000001F8132001EL});
    public static final BitSet FOLLOW_pm_Expr_in_p_CompCommentConstructor8431 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000800000000000L});
    public static final BitSet FOLLOW_RBRACKET_in_p_CompCommentConstructor8433 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_PROCESSING_INSTRUCTION_in_p_CompPIConstructor8464 = new BitSet(new long[]{0xFFFFFFFFFFFF0000L,0xFFFFFFFFFFFFFFFFL,0x000047FF7FFFFFFFL,0x0000000001000000L});
    public static final BitSet FOLLOW_p_NCName_in_p_CompPIConstructor8469 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000400000000000L});
    public static final BitSet FOLLOW_LBRACKET_in_p_CompPIConstructor8474 = new BitSet(new long[]{0xFFFFFFFFFFFF0000L,0xFFFFFFFFFFFFFFFFL,0x0F002FFF7FFFFFFFL,0x0000001F8132001EL});
    public static final BitSet FOLLOW_pm_Expr_in_p_CompPIConstructor8476 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000800000000000L});
    public static final BitSet FOLLOW_RBRACKET_in_p_CompPIConstructor8478 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000400000000000L});
    public static final BitSet FOLLOW_LBRACKET_in_p_CompPIConstructor8482 = new BitSet(new long[]{0xFFFFFFFFFFFF0000L,0xFFFFFFFFFFFFFFFFL,0x0F00AFFF7FFFFFFFL,0x0000001F8132001EL});
    public static final BitSet FOLLOW_pm_Expr_in_p_CompPIConstructor8484 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000800000000000L});
    public static final BitSet FOLLOW_RBRACKET_in_p_CompPIConstructor8487 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_p_AtomicType_in_p_SingleType8515 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0080000000000000L});
    public static final BitSet FOLLOW_QUESTION_in_p_SingleType8517 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_AS_in_p_TypeDeclaration8548 = new BitSet(new long[]{0xFFFFFFFFFFFF0000L,0xFFFFFFFFFFFFFFFFL,0x000027FF7FFFFFFFL,0x0000000001000000L});
    public static final BitSet FOLLOW_p_SequenceType_in_p_TypeDeclaration8554 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_EMPTY_SEQUENCE_in_p_SequenceType8609 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000080000000000L});
    public static final BitSet FOLLOW_LPAREN_in_p_SequenceType8615 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000100000000000L});
    public static final BitSet FOLLOW_RPAREN_in_p_SequenceType8619 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_p_ItemType_in_p_SequenceType8668 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0380000000000000L});
    public static final BitSet FOLLOW_p_OccurrenceIndicator_in_p_SequenceType8679 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_set_in_p_OccurrenceIndicator0 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_p_KindTest_in_p_ItemType8781 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_BINARY_in_p_ItemType8821 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000080000000000L});
    public static final BitSet FOLLOW_LPAREN_in_p_ItemType8823 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000100000000000L});
    public static final BitSet FOLLOW_RPAREN_in_p_ItemType8825 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ITEM_in_p_ItemType8867 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000080000000000L});
    public static final BitSet FOLLOW_LPAREN_in_p_ItemType8869 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000100000000000L});
    public static final BitSet FOLLOW_RPAREN_in_p_ItemType8871 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_p_AtomicType_in_p_ItemType8912 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_p_QName_in_p_AtomicType8938 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_p_DocumentTest_in_p_KindTest8988 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_p_ElementTest_in_p_KindTest9000 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_p_AttributeTest_in_p_KindTest9012 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_p_SchemaElementTest_in_p_KindTest9024 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_p_SchemaAttributeTest_in_p_KindTest9036 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_p_NamespaceNodeTest_in_p_KindTest9048 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_p_PITest_in_p_KindTest9060 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_p_CommentTest_in_p_KindTest9072 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_p_TextTest_in_p_KindTest9084 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_p_AnyKindTest_in_p_KindTest9096 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_NODE_in_p_AnyKindTest9124 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000080000000000L});
    public static final BitSet FOLLOW_LPAREN_in_p_AnyKindTest9126 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000100000000000L});
    public static final BitSet FOLLOW_RPAREN_in_p_AnyKindTest9128 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_DOCUMENT_NODE_in_p_DocumentTest9156 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000080000000000L});
    public static final BitSet FOLLOW_LPAREN_in_p_DocumentTest9158 = new BitSet(new long[]{0x0000040000000000L,0x0000000040000000L,0x0000100000000000L});
    public static final BitSet FOLLOW_p_ElementTest_in_p_DocumentTest9161 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000100000000000L});
    public static final BitSet FOLLOW_p_SchemaElementTest_in_p_DocumentTest9165 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000100000000000L});
    public static final BitSet FOLLOW_RPAREN_in_p_DocumentTest9169 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_TEXT_in_p_TextTest9189 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000080000000000L});
    public static final BitSet FOLLOW_LPAREN_in_p_TextTest9191 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000100000000000L});
    public static final BitSet FOLLOW_RPAREN_in_p_TextTest9193 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_COMMENT_in_p_CommentTest9221 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000080000000000L});
    public static final BitSet FOLLOW_LPAREN_in_p_CommentTest9223 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000100000000000L});
    public static final BitSet FOLLOW_RPAREN_in_p_CommentTest9225 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_NAMESPACE_NODE_in_p_NamespaceNodeTest9251 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000080000000000L});
    public static final BitSet FOLLOW_LPAREN_in_p_NamespaceNodeTest9253 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000100000000000L});
    public static final BitSet FOLLOW_RPAREN_in_p_NamespaceNodeTest9255 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_PROCESSING_INSTRUCTION_in_p_PITest9283 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000080000000000L});
    public static final BitSet FOLLOW_LPAREN_in_p_PITest9285 = new BitSet(new long[]{0xFFFFFFFFFFFF0000L,0xFFFFFFFFFFFFFFFFL,0x000017FF7FFFFFFFL,0x0000000001300000L});
    public static final BitSet FOLLOW_p_NCName_in_p_PITest9288 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000100000000000L});
    public static final BitSet FOLLOW_p_StringLiteral_in_p_PITest9292 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000100000000000L});
    public static final BitSet FOLLOW_RPAREN_in_p_PITest9296 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ATTRIBUTE_in_p_AttributeTest9324 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000080000000000L});
    public static final BitSet FOLLOW_LPAREN_in_p_AttributeTest9326 = new BitSet(new long[]{0xFFFFFFFFFFFF0000L,0xFFFFFFFFFFFFFFFFL,0x010017FF7FFFFFFFL,0x0000000001000000L});
    public static final BitSet FOLLOW_p_AttribNameOrWildcard_in_p_AttributeTest9329 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0040100000000000L});
    public static final BitSet FOLLOW_COMMA_in_p_AttributeTest9332 = new BitSet(new long[]{0xFFFFFFFFFFFF0000L,0xFFFFFFFFFFFFFFFFL,0x000007FF7FFFFFFFL,0x0000000001000000L});
    public static final BitSet FOLLOW_p_TypeName_in_p_AttributeTest9334 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000100000000000L});
    public static final BitSet FOLLOW_RPAREN_in_p_AttributeTest9340 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_p_QName_in_p_AttribNameOrWildcard9370 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_STAR_in_p_AttribNameOrWildcard9374 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_SCHEMA_ATTRIBUTE_in_p_SchemaAttributeTest9402 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000080000000000L});
    public static final BitSet FOLLOW_LPAREN_in_p_SchemaAttributeTest9404 = new BitSet(new long[]{0xFFFFFFFFFFFF0000L,0xFFFFFFFFFFFFFFFFL,0x000007FF7FFFFFFFL,0x0000000001000000L});
    public static final BitSet FOLLOW_p_AttributeDeclaration_in_p_SchemaAttributeTest9406 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000100000000000L});
    public static final BitSet FOLLOW_RPAREN_in_p_SchemaAttributeTest9408 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_p_AttributeName_in_p_AttributeDeclaration9434 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ELEMENT_in_p_ElementTest9462 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000080000000000L});
    public static final BitSet FOLLOW_LPAREN_in_p_ElementTest9464 = new BitSet(new long[]{0xFFFFFFFFFFFF0000L,0xFFFFFFFFFFFFFFFFL,0x010017FF7FFFFFFFL,0x0000000001000000L});
    public static final BitSet FOLLOW_p_ElementNameOrWildcard_in_p_ElementTest9467 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0040100000000000L});
    public static final BitSet FOLLOW_COMMA_in_p_ElementTest9470 = new BitSet(new long[]{0xFFFFFFFFFFFF0000L,0xFFFFFFFFFFFFFFFFL,0x000007FF7FFFFFFFL,0x0000000001000000L});
    public static final BitSet FOLLOW_p_TypeName_in_p_ElementTest9472 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0080100000000000L});
    public static final BitSet FOLLOW_QUESTION_in_p_ElementTest9474 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000100000000000L});
    public static final BitSet FOLLOW_RPAREN_in_p_ElementTest9481 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_p_QName_in_p_ElementNameOrWildcard9509 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_STAR_in_p_ElementNameOrWildcard9513 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_SCHEMA_ELEMENT_in_p_SchemaElementTest9533 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000080000000000L});
    public static final BitSet FOLLOW_LPAREN_in_p_SchemaElementTest9535 = new BitSet(new long[]{0xFFFFFFFFFFFF0000L,0xFFFFFFFFFFFFFFFFL,0x000007FF7FFFFFFFL,0x0000000001000000L});
    public static final BitSet FOLLOW_p_ElementDeclaration_in_p_SchemaElementTest9537 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000100000000000L});
    public static final BitSet FOLLOW_RPAREN_in_p_SchemaElementTest9539 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_p_ElementName_in_p_ElementDeclaration9565 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_p_QName_in_p_AttributeName9593 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_p_QName_in_p_ElementName9621 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_p_QName_in_p_TypeName9649 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_p_TryClause_in_p_TryCatchExpr9681 = new BitSet(new long[]{0x0000000000000000L,0x0001000000000000L});
    public static final BitSet FOLLOW_p_CatchClause_in_p_TryCatchExpr9683 = new BitSet(new long[]{0x0000000000000002L,0x0001000000000000L});
    public static final BitSet FOLLOW_TRY_in_p_TryClause9712 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000400000000000L});
    public static final BitSet FOLLOW_LBRACKET_in_p_TryClause9716 = new BitSet(new long[]{0xFFFFFFFFFFFF0000L,0xFFFFFFFFFFFFFFFFL,0x0F002FFF7FFFFFFFL,0x0000001F8132001EL});
    public static final BitSet FOLLOW_pm_Expr_in_p_TryClause9718 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000800000000000L});
    public static final BitSet FOLLOW_RBRACKET_in_p_TryClause9720 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_CATCH_in_p_CatchClause9751 = new BitSet(new long[]{0xFFFFFFFFFFFF0000L,0xFFFFFFFFFFFFFFFFL,0x01004FFF7FFFFFFFL,0x0000000001020010L});
    public static final BitSet FOLLOW_p_CatchErrorList_in_p_CatchClause9755 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000480000000000L});
    public static final BitSet FOLLOW_p_CatchVars_in_p_CatchClause9757 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000400000000000L});
    public static final BitSet FOLLOW_LBRACKET_in_p_CatchClause9760 = new BitSet(new long[]{0xFFFFFFFFFFFF0000L,0xFFFFFFFFFFFFFFFFL,0x0F002FFF7FFFFFFFL,0x0000001F8132001EL});
    public static final BitSet FOLLOW_pm_Expr_in_p_CatchClause9762 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000800000000000L});
    public static final BitSet FOLLOW_RBRACKET_in_p_CatchClause9764 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_p_NameTest_in_p_CatchErrorList9790 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000400L});
    public static final BitSet FOLLOW_VBAR_in_p_CatchErrorList9793 = new BitSet(new long[]{0xFFFFFFFFFFFF0000L,0xFFFFFFFFFFFFFFFFL,0x010007FF7FFFFFFFL,0x0000000001020010L});
    public static final BitSet FOLLOW_p_NameTest_in_p_CatchErrorList9795 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000400L});
    public static final BitSet FOLLOW_LPAREN_in_p_CatchVars9841 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000200000000000L});
    public static final BitSet FOLLOW_DOLLAR_in_p_CatchVars9843 = new BitSet(new long[]{0xFFFFFFFFFFFF0000L,0xFFFFFFFFFFFFFFFFL,0x000007FF7FFFFFFFL,0x0000000001000000L});
    public static final BitSet FOLLOW_p_VarName_in_p_CatchVars9845 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0040100000000000L});
    public static final BitSet FOLLOW_COMMA_in_p_CatchVars9848 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000200000000000L});
    public static final BitSet FOLLOW_DOLLAR_in_p_CatchVars9850 = new BitSet(new long[]{0xFFFFFFFFFFFF0000L,0xFFFFFFFFFFFFFFFFL,0x000007FF7FFFFFFFL,0x0000000001000000L});
    public static final BitSet FOLLOW_p_VarName_in_p_CatchVars9852 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0040100000000000L});
    public static final BitSet FOLLOW_COMMA_in_p_CatchVars9855 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000200000000000L});
    public static final BitSet FOLLOW_DOLLAR_in_p_CatchVars9857 = new BitSet(new long[]{0xFFFFFFFFFFFF0000L,0xFFFFFFFFFFFFFFFFL,0x000007FF7FFFFFFFL,0x0000000001000000L});
    public static final BitSet FOLLOW_p_VarName_in_p_CatchVars9859 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000100000000000L});
    public static final BitSet FOLLOW_RPAREN_in_p_CatchVars9865 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_QUOT_in_p_StringLiteral9914 = new BitSet(new long[]{0xFFFFFFFFFFFFFFF0L,0xFFFFFFFFFFFFFFFFL,0xFFDFFFFFFFFFFFFFL,0xFFFFFFFFFFFFFFFFL,0x00000000FFFFFFFFL});
    public static final BitSet FOLLOW_p_QuotStringLiteralContent_in_p_StringLiteral9918 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000200000L});
    public static final BitSet FOLLOW_QUOT_in_p_StringLiteral9920 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_APOS_in_p_StringLiteral9961 = new BitSet(new long[]{0xFFFFFFFFFFFFFFF0L,0xFFFFFFFFFFFFFFFFL,0xFFDFFFFFFFFFFFFFL,0xFFFFFFFFFFFFFFFFL,0x00000000FFFFFFFFL});
    public static final BitSet FOLLOW_p_AposStringLiteralContent_in_p_StringLiteral9965 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000100000L});
    public static final BitSet FOLLOW_APOS_in_p_StringLiteral9967 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_set_in_p_QuotStringLiteralContent10023 = new BitSet(new long[]{0xFFFFFFFFFFFFFFF2L,0xFFFFFFFFFFFFFFFFL,0xFFDFFFFFFFFFFFFFL,0xFFFFFFFFFFDFFFFFL,0x00000000FFFFFFFFL});
    public static final BitSet FOLLOW_set_in_p_AposStringLiteralContent10075 = new BitSet(new long[]{0xFFFFFFFFFFFFFFF2L,0xFFFFFFFFFFFFFFFFL,0xFFDFFFFFFFFFFFFFL,0xFFFFFFFFFFEFFFFFL,0x00000000FFFFFFFFL});
    public static final BitSet FOLLOW_p_NCName_in_p_QName10165 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000020L});
    public static final BitSet FOLLOW_p_LocalNCName_in_p_QName10167 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_COLON_in_p_LocalNCName10222 = new BitSet(new long[]{0xFFFFFFFFFFFF0000L,0xFFFFFFFFFFFFFFFFL,0x000007FF7FFFFFFFL,0x0000000001000000L});
    public static final BitSet FOLLOW_p_NCName_in_p_LocalNCName10224 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_p_FNCName_in_p_FQName10271 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000020L});
    public static final BitSet FOLLOW_p_LocalFNCName_in_p_FQName10273 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_COLON_in_p_LocalFNCName10301 = new BitSet(new long[]{0xFFFFFFFFFFFF0000L,0xFFFFFFFFFFFFFFFFL,0x000007FF7FFFFFFFL,0x0000000001000000L});
    public static final BitSet FOLLOW_p_NCName_in_p_LocalFNCName10303 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_set_in_p_NCName0 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_set_in_p_FNCName0 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_DECLARE_in_pm_RevalidationDecl11825 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000800000L});
    public static final BitSet FOLLOW_REVALIDATION_in_pm_RevalidationDecl11829 = new BitSet(new long[]{0x0000000000000000L,0x0000000400000008L,0x0000000001000000L});
    public static final BitSet FOLLOW_STRICT_in_pm_RevalidationDecl11834 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_LAX_in_pm_RevalidationDecl11840 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_SKIP_in_pm_RevalidationDecl11846 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_AS_in_p_InsertExprTargetChoice11879 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000048000L});
    public static final BitSet FOLLOW_FIRST_in_p_InsertExprTargetChoice11884 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000020000L});
    public static final BitSet FOLLOW_LAST_in_p_InsertExprTargetChoice11890 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000020000L});
    public static final BitSet FOLLOW_INTO_in_p_InsertExprTargetChoice11897 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_AFTER_in_p_InsertExprTargetChoice11914 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_BEFORE_in_p_InsertExprTargetChoice11930 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_INSERT_in_p_InsertExpr11960 = new BitSet(new long[]{0x0000000000000000L,0x0000000000004000L,0x0000000000100000L});
    public static final BitSet FOLLOW_NODE_in_p_InsertExpr11965 = new BitSet(new long[]{0xFFFFFFFFFFFF0000L,0xFFFFFFFFFFFFFFFFL,0x0F002FFF7FFFFFFFL,0x0000001F8132001EL});
    public static final BitSet FOLLOW_NODES_in_p_InsertExpr11971 = new BitSet(new long[]{0xFFFFFFFFFFFF0000L,0xFFFFFFFFFFFFFFFFL,0x0F002FFF7FFFFFFFL,0x0000001F8132001EL});
    public static final BitSet FOLLOW_p_SourceExpr_in_p_InsertExpr11974 = new BitSet(new long[]{0x0000000000080000L,0x0000000000000000L,0x0000000000021800L});
    public static final BitSet FOLLOW_p_InsertExprTargetChoice_in_p_InsertExpr11976 = new BitSet(new long[]{0xFFFFFFFFFFFF0000L,0xFFFFFFFFFFFFFFFFL,0x0F002FFF7FFFFFFFL,0x0000001F8132001EL});
    public static final BitSet FOLLOW_p_TargetExpr_in_p_InsertExpr11978 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_DELETE_in_p_DeleteExpr12008 = new BitSet(new long[]{0x0000000000000000L,0x0000000000004000L,0x0000000000100000L});
    public static final BitSet FOLLOW_NODE_in_p_DeleteExpr12013 = new BitSet(new long[]{0xFFFFFFFFFFFF0000L,0xFFFFFFFFFFFFFFFFL,0x0F002FFF7FFFFFFFL,0x0000001F8132001EL});
    public static final BitSet FOLLOW_NODES_in_p_DeleteExpr12019 = new BitSet(new long[]{0xFFFFFFFFFFFF0000L,0xFFFFFFFFFFFFFFFFL,0x0F002FFF7FFFFFFFL,0x0000001F8132001EL});
    public static final BitSet FOLLOW_p_TargetExpr_in_p_DeleteExpr12022 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_REPLACE_in_p_ReplaceExpr12052 = new BitSet(new long[]{0x0000000000000000L,0x0000000000004000L,0x0000000004000000L});
    public static final BitSet FOLLOW_VALUE_in_p_ReplaceExpr12057 = new BitSet(new long[]{0x0000000000000000L,0x0000000000008000L});
    public static final BitSet FOLLOW_OF_in_p_ReplaceExpr12061 = new BitSet(new long[]{0x0000000000000000L,0x0000000000004000L});
    public static final BitSet FOLLOW_NODE_in_p_ReplaceExpr12067 = new BitSet(new long[]{0xFFFFFFFFFFFF0000L,0xFFFFFFFFFFFFFFFFL,0x0F002FFF7FFFFFFFL,0x0000001F8132001EL});
    public static final BitSet FOLLOW_p_ExprSingle_in_p_ReplaceExpr12069 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000008000000L});
    public static final BitSet FOLLOW_WITH_in_p_ReplaceExpr12073 = new BitSet(new long[]{0xFFFFFFFFFFFF0000L,0xFFFFFFFFFFFFFFFFL,0x0F002FFF7FFFFFFFL,0x0000001F8132001EL});
    public static final BitSet FOLLOW_p_ExprSingle_in_p_ReplaceExpr12075 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_RENAME_in_p_RenameExpr12105 = new BitSet(new long[]{0x0000000000000000L,0x0000000000004000L});
    public static final BitSet FOLLOW_NODE_in_p_RenameExpr12109 = new BitSet(new long[]{0xFFFFFFFFFFFF0000L,0xFFFFFFFFFFFFFFFFL,0x0F002FFF7FFFFFFFL,0x0000001F8132001EL});
    public static final BitSet FOLLOW_p_TargetExpr_in_p_RenameExpr12111 = new BitSet(new long[]{0x0000000000080000L});
    public static final BitSet FOLLOW_AS_in_p_RenameExpr12113 = new BitSet(new long[]{0xFFFFFFFFFFFF0000L,0xFFFFFFFFFFFFFFFFL,0x0F002FFF7FFFFFFFL,0x0000001F8132001EL});
    public static final BitSet FOLLOW_p_NewNameExpr_in_p_RenameExpr12115 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_p_ExprSingle_in_p_SourceExpr12143 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_p_ExprSingle_in_p_TargetExpr12169 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_p_ExprSingle_in_p_NewNameExpr12195 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_COPY_in_p_TransformExpr12223 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000200000000000L});
    public static final BitSet FOLLOW_DOLLAR_in_p_TransformExpr12225 = new BitSet(new long[]{0xFFFFFFFFFFFF0000L,0xFFFFFFFFFFFFFFFFL,0x000007FF7FFFFFFFL,0x0000000001000000L});
    public static final BitSet FOLLOW_p_VarName_in_p_TransformExpr12227 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0008000000000000L});
    public static final BitSet FOLLOW_BIND_in_p_TransformExpr12229 = new BitSet(new long[]{0xFFFFFFFFFFFF0000L,0xFFFFFFFFFFFFFFFFL,0x0F002FFF7FFFFFFFL,0x0000001F8132001EL});
    public static final BitSet FOLLOW_p_ExprSingle_in_p_TransformExpr12231 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0040000000080000L});
    public static final BitSet FOLLOW_COMMA_in_p_TransformExpr12234 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000200000000000L});
    public static final BitSet FOLLOW_DOLLAR_in_p_TransformExpr12236 = new BitSet(new long[]{0xFFFFFFFFFFFF0000L,0xFFFFFFFFFFFFFFFFL,0x000007FF7FFFFFFFL,0x0000000001000000L});
    public static final BitSet FOLLOW_p_VarName_in_p_TransformExpr12238 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0008000000000000L});
    public static final BitSet FOLLOW_BIND_in_p_TransformExpr12240 = new BitSet(new long[]{0xFFFFFFFFFFFF0000L,0xFFFFFFFFFFFFFFFFL,0x0F002FFF7FFFFFFFL,0x0000001F8132001EL});
    public static final BitSet FOLLOW_p_ExprSingle_in_p_TransformExpr12242 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0040000000080000L});
    public static final BitSet FOLLOW_MODIFY_in_p_TransformExpr12248 = new BitSet(new long[]{0xFFFFFFFFFFFF0000L,0xFFFFFFFFFFFFFFFFL,0x0F002FFF7FFFFFFFL,0x0000001F8132001EL});
    public static final BitSet FOLLOW_p_ExprSingle_in_p_TransformExpr12250 = new BitSet(new long[]{0x0000000000000000L,0x0000000004000000L});
    public static final BitSet FOLLOW_RETURN_in_p_TransformExpr12254 = new BitSet(new long[]{0xFFFFFFFFFFFF0000L,0xFFFFFFFFFFFFFFFFL,0x0F002FFF7FFFFFFFL,0x0000001F8132001EL});
    public static final BitSet FOLLOW_p_ExprSingle_in_p_TransformExpr12256 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_p_ConcatExpr_in_pm_ApplyExpr12291 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000200L});
    public static final BitSet FOLLOW_SEMICOLON_in_pm_ApplyExpr12293 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_p_ExprSingle_in_p_ConcatExpr12319 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0040000000000000L});
    public static final BitSet FOLLOW_COMMA_in_p_ConcatExpr12322 = new BitSet(new long[]{0xFFFFFFFFFFFF0000L,0xFFFFFFFFFFFFFFFFL,0x0F002FFF7FFFFFFFL,0x0000001F8132001EL});
    public static final BitSet FOLLOW_p_ExprSingle_in_p_ConcatExpr12324 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0040000000000000L});
    public static final BitSet FOLLOW_BLOCK_in_p_BlockExpr12354 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000400000000000L});
    public static final BitSet FOLLOW_p_Block_in_p_BlockExpr12358 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_LBRACKET_in_p_Block12384 = new BitSet(new long[]{0xFFFFFFFFFFFF0000L,0xFFFFFFFFFFFFFFFFL,0x0F002FFF7FFFFFFFL,0x0000001F8132001EL});
    public static final BitSet FOLLOW_pm_BlockDecls_in_p_Block12388 = new BitSet(new long[]{0xFFFFFFFFFFFF0000L,0xFFFFFFFFFFFFFFFFL,0x0F002FFF7FFFFFFFL,0x0000001F8132001EL});
    public static final BitSet FOLLOW_p_BlockBody_in_p_Block12392 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000800000000000L});
    public static final BitSet FOLLOW_RBRACKET_in_p_Block12394 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_pm_BlockVarDecl_in_pm_BlockDecls12450 = new BitSet(new long[]{0x0000000400000002L});
    public static final BitSet FOLLOW_DECLARE_in_pm_BlockVarDecl12505 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000200000000000L});
    public static final BitSet FOLLOW_DOLLAR_in_pm_BlockVarDecl12509 = new BitSet(new long[]{0xFFFFFFFFFFFF0000L,0xFFFFFFFFFFFFFFFFL,0x000007FF7FFFFFFFL,0x0000000001000000L});
    public static final BitSet FOLLOW_p_VarName_in_pm_BlockVarDecl12513 = new BitSet(new long[]{0x0000000000080000L,0x0000000000000000L,0x0048000000000000L,0x0000000000000200L});
    public static final BitSet FOLLOW_p_TypeDeclaration_in_pm_BlockVarDecl12517 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0048000000000000L,0x0000000000000200L});
    public static final BitSet FOLLOW_BIND_in_pm_BlockVarDecl12521 = new BitSet(new long[]{0xFFFFFFFFFFFF0000L,0xFFFFFFFFFFFFFFFFL,0x0F002FFF7FFFFFFFL,0x0000001F8132001EL});
    public static final BitSet FOLLOW_p_ExprSingle_in_pm_BlockVarDecl12525 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0040000000000000L,0x0000000000000200L});
    public static final BitSet FOLLOW_COMMA_in_pm_BlockVarDecl12530 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000200000000000L});
    public static final BitSet FOLLOW_DOLLAR_in_pm_BlockVarDecl12532 = new BitSet(new long[]{0xFFFFFFFFFFFF0000L,0xFFFFFFFFFFFFFFFFL,0x000007FF7FFFFFFFL,0x0000000001000000L});
    public static final BitSet FOLLOW_p_VarName_in_pm_BlockVarDecl12534 = new BitSet(new long[]{0x0000000000080000L,0x0000000000000000L,0x0048000000000000L,0x0000000000000200L});
    public static final BitSet FOLLOW_p_TypeDeclaration_in_pm_BlockVarDecl12536 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0048000000000000L,0x0000000000000200L});
    public static final BitSet FOLLOW_BIND_in_pm_BlockVarDecl12540 = new BitSet(new long[]{0xFFFFFFFFFFFF0000L,0xFFFFFFFFFFFFFFFFL,0x0F002FFF7FFFFFFFL,0x0000001F8132001EL});
    public static final BitSet FOLLOW_p_ExprSingle_in_pm_BlockVarDecl12542 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0040000000000000L,0x0000000000000200L});
    public static final BitSet FOLLOW_SEMICOLON_in_pm_BlockVarDecl12548 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_pm_Expr_in_p_BlockBody12608 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_SET_in_p_AssignmentExpr12636 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000200000000000L});
    public static final BitSet FOLLOW_DOLLAR_in_p_AssignmentExpr12640 = new BitSet(new long[]{0xFFFFFFFFFFFF0000L,0xFFFFFFFFFFFFFFFFL,0x000007FF7FFFFFFFL,0x0000000001000000L});
    public static final BitSet FOLLOW_p_VarName_in_p_AssignmentExpr12642 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0008000000000000L});
    public static final BitSet FOLLOW_BIND_in_p_AssignmentExpr12644 = new BitSet(new long[]{0xFFFFFFFFFFFF0000L,0xFFFFFFFFFFFFFFFFL,0x0F002FFF7FFFFFFFL,0x0000001F8132001EL});
    public static final BitSet FOLLOW_p_ExprSingle_in_p_AssignmentExpr12646 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_EXIT_in_p_ExitExpr12674 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000080000000L});
    public static final BitSet FOLLOW_RETURNING_in_p_ExitExpr12680 = new BitSet(new long[]{0xFFFFFFFFFFFF0000L,0xFFFFFFFFFFFFFFFFL,0x0F002FFF7FFFFFFFL,0x0000001F8132001EL});
    public static final BitSet FOLLOW_p_ExprSingle_in_p_ExitExpr12684 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_WHILE_in_p_WhileExpr12712 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000080000000000L});
    public static final BitSet FOLLOW_LPAREN_in_p_WhileExpr12716 = new BitSet(new long[]{0xFFFFFFFFFFFF0000L,0xFFFFFFFFFFFFFFFFL,0x0F002FFF7FFFFFFFL,0x0000001F8132001EL});
    public static final BitSet FOLLOW_p_ExprSingle_in_p_WhileExpr12718 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000100000000000L});
    public static final BitSet FOLLOW_RPAREN_in_p_WhileExpr12720 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000400000000000L});
    public static final BitSet FOLLOW_p_WhileBody_in_p_WhileExpr12722 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_p_Block_in_p_WhileBody12748 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_p_UsingClause_in_p_EvalExpr12778 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000001000000000L});
    public static final BitSet FOLLOW_EVAL_in_p_EvalExpr12783 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000400000000000L});
    public static final BitSet FOLLOW_LBRACKET_in_p_EvalExpr12787 = new BitSet(new long[]{0xFFFFFFFFFFFF0000L,0xFFFFFFFFFFFFFFFFL,0x0F002FFF7FFFFFFFL,0x0000001F8132001EL});
    public static final BitSet FOLLOW_p_ExprSingle_in_p_EvalExpr12789 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000800000000000L});
    public static final BitSet FOLLOW_RBRACKET_in_p_EvalExpr12791 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_USING_in_p_UsingClause12818 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000200000000000L});
    public static final BitSet FOLLOW_DOLLAR_in_p_UsingClause12823 = new BitSet(new long[]{0xFFFFFFFFFFFF0000L,0xFFFFFFFFFFFFFFFFL,0x000007FF7FFFFFFFL,0x0000000001000000L});
    public static final BitSet FOLLOW_p_VarName_in_p_UsingClause12825 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0040000000000000L});
    public static final BitSet FOLLOW_COMMA_in_p_UsingClause12828 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000200000000000L});
    public static final BitSet FOLLOW_DOLLAR_in_p_UsingClause12830 = new BitSet(new long[]{0xFFFFFFFFFFFF0000L,0xFFFFFFFFFFFFFFFFL,0x000007FF7FFFFFFFL,0x0000000001000000L});
    public static final BitSet FOLLOW_p_VarName_in_p_UsingClause12832 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0040000000000000L});
    public static final BitSet FOLLOW_SLASH_in_synpred1_XQueryParser6000 = new BitSet(new long[]{0xFFFFFFFFFFFF0000L,0xFFFFFFFFFFFFFFFFL,0x09002FFF7FFFFFFFL,0x0000001F0132001EL});
    public static final BitSet FOLLOW_p_RelativePathExpr_in_synpred1_XQueryParser6002 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_p_OccurrenceIndicator_in_synpred2_XQueryParser8672 = new BitSet(new long[]{0x0000000000000002L});

}