// $ANTLR 3.1.2 XQueryParser.g 2009-12-02 16:41:49

/*******************************************************************************
 * Copyright (c) 2008, 2009 28msec Inc. and others.
 * All rights reserved. This program and the accompanying materials
 * are made available under the terms of the Eclipse Public License v1.0
 * which accompanies this distribution, and is available at
 * http://www.eclipse.org/legal/epl-v10.html
 *
 * Contributors:
 *     Gabriel Petrovay (28msec) - initial API and implementation
 *******************************************************************************/
package org.eclipse.wst.xquery.internal.core.parser.antlr;


import org.antlr.runtime.*;
import java.util.Stack;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;

import org.antlr.runtime.tree.*;

@SuppressWarnings({ "unused", "unchecked" })
public class XQueryParser extends XQDTParser {
    public static final String[] tokenNames = new String[] {
        "<invalid>", "<EOR>", "<DOWN>", "<UP>", "L_QuotAttrContentChar", "L_AposAttrContentChar", "L_ElementContentChar", "L_CDataSection", "L_PredefinedEntityRef", "L_CharRef", "ESCAPE_LBRACKET", "ESCAPE_RBRACKET", "ESCAPE_APOS", "ESCAPE_QUOT", "CDATA_START", "CDATA_END", "ANCESTOR", "ANCESTOR_OR_SELF", "AND", "AS", "ASCENDING", "AT", "ATTRIBUTE", "BASE_URI", "BOUNDARY_SPACE", "BY", "CASE", "CAST", "CASTABLE", "CHILD", "COLLATION", "COMMENT", "CONSTRUCTION", "COPY_NAMESPACES", "DECLARE", "DEFAULT", "DESCENDANT", "DESCENDANT_OR_SELF", "DESCENDING", "DIV", "DOCUMENT", "DOCUMENT_NODE", "ELEMENT", "ELSE", "EMPTY", "EMPTY_SEQUENCE", "ENCODING", "EQ", "EVERY", "EXCEPT", "EXTERNAL", "FOLLOWING", "FOLLOWING_SIBLING", "FOR", "FUNCTION", "GE", "GREATEST", "GT", "IDIV", "IF", "IMPORT", "IN", "INHERIT", "INSTANCE", "INTERSECT", "IS", "ITEM", "LAX", "LE", "LEAST", "LET", "LT", "MOD", "MODULE", "NAMESPACE", "NE", "NO_INHERIT", "NO_PRESERVE", "NODE", "OF", "OPTION", "OR", "ORDER", "ORDERED", "ORDERING", "PARENT", "PRECEDING", "PRECEDING_SIBLING", "PRESERVE", "PROCESSING_INSTRUCTION", "RETURN", "SATISFIES", "SCHEMA", "SCHEMA_ATTRIBUTE", "SCHEMA_ELEMENT", "SELF", "SOME", "STABLE", "STRICT", "STRIP", "TEXT", "THEN", "TO", "TREAT", "TYPESWITCH", "UNION", "UNORDERED", "VALIDATE", "VARIABLE", "VERSION", "WHERE", "XQUERY", "CATCH", "CONTEXT", "COUNT", "DECIMAL_FORMAT", "DECIMAL_SEPARATOR", "DIGIT", "END", "GROUP", "GROUPING_SEPARATOR", "INFINITY", "MINUS_SIGN", "NAMESPACE_NODE", "NAN", "NEXT", "ONLY", "OUTER", "PATTERN_SEPARATOR", "PERCENT", "PER_MILLE", "PREVIOUS", "SLIDING", "START", "TRY", "TUMBLING", "WHEN", "WINDOW", "ZERO_DIGIT", "AFTER", "BEFORE", "COPY", "DELETE", "FIRST", "INSERT", "INTO", "LAST", "MODIFY", "NODES", "RENAME", "REPLACE", "REVALIDATION", "SKIP", "UPDATING", "VALUE", "WITH", "BLOCK", "CONSTANT", "EXIT", "RETURNING", "SEQUENTIAL", "SET", "SIMPLE", "WHILE", "EVAL", "USING", "BINARY", "AMP_ER", "APOS_ER", "QUOT_ER", "LPAREN", "RPAREN", "DOLLAR", "LBRACKET", "RBRACKET", "LSQUARE", "RSQUARE", "EQUAL", "BIND", "NOTEQUAL", "AMP", "COMMA", "QUESTION", "STAR", "PLUS", "MINUS", "SMALLER", "GREATER", "SMALLEREQ", "GREATEREQ", "SMALLER_SMALLER", "GREATER_GREATER", "SLASH", "SLASH_SLASH", "DOT", "DOT_DOT", "COLON", "COLON_COLON", "EMPTY_CLOSE_TAG", "CLOSE_TAG", "SEMICOLON", "VBAR", "PRAGMA_START", "PRAGMA_END", "XML_COMMENT_START", "XML_COMMENT_END", "PI_START", "PI_END", "ATTR_SIGN", "CHARREF_DEC", "CHARREF_HEX", "APOS", "QUOT", "NCNameStartChar", "NCNameChar", "L_NCName", "Letter", "HexLetter", "Digit", "Digits", "S", "SU", "L_Pragma", "L_DirCommentConstructor", "L_DirPIConstructor", "L_IntegerLiteral", "L_DecimalLiteral", "L_DoubleLiteral", "L_Comment", "L_AnyChar", "L_QuotStringLiteralChar", "L_AposStringLiteralChar", "LibraryModule", "MainModule", "VersionDecl", "VersionDeclEncoding", "VersionDeclVersion", "ModuleDecl", "Prolog", "DefaultNamespaceDecls", "DefaultNamespaceDecl", "Setters", "Setter", "NamespaceDecls", "NamespaceDecl", "Imports", "SchemaImport", "SchemaPrefix", "NamespaceName", "DefaultElementNamespace", "AtHints", "ModuleImport", "BaseURIDecl", "OrderedDecls", "VarDecl", "VarType", "VarValue", "VarDefaultValue", "VarConstantDecl", "VarVariableDecl", "FunctionDecl", "ParamList", "ReturnType", "OptionDecl", "TypeDeclaration", "Param", "EnclosedExpr", "QueryBody", "UnaryExpr", "DirElemConstructor", "DirAttributeList", "DirAttributeValue", "DirElemContent", "CommonContent", "SequenceType", "EmptySequenceTest", "KindTest", "ItemTest", "AtomicType", "StringLiteral", "ElementContentChar", "AttributeValueChar", "QName", "Block", "BlockDecls", "BlockVarDecl", "BinaryTest"
    };
    public static final int L_CDataSection=7;
    public static final int NAMESPACE_NODE=123;
    public static final int MINUS=185;
    public static final int VarDefaultValue=257;
    public static final int Setters=241;
    public static final int END=118;
    public static final int INTO=145;
    public static final int PATTERN_SEPARATOR=128;
    public static final int VarType=255;
    public static final int GREATER_GREATER=191;
    public static final int ReturnType=262;
    public static final int RENAME=149;
    public static final int INSTANCE=63;
    public static final int TypeDeclaration=264;
    public static final int LAX=67;
    public static final int IMPORT=60;
    public static final int BINARY=166;
    public static final int BaseURIDecl=252;
    public static final int DOT=194;
    public static final int CASTABLE=28;
    public static final int ORDER=82;
    public static final int Letter=216;
    public static final int Prolog=238;
    public static final int CONSTANT=157;
    public static final int EMPTY_CLOSE_TAG=198;
    public static final int TYPESWITCH=104;
    public static final int MODULE=73;
    public static final int ESCAPE_RBRACKET=11;
    public static final int VERSION=109;
    public static final int RPAREN=171;
    public static final int AMP=180;
    public static final int DefaultElementNamespace=249;
    public static final int DirAttributeList=270;
    public static final int AttributeValueChar=281;
    public static final int XML_COMMENT_START=204;
    public static final int DECLARE=34;
    public static final int SchemaPrefix=247;
    public static final int BOUNDARY_SPACE=24;
    public static final int CLOSE_TAG=199;
    public static final int ElementContentChar=280;
    public static final int UNION=105;
    public static final int STRIP=99;
    public static final int GROUPING_SEPARATOR=120;
    public static final int HexLetter=217;
    public static final int WHEN=136;
    public static final int DESCENDING=38;
    public static final int DOCUMENT_NODE=41;
    public static final int Imports=245;
    public static final int ANCESTOR_OR_SELF=17;
    public static final int SMALLER_SMALLER=190;
    public static final int CATCH=112;
    public static final int ATTR_SIGN=208;
    public static final int GE=55;
    public static final int ELSE=43;
    public static final int SU=221;
    public static final int PRAGMA_START=202;
    public static final int EVAL=164;
    public static final int L_ElementContentChar=6;
    public static final int SELF=95;
    public static final int NamespaceName=248;
    public static final int COUNT=114;
    public static final int TEXT=100;
    public static final int COLON=196;
    public static final int PARENT=85;
    public static final int SET=161;
    public static final int PERCENT=129;
    public static final int EMPTY_SEQUENCE=45;
    public static final int EXTERNAL=50;
    public static final int Digit=218;
    public static final int LAST=146;
    public static final int DOT_DOT=195;
    public static final int DECIMAL_SEPARATOR=116;
    public static final int CAST=27;
    public static final int L_CharRef=9;
    public static final int OptionDecl=263;
    public static final int LBRACKET=173;
    public static final int MOD=72;
    public static final int EXCEPT=49;
    public static final int QUESTION=182;
    public static final int OR=81;
    public static final int KindTest=276;
    public static final int AFTER=139;
    public static final int BLOCK=156;
    public static final int SMALLEREQ=188;
    public static final int S=220;
    public static final int Setter=242;
    public static final int BY=25;
    public static final int SCHEMA_ELEMENT=94;
    public static final int INFINITY=121;
    public static final int EnclosedExpr=266;
    public static final int TUMBLING=135;
    public static final int NO_INHERIT=76;
    public static final int LPAREN=170;
    public static final int PRECEDING_SIBLING=87;
    public static final int L_DecimalLiteral=226;
    public static final int EXIT=158;
    public static final int PI_START=206;
    public static final int APOS=211;
    public static final int SKIP=152;
    public static final int DELETE=142;
    public static final int EMPTY=44;
    public static final int NamespaceDecl=244;
    public static final int ASCENDING=20;
    public static final int NamespaceDecls=243;
    public static final int WHILE=163;
    public static final int ESCAPE_QUOT=13;
    public static final int ONLY=126;
    public static final int SchemaImport=246;
    public static final int NE=75;
    public static final int APOS_ER=168;
    public static final int COMMENT=31;
    public static final int Param=265;
    public static final int RETURNING=159;
    public static final int L_AnyChar=229;
    public static final int RSQUARE=176;
    public static final int ESCAPE_APOS=12;
    public static final int NCNameChar=214;
    public static final int WITH=155;
    public static final int IN=61;
    public static final int DirElemContent=272;
    public static final int SOME=96;
    public static final int NEXT=125;
    public static final int RETURN=90;
    public static final int LET=70;
    public static final int IF=59;
    public static final int QName=282;
    public static final int NODE=78;
    public static final int PER_MILLE=130;
    public static final int FOR=53;
    public static final int CHARREF_HEX=210;
    public static final int PRESERVE=88;
    public static final int DEFAULT=35;
    public static final int L_AposAttrContentChar=5;
    public static final int BEFORE=140;
    public static final int ATTRIBUTE=22;
    public static final int CHILD=29;
    public static final int Digits=219;
    public static final int CDATA_START=14;
    public static final int TRY=134;
    public static final int OPTION=80;
    public static final int L_DirCommentConstructor=223;
    public static final int COMMA=181;
    public static final int ELEMENT=42;
    public static final int AS=19;
    public static final int DOCUMENT=40;
    public static final int ENCODING=46;
    public static final int NAN=124;
    public static final int AtomicType=278;
    public static final int TREAT=103;
    public static final int NAMESPACE=74;
    public static final int LEAST=69;
    public static final int THEN=101;
    public static final int PI_END=207;
    public static final int GREATEREQ=189;
    public static final int SequenceType=274;
    public static final int OrderedDecls=253;
    public static final int NCNameStartChar=213;
    public static final int AND=18;
    public static final int BASE_URI=23;
    public static final int TO=102;
    public static final int DefaultNamespaceDecls=239;
    public static final int ItemTest=277;
    public static final int FUNCTION=54;
    public static final int L_Pragma=222;
    public static final int ParamList=261;
    public static final int QueryBody=267;
    public static final int LE=68;
    public static final int RBRACKET=174;
    public static final int SCHEMA=92;
    public static final int CONSTRUCTION=32;
    public static final int VersionDecl=234;
    public static final int PLUS=184;
    public static final int VarDecl=254;
    public static final int L_DoubleLiteral=227;
    public static final int INTERSECT=64;
    public static final int AT=21;
    public static final int AtHints=250;
    public static final int L_QuotAttrContentChar=4;
    public static final int LSQUARE=175;
    public static final int GREATEST=56;
    public static final int EQ=47;
    public static final int L_AposStringLiteralChar=231;
    public static final int LT=71;
    public static final int ESCAPE_LBRACKET=10;
    public static final int OF=79;
    public static final int DOLLAR=172;
    public static final int WINDOW=137;
    public static final int FOLLOWING=51;
    public static final int CASE=26;
    public static final int CDATA_END=15;
    public static final int UnaryExpr=268;
    public static final int DESCENDANT_OR_SELF=37;
    public static final int EQUAL=177;
    public static final int SEMICOLON=200;
    public static final int FIRST=143;
    public static final int SIMPLE=162;
    public static final int DIV=39;
    public static final int BlockVarDecl=285;
    public static final int INSERT=144;
    public static final int REVALIDATION=151;
    public static final int QUOT=212;
    public static final int VersionDeclVersion=236;
    public static final int WHERE=110;
    public static final int DefaultNamespaceDecl=240;
    public static final int PREVIOUS=131;
    public static final int COPY=141;
    public static final int AMP_ER=167;
    public static final int USING=165;
    public static final int EVERY=48;
    public static final int SCHEMA_ATTRIBUTE=93;
    public static final int XQUERY=111;
    public static final int CONTEXT=113;
    public static final int SLIDING=132;
    public static final int MainModule=233;
    public static final int PRAGMA_END=203;
    public static final int IDIV=58;
    public static final int UPDATING=153;
    public static final int BlockDecls=284;
    public static final int SATISFIES=91;
    public static final int DESCENDANT=36;
    public static final int VALUE=154;
    public static final int VarVariableDecl=259;
    public static final int STRICT=98;
    public static final int NOTEQUAL=179;
    public static final int COLON_COLON=197;
    public static final int L_PredefinedEntityRef=8;
    public static final int L_IntegerLiteral=225;
    public static final int ModuleImport=251;
    public static final int FOLLOWING_SIBLING=52;
    public static final int STABLE=97;
    public static final int CHARREF_DEC=209;
    public static final int ModuleDecl=237;
    public static final int DECIMAL_FORMAT=115;
    public static final int START=133;
    public static final int EmptySequenceTest=275;
    public static final int GROUP=119;
    public static final int VALIDATE=107;
    public static final int VarValue=256;
    public static final int PRECEDING=86;
    public static final int GREATER=187;
    public static final int ZERO_DIGIT=138;
    public static final int MINUS_SIGN=122;
    public static final int VBAR=201;
    public static final int DIGIT=117;
    public static final int COPY_NAMESPACES=33;
    public static final int ORDERING=84;
    public static final int NO_PRESERVE=77;
    public static final int UNORDERED=106;
    public static final int OUTER=127;
    public static final int DirAttributeValue=271;
    public static final int VarConstantDecl=258;
    public static final int L_NCName=215;
    public static final int INHERIT=62;
    public static final int SLASH=192;
    public static final int LibraryModule=232;
    public static final int L_DirPIConstructor=224;
    public static final int IS=65;
    public static final int REPLACE=150;
    public static final int GT=57;
    public static final int StringLiteral=279;
    public static final int L_QuotStringLiteralChar=230;
    public static final int DirElemConstructor=269;
    public static final int ITEM=66;
    public static final int ORDERED=83;
    public static final int PROCESSING_INSTRUCTION=89;
    public static final int Block=283;
    public static final int CommonContent=273;
    public static final int COLLATION=30;
    public static final int SLASH_SLASH=193;
    public static final int SEQUENTIAL=160;
    public static final int ANCESTOR=16;
    public static final int SMALLER=186;
    public static final int NODES=148;
    public static final int BinaryTest=286;
    public static final int VersionDeclEncoding=235;
    public static final int VARIABLE=108;
    public static final int EOF=-1;
    public static final int MODIFY=147;
    public static final int STAR=183;
    public static final int QUOT_ER=169;
    public static final int BIND=178;
    public static final int L_Comment=228;
    public static final int FunctionDecl=260;
    public static final int XML_COMMENT_END=205;

    // delegates
    // delegators


        public XQueryParser(TokenStream input) {
            this(input, new RecognizerSharedState());
        }
        public XQueryParser(TokenStream input, RecognizerSharedState state) {
            super(input, state);
             
        }
        
    protected TreeAdaptor adaptor = new CommonTreeAdaptor();

    public void setTreeAdaptor(TreeAdaptor adaptor) {
        this.adaptor = adaptor;
    }
    public TreeAdaptor getTreeAdaptor() {
        return adaptor;
    }

    public String[] getTokenNames() { return XQueryParser.tokenNames; }
    public String getGrammarFileName() { return "XQueryParser.g"; }


    // dummy list for warning elimination
    List<Stack<Object>> dummy1 = new ArrayList<Stack<Object>>();
    Map<Object, Object> dummy2 = new HashMap<Object, Object>();


    public static class p_Module_return extends ParserRuleReturnScope {
        XQDTCommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "p_Module"
    // XQueryParser.g:127:1: p_Module : (vd= p_VersionDecl )? (lm= p_LibraryModule[$vd.tree] -> | mm= p_MainModule[$vd.tree] ->) EOF ;
    public final XQueryParser.p_Module_return p_Module() throws RecognitionException {
        XQueryParser.p_Module_return retval = new XQueryParser.p_Module_return();
        retval.start = input.LT(1);

        XQDTCommonTree root_0 = null;

        CommonToken EOF1=null;
        XQueryParser.p_VersionDecl_return vd = null;

        XQueryParser.p_LibraryModule_return lm = null;

        XQueryParser.p_MainModule_return mm = null;


        XQDTCommonTree EOF1_tree=null;
        RewriteRuleTokenStream stream_EOF=new RewriteRuleTokenStream(adaptor,"token EOF");
        RewriteRuleSubtreeStream stream_p_MainModule=new RewriteRuleSubtreeStream(adaptor,"rule p_MainModule");
        RewriteRuleSubtreeStream stream_p_LibraryModule=new RewriteRuleSubtreeStream(adaptor,"rule p_LibraryModule");
        RewriteRuleSubtreeStream stream_p_VersionDecl=new RewriteRuleSubtreeStream(adaptor,"rule p_VersionDecl");
        try {
            // XQueryParser.g:128:9: ( (vd= p_VersionDecl )? (lm= p_LibraryModule[$vd.tree] -> | mm= p_MainModule[$vd.tree] ->) EOF )
            // XQueryParser.g:128:11: (vd= p_VersionDecl )? (lm= p_LibraryModule[$vd.tree] -> | mm= p_MainModule[$vd.tree] ->) EOF
            {
            // XQueryParser.g:128:13: (vd= p_VersionDecl )?
            int alt1=2;
            int LA1_0 = input.LA(1);

            if ( (LA1_0==XQUERY) ) {
                int LA1_1 = input.LA(2);

                if ( (LA1_1==ENCODING||LA1_1==VERSION) ) {
                    alt1=1;
                }
            }
            switch (alt1) {
                case 1 :
                    // XQueryParser.g:128:13: vd= p_VersionDecl
                    {
                    pushFollow(FOLLOW_p_VersionDecl_in_p_Module610);
                    vd=p_VersionDecl();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_p_VersionDecl.add(vd.getTree());

                    }
                    break;

            }

            // XQueryParser.g:129:13: (lm= p_LibraryModule[$vd.tree] -> | mm= p_MainModule[$vd.tree] ->)
            int alt2=2;
            int LA2_0 = input.LA(1);

            if ( (LA2_0==MODULE) ) {
                int LA2_1 = input.LA(2);

                if ( (LA2_1==NAMESPACE) ) {
                    alt2=1;
                }
                else if ( (LA2_1==EOF||LA2_1==AND||(LA2_1>=CAST && LA2_1<=CASTABLE)||LA2_1==DIV||LA2_1==EQ||LA2_1==EXCEPT||LA2_1==GE||(LA2_1>=GT && LA2_1<=IDIV)||(LA2_1>=INSTANCE && LA2_1<=IS)||LA2_1==LE||(LA2_1>=LT && LA2_1<=MOD)||LA2_1==NE||LA2_1==OR||(LA2_1>=TO && LA2_1<=TREAT)||LA2_1==UNION||LA2_1==LPAREN||LA2_1==LSQUARE||LA2_1==EQUAL||LA2_1==NOTEQUAL||LA2_1==COMMA||(LA2_1>=STAR && LA2_1<=SLASH_SLASH)||LA2_1==COLON||(LA2_1>=SEMICOLON && LA2_1<=VBAR)) ) {
                    alt2=2;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 2, 1, input);

                    throw nvae;
                }
            }
            else if ( ((LA2_0>=ANCESTOR && LA2_0<=MOD)||(LA2_0>=NAMESPACE && LA2_0<=EXIT)||(LA2_0>=SEQUENTIAL && LA2_0<=LPAREN)||LA2_0==DOLLAR||(LA2_0>=STAR && LA2_0<=SMALLER)||(LA2_0>=SLASH && LA2_0<=DOT_DOT)||LA2_0==ATTR_SIGN||(LA2_0>=APOS && LA2_0<=QUOT)||LA2_0==L_NCName||(LA2_0>=L_Pragma && LA2_0<=L_DoubleLiteral)) ) {
                alt2=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 2, 0, input);

                throw nvae;
            }
            switch (alt2) {
                case 1 :
                    // XQueryParser.g:130:17: lm= p_LibraryModule[$vd.tree]
                    {
                    pushFollow(FOLLOW_p_LibraryModule_in_p_Module645);
                    lm=p_LibraryModule((vd!=null?((XQDTCommonTree)vd.tree):null));

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_p_LibraryModule.add(lm.getTree());


                    // AST REWRITE
                    // elements: 
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (XQDTCommonTree)adaptor.nil();
                    // 130:49: ->
                    {
                        adaptor.addChild(root_0, (lm!=null?((XQDTCommonTree)lm.tree):null));

                    }

                    retval.tree = root_0;}
                    }
                    break;
                case 2 :
                    // XQueryParser.g:131:15: mm= p_MainModule[$vd.tree]
                    {
                    pushFollow(FOLLOW_p_MainModule_in_p_Module671);
                    mm=p_MainModule((vd!=null?((XQDTCommonTree)vd.tree):null));

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_p_MainModule.add(mm.getTree());


                    // AST REWRITE
                    // elements: 
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (XQDTCommonTree)adaptor.nil();
                    // 131:49: ->
                    {
                        adaptor.addChild(root_0, (mm!=null?((XQDTCommonTree)mm.tree):null));

                    }

                    retval.tree = root_0;}
                    }
                    break;

            }

            EOF1=(CommonToken)match(input,EOF,FOLLOW_EOF_in_p_Module700); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_EOF.add(EOF1);


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (XQDTCommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (XQDTCommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "p_Module"

    public static class p_VersionDecl_return extends ParserRuleReturnScope {
        XQDTCommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "p_VersionDecl"
    // XQueryParser.g:136:1: p_VersionDecl : k+= XQUERY ( (k+= ENCODING enc= p_StringLiteral ) | (k+= VERSION ver= p_StringLiteral (k+= ENCODING enc= p_StringLiteral )? ) ) SEMICOLON -> ^( VersionDecl ^( VersionDeclVersion ( $ver)? ) ^( VersionDeclEncoding ( $enc)? ) ) ;
    public final XQueryParser.p_VersionDecl_return p_VersionDecl() throws RecognitionException {
        XQueryParser.p_VersionDecl_return retval = new XQueryParser.p_VersionDecl_return();
        retval.start = input.LT(1);

        XQDTCommonTree root_0 = null;

        CommonToken SEMICOLON2=null;
        CommonToken k=null;
        List list_k=null;
        XQueryParser.p_StringLiteral_return enc = null;

        XQueryParser.p_StringLiteral_return ver = null;


        XQDTCommonTree SEMICOLON2_tree=null;
        XQDTCommonTree k_tree=null;
        RewriteRuleTokenStream stream_VERSION=new RewriteRuleTokenStream(adaptor,"token VERSION");
        RewriteRuleTokenStream stream_ENCODING=new RewriteRuleTokenStream(adaptor,"token ENCODING");
        RewriteRuleTokenStream stream_SEMICOLON=new RewriteRuleTokenStream(adaptor,"token SEMICOLON");
        RewriteRuleTokenStream stream_XQUERY=new RewriteRuleTokenStream(adaptor,"token XQUERY");
        RewriteRuleSubtreeStream stream_p_StringLiteral=new RewriteRuleSubtreeStream(adaptor,"rule p_StringLiteral");
        try {
            // XQueryParser.g:137:9: (k+= XQUERY ( (k+= ENCODING enc= p_StringLiteral ) | (k+= VERSION ver= p_StringLiteral (k+= ENCODING enc= p_StringLiteral )? ) ) SEMICOLON -> ^( VersionDecl ^( VersionDeclVersion ( $ver)? ) ^( VersionDeclEncoding ( $enc)? ) ) )
            // XQueryParser.g:137:11: k+= XQUERY ( (k+= ENCODING enc= p_StringLiteral ) | (k+= VERSION ver= p_StringLiteral (k+= ENCODING enc= p_StringLiteral )? ) ) SEMICOLON
            {
            k=(CommonToken)match(input,XQUERY,FOLLOW_XQUERY_in_p_VersionDecl728); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_XQUERY.add(k);

            if (list_k==null) list_k=new ArrayList();
            list_k.add(k);

            // XQueryParser.g:137:21: ( (k+= ENCODING enc= p_StringLiteral ) | (k+= VERSION ver= p_StringLiteral (k+= ENCODING enc= p_StringLiteral )? ) )
            int alt4=2;
            int LA4_0 = input.LA(1);

            if ( (LA4_0==ENCODING) ) {
                alt4=1;
            }
            else if ( (LA4_0==VERSION) ) {
                alt4=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 4, 0, input);

                throw nvae;
            }
            switch (alt4) {
                case 1 :
                    // XQueryParser.g:137:22: (k+= ENCODING enc= p_StringLiteral )
                    {
                    // XQueryParser.g:137:22: (k+= ENCODING enc= p_StringLiteral )
                    // XQueryParser.g:137:23: k+= ENCODING enc= p_StringLiteral
                    {
                    k=(CommonToken)match(input,ENCODING,FOLLOW_ENCODING_in_p_VersionDecl734); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_ENCODING.add(k);

                    if (list_k==null) list_k=new ArrayList();
                    list_k.add(k);

                    pushFollow(FOLLOW_p_StringLiteral_in_p_VersionDecl738);
                    enc=p_StringLiteral();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_p_StringLiteral.add(enc.getTree());

                    }


                    }
                    break;
                case 2 :
                    // XQueryParser.g:137:58: (k+= VERSION ver= p_StringLiteral (k+= ENCODING enc= p_StringLiteral )? )
                    {
                    // XQueryParser.g:137:58: (k+= VERSION ver= p_StringLiteral (k+= ENCODING enc= p_StringLiteral )? )
                    // XQueryParser.g:137:59: k+= VERSION ver= p_StringLiteral (k+= ENCODING enc= p_StringLiteral )?
                    {
                    k=(CommonToken)match(input,VERSION,FOLLOW_VERSION_in_p_VersionDecl746); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_VERSION.add(k);

                    if (list_k==null) list_k=new ArrayList();
                    list_k.add(k);

                    pushFollow(FOLLOW_p_StringLiteral_in_p_VersionDecl750);
                    ver=p_StringLiteral();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_p_StringLiteral.add(ver.getTree());
                    // XQueryParser.g:137:90: (k+= ENCODING enc= p_StringLiteral )?
                    int alt3=2;
                    int LA3_0 = input.LA(1);

                    if ( (LA3_0==ENCODING) ) {
                        alt3=1;
                    }
                    switch (alt3) {
                        case 1 :
                            // XQueryParser.g:137:91: k+= ENCODING enc= p_StringLiteral
                            {
                            k=(CommonToken)match(input,ENCODING,FOLLOW_ENCODING_in_p_VersionDecl755); if (state.failed) return retval; 
                            if ( state.backtracking==0 ) stream_ENCODING.add(k);

                            if (list_k==null) list_k=new ArrayList();
                            list_k.add(k);

                            pushFollow(FOLLOW_p_StringLiteral_in_p_VersionDecl759);
                            enc=p_StringLiteral();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_p_StringLiteral.add(enc.getTree());

                            }
                            break;

                    }


                    }


                    }
                    break;

            }

            SEMICOLON2=(CommonToken)match(input,SEMICOLON,FOLLOW_SEMICOLON_in_p_VersionDecl765); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_SEMICOLON.add(SEMICOLON2);

            if ( state.backtracking==0 ) {
              ak(list_k);
            }


            // AST REWRITE
            // elements: ver, enc
            // token labels: 
            // rule labels: ver, retval, enc
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_ver=new RewriteRuleSubtreeStream(adaptor,"rule ver",ver!=null?ver.tree:null);
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
            RewriteRuleSubtreeStream stream_enc=new RewriteRuleSubtreeStream(adaptor,"rule enc",enc!=null?enc.tree:null);

            root_0 = (XQDTCommonTree)adaptor.nil();
            // 138:17: -> ^( VersionDecl ^( VersionDeclVersion ( $ver)? ) ^( VersionDeclEncoding ( $enc)? ) )
            {
                // XQueryParser.g:138:20: ^( VersionDecl ^( VersionDeclVersion ( $ver)? ) ^( VersionDeclEncoding ( $enc)? ) )
                {
                XQDTCommonTree root_1 = (XQDTCommonTree)adaptor.nil();
                root_1 = (XQDTCommonTree)adaptor.becomeRoot((XQDTCommonTree)adaptor.create(VersionDecl, "VersionDecl"), root_1);

                // XQueryParser.g:138:34: ^( VersionDeclVersion ( $ver)? )
                {
                XQDTCommonTree root_2 = (XQDTCommonTree)adaptor.nil();
                root_2 = (XQDTCommonTree)adaptor.becomeRoot((XQDTCommonTree)adaptor.create(VersionDeclVersion, "VersionDeclVersion"), root_2);

                // XQueryParser.g:138:55: ( $ver)?
                if ( stream_ver.hasNext() ) {
                    adaptor.addChild(root_2, stream_ver.nextTree());

                }
                stream_ver.reset();

                adaptor.addChild(root_1, root_2);
                }
                // XQueryParser.g:138:62: ^( VersionDeclEncoding ( $enc)? )
                {
                XQDTCommonTree root_2 = (XQDTCommonTree)adaptor.nil();
                root_2 = (XQDTCommonTree)adaptor.becomeRoot((XQDTCommonTree)adaptor.create(VersionDeclEncoding, "VersionDeclEncoding"), root_2);

                // XQueryParser.g:138:84: ( $enc)?
                if ( stream_enc.hasNext() ) {
                    adaptor.addChild(root_2, stream_enc.nextTree());

                }
                stream_enc.reset();

                adaptor.addChild(root_1, root_2);
                }

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (XQDTCommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (XQDTCommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "p_VersionDecl"

    public static class p_MainModule_return extends ParserRuleReturnScope {
        XQDTCommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "p_MainModule"
    // XQueryParser.g:142:1: p_MainModule[CommonTree vd] : pm_Prolog p_QueryBody -> ^( MainModule pm_Prolog p_QueryBody ) ;
    public final XQueryParser.p_MainModule_return p_MainModule(CommonTree vd) throws RecognitionException {
        XQueryParser.p_MainModule_return retval = new XQueryParser.p_MainModule_return();
        retval.start = input.LT(1);

        XQDTCommonTree root_0 = null;

        XQueryParser.pm_Prolog_return pm_Prolog3 = null;

        XQueryParser.p_QueryBody_return p_QueryBody4 = null;


        RewriteRuleSubtreeStream stream_pm_Prolog=new RewriteRuleSubtreeStream(adaptor,"rule pm_Prolog");
        RewriteRuleSubtreeStream stream_p_QueryBody=new RewriteRuleSubtreeStream(adaptor,"rule p_QueryBody");
        try {
            // XQueryParser.g:143:9: ( pm_Prolog p_QueryBody -> ^( MainModule pm_Prolog p_QueryBody ) )
            // XQueryParser.g:143:11: pm_Prolog p_QueryBody
            {
            pushFollow(FOLLOW_pm_Prolog_in_p_MainModule833);
            pm_Prolog3=pm_Prolog();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_pm_Prolog.add(pm_Prolog3.getTree());
            pushFollow(FOLLOW_p_QueryBody_in_p_MainModule835);
            p_QueryBody4=p_QueryBody();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_p_QueryBody.add(p_QueryBody4.getTree());


            // AST REWRITE
            // elements: p_QueryBody, pm_Prolog
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (XQDTCommonTree)adaptor.nil();
            // 144:17: -> ^( MainModule pm_Prolog p_QueryBody )
            {
                // XQueryParser.g:144:20: ^( MainModule pm_Prolog p_QueryBody )
                {
                XQDTCommonTree root_1 = (XQDTCommonTree)adaptor.nil();
                root_1 = (XQDTCommonTree)adaptor.becomeRoot((XQDTCommonTree)adaptor.create(MainModule, "MainModule"), root_1);

                adaptor.addChild(root_1, vd);
                adaptor.addChild(root_1, stream_pm_Prolog.nextTree());
                adaptor.addChild(root_1, stream_p_QueryBody.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (XQDTCommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (XQDTCommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "p_MainModule"

    public static class p_LibraryModule_return extends ParserRuleReturnScope {
        XQDTCommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "p_LibraryModule"
    // XQueryParser.g:148:1: p_LibraryModule[CommonTree vd] : p_ModuleDecl pm_Prolog -> ^( LibraryModule p_ModuleDecl pm_Prolog ) ;
    public final XQueryParser.p_LibraryModule_return p_LibraryModule(CommonTree vd) throws RecognitionException {
        XQueryParser.p_LibraryModule_return retval = new XQueryParser.p_LibraryModule_return();
        retval.start = input.LT(1);

        XQDTCommonTree root_0 = null;

        XQueryParser.p_ModuleDecl_return p_ModuleDecl5 = null;

        XQueryParser.pm_Prolog_return pm_Prolog6 = null;


        RewriteRuleSubtreeStream stream_pm_Prolog=new RewriteRuleSubtreeStream(adaptor,"rule pm_Prolog");
        RewriteRuleSubtreeStream stream_p_ModuleDecl=new RewriteRuleSubtreeStream(adaptor,"rule p_ModuleDecl");
        try {
            // XQueryParser.g:149:9: ( p_ModuleDecl pm_Prolog -> ^( LibraryModule p_ModuleDecl pm_Prolog ) )
            // XQueryParser.g:149:11: p_ModuleDecl pm_Prolog
            {
            pushFollow(FOLLOW_p_ModuleDecl_in_p_LibraryModule891);
            p_ModuleDecl5=p_ModuleDecl();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_p_ModuleDecl.add(p_ModuleDecl5.getTree());
            pushFollow(FOLLOW_pm_Prolog_in_p_LibraryModule893);
            pm_Prolog6=pm_Prolog();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_pm_Prolog.add(pm_Prolog6.getTree());


            // AST REWRITE
            // elements: p_ModuleDecl, pm_Prolog
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (XQDTCommonTree)adaptor.nil();
            // 150:17: -> ^( LibraryModule p_ModuleDecl pm_Prolog )
            {
                // XQueryParser.g:150:20: ^( LibraryModule p_ModuleDecl pm_Prolog )
                {
                XQDTCommonTree root_1 = (XQDTCommonTree)adaptor.nil();
                root_1 = (XQDTCommonTree)adaptor.becomeRoot((XQDTCommonTree)adaptor.create(LibraryModule, "LibraryModule"), root_1);

                adaptor.addChild(root_1, vd);
                adaptor.addChild(root_1, stream_p_ModuleDecl.nextTree());
                adaptor.addChild(root_1, stream_pm_Prolog.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (XQDTCommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (XQDTCommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "p_LibraryModule"

    public static class p_ModuleDecl_return extends ParserRuleReturnScope {
        XQDTCommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "p_ModuleDecl"
    // XQueryParser.g:154:1: p_ModuleDecl : k+= MODULE k+= NAMESPACE p_NCName EQUAL p_StringLiteral SEMICOLON -> ^( ModuleDecl p_NCName p_StringLiteral ) ;
    public final XQueryParser.p_ModuleDecl_return p_ModuleDecl() throws RecognitionException {
        XQueryParser.p_ModuleDecl_return retval = new XQueryParser.p_ModuleDecl_return();
        retval.start = input.LT(1);

        XQDTCommonTree root_0 = null;

        CommonToken EQUAL8=null;
        CommonToken SEMICOLON10=null;
        CommonToken k=null;
        List list_k=null;
        XQueryParser.p_NCName_return p_NCName7 = null;

        XQueryParser.p_StringLiteral_return p_StringLiteral9 = null;


        XQDTCommonTree EQUAL8_tree=null;
        XQDTCommonTree SEMICOLON10_tree=null;
        XQDTCommonTree k_tree=null;
        RewriteRuleTokenStream stream_NAMESPACE=new RewriteRuleTokenStream(adaptor,"token NAMESPACE");
        RewriteRuleTokenStream stream_EQUAL=new RewriteRuleTokenStream(adaptor,"token EQUAL");
        RewriteRuleTokenStream stream_SEMICOLON=new RewriteRuleTokenStream(adaptor,"token SEMICOLON");
        RewriteRuleTokenStream stream_MODULE=new RewriteRuleTokenStream(adaptor,"token MODULE");
        RewriteRuleSubtreeStream stream_p_NCName=new RewriteRuleSubtreeStream(adaptor,"rule p_NCName");
        RewriteRuleSubtreeStream stream_p_StringLiteral=new RewriteRuleSubtreeStream(adaptor,"rule p_StringLiteral");
        try {
            // XQueryParser.g:155:9: (k+= MODULE k+= NAMESPACE p_NCName EQUAL p_StringLiteral SEMICOLON -> ^( ModuleDecl p_NCName p_StringLiteral ) )
            // XQueryParser.g:155:11: k+= MODULE k+= NAMESPACE p_NCName EQUAL p_StringLiteral SEMICOLON
            {
            k=(CommonToken)match(input,MODULE,FOLLOW_MODULE_in_p_ModuleDecl949); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_MODULE.add(k);

            if (list_k==null) list_k=new ArrayList();
            list_k.add(k);

            k=(CommonToken)match(input,NAMESPACE,FOLLOW_NAMESPACE_in_p_ModuleDecl953); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_NAMESPACE.add(k);

            if (list_k==null) list_k=new ArrayList();
            list_k.add(k);

            pushFollow(FOLLOW_p_NCName_in_p_ModuleDecl955);
            p_NCName7=p_NCName();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_p_NCName.add(p_NCName7.getTree());
            EQUAL8=(CommonToken)match(input,EQUAL,FOLLOW_EQUAL_in_p_ModuleDecl957); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_EQUAL.add(EQUAL8);

            pushFollow(FOLLOW_p_StringLiteral_in_p_ModuleDecl959);
            p_StringLiteral9=p_StringLiteral();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_p_StringLiteral.add(p_StringLiteral9.getTree());
            SEMICOLON10=(CommonToken)match(input,SEMICOLON,FOLLOW_SEMICOLON_in_p_ModuleDecl961); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_SEMICOLON.add(SEMICOLON10);

            if ( state.backtracking==0 ) {
              ak(list_k);
            }


            // AST REWRITE
            // elements: p_NCName, p_StringLiteral
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (XQDTCommonTree)adaptor.nil();
            // 156:17: -> ^( ModuleDecl p_NCName p_StringLiteral )
            {
                // XQueryParser.g:156:21: ^( ModuleDecl p_NCName p_StringLiteral )
                {
                XQDTCommonTree root_1 = (XQDTCommonTree)adaptor.nil();
                root_1 = (XQDTCommonTree)adaptor.becomeRoot((XQDTCommonTree)adaptor.create(ModuleDecl, "ModuleDecl"), root_1);

                adaptor.addChild(root_1, stream_p_NCName.nextTree());
                adaptor.addChild(root_1, stream_p_StringLiteral.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (XQDTCommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (XQDTCommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "p_ModuleDecl"

    public static class pm_Prolog_return extends ParserRuleReturnScope {
        XQDTCommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "pm_Prolog"
    // XQueryParser.g:162:1: pm_Prolog : ( (dnd+= pm_DefaultNamespaceDecl | s+= p_Setter | nd+= pm_NamespaceDecl | i+= p_Import ) )* od= pg_OrderedDecl -> ^( Prolog ^( DefaultNamespaceDecls ( $dnd)* ) ^( Setters ( $s)* ) ^( NamespaceDecls ( $nd)* ) ^( Imports ( $i)* ) ^( OrderedDecls ( $od)* ) ) ;
    public final XQueryParser.pm_Prolog_return pm_Prolog() throws RecognitionException {
        XQueryParser.pm_Prolog_return retval = new XQueryParser.pm_Prolog_return();
        retval.start = input.LT(1);

        XQDTCommonTree root_0 = null;

        List list_dnd=null;
        List list_s=null;
        List list_nd=null;
        List list_i=null;
        XQueryParser.pg_OrderedDecl_return od = null;

        XQueryParser.pm_DefaultNamespaceDecl_return dnd = null;
         dnd = null;
        XQueryParser.p_Setter_return s = null;
         s = null;
        XQueryParser.pm_NamespaceDecl_return nd = null;
         nd = null;
        XQueryParser.p_Import_return i = null;
         i = null;
        RewriteRuleSubtreeStream stream_p_Import=new RewriteRuleSubtreeStream(adaptor,"rule p_Import");
        RewriteRuleSubtreeStream stream_pg_OrderedDecl=new RewriteRuleSubtreeStream(adaptor,"rule pg_OrderedDecl");
        RewriteRuleSubtreeStream stream_pm_DefaultNamespaceDecl=new RewriteRuleSubtreeStream(adaptor,"rule pm_DefaultNamespaceDecl");
        RewriteRuleSubtreeStream stream_pm_NamespaceDecl=new RewriteRuleSubtreeStream(adaptor,"rule pm_NamespaceDecl");
        RewriteRuleSubtreeStream stream_p_Setter=new RewriteRuleSubtreeStream(adaptor,"rule p_Setter");
        try {
            // XQueryParser.g:163:9: ( ( (dnd+= pm_DefaultNamespaceDecl | s+= p_Setter | nd+= pm_NamespaceDecl | i+= p_Import ) )* od= pg_OrderedDecl -> ^( Prolog ^( DefaultNamespaceDecls ( $dnd)* ) ^( Setters ( $s)* ) ^( NamespaceDecls ( $nd)* ) ^( Imports ( $i)* ) ^( OrderedDecls ( $od)* ) ) )
            // XQueryParser.g:163:11: ( (dnd+= pm_DefaultNamespaceDecl | s+= p_Setter | nd+= pm_NamespaceDecl | i+= p_Import ) )* od= pg_OrderedDecl
            {
            // XQueryParser.g:163:11: ( (dnd+= pm_DefaultNamespaceDecl | s+= p_Setter | nd+= pm_NamespaceDecl | i+= p_Import ) )*
            loop6:
            do {
                int alt6=2;
                int LA6_0 = input.LA(1);

                if ( (LA6_0==DECLARE) ) {
                    int LA6_1 = input.LA(2);

                    if ( ((LA6_1>=BASE_URI && LA6_1<=BOUNDARY_SPACE)||LA6_1==CONSTRUCTION||LA6_1==DEFAULT||LA6_1==ORDERING) ) {
                        alt6=1;
                    }
                    else if ( (LA6_1==REVALIDATION) && ((lc(XQU)))) {
                        alt6=1;
                    }
                    else if ( (LA6_1==COPY_NAMESPACES||LA6_1==NAMESPACE) ) {
                        alt6=1;
                    }


                }
                else if ( (LA6_0==IMPORT) ) {
                    int LA6_3 = input.LA(2);

                    if ( (LA6_3==MODULE||LA6_3==SCHEMA) ) {
                        alt6=1;
                    }


                }


                switch (alt6) {
            	case 1 :
            	    // XQueryParser.g:163:12: (dnd+= pm_DefaultNamespaceDecl | s+= p_Setter | nd+= pm_NamespaceDecl | i+= p_Import )
            	    {
            	    // XQueryParser.g:163:12: (dnd+= pm_DefaultNamespaceDecl | s+= p_Setter | nd+= pm_NamespaceDecl | i+= p_Import )
            	    int alt5=4;
            	    int LA5_0 = input.LA(1);

            	    if ( (LA5_0==DECLARE) ) {
            	        int LA5_1 = input.LA(2);

            	        if ( (LA5_1==DEFAULT) ) {
            	            int LA5_3 = input.LA(3);

            	            if ( (LA5_3==COLLATION||LA5_3==ORDER) ) {
            	                alt5=2;
            	            }
            	            else if ( (LA5_3==ELEMENT||LA5_3==FUNCTION) ) {
            	                alt5=1;
            	            }
            	            else {
            	                if (state.backtracking>0) {state.failed=true; return retval;}
            	                NoViableAltException nvae =
            	                    new NoViableAltException("", 5, 3, input);

            	                throw nvae;
            	            }
            	        }
            	        else if ( ((LA5_1>=BASE_URI && LA5_1<=BOUNDARY_SPACE)||LA5_1==CONSTRUCTION||LA5_1==ORDERING) ) {
            	            alt5=2;
            	        }
            	        else if ( (LA5_1==REVALIDATION) && ((lc(XQU)))) {
            	            alt5=2;
            	        }
            	        else if ( (LA5_1==COPY_NAMESPACES) ) {
            	            alt5=2;
            	        }
            	        else if ( (LA5_1==NAMESPACE) ) {
            	            alt5=3;
            	        }
            	        else {
            	            if (state.backtracking>0) {state.failed=true; return retval;}
            	            NoViableAltException nvae =
            	                new NoViableAltException("", 5, 1, input);

            	            throw nvae;
            	        }
            	    }
            	    else if ( (LA5_0==IMPORT) ) {
            	        alt5=4;
            	    }
            	    else {
            	        if (state.backtracking>0) {state.failed=true; return retval;}
            	        NoViableAltException nvae =
            	            new NoViableAltException("", 5, 0, input);

            	        throw nvae;
            	    }
            	    switch (alt5) {
            	        case 1 :
            	            // XQueryParser.g:163:13: dnd+= pm_DefaultNamespaceDecl
            	            {
            	            pushFollow(FOLLOW_pm_DefaultNamespaceDecl_in_pm_Prolog1022);
            	            dnd=pm_DefaultNamespaceDecl();

            	            state._fsp--;
            	            if (state.failed) return retval;
            	            if ( state.backtracking==0 ) stream_pm_DefaultNamespaceDecl.add(dnd.getTree());
            	            if (list_dnd==null) list_dnd=new ArrayList();
            	            list_dnd.add(dnd.getTree());


            	            }
            	            break;
            	        case 2 :
            	            // XQueryParser.g:163:44: s+= p_Setter
            	            {
            	            pushFollow(FOLLOW_p_Setter_in_pm_Prolog1028);
            	            s=p_Setter();

            	            state._fsp--;
            	            if (state.failed) return retval;
            	            if ( state.backtracking==0 ) stream_p_Setter.add(s.getTree());
            	            if (list_s==null) list_s=new ArrayList();
            	            list_s.add(s.getTree());


            	            }
            	            break;
            	        case 3 :
            	            // XQueryParser.g:163:58: nd+= pm_NamespaceDecl
            	            {
            	            pushFollow(FOLLOW_pm_NamespaceDecl_in_pm_Prolog1034);
            	            nd=pm_NamespaceDecl();

            	            state._fsp--;
            	            if (state.failed) return retval;
            	            if ( state.backtracking==0 ) stream_pm_NamespaceDecl.add(nd.getTree());
            	            if (list_nd==null) list_nd=new ArrayList();
            	            list_nd.add(nd.getTree());


            	            }
            	            break;
            	        case 4 :
            	            // XQueryParser.g:163:81: i+= p_Import
            	            {
            	            pushFollow(FOLLOW_p_Import_in_pm_Prolog1040);
            	            i=p_Import();

            	            state._fsp--;
            	            if (state.failed) return retval;
            	            if ( state.backtracking==0 ) stream_p_Import.add(i.getTree());
            	            if (list_i==null) list_i=new ArrayList();
            	            list_i.add(i.getTree());


            	            }
            	            break;

            	    }


            	    }
            	    break;

            	default :
            	    break loop6;
                }
            } while (true);

            pushFollow(FOLLOW_pg_OrderedDecl_in_pm_Prolog1047);
            od=pg_OrderedDecl();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_pg_OrderedDecl.add(od.getTree());


            // AST REWRITE
            // elements: i, s, od, dnd, nd
            // token labels: 
            // rule labels: od, retval
            // token list labels: 
            // rule list labels: i, nd, dnd, s
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_od=new RewriteRuleSubtreeStream(adaptor,"rule od",od!=null?od.tree:null);
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
            RewriteRuleSubtreeStream stream_i=new RewriteRuleSubtreeStream(adaptor,"token i",list_i);
            RewriteRuleSubtreeStream stream_nd=new RewriteRuleSubtreeStream(adaptor,"token nd",list_nd);
            RewriteRuleSubtreeStream stream_dnd=new RewriteRuleSubtreeStream(adaptor,"token dnd",list_dnd);
            RewriteRuleSubtreeStream stream_s=new RewriteRuleSubtreeStream(adaptor,"token s",list_s);
            root_0 = (XQDTCommonTree)adaptor.nil();
            // 164:17: -> ^( Prolog ^( DefaultNamespaceDecls ( $dnd)* ) ^( Setters ( $s)* ) ^( NamespaceDecls ( $nd)* ) ^( Imports ( $i)* ) ^( OrderedDecls ( $od)* ) )
            {
                // XQueryParser.g:164:21: ^( Prolog ^( DefaultNamespaceDecls ( $dnd)* ) ^( Setters ( $s)* ) ^( NamespaceDecls ( $nd)* ) ^( Imports ( $i)* ) ^( OrderedDecls ( $od)* ) )
                {
                XQDTCommonTree root_1 = (XQDTCommonTree)adaptor.nil();
                root_1 = (XQDTCommonTree)adaptor.becomeRoot((XQDTCommonTree)adaptor.create(Prolog, "Prolog"), root_1);

                // XQueryParser.g:165:33: ^( DefaultNamespaceDecls ( $dnd)* )
                {
                XQDTCommonTree root_2 = (XQDTCommonTree)adaptor.nil();
                root_2 = (XQDTCommonTree)adaptor.becomeRoot((XQDTCommonTree)adaptor.create(DefaultNamespaceDecls, "DefaultNamespaceDecls"), root_2);

                // XQueryParser.g:165:57: ( $dnd)*
                while ( stream_dnd.hasNext() ) {
                    adaptor.addChild(root_2, stream_dnd.nextTree());

                }
                stream_dnd.reset();

                adaptor.addChild(root_1, root_2);
                }
                // XQueryParser.g:166:33: ^( Setters ( $s)* )
                {
                XQDTCommonTree root_2 = (XQDTCommonTree)adaptor.nil();
                root_2 = (XQDTCommonTree)adaptor.becomeRoot((XQDTCommonTree)adaptor.create(Setters, "Setters"), root_2);

                // XQueryParser.g:166:43: ( $s)*
                while ( stream_s.hasNext() ) {
                    adaptor.addChild(root_2, stream_s.nextTree());

                }
                stream_s.reset();

                adaptor.addChild(root_1, root_2);
                }
                // XQueryParser.g:167:33: ^( NamespaceDecls ( $nd)* )
                {
                XQDTCommonTree root_2 = (XQDTCommonTree)adaptor.nil();
                root_2 = (XQDTCommonTree)adaptor.becomeRoot((XQDTCommonTree)adaptor.create(NamespaceDecls, "NamespaceDecls"), root_2);

                // XQueryParser.g:167:50: ( $nd)*
                while ( stream_nd.hasNext() ) {
                    adaptor.addChild(root_2, stream_nd.nextTree());

                }
                stream_nd.reset();

                adaptor.addChild(root_1, root_2);
                }
                // XQueryParser.g:168:33: ^( Imports ( $i)* )
                {
                XQDTCommonTree root_2 = (XQDTCommonTree)adaptor.nil();
                root_2 = (XQDTCommonTree)adaptor.becomeRoot((XQDTCommonTree)adaptor.create(Imports, "Imports"), root_2);

                // XQueryParser.g:168:43: ( $i)*
                while ( stream_i.hasNext() ) {
                    adaptor.addChild(root_2, stream_i.nextTree());

                }
                stream_i.reset();

                adaptor.addChild(root_1, root_2);
                }
                // XQueryParser.g:169:33: ^( OrderedDecls ( $od)* )
                {
                XQDTCommonTree root_2 = (XQDTCommonTree)adaptor.nil();
                root_2 = (XQDTCommonTree)adaptor.becomeRoot((XQDTCommonTree)adaptor.create(OrderedDecls, "OrderedDecls"), root_2);

                // XQueryParser.g:169:48: ( $od)*
                while ( stream_od.hasNext() ) {
                    adaptor.addChild(root_2, stream_od.nextTree());

                }
                stream_od.reset();

                adaptor.addChild(root_1, root_2);
                }

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (XQDTCommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (XQDTCommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "pm_Prolog"

    public static class pg_OrderedDecl_return extends ParserRuleReturnScope {
        XQDTCommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "pg_OrderedDecl"
    // XQueryParser.g:177:1: pg_OrderedDecl : ( pm_VarDecl | pm_ContextItemDecl | pm_FunctionDecl | pm_OptionDecl )* ;
    public final XQueryParser.pg_OrderedDecl_return pg_OrderedDecl() throws RecognitionException {
        XQueryParser.pg_OrderedDecl_return retval = new XQueryParser.pg_OrderedDecl_return();
        retval.start = input.LT(1);

        XQDTCommonTree root_0 = null;

        XQueryParser.pm_VarDecl_return pm_VarDecl11 = null;

        XQueryParser.pm_ContextItemDecl_return pm_ContextItemDecl12 = null;

        XQueryParser.pm_FunctionDecl_return pm_FunctionDecl13 = null;

        XQueryParser.pm_OptionDecl_return pm_OptionDecl14 = null;



        try {
            // XQueryParser.g:178:9: ( ( pm_VarDecl | pm_ContextItemDecl | pm_FunctionDecl | pm_OptionDecl )* )
            // XQueryParser.g:178:11: ( pm_VarDecl | pm_ContextItemDecl | pm_FunctionDecl | pm_OptionDecl )*
            {
            root_0 = (XQDTCommonTree)adaptor.nil();

            // XQueryParser.g:178:11: ( pm_VarDecl | pm_ContextItemDecl | pm_FunctionDecl | pm_OptionDecl )*
            loop7:
            do {
                int alt7=5;
                int LA7_0 = input.LA(1);

                if ( (LA7_0==DECLARE) ) {
                    int LA7_2 = input.LA(2);

                    if ( (LA7_2==CONTEXT) ) {
                        alt7=2;
                    }
                    else if ( (LA7_2==SEQUENTIAL) && ((lc(XQS)))) {
                        alt7=3;
                    }
                    else if ( (LA7_2==OPTION) ) {
                        alt7=4;
                    }
                    else if ( (LA7_2==VARIABLE||LA7_2==CONSTANT) ) {
                        alt7=1;
                    }
                    else if ( (LA7_2==FUNCTION||LA7_2==UPDATING||LA7_2==SIMPLE) ) {
                        alt7=3;
                    }


                }


                switch (alt7) {
            	case 1 :
            	    // XQueryParser.g:178:12: pm_VarDecl
            	    {
            	    pushFollow(FOLLOW_pm_VarDecl_in_pg_OrderedDecl1325);
            	    pm_VarDecl11=pm_VarDecl();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, pm_VarDecl11.getTree());

            	    }
            	    break;
            	case 2 :
            	    // XQueryParser.g:178:25: pm_ContextItemDecl
            	    {
            	    pushFollow(FOLLOW_pm_ContextItemDecl_in_pg_OrderedDecl1329);
            	    pm_ContextItemDecl12=pm_ContextItemDecl();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, pm_ContextItemDecl12.getTree());

            	    }
            	    break;
            	case 3 :
            	    // XQueryParser.g:178:46: pm_FunctionDecl
            	    {
            	    pushFollow(FOLLOW_pm_FunctionDecl_in_pg_OrderedDecl1333);
            	    pm_FunctionDecl13=pm_FunctionDecl();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, pm_FunctionDecl13.getTree());

            	    }
            	    break;
            	case 4 :
            	    // XQueryParser.g:178:64: pm_OptionDecl
            	    {
            	    pushFollow(FOLLOW_pm_OptionDecl_in_pg_OrderedDecl1337);
            	    pm_OptionDecl14=pm_OptionDecl();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, pm_OptionDecl14.getTree());

            	    }
            	    break;

            	default :
            	    break loop7;
                }
            } while (true);


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (XQDTCommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (XQDTCommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "pg_OrderedDecl"

    public static class p_Setter_return extends ParserRuleReturnScope {
        XQDTCommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "p_Setter"
    // XQueryParser.g:183:1: p_Setter : ( pm_BoundarySpaceDecl | pm_DefaultCollationDecl | pm_BaseURIDecl | pm_ConstructionDecl | pm_OrderingModeDecl | pm_EmptyOrderDecl | {...}? => pm_RevalidationDecl | pm_CopyNamespacesDecl );
    public final XQueryParser.p_Setter_return p_Setter() throws RecognitionException {
        XQueryParser.p_Setter_return retval = new XQueryParser.p_Setter_return();
        retval.start = input.LT(1);

        XQDTCommonTree root_0 = null;

        XQueryParser.pm_BoundarySpaceDecl_return pm_BoundarySpaceDecl15 = null;

        XQueryParser.pm_DefaultCollationDecl_return pm_DefaultCollationDecl16 = null;

        XQueryParser.pm_BaseURIDecl_return pm_BaseURIDecl17 = null;

        XQueryParser.pm_ConstructionDecl_return pm_ConstructionDecl18 = null;

        XQueryParser.pm_OrderingModeDecl_return pm_OrderingModeDecl19 = null;

        XQueryParser.pm_EmptyOrderDecl_return pm_EmptyOrderDecl20 = null;

        XQueryParser.pm_RevalidationDecl_return pm_RevalidationDecl21 = null;

        XQueryParser.pm_CopyNamespacesDecl_return pm_CopyNamespacesDecl22 = null;



        try {
            // XQueryParser.g:184:9: ( pm_BoundarySpaceDecl | pm_DefaultCollationDecl | pm_BaseURIDecl | pm_ConstructionDecl | pm_OrderingModeDecl | pm_EmptyOrderDecl | {...}? => pm_RevalidationDecl | pm_CopyNamespacesDecl )
            int alt8=8;
            alt8 = dfa8.predict(input);
            switch (alt8) {
                case 1 :
                    // XQueryParser.g:184:13: pm_BoundarySpaceDecl
                    {
                    root_0 = (XQDTCommonTree)adaptor.nil();

                    pushFollow(FOLLOW_pm_BoundarySpaceDecl_in_p_Setter1368);
                    pm_BoundarySpaceDecl15=pm_BoundarySpaceDecl();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, pm_BoundarySpaceDecl15.getTree());

                    }
                    break;
                case 2 :
                    // XQueryParser.g:185:11: pm_DefaultCollationDecl
                    {
                    root_0 = (XQDTCommonTree)adaptor.nil();

                    pushFollow(FOLLOW_pm_DefaultCollationDecl_in_p_Setter1380);
                    pm_DefaultCollationDecl16=pm_DefaultCollationDecl();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, pm_DefaultCollationDecl16.getTree());

                    }
                    break;
                case 3 :
                    // XQueryParser.g:186:11: pm_BaseURIDecl
                    {
                    root_0 = (XQDTCommonTree)adaptor.nil();

                    pushFollow(FOLLOW_pm_BaseURIDecl_in_p_Setter1392);
                    pm_BaseURIDecl17=pm_BaseURIDecl();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, pm_BaseURIDecl17.getTree());

                    }
                    break;
                case 4 :
                    // XQueryParser.g:187:11: pm_ConstructionDecl
                    {
                    root_0 = (XQDTCommonTree)adaptor.nil();

                    pushFollow(FOLLOW_pm_ConstructionDecl_in_p_Setter1404);
                    pm_ConstructionDecl18=pm_ConstructionDecl();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, pm_ConstructionDecl18.getTree());

                    }
                    break;
                case 5 :
                    // XQueryParser.g:188:11: pm_OrderingModeDecl
                    {
                    root_0 = (XQDTCommonTree)adaptor.nil();

                    pushFollow(FOLLOW_pm_OrderingModeDecl_in_p_Setter1416);
                    pm_OrderingModeDecl19=pm_OrderingModeDecl();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, pm_OrderingModeDecl19.getTree());

                    }
                    break;
                case 6 :
                    // XQueryParser.g:189:11: pm_EmptyOrderDecl
                    {
                    root_0 = (XQDTCommonTree)adaptor.nil();

                    pushFollow(FOLLOW_pm_EmptyOrderDecl_in_p_Setter1428);
                    pm_EmptyOrderDecl20=pm_EmptyOrderDecl();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, pm_EmptyOrderDecl20.getTree());

                    }
                    break;
                case 7 :
                    // XQueryParser.g:190:11: {...}? => pm_RevalidationDecl
                    {
                    root_0 = (XQDTCommonTree)adaptor.nil();

                    if ( !((lc(XQU))) ) {
                        if (state.backtracking>0) {state.failed=true; return retval;}
                        throw new FailedPredicateException(input, "p_Setter", "lc(XQU)");
                    }
                    pushFollow(FOLLOW_pm_RevalidationDecl_in_p_Setter1443);
                    pm_RevalidationDecl21=pm_RevalidationDecl();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, pm_RevalidationDecl21.getTree());

                    }
                    break;
                case 8 :
                    // XQueryParser.g:191:11: pm_CopyNamespacesDecl
                    {
                    root_0 = (XQDTCommonTree)adaptor.nil();

                    pushFollow(FOLLOW_pm_CopyNamespacesDecl_in_p_Setter1455);
                    pm_CopyNamespacesDecl22=pm_CopyNamespacesDecl();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, pm_CopyNamespacesDecl22.getTree());

                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (XQDTCommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (XQDTCommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "p_Setter"

    public static class p_Import_return extends ParserRuleReturnScope {
        XQDTCommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "p_Import"
    // XQueryParser.g:195:1: p_Import : ( pm_SchemaImport | pm_ModuleImport );
    public final XQueryParser.p_Import_return p_Import() throws RecognitionException {
        XQueryParser.p_Import_return retval = new XQueryParser.p_Import_return();
        retval.start = input.LT(1);

        XQDTCommonTree root_0 = null;

        XQueryParser.pm_SchemaImport_return pm_SchemaImport23 = null;

        XQueryParser.pm_ModuleImport_return pm_ModuleImport24 = null;



        try {
            // XQueryParser.g:196:9: ( pm_SchemaImport | pm_ModuleImport )
            int alt9=2;
            int LA9_0 = input.LA(1);

            if ( (LA9_0==IMPORT) ) {
                int LA9_1 = input.LA(2);

                if ( (LA9_1==SCHEMA) ) {
                    alt9=1;
                }
                else if ( (LA9_1==MODULE) ) {
                    alt9=2;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 9, 1, input);

                    throw nvae;
                }
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 9, 0, input);

                throw nvae;
            }
            switch (alt9) {
                case 1 :
                    // XQueryParser.g:196:11: pm_SchemaImport
                    {
                    root_0 = (XQDTCommonTree)adaptor.nil();

                    pushFollow(FOLLOW_pm_SchemaImport_in_p_Import1481);
                    pm_SchemaImport23=pm_SchemaImport();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, pm_SchemaImport23.getTree());

                    }
                    break;
                case 2 :
                    // XQueryParser.g:196:29: pm_ModuleImport
                    {
                    root_0 = (XQDTCommonTree)adaptor.nil();

                    pushFollow(FOLLOW_pm_ModuleImport_in_p_Import1485);
                    pm_ModuleImport24=pm_ModuleImport();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, pm_ModuleImport24.getTree());

                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (XQDTCommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (XQDTCommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "p_Import"

    public static class pm_NamespaceDecl_return extends ParserRuleReturnScope {
        XQDTCommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "pm_NamespaceDecl"
    // XQueryParser.g:203:1: pm_NamespaceDecl : k+= DECLARE k+= NAMESPACE nn= p_NCName EQUAL us= p_StringLiteral SEMICOLON -> ^( NamespaceDecl $nn $us) ;
    public final XQueryParser.pm_NamespaceDecl_return pm_NamespaceDecl() throws RecognitionException {
        XQueryParser.pm_NamespaceDecl_return retval = new XQueryParser.pm_NamespaceDecl_return();
        retval.start = input.LT(1);

        XQDTCommonTree root_0 = null;

        CommonToken EQUAL25=null;
        CommonToken SEMICOLON26=null;
        CommonToken k=null;
        List list_k=null;
        XQueryParser.p_NCName_return nn = null;

        XQueryParser.p_StringLiteral_return us = null;


        XQDTCommonTree EQUAL25_tree=null;
        XQDTCommonTree SEMICOLON26_tree=null;
        XQDTCommonTree k_tree=null;
        RewriteRuleTokenStream stream_NAMESPACE=new RewriteRuleTokenStream(adaptor,"token NAMESPACE");
        RewriteRuleTokenStream stream_EQUAL=new RewriteRuleTokenStream(adaptor,"token EQUAL");
        RewriteRuleTokenStream stream_SEMICOLON=new RewriteRuleTokenStream(adaptor,"token SEMICOLON");
        RewriteRuleTokenStream stream_DECLARE=new RewriteRuleTokenStream(adaptor,"token DECLARE");
        RewriteRuleSubtreeStream stream_p_NCName=new RewriteRuleSubtreeStream(adaptor,"rule p_NCName");
        RewriteRuleSubtreeStream stream_p_StringLiteral=new RewriteRuleSubtreeStream(adaptor,"rule p_StringLiteral");
        try {
            // XQueryParser.g:204:9: (k+= DECLARE k+= NAMESPACE nn= p_NCName EQUAL us= p_StringLiteral SEMICOLON -> ^( NamespaceDecl $nn $us) )
            // XQueryParser.g:204:11: k+= DECLARE k+= NAMESPACE nn= p_NCName EQUAL us= p_StringLiteral SEMICOLON
            {
            k=(CommonToken)match(input,DECLARE,FOLLOW_DECLARE_in_pm_NamespaceDecl1516); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_DECLARE.add(k);

            if (list_k==null) list_k=new ArrayList();
            list_k.add(k);

            k=(CommonToken)match(input,NAMESPACE,FOLLOW_NAMESPACE_in_pm_NamespaceDecl1520); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_NAMESPACE.add(k);

            if (list_k==null) list_k=new ArrayList();
            list_k.add(k);

            pushFollow(FOLLOW_p_NCName_in_pm_NamespaceDecl1524);
            nn=p_NCName();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_p_NCName.add(nn.getTree());
            EQUAL25=(CommonToken)match(input,EQUAL,FOLLOW_EQUAL_in_pm_NamespaceDecl1526); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_EQUAL.add(EQUAL25);

            pushFollow(FOLLOW_p_StringLiteral_in_pm_NamespaceDecl1530);
            us=p_StringLiteral();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_p_StringLiteral.add(us.getTree());
            SEMICOLON26=(CommonToken)match(input,SEMICOLON,FOLLOW_SEMICOLON_in_pm_NamespaceDecl1532); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_SEMICOLON.add(SEMICOLON26);

            if ( state.backtracking==0 ) {
              ak(list_k);
            }


            // AST REWRITE
            // elements: nn, us
            // token labels: 
            // rule labels: us, nn, retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_us=new RewriteRuleSubtreeStream(adaptor,"rule us",us!=null?us.tree:null);
            RewriteRuleSubtreeStream stream_nn=new RewriteRuleSubtreeStream(adaptor,"rule nn",nn!=null?nn.tree:null);
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (XQDTCommonTree)adaptor.nil();
            // 205:17: -> ^( NamespaceDecl $nn $us)
            {
                // XQueryParser.g:205:20: ^( NamespaceDecl $nn $us)
                {
                XQDTCommonTree root_1 = (XQDTCommonTree)adaptor.nil();
                root_1 = (XQDTCommonTree)adaptor.becomeRoot((XQDTCommonTree)adaptor.create(NamespaceDecl, "NamespaceDecl"), root_1);

                adaptor.addChild(root_1, stream_nn.nextTree());
                adaptor.addChild(root_1, stream_us.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (XQDTCommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (XQDTCommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "pm_NamespaceDecl"

    public static class pm_BoundarySpaceDecl_return extends ParserRuleReturnScope {
        XQDTCommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "pm_BoundarySpaceDecl"
    // XQueryParser.g:209:1: pm_BoundarySpaceDecl : k+= DECLARE k+= BOUNDARY_SPACE (k+= PRESERVE | k+= STRIP ) SEMICOLON ;
    public final XQueryParser.pm_BoundarySpaceDecl_return pm_BoundarySpaceDecl() throws RecognitionException {
        XQueryParser.pm_BoundarySpaceDecl_return retval = new XQueryParser.pm_BoundarySpaceDecl_return();
        retval.start = input.LT(1);

        XQDTCommonTree root_0 = null;

        CommonToken SEMICOLON27=null;
        CommonToken k=null;
        List list_k=null;

        XQDTCommonTree SEMICOLON27_tree=null;
        XQDTCommonTree k_tree=null;

        try {
            // XQueryParser.g:210:9: (k+= DECLARE k+= BOUNDARY_SPACE (k+= PRESERVE | k+= STRIP ) SEMICOLON )
            // XQueryParser.g:210:13: k+= DECLARE k+= BOUNDARY_SPACE (k+= PRESERVE | k+= STRIP ) SEMICOLON
            {
            root_0 = (XQDTCommonTree)adaptor.nil();

            k=(CommonToken)match(input,DECLARE,FOLLOW_DECLARE_in_pm_BoundarySpaceDecl1597); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            k_tree = (XQDTCommonTree)adaptor.create(k);
            adaptor.addChild(root_0, k_tree);
            }
            if (list_k==null) list_k=new ArrayList();
            list_k.add(k);

            k=(CommonToken)match(input,BOUNDARY_SPACE,FOLLOW_BOUNDARY_SPACE_in_pm_BoundarySpaceDecl1601); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            k_tree = (XQDTCommonTree)adaptor.create(k);
            adaptor.addChild(root_0, k_tree);
            }
            if (list_k==null) list_k=new ArrayList();
            list_k.add(k);

            // XQueryParser.g:210:42: (k+= PRESERVE | k+= STRIP )
            int alt10=2;
            int LA10_0 = input.LA(1);

            if ( (LA10_0==PRESERVE) ) {
                alt10=1;
            }
            else if ( (LA10_0==STRIP) ) {
                alt10=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 10, 0, input);

                throw nvae;
            }
            switch (alt10) {
                case 1 :
                    // XQueryParser.g:210:43: k+= PRESERVE
                    {
                    k=(CommonToken)match(input,PRESERVE,FOLLOW_PRESERVE_in_pm_BoundarySpaceDecl1606); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    k_tree = (XQDTCommonTree)adaptor.create(k);
                    adaptor.addChild(root_0, k_tree);
                    }
                    if (list_k==null) list_k=new ArrayList();
                    list_k.add(k);


                    }
                    break;
                case 2 :
                    // XQueryParser.g:210:57: k+= STRIP
                    {
                    k=(CommonToken)match(input,STRIP,FOLLOW_STRIP_in_pm_BoundarySpaceDecl1612); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    k_tree = (XQDTCommonTree)adaptor.create(k);
                    adaptor.addChild(root_0, k_tree);
                    }
                    if (list_k==null) list_k=new ArrayList();
                    list_k.add(k);


                    }
                    break;

            }

            SEMICOLON27=(CommonToken)match(input,SEMICOLON,FOLLOW_SEMICOLON_in_pm_BoundarySpaceDecl1615); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            SEMICOLON27_tree = (XQDTCommonTree)adaptor.create(SEMICOLON27);
            adaptor.addChild(root_0, SEMICOLON27_tree);
            }
            if ( state.backtracking==0 ) {
              ak(list_k);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (XQDTCommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (XQDTCommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "pm_BoundarySpaceDecl"

    public static class pm_DefaultNamespaceDecl_return extends ParserRuleReturnScope {
        XQDTCommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "pm_DefaultNamespaceDecl"
    // XQueryParser.g:214:1: pm_DefaultNamespaceDecl : k+= DECLARE k+= DEFAULT (k+= ELEMENT | k+= FUNCTION ) k+= NAMESPACE p_StringLiteral SEMICOLON ;
    public final XQueryParser.pm_DefaultNamespaceDecl_return pm_DefaultNamespaceDecl() throws RecognitionException {
        XQueryParser.pm_DefaultNamespaceDecl_return retval = new XQueryParser.pm_DefaultNamespaceDecl_return();
        retval.start = input.LT(1);

        XQDTCommonTree root_0 = null;

        CommonToken SEMICOLON29=null;
        CommonToken k=null;
        List list_k=null;
        XQueryParser.p_StringLiteral_return p_StringLiteral28 = null;


        XQDTCommonTree SEMICOLON29_tree=null;
        XQDTCommonTree k_tree=null;

        try {
            // XQueryParser.g:215:9: (k+= DECLARE k+= DEFAULT (k+= ELEMENT | k+= FUNCTION ) k+= NAMESPACE p_StringLiteral SEMICOLON )
            // XQueryParser.g:215:11: k+= DECLARE k+= DEFAULT (k+= ELEMENT | k+= FUNCTION ) k+= NAMESPACE p_StringLiteral SEMICOLON
            {
            root_0 = (XQDTCommonTree)adaptor.nil();

            k=(CommonToken)match(input,DECLARE,FOLLOW_DECLARE_in_pm_DefaultNamespaceDecl1645); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            k_tree = (XQDTCommonTree)adaptor.create(k);
            adaptor.addChild(root_0, k_tree);
            }
            if (list_k==null) list_k=new ArrayList();
            list_k.add(k);

            k=(CommonToken)match(input,DEFAULT,FOLLOW_DEFAULT_in_pm_DefaultNamespaceDecl1649); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            k_tree = (XQDTCommonTree)adaptor.create(k);
            adaptor.addChild(root_0, k_tree);
            }
            if (list_k==null) list_k=new ArrayList();
            list_k.add(k);

            // XQueryParser.g:215:33: (k+= ELEMENT | k+= FUNCTION )
            int alt11=2;
            int LA11_0 = input.LA(1);

            if ( (LA11_0==ELEMENT) ) {
                alt11=1;
            }
            else if ( (LA11_0==FUNCTION) ) {
                alt11=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 11, 0, input);

                throw nvae;
            }
            switch (alt11) {
                case 1 :
                    // XQueryParser.g:215:34: k+= ELEMENT
                    {
                    k=(CommonToken)match(input,ELEMENT,FOLLOW_ELEMENT_in_pm_DefaultNamespaceDecl1654); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    k_tree = (XQDTCommonTree)adaptor.create(k);
                    adaptor.addChild(root_0, k_tree);
                    }
                    if (list_k==null) list_k=new ArrayList();
                    list_k.add(k);


                    }
                    break;
                case 2 :
                    // XQueryParser.g:215:47: k+= FUNCTION
                    {
                    k=(CommonToken)match(input,FUNCTION,FOLLOW_FUNCTION_in_pm_DefaultNamespaceDecl1660); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    k_tree = (XQDTCommonTree)adaptor.create(k);
                    adaptor.addChild(root_0, k_tree);
                    }
                    if (list_k==null) list_k=new ArrayList();
                    list_k.add(k);


                    }
                    break;

            }

            k=(CommonToken)match(input,NAMESPACE,FOLLOW_NAMESPACE_in_pm_DefaultNamespaceDecl1665); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            k_tree = (XQDTCommonTree)adaptor.create(k);
            adaptor.addChild(root_0, k_tree);
            }
            if (list_k==null) list_k=new ArrayList();
            list_k.add(k);

            pushFollow(FOLLOW_p_StringLiteral_in_pm_DefaultNamespaceDecl1667);
            p_StringLiteral28=p_StringLiteral();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, p_StringLiteral28.getTree());
            SEMICOLON29=(CommonToken)match(input,SEMICOLON,FOLLOW_SEMICOLON_in_pm_DefaultNamespaceDecl1669); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            SEMICOLON29_tree = (XQDTCommonTree)adaptor.create(SEMICOLON29);
            adaptor.addChild(root_0, SEMICOLON29_tree);
            }
            if ( state.backtracking==0 ) {
              ak(list_k);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (XQDTCommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (XQDTCommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "pm_DefaultNamespaceDecl"

    public static class pm_OptionDecl_return extends ParserRuleReturnScope {
        XQDTCommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "pm_OptionDecl"
    // XQueryParser.g:219:1: pm_OptionDecl : k+= DECLARE k+= OPTION p_QName p_StringLiteral SEMICOLON ;
    public final XQueryParser.pm_OptionDecl_return pm_OptionDecl() throws RecognitionException {
        XQueryParser.pm_OptionDecl_return retval = new XQueryParser.pm_OptionDecl_return();
        retval.start = input.LT(1);

        XQDTCommonTree root_0 = null;

        CommonToken SEMICOLON32=null;
        CommonToken k=null;
        List list_k=null;
        XQueryParser.p_QName_return p_QName30 = null;

        XQueryParser.p_StringLiteral_return p_StringLiteral31 = null;


        XQDTCommonTree SEMICOLON32_tree=null;
        XQDTCommonTree k_tree=null;

        try {
            // XQueryParser.g:220:9: (k+= DECLARE k+= OPTION p_QName p_StringLiteral SEMICOLON )
            // XQueryParser.g:220:13: k+= DECLARE k+= OPTION p_QName p_StringLiteral SEMICOLON
            {
            root_0 = (XQDTCommonTree)adaptor.nil();

            k=(CommonToken)match(input,DECLARE,FOLLOW_DECLARE_in_pm_OptionDecl1701); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            k_tree = (XQDTCommonTree)adaptor.create(k);
            adaptor.addChild(root_0, k_tree);
            }
            if (list_k==null) list_k=new ArrayList();
            list_k.add(k);

            k=(CommonToken)match(input,OPTION,FOLLOW_OPTION_in_pm_OptionDecl1705); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            k_tree = (XQDTCommonTree)adaptor.create(k);
            adaptor.addChild(root_0, k_tree);
            }
            if (list_k==null) list_k=new ArrayList();
            list_k.add(k);

            pushFollow(FOLLOW_p_QName_in_pm_OptionDecl1707);
            p_QName30=p_QName();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, p_QName30.getTree());
            pushFollow(FOLLOW_p_StringLiteral_in_pm_OptionDecl1709);
            p_StringLiteral31=p_StringLiteral();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, p_StringLiteral31.getTree());
            SEMICOLON32=(CommonToken)match(input,SEMICOLON,FOLLOW_SEMICOLON_in_pm_OptionDecl1711); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            SEMICOLON32_tree = (XQDTCommonTree)adaptor.create(SEMICOLON32);
            adaptor.addChild(root_0, SEMICOLON32_tree);
            }
            if ( state.backtracking==0 ) {
              ak(list_k);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (XQDTCommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (XQDTCommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "pm_OptionDecl"

    public static class pm_OrderingModeDecl_return extends ParserRuleReturnScope {
        XQDTCommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "pm_OrderingModeDecl"
    // XQueryParser.g:224:1: pm_OrderingModeDecl : k+= DECLARE k+= ORDERING (k+= ORDERED | k+= UNORDERED ) SEMICOLON ;
    public final XQueryParser.pm_OrderingModeDecl_return pm_OrderingModeDecl() throws RecognitionException {
        XQueryParser.pm_OrderingModeDecl_return retval = new XQueryParser.pm_OrderingModeDecl_return();
        retval.start = input.LT(1);

        XQDTCommonTree root_0 = null;

        CommonToken SEMICOLON33=null;
        CommonToken k=null;
        List list_k=null;

        XQDTCommonTree SEMICOLON33_tree=null;
        XQDTCommonTree k_tree=null;

        try {
            // XQueryParser.g:225:9: (k+= DECLARE k+= ORDERING (k+= ORDERED | k+= UNORDERED ) SEMICOLON )
            // XQueryParser.g:225:13: k+= DECLARE k+= ORDERING (k+= ORDERED | k+= UNORDERED ) SEMICOLON
            {
            root_0 = (XQDTCommonTree)adaptor.nil();

            k=(CommonToken)match(input,DECLARE,FOLLOW_DECLARE_in_pm_OrderingModeDecl1743); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            k_tree = (XQDTCommonTree)adaptor.create(k);
            adaptor.addChild(root_0, k_tree);
            }
            if (list_k==null) list_k=new ArrayList();
            list_k.add(k);

            k=(CommonToken)match(input,ORDERING,FOLLOW_ORDERING_in_pm_OrderingModeDecl1747); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            k_tree = (XQDTCommonTree)adaptor.create(k);
            adaptor.addChild(root_0, k_tree);
            }
            if (list_k==null) list_k=new ArrayList();
            list_k.add(k);

            // XQueryParser.g:225:36: (k+= ORDERED | k+= UNORDERED )
            int alt12=2;
            int LA12_0 = input.LA(1);

            if ( (LA12_0==ORDERED) ) {
                alt12=1;
            }
            else if ( (LA12_0==UNORDERED) ) {
                alt12=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 12, 0, input);

                throw nvae;
            }
            switch (alt12) {
                case 1 :
                    // XQueryParser.g:225:37: k+= ORDERED
                    {
                    k=(CommonToken)match(input,ORDERED,FOLLOW_ORDERED_in_pm_OrderingModeDecl1752); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    k_tree = (XQDTCommonTree)adaptor.create(k);
                    adaptor.addChild(root_0, k_tree);
                    }
                    if (list_k==null) list_k=new ArrayList();
                    list_k.add(k);


                    }
                    break;
                case 2 :
                    // XQueryParser.g:225:50: k+= UNORDERED
                    {
                    k=(CommonToken)match(input,UNORDERED,FOLLOW_UNORDERED_in_pm_OrderingModeDecl1758); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    k_tree = (XQDTCommonTree)adaptor.create(k);
                    adaptor.addChild(root_0, k_tree);
                    }
                    if (list_k==null) list_k=new ArrayList();
                    list_k.add(k);


                    }
                    break;

            }

            SEMICOLON33=(CommonToken)match(input,SEMICOLON,FOLLOW_SEMICOLON_in_pm_OrderingModeDecl1761); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            SEMICOLON33_tree = (XQDTCommonTree)adaptor.create(SEMICOLON33);
            adaptor.addChild(root_0, SEMICOLON33_tree);
            }
            if ( state.backtracking==0 ) {
              ak(list_k);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (XQDTCommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (XQDTCommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "pm_OrderingModeDecl"

    public static class pm_EmptyOrderDecl_return extends ParserRuleReturnScope {
        XQDTCommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "pm_EmptyOrderDecl"
    // XQueryParser.g:229:1: pm_EmptyOrderDecl : k+= DECLARE k+= DEFAULT k+= ORDER k+= EMPTY (k+= GREATEST | k+= LEAST ) SEMICOLON ;
    public final XQueryParser.pm_EmptyOrderDecl_return pm_EmptyOrderDecl() throws RecognitionException {
        XQueryParser.pm_EmptyOrderDecl_return retval = new XQueryParser.pm_EmptyOrderDecl_return();
        retval.start = input.LT(1);

        XQDTCommonTree root_0 = null;

        CommonToken SEMICOLON34=null;
        CommonToken k=null;
        List list_k=null;

        XQDTCommonTree SEMICOLON34_tree=null;
        XQDTCommonTree k_tree=null;

        try {
            // XQueryParser.g:230:9: (k+= DECLARE k+= DEFAULT k+= ORDER k+= EMPTY (k+= GREATEST | k+= LEAST ) SEMICOLON )
            // XQueryParser.g:230:13: k+= DECLARE k+= DEFAULT k+= ORDER k+= EMPTY (k+= GREATEST | k+= LEAST ) SEMICOLON
            {
            root_0 = (XQDTCommonTree)adaptor.nil();

            k=(CommonToken)match(input,DECLARE,FOLLOW_DECLARE_in_pm_EmptyOrderDecl1793); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            k_tree = (XQDTCommonTree)adaptor.create(k);
            adaptor.addChild(root_0, k_tree);
            }
            if (list_k==null) list_k=new ArrayList();
            list_k.add(k);

            k=(CommonToken)match(input,DEFAULT,FOLLOW_DEFAULT_in_pm_EmptyOrderDecl1797); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            k_tree = (XQDTCommonTree)adaptor.create(k);
            adaptor.addChild(root_0, k_tree);
            }
            if (list_k==null) list_k=new ArrayList();
            list_k.add(k);

            k=(CommonToken)match(input,ORDER,FOLLOW_ORDER_in_pm_EmptyOrderDecl1801); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            k_tree = (XQDTCommonTree)adaptor.create(k);
            adaptor.addChild(root_0, k_tree);
            }
            if (list_k==null) list_k=new ArrayList();
            list_k.add(k);

            k=(CommonToken)match(input,EMPTY,FOLLOW_EMPTY_in_pm_EmptyOrderDecl1805); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            k_tree = (XQDTCommonTree)adaptor.create(k);
            adaptor.addChild(root_0, k_tree);
            }
            if (list_k==null) list_k=new ArrayList();
            list_k.add(k);

            // XQueryParser.g:230:53: (k+= GREATEST | k+= LEAST )
            int alt13=2;
            int LA13_0 = input.LA(1);

            if ( (LA13_0==GREATEST) ) {
                alt13=1;
            }
            else if ( (LA13_0==LEAST) ) {
                alt13=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 13, 0, input);

                throw nvae;
            }
            switch (alt13) {
                case 1 :
                    // XQueryParser.g:230:54: k+= GREATEST
                    {
                    k=(CommonToken)match(input,GREATEST,FOLLOW_GREATEST_in_pm_EmptyOrderDecl1810); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    k_tree = (XQDTCommonTree)adaptor.create(k);
                    adaptor.addChild(root_0, k_tree);
                    }
                    if (list_k==null) list_k=new ArrayList();
                    list_k.add(k);


                    }
                    break;
                case 2 :
                    // XQueryParser.g:230:68: k+= LEAST
                    {
                    k=(CommonToken)match(input,LEAST,FOLLOW_LEAST_in_pm_EmptyOrderDecl1816); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    k_tree = (XQDTCommonTree)adaptor.create(k);
                    adaptor.addChild(root_0, k_tree);
                    }
                    if (list_k==null) list_k=new ArrayList();
                    list_k.add(k);


                    }
                    break;

            }

            SEMICOLON34=(CommonToken)match(input,SEMICOLON,FOLLOW_SEMICOLON_in_pm_EmptyOrderDecl1819); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            SEMICOLON34_tree = (XQDTCommonTree)adaptor.create(SEMICOLON34);
            adaptor.addChild(root_0, SEMICOLON34_tree);
            }
            if ( state.backtracking==0 ) {
              ak(list_k);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (XQDTCommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (XQDTCommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "pm_EmptyOrderDecl"

    public static class pm_CopyNamespacesDecl_return extends ParserRuleReturnScope {
        XQDTCommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "pm_CopyNamespacesDecl"
    // XQueryParser.g:234:1: pm_CopyNamespacesDecl : k+= DECLARE k+= COPY_NAMESPACES p_PreserveMode COMMA p_InheritMode SEMICOLON ;
    public final XQueryParser.pm_CopyNamespacesDecl_return pm_CopyNamespacesDecl() throws RecognitionException {
        XQueryParser.pm_CopyNamespacesDecl_return retval = new XQueryParser.pm_CopyNamespacesDecl_return();
        retval.start = input.LT(1);

        XQDTCommonTree root_0 = null;

        CommonToken COMMA36=null;
        CommonToken SEMICOLON38=null;
        CommonToken k=null;
        List list_k=null;
        XQueryParser.p_PreserveMode_return p_PreserveMode35 = null;

        XQueryParser.p_InheritMode_return p_InheritMode37 = null;


        XQDTCommonTree COMMA36_tree=null;
        XQDTCommonTree SEMICOLON38_tree=null;
        XQDTCommonTree k_tree=null;

        try {
            // XQueryParser.g:235:9: (k+= DECLARE k+= COPY_NAMESPACES p_PreserveMode COMMA p_InheritMode SEMICOLON )
            // XQueryParser.g:235:13: k+= DECLARE k+= COPY_NAMESPACES p_PreserveMode COMMA p_InheritMode SEMICOLON
            {
            root_0 = (XQDTCommonTree)adaptor.nil();

            k=(CommonToken)match(input,DECLARE,FOLLOW_DECLARE_in_pm_CopyNamespacesDecl1851); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            k_tree = (XQDTCommonTree)adaptor.create(k);
            adaptor.addChild(root_0, k_tree);
            }
            if (list_k==null) list_k=new ArrayList();
            list_k.add(k);

            k=(CommonToken)match(input,COPY_NAMESPACES,FOLLOW_COPY_NAMESPACES_in_pm_CopyNamespacesDecl1855); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            k_tree = (XQDTCommonTree)adaptor.create(k);
            adaptor.addChild(root_0, k_tree);
            }
            if (list_k==null) list_k=new ArrayList();
            list_k.add(k);

            pushFollow(FOLLOW_p_PreserveMode_in_pm_CopyNamespacesDecl1857);
            p_PreserveMode35=p_PreserveMode();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, p_PreserveMode35.getTree());
            COMMA36=(CommonToken)match(input,COMMA,FOLLOW_COMMA_in_pm_CopyNamespacesDecl1859); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            COMMA36_tree = (XQDTCommonTree)adaptor.create(COMMA36);
            adaptor.addChild(root_0, COMMA36_tree);
            }
            pushFollow(FOLLOW_p_InheritMode_in_pm_CopyNamespacesDecl1861);
            p_InheritMode37=p_InheritMode();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, p_InheritMode37.getTree());
            SEMICOLON38=(CommonToken)match(input,SEMICOLON,FOLLOW_SEMICOLON_in_pm_CopyNamespacesDecl1863); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            SEMICOLON38_tree = (XQDTCommonTree)adaptor.create(SEMICOLON38);
            adaptor.addChild(root_0, SEMICOLON38_tree);
            }
            if ( state.backtracking==0 ) {
              ak(list_k);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (XQDTCommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (XQDTCommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "pm_CopyNamespacesDecl"

    public static class p_DecimalFormatDecl_return extends ParserRuleReturnScope {
        XQDTCommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "p_DecimalFormatDecl"
    // XQueryParser.g:239:1: p_DecimalFormatDecl : k+= DECLARE ( ( DECIMAL_FORMAT p_QName ) | ( DEFAULT DECIMAL_FORMAT ) ) ( p_DFPropertyName ) EQ p_StringLiteral SEMICOLON ;
    public final XQueryParser.p_DecimalFormatDecl_return p_DecimalFormatDecl() throws RecognitionException {
        XQueryParser.p_DecimalFormatDecl_return retval = new XQueryParser.p_DecimalFormatDecl_return();
        retval.start = input.LT(1);

        XQDTCommonTree root_0 = null;

        CommonToken DECIMAL_FORMAT39=null;
        CommonToken DEFAULT41=null;
        CommonToken DECIMAL_FORMAT42=null;
        CommonToken EQ44=null;
        CommonToken SEMICOLON46=null;
        CommonToken k=null;
        List list_k=null;
        XQueryParser.p_QName_return p_QName40 = null;

        XQueryParser.p_DFPropertyName_return p_DFPropertyName43 = null;

        XQueryParser.p_StringLiteral_return p_StringLiteral45 = null;


        XQDTCommonTree DECIMAL_FORMAT39_tree=null;
        XQDTCommonTree DEFAULT41_tree=null;
        XQDTCommonTree DECIMAL_FORMAT42_tree=null;
        XQDTCommonTree EQ44_tree=null;
        XQDTCommonTree SEMICOLON46_tree=null;
        XQDTCommonTree k_tree=null;

        try {
            // XQueryParser.g:240:9: (k+= DECLARE ( ( DECIMAL_FORMAT p_QName ) | ( DEFAULT DECIMAL_FORMAT ) ) ( p_DFPropertyName ) EQ p_StringLiteral SEMICOLON )
            // XQueryParser.g:240:13: k+= DECLARE ( ( DECIMAL_FORMAT p_QName ) | ( DEFAULT DECIMAL_FORMAT ) ) ( p_DFPropertyName ) EQ p_StringLiteral SEMICOLON
            {
            root_0 = (XQDTCommonTree)adaptor.nil();

            k=(CommonToken)match(input,DECLARE,FOLLOW_DECLARE_in_p_DecimalFormatDecl1895); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            k_tree = (XQDTCommonTree)adaptor.create(k);
            adaptor.addChild(root_0, k_tree);
            }
            if (list_k==null) list_k=new ArrayList();
            list_k.add(k);

            // XQueryParser.g:240:24: ( ( DECIMAL_FORMAT p_QName ) | ( DEFAULT DECIMAL_FORMAT ) )
            int alt14=2;
            int LA14_0 = input.LA(1);

            if ( (LA14_0==DECIMAL_FORMAT) ) {
                alt14=1;
            }
            else if ( (LA14_0==DEFAULT) ) {
                alt14=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 14, 0, input);

                throw nvae;
            }
            switch (alt14) {
                case 1 :
                    // XQueryParser.g:240:25: ( DECIMAL_FORMAT p_QName )
                    {
                    // XQueryParser.g:240:25: ( DECIMAL_FORMAT p_QName )
                    // XQueryParser.g:240:26: DECIMAL_FORMAT p_QName
                    {
                    DECIMAL_FORMAT39=(CommonToken)match(input,DECIMAL_FORMAT,FOLLOW_DECIMAL_FORMAT_in_p_DecimalFormatDecl1899); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    DECIMAL_FORMAT39_tree = (XQDTCommonTree)adaptor.create(DECIMAL_FORMAT39);
                    adaptor.addChild(root_0, DECIMAL_FORMAT39_tree);
                    }
                    pushFollow(FOLLOW_p_QName_in_p_DecimalFormatDecl1901);
                    p_QName40=p_QName();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, p_QName40.getTree());

                    }


                    }
                    break;
                case 2 :
                    // XQueryParser.g:240:52: ( DEFAULT DECIMAL_FORMAT )
                    {
                    // XQueryParser.g:240:52: ( DEFAULT DECIMAL_FORMAT )
                    // XQueryParser.g:240:53: DEFAULT DECIMAL_FORMAT
                    {
                    DEFAULT41=(CommonToken)match(input,DEFAULT,FOLLOW_DEFAULT_in_p_DecimalFormatDecl1907); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    DEFAULT41_tree = (XQDTCommonTree)adaptor.create(DEFAULT41);
                    adaptor.addChild(root_0, DEFAULT41_tree);
                    }
                    DECIMAL_FORMAT42=(CommonToken)match(input,DECIMAL_FORMAT,FOLLOW_DECIMAL_FORMAT_in_p_DecimalFormatDecl1909); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    DECIMAL_FORMAT42_tree = (XQDTCommonTree)adaptor.create(DECIMAL_FORMAT42);
                    adaptor.addChild(root_0, DECIMAL_FORMAT42_tree);
                    }

                    }


                    }
                    break;

            }

            // XQueryParser.g:240:78: ( p_DFPropertyName )
            // XQueryParser.g:240:79: p_DFPropertyName
            {
            pushFollow(FOLLOW_p_DFPropertyName_in_p_DecimalFormatDecl1914);
            p_DFPropertyName43=p_DFPropertyName();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, p_DFPropertyName43.getTree());

            }

            EQ44=(CommonToken)match(input,EQ,FOLLOW_EQ_in_p_DecimalFormatDecl1917); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            EQ44_tree = (XQDTCommonTree)adaptor.create(EQ44);
            adaptor.addChild(root_0, EQ44_tree);
            }
            pushFollow(FOLLOW_p_StringLiteral_in_p_DecimalFormatDecl1919);
            p_StringLiteral45=p_StringLiteral();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, p_StringLiteral45.getTree());
            SEMICOLON46=(CommonToken)match(input,SEMICOLON,FOLLOW_SEMICOLON_in_p_DecimalFormatDecl1921); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            SEMICOLON46_tree = (XQDTCommonTree)adaptor.create(SEMICOLON46);
            adaptor.addChild(root_0, SEMICOLON46_tree);
            }
            if ( state.backtracking==0 ) {
              ak(list_k);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (XQDTCommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (XQDTCommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "p_DecimalFormatDecl"

    public static class p_DFPropertyName_return extends ParserRuleReturnScope {
        XQDTCommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "p_DFPropertyName"
    // XQueryParser.g:244:1: p_DFPropertyName : (k= DECIMAL_SEPARATOR | k= GROUPING_SEPARATOR | k= INFINITY | k= MINUS_SIGN | k= NAN | k= PERCENT | k= PER_MILLE | k= ZERO_DIGIT | k= DIGIT | k= PATTERN_SEPARATOR );
    public final XQueryParser.p_DFPropertyName_return p_DFPropertyName() throws RecognitionException {
        XQueryParser.p_DFPropertyName_return retval = new XQueryParser.p_DFPropertyName_return();
        retval.start = input.LT(1);

        XQDTCommonTree root_0 = null;

        CommonToken k=null;

        XQDTCommonTree k_tree=null;

        try {
            // XQueryParser.g:245:9: (k= DECIMAL_SEPARATOR | k= GROUPING_SEPARATOR | k= INFINITY | k= MINUS_SIGN | k= NAN | k= PERCENT | k= PER_MILLE | k= ZERO_DIGIT | k= DIGIT | k= PATTERN_SEPARATOR )
            int alt15=10;
            switch ( input.LA(1) ) {
            case DECIMAL_SEPARATOR:
                {
                alt15=1;
                }
                break;
            case GROUPING_SEPARATOR:
                {
                alt15=2;
                }
                break;
            case INFINITY:
                {
                alt15=3;
                }
                break;
            case MINUS_SIGN:
                {
                alt15=4;
                }
                break;
            case NAN:
                {
                alt15=5;
                }
                break;
            case PERCENT:
                {
                alt15=6;
                }
                break;
            case PER_MILLE:
                {
                alt15=7;
                }
                break;
            case ZERO_DIGIT:
                {
                alt15=8;
                }
                break;
            case DIGIT:
                {
                alt15=9;
                }
                break;
            case PATTERN_SEPARATOR:
                {
                alt15=10;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 15, 0, input);

                throw nvae;
            }

            switch (alt15) {
                case 1 :
                    // XQueryParser.g:245:11: k= DECIMAL_SEPARATOR
                    {
                    root_0 = (XQDTCommonTree)adaptor.nil();

                    k=(CommonToken)match(input,DECIMAL_SEPARATOR,FOLLOW_DECIMAL_SEPARATOR_in_p_DFPropertyName1951); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    k_tree = (XQDTCommonTree)adaptor.create(k);
                    adaptor.addChild(root_0, k_tree);
                    }

                    }
                    break;
                case 2 :
                    // XQueryParser.g:245:33: k= GROUPING_SEPARATOR
                    {
                    root_0 = (XQDTCommonTree)adaptor.nil();

                    k=(CommonToken)match(input,GROUPING_SEPARATOR,FOLLOW_GROUPING_SEPARATOR_in_p_DFPropertyName1957); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    k_tree = (XQDTCommonTree)adaptor.create(k);
                    adaptor.addChild(root_0, k_tree);
                    }

                    }
                    break;
                case 3 :
                    // XQueryParser.g:245:56: k= INFINITY
                    {
                    root_0 = (XQDTCommonTree)adaptor.nil();

                    k=(CommonToken)match(input,INFINITY,FOLLOW_INFINITY_in_p_DFPropertyName1963); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    k_tree = (XQDTCommonTree)adaptor.create(k);
                    adaptor.addChild(root_0, k_tree);
                    }

                    }
                    break;
                case 4 :
                    // XQueryParser.g:245:69: k= MINUS_SIGN
                    {
                    root_0 = (XQDTCommonTree)adaptor.nil();

                    k=(CommonToken)match(input,MINUS_SIGN,FOLLOW_MINUS_SIGN_in_p_DFPropertyName1969); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    k_tree = (XQDTCommonTree)adaptor.create(k);
                    adaptor.addChild(root_0, k_tree);
                    }

                    }
                    break;
                case 5 :
                    // XQueryParser.g:245:84: k= NAN
                    {
                    root_0 = (XQDTCommonTree)adaptor.nil();

                    k=(CommonToken)match(input,NAN,FOLLOW_NAN_in_p_DFPropertyName1975); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    k_tree = (XQDTCommonTree)adaptor.create(k);
                    adaptor.addChild(root_0, k_tree);
                    }

                    }
                    break;
                case 6 :
                    // XQueryParser.g:245:92: k= PERCENT
                    {
                    root_0 = (XQDTCommonTree)adaptor.nil();

                    k=(CommonToken)match(input,PERCENT,FOLLOW_PERCENT_in_p_DFPropertyName1981); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    k_tree = (XQDTCommonTree)adaptor.create(k);
                    adaptor.addChild(root_0, k_tree);
                    }

                    }
                    break;
                case 7 :
                    // XQueryParser.g:245:104: k= PER_MILLE
                    {
                    root_0 = (XQDTCommonTree)adaptor.nil();

                    k=(CommonToken)match(input,PER_MILLE,FOLLOW_PER_MILLE_in_p_DFPropertyName1987); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    k_tree = (XQDTCommonTree)adaptor.create(k);
                    adaptor.addChild(root_0, k_tree);
                    }

                    }
                    break;
                case 8 :
                    // XQueryParser.g:245:118: k= ZERO_DIGIT
                    {
                    root_0 = (XQDTCommonTree)adaptor.nil();

                    k=(CommonToken)match(input,ZERO_DIGIT,FOLLOW_ZERO_DIGIT_in_p_DFPropertyName1993); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    k_tree = (XQDTCommonTree)adaptor.create(k);
                    adaptor.addChild(root_0, k_tree);
                    }

                    }
                    break;
                case 9 :
                    // XQueryParser.g:245:133: k= DIGIT
                    {
                    root_0 = (XQDTCommonTree)adaptor.nil();

                    k=(CommonToken)match(input,DIGIT,FOLLOW_DIGIT_in_p_DFPropertyName1999); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    k_tree = (XQDTCommonTree)adaptor.create(k);
                    adaptor.addChild(root_0, k_tree);
                    }

                    }
                    break;
                case 10 :
                    // XQueryParser.g:245:143: k= PATTERN_SEPARATOR
                    {
                    root_0 = (XQDTCommonTree)adaptor.nil();

                    k=(CommonToken)match(input,PATTERN_SEPARATOR,FOLLOW_PATTERN_SEPARATOR_in_p_DFPropertyName2005); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    k_tree = (XQDTCommonTree)adaptor.create(k);
                    adaptor.addChild(root_0, k_tree);
                    }
                    if ( state.backtracking==0 ) {
                      ak(k);
                    }

                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (XQDTCommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (XQDTCommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "p_DFPropertyName"

    public static class p_PreserveMode_return extends ParserRuleReturnScope {
        XQDTCommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "p_PreserveMode"
    // XQueryParser.g:249:1: p_PreserveMode : (k+= PRESERVE | k+= NO_PRESERVE ) ;
    public final XQueryParser.p_PreserveMode_return p_PreserveMode() throws RecognitionException {
        XQueryParser.p_PreserveMode_return retval = new XQueryParser.p_PreserveMode_return();
        retval.start = input.LT(1);

        XQDTCommonTree root_0 = null;

        CommonToken k=null;
        List list_k=null;

        XQDTCommonTree k_tree=null;

        try {
            // XQueryParser.g:250:9: ( (k+= PRESERVE | k+= NO_PRESERVE ) )
            // XQueryParser.g:250:13: (k+= PRESERVE | k+= NO_PRESERVE )
            {
            root_0 = (XQDTCommonTree)adaptor.nil();

            // XQueryParser.g:250:13: (k+= PRESERVE | k+= NO_PRESERVE )
            int alt16=2;
            int LA16_0 = input.LA(1);

            if ( (LA16_0==PRESERVE) ) {
                alt16=1;
            }
            else if ( (LA16_0==NO_PRESERVE) ) {
                alt16=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 16, 0, input);

                throw nvae;
            }
            switch (alt16) {
                case 1 :
                    // XQueryParser.g:250:14: k+= PRESERVE
                    {
                    k=(CommonToken)match(input,PRESERVE,FOLLOW_PRESERVE_in_p_PreserveMode2038); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    k_tree = (XQDTCommonTree)adaptor.create(k);
                    adaptor.addChild(root_0, k_tree);
                    }
                    if (list_k==null) list_k=new ArrayList();
                    list_k.add(k);


                    }
                    break;
                case 2 :
                    // XQueryParser.g:250:28: k+= NO_PRESERVE
                    {
                    k=(CommonToken)match(input,NO_PRESERVE,FOLLOW_NO_PRESERVE_in_p_PreserveMode2044); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    k_tree = (XQDTCommonTree)adaptor.create(k);
                    adaptor.addChild(root_0, k_tree);
                    }
                    if (list_k==null) list_k=new ArrayList();
                    list_k.add(k);


                    }
                    break;

            }

            if ( state.backtracking==0 ) {
              ak(list_k);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (XQDTCommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (XQDTCommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "p_PreserveMode"

    public static class p_InheritMode_return extends ParserRuleReturnScope {
        XQDTCommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "p_InheritMode"
    // XQueryParser.g:254:1: p_InheritMode : (k+= INHERIT | k+= NO_INHERIT ) ;
    public final XQueryParser.p_InheritMode_return p_InheritMode() throws RecognitionException {
        XQueryParser.p_InheritMode_return retval = new XQueryParser.p_InheritMode_return();
        retval.start = input.LT(1);

        XQDTCommonTree root_0 = null;

        CommonToken k=null;
        List list_k=null;

        XQDTCommonTree k_tree=null;

        try {
            // XQueryParser.g:255:9: ( (k+= INHERIT | k+= NO_INHERIT ) )
            // XQueryParser.g:255:13: (k+= INHERIT | k+= NO_INHERIT )
            {
            root_0 = (XQDTCommonTree)adaptor.nil();

            // XQueryParser.g:255:13: (k+= INHERIT | k+= NO_INHERIT )
            int alt17=2;
            int LA17_0 = input.LA(1);

            if ( (LA17_0==INHERIT) ) {
                alt17=1;
            }
            else if ( (LA17_0==NO_INHERIT) ) {
                alt17=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 17, 0, input);

                throw nvae;
            }
            switch (alt17) {
                case 1 :
                    // XQueryParser.g:255:14: k+= INHERIT
                    {
                    k=(CommonToken)match(input,INHERIT,FOLLOW_INHERIT_in_p_InheritMode2078); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    k_tree = (XQDTCommonTree)adaptor.create(k);
                    adaptor.addChild(root_0, k_tree);
                    }
                    if (list_k==null) list_k=new ArrayList();
                    list_k.add(k);


                    }
                    break;
                case 2 :
                    // XQueryParser.g:255:27: k+= NO_INHERIT
                    {
                    k=(CommonToken)match(input,NO_INHERIT,FOLLOW_NO_INHERIT_in_p_InheritMode2084); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    k_tree = (XQDTCommonTree)adaptor.create(k);
                    adaptor.addChild(root_0, k_tree);
                    }
                    if (list_k==null) list_k=new ArrayList();
                    list_k.add(k);


                    }
                    break;

            }

            if ( state.backtracking==0 ) {
              ak(list_k);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (XQDTCommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (XQDTCommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "p_InheritMode"

    public static class pm_DefaultCollationDecl_return extends ParserRuleReturnScope {
        XQDTCommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "pm_DefaultCollationDecl"
    // XQueryParser.g:259:1: pm_DefaultCollationDecl : k+= DECLARE k+= DEFAULT k+= COLLATION p_StringLiteral SEMICOLON ;
    public final XQueryParser.pm_DefaultCollationDecl_return pm_DefaultCollationDecl() throws RecognitionException {
        XQueryParser.pm_DefaultCollationDecl_return retval = new XQueryParser.pm_DefaultCollationDecl_return();
        retval.start = input.LT(1);

        XQDTCommonTree root_0 = null;

        CommonToken SEMICOLON48=null;
        CommonToken k=null;
        List list_k=null;
        XQueryParser.p_StringLiteral_return p_StringLiteral47 = null;


        XQDTCommonTree SEMICOLON48_tree=null;
        XQDTCommonTree k_tree=null;

        try {
            // XQueryParser.g:260:9: (k+= DECLARE k+= DEFAULT k+= COLLATION p_StringLiteral SEMICOLON )
            // XQueryParser.g:260:13: k+= DECLARE k+= DEFAULT k+= COLLATION p_StringLiteral SEMICOLON
            {
            root_0 = (XQDTCommonTree)adaptor.nil();

            k=(CommonToken)match(input,DECLARE,FOLLOW_DECLARE_in_pm_DefaultCollationDecl2125); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            k_tree = (XQDTCommonTree)adaptor.create(k);
            adaptor.addChild(root_0, k_tree);
            }
            if (list_k==null) list_k=new ArrayList();
            list_k.add(k);

            k=(CommonToken)match(input,DEFAULT,FOLLOW_DEFAULT_in_pm_DefaultCollationDecl2129); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            k_tree = (XQDTCommonTree)adaptor.create(k);
            adaptor.addChild(root_0, k_tree);
            }
            if (list_k==null) list_k=new ArrayList();
            list_k.add(k);

            k=(CommonToken)match(input,COLLATION,FOLLOW_COLLATION_in_pm_DefaultCollationDecl2133); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            k_tree = (XQDTCommonTree)adaptor.create(k);
            adaptor.addChild(root_0, k_tree);
            }
            if (list_k==null) list_k=new ArrayList();
            list_k.add(k);

            pushFollow(FOLLOW_p_StringLiteral_in_pm_DefaultCollationDecl2135);
            p_StringLiteral47=p_StringLiteral();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, p_StringLiteral47.getTree());
            SEMICOLON48=(CommonToken)match(input,SEMICOLON,FOLLOW_SEMICOLON_in_pm_DefaultCollationDecl2137); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            SEMICOLON48_tree = (XQDTCommonTree)adaptor.create(SEMICOLON48);
            adaptor.addChild(root_0, SEMICOLON48_tree);
            }
            if ( state.backtracking==0 ) {
              ak(list_k);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (XQDTCommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (XQDTCommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "pm_DefaultCollationDecl"

    public static class pm_BaseURIDecl_return extends ParserRuleReturnScope {
        XQDTCommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "pm_BaseURIDecl"
    // XQueryParser.g:264:1: pm_BaseURIDecl : k+= DECLARE k+= BASE_URI sl= p_StringLiteral SEMICOLON -> ^( BaseURIDecl $sl) ;
    public final XQueryParser.pm_BaseURIDecl_return pm_BaseURIDecl() throws RecognitionException {
        XQueryParser.pm_BaseURIDecl_return retval = new XQueryParser.pm_BaseURIDecl_return();
        retval.start = input.LT(1);

        XQDTCommonTree root_0 = null;

        CommonToken SEMICOLON49=null;
        CommonToken k=null;
        List list_k=null;
        XQueryParser.p_StringLiteral_return sl = null;


        XQDTCommonTree SEMICOLON49_tree=null;
        XQDTCommonTree k_tree=null;
        RewriteRuleTokenStream stream_BASE_URI=new RewriteRuleTokenStream(adaptor,"token BASE_URI");
        RewriteRuleTokenStream stream_SEMICOLON=new RewriteRuleTokenStream(adaptor,"token SEMICOLON");
        RewriteRuleTokenStream stream_DECLARE=new RewriteRuleTokenStream(adaptor,"token DECLARE");
        RewriteRuleSubtreeStream stream_p_StringLiteral=new RewriteRuleSubtreeStream(adaptor,"rule p_StringLiteral");
        try {
            // XQueryParser.g:265:9: (k+= DECLARE k+= BASE_URI sl= p_StringLiteral SEMICOLON -> ^( BaseURIDecl $sl) )
            // XQueryParser.g:265:13: k+= DECLARE k+= BASE_URI sl= p_StringLiteral SEMICOLON
            {
            k=(CommonToken)match(input,DECLARE,FOLLOW_DECLARE_in_pm_BaseURIDecl2177); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_DECLARE.add(k);

            if (list_k==null) list_k=new ArrayList();
            list_k.add(k);

            k=(CommonToken)match(input,BASE_URI,FOLLOW_BASE_URI_in_pm_BaseURIDecl2181); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_BASE_URI.add(k);

            if (list_k==null) list_k=new ArrayList();
            list_k.add(k);

            pushFollow(FOLLOW_p_StringLiteral_in_pm_BaseURIDecl2185);
            sl=p_StringLiteral();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_p_StringLiteral.add(sl.getTree());
            SEMICOLON49=(CommonToken)match(input,SEMICOLON,FOLLOW_SEMICOLON_in_pm_BaseURIDecl2187); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_SEMICOLON.add(SEMICOLON49);

            if ( state.backtracking==0 ) {
              ak(list_k);
            }


            // AST REWRITE
            // elements: sl
            // token labels: 
            // rule labels: sl, retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_sl=new RewriteRuleSubtreeStream(adaptor,"rule sl",sl!=null?sl.tree:null);
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (XQDTCommonTree)adaptor.nil();
            // 266:17: -> ^( BaseURIDecl $sl)
            {
                // XQueryParser.g:266:20: ^( BaseURIDecl $sl)
                {
                XQDTCommonTree root_1 = (XQDTCommonTree)adaptor.nil();
                root_1 = (XQDTCommonTree)adaptor.becomeRoot((XQDTCommonTree)adaptor.create(BaseURIDecl, "BaseURIDecl"), root_1);

                adaptor.addChild(root_1, stream_sl.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (XQDTCommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (XQDTCommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "pm_BaseURIDecl"

    public static class pm_SchemaImport_return extends ParserRuleReturnScope {
        XQDTCommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "pm_SchemaImport"
    // XQueryParser.g:270:1: pm_SchemaImport : k+= IMPORT k+= SCHEMA (sp= p_SchemaPrefix )? us= p_StringLiteral ( AT ah+= p_StringLiteral ( COMMA ah+= p_StringLiteral )* )? SEMICOLON -> ^( SchemaImport ^( SchemaPrefix ( $sp)? ) $us ^( AtHints ( $ah)* ) ) ;
    public final XQueryParser.pm_SchemaImport_return pm_SchemaImport() throws RecognitionException {
        XQueryParser.pm_SchemaImport_return retval = new XQueryParser.pm_SchemaImport_return();
        retval.start = input.LT(1);

        XQDTCommonTree root_0 = null;

        CommonToken AT50=null;
        CommonToken COMMA51=null;
        CommonToken SEMICOLON52=null;
        CommonToken k=null;
        List list_k=null;
        List list_ah=null;
        XQueryParser.p_SchemaPrefix_return sp = null;

        XQueryParser.p_StringLiteral_return us = null;

        XQueryParser.p_StringLiteral_return ah = null;
         ah = null;
        XQDTCommonTree AT50_tree=null;
        XQDTCommonTree COMMA51_tree=null;
        XQDTCommonTree SEMICOLON52_tree=null;
        XQDTCommonTree k_tree=null;
        RewriteRuleTokenStream stream_COMMA=new RewriteRuleTokenStream(adaptor,"token COMMA");
        RewriteRuleTokenStream stream_SCHEMA=new RewriteRuleTokenStream(adaptor,"token SCHEMA");
        RewriteRuleTokenStream stream_SEMICOLON=new RewriteRuleTokenStream(adaptor,"token SEMICOLON");
        RewriteRuleTokenStream stream_IMPORT=new RewriteRuleTokenStream(adaptor,"token IMPORT");
        RewriteRuleTokenStream stream_AT=new RewriteRuleTokenStream(adaptor,"token AT");
        RewriteRuleSubtreeStream stream_p_StringLiteral=new RewriteRuleSubtreeStream(adaptor,"rule p_StringLiteral");
        RewriteRuleSubtreeStream stream_p_SchemaPrefix=new RewriteRuleSubtreeStream(adaptor,"rule p_SchemaPrefix");
        try {
            // XQueryParser.g:271:9: (k+= IMPORT k+= SCHEMA (sp= p_SchemaPrefix )? us= p_StringLiteral ( AT ah+= p_StringLiteral ( COMMA ah+= p_StringLiteral )* )? SEMICOLON -> ^( SchemaImport ^( SchemaPrefix ( $sp)? ) $us ^( AtHints ( $ah)* ) ) )
            // XQueryParser.g:271:11: k+= IMPORT k+= SCHEMA (sp= p_SchemaPrefix )? us= p_StringLiteral ( AT ah+= p_StringLiteral ( COMMA ah+= p_StringLiteral )* )? SEMICOLON
            {
            k=(CommonToken)match(input,IMPORT,FOLLOW_IMPORT_in_pm_SchemaImport2242); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_IMPORT.add(k);

            if (list_k==null) list_k=new ArrayList();
            list_k.add(k);

            k=(CommonToken)match(input,SCHEMA,FOLLOW_SCHEMA_in_pm_SchemaImport2246); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_SCHEMA.add(k);

            if (list_k==null) list_k=new ArrayList();
            list_k.add(k);

            // XQueryParser.g:271:33: (sp= p_SchemaPrefix )?
            int alt18=2;
            int LA18_0 = input.LA(1);

            if ( (LA18_0==DEFAULT||LA18_0==NAMESPACE) ) {
                alt18=1;
            }
            switch (alt18) {
                case 1 :
                    // XQueryParser.g:271:33: sp= p_SchemaPrefix
                    {
                    pushFollow(FOLLOW_p_SchemaPrefix_in_pm_SchemaImport2250);
                    sp=p_SchemaPrefix();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_p_SchemaPrefix.add(sp.getTree());

                    }
                    break;

            }

            pushFollow(FOLLOW_p_StringLiteral_in_pm_SchemaImport2255);
            us=p_StringLiteral();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_p_StringLiteral.add(us.getTree());
            // XQueryParser.g:271:69: ( AT ah+= p_StringLiteral ( COMMA ah+= p_StringLiteral )* )?
            int alt20=2;
            int LA20_0 = input.LA(1);

            if ( (LA20_0==AT) ) {
                alt20=1;
            }
            switch (alt20) {
                case 1 :
                    // XQueryParser.g:271:70: AT ah+= p_StringLiteral ( COMMA ah+= p_StringLiteral )*
                    {
                    AT50=(CommonToken)match(input,AT,FOLLOW_AT_in_pm_SchemaImport2258); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_AT.add(AT50);

                    pushFollow(FOLLOW_p_StringLiteral_in_pm_SchemaImport2262);
                    ah=p_StringLiteral();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_p_StringLiteral.add(ah.getTree());
                    if (list_ah==null) list_ah=new ArrayList();
                    list_ah.add(ah.getTree());

                    // XQueryParser.g:271:93: ( COMMA ah+= p_StringLiteral )*
                    loop19:
                    do {
                        int alt19=2;
                        int LA19_0 = input.LA(1);

                        if ( (LA19_0==COMMA) ) {
                            alt19=1;
                        }


                        switch (alt19) {
                    	case 1 :
                    	    // XQueryParser.g:271:94: COMMA ah+= p_StringLiteral
                    	    {
                    	    COMMA51=(CommonToken)match(input,COMMA,FOLLOW_COMMA_in_pm_SchemaImport2265); if (state.failed) return retval; 
                    	    if ( state.backtracking==0 ) stream_COMMA.add(COMMA51);

                    	    pushFollow(FOLLOW_p_StringLiteral_in_pm_SchemaImport2269);
                    	    ah=p_StringLiteral();

                    	    state._fsp--;
                    	    if (state.failed) return retval;
                    	    if ( state.backtracking==0 ) stream_p_StringLiteral.add(ah.getTree());
                    	    if (list_ah==null) list_ah=new ArrayList();
                    	    list_ah.add(ah.getTree());


                    	    }
                    	    break;

                    	default :
                    	    break loop19;
                        }
                    } while (true);


                    }
                    break;

            }

            SEMICOLON52=(CommonToken)match(input,SEMICOLON,FOLLOW_SEMICOLON_in_pm_SchemaImport2275); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_SEMICOLON.add(SEMICOLON52);

            if ( state.backtracking==0 ) {
              ak(list_k);
            }


            // AST REWRITE
            // elements: ah, us, sp
            // token labels: 
            // rule labels: sp, us, retval
            // token list labels: 
            // rule list labels: ah
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_sp=new RewriteRuleSubtreeStream(adaptor,"rule sp",sp!=null?sp.tree:null);
            RewriteRuleSubtreeStream stream_us=new RewriteRuleSubtreeStream(adaptor,"rule us",us!=null?us.tree:null);
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
            RewriteRuleSubtreeStream stream_ah=new RewriteRuleSubtreeStream(adaptor,"token ah",list_ah);
            root_0 = (XQDTCommonTree)adaptor.nil();
            // 272:17: -> ^( SchemaImport ^( SchemaPrefix ( $sp)? ) $us ^( AtHints ( $ah)* ) )
            {
                // XQueryParser.g:272:20: ^( SchemaImport ^( SchemaPrefix ( $sp)? ) $us ^( AtHints ( $ah)* ) )
                {
                XQDTCommonTree root_1 = (XQDTCommonTree)adaptor.nil();
                root_1 = (XQDTCommonTree)adaptor.becomeRoot((XQDTCommonTree)adaptor.create(SchemaImport, "SchemaImport"), root_1);

                // XQueryParser.g:272:35: ^( SchemaPrefix ( $sp)? )
                {
                XQDTCommonTree root_2 = (XQDTCommonTree)adaptor.nil();
                root_2 = (XQDTCommonTree)adaptor.becomeRoot((XQDTCommonTree)adaptor.create(SchemaPrefix, "SchemaPrefix"), root_2);

                // XQueryParser.g:272:50: ( $sp)?
                if ( stream_sp.hasNext() ) {
                    adaptor.addChild(root_2, stream_sp.nextTree());

                }
                stream_sp.reset();

                adaptor.addChild(root_1, root_2);
                }
                adaptor.addChild(root_1, stream_us.nextTree());
                // XQueryParser.g:272:60: ^( AtHints ( $ah)* )
                {
                XQDTCommonTree root_2 = (XQDTCommonTree)adaptor.nil();
                root_2 = (XQDTCommonTree)adaptor.becomeRoot((XQDTCommonTree)adaptor.create(AtHints, "AtHints"), root_2);

                // XQueryParser.g:272:70: ( $ah)*
                while ( stream_ah.hasNext() ) {
                    adaptor.addChild(root_2, stream_ah.nextTree());

                }
                stream_ah.reset();

                adaptor.addChild(root_1, root_2);
                }

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (XQDTCommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (XQDTCommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "pm_SchemaImport"

    public static class p_SchemaPrefix_return extends ParserRuleReturnScope {
        XQDTCommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "p_SchemaPrefix"
    // XQueryParser.g:276:1: p_SchemaPrefix : (k+= NAMESPACE nn= p_NCName EQUAL -> ^( NamespaceName $nn) | k+= DEFAULT k+= ELEMENT k+= NAMESPACE -> DefaultElementNamespace );
    public final XQueryParser.p_SchemaPrefix_return p_SchemaPrefix() throws RecognitionException {
        XQueryParser.p_SchemaPrefix_return retval = new XQueryParser.p_SchemaPrefix_return();
        retval.start = input.LT(1);

        XQDTCommonTree root_0 = null;

        CommonToken EQUAL53=null;
        CommonToken k=null;
        List list_k=null;
        XQueryParser.p_NCName_return nn = null;


        XQDTCommonTree EQUAL53_tree=null;
        XQDTCommonTree k_tree=null;
        RewriteRuleTokenStream stream_NAMESPACE=new RewriteRuleTokenStream(adaptor,"token NAMESPACE");
        RewriteRuleTokenStream stream_DEFAULT=new RewriteRuleTokenStream(adaptor,"token DEFAULT");
        RewriteRuleTokenStream stream_ELEMENT=new RewriteRuleTokenStream(adaptor,"token ELEMENT");
        RewriteRuleTokenStream stream_EQUAL=new RewriteRuleTokenStream(adaptor,"token EQUAL");
        RewriteRuleSubtreeStream stream_p_NCName=new RewriteRuleSubtreeStream(adaptor,"rule p_NCName");
        try {
            // XQueryParser.g:277:9: (k+= NAMESPACE nn= p_NCName EQUAL -> ^( NamespaceName $nn) | k+= DEFAULT k+= ELEMENT k+= NAMESPACE -> DefaultElementNamespace )
            int alt21=2;
            int LA21_0 = input.LA(1);

            if ( (LA21_0==NAMESPACE) ) {
                alt21=1;
            }
            else if ( (LA21_0==DEFAULT) ) {
                alt21=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 21, 0, input);

                throw nvae;
            }
            switch (alt21) {
                case 1 :
                    // XQueryParser.g:277:11: k+= NAMESPACE nn= p_NCName EQUAL
                    {
                    k=(CommonToken)match(input,NAMESPACE,FOLLOW_NAMESPACE_in_p_SchemaPrefix2347); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_NAMESPACE.add(k);

                    if (list_k==null) list_k=new ArrayList();
                    list_k.add(k);

                    pushFollow(FOLLOW_p_NCName_in_p_SchemaPrefix2351);
                    nn=p_NCName();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_p_NCName.add(nn.getTree());
                    EQUAL53=(CommonToken)match(input,EQUAL,FOLLOW_EQUAL_in_p_SchemaPrefix2353); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_EQUAL.add(EQUAL53);

                    if ( state.backtracking==0 ) {
                      ak(list_k);
                    }


                    // AST REWRITE
                    // elements: nn
                    // token labels: 
                    // rule labels: nn, retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_nn=new RewriteRuleSubtreeStream(adaptor,"rule nn",nn!=null?nn.tree:null);
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (XQDTCommonTree)adaptor.nil();
                    // 278:17: -> ^( NamespaceName $nn)
                    {
                        // XQueryParser.g:278:20: ^( NamespaceName $nn)
                        {
                        XQDTCommonTree root_1 = (XQDTCommonTree)adaptor.nil();
                        root_1 = (XQDTCommonTree)adaptor.becomeRoot((XQDTCommonTree)adaptor.create(NamespaceName, "NamespaceName"), root_1);

                        adaptor.addChild(root_1, stream_nn.nextTree());

                        adaptor.addChild(root_0, root_1);
                        }

                    }

                    retval.tree = root_0;}
                    }
                    break;
                case 2 :
                    // XQueryParser.g:279:11: k+= DEFAULT k+= ELEMENT k+= NAMESPACE
                    {
                    k=(CommonToken)match(input,DEFAULT,FOLLOW_DEFAULT_in_p_SchemaPrefix2394); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_DEFAULT.add(k);

                    if (list_k==null) list_k=new ArrayList();
                    list_k.add(k);

                    k=(CommonToken)match(input,ELEMENT,FOLLOW_ELEMENT_in_p_SchemaPrefix2398); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_ELEMENT.add(k);

                    if (list_k==null) list_k=new ArrayList();
                    list_k.add(k);

                    k=(CommonToken)match(input,NAMESPACE,FOLLOW_NAMESPACE_in_p_SchemaPrefix2402); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_NAMESPACE.add(k);

                    if (list_k==null) list_k=new ArrayList();
                    list_k.add(k);

                    if ( state.backtracking==0 ) {
                      ak(list_k);
                    }


                    // AST REWRITE
                    // elements: 
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (XQDTCommonTree)adaptor.nil();
                    // 280:17: -> DefaultElementNamespace
                    {
                        adaptor.addChild(root_0, (XQDTCommonTree)adaptor.create(DefaultElementNamespace, "DefaultElementNamespace"));

                    }

                    retval.tree = root_0;}
                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (XQDTCommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (XQDTCommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "p_SchemaPrefix"

    public static class pm_ModuleImport_return extends ParserRuleReturnScope {
        XQDTCommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "pm_ModuleImport"
    // XQueryParser.g:284:1: pm_ModuleImport : k+= IMPORT k+= MODULE (k+= NAMESPACE nn= p_NCName EQUAL )? us= p_StringLiteral (k+= AT ah+= p_StringLiteral ( COMMA ah+= p_StringLiteral )* )? SEMICOLON -> ^( ModuleImport ^( NamespaceName ( $nn)? ) $us ^( AtHints ( $ah)* ) ) ;
    public final XQueryParser.pm_ModuleImport_return pm_ModuleImport() throws RecognitionException {
        XQueryParser.pm_ModuleImport_return retval = new XQueryParser.pm_ModuleImport_return();
        retval.start = input.LT(1);

        XQDTCommonTree root_0 = null;

        CommonToken EQUAL54=null;
        CommonToken COMMA55=null;
        CommonToken SEMICOLON56=null;
        CommonToken k=null;
        List list_k=null;
        List list_ah=null;
        XQueryParser.p_NCName_return nn = null;

        XQueryParser.p_StringLiteral_return us = null;

        XQueryParser.p_StringLiteral_return ah = null;
         ah = null;
        XQDTCommonTree EQUAL54_tree=null;
        XQDTCommonTree COMMA55_tree=null;
        XQDTCommonTree SEMICOLON56_tree=null;
        XQDTCommonTree k_tree=null;
        RewriteRuleTokenStream stream_NAMESPACE=new RewriteRuleTokenStream(adaptor,"token NAMESPACE");
        RewriteRuleTokenStream stream_COMMA=new RewriteRuleTokenStream(adaptor,"token COMMA");
        RewriteRuleTokenStream stream_EQUAL=new RewriteRuleTokenStream(adaptor,"token EQUAL");
        RewriteRuleTokenStream stream_SEMICOLON=new RewriteRuleTokenStream(adaptor,"token SEMICOLON");
        RewriteRuleTokenStream stream_IMPORT=new RewriteRuleTokenStream(adaptor,"token IMPORT");
        RewriteRuleTokenStream stream_MODULE=new RewriteRuleTokenStream(adaptor,"token MODULE");
        RewriteRuleTokenStream stream_AT=new RewriteRuleTokenStream(adaptor,"token AT");
        RewriteRuleSubtreeStream stream_p_NCName=new RewriteRuleSubtreeStream(adaptor,"rule p_NCName");
        RewriteRuleSubtreeStream stream_p_StringLiteral=new RewriteRuleSubtreeStream(adaptor,"rule p_StringLiteral");
        try {
            // XQueryParser.g:285:9: (k+= IMPORT k+= MODULE (k+= NAMESPACE nn= p_NCName EQUAL )? us= p_StringLiteral (k+= AT ah+= p_StringLiteral ( COMMA ah+= p_StringLiteral )* )? SEMICOLON -> ^( ModuleImport ^( NamespaceName ( $nn)? ) $us ^( AtHints ( $ah)* ) ) )
            // XQueryParser.g:285:11: k+= IMPORT k+= MODULE (k+= NAMESPACE nn= p_NCName EQUAL )? us= p_StringLiteral (k+= AT ah+= p_StringLiteral ( COMMA ah+= p_StringLiteral )* )? SEMICOLON
            {
            k=(CommonToken)match(input,IMPORT,FOLLOW_IMPORT_in_pm_ModuleImport2452); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_IMPORT.add(k);

            if (list_k==null) list_k=new ArrayList();
            list_k.add(k);

            k=(CommonToken)match(input,MODULE,FOLLOW_MODULE_in_pm_ModuleImport2456); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_MODULE.add(k);

            if (list_k==null) list_k=new ArrayList();
            list_k.add(k);

            // XQueryParser.g:285:31: (k+= NAMESPACE nn= p_NCName EQUAL )?
            int alt22=2;
            int LA22_0 = input.LA(1);

            if ( (LA22_0==NAMESPACE) ) {
                alt22=1;
            }
            switch (alt22) {
                case 1 :
                    // XQueryParser.g:285:32: k+= NAMESPACE nn= p_NCName EQUAL
                    {
                    k=(CommonToken)match(input,NAMESPACE,FOLLOW_NAMESPACE_in_pm_ModuleImport2461); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_NAMESPACE.add(k);

                    if (list_k==null) list_k=new ArrayList();
                    list_k.add(k);

                    pushFollow(FOLLOW_p_NCName_in_pm_ModuleImport2465);
                    nn=p_NCName();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_p_NCName.add(nn.getTree());
                    EQUAL54=(CommonToken)match(input,EQUAL,FOLLOW_EQUAL_in_pm_ModuleImport2467); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_EQUAL.add(EQUAL54);


                    }
                    break;

            }

            pushFollow(FOLLOW_p_StringLiteral_in_pm_ModuleImport2473);
            us=p_StringLiteral();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_p_StringLiteral.add(us.getTree());
            // XQueryParser.g:285:84: (k+= AT ah+= p_StringLiteral ( COMMA ah+= p_StringLiteral )* )?
            int alt24=2;
            int LA24_0 = input.LA(1);

            if ( (LA24_0==AT) ) {
                alt24=1;
            }
            switch (alt24) {
                case 1 :
                    // XQueryParser.g:285:85: k+= AT ah+= p_StringLiteral ( COMMA ah+= p_StringLiteral )*
                    {
                    k=(CommonToken)match(input,AT,FOLLOW_AT_in_pm_ModuleImport2478); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_AT.add(k);

                    if (list_k==null) list_k=new ArrayList();
                    list_k.add(k);

                    pushFollow(FOLLOW_p_StringLiteral_in_pm_ModuleImport2482);
                    ah=p_StringLiteral();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_p_StringLiteral.add(ah.getTree());
                    if (list_ah==null) list_ah=new ArrayList();
                    list_ah.add(ah.getTree());

                    // XQueryParser.g:285:111: ( COMMA ah+= p_StringLiteral )*
                    loop23:
                    do {
                        int alt23=2;
                        int LA23_0 = input.LA(1);

                        if ( (LA23_0==COMMA) ) {
                            alt23=1;
                        }


                        switch (alt23) {
                    	case 1 :
                    	    // XQueryParser.g:285:112: COMMA ah+= p_StringLiteral
                    	    {
                    	    COMMA55=(CommonToken)match(input,COMMA,FOLLOW_COMMA_in_pm_ModuleImport2485); if (state.failed) return retval; 
                    	    if ( state.backtracking==0 ) stream_COMMA.add(COMMA55);

                    	    pushFollow(FOLLOW_p_StringLiteral_in_pm_ModuleImport2489);
                    	    ah=p_StringLiteral();

                    	    state._fsp--;
                    	    if (state.failed) return retval;
                    	    if ( state.backtracking==0 ) stream_p_StringLiteral.add(ah.getTree());
                    	    if (list_ah==null) list_ah=new ArrayList();
                    	    list_ah.add(ah.getTree());


                    	    }
                    	    break;

                    	default :
                    	    break loop23;
                        }
                    } while (true);


                    }
                    break;

            }

            SEMICOLON56=(CommonToken)match(input,SEMICOLON,FOLLOW_SEMICOLON_in_pm_ModuleImport2495); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_SEMICOLON.add(SEMICOLON56);

            if ( state.backtracking==0 ) {
              ak(list_k);
            }


            // AST REWRITE
            // elements: ah, us, nn
            // token labels: 
            // rule labels: us, nn, retval
            // token list labels: 
            // rule list labels: ah
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_us=new RewriteRuleSubtreeStream(adaptor,"rule us",us!=null?us.tree:null);
            RewriteRuleSubtreeStream stream_nn=new RewriteRuleSubtreeStream(adaptor,"rule nn",nn!=null?nn.tree:null);
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
            RewriteRuleSubtreeStream stream_ah=new RewriteRuleSubtreeStream(adaptor,"token ah",list_ah);
            root_0 = (XQDTCommonTree)adaptor.nil();
            // 286:17: -> ^( ModuleImport ^( NamespaceName ( $nn)? ) $us ^( AtHints ( $ah)* ) )
            {
                // XQueryParser.g:286:20: ^( ModuleImport ^( NamespaceName ( $nn)? ) $us ^( AtHints ( $ah)* ) )
                {
                XQDTCommonTree root_1 = (XQDTCommonTree)adaptor.nil();
                root_1 = (XQDTCommonTree)adaptor.becomeRoot((XQDTCommonTree)adaptor.create(ModuleImport, "ModuleImport"), root_1);

                // XQueryParser.g:286:35: ^( NamespaceName ( $nn)? )
                {
                XQDTCommonTree root_2 = (XQDTCommonTree)adaptor.nil();
                root_2 = (XQDTCommonTree)adaptor.becomeRoot((XQDTCommonTree)adaptor.create(NamespaceName, "NamespaceName"), root_2);

                // XQueryParser.g:286:51: ( $nn)?
                if ( stream_nn.hasNext() ) {
                    adaptor.addChild(root_2, stream_nn.nextTree());

                }
                stream_nn.reset();

                adaptor.addChild(root_1, root_2);
                }
                adaptor.addChild(root_1, stream_us.nextTree());
                // XQueryParser.g:286:61: ^( AtHints ( $ah)* )
                {
                XQDTCommonTree root_2 = (XQDTCommonTree)adaptor.nil();
                root_2 = (XQDTCommonTree)adaptor.becomeRoot((XQDTCommonTree)adaptor.create(AtHints, "AtHints"), root_2);

                // XQueryParser.g:286:71: ( $ah)*
                while ( stream_ah.hasNext() ) {
                    adaptor.addChild(root_2, stream_ah.nextTree());

                }
                stream_ah.reset();

                adaptor.addChild(root_1, root_2);
                }

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (XQDTCommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (XQDTCommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "pm_ModuleImport"

    public static class pm_VarDecl_return extends ParserRuleReturnScope {
        XQDTCommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "pm_VarDecl"
    // XQueryParser.g:290:1: pm_VarDecl : k+= DECLARE vdt= pg_VarDeclType DOLLAR qn= p_QName (td= p_TypeDeclaration )? ( ( BIND es= p_ExprSingle ) | (k+= EXTERNAL ( BIND des= p_ExprSingle )? ) ) SEMICOLON -> ^( VarDecl $vdt $qn ^( VarType ( $td)? ) ^( VarValue ( $es)? ^( VarDefaultValue ( $des)? ) ) ) ;
    public final XQueryParser.pm_VarDecl_return pm_VarDecl() throws RecognitionException {
        XQueryParser.pm_VarDecl_return retval = new XQueryParser.pm_VarDecl_return();
        retval.start = input.LT(1);

        XQDTCommonTree root_0 = null;

        CommonToken DOLLAR57=null;
        CommonToken BIND58=null;
        CommonToken BIND59=null;
        CommonToken SEMICOLON60=null;
        CommonToken k=null;
        List list_k=null;
        XQueryParser.pg_VarDeclType_return vdt = null;

        XQueryParser.p_QName_return qn = null;

        XQueryParser.p_TypeDeclaration_return td = null;

        XQueryParser.p_ExprSingle_return es = null;

        XQueryParser.p_ExprSingle_return des = null;


        XQDTCommonTree DOLLAR57_tree=null;
        XQDTCommonTree BIND58_tree=null;
        XQDTCommonTree BIND59_tree=null;
        XQDTCommonTree SEMICOLON60_tree=null;
        XQDTCommonTree k_tree=null;
        RewriteRuleTokenStream stream_DOLLAR=new RewriteRuleTokenStream(adaptor,"token DOLLAR");
        RewriteRuleTokenStream stream_EXTERNAL=new RewriteRuleTokenStream(adaptor,"token EXTERNAL");
        RewriteRuleTokenStream stream_SEMICOLON=new RewriteRuleTokenStream(adaptor,"token SEMICOLON");
        RewriteRuleTokenStream stream_BIND=new RewriteRuleTokenStream(adaptor,"token BIND");
        RewriteRuleTokenStream stream_DECLARE=new RewriteRuleTokenStream(adaptor,"token DECLARE");
        RewriteRuleSubtreeStream stream_pg_VarDeclType=new RewriteRuleSubtreeStream(adaptor,"rule pg_VarDeclType");
        RewriteRuleSubtreeStream stream_p_ExprSingle=new RewriteRuleSubtreeStream(adaptor,"rule p_ExprSingle");
        RewriteRuleSubtreeStream stream_p_TypeDeclaration=new RewriteRuleSubtreeStream(adaptor,"rule p_TypeDeclaration");
        RewriteRuleSubtreeStream stream_p_QName=new RewriteRuleSubtreeStream(adaptor,"rule p_QName");
        try {
            // XQueryParser.g:291:9: (k+= DECLARE vdt= pg_VarDeclType DOLLAR qn= p_QName (td= p_TypeDeclaration )? ( ( BIND es= p_ExprSingle ) | (k+= EXTERNAL ( BIND des= p_ExprSingle )? ) ) SEMICOLON -> ^( VarDecl $vdt $qn ^( VarType ( $td)? ) ^( VarValue ( $es)? ^( VarDefaultValue ( $des)? ) ) ) )
            // XQueryParser.g:291:11: k+= DECLARE vdt= pg_VarDeclType DOLLAR qn= p_QName (td= p_TypeDeclaration )? ( ( BIND es= p_ExprSingle ) | (k+= EXTERNAL ( BIND des= p_ExprSingle )? ) ) SEMICOLON
            {
            k=(CommonToken)match(input,DECLARE,FOLLOW_DECLARE_in_pm_VarDecl2566); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_DECLARE.add(k);

            if (list_k==null) list_k=new ArrayList();
            list_k.add(k);

            pushFollow(FOLLOW_pg_VarDeclType_in_pm_VarDecl2570);
            vdt=pg_VarDeclType();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_pg_VarDeclType.add(vdt.getTree());
            DOLLAR57=(CommonToken)match(input,DOLLAR,FOLLOW_DOLLAR_in_pm_VarDecl2572); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_DOLLAR.add(DOLLAR57);

            pushFollow(FOLLOW_p_QName_in_pm_VarDecl2576);
            qn=p_QName();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_p_QName.add(qn.getTree());
            // XQueryParser.g:291:61: (td= p_TypeDeclaration )?
            int alt25=2;
            int LA25_0 = input.LA(1);

            if ( (LA25_0==AS) ) {
                alt25=1;
            }
            switch (alt25) {
                case 1 :
                    // XQueryParser.g:291:61: td= p_TypeDeclaration
                    {
                    pushFollow(FOLLOW_p_TypeDeclaration_in_pm_VarDecl2580);
                    td=p_TypeDeclaration();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_p_TypeDeclaration.add(td.getTree());

                    }
                    break;

            }

            // XQueryParser.g:291:81: ( ( BIND es= p_ExprSingle ) | (k+= EXTERNAL ( BIND des= p_ExprSingle )? ) )
            int alt27=2;
            int LA27_0 = input.LA(1);

            if ( (LA27_0==BIND) ) {
                alt27=1;
            }
            else if ( (LA27_0==EXTERNAL) ) {
                alt27=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 27, 0, input);

                throw nvae;
            }
            switch (alt27) {
                case 1 :
                    // XQueryParser.g:291:82: ( BIND es= p_ExprSingle )
                    {
                    // XQueryParser.g:291:82: ( BIND es= p_ExprSingle )
                    // XQueryParser.g:291:83: BIND es= p_ExprSingle
                    {
                    BIND58=(CommonToken)match(input,BIND,FOLLOW_BIND_in_pm_VarDecl2585); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_BIND.add(BIND58);

                    pushFollow(FOLLOW_p_ExprSingle_in_pm_VarDecl2589);
                    es=p_ExprSingle();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_p_ExprSingle.add(es.getTree());

                    }


                    }
                    break;
                case 2 :
                    // XQueryParser.g:291:107: (k+= EXTERNAL ( BIND des= p_ExprSingle )? )
                    {
                    // XQueryParser.g:291:107: (k+= EXTERNAL ( BIND des= p_ExprSingle )? )
                    // XQueryParser.g:291:108: k+= EXTERNAL ( BIND des= p_ExprSingle )?
                    {
                    k=(CommonToken)match(input,EXTERNAL,FOLLOW_EXTERNAL_in_pm_VarDecl2597); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_EXTERNAL.add(k);

                    if (list_k==null) list_k=new ArrayList();
                    list_k.add(k);

                    // XQueryParser.g:291:120: ( BIND des= p_ExprSingle )?
                    int alt26=2;
                    int LA26_0 = input.LA(1);

                    if ( (LA26_0==BIND) ) {
                        alt26=1;
                    }
                    switch (alt26) {
                        case 1 :
                            // XQueryParser.g:291:121: BIND des= p_ExprSingle
                            {
                            BIND59=(CommonToken)match(input,BIND,FOLLOW_BIND_in_pm_VarDecl2600); if (state.failed) return retval; 
                            if ( state.backtracking==0 ) stream_BIND.add(BIND59);

                            pushFollow(FOLLOW_p_ExprSingle_in_pm_VarDecl2604);
                            des=p_ExprSingle();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_p_ExprSingle.add(des.getTree());

                            }
                            break;

                    }


                    }


                    }
                    break;

            }

            SEMICOLON60=(CommonToken)match(input,SEMICOLON,FOLLOW_SEMICOLON_in_pm_VarDecl2610); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_SEMICOLON.add(SEMICOLON60);

            if ( state.backtracking==0 ) {
              ak(list_k);
            }


            // AST REWRITE
            // elements: des, td, es, qn, vdt
            // token labels: 
            // rule labels: td, qn, es, retval, vdt, des
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_td=new RewriteRuleSubtreeStream(adaptor,"rule td",td!=null?td.tree:null);
            RewriteRuleSubtreeStream stream_qn=new RewriteRuleSubtreeStream(adaptor,"rule qn",qn!=null?qn.tree:null);
            RewriteRuleSubtreeStream stream_es=new RewriteRuleSubtreeStream(adaptor,"rule es",es!=null?es.tree:null);
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
            RewriteRuleSubtreeStream stream_vdt=new RewriteRuleSubtreeStream(adaptor,"rule vdt",vdt!=null?vdt.tree:null);
            RewriteRuleSubtreeStream stream_des=new RewriteRuleSubtreeStream(adaptor,"rule des",des!=null?des.tree:null);

            root_0 = (XQDTCommonTree)adaptor.nil();
            // 292:17: -> ^( VarDecl $vdt $qn ^( VarType ( $td)? ) ^( VarValue ( $es)? ^( VarDefaultValue ( $des)? ) ) )
            {
                // XQueryParser.g:292:20: ^( VarDecl $vdt $qn ^( VarType ( $td)? ) ^( VarValue ( $es)? ^( VarDefaultValue ( $des)? ) ) )
                {
                XQDTCommonTree root_1 = (XQDTCommonTree)adaptor.nil();
                root_1 = (XQDTCommonTree)adaptor.becomeRoot((XQDTCommonTree)adaptor.create(VarDecl, "VarDecl"), root_1);

                adaptor.addChild(root_1, stream_vdt.nextTree());
                adaptor.addChild(root_1, stream_qn.nextTree());
                // XQueryParser.g:292:39: ^( VarType ( $td)? )
                {
                XQDTCommonTree root_2 = (XQDTCommonTree)adaptor.nil();
                root_2 = (XQDTCommonTree)adaptor.becomeRoot((XQDTCommonTree)adaptor.create(VarType, "VarType"), root_2);

                // XQueryParser.g:292:49: ( $td)?
                if ( stream_td.hasNext() ) {
                    adaptor.addChild(root_2, stream_td.nextTree());

                }
                stream_td.reset();

                adaptor.addChild(root_1, root_2);
                }
                // XQueryParser.g:292:55: ^( VarValue ( $es)? ^( VarDefaultValue ( $des)? ) )
                {
                XQDTCommonTree root_2 = (XQDTCommonTree)adaptor.nil();
                root_2 = (XQDTCommonTree)adaptor.becomeRoot((XQDTCommonTree)adaptor.create(VarValue, "VarValue"), root_2);

                // XQueryParser.g:292:66: ( $es)?
                if ( stream_es.hasNext() ) {
                    adaptor.addChild(root_2, stream_es.nextTree());

                }
                stream_es.reset();
                // XQueryParser.g:292:71: ^( VarDefaultValue ( $des)? )
                {
                XQDTCommonTree root_3 = (XQDTCommonTree)adaptor.nil();
                root_3 = (XQDTCommonTree)adaptor.becomeRoot((XQDTCommonTree)adaptor.create(VarDefaultValue, "VarDefaultValue"), root_3);

                // XQueryParser.g:292:89: ( $des)?
                if ( stream_des.hasNext() ) {
                    adaptor.addChild(root_3, stream_des.nextTree());

                }
                stream_des.reset();

                adaptor.addChild(root_2, root_3);
                }

                adaptor.addChild(root_1, root_2);
                }

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (XQDTCommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (XQDTCommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "pm_VarDecl"

    public static class pg_VarDeclType_return extends ParserRuleReturnScope {
        XQDTCommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "pg_VarDeclType"
    // XQueryParser.g:299:1: pg_VarDeclType : ({...}? =>ku= CONSTANT -> VarConstantDecl | kv= VARIABLE -> VarVariableDecl );
    public final XQueryParser.pg_VarDeclType_return pg_VarDeclType() throws RecognitionException {
        XQueryParser.pg_VarDeclType_return retval = new XQueryParser.pg_VarDeclType_return();
        retval.start = input.LT(1);

        XQDTCommonTree root_0 = null;

        CommonToken ku=null;
        CommonToken kv=null;

        XQDTCommonTree ku_tree=null;
        XQDTCommonTree kv_tree=null;
        RewriteRuleTokenStream stream_CONSTANT=new RewriteRuleTokenStream(adaptor,"token CONSTANT");
        RewriteRuleTokenStream stream_VARIABLE=new RewriteRuleTokenStream(adaptor,"token VARIABLE");

        try {
            // XQueryParser.g:300:9: ({...}? =>ku= CONSTANT -> VarConstantDecl | kv= VARIABLE -> VarVariableDecl )
            int alt28=2;
            int LA28_0 = input.LA(1);

            if ( (LA28_0==CONSTANT) && ((lc(XQS)))) {
                alt28=1;
            }
            else if ( (LA28_0==VARIABLE) ) {
                alt28=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 28, 0, input);

                throw nvae;
            }
            switch (alt28) {
                case 1 :
                    // XQueryParser.g:300:11: {...}? =>ku= CONSTANT
                    {
                    if ( !((lc(XQS))) ) {
                        if (state.backtracking>0) {state.failed=true; return retval;}
                        throw new FailedPredicateException(input, "pg_VarDeclType", "lc(XQS)");
                    }
                    ku=(CommonToken)match(input,CONSTANT,FOLLOW_CONSTANT_in_pg_VarDeclType2698); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_CONSTANT.add(ku);

                    if ( state.backtracking==0 ) {
                      ak(ku);
                    }


                    // AST REWRITE
                    // elements: 
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (XQDTCommonTree)adaptor.nil();
                    // 301:17: -> VarConstantDecl
                    {
                        adaptor.addChild(root_0, (XQDTCommonTree)adaptor.create(VarConstantDecl, "VarConstantDecl"));

                    }

                    retval.tree = root_0;}
                    }
                    break;
                case 2 :
                    // XQueryParser.g:302:11: kv= VARIABLE
                    {
                    kv=(CommonToken)match(input,VARIABLE,FOLLOW_VARIABLE_in_pg_VarDeclType2734); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_VARIABLE.add(kv);

                    if ( state.backtracking==0 ) {
                      ak(kv);
                    }


                    // AST REWRITE
                    // elements: 
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (XQDTCommonTree)adaptor.nil();
                    // 303:17: -> VarVariableDecl
                    {
                        adaptor.addChild(root_0, (XQDTCommonTree)adaptor.create(VarVariableDecl, "VarVariableDecl"));

                    }

                    retval.tree = root_0;}
                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (XQDTCommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (XQDTCommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "pg_VarDeclType"

    public static class pm_ContextItemDecl_return extends ParserRuleReturnScope {
        XQDTCommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "pm_ContextItemDecl"
    // XQueryParser.g:314:1: pm_ContextItemDecl : k+= DECLARE k+= CONTEXT k+= ITEM (k+= AS p_ItemType )? ( ( BIND p_ExprSingle ) | (k+= EXTERNAL ( BIND p_ExprSingle )? ) ) SEMICOLON ;
    public final XQueryParser.pm_ContextItemDecl_return pm_ContextItemDecl() throws RecognitionException {
        XQueryParser.pm_ContextItemDecl_return retval = new XQueryParser.pm_ContextItemDecl_return();
        retval.start = input.LT(1);

        XQDTCommonTree root_0 = null;

        CommonToken BIND62=null;
        CommonToken BIND64=null;
        CommonToken SEMICOLON66=null;
        CommonToken k=null;
        List list_k=null;
        XQueryParser.p_ItemType_return p_ItemType61 = null;

        XQueryParser.p_ExprSingle_return p_ExprSingle63 = null;

        XQueryParser.p_ExprSingle_return p_ExprSingle65 = null;


        XQDTCommonTree BIND62_tree=null;
        XQDTCommonTree BIND64_tree=null;
        XQDTCommonTree SEMICOLON66_tree=null;
        XQDTCommonTree k_tree=null;

        try {
            // XQueryParser.g:315:9: (k+= DECLARE k+= CONTEXT k+= ITEM (k+= AS p_ItemType )? ( ( BIND p_ExprSingle ) | (k+= EXTERNAL ( BIND p_ExprSingle )? ) ) SEMICOLON )
            // XQueryParser.g:315:13: k+= DECLARE k+= CONTEXT k+= ITEM (k+= AS p_ItemType )? ( ( BIND p_ExprSingle ) | (k+= EXTERNAL ( BIND p_ExprSingle )? ) ) SEMICOLON
            {
            root_0 = (XQDTCommonTree)adaptor.nil();

            k=(CommonToken)match(input,DECLARE,FOLLOW_DECLARE_in_pm_ContextItemDecl2793); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            k_tree = (XQDTCommonTree)adaptor.create(k);
            adaptor.addChild(root_0, k_tree);
            }
            if (list_k==null) list_k=new ArrayList();
            list_k.add(k);

            k=(CommonToken)match(input,CONTEXT,FOLLOW_CONTEXT_in_pm_ContextItemDecl2797); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            k_tree = (XQDTCommonTree)adaptor.create(k);
            adaptor.addChild(root_0, k_tree);
            }
            if (list_k==null) list_k=new ArrayList();
            list_k.add(k);

            k=(CommonToken)match(input,ITEM,FOLLOW_ITEM_in_pm_ContextItemDecl2801); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            k_tree = (XQDTCommonTree)adaptor.create(k);
            adaptor.addChild(root_0, k_tree);
            }
            if (list_k==null) list_k=new ArrayList();
            list_k.add(k);

            // XQueryParser.g:315:43: (k+= AS p_ItemType )?
            int alt29=2;
            int LA29_0 = input.LA(1);

            if ( (LA29_0==AS) ) {
                alt29=1;
            }
            switch (alt29) {
                case 1 :
                    // XQueryParser.g:315:44: k+= AS p_ItemType
                    {
                    k=(CommonToken)match(input,AS,FOLLOW_AS_in_pm_ContextItemDecl2806); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    k_tree = (XQDTCommonTree)adaptor.create(k);
                    adaptor.addChild(root_0, k_tree);
                    }
                    if (list_k==null) list_k=new ArrayList();
                    list_k.add(k);

                    pushFollow(FOLLOW_p_ItemType_in_pm_ContextItemDecl2808);
                    p_ItemType61=p_ItemType();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, p_ItemType61.getTree());

                    }
                    break;

            }

            // XQueryParser.g:315:63: ( ( BIND p_ExprSingle ) | (k+= EXTERNAL ( BIND p_ExprSingle )? ) )
            int alt31=2;
            int LA31_0 = input.LA(1);

            if ( (LA31_0==BIND) ) {
                alt31=1;
            }
            else if ( (LA31_0==EXTERNAL) ) {
                alt31=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 31, 0, input);

                throw nvae;
            }
            switch (alt31) {
                case 1 :
                    // XQueryParser.g:315:64: ( BIND p_ExprSingle )
                    {
                    // XQueryParser.g:315:64: ( BIND p_ExprSingle )
                    // XQueryParser.g:315:65: BIND p_ExprSingle
                    {
                    BIND62=(CommonToken)match(input,BIND,FOLLOW_BIND_in_pm_ContextItemDecl2814); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    BIND62_tree = (XQDTCommonTree)adaptor.create(BIND62);
                    adaptor.addChild(root_0, BIND62_tree);
                    }
                    pushFollow(FOLLOW_p_ExprSingle_in_pm_ContextItemDecl2816);
                    p_ExprSingle63=p_ExprSingle();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, p_ExprSingle63.getTree());

                    }


                    }
                    break;
                case 2 :
                    // XQueryParser.g:315:86: (k+= EXTERNAL ( BIND p_ExprSingle )? )
                    {
                    // XQueryParser.g:315:86: (k+= EXTERNAL ( BIND p_ExprSingle )? )
                    // XQueryParser.g:315:87: k+= EXTERNAL ( BIND p_ExprSingle )?
                    {
                    k=(CommonToken)match(input,EXTERNAL,FOLLOW_EXTERNAL_in_pm_ContextItemDecl2824); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    k_tree = (XQDTCommonTree)adaptor.create(k);
                    adaptor.addChild(root_0, k_tree);
                    }
                    if (list_k==null) list_k=new ArrayList();
                    list_k.add(k);

                    // XQueryParser.g:315:99: ( BIND p_ExprSingle )?
                    int alt30=2;
                    int LA30_0 = input.LA(1);

                    if ( (LA30_0==BIND) ) {
                        alt30=1;
                    }
                    switch (alt30) {
                        case 1 :
                            // XQueryParser.g:315:100: BIND p_ExprSingle
                            {
                            BIND64=(CommonToken)match(input,BIND,FOLLOW_BIND_in_pm_ContextItemDecl2827); if (state.failed) return retval;
                            if ( state.backtracking==0 ) {
                            BIND64_tree = (XQDTCommonTree)adaptor.create(BIND64);
                            adaptor.addChild(root_0, BIND64_tree);
                            }
                            pushFollow(FOLLOW_p_ExprSingle_in_pm_ContextItemDecl2829);
                            p_ExprSingle65=p_ExprSingle();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) adaptor.addChild(root_0, p_ExprSingle65.getTree());

                            }
                            break;

                    }


                    }


                    }
                    break;

            }

            SEMICOLON66=(CommonToken)match(input,SEMICOLON,FOLLOW_SEMICOLON_in_pm_ContextItemDecl2835); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            SEMICOLON66_tree = (XQDTCommonTree)adaptor.create(SEMICOLON66);
            adaptor.addChild(root_0, SEMICOLON66_tree);
            }
            if ( state.backtracking==0 ) {
              ak(list_k);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (XQDTCommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (XQDTCommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "pm_ContextItemDecl"

    public static class pm_ConstructionDecl_return extends ParserRuleReturnScope {
        XQDTCommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "pm_ConstructionDecl"
    // XQueryParser.g:322:1: pm_ConstructionDecl : k+= DECLARE k+= CONSTRUCTION (k+= STRIP | k+= PRESERVE ) SEMICOLON ;
    public final XQueryParser.pm_ConstructionDecl_return pm_ConstructionDecl() throws RecognitionException {
        XQueryParser.pm_ConstructionDecl_return retval = new XQueryParser.pm_ConstructionDecl_return();
        retval.start = input.LT(1);

        XQDTCommonTree root_0 = null;

        CommonToken SEMICOLON67=null;
        CommonToken k=null;
        List list_k=null;

        XQDTCommonTree SEMICOLON67_tree=null;
        XQDTCommonTree k_tree=null;

        try {
            // XQueryParser.g:323:9: (k+= DECLARE k+= CONSTRUCTION (k+= STRIP | k+= PRESERVE ) SEMICOLON )
            // XQueryParser.g:323:13: k+= DECLARE k+= CONSTRUCTION (k+= STRIP | k+= PRESERVE ) SEMICOLON
            {
            root_0 = (XQDTCommonTree)adaptor.nil();

            k=(CommonToken)match(input,DECLARE,FOLLOW_DECLARE_in_pm_ConstructionDecl2870); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            k_tree = (XQDTCommonTree)adaptor.create(k);
            adaptor.addChild(root_0, k_tree);
            }
            if (list_k==null) list_k=new ArrayList();
            list_k.add(k);

            k=(CommonToken)match(input,CONSTRUCTION,FOLLOW_CONSTRUCTION_in_pm_ConstructionDecl2874); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            k_tree = (XQDTCommonTree)adaptor.create(k);
            adaptor.addChild(root_0, k_tree);
            }
            if (list_k==null) list_k=new ArrayList();
            list_k.add(k);

            // XQueryParser.g:323:40: (k+= STRIP | k+= PRESERVE )
            int alt32=2;
            int LA32_0 = input.LA(1);

            if ( (LA32_0==STRIP) ) {
                alt32=1;
            }
            else if ( (LA32_0==PRESERVE) ) {
                alt32=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 32, 0, input);

                throw nvae;
            }
            switch (alt32) {
                case 1 :
                    // XQueryParser.g:323:41: k+= STRIP
                    {
                    k=(CommonToken)match(input,STRIP,FOLLOW_STRIP_in_pm_ConstructionDecl2879); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    k_tree = (XQDTCommonTree)adaptor.create(k);
                    adaptor.addChild(root_0, k_tree);
                    }
                    if (list_k==null) list_k=new ArrayList();
                    list_k.add(k);


                    }
                    break;
                case 2 :
                    // XQueryParser.g:323:52: k+= PRESERVE
                    {
                    k=(CommonToken)match(input,PRESERVE,FOLLOW_PRESERVE_in_pm_ConstructionDecl2885); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    k_tree = (XQDTCommonTree)adaptor.create(k);
                    adaptor.addChild(root_0, k_tree);
                    }
                    if (list_k==null) list_k=new ArrayList();
                    list_k.add(k);


                    }
                    break;

            }

            SEMICOLON67=(CommonToken)match(input,SEMICOLON,FOLLOW_SEMICOLON_in_pm_ConstructionDecl2888); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            SEMICOLON67_tree = (XQDTCommonTree)adaptor.create(SEMICOLON67);
            adaptor.addChild(root_0, SEMICOLON67_tree);
            }
            if ( state.backtracking==0 ) {
              ak(list_k);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (XQDTCommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (XQDTCommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "pm_ConstructionDecl"

    public static class pm_FunctionDecl_return extends ParserRuleReturnScope {
        XQDTCommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "pm_FunctionDecl"
    // XQueryParser.g:329:1: pm_FunctionDecl : ({...}? =>k+= DECLARE k+= SEQUENTIAL k+= FUNCTION qn= p_QName LPAREN (pl= p_ParamList )? RPAREN (td= p_TypeDeclaration )? (b= p_Block | k+= EXTERNAL ) SEMICOLON -> ^( FunctionDecl $qn ^( ParamList ( $pl)? ) ^( ReturnType ( $td)? ) ( $b)? ) | k+= DECLARE p_FunctionType k+= FUNCTION qn= p_QName LPAREN (pl= p_ParamList )? RPAREN (td= p_TypeDeclaration )? (ee= p_EnclosedExpr | k+= EXTERNAL ) SEMICOLON -> ^( FunctionDecl $qn ^( ParamList ( $pl)? ) ^( ReturnType ( $td)? ) ( $ee)? ) );
    public final XQueryParser.pm_FunctionDecl_return pm_FunctionDecl() throws RecognitionException {
        XQueryParser.pm_FunctionDecl_return retval = new XQueryParser.pm_FunctionDecl_return();
        retval.start = input.LT(1);

        XQDTCommonTree root_0 = null;

        CommonToken LPAREN68=null;
        CommonToken RPAREN69=null;
        CommonToken SEMICOLON70=null;
        CommonToken LPAREN72=null;
        CommonToken RPAREN73=null;
        CommonToken SEMICOLON74=null;
        CommonToken k=null;
        List list_k=null;
        XQueryParser.p_QName_return qn = null;

        XQueryParser.p_ParamList_return pl = null;

        XQueryParser.p_TypeDeclaration_return td = null;

        XQueryParser.p_Block_return b = null;

        XQueryParser.p_EnclosedExpr_return ee = null;

        XQueryParser.p_FunctionType_return p_FunctionType71 = null;


        XQDTCommonTree LPAREN68_tree=null;
        XQDTCommonTree RPAREN69_tree=null;
        XQDTCommonTree SEMICOLON70_tree=null;
        XQDTCommonTree LPAREN72_tree=null;
        XQDTCommonTree RPAREN73_tree=null;
        XQDTCommonTree SEMICOLON74_tree=null;
        XQDTCommonTree k_tree=null;
        RewriteRuleTokenStream stream_RPAREN=new RewriteRuleTokenStream(adaptor,"token RPAREN");
        RewriteRuleTokenStream stream_LPAREN=new RewriteRuleTokenStream(adaptor,"token LPAREN");
        RewriteRuleTokenStream stream_SEQUENTIAL=new RewriteRuleTokenStream(adaptor,"token SEQUENTIAL");
        RewriteRuleTokenStream stream_FUNCTION=new RewriteRuleTokenStream(adaptor,"token FUNCTION");
        RewriteRuleTokenStream stream_EXTERNAL=new RewriteRuleTokenStream(adaptor,"token EXTERNAL");
        RewriteRuleTokenStream stream_SEMICOLON=new RewriteRuleTokenStream(adaptor,"token SEMICOLON");
        RewriteRuleTokenStream stream_DECLARE=new RewriteRuleTokenStream(adaptor,"token DECLARE");
        RewriteRuleSubtreeStream stream_p_ParamList=new RewriteRuleSubtreeStream(adaptor,"rule p_ParamList");
        RewriteRuleSubtreeStream stream_p_TypeDeclaration=new RewriteRuleSubtreeStream(adaptor,"rule p_TypeDeclaration");
        RewriteRuleSubtreeStream stream_p_Block=new RewriteRuleSubtreeStream(adaptor,"rule p_Block");
        RewriteRuleSubtreeStream stream_p_FunctionType=new RewriteRuleSubtreeStream(adaptor,"rule p_FunctionType");
        RewriteRuleSubtreeStream stream_p_QName=new RewriteRuleSubtreeStream(adaptor,"rule p_QName");
        RewriteRuleSubtreeStream stream_p_EnclosedExpr=new RewriteRuleSubtreeStream(adaptor,"rule p_EnclosedExpr");
        try {
            // XQueryParser.g:330:9: ({...}? =>k+= DECLARE k+= SEQUENTIAL k+= FUNCTION qn= p_QName LPAREN (pl= p_ParamList )? RPAREN (td= p_TypeDeclaration )? (b= p_Block | k+= EXTERNAL ) SEMICOLON -> ^( FunctionDecl $qn ^( ParamList ( $pl)? ) ^( ReturnType ( $td)? ) ( $b)? ) | k+= DECLARE p_FunctionType k+= FUNCTION qn= p_QName LPAREN (pl= p_ParamList )? RPAREN (td= p_TypeDeclaration )? (ee= p_EnclosedExpr | k+= EXTERNAL ) SEMICOLON -> ^( FunctionDecl $qn ^( ParamList ( $pl)? ) ^( ReturnType ( $td)? ) ( $ee)? ) )
            int alt39=2;
            int LA39_0 = input.LA(1);

            if ( (LA39_0==DECLARE) ) {
                int LA39_1 = input.LA(2);

                if ( (LA39_1==SEQUENTIAL) && ((lc(XQS)))) {
                    alt39=1;
                }
                else if ( (LA39_1==FUNCTION||LA39_1==UPDATING||LA39_1==SIMPLE) ) {
                    alt39=2;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 39, 1, input);

                    throw nvae;
                }
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 39, 0, input);

                throw nvae;
            }
            switch (alt39) {
                case 1 :
                    // XQueryParser.g:330:13: {...}? =>k+= DECLARE k+= SEQUENTIAL k+= FUNCTION qn= p_QName LPAREN (pl= p_ParamList )? RPAREN (td= p_TypeDeclaration )? (b= p_Block | k+= EXTERNAL ) SEMICOLON
                    {
                    if ( !((lc(XQS))) ) {
                        if (state.backtracking>0) {state.failed=true; return retval;}
                        throw new FailedPredicateException(input, "pm_FunctionDecl", "lc(XQS)");
                    }
                    k=(CommonToken)match(input,DECLARE,FOLLOW_DECLARE_in_pm_FunctionDecl2925); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_DECLARE.add(k);

                    if (list_k==null) list_k=new ArrayList();
                    list_k.add(k);

                    k=(CommonToken)match(input,SEQUENTIAL,FOLLOW_SEQUENTIAL_in_pm_FunctionDecl2929); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_SEQUENTIAL.add(k);

                    if (list_k==null) list_k=new ArrayList();
                    list_k.add(k);

                    k=(CommonToken)match(input,FUNCTION,FOLLOW_FUNCTION_in_pm_FunctionDecl2933); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_FUNCTION.add(k);

                    if (list_k==null) list_k=new ArrayList();
                    list_k.add(k);

                    pushFollow(FOLLOW_p_QName_in_pm_FunctionDecl2937);
                    qn=p_QName();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_p_QName.add(qn.getTree());
                    LPAREN68=(CommonToken)match(input,LPAREN,FOLLOW_LPAREN_in_pm_FunctionDecl2939); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_LPAREN.add(LPAREN68);

                    // XQueryParser.g:330:83: (pl= p_ParamList )?
                    int alt33=2;
                    int LA33_0 = input.LA(1);

                    if ( (LA33_0==DOLLAR) ) {
                        alt33=1;
                    }
                    switch (alt33) {
                        case 1 :
                            // XQueryParser.g:330:83: pl= p_ParamList
                            {
                            pushFollow(FOLLOW_p_ParamList_in_pm_FunctionDecl2943);
                            pl=p_ParamList();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_p_ParamList.add(pl.getTree());

                            }
                            break;

                    }

                    RPAREN69=(CommonToken)match(input,RPAREN,FOLLOW_RPAREN_in_pm_FunctionDecl2946); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_RPAREN.add(RPAREN69);

                    // XQueryParser.g:330:106: (td= p_TypeDeclaration )?
                    int alt34=2;
                    int LA34_0 = input.LA(1);

                    if ( (LA34_0==AS) ) {
                        alt34=1;
                    }
                    switch (alt34) {
                        case 1 :
                            // XQueryParser.g:330:106: td= p_TypeDeclaration
                            {
                            pushFollow(FOLLOW_p_TypeDeclaration_in_pm_FunctionDecl2950);
                            td=p_TypeDeclaration();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_p_TypeDeclaration.add(td.getTree());

                            }
                            break;

                    }

                    // XQueryParser.g:330:126: (b= p_Block | k+= EXTERNAL )
                    int alt35=2;
                    int LA35_0 = input.LA(1);

                    if ( (LA35_0==LBRACKET) ) {
                        alt35=1;
                    }
                    else if ( (LA35_0==EXTERNAL) ) {
                        alt35=2;
                    }
                    else {
                        if (state.backtracking>0) {state.failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("", 35, 0, input);

                        throw nvae;
                    }
                    switch (alt35) {
                        case 1 :
                            // XQueryParser.g:330:127: b= p_Block
                            {
                            pushFollow(FOLLOW_p_Block_in_pm_FunctionDecl2956);
                            b=p_Block();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_p_Block.add(b.getTree());

                            }
                            break;
                        case 2 :
                            // XQueryParser.g:330:139: k+= EXTERNAL
                            {
                            k=(CommonToken)match(input,EXTERNAL,FOLLOW_EXTERNAL_in_pm_FunctionDecl2962); if (state.failed) return retval; 
                            if ( state.backtracking==0 ) stream_EXTERNAL.add(k);

                            if (list_k==null) list_k=new ArrayList();
                            list_k.add(k);


                            }
                            break;

                    }

                    SEMICOLON70=(CommonToken)match(input,SEMICOLON,FOLLOW_SEMICOLON_in_pm_FunctionDecl2965); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_SEMICOLON.add(SEMICOLON70);

                    if ( state.backtracking==0 ) {
                      ak(list_k);
                    }


                    // AST REWRITE
                    // elements: qn, td, b, pl
                    // token labels: 
                    // rule labels: pl, td, qn, retval, b
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_pl=new RewriteRuleSubtreeStream(adaptor,"rule pl",pl!=null?pl.tree:null);
                    RewriteRuleSubtreeStream stream_td=new RewriteRuleSubtreeStream(adaptor,"rule td",td!=null?td.tree:null);
                    RewriteRuleSubtreeStream stream_qn=new RewriteRuleSubtreeStream(adaptor,"rule qn",qn!=null?qn.tree:null);
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
                    RewriteRuleSubtreeStream stream_b=new RewriteRuleSubtreeStream(adaptor,"rule b",b!=null?b.tree:null);

                    root_0 = (XQDTCommonTree)adaptor.nil();
                    // 331:17: -> ^( FunctionDecl $qn ^( ParamList ( $pl)? ) ^( ReturnType ( $td)? ) ( $b)? )
                    {
                        // XQueryParser.g:331:20: ^( FunctionDecl $qn ^( ParamList ( $pl)? ) ^( ReturnType ( $td)? ) ( $b)? )
                        {
                        XQDTCommonTree root_1 = (XQDTCommonTree)adaptor.nil();
                        root_1 = (XQDTCommonTree)adaptor.becomeRoot((XQDTCommonTree)adaptor.create(FunctionDecl, "FunctionDecl"), root_1);

                        adaptor.addChild(root_1, stream_qn.nextTree());
                        // XQueryParser.g:331:39: ^( ParamList ( $pl)? )
                        {
                        XQDTCommonTree root_2 = (XQDTCommonTree)adaptor.nil();
                        root_2 = (XQDTCommonTree)adaptor.becomeRoot((XQDTCommonTree)adaptor.create(ParamList, "ParamList"), root_2);

                        // XQueryParser.g:331:51: ( $pl)?
                        if ( stream_pl.hasNext() ) {
                            adaptor.addChild(root_2, stream_pl.nextTree());

                        }
                        stream_pl.reset();

                        adaptor.addChild(root_1, root_2);
                        }
                        // XQueryParser.g:331:57: ^( ReturnType ( $td)? )
                        {
                        XQDTCommonTree root_2 = (XQDTCommonTree)adaptor.nil();
                        root_2 = (XQDTCommonTree)adaptor.becomeRoot((XQDTCommonTree)adaptor.create(ReturnType, "ReturnType"), root_2);

                        // XQueryParser.g:331:70: ( $td)?
                        if ( stream_td.hasNext() ) {
                            adaptor.addChild(root_2, stream_td.nextTree());

                        }
                        stream_td.reset();

                        adaptor.addChild(root_1, root_2);
                        }
                        // XQueryParser.g:331:76: ( $b)?
                        if ( stream_b.hasNext() ) {
                            adaptor.addChild(root_1, stream_b.nextTree());

                        }
                        stream_b.reset();

                        adaptor.addChild(root_0, root_1);
                        }

                    }

                    retval.tree = root_0;}
                    }
                    break;
                case 2 :
                    // XQueryParser.g:332:13: k+= DECLARE p_FunctionType k+= FUNCTION qn= p_QName LPAREN (pl= p_ParamList )? RPAREN (td= p_TypeDeclaration )? (ee= p_EnclosedExpr | k+= EXTERNAL ) SEMICOLON
                    {
                    k=(CommonToken)match(input,DECLARE,FOLLOW_DECLARE_in_pm_FunctionDecl3028); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_DECLARE.add(k);

                    if (list_k==null) list_k=new ArrayList();
                    list_k.add(k);

                    pushFollow(FOLLOW_p_FunctionType_in_pm_FunctionDecl3030);
                    p_FunctionType71=p_FunctionType();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_p_FunctionType.add(p_FunctionType71.getTree());
                    k=(CommonToken)match(input,FUNCTION,FOLLOW_FUNCTION_in_pm_FunctionDecl3034); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_FUNCTION.add(k);

                    if (list_k==null) list_k=new ArrayList();
                    list_k.add(k);

                    pushFollow(FOLLOW_p_QName_in_pm_FunctionDecl3038);
                    qn=p_QName();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_p_QName.add(qn.getTree());
                    LPAREN72=(CommonToken)match(input,LPAREN,FOLLOW_LPAREN_in_pm_FunctionDecl3040); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_LPAREN.add(LPAREN72);

                    // XQueryParser.g:332:71: (pl= p_ParamList )?
                    int alt36=2;
                    int LA36_0 = input.LA(1);

                    if ( (LA36_0==DOLLAR) ) {
                        alt36=1;
                    }
                    switch (alt36) {
                        case 1 :
                            // XQueryParser.g:332:71: pl= p_ParamList
                            {
                            pushFollow(FOLLOW_p_ParamList_in_pm_FunctionDecl3044);
                            pl=p_ParamList();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_p_ParamList.add(pl.getTree());

                            }
                            break;

                    }

                    RPAREN73=(CommonToken)match(input,RPAREN,FOLLOW_RPAREN_in_pm_FunctionDecl3047); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_RPAREN.add(RPAREN73);

                    // XQueryParser.g:332:94: (td= p_TypeDeclaration )?
                    int alt37=2;
                    int LA37_0 = input.LA(1);

                    if ( (LA37_0==AS) ) {
                        alt37=1;
                    }
                    switch (alt37) {
                        case 1 :
                            // XQueryParser.g:332:94: td= p_TypeDeclaration
                            {
                            pushFollow(FOLLOW_p_TypeDeclaration_in_pm_FunctionDecl3051);
                            td=p_TypeDeclaration();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_p_TypeDeclaration.add(td.getTree());

                            }
                            break;

                    }

                    // XQueryParser.g:332:114: (ee= p_EnclosedExpr | k+= EXTERNAL )
                    int alt38=2;
                    int LA38_0 = input.LA(1);

                    if ( (LA38_0==LBRACKET) ) {
                        alt38=1;
                    }
                    else if ( (LA38_0==EXTERNAL) ) {
                        alt38=2;
                    }
                    else {
                        if (state.backtracking>0) {state.failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("", 38, 0, input);

                        throw nvae;
                    }
                    switch (alt38) {
                        case 1 :
                            // XQueryParser.g:332:115: ee= p_EnclosedExpr
                            {
                            pushFollow(FOLLOW_p_EnclosedExpr_in_pm_FunctionDecl3057);
                            ee=p_EnclosedExpr();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_p_EnclosedExpr.add(ee.getTree());

                            }
                            break;
                        case 2 :
                            // XQueryParser.g:332:135: k+= EXTERNAL
                            {
                            k=(CommonToken)match(input,EXTERNAL,FOLLOW_EXTERNAL_in_pm_FunctionDecl3063); if (state.failed) return retval; 
                            if ( state.backtracking==0 ) stream_EXTERNAL.add(k);

                            if (list_k==null) list_k=new ArrayList();
                            list_k.add(k);


                            }
                            break;

                    }

                    SEMICOLON74=(CommonToken)match(input,SEMICOLON,FOLLOW_SEMICOLON_in_pm_FunctionDecl3066); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_SEMICOLON.add(SEMICOLON74);

                    if ( state.backtracking==0 ) {
                      ak(list_k);
                    }


                    // AST REWRITE
                    // elements: ee, pl, qn, td
                    // token labels: 
                    // rule labels: td, pl, ee, qn, retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_td=new RewriteRuleSubtreeStream(adaptor,"rule td",td!=null?td.tree:null);
                    RewriteRuleSubtreeStream stream_pl=new RewriteRuleSubtreeStream(adaptor,"rule pl",pl!=null?pl.tree:null);
                    RewriteRuleSubtreeStream stream_ee=new RewriteRuleSubtreeStream(adaptor,"rule ee",ee!=null?ee.tree:null);
                    RewriteRuleSubtreeStream stream_qn=new RewriteRuleSubtreeStream(adaptor,"rule qn",qn!=null?qn.tree:null);
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (XQDTCommonTree)adaptor.nil();
                    // 333:17: -> ^( FunctionDecl $qn ^( ParamList ( $pl)? ) ^( ReturnType ( $td)? ) ( $ee)? )
                    {
                        // XQueryParser.g:333:20: ^( FunctionDecl $qn ^( ParamList ( $pl)? ) ^( ReturnType ( $td)? ) ( $ee)? )
                        {
                        XQDTCommonTree root_1 = (XQDTCommonTree)adaptor.nil();
                        root_1 = (XQDTCommonTree)adaptor.becomeRoot((XQDTCommonTree)adaptor.create(FunctionDecl, "FunctionDecl"), root_1);

                        adaptor.addChild(root_1, stream_qn.nextTree());
                        // XQueryParser.g:333:39: ^( ParamList ( $pl)? )
                        {
                        XQDTCommonTree root_2 = (XQDTCommonTree)adaptor.nil();
                        root_2 = (XQDTCommonTree)adaptor.becomeRoot((XQDTCommonTree)adaptor.create(ParamList, "ParamList"), root_2);

                        // XQueryParser.g:333:51: ( $pl)?
                        if ( stream_pl.hasNext() ) {
                            adaptor.addChild(root_2, stream_pl.nextTree());

                        }
                        stream_pl.reset();

                        adaptor.addChild(root_1, root_2);
                        }
                        // XQueryParser.g:333:57: ^( ReturnType ( $td)? )
                        {
                        XQDTCommonTree root_2 = (XQDTCommonTree)adaptor.nil();
                        root_2 = (XQDTCommonTree)adaptor.becomeRoot((XQDTCommonTree)adaptor.create(ReturnType, "ReturnType"), root_2);

                        // XQueryParser.g:333:70: ( $td)?
                        if ( stream_td.hasNext() ) {
                            adaptor.addChild(root_2, stream_td.nextTree());

                        }
                        stream_td.reset();

                        adaptor.addChild(root_1, root_2);
                        }
                        // XQueryParser.g:333:76: ( $ee)?
                        if ( stream_ee.hasNext() ) {
                            adaptor.addChild(root_1, stream_ee.nextTree());

                        }
                        stream_ee.reset();

                        adaptor.addChild(root_0, root_1);
                        }

                    }

                    retval.tree = root_0;}
                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (XQDTCommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (XQDTCommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "pm_FunctionDecl"

    public static class p_FunctionType_return extends ParserRuleReturnScope {
        XQDTCommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "p_FunctionType"
    // XQueryParser.g:340:1: p_FunctionType : ({...}? =>ku= UPDATING | {...}? =>ks= SIMPLE | );
    public final XQueryParser.p_FunctionType_return p_FunctionType() throws RecognitionException {
        XQueryParser.p_FunctionType_return retval = new XQueryParser.p_FunctionType_return();
        retval.start = input.LT(1);

        XQDTCommonTree root_0 = null;

        CommonToken ku=null;
        CommonToken ks=null;

        XQDTCommonTree ku_tree=null;
        XQDTCommonTree ks_tree=null;

        try {
            // XQueryParser.g:341:9: ({...}? =>ku= UPDATING | {...}? =>ks= SIMPLE | )
            int alt40=3;
            int LA40_0 = input.LA(1);

            if ( (LA40_0==UPDATING) && ((lc(XQU)))) {
                alt40=1;
            }
            else if ( (LA40_0==SIMPLE) && ((lc(XQS)))) {
                alt40=2;
            }
            else if ( (LA40_0==FUNCTION) ) {
                alt40=3;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 40, 0, input);

                throw nvae;
            }
            switch (alt40) {
                case 1 :
                    // XQueryParser.g:341:11: {...}? =>ku= UPDATING
                    {
                    root_0 = (XQDTCommonTree)adaptor.nil();

                    if ( !((lc(XQU))) ) {
                        if (state.backtracking>0) {state.failed=true; return retval;}
                        throw new FailedPredicateException(input, "p_FunctionType", "lc(XQU)");
                    }
                    ku=(CommonToken)match(input,UPDATING,FOLLOW_UPDATING_in_p_FunctionType3147); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    ku_tree = (XQDTCommonTree)adaptor.create(ku);
                    adaptor.addChild(root_0, ku_tree);
                    }
                    if ( state.backtracking==0 ) {
                      ak(ku);
                    }

                    }
                    break;
                case 2 :
                    // XQueryParser.g:342:11: {...}? =>ks= SIMPLE
                    {
                    root_0 = (XQDTCommonTree)adaptor.nil();

                    if ( !((lc(XQS))) ) {
                        if (state.backtracking>0) {state.failed=true; return retval;}
                        throw new FailedPredicateException(input, "p_FunctionType", "lc(XQS)");
                    }
                    ks=(CommonToken)match(input,SIMPLE,FOLLOW_SIMPLE_in_p_FunctionType3166); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    ks_tree = (XQDTCommonTree)adaptor.create(ks);
                    adaptor.addChild(root_0, ks_tree);
                    }
                    if ( state.backtracking==0 ) {
                      ak(ks);
                    }

                    }
                    break;
                case 3 :
                    // XQueryParser.g:344:9: 
                    {
                    root_0 = (XQDTCommonTree)adaptor.nil();

                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (XQDTCommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (XQDTCommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "p_FunctionType"

    public static class p_ParamList_return extends ParserRuleReturnScope {
        XQDTCommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "p_ParamList"
    // XQueryParser.g:351:1: p_ParamList : p+= p_Param ( COMMA p+= p_Param )* -> ( $p)+ ;
    public final XQueryParser.p_ParamList_return p_ParamList() throws RecognitionException {
        XQueryParser.p_ParamList_return retval = new XQueryParser.p_ParamList_return();
        retval.start = input.LT(1);

        XQDTCommonTree root_0 = null;

        CommonToken COMMA75=null;
        List list_p=null;
        XQueryParser.p_Param_return p = null;
         p = null;
        XQDTCommonTree COMMA75_tree=null;
        RewriteRuleTokenStream stream_COMMA=new RewriteRuleTokenStream(adaptor,"token COMMA");
        RewriteRuleSubtreeStream stream_p_Param=new RewriteRuleSubtreeStream(adaptor,"rule p_Param");
        try {
            // XQueryParser.g:352:9: (p+= p_Param ( COMMA p+= p_Param )* -> ( $p)+ )
            // XQueryParser.g:352:11: p+= p_Param ( COMMA p+= p_Param )*
            {
            pushFollow(FOLLOW_p_Param_in_p_ParamList3212);
            p=p_Param();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_p_Param.add(p.getTree());
            if (list_p==null) list_p=new ArrayList();
            list_p.add(p.getTree());

            // XQueryParser.g:352:22: ( COMMA p+= p_Param )*
            loop41:
            do {
                int alt41=2;
                int LA41_0 = input.LA(1);

                if ( (LA41_0==COMMA) ) {
                    alt41=1;
                }


                switch (alt41) {
            	case 1 :
            	    // XQueryParser.g:352:23: COMMA p+= p_Param
            	    {
            	    COMMA75=(CommonToken)match(input,COMMA,FOLLOW_COMMA_in_p_ParamList3215); if (state.failed) return retval; 
            	    if ( state.backtracking==0 ) stream_COMMA.add(COMMA75);

            	    pushFollow(FOLLOW_p_Param_in_p_ParamList3219);
            	    p=p_Param();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) stream_p_Param.add(p.getTree());
            	    if (list_p==null) list_p=new ArrayList();
            	    list_p.add(p.getTree());


            	    }
            	    break;

            	default :
            	    break loop41;
                }
            } while (true);



            // AST REWRITE
            // elements: p
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: p
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
            RewriteRuleSubtreeStream stream_p=new RewriteRuleSubtreeStream(adaptor,"token p",list_p);
            root_0 = (XQDTCommonTree)adaptor.nil();
            // 353:17: -> ( $p)+
            {
                if ( !(stream_p.hasNext()) ) {
                    throw new RewriteEarlyExitException();
                }
                while ( stream_p.hasNext() ) {
                    adaptor.addChild(root_0, stream_p.nextTree());

                }
                stream_p.reset();

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (XQDTCommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (XQDTCommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "p_ParamList"

    public static class p_Param_return extends ParserRuleReturnScope {
        XQDTCommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "p_Param"
    // XQueryParser.g:357:1: p_Param : DOLLAR qn= p_QName (td= p_TypeDeclaration )? -> ^( Param $qn ( $td)? ) ;
    public final XQueryParser.p_Param_return p_Param() throws RecognitionException {
        XQueryParser.p_Param_return retval = new XQueryParser.p_Param_return();
        retval.start = input.LT(1);

        XQDTCommonTree root_0 = null;

        CommonToken DOLLAR76=null;
        XQueryParser.p_QName_return qn = null;

        XQueryParser.p_TypeDeclaration_return td = null;


        XQDTCommonTree DOLLAR76_tree=null;
        RewriteRuleTokenStream stream_DOLLAR=new RewriteRuleTokenStream(adaptor,"token DOLLAR");
        RewriteRuleSubtreeStream stream_p_TypeDeclaration=new RewriteRuleSubtreeStream(adaptor,"rule p_TypeDeclaration");
        RewriteRuleSubtreeStream stream_p_QName=new RewriteRuleSubtreeStream(adaptor,"rule p_QName");
        try {
            // XQueryParser.g:358:9: ( DOLLAR qn= p_QName (td= p_TypeDeclaration )? -> ^( Param $qn ( $td)? ) )
            // XQueryParser.g:358:11: DOLLAR qn= p_QName (td= p_TypeDeclaration )?
            {
            DOLLAR76=(CommonToken)match(input,DOLLAR,FOLLOW_DOLLAR_in_p_Param3277); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_DOLLAR.add(DOLLAR76);

            pushFollow(FOLLOW_p_QName_in_p_Param3281);
            qn=p_QName();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_p_QName.add(qn.getTree());
            // XQueryParser.g:358:31: (td= p_TypeDeclaration )?
            int alt42=2;
            int LA42_0 = input.LA(1);

            if ( (LA42_0==AS) ) {
                alt42=1;
            }
            switch (alt42) {
                case 1 :
                    // XQueryParser.g:358:31: td= p_TypeDeclaration
                    {
                    pushFollow(FOLLOW_p_TypeDeclaration_in_p_Param3285);
                    td=p_TypeDeclaration();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_p_TypeDeclaration.add(td.getTree());

                    }
                    break;

            }



            // AST REWRITE
            // elements: qn, td
            // token labels: 
            // rule labels: td, qn, retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_td=new RewriteRuleSubtreeStream(adaptor,"rule td",td!=null?td.tree:null);
            RewriteRuleSubtreeStream stream_qn=new RewriteRuleSubtreeStream(adaptor,"rule qn",qn!=null?qn.tree:null);
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (XQDTCommonTree)adaptor.nil();
            // 359:17: -> ^( Param $qn ( $td)? )
            {
                // XQueryParser.g:359:20: ^( Param $qn ( $td)? )
                {
                XQDTCommonTree root_1 = (XQDTCommonTree)adaptor.nil();
                root_1 = (XQDTCommonTree)adaptor.becomeRoot((XQDTCommonTree)adaptor.create(Param, "Param"), root_1);

                adaptor.addChild(root_1, stream_qn.nextTree());
                // XQueryParser.g:359:32: ( $td)?
                if ( stream_td.hasNext() ) {
                    adaptor.addChild(root_1, stream_td.nextTree());

                }
                stream_td.reset();

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (XQDTCommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (XQDTCommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "p_Param"

    public static class p_EnclosedExpr_return extends ParserRuleReturnScope {
        XQDTCommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "p_EnclosedExpr"
    // XQueryParser.g:363:1: p_EnclosedExpr : LBRACKET pm_Expr RBRACKET -> ^( EnclosedExpr pm_Expr ) ;
    public final XQueryParser.p_EnclosedExpr_return p_EnclosedExpr() throws RecognitionException {
        XQueryParser.p_EnclosedExpr_return retval = new XQueryParser.p_EnclosedExpr_return();
        retval.start = input.LT(1);

        XQDTCommonTree root_0 = null;

        CommonToken LBRACKET77=null;
        CommonToken RBRACKET79=null;
        XQueryParser.pm_Expr_return pm_Expr78 = null;


        XQDTCommonTree LBRACKET77_tree=null;
        XQDTCommonTree RBRACKET79_tree=null;
        RewriteRuleTokenStream stream_LBRACKET=new RewriteRuleTokenStream(adaptor,"token LBRACKET");
        RewriteRuleTokenStream stream_RBRACKET=new RewriteRuleTokenStream(adaptor,"token RBRACKET");
        RewriteRuleSubtreeStream stream_pm_Expr=new RewriteRuleSubtreeStream(adaptor,"rule pm_Expr");
        try {
            // XQueryParser.g:364:9: ( LBRACKET pm_Expr RBRACKET -> ^( EnclosedExpr pm_Expr ) )
            // XQueryParser.g:364:11: LBRACKET pm_Expr RBRACKET
            {
            LBRACKET77=(CommonToken)match(input,LBRACKET,FOLLOW_LBRACKET_in_p_EnclosedExpr3341); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_LBRACKET.add(LBRACKET77);

            pushFollow(FOLLOW_pm_Expr_in_p_EnclosedExpr3343);
            pm_Expr78=pm_Expr();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_pm_Expr.add(pm_Expr78.getTree());
            RBRACKET79=(CommonToken)match(input,RBRACKET,FOLLOW_RBRACKET_in_p_EnclosedExpr3345); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_RBRACKET.add(RBRACKET79);



            // AST REWRITE
            // elements: pm_Expr
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (XQDTCommonTree)adaptor.nil();
            // 365:17: -> ^( EnclosedExpr pm_Expr )
            {
                // XQueryParser.g:365:20: ^( EnclosedExpr pm_Expr )
                {
                XQDTCommonTree root_1 = (XQDTCommonTree)adaptor.nil();
                root_1 = (XQDTCommonTree)adaptor.becomeRoot((XQDTCommonTree)adaptor.create(EnclosedExpr, "EnclosedExpr"), root_1);

                adaptor.addChild(root_1, stream_pm_Expr.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (XQDTCommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (XQDTCommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "p_EnclosedExpr"

    public static class p_QueryBody_return extends ParserRuleReturnScope {
        XQDTCommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "p_QueryBody"
    // XQueryParser.g:369:1: p_QueryBody : pm_Expr -> ^( QueryBody pm_Expr ) ;
    public final XQueryParser.p_QueryBody_return p_QueryBody() throws RecognitionException {
        XQueryParser.p_QueryBody_return retval = new XQueryParser.p_QueryBody_return();
        retval.start = input.LT(1);

        XQDTCommonTree root_0 = null;

        XQueryParser.pm_Expr_return pm_Expr80 = null;


        RewriteRuleSubtreeStream stream_pm_Expr=new RewriteRuleSubtreeStream(adaptor,"rule pm_Expr");
        try {
            // XQueryParser.g:370:9: ( pm_Expr -> ^( QueryBody pm_Expr ) )
            // XQueryParser.g:370:11: pm_Expr
            {
            pushFollow(FOLLOW_pm_Expr_in_p_QueryBody3395);
            pm_Expr80=pm_Expr();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_pm_Expr.add(pm_Expr80.getTree());


            // AST REWRITE
            // elements: pm_Expr
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (XQDTCommonTree)adaptor.nil();
            // 371:17: -> ^( QueryBody pm_Expr )
            {
                // XQueryParser.g:371:20: ^( QueryBody pm_Expr )
                {
                XQDTCommonTree root_1 = (XQDTCommonTree)adaptor.nil();
                root_1 = (XQDTCommonTree)adaptor.becomeRoot((XQDTCommonTree)adaptor.create(QueryBody, "QueryBody"), root_1);

                adaptor.addChild(root_1, stream_pm_Expr.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (XQDTCommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (XQDTCommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "p_QueryBody"

    public static class pm_Expr_return extends ParserRuleReturnScope {
        XQDTCommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "pm_Expr"
    // XQueryParser.g:376:1: pm_Expr : p_ConcatExpr ({...}? => ( SEMICOLON ( pm_ApplyExpr )* )? | ) ({...}? => ( SEMICOLON p_ConcatExpr )+ | ) ;
    public final XQueryParser.pm_Expr_return pm_Expr() throws RecognitionException {
        XQueryParser.pm_Expr_return retval = new XQueryParser.pm_Expr_return();
        retval.start = input.LT(1);

        XQDTCommonTree root_0 = null;

        CommonToken SEMICOLON82=null;
        CommonToken SEMICOLON84=null;
        XQueryParser.p_ConcatExpr_return p_ConcatExpr81 = null;

        XQueryParser.pm_ApplyExpr_return pm_ApplyExpr83 = null;

        XQueryParser.p_ConcatExpr_return p_ConcatExpr85 = null;


        XQDTCommonTree SEMICOLON82_tree=null;
        XQDTCommonTree SEMICOLON84_tree=null;

        try {
            // XQueryParser.g:377:9: ( p_ConcatExpr ({...}? => ( SEMICOLON ( pm_ApplyExpr )* )? | ) ({...}? => ( SEMICOLON p_ConcatExpr )+ | ) )
            // XQueryParser.g:377:11: p_ConcatExpr ({...}? => ( SEMICOLON ( pm_ApplyExpr )* )? | ) ({...}? => ( SEMICOLON p_ConcatExpr )+ | )
            {
            root_0 = (XQDTCommonTree)adaptor.nil();

            pushFollow(FOLLOW_p_ConcatExpr_in_pm_Expr3446);
            p_ConcatExpr81=p_ConcatExpr();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, p_ConcatExpr81.getTree());
            // XQueryParser.g:377:24: ({...}? => ( SEMICOLON ( pm_ApplyExpr )* )? | )
            int alt45=2;
            int LA45_0 = input.LA(1);

            if ( (LA45_0==SEMICOLON) && ((((lc(XQS))&&(lc(MLS)))||((lc(XQS))&&(lc(MLS)))||((lc(XQS))&&(lc(MLS)))||((lc(XQS))&&(lc(MLS)))||((lc(XQS))&&(lc(MLS)))||((lc(XQS))&&(lc(MLS)))||((lc(XQS))&&(lc(MLS)))||((lc(XQS))&&(lc(MLS)))||((lc(XQS))&&(lc(MLS)))||((lc(XQS))&&(lc(MLS)))||((lc(XQS))&&(lc(MLS)))||((lc(XQS))&&(lc(MLS)))||((lc(XQS))&&(lc(MLS)))||((lc(XQS))&&(lc(MLS)))||((lc(XQS))&&(lc(MLS)))||((lc(XQS))&&(lc(MLS)))||((lc(XQS))&&(lc(MLS)))||((lc(XQS))&&(lc(MLS)))||((lc(XQS))&&(lc(MLS)))||((lc(XQS))&&(lc(MLS)))||((lc(XQS))&&(lc(MLS)))||((lc(XQS))&&(lc(MLS)))||((lc(XQS))&&(lc(MLS)))||((lc(XQS))&&(lc(MLS)))||((lc(XQS))&&(lc(MLS)))||((lc(XQS))&&(lc(MLS)))||((lc(XQS))&&(lc(MLS)))||((lc(XQS))&&(lc(MLS)))||((lc(XQS))&&(lc(MLS)))||((lc(XQS))&&(lc(MLS)))||((lc(XQS))&&(lc(MLS)))||((lc(XQS))&&(lc(MLS)))||((lc(XQS))&&(lc(MLS)))||((lc(XQS))&&(lc(MLS)))||((lc(XQS))&&(lc(MLS)))||((lc(XQS))&&(lc(MLS)))||((lc(XQS))&&(lc(MLS)))||((lc(XQS))&&(lc(MLS)))||((lc(XQS))&&(lc(MLS)))||((lc(XQS))&&(lc(MLS)))||((lc(XQS))&&(lc(MLS)))||((lc(XQS))&&(lc(MLS)))||((lc(XQS))&&(lc(MLS)))||((lc(XQS))&&(lc(MLS)))||((lc(XQS))&&(lc(MLS)))||((lc(XQS))&&(lc(MLS)))||((lc(XQS))&&(lc(MLS)))||((lc(XQS))&&(lc(MLS)))||((lc(XQS))&&(lc(MLS)))||((lc(XQS))&&(lc(MLS)))||((lc(XQS))&&(lc(MLS)))||((lc(XQS))&&(lc(MLS)))||((lc(XQS))&&(lc(MLS)))||((lc(XQS))&&(lc(MLS)))||((lc(XQS))&&(lc(MLS)))||((lc(XQS))&&(lc(MLS)))||((lc(XQS))&&(lc(MLS)))||((lc(XQS))&&(lc(MLS)))||((lc(XQS))&&(lc(MLS)))||((lc(XQS))&&(lc(MLS)))||((lc(XQS))&&(lc(MLS)))||((lc(XQS))&&(lc(MLS)))||((lc(XQS))&&(lc(MLS)))||((lc(XQS))&&(lc(MLS)))||((lc(XQS))&&(lc(MLS)))||((lc(XQS))&&(lc(MLS)))||((lc(XQS))&&(lc(MLS)))||((lc(XQS))&&(lc(MLS)))||((lc(XQS))&&(lc(MLS)))||((lc(XQS))&&(lc(MLS)))||((lc(XQS))&&(lc(MLS)))||((lc(XQS))&&(lc(MLS)))||((lc(XQS))&&(lc(MLS)))||((lc(XQS))&&(lc(MLS)))||((lc(XQS))&&(lc(MLS)))||((lc(XQS))&&(lc(MLS)))||((lc(XQS))&&(lc(MLS)))||((lc(XQS))&&(lc(MLS)))||((lc(XQS))&&(lc(MLS)))||((lc(XQS))&&(lc(MLS)))||((lc(XQS))&&(lc(MLS)))||((lc(XQS))&&(lc(MLS)))||((lc(XQS))&&(lc(MLS)))||((lc(XQS))&&(lc(MLS)))||((lc(XQS))&&(lc(MLS)))||((lc(XQS))&&(lc(MLS)))||((lc(XQS))&&(lc(MLS)))||((lc(XQS))&&(lc(MLS)))||((lc(XQS))&&(lc(MLS)))||((lc(XQS))&&(lc(MLS)))||((lc(XQS))&&(lc(MLS)))||((lc(XQS))&&(lc(MLS)))||((lc(XQS))&&(lc(MLS)))||((lc(XQS))&&(lc(MLS)))||((lc(XQS))&&(lc(MLS)))||((lc(XQS))&&(lc(MLS)))||((lc(XQS))&&(lc(MLS)))||((lc(XQS))&&(lc(MLS)))||((lc(XQS))&&(lc(MLS)))||((lc(XQS))&&(lc(MLS)))||((lc(XQS))&&(lc(MLS)))||((lc(XQS))&&(lc(MLS)))||((lc(XQS))&&(lc(MLS)))||((lc(XQS))&&(lc(MLS)))||((lc(XQS))&&(lc(MLS)))||((lc(XQS))&&(lc(MLS)))||((lc(XQS))&&(lc(MLS)))||((lc(XQS))&&(lc(MLS)))||((lc(XQS))&&(lc(MLS)))||((lc(XQS))&&(lc(MLS)))||((lc(XQS))&&(lc(MLS)))||((lc(XQS))&&(lc(MLS)))||((lc(XQS))&&(lc(MLS)))||((lc(XQS))&&(lc(MLS)))||((lc(XQS))&&(lc(MLS)))||((lc(XQS))&&(lc(MLS)))||((lc(XQS))&&(lc(MLS)))||((lc(XQS))&&(lc(MLS)))||((lc(XQS))&&(lc(MLS)))||((lc(XQS))&&(lc(MLS)))||((lc(XQS))&&(lc(MLS)))||((lc(XQS))&&(lc(MLS)))||((lc(XQS))&&(lc(MLS)))||((lc(XQS))&&(lc(MLS)))||((lc(XQS))&&(lc(MLS)))||((lc(XQS))&&(lc(MLS)))||((lc(XQS))&&(lc(MLS)))||((lc(XQS))&&(lc(MLS)))||((lc(XQS))&&(lc(MLS)))||((lc(XQS))&&(lc(MLS)))||((lc(XQS))&&(lc(MLS)))||((lc(XQS))&&(lc(MLS)))||((lc(XQS))&&(lc(MLS)))||((lc(XQS))&&(lc(MLS)))||((lc(XQS))&&(lc(MLS)))||((lc(XQS))&&(lc(MLS)))||((lc(XQS))&&(lc(MLS)))||((lc(XQS))&&(lc(MLS)))||((lc(XQS))&&(lc(MLS)))||((lc(XQS))&&(lc(MLS)))||((lc(XQS))&&(lc(MLS)))||((lc(XQS))&&(lc(MLS)))||((lc(XQS))&&(lc(MLS)))||((lc(XQS))&&(lc(MLS)))||((lc(XQS))&&(lc(MLS)))||((lc(XQS))&&(lc(MLS)))||((lc(XQS))&&(lc(MLS)))||((lc(XQS))&&(lc(MLS)))||((lc(XQS))&&(lc(MLS)))||((lc(XQS))&&(lc(MLS)))||((lc(XQS))&&(lc(MLS)))||((lc(XQS))&&(lc(MLS)))||((lc(XQS))&&(lc(MLS)))||((lc(XQS))&&(lc(MLS)))||((lc(XQS))&&(lc(MLS)))||((lc(XQS))&&(lc(MLS)))||((lc(XQS))&&(lc(MLS)))||((lc(XQS))&&(lc(MLS)))||((lc(XQS))&&(lc(MLS)))||((lc(XQS))&&(lc(MLS)))||((lc(XQS))&&(lc(MLS)))||((lc(XQS))&&(lc(MLS)))||((lc(XQS))&&(lc(MLS)))||((lc(XQS))&&(lc(MLS)))||((lc(XQS))&&(lc(MLS)))||((lc(XQS))&&(lc(MLS)))||((lc(XQS))&&(lc(MLS)))||((lc(XQS))&&(lc(MLS)))||((lc(XQS))&&(lc(MLS)))||((lc(XQS))&&(lc(MLS)))||((lc(XQS))&&(lc(MLS)))||((lc(XQS))&&(lc(MLS)))||((lc(XQS))&&(lc(MLS)))||((lc(XQS))&&(lc(MLS)))||((lc(XQS))&&(lc(MLS)))||((lc(XQS))&&(lc(MLS)))||((lc(XQS))&&(lc(MLS)))||((lc(XQS))&&(lc(MLS)))||((lc(XQS))&&(lc(MLS)))||((lc(XQS))&&(lc(MLS)))||((lc(XQS))&&(lc(MLS)))||((lc(XQS))&&(lc(MLS)))||((lc(XQS))&&(lc(MLS)))||((lc(XQS))&&(lc(MLS)))||((lc(XQS))&&(lc(MLS)))||((lc(XQS))&&(lc(MLS)))||((lc(XQS))&&(lc(MLS)))||((lc(XQS))&&(lc(MLS)))||((lc(XQS))&&(lc(MLS)))||((lc(XQS))&&(lc(MLS)))||((lc(XQS))&&(lc(MLS)))||((lc(XQS))&&(lc(MLS)))||((lc(XQS))&&(lc(MLS)))||((lc(XQS))&&(lc(MLS)))||((lc(XQS))&&(lc(MLS)))||((lc(XQS))&&(lc(MLS)))||((lc(XQS))&&(lc(MLS)))||((lc(XQS))&&(lc(MLS)))||((lc(XQS))&&(lc(MLS)))||((lc(XQS))&&(lc(MLS)))||((lc(XQS))&&(lc(MLS)))||((lc(XQS))&&(lc(MLS)))||((lc(XQS))&&(lc(MLS)))||((lc(XQS))&&(lc(MLS)))||((lc(XQS))&&(lc(MLS)))||((lc(XQS))&&(lc(MLS)))||((lc(XQS))&&(lc(MLS)))||((lc(XQS))&&(lc(MLS)))||((lc(XQS))&&(lc(MLS)))||((lc(XQS))&&(lc(MLS)))||((lc(XQS))&&(lc(MLS)))||((lc(XQS))&&(lc(MLS)))||((lc(XQS))&&(lc(MLS)))||((lc(XQS))&&(lc(MLS)))||((lc(XQS))&&(lc(MLS)))||((lc(XQS))&&(lc(MLS)))||((lc(XQS))&&(lc(MLS)))||((lc(XQS))&&(lc(MLS)))||((lc(XQS))&&(lc(MLS)))||((lc(XQS))&&(lc(MLS)))||((lc(XQS))&&(lc(MLS)))||((lc(XQS))&&(lc(MLS)))||((lc(XQS))&&(lc(MLS)))||((lc(XQS))&&(lc(MLS)))||((lc(XQS))&&(lc(MLS)))||((lc(XQS))&&(lc(MLS)))||((lc(XQS))&&(lc(MLS)))||((lc(XQS))&&(lc(MLS)))||((lc(XQS))&&(lc(MLS)))||((lc(XQS))&&(lc(MLS)))||((lc(XQS))&&(lc(MLS)))||((lc(XQS))&&(lc(MLS)))||((lc(XQS))&&(lc(MLS)))||((lc(XQS))&&(lc(MLS)))||((lc(XQS))&&(lc(MLS)))||((lc(XQS))&&(lc(MLS)))||((lc(XQS))&&(lc(MLS)))||((lc(XQS))&&(lc(MLS)))||((lc(XQS))&&(lc(MLS)))||((lc(XQS))&&(lc(MLS)))||((lc(XQS))&&(lc(MLS)))||((lc(XQS))&&(lc(MLS)))||((lc(XQS))&&(lc(MLS)))||((lc(XQS))&&(lc(MLS)))||((lc(XQS))&&(lc(MLS)))||((lc(XQS))&&(lc(MLS)))||((lc(XQS))&&(lc(MLS)))||((lc(XQS))&&(lc(MLS)))||((lc(XQS))&&(lc(MLS)))||((lc(XQS))&&(lc(MLS)))||((lc(XQS))&&(lc(MLS)))||((lc(XQS))&&(lc(MLS)))||((lc(XQS))&&(lc(MLS)))||((lc(XQS))&&(lc(MLS)))||((lc(XQS))&&(lc(MLS)))||((lc(XQS))&&(lc(MLS)))||((lc(XQS))&&(lc(MLS)))||((lc(XQS))&&(lc(MLS)))||((lc(XQS))&&(lc(MLS)))||((lc(XQS))&&(lc(MLS)))||((lc(XQS))&&(lc(MLS)))||((lc(XQS))&&(lc(MLS)))||((lc(XQS))&&(lc(MLS)))||((lc(XQS))&&(lc(MLS)))||((lc(XQS))&&(lc(MLS)))||((lc(XQS))&&(lc(MLS)))||((lc(XQS))&&(lc(MLS)))||((lc(XQS))&&(lc(MLS)))||((lc(XQS))&&(lc(MLS)))||((lc(XQS))&&(lc(MLS)))||((lc(XQS))&&(lc(MLS)))||((lc(XQS))&&(lc(MLS)))||((lc(XQS))&&(lc(MLS)))||((lc(XQS))&&(lc(MLS)))||((lc(XQS))&&(lc(MLS)))||((lc(XQS))&&(lc(MLS)))||((lc(XQS))&&(lc(MLS)))||((lc(XQS))&&(lc(MLS)))||((lc(XQS))&&(lc(MLS)))||((lc(XQS))&&(lc(MLS)))||((lc(XQS))&&(lc(MLS)))||((lc(XQS))&&(lc(MLS)))||((lc(XQS))&&(lc(MLS)))||((lc(XQS))&&(lc(MLS)))||((lc(XQS))&&(lc(MLS)))||((lc(XQS))&&(lc(MLS)))||((lc(XQS))&&(lc(MLS)))||((lc(XQS))&&(lc(MLS)))||((lc(XQS))&&(lc(MLS)))||((lc(XQS))&&(lc(MLS)))||((lc(XQS))&&(lc(MLS)))||((lc(XQS))&&(lc(MLS)))||((lc(XQS))&&(lc(MLS)))||((lc(XQS))&&(lc(MLS)))||((lc(XQS))&&(lc(MLS)))||((lc(XQS))&&(lc(MLS)))||((lc(XQS))&&(lc(MLS)))||((lc(XQS))&&(lc(MLS)))||((lc(XQS))&&(lc(MLS)))||((lc(XQS))&&(lc(MLS)))||((lc(XQS))&&(lc(MLS)))||((lc(XQS))&&(lc(MLS)))||((lc(XQS))&&(lc(MLS)))||((lc(XQS))&&(lc(MLS)))||((lc(XQS))&&(lc(MLS)))||((lc(XQS))&&(lc(MLS)))||((lc(XQS))&&(lc(MLS)))||((lc(XQS))&&(lc(MLS)))||((lc(XQS))&&(lc(MLS)))||((lc(XQS))&&(lc(MLS)))||((lc(XQS))&&(lc(MLS)))||((lc(XQS))&&(lc(MLS)))||((lc(XQS))&&(lc(MLS)))||((lc(XQS))&&(lc(MLS)))||((lc(XQS))&&(lc(MLS)))||((lc(XQS))&&(lc(MLS)))||((lc(XQS))&&(lc(MLS)))||((lc(XQS))&&(lc(MLS)))||((lc(XQS))&&(lc(MLS)))||((lc(XQS))&&(lc(MLS)))||((lc(XQS))&&(lc(MLS)))||(lc(MLS))||((lc(XQS))&&(lc(MLS)))||((lc(XQS))&&(lc(MLS)))||((lc(XQS))&&(lc(MLS)))||((lc(XQS))&&(lc(MLS)))||((lc(XQS))&&(lc(MLS)))||((lc(XQS))&&(lc(MLS)))||((lc(XQS))&&(lc(MLS)))||((lc(XQS))&&(lc(MLS)))||((lc(XQS))&&(lc(MLS)))||((lc(XQS))&&(lc(MLS)))||((lc(XQS))&&(lc(MLS)))||((lc(XQS))&&(lc(MLS)))||((lc(XQS))&&(lc(MLS)))||((lc(XQS))&&(lc(MLS)))||((lc(XQS))&&(lc(MLS)))||((lc(XQS))&&(lc(MLS)))||((lc(XQS))&&(lc(MLS)))||((lc(XQS))&&(lc(MLS)))||((lc(XQS))&&(lc(MLS)))||((lc(XQS))&&(lc(MLS)))||((lc(XQS))&&(lc(MLS)))||((lc(XQS))&&(lc(MLS)))||((lc(XQS))&&(lc(MLS)))||((lc(XQS))&&(lc(MLS)))||((lc(XQS))&&(lc(MLS)))||((lc(XQS))&&(lc(MLS)))||((lc(XQS))&&(lc(MLS)))||((lc(XQS))&&(lc(MLS)))||((lc(XQS))&&(lc(MLS)))||((lc(XQS))&&(lc(MLS)))||((lc(XQS))&&(lc(MLS)))||((lc(XQS))&&(lc(MLS)))||((lc(XQS))&&(lc(MLS)))||((lc(XQS))&&(lc(MLS)))||((lc(XQS))&&(lc(MLS)))||((lc(XQS))&&(lc(MLS)))||((lc(XQS))&&(lc(MLS)))||((lc(XQS))&&(lc(MLS)))||((lc(XQS))&&(lc(MLS)))||((lc(XQS))&&(lc(MLS)))||((lc(XQS))&&(lc(MLS)))||((lc(XQS))&&(lc(MLS)))||((lc(XQS))&&(lc(MLS)))||((lc(XQS))&&(lc(MLS)))||((lc(XQS))&&(lc(MLS)))||((lc(XQS))&&(lc(MLS)))||((lc(XQS))&&(lc(MLS)))||((lc(XQS))&&(lc(MLS)))||((lc(XQS))&&(lc(MLS)))||((lc(XQS))&&(lc(MLS)))||((lc(XQS))&&(lc(MLS)))||((lc(XQS))&&(lc(MLS)))||((lc(XQS))&&(lc(MLS)))||((lc(XQS))&&(lc(MLS)))||((lc(XQS))&&(lc(MLS)))||((lc(XQS))&&(lc(MLS)))||((lc(XQS))&&(lc(MLS)))||((lc(XQS))&&(lc(MLS)))||((lc(XQS))&&(lc(MLS)))||((lc(XQS))&&(lc(MLS)))||((lc(XQS))&&(lc(MLS)))||((lc(XQS))&&(lc(MLS)))||((lc(XQS))&&(lc(MLS)))||((lc(XQS))&&(lc(MLS)))||((lc(XQS))&&(lc(MLS)))||((lc(XQS))&&(lc(MLS)))||((lc(XQS))&&(lc(MLS)))||((lc(XQS))&&(lc(MLS)))||((lc(XQS))&&(lc(MLS)))||((lc(XQS))&&(lc(MLS)))||((lc(XQS))&&(lc(MLS)))||((lc(XQS))&&(lc(MLS)))||((lc(XQS))&&(lc(MLS)))||((lc(XQS))&&(lc(MLS)))||((lc(XQS))&&(lc(MLS)))||((lc(XQS))&&(lc(MLS)))||((lc(XQS))&&(lc(MLS)))||((lc(XQS))&&(lc(MLS)))||((lc(XQS))&&(lc(MLS)))||((lc(XQS))&&(lc(MLS)))||((lc(XQS))&&(lc(MLS)))||((lc(XQS))&&(lc(MLS)))||((lc(XQS))&&(lc(MLS)))||(lc(XQS))||((lc(XQS))&&(lc(MLS)))||((lc(XQS))&&(lc(MLS)))||((lc(XQS))&&(lc(MLS)))||((lc(XQS))&&(lc(MLS)))||((lc(XQS))&&(lc(MLS)))||((lc(XQS))&&(lc(MLS)))||((lc(XQS))&&(lc(MLS)))||((lc(XQS))&&(lc(MLS)))||((lc(XQS))&&(lc(MLS)))||((lc(XQS))&&(lc(MLS)))||((lc(XQS))&&(lc(MLS)))||((lc(XQS))&&(lc(MLS)))||((lc(XQS))&&(lc(MLS)))||((lc(XQS))&&(lc(MLS)))||((lc(XQS))&&(lc(MLS)))||((lc(XQS))&&(lc(MLS)))||((lc(XQS))&&(lc(MLS)))||((lc(XQS))&&(lc(MLS)))||((lc(XQS))&&(lc(MLS)))||((lc(XQS))&&(lc(MLS)))||((lc(XQS))&&(lc(MLS)))||((lc(XQS))&&(lc(MLS)))||((lc(XQS))&&(lc(MLS)))||((lc(XQS))&&(lc(MLS)))||((lc(XQS))&&(lc(MLS)))||((lc(XQS))&&(lc(MLS)))||((lc(XQS))&&(lc(MLS)))))) {
                int LA45_1 = input.LA(2);

                if ( (((lc(XQS))||((lc(XQS))&&(lc(MLS))))) ) {
                    alt45=1;
                }
                else if ( ((lc(MLS))) ) {
                    alt45=2;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 45, 1, input);

                    throw nvae;
                }
            }
            else if ( (LA45_0==RBRACKET) ) {
                int LA45_2 = input.LA(2);

                if ( ((lc(XQS))) ) {
                    alt45=1;
                }
                else if ( (true) ) {
                    alt45=2;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 45, 2, input);

                    throw nvae;
                }
            }
            else if ( (LA45_0==EOF) ) {
                int LA45_3 = input.LA(2);

                if ( ((lc(XQS))) ) {
                    alt45=1;
                }
                else if ( (true) ) {
                    alt45=2;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 45, 3, input);

                    throw nvae;
                }
            }
            else if ( (LA45_0==RPAREN) ) {
                int LA45_4 = input.LA(2);

                if ( ((lc(XQS))) ) {
                    alt45=1;
                }
                else if ( (true) ) {
                    alt45=2;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 45, 4, input);

                    throw nvae;
                }
            }
            else if ( (LA45_0==RSQUARE) ) {
                int LA45_5 = input.LA(2);

                if ( ((lc(XQS))) ) {
                    alt45=1;
                }
                else if ( (true) ) {
                    alt45=2;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 45, 5, input);

                    throw nvae;
                }
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 45, 0, input);

                throw nvae;
            }
            switch (alt45) {
                case 1 :
                    // XQueryParser.g:377:25: {...}? => ( SEMICOLON ( pm_ApplyExpr )* )?
                    {
                    if ( !((lc(XQS))) ) {
                        if (state.backtracking>0) {state.failed=true; return retval;}
                        throw new FailedPredicateException(input, "pm_Expr", "lc(XQS)");
                    }
                    // XQueryParser.g:377:38: ( SEMICOLON ( pm_ApplyExpr )* )?
                    int alt44=2;
                    int LA44_0 = input.LA(1);

                    if ( (LA44_0==SEMICOLON) ) {
                        int LA44_1 = input.LA(2);

                        if ( (!(((lc(MLS))))) ) {
                            alt44=1;
                        }
                    }
                    switch (alt44) {
                        case 1 :
                            // XQueryParser.g:377:39: SEMICOLON ( pm_ApplyExpr )*
                            {
                            SEMICOLON82=(CommonToken)match(input,SEMICOLON,FOLLOW_SEMICOLON_in_pm_Expr3453); if (state.failed) return retval;
                            if ( state.backtracking==0 ) {
                            SEMICOLON82_tree = (XQDTCommonTree)adaptor.create(SEMICOLON82);
                            adaptor.addChild(root_0, SEMICOLON82_tree);
                            }
                            // XQueryParser.g:377:49: ( pm_ApplyExpr )*
                            loop43:
                            do {
                                int alt43=2;
                                int LA43_0 = input.LA(1);

                                if ( ((LA43_0>=ANCESTOR && LA43_0<=EXIT)||(LA43_0>=SEQUENTIAL && LA43_0<=LPAREN)||LA43_0==DOLLAR||(LA43_0>=STAR && LA43_0<=SMALLER)||(LA43_0>=SLASH && LA43_0<=DOT_DOT)||LA43_0==ATTR_SIGN||(LA43_0>=APOS && LA43_0<=QUOT)||LA43_0==L_NCName||(LA43_0>=L_Pragma && LA43_0<=L_DoubleLiteral)) ) {
                                    alt43=1;
                                }


                                switch (alt43) {
                            	case 1 :
                            	    // XQueryParser.g:377:49: pm_ApplyExpr
                            	    {
                            	    pushFollow(FOLLOW_pm_ApplyExpr_in_pm_Expr3455);
                            	    pm_ApplyExpr83=pm_ApplyExpr();

                            	    state._fsp--;
                            	    if (state.failed) return retval;
                            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, pm_ApplyExpr83.getTree());

                            	    }
                            	    break;

                            	default :
                            	    break loop43;
                                }
                            } while (true);


                            }
                            break;

                    }


                    }
                    break;
                case 2 :
                    // XQueryParser.g:377:80: 
                    {
                    }
                    break;

            }

            // XQueryParser.g:377:82: ({...}? => ( SEMICOLON p_ConcatExpr )+ | )
            int alt47=2;
            int LA47_0 = input.LA(1);

            if ( (LA47_0==SEMICOLON) && ((lc(MLS)))) {
                alt47=1;
            }
            else if ( (LA47_0==EOF||LA47_0==RPAREN||LA47_0==RBRACKET||LA47_0==RSQUARE) ) {
                alt47=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 47, 0, input);

                throw nvae;
            }
            switch (alt47) {
                case 1 :
                    // XQueryParser.g:377:83: {...}? => ( SEMICOLON p_ConcatExpr )+
                    {
                    if ( !((lc(MLS))) ) {
                        if (state.backtracking>0) {state.failed=true; return retval;}
                        throw new FailedPredicateException(input, "pm_Expr", "lc(MLS)");
                    }
                    // XQueryParser.g:377:96: ( SEMICOLON p_ConcatExpr )+
                    int cnt46=0;
                    loop46:
                    do {
                        int alt46=2;
                        int LA46_0 = input.LA(1);

                        if ( (LA46_0==SEMICOLON) ) {
                            alt46=1;
                        }


                        switch (alt46) {
                    	case 1 :
                    	    // XQueryParser.g:377:97: SEMICOLON p_ConcatExpr
                    	    {
                    	    SEMICOLON84=(CommonToken)match(input,SEMICOLON,FOLLOW_SEMICOLON_in_pm_Expr3470); if (state.failed) return retval;
                    	    if ( state.backtracking==0 ) {
                    	    SEMICOLON84_tree = (XQDTCommonTree)adaptor.create(SEMICOLON84);
                    	    adaptor.addChild(root_0, SEMICOLON84_tree);
                    	    }
                    	    pushFollow(FOLLOW_p_ConcatExpr_in_pm_Expr3472);
                    	    p_ConcatExpr85=p_ConcatExpr();

                    	    state._fsp--;
                    	    if (state.failed) return retval;
                    	    if ( state.backtracking==0 ) adaptor.addChild(root_0, p_ConcatExpr85.getTree());

                    	    }
                    	    break;

                    	default :
                    	    if ( cnt46 >= 1 ) break loop46;
                    	    if (state.backtracking>0) {state.failed=true; return retval;}
                                EarlyExitException eee =
                                    new EarlyExitException(46, input);
                                throw eee;
                        }
                        cnt46++;
                    } while (true);


                    }
                    break;
                case 2 :
                    // XQueryParser.g:377:137: 
                    {
                    }
                    break;

            }


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (XQDTCommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (XQDTCommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "pm_Expr"

    public static class p_ExprSingle_return extends ParserRuleReturnScope {
        XQDTCommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "p_ExprSingle"
    // XQueryParser.g:382:1: p_ExprSingle : ( p_FLWORExpr | p_QuantifiedExpr | p_TypeswitchExpr | p_IfExpr | p_TryCatchExpr | {...}? => p_EvalExpr | {...}? => p_InsertExpr | {...}? => p_DeleteExpr | {...}? => p_RenameExpr | {...}? => p_ReplaceExpr | {...}? => p_TransformExpr | {...}? => p_BlockExpr | {...}? => p_AssignmentExpr | {...}? => p_ExitExpr | {...}? => p_WhileExpr | p_OrExpr );
    public final XQueryParser.p_ExprSingle_return p_ExprSingle() throws RecognitionException {
        XQueryParser.p_ExprSingle_return retval = new XQueryParser.p_ExprSingle_return();
        retval.start = input.LT(1);

        XQDTCommonTree root_0 = null;

        XQueryParser.p_FLWORExpr_return p_FLWORExpr86 = null;

        XQueryParser.p_QuantifiedExpr_return p_QuantifiedExpr87 = null;

        XQueryParser.p_TypeswitchExpr_return p_TypeswitchExpr88 = null;

        XQueryParser.p_IfExpr_return p_IfExpr89 = null;

        XQueryParser.p_TryCatchExpr_return p_TryCatchExpr90 = null;

        XQueryParser.p_EvalExpr_return p_EvalExpr91 = null;

        XQueryParser.p_InsertExpr_return p_InsertExpr92 = null;

        XQueryParser.p_DeleteExpr_return p_DeleteExpr93 = null;

        XQueryParser.p_RenameExpr_return p_RenameExpr94 = null;

        XQueryParser.p_ReplaceExpr_return p_ReplaceExpr95 = null;

        XQueryParser.p_TransformExpr_return p_TransformExpr96 = null;

        XQueryParser.p_BlockExpr_return p_BlockExpr97 = null;

        XQueryParser.p_AssignmentExpr_return p_AssignmentExpr98 = null;

        XQueryParser.p_ExitExpr_return p_ExitExpr99 = null;

        XQueryParser.p_WhileExpr_return p_WhileExpr100 = null;

        XQueryParser.p_OrExpr_return p_OrExpr101 = null;



        try {
            // XQueryParser.g:383:9: ( p_FLWORExpr | p_QuantifiedExpr | p_TypeswitchExpr | p_IfExpr | p_TryCatchExpr | {...}? => p_EvalExpr | {...}? => p_InsertExpr | {...}? => p_DeleteExpr | {...}? => p_RenameExpr | {...}? => p_ReplaceExpr | {...}? => p_TransformExpr | {...}? => p_BlockExpr | {...}? => p_AssignmentExpr | {...}? => p_ExitExpr | {...}? => p_WhileExpr | p_OrExpr )
            int alt48=16;
            alt48 = dfa48.predict(input);
            switch (alt48) {
                case 1 :
                    // XQueryParser.g:383:11: p_FLWORExpr
                    {
                    root_0 = (XQDTCommonTree)adaptor.nil();

                    pushFollow(FOLLOW_p_FLWORExpr_in_p_ExprSingle3506);
                    p_FLWORExpr86=p_FLWORExpr();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, p_FLWORExpr86.getTree());

                    }
                    break;
                case 2 :
                    // XQueryParser.g:384:11: p_QuantifiedExpr
                    {
                    root_0 = (XQDTCommonTree)adaptor.nil();

                    pushFollow(FOLLOW_p_QuantifiedExpr_in_p_ExprSingle3518);
                    p_QuantifiedExpr87=p_QuantifiedExpr();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, p_QuantifiedExpr87.getTree());

                    }
                    break;
                case 3 :
                    // XQueryParser.g:385:11: p_TypeswitchExpr
                    {
                    root_0 = (XQDTCommonTree)adaptor.nil();

                    pushFollow(FOLLOW_p_TypeswitchExpr_in_p_ExprSingle3530);
                    p_TypeswitchExpr88=p_TypeswitchExpr();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, p_TypeswitchExpr88.getTree());

                    }
                    break;
                case 4 :
                    // XQueryParser.g:386:11: p_IfExpr
                    {
                    root_0 = (XQDTCommonTree)adaptor.nil();

                    pushFollow(FOLLOW_p_IfExpr_in_p_ExprSingle3542);
                    p_IfExpr89=p_IfExpr();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, p_IfExpr89.getTree());

                    }
                    break;
                case 5 :
                    // XQueryParser.g:387:11: p_TryCatchExpr
                    {
                    root_0 = (XQDTCommonTree)adaptor.nil();

                    pushFollow(FOLLOW_p_TryCatchExpr_in_p_ExprSingle3554);
                    p_TryCatchExpr90=p_TryCatchExpr();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, p_TryCatchExpr90.getTree());

                    }
                    break;
                case 6 :
                    // XQueryParser.g:388:11: {...}? => p_EvalExpr
                    {
                    root_0 = (XQDTCommonTree)adaptor.nil();

                    if ( !((lc(ZORBA))) ) {
                        if (state.backtracking>0) {state.failed=true; return retval;}
                        throw new FailedPredicateException(input, "p_ExprSingle", "lc(ZORBA)");
                    }
                    pushFollow(FOLLOW_p_EvalExpr_in_p_ExprSingle3569);
                    p_EvalExpr91=p_EvalExpr();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, p_EvalExpr91.getTree());

                    }
                    break;
                case 7 :
                    // XQueryParser.g:389:11: {...}? => p_InsertExpr
                    {
                    root_0 = (XQDTCommonTree)adaptor.nil();

                    if ( !((lc(XQU))) ) {
                        if (state.backtracking>0) {state.failed=true; return retval;}
                        throw new FailedPredicateException(input, "p_ExprSingle", "lc(XQU)");
                    }
                    pushFollow(FOLLOW_p_InsertExpr_in_p_ExprSingle3584);
                    p_InsertExpr92=p_InsertExpr();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, p_InsertExpr92.getTree());

                    }
                    break;
                case 8 :
                    // XQueryParser.g:390:11: {...}? => p_DeleteExpr
                    {
                    root_0 = (XQDTCommonTree)adaptor.nil();

                    if ( !((lc(XQU))) ) {
                        if (state.backtracking>0) {state.failed=true; return retval;}
                        throw new FailedPredicateException(input, "p_ExprSingle", "lc(XQU)");
                    }
                    pushFollow(FOLLOW_p_DeleteExpr_in_p_ExprSingle3599);
                    p_DeleteExpr93=p_DeleteExpr();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, p_DeleteExpr93.getTree());

                    }
                    break;
                case 9 :
                    // XQueryParser.g:391:11: {...}? => p_RenameExpr
                    {
                    root_0 = (XQDTCommonTree)adaptor.nil();

                    if ( !((lc(XQU))) ) {
                        if (state.backtracking>0) {state.failed=true; return retval;}
                        throw new FailedPredicateException(input, "p_ExprSingle", "lc(XQU)");
                    }
                    pushFollow(FOLLOW_p_RenameExpr_in_p_ExprSingle3614);
                    p_RenameExpr94=p_RenameExpr();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, p_RenameExpr94.getTree());

                    }
                    break;
                case 10 :
                    // XQueryParser.g:392:11: {...}? => p_ReplaceExpr
                    {
                    root_0 = (XQDTCommonTree)adaptor.nil();

                    if ( !((lc(XQU))) ) {
                        if (state.backtracking>0) {state.failed=true; return retval;}
                        throw new FailedPredicateException(input, "p_ExprSingle", "lc(XQU)");
                    }
                    pushFollow(FOLLOW_p_ReplaceExpr_in_p_ExprSingle3629);
                    p_ReplaceExpr95=p_ReplaceExpr();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, p_ReplaceExpr95.getTree());

                    }
                    break;
                case 11 :
                    // XQueryParser.g:393:11: {...}? => p_TransformExpr
                    {
                    root_0 = (XQDTCommonTree)adaptor.nil();

                    if ( !((lc(XQU))) ) {
                        if (state.backtracking>0) {state.failed=true; return retval;}
                        throw new FailedPredicateException(input, "p_ExprSingle", "lc(XQU)");
                    }
                    pushFollow(FOLLOW_p_TransformExpr_in_p_ExprSingle3644);
                    p_TransformExpr96=p_TransformExpr();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, p_TransformExpr96.getTree());

                    }
                    break;
                case 12 :
                    // XQueryParser.g:394:11: {...}? => p_BlockExpr
                    {
                    root_0 = (XQDTCommonTree)adaptor.nil();

                    if ( !((lc(XQS))) ) {
                        if (state.backtracking>0) {state.failed=true; return retval;}
                        throw new FailedPredicateException(input, "p_ExprSingle", "lc(XQS)");
                    }
                    pushFollow(FOLLOW_p_BlockExpr_in_p_ExprSingle3659);
                    p_BlockExpr97=p_BlockExpr();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, p_BlockExpr97.getTree());

                    }
                    break;
                case 13 :
                    // XQueryParser.g:395:11: {...}? => p_AssignmentExpr
                    {
                    root_0 = (XQDTCommonTree)adaptor.nil();

                    if ( !((lc(XQS))) ) {
                        if (state.backtracking>0) {state.failed=true; return retval;}
                        throw new FailedPredicateException(input, "p_ExprSingle", "lc(XQS)");
                    }
                    pushFollow(FOLLOW_p_AssignmentExpr_in_p_ExprSingle3674);
                    p_AssignmentExpr98=p_AssignmentExpr();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, p_AssignmentExpr98.getTree());

                    }
                    break;
                case 14 :
                    // XQueryParser.g:396:11: {...}? => p_ExitExpr
                    {
                    root_0 = (XQDTCommonTree)adaptor.nil();

                    if ( !((lc(XQS))) ) {
                        if (state.backtracking>0) {state.failed=true; return retval;}
                        throw new FailedPredicateException(input, "p_ExprSingle", "lc(XQS)");
                    }
                    pushFollow(FOLLOW_p_ExitExpr_in_p_ExprSingle3689);
                    p_ExitExpr99=p_ExitExpr();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, p_ExitExpr99.getTree());

                    }
                    break;
                case 15 :
                    // XQueryParser.g:397:11: {...}? => p_WhileExpr
                    {
                    root_0 = (XQDTCommonTree)adaptor.nil();

                    if ( !((lc(XQS))) ) {
                        if (state.backtracking>0) {state.failed=true; return retval;}
                        throw new FailedPredicateException(input, "p_ExprSingle", "lc(XQS)");
                    }
                    pushFollow(FOLLOW_p_WhileExpr_in_p_ExprSingle3704);
                    p_WhileExpr100=p_WhileExpr();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, p_WhileExpr100.getTree());

                    }
                    break;
                case 16 :
                    // XQueryParser.g:398:11: p_OrExpr
                    {
                    root_0 = (XQDTCommonTree)adaptor.nil();

                    pushFollow(FOLLOW_p_OrExpr_in_p_ExprSingle3716);
                    p_OrExpr101=p_OrExpr();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, p_OrExpr101.getTree());

                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (XQDTCommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (XQDTCommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "p_ExprSingle"

    public static class p_FLWORExpr_return extends ParserRuleReturnScope {
        XQDTCommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "p_FLWORExpr"
    // XQueryParser.g:402:1: p_FLWORExpr : p_InitialClause ( p_IntermediateClause )* p_ReturnClause ;
    public final XQueryParser.p_FLWORExpr_return p_FLWORExpr() throws RecognitionException {
        XQueryParser.p_FLWORExpr_return retval = new XQueryParser.p_FLWORExpr_return();
        retval.start = input.LT(1);

        XQDTCommonTree root_0 = null;

        XQueryParser.p_InitialClause_return p_InitialClause102 = null;

        XQueryParser.p_IntermediateClause_return p_IntermediateClause103 = null;

        XQueryParser.p_ReturnClause_return p_ReturnClause104 = null;



        try {
            // XQueryParser.g:403:9: ( p_InitialClause ( p_IntermediateClause )* p_ReturnClause )
            // XQueryParser.g:403:11: p_InitialClause ( p_IntermediateClause )* p_ReturnClause
            {
            root_0 = (XQDTCommonTree)adaptor.nil();

            pushFollow(FOLLOW_p_InitialClause_in_p_FLWORExpr3742);
            p_InitialClause102=p_InitialClause();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, p_InitialClause102.getTree());
            // XQueryParser.g:403:27: ( p_IntermediateClause )*
            loop49:
            do {
                int alt49=2;
                int LA49_0 = input.LA(1);

                if ( (LA49_0==FOR||LA49_0==LET||LA49_0==ORDER||LA49_0==STABLE||LA49_0==WHERE||LA49_0==COUNT||LA49_0==GROUP) ) {
                    alt49=1;
                }


                switch (alt49) {
            	case 1 :
            	    // XQueryParser.g:403:27: p_IntermediateClause
            	    {
            	    pushFollow(FOLLOW_p_IntermediateClause_in_p_FLWORExpr3744);
            	    p_IntermediateClause103=p_IntermediateClause();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, p_IntermediateClause103.getTree());

            	    }
            	    break;

            	default :
            	    break loop49;
                }
            } while (true);

            pushFollow(FOLLOW_p_ReturnClause_in_p_FLWORExpr3747);
            p_ReturnClause104=p_ReturnClause();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, p_ReturnClause104.getTree());

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (XQDTCommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (XQDTCommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "p_FLWORExpr"

    public static class p_InitialClause_return extends ParserRuleReturnScope {
        XQDTCommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "p_InitialClause"
    // XQueryParser.g:407:1: p_InitialClause : ( p_ForClause | p_LetClause | p_WindowClause );
    public final XQueryParser.p_InitialClause_return p_InitialClause() throws RecognitionException {
        XQueryParser.p_InitialClause_return retval = new XQueryParser.p_InitialClause_return();
        retval.start = input.LT(1);

        XQDTCommonTree root_0 = null;

        XQueryParser.p_ForClause_return p_ForClause105 = null;

        XQueryParser.p_LetClause_return p_LetClause106 = null;

        XQueryParser.p_WindowClause_return p_WindowClause107 = null;



        try {
            // XQueryParser.g:408:9: ( p_ForClause | p_LetClause | p_WindowClause )
            int alt50=3;
            int LA50_0 = input.LA(1);

            if ( (LA50_0==FOR) ) {
                int LA50_1 = input.LA(2);

                if ( (LA50_1==DOLLAR) ) {
                    alt50=1;
                }
                else if ( (LA50_1==SLIDING||LA50_1==TUMBLING) ) {
                    alt50=3;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 50, 1, input);

                    throw nvae;
                }
            }
            else if ( (LA50_0==LET) ) {
                alt50=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 50, 0, input);

                throw nvae;
            }
            switch (alt50) {
                case 1 :
                    // XQueryParser.g:408:11: p_ForClause
                    {
                    root_0 = (XQDTCommonTree)adaptor.nil();

                    pushFollow(FOLLOW_p_ForClause_in_p_InitialClause3773);
                    p_ForClause105=p_ForClause();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, p_ForClause105.getTree());

                    }
                    break;
                case 2 :
                    // XQueryParser.g:408:25: p_LetClause
                    {
                    root_0 = (XQDTCommonTree)adaptor.nil();

                    pushFollow(FOLLOW_p_LetClause_in_p_InitialClause3777);
                    p_LetClause106=p_LetClause();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, p_LetClause106.getTree());

                    }
                    break;
                case 3 :
                    // XQueryParser.g:408:39: p_WindowClause
                    {
                    root_0 = (XQDTCommonTree)adaptor.nil();

                    pushFollow(FOLLOW_p_WindowClause_in_p_InitialClause3781);
                    p_WindowClause107=p_WindowClause();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, p_WindowClause107.getTree());

                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (XQDTCommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (XQDTCommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "p_InitialClause"

    public static class p_IntermediateClause_return extends ParserRuleReturnScope {
        XQDTCommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "p_IntermediateClause"
    // XQueryParser.g:412:1: p_IntermediateClause : ( p_InitialClause | p_WhereClause | p_GroupByClause | p_OrderByClause | p_CountClause );
    public final XQueryParser.p_IntermediateClause_return p_IntermediateClause() throws RecognitionException {
        XQueryParser.p_IntermediateClause_return retval = new XQueryParser.p_IntermediateClause_return();
        retval.start = input.LT(1);

        XQDTCommonTree root_0 = null;

        XQueryParser.p_InitialClause_return p_InitialClause108 = null;

        XQueryParser.p_WhereClause_return p_WhereClause109 = null;

        XQueryParser.p_GroupByClause_return p_GroupByClause110 = null;

        XQueryParser.p_OrderByClause_return p_OrderByClause111 = null;

        XQueryParser.p_CountClause_return p_CountClause112 = null;



        try {
            // XQueryParser.g:413:9: ( p_InitialClause | p_WhereClause | p_GroupByClause | p_OrderByClause | p_CountClause )
            int alt51=5;
            switch ( input.LA(1) ) {
            case FOR:
            case LET:
                {
                alt51=1;
                }
                break;
            case WHERE:
                {
                alt51=2;
                }
                break;
            case GROUP:
                {
                alt51=3;
                }
                break;
            case ORDER:
            case STABLE:
                {
                alt51=4;
                }
                break;
            case COUNT:
                {
                alt51=5;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 51, 0, input);

                throw nvae;
            }

            switch (alt51) {
                case 1 :
                    // XQueryParser.g:413:11: p_InitialClause
                    {
                    root_0 = (XQDTCommonTree)adaptor.nil();

                    pushFollow(FOLLOW_p_InitialClause_in_p_IntermediateClause3807);
                    p_InitialClause108=p_InitialClause();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, p_InitialClause108.getTree());

                    }
                    break;
                case 2 :
                    // XQueryParser.g:413:29: p_WhereClause
                    {
                    root_0 = (XQDTCommonTree)adaptor.nil();

                    pushFollow(FOLLOW_p_WhereClause_in_p_IntermediateClause3811);
                    p_WhereClause109=p_WhereClause();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, p_WhereClause109.getTree());

                    }
                    break;
                case 3 :
                    // XQueryParser.g:413:45: p_GroupByClause
                    {
                    root_0 = (XQDTCommonTree)adaptor.nil();

                    pushFollow(FOLLOW_p_GroupByClause_in_p_IntermediateClause3815);
                    p_GroupByClause110=p_GroupByClause();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, p_GroupByClause110.getTree());

                    }
                    break;
                case 4 :
                    // XQueryParser.g:413:63: p_OrderByClause
                    {
                    root_0 = (XQDTCommonTree)adaptor.nil();

                    pushFollow(FOLLOW_p_OrderByClause_in_p_IntermediateClause3819);
                    p_OrderByClause111=p_OrderByClause();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, p_OrderByClause111.getTree());

                    }
                    break;
                case 5 :
                    // XQueryParser.g:413:81: p_CountClause
                    {
                    root_0 = (XQDTCommonTree)adaptor.nil();

                    pushFollow(FOLLOW_p_CountClause_in_p_IntermediateClause3823);
                    p_CountClause112=p_CountClause();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, p_CountClause112.getTree());

                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (XQDTCommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (XQDTCommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "p_IntermediateClause"

    public static class p_ForClause_return extends ParserRuleReturnScope {
        XQDTCommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "p_ForClause"
    // XQueryParser.g:417:1: p_ForClause : k+= FOR DOLLAR p_VarName ( p_TypeDeclaration )? ( p_PositionalVar )? k+= IN p_ExprSingle ( COMMA p_QName ( p_TypeDeclaration )? ( p_PositionalVar )? k+= IN p_ExprSingle )* ;
    public final XQueryParser.p_ForClause_return p_ForClause() throws RecognitionException {
        XQueryParser.p_ForClause_return retval = new XQueryParser.p_ForClause_return();
        retval.start = input.LT(1);

        XQDTCommonTree root_0 = null;

        CommonToken DOLLAR113=null;
        CommonToken COMMA118=null;
        CommonToken k=null;
        List list_k=null;
        XQueryParser.p_VarName_return p_VarName114 = null;

        XQueryParser.p_TypeDeclaration_return p_TypeDeclaration115 = null;

        XQueryParser.p_PositionalVar_return p_PositionalVar116 = null;

        XQueryParser.p_ExprSingle_return p_ExprSingle117 = null;

        XQueryParser.p_QName_return p_QName119 = null;

        XQueryParser.p_TypeDeclaration_return p_TypeDeclaration120 = null;

        XQueryParser.p_PositionalVar_return p_PositionalVar121 = null;

        XQueryParser.p_ExprSingle_return p_ExprSingle122 = null;


        XQDTCommonTree DOLLAR113_tree=null;
        XQDTCommonTree COMMA118_tree=null;
        XQDTCommonTree k_tree=null;

        try {
            // XQueryParser.g:418:9: (k+= FOR DOLLAR p_VarName ( p_TypeDeclaration )? ( p_PositionalVar )? k+= IN p_ExprSingle ( COMMA p_QName ( p_TypeDeclaration )? ( p_PositionalVar )? k+= IN p_ExprSingle )* )
            // XQueryParser.g:418:11: k+= FOR DOLLAR p_VarName ( p_TypeDeclaration )? ( p_PositionalVar )? k+= IN p_ExprSingle ( COMMA p_QName ( p_TypeDeclaration )? ( p_PositionalVar )? k+= IN p_ExprSingle )*
            {
            root_0 = (XQDTCommonTree)adaptor.nil();

            k=(CommonToken)match(input,FOR,FOLLOW_FOR_in_p_ForClause3851); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            k_tree = (XQDTCommonTree)adaptor.create(k);
            adaptor.addChild(root_0, k_tree);
            }
            if (list_k==null) list_k=new ArrayList();
            list_k.add(k);

            DOLLAR113=(CommonToken)match(input,DOLLAR,FOLLOW_DOLLAR_in_p_ForClause3853); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            DOLLAR113_tree = (XQDTCommonTree)adaptor.create(DOLLAR113);
            adaptor.addChild(root_0, DOLLAR113_tree);
            }
            pushFollow(FOLLOW_p_VarName_in_p_ForClause3855);
            p_VarName114=p_VarName();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, p_VarName114.getTree());
            // XQueryParser.g:418:35: ( p_TypeDeclaration )?
            int alt52=2;
            int LA52_0 = input.LA(1);

            if ( (LA52_0==AS) ) {
                alt52=1;
            }
            switch (alt52) {
                case 1 :
                    // XQueryParser.g:418:35: p_TypeDeclaration
                    {
                    pushFollow(FOLLOW_p_TypeDeclaration_in_p_ForClause3857);
                    p_TypeDeclaration115=p_TypeDeclaration();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, p_TypeDeclaration115.getTree());

                    }
                    break;

            }

            // XQueryParser.g:418:54: ( p_PositionalVar )?
            int alt53=2;
            int LA53_0 = input.LA(1);

            if ( (LA53_0==AT) ) {
                alt53=1;
            }
            switch (alt53) {
                case 1 :
                    // XQueryParser.g:418:54: p_PositionalVar
                    {
                    pushFollow(FOLLOW_p_PositionalVar_in_p_ForClause3860);
                    p_PositionalVar116=p_PositionalVar();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, p_PositionalVar116.getTree());

                    }
                    break;

            }

            k=(CommonToken)match(input,IN,FOLLOW_IN_in_p_ForClause3865); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            k_tree = (XQDTCommonTree)adaptor.create(k);
            adaptor.addChild(root_0, k_tree);
            }
            if (list_k==null) list_k=new ArrayList();
            list_k.add(k);

            pushFollow(FOLLOW_p_ExprSingle_in_p_ForClause3867);
            p_ExprSingle117=p_ExprSingle();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, p_ExprSingle117.getTree());
            // XQueryParser.g:418:90: ( COMMA p_QName ( p_TypeDeclaration )? ( p_PositionalVar )? k+= IN p_ExprSingle )*
            loop56:
            do {
                int alt56=2;
                int LA56_0 = input.LA(1);

                if ( (LA56_0==COMMA) ) {
                    alt56=1;
                }


                switch (alt56) {
            	case 1 :
            	    // XQueryParser.g:418:91: COMMA p_QName ( p_TypeDeclaration )? ( p_PositionalVar )? k+= IN p_ExprSingle
            	    {
            	    COMMA118=(CommonToken)match(input,COMMA,FOLLOW_COMMA_in_p_ForClause3870); if (state.failed) return retval;
            	    if ( state.backtracking==0 ) {
            	    COMMA118_tree = (XQDTCommonTree)adaptor.create(COMMA118);
            	    adaptor.addChild(root_0, COMMA118_tree);
            	    }
            	    pushFollow(FOLLOW_p_QName_in_p_ForClause3872);
            	    p_QName119=p_QName();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, p_QName119.getTree());
            	    // XQueryParser.g:418:105: ( p_TypeDeclaration )?
            	    int alt54=2;
            	    int LA54_0 = input.LA(1);

            	    if ( (LA54_0==AS) ) {
            	        alt54=1;
            	    }
            	    switch (alt54) {
            	        case 1 :
            	            // XQueryParser.g:418:105: p_TypeDeclaration
            	            {
            	            pushFollow(FOLLOW_p_TypeDeclaration_in_p_ForClause3874);
            	            p_TypeDeclaration120=p_TypeDeclaration();

            	            state._fsp--;
            	            if (state.failed) return retval;
            	            if ( state.backtracking==0 ) adaptor.addChild(root_0, p_TypeDeclaration120.getTree());

            	            }
            	            break;

            	    }

            	    // XQueryParser.g:418:124: ( p_PositionalVar )?
            	    int alt55=2;
            	    int LA55_0 = input.LA(1);

            	    if ( (LA55_0==AT) ) {
            	        alt55=1;
            	    }
            	    switch (alt55) {
            	        case 1 :
            	            // XQueryParser.g:418:124: p_PositionalVar
            	            {
            	            pushFollow(FOLLOW_p_PositionalVar_in_p_ForClause3877);
            	            p_PositionalVar121=p_PositionalVar();

            	            state._fsp--;
            	            if (state.failed) return retval;
            	            if ( state.backtracking==0 ) adaptor.addChild(root_0, p_PositionalVar121.getTree());

            	            }
            	            break;

            	    }

            	    k=(CommonToken)match(input,IN,FOLLOW_IN_in_p_ForClause3882); if (state.failed) return retval;
            	    if ( state.backtracking==0 ) {
            	    k_tree = (XQDTCommonTree)adaptor.create(k);
            	    adaptor.addChild(root_0, k_tree);
            	    }
            	    if (list_k==null) list_k=new ArrayList();
            	    list_k.add(k);

            	    pushFollow(FOLLOW_p_ExprSingle_in_p_ForClause3884);
            	    p_ExprSingle122=p_ExprSingle();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, p_ExprSingle122.getTree());

            	    }
            	    break;

            	default :
            	    break loop56;
                }
            } while (true);

            if ( state.backtracking==0 ) {
              ak(list_k);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (XQDTCommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (XQDTCommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "p_ForClause"

    public static class p_PositionalVar_return extends ParserRuleReturnScope {
        XQDTCommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "p_PositionalVar"
    // XQueryParser.g:422:1: p_PositionalVar : ka= AT DOLLAR p_VarName ;
    public final XQueryParser.p_PositionalVar_return p_PositionalVar() throws RecognitionException {
        XQueryParser.p_PositionalVar_return retval = new XQueryParser.p_PositionalVar_return();
        retval.start = input.LT(1);

        XQDTCommonTree root_0 = null;

        CommonToken ka=null;
        CommonToken DOLLAR123=null;
        XQueryParser.p_VarName_return p_VarName124 = null;


        XQDTCommonTree ka_tree=null;
        XQDTCommonTree DOLLAR123_tree=null;

        try {
            // XQueryParser.g:423:9: (ka= AT DOLLAR p_VarName )
            // XQueryParser.g:423:11: ka= AT DOLLAR p_VarName
            {
            root_0 = (XQDTCommonTree)adaptor.nil();

            ka=(CommonToken)match(input,AT,FOLLOW_AT_in_p_PositionalVar3916); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            ka_tree = (XQDTCommonTree)adaptor.create(ka);
            adaptor.addChild(root_0, ka_tree);
            }
            if ( state.backtracking==0 ) {
              ak(ka);
            }
            DOLLAR123=(CommonToken)match(input,DOLLAR,FOLLOW_DOLLAR_in_p_PositionalVar3920); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            DOLLAR123_tree = (XQDTCommonTree)adaptor.create(DOLLAR123);
            adaptor.addChild(root_0, DOLLAR123_tree);
            }
            pushFollow(FOLLOW_p_VarName_in_p_PositionalVar3922);
            p_VarName124=p_VarName();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, p_VarName124.getTree());

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (XQDTCommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (XQDTCommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "p_PositionalVar"

    public static class p_LetClause_return extends ParserRuleReturnScope {
        XQDTCommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "p_LetClause"
    // XQueryParser.g:427:1: p_LetClause : kl= LET DOLLAR p_VarName ( p_TypeDeclaration )? BIND p_ExprSingle ( COMMA DOLLAR p_VarName ( p_TypeDeclaration )? BIND p_ExprSingle )* ;
    public final XQueryParser.p_LetClause_return p_LetClause() throws RecognitionException {
        XQueryParser.p_LetClause_return retval = new XQueryParser.p_LetClause_return();
        retval.start = input.LT(1);

        XQDTCommonTree root_0 = null;

        CommonToken kl=null;
        CommonToken DOLLAR125=null;
        CommonToken BIND128=null;
        CommonToken COMMA130=null;
        CommonToken DOLLAR131=null;
        CommonToken BIND134=null;
        XQueryParser.p_VarName_return p_VarName126 = null;

        XQueryParser.p_TypeDeclaration_return p_TypeDeclaration127 = null;

        XQueryParser.p_ExprSingle_return p_ExprSingle129 = null;

        XQueryParser.p_VarName_return p_VarName132 = null;

        XQueryParser.p_TypeDeclaration_return p_TypeDeclaration133 = null;

        XQueryParser.p_ExprSingle_return p_ExprSingle135 = null;


        XQDTCommonTree kl_tree=null;
        XQDTCommonTree DOLLAR125_tree=null;
        XQDTCommonTree BIND128_tree=null;
        XQDTCommonTree COMMA130_tree=null;
        XQDTCommonTree DOLLAR131_tree=null;
        XQDTCommonTree BIND134_tree=null;

        try {
            // XQueryParser.g:428:9: (kl= LET DOLLAR p_VarName ( p_TypeDeclaration )? BIND p_ExprSingle ( COMMA DOLLAR p_VarName ( p_TypeDeclaration )? BIND p_ExprSingle )* )
            // XQueryParser.g:428:11: kl= LET DOLLAR p_VarName ( p_TypeDeclaration )? BIND p_ExprSingle ( COMMA DOLLAR p_VarName ( p_TypeDeclaration )? BIND p_ExprSingle )*
            {
            root_0 = (XQDTCommonTree)adaptor.nil();

            kl=(CommonToken)match(input,LET,FOLLOW_LET_in_p_LetClause3950); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            kl_tree = (XQDTCommonTree)adaptor.create(kl);
            adaptor.addChild(root_0, kl_tree);
            }
            if ( state.backtracking==0 ) {
              ak(kl);
            }
            DOLLAR125=(CommonToken)match(input,DOLLAR,FOLLOW_DOLLAR_in_p_LetClause3954); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            DOLLAR125_tree = (XQDTCommonTree)adaptor.create(DOLLAR125);
            adaptor.addChild(root_0, DOLLAR125_tree);
            }
            pushFollow(FOLLOW_p_VarName_in_p_LetClause3956);
            p_VarName126=p_VarName();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, p_VarName126.getTree());
            // XQueryParser.g:428:46: ( p_TypeDeclaration )?
            int alt57=2;
            int LA57_0 = input.LA(1);

            if ( (LA57_0==AS) ) {
                alt57=1;
            }
            switch (alt57) {
                case 1 :
                    // XQueryParser.g:428:46: p_TypeDeclaration
                    {
                    pushFollow(FOLLOW_p_TypeDeclaration_in_p_LetClause3958);
                    p_TypeDeclaration127=p_TypeDeclaration();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, p_TypeDeclaration127.getTree());

                    }
                    break;

            }

            BIND128=(CommonToken)match(input,BIND,FOLLOW_BIND_in_p_LetClause3961); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            BIND128_tree = (XQDTCommonTree)adaptor.create(BIND128);
            adaptor.addChild(root_0, BIND128_tree);
            }
            pushFollow(FOLLOW_p_ExprSingle_in_p_LetClause3963);
            p_ExprSingle129=p_ExprSingle();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, p_ExprSingle129.getTree());
            // XQueryParser.g:428:83: ( COMMA DOLLAR p_VarName ( p_TypeDeclaration )? BIND p_ExprSingle )*
            loop59:
            do {
                int alt59=2;
                int LA59_0 = input.LA(1);

                if ( (LA59_0==COMMA) ) {
                    alt59=1;
                }


                switch (alt59) {
            	case 1 :
            	    // XQueryParser.g:428:84: COMMA DOLLAR p_VarName ( p_TypeDeclaration )? BIND p_ExprSingle
            	    {
            	    COMMA130=(CommonToken)match(input,COMMA,FOLLOW_COMMA_in_p_LetClause3966); if (state.failed) return retval;
            	    if ( state.backtracking==0 ) {
            	    COMMA130_tree = (XQDTCommonTree)adaptor.create(COMMA130);
            	    adaptor.addChild(root_0, COMMA130_tree);
            	    }
            	    DOLLAR131=(CommonToken)match(input,DOLLAR,FOLLOW_DOLLAR_in_p_LetClause3968); if (state.failed) return retval;
            	    if ( state.backtracking==0 ) {
            	    DOLLAR131_tree = (XQDTCommonTree)adaptor.create(DOLLAR131);
            	    adaptor.addChild(root_0, DOLLAR131_tree);
            	    }
            	    pushFollow(FOLLOW_p_VarName_in_p_LetClause3970);
            	    p_VarName132=p_VarName();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, p_VarName132.getTree());
            	    // XQueryParser.g:428:107: ( p_TypeDeclaration )?
            	    int alt58=2;
            	    int LA58_0 = input.LA(1);

            	    if ( (LA58_0==AS) ) {
            	        alt58=1;
            	    }
            	    switch (alt58) {
            	        case 1 :
            	            // XQueryParser.g:428:107: p_TypeDeclaration
            	            {
            	            pushFollow(FOLLOW_p_TypeDeclaration_in_p_LetClause3972);
            	            p_TypeDeclaration133=p_TypeDeclaration();

            	            state._fsp--;
            	            if (state.failed) return retval;
            	            if ( state.backtracking==0 ) adaptor.addChild(root_0, p_TypeDeclaration133.getTree());

            	            }
            	            break;

            	    }

            	    BIND134=(CommonToken)match(input,BIND,FOLLOW_BIND_in_p_LetClause3975); if (state.failed) return retval;
            	    if ( state.backtracking==0 ) {
            	    BIND134_tree = (XQDTCommonTree)adaptor.create(BIND134);
            	    adaptor.addChild(root_0, BIND134_tree);
            	    }
            	    pushFollow(FOLLOW_p_ExprSingle_in_p_LetClause3977);
            	    p_ExprSingle135=p_ExprSingle();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, p_ExprSingle135.getTree());

            	    }
            	    break;

            	default :
            	    break loop59;
                }
            } while (true);


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (XQDTCommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (XQDTCommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "p_LetClause"

    public static class p_WindowClause_return extends ParserRuleReturnScope {
        XQDTCommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "p_WindowClause"
    // XQueryParser.g:432:1: p_WindowClause : kf= FOR ( p_TumblingWindowClause | p_SlidingWindowClause ) ;
    public final XQueryParser.p_WindowClause_return p_WindowClause() throws RecognitionException {
        XQueryParser.p_WindowClause_return retval = new XQueryParser.p_WindowClause_return();
        retval.start = input.LT(1);

        XQDTCommonTree root_0 = null;

        CommonToken kf=null;
        XQueryParser.p_TumblingWindowClause_return p_TumblingWindowClause136 = null;

        XQueryParser.p_SlidingWindowClause_return p_SlidingWindowClause137 = null;


        XQDTCommonTree kf_tree=null;

        try {
            // XQueryParser.g:433:9: (kf= FOR ( p_TumblingWindowClause | p_SlidingWindowClause ) )
            // XQueryParser.g:433:11: kf= FOR ( p_TumblingWindowClause | p_SlidingWindowClause )
            {
            root_0 = (XQDTCommonTree)adaptor.nil();

            kf=(CommonToken)match(input,FOR,FOLLOW_FOR_in_p_WindowClause4007); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            kf_tree = (XQDTCommonTree)adaptor.create(kf);
            adaptor.addChild(root_0, kf_tree);
            }
            if ( state.backtracking==0 ) {
              ak(kf);
            }
            // XQueryParser.g:433:29: ( p_TumblingWindowClause | p_SlidingWindowClause )
            int alt60=2;
            int LA60_0 = input.LA(1);

            if ( (LA60_0==TUMBLING) ) {
                alt60=1;
            }
            else if ( (LA60_0==SLIDING) ) {
                alt60=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 60, 0, input);

                throw nvae;
            }
            switch (alt60) {
                case 1 :
                    // XQueryParser.g:433:30: p_TumblingWindowClause
                    {
                    pushFollow(FOLLOW_p_TumblingWindowClause_in_p_WindowClause4012);
                    p_TumblingWindowClause136=p_TumblingWindowClause();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, p_TumblingWindowClause136.getTree());

                    }
                    break;
                case 2 :
                    // XQueryParser.g:433:55: p_SlidingWindowClause
                    {
                    pushFollow(FOLLOW_p_SlidingWindowClause_in_p_WindowClause4016);
                    p_SlidingWindowClause137=p_SlidingWindowClause();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, p_SlidingWindowClause137.getTree());

                    }
                    break;

            }


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (XQDTCommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (XQDTCommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "p_WindowClause"

    public static class p_TumblingWindowClause_return extends ParserRuleReturnScope {
        XQDTCommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "p_TumblingWindowClause"
    // XQueryParser.g:437:1: p_TumblingWindowClause : k+= TUMBLING k+= WINDOW DOLLAR p_VarName ( p_TypeDeclaration )? IN p_ExprSingle p_WindowStartCondition ( p_WindowEndCondition )? ;
    public final XQueryParser.p_TumblingWindowClause_return p_TumblingWindowClause() throws RecognitionException {
        XQueryParser.p_TumblingWindowClause_return retval = new XQueryParser.p_TumblingWindowClause_return();
        retval.start = input.LT(1);

        XQDTCommonTree root_0 = null;

        CommonToken DOLLAR138=null;
        CommonToken IN141=null;
        CommonToken k=null;
        List list_k=null;
        XQueryParser.p_VarName_return p_VarName139 = null;

        XQueryParser.p_TypeDeclaration_return p_TypeDeclaration140 = null;

        XQueryParser.p_ExprSingle_return p_ExprSingle142 = null;

        XQueryParser.p_WindowStartCondition_return p_WindowStartCondition143 = null;

        XQueryParser.p_WindowEndCondition_return p_WindowEndCondition144 = null;


        XQDTCommonTree DOLLAR138_tree=null;
        XQDTCommonTree IN141_tree=null;
        XQDTCommonTree k_tree=null;

        try {
            // XQueryParser.g:438:9: (k+= TUMBLING k+= WINDOW DOLLAR p_VarName ( p_TypeDeclaration )? IN p_ExprSingle p_WindowStartCondition ( p_WindowEndCondition )? )
            // XQueryParser.g:438:11: k+= TUMBLING k+= WINDOW DOLLAR p_VarName ( p_TypeDeclaration )? IN p_ExprSingle p_WindowStartCondition ( p_WindowEndCondition )?
            {
            root_0 = (XQDTCommonTree)adaptor.nil();

            k=(CommonToken)match(input,TUMBLING,FOLLOW_TUMBLING_in_p_TumblingWindowClause4053); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            k_tree = (XQDTCommonTree)adaptor.create(k);
            adaptor.addChild(root_0, k_tree);
            }
            if (list_k==null) list_k=new ArrayList();
            list_k.add(k);

            k=(CommonToken)match(input,WINDOW,FOLLOW_WINDOW_in_p_TumblingWindowClause4057); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            k_tree = (XQDTCommonTree)adaptor.create(k);
            adaptor.addChild(root_0, k_tree);
            }
            if (list_k==null) list_k=new ArrayList();
            list_k.add(k);

            DOLLAR138=(CommonToken)match(input,DOLLAR,FOLLOW_DOLLAR_in_p_TumblingWindowClause4059); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            DOLLAR138_tree = (XQDTCommonTree)adaptor.create(DOLLAR138);
            adaptor.addChild(root_0, DOLLAR138_tree);
            }
            pushFollow(FOLLOW_p_VarName_in_p_TumblingWindowClause4061);
            p_VarName139=p_VarName();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, p_VarName139.getTree());
            // XQueryParser.g:438:50: ( p_TypeDeclaration )?
            int alt61=2;
            int LA61_0 = input.LA(1);

            if ( (LA61_0==AS) ) {
                alt61=1;
            }
            switch (alt61) {
                case 1 :
                    // XQueryParser.g:438:50: p_TypeDeclaration
                    {
                    pushFollow(FOLLOW_p_TypeDeclaration_in_p_TumblingWindowClause4063);
                    p_TypeDeclaration140=p_TypeDeclaration();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, p_TypeDeclaration140.getTree());

                    }
                    break;

            }

            IN141=(CommonToken)match(input,IN,FOLLOW_IN_in_p_TumblingWindowClause4066); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            IN141_tree = (XQDTCommonTree)adaptor.create(IN141);
            adaptor.addChild(root_0, IN141_tree);
            }
            pushFollow(FOLLOW_p_ExprSingle_in_p_TumblingWindowClause4068);
            p_ExprSingle142=p_ExprSingle();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, p_ExprSingle142.getTree());
            pushFollow(FOLLOW_p_WindowStartCondition_in_p_TumblingWindowClause4070);
            p_WindowStartCondition143=p_WindowStartCondition();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, p_WindowStartCondition143.getTree());
            // XQueryParser.g:438:108: ( p_WindowEndCondition )?
            int alt62=2;
            int LA62_0 = input.LA(1);

            if ( (LA62_0==END||LA62_0==ONLY) ) {
                alt62=1;
            }
            switch (alt62) {
                case 1 :
                    // XQueryParser.g:438:108: p_WindowEndCondition
                    {
                    pushFollow(FOLLOW_p_WindowEndCondition_in_p_TumblingWindowClause4072);
                    p_WindowEndCondition144=p_WindowEndCondition();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, p_WindowEndCondition144.getTree());

                    }
                    break;

            }

            if ( state.backtracking==0 ) {
              ak(list_k);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (XQDTCommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (XQDTCommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "p_TumblingWindowClause"

    public static class p_SlidingWindowClause_return extends ParserRuleReturnScope {
        XQDTCommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "p_SlidingWindowClause"
    // XQueryParser.g:442:1: p_SlidingWindowClause : k+= SLIDING k+= WINDOW DOLLAR p_VarName ( p_TypeDeclaration )? IN p_ExprSingle p_WindowStartCondition ( p_WindowEndCondition )? ;
    public final XQueryParser.p_SlidingWindowClause_return p_SlidingWindowClause() throws RecognitionException {
        XQueryParser.p_SlidingWindowClause_return retval = new XQueryParser.p_SlidingWindowClause_return();
        retval.start = input.LT(1);

        XQDTCommonTree root_0 = null;

        CommonToken DOLLAR145=null;
        CommonToken IN148=null;
        CommonToken k=null;
        List list_k=null;
        XQueryParser.p_VarName_return p_VarName146 = null;

        XQueryParser.p_TypeDeclaration_return p_TypeDeclaration147 = null;

        XQueryParser.p_ExprSingle_return p_ExprSingle149 = null;

        XQueryParser.p_WindowStartCondition_return p_WindowStartCondition150 = null;

        XQueryParser.p_WindowEndCondition_return p_WindowEndCondition151 = null;


        XQDTCommonTree DOLLAR145_tree=null;
        XQDTCommonTree IN148_tree=null;
        XQDTCommonTree k_tree=null;

        try {
            // XQueryParser.g:443:9: (k+= SLIDING k+= WINDOW DOLLAR p_VarName ( p_TypeDeclaration )? IN p_ExprSingle p_WindowStartCondition ( p_WindowEndCondition )? )
            // XQueryParser.g:443:11: k+= SLIDING k+= WINDOW DOLLAR p_VarName ( p_TypeDeclaration )? IN p_ExprSingle p_WindowStartCondition ( p_WindowEndCondition )?
            {
            root_0 = (XQDTCommonTree)adaptor.nil();

            k=(CommonToken)match(input,SLIDING,FOLLOW_SLIDING_in_p_SlidingWindowClause4103); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            k_tree = (XQDTCommonTree)adaptor.create(k);
            adaptor.addChild(root_0, k_tree);
            }
            if (list_k==null) list_k=new ArrayList();
            list_k.add(k);

            k=(CommonToken)match(input,WINDOW,FOLLOW_WINDOW_in_p_SlidingWindowClause4107); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            k_tree = (XQDTCommonTree)adaptor.create(k);
            adaptor.addChild(root_0, k_tree);
            }
            if (list_k==null) list_k=new ArrayList();
            list_k.add(k);

            DOLLAR145=(CommonToken)match(input,DOLLAR,FOLLOW_DOLLAR_in_p_SlidingWindowClause4109); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            DOLLAR145_tree = (XQDTCommonTree)adaptor.create(DOLLAR145);
            adaptor.addChild(root_0, DOLLAR145_tree);
            }
            pushFollow(FOLLOW_p_VarName_in_p_SlidingWindowClause4111);
            p_VarName146=p_VarName();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, p_VarName146.getTree());
            // XQueryParser.g:443:49: ( p_TypeDeclaration )?
            int alt63=2;
            int LA63_0 = input.LA(1);

            if ( (LA63_0==AS) ) {
                alt63=1;
            }
            switch (alt63) {
                case 1 :
                    // XQueryParser.g:443:49: p_TypeDeclaration
                    {
                    pushFollow(FOLLOW_p_TypeDeclaration_in_p_SlidingWindowClause4113);
                    p_TypeDeclaration147=p_TypeDeclaration();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, p_TypeDeclaration147.getTree());

                    }
                    break;

            }

            IN148=(CommonToken)match(input,IN,FOLLOW_IN_in_p_SlidingWindowClause4116); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            IN148_tree = (XQDTCommonTree)adaptor.create(IN148);
            adaptor.addChild(root_0, IN148_tree);
            }
            pushFollow(FOLLOW_p_ExprSingle_in_p_SlidingWindowClause4118);
            p_ExprSingle149=p_ExprSingle();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, p_ExprSingle149.getTree());
            pushFollow(FOLLOW_p_WindowStartCondition_in_p_SlidingWindowClause4120);
            p_WindowStartCondition150=p_WindowStartCondition();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, p_WindowStartCondition150.getTree());
            // XQueryParser.g:443:107: ( p_WindowEndCondition )?
            int alt64=2;
            int LA64_0 = input.LA(1);

            if ( (LA64_0==END||LA64_0==ONLY) ) {
                alt64=1;
            }
            switch (alt64) {
                case 1 :
                    // XQueryParser.g:443:107: p_WindowEndCondition
                    {
                    pushFollow(FOLLOW_p_WindowEndCondition_in_p_SlidingWindowClause4122);
                    p_WindowEndCondition151=p_WindowEndCondition();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, p_WindowEndCondition151.getTree());

                    }
                    break;

            }

            if ( state.backtracking==0 ) {
              ak(list_k);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (XQDTCommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (XQDTCommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "p_SlidingWindowClause"

    public static class p_WindowStartCondition_return extends ParserRuleReturnScope {
        XQDTCommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "p_WindowStartCondition"
    // XQueryParser.g:447:1: p_WindowStartCondition : k+= START p_WindowVars k+= WHEN p_ExprSingle ;
    public final XQueryParser.p_WindowStartCondition_return p_WindowStartCondition() throws RecognitionException {
        XQueryParser.p_WindowStartCondition_return retval = new XQueryParser.p_WindowStartCondition_return();
        retval.start = input.LT(1);

        XQDTCommonTree root_0 = null;

        CommonToken k=null;
        List list_k=null;
        XQueryParser.p_WindowVars_return p_WindowVars152 = null;

        XQueryParser.p_ExprSingle_return p_ExprSingle153 = null;


        XQDTCommonTree k_tree=null;

        try {
            // XQueryParser.g:448:9: (k+= START p_WindowVars k+= WHEN p_ExprSingle )
            // XQueryParser.g:448:11: k+= START p_WindowVars k+= WHEN p_ExprSingle
            {
            root_0 = (XQDTCommonTree)adaptor.nil();

            k=(CommonToken)match(input,START,FOLLOW_START_in_p_WindowStartCondition4153); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            k_tree = (XQDTCommonTree)adaptor.create(k);
            adaptor.addChild(root_0, k_tree);
            }
            if (list_k==null) list_k=new ArrayList();
            list_k.add(k);

            pushFollow(FOLLOW_p_WindowVars_in_p_WindowStartCondition4155);
            p_WindowVars152=p_WindowVars();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, p_WindowVars152.getTree());
            k=(CommonToken)match(input,WHEN,FOLLOW_WHEN_in_p_WindowStartCondition4159); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            k_tree = (XQDTCommonTree)adaptor.create(k);
            adaptor.addChild(root_0, k_tree);
            }
            if (list_k==null) list_k=new ArrayList();
            list_k.add(k);

            pushFollow(FOLLOW_p_ExprSingle_in_p_WindowStartCondition4161);
            p_ExprSingle153=p_ExprSingle();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, p_ExprSingle153.getTree());
            if ( state.backtracking==0 ) {
              ak(list_k);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (XQDTCommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (XQDTCommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "p_WindowStartCondition"

    public static class p_WindowEndCondition_return extends ParserRuleReturnScope {
        XQDTCommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "p_WindowEndCondition"
    // XQueryParser.g:452:1: p_WindowEndCondition : (k+= ONLY )? k+= END p_WindowVars k+= WHEN p_ExprSingle ;
    public final XQueryParser.p_WindowEndCondition_return p_WindowEndCondition() throws RecognitionException {
        XQueryParser.p_WindowEndCondition_return retval = new XQueryParser.p_WindowEndCondition_return();
        retval.start = input.LT(1);

        XQDTCommonTree root_0 = null;

        CommonToken k=null;
        List list_k=null;
        XQueryParser.p_WindowVars_return p_WindowVars154 = null;

        XQueryParser.p_ExprSingle_return p_ExprSingle155 = null;


        XQDTCommonTree k_tree=null;

        try {
            // XQueryParser.g:453:9: ( (k+= ONLY )? k+= END p_WindowVars k+= WHEN p_ExprSingle )
            // XQueryParser.g:453:11: (k+= ONLY )? k+= END p_WindowVars k+= WHEN p_ExprSingle
            {
            root_0 = (XQDTCommonTree)adaptor.nil();

            // XQueryParser.g:453:12: (k+= ONLY )?
            int alt65=2;
            int LA65_0 = input.LA(1);

            if ( (LA65_0==ONLY) ) {
                alt65=1;
            }
            switch (alt65) {
                case 1 :
                    // XQueryParser.g:453:12: k+= ONLY
                    {
                    k=(CommonToken)match(input,ONLY,FOLLOW_ONLY_in_p_WindowEndCondition4191); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    k_tree = (XQDTCommonTree)adaptor.create(k);
                    adaptor.addChild(root_0, k_tree);
                    }
                    if (list_k==null) list_k=new ArrayList();
                    list_k.add(k);


                    }
                    break;

            }

            k=(CommonToken)match(input,END,FOLLOW_END_in_p_WindowEndCondition4196); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            k_tree = (XQDTCommonTree)adaptor.create(k);
            adaptor.addChild(root_0, k_tree);
            }
            if (list_k==null) list_k=new ArrayList();
            list_k.add(k);

            pushFollow(FOLLOW_p_WindowVars_in_p_WindowEndCondition4198);
            p_WindowVars154=p_WindowVars();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, p_WindowVars154.getTree());
            k=(CommonToken)match(input,WHEN,FOLLOW_WHEN_in_p_WindowEndCondition4202); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            k_tree = (XQDTCommonTree)adaptor.create(k);
            adaptor.addChild(root_0, k_tree);
            }
            if (list_k==null) list_k=new ArrayList();
            list_k.add(k);

            pushFollow(FOLLOW_p_ExprSingle_in_p_WindowEndCondition4204);
            p_ExprSingle155=p_ExprSingle();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, p_ExprSingle155.getTree());
            if ( state.backtracking==0 ) {
              ak(list_k);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (XQDTCommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (XQDTCommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "p_WindowEndCondition"

    public static class p_WindowVars_return extends ParserRuleReturnScope {
        XQDTCommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "p_WindowVars"
    // XQueryParser.g:457:1: p_WindowVars : ( DOLLAR p_QName )? ( p_PositionalVar )? (k+= PREVIOUS DOLLAR p_QName )? (k+= NEXT DOLLAR p_QName )? ;
    public final XQueryParser.p_WindowVars_return p_WindowVars() throws RecognitionException {
        XQueryParser.p_WindowVars_return retval = new XQueryParser.p_WindowVars_return();
        retval.start = input.LT(1);

        XQDTCommonTree root_0 = null;

        CommonToken DOLLAR156=null;
        CommonToken DOLLAR159=null;
        CommonToken DOLLAR161=null;
        CommonToken k=null;
        List list_k=null;
        XQueryParser.p_QName_return p_QName157 = null;

        XQueryParser.p_PositionalVar_return p_PositionalVar158 = null;

        XQueryParser.p_QName_return p_QName160 = null;

        XQueryParser.p_QName_return p_QName162 = null;


        XQDTCommonTree DOLLAR156_tree=null;
        XQDTCommonTree DOLLAR159_tree=null;
        XQDTCommonTree DOLLAR161_tree=null;
        XQDTCommonTree k_tree=null;

        try {
            // XQueryParser.g:458:9: ( ( DOLLAR p_QName )? ( p_PositionalVar )? (k+= PREVIOUS DOLLAR p_QName )? (k+= NEXT DOLLAR p_QName )? )
            // XQueryParser.g:458:11: ( DOLLAR p_QName )? ( p_PositionalVar )? (k+= PREVIOUS DOLLAR p_QName )? (k+= NEXT DOLLAR p_QName )?
            {
            root_0 = (XQDTCommonTree)adaptor.nil();

            // XQueryParser.g:458:11: ( DOLLAR p_QName )?
            int alt66=2;
            int LA66_0 = input.LA(1);

            if ( (LA66_0==DOLLAR) ) {
                alt66=1;
            }
            switch (alt66) {
                case 1 :
                    // XQueryParser.g:458:12: DOLLAR p_QName
                    {
                    DOLLAR156=(CommonToken)match(input,DOLLAR,FOLLOW_DOLLAR_in_p_WindowVars4233); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    DOLLAR156_tree = (XQDTCommonTree)adaptor.create(DOLLAR156);
                    adaptor.addChild(root_0, DOLLAR156_tree);
                    }
                    pushFollow(FOLLOW_p_QName_in_p_WindowVars4235);
                    p_QName157=p_QName();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, p_QName157.getTree());

                    }
                    break;

            }

            // XQueryParser.g:458:29: ( p_PositionalVar )?
            int alt67=2;
            int LA67_0 = input.LA(1);

            if ( (LA67_0==AT) ) {
                alt67=1;
            }
            switch (alt67) {
                case 1 :
                    // XQueryParser.g:458:29: p_PositionalVar
                    {
                    pushFollow(FOLLOW_p_PositionalVar_in_p_WindowVars4239);
                    p_PositionalVar158=p_PositionalVar();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, p_PositionalVar158.getTree());

                    }
                    break;

            }

            // XQueryParser.g:458:46: (k+= PREVIOUS DOLLAR p_QName )?
            int alt68=2;
            int LA68_0 = input.LA(1);

            if ( (LA68_0==PREVIOUS) ) {
                alt68=1;
            }
            switch (alt68) {
                case 1 :
                    // XQueryParser.g:458:47: k+= PREVIOUS DOLLAR p_QName
                    {
                    k=(CommonToken)match(input,PREVIOUS,FOLLOW_PREVIOUS_in_p_WindowVars4245); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    k_tree = (XQDTCommonTree)adaptor.create(k);
                    adaptor.addChild(root_0, k_tree);
                    }
                    if (list_k==null) list_k=new ArrayList();
                    list_k.add(k);

                    DOLLAR159=(CommonToken)match(input,DOLLAR,FOLLOW_DOLLAR_in_p_WindowVars4247); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    DOLLAR159_tree = (XQDTCommonTree)adaptor.create(DOLLAR159);
                    adaptor.addChild(root_0, DOLLAR159_tree);
                    }
                    pushFollow(FOLLOW_p_QName_in_p_WindowVars4249);
                    p_QName160=p_QName();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, p_QName160.getTree());

                    }
                    break;

            }

            // XQueryParser.g:458:76: (k+= NEXT DOLLAR p_QName )?
            int alt69=2;
            int LA69_0 = input.LA(1);

            if ( (LA69_0==NEXT) ) {
                alt69=1;
            }
            switch (alt69) {
                case 1 :
                    // XQueryParser.g:458:77: k+= NEXT DOLLAR p_QName
                    {
                    k=(CommonToken)match(input,NEXT,FOLLOW_NEXT_in_p_WindowVars4256); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    k_tree = (XQDTCommonTree)adaptor.create(k);
                    adaptor.addChild(root_0, k_tree);
                    }
                    if (list_k==null) list_k=new ArrayList();
                    list_k.add(k);

                    DOLLAR161=(CommonToken)match(input,DOLLAR,FOLLOW_DOLLAR_in_p_WindowVars4258); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    DOLLAR161_tree = (XQDTCommonTree)adaptor.create(DOLLAR161);
                    adaptor.addChild(root_0, DOLLAR161_tree);
                    }
                    pushFollow(FOLLOW_p_QName_in_p_WindowVars4260);
                    p_QName162=p_QName();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, p_QName162.getTree());

                    }
                    break;

            }

            if ( state.backtracking==0 ) {
              ak(list_k);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (XQDTCommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (XQDTCommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "p_WindowVars"

    public static class p_CountClause_return extends ParserRuleReturnScope {
        XQDTCommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "p_CountClause"
    // XQueryParser.g:471:1: p_CountClause : kc+= COUNT DOLLAR p_VarName ;
    public final XQueryParser.p_CountClause_return p_CountClause() throws RecognitionException {
        XQueryParser.p_CountClause_return retval = new XQueryParser.p_CountClause_return();
        retval.start = input.LT(1);

        XQDTCommonTree root_0 = null;

        CommonToken DOLLAR163=null;
        CommonToken kc=null;
        List list_kc=null;
        XQueryParser.p_VarName_return p_VarName164 = null;


        XQDTCommonTree DOLLAR163_tree=null;
        XQDTCommonTree kc_tree=null;

        try {
            // XQueryParser.g:472:9: (kc+= COUNT DOLLAR p_VarName )
            // XQueryParser.g:472:11: kc+= COUNT DOLLAR p_VarName
            {
            root_0 = (XQDTCommonTree)adaptor.nil();

            kc=(CommonToken)match(input,COUNT,FOLLOW_COUNT_in_p_CountClause4301); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            kc_tree = (XQDTCommonTree)adaptor.create(kc);
            adaptor.addChild(root_0, kc_tree);
            }
            if (list_kc==null) list_kc=new ArrayList();
            list_kc.add(kc);

            if ( state.backtracking==0 ) {
              ak(list_kc);
            }
            DOLLAR163=(CommonToken)match(input,DOLLAR,FOLLOW_DOLLAR_in_p_CountClause4305); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            DOLLAR163_tree = (XQDTCommonTree)adaptor.create(DOLLAR163);
            adaptor.addChild(root_0, DOLLAR163_tree);
            }
            pushFollow(FOLLOW_p_VarName_in_p_CountClause4307);
            p_VarName164=p_VarName();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, p_VarName164.getTree());

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (XQDTCommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (XQDTCommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "p_CountClause"

    public static class p_WhereClause_return extends ParserRuleReturnScope {
        XQDTCommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "p_WhereClause"
    // XQueryParser.g:476:1: p_WhereClause : kw+= WHERE p_ExprSingle ;
    public final XQueryParser.p_WhereClause_return p_WhereClause() throws RecognitionException {
        XQueryParser.p_WhereClause_return retval = new XQueryParser.p_WhereClause_return();
        retval.start = input.LT(1);

        XQDTCommonTree root_0 = null;

        CommonToken kw=null;
        List list_kw=null;
        XQueryParser.p_ExprSingle_return p_ExprSingle165 = null;


        XQDTCommonTree kw_tree=null;

        try {
            // XQueryParser.g:477:9: (kw+= WHERE p_ExprSingle )
            // XQueryParser.g:477:11: kw+= WHERE p_ExprSingle
            {
            root_0 = (XQDTCommonTree)adaptor.nil();

            kw=(CommonToken)match(input,WHERE,FOLLOW_WHERE_in_p_WhereClause4343); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            kw_tree = (XQDTCommonTree)adaptor.create(kw);
            adaptor.addChild(root_0, kw_tree);
            }
            if (list_kw==null) list_kw=new ArrayList();
            list_kw.add(kw);

            if ( state.backtracking==0 ) {
              ak(list_kw);
            }
            pushFollow(FOLLOW_p_ExprSingle_in_p_WhereClause4347);
            p_ExprSingle165=p_ExprSingle();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, p_ExprSingle165.getTree());

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (XQDTCommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (XQDTCommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "p_WhereClause"

    public static class p_GroupByClause_return extends ParserRuleReturnScope {
        XQDTCommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "p_GroupByClause"
    // XQueryParser.g:481:1: p_GroupByClause : k+= GROUP k+= BY p_GroupingSpecList ;
    public final XQueryParser.p_GroupByClause_return p_GroupByClause() throws RecognitionException {
        XQueryParser.p_GroupByClause_return retval = new XQueryParser.p_GroupByClause_return();
        retval.start = input.LT(1);

        XQDTCommonTree root_0 = null;

        CommonToken k=null;
        List list_k=null;
        XQueryParser.p_GroupingSpecList_return p_GroupingSpecList166 = null;


        XQDTCommonTree k_tree=null;

        try {
            // XQueryParser.g:482:9: (k+= GROUP k+= BY p_GroupingSpecList )
            // XQueryParser.g:482:13: k+= GROUP k+= BY p_GroupingSpecList
            {
            root_0 = (XQDTCommonTree)adaptor.nil();

            k=(CommonToken)match(input,GROUP,FOLLOW_GROUP_in_p_GroupByClause4377); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            k_tree = (XQDTCommonTree)adaptor.create(k);
            adaptor.addChild(root_0, k_tree);
            }
            if (list_k==null) list_k=new ArrayList();
            list_k.add(k);

            k=(CommonToken)match(input,BY,FOLLOW_BY_in_p_GroupByClause4381); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            k_tree = (XQDTCommonTree)adaptor.create(k);
            adaptor.addChild(root_0, k_tree);
            }
            if (list_k==null) list_k=new ArrayList();
            list_k.add(k);

            pushFollow(FOLLOW_p_GroupingSpecList_in_p_GroupByClause4383);
            p_GroupingSpecList166=p_GroupingSpecList();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, p_GroupingSpecList166.getTree());
            if ( state.backtracking==0 ) {
              ak(list_k);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (XQDTCommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (XQDTCommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "p_GroupByClause"

    public static class p_GroupingSpecList_return extends ParserRuleReturnScope {
        XQDTCommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "p_GroupingSpecList"
    // XQueryParser.g:486:1: p_GroupingSpecList : p_GroupingSpec ( COMMA p_GroupingSpec )* ;
    public final XQueryParser.p_GroupingSpecList_return p_GroupingSpecList() throws RecognitionException {
        XQueryParser.p_GroupingSpecList_return retval = new XQueryParser.p_GroupingSpecList_return();
        retval.start = input.LT(1);

        XQDTCommonTree root_0 = null;

        CommonToken COMMA168=null;
        XQueryParser.p_GroupingSpec_return p_GroupingSpec167 = null;

        XQueryParser.p_GroupingSpec_return p_GroupingSpec169 = null;


        XQDTCommonTree COMMA168_tree=null;

        try {
            // XQueryParser.g:487:9: ( p_GroupingSpec ( COMMA p_GroupingSpec )* )
            // XQueryParser.g:487:13: p_GroupingSpec ( COMMA p_GroupingSpec )*
            {
            root_0 = (XQDTCommonTree)adaptor.nil();

            pushFollow(FOLLOW_p_GroupingSpec_in_p_GroupingSpecList4413);
            p_GroupingSpec167=p_GroupingSpec();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, p_GroupingSpec167.getTree());
            // XQueryParser.g:487:28: ( COMMA p_GroupingSpec )*
            loop70:
            do {
                int alt70=2;
                int LA70_0 = input.LA(1);

                if ( (LA70_0==COMMA) ) {
                    alt70=1;
                }


                switch (alt70) {
            	case 1 :
            	    // XQueryParser.g:487:29: COMMA p_GroupingSpec
            	    {
            	    COMMA168=(CommonToken)match(input,COMMA,FOLLOW_COMMA_in_p_GroupingSpecList4416); if (state.failed) return retval;
            	    if ( state.backtracking==0 ) {
            	    COMMA168_tree = (XQDTCommonTree)adaptor.create(COMMA168);
            	    adaptor.addChild(root_0, COMMA168_tree);
            	    }
            	    pushFollow(FOLLOW_p_GroupingSpec_in_p_GroupingSpecList4418);
            	    p_GroupingSpec169=p_GroupingSpec();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, p_GroupingSpec169.getTree());

            	    }
            	    break;

            	default :
            	    break loop70;
                }
            } while (true);


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (XQDTCommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (XQDTCommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "p_GroupingSpecList"

    public static class p_GroupingSpec_return extends ParserRuleReturnScope {
        XQDTCommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "p_GroupingSpec"
    // XQueryParser.g:491:1: p_GroupingSpec : DOLLAR p_VarName (kc= COLLATION p_StringLiteral )? ;
    public final XQueryParser.p_GroupingSpec_return p_GroupingSpec() throws RecognitionException {
        XQueryParser.p_GroupingSpec_return retval = new XQueryParser.p_GroupingSpec_return();
        retval.start = input.LT(1);

        XQDTCommonTree root_0 = null;

        CommonToken kc=null;
        CommonToken DOLLAR170=null;
        XQueryParser.p_VarName_return p_VarName171 = null;

        XQueryParser.p_StringLiteral_return p_StringLiteral172 = null;


        XQDTCommonTree kc_tree=null;
        XQDTCommonTree DOLLAR170_tree=null;

        try {
            // XQueryParser.g:492:9: ( DOLLAR p_VarName (kc= COLLATION p_StringLiteral )? )
            // XQueryParser.g:492:13: DOLLAR p_VarName (kc= COLLATION p_StringLiteral )?
            {
            root_0 = (XQDTCommonTree)adaptor.nil();

            DOLLAR170=(CommonToken)match(input,DOLLAR,FOLLOW_DOLLAR_in_p_GroupingSpec4448); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            DOLLAR170_tree = (XQDTCommonTree)adaptor.create(DOLLAR170);
            adaptor.addChild(root_0, DOLLAR170_tree);
            }
            pushFollow(FOLLOW_p_VarName_in_p_GroupingSpec4450);
            p_VarName171=p_VarName();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, p_VarName171.getTree());
            // XQueryParser.g:492:30: (kc= COLLATION p_StringLiteral )?
            int alt71=2;
            int LA71_0 = input.LA(1);

            if ( (LA71_0==COLLATION) ) {
                alt71=1;
            }
            switch (alt71) {
                case 1 :
                    // XQueryParser.g:492:31: kc= COLLATION p_StringLiteral
                    {
                    kc=(CommonToken)match(input,COLLATION,FOLLOW_COLLATION_in_p_GroupingSpec4455); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    kc_tree = (XQDTCommonTree)adaptor.create(kc);
                    adaptor.addChild(root_0, kc_tree);
                    }
                    pushFollow(FOLLOW_p_StringLiteral_in_p_GroupingSpec4457);
                    p_StringLiteral172=p_StringLiteral();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, p_StringLiteral172.getTree());
                    if ( state.backtracking==0 ) {
                      ak(kc);
                    }

                    }
                    break;

            }


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (XQDTCommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (XQDTCommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "p_GroupingSpec"

    public static class p_OrderByClause_return extends ParserRuleReturnScope {
        XQDTCommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "p_OrderByClause"
    // XQueryParser.g:496:1: p_OrderByClause : ( (k+= ORDER k+= BY ) | (k+= STABLE k+= ORDER k+= BY ) ) p_OrderSpecList ;
    public final XQueryParser.p_OrderByClause_return p_OrderByClause() throws RecognitionException {
        XQueryParser.p_OrderByClause_return retval = new XQueryParser.p_OrderByClause_return();
        retval.start = input.LT(1);

        XQDTCommonTree root_0 = null;

        CommonToken k=null;
        List list_k=null;
        XQueryParser.p_OrderSpecList_return p_OrderSpecList173 = null;


        XQDTCommonTree k_tree=null;

        try {
            // XQueryParser.g:497:9: ( ( (k+= ORDER k+= BY ) | (k+= STABLE k+= ORDER k+= BY ) ) p_OrderSpecList )
            // XQueryParser.g:497:13: ( (k+= ORDER k+= BY ) | (k+= STABLE k+= ORDER k+= BY ) ) p_OrderSpecList
            {
            root_0 = (XQDTCommonTree)adaptor.nil();

            // XQueryParser.g:497:13: ( (k+= ORDER k+= BY ) | (k+= STABLE k+= ORDER k+= BY ) )
            int alt72=2;
            int LA72_0 = input.LA(1);

            if ( (LA72_0==ORDER) ) {
                alt72=1;
            }
            else if ( (LA72_0==STABLE) ) {
                alt72=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 72, 0, input);

                throw nvae;
            }
            switch (alt72) {
                case 1 :
                    // XQueryParser.g:497:14: (k+= ORDER k+= BY )
                    {
                    // XQueryParser.g:497:14: (k+= ORDER k+= BY )
                    // XQueryParser.g:497:15: k+= ORDER k+= BY
                    {
                    k=(CommonToken)match(input,ORDER,FOLLOW_ORDER_in_p_OrderByClause4493); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    k_tree = (XQDTCommonTree)adaptor.create(k);
                    adaptor.addChild(root_0, k_tree);
                    }
                    if (list_k==null) list_k=new ArrayList();
                    list_k.add(k);

                    k=(CommonToken)match(input,BY,FOLLOW_BY_in_p_OrderByClause4497); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    k_tree = (XQDTCommonTree)adaptor.create(k);
                    adaptor.addChild(root_0, k_tree);
                    }
                    if (list_k==null) list_k=new ArrayList();
                    list_k.add(k);


                    }


                    }
                    break;
                case 2 :
                    // XQueryParser.g:497:33: (k+= STABLE k+= ORDER k+= BY )
                    {
                    // XQueryParser.g:497:33: (k+= STABLE k+= ORDER k+= BY )
                    // XQueryParser.g:497:34: k+= STABLE k+= ORDER k+= BY
                    {
                    k=(CommonToken)match(input,STABLE,FOLLOW_STABLE_in_p_OrderByClause4505); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    k_tree = (XQDTCommonTree)adaptor.create(k);
                    adaptor.addChild(root_0, k_tree);
                    }
                    if (list_k==null) list_k=new ArrayList();
                    list_k.add(k);

                    k=(CommonToken)match(input,ORDER,FOLLOW_ORDER_in_p_OrderByClause4509); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    k_tree = (XQDTCommonTree)adaptor.create(k);
                    adaptor.addChild(root_0, k_tree);
                    }
                    if (list_k==null) list_k=new ArrayList();
                    list_k.add(k);

                    k=(CommonToken)match(input,BY,FOLLOW_BY_in_p_OrderByClause4513); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    k_tree = (XQDTCommonTree)adaptor.create(k);
                    adaptor.addChild(root_0, k_tree);
                    }
                    if (list_k==null) list_k=new ArrayList();
                    list_k.add(k);


                    }


                    }
                    break;

            }

            pushFollow(FOLLOW_p_OrderSpecList_in_p_OrderByClause4517);
            p_OrderSpecList173=p_OrderSpecList();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, p_OrderSpecList173.getTree());
            if ( state.backtracking==0 ) {
              ak(list_k);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (XQDTCommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (XQDTCommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "p_OrderByClause"

    public static class p_OrderSpecList_return extends ParserRuleReturnScope {
        XQDTCommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "p_OrderSpecList"
    // XQueryParser.g:501:1: p_OrderSpecList : p_OrderSpec ( COMMA p_OrderSpec )* ;
    public final XQueryParser.p_OrderSpecList_return p_OrderSpecList() throws RecognitionException {
        XQueryParser.p_OrderSpecList_return retval = new XQueryParser.p_OrderSpecList_return();
        retval.start = input.LT(1);

        XQDTCommonTree root_0 = null;

        CommonToken COMMA175=null;
        XQueryParser.p_OrderSpec_return p_OrderSpec174 = null;

        XQueryParser.p_OrderSpec_return p_OrderSpec176 = null;


        XQDTCommonTree COMMA175_tree=null;

        try {
            // XQueryParser.g:502:9: ( p_OrderSpec ( COMMA p_OrderSpec )* )
            // XQueryParser.g:502:13: p_OrderSpec ( COMMA p_OrderSpec )*
            {
            root_0 = (XQDTCommonTree)adaptor.nil();

            pushFollow(FOLLOW_p_OrderSpec_in_p_OrderSpecList4547);
            p_OrderSpec174=p_OrderSpec();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, p_OrderSpec174.getTree());
            // XQueryParser.g:502:25: ( COMMA p_OrderSpec )*
            loop73:
            do {
                int alt73=2;
                int LA73_0 = input.LA(1);

                if ( (LA73_0==COMMA) ) {
                    alt73=1;
                }


                switch (alt73) {
            	case 1 :
            	    // XQueryParser.g:502:26: COMMA p_OrderSpec
            	    {
            	    COMMA175=(CommonToken)match(input,COMMA,FOLLOW_COMMA_in_p_OrderSpecList4550); if (state.failed) return retval;
            	    if ( state.backtracking==0 ) {
            	    COMMA175_tree = (XQDTCommonTree)adaptor.create(COMMA175);
            	    adaptor.addChild(root_0, COMMA175_tree);
            	    }
            	    pushFollow(FOLLOW_p_OrderSpec_in_p_OrderSpecList4552);
            	    p_OrderSpec176=p_OrderSpec();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, p_OrderSpec176.getTree());

            	    }
            	    break;

            	default :
            	    break loop73;
                }
            } while (true);


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (XQDTCommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (XQDTCommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "p_OrderSpecList"

    public static class p_OrderSpec_return extends ParserRuleReturnScope {
        XQDTCommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "p_OrderSpec"
    // XQueryParser.g:506:1: p_OrderSpec : p_ExprSingle p_OrderModifier ;
    public final XQueryParser.p_OrderSpec_return p_OrderSpec() throws RecognitionException {
        XQueryParser.p_OrderSpec_return retval = new XQueryParser.p_OrderSpec_return();
        retval.start = input.LT(1);

        XQDTCommonTree root_0 = null;

        XQueryParser.p_ExprSingle_return p_ExprSingle177 = null;

        XQueryParser.p_OrderModifier_return p_OrderModifier178 = null;



        try {
            // XQueryParser.g:507:9: ( p_ExprSingle p_OrderModifier )
            // XQueryParser.g:507:13: p_ExprSingle p_OrderModifier
            {
            root_0 = (XQDTCommonTree)adaptor.nil();

            pushFollow(FOLLOW_p_ExprSingle_in_p_OrderSpec4582);
            p_ExprSingle177=p_ExprSingle();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, p_ExprSingle177.getTree());
            pushFollow(FOLLOW_p_OrderModifier_in_p_OrderSpec4584);
            p_OrderModifier178=p_OrderModifier();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, p_OrderModifier178.getTree());

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (XQDTCommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (XQDTCommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "p_OrderSpec"

    public static class p_OrderModifier_return extends ParserRuleReturnScope {
        XQDTCommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "p_OrderModifier"
    // XQueryParser.g:511:1: p_OrderModifier : (ka= ASCENDING | k+= DESCENDING )? (k+= EMPTY (k+= GREATEST | k+= LEAST ) )? (k+= COLLATION p_StringLiteral )? ;
    public final XQueryParser.p_OrderModifier_return p_OrderModifier() throws RecognitionException {
        XQueryParser.p_OrderModifier_return retval = new XQueryParser.p_OrderModifier_return();
        retval.start = input.LT(1);

        XQDTCommonTree root_0 = null;

        CommonToken ka=null;
        CommonToken k=null;
        List list_k=null;
        XQueryParser.p_StringLiteral_return p_StringLiteral179 = null;


        XQDTCommonTree ka_tree=null;
        XQDTCommonTree k_tree=null;

        try {
            // XQueryParser.g:512:9: ( (ka= ASCENDING | k+= DESCENDING )? (k+= EMPTY (k+= GREATEST | k+= LEAST ) )? (k+= COLLATION p_StringLiteral )? )
            // XQueryParser.g:512:11: (ka= ASCENDING | k+= DESCENDING )? (k+= EMPTY (k+= GREATEST | k+= LEAST ) )? (k+= COLLATION p_StringLiteral )?
            {
            root_0 = (XQDTCommonTree)adaptor.nil();

            // XQueryParser.g:512:11: (ka= ASCENDING | k+= DESCENDING )?
            int alt74=3;
            int LA74_0 = input.LA(1);

            if ( (LA74_0==ASCENDING) ) {
                alt74=1;
            }
            else if ( (LA74_0==DESCENDING) ) {
                alt74=2;
            }
            switch (alt74) {
                case 1 :
                    // XQueryParser.g:512:12: ka= ASCENDING
                    {
                    ka=(CommonToken)match(input,ASCENDING,FOLLOW_ASCENDING_in_p_OrderModifier4613); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    ka_tree = (XQDTCommonTree)adaptor.create(ka);
                    adaptor.addChild(root_0, ka_tree);
                    }

                    }
                    break;
                case 2 :
                    // XQueryParser.g:512:27: k+= DESCENDING
                    {
                    k=(CommonToken)match(input,DESCENDING,FOLLOW_DESCENDING_in_p_OrderModifier4619); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    k_tree = (XQDTCommonTree)adaptor.create(k);
                    adaptor.addChild(root_0, k_tree);
                    }
                    if (list_k==null) list_k=new ArrayList();
                    list_k.add(k);


                    }
                    break;

            }

            // XQueryParser.g:512:43: (k+= EMPTY (k+= GREATEST | k+= LEAST ) )?
            int alt76=2;
            int LA76_0 = input.LA(1);

            if ( (LA76_0==EMPTY) ) {
                alt76=1;
            }
            switch (alt76) {
                case 1 :
                    // XQueryParser.g:512:44: k+= EMPTY (k+= GREATEST | k+= LEAST )
                    {
                    k=(CommonToken)match(input,EMPTY,FOLLOW_EMPTY_in_p_OrderModifier4626); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    k_tree = (XQDTCommonTree)adaptor.create(k);
                    adaptor.addChild(root_0, k_tree);
                    }
                    if (list_k==null) list_k=new ArrayList();
                    list_k.add(k);

                    // XQueryParser.g:512:53: (k+= GREATEST | k+= LEAST )
                    int alt75=2;
                    int LA75_0 = input.LA(1);

                    if ( (LA75_0==GREATEST) ) {
                        alt75=1;
                    }
                    else if ( (LA75_0==LEAST) ) {
                        alt75=2;
                    }
                    else {
                        if (state.backtracking>0) {state.failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("", 75, 0, input);

                        throw nvae;
                    }
                    switch (alt75) {
                        case 1 :
                            // XQueryParser.g:512:54: k+= GREATEST
                            {
                            k=(CommonToken)match(input,GREATEST,FOLLOW_GREATEST_in_p_OrderModifier4631); if (state.failed) return retval;
                            if ( state.backtracking==0 ) {
                            k_tree = (XQDTCommonTree)adaptor.create(k);
                            adaptor.addChild(root_0, k_tree);
                            }
                            if (list_k==null) list_k=new ArrayList();
                            list_k.add(k);


                            }
                            break;
                        case 2 :
                            // XQueryParser.g:512:68: k+= LEAST
                            {
                            k=(CommonToken)match(input,LEAST,FOLLOW_LEAST_in_p_OrderModifier4637); if (state.failed) return retval;
                            if ( state.backtracking==0 ) {
                            k_tree = (XQDTCommonTree)adaptor.create(k);
                            adaptor.addChild(root_0, k_tree);
                            }
                            if (list_k==null) list_k=new ArrayList();
                            list_k.add(k);


                            }
                            break;

                    }


                    }
                    break;

            }

            // XQueryParser.g:512:80: (k+= COLLATION p_StringLiteral )?
            int alt77=2;
            int LA77_0 = input.LA(1);

            if ( (LA77_0==COLLATION) ) {
                alt77=1;
            }
            switch (alt77) {
                case 1 :
                    // XQueryParser.g:512:81: k+= COLLATION p_StringLiteral
                    {
                    k=(CommonToken)match(input,COLLATION,FOLLOW_COLLATION_in_p_OrderModifier4645); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    k_tree = (XQDTCommonTree)adaptor.create(k);
                    adaptor.addChild(root_0, k_tree);
                    }
                    if (list_k==null) list_k=new ArrayList();
                    list_k.add(k);

                    pushFollow(FOLLOW_p_StringLiteral_in_p_OrderModifier4647);
                    p_StringLiteral179=p_StringLiteral();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, p_StringLiteral179.getTree());

                    }
                    break;

            }

            if ( state.backtracking==0 ) {
              ak(list_k);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (XQDTCommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (XQDTCommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "p_OrderModifier"

    public static class p_ReturnClause_return extends ParserRuleReturnScope {
        XQDTCommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "p_ReturnClause"
    // XQueryParser.g:516:1: p_ReturnClause : kr= RETURN p_ExprSingle ;
    public final XQueryParser.p_ReturnClause_return p_ReturnClause() throws RecognitionException {
        XQueryParser.p_ReturnClause_return retval = new XQueryParser.p_ReturnClause_return();
        retval.start = input.LT(1);

        XQDTCommonTree root_0 = null;

        CommonToken kr=null;
        XQueryParser.p_ExprSingle_return p_ExprSingle180 = null;


        XQDTCommonTree kr_tree=null;

        try {
            // XQueryParser.g:517:9: (kr= RETURN p_ExprSingle )
            // XQueryParser.g:517:11: kr= RETURN p_ExprSingle
            {
            root_0 = (XQDTCommonTree)adaptor.nil();

            kr=(CommonToken)match(input,RETURN,FOLLOW_RETURN_in_p_ReturnClause4679); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            kr_tree = (XQDTCommonTree)adaptor.create(kr);
            adaptor.addChild(root_0, kr_tree);
            }
            if ( state.backtracking==0 ) {
              ak(kr);
            }
            pushFollow(FOLLOW_p_ExprSingle_in_p_ReturnClause4683);
            p_ExprSingle180=p_ExprSingle();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, p_ExprSingle180.getTree());

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (XQDTCommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (XQDTCommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "p_ReturnClause"

    public static class p_QuantifiedExpr_return extends ParserRuleReturnScope {
        XQDTCommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "p_QuantifiedExpr"
    // XQueryParser.g:521:1: p_QuantifiedExpr : (k+= SOME | k+= EVERY ) DOLLAR p_VarName ( p_TypeDeclaration )? k+= IN p_ExprSingle ( COMMA DOLLAR p_QName ( p_TypeDeclaration )? k+= IN p_ExprSingle )* k+= SATISFIES p_ExprSingle ;
    public final XQueryParser.p_QuantifiedExpr_return p_QuantifiedExpr() throws RecognitionException {
        XQueryParser.p_QuantifiedExpr_return retval = new XQueryParser.p_QuantifiedExpr_return();
        retval.start = input.LT(1);

        XQDTCommonTree root_0 = null;

        CommonToken DOLLAR181=null;
        CommonToken COMMA185=null;
        CommonToken DOLLAR186=null;
        CommonToken k=null;
        List list_k=null;
        XQueryParser.p_VarName_return p_VarName182 = null;

        XQueryParser.p_TypeDeclaration_return p_TypeDeclaration183 = null;

        XQueryParser.p_ExprSingle_return p_ExprSingle184 = null;

        XQueryParser.p_QName_return p_QName187 = null;

        XQueryParser.p_TypeDeclaration_return p_TypeDeclaration188 = null;

        XQueryParser.p_ExprSingle_return p_ExprSingle189 = null;

        XQueryParser.p_ExprSingle_return p_ExprSingle190 = null;


        XQDTCommonTree DOLLAR181_tree=null;
        XQDTCommonTree COMMA185_tree=null;
        XQDTCommonTree DOLLAR186_tree=null;
        XQDTCommonTree k_tree=null;

        try {
            // XQueryParser.g:522:9: ( (k+= SOME | k+= EVERY ) DOLLAR p_VarName ( p_TypeDeclaration )? k+= IN p_ExprSingle ( COMMA DOLLAR p_QName ( p_TypeDeclaration )? k+= IN p_ExprSingle )* k+= SATISFIES p_ExprSingle )
            // XQueryParser.g:522:13: (k+= SOME | k+= EVERY ) DOLLAR p_VarName ( p_TypeDeclaration )? k+= IN p_ExprSingle ( COMMA DOLLAR p_QName ( p_TypeDeclaration )? k+= IN p_ExprSingle )* k+= SATISFIES p_ExprSingle
            {
            root_0 = (XQDTCommonTree)adaptor.nil();

            // XQueryParser.g:522:13: (k+= SOME | k+= EVERY )
            int alt78=2;
            int LA78_0 = input.LA(1);

            if ( (LA78_0==SOME) ) {
                alt78=1;
            }
            else if ( (LA78_0==EVERY) ) {
                alt78=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 78, 0, input);

                throw nvae;
            }
            switch (alt78) {
                case 1 :
                    // XQueryParser.g:522:14: k+= SOME
                    {
                    k=(CommonToken)match(input,SOME,FOLLOW_SOME_in_p_QuantifiedExpr4714); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    k_tree = (XQDTCommonTree)adaptor.create(k);
                    adaptor.addChild(root_0, k_tree);
                    }
                    if (list_k==null) list_k=new ArrayList();
                    list_k.add(k);


                    }
                    break;
                case 2 :
                    // XQueryParser.g:522:24: k+= EVERY
                    {
                    k=(CommonToken)match(input,EVERY,FOLLOW_EVERY_in_p_QuantifiedExpr4720); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    k_tree = (XQDTCommonTree)adaptor.create(k);
                    adaptor.addChild(root_0, k_tree);
                    }
                    if (list_k==null) list_k=new ArrayList();
                    list_k.add(k);


                    }
                    break;

            }

            DOLLAR181=(CommonToken)match(input,DOLLAR,FOLLOW_DOLLAR_in_p_QuantifiedExpr4723); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            DOLLAR181_tree = (XQDTCommonTree)adaptor.create(DOLLAR181);
            adaptor.addChild(root_0, DOLLAR181_tree);
            }
            pushFollow(FOLLOW_p_VarName_in_p_QuantifiedExpr4725);
            p_VarName182=p_VarName();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, p_VarName182.getTree());
            // XQueryParser.g:522:51: ( p_TypeDeclaration )?
            int alt79=2;
            int LA79_0 = input.LA(1);

            if ( (LA79_0==AS) ) {
                alt79=1;
            }
            switch (alt79) {
                case 1 :
                    // XQueryParser.g:522:51: p_TypeDeclaration
                    {
                    pushFollow(FOLLOW_p_TypeDeclaration_in_p_QuantifiedExpr4727);
                    p_TypeDeclaration183=p_TypeDeclaration();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, p_TypeDeclaration183.getTree());

                    }
                    break;

            }

            k=(CommonToken)match(input,IN,FOLLOW_IN_in_p_QuantifiedExpr4732); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            k_tree = (XQDTCommonTree)adaptor.create(k);
            adaptor.addChild(root_0, k_tree);
            }
            if (list_k==null) list_k=new ArrayList();
            list_k.add(k);

            pushFollow(FOLLOW_p_ExprSingle_in_p_QuantifiedExpr4734);
            p_ExprSingle184=p_ExprSingle();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, p_ExprSingle184.getTree());
            // XQueryParser.g:522:89: ( COMMA DOLLAR p_QName ( p_TypeDeclaration )? k+= IN p_ExprSingle )*
            loop81:
            do {
                int alt81=2;
                int LA81_0 = input.LA(1);

                if ( (LA81_0==COMMA) ) {
                    alt81=1;
                }


                switch (alt81) {
            	case 1 :
            	    // XQueryParser.g:522:90: COMMA DOLLAR p_QName ( p_TypeDeclaration )? k+= IN p_ExprSingle
            	    {
            	    COMMA185=(CommonToken)match(input,COMMA,FOLLOW_COMMA_in_p_QuantifiedExpr4737); if (state.failed) return retval;
            	    if ( state.backtracking==0 ) {
            	    COMMA185_tree = (XQDTCommonTree)adaptor.create(COMMA185);
            	    adaptor.addChild(root_0, COMMA185_tree);
            	    }
            	    DOLLAR186=(CommonToken)match(input,DOLLAR,FOLLOW_DOLLAR_in_p_QuantifiedExpr4739); if (state.failed) return retval;
            	    if ( state.backtracking==0 ) {
            	    DOLLAR186_tree = (XQDTCommonTree)adaptor.create(DOLLAR186);
            	    adaptor.addChild(root_0, DOLLAR186_tree);
            	    }
            	    pushFollow(FOLLOW_p_QName_in_p_QuantifiedExpr4741);
            	    p_QName187=p_QName();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, p_QName187.getTree());
            	    // XQueryParser.g:522:111: ( p_TypeDeclaration )?
            	    int alt80=2;
            	    int LA80_0 = input.LA(1);

            	    if ( (LA80_0==AS) ) {
            	        alt80=1;
            	    }
            	    switch (alt80) {
            	        case 1 :
            	            // XQueryParser.g:522:111: p_TypeDeclaration
            	            {
            	            pushFollow(FOLLOW_p_TypeDeclaration_in_p_QuantifiedExpr4743);
            	            p_TypeDeclaration188=p_TypeDeclaration();

            	            state._fsp--;
            	            if (state.failed) return retval;
            	            if ( state.backtracking==0 ) adaptor.addChild(root_0, p_TypeDeclaration188.getTree());

            	            }
            	            break;

            	    }

            	    k=(CommonToken)match(input,IN,FOLLOW_IN_in_p_QuantifiedExpr4748); if (state.failed) return retval;
            	    if ( state.backtracking==0 ) {
            	    k_tree = (XQDTCommonTree)adaptor.create(k);
            	    adaptor.addChild(root_0, k_tree);
            	    }
            	    if (list_k==null) list_k=new ArrayList();
            	    list_k.add(k);

            	    pushFollow(FOLLOW_p_ExprSingle_in_p_QuantifiedExpr4750);
            	    p_ExprSingle189=p_ExprSingle();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, p_ExprSingle189.getTree());

            	    }
            	    break;

            	default :
            	    break loop81;
                }
            } while (true);

            k=(CommonToken)match(input,SATISFIES,FOLLOW_SATISFIES_in_p_QuantifiedExpr4756); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            k_tree = (XQDTCommonTree)adaptor.create(k);
            adaptor.addChild(root_0, k_tree);
            }
            if (list_k==null) list_k=new ArrayList();
            list_k.add(k);

            pushFollow(FOLLOW_p_ExprSingle_in_p_QuantifiedExpr4758);
            p_ExprSingle190=p_ExprSingle();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, p_ExprSingle190.getTree());
            if ( state.backtracking==0 ) {
              ak(list_k);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (XQDTCommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (XQDTCommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "p_QuantifiedExpr"

    public static class p_TypeswitchExpr_return extends ParserRuleReturnScope {
        XQDTCommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "p_TypeswitchExpr"
    // XQueryParser.g:526:1: p_TypeswitchExpr : k+= TYPESWITCH LPAREN pm_Expr RPAREN ( p_CaseClause )+ k+= DEFAULT ( DOLLAR p_VarName )? k+= RETURN p_ExprSingle ;
    public final XQueryParser.p_TypeswitchExpr_return p_TypeswitchExpr() throws RecognitionException {
        XQueryParser.p_TypeswitchExpr_return retval = new XQueryParser.p_TypeswitchExpr_return();
        retval.start = input.LT(1);

        XQDTCommonTree root_0 = null;

        CommonToken LPAREN191=null;
        CommonToken RPAREN193=null;
        CommonToken DOLLAR195=null;
        CommonToken k=null;
        List list_k=null;
        XQueryParser.pm_Expr_return pm_Expr192 = null;

        XQueryParser.p_CaseClause_return p_CaseClause194 = null;

        XQueryParser.p_VarName_return p_VarName196 = null;

        XQueryParser.p_ExprSingle_return p_ExprSingle197 = null;


        XQDTCommonTree LPAREN191_tree=null;
        XQDTCommonTree RPAREN193_tree=null;
        XQDTCommonTree DOLLAR195_tree=null;
        XQDTCommonTree k_tree=null;

        try {
            // XQueryParser.g:527:9: (k+= TYPESWITCH LPAREN pm_Expr RPAREN ( p_CaseClause )+ k+= DEFAULT ( DOLLAR p_VarName )? k+= RETURN p_ExprSingle )
            // XQueryParser.g:527:11: k+= TYPESWITCH LPAREN pm_Expr RPAREN ( p_CaseClause )+ k+= DEFAULT ( DOLLAR p_VarName )? k+= RETURN p_ExprSingle
            {
            root_0 = (XQDTCommonTree)adaptor.nil();

            k=(CommonToken)match(input,TYPESWITCH,FOLLOW_TYPESWITCH_in_p_TypeswitchExpr4788); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            k_tree = (XQDTCommonTree)adaptor.create(k);
            adaptor.addChild(root_0, k_tree);
            }
            if (list_k==null) list_k=new ArrayList();
            list_k.add(k);

            LPAREN191=(CommonToken)match(input,LPAREN,FOLLOW_LPAREN_in_p_TypeswitchExpr4790); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            LPAREN191_tree = (XQDTCommonTree)adaptor.create(LPAREN191);
            adaptor.addChild(root_0, LPAREN191_tree);
            }
            pushFollow(FOLLOW_pm_Expr_in_p_TypeswitchExpr4792);
            pm_Expr192=pm_Expr();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, pm_Expr192.getTree());
            RPAREN193=(CommonToken)match(input,RPAREN,FOLLOW_RPAREN_in_p_TypeswitchExpr4794); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            RPAREN193_tree = (XQDTCommonTree)adaptor.create(RPAREN193);
            adaptor.addChild(root_0, RPAREN193_tree);
            }
            // XQueryParser.g:527:47: ( p_CaseClause )+
            int cnt82=0;
            loop82:
            do {
                int alt82=2;
                int LA82_0 = input.LA(1);

                if ( (LA82_0==CASE) ) {
                    alt82=1;
                }


                switch (alt82) {
            	case 1 :
            	    // XQueryParser.g:527:47: p_CaseClause
            	    {
            	    pushFollow(FOLLOW_p_CaseClause_in_p_TypeswitchExpr4796);
            	    p_CaseClause194=p_CaseClause();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, p_CaseClause194.getTree());

            	    }
            	    break;

            	default :
            	    if ( cnt82 >= 1 ) break loop82;
            	    if (state.backtracking>0) {state.failed=true; return retval;}
                        EarlyExitException eee =
                            new EarlyExitException(82, input);
                        throw eee;
                }
                cnt82++;
            } while (true);

            k=(CommonToken)match(input,DEFAULT,FOLLOW_DEFAULT_in_p_TypeswitchExpr4801); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            k_tree = (XQDTCommonTree)adaptor.create(k);
            adaptor.addChild(root_0, k_tree);
            }
            if (list_k==null) list_k=new ArrayList();
            list_k.add(k);

            // XQueryParser.g:527:72: ( DOLLAR p_VarName )?
            int alt83=2;
            int LA83_0 = input.LA(1);

            if ( (LA83_0==DOLLAR) ) {
                alt83=1;
            }
            switch (alt83) {
                case 1 :
                    // XQueryParser.g:527:73: DOLLAR p_VarName
                    {
                    DOLLAR195=(CommonToken)match(input,DOLLAR,FOLLOW_DOLLAR_in_p_TypeswitchExpr4804); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    DOLLAR195_tree = (XQDTCommonTree)adaptor.create(DOLLAR195);
                    adaptor.addChild(root_0, DOLLAR195_tree);
                    }
                    pushFollow(FOLLOW_p_VarName_in_p_TypeswitchExpr4806);
                    p_VarName196=p_VarName();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, p_VarName196.getTree());

                    }
                    break;

            }

            k=(CommonToken)match(input,RETURN,FOLLOW_RETURN_in_p_TypeswitchExpr4812); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            k_tree = (XQDTCommonTree)adaptor.create(k);
            adaptor.addChild(root_0, k_tree);
            }
            if (list_k==null) list_k=new ArrayList();
            list_k.add(k);

            pushFollow(FOLLOW_p_ExprSingle_in_p_TypeswitchExpr4814);
            p_ExprSingle197=p_ExprSingle();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, p_ExprSingle197.getTree());
            if ( state.backtracking==0 ) {
              ak(list_k);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (XQDTCommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (XQDTCommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "p_TypeswitchExpr"

    public static class p_CaseClause_return extends ParserRuleReturnScope {
        XQDTCommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "p_CaseClause"
    // XQueryParser.g:531:1: p_CaseClause : k+= CASE ( DOLLAR p_VarName k+= AS )? p_SequenceType k+= RETURN p_ExprSingle ;
    public final XQueryParser.p_CaseClause_return p_CaseClause() throws RecognitionException {
        XQueryParser.p_CaseClause_return retval = new XQueryParser.p_CaseClause_return();
        retval.start = input.LT(1);

        XQDTCommonTree root_0 = null;

        CommonToken DOLLAR198=null;
        CommonToken k=null;
        List list_k=null;
        XQueryParser.p_VarName_return p_VarName199 = null;

        XQueryParser.p_SequenceType_return p_SequenceType200 = null;

        XQueryParser.p_ExprSingle_return p_ExprSingle201 = null;


        XQDTCommonTree DOLLAR198_tree=null;
        XQDTCommonTree k_tree=null;

        try {
            // XQueryParser.g:532:9: (k+= CASE ( DOLLAR p_VarName k+= AS )? p_SequenceType k+= RETURN p_ExprSingle )
            // XQueryParser.g:532:11: k+= CASE ( DOLLAR p_VarName k+= AS )? p_SequenceType k+= RETURN p_ExprSingle
            {
            root_0 = (XQDTCommonTree)adaptor.nil();

            k=(CommonToken)match(input,CASE,FOLLOW_CASE_in_p_CaseClause4844); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            k_tree = (XQDTCommonTree)adaptor.create(k);
            adaptor.addChild(root_0, k_tree);
            }
            if (list_k==null) list_k=new ArrayList();
            list_k.add(k);

            // XQueryParser.g:532:19: ( DOLLAR p_VarName k+= AS )?
            int alt84=2;
            int LA84_0 = input.LA(1);

            if ( (LA84_0==DOLLAR) ) {
                alt84=1;
            }
            switch (alt84) {
                case 1 :
                    // XQueryParser.g:532:20: DOLLAR p_VarName k+= AS
                    {
                    DOLLAR198=(CommonToken)match(input,DOLLAR,FOLLOW_DOLLAR_in_p_CaseClause4847); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    DOLLAR198_tree = (XQDTCommonTree)adaptor.create(DOLLAR198);
                    adaptor.addChild(root_0, DOLLAR198_tree);
                    }
                    pushFollow(FOLLOW_p_VarName_in_p_CaseClause4849);
                    p_VarName199=p_VarName();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, p_VarName199.getTree());
                    k=(CommonToken)match(input,AS,FOLLOW_AS_in_p_CaseClause4853); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    k_tree = (XQDTCommonTree)adaptor.create(k);
                    adaptor.addChild(root_0, k_tree);
                    }
                    if (list_k==null) list_k=new ArrayList();
                    list_k.add(k);


                    }
                    break;

            }

            pushFollow(FOLLOW_p_SequenceType_in_p_CaseClause4857);
            p_SequenceType200=p_SequenceType();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, p_SequenceType200.getTree());
            k=(CommonToken)match(input,RETURN,FOLLOW_RETURN_in_p_CaseClause4861); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            k_tree = (XQDTCommonTree)adaptor.create(k);
            adaptor.addChild(root_0, k_tree);
            }
            if (list_k==null) list_k=new ArrayList();
            list_k.add(k);

            pushFollow(FOLLOW_p_ExprSingle_in_p_CaseClause4863);
            p_ExprSingle201=p_ExprSingle();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, p_ExprSingle201.getTree());
            if ( state.backtracking==0 ) {
              ak(list_k);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (XQDTCommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (XQDTCommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "p_CaseClause"

    public static class p_IfExpr_return extends ParserRuleReturnScope {
        XQDTCommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "p_IfExpr"
    // XQueryParser.g:536:1: p_IfExpr : k+= IF LPAREN pm_Expr RPAREN k+= THEN p_ExprSingle k+= ELSE p_ExprSingle ;
    public final XQueryParser.p_IfExpr_return p_IfExpr() throws RecognitionException {
        XQueryParser.p_IfExpr_return retval = new XQueryParser.p_IfExpr_return();
        retval.start = input.LT(1);

        XQDTCommonTree root_0 = null;

        CommonToken LPAREN202=null;
        CommonToken RPAREN204=null;
        CommonToken k=null;
        List list_k=null;
        XQueryParser.pm_Expr_return pm_Expr203 = null;

        XQueryParser.p_ExprSingle_return p_ExprSingle205 = null;

        XQueryParser.p_ExprSingle_return p_ExprSingle206 = null;


        XQDTCommonTree LPAREN202_tree=null;
        XQDTCommonTree RPAREN204_tree=null;
        XQDTCommonTree k_tree=null;

        try {
            // XQueryParser.g:537:9: (k+= IF LPAREN pm_Expr RPAREN k+= THEN p_ExprSingle k+= ELSE p_ExprSingle )
            // XQueryParser.g:537:11: k+= IF LPAREN pm_Expr RPAREN k+= THEN p_ExprSingle k+= ELSE p_ExprSingle
            {
            root_0 = (XQDTCommonTree)adaptor.nil();

            k=(CommonToken)match(input,IF,FOLLOW_IF_in_p_IfExpr4893); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            k_tree = (XQDTCommonTree)adaptor.create(k);
            adaptor.addChild(root_0, k_tree);
            }
            if (list_k==null) list_k=new ArrayList();
            list_k.add(k);

            LPAREN202=(CommonToken)match(input,LPAREN,FOLLOW_LPAREN_in_p_IfExpr4895); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            LPAREN202_tree = (XQDTCommonTree)adaptor.create(LPAREN202);
            adaptor.addChild(root_0, LPAREN202_tree);
            }
            pushFollow(FOLLOW_pm_Expr_in_p_IfExpr4897);
            pm_Expr203=pm_Expr();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, pm_Expr203.getTree());
            RPAREN204=(CommonToken)match(input,RPAREN,FOLLOW_RPAREN_in_p_IfExpr4899); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            RPAREN204_tree = (XQDTCommonTree)adaptor.create(RPAREN204);
            adaptor.addChild(root_0, RPAREN204_tree);
            }
            k=(CommonToken)match(input,THEN,FOLLOW_THEN_in_p_IfExpr4903); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            k_tree = (XQDTCommonTree)adaptor.create(k);
            adaptor.addChild(root_0, k_tree);
            }
            if (list_k==null) list_k=new ArrayList();
            list_k.add(k);

            pushFollow(FOLLOW_p_ExprSingle_in_p_IfExpr4905);
            p_ExprSingle205=p_ExprSingle();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, p_ExprSingle205.getTree());
            k=(CommonToken)match(input,ELSE,FOLLOW_ELSE_in_p_IfExpr4909); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            k_tree = (XQDTCommonTree)adaptor.create(k);
            adaptor.addChild(root_0, k_tree);
            }
            if (list_k==null) list_k=new ArrayList();
            list_k.add(k);

            pushFollow(FOLLOW_p_ExprSingle_in_p_IfExpr4911);
            p_ExprSingle206=p_ExprSingle();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, p_ExprSingle206.getTree());
            if ( state.backtracking==0 ) {
              ak(list_k);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (XQDTCommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (XQDTCommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "p_IfExpr"

    public static class p_OrExpr_return extends ParserRuleReturnScope {
        XQDTCommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "p_OrExpr"
    // XQueryParser.g:541:1: p_OrExpr : p_AndExpr (k= OR p_AndExpr )* ;
    public final XQueryParser.p_OrExpr_return p_OrExpr() throws RecognitionException {
        XQueryParser.p_OrExpr_return retval = new XQueryParser.p_OrExpr_return();
        retval.start = input.LT(1);

        XQDTCommonTree root_0 = null;

        CommonToken k=null;
        XQueryParser.p_AndExpr_return p_AndExpr207 = null;

        XQueryParser.p_AndExpr_return p_AndExpr208 = null;


        XQDTCommonTree k_tree=null;

        try {
            // XQueryParser.g:542:9: ( p_AndExpr (k= OR p_AndExpr )* )
            // XQueryParser.g:542:11: p_AndExpr (k= OR p_AndExpr )*
            {
            root_0 = (XQDTCommonTree)adaptor.nil();

            pushFollow(FOLLOW_p_AndExpr_in_p_OrExpr4939);
            p_AndExpr207=p_AndExpr();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, p_AndExpr207.getTree());
            // XQueryParser.g:542:21: (k= OR p_AndExpr )*
            loop85:
            do {
                int alt85=2;
                int LA85_0 = input.LA(1);

                if ( (LA85_0==OR) ) {
                    alt85=1;
                }


                switch (alt85) {
            	case 1 :
            	    // XQueryParser.g:542:23: k= OR p_AndExpr
            	    {
            	    k=(CommonToken)match(input,OR,FOLLOW_OR_in_p_OrExpr4945); if (state.failed) return retval;
            	    if ( state.backtracking==0 ) {
            	    k_tree = (XQDTCommonTree)adaptor.create(k);
            	    adaptor.addChild(root_0, k_tree);
            	    }
            	    if ( state.backtracking==0 ) {
            	      ak(k);
            	    }
            	    pushFollow(FOLLOW_p_AndExpr_in_p_OrExpr4949);
            	    p_AndExpr208=p_AndExpr();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, p_AndExpr208.getTree());

            	    }
            	    break;

            	default :
            	    break loop85;
                }
            } while (true);


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (XQDTCommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (XQDTCommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "p_OrExpr"

    public static class p_AndExpr_return extends ParserRuleReturnScope {
        XQDTCommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "p_AndExpr"
    // XQueryParser.g:546:1: p_AndExpr : p_ComparisonExpr (k= AND p_ComparisonExpr )* ;
    public final XQueryParser.p_AndExpr_return p_AndExpr() throws RecognitionException {
        XQueryParser.p_AndExpr_return retval = new XQueryParser.p_AndExpr_return();
        retval.start = input.LT(1);

        XQDTCommonTree root_0 = null;

        CommonToken k=null;
        XQueryParser.p_ComparisonExpr_return p_ComparisonExpr209 = null;

        XQueryParser.p_ComparisonExpr_return p_ComparisonExpr210 = null;


        XQDTCommonTree k_tree=null;

        try {
            // XQueryParser.g:547:9: ( p_ComparisonExpr (k= AND p_ComparisonExpr )* )
            // XQueryParser.g:547:13: p_ComparisonExpr (k= AND p_ComparisonExpr )*
            {
            root_0 = (XQDTCommonTree)adaptor.nil();

            pushFollow(FOLLOW_p_ComparisonExpr_in_p_AndExpr4980);
            p_ComparisonExpr209=p_ComparisonExpr();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, p_ComparisonExpr209.getTree());
            // XQueryParser.g:547:30: (k= AND p_ComparisonExpr )*
            loop86:
            do {
                int alt86=2;
                int LA86_0 = input.LA(1);

                if ( (LA86_0==AND) ) {
                    alt86=1;
                }


                switch (alt86) {
            	case 1 :
            	    // XQueryParser.g:547:32: k= AND p_ComparisonExpr
            	    {
            	    k=(CommonToken)match(input,AND,FOLLOW_AND_in_p_AndExpr4986); if (state.failed) return retval;
            	    if ( state.backtracking==0 ) {
            	    k_tree = (XQDTCommonTree)adaptor.create(k);
            	    adaptor.addChild(root_0, k_tree);
            	    }
            	    if ( state.backtracking==0 ) {
            	      ak(k);
            	    }
            	    pushFollow(FOLLOW_p_ComparisonExpr_in_p_AndExpr4990);
            	    p_ComparisonExpr210=p_ComparisonExpr();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, p_ComparisonExpr210.getTree());

            	    }
            	    break;

            	default :
            	    break loop86;
                }
            } while (true);


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (XQDTCommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (XQDTCommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "p_AndExpr"

    public static class p_ComparisonExpr_return extends ParserRuleReturnScope {
        XQDTCommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "p_ComparisonExpr"
    // XQueryParser.g:551:1: p_ComparisonExpr : p_RangeExpr ( ( p_ValueComp | p_GeneralComp | p_NodeComp ) p_RangeExpr )? ;
    public final XQueryParser.p_ComparisonExpr_return p_ComparisonExpr() throws RecognitionException {
        XQueryParser.p_ComparisonExpr_return retval = new XQueryParser.p_ComparisonExpr_return();
        retval.start = input.LT(1);

        XQDTCommonTree root_0 = null;

        XQueryParser.p_RangeExpr_return p_RangeExpr211 = null;

        XQueryParser.p_ValueComp_return p_ValueComp212 = null;

        XQueryParser.p_GeneralComp_return p_GeneralComp213 = null;

        XQueryParser.p_NodeComp_return p_NodeComp214 = null;

        XQueryParser.p_RangeExpr_return p_RangeExpr215 = null;



        try {
            // XQueryParser.g:552:9: ( p_RangeExpr ( ( p_ValueComp | p_GeneralComp | p_NodeComp ) p_RangeExpr )? )
            // XQueryParser.g:552:13: p_RangeExpr ( ( p_ValueComp | p_GeneralComp | p_NodeComp ) p_RangeExpr )?
            {
            root_0 = (XQDTCommonTree)adaptor.nil();

            pushFollow(FOLLOW_p_RangeExpr_in_p_ComparisonExpr5021);
            p_RangeExpr211=p_RangeExpr();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, p_RangeExpr211.getTree());
            // XQueryParser.g:552:25: ( ( p_ValueComp | p_GeneralComp | p_NodeComp ) p_RangeExpr )?
            int alt88=2;
            int LA88_0 = input.LA(1);

            if ( (LA88_0==EQ||LA88_0==GE||LA88_0==GT||LA88_0==IS||LA88_0==LE||LA88_0==LT||LA88_0==NE||LA88_0==EQUAL||LA88_0==NOTEQUAL||(LA88_0>=SMALLER && LA88_0<=GREATER_GREATER)) ) {
                alt88=1;
            }
            switch (alt88) {
                case 1 :
                    // XQueryParser.g:552:27: ( p_ValueComp | p_GeneralComp | p_NodeComp ) p_RangeExpr
                    {
                    // XQueryParser.g:552:27: ( p_ValueComp | p_GeneralComp | p_NodeComp )
                    int alt87=3;
                    switch ( input.LA(1) ) {
                    case EQ:
                    case GE:
                    case GT:
                    case LE:
                    case LT:
                    case NE:
                        {
                        alt87=1;
                        }
                        break;
                    case EQUAL:
                    case NOTEQUAL:
                    case SMALLER:
                    case GREATER:
                    case SMALLEREQ:
                    case GREATEREQ:
                        {
                        alt87=2;
                        }
                        break;
                    case IS:
                    case SMALLER_SMALLER:
                    case GREATER_GREATER:
                        {
                        alt87=3;
                        }
                        break;
                    default:
                        if (state.backtracking>0) {state.failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("", 87, 0, input);

                        throw nvae;
                    }

                    switch (alt87) {
                        case 1 :
                            // XQueryParser.g:552:28: p_ValueComp
                            {
                            pushFollow(FOLLOW_p_ValueComp_in_p_ComparisonExpr5026);
                            p_ValueComp212=p_ValueComp();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) adaptor.addChild(root_0, p_ValueComp212.getTree());

                            }
                            break;
                        case 2 :
                            // XQueryParser.g:552:42: p_GeneralComp
                            {
                            pushFollow(FOLLOW_p_GeneralComp_in_p_ComparisonExpr5030);
                            p_GeneralComp213=p_GeneralComp();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) adaptor.addChild(root_0, p_GeneralComp213.getTree());

                            }
                            break;
                        case 3 :
                            // XQueryParser.g:552:58: p_NodeComp
                            {
                            pushFollow(FOLLOW_p_NodeComp_in_p_ComparisonExpr5034);
                            p_NodeComp214=p_NodeComp();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) adaptor.addChild(root_0, p_NodeComp214.getTree());

                            }
                            break;

                    }

                    pushFollow(FOLLOW_p_RangeExpr_in_p_ComparisonExpr5037);
                    p_RangeExpr215=p_RangeExpr();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, p_RangeExpr215.getTree());

                    }
                    break;

            }


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (XQDTCommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (XQDTCommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "p_ComparisonExpr"

    public static class p_RangeExpr_return extends ParserRuleReturnScope {
        XQDTCommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "p_RangeExpr"
    // XQueryParser.g:556:1: p_RangeExpr : p_AdditiveExpr (k= TO p_AdditiveExpr )? ;
    public final XQueryParser.p_RangeExpr_return p_RangeExpr() throws RecognitionException {
        XQueryParser.p_RangeExpr_return retval = new XQueryParser.p_RangeExpr_return();
        retval.start = input.LT(1);

        XQDTCommonTree root_0 = null;

        CommonToken k=null;
        XQueryParser.p_AdditiveExpr_return p_AdditiveExpr216 = null;

        XQueryParser.p_AdditiveExpr_return p_AdditiveExpr217 = null;


        XQDTCommonTree k_tree=null;

        try {
            // XQueryParser.g:557:9: ( p_AdditiveExpr (k= TO p_AdditiveExpr )? )
            // XQueryParser.g:557:13: p_AdditiveExpr (k= TO p_AdditiveExpr )?
            {
            root_0 = (XQDTCommonTree)adaptor.nil();

            pushFollow(FOLLOW_p_AdditiveExpr_in_p_RangeExpr5068);
            p_AdditiveExpr216=p_AdditiveExpr();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, p_AdditiveExpr216.getTree());
            // XQueryParser.g:557:28: (k= TO p_AdditiveExpr )?
            int alt89=2;
            int LA89_0 = input.LA(1);

            if ( (LA89_0==TO) ) {
                alt89=1;
            }
            switch (alt89) {
                case 1 :
                    // XQueryParser.g:557:30: k= TO p_AdditiveExpr
                    {
                    k=(CommonToken)match(input,TO,FOLLOW_TO_in_p_RangeExpr5074); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    k_tree = (XQDTCommonTree)adaptor.create(k);
                    adaptor.addChild(root_0, k_tree);
                    }
                    if ( state.backtracking==0 ) {
                      ak(k);
                    }
                    pushFollow(FOLLOW_p_AdditiveExpr_in_p_RangeExpr5078);
                    p_AdditiveExpr217=p_AdditiveExpr();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, p_AdditiveExpr217.getTree());

                    }
                    break;

            }


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (XQDTCommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (XQDTCommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "p_RangeExpr"

    public static class p_AdditiveExpr_return extends ParserRuleReturnScope {
        XQDTCommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "p_AdditiveExpr"
    // XQueryParser.g:561:1: p_AdditiveExpr : p_MultiplicativeExpr ( ( PLUS | MINUS ) p_MultiplicativeExpr )* ;
    public final XQueryParser.p_AdditiveExpr_return p_AdditiveExpr() throws RecognitionException {
        XQueryParser.p_AdditiveExpr_return retval = new XQueryParser.p_AdditiveExpr_return();
        retval.start = input.LT(1);

        XQDTCommonTree root_0 = null;

        CommonToken set219=null;
        XQueryParser.p_MultiplicativeExpr_return p_MultiplicativeExpr218 = null;

        XQueryParser.p_MultiplicativeExpr_return p_MultiplicativeExpr220 = null;


        XQDTCommonTree set219_tree=null;

        try {
            // XQueryParser.g:562:9: ( p_MultiplicativeExpr ( ( PLUS | MINUS ) p_MultiplicativeExpr )* )
            // XQueryParser.g:562:13: p_MultiplicativeExpr ( ( PLUS | MINUS ) p_MultiplicativeExpr )*
            {
            root_0 = (XQDTCommonTree)adaptor.nil();

            pushFollow(FOLLOW_p_MultiplicativeExpr_in_p_AdditiveExpr5109);
            p_MultiplicativeExpr218=p_MultiplicativeExpr();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, p_MultiplicativeExpr218.getTree());
            // XQueryParser.g:562:34: ( ( PLUS | MINUS ) p_MultiplicativeExpr )*
            loop90:
            do {
                int alt90=2;
                int LA90_0 = input.LA(1);

                if ( ((LA90_0>=PLUS && LA90_0<=MINUS)) ) {
                    alt90=1;
                }


                switch (alt90) {
            	case 1 :
            	    // XQueryParser.g:562:36: ( PLUS | MINUS ) p_MultiplicativeExpr
            	    {
            	    set219=(CommonToken)input.LT(1);
            	    if ( (input.LA(1)>=PLUS && input.LA(1)<=MINUS) ) {
            	        input.consume();
            	        if ( state.backtracking==0 ) adaptor.addChild(root_0, (XQDTCommonTree)adaptor.create(set219));
            	        state.errorRecovery=false;state.failed=false;
            	    }
            	    else {
            	        if (state.backtracking>0) {state.failed=true; return retval;}
            	        MismatchedSetException mse = new MismatchedSetException(null,input);
            	        throw mse;
            	    }

            	    pushFollow(FOLLOW_p_MultiplicativeExpr_in_p_AdditiveExpr5121);
            	    p_MultiplicativeExpr220=p_MultiplicativeExpr();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, p_MultiplicativeExpr220.getTree());

            	    }
            	    break;

            	default :
            	    break loop90;
                }
            } while (true);


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (XQDTCommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (XQDTCommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "p_AdditiveExpr"

    public static class p_MultiplicativeExpr_return extends ParserRuleReturnScope {
        XQDTCommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "p_MultiplicativeExpr"
    // XQueryParser.g:566:1: p_MultiplicativeExpr : p_UnionExpr ( ( STAR | kd= DIV | ki= IDIV | km= MOD ) p_UnionExpr )* ;
    public final XQueryParser.p_MultiplicativeExpr_return p_MultiplicativeExpr() throws RecognitionException {
        XQueryParser.p_MultiplicativeExpr_return retval = new XQueryParser.p_MultiplicativeExpr_return();
        retval.start = input.LT(1);

        XQDTCommonTree root_0 = null;

        CommonToken kd=null;
        CommonToken ki=null;
        CommonToken km=null;
        CommonToken STAR222=null;
        XQueryParser.p_UnionExpr_return p_UnionExpr221 = null;

        XQueryParser.p_UnionExpr_return p_UnionExpr223 = null;


        XQDTCommonTree kd_tree=null;
        XQDTCommonTree ki_tree=null;
        XQDTCommonTree km_tree=null;
        XQDTCommonTree STAR222_tree=null;

        try {
            // XQueryParser.g:567:9: ( p_UnionExpr ( ( STAR | kd= DIV | ki= IDIV | km= MOD ) p_UnionExpr )* )
            // XQueryParser.g:567:13: p_UnionExpr ( ( STAR | kd= DIV | ki= IDIV | km= MOD ) p_UnionExpr )*
            {
            root_0 = (XQDTCommonTree)adaptor.nil();

            pushFollow(FOLLOW_p_UnionExpr_in_p_MultiplicativeExpr5152);
            p_UnionExpr221=p_UnionExpr();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, p_UnionExpr221.getTree());
            // XQueryParser.g:567:25: ( ( STAR | kd= DIV | ki= IDIV | km= MOD ) p_UnionExpr )*
            loop92:
            do {
                int alt92=2;
                int LA92_0 = input.LA(1);

                if ( (LA92_0==DIV||LA92_0==IDIV||LA92_0==MOD||LA92_0==STAR) ) {
                    alt92=1;
                }


                switch (alt92) {
            	case 1 :
            	    // XQueryParser.g:567:27: ( STAR | kd= DIV | ki= IDIV | km= MOD ) p_UnionExpr
            	    {
            	    // XQueryParser.g:567:27: ( STAR | kd= DIV | ki= IDIV | km= MOD )
            	    int alt91=4;
            	    switch ( input.LA(1) ) {
            	    case STAR:
            	        {
            	        alt91=1;
            	        }
            	        break;
            	    case DIV:
            	        {
            	        alt91=2;
            	        }
            	        break;
            	    case IDIV:
            	        {
            	        alt91=3;
            	        }
            	        break;
            	    case MOD:
            	        {
            	        alt91=4;
            	        }
            	        break;
            	    default:
            	        if (state.backtracking>0) {state.failed=true; return retval;}
            	        NoViableAltException nvae =
            	            new NoViableAltException("", 91, 0, input);

            	        throw nvae;
            	    }

            	    switch (alt91) {
            	        case 1 :
            	            // XQueryParser.g:567:28: STAR
            	            {
            	            STAR222=(CommonToken)match(input,STAR,FOLLOW_STAR_in_p_MultiplicativeExpr5157); if (state.failed) return retval;
            	            if ( state.backtracking==0 ) {
            	            STAR222_tree = (XQDTCommonTree)adaptor.create(STAR222);
            	            adaptor.addChild(root_0, STAR222_tree);
            	            }

            	            }
            	            break;
            	        case 2 :
            	            // XQueryParser.g:567:35: kd= DIV
            	            {
            	            kd=(CommonToken)match(input,DIV,FOLLOW_DIV_in_p_MultiplicativeExpr5163); if (state.failed) return retval;
            	            if ( state.backtracking==0 ) {
            	            kd_tree = (XQDTCommonTree)adaptor.create(kd);
            	            adaptor.addChild(root_0, kd_tree);
            	            }
            	            if ( state.backtracking==0 ) {
            	              ak(kd);
            	            }

            	            }
            	            break;
            	        case 3 :
            	            // XQueryParser.g:567:55: ki= IDIV
            	            {
            	            ki=(CommonToken)match(input,IDIV,FOLLOW_IDIV_in_p_MultiplicativeExpr5171); if (state.failed) return retval;
            	            if ( state.backtracking==0 ) {
            	            ki_tree = (XQDTCommonTree)adaptor.create(ki);
            	            adaptor.addChild(root_0, ki_tree);
            	            }
            	            if ( state.backtracking==0 ) {
            	              ak(ki);
            	            }

            	            }
            	            break;
            	        case 4 :
            	            // XQueryParser.g:567:76: km= MOD
            	            {
            	            km=(CommonToken)match(input,MOD,FOLLOW_MOD_in_p_MultiplicativeExpr5179); if (state.failed) return retval;
            	            if ( state.backtracking==0 ) {
            	            km_tree = (XQDTCommonTree)adaptor.create(km);
            	            adaptor.addChild(root_0, km_tree);
            	            }
            	            if ( state.backtracking==0 ) {
            	              ak(km);
            	            }

            	            }
            	            break;

            	    }

            	    pushFollow(FOLLOW_p_UnionExpr_in_p_MultiplicativeExpr5184);
            	    p_UnionExpr223=p_UnionExpr();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, p_UnionExpr223.getTree());

            	    }
            	    break;

            	default :
            	    break loop92;
                }
            } while (true);


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (XQDTCommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (XQDTCommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "p_MultiplicativeExpr"

    public static class p_UnionExpr_return extends ParserRuleReturnScope {
        XQDTCommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "p_UnionExpr"
    // XQueryParser.g:571:1: p_UnionExpr : p_IntersectExceptExpr ( (ku= UNION | VBAR ) p_IntersectExceptExpr )* ;
    public final XQueryParser.p_UnionExpr_return p_UnionExpr() throws RecognitionException {
        XQueryParser.p_UnionExpr_return retval = new XQueryParser.p_UnionExpr_return();
        retval.start = input.LT(1);

        XQDTCommonTree root_0 = null;

        CommonToken ku=null;
        CommonToken VBAR225=null;
        XQueryParser.p_IntersectExceptExpr_return p_IntersectExceptExpr224 = null;

        XQueryParser.p_IntersectExceptExpr_return p_IntersectExceptExpr226 = null;


        XQDTCommonTree ku_tree=null;
        XQDTCommonTree VBAR225_tree=null;

        try {
            // XQueryParser.g:572:9: ( p_IntersectExceptExpr ( (ku= UNION | VBAR ) p_IntersectExceptExpr )* )
            // XQueryParser.g:572:13: p_IntersectExceptExpr ( (ku= UNION | VBAR ) p_IntersectExceptExpr )*
            {
            root_0 = (XQDTCommonTree)adaptor.nil();

            pushFollow(FOLLOW_p_IntersectExceptExpr_in_p_UnionExpr5215);
            p_IntersectExceptExpr224=p_IntersectExceptExpr();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, p_IntersectExceptExpr224.getTree());
            // XQueryParser.g:572:35: ( (ku= UNION | VBAR ) p_IntersectExceptExpr )*
            loop94:
            do {
                int alt94=2;
                int LA94_0 = input.LA(1);

                if ( (LA94_0==UNION||LA94_0==VBAR) ) {
                    alt94=1;
                }


                switch (alt94) {
            	case 1 :
            	    // XQueryParser.g:572:37: (ku= UNION | VBAR ) p_IntersectExceptExpr
            	    {
            	    // XQueryParser.g:572:37: (ku= UNION | VBAR )
            	    int alt93=2;
            	    int LA93_0 = input.LA(1);

            	    if ( (LA93_0==UNION) ) {
            	        alt93=1;
            	    }
            	    else if ( (LA93_0==VBAR) ) {
            	        alt93=2;
            	    }
            	    else {
            	        if (state.backtracking>0) {state.failed=true; return retval;}
            	        NoViableAltException nvae =
            	            new NoViableAltException("", 93, 0, input);

            	        throw nvae;
            	    }
            	    switch (alt93) {
            	        case 1 :
            	            // XQueryParser.g:572:38: ku= UNION
            	            {
            	            ku=(CommonToken)match(input,UNION,FOLLOW_UNION_in_p_UnionExpr5222); if (state.failed) return retval;
            	            if ( state.backtracking==0 ) {
            	            ku_tree = (XQDTCommonTree)adaptor.create(ku);
            	            adaptor.addChild(root_0, ku_tree);
            	            }
            	            if ( state.backtracking==0 ) {
            	              ak(ku);
            	            }

            	            }
            	            break;
            	        case 2 :
            	            // XQueryParser.g:572:60: VBAR
            	            {
            	            VBAR225=(CommonToken)match(input,VBAR,FOLLOW_VBAR_in_p_UnionExpr5228); if (state.failed) return retval;
            	            if ( state.backtracking==0 ) {
            	            VBAR225_tree = (XQDTCommonTree)adaptor.create(VBAR225);
            	            adaptor.addChild(root_0, VBAR225_tree);
            	            }

            	            }
            	            break;

            	    }

            	    pushFollow(FOLLOW_p_IntersectExceptExpr_in_p_UnionExpr5231);
            	    p_IntersectExceptExpr226=p_IntersectExceptExpr();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, p_IntersectExceptExpr226.getTree());

            	    }
            	    break;

            	default :
            	    break loop94;
                }
            } while (true);


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (XQDTCommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (XQDTCommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "p_UnionExpr"

    public static class p_IntersectExceptExpr_return extends ParserRuleReturnScope {
        XQDTCommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "p_IntersectExceptExpr"
    // XQueryParser.g:576:1: p_IntersectExceptExpr : p_InstanceofExpr ( (k= INTERSECT | k= EXCEPT ) p_InstanceofExpr )* ;
    public final XQueryParser.p_IntersectExceptExpr_return p_IntersectExceptExpr() throws RecognitionException {
        XQueryParser.p_IntersectExceptExpr_return retval = new XQueryParser.p_IntersectExceptExpr_return();
        retval.start = input.LT(1);

        XQDTCommonTree root_0 = null;

        CommonToken k=null;
        XQueryParser.p_InstanceofExpr_return p_InstanceofExpr227 = null;

        XQueryParser.p_InstanceofExpr_return p_InstanceofExpr228 = null;


        XQDTCommonTree k_tree=null;

        try {
            // XQueryParser.g:577:9: ( p_InstanceofExpr ( (k= INTERSECT | k= EXCEPT ) p_InstanceofExpr )* )
            // XQueryParser.g:577:13: p_InstanceofExpr ( (k= INTERSECT | k= EXCEPT ) p_InstanceofExpr )*
            {
            root_0 = (XQDTCommonTree)adaptor.nil();

            pushFollow(FOLLOW_p_InstanceofExpr_in_p_IntersectExceptExpr5262);
            p_InstanceofExpr227=p_InstanceofExpr();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, p_InstanceofExpr227.getTree());
            // XQueryParser.g:577:30: ( (k= INTERSECT | k= EXCEPT ) p_InstanceofExpr )*
            loop96:
            do {
                int alt96=2;
                int LA96_0 = input.LA(1);

                if ( (LA96_0==EXCEPT||LA96_0==INTERSECT) ) {
                    alt96=1;
                }


                switch (alt96) {
            	case 1 :
            	    // XQueryParser.g:577:32: (k= INTERSECT | k= EXCEPT ) p_InstanceofExpr
            	    {
            	    // XQueryParser.g:577:32: (k= INTERSECT | k= EXCEPT )
            	    int alt95=2;
            	    int LA95_0 = input.LA(1);

            	    if ( (LA95_0==INTERSECT) ) {
            	        alt95=1;
            	    }
            	    else if ( (LA95_0==EXCEPT) ) {
            	        alt95=2;
            	    }
            	    else {
            	        if (state.backtracking>0) {state.failed=true; return retval;}
            	        NoViableAltException nvae =
            	            new NoViableAltException("", 95, 0, input);

            	        throw nvae;
            	    }
            	    switch (alt95) {
            	        case 1 :
            	            // XQueryParser.g:577:33: k= INTERSECT
            	            {
            	            k=(CommonToken)match(input,INTERSECT,FOLLOW_INTERSECT_in_p_IntersectExceptExpr5269); if (state.failed) return retval;
            	            if ( state.backtracking==0 ) {
            	            k_tree = (XQDTCommonTree)adaptor.create(k);
            	            adaptor.addChild(root_0, k_tree);
            	            }

            	            }
            	            break;
            	        case 2 :
            	            // XQueryParser.g:577:47: k= EXCEPT
            	            {
            	            k=(CommonToken)match(input,EXCEPT,FOLLOW_EXCEPT_in_p_IntersectExceptExpr5275); if (state.failed) return retval;
            	            if ( state.backtracking==0 ) {
            	            k_tree = (XQDTCommonTree)adaptor.create(k);
            	            adaptor.addChild(root_0, k_tree);
            	            }

            	            }
            	            break;

            	    }

            	    if ( state.backtracking==0 ) {
            	      ak(k);
            	    }
            	    pushFollow(FOLLOW_p_InstanceofExpr_in_p_IntersectExceptExpr5280);
            	    p_InstanceofExpr228=p_InstanceofExpr();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, p_InstanceofExpr228.getTree());

            	    }
            	    break;

            	default :
            	    break loop96;
                }
            } while (true);


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (XQDTCommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (XQDTCommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "p_IntersectExceptExpr"

    public static class p_InstanceofExpr_return extends ParserRuleReturnScope {
        XQDTCommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "p_InstanceofExpr"
    // XQueryParser.g:581:1: p_InstanceofExpr : p_TreatExpr (ki= INSTANCE ko= OF p_SequenceType )? ;
    public final XQueryParser.p_InstanceofExpr_return p_InstanceofExpr() throws RecognitionException {
        XQueryParser.p_InstanceofExpr_return retval = new XQueryParser.p_InstanceofExpr_return();
        retval.start = input.LT(1);

        XQDTCommonTree root_0 = null;

        CommonToken ki=null;
        CommonToken ko=null;
        XQueryParser.p_TreatExpr_return p_TreatExpr229 = null;

        XQueryParser.p_SequenceType_return p_SequenceType230 = null;


        XQDTCommonTree ki_tree=null;
        XQDTCommonTree ko_tree=null;

        try {
            // XQueryParser.g:582:9: ( p_TreatExpr (ki= INSTANCE ko= OF p_SequenceType )? )
            // XQueryParser.g:582:13: p_TreatExpr (ki= INSTANCE ko= OF p_SequenceType )?
            {
            root_0 = (XQDTCommonTree)adaptor.nil();

            pushFollow(FOLLOW_p_TreatExpr_in_p_InstanceofExpr5311);
            p_TreatExpr229=p_TreatExpr();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, p_TreatExpr229.getTree());
            // XQueryParser.g:582:25: (ki= INSTANCE ko= OF p_SequenceType )?
            int alt97=2;
            int LA97_0 = input.LA(1);

            if ( (LA97_0==INSTANCE) ) {
                alt97=1;
            }
            switch (alt97) {
                case 1 :
                    // XQueryParser.g:582:27: ki= INSTANCE ko= OF p_SequenceType
                    {
                    ki=(CommonToken)match(input,INSTANCE,FOLLOW_INSTANCE_in_p_InstanceofExpr5317); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    ki_tree = (XQDTCommonTree)adaptor.create(ki);
                    adaptor.addChild(root_0, ki_tree);
                    }
                    if ( state.backtracking==0 ) {
                      ak(ki);
                    }
                    ko=(CommonToken)match(input,OF,FOLLOW_OF_in_p_InstanceofExpr5323); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    ko_tree = (XQDTCommonTree)adaptor.create(ko);
                    adaptor.addChild(root_0, ko_tree);
                    }
                    if ( state.backtracking==0 ) {
                      ak(ko);
                    }
                    pushFollow(FOLLOW_p_SequenceType_in_p_InstanceofExpr5327);
                    p_SequenceType230=p_SequenceType();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, p_SequenceType230.getTree());

                    }
                    break;

            }


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (XQDTCommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (XQDTCommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "p_InstanceofExpr"

    public static class p_TreatExpr_return extends ParserRuleReturnScope {
        XQDTCommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "p_TreatExpr"
    // XQueryParser.g:586:1: p_TreatExpr : p_CastableExpr (kt= TREAT ka= AS p_SequenceType )? ;
    public final XQueryParser.p_TreatExpr_return p_TreatExpr() throws RecognitionException {
        XQueryParser.p_TreatExpr_return retval = new XQueryParser.p_TreatExpr_return();
        retval.start = input.LT(1);

        XQDTCommonTree root_0 = null;

        CommonToken kt=null;
        CommonToken ka=null;
        XQueryParser.p_CastableExpr_return p_CastableExpr231 = null;

        XQueryParser.p_SequenceType_return p_SequenceType232 = null;


        XQDTCommonTree kt_tree=null;
        XQDTCommonTree ka_tree=null;

        try {
            // XQueryParser.g:587:9: ( p_CastableExpr (kt= TREAT ka= AS p_SequenceType )? )
            // XQueryParser.g:587:13: p_CastableExpr (kt= TREAT ka= AS p_SequenceType )?
            {
            root_0 = (XQDTCommonTree)adaptor.nil();

            pushFollow(FOLLOW_p_CastableExpr_in_p_TreatExpr5357);
            p_CastableExpr231=p_CastableExpr();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, p_CastableExpr231.getTree());
            // XQueryParser.g:587:28: (kt= TREAT ka= AS p_SequenceType )?
            int alt98=2;
            int LA98_0 = input.LA(1);

            if ( (LA98_0==TREAT) ) {
                alt98=1;
            }
            switch (alt98) {
                case 1 :
                    // XQueryParser.g:587:30: kt= TREAT ka= AS p_SequenceType
                    {
                    kt=(CommonToken)match(input,TREAT,FOLLOW_TREAT_in_p_TreatExpr5363); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    kt_tree = (XQDTCommonTree)adaptor.create(kt);
                    adaptor.addChild(root_0, kt_tree);
                    }
                    if ( state.backtracking==0 ) {
                      ak(kt);
                    }
                    ka=(CommonToken)match(input,AS,FOLLOW_AS_in_p_TreatExpr5369); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    ka_tree = (XQDTCommonTree)adaptor.create(ka);
                    adaptor.addChild(root_0, ka_tree);
                    }
                    if ( state.backtracking==0 ) {
                      ak(ka);
                    }
                    pushFollow(FOLLOW_p_SequenceType_in_p_TreatExpr5373);
                    p_SequenceType232=p_SequenceType();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, p_SequenceType232.getTree());

                    }
                    break;

            }


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (XQDTCommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (XQDTCommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "p_TreatExpr"

    public static class p_CastableExpr_return extends ParserRuleReturnScope {
        XQDTCommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "p_CastableExpr"
    // XQueryParser.g:591:1: p_CastableExpr : p_CastExpr (kc= CASTABLE ka= AS p_SingleType )? ;
    public final XQueryParser.p_CastableExpr_return p_CastableExpr() throws RecognitionException {
        XQueryParser.p_CastableExpr_return retval = new XQueryParser.p_CastableExpr_return();
        retval.start = input.LT(1);

        XQDTCommonTree root_0 = null;

        CommonToken kc=null;
        CommonToken ka=null;
        XQueryParser.p_CastExpr_return p_CastExpr233 = null;

        XQueryParser.p_SingleType_return p_SingleType234 = null;


        XQDTCommonTree kc_tree=null;
        XQDTCommonTree ka_tree=null;

        try {
            // XQueryParser.g:592:9: ( p_CastExpr (kc= CASTABLE ka= AS p_SingleType )? )
            // XQueryParser.g:592:13: p_CastExpr (kc= CASTABLE ka= AS p_SingleType )?
            {
            root_0 = (XQDTCommonTree)adaptor.nil();

            pushFollow(FOLLOW_p_CastExpr_in_p_CastableExpr5412);
            p_CastExpr233=p_CastExpr();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, p_CastExpr233.getTree());
            // XQueryParser.g:592:24: (kc= CASTABLE ka= AS p_SingleType )?
            int alt99=2;
            int LA99_0 = input.LA(1);

            if ( (LA99_0==CASTABLE) ) {
                alt99=1;
            }
            switch (alt99) {
                case 1 :
                    // XQueryParser.g:592:26: kc= CASTABLE ka= AS p_SingleType
                    {
                    kc=(CommonToken)match(input,CASTABLE,FOLLOW_CASTABLE_in_p_CastableExpr5418); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    kc_tree = (XQDTCommonTree)adaptor.create(kc);
                    adaptor.addChild(root_0, kc_tree);
                    }
                    if ( state.backtracking==0 ) {
                      ak(kc);
                    }
                    ka=(CommonToken)match(input,AS,FOLLOW_AS_in_p_CastableExpr5424); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    ka_tree = (XQDTCommonTree)adaptor.create(ka);
                    adaptor.addChild(root_0, ka_tree);
                    }
                    if ( state.backtracking==0 ) {
                      ak(ka);
                    }
                    pushFollow(FOLLOW_p_SingleType_in_p_CastableExpr5428);
                    p_SingleType234=p_SingleType();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, p_SingleType234.getTree());

                    }
                    break;

            }


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (XQDTCommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (XQDTCommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "p_CastableExpr"

    public static class p_CastExpr_return extends ParserRuleReturnScope {
        XQDTCommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "p_CastExpr"
    // XQueryParser.g:596:1: p_CastExpr : p_UnaryExpr (kc= CAST ka= AS p_SingleType )? ;
    public final XQueryParser.p_CastExpr_return p_CastExpr() throws RecognitionException {
        XQueryParser.p_CastExpr_return retval = new XQueryParser.p_CastExpr_return();
        retval.start = input.LT(1);

        XQDTCommonTree root_0 = null;

        CommonToken kc=null;
        CommonToken ka=null;
        XQueryParser.p_UnaryExpr_return p_UnaryExpr235 = null;

        XQueryParser.p_SingleType_return p_SingleType236 = null;


        XQDTCommonTree kc_tree=null;
        XQDTCommonTree ka_tree=null;

        try {
            // XQueryParser.g:597:9: ( p_UnaryExpr (kc= CAST ka= AS p_SingleType )? )
            // XQueryParser.g:597:13: p_UnaryExpr (kc= CAST ka= AS p_SingleType )?
            {
            root_0 = (XQDTCommonTree)adaptor.nil();

            pushFollow(FOLLOW_p_UnaryExpr_in_p_CastExpr5467);
            p_UnaryExpr235=p_UnaryExpr();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, p_UnaryExpr235.getTree());
            // XQueryParser.g:597:25: (kc= CAST ka= AS p_SingleType )?
            int alt100=2;
            int LA100_0 = input.LA(1);

            if ( (LA100_0==CAST) ) {
                alt100=1;
            }
            switch (alt100) {
                case 1 :
                    // XQueryParser.g:597:27: kc= CAST ka= AS p_SingleType
                    {
                    kc=(CommonToken)match(input,CAST,FOLLOW_CAST_in_p_CastExpr5473); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    kc_tree = (XQDTCommonTree)adaptor.create(kc);
                    adaptor.addChild(root_0, kc_tree);
                    }
                    if ( state.backtracking==0 ) {
                      ak(kc);
                    }
                    ka=(CommonToken)match(input,AS,FOLLOW_AS_in_p_CastExpr5479); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    ka_tree = (XQDTCommonTree)adaptor.create(ka);
                    adaptor.addChild(root_0, ka_tree);
                    }
                    if ( state.backtracking==0 ) {
                      ak(ka);
                    }
                    pushFollow(FOLLOW_p_SingleType_in_p_CastExpr5483);
                    p_SingleType236=p_SingleType();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, p_SingleType236.getTree());

                    }
                    break;

            }


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (XQDTCommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (XQDTCommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "p_CastExpr"

    public static class p_UnaryExpr_return extends ParserRuleReturnScope {
        XQDTCommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "p_UnaryExpr"
    // XQueryParser.g:601:1: p_UnaryExpr : ( PLUS | MINUS )* p_ValueExpr -> ^( UnaryExpr ( PLUS )* p_ValueExpr ) ;
    public final XQueryParser.p_UnaryExpr_return p_UnaryExpr() throws RecognitionException {
        XQueryParser.p_UnaryExpr_return retval = new XQueryParser.p_UnaryExpr_return();
        retval.start = input.LT(1);

        XQDTCommonTree root_0 = null;

        CommonToken PLUS237=null;
        CommonToken MINUS238=null;
        XQueryParser.p_ValueExpr_return p_ValueExpr239 = null;


        XQDTCommonTree PLUS237_tree=null;
        XQDTCommonTree MINUS238_tree=null;
        RewriteRuleTokenStream stream_MINUS=new RewriteRuleTokenStream(adaptor,"token MINUS");
        RewriteRuleTokenStream stream_PLUS=new RewriteRuleTokenStream(adaptor,"token PLUS");
        RewriteRuleSubtreeStream stream_p_ValueExpr=new RewriteRuleSubtreeStream(adaptor,"rule p_ValueExpr");
        try {
            // XQueryParser.g:602:9: ( ( PLUS | MINUS )* p_ValueExpr -> ^( UnaryExpr ( PLUS )* p_ValueExpr ) )
            // XQueryParser.g:602:13: ( PLUS | MINUS )* p_ValueExpr
            {
            // XQueryParser.g:602:13: ( PLUS | MINUS )*
            loop101:
            do {
                int alt101=3;
                int LA101_0 = input.LA(1);

                if ( (LA101_0==PLUS) ) {
                    alt101=1;
                }
                else if ( (LA101_0==MINUS) ) {
                    alt101=2;
                }


                switch (alt101) {
            	case 1 :
            	    // XQueryParser.g:602:14: PLUS
            	    {
            	    PLUS237=(CommonToken)match(input,PLUS,FOLLOW_PLUS_in_p_UnaryExpr5515); if (state.failed) return retval; 
            	    if ( state.backtracking==0 ) stream_PLUS.add(PLUS237);


            	    }
            	    break;
            	case 2 :
            	    // XQueryParser.g:602:21: MINUS
            	    {
            	    MINUS238=(CommonToken)match(input,MINUS,FOLLOW_MINUS_in_p_UnaryExpr5519); if (state.failed) return retval; 
            	    if ( state.backtracking==0 ) stream_MINUS.add(MINUS238);


            	    }
            	    break;

            	default :
            	    break loop101;
                }
            } while (true);

            pushFollow(FOLLOW_p_ValueExpr_in_p_UnaryExpr5523);
            p_ValueExpr239=p_ValueExpr();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_p_ValueExpr.add(p_ValueExpr239.getTree());


            // AST REWRITE
            // elements: p_ValueExpr, PLUS
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (XQDTCommonTree)adaptor.nil();
            // 603:17: -> ^( UnaryExpr ( PLUS )* p_ValueExpr )
            {
                // XQueryParser.g:603:20: ^( UnaryExpr ( PLUS )* p_ValueExpr )
                {
                XQDTCommonTree root_1 = (XQDTCommonTree)adaptor.nil();
                root_1 = (XQDTCommonTree)adaptor.becomeRoot((XQDTCommonTree)adaptor.create(UnaryExpr, "UnaryExpr"), root_1);

                // XQueryParser.g:603:32: ( PLUS )*
                while ( stream_PLUS.hasNext() ) {
                    adaptor.addChild(root_1, stream_PLUS.nextNode());

                }
                stream_PLUS.reset();
                adaptor.addChild(root_1, stream_p_ValueExpr.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (XQDTCommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (XQDTCommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "p_UnaryExpr"

    public static class p_ValueExpr_return extends ParserRuleReturnScope {
        XQDTCommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "p_ValueExpr"
    // XQueryParser.g:610:1: p_ValueExpr : ( p_ValidateExpr | p_PathExpr | p_ExtensionExpr );
    public final XQueryParser.p_ValueExpr_return p_ValueExpr() throws RecognitionException {
        XQueryParser.p_ValueExpr_return retval = new XQueryParser.p_ValueExpr_return();
        retval.start = input.LT(1);

        XQDTCommonTree root_0 = null;

        XQueryParser.p_ValidateExpr_return p_ValidateExpr240 = null;

        XQueryParser.p_PathExpr_return p_PathExpr241 = null;

        XQueryParser.p_ExtensionExpr_return p_ExtensionExpr242 = null;



        try {
            // XQueryParser.g:611:9: ( p_ValidateExpr | p_PathExpr | p_ExtensionExpr )
            int alt102=3;
            alt102 = dfa102.predict(input);
            switch (alt102) {
                case 1 :
                    // XQueryParser.g:611:11: p_ValidateExpr
                    {
                    root_0 = (XQDTCommonTree)adaptor.nil();

                    pushFollow(FOLLOW_p_ValidateExpr_in_p_ValueExpr5579);
                    p_ValidateExpr240=p_ValidateExpr();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, p_ValidateExpr240.getTree());

                    }
                    break;
                case 2 :
                    // XQueryParser.g:612:11: p_PathExpr
                    {
                    root_0 = (XQDTCommonTree)adaptor.nil();

                    pushFollow(FOLLOW_p_PathExpr_in_p_ValueExpr5591);
                    p_PathExpr241=p_PathExpr();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, p_PathExpr241.getTree());

                    }
                    break;
                case 3 :
                    // XQueryParser.g:613:11: p_ExtensionExpr
                    {
                    root_0 = (XQDTCommonTree)adaptor.nil();

                    pushFollow(FOLLOW_p_ExtensionExpr_in_p_ValueExpr5603);
                    p_ExtensionExpr242=p_ExtensionExpr();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, p_ExtensionExpr242.getTree());

                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (XQDTCommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (XQDTCommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "p_ValueExpr"

    public static class p_GeneralComp_return extends ParserRuleReturnScope {
        XQDTCommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "p_GeneralComp"
    // XQueryParser.g:617:1: p_GeneralComp : ( EQUAL | NOTEQUAL | SMALLER | SMALLEREQ | GREATER | GREATEREQ );
    public final XQueryParser.p_GeneralComp_return p_GeneralComp() throws RecognitionException {
        XQueryParser.p_GeneralComp_return retval = new XQueryParser.p_GeneralComp_return();
        retval.start = input.LT(1);

        XQDTCommonTree root_0 = null;

        CommonToken set243=null;

        XQDTCommonTree set243_tree=null;

        try {
            // XQueryParser.g:618:9: ( EQUAL | NOTEQUAL | SMALLER | SMALLEREQ | GREATER | GREATEREQ )
            // XQueryParser.g:
            {
            root_0 = (XQDTCommonTree)adaptor.nil();

            set243=(CommonToken)input.LT(1);
            if ( input.LA(1)==EQUAL||input.LA(1)==NOTEQUAL||(input.LA(1)>=SMALLER && input.LA(1)<=GREATEREQ) ) {
                input.consume();
                if ( state.backtracking==0 ) adaptor.addChild(root_0, (XQDTCommonTree)adaptor.create(set243));
                state.errorRecovery=false;state.failed=false;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                MismatchedSetException mse = new MismatchedSetException(null,input);
                throw mse;
            }


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (XQDTCommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (XQDTCommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "p_GeneralComp"

    public static class p_ValueComp_return extends ParserRuleReturnScope {
        XQDTCommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "p_ValueComp"
    // XQueryParser.g:622:1: p_ValueComp : (k= EQ | k= NE | k= LT | k= LE | k= GT | k= GE ) ;
    public final XQueryParser.p_ValueComp_return p_ValueComp() throws RecognitionException {
        XQueryParser.p_ValueComp_return retval = new XQueryParser.p_ValueComp_return();
        retval.start = input.LT(1);

        XQDTCommonTree root_0 = null;

        CommonToken k=null;

        XQDTCommonTree k_tree=null;

        try {
            // XQueryParser.g:623:9: ( (k= EQ | k= NE | k= LT | k= LE | k= GT | k= GE ) )
            // XQueryParser.g:623:13: (k= EQ | k= NE | k= LT | k= LE | k= GT | k= GE )
            {
            root_0 = (XQDTCommonTree)adaptor.nil();

            // XQueryParser.g:623:13: (k= EQ | k= NE | k= LT | k= LE | k= GT | k= GE )
            int alt103=6;
            switch ( input.LA(1) ) {
            case EQ:
                {
                alt103=1;
                }
                break;
            case NE:
                {
                alt103=2;
                }
                break;
            case LT:
                {
                alt103=3;
                }
                break;
            case LE:
                {
                alt103=4;
                }
                break;
            case GT:
                {
                alt103=5;
                }
                break;
            case GE:
                {
                alt103=6;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 103, 0, input);

                throw nvae;
            }

            switch (alt103) {
                case 1 :
                    // XQueryParser.g:623:14: k= EQ
                    {
                    k=(CommonToken)match(input,EQ,FOLLOW_EQ_in_p_ValueComp5682); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    k_tree = (XQDTCommonTree)adaptor.create(k);
                    adaptor.addChild(root_0, k_tree);
                    }

                    }
                    break;
                case 2 :
                    // XQueryParser.g:623:21: k= NE
                    {
                    k=(CommonToken)match(input,NE,FOLLOW_NE_in_p_ValueComp5688); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    k_tree = (XQDTCommonTree)adaptor.create(k);
                    adaptor.addChild(root_0, k_tree);
                    }

                    }
                    break;
                case 3 :
                    // XQueryParser.g:623:28: k= LT
                    {
                    k=(CommonToken)match(input,LT,FOLLOW_LT_in_p_ValueComp5694); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    k_tree = (XQDTCommonTree)adaptor.create(k);
                    adaptor.addChild(root_0, k_tree);
                    }

                    }
                    break;
                case 4 :
                    // XQueryParser.g:623:35: k= LE
                    {
                    k=(CommonToken)match(input,LE,FOLLOW_LE_in_p_ValueComp5700); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    k_tree = (XQDTCommonTree)adaptor.create(k);
                    adaptor.addChild(root_0, k_tree);
                    }

                    }
                    break;
                case 5 :
                    // XQueryParser.g:623:42: k= GT
                    {
                    k=(CommonToken)match(input,GT,FOLLOW_GT_in_p_ValueComp5706); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    k_tree = (XQDTCommonTree)adaptor.create(k);
                    adaptor.addChild(root_0, k_tree);
                    }

                    }
                    break;
                case 6 :
                    // XQueryParser.g:623:49: k= GE
                    {
                    k=(CommonToken)match(input,GE,FOLLOW_GE_in_p_ValueComp5712); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    k_tree = (XQDTCommonTree)adaptor.create(k);
                    adaptor.addChild(root_0, k_tree);
                    }

                    }
                    break;

            }

            if ( state.backtracking==0 ) {
              ak(k);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (XQDTCommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (XQDTCommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "p_ValueComp"

    public static class p_NodeComp_return extends ParserRuleReturnScope {
        XQDTCommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "p_NodeComp"
    // XQueryParser.g:627:1: p_NodeComp : (ki= IS | SMALLER_SMALLER | GREATER_GREATER );
    public final XQueryParser.p_NodeComp_return p_NodeComp() throws RecognitionException {
        XQueryParser.p_NodeComp_return retval = new XQueryParser.p_NodeComp_return();
        retval.start = input.LT(1);

        XQDTCommonTree root_0 = null;

        CommonToken ki=null;
        CommonToken SMALLER_SMALLER244=null;
        CommonToken GREATER_GREATER245=null;

        XQDTCommonTree ki_tree=null;
        XQDTCommonTree SMALLER_SMALLER244_tree=null;
        XQDTCommonTree GREATER_GREATER245_tree=null;

        try {
            // XQueryParser.g:628:9: (ki= IS | SMALLER_SMALLER | GREATER_GREATER )
            int alt104=3;
            switch ( input.LA(1) ) {
            case IS:
                {
                alt104=1;
                }
                break;
            case SMALLER_SMALLER:
                {
                alt104=2;
                }
                break;
            case GREATER_GREATER:
                {
                alt104=3;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 104, 0, input);

                throw nvae;
            }

            switch (alt104) {
                case 1 :
                    // XQueryParser.g:628:13: ki= IS
                    {
                    root_0 = (XQDTCommonTree)adaptor.nil();

                    ki=(CommonToken)match(input,IS,FOLLOW_IS_in_p_NodeComp5745); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    ki_tree = (XQDTCommonTree)adaptor.create(ki);
                    adaptor.addChild(root_0, ki_tree);
                    }
                    if ( state.backtracking==0 ) {
                      ak(ki);
                    }

                    }
                    break;
                case 2 :
                    // XQueryParser.g:628:32: SMALLER_SMALLER
                    {
                    root_0 = (XQDTCommonTree)adaptor.nil();

                    SMALLER_SMALLER244=(CommonToken)match(input,SMALLER_SMALLER,FOLLOW_SMALLER_SMALLER_in_p_NodeComp5751); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    SMALLER_SMALLER244_tree = (XQDTCommonTree)adaptor.create(SMALLER_SMALLER244);
                    adaptor.addChild(root_0, SMALLER_SMALLER244_tree);
                    }

                    }
                    break;
                case 3 :
                    // XQueryParser.g:628:50: GREATER_GREATER
                    {
                    root_0 = (XQDTCommonTree)adaptor.nil();

                    GREATER_GREATER245=(CommonToken)match(input,GREATER_GREATER,FOLLOW_GREATER_GREATER_in_p_NodeComp5755); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    GREATER_GREATER245_tree = (XQDTCommonTree)adaptor.create(GREATER_GREATER245);
                    adaptor.addChild(root_0, GREATER_GREATER245_tree);
                    }

                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (XQDTCommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (XQDTCommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "p_NodeComp"

    public static class p_ValidateExpr_return extends ParserRuleReturnScope {
        XQDTCommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "p_ValidateExpr"
    // XQueryParser.g:632:1: p_ValidateExpr : kv= VALIDATE ( p_ValidationMode )? LBRACKET pm_Expr RBRACKET ;
    public final XQueryParser.p_ValidateExpr_return p_ValidateExpr() throws RecognitionException {
        XQueryParser.p_ValidateExpr_return retval = new XQueryParser.p_ValidateExpr_return();
        retval.start = input.LT(1);

        XQDTCommonTree root_0 = null;

        CommonToken kv=null;
        CommonToken LBRACKET247=null;
        CommonToken RBRACKET249=null;
        XQueryParser.p_ValidationMode_return p_ValidationMode246 = null;

        XQueryParser.pm_Expr_return pm_Expr248 = null;


        XQDTCommonTree kv_tree=null;
        XQDTCommonTree LBRACKET247_tree=null;
        XQDTCommonTree RBRACKET249_tree=null;

        try {
            // XQueryParser.g:633:9: (kv= VALIDATE ( p_ValidationMode )? LBRACKET pm_Expr RBRACKET )
            // XQueryParser.g:633:13: kv= VALIDATE ( p_ValidationMode )? LBRACKET pm_Expr RBRACKET
            {
            root_0 = (XQDTCommonTree)adaptor.nil();

            kv=(CommonToken)match(input,VALIDATE,FOLLOW_VALIDATE_in_p_ValidateExpr5785); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            kv_tree = (XQDTCommonTree)adaptor.create(kv);
            adaptor.addChild(root_0, kv_tree);
            }
            if ( state.backtracking==0 ) {
              ak(kv);
            }
            // XQueryParser.g:633:36: ( p_ValidationMode )?
            int alt105=2;
            int LA105_0 = input.LA(1);

            if ( (LA105_0==AS||LA105_0==LAX||LA105_0==STRICT) ) {
                alt105=1;
            }
            switch (alt105) {
                case 1 :
                    // XQueryParser.g:633:36: p_ValidationMode
                    {
                    pushFollow(FOLLOW_p_ValidationMode_in_p_ValidateExpr5789);
                    p_ValidationMode246=p_ValidationMode();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, p_ValidationMode246.getTree());

                    }
                    break;

            }

            LBRACKET247=(CommonToken)match(input,LBRACKET,FOLLOW_LBRACKET_in_p_ValidateExpr5792); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            LBRACKET247_tree = (XQDTCommonTree)adaptor.create(LBRACKET247);
            adaptor.addChild(root_0, LBRACKET247_tree);
            }
            pushFollow(FOLLOW_pm_Expr_in_p_ValidateExpr5794);
            pm_Expr248=pm_Expr();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, pm_Expr248.getTree());
            RBRACKET249=(CommonToken)match(input,RBRACKET,FOLLOW_RBRACKET_in_p_ValidateExpr5796); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            RBRACKET249_tree = (XQDTCommonTree)adaptor.create(RBRACKET249);
            adaptor.addChild(root_0, RBRACKET249_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (XQDTCommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (XQDTCommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "p_ValidateExpr"

    public static class p_ValidationMode_return extends ParserRuleReturnScope {
        XQDTCommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "p_ValidationMode"
    // XQueryParser.g:637:1: p_ValidationMode : (k= LAX | k= STRICT | (k= AS p_QName ) );
    public final XQueryParser.p_ValidationMode_return p_ValidationMode() throws RecognitionException {
        XQueryParser.p_ValidationMode_return retval = new XQueryParser.p_ValidationMode_return();
        retval.start = input.LT(1);

        XQDTCommonTree root_0 = null;

        CommonToken k=null;
        XQueryParser.p_QName_return p_QName250 = null;


        XQDTCommonTree k_tree=null;

        try {
            // XQueryParser.g:638:9: (k= LAX | k= STRICT | (k= AS p_QName ) )
            int alt106=3;
            switch ( input.LA(1) ) {
            case LAX:
                {
                alt106=1;
                }
                break;
            case STRICT:
                {
                alt106=2;
                }
                break;
            case AS:
                {
                alt106=3;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 106, 0, input);

                throw nvae;
            }

            switch (alt106) {
                case 1 :
                    // XQueryParser.g:638:13: k= LAX
                    {
                    root_0 = (XQDTCommonTree)adaptor.nil();

                    k=(CommonToken)match(input,LAX,FOLLOW_LAX_in_p_ValidationMode5826); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    k_tree = (XQDTCommonTree)adaptor.create(k);
                    adaptor.addChild(root_0, k_tree);
                    }

                    }
                    break;
                case 2 :
                    // XQueryParser.g:638:21: k= STRICT
                    {
                    root_0 = (XQDTCommonTree)adaptor.nil();

                    k=(CommonToken)match(input,STRICT,FOLLOW_STRICT_in_p_ValidationMode5832); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    k_tree = (XQDTCommonTree)adaptor.create(k);
                    adaptor.addChild(root_0, k_tree);
                    }

                    }
                    break;
                case 3 :
                    // XQueryParser.g:638:32: (k= AS p_QName )
                    {
                    root_0 = (XQDTCommonTree)adaptor.nil();

                    // XQueryParser.g:638:32: (k= AS p_QName )
                    // XQueryParser.g:638:33: k= AS p_QName
                    {
                    k=(CommonToken)match(input,AS,FOLLOW_AS_in_p_ValidationMode5839); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    k_tree = (XQDTCommonTree)adaptor.create(k);
                    adaptor.addChild(root_0, k_tree);
                    }
                    pushFollow(FOLLOW_p_QName_in_p_ValidationMode5841);
                    p_QName250=p_QName();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, p_QName250.getTree());

                    }

                    if ( state.backtracking==0 ) {
                      ak(k);
                    }

                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (XQDTCommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (XQDTCommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "p_ValidationMode"

    public static class p_ExtensionExpr_return extends ParserRuleReturnScope {
        XQDTCommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "p_ExtensionExpr"
    // XQueryParser.g:642:1: p_ExtensionExpr : ( L_Pragma )+ LBRACKET ( pm_Expr )? RBRACKET ;
    public final XQueryParser.p_ExtensionExpr_return p_ExtensionExpr() throws RecognitionException {
        XQueryParser.p_ExtensionExpr_return retval = new XQueryParser.p_ExtensionExpr_return();
        retval.start = input.LT(1);

        XQDTCommonTree root_0 = null;

        CommonToken L_Pragma251=null;
        CommonToken LBRACKET252=null;
        CommonToken RBRACKET254=null;
        XQueryParser.pm_Expr_return pm_Expr253 = null;


        XQDTCommonTree L_Pragma251_tree=null;
        XQDTCommonTree LBRACKET252_tree=null;
        XQDTCommonTree RBRACKET254_tree=null;

        try {
            // XQueryParser.g:643:9: ( ( L_Pragma )+ LBRACKET ( pm_Expr )? RBRACKET )
            // XQueryParser.g:643:13: ( L_Pragma )+ LBRACKET ( pm_Expr )? RBRACKET
            {
            root_0 = (XQDTCommonTree)adaptor.nil();

            // XQueryParser.g:643:13: ( L_Pragma )+
            int cnt107=0;
            loop107:
            do {
                int alt107=2;
                int LA107_0 = input.LA(1);

                if ( (LA107_0==L_Pragma) ) {
                    alt107=1;
                }


                switch (alt107) {
            	case 1 :
            	    // XQueryParser.g:643:13: L_Pragma
            	    {
            	    L_Pragma251=(CommonToken)match(input,L_Pragma,FOLLOW_L_Pragma_in_p_ExtensionExpr5872); if (state.failed) return retval;
            	    if ( state.backtracking==0 ) {
            	    L_Pragma251_tree = (XQDTCommonTree)adaptor.create(L_Pragma251);
            	    adaptor.addChild(root_0, L_Pragma251_tree);
            	    }

            	    }
            	    break;

            	default :
            	    if ( cnt107 >= 1 ) break loop107;
            	    if (state.backtracking>0) {state.failed=true; return retval;}
                        EarlyExitException eee =
                            new EarlyExitException(107, input);
                        throw eee;
                }
                cnt107++;
            } while (true);

            LBRACKET252=(CommonToken)match(input,LBRACKET,FOLLOW_LBRACKET_in_p_ExtensionExpr5875); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            LBRACKET252_tree = (XQDTCommonTree)adaptor.create(LBRACKET252);
            adaptor.addChild(root_0, LBRACKET252_tree);
            }
            // XQueryParser.g:643:32: ( pm_Expr )?
            int alt108=2;
            int LA108_0 = input.LA(1);

            if ( ((LA108_0>=ANCESTOR && LA108_0<=EXIT)||(LA108_0>=SEQUENTIAL && LA108_0<=LPAREN)||LA108_0==DOLLAR||(LA108_0>=STAR && LA108_0<=SMALLER)||(LA108_0>=SLASH && LA108_0<=DOT_DOT)||LA108_0==ATTR_SIGN||(LA108_0>=APOS && LA108_0<=QUOT)||LA108_0==L_NCName||(LA108_0>=L_Pragma && LA108_0<=L_DoubleLiteral)) ) {
                alt108=1;
            }
            switch (alt108) {
                case 1 :
                    // XQueryParser.g:643:32: pm_Expr
                    {
                    pushFollow(FOLLOW_pm_Expr_in_p_ExtensionExpr5877);
                    pm_Expr253=pm_Expr();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, pm_Expr253.getTree());

                    }
                    break;

            }

            RBRACKET254=(CommonToken)match(input,RBRACKET,FOLLOW_RBRACKET_in_p_ExtensionExpr5880); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            RBRACKET254_tree = (XQDTCommonTree)adaptor.create(RBRACKET254);
            adaptor.addChild(root_0, RBRACKET254_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (XQDTCommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (XQDTCommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "p_ExtensionExpr"

    public static class p_PathExpr_return extends ParserRuleReturnScope {
        XQDTCommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "p_PathExpr"
    // XQueryParser.g:654:1: p_PathExpr : ( ( SLASH p_RelativePathExpr )=> ( SLASH p_RelativePathExpr ) | SLASH | SLASH_SLASH p_RelativePathExpr | p_RelativePathExpr );
    public final XQueryParser.p_PathExpr_return p_PathExpr() throws RecognitionException {
        XQueryParser.p_PathExpr_return retval = new XQueryParser.p_PathExpr_return();
        retval.start = input.LT(1);

        XQDTCommonTree root_0 = null;

        CommonToken SLASH255=null;
        CommonToken SLASH257=null;
        CommonToken SLASH_SLASH258=null;
        XQueryParser.p_RelativePathExpr_return p_RelativePathExpr256 = null;

        XQueryParser.p_RelativePathExpr_return p_RelativePathExpr259 = null;

        XQueryParser.p_RelativePathExpr_return p_RelativePathExpr260 = null;


        XQDTCommonTree SLASH255_tree=null;
        XQDTCommonTree SLASH257_tree=null;
        XQDTCommonTree SLASH_SLASH258_tree=null;

        try {
            // XQueryParser.g:655:9: ( ( SLASH p_RelativePathExpr )=> ( SLASH p_RelativePathExpr ) | SLASH | SLASH_SLASH p_RelativePathExpr | p_RelativePathExpr )
            int alt109=4;
            alt109 = dfa109.predict(input);
            switch (alt109) {
                case 1 :
                    // XQueryParser.g:655:11: ( SLASH p_RelativePathExpr )=> ( SLASH p_RelativePathExpr )
                    {
                    root_0 = (XQDTCommonTree)adaptor.nil();

                    // XQueryParser.g:655:41: ( SLASH p_RelativePathExpr )
                    // XQueryParser.g:655:42: SLASH p_RelativePathExpr
                    {
                    SLASH255=(CommonToken)match(input,SLASH,FOLLOW_SLASH_in_p_PathExpr5922); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    SLASH255_tree = (XQDTCommonTree)adaptor.create(SLASH255);
                    adaptor.addChild(root_0, SLASH255_tree);
                    }
                    pushFollow(FOLLOW_p_RelativePathExpr_in_p_PathExpr5924);
                    p_RelativePathExpr256=p_RelativePathExpr();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, p_RelativePathExpr256.getTree());

                    }


                    }
                    break;
                case 2 :
                    // XQueryParser.g:656:11: SLASH
                    {
                    root_0 = (XQDTCommonTree)adaptor.nil();

                    SLASH257=(CommonToken)match(input,SLASH,FOLLOW_SLASH_in_p_PathExpr5937); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    SLASH257_tree = (XQDTCommonTree)adaptor.create(SLASH257);
                    adaptor.addChild(root_0, SLASH257_tree);
                    }

                    }
                    break;
                case 3 :
                    // XQueryParser.g:657:11: SLASH_SLASH p_RelativePathExpr
                    {
                    root_0 = (XQDTCommonTree)adaptor.nil();

                    SLASH_SLASH258=(CommonToken)match(input,SLASH_SLASH,FOLLOW_SLASH_SLASH_in_p_PathExpr5949); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    SLASH_SLASH258_tree = (XQDTCommonTree)adaptor.create(SLASH_SLASH258);
                    adaptor.addChild(root_0, SLASH_SLASH258_tree);
                    }
                    pushFollow(FOLLOW_p_RelativePathExpr_in_p_PathExpr5951);
                    p_RelativePathExpr259=p_RelativePathExpr();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, p_RelativePathExpr259.getTree());

                    }
                    break;
                case 4 :
                    // XQueryParser.g:658:11: p_RelativePathExpr
                    {
                    root_0 = (XQDTCommonTree)adaptor.nil();

                    pushFollow(FOLLOW_p_RelativePathExpr_in_p_PathExpr5963);
                    p_RelativePathExpr260=p_RelativePathExpr();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, p_RelativePathExpr260.getTree());

                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (XQDTCommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (XQDTCommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "p_PathExpr"

    public static class p_RelativePathExpr_return extends ParserRuleReturnScope {
        XQDTCommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "p_RelativePathExpr"
    // XQueryParser.g:662:1: p_RelativePathExpr : p_StepExpr ( ( SLASH | SLASH_SLASH ) p_StepExpr )* ;
    public final XQueryParser.p_RelativePathExpr_return p_RelativePathExpr() throws RecognitionException {
        XQueryParser.p_RelativePathExpr_return retval = new XQueryParser.p_RelativePathExpr_return();
        retval.start = input.LT(1);

        XQDTCommonTree root_0 = null;

        CommonToken set262=null;
        XQueryParser.p_StepExpr_return p_StepExpr261 = null;

        XQueryParser.p_StepExpr_return p_StepExpr263 = null;


        XQDTCommonTree set262_tree=null;

        try {
            // XQueryParser.g:663:9: ( p_StepExpr ( ( SLASH | SLASH_SLASH ) p_StepExpr )* )
            // XQueryParser.g:663:11: p_StepExpr ( ( SLASH | SLASH_SLASH ) p_StepExpr )*
            {
            root_0 = (XQDTCommonTree)adaptor.nil();

            pushFollow(FOLLOW_p_StepExpr_in_p_RelativePathExpr5991);
            p_StepExpr261=p_StepExpr();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, p_StepExpr261.getTree());
            // XQueryParser.g:663:22: ( ( SLASH | SLASH_SLASH ) p_StepExpr )*
            loop110:
            do {
                int alt110=2;
                int LA110_0 = input.LA(1);

                if ( ((LA110_0>=SLASH && LA110_0<=SLASH_SLASH)) ) {
                    alt110=1;
                }


                switch (alt110) {
            	case 1 :
            	    // XQueryParser.g:663:23: ( SLASH | SLASH_SLASH ) p_StepExpr
            	    {
            	    set262=(CommonToken)input.LT(1);
            	    if ( (input.LA(1)>=SLASH && input.LA(1)<=SLASH_SLASH) ) {
            	        input.consume();
            	        if ( state.backtracking==0 ) adaptor.addChild(root_0, (XQDTCommonTree)adaptor.create(set262));
            	        state.errorRecovery=false;state.failed=false;
            	    }
            	    else {
            	        if (state.backtracking>0) {state.failed=true; return retval;}
            	        MismatchedSetException mse = new MismatchedSetException(null,input);
            	        throw mse;
            	    }

            	    pushFollow(FOLLOW_p_StepExpr_in_p_RelativePathExpr6002);
            	    p_StepExpr263=p_StepExpr();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, p_StepExpr263.getTree());

            	    }
            	    break;

            	default :
            	    break loop110;
                }
            } while (true);


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (XQDTCommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (XQDTCommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "p_RelativePathExpr"

    public static class p_StepExpr_return extends ParserRuleReturnScope {
        XQDTCommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "p_StepExpr"
    // XQueryParser.g:667:1: p_StepExpr : ( p_AxisStep | p_FilterExpr );
    public final XQueryParser.p_StepExpr_return p_StepExpr() throws RecognitionException {
        XQueryParser.p_StepExpr_return retval = new XQueryParser.p_StepExpr_return();
        retval.start = input.LT(1);

        XQDTCommonTree root_0 = null;

        XQueryParser.p_AxisStep_return p_AxisStep264 = null;

        XQueryParser.p_FilterExpr_return p_FilterExpr265 = null;



        try {
            // XQueryParser.g:668:9: ( p_AxisStep | p_FilterExpr )
            int alt111=2;
            alt111 = dfa111.predict(input);
            switch (alt111) {
                case 1 :
                    // XQueryParser.g:668:11: p_AxisStep
                    {
                    root_0 = (XQDTCommonTree)adaptor.nil();

                    pushFollow(FOLLOW_p_AxisStep_in_p_StepExpr6030);
                    p_AxisStep264=p_AxisStep();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, p_AxisStep264.getTree());

                    }
                    break;
                case 2 :
                    // XQueryParser.g:669:11: p_FilterExpr
                    {
                    root_0 = (XQDTCommonTree)adaptor.nil();

                    pushFollow(FOLLOW_p_FilterExpr_in_p_StepExpr6042);
                    p_FilterExpr265=p_FilterExpr();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, p_FilterExpr265.getTree());

                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (XQDTCommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (XQDTCommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "p_StepExpr"

    public static class p_AxisStep_return extends ParserRuleReturnScope {
        XQDTCommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "p_AxisStep"
    // XQueryParser.g:673:1: p_AxisStep : ( p_ReverseStep | p_ForwardStep ) p_PredicateList ;
    public final XQueryParser.p_AxisStep_return p_AxisStep() throws RecognitionException {
        XQueryParser.p_AxisStep_return retval = new XQueryParser.p_AxisStep_return();
        retval.start = input.LT(1);

        XQDTCommonTree root_0 = null;

        XQueryParser.p_ReverseStep_return p_ReverseStep266 = null;

        XQueryParser.p_ForwardStep_return p_ForwardStep267 = null;

        XQueryParser.p_PredicateList_return p_PredicateList268 = null;



        try {
            // XQueryParser.g:674:9: ( ( p_ReverseStep | p_ForwardStep ) p_PredicateList )
            // XQueryParser.g:674:11: ( p_ReverseStep | p_ForwardStep ) p_PredicateList
            {
            root_0 = (XQDTCommonTree)adaptor.nil();

            // XQueryParser.g:674:11: ( p_ReverseStep | p_ForwardStep )
            int alt112=2;
            switch ( input.LA(1) ) {
            case PARENT:
                {
                int LA112_1 = input.LA(2);

                if ( (LA112_1==COLON_COLON) ) {
                    alt112=1;
                }
                else if ( (LA112_1==EOF||(LA112_1>=AND && LA112_1<=ASCENDING)||(LA112_1>=CASE && LA112_1<=CASTABLE)||LA112_1==COLLATION||LA112_1==DEFAULT||(LA112_1>=DESCENDING && LA112_1<=DIV)||(LA112_1>=ELSE && LA112_1<=EMPTY)||LA112_1==EQ||LA112_1==EXCEPT||LA112_1==FOR||LA112_1==GE||(LA112_1>=GT && LA112_1<=IDIV)||(LA112_1>=INSTANCE && LA112_1<=IS)||LA112_1==LE||(LA112_1>=LET && LA112_1<=MOD)||LA112_1==NE||(LA112_1>=OR && LA112_1<=ORDER)||(LA112_1>=RETURN && LA112_1<=SATISFIES)||LA112_1==STABLE||(LA112_1>=TO && LA112_1<=TREAT)||LA112_1==UNION||LA112_1==WHERE||LA112_1==COUNT||(LA112_1>=END && LA112_1<=GROUP)||LA112_1==ONLY||LA112_1==START||(LA112_1>=AFTER && LA112_1<=BEFORE)||LA112_1==INTO||LA112_1==MODIFY||LA112_1==WITH||LA112_1==RPAREN||(LA112_1>=RBRACKET && LA112_1<=EQUAL)||LA112_1==NOTEQUAL||LA112_1==COMMA||(LA112_1>=STAR && LA112_1<=SLASH_SLASH)||LA112_1==COLON||(LA112_1>=SEMICOLON && LA112_1<=VBAR)) ) {
                    alt112=2;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 112, 1, input);

                    throw nvae;
                }
                }
                break;
            case ANCESTOR:
                {
                int LA112_2 = input.LA(2);

                if ( (LA112_2==COLON_COLON) ) {
                    alt112=1;
                }
                else if ( (LA112_2==EOF||(LA112_2>=AND && LA112_2<=ASCENDING)||(LA112_2>=CASE && LA112_2<=CASTABLE)||LA112_2==COLLATION||LA112_2==DEFAULT||(LA112_2>=DESCENDING && LA112_2<=DIV)||(LA112_2>=ELSE && LA112_2<=EMPTY)||LA112_2==EQ||LA112_2==EXCEPT||LA112_2==FOR||LA112_2==GE||(LA112_2>=GT && LA112_2<=IDIV)||(LA112_2>=INSTANCE && LA112_2<=IS)||LA112_2==LE||(LA112_2>=LET && LA112_2<=MOD)||LA112_2==NE||(LA112_2>=OR && LA112_2<=ORDER)||(LA112_2>=RETURN && LA112_2<=SATISFIES)||LA112_2==STABLE||(LA112_2>=TO && LA112_2<=TREAT)||LA112_2==UNION||LA112_2==WHERE||LA112_2==COUNT||(LA112_2>=END && LA112_2<=GROUP)||LA112_2==ONLY||LA112_2==START||(LA112_2>=AFTER && LA112_2<=BEFORE)||LA112_2==INTO||LA112_2==MODIFY||LA112_2==WITH||LA112_2==RPAREN||(LA112_2>=RBRACKET && LA112_2<=EQUAL)||LA112_2==NOTEQUAL||LA112_2==COMMA||(LA112_2>=STAR && LA112_2<=SLASH_SLASH)||LA112_2==COLON||(LA112_2>=SEMICOLON && LA112_2<=VBAR)) ) {
                    alt112=2;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 112, 2, input);

                    throw nvae;
                }
                }
                break;
            case PRECEDING_SIBLING:
                {
                int LA112_3 = input.LA(2);

                if ( (LA112_3==COLON_COLON) ) {
                    alt112=1;
                }
                else if ( (LA112_3==EOF||(LA112_3>=AND && LA112_3<=ASCENDING)||(LA112_3>=CASE && LA112_3<=CASTABLE)||LA112_3==COLLATION||LA112_3==DEFAULT||(LA112_3>=DESCENDING && LA112_3<=DIV)||(LA112_3>=ELSE && LA112_3<=EMPTY)||LA112_3==EQ||LA112_3==EXCEPT||LA112_3==FOR||LA112_3==GE||(LA112_3>=GT && LA112_3<=IDIV)||(LA112_3>=INSTANCE && LA112_3<=IS)||LA112_3==LE||(LA112_3>=LET && LA112_3<=MOD)||LA112_3==NE||(LA112_3>=OR && LA112_3<=ORDER)||(LA112_3>=RETURN && LA112_3<=SATISFIES)||LA112_3==STABLE||(LA112_3>=TO && LA112_3<=TREAT)||LA112_3==UNION||LA112_3==WHERE||LA112_3==COUNT||(LA112_3>=END && LA112_3<=GROUP)||LA112_3==ONLY||LA112_3==START||(LA112_3>=AFTER && LA112_3<=BEFORE)||LA112_3==INTO||LA112_3==MODIFY||LA112_3==WITH||LA112_3==RPAREN||(LA112_3>=RBRACKET && LA112_3<=EQUAL)||LA112_3==NOTEQUAL||LA112_3==COMMA||(LA112_3>=STAR && LA112_3<=SLASH_SLASH)||LA112_3==COLON||(LA112_3>=SEMICOLON && LA112_3<=VBAR)) ) {
                    alt112=2;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 112, 3, input);

                    throw nvae;
                }
                }
                break;
            case PRECEDING:
                {
                int LA112_4 = input.LA(2);

                if ( (LA112_4==COLON_COLON) ) {
                    alt112=1;
                }
                else if ( (LA112_4==EOF||(LA112_4>=AND && LA112_4<=ASCENDING)||(LA112_4>=CASE && LA112_4<=CASTABLE)||LA112_4==COLLATION||LA112_4==DEFAULT||(LA112_4>=DESCENDING && LA112_4<=DIV)||(LA112_4>=ELSE && LA112_4<=EMPTY)||LA112_4==EQ||LA112_4==EXCEPT||LA112_4==FOR||LA112_4==GE||(LA112_4>=GT && LA112_4<=IDIV)||(LA112_4>=INSTANCE && LA112_4<=IS)||LA112_4==LE||(LA112_4>=LET && LA112_4<=MOD)||LA112_4==NE||(LA112_4>=OR && LA112_4<=ORDER)||(LA112_4>=RETURN && LA112_4<=SATISFIES)||LA112_4==STABLE||(LA112_4>=TO && LA112_4<=TREAT)||LA112_4==UNION||LA112_4==WHERE||LA112_4==COUNT||(LA112_4>=END && LA112_4<=GROUP)||LA112_4==ONLY||LA112_4==START||(LA112_4>=AFTER && LA112_4<=BEFORE)||LA112_4==INTO||LA112_4==MODIFY||LA112_4==WITH||LA112_4==RPAREN||(LA112_4>=RBRACKET && LA112_4<=EQUAL)||LA112_4==NOTEQUAL||LA112_4==COMMA||(LA112_4>=STAR && LA112_4<=SLASH_SLASH)||LA112_4==COLON||(LA112_4>=SEMICOLON && LA112_4<=VBAR)) ) {
                    alt112=2;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 112, 4, input);

                    throw nvae;
                }
                }
                break;
            case ANCESTOR_OR_SELF:
                {
                int LA112_5 = input.LA(2);

                if ( (LA112_5==COLON_COLON) ) {
                    alt112=1;
                }
                else if ( (LA112_5==EOF||(LA112_5>=AND && LA112_5<=ASCENDING)||(LA112_5>=CASE && LA112_5<=CASTABLE)||LA112_5==COLLATION||LA112_5==DEFAULT||(LA112_5>=DESCENDING && LA112_5<=DIV)||(LA112_5>=ELSE && LA112_5<=EMPTY)||LA112_5==EQ||LA112_5==EXCEPT||LA112_5==FOR||LA112_5==GE||(LA112_5>=GT && LA112_5<=IDIV)||(LA112_5>=INSTANCE && LA112_5<=IS)||LA112_5==LE||(LA112_5>=LET && LA112_5<=MOD)||LA112_5==NE||(LA112_5>=OR && LA112_5<=ORDER)||(LA112_5>=RETURN && LA112_5<=SATISFIES)||LA112_5==STABLE||(LA112_5>=TO && LA112_5<=TREAT)||LA112_5==UNION||LA112_5==WHERE||LA112_5==COUNT||(LA112_5>=END && LA112_5<=GROUP)||LA112_5==ONLY||LA112_5==START||(LA112_5>=AFTER && LA112_5<=BEFORE)||LA112_5==INTO||LA112_5==MODIFY||LA112_5==WITH||LA112_5==RPAREN||(LA112_5>=RBRACKET && LA112_5<=EQUAL)||LA112_5==NOTEQUAL||LA112_5==COMMA||(LA112_5>=STAR && LA112_5<=SLASH_SLASH)||LA112_5==COLON||(LA112_5>=SEMICOLON && LA112_5<=VBAR)) ) {
                    alt112=2;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 112, 5, input);

                    throw nvae;
                }
                }
                break;
            case DOT_DOT:
                {
                alt112=1;
                }
                break;
            case AND:
            case AS:
            case ASCENDING:
            case AT:
            case ATTRIBUTE:
            case BASE_URI:
            case BOUNDARY_SPACE:
            case BY:
            case CASE:
            case CAST:
            case CASTABLE:
            case CHILD:
            case COLLATION:
            case COMMENT:
            case CONSTRUCTION:
            case COPY_NAMESPACES:
            case DECLARE:
            case DEFAULT:
            case DESCENDANT:
            case DESCENDANT_OR_SELF:
            case DESCENDING:
            case DIV:
            case DOCUMENT:
            case DOCUMENT_NODE:
            case ELEMENT:
            case ELSE:
            case EMPTY:
            case EMPTY_SEQUENCE:
            case ENCODING:
            case EQ:
            case EVERY:
            case EXCEPT:
            case EXTERNAL:
            case FOLLOWING:
            case FOLLOWING_SIBLING:
            case FOR:
            case FUNCTION:
            case GE:
            case GREATEST:
            case GT:
            case IDIV:
            case IF:
            case IMPORT:
            case IN:
            case INHERIT:
            case INSTANCE:
            case INTERSECT:
            case IS:
            case ITEM:
            case LAX:
            case LE:
            case LEAST:
            case LET:
            case LT:
            case MOD:
            case MODULE:
            case NAMESPACE:
            case NE:
            case NO_INHERIT:
            case NO_PRESERVE:
            case NODE:
            case OF:
            case OPTION:
            case OR:
            case ORDER:
            case ORDERED:
            case ORDERING:
            case PRESERVE:
            case PROCESSING_INSTRUCTION:
            case RETURN:
            case SATISFIES:
            case SCHEMA:
            case SCHEMA_ATTRIBUTE:
            case SCHEMA_ELEMENT:
            case SELF:
            case SOME:
            case STABLE:
            case STRICT:
            case STRIP:
            case TEXT:
            case THEN:
            case TO:
            case TREAT:
            case TYPESWITCH:
            case UNION:
            case UNORDERED:
            case VALIDATE:
            case VARIABLE:
            case VERSION:
            case WHERE:
            case XQUERY:
            case CATCH:
            case CONTEXT:
            case COUNT:
            case DECIMAL_FORMAT:
            case DECIMAL_SEPARATOR:
            case DIGIT:
            case END:
            case GROUP:
            case GROUPING_SEPARATOR:
            case INFINITY:
            case MINUS_SIGN:
            case NAMESPACE_NODE:
            case NAN:
            case NEXT:
            case ONLY:
            case OUTER:
            case PATTERN_SEPARATOR:
            case PERCENT:
            case PER_MILLE:
            case PREVIOUS:
            case SLIDING:
            case START:
            case TRY:
            case TUMBLING:
            case WHEN:
            case WINDOW:
            case ZERO_DIGIT:
            case AFTER:
            case BEFORE:
            case COPY:
            case DELETE:
            case FIRST:
            case INSERT:
            case INTO:
            case LAST:
            case MODIFY:
            case NODES:
            case RENAME:
            case REPLACE:
            case REVALIDATION:
            case SKIP:
            case UPDATING:
            case VALUE:
            case WITH:
            case BLOCK:
            case CONSTANT:
            case EXIT:
            case SEQUENTIAL:
            case SET:
            case SIMPLE:
            case WHILE:
            case EVAL:
            case USING:
            case BINARY:
            case AMP_ER:
            case APOS_ER:
            case QUOT_ER:
            case STAR:
            case ATTR_SIGN:
            case L_NCName:
                {
                alt112=2;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 112, 0, input);

                throw nvae;
            }

            switch (alt112) {
                case 1 :
                    // XQueryParser.g:674:12: p_ReverseStep
                    {
                    pushFollow(FOLLOW_p_ReverseStep_in_p_AxisStep6069);
                    p_ReverseStep266=p_ReverseStep();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, p_ReverseStep266.getTree());

                    }
                    break;
                case 2 :
                    // XQueryParser.g:674:28: p_ForwardStep
                    {
                    pushFollow(FOLLOW_p_ForwardStep_in_p_AxisStep6073);
                    p_ForwardStep267=p_ForwardStep();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, p_ForwardStep267.getTree());

                    }
                    break;

            }

            pushFollow(FOLLOW_p_PredicateList_in_p_AxisStep6076);
            p_PredicateList268=p_PredicateList();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, p_PredicateList268.getTree());

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (XQDTCommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (XQDTCommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "p_AxisStep"

    public static class p_ForwardStep_return extends ParserRuleReturnScope {
        XQDTCommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "p_ForwardStep"
    // XQueryParser.g:678:1: p_ForwardStep : ( ( p_ForwardAxis p_NodeTest ) | p_AbbrevForwardStep );
    public final XQueryParser.p_ForwardStep_return p_ForwardStep() throws RecognitionException {
        XQueryParser.p_ForwardStep_return retval = new XQueryParser.p_ForwardStep_return();
        retval.start = input.LT(1);

        XQDTCommonTree root_0 = null;

        XQueryParser.p_ForwardAxis_return p_ForwardAxis269 = null;

        XQueryParser.p_NodeTest_return p_NodeTest270 = null;

        XQueryParser.p_AbbrevForwardStep_return p_AbbrevForwardStep271 = null;



        try {
            // XQueryParser.g:679:9: ( ( p_ForwardAxis p_NodeTest ) | p_AbbrevForwardStep )
            int alt113=2;
            alt113 = dfa113.predict(input);
            switch (alt113) {
                case 1 :
                    // XQueryParser.g:679:11: ( p_ForwardAxis p_NodeTest )
                    {
                    root_0 = (XQDTCommonTree)adaptor.nil();

                    // XQueryParser.g:679:11: ( p_ForwardAxis p_NodeTest )
                    // XQueryParser.g:679:12: p_ForwardAxis p_NodeTest
                    {
                    pushFollow(FOLLOW_p_ForwardAxis_in_p_ForwardStep6103);
                    p_ForwardAxis269=p_ForwardAxis();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, p_ForwardAxis269.getTree());
                    pushFollow(FOLLOW_p_NodeTest_in_p_ForwardStep6105);
                    p_NodeTest270=p_NodeTest();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, p_NodeTest270.getTree());

                    }


                    }
                    break;
                case 2 :
                    // XQueryParser.g:679:40: p_AbbrevForwardStep
                    {
                    root_0 = (XQDTCommonTree)adaptor.nil();

                    pushFollow(FOLLOW_p_AbbrevForwardStep_in_p_ForwardStep6110);
                    p_AbbrevForwardStep271=p_AbbrevForwardStep();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, p_AbbrevForwardStep271.getTree());

                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (XQDTCommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (XQDTCommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "p_ForwardStep"

    public static class p_ForwardAxis_return extends ParserRuleReturnScope {
        XQDTCommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "p_ForwardAxis"
    // XQueryParser.g:683:1: p_ForwardAxis : ( CHILD COLON_COLON | DESCENDANT COLON_COLON | ATTRIBUTE COLON_COLON | SELF COLON_COLON | DESCENDANT_OR_SELF COLON_COLON | FOLLOWING_SIBLING COLON_COLON | FOLLOWING COLON_COLON );
    public final XQueryParser.p_ForwardAxis_return p_ForwardAxis() throws RecognitionException {
        XQueryParser.p_ForwardAxis_return retval = new XQueryParser.p_ForwardAxis_return();
        retval.start = input.LT(1);

        XQDTCommonTree root_0 = null;

        CommonToken CHILD272=null;
        CommonToken COLON_COLON273=null;
        CommonToken DESCENDANT274=null;
        CommonToken COLON_COLON275=null;
        CommonToken ATTRIBUTE276=null;
        CommonToken COLON_COLON277=null;
        CommonToken SELF278=null;
        CommonToken COLON_COLON279=null;
        CommonToken DESCENDANT_OR_SELF280=null;
        CommonToken COLON_COLON281=null;
        CommonToken FOLLOWING_SIBLING282=null;
        CommonToken COLON_COLON283=null;
        CommonToken FOLLOWING284=null;
        CommonToken COLON_COLON285=null;

        XQDTCommonTree CHILD272_tree=null;
        XQDTCommonTree COLON_COLON273_tree=null;
        XQDTCommonTree DESCENDANT274_tree=null;
        XQDTCommonTree COLON_COLON275_tree=null;
        XQDTCommonTree ATTRIBUTE276_tree=null;
        XQDTCommonTree COLON_COLON277_tree=null;
        XQDTCommonTree SELF278_tree=null;
        XQDTCommonTree COLON_COLON279_tree=null;
        XQDTCommonTree DESCENDANT_OR_SELF280_tree=null;
        XQDTCommonTree COLON_COLON281_tree=null;
        XQDTCommonTree FOLLOWING_SIBLING282_tree=null;
        XQDTCommonTree COLON_COLON283_tree=null;
        XQDTCommonTree FOLLOWING284_tree=null;
        XQDTCommonTree COLON_COLON285_tree=null;

        try {
            // XQueryParser.g:684:9: ( CHILD COLON_COLON | DESCENDANT COLON_COLON | ATTRIBUTE COLON_COLON | SELF COLON_COLON | DESCENDANT_OR_SELF COLON_COLON | FOLLOWING_SIBLING COLON_COLON | FOLLOWING COLON_COLON )
            int alt114=7;
            switch ( input.LA(1) ) {
            case CHILD:
                {
                alt114=1;
                }
                break;
            case DESCENDANT:
                {
                alt114=2;
                }
                break;
            case ATTRIBUTE:
                {
                alt114=3;
                }
                break;
            case SELF:
                {
                alt114=4;
                }
                break;
            case DESCENDANT_OR_SELF:
                {
                alt114=5;
                }
                break;
            case FOLLOWING_SIBLING:
                {
                alt114=6;
                }
                break;
            case FOLLOWING:
                {
                alt114=7;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 114, 0, input);

                throw nvae;
            }

            switch (alt114) {
                case 1 :
                    // XQueryParser.g:684:11: CHILD COLON_COLON
                    {
                    root_0 = (XQDTCommonTree)adaptor.nil();

                    CHILD272=(CommonToken)match(input,CHILD,FOLLOW_CHILD_in_p_ForwardAxis6136); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    CHILD272_tree = (XQDTCommonTree)adaptor.create(CHILD272);
                    adaptor.addChild(root_0, CHILD272_tree);
                    }
                    COLON_COLON273=(CommonToken)match(input,COLON_COLON,FOLLOW_COLON_COLON_in_p_ForwardAxis6138); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    COLON_COLON273_tree = (XQDTCommonTree)adaptor.create(COLON_COLON273);
                    adaptor.addChild(root_0, COLON_COLON273_tree);
                    }

                    }
                    break;
                case 2 :
                    // XQueryParser.g:685:11: DESCENDANT COLON_COLON
                    {
                    root_0 = (XQDTCommonTree)adaptor.nil();

                    DESCENDANT274=(CommonToken)match(input,DESCENDANT,FOLLOW_DESCENDANT_in_p_ForwardAxis6150); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    DESCENDANT274_tree = (XQDTCommonTree)adaptor.create(DESCENDANT274);
                    adaptor.addChild(root_0, DESCENDANT274_tree);
                    }
                    COLON_COLON275=(CommonToken)match(input,COLON_COLON,FOLLOW_COLON_COLON_in_p_ForwardAxis6152); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    COLON_COLON275_tree = (XQDTCommonTree)adaptor.create(COLON_COLON275);
                    adaptor.addChild(root_0, COLON_COLON275_tree);
                    }

                    }
                    break;
                case 3 :
                    // XQueryParser.g:686:11: ATTRIBUTE COLON_COLON
                    {
                    root_0 = (XQDTCommonTree)adaptor.nil();

                    ATTRIBUTE276=(CommonToken)match(input,ATTRIBUTE,FOLLOW_ATTRIBUTE_in_p_ForwardAxis6164); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    ATTRIBUTE276_tree = (XQDTCommonTree)adaptor.create(ATTRIBUTE276);
                    adaptor.addChild(root_0, ATTRIBUTE276_tree);
                    }
                    COLON_COLON277=(CommonToken)match(input,COLON_COLON,FOLLOW_COLON_COLON_in_p_ForwardAxis6166); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    COLON_COLON277_tree = (XQDTCommonTree)adaptor.create(COLON_COLON277);
                    adaptor.addChild(root_0, COLON_COLON277_tree);
                    }

                    }
                    break;
                case 4 :
                    // XQueryParser.g:687:11: SELF COLON_COLON
                    {
                    root_0 = (XQDTCommonTree)adaptor.nil();

                    SELF278=(CommonToken)match(input,SELF,FOLLOW_SELF_in_p_ForwardAxis6178); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    SELF278_tree = (XQDTCommonTree)adaptor.create(SELF278);
                    adaptor.addChild(root_0, SELF278_tree);
                    }
                    COLON_COLON279=(CommonToken)match(input,COLON_COLON,FOLLOW_COLON_COLON_in_p_ForwardAxis6180); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    COLON_COLON279_tree = (XQDTCommonTree)adaptor.create(COLON_COLON279);
                    adaptor.addChild(root_0, COLON_COLON279_tree);
                    }

                    }
                    break;
                case 5 :
                    // XQueryParser.g:688:11: DESCENDANT_OR_SELF COLON_COLON
                    {
                    root_0 = (XQDTCommonTree)adaptor.nil();

                    DESCENDANT_OR_SELF280=(CommonToken)match(input,DESCENDANT_OR_SELF,FOLLOW_DESCENDANT_OR_SELF_in_p_ForwardAxis6192); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    DESCENDANT_OR_SELF280_tree = (XQDTCommonTree)adaptor.create(DESCENDANT_OR_SELF280);
                    adaptor.addChild(root_0, DESCENDANT_OR_SELF280_tree);
                    }
                    COLON_COLON281=(CommonToken)match(input,COLON_COLON,FOLLOW_COLON_COLON_in_p_ForwardAxis6194); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    COLON_COLON281_tree = (XQDTCommonTree)adaptor.create(COLON_COLON281);
                    adaptor.addChild(root_0, COLON_COLON281_tree);
                    }

                    }
                    break;
                case 6 :
                    // XQueryParser.g:689:11: FOLLOWING_SIBLING COLON_COLON
                    {
                    root_0 = (XQDTCommonTree)adaptor.nil();

                    FOLLOWING_SIBLING282=(CommonToken)match(input,FOLLOWING_SIBLING,FOLLOW_FOLLOWING_SIBLING_in_p_ForwardAxis6206); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    FOLLOWING_SIBLING282_tree = (XQDTCommonTree)adaptor.create(FOLLOWING_SIBLING282);
                    adaptor.addChild(root_0, FOLLOWING_SIBLING282_tree);
                    }
                    COLON_COLON283=(CommonToken)match(input,COLON_COLON,FOLLOW_COLON_COLON_in_p_ForwardAxis6208); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    COLON_COLON283_tree = (XQDTCommonTree)adaptor.create(COLON_COLON283);
                    adaptor.addChild(root_0, COLON_COLON283_tree);
                    }

                    }
                    break;
                case 7 :
                    // XQueryParser.g:690:11: FOLLOWING COLON_COLON
                    {
                    root_0 = (XQDTCommonTree)adaptor.nil();

                    FOLLOWING284=(CommonToken)match(input,FOLLOWING,FOLLOW_FOLLOWING_in_p_ForwardAxis6220); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    FOLLOWING284_tree = (XQDTCommonTree)adaptor.create(FOLLOWING284);
                    adaptor.addChild(root_0, FOLLOWING284_tree);
                    }
                    COLON_COLON285=(CommonToken)match(input,COLON_COLON,FOLLOW_COLON_COLON_in_p_ForwardAxis6222); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    COLON_COLON285_tree = (XQDTCommonTree)adaptor.create(COLON_COLON285);
                    adaptor.addChild(root_0, COLON_COLON285_tree);
                    }

                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (XQDTCommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (XQDTCommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "p_ForwardAxis"

    public static class p_AbbrevForwardStep_return extends ParserRuleReturnScope {
        XQDTCommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "p_AbbrevForwardStep"
    // XQueryParser.g:694:1: p_AbbrevForwardStep : ( ATTR_SIGN )? p_NodeTest ;
    public final XQueryParser.p_AbbrevForwardStep_return p_AbbrevForwardStep() throws RecognitionException {
        XQueryParser.p_AbbrevForwardStep_return retval = new XQueryParser.p_AbbrevForwardStep_return();
        retval.start = input.LT(1);

        XQDTCommonTree root_0 = null;

        CommonToken ATTR_SIGN286=null;
        XQueryParser.p_NodeTest_return p_NodeTest287 = null;


        XQDTCommonTree ATTR_SIGN286_tree=null;

        try {
            // XQueryParser.g:695:9: ( ( ATTR_SIGN )? p_NodeTest )
            // XQueryParser.g:695:11: ( ATTR_SIGN )? p_NodeTest
            {
            root_0 = (XQDTCommonTree)adaptor.nil();

            // XQueryParser.g:695:11: ( ATTR_SIGN )?
            int alt115=2;
            int LA115_0 = input.LA(1);

            if ( (LA115_0==ATTR_SIGN) ) {
                alt115=1;
            }
            switch (alt115) {
                case 1 :
                    // XQueryParser.g:695:11: ATTR_SIGN
                    {
                    ATTR_SIGN286=(CommonToken)match(input,ATTR_SIGN,FOLLOW_ATTR_SIGN_in_p_AbbrevForwardStep6248); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    ATTR_SIGN286_tree = (XQDTCommonTree)adaptor.create(ATTR_SIGN286);
                    adaptor.addChild(root_0, ATTR_SIGN286_tree);
                    }

                    }
                    break;

            }

            pushFollow(FOLLOW_p_NodeTest_in_p_AbbrevForwardStep6251);
            p_NodeTest287=p_NodeTest();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, p_NodeTest287.getTree());

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (XQDTCommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (XQDTCommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "p_AbbrevForwardStep"

    public static class p_ReverseStep_return extends ParserRuleReturnScope {
        XQDTCommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "p_ReverseStep"
    // XQueryParser.g:699:1: p_ReverseStep : ( ( p_ReverseAxis p_NodeTest ) | p_AbbrevReverseStep );
    public final XQueryParser.p_ReverseStep_return p_ReverseStep() throws RecognitionException {
        XQueryParser.p_ReverseStep_return retval = new XQueryParser.p_ReverseStep_return();
        retval.start = input.LT(1);

        XQDTCommonTree root_0 = null;

        XQueryParser.p_ReverseAxis_return p_ReverseAxis288 = null;

        XQueryParser.p_NodeTest_return p_NodeTest289 = null;

        XQueryParser.p_AbbrevReverseStep_return p_AbbrevReverseStep290 = null;



        try {
            // XQueryParser.g:700:9: ( ( p_ReverseAxis p_NodeTest ) | p_AbbrevReverseStep )
            int alt116=2;
            int LA116_0 = input.LA(1);

            if ( ((LA116_0>=ANCESTOR && LA116_0<=ANCESTOR_OR_SELF)||(LA116_0>=PARENT && LA116_0<=PRECEDING_SIBLING)) ) {
                alt116=1;
            }
            else if ( (LA116_0==DOT_DOT) ) {
                alt116=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 116, 0, input);

                throw nvae;
            }
            switch (alt116) {
                case 1 :
                    // XQueryParser.g:700:11: ( p_ReverseAxis p_NodeTest )
                    {
                    root_0 = (XQDTCommonTree)adaptor.nil();

                    // XQueryParser.g:700:11: ( p_ReverseAxis p_NodeTest )
                    // XQueryParser.g:700:12: p_ReverseAxis p_NodeTest
                    {
                    pushFollow(FOLLOW_p_ReverseAxis_in_p_ReverseStep6278);
                    p_ReverseAxis288=p_ReverseAxis();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, p_ReverseAxis288.getTree());
                    pushFollow(FOLLOW_p_NodeTest_in_p_ReverseStep6280);
                    p_NodeTest289=p_NodeTest();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, p_NodeTest289.getTree());

                    }


                    }
                    break;
                case 2 :
                    // XQueryParser.g:700:40: p_AbbrevReverseStep
                    {
                    root_0 = (XQDTCommonTree)adaptor.nil();

                    pushFollow(FOLLOW_p_AbbrevReverseStep_in_p_ReverseStep6285);
                    p_AbbrevReverseStep290=p_AbbrevReverseStep();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, p_AbbrevReverseStep290.getTree());

                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (XQDTCommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (XQDTCommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "p_ReverseStep"

    public static class p_ReverseAxis_return extends ParserRuleReturnScope {
        XQDTCommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "p_ReverseAxis"
    // XQueryParser.g:704:1: p_ReverseAxis : ( PARENT COLON_COLON | ANCESTOR COLON_COLON | PRECEDING_SIBLING COLON_COLON | PRECEDING COLON_COLON | ANCESTOR_OR_SELF COLON_COLON );
    public final XQueryParser.p_ReverseAxis_return p_ReverseAxis() throws RecognitionException {
        XQueryParser.p_ReverseAxis_return retval = new XQueryParser.p_ReverseAxis_return();
        retval.start = input.LT(1);

        XQDTCommonTree root_0 = null;

        CommonToken PARENT291=null;
        CommonToken COLON_COLON292=null;
        CommonToken ANCESTOR293=null;
        CommonToken COLON_COLON294=null;
        CommonToken PRECEDING_SIBLING295=null;
        CommonToken COLON_COLON296=null;
        CommonToken PRECEDING297=null;
        CommonToken COLON_COLON298=null;
        CommonToken ANCESTOR_OR_SELF299=null;
        CommonToken COLON_COLON300=null;

        XQDTCommonTree PARENT291_tree=null;
        XQDTCommonTree COLON_COLON292_tree=null;
        XQDTCommonTree ANCESTOR293_tree=null;
        XQDTCommonTree COLON_COLON294_tree=null;
        XQDTCommonTree PRECEDING_SIBLING295_tree=null;
        XQDTCommonTree COLON_COLON296_tree=null;
        XQDTCommonTree PRECEDING297_tree=null;
        XQDTCommonTree COLON_COLON298_tree=null;
        XQDTCommonTree ANCESTOR_OR_SELF299_tree=null;
        XQDTCommonTree COLON_COLON300_tree=null;

        try {
            // XQueryParser.g:705:9: ( PARENT COLON_COLON | ANCESTOR COLON_COLON | PRECEDING_SIBLING COLON_COLON | PRECEDING COLON_COLON | ANCESTOR_OR_SELF COLON_COLON )
            int alt117=5;
            switch ( input.LA(1) ) {
            case PARENT:
                {
                alt117=1;
                }
                break;
            case ANCESTOR:
                {
                alt117=2;
                }
                break;
            case PRECEDING_SIBLING:
                {
                alt117=3;
                }
                break;
            case PRECEDING:
                {
                alt117=4;
                }
                break;
            case ANCESTOR_OR_SELF:
                {
                alt117=5;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 117, 0, input);

                throw nvae;
            }

            switch (alt117) {
                case 1 :
                    // XQueryParser.g:705:11: PARENT COLON_COLON
                    {
                    root_0 = (XQDTCommonTree)adaptor.nil();

                    PARENT291=(CommonToken)match(input,PARENT,FOLLOW_PARENT_in_p_ReverseAxis6311); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    PARENT291_tree = (XQDTCommonTree)adaptor.create(PARENT291);
                    adaptor.addChild(root_0, PARENT291_tree);
                    }
                    COLON_COLON292=(CommonToken)match(input,COLON_COLON,FOLLOW_COLON_COLON_in_p_ReverseAxis6313); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    COLON_COLON292_tree = (XQDTCommonTree)adaptor.create(COLON_COLON292);
                    adaptor.addChild(root_0, COLON_COLON292_tree);
                    }

                    }
                    break;
                case 2 :
                    // XQueryParser.g:706:11: ANCESTOR COLON_COLON
                    {
                    root_0 = (XQDTCommonTree)adaptor.nil();

                    ANCESTOR293=(CommonToken)match(input,ANCESTOR,FOLLOW_ANCESTOR_in_p_ReverseAxis6325); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    ANCESTOR293_tree = (XQDTCommonTree)adaptor.create(ANCESTOR293);
                    adaptor.addChild(root_0, ANCESTOR293_tree);
                    }
                    COLON_COLON294=(CommonToken)match(input,COLON_COLON,FOLLOW_COLON_COLON_in_p_ReverseAxis6327); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    COLON_COLON294_tree = (XQDTCommonTree)adaptor.create(COLON_COLON294);
                    adaptor.addChild(root_0, COLON_COLON294_tree);
                    }

                    }
                    break;
                case 3 :
                    // XQueryParser.g:707:11: PRECEDING_SIBLING COLON_COLON
                    {
                    root_0 = (XQDTCommonTree)adaptor.nil();

                    PRECEDING_SIBLING295=(CommonToken)match(input,PRECEDING_SIBLING,FOLLOW_PRECEDING_SIBLING_in_p_ReverseAxis6339); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    PRECEDING_SIBLING295_tree = (XQDTCommonTree)adaptor.create(PRECEDING_SIBLING295);
                    adaptor.addChild(root_0, PRECEDING_SIBLING295_tree);
                    }
                    COLON_COLON296=(CommonToken)match(input,COLON_COLON,FOLLOW_COLON_COLON_in_p_ReverseAxis6341); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    COLON_COLON296_tree = (XQDTCommonTree)adaptor.create(COLON_COLON296);
                    adaptor.addChild(root_0, COLON_COLON296_tree);
                    }

                    }
                    break;
                case 4 :
                    // XQueryParser.g:708:11: PRECEDING COLON_COLON
                    {
                    root_0 = (XQDTCommonTree)adaptor.nil();

                    PRECEDING297=(CommonToken)match(input,PRECEDING,FOLLOW_PRECEDING_in_p_ReverseAxis6353); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    PRECEDING297_tree = (XQDTCommonTree)adaptor.create(PRECEDING297);
                    adaptor.addChild(root_0, PRECEDING297_tree);
                    }
                    COLON_COLON298=(CommonToken)match(input,COLON_COLON,FOLLOW_COLON_COLON_in_p_ReverseAxis6355); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    COLON_COLON298_tree = (XQDTCommonTree)adaptor.create(COLON_COLON298);
                    adaptor.addChild(root_0, COLON_COLON298_tree);
                    }

                    }
                    break;
                case 5 :
                    // XQueryParser.g:709:11: ANCESTOR_OR_SELF COLON_COLON
                    {
                    root_0 = (XQDTCommonTree)adaptor.nil();

                    ANCESTOR_OR_SELF299=(CommonToken)match(input,ANCESTOR_OR_SELF,FOLLOW_ANCESTOR_OR_SELF_in_p_ReverseAxis6367); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    ANCESTOR_OR_SELF299_tree = (XQDTCommonTree)adaptor.create(ANCESTOR_OR_SELF299);
                    adaptor.addChild(root_0, ANCESTOR_OR_SELF299_tree);
                    }
                    COLON_COLON300=(CommonToken)match(input,COLON_COLON,FOLLOW_COLON_COLON_in_p_ReverseAxis6369); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    COLON_COLON300_tree = (XQDTCommonTree)adaptor.create(COLON_COLON300);
                    adaptor.addChild(root_0, COLON_COLON300_tree);
                    }

                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (XQDTCommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (XQDTCommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "p_ReverseAxis"

    public static class p_AbbrevReverseStep_return extends ParserRuleReturnScope {
        XQDTCommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "p_AbbrevReverseStep"
    // XQueryParser.g:713:1: p_AbbrevReverseStep : DOT_DOT ;
    public final XQueryParser.p_AbbrevReverseStep_return p_AbbrevReverseStep() throws RecognitionException {
        XQueryParser.p_AbbrevReverseStep_return retval = new XQueryParser.p_AbbrevReverseStep_return();
        retval.start = input.LT(1);

        XQDTCommonTree root_0 = null;

        CommonToken DOT_DOT301=null;

        XQDTCommonTree DOT_DOT301_tree=null;

        try {
            // XQueryParser.g:714:9: ( DOT_DOT )
            // XQueryParser.g:714:11: DOT_DOT
            {
            root_0 = (XQDTCommonTree)adaptor.nil();

            DOT_DOT301=(CommonToken)match(input,DOT_DOT,FOLLOW_DOT_DOT_in_p_AbbrevReverseStep6395); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            DOT_DOT301_tree = (XQDTCommonTree)adaptor.create(DOT_DOT301);
            adaptor.addChild(root_0, DOT_DOT301_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (XQDTCommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (XQDTCommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "p_AbbrevReverseStep"

    public static class p_NodeTest_return extends ParserRuleReturnScope {
        XQDTCommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "p_NodeTest"
    // XQueryParser.g:718:1: p_NodeTest : ( p_KindTest | p_NameTest );
    public final XQueryParser.p_NodeTest_return p_NodeTest() throws RecognitionException {
        XQueryParser.p_NodeTest_return retval = new XQueryParser.p_NodeTest_return();
        retval.start = input.LT(1);

        XQDTCommonTree root_0 = null;

        XQueryParser.p_KindTest_return p_KindTest302 = null;

        XQueryParser.p_NameTest_return p_NameTest303 = null;



        try {
            // XQueryParser.g:719:9: ( p_KindTest | p_NameTest )
            int alt118=2;
            alt118 = dfa118.predict(input);
            switch (alt118) {
                case 1 :
                    // XQueryParser.g:719:11: p_KindTest
                    {
                    root_0 = (XQDTCommonTree)adaptor.nil();

                    pushFollow(FOLLOW_p_KindTest_in_p_NodeTest6421);
                    p_KindTest302=p_KindTest();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, p_KindTest302.getTree());

                    }
                    break;
                case 2 :
                    // XQueryParser.g:719:24: p_NameTest
                    {
                    root_0 = (XQDTCommonTree)adaptor.nil();

                    pushFollow(FOLLOW_p_NameTest_in_p_NodeTest6425);
                    p_NameTest303=p_NameTest();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, p_NameTest303.getTree());

                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (XQDTCommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (XQDTCommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "p_NodeTest"

    public static class p_NameTest_return extends ParserRuleReturnScope {
        XQDTCommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "p_NameTest"
    // XQueryParser.g:723:1: p_NameTest : ( p_QName | p_Wildcard );
    public final XQueryParser.p_NameTest_return p_NameTest() throws RecognitionException {
        XQueryParser.p_NameTest_return retval = new XQueryParser.p_NameTest_return();
        retval.start = input.LT(1);

        XQDTCommonTree root_0 = null;

        XQueryParser.p_QName_return p_QName304 = null;

        XQueryParser.p_Wildcard_return p_Wildcard305 = null;



        try {
            // XQueryParser.g:724:9: ( p_QName | p_Wildcard )
            int alt119=2;
            switch ( input.LA(1) ) {
            case L_NCName:
                {
                int LA119_1 = input.LA(2);

                if ( (LA119_1==COLON) ) {
                    int LA119_4 = input.LA(3);

                    if ( (LA119_4==STAR) ) {
                        alt119=2;
                    }
                    else if ( ((LA119_4>=ANCESTOR && LA119_4<=EXIT)||(LA119_4>=SEQUENTIAL && LA119_4<=QUOT_ER)||LA119_4==L_NCName) ) {
                        alt119=1;
                    }
                    else {
                        if (state.backtracking>0) {state.failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("", 119, 4, input);

                        throw nvae;
                    }
                }
                else if ( (LA119_1==EOF||(LA119_1>=AND && LA119_1<=ASCENDING)||(LA119_1>=CASE && LA119_1<=CASTABLE)||LA119_1==COLLATION||LA119_1==DEFAULT||(LA119_1>=DESCENDING && LA119_1<=DIV)||(LA119_1>=ELSE && LA119_1<=EMPTY)||LA119_1==EQ||LA119_1==EXCEPT||LA119_1==FOR||LA119_1==GE||(LA119_1>=GT && LA119_1<=IDIV)||(LA119_1>=INSTANCE && LA119_1<=IS)||LA119_1==LE||(LA119_1>=LET && LA119_1<=MOD)||LA119_1==NE||(LA119_1>=OR && LA119_1<=ORDER)||(LA119_1>=RETURN && LA119_1<=SATISFIES)||LA119_1==STABLE||(LA119_1>=TO && LA119_1<=TREAT)||LA119_1==UNION||LA119_1==WHERE||LA119_1==COUNT||(LA119_1>=END && LA119_1<=GROUP)||LA119_1==ONLY||LA119_1==START||(LA119_1>=AFTER && LA119_1<=BEFORE)||LA119_1==INTO||LA119_1==MODIFY||LA119_1==WITH||(LA119_1>=LPAREN && LA119_1<=RPAREN)||(LA119_1>=LBRACKET && LA119_1<=EQUAL)||LA119_1==NOTEQUAL||LA119_1==COMMA||(LA119_1>=STAR && LA119_1<=SLASH_SLASH)||(LA119_1>=SEMICOLON && LA119_1<=VBAR)) ) {
                    alt119=1;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 119, 1, input);

                    throw nvae;
                }
                }
                break;
            case STAR:
                {
                alt119=2;
                }
                break;
            case ANCESTOR:
            case ANCESTOR_OR_SELF:
            case AND:
            case AS:
            case ASCENDING:
            case AT:
            case ATTRIBUTE:
            case BASE_URI:
            case BOUNDARY_SPACE:
            case BY:
            case CASE:
            case CAST:
            case CASTABLE:
            case CHILD:
            case COLLATION:
            case COMMENT:
            case CONSTRUCTION:
            case COPY_NAMESPACES:
            case DECLARE:
            case DEFAULT:
            case DESCENDANT:
            case DESCENDANT_OR_SELF:
            case DESCENDING:
            case DIV:
            case DOCUMENT:
            case DOCUMENT_NODE:
            case ELEMENT:
            case ELSE:
            case EMPTY:
            case EMPTY_SEQUENCE:
            case ENCODING:
            case EQ:
            case EVERY:
            case EXCEPT:
            case EXTERNAL:
            case FOLLOWING:
            case FOLLOWING_SIBLING:
            case FOR:
            case FUNCTION:
            case GE:
            case GREATEST:
            case GT:
            case IDIV:
            case IF:
            case IMPORT:
            case IN:
            case INHERIT:
            case INSTANCE:
            case INTERSECT:
            case IS:
            case ITEM:
            case LAX:
            case LE:
            case LEAST:
            case LET:
            case LT:
            case MOD:
            case MODULE:
            case NAMESPACE:
            case NE:
            case NO_INHERIT:
            case NO_PRESERVE:
            case NODE:
            case OF:
            case OPTION:
            case OR:
            case ORDER:
            case ORDERED:
            case ORDERING:
            case PARENT:
            case PRECEDING:
            case PRECEDING_SIBLING:
            case PRESERVE:
            case PROCESSING_INSTRUCTION:
            case RETURN:
            case SATISFIES:
            case SCHEMA:
            case SCHEMA_ATTRIBUTE:
            case SCHEMA_ELEMENT:
            case SELF:
            case SOME:
            case STABLE:
            case STRICT:
            case STRIP:
            case TEXT:
            case THEN:
            case TO:
            case TREAT:
            case TYPESWITCH:
            case UNION:
            case UNORDERED:
            case VALIDATE:
            case VARIABLE:
            case VERSION:
            case WHERE:
            case XQUERY:
            case CATCH:
            case CONTEXT:
            case COUNT:
            case DECIMAL_FORMAT:
            case DECIMAL_SEPARATOR:
            case DIGIT:
            case END:
            case GROUP:
            case GROUPING_SEPARATOR:
            case INFINITY:
            case MINUS_SIGN:
            case NAMESPACE_NODE:
            case NAN:
            case NEXT:
            case ONLY:
            case OUTER:
            case PATTERN_SEPARATOR:
            case PERCENT:
            case PER_MILLE:
            case PREVIOUS:
            case SLIDING:
            case START:
            case TRY:
            case TUMBLING:
            case WHEN:
            case WINDOW:
            case ZERO_DIGIT:
            case AFTER:
            case BEFORE:
            case COPY:
            case DELETE:
            case FIRST:
            case INSERT:
            case INTO:
            case LAST:
            case MODIFY:
            case NODES:
            case RENAME:
            case REPLACE:
            case REVALIDATION:
            case SKIP:
            case UPDATING:
            case VALUE:
            case WITH:
            case BLOCK:
            case CONSTANT:
            case EXIT:
            case SEQUENTIAL:
            case SET:
            case SIMPLE:
            case WHILE:
            case EVAL:
            case USING:
            case BINARY:
            case AMP_ER:
            case APOS_ER:
            case QUOT_ER:
                {
                alt119=1;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 119, 0, input);

                throw nvae;
            }

            switch (alt119) {
                case 1 :
                    // XQueryParser.g:724:11: p_QName
                    {
                    root_0 = (XQDTCommonTree)adaptor.nil();

                    pushFollow(FOLLOW_p_QName_in_p_NameTest6451);
                    p_QName304=p_QName();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, p_QName304.getTree());

                    }
                    break;
                case 2 :
                    // XQueryParser.g:724:21: p_Wildcard
                    {
                    root_0 = (XQDTCommonTree)adaptor.nil();

                    pushFollow(FOLLOW_p_Wildcard_in_p_NameTest6455);
                    p_Wildcard305=p_Wildcard();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, p_Wildcard305.getTree());

                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (XQDTCommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (XQDTCommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "p_NameTest"

    public static class p_Wildcard_return extends ParserRuleReturnScope {
        XQDTCommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "p_Wildcard"
    // XQueryParser.g:728:1: p_Wildcard : ( STAR ( COLON L_NCName )? | ( L_NCName COLON STAR ) );
    public final XQueryParser.p_Wildcard_return p_Wildcard() throws RecognitionException {
        XQueryParser.p_Wildcard_return retval = new XQueryParser.p_Wildcard_return();
        retval.start = input.LT(1);

        XQDTCommonTree root_0 = null;

        CommonToken STAR306=null;
        CommonToken COLON307=null;
        CommonToken L_NCName308=null;
        CommonToken L_NCName309=null;
        CommonToken COLON310=null;
        CommonToken STAR311=null;

        XQDTCommonTree STAR306_tree=null;
        XQDTCommonTree COLON307_tree=null;
        XQDTCommonTree L_NCName308_tree=null;
        XQDTCommonTree L_NCName309_tree=null;
        XQDTCommonTree COLON310_tree=null;
        XQDTCommonTree STAR311_tree=null;

        setWsExplicit(true);
        try {
            // XQueryParser.g:729:9: ( STAR ( COLON L_NCName )? | ( L_NCName COLON STAR ) )
            int alt121=2;
            int LA121_0 = input.LA(1);

            if ( (LA121_0==STAR) ) {
                alt121=1;
            }
            else if ( (LA121_0==L_NCName) ) {
                alt121=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 121, 0, input);

                throw nvae;
            }
            switch (alt121) {
                case 1 :
                    // XQueryParser.g:729:11: STAR ( COLON L_NCName )?
                    {
                    root_0 = (XQDTCommonTree)adaptor.nil();

                    STAR306=(CommonToken)match(input,STAR,FOLLOW_STAR_in_p_Wildcard6485); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    STAR306_tree = (XQDTCommonTree)adaptor.create(STAR306);
                    adaptor.addChild(root_0, STAR306_tree);
                    }
                    // XQueryParser.g:729:16: ( COLON L_NCName )?
                    int alt120=2;
                    int LA120_0 = input.LA(1);

                    if ( (LA120_0==COLON) ) {
                        alt120=1;
                    }
                    switch (alt120) {
                        case 1 :
                            // XQueryParser.g:729:17: COLON L_NCName
                            {
                            COLON307=(CommonToken)match(input,COLON,FOLLOW_COLON_in_p_Wildcard6488); if (state.failed) return retval;
                            if ( state.backtracking==0 ) {
                            COLON307_tree = (XQDTCommonTree)adaptor.create(COLON307);
                            adaptor.addChild(root_0, COLON307_tree);
                            }
                            L_NCName308=(CommonToken)match(input,L_NCName,FOLLOW_L_NCName_in_p_Wildcard6490); if (state.failed) return retval;
                            if ( state.backtracking==0 ) {
                            L_NCName308_tree = (XQDTCommonTree)adaptor.create(L_NCName308);
                            adaptor.addChild(root_0, L_NCName308_tree);
                            }

                            }
                            break;

                    }


                    }
                    break;
                case 2 :
                    // XQueryParser.g:729:36: ( L_NCName COLON STAR )
                    {
                    root_0 = (XQDTCommonTree)adaptor.nil();

                    // XQueryParser.g:729:36: ( L_NCName COLON STAR )
                    // XQueryParser.g:729:37: L_NCName COLON STAR
                    {
                    L_NCName309=(CommonToken)match(input,L_NCName,FOLLOW_L_NCName_in_p_Wildcard6497); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    L_NCName309_tree = (XQDTCommonTree)adaptor.create(L_NCName309);
                    adaptor.addChild(root_0, L_NCName309_tree);
                    }
                    COLON310=(CommonToken)match(input,COLON,FOLLOW_COLON_in_p_Wildcard6499); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    COLON310_tree = (XQDTCommonTree)adaptor.create(COLON310);
                    adaptor.addChild(root_0, COLON310_tree);
                    }
                    STAR311=(CommonToken)match(input,STAR,FOLLOW_STAR_in_p_Wildcard6501); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    STAR311_tree = (XQDTCommonTree)adaptor.create(STAR311);
                    adaptor.addChild(root_0, STAR311_tree);
                    }

                    }


                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (XQDTCommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (XQDTCommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            setWsExplicit(false);
        }
        return retval;
    }
    // $ANTLR end "p_Wildcard"

    public static class p_FilterExpr_return extends ParserRuleReturnScope {
        XQDTCommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "p_FilterExpr"
    // XQueryParser.g:734:1: p_FilterExpr : p_PrimaryExpr p_PredicateList ;
    public final XQueryParser.p_FilterExpr_return p_FilterExpr() throws RecognitionException {
        XQueryParser.p_FilterExpr_return retval = new XQueryParser.p_FilterExpr_return();
        retval.start = input.LT(1);

        XQDTCommonTree root_0 = null;

        XQueryParser.p_PrimaryExpr_return p_PrimaryExpr312 = null;

        XQueryParser.p_PredicateList_return p_PredicateList313 = null;



        try {
            // XQueryParser.g:735:9: ( p_PrimaryExpr p_PredicateList )
            // XQueryParser.g:735:13: p_PrimaryExpr p_PredicateList
            {
            root_0 = (XQDTCommonTree)adaptor.nil();

            pushFollow(FOLLOW_p_PrimaryExpr_in_p_FilterExpr6542);
            p_PrimaryExpr312=p_PrimaryExpr();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, p_PrimaryExpr312.getTree());
            pushFollow(FOLLOW_p_PredicateList_in_p_FilterExpr6544);
            p_PredicateList313=p_PredicateList();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, p_PredicateList313.getTree());

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (XQDTCommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (XQDTCommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "p_FilterExpr"

    public static class p_PredicateList_return extends ParserRuleReturnScope {
        XQDTCommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "p_PredicateList"
    // XQueryParser.g:739:1: p_PredicateList : ( p_Predicate )* ;
    public final XQueryParser.p_PredicateList_return p_PredicateList() throws RecognitionException {
        XQueryParser.p_PredicateList_return retval = new XQueryParser.p_PredicateList_return();
        retval.start = input.LT(1);

        XQDTCommonTree root_0 = null;

        XQueryParser.p_Predicate_return p_Predicate314 = null;



        try {
            // XQueryParser.g:740:9: ( ( p_Predicate )* )
            // XQueryParser.g:740:13: ( p_Predicate )*
            {
            root_0 = (XQDTCommonTree)adaptor.nil();

            // XQueryParser.g:740:13: ( p_Predicate )*
            loop122:
            do {
                int alt122=2;
                int LA122_0 = input.LA(1);

                if ( (LA122_0==LSQUARE) ) {
                    alt122=1;
                }


                switch (alt122) {
            	case 1 :
            	    // XQueryParser.g:740:13: p_Predicate
            	    {
            	    pushFollow(FOLLOW_p_Predicate_in_p_PredicateList6572);
            	    p_Predicate314=p_Predicate();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, p_Predicate314.getTree());

            	    }
            	    break;

            	default :
            	    break loop122;
                }
            } while (true);


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (XQDTCommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (XQDTCommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "p_PredicateList"

    public static class p_Predicate_return extends ParserRuleReturnScope {
        XQDTCommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "p_Predicate"
    // XQueryParser.g:744:1: p_Predicate : LSQUARE pm_Expr RSQUARE ;
    public final XQueryParser.p_Predicate_return p_Predicate() throws RecognitionException {
        XQueryParser.p_Predicate_return retval = new XQueryParser.p_Predicate_return();
        retval.start = input.LT(1);

        XQDTCommonTree root_0 = null;

        CommonToken LSQUARE315=null;
        CommonToken RSQUARE317=null;
        XQueryParser.pm_Expr_return pm_Expr316 = null;


        XQDTCommonTree LSQUARE315_tree=null;
        XQDTCommonTree RSQUARE317_tree=null;

        try {
            // XQueryParser.g:745:9: ( LSQUARE pm_Expr RSQUARE )
            // XQueryParser.g:745:13: LSQUARE pm_Expr RSQUARE
            {
            root_0 = (XQDTCommonTree)adaptor.nil();

            LSQUARE315=(CommonToken)match(input,LSQUARE,FOLLOW_LSQUARE_in_p_Predicate6601); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            LSQUARE315_tree = (XQDTCommonTree)adaptor.create(LSQUARE315);
            adaptor.addChild(root_0, LSQUARE315_tree);
            }
            pushFollow(FOLLOW_pm_Expr_in_p_Predicate6603);
            pm_Expr316=pm_Expr();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, pm_Expr316.getTree());
            RSQUARE317=(CommonToken)match(input,RSQUARE,FOLLOW_RSQUARE_in_p_Predicate6605); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            RSQUARE317_tree = (XQDTCommonTree)adaptor.create(RSQUARE317);
            adaptor.addChild(root_0, RSQUARE317_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (XQDTCommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (XQDTCommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "p_Predicate"

    public static class p_PrimaryExpr_return extends ParserRuleReturnScope {
        XQDTCommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "p_PrimaryExpr"
    // XQueryParser.g:749:1: p_PrimaryExpr : ( p_Literal | p_VarRef | p_ParenthesizedExpr | p_ContextItemExpr | p_FunctionCall | p_OrderedExpr | p_UnorderedExpr | p_Constructor );
    public final XQueryParser.p_PrimaryExpr_return p_PrimaryExpr() throws RecognitionException {
        XQueryParser.p_PrimaryExpr_return retval = new XQueryParser.p_PrimaryExpr_return();
        retval.start = input.LT(1);

        XQDTCommonTree root_0 = null;

        XQueryParser.p_Literal_return p_Literal318 = null;

        XQueryParser.p_VarRef_return p_VarRef319 = null;

        XQueryParser.p_ParenthesizedExpr_return p_ParenthesizedExpr320 = null;

        XQueryParser.p_ContextItemExpr_return p_ContextItemExpr321 = null;

        XQueryParser.p_FunctionCall_return p_FunctionCall322 = null;

        XQueryParser.p_OrderedExpr_return p_OrderedExpr323 = null;

        XQueryParser.p_UnorderedExpr_return p_UnorderedExpr324 = null;

        XQueryParser.p_Constructor_return p_Constructor325 = null;



        try {
            // XQueryParser.g:750:9: ( p_Literal | p_VarRef | p_ParenthesizedExpr | p_ContextItemExpr | p_FunctionCall | p_OrderedExpr | p_UnorderedExpr | p_Constructor )
            int alt123=8;
            alt123 = dfa123.predict(input);
            switch (alt123) {
                case 1 :
                    // XQueryParser.g:750:13: p_Literal
                    {
                    root_0 = (XQDTCommonTree)adaptor.nil();

                    pushFollow(FOLLOW_p_Literal_in_p_PrimaryExpr6633);
                    p_Literal318=p_Literal();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, p_Literal318.getTree());

                    }
                    break;
                case 2 :
                    // XQueryParser.g:751:11: p_VarRef
                    {
                    root_0 = (XQDTCommonTree)adaptor.nil();

                    pushFollow(FOLLOW_p_VarRef_in_p_PrimaryExpr6645);
                    p_VarRef319=p_VarRef();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, p_VarRef319.getTree());

                    }
                    break;
                case 3 :
                    // XQueryParser.g:752:11: p_ParenthesizedExpr
                    {
                    root_0 = (XQDTCommonTree)adaptor.nil();

                    pushFollow(FOLLOW_p_ParenthesizedExpr_in_p_PrimaryExpr6657);
                    p_ParenthesizedExpr320=p_ParenthesizedExpr();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, p_ParenthesizedExpr320.getTree());

                    }
                    break;
                case 4 :
                    // XQueryParser.g:753:11: p_ContextItemExpr
                    {
                    root_0 = (XQDTCommonTree)adaptor.nil();

                    pushFollow(FOLLOW_p_ContextItemExpr_in_p_PrimaryExpr6669);
                    p_ContextItemExpr321=p_ContextItemExpr();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, p_ContextItemExpr321.getTree());

                    }
                    break;
                case 5 :
                    // XQueryParser.g:754:11: p_FunctionCall
                    {
                    root_0 = (XQDTCommonTree)adaptor.nil();

                    pushFollow(FOLLOW_p_FunctionCall_in_p_PrimaryExpr6681);
                    p_FunctionCall322=p_FunctionCall();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, p_FunctionCall322.getTree());

                    }
                    break;
                case 6 :
                    // XQueryParser.g:755:11: p_OrderedExpr
                    {
                    root_0 = (XQDTCommonTree)adaptor.nil();

                    pushFollow(FOLLOW_p_OrderedExpr_in_p_PrimaryExpr6693);
                    p_OrderedExpr323=p_OrderedExpr();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, p_OrderedExpr323.getTree());

                    }
                    break;
                case 7 :
                    // XQueryParser.g:756:11: p_UnorderedExpr
                    {
                    root_0 = (XQDTCommonTree)adaptor.nil();

                    pushFollow(FOLLOW_p_UnorderedExpr_in_p_PrimaryExpr6705);
                    p_UnorderedExpr324=p_UnorderedExpr();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, p_UnorderedExpr324.getTree());

                    }
                    break;
                case 8 :
                    // XQueryParser.g:757:11: p_Constructor
                    {
                    root_0 = (XQDTCommonTree)adaptor.nil();

                    pushFollow(FOLLOW_p_Constructor_in_p_PrimaryExpr6717);
                    p_Constructor325=p_Constructor();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, p_Constructor325.getTree());

                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (XQDTCommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (XQDTCommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "p_PrimaryExpr"

    public static class p_Literal_return extends ParserRuleReturnScope {
        XQDTCommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "p_Literal"
    // XQueryParser.g:761:1: p_Literal : ( p_NumericLiteral | p_StringLiteral );
    public final XQueryParser.p_Literal_return p_Literal() throws RecognitionException {
        XQueryParser.p_Literal_return retval = new XQueryParser.p_Literal_return();
        retval.start = input.LT(1);

        XQDTCommonTree root_0 = null;

        XQueryParser.p_NumericLiteral_return p_NumericLiteral326 = null;

        XQueryParser.p_StringLiteral_return p_StringLiteral327 = null;



        try {
            // XQueryParser.g:762:9: ( p_NumericLiteral | p_StringLiteral )
            int alt124=2;
            int LA124_0 = input.LA(1);

            if ( ((LA124_0>=L_IntegerLiteral && LA124_0<=L_DoubleLiteral)) ) {
                alt124=1;
            }
            else if ( ((LA124_0>=APOS && LA124_0<=QUOT)) ) {
                alt124=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 124, 0, input);

                throw nvae;
            }
            switch (alt124) {
                case 1 :
                    // XQueryParser.g:762:13: p_NumericLiteral
                    {
                    root_0 = (XQDTCommonTree)adaptor.nil();

                    pushFollow(FOLLOW_p_NumericLiteral_in_p_Literal6745);
                    p_NumericLiteral326=p_NumericLiteral();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, p_NumericLiteral326.getTree());

                    }
                    break;
                case 2 :
                    // XQueryParser.g:762:32: p_StringLiteral
                    {
                    root_0 = (XQDTCommonTree)adaptor.nil();

                    pushFollow(FOLLOW_p_StringLiteral_in_p_Literal6749);
                    p_StringLiteral327=p_StringLiteral();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, p_StringLiteral327.getTree());

                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (XQDTCommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (XQDTCommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "p_Literal"

    public static class p_NumericLiteral_return extends ParserRuleReturnScope {
        XQDTCommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "p_NumericLiteral"
    // XQueryParser.g:766:1: p_NumericLiteral : ( L_IntegerLiteral | L_DecimalLiteral | L_DoubleLiteral );
    public final XQueryParser.p_NumericLiteral_return p_NumericLiteral() throws RecognitionException {
        XQueryParser.p_NumericLiteral_return retval = new XQueryParser.p_NumericLiteral_return();
        retval.start = input.LT(1);

        XQDTCommonTree root_0 = null;

        CommonToken set328=null;

        XQDTCommonTree set328_tree=null;

        try {
            // XQueryParser.g:767:9: ( L_IntegerLiteral | L_DecimalLiteral | L_DoubleLiteral )
            // XQueryParser.g:
            {
            root_0 = (XQDTCommonTree)adaptor.nil();

            set328=(CommonToken)input.LT(1);
            if ( (input.LA(1)>=L_IntegerLiteral && input.LA(1)<=L_DoubleLiteral) ) {
                input.consume();
                if ( state.backtracking==0 ) adaptor.addChild(root_0, (XQDTCommonTree)adaptor.create(set328));
                state.errorRecovery=false;state.failed=false;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                MismatchedSetException mse = new MismatchedSetException(null,input);
                throw mse;
            }


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (XQDTCommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (XQDTCommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "p_NumericLiteral"

    public static class p_VarRef_return extends ParserRuleReturnScope {
        XQDTCommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "p_VarRef"
    // XQueryParser.g:771:1: p_VarRef : DOLLAR p_VarName ;
    public final XQueryParser.p_VarRef_return p_VarRef() throws RecognitionException {
        XQueryParser.p_VarRef_return retval = new XQueryParser.p_VarRef_return();
        retval.start = input.LT(1);

        XQDTCommonTree root_0 = null;

        CommonToken DOLLAR329=null;
        XQueryParser.p_VarName_return p_VarName330 = null;


        XQDTCommonTree DOLLAR329_tree=null;

        try {
            // XQueryParser.g:772:9: ( DOLLAR p_VarName )
            // XQueryParser.g:772:13: DOLLAR p_VarName
            {
            root_0 = (XQDTCommonTree)adaptor.nil();

            DOLLAR329=(CommonToken)match(input,DOLLAR,FOLLOW_DOLLAR_in_p_VarRef6821); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            DOLLAR329_tree = (XQDTCommonTree)adaptor.create(DOLLAR329);
            adaptor.addChild(root_0, DOLLAR329_tree);
            }
            pushFollow(FOLLOW_p_VarName_in_p_VarRef6823);
            p_VarName330=p_VarName();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, p_VarName330.getTree());

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (XQDTCommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (XQDTCommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "p_VarRef"

    public static class p_VarName_return extends ParserRuleReturnScope {
        XQDTCommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "p_VarName"
    // XQueryParser.g:776:1: p_VarName : p_QName ;
    public final XQueryParser.p_VarName_return p_VarName() throws RecognitionException {
        XQueryParser.p_VarName_return retval = new XQueryParser.p_VarName_return();
        retval.start = input.LT(1);

        XQDTCommonTree root_0 = null;

        XQueryParser.p_QName_return p_QName331 = null;



        try {
            // XQueryParser.g:777:9: ( p_QName )
            // XQueryParser.g:777:13: p_QName
            {
            root_0 = (XQDTCommonTree)adaptor.nil();

            pushFollow(FOLLOW_p_QName_in_p_VarName6851);
            p_QName331=p_QName();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, p_QName331.getTree());

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (XQDTCommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (XQDTCommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "p_VarName"

    public static class p_ParenthesizedExpr_return extends ParserRuleReturnScope {
        XQDTCommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "p_ParenthesizedExpr"
    // XQueryParser.g:781:1: p_ParenthesizedExpr : LPAREN ( pm_Expr )? RPAREN ;
    public final XQueryParser.p_ParenthesizedExpr_return p_ParenthesizedExpr() throws RecognitionException {
        XQueryParser.p_ParenthesizedExpr_return retval = new XQueryParser.p_ParenthesizedExpr_return();
        retval.start = input.LT(1);

        XQDTCommonTree root_0 = null;

        CommonToken LPAREN332=null;
        CommonToken RPAREN334=null;
        XQueryParser.pm_Expr_return pm_Expr333 = null;


        XQDTCommonTree LPAREN332_tree=null;
        XQDTCommonTree RPAREN334_tree=null;

        try {
            // XQueryParser.g:782:9: ( LPAREN ( pm_Expr )? RPAREN )
            // XQueryParser.g:782:13: LPAREN ( pm_Expr )? RPAREN
            {
            root_0 = (XQDTCommonTree)adaptor.nil();

            LPAREN332=(CommonToken)match(input,LPAREN,FOLLOW_LPAREN_in_p_ParenthesizedExpr6879); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            LPAREN332_tree = (XQDTCommonTree)adaptor.create(LPAREN332);
            adaptor.addChild(root_0, LPAREN332_tree);
            }
            // XQueryParser.g:782:20: ( pm_Expr )?
            int alt125=2;
            int LA125_0 = input.LA(1);

            if ( ((LA125_0>=ANCESTOR && LA125_0<=EXIT)||(LA125_0>=SEQUENTIAL && LA125_0<=LPAREN)||LA125_0==DOLLAR||(LA125_0>=STAR && LA125_0<=SMALLER)||(LA125_0>=SLASH && LA125_0<=DOT_DOT)||LA125_0==ATTR_SIGN||(LA125_0>=APOS && LA125_0<=QUOT)||LA125_0==L_NCName||(LA125_0>=L_Pragma && LA125_0<=L_DoubleLiteral)) ) {
                alt125=1;
            }
            switch (alt125) {
                case 1 :
                    // XQueryParser.g:782:20: pm_Expr
                    {
                    pushFollow(FOLLOW_pm_Expr_in_p_ParenthesizedExpr6881);
                    pm_Expr333=pm_Expr();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, pm_Expr333.getTree());

                    }
                    break;

            }

            RPAREN334=(CommonToken)match(input,RPAREN,FOLLOW_RPAREN_in_p_ParenthesizedExpr6884); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            RPAREN334_tree = (XQDTCommonTree)adaptor.create(RPAREN334);
            adaptor.addChild(root_0, RPAREN334_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (XQDTCommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (XQDTCommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "p_ParenthesizedExpr"

    public static class p_ContextItemExpr_return extends ParserRuleReturnScope {
        XQDTCommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "p_ContextItemExpr"
    // XQueryParser.g:786:1: p_ContextItemExpr : DOT ;
    public final XQueryParser.p_ContextItemExpr_return p_ContextItemExpr() throws RecognitionException {
        XQueryParser.p_ContextItemExpr_return retval = new XQueryParser.p_ContextItemExpr_return();
        retval.start = input.LT(1);

        XQDTCommonTree root_0 = null;

        CommonToken DOT335=null;

        XQDTCommonTree DOT335_tree=null;

        try {
            // XQueryParser.g:787:9: ( DOT )
            // XQueryParser.g:787:13: DOT
            {
            root_0 = (XQDTCommonTree)adaptor.nil();

            DOT335=(CommonToken)match(input,DOT,FOLLOW_DOT_in_p_ContextItemExpr6912); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            DOT335_tree = (XQDTCommonTree)adaptor.create(DOT335);
            adaptor.addChild(root_0, DOT335_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (XQDTCommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (XQDTCommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "p_ContextItemExpr"

    public static class p_OrderedExpr_return extends ParserRuleReturnScope {
        XQDTCommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "p_OrderedExpr"
    // XQueryParser.g:791:1: p_OrderedExpr : k= ORDERED LBRACKET pm_Expr RBRACKET ;
    public final XQueryParser.p_OrderedExpr_return p_OrderedExpr() throws RecognitionException {
        XQueryParser.p_OrderedExpr_return retval = new XQueryParser.p_OrderedExpr_return();
        retval.start = input.LT(1);

        XQDTCommonTree root_0 = null;

        CommonToken k=null;
        CommonToken LBRACKET336=null;
        CommonToken RBRACKET338=null;
        XQueryParser.pm_Expr_return pm_Expr337 = null;


        XQDTCommonTree k_tree=null;
        XQDTCommonTree LBRACKET336_tree=null;
        XQDTCommonTree RBRACKET338_tree=null;

        try {
            // XQueryParser.g:792:9: (k= ORDERED LBRACKET pm_Expr RBRACKET )
            // XQueryParser.g:792:13: k= ORDERED LBRACKET pm_Expr RBRACKET
            {
            root_0 = (XQDTCommonTree)adaptor.nil();

            k=(CommonToken)match(input,ORDERED,FOLLOW_ORDERED_in_p_OrderedExpr6942); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            k_tree = (XQDTCommonTree)adaptor.create(k);
            adaptor.addChild(root_0, k_tree);
            }
            if ( state.backtracking==0 ) {
              ak(k);
            }
            LBRACKET336=(CommonToken)match(input,LBRACKET,FOLLOW_LBRACKET_in_p_OrderedExpr6946); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            LBRACKET336_tree = (XQDTCommonTree)adaptor.create(LBRACKET336);
            adaptor.addChild(root_0, LBRACKET336_tree);
            }
            pushFollow(FOLLOW_pm_Expr_in_p_OrderedExpr6948);
            pm_Expr337=pm_Expr();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, pm_Expr337.getTree());
            RBRACKET338=(CommonToken)match(input,RBRACKET,FOLLOW_RBRACKET_in_p_OrderedExpr6950); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            RBRACKET338_tree = (XQDTCommonTree)adaptor.create(RBRACKET338);
            adaptor.addChild(root_0, RBRACKET338_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (XQDTCommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (XQDTCommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "p_OrderedExpr"

    public static class p_UnorderedExpr_return extends ParserRuleReturnScope {
        XQDTCommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "p_UnorderedExpr"
    // XQueryParser.g:796:1: p_UnorderedExpr : k= UNORDERED LBRACKET pm_Expr RBRACKET ;
    public final XQueryParser.p_UnorderedExpr_return p_UnorderedExpr() throws RecognitionException {
        XQueryParser.p_UnorderedExpr_return retval = new XQueryParser.p_UnorderedExpr_return();
        retval.start = input.LT(1);

        XQDTCommonTree root_0 = null;

        CommonToken k=null;
        CommonToken LBRACKET339=null;
        CommonToken RBRACKET341=null;
        XQueryParser.pm_Expr_return pm_Expr340 = null;


        XQDTCommonTree k_tree=null;
        XQDTCommonTree LBRACKET339_tree=null;
        XQDTCommonTree RBRACKET341_tree=null;

        try {
            // XQueryParser.g:797:9: (k= UNORDERED LBRACKET pm_Expr RBRACKET )
            // XQueryParser.g:797:13: k= UNORDERED LBRACKET pm_Expr RBRACKET
            {
            root_0 = (XQDTCommonTree)adaptor.nil();

            k=(CommonToken)match(input,UNORDERED,FOLLOW_UNORDERED_in_p_UnorderedExpr6980); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            k_tree = (XQDTCommonTree)adaptor.create(k);
            adaptor.addChild(root_0, k_tree);
            }
            if ( state.backtracking==0 ) {
              ak(k);
            }
            LBRACKET339=(CommonToken)match(input,LBRACKET,FOLLOW_LBRACKET_in_p_UnorderedExpr6984); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            LBRACKET339_tree = (XQDTCommonTree)adaptor.create(LBRACKET339);
            adaptor.addChild(root_0, LBRACKET339_tree);
            }
            pushFollow(FOLLOW_pm_Expr_in_p_UnorderedExpr6986);
            pm_Expr340=pm_Expr();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, pm_Expr340.getTree());
            RBRACKET341=(CommonToken)match(input,RBRACKET,FOLLOW_RBRACKET_in_p_UnorderedExpr6988); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            RBRACKET341_tree = (XQDTCommonTree)adaptor.create(RBRACKET341);
            adaptor.addChild(root_0, RBRACKET341_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (XQDTCommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (XQDTCommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "p_UnorderedExpr"

    public static class p_FunctionCall_return extends ParserRuleReturnScope {
        XQDTCommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "p_FunctionCall"
    // XQueryParser.g:802:1: p_FunctionCall : p_FQName LPAREN ( p_ExprSingle ( COMMA p_ExprSingle )* )? RPAREN ;
    public final XQueryParser.p_FunctionCall_return p_FunctionCall() throws RecognitionException {
        XQueryParser.p_FunctionCall_return retval = new XQueryParser.p_FunctionCall_return();
        retval.start = input.LT(1);

        XQDTCommonTree root_0 = null;

        CommonToken LPAREN343=null;
        CommonToken COMMA345=null;
        CommonToken RPAREN347=null;
        XQueryParser.p_FQName_return p_FQName342 = null;

        XQueryParser.p_ExprSingle_return p_ExprSingle344 = null;

        XQueryParser.p_ExprSingle_return p_ExprSingle346 = null;


        XQDTCommonTree LPAREN343_tree=null;
        XQDTCommonTree COMMA345_tree=null;
        XQDTCommonTree RPAREN347_tree=null;

        try {
            // XQueryParser.g:803:9: ( p_FQName LPAREN ( p_ExprSingle ( COMMA p_ExprSingle )* )? RPAREN )
            // XQueryParser.g:803:13: p_FQName LPAREN ( p_ExprSingle ( COMMA p_ExprSingle )* )? RPAREN
            {
            root_0 = (XQDTCommonTree)adaptor.nil();

            pushFollow(FOLLOW_p_FQName_in_p_FunctionCall7017);
            p_FQName342=p_FQName();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, p_FQName342.getTree());
            LPAREN343=(CommonToken)match(input,LPAREN,FOLLOW_LPAREN_in_p_FunctionCall7019); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            LPAREN343_tree = (XQDTCommonTree)adaptor.create(LPAREN343);
            adaptor.addChild(root_0, LPAREN343_tree);
            }
            // XQueryParser.g:803:29: ( p_ExprSingle ( COMMA p_ExprSingle )* )?
            int alt127=2;
            int LA127_0 = input.LA(1);

            if ( ((LA127_0>=ANCESTOR && LA127_0<=EXIT)||(LA127_0>=SEQUENTIAL && LA127_0<=LPAREN)||LA127_0==DOLLAR||(LA127_0>=STAR && LA127_0<=SMALLER)||(LA127_0>=SLASH && LA127_0<=DOT_DOT)||LA127_0==ATTR_SIGN||(LA127_0>=APOS && LA127_0<=QUOT)||LA127_0==L_NCName||(LA127_0>=L_Pragma && LA127_0<=L_DoubleLiteral)) ) {
                alt127=1;
            }
            switch (alt127) {
                case 1 :
                    // XQueryParser.g:803:30: p_ExprSingle ( COMMA p_ExprSingle )*
                    {
                    pushFollow(FOLLOW_p_ExprSingle_in_p_FunctionCall7022);
                    p_ExprSingle344=p_ExprSingle();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, p_ExprSingle344.getTree());
                    // XQueryParser.g:803:43: ( COMMA p_ExprSingle )*
                    loop126:
                    do {
                        int alt126=2;
                        int LA126_0 = input.LA(1);

                        if ( (LA126_0==COMMA) ) {
                            alt126=1;
                        }


                        switch (alt126) {
                    	case 1 :
                    	    // XQueryParser.g:803:44: COMMA p_ExprSingle
                    	    {
                    	    COMMA345=(CommonToken)match(input,COMMA,FOLLOW_COMMA_in_p_FunctionCall7025); if (state.failed) return retval;
                    	    if ( state.backtracking==0 ) {
                    	    COMMA345_tree = (XQDTCommonTree)adaptor.create(COMMA345);
                    	    adaptor.addChild(root_0, COMMA345_tree);
                    	    }
                    	    pushFollow(FOLLOW_p_ExprSingle_in_p_FunctionCall7027);
                    	    p_ExprSingle346=p_ExprSingle();

                    	    state._fsp--;
                    	    if (state.failed) return retval;
                    	    if ( state.backtracking==0 ) adaptor.addChild(root_0, p_ExprSingle346.getTree());

                    	    }
                    	    break;

                    	default :
                    	    break loop126;
                        }
                    } while (true);


                    }
                    break;

            }

            RPAREN347=(CommonToken)match(input,RPAREN,FOLLOW_RPAREN_in_p_FunctionCall7033); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            RPAREN347_tree = (XQDTCommonTree)adaptor.create(RPAREN347);
            adaptor.addChild(root_0, RPAREN347_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (XQDTCommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (XQDTCommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "p_FunctionCall"

    public static class p_Constructor_return extends ParserRuleReturnScope {
        XQDTCommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "p_Constructor"
    // XQueryParser.g:807:1: p_Constructor : ( p_DirectConstructor | p_ComputedConstructor );
    public final XQueryParser.p_Constructor_return p_Constructor() throws RecognitionException {
        XQueryParser.p_Constructor_return retval = new XQueryParser.p_Constructor_return();
        retval.start = input.LT(1);

        XQDTCommonTree root_0 = null;

        XQueryParser.p_DirectConstructor_return p_DirectConstructor348 = null;

        XQueryParser.p_ComputedConstructor_return p_ComputedConstructor349 = null;



        try {
            // XQueryParser.g:808:9: ( p_DirectConstructor | p_ComputedConstructor )
            int alt128=2;
            int LA128_0 = input.LA(1);

            if ( (LA128_0==SMALLER||(LA128_0>=L_DirCommentConstructor && LA128_0<=L_DirPIConstructor)) ) {
                alt128=1;
            }
            else if ( (LA128_0==ATTRIBUTE||LA128_0==COMMENT||LA128_0==DOCUMENT||LA128_0==ELEMENT||LA128_0==NAMESPACE||LA128_0==PROCESSING_INSTRUCTION||LA128_0==TEXT) ) {
                alt128=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 128, 0, input);

                throw nvae;
            }
            switch (alt128) {
                case 1 :
                    // XQueryParser.g:808:13: p_DirectConstructor
                    {
                    root_0 = (XQDTCommonTree)adaptor.nil();

                    pushFollow(FOLLOW_p_DirectConstructor_in_p_Constructor7065);
                    p_DirectConstructor348=p_DirectConstructor();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, p_DirectConstructor348.getTree());

                    }
                    break;
                case 2 :
                    // XQueryParser.g:808:35: p_ComputedConstructor
                    {
                    root_0 = (XQDTCommonTree)adaptor.nil();

                    pushFollow(FOLLOW_p_ComputedConstructor_in_p_Constructor7069);
                    p_ComputedConstructor349=p_ComputedConstructor();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, p_ComputedConstructor349.getTree());

                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (XQDTCommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (XQDTCommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "p_Constructor"

    public static class p_DirectConstructor_return extends ParserRuleReturnScope {
        XQDTCommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "p_DirectConstructor"
    // XQueryParser.g:812:1: p_DirectConstructor : ( p_DirElemConstructor | L_DirCommentConstructor | L_DirPIConstructor );
    public final XQueryParser.p_DirectConstructor_return p_DirectConstructor() throws RecognitionException {
        XQueryParser.p_DirectConstructor_return retval = new XQueryParser.p_DirectConstructor_return();
        retval.start = input.LT(1);

        XQDTCommonTree root_0 = null;

        CommonToken L_DirCommentConstructor351=null;
        CommonToken L_DirPIConstructor352=null;
        XQueryParser.p_DirElemConstructor_return p_DirElemConstructor350 = null;


        XQDTCommonTree L_DirCommentConstructor351_tree=null;
        XQDTCommonTree L_DirPIConstructor352_tree=null;

        try {
            // XQueryParser.g:813:9: ( p_DirElemConstructor | L_DirCommentConstructor | L_DirPIConstructor )
            int alt129=3;
            switch ( input.LA(1) ) {
            case SMALLER:
                {
                alt129=1;
                }
                break;
            case L_DirCommentConstructor:
                {
                alt129=2;
                }
                break;
            case L_DirPIConstructor:
                {
                alt129=3;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 129, 0, input);

                throw nvae;
            }

            switch (alt129) {
                case 1 :
                    // XQueryParser.g:813:13: p_DirElemConstructor
                    {
                    root_0 = (XQDTCommonTree)adaptor.nil();

                    pushFollow(FOLLOW_p_DirElemConstructor_in_p_DirectConstructor7097);
                    p_DirElemConstructor350=p_DirElemConstructor();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, p_DirElemConstructor350.getTree());

                    }
                    break;
                case 2 :
                    // XQueryParser.g:814:11: L_DirCommentConstructor
                    {
                    root_0 = (XQDTCommonTree)adaptor.nil();

                    L_DirCommentConstructor351=(CommonToken)match(input,L_DirCommentConstructor,FOLLOW_L_DirCommentConstructor_in_p_DirectConstructor7109); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    L_DirCommentConstructor351_tree = (XQDTCommonTree)adaptor.create(L_DirCommentConstructor351);
                    adaptor.addChild(root_0, L_DirCommentConstructor351_tree);
                    }

                    }
                    break;
                case 3 :
                    // XQueryParser.g:815:11: L_DirPIConstructor
                    {
                    root_0 = (XQDTCommonTree)adaptor.nil();

                    L_DirPIConstructor352=(CommonToken)match(input,L_DirPIConstructor,FOLLOW_L_DirPIConstructor_in_p_DirectConstructor7121); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    L_DirPIConstructor352_tree = (XQDTCommonTree)adaptor.create(L_DirPIConstructor352);
                    adaptor.addChild(root_0, L_DirPIConstructor352_tree);
                    }

                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (XQDTCommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (XQDTCommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "p_DirectConstructor"

    public static class p_DirElemConstructor_return extends ParserRuleReturnScope {
        XQDTCommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "p_DirElemConstructor"
    // XQueryParser.g:819:1: p_DirElemConstructor : SMALLER p_QName p_DirAttributeList ( EMPTY_CLOSE_TAG | ( GREATER ( pm_DirElemContent )* CLOSE_TAG p_QName ( S )? GREATER ) ) -> ^( DirElemConstructor ^( DirAttributeList ( p_DirAttributeList )* ) ^( DirElemContent ( pm_DirElemContent )* ) ) ;
    public final XQueryParser.p_DirElemConstructor_return p_DirElemConstructor() throws RecognitionException {
        XQueryParser.p_DirElemConstructor_return retval = new XQueryParser.p_DirElemConstructor_return();
        retval.start = input.LT(1);

        XQDTCommonTree root_0 = null;

        CommonToken SMALLER353=null;
        CommonToken EMPTY_CLOSE_TAG356=null;
        CommonToken GREATER357=null;
        CommonToken CLOSE_TAG359=null;
        CommonToken S361=null;
        CommonToken GREATER362=null;
        XQueryParser.p_QName_return p_QName354 = null;

        XQueryParser.p_DirAttributeList_return p_DirAttributeList355 = null;

        XQueryParser.pm_DirElemContent_return pm_DirElemContent358 = null;

        XQueryParser.p_QName_return p_QName360 = null;


        XQDTCommonTree SMALLER353_tree=null;
        XQDTCommonTree EMPTY_CLOSE_TAG356_tree=null;
        XQDTCommonTree GREATER357_tree=null;
        XQDTCommonTree CLOSE_TAG359_tree=null;
        XQDTCommonTree S361_tree=null;
        XQDTCommonTree GREATER362_tree=null;
        RewriteRuleTokenStream stream_S=new RewriteRuleTokenStream(adaptor,"token S");
        RewriteRuleTokenStream stream_GREATER=new RewriteRuleTokenStream(adaptor,"token GREATER");
        RewriteRuleTokenStream stream_SMALLER=new RewriteRuleTokenStream(adaptor,"token SMALLER");
        RewriteRuleTokenStream stream_EMPTY_CLOSE_TAG=new RewriteRuleTokenStream(adaptor,"token EMPTY_CLOSE_TAG");
        RewriteRuleTokenStream stream_CLOSE_TAG=new RewriteRuleTokenStream(adaptor,"token CLOSE_TAG");
        RewriteRuleSubtreeStream stream_p_DirAttributeList=new RewriteRuleSubtreeStream(adaptor,"rule p_DirAttributeList");
        RewriteRuleSubtreeStream stream_p_QName=new RewriteRuleSubtreeStream(adaptor,"rule p_QName");
        RewriteRuleSubtreeStream stream_pm_DirElemContent=new RewriteRuleSubtreeStream(adaptor,"rule pm_DirElemContent");
        try {
            // XQueryParser.g:820:9: ( SMALLER p_QName p_DirAttributeList ( EMPTY_CLOSE_TAG | ( GREATER ( pm_DirElemContent )* CLOSE_TAG p_QName ( S )? GREATER ) ) -> ^( DirElemConstructor ^( DirAttributeList ( p_DirAttributeList )* ) ^( DirElemContent ( pm_DirElemContent )* ) ) )
            // XQueryParser.g:820:13: SMALLER p_QName p_DirAttributeList ( EMPTY_CLOSE_TAG | ( GREATER ( pm_DirElemContent )* CLOSE_TAG p_QName ( S )? GREATER ) )
            {
            SMALLER353=(CommonToken)match(input,SMALLER,FOLLOW_SMALLER_in_p_DirElemConstructor7150); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_SMALLER.add(SMALLER353);

            if ( state.backtracking==0 ) {
              pushXMLLexer();
            }
            pushFollow(FOLLOW_p_QName_in_p_DirElemConstructor7166);
            p_QName354=p_QName();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_p_QName.add(p_QName354.getTree());
            pushFollow(FOLLOW_p_DirAttributeList_in_p_DirElemConstructor7168);
            p_DirAttributeList355=p_DirAttributeList();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_p_DirAttributeList.add(p_DirAttributeList355.getTree());
            // XQueryParser.g:822:13: ( EMPTY_CLOSE_TAG | ( GREATER ( pm_DirElemContent )* CLOSE_TAG p_QName ( S )? GREATER ) )
            int alt132=2;
            int LA132_0 = input.LA(1);

            if ( (LA132_0==EMPTY_CLOSE_TAG) ) {
                alt132=1;
            }
            else if ( (LA132_0==GREATER) ) {
                alt132=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 132, 0, input);

                throw nvae;
            }
            switch (alt132) {
                case 1 :
                    // XQueryParser.g:822:14: EMPTY_CLOSE_TAG
                    {
                    EMPTY_CLOSE_TAG356=(CommonToken)match(input,EMPTY_CLOSE_TAG,FOLLOW_EMPTY_CLOSE_TAG_in_p_DirElemConstructor7184); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_EMPTY_CLOSE_TAG.add(EMPTY_CLOSE_TAG356);


                    }
                    break;
                case 2 :
                    // XQueryParser.g:822:32: ( GREATER ( pm_DirElemContent )* CLOSE_TAG p_QName ( S )? GREATER )
                    {
                    // XQueryParser.g:822:32: ( GREATER ( pm_DirElemContent )* CLOSE_TAG p_QName ( S )? GREATER )
                    // XQueryParser.g:822:33: GREATER ( pm_DirElemContent )* CLOSE_TAG p_QName ( S )? GREATER
                    {
                    GREATER357=(CommonToken)match(input,GREATER,FOLLOW_GREATER_in_p_DirElemConstructor7189); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_GREATER.add(GREATER357);

                    // XQueryParser.g:822:41: ( pm_DirElemContent )*
                    loop130:
                    do {
                        int alt130=2;
                        int LA130_0 = input.LA(1);

                        if ( ((LA130_0>=L_ElementContentChar && LA130_0<=ESCAPE_RBRACKET)||LA130_0==LBRACKET||LA130_0==SMALLER||(LA130_0>=L_DirCommentConstructor && LA130_0<=L_DirPIConstructor)) ) {
                            alt130=1;
                        }


                        switch (alt130) {
                    	case 1 :
                    	    // XQueryParser.g:822:41: pm_DirElemContent
                    	    {
                    	    pushFollow(FOLLOW_pm_DirElemContent_in_p_DirElemConstructor7191);
                    	    pm_DirElemContent358=pm_DirElemContent();

                    	    state._fsp--;
                    	    if (state.failed) return retval;
                    	    if ( state.backtracking==0 ) stream_pm_DirElemContent.add(pm_DirElemContent358.getTree());

                    	    }
                    	    break;

                    	default :
                    	    break loop130;
                        }
                    } while (true);

                    CLOSE_TAG359=(CommonToken)match(input,CLOSE_TAG,FOLLOW_CLOSE_TAG_in_p_DirElemConstructor7194); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_CLOSE_TAG.add(CLOSE_TAG359);

                    pushFollow(FOLLOW_p_QName_in_p_DirElemConstructor7196);
                    p_QName360=p_QName();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_p_QName.add(p_QName360.getTree());
                    // XQueryParser.g:822:78: ( S )?
                    int alt131=2;
                    int LA131_0 = input.LA(1);

                    if ( (LA131_0==S) ) {
                        alt131=1;
                    }
                    switch (alt131) {
                        case 1 :
                            // XQueryParser.g:822:78: S
                            {
                            S361=(CommonToken)match(input,S,FOLLOW_S_in_p_DirElemConstructor7198); if (state.failed) return retval; 
                            if ( state.backtracking==0 ) stream_S.add(S361);


                            }
                            break;

                    }

                    GREATER362=(CommonToken)match(input,GREATER,FOLLOW_GREATER_in_p_DirElemConstructor7201); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_GREATER.add(GREATER362);


                    }


                    }
                    break;

            }



            // AST REWRITE
            // elements: pm_DirElemContent, p_DirAttributeList
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (XQDTCommonTree)adaptor.nil();
            // 823:17: -> ^( DirElemConstructor ^( DirAttributeList ( p_DirAttributeList )* ) ^( DirElemContent ( pm_DirElemContent )* ) )
            {
                // XQueryParser.g:823:20: ^( DirElemConstructor ^( DirAttributeList ( p_DirAttributeList )* ) ^( DirElemContent ( pm_DirElemContent )* ) )
                {
                XQDTCommonTree root_1 = (XQDTCommonTree)adaptor.nil();
                root_1 = (XQDTCommonTree)adaptor.becomeRoot((XQDTCommonTree)adaptor.create(DirElemConstructor, "DirElemConstructor"), root_1);

                // XQueryParser.g:823:41: ^( DirAttributeList ( p_DirAttributeList )* )
                {
                XQDTCommonTree root_2 = (XQDTCommonTree)adaptor.nil();
                root_2 = (XQDTCommonTree)adaptor.becomeRoot((XQDTCommonTree)adaptor.create(DirAttributeList, "DirAttributeList"), root_2);

                // XQueryParser.g:823:60: ( p_DirAttributeList )*
                while ( stream_p_DirAttributeList.hasNext() ) {
                    adaptor.addChild(root_2, stream_p_DirAttributeList.nextTree());

                }
                stream_p_DirAttributeList.reset();

                adaptor.addChild(root_1, root_2);
                }
                // XQueryParser.g:823:81: ^( DirElemContent ( pm_DirElemContent )* )
                {
                XQDTCommonTree root_2 = (XQDTCommonTree)adaptor.nil();
                root_2 = (XQDTCommonTree)adaptor.becomeRoot((XQDTCommonTree)adaptor.create(DirElemContent, "DirElemContent"), root_2);

                // XQueryParser.g:823:98: ( pm_DirElemContent )*
                while ( stream_pm_DirElemContent.hasNext() ) {
                    adaptor.addChild(root_2, stream_pm_DirElemContent.nextTree());

                }
                stream_pm_DirElemContent.reset();

                adaptor.addChild(root_1, root_2);
                }

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (XQDTCommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (XQDTCommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            popLexer();
        }
        return retval;
    }
    // $ANTLR end "p_DirElemConstructor"

    public static class p_DirAttributeList_return extends ParserRuleReturnScope {
        XQDTCommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "p_DirAttributeList"
    // XQueryParser.g:828:1: p_DirAttributeList : ( S ( p_QName ( S )? EQUAL ( S )? p_DirAttributeValue )? )* ;
    public final XQueryParser.p_DirAttributeList_return p_DirAttributeList() throws RecognitionException {
        XQueryParser.p_DirAttributeList_return retval = new XQueryParser.p_DirAttributeList_return();
        retval.start = input.LT(1);

        XQDTCommonTree root_0 = null;

        CommonToken S363=null;
        CommonToken S365=null;
        CommonToken EQUAL366=null;
        CommonToken S367=null;
        XQueryParser.p_QName_return p_QName364 = null;

        XQueryParser.p_DirAttributeValue_return p_DirAttributeValue368 = null;


        XQDTCommonTree S363_tree=null;
        XQDTCommonTree S365_tree=null;
        XQDTCommonTree EQUAL366_tree=null;
        XQDTCommonTree S367_tree=null;

        try {
            // XQueryParser.g:829:9: ( ( S ( p_QName ( S )? EQUAL ( S )? p_DirAttributeValue )? )* )
            // XQueryParser.g:829:13: ( S ( p_QName ( S )? EQUAL ( S )? p_DirAttributeValue )? )*
            {
            root_0 = (XQDTCommonTree)adaptor.nil();

            // XQueryParser.g:829:13: ( S ( p_QName ( S )? EQUAL ( S )? p_DirAttributeValue )? )*
            loop136:
            do {
                int alt136=2;
                int LA136_0 = input.LA(1);

                if ( (LA136_0==S) ) {
                    alt136=1;
                }


                switch (alt136) {
            	case 1 :
            	    // XQueryParser.g:829:14: S ( p_QName ( S )? EQUAL ( S )? p_DirAttributeValue )?
            	    {
            	    S363=(CommonToken)match(input,S,FOLLOW_S_in_p_DirAttributeList7280); if (state.failed) return retval;
            	    if ( state.backtracking==0 ) {
            	    S363_tree = (XQDTCommonTree)adaptor.create(S363);
            	    adaptor.addChild(root_0, S363_tree);
            	    }
            	    // XQueryParser.g:829:16: ( p_QName ( S )? EQUAL ( S )? p_DirAttributeValue )?
            	    int alt135=2;
            	    int LA135_0 = input.LA(1);

            	    if ( ((LA135_0>=ANCESTOR && LA135_0<=EXIT)||(LA135_0>=SEQUENTIAL && LA135_0<=QUOT_ER)||LA135_0==L_NCName) ) {
            	        alt135=1;
            	    }
            	    switch (alt135) {
            	        case 1 :
            	            // XQueryParser.g:829:17: p_QName ( S )? EQUAL ( S )? p_DirAttributeValue
            	            {
            	            pushFollow(FOLLOW_p_QName_in_p_DirAttributeList7283);
            	            p_QName364=p_QName();

            	            state._fsp--;
            	            if (state.failed) return retval;
            	            if ( state.backtracking==0 ) adaptor.addChild(root_0, p_QName364.getTree());
            	            // XQueryParser.g:829:25: ( S )?
            	            int alt133=2;
            	            int LA133_0 = input.LA(1);

            	            if ( (LA133_0==S) ) {
            	                alt133=1;
            	            }
            	            switch (alt133) {
            	                case 1 :
            	                    // XQueryParser.g:829:25: S
            	                    {
            	                    S365=(CommonToken)match(input,S,FOLLOW_S_in_p_DirAttributeList7285); if (state.failed) return retval;
            	                    if ( state.backtracking==0 ) {
            	                    S365_tree = (XQDTCommonTree)adaptor.create(S365);
            	                    adaptor.addChild(root_0, S365_tree);
            	                    }

            	                    }
            	                    break;

            	            }

            	            EQUAL366=(CommonToken)match(input,EQUAL,FOLLOW_EQUAL_in_p_DirAttributeList7288); if (state.failed) return retval;
            	            if ( state.backtracking==0 ) {
            	            EQUAL366_tree = (XQDTCommonTree)adaptor.create(EQUAL366);
            	            adaptor.addChild(root_0, EQUAL366_tree);
            	            }
            	            // XQueryParser.g:829:34: ( S )?
            	            int alt134=2;
            	            int LA134_0 = input.LA(1);

            	            if ( (LA134_0==S) ) {
            	                alt134=1;
            	            }
            	            switch (alt134) {
            	                case 1 :
            	                    // XQueryParser.g:829:34: S
            	                    {
            	                    S367=(CommonToken)match(input,S,FOLLOW_S_in_p_DirAttributeList7290); if (state.failed) return retval;
            	                    if ( state.backtracking==0 ) {
            	                    S367_tree = (XQDTCommonTree)adaptor.create(S367);
            	                    adaptor.addChild(root_0, S367_tree);
            	                    }

            	                    }
            	                    break;

            	            }

            	            pushFollow(FOLLOW_p_DirAttributeValue_in_p_DirAttributeList7293);
            	            p_DirAttributeValue368=p_DirAttributeValue();

            	            state._fsp--;
            	            if (state.failed) return retval;
            	            if ( state.backtracking==0 ) adaptor.addChild(root_0, p_DirAttributeValue368.getTree());

            	            }
            	            break;

            	    }


            	    }
            	    break;

            	default :
            	    break loop136;
                }
            } while (true);


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (XQDTCommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (XQDTCommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "p_DirAttributeList"

    public static class p_DirAttributeValue_return extends ParserRuleReturnScope {
        XQDTCommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "p_DirAttributeValue"
    // XQueryParser.g:833:1: p_DirAttributeValue : ( ( QUOT ( ESCAPE_QUOT | pm_QuotAttrValueContent )* QUOT ) -> ^( DirAttributeValue ( pm_QuotAttrValueContent )* ) | ( APOS ( ESCAPE_APOS | pm_AposAttrValueContent )* APOS ) -> ^( DirAttributeValue ( pm_AposAttrValueContent )* ) );
    public final XQueryParser.p_DirAttributeValue_return p_DirAttributeValue() throws RecognitionException {
        XQueryParser.p_DirAttributeValue_return retval = new XQueryParser.p_DirAttributeValue_return();
        retval.start = input.LT(1);

        XQDTCommonTree root_0 = null;

        CommonToken QUOT369=null;
        CommonToken ESCAPE_QUOT370=null;
        CommonToken QUOT372=null;
        CommonToken APOS373=null;
        CommonToken ESCAPE_APOS374=null;
        CommonToken APOS376=null;
        XQueryParser.pm_QuotAttrValueContent_return pm_QuotAttrValueContent371 = null;

        XQueryParser.pm_AposAttrValueContent_return pm_AposAttrValueContent375 = null;


        XQDTCommonTree QUOT369_tree=null;
        XQDTCommonTree ESCAPE_QUOT370_tree=null;
        XQDTCommonTree QUOT372_tree=null;
        XQDTCommonTree APOS373_tree=null;
        XQDTCommonTree ESCAPE_APOS374_tree=null;
        XQDTCommonTree APOS376_tree=null;
        RewriteRuleTokenStream stream_ESCAPE_APOS=new RewriteRuleTokenStream(adaptor,"token ESCAPE_APOS");
        RewriteRuleTokenStream stream_APOS=new RewriteRuleTokenStream(adaptor,"token APOS");
        RewriteRuleTokenStream stream_QUOT=new RewriteRuleTokenStream(adaptor,"token QUOT");
        RewriteRuleTokenStream stream_ESCAPE_QUOT=new RewriteRuleTokenStream(adaptor,"token ESCAPE_QUOT");
        RewriteRuleSubtreeStream stream_pm_AposAttrValueContent=new RewriteRuleSubtreeStream(adaptor,"rule pm_AposAttrValueContent");
        RewriteRuleSubtreeStream stream_pm_QuotAttrValueContent=new RewriteRuleSubtreeStream(adaptor,"rule pm_QuotAttrValueContent");
        try {
            // XQueryParser.g:834:9: ( ( QUOT ( ESCAPE_QUOT | pm_QuotAttrValueContent )* QUOT ) -> ^( DirAttributeValue ( pm_QuotAttrValueContent )* ) | ( APOS ( ESCAPE_APOS | pm_AposAttrValueContent )* APOS ) -> ^( DirAttributeValue ( pm_AposAttrValueContent )* ) )
            int alt139=2;
            int LA139_0 = input.LA(1);

            if ( (LA139_0==QUOT) ) {
                alt139=1;
            }
            else if ( (LA139_0==APOS) ) {
                alt139=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 139, 0, input);

                throw nvae;
            }
            switch (alt139) {
                case 1 :
                    // XQueryParser.g:834:13: ( QUOT ( ESCAPE_QUOT | pm_QuotAttrValueContent )* QUOT )
                    {
                    // XQueryParser.g:834:13: ( QUOT ( ESCAPE_QUOT | pm_QuotAttrValueContent )* QUOT )
                    // XQueryParser.g:834:14: QUOT ( ESCAPE_QUOT | pm_QuotAttrValueContent )* QUOT
                    {
                    QUOT369=(CommonToken)match(input,QUOT,FOLLOW_QUOT_in_p_DirAttributeValue7326); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_QUOT.add(QUOT369);

                    // XQueryParser.g:834:19: ( ESCAPE_QUOT | pm_QuotAttrValueContent )*
                    loop137:
                    do {
                        int alt137=3;
                        int LA137_0 = input.LA(1);

                        if ( (LA137_0==ESCAPE_QUOT) ) {
                            alt137=1;
                        }
                        else if ( (LA137_0==L_QuotAttrContentChar||(LA137_0>=L_PredefinedEntityRef && LA137_0<=ESCAPE_RBRACKET)||LA137_0==LBRACKET) ) {
                            alt137=2;
                        }


                        switch (alt137) {
                    	case 1 :
                    	    // XQueryParser.g:834:20: ESCAPE_QUOT
                    	    {
                    	    ESCAPE_QUOT370=(CommonToken)match(input,ESCAPE_QUOT,FOLLOW_ESCAPE_QUOT_in_p_DirAttributeValue7329); if (state.failed) return retval; 
                    	    if ( state.backtracking==0 ) stream_ESCAPE_QUOT.add(ESCAPE_QUOT370);


                    	    }
                    	    break;
                    	case 2 :
                    	    // XQueryParser.g:834:34: pm_QuotAttrValueContent
                    	    {
                    	    pushFollow(FOLLOW_pm_QuotAttrValueContent_in_p_DirAttributeValue7333);
                    	    pm_QuotAttrValueContent371=pm_QuotAttrValueContent();

                    	    state._fsp--;
                    	    if (state.failed) return retval;
                    	    if ( state.backtracking==0 ) stream_pm_QuotAttrValueContent.add(pm_QuotAttrValueContent371.getTree());

                    	    }
                    	    break;

                    	default :
                    	    break loop137;
                        }
                    } while (true);

                    QUOT372=(CommonToken)match(input,QUOT,FOLLOW_QUOT_in_p_DirAttributeValue7337); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_QUOT.add(QUOT372);


                    }



                    // AST REWRITE
                    // elements: pm_QuotAttrValueContent
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (XQDTCommonTree)adaptor.nil();
                    // 835:17: -> ^( DirAttributeValue ( pm_QuotAttrValueContent )* )
                    {
                        // XQueryParser.g:835:20: ^( DirAttributeValue ( pm_QuotAttrValueContent )* )
                        {
                        XQDTCommonTree root_1 = (XQDTCommonTree)adaptor.nil();
                        root_1 = (XQDTCommonTree)adaptor.becomeRoot((XQDTCommonTree)adaptor.create(DirAttributeValue, "DirAttributeValue"), root_1);

                        // XQueryParser.g:835:40: ( pm_QuotAttrValueContent )*
                        while ( stream_pm_QuotAttrValueContent.hasNext() ) {
                            adaptor.addChild(root_1, stream_pm_QuotAttrValueContent.nextTree());

                        }
                        stream_pm_QuotAttrValueContent.reset();

                        adaptor.addChild(root_0, root_1);
                        }

                    }

                    retval.tree = root_0;}
                    }
                    break;
                case 2 :
                    // XQueryParser.g:836:11: ( APOS ( ESCAPE_APOS | pm_AposAttrValueContent )* APOS )
                    {
                    // XQueryParser.g:836:11: ( APOS ( ESCAPE_APOS | pm_AposAttrValueContent )* APOS )
                    // XQueryParser.g:836:12: APOS ( ESCAPE_APOS | pm_AposAttrValueContent )* APOS
                    {
                    APOS373=(CommonToken)match(input,APOS,FOLLOW_APOS_in_p_DirAttributeValue7376); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_APOS.add(APOS373);

                    // XQueryParser.g:836:17: ( ESCAPE_APOS | pm_AposAttrValueContent )*
                    loop138:
                    do {
                        int alt138=3;
                        int LA138_0 = input.LA(1);

                        if ( (LA138_0==ESCAPE_APOS) ) {
                            alt138=1;
                        }
                        else if ( (LA138_0==L_AposAttrContentChar||(LA138_0>=L_PredefinedEntityRef && LA138_0<=ESCAPE_RBRACKET)||LA138_0==LBRACKET) ) {
                            alt138=2;
                        }


                        switch (alt138) {
                    	case 1 :
                    	    // XQueryParser.g:836:18: ESCAPE_APOS
                    	    {
                    	    ESCAPE_APOS374=(CommonToken)match(input,ESCAPE_APOS,FOLLOW_ESCAPE_APOS_in_p_DirAttributeValue7379); if (state.failed) return retval; 
                    	    if ( state.backtracking==0 ) stream_ESCAPE_APOS.add(ESCAPE_APOS374);


                    	    }
                    	    break;
                    	case 2 :
                    	    // XQueryParser.g:836:32: pm_AposAttrValueContent
                    	    {
                    	    pushFollow(FOLLOW_pm_AposAttrValueContent_in_p_DirAttributeValue7383);
                    	    pm_AposAttrValueContent375=pm_AposAttrValueContent();

                    	    state._fsp--;
                    	    if (state.failed) return retval;
                    	    if ( state.backtracking==0 ) stream_pm_AposAttrValueContent.add(pm_AposAttrValueContent375.getTree());

                    	    }
                    	    break;

                    	default :
                    	    break loop138;
                        }
                    } while (true);

                    APOS376=(CommonToken)match(input,APOS,FOLLOW_APOS_in_p_DirAttributeValue7387); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_APOS.add(APOS376);


                    }



                    // AST REWRITE
                    // elements: pm_AposAttrValueContent
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (XQDTCommonTree)adaptor.nil();
                    // 837:17: -> ^( DirAttributeValue ( pm_AposAttrValueContent )* )
                    {
                        // XQueryParser.g:837:20: ^( DirAttributeValue ( pm_AposAttrValueContent )* )
                        {
                        XQDTCommonTree root_1 = (XQDTCommonTree)adaptor.nil();
                        root_1 = (XQDTCommonTree)adaptor.becomeRoot((XQDTCommonTree)adaptor.create(DirAttributeValue, "DirAttributeValue"), root_1);

                        // XQueryParser.g:837:40: ( pm_AposAttrValueContent )*
                        while ( stream_pm_AposAttrValueContent.hasNext() ) {
                            adaptor.addChild(root_1, stream_pm_AposAttrValueContent.nextTree());

                        }
                        stream_pm_AposAttrValueContent.reset();

                        adaptor.addChild(root_0, root_1);
                        }

                    }

                    retval.tree = root_0;}
                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (XQDTCommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (XQDTCommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "p_DirAttributeValue"

    public static class pm_QuotAttrValueContent_return extends ParserRuleReturnScope {
        XQDTCommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "pm_QuotAttrValueContent"
    // XQueryParser.g:841:1: pm_QuotAttrValueContent : ( pg_QuotAttrContentChar | pg_CommonContent | p_ElemEnclosedExpr );
    public final XQueryParser.pm_QuotAttrValueContent_return pm_QuotAttrValueContent() throws RecognitionException {
        XQueryParser.pm_QuotAttrValueContent_return retval = new XQueryParser.pm_QuotAttrValueContent_return();
        retval.start = input.LT(1);

        XQDTCommonTree root_0 = null;

        XQueryParser.pg_QuotAttrContentChar_return pg_QuotAttrContentChar377 = null;

        XQueryParser.pg_CommonContent_return pg_CommonContent378 = null;

        XQueryParser.p_ElemEnclosedExpr_return p_ElemEnclosedExpr379 = null;



        try {
            // XQueryParser.g:842:9: ( pg_QuotAttrContentChar | pg_CommonContent | p_ElemEnclosedExpr )
            int alt140=3;
            switch ( input.LA(1) ) {
            case L_QuotAttrContentChar:
                {
                alt140=1;
                }
                break;
            case L_PredefinedEntityRef:
            case L_CharRef:
            case ESCAPE_LBRACKET:
            case ESCAPE_RBRACKET:
                {
                alt140=2;
                }
                break;
            case LBRACKET:
                {
                alt140=3;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 140, 0, input);

                throw nvae;
            }

            switch (alt140) {
                case 1 :
                    // XQueryParser.g:842:13: pg_QuotAttrContentChar
                    {
                    root_0 = (XQDTCommonTree)adaptor.nil();

                    pushFollow(FOLLOW_pg_QuotAttrContentChar_in_pm_QuotAttrValueContent7441);
                    pg_QuotAttrContentChar377=pg_QuotAttrContentChar();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, pg_QuotAttrContentChar377.getTree());

                    }
                    break;
                case 2 :
                    // XQueryParser.g:842:38: pg_CommonContent
                    {
                    root_0 = (XQDTCommonTree)adaptor.nil();

                    pushFollow(FOLLOW_pg_CommonContent_in_pm_QuotAttrValueContent7445);
                    pg_CommonContent378=pg_CommonContent();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, pg_CommonContent378.getTree());

                    }
                    break;
                case 3 :
                    // XQueryParser.g:842:57: p_ElemEnclosedExpr
                    {
                    root_0 = (XQDTCommonTree)adaptor.nil();

                    pushFollow(FOLLOW_p_ElemEnclosedExpr_in_pm_QuotAttrValueContent7449);
                    p_ElemEnclosedExpr379=p_ElemEnclosedExpr();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, p_ElemEnclosedExpr379.getTree());

                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (XQDTCommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (XQDTCommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "pm_QuotAttrValueContent"

    public static class pg_QuotAttrContentChar_return extends ParserRuleReturnScope {
        XQDTCommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "pg_QuotAttrContentChar"
    // XQueryParser.g:849:1: pg_QuotAttrContentChar : L_QuotAttrContentChar -> ^( AttributeValueChar L_QuotAttrContentChar ) ;
    public final XQueryParser.pg_QuotAttrContentChar_return pg_QuotAttrContentChar() throws RecognitionException {
        XQueryParser.pg_QuotAttrContentChar_return retval = new XQueryParser.pg_QuotAttrContentChar_return();
        retval.start = input.LT(1);

        XQDTCommonTree root_0 = null;

        CommonToken L_QuotAttrContentChar380=null;

        XQDTCommonTree L_QuotAttrContentChar380_tree=null;
        RewriteRuleTokenStream stream_L_QuotAttrContentChar=new RewriteRuleTokenStream(adaptor,"token L_QuotAttrContentChar");

        try {
            // XQueryParser.g:850:9: ( L_QuotAttrContentChar -> ^( AttributeValueChar L_QuotAttrContentChar ) )
            // XQueryParser.g:850:11: L_QuotAttrContentChar
            {
            L_QuotAttrContentChar380=(CommonToken)match(input,L_QuotAttrContentChar,FOLLOW_L_QuotAttrContentChar_in_pg_QuotAttrContentChar7478); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_L_QuotAttrContentChar.add(L_QuotAttrContentChar380);



            // AST REWRITE
            // elements: L_QuotAttrContentChar
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (XQDTCommonTree)adaptor.nil();
            // 851:17: -> ^( AttributeValueChar L_QuotAttrContentChar )
            {
                // XQueryParser.g:851:20: ^( AttributeValueChar L_QuotAttrContentChar )
                {
                XQDTCommonTree root_1 = (XQDTCommonTree)adaptor.nil();
                root_1 = (XQDTCommonTree)adaptor.becomeRoot((XQDTCommonTree)adaptor.create(AttributeValueChar, "AttributeValueChar"), root_1);

                adaptor.addChild(root_1, stream_L_QuotAttrContentChar.nextNode());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (XQDTCommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (XQDTCommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "pg_QuotAttrContentChar"

    public static class pm_AposAttrValueContent_return extends ParserRuleReturnScope {
        XQDTCommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "pm_AposAttrValueContent"
    // XQueryParser.g:856:1: pm_AposAttrValueContent : ( pg_AposAttrContentChar | pg_CommonContent | p_ElemEnclosedExpr );
    public final XQueryParser.pm_AposAttrValueContent_return pm_AposAttrValueContent() throws RecognitionException {
        XQueryParser.pm_AposAttrValueContent_return retval = new XQueryParser.pm_AposAttrValueContent_return();
        retval.start = input.LT(1);

        XQDTCommonTree root_0 = null;

        XQueryParser.pg_AposAttrContentChar_return pg_AposAttrContentChar381 = null;

        XQueryParser.pg_CommonContent_return pg_CommonContent382 = null;

        XQueryParser.p_ElemEnclosedExpr_return p_ElemEnclosedExpr383 = null;



        try {
            // XQueryParser.g:857:9: ( pg_AposAttrContentChar | pg_CommonContent | p_ElemEnclosedExpr )
            int alt141=3;
            switch ( input.LA(1) ) {
            case L_AposAttrContentChar:
                {
                alt141=1;
                }
                break;
            case L_PredefinedEntityRef:
            case L_CharRef:
            case ESCAPE_LBRACKET:
            case ESCAPE_RBRACKET:
                {
                alt141=2;
                }
                break;
            case LBRACKET:
                {
                alt141=3;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 141, 0, input);

                throw nvae;
            }

            switch (alt141) {
                case 1 :
                    // XQueryParser.g:857:13: pg_AposAttrContentChar
                    {
                    root_0 = (XQDTCommonTree)adaptor.nil();

                    pushFollow(FOLLOW_pg_AposAttrContentChar_in_pm_AposAttrValueContent7531);
                    pg_AposAttrContentChar381=pg_AposAttrContentChar();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, pg_AposAttrContentChar381.getTree());

                    }
                    break;
                case 2 :
                    // XQueryParser.g:857:38: pg_CommonContent
                    {
                    root_0 = (XQDTCommonTree)adaptor.nil();

                    pushFollow(FOLLOW_pg_CommonContent_in_pm_AposAttrValueContent7535);
                    pg_CommonContent382=pg_CommonContent();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, pg_CommonContent382.getTree());

                    }
                    break;
                case 3 :
                    // XQueryParser.g:857:57: p_ElemEnclosedExpr
                    {
                    root_0 = (XQDTCommonTree)adaptor.nil();

                    pushFollow(FOLLOW_p_ElemEnclosedExpr_in_pm_AposAttrValueContent7539);
                    p_ElemEnclosedExpr383=p_ElemEnclosedExpr();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, p_ElemEnclosedExpr383.getTree());

                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (XQDTCommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (XQDTCommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "pm_AposAttrValueContent"

    public static class pg_AposAttrContentChar_return extends ParserRuleReturnScope {
        XQDTCommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "pg_AposAttrContentChar"
    // XQueryParser.g:864:1: pg_AposAttrContentChar : L_AposAttrContentChar -> ^( AttributeValueChar L_AposAttrContentChar ) ;
    public final XQueryParser.pg_AposAttrContentChar_return pg_AposAttrContentChar() throws RecognitionException {
        XQueryParser.pg_AposAttrContentChar_return retval = new XQueryParser.pg_AposAttrContentChar_return();
        retval.start = input.LT(1);

        XQDTCommonTree root_0 = null;

        CommonToken L_AposAttrContentChar384=null;

        XQDTCommonTree L_AposAttrContentChar384_tree=null;
        RewriteRuleTokenStream stream_L_AposAttrContentChar=new RewriteRuleTokenStream(adaptor,"token L_AposAttrContentChar");

        try {
            // XQueryParser.g:865:9: ( L_AposAttrContentChar -> ^( AttributeValueChar L_AposAttrContentChar ) )
            // XQueryParser.g:865:11: L_AposAttrContentChar
            {
            L_AposAttrContentChar384=(CommonToken)match(input,L_AposAttrContentChar,FOLLOW_L_AposAttrContentChar_in_pg_AposAttrContentChar7568); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_L_AposAttrContentChar.add(L_AposAttrContentChar384);



            // AST REWRITE
            // elements: L_AposAttrContentChar
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (XQDTCommonTree)adaptor.nil();
            // 866:17: -> ^( AttributeValueChar L_AposAttrContentChar )
            {
                // XQueryParser.g:866:20: ^( AttributeValueChar L_AposAttrContentChar )
                {
                XQDTCommonTree root_1 = (XQDTCommonTree)adaptor.nil();
                root_1 = (XQDTCommonTree)adaptor.becomeRoot((XQDTCommonTree)adaptor.create(AttributeValueChar, "AttributeValueChar"), root_1);

                adaptor.addChild(root_1, stream_L_AposAttrContentChar.nextNode());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (XQDTCommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (XQDTCommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "pg_AposAttrContentChar"

    public static class pm_DirElemContent_return extends ParserRuleReturnScope {
        XQDTCommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "pm_DirElemContent"
    // XQueryParser.g:871:1: pm_DirElemContent : ( p_DirectConstructor | L_CDataSection | p_ElemEnclosedExpr | pg_CommonContent | pg_ElementContentChar );
    public final XQueryParser.pm_DirElemContent_return pm_DirElemContent() throws RecognitionException {
        XQueryParser.pm_DirElemContent_return retval = new XQueryParser.pm_DirElemContent_return();
        retval.start = input.LT(1);

        XQDTCommonTree root_0 = null;

        CommonToken L_CDataSection386=null;
        XQueryParser.p_DirectConstructor_return p_DirectConstructor385 = null;

        XQueryParser.p_ElemEnclosedExpr_return p_ElemEnclosedExpr387 = null;

        XQueryParser.pg_CommonContent_return pg_CommonContent388 = null;

        XQueryParser.pg_ElementContentChar_return pg_ElementContentChar389 = null;


        XQDTCommonTree L_CDataSection386_tree=null;

        try {
            // XQueryParser.g:872:9: ( p_DirectConstructor | L_CDataSection | p_ElemEnclosedExpr | pg_CommonContent | pg_ElementContentChar )
            int alt142=5;
            switch ( input.LA(1) ) {
            case SMALLER:
            case L_DirCommentConstructor:
            case L_DirPIConstructor:
                {
                alt142=1;
                }
                break;
            case L_CDataSection:
                {
                alt142=2;
                }
                break;
            case LBRACKET:
                {
                alt142=3;
                }
                break;
            case L_PredefinedEntityRef:
            case L_CharRef:
            case ESCAPE_LBRACKET:
            case ESCAPE_RBRACKET:
                {
                alt142=4;
                }
                break;
            case L_ElementContentChar:
                {
                alt142=5;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 142, 0, input);

                throw nvae;
            }

            switch (alt142) {
                case 1 :
                    // XQueryParser.g:872:11: p_DirectConstructor
                    {
                    root_0 = (XQDTCommonTree)adaptor.nil();

                    pushFollow(FOLLOW_p_DirectConstructor_in_pm_DirElemContent7619);
                    p_DirectConstructor385=p_DirectConstructor();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, p_DirectConstructor385.getTree());

                    }
                    break;
                case 2 :
                    // XQueryParser.g:873:11: L_CDataSection
                    {
                    root_0 = (XQDTCommonTree)adaptor.nil();

                    L_CDataSection386=(CommonToken)match(input,L_CDataSection,FOLLOW_L_CDataSection_in_pm_DirElemContent7631); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    L_CDataSection386_tree = (XQDTCommonTree)adaptor.create(L_CDataSection386);
                    adaptor.addChild(root_0, L_CDataSection386_tree);
                    }

                    }
                    break;
                case 3 :
                    // XQueryParser.g:874:11: p_ElemEnclosedExpr
                    {
                    root_0 = (XQDTCommonTree)adaptor.nil();

                    pushFollow(FOLLOW_p_ElemEnclosedExpr_in_pm_DirElemContent7643);
                    p_ElemEnclosedExpr387=p_ElemEnclosedExpr();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, p_ElemEnclosedExpr387.getTree());

                    }
                    break;
                case 4 :
                    // XQueryParser.g:875:11: pg_CommonContent
                    {
                    root_0 = (XQDTCommonTree)adaptor.nil();

                    pushFollow(FOLLOW_pg_CommonContent_in_pm_DirElemContent7655);
                    pg_CommonContent388=pg_CommonContent();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, pg_CommonContent388.getTree());

                    }
                    break;
                case 5 :
                    // XQueryParser.g:876:11: pg_ElementContentChar
                    {
                    root_0 = (XQDTCommonTree)adaptor.nil();

                    pushFollow(FOLLOW_pg_ElementContentChar_in_pm_DirElemContent7667);
                    pg_ElementContentChar389=pg_ElementContentChar();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, pg_ElementContentChar389.getTree());

                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (XQDTCommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (XQDTCommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "pm_DirElemContent"

    public static class pg_ElementContentChar_return extends ParserRuleReturnScope {
        XQDTCommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "pg_ElementContentChar"
    // XQueryParser.g:883:1: pg_ElementContentChar : L_ElementContentChar -> ^( ElementContentChar L_ElementContentChar ) ;
    public final XQueryParser.pg_ElementContentChar_return pg_ElementContentChar() throws RecognitionException {
        XQueryParser.pg_ElementContentChar_return retval = new XQueryParser.pg_ElementContentChar_return();
        retval.start = input.LT(1);

        XQDTCommonTree root_0 = null;

        CommonToken L_ElementContentChar390=null;

        XQDTCommonTree L_ElementContentChar390_tree=null;
        RewriteRuleTokenStream stream_L_ElementContentChar=new RewriteRuleTokenStream(adaptor,"token L_ElementContentChar");

        try {
            // XQueryParser.g:884:9: ( L_ElementContentChar -> ^( ElementContentChar L_ElementContentChar ) )
            // XQueryParser.g:884:11: L_ElementContentChar
            {
            L_ElementContentChar390=(CommonToken)match(input,L_ElementContentChar,FOLLOW_L_ElementContentChar_in_pg_ElementContentChar7696); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_L_ElementContentChar.add(L_ElementContentChar390);



            // AST REWRITE
            // elements: L_ElementContentChar
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (XQDTCommonTree)adaptor.nil();
            // 885:17: -> ^( ElementContentChar L_ElementContentChar )
            {
                // XQueryParser.g:885:20: ^( ElementContentChar L_ElementContentChar )
                {
                XQDTCommonTree root_1 = (XQDTCommonTree)adaptor.nil();
                root_1 = (XQDTCommonTree)adaptor.becomeRoot((XQDTCommonTree)adaptor.create(ElementContentChar, "ElementContentChar"), root_1);

                adaptor.addChild(root_1, stream_L_ElementContentChar.nextNode());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (XQDTCommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (XQDTCommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "pg_ElementContentChar"

    public static class pg_CommonContent_return extends ParserRuleReturnScope {
        XQDTCommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "pg_CommonContent"
    // XQueryParser.g:893:1: pg_CommonContent : pm_CommonContent -> ^( CommonContent pm_CommonContent ) ;
    public final XQueryParser.pg_CommonContent_return pg_CommonContent() throws RecognitionException {
        XQueryParser.pg_CommonContent_return retval = new XQueryParser.pg_CommonContent_return();
        retval.start = input.LT(1);

        XQDTCommonTree root_0 = null;

        XQueryParser.pm_CommonContent_return pm_CommonContent391 = null;


        RewriteRuleSubtreeStream stream_pm_CommonContent=new RewriteRuleSubtreeStream(adaptor,"rule pm_CommonContent");
        try {
            // XQueryParser.g:894:9: ( pm_CommonContent -> ^( CommonContent pm_CommonContent ) )
            // XQueryParser.g:894:13: pm_CommonContent
            {
            pushFollow(FOLLOW_pm_CommonContent_in_pg_CommonContent7752);
            pm_CommonContent391=pm_CommonContent();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_pm_CommonContent.add(pm_CommonContent391.getTree());


            // AST REWRITE
            // elements: pm_CommonContent
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (XQDTCommonTree)adaptor.nil();
            // 895:17: -> ^( CommonContent pm_CommonContent )
            {
                // XQueryParser.g:895:20: ^( CommonContent pm_CommonContent )
                {
                XQDTCommonTree root_1 = (XQDTCommonTree)adaptor.nil();
                root_1 = (XQDTCommonTree)adaptor.becomeRoot((XQDTCommonTree)adaptor.create(CommonContent, "CommonContent"), root_1);

                adaptor.addChild(root_1, stream_pm_CommonContent.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (XQDTCommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (XQDTCommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "pg_CommonContent"

    public static class pm_CommonContent_return extends ParserRuleReturnScope {
        XQDTCommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "pm_CommonContent"
    // XQueryParser.g:900:1: pm_CommonContent : ( L_PredefinedEntityRef | L_CharRef | ESCAPE_LBRACKET | ESCAPE_RBRACKET );
    public final XQueryParser.pm_CommonContent_return pm_CommonContent() throws RecognitionException {
        XQueryParser.pm_CommonContent_return retval = new XQueryParser.pm_CommonContent_return();
        retval.start = input.LT(1);

        XQDTCommonTree root_0 = null;

        CommonToken set392=null;

        XQDTCommonTree set392_tree=null;

        try {
            // XQueryParser.g:901:9: ( L_PredefinedEntityRef | L_CharRef | ESCAPE_LBRACKET | ESCAPE_RBRACKET )
            // XQueryParser.g:
            {
            root_0 = (XQDTCommonTree)adaptor.nil();

            set392=(CommonToken)input.LT(1);
            if ( (input.LA(1)>=L_PredefinedEntityRef && input.LA(1)<=ESCAPE_RBRACKET) ) {
                input.consume();
                if ( state.backtracking==0 ) adaptor.addChild(root_0, (XQDTCommonTree)adaptor.create(set392));
                state.errorRecovery=false;state.failed=false;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                MismatchedSetException mse = new MismatchedSetException(null,input);
                throw mse;
            }


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (XQDTCommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (XQDTCommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "pm_CommonContent"

    public static class p_ElemEnclosedExpr_return extends ParserRuleReturnScope {
        XQDTCommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "p_ElemEnclosedExpr"
    // XQueryParser.g:908:1: p_ElemEnclosedExpr : LBRACKET pm_Expr RBRACKET ;
    public final XQueryParser.p_ElemEnclosedExpr_return p_ElemEnclosedExpr() throws RecognitionException {
        XQueryParser.p_ElemEnclosedExpr_return retval = new XQueryParser.p_ElemEnclosedExpr_return();
        retval.start = input.LT(1);

        XQDTCommonTree root_0 = null;

        CommonToken LBRACKET393=null;
        CommonToken RBRACKET395=null;
        XQueryParser.pm_Expr_return pm_Expr394 = null;


        XQDTCommonTree LBRACKET393_tree=null;
        XQDTCommonTree RBRACKET395_tree=null;

        try {
            // XQueryParser.g:909:9: ( LBRACKET pm_Expr RBRACKET )
            // XQueryParser.g:909:13: LBRACKET pm_Expr RBRACKET
            {
            root_0 = (XQDTCommonTree)adaptor.nil();

            LBRACKET393=(CommonToken)match(input,LBRACKET,FOLLOW_LBRACKET_in_p_ElemEnclosedExpr7848); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            LBRACKET393_tree = (XQDTCommonTree)adaptor.create(LBRACKET393);
            adaptor.addChild(root_0, LBRACKET393_tree);
            }
            if ( state.backtracking==0 ) {
              pushXQueryLexer();
            }
            pushFollow(FOLLOW_pm_Expr_in_p_ElemEnclosedExpr7864);
            pm_Expr394=pm_Expr();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, pm_Expr394.getTree());
            RBRACKET395=(CommonToken)match(input,RBRACKET,FOLLOW_RBRACKET_in_p_ElemEnclosedExpr7878); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            RBRACKET395_tree = (XQDTCommonTree)adaptor.create(RBRACKET395);
            adaptor.addChild(root_0, RBRACKET395_tree);
            }
            if ( state.backtracking==0 ) {
              popLexer();
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (XQDTCommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (XQDTCommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "p_ElemEnclosedExpr"

    public static class p_ComputedConstructor_return extends ParserRuleReturnScope {
        XQDTCommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "p_ComputedConstructor"
    // XQueryParser.g:934:1: p_ComputedConstructor : ( p_CompDocConstructor | p_CompElemConstructor | p_CompAttrConstructor | p_CompNamespaceConstructor | p_CompTextConstructor | p_CompCommentConstructor | p_CompPIConstructor );
    public final XQueryParser.p_ComputedConstructor_return p_ComputedConstructor() throws RecognitionException {
        XQueryParser.p_ComputedConstructor_return retval = new XQueryParser.p_ComputedConstructor_return();
        retval.start = input.LT(1);

        XQDTCommonTree root_0 = null;

        XQueryParser.p_CompDocConstructor_return p_CompDocConstructor396 = null;

        XQueryParser.p_CompElemConstructor_return p_CompElemConstructor397 = null;

        XQueryParser.p_CompAttrConstructor_return p_CompAttrConstructor398 = null;

        XQueryParser.p_CompNamespaceConstructor_return p_CompNamespaceConstructor399 = null;

        XQueryParser.p_CompTextConstructor_return p_CompTextConstructor400 = null;

        XQueryParser.p_CompCommentConstructor_return p_CompCommentConstructor401 = null;

        XQueryParser.p_CompPIConstructor_return p_CompPIConstructor402 = null;



        try {
            // XQueryParser.g:935:9: ( p_CompDocConstructor | p_CompElemConstructor | p_CompAttrConstructor | p_CompNamespaceConstructor | p_CompTextConstructor | p_CompCommentConstructor | p_CompPIConstructor )
            int alt143=7;
            switch ( input.LA(1) ) {
            case DOCUMENT:
                {
                alt143=1;
                }
                break;
            case ELEMENT:
                {
                alt143=2;
                }
                break;
            case ATTRIBUTE:
                {
                alt143=3;
                }
                break;
            case NAMESPACE:
                {
                alt143=4;
                }
                break;
            case TEXT:
                {
                alt143=5;
                }
                break;
            case COMMENT:
                {
                alt143=6;
                }
                break;
            case PROCESSING_INSTRUCTION:
                {
                alt143=7;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 143, 0, input);

                throw nvae;
            }

            switch (alt143) {
                case 1 :
                    // XQueryParser.g:935:13: p_CompDocConstructor
                    {
                    root_0 = (XQDTCommonTree)adaptor.nil();

                    pushFollow(FOLLOW_p_CompDocConstructor_in_p_ComputedConstructor7930);
                    p_CompDocConstructor396=p_CompDocConstructor();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, p_CompDocConstructor396.getTree());

                    }
                    break;
                case 2 :
                    // XQueryParser.g:936:11: p_CompElemConstructor
                    {
                    root_0 = (XQDTCommonTree)adaptor.nil();

                    pushFollow(FOLLOW_p_CompElemConstructor_in_p_ComputedConstructor7942);
                    p_CompElemConstructor397=p_CompElemConstructor();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, p_CompElemConstructor397.getTree());

                    }
                    break;
                case 3 :
                    // XQueryParser.g:937:11: p_CompAttrConstructor
                    {
                    root_0 = (XQDTCommonTree)adaptor.nil();

                    pushFollow(FOLLOW_p_CompAttrConstructor_in_p_ComputedConstructor7954);
                    p_CompAttrConstructor398=p_CompAttrConstructor();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, p_CompAttrConstructor398.getTree());

                    }
                    break;
                case 4 :
                    // XQueryParser.g:938:11: p_CompNamespaceConstructor
                    {
                    root_0 = (XQDTCommonTree)adaptor.nil();

                    pushFollow(FOLLOW_p_CompNamespaceConstructor_in_p_ComputedConstructor7966);
                    p_CompNamespaceConstructor399=p_CompNamespaceConstructor();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, p_CompNamespaceConstructor399.getTree());

                    }
                    break;
                case 5 :
                    // XQueryParser.g:939:11: p_CompTextConstructor
                    {
                    root_0 = (XQDTCommonTree)adaptor.nil();

                    pushFollow(FOLLOW_p_CompTextConstructor_in_p_ComputedConstructor7978);
                    p_CompTextConstructor400=p_CompTextConstructor();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, p_CompTextConstructor400.getTree());

                    }
                    break;
                case 6 :
                    // XQueryParser.g:940:11: p_CompCommentConstructor
                    {
                    root_0 = (XQDTCommonTree)adaptor.nil();

                    pushFollow(FOLLOW_p_CompCommentConstructor_in_p_ComputedConstructor7990);
                    p_CompCommentConstructor401=p_CompCommentConstructor();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, p_CompCommentConstructor401.getTree());

                    }
                    break;
                case 7 :
                    // XQueryParser.g:941:11: p_CompPIConstructor
                    {
                    root_0 = (XQDTCommonTree)adaptor.nil();

                    pushFollow(FOLLOW_p_CompPIConstructor_in_p_ComputedConstructor8002);
                    p_CompPIConstructor402=p_CompPIConstructor();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, p_CompPIConstructor402.getTree());

                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (XQDTCommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (XQDTCommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "p_ComputedConstructor"

    public static class p_CompDocConstructor_return extends ParserRuleReturnScope {
        XQDTCommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "p_CompDocConstructor"
    // XQueryParser.g:945:1: p_CompDocConstructor : k= DOCUMENT LBRACKET pm_Expr RBRACKET ;
    public final XQueryParser.p_CompDocConstructor_return p_CompDocConstructor() throws RecognitionException {
        XQueryParser.p_CompDocConstructor_return retval = new XQueryParser.p_CompDocConstructor_return();
        retval.start = input.LT(1);

        XQDTCommonTree root_0 = null;

        CommonToken k=null;
        CommonToken LBRACKET403=null;
        CommonToken RBRACKET405=null;
        XQueryParser.pm_Expr_return pm_Expr404 = null;


        XQDTCommonTree k_tree=null;
        XQDTCommonTree LBRACKET403_tree=null;
        XQDTCommonTree RBRACKET405_tree=null;

        try {
            // XQueryParser.g:946:9: (k= DOCUMENT LBRACKET pm_Expr RBRACKET )
            // XQueryParser.g:946:13: k= DOCUMENT LBRACKET pm_Expr RBRACKET
            {
            root_0 = (XQDTCommonTree)adaptor.nil();

            k=(CommonToken)match(input,DOCUMENT,FOLLOW_DOCUMENT_in_p_CompDocConstructor8036); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            k_tree = (XQDTCommonTree)adaptor.create(k);
            adaptor.addChild(root_0, k_tree);
            }
            if ( state.backtracking==0 ) {
              ak(k);
            }
            LBRACKET403=(CommonToken)match(input,LBRACKET,FOLLOW_LBRACKET_in_p_CompDocConstructor8040); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            LBRACKET403_tree = (XQDTCommonTree)adaptor.create(LBRACKET403);
            adaptor.addChild(root_0, LBRACKET403_tree);
            }
            pushFollow(FOLLOW_pm_Expr_in_p_CompDocConstructor8042);
            pm_Expr404=pm_Expr();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, pm_Expr404.getTree());
            RBRACKET405=(CommonToken)match(input,RBRACKET,FOLLOW_RBRACKET_in_p_CompDocConstructor8044); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            RBRACKET405_tree = (XQDTCommonTree)adaptor.create(RBRACKET405);
            adaptor.addChild(root_0, RBRACKET405_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (XQDTCommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (XQDTCommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "p_CompDocConstructor"

    public static class p_CompElemConstructor_return extends ParserRuleReturnScope {
        XQDTCommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "p_CompElemConstructor"
    // XQueryParser.g:950:1: p_CompElemConstructor : k= ELEMENT ( p_QName | ( LBRACKET pm_Expr RBRACKET ) ) LBRACKET ( pm_Expr )? RBRACKET ;
    public final XQueryParser.p_CompElemConstructor_return p_CompElemConstructor() throws RecognitionException {
        XQueryParser.p_CompElemConstructor_return retval = new XQueryParser.p_CompElemConstructor_return();
        retval.start = input.LT(1);

        XQDTCommonTree root_0 = null;

        CommonToken k=null;
        CommonToken LBRACKET407=null;
        CommonToken RBRACKET409=null;
        CommonToken LBRACKET410=null;
        CommonToken RBRACKET412=null;
        XQueryParser.p_QName_return p_QName406 = null;

        XQueryParser.pm_Expr_return pm_Expr408 = null;

        XQueryParser.pm_Expr_return pm_Expr411 = null;


        XQDTCommonTree k_tree=null;
        XQDTCommonTree LBRACKET407_tree=null;
        XQDTCommonTree RBRACKET409_tree=null;
        XQDTCommonTree LBRACKET410_tree=null;
        XQDTCommonTree RBRACKET412_tree=null;

        try {
            // XQueryParser.g:951:9: (k= ELEMENT ( p_QName | ( LBRACKET pm_Expr RBRACKET ) ) LBRACKET ( pm_Expr )? RBRACKET )
            // XQueryParser.g:951:13: k= ELEMENT ( p_QName | ( LBRACKET pm_Expr RBRACKET ) ) LBRACKET ( pm_Expr )? RBRACKET
            {
            root_0 = (XQDTCommonTree)adaptor.nil();

            k=(CommonToken)match(input,ELEMENT,FOLLOW_ELEMENT_in_p_CompElemConstructor8085); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            k_tree = (XQDTCommonTree)adaptor.create(k);
            adaptor.addChild(root_0, k_tree);
            }
            if ( state.backtracking==0 ) {
              ak(k);
            }
            // XQueryParser.g:951:33: ( p_QName | ( LBRACKET pm_Expr RBRACKET ) )
            int alt144=2;
            int LA144_0 = input.LA(1);

            if ( ((LA144_0>=ANCESTOR && LA144_0<=EXIT)||(LA144_0>=SEQUENTIAL && LA144_0<=QUOT_ER)||LA144_0==L_NCName) ) {
                alt144=1;
            }
            else if ( (LA144_0==LBRACKET) ) {
                alt144=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 144, 0, input);

                throw nvae;
            }
            switch (alt144) {
                case 1 :
                    // XQueryParser.g:951:34: p_QName
                    {
                    pushFollow(FOLLOW_p_QName_in_p_CompElemConstructor8090);
                    p_QName406=p_QName();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, p_QName406.getTree());

                    }
                    break;
                case 2 :
                    // XQueryParser.g:951:44: ( LBRACKET pm_Expr RBRACKET )
                    {
                    // XQueryParser.g:951:44: ( LBRACKET pm_Expr RBRACKET )
                    // XQueryParser.g:951:45: LBRACKET pm_Expr RBRACKET
                    {
                    LBRACKET407=(CommonToken)match(input,LBRACKET,FOLLOW_LBRACKET_in_p_CompElemConstructor8095); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    LBRACKET407_tree = (XQDTCommonTree)adaptor.create(LBRACKET407);
                    adaptor.addChild(root_0, LBRACKET407_tree);
                    }
                    pushFollow(FOLLOW_pm_Expr_in_p_CompElemConstructor8097);
                    pm_Expr408=pm_Expr();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, pm_Expr408.getTree());
                    RBRACKET409=(CommonToken)match(input,RBRACKET,FOLLOW_RBRACKET_in_p_CompElemConstructor8099); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    RBRACKET409_tree = (XQDTCommonTree)adaptor.create(RBRACKET409);
                    adaptor.addChild(root_0, RBRACKET409_tree);
                    }

                    }


                    }
                    break;

            }

            LBRACKET410=(CommonToken)match(input,LBRACKET,FOLLOW_LBRACKET_in_p_CompElemConstructor8103); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            LBRACKET410_tree = (XQDTCommonTree)adaptor.create(LBRACKET410);
            adaptor.addChild(root_0, LBRACKET410_tree);
            }
            // XQueryParser.g:951:82: ( pm_Expr )?
            int alt145=2;
            int LA145_0 = input.LA(1);

            if ( ((LA145_0>=ANCESTOR && LA145_0<=EXIT)||(LA145_0>=SEQUENTIAL && LA145_0<=LPAREN)||LA145_0==DOLLAR||(LA145_0>=STAR && LA145_0<=SMALLER)||(LA145_0>=SLASH && LA145_0<=DOT_DOT)||LA145_0==ATTR_SIGN||(LA145_0>=APOS && LA145_0<=QUOT)||LA145_0==L_NCName||(LA145_0>=L_Pragma && LA145_0<=L_DoubleLiteral)) ) {
                alt145=1;
            }
            switch (alt145) {
                case 1 :
                    // XQueryParser.g:951:82: pm_Expr
                    {
                    pushFollow(FOLLOW_pm_Expr_in_p_CompElemConstructor8105);
                    pm_Expr411=pm_Expr();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, pm_Expr411.getTree());

                    }
                    break;

            }

            RBRACKET412=(CommonToken)match(input,RBRACKET,FOLLOW_RBRACKET_in_p_CompElemConstructor8108); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            RBRACKET412_tree = (XQDTCommonTree)adaptor.create(RBRACKET412);
            adaptor.addChild(root_0, RBRACKET412_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (XQDTCommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (XQDTCommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "p_CompElemConstructor"

    public static class p_CompAttrConstructor_return extends ParserRuleReturnScope {
        XQDTCommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "p_CompAttrConstructor"
    // XQueryParser.g:958:1: p_CompAttrConstructor : k= ATTRIBUTE ( p_QName | ( LBRACKET pm_Expr RBRACKET ) ) LBRACKET ( pm_Expr )? RBRACKET ;
    public final XQueryParser.p_CompAttrConstructor_return p_CompAttrConstructor() throws RecognitionException {
        XQueryParser.p_CompAttrConstructor_return retval = new XQueryParser.p_CompAttrConstructor_return();
        retval.start = input.LT(1);

        XQDTCommonTree root_0 = null;

        CommonToken k=null;
        CommonToken LBRACKET414=null;
        CommonToken RBRACKET416=null;
        CommonToken LBRACKET417=null;
        CommonToken RBRACKET419=null;
        XQueryParser.p_QName_return p_QName413 = null;

        XQueryParser.pm_Expr_return pm_Expr415 = null;

        XQueryParser.pm_Expr_return pm_Expr418 = null;


        XQDTCommonTree k_tree=null;
        XQDTCommonTree LBRACKET414_tree=null;
        XQDTCommonTree RBRACKET416_tree=null;
        XQDTCommonTree LBRACKET417_tree=null;
        XQDTCommonTree RBRACKET419_tree=null;

        try {
            // XQueryParser.g:959:9: (k= ATTRIBUTE ( p_QName | ( LBRACKET pm_Expr RBRACKET ) ) LBRACKET ( pm_Expr )? RBRACKET )
            // XQueryParser.g:959:13: k= ATTRIBUTE ( p_QName | ( LBRACKET pm_Expr RBRACKET ) ) LBRACKET ( pm_Expr )? RBRACKET
            {
            root_0 = (XQDTCommonTree)adaptor.nil();

            k=(CommonToken)match(input,ATTRIBUTE,FOLLOW_ATTRIBUTE_in_p_CompAttrConstructor8141); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            k_tree = (XQDTCommonTree)adaptor.create(k);
            adaptor.addChild(root_0, k_tree);
            }
            if ( state.backtracking==0 ) {
              ak(k);
            }
            // XQueryParser.g:959:35: ( p_QName | ( LBRACKET pm_Expr RBRACKET ) )
            int alt146=2;
            int LA146_0 = input.LA(1);

            if ( ((LA146_0>=ANCESTOR && LA146_0<=EXIT)||(LA146_0>=SEQUENTIAL && LA146_0<=QUOT_ER)||LA146_0==L_NCName) ) {
                alt146=1;
            }
            else if ( (LA146_0==LBRACKET) ) {
                alt146=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 146, 0, input);

                throw nvae;
            }
            switch (alt146) {
                case 1 :
                    // XQueryParser.g:959:36: p_QName
                    {
                    pushFollow(FOLLOW_p_QName_in_p_CompAttrConstructor8146);
                    p_QName413=p_QName();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, p_QName413.getTree());

                    }
                    break;
                case 2 :
                    // XQueryParser.g:959:46: ( LBRACKET pm_Expr RBRACKET )
                    {
                    // XQueryParser.g:959:46: ( LBRACKET pm_Expr RBRACKET )
                    // XQueryParser.g:959:47: LBRACKET pm_Expr RBRACKET
                    {
                    LBRACKET414=(CommonToken)match(input,LBRACKET,FOLLOW_LBRACKET_in_p_CompAttrConstructor8151); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    LBRACKET414_tree = (XQDTCommonTree)adaptor.create(LBRACKET414);
                    adaptor.addChild(root_0, LBRACKET414_tree);
                    }
                    pushFollow(FOLLOW_pm_Expr_in_p_CompAttrConstructor8153);
                    pm_Expr415=pm_Expr();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, pm_Expr415.getTree());
                    RBRACKET416=(CommonToken)match(input,RBRACKET,FOLLOW_RBRACKET_in_p_CompAttrConstructor8155); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    RBRACKET416_tree = (XQDTCommonTree)adaptor.create(RBRACKET416);
                    adaptor.addChild(root_0, RBRACKET416_tree);
                    }

                    }


                    }
                    break;

            }

            LBRACKET417=(CommonToken)match(input,LBRACKET,FOLLOW_LBRACKET_in_p_CompAttrConstructor8159); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            LBRACKET417_tree = (XQDTCommonTree)adaptor.create(LBRACKET417);
            adaptor.addChild(root_0, LBRACKET417_tree);
            }
            // XQueryParser.g:959:84: ( pm_Expr )?
            int alt147=2;
            int LA147_0 = input.LA(1);

            if ( ((LA147_0>=ANCESTOR && LA147_0<=EXIT)||(LA147_0>=SEQUENTIAL && LA147_0<=LPAREN)||LA147_0==DOLLAR||(LA147_0>=STAR && LA147_0<=SMALLER)||(LA147_0>=SLASH && LA147_0<=DOT_DOT)||LA147_0==ATTR_SIGN||(LA147_0>=APOS && LA147_0<=QUOT)||LA147_0==L_NCName||(LA147_0>=L_Pragma && LA147_0<=L_DoubleLiteral)) ) {
                alt147=1;
            }
            switch (alt147) {
                case 1 :
                    // XQueryParser.g:959:84: pm_Expr
                    {
                    pushFollow(FOLLOW_pm_Expr_in_p_CompAttrConstructor8161);
                    pm_Expr418=pm_Expr();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, pm_Expr418.getTree());

                    }
                    break;

            }

            RBRACKET419=(CommonToken)match(input,RBRACKET,FOLLOW_RBRACKET_in_p_CompAttrConstructor8164); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            RBRACKET419_tree = (XQDTCommonTree)adaptor.create(RBRACKET419);
            adaptor.addChild(root_0, RBRACKET419_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (XQDTCommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (XQDTCommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "p_CompAttrConstructor"

    public static class p_CompNamespaceConstructor_return extends ParserRuleReturnScope {
        XQDTCommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "p_CompNamespaceConstructor"
    // XQueryParser.g:963:1: p_CompNamespaceConstructor : k= NAMESPACE ( p_NCName | ( LBRACKET pm_Expr RBRACKET ) ) LBRACKET ( pm_Expr )? RBRACKET ;
    public final XQueryParser.p_CompNamespaceConstructor_return p_CompNamespaceConstructor() throws RecognitionException {
        XQueryParser.p_CompNamespaceConstructor_return retval = new XQueryParser.p_CompNamespaceConstructor_return();
        retval.start = input.LT(1);

        XQDTCommonTree root_0 = null;

        CommonToken k=null;
        CommonToken LBRACKET421=null;
        CommonToken RBRACKET423=null;
        CommonToken LBRACKET424=null;
        CommonToken RBRACKET426=null;
        XQueryParser.p_NCName_return p_NCName420 = null;

        XQueryParser.pm_Expr_return pm_Expr422 = null;

        XQueryParser.pm_Expr_return pm_Expr425 = null;


        XQDTCommonTree k_tree=null;
        XQDTCommonTree LBRACKET421_tree=null;
        XQDTCommonTree RBRACKET423_tree=null;
        XQDTCommonTree LBRACKET424_tree=null;
        XQDTCommonTree RBRACKET426_tree=null;

        try {
            // XQueryParser.g:964:9: (k= NAMESPACE ( p_NCName | ( LBRACKET pm_Expr RBRACKET ) ) LBRACKET ( pm_Expr )? RBRACKET )
            // XQueryParser.g:964:11: k= NAMESPACE ( p_NCName | ( LBRACKET pm_Expr RBRACKET ) ) LBRACKET ( pm_Expr )? RBRACKET
            {
            root_0 = (XQDTCommonTree)adaptor.nil();

            k=(CommonToken)match(input,NAMESPACE,FOLLOW_NAMESPACE_in_p_CompNamespaceConstructor8192); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            k_tree = (XQDTCommonTree)adaptor.create(k);
            adaptor.addChild(root_0, k_tree);
            }
            if ( state.backtracking==0 ) {
              ak(k);
            }
            // XQueryParser.g:964:33: ( p_NCName | ( LBRACKET pm_Expr RBRACKET ) )
            int alt148=2;
            int LA148_0 = input.LA(1);

            if ( ((LA148_0>=ANCESTOR && LA148_0<=EXIT)||(LA148_0>=SEQUENTIAL && LA148_0<=QUOT_ER)||LA148_0==L_NCName) ) {
                alt148=1;
            }
            else if ( (LA148_0==LBRACKET) ) {
                alt148=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 148, 0, input);

                throw nvae;
            }
            switch (alt148) {
                case 1 :
                    // XQueryParser.g:964:34: p_NCName
                    {
                    pushFollow(FOLLOW_p_NCName_in_p_CompNamespaceConstructor8197);
                    p_NCName420=p_NCName();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, p_NCName420.getTree());

                    }
                    break;
                case 2 :
                    // XQueryParser.g:964:45: ( LBRACKET pm_Expr RBRACKET )
                    {
                    // XQueryParser.g:964:45: ( LBRACKET pm_Expr RBRACKET )
                    // XQueryParser.g:964:46: LBRACKET pm_Expr RBRACKET
                    {
                    LBRACKET421=(CommonToken)match(input,LBRACKET,FOLLOW_LBRACKET_in_p_CompNamespaceConstructor8202); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    LBRACKET421_tree = (XQDTCommonTree)adaptor.create(LBRACKET421);
                    adaptor.addChild(root_0, LBRACKET421_tree);
                    }
                    pushFollow(FOLLOW_pm_Expr_in_p_CompNamespaceConstructor8204);
                    pm_Expr422=pm_Expr();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, pm_Expr422.getTree());
                    RBRACKET423=(CommonToken)match(input,RBRACKET,FOLLOW_RBRACKET_in_p_CompNamespaceConstructor8206); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    RBRACKET423_tree = (XQDTCommonTree)adaptor.create(RBRACKET423);
                    adaptor.addChild(root_0, RBRACKET423_tree);
                    }

                    }


                    }
                    break;

            }

            LBRACKET424=(CommonToken)match(input,LBRACKET,FOLLOW_LBRACKET_in_p_CompNamespaceConstructor8210); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            LBRACKET424_tree = (XQDTCommonTree)adaptor.create(LBRACKET424);
            adaptor.addChild(root_0, LBRACKET424_tree);
            }
            // XQueryParser.g:964:83: ( pm_Expr )?
            int alt149=2;
            int LA149_0 = input.LA(1);

            if ( ((LA149_0>=ANCESTOR && LA149_0<=EXIT)||(LA149_0>=SEQUENTIAL && LA149_0<=LPAREN)||LA149_0==DOLLAR||(LA149_0>=STAR && LA149_0<=SMALLER)||(LA149_0>=SLASH && LA149_0<=DOT_DOT)||LA149_0==ATTR_SIGN||(LA149_0>=APOS && LA149_0<=QUOT)||LA149_0==L_NCName||(LA149_0>=L_Pragma && LA149_0<=L_DoubleLiteral)) ) {
                alt149=1;
            }
            switch (alt149) {
                case 1 :
                    // XQueryParser.g:964:83: pm_Expr
                    {
                    pushFollow(FOLLOW_pm_Expr_in_p_CompNamespaceConstructor8212);
                    pm_Expr425=pm_Expr();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, pm_Expr425.getTree());

                    }
                    break;

            }

            RBRACKET426=(CommonToken)match(input,RBRACKET,FOLLOW_RBRACKET_in_p_CompNamespaceConstructor8215); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            RBRACKET426_tree = (XQDTCommonTree)adaptor.create(RBRACKET426);
            adaptor.addChild(root_0, RBRACKET426_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (XQDTCommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (XQDTCommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "p_CompNamespaceConstructor"

    public static class p_CompTextConstructor_return extends ParserRuleReturnScope {
        XQDTCommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "p_CompTextConstructor"
    // XQueryParser.g:974:1: p_CompTextConstructor : k= TEXT LBRACKET pm_Expr RBRACKET ;
    public final XQueryParser.p_CompTextConstructor_return p_CompTextConstructor() throws RecognitionException {
        XQueryParser.p_CompTextConstructor_return retval = new XQueryParser.p_CompTextConstructor_return();
        retval.start = input.LT(1);

        XQDTCommonTree root_0 = null;

        CommonToken k=null;
        CommonToken LBRACKET427=null;
        CommonToken RBRACKET429=null;
        XQueryParser.pm_Expr_return pm_Expr428 = null;


        XQDTCommonTree k_tree=null;
        XQDTCommonTree LBRACKET427_tree=null;
        XQDTCommonTree RBRACKET429_tree=null;

        try {
            // XQueryParser.g:975:9: (k= TEXT LBRACKET pm_Expr RBRACKET )
            // XQueryParser.g:975:13: k= TEXT LBRACKET pm_Expr RBRACKET
            {
            root_0 = (XQDTCommonTree)adaptor.nil();

            k=(CommonToken)match(input,TEXT,FOLLOW_TEXT_in_p_CompTextConstructor8251); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            k_tree = (XQDTCommonTree)adaptor.create(k);
            adaptor.addChild(root_0, k_tree);
            }
            if ( state.backtracking==0 ) {
              ak(k);
            }
            LBRACKET427=(CommonToken)match(input,LBRACKET,FOLLOW_LBRACKET_in_p_CompTextConstructor8255); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            LBRACKET427_tree = (XQDTCommonTree)adaptor.create(LBRACKET427);
            adaptor.addChild(root_0, LBRACKET427_tree);
            }
            pushFollow(FOLLOW_pm_Expr_in_p_CompTextConstructor8257);
            pm_Expr428=pm_Expr();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, pm_Expr428.getTree());
            RBRACKET429=(CommonToken)match(input,RBRACKET,FOLLOW_RBRACKET_in_p_CompTextConstructor8259); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            RBRACKET429_tree = (XQDTCommonTree)adaptor.create(RBRACKET429);
            adaptor.addChild(root_0, RBRACKET429_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (XQDTCommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (XQDTCommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "p_CompTextConstructor"

    public static class p_CompCommentConstructor_return extends ParserRuleReturnScope {
        XQDTCommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "p_CompCommentConstructor"
    // XQueryParser.g:979:1: p_CompCommentConstructor : k= COMMENT LBRACKET pm_Expr RBRACKET ;
    public final XQueryParser.p_CompCommentConstructor_return p_CompCommentConstructor() throws RecognitionException {
        XQueryParser.p_CompCommentConstructor_return retval = new XQueryParser.p_CompCommentConstructor_return();
        retval.start = input.LT(1);

        XQDTCommonTree root_0 = null;

        CommonToken k=null;
        CommonToken LBRACKET430=null;
        CommonToken RBRACKET432=null;
        XQueryParser.pm_Expr_return pm_Expr431 = null;


        XQDTCommonTree k_tree=null;
        XQDTCommonTree LBRACKET430_tree=null;
        XQDTCommonTree RBRACKET432_tree=null;

        try {
            // XQueryParser.g:980:9: (k= COMMENT LBRACKET pm_Expr RBRACKET )
            // XQueryParser.g:980:13: k= COMMENT LBRACKET pm_Expr RBRACKET
            {
            root_0 = (XQDTCommonTree)adaptor.nil();

            k=(CommonToken)match(input,COMMENT,FOLLOW_COMMENT_in_p_CompCommentConstructor8289); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            k_tree = (XQDTCommonTree)adaptor.create(k);
            adaptor.addChild(root_0, k_tree);
            }
            if ( state.backtracking==0 ) {
              ak(k);
            }
            LBRACKET430=(CommonToken)match(input,LBRACKET,FOLLOW_LBRACKET_in_p_CompCommentConstructor8293); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            LBRACKET430_tree = (XQDTCommonTree)adaptor.create(LBRACKET430);
            adaptor.addChild(root_0, LBRACKET430_tree);
            }
            pushFollow(FOLLOW_pm_Expr_in_p_CompCommentConstructor8295);
            pm_Expr431=pm_Expr();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, pm_Expr431.getTree());
            RBRACKET432=(CommonToken)match(input,RBRACKET,FOLLOW_RBRACKET_in_p_CompCommentConstructor8297); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            RBRACKET432_tree = (XQDTCommonTree)adaptor.create(RBRACKET432);
            adaptor.addChild(root_0, RBRACKET432_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (XQDTCommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (XQDTCommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "p_CompCommentConstructor"

    public static class p_CompPIConstructor_return extends ParserRuleReturnScope {
        XQDTCommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "p_CompPIConstructor"
    // XQueryParser.g:984:1: p_CompPIConstructor : k= PROCESSING_INSTRUCTION ( p_NCName | ( LBRACKET pm_Expr RBRACKET ) ) LBRACKET ( pm_Expr )? RBRACKET ;
    public final XQueryParser.p_CompPIConstructor_return p_CompPIConstructor() throws RecognitionException {
        XQueryParser.p_CompPIConstructor_return retval = new XQueryParser.p_CompPIConstructor_return();
        retval.start = input.LT(1);

        XQDTCommonTree root_0 = null;

        CommonToken k=null;
        CommonToken LBRACKET434=null;
        CommonToken RBRACKET436=null;
        CommonToken LBRACKET437=null;
        CommonToken RBRACKET439=null;
        XQueryParser.p_NCName_return p_NCName433 = null;

        XQueryParser.pm_Expr_return pm_Expr435 = null;

        XQueryParser.pm_Expr_return pm_Expr438 = null;


        XQDTCommonTree k_tree=null;
        XQDTCommonTree LBRACKET434_tree=null;
        XQDTCommonTree RBRACKET436_tree=null;
        XQDTCommonTree LBRACKET437_tree=null;
        XQDTCommonTree RBRACKET439_tree=null;

        try {
            // XQueryParser.g:985:9: (k= PROCESSING_INSTRUCTION ( p_NCName | ( LBRACKET pm_Expr RBRACKET ) ) LBRACKET ( pm_Expr )? RBRACKET )
            // XQueryParser.g:985:13: k= PROCESSING_INSTRUCTION ( p_NCName | ( LBRACKET pm_Expr RBRACKET ) ) LBRACKET ( pm_Expr )? RBRACKET
            {
            root_0 = (XQDTCommonTree)adaptor.nil();

            k=(CommonToken)match(input,PROCESSING_INSTRUCTION,FOLLOW_PROCESSING_INSTRUCTION_in_p_CompPIConstructor8328); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            k_tree = (XQDTCommonTree)adaptor.create(k);
            adaptor.addChild(root_0, k_tree);
            }
            if ( state.backtracking==0 ) {
              ak(k);
            }
            // XQueryParser.g:985:48: ( p_NCName | ( LBRACKET pm_Expr RBRACKET ) )
            int alt150=2;
            int LA150_0 = input.LA(1);

            if ( ((LA150_0>=ANCESTOR && LA150_0<=EXIT)||(LA150_0>=SEQUENTIAL && LA150_0<=QUOT_ER)||LA150_0==L_NCName) ) {
                alt150=1;
            }
            else if ( (LA150_0==LBRACKET) ) {
                alt150=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 150, 0, input);

                throw nvae;
            }
            switch (alt150) {
                case 1 :
                    // XQueryParser.g:985:49: p_NCName
                    {
                    pushFollow(FOLLOW_p_NCName_in_p_CompPIConstructor8333);
                    p_NCName433=p_NCName();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, p_NCName433.getTree());

                    }
                    break;
                case 2 :
                    // XQueryParser.g:985:60: ( LBRACKET pm_Expr RBRACKET )
                    {
                    // XQueryParser.g:985:60: ( LBRACKET pm_Expr RBRACKET )
                    // XQueryParser.g:985:61: LBRACKET pm_Expr RBRACKET
                    {
                    LBRACKET434=(CommonToken)match(input,LBRACKET,FOLLOW_LBRACKET_in_p_CompPIConstructor8338); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    LBRACKET434_tree = (XQDTCommonTree)adaptor.create(LBRACKET434);
                    adaptor.addChild(root_0, LBRACKET434_tree);
                    }
                    pushFollow(FOLLOW_pm_Expr_in_p_CompPIConstructor8340);
                    pm_Expr435=pm_Expr();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, pm_Expr435.getTree());
                    RBRACKET436=(CommonToken)match(input,RBRACKET,FOLLOW_RBRACKET_in_p_CompPIConstructor8342); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    RBRACKET436_tree = (XQDTCommonTree)adaptor.create(RBRACKET436);
                    adaptor.addChild(root_0, RBRACKET436_tree);
                    }

                    }


                    }
                    break;

            }

            LBRACKET437=(CommonToken)match(input,LBRACKET,FOLLOW_LBRACKET_in_p_CompPIConstructor8346); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            LBRACKET437_tree = (XQDTCommonTree)adaptor.create(LBRACKET437);
            adaptor.addChild(root_0, LBRACKET437_tree);
            }
            // XQueryParser.g:985:98: ( pm_Expr )?
            int alt151=2;
            int LA151_0 = input.LA(1);

            if ( ((LA151_0>=ANCESTOR && LA151_0<=EXIT)||(LA151_0>=SEQUENTIAL && LA151_0<=LPAREN)||LA151_0==DOLLAR||(LA151_0>=STAR && LA151_0<=SMALLER)||(LA151_0>=SLASH && LA151_0<=DOT_DOT)||LA151_0==ATTR_SIGN||(LA151_0>=APOS && LA151_0<=QUOT)||LA151_0==L_NCName||(LA151_0>=L_Pragma && LA151_0<=L_DoubleLiteral)) ) {
                alt151=1;
            }
            switch (alt151) {
                case 1 :
                    // XQueryParser.g:985:98: pm_Expr
                    {
                    pushFollow(FOLLOW_pm_Expr_in_p_CompPIConstructor8348);
                    pm_Expr438=pm_Expr();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, pm_Expr438.getTree());

                    }
                    break;

            }

            RBRACKET439=(CommonToken)match(input,RBRACKET,FOLLOW_RBRACKET_in_p_CompPIConstructor8351); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            RBRACKET439_tree = (XQDTCommonTree)adaptor.create(RBRACKET439);
            adaptor.addChild(root_0, RBRACKET439_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (XQDTCommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (XQDTCommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "p_CompPIConstructor"

    public static class p_SingleType_return extends ParserRuleReturnScope {
        XQDTCommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "p_SingleType"
    // XQueryParser.g:989:1: p_SingleType : p_AtomicType ( QUESTION )? ;
    public final XQueryParser.p_SingleType_return p_SingleType() throws RecognitionException {
        XQueryParser.p_SingleType_return retval = new XQueryParser.p_SingleType_return();
        retval.start = input.LT(1);

        XQDTCommonTree root_0 = null;

        CommonToken QUESTION441=null;
        XQueryParser.p_AtomicType_return p_AtomicType440 = null;


        XQDTCommonTree QUESTION441_tree=null;

        try {
            // XQueryParser.g:990:9: ( p_AtomicType ( QUESTION )? )
            // XQueryParser.g:990:13: p_AtomicType ( QUESTION )?
            {
            root_0 = (XQDTCommonTree)adaptor.nil();

            pushFollow(FOLLOW_p_AtomicType_in_p_SingleType8379);
            p_AtomicType440=p_AtomicType();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, p_AtomicType440.getTree());
            // XQueryParser.g:990:26: ( QUESTION )?
            int alt152=2;
            int LA152_0 = input.LA(1);

            if ( (LA152_0==QUESTION) ) {
                alt152=1;
            }
            switch (alt152) {
                case 1 :
                    // XQueryParser.g:990:26: QUESTION
                    {
                    QUESTION441=(CommonToken)match(input,QUESTION,FOLLOW_QUESTION_in_p_SingleType8381); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    QUESTION441_tree = (XQDTCommonTree)adaptor.create(QUESTION441);
                    adaptor.addChild(root_0, QUESTION441_tree);
                    }

                    }
                    break;

            }


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (XQDTCommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (XQDTCommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "p_SingleType"

    public static class p_TypeDeclaration_return extends ParserRuleReturnScope {
        XQDTCommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "p_TypeDeclaration"
    // XQueryParser.g:994:1: p_TypeDeclaration : k= AS st= p_SequenceType -> ^( TypeDeclaration $st) ;
    public final XQueryParser.p_TypeDeclaration_return p_TypeDeclaration() throws RecognitionException {
        XQueryParser.p_TypeDeclaration_return retval = new XQueryParser.p_TypeDeclaration_return();
        retval.start = input.LT(1);

        XQDTCommonTree root_0 = null;

        CommonToken k=null;
        XQueryParser.p_SequenceType_return st = null;


        XQDTCommonTree k_tree=null;
        RewriteRuleTokenStream stream_AS=new RewriteRuleTokenStream(adaptor,"token AS");
        RewriteRuleSubtreeStream stream_p_SequenceType=new RewriteRuleSubtreeStream(adaptor,"rule p_SequenceType");
        try {
            // XQueryParser.g:995:9: (k= AS st= p_SequenceType -> ^( TypeDeclaration $st) )
            // XQueryParser.g:995:13: k= AS st= p_SequenceType
            {
            k=(CommonToken)match(input,AS,FOLLOW_AS_in_p_TypeDeclaration8412); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_AS.add(k);

            if ( state.backtracking==0 ) {
              ak(k);
            }
            pushFollow(FOLLOW_p_SequenceType_in_p_TypeDeclaration8418);
            st=p_SequenceType();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_p_SequenceType.add(st.getTree());


            // AST REWRITE
            // elements: st
            // token labels: 
            // rule labels: retval, st
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
            RewriteRuleSubtreeStream stream_st=new RewriteRuleSubtreeStream(adaptor,"rule st",st!=null?st.tree:null);

            root_0 = (XQDTCommonTree)adaptor.nil();
            // 996:17: -> ^( TypeDeclaration $st)
            {
                // XQueryParser.g:996:20: ^( TypeDeclaration $st)
                {
                XQDTCommonTree root_1 = (XQDTCommonTree)adaptor.nil();
                root_1 = (XQDTCommonTree)adaptor.becomeRoot((XQDTCommonTree)adaptor.create(TypeDeclaration, "TypeDeclaration"), root_1);

                adaptor.addChild(root_1, stream_st.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (XQDTCommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (XQDTCommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "p_TypeDeclaration"

    public static class p_SequenceType_return extends ParserRuleReturnScope {
        XQDTCommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "p_SequenceType"
    // XQueryParser.g:1000:1: p_SequenceType : (k= EMPTY_SEQUENCE l= LPAREN r= RPAREN -> ^( SequenceType ^( EmptySequenceTest $k $l $r) ) | it= p_ItemType ( ( p_OccurrenceIndicator )=>oi= p_OccurrenceIndicator )? -> ^( SequenceType $it ( $oi)? ) );
    public final XQueryParser.p_SequenceType_return p_SequenceType() throws RecognitionException {
        XQueryParser.p_SequenceType_return retval = new XQueryParser.p_SequenceType_return();
        retval.start = input.LT(1);

        XQDTCommonTree root_0 = null;

        CommonToken k=null;
        CommonToken l=null;
        CommonToken r=null;
        XQueryParser.p_ItemType_return it = null;

        XQueryParser.p_OccurrenceIndicator_return oi = null;


        XQDTCommonTree k_tree=null;
        XQDTCommonTree l_tree=null;
        XQDTCommonTree r_tree=null;
        RewriteRuleTokenStream stream_RPAREN=new RewriteRuleTokenStream(adaptor,"token RPAREN");
        RewriteRuleTokenStream stream_LPAREN=new RewriteRuleTokenStream(adaptor,"token LPAREN");
        RewriteRuleTokenStream stream_EMPTY_SEQUENCE=new RewriteRuleTokenStream(adaptor,"token EMPTY_SEQUENCE");
        RewriteRuleSubtreeStream stream_p_OccurrenceIndicator=new RewriteRuleSubtreeStream(adaptor,"rule p_OccurrenceIndicator");
        RewriteRuleSubtreeStream stream_p_ItemType=new RewriteRuleSubtreeStream(adaptor,"rule p_ItemType");
        try {
            // XQueryParser.g:1001:9: (k= EMPTY_SEQUENCE l= LPAREN r= RPAREN -> ^( SequenceType ^( EmptySequenceTest $k $l $r) ) | it= p_ItemType ( ( p_OccurrenceIndicator )=>oi= p_OccurrenceIndicator )? -> ^( SequenceType $it ( $oi)? ) )
            int alt154=2;
            int LA154_0 = input.LA(1);

            if ( (LA154_0==EMPTY_SEQUENCE) ) {
                int LA154_1 = input.LA(2);

                if ( (LA154_1==LPAREN) ) {
                    alt154=1;
                }
                else if ( (LA154_1==EOF||(LA154_1>=AND && LA154_1<=AT)||LA154_1==CASE||LA154_1==COLLATION||LA154_1==DEFAULT||(LA154_1>=DESCENDING && LA154_1<=DIV)||(LA154_1>=ELSE && LA154_1<=EMPTY)||LA154_1==EQ||(LA154_1>=EXCEPT && LA154_1<=EXTERNAL)||LA154_1==FOR||LA154_1==GE||(LA154_1>=GT && LA154_1<=IDIV)||LA154_1==IN||(LA154_1>=INSTANCE && LA154_1<=IS)||LA154_1==LE||(LA154_1>=LET && LA154_1<=MOD)||LA154_1==NE||(LA154_1>=OR && LA154_1<=ORDER)||(LA154_1>=RETURN && LA154_1<=SATISFIES)||LA154_1==STABLE||LA154_1==TO||LA154_1==UNION||LA154_1==WHERE||LA154_1==COUNT||(LA154_1>=END && LA154_1<=GROUP)||LA154_1==ONLY||LA154_1==START||(LA154_1>=AFTER && LA154_1<=BEFORE)||LA154_1==INTO||LA154_1==MODIFY||LA154_1==WITH||LA154_1==RPAREN||(LA154_1>=LBRACKET && LA154_1<=RBRACKET)||(LA154_1>=RSQUARE && LA154_1<=NOTEQUAL)||(LA154_1>=COMMA && LA154_1<=GREATER_GREATER)||LA154_1==COLON||(LA154_1>=SEMICOLON && LA154_1<=VBAR)) ) {
                    alt154=2;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 154, 1, input);

                    throw nvae;
                }
            }
            else if ( ((LA154_0>=ANCESTOR && LA154_0<=EMPTY)||(LA154_0>=ENCODING && LA154_0<=EXIT)||(LA154_0>=SEQUENTIAL && LA154_0<=QUOT_ER)||LA154_0==L_NCName) ) {
                alt154=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 154, 0, input);

                throw nvae;
            }
            switch (alt154) {
                case 1 :
                    // XQueryParser.g:1001:13: k= EMPTY_SEQUENCE l= LPAREN r= RPAREN
                    {
                    k=(CommonToken)match(input,EMPTY_SEQUENCE,FOLLOW_EMPTY_SEQUENCE_in_p_SequenceType8473); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_EMPTY_SEQUENCE.add(k);

                    if ( state.backtracking==0 ) {
                      ak(k);
                    }
                    l=(CommonToken)match(input,LPAREN,FOLLOW_LPAREN_in_p_SequenceType8479); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_LPAREN.add(l);

                    r=(CommonToken)match(input,RPAREN,FOLLOW_RPAREN_in_p_SequenceType8483); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_RPAREN.add(r);



                    // AST REWRITE
                    // elements: l, k, r
                    // token labels: k, r, l
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleTokenStream stream_k=new RewriteRuleTokenStream(adaptor,"token k",k);
                    RewriteRuleTokenStream stream_r=new RewriteRuleTokenStream(adaptor,"token r",r);
                    RewriteRuleTokenStream stream_l=new RewriteRuleTokenStream(adaptor,"token l",l);
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (XQDTCommonTree)adaptor.nil();
                    // 1002:17: -> ^( SequenceType ^( EmptySequenceTest $k $l $r) )
                    {
                        // XQueryParser.g:1002:20: ^( SequenceType ^( EmptySequenceTest $k $l $r) )
                        {
                        XQDTCommonTree root_1 = (XQDTCommonTree)adaptor.nil();
                        root_1 = (XQDTCommonTree)adaptor.becomeRoot((XQDTCommonTree)adaptor.create(SequenceType, "SequenceType"), root_1);

                        // XQueryParser.g:1002:35: ^( EmptySequenceTest $k $l $r)
                        {
                        XQDTCommonTree root_2 = (XQDTCommonTree)adaptor.nil();
                        root_2 = (XQDTCommonTree)adaptor.becomeRoot((XQDTCommonTree)adaptor.create(EmptySequenceTest, "EmptySequenceTest"), root_2);

                        adaptor.addChild(root_2, stream_k.nextNode());
                        adaptor.addChild(root_2, stream_l.nextNode());
                        adaptor.addChild(root_2, stream_r.nextNode());

                        adaptor.addChild(root_1, root_2);
                        }

                        adaptor.addChild(root_0, root_1);
                        }

                    }

                    retval.tree = root_0;}
                    }
                    break;
                case 2 :
                    // XQueryParser.g:1003:11: it= p_ItemType ( ( p_OccurrenceIndicator )=>oi= p_OccurrenceIndicator )?
                    {
                    pushFollow(FOLLOW_p_ItemType_in_p_SequenceType8532);
                    it=p_ItemType();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_p_ItemType.add(it.getTree());
                    // XQueryParser.g:1003:25: ( ( p_OccurrenceIndicator )=>oi= p_OccurrenceIndicator )?
                    int alt153=2;
                    alt153 = dfa153.predict(input);
                    switch (alt153) {
                        case 1 :
                            // XQueryParser.g:1003:26: ( p_OccurrenceIndicator )=>oi= p_OccurrenceIndicator
                            {
                            pushFollow(FOLLOW_p_OccurrenceIndicator_in_p_SequenceType8543);
                            oi=p_OccurrenceIndicator();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_p_OccurrenceIndicator.add(oi.getTree());

                            }
                            break;

                    }



                    // AST REWRITE
                    // elements: oi, it
                    // token labels: 
                    // rule labels: oi, it, retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_oi=new RewriteRuleSubtreeStream(adaptor,"rule oi",oi!=null?oi.tree:null);
                    RewriteRuleSubtreeStream stream_it=new RewriteRuleSubtreeStream(adaptor,"rule it",it!=null?it.tree:null);
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (XQDTCommonTree)adaptor.nil();
                    // 1004:17: -> ^( SequenceType $it ( $oi)? )
                    {
                        // XQueryParser.g:1004:20: ^( SequenceType $it ( $oi)? )
                        {
                        XQDTCommonTree root_1 = (XQDTCommonTree)adaptor.nil();
                        root_1 = (XQDTCommonTree)adaptor.becomeRoot((XQDTCommonTree)adaptor.create(SequenceType, "SequenceType"), root_1);

                        adaptor.addChild(root_1, stream_it.nextTree());
                        // XQueryParser.g:1004:39: ( $oi)?
                        if ( stream_oi.hasNext() ) {
                            adaptor.addChild(root_1, stream_oi.nextTree());

                        }
                        stream_oi.reset();

                        adaptor.addChild(root_0, root_1);
                        }

                    }

                    retval.tree = root_0;}
                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (XQDTCommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (XQDTCommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "p_SequenceType"

    public static class p_OccurrenceIndicator_return extends ParserRuleReturnScope {
        XQDTCommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "p_OccurrenceIndicator"
    // XQueryParser.g:1008:1: p_OccurrenceIndicator : ( QUESTION | STAR | PLUS );
    public final XQueryParser.p_OccurrenceIndicator_return p_OccurrenceIndicator() throws RecognitionException {
        XQueryParser.p_OccurrenceIndicator_return retval = new XQueryParser.p_OccurrenceIndicator_return();
        retval.start = input.LT(1);

        XQDTCommonTree root_0 = null;

        CommonToken set442=null;

        XQDTCommonTree set442_tree=null;

        try {
            // XQueryParser.g:1009:9: ( QUESTION | STAR | PLUS )
            // XQueryParser.g:
            {
            root_0 = (XQDTCommonTree)adaptor.nil();

            set442=(CommonToken)input.LT(1);
            if ( (input.LA(1)>=QUESTION && input.LA(1)<=PLUS) ) {
                input.consume();
                if ( state.backtracking==0 ) adaptor.addChild(root_0, (XQDTCommonTree)adaptor.create(set442));
                state.errorRecovery=false;state.failed=false;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                MismatchedSetException mse = new MismatchedSetException(null,input);
                throw mse;
            }


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (XQDTCommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (XQDTCommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "p_OccurrenceIndicator"

    public static class p_ItemType_return extends ParserRuleReturnScope {
        XQDTCommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "p_ItemType"
    // XQueryParser.g:1013:1: p_ItemType : ( p_KindTest -> ^( KindTest p_KindTest ) | {...}? => ( BINARY LPAREN RPAREN ) -> ^( BinaryTest BINARY LPAREN RPAREN ) | ( ITEM LPAREN RPAREN ) -> ^( ItemTest ITEM LPAREN RPAREN ) | p_AtomicType );
    public final XQueryParser.p_ItemType_return p_ItemType() throws RecognitionException {
        XQueryParser.p_ItemType_return retval = new XQueryParser.p_ItemType_return();
        retval.start = input.LT(1);

        XQDTCommonTree root_0 = null;

        CommonToken BINARY444=null;
        CommonToken LPAREN445=null;
        CommonToken RPAREN446=null;
        CommonToken ITEM447=null;
        CommonToken LPAREN448=null;
        CommonToken RPAREN449=null;
        XQueryParser.p_KindTest_return p_KindTest443 = null;

        XQueryParser.p_AtomicType_return p_AtomicType450 = null;


        XQDTCommonTree BINARY444_tree=null;
        XQDTCommonTree LPAREN445_tree=null;
        XQDTCommonTree RPAREN446_tree=null;
        XQDTCommonTree ITEM447_tree=null;
        XQDTCommonTree LPAREN448_tree=null;
        XQDTCommonTree RPAREN449_tree=null;
        RewriteRuleTokenStream stream_RPAREN=new RewriteRuleTokenStream(adaptor,"token RPAREN");
        RewriteRuleTokenStream stream_LPAREN=new RewriteRuleTokenStream(adaptor,"token LPAREN");
        RewriteRuleTokenStream stream_ITEM=new RewriteRuleTokenStream(adaptor,"token ITEM");
        RewriteRuleTokenStream stream_BINARY=new RewriteRuleTokenStream(adaptor,"token BINARY");
        RewriteRuleSubtreeStream stream_p_KindTest=new RewriteRuleSubtreeStream(adaptor,"rule p_KindTest");
        try {
            // XQueryParser.g:1014:9: ( p_KindTest -> ^( KindTest p_KindTest ) | {...}? => ( BINARY LPAREN RPAREN ) -> ^( BinaryTest BINARY LPAREN RPAREN ) | ( ITEM LPAREN RPAREN ) -> ^( ItemTest ITEM LPAREN RPAREN ) | p_AtomicType )
            int alt155=4;
            alt155 = dfa155.predict(input);
            switch (alt155) {
                case 1 :
                    // XQueryParser.g:1014:11: p_KindTest
                    {
                    pushFollow(FOLLOW_p_KindTest_in_p_ItemType8645);
                    p_KindTest443=p_KindTest();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_p_KindTest.add(p_KindTest443.getTree());


                    // AST REWRITE
                    // elements: p_KindTest
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (XQDTCommonTree)adaptor.nil();
                    // 1015:17: -> ^( KindTest p_KindTest )
                    {
                        // XQueryParser.g:1015:20: ^( KindTest p_KindTest )
                        {
                        XQDTCommonTree root_1 = (XQDTCommonTree)adaptor.nil();
                        root_1 = (XQDTCommonTree)adaptor.becomeRoot((XQDTCommonTree)adaptor.create(KindTest, "KindTest"), root_1);

                        adaptor.addChild(root_1, stream_p_KindTest.nextTree());

                        adaptor.addChild(root_0, root_1);
                        }

                    }

                    retval.tree = root_0;}
                    }
                    break;
                case 2 :
                    // XQueryParser.g:1016:11: {...}? => ( BINARY LPAREN RPAREN )
                    {
                    if ( !((lc(MLS))) ) {
                        if (state.backtracking>0) {state.failed=true; return retval;}
                        throw new FailedPredicateException(input, "p_ItemType", "lc(MLS)");
                    }
                    // XQueryParser.g:1016:24: ( BINARY LPAREN RPAREN )
                    // XQueryParser.g:1016:25: BINARY LPAREN RPAREN
                    {
                    BINARY444=(CommonToken)match(input,BINARY,FOLLOW_BINARY_in_p_ItemType8685); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_BINARY.add(BINARY444);

                    LPAREN445=(CommonToken)match(input,LPAREN,FOLLOW_LPAREN_in_p_ItemType8687); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_LPAREN.add(LPAREN445);

                    RPAREN446=(CommonToken)match(input,RPAREN,FOLLOW_RPAREN_in_p_ItemType8689); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_RPAREN.add(RPAREN446);


                    }



                    // AST REWRITE
                    // elements: RPAREN, LPAREN, BINARY
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (XQDTCommonTree)adaptor.nil();
                    // 1017:17: -> ^( BinaryTest BINARY LPAREN RPAREN )
                    {
                        // XQueryParser.g:1017:20: ^( BinaryTest BINARY LPAREN RPAREN )
                        {
                        XQDTCommonTree root_1 = (XQDTCommonTree)adaptor.nil();
                        root_1 = (XQDTCommonTree)adaptor.becomeRoot((XQDTCommonTree)adaptor.create(BinaryTest, "BinaryTest"), root_1);

                        adaptor.addChild(root_1, stream_BINARY.nextNode());
                        adaptor.addChild(root_1, stream_LPAREN.nextNode());
                        adaptor.addChild(root_1, stream_RPAREN.nextNode());

                        adaptor.addChild(root_0, root_1);
                        }

                    }

                    retval.tree = root_0;}
                    }
                    break;
                case 3 :
                    // XQueryParser.g:1018:11: ( ITEM LPAREN RPAREN )
                    {
                    // XQueryParser.g:1018:11: ( ITEM LPAREN RPAREN )
                    // XQueryParser.g:1018:12: ITEM LPAREN RPAREN
                    {
                    ITEM447=(CommonToken)match(input,ITEM,FOLLOW_ITEM_in_p_ItemType8731); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_ITEM.add(ITEM447);

                    LPAREN448=(CommonToken)match(input,LPAREN,FOLLOW_LPAREN_in_p_ItemType8733); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_LPAREN.add(LPAREN448);

                    RPAREN449=(CommonToken)match(input,RPAREN,FOLLOW_RPAREN_in_p_ItemType8735); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_RPAREN.add(RPAREN449);


                    }



                    // AST REWRITE
                    // elements: RPAREN, LPAREN, ITEM
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (XQDTCommonTree)adaptor.nil();
                    // 1019:17: -> ^( ItemTest ITEM LPAREN RPAREN )
                    {
                        // XQueryParser.g:1019:20: ^( ItemTest ITEM LPAREN RPAREN )
                        {
                        XQDTCommonTree root_1 = (XQDTCommonTree)adaptor.nil();
                        root_1 = (XQDTCommonTree)adaptor.becomeRoot((XQDTCommonTree)adaptor.create(ItemTest, "ItemTest"), root_1);

                        adaptor.addChild(root_1, stream_ITEM.nextNode());
                        adaptor.addChild(root_1, stream_LPAREN.nextNode());
                        adaptor.addChild(root_1, stream_RPAREN.nextNode());

                        adaptor.addChild(root_0, root_1);
                        }

                    }

                    retval.tree = root_0;}
                    }
                    break;
                case 4 :
                    // XQueryParser.g:1020:11: p_AtomicType
                    {
                    root_0 = (XQDTCommonTree)adaptor.nil();

                    pushFollow(FOLLOW_p_AtomicType_in_p_ItemType8776);
                    p_AtomicType450=p_AtomicType();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, p_AtomicType450.getTree());

                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (XQDTCommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (XQDTCommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "p_ItemType"

    public static class p_AtomicType_return extends ParserRuleReturnScope {
        XQDTCommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "p_AtomicType"
    // XQueryParser.g:1024:1: p_AtomicType : p_QName -> ^( AtomicType p_QName ) ;
    public final XQueryParser.p_AtomicType_return p_AtomicType() throws RecognitionException {
        XQueryParser.p_AtomicType_return retval = new XQueryParser.p_AtomicType_return();
        retval.start = input.LT(1);

        XQDTCommonTree root_0 = null;

        XQueryParser.p_QName_return p_QName451 = null;


        RewriteRuleSubtreeStream stream_p_QName=new RewriteRuleSubtreeStream(adaptor,"rule p_QName");
        try {
            // XQueryParser.g:1025:9: ( p_QName -> ^( AtomicType p_QName ) )
            // XQueryParser.g:1025:11: p_QName
            {
            pushFollow(FOLLOW_p_QName_in_p_AtomicType8802);
            p_QName451=p_QName();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_p_QName.add(p_QName451.getTree());


            // AST REWRITE
            // elements: p_QName
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (XQDTCommonTree)adaptor.nil();
            // 1026:17: -> ^( AtomicType p_QName )
            {
                // XQueryParser.g:1026:20: ^( AtomicType p_QName )
                {
                XQDTCommonTree root_1 = (XQDTCommonTree)adaptor.nil();
                root_1 = (XQDTCommonTree)adaptor.becomeRoot((XQDTCommonTree)adaptor.create(AtomicType, "AtomicType"), root_1);

                adaptor.addChild(root_1, stream_p_QName.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (XQDTCommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (XQDTCommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "p_AtomicType"

    public static class p_KindTest_return extends ParserRuleReturnScope {
        XQDTCommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "p_KindTest"
    // XQueryParser.g:1030:1: p_KindTest : ( p_DocumentTest | p_ElementTest | p_AttributeTest | p_SchemaElementTest | p_SchemaAttributeTest | p_NamespaceNodeTest | p_PITest | p_CommentTest | p_TextTest | p_AnyKindTest );
    public final XQueryParser.p_KindTest_return p_KindTest() throws RecognitionException {
        XQueryParser.p_KindTest_return retval = new XQueryParser.p_KindTest_return();
        retval.start = input.LT(1);

        XQDTCommonTree root_0 = null;

        XQueryParser.p_DocumentTest_return p_DocumentTest452 = null;

        XQueryParser.p_ElementTest_return p_ElementTest453 = null;

        XQueryParser.p_AttributeTest_return p_AttributeTest454 = null;

        XQueryParser.p_SchemaElementTest_return p_SchemaElementTest455 = null;

        XQueryParser.p_SchemaAttributeTest_return p_SchemaAttributeTest456 = null;

        XQueryParser.p_NamespaceNodeTest_return p_NamespaceNodeTest457 = null;

        XQueryParser.p_PITest_return p_PITest458 = null;

        XQueryParser.p_CommentTest_return p_CommentTest459 = null;

        XQueryParser.p_TextTest_return p_TextTest460 = null;

        XQueryParser.p_AnyKindTest_return p_AnyKindTest461 = null;



        try {
            // XQueryParser.g:1031:9: ( p_DocumentTest | p_ElementTest | p_AttributeTest | p_SchemaElementTest | p_SchemaAttributeTest | p_NamespaceNodeTest | p_PITest | p_CommentTest | p_TextTest | p_AnyKindTest )
            int alt156=10;
            switch ( input.LA(1) ) {
            case DOCUMENT_NODE:
                {
                alt156=1;
                }
                break;
            case ELEMENT:
                {
                alt156=2;
                }
                break;
            case ATTRIBUTE:
                {
                alt156=3;
                }
                break;
            case SCHEMA_ELEMENT:
                {
                alt156=4;
                }
                break;
            case SCHEMA_ATTRIBUTE:
                {
                alt156=5;
                }
                break;
            case NAMESPACE_NODE:
                {
                alt156=6;
                }
                break;
            case PROCESSING_INSTRUCTION:
                {
                alt156=7;
                }
                break;
            case COMMENT:
                {
                alt156=8;
                }
                break;
            case TEXT:
                {
                alt156=9;
                }
                break;
            case NODE:
                {
                alt156=10;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 156, 0, input);

                throw nvae;
            }

            switch (alt156) {
                case 1 :
                    // XQueryParser.g:1031:11: p_DocumentTest
                    {
                    root_0 = (XQDTCommonTree)adaptor.nil();

                    pushFollow(FOLLOW_p_DocumentTest_in_p_KindTest8852);
                    p_DocumentTest452=p_DocumentTest();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, p_DocumentTest452.getTree());

                    }
                    break;
                case 2 :
                    // XQueryParser.g:1032:11: p_ElementTest
                    {
                    root_0 = (XQDTCommonTree)adaptor.nil();

                    pushFollow(FOLLOW_p_ElementTest_in_p_KindTest8864);
                    p_ElementTest453=p_ElementTest();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, p_ElementTest453.getTree());

                    }
                    break;
                case 3 :
                    // XQueryParser.g:1033:11: p_AttributeTest
                    {
                    root_0 = (XQDTCommonTree)adaptor.nil();

                    pushFollow(FOLLOW_p_AttributeTest_in_p_KindTest8876);
                    p_AttributeTest454=p_AttributeTest();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, p_AttributeTest454.getTree());

                    }
                    break;
                case 4 :
                    // XQueryParser.g:1034:11: p_SchemaElementTest
                    {
                    root_0 = (XQDTCommonTree)adaptor.nil();

                    pushFollow(FOLLOW_p_SchemaElementTest_in_p_KindTest8888);
                    p_SchemaElementTest455=p_SchemaElementTest();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, p_SchemaElementTest455.getTree());

                    }
                    break;
                case 5 :
                    // XQueryParser.g:1035:11: p_SchemaAttributeTest
                    {
                    root_0 = (XQDTCommonTree)adaptor.nil();

                    pushFollow(FOLLOW_p_SchemaAttributeTest_in_p_KindTest8900);
                    p_SchemaAttributeTest456=p_SchemaAttributeTest();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, p_SchemaAttributeTest456.getTree());

                    }
                    break;
                case 6 :
                    // XQueryParser.g:1036:11: p_NamespaceNodeTest
                    {
                    root_0 = (XQDTCommonTree)adaptor.nil();

                    pushFollow(FOLLOW_p_NamespaceNodeTest_in_p_KindTest8912);
                    p_NamespaceNodeTest457=p_NamespaceNodeTest();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, p_NamespaceNodeTest457.getTree());

                    }
                    break;
                case 7 :
                    // XQueryParser.g:1037:11: p_PITest
                    {
                    root_0 = (XQDTCommonTree)adaptor.nil();

                    pushFollow(FOLLOW_p_PITest_in_p_KindTest8924);
                    p_PITest458=p_PITest();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, p_PITest458.getTree());

                    }
                    break;
                case 8 :
                    // XQueryParser.g:1038:11: p_CommentTest
                    {
                    root_0 = (XQDTCommonTree)adaptor.nil();

                    pushFollow(FOLLOW_p_CommentTest_in_p_KindTest8936);
                    p_CommentTest459=p_CommentTest();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, p_CommentTest459.getTree());

                    }
                    break;
                case 9 :
                    // XQueryParser.g:1039:11: p_TextTest
                    {
                    root_0 = (XQDTCommonTree)adaptor.nil();

                    pushFollow(FOLLOW_p_TextTest_in_p_KindTest8948);
                    p_TextTest460=p_TextTest();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, p_TextTest460.getTree());

                    }
                    break;
                case 10 :
                    // XQueryParser.g:1040:11: p_AnyKindTest
                    {
                    root_0 = (XQDTCommonTree)adaptor.nil();

                    pushFollow(FOLLOW_p_AnyKindTest_in_p_KindTest8960);
                    p_AnyKindTest461=p_AnyKindTest();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, p_AnyKindTest461.getTree());

                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (XQDTCommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (XQDTCommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "p_KindTest"

    public static class p_AnyKindTest_return extends ParserRuleReturnScope {
        XQDTCommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "p_AnyKindTest"
    // XQueryParser.g:1044:1: p_AnyKindTest : NODE LPAREN RPAREN ;
    public final XQueryParser.p_AnyKindTest_return p_AnyKindTest() throws RecognitionException {
        XQueryParser.p_AnyKindTest_return retval = new XQueryParser.p_AnyKindTest_return();
        retval.start = input.LT(1);

        XQDTCommonTree root_0 = null;

        CommonToken NODE462=null;
        CommonToken LPAREN463=null;
        CommonToken RPAREN464=null;

        XQDTCommonTree NODE462_tree=null;
        XQDTCommonTree LPAREN463_tree=null;
        XQDTCommonTree RPAREN464_tree=null;

        try {
            // XQueryParser.g:1045:9: ( NODE LPAREN RPAREN )
            // XQueryParser.g:1045:13: NODE LPAREN RPAREN
            {
            root_0 = (XQDTCommonTree)adaptor.nil();

            NODE462=(CommonToken)match(input,NODE,FOLLOW_NODE_in_p_AnyKindTest8988); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            NODE462_tree = (XQDTCommonTree)adaptor.create(NODE462);
            adaptor.addChild(root_0, NODE462_tree);
            }
            LPAREN463=(CommonToken)match(input,LPAREN,FOLLOW_LPAREN_in_p_AnyKindTest8990); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            LPAREN463_tree = (XQDTCommonTree)adaptor.create(LPAREN463);
            adaptor.addChild(root_0, LPAREN463_tree);
            }
            RPAREN464=(CommonToken)match(input,RPAREN,FOLLOW_RPAREN_in_p_AnyKindTest8992); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            RPAREN464_tree = (XQDTCommonTree)adaptor.create(RPAREN464);
            adaptor.addChild(root_0, RPAREN464_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (XQDTCommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (XQDTCommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "p_AnyKindTest"

    public static class p_DocumentTest_return extends ParserRuleReturnScope {
        XQDTCommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "p_DocumentTest"
    // XQueryParser.g:1049:1: p_DocumentTest : DOCUMENT_NODE LPAREN ( p_ElementTest | p_SchemaElementTest )? RPAREN ;
    public final XQueryParser.p_DocumentTest_return p_DocumentTest() throws RecognitionException {
        XQueryParser.p_DocumentTest_return retval = new XQueryParser.p_DocumentTest_return();
        retval.start = input.LT(1);

        XQDTCommonTree root_0 = null;

        CommonToken DOCUMENT_NODE465=null;
        CommonToken LPAREN466=null;
        CommonToken RPAREN469=null;
        XQueryParser.p_ElementTest_return p_ElementTest467 = null;

        XQueryParser.p_SchemaElementTest_return p_SchemaElementTest468 = null;


        XQDTCommonTree DOCUMENT_NODE465_tree=null;
        XQDTCommonTree LPAREN466_tree=null;
        XQDTCommonTree RPAREN469_tree=null;

        try {
            // XQueryParser.g:1050:9: ( DOCUMENT_NODE LPAREN ( p_ElementTest | p_SchemaElementTest )? RPAREN )
            // XQueryParser.g:1050:13: DOCUMENT_NODE LPAREN ( p_ElementTest | p_SchemaElementTest )? RPAREN
            {
            root_0 = (XQDTCommonTree)adaptor.nil();

            DOCUMENT_NODE465=(CommonToken)match(input,DOCUMENT_NODE,FOLLOW_DOCUMENT_NODE_in_p_DocumentTest9020); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            DOCUMENT_NODE465_tree = (XQDTCommonTree)adaptor.create(DOCUMENT_NODE465);
            adaptor.addChild(root_0, DOCUMENT_NODE465_tree);
            }
            LPAREN466=(CommonToken)match(input,LPAREN,FOLLOW_LPAREN_in_p_DocumentTest9022); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            LPAREN466_tree = (XQDTCommonTree)adaptor.create(LPAREN466);
            adaptor.addChild(root_0, LPAREN466_tree);
            }
            // XQueryParser.g:1050:34: ( p_ElementTest | p_SchemaElementTest )?
            int alt157=3;
            int LA157_0 = input.LA(1);

            if ( (LA157_0==ELEMENT) ) {
                alt157=1;
            }
            else if ( (LA157_0==SCHEMA_ELEMENT) ) {
                alt157=2;
            }
            switch (alt157) {
                case 1 :
                    // XQueryParser.g:1050:35: p_ElementTest
                    {
                    pushFollow(FOLLOW_p_ElementTest_in_p_DocumentTest9025);
                    p_ElementTest467=p_ElementTest();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, p_ElementTest467.getTree());

                    }
                    break;
                case 2 :
                    // XQueryParser.g:1050:51: p_SchemaElementTest
                    {
                    pushFollow(FOLLOW_p_SchemaElementTest_in_p_DocumentTest9029);
                    p_SchemaElementTest468=p_SchemaElementTest();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, p_SchemaElementTest468.getTree());

                    }
                    break;

            }

            RPAREN469=(CommonToken)match(input,RPAREN,FOLLOW_RPAREN_in_p_DocumentTest9033); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            RPAREN469_tree = (XQDTCommonTree)adaptor.create(RPAREN469);
            adaptor.addChild(root_0, RPAREN469_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (XQDTCommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (XQDTCommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "p_DocumentTest"

    public static class p_TextTest_return extends ParserRuleReturnScope {
        XQDTCommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "p_TextTest"
    // XQueryParser.g:1053:1: p_TextTest : TEXT LPAREN RPAREN ;
    public final XQueryParser.p_TextTest_return p_TextTest() throws RecognitionException {
        XQueryParser.p_TextTest_return retval = new XQueryParser.p_TextTest_return();
        retval.start = input.LT(1);

        XQDTCommonTree root_0 = null;

        CommonToken TEXT470=null;
        CommonToken LPAREN471=null;
        CommonToken RPAREN472=null;

        XQDTCommonTree TEXT470_tree=null;
        XQDTCommonTree LPAREN471_tree=null;
        XQDTCommonTree RPAREN472_tree=null;

        try {
            // XQueryParser.g:1054:9: ( TEXT LPAREN RPAREN )
            // XQueryParser.g:1054:13: TEXT LPAREN RPAREN
            {
            root_0 = (XQDTCommonTree)adaptor.nil();

            TEXT470=(CommonToken)match(input,TEXT,FOLLOW_TEXT_in_p_TextTest9053); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            TEXT470_tree = (XQDTCommonTree)adaptor.create(TEXT470);
            adaptor.addChild(root_0, TEXT470_tree);
            }
            LPAREN471=(CommonToken)match(input,LPAREN,FOLLOW_LPAREN_in_p_TextTest9055); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            LPAREN471_tree = (XQDTCommonTree)adaptor.create(LPAREN471);
            adaptor.addChild(root_0, LPAREN471_tree);
            }
            RPAREN472=(CommonToken)match(input,RPAREN,FOLLOW_RPAREN_in_p_TextTest9057); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            RPAREN472_tree = (XQDTCommonTree)adaptor.create(RPAREN472);
            adaptor.addChild(root_0, RPAREN472_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (XQDTCommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (XQDTCommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "p_TextTest"

    public static class p_CommentTest_return extends ParserRuleReturnScope {
        XQDTCommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "p_CommentTest"
    // XQueryParser.g:1058:1: p_CommentTest : COMMENT LPAREN RPAREN ;
    public final XQueryParser.p_CommentTest_return p_CommentTest() throws RecognitionException {
        XQueryParser.p_CommentTest_return retval = new XQueryParser.p_CommentTest_return();
        retval.start = input.LT(1);

        XQDTCommonTree root_0 = null;

        CommonToken COMMENT473=null;
        CommonToken LPAREN474=null;
        CommonToken RPAREN475=null;

        XQDTCommonTree COMMENT473_tree=null;
        XQDTCommonTree LPAREN474_tree=null;
        XQDTCommonTree RPAREN475_tree=null;

        try {
            // XQueryParser.g:1059:9: ( COMMENT LPAREN RPAREN )
            // XQueryParser.g:1059:13: COMMENT LPAREN RPAREN
            {
            root_0 = (XQDTCommonTree)adaptor.nil();

            COMMENT473=(CommonToken)match(input,COMMENT,FOLLOW_COMMENT_in_p_CommentTest9085); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            COMMENT473_tree = (XQDTCommonTree)adaptor.create(COMMENT473);
            adaptor.addChild(root_0, COMMENT473_tree);
            }
            LPAREN474=(CommonToken)match(input,LPAREN,FOLLOW_LPAREN_in_p_CommentTest9087); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            LPAREN474_tree = (XQDTCommonTree)adaptor.create(LPAREN474);
            adaptor.addChild(root_0, LPAREN474_tree);
            }
            RPAREN475=(CommonToken)match(input,RPAREN,FOLLOW_RPAREN_in_p_CommentTest9089); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            RPAREN475_tree = (XQDTCommonTree)adaptor.create(RPAREN475);
            adaptor.addChild(root_0, RPAREN475_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (XQDTCommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (XQDTCommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "p_CommentTest"

    public static class p_NamespaceNodeTest_return extends ParserRuleReturnScope {
        XQDTCommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "p_NamespaceNodeTest"
    // XQueryParser.g:1063:1: p_NamespaceNodeTest : NAMESPACE_NODE LPAREN RPAREN ;
    public final XQueryParser.p_NamespaceNodeTest_return p_NamespaceNodeTest() throws RecognitionException {
        XQueryParser.p_NamespaceNodeTest_return retval = new XQueryParser.p_NamespaceNodeTest_return();
        retval.start = input.LT(1);

        XQDTCommonTree root_0 = null;

        CommonToken NAMESPACE_NODE476=null;
        CommonToken LPAREN477=null;
        CommonToken RPAREN478=null;

        XQDTCommonTree NAMESPACE_NODE476_tree=null;
        XQDTCommonTree LPAREN477_tree=null;
        XQDTCommonTree RPAREN478_tree=null;

        try {
            // XQueryParser.g:1064:9: ( NAMESPACE_NODE LPAREN RPAREN )
            // XQueryParser.g:1064:11: NAMESPACE_NODE LPAREN RPAREN
            {
            root_0 = (XQDTCommonTree)adaptor.nil();

            NAMESPACE_NODE476=(CommonToken)match(input,NAMESPACE_NODE,FOLLOW_NAMESPACE_NODE_in_p_NamespaceNodeTest9115); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            NAMESPACE_NODE476_tree = (XQDTCommonTree)adaptor.create(NAMESPACE_NODE476);
            adaptor.addChild(root_0, NAMESPACE_NODE476_tree);
            }
            LPAREN477=(CommonToken)match(input,LPAREN,FOLLOW_LPAREN_in_p_NamespaceNodeTest9117); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            LPAREN477_tree = (XQDTCommonTree)adaptor.create(LPAREN477);
            adaptor.addChild(root_0, LPAREN477_tree);
            }
            RPAREN478=(CommonToken)match(input,RPAREN,FOLLOW_RPAREN_in_p_NamespaceNodeTest9119); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            RPAREN478_tree = (XQDTCommonTree)adaptor.create(RPAREN478);
            adaptor.addChild(root_0, RPAREN478_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (XQDTCommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (XQDTCommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "p_NamespaceNodeTest"

    public static class p_PITest_return extends ParserRuleReturnScope {
        XQDTCommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "p_PITest"
    // XQueryParser.g:1068:1: p_PITest : PROCESSING_INSTRUCTION LPAREN ( p_NCName | p_StringLiteral )? RPAREN ;
    public final XQueryParser.p_PITest_return p_PITest() throws RecognitionException {
        XQueryParser.p_PITest_return retval = new XQueryParser.p_PITest_return();
        retval.start = input.LT(1);

        XQDTCommonTree root_0 = null;

        CommonToken PROCESSING_INSTRUCTION479=null;
        CommonToken LPAREN480=null;
        CommonToken RPAREN483=null;
        XQueryParser.p_NCName_return p_NCName481 = null;

        XQueryParser.p_StringLiteral_return p_StringLiteral482 = null;


        XQDTCommonTree PROCESSING_INSTRUCTION479_tree=null;
        XQDTCommonTree LPAREN480_tree=null;
        XQDTCommonTree RPAREN483_tree=null;

        try {
            // XQueryParser.g:1069:9: ( PROCESSING_INSTRUCTION LPAREN ( p_NCName | p_StringLiteral )? RPAREN )
            // XQueryParser.g:1069:13: PROCESSING_INSTRUCTION LPAREN ( p_NCName | p_StringLiteral )? RPAREN
            {
            root_0 = (XQDTCommonTree)adaptor.nil();

            PROCESSING_INSTRUCTION479=(CommonToken)match(input,PROCESSING_INSTRUCTION,FOLLOW_PROCESSING_INSTRUCTION_in_p_PITest9147); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            PROCESSING_INSTRUCTION479_tree = (XQDTCommonTree)adaptor.create(PROCESSING_INSTRUCTION479);
            adaptor.addChild(root_0, PROCESSING_INSTRUCTION479_tree);
            }
            LPAREN480=(CommonToken)match(input,LPAREN,FOLLOW_LPAREN_in_p_PITest9149); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            LPAREN480_tree = (XQDTCommonTree)adaptor.create(LPAREN480);
            adaptor.addChild(root_0, LPAREN480_tree);
            }
            // XQueryParser.g:1069:43: ( p_NCName | p_StringLiteral )?
            int alt158=3;
            int LA158_0 = input.LA(1);

            if ( ((LA158_0>=ANCESTOR && LA158_0<=EXIT)||(LA158_0>=SEQUENTIAL && LA158_0<=QUOT_ER)||LA158_0==L_NCName) ) {
                alt158=1;
            }
            else if ( ((LA158_0>=APOS && LA158_0<=QUOT)) ) {
                alt158=2;
            }
            switch (alt158) {
                case 1 :
                    // XQueryParser.g:1069:44: p_NCName
                    {
                    pushFollow(FOLLOW_p_NCName_in_p_PITest9152);
                    p_NCName481=p_NCName();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, p_NCName481.getTree());

                    }
                    break;
                case 2 :
                    // XQueryParser.g:1069:55: p_StringLiteral
                    {
                    pushFollow(FOLLOW_p_StringLiteral_in_p_PITest9156);
                    p_StringLiteral482=p_StringLiteral();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, p_StringLiteral482.getTree());

                    }
                    break;

            }

            RPAREN483=(CommonToken)match(input,RPAREN,FOLLOW_RPAREN_in_p_PITest9160); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            RPAREN483_tree = (XQDTCommonTree)adaptor.create(RPAREN483);
            adaptor.addChild(root_0, RPAREN483_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (XQDTCommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (XQDTCommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "p_PITest"

    public static class p_AttributeTest_return extends ParserRuleReturnScope {
        XQDTCommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "p_AttributeTest"
    // XQueryParser.g:1073:1: p_AttributeTest : ATTRIBUTE LPAREN ( p_AttribNameOrWildcard ( COMMA p_TypeName )? )? RPAREN ;
    public final XQueryParser.p_AttributeTest_return p_AttributeTest() throws RecognitionException {
        XQueryParser.p_AttributeTest_return retval = new XQueryParser.p_AttributeTest_return();
        retval.start = input.LT(1);

        XQDTCommonTree root_0 = null;

        CommonToken ATTRIBUTE484=null;
        CommonToken LPAREN485=null;
        CommonToken COMMA487=null;
        CommonToken RPAREN489=null;
        XQueryParser.p_AttribNameOrWildcard_return p_AttribNameOrWildcard486 = null;

        XQueryParser.p_TypeName_return p_TypeName488 = null;


        XQDTCommonTree ATTRIBUTE484_tree=null;
        XQDTCommonTree LPAREN485_tree=null;
        XQDTCommonTree COMMA487_tree=null;
        XQDTCommonTree RPAREN489_tree=null;

        try {
            // XQueryParser.g:1074:9: ( ATTRIBUTE LPAREN ( p_AttribNameOrWildcard ( COMMA p_TypeName )? )? RPAREN )
            // XQueryParser.g:1074:13: ATTRIBUTE LPAREN ( p_AttribNameOrWildcard ( COMMA p_TypeName )? )? RPAREN
            {
            root_0 = (XQDTCommonTree)adaptor.nil();

            ATTRIBUTE484=(CommonToken)match(input,ATTRIBUTE,FOLLOW_ATTRIBUTE_in_p_AttributeTest9188); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            ATTRIBUTE484_tree = (XQDTCommonTree)adaptor.create(ATTRIBUTE484);
            adaptor.addChild(root_0, ATTRIBUTE484_tree);
            }
            LPAREN485=(CommonToken)match(input,LPAREN,FOLLOW_LPAREN_in_p_AttributeTest9190); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            LPAREN485_tree = (XQDTCommonTree)adaptor.create(LPAREN485);
            adaptor.addChild(root_0, LPAREN485_tree);
            }
            // XQueryParser.g:1074:30: ( p_AttribNameOrWildcard ( COMMA p_TypeName )? )?
            int alt160=2;
            int LA160_0 = input.LA(1);

            if ( ((LA160_0>=ANCESTOR && LA160_0<=EXIT)||(LA160_0>=SEQUENTIAL && LA160_0<=QUOT_ER)||LA160_0==STAR||LA160_0==L_NCName) ) {
                alt160=1;
            }
            switch (alt160) {
                case 1 :
                    // XQueryParser.g:1074:31: p_AttribNameOrWildcard ( COMMA p_TypeName )?
                    {
                    pushFollow(FOLLOW_p_AttribNameOrWildcard_in_p_AttributeTest9193);
                    p_AttribNameOrWildcard486=p_AttribNameOrWildcard();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, p_AttribNameOrWildcard486.getTree());
                    // XQueryParser.g:1074:54: ( COMMA p_TypeName )?
                    int alt159=2;
                    int LA159_0 = input.LA(1);

                    if ( (LA159_0==COMMA) ) {
                        alt159=1;
                    }
                    switch (alt159) {
                        case 1 :
                            // XQueryParser.g:1074:55: COMMA p_TypeName
                            {
                            COMMA487=(CommonToken)match(input,COMMA,FOLLOW_COMMA_in_p_AttributeTest9196); if (state.failed) return retval;
                            if ( state.backtracking==0 ) {
                            COMMA487_tree = (XQDTCommonTree)adaptor.create(COMMA487);
                            adaptor.addChild(root_0, COMMA487_tree);
                            }
                            pushFollow(FOLLOW_p_TypeName_in_p_AttributeTest9198);
                            p_TypeName488=p_TypeName();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) adaptor.addChild(root_0, p_TypeName488.getTree());

                            }
                            break;

                    }


                    }
                    break;

            }

            RPAREN489=(CommonToken)match(input,RPAREN,FOLLOW_RPAREN_in_p_AttributeTest9204); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            RPAREN489_tree = (XQDTCommonTree)adaptor.create(RPAREN489);
            adaptor.addChild(root_0, RPAREN489_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (XQDTCommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (XQDTCommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "p_AttributeTest"

    public static class p_AttribNameOrWildcard_return extends ParserRuleReturnScope {
        XQDTCommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "p_AttribNameOrWildcard"
    // XQueryParser.g:1078:1: p_AttribNameOrWildcard : ( p_QName | STAR );
    public final XQueryParser.p_AttribNameOrWildcard_return p_AttribNameOrWildcard() throws RecognitionException {
        XQueryParser.p_AttribNameOrWildcard_return retval = new XQueryParser.p_AttribNameOrWildcard_return();
        retval.start = input.LT(1);

        XQDTCommonTree root_0 = null;

        CommonToken STAR491=null;
        XQueryParser.p_QName_return p_QName490 = null;


        XQDTCommonTree STAR491_tree=null;

        try {
            // XQueryParser.g:1079:9: ( p_QName | STAR )
            int alt161=2;
            int LA161_0 = input.LA(1);

            if ( ((LA161_0>=ANCESTOR && LA161_0<=EXIT)||(LA161_0>=SEQUENTIAL && LA161_0<=QUOT_ER)||LA161_0==L_NCName) ) {
                alt161=1;
            }
            else if ( (LA161_0==STAR) ) {
                alt161=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 161, 0, input);

                throw nvae;
            }
            switch (alt161) {
                case 1 :
                    // XQueryParser.g:1079:13: p_QName
                    {
                    root_0 = (XQDTCommonTree)adaptor.nil();

                    pushFollow(FOLLOW_p_QName_in_p_AttribNameOrWildcard9234);
                    p_QName490=p_QName();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, p_QName490.getTree());

                    }
                    break;
                case 2 :
                    // XQueryParser.g:1079:23: STAR
                    {
                    root_0 = (XQDTCommonTree)adaptor.nil();

                    STAR491=(CommonToken)match(input,STAR,FOLLOW_STAR_in_p_AttribNameOrWildcard9238); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    STAR491_tree = (XQDTCommonTree)adaptor.create(STAR491);
                    adaptor.addChild(root_0, STAR491_tree);
                    }

                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (XQDTCommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (XQDTCommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "p_AttribNameOrWildcard"

    public static class p_SchemaAttributeTest_return extends ParserRuleReturnScope {
        XQDTCommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "p_SchemaAttributeTest"
    // XQueryParser.g:1083:1: p_SchemaAttributeTest : SCHEMA_ATTRIBUTE LPAREN p_AttributeDeclaration RPAREN ;
    public final XQueryParser.p_SchemaAttributeTest_return p_SchemaAttributeTest() throws RecognitionException {
        XQueryParser.p_SchemaAttributeTest_return retval = new XQueryParser.p_SchemaAttributeTest_return();
        retval.start = input.LT(1);

        XQDTCommonTree root_0 = null;

        CommonToken SCHEMA_ATTRIBUTE492=null;
        CommonToken LPAREN493=null;
        CommonToken RPAREN495=null;
        XQueryParser.p_AttributeDeclaration_return p_AttributeDeclaration494 = null;


        XQDTCommonTree SCHEMA_ATTRIBUTE492_tree=null;
        XQDTCommonTree LPAREN493_tree=null;
        XQDTCommonTree RPAREN495_tree=null;

        try {
            // XQueryParser.g:1084:9: ( SCHEMA_ATTRIBUTE LPAREN p_AttributeDeclaration RPAREN )
            // XQueryParser.g:1084:13: SCHEMA_ATTRIBUTE LPAREN p_AttributeDeclaration RPAREN
            {
            root_0 = (XQDTCommonTree)adaptor.nil();

            SCHEMA_ATTRIBUTE492=(CommonToken)match(input,SCHEMA_ATTRIBUTE,FOLLOW_SCHEMA_ATTRIBUTE_in_p_SchemaAttributeTest9266); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            SCHEMA_ATTRIBUTE492_tree = (XQDTCommonTree)adaptor.create(SCHEMA_ATTRIBUTE492);
            adaptor.addChild(root_0, SCHEMA_ATTRIBUTE492_tree);
            }
            LPAREN493=(CommonToken)match(input,LPAREN,FOLLOW_LPAREN_in_p_SchemaAttributeTest9268); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            LPAREN493_tree = (XQDTCommonTree)adaptor.create(LPAREN493);
            adaptor.addChild(root_0, LPAREN493_tree);
            }
            pushFollow(FOLLOW_p_AttributeDeclaration_in_p_SchemaAttributeTest9270);
            p_AttributeDeclaration494=p_AttributeDeclaration();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, p_AttributeDeclaration494.getTree());
            RPAREN495=(CommonToken)match(input,RPAREN,FOLLOW_RPAREN_in_p_SchemaAttributeTest9272); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            RPAREN495_tree = (XQDTCommonTree)adaptor.create(RPAREN495);
            adaptor.addChild(root_0, RPAREN495_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (XQDTCommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (XQDTCommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "p_SchemaAttributeTest"

    public static class p_AttributeDeclaration_return extends ParserRuleReturnScope {
        XQDTCommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "p_AttributeDeclaration"
    // XQueryParser.g:1088:1: p_AttributeDeclaration : p_AttributeName ;
    public final XQueryParser.p_AttributeDeclaration_return p_AttributeDeclaration() throws RecognitionException {
        XQueryParser.p_AttributeDeclaration_return retval = new XQueryParser.p_AttributeDeclaration_return();
        retval.start = input.LT(1);

        XQDTCommonTree root_0 = null;

        XQueryParser.p_AttributeName_return p_AttributeName496 = null;



        try {
            // XQueryParser.g:1089:9: ( p_AttributeName )
            // XQueryParser.g:1089:11: p_AttributeName
            {
            root_0 = (XQDTCommonTree)adaptor.nil();

            pushFollow(FOLLOW_p_AttributeName_in_p_AttributeDeclaration9298);
            p_AttributeName496=p_AttributeName();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, p_AttributeName496.getTree());

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (XQDTCommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (XQDTCommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "p_AttributeDeclaration"

    public static class p_ElementTest_return extends ParserRuleReturnScope {
        XQDTCommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "p_ElementTest"
    // XQueryParser.g:1093:1: p_ElementTest : ELEMENT LPAREN ( p_ElementNameOrWildcard ( COMMA p_TypeName ( QUESTION )? )? )? RPAREN ;
    public final XQueryParser.p_ElementTest_return p_ElementTest() throws RecognitionException {
        XQueryParser.p_ElementTest_return retval = new XQueryParser.p_ElementTest_return();
        retval.start = input.LT(1);

        XQDTCommonTree root_0 = null;

        CommonToken ELEMENT497=null;
        CommonToken LPAREN498=null;
        CommonToken COMMA500=null;
        CommonToken QUESTION502=null;
        CommonToken RPAREN503=null;
        XQueryParser.p_ElementNameOrWildcard_return p_ElementNameOrWildcard499 = null;

        XQueryParser.p_TypeName_return p_TypeName501 = null;


        XQDTCommonTree ELEMENT497_tree=null;
        XQDTCommonTree LPAREN498_tree=null;
        XQDTCommonTree COMMA500_tree=null;
        XQDTCommonTree QUESTION502_tree=null;
        XQDTCommonTree RPAREN503_tree=null;

        try {
            // XQueryParser.g:1094:9: ( ELEMENT LPAREN ( p_ElementNameOrWildcard ( COMMA p_TypeName ( QUESTION )? )? )? RPAREN )
            // XQueryParser.g:1094:13: ELEMENT LPAREN ( p_ElementNameOrWildcard ( COMMA p_TypeName ( QUESTION )? )? )? RPAREN
            {
            root_0 = (XQDTCommonTree)adaptor.nil();

            ELEMENT497=(CommonToken)match(input,ELEMENT,FOLLOW_ELEMENT_in_p_ElementTest9326); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            ELEMENT497_tree = (XQDTCommonTree)adaptor.create(ELEMENT497);
            adaptor.addChild(root_0, ELEMENT497_tree);
            }
            LPAREN498=(CommonToken)match(input,LPAREN,FOLLOW_LPAREN_in_p_ElementTest9328); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            LPAREN498_tree = (XQDTCommonTree)adaptor.create(LPAREN498);
            adaptor.addChild(root_0, LPAREN498_tree);
            }
            // XQueryParser.g:1094:28: ( p_ElementNameOrWildcard ( COMMA p_TypeName ( QUESTION )? )? )?
            int alt164=2;
            int LA164_0 = input.LA(1);

            if ( ((LA164_0>=ANCESTOR && LA164_0<=EXIT)||(LA164_0>=SEQUENTIAL && LA164_0<=QUOT_ER)||LA164_0==STAR||LA164_0==L_NCName) ) {
                alt164=1;
            }
            switch (alt164) {
                case 1 :
                    // XQueryParser.g:1094:29: p_ElementNameOrWildcard ( COMMA p_TypeName ( QUESTION )? )?
                    {
                    pushFollow(FOLLOW_p_ElementNameOrWildcard_in_p_ElementTest9331);
                    p_ElementNameOrWildcard499=p_ElementNameOrWildcard();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, p_ElementNameOrWildcard499.getTree());
                    // XQueryParser.g:1094:53: ( COMMA p_TypeName ( QUESTION )? )?
                    int alt163=2;
                    int LA163_0 = input.LA(1);

                    if ( (LA163_0==COMMA) ) {
                        alt163=1;
                    }
                    switch (alt163) {
                        case 1 :
                            // XQueryParser.g:1094:54: COMMA p_TypeName ( QUESTION )?
                            {
                            COMMA500=(CommonToken)match(input,COMMA,FOLLOW_COMMA_in_p_ElementTest9334); if (state.failed) return retval;
                            if ( state.backtracking==0 ) {
                            COMMA500_tree = (XQDTCommonTree)adaptor.create(COMMA500);
                            adaptor.addChild(root_0, COMMA500_tree);
                            }
                            pushFollow(FOLLOW_p_TypeName_in_p_ElementTest9336);
                            p_TypeName501=p_TypeName();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) adaptor.addChild(root_0, p_TypeName501.getTree());
                            // XQueryParser.g:1094:71: ( QUESTION )?
                            int alt162=2;
                            int LA162_0 = input.LA(1);

                            if ( (LA162_0==QUESTION) ) {
                                alt162=1;
                            }
                            switch (alt162) {
                                case 1 :
                                    // XQueryParser.g:1094:71: QUESTION
                                    {
                                    QUESTION502=(CommonToken)match(input,QUESTION,FOLLOW_QUESTION_in_p_ElementTest9338); if (state.failed) return retval;
                                    if ( state.backtracking==0 ) {
                                    QUESTION502_tree = (XQDTCommonTree)adaptor.create(QUESTION502);
                                    adaptor.addChild(root_0, QUESTION502_tree);
                                    }

                                    }
                                    break;

                            }


                            }
                            break;

                    }


                    }
                    break;

            }

            RPAREN503=(CommonToken)match(input,RPAREN,FOLLOW_RPAREN_in_p_ElementTest9345); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            RPAREN503_tree = (XQDTCommonTree)adaptor.create(RPAREN503);
            adaptor.addChild(root_0, RPAREN503_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (XQDTCommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (XQDTCommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "p_ElementTest"

    public static class p_ElementNameOrWildcard_return extends ParserRuleReturnScope {
        XQDTCommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "p_ElementNameOrWildcard"
    // XQueryParser.g:1098:1: p_ElementNameOrWildcard : ( p_QName | STAR );
    public final XQueryParser.p_ElementNameOrWildcard_return p_ElementNameOrWildcard() throws RecognitionException {
        XQueryParser.p_ElementNameOrWildcard_return retval = new XQueryParser.p_ElementNameOrWildcard_return();
        retval.start = input.LT(1);

        XQDTCommonTree root_0 = null;

        CommonToken STAR505=null;
        XQueryParser.p_QName_return p_QName504 = null;


        XQDTCommonTree STAR505_tree=null;

        try {
            // XQueryParser.g:1099:9: ( p_QName | STAR )
            int alt165=2;
            int LA165_0 = input.LA(1);

            if ( ((LA165_0>=ANCESTOR && LA165_0<=EXIT)||(LA165_0>=SEQUENTIAL && LA165_0<=QUOT_ER)||LA165_0==L_NCName) ) {
                alt165=1;
            }
            else if ( (LA165_0==STAR) ) {
                alt165=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 165, 0, input);

                throw nvae;
            }
            switch (alt165) {
                case 1 :
                    // XQueryParser.g:1099:13: p_QName
                    {
                    root_0 = (XQDTCommonTree)adaptor.nil();

                    pushFollow(FOLLOW_p_QName_in_p_ElementNameOrWildcard9373);
                    p_QName504=p_QName();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, p_QName504.getTree());

                    }
                    break;
                case 2 :
                    // XQueryParser.g:1099:23: STAR
                    {
                    root_0 = (XQDTCommonTree)adaptor.nil();

                    STAR505=(CommonToken)match(input,STAR,FOLLOW_STAR_in_p_ElementNameOrWildcard9377); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    STAR505_tree = (XQDTCommonTree)adaptor.create(STAR505);
                    adaptor.addChild(root_0, STAR505_tree);
                    }

                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (XQDTCommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (XQDTCommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "p_ElementNameOrWildcard"

    public static class p_SchemaElementTest_return extends ParserRuleReturnScope {
        XQDTCommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "p_SchemaElementTest"
    // XQueryParser.g:1102:1: p_SchemaElementTest : SCHEMA_ELEMENT LPAREN p_ElementDeclaration RPAREN ;
    public final XQueryParser.p_SchemaElementTest_return p_SchemaElementTest() throws RecognitionException {
        XQueryParser.p_SchemaElementTest_return retval = new XQueryParser.p_SchemaElementTest_return();
        retval.start = input.LT(1);

        XQDTCommonTree root_0 = null;

        CommonToken SCHEMA_ELEMENT506=null;
        CommonToken LPAREN507=null;
        CommonToken RPAREN509=null;
        XQueryParser.p_ElementDeclaration_return p_ElementDeclaration508 = null;


        XQDTCommonTree SCHEMA_ELEMENT506_tree=null;
        XQDTCommonTree LPAREN507_tree=null;
        XQDTCommonTree RPAREN509_tree=null;

        try {
            // XQueryParser.g:1103:9: ( SCHEMA_ELEMENT LPAREN p_ElementDeclaration RPAREN )
            // XQueryParser.g:1103:13: SCHEMA_ELEMENT LPAREN p_ElementDeclaration RPAREN
            {
            root_0 = (XQDTCommonTree)adaptor.nil();

            SCHEMA_ELEMENT506=(CommonToken)match(input,SCHEMA_ELEMENT,FOLLOW_SCHEMA_ELEMENT_in_p_SchemaElementTest9397); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            SCHEMA_ELEMENT506_tree = (XQDTCommonTree)adaptor.create(SCHEMA_ELEMENT506);
            adaptor.addChild(root_0, SCHEMA_ELEMENT506_tree);
            }
            LPAREN507=(CommonToken)match(input,LPAREN,FOLLOW_LPAREN_in_p_SchemaElementTest9399); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            LPAREN507_tree = (XQDTCommonTree)adaptor.create(LPAREN507);
            adaptor.addChild(root_0, LPAREN507_tree);
            }
            pushFollow(FOLLOW_p_ElementDeclaration_in_p_SchemaElementTest9401);
            p_ElementDeclaration508=p_ElementDeclaration();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, p_ElementDeclaration508.getTree());
            RPAREN509=(CommonToken)match(input,RPAREN,FOLLOW_RPAREN_in_p_SchemaElementTest9403); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            RPAREN509_tree = (XQDTCommonTree)adaptor.create(RPAREN509);
            adaptor.addChild(root_0, RPAREN509_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (XQDTCommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (XQDTCommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "p_SchemaElementTest"

    public static class p_ElementDeclaration_return extends ParserRuleReturnScope {
        XQDTCommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "p_ElementDeclaration"
    // XQueryParser.g:1107:1: p_ElementDeclaration : p_ElementName ;
    public final XQueryParser.p_ElementDeclaration_return p_ElementDeclaration() throws RecognitionException {
        XQueryParser.p_ElementDeclaration_return retval = new XQueryParser.p_ElementDeclaration_return();
        retval.start = input.LT(1);

        XQDTCommonTree root_0 = null;

        XQueryParser.p_ElementName_return p_ElementName510 = null;



        try {
            // XQueryParser.g:1108:9: ( p_ElementName )
            // XQueryParser.g:1108:11: p_ElementName
            {
            root_0 = (XQDTCommonTree)adaptor.nil();

            pushFollow(FOLLOW_p_ElementName_in_p_ElementDeclaration9429);
            p_ElementName510=p_ElementName();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, p_ElementName510.getTree());

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (XQDTCommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (XQDTCommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "p_ElementDeclaration"

    public static class p_AttributeName_return extends ParserRuleReturnScope {
        XQDTCommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "p_AttributeName"
    // XQueryParser.g:1112:1: p_AttributeName : p_QName ;
    public final XQueryParser.p_AttributeName_return p_AttributeName() throws RecognitionException {
        XQueryParser.p_AttributeName_return retval = new XQueryParser.p_AttributeName_return();
        retval.start = input.LT(1);

        XQDTCommonTree root_0 = null;

        XQueryParser.p_QName_return p_QName511 = null;



        try {
            // XQueryParser.g:1113:9: ( p_QName )
            // XQueryParser.g:1113:13: p_QName
            {
            root_0 = (XQDTCommonTree)adaptor.nil();

            pushFollow(FOLLOW_p_QName_in_p_AttributeName9457);
            p_QName511=p_QName();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, p_QName511.getTree());

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (XQDTCommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (XQDTCommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "p_AttributeName"

    public static class p_ElementName_return extends ParserRuleReturnScope {
        XQDTCommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "p_ElementName"
    // XQueryParser.g:1117:1: p_ElementName : p_QName ;
    public final XQueryParser.p_ElementName_return p_ElementName() throws RecognitionException {
        XQueryParser.p_ElementName_return retval = new XQueryParser.p_ElementName_return();
        retval.start = input.LT(1);

        XQDTCommonTree root_0 = null;

        XQueryParser.p_QName_return p_QName512 = null;



        try {
            // XQueryParser.g:1118:9: ( p_QName )
            // XQueryParser.g:1118:13: p_QName
            {
            root_0 = (XQDTCommonTree)adaptor.nil();

            pushFollow(FOLLOW_p_QName_in_p_ElementName9485);
            p_QName512=p_QName();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, p_QName512.getTree());

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (XQDTCommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (XQDTCommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "p_ElementName"

    public static class p_TypeName_return extends ParserRuleReturnScope {
        XQDTCommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "p_TypeName"
    // XQueryParser.g:1122:1: p_TypeName : p_QName ;
    public final XQueryParser.p_TypeName_return p_TypeName() throws RecognitionException {
        XQueryParser.p_TypeName_return retval = new XQueryParser.p_TypeName_return();
        retval.start = input.LT(1);

        XQDTCommonTree root_0 = null;

        XQueryParser.p_QName_return p_QName513 = null;



        try {
            // XQueryParser.g:1123:9: ( p_QName )
            // XQueryParser.g:1123:13: p_QName
            {
            root_0 = (XQDTCommonTree)adaptor.nil();

            pushFollow(FOLLOW_p_QName_in_p_TypeName9513);
            p_QName513=p_QName();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, p_QName513.getTree());

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (XQDTCommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (XQDTCommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "p_TypeName"

    public static class p_TryCatchExpr_return extends ParserRuleReturnScope {
        XQDTCommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "p_TryCatchExpr"
    // XQueryParser.g:1133:1: p_TryCatchExpr : p_TryClause ( p_CatchClause )+ ;
    public final XQueryParser.p_TryCatchExpr_return p_TryCatchExpr() throws RecognitionException {
        XQueryParser.p_TryCatchExpr_return retval = new XQueryParser.p_TryCatchExpr_return();
        retval.start = input.LT(1);

        XQDTCommonTree root_0 = null;

        XQueryParser.p_TryClause_return p_TryClause514 = null;

        XQueryParser.p_CatchClause_return p_CatchClause515 = null;



        try {
            // XQueryParser.g:1134:9: ( p_TryClause ( p_CatchClause )+ )
            // XQueryParser.g:1134:11: p_TryClause ( p_CatchClause )+
            {
            root_0 = (XQDTCommonTree)adaptor.nil();

            pushFollow(FOLLOW_p_TryClause_in_p_TryCatchExpr9545);
            p_TryClause514=p_TryClause();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, p_TryClause514.getTree());
            // XQueryParser.g:1134:23: ( p_CatchClause )+
            int cnt166=0;
            loop166:
            do {
                int alt166=2;
                int LA166_0 = input.LA(1);

                if ( (LA166_0==CATCH) ) {
                    alt166=1;
                }


                switch (alt166) {
            	case 1 :
            	    // XQueryParser.g:1134:23: p_CatchClause
            	    {
            	    pushFollow(FOLLOW_p_CatchClause_in_p_TryCatchExpr9547);
            	    p_CatchClause515=p_CatchClause();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, p_CatchClause515.getTree());

            	    }
            	    break;

            	default :
            	    if ( cnt166 >= 1 ) break loop166;
            	    if (state.backtracking>0) {state.failed=true; return retval;}
                        EarlyExitException eee =
                            new EarlyExitException(166, input);
                        throw eee;
                }
                cnt166++;
            } while (true);


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (XQDTCommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (XQDTCommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "p_TryCatchExpr"

    public static class p_TryClause_return extends ParserRuleReturnScope {
        XQDTCommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "p_TryClause"
    // XQueryParser.g:1138:1: p_TryClause : kc= TRY LBRACKET pm_Expr RBRACKET ;
    public final XQueryParser.p_TryClause_return p_TryClause() throws RecognitionException {
        XQueryParser.p_TryClause_return retval = new XQueryParser.p_TryClause_return();
        retval.start = input.LT(1);

        XQDTCommonTree root_0 = null;

        CommonToken kc=null;
        CommonToken LBRACKET516=null;
        CommonToken RBRACKET518=null;
        XQueryParser.pm_Expr_return pm_Expr517 = null;


        XQDTCommonTree kc_tree=null;
        XQDTCommonTree LBRACKET516_tree=null;
        XQDTCommonTree RBRACKET518_tree=null;

        try {
            // XQueryParser.g:1139:9: (kc= TRY LBRACKET pm_Expr RBRACKET )
            // XQueryParser.g:1139:11: kc= TRY LBRACKET pm_Expr RBRACKET
            {
            root_0 = (XQDTCommonTree)adaptor.nil();

            kc=(CommonToken)match(input,TRY,FOLLOW_TRY_in_p_TryClause9576); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            kc_tree = (XQDTCommonTree)adaptor.create(kc);
            adaptor.addChild(root_0, kc_tree);
            }
            if ( state.backtracking==0 ) {
              ak(kc);
            }
            LBRACKET516=(CommonToken)match(input,LBRACKET,FOLLOW_LBRACKET_in_p_TryClause9580); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            LBRACKET516_tree = (XQDTCommonTree)adaptor.create(LBRACKET516);
            adaptor.addChild(root_0, LBRACKET516_tree);
            }
            pushFollow(FOLLOW_pm_Expr_in_p_TryClause9582);
            pm_Expr517=pm_Expr();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, pm_Expr517.getTree());
            RBRACKET518=(CommonToken)match(input,RBRACKET,FOLLOW_RBRACKET_in_p_TryClause9584); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            RBRACKET518_tree = (XQDTCommonTree)adaptor.create(RBRACKET518);
            adaptor.addChild(root_0, RBRACKET518_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (XQDTCommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (XQDTCommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "p_TryClause"

    public static class p_CatchClause_return extends ParserRuleReturnScope {
        XQDTCommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "p_CatchClause"
    // XQueryParser.g:1146:1: p_CatchClause : kc= CATCH p_CatchErrorList ( p_CatchVars )? LBRACKET pm_Expr RBRACKET ;
    public final XQueryParser.p_CatchClause_return p_CatchClause() throws RecognitionException {
        XQueryParser.p_CatchClause_return retval = new XQueryParser.p_CatchClause_return();
        retval.start = input.LT(1);

        XQDTCommonTree root_0 = null;

        CommonToken kc=null;
        CommonToken LBRACKET521=null;
        CommonToken RBRACKET523=null;
        XQueryParser.p_CatchErrorList_return p_CatchErrorList519 = null;

        XQueryParser.p_CatchVars_return p_CatchVars520 = null;

        XQueryParser.pm_Expr_return pm_Expr522 = null;


        XQDTCommonTree kc_tree=null;
        XQDTCommonTree LBRACKET521_tree=null;
        XQDTCommonTree RBRACKET523_tree=null;

        try {
            // XQueryParser.g:1147:9: (kc= CATCH p_CatchErrorList ( p_CatchVars )? LBRACKET pm_Expr RBRACKET )
            // XQueryParser.g:1147:11: kc= CATCH p_CatchErrorList ( p_CatchVars )? LBRACKET pm_Expr RBRACKET
            {
            root_0 = (XQDTCommonTree)adaptor.nil();

            kc=(CommonToken)match(input,CATCH,FOLLOW_CATCH_in_p_CatchClause9615); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            kc_tree = (XQDTCommonTree)adaptor.create(kc);
            adaptor.addChild(root_0, kc_tree);
            }
            if ( state.backtracking==0 ) {
              ak(kc);
            }
            pushFollow(FOLLOW_p_CatchErrorList_in_p_CatchClause9619);
            p_CatchErrorList519=p_CatchErrorList();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, p_CatchErrorList519.getTree());
            // XQueryParser.g:1147:48: ( p_CatchVars )?
            int alt167=2;
            int LA167_0 = input.LA(1);

            if ( (LA167_0==LPAREN) ) {
                alt167=1;
            }
            switch (alt167) {
                case 1 :
                    // XQueryParser.g:1147:48: p_CatchVars
                    {
                    pushFollow(FOLLOW_p_CatchVars_in_p_CatchClause9621);
                    p_CatchVars520=p_CatchVars();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, p_CatchVars520.getTree());

                    }
                    break;

            }

            LBRACKET521=(CommonToken)match(input,LBRACKET,FOLLOW_LBRACKET_in_p_CatchClause9624); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            LBRACKET521_tree = (XQDTCommonTree)adaptor.create(LBRACKET521);
            adaptor.addChild(root_0, LBRACKET521_tree);
            }
            pushFollow(FOLLOW_pm_Expr_in_p_CatchClause9626);
            pm_Expr522=pm_Expr();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, pm_Expr522.getTree());
            RBRACKET523=(CommonToken)match(input,RBRACKET,FOLLOW_RBRACKET_in_p_CatchClause9628); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            RBRACKET523_tree = (XQDTCommonTree)adaptor.create(RBRACKET523);
            adaptor.addChild(root_0, RBRACKET523_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (XQDTCommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (XQDTCommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "p_CatchClause"

    public static class p_CatchErrorList_return extends ParserRuleReturnScope {
        XQDTCommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "p_CatchErrorList"
    // XQueryParser.g:1151:1: p_CatchErrorList : ( p_NameTest ( VBAR p_NameTest )* | {...}? => () );
    public final XQueryParser.p_CatchErrorList_return p_CatchErrorList() throws RecognitionException {
        XQueryParser.p_CatchErrorList_return retval = new XQueryParser.p_CatchErrorList_return();
        retval.start = input.LT(1);

        XQDTCommonTree root_0 = null;

        CommonToken VBAR525=null;
        XQueryParser.p_NameTest_return p_NameTest524 = null;

        XQueryParser.p_NameTest_return p_NameTest526 = null;


        XQDTCommonTree VBAR525_tree=null;

        try {
            // XQueryParser.g:1152:9: ( p_NameTest ( VBAR p_NameTest )* | {...}? => () )
            int alt169=2;
            int LA169_0 = input.LA(1);

            if ( ((LA169_0>=ANCESTOR && LA169_0<=EXIT)||(LA169_0>=SEQUENTIAL && LA169_0<=QUOT_ER)||LA169_0==STAR||LA169_0==L_NCName) ) {
                alt169=1;
            }
            else if ( (LA169_0==LPAREN||LA169_0==LBRACKET) && ((lc(MLS)))) {
                alt169=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 169, 0, input);

                throw nvae;
            }
            switch (alt169) {
                case 1 :
                    // XQueryParser.g:1152:11: p_NameTest ( VBAR p_NameTest )*
                    {
                    root_0 = (XQDTCommonTree)adaptor.nil();

                    pushFollow(FOLLOW_p_NameTest_in_p_CatchErrorList9654);
                    p_NameTest524=p_NameTest();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, p_NameTest524.getTree());
                    // XQueryParser.g:1152:22: ( VBAR p_NameTest )*
                    loop168:
                    do {
                        int alt168=2;
                        int LA168_0 = input.LA(1);

                        if ( (LA168_0==VBAR) ) {
                            alt168=1;
                        }


                        switch (alt168) {
                    	case 1 :
                    	    // XQueryParser.g:1152:23: VBAR p_NameTest
                    	    {
                    	    VBAR525=(CommonToken)match(input,VBAR,FOLLOW_VBAR_in_p_CatchErrorList9657); if (state.failed) return retval;
                    	    if ( state.backtracking==0 ) {
                    	    VBAR525_tree = (XQDTCommonTree)adaptor.create(VBAR525);
                    	    adaptor.addChild(root_0, VBAR525_tree);
                    	    }
                    	    pushFollow(FOLLOW_p_NameTest_in_p_CatchErrorList9659);
                    	    p_NameTest526=p_NameTest();

                    	    state._fsp--;
                    	    if (state.failed) return retval;
                    	    if ( state.backtracking==0 ) adaptor.addChild(root_0, p_NameTest526.getTree());

                    	    }
                    	    break;

                    	default :
                    	    break loop168;
                        }
                    } while (true);


                    }
                    break;
                case 2 :
                    // XQueryParser.g:1153:11: {...}? => ()
                    {
                    root_0 = (XQDTCommonTree)adaptor.nil();

                    if ( !((lc(MLS))) ) {
                        if (state.backtracking>0) {state.failed=true; return retval;}
                        throw new FailedPredicateException(input, "p_CatchErrorList", "lc(MLS)");
                    }
                    // XQueryParser.g:1153:24: ()
                    // XQueryParser.g:1153:38: 
                    {
                    }


                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (XQDTCommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (XQDTCommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "p_CatchErrorList"

    public static class p_CatchVars_return extends ParserRuleReturnScope {
        XQDTCommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "p_CatchVars"
    // XQueryParser.g:1157:2: p_CatchVars : LPAREN DOLLAR p_VarName ( COMMA DOLLAR p_VarName ( COMMA DOLLAR p_VarName )? )? RPAREN ;
    public final XQueryParser.p_CatchVars_return p_CatchVars() throws RecognitionException {
        XQueryParser.p_CatchVars_return retval = new XQueryParser.p_CatchVars_return();
        retval.start = input.LT(1);

        XQDTCommonTree root_0 = null;

        CommonToken LPAREN527=null;
        CommonToken DOLLAR528=null;
        CommonToken COMMA530=null;
        CommonToken DOLLAR531=null;
        CommonToken COMMA533=null;
        CommonToken DOLLAR534=null;
        CommonToken RPAREN536=null;
        XQueryParser.p_VarName_return p_VarName529 = null;

        XQueryParser.p_VarName_return p_VarName532 = null;

        XQueryParser.p_VarName_return p_VarName535 = null;


        XQDTCommonTree LPAREN527_tree=null;
        XQDTCommonTree DOLLAR528_tree=null;
        XQDTCommonTree COMMA530_tree=null;
        XQDTCommonTree DOLLAR531_tree=null;
        XQDTCommonTree COMMA533_tree=null;
        XQDTCommonTree DOLLAR534_tree=null;
        XQDTCommonTree RPAREN536_tree=null;

        try {
            // XQueryParser.g:1158:9: ( LPAREN DOLLAR p_VarName ( COMMA DOLLAR p_VarName ( COMMA DOLLAR p_VarName )? )? RPAREN )
            // XQueryParser.g:1158:11: LPAREN DOLLAR p_VarName ( COMMA DOLLAR p_VarName ( COMMA DOLLAR p_VarName )? )? RPAREN
            {
            root_0 = (XQDTCommonTree)adaptor.nil();

            LPAREN527=(CommonToken)match(input,LPAREN,FOLLOW_LPAREN_in_p_CatchVars9705); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            LPAREN527_tree = (XQDTCommonTree)adaptor.create(LPAREN527);
            adaptor.addChild(root_0, LPAREN527_tree);
            }
            DOLLAR528=(CommonToken)match(input,DOLLAR,FOLLOW_DOLLAR_in_p_CatchVars9707); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            DOLLAR528_tree = (XQDTCommonTree)adaptor.create(DOLLAR528);
            adaptor.addChild(root_0, DOLLAR528_tree);
            }
            pushFollow(FOLLOW_p_VarName_in_p_CatchVars9709);
            p_VarName529=p_VarName();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, p_VarName529.getTree());
            // XQueryParser.g:1158:35: ( COMMA DOLLAR p_VarName ( COMMA DOLLAR p_VarName )? )?
            int alt171=2;
            int LA171_0 = input.LA(1);

            if ( (LA171_0==COMMA) ) {
                alt171=1;
            }
            switch (alt171) {
                case 1 :
                    // XQueryParser.g:1158:36: COMMA DOLLAR p_VarName ( COMMA DOLLAR p_VarName )?
                    {
                    COMMA530=(CommonToken)match(input,COMMA,FOLLOW_COMMA_in_p_CatchVars9712); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    COMMA530_tree = (XQDTCommonTree)adaptor.create(COMMA530);
                    adaptor.addChild(root_0, COMMA530_tree);
                    }
                    DOLLAR531=(CommonToken)match(input,DOLLAR,FOLLOW_DOLLAR_in_p_CatchVars9714); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    DOLLAR531_tree = (XQDTCommonTree)adaptor.create(DOLLAR531);
                    adaptor.addChild(root_0, DOLLAR531_tree);
                    }
                    pushFollow(FOLLOW_p_VarName_in_p_CatchVars9716);
                    p_VarName532=p_VarName();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, p_VarName532.getTree());
                    // XQueryParser.g:1158:59: ( COMMA DOLLAR p_VarName )?
                    int alt170=2;
                    int LA170_0 = input.LA(1);

                    if ( (LA170_0==COMMA) ) {
                        alt170=1;
                    }
                    switch (alt170) {
                        case 1 :
                            // XQueryParser.g:1158:60: COMMA DOLLAR p_VarName
                            {
                            COMMA533=(CommonToken)match(input,COMMA,FOLLOW_COMMA_in_p_CatchVars9719); if (state.failed) return retval;
                            if ( state.backtracking==0 ) {
                            COMMA533_tree = (XQDTCommonTree)adaptor.create(COMMA533);
                            adaptor.addChild(root_0, COMMA533_tree);
                            }
                            DOLLAR534=(CommonToken)match(input,DOLLAR,FOLLOW_DOLLAR_in_p_CatchVars9721); if (state.failed) return retval;
                            if ( state.backtracking==0 ) {
                            DOLLAR534_tree = (XQDTCommonTree)adaptor.create(DOLLAR534);
                            adaptor.addChild(root_0, DOLLAR534_tree);
                            }
                            pushFollow(FOLLOW_p_VarName_in_p_CatchVars9723);
                            p_VarName535=p_VarName();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) adaptor.addChild(root_0, p_VarName535.getTree());

                            }
                            break;

                    }


                    }
                    break;

            }

            RPAREN536=(CommonToken)match(input,RPAREN,FOLLOW_RPAREN_in_p_CatchVars9729); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            RPAREN536_tree = (XQDTCommonTree)adaptor.create(RPAREN536);
            adaptor.addChild(root_0, RPAREN536_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (XQDTCommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (XQDTCommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "p_CatchVars"

    public static class p_StringLiteral_return extends ParserRuleReturnScope {
        XQDTCommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "p_StringLiteral"
    // XQueryParser.g:1184:1: p_StringLiteral : ( QUOT p_QuotStringLiteralContent QUOT -> ^( StringLiteral ( p_QuotStringLiteralContent )* ) | APOS p_AposStringLiteralContent APOS -> ^( StringLiteral ( p_AposStringLiteralContent )* ) );
    public final XQueryParser.p_StringLiteral_return p_StringLiteral() throws RecognitionException {
        XQueryParser.p_StringLiteral_return retval = new XQueryParser.p_StringLiteral_return();
        retval.start = input.LT(1);

        XQDTCommonTree root_0 = null;

        CommonToken QUOT537=null;
        CommonToken QUOT539=null;
        CommonToken APOS540=null;
        CommonToken APOS542=null;
        XQueryParser.p_QuotStringLiteralContent_return p_QuotStringLiteralContent538 = null;

        XQueryParser.p_AposStringLiteralContent_return p_AposStringLiteralContent541 = null;


        XQDTCommonTree QUOT537_tree=null;
        XQDTCommonTree QUOT539_tree=null;
        XQDTCommonTree APOS540_tree=null;
        XQDTCommonTree APOS542_tree=null;
        RewriteRuleTokenStream stream_APOS=new RewriteRuleTokenStream(adaptor,"token APOS");
        RewriteRuleTokenStream stream_QUOT=new RewriteRuleTokenStream(adaptor,"token QUOT");
        RewriteRuleSubtreeStream stream_p_QuotStringLiteralContent=new RewriteRuleSubtreeStream(adaptor,"rule p_QuotStringLiteralContent");
        RewriteRuleSubtreeStream stream_p_AposStringLiteralContent=new RewriteRuleSubtreeStream(adaptor,"rule p_AposStringLiteralContent");
        try {
            // XQueryParser.g:1185:9: ( QUOT p_QuotStringLiteralContent QUOT -> ^( StringLiteral ( p_QuotStringLiteralContent )* ) | APOS p_AposStringLiteralContent APOS -> ^( StringLiteral ( p_AposStringLiteralContent )* ) )
            int alt172=2;
            int LA172_0 = input.LA(1);

            if ( (LA172_0==QUOT) ) {
                alt172=1;
            }
            else if ( (LA172_0==APOS) ) {
                alt172=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 172, 0, input);

                throw nvae;
            }
            switch (alt172) {
                case 1 :
                    // XQueryParser.g:1185:11: QUOT p_QuotStringLiteralContent QUOT
                    {
                    QUOT537=(CommonToken)match(input,QUOT,FOLLOW_QUOT_in_p_StringLiteral9778); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_QUOT.add(QUOT537);

                    if ( state.backtracking==0 ) {
                      pushStringLexer(false);
                    }
                    pushFollow(FOLLOW_p_QuotStringLiteralContent_in_p_StringLiteral9782);
                    p_QuotStringLiteralContent538=p_QuotStringLiteralContent();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_p_QuotStringLiteralContent.add(p_QuotStringLiteralContent538.getTree());
                    QUOT539=(CommonToken)match(input,QUOT,FOLLOW_QUOT_in_p_StringLiteral9784); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_QUOT.add(QUOT539);

                    if ( state.backtracking==0 ) {
                       popLexer(); 
                    }


                    // AST REWRITE
                    // elements: p_QuotStringLiteralContent
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (XQDTCommonTree)adaptor.nil();
                    // 1186:17: -> ^( StringLiteral ( p_QuotStringLiteralContent )* )
                    {
                        // XQueryParser.g:1186:20: ^( StringLiteral ( p_QuotStringLiteralContent )* )
                        {
                        XQDTCommonTree root_1 = (XQDTCommonTree)adaptor.nil();
                        root_1 = (XQDTCommonTree)adaptor.becomeRoot((XQDTCommonTree)adaptor.create(StringLiteral, "StringLiteral"), root_1);

                        // XQueryParser.g:1186:36: ( p_QuotStringLiteralContent )*
                        while ( stream_p_QuotStringLiteralContent.hasNext() ) {
                            adaptor.addChild(root_1, stream_p_QuotStringLiteralContent.nextTree());

                        }
                        stream_p_QuotStringLiteralContent.reset();

                        adaptor.addChild(root_0, root_1);
                        }

                    }

                    retval.tree = root_0;}
                    }
                    break;
                case 2 :
                    // XQueryParser.g:1187:13: APOS p_AposStringLiteralContent APOS
                    {
                    APOS540=(CommonToken)match(input,APOS,FOLLOW_APOS_in_p_StringLiteral9825); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_APOS.add(APOS540);

                    if ( state.backtracking==0 ) {
                      pushStringLexer(true);
                    }
                    pushFollow(FOLLOW_p_AposStringLiteralContent_in_p_StringLiteral9829);
                    p_AposStringLiteralContent541=p_AposStringLiteralContent();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_p_AposStringLiteralContent.add(p_AposStringLiteralContent541.getTree());
                    APOS542=(CommonToken)match(input,APOS,FOLLOW_APOS_in_p_StringLiteral9831); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_APOS.add(APOS542);

                    if ( state.backtracking==0 ) {
                       popLexer(); 
                    }


                    // AST REWRITE
                    // elements: p_AposStringLiteralContent
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (XQDTCommonTree)adaptor.nil();
                    // 1188:17: -> ^( StringLiteral ( p_AposStringLiteralContent )* )
                    {
                        // XQueryParser.g:1188:20: ^( StringLiteral ( p_AposStringLiteralContent )* )
                        {
                        XQDTCommonTree root_1 = (XQDTCommonTree)adaptor.nil();
                        root_1 = (XQDTCommonTree)adaptor.becomeRoot((XQDTCommonTree)adaptor.create(StringLiteral, "StringLiteral"), root_1);

                        // XQueryParser.g:1188:36: ( p_AposStringLiteralContent )*
                        while ( stream_p_AposStringLiteralContent.hasNext() ) {
                            adaptor.addChild(root_1, stream_p_AposStringLiteralContent.nextTree());

                        }
                        stream_p_AposStringLiteralContent.reset();

                        adaptor.addChild(root_0, root_1);
                        }

                    }

                    retval.tree = root_0;}
                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (XQDTCommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (XQDTCommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "p_StringLiteral"

    public static class p_QuotStringLiteralContent_return extends ParserRuleReturnScope {
        XQDTCommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "p_QuotStringLiteralContent"
    // XQueryParser.g:1195:1: p_QuotStringLiteralContent : ( ESCAPE_QUOT | L_CharRef | L_PredefinedEntityRef | ~ ( QUOT | AMP ) )* ;
    public final XQueryParser.p_QuotStringLiteralContent_return p_QuotStringLiteralContent() throws RecognitionException {
        XQueryParser.p_QuotStringLiteralContent_return retval = new XQueryParser.p_QuotStringLiteralContent_return();
        retval.start = input.LT(1);

        XQDTCommonTree root_0 = null;

        CommonToken set543=null;

        XQDTCommonTree set543_tree=null;

        try {
            // XQueryParser.g:1196:9: ( ( ESCAPE_QUOT | L_CharRef | L_PredefinedEntityRef | ~ ( QUOT | AMP ) )* )
            // XQueryParser.g:1196:11: ( ESCAPE_QUOT | L_CharRef | L_PredefinedEntityRef | ~ ( QUOT | AMP ) )*
            {
            root_0 = (XQDTCommonTree)adaptor.nil();

            // XQueryParser.g:1196:11: ( ESCAPE_QUOT | L_CharRef | L_PredefinedEntityRef | ~ ( QUOT | AMP ) )*
            loop173:
            do {
                int alt173=2;
                int LA173_0 = input.LA(1);

                if ( ((LA173_0>=L_QuotAttrContentChar && LA173_0<=NOTEQUAL)||(LA173_0>=COMMA && LA173_0<=APOS)||(LA173_0>=NCNameStartChar && LA173_0<=BinaryTest)) ) {
                    alt173=1;
                }


                switch (alt173) {
            	case 1 :
            	    // XQueryParser.g:
            	    {
            	    set543=(CommonToken)input.LT(1);
            	    if ( (input.LA(1)>=L_QuotAttrContentChar && input.LA(1)<=NOTEQUAL)||(input.LA(1)>=COMMA && input.LA(1)<=APOS)||(input.LA(1)>=NCNameStartChar && input.LA(1)<=BinaryTest) ) {
            	        input.consume();
            	        if ( state.backtracking==0 ) adaptor.addChild(root_0, (XQDTCommonTree)adaptor.create(set543));
            	        state.errorRecovery=false;state.failed=false;
            	    }
            	    else {
            	        if (state.backtracking>0) {state.failed=true; return retval;}
            	        MismatchedSetException mse = new MismatchedSetException(null,input);
            	        throw mse;
            	    }


            	    }
            	    break;

            	default :
            	    break loop173;
                }
            } while (true);


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (XQDTCommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (XQDTCommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "p_QuotStringLiteralContent"

    public static class p_AposStringLiteralContent_return extends ParserRuleReturnScope {
        XQDTCommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "p_AposStringLiteralContent"
    // XQueryParser.g:1204:1: p_AposStringLiteralContent : ( ESCAPE_QUOT | L_CharRef | L_PredefinedEntityRef | ~ ( APOS | AMP ) )* ;
    public final XQueryParser.p_AposStringLiteralContent_return p_AposStringLiteralContent() throws RecognitionException {
        XQueryParser.p_AposStringLiteralContent_return retval = new XQueryParser.p_AposStringLiteralContent_return();
        retval.start = input.LT(1);

        XQDTCommonTree root_0 = null;

        CommonToken set544=null;

        XQDTCommonTree set544_tree=null;

        try {
            // XQueryParser.g:1205:9: ( ( ESCAPE_QUOT | L_CharRef | L_PredefinedEntityRef | ~ ( APOS | AMP ) )* )
            // XQueryParser.g:1205:11: ( ESCAPE_QUOT | L_CharRef | L_PredefinedEntityRef | ~ ( APOS | AMP ) )*
            {
            root_0 = (XQDTCommonTree)adaptor.nil();

            // XQueryParser.g:1205:11: ( ESCAPE_QUOT | L_CharRef | L_PredefinedEntityRef | ~ ( APOS | AMP ) )*
            loop174:
            do {
                int alt174=2;
                int LA174_0 = input.LA(1);

                if ( ((LA174_0>=L_QuotAttrContentChar && LA174_0<=NOTEQUAL)||(LA174_0>=COMMA && LA174_0<=CHARREF_HEX)||(LA174_0>=QUOT && LA174_0<=BinaryTest)) ) {
                    alt174=1;
                }


                switch (alt174) {
            	case 1 :
            	    // XQueryParser.g:
            	    {
            	    set544=(CommonToken)input.LT(1);
            	    if ( (input.LA(1)>=L_QuotAttrContentChar && input.LA(1)<=NOTEQUAL)||(input.LA(1)>=COMMA && input.LA(1)<=CHARREF_HEX)||(input.LA(1)>=QUOT && input.LA(1)<=BinaryTest) ) {
            	        input.consume();
            	        if ( state.backtracking==0 ) adaptor.addChild(root_0, (XQDTCommonTree)adaptor.create(set544));
            	        state.errorRecovery=false;state.failed=false;
            	    }
            	    else {
            	        if (state.backtracking>0) {state.failed=true; return retval;}
            	        MismatchedSetException mse = new MismatchedSetException(null,input);
            	        throw mse;
            	    }


            	    }
            	    break;

            	default :
            	    break loop174;
                }
            } while (true);


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (XQDTCommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (XQDTCommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "p_AposStringLiteralContent"

    public static class p_QName_return extends ParserRuleReturnScope {
        XQDTCommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "p_QName"
    // XQueryParser.g:1238:1: p_QName : p_NCName p_LocalNCName -> ^( QName p_NCName ( p_LocalNCName )? ) ;
    public final XQueryParser.p_QName_return p_QName() throws RecognitionException {
        XQueryParser.p_QName_return retval = new XQueryParser.p_QName_return();
        retval.start = input.LT(1);

        XQDTCommonTree root_0 = null;

        XQueryParser.p_NCName_return p_NCName545 = null;

        XQueryParser.p_LocalNCName_return p_LocalNCName546 = null;


        RewriteRuleSubtreeStream stream_p_LocalNCName=new RewriteRuleSubtreeStream(adaptor,"rule p_LocalNCName");
        RewriteRuleSubtreeStream stream_p_NCName=new RewriteRuleSubtreeStream(adaptor,"rule p_NCName");
        setWsExplicit(true);
        try {
            // XQueryParser.g:1239:9: ( p_NCName p_LocalNCName -> ^( QName p_NCName ( p_LocalNCName )? ) )
            // XQueryParser.g:1239:11: p_NCName p_LocalNCName
            {
            pushFollow(FOLLOW_p_NCName_in_p_QName10029);
            p_NCName545=p_NCName();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_p_NCName.add(p_NCName545.getTree());
            pushFollow(FOLLOW_p_LocalNCName_in_p_QName10031);
            p_LocalNCName546=p_LocalNCName();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_p_LocalNCName.add(p_LocalNCName546.getTree());


            // AST REWRITE
            // elements: p_LocalNCName, p_NCName
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (XQDTCommonTree)adaptor.nil();
            // 1240:17: -> ^( QName p_NCName ( p_LocalNCName )? )
            {
                // XQueryParser.g:1240:20: ^( QName p_NCName ( p_LocalNCName )? )
                {
                XQDTCommonTree root_1 = (XQDTCommonTree)adaptor.nil();
                root_1 = (XQDTCommonTree)adaptor.becomeRoot((XQDTCommonTree)adaptor.create(QName, "QName"), root_1);

                adaptor.addChild(root_1, stream_p_NCName.nextTree());
                // XQueryParser.g:1240:37: ( p_LocalNCName )?
                if ( stream_p_LocalNCName.hasNext() ) {
                    adaptor.addChild(root_1, stream_p_LocalNCName.nextTree());

                }
                stream_p_LocalNCName.reset();

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (XQDTCommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (XQDTCommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "p_QName"

    public static class p_LocalNCName_return extends ParserRuleReturnScope {
        XQDTCommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "p_LocalNCName"
    // XQueryParser.g:1245:1: p_LocalNCName : ( COLON p_NCName )? ;
    public final XQueryParser.p_LocalNCName_return p_LocalNCName() throws RecognitionException {
        XQueryParser.p_LocalNCName_return retval = new XQueryParser.p_LocalNCName_return();
        retval.start = input.LT(1);

        XQDTCommonTree root_0 = null;

        CommonToken COLON547=null;
        XQueryParser.p_NCName_return p_NCName548 = null;


        XQDTCommonTree COLON547_tree=null;

        try {
            // XQueryParser.g:1246:9: ( ( COLON p_NCName )? )
            // XQueryParser.g:1246:11: ( COLON p_NCName )?
            {
            root_0 = (XQDTCommonTree)adaptor.nil();

            // XQueryParser.g:1246:11: ( COLON p_NCName )?
            int alt175=2;
            int LA175_0 = input.LA(1);

            if ( (LA175_0==COLON) ) {
                alt175=1;
            }
            switch (alt175) {
                case 1 :
                    // XQueryParser.g:1246:12: COLON p_NCName
                    {
                    COLON547=(CommonToken)match(input,COLON,FOLLOW_COLON_in_p_LocalNCName10086); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    COLON547_tree = (XQDTCommonTree)adaptor.create(COLON547);
                    adaptor.addChild(root_0, COLON547_tree);
                    }
                    pushFollow(FOLLOW_p_NCName_in_p_LocalNCName10088);
                    p_NCName548=p_NCName();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, p_NCName548.getTree());

                    }
                    break;

            }


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (XQDTCommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (XQDTCommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            setWsExplicit(false);
        }
        return retval;
    }
    // $ANTLR end "p_LocalNCName"

    public static class p_FQName_return extends ParserRuleReturnScope {
        XQDTCommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "p_FQName"
    // XQueryParser.g:1253:1: p_FQName : p_FNCName p_LocalFNCName ;
    public final XQueryParser.p_FQName_return p_FQName() throws RecognitionException {
        XQueryParser.p_FQName_return retval = new XQueryParser.p_FQName_return();
        retval.start = input.LT(1);

        XQDTCommonTree root_0 = null;

        XQueryParser.p_FNCName_return p_FNCName549 = null;

        XQueryParser.p_LocalFNCName_return p_LocalFNCName550 = null;



        setWsExplicit(true);
        try {
            // XQueryParser.g:1254:9: ( p_FNCName p_LocalFNCName )
            // XQueryParser.g:1254:11: p_FNCName p_LocalFNCName
            {
            root_0 = (XQDTCommonTree)adaptor.nil();

            pushFollow(FOLLOW_p_FNCName_in_p_FQName10135);
            p_FNCName549=p_FNCName();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, p_FNCName549.getTree());
            pushFollow(FOLLOW_p_LocalFNCName_in_p_FQName10137);
            p_LocalFNCName550=p_LocalFNCName();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, p_LocalFNCName550.getTree());

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (XQDTCommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (XQDTCommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "p_FQName"

    public static class p_LocalFNCName_return extends ParserRuleReturnScope {
        XQDTCommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "p_LocalFNCName"
    // XQueryParser.g:1259:1: p_LocalFNCName : ( COLON p_NCName )? ;
    public final XQueryParser.p_LocalFNCName_return p_LocalFNCName() throws RecognitionException {
        XQueryParser.p_LocalFNCName_return retval = new XQueryParser.p_LocalFNCName_return();
        retval.start = input.LT(1);

        XQDTCommonTree root_0 = null;

        CommonToken COLON551=null;
        XQueryParser.p_NCName_return p_NCName552 = null;


        XQDTCommonTree COLON551_tree=null;

        try {
            // XQueryParser.g:1260:9: ( ( COLON p_NCName )? )
            // XQueryParser.g:1260:11: ( COLON p_NCName )?
            {
            root_0 = (XQDTCommonTree)adaptor.nil();

            // XQueryParser.g:1260:11: ( COLON p_NCName )?
            int alt176=2;
            int LA176_0 = input.LA(1);

            if ( (LA176_0==COLON) ) {
                alt176=1;
            }
            switch (alt176) {
                case 1 :
                    // XQueryParser.g:1260:12: COLON p_NCName
                    {
                    COLON551=(CommonToken)match(input,COLON,FOLLOW_COLON_in_p_LocalFNCName10165); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    COLON551_tree = (XQDTCommonTree)adaptor.create(COLON551);
                    adaptor.addChild(root_0, COLON551_tree);
                    }
                    pushFollow(FOLLOW_p_NCName_in_p_LocalFNCName10167);
                    p_NCName552=p_NCName();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, p_NCName552.getTree());

                    }
                    break;

            }


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (XQDTCommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (XQDTCommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            setWsExplicit(false);
        }
        return retval;
    }
    // $ANTLR end "p_LocalFNCName"

    public static class p_NCName_return extends ParserRuleReturnScope {
        XQDTCommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "p_NCName"
    // XQueryParser.g:1266:1: p_NCName : ( L_NCName | ANCESTOR | ANCESTOR_OR_SELF | AND | AS | ASCENDING | AT | ATTRIBUTE | BASE_URI | BOUNDARY_SPACE | BY | CASE | CAST | CASTABLE | CHILD | COLLATION | COMMENT | CONSTRUCTION | COPY_NAMESPACES | DECLARE | DEFAULT | DESCENDANT | DESCENDANT_OR_SELF | DESCENDING | DIV | DOCUMENT | DOCUMENT_NODE | ELEMENT | ELSE | EMPTY | EMPTY_SEQUENCE | ENCODING | EQ | EVERY | EXCEPT | EXTERNAL | FOLLOWING | FOLLOWING_SIBLING | FOR | FUNCTION | GE | GREATEST | GT | IDIV | IF | IMPORT | IN | INHERIT | INSTANCE | INTERSECT | IS | ITEM | LAX | LE | LEAST | LET | LT | MOD | MODULE | NAMESPACE | NE | NO_INHERIT | NO_PRESERVE | NODE | OF | OPTION | OR | ORDER | ORDERED | ORDERING | PARENT | PRECEDING | PRECEDING_SIBLING | PRESERVE | PROCESSING_INSTRUCTION | RETURN | SATISFIES | SCHEMA | SCHEMA_ATTRIBUTE | SCHEMA_ELEMENT | SELF | SOME | STABLE | STRICT | STRIP | TEXT | THEN | TO | TREAT | TYPESWITCH | UNION | UNORDERED | VALIDATE | VARIABLE | VERSION | WHERE | XQUERY | CATCH | CONTEXT | COUNT | DECIMAL_FORMAT | DECIMAL_SEPARATOR | DIGIT | END | GROUP | GROUPING_SEPARATOR | INFINITY | MINUS_SIGN | NAMESPACE_NODE | NAN | NEXT | ONLY | OUTER | PATTERN_SEPARATOR | PERCENT | PER_MILLE | PREVIOUS | SLIDING | START | TRY | TUMBLING | WHEN | WINDOW | ZERO_DIGIT | AFTER | BEFORE | COPY | DELETE | FIRST | INSERT | INTO | LAST | MODIFY | NODES | RENAME | REPLACE | REVALIDATION | SKIP | UPDATING | VALUE | WITH | BLOCK | CONSTANT | EXIT | SEQUENTIAL | SET | SIMPLE | WHILE | EVAL | USING | BINARY | AMP_ER | APOS_ER | QUOT_ER );
    public final XQueryParser.p_NCName_return p_NCName() throws RecognitionException {
        XQueryParser.p_NCName_return retval = new XQueryParser.p_NCName_return();
        retval.start = input.LT(1);

        XQDTCommonTree root_0 = null;

        CommonToken set553=null;

        XQDTCommonTree set553_tree=null;

        try {
            // XQueryParser.g:1267:9: ( L_NCName | ANCESTOR | ANCESTOR_OR_SELF | AND | AS | ASCENDING | AT | ATTRIBUTE | BASE_URI | BOUNDARY_SPACE | BY | CASE | CAST | CASTABLE | CHILD | COLLATION | COMMENT | CONSTRUCTION | COPY_NAMESPACES | DECLARE | DEFAULT | DESCENDANT | DESCENDANT_OR_SELF | DESCENDING | DIV | DOCUMENT | DOCUMENT_NODE | ELEMENT | ELSE | EMPTY | EMPTY_SEQUENCE | ENCODING | EQ | EVERY | EXCEPT | EXTERNAL | FOLLOWING | FOLLOWING_SIBLING | FOR | FUNCTION | GE | GREATEST | GT | IDIV | IF | IMPORT | IN | INHERIT | INSTANCE | INTERSECT | IS | ITEM | LAX | LE | LEAST | LET | LT | MOD | MODULE | NAMESPACE | NE | NO_INHERIT | NO_PRESERVE | NODE | OF | OPTION | OR | ORDER | ORDERED | ORDERING | PARENT | PRECEDING | PRECEDING_SIBLING | PRESERVE | PROCESSING_INSTRUCTION | RETURN | SATISFIES | SCHEMA | SCHEMA_ATTRIBUTE | SCHEMA_ELEMENT | SELF | SOME | STABLE | STRICT | STRIP | TEXT | THEN | TO | TREAT | TYPESWITCH | UNION | UNORDERED | VALIDATE | VARIABLE | VERSION | WHERE | XQUERY | CATCH | CONTEXT | COUNT | DECIMAL_FORMAT | DECIMAL_SEPARATOR | DIGIT | END | GROUP | GROUPING_SEPARATOR | INFINITY | MINUS_SIGN | NAMESPACE_NODE | NAN | NEXT | ONLY | OUTER | PATTERN_SEPARATOR | PERCENT | PER_MILLE | PREVIOUS | SLIDING | START | TRY | TUMBLING | WHEN | WINDOW | ZERO_DIGIT | AFTER | BEFORE | COPY | DELETE | FIRST | INSERT | INTO | LAST | MODIFY | NODES | RENAME | REPLACE | REVALIDATION | SKIP | UPDATING | VALUE | WITH | BLOCK | CONSTANT | EXIT | SEQUENTIAL | SET | SIMPLE | WHILE | EVAL | USING | BINARY | AMP_ER | APOS_ER | QUOT_ER )
            // XQueryParser.g:
            {
            root_0 = (XQDTCommonTree)adaptor.nil();

            set553=(CommonToken)input.LT(1);
            if ( (input.LA(1)>=ANCESTOR && input.LA(1)<=EXIT)||(input.LA(1)>=SEQUENTIAL && input.LA(1)<=QUOT_ER)||input.LA(1)==L_NCName ) {
                input.consume();
                if ( state.backtracking==0 ) adaptor.addChild(root_0, (XQDTCommonTree)adaptor.create(set553));
                state.errorRecovery=false;state.failed=false;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                MismatchedSetException mse = new MismatchedSetException(null,input);
                throw mse;
            }


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (XQDTCommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (XQDTCommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "p_NCName"

    public static class p_FNCName_return extends ParserRuleReturnScope {
        XQDTCommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "p_FNCName"
    // XQueryParser.g:1283:1: p_FNCName : ( L_NCName | ANCESTOR | ANCESTOR_OR_SELF | AND | AS | ASCENDING | AT | BASE_URI | BOUNDARY_SPACE | BY | CASE | CAST | CASTABLE | CHILD | COLLATION | CONSTRUCTION | COPY_NAMESPACES | DECLARE | DEFAULT | DESCENDANT | DESCENDANT_OR_SELF | DESCENDING | DIV | DOCUMENT | ELSE | EMPTY | ENCODING | EQ | EVERY | EXCEPT | EXTERNAL | FOLLOWING | FOLLOWING_SIBLING | FOR | FUNCTION | GE | GREATEST | GT | IDIV | IMPORT | IN | INHERIT | INSTANCE | INTERSECT | IS | LAX | LE | LEAST | LET | LT | MOD | MODULE | NAMESPACE | NE | NO_INHERIT | NO_PRESERVE | OF | OPTION | OR | ORDER | ORDERED | ORDERING | PARENT | PRECEDING | PRECEDING_SIBLING | PRESERVE | RETURN | SATISFIES | SCHEMA | SELF | SOME | STABLE | STRICT | STRIP | THEN | TO | TREAT | UNION | UNORDERED | VALIDATE | VARIABLE | VERSION | WHERE | XQUERY | CATCH | CONTEXT | COUNT | DECIMAL_FORMAT | DECIMAL_SEPARATOR | DIGIT | END | GROUP | GROUPING_SEPARATOR | INFINITY | MINUS_SIGN | NAN | NEXT | ONLY | OUTER | PATTERN_SEPARATOR | PERCENT | PER_MILLE | PREVIOUS | SLIDING | START | TRY | TUMBLING | WHEN | WINDOW | ZERO_DIGIT | AFTER | BEFORE | COPY | DELETE | FIRST | INSERT | INTO | LAST | MODIFY | NODES | RENAME | REPLACE | REVALIDATION | SKIP | UPDATING | VALUE | WITH | BLOCK | CONSTANT | EXIT | SEQUENTIAL | SET | SIMPLE | EVAL | USING | AMP_ER | APOS_ER | QUOT_ER );
    public final XQueryParser.p_FNCName_return p_FNCName() throws RecognitionException {
        XQueryParser.p_FNCName_return retval = new XQueryParser.p_FNCName_return();
        retval.start = input.LT(1);

        XQDTCommonTree root_0 = null;

        CommonToken set554=null;

        XQDTCommonTree set554_tree=null;

        try {
            // XQueryParser.g:1284:9: ( L_NCName | ANCESTOR | ANCESTOR_OR_SELF | AND | AS | ASCENDING | AT | BASE_URI | BOUNDARY_SPACE | BY | CASE | CAST | CASTABLE | CHILD | COLLATION | CONSTRUCTION | COPY_NAMESPACES | DECLARE | DEFAULT | DESCENDANT | DESCENDANT_OR_SELF | DESCENDING | DIV | DOCUMENT | ELSE | EMPTY | ENCODING | EQ | EVERY | EXCEPT | EXTERNAL | FOLLOWING | FOLLOWING_SIBLING | FOR | FUNCTION | GE | GREATEST | GT | IDIV | IMPORT | IN | INHERIT | INSTANCE | INTERSECT | IS | LAX | LE | LEAST | LET | LT | MOD | MODULE | NAMESPACE | NE | NO_INHERIT | NO_PRESERVE | OF | OPTION | OR | ORDER | ORDERED | ORDERING | PARENT | PRECEDING | PRECEDING_SIBLING | PRESERVE | RETURN | SATISFIES | SCHEMA | SELF | SOME | STABLE | STRICT | STRIP | THEN | TO | TREAT | UNION | UNORDERED | VALIDATE | VARIABLE | VERSION | WHERE | XQUERY | CATCH | CONTEXT | COUNT | DECIMAL_FORMAT | DECIMAL_SEPARATOR | DIGIT | END | GROUP | GROUPING_SEPARATOR | INFINITY | MINUS_SIGN | NAN | NEXT | ONLY | OUTER | PATTERN_SEPARATOR | PERCENT | PER_MILLE | PREVIOUS | SLIDING | START | TRY | TUMBLING | WHEN | WINDOW | ZERO_DIGIT | AFTER | BEFORE | COPY | DELETE | FIRST | INSERT | INTO | LAST | MODIFY | NODES | RENAME | REPLACE | REVALIDATION | SKIP | UPDATING | VALUE | WITH | BLOCK | CONSTANT | EXIT | SEQUENTIAL | SET | SIMPLE | EVAL | USING | AMP_ER | APOS_ER | QUOT_ER )
            // XQueryParser.g:
            {
            root_0 = (XQDTCommonTree)adaptor.nil();

            set554=(CommonToken)input.LT(1);
            if ( (input.LA(1)>=ANCESTOR && input.LA(1)<=AT)||(input.LA(1)>=BASE_URI && input.LA(1)<=COLLATION)||(input.LA(1)>=CONSTRUCTION && input.LA(1)<=DOCUMENT)||(input.LA(1)>=ELSE && input.LA(1)<=EMPTY)||(input.LA(1)>=ENCODING && input.LA(1)<=IDIV)||(input.LA(1)>=IMPORT && input.LA(1)<=IS)||(input.LA(1)>=LAX && input.LA(1)<=NO_PRESERVE)||(input.LA(1)>=OF && input.LA(1)<=PRESERVE)||(input.LA(1)>=RETURN && input.LA(1)<=SCHEMA)||(input.LA(1)>=SELF && input.LA(1)<=STRIP)||(input.LA(1)>=THEN && input.LA(1)<=TREAT)||(input.LA(1)>=UNION && input.LA(1)<=MINUS_SIGN)||(input.LA(1)>=NAN && input.LA(1)<=EXIT)||(input.LA(1)>=SEQUENTIAL && input.LA(1)<=SIMPLE)||(input.LA(1)>=EVAL && input.LA(1)<=USING)||(input.LA(1)>=AMP_ER && input.LA(1)<=QUOT_ER)||input.LA(1)==L_NCName ) {
                input.consume();
                if ( state.backtracking==0 ) adaptor.addChild(root_0, (XQDTCommonTree)adaptor.create(set554));
                state.errorRecovery=false;state.failed=false;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                MismatchedSetException mse = new MismatchedSetException(null,input);
                throw mse;
            }


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (XQDTCommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (XQDTCommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "p_FNCName"

    public static class pm_RevalidationDecl_return extends ParserRuleReturnScope {
        XQDTCommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "pm_RevalidationDecl"
    // XQueryParser.g:1313:1: pm_RevalidationDecl : k+= DECLARE k+= REVALIDATION (k+= STRICT | k+= LAX | k+= SKIP ) ;
    public final XQueryParser.pm_RevalidationDecl_return pm_RevalidationDecl() throws RecognitionException {
        XQueryParser.pm_RevalidationDecl_return retval = new XQueryParser.pm_RevalidationDecl_return();
        retval.start = input.LT(1);

        XQDTCommonTree root_0 = null;

        CommonToken k=null;
        List list_k=null;

        XQDTCommonTree k_tree=null;

        try {
            // XQueryParser.g:1314:9: (k+= DECLARE k+= REVALIDATION (k+= STRICT | k+= LAX | k+= SKIP ) )
            // XQueryParser.g:1314:11: k+= DECLARE k+= REVALIDATION (k+= STRICT | k+= LAX | k+= SKIP )
            {
            root_0 = (XQDTCommonTree)adaptor.nil();

            k=(CommonToken)match(input,DECLARE,FOLLOW_DECLARE_in_pm_RevalidationDecl11660); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            k_tree = (XQDTCommonTree)adaptor.create(k);
            adaptor.addChild(root_0, k_tree);
            }
            if (list_k==null) list_k=new ArrayList();
            list_k.add(k);

            k=(CommonToken)match(input,REVALIDATION,FOLLOW_REVALIDATION_in_pm_RevalidationDecl11664); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            k_tree = (XQDTCommonTree)adaptor.create(k);
            adaptor.addChild(root_0, k_tree);
            }
            if (list_k==null) list_k=new ArrayList();
            list_k.add(k);

            // XQueryParser.g:1314:38: (k+= STRICT | k+= LAX | k+= SKIP )
            int alt177=3;
            switch ( input.LA(1) ) {
            case STRICT:
                {
                alt177=1;
                }
                break;
            case LAX:
                {
                alt177=2;
                }
                break;
            case SKIP:
                {
                alt177=3;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 177, 0, input);

                throw nvae;
            }

            switch (alt177) {
                case 1 :
                    // XQueryParser.g:1314:39: k+= STRICT
                    {
                    k=(CommonToken)match(input,STRICT,FOLLOW_STRICT_in_pm_RevalidationDecl11669); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    k_tree = (XQDTCommonTree)adaptor.create(k);
                    adaptor.addChild(root_0, k_tree);
                    }
                    if (list_k==null) list_k=new ArrayList();
                    list_k.add(k);


                    }
                    break;
                case 2 :
                    // XQueryParser.g:1314:51: k+= LAX
                    {
                    k=(CommonToken)match(input,LAX,FOLLOW_LAX_in_pm_RevalidationDecl11675); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    k_tree = (XQDTCommonTree)adaptor.create(k);
                    adaptor.addChild(root_0, k_tree);
                    }
                    if (list_k==null) list_k=new ArrayList();
                    list_k.add(k);


                    }
                    break;
                case 3 :
                    // XQueryParser.g:1314:60: k+= SKIP
                    {
                    k=(CommonToken)match(input,SKIP,FOLLOW_SKIP_in_pm_RevalidationDecl11681); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    k_tree = (XQDTCommonTree)adaptor.create(k);
                    adaptor.addChild(root_0, k_tree);
                    }
                    if (list_k==null) list_k=new ArrayList();
                    list_k.add(k);


                    }
                    break;

            }

            if ( state.backtracking==0 ) {
              ak(list_k);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (XQDTCommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (XQDTCommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "pm_RevalidationDecl"

    public static class p_InsertExprTargetChoice_return extends ParserRuleReturnScope {
        XQDTCommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "p_InsertExprTargetChoice"
    // XQueryParser.g:1318:1: p_InsertExprTargetChoice : ( ( (k+= AS (k+= FIRST | k+= LAST ) )? k+= INTO ) | ka= AFTER | kb= BEFORE );
    public final XQueryParser.p_InsertExprTargetChoice_return p_InsertExprTargetChoice() throws RecognitionException {
        XQueryParser.p_InsertExprTargetChoice_return retval = new XQueryParser.p_InsertExprTargetChoice_return();
        retval.start = input.LT(1);

        XQDTCommonTree root_0 = null;

        CommonToken ka=null;
        CommonToken kb=null;
        CommonToken k=null;
        List list_k=null;

        XQDTCommonTree ka_tree=null;
        XQDTCommonTree kb_tree=null;
        XQDTCommonTree k_tree=null;

        try {
            // XQueryParser.g:1319:9: ( ( (k+= AS (k+= FIRST | k+= LAST ) )? k+= INTO ) | ka= AFTER | kb= BEFORE )
            int alt180=3;
            switch ( input.LA(1) ) {
            case AS:
            case INTO:
                {
                alt180=1;
                }
                break;
            case AFTER:
                {
                alt180=2;
                }
                break;
            case BEFORE:
                {
                alt180=3;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 180, 0, input);

                throw nvae;
            }

            switch (alt180) {
                case 1 :
                    // XQueryParser.g:1319:11: ( (k+= AS (k+= FIRST | k+= LAST ) )? k+= INTO )
                    {
                    root_0 = (XQDTCommonTree)adaptor.nil();

                    // XQueryParser.g:1319:11: ( (k+= AS (k+= FIRST | k+= LAST ) )? k+= INTO )
                    // XQueryParser.g:1319:12: (k+= AS (k+= FIRST | k+= LAST ) )? k+= INTO
                    {
                    // XQueryParser.g:1319:12: (k+= AS (k+= FIRST | k+= LAST ) )?
                    int alt179=2;
                    int LA179_0 = input.LA(1);

                    if ( (LA179_0==AS) ) {
                        alt179=1;
                    }
                    switch (alt179) {
                        case 1 :
                            // XQueryParser.g:1319:13: k+= AS (k+= FIRST | k+= LAST )
                            {
                            k=(CommonToken)match(input,AS,FOLLOW_AS_in_p_InsertExprTargetChoice11714); if (state.failed) return retval;
                            if ( state.backtracking==0 ) {
                            k_tree = (XQDTCommonTree)adaptor.create(k);
                            adaptor.addChild(root_0, k_tree);
                            }
                            if (list_k==null) list_k=new ArrayList();
                            list_k.add(k);

                            // XQueryParser.g:1319:19: (k+= FIRST | k+= LAST )
                            int alt178=2;
                            int LA178_0 = input.LA(1);

                            if ( (LA178_0==FIRST) ) {
                                alt178=1;
                            }
                            else if ( (LA178_0==LAST) ) {
                                alt178=2;
                            }
                            else {
                                if (state.backtracking>0) {state.failed=true; return retval;}
                                NoViableAltException nvae =
                                    new NoViableAltException("", 178, 0, input);

                                throw nvae;
                            }
                            switch (alt178) {
                                case 1 :
                                    // XQueryParser.g:1319:20: k+= FIRST
                                    {
                                    k=(CommonToken)match(input,FIRST,FOLLOW_FIRST_in_p_InsertExprTargetChoice11719); if (state.failed) return retval;
                                    if ( state.backtracking==0 ) {
                                    k_tree = (XQDTCommonTree)adaptor.create(k);
                                    adaptor.addChild(root_0, k_tree);
                                    }
                                    if (list_k==null) list_k=new ArrayList();
                                    list_k.add(k);


                                    }
                                    break;
                                case 2 :
                                    // XQueryParser.g:1319:31: k+= LAST
                                    {
                                    k=(CommonToken)match(input,LAST,FOLLOW_LAST_in_p_InsertExprTargetChoice11725); if (state.failed) return retval;
                                    if ( state.backtracking==0 ) {
                                    k_tree = (XQDTCommonTree)adaptor.create(k);
                                    adaptor.addChild(root_0, k_tree);
                                    }
                                    if (list_k==null) list_k=new ArrayList();
                                    list_k.add(k);


                                    }
                                    break;

                            }


                            }
                            break;

                    }

                    k=(CommonToken)match(input,INTO,FOLLOW_INTO_in_p_InsertExprTargetChoice11732); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    k_tree = (XQDTCommonTree)adaptor.create(k);
                    adaptor.addChild(root_0, k_tree);
                    }
                    if (list_k==null) list_k=new ArrayList();
                    list_k.add(k);


                    }

                    if ( state.backtracking==0 ) {
                      ak(list_k);
                    }

                    }
                    break;
                case 2 :
                    // XQueryParser.g:1320:11: ka= AFTER
                    {
                    root_0 = (XQDTCommonTree)adaptor.nil();

                    ka=(CommonToken)match(input,AFTER,FOLLOW_AFTER_in_p_InsertExprTargetChoice11749); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    ka_tree = (XQDTCommonTree)adaptor.create(ka);
                    adaptor.addChild(root_0, ka_tree);
                    }
                    if ( state.backtracking==0 ) {
                      ak(ka);
                    }

                    }
                    break;
                case 3 :
                    // XQueryParser.g:1321:11: kb= BEFORE
                    {
                    root_0 = (XQDTCommonTree)adaptor.nil();

                    kb=(CommonToken)match(input,BEFORE,FOLLOW_BEFORE_in_p_InsertExprTargetChoice11765); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    kb_tree = (XQDTCommonTree)adaptor.create(kb);
                    adaptor.addChild(root_0, kb_tree);
                    }
                    if ( state.backtracking==0 ) {
                      ak(kb);
                    }

                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (XQDTCommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (XQDTCommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "p_InsertExprTargetChoice"

    public static class p_InsertExpr_return extends ParserRuleReturnScope {
        XQDTCommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "p_InsertExpr"
    // XQueryParser.g:1325:1: p_InsertExpr : k+= INSERT (k+= NODE | k+= NODES ) p_SourceExpr p_InsertExprTargetChoice p_TargetExpr ;
    public final XQueryParser.p_InsertExpr_return p_InsertExpr() throws RecognitionException {
        XQueryParser.p_InsertExpr_return retval = new XQueryParser.p_InsertExpr_return();
        retval.start = input.LT(1);

        XQDTCommonTree root_0 = null;

        CommonToken k=null;
        List list_k=null;
        XQueryParser.p_SourceExpr_return p_SourceExpr555 = null;

        XQueryParser.p_InsertExprTargetChoice_return p_InsertExprTargetChoice556 = null;

        XQueryParser.p_TargetExpr_return p_TargetExpr557 = null;


        XQDTCommonTree k_tree=null;

        try {
            // XQueryParser.g:1326:9: (k+= INSERT (k+= NODE | k+= NODES ) p_SourceExpr p_InsertExprTargetChoice p_TargetExpr )
            // XQueryParser.g:1326:11: k+= INSERT (k+= NODE | k+= NODES ) p_SourceExpr p_InsertExprTargetChoice p_TargetExpr
            {
            root_0 = (XQDTCommonTree)adaptor.nil();

            k=(CommonToken)match(input,INSERT,FOLLOW_INSERT_in_p_InsertExpr11795); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            k_tree = (XQDTCommonTree)adaptor.create(k);
            adaptor.addChild(root_0, k_tree);
            }
            if (list_k==null) list_k=new ArrayList();
            list_k.add(k);

            // XQueryParser.g:1326:21: (k+= NODE | k+= NODES )
            int alt181=2;
            int LA181_0 = input.LA(1);

            if ( (LA181_0==NODE) ) {
                alt181=1;
            }
            else if ( (LA181_0==NODES) ) {
                alt181=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 181, 0, input);

                throw nvae;
            }
            switch (alt181) {
                case 1 :
                    // XQueryParser.g:1326:22: k+= NODE
                    {
                    k=(CommonToken)match(input,NODE,FOLLOW_NODE_in_p_InsertExpr11800); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    k_tree = (XQDTCommonTree)adaptor.create(k);
                    adaptor.addChild(root_0, k_tree);
                    }
                    if (list_k==null) list_k=new ArrayList();
                    list_k.add(k);


                    }
                    break;
                case 2 :
                    // XQueryParser.g:1326:32: k+= NODES
                    {
                    k=(CommonToken)match(input,NODES,FOLLOW_NODES_in_p_InsertExpr11806); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    k_tree = (XQDTCommonTree)adaptor.create(k);
                    adaptor.addChild(root_0, k_tree);
                    }
                    if (list_k==null) list_k=new ArrayList();
                    list_k.add(k);


                    }
                    break;

            }

            pushFollow(FOLLOW_p_SourceExpr_in_p_InsertExpr11809);
            p_SourceExpr555=p_SourceExpr();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, p_SourceExpr555.getTree());
            pushFollow(FOLLOW_p_InsertExprTargetChoice_in_p_InsertExpr11811);
            p_InsertExprTargetChoice556=p_InsertExprTargetChoice();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, p_InsertExprTargetChoice556.getTree());
            pushFollow(FOLLOW_p_TargetExpr_in_p_InsertExpr11813);
            p_TargetExpr557=p_TargetExpr();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, p_TargetExpr557.getTree());
            if ( state.backtracking==0 ) {
              ak(list_k);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (XQDTCommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (XQDTCommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "p_InsertExpr"

    public static class p_DeleteExpr_return extends ParserRuleReturnScope {
        XQDTCommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "p_DeleteExpr"
    // XQueryParser.g:1330:1: p_DeleteExpr : k+= DELETE (k+= NODE | k+= NODES ) p_TargetExpr ;
    public final XQueryParser.p_DeleteExpr_return p_DeleteExpr() throws RecognitionException {
        XQueryParser.p_DeleteExpr_return retval = new XQueryParser.p_DeleteExpr_return();
        retval.start = input.LT(1);

        XQDTCommonTree root_0 = null;

        CommonToken k=null;
        List list_k=null;
        XQueryParser.p_TargetExpr_return p_TargetExpr558 = null;


        XQDTCommonTree k_tree=null;

        try {
            // XQueryParser.g:1331:9: (k+= DELETE (k+= NODE | k+= NODES ) p_TargetExpr )
            // XQueryParser.g:1331:11: k+= DELETE (k+= NODE | k+= NODES ) p_TargetExpr
            {
            root_0 = (XQDTCommonTree)adaptor.nil();

            k=(CommonToken)match(input,DELETE,FOLLOW_DELETE_in_p_DeleteExpr11843); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            k_tree = (XQDTCommonTree)adaptor.create(k);
            adaptor.addChild(root_0, k_tree);
            }
            if (list_k==null) list_k=new ArrayList();
            list_k.add(k);

            // XQueryParser.g:1331:21: (k+= NODE | k+= NODES )
            int alt182=2;
            int LA182_0 = input.LA(1);

            if ( (LA182_0==NODE) ) {
                alt182=1;
            }
            else if ( (LA182_0==NODES) ) {
                alt182=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 182, 0, input);

                throw nvae;
            }
            switch (alt182) {
                case 1 :
                    // XQueryParser.g:1331:22: k+= NODE
                    {
                    k=(CommonToken)match(input,NODE,FOLLOW_NODE_in_p_DeleteExpr11848); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    k_tree = (XQDTCommonTree)adaptor.create(k);
                    adaptor.addChild(root_0, k_tree);
                    }
                    if (list_k==null) list_k=new ArrayList();
                    list_k.add(k);


                    }
                    break;
                case 2 :
                    // XQueryParser.g:1331:32: k+= NODES
                    {
                    k=(CommonToken)match(input,NODES,FOLLOW_NODES_in_p_DeleteExpr11854); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    k_tree = (XQDTCommonTree)adaptor.create(k);
                    adaptor.addChild(root_0, k_tree);
                    }
                    if (list_k==null) list_k=new ArrayList();
                    list_k.add(k);


                    }
                    break;

            }

            pushFollow(FOLLOW_p_TargetExpr_in_p_DeleteExpr11857);
            p_TargetExpr558=p_TargetExpr();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, p_TargetExpr558.getTree());
            if ( state.backtracking==0 ) {
              ak(list_k);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (XQDTCommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (XQDTCommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "p_DeleteExpr"

    public static class p_ReplaceExpr_return extends ParserRuleReturnScope {
        XQDTCommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "p_ReplaceExpr"
    // XQueryParser.g:1335:1: p_ReplaceExpr : k+= REPLACE (k+= VALUE k+= OF )? k+= NODE p_ExprSingle k+= WITH p_ExprSingle ;
    public final XQueryParser.p_ReplaceExpr_return p_ReplaceExpr() throws RecognitionException {
        XQueryParser.p_ReplaceExpr_return retval = new XQueryParser.p_ReplaceExpr_return();
        retval.start = input.LT(1);

        XQDTCommonTree root_0 = null;

        CommonToken k=null;
        List list_k=null;
        XQueryParser.p_ExprSingle_return p_ExprSingle559 = null;

        XQueryParser.p_ExprSingle_return p_ExprSingle560 = null;


        XQDTCommonTree k_tree=null;

        try {
            // XQueryParser.g:1336:9: (k+= REPLACE (k+= VALUE k+= OF )? k+= NODE p_ExprSingle k+= WITH p_ExprSingle )
            // XQueryParser.g:1336:11: k+= REPLACE (k+= VALUE k+= OF )? k+= NODE p_ExprSingle k+= WITH p_ExprSingle
            {
            root_0 = (XQDTCommonTree)adaptor.nil();

            k=(CommonToken)match(input,REPLACE,FOLLOW_REPLACE_in_p_ReplaceExpr11887); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            k_tree = (XQDTCommonTree)adaptor.create(k);
            adaptor.addChild(root_0, k_tree);
            }
            if (list_k==null) list_k=new ArrayList();
            list_k.add(k);

            // XQueryParser.g:1336:22: (k+= VALUE k+= OF )?
            int alt183=2;
            int LA183_0 = input.LA(1);

            if ( (LA183_0==VALUE) ) {
                alt183=1;
            }
            switch (alt183) {
                case 1 :
                    // XQueryParser.g:1336:23: k+= VALUE k+= OF
                    {
                    k=(CommonToken)match(input,VALUE,FOLLOW_VALUE_in_p_ReplaceExpr11892); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    k_tree = (XQDTCommonTree)adaptor.create(k);
                    adaptor.addChild(root_0, k_tree);
                    }
                    if (list_k==null) list_k=new ArrayList();
                    list_k.add(k);

                    k=(CommonToken)match(input,OF,FOLLOW_OF_in_p_ReplaceExpr11896); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    k_tree = (XQDTCommonTree)adaptor.create(k);
                    adaptor.addChild(root_0, k_tree);
                    }
                    if (list_k==null) list_k=new ArrayList();
                    list_k.add(k);


                    }
                    break;

            }

            k=(CommonToken)match(input,NODE,FOLLOW_NODE_in_p_ReplaceExpr11902); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            k_tree = (XQDTCommonTree)adaptor.create(k);
            adaptor.addChild(root_0, k_tree);
            }
            if (list_k==null) list_k=new ArrayList();
            list_k.add(k);

            pushFollow(FOLLOW_p_ExprSingle_in_p_ReplaceExpr11904);
            p_ExprSingle559=p_ExprSingle();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, p_ExprSingle559.getTree());
            k=(CommonToken)match(input,WITH,FOLLOW_WITH_in_p_ReplaceExpr11908); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            k_tree = (XQDTCommonTree)adaptor.create(k);
            adaptor.addChild(root_0, k_tree);
            }
            if (list_k==null) list_k=new ArrayList();
            list_k.add(k);

            pushFollow(FOLLOW_p_ExprSingle_in_p_ReplaceExpr11910);
            p_ExprSingle560=p_ExprSingle();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, p_ExprSingle560.getTree());
            if ( state.backtracking==0 ) {
              ak(list_k);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (XQDTCommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (XQDTCommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "p_ReplaceExpr"

    public static class p_RenameExpr_return extends ParserRuleReturnScope {
        XQDTCommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "p_RenameExpr"
    // XQueryParser.g:1340:1: p_RenameExpr : k+= RENAME k+= NODE p_TargetExpr AS p_NewNameExpr ;
    public final XQueryParser.p_RenameExpr_return p_RenameExpr() throws RecognitionException {
        XQueryParser.p_RenameExpr_return retval = new XQueryParser.p_RenameExpr_return();
        retval.start = input.LT(1);

        XQDTCommonTree root_0 = null;

        CommonToken AS562=null;
        CommonToken k=null;
        List list_k=null;
        XQueryParser.p_TargetExpr_return p_TargetExpr561 = null;

        XQueryParser.p_NewNameExpr_return p_NewNameExpr563 = null;


        XQDTCommonTree AS562_tree=null;
        XQDTCommonTree k_tree=null;

        try {
            // XQueryParser.g:1341:9: (k+= RENAME k+= NODE p_TargetExpr AS p_NewNameExpr )
            // XQueryParser.g:1341:11: k+= RENAME k+= NODE p_TargetExpr AS p_NewNameExpr
            {
            root_0 = (XQDTCommonTree)adaptor.nil();

            k=(CommonToken)match(input,RENAME,FOLLOW_RENAME_in_p_RenameExpr11940); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            k_tree = (XQDTCommonTree)adaptor.create(k);
            adaptor.addChild(root_0, k_tree);
            }
            if (list_k==null) list_k=new ArrayList();
            list_k.add(k);

            k=(CommonToken)match(input,NODE,FOLLOW_NODE_in_p_RenameExpr11944); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            k_tree = (XQDTCommonTree)adaptor.create(k);
            adaptor.addChild(root_0, k_tree);
            }
            if (list_k==null) list_k=new ArrayList();
            list_k.add(k);

            pushFollow(FOLLOW_p_TargetExpr_in_p_RenameExpr11946);
            p_TargetExpr561=p_TargetExpr();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, p_TargetExpr561.getTree());
            AS562=(CommonToken)match(input,AS,FOLLOW_AS_in_p_RenameExpr11948); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            AS562_tree = (XQDTCommonTree)adaptor.create(AS562);
            adaptor.addChild(root_0, AS562_tree);
            }
            pushFollow(FOLLOW_p_NewNameExpr_in_p_RenameExpr11950);
            p_NewNameExpr563=p_NewNameExpr();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, p_NewNameExpr563.getTree());
            if ( state.backtracking==0 ) {
              ak(list_k);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (XQDTCommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (XQDTCommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "p_RenameExpr"

    public static class p_SourceExpr_return extends ParserRuleReturnScope {
        XQDTCommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "p_SourceExpr"
    // XQueryParser.g:1345:1: p_SourceExpr : p_ExprSingle ;
    public final XQueryParser.p_SourceExpr_return p_SourceExpr() throws RecognitionException {
        XQueryParser.p_SourceExpr_return retval = new XQueryParser.p_SourceExpr_return();
        retval.start = input.LT(1);

        XQDTCommonTree root_0 = null;

        XQueryParser.p_ExprSingle_return p_ExprSingle564 = null;



        try {
            // XQueryParser.g:1346:9: ( p_ExprSingle )
            // XQueryParser.g:1346:11: p_ExprSingle
            {
            root_0 = (XQDTCommonTree)adaptor.nil();

            pushFollow(FOLLOW_p_ExprSingle_in_p_SourceExpr11978);
            p_ExprSingle564=p_ExprSingle();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, p_ExprSingle564.getTree());

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (XQDTCommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (XQDTCommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "p_SourceExpr"

    public static class p_TargetExpr_return extends ParserRuleReturnScope {
        XQDTCommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "p_TargetExpr"
    // XQueryParser.g:1350:1: p_TargetExpr : p_ExprSingle ;
    public final XQueryParser.p_TargetExpr_return p_TargetExpr() throws RecognitionException {
        XQueryParser.p_TargetExpr_return retval = new XQueryParser.p_TargetExpr_return();
        retval.start = input.LT(1);

        XQDTCommonTree root_0 = null;

        XQueryParser.p_ExprSingle_return p_ExprSingle565 = null;



        try {
            // XQueryParser.g:1351:9: ( p_ExprSingle )
            // XQueryParser.g:1351:11: p_ExprSingle
            {
            root_0 = (XQDTCommonTree)adaptor.nil();

            pushFollow(FOLLOW_p_ExprSingle_in_p_TargetExpr12004);
            p_ExprSingle565=p_ExprSingle();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, p_ExprSingle565.getTree());

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (XQDTCommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (XQDTCommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "p_TargetExpr"

    public static class p_NewNameExpr_return extends ParserRuleReturnScope {
        XQDTCommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "p_NewNameExpr"
    // XQueryParser.g:1355:1: p_NewNameExpr : p_ExprSingle ;
    public final XQueryParser.p_NewNameExpr_return p_NewNameExpr() throws RecognitionException {
        XQueryParser.p_NewNameExpr_return retval = new XQueryParser.p_NewNameExpr_return();
        retval.start = input.LT(1);

        XQDTCommonTree root_0 = null;

        XQueryParser.p_ExprSingle_return p_ExprSingle566 = null;



        try {
            // XQueryParser.g:1356:9: ( p_ExprSingle )
            // XQueryParser.g:1356:11: p_ExprSingle
            {
            root_0 = (XQDTCommonTree)adaptor.nil();

            pushFollow(FOLLOW_p_ExprSingle_in_p_NewNameExpr12030);
            p_ExprSingle566=p_ExprSingle();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, p_ExprSingle566.getTree());

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (XQDTCommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (XQDTCommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "p_NewNameExpr"

    public static class p_TransformExpr_return extends ParserRuleReturnScope {
        XQDTCommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "p_TransformExpr"
    // XQueryParser.g:1360:1: p_TransformExpr : k+= COPY DOLLAR p_VarName BIND p_ExprSingle ( COMMA DOLLAR p_VarName BIND p_ExprSingle )* k+= MODIFY p_ExprSingle k+= RETURN p_ExprSingle ;
    public final XQueryParser.p_TransformExpr_return p_TransformExpr() throws RecognitionException {
        XQueryParser.p_TransformExpr_return retval = new XQueryParser.p_TransformExpr_return();
        retval.start = input.LT(1);

        XQDTCommonTree root_0 = null;

        CommonToken DOLLAR567=null;
        CommonToken BIND569=null;
        CommonToken COMMA571=null;
        CommonToken DOLLAR572=null;
        CommonToken BIND574=null;
        CommonToken k=null;
        List list_k=null;
        XQueryParser.p_VarName_return p_VarName568 = null;

        XQueryParser.p_ExprSingle_return p_ExprSingle570 = null;

        XQueryParser.p_VarName_return p_VarName573 = null;

        XQueryParser.p_ExprSingle_return p_ExprSingle575 = null;

        XQueryParser.p_ExprSingle_return p_ExprSingle576 = null;

        XQueryParser.p_ExprSingle_return p_ExprSingle577 = null;


        XQDTCommonTree DOLLAR567_tree=null;
        XQDTCommonTree BIND569_tree=null;
        XQDTCommonTree COMMA571_tree=null;
        XQDTCommonTree DOLLAR572_tree=null;
        XQDTCommonTree BIND574_tree=null;
        XQDTCommonTree k_tree=null;

        try {
            // XQueryParser.g:1361:9: (k+= COPY DOLLAR p_VarName BIND p_ExprSingle ( COMMA DOLLAR p_VarName BIND p_ExprSingle )* k+= MODIFY p_ExprSingle k+= RETURN p_ExprSingle )
            // XQueryParser.g:1361:11: k+= COPY DOLLAR p_VarName BIND p_ExprSingle ( COMMA DOLLAR p_VarName BIND p_ExprSingle )* k+= MODIFY p_ExprSingle k+= RETURN p_ExprSingle
            {
            root_0 = (XQDTCommonTree)adaptor.nil();

            k=(CommonToken)match(input,COPY,FOLLOW_COPY_in_p_TransformExpr12058); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            k_tree = (XQDTCommonTree)adaptor.create(k);
            adaptor.addChild(root_0, k_tree);
            }
            if (list_k==null) list_k=new ArrayList();
            list_k.add(k);

            DOLLAR567=(CommonToken)match(input,DOLLAR,FOLLOW_DOLLAR_in_p_TransformExpr12060); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            DOLLAR567_tree = (XQDTCommonTree)adaptor.create(DOLLAR567);
            adaptor.addChild(root_0, DOLLAR567_tree);
            }
            pushFollow(FOLLOW_p_VarName_in_p_TransformExpr12062);
            p_VarName568=p_VarName();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, p_VarName568.getTree());
            BIND569=(CommonToken)match(input,BIND,FOLLOW_BIND_in_p_TransformExpr12064); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            BIND569_tree = (XQDTCommonTree)adaptor.create(BIND569);
            adaptor.addChild(root_0, BIND569_tree);
            }
            pushFollow(FOLLOW_p_ExprSingle_in_p_TransformExpr12066);
            p_ExprSingle570=p_ExprSingle();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, p_ExprSingle570.getTree());
            // XQueryParser.g:1361:54: ( COMMA DOLLAR p_VarName BIND p_ExprSingle )*
            loop184:
            do {
                int alt184=2;
                int LA184_0 = input.LA(1);

                if ( (LA184_0==COMMA) ) {
                    alt184=1;
                }


                switch (alt184) {
            	case 1 :
            	    // XQueryParser.g:1361:55: COMMA DOLLAR p_VarName BIND p_ExprSingle
            	    {
            	    COMMA571=(CommonToken)match(input,COMMA,FOLLOW_COMMA_in_p_TransformExpr12069); if (state.failed) return retval;
            	    if ( state.backtracking==0 ) {
            	    COMMA571_tree = (XQDTCommonTree)adaptor.create(COMMA571);
            	    adaptor.addChild(root_0, COMMA571_tree);
            	    }
            	    DOLLAR572=(CommonToken)match(input,DOLLAR,FOLLOW_DOLLAR_in_p_TransformExpr12071); if (state.failed) return retval;
            	    if ( state.backtracking==0 ) {
            	    DOLLAR572_tree = (XQDTCommonTree)adaptor.create(DOLLAR572);
            	    adaptor.addChild(root_0, DOLLAR572_tree);
            	    }
            	    pushFollow(FOLLOW_p_VarName_in_p_TransformExpr12073);
            	    p_VarName573=p_VarName();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, p_VarName573.getTree());
            	    BIND574=(CommonToken)match(input,BIND,FOLLOW_BIND_in_p_TransformExpr12075); if (state.failed) return retval;
            	    if ( state.backtracking==0 ) {
            	    BIND574_tree = (XQDTCommonTree)adaptor.create(BIND574);
            	    adaptor.addChild(root_0, BIND574_tree);
            	    }
            	    pushFollow(FOLLOW_p_ExprSingle_in_p_TransformExpr12077);
            	    p_ExprSingle575=p_ExprSingle();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, p_ExprSingle575.getTree());

            	    }
            	    break;

            	default :
            	    break loop184;
                }
            } while (true);

            k=(CommonToken)match(input,MODIFY,FOLLOW_MODIFY_in_p_TransformExpr12083); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            k_tree = (XQDTCommonTree)adaptor.create(k);
            adaptor.addChild(root_0, k_tree);
            }
            if (list_k==null) list_k=new ArrayList();
            list_k.add(k);

            pushFollow(FOLLOW_p_ExprSingle_in_p_TransformExpr12085);
            p_ExprSingle576=p_ExprSingle();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, p_ExprSingle576.getTree());
            k=(CommonToken)match(input,RETURN,FOLLOW_RETURN_in_p_TransformExpr12089); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            k_tree = (XQDTCommonTree)adaptor.create(k);
            adaptor.addChild(root_0, k_tree);
            }
            if (list_k==null) list_k=new ArrayList();
            list_k.add(k);

            pushFollow(FOLLOW_p_ExprSingle_in_p_TransformExpr12091);
            p_ExprSingle577=p_ExprSingle();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, p_ExprSingle577.getTree());
            if ( state.backtracking==0 ) {
              ak(list_k);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (XQDTCommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (XQDTCommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "p_TransformExpr"

    public static class pm_ApplyExpr_return extends ParserRuleReturnScope {
        XQDTCommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "pm_ApplyExpr"
    // XQueryParser.g:1371:1: pm_ApplyExpr : p_ConcatExpr SEMICOLON ;
    public final XQueryParser.pm_ApplyExpr_return pm_ApplyExpr() throws RecognitionException {
        XQueryParser.pm_ApplyExpr_return retval = new XQueryParser.pm_ApplyExpr_return();
        retval.start = input.LT(1);

        XQDTCommonTree root_0 = null;

        CommonToken SEMICOLON579=null;
        XQueryParser.p_ConcatExpr_return p_ConcatExpr578 = null;


        XQDTCommonTree SEMICOLON579_tree=null;

        try {
            // XQueryParser.g:1372:9: ( p_ConcatExpr SEMICOLON )
            // XQueryParser.g:1372:11: p_ConcatExpr SEMICOLON
            {
            root_0 = (XQDTCommonTree)adaptor.nil();

            pushFollow(FOLLOW_p_ConcatExpr_in_pm_ApplyExpr12126);
            p_ConcatExpr578=p_ConcatExpr();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, p_ConcatExpr578.getTree());
            SEMICOLON579=(CommonToken)match(input,SEMICOLON,FOLLOW_SEMICOLON_in_pm_ApplyExpr12128); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            SEMICOLON579_tree = (XQDTCommonTree)adaptor.create(SEMICOLON579);
            adaptor.addChild(root_0, SEMICOLON579_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (XQDTCommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (XQDTCommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "pm_ApplyExpr"

    public static class p_ConcatExpr_return extends ParserRuleReturnScope {
        XQDTCommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "p_ConcatExpr"
    // XQueryParser.g:1376:1: p_ConcatExpr : p_ExprSingle ( COMMA p_ExprSingle )* ;
    public final XQueryParser.p_ConcatExpr_return p_ConcatExpr() throws RecognitionException {
        XQueryParser.p_ConcatExpr_return retval = new XQueryParser.p_ConcatExpr_return();
        retval.start = input.LT(1);

        XQDTCommonTree root_0 = null;

        CommonToken COMMA581=null;
        XQueryParser.p_ExprSingle_return p_ExprSingle580 = null;

        XQueryParser.p_ExprSingle_return p_ExprSingle582 = null;


        XQDTCommonTree COMMA581_tree=null;

        try {
            // XQueryParser.g:1377:9: ( p_ExprSingle ( COMMA p_ExprSingle )* )
            // XQueryParser.g:1377:11: p_ExprSingle ( COMMA p_ExprSingle )*
            {
            root_0 = (XQDTCommonTree)adaptor.nil();

            pushFollow(FOLLOW_p_ExprSingle_in_p_ConcatExpr12154);
            p_ExprSingle580=p_ExprSingle();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, p_ExprSingle580.getTree());
            // XQueryParser.g:1377:24: ( COMMA p_ExprSingle )*
            loop185:
            do {
                int alt185=2;
                int LA185_0 = input.LA(1);

                if ( (LA185_0==COMMA) ) {
                    alt185=1;
                }


                switch (alt185) {
            	case 1 :
            	    // XQueryParser.g:1377:25: COMMA p_ExprSingle
            	    {
            	    COMMA581=(CommonToken)match(input,COMMA,FOLLOW_COMMA_in_p_ConcatExpr12157); if (state.failed) return retval;
            	    if ( state.backtracking==0 ) {
            	    COMMA581_tree = (XQDTCommonTree)adaptor.create(COMMA581);
            	    adaptor.addChild(root_0, COMMA581_tree);
            	    }
            	    pushFollow(FOLLOW_p_ExprSingle_in_p_ConcatExpr12159);
            	    p_ExprSingle582=p_ExprSingle();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, p_ExprSingle582.getTree());

            	    }
            	    break;

            	default :
            	    break loop185;
                }
            } while (true);


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (XQDTCommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (XQDTCommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "p_ConcatExpr"

    public static class p_BlockExpr_return extends ParserRuleReturnScope {
        XQDTCommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "p_BlockExpr"
    // XQueryParser.g:1381:1: p_BlockExpr : kb= BLOCK p_Block ;
    public final XQueryParser.p_BlockExpr_return p_BlockExpr() throws RecognitionException {
        XQueryParser.p_BlockExpr_return retval = new XQueryParser.p_BlockExpr_return();
        retval.start = input.LT(1);

        XQDTCommonTree root_0 = null;

        CommonToken kb=null;
        XQueryParser.p_Block_return p_Block583 = null;


        XQDTCommonTree kb_tree=null;

        try {
            // XQueryParser.g:1382:9: (kb= BLOCK p_Block )
            // XQueryParser.g:1382:11: kb= BLOCK p_Block
            {
            root_0 = (XQDTCommonTree)adaptor.nil();

            kb=(CommonToken)match(input,BLOCK,FOLLOW_BLOCK_in_p_BlockExpr12189); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            kb_tree = (XQDTCommonTree)adaptor.create(kb);
            adaptor.addChild(root_0, kb_tree);
            }
            if ( state.backtracking==0 ) {
              ak(kb);
            }
            pushFollow(FOLLOW_p_Block_in_p_BlockExpr12193);
            p_Block583=p_Block();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, p_Block583.getTree());

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (XQDTCommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (XQDTCommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "p_BlockExpr"

    public static class p_Block_return extends ParserRuleReturnScope {
        XQDTCommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "p_Block"
    // XQueryParser.g:1386:1: p_Block : LBRACKET bd= pm_BlockDecls bb= p_BlockBody RBRACKET -> ^( Block $bd $bb) ;
    public final XQueryParser.p_Block_return p_Block() throws RecognitionException {
        XQueryParser.p_Block_return retval = new XQueryParser.p_Block_return();
        retval.start = input.LT(1);

        XQDTCommonTree root_0 = null;

        CommonToken LBRACKET584=null;
        CommonToken RBRACKET585=null;
        XQueryParser.pm_BlockDecls_return bd = null;

        XQueryParser.p_BlockBody_return bb = null;


        XQDTCommonTree LBRACKET584_tree=null;
        XQDTCommonTree RBRACKET585_tree=null;
        RewriteRuleTokenStream stream_LBRACKET=new RewriteRuleTokenStream(adaptor,"token LBRACKET");
        RewriteRuleTokenStream stream_RBRACKET=new RewriteRuleTokenStream(adaptor,"token RBRACKET");
        RewriteRuleSubtreeStream stream_pm_BlockDecls=new RewriteRuleSubtreeStream(adaptor,"rule pm_BlockDecls");
        RewriteRuleSubtreeStream stream_p_BlockBody=new RewriteRuleSubtreeStream(adaptor,"rule p_BlockBody");
        try {
            // XQueryParser.g:1387:9: ( LBRACKET bd= pm_BlockDecls bb= p_BlockBody RBRACKET -> ^( Block $bd $bb) )
            // XQueryParser.g:1387:11: LBRACKET bd= pm_BlockDecls bb= p_BlockBody RBRACKET
            {
            LBRACKET584=(CommonToken)match(input,LBRACKET,FOLLOW_LBRACKET_in_p_Block12219); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_LBRACKET.add(LBRACKET584);

            pushFollow(FOLLOW_pm_BlockDecls_in_p_Block12223);
            bd=pm_BlockDecls();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_pm_BlockDecls.add(bd.getTree());
            pushFollow(FOLLOW_p_BlockBody_in_p_Block12227);
            bb=p_BlockBody();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_p_BlockBody.add(bb.getTree());
            RBRACKET585=(CommonToken)match(input,RBRACKET,FOLLOW_RBRACKET_in_p_Block12229); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_RBRACKET.add(RBRACKET585);



            // AST REWRITE
            // elements: bd, bb
            // token labels: 
            // rule labels: bb, retval, bd
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_bb=new RewriteRuleSubtreeStream(adaptor,"rule bb",bb!=null?bb.tree:null);
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
            RewriteRuleSubtreeStream stream_bd=new RewriteRuleSubtreeStream(adaptor,"rule bd",bd!=null?bd.tree:null);

            root_0 = (XQDTCommonTree)adaptor.nil();
            // 1388:17: -> ^( Block $bd $bb)
            {
                // XQueryParser.g:1388:20: ^( Block $bd $bb)
                {
                XQDTCommonTree root_1 = (XQDTCommonTree)adaptor.nil();
                root_1 = (XQDTCommonTree)adaptor.becomeRoot((XQDTCommonTree)adaptor.create(Block, "Block"), root_1);

                adaptor.addChild(root_1, stream_bd.nextTree());
                adaptor.addChild(root_1, stream_bb.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (XQDTCommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (XQDTCommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "p_Block"

    public static class pm_BlockDecls_return extends ParserRuleReturnScope {
        XQDTCommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "pm_BlockDecls"
    // XQueryParser.g:1392:1: pm_BlockDecls : (bvd+= pm_BlockVarDecl )* -> ^( BlockDecls ( $bvd)* ) ;
    public final XQueryParser.pm_BlockDecls_return pm_BlockDecls() throws RecognitionException {
        XQueryParser.pm_BlockDecls_return retval = new XQueryParser.pm_BlockDecls_return();
        retval.start = input.LT(1);

        XQDTCommonTree root_0 = null;

        List list_bvd=null;
        XQueryParser.pm_BlockVarDecl_return bvd = null;
         bvd = null;
        RewriteRuleSubtreeStream stream_pm_BlockVarDecl=new RewriteRuleSubtreeStream(adaptor,"rule pm_BlockVarDecl");
        try {
            // XQueryParser.g:1393:9: ( (bvd+= pm_BlockVarDecl )* -> ^( BlockDecls ( $bvd)* ) )
            // XQueryParser.g:1393:11: (bvd+= pm_BlockVarDecl )*
            {
            // XQueryParser.g:1393:14: (bvd+= pm_BlockVarDecl )*
            loop186:
            do {
                int alt186=2;
                int LA186_0 = input.LA(1);

                if ( (LA186_0==DECLARE) ) {
                    int LA186_2 = input.LA(2);

                    if ( (LA186_2==DOLLAR) ) {
                        alt186=1;
                    }


                }


                switch (alt186) {
            	case 1 :
            	    // XQueryParser.g:1393:14: bvd+= pm_BlockVarDecl
            	    {
            	    pushFollow(FOLLOW_pm_BlockVarDecl_in_pm_BlockDecls12285);
            	    bvd=pm_BlockVarDecl();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) stream_pm_BlockVarDecl.add(bvd.getTree());
            	    if (list_bvd==null) list_bvd=new ArrayList();
            	    list_bvd.add(bvd.getTree());


            	    }
            	    break;

            	default :
            	    break loop186;
                }
            } while (true);



            // AST REWRITE
            // elements: bvd
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: bvd
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
            RewriteRuleSubtreeStream stream_bvd=new RewriteRuleSubtreeStream(adaptor,"token bvd",list_bvd);
            root_0 = (XQDTCommonTree)adaptor.nil();
            // 1394:17: -> ^( BlockDecls ( $bvd)* )
            {
                // XQueryParser.g:1394:20: ^( BlockDecls ( $bvd)* )
                {
                XQDTCommonTree root_1 = (XQDTCommonTree)adaptor.nil();
                root_1 = (XQDTCommonTree)adaptor.becomeRoot((XQDTCommonTree)adaptor.create(BlockDecls, "BlockDecls"), root_1);

                // XQueryParser.g:1394:33: ( $bvd)*
                while ( stream_bvd.hasNext() ) {
                    adaptor.addChild(root_1, stream_bvd.nextTree());

                }
                stream_bvd.reset();

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (XQDTCommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (XQDTCommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "pm_BlockDecls"

    public static class pm_BlockVarDecl_return extends ParserRuleReturnScope {
        XQDTCommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "pm_BlockVarDecl"
    // XQueryParser.g:1398:1: pm_BlockVarDecl : kd= DECLARE DOLLAR qn= p_VarName (td= p_TypeDeclaration )? ( BIND es= p_ExprSingle )? ( COMMA DOLLAR p_VarName ( p_TypeDeclaration )? ( BIND p_ExprSingle )? )* SEMICOLON -> ^( BlockVarDecl $qn ( $td)? ( $es)? ) ;
    public final XQueryParser.pm_BlockVarDecl_return pm_BlockVarDecl() throws RecognitionException {
        XQueryParser.pm_BlockVarDecl_return retval = new XQueryParser.pm_BlockVarDecl_return();
        retval.start = input.LT(1);

        XQDTCommonTree root_0 = null;

        CommonToken kd=null;
        CommonToken DOLLAR586=null;
        CommonToken BIND587=null;
        CommonToken COMMA588=null;
        CommonToken DOLLAR589=null;
        CommonToken BIND592=null;
        CommonToken SEMICOLON594=null;
        XQueryParser.p_VarName_return qn = null;

        XQueryParser.p_TypeDeclaration_return td = null;

        XQueryParser.p_ExprSingle_return es = null;

        XQueryParser.p_VarName_return p_VarName590 = null;

        XQueryParser.p_TypeDeclaration_return p_TypeDeclaration591 = null;

        XQueryParser.p_ExprSingle_return p_ExprSingle593 = null;


        XQDTCommonTree kd_tree=null;
        XQDTCommonTree DOLLAR586_tree=null;
        XQDTCommonTree BIND587_tree=null;
        XQDTCommonTree COMMA588_tree=null;
        XQDTCommonTree DOLLAR589_tree=null;
        XQDTCommonTree BIND592_tree=null;
        XQDTCommonTree SEMICOLON594_tree=null;
        RewriteRuleTokenStream stream_COMMA=new RewriteRuleTokenStream(adaptor,"token COMMA");
        RewriteRuleTokenStream stream_DOLLAR=new RewriteRuleTokenStream(adaptor,"token DOLLAR");
        RewriteRuleTokenStream stream_SEMICOLON=new RewriteRuleTokenStream(adaptor,"token SEMICOLON");
        RewriteRuleTokenStream stream_BIND=new RewriteRuleTokenStream(adaptor,"token BIND");
        RewriteRuleTokenStream stream_DECLARE=new RewriteRuleTokenStream(adaptor,"token DECLARE");
        RewriteRuleSubtreeStream stream_p_ExprSingle=new RewriteRuleSubtreeStream(adaptor,"rule p_ExprSingle");
        RewriteRuleSubtreeStream stream_p_TypeDeclaration=new RewriteRuleSubtreeStream(adaptor,"rule p_TypeDeclaration");
        RewriteRuleSubtreeStream stream_p_VarName=new RewriteRuleSubtreeStream(adaptor,"rule p_VarName");
        try {
            // XQueryParser.g:1399:9: (kd= DECLARE DOLLAR qn= p_VarName (td= p_TypeDeclaration )? ( BIND es= p_ExprSingle )? ( COMMA DOLLAR p_VarName ( p_TypeDeclaration )? ( BIND p_ExprSingle )? )* SEMICOLON -> ^( BlockVarDecl $qn ( $td)? ( $es)? ) )
            // XQueryParser.g:1399:11: kd= DECLARE DOLLAR qn= p_VarName (td= p_TypeDeclaration )? ( BIND es= p_ExprSingle )? ( COMMA DOLLAR p_VarName ( p_TypeDeclaration )? ( BIND p_ExprSingle )? )* SEMICOLON
            {
            kd=(CommonToken)match(input,DECLARE,FOLLOW_DECLARE_in_pm_BlockVarDecl12340); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_DECLARE.add(kd);

            if ( state.backtracking==0 ) {
              ak(kd);
            }
            DOLLAR586=(CommonToken)match(input,DOLLAR,FOLLOW_DOLLAR_in_pm_BlockVarDecl12344); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_DOLLAR.add(DOLLAR586);

            pushFollow(FOLLOW_p_VarName_in_pm_BlockVarDecl12348);
            qn=p_VarName();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_p_VarName.add(qn.getTree());
            // XQueryParser.g:1399:55: (td= p_TypeDeclaration )?
            int alt187=2;
            int LA187_0 = input.LA(1);

            if ( (LA187_0==AS) ) {
                alt187=1;
            }
            switch (alt187) {
                case 1 :
                    // XQueryParser.g:1399:55: td= p_TypeDeclaration
                    {
                    pushFollow(FOLLOW_p_TypeDeclaration_in_pm_BlockVarDecl12352);
                    td=p_TypeDeclaration();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_p_TypeDeclaration.add(td.getTree());

                    }
                    break;

            }

            // XQueryParser.g:1399:75: ( BIND es= p_ExprSingle )?
            int alt188=2;
            int LA188_0 = input.LA(1);

            if ( (LA188_0==BIND) ) {
                alt188=1;
            }
            switch (alt188) {
                case 1 :
                    // XQueryParser.g:1399:76: BIND es= p_ExprSingle
                    {
                    BIND587=(CommonToken)match(input,BIND,FOLLOW_BIND_in_pm_BlockVarDecl12356); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_BIND.add(BIND587);

                    pushFollow(FOLLOW_p_ExprSingle_in_pm_BlockVarDecl12360);
                    es=p_ExprSingle();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_p_ExprSingle.add(es.getTree());

                    }
                    break;

            }

            // XQueryParser.g:1399:99: ( COMMA DOLLAR p_VarName ( p_TypeDeclaration )? ( BIND p_ExprSingle )? )*
            loop191:
            do {
                int alt191=2;
                int LA191_0 = input.LA(1);

                if ( (LA191_0==COMMA) ) {
                    alt191=1;
                }


                switch (alt191) {
            	case 1 :
            	    // XQueryParser.g:1399:100: COMMA DOLLAR p_VarName ( p_TypeDeclaration )? ( BIND p_ExprSingle )?
            	    {
            	    COMMA588=(CommonToken)match(input,COMMA,FOLLOW_COMMA_in_pm_BlockVarDecl12365); if (state.failed) return retval; 
            	    if ( state.backtracking==0 ) stream_COMMA.add(COMMA588);

            	    DOLLAR589=(CommonToken)match(input,DOLLAR,FOLLOW_DOLLAR_in_pm_BlockVarDecl12367); if (state.failed) return retval; 
            	    if ( state.backtracking==0 ) stream_DOLLAR.add(DOLLAR589);

            	    pushFollow(FOLLOW_p_VarName_in_pm_BlockVarDecl12369);
            	    p_VarName590=p_VarName();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) stream_p_VarName.add(p_VarName590.getTree());
            	    // XQueryParser.g:1399:123: ( p_TypeDeclaration )?
            	    int alt189=2;
            	    int LA189_0 = input.LA(1);

            	    if ( (LA189_0==AS) ) {
            	        alt189=1;
            	    }
            	    switch (alt189) {
            	        case 1 :
            	            // XQueryParser.g:1399:123: p_TypeDeclaration
            	            {
            	            pushFollow(FOLLOW_p_TypeDeclaration_in_pm_BlockVarDecl12371);
            	            p_TypeDeclaration591=p_TypeDeclaration();

            	            state._fsp--;
            	            if (state.failed) return retval;
            	            if ( state.backtracking==0 ) stream_p_TypeDeclaration.add(p_TypeDeclaration591.getTree());

            	            }
            	            break;

            	    }

            	    // XQueryParser.g:1399:142: ( BIND p_ExprSingle )?
            	    int alt190=2;
            	    int LA190_0 = input.LA(1);

            	    if ( (LA190_0==BIND) ) {
            	        alt190=1;
            	    }
            	    switch (alt190) {
            	        case 1 :
            	            // XQueryParser.g:1399:143: BIND p_ExprSingle
            	            {
            	            BIND592=(CommonToken)match(input,BIND,FOLLOW_BIND_in_pm_BlockVarDecl12375); if (state.failed) return retval; 
            	            if ( state.backtracking==0 ) stream_BIND.add(BIND592);

            	            pushFollow(FOLLOW_p_ExprSingle_in_pm_BlockVarDecl12377);
            	            p_ExprSingle593=p_ExprSingle();

            	            state._fsp--;
            	            if (state.failed) return retval;
            	            if ( state.backtracking==0 ) stream_p_ExprSingle.add(p_ExprSingle593.getTree());

            	            }
            	            break;

            	    }


            	    }
            	    break;

            	default :
            	    break loop191;
                }
            } while (true);

            SEMICOLON594=(CommonToken)match(input,SEMICOLON,FOLLOW_SEMICOLON_in_pm_BlockVarDecl12383); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_SEMICOLON.add(SEMICOLON594);



            // AST REWRITE
            // elements: es, td, qn
            // token labels: 
            // rule labels: td, qn, es, retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_td=new RewriteRuleSubtreeStream(adaptor,"rule td",td!=null?td.tree:null);
            RewriteRuleSubtreeStream stream_qn=new RewriteRuleSubtreeStream(adaptor,"rule qn",qn!=null?qn.tree:null);
            RewriteRuleSubtreeStream stream_es=new RewriteRuleSubtreeStream(adaptor,"rule es",es!=null?es.tree:null);
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (XQDTCommonTree)adaptor.nil();
            // 1400:17: -> ^( BlockVarDecl $qn ( $td)? ( $es)? )
            {
                // XQueryParser.g:1400:21: ^( BlockVarDecl $qn ( $td)? ( $es)? )
                {
                XQDTCommonTree root_1 = (XQDTCommonTree)adaptor.nil();
                root_1 = (XQDTCommonTree)adaptor.becomeRoot((XQDTCommonTree)adaptor.create(BlockVarDecl, "BlockVarDecl"), root_1);

                adaptor.addChild(root_1, stream_qn.nextTree());
                // XQueryParser.g:1400:40: ( $td)?
                if ( stream_td.hasNext() ) {
                    adaptor.addChild(root_1, stream_td.nextTree());

                }
                stream_td.reset();
                // XQueryParser.g:1400:45: ( $es)?
                if ( stream_es.hasNext() ) {
                    adaptor.addChild(root_1, stream_es.nextTree());

                }
                stream_es.reset();

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (XQDTCommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (XQDTCommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "pm_BlockVarDecl"

    public static class p_BlockBody_return extends ParserRuleReturnScope {
        XQDTCommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "p_BlockBody"
    // XQueryParser.g:1404:1: p_BlockBody : pm_Expr ;
    public final XQueryParser.p_BlockBody_return p_BlockBody() throws RecognitionException {
        XQueryParser.p_BlockBody_return retval = new XQueryParser.p_BlockBody_return();
        retval.start = input.LT(1);

        XQDTCommonTree root_0 = null;

        XQueryParser.pm_Expr_return pm_Expr595 = null;



        try {
            // XQueryParser.g:1405:9: ( pm_Expr )
            // XQueryParser.g:1405:11: pm_Expr
            {
            root_0 = (XQDTCommonTree)adaptor.nil();

            pushFollow(FOLLOW_pm_Expr_in_p_BlockBody12443);
            pm_Expr595=pm_Expr();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, pm_Expr595.getTree());

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (XQDTCommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (XQDTCommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "p_BlockBody"

    public static class p_AssignmentExpr_return extends ParserRuleReturnScope {
        XQDTCommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "p_AssignmentExpr"
    // XQueryParser.g:1409:1: p_AssignmentExpr : ks= SET DOLLAR p_VarName BIND p_ExprSingle ;
    public final XQueryParser.p_AssignmentExpr_return p_AssignmentExpr() throws RecognitionException {
        XQueryParser.p_AssignmentExpr_return retval = new XQueryParser.p_AssignmentExpr_return();
        retval.start = input.LT(1);

        XQDTCommonTree root_0 = null;

        CommonToken ks=null;
        CommonToken DOLLAR596=null;
        CommonToken BIND598=null;
        XQueryParser.p_VarName_return p_VarName597 = null;

        XQueryParser.p_ExprSingle_return p_ExprSingle599 = null;


        XQDTCommonTree ks_tree=null;
        XQDTCommonTree DOLLAR596_tree=null;
        XQDTCommonTree BIND598_tree=null;

        try {
            // XQueryParser.g:1410:9: (ks= SET DOLLAR p_VarName BIND p_ExprSingle )
            // XQueryParser.g:1410:11: ks= SET DOLLAR p_VarName BIND p_ExprSingle
            {
            root_0 = (XQDTCommonTree)adaptor.nil();

            ks=(CommonToken)match(input,SET,FOLLOW_SET_in_p_AssignmentExpr12471); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            ks_tree = (XQDTCommonTree)adaptor.create(ks);
            adaptor.addChild(root_0, ks_tree);
            }
            if ( state.backtracking==0 ) {
              ak(ks);
            }
            DOLLAR596=(CommonToken)match(input,DOLLAR,FOLLOW_DOLLAR_in_p_AssignmentExpr12475); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            DOLLAR596_tree = (XQDTCommonTree)adaptor.create(DOLLAR596);
            adaptor.addChild(root_0, DOLLAR596_tree);
            }
            pushFollow(FOLLOW_p_VarName_in_p_AssignmentExpr12477);
            p_VarName597=p_VarName();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, p_VarName597.getTree());
            BIND598=(CommonToken)match(input,BIND,FOLLOW_BIND_in_p_AssignmentExpr12479); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            BIND598_tree = (XQDTCommonTree)adaptor.create(BIND598);
            adaptor.addChild(root_0, BIND598_tree);
            }
            pushFollow(FOLLOW_p_ExprSingle_in_p_AssignmentExpr12481);
            p_ExprSingle599=p_ExprSingle();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, p_ExprSingle599.getTree());

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (XQDTCommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (XQDTCommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "p_AssignmentExpr"

    public static class p_ExitExpr_return extends ParserRuleReturnScope {
        XQDTCommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "p_ExitExpr"
    // XQueryParser.g:1414:1: p_ExitExpr : ke= EXIT kr= RETURNING p_ExprSingle ;
    public final XQueryParser.p_ExitExpr_return p_ExitExpr() throws RecognitionException {
        XQueryParser.p_ExitExpr_return retval = new XQueryParser.p_ExitExpr_return();
        retval.start = input.LT(1);

        XQDTCommonTree root_0 = null;

        CommonToken ke=null;
        CommonToken kr=null;
        XQueryParser.p_ExprSingle_return p_ExprSingle600 = null;


        XQDTCommonTree ke_tree=null;
        XQDTCommonTree kr_tree=null;

        try {
            // XQueryParser.g:1415:9: (ke= EXIT kr= RETURNING p_ExprSingle )
            // XQueryParser.g:1415:11: ke= EXIT kr= RETURNING p_ExprSingle
            {
            root_0 = (XQDTCommonTree)adaptor.nil();

            ke=(CommonToken)match(input,EXIT,FOLLOW_EXIT_in_p_ExitExpr12509); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            ke_tree = (XQDTCommonTree)adaptor.create(ke);
            adaptor.addChild(root_0, ke_tree);
            }
            if ( state.backtracking==0 ) {
              ak(ke);
            }
            kr=(CommonToken)match(input,RETURNING,FOLLOW_RETURNING_in_p_ExitExpr12515); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            kr_tree = (XQDTCommonTree)adaptor.create(kr);
            adaptor.addChild(root_0, kr_tree);
            }
            if ( state.backtracking==0 ) {
              ak(kr);
            }
            pushFollow(FOLLOW_p_ExprSingle_in_p_ExitExpr12519);
            p_ExprSingle600=p_ExprSingle();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, p_ExprSingle600.getTree());

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (XQDTCommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (XQDTCommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "p_ExitExpr"

    public static class p_WhileExpr_return extends ParserRuleReturnScope {
        XQDTCommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "p_WhileExpr"
    // XQueryParser.g:1419:1: p_WhileExpr : kw= WHILE LPAREN p_ExprSingle RPAREN p_WhileBody ;
    public final XQueryParser.p_WhileExpr_return p_WhileExpr() throws RecognitionException {
        XQueryParser.p_WhileExpr_return retval = new XQueryParser.p_WhileExpr_return();
        retval.start = input.LT(1);

        XQDTCommonTree root_0 = null;

        CommonToken kw=null;
        CommonToken LPAREN601=null;
        CommonToken RPAREN603=null;
        XQueryParser.p_ExprSingle_return p_ExprSingle602 = null;

        XQueryParser.p_WhileBody_return p_WhileBody604 = null;


        XQDTCommonTree kw_tree=null;
        XQDTCommonTree LPAREN601_tree=null;
        XQDTCommonTree RPAREN603_tree=null;

        try {
            // XQueryParser.g:1420:9: (kw= WHILE LPAREN p_ExprSingle RPAREN p_WhileBody )
            // XQueryParser.g:1420:11: kw= WHILE LPAREN p_ExprSingle RPAREN p_WhileBody
            {
            root_0 = (XQDTCommonTree)adaptor.nil();

            kw=(CommonToken)match(input,WHILE,FOLLOW_WHILE_in_p_WhileExpr12547); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            kw_tree = (XQDTCommonTree)adaptor.create(kw);
            adaptor.addChild(root_0, kw_tree);
            }
            if ( state.backtracking==0 ) {
              ak(kw);
            }
            LPAREN601=(CommonToken)match(input,LPAREN,FOLLOW_LPAREN_in_p_WhileExpr12551); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            LPAREN601_tree = (XQDTCommonTree)adaptor.create(LPAREN601);
            adaptor.addChild(root_0, LPAREN601_tree);
            }
            pushFollow(FOLLOW_p_ExprSingle_in_p_WhileExpr12553);
            p_ExprSingle602=p_ExprSingle();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, p_ExprSingle602.getTree());
            RPAREN603=(CommonToken)match(input,RPAREN,FOLLOW_RPAREN_in_p_WhileExpr12555); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            RPAREN603_tree = (XQDTCommonTree)adaptor.create(RPAREN603);
            adaptor.addChild(root_0, RPAREN603_tree);
            }
            pushFollow(FOLLOW_p_WhileBody_in_p_WhileExpr12557);
            p_WhileBody604=p_WhileBody();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, p_WhileBody604.getTree());

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (XQDTCommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (XQDTCommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "p_WhileExpr"

    public static class p_WhileBody_return extends ParserRuleReturnScope {
        XQDTCommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "p_WhileBody"
    // XQueryParser.g:1424:1: p_WhileBody : p_Block ;
    public final XQueryParser.p_WhileBody_return p_WhileBody() throws RecognitionException {
        XQueryParser.p_WhileBody_return retval = new XQueryParser.p_WhileBody_return();
        retval.start = input.LT(1);

        XQDTCommonTree root_0 = null;

        XQueryParser.p_Block_return p_Block605 = null;



        try {
            // XQueryParser.g:1425:9: ( p_Block )
            // XQueryParser.g:1425:11: p_Block
            {
            root_0 = (XQDTCommonTree)adaptor.nil();

            pushFollow(FOLLOW_p_Block_in_p_WhileBody12583);
            p_Block605=p_Block();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, p_Block605.getTree());

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (XQDTCommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (XQDTCommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "p_WhileBody"

    public static class p_EvalExpr_return extends ParserRuleReturnScope {
        XQDTCommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "p_EvalExpr"
    // XQueryParser.g:1433:1: p_EvalExpr : ( p_UsingClause )? ke= EVAL LBRACKET p_ExprSingle RBRACKET ;
    public final XQueryParser.p_EvalExpr_return p_EvalExpr() throws RecognitionException {
        XQueryParser.p_EvalExpr_return retval = new XQueryParser.p_EvalExpr_return();
        retval.start = input.LT(1);

        XQDTCommonTree root_0 = null;

        CommonToken ke=null;
        CommonToken LBRACKET607=null;
        CommonToken RBRACKET609=null;
        XQueryParser.p_UsingClause_return p_UsingClause606 = null;

        XQueryParser.p_ExprSingle_return p_ExprSingle608 = null;


        XQDTCommonTree ke_tree=null;
        XQDTCommonTree LBRACKET607_tree=null;
        XQDTCommonTree RBRACKET609_tree=null;

        try {
            // XQueryParser.g:1434:9: ( ( p_UsingClause )? ke= EVAL LBRACKET p_ExprSingle RBRACKET )
            // XQueryParser.g:1434:11: ( p_UsingClause )? ke= EVAL LBRACKET p_ExprSingle RBRACKET
            {
            root_0 = (XQDTCommonTree)adaptor.nil();

            // XQueryParser.g:1434:11: ( p_UsingClause )?
            int alt192=2;
            int LA192_0 = input.LA(1);

            if ( (LA192_0==USING) ) {
                alt192=1;
            }
            switch (alt192) {
                case 1 :
                    // XQueryParser.g:1434:11: p_UsingClause
                    {
                    pushFollow(FOLLOW_p_UsingClause_in_p_EvalExpr12613);
                    p_UsingClause606=p_UsingClause();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, p_UsingClause606.getTree());

                    }
                    break;

            }

            ke=(CommonToken)match(input,EVAL,FOLLOW_EVAL_in_p_EvalExpr12618); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            ke_tree = (XQDTCommonTree)adaptor.create(ke);
            adaptor.addChild(root_0, ke_tree);
            }
            if ( state.backtracking==0 ) {
              ak(ke);
            }
            LBRACKET607=(CommonToken)match(input,LBRACKET,FOLLOW_LBRACKET_in_p_EvalExpr12622); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            LBRACKET607_tree = (XQDTCommonTree)adaptor.create(LBRACKET607);
            adaptor.addChild(root_0, LBRACKET607_tree);
            }
            pushFollow(FOLLOW_p_ExprSingle_in_p_EvalExpr12624);
            p_ExprSingle608=p_ExprSingle();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, p_ExprSingle608.getTree());
            RBRACKET609=(CommonToken)match(input,RBRACKET,FOLLOW_RBRACKET_in_p_EvalExpr12626); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            RBRACKET609_tree = (XQDTCommonTree)adaptor.create(RBRACKET609);
            adaptor.addChild(root_0, RBRACKET609_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (XQDTCommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (XQDTCommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "p_EvalExpr"

    public static class p_UsingClause_return extends ParserRuleReturnScope {
        XQDTCommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "p_UsingClause"
    // XQueryParser.g:1437:1: p_UsingClause : ku= USING DOLLAR p_VarName ( COMMA DOLLAR p_VarName )* ;
    public final XQueryParser.p_UsingClause_return p_UsingClause() throws RecognitionException {
        XQueryParser.p_UsingClause_return retval = new XQueryParser.p_UsingClause_return();
        retval.start = input.LT(1);

        XQDTCommonTree root_0 = null;

        CommonToken ku=null;
        CommonToken DOLLAR610=null;
        CommonToken COMMA612=null;
        CommonToken DOLLAR613=null;
        XQueryParser.p_VarName_return p_VarName611 = null;

        XQueryParser.p_VarName_return p_VarName614 = null;


        XQDTCommonTree ku_tree=null;
        XQDTCommonTree DOLLAR610_tree=null;
        XQDTCommonTree COMMA612_tree=null;
        XQDTCommonTree DOLLAR613_tree=null;

        try {
            // XQueryParser.g:1438:9: (ku= USING DOLLAR p_VarName ( COMMA DOLLAR p_VarName )* )
            // XQueryParser.g:1438:11: ku= USING DOLLAR p_VarName ( COMMA DOLLAR p_VarName )*
            {
            root_0 = (XQDTCommonTree)adaptor.nil();

            ku=(CommonToken)match(input,USING,FOLLOW_USING_in_p_UsingClause12653); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            ku_tree = (XQDTCommonTree)adaptor.create(ku);
            adaptor.addChild(root_0, ku_tree);
            }
            if ( state.backtracking==0 ) {
              ak(ku);
            }
            DOLLAR610=(CommonToken)match(input,DOLLAR,FOLLOW_DOLLAR_in_p_UsingClause12658); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            DOLLAR610_tree = (XQDTCommonTree)adaptor.create(DOLLAR610);
            adaptor.addChild(root_0, DOLLAR610_tree);
            }
            pushFollow(FOLLOW_p_VarName_in_p_UsingClause12660);
            p_VarName611=p_VarName();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, p_VarName611.getTree());
            // XQueryParser.g:1438:49: ( COMMA DOLLAR p_VarName )*
            loop193:
            do {
                int alt193=2;
                int LA193_0 = input.LA(1);

                if ( (LA193_0==COMMA) ) {
                    alt193=1;
                }


                switch (alt193) {
            	case 1 :
            	    // XQueryParser.g:1438:50: COMMA DOLLAR p_VarName
            	    {
            	    COMMA612=(CommonToken)match(input,COMMA,FOLLOW_COMMA_in_p_UsingClause12663); if (state.failed) return retval;
            	    if ( state.backtracking==0 ) {
            	    COMMA612_tree = (XQDTCommonTree)adaptor.create(COMMA612);
            	    adaptor.addChild(root_0, COMMA612_tree);
            	    }
            	    DOLLAR613=(CommonToken)match(input,DOLLAR,FOLLOW_DOLLAR_in_p_UsingClause12665); if (state.failed) return retval;
            	    if ( state.backtracking==0 ) {
            	    DOLLAR613_tree = (XQDTCommonTree)adaptor.create(DOLLAR613);
            	    adaptor.addChild(root_0, DOLLAR613_tree);
            	    }
            	    pushFollow(FOLLOW_p_VarName_in_p_UsingClause12667);
            	    p_VarName614=p_VarName();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, p_VarName614.getTree());

            	    }
            	    break;

            	default :
            	    break loop193;
                }
            } while (true);


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (XQDTCommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (XQDTCommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "p_UsingClause"

    // $ANTLR start synpred1_XQueryParser
    public final void synpred1_XQueryParser_fragment() throws RecognitionException {   
        // XQueryParser.g:655:11: ( SLASH p_RelativePathExpr )
        // XQueryParser.g:655:12: SLASH p_RelativePathExpr
        {
        match(input,SLASH,FOLLOW_SLASH_in_synpred1_XQueryParser5914); if (state.failed) return ;
        pushFollow(FOLLOW_p_RelativePathExpr_in_synpred1_XQueryParser5916);
        p_RelativePathExpr();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred1_XQueryParser

    // $ANTLR start synpred2_XQueryParser
    public final void synpred2_XQueryParser_fragment() throws RecognitionException {   
        // XQueryParser.g:1003:26: ( p_OccurrenceIndicator )
        // XQueryParser.g:1003:27: p_OccurrenceIndicator
        {
        pushFollow(FOLLOW_p_OccurrenceIndicator_in_synpred2_XQueryParser8536);
        p_OccurrenceIndicator();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred2_XQueryParser

    // Delegated rules

    public final boolean synpred2_XQueryParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred2_XQueryParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred1_XQueryParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred1_XQueryParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }


    protected DFA8 dfa8 = new DFA8(this);
    protected DFA48 dfa48 = new DFA48(this);
    protected DFA102 dfa102 = new DFA102(this);
    protected DFA109 dfa109 = new DFA109(this);
    protected DFA111 dfa111 = new DFA111(this);
    protected DFA113 dfa113 = new DFA113(this);
    protected DFA118 dfa118 = new DFA118(this);
    protected DFA123 dfa123 = new DFA123(this);
    protected DFA153 dfa153 = new DFA153(this);
    protected DFA155 dfa155 = new DFA155(this);
    static final String DFA8_eotS =
        "\13\uffff";
    static final String DFA8_eofS =
        "\13\uffff";
    static final String DFA8_minS =
        "\1\42\1\27\1\uffff\1\36\7\uffff";
    static final String DFA8_maxS =
        "\1\42\1\u0097\1\uffff\1\122\7\uffff";
    static final String DFA8_acceptS =
        "\2\uffff\1\1\1\uffff\1\3\1\4\1\5\1\7\1\10\1\2\1\6";
    static final String DFA8_specialS =
        "\1\uffff\1\0\11\uffff}>";
    static final String[] DFA8_transitionS = {
            "\1\1",
            "\1\4\1\2\7\uffff\1\5\1\10\1\uffff\1\3\60\uffff\1\6\102\uffff"+
            "\1\7",
            "",
            "\1\11\63\uffff\1\12",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };

    static final short[] DFA8_eot = DFA.unpackEncodedString(DFA8_eotS);
    static final short[] DFA8_eof = DFA.unpackEncodedString(DFA8_eofS);
    static final char[] DFA8_min = DFA.unpackEncodedStringToUnsignedChars(DFA8_minS);
    static final char[] DFA8_max = DFA.unpackEncodedStringToUnsignedChars(DFA8_maxS);
    static final short[] DFA8_accept = DFA.unpackEncodedString(DFA8_acceptS);
    static final short[] DFA8_special = DFA.unpackEncodedString(DFA8_specialS);
    static final short[][] DFA8_transition;

    static {
        int numStates = DFA8_transitionS.length;
        DFA8_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA8_transition[i] = DFA.unpackEncodedString(DFA8_transitionS[i]);
        }
    }

    class DFA8 extends DFA {

        public DFA8(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 8;
            this.eot = DFA8_eot;
            this.eof = DFA8_eof;
            this.min = DFA8_min;
            this.max = DFA8_max;
            this.accept = DFA8_accept;
            this.special = DFA8_special;
            this.transition = DFA8_transition;
        }
        public String getDescription() {
            return "183:1: p_Setter : ( pm_BoundarySpaceDecl | pm_DefaultCollationDecl | pm_BaseURIDecl | pm_ConstructionDecl | pm_OrderingModeDecl | pm_EmptyOrderDecl | {...}? => pm_RevalidationDecl | pm_CopyNamespacesDecl );";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA8_1 = input.LA(1);

                         
                        int index8_1 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA8_1==BOUNDARY_SPACE) ) {s = 2;}

                        else if ( (LA8_1==DEFAULT) ) {s = 3;}

                        else if ( (LA8_1==BASE_URI) ) {s = 4;}

                        else if ( (LA8_1==CONSTRUCTION) ) {s = 5;}

                        else if ( (LA8_1==ORDERING) ) {s = 6;}

                        else if ( (LA8_1==REVALIDATION) && ((lc(XQU)))) {s = 7;}

                        else if ( (LA8_1==COPY_NAMESPACES) ) {s = 8;}

                         
                        input.seek(index8_1);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 8, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static final String DFA48_eotS =
        "\43\uffff";
    static final String DFA48_eofS =
        "\1\uffff\22\23\20\uffff";
    static final String DFA48_minS =
        "\1\20\22\22\20\uffff";
    static final String DFA48_maxS =
        "\1\u00e3\22\u00c9\20\uffff";
    static final String DFA48_acceptS =
        "\23\uffff\1\20\1\1\1\2\1\3\1\4\1\5\1\6\1\7\1\10\1\11\1\12\1\13"+
        "\1\14\1\15\1\16\1\17";
    static final String DFA48_specialS =
        "\10\uffff\1\0\1\7\1\4\1\3\1\1\1\2\1\5\1\12\1\10\1\11\1\6\20\uffff}>";
    static final String[] DFA48_transitionS = {
            "\40\23\1\4\4\23\1\1\5\23\1\6\12\23\1\2\31\23\1\3\7\23\1\5\35"+
            "\23\1\7\6\23\1\16\1\13\1\23\1\12\4\23\1\14\1\15\5\23\1\17\1"+
            "\23\1\21\1\uffff\1\23\1\20\1\23\1\22\1\11\1\10\5\23\1\uffff"+
            "\1\23\12\uffff\4\23\5\uffff\4\23\14\uffff\1\23\2\uffff\2\23"+
            "\2\uffff\1\23\6\uffff\6\23",
            "\3\23\5\uffff\3\23\1\uffff\1\23\4\uffff\1\23\2\uffff\2\23"+
            "\3\uffff\2\23\2\uffff\1\23\1\uffff\1\23\3\uffff\1\23\1\uffff"+
            "\1\23\1\uffff\2\23\4\uffff\3\23\2\uffff\1\23\1\uffff\3\23\2"+
            "\uffff\1\23\5\uffff\2\23\7\uffff\2\23\5\uffff\1\23\4\uffff\2"+
            "\23\1\uffff\1\23\4\uffff\1\23\3\uffff\1\23\3\uffff\2\23\6\uffff"+
            "\1\23\5\uffff\1\24\1\23\1\uffff\1\24\3\uffff\2\23\4\uffff\1"+
            "\23\1\uffff\1\23\7\uffff\1\23\16\uffff\2\23\1\24\1\uffff\4\23"+
            "\1\uffff\1\23\1\uffff\1\23\1\uffff\13\23\2\uffff\1\23\3\uffff"+
            "\2\23",
            "\3\23\5\uffff\3\23\1\uffff\1\23\4\uffff\1\23\2\uffff\2\23"+
            "\3\uffff\2\23\2\uffff\1\23\1\uffff\1\23\3\uffff\1\23\1\uffff"+
            "\1\23\1\uffff\2\23\4\uffff\3\23\2\uffff\1\23\1\uffff\3\23\2"+
            "\uffff\1\23\5\uffff\2\23\7\uffff\2\23\5\uffff\1\23\4\uffff\2"+
            "\23\1\uffff\1\23\4\uffff\1\23\3\uffff\1\23\3\uffff\2\23\6\uffff"+
            "\1\23\6\uffff\1\23\5\uffff\2\23\4\uffff\1\23\1\uffff\1\23\7"+
            "\uffff\1\23\16\uffff\2\23\1\24\1\uffff\4\23\1\uffff\1\23\1\uffff"+
            "\1\23\1\uffff\13\23\2\uffff\1\23\3\uffff\2\23",
            "\3\23\5\uffff\3\23\1\uffff\1\23\4\uffff\1\23\2\uffff\2\23"+
            "\3\uffff\2\23\2\uffff\1\23\1\uffff\1\23\3\uffff\1\23\1\uffff"+
            "\1\23\1\uffff\2\23\4\uffff\3\23\2\uffff\1\23\1\uffff\3\23\2"+
            "\uffff\1\23\5\uffff\2\23\7\uffff\2\23\5\uffff\1\23\4\uffff\2"+
            "\23\1\uffff\1\23\4\uffff\1\23\3\uffff\1\23\3\uffff\2\23\6\uffff"+
            "\1\23\6\uffff\1\23\5\uffff\2\23\4\uffff\1\23\1\uffff\1\23\7"+
            "\uffff\1\23\16\uffff\2\23\1\25\1\uffff\4\23\1\uffff\1\23\1\uffff"+
            "\1\23\1\uffff\13\23\2\uffff\1\23\3\uffff\2\23",
            "\3\23\5\uffff\3\23\1\uffff\1\23\4\uffff\1\23\2\uffff\2\23"+
            "\3\uffff\2\23\2\uffff\1\23\1\uffff\1\23\3\uffff\1\23\1\uffff"+
            "\1\23\1\uffff\2\23\4\uffff\3\23\2\uffff\1\23\1\uffff\3\23\2"+
            "\uffff\1\23\5\uffff\2\23\7\uffff\2\23\5\uffff\1\23\4\uffff\2"+
            "\23\1\uffff\1\23\4\uffff\1\23\3\uffff\1\23\3\uffff\2\23\6\uffff"+
            "\1\23\6\uffff\1\23\5\uffff\2\23\4\uffff\1\23\1\uffff\1\23\7"+
            "\uffff\1\23\16\uffff\2\23\1\25\1\uffff\4\23\1\uffff\1\23\1\uffff"+
            "\1\23\1\uffff\13\23\2\uffff\1\23\3\uffff\2\23",
            "\3\23\5\uffff\3\23\1\uffff\1\23\4\uffff\1\23\2\uffff\2\23"+
            "\3\uffff\2\23\2\uffff\1\23\1\uffff\1\23\3\uffff\1\23\1\uffff"+
            "\1\23\1\uffff\2\23\4\uffff\3\23\2\uffff\1\23\1\uffff\3\23\2"+
            "\uffff\1\23\5\uffff\2\23\7\uffff\2\23\5\uffff\1\23\4\uffff\2"+
            "\23\1\uffff\1\23\4\uffff\1\23\3\uffff\1\23\3\uffff\2\23\6\uffff"+
            "\1\23\6\uffff\1\23\5\uffff\2\23\4\uffff\1\23\1\uffff\1\23\7"+
            "\uffff\1\23\16\uffff\1\26\1\23\2\uffff\4\23\1\uffff\1\23\1\uffff"+
            "\1\23\1\uffff\13\23\2\uffff\1\23\3\uffff\2\23",
            "\3\23\5\uffff\3\23\1\uffff\1\23\4\uffff\1\23\2\uffff\2\23"+
            "\3\uffff\2\23\2\uffff\1\23\1\uffff\1\23\3\uffff\1\23\1\uffff"+
            "\1\23\1\uffff\2\23\4\uffff\3\23\2\uffff\1\23\1\uffff\3\23\2"+
            "\uffff\1\23\5\uffff\2\23\7\uffff\2\23\5\uffff\1\23\4\uffff\2"+
            "\23\1\uffff\1\23\4\uffff\1\23\3\uffff\1\23\3\uffff\2\23\6\uffff"+
            "\1\23\6\uffff\1\23\5\uffff\2\23\4\uffff\1\23\1\uffff\1\23\7"+
            "\uffff\1\23\16\uffff\1\27\1\23\2\uffff\4\23\1\uffff\1\23\1\uffff"+
            "\1\23\1\uffff\13\23\2\uffff\1\23\3\uffff\2\23",
            "\3\23\5\uffff\3\23\1\uffff\1\23\4\uffff\1\23\2\uffff\2\23"+
            "\3\uffff\2\23\2\uffff\1\23\1\uffff\1\23\3\uffff\1\23\1\uffff"+
            "\1\23\1\uffff\2\23\4\uffff\3\23\2\uffff\1\23\1\uffff\3\23\2"+
            "\uffff\1\23\5\uffff\2\23\7\uffff\2\23\5\uffff\1\23\4\uffff\2"+
            "\23\1\uffff\1\23\4\uffff\1\23\3\uffff\1\23\3\uffff\2\23\6\uffff"+
            "\1\23\6\uffff\1\23\5\uffff\2\23\4\uffff\1\23\1\uffff\1\23\7"+
            "\uffff\1\23\16\uffff\2\23\1\uffff\1\30\4\23\1\uffff\1\23\1\uffff"+
            "\1\23\1\uffff\13\23\2\uffff\1\23\3\uffff\2\23",
            "\3\23\5\uffff\3\23\1\uffff\1\23\4\uffff\1\23\2\uffff\2\23"+
            "\3\uffff\2\23\2\uffff\1\23\1\uffff\1\23\3\uffff\1\23\1\uffff"+
            "\1\23\1\uffff\2\23\4\uffff\3\23\2\uffff\1\23\1\uffff\3\23\2"+
            "\uffff\1\23\5\uffff\2\23\7\uffff\2\23\5\uffff\1\23\4\uffff\2"+
            "\23\1\uffff\1\23\4\uffff\1\23\3\uffff\1\23\3\uffff\2\23\6\uffff"+
            "\1\23\6\uffff\1\23\5\uffff\2\23\4\uffff\1\23\1\uffff\1\23\7"+
            "\uffff\1\23\16\uffff\2\23\1\31\1\uffff\4\23\1\uffff\1\23\1\uffff"+
            "\1\23\1\uffff\13\23\2\uffff\1\23\3\uffff\2\23",
            "\3\23\5\uffff\3\23\1\uffff\1\23\4\uffff\1\23\2\uffff\2\23"+
            "\3\uffff\2\23\2\uffff\1\23\1\uffff\1\23\3\uffff\1\23\1\uffff"+
            "\1\23\1\uffff\2\23\4\uffff\3\23\2\uffff\1\23\1\uffff\3\23\2"+
            "\uffff\1\23\5\uffff\2\23\7\uffff\2\23\5\uffff\1\23\4\uffff\2"+
            "\23\1\uffff\1\23\4\uffff\1\23\3\uffff\1\23\3\uffff\2\23\6\uffff"+
            "\1\23\6\uffff\1\23\5\uffff\2\23\4\uffff\1\23\1\uffff\1\23\7"+
            "\uffff\1\23\16\uffff\2\23\1\uffff\1\31\4\23\1\uffff\1\23\1\uffff"+
            "\1\23\1\uffff\13\23\2\uffff\1\23\3\uffff\2\23",
            "\3\23\5\uffff\3\23\1\uffff\1\23\4\uffff\1\23\2\uffff\2\23"+
            "\3\uffff\2\23\2\uffff\1\23\1\uffff\1\23\3\uffff\1\23\1\uffff"+
            "\1\23\1\uffff\2\23\4\uffff\3\23\2\uffff\1\23\1\uffff\3\23\2"+
            "\uffff\1\23\2\uffff\1\32\2\uffff\2\23\7\uffff\2\23\5\uffff\1"+
            "\23\4\uffff\2\23\1\uffff\1\23\4\uffff\1\23\3\uffff\1\23\3\uffff"+
            "\2\23\6\uffff\1\23\6\uffff\1\23\5\uffff\2\23\4\uffff\1\23\1"+
            "\uffff\1\23\1\32\6\uffff\1\23\16\uffff\2\23\2\uffff\4\23\1\uffff"+
            "\1\23\1\uffff\1\23\1\uffff\13\23\2\uffff\1\23\3\uffff\2\23",
            "\3\23\5\uffff\3\23\1\uffff\1\23\4\uffff\1\23\2\uffff\2\23"+
            "\3\uffff\2\23\2\uffff\1\23\1\uffff\1\23\3\uffff\1\23\1\uffff"+
            "\1\23\1\uffff\2\23\4\uffff\3\23\2\uffff\1\23\1\uffff\3\23\2"+
            "\uffff\1\23\2\uffff\1\33\2\uffff\2\23\7\uffff\2\23\5\uffff\1"+
            "\23\4\uffff\2\23\1\uffff\1\23\4\uffff\1\23\3\uffff\1\23\3\uffff"+
            "\2\23\6\uffff\1\23\6\uffff\1\23\5\uffff\2\23\4\uffff\1\23\1"+
            "\uffff\1\23\1\33\6\uffff\1\23\16\uffff\2\23\2\uffff\4\23\1\uffff"+
            "\1\23\1\uffff\1\23\1\uffff\13\23\2\uffff\1\23\3\uffff\2\23",
            "\3\23\5\uffff\3\23\1\uffff\1\23\4\uffff\1\23\2\uffff\2\23"+
            "\3\uffff\2\23\2\uffff\1\23\1\uffff\1\23\3\uffff\1\23\1\uffff"+
            "\1\23\1\uffff\2\23\4\uffff\3\23\2\uffff\1\23\1\uffff\3\23\2"+
            "\uffff\1\23\2\uffff\1\34\2\uffff\2\23\7\uffff\2\23\5\uffff\1"+
            "\23\4\uffff\2\23\1\uffff\1\23\4\uffff\1\23\3\uffff\1\23\3\uffff"+
            "\2\23\6\uffff\1\23\6\uffff\1\23\5\uffff\2\23\4\uffff\1\23\1"+
            "\uffff\1\23\7\uffff\1\23\16\uffff\2\23\2\uffff\4\23\1\uffff"+
            "\1\23\1\uffff\1\23\1\uffff\13\23\2\uffff\1\23\3\uffff\2\23",
            "\3\23\5\uffff\3\23\1\uffff\1\23\4\uffff\1\23\2\uffff\2\23"+
            "\3\uffff\2\23\2\uffff\1\23\1\uffff\1\23\3\uffff\1\23\1\uffff"+
            "\1\23\1\uffff\2\23\4\uffff\3\23\2\uffff\1\23\1\uffff\3\23\2"+
            "\uffff\1\23\2\uffff\1\35\2\uffff\2\23\7\uffff\2\23\5\uffff\1"+
            "\23\4\uffff\2\23\1\uffff\1\23\4\uffff\1\23\3\uffff\1\23\3\uffff"+
            "\2\23\6\uffff\1\23\6\uffff\1\23\5\uffff\2\23\4\uffff\1\23\1"+
            "\uffff\1\23\6\uffff\1\35\1\23\16\uffff\2\23\2\uffff\4\23\1\uffff"+
            "\1\23\1\uffff\1\23\1\uffff\13\23\2\uffff\1\23\3\uffff\2\23",
            "\3\23\5\uffff\3\23\1\uffff\1\23\4\uffff\1\23\2\uffff\2\23"+
            "\3\uffff\2\23\2\uffff\1\23\1\uffff\1\23\3\uffff\1\23\1\uffff"+
            "\1\23\1\uffff\2\23\4\uffff\3\23\2\uffff\1\23\1\uffff\3\23\2"+
            "\uffff\1\23\5\uffff\2\23\7\uffff\2\23\5\uffff\1\23\4\uffff\2"+
            "\23\1\uffff\1\23\4\uffff\1\23\3\uffff\1\23\3\uffff\2\23\6\uffff"+
            "\1\23\6\uffff\1\23\5\uffff\2\23\4\uffff\1\23\1\uffff\1\23\7"+
            "\uffff\1\23\16\uffff\2\23\1\36\1\uffff\4\23\1\uffff\1\23\1\uffff"+
            "\1\23\1\uffff\13\23\2\uffff\1\23\3\uffff\2\23",
            "\3\23\5\uffff\3\23\1\uffff\1\23\4\uffff\1\23\2\uffff\2\23"+
            "\3\uffff\2\23\2\uffff\1\23\1\uffff\1\23\3\uffff\1\23\1\uffff"+
            "\1\23\1\uffff\2\23\4\uffff\3\23\2\uffff\1\23\1\uffff\3\23\2"+
            "\uffff\1\23\5\uffff\2\23\7\uffff\2\23\5\uffff\1\23\4\uffff\2"+
            "\23\1\uffff\1\23\4\uffff\1\23\3\uffff\1\23\3\uffff\2\23\6\uffff"+
            "\1\23\6\uffff\1\23\5\uffff\2\23\4\uffff\1\23\1\uffff\1\23\7"+
            "\uffff\1\23\16\uffff\2\23\1\uffff\1\37\4\23\1\uffff\1\23\1\uffff"+
            "\1\23\1\uffff\13\23\2\uffff\1\23\3\uffff\2\23",
            "\3\23\5\uffff\3\23\1\uffff\1\23\4\uffff\1\23\2\uffff\2\23"+
            "\3\uffff\2\23\2\uffff\1\23\1\uffff\1\23\3\uffff\1\23\1\uffff"+
            "\1\23\1\uffff\2\23\4\uffff\3\23\2\uffff\1\23\1\uffff\3\23\2"+
            "\uffff\1\23\5\uffff\2\23\7\uffff\2\23\5\uffff\1\23\4\uffff\2"+
            "\23\1\uffff\1\23\4\uffff\1\23\3\uffff\1\23\3\uffff\2\23\6\uffff"+
            "\1\23\6\uffff\1\23\5\uffff\2\23\4\uffff\1\23\1\uffff\1\23\7"+
            "\uffff\1\23\16\uffff\2\23\1\40\1\uffff\4\23\1\uffff\1\23\1\uffff"+
            "\1\23\1\uffff\13\23\2\uffff\1\23\3\uffff\2\23",
            "\3\23\5\uffff\3\23\1\uffff\1\23\4\uffff\1\23\2\uffff\2\23"+
            "\3\uffff\2\23\2\uffff\1\23\1\uffff\1\23\3\uffff\1\23\1\uffff"+
            "\1\23\1\uffff\2\23\4\uffff\3\23\2\uffff\1\23\1\uffff\3\23\2"+
            "\uffff\1\23\5\uffff\2\23\7\uffff\2\23\5\uffff\1\23\4\uffff\2"+
            "\23\1\uffff\1\23\4\uffff\1\23\3\uffff\1\23\3\uffff\2\23\6\uffff"+
            "\1\23\6\uffff\1\23\5\uffff\2\23\4\uffff\1\23\1\uffff\1\23\7"+
            "\uffff\1\23\3\uffff\1\41\12\uffff\2\23\2\uffff\4\23\1\uffff"+
            "\1\23\1\uffff\1\23\1\uffff\13\23\2\uffff\1\23\3\uffff\2\23",
            "\3\23\5\uffff\3\23\1\uffff\1\23\4\uffff\1\23\2\uffff\2\23"+
            "\3\uffff\2\23\2\uffff\1\23\1\uffff\1\23\3\uffff\1\23\1\uffff"+
            "\1\23\1\uffff\2\23\4\uffff\3\23\2\uffff\1\23\1\uffff\3\23\2"+
            "\uffff\1\23\5\uffff\2\23\7\uffff\2\23\5\uffff\1\23\4\uffff\2"+
            "\23\1\uffff\1\23\4\uffff\1\23\3\uffff\1\23\3\uffff\2\23\6\uffff"+
            "\1\23\6\uffff\1\23\5\uffff\2\23\4\uffff\1\23\1\uffff\1\23\7"+
            "\uffff\1\23\16\uffff\1\42\1\23\2\uffff\4\23\1\uffff\1\23\1\uffff"+
            "\1\23\1\uffff\13\23\2\uffff\1\23\3\uffff\2\23",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };

    static final short[] DFA48_eot = DFA.unpackEncodedString(DFA48_eotS);
    static final short[] DFA48_eof = DFA.unpackEncodedString(DFA48_eofS);
    static final char[] DFA48_min = DFA.unpackEncodedStringToUnsignedChars(DFA48_minS);
    static final char[] DFA48_max = DFA.unpackEncodedStringToUnsignedChars(DFA48_maxS);
    static final short[] DFA48_accept = DFA.unpackEncodedString(DFA48_acceptS);
    static final short[] DFA48_special = DFA.unpackEncodedString(DFA48_specialS);
    static final short[][] DFA48_transition;

    static {
        int numStates = DFA48_transitionS.length;
        DFA48_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA48_transition[i] = DFA.unpackEncodedString(DFA48_transitionS[i]);
        }
    }

    class DFA48 extends DFA {

        public DFA48(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 48;
            this.eot = DFA48_eot;
            this.eof = DFA48_eof;
            this.min = DFA48_min;
            this.max = DFA48_max;
            this.accept = DFA48_accept;
            this.special = DFA48_special;
            this.transition = DFA48_transition;
        }
        public String getDescription() {
            return "382:1: p_ExprSingle : ( p_FLWORExpr | p_QuantifiedExpr | p_TypeswitchExpr | p_IfExpr | p_TryCatchExpr | {...}? => p_EvalExpr | {...}? => p_InsertExpr | {...}? => p_DeleteExpr | {...}? => p_RenameExpr | {...}? => p_ReplaceExpr | {...}? => p_TransformExpr | {...}? => p_BlockExpr | {...}? => p_AssignmentExpr | {...}? => p_ExitExpr | {...}? => p_WhileExpr | p_OrExpr );";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA48_8 = input.LA(1);

                         
                        int index48_8 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA48_8==EOF||(LA48_8>=AND && LA48_8<=ASCENDING)||(LA48_8>=CASE && LA48_8<=CASTABLE)||LA48_8==COLLATION||LA48_8==DEFAULT||(LA48_8>=DESCENDING && LA48_8<=DIV)||(LA48_8>=ELSE && LA48_8<=EMPTY)||LA48_8==EQ||LA48_8==EXCEPT||LA48_8==FOR||LA48_8==GE||(LA48_8>=GT && LA48_8<=IDIV)||(LA48_8>=INSTANCE && LA48_8<=IS)||LA48_8==LE||(LA48_8>=LET && LA48_8<=MOD)||LA48_8==NE||(LA48_8>=OR && LA48_8<=ORDER)||(LA48_8>=RETURN && LA48_8<=SATISFIES)||LA48_8==STABLE||(LA48_8>=TO && LA48_8<=TREAT)||LA48_8==UNION||LA48_8==WHERE||LA48_8==COUNT||(LA48_8>=END && LA48_8<=GROUP)||LA48_8==ONLY||LA48_8==START||(LA48_8>=AFTER && LA48_8<=BEFORE)||LA48_8==INTO||LA48_8==MODIFY||LA48_8==WITH||(LA48_8>=LPAREN && LA48_8<=RPAREN)||(LA48_8>=RBRACKET && LA48_8<=EQUAL)||LA48_8==NOTEQUAL||LA48_8==COMMA||(LA48_8>=STAR && LA48_8<=SLASH_SLASH)||LA48_8==COLON||(LA48_8>=SEMICOLON && LA48_8<=VBAR)) ) {s = 19;}

                        else if ( (LA48_8==DOLLAR) && ((lc(ZORBA)))) {s = 25;}

                         
                        input.seek(index48_8);
                        if ( s>=0 ) return s;
                        break;
                    case 1 : 
                        int LA48_12 = input.LA(1);

                         
                        int index48_12 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA48_12==NODE) && ((lc(XQU)))) {s = 28;}

                        else if ( (LA48_12==EOF||(LA48_12>=AND && LA48_12<=ASCENDING)||(LA48_12>=CASE && LA48_12<=CASTABLE)||LA48_12==COLLATION||LA48_12==DEFAULT||(LA48_12>=DESCENDING && LA48_12<=DIV)||(LA48_12>=ELSE && LA48_12<=EMPTY)||LA48_12==EQ||LA48_12==EXCEPT||LA48_12==FOR||LA48_12==GE||(LA48_12>=GT && LA48_12<=IDIV)||(LA48_12>=INSTANCE && LA48_12<=IS)||LA48_12==LE||(LA48_12>=LET && LA48_12<=MOD)||LA48_12==NE||(LA48_12>=OR && LA48_12<=ORDER)||(LA48_12>=RETURN && LA48_12<=SATISFIES)||LA48_12==STABLE||(LA48_12>=TO && LA48_12<=TREAT)||LA48_12==UNION||LA48_12==WHERE||LA48_12==COUNT||(LA48_12>=END && LA48_12<=GROUP)||LA48_12==ONLY||LA48_12==START||(LA48_12>=AFTER && LA48_12<=BEFORE)||LA48_12==INTO||LA48_12==MODIFY||LA48_12==WITH||(LA48_12>=LPAREN && LA48_12<=RPAREN)||(LA48_12>=RBRACKET && LA48_12<=EQUAL)||LA48_12==NOTEQUAL||LA48_12==COMMA||(LA48_12>=STAR && LA48_12<=SLASH_SLASH)||LA48_12==COLON||(LA48_12>=SEMICOLON && LA48_12<=VBAR)) ) {s = 19;}

                         
                        input.seek(index48_12);
                        if ( s>=0 ) return s;
                        break;
                    case 2 : 
                        int LA48_13 = input.LA(1);

                         
                        int index48_13 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA48_13==EOF||(LA48_13>=AND && LA48_13<=ASCENDING)||(LA48_13>=CASE && LA48_13<=CASTABLE)||LA48_13==COLLATION||LA48_13==DEFAULT||(LA48_13>=DESCENDING && LA48_13<=DIV)||(LA48_13>=ELSE && LA48_13<=EMPTY)||LA48_13==EQ||LA48_13==EXCEPT||LA48_13==FOR||LA48_13==GE||(LA48_13>=GT && LA48_13<=IDIV)||(LA48_13>=INSTANCE && LA48_13<=IS)||LA48_13==LE||(LA48_13>=LET && LA48_13<=MOD)||LA48_13==NE||(LA48_13>=OR && LA48_13<=ORDER)||(LA48_13>=RETURN && LA48_13<=SATISFIES)||LA48_13==STABLE||(LA48_13>=TO && LA48_13<=TREAT)||LA48_13==UNION||LA48_13==WHERE||LA48_13==COUNT||(LA48_13>=END && LA48_13<=GROUP)||LA48_13==ONLY||LA48_13==START||(LA48_13>=AFTER && LA48_13<=BEFORE)||LA48_13==INTO||LA48_13==MODIFY||LA48_13==WITH||(LA48_13>=LPAREN && LA48_13<=RPAREN)||(LA48_13>=RBRACKET && LA48_13<=EQUAL)||LA48_13==NOTEQUAL||LA48_13==COMMA||(LA48_13>=STAR && LA48_13<=SLASH_SLASH)||LA48_13==COLON||(LA48_13>=SEMICOLON && LA48_13<=VBAR)) ) {s = 19;}

                        else if ( (LA48_13==NODE||LA48_13==VALUE) && ((lc(XQU)))) {s = 29;}

                         
                        input.seek(index48_13);
                        if ( s>=0 ) return s;
                        break;
                    case 3 : 
                        int LA48_11 = input.LA(1);

                         
                        int index48_11 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA48_11==EOF||(LA48_11>=AND && LA48_11<=ASCENDING)||(LA48_11>=CASE && LA48_11<=CASTABLE)||LA48_11==COLLATION||LA48_11==DEFAULT||(LA48_11>=DESCENDING && LA48_11<=DIV)||(LA48_11>=ELSE && LA48_11<=EMPTY)||LA48_11==EQ||LA48_11==EXCEPT||LA48_11==FOR||LA48_11==GE||(LA48_11>=GT && LA48_11<=IDIV)||(LA48_11>=INSTANCE && LA48_11<=IS)||LA48_11==LE||(LA48_11>=LET && LA48_11<=MOD)||LA48_11==NE||(LA48_11>=OR && LA48_11<=ORDER)||(LA48_11>=RETURN && LA48_11<=SATISFIES)||LA48_11==STABLE||(LA48_11>=TO && LA48_11<=TREAT)||LA48_11==UNION||LA48_11==WHERE||LA48_11==COUNT||(LA48_11>=END && LA48_11<=GROUP)||LA48_11==ONLY||LA48_11==START||(LA48_11>=AFTER && LA48_11<=BEFORE)||LA48_11==INTO||LA48_11==MODIFY||LA48_11==WITH||(LA48_11>=LPAREN && LA48_11<=RPAREN)||(LA48_11>=RBRACKET && LA48_11<=EQUAL)||LA48_11==NOTEQUAL||LA48_11==COMMA||(LA48_11>=STAR && LA48_11<=SLASH_SLASH)||LA48_11==COLON||(LA48_11>=SEMICOLON && LA48_11<=VBAR)) ) {s = 19;}

                        else if ( (LA48_11==NODE||LA48_11==NODES) && ((lc(XQU)))) {s = 27;}

                         
                        input.seek(index48_11);
                        if ( s>=0 ) return s;
                        break;
                    case 4 : 
                        int LA48_10 = input.LA(1);

                         
                        int index48_10 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA48_10==EOF||(LA48_10>=AND && LA48_10<=ASCENDING)||(LA48_10>=CASE && LA48_10<=CASTABLE)||LA48_10==COLLATION||LA48_10==DEFAULT||(LA48_10>=DESCENDING && LA48_10<=DIV)||(LA48_10>=ELSE && LA48_10<=EMPTY)||LA48_10==EQ||LA48_10==EXCEPT||LA48_10==FOR||LA48_10==GE||(LA48_10>=GT && LA48_10<=IDIV)||(LA48_10>=INSTANCE && LA48_10<=IS)||LA48_10==LE||(LA48_10>=LET && LA48_10<=MOD)||LA48_10==NE||(LA48_10>=OR && LA48_10<=ORDER)||(LA48_10>=RETURN && LA48_10<=SATISFIES)||LA48_10==STABLE||(LA48_10>=TO && LA48_10<=TREAT)||LA48_10==UNION||LA48_10==WHERE||LA48_10==COUNT||(LA48_10>=END && LA48_10<=GROUP)||LA48_10==ONLY||LA48_10==START||(LA48_10>=AFTER && LA48_10<=BEFORE)||LA48_10==INTO||LA48_10==MODIFY||LA48_10==WITH||(LA48_10>=LPAREN && LA48_10<=RPAREN)||(LA48_10>=RBRACKET && LA48_10<=EQUAL)||LA48_10==NOTEQUAL||LA48_10==COMMA||(LA48_10>=STAR && LA48_10<=SLASH_SLASH)||LA48_10==COLON||(LA48_10>=SEMICOLON && LA48_10<=VBAR)) ) {s = 19;}

                        else if ( (LA48_10==NODE||LA48_10==NODES) && ((lc(XQU)))) {s = 26;}

                         
                        input.seek(index48_10);
                        if ( s>=0 ) return s;
                        break;
                    case 5 : 
                        int LA48_14 = input.LA(1);

                         
                        int index48_14 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA48_14==DOLLAR) && ((lc(XQU)))) {s = 30;}

                        else if ( (LA48_14==EOF||(LA48_14>=AND && LA48_14<=ASCENDING)||(LA48_14>=CASE && LA48_14<=CASTABLE)||LA48_14==COLLATION||LA48_14==DEFAULT||(LA48_14>=DESCENDING && LA48_14<=DIV)||(LA48_14>=ELSE && LA48_14<=EMPTY)||LA48_14==EQ||LA48_14==EXCEPT||LA48_14==FOR||LA48_14==GE||(LA48_14>=GT && LA48_14<=IDIV)||(LA48_14>=INSTANCE && LA48_14<=IS)||LA48_14==LE||(LA48_14>=LET && LA48_14<=MOD)||LA48_14==NE||(LA48_14>=OR && LA48_14<=ORDER)||(LA48_14>=RETURN && LA48_14<=SATISFIES)||LA48_14==STABLE||(LA48_14>=TO && LA48_14<=TREAT)||LA48_14==UNION||LA48_14==WHERE||LA48_14==COUNT||(LA48_14>=END && LA48_14<=GROUP)||LA48_14==ONLY||LA48_14==START||(LA48_14>=AFTER && LA48_14<=BEFORE)||LA48_14==INTO||LA48_14==MODIFY||LA48_14==WITH||(LA48_14>=LPAREN && LA48_14<=RPAREN)||(LA48_14>=RBRACKET && LA48_14<=EQUAL)||LA48_14==NOTEQUAL||LA48_14==COMMA||(LA48_14>=STAR && LA48_14<=SLASH_SLASH)||LA48_14==COLON||(LA48_14>=SEMICOLON && LA48_14<=VBAR)) ) {s = 19;}

                         
                        input.seek(index48_14);
                        if ( s>=0 ) return s;
                        break;
                    case 6 : 
                        int LA48_18 = input.LA(1);

                         
                        int index48_18 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA48_18==EOF||(LA48_18>=AND && LA48_18<=ASCENDING)||(LA48_18>=CASE && LA48_18<=CASTABLE)||LA48_18==COLLATION||LA48_18==DEFAULT||(LA48_18>=DESCENDING && LA48_18<=DIV)||(LA48_18>=ELSE && LA48_18<=EMPTY)||LA48_18==EQ||LA48_18==EXCEPT||LA48_18==FOR||LA48_18==GE||(LA48_18>=GT && LA48_18<=IDIV)||(LA48_18>=INSTANCE && LA48_18<=IS)||LA48_18==LE||(LA48_18>=LET && LA48_18<=MOD)||LA48_18==NE||(LA48_18>=OR && LA48_18<=ORDER)||(LA48_18>=RETURN && LA48_18<=SATISFIES)||LA48_18==STABLE||(LA48_18>=TO && LA48_18<=TREAT)||LA48_18==UNION||LA48_18==WHERE||LA48_18==COUNT||(LA48_18>=END && LA48_18<=GROUP)||LA48_18==ONLY||LA48_18==START||(LA48_18>=AFTER && LA48_18<=BEFORE)||LA48_18==INTO||LA48_18==MODIFY||LA48_18==WITH||LA48_18==RPAREN||(LA48_18>=RBRACKET && LA48_18<=EQUAL)||LA48_18==NOTEQUAL||LA48_18==COMMA||(LA48_18>=STAR && LA48_18<=SLASH_SLASH)||LA48_18==COLON||(LA48_18>=SEMICOLON && LA48_18<=VBAR)) ) {s = 19;}

                        else if ( (LA48_18==LPAREN) && ((lc(XQS)))) {s = 34;}

                         
                        input.seek(index48_18);
                        if ( s>=0 ) return s;
                        break;
                    case 7 : 
                        int LA48_9 = input.LA(1);

                         
                        int index48_9 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA48_9==EOF||(LA48_9>=AND && LA48_9<=ASCENDING)||(LA48_9>=CASE && LA48_9<=CASTABLE)||LA48_9==COLLATION||LA48_9==DEFAULT||(LA48_9>=DESCENDING && LA48_9<=DIV)||(LA48_9>=ELSE && LA48_9<=EMPTY)||LA48_9==EQ||LA48_9==EXCEPT||LA48_9==FOR||LA48_9==GE||(LA48_9>=GT && LA48_9<=IDIV)||(LA48_9>=INSTANCE && LA48_9<=IS)||LA48_9==LE||(LA48_9>=LET && LA48_9<=MOD)||LA48_9==NE||(LA48_9>=OR && LA48_9<=ORDER)||(LA48_9>=RETURN && LA48_9<=SATISFIES)||LA48_9==STABLE||(LA48_9>=TO && LA48_9<=TREAT)||LA48_9==UNION||LA48_9==WHERE||LA48_9==COUNT||(LA48_9>=END && LA48_9<=GROUP)||LA48_9==ONLY||LA48_9==START||(LA48_9>=AFTER && LA48_9<=BEFORE)||LA48_9==INTO||LA48_9==MODIFY||LA48_9==WITH||(LA48_9>=LPAREN && LA48_9<=RPAREN)||(LA48_9>=RBRACKET && LA48_9<=EQUAL)||LA48_9==NOTEQUAL||LA48_9==COMMA||(LA48_9>=STAR && LA48_9<=SLASH_SLASH)||LA48_9==COLON||(LA48_9>=SEMICOLON && LA48_9<=VBAR)) ) {s = 19;}

                        else if ( (LA48_9==LBRACKET) && ((lc(ZORBA)))) {s = 25;}

                         
                        input.seek(index48_9);
                        if ( s>=0 ) return s;
                        break;
                    case 8 : 
                        int LA48_16 = input.LA(1);

                         
                        int index48_16 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA48_16==EOF||(LA48_16>=AND && LA48_16<=ASCENDING)||(LA48_16>=CASE && LA48_16<=CASTABLE)||LA48_16==COLLATION||LA48_16==DEFAULT||(LA48_16>=DESCENDING && LA48_16<=DIV)||(LA48_16>=ELSE && LA48_16<=EMPTY)||LA48_16==EQ||LA48_16==EXCEPT||LA48_16==FOR||LA48_16==GE||(LA48_16>=GT && LA48_16<=IDIV)||(LA48_16>=INSTANCE && LA48_16<=IS)||LA48_16==LE||(LA48_16>=LET && LA48_16<=MOD)||LA48_16==NE||(LA48_16>=OR && LA48_16<=ORDER)||(LA48_16>=RETURN && LA48_16<=SATISFIES)||LA48_16==STABLE||(LA48_16>=TO && LA48_16<=TREAT)||LA48_16==UNION||LA48_16==WHERE||LA48_16==COUNT||(LA48_16>=END && LA48_16<=GROUP)||LA48_16==ONLY||LA48_16==START||(LA48_16>=AFTER && LA48_16<=BEFORE)||LA48_16==INTO||LA48_16==MODIFY||LA48_16==WITH||(LA48_16>=LPAREN && LA48_16<=RPAREN)||(LA48_16>=RBRACKET && LA48_16<=EQUAL)||LA48_16==NOTEQUAL||LA48_16==COMMA||(LA48_16>=STAR && LA48_16<=SLASH_SLASH)||LA48_16==COLON||(LA48_16>=SEMICOLON && LA48_16<=VBAR)) ) {s = 19;}

                        else if ( (LA48_16==DOLLAR) && ((lc(XQS)))) {s = 32;}

                         
                        input.seek(index48_16);
                        if ( s>=0 ) return s;
                        break;
                    case 9 : 
                        int LA48_17 = input.LA(1);

                         
                        int index48_17 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA48_17==EOF||(LA48_17>=AND && LA48_17<=ASCENDING)||(LA48_17>=CASE && LA48_17<=CASTABLE)||LA48_17==COLLATION||LA48_17==DEFAULT||(LA48_17>=DESCENDING && LA48_17<=DIV)||(LA48_17>=ELSE && LA48_17<=EMPTY)||LA48_17==EQ||LA48_17==EXCEPT||LA48_17==FOR||LA48_17==GE||(LA48_17>=GT && LA48_17<=IDIV)||(LA48_17>=INSTANCE && LA48_17<=IS)||LA48_17==LE||(LA48_17>=LET && LA48_17<=MOD)||LA48_17==NE||(LA48_17>=OR && LA48_17<=ORDER)||(LA48_17>=RETURN && LA48_17<=SATISFIES)||LA48_17==STABLE||(LA48_17>=TO && LA48_17<=TREAT)||LA48_17==UNION||LA48_17==WHERE||LA48_17==COUNT||(LA48_17>=END && LA48_17<=GROUP)||LA48_17==ONLY||LA48_17==START||(LA48_17>=AFTER && LA48_17<=BEFORE)||LA48_17==INTO||LA48_17==MODIFY||LA48_17==WITH||(LA48_17>=LPAREN && LA48_17<=RPAREN)||(LA48_17>=RBRACKET && LA48_17<=EQUAL)||LA48_17==NOTEQUAL||LA48_17==COMMA||(LA48_17>=STAR && LA48_17<=SLASH_SLASH)||LA48_17==COLON||(LA48_17>=SEMICOLON && LA48_17<=VBAR)) ) {s = 19;}

                        else if ( (LA48_17==RETURNING) && ((lc(XQS)))) {s = 33;}

                         
                        input.seek(index48_17);
                        if ( s>=0 ) return s;
                        break;
                    case 10 : 
                        int LA48_15 = input.LA(1);

                         
                        int index48_15 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA48_15==EOF||(LA48_15>=AND && LA48_15<=ASCENDING)||(LA48_15>=CASE && LA48_15<=CASTABLE)||LA48_15==COLLATION||LA48_15==DEFAULT||(LA48_15>=DESCENDING && LA48_15<=DIV)||(LA48_15>=ELSE && LA48_15<=EMPTY)||LA48_15==EQ||LA48_15==EXCEPT||LA48_15==FOR||LA48_15==GE||(LA48_15>=GT && LA48_15<=IDIV)||(LA48_15>=INSTANCE && LA48_15<=IS)||LA48_15==LE||(LA48_15>=LET && LA48_15<=MOD)||LA48_15==NE||(LA48_15>=OR && LA48_15<=ORDER)||(LA48_15>=RETURN && LA48_15<=SATISFIES)||LA48_15==STABLE||(LA48_15>=TO && LA48_15<=TREAT)||LA48_15==UNION||LA48_15==WHERE||LA48_15==COUNT||(LA48_15>=END && LA48_15<=GROUP)||LA48_15==ONLY||LA48_15==START||(LA48_15>=AFTER && LA48_15<=BEFORE)||LA48_15==INTO||LA48_15==MODIFY||LA48_15==WITH||(LA48_15>=LPAREN && LA48_15<=RPAREN)||(LA48_15>=RBRACKET && LA48_15<=EQUAL)||LA48_15==NOTEQUAL||LA48_15==COMMA||(LA48_15>=STAR && LA48_15<=SLASH_SLASH)||LA48_15==COLON||(LA48_15>=SEMICOLON && LA48_15<=VBAR)) ) {s = 19;}

                        else if ( (LA48_15==LBRACKET) && ((lc(XQS)))) {s = 31;}

                         
                        input.seek(index48_15);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 48, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static final String DFA102_eotS =
        "\55\uffff";
    static final String DFA102_eofS =
        "\55\uffff";
    static final String DFA102_minS =
        "\1\20\54\uffff";
    static final String DFA102_maxS =
        "\1\u00e3\54\uffff";
    static final String DFA102_acceptS =
        "\1\uffff\1\1\1\2\51\uffff\1\3";
    static final String DFA102_specialS =
        "\55\uffff}>";
    static final String[] DFA102_transitionS = {
            "\133\2\1\1\63\2\1\uffff\13\2\1\uffff\1\2\12\uffff\1\2\2\uffff"+
            "\1\2\5\uffff\4\2\14\uffff\1\2\2\uffff\2\2\2\uffff\1\2\6\uffff"+
            "\1\54\5\2",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };

    static final short[] DFA102_eot = DFA.unpackEncodedString(DFA102_eotS);
    static final short[] DFA102_eof = DFA.unpackEncodedString(DFA102_eofS);
    static final char[] DFA102_min = DFA.unpackEncodedStringToUnsignedChars(DFA102_minS);
    static final char[] DFA102_max = DFA.unpackEncodedStringToUnsignedChars(DFA102_maxS);
    static final short[] DFA102_accept = DFA.unpackEncodedString(DFA102_acceptS);
    static final short[] DFA102_special = DFA.unpackEncodedString(DFA102_specialS);
    static final short[][] DFA102_transition;

    static {
        int numStates = DFA102_transitionS.length;
        DFA102_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA102_transition[i] = DFA.unpackEncodedString(DFA102_transitionS[i]);
        }
    }

    class DFA102 extends DFA {

        public DFA102(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 102;
            this.eot = DFA102_eot;
            this.eof = DFA102_eof;
            this.min = DFA102_min;
            this.max = DFA102_max;
            this.accept = DFA102_accept;
            this.special = DFA102_special;
            this.transition = DFA102_transition;
        }
        public String getDescription() {
            return "610:1: p_ValueExpr : ( p_ValidateExpr | p_PathExpr | p_ExtensionExpr );";
        }
    }
    static final String DFA109_eotS =
        "\55\uffff";
    static final String DFA109_eofS =
        "\55\uffff";
    static final String DFA109_minS =
        "\1\20\1\0\53\uffff";
    static final String DFA109_maxS =
        "\1\u00e3\1\0\53\uffff";
    static final String DFA109_acceptS =
        "\2\uffff\1\3\1\4\47\uffff\1\1\1\2";
    static final String DFA109_specialS =
        "\1\uffff\1\0\53\uffff}>";
    static final String[] DFA109_transitionS = {
            "\u008f\3\1\uffff\13\3\1\uffff\1\3\12\uffff\1\3\2\uffff\1\3"+
            "\5\uffff\1\1\1\2\2\3\14\uffff\1\3\2\uffff\2\3\2\uffff\1\3\7"+
            "\uffff\5\3",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };

    static final short[] DFA109_eot = DFA.unpackEncodedString(DFA109_eotS);
    static final short[] DFA109_eof = DFA.unpackEncodedString(DFA109_eofS);
    static final char[] DFA109_min = DFA.unpackEncodedStringToUnsignedChars(DFA109_minS);
    static final char[] DFA109_max = DFA.unpackEncodedStringToUnsignedChars(DFA109_maxS);
    static final short[] DFA109_accept = DFA.unpackEncodedString(DFA109_acceptS);
    static final short[] DFA109_special = DFA.unpackEncodedString(DFA109_specialS);
    static final short[][] DFA109_transition;

    static {
        int numStates = DFA109_transitionS.length;
        DFA109_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA109_transition[i] = DFA.unpackEncodedString(DFA109_transitionS[i]);
        }
    }

    class DFA109 extends DFA {

        public DFA109(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 109;
            this.eot = DFA109_eot;
            this.eof = DFA109_eof;
            this.min = DFA109_min;
            this.max = DFA109_max;
            this.accept = DFA109_accept;
            this.special = DFA109_special;
            this.transition = DFA109_transition;
        }
        public String getDescription() {
            return "654:1: p_PathExpr : ( ( SLASH p_RelativePathExpr )=> ( SLASH p_RelativePathExpr ) | SLASH | SLASH_SLASH p_RelativePathExpr | p_RelativePathExpr );";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA109_1 = input.LA(1);

                         
                        int index109_1 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred1_XQueryParser()) ) {s = 43;}

                        else if ( (true) ) {s = 44;}

                         
                        input.seek(index109_1);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 109, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static final String DFA111_eotS =
        "\u00d0\uffff";
    static final String DFA111_eofS =
        "\1\uffff\5\6\1\uffff\15\6\1\uffff\4\6\u00b6\uffff\1\6";
    static final String DFA111_minS =
        "\1\20\5\22\1\uffff\2\22\1\20\4\22\2\20\4\22\1\uffff\2\22\1\20\1"+
        "\22\1\20\3\23\1\117\20\20\1\u0084\1\u00ac\1\20\2\31\1\122\1\u00ac"+
        "\1\20\1\25\1\166\1\25\2\36\1\70\1\u00ad\1\20\1\132\10\20\3\23\1"+
        "\117\20\20\1\u0084\1\u00ac\1\20\2\31\1\122\1\u00ac\1\20\1\25\1\166"+
        "\1\25\2\36\1\70\1\u00ad\1\20\1\132\10\20\3\23\1\117\20\20\1\u0084"+
        "\1\u00ac\1\20\2\31\1\122\1\u00ac\1\20\1\25\1\166\1\25\2\36\1\70"+
        "\1\u00ad\1\20\1\132\11\20\3\23\1\117\20\20\1\u0084\1\u00ac\1\20"+
        "\2\31\1\122\1\u00ac\1\20\1\25\1\166\1\25\2\36\1\70\1\u00ad\1\20"+
        "\1\132\10\20\1\22";
    static final String DFA111_maxS =
        "\1\u00e3\5\u00c9\1\uffff\2\u00c9\1\u00d7\4\u00c9\2\u00d7\4\u00c9"+
        "\1\uffff\2\u00c9\1\u00d7\1\u00c9\1\u00d7\4\u00c4\20\u00e3\2\u00c4"+
        "\1\u00e3\4\u00c4\1\u00e3\6\u00c4\1\u00d4\1\u00e3\1\u00c4\1\u00d7"+
        "\7\u00e3\4\u00c4\20\u00e3\2\u00c4\1\u00e3\4\u00c4\1\u00e3\6\u00c4"+
        "\1\u00d4\1\u00e3\1\u00c4\1\u00d7\7\u00e3\4\u00ad\20\u00e3\2\u00ad"+
        "\1\u00e3\4\u00ad\1\u00e3\3\u00ad\2\u00b5\1\u00ad\1\u00d4\1\u00e3"+
        "\1\u00ad\1\u00d7\7\u00e3\1\u00d7\4\u00ad\20\u00e3\2\u00ad\1\u00e3"+
        "\4\u00ad\1\u00e3\3\u00ad\2\u00b5\1\u00ad\1\u00d4\1\u00e3\1\u00ad"+
        "\1\u00d7\7\u00e3\1\u00c9";
    static final String DFA111_acceptS =
        "\6\uffff\1\1\15\uffff\1\2\u00bb\uffff";
    static final String DFA111_specialS =
        "\u00d0\uffff}>";
    static final String[] DFA111_transitionS = {
            "\1\2\1\5\4\30\1\11\6\30\1\7\1\30\1\20\4\30\1\10\1\13\2\30\1"+
            "\26\1\6\1\16\2\30\1\6\5\30\1\15\1\14\6\30\1\6\6\30\1\6\7\30"+
            "\1\27\3\30\1\6\4\30\1\23\1\30\1\1\1\4\1\3\1\30\1\17\3\30\2\6"+
            "\1\12\4\30\1\21\3\30\1\6\1\30\1\25\20\30\1\6\43\30\1\uffff\3"+
            "\30\1\6\2\30\1\6\3\30\1\24\1\uffff\1\24\12\uffff\1\6\2\uffff"+
            "\1\24\7\uffff\1\24\1\6\14\uffff\1\6\2\uffff\2\24\2\uffff\1\22"+
            "\7\uffff\5\24",
            "\3\6\5\uffff\3\6\1\uffff\1\6\4\uffff\1\6\2\uffff\2\6\3\uffff"+
            "\2\6\2\uffff\1\6\1\uffff\1\6\3\uffff\1\6\1\uffff\1\6\1\uffff"+
            "\2\6\4\uffff\3\6\2\uffff\1\6\1\uffff\3\6\2\uffff\1\6\5\uffff"+
            "\2\6\7\uffff\2\6\5\uffff\1\6\4\uffff\2\6\1\uffff\1\6\4\uffff"+
            "\1\6\3\uffff\1\6\3\uffff\2\6\6\uffff\1\6\6\uffff\1\6\5\uffff"+
            "\2\6\4\uffff\1\6\1\uffff\1\6\7\uffff\1\6\16\uffff\1\24\1\6\2"+
            "\uffff\4\6\1\uffff\1\6\1\uffff\1\6\1\uffff\13\6\2\uffff\1\31"+
            "\1\6\2\uffff\2\6",
            "\3\6\5\uffff\3\6\1\uffff\1\6\4\uffff\1\6\2\uffff\2\6\3\uffff"+
            "\2\6\2\uffff\1\6\1\uffff\1\6\3\uffff\1\6\1\uffff\1\6\1\uffff"+
            "\2\6\4\uffff\3\6\2\uffff\1\6\1\uffff\3\6\2\uffff\1\6\5\uffff"+
            "\2\6\7\uffff\2\6\5\uffff\1\6\4\uffff\2\6\1\uffff\1\6\4\uffff"+
            "\1\6\3\uffff\1\6\3\uffff\2\6\6\uffff\1\6\6\uffff\1\6\5\uffff"+
            "\2\6\4\uffff\1\6\1\uffff\1\6\7\uffff\1\6\16\uffff\1\24\1\6\2"+
            "\uffff\4\6\1\uffff\1\6\1\uffff\1\6\1\uffff\13\6\2\uffff\1\31"+
            "\1\6\2\uffff\2\6",
            "\3\6\5\uffff\3\6\1\uffff\1\6\4\uffff\1\6\2\uffff\2\6\3\uffff"+
            "\2\6\2\uffff\1\6\1\uffff\1\6\3\uffff\1\6\1\uffff\1\6\1\uffff"+
            "\2\6\4\uffff\3\6\2\uffff\1\6\1\uffff\3\6\2\uffff\1\6\5\uffff"+
            "\2\6\7\uffff\2\6\5\uffff\1\6\4\uffff\2\6\1\uffff\1\6\4\uffff"+
            "\1\6\3\uffff\1\6\3\uffff\2\6\6\uffff\1\6\6\uffff\1\6\5\uffff"+
            "\2\6\4\uffff\1\6\1\uffff\1\6\7\uffff\1\6\16\uffff\1\24\1\6\2"+
            "\uffff\4\6\1\uffff\1\6\1\uffff\1\6\1\uffff\13\6\2\uffff\1\31"+
            "\1\6\2\uffff\2\6",
            "\3\6\5\uffff\3\6\1\uffff\1\6\4\uffff\1\6\2\uffff\2\6\3\uffff"+
            "\2\6\2\uffff\1\6\1\uffff\1\6\3\uffff\1\6\1\uffff\1\6\1\uffff"+
            "\2\6\4\uffff\3\6\2\uffff\1\6\1\uffff\3\6\2\uffff\1\6\5\uffff"+
            "\2\6\7\uffff\2\6\5\uffff\1\6\4\uffff\2\6\1\uffff\1\6\4\uffff"+
            "\1\6\3\uffff\1\6\3\uffff\2\6\6\uffff\1\6\6\uffff\1\6\5\uffff"+
            "\2\6\4\uffff\1\6\1\uffff\1\6\7\uffff\1\6\16\uffff\1\24\1\6\2"+
            "\uffff\4\6\1\uffff\1\6\1\uffff\1\6\1\uffff\13\6\2\uffff\1\31"+
            "\1\6\2\uffff\2\6",
            "\3\6\5\uffff\3\6\1\uffff\1\6\4\uffff\1\6\2\uffff\2\6\3\uffff"+
            "\2\6\2\uffff\1\6\1\uffff\1\6\3\uffff\1\6\1\uffff\1\6\1\uffff"+
            "\2\6\4\uffff\3\6\2\uffff\1\6\1\uffff\3\6\2\uffff\1\6\5\uffff"+
            "\2\6\7\uffff\2\6\5\uffff\1\6\4\uffff\2\6\1\uffff\1\6\4\uffff"+
            "\1\6\3\uffff\1\6\3\uffff\2\6\6\uffff\1\6\6\uffff\1\6\5\uffff"+
            "\2\6\4\uffff\1\6\1\uffff\1\6\7\uffff\1\6\16\uffff\1\24\1\6\2"+
            "\uffff\4\6\1\uffff\1\6\1\uffff\1\6\1\uffff\13\6\2\uffff\1\31"+
            "\1\6\2\uffff\2\6",
            "",
            "\3\6\5\uffff\3\6\1\uffff\1\6\4\uffff\1\6\2\uffff\2\6\3\uffff"+
            "\2\6\2\uffff\1\6\1\uffff\1\6\3\uffff\1\6\1\uffff\1\6\1\uffff"+
            "\2\6\4\uffff\3\6\2\uffff\1\6\1\uffff\3\6\2\uffff\1\6\5\uffff"+
            "\2\6\7\uffff\2\6\5\uffff\1\6\4\uffff\2\6\1\uffff\1\6\4\uffff"+
            "\1\6\3\uffff\1\6\3\uffff\2\6\6\uffff\1\6\6\uffff\1\6\5\uffff"+
            "\2\6\4\uffff\1\6\1\uffff\1\6\7\uffff\1\6\16\uffff\1\24\1\6\2"+
            "\uffff\4\6\1\uffff\1\6\1\uffff\1\6\1\uffff\13\6\2\uffff\1\31"+
            "\1\6\2\uffff\2\6",
            "\3\6\5\uffff\3\6\1\uffff\1\6\4\uffff\1\6\2\uffff\2\6\3\uffff"+
            "\2\6\2\uffff\1\6\1\uffff\1\6\3\uffff\1\6\1\uffff\1\6\1\uffff"+
            "\2\6\4\uffff\3\6\2\uffff\1\6\1\uffff\3\6\2\uffff\1\6\5\uffff"+
            "\2\6\7\uffff\2\6\5\uffff\1\6\4\uffff\2\6\1\uffff\1\6\4\uffff"+
            "\1\6\3\uffff\1\6\3\uffff\2\6\6\uffff\1\6\6\uffff\1\6\5\uffff"+
            "\2\6\4\uffff\1\6\1\uffff\1\6\7\uffff\1\6\16\uffff\1\24\1\6\2"+
            "\uffff\4\6\1\uffff\1\6\1\uffff\1\6\1\uffff\13\6\2\uffff\1\31"+
            "\1\6\2\uffff\2\6",
            "\2\24\1\54\1\102\1\71\5\24\1\77\1\32\1\33\1\24\1\74\4\24\1"+
            "\76\2\24\1\72\1\41\3\24\1\100\1\73\2\24\1\45\1\24\1\37\3\24"+
            "\1\56\1\24\1\52\1\24\1\51\1\42\4\24\1\35\1\36\1\53\2\24\1\50"+
            "\1\24\1\57\1\47\1\43\2\24\1\46\5\24\1\55\1\62\7\24\1\65\1\75"+
            "\5\24\1\63\4\24\1\44\1\34\1\24\1\40\4\24\1\60\3\24\1\64\3\24"+
            "\1\70\1\61\6\24\1\67\6\24\1\66\5\24\1\104\1\105\4\24\1\103\1"+
            "\24\1\106\7\24\1\101\3\24\1\uffff\12\24\2\6\1\uffff\1\24\4\6"+
            "\1\uffff\1\6\1\uffff\1\6\1\uffff\13\6\2\uffff\2\6\2\uffff\2"+
            "\6\15\uffff\1\24",
            "\3\6\5\uffff\3\6\1\uffff\1\6\4\uffff\1\6\2\uffff\2\6\3\uffff"+
            "\2\6\2\uffff\1\6\1\uffff\1\6\3\uffff\1\6\1\uffff\1\6\1\uffff"+
            "\2\6\4\uffff\3\6\2\uffff\1\6\1\uffff\3\6\2\uffff\1\6\5\uffff"+
            "\2\6\7\uffff\2\6\5\uffff\1\6\4\uffff\2\6\1\uffff\1\6\4\uffff"+
            "\1\6\3\uffff\1\6\3\uffff\2\6\6\uffff\1\6\6\uffff\1\6\5\uffff"+
            "\2\6\4\uffff\1\6\1\uffff\1\6\7\uffff\1\6\16\uffff\1\24\1\6\2"+
            "\uffff\4\6\1\uffff\1\6\1\uffff\1\6\1\uffff\13\6\2\uffff\1\31"+
            "\1\6\2\uffff\2\6",
            "\3\6\5\uffff\3\6\1\uffff\1\6\4\uffff\1\6\2\uffff\2\6\3\uffff"+
            "\2\6\2\uffff\1\6\1\uffff\1\6\3\uffff\1\6\1\uffff\1\6\1\uffff"+
            "\2\6\4\uffff\3\6\2\uffff\1\6\1\uffff\3\6\2\uffff\1\6\5\uffff"+
            "\2\6\7\uffff\2\6\5\uffff\1\6\4\uffff\2\6\1\uffff\1\6\4\uffff"+
            "\1\6\3\uffff\1\6\3\uffff\2\6\6\uffff\1\6\6\uffff\1\6\5\uffff"+
            "\2\6\4\uffff\1\6\1\uffff\1\6\7\uffff\1\6\16\uffff\1\24\1\6\2"+
            "\uffff\4\6\1\uffff\1\6\1\uffff\1\6\1\uffff\13\6\2\uffff\1\31"+
            "\1\6\2\uffff\2\6",
            "\3\6\5\uffff\3\6\1\uffff\1\6\4\uffff\1\6\2\uffff\2\6\3\uffff"+
            "\2\6\2\uffff\1\6\1\uffff\1\6\3\uffff\1\6\1\uffff\1\6\1\uffff"+
            "\2\6\4\uffff\3\6\2\uffff\1\6\1\uffff\3\6\2\uffff\1\6\5\uffff"+
            "\2\6\7\uffff\2\6\5\uffff\1\6\4\uffff\2\6\1\uffff\1\6\4\uffff"+
            "\1\6\3\uffff\1\6\3\uffff\2\6\6\uffff\1\6\6\uffff\1\6\5\uffff"+
            "\2\6\4\uffff\1\6\1\uffff\1\6\7\uffff\1\6\16\uffff\1\24\1\6\2"+
            "\uffff\4\6\1\uffff\1\6\1\uffff\1\6\1\uffff\13\6\2\uffff\1\31"+
            "\1\6\2\uffff\2\6",
            "\3\6\5\uffff\3\6\1\uffff\1\6\4\uffff\1\6\2\uffff\2\6\3\uffff"+
            "\2\6\2\uffff\1\6\1\uffff\1\6\3\uffff\1\6\1\uffff\1\6\1\uffff"+
            "\2\6\4\uffff\3\6\2\uffff\1\6\1\uffff\3\6\2\uffff\1\6\5\uffff"+
            "\2\6\7\uffff\2\6\5\uffff\1\6\4\uffff\2\6\1\uffff\1\6\4\uffff"+
            "\1\6\3\uffff\1\6\3\uffff\2\6\6\uffff\1\6\6\uffff\1\6\5\uffff"+
            "\2\6\4\uffff\1\6\1\uffff\1\6\7\uffff\1\6\16\uffff\1\24\1\6\2"+
            "\uffff\4\6\1\uffff\1\6\1\uffff\1\6\1\uffff\13\6\2\uffff\1\31"+
            "\1\6\2\uffff\2\6",
            "\2\24\1\131\1\157\1\146\5\24\1\154\1\107\1\110\1\24\1\151"+
            "\4\24\1\153\2\24\1\147\1\116\3\24\1\155\1\150\2\24\1\122\1\24"+
            "\1\114\3\24\1\133\1\24\1\127\1\24\1\126\1\117\4\24\1\112\1\113"+
            "\1\130\2\24\1\125\1\24\1\134\1\124\1\120\2\24\1\123\5\24\1\132"+
            "\1\137\7\24\1\142\1\152\5\24\1\140\4\24\1\121\1\111\1\24\1\115"+
            "\4\24\1\135\3\24\1\141\3\24\1\145\1\136\6\24\1\144\6\24\1\143"+
            "\5\24\1\161\1\162\4\24\1\160\1\24\1\163\7\24\1\156\3\24\1\uffff"+
            "\12\24\2\6\1\uffff\1\24\4\6\1\uffff\1\6\1\uffff\1\6\1\uffff"+
            "\13\6\2\uffff\1\6\3\uffff\2\6\15\uffff\1\24",
            "\2\24\1\u0086\1\u009c\1\u0093\5\24\1\u0099\1\164\1\165\1\24"+
            "\1\u0096\4\24\1\u0098\2\24\1\u0094\1\173\3\24\1\u009a\1\u0095"+
            "\2\24\1\177\1\24\1\171\3\24\1\u0088\1\24\1\u0084\1\24\1\u0083"+
            "\1\174\4\24\1\167\1\170\1\u0085\2\24\1\u0082\1\24\1\u0089\1"+
            "\u0081\1\175\2\24\1\u0080\5\24\1\u0087\1\u008c\7\24\1\u008f"+
            "\1\u0097\5\24\1\u008d\4\24\1\176\1\166\1\24\1\172\4\24\1\u008a"+
            "\3\24\1\u008e\3\24\1\u0092\1\u008b\6\24\1\u0091\6\24\1\u0090"+
            "\5\24\1\u009e\1\u009f\4\24\1\u009d\1\24\1\u00a0\7\24\1\u009b"+
            "\3\24\1\uffff\12\24\2\6\1\uffff\1\24\4\6\1\uffff\1\6\1\uffff"+
            "\1\6\1\uffff\13\6\2\uffff\1\6\3\uffff\2\6\15\uffff\1\24",
            "\3\6\5\uffff\3\6\1\uffff\1\6\4\uffff\1\6\2\uffff\2\6\3\uffff"+
            "\2\6\2\uffff\1\6\1\uffff\1\6\3\uffff\1\6\1\uffff\1\6\1\uffff"+
            "\2\6\4\uffff\3\6\2\uffff\1\6\1\uffff\3\6\2\uffff\1\6\5\uffff"+
            "\2\6\7\uffff\2\6\5\uffff\1\6\4\uffff\2\6\1\uffff\1\6\4\uffff"+
            "\1\6\3\uffff\1\6\3\uffff\2\6\6\uffff\1\6\6\uffff\1\6\5\uffff"+
            "\2\6\4\uffff\1\6\1\uffff\1\6\7\uffff\1\6\16\uffff\2\6\1\uffff"+
            "\1\24\4\6\1\uffff\1\6\1\uffff\1\6\1\uffff\13\6\2\uffff\1\6\3"+
            "\uffff\2\6",
            "\3\6\5\uffff\3\6\1\uffff\1\6\4\uffff\1\6\2\uffff\2\6\3\uffff"+
            "\2\6\2\uffff\1\6\1\uffff\1\6\3\uffff\1\6\1\uffff\1\6\1\uffff"+
            "\2\6\4\uffff\3\6\2\uffff\1\6\1\uffff\3\6\2\uffff\1\6\5\uffff"+
            "\2\6\7\uffff\2\6\5\uffff\1\6\4\uffff\2\6\1\uffff\1\6\4\uffff"+
            "\1\6\3\uffff\1\6\3\uffff\2\6\6\uffff\1\6\6\uffff\1\6\5\uffff"+
            "\2\6\4\uffff\1\6\1\uffff\1\6\7\uffff\1\6\16\uffff\2\6\1\uffff"+
            "\1\24\4\6\1\uffff\1\6\1\uffff\1\6\1\uffff\13\6\2\uffff\1\6\3"+
            "\uffff\2\6",
            "\3\6\5\uffff\3\6\1\uffff\1\6\4\uffff\1\6\2\uffff\2\6\3\uffff"+
            "\2\6\2\uffff\1\6\1\uffff\1\6\3\uffff\1\6\1\uffff\1\6\1\uffff"+
            "\2\6\4\uffff\3\6\2\uffff\1\6\1\uffff\3\6\2\uffff\1\6\5\uffff"+
            "\2\6\7\uffff\2\6\5\uffff\1\6\4\uffff\2\6\1\uffff\1\6\4\uffff"+
            "\1\6\3\uffff\1\6\3\uffff\2\6\6\uffff\1\6\6\uffff\1\6\5\uffff"+
            "\2\6\4\uffff\1\6\1\uffff\1\6\7\uffff\1\6\16\uffff\1\24\1\6\2"+
            "\uffff\4\6\1\uffff\1\6\1\uffff\1\6\1\uffff\13\6\2\uffff\1\u00a1"+
            "\3\uffff\2\6",
            "\3\6\5\uffff\3\6\1\uffff\1\6\4\uffff\1\6\2\uffff\2\6\3\uffff"+
            "\2\6\2\uffff\1\6\1\uffff\1\6\3\uffff\1\6\1\uffff\1\6\1\uffff"+
            "\2\6\4\uffff\3\6\2\uffff\1\6\1\uffff\3\6\2\uffff\1\6\5\uffff"+
            "\2\6\7\uffff\2\6\5\uffff\1\6\4\uffff\2\6\1\uffff\1\6\4\uffff"+
            "\1\6\3\uffff\1\6\3\uffff\2\6\6\uffff\1\6\6\uffff\1\6\5\uffff"+
            "\2\6\4\uffff\1\6\1\uffff\1\6\7\uffff\1\6\16\uffff\1\24\1\6\1"+
            "\uffff\1\24\4\6\1\uffff\1\6\1\uffff\1\6\1\uffff\13\6\2\uffff"+
            "\1\31\3\uffff\2\6",
            "",
            "\3\6\5\uffff\3\6\1\uffff\1\6\4\uffff\1\6\2\uffff\2\6\3\uffff"+
            "\2\6\2\uffff\1\6\1\uffff\1\6\3\uffff\1\6\1\uffff\1\6\1\uffff"+
            "\2\6\4\uffff\3\6\2\uffff\1\6\1\uffff\3\6\2\uffff\1\6\5\uffff"+
            "\2\6\7\uffff\2\6\5\uffff\1\6\4\uffff\2\6\1\uffff\1\6\4\uffff"+
            "\1\6\3\uffff\1\6\3\uffff\2\6\6\uffff\1\6\6\uffff\1\6\5\uffff"+
            "\2\6\4\uffff\1\6\1\uffff\1\6\7\uffff\1\6\16\uffff\1\24\1\6\1"+
            "\uffff\1\24\4\6\1\uffff\1\6\1\uffff\1\6\1\uffff\13\6\2\uffff"+
            "\1\31\3\uffff\2\6",
            "\3\6\5\uffff\3\6\1\uffff\1\6\4\uffff\1\6\2\uffff\2\6\3\uffff"+
            "\2\6\2\uffff\1\6\1\uffff\1\6\3\uffff\1\6\1\uffff\1\6\1\uffff"+
            "\2\6\4\uffff\3\6\2\uffff\1\6\1\uffff\3\6\2\uffff\1\6\5\uffff"+
            "\2\6\7\uffff\2\6\5\uffff\1\6\4\uffff\2\6\1\uffff\1\6\4\uffff"+
            "\1\6\3\uffff\1\6\3\uffff\2\6\6\uffff\1\6\6\uffff\1\6\5\uffff"+
            "\2\6\4\uffff\1\6\1\uffff\1\6\7\uffff\1\6\16\uffff\1\24\1\6\1"+
            "\uffff\1\24\4\6\1\uffff\1\6\1\uffff\1\6\1\uffff\13\6\2\uffff"+
            "\1\31\3\uffff\2\6",
            "\2\24\1\u00b4\1\u00ca\1\u00c1\5\24\1\u00c7\1\u00a2\1\u00a3"+
            "\1\24\1\u00c4\4\24\1\u00c6\2\24\1\u00c2\1\u00a9\3\24\1\u00c8"+
            "\1\u00c3\2\24\1\u00ad\1\24\1\u00a7\3\24\1\u00b6\1\24\1\u00b2"+
            "\1\24\1\u00b1\1\u00aa\4\24\1\u00a5\1\u00a6\1\u00b3\2\24\1\u00b0"+
            "\1\24\1\u00b7\1\u00af\1\u00ab\2\24\1\u00ae\5\24\1\u00b5\1\u00ba"+
            "\7\24\1\u00bd\1\u00c5\5\24\1\u00bb\4\24\1\u00ac\1\u00a4\1\24"+
            "\1\u00a8\4\24\1\u00b8\3\24\1\u00bc\3\24\1\u00c0\1\u00b9\6\24"+
            "\1\u00bf\6\24\1\u00be\5\24\1\u00cc\1\u00cd\4\24\1\u00cb\1\24"+
            "\1\u00ce\7\24\1\u00c9\3\24\1\uffff\13\24\1\6\1\uffff\1\24\4"+
            "\6\1\uffff\1\6\1\uffff\1\6\1\uffff\13\6\2\uffff\1\31\3\uffff"+
            "\2\6\15\uffff\1\24",
            "\3\6\5\uffff\3\6\1\uffff\1\6\4\uffff\1\6\2\uffff\2\6\3\uffff"+
            "\2\6\2\uffff\1\6\1\uffff\1\6\3\uffff\1\6\1\uffff\1\6\1\uffff"+
            "\2\6\4\uffff\3\6\2\uffff\1\6\1\uffff\3\6\2\uffff\1\6\5\uffff"+
            "\2\6\7\uffff\2\6\5\uffff\1\6\4\uffff\2\6\1\uffff\1\6\4\uffff"+
            "\1\6\3\uffff\1\6\3\uffff\2\6\6\uffff\1\6\6\uffff\1\6\5\uffff"+
            "\2\6\4\uffff\1\6\1\uffff\1\6\7\uffff\1\6\16\uffff\1\24\1\6\2"+
            "\uffff\4\6\1\uffff\1\6\1\uffff\1\6\1\uffff\13\6\2\uffff\1\31"+
            "\3\uffff\2\6",
            "\u008f\u00cf\1\uffff\12\u00cf\55\uffff\1\u00cf",
            "\1\6\u0099\uffff\1\24\26\uffff\1\24",
            "\1\6\u0099\uffff\1\24\26\uffff\1\24",
            "\1\6\u0099\uffff\1\24\26\uffff\1\24",
            "\1\6\135\uffff\1\24\26\uffff\1\24",
            "\u008f\6\1\uffff\13\6\1\uffff\1\6\1\24\11\uffff\4\6\5\uffff"+
            "\4\6\1\24\13\uffff\1\6\2\uffff\2\6\2\uffff\1\6\6\uffff\6\6",
            "\u008f\6\1\uffff\13\6\1\uffff\1\6\1\24\11\uffff\4\6\5\uffff"+
            "\4\6\1\24\13\uffff\1\6\2\uffff\2\6\2\uffff\1\6\6\uffff\6\6",
            "\u008f\6\1\uffff\13\6\1\uffff\1\6\1\24\11\uffff\4\6\5\uffff"+
            "\4\6\1\24\13\uffff\1\6\2\uffff\2\6\2\uffff\1\6\6\uffff\6\6",
            "\u008f\6\1\uffff\13\6\1\uffff\1\6\1\24\11\uffff\4\6\5\uffff"+
            "\4\6\1\24\13\uffff\1\6\2\uffff\2\6\2\uffff\1\6\6\uffff\6\6",
            "\u008f\6\1\uffff\13\6\1\uffff\1\6\1\24\11\uffff\4\6\5\uffff"+
            "\4\6\1\24\13\uffff\1\6\2\uffff\2\6\2\uffff\1\6\6\uffff\6\6",
            "\u008f\6\1\uffff\13\6\1\uffff\1\6\1\24\11\uffff\4\6\5\uffff"+
            "\4\6\1\24\13\uffff\1\6\2\uffff\2\6\2\uffff\1\6\6\uffff\6\6",
            "\u008f\6\1\uffff\13\6\1\uffff\1\6\1\24\11\uffff\4\6\5\uffff"+
            "\4\6\1\24\13\uffff\1\6\2\uffff\2\6\2\uffff\1\6\6\uffff\6\6",
            "\u008f\6\1\uffff\13\6\1\uffff\1\6\1\24\11\uffff\4\6\5\uffff"+
            "\4\6\1\24\13\uffff\1\6\2\uffff\2\6\2\uffff\1\6\6\uffff\6\6",
            "\u008f\6\1\uffff\13\6\1\uffff\1\6\1\24\11\uffff\4\6\5\uffff"+
            "\4\6\1\24\13\uffff\1\6\2\uffff\2\6\2\uffff\1\6\6\uffff\6\6",
            "\u008f\6\1\uffff\13\6\1\uffff\1\6\1\24\11\uffff\4\6\5\uffff"+
            "\4\6\1\24\13\uffff\1\6\2\uffff\2\6\2\uffff\1\6\6\uffff\6\6",
            "\u008f\6\1\uffff\13\6\1\uffff\1\6\1\24\11\uffff\4\6\5\uffff"+
            "\4\6\1\24\13\uffff\1\6\2\uffff\2\6\2\uffff\1\6\6\uffff\6\6",
            "\u008f\6\1\uffff\13\6\1\uffff\1\6\1\24\11\uffff\4\6\5\uffff"+
            "\4\6\1\24\13\uffff\1\6\2\uffff\2\6\2\uffff\1\6\6\uffff\6\6",
            "\u008f\6\1\uffff\13\6\1\uffff\1\6\1\24\11\uffff\4\6\5\uffff"+
            "\4\6\1\24\13\uffff\1\6\2\uffff\2\6\2\uffff\1\6\6\uffff\6\6",
            "\u008f\6\1\uffff\13\6\1\uffff\1\6\1\24\11\uffff\4\6\5\uffff"+
            "\4\6\1\24\13\uffff\1\6\2\uffff\2\6\2\uffff\1\6\6\uffff\6\6",
            "\u008f\6\1\uffff\13\6\1\uffff\1\6\1\24\11\uffff\4\6\5\uffff"+
            "\4\6\1\24\13\uffff\1\6\2\uffff\2\6\2\uffff\1\6\6\uffff\6\6",
            "\u008f\6\1\uffff\13\6\1\uffff\1\6\1\24\11\uffff\4\6\5\uffff"+
            "\4\6\1\24\13\uffff\1\6\2\uffff\2\6\2\uffff\1\6\6\uffff\6\6",
            "\1\6\2\uffff\1\6\44\uffff\1\6\1\24\26\uffff\1\24",
            "\1\6\1\24\26\uffff\1\24",
            "\u008f\6\1\uffff\13\6\1\uffff\1\6\1\24\11\uffff\4\6\5\uffff"+
            "\4\6\1\24\13\uffff\1\6\2\uffff\2\6\2\uffff\1\6\6\uffff\6\6",
            "\1\6\u0093\uffff\1\24\26\uffff\1\24",
            "\1\6\u0093\uffff\1\24\26\uffff\1\24",
            "\1\6\132\uffff\1\24\26\uffff\1\24",
            "\1\6\1\24\26\uffff\1\24",
            "\u008f\6\1\uffff\13\6\1\uffff\1\6\1\24\11\uffff\4\6\5\uffff"+
            "\4\6\1\24\13\uffff\1\6\2\uffff\2\6\2\uffff\1\6\6\uffff\6\6",
            "\1\6\147\uffff\1\6\5\uffff\1\6\4\uffff\1\6\43\uffff\1\6\1"+
            "\24\26\uffff\1\24",
            "\1\6\66\uffff\1\24\26\uffff\1\24",
            "\1\6\147\uffff\1\6\5\uffff\1\6\4\uffff\1\6\43\uffff\1\6\1"+
            "\24\26\uffff\1\24",
            "\1\6\15\uffff\1\6\10\uffff\1\6\20\uffff\1\6\13\uffff\1\6\7"+
            "\uffff\1\6\6\uffff\1\6\14\uffff\1\6\3\uffff\1\6\4\uffff\1\6"+
            "\65\uffff\1\24\7\uffff\1\6\16\uffff\1\24",
            "\1\6\15\uffff\1\6\10\uffff\1\6\20\uffff\1\6\13\uffff\1\6\7"+
            "\uffff\1\6\6\uffff\1\6\14\uffff\1\6\3\uffff\1\6\4\uffff\1\6"+
            "\65\uffff\1\24\7\uffff\1\6\16\uffff\1\24",
            "\1\6\14\uffff\1\6\147\uffff\1\24\26\uffff\1\24",
            "\1\24\26\uffff\1\24\16\uffff\2\6",
            "\u008f\6\1\uffff\13\6\1\uffff\1\6\1\24\11\uffff\4\6\5\uffff"+
            "\4\6\1\24\13\uffff\1\6\2\uffff\2\6\2\uffff\1\6\6\uffff\6\6",
            "\1\6\121\uffff\1\6\1\24\26\uffff\1\24",
            "\u008f\6\1\uffff\12\6\2\uffff\1\6\1\24\26\uffff\1\24\22\uffff"+
            "\1\6",
            "\u008f\6\1\uffff\13\6\1\uffff\1\6\1\24\11\uffff\4\6\5\uffff"+
            "\4\6\1\24\13\uffff\1\6\2\uffff\2\6\2\uffff\1\6\6\uffff\6\6",
            "\u008f\6\1\uffff\13\6\1\uffff\1\6\1\24\11\uffff\4\6\5\uffff"+
            "\4\6\1\24\13\uffff\1\6\2\uffff\2\6\2\uffff\1\6\6\uffff\6\6",
            "\u008f\6\1\uffff\13\6\1\uffff\1\6\1\24\11\uffff\4\6\5\uffff"+
            "\4\6\1\24\13\uffff\1\6\2\uffff\2\6\2\uffff\1\6\6\uffff\6\6",
            "\u008f\6\1\uffff\13\6\1\uffff\1\6\1\24\11\uffff\4\6\5\uffff"+
            "\4\6\1\24\13\uffff\1\6\2\uffff\2\6\2\uffff\1\6\6\uffff\6\6",
            "\u008f\6\1\uffff\13\6\1\uffff\1\6\1\24\11\uffff\4\6\5\uffff"+
            "\4\6\1\24\13\uffff\1\6\2\uffff\2\6\2\uffff\1\6\6\uffff\6\6",
            "\u008f\6\1\uffff\13\6\1\uffff\1\6\1\24\11\uffff\4\6\5\uffff"+
            "\4\6\1\24\13\uffff\1\6\2\uffff\2\6\2\uffff\1\6\6\uffff\6\6",
            "\u008f\6\1\uffff\13\6\1\uffff\1\6\1\24\11\uffff\4\6\5\uffff"+
            "\4\6\1\24\13\uffff\1\6\2\uffff\2\6\2\uffff\1\6\6\uffff\6\6",
            "\1\6\u0099\uffff\1\24\26\uffff\1\24",
            "\1\6\u0099\uffff\1\24\26\uffff\1\24",
            "\1\6\u0099\uffff\1\24\26\uffff\1\24",
            "\1\6\135\uffff\1\24\26\uffff\1\24",
            "\u008f\6\1\uffff\13\6\1\uffff\1\6\1\24\11\uffff\4\6\5\uffff"+
            "\4\6\1\24\13\uffff\1\6\2\uffff\2\6\2\uffff\1\6\6\uffff\6\6",
            "\u008f\6\1\uffff\13\6\1\uffff\1\6\1\24\11\uffff\4\6\5\uffff"+
            "\4\6\1\24\13\uffff\1\6\2\uffff\2\6\2\uffff\1\6\6\uffff\6\6",
            "\u008f\6\1\uffff\13\6\1\uffff\1\6\1\24\11\uffff\4\6\5\uffff"+
            "\4\6\1\24\13\uffff\1\6\2\uffff\2\6\2\uffff\1\6\6\uffff\6\6",
            "\u008f\6\1\uffff\13\6\1\uffff\1\6\1\24\11\uffff\4\6\5\uffff"+
            "\4\6\1\24\13\uffff\1\6\2\uffff\2\6\2\uffff\1\6\6\uffff\6\6",
            "\u008f\6\1\uffff\13\6\1\uffff\1\6\1\24\11\uffff\4\6\5\uffff"+
            "\4\6\1\24\13\uffff\1\6\2\uffff\2\6\2\uffff\1\6\6\uffff\6\6",
            "\u008f\6\1\uffff\13\6\1\uffff\1\6\1\24\11\uffff\4\6\5\uffff"+
            "\4\6\1\24\13\uffff\1\6\2\uffff\2\6\2\uffff\1\6\6\uffff\6\6",
            "\u008f\6\1\uffff\13\6\1\uffff\1\6\1\24\11\uffff\4\6\5\uffff"+
            "\4\6\1\24\13\uffff\1\6\2\uffff\2\6\2\uffff\1\6\6\uffff\6\6",
            "\u008f\6\1\uffff\13\6\1\uffff\1\6\1\24\11\uffff\4\6\5\uffff"+
            "\4\6\1\24\13\uffff\1\6\2\uffff\2\6\2\uffff\1\6\6\uffff\6\6",
            "\u008f\6\1\uffff\13\6\1\uffff\1\6\1\24\11\uffff\4\6\5\uffff"+
            "\4\6\1\24\13\uffff\1\6\2\uffff\2\6\2\uffff\1\6\6\uffff\6\6",
            "\u008f\6\1\uffff\13\6\1\uffff\1\6\1\24\11\uffff\4\6\5\uffff"+
            "\4\6\1\24\13\uffff\1\6\2\uffff\2\6\2\uffff\1\6\6\uffff\6\6",
            "\u008f\6\1\uffff\13\6\1\uffff\1\6\1\24\11\uffff\4\6\5\uffff"+
            "\4\6\1\24\13\uffff\1\6\2\uffff\2\6\2\uffff\1\6\6\uffff\6\6",
            "\u008f\6\1\uffff\13\6\1\uffff\1\6\1\24\11\uffff\4\6\5\uffff"+
            "\4\6\1\24\13\uffff\1\6\2\uffff\2\6\2\uffff\1\6\6\uffff\6\6",
            "\u008f\6\1\uffff\13\6\1\uffff\1\6\1\24\11\uffff\4\6\5\uffff"+
            "\4\6\1\24\13\uffff\1\6\2\uffff\2\6\2\uffff\1\6\6\uffff\6\6",
            "\u008f\6\1\uffff\13\6\1\uffff\1\6\1\24\11\uffff\4\6\5\uffff"+
            "\4\6\1\24\13\uffff\1\6\2\uffff\2\6\2\uffff\1\6\6\uffff\6\6",
            "\u008f\6\1\uffff\13\6\1\uffff\1\6\1\24\11\uffff\4\6\5\uffff"+
            "\4\6\1\24\13\uffff\1\6\2\uffff\2\6\2\uffff\1\6\6\uffff\6\6",
            "\u008f\6\1\uffff\13\6\1\uffff\1\6\1\24\11\uffff\4\6\5\uffff"+
            "\4\6\1\24\13\uffff\1\6\2\uffff\2\6\2\uffff\1\6\6\uffff\6\6",
            "\1\6\2\uffff\1\6\44\uffff\1\6\1\24\26\uffff\1\24",
            "\1\6\1\24\26\uffff\1\24",
            "\u008f\6\1\uffff\13\6\1\uffff\1\6\1\24\11\uffff\4\6\5\uffff"+
            "\4\6\1\24\13\uffff\1\6\2\uffff\2\6\2\uffff\1\6\6\uffff\6\6",
            "\1\6\u0093\uffff\1\24\26\uffff\1\24",
            "\1\6\u0093\uffff\1\24\26\uffff\1\24",
            "\1\6\132\uffff\1\24\26\uffff\1\24",
            "\1\6\1\24\26\uffff\1\24",
            "\u008f\6\1\uffff\13\6\1\uffff\1\6\1\24\11\uffff\4\6\5\uffff"+
            "\4\6\1\24\13\uffff\1\6\2\uffff\2\6\2\uffff\1\6\6\uffff\6\6",
            "\1\6\147\uffff\1\6\5\uffff\1\6\4\uffff\1\6\43\uffff\1\6\1"+
            "\24\26\uffff\1\24",
            "\1\6\66\uffff\1\24\26\uffff\1\24",
            "\1\6\147\uffff\1\6\5\uffff\1\6\4\uffff\1\6\43\uffff\1\6\1"+
            "\24\26\uffff\1\24",
            "\1\6\15\uffff\1\6\10\uffff\1\6\20\uffff\1\6\13\uffff\1\6\7"+
            "\uffff\1\6\6\uffff\1\6\14\uffff\1\6\3\uffff\1\6\4\uffff\1\6"+
            "\65\uffff\1\24\7\uffff\1\6\16\uffff\1\24",
            "\1\6\15\uffff\1\6\10\uffff\1\6\20\uffff\1\6\13\uffff\1\6\7"+
            "\uffff\1\6\6\uffff\1\6\14\uffff\1\6\3\uffff\1\6\4\uffff\1\6"+
            "\65\uffff\1\24\7\uffff\1\6\16\uffff\1\24",
            "\1\6\14\uffff\1\6\147\uffff\1\24\26\uffff\1\24",
            "\1\24\26\uffff\1\24\16\uffff\2\6",
            "\u008f\6\1\uffff\13\6\1\uffff\1\6\1\24\11\uffff\4\6\5\uffff"+
            "\4\6\1\24\13\uffff\1\6\2\uffff\2\6\2\uffff\1\6\6\uffff\6\6",
            "\1\6\121\uffff\1\6\1\24\26\uffff\1\24",
            "\u008f\6\1\uffff\12\6\2\uffff\1\6\1\24\26\uffff\1\24\22\uffff"+
            "\1\6",
            "\u008f\6\1\uffff\13\6\1\uffff\1\6\1\24\11\uffff\4\6\5\uffff"+
            "\4\6\1\24\13\uffff\1\6\2\uffff\2\6\2\uffff\1\6\6\uffff\6\6",
            "\u008f\6\1\uffff\13\6\1\uffff\1\6\1\24\11\uffff\4\6\5\uffff"+
            "\4\6\1\24\13\uffff\1\6\2\uffff\2\6\2\uffff\1\6\6\uffff\6\6",
            "\u008f\6\1\uffff\13\6\1\uffff\1\6\1\24\11\uffff\4\6\5\uffff"+
            "\4\6\1\24\13\uffff\1\6\2\uffff\2\6\2\uffff\1\6\6\uffff\6\6",
            "\u008f\6\1\uffff\13\6\1\uffff\1\6\1\24\11\uffff\4\6\5\uffff"+
            "\4\6\1\24\13\uffff\1\6\2\uffff\2\6\2\uffff\1\6\6\uffff\6\6",
            "\u008f\6\1\uffff\13\6\1\uffff\1\6\1\24\11\uffff\4\6\5\uffff"+
            "\4\6\1\24\13\uffff\1\6\2\uffff\2\6\2\uffff\1\6\6\uffff\6\6",
            "\u008f\6\1\uffff\13\6\1\uffff\1\6\1\24\11\uffff\4\6\5\uffff"+
            "\4\6\1\24\13\uffff\1\6\2\uffff\2\6\2\uffff\1\6\6\uffff\6\6",
            "\u008f\6\1\uffff\13\6\1\uffff\1\6\1\24\11\uffff\4\6\5\uffff"+
            "\4\6\1\24\13\uffff\1\6\2\uffff\2\6\2\uffff\1\6\6\uffff\6\6",
            "\1\6\u0099\uffff\1\24",
            "\1\6\u0099\uffff\1\24",
            "\1\6\u0099\uffff\1\24",
            "\1\6\135\uffff\1\24",
            "\u008f\6\1\uffff\13\6\1\uffff\1\6\1\24\11\uffff\4\6\5\uffff"+
            "\4\6\14\uffff\1\6\2\uffff\2\6\2\uffff\1\6\6\uffff\6\6",
            "\u008f\6\1\uffff\13\6\1\uffff\1\6\1\24\11\uffff\4\6\5\uffff"+
            "\4\6\14\uffff\1\6\2\uffff\2\6\2\uffff\1\6\6\uffff\6\6",
            "\u008f\6\1\uffff\13\6\1\uffff\1\6\1\24\11\uffff\4\6\5\uffff"+
            "\4\6\14\uffff\1\6\2\uffff\2\6\2\uffff\1\6\6\uffff\6\6",
            "\u008f\6\1\uffff\13\6\1\uffff\1\6\1\24\11\uffff\4\6\5\uffff"+
            "\4\6\14\uffff\1\6\2\uffff\2\6\2\uffff\1\6\6\uffff\6\6",
            "\u008f\6\1\uffff\13\6\1\uffff\1\6\1\24\11\uffff\4\6\5\uffff"+
            "\4\6\14\uffff\1\6\2\uffff\2\6\2\uffff\1\6\6\uffff\6\6",
            "\u008f\6\1\uffff\13\6\1\uffff\1\6\1\24\11\uffff\4\6\5\uffff"+
            "\4\6\14\uffff\1\6\2\uffff\2\6\2\uffff\1\6\6\uffff\6\6",
            "\u008f\6\1\uffff\13\6\1\uffff\1\6\1\24\11\uffff\4\6\5\uffff"+
            "\4\6\14\uffff\1\6\2\uffff\2\6\2\uffff\1\6\6\uffff\6\6",
            "\u008f\6\1\uffff\13\6\1\uffff\1\6\1\24\11\uffff\4\6\5\uffff"+
            "\4\6\14\uffff\1\6\2\uffff\2\6\2\uffff\1\6\6\uffff\6\6",
            "\u008f\6\1\uffff\13\6\1\uffff\1\6\1\24\11\uffff\4\6\5\uffff"+
            "\4\6\14\uffff\1\6\2\uffff\2\6\2\uffff\1\6\6\uffff\6\6",
            "\u008f\6\1\uffff\13\6\1\uffff\1\6\1\24\11\uffff\4\6\5\uffff"+
            "\4\6\14\uffff\1\6\2\uffff\2\6\2\uffff\1\6\6\uffff\6\6",
            "\u008f\6\1\uffff\13\6\1\uffff\1\6\1\24\11\uffff\4\6\5\uffff"+
            "\4\6\14\uffff\1\6\2\uffff\2\6\2\uffff\1\6\6\uffff\6\6",
            "\u008f\6\1\uffff\13\6\1\uffff\1\6\1\24\11\uffff\4\6\5\uffff"+
            "\4\6\14\uffff\1\6\2\uffff\2\6\2\uffff\1\6\6\uffff\6\6",
            "\u008f\6\1\uffff\13\6\1\uffff\1\6\1\24\11\uffff\4\6\5\uffff"+
            "\4\6\14\uffff\1\6\2\uffff\2\6\2\uffff\1\6\6\uffff\6\6",
            "\u008f\6\1\uffff\13\6\1\uffff\1\6\1\24\11\uffff\4\6\5\uffff"+
            "\4\6\14\uffff\1\6\2\uffff\2\6\2\uffff\1\6\6\uffff\6\6",
            "\u008f\6\1\uffff\13\6\1\uffff\1\6\1\24\11\uffff\4\6\5\uffff"+
            "\4\6\14\uffff\1\6\2\uffff\2\6\2\uffff\1\6\6\uffff\6\6",
            "\u008f\6\1\uffff\13\6\1\uffff\1\6\1\24\11\uffff\4\6\5\uffff"+
            "\4\6\14\uffff\1\6\2\uffff\2\6\2\uffff\1\6\6\uffff\6\6",
            "\1\6\2\uffff\1\6\44\uffff\1\6\1\24",
            "\1\6\1\24",
            "\u008f\6\1\uffff\13\6\1\uffff\1\6\1\24\11\uffff\4\6\5\uffff"+
            "\4\6\14\uffff\1\6\2\uffff\2\6\2\uffff\1\6\6\uffff\6\6",
            "\1\6\u0093\uffff\1\24",
            "\1\6\u0093\uffff\1\24",
            "\1\6\132\uffff\1\24",
            "\1\6\1\24",
            "\u008f\6\1\uffff\13\6\1\uffff\1\6\1\24\11\uffff\4\6\5\uffff"+
            "\4\6\14\uffff\1\6\2\uffff\2\6\2\uffff\1\6\6\uffff\6\6",
            "\1\6\147\uffff\1\6\5\uffff\1\6\4\uffff\1\6\43\uffff\1\6\1"+
            "\24",
            "\1\6\66\uffff\1\24",
            "\1\6\147\uffff\1\6\5\uffff\1\6\4\uffff\1\6\43\uffff\1\6\1"+
            "\24",
            "\1\6\15\uffff\1\6\10\uffff\1\6\20\uffff\1\6\13\uffff\1\6\7"+
            "\uffff\1\6\6\uffff\1\6\14\uffff\1\6\3\uffff\1\6\4\uffff\1\6"+
            "\65\uffff\1\24\7\uffff\1\6",
            "\1\6\15\uffff\1\6\10\uffff\1\6\20\uffff\1\6\13\uffff\1\6\7"+
            "\uffff\1\6\6\uffff\1\6\14\uffff\1\6\3\uffff\1\6\4\uffff\1\6"+
            "\65\uffff\1\24\7\uffff\1\6",
            "\1\6\14\uffff\1\6\147\uffff\1\24",
            "\1\24\45\uffff\2\6",
            "\u008f\6\1\uffff\13\6\1\uffff\1\6\1\24\11\uffff\4\6\5\uffff"+
            "\4\6\14\uffff\1\6\2\uffff\2\6\2\uffff\1\6\6\uffff\6\6",
            "\1\6\121\uffff\1\6\1\24",
            "\u008f\6\1\uffff\12\6\2\uffff\1\6\1\24\51\uffff\1\6",
            "\u008f\6\1\uffff\13\6\1\uffff\1\6\1\24\11\uffff\4\6\5\uffff"+
            "\4\6\14\uffff\1\6\2\uffff\2\6\2\uffff\1\6\6\uffff\6\6",
            "\u008f\6\1\uffff\13\6\1\uffff\1\6\1\24\11\uffff\4\6\5\uffff"+
            "\4\6\14\uffff\1\6\2\uffff\2\6\2\uffff\1\6\6\uffff\6\6",
            "\u008f\6\1\uffff\13\6\1\uffff\1\6\1\24\11\uffff\4\6\5\uffff"+
            "\4\6\14\uffff\1\6\2\uffff\2\6\2\uffff\1\6\6\uffff\6\6",
            "\u008f\6\1\uffff\13\6\1\uffff\1\6\1\24\11\uffff\4\6\5\uffff"+
            "\4\6\14\uffff\1\6\2\uffff\2\6\2\uffff\1\6\6\uffff\6\6",
            "\u008f\6\1\uffff\13\6\1\uffff\1\6\1\24\11\uffff\4\6\5\uffff"+
            "\4\6\14\uffff\1\6\2\uffff\2\6\2\uffff\1\6\6\uffff\6\6",
            "\u008f\6\1\uffff\13\6\1\uffff\1\6\1\24\11\uffff\4\6\5\uffff"+
            "\4\6\14\uffff\1\6\2\uffff\2\6\2\uffff\1\6\6\uffff\6\6",
            "\u008f\6\1\uffff\13\6\1\uffff\1\6\1\24\11\uffff\4\6\5\uffff"+
            "\4\6\14\uffff\1\6\2\uffff\2\6\2\uffff\1\6\6\uffff\6\6",
            "\u008f\u00cf\1\uffff\12\u00cf\15\uffff\1\6\37\uffff\1\u00cf",
            "\1\6\u0099\uffff\1\24",
            "\1\6\u0099\uffff\1\24",
            "\1\6\u0099\uffff\1\24",
            "\1\6\135\uffff\1\24",
            "\u008f\6\1\uffff\13\6\1\uffff\1\6\1\24\11\uffff\4\6\5\uffff"+
            "\4\6\14\uffff\1\6\2\uffff\2\6\2\uffff\1\6\6\uffff\6\6",
            "\u008f\6\1\uffff\13\6\1\uffff\1\6\1\24\11\uffff\4\6\5\uffff"+
            "\4\6\14\uffff\1\6\2\uffff\2\6\2\uffff\1\6\6\uffff\6\6",
            "\u008f\6\1\uffff\13\6\1\uffff\1\6\1\24\11\uffff\4\6\5\uffff"+
            "\4\6\14\uffff\1\6\2\uffff\2\6\2\uffff\1\6\6\uffff\6\6",
            "\u008f\6\1\uffff\13\6\1\uffff\1\6\1\24\11\uffff\4\6\5\uffff"+
            "\4\6\14\uffff\1\6\2\uffff\2\6\2\uffff\1\6\6\uffff\6\6",
            "\u008f\6\1\uffff\13\6\1\uffff\1\6\1\24\11\uffff\4\6\5\uffff"+
            "\4\6\14\uffff\1\6\2\uffff\2\6\2\uffff\1\6\6\uffff\6\6",
            "\u008f\6\1\uffff\13\6\1\uffff\1\6\1\24\11\uffff\4\6\5\uffff"+
            "\4\6\14\uffff\1\6\2\uffff\2\6\2\uffff\1\6\6\uffff\6\6",
            "\u008f\6\1\uffff\13\6\1\uffff\1\6\1\24\11\uffff\4\6\5\uffff"+
            "\4\6\14\uffff\1\6\2\uffff\2\6\2\uffff\1\6\6\uffff\6\6",
            "\u008f\6\1\uffff\13\6\1\uffff\1\6\1\24\11\uffff\4\6\5\uffff"+
            "\4\6\14\uffff\1\6\2\uffff\2\6\2\uffff\1\6\6\uffff\6\6",
            "\u008f\6\1\uffff\13\6\1\uffff\1\6\1\24\11\uffff\4\6\5\uffff"+
            "\4\6\14\uffff\1\6\2\uffff\2\6\2\uffff\1\6\6\uffff\6\6",
            "\u008f\6\1\uffff\13\6\1\uffff\1\6\1\24\11\uffff\4\6\5\uffff"+
            "\4\6\14\uffff\1\6\2\uffff\2\6\2\uffff\1\6\6\uffff\6\6",
            "\u008f\6\1\uffff\13\6\1\uffff\1\6\1\24\11\uffff\4\6\5\uffff"+
            "\4\6\14\uffff\1\6\2\uffff\2\6\2\uffff\1\6\6\uffff\6\6",
            "\u008f\6\1\uffff\13\6\1\uffff\1\6\1\24\11\uffff\4\6\5\uffff"+
            "\4\6\14\uffff\1\6\2\uffff\2\6\2\uffff\1\6\6\uffff\6\6",
            "\u008f\6\1\uffff\13\6\1\uffff\1\6\1\24\11\uffff\4\6\5\uffff"+
            "\4\6\14\uffff\1\6\2\uffff\2\6\2\uffff\1\6\6\uffff\6\6",
            "\u008f\6\1\uffff\13\6\1\uffff\1\6\1\24\11\uffff\4\6\5\uffff"+
            "\4\6\14\uffff\1\6\2\uffff\2\6\2\uffff\1\6\6\uffff\6\6",
            "\u008f\6\1\uffff\13\6\1\uffff\1\6\1\24\11\uffff\4\6\5\uffff"+
            "\4\6\14\uffff\1\6\2\uffff\2\6\2\uffff\1\6\6\uffff\6\6",
            "\u008f\6\1\uffff\13\6\1\uffff\1\6\1\24\11\uffff\4\6\5\uffff"+
            "\4\6\14\uffff\1\6\2\uffff\2\6\2\uffff\1\6\6\uffff\6\6",
            "\1\6\2\uffff\1\6\44\uffff\1\6\1\24",
            "\1\6\1\24",
            "\u008f\6\1\uffff\13\6\1\uffff\1\6\1\24\11\uffff\4\6\5\uffff"+
            "\4\6\14\uffff\1\6\2\uffff\2\6\2\uffff\1\6\6\uffff\6\6",
            "\1\6\u0093\uffff\1\24",
            "\1\6\u0093\uffff\1\24",
            "\1\6\132\uffff\1\24",
            "\1\6\1\24",
            "\u008f\6\1\uffff\13\6\1\uffff\1\6\1\24\11\uffff\4\6\5\uffff"+
            "\4\6\14\uffff\1\6\2\uffff\2\6\2\uffff\1\6\6\uffff\6\6",
            "\1\6\147\uffff\1\6\5\uffff\1\6\4\uffff\1\6\43\uffff\1\6\1"+
            "\24",
            "\1\6\66\uffff\1\24",
            "\1\6\147\uffff\1\6\5\uffff\1\6\4\uffff\1\6\43\uffff\1\6\1"+
            "\24",
            "\1\6\15\uffff\1\6\10\uffff\1\6\20\uffff\1\6\13\uffff\1\6\7"+
            "\uffff\1\6\6\uffff\1\6\14\uffff\1\6\3\uffff\1\6\4\uffff\1\6"+
            "\65\uffff\1\24\7\uffff\1\6",
            "\1\6\15\uffff\1\6\10\uffff\1\6\20\uffff\1\6\13\uffff\1\6\7"+
            "\uffff\1\6\6\uffff\1\6\14\uffff\1\6\3\uffff\1\6\4\uffff\1\6"+
            "\65\uffff\1\24\7\uffff\1\6",
            "\1\6\14\uffff\1\6\147\uffff\1\24",
            "\1\24\45\uffff\2\6",
            "\u008f\6\1\uffff\13\6\1\uffff\1\6\1\24\11\uffff\4\6\5\uffff"+
            "\4\6\14\uffff\1\6\2\uffff\2\6\2\uffff\1\6\6\uffff\6\6",
            "\1\6\121\uffff\1\6\1\24",
            "\u008f\6\1\uffff\12\6\2\uffff\1\6\1\24\51\uffff\1\6",
            "\u008f\6\1\uffff\13\6\1\uffff\1\6\1\24\11\uffff\4\6\5\uffff"+
            "\4\6\14\uffff\1\6\2\uffff\2\6\2\uffff\1\6\6\uffff\6\6",
            "\u008f\6\1\uffff\13\6\1\uffff\1\6\1\24\11\uffff\4\6\5\uffff"+
            "\4\6\14\uffff\1\6\2\uffff\2\6\2\uffff\1\6\6\uffff\6\6",
            "\u008f\6\1\uffff\13\6\1\uffff\1\6\1\24\11\uffff\4\6\5\uffff"+
            "\4\6\14\uffff\1\6\2\uffff\2\6\2\uffff\1\6\6\uffff\6\6",
            "\u008f\6\1\uffff\13\6\1\uffff\1\6\1\24\11\uffff\4\6\5\uffff"+
            "\4\6\14\uffff\1\6\2\uffff\2\6\2\uffff\1\6\6\uffff\6\6",
            "\u008f\6\1\uffff\13\6\1\uffff\1\6\1\24\11\uffff\4\6\5\uffff"+
            "\4\6\14\uffff\1\6\2\uffff\2\6\2\uffff\1\6\6\uffff\6\6",
            "\u008f\6\1\uffff\13\6\1\uffff\1\6\1\24\11\uffff\4\6\5\uffff"+
            "\4\6\14\uffff\1\6\2\uffff\2\6\2\uffff\1\6\6\uffff\6\6",
            "\u008f\6\1\uffff\13\6\1\uffff\1\6\1\24\11\uffff\4\6\5\uffff"+
            "\4\6\14\uffff\1\6\2\uffff\2\6\2\uffff\1\6\6\uffff\6\6",
            "\3\6\5\uffff\3\6\1\uffff\1\6\4\uffff\1\6\2\uffff\2\6\3\uffff"+
            "\2\6\2\uffff\1\6\1\uffff\1\6\3\uffff\1\6\1\uffff\1\6\1\uffff"+
            "\2\6\4\uffff\3\6\2\uffff\1\6\1\uffff\3\6\2\uffff\1\6\5\uffff"+
            "\2\6\7\uffff\2\6\5\uffff\1\6\4\uffff\2\6\1\uffff\1\6\4\uffff"+
            "\1\6\3\uffff\1\6\3\uffff\2\6\6\uffff\1\6\6\uffff\1\6\5\uffff"+
            "\2\6\4\uffff\1\6\1\uffff\1\6\7\uffff\1\6\16\uffff\1\24\1\6\2"+
            "\uffff\4\6\1\uffff\1\6\1\uffff\1\6\1\uffff\13\6\6\uffff\2\6"
    };

    static final short[] DFA111_eot = DFA.unpackEncodedString(DFA111_eotS);
    static final short[] DFA111_eof = DFA.unpackEncodedString(DFA111_eofS);
    static final char[] DFA111_min = DFA.unpackEncodedStringToUnsignedChars(DFA111_minS);
    static final char[] DFA111_max = DFA.unpackEncodedStringToUnsignedChars(DFA111_maxS);
    static final short[] DFA111_accept = DFA.unpackEncodedString(DFA111_acceptS);
    static final short[] DFA111_special = DFA.unpackEncodedString(DFA111_specialS);
    static final short[][] DFA111_transition;

    static {
        int numStates = DFA111_transitionS.length;
        DFA111_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA111_transition[i] = DFA.unpackEncodedString(DFA111_transitionS[i]);
        }
    }

    class DFA111 extends DFA {

        public DFA111(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 111;
            this.eot = DFA111_eot;
            this.eof = DFA111_eof;
            this.min = DFA111_min;
            this.max = DFA111_max;
            this.accept = DFA111_accept;
            this.special = DFA111_special;
            this.transition = DFA111_transition;
        }
        public String getDescription() {
            return "667:1: p_StepExpr : ( p_AxisStep | p_FilterExpr );";
        }
    }
    static final String DFA113_eotS =
        "\12\uffff";
    static final String DFA113_eofS =
        "\1\uffff\7\10\2\uffff";
    static final String DFA113_minS =
        "\1\20\7\22\2\uffff";
    static final String DFA113_maxS =
        "\1\u00d7\7\u00c9\2\uffff";
    static final String DFA113_acceptS =
        "\10\uffff\1\2\1\1";
    static final String DFA113_specialS =
        "\12\uffff}>";
    static final String[] DFA113_transitionS = {
            "\6\10\1\3\6\10\1\1\6\10\1\2\1\5\15\10\1\7\1\6\52\10\1\4\77"+
            "\10\1\uffff\12\10\15\uffff\1\10\30\uffff\1\10\6\uffff\1\10",
            "\3\10\5\uffff\3\10\1\uffff\1\10\4\uffff\1\10\2\uffff\2\10"+
            "\3\uffff\2\10\2\uffff\1\10\1\uffff\1\10\3\uffff\1\10\1\uffff"+
            "\1\10\1\uffff\2\10\4\uffff\3\10\2\uffff\1\10\1\uffff\3\10\2"+
            "\uffff\1\10\5\uffff\2\10\7\uffff\2\10\5\uffff\1\10\4\uffff\2"+
            "\10\1\uffff\1\10\4\uffff\1\10\3\uffff\1\10\3\uffff\2\10\6\uffff"+
            "\1\10\6\uffff\1\10\5\uffff\2\10\4\uffff\1\10\1\uffff\1\10\7"+
            "\uffff\1\10\17\uffff\1\10\2\uffff\4\10\1\uffff\1\10\1\uffff"+
            "\1\10\1\uffff\13\10\2\uffff\1\10\1\11\2\uffff\2\10",
            "\3\10\5\uffff\3\10\1\uffff\1\10\4\uffff\1\10\2\uffff\2\10"+
            "\3\uffff\2\10\2\uffff\1\10\1\uffff\1\10\3\uffff\1\10\1\uffff"+
            "\1\10\1\uffff\2\10\4\uffff\3\10\2\uffff\1\10\1\uffff\3\10\2"+
            "\uffff\1\10\5\uffff\2\10\7\uffff\2\10\5\uffff\1\10\4\uffff\2"+
            "\10\1\uffff\1\10\4\uffff\1\10\3\uffff\1\10\3\uffff\2\10\6\uffff"+
            "\1\10\6\uffff\1\10\5\uffff\2\10\4\uffff\1\10\1\uffff\1\10\7"+
            "\uffff\1\10\17\uffff\1\10\2\uffff\4\10\1\uffff\1\10\1\uffff"+
            "\1\10\1\uffff\13\10\2\uffff\1\10\1\11\2\uffff\2\10",
            "\3\10\5\uffff\3\10\1\uffff\1\10\4\uffff\1\10\2\uffff\2\10"+
            "\3\uffff\2\10\2\uffff\1\10\1\uffff\1\10\3\uffff\1\10\1\uffff"+
            "\1\10\1\uffff\2\10\4\uffff\3\10\2\uffff\1\10\1\uffff\3\10\2"+
            "\uffff\1\10\5\uffff\2\10\7\uffff\2\10\5\uffff\1\10\4\uffff\2"+
            "\10\1\uffff\1\10\4\uffff\1\10\3\uffff\1\10\3\uffff\2\10\6\uffff"+
            "\1\10\6\uffff\1\10\5\uffff\2\10\4\uffff\1\10\1\uffff\1\10\7"+
            "\uffff\1\10\16\uffff\2\10\2\uffff\4\10\1\uffff\1\10\1\uffff"+
            "\1\10\1\uffff\13\10\2\uffff\1\10\1\11\2\uffff\2\10",
            "\3\10\5\uffff\3\10\1\uffff\1\10\4\uffff\1\10\2\uffff\2\10"+
            "\3\uffff\2\10\2\uffff\1\10\1\uffff\1\10\3\uffff\1\10\1\uffff"+
            "\1\10\1\uffff\2\10\4\uffff\3\10\2\uffff\1\10\1\uffff\3\10\2"+
            "\uffff\1\10\5\uffff\2\10\7\uffff\2\10\5\uffff\1\10\4\uffff\2"+
            "\10\1\uffff\1\10\4\uffff\1\10\3\uffff\1\10\3\uffff\2\10\6\uffff"+
            "\1\10\6\uffff\1\10\5\uffff\2\10\4\uffff\1\10\1\uffff\1\10\7"+
            "\uffff\1\10\17\uffff\1\10\2\uffff\4\10\1\uffff\1\10\1\uffff"+
            "\1\10\1\uffff\13\10\2\uffff\1\10\1\11\2\uffff\2\10",
            "\3\10\5\uffff\3\10\1\uffff\1\10\4\uffff\1\10\2\uffff\2\10"+
            "\3\uffff\2\10\2\uffff\1\10\1\uffff\1\10\3\uffff\1\10\1\uffff"+
            "\1\10\1\uffff\2\10\4\uffff\3\10\2\uffff\1\10\1\uffff\3\10\2"+
            "\uffff\1\10\5\uffff\2\10\7\uffff\2\10\5\uffff\1\10\4\uffff\2"+
            "\10\1\uffff\1\10\4\uffff\1\10\3\uffff\1\10\3\uffff\2\10\6\uffff"+
            "\1\10\6\uffff\1\10\5\uffff\2\10\4\uffff\1\10\1\uffff\1\10\7"+
            "\uffff\1\10\17\uffff\1\10\2\uffff\4\10\1\uffff\1\10\1\uffff"+
            "\1\10\1\uffff\13\10\2\uffff\1\10\1\11\2\uffff\2\10",
            "\3\10\5\uffff\3\10\1\uffff\1\10\4\uffff\1\10\2\uffff\2\10"+
            "\3\uffff\2\10\2\uffff\1\10\1\uffff\1\10\3\uffff\1\10\1\uffff"+
            "\1\10\1\uffff\2\10\4\uffff\3\10\2\uffff\1\10\1\uffff\3\10\2"+
            "\uffff\1\10\5\uffff\2\10\7\uffff\2\10\5\uffff\1\10\4\uffff\2"+
            "\10\1\uffff\1\10\4\uffff\1\10\3\uffff\1\10\3\uffff\2\10\6\uffff"+
            "\1\10\6\uffff\1\10\5\uffff\2\10\4\uffff\1\10\1\uffff\1\10\7"+
            "\uffff\1\10\17\uffff\1\10\2\uffff\4\10\1\uffff\1\10\1\uffff"+
            "\1\10\1\uffff\13\10\2\uffff\1\10\1\11\2\uffff\2\10",
            "\3\10\5\uffff\3\10\1\uffff\1\10\4\uffff\1\10\2\uffff\2\10"+
            "\3\uffff\2\10\2\uffff\1\10\1\uffff\1\10\3\uffff\1\10\1\uffff"+
            "\1\10\1\uffff\2\10\4\uffff\3\10\2\uffff\1\10\1\uffff\3\10\2"+
            "\uffff\1\10\5\uffff\2\10\7\uffff\2\10\5\uffff\1\10\4\uffff\2"+
            "\10\1\uffff\1\10\4\uffff\1\10\3\uffff\1\10\3\uffff\2\10\6\uffff"+
            "\1\10\6\uffff\1\10\5\uffff\2\10\4\uffff\1\10\1\uffff\1\10\7"+
            "\uffff\1\10\17\uffff\1\10\2\uffff\4\10\1\uffff\1\10\1\uffff"+
            "\1\10\1\uffff\13\10\2\uffff\1\10\1\11\2\uffff\2\10",
            "",
            ""
    };

    static final short[] DFA113_eot = DFA.unpackEncodedString(DFA113_eotS);
    static final short[] DFA113_eof = DFA.unpackEncodedString(DFA113_eofS);
    static final char[] DFA113_min = DFA.unpackEncodedStringToUnsignedChars(DFA113_minS);
    static final char[] DFA113_max = DFA.unpackEncodedStringToUnsignedChars(DFA113_maxS);
    static final short[] DFA113_accept = DFA.unpackEncodedString(DFA113_acceptS);
    static final short[] DFA113_special = DFA.unpackEncodedString(DFA113_specialS);
    static final short[][] DFA113_transition;

    static {
        int numStates = DFA113_transitionS.length;
        DFA113_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA113_transition[i] = DFA.unpackEncodedString(DFA113_transitionS[i]);
        }
    }

    class DFA113 extends DFA {

        public DFA113(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 113;
            this.eot = DFA113_eot;
            this.eof = DFA113_eof;
            this.min = DFA113_min;
            this.max = DFA113_max;
            this.accept = DFA113_accept;
            this.special = DFA113_special;
            this.transition = DFA113_transition;
        }
        public String getDescription() {
            return "678:1: p_ForwardStep : ( ( p_ForwardAxis p_NodeTest ) | p_AbbrevForwardStep );";
        }
    }
    static final String DFA118_eotS =
        "\15\uffff";
    static final String DFA118_eofS =
        "\1\uffff\12\13\2\uffff";
    static final String DFA118_minS =
        "\1\20\12\22\2\uffff";
    static final String DFA118_maxS =
        "\1\u00d7\12\u00c9\2\uffff";
    static final String DFA118_acceptS =
        "\13\uffff\1\2\1\1";
    static final String DFA118_specialS =
        "\15\uffff}>";
    static final String[] DFA118_transitionS = {
            "\6\13\1\3\10\13\1\10\11\13\1\1\1\2\43\13\1\12\12\13\1\7\3\13"+
            "\1\5\1\4\5\13\1\11\26\13\1\6\43\13\1\uffff\12\13\15\uffff\1"+
            "\13\37\uffff\1\13",
            "\3\13\5\uffff\3\13\1\uffff\1\13\4\uffff\1\13\2\uffff\2\13"+
            "\3\uffff\2\13\2\uffff\1\13\1\uffff\1\13\3\uffff\1\13\1\uffff"+
            "\1\13\1\uffff\2\13\4\uffff\3\13\2\uffff\1\13\1\uffff\3\13\2"+
            "\uffff\1\13\5\uffff\2\13\7\uffff\2\13\5\uffff\1\13\4\uffff\2"+
            "\13\1\uffff\1\13\4\uffff\1\13\3\uffff\1\13\3\uffff\2\13\6\uffff"+
            "\1\13\6\uffff\1\13\5\uffff\2\13\4\uffff\1\13\1\uffff\1\13\7"+
            "\uffff\1\13\16\uffff\1\14\1\13\2\uffff\4\13\1\uffff\1\13\1\uffff"+
            "\1\13\1\uffff\13\13\2\uffff\1\13\3\uffff\2\13",
            "\3\13\5\uffff\3\13\1\uffff\1\13\4\uffff\1\13\2\uffff\2\13"+
            "\3\uffff\2\13\2\uffff\1\13\1\uffff\1\13\3\uffff\1\13\1\uffff"+
            "\1\13\1\uffff\2\13\4\uffff\3\13\2\uffff\1\13\1\uffff\3\13\2"+
            "\uffff\1\13\5\uffff\2\13\7\uffff\2\13\5\uffff\1\13\4\uffff\2"+
            "\13\1\uffff\1\13\4\uffff\1\13\3\uffff\1\13\3\uffff\2\13\6\uffff"+
            "\1\13\6\uffff\1\13\5\uffff\2\13\4\uffff\1\13\1\uffff\1\13\7"+
            "\uffff\1\13\16\uffff\1\14\1\13\2\uffff\4\13\1\uffff\1\13\1\uffff"+
            "\1\13\1\uffff\13\13\2\uffff\1\13\3\uffff\2\13",
            "\3\13\5\uffff\3\13\1\uffff\1\13\4\uffff\1\13\2\uffff\2\13"+
            "\3\uffff\2\13\2\uffff\1\13\1\uffff\1\13\3\uffff\1\13\1\uffff"+
            "\1\13\1\uffff\2\13\4\uffff\3\13\2\uffff\1\13\1\uffff\3\13\2"+
            "\uffff\1\13\5\uffff\2\13\7\uffff\2\13\5\uffff\1\13\4\uffff\2"+
            "\13\1\uffff\1\13\4\uffff\1\13\3\uffff\1\13\3\uffff\2\13\6\uffff"+
            "\1\13\6\uffff\1\13\5\uffff\2\13\4\uffff\1\13\1\uffff\1\13\7"+
            "\uffff\1\13\16\uffff\1\14\1\13\2\uffff\4\13\1\uffff\1\13\1\uffff"+
            "\1\13\1\uffff\13\13\2\uffff\1\13\3\uffff\2\13",
            "\3\13\5\uffff\3\13\1\uffff\1\13\4\uffff\1\13\2\uffff\2\13"+
            "\3\uffff\2\13\2\uffff\1\13\1\uffff\1\13\3\uffff\1\13\1\uffff"+
            "\1\13\1\uffff\2\13\4\uffff\3\13\2\uffff\1\13\1\uffff\3\13\2"+
            "\uffff\1\13\5\uffff\2\13\7\uffff\2\13\5\uffff\1\13\4\uffff\2"+
            "\13\1\uffff\1\13\4\uffff\1\13\3\uffff\1\13\3\uffff\2\13\6\uffff"+
            "\1\13\6\uffff\1\13\5\uffff\2\13\4\uffff\1\13\1\uffff\1\13\7"+
            "\uffff\1\13\16\uffff\1\14\1\13\2\uffff\4\13\1\uffff\1\13\1\uffff"+
            "\1\13\1\uffff\13\13\2\uffff\1\13\3\uffff\2\13",
            "\3\13\5\uffff\3\13\1\uffff\1\13\4\uffff\1\13\2\uffff\2\13"+
            "\3\uffff\2\13\2\uffff\1\13\1\uffff\1\13\3\uffff\1\13\1\uffff"+
            "\1\13\1\uffff\2\13\4\uffff\3\13\2\uffff\1\13\1\uffff\3\13\2"+
            "\uffff\1\13\5\uffff\2\13\7\uffff\2\13\5\uffff\1\13\4\uffff\2"+
            "\13\1\uffff\1\13\4\uffff\1\13\3\uffff\1\13\3\uffff\2\13\6\uffff"+
            "\1\13\6\uffff\1\13\5\uffff\2\13\4\uffff\1\13\1\uffff\1\13\7"+
            "\uffff\1\13\16\uffff\1\14\1\13\2\uffff\4\13\1\uffff\1\13\1\uffff"+
            "\1\13\1\uffff\13\13\2\uffff\1\13\3\uffff\2\13",
            "\3\13\5\uffff\3\13\1\uffff\1\13\4\uffff\1\13\2\uffff\2\13"+
            "\3\uffff\2\13\2\uffff\1\13\1\uffff\1\13\3\uffff\1\13\1\uffff"+
            "\1\13\1\uffff\2\13\4\uffff\3\13\2\uffff\1\13\1\uffff\3\13\2"+
            "\uffff\1\13\5\uffff\2\13\7\uffff\2\13\5\uffff\1\13\4\uffff\2"+
            "\13\1\uffff\1\13\4\uffff\1\13\3\uffff\1\13\3\uffff\2\13\6\uffff"+
            "\1\13\6\uffff\1\13\5\uffff\2\13\4\uffff\1\13\1\uffff\1\13\7"+
            "\uffff\1\13\16\uffff\1\14\1\13\2\uffff\4\13\1\uffff\1\13\1\uffff"+
            "\1\13\1\uffff\13\13\2\uffff\1\13\3\uffff\2\13",
            "\3\13\5\uffff\3\13\1\uffff\1\13\4\uffff\1\13\2\uffff\2\13"+
            "\3\uffff\2\13\2\uffff\1\13\1\uffff\1\13\3\uffff\1\13\1\uffff"+
            "\1\13\1\uffff\2\13\4\uffff\3\13\2\uffff\1\13\1\uffff\3\13\2"+
            "\uffff\1\13\5\uffff\2\13\7\uffff\2\13\5\uffff\1\13\4\uffff\2"+
            "\13\1\uffff\1\13\4\uffff\1\13\3\uffff\1\13\3\uffff\2\13\6\uffff"+
            "\1\13\6\uffff\1\13\5\uffff\2\13\4\uffff\1\13\1\uffff\1\13\7"+
            "\uffff\1\13\16\uffff\1\14\1\13\2\uffff\4\13\1\uffff\1\13\1\uffff"+
            "\1\13\1\uffff\13\13\2\uffff\1\13\3\uffff\2\13",
            "\3\13\5\uffff\3\13\1\uffff\1\13\4\uffff\1\13\2\uffff\2\13"+
            "\3\uffff\2\13\2\uffff\1\13\1\uffff\1\13\3\uffff\1\13\1\uffff"+
            "\1\13\1\uffff\2\13\4\uffff\3\13\2\uffff\1\13\1\uffff\3\13\2"+
            "\uffff\1\13\5\uffff\2\13\7\uffff\2\13\5\uffff\1\13\4\uffff\2"+
            "\13\1\uffff\1\13\4\uffff\1\13\3\uffff\1\13\3\uffff\2\13\6\uffff"+
            "\1\13\6\uffff\1\13\5\uffff\2\13\4\uffff\1\13\1\uffff\1\13\7"+
            "\uffff\1\13\16\uffff\1\14\1\13\2\uffff\4\13\1\uffff\1\13\1\uffff"+
            "\1\13\1\uffff\13\13\2\uffff\1\13\3\uffff\2\13",
            "\3\13\5\uffff\3\13\1\uffff\1\13\4\uffff\1\13\2\uffff\2\13"+
            "\3\uffff\2\13\2\uffff\1\13\1\uffff\1\13\3\uffff\1\13\1\uffff"+
            "\1\13\1\uffff\2\13\4\uffff\3\13\2\uffff\1\13\1\uffff\3\13\2"+
            "\uffff\1\13\5\uffff\2\13\7\uffff\2\13\5\uffff\1\13\4\uffff\2"+
            "\13\1\uffff\1\13\4\uffff\1\13\3\uffff\1\13\3\uffff\2\13\6\uffff"+
            "\1\13\6\uffff\1\13\5\uffff\2\13\4\uffff\1\13\1\uffff\1\13\7"+
            "\uffff\1\13\16\uffff\1\14\1\13\2\uffff\4\13\1\uffff\1\13\1\uffff"+
            "\1\13\1\uffff\13\13\2\uffff\1\13\3\uffff\2\13",
            "\3\13\5\uffff\3\13\1\uffff\1\13\4\uffff\1\13\2\uffff\2\13"+
            "\3\uffff\2\13\2\uffff\1\13\1\uffff\1\13\3\uffff\1\13\1\uffff"+
            "\1\13\1\uffff\2\13\4\uffff\3\13\2\uffff\1\13\1\uffff\3\13\2"+
            "\uffff\1\13\5\uffff\2\13\7\uffff\2\13\5\uffff\1\13\4\uffff\2"+
            "\13\1\uffff\1\13\4\uffff\1\13\3\uffff\1\13\3\uffff\2\13\6\uffff"+
            "\1\13\6\uffff\1\13\5\uffff\2\13\4\uffff\1\13\1\uffff\1\13\7"+
            "\uffff\1\13\16\uffff\1\14\1\13\2\uffff\4\13\1\uffff\1\13\1\uffff"+
            "\1\13\1\uffff\13\13\2\uffff\1\13\3\uffff\2\13",
            "",
            ""
    };

    static final short[] DFA118_eot = DFA.unpackEncodedString(DFA118_eotS);
    static final short[] DFA118_eof = DFA.unpackEncodedString(DFA118_eofS);
    static final char[] DFA118_min = DFA.unpackEncodedStringToUnsignedChars(DFA118_minS);
    static final char[] DFA118_max = DFA.unpackEncodedStringToUnsignedChars(DFA118_maxS);
    static final short[] DFA118_accept = DFA.unpackEncodedString(DFA118_acceptS);
    static final short[] DFA118_special = DFA.unpackEncodedString(DFA118_specialS);
    static final short[][] DFA118_transition;

    static {
        int numStates = DFA118_transitionS.length;
        DFA118_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA118_transition[i] = DFA.unpackEncodedString(DFA118_transitionS[i]);
        }
    }

    class DFA118 extends DFA {

        public DFA118(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 118;
            this.eot = DFA118_eot;
            this.eof = DFA118_eof;
            this.min = DFA118_min;
            this.max = DFA118_max;
            this.accept = DFA118_accept;
            this.special = DFA118_special;
            this.transition = DFA118_transition;
        }
        public String getDescription() {
            return "718:1: p_NodeTest : ( p_KindTest | p_NameTest );";
        }
    }
    static final String DFA123_eotS =
        "\15\uffff";
    static final String DFA123_eofS =
        "\15\uffff";
    static final String DFA123_minS =
        "\1\20\4\uffff\3\u00aa\1\uffff\1\20\3\uffff";
    static final String DFA123_maxS =
        "\1\u00e3\4\uffff\3\u00c4\1\uffff\1\u00d7\3\uffff";
    static final String DFA123_acceptS =
        "\1\uffff\1\1\1\2\1\3\1\4\3\uffff\1\10\1\uffff\1\5\1\6\1\7";
    static final String DFA123_specialS =
        "\15\uffff}>";
    static final String[] DFA123_transitionS = {
            "\6\12\1\10\10\12\1\10\10\12\1\7\1\uffff\1\10\2\12\1\uffff\15"+
            "\12\1\uffff\6\12\1\uffff\7\12\1\11\3\12\1\uffff\4\12\1\5\5\12"+
            "\1\10\3\12\2\uffff\5\12\1\10\3\12\1\uffff\1\12\1\6\20\12\1\uffff"+
            "\43\12\1\uffff\3\12\1\uffff\2\12\1\uffff\3\12\1\3\1\uffff\1"+
            "\2\15\uffff\1\10\7\uffff\1\4\20\uffff\2\1\2\uffff\1\12\7\uffff"+
            "\2\10\3\1",
            "",
            "",
            "",
            "",
            "\1\12\2\uffff\1\13\26\uffff\1\12",
            "\1\12\2\uffff\1\14\26\uffff\1\12",
            "\1\12\2\uffff\1\10\26\uffff\1\12",
            "",
            "\u008f\10\1\uffff\12\10\1\12\2\uffff\1\10\26\uffff\1\12\22"+
            "\uffff\1\10",
            "",
            "",
            ""
    };

    static final short[] DFA123_eot = DFA.unpackEncodedString(DFA123_eotS);
    static final short[] DFA123_eof = DFA.unpackEncodedString(DFA123_eofS);
    static final char[] DFA123_min = DFA.unpackEncodedStringToUnsignedChars(DFA123_minS);
    static final char[] DFA123_max = DFA.unpackEncodedStringToUnsignedChars(DFA123_maxS);
    static final short[] DFA123_accept = DFA.unpackEncodedString(DFA123_acceptS);
    static final short[] DFA123_special = DFA.unpackEncodedString(DFA123_specialS);
    static final short[][] DFA123_transition;

    static {
        int numStates = DFA123_transitionS.length;
        DFA123_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA123_transition[i] = DFA.unpackEncodedString(DFA123_transitionS[i]);
        }
    }

    class DFA123 extends DFA {

        public DFA123(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 123;
            this.eot = DFA123_eot;
            this.eof = DFA123_eof;
            this.min = DFA123_min;
            this.max = DFA123_max;
            this.accept = DFA123_accept;
            this.special = DFA123_special;
            this.transition = DFA123_transition;
        }
        public String getDescription() {
            return "749:1: p_PrimaryExpr : ( p_Literal | p_VarRef | p_ParenthesizedExpr | p_ContextItemExpr | p_FunctionCall | p_OrderedExpr | p_UnorderedExpr | p_Constructor );";
        }
    }
    static final String DFA153_eotS =
        "\76\uffff";
    static final String DFA153_eofS =
        "\1\2\75\uffff";
    static final String DFA153_minS =
        "\1\22\1\0\5\uffff\1\0\66\uffff";
    static final String DFA153_maxS =
        "\1\u00c9\1\0\5\uffff\1\0\66\uffff";
    static final String DFA153_acceptS =
        "\2\uffff\1\2\10\uffff\1\1\62\uffff";
    static final String DFA153_specialS =
        "\1\0\1\1\5\uffff\1\2\66\uffff}>";
    static final String[] DFA153_transitionS = {
            "\4\2\4\uffff\1\2\3\uffff\1\2\4\uffff\1\2\2\uffff\2\2\3\uffff"+
            "\2\2\2\uffff\1\2\1\uffff\2\2\2\uffff\1\2\1\uffff\1\2\1\uffff"+
            "\2\2\2\uffff\1\2\1\uffff\3\2\2\uffff\1\2\1\uffff\3\2\2\uffff"+
            "\1\2\5\uffff\2\2\7\uffff\2\2\5\uffff\1\2\4\uffff\1\2\2\uffff"+
            "\1\2\4\uffff\1\2\3\uffff\1\2\3\uffff\2\2\6\uffff\1\2\6\uffff"+
            "\1\2\5\uffff\2\2\4\uffff\1\2\1\uffff\1\2\7\uffff\1\2\17\uffff"+
            "\1\2\1\uffff\2\2\1\uffff\4\2\1\uffff\1\2\1\13\1\1\1\7\7\2\10"+
            "\uffff\2\2",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };

    static final short[] DFA153_eot = DFA.unpackEncodedString(DFA153_eotS);
    static final short[] DFA153_eof = DFA.unpackEncodedString(DFA153_eofS);
    static final char[] DFA153_min = DFA.unpackEncodedStringToUnsignedChars(DFA153_minS);
    static final char[] DFA153_max = DFA.unpackEncodedStringToUnsignedChars(DFA153_maxS);
    static final short[] DFA153_accept = DFA.unpackEncodedString(DFA153_acceptS);
    static final short[] DFA153_special = DFA.unpackEncodedString(DFA153_specialS);
    static final short[][] DFA153_transition;

    static {
        int numStates = DFA153_transitionS.length;
        DFA153_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA153_transition[i] = DFA.unpackEncodedString(DFA153_transitionS[i]);
        }
    }

    class DFA153 extends DFA {

        public DFA153(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 153;
            this.eot = DFA153_eot;
            this.eof = DFA153_eof;
            this.min = DFA153_min;
            this.max = DFA153_max;
            this.accept = DFA153_accept;
            this.special = DFA153_special;
            this.transition = DFA153_transition;
        }
        public String getDescription() {
            return "1003:25: ( ( p_OccurrenceIndicator )=>oi= p_OccurrenceIndicator )?";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA153_0 = input.LA(1);

                         
                        int index153_0 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA153_0==STAR) ) {s = 1;}

                        else if ( (LA153_0==EOF||(LA153_0>=AND && LA153_0<=AT)||LA153_0==CASE||LA153_0==COLLATION||LA153_0==DEFAULT||(LA153_0>=DESCENDING && LA153_0<=DIV)||(LA153_0>=ELSE && LA153_0<=EMPTY)||LA153_0==EQ||(LA153_0>=EXCEPT && LA153_0<=EXTERNAL)||LA153_0==FOR||LA153_0==GE||(LA153_0>=GT && LA153_0<=IDIV)||LA153_0==IN||(LA153_0>=INSTANCE && LA153_0<=IS)||LA153_0==LE||(LA153_0>=LET && LA153_0<=MOD)||LA153_0==NE||(LA153_0>=OR && LA153_0<=ORDER)||(LA153_0>=RETURN && LA153_0<=SATISFIES)||LA153_0==STABLE||LA153_0==TO||LA153_0==UNION||LA153_0==WHERE||LA153_0==COUNT||(LA153_0>=END && LA153_0<=GROUP)||LA153_0==ONLY||LA153_0==START||(LA153_0>=AFTER && LA153_0<=BEFORE)||LA153_0==INTO||LA153_0==MODIFY||LA153_0==WITH||LA153_0==RPAREN||(LA153_0>=LBRACKET && LA153_0<=RBRACKET)||(LA153_0>=RSQUARE && LA153_0<=NOTEQUAL)||LA153_0==COMMA||(LA153_0>=MINUS && LA153_0<=GREATER_GREATER)||(LA153_0>=SEMICOLON && LA153_0<=VBAR)) ) {s = 2;}

                        else if ( (LA153_0==PLUS) ) {s = 7;}

                        else if ( (LA153_0==QUESTION) && (synpred2_XQueryParser())) {s = 11;}

                         
                        input.seek(index153_0);
                        if ( s>=0 ) return s;
                        break;
                    case 1 : 
                        int LA153_1 = input.LA(1);

                         
                        int index153_1 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred2_XQueryParser()) ) {s = 11;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index153_1);
                        if ( s>=0 ) return s;
                        break;
                    case 2 : 
                        int LA153_7 = input.LA(1);

                         
                        int index153_7 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred2_XQueryParser()) ) {s = 11;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index153_7);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 153, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static final String DFA155_eotS =
        "\21\uffff";
    static final String DFA155_eofS =
        "\1\uffff\14\15\4\uffff";
    static final String DFA155_minS =
        "\1\20\14\22\4\uffff";
    static final String DFA155_maxS =
        "\1\u00d7\14\u00c9\4\uffff";
    static final String DFA155_acceptS =
        "\15\uffff\1\4\1\1\1\2\1\3";
    static final String DFA155_specialS =
        "\13\uffff\1\0\5\uffff}>";
    static final String[] DFA155_transitionS = {
            "\6\15\1\3\10\15\1\10\11\15\1\1\1\2\27\15\1\14\13\15\1\12\12"+
            "\15\1\7\3\15\1\5\1\4\5\15\1\11\26\15\1\6\43\15\1\uffff\6\15"+
            "\1\13\3\15\55\uffff\1\15",
            "\4\15\4\uffff\1\15\3\uffff\1\15\4\uffff\1\15\2\uffff\2\15"+
            "\3\uffff\2\15\2\uffff\1\15\1\uffff\2\15\2\uffff\1\15\1\uffff"+
            "\1\15\1\uffff\2\15\2\uffff\1\15\1\uffff\3\15\2\uffff\1\15\1"+
            "\uffff\3\15\2\uffff\1\15\5\uffff\2\15\7\uffff\2\15\5\uffff\1"+
            "\15\4\uffff\1\15\2\uffff\1\15\4\uffff\1\15\3\uffff\1\15\3\uffff"+
            "\2\15\6\uffff\1\15\6\uffff\1\15\5\uffff\2\15\4\uffff\1\15\1"+
            "\uffff\1\15\7\uffff\1\15\16\uffff\1\16\1\15\1\uffff\2\15\1\uffff"+
            "\4\15\1\uffff\13\15\4\uffff\1\15\3\uffff\2\15",
            "\4\15\4\uffff\1\15\3\uffff\1\15\4\uffff\1\15\2\uffff\2\15"+
            "\3\uffff\2\15\2\uffff\1\15\1\uffff\2\15\2\uffff\1\15\1\uffff"+
            "\1\15\1\uffff\2\15\2\uffff\1\15\1\uffff\3\15\2\uffff\1\15\1"+
            "\uffff\3\15\2\uffff\1\15\5\uffff\2\15\7\uffff\2\15\5\uffff\1"+
            "\15\4\uffff\1\15\2\uffff\1\15\4\uffff\1\15\3\uffff\1\15\3\uffff"+
            "\2\15\6\uffff\1\15\6\uffff\1\15\5\uffff\2\15\4\uffff\1\15\1"+
            "\uffff\1\15\7\uffff\1\15\16\uffff\1\16\1\15\1\uffff\2\15\1\uffff"+
            "\4\15\1\uffff\13\15\4\uffff\1\15\3\uffff\2\15",
            "\4\15\4\uffff\1\15\3\uffff\1\15\4\uffff\1\15\2\uffff\2\15"+
            "\3\uffff\2\15\2\uffff\1\15\1\uffff\2\15\2\uffff\1\15\1\uffff"+
            "\1\15\1\uffff\2\15\2\uffff\1\15\1\uffff\3\15\2\uffff\1\15\1"+
            "\uffff\3\15\2\uffff\1\15\5\uffff\2\15\7\uffff\2\15\5\uffff\1"+
            "\15\4\uffff\1\15\2\uffff\1\15\4\uffff\1\15\3\uffff\1\15\3\uffff"+
            "\2\15\6\uffff\1\15\6\uffff\1\15\5\uffff\2\15\4\uffff\1\15\1"+
            "\uffff\1\15\7\uffff\1\15\16\uffff\1\16\1\15\1\uffff\2\15\1\uffff"+
            "\4\15\1\uffff\13\15\4\uffff\1\15\3\uffff\2\15",
            "\4\15\4\uffff\1\15\3\uffff\1\15\4\uffff\1\15\2\uffff\2\15"+
            "\3\uffff\2\15\2\uffff\1\15\1\uffff\2\15\2\uffff\1\15\1\uffff"+
            "\1\15\1\uffff\2\15\2\uffff\1\15\1\uffff\3\15\2\uffff\1\15\1"+
            "\uffff\3\15\2\uffff\1\15\5\uffff\2\15\7\uffff\2\15\5\uffff\1"+
            "\15\4\uffff\1\15\2\uffff\1\15\4\uffff\1\15\3\uffff\1\15\3\uffff"+
            "\2\15\6\uffff\1\15\6\uffff\1\15\5\uffff\2\15\4\uffff\1\15\1"+
            "\uffff\1\15\7\uffff\1\15\16\uffff\1\16\1\15\1\uffff\2\15\1\uffff"+
            "\4\15\1\uffff\13\15\4\uffff\1\15\3\uffff\2\15",
            "\4\15\4\uffff\1\15\3\uffff\1\15\4\uffff\1\15\2\uffff\2\15"+
            "\3\uffff\2\15\2\uffff\1\15\1\uffff\2\15\2\uffff\1\15\1\uffff"+
            "\1\15\1\uffff\2\15\2\uffff\1\15\1\uffff\3\15\2\uffff\1\15\1"+
            "\uffff\3\15\2\uffff\1\15\5\uffff\2\15\7\uffff\2\15\5\uffff\1"+
            "\15\4\uffff\1\15\2\uffff\1\15\4\uffff\1\15\3\uffff\1\15\3\uffff"+
            "\2\15\6\uffff\1\15\6\uffff\1\15\5\uffff\2\15\4\uffff\1\15\1"+
            "\uffff\1\15\7\uffff\1\15\16\uffff\1\16\1\15\1\uffff\2\15\1\uffff"+
            "\4\15\1\uffff\13\15\4\uffff\1\15\3\uffff\2\15",
            "\4\15\4\uffff\1\15\3\uffff\1\15\4\uffff\1\15\2\uffff\2\15"+
            "\3\uffff\2\15\2\uffff\1\15\1\uffff\2\15\2\uffff\1\15\1\uffff"+
            "\1\15\1\uffff\2\15\2\uffff\1\15\1\uffff\3\15\2\uffff\1\15\1"+
            "\uffff\3\15\2\uffff\1\15\5\uffff\2\15\7\uffff\2\15\5\uffff\1"+
            "\15\4\uffff\1\15\2\uffff\1\15\4\uffff\1\15\3\uffff\1\15\3\uffff"+
            "\2\15\6\uffff\1\15\6\uffff\1\15\5\uffff\2\15\4\uffff\1\15\1"+
            "\uffff\1\15\7\uffff\1\15\16\uffff\1\16\1\15\1\uffff\2\15\1\uffff"+
            "\4\15\1\uffff\13\15\4\uffff\1\15\3\uffff\2\15",
            "\4\15\4\uffff\1\15\3\uffff\1\15\4\uffff\1\15\2\uffff\2\15"+
            "\3\uffff\2\15\2\uffff\1\15\1\uffff\2\15\2\uffff\1\15\1\uffff"+
            "\1\15\1\uffff\2\15\2\uffff\1\15\1\uffff\3\15\2\uffff\1\15\1"+
            "\uffff\3\15\2\uffff\1\15\5\uffff\2\15\7\uffff\2\15\5\uffff\1"+
            "\15\4\uffff\1\15\2\uffff\1\15\4\uffff\1\15\3\uffff\1\15\3\uffff"+
            "\2\15\6\uffff\1\15\6\uffff\1\15\5\uffff\2\15\4\uffff\1\15\1"+
            "\uffff\1\15\7\uffff\1\15\16\uffff\1\16\1\15\1\uffff\2\15\1\uffff"+
            "\4\15\1\uffff\13\15\4\uffff\1\15\3\uffff\2\15",
            "\4\15\4\uffff\1\15\3\uffff\1\15\4\uffff\1\15\2\uffff\2\15"+
            "\3\uffff\2\15\2\uffff\1\15\1\uffff\2\15\2\uffff\1\15\1\uffff"+
            "\1\15\1\uffff\2\15\2\uffff\1\15\1\uffff\3\15\2\uffff\1\15\1"+
            "\uffff\3\15\2\uffff\1\15\5\uffff\2\15\7\uffff\2\15\5\uffff\1"+
            "\15\4\uffff\1\15\2\uffff\1\15\4\uffff\1\15\3\uffff\1\15\3\uffff"+
            "\2\15\6\uffff\1\15\6\uffff\1\15\5\uffff\2\15\4\uffff\1\15\1"+
            "\uffff\1\15\7\uffff\1\15\16\uffff\1\16\1\15\1\uffff\2\15\1\uffff"+
            "\4\15\1\uffff\13\15\4\uffff\1\15\3\uffff\2\15",
            "\4\15\4\uffff\1\15\3\uffff\1\15\4\uffff\1\15\2\uffff\2\15"+
            "\3\uffff\2\15\2\uffff\1\15\1\uffff\2\15\2\uffff\1\15\1\uffff"+
            "\1\15\1\uffff\2\15\2\uffff\1\15\1\uffff\3\15\2\uffff\1\15\1"+
            "\uffff\3\15\2\uffff\1\15\5\uffff\2\15\7\uffff\2\15\5\uffff\1"+
            "\15\4\uffff\1\15\2\uffff\1\15\4\uffff\1\15\3\uffff\1\15\3\uffff"+
            "\2\15\6\uffff\1\15\6\uffff\1\15\5\uffff\2\15\4\uffff\1\15\1"+
            "\uffff\1\15\7\uffff\1\15\16\uffff\1\16\1\15\1\uffff\2\15\1\uffff"+
            "\4\15\1\uffff\13\15\4\uffff\1\15\3\uffff\2\15",
            "\4\15\4\uffff\1\15\3\uffff\1\15\4\uffff\1\15\2\uffff\2\15"+
            "\3\uffff\2\15\2\uffff\1\15\1\uffff\2\15\2\uffff\1\15\1\uffff"+
            "\1\15\1\uffff\2\15\2\uffff\1\15\1\uffff\3\15\2\uffff\1\15\1"+
            "\uffff\3\15\2\uffff\1\15\5\uffff\2\15\7\uffff\2\15\5\uffff\1"+
            "\15\4\uffff\1\15\2\uffff\1\15\4\uffff\1\15\3\uffff\1\15\3\uffff"+
            "\2\15\6\uffff\1\15\6\uffff\1\15\5\uffff\2\15\4\uffff\1\15\1"+
            "\uffff\1\15\7\uffff\1\15\16\uffff\1\16\1\15\1\uffff\2\15\1\uffff"+
            "\4\15\1\uffff\13\15\4\uffff\1\15\3\uffff\2\15",
            "\4\15\4\uffff\1\15\3\uffff\1\15\4\uffff\1\15\2\uffff\2\15"+
            "\3\uffff\2\15\2\uffff\1\15\1\uffff\2\15\2\uffff\1\15\1\uffff"+
            "\1\15\1\uffff\2\15\2\uffff\1\15\1\uffff\3\15\2\uffff\1\15\1"+
            "\uffff\3\15\2\uffff\1\15\5\uffff\2\15\7\uffff\2\15\5\uffff\1"+
            "\15\4\uffff\1\15\2\uffff\1\15\4\uffff\1\15\3\uffff\1\15\3\uffff"+
            "\2\15\6\uffff\1\15\6\uffff\1\15\5\uffff\2\15\4\uffff\1\15\1"+
            "\uffff\1\15\7\uffff\1\15\16\uffff\1\17\1\15\1\uffff\2\15\1\uffff"+
            "\4\15\1\uffff\13\15\4\uffff\1\15\3\uffff\2\15",
            "\4\15\4\uffff\1\15\3\uffff\1\15\4\uffff\1\15\2\uffff\2\15"+
            "\3\uffff\2\15\2\uffff\1\15\1\uffff\2\15\2\uffff\1\15\1\uffff"+
            "\1\15\1\uffff\2\15\2\uffff\1\15\1\uffff\3\15\2\uffff\1\15\1"+
            "\uffff\3\15\2\uffff\1\15\5\uffff\2\15\7\uffff\2\15\5\uffff\1"+
            "\15\4\uffff\1\15\2\uffff\1\15\4\uffff\1\15\3\uffff\1\15\3\uffff"+
            "\2\15\6\uffff\1\15\6\uffff\1\15\5\uffff\2\15\4\uffff\1\15\1"+
            "\uffff\1\15\7\uffff\1\15\16\uffff\1\20\1\15\1\uffff\2\15\1\uffff"+
            "\4\15\1\uffff\13\15\4\uffff\1\15\3\uffff\2\15",
            "",
            "",
            "",
            ""
    };

    static final short[] DFA155_eot = DFA.unpackEncodedString(DFA155_eotS);
    static final short[] DFA155_eof = DFA.unpackEncodedString(DFA155_eofS);
    static final char[] DFA155_min = DFA.unpackEncodedStringToUnsignedChars(DFA155_minS);
    static final char[] DFA155_max = DFA.unpackEncodedStringToUnsignedChars(DFA155_maxS);
    static final short[] DFA155_accept = DFA.unpackEncodedString(DFA155_acceptS);
    static final short[] DFA155_special = DFA.unpackEncodedString(DFA155_specialS);
    static final short[][] DFA155_transition;

    static {
        int numStates = DFA155_transitionS.length;
        DFA155_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA155_transition[i] = DFA.unpackEncodedString(DFA155_transitionS[i]);
        }
    }

    class DFA155 extends DFA {

        public DFA155(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 155;
            this.eot = DFA155_eot;
            this.eof = DFA155_eof;
            this.min = DFA155_min;
            this.max = DFA155_max;
            this.accept = DFA155_accept;
            this.special = DFA155_special;
            this.transition = DFA155_transition;
        }
        public String getDescription() {
            return "1013:1: p_ItemType : ( p_KindTest -> ^( KindTest p_KindTest ) | {...}? => ( BINARY LPAREN RPAREN ) -> ^( BinaryTest BINARY LPAREN RPAREN ) | ( ITEM LPAREN RPAREN ) -> ^( ItemTest ITEM LPAREN RPAREN ) | p_AtomicType );";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA155_11 = input.LA(1);

                         
                        int index155_11 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA155_11==LPAREN) && ((lc(MLS)))) {s = 15;}

                        else if ( (LA155_11==EOF||(LA155_11>=AND && LA155_11<=AT)||LA155_11==CASE||LA155_11==COLLATION||LA155_11==DEFAULT||(LA155_11>=DESCENDING && LA155_11<=DIV)||(LA155_11>=ELSE && LA155_11<=EMPTY)||LA155_11==EQ||(LA155_11>=EXCEPT && LA155_11<=EXTERNAL)||LA155_11==FOR||LA155_11==GE||(LA155_11>=GT && LA155_11<=IDIV)||LA155_11==IN||(LA155_11>=INSTANCE && LA155_11<=IS)||LA155_11==LE||(LA155_11>=LET && LA155_11<=MOD)||LA155_11==NE||(LA155_11>=OR && LA155_11<=ORDER)||(LA155_11>=RETURN && LA155_11<=SATISFIES)||LA155_11==STABLE||LA155_11==TO||LA155_11==UNION||LA155_11==WHERE||LA155_11==COUNT||(LA155_11>=END && LA155_11<=GROUP)||LA155_11==ONLY||LA155_11==START||(LA155_11>=AFTER && LA155_11<=BEFORE)||LA155_11==INTO||LA155_11==MODIFY||LA155_11==WITH||LA155_11==RPAREN||(LA155_11>=LBRACKET && LA155_11<=RBRACKET)||(LA155_11>=RSQUARE && LA155_11<=NOTEQUAL)||(LA155_11>=COMMA && LA155_11<=GREATER_GREATER)||LA155_11==COLON||(LA155_11>=SEMICOLON && LA155_11<=VBAR)) ) {s = 13;}

                         
                        input.seek(index155_11);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 155, _s, input);
            error(nvae);
            throw nvae;
        }
    }
 

    public static final BitSet FOLLOW_p_VersionDecl_in_p_Module610 = new BitSet(new long[]{0x1000000400000000L,0x0000000000000200L});
    public static final BitSet FOLLOW_p_LibraryModule_in_p_Module645 = new BitSet(new long[]{0x0000000000000000L});
    public static final BitSet FOLLOW_p_MainModule_in_p_Module671 = new BitSet(new long[]{0x0000000000000000L});
    public static final BitSet FOLLOW_EOF_in_p_Module700 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_XQUERY_in_p_VersionDecl728 = new BitSet(new long[]{0x0000400000000000L,0x0000200000000000L});
    public static final BitSet FOLLOW_ENCODING_in_p_VersionDecl734 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000180000L});
    public static final BitSet FOLLOW_p_StringLiteral_in_p_VersionDecl738 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000100L});
    public static final BitSet FOLLOW_VERSION_in_p_VersionDecl746 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000180000L});
    public static final BitSet FOLLOW_p_StringLiteral_in_p_VersionDecl750 = new BitSet(new long[]{0x0000400000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000100L});
    public static final BitSet FOLLOW_ENCODING_in_p_VersionDecl755 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000180000L});
    public static final BitSet FOLLOW_p_StringLiteral_in_p_VersionDecl759 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000100L});
    public static final BitSet FOLLOW_SEMICOLON_in_p_VersionDecl765 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_pm_Prolog_in_p_MainModule833 = new BitSet(new long[]{0xFFFFFFFFFFFF0000L,0xFFFFFFFFFFFFFFFFL,0x078017FF7FFFFFFFL,0x0000000FC099000FL});
    public static final BitSet FOLLOW_p_QueryBody_in_p_MainModule835 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_p_ModuleDecl_in_p_LibraryModule891 = new BitSet(new long[]{0x1000000400000000L,0x0000000000000200L});
    public static final BitSet FOLLOW_pm_Prolog_in_p_LibraryModule893 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_MODULE_in_p_ModuleDecl949 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000400L});
    public static final BitSet FOLLOW_NAMESPACE_in_p_ModuleDecl953 = new BitSet(new long[]{0xFFFFFFFFFFFF0000L,0xFFFFFFFFFFFFFFFFL,0x000003FF7FFFFFFFL,0x0000000000800000L});
    public static final BitSet FOLLOW_p_NCName_in_p_ModuleDecl955 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0002000000000000L});
    public static final BitSet FOLLOW_EQUAL_in_p_ModuleDecl957 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000180000L});
    public static final BitSet FOLLOW_p_StringLiteral_in_p_ModuleDecl959 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000100L});
    public static final BitSet FOLLOW_SEMICOLON_in_p_ModuleDecl961 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_pm_DefaultNamespaceDecl_in_pm_Prolog1022 = new BitSet(new long[]{0x1000000400000000L});
    public static final BitSet FOLLOW_p_Setter_in_pm_Prolog1028 = new BitSet(new long[]{0x1000000400000000L});
    public static final BitSet FOLLOW_pm_NamespaceDecl_in_pm_Prolog1034 = new BitSet(new long[]{0x1000000400000000L});
    public static final BitSet FOLLOW_p_Import_in_pm_Prolog1040 = new BitSet(new long[]{0x1000000400000000L});
    public static final BitSet FOLLOW_pg_OrderedDecl_in_pm_Prolog1047 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_pm_VarDecl_in_pg_OrderedDecl1325 = new BitSet(new long[]{0x0000000400000002L});
    public static final BitSet FOLLOW_pm_ContextItemDecl_in_pg_OrderedDecl1329 = new BitSet(new long[]{0x0000000400000002L});
    public static final BitSet FOLLOW_pm_FunctionDecl_in_pg_OrderedDecl1333 = new BitSet(new long[]{0x0000000400000002L});
    public static final BitSet FOLLOW_pm_OptionDecl_in_pg_OrderedDecl1337 = new BitSet(new long[]{0x0000000400000002L});
    public static final BitSet FOLLOW_pm_BoundarySpaceDecl_in_p_Setter1368 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_pm_DefaultCollationDecl_in_p_Setter1380 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_pm_BaseURIDecl_in_p_Setter1392 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_pm_ConstructionDecl_in_p_Setter1404 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_pm_OrderingModeDecl_in_p_Setter1416 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_pm_EmptyOrderDecl_in_p_Setter1428 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_pm_RevalidationDecl_in_p_Setter1443 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_pm_CopyNamespacesDecl_in_p_Setter1455 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_pm_SchemaImport_in_p_Import1481 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_pm_ModuleImport_in_p_Import1485 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_DECLARE_in_pm_NamespaceDecl1516 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000400L});
    public static final BitSet FOLLOW_NAMESPACE_in_pm_NamespaceDecl1520 = new BitSet(new long[]{0xFFFFFFFFFFFF0000L,0xFFFFFFFFFFFFFFFFL,0x000003FF7FFFFFFFL,0x0000000000800000L});
    public static final BitSet FOLLOW_p_NCName_in_pm_NamespaceDecl1524 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0002000000000000L});
    public static final BitSet FOLLOW_EQUAL_in_pm_NamespaceDecl1526 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000180000L});
    public static final BitSet FOLLOW_p_StringLiteral_in_pm_NamespaceDecl1530 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000100L});
    public static final BitSet FOLLOW_SEMICOLON_in_pm_NamespaceDecl1532 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_DECLARE_in_pm_BoundarySpaceDecl1597 = new BitSet(new long[]{0x0000000001000000L});
    public static final BitSet FOLLOW_BOUNDARY_SPACE_in_pm_BoundarySpaceDecl1601 = new BitSet(new long[]{0x0000000000000000L,0x0000000801000000L});
    public static final BitSet FOLLOW_PRESERVE_in_pm_BoundarySpaceDecl1606 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000100L});
    public static final BitSet FOLLOW_STRIP_in_pm_BoundarySpaceDecl1612 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000100L});
    public static final BitSet FOLLOW_SEMICOLON_in_pm_BoundarySpaceDecl1615 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_DECLARE_in_pm_DefaultNamespaceDecl1645 = new BitSet(new long[]{0x0000000800000000L});
    public static final BitSet FOLLOW_DEFAULT_in_pm_DefaultNamespaceDecl1649 = new BitSet(new long[]{0x0040040000000000L});
    public static final BitSet FOLLOW_ELEMENT_in_pm_DefaultNamespaceDecl1654 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000400L});
    public static final BitSet FOLLOW_FUNCTION_in_pm_DefaultNamespaceDecl1660 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000400L});
    public static final BitSet FOLLOW_NAMESPACE_in_pm_DefaultNamespaceDecl1665 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000180000L});
    public static final BitSet FOLLOW_p_StringLiteral_in_pm_DefaultNamespaceDecl1667 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000100L});
    public static final BitSet FOLLOW_SEMICOLON_in_pm_DefaultNamespaceDecl1669 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_DECLARE_in_pm_OptionDecl1701 = new BitSet(new long[]{0x0000000000000000L,0x0000000000010000L});
    public static final BitSet FOLLOW_OPTION_in_pm_OptionDecl1705 = new BitSet(new long[]{0xFFFFFFFFFFFF0000L,0xFFFFFFFFFFFFFFFFL,0x000003FF7FFFFFFFL,0x0000000000800000L});
    public static final BitSet FOLLOW_p_QName_in_pm_OptionDecl1707 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000180000L});
    public static final BitSet FOLLOW_p_StringLiteral_in_pm_OptionDecl1709 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000100L});
    public static final BitSet FOLLOW_SEMICOLON_in_pm_OptionDecl1711 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_DECLARE_in_pm_OrderingModeDecl1743 = new BitSet(new long[]{0x0000000000000000L,0x0000000000100000L});
    public static final BitSet FOLLOW_ORDERING_in_pm_OrderingModeDecl1747 = new BitSet(new long[]{0x0000000000000000L,0x0000040000080000L});
    public static final BitSet FOLLOW_ORDERED_in_pm_OrderingModeDecl1752 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000100L});
    public static final BitSet FOLLOW_UNORDERED_in_pm_OrderingModeDecl1758 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000100L});
    public static final BitSet FOLLOW_SEMICOLON_in_pm_OrderingModeDecl1761 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_DECLARE_in_pm_EmptyOrderDecl1793 = new BitSet(new long[]{0x0000000800000000L});
    public static final BitSet FOLLOW_DEFAULT_in_pm_EmptyOrderDecl1797 = new BitSet(new long[]{0x0000000000000000L,0x0000000000040000L});
    public static final BitSet FOLLOW_ORDER_in_pm_EmptyOrderDecl1801 = new BitSet(new long[]{0x0000100000000000L});
    public static final BitSet FOLLOW_EMPTY_in_pm_EmptyOrderDecl1805 = new BitSet(new long[]{0x0100000000000000L,0x0000000000000020L});
    public static final BitSet FOLLOW_GREATEST_in_pm_EmptyOrderDecl1810 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000100L});
    public static final BitSet FOLLOW_LEAST_in_pm_EmptyOrderDecl1816 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000100L});
    public static final BitSet FOLLOW_SEMICOLON_in_pm_EmptyOrderDecl1819 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_DECLARE_in_pm_CopyNamespacesDecl1851 = new BitSet(new long[]{0x0000000200000000L});
    public static final BitSet FOLLOW_COPY_NAMESPACES_in_pm_CopyNamespacesDecl1855 = new BitSet(new long[]{0x0000000000000000L,0x0000000001002000L});
    public static final BitSet FOLLOW_p_PreserveMode_in_pm_CopyNamespacesDecl1857 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0020000000000000L});
    public static final BitSet FOLLOW_COMMA_in_pm_CopyNamespacesDecl1859 = new BitSet(new long[]{0x4000000000000000L,0x0000000000001000L});
    public static final BitSet FOLLOW_p_InheritMode_in_pm_CopyNamespacesDecl1861 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000100L});
    public static final BitSet FOLLOW_SEMICOLON_in_pm_CopyNamespacesDecl1863 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_DECLARE_in_p_DecimalFormatDecl1895 = new BitSet(new long[]{0x0000000800000000L,0x0008000000000000L});
    public static final BitSet FOLLOW_DECIMAL_FORMAT_in_p_DecimalFormatDecl1899 = new BitSet(new long[]{0xFFFFFFFFFFFF0000L,0xFFFFFFFFFFFFFFFFL,0x000003FF7FFFFFFFL,0x0000000000800000L});
    public static final BitSet FOLLOW_p_QName_in_p_DecimalFormatDecl1901 = new BitSet(new long[]{0x0000000000000000L,0x1730000000000000L,0x0000000000000407L});
    public static final BitSet FOLLOW_DEFAULT_in_p_DecimalFormatDecl1907 = new BitSet(new long[]{0x0000000000000000L,0x0008000000000000L});
    public static final BitSet FOLLOW_DECIMAL_FORMAT_in_p_DecimalFormatDecl1909 = new BitSet(new long[]{0x0000000000000000L,0x1730000000000000L,0x0000000000000407L});
    public static final BitSet FOLLOW_p_DFPropertyName_in_p_DecimalFormatDecl1914 = new BitSet(new long[]{0x0000800000000000L});
    public static final BitSet FOLLOW_EQ_in_p_DecimalFormatDecl1917 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000180000L});
    public static final BitSet FOLLOW_p_StringLiteral_in_p_DecimalFormatDecl1919 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000100L});
    public static final BitSet FOLLOW_SEMICOLON_in_p_DecimalFormatDecl1921 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_DECIMAL_SEPARATOR_in_p_DFPropertyName1951 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_GROUPING_SEPARATOR_in_p_DFPropertyName1957 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_INFINITY_in_p_DFPropertyName1963 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_MINUS_SIGN_in_p_DFPropertyName1969 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_NAN_in_p_DFPropertyName1975 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_PERCENT_in_p_DFPropertyName1981 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_PER_MILLE_in_p_DFPropertyName1987 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ZERO_DIGIT_in_p_DFPropertyName1993 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_DIGIT_in_p_DFPropertyName1999 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_PATTERN_SEPARATOR_in_p_DFPropertyName2005 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_PRESERVE_in_p_PreserveMode2038 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_NO_PRESERVE_in_p_PreserveMode2044 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_INHERIT_in_p_InheritMode2078 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_NO_INHERIT_in_p_InheritMode2084 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_DECLARE_in_pm_DefaultCollationDecl2125 = new BitSet(new long[]{0x0000000800000000L});
    public static final BitSet FOLLOW_DEFAULT_in_pm_DefaultCollationDecl2129 = new BitSet(new long[]{0x0000000040000000L});
    public static final BitSet FOLLOW_COLLATION_in_pm_DefaultCollationDecl2133 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000180000L});
    public static final BitSet FOLLOW_p_StringLiteral_in_pm_DefaultCollationDecl2135 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000100L});
    public static final BitSet FOLLOW_SEMICOLON_in_pm_DefaultCollationDecl2137 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_DECLARE_in_pm_BaseURIDecl2177 = new BitSet(new long[]{0x0000000000800000L});
    public static final BitSet FOLLOW_BASE_URI_in_pm_BaseURIDecl2181 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000180000L});
    public static final BitSet FOLLOW_p_StringLiteral_in_pm_BaseURIDecl2185 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000100L});
    public static final BitSet FOLLOW_SEMICOLON_in_pm_BaseURIDecl2187 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_IMPORT_in_pm_SchemaImport2242 = new BitSet(new long[]{0x0000000000000000L,0x0000000010000000L});
    public static final BitSet FOLLOW_SCHEMA_in_pm_SchemaImport2246 = new BitSet(new long[]{0x0000000800000000L,0x0000000000000400L,0x0000000000000000L,0x0000000000180000L});
    public static final BitSet FOLLOW_p_SchemaPrefix_in_pm_SchemaImport2250 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000180000L});
    public static final BitSet FOLLOW_p_StringLiteral_in_pm_SchemaImport2255 = new BitSet(new long[]{0x0000000000200000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000100L});
    public static final BitSet FOLLOW_AT_in_pm_SchemaImport2258 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000180000L});
    public static final BitSet FOLLOW_p_StringLiteral_in_pm_SchemaImport2262 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0020000000000000L,0x0000000000000100L});
    public static final BitSet FOLLOW_COMMA_in_pm_SchemaImport2265 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000180000L});
    public static final BitSet FOLLOW_p_StringLiteral_in_pm_SchemaImport2269 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0020000000000000L,0x0000000000000100L});
    public static final BitSet FOLLOW_SEMICOLON_in_pm_SchemaImport2275 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_NAMESPACE_in_p_SchemaPrefix2347 = new BitSet(new long[]{0xFFFFFFFFFFFF0000L,0xFFFFFFFFFFFFFFFFL,0x000003FF7FFFFFFFL,0x0000000000800000L});
    public static final BitSet FOLLOW_p_NCName_in_p_SchemaPrefix2351 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0002000000000000L});
    public static final BitSet FOLLOW_EQUAL_in_p_SchemaPrefix2353 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_DEFAULT_in_p_SchemaPrefix2394 = new BitSet(new long[]{0x0000040000000000L});
    public static final BitSet FOLLOW_ELEMENT_in_p_SchemaPrefix2398 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000400L});
    public static final BitSet FOLLOW_NAMESPACE_in_p_SchemaPrefix2402 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_IMPORT_in_pm_ModuleImport2452 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000200L});
    public static final BitSet FOLLOW_MODULE_in_pm_ModuleImport2456 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000400L,0x0000000000000000L,0x0000000000180000L});
    public static final BitSet FOLLOW_NAMESPACE_in_pm_ModuleImport2461 = new BitSet(new long[]{0xFFFFFFFFFFFF0000L,0xFFFFFFFFFFFFFFFFL,0x000003FF7FFFFFFFL,0x0000000000800000L});
    public static final BitSet FOLLOW_p_NCName_in_pm_ModuleImport2465 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0002000000000000L});
    public static final BitSet FOLLOW_EQUAL_in_pm_ModuleImport2467 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000180000L});
    public static final BitSet FOLLOW_p_StringLiteral_in_pm_ModuleImport2473 = new BitSet(new long[]{0x0000000000200000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000100L});
    public static final BitSet FOLLOW_AT_in_pm_ModuleImport2478 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000180000L});
    public static final BitSet FOLLOW_p_StringLiteral_in_pm_ModuleImport2482 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0020000000000000L,0x0000000000000100L});
    public static final BitSet FOLLOW_COMMA_in_pm_ModuleImport2485 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000180000L});
    public static final BitSet FOLLOW_p_StringLiteral_in_pm_ModuleImport2489 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0020000000000000L,0x0000000000000100L});
    public static final BitSet FOLLOW_SEMICOLON_in_pm_ModuleImport2495 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_DECLARE_in_pm_VarDecl2566 = new BitSet(new long[]{0x0000000000000000L,0x0000100000000000L,0x0000000020000000L});
    public static final BitSet FOLLOW_pg_VarDeclType_in_pm_VarDecl2570 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000100000000000L});
    public static final BitSet FOLLOW_DOLLAR_in_pm_VarDecl2572 = new BitSet(new long[]{0xFFFFFFFFFFFF0000L,0xFFFFFFFFFFFFFFFFL,0x000003FF7FFFFFFFL,0x0000000000800000L});
    public static final BitSet FOLLOW_p_QName_in_pm_VarDecl2576 = new BitSet(new long[]{0x0004000000080000L,0x0000000000000000L,0x0004000000000000L});
    public static final BitSet FOLLOW_p_TypeDeclaration_in_pm_VarDecl2580 = new BitSet(new long[]{0x0004000000000000L,0x0000000000000000L,0x0004000000000000L});
    public static final BitSet FOLLOW_BIND_in_pm_VarDecl2585 = new BitSet(new long[]{0xFFFFFFFFFFFF0000L,0xFFFFFFFFFFFFFFFFL,0x078017FF7FFFFFFFL,0x0000000FC099000FL});
    public static final BitSet FOLLOW_p_ExprSingle_in_pm_VarDecl2589 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000100L});
    public static final BitSet FOLLOW_EXTERNAL_in_pm_VarDecl2597 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0004000000000000L,0x0000000000000100L});
    public static final BitSet FOLLOW_BIND_in_pm_VarDecl2600 = new BitSet(new long[]{0xFFFFFFFFFFFF0000L,0xFFFFFFFFFFFFFFFFL,0x078017FF7FFFFFFFL,0x0000000FC099000FL});
    public static final BitSet FOLLOW_p_ExprSingle_in_pm_VarDecl2604 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000100L});
    public static final BitSet FOLLOW_SEMICOLON_in_pm_VarDecl2610 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_CONSTANT_in_pg_VarDeclType2698 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_VARIABLE_in_pg_VarDeclType2734 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_DECLARE_in_pm_ContextItemDecl2793 = new BitSet(new long[]{0x0000000000000000L,0x0002000000000000L});
    public static final BitSet FOLLOW_CONTEXT_in_pm_ContextItemDecl2797 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000004L});
    public static final BitSet FOLLOW_ITEM_in_pm_ContextItemDecl2801 = new BitSet(new long[]{0x0004000000080000L,0x0000000000000000L,0x0004000000000000L});
    public static final BitSet FOLLOW_AS_in_pm_ContextItemDecl2806 = new BitSet(new long[]{0xFFFFFFFFFFFF0000L,0xFFFFFFFFFFFFFFFFL,0x000003FF7FFFFFFFL,0x0000000000800000L});
    public static final BitSet FOLLOW_p_ItemType_in_pm_ContextItemDecl2808 = new BitSet(new long[]{0x0004000000000000L,0x0000000000000000L,0x0004000000000000L});
    public static final BitSet FOLLOW_BIND_in_pm_ContextItemDecl2814 = new BitSet(new long[]{0xFFFFFFFFFFFF0000L,0xFFFFFFFFFFFFFFFFL,0x078017FF7FFFFFFFL,0x0000000FC099000FL});
    public static final BitSet FOLLOW_p_ExprSingle_in_pm_ContextItemDecl2816 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000100L});
    public static final BitSet FOLLOW_EXTERNAL_in_pm_ContextItemDecl2824 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0004000000000000L,0x0000000000000100L});
    public static final BitSet FOLLOW_BIND_in_pm_ContextItemDecl2827 = new BitSet(new long[]{0xFFFFFFFFFFFF0000L,0xFFFFFFFFFFFFFFFFL,0x078017FF7FFFFFFFL,0x0000000FC099000FL});
    public static final BitSet FOLLOW_p_ExprSingle_in_pm_ContextItemDecl2829 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000100L});
    public static final BitSet FOLLOW_SEMICOLON_in_pm_ContextItemDecl2835 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_DECLARE_in_pm_ConstructionDecl2870 = new BitSet(new long[]{0x0000000100000000L});
    public static final BitSet FOLLOW_CONSTRUCTION_in_pm_ConstructionDecl2874 = new BitSet(new long[]{0x0000000000000000L,0x0000000801000000L});
    public static final BitSet FOLLOW_STRIP_in_pm_ConstructionDecl2879 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000100L});
    public static final BitSet FOLLOW_PRESERVE_in_pm_ConstructionDecl2885 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000100L});
    public static final BitSet FOLLOW_SEMICOLON_in_pm_ConstructionDecl2888 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_DECLARE_in_pm_FunctionDecl2925 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000100000000L});
    public static final BitSet FOLLOW_SEQUENTIAL_in_pm_FunctionDecl2929 = new BitSet(new long[]{0x0040000000000000L});
    public static final BitSet FOLLOW_FUNCTION_in_pm_FunctionDecl2933 = new BitSet(new long[]{0xFFFFFFFFFFFF0000L,0xFFFFFFFFFFFFFFFFL,0x000003FF7FFFFFFFL,0x0000000000800000L});
    public static final BitSet FOLLOW_p_QName_in_pm_FunctionDecl2937 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000040000000000L});
    public static final BitSet FOLLOW_LPAREN_in_pm_FunctionDecl2939 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000180000000000L});
    public static final BitSet FOLLOW_p_ParamList_in_pm_FunctionDecl2943 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000080000000000L});
    public static final BitSet FOLLOW_RPAREN_in_pm_FunctionDecl2946 = new BitSet(new long[]{0x0004000000080000L,0x0000000000000000L,0x0000200000000000L});
    public static final BitSet FOLLOW_p_TypeDeclaration_in_pm_FunctionDecl2950 = new BitSet(new long[]{0x0004000000000000L,0x0000000000000000L,0x0000200000000000L});
    public static final BitSet FOLLOW_p_Block_in_pm_FunctionDecl2956 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000100L});
    public static final BitSet FOLLOW_EXTERNAL_in_pm_FunctionDecl2962 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000100L});
    public static final BitSet FOLLOW_SEMICOLON_in_pm_FunctionDecl2965 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_DECLARE_in_pm_FunctionDecl3028 = new BitSet(new long[]{0x0040000000000000L,0x0000000000000000L,0x0000000402000000L});
    public static final BitSet FOLLOW_p_FunctionType_in_pm_FunctionDecl3030 = new BitSet(new long[]{0x0040000000000000L});
    public static final BitSet FOLLOW_FUNCTION_in_pm_FunctionDecl3034 = new BitSet(new long[]{0xFFFFFFFFFFFF0000L,0xFFFFFFFFFFFFFFFFL,0x000003FF7FFFFFFFL,0x0000000000800000L});
    public static final BitSet FOLLOW_p_QName_in_pm_FunctionDecl3038 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000040000000000L});
    public static final BitSet FOLLOW_LPAREN_in_pm_FunctionDecl3040 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000180000000000L});
    public static final BitSet FOLLOW_p_ParamList_in_pm_FunctionDecl3044 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000080000000000L});
    public static final BitSet FOLLOW_RPAREN_in_pm_FunctionDecl3047 = new BitSet(new long[]{0x0004000000080000L,0x0000000000000000L,0x0000200000000000L});
    public static final BitSet FOLLOW_p_TypeDeclaration_in_pm_FunctionDecl3051 = new BitSet(new long[]{0x0004000000000000L,0x0000000000000000L,0x0000200000000000L});
    public static final BitSet FOLLOW_p_EnclosedExpr_in_pm_FunctionDecl3057 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000100L});
    public static final BitSet FOLLOW_EXTERNAL_in_pm_FunctionDecl3063 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000100L});
    public static final BitSet FOLLOW_SEMICOLON_in_pm_FunctionDecl3066 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_UPDATING_in_p_FunctionType3147 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_SIMPLE_in_p_FunctionType3166 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_p_Param_in_p_ParamList3212 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0020000000000000L});
    public static final BitSet FOLLOW_COMMA_in_p_ParamList3215 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000100000000000L});
    public static final BitSet FOLLOW_p_Param_in_p_ParamList3219 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0020000000000000L});
    public static final BitSet FOLLOW_DOLLAR_in_p_Param3277 = new BitSet(new long[]{0xFFFFFFFFFFFF0000L,0xFFFFFFFFFFFFFFFFL,0x000003FF7FFFFFFFL,0x0000000000800000L});
    public static final BitSet FOLLOW_p_QName_in_p_Param3281 = new BitSet(new long[]{0x0000000000080002L});
    public static final BitSet FOLLOW_p_TypeDeclaration_in_p_Param3285 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_LBRACKET_in_p_EnclosedExpr3341 = new BitSet(new long[]{0xFFFFFFFFFFFF0000L,0xFFFFFFFFFFFFFFFFL,0x078017FF7FFFFFFFL,0x0000000FC099000FL});
    public static final BitSet FOLLOW_pm_Expr_in_p_EnclosedExpr3343 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000400000000000L});
    public static final BitSet FOLLOW_RBRACKET_in_p_EnclosedExpr3345 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_pm_Expr_in_p_QueryBody3395 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_p_ConcatExpr_in_pm_Expr3446 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000100L});
    public static final BitSet FOLLOW_SEMICOLON_in_pm_Expr3453 = new BitSet(new long[]{0xFFFFFFFFFFFF0002L,0xFFFFFFFFFFFFFFFFL,0x078017FF7FFFFFFFL,0x0000000FC099010FL});
    public static final BitSet FOLLOW_pm_ApplyExpr_in_pm_Expr3455 = new BitSet(new long[]{0xFFFFFFFFFFFF0002L,0xFFFFFFFFFFFFFFFFL,0x078017FF7FFFFFFFL,0x0000000FC099010FL});
    public static final BitSet FOLLOW_SEMICOLON_in_pm_Expr3470 = new BitSet(new long[]{0xFFFFFFFFFFFF0000L,0xFFFFFFFFFFFFFFFFL,0x078017FF7FFFFFFFL,0x0000000FC099000FL});
    public static final BitSet FOLLOW_p_ConcatExpr_in_pm_Expr3472 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000100L});
    public static final BitSet FOLLOW_p_FLWORExpr_in_p_ExprSingle3506 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_p_QuantifiedExpr_in_p_ExprSingle3518 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_p_TypeswitchExpr_in_p_ExprSingle3530 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_p_IfExpr_in_p_ExprSingle3542 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_p_TryCatchExpr_in_p_ExprSingle3554 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_p_EvalExpr_in_p_ExprSingle3569 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_p_InsertExpr_in_p_ExprSingle3584 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_p_DeleteExpr_in_p_ExprSingle3599 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_p_RenameExpr_in_p_ExprSingle3614 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_p_ReplaceExpr_in_p_ExprSingle3629 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_p_TransformExpr_in_p_ExprSingle3644 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_p_BlockExpr_in_p_ExprSingle3659 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_p_AssignmentExpr_in_p_ExprSingle3674 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_p_ExitExpr_in_p_ExprSingle3689 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_p_WhileExpr_in_p_ExprSingle3704 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_p_OrExpr_in_p_ExprSingle3716 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_p_InitialClause_in_p_FLWORExpr3742 = new BitSet(new long[]{0x0020000000000000L,0x0084400204040040L});
    public static final BitSet FOLLOW_p_IntermediateClause_in_p_FLWORExpr3744 = new BitSet(new long[]{0x0020000000000000L,0x0084400204040040L});
    public static final BitSet FOLLOW_p_ReturnClause_in_p_FLWORExpr3747 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_p_ForClause_in_p_InitialClause3773 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_p_LetClause_in_p_InitialClause3777 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_p_WindowClause_in_p_InitialClause3781 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_p_InitialClause_in_p_IntermediateClause3807 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_p_WhereClause_in_p_IntermediateClause3811 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_p_GroupByClause_in_p_IntermediateClause3815 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_p_OrderByClause_in_p_IntermediateClause3819 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_p_CountClause_in_p_IntermediateClause3823 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_FOR_in_p_ForClause3851 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000100000000000L});
    public static final BitSet FOLLOW_DOLLAR_in_p_ForClause3853 = new BitSet(new long[]{0xFFFFFFFFFFFF0000L,0xFFFFFFFFFFFFFFFFL,0x000003FF7FFFFFFFL,0x0000000000800000L});
    public static final BitSet FOLLOW_p_VarName_in_p_ForClause3855 = new BitSet(new long[]{0x2000000000280000L});
    public static final BitSet FOLLOW_p_TypeDeclaration_in_p_ForClause3857 = new BitSet(new long[]{0x2000000000200000L});
    public static final BitSet FOLLOW_p_PositionalVar_in_p_ForClause3860 = new BitSet(new long[]{0x2000000000000000L});
    public static final BitSet FOLLOW_IN_in_p_ForClause3865 = new BitSet(new long[]{0xFFFFFFFFFFFF0000L,0xFFFFFFFFFFFFFFFFL,0x078017FF7FFFFFFFL,0x0000000FC099000FL});
    public static final BitSet FOLLOW_p_ExprSingle_in_p_ForClause3867 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0020000000000000L});
    public static final BitSet FOLLOW_COMMA_in_p_ForClause3870 = new BitSet(new long[]{0xFFFFFFFFFFFF0000L,0xFFFFFFFFFFFFFFFFL,0x000003FF7FFFFFFFL,0x0000000000800000L});
    public static final BitSet FOLLOW_p_QName_in_p_ForClause3872 = new BitSet(new long[]{0x2000000000280000L});
    public static final BitSet FOLLOW_p_TypeDeclaration_in_p_ForClause3874 = new BitSet(new long[]{0x2000000000200000L});
    public static final BitSet FOLLOW_p_PositionalVar_in_p_ForClause3877 = new BitSet(new long[]{0x2000000000000000L});
    public static final BitSet FOLLOW_IN_in_p_ForClause3882 = new BitSet(new long[]{0xFFFFFFFFFFFF0000L,0xFFFFFFFFFFFFFFFFL,0x078017FF7FFFFFFFL,0x0000000FC099000FL});
    public static final BitSet FOLLOW_p_ExprSingle_in_p_ForClause3884 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0020000000000000L});
    public static final BitSet FOLLOW_AT_in_p_PositionalVar3916 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000100000000000L});
    public static final BitSet FOLLOW_DOLLAR_in_p_PositionalVar3920 = new BitSet(new long[]{0xFFFFFFFFFFFF0000L,0xFFFFFFFFFFFFFFFFL,0x000003FF7FFFFFFFL,0x0000000000800000L});
    public static final BitSet FOLLOW_p_VarName_in_p_PositionalVar3922 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_LET_in_p_LetClause3950 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000100000000000L});
    public static final BitSet FOLLOW_DOLLAR_in_p_LetClause3954 = new BitSet(new long[]{0xFFFFFFFFFFFF0000L,0xFFFFFFFFFFFFFFFFL,0x000003FF7FFFFFFFL,0x0000000000800000L});
    public static final BitSet FOLLOW_p_VarName_in_p_LetClause3956 = new BitSet(new long[]{0x0000000000080000L,0x0000000000000000L,0x0004000000000000L});
    public static final BitSet FOLLOW_p_TypeDeclaration_in_p_LetClause3958 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0004000000000000L});
    public static final BitSet FOLLOW_BIND_in_p_LetClause3961 = new BitSet(new long[]{0xFFFFFFFFFFFF0000L,0xFFFFFFFFFFFFFFFFL,0x078017FF7FFFFFFFL,0x0000000FC099000FL});
    public static final BitSet FOLLOW_p_ExprSingle_in_p_LetClause3963 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0020000000000000L});
    public static final BitSet FOLLOW_COMMA_in_p_LetClause3966 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000100000000000L});
    public static final BitSet FOLLOW_DOLLAR_in_p_LetClause3968 = new BitSet(new long[]{0xFFFFFFFFFFFF0000L,0xFFFFFFFFFFFFFFFFL,0x000003FF7FFFFFFFL,0x0000000000800000L});
    public static final BitSet FOLLOW_p_VarName_in_p_LetClause3970 = new BitSet(new long[]{0x0000000000080000L,0x0000000000000000L,0x0004000000000000L});
    public static final BitSet FOLLOW_p_TypeDeclaration_in_p_LetClause3972 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0004000000000000L});
    public static final BitSet FOLLOW_BIND_in_p_LetClause3975 = new BitSet(new long[]{0xFFFFFFFFFFFF0000L,0xFFFFFFFFFFFFFFFFL,0x078017FF7FFFFFFFL,0x0000000FC099000FL});
    public static final BitSet FOLLOW_p_ExprSingle_in_p_LetClause3977 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0020000000000000L});
    public static final BitSet FOLLOW_FOR_in_p_WindowClause4007 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000090L});
    public static final BitSet FOLLOW_p_TumblingWindowClause_in_p_WindowClause4012 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_p_SlidingWindowClause_in_p_WindowClause4016 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_TUMBLING_in_p_TumblingWindowClause4053 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000200L});
    public static final BitSet FOLLOW_WINDOW_in_p_TumblingWindowClause4057 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000100000000000L});
    public static final BitSet FOLLOW_DOLLAR_in_p_TumblingWindowClause4059 = new BitSet(new long[]{0xFFFFFFFFFFFF0000L,0xFFFFFFFFFFFFFFFFL,0x000003FF7FFFFFFFL,0x0000000000800000L});
    public static final BitSet FOLLOW_p_VarName_in_p_TumblingWindowClause4061 = new BitSet(new long[]{0x2000000000080000L});
    public static final BitSet FOLLOW_p_TypeDeclaration_in_p_TumblingWindowClause4063 = new BitSet(new long[]{0x2000000000000000L});
    public static final BitSet FOLLOW_IN_in_p_TumblingWindowClause4066 = new BitSet(new long[]{0xFFFFFFFFFFFF0000L,0xFFFFFFFFFFFFFFFFL,0x078017FF7FFFFFFFL,0x0000000FC099000FL});
    public static final BitSet FOLLOW_p_ExprSingle_in_p_TumblingWindowClause4068 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000020L});
    public static final BitSet FOLLOW_p_WindowStartCondition_in_p_TumblingWindowClause4070 = new BitSet(new long[]{0x0000000000000002L,0x4040000000000000L});
    public static final BitSet FOLLOW_p_WindowEndCondition_in_p_TumblingWindowClause4072 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_SLIDING_in_p_SlidingWindowClause4103 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000200L});
    public static final BitSet FOLLOW_WINDOW_in_p_SlidingWindowClause4107 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000100000000000L});
    public static final BitSet FOLLOW_DOLLAR_in_p_SlidingWindowClause4109 = new BitSet(new long[]{0xFFFFFFFFFFFF0000L,0xFFFFFFFFFFFFFFFFL,0x000003FF7FFFFFFFL,0x0000000000800000L});
    public static final BitSet FOLLOW_p_VarName_in_p_SlidingWindowClause4111 = new BitSet(new long[]{0x2000000000080000L});
    public static final BitSet FOLLOW_p_TypeDeclaration_in_p_SlidingWindowClause4113 = new BitSet(new long[]{0x2000000000000000L});
    public static final BitSet FOLLOW_IN_in_p_SlidingWindowClause4116 = new BitSet(new long[]{0xFFFFFFFFFFFF0000L,0xFFFFFFFFFFFFFFFFL,0x078017FF7FFFFFFFL,0x0000000FC099000FL});
    public static final BitSet FOLLOW_p_ExprSingle_in_p_SlidingWindowClause4118 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000020L});
    public static final BitSet FOLLOW_p_WindowStartCondition_in_p_SlidingWindowClause4120 = new BitSet(new long[]{0x0000000000000002L,0x4040000000000000L});
    public static final BitSet FOLLOW_p_WindowEndCondition_in_p_SlidingWindowClause4122 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_START_in_p_WindowStartCondition4153 = new BitSet(new long[]{0x0000000000200000L,0x2000000000000000L,0x0000100000000108L});
    public static final BitSet FOLLOW_p_WindowVars_in_p_WindowStartCondition4155 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000100L});
    public static final BitSet FOLLOW_WHEN_in_p_WindowStartCondition4159 = new BitSet(new long[]{0xFFFFFFFFFFFF0000L,0xFFFFFFFFFFFFFFFFL,0x078017FF7FFFFFFFL,0x0000000FC099000FL});
    public static final BitSet FOLLOW_p_ExprSingle_in_p_WindowStartCondition4161 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ONLY_in_p_WindowEndCondition4191 = new BitSet(new long[]{0x0000000000000000L,0x0040000000000000L});
    public static final BitSet FOLLOW_END_in_p_WindowEndCondition4196 = new BitSet(new long[]{0x0000000000200000L,0x2000000000000000L,0x0000100000000108L});
    public static final BitSet FOLLOW_p_WindowVars_in_p_WindowEndCondition4198 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000100L});
    public static final BitSet FOLLOW_WHEN_in_p_WindowEndCondition4202 = new BitSet(new long[]{0xFFFFFFFFFFFF0000L,0xFFFFFFFFFFFFFFFFL,0x078017FF7FFFFFFFL,0x0000000FC099000FL});
    public static final BitSet FOLLOW_p_ExprSingle_in_p_WindowEndCondition4204 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_DOLLAR_in_p_WindowVars4233 = new BitSet(new long[]{0xFFFFFFFFFFFF0000L,0xFFFFFFFFFFFFFFFFL,0x000003FF7FFFFFFFL,0x0000000000800000L});
    public static final BitSet FOLLOW_p_QName_in_p_WindowVars4235 = new BitSet(new long[]{0x0000000000200002L,0x2000000000000000L,0x0000000000000008L});
    public static final BitSet FOLLOW_p_PositionalVar_in_p_WindowVars4239 = new BitSet(new long[]{0x0000000000000002L,0x2000000000000000L,0x0000000000000008L});
    public static final BitSet FOLLOW_PREVIOUS_in_p_WindowVars4245 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000100000000000L});
    public static final BitSet FOLLOW_DOLLAR_in_p_WindowVars4247 = new BitSet(new long[]{0xFFFFFFFFFFFF0000L,0xFFFFFFFFFFFFFFFFL,0x000003FF7FFFFFFFL,0x0000000000800000L});
    public static final BitSet FOLLOW_p_QName_in_p_WindowVars4249 = new BitSet(new long[]{0x0000000000000002L,0x2000000000000000L});
    public static final BitSet FOLLOW_NEXT_in_p_WindowVars4256 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000100000000000L});
    public static final BitSet FOLLOW_DOLLAR_in_p_WindowVars4258 = new BitSet(new long[]{0xFFFFFFFFFFFF0000L,0xFFFFFFFFFFFFFFFFL,0x000003FF7FFFFFFFL,0x0000000000800000L});
    public static final BitSet FOLLOW_p_QName_in_p_WindowVars4260 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_COUNT_in_p_CountClause4301 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000100000000000L});
    public static final BitSet FOLLOW_DOLLAR_in_p_CountClause4305 = new BitSet(new long[]{0xFFFFFFFFFFFF0000L,0xFFFFFFFFFFFFFFFFL,0x000003FF7FFFFFFFL,0x0000000000800000L});
    public static final BitSet FOLLOW_p_VarName_in_p_CountClause4307 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_WHERE_in_p_WhereClause4343 = new BitSet(new long[]{0xFFFFFFFFFFFF0000L,0xFFFFFFFFFFFFFFFFL,0x078017FF7FFFFFFFL,0x0000000FC099000FL});
    public static final BitSet FOLLOW_p_ExprSingle_in_p_WhereClause4347 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_GROUP_in_p_GroupByClause4377 = new BitSet(new long[]{0x0000000002000000L});
    public static final BitSet FOLLOW_BY_in_p_GroupByClause4381 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000100000000000L});
    public static final BitSet FOLLOW_p_GroupingSpecList_in_p_GroupByClause4383 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_p_GroupingSpec_in_p_GroupingSpecList4413 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0020000000000000L});
    public static final BitSet FOLLOW_COMMA_in_p_GroupingSpecList4416 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000100000000000L});
    public static final BitSet FOLLOW_p_GroupingSpec_in_p_GroupingSpecList4418 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0020000000000000L});
    public static final BitSet FOLLOW_DOLLAR_in_p_GroupingSpec4448 = new BitSet(new long[]{0xFFFFFFFFFFFF0000L,0xFFFFFFFFFFFFFFFFL,0x000003FF7FFFFFFFL,0x0000000000800000L});
    public static final BitSet FOLLOW_p_VarName_in_p_GroupingSpec4450 = new BitSet(new long[]{0x0000000040000002L});
    public static final BitSet FOLLOW_COLLATION_in_p_GroupingSpec4455 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000180000L});
    public static final BitSet FOLLOW_p_StringLiteral_in_p_GroupingSpec4457 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ORDER_in_p_OrderByClause4493 = new BitSet(new long[]{0x0000000002000000L});
    public static final BitSet FOLLOW_BY_in_p_OrderByClause4497 = new BitSet(new long[]{0xFFFFFFFFFFFF0000L,0xFFFFFFFFFFFFFFFFL,0x078017FF7FFFFFFFL,0x0000000FC099000FL});
    public static final BitSet FOLLOW_STABLE_in_p_OrderByClause4505 = new BitSet(new long[]{0x0000000000000000L,0x0000000000040000L});
    public static final BitSet FOLLOW_ORDER_in_p_OrderByClause4509 = new BitSet(new long[]{0x0000000002000000L});
    public static final BitSet FOLLOW_BY_in_p_OrderByClause4513 = new BitSet(new long[]{0xFFFFFFFFFFFF0000L,0xFFFFFFFFFFFFFFFFL,0x078017FF7FFFFFFFL,0x0000000FC099000FL});
    public static final BitSet FOLLOW_p_OrderSpecList_in_p_OrderByClause4517 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_p_OrderSpec_in_p_OrderSpecList4547 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0020000000000000L});
    public static final BitSet FOLLOW_COMMA_in_p_OrderSpecList4550 = new BitSet(new long[]{0xFFFFFFFFFFFF0000L,0xFFFFFFFFFFFFFFFFL,0x078017FF7FFFFFFFL,0x0000000FC099000FL});
    public static final BitSet FOLLOW_p_OrderSpec_in_p_OrderSpecList4552 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0020000000000000L});
    public static final BitSet FOLLOW_p_ExprSingle_in_p_OrderSpec4582 = new BitSet(new long[]{0x0000104040100000L});
    public static final BitSet FOLLOW_p_OrderModifier_in_p_OrderSpec4584 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ASCENDING_in_p_OrderModifier4613 = new BitSet(new long[]{0x0000100040000002L});
    public static final BitSet FOLLOW_DESCENDING_in_p_OrderModifier4619 = new BitSet(new long[]{0x0000100040000002L});
    public static final BitSet FOLLOW_EMPTY_in_p_OrderModifier4626 = new BitSet(new long[]{0x0100000000000000L,0x0000000000000020L});
    public static final BitSet FOLLOW_GREATEST_in_p_OrderModifier4631 = new BitSet(new long[]{0x0000000040000002L});
    public static final BitSet FOLLOW_LEAST_in_p_OrderModifier4637 = new BitSet(new long[]{0x0000000040000002L});
    public static final BitSet FOLLOW_COLLATION_in_p_OrderModifier4645 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000180000L});
    public static final BitSet FOLLOW_p_StringLiteral_in_p_OrderModifier4647 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_RETURN_in_p_ReturnClause4679 = new BitSet(new long[]{0xFFFFFFFFFFFF0000L,0xFFFFFFFFFFFFFFFFL,0x078017FF7FFFFFFFL,0x0000000FC099000FL});
    public static final BitSet FOLLOW_p_ExprSingle_in_p_ReturnClause4683 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_SOME_in_p_QuantifiedExpr4714 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000100000000000L});
    public static final BitSet FOLLOW_EVERY_in_p_QuantifiedExpr4720 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000100000000000L});
    public static final BitSet FOLLOW_DOLLAR_in_p_QuantifiedExpr4723 = new BitSet(new long[]{0xFFFFFFFFFFFF0000L,0xFFFFFFFFFFFFFFFFL,0x000003FF7FFFFFFFL,0x0000000000800000L});
    public static final BitSet FOLLOW_p_VarName_in_p_QuantifiedExpr4725 = new BitSet(new long[]{0x2000000000080000L});
    public static final BitSet FOLLOW_p_TypeDeclaration_in_p_QuantifiedExpr4727 = new BitSet(new long[]{0x2000000000000000L});
    public static final BitSet FOLLOW_IN_in_p_QuantifiedExpr4732 = new BitSet(new long[]{0xFFFFFFFFFFFF0000L,0xFFFFFFFFFFFFFFFFL,0x078017FF7FFFFFFFL,0x0000000FC099000FL});
    public static final BitSet FOLLOW_p_ExprSingle_in_p_QuantifiedExpr4734 = new BitSet(new long[]{0x0000000000000000L,0x0000000008000000L,0x0020000000000000L});
    public static final BitSet FOLLOW_COMMA_in_p_QuantifiedExpr4737 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000100000000000L});
    public static final BitSet FOLLOW_DOLLAR_in_p_QuantifiedExpr4739 = new BitSet(new long[]{0xFFFFFFFFFFFF0000L,0xFFFFFFFFFFFFFFFFL,0x000003FF7FFFFFFFL,0x0000000000800000L});
    public static final BitSet FOLLOW_p_QName_in_p_QuantifiedExpr4741 = new BitSet(new long[]{0x2000000000080000L});
    public static final BitSet FOLLOW_p_TypeDeclaration_in_p_QuantifiedExpr4743 = new BitSet(new long[]{0x2000000000000000L});
    public static final BitSet FOLLOW_IN_in_p_QuantifiedExpr4748 = new BitSet(new long[]{0xFFFFFFFFFFFF0000L,0xFFFFFFFFFFFFFFFFL,0x078017FF7FFFFFFFL,0x0000000FC099000FL});
    public static final BitSet FOLLOW_p_ExprSingle_in_p_QuantifiedExpr4750 = new BitSet(new long[]{0x0000000000000000L,0x0000000008000000L,0x0020000000000000L});
    public static final BitSet FOLLOW_SATISFIES_in_p_QuantifiedExpr4756 = new BitSet(new long[]{0xFFFFFFFFFFFF0000L,0xFFFFFFFFFFFFFFFFL,0x078017FF7FFFFFFFL,0x0000000FC099000FL});
    public static final BitSet FOLLOW_p_ExprSingle_in_p_QuantifiedExpr4758 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_TYPESWITCH_in_p_TypeswitchExpr4788 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000040000000000L});
    public static final BitSet FOLLOW_LPAREN_in_p_TypeswitchExpr4790 = new BitSet(new long[]{0xFFFFFFFFFFFF0000L,0xFFFFFFFFFFFFFFFFL,0x078017FF7FFFFFFFL,0x0000000FC099000FL});
    public static final BitSet FOLLOW_pm_Expr_in_p_TypeswitchExpr4792 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000080000000000L});
    public static final BitSet FOLLOW_RPAREN_in_p_TypeswitchExpr4794 = new BitSet(new long[]{0x0000000004000000L});
    public static final BitSet FOLLOW_p_CaseClause_in_p_TypeswitchExpr4796 = new BitSet(new long[]{0x0000000804000000L});
    public static final BitSet FOLLOW_DEFAULT_in_p_TypeswitchExpr4801 = new BitSet(new long[]{0x0000000000000000L,0x0000000004000000L,0x0000100000000000L});
    public static final BitSet FOLLOW_DOLLAR_in_p_TypeswitchExpr4804 = new BitSet(new long[]{0xFFFFFFFFFFFF0000L,0xFFFFFFFFFFFFFFFFL,0x000003FF7FFFFFFFL,0x0000000000800000L});
    public static final BitSet FOLLOW_p_VarName_in_p_TypeswitchExpr4806 = new BitSet(new long[]{0x0000000000000000L,0x0000000004000000L});
    public static final BitSet FOLLOW_RETURN_in_p_TypeswitchExpr4812 = new BitSet(new long[]{0xFFFFFFFFFFFF0000L,0xFFFFFFFFFFFFFFFFL,0x078017FF7FFFFFFFL,0x0000000FC099000FL});
    public static final BitSet FOLLOW_p_ExprSingle_in_p_TypeswitchExpr4814 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_CASE_in_p_CaseClause4844 = new BitSet(new long[]{0xFFFFFFFFFFFF0000L,0xFFFFFFFFFFFFFFFFL,0x000013FF7FFFFFFFL,0x0000000000800000L});
    public static final BitSet FOLLOW_DOLLAR_in_p_CaseClause4847 = new BitSet(new long[]{0xFFFFFFFFFFFF0000L,0xFFFFFFFFFFFFFFFFL,0x000003FF7FFFFFFFL,0x0000000000800000L});
    public static final BitSet FOLLOW_p_VarName_in_p_CaseClause4849 = new BitSet(new long[]{0x0000000000080000L});
    public static final BitSet FOLLOW_AS_in_p_CaseClause4853 = new BitSet(new long[]{0xFFFFFFFFFFFF0000L,0xFFFFFFFFFFFFFFFFL,0x000013FF7FFFFFFFL,0x0000000000800000L});
    public static final BitSet FOLLOW_p_SequenceType_in_p_CaseClause4857 = new BitSet(new long[]{0x0000000000000000L,0x0000000004000000L});
    public static final BitSet FOLLOW_RETURN_in_p_CaseClause4861 = new BitSet(new long[]{0xFFFFFFFFFFFF0000L,0xFFFFFFFFFFFFFFFFL,0x078017FF7FFFFFFFL,0x0000000FC099000FL});
    public static final BitSet FOLLOW_p_ExprSingle_in_p_CaseClause4863 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_IF_in_p_IfExpr4893 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000040000000000L});
    public static final BitSet FOLLOW_LPAREN_in_p_IfExpr4895 = new BitSet(new long[]{0xFFFFFFFFFFFF0000L,0xFFFFFFFFFFFFFFFFL,0x078017FF7FFFFFFFL,0x0000000FC099000FL});
    public static final BitSet FOLLOW_pm_Expr_in_p_IfExpr4897 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000080000000000L});
    public static final BitSet FOLLOW_RPAREN_in_p_IfExpr4899 = new BitSet(new long[]{0x0000000000000000L,0x0000002000000000L});
    public static final BitSet FOLLOW_THEN_in_p_IfExpr4903 = new BitSet(new long[]{0xFFFFFFFFFFFF0000L,0xFFFFFFFFFFFFFFFFL,0x078017FF7FFFFFFFL,0x0000000FC099000FL});
    public static final BitSet FOLLOW_p_ExprSingle_in_p_IfExpr4905 = new BitSet(new long[]{0x0000080000000000L});
    public static final BitSet FOLLOW_ELSE_in_p_IfExpr4909 = new BitSet(new long[]{0xFFFFFFFFFFFF0000L,0xFFFFFFFFFFFFFFFFL,0x078017FF7FFFFFFFL,0x0000000FC099000FL});
    public static final BitSet FOLLOW_p_ExprSingle_in_p_IfExpr4911 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_p_AndExpr_in_p_OrExpr4939 = new BitSet(new long[]{0x0000000000000002L,0x0000000000020000L});
    public static final BitSet FOLLOW_OR_in_p_OrExpr4945 = new BitSet(new long[]{0xFFFFFFFFFFFF0000L,0xFFFFFFFFFFFFFFFFL,0x078017FF7FFFFFFFL,0x0000000FC099000FL});
    public static final BitSet FOLLOW_p_AndExpr_in_p_OrExpr4949 = new BitSet(new long[]{0x0000000000000002L,0x0000000000020000L});
    public static final BitSet FOLLOW_p_ComparisonExpr_in_p_AndExpr4980 = new BitSet(new long[]{0x0000000000040002L});
    public static final BitSet FOLLOW_AND_in_p_AndExpr4986 = new BitSet(new long[]{0xFFFFFFFFFFFF0000L,0xFFFFFFFFFFFFFFFFL,0x078017FF7FFFFFFFL,0x0000000FC099000FL});
    public static final BitSet FOLLOW_p_ComparisonExpr_in_p_AndExpr4990 = new BitSet(new long[]{0x0000000000040002L});
    public static final BitSet FOLLOW_p_RangeExpr_in_p_ComparisonExpr5021 = new BitSet(new long[]{0x0280800000000002L,0x0000000000000892L,0xFC0A000000000000L});
    public static final BitSet FOLLOW_p_ValueComp_in_p_ComparisonExpr5026 = new BitSet(new long[]{0xFFFFFFFFFFFF0000L,0xFFFFFFFFFFFFFFFFL,0x078017FF7FFFFFFFL,0x0000000FC099000FL});
    public static final BitSet FOLLOW_p_GeneralComp_in_p_ComparisonExpr5030 = new BitSet(new long[]{0xFFFFFFFFFFFF0000L,0xFFFFFFFFFFFFFFFFL,0x078017FF7FFFFFFFL,0x0000000FC099000FL});
    public static final BitSet FOLLOW_p_NodeComp_in_p_ComparisonExpr5034 = new BitSet(new long[]{0xFFFFFFFFFFFF0000L,0xFFFFFFFFFFFFFFFFL,0x078017FF7FFFFFFFL,0x0000000FC099000FL});
    public static final BitSet FOLLOW_p_RangeExpr_in_p_ComparisonExpr5037 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_p_AdditiveExpr_in_p_RangeExpr5068 = new BitSet(new long[]{0x0000000000000002L,0x0000004000000000L});
    public static final BitSet FOLLOW_TO_in_p_RangeExpr5074 = new BitSet(new long[]{0xFFFFFFFFFFFF0000L,0xFFFFFFFFFFFFFFFFL,0x078017FF7FFFFFFFL,0x0000000FC099000FL});
    public static final BitSet FOLLOW_p_AdditiveExpr_in_p_RangeExpr5078 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_p_MultiplicativeExpr_in_p_AdditiveExpr5109 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0300000000000000L});
    public static final BitSet FOLLOW_set_in_p_AdditiveExpr5113 = new BitSet(new long[]{0xFFFFFFFFFFFF0000L,0xFFFFFFFFFFFFFFFFL,0x078017FF7FFFFFFFL,0x0000000FC099000FL});
    public static final BitSet FOLLOW_p_MultiplicativeExpr_in_p_AdditiveExpr5121 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0300000000000000L});
    public static final BitSet FOLLOW_p_UnionExpr_in_p_MultiplicativeExpr5152 = new BitSet(new long[]{0x0400008000000002L,0x0000000000000100L,0x0080000000000000L});
    public static final BitSet FOLLOW_STAR_in_p_MultiplicativeExpr5157 = new BitSet(new long[]{0xFFFFFFFFFFFF0000L,0xFFFFFFFFFFFFFFFFL,0x078017FF7FFFFFFFL,0x0000000FC099000FL});
    public static final BitSet FOLLOW_DIV_in_p_MultiplicativeExpr5163 = new BitSet(new long[]{0xFFFFFFFFFFFF0000L,0xFFFFFFFFFFFFFFFFL,0x078017FF7FFFFFFFL,0x0000000FC099000FL});
    public static final BitSet FOLLOW_IDIV_in_p_MultiplicativeExpr5171 = new BitSet(new long[]{0xFFFFFFFFFFFF0000L,0xFFFFFFFFFFFFFFFFL,0x078017FF7FFFFFFFL,0x0000000FC099000FL});
    public static final BitSet FOLLOW_MOD_in_p_MultiplicativeExpr5179 = new BitSet(new long[]{0xFFFFFFFFFFFF0000L,0xFFFFFFFFFFFFFFFFL,0x078017FF7FFFFFFFL,0x0000000FC099000FL});
    public static final BitSet FOLLOW_p_UnionExpr_in_p_MultiplicativeExpr5184 = new BitSet(new long[]{0x0400008000000002L,0x0000000000000100L,0x0080000000000000L});
    public static final BitSet FOLLOW_p_IntersectExceptExpr_in_p_UnionExpr5215 = new BitSet(new long[]{0x0000000000000002L,0x0000020000000000L,0x0000000000000000L,0x0000000000000200L});
    public static final BitSet FOLLOW_UNION_in_p_UnionExpr5222 = new BitSet(new long[]{0xFFFFFFFFFFFF0000L,0xFFFFFFFFFFFFFFFFL,0x078017FF7FFFFFFFL,0x0000000FC099000FL});
    public static final BitSet FOLLOW_VBAR_in_p_UnionExpr5228 = new BitSet(new long[]{0xFFFFFFFFFFFF0000L,0xFFFFFFFFFFFFFFFFL,0x078017FF7FFFFFFFL,0x0000000FC099000FL});
    public static final BitSet FOLLOW_p_IntersectExceptExpr_in_p_UnionExpr5231 = new BitSet(new long[]{0x0000000000000002L,0x0000020000000000L,0x0000000000000000L,0x0000000000000200L});
    public static final BitSet FOLLOW_p_InstanceofExpr_in_p_IntersectExceptExpr5262 = new BitSet(new long[]{0x0002000000000002L,0x0000000000000001L});
    public static final BitSet FOLLOW_INTERSECT_in_p_IntersectExceptExpr5269 = new BitSet(new long[]{0xFFFFFFFFFFFF0000L,0xFFFFFFFFFFFFFFFFL,0x078017FF7FFFFFFFL,0x0000000FC099000FL});
    public static final BitSet FOLLOW_EXCEPT_in_p_IntersectExceptExpr5275 = new BitSet(new long[]{0xFFFFFFFFFFFF0000L,0xFFFFFFFFFFFFFFFFL,0x078017FF7FFFFFFFL,0x0000000FC099000FL});
    public static final BitSet FOLLOW_p_InstanceofExpr_in_p_IntersectExceptExpr5280 = new BitSet(new long[]{0x0002000000000002L,0x0000000000000001L});
    public static final BitSet FOLLOW_p_TreatExpr_in_p_InstanceofExpr5311 = new BitSet(new long[]{0x8000000000000002L});
    public static final BitSet FOLLOW_INSTANCE_in_p_InstanceofExpr5317 = new BitSet(new long[]{0x0000000000000000L,0x0000000000008000L});
    public static final BitSet FOLLOW_OF_in_p_InstanceofExpr5323 = new BitSet(new long[]{0xFFFFFFFFFFFF0000L,0xFFFFFFFFFFFFFFFFL,0x000013FF7FFFFFFFL,0x0000000000800000L});
    public static final BitSet FOLLOW_p_SequenceType_in_p_InstanceofExpr5327 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_p_CastableExpr_in_p_TreatExpr5357 = new BitSet(new long[]{0x0000000000000002L,0x0000008000000000L});
    public static final BitSet FOLLOW_TREAT_in_p_TreatExpr5363 = new BitSet(new long[]{0x0000000000080000L});
    public static final BitSet FOLLOW_AS_in_p_TreatExpr5369 = new BitSet(new long[]{0xFFFFFFFFFFFF0000L,0xFFFFFFFFFFFFFFFFL,0x000013FF7FFFFFFFL,0x0000000000800000L});
    public static final BitSet FOLLOW_p_SequenceType_in_p_TreatExpr5373 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_p_CastExpr_in_p_CastableExpr5412 = new BitSet(new long[]{0x0000000010000002L});
    public static final BitSet FOLLOW_CASTABLE_in_p_CastableExpr5418 = new BitSet(new long[]{0x0000000000080000L});
    public static final BitSet FOLLOW_AS_in_p_CastableExpr5424 = new BitSet(new long[]{0xFFFFFFFFFFFF0000L,0xFFFFFFFFFFFFFFFFL,0x000003FF7FFFFFFFL,0x0000000000800000L});
    public static final BitSet FOLLOW_p_SingleType_in_p_CastableExpr5428 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_p_UnaryExpr_in_p_CastExpr5467 = new BitSet(new long[]{0x0000000008000002L});
    public static final BitSet FOLLOW_CAST_in_p_CastExpr5473 = new BitSet(new long[]{0x0000000000080000L});
    public static final BitSet FOLLOW_AS_in_p_CastExpr5479 = new BitSet(new long[]{0xFFFFFFFFFFFF0000L,0xFFFFFFFFFFFFFFFFL,0x000003FF7FFFFFFFL,0x0000000000800000L});
    public static final BitSet FOLLOW_p_SingleType_in_p_CastExpr5483 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_PLUS_in_p_UnaryExpr5515 = new BitSet(new long[]{0xFFFFFFFFFFFF0000L,0xFFFFFFFFFFFFFFFFL,0x078017FF7FFFFFFFL,0x0000000FC099000FL});
    public static final BitSet FOLLOW_MINUS_in_p_UnaryExpr5519 = new BitSet(new long[]{0xFFFFFFFFFFFF0000L,0xFFFFFFFFFFFFFFFFL,0x078017FF7FFFFFFFL,0x0000000FC099000FL});
    public static final BitSet FOLLOW_p_ValueExpr_in_p_UnaryExpr5523 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_p_ValidateExpr_in_p_ValueExpr5579 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_p_PathExpr_in_p_ValueExpr5591 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_p_ExtensionExpr_in_p_ValueExpr5603 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_set_in_p_GeneralComp0 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_EQ_in_p_ValueComp5682 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_NE_in_p_ValueComp5688 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_LT_in_p_ValueComp5694 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_LE_in_p_ValueComp5700 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_GT_in_p_ValueComp5706 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_GE_in_p_ValueComp5712 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_IS_in_p_NodeComp5745 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_SMALLER_SMALLER_in_p_NodeComp5751 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_GREATER_GREATER_in_p_NodeComp5755 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_VALIDATE_in_p_ValidateExpr5785 = new BitSet(new long[]{0x0000000000080000L,0x0000000400000008L,0x0000200000000000L});
    public static final BitSet FOLLOW_p_ValidationMode_in_p_ValidateExpr5789 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000200000000000L});
    public static final BitSet FOLLOW_LBRACKET_in_p_ValidateExpr5792 = new BitSet(new long[]{0xFFFFFFFFFFFF0000L,0xFFFFFFFFFFFFFFFFL,0x078017FF7FFFFFFFL,0x0000000FC099000FL});
    public static final BitSet FOLLOW_pm_Expr_in_p_ValidateExpr5794 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000400000000000L});
    public static final BitSet FOLLOW_RBRACKET_in_p_ValidateExpr5796 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_LAX_in_p_ValidationMode5826 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_STRICT_in_p_ValidationMode5832 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_AS_in_p_ValidationMode5839 = new BitSet(new long[]{0xFFFFFFFFFFFF0000L,0xFFFFFFFFFFFFFFFFL,0x000003FF7FFFFFFFL,0x0000000000800000L});
    public static final BitSet FOLLOW_p_QName_in_p_ValidationMode5841 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_L_Pragma_in_p_ExtensionExpr5872 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000200000000000L,0x0000000040000000L});
    public static final BitSet FOLLOW_LBRACKET_in_p_ExtensionExpr5875 = new BitSet(new long[]{0xFFFFFFFFFFFF0000L,0xFFFFFFFFFFFFFFFFL,0x078057FF7FFFFFFFL,0x0000000FC099000FL});
    public static final BitSet FOLLOW_pm_Expr_in_p_ExtensionExpr5877 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000400000000000L});
    public static final BitSet FOLLOW_RBRACKET_in_p_ExtensionExpr5880 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_SLASH_in_p_PathExpr5922 = new BitSet(new long[]{0xFFFFFFFFFFFF0000L,0xFFFFFFFFFFFFFFFFL,0x048017FF7FFFFFFFL,0x0000000F8099000FL});
    public static final BitSet FOLLOW_p_RelativePathExpr_in_p_PathExpr5924 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_SLASH_in_p_PathExpr5937 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_SLASH_SLASH_in_p_PathExpr5949 = new BitSet(new long[]{0xFFFFFFFFFFFF0000L,0xFFFFFFFFFFFFFFFFL,0x048017FF7FFFFFFFL,0x0000000F8099000FL});
    public static final BitSet FOLLOW_p_RelativePathExpr_in_p_PathExpr5951 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_p_RelativePathExpr_in_p_PathExpr5963 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_p_StepExpr_in_p_RelativePathExpr5991 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000003L});
    public static final BitSet FOLLOW_set_in_p_RelativePathExpr5994 = new BitSet(new long[]{0xFFFFFFFFFFFF0000L,0xFFFFFFFFFFFFFFFFL,0x048017FF7FFFFFFFL,0x0000000F8099000FL});
    public static final BitSet FOLLOW_p_StepExpr_in_p_RelativePathExpr6002 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000003L});
    public static final BitSet FOLLOW_p_AxisStep_in_p_StepExpr6030 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_p_FilterExpr_in_p_StepExpr6042 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_p_ReverseStep_in_p_AxisStep6069 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000800000000000L});
    public static final BitSet FOLLOW_p_ForwardStep_in_p_AxisStep6073 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000800000000000L});
    public static final BitSet FOLLOW_p_PredicateList_in_p_AxisStep6076 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_p_ForwardAxis_in_p_ForwardStep6103 = new BitSet(new long[]{0xFFFFFFFFFFFF0000L,0xFFFFFFFFFFFFFFFFL,0x008003FF7FFFFFFFL,0x0000000000810008L});
    public static final BitSet FOLLOW_p_NodeTest_in_p_ForwardStep6105 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_p_AbbrevForwardStep_in_p_ForwardStep6110 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_CHILD_in_p_ForwardAxis6136 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000020L});
    public static final BitSet FOLLOW_COLON_COLON_in_p_ForwardAxis6138 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_DESCENDANT_in_p_ForwardAxis6150 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000020L});
    public static final BitSet FOLLOW_COLON_COLON_in_p_ForwardAxis6152 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ATTRIBUTE_in_p_ForwardAxis6164 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000020L});
    public static final BitSet FOLLOW_COLON_COLON_in_p_ForwardAxis6166 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_SELF_in_p_ForwardAxis6178 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000020L});
    public static final BitSet FOLLOW_COLON_COLON_in_p_ForwardAxis6180 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_DESCENDANT_OR_SELF_in_p_ForwardAxis6192 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000020L});
    public static final BitSet FOLLOW_COLON_COLON_in_p_ForwardAxis6194 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_FOLLOWING_SIBLING_in_p_ForwardAxis6206 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000020L});
    public static final BitSet FOLLOW_COLON_COLON_in_p_ForwardAxis6208 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_FOLLOWING_in_p_ForwardAxis6220 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000020L});
    public static final BitSet FOLLOW_COLON_COLON_in_p_ForwardAxis6222 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ATTR_SIGN_in_p_AbbrevForwardStep6248 = new BitSet(new long[]{0xFFFFFFFFFFFF0000L,0xFFFFFFFFFFFFFFFFL,0x008003FF7FFFFFFFL,0x0000000000810008L});
    public static final BitSet FOLLOW_p_NodeTest_in_p_AbbrevForwardStep6251 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_p_ReverseAxis_in_p_ReverseStep6278 = new BitSet(new long[]{0xFFFFFFFFFFFF0000L,0xFFFFFFFFFFFFFFFFL,0x008003FF7FFFFFFFL,0x0000000000810008L});
    public static final BitSet FOLLOW_p_NodeTest_in_p_ReverseStep6280 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_p_AbbrevReverseStep_in_p_ReverseStep6285 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_PARENT_in_p_ReverseAxis6311 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000020L});
    public static final BitSet FOLLOW_COLON_COLON_in_p_ReverseAxis6313 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ANCESTOR_in_p_ReverseAxis6325 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000020L});
    public static final BitSet FOLLOW_COLON_COLON_in_p_ReverseAxis6327 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_PRECEDING_SIBLING_in_p_ReverseAxis6339 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000020L});
    public static final BitSet FOLLOW_COLON_COLON_in_p_ReverseAxis6341 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_PRECEDING_in_p_ReverseAxis6353 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000020L});
    public static final BitSet FOLLOW_COLON_COLON_in_p_ReverseAxis6355 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ANCESTOR_OR_SELF_in_p_ReverseAxis6367 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000020L});
    public static final BitSet FOLLOW_COLON_COLON_in_p_ReverseAxis6369 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_DOT_DOT_in_p_AbbrevReverseStep6395 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_p_KindTest_in_p_NodeTest6421 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_p_NameTest_in_p_NodeTest6425 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_p_QName_in_p_NameTest6451 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_p_Wildcard_in_p_NameTest6455 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_STAR_in_p_Wildcard6485 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000010L});
    public static final BitSet FOLLOW_COLON_in_p_Wildcard6488 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000800000L});
    public static final BitSet FOLLOW_L_NCName_in_p_Wildcard6490 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_L_NCName_in_p_Wildcard6497 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000010L});
    public static final BitSet FOLLOW_COLON_in_p_Wildcard6499 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0080000000000000L});
    public static final BitSet FOLLOW_STAR_in_p_Wildcard6501 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_p_PrimaryExpr_in_p_FilterExpr6542 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000800000000000L});
    public static final BitSet FOLLOW_p_PredicateList_in_p_FilterExpr6544 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_p_Predicate_in_p_PredicateList6572 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000800000000000L});
    public static final BitSet FOLLOW_LSQUARE_in_p_Predicate6601 = new BitSet(new long[]{0xFFFFFFFFFFFF0000L,0xFFFFFFFFFFFFFFFFL,0x078017FF7FFFFFFFL,0x0000000FC099000FL});
    public static final BitSet FOLLOW_pm_Expr_in_p_Predicate6603 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0001000000000000L});
    public static final BitSet FOLLOW_RSQUARE_in_p_Predicate6605 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_p_Literal_in_p_PrimaryExpr6633 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_p_VarRef_in_p_PrimaryExpr6645 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_p_ParenthesizedExpr_in_p_PrimaryExpr6657 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_p_ContextItemExpr_in_p_PrimaryExpr6669 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_p_FunctionCall_in_p_PrimaryExpr6681 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_p_OrderedExpr_in_p_PrimaryExpr6693 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_p_UnorderedExpr_in_p_PrimaryExpr6705 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_p_Constructor_in_p_PrimaryExpr6717 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_p_NumericLiteral_in_p_Literal6745 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_p_StringLiteral_in_p_Literal6749 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_set_in_p_NumericLiteral0 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_DOLLAR_in_p_VarRef6821 = new BitSet(new long[]{0xFFFFFFFFFFFF0000L,0xFFFFFFFFFFFFFFFFL,0x000003FF7FFFFFFFL,0x0000000000800000L});
    public static final BitSet FOLLOW_p_VarName_in_p_VarRef6823 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_p_QName_in_p_VarName6851 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_LPAREN_in_p_ParenthesizedExpr6879 = new BitSet(new long[]{0xFFFFFFFFFFFF0000L,0xFFFFFFFFFFFFFFFFL,0x07801FFF7FFFFFFFL,0x0000000FC099000FL});
    public static final BitSet FOLLOW_pm_Expr_in_p_ParenthesizedExpr6881 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000080000000000L});
    public static final BitSet FOLLOW_RPAREN_in_p_ParenthesizedExpr6884 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_DOT_in_p_ContextItemExpr6912 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ORDERED_in_p_OrderedExpr6942 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000200000000000L});
    public static final BitSet FOLLOW_LBRACKET_in_p_OrderedExpr6946 = new BitSet(new long[]{0xFFFFFFFFFFFF0000L,0xFFFFFFFFFFFFFFFFL,0x078017FF7FFFFFFFL,0x0000000FC099000FL});
    public static final BitSet FOLLOW_pm_Expr_in_p_OrderedExpr6948 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000400000000000L});
    public static final BitSet FOLLOW_RBRACKET_in_p_OrderedExpr6950 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_UNORDERED_in_p_UnorderedExpr6980 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000200000000000L});
    public static final BitSet FOLLOW_LBRACKET_in_p_UnorderedExpr6984 = new BitSet(new long[]{0xFFFFFFFFFFFF0000L,0xFFFFFFFFFFFFFFFFL,0x078017FF7FFFFFFFL,0x0000000FC099000FL});
    public static final BitSet FOLLOW_pm_Expr_in_p_UnorderedExpr6986 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000400000000000L});
    public static final BitSet FOLLOW_RBRACKET_in_p_UnorderedExpr6988 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_p_FQName_in_p_FunctionCall7017 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000040000000000L});
    public static final BitSet FOLLOW_LPAREN_in_p_FunctionCall7019 = new BitSet(new long[]{0xFFFFFFFFFFFF0000L,0xFFFFFFFFFFFFFFFFL,0x07801FFF7FFFFFFFL,0x0000000FC099000FL});
    public static final BitSet FOLLOW_p_ExprSingle_in_p_FunctionCall7022 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0020080000000000L});
    public static final BitSet FOLLOW_COMMA_in_p_FunctionCall7025 = new BitSet(new long[]{0xFFFFFFFFFFFF0000L,0xFFFFFFFFFFFFFFFFL,0x078017FF7FFFFFFFL,0x0000000FC099000FL});
    public static final BitSet FOLLOW_p_ExprSingle_in_p_FunctionCall7027 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0020080000000000L});
    public static final BitSet FOLLOW_RPAREN_in_p_FunctionCall7033 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_p_DirectConstructor_in_p_Constructor7065 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_p_ComputedConstructor_in_p_Constructor7069 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_p_DirElemConstructor_in_p_DirectConstructor7097 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_L_DirCommentConstructor_in_p_DirectConstructor7109 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_L_DirPIConstructor_in_p_DirectConstructor7121 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_SMALLER_in_p_DirElemConstructor7150 = new BitSet(new long[]{0xFFFFFFFFFFFF0000L,0xFFFFFFFFFFFFFFFFL,0x000003FF7FFFFFFFL,0x0000000000800000L});
    public static final BitSet FOLLOW_p_QName_in_p_DirElemConstructor7166 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0800000000000000L,0x0000000010000040L});
    public static final BitSet FOLLOW_p_DirAttributeList_in_p_DirElemConstructor7168 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0800000000000000L,0x0000000000000040L});
    public static final BitSet FOLLOW_EMPTY_CLOSE_TAG_in_p_DirElemConstructor7184 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_GREATER_in_p_DirElemConstructor7189 = new BitSet(new long[]{0x0000000000000FC0L,0x0000000000000000L,0x0400200000000000L,0x0000000180000080L});
    public static final BitSet FOLLOW_pm_DirElemContent_in_p_DirElemConstructor7191 = new BitSet(new long[]{0x0000000000000FC0L,0x0000000000000000L,0x0400200000000000L,0x0000000180000080L});
    public static final BitSet FOLLOW_CLOSE_TAG_in_p_DirElemConstructor7194 = new BitSet(new long[]{0xFFFFFFFFFFFF0000L,0xFFFFFFFFFFFFFFFFL,0x000003FF7FFFFFFFL,0x0000000000800000L});
    public static final BitSet FOLLOW_p_QName_in_p_DirElemConstructor7196 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0800000000000000L,0x0000000010000000L});
    public static final BitSet FOLLOW_S_in_p_DirElemConstructor7198 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0800000000000000L});
    public static final BitSet FOLLOW_GREATER_in_p_DirElemConstructor7201 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_S_in_p_DirAttributeList7280 = new BitSet(new long[]{0xFFFFFFFFFFFF0002L,0xFFFFFFFFFFFFFFFFL,0x000003FF7FFFFFFFL,0x0000000010800000L});
    public static final BitSet FOLLOW_p_QName_in_p_DirAttributeList7283 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0002000000000000L,0x0000000010000000L});
    public static final BitSet FOLLOW_S_in_p_DirAttributeList7285 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0002000000000000L});
    public static final BitSet FOLLOW_EQUAL_in_p_DirAttributeList7288 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000010180000L});
    public static final BitSet FOLLOW_S_in_p_DirAttributeList7290 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000010180000L});
    public static final BitSet FOLLOW_p_DirAttributeValue_in_p_DirAttributeList7293 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000010000000L});
    public static final BitSet FOLLOW_QUOT_in_p_DirAttributeValue7326 = new BitSet(new long[]{0x0000000000002F10L,0x0000000000000000L,0x0000200000000000L,0x0000000000100000L});
    public static final BitSet FOLLOW_ESCAPE_QUOT_in_p_DirAttributeValue7329 = new BitSet(new long[]{0x0000000000002F10L,0x0000000000000000L,0x0000200000000000L,0x0000000000100000L});
    public static final BitSet FOLLOW_pm_QuotAttrValueContent_in_p_DirAttributeValue7333 = new BitSet(new long[]{0x0000000000002F10L,0x0000000000000000L,0x0000200000000000L,0x0000000000100000L});
    public static final BitSet FOLLOW_QUOT_in_p_DirAttributeValue7337 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_APOS_in_p_DirAttributeValue7376 = new BitSet(new long[]{0x0000000000001F20L,0x0000000000000000L,0x0000200000000000L,0x0000000000080000L});
    public static final BitSet FOLLOW_ESCAPE_APOS_in_p_DirAttributeValue7379 = new BitSet(new long[]{0x0000000000001F20L,0x0000000000000000L,0x0000200000000000L,0x0000000000080000L});
    public static final BitSet FOLLOW_pm_AposAttrValueContent_in_p_DirAttributeValue7383 = new BitSet(new long[]{0x0000000000001F20L,0x0000000000000000L,0x0000200000000000L,0x0000000000080000L});
    public static final BitSet FOLLOW_APOS_in_p_DirAttributeValue7387 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_pg_QuotAttrContentChar_in_pm_QuotAttrValueContent7441 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_pg_CommonContent_in_pm_QuotAttrValueContent7445 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_p_ElemEnclosedExpr_in_pm_QuotAttrValueContent7449 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_L_QuotAttrContentChar_in_pg_QuotAttrContentChar7478 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_pg_AposAttrContentChar_in_pm_AposAttrValueContent7531 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_pg_CommonContent_in_pm_AposAttrValueContent7535 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_p_ElemEnclosedExpr_in_pm_AposAttrValueContent7539 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_L_AposAttrContentChar_in_pg_AposAttrContentChar7568 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_p_DirectConstructor_in_pm_DirElemContent7619 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_L_CDataSection_in_pm_DirElemContent7631 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_p_ElemEnclosedExpr_in_pm_DirElemContent7643 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_pg_CommonContent_in_pm_DirElemContent7655 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_pg_ElementContentChar_in_pm_DirElemContent7667 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_L_ElementContentChar_in_pg_ElementContentChar7696 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_pm_CommonContent_in_pg_CommonContent7752 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_set_in_pm_CommonContent0 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_LBRACKET_in_p_ElemEnclosedExpr7848 = new BitSet(new long[]{0xFFFFFFFFFFFF0000L,0xFFFFFFFFFFFFFFFFL,0x078017FF7FFFFFFFL,0x0000000FC099000FL});
    public static final BitSet FOLLOW_pm_Expr_in_p_ElemEnclosedExpr7864 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000400000000000L});
    public static final BitSet FOLLOW_RBRACKET_in_p_ElemEnclosedExpr7878 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_p_CompDocConstructor_in_p_ComputedConstructor7930 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_p_CompElemConstructor_in_p_ComputedConstructor7942 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_p_CompAttrConstructor_in_p_ComputedConstructor7954 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_p_CompNamespaceConstructor_in_p_ComputedConstructor7966 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_p_CompTextConstructor_in_p_ComputedConstructor7978 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_p_CompCommentConstructor_in_p_ComputedConstructor7990 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_p_CompPIConstructor_in_p_ComputedConstructor8002 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_DOCUMENT_in_p_CompDocConstructor8036 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000200000000000L});
    public static final BitSet FOLLOW_LBRACKET_in_p_CompDocConstructor8040 = new BitSet(new long[]{0xFFFFFFFFFFFF0000L,0xFFFFFFFFFFFFFFFFL,0x078017FF7FFFFFFFL,0x0000000FC099000FL});
    public static final BitSet FOLLOW_pm_Expr_in_p_CompDocConstructor8042 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000400000000000L});
    public static final BitSet FOLLOW_RBRACKET_in_p_CompDocConstructor8044 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ELEMENT_in_p_CompElemConstructor8085 = new BitSet(new long[]{0xFFFFFFFFFFFF0000L,0xFFFFFFFFFFFFFFFFL,0x000023FF7FFFFFFFL,0x0000000000800000L});
    public static final BitSet FOLLOW_p_QName_in_p_CompElemConstructor8090 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000200000000000L});
    public static final BitSet FOLLOW_LBRACKET_in_p_CompElemConstructor8095 = new BitSet(new long[]{0xFFFFFFFFFFFF0000L,0xFFFFFFFFFFFFFFFFL,0x078017FF7FFFFFFFL,0x0000000FC099000FL});
    public static final BitSet FOLLOW_pm_Expr_in_p_CompElemConstructor8097 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000400000000000L});
    public static final BitSet FOLLOW_RBRACKET_in_p_CompElemConstructor8099 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000200000000000L});
    public static final BitSet FOLLOW_LBRACKET_in_p_CompElemConstructor8103 = new BitSet(new long[]{0xFFFFFFFFFFFF0000L,0xFFFFFFFFFFFFFFFFL,0x078057FF7FFFFFFFL,0x0000000FC099000FL});
    public static final BitSet FOLLOW_pm_Expr_in_p_CompElemConstructor8105 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000400000000000L});
    public static final BitSet FOLLOW_RBRACKET_in_p_CompElemConstructor8108 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ATTRIBUTE_in_p_CompAttrConstructor8141 = new BitSet(new long[]{0xFFFFFFFFFFFF0000L,0xFFFFFFFFFFFFFFFFL,0x000023FF7FFFFFFFL,0x0000000000800000L});
    public static final BitSet FOLLOW_p_QName_in_p_CompAttrConstructor8146 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000200000000000L});
    public static final BitSet FOLLOW_LBRACKET_in_p_CompAttrConstructor8151 = new BitSet(new long[]{0xFFFFFFFFFFFF0000L,0xFFFFFFFFFFFFFFFFL,0x078017FF7FFFFFFFL,0x0000000FC099000FL});
    public static final BitSet FOLLOW_pm_Expr_in_p_CompAttrConstructor8153 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000400000000000L});
    public static final BitSet FOLLOW_RBRACKET_in_p_CompAttrConstructor8155 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000200000000000L});
    public static final BitSet FOLLOW_LBRACKET_in_p_CompAttrConstructor8159 = new BitSet(new long[]{0xFFFFFFFFFFFF0000L,0xFFFFFFFFFFFFFFFFL,0x078057FF7FFFFFFFL,0x0000000FC099000FL});
    public static final BitSet FOLLOW_pm_Expr_in_p_CompAttrConstructor8161 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000400000000000L});
    public static final BitSet FOLLOW_RBRACKET_in_p_CompAttrConstructor8164 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_NAMESPACE_in_p_CompNamespaceConstructor8192 = new BitSet(new long[]{0xFFFFFFFFFFFF0000L,0xFFFFFFFFFFFFFFFFL,0x000023FF7FFFFFFFL,0x0000000000800000L});
    public static final BitSet FOLLOW_p_NCName_in_p_CompNamespaceConstructor8197 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000200000000000L});
    public static final BitSet FOLLOW_LBRACKET_in_p_CompNamespaceConstructor8202 = new BitSet(new long[]{0xFFFFFFFFFFFF0000L,0xFFFFFFFFFFFFFFFFL,0x078017FF7FFFFFFFL,0x0000000FC099000FL});
    public static final BitSet FOLLOW_pm_Expr_in_p_CompNamespaceConstructor8204 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000400000000000L});
    public static final BitSet FOLLOW_RBRACKET_in_p_CompNamespaceConstructor8206 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000200000000000L});
    public static final BitSet FOLLOW_LBRACKET_in_p_CompNamespaceConstructor8210 = new BitSet(new long[]{0xFFFFFFFFFFFF0000L,0xFFFFFFFFFFFFFFFFL,0x078057FF7FFFFFFFL,0x0000000FC099000FL});
    public static final BitSet FOLLOW_pm_Expr_in_p_CompNamespaceConstructor8212 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000400000000000L});
    public static final BitSet FOLLOW_RBRACKET_in_p_CompNamespaceConstructor8215 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_TEXT_in_p_CompTextConstructor8251 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000200000000000L});
    public static final BitSet FOLLOW_LBRACKET_in_p_CompTextConstructor8255 = new BitSet(new long[]{0xFFFFFFFFFFFF0000L,0xFFFFFFFFFFFFFFFFL,0x078017FF7FFFFFFFL,0x0000000FC099000FL});
    public static final BitSet FOLLOW_pm_Expr_in_p_CompTextConstructor8257 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000400000000000L});
    public static final BitSet FOLLOW_RBRACKET_in_p_CompTextConstructor8259 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_COMMENT_in_p_CompCommentConstructor8289 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000200000000000L});
    public static final BitSet FOLLOW_LBRACKET_in_p_CompCommentConstructor8293 = new BitSet(new long[]{0xFFFFFFFFFFFF0000L,0xFFFFFFFFFFFFFFFFL,0x078017FF7FFFFFFFL,0x0000000FC099000FL});
    public static final BitSet FOLLOW_pm_Expr_in_p_CompCommentConstructor8295 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000400000000000L});
    public static final BitSet FOLLOW_RBRACKET_in_p_CompCommentConstructor8297 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_PROCESSING_INSTRUCTION_in_p_CompPIConstructor8328 = new BitSet(new long[]{0xFFFFFFFFFFFF0000L,0xFFFFFFFFFFFFFFFFL,0x000023FF7FFFFFFFL,0x0000000000800000L});
    public static final BitSet FOLLOW_p_NCName_in_p_CompPIConstructor8333 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000200000000000L});
    public static final BitSet FOLLOW_LBRACKET_in_p_CompPIConstructor8338 = new BitSet(new long[]{0xFFFFFFFFFFFF0000L,0xFFFFFFFFFFFFFFFFL,0x078017FF7FFFFFFFL,0x0000000FC099000FL});
    public static final BitSet FOLLOW_pm_Expr_in_p_CompPIConstructor8340 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000400000000000L});
    public static final BitSet FOLLOW_RBRACKET_in_p_CompPIConstructor8342 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000200000000000L});
    public static final BitSet FOLLOW_LBRACKET_in_p_CompPIConstructor8346 = new BitSet(new long[]{0xFFFFFFFFFFFF0000L,0xFFFFFFFFFFFFFFFFL,0x078057FF7FFFFFFFL,0x0000000FC099000FL});
    public static final BitSet FOLLOW_pm_Expr_in_p_CompPIConstructor8348 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000400000000000L});
    public static final BitSet FOLLOW_RBRACKET_in_p_CompPIConstructor8351 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_p_AtomicType_in_p_SingleType8379 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0040000000000000L});
    public static final BitSet FOLLOW_QUESTION_in_p_SingleType8381 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_AS_in_p_TypeDeclaration8412 = new BitSet(new long[]{0xFFFFFFFFFFFF0000L,0xFFFFFFFFFFFFFFFFL,0x000013FF7FFFFFFFL,0x0000000000800000L});
    public static final BitSet FOLLOW_p_SequenceType_in_p_TypeDeclaration8418 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_EMPTY_SEQUENCE_in_p_SequenceType8473 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000040000000000L});
    public static final BitSet FOLLOW_LPAREN_in_p_SequenceType8479 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000080000000000L});
    public static final BitSet FOLLOW_RPAREN_in_p_SequenceType8483 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_p_ItemType_in_p_SequenceType8532 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x01C0000000000000L});
    public static final BitSet FOLLOW_p_OccurrenceIndicator_in_p_SequenceType8543 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_set_in_p_OccurrenceIndicator0 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_p_KindTest_in_p_ItemType8645 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_BINARY_in_p_ItemType8685 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000040000000000L});
    public static final BitSet FOLLOW_LPAREN_in_p_ItemType8687 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000080000000000L});
    public static final BitSet FOLLOW_RPAREN_in_p_ItemType8689 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ITEM_in_p_ItemType8731 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000040000000000L});
    public static final BitSet FOLLOW_LPAREN_in_p_ItemType8733 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000080000000000L});
    public static final BitSet FOLLOW_RPAREN_in_p_ItemType8735 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_p_AtomicType_in_p_ItemType8776 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_p_QName_in_p_AtomicType8802 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_p_DocumentTest_in_p_KindTest8852 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_p_ElementTest_in_p_KindTest8864 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_p_AttributeTest_in_p_KindTest8876 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_p_SchemaElementTest_in_p_KindTest8888 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_p_SchemaAttributeTest_in_p_KindTest8900 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_p_NamespaceNodeTest_in_p_KindTest8912 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_p_PITest_in_p_KindTest8924 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_p_CommentTest_in_p_KindTest8936 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_p_TextTest_in_p_KindTest8948 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_p_AnyKindTest_in_p_KindTest8960 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_NODE_in_p_AnyKindTest8988 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000040000000000L});
    public static final BitSet FOLLOW_LPAREN_in_p_AnyKindTest8990 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000080000000000L});
    public static final BitSet FOLLOW_RPAREN_in_p_AnyKindTest8992 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_DOCUMENT_NODE_in_p_DocumentTest9020 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000040000000000L});
    public static final BitSet FOLLOW_LPAREN_in_p_DocumentTest9022 = new BitSet(new long[]{0x0000040000000000L,0x0000000040000000L,0x0000080000000000L});
    public static final BitSet FOLLOW_p_ElementTest_in_p_DocumentTest9025 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000080000000000L});
    public static final BitSet FOLLOW_p_SchemaElementTest_in_p_DocumentTest9029 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000080000000000L});
    public static final BitSet FOLLOW_RPAREN_in_p_DocumentTest9033 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_TEXT_in_p_TextTest9053 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000040000000000L});
    public static final BitSet FOLLOW_LPAREN_in_p_TextTest9055 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000080000000000L});
    public static final BitSet FOLLOW_RPAREN_in_p_TextTest9057 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_COMMENT_in_p_CommentTest9085 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000040000000000L});
    public static final BitSet FOLLOW_LPAREN_in_p_CommentTest9087 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000080000000000L});
    public static final BitSet FOLLOW_RPAREN_in_p_CommentTest9089 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_NAMESPACE_NODE_in_p_NamespaceNodeTest9115 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000040000000000L});
    public static final BitSet FOLLOW_LPAREN_in_p_NamespaceNodeTest9117 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000080000000000L});
    public static final BitSet FOLLOW_RPAREN_in_p_NamespaceNodeTest9119 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_PROCESSING_INSTRUCTION_in_p_PITest9147 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000040000000000L});
    public static final BitSet FOLLOW_LPAREN_in_p_PITest9149 = new BitSet(new long[]{0xFFFFFFFFFFFF0000L,0xFFFFFFFFFFFFFFFFL,0x00000BFF7FFFFFFFL,0x0000000000980000L});
    public static final BitSet FOLLOW_p_NCName_in_p_PITest9152 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000080000000000L});
    public static final BitSet FOLLOW_p_StringLiteral_in_p_PITest9156 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000080000000000L});
    public static final BitSet FOLLOW_RPAREN_in_p_PITest9160 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ATTRIBUTE_in_p_AttributeTest9188 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000040000000000L});
    public static final BitSet FOLLOW_LPAREN_in_p_AttributeTest9190 = new BitSet(new long[]{0xFFFFFFFFFFFF0000L,0xFFFFFFFFFFFFFFFFL,0x00800BFF7FFFFFFFL,0x0000000000800000L});
    public static final BitSet FOLLOW_p_AttribNameOrWildcard_in_p_AttributeTest9193 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0020080000000000L});
    public static final BitSet FOLLOW_COMMA_in_p_AttributeTest9196 = new BitSet(new long[]{0xFFFFFFFFFFFF0000L,0xFFFFFFFFFFFFFFFFL,0x000003FF7FFFFFFFL,0x0000000000800000L});
    public static final BitSet FOLLOW_p_TypeName_in_p_AttributeTest9198 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000080000000000L});
    public static final BitSet FOLLOW_RPAREN_in_p_AttributeTest9204 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_p_QName_in_p_AttribNameOrWildcard9234 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_STAR_in_p_AttribNameOrWildcard9238 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_SCHEMA_ATTRIBUTE_in_p_SchemaAttributeTest9266 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000040000000000L});
    public static final BitSet FOLLOW_LPAREN_in_p_SchemaAttributeTest9268 = new BitSet(new long[]{0xFFFFFFFFFFFF0000L,0xFFFFFFFFFFFFFFFFL,0x000003FF7FFFFFFFL,0x0000000000800000L});
    public static final BitSet FOLLOW_p_AttributeDeclaration_in_p_SchemaAttributeTest9270 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000080000000000L});
    public static final BitSet FOLLOW_RPAREN_in_p_SchemaAttributeTest9272 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_p_AttributeName_in_p_AttributeDeclaration9298 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ELEMENT_in_p_ElementTest9326 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000040000000000L});
    public static final BitSet FOLLOW_LPAREN_in_p_ElementTest9328 = new BitSet(new long[]{0xFFFFFFFFFFFF0000L,0xFFFFFFFFFFFFFFFFL,0x00800BFF7FFFFFFFL,0x0000000000800000L});
    public static final BitSet FOLLOW_p_ElementNameOrWildcard_in_p_ElementTest9331 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0020080000000000L});
    public static final BitSet FOLLOW_COMMA_in_p_ElementTest9334 = new BitSet(new long[]{0xFFFFFFFFFFFF0000L,0xFFFFFFFFFFFFFFFFL,0x000003FF7FFFFFFFL,0x0000000000800000L});
    public static final BitSet FOLLOW_p_TypeName_in_p_ElementTest9336 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0040080000000000L});
    public static final BitSet FOLLOW_QUESTION_in_p_ElementTest9338 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000080000000000L});
    public static final BitSet FOLLOW_RPAREN_in_p_ElementTest9345 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_p_QName_in_p_ElementNameOrWildcard9373 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_STAR_in_p_ElementNameOrWildcard9377 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_SCHEMA_ELEMENT_in_p_SchemaElementTest9397 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000040000000000L});
    public static final BitSet FOLLOW_LPAREN_in_p_SchemaElementTest9399 = new BitSet(new long[]{0xFFFFFFFFFFFF0000L,0xFFFFFFFFFFFFFFFFL,0x000003FF7FFFFFFFL,0x0000000000800000L});
    public static final BitSet FOLLOW_p_ElementDeclaration_in_p_SchemaElementTest9401 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000080000000000L});
    public static final BitSet FOLLOW_RPAREN_in_p_SchemaElementTest9403 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_p_ElementName_in_p_ElementDeclaration9429 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_p_QName_in_p_AttributeName9457 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_p_QName_in_p_ElementName9485 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_p_QName_in_p_TypeName9513 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_p_TryClause_in_p_TryCatchExpr9545 = new BitSet(new long[]{0x0000000000000000L,0x0001000000000000L});
    public static final BitSet FOLLOW_p_CatchClause_in_p_TryCatchExpr9547 = new BitSet(new long[]{0x0000000000000002L,0x0001000000000000L});
    public static final BitSet FOLLOW_TRY_in_p_TryClause9576 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000200000000000L});
    public static final BitSet FOLLOW_LBRACKET_in_p_TryClause9580 = new BitSet(new long[]{0xFFFFFFFFFFFF0000L,0xFFFFFFFFFFFFFFFFL,0x078017FF7FFFFFFFL,0x0000000FC099000FL});
    public static final BitSet FOLLOW_pm_Expr_in_p_TryClause9582 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000400000000000L});
    public static final BitSet FOLLOW_RBRACKET_in_p_TryClause9584 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_CATCH_in_p_CatchClause9615 = new BitSet(new long[]{0xFFFFFFFFFFFF0000L,0xFFFFFFFFFFFFFFFFL,0x008027FF7FFFFFFFL,0x0000000000810008L});
    public static final BitSet FOLLOW_p_CatchErrorList_in_p_CatchClause9619 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000240000000000L});
    public static final BitSet FOLLOW_p_CatchVars_in_p_CatchClause9621 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000200000000000L});
    public static final BitSet FOLLOW_LBRACKET_in_p_CatchClause9624 = new BitSet(new long[]{0xFFFFFFFFFFFF0000L,0xFFFFFFFFFFFFFFFFL,0x078017FF7FFFFFFFL,0x0000000FC099000FL});
    public static final BitSet FOLLOW_pm_Expr_in_p_CatchClause9626 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000400000000000L});
    public static final BitSet FOLLOW_RBRACKET_in_p_CatchClause9628 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_p_NameTest_in_p_CatchErrorList9654 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000200L});
    public static final BitSet FOLLOW_VBAR_in_p_CatchErrorList9657 = new BitSet(new long[]{0xFFFFFFFFFFFF0000L,0xFFFFFFFFFFFFFFFFL,0x008003FF7FFFFFFFL,0x0000000000810008L});
    public static final BitSet FOLLOW_p_NameTest_in_p_CatchErrorList9659 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000200L});
    public static final BitSet FOLLOW_LPAREN_in_p_CatchVars9705 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000100000000000L});
    public static final BitSet FOLLOW_DOLLAR_in_p_CatchVars9707 = new BitSet(new long[]{0xFFFFFFFFFFFF0000L,0xFFFFFFFFFFFFFFFFL,0x000003FF7FFFFFFFL,0x0000000000800000L});
    public static final BitSet FOLLOW_p_VarName_in_p_CatchVars9709 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0020080000000000L});
    public static final BitSet FOLLOW_COMMA_in_p_CatchVars9712 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000100000000000L});
    public static final BitSet FOLLOW_DOLLAR_in_p_CatchVars9714 = new BitSet(new long[]{0xFFFFFFFFFFFF0000L,0xFFFFFFFFFFFFFFFFL,0x000003FF7FFFFFFFL,0x0000000000800000L});
    public static final BitSet FOLLOW_p_VarName_in_p_CatchVars9716 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0020080000000000L});
    public static final BitSet FOLLOW_COMMA_in_p_CatchVars9719 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000100000000000L});
    public static final BitSet FOLLOW_DOLLAR_in_p_CatchVars9721 = new BitSet(new long[]{0xFFFFFFFFFFFF0000L,0xFFFFFFFFFFFFFFFFL,0x000003FF7FFFFFFFL,0x0000000000800000L});
    public static final BitSet FOLLOW_p_VarName_in_p_CatchVars9723 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000080000000000L});
    public static final BitSet FOLLOW_RPAREN_in_p_CatchVars9729 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_QUOT_in_p_StringLiteral9778 = new BitSet(new long[]{0xFFFFFFFFFFFFFFF0L,0xFFFFFFFFFFFFFFFFL,0xFFEFFFFFFFFFFFFFL,0xFFFFFFFFFFFFFFFFL,0x000000007FFFFFFFL});
    public static final BitSet FOLLOW_p_QuotStringLiteralContent_in_p_StringLiteral9782 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000100000L});
    public static final BitSet FOLLOW_QUOT_in_p_StringLiteral9784 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_APOS_in_p_StringLiteral9825 = new BitSet(new long[]{0xFFFFFFFFFFFFFFF0L,0xFFFFFFFFFFFFFFFFL,0xFFEFFFFFFFFFFFFFL,0xFFFFFFFFFFFFFFFFL,0x000000007FFFFFFFL});
    public static final BitSet FOLLOW_p_AposStringLiteralContent_in_p_StringLiteral9829 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000080000L});
    public static final BitSet FOLLOW_APOS_in_p_StringLiteral9831 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_set_in_p_QuotStringLiteralContent9887 = new BitSet(new long[]{0xFFFFFFFFFFFFFFF2L,0xFFFFFFFFFFFFFFFFL,0xFFEFFFFFFFFFFFFFL,0xFFFFFFFFFFEFFFFFL,0x000000007FFFFFFFL});
    public static final BitSet FOLLOW_set_in_p_AposStringLiteralContent9939 = new BitSet(new long[]{0xFFFFFFFFFFFFFFF2L,0xFFFFFFFFFFFFFFFFL,0xFFEFFFFFFFFFFFFFL,0xFFFFFFFFFFF7FFFFL,0x000000007FFFFFFFL});
    public static final BitSet FOLLOW_p_NCName_in_p_QName10029 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000010L});
    public static final BitSet FOLLOW_p_LocalNCName_in_p_QName10031 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_COLON_in_p_LocalNCName10086 = new BitSet(new long[]{0xFFFFFFFFFFFF0000L,0xFFFFFFFFFFFFFFFFL,0x000003FF7FFFFFFFL,0x0000000000800000L});
    public static final BitSet FOLLOW_p_NCName_in_p_LocalNCName10088 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_p_FNCName_in_p_FQName10135 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000010L});
    public static final BitSet FOLLOW_p_LocalFNCName_in_p_FQName10137 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_COLON_in_p_LocalFNCName10165 = new BitSet(new long[]{0xFFFFFFFFFFFF0000L,0xFFFFFFFFFFFFFFFFL,0x000003FF7FFFFFFFL,0x0000000000800000L});
    public static final BitSet FOLLOW_p_NCName_in_p_LocalFNCName10167 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_set_in_p_NCName0 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_set_in_p_FNCName0 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_DECLARE_in_pm_RevalidationDecl11660 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000800000L});
    public static final BitSet FOLLOW_REVALIDATION_in_pm_RevalidationDecl11664 = new BitSet(new long[]{0x0000000000000000L,0x0000000400000008L,0x0000000001000000L});
    public static final BitSet FOLLOW_STRICT_in_pm_RevalidationDecl11669 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_LAX_in_pm_RevalidationDecl11675 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_SKIP_in_pm_RevalidationDecl11681 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_AS_in_p_InsertExprTargetChoice11714 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000048000L});
    public static final BitSet FOLLOW_FIRST_in_p_InsertExprTargetChoice11719 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000020000L});
    public static final BitSet FOLLOW_LAST_in_p_InsertExprTargetChoice11725 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000020000L});
    public static final BitSet FOLLOW_INTO_in_p_InsertExprTargetChoice11732 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_AFTER_in_p_InsertExprTargetChoice11749 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_BEFORE_in_p_InsertExprTargetChoice11765 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_INSERT_in_p_InsertExpr11795 = new BitSet(new long[]{0x0000000000000000L,0x0000000000004000L,0x0000000000100000L});
    public static final BitSet FOLLOW_NODE_in_p_InsertExpr11800 = new BitSet(new long[]{0xFFFFFFFFFFFF0000L,0xFFFFFFFFFFFFFFFFL,0x078017FF7FFFFFFFL,0x0000000FC099000FL});
    public static final BitSet FOLLOW_NODES_in_p_InsertExpr11806 = new BitSet(new long[]{0xFFFFFFFFFFFF0000L,0xFFFFFFFFFFFFFFFFL,0x078017FF7FFFFFFFL,0x0000000FC099000FL});
    public static final BitSet FOLLOW_p_SourceExpr_in_p_InsertExpr11809 = new BitSet(new long[]{0x0000000000080000L,0x0000000000000000L,0x0000000000021800L});
    public static final BitSet FOLLOW_p_InsertExprTargetChoice_in_p_InsertExpr11811 = new BitSet(new long[]{0xFFFFFFFFFFFF0000L,0xFFFFFFFFFFFFFFFFL,0x078017FF7FFFFFFFL,0x0000000FC099000FL});
    public static final BitSet FOLLOW_p_TargetExpr_in_p_InsertExpr11813 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_DELETE_in_p_DeleteExpr11843 = new BitSet(new long[]{0x0000000000000000L,0x0000000000004000L,0x0000000000100000L});
    public static final BitSet FOLLOW_NODE_in_p_DeleteExpr11848 = new BitSet(new long[]{0xFFFFFFFFFFFF0000L,0xFFFFFFFFFFFFFFFFL,0x078017FF7FFFFFFFL,0x0000000FC099000FL});
    public static final BitSet FOLLOW_NODES_in_p_DeleteExpr11854 = new BitSet(new long[]{0xFFFFFFFFFFFF0000L,0xFFFFFFFFFFFFFFFFL,0x078017FF7FFFFFFFL,0x0000000FC099000FL});
    public static final BitSet FOLLOW_p_TargetExpr_in_p_DeleteExpr11857 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_REPLACE_in_p_ReplaceExpr11887 = new BitSet(new long[]{0x0000000000000000L,0x0000000000004000L,0x0000000004000000L});
    public static final BitSet FOLLOW_VALUE_in_p_ReplaceExpr11892 = new BitSet(new long[]{0x0000000000000000L,0x0000000000008000L});
    public static final BitSet FOLLOW_OF_in_p_ReplaceExpr11896 = new BitSet(new long[]{0x0000000000000000L,0x0000000000004000L});
    public static final BitSet FOLLOW_NODE_in_p_ReplaceExpr11902 = new BitSet(new long[]{0xFFFFFFFFFFFF0000L,0xFFFFFFFFFFFFFFFFL,0x078017FF7FFFFFFFL,0x0000000FC099000FL});
    public static final BitSet FOLLOW_p_ExprSingle_in_p_ReplaceExpr11904 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000008000000L});
    public static final BitSet FOLLOW_WITH_in_p_ReplaceExpr11908 = new BitSet(new long[]{0xFFFFFFFFFFFF0000L,0xFFFFFFFFFFFFFFFFL,0x078017FF7FFFFFFFL,0x0000000FC099000FL});
    public static final BitSet FOLLOW_p_ExprSingle_in_p_ReplaceExpr11910 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_RENAME_in_p_RenameExpr11940 = new BitSet(new long[]{0x0000000000000000L,0x0000000000004000L});
    public static final BitSet FOLLOW_NODE_in_p_RenameExpr11944 = new BitSet(new long[]{0xFFFFFFFFFFFF0000L,0xFFFFFFFFFFFFFFFFL,0x078017FF7FFFFFFFL,0x0000000FC099000FL});
    public static final BitSet FOLLOW_p_TargetExpr_in_p_RenameExpr11946 = new BitSet(new long[]{0x0000000000080000L});
    public static final BitSet FOLLOW_AS_in_p_RenameExpr11948 = new BitSet(new long[]{0xFFFFFFFFFFFF0000L,0xFFFFFFFFFFFFFFFFL,0x078017FF7FFFFFFFL,0x0000000FC099000FL});
    public static final BitSet FOLLOW_p_NewNameExpr_in_p_RenameExpr11950 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_p_ExprSingle_in_p_SourceExpr11978 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_p_ExprSingle_in_p_TargetExpr12004 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_p_ExprSingle_in_p_NewNameExpr12030 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_COPY_in_p_TransformExpr12058 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000100000000000L});
    public static final BitSet FOLLOW_DOLLAR_in_p_TransformExpr12060 = new BitSet(new long[]{0xFFFFFFFFFFFF0000L,0xFFFFFFFFFFFFFFFFL,0x000003FF7FFFFFFFL,0x0000000000800000L});
    public static final BitSet FOLLOW_p_VarName_in_p_TransformExpr12062 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0004000000000000L});
    public static final BitSet FOLLOW_BIND_in_p_TransformExpr12064 = new BitSet(new long[]{0xFFFFFFFFFFFF0000L,0xFFFFFFFFFFFFFFFFL,0x078017FF7FFFFFFFL,0x0000000FC099000FL});
    public static final BitSet FOLLOW_p_ExprSingle_in_p_TransformExpr12066 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0020000000080000L});
    public static final BitSet FOLLOW_COMMA_in_p_TransformExpr12069 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000100000000000L});
    public static final BitSet FOLLOW_DOLLAR_in_p_TransformExpr12071 = new BitSet(new long[]{0xFFFFFFFFFFFF0000L,0xFFFFFFFFFFFFFFFFL,0x000003FF7FFFFFFFL,0x0000000000800000L});
    public static final BitSet FOLLOW_p_VarName_in_p_TransformExpr12073 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0004000000000000L});
    public static final BitSet FOLLOW_BIND_in_p_TransformExpr12075 = new BitSet(new long[]{0xFFFFFFFFFFFF0000L,0xFFFFFFFFFFFFFFFFL,0x078017FF7FFFFFFFL,0x0000000FC099000FL});
    public static final BitSet FOLLOW_p_ExprSingle_in_p_TransformExpr12077 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0020000000080000L});
    public static final BitSet FOLLOW_MODIFY_in_p_TransformExpr12083 = new BitSet(new long[]{0xFFFFFFFFFFFF0000L,0xFFFFFFFFFFFFFFFFL,0x078017FF7FFFFFFFL,0x0000000FC099000FL});
    public static final BitSet FOLLOW_p_ExprSingle_in_p_TransformExpr12085 = new BitSet(new long[]{0x0000000000000000L,0x0000000004000000L});
    public static final BitSet FOLLOW_RETURN_in_p_TransformExpr12089 = new BitSet(new long[]{0xFFFFFFFFFFFF0000L,0xFFFFFFFFFFFFFFFFL,0x078017FF7FFFFFFFL,0x0000000FC099000FL});
    public static final BitSet FOLLOW_p_ExprSingle_in_p_TransformExpr12091 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_p_ConcatExpr_in_pm_ApplyExpr12126 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000100L});
    public static final BitSet FOLLOW_SEMICOLON_in_pm_ApplyExpr12128 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_p_ExprSingle_in_p_ConcatExpr12154 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0020000000000000L});
    public static final BitSet FOLLOW_COMMA_in_p_ConcatExpr12157 = new BitSet(new long[]{0xFFFFFFFFFFFF0000L,0xFFFFFFFFFFFFFFFFL,0x078017FF7FFFFFFFL,0x0000000FC099000FL});
    public static final BitSet FOLLOW_p_ExprSingle_in_p_ConcatExpr12159 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0020000000000000L});
    public static final BitSet FOLLOW_BLOCK_in_p_BlockExpr12189 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000200000000000L});
    public static final BitSet FOLLOW_p_Block_in_p_BlockExpr12193 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_LBRACKET_in_p_Block12219 = new BitSet(new long[]{0xFFFFFFFFFFFF0000L,0xFFFFFFFFFFFFFFFFL,0x078017FF7FFFFFFFL,0x0000000FC099000FL});
    public static final BitSet FOLLOW_pm_BlockDecls_in_p_Block12223 = new BitSet(new long[]{0xFFFFFFFFFFFF0000L,0xFFFFFFFFFFFFFFFFL,0x078017FF7FFFFFFFL,0x0000000FC099000FL});
    public static final BitSet FOLLOW_p_BlockBody_in_p_Block12227 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000400000000000L});
    public static final BitSet FOLLOW_RBRACKET_in_p_Block12229 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_pm_BlockVarDecl_in_pm_BlockDecls12285 = new BitSet(new long[]{0x0000000400000002L});
    public static final BitSet FOLLOW_DECLARE_in_pm_BlockVarDecl12340 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000100000000000L});
    public static final BitSet FOLLOW_DOLLAR_in_pm_BlockVarDecl12344 = new BitSet(new long[]{0xFFFFFFFFFFFF0000L,0xFFFFFFFFFFFFFFFFL,0x000003FF7FFFFFFFL,0x0000000000800000L});
    public static final BitSet FOLLOW_p_VarName_in_pm_BlockVarDecl12348 = new BitSet(new long[]{0x0000000000080000L,0x0000000000000000L,0x0024000000000000L,0x0000000000000100L});
    public static final BitSet FOLLOW_p_TypeDeclaration_in_pm_BlockVarDecl12352 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0024000000000000L,0x0000000000000100L});
    public static final BitSet FOLLOW_BIND_in_pm_BlockVarDecl12356 = new BitSet(new long[]{0xFFFFFFFFFFFF0000L,0xFFFFFFFFFFFFFFFFL,0x078017FF7FFFFFFFL,0x0000000FC099000FL});
    public static final BitSet FOLLOW_p_ExprSingle_in_pm_BlockVarDecl12360 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0020000000000000L,0x0000000000000100L});
    public static final BitSet FOLLOW_COMMA_in_pm_BlockVarDecl12365 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000100000000000L});
    public static final BitSet FOLLOW_DOLLAR_in_pm_BlockVarDecl12367 = new BitSet(new long[]{0xFFFFFFFFFFFF0000L,0xFFFFFFFFFFFFFFFFL,0x000003FF7FFFFFFFL,0x0000000000800000L});
    public static final BitSet FOLLOW_p_VarName_in_pm_BlockVarDecl12369 = new BitSet(new long[]{0x0000000000080000L,0x0000000000000000L,0x0024000000000000L,0x0000000000000100L});
    public static final BitSet FOLLOW_p_TypeDeclaration_in_pm_BlockVarDecl12371 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0024000000000000L,0x0000000000000100L});
    public static final BitSet FOLLOW_BIND_in_pm_BlockVarDecl12375 = new BitSet(new long[]{0xFFFFFFFFFFFF0000L,0xFFFFFFFFFFFFFFFFL,0x078017FF7FFFFFFFL,0x0000000FC099000FL});
    public static final BitSet FOLLOW_p_ExprSingle_in_pm_BlockVarDecl12377 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0020000000000000L,0x0000000000000100L});
    public static final BitSet FOLLOW_SEMICOLON_in_pm_BlockVarDecl12383 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_pm_Expr_in_p_BlockBody12443 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_SET_in_p_AssignmentExpr12471 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000100000000000L});
    public static final BitSet FOLLOW_DOLLAR_in_p_AssignmentExpr12475 = new BitSet(new long[]{0xFFFFFFFFFFFF0000L,0xFFFFFFFFFFFFFFFFL,0x000003FF7FFFFFFFL,0x0000000000800000L});
    public static final BitSet FOLLOW_p_VarName_in_p_AssignmentExpr12477 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0004000000000000L});
    public static final BitSet FOLLOW_BIND_in_p_AssignmentExpr12479 = new BitSet(new long[]{0xFFFFFFFFFFFF0000L,0xFFFFFFFFFFFFFFFFL,0x078017FF7FFFFFFFL,0x0000000FC099000FL});
    public static final BitSet FOLLOW_p_ExprSingle_in_p_AssignmentExpr12481 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_EXIT_in_p_ExitExpr12509 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000080000000L});
    public static final BitSet FOLLOW_RETURNING_in_p_ExitExpr12515 = new BitSet(new long[]{0xFFFFFFFFFFFF0000L,0xFFFFFFFFFFFFFFFFL,0x078017FF7FFFFFFFL,0x0000000FC099000FL});
    public static final BitSet FOLLOW_p_ExprSingle_in_p_ExitExpr12519 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_WHILE_in_p_WhileExpr12547 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000040000000000L});
    public static final BitSet FOLLOW_LPAREN_in_p_WhileExpr12551 = new BitSet(new long[]{0xFFFFFFFFFFFF0000L,0xFFFFFFFFFFFFFFFFL,0x078017FF7FFFFFFFL,0x0000000FC099000FL});
    public static final BitSet FOLLOW_p_ExprSingle_in_p_WhileExpr12553 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000080000000000L});
    public static final BitSet FOLLOW_RPAREN_in_p_WhileExpr12555 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000200000000000L});
    public static final BitSet FOLLOW_p_WhileBody_in_p_WhileExpr12557 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_p_Block_in_p_WhileBody12583 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_p_UsingClause_in_p_EvalExpr12613 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000001000000000L});
    public static final BitSet FOLLOW_EVAL_in_p_EvalExpr12618 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000200000000000L});
    public static final BitSet FOLLOW_LBRACKET_in_p_EvalExpr12622 = new BitSet(new long[]{0xFFFFFFFFFFFF0000L,0xFFFFFFFFFFFFFFFFL,0x078017FF7FFFFFFFL,0x0000000FC099000FL});
    public static final BitSet FOLLOW_p_ExprSingle_in_p_EvalExpr12624 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000400000000000L});
    public static final BitSet FOLLOW_RBRACKET_in_p_EvalExpr12626 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_USING_in_p_UsingClause12653 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000100000000000L});
    public static final BitSet FOLLOW_DOLLAR_in_p_UsingClause12658 = new BitSet(new long[]{0xFFFFFFFFFFFF0000L,0xFFFFFFFFFFFFFFFFL,0x000003FF7FFFFFFFL,0x0000000000800000L});
    public static final BitSet FOLLOW_p_VarName_in_p_UsingClause12660 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0020000000000000L});
    public static final BitSet FOLLOW_COMMA_in_p_UsingClause12663 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000100000000000L});
    public static final BitSet FOLLOW_DOLLAR_in_p_UsingClause12665 = new BitSet(new long[]{0xFFFFFFFFFFFF0000L,0xFFFFFFFFFFFFFFFFL,0x000003FF7FFFFFFFL,0x0000000000800000L});
    public static final BitSet FOLLOW_p_VarName_in_p_UsingClause12667 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0020000000000000L});
    public static final BitSet FOLLOW_SLASH_in_synpred1_XQueryParser5914 = new BitSet(new long[]{0xFFFFFFFFFFFF0000L,0xFFFFFFFFFFFFFFFFL,0x048017FF7FFFFFFFL,0x0000000F8099000FL});
    public static final BitSet FOLLOW_p_RelativePathExpr_in_synpred1_XQueryParser5916 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_p_OccurrenceIndicator_in_synpred2_XQueryParser8536 = new BitSet(new long[]{0x0000000000000002L});

}