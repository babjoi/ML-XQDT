/*
* generated by Xtext
*/

package org.oasisopen.services;

import com.google.inject.Singleton;
import com.google.inject.Inject;

import org.eclipse.xtext.*;

import org.eclipse.xtext.service.GrammarProvider;

import org.eclipse.xtext.common.services.TerminalsGrammarAccess;

@Singleton
public class RelaxngGrammarAccess implements IGrammarAccess {
	
	
	public class TopLevelElements implements IParserRuleAccess {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "TopLevel");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cDeclsAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cDeclsDeclParserRuleCall_0_0 = (RuleCall)cDeclsAssignment_0.eContents().get(0);
		private final Alternatives cAlternatives_1 = (Alternatives)cGroup.eContents().get(1);
		private final Assignment cPatternAssignment_1_0 = (Assignment)cAlternatives_1.eContents().get(0);
		private final RuleCall cPatternPatternParserRuleCall_1_0_0 = (RuleCall)cPatternAssignment_1_0.eContents().get(0);
		private final Assignment cGrammarContentAssignment_1_1 = (Assignment)cAlternatives_1.eContents().get(1);
		private final RuleCall cGrammarContentGrammarContentParserRuleCall_1_1_0 = (RuleCall)cGrammarContentAssignment_1_1.eContents().get(0);
		
		//TopLevel:
		//  decls+=Decl* (pattern=Pattern|grammarContent+=GrammarContent*);
		public ParserRule getRule() { return rule; }

		//decls+=Decl* (pattern=Pattern|grammarContent+=GrammarContent*)
		public Group getGroup() { return cGroup; }

		//decls+=Decl*
		public Assignment getDeclsAssignment_0() { return cDeclsAssignment_0; }

		//Decl
		public RuleCall getDeclsDeclParserRuleCall_0_0() { return cDeclsDeclParserRuleCall_0_0; }

		//pattern=Pattern|grammarContent+=GrammarContent*
		public Alternatives getAlternatives_1() { return cAlternatives_1; }

		//pattern=Pattern
		public Assignment getPatternAssignment_1_0() { return cPatternAssignment_1_0; }

		//Pattern
		public RuleCall getPatternPatternParserRuleCall_1_0_0() { return cPatternPatternParserRuleCall_1_0_0; }

		//grammarContent+=GrammarContent*
		public Assignment getGrammarContentAssignment_1_1() { return cGrammarContentAssignment_1_1; }

		//GrammarContent
		public RuleCall getGrammarContentGrammarContentParserRuleCall_1_1_0() { return cGrammarContentGrammarContentParserRuleCall_1_1_0; }
	}

	public class DeclElements implements IParserRuleAccess {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Decl");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cAlternatives.eContents().get(0);
		private final Keyword cNamespaceKeyword_0_0 = (Keyword)cGroup_0.eContents().get(0);
		private final Assignment cPrefixAssignment_0_1 = (Assignment)cGroup_0.eContents().get(1);
		private final RuleCall cPrefixIDTerminalRuleCall_0_1_0 = (RuleCall)cPrefixAssignment_0_1.eContents().get(0);
		private final Keyword cEqualsSignKeyword_0_2 = (Keyword)cGroup_0.eContents().get(2);
		private final Assignment cUriAssignment_0_3 = (Assignment)cGroup_0.eContents().get(3);
		private final RuleCall cUriSTRINGTerminalRuleCall_0_3_0 = (RuleCall)cUriAssignment_0_3.eContents().get(0);
		private final Group cGroup_1 = (Group)cAlternatives.eContents().get(1);
		private final Keyword cDefaultKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final Keyword cNamespaceKeyword_1_1 = (Keyword)cGroup_1.eContents().get(1);
		private final Assignment cPrefixAssignment_1_2 = (Assignment)cGroup_1.eContents().get(2);
		private final RuleCall cPrefixIDTerminalRuleCall_1_2_0 = (RuleCall)cPrefixAssignment_1_2.eContents().get(0);
		private final Keyword cEqualsSignKeyword_1_3 = (Keyword)cGroup_1.eContents().get(3);
		private final Assignment cUriAssignment_1_4 = (Assignment)cGroup_1.eContents().get(4);
		private final RuleCall cUriSTRINGTerminalRuleCall_1_4_0 = (RuleCall)cUriAssignment_1_4.eContents().get(0);
		private final Group cGroup_2 = (Group)cAlternatives.eContents().get(2);
		private final Keyword cDatatypesKeyword_2_0 = (Keyword)cGroup_2.eContents().get(0);
		private final Assignment cDatatypeIdAssignment_2_1 = (Assignment)cGroup_2.eContents().get(1);
		private final RuleCall cDatatypeIdIDTerminalRuleCall_2_1_0 = (RuleCall)cDatatypeIdAssignment_2_1.eContents().get(0);
		private final Keyword cEqualsSignKeyword_2_2 = (Keyword)cGroup_2.eContents().get(2);
		private final Assignment cValueAssignment_2_3 = (Assignment)cGroup_2.eContents().get(3);
		private final RuleCall cValueSTRINGTerminalRuleCall_2_3_0 = (RuleCall)cValueAssignment_2_3.eContents().get(0);
		
		//Decl:
		//  "namespace" prefix=ID "=" uri=STRING|"default" "namespace" prefix=ID "=" uri=STRING|
		//  "datatypes" datatypeId=ID "=" value=STRING;
		public ParserRule getRule() { return rule; }

		//"namespace" prefix=ID "=" uri=STRING|"default" "namespace" prefix=ID "=" uri=STRING|
		//"datatypes" datatypeId=ID "=" value=STRING
		public Alternatives getAlternatives() { return cAlternatives; }

		//"namespace" prefix=ID "=" uri=STRING
		public Group getGroup_0() { return cGroup_0; }

		//"namespace"
		public Keyword getNamespaceKeyword_0_0() { return cNamespaceKeyword_0_0; }

		//prefix=ID
		public Assignment getPrefixAssignment_0_1() { return cPrefixAssignment_0_1; }

		//ID
		public RuleCall getPrefixIDTerminalRuleCall_0_1_0() { return cPrefixIDTerminalRuleCall_0_1_0; }

		//"="
		public Keyword getEqualsSignKeyword_0_2() { return cEqualsSignKeyword_0_2; }

		//uri=STRING
		public Assignment getUriAssignment_0_3() { return cUriAssignment_0_3; }

		//STRING
		public RuleCall getUriSTRINGTerminalRuleCall_0_3_0() { return cUriSTRINGTerminalRuleCall_0_3_0; }

		//"default" "namespace" prefix=ID "=" uri=STRING
		public Group getGroup_1() { return cGroup_1; }

		//"default"
		public Keyword getDefaultKeyword_1_0() { return cDefaultKeyword_1_0; }

		//"namespace"
		public Keyword getNamespaceKeyword_1_1() { return cNamespaceKeyword_1_1; }

		//prefix=ID
		public Assignment getPrefixAssignment_1_2() { return cPrefixAssignment_1_2; }

		//ID
		public RuleCall getPrefixIDTerminalRuleCall_1_2_0() { return cPrefixIDTerminalRuleCall_1_2_0; }

		//"="
		public Keyword getEqualsSignKeyword_1_3() { return cEqualsSignKeyword_1_3; }

		//uri=STRING
		public Assignment getUriAssignment_1_4() { return cUriAssignment_1_4; }

		//STRING
		public RuleCall getUriSTRINGTerminalRuleCall_1_4_0() { return cUriSTRINGTerminalRuleCall_1_4_0; }

		//"datatypes" datatypeId=ID "=" value=STRING
		public Group getGroup_2() { return cGroup_2; }

		//"datatypes"
		public Keyword getDatatypesKeyword_2_0() { return cDatatypesKeyword_2_0; }

		//datatypeId=ID
		public Assignment getDatatypeIdAssignment_2_1() { return cDatatypeIdAssignment_2_1; }

		//ID
		public RuleCall getDatatypeIdIDTerminalRuleCall_2_1_0() { return cDatatypeIdIDTerminalRuleCall_2_1_0; }

		//"="
		public Keyword getEqualsSignKeyword_2_2() { return cEqualsSignKeyword_2_2; }

		//value=STRING
		public Assignment getValueAssignment_2_3() { return cValueAssignment_2_3; }

		//STRING
		public RuleCall getValueSTRINGTerminalRuleCall_2_3_0() { return cValueSTRINGTerminalRuleCall_2_3_0; }
	}

	public class PatternElements implements IParserRuleAccess {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Pattern");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Assignment cValAssignment_0 = (Assignment)cAlternatives.eContents().get(0);
		private final Alternatives cValAlternatives_0_0 = (Alternatives)cValAssignment_0.eContents().get(0);
		private final RuleCall cValElementParserRuleCall_0_0_0 = (RuleCall)cValAlternatives_0_0.eContents().get(0);
		private final RuleCall cValAttributeParserRuleCall_0_0_1 = (RuleCall)cValAlternatives_0_0.eContents().get(1);
		private final Group cGroup_1 = (Group)cAlternatives.eContents().get(1);
		private final Keyword cListKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_1_1 = (Keyword)cGroup_1.eContents().get(1);
		private final Assignment cPatternAssignment_1_2 = (Assignment)cGroup_1.eContents().get(2);
		private final RuleCall cPatternPatternParserRuleCall_1_2_0 = (RuleCall)cPatternAssignment_1_2.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_1_3 = (Keyword)cGroup_1.eContents().get(3);
		private final Group cGroup_2 = (Group)cAlternatives.eContents().get(2);
		private final Keyword cMixedKeyword_2_0 = (Keyword)cGroup_2.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_2_1 = (Keyword)cGroup_2.eContents().get(1);
		private final Assignment cPatternAssignment_2_2 = (Assignment)cGroup_2.eContents().get(2);
		private final RuleCall cPatternPatternParserRuleCall_2_2_0 = (RuleCall)cPatternAssignment_2_2.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_2_3 = (Keyword)cGroup_2.eContents().get(3);
		private final Group cGroup_3 = (Group)cAlternatives.eContents().get(3);
		private final RuleCall cIDTerminalRuleCall_3_0 = (RuleCall)cGroup_3.eContents().get(0);
		private final Keyword cEqualsSignKeyword_3_1 = (Keyword)cGroup_3.eContents().get(1);
		private final Group cGroup_4 = (Group)cAlternatives.eContents().get(4);
		private final Keyword cParentKeyword_4_0 = (Keyword)cGroup_4.eContents().get(0);
		private final RuleCall cIDTerminalRuleCall_4_1 = (RuleCall)cGroup_4.eContents().get(1);
		private final Keyword cEmptyKeyword_5 = (Keyword)cAlternatives.eContents().get(5);
		private final Keyword cTextKeyword_6 = (Keyword)cAlternatives.eContents().get(6);
		private final Keyword cVerticalLineKeyword_7 = (Keyword)cAlternatives.eContents().get(7);
		private final Assignment cValueAssignment_8 = (Assignment)cAlternatives.eContents().get(8);
		private final RuleCall cValueDataTypeValueParserRuleCall_8_0 = (RuleCall)cValueAssignment_8.eContents().get(0);
		private final Group cGroup_9 = (Group)cAlternatives.eContents().get(9);
		private final RuleCall cDataTypeNameParserRuleCall_9_0 = (RuleCall)cGroup_9.eContents().get(0);
		private final Group cGroup_9_1 = (Group)cGroup_9.eContents().get(1);
		private final Keyword cLeftCurlyBracketKeyword_9_1_0 = (Keyword)cGroup_9_1.eContents().get(0);
		private final Assignment cParamAssignment_9_1_1 = (Assignment)cGroup_9_1.eContents().get(1);
		private final RuleCall cParamParamParserRuleCall_9_1_1_0 = (RuleCall)cParamAssignment_9_1_1.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_9_1_2 = (Keyword)cGroup_9_1.eContents().get(2);
		private final Assignment cExceptPatternAssignment_9_2 = (Assignment)cGroup_9.eContents().get(2);
		private final RuleCall cExceptPatternExceptPatternParserRuleCall_9_2_0 = (RuleCall)cExceptPatternAssignment_9_2.eContents().get(0);
		private final Keyword cNotAllowedKeyword_10 = (Keyword)cAlternatives.eContents().get(10);
		private final Group cGroup_11 = (Group)cAlternatives.eContents().get(11);
		private final Keyword cExternalKeyword_11_0 = (Keyword)cGroup_11.eContents().get(0);
		private final Assignment cUriAssignment_11_1 = (Assignment)cGroup_11.eContents().get(1);
		private final RuleCall cUriAnyURILiteralParserRuleCall_11_1_0 = (RuleCall)cUriAssignment_11_1.eContents().get(0);
		private final Assignment cInheritAssignment_11_2 = (Assignment)cGroup_11.eContents().get(2);
		private final RuleCall cInheritInheritParserRuleCall_11_2_0 = (RuleCall)cInheritAssignment_11_2.eContents().get(0);
		private final Group cGroup_12 = (Group)cAlternatives.eContents().get(12);
		private final Keyword cGrammarKeyword_12_0 = (Keyword)cGroup_12.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_12_1 = (Keyword)cGroup_12.eContents().get(1);
		private final Assignment cGrammarContentAssignment_12_2 = (Assignment)cGroup_12.eContents().get(2);
		private final RuleCall cGrammarContentGrammarContentParserRuleCall_12_2_0 = (RuleCall)cGrammarContentAssignment_12_2.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_12_3 = (Keyword)cGroup_12.eContents().get(3);
		private final Group cGroup_13 = (Group)cAlternatives.eContents().get(13);
		private final Keyword cLeftParenthesisKeyword_13_0 = (Keyword)cGroup_13.eContents().get(0);
		private final Assignment cGroupAssignment_13_1 = (Assignment)cGroup_13.eContents().get(1);
		private final RuleCall cGroupPatternParserRuleCall_13_1_0 = (RuleCall)cGroupAssignment_13_1.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_13_2 = (Keyword)cGroup_13.eContents().get(2);
		private final Assignment cContinueAssignment_13_3 = (Assignment)cGroup_13.eContents().get(3);
		private final Keyword cContinueCommaKeyword_13_3_0 = (Keyword)cContinueAssignment_13_3.eContents().get(0);
		
		//Pattern:
		//  val=( Element | Attribute )+|"list" "{" pattern+=Pattern* "}"|"mixed" "{" pattern+=
		//  Pattern* "}"|ID "="?|"parent" ID|"empty"|"text"|"|"|value=DataTypeValue+|
		//  DataTypeName ("{" param+=Param* "}")* exceptPattern=ExceptPattern*|"notAllowed"|
		//  "external" uri=AnyURILiteral inherit=Inherit*|"grammar" "{" grammarContent+=
		//  GrammarContent* "}"|"(" group+=Pattern* ")" continue=","?;
		public ParserRule getRule() { return rule; }

		//val=( Element | Attribute )+|"list" "{" pattern+=Pattern* "}"|"mixed" "{" pattern+=
		//Pattern* "}"|ID "="?|"parent" ID|"empty"|"text"|"|"|value=DataTypeValue+|
		//DataTypeName ("{" param+=Param* "}")* exceptPattern=ExceptPattern*|"notAllowed"|
		//"external" uri=AnyURILiteral inherit=Inherit*|"grammar" "{" grammarContent+=
		//GrammarContent* "}"|"(" group+=Pattern* ")" continue=","?
		public Alternatives getAlternatives() { return cAlternatives; }

		//val=( Element | Attribute )+
		public Assignment getValAssignment_0() { return cValAssignment_0; }

		//Element|Attribute
		public Alternatives getValAlternatives_0_0() { return cValAlternatives_0_0; }

		//Element
		public RuleCall getValElementParserRuleCall_0_0_0() { return cValElementParserRuleCall_0_0_0; }

		//Attribute
		public RuleCall getValAttributeParserRuleCall_0_0_1() { return cValAttributeParserRuleCall_0_0_1; }

		//"list" "{" pattern+=Pattern* "}"
		public Group getGroup_1() { return cGroup_1; }

		//"list"
		public Keyword getListKeyword_1_0() { return cListKeyword_1_0; }

		//"{"
		public Keyword getLeftCurlyBracketKeyword_1_1() { return cLeftCurlyBracketKeyword_1_1; }

		//pattern+=Pattern*
		public Assignment getPatternAssignment_1_2() { return cPatternAssignment_1_2; }

		//Pattern
		public RuleCall getPatternPatternParserRuleCall_1_2_0() { return cPatternPatternParserRuleCall_1_2_0; }

		//"}"
		public Keyword getRightCurlyBracketKeyword_1_3() { return cRightCurlyBracketKeyword_1_3; }

		//"mixed" "{" pattern+=Pattern* "}"
		public Group getGroup_2() { return cGroup_2; }

		//"mixed"
		public Keyword getMixedKeyword_2_0() { return cMixedKeyword_2_0; }

		//"{"
		public Keyword getLeftCurlyBracketKeyword_2_1() { return cLeftCurlyBracketKeyword_2_1; }

		//pattern+=Pattern*
		public Assignment getPatternAssignment_2_2() { return cPatternAssignment_2_2; }

		//Pattern
		public RuleCall getPatternPatternParserRuleCall_2_2_0() { return cPatternPatternParserRuleCall_2_2_0; }

		//"}"
		public Keyword getRightCurlyBracketKeyword_2_3() { return cRightCurlyBracketKeyword_2_3; }

		//ID "="?
		public Group getGroup_3() { return cGroup_3; }

		//ID
		public RuleCall getIDTerminalRuleCall_3_0() { return cIDTerminalRuleCall_3_0; }

		//"="?
		public Keyword getEqualsSignKeyword_3_1() { return cEqualsSignKeyword_3_1; }

		//"parent" ID
		public Group getGroup_4() { return cGroup_4; }

		//"parent"
		public Keyword getParentKeyword_4_0() { return cParentKeyword_4_0; }

		//ID
		public RuleCall getIDTerminalRuleCall_4_1() { return cIDTerminalRuleCall_4_1; }

		//"empty"
		public Keyword getEmptyKeyword_5() { return cEmptyKeyword_5; }

		//"text"
		public Keyword getTextKeyword_6() { return cTextKeyword_6; }

		//"|"
		public Keyword getVerticalLineKeyword_7() { return cVerticalLineKeyword_7; }

		//value=DataTypeValue+
		public Assignment getValueAssignment_8() { return cValueAssignment_8; }

		//DataTypeValue
		public RuleCall getValueDataTypeValueParserRuleCall_8_0() { return cValueDataTypeValueParserRuleCall_8_0; }

		//DataTypeName ("{" param+=Param* "}")* exceptPattern=ExceptPattern*
		public Group getGroup_9() { return cGroup_9; }

		//DataTypeName
		public RuleCall getDataTypeNameParserRuleCall_9_0() { return cDataTypeNameParserRuleCall_9_0; }

		//("{" param+=Param* "}")*
		public Group getGroup_9_1() { return cGroup_9_1; }

		//"{"
		public Keyword getLeftCurlyBracketKeyword_9_1_0() { return cLeftCurlyBracketKeyword_9_1_0; }

		//param+=Param*
		public Assignment getParamAssignment_9_1_1() { return cParamAssignment_9_1_1; }

		//Param
		public RuleCall getParamParamParserRuleCall_9_1_1_0() { return cParamParamParserRuleCall_9_1_1_0; }

		//"}"
		public Keyword getRightCurlyBracketKeyword_9_1_2() { return cRightCurlyBracketKeyword_9_1_2; }

		//exceptPattern=ExceptPattern*
		public Assignment getExceptPatternAssignment_9_2() { return cExceptPatternAssignment_9_2; }

		//ExceptPattern
		public RuleCall getExceptPatternExceptPatternParserRuleCall_9_2_0() { return cExceptPatternExceptPatternParserRuleCall_9_2_0; }

		//"notAllowed"
		public Keyword getNotAllowedKeyword_10() { return cNotAllowedKeyword_10; }

		//"external" uri=AnyURILiteral inherit=Inherit*
		public Group getGroup_11() { return cGroup_11; }

		//"external"
		public Keyword getExternalKeyword_11_0() { return cExternalKeyword_11_0; }

		//uri=AnyURILiteral
		public Assignment getUriAssignment_11_1() { return cUriAssignment_11_1; }

		//AnyURILiteral
		public RuleCall getUriAnyURILiteralParserRuleCall_11_1_0() { return cUriAnyURILiteralParserRuleCall_11_1_0; }

		//inherit=Inherit*
		public Assignment getInheritAssignment_11_2() { return cInheritAssignment_11_2; }

		//Inherit
		public RuleCall getInheritInheritParserRuleCall_11_2_0() { return cInheritInheritParserRuleCall_11_2_0; }

		//"grammar" "{" grammarContent+=GrammarContent* "}"
		public Group getGroup_12() { return cGroup_12; }

		//"grammar"
		public Keyword getGrammarKeyword_12_0() { return cGrammarKeyword_12_0; }

		//"{"
		public Keyword getLeftCurlyBracketKeyword_12_1() { return cLeftCurlyBracketKeyword_12_1; }

		//grammarContent+=GrammarContent*
		public Assignment getGrammarContentAssignment_12_2() { return cGrammarContentAssignment_12_2; }

		//GrammarContent
		public RuleCall getGrammarContentGrammarContentParserRuleCall_12_2_0() { return cGrammarContentGrammarContentParserRuleCall_12_2_0; }

		//"}"
		public Keyword getRightCurlyBracketKeyword_12_3() { return cRightCurlyBracketKeyword_12_3; }

		//"(" group+=Pattern* ")" continue=","?
		public Group getGroup_13() { return cGroup_13; }

		//"("
		public Keyword getLeftParenthesisKeyword_13_0() { return cLeftParenthesisKeyword_13_0; }

		//group+=Pattern*
		public Assignment getGroupAssignment_13_1() { return cGroupAssignment_13_1; }

		//Pattern
		public RuleCall getGroupPatternParserRuleCall_13_1_0() { return cGroupPatternParserRuleCall_13_1_0; }

		//")"
		public Keyword getRightParenthesisKeyword_13_2() { return cRightParenthesisKeyword_13_2; }

		//continue=","?
		public Assignment getContinueAssignment_13_3() { return cContinueAssignment_13_3; }

		//","
		public Keyword getContinueCommaKeyword_13_3_0() { return cContinueCommaKeyword_13_3_0; }
	}

	public class ElementElements implements IParserRuleAccess {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Element");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cElementKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameNameClassParserRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cPatternAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cPatternPatternParserRuleCall_3_0 = (RuleCall)cPatternAssignment_3.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final Assignment cCardinalityAssignment_5 = (Assignment)cGroup.eContents().get(5);
		private final Alternatives cCardinalityAlternatives_5_0 = (Alternatives)cCardinalityAssignment_5.eContents().get(0);
		private final Keyword cCardinalityQuestionMarkKeyword_5_0_0 = (Keyword)cCardinalityAlternatives_5_0.eContents().get(0);
		private final Keyword cCardinalityPlusSignKeyword_5_0_1 = (Keyword)cCardinalityAlternatives_5_0.eContents().get(1);
		private final Keyword cCardinalityAsteriskKeyword_5_0_2 = (Keyword)cCardinalityAlternatives_5_0.eContents().get(2);
		private final Assignment cContinueAssignment_6 = (Assignment)cGroup.eContents().get(6);
		private final Alternatives cContinueAlternatives_6_0 = (Alternatives)cContinueAssignment_6.eContents().get(0);
		private final Keyword cContinueCommaKeyword_6_0_0 = (Keyword)cContinueAlternatives_6_0.eContents().get(0);
		private final Keyword cContinueAmpersandKeyword_6_0_1 = (Keyword)cContinueAlternatives_6_0.eContents().get(1);
		private final Keyword cContinueVerticalLineKeyword_6_0_2 = (Keyword)cContinueAlternatives_6_0.eContents().get(2);
		
		//Element:
		//  "element" name=NameClass "{" pattern+=Pattern* "}" cardinality=( "?" | "+" | "*" )? continue
		//  =( "," | "&" | "|" )?;
		public ParserRule getRule() { return rule; }

		//"element" name=NameClass "{" pattern+=Pattern* "}" cardinality=( "?" | "+" | "*" )? continue
		//=( "," | "&" | "|" )?
		public Group getGroup() { return cGroup; }

		//"element"
		public Keyword getElementKeyword_0() { return cElementKeyword_0; }

		//name=NameClass
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }

		//NameClass
		public RuleCall getNameNameClassParserRuleCall_1_0() { return cNameNameClassParserRuleCall_1_0; }

		//"{"
		public Keyword getLeftCurlyBracketKeyword_2() { return cLeftCurlyBracketKeyword_2; }

		//pattern+=Pattern*
		public Assignment getPatternAssignment_3() { return cPatternAssignment_3; }

		//Pattern
		public RuleCall getPatternPatternParserRuleCall_3_0() { return cPatternPatternParserRuleCall_3_0; }

		//"}"
		public Keyword getRightCurlyBracketKeyword_4() { return cRightCurlyBracketKeyword_4; }

		//cardinality=( "?" | "+" | "*" )?
		public Assignment getCardinalityAssignment_5() { return cCardinalityAssignment_5; }

		//"?"|"+"|"*"
		public Alternatives getCardinalityAlternatives_5_0() { return cCardinalityAlternatives_5_0; }

		//"?"
		public Keyword getCardinalityQuestionMarkKeyword_5_0_0() { return cCardinalityQuestionMarkKeyword_5_0_0; }

		//"+"
		public Keyword getCardinalityPlusSignKeyword_5_0_1() { return cCardinalityPlusSignKeyword_5_0_1; }

		//"*"
		public Keyword getCardinalityAsteriskKeyword_5_0_2() { return cCardinalityAsteriskKeyword_5_0_2; }

		//continue=( "," | "&" | "|" )?
		public Assignment getContinueAssignment_6() { return cContinueAssignment_6; }

		//","|"&"|"|"
		public Alternatives getContinueAlternatives_6_0() { return cContinueAlternatives_6_0; }

		//","
		public Keyword getContinueCommaKeyword_6_0_0() { return cContinueCommaKeyword_6_0_0; }

		//"&"
		public Keyword getContinueAmpersandKeyword_6_0_1() { return cContinueAmpersandKeyword_6_0_1; }

		//"|"
		public Keyword getContinueVerticalLineKeyword_6_0_2() { return cContinueVerticalLineKeyword_6_0_2; }
	}

	public class AttributeElements implements IParserRuleAccess {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Attribute");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cAttributeKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameNameClassParserRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cPatternAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cPatternPatternParserRuleCall_3_0 = (RuleCall)cPatternAssignment_3.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final Assignment cCardinalityAssignment_5 = (Assignment)cGroup.eContents().get(5);
		private final Keyword cCardinalityQuestionMarkKeyword_5_0 = (Keyword)cCardinalityAssignment_5.eContents().get(0);
		private final Assignment cContinueAssignment_6 = (Assignment)cGroup.eContents().get(6);
		private final Alternatives cContinueAlternatives_6_0 = (Alternatives)cContinueAssignment_6.eContents().get(0);
		private final Keyword cContinueCommaKeyword_6_0_0 = (Keyword)cContinueAlternatives_6_0.eContents().get(0);
		private final Keyword cContinueVerticalLineKeyword_6_0_1 = (Keyword)cContinueAlternatives_6_0.eContents().get(1);
		
		//Attribute:
		//  "attribute" name=NameClass "{" pattern+=Pattern* "}" cardinality="?"? continue=( "," |
		//  "|" )?;
		public ParserRule getRule() { return rule; }

		//"attribute" name=NameClass "{" pattern+=Pattern* "}" cardinality="?"? continue=( "," |
		//"|" )?
		public Group getGroup() { return cGroup; }

		//"attribute"
		public Keyword getAttributeKeyword_0() { return cAttributeKeyword_0; }

		//name=NameClass
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }

		//NameClass
		public RuleCall getNameNameClassParserRuleCall_1_0() { return cNameNameClassParserRuleCall_1_0; }

		//"{"
		public Keyword getLeftCurlyBracketKeyword_2() { return cLeftCurlyBracketKeyword_2; }

		//pattern+=Pattern*
		public Assignment getPatternAssignment_3() { return cPatternAssignment_3; }

		//Pattern
		public RuleCall getPatternPatternParserRuleCall_3_0() { return cPatternPatternParserRuleCall_3_0; }

		//"}"
		public Keyword getRightCurlyBracketKeyword_4() { return cRightCurlyBracketKeyword_4; }

		//cardinality="?"?
		public Assignment getCardinalityAssignment_5() { return cCardinalityAssignment_5; }

		//"?"
		public Keyword getCardinalityQuestionMarkKeyword_5_0() { return cCardinalityQuestionMarkKeyword_5_0; }

		//continue=( "," | "|" )?
		public Assignment getContinueAssignment_6() { return cContinueAssignment_6; }

		//","|"|"
		public Alternatives getContinueAlternatives_6_0() { return cContinueAlternatives_6_0; }

		//","
		public Keyword getContinueCommaKeyword_6_0_0() { return cContinueCommaKeyword_6_0_0; }

		//"|"
		public Keyword getContinueVerticalLineKeyword_6_0_1() { return cContinueVerticalLineKeyword_6_0_1; }
	}

	public class ParamElements implements IParserRuleAccess {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Param");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cIdentifierOrKeyWordParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Keyword cEqualsSignKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cParmValueAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cParmValueLiteralParserRuleCall_2_0 = (RuleCall)cParmValueAssignment_2.eContents().get(0);
		
		//Param:
		//  IdentifierOrKeyWord "=" parmValue=Literal;
		public ParserRule getRule() { return rule; }

		//IdentifierOrKeyWord "=" parmValue=Literal
		public Group getGroup() { return cGroup; }

		//IdentifierOrKeyWord
		public RuleCall getIdentifierOrKeyWordParserRuleCall_0() { return cIdentifierOrKeyWordParserRuleCall_0; }

		//"="
		public Keyword getEqualsSignKeyword_1() { return cEqualsSignKeyword_1; }

		//parmValue=Literal
		public Assignment getParmValueAssignment_2() { return cParmValueAssignment_2; }

		//Literal
		public RuleCall getParmValueLiteralParserRuleCall_2_0() { return cParmValueLiteralParserRuleCall_2_0; }
	}

	public class ExceptPatternElements implements IParserRuleAccess {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ExceptPattern");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cHyphenMinusKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final RuleCall cPatternParserRuleCall_1 = (RuleCall)cGroup.eContents().get(1);
		
		//ExceptPattern:
		//  "-" Pattern;
		public ParserRule getRule() { return rule; }

		//"-" Pattern
		public Group getGroup() { return cGroup; }

		//"-"
		public Keyword getHyphenMinusKeyword_0() { return cHyphenMinusKeyword_0; }

		//Pattern
		public RuleCall getPatternParserRuleCall_1() { return cPatternParserRuleCall_1; }
	}

	public class GrammarContentElements implements IParserRuleAccess {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "GrammarContent");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cStartParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cDefineParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final Group cGroup_2 = (Group)cAlternatives.eContents().get(2);
		private final Keyword cDivKeyword_2_0 = (Keyword)cGroup_2.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_2_1 = (Keyword)cGroup_2.eContents().get(1);
		private final Assignment cGrammarContenGrammarContentAssignment_2_2 = (Assignment)cGroup_2.eContents().get(2);
		private final RuleCall cGrammarContenGrammarContentGrammarContentParserRuleCall_2_2_0 = (RuleCall)cGrammarContenGrammarContentAssignment_2_2.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_2_3 = (Keyword)cGroup_2.eContents().get(3);
		private final Group cGroup_3 = (Group)cAlternatives.eContents().get(3);
		private final Keyword cIncludeKeyword_3_0 = (Keyword)cGroup_3.eContents().get(0);
		private final RuleCall cAnyURILiteralParserRuleCall_3_1 = (RuleCall)cGroup_3.eContents().get(1);
		private final Assignment cInheritAssignment_3_2 = (Assignment)cGroup_3.eContents().get(2);
		private final RuleCall cInheritInheritParserRuleCall_3_2_0 = (RuleCall)cInheritAssignment_3_2.eContents().get(0);
		private final Group cGroup_3_3 = (Group)cGroup_3.eContents().get(3);
		private final Keyword cLeftCurlyBracketKeyword_3_3_0 = (Keyword)cGroup_3_3.eContents().get(0);
		private final Assignment cIncludeContentAssignment_3_3_1 = (Assignment)cGroup_3_3.eContents().get(1);
		private final RuleCall cIncludeContentIncludeContentParserRuleCall_3_3_1_0 = (RuleCall)cIncludeContentAssignment_3_3_1.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_3_3_2 = (Keyword)cGroup_3_3.eContents().get(2);
		
		//GrammarContent:
		//  Start|Define|"div" "{" grammarContenGrammarContent+=GrammarContent* "}"|"include"
		//  AnyURILiteral inherit=Inherit ("{" includeContent+=IncludeContent* "}");
		public ParserRule getRule() { return rule; }

		//Start|Define|"div" "{" grammarContenGrammarContent+=GrammarContent* "}"|"include"
		//AnyURILiteral inherit=Inherit ("{" includeContent+=IncludeContent* "}")
		public Alternatives getAlternatives() { return cAlternatives; }

		//Start
		public RuleCall getStartParserRuleCall_0() { return cStartParserRuleCall_0; }

		//Define
		public RuleCall getDefineParserRuleCall_1() { return cDefineParserRuleCall_1; }

		//"div" "{" grammarContenGrammarContent+=GrammarContent* "}"
		public Group getGroup_2() { return cGroup_2; }

		//"div"
		public Keyword getDivKeyword_2_0() { return cDivKeyword_2_0; }

		//"{"
		public Keyword getLeftCurlyBracketKeyword_2_1() { return cLeftCurlyBracketKeyword_2_1; }

		//grammarContenGrammarContent+=GrammarContent*
		public Assignment getGrammarContenGrammarContentAssignment_2_2() { return cGrammarContenGrammarContentAssignment_2_2; }

		//GrammarContent
		public RuleCall getGrammarContenGrammarContentGrammarContentParserRuleCall_2_2_0() { return cGrammarContenGrammarContentGrammarContentParserRuleCall_2_2_0; }

		//"}"
		public Keyword getRightCurlyBracketKeyword_2_3() { return cRightCurlyBracketKeyword_2_3; }

		//"include" AnyURILiteral inherit=Inherit ("{" includeContent+=IncludeContent* "}")
		public Group getGroup_3() { return cGroup_3; }

		//"include"
		public Keyword getIncludeKeyword_3_0() { return cIncludeKeyword_3_0; }

		//AnyURILiteral
		public RuleCall getAnyURILiteralParserRuleCall_3_1() { return cAnyURILiteralParserRuleCall_3_1; }

		//inherit=Inherit
		public Assignment getInheritAssignment_3_2() { return cInheritAssignment_3_2; }

		//Inherit
		public RuleCall getInheritInheritParserRuleCall_3_2_0() { return cInheritInheritParserRuleCall_3_2_0; }

		//"{" includeContent+=IncludeContent* "}"
		public Group getGroup_3_3() { return cGroup_3_3; }

		//"{"
		public Keyword getLeftCurlyBracketKeyword_3_3_0() { return cLeftCurlyBracketKeyword_3_3_0; }

		//includeContent+=IncludeContent*
		public Assignment getIncludeContentAssignment_3_3_1() { return cIncludeContentAssignment_3_3_1; }

		//IncludeContent
		public RuleCall getIncludeContentIncludeContentParserRuleCall_3_3_1_0() { return cIncludeContentIncludeContentParserRuleCall_3_3_1_0; }

		//"}"
		public Keyword getRightCurlyBracketKeyword_3_3_2() { return cRightCurlyBracketKeyword_3_3_2; }
	}

	public class IncludeContentElements implements IParserRuleAccess {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "IncludeContent");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cDefineParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cStartParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final Group cGroup_2 = (Group)cAlternatives.eContents().get(2);
		private final Keyword cDivKeyword_2_0 = (Keyword)cGroup_2.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_2_1 = (Keyword)cGroup_2.eContents().get(1);
		private final Assignment cIncludeGrammarContentAssignment_2_2 = (Assignment)cGroup_2.eContents().get(2);
		private final RuleCall cIncludeGrammarContentGrammarContentParserRuleCall_2_2_0 = (RuleCall)cIncludeGrammarContentAssignment_2_2.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_2_3 = (Keyword)cGroup_2.eContents().get(3);
		
		//IncludeContent:
		//  Define|Start|"div" "{" includeGrammarContent+=GrammarContent* "}";
		public ParserRule getRule() { return rule; }

		//Define|Start|"div" "{" includeGrammarContent+=GrammarContent* "}"
		public Alternatives getAlternatives() { return cAlternatives; }

		//Define
		public RuleCall getDefineParserRuleCall_0() { return cDefineParserRuleCall_0; }

		//Start
		public RuleCall getStartParserRuleCall_1() { return cStartParserRuleCall_1; }

		//"div" "{" includeGrammarContent+=GrammarContent* "}"
		public Group getGroup_2() { return cGroup_2; }

		//"div"
		public Keyword getDivKeyword_2_0() { return cDivKeyword_2_0; }

		//"{"
		public Keyword getLeftCurlyBracketKeyword_2_1() { return cLeftCurlyBracketKeyword_2_1; }

		//includeGrammarContent+=GrammarContent*
		public Assignment getIncludeGrammarContentAssignment_2_2() { return cIncludeGrammarContentAssignment_2_2; }

		//GrammarContent
		public RuleCall getIncludeGrammarContentGrammarContentParserRuleCall_2_2_0() { return cIncludeGrammarContentGrammarContentParserRuleCall_2_2_0; }

		//"}"
		public Keyword getRightCurlyBracketKeyword_2_3() { return cRightCurlyBracketKeyword_2_3; }
	}

	public class StartElements implements IParserRuleAccess {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Start");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cStartKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Alternatives cAlternatives_1 = (Alternatives)cGroup.eContents().get(1);
		private final Keyword cEqualsSignKeyword_1_0 = (Keyword)cAlternatives_1.eContents().get(0);
		private final Keyword cVerticalLineEqualsSignKeyword_1_1 = (Keyword)cAlternatives_1.eContents().get(1);
		private final Keyword cAmpersandEqualsSignKeyword_1_2 = (Keyword)cAlternatives_1.eContents().get(2);
		private final Alternatives cAlternatives_2 = (Alternatives)cGroup.eContents().get(2);
		private final RuleCall cIDTerminalRuleCall_2_0 = (RuleCall)cAlternatives_2.eContents().get(0);
		private final Assignment cPatternAssignment_2_1 = (Assignment)cAlternatives_2.eContents().get(1);
		private final RuleCall cPatternPatternParserRuleCall_2_1_0 = (RuleCall)cPatternAssignment_2_1.eContents().get(0);
		
		//Start:
		//  "start" ("="|"|="|"&=") (ID|pattern=Pattern);
		public ParserRule getRule() { return rule; }

		//"start" ("="|"|="|"&=") (ID|pattern=Pattern)
		public Group getGroup() { return cGroup; }

		//"start"
		public Keyword getStartKeyword_0() { return cStartKeyword_0; }

		//"="|"|="|"&="
		public Alternatives getAlternatives_1() { return cAlternatives_1; }

		//"="
		public Keyword getEqualsSignKeyword_1_0() { return cEqualsSignKeyword_1_0; }

		//"|="
		public Keyword getVerticalLineEqualsSignKeyword_1_1() { return cVerticalLineEqualsSignKeyword_1_1; }

		//"&="
		public Keyword getAmpersandEqualsSignKeyword_1_2() { return cAmpersandEqualsSignKeyword_1_2; }

		//ID|pattern=Pattern
		public Alternatives getAlternatives_2() { return cAlternatives_2; }

		//ID
		public RuleCall getIDTerminalRuleCall_2_0() { return cIDTerminalRuleCall_2_0; }

		//pattern=Pattern
		public Assignment getPatternAssignment_2_1() { return cPatternAssignment_2_1; }

		//Pattern
		public RuleCall getPatternPatternParserRuleCall_2_1_0() { return cPatternPatternParserRuleCall_2_1_0; }
	}

	public class DefineElements implements IParserRuleAccess {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Define");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cIDTerminalRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Alternatives cAlternatives_1 = (Alternatives)cGroup.eContents().get(1);
		private final Keyword cEqualsSignKeyword_1_0 = (Keyword)cAlternatives_1.eContents().get(0);
		private final Keyword cVerticalLineEqualsSignKeyword_1_1 = (Keyword)cAlternatives_1.eContents().get(1);
		private final Keyword cAmpersandEqualsSignKeyword_1_2 = (Keyword)cAlternatives_1.eContents().get(2);
		private final Assignment cPatternAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cPatternPatternParserRuleCall_2_0 = (RuleCall)cPatternAssignment_2.eContents().get(0);
		
		//Define:
		//  ID ("="|"|="|"&=") pattern=Pattern;
		public ParserRule getRule() { return rule; }

		//ID ("="|"|="|"&=") pattern=Pattern
		public Group getGroup() { return cGroup; }

		//ID
		public RuleCall getIDTerminalRuleCall_0() { return cIDTerminalRuleCall_0; }

		//"="|"|="|"&="
		public Alternatives getAlternatives_1() { return cAlternatives_1; }

		//"="
		public Keyword getEqualsSignKeyword_1_0() { return cEqualsSignKeyword_1_0; }

		//"|="
		public Keyword getVerticalLineEqualsSignKeyword_1_1() { return cVerticalLineEqualsSignKeyword_1_1; }

		//"&="
		public Keyword getAmpersandEqualsSignKeyword_1_2() { return cAmpersandEqualsSignKeyword_1_2; }

		//pattern=Pattern
		public Assignment getPatternAssignment_2() { return cPatternAssignment_2; }

		//Pattern
		public RuleCall getPatternPatternParserRuleCall_2_0() { return cPatternPatternParserRuleCall_2_0; }
	}

	public class NameElements implements IParserRuleAccess {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Name");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cIdentifierOrKeyWordParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cCNameParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//Name:
		//  IdentifierOrKeyWord|CName;
		public ParserRule getRule() { return rule; }

		//IdentifierOrKeyWord|CName
		public Alternatives getAlternatives() { return cAlternatives; }

		//IdentifierOrKeyWord
		public RuleCall getIdentifierOrKeyWordParserRuleCall_0() { return cIdentifierOrKeyWordParserRuleCall_0; }

		//CName
		public RuleCall getCNameParserRuleCall_1() { return cCNameParserRuleCall_1; }
	}

	public class ExceptNameClassElements implements IParserRuleAccess {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ExceptNameClass");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cHyphenMinusKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final RuleCall cNameClassParserRuleCall_1 = (RuleCall)cGroup.eContents().get(1);
		
		//ExceptNameClass:
		//  "-" NameClass;
		public ParserRule getRule() { return rule; }

		//"-" NameClass
		public Group getGroup() { return cGroup; }

		//"-"
		public Keyword getHyphenMinusKeyword_0() { return cHyphenMinusKeyword_0; }

		//NameClass
		public RuleCall getNameClassParserRuleCall_1() { return cNameClassParserRuleCall_1; }
	}

	public class NameClassElements implements IParserRuleAccess {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "NameClass");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cNameParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final Group cGroup_1 = (Group)cAlternatives.eContents().get(1);
		private final RuleCall cIDTerminalRuleCall_1_0 = (RuleCall)cGroup_1.eContents().get(0);
		private final Assignment cExceptClassNameAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cExceptClassNameExceptNameClassParserRuleCall_1_1_0 = (RuleCall)cExceptClassNameAssignment_1_1.eContents().get(0);
		private final Group cGroup_2 = (Group)cAlternatives.eContents().get(2);
		private final RuleCall cAnyNameParserRuleCall_2_0 = (RuleCall)cGroup_2.eContents().get(0);
		private final Assignment cExceptClassNameAssignment_2_1 = (Assignment)cGroup_2.eContents().get(1);
		private final RuleCall cExceptClassNameExceptNameClassParserRuleCall_2_1_0 = (RuleCall)cExceptClassNameAssignment_2_1.eContents().get(0);
		private final Group cGroup_3 = (Group)cAlternatives.eContents().get(3);
		private final Keyword cVerticalLineKeyword_3_0 = (Keyword)cGroup_3.eContents().get(0);
		private final Assignment cNcAssignment_3_1 = (Assignment)cGroup_3.eContents().get(1);
		private final RuleCall cNcNameClassParserRuleCall_3_1_0 = (RuleCall)cNcAssignment_3_1.eContents().get(0);
		private final Group cGroup_4 = (Group)cAlternatives.eContents().get(4);
		private final Keyword cLeftParenthesisKeyword_4_0 = (Keyword)cGroup_4.eContents().get(0);
		private final Assignment cNcAssignment_4_1 = (Assignment)cGroup_4.eContents().get(1);
		private final RuleCall cNcNameClassParserRuleCall_4_1_0 = (RuleCall)cNcAssignment_4_1.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_4_2 = (Keyword)cGroup_4.eContents().get(2);
		
		//NameClass:
		//  Name|ID exceptClassName=ExceptNameClass?|AnyName exceptClassName=ExceptNameClass?|
		//  "|" nc=NameClass|"(" nc=NameClass ")";
		public ParserRule getRule() { return rule; }

		//Name|ID exceptClassName=ExceptNameClass?|AnyName exceptClassName=ExceptNameClass?|
		//"|" nc=NameClass|"(" nc=NameClass ")"
		public Alternatives getAlternatives() { return cAlternatives; }

		//Name
		public RuleCall getNameParserRuleCall_0() { return cNameParserRuleCall_0; }

		//ID exceptClassName=ExceptNameClass?
		public Group getGroup_1() { return cGroup_1; }

		//ID
		public RuleCall getIDTerminalRuleCall_1_0() { return cIDTerminalRuleCall_1_0; }

		//exceptClassName=ExceptNameClass?
		public Assignment getExceptClassNameAssignment_1_1() { return cExceptClassNameAssignment_1_1; }

		//ExceptNameClass
		public RuleCall getExceptClassNameExceptNameClassParserRuleCall_1_1_0() { return cExceptClassNameExceptNameClassParserRuleCall_1_1_0; }

		//AnyName exceptClassName=ExceptNameClass?
		public Group getGroup_2() { return cGroup_2; }

		//AnyName
		public RuleCall getAnyNameParserRuleCall_2_0() { return cAnyNameParserRuleCall_2_0; }

		//exceptClassName=ExceptNameClass?
		public Assignment getExceptClassNameAssignment_2_1() { return cExceptClassNameAssignment_2_1; }

		//ExceptNameClass
		public RuleCall getExceptClassNameExceptNameClassParserRuleCall_2_1_0() { return cExceptClassNameExceptNameClassParserRuleCall_2_1_0; }

		//"|" nc=NameClass
		public Group getGroup_3() { return cGroup_3; }

		//"|"
		public Keyword getVerticalLineKeyword_3_0() { return cVerticalLineKeyword_3_0; }

		//nc=NameClass
		public Assignment getNcAssignment_3_1() { return cNcAssignment_3_1; }

		//NameClass
		public RuleCall getNcNameClassParserRuleCall_3_1_0() { return cNcNameClassParserRuleCall_3_1_0; }

		//"(" nc=NameClass ")"
		public Group getGroup_4() { return cGroup_4; }

		//"("
		public Keyword getLeftParenthesisKeyword_4_0() { return cLeftParenthesisKeyword_4_0; }

		//nc=NameClass
		public Assignment getNcAssignment_4_1() { return cNcAssignment_4_1; }

		//NameClass
		public RuleCall getNcNameClassParserRuleCall_4_1_0() { return cNcNameClassParserRuleCall_4_1_0; }

		//")"
		public Keyword getRightParenthesisKeyword_4_2() { return cRightParenthesisKeyword_4_2; }
	}

	public class DataTypeNameElements implements IParserRuleAccess {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "DataTypeName");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cCNameParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final Keyword cStringKeyword_1 = (Keyword)cAlternatives.eContents().get(1);
		private final Keyword cTokenKeyword_2 = (Keyword)cAlternatives.eContents().get(2);
		
		//DataTypeName returns ecore::EString:
		//  CName|"string"|"token";
		public ParserRule getRule() { return rule; }

		//CName|"string"|"token"
		public Alternatives getAlternatives() { return cAlternatives; }

		//CName
		public RuleCall getCNameParserRuleCall_0() { return cCNameParserRuleCall_0; }

		//"string"
		public Keyword getStringKeyword_1() { return cStringKeyword_1; }

		//"token"
		public Keyword getTokenKeyword_2() { return cTokenKeyword_2; }
	}

	public class DataTypeValueElements implements IParserRuleAccess {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "DataTypeValue");
		private final RuleCall cLiteralParserRuleCall = (RuleCall)rule.eContents().get(1);
		
		//DataTypeValue:
		//  Literal;
		public ParserRule getRule() { return rule; }

		//Literal
		public RuleCall getLiteralParserRuleCall() { return cLiteralParserRuleCall; }
	}

	public class AnyURILiteralElements implements IParserRuleAccess {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "AnyURILiteral");
		private final RuleCall cLiteralParserRuleCall = (RuleCall)rule.eContents().get(1);
		
		//AnyURILiteral:
		//  Literal;
		public ParserRule getRule() { return rule; }

		//Literal
		public RuleCall getLiteralParserRuleCall() { return cLiteralParserRuleCall; }
	}

	public class NamespaceURILiteralElements implements IParserRuleAccess {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "NamespaceURILiteral");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cLiteralParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final Keyword cInheritKeyword_1 = (Keyword)cAlternatives.eContents().get(1);
		
		//NamespaceURILiteral:
		//  Literal|"inherit";
		public ParserRule getRule() { return rule; }

		//Literal|"inherit"
		public Alternatives getAlternatives() { return cAlternatives; }

		//Literal
		public RuleCall getLiteralParserRuleCall_0() { return cLiteralParserRuleCall_0; }

		//"inherit"
		public Keyword getInheritKeyword_1() { return cInheritKeyword_1; }
	}

	public class InheritElements implements IParserRuleAccess {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Inherit");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cInheritKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cEqualsSignKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final RuleCall cIdentifierOrKeyWordParserRuleCall_2 = (RuleCall)cGroup.eContents().get(2);
		
		//Inherit:
		//  "inherit" "=" IdentifierOrKeyWord;
		public ParserRule getRule() { return rule; }

		//"inherit" "=" IdentifierOrKeyWord
		public Group getGroup() { return cGroup; }

		//"inherit"
		public Keyword getInheritKeyword_0() { return cInheritKeyword_0; }

		//"="
		public Keyword getEqualsSignKeyword_1() { return cEqualsSignKeyword_1; }

		//IdentifierOrKeyWord
		public RuleCall getIdentifierOrKeyWordParserRuleCall_2() { return cIdentifierOrKeyWordParserRuleCall_2; }
	}

	public class IdentifierOrKeyWordElements implements IParserRuleAccess {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "IdentifierOrKeyWord");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cIdentifierParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cKeyWordParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//IdentifierOrKeyWord:
		//  Identifier|KeyWord;
		public ParserRule getRule() { return rule; }

		//Identifier|KeyWord
		public Alternatives getAlternatives() { return cAlternatives; }

		//Identifier
		public RuleCall getIdentifierParserRuleCall_0() { return cIdentifierParserRuleCall_0; }

		//KeyWord
		public RuleCall getKeyWordParserRuleCall_1() { return cKeyWordParserRuleCall_1; }
	}

	public class IdentifierElements implements IParserRuleAccess {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Identifier");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cAlternatives.eContents().get(0);
		private final RuleCall cIDTerminalRuleCall_0_0 = (RuleCall)cGroup_0.eContents().get(0);
		private final Assignment cKeyWordAssignment_0_1 = (Assignment)cGroup_0.eContents().get(1);
		private final RuleCall cKeyWordKeyWordParserRuleCall_0_1_0 = (RuleCall)cKeyWordAssignment_0_1.eContents().get(0);
		private final RuleCall cQuotedIdentifierParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//Identifier:
		//  ID keyWord=KeyWord|QuotedIdentifier;
		public ParserRule getRule() { return rule; }

		//ID keyWord=KeyWord|QuotedIdentifier
		public Alternatives getAlternatives() { return cAlternatives; }

		//ID keyWord=KeyWord
		public Group getGroup_0() { return cGroup_0; }

		//ID
		public RuleCall getIDTerminalRuleCall_0_0() { return cIDTerminalRuleCall_0_0; }

		//keyWord=KeyWord
		public Assignment getKeyWordAssignment_0_1() { return cKeyWordAssignment_0_1; }

		//KeyWord
		public RuleCall getKeyWordKeyWordParserRuleCall_0_1_0() { return cKeyWordKeyWordParserRuleCall_0_1_0; }

		//QuotedIdentifier
		public RuleCall getQuotedIdentifierParserRuleCall_1() { return cQuotedIdentifierParserRuleCall_1; }
	}

	public class QuotedIdentifierElements implements IParserRuleAccess {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "QuotedIdentifier");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cReverseSolidusKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final RuleCall cIDTerminalRuleCall_1 = (RuleCall)cGroup.eContents().get(1);
		
		//QuotedIdentifier returns ecore::EString:
		//  "\\" ID;
		public ParserRule getRule() { return rule; }

		//"\\" ID
		public Group getGroup() { return cGroup; }

		//"\\"
		public Keyword getReverseSolidusKeyword_0() { return cReverseSolidusKeyword_0; }

		//ID
		public RuleCall getIDTerminalRuleCall_1() { return cIDTerminalRuleCall_1; }
	}

	public class CNameElements implements IParserRuleAccess {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "CName");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cIDTerminalRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Keyword cColonKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final RuleCall cIDTerminalRuleCall_2 = (RuleCall)cGroup.eContents().get(2);
		
		//CName returns ecore::EString:
		//  ID ":" ID;
		public ParserRule getRule() { return rule; }

		//ID ":" ID
		public Group getGroup() { return cGroup; }

		//ID
		public RuleCall getIDTerminalRuleCall_0() { return cIDTerminalRuleCall_0; }

		//":"
		public Keyword getColonKeyword_1() { return cColonKeyword_1; }

		//ID
		public RuleCall getIDTerminalRuleCall_2() { return cIDTerminalRuleCall_2; }
	}

	public class AnyNameElements implements IParserRuleAccess {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "AnyName");
		private final Keyword cAsteriskKeyword = (Keyword)rule.eContents().get(1);
		
		//AnyName:
		//  "*"; 
		//
		//
		//
		//	
		//
		////Literal:
		////	LiteralSegment ('~' literalSegment=LiteralSegment)+;
		public ParserRule getRule() { return rule; }

		//"*"
		public Keyword getAsteriskKeyword() { return cAsteriskKeyword; }
	}

	public class LiteralElements implements IParserRuleAccess {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Literal");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cSTRINGTerminalRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Keyword cTildeKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final Assignment cLiteralSegmentAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cLiteralSegmentSTRINGTerminalRuleCall_1_1_0 = (RuleCall)cLiteralSegmentAssignment_1_1.eContents().get(0);
		
		//Literal:
		//  STRING ("~" literalSegment=STRING)+; 
		//
		////Literal:
		////	LiteralSegment ('~' literalSegment=LiteralSegment)+;
		//
		//       
		//	
		////terminal CHAR: "A".."Z" | "a".."z";
		////terminal NewLine: "\n" | "\r" | "\n\r";
		//
		////LiteralSegment:
		////	'"' (CHAR  ('"' | NewLine))* '"' |
		////	"'" (CHAR  ("'" | NewLine))* "'" |
		////	'"''"''"' (('"')? ('"')? (CHAR  '"'))* '"''"''"'
		////	"'''" (("'")? ("'")? (CHAR  "'"))* "'''";
		public ParserRule getRule() { return rule; }

		//STRING ("~" literalSegment=STRING)+
		public Group getGroup() { return cGroup; }

		//STRING
		public RuleCall getSTRINGTerminalRuleCall_0() { return cSTRINGTerminalRuleCall_0; }

		//("~" literalSegment=STRING)+
		public Group getGroup_1() { return cGroup_1; }

		//"~"
		public Keyword getTildeKeyword_1_0() { return cTildeKeyword_1_0; }

		//literalSegment=STRING
		public Assignment getLiteralSegmentAssignment_1_1() { return cLiteralSegmentAssignment_1_1; }

		//STRING
		public RuleCall getLiteralSegmentSTRINGTerminalRuleCall_1_1_0() { return cLiteralSegmentSTRINGTerminalRuleCall_1_1_0; }
	}

	public class KeyWordElements implements IParserRuleAccess {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "KeyWord");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Keyword cAttributeKeyword_0 = (Keyword)cAlternatives.eContents().get(0);
		private final Keyword cDefaultKeyword_1 = (Keyword)cAlternatives.eContents().get(1);
		private final Keyword cDatatypesKeyword_2 = (Keyword)cAlternatives.eContents().get(2);
		private final Keyword cDivKeyword_3 = (Keyword)cAlternatives.eContents().get(3);
		private final Keyword cElementKeyword_4 = (Keyword)cAlternatives.eContents().get(4);
		private final Keyword cEmptyKeyword_5 = (Keyword)cAlternatives.eContents().get(5);
		private final Keyword cExternalKeyword_6 = (Keyword)cAlternatives.eContents().get(6);
		private final Keyword cGrammarKeyword_7 = (Keyword)cAlternatives.eContents().get(7);
		private final Keyword cIncludeKeyword_8 = (Keyword)cAlternatives.eContents().get(8);
		private final Keyword cInheritKeyword_9 = (Keyword)cAlternatives.eContents().get(9);
		private final Keyword cListKeyword_10 = (Keyword)cAlternatives.eContents().get(10);
		private final Keyword cMixedKeyword_11 = (Keyword)cAlternatives.eContents().get(11);
		private final Keyword cNamespaceKeyword_12 = (Keyword)cAlternatives.eContents().get(12);
		private final Keyword cNotAllowedKeyword_13 = (Keyword)cAlternatives.eContents().get(13);
		private final Keyword cParentKeyword_14 = (Keyword)cAlternatives.eContents().get(14);
		private final Keyword cStartKeyword_15 = (Keyword)cAlternatives.eContents().get(15);
		private final Keyword cStringKeyword_16 = (Keyword)cAlternatives.eContents().get(16);
		private final Keyword cTextKeyword_17 = (Keyword)cAlternatives.eContents().get(17);
		private final Keyword cTokenKeyword_18 = (Keyword)cAlternatives.eContents().get(18);
		
		//KeyWord:
		//  "attribute"|"default"|"datatypes"|"div"|"element"|"empty"|"external"|"grammar"|
		//  "include"|"inherit"|"list"|"mixed"|"namespace"|"notAllowed"|"parent"|"start"|
		//  "string"|"text"|"token"; 
		//	
		////terminal CHAR: "A".."Z" | "a".."z";
		////terminal NewLine: "\n" | "\r" | "\n\r";
		//
		////LiteralSegment:
		////	'"' (CHAR  ('"' | NewLine))* '"' |
		////	"'" (CHAR  ("'" | NewLine))* "'" |
		////	'"''"''"' (('"')? ('"')? (CHAR  '"'))* '"''"''"'
		////	"'''" (("'")? ("'")? (CHAR  "'"))* "'''";
		public ParserRule getRule() { return rule; }

		//"attribute"|"default"|"datatypes"|"div"|"element"|"empty"|"external"|"grammar"|
		//"include"|"inherit"|"list"|"mixed"|"namespace"|"notAllowed"|"parent"|"start"|
		//"string"|"text"|"token" 
		//	
		////terminal CHAR: "A".."Z" | "a".."z";
		////terminal NewLine: "\n" | "\r" | "\n\r";
		//
		////LiteralSegment:
		////	'"' (CHAR  ('"' | NewLine))* '"' |
		////	"'" (CHAR  ("'" | NewLine))* "'" |
		////	'"''"''"' (('"')? ('"')? (CHAR  '"'))* '"''"''"'
		////	"'''" (("'")? ("'")? (CHAR  "'"))* "'''";
		public Alternatives getAlternatives() { return cAlternatives; }

		//"attribute"
		public Keyword getAttributeKeyword_0() { return cAttributeKeyword_0; }

		//"default"
		public Keyword getDefaultKeyword_1() { return cDefaultKeyword_1; }

		//"datatypes"
		public Keyword getDatatypesKeyword_2() { return cDatatypesKeyword_2; }

		//"div"
		public Keyword getDivKeyword_3() { return cDivKeyword_3; }

		//"element"
		public Keyword getElementKeyword_4() { return cElementKeyword_4; }

		//"empty"
		public Keyword getEmptyKeyword_5() { return cEmptyKeyword_5; }

		//"external"
		public Keyword getExternalKeyword_6() { return cExternalKeyword_6; }

		//"grammar"
		public Keyword getGrammarKeyword_7() { return cGrammarKeyword_7; }

		//"include"
		public Keyword getIncludeKeyword_8() { return cIncludeKeyword_8; }

		//"inherit"
		public Keyword getInheritKeyword_9() { return cInheritKeyword_9; }

		//"list"
		public Keyword getListKeyword_10() { return cListKeyword_10; }

		//"mixed"
		public Keyword getMixedKeyword_11() { return cMixedKeyword_11; }

		//"namespace"
		public Keyword getNamespaceKeyword_12() { return cNamespaceKeyword_12; }

		//"notAllowed"
		public Keyword getNotAllowedKeyword_13() { return cNotAllowedKeyword_13; }

		//"parent"
		public Keyword getParentKeyword_14() { return cParentKeyword_14; }

		//"start"
		public Keyword getStartKeyword_15() { return cStartKeyword_15; }

		//"string"
		public Keyword getStringKeyword_16() { return cStringKeyword_16; }

		//"text"
		public Keyword getTextKeyword_17() { return cTextKeyword_17; }

		//"token"
		public Keyword getTokenKeyword_18() { return cTokenKeyword_18; }
	}
	
	
	private TopLevelElements pTopLevel;
	private DeclElements pDecl;
	private PatternElements pPattern;
	private ElementElements pElement;
	private AttributeElements pAttribute;
	private ParamElements pParam;
	private ExceptPatternElements pExceptPattern;
	private GrammarContentElements pGrammarContent;
	private IncludeContentElements pIncludeContent;
	private StartElements pStart;
	private DefineElements pDefine;
	private NameElements pName;
	private ExceptNameClassElements pExceptNameClass;
	private NameClassElements pNameClass;
	private DataTypeNameElements pDataTypeName;
	private DataTypeValueElements pDataTypeValue;
	private AnyURILiteralElements pAnyURILiteral;
	private NamespaceURILiteralElements pNamespaceURILiteral;
	private InheritElements pInherit;
	private IdentifierOrKeyWordElements pIdentifierOrKeyWord;
	private IdentifierElements pIdentifier;
	private QuotedIdentifierElements pQuotedIdentifier;
	private CNameElements pCName;
	private AnyNameElements pAnyName;
	private LiteralElements pLiteral;
	private KeyWordElements pKeyWord;
	
	private final GrammarProvider grammarProvider;

	private TerminalsGrammarAccess gaTerminals;

	@Inject
	public RelaxngGrammarAccess(GrammarProvider grammarProvider,
		TerminalsGrammarAccess gaTerminals) {
		this.grammarProvider = grammarProvider;
		this.gaTerminals = gaTerminals;
	}
	
	public Grammar getGrammar() {	
		return grammarProvider.getGrammar(this);
	}
	

	public TerminalsGrammarAccess getTerminalsGrammarAccess() {
		return gaTerminals;
	}

	
	//TopLevel:
	//  decls+=Decl* (pattern=Pattern|grammarContent+=GrammarContent*);
	public TopLevelElements getTopLevelAccess() {
		return (pTopLevel != null) ? pTopLevel : (pTopLevel = new TopLevelElements());
	}
	
	public ParserRule getTopLevelRule() {
		return getTopLevelAccess().getRule();
	}

	//Decl:
	//  "namespace" prefix=ID "=" uri=STRING|"default" "namespace" prefix=ID "=" uri=STRING|
	//  "datatypes" datatypeId=ID "=" value=STRING;
	public DeclElements getDeclAccess() {
		return (pDecl != null) ? pDecl : (pDecl = new DeclElements());
	}
	
	public ParserRule getDeclRule() {
		return getDeclAccess().getRule();
	}

	//Pattern:
	//  val=( Element | Attribute )+|"list" "{" pattern+=Pattern* "}"|"mixed" "{" pattern+=
	//  Pattern* "}"|ID "="?|"parent" ID|"empty"|"text"|"|"|value=DataTypeValue+|
	//  DataTypeName ("{" param+=Param* "}")* exceptPattern=ExceptPattern*|"notAllowed"|
	//  "external" uri=AnyURILiteral inherit=Inherit*|"grammar" "{" grammarContent+=
	//  GrammarContent* "}"|"(" group+=Pattern* ")" continue=","?;
	public PatternElements getPatternAccess() {
		return (pPattern != null) ? pPattern : (pPattern = new PatternElements());
	}
	
	public ParserRule getPatternRule() {
		return getPatternAccess().getRule();
	}

	//Element:
	//  "element" name=NameClass "{" pattern+=Pattern* "}" cardinality=( "?" | "+" | "*" )? continue
	//  =( "," | "&" | "|" )?;
	public ElementElements getElementAccess() {
		return (pElement != null) ? pElement : (pElement = new ElementElements());
	}
	
	public ParserRule getElementRule() {
		return getElementAccess().getRule();
	}

	//Attribute:
	//  "attribute" name=NameClass "{" pattern+=Pattern* "}" cardinality="?"? continue=( "," |
	//  "|" )?;
	public AttributeElements getAttributeAccess() {
		return (pAttribute != null) ? pAttribute : (pAttribute = new AttributeElements());
	}
	
	public ParserRule getAttributeRule() {
		return getAttributeAccess().getRule();
	}

	//Param:
	//  IdentifierOrKeyWord "=" parmValue=Literal;
	public ParamElements getParamAccess() {
		return (pParam != null) ? pParam : (pParam = new ParamElements());
	}
	
	public ParserRule getParamRule() {
		return getParamAccess().getRule();
	}

	//ExceptPattern:
	//  "-" Pattern;
	public ExceptPatternElements getExceptPatternAccess() {
		return (pExceptPattern != null) ? pExceptPattern : (pExceptPattern = new ExceptPatternElements());
	}
	
	public ParserRule getExceptPatternRule() {
		return getExceptPatternAccess().getRule();
	}

	//GrammarContent:
	//  Start|Define|"div" "{" grammarContenGrammarContent+=GrammarContent* "}"|"include"
	//  AnyURILiteral inherit=Inherit ("{" includeContent+=IncludeContent* "}");
	public GrammarContentElements getGrammarContentAccess() {
		return (pGrammarContent != null) ? pGrammarContent : (pGrammarContent = new GrammarContentElements());
	}
	
	public ParserRule getGrammarContentRule() {
		return getGrammarContentAccess().getRule();
	}

	//IncludeContent:
	//  Define|Start|"div" "{" includeGrammarContent+=GrammarContent* "}";
	public IncludeContentElements getIncludeContentAccess() {
		return (pIncludeContent != null) ? pIncludeContent : (pIncludeContent = new IncludeContentElements());
	}
	
	public ParserRule getIncludeContentRule() {
		return getIncludeContentAccess().getRule();
	}

	//Start:
	//  "start" ("="|"|="|"&=") (ID|pattern=Pattern);
	public StartElements getStartAccess() {
		return (pStart != null) ? pStart : (pStart = new StartElements());
	}
	
	public ParserRule getStartRule() {
		return getStartAccess().getRule();
	}

	//Define:
	//  ID ("="|"|="|"&=") pattern=Pattern;
	public DefineElements getDefineAccess() {
		return (pDefine != null) ? pDefine : (pDefine = new DefineElements());
	}
	
	public ParserRule getDefineRule() {
		return getDefineAccess().getRule();
	}

	//Name:
	//  IdentifierOrKeyWord|CName;
	public NameElements getNameAccess() {
		return (pName != null) ? pName : (pName = new NameElements());
	}
	
	public ParserRule getNameRule() {
		return getNameAccess().getRule();
	}

	//ExceptNameClass:
	//  "-" NameClass;
	public ExceptNameClassElements getExceptNameClassAccess() {
		return (pExceptNameClass != null) ? pExceptNameClass : (pExceptNameClass = new ExceptNameClassElements());
	}
	
	public ParserRule getExceptNameClassRule() {
		return getExceptNameClassAccess().getRule();
	}

	//NameClass:
	//  Name|ID exceptClassName=ExceptNameClass?|AnyName exceptClassName=ExceptNameClass?|
	//  "|" nc=NameClass|"(" nc=NameClass ")";
	public NameClassElements getNameClassAccess() {
		return (pNameClass != null) ? pNameClass : (pNameClass = new NameClassElements());
	}
	
	public ParserRule getNameClassRule() {
		return getNameClassAccess().getRule();
	}

	//DataTypeName returns ecore::EString:
	//  CName|"string"|"token";
	public DataTypeNameElements getDataTypeNameAccess() {
		return (pDataTypeName != null) ? pDataTypeName : (pDataTypeName = new DataTypeNameElements());
	}
	
	public ParserRule getDataTypeNameRule() {
		return getDataTypeNameAccess().getRule();
	}

	//DataTypeValue:
	//  Literal;
	public DataTypeValueElements getDataTypeValueAccess() {
		return (pDataTypeValue != null) ? pDataTypeValue : (pDataTypeValue = new DataTypeValueElements());
	}
	
	public ParserRule getDataTypeValueRule() {
		return getDataTypeValueAccess().getRule();
	}

	//AnyURILiteral:
	//  Literal;
	public AnyURILiteralElements getAnyURILiteralAccess() {
		return (pAnyURILiteral != null) ? pAnyURILiteral : (pAnyURILiteral = new AnyURILiteralElements());
	}
	
	public ParserRule getAnyURILiteralRule() {
		return getAnyURILiteralAccess().getRule();
	}

	//NamespaceURILiteral:
	//  Literal|"inherit";
	public NamespaceURILiteralElements getNamespaceURILiteralAccess() {
		return (pNamespaceURILiteral != null) ? pNamespaceURILiteral : (pNamespaceURILiteral = new NamespaceURILiteralElements());
	}
	
	public ParserRule getNamespaceURILiteralRule() {
		return getNamespaceURILiteralAccess().getRule();
	}

	//Inherit:
	//  "inherit" "=" IdentifierOrKeyWord;
	public InheritElements getInheritAccess() {
		return (pInherit != null) ? pInherit : (pInherit = new InheritElements());
	}
	
	public ParserRule getInheritRule() {
		return getInheritAccess().getRule();
	}

	//IdentifierOrKeyWord:
	//  Identifier|KeyWord;
	public IdentifierOrKeyWordElements getIdentifierOrKeyWordAccess() {
		return (pIdentifierOrKeyWord != null) ? pIdentifierOrKeyWord : (pIdentifierOrKeyWord = new IdentifierOrKeyWordElements());
	}
	
	public ParserRule getIdentifierOrKeyWordRule() {
		return getIdentifierOrKeyWordAccess().getRule();
	}

	//Identifier:
	//  ID keyWord=KeyWord|QuotedIdentifier;
	public IdentifierElements getIdentifierAccess() {
		return (pIdentifier != null) ? pIdentifier : (pIdentifier = new IdentifierElements());
	}
	
	public ParserRule getIdentifierRule() {
		return getIdentifierAccess().getRule();
	}

	//QuotedIdentifier returns ecore::EString:
	//  "\\" ID;
	public QuotedIdentifierElements getQuotedIdentifierAccess() {
		return (pQuotedIdentifier != null) ? pQuotedIdentifier : (pQuotedIdentifier = new QuotedIdentifierElements());
	}
	
	public ParserRule getQuotedIdentifierRule() {
		return getQuotedIdentifierAccess().getRule();
	}

	//CName returns ecore::EString:
	//  ID ":" ID;
	public CNameElements getCNameAccess() {
		return (pCName != null) ? pCName : (pCName = new CNameElements());
	}
	
	public ParserRule getCNameRule() {
		return getCNameAccess().getRule();
	}

	//AnyName:
	//  "*"; 
	//
	//
	//
	//	
	//
	////Literal:
	////	LiteralSegment ('~' literalSegment=LiteralSegment)+;
	public AnyNameElements getAnyNameAccess() {
		return (pAnyName != null) ? pAnyName : (pAnyName = new AnyNameElements());
	}
	
	public ParserRule getAnyNameRule() {
		return getAnyNameAccess().getRule();
	}

	//Literal:
	//  STRING ("~" literalSegment=STRING)+; 
	//
	////Literal:
	////	LiteralSegment ('~' literalSegment=LiteralSegment)+;
	//
	//       
	//	
	////terminal CHAR: "A".."Z" | "a".."z";
	////terminal NewLine: "\n" | "\r" | "\n\r";
	//
	////LiteralSegment:
	////	'"' (CHAR  ('"' | NewLine))* '"' |
	////	"'" (CHAR  ("'" | NewLine))* "'" |
	////	'"''"''"' (('"')? ('"')? (CHAR  '"'))* '"''"''"'
	////	"'''" (("'")? ("'")? (CHAR  "'"))* "'''";
	public LiteralElements getLiteralAccess() {
		return (pLiteral != null) ? pLiteral : (pLiteral = new LiteralElements());
	}
	
	public ParserRule getLiteralRule() {
		return getLiteralAccess().getRule();
	}

	//KeyWord:
	//  "attribute"|"default"|"datatypes"|"div"|"element"|"empty"|"external"|"grammar"|
	//  "include"|"inherit"|"list"|"mixed"|"namespace"|"notAllowed"|"parent"|"start"|
	//  "string"|"text"|"token"; 
	//	
	////terminal CHAR: "A".."Z" | "a".."z";
	////terminal NewLine: "\n" | "\r" | "\n\r";
	//
	////LiteralSegment:
	////	'"' (CHAR  ('"' | NewLine))* '"' |
	////	"'" (CHAR  ("'" | NewLine))* "'" |
	////	'"''"''"' (('"')? ('"')? (CHAR  '"'))* '"''"''"'
	////	"'''" (("'")? ("'")? (CHAR  "'"))* "'''";
	public KeyWordElements getKeyWordAccess() {
		return (pKeyWord != null) ? pKeyWord : (pKeyWord = new KeyWordElements());
	}
	
	public ParserRule getKeyWordRule() {
		return getKeyWordAccess().getRule();
	}

	//terminal ID:
	//  "^" ? ( "a" .. "z" | "A" .. "Z" | "_" ) ( "a" .. "z" | "A" .. "Z" | "_" | "0" .. "9" ) *;
	public TerminalRule getIDRule() {
		return gaTerminals.getIDRule();
	} 

	//terminal INT returns ecore::EInt:
	//  "0" .. "9" +;
	public TerminalRule getINTRule() {
		return gaTerminals.getINTRule();
	} 

	//terminal STRING:
	//  "\"" ( "\\" ( "b" | "t" | "n" | "f" | "r" | "\"" | "\'" | "\\" ) | ! ( "\\" | "\"" ) ) * "\"" | "\'" ( "\\" ( "b" |
	//  "t" | "n" | "f" | "r" | "\"" | "\'" | "\\" ) | ! ( "\\" | "\'" ) ) * "\'";
	public TerminalRule getSTRINGRule() {
		return gaTerminals.getSTRINGRule();
	} 

	//terminal ML_COMMENT:
	//  "/ *" -> "* /";
	public TerminalRule getML_COMMENTRule() {
		return gaTerminals.getML_COMMENTRule();
	} 

	//terminal SL_COMMENT:
	//  "//" ! ( "\n" | "\r" ) * ( "\r" ? "\n" ) ?;
	public TerminalRule getSL_COMMENTRule() {
		return gaTerminals.getSL_COMMENTRule();
	} 

	//terminal WS:
	//  ( " " | "\t" | "\r" | "\n" ) +;
	public TerminalRule getWSRule() {
		return gaTerminals.getWSRule();
	} 

	//terminal ANY_OTHER:
	//  .;
	public TerminalRule getANY_OTHERRule() {
		return gaTerminals.getANY_OTHERRule();
	} 
}
