// $ANTLR 3.5.2 XQueryParser.g 2015-03-12 16:18:05

/*******************************************************************************
 * Copyright (c) 2008, 2009 28msec Inc. and others.
 * All rights reserved. This program and the accompanying materials
 * are made available under the terms of the Eclipse Public License v1.0
 * which accompanies this distribution, and is available at
 * http://www.eclipse.org/legal/epl-v10.html
 *
 * Contributors:
 *     Gabriel Petrovay (28msec) - initial API and implementation
 *     Sam Neth (Mark Logic)
 *******************************************************************************/
package org.eclipse.wst.xquery.internal.core.parser.antlr;


import org.antlr.runtime.*;
import java.util.Stack;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;

import org.antlr.runtime.tree.*;


@SuppressWarnings("all")
public class XQueryParser extends XQDTParser {
	public static final String[] tokenNames = new String[] {
		"<invalid>", "<EOR>", "<DOWN>", "<UP>", "AFTER", "ALL", "ALLOWING", "AMP", 
		"AMP_ER", "ANCESTOR", "ANCESTOR_OR_SELF", "AND", "ANN_PERCENT", "ANY", 
		"APOS", "APOS_ER", "AS", "ASCENDING", "AT", "ATTRIBUTE", "ATTR_SIGN", 
		"BASE_URI", "BEFORE", "BINARY", "BIND", "BOUNDARY_SPACE", "BREAK", "BY", 
		"CASE", "CAST", "CASTABLE", "CATCH", "CDATA_END", "CDATA_START", "CHARREF_DEC", 
		"CHARREF_HEX", "CHECK", "CHILD", "CLOSE_TAG", "COLLATION", "COLLECTION", 
		"COLON", "COLON_COLON", "COMMA", "COMMENT", "CONCAT", "CONSTRAINT", "CONSTRUCTION", 
		"CONTAINS", "CONTENT", "CONTEXT", "CONTINUE", "COPY", "COPY_NAMESPACES", 
		"COUNT", "DECIMAL_FORMAT", "DECIMAL_SEPARATOR", "DECLARE", "DEFAULT", 
		"DELETE", "DESCENDANT", "DESCENDANT_OR_SELF", "DESCENDING", "DIACRITICS", 
		"DIFFERENT", "DIGIT", "DISTANCE", "DIV", "DOCUMENT", "DOCUMENT_NODE", 
		"DOLLAR", "DOT", "DOT_DOT", "Digit", "Digits", "ELEMENT", "ELSE", "EMPTY", 
		"EMPTY_CLOSE_TAG", "EMPTY_SEQUENCE", "ENCODING", "END", "ENTIRE", "EQ", 
		"EQUAL", "ESCAPE_APOS", "ESCAPE_LBRACKET", "ESCAPE_QUOT", "ESCAPE_RBRACKET", 
		"EVERY", "EXACTLY", "EXCEPT", "EXIT", "EXTERNAL", "FIRST", "FOLLOWING", 
		"FOLLOWING_SIBLING", "FOR", "FOREACH", "FOREIGN", "FROM", "FTAND", "FTNOT", 
		"FTOR", "FT_OPTION", "FUNCTION", "GE", "GREATER", "GREATEREQ", "GREATER_GREATER", 
		"GREATEST", "GROUP", "GROUPING_SEPARATOR", "GT", "HASH", "HexLetter", 
		"IDIV", "IF", "IMPORT", "IN", "INDEX", "INFINITY", "INHERIT", "INSENSITIVE", 
		"INSERT", "INSTANCE", "INTEGRITY", "INTERSECT", "INTO", "IS", "ITEM", 
		"KEY", "LANGUAGE", "LAST", "LAX", "LBRACKET", "LE", "LEAST", "LET", "LEVELS", 
		"LOOP", "LOWERCASE", "LPAREN", "LSQUARE", "LT", "L_AnyChar", "L_AposAttrContentChar", 
		"L_CDataSection", "L_CharRef", "L_Comment", "L_DecimalLiteral", "L_DirCommentConstructor", 
		"L_DirPIConstructor", "L_DoubleLiteral", "L_ElementContentChar", "L_IntegerLiteral", 
		"L_NCName", "L_Pragma", "L_PredefinedEntityRef", "L_QuotAttrContentChar", 
		"Letter", "MINUS", "MINUS_SIGN", "MOD", "MODIFY", "MODULE", "MOST", "NAMESPACE", 
		"NAMESPACE_NODE", "NAN", "NCNameChar", "NCNameStartChar", "NE", "NEXT", 
		"NO", "NODE", "NODES", "NOT", "NOTEQUAL", "NO_INHERIT", "NO_PRESERVE", 
		"OCCURS", "OF", "ON", "ONLY", "OPTION", "OR", "ORDER", "ORDERED", "ORDERING", 
		"PARAGRAPH", "PARAGRAPHS", "PARENT", "PATTERN_SEPARATOR", "PERCENT", "PER_MILLE", 
		"PHRASE", "PI_END", "PI_START", "PLUS", "PRAGMA_END", "PRAGMA_START", 
		"PRECEDING", "PRECEDING_SIBLING", "PRESERVE", "PREVIOUS", "PRIVATE", "PROCESSING_INSTRUCTION", 
		"QUESTION", "QUOT", "QUOT_ER", "RBRACKET", "RELATIONSHIP", "RENAME", "REPLACE", 
		"RETURN", "RETURNING", "REVALIDATION", "RPAREN", "RSQUARE", "S", "SAME", 
		"SATISFIES", "SCHEMA", "SCHEMA_ATTRIBUTE", "SCHEMA_ELEMENT", "SCORE", 
		"SELF", "SEMICOLON", "SENSITIVE", "SENTENCE", "SENTENCES", "SKIP", "SLASH", 
		"SLASH_SLASH", "SLIDING", "SMALLER", "SMALLEREQ", "SMALLER_SMALLER", "SOME", 
		"STABLE", "STAR", "START", "STEMMING", "STOP", "STRICT", "STRIP", "SU", 
		"SWITCH", "TEXT", "THEN", "THESAURUS", "TIMES", "TO", "TREAT", "TRY", 
		"TUMBLING", "TYPE", "TYPESWITCH", "UNION", "UNIQUE", "UNORDERED", "UPDATING", 
		"UPPERCASE", "USING", "VALIDATE", "VALUE", "VARIABLE", "VBAR", "VERSION", 
		"WEIGHT", "WHEN", "WHERE", "WHILE", "WILDCARDS", "WINDOW", "WITH", "WITHOUT", 
		"WORD", "WORDS", "XML_COMMENT_END", "XML_COMMENT_START", "XQUERY", "ZERO_DIGIT", 
		"AtHints", "AtomicOrUnionType", "AtomicType", "AttributeValueChar", "BaseURIDecl", 
		"BinaryTest", "BlockExpr", "CommonContent", "DefaultElementNamespace", 
		"DefaultNamespaceDecl", "DefaultNamespaceDecls", "DirAttributeList", "DirAttributeValue", 
		"DirElemConstructor", "DirElemContent", "EXPLICITLY", "ElementContentChar", 
		"EmptySequenceTest", "EnclosedExpr", "FTOptionDecls", "FunctionDecl", 
		"FunctionTest", "Imports", "ItemTest", "KindTest", "L_AposStringLiteralChar", 
		"L_QuotStringLiteralChar", "LibraryModule", "MainModule", "ModuleDecl", 
		"ModuleImport", "NamespaceDecl", "NamespaceDecls", "NamespaceName", "OptionDecl", 
		"OrderedDecls", "Param", "ParamList", "Prolog", "QName", "QueryBody", 
		"ReturnType", "SchemaImport", "SchemaPrefix", "SequenceType", "Setter", 
		"Setters", "StringLiteral", "TypeDeclaration", "UnaryExpr", "VarDecl", 
		"VarDefaultValue", "VarType", "VarValue", "VarVariableDecl", "VersionDecl", 
		"VersionDeclEncoding", "VersionDeclVersion"
	};
	public static final int EOF=-1;
	public static final int AFTER=4;
	public static final int ALL=5;
	public static final int ALLOWING=6;
	public static final int AMP=7;
	public static final int AMP_ER=8;
	public static final int ANCESTOR=9;
	public static final int ANCESTOR_OR_SELF=10;
	public static final int AND=11;
	public static final int ANN_PERCENT=12;
	public static final int ANY=13;
	public static final int APOS=14;
	public static final int APOS_ER=15;
	public static final int AS=16;
	public static final int ASCENDING=17;
	public static final int AT=18;
	public static final int ATTRIBUTE=19;
	public static final int ATTR_SIGN=20;
	public static final int BASE_URI=21;
	public static final int BEFORE=22;
	public static final int BINARY=23;
	public static final int BIND=24;
	public static final int BOUNDARY_SPACE=25;
	public static final int BREAK=26;
	public static final int BY=27;
	public static final int CASE=28;
	public static final int CAST=29;
	public static final int CASTABLE=30;
	public static final int CATCH=31;
	public static final int CDATA_END=32;
	public static final int CDATA_START=33;
	public static final int CHARREF_DEC=34;
	public static final int CHARREF_HEX=35;
	public static final int CHECK=36;
	public static final int CHILD=37;
	public static final int CLOSE_TAG=38;
	public static final int COLLATION=39;
	public static final int COLLECTION=40;
	public static final int COLON=41;
	public static final int COLON_COLON=42;
	public static final int COMMA=43;
	public static final int COMMENT=44;
	public static final int CONCAT=45;
	public static final int CONSTRAINT=46;
	public static final int CONSTRUCTION=47;
	public static final int CONTAINS=48;
	public static final int CONTENT=49;
	public static final int CONTEXT=50;
	public static final int CONTINUE=51;
	public static final int COPY=52;
	public static final int COPY_NAMESPACES=53;
	public static final int COUNT=54;
	public static final int DECIMAL_FORMAT=55;
	public static final int DECIMAL_SEPARATOR=56;
	public static final int DECLARE=57;
	public static final int DEFAULT=58;
	public static final int DELETE=59;
	public static final int DESCENDANT=60;
	public static final int DESCENDANT_OR_SELF=61;
	public static final int DESCENDING=62;
	public static final int DIACRITICS=63;
	public static final int DIFFERENT=64;
	public static final int DIGIT=65;
	public static final int DISTANCE=66;
	public static final int DIV=67;
	public static final int DOCUMENT=68;
	public static final int DOCUMENT_NODE=69;
	public static final int DOLLAR=70;
	public static final int DOT=71;
	public static final int DOT_DOT=72;
	public static final int Digit=73;
	public static final int Digits=74;
	public static final int ELEMENT=75;
	public static final int ELSE=76;
	public static final int EMPTY=77;
	public static final int EMPTY_CLOSE_TAG=78;
	public static final int EMPTY_SEQUENCE=79;
	public static final int ENCODING=80;
	public static final int END=81;
	public static final int ENTIRE=82;
	public static final int EQ=83;
	public static final int EQUAL=84;
	public static final int ESCAPE_APOS=85;
	public static final int ESCAPE_LBRACKET=86;
	public static final int ESCAPE_QUOT=87;
	public static final int ESCAPE_RBRACKET=88;
	public static final int EVERY=89;
	public static final int EXACTLY=90;
	public static final int EXCEPT=91;
	public static final int EXIT=92;
	public static final int EXTERNAL=93;
	public static final int FIRST=94;
	public static final int FOLLOWING=95;
	public static final int FOLLOWING_SIBLING=96;
	public static final int FOR=97;
	public static final int FOREACH=98;
	public static final int FOREIGN=99;
	public static final int FROM=100;
	public static final int FTAND=101;
	public static final int FTNOT=102;
	public static final int FTOR=103;
	public static final int FT_OPTION=104;
	public static final int FUNCTION=105;
	public static final int GE=106;
	public static final int GREATER=107;
	public static final int GREATEREQ=108;
	public static final int GREATER_GREATER=109;
	public static final int GREATEST=110;
	public static final int GROUP=111;
	public static final int GROUPING_SEPARATOR=112;
	public static final int GT=113;
	public static final int HASH=114;
	public static final int HexLetter=115;
	public static final int IDIV=116;
	public static final int IF=117;
	public static final int IMPORT=118;
	public static final int IN=119;
	public static final int INDEX=120;
	public static final int INFINITY=121;
	public static final int INHERIT=122;
	public static final int INSENSITIVE=123;
	public static final int INSERT=124;
	public static final int INSTANCE=125;
	public static final int INTEGRITY=126;
	public static final int INTERSECT=127;
	public static final int INTO=128;
	public static final int IS=129;
	public static final int ITEM=130;
	public static final int KEY=131;
	public static final int LANGUAGE=132;
	public static final int LAST=133;
	public static final int LAX=134;
	public static final int LBRACKET=135;
	public static final int LE=136;
	public static final int LEAST=137;
	public static final int LET=138;
	public static final int LEVELS=139;
	public static final int LOOP=140;
	public static final int LOWERCASE=141;
	public static final int LPAREN=142;
	public static final int LSQUARE=143;
	public static final int LT=144;
	public static final int L_AnyChar=145;
	public static final int L_AposAttrContentChar=146;
	public static final int L_CDataSection=147;
	public static final int L_CharRef=148;
	public static final int L_Comment=149;
	public static final int L_DecimalLiteral=150;
	public static final int L_DirCommentConstructor=151;
	public static final int L_DirPIConstructor=152;
	public static final int L_DoubleLiteral=153;
	public static final int L_ElementContentChar=154;
	public static final int L_IntegerLiteral=155;
	public static final int L_NCName=156;
	public static final int L_Pragma=157;
	public static final int L_PredefinedEntityRef=158;
	public static final int L_QuotAttrContentChar=159;
	public static final int Letter=160;
	public static final int MINUS=161;
	public static final int MINUS_SIGN=162;
	public static final int MOD=163;
	public static final int MODIFY=164;
	public static final int MODULE=165;
	public static final int MOST=166;
	public static final int NAMESPACE=167;
	public static final int NAMESPACE_NODE=168;
	public static final int NAN=169;
	public static final int NCNameChar=170;
	public static final int NCNameStartChar=171;
	public static final int NE=172;
	public static final int NEXT=173;
	public static final int NO=174;
	public static final int NODE=175;
	public static final int NODES=176;
	public static final int NOT=177;
	public static final int NOTEQUAL=178;
	public static final int NO_INHERIT=179;
	public static final int NO_PRESERVE=180;
	public static final int OCCURS=181;
	public static final int OF=182;
	public static final int ON=183;
	public static final int ONLY=184;
	public static final int OPTION=185;
	public static final int OR=186;
	public static final int ORDER=187;
	public static final int ORDERED=188;
	public static final int ORDERING=189;
	public static final int PARAGRAPH=190;
	public static final int PARAGRAPHS=191;
	public static final int PARENT=192;
	public static final int PATTERN_SEPARATOR=193;
	public static final int PERCENT=194;
	public static final int PER_MILLE=195;
	public static final int PHRASE=196;
	public static final int PI_END=197;
	public static final int PI_START=198;
	public static final int PLUS=199;
	public static final int PRAGMA_END=200;
	public static final int PRAGMA_START=201;
	public static final int PRECEDING=202;
	public static final int PRECEDING_SIBLING=203;
	public static final int PRESERVE=204;
	public static final int PREVIOUS=205;
	public static final int PRIVATE=206;
	public static final int PROCESSING_INSTRUCTION=207;
	public static final int QUESTION=208;
	public static final int QUOT=209;
	public static final int QUOT_ER=210;
	public static final int RBRACKET=211;
	public static final int RELATIONSHIP=212;
	public static final int RENAME=213;
	public static final int REPLACE=214;
	public static final int RETURN=215;
	public static final int RETURNING=216;
	public static final int REVALIDATION=217;
	public static final int RPAREN=218;
	public static final int RSQUARE=219;
	public static final int S=220;
	public static final int SAME=221;
	public static final int SATISFIES=222;
	public static final int SCHEMA=223;
	public static final int SCHEMA_ATTRIBUTE=224;
	public static final int SCHEMA_ELEMENT=225;
	public static final int SCORE=226;
	public static final int SELF=227;
	public static final int SEMICOLON=228;
	public static final int SENSITIVE=229;
	public static final int SENTENCE=230;
	public static final int SENTENCES=231;
	public static final int SKIP=232;
	public static final int SLASH=233;
	public static final int SLASH_SLASH=234;
	public static final int SLIDING=235;
	public static final int SMALLER=236;
	public static final int SMALLEREQ=237;
	public static final int SMALLER_SMALLER=238;
	public static final int SOME=239;
	public static final int STABLE=240;
	public static final int STAR=241;
	public static final int START=242;
	public static final int STEMMING=243;
	public static final int STOP=244;
	public static final int STRICT=245;
	public static final int STRIP=246;
	public static final int SU=247;
	public static final int SWITCH=248;
	public static final int TEXT=249;
	public static final int THEN=250;
	public static final int THESAURUS=251;
	public static final int TIMES=252;
	public static final int TO=253;
	public static final int TREAT=254;
	public static final int TRY=255;
	public static final int TUMBLING=256;
	public static final int TYPE=257;
	public static final int TYPESWITCH=258;
	public static final int UNION=259;
	public static final int UNIQUE=260;
	public static final int UNORDERED=261;
	public static final int UPDATING=262;
	public static final int UPPERCASE=263;
	public static final int USING=264;
	public static final int VALIDATE=265;
	public static final int VALUE=266;
	public static final int VARIABLE=267;
	public static final int VBAR=268;
	public static final int VERSION=269;
	public static final int WEIGHT=270;
	public static final int WHEN=271;
	public static final int WHERE=272;
	public static final int WHILE=273;
	public static final int WILDCARDS=274;
	public static final int WINDOW=275;
	public static final int WITH=276;
	public static final int WITHOUT=277;
	public static final int WORD=278;
	public static final int WORDS=279;
	public static final int XML_COMMENT_END=280;
	public static final int XML_COMMENT_START=281;
	public static final int XQUERY=282;
	public static final int ZERO_DIGIT=283;
	public static final int AtHints=284;
	public static final int AtomicOrUnionType=285;
	public static final int AtomicType=286;
	public static final int AttributeValueChar=287;
	public static final int BaseURIDecl=288;
	public static final int BinaryTest=289;
	public static final int BlockExpr=290;
	public static final int CommonContent=291;
	public static final int DefaultElementNamespace=292;
	public static final int DefaultNamespaceDecl=293;
	public static final int DefaultNamespaceDecls=294;
	public static final int DirAttributeList=295;
	public static final int DirAttributeValue=296;
	public static final int DirElemConstructor=297;
	public static final int DirElemContent=298;
	public static final int EXPLICITLY=299;
	public static final int ElementContentChar=300;
	public static final int EmptySequenceTest=301;
	public static final int EnclosedExpr=302;
	public static final int FTOptionDecls=303;
	public static final int FunctionDecl=304;
	public static final int FunctionTest=305;
	public static final int Imports=306;
	public static final int ItemTest=307;
	public static final int KindTest=308;
	public static final int L_AposStringLiteralChar=309;
	public static final int L_QuotStringLiteralChar=310;
	public static final int LibraryModule=311;
	public static final int MainModule=312;
	public static final int ModuleDecl=313;
	public static final int ModuleImport=314;
	public static final int NamespaceDecl=315;
	public static final int NamespaceDecls=316;
	public static final int NamespaceName=317;
	public static final int OptionDecl=318;
	public static final int OrderedDecls=319;
	public static final int Param=320;
	public static final int ParamList=321;
	public static final int Prolog=322;
	public static final int QName=323;
	public static final int QueryBody=324;
	public static final int ReturnType=325;
	public static final int SchemaImport=326;
	public static final int SchemaPrefix=327;
	public static final int SequenceType=328;
	public static final int Setter=329;
	public static final int Setters=330;
	public static final int StringLiteral=331;
	public static final int TypeDeclaration=332;
	public static final int UnaryExpr=333;
	public static final int VarDecl=334;
	public static final int VarDefaultValue=335;
	public static final int VarType=336;
	public static final int VarValue=337;
	public static final int VarVariableDecl=338;
	public static final int VersionDecl=339;
	public static final int VersionDeclEncoding=340;
	public static final int VersionDeclVersion=341;

	// delegates
	public XQDTParser[] getDelegates() {
		return new XQDTParser[] {};
	}

	// delegators


	public XQueryParser(TokenStream input) {
		this(input, new RecognizerSharedState());
	}
	public XQueryParser(TokenStream input, RecognizerSharedState state) {
		super(input, state);
	}

	protected TreeAdaptor adaptor = new CommonTreeAdaptor();

	public void setTreeAdaptor(TreeAdaptor adaptor) {
		this.adaptor = adaptor;
	}
	public TreeAdaptor getTreeAdaptor() {
		return adaptor;
	}
	@Override public String[] getTokenNames() { return XQueryParser.tokenNames; }
	@Override public String getGrammarFileName() { return "XQueryParser.g"; }


	// dummy list for warning elimination
	List<Stack<Object>> dummy1 = new ArrayList<Stack<Object>>();
	Map<Object, Object> dummy2 = new HashMap<Object, Object>();


	public static class p_Module_return extends ParserRuleReturnScope {
		XQDTCommonTree tree;
		@Override
		public XQDTCommonTree getTree() { return tree; }
	};


	// $ANTLR start "p_Module"
	// XQueryParser.g:129:1: p_Module : (vd= p_VersionDecl )? (lm= p_LibraryModule[$vd.tree] ->|mm= p_MainModule[$vd.tree] ->) EOF ;
	public final XQueryParser.p_Module_return p_Module() throws RecognitionException {
		XQueryParser.p_Module_return retval = new XQueryParser.p_Module_return();
		retval.start = input.LT(1);

		XQDTCommonTree root_0 = null;

		CommonToken EOF1=null;
		ParserRuleReturnScope vd =null;
		ParserRuleReturnScope lm =null;
		ParserRuleReturnScope mm =null;

		XQDTCommonTree EOF1_tree=null;
		RewriteRuleTokenStream stream_EOF=new RewriteRuleTokenStream(adaptor,"token EOF");
		RewriteRuleSubtreeStream stream_p_VersionDecl=new RewriteRuleSubtreeStream(adaptor,"rule p_VersionDecl");
		RewriteRuleSubtreeStream stream_p_LibraryModule=new RewriteRuleSubtreeStream(adaptor,"rule p_LibraryModule");
		RewriteRuleSubtreeStream stream_p_MainModule=new RewriteRuleSubtreeStream(adaptor,"rule p_MainModule");

		try {
			// XQueryParser.g:130:9: ( (vd= p_VersionDecl )? (lm= p_LibraryModule[$vd.tree] ->|mm= p_MainModule[$vd.tree] ->) EOF )
			// XQueryParser.g:130:11: (vd= p_VersionDecl )? (lm= p_LibraryModule[$vd.tree] ->|mm= p_MainModule[$vd.tree] ->) EOF
			{
			// XQueryParser.g:130:13: (vd= p_VersionDecl )?
			int alt1=2;
			int LA1_0 = input.LA(1);
			if ( (LA1_0==XQUERY) ) {
				int LA1_1 = input.LA(2);
				if ( (LA1_1==ENCODING||LA1_1==VERSION) ) {
					alt1=1;
				}
			}
			switch (alt1) {
				case 1 :
					// XQueryParser.g:130:13: vd= p_VersionDecl
					{
					pushFollow(FOLLOW_p_VersionDecl_in_p_Module508);
					vd=p_VersionDecl();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) stream_p_VersionDecl.add(vd.getTree());
					}
					break;

			}

			// XQueryParser.g:131:13: (lm= p_LibraryModule[$vd.tree] ->|mm= p_MainModule[$vd.tree] ->)
			int alt2=2;
			int LA2_0 = input.LA(1);
			if ( (LA2_0==MODULE) ) {
				int LA2_1 = input.LA(2);
				if ( (LA2_1==NAMESPACE) ) {
					alt2=1;
				}
				else if ( (LA2_1==AND||(LA2_1 >= CAST && LA2_1 <= CASTABLE)||LA2_1==COLON||LA2_1==COMMA||LA2_1==CONCAT||LA2_1==CONTAINS||LA2_1==DIV||(LA2_1 >= EQ && LA2_1 <= EQUAL)||LA2_1==EXCEPT||(LA2_1 >= GE && LA2_1 <= GREATER_GREATER)||LA2_1==GT||LA2_1==IDIV||LA2_1==INSTANCE||LA2_1==INTERSECT||LA2_1==IS||LA2_1==LE||(LA2_1 >= LPAREN && LA2_1 <= LT)||LA2_1==MINUS||LA2_1==MOD||LA2_1==NE||LA2_1==NOTEQUAL||LA2_1==OR||LA2_1==PLUS||(LA2_1 >= SLASH && LA2_1 <= SLASH_SLASH)||(LA2_1 >= SMALLER && LA2_1 <= SMALLER_SMALLER)||LA2_1==STAR||(LA2_1 >= TO && LA2_1 <= TREAT)||LA2_1==UNION||LA2_1==VBAR) ) {
					alt2=2;
				}
				else if ( (LA2_1==SEMICOLON) && ((lc(XQS)))) {
					alt2=2;
				}
				else if ( (LA2_1==EOF) ) {
					alt2=2;
				}

				else {
					if (state.backtracking>0) {state.failed=true; return retval;}
					int nvaeMark = input.mark();
					try {
						input.consume();
						NoViableAltException nvae =
							new NoViableAltException("", 2, 1, input);
						throw nvae;
					} finally {
						input.rewind(nvaeMark);
					}
				}

			}
			else if ( ((LA2_0 >= ANCESTOR && LA2_0 <= ANCESTOR_OR_SELF)||LA2_0==APOS||(LA2_0 >= ATTRIBUTE && LA2_0 <= ATTR_SIGN)||LA2_0==BINARY||LA2_0==BREAK||LA2_0==CHILD||LA2_0==COMMENT||(LA2_0 >= CONTINUE && LA2_0 <= COPY)||LA2_0==DECLARE||(LA2_0 >= DELETE && LA2_0 <= DESCENDANT_OR_SELF)||(LA2_0 >= DOCUMENT && LA2_0 <= DOT_DOT)||LA2_0==ELEMENT||LA2_0==EVERY||LA2_0==EXIT||(LA2_0 >= FOLLOWING && LA2_0 <= FOR)||(LA2_0 >= IF && LA2_0 <= IMPORT)||LA2_0==INSERT||LA2_0==LBRACKET||LA2_0==LET||LA2_0==LPAREN||(LA2_0 >= L_DecimalLiteral && LA2_0 <= L_DoubleLiteral)||LA2_0==L_IntegerLiteral||LA2_0==L_Pragma||LA2_0==MINUS||(LA2_0 >= NAMESPACE && LA2_0 <= NAMESPACE_NODE)||LA2_0==NODE||LA2_0==ORDERED||LA2_0==PARENT||LA2_0==PLUS||(LA2_0 >= PRECEDING && LA2_0 <= PRECEDING_SIBLING)||LA2_0==PROCESSING_INSTRUCTION||LA2_0==QUOT||(LA2_0 >= RENAME && LA2_0 <= REPLACE)||(LA2_0 >= SCHEMA_ATTRIBUTE && LA2_0 <= SCHEMA_ELEMENT)||LA2_0==SELF||(LA2_0 >= SLASH && LA2_0 <= SLASH_SLASH)||LA2_0==SMALLER||LA2_0==SOME||LA2_0==STAR||(LA2_0 >= SWITCH && LA2_0 <= TEXT)||LA2_0==TRY||LA2_0==TYPESWITCH||(LA2_0 >= UNORDERED && LA2_0 <= UPDATING)||LA2_0==VALIDATE||LA2_0==VARIABLE||LA2_0==WHILE) ) {
				alt2=2;
			}
			else if ( (LA2_0==ANN_PERCENT) && ((lc(XQS)))) {
				alt2=2;
			}
			else if ( ((LA2_0 >= AFTER && LA2_0 <= ALLOWING)||LA2_0==AMP_ER||LA2_0==AND||LA2_0==ANY||(LA2_0 >= APOS_ER && LA2_0 <= AT)||(LA2_0 >= BASE_URI && LA2_0 <= BEFORE)||LA2_0==BOUNDARY_SPACE||(LA2_0 >= BY && LA2_0 <= CATCH)||LA2_0==CHECK||(LA2_0 >= COLLATION && LA2_0 <= COLLECTION)||(LA2_0 >= CONSTRAINT && LA2_0 <= CONTEXT)||(LA2_0 >= COPY_NAMESPACES && LA2_0 <= DECIMAL_SEPARATOR)||LA2_0==DEFAULT||(LA2_0 >= DESCENDING && LA2_0 <= DIV)||(LA2_0 >= ELSE && LA2_0 <= EMPTY)||(LA2_0 >= EMPTY_SEQUENCE && LA2_0 <= EQ)||(LA2_0 >= EXACTLY && LA2_0 <= EXCEPT)||(LA2_0 >= EXTERNAL && LA2_0 <= FIRST)||(LA2_0 >= FOREACH && LA2_0 <= GE)||(LA2_0 >= GREATEST && LA2_0 <= GT)||LA2_0==IDIV||(LA2_0 >= IN && LA2_0 <= INSENSITIVE)||(LA2_0 >= INSTANCE && LA2_0 <= LAX)||(LA2_0 >= LE && LA2_0 <= LEAST)||(LA2_0 >= LEVELS && LA2_0 <= LOWERCASE)||LA2_0==LT||LA2_0==L_NCName||(LA2_0 >= MINUS_SIGN && LA2_0 <= MODIFY)||LA2_0==MOST||LA2_0==NAN||(LA2_0 >= NE && LA2_0 <= NO)||(LA2_0 >= NODES && LA2_0 <= NOT)||(LA2_0 >= NO_INHERIT && LA2_0 <= ORDER)||(LA2_0 >= ORDERING && LA2_0 <= PARAGRAPHS)||(LA2_0 >= PATTERN_SEPARATOR && LA2_0 <= PHRASE)||(LA2_0 >= PRESERVE && LA2_0 <= PRIVATE)||LA2_0==QUOT_ER||LA2_0==RELATIONSHIP||(LA2_0 >= RETURN && LA2_0 <= REVALIDATION)||(LA2_0 >= SAME && LA2_0 <= SCHEMA)||LA2_0==SCORE||(LA2_0 >= SENSITIVE && LA2_0 <= SKIP)||LA2_0==SLIDING||LA2_0==STABLE||(LA2_0 >= START && LA2_0 <= STRIP)||(LA2_0 >= THEN && LA2_0 <= TREAT)||(LA2_0 >= TUMBLING && LA2_0 <= TYPE)||(LA2_0 >= UNION && LA2_0 <= UNIQUE)||(LA2_0 >= UPPERCASE && LA2_0 <= USING)||LA2_0==VALUE||(LA2_0 >= VERSION && LA2_0 <= WHERE)||(LA2_0 >= WILDCARDS && LA2_0 <= WORDS)||(LA2_0 >= XQUERY && LA2_0 <= ZERO_DIGIT)||LA2_0==EXPLICITLY) ) {
				alt2=2;
			}
			else if ( (LA2_0==EOF) && ((lc(XQS)))) {
				alt2=2;
			}

			switch (alt2) {
				case 1 :
					// XQueryParser.g:132:15: lm= p_LibraryModule[$vd.tree]
					{
					pushFollow(FOLLOW_p_LibraryModule_in_p_Module541);
					lm=p_LibraryModule((vd!=null?((XQDTCommonTree)vd.getTree()):null));
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) stream_p_LibraryModule.add(lm.getTree());
					// AST REWRITE
					// elements: 
					// token labels: 
					// rule labels: retval
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					if ( state.backtracking==0 ) {
					retval.tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.getTree():null);

					root_0 = (XQDTCommonTree)adaptor.nil();
					// 132:44: ->
					{
						adaptor.addChild(root_0, (lm!=null?((XQDTCommonTree)lm.getTree()):null));
					}


					retval.tree = root_0;
					}

					}
					break;
				case 2 :
					// XQueryParser.g:133:15: mm= p_MainModule[$vd.tree]
					{
					pushFollow(FOLLOW_p_MainModule_in_p_Module564);
					mm=p_MainModule((vd!=null?((XQDTCommonTree)vd.getTree()):null));
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) stream_p_MainModule.add(mm.getTree());
					// AST REWRITE
					// elements: 
					// token labels: 
					// rule labels: retval
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					if ( state.backtracking==0 ) {
					retval.tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.getTree():null);

					root_0 = (XQDTCommonTree)adaptor.nil();
					// 133:44: ->
					{
						adaptor.addChild(root_0, (mm!=null?((XQDTCommonTree)mm.getTree()):null));
					}


					retval.tree = root_0;
					}

					}
					break;

			}

			EOF1=(CommonToken)match(input,EOF,FOLLOW_EOF_in_p_Module588); if (state.failed) return retval; 
			if ( state.backtracking==0 ) stream_EOF.add(EOF1);

			}

			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (XQDTCommonTree)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
			retval.tree = (XQDTCommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "p_Module"


	public static class p_VersionDecl_return extends ParserRuleReturnScope {
		XQDTCommonTree tree;
		@Override
		public XQDTCommonTree getTree() { return tree; }
	};


	// $ANTLR start "p_VersionDecl"
	// XQueryParser.g:138:1: p_VersionDecl : k= XQUERY ( (k= ENCODING enc= p_StringLiteral ) | (k= VERSION ver= p_StringLiteral (k= ENCODING enc= p_StringLiteral )? ) ) SEMICOLON -> ^( VersionDecl ^( VersionDeclVersion ( $ver)? ) ^( VersionDeclEncoding ( $enc)? ) ) ;
	public final XQueryParser.p_VersionDecl_return p_VersionDecl() throws RecognitionException {
		XQueryParser.p_VersionDecl_return retval = new XQueryParser.p_VersionDecl_return();
		retval.start = input.LT(1);

		XQDTCommonTree root_0 = null;

		CommonToken k=null;
		CommonToken SEMICOLON2=null;
		ParserRuleReturnScope enc =null;
		ParserRuleReturnScope ver =null;

		XQDTCommonTree k_tree=null;
		XQDTCommonTree SEMICOLON2_tree=null;
		RewriteRuleTokenStream stream_ENCODING=new RewriteRuleTokenStream(adaptor,"token ENCODING");
		RewriteRuleTokenStream stream_VERSION=new RewriteRuleTokenStream(adaptor,"token VERSION");
		RewriteRuleTokenStream stream_SEMICOLON=new RewriteRuleTokenStream(adaptor,"token SEMICOLON");
		RewriteRuleTokenStream stream_XQUERY=new RewriteRuleTokenStream(adaptor,"token XQUERY");
		RewriteRuleSubtreeStream stream_p_StringLiteral=new RewriteRuleSubtreeStream(adaptor,"rule p_StringLiteral");

		try {
			// XQueryParser.g:139:9: (k= XQUERY ( (k= ENCODING enc= p_StringLiteral ) | (k= VERSION ver= p_StringLiteral (k= ENCODING enc= p_StringLiteral )? ) ) SEMICOLON -> ^( VersionDecl ^( VersionDeclVersion ( $ver)? ) ^( VersionDeclEncoding ( $enc)? ) ) )
			// XQueryParser.g:139:11: k= XQUERY ( (k= ENCODING enc= p_StringLiteral ) | (k= VERSION ver= p_StringLiteral (k= ENCODING enc= p_StringLiteral )? ) ) SEMICOLON
			{
			k=(CommonToken)match(input,XQUERY,FOLLOW_XQUERY_in_p_VersionDecl616); if (state.failed) return retval; 
			if ( state.backtracking==0 ) stream_XQUERY.add(k);

			if ( state.backtracking==0 ) {ak(k);}
			// XQueryParser.g:139:30: ( (k= ENCODING enc= p_StringLiteral ) | (k= VERSION ver= p_StringLiteral (k= ENCODING enc= p_StringLiteral )? ) )
			int alt4=2;
			int LA4_0 = input.LA(1);
			if ( (LA4_0==ENCODING) ) {
				alt4=1;
			}
			else if ( (LA4_0==VERSION) ) {
				alt4=2;
			}

			else {
				if (state.backtracking>0) {state.failed=true; return retval;}
				NoViableAltException nvae =
					new NoViableAltException("", 4, 0, input);
				throw nvae;
			}

			switch (alt4) {
				case 1 :
					// XQueryParser.g:139:31: (k= ENCODING enc= p_StringLiteral )
					{
					// XQueryParser.g:139:31: (k= ENCODING enc= p_StringLiteral )
					// XQueryParser.g:139:32: k= ENCODING enc= p_StringLiteral
					{
					k=(CommonToken)match(input,ENCODING,FOLLOW_ENCODING_in_p_VersionDecl624); if (state.failed) return retval; 
					if ( state.backtracking==0 ) stream_ENCODING.add(k);

					if ( state.backtracking==0 ) {ak(k);}
					pushFollow(FOLLOW_p_StringLiteral_in_p_VersionDecl630);
					enc=p_StringLiteral();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) stream_p_StringLiteral.add(enc.getTree());
					}

					}
					break;
				case 2 :
					// XQueryParser.g:140:13: (k= VERSION ver= p_StringLiteral (k= ENCODING enc= p_StringLiteral )? )
					{
					// XQueryParser.g:140:13: (k= VERSION ver= p_StringLiteral (k= ENCODING enc= p_StringLiteral )? )
					// XQueryParser.g:140:14: k= VERSION ver= p_StringLiteral (k= ENCODING enc= p_StringLiteral )?
					{
					k=(CommonToken)match(input,VERSION,FOLLOW_VERSION_in_p_VersionDecl651); if (state.failed) return retval; 
					if ( state.backtracking==0 ) stream_VERSION.add(k);

					if ( state.backtracking==0 ) {ak(k);}
					pushFollow(FOLLOW_p_StringLiteral_in_p_VersionDecl657);
					ver=p_StringLiteral();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) stream_p_StringLiteral.add(ver.getTree());
					if ( state.backtracking==0 ) {setLanguageVersion(((XQDTCommonTree)ver.getTree()).getChild(0).getText());}
					// XQueryParser.g:140:131: (k= ENCODING enc= p_StringLiteral )?
					int alt3=2;
					int LA3_0 = input.LA(1);
					if ( (LA3_0==ENCODING) ) {
						alt3=1;
					}
					switch (alt3) {
						case 1 :
							// XQueryParser.g:140:132: k= ENCODING enc= p_StringLiteral
							{
							k=(CommonToken)match(input,ENCODING,FOLLOW_ENCODING_in_p_VersionDecl664); if (state.failed) return retval; 
							if ( state.backtracking==0 ) stream_ENCODING.add(k);

							if ( state.backtracking==0 ) {ak(k);}
							pushFollow(FOLLOW_p_StringLiteral_in_p_VersionDecl670);
							enc=p_StringLiteral();
							state._fsp--;
							if (state.failed) return retval;
							if ( state.backtracking==0 ) stream_p_StringLiteral.add(enc.getTree());
							}
							break;

					}

					}

					}
					break;

			}

			SEMICOLON2=(CommonToken)match(input,SEMICOLON,FOLLOW_SEMICOLON_in_p_VersionDecl676); if (state.failed) return retval; 
			if ( state.backtracking==0 ) stream_SEMICOLON.add(SEMICOLON2);

			// AST REWRITE
			// elements: enc, ver
			// token labels: 
			// rule labels: retval, ver, enc
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			if ( state.backtracking==0 ) {
			retval.tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.getTree():null);
			RewriteRuleSubtreeStream stream_ver=new RewriteRuleSubtreeStream(adaptor,"rule ver",ver!=null?ver.getTree():null);
			RewriteRuleSubtreeStream stream_enc=new RewriteRuleSubtreeStream(adaptor,"rule enc",enc!=null?enc.getTree():null);

			root_0 = (XQDTCommonTree)adaptor.nil();
			// 141:17: -> ^( VersionDecl ^( VersionDeclVersion ( $ver)? ) ^( VersionDeclEncoding ( $enc)? ) )
			{
				// XQueryParser.g:141:20: ^( VersionDecl ^( VersionDeclVersion ( $ver)? ) ^( VersionDeclEncoding ( $enc)? ) )
				{
				XQDTCommonTree root_1 = (XQDTCommonTree)adaptor.nil();
				root_1 = (XQDTCommonTree)adaptor.becomeRoot((XQDTCommonTree)adaptor.create(VersionDecl, "VersionDecl"), root_1);
				// XQueryParser.g:141:34: ^( VersionDeclVersion ( $ver)? )
				{
				XQDTCommonTree root_2 = (XQDTCommonTree)adaptor.nil();
				root_2 = (XQDTCommonTree)adaptor.becomeRoot((XQDTCommonTree)adaptor.create(VersionDeclVersion, "VersionDeclVersion"), root_2);
				// XQueryParser.g:141:56: ( $ver)?
				if ( stream_ver.hasNext() ) {
					adaptor.addChild(root_2, stream_ver.nextTree());
				}
				stream_ver.reset();

				adaptor.addChild(root_1, root_2);
				}

				// XQueryParser.g:141:62: ^( VersionDeclEncoding ( $enc)? )
				{
				XQDTCommonTree root_2 = (XQDTCommonTree)adaptor.nil();
				root_2 = (XQDTCommonTree)adaptor.becomeRoot((XQDTCommonTree)adaptor.create(VersionDeclEncoding, "VersionDeclEncoding"), root_2);
				// XQueryParser.g:141:85: ( $enc)?
				if ( stream_enc.hasNext() ) {
					adaptor.addChild(root_2, stream_enc.nextTree());
				}
				stream_enc.reset();

				adaptor.addChild(root_1, root_2);
				}

				adaptor.addChild(root_0, root_1);
				}

			}


			retval.tree = root_0;
			}

			}

			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (XQDTCommonTree)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
			retval.tree = (XQDTCommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "p_VersionDecl"


	public static class p_MainModule_return extends ParserRuleReturnScope {
		XQDTCommonTree tree;
		@Override
		public XQDTCommonTree getTree() { return tree; }
	};


	// $ANTLR start "p_MainModule"
	// XQueryParser.g:145:1: p_MainModule[CommonTree vd] : pm_Prolog pm_QueryBody -> ^( MainModule pm_Prolog ) ;
	public final XQueryParser.p_MainModule_return p_MainModule(CommonTree vd) throws RecognitionException {
		XQueryParser.p_MainModule_return retval = new XQueryParser.p_MainModule_return();
		retval.start = input.LT(1);

		XQDTCommonTree root_0 = null;

		ParserRuleReturnScope pm_Prolog3 =null;
		ParserRuleReturnScope pm_QueryBody4 =null;

		RewriteRuleSubtreeStream stream_pm_QueryBody=new RewriteRuleSubtreeStream(adaptor,"rule pm_QueryBody");
		RewriteRuleSubtreeStream stream_pm_Prolog=new RewriteRuleSubtreeStream(adaptor,"rule pm_Prolog");

		try {
			// XQueryParser.g:146:9: ( pm_Prolog pm_QueryBody -> ^( MainModule pm_Prolog ) )
			// XQueryParser.g:146:11: pm_Prolog pm_QueryBody
			{
			pushFollow(FOLLOW_pm_Prolog_in_p_MainModule742);
			pm_Prolog3=pm_Prolog();
			state._fsp--;
			if (state.failed) return retval;
			if ( state.backtracking==0 ) stream_pm_Prolog.add(pm_Prolog3.getTree());
			pushFollow(FOLLOW_pm_QueryBody_in_p_MainModule744);
			pm_QueryBody4=pm_QueryBody();
			state._fsp--;
			if (state.failed) return retval;
			if ( state.backtracking==0 ) stream_pm_QueryBody.add(pm_QueryBody4.getTree());
			// AST REWRITE
			// elements: pm_Prolog
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			if ( state.backtracking==0 ) {
			retval.tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.getTree():null);

			root_0 = (XQDTCommonTree)adaptor.nil();
			// 147:17: -> ^( MainModule pm_Prolog )
			{
				// XQueryParser.g:147:20: ^( MainModule pm_Prolog )
				{
				XQDTCommonTree root_1 = (XQDTCommonTree)adaptor.nil();
				root_1 = (XQDTCommonTree)adaptor.becomeRoot((XQDTCommonTree)adaptor.create(MainModule, "MainModule"), root_1);
				adaptor.addChild(root_1, vd);
				adaptor.addChild(root_1, stream_pm_Prolog.nextTree());
				adaptor.addChild(root_0, root_1);
				}

			}


			retval.tree = root_0;
			}

			}

			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (XQDTCommonTree)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
			retval.tree = (XQDTCommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "p_MainModule"


	public static class p_LibraryModule_return extends ParserRuleReturnScope {
		XQDTCommonTree tree;
		@Override
		public XQDTCommonTree getTree() { return tree; }
	};


	// $ANTLR start "p_LibraryModule"
	// XQueryParser.g:151:1: p_LibraryModule[CommonTree vd] : p_ModuleDecl pm_Prolog -> ^( LibraryModule p_ModuleDecl pm_Prolog ) ;
	public final XQueryParser.p_LibraryModule_return p_LibraryModule(CommonTree vd) throws RecognitionException {
		XQueryParser.p_LibraryModule_return retval = new XQueryParser.p_LibraryModule_return();
		retval.start = input.LT(1);

		XQDTCommonTree root_0 = null;

		ParserRuleReturnScope p_ModuleDecl5 =null;
		ParserRuleReturnScope pm_Prolog6 =null;

		RewriteRuleSubtreeStream stream_pm_Prolog=new RewriteRuleSubtreeStream(adaptor,"rule pm_Prolog");
		RewriteRuleSubtreeStream stream_p_ModuleDecl=new RewriteRuleSubtreeStream(adaptor,"rule p_ModuleDecl");

		try {
			// XQueryParser.g:152:9: ( p_ModuleDecl pm_Prolog -> ^( LibraryModule p_ModuleDecl pm_Prolog ) )
			// XQueryParser.g:152:11: p_ModuleDecl pm_Prolog
			{
			pushFollow(FOLLOW_p_ModuleDecl_in_p_LibraryModule800);
			p_ModuleDecl5=p_ModuleDecl();
			state._fsp--;
			if (state.failed) return retval;
			if ( state.backtracking==0 ) stream_p_ModuleDecl.add(p_ModuleDecl5.getTree());
			pushFollow(FOLLOW_pm_Prolog_in_p_LibraryModule802);
			pm_Prolog6=pm_Prolog();
			state._fsp--;
			if (state.failed) return retval;
			if ( state.backtracking==0 ) stream_pm_Prolog.add(pm_Prolog6.getTree());
			// AST REWRITE
			// elements: pm_Prolog, p_ModuleDecl
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			if ( state.backtracking==0 ) {
			retval.tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.getTree():null);

			root_0 = (XQDTCommonTree)adaptor.nil();
			// 153:17: -> ^( LibraryModule p_ModuleDecl pm_Prolog )
			{
				// XQueryParser.g:153:20: ^( LibraryModule p_ModuleDecl pm_Prolog )
				{
				XQDTCommonTree root_1 = (XQDTCommonTree)adaptor.nil();
				root_1 = (XQDTCommonTree)adaptor.becomeRoot((XQDTCommonTree)adaptor.create(LibraryModule, "LibraryModule"), root_1);
				adaptor.addChild(root_1, vd);
				adaptor.addChild(root_1, stream_p_ModuleDecl.nextTree());
				adaptor.addChild(root_1, stream_pm_Prolog.nextTree());
				adaptor.addChild(root_0, root_1);
				}

			}


			retval.tree = root_0;
			}

			}

			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (XQDTCommonTree)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
			retval.tree = (XQDTCommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "p_LibraryModule"


	public static class p_ModuleDecl_return extends ParserRuleReturnScope {
		XQDTCommonTree tree;
		@Override
		public XQDTCommonTree getTree() { return tree; }
	};


	// $ANTLR start "p_ModuleDecl"
	// XQueryParser.g:157:1: p_ModuleDecl :k+= MODULE k+= NAMESPACE p_NCName EQUAL p_StringLiteral SEMICOLON -> ^( ModuleDecl p_NCName p_StringLiteral ) ;
	public final XQueryParser.p_ModuleDecl_return p_ModuleDecl() throws RecognitionException {
		XQueryParser.p_ModuleDecl_return retval = new XQueryParser.p_ModuleDecl_return();
		retval.start = input.LT(1);

		XQDTCommonTree root_0 = null;

		CommonToken EQUAL8=null;
		CommonToken SEMICOLON10=null;
		CommonToken k=null;
		List<Object> list_k=null;
		ParserRuleReturnScope p_NCName7 =null;
		ParserRuleReturnScope p_StringLiteral9 =null;

		XQDTCommonTree EQUAL8_tree=null;
		XQDTCommonTree SEMICOLON10_tree=null;
		XQDTCommonTree k_tree=null;
		RewriteRuleTokenStream stream_SEMICOLON=new RewriteRuleTokenStream(adaptor,"token SEMICOLON");
		RewriteRuleTokenStream stream_MODULE=new RewriteRuleTokenStream(adaptor,"token MODULE");
		RewriteRuleTokenStream stream_NAMESPACE=new RewriteRuleTokenStream(adaptor,"token NAMESPACE");
		RewriteRuleTokenStream stream_EQUAL=new RewriteRuleTokenStream(adaptor,"token EQUAL");
		RewriteRuleSubtreeStream stream_p_NCName=new RewriteRuleSubtreeStream(adaptor,"rule p_NCName");
		RewriteRuleSubtreeStream stream_p_StringLiteral=new RewriteRuleSubtreeStream(adaptor,"rule p_StringLiteral");

		try {
			// XQueryParser.g:158:9: (k+= MODULE k+= NAMESPACE p_NCName EQUAL p_StringLiteral SEMICOLON -> ^( ModuleDecl p_NCName p_StringLiteral ) )
			// XQueryParser.g:158:11: k+= MODULE k+= NAMESPACE p_NCName EQUAL p_StringLiteral SEMICOLON
			{
			k=(CommonToken)match(input,MODULE,FOLLOW_MODULE_in_p_ModuleDecl858); if (state.failed) return retval; 
			if ( state.backtracking==0 ) stream_MODULE.add(k);

			if (list_k==null) list_k=new ArrayList<Object>();
			list_k.add(k);
			k=(CommonToken)match(input,NAMESPACE,FOLLOW_NAMESPACE_in_p_ModuleDecl862); if (state.failed) return retval; 
			if ( state.backtracking==0 ) stream_NAMESPACE.add(k);

			if (list_k==null) list_k=new ArrayList<Object>();
			list_k.add(k);
			if ( state.backtracking==0 ) {ak(list_k);}
			pushFollow(FOLLOW_p_NCName_in_p_ModuleDecl866);
			p_NCName7=p_NCName();
			state._fsp--;
			if (state.failed) return retval;
			if ( state.backtracking==0 ) stream_p_NCName.add(p_NCName7.getTree());
			EQUAL8=(CommonToken)match(input,EQUAL,FOLLOW_EQUAL_in_p_ModuleDecl868); if (state.failed) return retval; 
			if ( state.backtracking==0 ) stream_EQUAL.add(EQUAL8);

			pushFollow(FOLLOW_p_StringLiteral_in_p_ModuleDecl870);
			p_StringLiteral9=p_StringLiteral();
			state._fsp--;
			if (state.failed) return retval;
			if ( state.backtracking==0 ) stream_p_StringLiteral.add(p_StringLiteral9.getTree());
			SEMICOLON10=(CommonToken)match(input,SEMICOLON,FOLLOW_SEMICOLON_in_p_ModuleDecl872); if (state.failed) return retval; 
			if ( state.backtracking==0 ) stream_SEMICOLON.add(SEMICOLON10);

			// AST REWRITE
			// elements: p_NCName, p_StringLiteral
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			if ( state.backtracking==0 ) {
			retval.tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.getTree():null);

			root_0 = (XQDTCommonTree)adaptor.nil();
			// 159:17: -> ^( ModuleDecl p_NCName p_StringLiteral )
			{
				// XQueryParser.g:159:21: ^( ModuleDecl p_NCName p_StringLiteral )
				{
				XQDTCommonTree root_1 = (XQDTCommonTree)adaptor.nil();
				root_1 = (XQDTCommonTree)adaptor.becomeRoot((XQDTCommonTree)adaptor.create(ModuleDecl, "ModuleDecl"), root_1);
				adaptor.addChild(root_1, stream_p_NCName.nextTree());
				adaptor.addChild(root_1, stream_p_StringLiteral.nextTree());
				adaptor.addChild(root_0, root_1);
				}

			}


			retval.tree = root_0;
			}

			}

			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (XQDTCommonTree)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
			retval.tree = (XQDTCommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "p_ModuleDecl"


	public static class pm_Prolog_return extends ParserRuleReturnScope {
		XQDTCommonTree tree;
		@Override
		public XQDTCommonTree getTree() { return tree; }
	};


	// $ANTLR start "pm_Prolog"
	// XQueryParser.g:165:1: pm_Prolog : ( (dnd+= pm_DefaultNamespaceDecl |s+= p_Setter |nd+= pm_NamespaceDecl |i+= p_Import |fto+= pm_FTOptionDecl ) )* (od+= pg_OrderedDecl )* -> ^( Prolog ^( DefaultNamespaceDecls ( $dnd)* ) ^( Setters ( $s)* ) ^( NamespaceDecls ( $nd)* ) ^( Imports ( $i)* ) ^( FTOptionDecls ( $fto)* ) ^( OrderedDecls ( $od)* ) ) ;
	public final XQueryParser.pm_Prolog_return pm_Prolog() throws RecognitionException {
		XQueryParser.pm_Prolog_return retval = new XQueryParser.pm_Prolog_return();
		retval.start = input.LT(1);

		XQDTCommonTree root_0 = null;

		List<Object> list_dnd=null;
		List<Object> list_s=null;
		List<Object> list_nd=null;
		List<Object> list_i=null;
		List<Object> list_fto=null;
		List<Object> list_od=null;
		RuleReturnScope dnd = null;
		RuleReturnScope s = null;
		RuleReturnScope nd = null;
		RuleReturnScope i = null;
		RuleReturnScope fto = null;
		RuleReturnScope od = null;
		RewriteRuleSubtreeStream stream_pm_NamespaceDecl=new RewriteRuleSubtreeStream(adaptor,"rule pm_NamespaceDecl");
		RewriteRuleSubtreeStream stream_p_Import=new RewriteRuleSubtreeStream(adaptor,"rule p_Import");
		RewriteRuleSubtreeStream stream_p_Setter=new RewriteRuleSubtreeStream(adaptor,"rule p_Setter");
		RewriteRuleSubtreeStream stream_pm_DefaultNamespaceDecl=new RewriteRuleSubtreeStream(adaptor,"rule pm_DefaultNamespaceDecl");
		RewriteRuleSubtreeStream stream_pg_OrderedDecl=new RewriteRuleSubtreeStream(adaptor,"rule pg_OrderedDecl");
		RewriteRuleSubtreeStream stream_pm_FTOptionDecl=new RewriteRuleSubtreeStream(adaptor,"rule pm_FTOptionDecl");

		try {
			// XQueryParser.g:166:9: ( ( (dnd+= pm_DefaultNamespaceDecl |s+= p_Setter |nd+= pm_NamespaceDecl |i+= p_Import |fto+= pm_FTOptionDecl ) )* (od+= pg_OrderedDecl )* -> ^( Prolog ^( DefaultNamespaceDecls ( $dnd)* ) ^( Setters ( $s)* ) ^( NamespaceDecls ( $nd)* ) ^( Imports ( $i)* ) ^( FTOptionDecls ( $fto)* ) ^( OrderedDecls ( $od)* ) ) )
			// XQueryParser.g:166:11: ( (dnd+= pm_DefaultNamespaceDecl |s+= p_Setter |nd+= pm_NamespaceDecl |i+= p_Import |fto+= pm_FTOptionDecl ) )* (od+= pg_OrderedDecl )*
			{
			// XQueryParser.g:166:11: ( (dnd+= pm_DefaultNamespaceDecl |s+= p_Setter |nd+= pm_NamespaceDecl |i+= p_Import |fto+= pm_FTOptionDecl ) )*
			loop6:
			while (true) {
				int alt6=2;
				int LA6_0 = input.LA(1);
				if ( (LA6_0==DECLARE) ) {
					int LA6_1 = input.LA(2);
					if ( (LA6_1==REVALIDATION) && ((lc(XQU)))) {
						alt6=1;
					}
					else if ( (LA6_1==BASE_URI||LA6_1==BOUNDARY_SPACE||LA6_1==CONSTRUCTION||LA6_1==COPY_NAMESPACES||LA6_1==DECIMAL_FORMAT||LA6_1==DEFAULT||LA6_1==FT_OPTION||LA6_1==NAMESPACE||LA6_1==ORDERING) ) {
						alt6=1;
					}

				}
				else if ( (LA6_0==IMPORT) ) {
					int LA6_4 = input.LA(2);
					if ( (LA6_4==MODULE||LA6_4==SCHEMA) ) {
						alt6=1;
					}

				}

				switch (alt6) {
				case 1 :
					// XQueryParser.g:166:12: (dnd+= pm_DefaultNamespaceDecl |s+= p_Setter |nd+= pm_NamespaceDecl |i+= p_Import |fto+= pm_FTOptionDecl )
					{
					// XQueryParser.g:166:12: (dnd+= pm_DefaultNamespaceDecl |s+= p_Setter |nd+= pm_NamespaceDecl |i+= p_Import |fto+= pm_FTOptionDecl )
					int alt5=5;
					int LA5_0 = input.LA(1);
					if ( (LA5_0==DECLARE) ) {
						int LA5_1 = input.LA(2);
						if ( (LA5_1==REVALIDATION) && ((lc(XQU)))) {
							alt5=2;
						}
						else if ( (LA5_1==FT_OPTION) ) {
							alt5=5;
						}
						else if ( (LA5_1==DEFAULT) ) {
							int LA5_5 = input.LA(3);
							if ( (LA5_5==ELEMENT||LA5_5==FUNCTION) ) {
								alt5=1;
							}
							else if ( (LA5_5==COLLATION||LA5_5==DECIMAL_FORMAT||LA5_5==ORDER) ) {
								alt5=2;
							}

							else {
								if (state.backtracking>0) {state.failed=true; return retval;}
								int nvaeMark = input.mark();
								try {
									for (int nvaeConsume = 0; nvaeConsume < 3 - 1; nvaeConsume++) {
										input.consume();
									}
									NoViableAltException nvae =
										new NoViableAltException("", 5, 5, input);
									throw nvae;
								} finally {
									input.rewind(nvaeMark);
								}
							}

						}
						else if ( (LA5_1==BASE_URI||LA5_1==BOUNDARY_SPACE||LA5_1==CONSTRUCTION||LA5_1==COPY_NAMESPACES||LA5_1==DECIMAL_FORMAT||LA5_1==ORDERING) ) {
							alt5=2;
						}
						else if ( (LA5_1==NAMESPACE) ) {
							alt5=3;
						}

						else {
							if (state.backtracking>0) {state.failed=true; return retval;}
							int nvaeMark = input.mark();
							try {
								input.consume();
								NoViableAltException nvae =
									new NoViableAltException("", 5, 1, input);
								throw nvae;
							} finally {
								input.rewind(nvaeMark);
							}
						}

					}
					else if ( (LA5_0==IMPORT) ) {
						alt5=4;
					}

					else {
						if (state.backtracking>0) {state.failed=true; return retval;}
						NoViableAltException nvae =
							new NoViableAltException("", 5, 0, input);
						throw nvae;
					}

					switch (alt5) {
						case 1 :
							// XQueryParser.g:166:13: dnd+= pm_DefaultNamespaceDecl
							{
							pushFollow(FOLLOW_pm_DefaultNamespaceDecl_in_pm_Prolog931);
							dnd=pm_DefaultNamespaceDecl();
							state._fsp--;
							if (state.failed) return retval;
							if ( state.backtracking==0 ) stream_pm_DefaultNamespaceDecl.add(dnd.getTree());
							if (list_dnd==null) list_dnd=new ArrayList<Object>();
							list_dnd.add(dnd.getTree());
							}
							break;
						case 2 :
							// XQueryParser.g:166:44: s+= p_Setter
							{
							pushFollow(FOLLOW_p_Setter_in_pm_Prolog937);
							s=p_Setter();
							state._fsp--;
							if (state.failed) return retval;
							if ( state.backtracking==0 ) stream_p_Setter.add(s.getTree());
							if (list_s==null) list_s=new ArrayList<Object>();
							list_s.add(s.getTree());
							}
							break;
						case 3 :
							// XQueryParser.g:166:58: nd+= pm_NamespaceDecl
							{
							pushFollow(FOLLOW_pm_NamespaceDecl_in_pm_Prolog943);
							nd=pm_NamespaceDecl();
							state._fsp--;
							if (state.failed) return retval;
							if ( state.backtracking==0 ) stream_pm_NamespaceDecl.add(nd.getTree());
							if (list_nd==null) list_nd=new ArrayList<Object>();
							list_nd.add(nd.getTree());
							}
							break;
						case 4 :
							// XQueryParser.g:166:81: i+= p_Import
							{
							pushFollow(FOLLOW_p_Import_in_pm_Prolog949);
							i=p_Import();
							state._fsp--;
							if (state.failed) return retval;
							if ( state.backtracking==0 ) stream_p_Import.add(i.getTree());
							if (list_i==null) list_i=new ArrayList<Object>();
							list_i.add(i.getTree());
							}
							break;
						case 5 :
							// XQueryParser.g:166:95: fto+= pm_FTOptionDecl
							{
							pushFollow(FOLLOW_pm_FTOptionDecl_in_pm_Prolog955);
							fto=pm_FTOptionDecl();
							state._fsp--;
							if (state.failed) return retval;
							if ( state.backtracking==0 ) stream_pm_FTOptionDecl.add(fto.getTree());
							if (list_fto==null) list_fto=new ArrayList<Object>();
							list_fto.add(fto.getTree());
							}
							break;

					}

					}
					break;

				default :
					break loop6;
				}
			}

			// XQueryParser.g:166:121: (od+= pg_OrderedDecl )*
			loop7:
			while (true) {
				int alt7=2;
				int LA7_0 = input.LA(1);
				if ( (LA7_0==DECLARE) ) {
					int LA7_3 = input.LA(2);
					if ( (LA7_3==ANN_PERCENT||LA7_3==COLLECTION||LA7_3==CONTEXT||LA7_3==FUNCTION||LA7_3==INDEX||LA7_3==INTEGRITY||LA7_3==OPTION||LA7_3==UPDATING||LA7_3==VARIABLE) ) {
						alt7=1;
					}

				}

				switch (alt7) {
				case 1 :
					// XQueryParser.g:166:121: od+= pg_OrderedDecl
					{
					pushFollow(FOLLOW_pg_OrderedDecl_in_pm_Prolog962);
					od=pg_OrderedDecl();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) stream_pg_OrderedDecl.add(od.getTree());
					if (list_od==null) list_od=new ArrayList<Object>();
					list_od.add(od.getTree());
					}
					break;

				default :
					break loop7;
				}
			}

			// AST REWRITE
			// elements: s, dnd, od, nd, fto, i
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: od, fto, s, nd, dnd, i
			// wildcard labels: 
			if ( state.backtracking==0 ) {
			retval.tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.getTree():null);
			RewriteRuleSubtreeStream stream_od=new RewriteRuleSubtreeStream(adaptor,"token od",list_od);
			RewriteRuleSubtreeStream stream_fto=new RewriteRuleSubtreeStream(adaptor,"token fto",list_fto);
			RewriteRuleSubtreeStream stream_s=new RewriteRuleSubtreeStream(adaptor,"token s",list_s);
			RewriteRuleSubtreeStream stream_nd=new RewriteRuleSubtreeStream(adaptor,"token nd",list_nd);
			RewriteRuleSubtreeStream stream_dnd=new RewriteRuleSubtreeStream(adaptor,"token dnd",list_dnd);
			RewriteRuleSubtreeStream stream_i=new RewriteRuleSubtreeStream(adaptor,"token i",list_i);
			root_0 = (XQDTCommonTree)adaptor.nil();
			// 167:17: -> ^( Prolog ^( DefaultNamespaceDecls ( $dnd)* ) ^( Setters ( $s)* ) ^( NamespaceDecls ( $nd)* ) ^( Imports ( $i)* ) ^( FTOptionDecls ( $fto)* ) ^( OrderedDecls ( $od)* ) )
			{
				// XQueryParser.g:167:21: ^( Prolog ^( DefaultNamespaceDecls ( $dnd)* ) ^( Setters ( $s)* ) ^( NamespaceDecls ( $nd)* ) ^( Imports ( $i)* ) ^( FTOptionDecls ( $fto)* ) ^( OrderedDecls ( $od)* ) )
				{
				XQDTCommonTree root_1 = (XQDTCommonTree)adaptor.nil();
				root_1 = (XQDTCommonTree)adaptor.becomeRoot((XQDTCommonTree)adaptor.create(Prolog, "Prolog"), root_1);
				// XQueryParser.g:168:33: ^( DefaultNamespaceDecls ( $dnd)* )
				{
				XQDTCommonTree root_2 = (XQDTCommonTree)adaptor.nil();
				root_2 = (XQDTCommonTree)adaptor.becomeRoot((XQDTCommonTree)adaptor.create(DefaultNamespaceDecls, "DefaultNamespaceDecls"), root_2);
				// XQueryParser.g:168:58: ( $dnd)*
				while ( stream_dnd.hasNext() ) {
					adaptor.addChild(root_2, stream_dnd.nextTree());
				}
				stream_dnd.reset();

				adaptor.addChild(root_1, root_2);
				}

				// XQueryParser.g:169:33: ^( Setters ( $s)* )
				{
				XQDTCommonTree root_2 = (XQDTCommonTree)adaptor.nil();
				root_2 = (XQDTCommonTree)adaptor.becomeRoot((XQDTCommonTree)adaptor.create(Setters, "Setters"), root_2);
				// XQueryParser.g:169:44: ( $s)*
				while ( stream_s.hasNext() ) {
					adaptor.addChild(root_2, stream_s.nextTree());
				}
				stream_s.reset();

				adaptor.addChild(root_1, root_2);
				}

				// XQueryParser.g:170:33: ^( NamespaceDecls ( $nd)* )
				{
				XQDTCommonTree root_2 = (XQDTCommonTree)adaptor.nil();
				root_2 = (XQDTCommonTree)adaptor.becomeRoot((XQDTCommonTree)adaptor.create(NamespaceDecls, "NamespaceDecls"), root_2);
				// XQueryParser.g:170:51: ( $nd)*
				while ( stream_nd.hasNext() ) {
					adaptor.addChild(root_2, stream_nd.nextTree());
				}
				stream_nd.reset();

				adaptor.addChild(root_1, root_2);
				}

				// XQueryParser.g:171:33: ^( Imports ( $i)* )
				{
				XQDTCommonTree root_2 = (XQDTCommonTree)adaptor.nil();
				root_2 = (XQDTCommonTree)adaptor.becomeRoot((XQDTCommonTree)adaptor.create(Imports, "Imports"), root_2);
				// XQueryParser.g:171:44: ( $i)*
				while ( stream_i.hasNext() ) {
					adaptor.addChild(root_2, stream_i.nextTree());
				}
				stream_i.reset();

				adaptor.addChild(root_1, root_2);
				}

				// XQueryParser.g:172:33: ^( FTOptionDecls ( $fto)* )
				{
				XQDTCommonTree root_2 = (XQDTCommonTree)adaptor.nil();
				root_2 = (XQDTCommonTree)adaptor.becomeRoot((XQDTCommonTree)adaptor.create(FTOptionDecls, "FTOptionDecls"), root_2);
				// XQueryParser.g:172:50: ( $fto)*
				while ( stream_fto.hasNext() ) {
					adaptor.addChild(root_2, stream_fto.nextTree());
				}
				stream_fto.reset();

				adaptor.addChild(root_1, root_2);
				}

				// XQueryParser.g:173:33: ^( OrderedDecls ( $od)* )
				{
				XQDTCommonTree root_2 = (XQDTCommonTree)adaptor.nil();
				root_2 = (XQDTCommonTree)adaptor.becomeRoot((XQDTCommonTree)adaptor.create(OrderedDecls, "OrderedDecls"), root_2);
				// XQueryParser.g:173:49: ( $od)*
				while ( stream_od.hasNext() ) {
					adaptor.addChild(root_2, stream_od.nextTree());
				}
				stream_od.reset();

				adaptor.addChild(root_1, root_2);
				}

				adaptor.addChild(root_0, root_1);
				}

			}


			retval.tree = root_0;
			}

			}

			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (XQDTCommonTree)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
			retval.tree = (XQDTCommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "pm_Prolog"


	public static class pg_OrderedDecl_return extends ParserRuleReturnScope {
		XQDTCommonTree tree;
		@Override
		public XQDTCommonTree getTree() { return tree; }
	};


	// $ANTLR start "pg_OrderedDecl"
	// XQueryParser.g:181:1: pg_OrderedDecl : ( pm_ContextItemDecl | pm_AnnotatedDecl | pm_OptionDecl );
	public final XQueryParser.pg_OrderedDecl_return pg_OrderedDecl() throws RecognitionException {
		XQueryParser.pg_OrderedDecl_return retval = new XQueryParser.pg_OrderedDecl_return();
		retval.start = input.LT(1);

		XQDTCommonTree root_0 = null;

		ParserRuleReturnScope pm_ContextItemDecl11 =null;
		ParserRuleReturnScope pm_AnnotatedDecl12 =null;
		ParserRuleReturnScope pm_OptionDecl13 =null;


		try {
			// XQueryParser.g:182:9: ( pm_ContextItemDecl | pm_AnnotatedDecl | pm_OptionDecl )
			int alt8=3;
			int LA8_0 = input.LA(1);
			if ( (LA8_0==DECLARE) ) {
				switch ( input.LA(2) ) {
				case CONTEXT:
					{
					alt8=1;
					}
					break;
				case ANN_PERCENT:
				case COLLECTION:
				case FUNCTION:
				case INDEX:
				case INTEGRITY:
				case UPDATING:
				case VARIABLE:
					{
					alt8=2;
					}
					break;
				case OPTION:
					{
					alt8=3;
					}
					break;
				default:
					if (state.backtracking>0) {state.failed=true; return retval;}
					int nvaeMark = input.mark();
					try {
						input.consume();
						NoViableAltException nvae =
							new NoViableAltException("", 8, 1, input);
						throw nvae;
					} finally {
						input.rewind(nvaeMark);
					}
				}
			}

			else {
				if (state.backtracking>0) {state.failed=true; return retval;}
				NoViableAltException nvae =
					new NoViableAltException("", 8, 0, input);
				throw nvae;
			}

			switch (alt8) {
				case 1 :
					// XQueryParser.g:182:11: pm_ContextItemDecl
					{
					root_0 = (XQDTCommonTree)adaptor.nil();


					pushFollow(FOLLOW_pm_ContextItemDecl_in_pg_OrderedDecl1277);
					pm_ContextItemDecl11=pm_ContextItemDecl();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, pm_ContextItemDecl11.getTree());

					}
					break;
				case 2 :
					// XQueryParser.g:183:11: pm_AnnotatedDecl
					{
					root_0 = (XQDTCommonTree)adaptor.nil();


					pushFollow(FOLLOW_pm_AnnotatedDecl_in_pg_OrderedDecl1289);
					pm_AnnotatedDecl12=pm_AnnotatedDecl();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, pm_AnnotatedDecl12.getTree());

					}
					break;
				case 3 :
					// XQueryParser.g:184:11: pm_OptionDecl
					{
					root_0 = (XQDTCommonTree)adaptor.nil();


					pushFollow(FOLLOW_pm_OptionDecl_in_pg_OrderedDecl1301);
					pm_OptionDecl13=pm_OptionDecl();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, pm_OptionDecl13.getTree());

					}
					break;

			}
			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (XQDTCommonTree)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
			retval.tree = (XQDTCommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "pg_OrderedDecl"


	public static class p_Setter_return extends ParserRuleReturnScope {
		XQDTCommonTree tree;
		@Override
		public XQDTCommonTree getTree() { return tree; }
	};


	// $ANTLR start "p_Setter"
	// XQueryParser.g:192:1: p_Setter : ( pm_BoundarySpaceDecl | pm_DefaultCollationDecl | pm_BaseURIDecl | pm_ConstructionDecl | pm_OrderingModeDecl | pm_EmptyOrderDecl |{...}? => pm_RevalidationDecl | pm_CopyNamespacesDecl | pm_DecimalFormatDecl );
	public final XQueryParser.p_Setter_return p_Setter() throws RecognitionException {
		XQueryParser.p_Setter_return retval = new XQueryParser.p_Setter_return();
		retval.start = input.LT(1);

		XQDTCommonTree root_0 = null;

		ParserRuleReturnScope pm_BoundarySpaceDecl14 =null;
		ParserRuleReturnScope pm_DefaultCollationDecl15 =null;
		ParserRuleReturnScope pm_BaseURIDecl16 =null;
		ParserRuleReturnScope pm_ConstructionDecl17 =null;
		ParserRuleReturnScope pm_OrderingModeDecl18 =null;
		ParserRuleReturnScope pm_EmptyOrderDecl19 =null;
		ParserRuleReturnScope pm_RevalidationDecl20 =null;
		ParserRuleReturnScope pm_CopyNamespacesDecl21 =null;
		ParserRuleReturnScope pm_DecimalFormatDecl22 =null;


		try {
			// XQueryParser.g:193:9: ( pm_BoundarySpaceDecl | pm_DefaultCollationDecl | pm_BaseURIDecl | pm_ConstructionDecl | pm_OrderingModeDecl | pm_EmptyOrderDecl |{...}? => pm_RevalidationDecl | pm_CopyNamespacesDecl | pm_DecimalFormatDecl )
			int alt9=9;
			int LA9_0 = input.LA(1);
			if ( (LA9_0==DECLARE) ) {
				int LA9_1 = input.LA(2);
				if ( (LA9_1==REVALIDATION) && ((lc(XQU)))) {
					alt9=7;
				}
				else if ( (LA9_1==BOUNDARY_SPACE) ) {
					alt9=1;
				}
				else if ( (LA9_1==DEFAULT) ) {
					switch ( input.LA(3) ) {
					case COLLATION:
						{
						alt9=2;
						}
						break;
					case ORDER:
						{
						alt9=6;
						}
						break;
					case DECIMAL_FORMAT:
						{
						alt9=9;
						}
						break;
					default:
						if (state.backtracking>0) {state.failed=true; return retval;}
						int nvaeMark = input.mark();
						try {
							for (int nvaeConsume = 0; nvaeConsume < 3 - 1; nvaeConsume++) {
								input.consume();
							}
							NoViableAltException nvae =
								new NoViableAltException("", 9, 4, input);
							throw nvae;
						} finally {
							input.rewind(nvaeMark);
						}
					}
				}
				else if ( (LA9_1==BASE_URI) ) {
					alt9=3;
				}
				else if ( (LA9_1==CONSTRUCTION) ) {
					alt9=4;
				}
				else if ( (LA9_1==ORDERING) ) {
					alt9=5;
				}
				else if ( (LA9_1==COPY_NAMESPACES) ) {
					alt9=8;
				}
				else if ( (LA9_1==DECIMAL_FORMAT) ) {
					alt9=9;
				}

				else {
					if (state.backtracking>0) {state.failed=true; return retval;}
					int nvaeMark = input.mark();
					try {
						input.consume();
						NoViableAltException nvae =
							new NoViableAltException("", 9, 1, input);
						throw nvae;
					} finally {
						input.rewind(nvaeMark);
					}
				}

			}

			else {
				if (state.backtracking>0) {state.failed=true; return retval;}
				NoViableAltException nvae =
					new NoViableAltException("", 9, 0, input);
				throw nvae;
			}

			switch (alt9) {
				case 1 :
					// XQueryParser.g:193:11: pm_BoundarySpaceDecl
					{
					root_0 = (XQDTCommonTree)adaptor.nil();


					pushFollow(FOLLOW_pm_BoundarySpaceDecl_in_p_Setter1331);
					pm_BoundarySpaceDecl14=pm_BoundarySpaceDecl();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, pm_BoundarySpaceDecl14.getTree());

					}
					break;
				case 2 :
					// XQueryParser.g:194:11: pm_DefaultCollationDecl
					{
					root_0 = (XQDTCommonTree)adaptor.nil();


					pushFollow(FOLLOW_pm_DefaultCollationDecl_in_p_Setter1343);
					pm_DefaultCollationDecl15=pm_DefaultCollationDecl();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, pm_DefaultCollationDecl15.getTree());

					}
					break;
				case 3 :
					// XQueryParser.g:195:11: pm_BaseURIDecl
					{
					root_0 = (XQDTCommonTree)adaptor.nil();


					pushFollow(FOLLOW_pm_BaseURIDecl_in_p_Setter1355);
					pm_BaseURIDecl16=pm_BaseURIDecl();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, pm_BaseURIDecl16.getTree());

					}
					break;
				case 4 :
					// XQueryParser.g:196:11: pm_ConstructionDecl
					{
					root_0 = (XQDTCommonTree)adaptor.nil();


					pushFollow(FOLLOW_pm_ConstructionDecl_in_p_Setter1367);
					pm_ConstructionDecl17=pm_ConstructionDecl();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, pm_ConstructionDecl17.getTree());

					}
					break;
				case 5 :
					// XQueryParser.g:197:11: pm_OrderingModeDecl
					{
					root_0 = (XQDTCommonTree)adaptor.nil();


					pushFollow(FOLLOW_pm_OrderingModeDecl_in_p_Setter1379);
					pm_OrderingModeDecl18=pm_OrderingModeDecl();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, pm_OrderingModeDecl18.getTree());

					}
					break;
				case 6 :
					// XQueryParser.g:198:11: pm_EmptyOrderDecl
					{
					root_0 = (XQDTCommonTree)adaptor.nil();


					pushFollow(FOLLOW_pm_EmptyOrderDecl_in_p_Setter1391);
					pm_EmptyOrderDecl19=pm_EmptyOrderDecl();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, pm_EmptyOrderDecl19.getTree());

					}
					break;
				case 7 :
					// XQueryParser.g:199:11: {...}? => pm_RevalidationDecl
					{
					root_0 = (XQDTCommonTree)adaptor.nil();


					if ( !((lc(XQU))) ) {
						if (state.backtracking>0) {state.failed=true; return retval;}
						throw new FailedPredicateException(input, "p_Setter", "lc(XQU)");
					}
					pushFollow(FOLLOW_pm_RevalidationDecl_in_p_Setter1406);
					pm_RevalidationDecl20=pm_RevalidationDecl();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, pm_RevalidationDecl20.getTree());

					}
					break;
				case 8 :
					// XQueryParser.g:200:11: pm_CopyNamespacesDecl
					{
					root_0 = (XQDTCommonTree)adaptor.nil();


					pushFollow(FOLLOW_pm_CopyNamespacesDecl_in_p_Setter1418);
					pm_CopyNamespacesDecl21=pm_CopyNamespacesDecl();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, pm_CopyNamespacesDecl21.getTree());

					}
					break;
				case 9 :
					// XQueryParser.g:201:11: pm_DecimalFormatDecl
					{
					root_0 = (XQDTCommonTree)adaptor.nil();


					pushFollow(FOLLOW_pm_DecimalFormatDecl_in_p_Setter1430);
					pm_DecimalFormatDecl22=pm_DecimalFormatDecl();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, pm_DecimalFormatDecl22.getTree());

					}
					break;

			}
			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (XQDTCommonTree)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
			retval.tree = (XQDTCommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "p_Setter"


	public static class pm_BoundarySpaceDecl_return extends ParserRuleReturnScope {
		XQDTCommonTree tree;
		@Override
		public XQDTCommonTree getTree() { return tree; }
	};


	// $ANTLR start "pm_BoundarySpaceDecl"
	// XQueryParser.g:205:1: pm_BoundarySpaceDecl : k= DECLARE k= BOUNDARY_SPACE ( (k= PRESERVE ) | (k= STRIP ) ) SEMICOLON ;
	public final XQueryParser.pm_BoundarySpaceDecl_return pm_BoundarySpaceDecl() throws RecognitionException {
		XQueryParser.pm_BoundarySpaceDecl_return retval = new XQueryParser.pm_BoundarySpaceDecl_return();
		retval.start = input.LT(1);

		XQDTCommonTree root_0 = null;

		CommonToken k=null;
		CommonToken SEMICOLON23=null;

		XQDTCommonTree k_tree=null;
		XQDTCommonTree SEMICOLON23_tree=null;

		try {
			// XQueryParser.g:206:9: (k= DECLARE k= BOUNDARY_SPACE ( (k= PRESERVE ) | (k= STRIP ) ) SEMICOLON )
			// XQueryParser.g:206:11: k= DECLARE k= BOUNDARY_SPACE ( (k= PRESERVE ) | (k= STRIP ) ) SEMICOLON
			{
			root_0 = (XQDTCommonTree)adaptor.nil();


			k=(CommonToken)match(input,DECLARE,FOLLOW_DECLARE_in_pm_BoundarySpaceDecl1462); if (state.failed) return retval;
			if ( state.backtracking==0 ) {
			k_tree = (XQDTCommonTree)adaptor.create(k);
			adaptor.addChild(root_0, k_tree);
			}

			if ( state.backtracking==0 ) {ak(k);}
			k=(CommonToken)match(input,BOUNDARY_SPACE,FOLLOW_BOUNDARY_SPACE_in_pm_BoundarySpaceDecl1468); if (state.failed) return retval;
			if ( state.backtracking==0 ) {
			k_tree = (XQDTCommonTree)adaptor.create(k);
			adaptor.addChild(root_0, k_tree);
			}

			if ( state.backtracking==0 ) {ak(k);}
			// XQueryParser.g:206:58: ( (k= PRESERVE ) | (k= STRIP ) )
			int alt10=2;
			int LA10_0 = input.LA(1);
			if ( (LA10_0==PRESERVE) ) {
				alt10=1;
			}
			else if ( (LA10_0==STRIP) ) {
				alt10=2;
			}

			else {
				if (state.backtracking>0) {state.failed=true; return retval;}
				NoViableAltException nvae =
					new NoViableAltException("", 10, 0, input);
				throw nvae;
			}

			switch (alt10) {
				case 1 :
					// XQueryParser.g:206:60: (k= PRESERVE )
					{
					// XQueryParser.g:206:60: (k= PRESERVE )
					// XQueryParser.g:206:61: k= PRESERVE
					{
					k=(CommonToken)match(input,PRESERVE,FOLLOW_PRESERVE_in_pm_BoundarySpaceDecl1477); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					k_tree = (XQDTCommonTree)adaptor.create(k);
					adaptor.addChild(root_0, k_tree);
					}

					if ( state.backtracking==0 ) {ak(k);}
					}

					}
					break;
				case 2 :
					// XQueryParser.g:206:85: (k= STRIP )
					{
					// XQueryParser.g:206:85: (k= STRIP )
					// XQueryParser.g:206:86: k= STRIP
					{
					k=(CommonToken)match(input,STRIP,FOLLOW_STRIP_in_pm_BoundarySpaceDecl1487); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					k_tree = (XQDTCommonTree)adaptor.create(k);
					adaptor.addChild(root_0, k_tree);
					}

					if ( state.backtracking==0 ) {ak(k);}
					}

					}
					break;

			}

			SEMICOLON23=(CommonToken)match(input,SEMICOLON,FOLLOW_SEMICOLON_in_pm_BoundarySpaceDecl1494); if (state.failed) return retval;
			if ( state.backtracking==0 ) {
			SEMICOLON23_tree = (XQDTCommonTree)adaptor.create(SEMICOLON23);
			adaptor.addChild(root_0, SEMICOLON23_tree);
			}

			}

			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (XQDTCommonTree)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
			retval.tree = (XQDTCommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "pm_BoundarySpaceDecl"


	public static class pm_DefaultCollationDecl_return extends ParserRuleReturnScope {
		XQDTCommonTree tree;
		@Override
		public XQDTCommonTree getTree() { return tree; }
	};


	// $ANTLR start "pm_DefaultCollationDecl"
	// XQueryParser.g:210:1: pm_DefaultCollationDecl : k= DECLARE k= DEFAULT k= COLLATION p_StringLiteral SEMICOLON ;
	public final XQueryParser.pm_DefaultCollationDecl_return pm_DefaultCollationDecl() throws RecognitionException {
		XQueryParser.pm_DefaultCollationDecl_return retval = new XQueryParser.pm_DefaultCollationDecl_return();
		retval.start = input.LT(1);

		XQDTCommonTree root_0 = null;

		CommonToken k=null;
		CommonToken SEMICOLON25=null;
		ParserRuleReturnScope p_StringLiteral24 =null;

		XQDTCommonTree k_tree=null;
		XQDTCommonTree SEMICOLON25_tree=null;

		try {
			// XQueryParser.g:211:9: (k= DECLARE k= DEFAULT k= COLLATION p_StringLiteral SEMICOLON )
			// XQueryParser.g:211:11: k= DECLARE k= DEFAULT k= COLLATION p_StringLiteral SEMICOLON
			{
			root_0 = (XQDTCommonTree)adaptor.nil();


			k=(CommonToken)match(input,DECLARE,FOLLOW_DECLARE_in_pm_DefaultCollationDecl1522); if (state.failed) return retval;
			if ( state.backtracking==0 ) {
			k_tree = (XQDTCommonTree)adaptor.create(k);
			adaptor.addChild(root_0, k_tree);
			}

			if ( state.backtracking==0 ) {ak(k);}
			k=(CommonToken)match(input,DEFAULT,FOLLOW_DEFAULT_in_pm_DefaultCollationDecl1528); if (state.failed) return retval;
			if ( state.backtracking==0 ) {
			k_tree = (XQDTCommonTree)adaptor.create(k);
			adaptor.addChild(root_0, k_tree);
			}

			if ( state.backtracking==0 ) {ak(k);}
			k=(CommonToken)match(input,COLLATION,FOLLOW_COLLATION_in_pm_DefaultCollationDecl1534); if (state.failed) return retval;
			if ( state.backtracking==0 ) {
			k_tree = (XQDTCommonTree)adaptor.create(k);
			adaptor.addChild(root_0, k_tree);
			}

			if ( state.backtracking==0 ) {ak(k);}
			pushFollow(FOLLOW_p_StringLiteral_in_pm_DefaultCollationDecl1538);
			p_StringLiteral24=p_StringLiteral();
			state._fsp--;
			if (state.failed) return retval;
			if ( state.backtracking==0 ) adaptor.addChild(root_0, p_StringLiteral24.getTree());

			SEMICOLON25=(CommonToken)match(input,SEMICOLON,FOLLOW_SEMICOLON_in_pm_DefaultCollationDecl1540); if (state.failed) return retval;
			if ( state.backtracking==0 ) {
			SEMICOLON25_tree = (XQDTCommonTree)adaptor.create(SEMICOLON25);
			adaptor.addChild(root_0, SEMICOLON25_tree);
			}

			}

			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (XQDTCommonTree)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
			retval.tree = (XQDTCommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "pm_DefaultCollationDecl"


	public static class pm_BaseURIDecl_return extends ParserRuleReturnScope {
		XQDTCommonTree tree;
		@Override
		public XQDTCommonTree getTree() { return tree; }
	};


	// $ANTLR start "pm_BaseURIDecl"
	// XQueryParser.g:215:1: pm_BaseURIDecl : k= DECLARE k= BASE_URI sl= p_StringLiteral SEMICOLON -> ^( BaseURIDecl $sl) ;
	public final XQueryParser.pm_BaseURIDecl_return pm_BaseURIDecl() throws RecognitionException {
		XQueryParser.pm_BaseURIDecl_return retval = new XQueryParser.pm_BaseURIDecl_return();
		retval.start = input.LT(1);

		XQDTCommonTree root_0 = null;

		CommonToken k=null;
		CommonToken SEMICOLON26=null;
		ParserRuleReturnScope sl =null;

		XQDTCommonTree k_tree=null;
		XQDTCommonTree SEMICOLON26_tree=null;
		RewriteRuleTokenStream stream_DECLARE=new RewriteRuleTokenStream(adaptor,"token DECLARE");
		RewriteRuleTokenStream stream_SEMICOLON=new RewriteRuleTokenStream(adaptor,"token SEMICOLON");
		RewriteRuleTokenStream stream_BASE_URI=new RewriteRuleTokenStream(adaptor,"token BASE_URI");
		RewriteRuleSubtreeStream stream_p_StringLiteral=new RewriteRuleSubtreeStream(adaptor,"rule p_StringLiteral");

		try {
			// XQueryParser.g:216:9: (k= DECLARE k= BASE_URI sl= p_StringLiteral SEMICOLON -> ^( BaseURIDecl $sl) )
			// XQueryParser.g:216:11: k= DECLARE k= BASE_URI sl= p_StringLiteral SEMICOLON
			{
			k=(CommonToken)match(input,DECLARE,FOLLOW_DECLARE_in_pm_BaseURIDecl1576); if (state.failed) return retval; 
			if ( state.backtracking==0 ) stream_DECLARE.add(k);

			if ( state.backtracking==0 ) {ak(k);}
			k=(CommonToken)match(input,BASE_URI,FOLLOW_BASE_URI_in_pm_BaseURIDecl1582); if (state.failed) return retval; 
			if ( state.backtracking==0 ) stream_BASE_URI.add(k);

			if ( state.backtracking==0 ) {ak(k);}
			pushFollow(FOLLOW_p_StringLiteral_in_pm_BaseURIDecl1588);
			sl=p_StringLiteral();
			state._fsp--;
			if (state.failed) return retval;
			if ( state.backtracking==0 ) stream_p_StringLiteral.add(sl.getTree());
			SEMICOLON26=(CommonToken)match(input,SEMICOLON,FOLLOW_SEMICOLON_in_pm_BaseURIDecl1590); if (state.failed) return retval; 
			if ( state.backtracking==0 ) stream_SEMICOLON.add(SEMICOLON26);

			// AST REWRITE
			// elements: sl
			// token labels: 
			// rule labels: sl, retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			if ( state.backtracking==0 ) {
			retval.tree = root_0;
			RewriteRuleSubtreeStream stream_sl=new RewriteRuleSubtreeStream(adaptor,"rule sl",sl!=null?sl.getTree():null);
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.getTree():null);

			root_0 = (XQDTCommonTree)adaptor.nil();
			// 217:17: -> ^( BaseURIDecl $sl)
			{
				// XQueryParser.g:217:20: ^( BaseURIDecl $sl)
				{
				XQDTCommonTree root_1 = (XQDTCommonTree)adaptor.nil();
				root_1 = (XQDTCommonTree)adaptor.becomeRoot((XQDTCommonTree)adaptor.create(BaseURIDecl, "BaseURIDecl"), root_1);
				adaptor.addChild(root_1, stream_sl.nextTree());
				adaptor.addChild(root_0, root_1);
				}

			}


			retval.tree = root_0;
			}

			}

			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (XQDTCommonTree)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
			retval.tree = (XQDTCommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "pm_BaseURIDecl"


	public static class pm_ConstructionDecl_return extends ParserRuleReturnScope {
		XQDTCommonTree tree;
		@Override
		public XQDTCommonTree getTree() { return tree; }
	};


	// $ANTLR start "pm_ConstructionDecl"
	// XQueryParser.g:221:1: pm_ConstructionDecl : k= DECLARE k= CONSTRUCTION ( (k= STRIP |k= PRESERVE ) ) SEMICOLON ;
	public final XQueryParser.pm_ConstructionDecl_return pm_ConstructionDecl() throws RecognitionException {
		XQueryParser.pm_ConstructionDecl_return retval = new XQueryParser.pm_ConstructionDecl_return();
		retval.start = input.LT(1);

		XQDTCommonTree root_0 = null;

		CommonToken k=null;
		CommonToken SEMICOLON27=null;

		XQDTCommonTree k_tree=null;
		XQDTCommonTree SEMICOLON27_tree=null;

		try {
			// XQueryParser.g:222:9: (k= DECLARE k= CONSTRUCTION ( (k= STRIP |k= PRESERVE ) ) SEMICOLON )
			// XQueryParser.g:222:11: k= DECLARE k= CONSTRUCTION ( (k= STRIP |k= PRESERVE ) ) SEMICOLON
			{
			root_0 = (XQDTCommonTree)adaptor.nil();


			k=(CommonToken)match(input,DECLARE,FOLLOW_DECLARE_in_pm_ConstructionDecl1643); if (state.failed) return retval;
			if ( state.backtracking==0 ) {
			k_tree = (XQDTCommonTree)adaptor.create(k);
			adaptor.addChild(root_0, k_tree);
			}

			if ( state.backtracking==0 ) {ak(k);}
			k=(CommonToken)match(input,CONSTRUCTION,FOLLOW_CONSTRUCTION_in_pm_ConstructionDecl1649); if (state.failed) return retval;
			if ( state.backtracking==0 ) {
			k_tree = (XQDTCommonTree)adaptor.create(k);
			adaptor.addChild(root_0, k_tree);
			}

			if ( state.backtracking==0 ) {ak(k);}
			// XQueryParser.g:222:56: ( (k= STRIP |k= PRESERVE ) )
			// XQueryParser.g:222:58: (k= STRIP |k= PRESERVE )
			{
			// XQueryParser.g:222:58: (k= STRIP |k= PRESERVE )
			int alt11=2;
			int LA11_0 = input.LA(1);
			if ( (LA11_0==STRIP) ) {
				alt11=1;
			}
			else if ( (LA11_0==PRESERVE) ) {
				alt11=2;
			}

			else {
				if (state.backtracking>0) {state.failed=true; return retval;}
				NoViableAltException nvae =
					new NoViableAltException("", 11, 0, input);
				throw nvae;
			}

			switch (alt11) {
				case 1 :
					// XQueryParser.g:222:59: k= STRIP
					{
					k=(CommonToken)match(input,STRIP,FOLLOW_STRIP_in_pm_ConstructionDecl1658); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					k_tree = (XQDTCommonTree)adaptor.create(k);
					adaptor.addChild(root_0, k_tree);
					}

					}
					break;
				case 2 :
					// XQueryParser.g:222:69: k= PRESERVE
					{
					k=(CommonToken)match(input,PRESERVE,FOLLOW_PRESERVE_in_pm_ConstructionDecl1664); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					k_tree = (XQDTCommonTree)adaptor.create(k);
					adaptor.addChild(root_0, k_tree);
					}

					}
					break;

			}

			if ( state.backtracking==0 ) {ak(k);}
			}

			SEMICOLON27=(CommonToken)match(input,SEMICOLON,FOLLOW_SEMICOLON_in_pm_ConstructionDecl1671); if (state.failed) return retval;
			if ( state.backtracking==0 ) {
			SEMICOLON27_tree = (XQDTCommonTree)adaptor.create(SEMICOLON27);
			adaptor.addChild(root_0, SEMICOLON27_tree);
			}

			}

			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (XQDTCommonTree)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
			retval.tree = (XQDTCommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "pm_ConstructionDecl"


	public static class pm_OrderingModeDecl_return extends ParserRuleReturnScope {
		XQDTCommonTree tree;
		@Override
		public XQDTCommonTree getTree() { return tree; }
	};


	// $ANTLR start "pm_OrderingModeDecl"
	// XQueryParser.g:226:1: pm_OrderingModeDecl : k= DECLARE k= ORDERING ( (k= ORDERED |k= UNORDERED ) ) SEMICOLON ;
	public final XQueryParser.pm_OrderingModeDecl_return pm_OrderingModeDecl() throws RecognitionException {
		XQueryParser.pm_OrderingModeDecl_return retval = new XQueryParser.pm_OrderingModeDecl_return();
		retval.start = input.LT(1);

		XQDTCommonTree root_0 = null;

		CommonToken k=null;
		CommonToken SEMICOLON28=null;

		XQDTCommonTree k_tree=null;
		XQDTCommonTree SEMICOLON28_tree=null;

		try {
			// XQueryParser.g:227:9: (k= DECLARE k= ORDERING ( (k= ORDERED |k= UNORDERED ) ) SEMICOLON )
			// XQueryParser.g:227:11: k= DECLARE k= ORDERING ( (k= ORDERED |k= UNORDERED ) ) SEMICOLON
			{
			root_0 = (XQDTCommonTree)adaptor.nil();


			k=(CommonToken)match(input,DECLARE,FOLLOW_DECLARE_in_pm_OrderingModeDecl1699); if (state.failed) return retval;
			if ( state.backtracking==0 ) {
			k_tree = (XQDTCommonTree)adaptor.create(k);
			adaptor.addChild(root_0, k_tree);
			}

			if ( state.backtracking==0 ) {ak(k);}
			k=(CommonToken)match(input,ORDERING,FOLLOW_ORDERING_in_pm_OrderingModeDecl1705); if (state.failed) return retval;
			if ( state.backtracking==0 ) {
			k_tree = (XQDTCommonTree)adaptor.create(k);
			adaptor.addChild(root_0, k_tree);
			}

			if ( state.backtracking==0 ) {ak(k);}
			// XQueryParser.g:227:52: ( (k= ORDERED |k= UNORDERED ) )
			// XQueryParser.g:227:54: (k= ORDERED |k= UNORDERED )
			{
			// XQueryParser.g:227:54: (k= ORDERED |k= UNORDERED )
			int alt12=2;
			int LA12_0 = input.LA(1);
			if ( (LA12_0==ORDERED) ) {
				alt12=1;
			}
			else if ( (LA12_0==UNORDERED) ) {
				alt12=2;
			}

			else {
				if (state.backtracking>0) {state.failed=true; return retval;}
				NoViableAltException nvae =
					new NoViableAltException("", 12, 0, input);
				throw nvae;
			}

			switch (alt12) {
				case 1 :
					// XQueryParser.g:227:55: k= ORDERED
					{
					k=(CommonToken)match(input,ORDERED,FOLLOW_ORDERED_in_pm_OrderingModeDecl1714); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					k_tree = (XQDTCommonTree)adaptor.create(k);
					adaptor.addChild(root_0, k_tree);
					}

					}
					break;
				case 2 :
					// XQueryParser.g:227:67: k= UNORDERED
					{
					k=(CommonToken)match(input,UNORDERED,FOLLOW_UNORDERED_in_pm_OrderingModeDecl1720); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					k_tree = (XQDTCommonTree)adaptor.create(k);
					adaptor.addChild(root_0, k_tree);
					}

					}
					break;

			}

			if ( state.backtracking==0 ) {ak(k);}
			}

			SEMICOLON28=(CommonToken)match(input,SEMICOLON,FOLLOW_SEMICOLON_in_pm_OrderingModeDecl1727); if (state.failed) return retval;
			if ( state.backtracking==0 ) {
			SEMICOLON28_tree = (XQDTCommonTree)adaptor.create(SEMICOLON28);
			adaptor.addChild(root_0, SEMICOLON28_tree);
			}

			}

			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (XQDTCommonTree)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
			retval.tree = (XQDTCommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "pm_OrderingModeDecl"


	public static class pm_EmptyOrderDecl_return extends ParserRuleReturnScope {
		XQDTCommonTree tree;
		@Override
		public XQDTCommonTree getTree() { return tree; }
	};


	// $ANTLR start "pm_EmptyOrderDecl"
	// XQueryParser.g:231:1: pm_EmptyOrderDecl : k= DECLARE k= DEFAULT k= ORDER k= EMPTY ( (k= GREATEST |k= LEAST ) ) SEMICOLON ;
	public final XQueryParser.pm_EmptyOrderDecl_return pm_EmptyOrderDecl() throws RecognitionException {
		XQueryParser.pm_EmptyOrderDecl_return retval = new XQueryParser.pm_EmptyOrderDecl_return();
		retval.start = input.LT(1);

		XQDTCommonTree root_0 = null;

		CommonToken k=null;
		CommonToken SEMICOLON29=null;

		XQDTCommonTree k_tree=null;
		XQDTCommonTree SEMICOLON29_tree=null;

		try {
			// XQueryParser.g:232:9: (k= DECLARE k= DEFAULT k= ORDER k= EMPTY ( (k= GREATEST |k= LEAST ) ) SEMICOLON )
			// XQueryParser.g:232:11: k= DECLARE k= DEFAULT k= ORDER k= EMPTY ( (k= GREATEST |k= LEAST ) ) SEMICOLON
			{
			root_0 = (XQDTCommonTree)adaptor.nil();


			k=(CommonToken)match(input,DECLARE,FOLLOW_DECLARE_in_pm_EmptyOrderDecl1755); if (state.failed) return retval;
			if ( state.backtracking==0 ) {
			k_tree = (XQDTCommonTree)adaptor.create(k);
			adaptor.addChild(root_0, k_tree);
			}

			if ( state.backtracking==0 ) {ak(k);}
			k=(CommonToken)match(input,DEFAULT,FOLLOW_DEFAULT_in_pm_EmptyOrderDecl1761); if (state.failed) return retval;
			if ( state.backtracking==0 ) {
			k_tree = (XQDTCommonTree)adaptor.create(k);
			adaptor.addChild(root_0, k_tree);
			}

			if ( state.backtracking==0 ) {ak(k);}
			k=(CommonToken)match(input,ORDER,FOLLOW_ORDER_in_pm_EmptyOrderDecl1767); if (state.failed) return retval;
			if ( state.backtracking==0 ) {
			k_tree = (XQDTCommonTree)adaptor.create(k);
			adaptor.addChild(root_0, k_tree);
			}

			if ( state.backtracking==0 ) {ak(k);}
			k=(CommonToken)match(input,EMPTY,FOLLOW_EMPTY_in_pm_EmptyOrderDecl1773); if (state.failed) return retval;
			if ( state.backtracking==0 ) {
			k_tree = (XQDTCommonTree)adaptor.create(k);
			adaptor.addChild(root_0, k_tree);
			}

			if ( state.backtracking==0 ) {ak(k);}
			// XQueryParser.g:232:87: ( (k= GREATEST |k= LEAST ) )
			// XQueryParser.g:232:89: (k= GREATEST |k= LEAST )
			{
			// XQueryParser.g:232:89: (k= GREATEST |k= LEAST )
			int alt13=2;
			int LA13_0 = input.LA(1);
			if ( (LA13_0==GREATEST) ) {
				alt13=1;
			}
			else if ( (LA13_0==LEAST) ) {
				alt13=2;
			}

			else {
				if (state.backtracking>0) {state.failed=true; return retval;}
				NoViableAltException nvae =
					new NoViableAltException("", 13, 0, input);
				throw nvae;
			}

			switch (alt13) {
				case 1 :
					// XQueryParser.g:232:90: k= GREATEST
					{
					k=(CommonToken)match(input,GREATEST,FOLLOW_GREATEST_in_pm_EmptyOrderDecl1782); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					k_tree = (XQDTCommonTree)adaptor.create(k);
					adaptor.addChild(root_0, k_tree);
					}

					}
					break;
				case 2 :
					// XQueryParser.g:232:103: k= LEAST
					{
					k=(CommonToken)match(input,LEAST,FOLLOW_LEAST_in_pm_EmptyOrderDecl1788); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					k_tree = (XQDTCommonTree)adaptor.create(k);
					adaptor.addChild(root_0, k_tree);
					}

					}
					break;

			}

			if ( state.backtracking==0 ) {ak(k);}
			}

			SEMICOLON29=(CommonToken)match(input,SEMICOLON,FOLLOW_SEMICOLON_in_pm_EmptyOrderDecl1795); if (state.failed) return retval;
			if ( state.backtracking==0 ) {
			SEMICOLON29_tree = (XQDTCommonTree)adaptor.create(SEMICOLON29);
			adaptor.addChild(root_0, SEMICOLON29_tree);
			}

			}

			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (XQDTCommonTree)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
			retval.tree = (XQDTCommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "pm_EmptyOrderDecl"


	public static class pm_CopyNamespacesDecl_return extends ParserRuleReturnScope {
		XQDTCommonTree tree;
		@Override
		public XQDTCommonTree getTree() { return tree; }
	};


	// $ANTLR start "pm_CopyNamespacesDecl"
	// XQueryParser.g:236:1: pm_CopyNamespacesDecl : k= DECLARE k= COPY_NAMESPACES p_PreserveMode COMMA p_InheritMode SEMICOLON ;
	public final XQueryParser.pm_CopyNamespacesDecl_return pm_CopyNamespacesDecl() throws RecognitionException {
		XQueryParser.pm_CopyNamespacesDecl_return retval = new XQueryParser.pm_CopyNamespacesDecl_return();
		retval.start = input.LT(1);

		XQDTCommonTree root_0 = null;

		CommonToken k=null;
		CommonToken COMMA31=null;
		CommonToken SEMICOLON33=null;
		ParserRuleReturnScope p_PreserveMode30 =null;
		ParserRuleReturnScope p_InheritMode32 =null;

		XQDTCommonTree k_tree=null;
		XQDTCommonTree COMMA31_tree=null;
		XQDTCommonTree SEMICOLON33_tree=null;

		try {
			// XQueryParser.g:237:9: (k= DECLARE k= COPY_NAMESPACES p_PreserveMode COMMA p_InheritMode SEMICOLON )
			// XQueryParser.g:237:11: k= DECLARE k= COPY_NAMESPACES p_PreserveMode COMMA p_InheritMode SEMICOLON
			{
			root_0 = (XQDTCommonTree)adaptor.nil();


			k=(CommonToken)match(input,DECLARE,FOLLOW_DECLARE_in_pm_CopyNamespacesDecl1823); if (state.failed) return retval;
			if ( state.backtracking==0 ) {
			k_tree = (XQDTCommonTree)adaptor.create(k);
			adaptor.addChild(root_0, k_tree);
			}

			if ( state.backtracking==0 ) {ak(k);}
			k=(CommonToken)match(input,COPY_NAMESPACES,FOLLOW_COPY_NAMESPACES_in_pm_CopyNamespacesDecl1829); if (state.failed) return retval;
			if ( state.backtracking==0 ) {
			k_tree = (XQDTCommonTree)adaptor.create(k);
			adaptor.addChild(root_0, k_tree);
			}

			if ( state.backtracking==0 ) {ak(k);}
			pushFollow(FOLLOW_p_PreserveMode_in_pm_CopyNamespacesDecl1833);
			p_PreserveMode30=p_PreserveMode();
			state._fsp--;
			if (state.failed) return retval;
			if ( state.backtracking==0 ) adaptor.addChild(root_0, p_PreserveMode30.getTree());

			COMMA31=(CommonToken)match(input,COMMA,FOLLOW_COMMA_in_pm_CopyNamespacesDecl1835); if (state.failed) return retval;
			if ( state.backtracking==0 ) {
			COMMA31_tree = (XQDTCommonTree)adaptor.create(COMMA31);
			adaptor.addChild(root_0, COMMA31_tree);
			}

			pushFollow(FOLLOW_p_InheritMode_in_pm_CopyNamespacesDecl1837);
			p_InheritMode32=p_InheritMode();
			state._fsp--;
			if (state.failed) return retval;
			if ( state.backtracking==0 ) adaptor.addChild(root_0, p_InheritMode32.getTree());

			SEMICOLON33=(CommonToken)match(input,SEMICOLON,FOLLOW_SEMICOLON_in_pm_CopyNamespacesDecl1839); if (state.failed) return retval;
			if ( state.backtracking==0 ) {
			SEMICOLON33_tree = (XQDTCommonTree)adaptor.create(SEMICOLON33);
			adaptor.addChild(root_0, SEMICOLON33_tree);
			}

			}

			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (XQDTCommonTree)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
			retval.tree = (XQDTCommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "pm_CopyNamespacesDecl"


	public static class p_PreserveMode_return extends ParserRuleReturnScope {
		XQDTCommonTree tree;
		@Override
		public XQDTCommonTree getTree() { return tree; }
	};


	// $ANTLR start "p_PreserveMode"
	// XQueryParser.g:241:1: p_PreserveMode : (k+= PRESERVE |k+= NO_PRESERVE ) ;
	public final XQueryParser.p_PreserveMode_return p_PreserveMode() throws RecognitionException {
		XQueryParser.p_PreserveMode_return retval = new XQueryParser.p_PreserveMode_return();
		retval.start = input.LT(1);

		XQDTCommonTree root_0 = null;

		CommonToken k=null;
		List<Object> list_k=null;

		XQDTCommonTree k_tree=null;

		try {
			// XQueryParser.g:242:9: ( (k+= PRESERVE |k+= NO_PRESERVE ) )
			// XQueryParser.g:242:11: (k+= PRESERVE |k+= NO_PRESERVE )
			{
			root_0 = (XQDTCommonTree)adaptor.nil();


			// XQueryParser.g:242:11: (k+= PRESERVE |k+= NO_PRESERVE )
			int alt14=2;
			int LA14_0 = input.LA(1);
			if ( (LA14_0==PRESERVE) ) {
				alt14=1;
			}
			else if ( (LA14_0==NO_PRESERVE) ) {
				alt14=2;
			}

			else {
				if (state.backtracking>0) {state.failed=true; return retval;}
				NoViableAltException nvae =
					new NoViableAltException("", 14, 0, input);
				throw nvae;
			}

			switch (alt14) {
				case 1 :
					// XQueryParser.g:242:12: k+= PRESERVE
					{
					k=(CommonToken)match(input,PRESERVE,FOLLOW_PRESERVE_in_p_PreserveMode1868); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					k_tree = (XQDTCommonTree)adaptor.create(k);
					adaptor.addChild(root_0, k_tree);
					}

					if (list_k==null) list_k=new ArrayList<Object>();
					list_k.add(k);
					}
					break;
				case 2 :
					// XQueryParser.g:242:26: k+= NO_PRESERVE
					{
					k=(CommonToken)match(input,NO_PRESERVE,FOLLOW_NO_PRESERVE_in_p_PreserveMode1874); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					k_tree = (XQDTCommonTree)adaptor.create(k);
					adaptor.addChild(root_0, k_tree);
					}

					if (list_k==null) list_k=new ArrayList<Object>();
					list_k.add(k);
					}
					break;

			}

			if ( state.backtracking==0 ) {ak(list_k);}
			}

			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (XQDTCommonTree)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
			retval.tree = (XQDTCommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "p_PreserveMode"


	public static class p_InheritMode_return extends ParserRuleReturnScope {
		XQDTCommonTree tree;
		@Override
		public XQDTCommonTree getTree() { return tree; }
	};


	// $ANTLR start "p_InheritMode"
	// XQueryParser.g:246:1: p_InheritMode : (k+= INHERIT |k+= NO_INHERIT ) ;
	public final XQueryParser.p_InheritMode_return p_InheritMode() throws RecognitionException {
		XQueryParser.p_InheritMode_return retval = new XQueryParser.p_InheritMode_return();
		retval.start = input.LT(1);

		XQDTCommonTree root_0 = null;

		CommonToken k=null;
		List<Object> list_k=null;

		XQDTCommonTree k_tree=null;

		try {
			// XQueryParser.g:247:9: ( (k+= INHERIT |k+= NO_INHERIT ) )
			// XQueryParser.g:247:11: (k+= INHERIT |k+= NO_INHERIT )
			{
			root_0 = (XQDTCommonTree)adaptor.nil();


			// XQueryParser.g:247:11: (k+= INHERIT |k+= NO_INHERIT )
			int alt15=2;
			int LA15_0 = input.LA(1);
			if ( (LA15_0==INHERIT) ) {
				alt15=1;
			}
			else if ( (LA15_0==NO_INHERIT) ) {
				alt15=2;
			}

			else {
				if (state.backtracking>0) {state.failed=true; return retval;}
				NoViableAltException nvae =
					new NoViableAltException("", 15, 0, input);
				throw nvae;
			}

			switch (alt15) {
				case 1 :
					// XQueryParser.g:247:12: k+= INHERIT
					{
					k=(CommonToken)match(input,INHERIT,FOLLOW_INHERIT_in_p_InheritMode1906); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					k_tree = (XQDTCommonTree)adaptor.create(k);
					adaptor.addChild(root_0, k_tree);
					}

					if (list_k==null) list_k=new ArrayList<Object>();
					list_k.add(k);
					}
					break;
				case 2 :
					// XQueryParser.g:247:25: k+= NO_INHERIT
					{
					k=(CommonToken)match(input,NO_INHERIT,FOLLOW_NO_INHERIT_in_p_InheritMode1912); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					k_tree = (XQDTCommonTree)adaptor.create(k);
					adaptor.addChild(root_0, k_tree);
					}

					if (list_k==null) list_k=new ArrayList<Object>();
					list_k.add(k);
					}
					break;

			}

			if ( state.backtracking==0 ) {ak(list_k);}
			}

			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (XQDTCommonTree)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
			retval.tree = (XQDTCommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "p_InheritMode"


	public static class pm_DecimalFormatDecl_return extends ParserRuleReturnScope {
		XQDTCommonTree tree;
		@Override
		public XQDTCommonTree getTree() { return tree; }
	};


	// $ANTLR start "pm_DecimalFormatDecl"
	// XQueryParser.g:251:1: pm_DecimalFormatDecl : k= DECLARE ( (k= DECIMAL_FORMAT p_QName ) | (k= DEFAULT k= DECIMAL_FORMAT ) ) ( p_DFPropertyName EQUAL p_StringLiteral )* SEMICOLON ;
	public final XQueryParser.pm_DecimalFormatDecl_return pm_DecimalFormatDecl() throws RecognitionException {
		XQueryParser.pm_DecimalFormatDecl_return retval = new XQueryParser.pm_DecimalFormatDecl_return();
		retval.start = input.LT(1);

		XQDTCommonTree root_0 = null;

		CommonToken k=null;
		CommonToken EQUAL36=null;
		CommonToken SEMICOLON38=null;
		ParserRuleReturnScope p_QName34 =null;
		ParserRuleReturnScope p_DFPropertyName35 =null;
		ParserRuleReturnScope p_StringLiteral37 =null;

		XQDTCommonTree k_tree=null;
		XQDTCommonTree EQUAL36_tree=null;
		XQDTCommonTree SEMICOLON38_tree=null;

		try {
			// XQueryParser.g:252:9: (k= DECLARE ( (k= DECIMAL_FORMAT p_QName ) | (k= DEFAULT k= DECIMAL_FORMAT ) ) ( p_DFPropertyName EQUAL p_StringLiteral )* SEMICOLON )
			// XQueryParser.g:252:11: k= DECLARE ( (k= DECIMAL_FORMAT p_QName ) | (k= DEFAULT k= DECIMAL_FORMAT ) ) ( p_DFPropertyName EQUAL p_StringLiteral )* SEMICOLON
			{
			root_0 = (XQDTCommonTree)adaptor.nil();


			k=(CommonToken)match(input,DECLARE,FOLLOW_DECLARE_in_pm_DecimalFormatDecl1951); if (state.failed) return retval;
			if ( state.backtracking==0 ) {
			k_tree = (XQDTCommonTree)adaptor.create(k);
			adaptor.addChild(root_0, k_tree);
			}

			if ( state.backtracking==0 ) {ak(k);}
			// XQueryParser.g:252:31: ( (k= DECIMAL_FORMAT p_QName ) | (k= DEFAULT k= DECIMAL_FORMAT ) )
			int alt16=2;
			int LA16_0 = input.LA(1);
			if ( (LA16_0==DECIMAL_FORMAT) ) {
				alt16=1;
			}
			else if ( (LA16_0==DEFAULT) ) {
				alt16=2;
			}

			else {
				if (state.backtracking>0) {state.failed=true; return retval;}
				NoViableAltException nvae =
					new NoViableAltException("", 16, 0, input);
				throw nvae;
			}

			switch (alt16) {
				case 1 :
					// XQueryParser.g:252:32: (k= DECIMAL_FORMAT p_QName )
					{
					// XQueryParser.g:252:32: (k= DECIMAL_FORMAT p_QName )
					// XQueryParser.g:252:33: k= DECIMAL_FORMAT p_QName
					{
					k=(CommonToken)match(input,DECIMAL_FORMAT,FOLLOW_DECIMAL_FORMAT_in_pm_DecimalFormatDecl1959); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					k_tree = (XQDTCommonTree)adaptor.create(k);
					adaptor.addChild(root_0, k_tree);
					}

					if ( state.backtracking==0 ) {ak(k);}
					pushFollow(FOLLOW_p_QName_in_pm_DecimalFormatDecl1963);
					p_QName34=p_QName();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, p_QName34.getTree());

					}

					}
					break;
				case 2 :
					// XQueryParser.g:252:71: (k= DEFAULT k= DECIMAL_FORMAT )
					{
					// XQueryParser.g:252:71: (k= DEFAULT k= DECIMAL_FORMAT )
					// XQueryParser.g:252:72: k= DEFAULT k= DECIMAL_FORMAT
					{
					k=(CommonToken)match(input,DEFAULT,FOLLOW_DEFAULT_in_pm_DecimalFormatDecl1971); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					k_tree = (XQDTCommonTree)adaptor.create(k);
					adaptor.addChild(root_0, k_tree);
					}

					if ( state.backtracking==0 ) {ak(k);}
					k=(CommonToken)match(input,DECIMAL_FORMAT,FOLLOW_DECIMAL_FORMAT_in_pm_DecimalFormatDecl1977); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					k_tree = (XQDTCommonTree)adaptor.create(k);
					adaptor.addChild(root_0, k_tree);
					}

					if ( state.backtracking==0 ) {ak(k);}
					}

					}
					break;

			}

			// XQueryParser.g:252:121: ( p_DFPropertyName EQUAL p_StringLiteral )*
			loop17:
			while (true) {
				int alt17=2;
				int LA17_0 = input.LA(1);
				if ( (LA17_0==DECIMAL_SEPARATOR||LA17_0==DIGIT||LA17_0==GROUPING_SEPARATOR||LA17_0==INFINITY||LA17_0==MINUS_SIGN||LA17_0==NAN||(LA17_0 >= PATTERN_SEPARATOR && LA17_0 <= PER_MILLE)||LA17_0==ZERO_DIGIT) ) {
					alt17=1;
				}

				switch (alt17) {
				case 1 :
					// XQueryParser.g:252:122: p_DFPropertyName EQUAL p_StringLiteral
					{
					pushFollow(FOLLOW_p_DFPropertyName_in_pm_DecimalFormatDecl1984);
					p_DFPropertyName35=p_DFPropertyName();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, p_DFPropertyName35.getTree());

					EQUAL36=(CommonToken)match(input,EQUAL,FOLLOW_EQUAL_in_pm_DecimalFormatDecl1986); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					EQUAL36_tree = (XQDTCommonTree)adaptor.create(EQUAL36);
					adaptor.addChild(root_0, EQUAL36_tree);
					}

					pushFollow(FOLLOW_p_StringLiteral_in_pm_DecimalFormatDecl1988);
					p_StringLiteral37=p_StringLiteral();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, p_StringLiteral37.getTree());

					}
					break;

				default :
					break loop17;
				}
			}

			SEMICOLON38=(CommonToken)match(input,SEMICOLON,FOLLOW_SEMICOLON_in_pm_DecimalFormatDecl1992); if (state.failed) return retval;
			if ( state.backtracking==0 ) {
			SEMICOLON38_tree = (XQDTCommonTree)adaptor.create(SEMICOLON38);
			adaptor.addChild(root_0, SEMICOLON38_tree);
			}

			}

			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (XQDTCommonTree)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
			retval.tree = (XQDTCommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "pm_DecimalFormatDecl"


	public static class p_DFPropertyName_return extends ParserRuleReturnScope {
		XQDTCommonTree tree;
		@Override
		public XQDTCommonTree getTree() { return tree; }
	};


	// $ANTLR start "p_DFPropertyName"
	// XQueryParser.g:256:1: p_DFPropertyName : (k= DECIMAL_SEPARATOR |k= GROUPING_SEPARATOR |k= INFINITY |k= MINUS_SIGN |k= NAN |k= PERCENT |k= PER_MILLE |k= ZERO_DIGIT |k= DIGIT |k= PATTERN_SEPARATOR ) ;
	public final XQueryParser.p_DFPropertyName_return p_DFPropertyName() throws RecognitionException {
		XQueryParser.p_DFPropertyName_return retval = new XQueryParser.p_DFPropertyName_return();
		retval.start = input.LT(1);

		XQDTCommonTree root_0 = null;

		CommonToken k=null;

		XQDTCommonTree k_tree=null;

		try {
			// XQueryParser.g:257:9: ( (k= DECIMAL_SEPARATOR |k= GROUPING_SEPARATOR |k= INFINITY |k= MINUS_SIGN |k= NAN |k= PERCENT |k= PER_MILLE |k= ZERO_DIGIT |k= DIGIT |k= PATTERN_SEPARATOR ) )
			// XQueryParser.g:257:11: (k= DECIMAL_SEPARATOR |k= GROUPING_SEPARATOR |k= INFINITY |k= MINUS_SIGN |k= NAN |k= PERCENT |k= PER_MILLE |k= ZERO_DIGIT |k= DIGIT |k= PATTERN_SEPARATOR )
			{
			root_0 = (XQDTCommonTree)adaptor.nil();


			// XQueryParser.g:257:11: (k= DECIMAL_SEPARATOR |k= GROUPING_SEPARATOR |k= INFINITY |k= MINUS_SIGN |k= NAN |k= PERCENT |k= PER_MILLE |k= ZERO_DIGIT |k= DIGIT |k= PATTERN_SEPARATOR )
			int alt18=10;
			switch ( input.LA(1) ) {
			case DECIMAL_SEPARATOR:
				{
				alt18=1;
				}
				break;
			case GROUPING_SEPARATOR:
				{
				alt18=2;
				}
				break;
			case INFINITY:
				{
				alt18=3;
				}
				break;
			case MINUS_SIGN:
				{
				alt18=4;
				}
				break;
			case NAN:
				{
				alt18=5;
				}
				break;
			case PERCENT:
				{
				alt18=6;
				}
				break;
			case PER_MILLE:
				{
				alt18=7;
				}
				break;
			case ZERO_DIGIT:
				{
				alt18=8;
				}
				break;
			case DIGIT:
				{
				alt18=9;
				}
				break;
			case PATTERN_SEPARATOR:
				{
				alt18=10;
				}
				break;
			default:
				if (state.backtracking>0) {state.failed=true; return retval;}
				NoViableAltException nvae =
					new NoViableAltException("", 18, 0, input);
				throw nvae;
			}
			switch (alt18) {
				case 1 :
					// XQueryParser.g:257:12: k= DECIMAL_SEPARATOR
					{
					k=(CommonToken)match(input,DECIMAL_SEPARATOR,FOLLOW_DECIMAL_SEPARATOR_in_p_DFPropertyName2021); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					k_tree = (XQDTCommonTree)adaptor.create(k);
					adaptor.addChild(root_0, k_tree);
					}

					}
					break;
				case 2 :
					// XQueryParser.g:257:34: k= GROUPING_SEPARATOR
					{
					k=(CommonToken)match(input,GROUPING_SEPARATOR,FOLLOW_GROUPING_SEPARATOR_in_p_DFPropertyName2027); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					k_tree = (XQDTCommonTree)adaptor.create(k);
					adaptor.addChild(root_0, k_tree);
					}

					}
					break;
				case 3 :
					// XQueryParser.g:257:57: k= INFINITY
					{
					k=(CommonToken)match(input,INFINITY,FOLLOW_INFINITY_in_p_DFPropertyName2033); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					k_tree = (XQDTCommonTree)adaptor.create(k);
					adaptor.addChild(root_0, k_tree);
					}

					}
					break;
				case 4 :
					// XQueryParser.g:257:70: k= MINUS_SIGN
					{
					k=(CommonToken)match(input,MINUS_SIGN,FOLLOW_MINUS_SIGN_in_p_DFPropertyName2039); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					k_tree = (XQDTCommonTree)adaptor.create(k);
					adaptor.addChild(root_0, k_tree);
					}

					}
					break;
				case 5 :
					// XQueryParser.g:257:85: k= NAN
					{
					k=(CommonToken)match(input,NAN,FOLLOW_NAN_in_p_DFPropertyName2045); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					k_tree = (XQDTCommonTree)adaptor.create(k);
					adaptor.addChild(root_0, k_tree);
					}

					}
					break;
				case 6 :
					// XQueryParser.g:257:93: k= PERCENT
					{
					k=(CommonToken)match(input,PERCENT,FOLLOW_PERCENT_in_p_DFPropertyName2051); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					k_tree = (XQDTCommonTree)adaptor.create(k);
					adaptor.addChild(root_0, k_tree);
					}

					}
					break;
				case 7 :
					// XQueryParser.g:257:105: k= PER_MILLE
					{
					k=(CommonToken)match(input,PER_MILLE,FOLLOW_PER_MILLE_in_p_DFPropertyName2057); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					k_tree = (XQDTCommonTree)adaptor.create(k);
					adaptor.addChild(root_0, k_tree);
					}

					}
					break;
				case 8 :
					// XQueryParser.g:257:119: k= ZERO_DIGIT
					{
					k=(CommonToken)match(input,ZERO_DIGIT,FOLLOW_ZERO_DIGIT_in_p_DFPropertyName2063); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					k_tree = (XQDTCommonTree)adaptor.create(k);
					adaptor.addChild(root_0, k_tree);
					}

					}
					break;
				case 9 :
					// XQueryParser.g:257:134: k= DIGIT
					{
					k=(CommonToken)match(input,DIGIT,FOLLOW_DIGIT_in_p_DFPropertyName2069); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					k_tree = (XQDTCommonTree)adaptor.create(k);
					adaptor.addChild(root_0, k_tree);
					}

					}
					break;
				case 10 :
					// XQueryParser.g:257:144: k= PATTERN_SEPARATOR
					{
					k=(CommonToken)match(input,PATTERN_SEPARATOR,FOLLOW_PATTERN_SEPARATOR_in_p_DFPropertyName2075); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					k_tree = (XQDTCommonTree)adaptor.create(k);
					adaptor.addChild(root_0, k_tree);
					}

					}
					break;

			}

			if ( state.backtracking==0 ) {ak(k);}
			}

			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (XQDTCommonTree)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
			retval.tree = (XQDTCommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "p_DFPropertyName"


	public static class p_Import_return extends ParserRuleReturnScope {
		XQDTCommonTree tree;
		@Override
		public XQDTCommonTree getTree() { return tree; }
	};


	// $ANTLR start "p_Import"
	// XQueryParser.g:261:1: p_Import : ( pm_SchemaImport | pm_ModuleImport );
	public final XQueryParser.p_Import_return p_Import() throws RecognitionException {
		XQueryParser.p_Import_return retval = new XQueryParser.p_Import_return();
		retval.start = input.LT(1);

		XQDTCommonTree root_0 = null;

		ParserRuleReturnScope pm_SchemaImport39 =null;
		ParserRuleReturnScope pm_ModuleImport40 =null;


		try {
			// XQueryParser.g:262:9: ( pm_SchemaImport | pm_ModuleImport )
			int alt19=2;
			int LA19_0 = input.LA(1);
			if ( (LA19_0==IMPORT) ) {
				int LA19_1 = input.LA(2);
				if ( (LA19_1==SCHEMA) ) {
					alt19=1;
				}
				else if ( (LA19_1==MODULE) ) {
					alt19=2;
				}

				else {
					if (state.backtracking>0) {state.failed=true; return retval;}
					int nvaeMark = input.mark();
					try {
						input.consume();
						NoViableAltException nvae =
							new NoViableAltException("", 19, 1, input);
						throw nvae;
					} finally {
						input.rewind(nvaeMark);
					}
				}

			}

			else {
				if (state.backtracking>0) {state.failed=true; return retval;}
				NoViableAltException nvae =
					new NoViableAltException("", 19, 0, input);
				throw nvae;
			}

			switch (alt19) {
				case 1 :
					// XQueryParser.g:262:11: pm_SchemaImport
					{
					root_0 = (XQDTCommonTree)adaptor.nil();


					pushFollow(FOLLOW_pm_SchemaImport_in_p_Import2104);
					pm_SchemaImport39=pm_SchemaImport();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, pm_SchemaImport39.getTree());

					}
					break;
				case 2 :
					// XQueryParser.g:262:29: pm_ModuleImport
					{
					root_0 = (XQDTCommonTree)adaptor.nil();


					pushFollow(FOLLOW_pm_ModuleImport_in_p_Import2108);
					pm_ModuleImport40=pm_ModuleImport();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, pm_ModuleImport40.getTree());

					}
					break;

			}
			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (XQDTCommonTree)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
			retval.tree = (XQDTCommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "p_Import"


	public static class pm_SchemaImport_return extends ParserRuleReturnScope {
		XQDTCommonTree tree;
		@Override
		public XQDTCommonTree getTree() { return tree; }
	};


	// $ANTLR start "pm_SchemaImport"
	// XQueryParser.g:266:1: pm_SchemaImport : k= IMPORT k= SCHEMA (sp= p_SchemaPrefix )? us= p_StringLiteral (k= AT ah+= p_StringLiteral ( COMMA ah+= p_StringLiteral )* )? SEMICOLON -> ^( SchemaImport ^( SchemaPrefix ( $sp)? ) $us ^( AtHints ( $ah)* ) ) ;
	public final XQueryParser.pm_SchemaImport_return pm_SchemaImport() throws RecognitionException {
		XQueryParser.pm_SchemaImport_return retval = new XQueryParser.pm_SchemaImport_return();
		retval.start = input.LT(1);

		XQDTCommonTree root_0 = null;

		CommonToken k=null;
		CommonToken COMMA41=null;
		CommonToken SEMICOLON42=null;
		List<Object> list_ah=null;
		ParserRuleReturnScope sp =null;
		ParserRuleReturnScope us =null;
		RuleReturnScope ah = null;
		XQDTCommonTree k_tree=null;
		XQDTCommonTree COMMA41_tree=null;
		XQDTCommonTree SEMICOLON42_tree=null;
		RewriteRuleTokenStream stream_AT=new RewriteRuleTokenStream(adaptor,"token AT");
		RewriteRuleTokenStream stream_IMPORT=new RewriteRuleTokenStream(adaptor,"token IMPORT");
		RewriteRuleTokenStream stream_SCHEMA=new RewriteRuleTokenStream(adaptor,"token SCHEMA");
		RewriteRuleTokenStream stream_SEMICOLON=new RewriteRuleTokenStream(adaptor,"token SEMICOLON");
		RewriteRuleTokenStream stream_COMMA=new RewriteRuleTokenStream(adaptor,"token COMMA");
		RewriteRuleSubtreeStream stream_p_SchemaPrefix=new RewriteRuleSubtreeStream(adaptor,"rule p_SchemaPrefix");
		RewriteRuleSubtreeStream stream_p_StringLiteral=new RewriteRuleSubtreeStream(adaptor,"rule p_StringLiteral");

		try {
			// XQueryParser.g:267:9: (k= IMPORT k= SCHEMA (sp= p_SchemaPrefix )? us= p_StringLiteral (k= AT ah+= p_StringLiteral ( COMMA ah+= p_StringLiteral )* )? SEMICOLON -> ^( SchemaImport ^( SchemaPrefix ( $sp)? ) $us ^( AtHints ( $ah)* ) ) )
			// XQueryParser.g:267:11: k= IMPORT k= SCHEMA (sp= p_SchemaPrefix )? us= p_StringLiteral (k= AT ah+= p_StringLiteral ( COMMA ah+= p_StringLiteral )* )? SEMICOLON
			{
			k=(CommonToken)match(input,IMPORT,FOLLOW_IMPORT_in_pm_SchemaImport2144); if (state.failed) return retval; 
			if ( state.backtracking==0 ) stream_IMPORT.add(k);

			if ( state.backtracking==0 ) {ak(k);}
			k=(CommonToken)match(input,SCHEMA,FOLLOW_SCHEMA_in_pm_SchemaImport2150); if (state.failed) return retval; 
			if ( state.backtracking==0 ) stream_SCHEMA.add(k);

			if ( state.backtracking==0 ) {ak(k);}
			// XQueryParser.g:267:51: (sp= p_SchemaPrefix )?
			int alt20=2;
			int LA20_0 = input.LA(1);
			if ( (LA20_0==DEFAULT||LA20_0==NAMESPACE) ) {
				alt20=1;
			}
			switch (alt20) {
				case 1 :
					// XQueryParser.g:267:51: sp= p_SchemaPrefix
					{
					pushFollow(FOLLOW_p_SchemaPrefix_in_pm_SchemaImport2156);
					sp=p_SchemaPrefix();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) stream_p_SchemaPrefix.add(sp.getTree());
					}
					break;

			}

			pushFollow(FOLLOW_p_StringLiteral_in_pm_SchemaImport2161);
			us=p_StringLiteral();
			state._fsp--;
			if (state.failed) return retval;
			if ( state.backtracking==0 ) stream_p_StringLiteral.add(us.getTree());
			// XQueryParser.g:267:87: (k= AT ah+= p_StringLiteral ( COMMA ah+= p_StringLiteral )* )?
			int alt22=2;
			int LA22_0 = input.LA(1);
			if ( (LA22_0==AT) ) {
				alt22=1;
			}
			switch (alt22) {
				case 1 :
					// XQueryParser.g:267:88: k= AT ah+= p_StringLiteral ( COMMA ah+= p_StringLiteral )*
					{
					k=(CommonToken)match(input,AT,FOLLOW_AT_in_pm_SchemaImport2166); if (state.failed) return retval; 
					if ( state.backtracking==0 ) stream_AT.add(k);

					if ( state.backtracking==0 ) {ak(k);}
					pushFollow(FOLLOW_p_StringLiteral_in_pm_SchemaImport2172);
					ah=p_StringLiteral();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) stream_p_StringLiteral.add(ah.getTree());
					if (list_ah==null) list_ah=new ArrayList<Object>();
					list_ah.add(ah.getTree());
					// XQueryParser.g:267:123: ( COMMA ah+= p_StringLiteral )*
					loop21:
					while (true) {
						int alt21=2;
						int LA21_0 = input.LA(1);
						if ( (LA21_0==COMMA) ) {
							alt21=1;
						}

						switch (alt21) {
						case 1 :
							// XQueryParser.g:267:124: COMMA ah+= p_StringLiteral
							{
							COMMA41=(CommonToken)match(input,COMMA,FOLLOW_COMMA_in_pm_SchemaImport2175); if (state.failed) return retval; 
							if ( state.backtracking==0 ) stream_COMMA.add(COMMA41);

							pushFollow(FOLLOW_p_StringLiteral_in_pm_SchemaImport2179);
							ah=p_StringLiteral();
							state._fsp--;
							if (state.failed) return retval;
							if ( state.backtracking==0 ) stream_p_StringLiteral.add(ah.getTree());
							if (list_ah==null) list_ah=new ArrayList<Object>();
							list_ah.add(ah.getTree());
							}
							break;

						default :
							break loop21;
						}
					}

					}
					break;

			}

			SEMICOLON42=(CommonToken)match(input,SEMICOLON,FOLLOW_SEMICOLON_in_pm_SchemaImport2185); if (state.failed) return retval; 
			if ( state.backtracking==0 ) stream_SEMICOLON.add(SEMICOLON42);

			// AST REWRITE
			// elements: sp, ah, us
			// token labels: 
			// rule labels: retval, sp, us
			// token list labels: 
			// rule list labels: ah
			// wildcard labels: 
			if ( state.backtracking==0 ) {
			retval.tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.getTree():null);
			RewriteRuleSubtreeStream stream_sp=new RewriteRuleSubtreeStream(adaptor,"rule sp",sp!=null?sp.getTree():null);
			RewriteRuleSubtreeStream stream_us=new RewriteRuleSubtreeStream(adaptor,"rule us",us!=null?us.getTree():null);
			RewriteRuleSubtreeStream stream_ah=new RewriteRuleSubtreeStream(adaptor,"token ah",list_ah);
			root_0 = (XQDTCommonTree)adaptor.nil();
			// 268:17: -> ^( SchemaImport ^( SchemaPrefix ( $sp)? ) $us ^( AtHints ( $ah)* ) )
			{
				// XQueryParser.g:268:20: ^( SchemaImport ^( SchemaPrefix ( $sp)? ) $us ^( AtHints ( $ah)* ) )
				{
				XQDTCommonTree root_1 = (XQDTCommonTree)adaptor.nil();
				root_1 = (XQDTCommonTree)adaptor.becomeRoot((XQDTCommonTree)adaptor.create(SchemaImport, "SchemaImport"), root_1);
				// XQueryParser.g:268:35: ^( SchemaPrefix ( $sp)? )
				{
				XQDTCommonTree root_2 = (XQDTCommonTree)adaptor.nil();
				root_2 = (XQDTCommonTree)adaptor.becomeRoot((XQDTCommonTree)adaptor.create(SchemaPrefix, "SchemaPrefix"), root_2);
				// XQueryParser.g:268:51: ( $sp)?
				if ( stream_sp.hasNext() ) {
					adaptor.addChild(root_2, stream_sp.nextTree());
				}
				stream_sp.reset();

				adaptor.addChild(root_1, root_2);
				}

				adaptor.addChild(root_1, stream_us.nextTree());
				// XQueryParser.g:268:60: ^( AtHints ( $ah)* )
				{
				XQDTCommonTree root_2 = (XQDTCommonTree)adaptor.nil();
				root_2 = (XQDTCommonTree)adaptor.becomeRoot((XQDTCommonTree)adaptor.create(AtHints, "AtHints"), root_2);
				// XQueryParser.g:268:71: ( $ah)*
				while ( stream_ah.hasNext() ) {
					adaptor.addChild(root_2, stream_ah.nextTree());
				}
				stream_ah.reset();

				adaptor.addChild(root_1, root_2);
				}

				adaptor.addChild(root_0, root_1);
				}

			}


			retval.tree = root_0;
			}

			}

			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (XQDTCommonTree)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
			retval.tree = (XQDTCommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "pm_SchemaImport"


	public static class p_SchemaPrefix_return extends ParserRuleReturnScope {
		XQDTCommonTree tree;
		@Override
		public XQDTCommonTree getTree() { return tree; }
	};


	// $ANTLR start "p_SchemaPrefix"
	// XQueryParser.g:272:1: p_SchemaPrefix : (k= NAMESPACE nn= p_NCName EQUAL -> ^( NamespaceName $nn) |k= DEFAULT k= ELEMENT k= NAMESPACE -> DefaultElementNamespace );
	public final XQueryParser.p_SchemaPrefix_return p_SchemaPrefix() throws RecognitionException {
		XQueryParser.p_SchemaPrefix_return retval = new XQueryParser.p_SchemaPrefix_return();
		retval.start = input.LT(1);

		XQDTCommonTree root_0 = null;

		CommonToken k=null;
		CommonToken EQUAL43=null;
		ParserRuleReturnScope nn =null;

		XQDTCommonTree k_tree=null;
		XQDTCommonTree EQUAL43_tree=null;
		RewriteRuleTokenStream stream_ELEMENT=new RewriteRuleTokenStream(adaptor,"token ELEMENT");
		RewriteRuleTokenStream stream_NAMESPACE=new RewriteRuleTokenStream(adaptor,"token NAMESPACE");
		RewriteRuleTokenStream stream_EQUAL=new RewriteRuleTokenStream(adaptor,"token EQUAL");
		RewriteRuleTokenStream stream_DEFAULT=new RewriteRuleTokenStream(adaptor,"token DEFAULT");
		RewriteRuleSubtreeStream stream_p_NCName=new RewriteRuleSubtreeStream(adaptor,"rule p_NCName");

		try {
			// XQueryParser.g:273:9: (k= NAMESPACE nn= p_NCName EQUAL -> ^( NamespaceName $nn) |k= DEFAULT k= ELEMENT k= NAMESPACE -> DefaultElementNamespace )
			int alt23=2;
			int LA23_0 = input.LA(1);
			if ( (LA23_0==NAMESPACE) ) {
				alt23=1;
			}
			else if ( (LA23_0==DEFAULT) ) {
				alt23=2;
			}

			else {
				if (state.backtracking>0) {state.failed=true; return retval;}
				NoViableAltException nvae =
					new NoViableAltException("", 23, 0, input);
				throw nvae;
			}

			switch (alt23) {
				case 1 :
					// XQueryParser.g:273:11: k= NAMESPACE nn= p_NCName EQUAL
					{
					k=(CommonToken)match(input,NAMESPACE,FOLLOW_NAMESPACE_in_p_SchemaPrefix2255); if (state.failed) return retval; 
					if ( state.backtracking==0 ) stream_NAMESPACE.add(k);

					if ( state.backtracking==0 ) {ak(k);}
					pushFollow(FOLLOW_p_NCName_in_p_SchemaPrefix2261);
					nn=p_NCName();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) stream_p_NCName.add(nn.getTree());
					EQUAL43=(CommonToken)match(input,EQUAL,FOLLOW_EQUAL_in_p_SchemaPrefix2263); if (state.failed) return retval; 
					if ( state.backtracking==0 ) stream_EQUAL.add(EQUAL43);

					// AST REWRITE
					// elements: nn
					// token labels: 
					// rule labels: retval, nn
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					if ( state.backtracking==0 ) {
					retval.tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.getTree():null);
					RewriteRuleSubtreeStream stream_nn=new RewriteRuleSubtreeStream(adaptor,"rule nn",nn!=null?nn.getTree():null);

					root_0 = (XQDTCommonTree)adaptor.nil();
					// 274:17: -> ^( NamespaceName $nn)
					{
						// XQueryParser.g:274:20: ^( NamespaceName $nn)
						{
						XQDTCommonTree root_1 = (XQDTCommonTree)adaptor.nil();
						root_1 = (XQDTCommonTree)adaptor.becomeRoot((XQDTCommonTree)adaptor.create(NamespaceName, "NamespaceName"), root_1);
						adaptor.addChild(root_1, stream_nn.nextTree());
						adaptor.addChild(root_0, root_1);
						}

					}


					retval.tree = root_0;
					}

					}
					break;
				case 2 :
					// XQueryParser.g:275:11: k= DEFAULT k= ELEMENT k= NAMESPACE
					{
					k=(CommonToken)match(input,DEFAULT,FOLLOW_DEFAULT_in_p_SchemaPrefix2302); if (state.failed) return retval; 
					if ( state.backtracking==0 ) stream_DEFAULT.add(k);

					if ( state.backtracking==0 ) {ak(k);}
					k=(CommonToken)match(input,ELEMENT,FOLLOW_ELEMENT_in_p_SchemaPrefix2308); if (state.failed) return retval; 
					if ( state.backtracking==0 ) stream_ELEMENT.add(k);

					if ( state.backtracking==0 ) {ak(k);}
					k=(CommonToken)match(input,NAMESPACE,FOLLOW_NAMESPACE_in_p_SchemaPrefix2314); if (state.failed) return retval; 
					if ( state.backtracking==0 ) stream_NAMESPACE.add(k);

					if ( state.backtracking==0 ) {ak(k);}
					// AST REWRITE
					// elements: 
					// token labels: 
					// rule labels: retval
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					if ( state.backtracking==0 ) {
					retval.tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.getTree():null);

					root_0 = (XQDTCommonTree)adaptor.nil();
					// 276:17: -> DefaultElementNamespace
					{
						adaptor.addChild(root_0, (XQDTCommonTree)adaptor.create(DefaultElementNamespace, "DefaultElementNamespace"));
					}


					retval.tree = root_0;
					}

					}
					break;

			}
			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (XQDTCommonTree)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
			retval.tree = (XQDTCommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "p_SchemaPrefix"


	public static class pm_ModuleImport_return extends ParserRuleReturnScope {
		XQDTCommonTree tree;
		@Override
		public XQDTCommonTree getTree() { return tree; }
	};


	// $ANTLR start "pm_ModuleImport"
	// XQueryParser.g:280:1: pm_ModuleImport : k= IMPORT k= MODULE (k= NAMESPACE nn= p_NCName EQUAL )? us= p_StringLiteral (k= AT ah+= p_StringLiteral ( COMMA ah+= p_StringLiteral )* )? SEMICOLON -> ^( ModuleImport ^( NamespaceName ( $nn)? ) $us ^( AtHints ( $ah)* ) ) ;
	public final XQueryParser.pm_ModuleImport_return pm_ModuleImport() throws RecognitionException {
		XQueryParser.pm_ModuleImport_return retval = new XQueryParser.pm_ModuleImport_return();
		retval.start = input.LT(1);

		XQDTCommonTree root_0 = null;

		CommonToken k=null;
		CommonToken EQUAL44=null;
		CommonToken COMMA45=null;
		CommonToken SEMICOLON46=null;
		List<Object> list_ah=null;
		ParserRuleReturnScope nn =null;
		ParserRuleReturnScope us =null;
		RuleReturnScope ah = null;
		XQDTCommonTree k_tree=null;
		XQDTCommonTree EQUAL44_tree=null;
		XQDTCommonTree COMMA45_tree=null;
		XQDTCommonTree SEMICOLON46_tree=null;
		RewriteRuleTokenStream stream_AT=new RewriteRuleTokenStream(adaptor,"token AT");
		RewriteRuleTokenStream stream_IMPORT=new RewriteRuleTokenStream(adaptor,"token IMPORT");
		RewriteRuleTokenStream stream_SEMICOLON=new RewriteRuleTokenStream(adaptor,"token SEMICOLON");
		RewriteRuleTokenStream stream_MODULE=new RewriteRuleTokenStream(adaptor,"token MODULE");
		RewriteRuleTokenStream stream_COMMA=new RewriteRuleTokenStream(adaptor,"token COMMA");
		RewriteRuleTokenStream stream_NAMESPACE=new RewriteRuleTokenStream(adaptor,"token NAMESPACE");
		RewriteRuleTokenStream stream_EQUAL=new RewriteRuleTokenStream(adaptor,"token EQUAL");
		RewriteRuleSubtreeStream stream_p_NCName=new RewriteRuleSubtreeStream(adaptor,"rule p_NCName");
		RewriteRuleSubtreeStream stream_p_StringLiteral=new RewriteRuleSubtreeStream(adaptor,"rule p_StringLiteral");

		try {
			// XQueryParser.g:281:9: (k= IMPORT k= MODULE (k= NAMESPACE nn= p_NCName EQUAL )? us= p_StringLiteral (k= AT ah+= p_StringLiteral ( COMMA ah+= p_StringLiteral )* )? SEMICOLON -> ^( ModuleImport ^( NamespaceName ( $nn)? ) $us ^( AtHints ( $ah)* ) ) )
			// XQueryParser.g:281:11: k= IMPORT k= MODULE (k= NAMESPACE nn= p_NCName EQUAL )? us= p_StringLiteral (k= AT ah+= p_StringLiteral ( COMMA ah+= p_StringLiteral )* )? SEMICOLON
			{
			k=(CommonToken)match(input,IMPORT,FOLLOW_IMPORT_in_pm_ModuleImport2364); if (state.failed) return retval; 
			if ( state.backtracking==0 ) stream_IMPORT.add(k);

			if ( state.backtracking==0 ) {ak(k);}
			k=(CommonToken)match(input,MODULE,FOLLOW_MODULE_in_pm_ModuleImport2370); if (state.failed) return retval; 
			if ( state.backtracking==0 ) stream_MODULE.add(k);

			if ( state.backtracking==0 ) {ak(k);}
			// XQueryParser.g:281:49: (k= NAMESPACE nn= p_NCName EQUAL )?
			int alt24=2;
			int LA24_0 = input.LA(1);
			if ( (LA24_0==NAMESPACE) ) {
				alt24=1;
			}
			switch (alt24) {
				case 1 :
					// XQueryParser.g:281:50: k= NAMESPACE nn= p_NCName EQUAL
					{
					k=(CommonToken)match(input,NAMESPACE,FOLLOW_NAMESPACE_in_pm_ModuleImport2377); if (state.failed) return retval; 
					if ( state.backtracking==0 ) stream_NAMESPACE.add(k);

					if ( state.backtracking==0 ) {ak(k);}
					pushFollow(FOLLOW_p_NCName_in_pm_ModuleImport2383);
					nn=p_NCName();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) stream_p_NCName.add(nn.getTree());
					EQUAL44=(CommonToken)match(input,EQUAL,FOLLOW_EQUAL_in_pm_ModuleImport2385); if (state.failed) return retval; 
					if ( state.backtracking==0 ) stream_EQUAL.add(EQUAL44);

					}
					break;

			}

			pushFollow(FOLLOW_p_StringLiteral_in_pm_ModuleImport2391);
			us=p_StringLiteral();
			state._fsp--;
			if (state.failed) return retval;
			if ( state.backtracking==0 ) stream_p_StringLiteral.add(us.getTree());
			// XQueryParser.g:281:111: (k= AT ah+= p_StringLiteral ( COMMA ah+= p_StringLiteral )* )?
			int alt26=2;
			int LA26_0 = input.LA(1);
			if ( (LA26_0==AT) ) {
				alt26=1;
			}
			switch (alt26) {
				case 1 :
					// XQueryParser.g:281:112: k= AT ah+= p_StringLiteral ( COMMA ah+= p_StringLiteral )*
					{
					k=(CommonToken)match(input,AT,FOLLOW_AT_in_pm_ModuleImport2396); if (state.failed) return retval; 
					if ( state.backtracking==0 ) stream_AT.add(k);

					if ( state.backtracking==0 ) {ak(k);}
					pushFollow(FOLLOW_p_StringLiteral_in_pm_ModuleImport2402);
					ah=p_StringLiteral();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) stream_p_StringLiteral.add(ah.getTree());
					if (list_ah==null) list_ah=new ArrayList<Object>();
					list_ah.add(ah.getTree());
					// XQueryParser.g:281:147: ( COMMA ah+= p_StringLiteral )*
					loop25:
					while (true) {
						int alt25=2;
						int LA25_0 = input.LA(1);
						if ( (LA25_0==COMMA) ) {
							alt25=1;
						}

						switch (alt25) {
						case 1 :
							// XQueryParser.g:281:148: COMMA ah+= p_StringLiteral
							{
							COMMA45=(CommonToken)match(input,COMMA,FOLLOW_COMMA_in_pm_ModuleImport2405); if (state.failed) return retval; 
							if ( state.backtracking==0 ) stream_COMMA.add(COMMA45);

							pushFollow(FOLLOW_p_StringLiteral_in_pm_ModuleImport2409);
							ah=p_StringLiteral();
							state._fsp--;
							if (state.failed) return retval;
							if ( state.backtracking==0 ) stream_p_StringLiteral.add(ah.getTree());
							if (list_ah==null) list_ah=new ArrayList<Object>();
							list_ah.add(ah.getTree());
							}
							break;

						default :
							break loop25;
						}
					}

					}
					break;

			}

			SEMICOLON46=(CommonToken)match(input,SEMICOLON,FOLLOW_SEMICOLON_in_pm_ModuleImport2415); if (state.failed) return retval; 
			if ( state.backtracking==0 ) stream_SEMICOLON.add(SEMICOLON46);

			// AST REWRITE
			// elements: ah, nn, us
			// token labels: 
			// rule labels: retval, nn, us
			// token list labels: 
			// rule list labels: ah
			// wildcard labels: 
			if ( state.backtracking==0 ) {
			retval.tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.getTree():null);
			RewriteRuleSubtreeStream stream_nn=new RewriteRuleSubtreeStream(adaptor,"rule nn",nn!=null?nn.getTree():null);
			RewriteRuleSubtreeStream stream_us=new RewriteRuleSubtreeStream(adaptor,"rule us",us!=null?us.getTree():null);
			RewriteRuleSubtreeStream stream_ah=new RewriteRuleSubtreeStream(adaptor,"token ah",list_ah);
			root_0 = (XQDTCommonTree)adaptor.nil();
			// 282:17: -> ^( ModuleImport ^( NamespaceName ( $nn)? ) $us ^( AtHints ( $ah)* ) )
			{
				// XQueryParser.g:282:20: ^( ModuleImport ^( NamespaceName ( $nn)? ) $us ^( AtHints ( $ah)* ) )
				{
				XQDTCommonTree root_1 = (XQDTCommonTree)adaptor.nil();
				root_1 = (XQDTCommonTree)adaptor.becomeRoot((XQDTCommonTree)adaptor.create(ModuleImport, "ModuleImport"), root_1);
				// XQueryParser.g:282:35: ^( NamespaceName ( $nn)? )
				{
				XQDTCommonTree root_2 = (XQDTCommonTree)adaptor.nil();
				root_2 = (XQDTCommonTree)adaptor.becomeRoot((XQDTCommonTree)adaptor.create(NamespaceName, "NamespaceName"), root_2);
				// XQueryParser.g:282:52: ( $nn)?
				if ( stream_nn.hasNext() ) {
					adaptor.addChild(root_2, stream_nn.nextTree());
				}
				stream_nn.reset();

				adaptor.addChild(root_1, root_2);
				}

				adaptor.addChild(root_1, stream_us.nextTree());
				// XQueryParser.g:282:61: ^( AtHints ( $ah)* )
				{
				XQDTCommonTree root_2 = (XQDTCommonTree)adaptor.nil();
				root_2 = (XQDTCommonTree)adaptor.becomeRoot((XQDTCommonTree)adaptor.create(AtHints, "AtHints"), root_2);
				// XQueryParser.g:282:72: ( $ah)*
				while ( stream_ah.hasNext() ) {
					adaptor.addChild(root_2, stream_ah.nextTree());
				}
				stream_ah.reset();

				adaptor.addChild(root_1, root_2);
				}

				adaptor.addChild(root_0, root_1);
				}

			}


			retval.tree = root_0;
			}

			}

			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (XQDTCommonTree)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
			retval.tree = (XQDTCommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "pm_ModuleImport"


	public static class pm_NamespaceDecl_return extends ParserRuleReturnScope {
		XQDTCommonTree tree;
		@Override
		public XQDTCommonTree getTree() { return tree; }
	};


	// $ANTLR start "pm_NamespaceDecl"
	// XQueryParser.g:286:1: pm_NamespaceDecl : k= DECLARE k= NAMESPACE nn= p_NCName EQUAL us= p_StringLiteral SEMICOLON -> ^( NamespaceDecl $nn $us) ;
	public final XQueryParser.pm_NamespaceDecl_return pm_NamespaceDecl() throws RecognitionException {
		XQueryParser.pm_NamespaceDecl_return retval = new XQueryParser.pm_NamespaceDecl_return();
		retval.start = input.LT(1);

		XQDTCommonTree root_0 = null;

		CommonToken k=null;
		CommonToken EQUAL47=null;
		CommonToken SEMICOLON48=null;
		ParserRuleReturnScope nn =null;
		ParserRuleReturnScope us =null;

		XQDTCommonTree k_tree=null;
		XQDTCommonTree EQUAL47_tree=null;
		XQDTCommonTree SEMICOLON48_tree=null;
		RewriteRuleTokenStream stream_DECLARE=new RewriteRuleTokenStream(adaptor,"token DECLARE");
		RewriteRuleTokenStream stream_SEMICOLON=new RewriteRuleTokenStream(adaptor,"token SEMICOLON");
		RewriteRuleTokenStream stream_NAMESPACE=new RewriteRuleTokenStream(adaptor,"token NAMESPACE");
		RewriteRuleTokenStream stream_EQUAL=new RewriteRuleTokenStream(adaptor,"token EQUAL");
		RewriteRuleSubtreeStream stream_p_NCName=new RewriteRuleSubtreeStream(adaptor,"rule p_NCName");
		RewriteRuleSubtreeStream stream_p_StringLiteral=new RewriteRuleSubtreeStream(adaptor,"rule p_StringLiteral");

		try {
			// XQueryParser.g:287:9: (k= DECLARE k= NAMESPACE nn= p_NCName EQUAL us= p_StringLiteral SEMICOLON -> ^( NamespaceDecl $nn $us) )
			// XQueryParser.g:287:11: k= DECLARE k= NAMESPACE nn= p_NCName EQUAL us= p_StringLiteral SEMICOLON
			{
			k=(CommonToken)match(input,DECLARE,FOLLOW_DECLARE_in_pm_NamespaceDecl2484); if (state.failed) return retval; 
			if ( state.backtracking==0 ) stream_DECLARE.add(k);

			if ( state.backtracking==0 ) {ak(k);}
			k=(CommonToken)match(input,NAMESPACE,FOLLOW_NAMESPACE_in_pm_NamespaceDecl2490); if (state.failed) return retval; 
			if ( state.backtracking==0 ) stream_NAMESPACE.add(k);

			if ( state.backtracking==0 ) {ak(k);}
			pushFollow(FOLLOW_p_NCName_in_pm_NamespaceDecl2496);
			nn=p_NCName();
			state._fsp--;
			if (state.failed) return retval;
			if ( state.backtracking==0 ) stream_p_NCName.add(nn.getTree());
			EQUAL47=(CommonToken)match(input,EQUAL,FOLLOW_EQUAL_in_pm_NamespaceDecl2498); if (state.failed) return retval; 
			if ( state.backtracking==0 ) stream_EQUAL.add(EQUAL47);

			pushFollow(FOLLOW_p_StringLiteral_in_pm_NamespaceDecl2502);
			us=p_StringLiteral();
			state._fsp--;
			if (state.failed) return retval;
			if ( state.backtracking==0 ) stream_p_StringLiteral.add(us.getTree());
			SEMICOLON48=(CommonToken)match(input,SEMICOLON,FOLLOW_SEMICOLON_in_pm_NamespaceDecl2504); if (state.failed) return retval; 
			if ( state.backtracking==0 ) stream_SEMICOLON.add(SEMICOLON48);

			// AST REWRITE
			// elements: nn, us
			// token labels: 
			// rule labels: retval, nn, us
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			if ( state.backtracking==0 ) {
			retval.tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.getTree():null);
			RewriteRuleSubtreeStream stream_nn=new RewriteRuleSubtreeStream(adaptor,"rule nn",nn!=null?nn.getTree():null);
			RewriteRuleSubtreeStream stream_us=new RewriteRuleSubtreeStream(adaptor,"rule us",us!=null?us.getTree():null);

			root_0 = (XQDTCommonTree)adaptor.nil();
			// 288:17: -> ^( NamespaceDecl $nn $us)
			{
				// XQueryParser.g:288:20: ^( NamespaceDecl $nn $us)
				{
				XQDTCommonTree root_1 = (XQDTCommonTree)adaptor.nil();
				root_1 = (XQDTCommonTree)adaptor.becomeRoot((XQDTCommonTree)adaptor.create(NamespaceDecl, "NamespaceDecl"), root_1);
				adaptor.addChild(root_1, stream_nn.nextTree());
				adaptor.addChild(root_1, stream_us.nextTree());
				adaptor.addChild(root_0, root_1);
				}

			}


			retval.tree = root_0;
			}

			}

			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (XQDTCommonTree)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
			retval.tree = (XQDTCommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "pm_NamespaceDecl"


	public static class pm_DefaultNamespaceDecl_return extends ParserRuleReturnScope {
		XQDTCommonTree tree;
		@Override
		public XQDTCommonTree getTree() { return tree; }
	};


	// $ANTLR start "pm_DefaultNamespaceDecl"
	// XQueryParser.g:292:1: pm_DefaultNamespaceDecl : k= DECLARE k= DEFAULT (k= ELEMENT |k= FUNCTION ) k= NAMESPACE p_StringLiteral SEMICOLON ;
	public final XQueryParser.pm_DefaultNamespaceDecl_return pm_DefaultNamespaceDecl() throws RecognitionException {
		XQueryParser.pm_DefaultNamespaceDecl_return retval = new XQueryParser.pm_DefaultNamespaceDecl_return();
		retval.start = input.LT(1);

		XQDTCommonTree root_0 = null;

		CommonToken k=null;
		CommonToken SEMICOLON50=null;
		ParserRuleReturnScope p_StringLiteral49 =null;

		XQDTCommonTree k_tree=null;
		XQDTCommonTree SEMICOLON50_tree=null;

		try {
			// XQueryParser.g:293:9: (k= DECLARE k= DEFAULT (k= ELEMENT |k= FUNCTION ) k= NAMESPACE p_StringLiteral SEMICOLON )
			// XQueryParser.g:293:11: k= DECLARE k= DEFAULT (k= ELEMENT |k= FUNCTION ) k= NAMESPACE p_StringLiteral SEMICOLON
			{
			root_0 = (XQDTCommonTree)adaptor.nil();


			k=(CommonToken)match(input,DECLARE,FOLLOW_DECLARE_in_pm_DefaultNamespaceDecl2561); if (state.failed) return retval;
			if ( state.backtracking==0 ) {
			k_tree = (XQDTCommonTree)adaptor.create(k);
			adaptor.addChild(root_0, k_tree);
			}

			if ( state.backtracking==0 ) {ak(k);}
			k=(CommonToken)match(input,DEFAULT,FOLLOW_DEFAULT_in_pm_DefaultNamespaceDecl2567); if (state.failed) return retval;
			if ( state.backtracking==0 ) {
			k_tree = (XQDTCommonTree)adaptor.create(k);
			adaptor.addChild(root_0, k_tree);
			}

			if ( state.backtracking==0 ) {ak(k);}
			// XQueryParser.g:293:51: (k= ELEMENT |k= FUNCTION )
			int alt27=2;
			int LA27_0 = input.LA(1);
			if ( (LA27_0==ELEMENT) ) {
				alt27=1;
			}
			else if ( (LA27_0==FUNCTION) ) {
				alt27=2;
			}

			else {
				if (state.backtracking>0) {state.failed=true; return retval;}
				NoViableAltException nvae =
					new NoViableAltException("", 27, 0, input);
				throw nvae;
			}

			switch (alt27) {
				case 1 :
					// XQueryParser.g:293:52: k= ELEMENT
					{
					k=(CommonToken)match(input,ELEMENT,FOLLOW_ELEMENT_in_pm_DefaultNamespaceDecl2574); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					k_tree = (XQDTCommonTree)adaptor.create(k);
					adaptor.addChild(root_0, k_tree);
					}

					}
					break;
				case 2 :
					// XQueryParser.g:293:64: k= FUNCTION
					{
					k=(CommonToken)match(input,FUNCTION,FOLLOW_FUNCTION_in_pm_DefaultNamespaceDecl2580); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					k_tree = (XQDTCommonTree)adaptor.create(k);
					adaptor.addChild(root_0, k_tree);
					}

					}
					break;

			}

			if ( state.backtracking==0 ) {ak(k);}
			k=(CommonToken)match(input,NAMESPACE,FOLLOW_NAMESPACE_in_pm_DefaultNamespaceDecl2587); if (state.failed) return retval;
			if ( state.backtracking==0 ) {
			k_tree = (XQDTCommonTree)adaptor.create(k);
			adaptor.addChild(root_0, k_tree);
			}

			if ( state.backtracking==0 ) {ak(k);}
			pushFollow(FOLLOW_p_StringLiteral_in_pm_DefaultNamespaceDecl2591);
			p_StringLiteral49=p_StringLiteral();
			state._fsp--;
			if (state.failed) return retval;
			if ( state.backtracking==0 ) adaptor.addChild(root_0, p_StringLiteral49.getTree());

			SEMICOLON50=(CommonToken)match(input,SEMICOLON,FOLLOW_SEMICOLON_in_pm_DefaultNamespaceDecl2593); if (state.failed) return retval;
			if ( state.backtracking==0 ) {
			SEMICOLON50_tree = (XQDTCommonTree)adaptor.create(SEMICOLON50);
			adaptor.addChild(root_0, SEMICOLON50_tree);
			}

			}

			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (XQDTCommonTree)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
			retval.tree = (XQDTCommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "pm_DefaultNamespaceDecl"


	public static class pm_AnnotatedDecl_return extends ParserRuleReturnScope {
		XQDTCommonTree tree;
		@Override
		public XQDTCommonTree getTree() { return tree; }
	};


	// $ANTLR start "pm_AnnotatedDecl"
	// XQueryParser.g:297:1: pm_AnnotatedDecl : k= DECLARE ( p_Annotation )* pg_AnnotatedDecl SEMICOLON ;
	public final XQueryParser.pm_AnnotatedDecl_return pm_AnnotatedDecl() throws RecognitionException {
		XQueryParser.pm_AnnotatedDecl_return retval = new XQueryParser.pm_AnnotatedDecl_return();
		retval.start = input.LT(1);

		XQDTCommonTree root_0 = null;

		CommonToken k=null;
		CommonToken SEMICOLON53=null;
		ParserRuleReturnScope p_Annotation51 =null;
		ParserRuleReturnScope pg_AnnotatedDecl52 =null;

		XQDTCommonTree k_tree=null;
		XQDTCommonTree SEMICOLON53_tree=null;

		try {
			// XQueryParser.g:298:9: (k= DECLARE ( p_Annotation )* pg_AnnotatedDecl SEMICOLON )
			// XQueryParser.g:298:11: k= DECLARE ( p_Annotation )* pg_AnnotatedDecl SEMICOLON
			{
			root_0 = (XQDTCommonTree)adaptor.nil();


			k=(CommonToken)match(input,DECLARE,FOLLOW_DECLARE_in_pm_AnnotatedDecl2621); if (state.failed) return retval;
			if ( state.backtracking==0 ) {
			k_tree = (XQDTCommonTree)adaptor.create(k);
			adaptor.addChild(root_0, k_tree);
			}

			if ( state.backtracking==0 ) {ak(k);}
			// XQueryParser.g:298:31: ( p_Annotation )*
			loop28:
			while (true) {
				int alt28=2;
				int LA28_0 = input.LA(1);
				if ( (LA28_0==ANN_PERCENT) ) {
					alt28=1;
				}

				switch (alt28) {
				case 1 :
					// XQueryParser.g:298:31: p_Annotation
					{
					pushFollow(FOLLOW_p_Annotation_in_pm_AnnotatedDecl2625);
					p_Annotation51=p_Annotation();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, p_Annotation51.getTree());

					}
					break;

				default :
					break loop28;
				}
			}

			pushFollow(FOLLOW_pg_AnnotatedDecl_in_pm_AnnotatedDecl2628);
			pg_AnnotatedDecl52=pg_AnnotatedDecl();
			state._fsp--;
			if (state.failed) return retval;
			if ( state.backtracking==0 ) adaptor.addChild(root_0, pg_AnnotatedDecl52.getTree());

			SEMICOLON53=(CommonToken)match(input,SEMICOLON,FOLLOW_SEMICOLON_in_pm_AnnotatedDecl2630); if (state.failed) return retval;
			if ( state.backtracking==0 ) {
			SEMICOLON53_tree = (XQDTCommonTree)adaptor.create(SEMICOLON53);
			adaptor.addChild(root_0, SEMICOLON53_tree);
			}

			}

			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (XQDTCommonTree)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
			retval.tree = (XQDTCommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "pm_AnnotatedDecl"


	public static class pg_AnnotatedDecl_return extends ParserRuleReturnScope {
		XQDTCommonTree tree;
		@Override
		public XQDTCommonTree getTree() { return tree; }
	};


	// $ANTLR start "pg_AnnotatedDecl"
	// XQueryParser.g:300:1: pg_AnnotatedDecl : ( p_VarDecl | pm_FunctionDecl |{...}? => p_CollectionDecl |{...}? => p_IndexDecl |{...}? => p_ICDecl );
	public final XQueryParser.pg_AnnotatedDecl_return pg_AnnotatedDecl() throws RecognitionException {
		XQueryParser.pg_AnnotatedDecl_return retval = new XQueryParser.pg_AnnotatedDecl_return();
		retval.start = input.LT(1);

		XQDTCommonTree root_0 = null;

		ParserRuleReturnScope p_VarDecl54 =null;
		ParserRuleReturnScope pm_FunctionDecl55 =null;
		ParserRuleReturnScope p_CollectionDecl56 =null;
		ParserRuleReturnScope p_IndexDecl57 =null;
		ParserRuleReturnScope p_ICDecl58 =null;


		try {
			// XQueryParser.g:301:9: ( p_VarDecl | pm_FunctionDecl |{...}? => p_CollectionDecl |{...}? => p_IndexDecl |{...}? => p_ICDecl )
			int alt29=5;
			int LA29_0 = input.LA(1);
			if ( (LA29_0==VARIABLE) ) {
				alt29=1;
			}
			else if ( (LA29_0==UPDATING) && ((lc(XQU)))) {
				alt29=2;
			}
			else if ( (LA29_0==FUNCTION) ) {
				alt29=2;
			}
			else if ( (LA29_0==COLLECTION) && ((lc(ZORBA)))) {
				alt29=3;
			}
			else if ( (LA29_0==INDEX) && ((lc(ZORBA)))) {
				alt29=4;
			}
			else if ( (LA29_0==INTEGRITY) && ((lc(ZORBA)))) {
				alt29=5;
			}

			switch (alt29) {
				case 1 :
					// XQueryParser.g:301:11: p_VarDecl
					{
					root_0 = (XQDTCommonTree)adaptor.nil();


					pushFollow(FOLLOW_p_VarDecl_in_pg_AnnotatedDecl2654);
					p_VarDecl54=p_VarDecl();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, p_VarDecl54.getTree());

					}
					break;
				case 2 :
					// XQueryParser.g:302:11: pm_FunctionDecl
					{
					root_0 = (XQDTCommonTree)adaptor.nil();


					pushFollow(FOLLOW_pm_FunctionDecl_in_pg_AnnotatedDecl2666);
					pm_FunctionDecl55=pm_FunctionDecl();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, pm_FunctionDecl55.getTree());

					}
					break;
				case 3 :
					// XQueryParser.g:303:11: {...}? => p_CollectionDecl
					{
					root_0 = (XQDTCommonTree)adaptor.nil();


					if ( !((lc(ZORBA))) ) {
						if (state.backtracking>0) {state.failed=true; return retval;}
						throw new FailedPredicateException(input, "pg_AnnotatedDecl", "lc(ZORBA)");
					}
					pushFollow(FOLLOW_p_CollectionDecl_in_pg_AnnotatedDecl2681);
					p_CollectionDecl56=p_CollectionDecl();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, p_CollectionDecl56.getTree());

					}
					break;
				case 4 :
					// XQueryParser.g:304:11: {...}? => p_IndexDecl
					{
					root_0 = (XQDTCommonTree)adaptor.nil();


					if ( !((lc(ZORBA))) ) {
						if (state.backtracking>0) {state.failed=true; return retval;}
						throw new FailedPredicateException(input, "pg_AnnotatedDecl", "lc(ZORBA)");
					}
					pushFollow(FOLLOW_p_IndexDecl_in_pg_AnnotatedDecl2696);
					p_IndexDecl57=p_IndexDecl();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, p_IndexDecl57.getTree());

					}
					break;
				case 5 :
					// XQueryParser.g:305:11: {...}? => p_ICDecl
					{
					root_0 = (XQDTCommonTree)adaptor.nil();


					if ( !((lc(ZORBA))) ) {
						if (state.backtracking>0) {state.failed=true; return retval;}
						throw new FailedPredicateException(input, "pg_AnnotatedDecl", "lc(ZORBA)");
					}
					pushFollow(FOLLOW_p_ICDecl_in_pg_AnnotatedDecl2711);
					p_ICDecl58=p_ICDecl();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, p_ICDecl58.getTree());

					}
					break;

			}
			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (XQDTCommonTree)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
			retval.tree = (XQDTCommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "pg_AnnotatedDecl"


	public static class p_Annotation_return extends ParserRuleReturnScope {
		XQDTCommonTree tree;
		@Override
		public XQDTCommonTree getTree() { return tree; }
	};


	// $ANTLR start "p_Annotation"
	// XQueryParser.g:309:1: p_Annotation : ANN_PERCENT p_QName ( LPAREN p_Literal ( COMMA p_Literal )* RPAREN )? ;
	public final XQueryParser.p_Annotation_return p_Annotation() throws RecognitionException {
		XQueryParser.p_Annotation_return retval = new XQueryParser.p_Annotation_return();
		retval.start = input.LT(1);

		XQDTCommonTree root_0 = null;

		CommonToken ANN_PERCENT59=null;
		CommonToken LPAREN61=null;
		CommonToken COMMA63=null;
		CommonToken RPAREN65=null;
		ParserRuleReturnScope p_QName60 =null;
		ParserRuleReturnScope p_Literal62 =null;
		ParserRuleReturnScope p_Literal64 =null;

		XQDTCommonTree ANN_PERCENT59_tree=null;
		XQDTCommonTree LPAREN61_tree=null;
		XQDTCommonTree COMMA63_tree=null;
		XQDTCommonTree RPAREN65_tree=null;

		try {
			// XQueryParser.g:310:9: ( ANN_PERCENT p_QName ( LPAREN p_Literal ( COMMA p_Literal )* RPAREN )? )
			// XQueryParser.g:310:11: ANN_PERCENT p_QName ( LPAREN p_Literal ( COMMA p_Literal )* RPAREN )?
			{
			root_0 = (XQDTCommonTree)adaptor.nil();


			ANN_PERCENT59=(CommonToken)match(input,ANN_PERCENT,FOLLOW_ANN_PERCENT_in_p_Annotation2737); if (state.failed) return retval;
			if ( state.backtracking==0 ) {
			ANN_PERCENT59_tree = (XQDTCommonTree)adaptor.create(ANN_PERCENT59);
			adaptor.addChild(root_0, ANN_PERCENT59_tree);
			}

			pushFollow(FOLLOW_p_QName_in_p_Annotation2739);
			p_QName60=p_QName();
			state._fsp--;
			if (state.failed) return retval;
			if ( state.backtracking==0 ) adaptor.addChild(root_0, p_QName60.getTree());

			// XQueryParser.g:310:31: ( LPAREN p_Literal ( COMMA p_Literal )* RPAREN )?
			int alt31=2;
			int LA31_0 = input.LA(1);
			if ( (LA31_0==LPAREN) ) {
				alt31=1;
			}
			switch (alt31) {
				case 1 :
					// XQueryParser.g:310:32: LPAREN p_Literal ( COMMA p_Literal )* RPAREN
					{
					LPAREN61=(CommonToken)match(input,LPAREN,FOLLOW_LPAREN_in_p_Annotation2742); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					LPAREN61_tree = (XQDTCommonTree)adaptor.create(LPAREN61);
					adaptor.addChild(root_0, LPAREN61_tree);
					}

					pushFollow(FOLLOW_p_Literal_in_p_Annotation2744);
					p_Literal62=p_Literal();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, p_Literal62.getTree());

					// XQueryParser.g:310:49: ( COMMA p_Literal )*
					loop30:
					while (true) {
						int alt30=2;
						int LA30_0 = input.LA(1);
						if ( (LA30_0==COMMA) ) {
							alt30=1;
						}

						switch (alt30) {
						case 1 :
							// XQueryParser.g:310:50: COMMA p_Literal
							{
							COMMA63=(CommonToken)match(input,COMMA,FOLLOW_COMMA_in_p_Annotation2747); if (state.failed) return retval;
							if ( state.backtracking==0 ) {
							COMMA63_tree = (XQDTCommonTree)adaptor.create(COMMA63);
							adaptor.addChild(root_0, COMMA63_tree);
							}

							pushFollow(FOLLOW_p_Literal_in_p_Annotation2749);
							p_Literal64=p_Literal();
							state._fsp--;
							if (state.failed) return retval;
							if ( state.backtracking==0 ) adaptor.addChild(root_0, p_Literal64.getTree());

							}
							break;

						default :
							break loop30;
						}
					}

					RPAREN65=(CommonToken)match(input,RPAREN,FOLLOW_RPAREN_in_p_Annotation2753); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					RPAREN65_tree = (XQDTCommonTree)adaptor.create(RPAREN65);
					adaptor.addChild(root_0, RPAREN65_tree);
					}

					}
					break;

			}

			}

			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (XQDTCommonTree)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
			retval.tree = (XQDTCommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "p_Annotation"


	public static class p_VarDecl_return extends ParserRuleReturnScope {
		XQDTCommonTree tree;
		@Override
		public XQDTCommonTree getTree() { return tree; }
	};


	// $ANTLR start "p_VarDecl"
	// XQueryParser.g:314:1: p_VarDecl : k= VARIABLE DOLLAR qn= p_QName (td= p_TypeDeclaration )? ( ( BIND vv= p_VarValue ) | (k= EXTERNAL ( BIND vdv= p_VarDefaultValue )? ) ) -> ^( VarDecl $qn ^( VarType ( $td)? ) ^( VarValue ( $vv)? ^( VarDefaultValue ( $vdv)? ) ) ) ;
	public final XQueryParser.p_VarDecl_return p_VarDecl() throws RecognitionException {
		XQueryParser.p_VarDecl_return retval = new XQueryParser.p_VarDecl_return();
		retval.start = input.LT(1);

		XQDTCommonTree root_0 = null;

		CommonToken k=null;
		CommonToken DOLLAR66=null;
		CommonToken BIND67=null;
		CommonToken BIND68=null;
		ParserRuleReturnScope qn =null;
		ParserRuleReturnScope td =null;
		ParserRuleReturnScope vv =null;
		ParserRuleReturnScope vdv =null;

		XQDTCommonTree k_tree=null;
		XQDTCommonTree DOLLAR66_tree=null;
		XQDTCommonTree BIND67_tree=null;
		XQDTCommonTree BIND68_tree=null;
		RewriteRuleTokenStream stream_DOLLAR=new RewriteRuleTokenStream(adaptor,"token DOLLAR");
		RewriteRuleTokenStream stream_EXTERNAL=new RewriteRuleTokenStream(adaptor,"token EXTERNAL");
		RewriteRuleTokenStream stream_VARIABLE=new RewriteRuleTokenStream(adaptor,"token VARIABLE");
		RewriteRuleTokenStream stream_BIND=new RewriteRuleTokenStream(adaptor,"token BIND");
		RewriteRuleSubtreeStream stream_p_TypeDeclaration=new RewriteRuleSubtreeStream(adaptor,"rule p_TypeDeclaration");
		RewriteRuleSubtreeStream stream_p_QName=new RewriteRuleSubtreeStream(adaptor,"rule p_QName");
		RewriteRuleSubtreeStream stream_p_VarDefaultValue=new RewriteRuleSubtreeStream(adaptor,"rule p_VarDefaultValue");
		RewriteRuleSubtreeStream stream_p_VarValue=new RewriteRuleSubtreeStream(adaptor,"rule p_VarValue");

		try {
			// XQueryParser.g:315:9: (k= VARIABLE DOLLAR qn= p_QName (td= p_TypeDeclaration )? ( ( BIND vv= p_VarValue ) | (k= EXTERNAL ( BIND vdv= p_VarDefaultValue )? ) ) -> ^( VarDecl $qn ^( VarType ( $td)? ) ^( VarValue ( $vv)? ^( VarDefaultValue ( $vdv)? ) ) ) )
			// XQueryParser.g:315:11: k= VARIABLE DOLLAR qn= p_QName (td= p_TypeDeclaration )? ( ( BIND vv= p_VarValue ) | (k= EXTERNAL ( BIND vdv= p_VarDefaultValue )? ) )
			{
			k=(CommonToken)match(input,VARIABLE,FOLLOW_VARIABLE_in_p_VarDecl2783); if (state.failed) return retval; 
			if ( state.backtracking==0 ) stream_VARIABLE.add(k);

			if ( state.backtracking==0 ) {ak(k);}
			DOLLAR66=(CommonToken)match(input,DOLLAR,FOLLOW_DOLLAR_in_p_VarDecl2787); if (state.failed) return retval; 
			if ( state.backtracking==0 ) stream_DOLLAR.add(DOLLAR66);

			pushFollow(FOLLOW_p_QName_in_p_VarDecl2791);
			qn=p_QName();
			state._fsp--;
			if (state.failed) return retval;
			if ( state.backtracking==0 ) stream_p_QName.add(qn.getTree());
			// XQueryParser.g:315:52: (td= p_TypeDeclaration )?
			int alt32=2;
			int LA32_0 = input.LA(1);
			if ( (LA32_0==AS) ) {
				alt32=1;
			}
			switch (alt32) {
				case 1 :
					// XQueryParser.g:315:52: td= p_TypeDeclaration
					{
					pushFollow(FOLLOW_p_TypeDeclaration_in_p_VarDecl2795);
					td=p_TypeDeclaration();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) stream_p_TypeDeclaration.add(td.getTree());
					}
					break;

			}

			// XQueryParser.g:315:72: ( ( BIND vv= p_VarValue ) | (k= EXTERNAL ( BIND vdv= p_VarDefaultValue )? ) )
			int alt34=2;
			int LA34_0 = input.LA(1);
			if ( (LA34_0==BIND) ) {
				alt34=1;
			}
			else if ( (LA34_0==EXTERNAL) ) {
				alt34=2;
			}

			else {
				if (state.backtracking>0) {state.failed=true; return retval;}
				NoViableAltException nvae =
					new NoViableAltException("", 34, 0, input);
				throw nvae;
			}

			switch (alt34) {
				case 1 :
					// XQueryParser.g:315:73: ( BIND vv= p_VarValue )
					{
					// XQueryParser.g:315:73: ( BIND vv= p_VarValue )
					// XQueryParser.g:315:74: BIND vv= p_VarValue
					{
					BIND67=(CommonToken)match(input,BIND,FOLLOW_BIND_in_p_VarDecl2800); if (state.failed) return retval; 
					if ( state.backtracking==0 ) stream_BIND.add(BIND67);

					pushFollow(FOLLOW_p_VarValue_in_p_VarDecl2804);
					vv=p_VarValue();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) stream_p_VarValue.add(vv.getTree());
					}

					}
					break;
				case 2 :
					// XQueryParser.g:315:96: (k= EXTERNAL ( BIND vdv= p_VarDefaultValue )? )
					{
					// XQueryParser.g:315:96: (k= EXTERNAL ( BIND vdv= p_VarDefaultValue )? )
					// XQueryParser.g:315:97: k= EXTERNAL ( BIND vdv= p_VarDefaultValue )?
					{
					k=(CommonToken)match(input,EXTERNAL,FOLLOW_EXTERNAL_in_p_VarDecl2812); if (state.failed) return retval; 
					if ( state.backtracking==0 ) stream_EXTERNAL.add(k);

					if ( state.backtracking==0 ) {ak(k);}
					// XQueryParser.g:315:118: ( BIND vdv= p_VarDefaultValue )?
					int alt33=2;
					int LA33_0 = input.LA(1);
					if ( (LA33_0==BIND) ) {
						alt33=1;
					}
					switch (alt33) {
						case 1 :
							// XQueryParser.g:315:119: BIND vdv= p_VarDefaultValue
							{
							BIND68=(CommonToken)match(input,BIND,FOLLOW_BIND_in_p_VarDecl2817); if (state.failed) return retval; 
							if ( state.backtracking==0 ) stream_BIND.add(BIND68);

							pushFollow(FOLLOW_p_VarDefaultValue_in_p_VarDecl2821);
							vdv=p_VarDefaultValue();
							state._fsp--;
							if (state.failed) return retval;
							if ( state.backtracking==0 ) stream_p_VarDefaultValue.add(vdv.getTree());
							}
							break;

					}

					}

					}
					break;

			}

			// AST REWRITE
			// elements: vdv, td, vv, qn
			// token labels: 
			// rule labels: qn, vv, retval, vdv, td
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			if ( state.backtracking==0 ) {
			retval.tree = root_0;
			RewriteRuleSubtreeStream stream_qn=new RewriteRuleSubtreeStream(adaptor,"rule qn",qn!=null?qn.getTree():null);
			RewriteRuleSubtreeStream stream_vv=new RewriteRuleSubtreeStream(adaptor,"rule vv",vv!=null?vv.getTree():null);
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.getTree():null);
			RewriteRuleSubtreeStream stream_vdv=new RewriteRuleSubtreeStream(adaptor,"rule vdv",vdv!=null?vdv.getTree():null);
			RewriteRuleSubtreeStream stream_td=new RewriteRuleSubtreeStream(adaptor,"rule td",td!=null?td.getTree():null);

			root_0 = (XQDTCommonTree)adaptor.nil();
			// 316:17: -> ^( VarDecl $qn ^( VarType ( $td)? ) ^( VarValue ( $vv)? ^( VarDefaultValue ( $vdv)? ) ) )
			{
				// XQueryParser.g:316:20: ^( VarDecl $qn ^( VarType ( $td)? ) ^( VarValue ( $vv)? ^( VarDefaultValue ( $vdv)? ) ) )
				{
				XQDTCommonTree root_1 = (XQDTCommonTree)adaptor.nil();
				root_1 = (XQDTCommonTree)adaptor.becomeRoot((XQDTCommonTree)adaptor.create(VarDecl, "VarDecl"), root_1);
				adaptor.addChild(root_1, stream_qn.nextTree());
				// XQueryParser.g:316:34: ^( VarType ( $td)? )
				{
				XQDTCommonTree root_2 = (XQDTCommonTree)adaptor.nil();
				root_2 = (XQDTCommonTree)adaptor.becomeRoot((XQDTCommonTree)adaptor.create(VarType, "VarType"), root_2);
				// XQueryParser.g:316:45: ( $td)?
				if ( stream_td.hasNext() ) {
					adaptor.addChild(root_2, stream_td.nextTree());
				}
				stream_td.reset();

				adaptor.addChild(root_1, root_2);
				}

				// XQueryParser.g:316:50: ^( VarValue ( $vv)? ^( VarDefaultValue ( $vdv)? ) )
				{
				XQDTCommonTree root_2 = (XQDTCommonTree)adaptor.nil();
				root_2 = (XQDTCommonTree)adaptor.becomeRoot((XQDTCommonTree)adaptor.create(VarValue, "VarValue"), root_2);
				// XQueryParser.g:316:62: ( $vv)?
				if ( stream_vv.hasNext() ) {
					adaptor.addChild(root_2, stream_vv.nextTree());
				}
				stream_vv.reset();

				// XQueryParser.g:316:66: ^( VarDefaultValue ( $vdv)? )
				{
				XQDTCommonTree root_3 = (XQDTCommonTree)adaptor.nil();
				root_3 = (XQDTCommonTree)adaptor.becomeRoot((XQDTCommonTree)adaptor.create(VarDefaultValue, "VarDefaultValue"), root_3);
				// XQueryParser.g:316:85: ( $vdv)?
				if ( stream_vdv.hasNext() ) {
					adaptor.addChild(root_3, stream_vdv.nextTree());
				}
				stream_vdv.reset();

				adaptor.addChild(root_2, root_3);
				}

				adaptor.addChild(root_1, root_2);
				}

				adaptor.addChild(root_0, root_1);
				}

			}


			retval.tree = root_0;
			}

			}

			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (XQDTCommonTree)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
			retval.tree = (XQDTCommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "p_VarDecl"


	public static class p_VarValue_return extends ParserRuleReturnScope {
		XQDTCommonTree tree;
		@Override
		public XQDTCommonTree getTree() { return tree; }
	};


	// $ANTLR start "p_VarValue"
	// XQueryParser.g:320:1: p_VarValue : p_ExprSingle[true] ;
	public final XQueryParser.p_VarValue_return p_VarValue() throws RecognitionException {
		XQueryParser.p_VarValue_return retval = new XQueryParser.p_VarValue_return();
		retval.start = input.LT(1);

		XQDTCommonTree root_0 = null;

		ParserRuleReturnScope p_ExprSingle69 =null;


		try {
			// XQueryParser.g:321:9: ( p_ExprSingle[true] )
			// XQueryParser.g:321:11: p_ExprSingle[true]
			{
			root_0 = (XQDTCommonTree)adaptor.nil();


			pushFollow(FOLLOW_p_ExprSingle_in_p_VarValue2900);
			p_ExprSingle69=p_ExprSingle(true);
			state._fsp--;
			if (state.failed) return retval;
			if ( state.backtracking==0 ) adaptor.addChild(root_0, p_ExprSingle69.getTree());

			}

			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (XQDTCommonTree)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
			retval.tree = (XQDTCommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "p_VarValue"


	public static class p_VarDefaultValue_return extends ParserRuleReturnScope {
		XQDTCommonTree tree;
		@Override
		public XQDTCommonTree getTree() { return tree; }
	};


	// $ANTLR start "p_VarDefaultValue"
	// XQueryParser.g:325:1: p_VarDefaultValue : p_ExprSingle[true] ;
	public final XQueryParser.p_VarDefaultValue_return p_VarDefaultValue() throws RecognitionException {
		XQueryParser.p_VarDefaultValue_return retval = new XQueryParser.p_VarDefaultValue_return();
		retval.start = input.LT(1);

		XQDTCommonTree root_0 = null;

		ParserRuleReturnScope p_ExprSingle70 =null;


		try {
			// XQueryParser.g:326:9: ( p_ExprSingle[true] )
			// XQueryParser.g:326:11: p_ExprSingle[true]
			{
			root_0 = (XQDTCommonTree)adaptor.nil();


			pushFollow(FOLLOW_p_ExprSingle_in_p_VarDefaultValue2927);
			p_ExprSingle70=p_ExprSingle(true);
			state._fsp--;
			if (state.failed) return retval;
			if ( state.backtracking==0 ) adaptor.addChild(root_0, p_ExprSingle70.getTree());

			}

			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (XQDTCommonTree)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
			retval.tree = (XQDTCommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "p_VarDefaultValue"


	public static class pm_ContextItemDecl_return extends ParserRuleReturnScope {
		XQDTCommonTree tree;
		@Override
		public XQDTCommonTree getTree() { return tree; }
	};


	// $ANTLR start "pm_ContextItemDecl"
	// XQueryParser.g:330:1: pm_ContextItemDecl : k= DECLARE k= CONTEXT k= ITEM (k= AS p_ItemType )? ( ( BIND p_VarValue ) | (k= EXTERNAL ( BIND p_VarDefaultValue )? ) ) SEMICOLON ;
	public final XQueryParser.pm_ContextItemDecl_return pm_ContextItemDecl() throws RecognitionException {
		XQueryParser.pm_ContextItemDecl_return retval = new XQueryParser.pm_ContextItemDecl_return();
		retval.start = input.LT(1);

		XQDTCommonTree root_0 = null;

		CommonToken k=null;
		CommonToken BIND72=null;
		CommonToken BIND74=null;
		CommonToken SEMICOLON76=null;
		ParserRuleReturnScope p_ItemType71 =null;
		ParserRuleReturnScope p_VarValue73 =null;
		ParserRuleReturnScope p_VarDefaultValue75 =null;

		XQDTCommonTree k_tree=null;
		XQDTCommonTree BIND72_tree=null;
		XQDTCommonTree BIND74_tree=null;
		XQDTCommonTree SEMICOLON76_tree=null;

		try {
			// XQueryParser.g:331:9: (k= DECLARE k= CONTEXT k= ITEM (k= AS p_ItemType )? ( ( BIND p_VarValue ) | (k= EXTERNAL ( BIND p_VarDefaultValue )? ) ) SEMICOLON )
			// XQueryParser.g:331:11: k= DECLARE k= CONTEXT k= ITEM (k= AS p_ItemType )? ( ( BIND p_VarValue ) | (k= EXTERNAL ( BIND p_VarDefaultValue )? ) ) SEMICOLON
			{
			root_0 = (XQDTCommonTree)adaptor.nil();


			k=(CommonToken)match(input,DECLARE,FOLLOW_DECLARE_in_pm_ContextItemDecl2956); if (state.failed) return retval;
			if ( state.backtracking==0 ) {
			k_tree = (XQDTCommonTree)adaptor.create(k);
			adaptor.addChild(root_0, k_tree);
			}

			if ( state.backtracking==0 ) {ak(k);}
			k=(CommonToken)match(input,CONTEXT,FOLLOW_CONTEXT_in_pm_ContextItemDecl2962); if (state.failed) return retval;
			if ( state.backtracking==0 ) {
			k_tree = (XQDTCommonTree)adaptor.create(k);
			adaptor.addChild(root_0, k_tree);
			}

			if ( state.backtracking==0 ) {ak(k);}
			k=(CommonToken)match(input,ITEM,FOLLOW_ITEM_in_pm_ContextItemDecl2968); if (state.failed) return retval;
			if ( state.backtracking==0 ) {
			k_tree = (XQDTCommonTree)adaptor.create(k);
			adaptor.addChild(root_0, k_tree);
			}

			if ( state.backtracking==0 ) {ak(k);}
			// XQueryParser.g:331:68: (k= AS p_ItemType )?
			int alt35=2;
			int LA35_0 = input.LA(1);
			if ( (LA35_0==AS) ) {
				alt35=1;
			}
			switch (alt35) {
				case 1 :
					// XQueryParser.g:331:69: k= AS p_ItemType
					{
					k=(CommonToken)match(input,AS,FOLLOW_AS_in_pm_ContextItemDecl2975); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					k_tree = (XQDTCommonTree)adaptor.create(k);
					adaptor.addChild(root_0, k_tree);
					}

					if ( state.backtracking==0 ) {ak(k);}
					pushFollow(FOLLOW_p_ItemType_in_pm_ContextItemDecl2979);
					p_ItemType71=p_ItemType();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, p_ItemType71.getTree());

					}
					break;

			}

			// XQueryParser.g:331:97: ( ( BIND p_VarValue ) | (k= EXTERNAL ( BIND p_VarDefaultValue )? ) )
			int alt37=2;
			int LA37_0 = input.LA(1);
			if ( (LA37_0==BIND) ) {
				alt37=1;
			}
			else if ( (LA37_0==EXTERNAL) ) {
				alt37=2;
			}

			else {
				if (state.backtracking>0) {state.failed=true; return retval;}
				NoViableAltException nvae =
					new NoViableAltException("", 37, 0, input);
				throw nvae;
			}

			switch (alt37) {
				case 1 :
					// XQueryParser.g:331:98: ( BIND p_VarValue )
					{
					// XQueryParser.g:331:98: ( BIND p_VarValue )
					// XQueryParser.g:331:99: BIND p_VarValue
					{
					BIND72=(CommonToken)match(input,BIND,FOLLOW_BIND_in_pm_ContextItemDecl2985); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					BIND72_tree = (XQDTCommonTree)adaptor.create(BIND72);
					adaptor.addChild(root_0, BIND72_tree);
					}

					pushFollow(FOLLOW_p_VarValue_in_pm_ContextItemDecl2987);
					p_VarValue73=p_VarValue();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, p_VarValue73.getTree());

					}

					}
					break;
				case 2 :
					// XQueryParser.g:331:118: (k= EXTERNAL ( BIND p_VarDefaultValue )? )
					{
					// XQueryParser.g:331:118: (k= EXTERNAL ( BIND p_VarDefaultValue )? )
					// XQueryParser.g:331:119: k= EXTERNAL ( BIND p_VarDefaultValue )?
					{
					k=(CommonToken)match(input,EXTERNAL,FOLLOW_EXTERNAL_in_pm_ContextItemDecl2995); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					k_tree = (XQDTCommonTree)adaptor.create(k);
					adaptor.addChild(root_0, k_tree);
					}

					if ( state.backtracking==0 ) {ak(k);}
					// XQueryParser.g:331:140: ( BIND p_VarDefaultValue )?
					int alt36=2;
					int LA36_0 = input.LA(1);
					if ( (LA36_0==BIND) ) {
						alt36=1;
					}
					switch (alt36) {
						case 1 :
							// XQueryParser.g:331:141: BIND p_VarDefaultValue
							{
							BIND74=(CommonToken)match(input,BIND,FOLLOW_BIND_in_pm_ContextItemDecl3000); if (state.failed) return retval;
							if ( state.backtracking==0 ) {
							BIND74_tree = (XQDTCommonTree)adaptor.create(BIND74);
							adaptor.addChild(root_0, BIND74_tree);
							}

							pushFollow(FOLLOW_p_VarDefaultValue_in_pm_ContextItemDecl3002);
							p_VarDefaultValue75=p_VarDefaultValue();
							state._fsp--;
							if (state.failed) return retval;
							if ( state.backtracking==0 ) adaptor.addChild(root_0, p_VarDefaultValue75.getTree());

							}
							break;

					}

					}

					}
					break;

			}

			SEMICOLON76=(CommonToken)match(input,SEMICOLON,FOLLOW_SEMICOLON_in_pm_ContextItemDecl3008); if (state.failed) return retval;
			if ( state.backtracking==0 ) {
			SEMICOLON76_tree = (XQDTCommonTree)adaptor.create(SEMICOLON76);
			adaptor.addChild(root_0, SEMICOLON76_tree);
			}

			}

			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (XQDTCommonTree)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
			retval.tree = (XQDTCommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "pm_ContextItemDecl"


	public static class pm_FunctionDecl_return extends ParserRuleReturnScope {
		XQDTCommonTree tree;
		@Override
		public XQDTCommonTree getTree() { return tree; }
	};


	// $ANTLR start "pm_FunctionDecl"
	// XQueryParser.g:336:1: pm_FunctionDecl : ({...}? =>k= UPDATING )? k= FUNCTION (k= PRIVATE )? qn= pg_FQName LPAREN (pl= p_ParamList )? RPAREN (k= AS st= p_SequenceType )? ( LBRACKET soe= p_StatementsAndOptionalExpr RBRACKET |k= EXTERNAL ) -> ^( FunctionDecl $qn ^( ParamList ( $pl)? ) ^( ReturnType ( $st)? ) ( $soe)? ) ;
	public final XQueryParser.pm_FunctionDecl_return pm_FunctionDecl() throws RecognitionException {
		XQueryParser.pm_FunctionDecl_return retval = new XQueryParser.pm_FunctionDecl_return();
		retval.start = input.LT(1);

		XQDTCommonTree root_0 = null;

		CommonToken k=null;
		CommonToken LPAREN77=null;
		CommonToken RPAREN78=null;
		CommonToken LBRACKET79=null;
		CommonToken RBRACKET80=null;
		ParserRuleReturnScope qn =null;
		ParserRuleReturnScope pl =null;
		ParserRuleReturnScope st =null;
		ParserRuleReturnScope soe =null;

		XQDTCommonTree k_tree=null;
		XQDTCommonTree LPAREN77_tree=null;
		XQDTCommonTree RPAREN78_tree=null;
		XQDTCommonTree LBRACKET79_tree=null;
		XQDTCommonTree RBRACKET80_tree=null;
		RewriteRuleTokenStream stream_FUNCTION=new RewriteRuleTokenStream(adaptor,"token FUNCTION");
		RewriteRuleTokenStream stream_LBRACKET=new RewriteRuleTokenStream(adaptor,"token LBRACKET");
		RewriteRuleTokenStream stream_AS=new RewriteRuleTokenStream(adaptor,"token AS");
		RewriteRuleTokenStream stream_RPAREN=new RewriteRuleTokenStream(adaptor,"token RPAREN");
		RewriteRuleTokenStream stream_EXTERNAL=new RewriteRuleTokenStream(adaptor,"token EXTERNAL");
		RewriteRuleTokenStream stream_RBRACKET=new RewriteRuleTokenStream(adaptor,"token RBRACKET");
		RewriteRuleTokenStream stream_PRIVATE=new RewriteRuleTokenStream(adaptor,"token PRIVATE");
		RewriteRuleTokenStream stream_LPAREN=new RewriteRuleTokenStream(adaptor,"token LPAREN");
		RewriteRuleTokenStream stream_UPDATING=new RewriteRuleTokenStream(adaptor,"token UPDATING");
		RewriteRuleSubtreeStream stream_p_StatementsAndOptionalExpr=new RewriteRuleSubtreeStream(adaptor,"rule p_StatementsAndOptionalExpr");
		RewriteRuleSubtreeStream stream_p_ParamList=new RewriteRuleSubtreeStream(adaptor,"rule p_ParamList");
		RewriteRuleSubtreeStream stream_pg_FQName=new RewriteRuleSubtreeStream(adaptor,"rule pg_FQName");
		RewriteRuleSubtreeStream stream_p_SequenceType=new RewriteRuleSubtreeStream(adaptor,"rule p_SequenceType");

		try {
			// XQueryParser.g:337:9: ( ({...}? =>k= UPDATING )? k= FUNCTION (k= PRIVATE )? qn= pg_FQName LPAREN (pl= p_ParamList )? RPAREN (k= AS st= p_SequenceType )? ( LBRACKET soe= p_StatementsAndOptionalExpr RBRACKET |k= EXTERNAL ) -> ^( FunctionDecl $qn ^( ParamList ( $pl)? ) ^( ReturnType ( $st)? ) ( $soe)? ) )
			// XQueryParser.g:337:11: ({...}? =>k= UPDATING )? k= FUNCTION (k= PRIVATE )? qn= pg_FQName LPAREN (pl= p_ParamList )? RPAREN (k= AS st= p_SequenceType )? ( LBRACKET soe= p_StatementsAndOptionalExpr RBRACKET |k= EXTERNAL )
			{
			// XQueryParser.g:337:11: ({...}? =>k= UPDATING )?
			int alt38=2;
			int LA38_0 = input.LA(1);
			if ( (LA38_0==UPDATING) && ((lc(XQU)))) {
				alt38=1;
			}
			switch (alt38) {
				case 1 :
					// XQueryParser.g:337:12: {...}? =>k= UPDATING
					{
					if ( !((lc(XQU))) ) {
						if (state.backtracking>0) {state.failed=true; return retval;}
						throw new FailedPredicateException(input, "pm_FunctionDecl", "lc(XQU)");
					}
					k=(CommonToken)match(input,UPDATING,FOLLOW_UPDATING_in_pm_FunctionDecl3041); if (state.failed) return retval; 
					if ( state.backtracking==0 ) stream_UPDATING.add(k);

					if ( state.backtracking==0 ) {ak(k);}
					}
					break;

			}

			k=(CommonToken)match(input,FUNCTION,FOLLOW_FUNCTION_in_pm_FunctionDecl3049); if (state.failed) return retval; 
			if ( state.backtracking==0 ) stream_FUNCTION.add(k);

			if ( state.backtracking==0 ) {ak(k);}
			// XQueryParser.g:337:70: (k= PRIVATE )?
			int alt39=2;
			int LA39_0 = input.LA(1);
			if ( (LA39_0==PRIVATE) ) {
				int LA39_1 = input.LA(2);
				if ( ((LA39_1 >= AFTER && LA39_1 <= ALLOWING)||(LA39_1 >= AMP_ER && LA39_1 <= AND)||LA39_1==ANY||(LA39_1 >= APOS_ER && LA39_1 <= ATTRIBUTE)||(LA39_1 >= BASE_URI && LA39_1 <= BINARY)||(LA39_1 >= BOUNDARY_SPACE && LA39_1 <= CATCH)||(LA39_1 >= CHECK && LA39_1 <= CHILD)||(LA39_1 >= COLLATION && LA39_1 <= COLLECTION)||LA39_1==COMMENT||(LA39_1 >= CONSTRAINT && LA39_1 <= DOCUMENT_NODE)||(LA39_1 >= ELEMENT && LA39_1 <= EMPTY)||(LA39_1 >= EMPTY_SEQUENCE && LA39_1 <= EQ)||(LA39_1 >= EVERY && LA39_1 <= GE)||(LA39_1 >= GREATEST && LA39_1 <= GT)||(LA39_1 >= IDIV && LA39_1 <= LAX)||(LA39_1 >= LE && LA39_1 <= LOWERCASE)||LA39_1==LT||LA39_1==L_NCName||(LA39_1 >= MINUS_SIGN && LA39_1 <= NAN)||(LA39_1 >= NE && LA39_1 <= NOT)||(LA39_1 >= NO_INHERIT && LA39_1 <= PHRASE)||(LA39_1 >= PRECEDING && LA39_1 <= PROCESSING_INSTRUCTION)||LA39_1==QUOT_ER||(LA39_1 >= RELATIONSHIP && LA39_1 <= REVALIDATION)||(LA39_1 >= SAME && LA39_1 <= SELF)||(LA39_1 >= SENSITIVE && LA39_1 <= SKIP)||LA39_1==SLIDING||(LA39_1 >= SOME && LA39_1 <= STABLE)||(LA39_1 >= START && LA39_1 <= STRIP)||(LA39_1 >= SWITCH && LA39_1 <= VARIABLE)||(LA39_1 >= VERSION && LA39_1 <= WORDS)||(LA39_1 >= XQUERY && LA39_1 <= ZERO_DIGIT)||LA39_1==EXPLICITLY) ) {
					alt39=1;
				}
			}
			switch (alt39) {
				case 1 :
					// XQueryParser.g:337:70: k= PRIVATE
					{
					k=(CommonToken)match(input,PRIVATE,FOLLOW_PRIVATE_in_pm_FunctionDecl3055); if (state.failed) return retval; 
					if ( state.backtracking==0 ) stream_PRIVATE.add(k);

					}
					break;

			}

			pushFollow(FOLLOW_pg_FQName_in_pm_FunctionDecl3060);
			qn=pg_FQName();
			state._fsp--;
			if (state.failed) return retval;
			if ( state.backtracking==0 ) stream_pg_FQName.add(qn.getTree());
			LPAREN77=(CommonToken)match(input,LPAREN,FOLLOW_LPAREN_in_pm_FunctionDecl3062); if (state.failed) return retval; 
			if ( state.backtracking==0 ) stream_LPAREN.add(LPAREN77);

			// XQueryParser.g:337:102: (pl= p_ParamList )?
			int alt40=2;
			int LA40_0 = input.LA(1);
			if ( (LA40_0==DOLLAR) ) {
				alt40=1;
			}
			switch (alt40) {
				case 1 :
					// XQueryParser.g:337:102: pl= p_ParamList
					{
					pushFollow(FOLLOW_p_ParamList_in_pm_FunctionDecl3066);
					pl=p_ParamList();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) stream_p_ParamList.add(pl.getTree());
					}
					break;

			}

			RPAREN78=(CommonToken)match(input,RPAREN,FOLLOW_RPAREN_in_pm_FunctionDecl3069); if (state.failed) return retval; 
			if ( state.backtracking==0 ) stream_RPAREN.add(RPAREN78);

			// XQueryParser.g:337:123: (k= AS st= p_SequenceType )?
			int alt41=2;
			int LA41_0 = input.LA(1);
			if ( (LA41_0==AS) ) {
				alt41=1;
			}
			switch (alt41) {
				case 1 :
					// XQueryParser.g:337:124: k= AS st= p_SequenceType
					{
					k=(CommonToken)match(input,AS,FOLLOW_AS_in_pm_FunctionDecl3074); if (state.failed) return retval; 
					if ( state.backtracking==0 ) stream_AS.add(k);

					if ( state.backtracking==0 ) {ak(k);}
					pushFollow(FOLLOW_p_SequenceType_in_pm_FunctionDecl3080);
					st=p_SequenceType();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) stream_p_SequenceType.add(st.getTree());
					}
					break;

			}

			// XQueryParser.g:337:159: ( LBRACKET soe= p_StatementsAndOptionalExpr RBRACKET |k= EXTERNAL )
			int alt42=2;
			int LA42_0 = input.LA(1);
			if ( (LA42_0==LBRACKET) ) {
				alt42=1;
			}
			else if ( (LA42_0==EXTERNAL) ) {
				alt42=2;
			}

			else {
				if (state.backtracking>0) {state.failed=true; return retval;}
				NoViableAltException nvae =
					new NoViableAltException("", 42, 0, input);
				throw nvae;
			}

			switch (alt42) {
				case 1 :
					// XQueryParser.g:337:160: LBRACKET soe= p_StatementsAndOptionalExpr RBRACKET
					{
					LBRACKET79=(CommonToken)match(input,LBRACKET,FOLLOW_LBRACKET_in_pm_FunctionDecl3085); if (state.failed) return retval; 
					if ( state.backtracking==0 ) stream_LBRACKET.add(LBRACKET79);

					pushFollow(FOLLOW_p_StatementsAndOptionalExpr_in_pm_FunctionDecl3089);
					soe=p_StatementsAndOptionalExpr();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) stream_p_StatementsAndOptionalExpr.add(soe.getTree());
					RBRACKET80=(CommonToken)match(input,RBRACKET,FOLLOW_RBRACKET_in_pm_FunctionDecl3091); if (state.failed) return retval; 
					if ( state.backtracking==0 ) stream_RBRACKET.add(RBRACKET80);

					}
					break;
				case 2 :
					// XQueryParser.g:337:212: k= EXTERNAL
					{
					k=(CommonToken)match(input,EXTERNAL,FOLLOW_EXTERNAL_in_pm_FunctionDecl3097); if (state.failed) return retval; 
					if ( state.backtracking==0 ) stream_EXTERNAL.add(k);

					if ( state.backtracking==0 ) {ak(k);}
					}
					break;

			}

			// AST REWRITE
			// elements: pl, soe, qn, st
			// token labels: 
			// rule labels: qn, soe, retval, pl, st
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			if ( state.backtracking==0 ) {
			retval.tree = root_0;
			RewriteRuleSubtreeStream stream_qn=new RewriteRuleSubtreeStream(adaptor,"rule qn",qn!=null?qn.getTree():null);
			RewriteRuleSubtreeStream stream_soe=new RewriteRuleSubtreeStream(adaptor,"rule soe",soe!=null?soe.getTree():null);
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.getTree():null);
			RewriteRuleSubtreeStream stream_pl=new RewriteRuleSubtreeStream(adaptor,"rule pl",pl!=null?pl.getTree():null);
			RewriteRuleSubtreeStream stream_st=new RewriteRuleSubtreeStream(adaptor,"rule st",st!=null?st.getTree():null);

			root_0 = (XQDTCommonTree)adaptor.nil();
			// 338:17: -> ^( FunctionDecl $qn ^( ParamList ( $pl)? ) ^( ReturnType ( $st)? ) ( $soe)? )
			{
				// XQueryParser.g:338:20: ^( FunctionDecl $qn ^( ParamList ( $pl)? ) ^( ReturnType ( $st)? ) ( $soe)? )
				{
				XQDTCommonTree root_1 = (XQDTCommonTree)adaptor.nil();
				root_1 = (XQDTCommonTree)adaptor.becomeRoot((XQDTCommonTree)adaptor.create(FunctionDecl, "FunctionDecl"), root_1);
				adaptor.addChild(root_1, stream_qn.nextTree());
				// XQueryParser.g:338:39: ^( ParamList ( $pl)? )
				{
				XQDTCommonTree root_2 = (XQDTCommonTree)adaptor.nil();
				root_2 = (XQDTCommonTree)adaptor.becomeRoot((XQDTCommonTree)adaptor.create(ParamList, "ParamList"), root_2);
				// XQueryParser.g:338:52: ( $pl)?
				if ( stream_pl.hasNext() ) {
					adaptor.addChild(root_2, stream_pl.nextTree());
				}
				stream_pl.reset();

				adaptor.addChild(root_1, root_2);
				}

				// XQueryParser.g:338:57: ^( ReturnType ( $st)? )
				{
				XQDTCommonTree root_2 = (XQDTCommonTree)adaptor.nil();
				root_2 = (XQDTCommonTree)adaptor.becomeRoot((XQDTCommonTree)adaptor.create(ReturnType, "ReturnType"), root_2);
				// XQueryParser.g:338:71: ( $st)?
				if ( stream_st.hasNext() ) {
					adaptor.addChild(root_2, stream_st.nextTree());
				}
				stream_st.reset();

				adaptor.addChild(root_1, root_2);
				}

				// XQueryParser.g:338:77: ( $soe)?
				if ( stream_soe.hasNext() ) {
					adaptor.addChild(root_1, stream_soe.nextTree());
				}
				stream_soe.reset();

				adaptor.addChild(root_0, root_1);
				}

			}


			retval.tree = root_0;
			}

			}

			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (XQDTCommonTree)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
			retval.tree = (XQDTCommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "pm_FunctionDecl"


	public static class p_ParamList_return extends ParserRuleReturnScope {
		XQDTCommonTree tree;
		@Override
		public XQDTCommonTree getTree() { return tree; }
	};


	// $ANTLR start "p_ParamList"
	// XQueryParser.g:342:1: p_ParamList :p+= p_Param ( COMMA p+= p_Param )* -> ( $p)+ ;
	public final XQueryParser.p_ParamList_return p_ParamList() throws RecognitionException {
		XQueryParser.p_ParamList_return retval = new XQueryParser.p_ParamList_return();
		retval.start = input.LT(1);

		XQDTCommonTree root_0 = null;

		CommonToken COMMA81=null;
		List<Object> list_p=null;
		RuleReturnScope p = null;
		XQDTCommonTree COMMA81_tree=null;
		RewriteRuleTokenStream stream_COMMA=new RewriteRuleTokenStream(adaptor,"token COMMA");
		RewriteRuleSubtreeStream stream_p_Param=new RewriteRuleSubtreeStream(adaptor,"rule p_Param");

		try {
			// XQueryParser.g:343:9: (p+= p_Param ( COMMA p+= p_Param )* -> ( $p)+ )
			// XQueryParser.g:343:11: p+= p_Param ( COMMA p+= p_Param )*
			{
			pushFollow(FOLLOW_p_Param_in_p_ParamList3174);
			p=p_Param();
			state._fsp--;
			if (state.failed) return retval;
			if ( state.backtracking==0 ) stream_p_Param.add(p.getTree());
			if (list_p==null) list_p=new ArrayList<Object>();
			list_p.add(p.getTree());
			// XQueryParser.g:343:22: ( COMMA p+= p_Param )*
			loop43:
			while (true) {
				int alt43=2;
				int LA43_0 = input.LA(1);
				if ( (LA43_0==COMMA) ) {
					alt43=1;
				}

				switch (alt43) {
				case 1 :
					// XQueryParser.g:343:23: COMMA p+= p_Param
					{
					COMMA81=(CommonToken)match(input,COMMA,FOLLOW_COMMA_in_p_ParamList3177); if (state.failed) return retval; 
					if ( state.backtracking==0 ) stream_COMMA.add(COMMA81);

					pushFollow(FOLLOW_p_Param_in_p_ParamList3181);
					p=p_Param();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) stream_p_Param.add(p.getTree());
					if (list_p==null) list_p=new ArrayList<Object>();
					list_p.add(p.getTree());
					}
					break;

				default :
					break loop43;
				}
			}

			// AST REWRITE
			// elements: p
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: p
			// wildcard labels: 
			if ( state.backtracking==0 ) {
			retval.tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.getTree():null);
			RewriteRuleSubtreeStream stream_p=new RewriteRuleSubtreeStream(adaptor,"token p",list_p);
			root_0 = (XQDTCommonTree)adaptor.nil();
			// 344:17: -> ( $p)+
			{
				if ( !(stream_p.hasNext()) ) {
					throw new RewriteEarlyExitException();
				}
				while ( stream_p.hasNext() ) {
					adaptor.addChild(root_0, stream_p.nextTree());
				}
				stream_p.reset();

			}


			retval.tree = root_0;
			}

			}

			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (XQDTCommonTree)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
			retval.tree = (XQDTCommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "p_ParamList"


	public static class p_Param_return extends ParserRuleReturnScope {
		XQDTCommonTree tree;
		@Override
		public XQDTCommonTree getTree() { return tree; }
	};


	// $ANTLR start "p_Param"
	// XQueryParser.g:348:1: p_Param : DOLLAR qn= p_QName (td= p_TypeDeclaration )? -> ^( Param $qn ( $td)? ) ;
	public final XQueryParser.p_Param_return p_Param() throws RecognitionException {
		XQueryParser.p_Param_return retval = new XQueryParser.p_Param_return();
		retval.start = input.LT(1);

		XQDTCommonTree root_0 = null;

		CommonToken DOLLAR82=null;
		ParserRuleReturnScope qn =null;
		ParserRuleReturnScope td =null;

		XQDTCommonTree DOLLAR82_tree=null;
		RewriteRuleTokenStream stream_DOLLAR=new RewriteRuleTokenStream(adaptor,"token DOLLAR");
		RewriteRuleSubtreeStream stream_p_TypeDeclaration=new RewriteRuleSubtreeStream(adaptor,"rule p_TypeDeclaration");
		RewriteRuleSubtreeStream stream_p_QName=new RewriteRuleSubtreeStream(adaptor,"rule p_QName");

		try {
			// XQueryParser.g:349:9: ( DOLLAR qn= p_QName (td= p_TypeDeclaration )? -> ^( Param $qn ( $td)? ) )
			// XQueryParser.g:349:11: DOLLAR qn= p_QName (td= p_TypeDeclaration )?
			{
			DOLLAR82=(CommonToken)match(input,DOLLAR,FOLLOW_DOLLAR_in_p_Param3239); if (state.failed) return retval; 
			if ( state.backtracking==0 ) stream_DOLLAR.add(DOLLAR82);

			pushFollow(FOLLOW_p_QName_in_p_Param3243);
			qn=p_QName();
			state._fsp--;
			if (state.failed) return retval;
			if ( state.backtracking==0 ) stream_p_QName.add(qn.getTree());
			// XQueryParser.g:349:31: (td= p_TypeDeclaration )?
			int alt44=2;
			int LA44_0 = input.LA(1);
			if ( (LA44_0==AS) ) {
				alt44=1;
			}
			switch (alt44) {
				case 1 :
					// XQueryParser.g:349:31: td= p_TypeDeclaration
					{
					pushFollow(FOLLOW_p_TypeDeclaration_in_p_Param3247);
					td=p_TypeDeclaration();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) stream_p_TypeDeclaration.add(td.getTree());
					}
					break;

			}

			// AST REWRITE
			// elements: qn, td
			// token labels: 
			// rule labels: qn, retval, td
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			if ( state.backtracking==0 ) {
			retval.tree = root_0;
			RewriteRuleSubtreeStream stream_qn=new RewriteRuleSubtreeStream(adaptor,"rule qn",qn!=null?qn.getTree():null);
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.getTree():null);
			RewriteRuleSubtreeStream stream_td=new RewriteRuleSubtreeStream(adaptor,"rule td",td!=null?td.getTree():null);

			root_0 = (XQDTCommonTree)adaptor.nil();
			// 350:17: -> ^( Param $qn ( $td)? )
			{
				// XQueryParser.g:350:20: ^( Param $qn ( $td)? )
				{
				XQDTCommonTree root_1 = (XQDTCommonTree)adaptor.nil();
				root_1 = (XQDTCommonTree)adaptor.becomeRoot((XQDTCommonTree)adaptor.create(Param, "Param"), root_1);
				adaptor.addChild(root_1, stream_qn.nextTree());
				// XQueryParser.g:350:33: ( $td)?
				if ( stream_td.hasNext() ) {
					adaptor.addChild(root_1, stream_td.nextTree());
				}
				stream_td.reset();

				adaptor.addChild(root_0, root_1);
				}

			}


			retval.tree = root_0;
			}

			}

			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (XQDTCommonTree)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
			retval.tree = (XQDTCommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "p_Param"


	public static class pm_FunctionBody_return extends ParserRuleReturnScope {
		XQDTCommonTree tree;
		@Override
		public XQDTCommonTree getTree() { return tree; }
	};


	// $ANTLR start "pm_FunctionBody"
	// XQueryParser.g:354:1: pm_FunctionBody : p_EnclosedExpr ;
	public final XQueryParser.pm_FunctionBody_return pm_FunctionBody() throws RecognitionException {
		XQueryParser.pm_FunctionBody_return retval = new XQueryParser.pm_FunctionBody_return();
		retval.start = input.LT(1);

		XQDTCommonTree root_0 = null;

		ParserRuleReturnScope p_EnclosedExpr83 =null;


		try {
			// XQueryParser.g:355:9: ( p_EnclosedExpr )
			// XQueryParser.g:355:11: p_EnclosedExpr
			{
			root_0 = (XQDTCommonTree)adaptor.nil();


			pushFollow(FOLLOW_p_EnclosedExpr_in_pm_FunctionBody3303);
			p_EnclosedExpr83=p_EnclosedExpr();
			state._fsp--;
			if (state.failed) return retval;
			if ( state.backtracking==0 ) adaptor.addChild(root_0, p_EnclosedExpr83.getTree());

			}

			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (XQDTCommonTree)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
			retval.tree = (XQDTCommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "pm_FunctionBody"


	public static class p_EnclosedExpr_return extends ParserRuleReturnScope {
		XQDTCommonTree tree;
		@Override
		public XQDTCommonTree getTree() { return tree; }
	};


	// $ANTLR start "p_EnclosedExpr"
	// XQueryParser.g:360:1: p_EnclosedExpr : LBRACKET p_Expr[true,true] RBRACKET -> ^( EnclosedExpr p_Expr ) ;
	public final XQueryParser.p_EnclosedExpr_return p_EnclosedExpr() throws RecognitionException {
		XQueryParser.p_EnclosedExpr_return retval = new XQueryParser.p_EnclosedExpr_return();
		retval.start = input.LT(1);

		XQDTCommonTree root_0 = null;

		CommonToken LBRACKET84=null;
		CommonToken RBRACKET86=null;
		ParserRuleReturnScope p_Expr85 =null;

		XQDTCommonTree LBRACKET84_tree=null;
		XQDTCommonTree RBRACKET86_tree=null;
		RewriteRuleTokenStream stream_LBRACKET=new RewriteRuleTokenStream(adaptor,"token LBRACKET");
		RewriteRuleTokenStream stream_RBRACKET=new RewriteRuleTokenStream(adaptor,"token RBRACKET");
		RewriteRuleSubtreeStream stream_p_Expr=new RewriteRuleSubtreeStream(adaptor,"rule p_Expr");

		try {
			// XQueryParser.g:361:9: ( LBRACKET p_Expr[true,true] RBRACKET -> ^( EnclosedExpr p_Expr ) )
			// XQueryParser.g:361:11: LBRACKET p_Expr[true,true] RBRACKET
			{
			LBRACKET84=(CommonToken)match(input,LBRACKET,FOLLOW_LBRACKET_in_p_EnclosedExpr3330); if (state.failed) return retval; 
			if ( state.backtracking==0 ) stream_LBRACKET.add(LBRACKET84);

			pushFollow(FOLLOW_p_Expr_in_p_EnclosedExpr3332);
			p_Expr85=p_Expr(true, true);
			state._fsp--;
			if (state.failed) return retval;
			if ( state.backtracking==0 ) stream_p_Expr.add(p_Expr85.getTree());
			RBRACKET86=(CommonToken)match(input,RBRACKET,FOLLOW_RBRACKET_in_p_EnclosedExpr3335); if (state.failed) return retval; 
			if ( state.backtracking==0 ) stream_RBRACKET.add(RBRACKET86);

			// AST REWRITE
			// elements: p_Expr
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			if ( state.backtracking==0 ) {
			retval.tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.getTree():null);

			root_0 = (XQDTCommonTree)adaptor.nil();
			// 362:17: -> ^( EnclosedExpr p_Expr )
			{
				// XQueryParser.g:362:20: ^( EnclosedExpr p_Expr )
				{
				XQDTCommonTree root_1 = (XQDTCommonTree)adaptor.nil();
				root_1 = (XQDTCommonTree)adaptor.becomeRoot((XQDTCommonTree)adaptor.create(EnclosedExpr, "EnclosedExpr"), root_1);
				adaptor.addChild(root_1, stream_p_Expr.nextTree());
				adaptor.addChild(root_0, root_1);
				}

			}


			retval.tree = root_0;
			}

			}

			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (XQDTCommonTree)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
			retval.tree = (XQDTCommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "p_EnclosedExpr"


	public static class pm_OptionDecl_return extends ParserRuleReturnScope {
		XQDTCommonTree tree;
		@Override
		public XQDTCommonTree getTree() { return tree; }
	};


	// $ANTLR start "pm_OptionDecl"
	// XQueryParser.g:366:1: pm_OptionDecl : k= DECLARE k= OPTION p_QName p_StringLiteral SEMICOLON ;
	public final XQueryParser.pm_OptionDecl_return pm_OptionDecl() throws RecognitionException {
		XQueryParser.pm_OptionDecl_return retval = new XQueryParser.pm_OptionDecl_return();
		retval.start = input.LT(1);

		XQDTCommonTree root_0 = null;

		CommonToken k=null;
		CommonToken SEMICOLON89=null;
		ParserRuleReturnScope p_QName87 =null;
		ParserRuleReturnScope p_StringLiteral88 =null;

		XQDTCommonTree k_tree=null;
		XQDTCommonTree SEMICOLON89_tree=null;

		try {
			// XQueryParser.g:367:9: (k= DECLARE k= OPTION p_QName p_StringLiteral SEMICOLON )
			// XQueryParser.g:367:11: k= DECLARE k= OPTION p_QName p_StringLiteral SEMICOLON
			{
			root_0 = (XQDTCommonTree)adaptor.nil();


			k=(CommonToken)match(input,DECLARE,FOLLOW_DECLARE_in_pm_OptionDecl3387); if (state.failed) return retval;
			if ( state.backtracking==0 ) {
			k_tree = (XQDTCommonTree)adaptor.create(k);
			adaptor.addChild(root_0, k_tree);
			}

			if ( state.backtracking==0 ) {ak(k);}
			k=(CommonToken)match(input,OPTION,FOLLOW_OPTION_in_pm_OptionDecl3393); if (state.failed) return retval;
			if ( state.backtracking==0 ) {
			k_tree = (XQDTCommonTree)adaptor.create(k);
			adaptor.addChild(root_0, k_tree);
			}

			if ( state.backtracking==0 ) {ak(k);}
			pushFollow(FOLLOW_p_QName_in_pm_OptionDecl3397);
			p_QName87=p_QName();
			state._fsp--;
			if (state.failed) return retval;
			if ( state.backtracking==0 ) adaptor.addChild(root_0, p_QName87.getTree());

			pushFollow(FOLLOW_p_StringLiteral_in_pm_OptionDecl3399);
			p_StringLiteral88=p_StringLiteral();
			state._fsp--;
			if (state.failed) return retval;
			if ( state.backtracking==0 ) adaptor.addChild(root_0, p_StringLiteral88.getTree());

			SEMICOLON89=(CommonToken)match(input,SEMICOLON,FOLLOW_SEMICOLON_in_pm_OptionDecl3401); if (state.failed) return retval;
			if ( state.backtracking==0 ) {
			SEMICOLON89_tree = (XQDTCommonTree)adaptor.create(SEMICOLON89);
			adaptor.addChild(root_0, SEMICOLON89_tree);
			}

			}

			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (XQDTCommonTree)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
			retval.tree = (XQDTCommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "pm_OptionDecl"


	public static class pm_QueryBody_return extends ParserRuleReturnScope {
		XQDTCommonTree tree;
		@Override
		public XQDTCommonTree getTree() { return tree; }
	};


	// $ANTLR start "pm_QueryBody"
	// XQueryParser.g:371:1: pm_QueryBody : ({...}? => p_Program | p_Expr[true,true] );
	public final XQueryParser.pm_QueryBody_return pm_QueryBody() throws RecognitionException {
		XQueryParser.pm_QueryBody_return retval = new XQueryParser.pm_QueryBody_return();
		retval.start = input.LT(1);

		XQDTCommonTree root_0 = null;

		ParserRuleReturnScope p_Program90 =null;
		ParserRuleReturnScope p_Expr91 =null;


		try {
			// XQueryParser.g:372:9: ({...}? => p_Program | p_Expr[true,true] )
			int alt45=2;
			alt45 = dfa45.predict(input);
			switch (alt45) {
				case 1 :
					// XQueryParser.g:372:11: {...}? => p_Program
					{
					root_0 = (XQDTCommonTree)adaptor.nil();


					if ( !((lc(XQS))) ) {
						if (state.backtracking>0) {state.failed=true; return retval;}
						throw new FailedPredicateException(input, "pm_QueryBody", "lc(XQS)");
					}
					pushFollow(FOLLOW_p_Program_in_pm_QueryBody3430);
					p_Program90=p_Program();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, p_Program90.getTree());

					}
					break;
				case 2 :
					// XQueryParser.g:373:11: p_Expr[true,true]
					{
					root_0 = (XQDTCommonTree)adaptor.nil();


					pushFollow(FOLLOW_p_Expr_in_pm_QueryBody3442);
					p_Expr91=p_Expr(true, true);
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, p_Expr91.getTree());

					}
					break;

			}
			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (XQDTCommonTree)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
			retval.tree = (XQDTCommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "pm_QueryBody"


	public static class p_Expr_return extends ParserRuleReturnScope {
		XQDTCommonTree tree;
		@Override
		public XQDTCommonTree getTree() { return tree; }
	};


	// $ANTLR start "p_Expr"
	// XQueryParser.g:383:1: p_Expr[boolean strict, boolean allowConcat] : es= p_ExprSingle[$strict] ( COMMA p_ExprSingle[$strict] )* ;
	public final XQueryParser.p_Expr_return p_Expr(boolean strict, boolean allowConcat) throws RecognitionException {
		XQueryParser.p_Expr_return retval = new XQueryParser.p_Expr_return();
		retval.start = input.LT(1);

		XQDTCommonTree root_0 = null;

		CommonToken COMMA92=null;
		ParserRuleReturnScope es =null;
		ParserRuleReturnScope p_ExprSingle93 =null;

		XQDTCommonTree COMMA92_tree=null;

		try {
			// XQueryParser.g:384:9: (es= p_ExprSingle[$strict] ( COMMA p_ExprSingle[$strict] )* )
			// XQueryParser.g:384:11: es= p_ExprSingle[$strict] ( COMMA p_ExprSingle[$strict] )*
			{
			root_0 = (XQDTCommonTree)adaptor.nil();


			pushFollow(FOLLOW_p_ExprSingle_in_p_Expr3478);
			es=p_ExprSingle(strict);
			state._fsp--;
			if (state.failed) return retval;
			if ( state.backtracking==0 ) adaptor.addChild(root_0, es.getTree());

			if ( state.backtracking==0 ) { if (!allowConcat) throw new Exception(); }
			// XQueryParser.g:385:11: ( COMMA p_ExprSingle[$strict] )*
			loop46:
			while (true) {
				int alt46=2;
				int LA46_0 = input.LA(1);
				if ( (LA46_0==COMMA) ) {
					alt46=1;
				}

				switch (alt46) {
				case 1 :
					// XQueryParser.g:385:12: COMMA p_ExprSingle[$strict]
					{
					COMMA92=(CommonToken)match(input,COMMA,FOLLOW_COMMA_in_p_Expr3494); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					COMMA92_tree = (XQDTCommonTree)adaptor.create(COMMA92);
					adaptor.addChild(root_0, COMMA92_tree);
					}

					pushFollow(FOLLOW_p_ExprSingle_in_p_Expr3496);
					p_ExprSingle93=p_ExprSingle(strict);
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, p_ExprSingle93.getTree());

					}
					break;

				default :
					break loop46;
				}
			}

			}

			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (XQDTCommonTree)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
		}
		catch (RecognitionException re) {

			    reportError(re);
			    recover(input,re);
			    retval.tree = (XQDTCommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

		}
		catch (Exception e) {

			    root_0 = (XQDTCommonTree)adaptor.nil();
			    adaptor.addChild(root_0, es.getTree());
			    retval.stop = input.LT(-1);
			    retval.tree = (XQDTCommonTree)adaptor.rulePostProcessing(root_0);
			    adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

		}

		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "p_Expr"


	public static class p_ExprSingle_return extends ParserRuleReturnScope {
		XQDTCommonTree tree;
		@Override
		public XQDTCommonTree getTree() { return tree; }
	};


	// $ANTLR start "p_ExprSingle"
	// XQueryParser.g:402:1: p_ExprSingle[boolean strict] : ( ( ( ( FOR | LET ) DOLLAR ) | ( FOR ( TUMBLING | SLIDING ) ) )=> p_FLWORHybrid[$strict] | ( IF LPAREN )=> p_IfHybrid[$strict] | ( SWITCH LPAREN )=> p_SwitchHybrid[$strict] | ( TYPESWITCH LPAREN )=> p_TypeswitchHybrid[$strict] | ( TRY LBRACKET )=> p_TryCatchHybrid[$strict] | p_ExprSimple );
	public final XQueryParser.p_ExprSingle_return p_ExprSingle(boolean strict) throws RecognitionException {
		XQueryParser.p_ExprSingle_return retval = new XQueryParser.p_ExprSingle_return();
		retval.start = input.LT(1);

		XQDTCommonTree root_0 = null;

		ParserRuleReturnScope p_FLWORHybrid94 =null;
		ParserRuleReturnScope p_IfHybrid95 =null;
		ParserRuleReturnScope p_SwitchHybrid96 =null;
		ParserRuleReturnScope p_TypeswitchHybrid97 =null;
		ParserRuleReturnScope p_TryCatchHybrid98 =null;
		ParserRuleReturnScope p_ExprSimple99 =null;


		try {
			// XQueryParser.g:403:9: ( ( ( ( FOR | LET ) DOLLAR ) | ( FOR ( TUMBLING | SLIDING ) ) )=> p_FLWORHybrid[$strict] | ( IF LPAREN )=> p_IfHybrid[$strict] | ( SWITCH LPAREN )=> p_SwitchHybrid[$strict] | ( TYPESWITCH LPAREN )=> p_TypeswitchHybrid[$strict] | ( TRY LBRACKET )=> p_TryCatchHybrid[$strict] | p_ExprSimple )
			int alt47=6;
			switch ( input.LA(1) ) {
			case FOR:
				{
				int LA47_1 = input.LA(2);
				if ( (LA47_1==DOLLAR) && (synpred1_XQueryParser())) {
					alt47=1;
				}
				else if ( (LA47_1==TUMBLING) && (synpred1_XQueryParser())) {
					alt47=1;
				}
				else if ( (LA47_1==SLIDING) && (synpred1_XQueryParser())) {
					alt47=1;
				}
				else if ( (LA47_1==EOF||LA47_1==AFTER||LA47_1==AND||(LA47_1 >= AS && LA47_1 <= ASCENDING)||LA47_1==BEFORE||(LA47_1 >= CASE && LA47_1 <= CASTABLE)||LA47_1==COLLATION||LA47_1==COLON||LA47_1==COMMA||LA47_1==CONCAT||LA47_1==CONTAINS||LA47_1==COUNT||LA47_1==DEFAULT||LA47_1==DESCENDING||LA47_1==DIV||LA47_1==EMPTY||LA47_1==END||(LA47_1 >= EQ && LA47_1 <= EQUAL)||LA47_1==EXCEPT||LA47_1==FOR||(LA47_1 >= GE && LA47_1 <= GREATER_GREATER)||LA47_1==GROUP||LA47_1==GT||LA47_1==IDIV||LA47_1==INSTANCE||(LA47_1 >= INTERSECT && LA47_1 <= IS)||LA47_1==LE||LA47_1==LET||(LA47_1 >= LPAREN && LA47_1 <= LT)||LA47_1==MINUS||(LA47_1 >= MOD && LA47_1 <= MODIFY)||LA47_1==NE||LA47_1==NOTEQUAL||LA47_1==ONLY||(LA47_1 >= OR && LA47_1 <= ORDER)||LA47_1==PLUS||LA47_1==RBRACKET||LA47_1==RETURN||(LA47_1 >= RPAREN && LA47_1 <= RSQUARE)||LA47_1==SATISFIES||LA47_1==SEMICOLON||(LA47_1 >= SLASH && LA47_1 <= SLASH_SLASH)||(LA47_1 >= SMALLER && LA47_1 <= SMALLER_SMALLER)||(LA47_1 >= STABLE && LA47_1 <= START)||(LA47_1 >= TO && LA47_1 <= TREAT)||LA47_1==UNION||LA47_1==VBAR||LA47_1==WHERE||LA47_1==WITH) ) {
					alt47=6;
				}

				else {
					if (state.backtracking>0) {state.failed=true; return retval;}
					int nvaeMark = input.mark();
					try {
						input.consume();
						NoViableAltException nvae =
							new NoViableAltException("", 47, 1, input);
						throw nvae;
					} finally {
						input.rewind(nvaeMark);
					}
				}

				}
				break;
			case LET:
				{
				int LA47_2 = input.LA(2);
				if ( (LA47_2==DOLLAR) && (synpred1_XQueryParser())) {
					alt47=1;
				}
				else if ( (LA47_2==SCORE) && (synpred1_XQueryParser())) {
					alt47=1;
				}
				else if ( (LA47_2==EOF||LA47_2==AFTER||LA47_2==AND||(LA47_2 >= AS && LA47_2 <= ASCENDING)||LA47_2==BEFORE||(LA47_2 >= CASE && LA47_2 <= CASTABLE)||LA47_2==COLLATION||LA47_2==COLON||LA47_2==COMMA||LA47_2==CONCAT||LA47_2==CONTAINS||LA47_2==COUNT||LA47_2==DEFAULT||LA47_2==DESCENDING||LA47_2==DIV||LA47_2==EMPTY||LA47_2==END||(LA47_2 >= EQ && LA47_2 <= EQUAL)||LA47_2==EXCEPT||LA47_2==FOR||(LA47_2 >= GE && LA47_2 <= GREATER_GREATER)||LA47_2==GROUP||LA47_2==GT||LA47_2==IDIV||LA47_2==INSTANCE||(LA47_2 >= INTERSECT && LA47_2 <= IS)||LA47_2==LE||LA47_2==LET||(LA47_2 >= LPAREN && LA47_2 <= LT)||LA47_2==MINUS||(LA47_2 >= MOD && LA47_2 <= MODIFY)||LA47_2==NE||LA47_2==NOTEQUAL||LA47_2==ONLY||(LA47_2 >= OR && LA47_2 <= ORDER)||LA47_2==PLUS||LA47_2==RBRACKET||LA47_2==RETURN||(LA47_2 >= RPAREN && LA47_2 <= RSQUARE)||LA47_2==SATISFIES||LA47_2==SEMICOLON||(LA47_2 >= SLASH && LA47_2 <= SLASH_SLASH)||(LA47_2 >= SMALLER && LA47_2 <= SMALLER_SMALLER)||(LA47_2 >= STABLE && LA47_2 <= START)||(LA47_2 >= TO && LA47_2 <= TREAT)||LA47_2==UNION||LA47_2==VBAR||LA47_2==WHERE||LA47_2==WITH) ) {
					alt47=6;
				}

				else {
					if (state.backtracking>0) {state.failed=true; return retval;}
					int nvaeMark = input.mark();
					try {
						input.consume();
						NoViableAltException nvae =
							new NoViableAltException("", 47, 2, input);
						throw nvae;
					} finally {
						input.rewind(nvaeMark);
					}
				}

				}
				break;
			case IF:
				{
				int LA47_3 = input.LA(2);
				if ( (LA47_3==LPAREN) && (synpred2_XQueryParser())) {
					alt47=2;
				}
				else if ( (LA47_3==EOF||LA47_3==AFTER||LA47_3==AND||(LA47_3 >= AS && LA47_3 <= ASCENDING)||LA47_3==BEFORE||(LA47_3 >= CASE && LA47_3 <= CASTABLE)||LA47_3==COLLATION||LA47_3==COLON||LA47_3==COMMA||LA47_3==CONCAT||LA47_3==CONTAINS||LA47_3==COUNT||LA47_3==DEFAULT||LA47_3==DESCENDING||LA47_3==DIV||LA47_3==EMPTY||LA47_3==END||(LA47_3 >= EQ && LA47_3 <= EQUAL)||LA47_3==EXCEPT||LA47_3==FOR||(LA47_3 >= GE && LA47_3 <= GREATER_GREATER)||LA47_3==GROUP||LA47_3==GT||LA47_3==IDIV||LA47_3==INSTANCE||(LA47_3 >= INTERSECT && LA47_3 <= IS)||LA47_3==LE||LA47_3==LET||(LA47_3 >= LSQUARE && LA47_3 <= LT)||LA47_3==MINUS||(LA47_3 >= MOD && LA47_3 <= MODIFY)||LA47_3==NE||LA47_3==NOTEQUAL||LA47_3==ONLY||(LA47_3 >= OR && LA47_3 <= ORDER)||LA47_3==PLUS||LA47_3==RBRACKET||LA47_3==RETURN||(LA47_3 >= RPAREN && LA47_3 <= RSQUARE)||LA47_3==SATISFIES||LA47_3==SEMICOLON||(LA47_3 >= SLASH && LA47_3 <= SLASH_SLASH)||(LA47_3 >= SMALLER && LA47_3 <= SMALLER_SMALLER)||(LA47_3 >= STABLE && LA47_3 <= START)||(LA47_3 >= TO && LA47_3 <= TREAT)||LA47_3==UNION||LA47_3==VBAR||LA47_3==WHERE||LA47_3==WITH) ) {
					alt47=6;
				}

				else {
					if (state.backtracking>0) {state.failed=true; return retval;}
					int nvaeMark = input.mark();
					try {
						input.consume();
						NoViableAltException nvae =
							new NoViableAltException("", 47, 3, input);
						throw nvae;
					} finally {
						input.rewind(nvaeMark);
					}
				}

				}
				break;
			case SWITCH:
				{
				int LA47_4 = input.LA(2);
				if ( (LA47_4==LPAREN) && (synpred3_XQueryParser())) {
					alt47=3;
				}
				else if ( (LA47_4==EOF||LA47_4==AFTER||LA47_4==AND||(LA47_4 >= AS && LA47_4 <= ASCENDING)||LA47_4==BEFORE||(LA47_4 >= CASE && LA47_4 <= CASTABLE)||LA47_4==COLLATION||LA47_4==COLON||LA47_4==COMMA||LA47_4==CONCAT||LA47_4==CONTAINS||LA47_4==COUNT||LA47_4==DEFAULT||LA47_4==DESCENDING||LA47_4==DIV||LA47_4==EMPTY||LA47_4==END||(LA47_4 >= EQ && LA47_4 <= EQUAL)||LA47_4==EXCEPT||LA47_4==FOR||(LA47_4 >= GE && LA47_4 <= GREATER_GREATER)||LA47_4==GROUP||LA47_4==GT||LA47_4==IDIV||LA47_4==INSTANCE||(LA47_4 >= INTERSECT && LA47_4 <= IS)||LA47_4==LE||LA47_4==LET||(LA47_4 >= LSQUARE && LA47_4 <= LT)||LA47_4==MINUS||(LA47_4 >= MOD && LA47_4 <= MODIFY)||LA47_4==NE||LA47_4==NOTEQUAL||LA47_4==ONLY||(LA47_4 >= OR && LA47_4 <= ORDER)||LA47_4==PLUS||LA47_4==RBRACKET||LA47_4==RETURN||(LA47_4 >= RPAREN && LA47_4 <= RSQUARE)||LA47_4==SATISFIES||LA47_4==SEMICOLON||(LA47_4 >= SLASH && LA47_4 <= SLASH_SLASH)||(LA47_4 >= SMALLER && LA47_4 <= SMALLER_SMALLER)||(LA47_4 >= STABLE && LA47_4 <= START)||(LA47_4 >= TO && LA47_4 <= TREAT)||LA47_4==UNION||LA47_4==VBAR||LA47_4==WHERE||LA47_4==WITH) ) {
					alt47=6;
				}

				else {
					if (state.backtracking>0) {state.failed=true; return retval;}
					int nvaeMark = input.mark();
					try {
						input.consume();
						NoViableAltException nvae =
							new NoViableAltException("", 47, 4, input);
						throw nvae;
					} finally {
						input.rewind(nvaeMark);
					}
				}

				}
				break;
			case TYPESWITCH:
				{
				int LA47_5 = input.LA(2);
				if ( (LA47_5==LPAREN) && (synpred4_XQueryParser())) {
					alt47=4;
				}
				else if ( (LA47_5==EOF||LA47_5==AFTER||LA47_5==AND||(LA47_5 >= AS && LA47_5 <= ASCENDING)||LA47_5==BEFORE||(LA47_5 >= CASE && LA47_5 <= CASTABLE)||LA47_5==COLLATION||LA47_5==COLON||LA47_5==COMMA||LA47_5==CONCAT||LA47_5==CONTAINS||LA47_5==COUNT||LA47_5==DEFAULT||LA47_5==DESCENDING||LA47_5==DIV||LA47_5==EMPTY||LA47_5==END||(LA47_5 >= EQ && LA47_5 <= EQUAL)||LA47_5==EXCEPT||LA47_5==FOR||(LA47_5 >= GE && LA47_5 <= GREATER_GREATER)||LA47_5==GROUP||LA47_5==GT||LA47_5==IDIV||LA47_5==INSTANCE||(LA47_5 >= INTERSECT && LA47_5 <= IS)||LA47_5==LE||LA47_5==LET||(LA47_5 >= LSQUARE && LA47_5 <= LT)||LA47_5==MINUS||(LA47_5 >= MOD && LA47_5 <= MODIFY)||LA47_5==NE||LA47_5==NOTEQUAL||LA47_5==ONLY||(LA47_5 >= OR && LA47_5 <= ORDER)||LA47_5==PLUS||LA47_5==RBRACKET||LA47_5==RETURN||(LA47_5 >= RPAREN && LA47_5 <= RSQUARE)||LA47_5==SATISFIES||LA47_5==SEMICOLON||(LA47_5 >= SLASH && LA47_5 <= SLASH_SLASH)||(LA47_5 >= SMALLER && LA47_5 <= SMALLER_SMALLER)||(LA47_5 >= STABLE && LA47_5 <= START)||(LA47_5 >= TO && LA47_5 <= TREAT)||LA47_5==UNION||LA47_5==VBAR||LA47_5==WHERE||LA47_5==WITH) ) {
					alt47=6;
				}

				else {
					if (state.backtracking>0) {state.failed=true; return retval;}
					int nvaeMark = input.mark();
					try {
						input.consume();
						NoViableAltException nvae =
							new NoViableAltException("", 47, 5, input);
						throw nvae;
					} finally {
						input.rewind(nvaeMark);
					}
				}

				}
				break;
			case TRY:
				{
				int LA47_6 = input.LA(2);
				if ( (LA47_6==LBRACKET) && (synpred5_XQueryParser())) {
					alt47=5;
				}
				else if ( (LA47_6==EOF||LA47_6==AFTER||LA47_6==AND||(LA47_6 >= AS && LA47_6 <= ASCENDING)||LA47_6==BEFORE||(LA47_6 >= CASE && LA47_6 <= CASTABLE)||LA47_6==COLLATION||LA47_6==COLON||LA47_6==COMMA||LA47_6==CONCAT||LA47_6==CONTAINS||LA47_6==COUNT||LA47_6==DEFAULT||LA47_6==DESCENDING||LA47_6==DIV||LA47_6==EMPTY||LA47_6==END||(LA47_6 >= EQ && LA47_6 <= EQUAL)||LA47_6==EXCEPT||LA47_6==FOR||(LA47_6 >= GE && LA47_6 <= GREATER_GREATER)||LA47_6==GROUP||LA47_6==GT||LA47_6==IDIV||LA47_6==INSTANCE||(LA47_6 >= INTERSECT && LA47_6 <= IS)||LA47_6==LE||LA47_6==LET||(LA47_6 >= LPAREN && LA47_6 <= LT)||LA47_6==MINUS||(LA47_6 >= MOD && LA47_6 <= MODIFY)||LA47_6==NE||LA47_6==NOTEQUAL||LA47_6==ONLY||(LA47_6 >= OR && LA47_6 <= ORDER)||LA47_6==PLUS||LA47_6==RBRACKET||LA47_6==RETURN||(LA47_6 >= RPAREN && LA47_6 <= RSQUARE)||LA47_6==SATISFIES||LA47_6==SEMICOLON||(LA47_6 >= SLASH && LA47_6 <= SLASH_SLASH)||(LA47_6 >= SMALLER && LA47_6 <= SMALLER_SMALLER)||(LA47_6 >= STABLE && LA47_6 <= START)||(LA47_6 >= TO && LA47_6 <= TREAT)||LA47_6==UNION||LA47_6==VBAR||LA47_6==WHERE||LA47_6==WITH) ) {
					alt47=6;
				}

				else {
					if (state.backtracking>0) {state.failed=true; return retval;}
					int nvaeMark = input.mark();
					try {
						input.consume();
						NoViableAltException nvae =
							new NoViableAltException("", 47, 6, input);
						throw nvae;
					} finally {
						input.rewind(nvaeMark);
					}
				}

				}
				break;
			case AFTER:
			case ALL:
			case ALLOWING:
			case AMP_ER:
			case ANCESTOR:
			case ANCESTOR_OR_SELF:
			case AND:
			case ANY:
			case APOS:
			case APOS_ER:
			case AS:
			case ASCENDING:
			case AT:
			case ATTRIBUTE:
			case ATTR_SIGN:
			case BASE_URI:
			case BEFORE:
			case BINARY:
			case BOUNDARY_SPACE:
			case BREAK:
			case BY:
			case CASE:
			case CAST:
			case CASTABLE:
			case CATCH:
			case CHECK:
			case CHILD:
			case COLLATION:
			case COLLECTION:
			case COMMENT:
			case CONSTRAINT:
			case CONSTRUCTION:
			case CONTAINS:
			case CONTENT:
			case CONTEXT:
			case CONTINUE:
			case COPY:
			case COPY_NAMESPACES:
			case COUNT:
			case DECIMAL_FORMAT:
			case DECIMAL_SEPARATOR:
			case DECLARE:
			case DEFAULT:
			case DELETE:
			case DESCENDANT:
			case DESCENDANT_OR_SELF:
			case DESCENDING:
			case DIACRITICS:
			case DIFFERENT:
			case DIGIT:
			case DISTANCE:
			case DIV:
			case DOCUMENT:
			case DOCUMENT_NODE:
			case DOLLAR:
			case DOT:
			case DOT_DOT:
			case ELEMENT:
			case ELSE:
			case EMPTY:
			case EMPTY_SEQUENCE:
			case ENCODING:
			case END:
			case ENTIRE:
			case EQ:
			case EVERY:
			case EXACTLY:
			case EXCEPT:
			case EXIT:
			case EXTERNAL:
			case FIRST:
			case FOLLOWING:
			case FOLLOWING_SIBLING:
			case FOREACH:
			case FOREIGN:
			case FROM:
			case FTAND:
			case FTNOT:
			case FTOR:
			case FT_OPTION:
			case FUNCTION:
			case GE:
			case GREATEST:
			case GROUP:
			case GROUPING_SEPARATOR:
			case GT:
			case IDIV:
			case IMPORT:
			case IN:
			case INDEX:
			case INFINITY:
			case INHERIT:
			case INSENSITIVE:
			case INSERT:
			case INSTANCE:
			case INTEGRITY:
			case INTERSECT:
			case INTO:
			case IS:
			case ITEM:
			case KEY:
			case LANGUAGE:
			case LAST:
			case LAX:
			case LBRACKET:
			case LE:
			case LEAST:
			case LEVELS:
			case LOOP:
			case LOWERCASE:
			case LPAREN:
			case LT:
			case L_DecimalLiteral:
			case L_DirCommentConstructor:
			case L_DirPIConstructor:
			case L_DoubleLiteral:
			case L_IntegerLiteral:
			case L_NCName:
			case L_Pragma:
			case MINUS:
			case MINUS_SIGN:
			case MOD:
			case MODIFY:
			case MODULE:
			case MOST:
			case NAMESPACE:
			case NAMESPACE_NODE:
			case NAN:
			case NE:
			case NEXT:
			case NO:
			case NODE:
			case NODES:
			case NOT:
			case NO_INHERIT:
			case NO_PRESERVE:
			case OCCURS:
			case OF:
			case ON:
			case ONLY:
			case OPTION:
			case OR:
			case ORDER:
			case ORDERED:
			case ORDERING:
			case PARAGRAPH:
			case PARAGRAPHS:
			case PARENT:
			case PATTERN_SEPARATOR:
			case PERCENT:
			case PER_MILLE:
			case PHRASE:
			case PLUS:
			case PRECEDING:
			case PRECEDING_SIBLING:
			case PRESERVE:
			case PREVIOUS:
			case PRIVATE:
			case PROCESSING_INSTRUCTION:
			case QUOT:
			case QUOT_ER:
			case RELATIONSHIP:
			case RENAME:
			case REPLACE:
			case RETURN:
			case RETURNING:
			case REVALIDATION:
			case SAME:
			case SATISFIES:
			case SCHEMA:
			case SCHEMA_ATTRIBUTE:
			case SCHEMA_ELEMENT:
			case SCORE:
			case SELF:
			case SENSITIVE:
			case SENTENCE:
			case SENTENCES:
			case SKIP:
			case SLASH:
			case SLASH_SLASH:
			case SLIDING:
			case SMALLER:
			case SOME:
			case STABLE:
			case STAR:
			case START:
			case STEMMING:
			case STOP:
			case STRICT:
			case STRIP:
			case TEXT:
			case THEN:
			case THESAURUS:
			case TIMES:
			case TO:
			case TREAT:
			case TUMBLING:
			case TYPE:
			case UNION:
			case UNIQUE:
			case UNORDERED:
			case UPDATING:
			case UPPERCASE:
			case USING:
			case VALIDATE:
			case VALUE:
			case VARIABLE:
			case VERSION:
			case WEIGHT:
			case WHEN:
			case WHERE:
			case WHILE:
			case WILDCARDS:
			case WINDOW:
			case WITH:
			case WITHOUT:
			case WORD:
			case WORDS:
			case XQUERY:
			case ZERO_DIGIT:
			case EXPLICITLY:
				{
				alt47=6;
				}
				break;
			default:
				if (state.backtracking>0) {state.failed=true; return retval;}
				NoViableAltException nvae =
					new NoViableAltException("", 47, 0, input);
				throw nvae;
			}
			switch (alt47) {
				case 1 :
					// XQueryParser.g:403:11: ( ( ( FOR | LET ) DOLLAR ) | ( FOR ( TUMBLING | SLIDING ) ) )=> p_FLWORHybrid[$strict]
					{
					root_0 = (XQDTCommonTree)adaptor.nil();


					pushFollow(FOLLOW_p_FLWORHybrid_in_p_ExprSingle3569);
					p_FLWORHybrid94=p_FLWORHybrid(strict);
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, p_FLWORHybrid94.getTree());

					}
					break;
				case 2 :
					// XQueryParser.g:404:11: ( IF LPAREN )=> p_IfHybrid[$strict]
					{
					root_0 = (XQDTCommonTree)adaptor.nil();


					pushFollow(FOLLOW_p_IfHybrid_in_p_ExprSingle3599);
					p_IfHybrid95=p_IfHybrid(strict);
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, p_IfHybrid95.getTree());

					}
					break;
				case 3 :
					// XQueryParser.g:405:11: ( SWITCH LPAREN )=> p_SwitchHybrid[$strict]
					{
					root_0 = (XQDTCommonTree)adaptor.nil();


					pushFollow(FOLLOW_p_SwitchHybrid_in_p_ExprSingle3625);
					p_SwitchHybrid96=p_SwitchHybrid(strict);
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, p_SwitchHybrid96.getTree());

					}
					break;
				case 4 :
					// XQueryParser.g:406:11: ( TYPESWITCH LPAREN )=> p_TypeswitchHybrid[$strict]
					{
					root_0 = (XQDTCommonTree)adaptor.nil();


					pushFollow(FOLLOW_p_TypeswitchHybrid_in_p_ExprSingle3647);
					p_TypeswitchHybrid97=p_TypeswitchHybrid(strict);
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, p_TypeswitchHybrid97.getTree());

					}
					break;
				case 5 :
					// XQueryParser.g:407:11: ( TRY LBRACKET )=> p_TryCatchHybrid[$strict]
					{
					root_0 = (XQDTCommonTree)adaptor.nil();


					pushFollow(FOLLOW_p_TryCatchHybrid_in_p_ExprSingle3674);
					p_TryCatchHybrid98=p_TryCatchHybrid(strict);
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, p_TryCatchHybrid98.getTree());

					}
					break;
				case 6 :
					// XQueryParser.g:408:11: p_ExprSimple
					{
					root_0 = (XQDTCommonTree)adaptor.nil();


					pushFollow(FOLLOW_p_ExprSimple_in_p_ExprSingle3687);
					p_ExprSimple99=p_ExprSimple();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, p_ExprSimple99.getTree());

					}
					break;

			}
			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (XQDTCommonTree)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
			retval.tree = (XQDTCommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "p_ExprSingle"


	public static class p_FLWORHybrid_return extends ParserRuleReturnScope {
		XQDTCommonTree tree;
		@Override
		public XQDTCommonTree getTree() { return tree; }
	};


	// $ANTLR start "p_FLWORHybrid"
	// XQueryParser.g:412:1: p_FLWORHybrid[boolean strict] : p_InitialClause ( p_IntermediateClause )* p_ReturnHybrid[$strict] ;
	public final XQueryParser.p_FLWORHybrid_return p_FLWORHybrid(boolean strict) throws RecognitionException {
		XQueryParser.p_FLWORHybrid_return retval = new XQueryParser.p_FLWORHybrid_return();
		retval.start = input.LT(1);

		XQDTCommonTree root_0 = null;

		ParserRuleReturnScope p_InitialClause100 =null;
		ParserRuleReturnScope p_IntermediateClause101 =null;
		ParserRuleReturnScope p_ReturnHybrid102 =null;


		try {
			// XQueryParser.g:413:9: ( p_InitialClause ( p_IntermediateClause )* p_ReturnHybrid[$strict] )
			// XQueryParser.g:413:11: p_InitialClause ( p_IntermediateClause )* p_ReturnHybrid[$strict]
			{
			root_0 = (XQDTCommonTree)adaptor.nil();


			pushFollow(FOLLOW_p_InitialClause_in_p_FLWORHybrid3714);
			p_InitialClause100=p_InitialClause();
			state._fsp--;
			if (state.failed) return retval;
			if ( state.backtracking==0 ) adaptor.addChild(root_0, p_InitialClause100.getTree());

			// XQueryParser.g:413:27: ( p_IntermediateClause )*
			loop48:
			while (true) {
				int alt48=2;
				int LA48_0 = input.LA(1);
				if ( (LA48_0==COUNT||LA48_0==FOR||LA48_0==GROUP||LA48_0==LET||LA48_0==ORDER||LA48_0==STABLE||LA48_0==WHERE) ) {
					alt48=1;
				}

				switch (alt48) {
				case 1 :
					// XQueryParser.g:413:27: p_IntermediateClause
					{
					pushFollow(FOLLOW_p_IntermediateClause_in_p_FLWORHybrid3716);
					p_IntermediateClause101=p_IntermediateClause();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, p_IntermediateClause101.getTree());

					}
					break;

				default :
					break loop48;
				}
			}

			pushFollow(FOLLOW_p_ReturnHybrid_in_p_FLWORHybrid3719);
			p_ReturnHybrid102=p_ReturnHybrid(strict);
			state._fsp--;
			if (state.failed) return retval;
			if ( state.backtracking==0 ) adaptor.addChild(root_0, p_ReturnHybrid102.getTree());

			}

			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (XQDTCommonTree)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
			retval.tree = (XQDTCommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "p_FLWORHybrid"


	public static class p_InitialClause_return extends ParserRuleReturnScope {
		XQDTCommonTree tree;
		@Override
		public XQDTCommonTree getTree() { return tree; }
	};


	// $ANTLR start "p_InitialClause"
	// XQueryParser.g:417:1: p_InitialClause : ( p_ForClause | p_LetClause | p_WindowClause );
	public final XQueryParser.p_InitialClause_return p_InitialClause() throws RecognitionException {
		XQueryParser.p_InitialClause_return retval = new XQueryParser.p_InitialClause_return();
		retval.start = input.LT(1);

		XQDTCommonTree root_0 = null;

		ParserRuleReturnScope p_ForClause103 =null;
		ParserRuleReturnScope p_LetClause104 =null;
		ParserRuleReturnScope p_WindowClause105 =null;


		try {
			// XQueryParser.g:418:9: ( p_ForClause | p_LetClause | p_WindowClause )
			int alt49=3;
			int LA49_0 = input.LA(1);
			if ( (LA49_0==FOR) ) {
				int LA49_1 = input.LA(2);
				if ( (LA49_1==DOLLAR) ) {
					alt49=1;
				}
				else if ( (LA49_1==SLIDING||LA49_1==TUMBLING) ) {
					alt49=3;
				}

				else {
					if (state.backtracking>0) {state.failed=true; return retval;}
					int nvaeMark = input.mark();
					try {
						input.consume();
						NoViableAltException nvae =
							new NoViableAltException("", 49, 1, input);
						throw nvae;
					} finally {
						input.rewind(nvaeMark);
					}
				}

			}
			else if ( (LA49_0==LET) ) {
				alt49=2;
			}

			else {
				if (state.backtracking>0) {state.failed=true; return retval;}
				NoViableAltException nvae =
					new NoViableAltException("", 49, 0, input);
				throw nvae;
			}

			switch (alt49) {
				case 1 :
					// XQueryParser.g:418:11: p_ForClause
					{
					root_0 = (XQDTCommonTree)adaptor.nil();


					pushFollow(FOLLOW_p_ForClause_in_p_InitialClause3746);
					p_ForClause103=p_ForClause();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, p_ForClause103.getTree());

					}
					break;
				case 2 :
					// XQueryParser.g:418:25: p_LetClause
					{
					root_0 = (XQDTCommonTree)adaptor.nil();


					pushFollow(FOLLOW_p_LetClause_in_p_InitialClause3750);
					p_LetClause104=p_LetClause();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, p_LetClause104.getTree());

					}
					break;
				case 3 :
					// XQueryParser.g:418:39: p_WindowClause
					{
					root_0 = (XQDTCommonTree)adaptor.nil();


					pushFollow(FOLLOW_p_WindowClause_in_p_InitialClause3754);
					p_WindowClause105=p_WindowClause();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, p_WindowClause105.getTree());

					}
					break;

			}
			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (XQDTCommonTree)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
			retval.tree = (XQDTCommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "p_InitialClause"


	public static class p_IntermediateClause_return extends ParserRuleReturnScope {
		XQDTCommonTree tree;
		@Override
		public XQDTCommonTree getTree() { return tree; }
	};


	// $ANTLR start "p_IntermediateClause"
	// XQueryParser.g:422:1: p_IntermediateClause : ( p_InitialClause | p_WhereClause | p_GroupByClause | p_OrderByClause | p_CountClause );
	public final XQueryParser.p_IntermediateClause_return p_IntermediateClause() throws RecognitionException {
		XQueryParser.p_IntermediateClause_return retval = new XQueryParser.p_IntermediateClause_return();
		retval.start = input.LT(1);

		XQDTCommonTree root_0 = null;

		ParserRuleReturnScope p_InitialClause106 =null;
		ParserRuleReturnScope p_WhereClause107 =null;
		ParserRuleReturnScope p_GroupByClause108 =null;
		ParserRuleReturnScope p_OrderByClause109 =null;
		ParserRuleReturnScope p_CountClause110 =null;


		try {
			// XQueryParser.g:423:9: ( p_InitialClause | p_WhereClause | p_GroupByClause | p_OrderByClause | p_CountClause )
			int alt50=5;
			switch ( input.LA(1) ) {
			case FOR:
			case LET:
				{
				alt50=1;
				}
				break;
			case WHERE:
				{
				alt50=2;
				}
				break;
			case GROUP:
				{
				alt50=3;
				}
				break;
			case ORDER:
			case STABLE:
				{
				alt50=4;
				}
				break;
			case COUNT:
				{
				alt50=5;
				}
				break;
			default:
				if (state.backtracking>0) {state.failed=true; return retval;}
				NoViableAltException nvae =
					new NoViableAltException("", 50, 0, input);
				throw nvae;
			}
			switch (alt50) {
				case 1 :
					// XQueryParser.g:423:11: p_InitialClause
					{
					root_0 = (XQDTCommonTree)adaptor.nil();


					pushFollow(FOLLOW_p_InitialClause_in_p_IntermediateClause3780);
					p_InitialClause106=p_InitialClause();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, p_InitialClause106.getTree());

					}
					break;
				case 2 :
					// XQueryParser.g:423:29: p_WhereClause
					{
					root_0 = (XQDTCommonTree)adaptor.nil();


					pushFollow(FOLLOW_p_WhereClause_in_p_IntermediateClause3784);
					p_WhereClause107=p_WhereClause();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, p_WhereClause107.getTree());

					}
					break;
				case 3 :
					// XQueryParser.g:423:45: p_GroupByClause
					{
					root_0 = (XQDTCommonTree)adaptor.nil();


					pushFollow(FOLLOW_p_GroupByClause_in_p_IntermediateClause3788);
					p_GroupByClause108=p_GroupByClause();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, p_GroupByClause108.getTree());

					}
					break;
				case 4 :
					// XQueryParser.g:423:63: p_OrderByClause
					{
					root_0 = (XQDTCommonTree)adaptor.nil();


					pushFollow(FOLLOW_p_OrderByClause_in_p_IntermediateClause3792);
					p_OrderByClause109=p_OrderByClause();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, p_OrderByClause109.getTree());

					}
					break;
				case 5 :
					// XQueryParser.g:423:81: p_CountClause
					{
					root_0 = (XQDTCommonTree)adaptor.nil();


					pushFollow(FOLLOW_p_CountClause_in_p_IntermediateClause3796);
					p_CountClause110=p_CountClause();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, p_CountClause110.getTree());

					}
					break;

			}
			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (XQDTCommonTree)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
			retval.tree = (XQDTCommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "p_IntermediateClause"


	public static class p_ForClause_return extends ParserRuleReturnScope {
		XQDTCommonTree tree;
		@Override
		public XQDTCommonTree getTree() { return tree; }
	};


	// $ANTLR start "p_ForClause"
	// XQueryParser.g:428:1: p_ForClause : k= FOR p_ForBinding ( COMMA p_ForBinding )* ;
	public final XQueryParser.p_ForClause_return p_ForClause() throws RecognitionException {
		XQueryParser.p_ForClause_return retval = new XQueryParser.p_ForClause_return();
		retval.start = input.LT(1);

		XQDTCommonTree root_0 = null;

		CommonToken k=null;
		CommonToken COMMA112=null;
		ParserRuleReturnScope p_ForBinding111 =null;
		ParserRuleReturnScope p_ForBinding113 =null;

		XQDTCommonTree k_tree=null;
		XQDTCommonTree COMMA112_tree=null;

		try {
			// XQueryParser.g:429:9: (k= FOR p_ForBinding ( COMMA p_ForBinding )* )
			// XQueryParser.g:429:11: k= FOR p_ForBinding ( COMMA p_ForBinding )*
			{
			root_0 = (XQDTCommonTree)adaptor.nil();


			k=(CommonToken)match(input,FOR,FOLLOW_FOR_in_p_ForClause3825); if (state.failed) return retval;
			if ( state.backtracking==0 ) {
			k_tree = (XQDTCommonTree)adaptor.create(k);
			adaptor.addChild(root_0, k_tree);
			}

			if ( state.backtracking==0 ) {ak(k);}
			pushFollow(FOLLOW_p_ForBinding_in_p_ForClause3829);
			p_ForBinding111=p_ForBinding();
			state._fsp--;
			if (state.failed) return retval;
			if ( state.backtracking==0 ) adaptor.addChild(root_0, p_ForBinding111.getTree());

			// XQueryParser.g:429:40: ( COMMA p_ForBinding )*
			loop51:
			while (true) {
				int alt51=2;
				int LA51_0 = input.LA(1);
				if ( (LA51_0==COMMA) ) {
					alt51=1;
				}

				switch (alt51) {
				case 1 :
					// XQueryParser.g:429:41: COMMA p_ForBinding
					{
					COMMA112=(CommonToken)match(input,COMMA,FOLLOW_COMMA_in_p_ForClause3832); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					COMMA112_tree = (XQDTCommonTree)adaptor.create(COMMA112);
					adaptor.addChild(root_0, COMMA112_tree);
					}

					pushFollow(FOLLOW_p_ForBinding_in_p_ForClause3834);
					p_ForBinding113=p_ForBinding();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, p_ForBinding113.getTree());

					}
					break;

				default :
					break loop51;
				}
			}

			}

			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (XQDTCommonTree)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
			retval.tree = (XQDTCommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "p_ForClause"


	public static class p_ForBinding_return extends ParserRuleReturnScope {
		XQDTCommonTree tree;
		@Override
		public XQDTCommonTree getTree() { return tree; }
	};


	// $ANTLR start "p_ForBinding"
	// XQueryParser.g:433:1: p_ForBinding : DOLLAR p_VarName ( p_TypeDeclaration )? ( p_AllowingEmpty )? ( p_PositionalVar )? ( p_FTScoreVar )? k= IN p_ExprSingle[true] ;
	public final XQueryParser.p_ForBinding_return p_ForBinding() throws RecognitionException {
		XQueryParser.p_ForBinding_return retval = new XQueryParser.p_ForBinding_return();
		retval.start = input.LT(1);

		XQDTCommonTree root_0 = null;

		CommonToken k=null;
		CommonToken DOLLAR114=null;
		ParserRuleReturnScope p_VarName115 =null;
		ParserRuleReturnScope p_TypeDeclaration116 =null;
		ParserRuleReturnScope p_AllowingEmpty117 =null;
		ParserRuleReturnScope p_PositionalVar118 =null;
		ParserRuleReturnScope p_FTScoreVar119 =null;
		ParserRuleReturnScope p_ExprSingle120 =null;

		XQDTCommonTree k_tree=null;
		XQDTCommonTree DOLLAR114_tree=null;

		try {
			// XQueryParser.g:434:9: ( DOLLAR p_VarName ( p_TypeDeclaration )? ( p_AllowingEmpty )? ( p_PositionalVar )? ( p_FTScoreVar )? k= IN p_ExprSingle[true] )
			// XQueryParser.g:434:11: DOLLAR p_VarName ( p_TypeDeclaration )? ( p_AllowingEmpty )? ( p_PositionalVar )? ( p_FTScoreVar )? k= IN p_ExprSingle[true]
			{
			root_0 = (XQDTCommonTree)adaptor.nil();


			DOLLAR114=(CommonToken)match(input,DOLLAR,FOLLOW_DOLLAR_in_p_ForBinding3862); if (state.failed) return retval;
			if ( state.backtracking==0 ) {
			DOLLAR114_tree = (XQDTCommonTree)adaptor.create(DOLLAR114);
			adaptor.addChild(root_0, DOLLAR114_tree);
			}

			pushFollow(FOLLOW_p_VarName_in_p_ForBinding3864);
			p_VarName115=p_VarName();
			state._fsp--;
			if (state.failed) return retval;
			if ( state.backtracking==0 ) adaptor.addChild(root_0, p_VarName115.getTree());

			// XQueryParser.g:434:28: ( p_TypeDeclaration )?
			int alt52=2;
			int LA52_0 = input.LA(1);
			if ( (LA52_0==AS) ) {
				alt52=1;
			}
			switch (alt52) {
				case 1 :
					// XQueryParser.g:434:28: p_TypeDeclaration
					{
					pushFollow(FOLLOW_p_TypeDeclaration_in_p_ForBinding3866);
					p_TypeDeclaration116=p_TypeDeclaration();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, p_TypeDeclaration116.getTree());

					}
					break;

			}

			// XQueryParser.g:434:47: ( p_AllowingEmpty )?
			int alt53=2;
			int LA53_0 = input.LA(1);
			if ( (LA53_0==ALLOWING) ) {
				alt53=1;
			}
			switch (alt53) {
				case 1 :
					// XQueryParser.g:434:47: p_AllowingEmpty
					{
					pushFollow(FOLLOW_p_AllowingEmpty_in_p_ForBinding3869);
					p_AllowingEmpty117=p_AllowingEmpty();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, p_AllowingEmpty117.getTree());

					}
					break;

			}

			// XQueryParser.g:434:64: ( p_PositionalVar )?
			int alt54=2;
			int LA54_0 = input.LA(1);
			if ( (LA54_0==AT) ) {
				alt54=1;
			}
			switch (alt54) {
				case 1 :
					// XQueryParser.g:434:64: p_PositionalVar
					{
					pushFollow(FOLLOW_p_PositionalVar_in_p_ForBinding3872);
					p_PositionalVar118=p_PositionalVar();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, p_PositionalVar118.getTree());

					}
					break;

			}

			// XQueryParser.g:434:81: ( p_FTScoreVar )?
			int alt55=2;
			int LA55_0 = input.LA(1);
			if ( (LA55_0==SCORE) ) {
				alt55=1;
			}
			switch (alt55) {
				case 1 :
					// XQueryParser.g:434:81: p_FTScoreVar
					{
					pushFollow(FOLLOW_p_FTScoreVar_in_p_ForBinding3875);
					p_FTScoreVar119=p_FTScoreVar();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, p_FTScoreVar119.getTree());

					}
					break;

			}

			k=(CommonToken)match(input,IN,FOLLOW_IN_in_p_ForBinding3880); if (state.failed) return retval;
			if ( state.backtracking==0 ) {
			k_tree = (XQDTCommonTree)adaptor.create(k);
			adaptor.addChild(root_0, k_tree);
			}

			if ( state.backtracking==0 ) {ak(k);}
			pushFollow(FOLLOW_p_ExprSingle_in_p_ForBinding3884);
			p_ExprSingle120=p_ExprSingle(true);
			state._fsp--;
			if (state.failed) return retval;
			if ( state.backtracking==0 ) adaptor.addChild(root_0, p_ExprSingle120.getTree());

			}

			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (XQDTCommonTree)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
			retval.tree = (XQDTCommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "p_ForBinding"


	public static class p_AllowingEmpty_return extends ParserRuleReturnScope {
		XQDTCommonTree tree;
		@Override
		public XQDTCommonTree getTree() { return tree; }
	};


	// $ANTLR start "p_AllowingEmpty"
	// XQueryParser.g:438:1: p_AllowingEmpty : k= ALLOWING k= EMPTY ;
	public final XQueryParser.p_AllowingEmpty_return p_AllowingEmpty() throws RecognitionException {
		XQueryParser.p_AllowingEmpty_return retval = new XQueryParser.p_AllowingEmpty_return();
		retval.start = input.LT(1);

		XQDTCommonTree root_0 = null;

		CommonToken k=null;

		XQDTCommonTree k_tree=null;

		try {
			// XQueryParser.g:439:9: (k= ALLOWING k= EMPTY )
			// XQueryParser.g:439:11: k= ALLOWING k= EMPTY
			{
			root_0 = (XQDTCommonTree)adaptor.nil();


			k=(CommonToken)match(input,ALLOWING,FOLLOW_ALLOWING_in_p_AllowingEmpty3913); if (state.failed) return retval;
			if ( state.backtracking==0 ) {
			k_tree = (XQDTCommonTree)adaptor.create(k);
			adaptor.addChild(root_0, k_tree);
			}

			if ( state.backtracking==0 ) {ak(k);}
			k=(CommonToken)match(input,EMPTY,FOLLOW_EMPTY_in_p_AllowingEmpty3919); if (state.failed) return retval;
			if ( state.backtracking==0 ) {
			k_tree = (XQDTCommonTree)adaptor.create(k);
			adaptor.addChild(root_0, k_tree);
			}

			if ( state.backtracking==0 ) {ak(k);}
			}

			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (XQDTCommonTree)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
			retval.tree = (XQDTCommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "p_AllowingEmpty"


	public static class p_PositionalVar_return extends ParserRuleReturnScope {
		XQDTCommonTree tree;
		@Override
		public XQDTCommonTree getTree() { return tree; }
	};


	// $ANTLR start "p_PositionalVar"
	// XQueryParser.g:443:1: p_PositionalVar : k= AT DOLLAR p_VarName ;
	public final XQueryParser.p_PositionalVar_return p_PositionalVar() throws RecognitionException {
		XQueryParser.p_PositionalVar_return retval = new XQueryParser.p_PositionalVar_return();
		retval.start = input.LT(1);

		XQDTCommonTree root_0 = null;

		CommonToken k=null;
		CommonToken DOLLAR121=null;
		ParserRuleReturnScope p_VarName122 =null;

		XQDTCommonTree k_tree=null;
		XQDTCommonTree DOLLAR121_tree=null;

		try {
			// XQueryParser.g:444:9: (k= AT DOLLAR p_VarName )
			// XQueryParser.g:444:11: k= AT DOLLAR p_VarName
			{
			root_0 = (XQDTCommonTree)adaptor.nil();


			k=(CommonToken)match(input,AT,FOLLOW_AT_in_p_PositionalVar3949); if (state.failed) return retval;
			if ( state.backtracking==0 ) {
			k_tree = (XQDTCommonTree)adaptor.create(k);
			adaptor.addChild(root_0, k_tree);
			}

			if ( state.backtracking==0 ) {ak(k);}
			DOLLAR121=(CommonToken)match(input,DOLLAR,FOLLOW_DOLLAR_in_p_PositionalVar3953); if (state.failed) return retval;
			if ( state.backtracking==0 ) {
			DOLLAR121_tree = (XQDTCommonTree)adaptor.create(DOLLAR121);
			adaptor.addChild(root_0, DOLLAR121_tree);
			}

			pushFollow(FOLLOW_p_VarName_in_p_PositionalVar3955);
			p_VarName122=p_VarName();
			state._fsp--;
			if (state.failed) return retval;
			if ( state.backtracking==0 ) adaptor.addChild(root_0, p_VarName122.getTree());

			}

			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (XQDTCommonTree)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
			retval.tree = (XQDTCommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "p_PositionalVar"


	public static class p_LetClause_return extends ParserRuleReturnScope {
		XQDTCommonTree tree;
		@Override
		public XQDTCommonTree getTree() { return tree; }
	};


	// $ANTLR start "p_LetClause"
	// XQueryParser.g:448:1: p_LetClause : k= LET p_LetBinding ( COMMA p_LetBinding )* ;
	public final XQueryParser.p_LetClause_return p_LetClause() throws RecognitionException {
		XQueryParser.p_LetClause_return retval = new XQueryParser.p_LetClause_return();
		retval.start = input.LT(1);

		XQDTCommonTree root_0 = null;

		CommonToken k=null;
		CommonToken COMMA124=null;
		ParserRuleReturnScope p_LetBinding123 =null;
		ParserRuleReturnScope p_LetBinding125 =null;

		XQDTCommonTree k_tree=null;
		XQDTCommonTree COMMA124_tree=null;

		try {
			// XQueryParser.g:449:9: (k= LET p_LetBinding ( COMMA p_LetBinding )* )
			// XQueryParser.g:449:11: k= LET p_LetBinding ( COMMA p_LetBinding )*
			{
			root_0 = (XQDTCommonTree)adaptor.nil();


			k=(CommonToken)match(input,LET,FOLLOW_LET_in_p_LetClause3983); if (state.failed) return retval;
			if ( state.backtracking==0 ) {
			k_tree = (XQDTCommonTree)adaptor.create(k);
			adaptor.addChild(root_0, k_tree);
			}

			if ( state.backtracking==0 ) {ak(k);}
			pushFollow(FOLLOW_p_LetBinding_in_p_LetClause3987);
			p_LetBinding123=p_LetBinding();
			state._fsp--;
			if (state.failed) return retval;
			if ( state.backtracking==0 ) adaptor.addChild(root_0, p_LetBinding123.getTree());

			// XQueryParser.g:449:40: ( COMMA p_LetBinding )*
			loop56:
			while (true) {
				int alt56=2;
				int LA56_0 = input.LA(1);
				if ( (LA56_0==COMMA) ) {
					alt56=1;
				}

				switch (alt56) {
				case 1 :
					// XQueryParser.g:449:41: COMMA p_LetBinding
					{
					COMMA124=(CommonToken)match(input,COMMA,FOLLOW_COMMA_in_p_LetClause3990); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					COMMA124_tree = (XQDTCommonTree)adaptor.create(COMMA124);
					adaptor.addChild(root_0, COMMA124_tree);
					}

					pushFollow(FOLLOW_p_LetBinding_in_p_LetClause3992);
					p_LetBinding125=p_LetBinding();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, p_LetBinding125.getTree());

					}
					break;

				default :
					break loop56;
				}
			}

			}

			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (XQDTCommonTree)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
			retval.tree = (XQDTCommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "p_LetClause"


	public static class p_LetBinding_return extends ParserRuleReturnScope {
		XQDTCommonTree tree;
		@Override
		public XQDTCommonTree getTree() { return tree; }
	};


	// $ANTLR start "p_LetBinding"
	// XQueryParser.g:454:1: p_LetBinding : ( ( DOLLAR p_VarName ( p_TypeDeclaration )? ) | p_FTScoreVar ) BIND p_ExprSingle[true] ;
	public final XQueryParser.p_LetBinding_return p_LetBinding() throws RecognitionException {
		XQueryParser.p_LetBinding_return retval = new XQueryParser.p_LetBinding_return();
		retval.start = input.LT(1);

		XQDTCommonTree root_0 = null;

		CommonToken DOLLAR126=null;
		CommonToken BIND130=null;
		ParserRuleReturnScope p_VarName127 =null;
		ParserRuleReturnScope p_TypeDeclaration128 =null;
		ParserRuleReturnScope p_FTScoreVar129 =null;
		ParserRuleReturnScope p_ExprSingle131 =null;

		XQDTCommonTree DOLLAR126_tree=null;
		XQDTCommonTree BIND130_tree=null;

		try {
			// XQueryParser.g:455:9: ( ( ( DOLLAR p_VarName ( p_TypeDeclaration )? ) | p_FTScoreVar ) BIND p_ExprSingle[true] )
			// XQueryParser.g:455:11: ( ( DOLLAR p_VarName ( p_TypeDeclaration )? ) | p_FTScoreVar ) BIND p_ExprSingle[true]
			{
			root_0 = (XQDTCommonTree)adaptor.nil();


			// XQueryParser.g:455:11: ( ( DOLLAR p_VarName ( p_TypeDeclaration )? ) | p_FTScoreVar )
			int alt58=2;
			int LA58_0 = input.LA(1);
			if ( (LA58_0==DOLLAR) ) {
				alt58=1;
			}
			else if ( (LA58_0==SCORE) ) {
				alt58=2;
			}

			else {
				if (state.backtracking>0) {state.failed=true; return retval;}
				NoViableAltException nvae =
					new NoViableAltException("", 58, 0, input);
				throw nvae;
			}

			switch (alt58) {
				case 1 :
					// XQueryParser.g:455:13: ( DOLLAR p_VarName ( p_TypeDeclaration )? )
					{
					// XQueryParser.g:455:13: ( DOLLAR p_VarName ( p_TypeDeclaration )? )
					// XQueryParser.g:455:14: DOLLAR p_VarName ( p_TypeDeclaration )?
					{
					DOLLAR126=(CommonToken)match(input,DOLLAR,FOLLOW_DOLLAR_in_p_LetBinding4024); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					DOLLAR126_tree = (XQDTCommonTree)adaptor.create(DOLLAR126);
					adaptor.addChild(root_0, DOLLAR126_tree);
					}

					pushFollow(FOLLOW_p_VarName_in_p_LetBinding4026);
					p_VarName127=p_VarName();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, p_VarName127.getTree());

					// XQueryParser.g:455:31: ( p_TypeDeclaration )?
					int alt57=2;
					int LA57_0 = input.LA(1);
					if ( (LA57_0==AS) ) {
						alt57=1;
					}
					switch (alt57) {
						case 1 :
							// XQueryParser.g:455:31: p_TypeDeclaration
							{
							pushFollow(FOLLOW_p_TypeDeclaration_in_p_LetBinding4028);
							p_TypeDeclaration128=p_TypeDeclaration();
							state._fsp--;
							if (state.failed) return retval;
							if ( state.backtracking==0 ) adaptor.addChild(root_0, p_TypeDeclaration128.getTree());

							}
							break;

					}

					}

					}
					break;
				case 2 :
					// XQueryParser.g:455:53: p_FTScoreVar
					{
					pushFollow(FOLLOW_p_FTScoreVar_in_p_LetBinding4034);
					p_FTScoreVar129=p_FTScoreVar();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, p_FTScoreVar129.getTree());

					}
					break;

			}

			BIND130=(CommonToken)match(input,BIND,FOLLOW_BIND_in_p_LetBinding4038); if (state.failed) return retval;
			if ( state.backtracking==0 ) {
			BIND130_tree = (XQDTCommonTree)adaptor.create(BIND130);
			adaptor.addChild(root_0, BIND130_tree);
			}

			pushFollow(FOLLOW_p_ExprSingle_in_p_LetBinding4040);
			p_ExprSingle131=p_ExprSingle(true);
			state._fsp--;
			if (state.failed) return retval;
			if ( state.backtracking==0 ) adaptor.addChild(root_0, p_ExprSingle131.getTree());

			}

			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (XQDTCommonTree)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
			retval.tree = (XQDTCommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "p_LetBinding"


	public static class p_WindowClause_return extends ParserRuleReturnScope {
		XQDTCommonTree tree;
		@Override
		public XQDTCommonTree getTree() { return tree; }
	};


	// $ANTLR start "p_WindowClause"
	// XQueryParser.g:459:1: p_WindowClause : k= FOR ( p_TumblingWindowClause | p_SlidingWindowClause ) ;
	public final XQueryParser.p_WindowClause_return p_WindowClause() throws RecognitionException {
		XQueryParser.p_WindowClause_return retval = new XQueryParser.p_WindowClause_return();
		retval.start = input.LT(1);

		XQDTCommonTree root_0 = null;

		CommonToken k=null;
		ParserRuleReturnScope p_TumblingWindowClause132 =null;
		ParserRuleReturnScope p_SlidingWindowClause133 =null;

		XQDTCommonTree k_tree=null;

		try {
			// XQueryParser.g:460:9: (k= FOR ( p_TumblingWindowClause | p_SlidingWindowClause ) )
			// XQueryParser.g:460:11: k= FOR ( p_TumblingWindowClause | p_SlidingWindowClause )
			{
			root_0 = (XQDTCommonTree)adaptor.nil();


			k=(CommonToken)match(input,FOR,FOLLOW_FOR_in_p_WindowClause4069); if (state.failed) return retval;
			if ( state.backtracking==0 ) {
			k_tree = (XQDTCommonTree)adaptor.create(k);
			adaptor.addChild(root_0, k_tree);
			}

			if ( state.backtracking==0 ) {ak(k);}
			// XQueryParser.g:460:27: ( p_TumblingWindowClause | p_SlidingWindowClause )
			int alt59=2;
			int LA59_0 = input.LA(1);
			if ( (LA59_0==TUMBLING) ) {
				alt59=1;
			}
			else if ( (LA59_0==SLIDING) ) {
				alt59=2;
			}

			else {
				if (state.backtracking>0) {state.failed=true; return retval;}
				NoViableAltException nvae =
					new NoViableAltException("", 59, 0, input);
				throw nvae;
			}

			switch (alt59) {
				case 1 :
					// XQueryParser.g:460:28: p_TumblingWindowClause
					{
					pushFollow(FOLLOW_p_TumblingWindowClause_in_p_WindowClause4074);
					p_TumblingWindowClause132=p_TumblingWindowClause();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, p_TumblingWindowClause132.getTree());

					}
					break;
				case 2 :
					// XQueryParser.g:460:53: p_SlidingWindowClause
					{
					pushFollow(FOLLOW_p_SlidingWindowClause_in_p_WindowClause4078);
					p_SlidingWindowClause133=p_SlidingWindowClause();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, p_SlidingWindowClause133.getTree());

					}
					break;

			}

			}

			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (XQDTCommonTree)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
			retval.tree = (XQDTCommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "p_WindowClause"


	public static class p_TumblingWindowClause_return extends ParserRuleReturnScope {
		XQDTCommonTree tree;
		@Override
		public XQDTCommonTree getTree() { return tree; }
	};


	// $ANTLR start "p_TumblingWindowClause"
	// XQueryParser.g:464:1: p_TumblingWindowClause : k= TUMBLING k= WINDOW DOLLAR p_VarName ( p_TypeDeclaration )? k= IN p_ExprSingle[true] p_WindowStartCondition ( p_WindowEndCondition )? ;
	public final XQueryParser.p_TumblingWindowClause_return p_TumblingWindowClause() throws RecognitionException {
		XQueryParser.p_TumblingWindowClause_return retval = new XQueryParser.p_TumblingWindowClause_return();
		retval.start = input.LT(1);

		XQDTCommonTree root_0 = null;

		CommonToken k=null;
		CommonToken DOLLAR134=null;
		ParserRuleReturnScope p_VarName135 =null;
		ParserRuleReturnScope p_TypeDeclaration136 =null;
		ParserRuleReturnScope p_ExprSingle137 =null;
		ParserRuleReturnScope p_WindowStartCondition138 =null;
		ParserRuleReturnScope p_WindowEndCondition139 =null;

		XQDTCommonTree k_tree=null;
		XQDTCommonTree DOLLAR134_tree=null;

		try {
			// XQueryParser.g:465:9: (k= TUMBLING k= WINDOW DOLLAR p_VarName ( p_TypeDeclaration )? k= IN p_ExprSingle[true] p_WindowStartCondition ( p_WindowEndCondition )? )
			// XQueryParser.g:465:11: k= TUMBLING k= WINDOW DOLLAR p_VarName ( p_TypeDeclaration )? k= IN p_ExprSingle[true] p_WindowStartCondition ( p_WindowEndCondition )?
			{
			root_0 = (XQDTCommonTree)adaptor.nil();


			k=(CommonToken)match(input,TUMBLING,FOLLOW_TUMBLING_in_p_TumblingWindowClause4115); if (state.failed) return retval;
			if ( state.backtracking==0 ) {
			k_tree = (XQDTCommonTree)adaptor.create(k);
			adaptor.addChild(root_0, k_tree);
			}

			if ( state.backtracking==0 ) {ak(k);}
			k=(CommonToken)match(input,WINDOW,FOLLOW_WINDOW_in_p_TumblingWindowClause4121); if (state.failed) return retval;
			if ( state.backtracking==0 ) {
			k_tree = (XQDTCommonTree)adaptor.create(k);
			adaptor.addChild(root_0, k_tree);
			}

			if ( state.backtracking==0 ) {ak(k);}
			DOLLAR134=(CommonToken)match(input,DOLLAR,FOLLOW_DOLLAR_in_p_TumblingWindowClause4125); if (state.failed) return retval;
			if ( state.backtracking==0 ) {
			DOLLAR134_tree = (XQDTCommonTree)adaptor.create(DOLLAR134);
			adaptor.addChild(root_0, DOLLAR134_tree);
			}

			pushFollow(FOLLOW_p_VarName_in_p_TumblingWindowClause4127);
			p_VarName135=p_VarName();
			state._fsp--;
			if (state.failed) return retval;
			if ( state.backtracking==0 ) adaptor.addChild(root_0, p_VarName135.getTree());

			// XQueryParser.g:465:68: ( p_TypeDeclaration )?
			int alt60=2;
			int LA60_0 = input.LA(1);
			if ( (LA60_0==AS) ) {
				alt60=1;
			}
			switch (alt60) {
				case 1 :
					// XQueryParser.g:465:68: p_TypeDeclaration
					{
					pushFollow(FOLLOW_p_TypeDeclaration_in_p_TumblingWindowClause4129);
					p_TypeDeclaration136=p_TypeDeclaration();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, p_TypeDeclaration136.getTree());

					}
					break;

			}

			k=(CommonToken)match(input,IN,FOLLOW_IN_in_p_TumblingWindowClause4134); if (state.failed) return retval;
			if ( state.backtracking==0 ) {
			k_tree = (XQDTCommonTree)adaptor.create(k);
			adaptor.addChild(root_0, k_tree);
			}

			if ( state.backtracking==0 ) {ak(k);}
			pushFollow(FOLLOW_p_ExprSingle_in_p_TumblingWindowClause4138);
			p_ExprSingle137=p_ExprSingle(true);
			state._fsp--;
			if (state.failed) return retval;
			if ( state.backtracking==0 ) adaptor.addChild(root_0, p_ExprSingle137.getTree());

			pushFollow(FOLLOW_p_WindowStartCondition_in_p_TumblingWindowClause4141);
			p_WindowStartCondition138=p_WindowStartCondition();
			state._fsp--;
			if (state.failed) return retval;
			if ( state.backtracking==0 ) adaptor.addChild(root_0, p_WindowStartCondition138.getTree());

			// XQueryParser.g:465:144: ( p_WindowEndCondition )?
			int alt61=2;
			int LA61_0 = input.LA(1);
			if ( (LA61_0==END||LA61_0==ONLY) ) {
				alt61=1;
			}
			switch (alt61) {
				case 1 :
					// XQueryParser.g:465:144: p_WindowEndCondition
					{
					pushFollow(FOLLOW_p_WindowEndCondition_in_p_TumblingWindowClause4143);
					p_WindowEndCondition139=p_WindowEndCondition();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, p_WindowEndCondition139.getTree());

					}
					break;

			}

			}

			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (XQDTCommonTree)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
			retval.tree = (XQDTCommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "p_TumblingWindowClause"


	public static class p_SlidingWindowClause_return extends ParserRuleReturnScope {
		XQDTCommonTree tree;
		@Override
		public XQDTCommonTree getTree() { return tree; }
	};


	// $ANTLR start "p_SlidingWindowClause"
	// XQueryParser.g:469:1: p_SlidingWindowClause : k= SLIDING k= WINDOW DOLLAR p_VarName ( p_TypeDeclaration )? k= IN p_ExprSingle[true] p_WindowStartCondition ( p_WindowEndCondition )? ;
	public final XQueryParser.p_SlidingWindowClause_return p_SlidingWindowClause() throws RecognitionException {
		XQueryParser.p_SlidingWindowClause_return retval = new XQueryParser.p_SlidingWindowClause_return();
		retval.start = input.LT(1);

		XQDTCommonTree root_0 = null;

		CommonToken k=null;
		CommonToken DOLLAR140=null;
		ParserRuleReturnScope p_VarName141 =null;
		ParserRuleReturnScope p_TypeDeclaration142 =null;
		ParserRuleReturnScope p_ExprSingle143 =null;
		ParserRuleReturnScope p_WindowStartCondition144 =null;
		ParserRuleReturnScope p_WindowEndCondition145 =null;

		XQDTCommonTree k_tree=null;
		XQDTCommonTree DOLLAR140_tree=null;

		try {
			// XQueryParser.g:470:9: (k= SLIDING k= WINDOW DOLLAR p_VarName ( p_TypeDeclaration )? k= IN p_ExprSingle[true] p_WindowStartCondition ( p_WindowEndCondition )? )
			// XQueryParser.g:470:11: k= SLIDING k= WINDOW DOLLAR p_VarName ( p_TypeDeclaration )? k= IN p_ExprSingle[true] p_WindowStartCondition ( p_WindowEndCondition )?
			{
			root_0 = (XQDTCommonTree)adaptor.nil();


			k=(CommonToken)match(input,SLIDING,FOLLOW_SLIDING_in_p_SlidingWindowClause4172); if (state.failed) return retval;
			if ( state.backtracking==0 ) {
			k_tree = (XQDTCommonTree)adaptor.create(k);
			adaptor.addChild(root_0, k_tree);
			}

			if ( state.backtracking==0 ) {ak(k);}
			k=(CommonToken)match(input,WINDOW,FOLLOW_WINDOW_in_p_SlidingWindowClause4178); if (state.failed) return retval;
			if ( state.backtracking==0 ) {
			k_tree = (XQDTCommonTree)adaptor.create(k);
			adaptor.addChild(root_0, k_tree);
			}

			if ( state.backtracking==0 ) {ak(k);}
			DOLLAR140=(CommonToken)match(input,DOLLAR,FOLLOW_DOLLAR_in_p_SlidingWindowClause4182); if (state.failed) return retval;
			if ( state.backtracking==0 ) {
			DOLLAR140_tree = (XQDTCommonTree)adaptor.create(DOLLAR140);
			adaptor.addChild(root_0, DOLLAR140_tree);
			}

			pushFollow(FOLLOW_p_VarName_in_p_SlidingWindowClause4184);
			p_VarName141=p_VarName();
			state._fsp--;
			if (state.failed) return retval;
			if ( state.backtracking==0 ) adaptor.addChild(root_0, p_VarName141.getTree());

			// XQueryParser.g:470:67: ( p_TypeDeclaration )?
			int alt62=2;
			int LA62_0 = input.LA(1);
			if ( (LA62_0==AS) ) {
				alt62=1;
			}
			switch (alt62) {
				case 1 :
					// XQueryParser.g:470:67: p_TypeDeclaration
					{
					pushFollow(FOLLOW_p_TypeDeclaration_in_p_SlidingWindowClause4186);
					p_TypeDeclaration142=p_TypeDeclaration();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, p_TypeDeclaration142.getTree());

					}
					break;

			}

			k=(CommonToken)match(input,IN,FOLLOW_IN_in_p_SlidingWindowClause4191); if (state.failed) return retval;
			if ( state.backtracking==0 ) {
			k_tree = (XQDTCommonTree)adaptor.create(k);
			adaptor.addChild(root_0, k_tree);
			}

			if ( state.backtracking==0 ) {ak(k);}
			pushFollow(FOLLOW_p_ExprSingle_in_p_SlidingWindowClause4195);
			p_ExprSingle143=p_ExprSingle(true);
			state._fsp--;
			if (state.failed) return retval;
			if ( state.backtracking==0 ) adaptor.addChild(root_0, p_ExprSingle143.getTree());

			pushFollow(FOLLOW_p_WindowStartCondition_in_p_SlidingWindowClause4198);
			p_WindowStartCondition144=p_WindowStartCondition();
			state._fsp--;
			if (state.failed) return retval;
			if ( state.backtracking==0 ) adaptor.addChild(root_0, p_WindowStartCondition144.getTree());

			// XQueryParser.g:470:143: ( p_WindowEndCondition )?
			int alt63=2;
			int LA63_0 = input.LA(1);
			if ( (LA63_0==END||LA63_0==ONLY) ) {
				alt63=1;
			}
			switch (alt63) {
				case 1 :
					// XQueryParser.g:470:143: p_WindowEndCondition
					{
					pushFollow(FOLLOW_p_WindowEndCondition_in_p_SlidingWindowClause4200);
					p_WindowEndCondition145=p_WindowEndCondition();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, p_WindowEndCondition145.getTree());

					}
					break;

			}

			}

			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (XQDTCommonTree)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
			retval.tree = (XQDTCommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "p_SlidingWindowClause"


	public static class p_WindowStartCondition_return extends ParserRuleReturnScope {
		XQDTCommonTree tree;
		@Override
		public XQDTCommonTree getTree() { return tree; }
	};


	// $ANTLR start "p_WindowStartCondition"
	// XQueryParser.g:474:1: p_WindowStartCondition : k= START p_WindowVars k= WHEN p_ExprSingle[true] ;
	public final XQueryParser.p_WindowStartCondition_return p_WindowStartCondition() throws RecognitionException {
		XQueryParser.p_WindowStartCondition_return retval = new XQueryParser.p_WindowStartCondition_return();
		retval.start = input.LT(1);

		XQDTCommonTree root_0 = null;

		CommonToken k=null;
		ParserRuleReturnScope p_WindowVars146 =null;
		ParserRuleReturnScope p_ExprSingle147 =null;

		XQDTCommonTree k_tree=null;

		try {
			// XQueryParser.g:475:9: (k= START p_WindowVars k= WHEN p_ExprSingle[true] )
			// XQueryParser.g:475:11: k= START p_WindowVars k= WHEN p_ExprSingle[true]
			{
			root_0 = (XQDTCommonTree)adaptor.nil();


			k=(CommonToken)match(input,START,FOLLOW_START_in_p_WindowStartCondition4229); if (state.failed) return retval;
			if ( state.backtracking==0 ) {
			k_tree = (XQDTCommonTree)adaptor.create(k);
			adaptor.addChild(root_0, k_tree);
			}

			if ( state.backtracking==0 ) {ak(k);}
			pushFollow(FOLLOW_p_WindowVars_in_p_WindowStartCondition4233);
			p_WindowVars146=p_WindowVars();
			state._fsp--;
			if (state.failed) return retval;
			if ( state.backtracking==0 ) adaptor.addChild(root_0, p_WindowVars146.getTree());

			k=(CommonToken)match(input,WHEN,FOLLOW_WHEN_in_p_WindowStartCondition4237); if (state.failed) return retval;
			if ( state.backtracking==0 ) {
			k_tree = (XQDTCommonTree)adaptor.create(k);
			adaptor.addChild(root_0, k_tree);
			}

			if ( state.backtracking==0 ) {ak(k);}
			pushFollow(FOLLOW_p_ExprSingle_in_p_WindowStartCondition4241);
			p_ExprSingle147=p_ExprSingle(true);
			state._fsp--;
			if (state.failed) return retval;
			if ( state.backtracking==0 ) adaptor.addChild(root_0, p_ExprSingle147.getTree());

			}

			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (XQDTCommonTree)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
			retval.tree = (XQDTCommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "p_WindowStartCondition"


	public static class p_WindowEndCondition_return extends ParserRuleReturnScope {
		XQDTCommonTree tree;
		@Override
		public XQDTCommonTree getTree() { return tree; }
	};


	// $ANTLR start "p_WindowEndCondition"
	// XQueryParser.g:479:1: p_WindowEndCondition : (k= ONLY )? k= END p_WindowVars k= WHEN p_ExprSingle[true] ;
	public final XQueryParser.p_WindowEndCondition_return p_WindowEndCondition() throws RecognitionException {
		XQueryParser.p_WindowEndCondition_return retval = new XQueryParser.p_WindowEndCondition_return();
		retval.start = input.LT(1);

		XQDTCommonTree root_0 = null;

		CommonToken k=null;
		ParserRuleReturnScope p_WindowVars148 =null;
		ParserRuleReturnScope p_ExprSingle149 =null;

		XQDTCommonTree k_tree=null;

		try {
			// XQueryParser.g:480:9: ( (k= ONLY )? k= END p_WindowVars k= WHEN p_ExprSingle[true] )
			// XQueryParser.g:480:11: (k= ONLY )? k= END p_WindowVars k= WHEN p_ExprSingle[true]
			{
			root_0 = (XQDTCommonTree)adaptor.nil();


			// XQueryParser.g:480:11: (k= ONLY )?
			int alt64=2;
			int LA64_0 = input.LA(1);
			if ( (LA64_0==ONLY) ) {
				alt64=1;
			}
			switch (alt64) {
				case 1 :
					// XQueryParser.g:480:12: k= ONLY
					{
					k=(CommonToken)match(input,ONLY,FOLLOW_ONLY_in_p_WindowEndCondition4271); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					k_tree = (XQDTCommonTree)adaptor.create(k);
					adaptor.addChild(root_0, k_tree);
					}

					if ( state.backtracking==0 ) {ak(k);}
					}
					break;

			}

			k=(CommonToken)match(input,END,FOLLOW_END_in_p_WindowEndCondition4279); if (state.failed) return retval;
			if ( state.backtracking==0 ) {
			k_tree = (XQDTCommonTree)adaptor.create(k);
			adaptor.addChild(root_0, k_tree);
			}

			if ( state.backtracking==0 ) {ak(k);}
			pushFollow(FOLLOW_p_WindowVars_in_p_WindowEndCondition4283);
			p_WindowVars148=p_WindowVars();
			state._fsp--;
			if (state.failed) return retval;
			if ( state.backtracking==0 ) adaptor.addChild(root_0, p_WindowVars148.getTree());

			k=(CommonToken)match(input,WHEN,FOLLOW_WHEN_in_p_WindowEndCondition4287); if (state.failed) return retval;
			if ( state.backtracking==0 ) {
			k_tree = (XQDTCommonTree)adaptor.create(k);
			adaptor.addChild(root_0, k_tree);
			}

			if ( state.backtracking==0 ) {ak(k);}
			pushFollow(FOLLOW_p_ExprSingle_in_p_WindowEndCondition4291);
			p_ExprSingle149=p_ExprSingle(true);
			state._fsp--;
			if (state.failed) return retval;
			if ( state.backtracking==0 ) adaptor.addChild(root_0, p_ExprSingle149.getTree());

			}

			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (XQDTCommonTree)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
			retval.tree = (XQDTCommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "p_WindowEndCondition"


	public static class p_WindowVars_return extends ParserRuleReturnScope {
		XQDTCommonTree tree;
		@Override
		public XQDTCommonTree getTree() { return tree; }
	};


	// $ANTLR start "p_WindowVars"
	// XQueryParser.g:484:1: p_WindowVars : ( DOLLAR p_CurrentItem )? ( p_PositionalVar )? (k= PREVIOUS DOLLAR p_PreviousItem )? (k= NEXT DOLLAR p_NextItem )? ;
	public final XQueryParser.p_WindowVars_return p_WindowVars() throws RecognitionException {
		XQueryParser.p_WindowVars_return retval = new XQueryParser.p_WindowVars_return();
		retval.start = input.LT(1);

		XQDTCommonTree root_0 = null;

		CommonToken k=null;
		CommonToken DOLLAR150=null;
		CommonToken DOLLAR153=null;
		CommonToken DOLLAR155=null;
		ParserRuleReturnScope p_CurrentItem151 =null;
		ParserRuleReturnScope p_PositionalVar152 =null;
		ParserRuleReturnScope p_PreviousItem154 =null;
		ParserRuleReturnScope p_NextItem156 =null;

		XQDTCommonTree k_tree=null;
		XQDTCommonTree DOLLAR150_tree=null;
		XQDTCommonTree DOLLAR153_tree=null;
		XQDTCommonTree DOLLAR155_tree=null;

		try {
			// XQueryParser.g:485:9: ( ( DOLLAR p_CurrentItem )? ( p_PositionalVar )? (k= PREVIOUS DOLLAR p_PreviousItem )? (k= NEXT DOLLAR p_NextItem )? )
			// XQueryParser.g:485:11: ( DOLLAR p_CurrentItem )? ( p_PositionalVar )? (k= PREVIOUS DOLLAR p_PreviousItem )? (k= NEXT DOLLAR p_NextItem )?
			{
			root_0 = (XQDTCommonTree)adaptor.nil();


			// XQueryParser.g:485:11: ( DOLLAR p_CurrentItem )?
			int alt65=2;
			int LA65_0 = input.LA(1);
			if ( (LA65_0==DOLLAR) ) {
				alt65=1;
			}
			switch (alt65) {
				case 1 :
					// XQueryParser.g:485:12: DOLLAR p_CurrentItem
					{
					DOLLAR150=(CommonToken)match(input,DOLLAR,FOLLOW_DOLLAR_in_p_WindowVars4319); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					DOLLAR150_tree = (XQDTCommonTree)adaptor.create(DOLLAR150);
					adaptor.addChild(root_0, DOLLAR150_tree);
					}

					pushFollow(FOLLOW_p_CurrentItem_in_p_WindowVars4321);
					p_CurrentItem151=p_CurrentItem();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, p_CurrentItem151.getTree());

					}
					break;

			}

			// XQueryParser.g:485:35: ( p_PositionalVar )?
			int alt66=2;
			int LA66_0 = input.LA(1);
			if ( (LA66_0==AT) ) {
				alt66=1;
			}
			switch (alt66) {
				case 1 :
					// XQueryParser.g:485:35: p_PositionalVar
					{
					pushFollow(FOLLOW_p_PositionalVar_in_p_WindowVars4325);
					p_PositionalVar152=p_PositionalVar();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, p_PositionalVar152.getTree());

					}
					break;

			}

			// XQueryParser.g:485:52: (k= PREVIOUS DOLLAR p_PreviousItem )?
			int alt67=2;
			int LA67_0 = input.LA(1);
			if ( (LA67_0==PREVIOUS) ) {
				alt67=1;
			}
			switch (alt67) {
				case 1 :
					// XQueryParser.g:485:53: k= PREVIOUS DOLLAR p_PreviousItem
					{
					k=(CommonToken)match(input,PREVIOUS,FOLLOW_PREVIOUS_in_p_WindowVars4331); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					k_tree = (XQDTCommonTree)adaptor.create(k);
					adaptor.addChild(root_0, k_tree);
					}

					if ( state.backtracking==0 ) {ak(k);}
					DOLLAR153=(CommonToken)match(input,DOLLAR,FOLLOW_DOLLAR_in_p_WindowVars4335); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					DOLLAR153_tree = (XQDTCommonTree)adaptor.create(DOLLAR153);
					adaptor.addChild(root_0, DOLLAR153_tree);
					}

					pushFollow(FOLLOW_p_PreviousItem_in_p_WindowVars4337);
					p_PreviousItem154=p_PreviousItem();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, p_PreviousItem154.getTree());

					}
					break;

			}

			// XQueryParser.g:485:98: (k= NEXT DOLLAR p_NextItem )?
			int alt68=2;
			int LA68_0 = input.LA(1);
			if ( (LA68_0==NEXT) ) {
				alt68=1;
			}
			switch (alt68) {
				case 1 :
					// XQueryParser.g:485:99: k= NEXT DOLLAR p_NextItem
					{
					k=(CommonToken)match(input,NEXT,FOLLOW_NEXT_in_p_WindowVars4344); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					k_tree = (XQDTCommonTree)adaptor.create(k);
					adaptor.addChild(root_0, k_tree);
					}

					if ( state.backtracking==0 ) {ak(k);}
					DOLLAR155=(CommonToken)match(input,DOLLAR,FOLLOW_DOLLAR_in_p_WindowVars4348); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					DOLLAR155_tree = (XQDTCommonTree)adaptor.create(DOLLAR155);
					adaptor.addChild(root_0, DOLLAR155_tree);
					}

					pushFollow(FOLLOW_p_NextItem_in_p_WindowVars4350);
					p_NextItem156=p_NextItem();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, p_NextItem156.getTree());

					}
					break;

			}

			}

			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (XQDTCommonTree)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
			retval.tree = (XQDTCommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "p_WindowVars"


	public static class p_CurrentItem_return extends ParserRuleReturnScope {
		XQDTCommonTree tree;
		@Override
		public XQDTCommonTree getTree() { return tree; }
	};


	// $ANTLR start "p_CurrentItem"
	// XQueryParser.g:489:1: p_CurrentItem : p_QName ;
	public final XQueryParser.p_CurrentItem_return p_CurrentItem() throws RecognitionException {
		XQueryParser.p_CurrentItem_return retval = new XQueryParser.p_CurrentItem_return();
		retval.start = input.LT(1);

		XQDTCommonTree root_0 = null;

		ParserRuleReturnScope p_QName157 =null;


		try {
			// XQueryParser.g:490:9: ( p_QName )
			// XQueryParser.g:490:11: p_QName
			{
			root_0 = (XQDTCommonTree)adaptor.nil();


			pushFollow(FOLLOW_p_QName_in_p_CurrentItem4378);
			p_QName157=p_QName();
			state._fsp--;
			if (state.failed) return retval;
			if ( state.backtracking==0 ) adaptor.addChild(root_0, p_QName157.getTree());

			}

			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (XQDTCommonTree)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
			retval.tree = (XQDTCommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "p_CurrentItem"


	public static class p_PreviousItem_return extends ParserRuleReturnScope {
		XQDTCommonTree tree;
		@Override
		public XQDTCommonTree getTree() { return tree; }
	};


	// $ANTLR start "p_PreviousItem"
	// XQueryParser.g:494:1: p_PreviousItem : p_QName ;
	public final XQueryParser.p_PreviousItem_return p_PreviousItem() throws RecognitionException {
		XQueryParser.p_PreviousItem_return retval = new XQueryParser.p_PreviousItem_return();
		retval.start = input.LT(1);

		XQDTCommonTree root_0 = null;

		ParserRuleReturnScope p_QName158 =null;


		try {
			// XQueryParser.g:495:9: ( p_QName )
			// XQueryParser.g:495:11: p_QName
			{
			root_0 = (XQDTCommonTree)adaptor.nil();


			pushFollow(FOLLOW_p_QName_in_p_PreviousItem4404);
			p_QName158=p_QName();
			state._fsp--;
			if (state.failed) return retval;
			if ( state.backtracking==0 ) adaptor.addChild(root_0, p_QName158.getTree());

			}

			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (XQDTCommonTree)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
			retval.tree = (XQDTCommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "p_PreviousItem"


	public static class p_NextItem_return extends ParserRuleReturnScope {
		XQDTCommonTree tree;
		@Override
		public XQDTCommonTree getTree() { return tree; }
	};


	// $ANTLR start "p_NextItem"
	// XQueryParser.g:499:1: p_NextItem : p_QName ;
	public final XQueryParser.p_NextItem_return p_NextItem() throws RecognitionException {
		XQueryParser.p_NextItem_return retval = new XQueryParser.p_NextItem_return();
		retval.start = input.LT(1);

		XQDTCommonTree root_0 = null;

		ParserRuleReturnScope p_QName159 =null;


		try {
			// XQueryParser.g:500:9: ( p_QName )
			// XQueryParser.g:500:11: p_QName
			{
			root_0 = (XQDTCommonTree)adaptor.nil();


			pushFollow(FOLLOW_p_QName_in_p_NextItem4430);
			p_QName159=p_QName();
			state._fsp--;
			if (state.failed) return retval;
			if ( state.backtracking==0 ) adaptor.addChild(root_0, p_QName159.getTree());

			}

			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (XQDTCommonTree)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
			retval.tree = (XQDTCommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "p_NextItem"


	public static class p_CountClause_return extends ParserRuleReturnScope {
		XQDTCommonTree tree;
		@Override
		public XQDTCommonTree getTree() { return tree; }
	};


	// $ANTLR start "p_CountClause"
	// XQueryParser.g:504:1: p_CountClause : k= COUNT DOLLAR p_VarName ;
	public final XQueryParser.p_CountClause_return p_CountClause() throws RecognitionException {
		XQueryParser.p_CountClause_return retval = new XQueryParser.p_CountClause_return();
		retval.start = input.LT(1);

		XQDTCommonTree root_0 = null;

		CommonToken k=null;
		CommonToken DOLLAR160=null;
		ParserRuleReturnScope p_VarName161 =null;

		XQDTCommonTree k_tree=null;
		XQDTCommonTree DOLLAR160_tree=null;

		try {
			// XQueryParser.g:505:9: (k= COUNT DOLLAR p_VarName )
			// XQueryParser.g:505:11: k= COUNT DOLLAR p_VarName
			{
			root_0 = (XQDTCommonTree)adaptor.nil();


			k=(CommonToken)match(input,COUNT,FOLLOW_COUNT_in_p_CountClause4458); if (state.failed) return retval;
			if ( state.backtracking==0 ) {
			k_tree = (XQDTCommonTree)adaptor.create(k);
			adaptor.addChild(root_0, k_tree);
			}

			if ( state.backtracking==0 ) {ak(k);}
			DOLLAR160=(CommonToken)match(input,DOLLAR,FOLLOW_DOLLAR_in_p_CountClause4462); if (state.failed) return retval;
			if ( state.backtracking==0 ) {
			DOLLAR160_tree = (XQDTCommonTree)adaptor.create(DOLLAR160);
			adaptor.addChild(root_0, DOLLAR160_tree);
			}

			pushFollow(FOLLOW_p_VarName_in_p_CountClause4464);
			p_VarName161=p_VarName();
			state._fsp--;
			if (state.failed) return retval;
			if ( state.backtracking==0 ) adaptor.addChild(root_0, p_VarName161.getTree());

			}

			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (XQDTCommonTree)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
			retval.tree = (XQDTCommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "p_CountClause"


	public static class p_WhereClause_return extends ParserRuleReturnScope {
		XQDTCommonTree tree;
		@Override
		public XQDTCommonTree getTree() { return tree; }
	};


	// $ANTLR start "p_WhereClause"
	// XQueryParser.g:509:1: p_WhereClause : k= WHERE p_ExprSingle[true] ;
	public final XQueryParser.p_WhereClause_return p_WhereClause() throws RecognitionException {
		XQueryParser.p_WhereClause_return retval = new XQueryParser.p_WhereClause_return();
		retval.start = input.LT(1);

		XQDTCommonTree root_0 = null;

		CommonToken k=null;
		ParserRuleReturnScope p_ExprSingle162 =null;

		XQDTCommonTree k_tree=null;

		try {
			// XQueryParser.g:510:9: (k= WHERE p_ExprSingle[true] )
			// XQueryParser.g:510:11: k= WHERE p_ExprSingle[true]
			{
			root_0 = (XQDTCommonTree)adaptor.nil();


			k=(CommonToken)match(input,WHERE,FOLLOW_WHERE_in_p_WhereClause4500); if (state.failed) return retval;
			if ( state.backtracking==0 ) {
			k_tree = (XQDTCommonTree)adaptor.create(k);
			adaptor.addChild(root_0, k_tree);
			}

			if ( state.backtracking==0 ) {ak(k);}
			pushFollow(FOLLOW_p_ExprSingle_in_p_WhereClause4504);
			p_ExprSingle162=p_ExprSingle(true);
			state._fsp--;
			if (state.failed) return retval;
			if ( state.backtracking==0 ) adaptor.addChild(root_0, p_ExprSingle162.getTree());

			}

			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (XQDTCommonTree)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
			retval.tree = (XQDTCommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "p_WhereClause"


	public static class p_GroupByClause_return extends ParserRuleReturnScope {
		XQDTCommonTree tree;
		@Override
		public XQDTCommonTree getTree() { return tree; }
	};


	// $ANTLR start "p_GroupByClause"
	// XQueryParser.g:514:1: p_GroupByClause : k= GROUP k= BY p_GroupingSpecList ;
	public final XQueryParser.p_GroupByClause_return p_GroupByClause() throws RecognitionException {
		XQueryParser.p_GroupByClause_return retval = new XQueryParser.p_GroupByClause_return();
		retval.start = input.LT(1);

		XQDTCommonTree root_0 = null;

		CommonToken k=null;
		ParserRuleReturnScope p_GroupingSpecList163 =null;

		XQDTCommonTree k_tree=null;

		try {
			// XQueryParser.g:515:9: (k= GROUP k= BY p_GroupingSpecList )
			// XQueryParser.g:515:11: k= GROUP k= BY p_GroupingSpecList
			{
			root_0 = (XQDTCommonTree)adaptor.nil();


			k=(CommonToken)match(input,GROUP,FOLLOW_GROUP_in_p_GroupByClause4533); if (state.failed) return retval;
			if ( state.backtracking==0 ) {
			k_tree = (XQDTCommonTree)adaptor.create(k);
			adaptor.addChild(root_0, k_tree);
			}

			if ( state.backtracking==0 ) {ak(k);}
			k=(CommonToken)match(input,BY,FOLLOW_BY_in_p_GroupByClause4539); if (state.failed) return retval;
			if ( state.backtracking==0 ) {
			k_tree = (XQDTCommonTree)adaptor.create(k);
			adaptor.addChild(root_0, k_tree);
			}

			if ( state.backtracking==0 ) {ak(k);}
			pushFollow(FOLLOW_p_GroupingSpecList_in_p_GroupByClause4543);
			p_GroupingSpecList163=p_GroupingSpecList();
			state._fsp--;
			if (state.failed) return retval;
			if ( state.backtracking==0 ) adaptor.addChild(root_0, p_GroupingSpecList163.getTree());

			}

			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (XQDTCommonTree)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
			retval.tree = (XQDTCommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "p_GroupByClause"


	public static class p_GroupingSpecList_return extends ParserRuleReturnScope {
		XQDTCommonTree tree;
		@Override
		public XQDTCommonTree getTree() { return tree; }
	};


	// $ANTLR start "p_GroupingSpecList"
	// XQueryParser.g:519:1: p_GroupingSpecList : p_GroupingSpec ( COMMA p_GroupingSpec )* ;
	public final XQueryParser.p_GroupingSpecList_return p_GroupingSpecList() throws RecognitionException {
		XQueryParser.p_GroupingSpecList_return retval = new XQueryParser.p_GroupingSpecList_return();
		retval.start = input.LT(1);

		XQDTCommonTree root_0 = null;

		CommonToken COMMA165=null;
		ParserRuleReturnScope p_GroupingSpec164 =null;
		ParserRuleReturnScope p_GroupingSpec166 =null;

		XQDTCommonTree COMMA165_tree=null;

		try {
			// XQueryParser.g:520:9: ( p_GroupingSpec ( COMMA p_GroupingSpec )* )
			// XQueryParser.g:520:11: p_GroupingSpec ( COMMA p_GroupingSpec )*
			{
			root_0 = (XQDTCommonTree)adaptor.nil();


			pushFollow(FOLLOW_p_GroupingSpec_in_p_GroupingSpecList4569);
			p_GroupingSpec164=p_GroupingSpec();
			state._fsp--;
			if (state.failed) return retval;
			if ( state.backtracking==0 ) adaptor.addChild(root_0, p_GroupingSpec164.getTree());

			// XQueryParser.g:520:26: ( COMMA p_GroupingSpec )*
			loop69:
			while (true) {
				int alt69=2;
				int LA69_0 = input.LA(1);
				if ( (LA69_0==COMMA) ) {
					alt69=1;
				}

				switch (alt69) {
				case 1 :
					// XQueryParser.g:520:27: COMMA p_GroupingSpec
					{
					COMMA165=(CommonToken)match(input,COMMA,FOLLOW_COMMA_in_p_GroupingSpecList4572); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					COMMA165_tree = (XQDTCommonTree)adaptor.create(COMMA165);
					adaptor.addChild(root_0, COMMA165_tree);
					}

					pushFollow(FOLLOW_p_GroupingSpec_in_p_GroupingSpecList4574);
					p_GroupingSpec166=p_GroupingSpec();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, p_GroupingSpec166.getTree());

					}
					break;

				default :
					break loop69;
				}
			}

			}

			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (XQDTCommonTree)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
			retval.tree = (XQDTCommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "p_GroupingSpecList"


	public static class p_GroupingSpec_return extends ParserRuleReturnScope {
		XQDTCommonTree tree;
		@Override
		public XQDTCommonTree getTree() { return tree; }
	};


	// $ANTLR start "p_GroupingSpec"
	// XQueryParser.g:524:1: p_GroupingSpec : DOLLAR p_VarName (k= COLLATION p_StringLiteral )? ;
	public final XQueryParser.p_GroupingSpec_return p_GroupingSpec() throws RecognitionException {
		XQueryParser.p_GroupingSpec_return retval = new XQueryParser.p_GroupingSpec_return();
		retval.start = input.LT(1);

		XQDTCommonTree root_0 = null;

		CommonToken k=null;
		CommonToken DOLLAR167=null;
		ParserRuleReturnScope p_VarName168 =null;
		ParserRuleReturnScope p_StringLiteral169 =null;

		XQDTCommonTree k_tree=null;
		XQDTCommonTree DOLLAR167_tree=null;

		try {
			// XQueryParser.g:525:9: ( DOLLAR p_VarName (k= COLLATION p_StringLiteral )? )
			// XQueryParser.g:525:11: DOLLAR p_VarName (k= COLLATION p_StringLiteral )?
			{
			root_0 = (XQDTCommonTree)adaptor.nil();


			DOLLAR167=(CommonToken)match(input,DOLLAR,FOLLOW_DOLLAR_in_p_GroupingSpec4602); if (state.failed) return retval;
			if ( state.backtracking==0 ) {
			DOLLAR167_tree = (XQDTCommonTree)adaptor.create(DOLLAR167);
			adaptor.addChild(root_0, DOLLAR167_tree);
			}

			pushFollow(FOLLOW_p_VarName_in_p_GroupingSpec4604);
			p_VarName168=p_VarName();
			state._fsp--;
			if (state.failed) return retval;
			if ( state.backtracking==0 ) adaptor.addChild(root_0, p_VarName168.getTree());

			// XQueryParser.g:525:28: (k= COLLATION p_StringLiteral )?
			int alt70=2;
			int LA70_0 = input.LA(1);
			if ( (LA70_0==COLLATION) ) {
				alt70=1;
			}
			switch (alt70) {
				case 1 :
					// XQueryParser.g:525:29: k= COLLATION p_StringLiteral
					{
					k=(CommonToken)match(input,COLLATION,FOLLOW_COLLATION_in_p_GroupingSpec4609); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					k_tree = (XQDTCommonTree)adaptor.create(k);
					adaptor.addChild(root_0, k_tree);
					}

					if ( state.backtracking==0 ) {ak(k);}
					pushFollow(FOLLOW_p_StringLiteral_in_p_GroupingSpec4613);
					p_StringLiteral169=p_StringLiteral();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, p_StringLiteral169.getTree());

					}
					break;

			}

			}

			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (XQDTCommonTree)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
			retval.tree = (XQDTCommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "p_GroupingSpec"


	public static class p_OrderByClause_return extends ParserRuleReturnScope {
		XQDTCommonTree tree;
		@Override
		public XQDTCommonTree getTree() { return tree; }
	};


	// $ANTLR start "p_OrderByClause"
	// XQueryParser.g:529:1: p_OrderByClause : ( (k+= ORDER k+= BY ) | (k+= STABLE k+= ORDER k+= BY ) ) p_OrderSpecList ;
	public final XQueryParser.p_OrderByClause_return p_OrderByClause() throws RecognitionException {
		XQueryParser.p_OrderByClause_return retval = new XQueryParser.p_OrderByClause_return();
		retval.start = input.LT(1);

		XQDTCommonTree root_0 = null;

		CommonToken k=null;
		List<Object> list_k=null;
		ParserRuleReturnScope p_OrderSpecList170 =null;

		XQDTCommonTree k_tree=null;

		try {
			// XQueryParser.g:530:9: ( ( (k+= ORDER k+= BY ) | (k+= STABLE k+= ORDER k+= BY ) ) p_OrderSpecList )
			// XQueryParser.g:530:11: ( (k+= ORDER k+= BY ) | (k+= STABLE k+= ORDER k+= BY ) ) p_OrderSpecList
			{
			root_0 = (XQDTCommonTree)adaptor.nil();


			// XQueryParser.g:530:11: ( (k+= ORDER k+= BY ) | (k+= STABLE k+= ORDER k+= BY ) )
			int alt71=2;
			int LA71_0 = input.LA(1);
			if ( (LA71_0==ORDER) ) {
				alt71=1;
			}
			else if ( (LA71_0==STABLE) ) {
				alt71=2;
			}

			else {
				if (state.backtracking>0) {state.failed=true; return retval;}
				NoViableAltException nvae =
					new NoViableAltException("", 71, 0, input);
				throw nvae;
			}

			switch (alt71) {
				case 1 :
					// XQueryParser.g:530:12: (k+= ORDER k+= BY )
					{
					// XQueryParser.g:530:12: (k+= ORDER k+= BY )
					// XQueryParser.g:530:13: k+= ORDER k+= BY
					{
					k=(CommonToken)match(input,ORDER,FOLLOW_ORDER_in_p_OrderByClause4645); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					k_tree = (XQDTCommonTree)adaptor.create(k);
					adaptor.addChild(root_0, k_tree);
					}

					if (list_k==null) list_k=new ArrayList<Object>();
					list_k.add(k);
					k=(CommonToken)match(input,BY,FOLLOW_BY_in_p_OrderByClause4649); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					k_tree = (XQDTCommonTree)adaptor.create(k);
					adaptor.addChild(root_0, k_tree);
					}

					if (list_k==null) list_k=new ArrayList<Object>();
					list_k.add(k);
					}

					}
					break;
				case 2 :
					// XQueryParser.g:530:31: (k+= STABLE k+= ORDER k+= BY )
					{
					// XQueryParser.g:530:31: (k+= STABLE k+= ORDER k+= BY )
					// XQueryParser.g:530:32: k+= STABLE k+= ORDER k+= BY
					{
					k=(CommonToken)match(input,STABLE,FOLLOW_STABLE_in_p_OrderByClause4657); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					k_tree = (XQDTCommonTree)adaptor.create(k);
					adaptor.addChild(root_0, k_tree);
					}

					if (list_k==null) list_k=new ArrayList<Object>();
					list_k.add(k);
					k=(CommonToken)match(input,ORDER,FOLLOW_ORDER_in_p_OrderByClause4661); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					k_tree = (XQDTCommonTree)adaptor.create(k);
					adaptor.addChild(root_0, k_tree);
					}

					if (list_k==null) list_k=new ArrayList<Object>();
					list_k.add(k);
					k=(CommonToken)match(input,BY,FOLLOW_BY_in_p_OrderByClause4665); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					k_tree = (XQDTCommonTree)adaptor.create(k);
					adaptor.addChild(root_0, k_tree);
					}

					if (list_k==null) list_k=new ArrayList<Object>();
					list_k.add(k);
					}

					}
					break;

			}

			if ( state.backtracking==0 ) {ak(list_k);}
			pushFollow(FOLLOW_p_OrderSpecList_in_p_OrderByClause4671);
			p_OrderSpecList170=p_OrderSpecList();
			state._fsp--;
			if (state.failed) return retval;
			if ( state.backtracking==0 ) adaptor.addChild(root_0, p_OrderSpecList170.getTree());

			}

			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (XQDTCommonTree)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
			retval.tree = (XQDTCommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "p_OrderByClause"


	public static class p_OrderSpecList_return extends ParserRuleReturnScope {
		XQDTCommonTree tree;
		@Override
		public XQDTCommonTree getTree() { return tree; }
	};


	// $ANTLR start "p_OrderSpecList"
	// XQueryParser.g:534:1: p_OrderSpecList : p_OrderSpec ( COMMA p_OrderSpec )* ;
	public final XQueryParser.p_OrderSpecList_return p_OrderSpecList() throws RecognitionException {
		XQueryParser.p_OrderSpecList_return retval = new XQueryParser.p_OrderSpecList_return();
		retval.start = input.LT(1);

		XQDTCommonTree root_0 = null;

		CommonToken COMMA172=null;
		ParserRuleReturnScope p_OrderSpec171 =null;
		ParserRuleReturnScope p_OrderSpec173 =null;

		XQDTCommonTree COMMA172_tree=null;

		try {
			// XQueryParser.g:535:9: ( p_OrderSpec ( COMMA p_OrderSpec )* )
			// XQueryParser.g:535:11: p_OrderSpec ( COMMA p_OrderSpec )*
			{
			root_0 = (XQDTCommonTree)adaptor.nil();


			pushFollow(FOLLOW_p_OrderSpec_in_p_OrderSpecList4697);
			p_OrderSpec171=p_OrderSpec();
			state._fsp--;
			if (state.failed) return retval;
			if ( state.backtracking==0 ) adaptor.addChild(root_0, p_OrderSpec171.getTree());

			// XQueryParser.g:535:23: ( COMMA p_OrderSpec )*
			loop72:
			while (true) {
				int alt72=2;
				int LA72_0 = input.LA(1);
				if ( (LA72_0==COMMA) ) {
					alt72=1;
				}

				switch (alt72) {
				case 1 :
					// XQueryParser.g:535:24: COMMA p_OrderSpec
					{
					COMMA172=(CommonToken)match(input,COMMA,FOLLOW_COMMA_in_p_OrderSpecList4700); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					COMMA172_tree = (XQDTCommonTree)adaptor.create(COMMA172);
					adaptor.addChild(root_0, COMMA172_tree);
					}

					pushFollow(FOLLOW_p_OrderSpec_in_p_OrderSpecList4702);
					p_OrderSpec173=p_OrderSpec();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, p_OrderSpec173.getTree());

					}
					break;

				default :
					break loop72;
				}
			}

			}

			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (XQDTCommonTree)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
			retval.tree = (XQDTCommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "p_OrderSpecList"


	public static class p_OrderSpec_return extends ParserRuleReturnScope {
		XQDTCommonTree tree;
		@Override
		public XQDTCommonTree getTree() { return tree; }
	};


	// $ANTLR start "p_OrderSpec"
	// XQueryParser.g:539:1: p_OrderSpec : p_ExprSingle[true] p_OrderModifier ;
	public final XQueryParser.p_OrderSpec_return p_OrderSpec() throws RecognitionException {
		XQueryParser.p_OrderSpec_return retval = new XQueryParser.p_OrderSpec_return();
		retval.start = input.LT(1);

		XQDTCommonTree root_0 = null;

		ParserRuleReturnScope p_ExprSingle174 =null;
		ParserRuleReturnScope p_OrderModifier175 =null;


		try {
			// XQueryParser.g:540:9: ( p_ExprSingle[true] p_OrderModifier )
			// XQueryParser.g:540:11: p_ExprSingle[true] p_OrderModifier
			{
			root_0 = (XQDTCommonTree)adaptor.nil();


			pushFollow(FOLLOW_p_ExprSingle_in_p_OrderSpec4730);
			p_ExprSingle174=p_ExprSingle(true);
			state._fsp--;
			if (state.failed) return retval;
			if ( state.backtracking==0 ) adaptor.addChild(root_0, p_ExprSingle174.getTree());

			pushFollow(FOLLOW_p_OrderModifier_in_p_OrderSpec4733);
			p_OrderModifier175=p_OrderModifier();
			state._fsp--;
			if (state.failed) return retval;
			if ( state.backtracking==0 ) adaptor.addChild(root_0, p_OrderModifier175.getTree());

			}

			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (XQDTCommonTree)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
			retval.tree = (XQDTCommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "p_OrderSpec"


	public static class p_OrderModifier_return extends ParserRuleReturnScope {
		XQDTCommonTree tree;
		@Override
		public XQDTCommonTree getTree() { return tree; }
	};


	// $ANTLR start "p_OrderModifier"
	// XQueryParser.g:544:1: p_OrderModifier : (k+= ASCENDING |k+= DESCENDING )? (k+= EMPTY (k+= GREATEST |k+= LEAST ) )? (k+= COLLATION p_StringLiteral )? ;
	public final XQueryParser.p_OrderModifier_return p_OrderModifier() throws RecognitionException {
		XQueryParser.p_OrderModifier_return retval = new XQueryParser.p_OrderModifier_return();
		retval.start = input.LT(1);

		XQDTCommonTree root_0 = null;

		CommonToken k=null;
		List<Object> list_k=null;
		ParserRuleReturnScope p_StringLiteral176 =null;

		XQDTCommonTree k_tree=null;

		try {
			// XQueryParser.g:545:9: ( (k+= ASCENDING |k+= DESCENDING )? (k+= EMPTY (k+= GREATEST |k+= LEAST ) )? (k+= COLLATION p_StringLiteral )? )
			// XQueryParser.g:545:11: (k+= ASCENDING |k+= DESCENDING )? (k+= EMPTY (k+= GREATEST |k+= LEAST ) )? (k+= COLLATION p_StringLiteral )?
			{
			root_0 = (XQDTCommonTree)adaptor.nil();


			// XQueryParser.g:545:11: (k+= ASCENDING |k+= DESCENDING )?
			int alt73=3;
			int LA73_0 = input.LA(1);
			if ( (LA73_0==ASCENDING) ) {
				alt73=1;
			}
			else if ( (LA73_0==DESCENDING) ) {
				alt73=2;
			}
			switch (alt73) {
				case 1 :
					// XQueryParser.g:545:12: k+= ASCENDING
					{
					k=(CommonToken)match(input,ASCENDING,FOLLOW_ASCENDING_in_p_OrderModifier4762); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					k_tree = (XQDTCommonTree)adaptor.create(k);
					adaptor.addChild(root_0, k_tree);
					}

					if (list_k==null) list_k=new ArrayList<Object>();
					list_k.add(k);
					}
					break;
				case 2 :
					// XQueryParser.g:545:27: k+= DESCENDING
					{
					k=(CommonToken)match(input,DESCENDING,FOLLOW_DESCENDING_in_p_OrderModifier4768); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					k_tree = (XQDTCommonTree)adaptor.create(k);
					adaptor.addChild(root_0, k_tree);
					}

					if (list_k==null) list_k=new ArrayList<Object>();
					list_k.add(k);
					}
					break;

			}

			// XQueryParser.g:545:43: (k+= EMPTY (k+= GREATEST |k+= LEAST ) )?
			int alt75=2;
			int LA75_0 = input.LA(1);
			if ( (LA75_0==EMPTY) ) {
				alt75=1;
			}
			switch (alt75) {
				case 1 :
					// XQueryParser.g:545:44: k+= EMPTY (k+= GREATEST |k+= LEAST )
					{
					k=(CommonToken)match(input,EMPTY,FOLLOW_EMPTY_in_p_OrderModifier4775); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					k_tree = (XQDTCommonTree)adaptor.create(k);
					adaptor.addChild(root_0, k_tree);
					}

					if (list_k==null) list_k=new ArrayList<Object>();
					list_k.add(k);
					// XQueryParser.g:545:53: (k+= GREATEST |k+= LEAST )
					int alt74=2;
					int LA74_0 = input.LA(1);
					if ( (LA74_0==GREATEST) ) {
						alt74=1;
					}
					else if ( (LA74_0==LEAST) ) {
						alt74=2;
					}

					else {
						if (state.backtracking>0) {state.failed=true; return retval;}
						NoViableAltException nvae =
							new NoViableAltException("", 74, 0, input);
						throw nvae;
					}

					switch (alt74) {
						case 1 :
							// XQueryParser.g:545:54: k+= GREATEST
							{
							k=(CommonToken)match(input,GREATEST,FOLLOW_GREATEST_in_p_OrderModifier4780); if (state.failed) return retval;
							if ( state.backtracking==0 ) {
							k_tree = (XQDTCommonTree)adaptor.create(k);
							adaptor.addChild(root_0, k_tree);
							}

							if (list_k==null) list_k=new ArrayList<Object>();
							list_k.add(k);
							}
							break;
						case 2 :
							// XQueryParser.g:545:68: k+= LEAST
							{
							k=(CommonToken)match(input,LEAST,FOLLOW_LEAST_in_p_OrderModifier4786); if (state.failed) return retval;
							if ( state.backtracking==0 ) {
							k_tree = (XQDTCommonTree)adaptor.create(k);
							adaptor.addChild(root_0, k_tree);
							}

							if (list_k==null) list_k=new ArrayList<Object>();
							list_k.add(k);
							}
							break;

					}

					}
					break;

			}

			// XQueryParser.g:545:80: (k+= COLLATION p_StringLiteral )?
			int alt76=2;
			int LA76_0 = input.LA(1);
			if ( (LA76_0==COLLATION) ) {
				alt76=1;
			}
			switch (alt76) {
				case 1 :
					// XQueryParser.g:545:81: k+= COLLATION p_StringLiteral
					{
					k=(CommonToken)match(input,COLLATION,FOLLOW_COLLATION_in_p_OrderModifier4794); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					k_tree = (XQDTCommonTree)adaptor.create(k);
					adaptor.addChild(root_0, k_tree);
					}

					if (list_k==null) list_k=new ArrayList<Object>();
					list_k.add(k);
					pushFollow(FOLLOW_p_StringLiteral_in_p_OrderModifier4796);
					p_StringLiteral176=p_StringLiteral();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, p_StringLiteral176.getTree());

					}
					break;

			}

			if ( state.backtracking==0 ) {ak(list_k);}
			}

			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (XQDTCommonTree)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
			retval.tree = (XQDTCommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "p_OrderModifier"


	public static class p_ReturnHybrid_return extends ParserRuleReturnScope {
		XQDTCommonTree tree;
		@Override
		public XQDTCommonTree getTree() { return tree; }
	};


	// $ANTLR start "p_ReturnHybrid"
	// XQueryParser.g:549:1: p_ReturnHybrid[boolean strict] : k= RETURN p_Hybrid[$strict,false] ;
	public final XQueryParser.p_ReturnHybrid_return p_ReturnHybrid(boolean strict) throws RecognitionException {
		XQueryParser.p_ReturnHybrid_return retval = new XQueryParser.p_ReturnHybrid_return();
		retval.start = input.LT(1);

		XQDTCommonTree root_0 = null;

		CommonToken k=null;
		ParserRuleReturnScope p_Hybrid177 =null;

		XQDTCommonTree k_tree=null;

		try {
			// XQueryParser.g:550:9: (k= RETURN p_Hybrid[$strict,false] )
			// XQueryParser.g:550:11: k= RETURN p_Hybrid[$strict,false]
			{
			root_0 = (XQDTCommonTree)adaptor.nil();


			k=(CommonToken)match(input,RETURN,FOLLOW_RETURN_in_p_ReturnHybrid4829); if (state.failed) return retval;
			if ( state.backtracking==0 ) {
			k_tree = (XQDTCommonTree)adaptor.create(k);
			adaptor.addChild(root_0, k_tree);
			}

			if ( state.backtracking==0 ) {ak(k);}
			pushFollow(FOLLOW_p_Hybrid_in_p_ReturnHybrid4833);
			p_Hybrid177=p_Hybrid(strict, false);
			state._fsp--;
			if (state.failed) return retval;
			if ( state.backtracking==0 ) adaptor.addChild(root_0, p_Hybrid177.getTree());

			}

			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (XQDTCommonTree)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
			retval.tree = (XQDTCommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "p_ReturnHybrid"


	public static class p_QuantifiedExpr_return extends ParserRuleReturnScope {
		XQDTCommonTree tree;
		@Override
		public XQDTCommonTree getTree() { return tree; }
	};


	// $ANTLR start "p_QuantifiedExpr"
	// XQueryParser.g:554:1: p_QuantifiedExpr : (k= SOME |k= EVERY ) DOLLAR p_VarName ( p_TypeDeclaration )? k= IN p_ExprSingle[true] ( COMMA DOLLAR p_QName ( p_TypeDeclaration )? k= IN p_ExprSingle[true] )* k= SATISFIES p_ExprSingle[true] ;
	public final XQueryParser.p_QuantifiedExpr_return p_QuantifiedExpr() throws RecognitionException {
		XQueryParser.p_QuantifiedExpr_return retval = new XQueryParser.p_QuantifiedExpr_return();
		retval.start = input.LT(1);

		XQDTCommonTree root_0 = null;

		CommonToken k=null;
		CommonToken DOLLAR178=null;
		CommonToken COMMA182=null;
		CommonToken DOLLAR183=null;
		ParserRuleReturnScope p_VarName179 =null;
		ParserRuleReturnScope p_TypeDeclaration180 =null;
		ParserRuleReturnScope p_ExprSingle181 =null;
		ParserRuleReturnScope p_QName184 =null;
		ParserRuleReturnScope p_TypeDeclaration185 =null;
		ParserRuleReturnScope p_ExprSingle186 =null;
		ParserRuleReturnScope p_ExprSingle187 =null;

		XQDTCommonTree k_tree=null;
		XQDTCommonTree DOLLAR178_tree=null;
		XQDTCommonTree COMMA182_tree=null;
		XQDTCommonTree DOLLAR183_tree=null;

		try {
			// XQueryParser.g:555:9: ( (k= SOME |k= EVERY ) DOLLAR p_VarName ( p_TypeDeclaration )? k= IN p_ExprSingle[true] ( COMMA DOLLAR p_QName ( p_TypeDeclaration )? k= IN p_ExprSingle[true] )* k= SATISFIES p_ExprSingle[true] )
			// XQueryParser.g:555:11: (k= SOME |k= EVERY ) DOLLAR p_VarName ( p_TypeDeclaration )? k= IN p_ExprSingle[true] ( COMMA DOLLAR p_QName ( p_TypeDeclaration )? k= IN p_ExprSingle[true] )* k= SATISFIES p_ExprSingle[true]
			{
			root_0 = (XQDTCommonTree)adaptor.nil();


			// XQueryParser.g:555:11: (k= SOME |k= EVERY )
			int alt77=2;
			int LA77_0 = input.LA(1);
			if ( (LA77_0==SOME) ) {
				alt77=1;
			}
			else if ( (LA77_0==EVERY) ) {
				alt77=2;
			}

			else {
				if (state.backtracking>0) {state.failed=true; return retval;}
				NoViableAltException nvae =
					new NoViableAltException("", 77, 0, input);
				throw nvae;
			}

			switch (alt77) {
				case 1 :
					// XQueryParser.g:555:12: k= SOME
					{
					k=(CommonToken)match(input,SOME,FOLLOW_SOME_in_p_QuantifiedExpr4863); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					k_tree = (XQDTCommonTree)adaptor.create(k);
					adaptor.addChild(root_0, k_tree);
					}

					}
					break;
				case 2 :
					// XQueryParser.g:555:21: k= EVERY
					{
					k=(CommonToken)match(input,EVERY,FOLLOW_EVERY_in_p_QuantifiedExpr4869); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					k_tree = (XQDTCommonTree)adaptor.create(k);
					adaptor.addChild(root_0, k_tree);
					}

					}
					break;

			}

			if ( state.backtracking==0 ) {ak(k);}
			DOLLAR178=(CommonToken)match(input,DOLLAR,FOLLOW_DOLLAR_in_p_QuantifiedExpr4874); if (state.failed) return retval;
			if ( state.backtracking==0 ) {
			DOLLAR178_tree = (XQDTCommonTree)adaptor.create(DOLLAR178);
			adaptor.addChild(root_0, DOLLAR178_tree);
			}

			pushFollow(FOLLOW_p_VarName_in_p_QuantifiedExpr4876);
			p_VarName179=p_VarName();
			state._fsp--;
			if (state.failed) return retval;
			if ( state.backtracking==0 ) adaptor.addChild(root_0, p_VarName179.getTree());

			// XQueryParser.g:555:57: ( p_TypeDeclaration )?
			int alt78=2;
			int LA78_0 = input.LA(1);
			if ( (LA78_0==AS) ) {
				alt78=1;
			}
			switch (alt78) {
				case 1 :
					// XQueryParser.g:555:57: p_TypeDeclaration
					{
					pushFollow(FOLLOW_p_TypeDeclaration_in_p_QuantifiedExpr4878);
					p_TypeDeclaration180=p_TypeDeclaration();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, p_TypeDeclaration180.getTree());

					}
					break;

			}

			k=(CommonToken)match(input,IN,FOLLOW_IN_in_p_QuantifiedExpr4883); if (state.failed) return retval;
			if ( state.backtracking==0 ) {
			k_tree = (XQDTCommonTree)adaptor.create(k);
			adaptor.addChild(root_0, k_tree);
			}

			if ( state.backtracking==0 ) {ak(k);}
			pushFollow(FOLLOW_p_ExprSingle_in_p_QuantifiedExpr4887);
			p_ExprSingle181=p_ExprSingle(true);
			state._fsp--;
			if (state.failed) return retval;
			if ( state.backtracking==0 ) adaptor.addChild(root_0, p_ExprSingle181.getTree());

			// XQueryParser.g:555:110: ( COMMA DOLLAR p_QName ( p_TypeDeclaration )? k= IN p_ExprSingle[true] )*
			loop80:
			while (true) {
				int alt80=2;
				int LA80_0 = input.LA(1);
				if ( (LA80_0==COMMA) ) {
					alt80=1;
				}

				switch (alt80) {
				case 1 :
					// XQueryParser.g:555:111: COMMA DOLLAR p_QName ( p_TypeDeclaration )? k= IN p_ExprSingle[true]
					{
					COMMA182=(CommonToken)match(input,COMMA,FOLLOW_COMMA_in_p_QuantifiedExpr4891); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					COMMA182_tree = (XQDTCommonTree)adaptor.create(COMMA182);
					adaptor.addChild(root_0, COMMA182_tree);
					}

					DOLLAR183=(CommonToken)match(input,DOLLAR,FOLLOW_DOLLAR_in_p_QuantifiedExpr4893); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					DOLLAR183_tree = (XQDTCommonTree)adaptor.create(DOLLAR183);
					adaptor.addChild(root_0, DOLLAR183_tree);
					}

					pushFollow(FOLLOW_p_QName_in_p_QuantifiedExpr4895);
					p_QName184=p_QName();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, p_QName184.getTree());

					// XQueryParser.g:555:132: ( p_TypeDeclaration )?
					int alt79=2;
					int LA79_0 = input.LA(1);
					if ( (LA79_0==AS) ) {
						alt79=1;
					}
					switch (alt79) {
						case 1 :
							// XQueryParser.g:555:132: p_TypeDeclaration
							{
							pushFollow(FOLLOW_p_TypeDeclaration_in_p_QuantifiedExpr4897);
							p_TypeDeclaration185=p_TypeDeclaration();
							state._fsp--;
							if (state.failed) return retval;
							if ( state.backtracking==0 ) adaptor.addChild(root_0, p_TypeDeclaration185.getTree());

							}
							break;

					}

					k=(CommonToken)match(input,IN,FOLLOW_IN_in_p_QuantifiedExpr4902); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					k_tree = (XQDTCommonTree)adaptor.create(k);
					adaptor.addChild(root_0, k_tree);
					}

					if ( state.backtracking==0 ) {ak(k);}
					pushFollow(FOLLOW_p_ExprSingle_in_p_QuantifiedExpr4906);
					p_ExprSingle186=p_ExprSingle(true);
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, p_ExprSingle186.getTree());

					}
					break;

				default :
					break loop80;
				}
			}

			k=(CommonToken)match(input,SATISFIES,FOLLOW_SATISFIES_in_p_QuantifiedExpr4913); if (state.failed) return retval;
			if ( state.backtracking==0 ) {
			k_tree = (XQDTCommonTree)adaptor.create(k);
			adaptor.addChild(root_0, k_tree);
			}

			if ( state.backtracking==0 ) {ak(k);}
			pushFollow(FOLLOW_p_ExprSingle_in_p_QuantifiedExpr4917);
			p_ExprSingle187=p_ExprSingle(true);
			state._fsp--;
			if (state.failed) return retval;
			if ( state.backtracking==0 ) adaptor.addChild(root_0, p_ExprSingle187.getTree());

			}

			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (XQDTCommonTree)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
			retval.tree = (XQDTCommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "p_QuantifiedExpr"


	public static class p_SwitchHybrid_return extends ParserRuleReturnScope {
		XQDTCommonTree tree;
		@Override
		public XQDTCommonTree getTree() { return tree; }
	};


	// $ANTLR start "p_SwitchHybrid"
	// XQueryParser.g:559:1: p_SwitchHybrid[boolean strict] : k= SWITCH LPAREN p_Expr[true,true] RPAREN ( p_SwitchCaseHybrid[$strict] )+ k= DEFAULT k= RETURN p_Hybrid[$strict,false] ;
	public final XQueryParser.p_SwitchHybrid_return p_SwitchHybrid(boolean strict) throws RecognitionException {
		XQueryParser.p_SwitchHybrid_return retval = new XQueryParser.p_SwitchHybrid_return();
		retval.start = input.LT(1);

		XQDTCommonTree root_0 = null;

		CommonToken k=null;
		CommonToken LPAREN188=null;
		CommonToken RPAREN190=null;
		ParserRuleReturnScope p_Expr189 =null;
		ParserRuleReturnScope p_SwitchCaseHybrid191 =null;
		ParserRuleReturnScope p_Hybrid192 =null;

		XQDTCommonTree k_tree=null;
		XQDTCommonTree LPAREN188_tree=null;
		XQDTCommonTree RPAREN190_tree=null;

		try {
			// XQueryParser.g:560:9: (k= SWITCH LPAREN p_Expr[true,true] RPAREN ( p_SwitchCaseHybrid[$strict] )+ k= DEFAULT k= RETURN p_Hybrid[$strict,false] )
			// XQueryParser.g:560:11: k= SWITCH LPAREN p_Expr[true,true] RPAREN ( p_SwitchCaseHybrid[$strict] )+ k= DEFAULT k= RETURN p_Hybrid[$strict,false]
			{
			root_0 = (XQDTCommonTree)adaptor.nil();


			k=(CommonToken)match(input,SWITCH,FOLLOW_SWITCH_in_p_SwitchHybrid4947); if (state.failed) return retval;
			if ( state.backtracking==0 ) {
			k_tree = (XQDTCommonTree)adaptor.create(k);
			adaptor.addChild(root_0, k_tree);
			}

			if ( state.backtracking==0 ) {ak(k);}
			LPAREN188=(CommonToken)match(input,LPAREN,FOLLOW_LPAREN_in_p_SwitchHybrid4951); if (state.failed) return retval;
			if ( state.backtracking==0 ) {
			LPAREN188_tree = (XQDTCommonTree)adaptor.create(LPAREN188);
			adaptor.addChild(root_0, LPAREN188_tree);
			}

			pushFollow(FOLLOW_p_Expr_in_p_SwitchHybrid4953);
			p_Expr189=p_Expr(true, true);
			state._fsp--;
			if (state.failed) return retval;
			if ( state.backtracking==0 ) adaptor.addChild(root_0, p_Expr189.getTree());

			RPAREN190=(CommonToken)match(input,RPAREN,FOLLOW_RPAREN_in_p_SwitchHybrid4956); if (state.failed) return retval;
			if ( state.backtracking==0 ) {
			RPAREN190_tree = (XQDTCommonTree)adaptor.create(RPAREN190);
			adaptor.addChild(root_0, RPAREN190_tree);
			}

			// XQueryParser.g:560:62: ( p_SwitchCaseHybrid[$strict] )+
			int cnt81=0;
			loop81:
			while (true) {
				int alt81=2;
				int LA81_0 = input.LA(1);
				if ( (LA81_0==CASE) ) {
					alt81=1;
				}

				switch (alt81) {
				case 1 :
					// XQueryParser.g:560:62: p_SwitchCaseHybrid[$strict]
					{
					pushFollow(FOLLOW_p_SwitchCaseHybrid_in_p_SwitchHybrid4958);
					p_SwitchCaseHybrid191=p_SwitchCaseHybrid(strict);
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, p_SwitchCaseHybrid191.getTree());

					}
					break;

				default :
					if ( cnt81 >= 1 ) break loop81;
					if (state.backtracking>0) {state.failed=true; return retval;}
					EarlyExitException eee = new EarlyExitException(81, input);
					throw eee;
				}
				cnt81++;
			}

			k=(CommonToken)match(input,DEFAULT,FOLLOW_DEFAULT_in_p_SwitchHybrid4964); if (state.failed) return retval;
			if ( state.backtracking==0 ) {
			k_tree = (XQDTCommonTree)adaptor.create(k);
			adaptor.addChild(root_0, k_tree);
			}

			if ( state.backtracking==0 ) {ak(k);}
			k=(CommonToken)match(input,RETURN,FOLLOW_RETURN_in_p_SwitchHybrid4970); if (state.failed) return retval;
			if ( state.backtracking==0 ) {
			k_tree = (XQDTCommonTree)adaptor.create(k);
			adaptor.addChild(root_0, k_tree);
			}

			if ( state.backtracking==0 ) {ak(k);}
			pushFollow(FOLLOW_p_Hybrid_in_p_SwitchHybrid4974);
			p_Hybrid192=p_Hybrid(strict, false);
			state._fsp--;
			if (state.failed) return retval;
			if ( state.backtracking==0 ) adaptor.addChild(root_0, p_Hybrid192.getTree());

			}

			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (XQDTCommonTree)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
			retval.tree = (XQDTCommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "p_SwitchHybrid"


	public static class p_SwitchCaseHybrid_return extends ParserRuleReturnScope {
		XQDTCommonTree tree;
		@Override
		public XQDTCommonTree getTree() { return tree; }
	};


	// $ANTLR start "p_SwitchCaseHybrid"
	// XQueryParser.g:564:1: p_SwitchCaseHybrid[boolean strict] : (k= CASE p_SwitchCaseOperand )+ k= RETURN p_Hybrid[$strict,false] ;
	public final XQueryParser.p_SwitchCaseHybrid_return p_SwitchCaseHybrid(boolean strict) throws RecognitionException {
		XQueryParser.p_SwitchCaseHybrid_return retval = new XQueryParser.p_SwitchCaseHybrid_return();
		retval.start = input.LT(1);

		XQDTCommonTree root_0 = null;

		CommonToken k=null;
		ParserRuleReturnScope p_SwitchCaseOperand193 =null;
		ParserRuleReturnScope p_Hybrid194 =null;

		XQDTCommonTree k_tree=null;

		try {
			// XQueryParser.g:565:9: ( (k= CASE p_SwitchCaseOperand )+ k= RETURN p_Hybrid[$strict,false] )
			// XQueryParser.g:565:11: (k= CASE p_SwitchCaseOperand )+ k= RETURN p_Hybrid[$strict,false]
			{
			root_0 = (XQDTCommonTree)adaptor.nil();


			// XQueryParser.g:565:11: (k= CASE p_SwitchCaseOperand )+
			int cnt82=0;
			loop82:
			while (true) {
				int alt82=2;
				int LA82_0 = input.LA(1);
				if ( (LA82_0==CASE) ) {
					alt82=1;
				}

				switch (alt82) {
				case 1 :
					// XQueryParser.g:565:12: k= CASE p_SwitchCaseOperand
					{
					k=(CommonToken)match(input,CASE,FOLLOW_CASE_in_p_SwitchCaseHybrid5005); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					k_tree = (XQDTCommonTree)adaptor.create(k);
					adaptor.addChild(root_0, k_tree);
					}

					if ( state.backtracking==0 ) {ak(k);}
					pushFollow(FOLLOW_p_SwitchCaseOperand_in_p_SwitchCaseHybrid5009);
					p_SwitchCaseOperand193=p_SwitchCaseOperand();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, p_SwitchCaseOperand193.getTree());

					}
					break;

				default :
					if ( cnt82 >= 1 ) break loop82;
					if (state.backtracking>0) {state.failed=true; return retval;}
					EarlyExitException eee = new EarlyExitException(82, input);
					throw eee;
				}
				cnt82++;
			}

			k=(CommonToken)match(input,RETURN,FOLLOW_RETURN_in_p_SwitchCaseHybrid5015); if (state.failed) return retval;
			if ( state.backtracking==0 ) {
			k_tree = (XQDTCommonTree)adaptor.create(k);
			adaptor.addChild(root_0, k_tree);
			}

			if ( state.backtracking==0 ) {ak(k);}
			pushFollow(FOLLOW_p_Hybrid_in_p_SwitchCaseHybrid5019);
			p_Hybrid194=p_Hybrid(strict, false);
			state._fsp--;
			if (state.failed) return retval;
			if ( state.backtracking==0 ) adaptor.addChild(root_0, p_Hybrid194.getTree());

			}

			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (XQDTCommonTree)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
			retval.tree = (XQDTCommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "p_SwitchCaseHybrid"


	public static class p_SwitchCaseOperand_return extends ParserRuleReturnScope {
		XQDTCommonTree tree;
		@Override
		public XQDTCommonTree getTree() { return tree; }
	};


	// $ANTLR start "p_SwitchCaseOperand"
	// XQueryParser.g:569:1: p_SwitchCaseOperand : p_ExprSingle[true] ;
	public final XQueryParser.p_SwitchCaseOperand_return p_SwitchCaseOperand() throws RecognitionException {
		XQueryParser.p_SwitchCaseOperand_return retval = new XQueryParser.p_SwitchCaseOperand_return();
		retval.start = input.LT(1);

		XQDTCommonTree root_0 = null;

		ParserRuleReturnScope p_ExprSingle195 =null;


		try {
			// XQueryParser.g:570:9: ( p_ExprSingle[true] )
			// XQueryParser.g:570:11: p_ExprSingle[true]
			{
			root_0 = (XQDTCommonTree)adaptor.nil();


			pushFollow(FOLLOW_p_ExprSingle_in_p_SwitchCaseOperand5046);
			p_ExprSingle195=p_ExprSingle(true);
			state._fsp--;
			if (state.failed) return retval;
			if ( state.backtracking==0 ) adaptor.addChild(root_0, p_ExprSingle195.getTree());

			}

			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (XQDTCommonTree)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
			retval.tree = (XQDTCommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "p_SwitchCaseOperand"


	public static class p_TypeswitchHybrid_return extends ParserRuleReturnScope {
		XQDTCommonTree tree;
		@Override
		public XQDTCommonTree getTree() { return tree; }
	};


	// $ANTLR start "p_TypeswitchHybrid"
	// XQueryParser.g:574:1: p_TypeswitchHybrid[boolean strict] : k= TYPESWITCH LPAREN p_Expr[true,true] RPAREN ( p_CaseHybrid[$strict] )+ k= DEFAULT ( DOLLAR p_VarName )? k= RETURN p_Hybrid[$strict,false] ;
	public final XQueryParser.p_TypeswitchHybrid_return p_TypeswitchHybrid(boolean strict) throws RecognitionException {
		XQueryParser.p_TypeswitchHybrid_return retval = new XQueryParser.p_TypeswitchHybrid_return();
		retval.start = input.LT(1);

		XQDTCommonTree root_0 = null;

		CommonToken k=null;
		CommonToken LPAREN196=null;
		CommonToken RPAREN198=null;
		CommonToken DOLLAR200=null;
		ParserRuleReturnScope p_Expr197 =null;
		ParserRuleReturnScope p_CaseHybrid199 =null;
		ParserRuleReturnScope p_VarName201 =null;
		ParserRuleReturnScope p_Hybrid202 =null;

		XQDTCommonTree k_tree=null;
		XQDTCommonTree LPAREN196_tree=null;
		XQDTCommonTree RPAREN198_tree=null;
		XQDTCommonTree DOLLAR200_tree=null;

		try {
			// XQueryParser.g:575:9: (k= TYPESWITCH LPAREN p_Expr[true,true] RPAREN ( p_CaseHybrid[$strict] )+ k= DEFAULT ( DOLLAR p_VarName )? k= RETURN p_Hybrid[$strict,false] )
			// XQueryParser.g:575:11: k= TYPESWITCH LPAREN p_Expr[true,true] RPAREN ( p_CaseHybrid[$strict] )+ k= DEFAULT ( DOLLAR p_VarName )? k= RETURN p_Hybrid[$strict,false]
			{
			root_0 = (XQDTCommonTree)adaptor.nil();


			k=(CommonToken)match(input,TYPESWITCH,FOLLOW_TYPESWITCH_in_p_TypeswitchHybrid5076); if (state.failed) return retval;
			if ( state.backtracking==0 ) {
			k_tree = (XQDTCommonTree)adaptor.create(k);
			adaptor.addChild(root_0, k_tree);
			}

			if ( state.backtracking==0 ) {ak(k);}
			LPAREN196=(CommonToken)match(input,LPAREN,FOLLOW_LPAREN_in_p_TypeswitchHybrid5080); if (state.failed) return retval;
			if ( state.backtracking==0 ) {
			LPAREN196_tree = (XQDTCommonTree)adaptor.create(LPAREN196);
			adaptor.addChild(root_0, LPAREN196_tree);
			}

			pushFollow(FOLLOW_p_Expr_in_p_TypeswitchHybrid5082);
			p_Expr197=p_Expr(true, true);
			state._fsp--;
			if (state.failed) return retval;
			if ( state.backtracking==0 ) adaptor.addChild(root_0, p_Expr197.getTree());

			RPAREN198=(CommonToken)match(input,RPAREN,FOLLOW_RPAREN_in_p_TypeswitchHybrid5085); if (state.failed) return retval;
			if ( state.backtracking==0 ) {
			RPAREN198_tree = (XQDTCommonTree)adaptor.create(RPAREN198);
			adaptor.addChild(root_0, RPAREN198_tree);
			}

			// XQueryParser.g:575:66: ( p_CaseHybrid[$strict] )+
			int cnt83=0;
			loop83:
			while (true) {
				int alt83=2;
				int LA83_0 = input.LA(1);
				if ( (LA83_0==CASE) ) {
					alt83=1;
				}

				switch (alt83) {
				case 1 :
					// XQueryParser.g:575:66: p_CaseHybrid[$strict]
					{
					pushFollow(FOLLOW_p_CaseHybrid_in_p_TypeswitchHybrid5087);
					p_CaseHybrid199=p_CaseHybrid(strict);
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, p_CaseHybrid199.getTree());

					}
					break;

				default :
					if ( cnt83 >= 1 ) break loop83;
					if (state.backtracking>0) {state.failed=true; return retval;}
					EarlyExitException eee = new EarlyExitException(83, input);
					throw eee;
				}
				cnt83++;
			}

			k=(CommonToken)match(input,DEFAULT,FOLLOW_DEFAULT_in_p_TypeswitchHybrid5093); if (state.failed) return retval;
			if ( state.backtracking==0 ) {
			k_tree = (XQDTCommonTree)adaptor.create(k);
			adaptor.addChild(root_0, k_tree);
			}

			if ( state.backtracking==0 ) {ak(k);}
			// XQueryParser.g:575:109: ( DOLLAR p_VarName )?
			int alt84=2;
			int LA84_0 = input.LA(1);
			if ( (LA84_0==DOLLAR) ) {
				alt84=1;
			}
			switch (alt84) {
				case 1 :
					// XQueryParser.g:575:110: DOLLAR p_VarName
					{
					DOLLAR200=(CommonToken)match(input,DOLLAR,FOLLOW_DOLLAR_in_p_TypeswitchHybrid5098); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					DOLLAR200_tree = (XQDTCommonTree)adaptor.create(DOLLAR200);
					adaptor.addChild(root_0, DOLLAR200_tree);
					}

					pushFollow(FOLLOW_p_VarName_in_p_TypeswitchHybrid5100);
					p_VarName201=p_VarName();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, p_VarName201.getTree());

					}
					break;

			}

			k=(CommonToken)match(input,RETURN,FOLLOW_RETURN_in_p_TypeswitchHybrid5106); if (state.failed) return retval;
			if ( state.backtracking==0 ) {
			k_tree = (XQDTCommonTree)adaptor.create(k);
			adaptor.addChild(root_0, k_tree);
			}

			if ( state.backtracking==0 ) {ak(k);}
			pushFollow(FOLLOW_p_Hybrid_in_p_TypeswitchHybrid5110);
			p_Hybrid202=p_Hybrid(strict, false);
			state._fsp--;
			if (state.failed) return retval;
			if ( state.backtracking==0 ) adaptor.addChild(root_0, p_Hybrid202.getTree());

			}

			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (XQDTCommonTree)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
			retval.tree = (XQDTCommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "p_TypeswitchHybrid"


	public static class p_CaseHybrid_return extends ParserRuleReturnScope {
		XQDTCommonTree tree;
		@Override
		public XQDTCommonTree getTree() { return tree; }
	};


	// $ANTLR start "p_CaseHybrid"
	// XQueryParser.g:579:1: p_CaseHybrid[boolean strict] : k= CASE ( DOLLAR p_VarName k= AS )? p_SequenceTypeUnion k= RETURN p_ExprSingle[false] ;
	public final XQueryParser.p_CaseHybrid_return p_CaseHybrid(boolean strict) throws RecognitionException {
		XQueryParser.p_CaseHybrid_return retval = new XQueryParser.p_CaseHybrid_return();
		retval.start = input.LT(1);

		XQDTCommonTree root_0 = null;

		CommonToken k=null;
		CommonToken DOLLAR203=null;
		ParserRuleReturnScope p_VarName204 =null;
		ParserRuleReturnScope p_SequenceTypeUnion205 =null;
		ParserRuleReturnScope p_ExprSingle206 =null;

		XQDTCommonTree k_tree=null;
		XQDTCommonTree DOLLAR203_tree=null;

		try {
			// XQueryParser.g:580:9: (k= CASE ( DOLLAR p_VarName k= AS )? p_SequenceTypeUnion k= RETURN p_ExprSingle[false] )
			// XQueryParser.g:580:11: k= CASE ( DOLLAR p_VarName k= AS )? p_SequenceTypeUnion k= RETURN p_ExprSingle[false]
			{
			root_0 = (XQDTCommonTree)adaptor.nil();


			k=(CommonToken)match(input,CASE,FOLLOW_CASE_in_p_CaseHybrid5140); if (state.failed) return retval;
			if ( state.backtracking==0 ) {
			k_tree = (XQDTCommonTree)adaptor.create(k);
			adaptor.addChild(root_0, k_tree);
			}

			if ( state.backtracking==0 ) {ak(k);}
			// XQueryParser.g:580:28: ( DOLLAR p_VarName k= AS )?
			int alt85=2;
			int LA85_0 = input.LA(1);
			if ( (LA85_0==DOLLAR) ) {
				alt85=1;
			}
			switch (alt85) {
				case 1 :
					// XQueryParser.g:580:29: DOLLAR p_VarName k= AS
					{
					DOLLAR203=(CommonToken)match(input,DOLLAR,FOLLOW_DOLLAR_in_p_CaseHybrid5145); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					DOLLAR203_tree = (XQDTCommonTree)adaptor.create(DOLLAR203);
					adaptor.addChild(root_0, DOLLAR203_tree);
					}

					pushFollow(FOLLOW_p_VarName_in_p_CaseHybrid5147);
					p_VarName204=p_VarName();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, p_VarName204.getTree());

					k=(CommonToken)match(input,AS,FOLLOW_AS_in_p_CaseHybrid5151); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					k_tree = (XQDTCommonTree)adaptor.create(k);
					adaptor.addChild(root_0, k_tree);
					}

					if ( state.backtracking==0 ) {ak(k);}
					}
					break;

			}

			pushFollow(FOLLOW_p_SequenceTypeUnion_in_p_CaseHybrid5157);
			p_SequenceTypeUnion205=p_SequenceTypeUnion();
			state._fsp--;
			if (state.failed) return retval;
			if ( state.backtracking==0 ) adaptor.addChild(root_0, p_SequenceTypeUnion205.getTree());

			k=(CommonToken)match(input,RETURN,FOLLOW_RETURN_in_p_CaseHybrid5161); if (state.failed) return retval;
			if ( state.backtracking==0 ) {
			k_tree = (XQDTCommonTree)adaptor.create(k);
			adaptor.addChild(root_0, k_tree);
			}

			if ( state.backtracking==0 ) {ak(k);}
			pushFollow(FOLLOW_p_ExprSingle_in_p_CaseHybrid5165);
			p_ExprSingle206=p_ExprSingle(false);
			state._fsp--;
			if (state.failed) return retval;
			if ( state.backtracking==0 ) adaptor.addChild(root_0, p_ExprSingle206.getTree());

			}

			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (XQDTCommonTree)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
			retval.tree = (XQDTCommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "p_CaseHybrid"


	public static class p_SequenceTypeUnion_return extends ParserRuleReturnScope {
		XQDTCommonTree tree;
		@Override
		public XQDTCommonTree getTree() { return tree; }
	};


	// $ANTLR start "p_SequenceTypeUnion"
	// XQueryParser.g:584:1: p_SequenceTypeUnion : p_SequenceType ( VBAR p_SequenceType )* ;
	public final XQueryParser.p_SequenceTypeUnion_return p_SequenceTypeUnion() throws RecognitionException {
		XQueryParser.p_SequenceTypeUnion_return retval = new XQueryParser.p_SequenceTypeUnion_return();
		retval.start = input.LT(1);

		XQDTCommonTree root_0 = null;

		CommonToken VBAR208=null;
		ParserRuleReturnScope p_SequenceType207 =null;
		ParserRuleReturnScope p_SequenceType209 =null;

		XQDTCommonTree VBAR208_tree=null;

		try {
			// XQueryParser.g:585:9: ( p_SequenceType ( VBAR p_SequenceType )* )
			// XQueryParser.g:585:11: p_SequenceType ( VBAR p_SequenceType )*
			{
			root_0 = (XQDTCommonTree)adaptor.nil();


			pushFollow(FOLLOW_p_SequenceType_in_p_SequenceTypeUnion5192);
			p_SequenceType207=p_SequenceType();
			state._fsp--;
			if (state.failed) return retval;
			if ( state.backtracking==0 ) adaptor.addChild(root_0, p_SequenceType207.getTree());

			// XQueryParser.g:585:26: ( VBAR p_SequenceType )*
			loop86:
			while (true) {
				int alt86=2;
				int LA86_0 = input.LA(1);
				if ( (LA86_0==VBAR) ) {
					alt86=1;
				}

				switch (alt86) {
				case 1 :
					// XQueryParser.g:585:27: VBAR p_SequenceType
					{
					VBAR208=(CommonToken)match(input,VBAR,FOLLOW_VBAR_in_p_SequenceTypeUnion5195); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					VBAR208_tree = (XQDTCommonTree)adaptor.create(VBAR208);
					adaptor.addChild(root_0, VBAR208_tree);
					}

					pushFollow(FOLLOW_p_SequenceType_in_p_SequenceTypeUnion5197);
					p_SequenceType209=p_SequenceType();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, p_SequenceType209.getTree());

					}
					break;

				default :
					break loop86;
				}
			}

			}

			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (XQDTCommonTree)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
			retval.tree = (XQDTCommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "p_SequenceTypeUnion"


	public static class p_IfHybrid_return extends ParserRuleReturnScope {
		XQDTCommonTree tree;
		@Override
		public XQDTCommonTree getTree() { return tree; }
	};


	// $ANTLR start "p_IfHybrid"
	// XQueryParser.g:589:1: p_IfHybrid[boolean strict] : k= IF LPAREN p_Expr[true,true] RPAREN k= THEN p_Hybrid[$strict,false] k= ELSE p_Hybrid[$strict,false] ;
	public final XQueryParser.p_IfHybrid_return p_IfHybrid(boolean strict) throws RecognitionException {
		XQueryParser.p_IfHybrid_return retval = new XQueryParser.p_IfHybrid_return();
		retval.start = input.LT(1);

		XQDTCommonTree root_0 = null;

		CommonToken k=null;
		CommonToken LPAREN210=null;
		CommonToken RPAREN212=null;
		ParserRuleReturnScope p_Expr211 =null;
		ParserRuleReturnScope p_Hybrid213 =null;
		ParserRuleReturnScope p_Hybrid214 =null;

		XQDTCommonTree k_tree=null;
		XQDTCommonTree LPAREN210_tree=null;
		XQDTCommonTree RPAREN212_tree=null;

		try {
			// XQueryParser.g:590:9: (k= IF LPAREN p_Expr[true,true] RPAREN k= THEN p_Hybrid[$strict,false] k= ELSE p_Hybrid[$strict,false] )
			// XQueryParser.g:590:11: k= IF LPAREN p_Expr[true,true] RPAREN k= THEN p_Hybrid[$strict,false] k= ELSE p_Hybrid[$strict,false]
			{
			root_0 = (XQDTCommonTree)adaptor.nil();


			k=(CommonToken)match(input,IF,FOLLOW_IF_in_p_IfHybrid5228); if (state.failed) return retval;
			if ( state.backtracking==0 ) {
			k_tree = (XQDTCommonTree)adaptor.create(k);
			adaptor.addChild(root_0, k_tree);
			}

			if ( state.backtracking==0 ) {ak(k);}
			LPAREN210=(CommonToken)match(input,LPAREN,FOLLOW_LPAREN_in_p_IfHybrid5232); if (state.failed) return retval;
			if ( state.backtracking==0 ) {
			LPAREN210_tree = (XQDTCommonTree)adaptor.create(LPAREN210);
			adaptor.addChild(root_0, LPAREN210_tree);
			}

			pushFollow(FOLLOW_p_Expr_in_p_IfHybrid5234);
			p_Expr211=p_Expr(true, true);
			state._fsp--;
			if (state.failed) return retval;
			if ( state.backtracking==0 ) adaptor.addChild(root_0, p_Expr211.getTree());

			RPAREN212=(CommonToken)match(input,RPAREN,FOLLOW_RPAREN_in_p_IfHybrid5237); if (state.failed) return retval;
			if ( state.backtracking==0 ) {
			RPAREN212_tree = (XQDTCommonTree)adaptor.create(RPAREN212);
			adaptor.addChild(root_0, RPAREN212_tree);
			}

			k=(CommonToken)match(input,THEN,FOLLOW_THEN_in_p_IfHybrid5241); if (state.failed) return retval;
			if ( state.backtracking==0 ) {
			k_tree = (XQDTCommonTree)adaptor.create(k);
			adaptor.addChild(root_0, k_tree);
			}

			if ( state.backtracking==0 ) {ak(k);}
			pushFollow(FOLLOW_p_Hybrid_in_p_IfHybrid5245);
			p_Hybrid213=p_Hybrid(strict, false);
			state._fsp--;
			if (state.failed) return retval;
			if ( state.backtracking==0 ) adaptor.addChild(root_0, p_Hybrid213.getTree());

			k=(CommonToken)match(input,ELSE,FOLLOW_ELSE_in_p_IfHybrid5250); if (state.failed) return retval;
			if ( state.backtracking==0 ) {
			k_tree = (XQDTCommonTree)adaptor.create(k);
			adaptor.addChild(root_0, k_tree);
			}

			if ( state.backtracking==0 ) {ak(k);}
			pushFollow(FOLLOW_p_Hybrid_in_p_IfHybrid5254);
			p_Hybrid214=p_Hybrid(strict, false);
			state._fsp--;
			if (state.failed) return retval;
			if ( state.backtracking==0 ) adaptor.addChild(root_0, p_Hybrid214.getTree());

			}

			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (XQDTCommonTree)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
			retval.tree = (XQDTCommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "p_IfHybrid"


	public static class p_TryCatchExpr_return extends ParserRuleReturnScope {
		XQDTCommonTree tree;
		@Override
		public XQDTCommonTree getTree() { return tree; }
	};


	// $ANTLR start "p_TryCatchExpr"
	// XQueryParser.g:594:1: p_TryCatchExpr : p_TryClause ( p_CatchClause )+ ;
	public final XQueryParser.p_TryCatchExpr_return p_TryCatchExpr() throws RecognitionException {
		XQueryParser.p_TryCatchExpr_return retval = new XQueryParser.p_TryCatchExpr_return();
		retval.start = input.LT(1);

		XQDTCommonTree root_0 = null;

		ParserRuleReturnScope p_TryClause215 =null;
		ParserRuleReturnScope p_CatchClause216 =null;


		try {
			// XQueryParser.g:595:9: ( p_TryClause ( p_CatchClause )+ )
			// XQueryParser.g:595:11: p_TryClause ( p_CatchClause )+
			{
			root_0 = (XQDTCommonTree)adaptor.nil();


			pushFollow(FOLLOW_p_TryClause_in_p_TryCatchExpr5281);
			p_TryClause215=p_TryClause();
			state._fsp--;
			if (state.failed) return retval;
			if ( state.backtracking==0 ) adaptor.addChild(root_0, p_TryClause215.getTree());

			// XQueryParser.g:595:23: ( p_CatchClause )+
			int cnt87=0;
			loop87:
			while (true) {
				int alt87=2;
				int LA87_0 = input.LA(1);
				if ( (LA87_0==CATCH) ) {
					alt87=1;
				}

				switch (alt87) {
				case 1 :
					// XQueryParser.g:595:23: p_CatchClause
					{
					pushFollow(FOLLOW_p_CatchClause_in_p_TryCatchExpr5283);
					p_CatchClause216=p_CatchClause();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, p_CatchClause216.getTree());

					}
					break;

				default :
					if ( cnt87 >= 1 ) break loop87;
					if (state.backtracking>0) {state.failed=true; return retval;}
					EarlyExitException eee = new EarlyExitException(87, input);
					throw eee;
				}
				cnt87++;
			}

			}

			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (XQDTCommonTree)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
			retval.tree = (XQDTCommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "p_TryCatchExpr"


	public static class p_TryClause_return extends ParserRuleReturnScope {
		XQDTCommonTree tree;
		@Override
		public XQDTCommonTree getTree() { return tree; }
	};


	// $ANTLR start "p_TryClause"
	// XQueryParser.g:599:1: p_TryClause : k= TRY LBRACKET p_TryTargetExpr RBRACKET ;
	public final XQueryParser.p_TryClause_return p_TryClause() throws RecognitionException {
		XQueryParser.p_TryClause_return retval = new XQueryParser.p_TryClause_return();
		retval.start = input.LT(1);

		XQDTCommonTree root_0 = null;

		CommonToken k=null;
		CommonToken LBRACKET217=null;
		CommonToken RBRACKET219=null;
		ParserRuleReturnScope p_TryTargetExpr218 =null;

		XQDTCommonTree k_tree=null;
		XQDTCommonTree LBRACKET217_tree=null;
		XQDTCommonTree RBRACKET219_tree=null;

		try {
			// XQueryParser.g:600:9: (k= TRY LBRACKET p_TryTargetExpr RBRACKET )
			// XQueryParser.g:600:11: k= TRY LBRACKET p_TryTargetExpr RBRACKET
			{
			root_0 = (XQDTCommonTree)adaptor.nil();


			k=(CommonToken)match(input,TRY,FOLLOW_TRY_in_p_TryClause5312); if (state.failed) return retval;
			if ( state.backtracking==0 ) {
			k_tree = (XQDTCommonTree)adaptor.create(k);
			adaptor.addChild(root_0, k_tree);
			}

			if ( state.backtracking==0 ) {ak(k);}
			LBRACKET217=(CommonToken)match(input,LBRACKET,FOLLOW_LBRACKET_in_p_TryClause5316); if (state.failed) return retval;
			if ( state.backtracking==0 ) {
			LBRACKET217_tree = (XQDTCommonTree)adaptor.create(LBRACKET217);
			adaptor.addChild(root_0, LBRACKET217_tree);
			}

			pushFollow(FOLLOW_p_TryTargetExpr_in_p_TryClause5318);
			p_TryTargetExpr218=p_TryTargetExpr();
			state._fsp--;
			if (state.failed) return retval;
			if ( state.backtracking==0 ) adaptor.addChild(root_0, p_TryTargetExpr218.getTree());

			RBRACKET219=(CommonToken)match(input,RBRACKET,FOLLOW_RBRACKET_in_p_TryClause5320); if (state.failed) return retval;
			if ( state.backtracking==0 ) {
			RBRACKET219_tree = (XQDTCommonTree)adaptor.create(RBRACKET219);
			adaptor.addChild(root_0, RBRACKET219_tree);
			}

			}

			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (XQDTCommonTree)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
			retval.tree = (XQDTCommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "p_TryClause"


	public static class p_TryTargetExpr_return extends ParserRuleReturnScope {
		XQDTCommonTree tree;
		@Override
		public XQDTCommonTree getTree() { return tree; }
	};


	// $ANTLR start "p_TryTargetExpr"
	// XQueryParser.g:604:1: p_TryTargetExpr : p_Expr[false,false] ;
	public final XQueryParser.p_TryTargetExpr_return p_TryTargetExpr() throws RecognitionException {
		XQueryParser.p_TryTargetExpr_return retval = new XQueryParser.p_TryTargetExpr_return();
		retval.start = input.LT(1);

		XQDTCommonTree root_0 = null;

		ParserRuleReturnScope p_Expr220 =null;


		try {
			// XQueryParser.g:605:9: ( p_Expr[false,false] )
			// XQueryParser.g:605:11: p_Expr[false,false]
			{
			root_0 = (XQDTCommonTree)adaptor.nil();


			pushFollow(FOLLOW_p_Expr_in_p_TryTargetExpr5346);
			p_Expr220=p_Expr(false, false);
			state._fsp--;
			if (state.failed) return retval;
			if ( state.backtracking==0 ) adaptor.addChild(root_0, p_Expr220.getTree());

			}

			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (XQDTCommonTree)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
			retval.tree = (XQDTCommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "p_TryTargetExpr"


	public static class p_CatchClause_return extends ParserRuleReturnScope {
		XQDTCommonTree tree;
		@Override
		public XQDTCommonTree getTree() { return tree; }
	};


	// $ANTLR start "p_CatchClause"
	// XQueryParser.g:609:1: p_CatchClause : k= CATCH p_CatchErrorList LBRACKET p_Expr[false,false] RBRACKET ;
	public final XQueryParser.p_CatchClause_return p_CatchClause() throws RecognitionException {
		XQueryParser.p_CatchClause_return retval = new XQueryParser.p_CatchClause_return();
		retval.start = input.LT(1);

		XQDTCommonTree root_0 = null;

		CommonToken k=null;
		CommonToken LBRACKET222=null;
		CommonToken RBRACKET224=null;
		ParserRuleReturnScope p_CatchErrorList221 =null;
		ParserRuleReturnScope p_Expr223 =null;

		XQDTCommonTree k_tree=null;
		XQDTCommonTree LBRACKET222_tree=null;
		XQDTCommonTree RBRACKET224_tree=null;

		try {
			// XQueryParser.g:610:9: (k= CATCH p_CatchErrorList LBRACKET p_Expr[false,false] RBRACKET )
			// XQueryParser.g:610:11: k= CATCH p_CatchErrorList LBRACKET p_Expr[false,false] RBRACKET
			{
			root_0 = (XQDTCommonTree)adaptor.nil();


			k=(CommonToken)match(input,CATCH,FOLLOW_CATCH_in_p_CatchClause5375); if (state.failed) return retval;
			if ( state.backtracking==0 ) {
			k_tree = (XQDTCommonTree)adaptor.create(k);
			adaptor.addChild(root_0, k_tree);
			}

			if ( state.backtracking==0 ) {ak(k);}
			pushFollow(FOLLOW_p_CatchErrorList_in_p_CatchClause5379);
			p_CatchErrorList221=p_CatchErrorList();
			state._fsp--;
			if (state.failed) return retval;
			if ( state.backtracking==0 ) adaptor.addChild(root_0, p_CatchErrorList221.getTree());

			LBRACKET222=(CommonToken)match(input,LBRACKET,FOLLOW_LBRACKET_in_p_CatchClause5381); if (state.failed) return retval;
			if ( state.backtracking==0 ) {
			LBRACKET222_tree = (XQDTCommonTree)adaptor.create(LBRACKET222);
			adaptor.addChild(root_0, LBRACKET222_tree);
			}

			pushFollow(FOLLOW_p_Expr_in_p_CatchClause5383);
			p_Expr223=p_Expr(false, false);
			state._fsp--;
			if (state.failed) return retval;
			if ( state.backtracking==0 ) adaptor.addChild(root_0, p_Expr223.getTree());

			RBRACKET224=(CommonToken)match(input,RBRACKET,FOLLOW_RBRACKET_in_p_CatchClause5386); if (state.failed) return retval;
			if ( state.backtracking==0 ) {
			RBRACKET224_tree = (XQDTCommonTree)adaptor.create(RBRACKET224);
			adaptor.addChild(root_0, RBRACKET224_tree);
			}

			}

			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (XQDTCommonTree)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
			retval.tree = (XQDTCommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "p_CatchClause"


	public static class p_CatchErrorList_return extends ParserRuleReturnScope {
		XQDTCommonTree tree;
		@Override
		public XQDTCommonTree getTree() { return tree; }
	};


	// $ANTLR start "p_CatchErrorList"
	// XQueryParser.g:614:1: p_CatchErrorList : ( p_NameTest ( VBAR p_NameTest )* |{...}? => () );
	public final XQueryParser.p_CatchErrorList_return p_CatchErrorList() throws RecognitionException {
		XQueryParser.p_CatchErrorList_return retval = new XQueryParser.p_CatchErrorList_return();
		retval.start = input.LT(1);

		XQDTCommonTree root_0 = null;

		CommonToken VBAR226=null;
		ParserRuleReturnScope p_NameTest225 =null;
		ParserRuleReturnScope p_NameTest227 =null;

		XQDTCommonTree VBAR226_tree=null;

		try {
			// XQueryParser.g:615:9: ( p_NameTest ( VBAR p_NameTest )* |{...}? => () )
			int alt89=2;
			int LA89_0 = input.LA(1);
			if ( ((LA89_0 >= AFTER && LA89_0 <= ALLOWING)||(LA89_0 >= AMP_ER && LA89_0 <= AND)||(LA89_0 >= ANY && LA89_0 <= ATTRIBUTE)||(LA89_0 >= BASE_URI && LA89_0 <= BINARY)||(LA89_0 >= BOUNDARY_SPACE && LA89_0 <= CATCH)||(LA89_0 >= CHECK && LA89_0 <= CHILD)||(LA89_0 >= COLLATION && LA89_0 <= COLLECTION)||LA89_0==COMMENT||(LA89_0 >= CONSTRAINT && LA89_0 <= DOCUMENT_NODE)||(LA89_0 >= ELEMENT && LA89_0 <= EMPTY)||(LA89_0 >= EMPTY_SEQUENCE && LA89_0 <= EQ)||(LA89_0 >= EVERY && LA89_0 <= GE)||(LA89_0 >= GREATEST && LA89_0 <= GT)||(LA89_0 >= IDIV && LA89_0 <= LAX)||(LA89_0 >= LE && LA89_0 <= LOWERCASE)||LA89_0==LT||LA89_0==L_NCName||(LA89_0 >= MINUS_SIGN && LA89_0 <= NAN)||(LA89_0 >= NE && LA89_0 <= NOT)||(LA89_0 >= NO_INHERIT && LA89_0 <= PHRASE)||(LA89_0 >= PRECEDING && LA89_0 <= PROCESSING_INSTRUCTION)||(LA89_0 >= QUOT && LA89_0 <= QUOT_ER)||(LA89_0 >= RELATIONSHIP && LA89_0 <= REVALIDATION)||(LA89_0 >= SAME && LA89_0 <= SELF)||(LA89_0 >= SENSITIVE && LA89_0 <= SKIP)||LA89_0==SLIDING||(LA89_0 >= SOME && LA89_0 <= STRIP)||(LA89_0 >= SWITCH && LA89_0 <= UNORDERED)||(LA89_0 >= UPPERCASE && LA89_0 <= VARIABLE)||(LA89_0 >= VERSION && LA89_0 <= WORDS)||(LA89_0 >= XQUERY && LA89_0 <= ZERO_DIGIT)||LA89_0==EXPLICITLY) ) {
				alt89=1;
			}
			else if ( (LA89_0==LBRACKET) && ((lc(MLS)))) {
				alt89=2;
			}

			switch (alt89) {
				case 1 :
					// XQueryParser.g:615:11: p_NameTest ( VBAR p_NameTest )*
					{
					root_0 = (XQDTCommonTree)adaptor.nil();


					pushFollow(FOLLOW_p_NameTest_in_p_CatchErrorList5412);
					p_NameTest225=p_NameTest();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, p_NameTest225.getTree());

					// XQueryParser.g:615:22: ( VBAR p_NameTest )*
					loop88:
					while (true) {
						int alt88=2;
						int LA88_0 = input.LA(1);
						if ( (LA88_0==VBAR) ) {
							alt88=1;
						}

						switch (alt88) {
						case 1 :
							// XQueryParser.g:615:23: VBAR p_NameTest
							{
							VBAR226=(CommonToken)match(input,VBAR,FOLLOW_VBAR_in_p_CatchErrorList5415); if (state.failed) return retval;
							if ( state.backtracking==0 ) {
							VBAR226_tree = (XQDTCommonTree)adaptor.create(VBAR226);
							adaptor.addChild(root_0, VBAR226_tree);
							}

							pushFollow(FOLLOW_p_NameTest_in_p_CatchErrorList5417);
							p_NameTest227=p_NameTest();
							state._fsp--;
							if (state.failed) return retval;
							if ( state.backtracking==0 ) adaptor.addChild(root_0, p_NameTest227.getTree());

							}
							break;

						default :
							break loop88;
						}
					}

					}
					break;
				case 2 :
					// XQueryParser.g:616:11: {...}? => ()
					{
					root_0 = (XQDTCommonTree)adaptor.nil();


					if ( !((lc(MLS))) ) {
						if (state.backtracking>0) {state.failed=true; return retval;}
						throw new FailedPredicateException(input, "p_CatchErrorList", "lc(MLS)");
					}
					// XQueryParser.g:616:24: ()
					// XQueryParser.g:616:38: 
					{
					}

					}
					break;

			}
			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (XQDTCommonTree)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
			retval.tree = (XQDTCommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "p_CatchErrorList"


	public static class p_OrExpr_return extends ParserRuleReturnScope {
		XQDTCommonTree tree;
		@Override
		public XQDTCommonTree getTree() { return tree; }
	};


	// $ANTLR start "p_OrExpr"
	// XQueryParser.g:620:1: p_OrExpr : p_AndExpr (k= OR p_AndExpr )* ;
	public final XQueryParser.p_OrExpr_return p_OrExpr() throws RecognitionException {
		XQueryParser.p_OrExpr_return retval = new XQueryParser.p_OrExpr_return();
		retval.start = input.LT(1);

		XQDTCommonTree root_0 = null;

		CommonToken k=null;
		ParserRuleReturnScope p_AndExpr228 =null;
		ParserRuleReturnScope p_AndExpr229 =null;

		XQDTCommonTree k_tree=null;

		try {
			// XQueryParser.g:621:9: ( p_AndExpr (k= OR p_AndExpr )* )
			// XQueryParser.g:621:11: p_AndExpr (k= OR p_AndExpr )*
			{
			root_0 = (XQDTCommonTree)adaptor.nil();


			pushFollow(FOLLOW_p_AndExpr_in_p_OrExpr5462);
			p_AndExpr228=p_AndExpr();
			state._fsp--;
			if (state.failed) return retval;
			if ( state.backtracking==0 ) adaptor.addChild(root_0, p_AndExpr228.getTree());

			// XQueryParser.g:621:21: (k= OR p_AndExpr )*
			loop90:
			while (true) {
				int alt90=2;
				int LA90_0 = input.LA(1);
				if ( (LA90_0==OR) ) {
					alt90=1;
				}

				switch (alt90) {
				case 1 :
					// XQueryParser.g:621:23: k= OR p_AndExpr
					{
					k=(CommonToken)match(input,OR,FOLLOW_OR_in_p_OrExpr5468); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					k_tree = (XQDTCommonTree)adaptor.create(k);
					adaptor.addChild(root_0, k_tree);
					}

					if ( state.backtracking==0 ) {ak(k);}
					pushFollow(FOLLOW_p_AndExpr_in_p_OrExpr5472);
					p_AndExpr229=p_AndExpr();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, p_AndExpr229.getTree());

					}
					break;

				default :
					break loop90;
				}
			}

			}

			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (XQDTCommonTree)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
			retval.tree = (XQDTCommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "p_OrExpr"


	public static class p_AndExpr_return extends ParserRuleReturnScope {
		XQDTCommonTree tree;
		@Override
		public XQDTCommonTree getTree() { return tree; }
	};


	// $ANTLR start "p_AndExpr"
	// XQueryParser.g:625:1: p_AndExpr : p_ComparisonExpr (k= AND p_ComparisonExpr )* ;
	public final XQueryParser.p_AndExpr_return p_AndExpr() throws RecognitionException {
		XQueryParser.p_AndExpr_return retval = new XQueryParser.p_AndExpr_return();
		retval.start = input.LT(1);

		XQDTCommonTree root_0 = null;

		CommonToken k=null;
		ParserRuleReturnScope p_ComparisonExpr230 =null;
		ParserRuleReturnScope p_ComparisonExpr231 =null;

		XQDTCommonTree k_tree=null;

		try {
			// XQueryParser.g:626:9: ( p_ComparisonExpr (k= AND p_ComparisonExpr )* )
			// XQueryParser.g:626:11: p_ComparisonExpr (k= AND p_ComparisonExpr )*
			{
			root_0 = (XQDTCommonTree)adaptor.nil();


			pushFollow(FOLLOW_p_ComparisonExpr_in_p_AndExpr5501);
			p_ComparisonExpr230=p_ComparisonExpr();
			state._fsp--;
			if (state.failed) return retval;
			if ( state.backtracking==0 ) adaptor.addChild(root_0, p_ComparisonExpr230.getTree());

			// XQueryParser.g:626:28: (k= AND p_ComparisonExpr )*
			loop91:
			while (true) {
				int alt91=2;
				int LA91_0 = input.LA(1);
				if ( (LA91_0==AND) ) {
					alt91=1;
				}

				switch (alt91) {
				case 1 :
					// XQueryParser.g:626:30: k= AND p_ComparisonExpr
					{
					k=(CommonToken)match(input,AND,FOLLOW_AND_in_p_AndExpr5507); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					k_tree = (XQDTCommonTree)adaptor.create(k);
					adaptor.addChild(root_0, k_tree);
					}

					if ( state.backtracking==0 ) {ak(k);}
					pushFollow(FOLLOW_p_ComparisonExpr_in_p_AndExpr5511);
					p_ComparisonExpr231=p_ComparisonExpr();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, p_ComparisonExpr231.getTree());

					}
					break;

				default :
					break loop91;
				}
			}

			}

			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (XQDTCommonTree)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
			retval.tree = (XQDTCommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "p_AndExpr"


	public static class p_ComparisonExpr_return extends ParserRuleReturnScope {
		XQDTCommonTree tree;
		@Override
		public XQDTCommonTree getTree() { return tree; }
	};


	// $ANTLR start "p_ComparisonExpr"
	// XQueryParser.g:631:1: p_ComparisonExpr : p_FTContainsExpr ( ( p_ValueComp | p_GeneralComp | p_NodeComp ) p_FTContainsExpr )? ;
	public final XQueryParser.p_ComparisonExpr_return p_ComparisonExpr() throws RecognitionException {
		XQueryParser.p_ComparisonExpr_return retval = new XQueryParser.p_ComparisonExpr_return();
		retval.start = input.LT(1);

		XQDTCommonTree root_0 = null;

		ParserRuleReturnScope p_FTContainsExpr232 =null;
		ParserRuleReturnScope p_ValueComp233 =null;
		ParserRuleReturnScope p_GeneralComp234 =null;
		ParserRuleReturnScope p_NodeComp235 =null;
		ParserRuleReturnScope p_FTContainsExpr236 =null;


		try {
			// XQueryParser.g:632:9: ( p_FTContainsExpr ( ( p_ValueComp | p_GeneralComp | p_NodeComp ) p_FTContainsExpr )? )
			// XQueryParser.g:632:11: p_FTContainsExpr ( ( p_ValueComp | p_GeneralComp | p_NodeComp ) p_FTContainsExpr )?
			{
			root_0 = (XQDTCommonTree)adaptor.nil();


			pushFollow(FOLLOW_p_FTContainsExpr_in_p_ComparisonExpr5541);
			p_FTContainsExpr232=p_FTContainsExpr();
			state._fsp--;
			if (state.failed) return retval;
			if ( state.backtracking==0 ) adaptor.addChild(root_0, p_FTContainsExpr232.getTree());

			// XQueryParser.g:632:28: ( ( p_ValueComp | p_GeneralComp | p_NodeComp ) p_FTContainsExpr )?
			int alt93=2;
			int LA93_0 = input.LA(1);
			if ( ((LA93_0 >= EQ && LA93_0 <= EQUAL)||(LA93_0 >= GE && LA93_0 <= GREATER_GREATER)||LA93_0==GT||LA93_0==IS||LA93_0==LE||LA93_0==LT||LA93_0==NE||LA93_0==NOTEQUAL||(LA93_0 >= SMALLER && LA93_0 <= SMALLER_SMALLER)) ) {
				alt93=1;
			}
			switch (alt93) {
				case 1 :
					// XQueryParser.g:632:30: ( p_ValueComp | p_GeneralComp | p_NodeComp ) p_FTContainsExpr
					{
					// XQueryParser.g:632:30: ( p_ValueComp | p_GeneralComp | p_NodeComp )
					int alt92=3;
					switch ( input.LA(1) ) {
					case EQ:
					case GE:
					case GT:
					case LE:
					case LT:
					case NE:
						{
						alt92=1;
						}
						break;
					case EQUAL:
					case GREATER:
					case GREATEREQ:
					case NOTEQUAL:
					case SMALLER:
					case SMALLEREQ:
						{
						alt92=2;
						}
						break;
					case GREATER_GREATER:
					case IS:
					case SMALLER_SMALLER:
						{
						alt92=3;
						}
						break;
					default:
						if (state.backtracking>0) {state.failed=true; return retval;}
						NoViableAltException nvae =
							new NoViableAltException("", 92, 0, input);
						throw nvae;
					}
					switch (alt92) {
						case 1 :
							// XQueryParser.g:632:31: p_ValueComp
							{
							pushFollow(FOLLOW_p_ValueComp_in_p_ComparisonExpr5546);
							p_ValueComp233=p_ValueComp();
							state._fsp--;
							if (state.failed) return retval;
							if ( state.backtracking==0 ) adaptor.addChild(root_0, p_ValueComp233.getTree());

							}
							break;
						case 2 :
							// XQueryParser.g:632:45: p_GeneralComp
							{
							pushFollow(FOLLOW_p_GeneralComp_in_p_ComparisonExpr5550);
							p_GeneralComp234=p_GeneralComp();
							state._fsp--;
							if (state.failed) return retval;
							if ( state.backtracking==0 ) adaptor.addChild(root_0, p_GeneralComp234.getTree());

							}
							break;
						case 3 :
							// XQueryParser.g:632:61: p_NodeComp
							{
							pushFollow(FOLLOW_p_NodeComp_in_p_ComparisonExpr5554);
							p_NodeComp235=p_NodeComp();
							state._fsp--;
							if (state.failed) return retval;
							if ( state.backtracking==0 ) adaptor.addChild(root_0, p_NodeComp235.getTree());

							}
							break;

					}

					pushFollow(FOLLOW_p_FTContainsExpr_in_p_ComparisonExpr5557);
					p_FTContainsExpr236=p_FTContainsExpr();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, p_FTContainsExpr236.getTree());

					}
					break;

			}

			}

			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (XQDTCommonTree)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
			retval.tree = (XQDTCommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "p_ComparisonExpr"


	public static class p_StringConcatExpr_return extends ParserRuleReturnScope {
		XQDTCommonTree tree;
		@Override
		public XQDTCommonTree getTree() { return tree; }
	};


	// $ANTLR start "p_StringConcatExpr"
	// XQueryParser.g:635:1: p_StringConcatExpr : p_RangeExpr ( CONCAT p_RangeExpr )* ;
	public final XQueryParser.p_StringConcatExpr_return p_StringConcatExpr() throws RecognitionException {
		XQueryParser.p_StringConcatExpr_return retval = new XQueryParser.p_StringConcatExpr_return();
		retval.start = input.LT(1);

		XQDTCommonTree root_0 = null;

		CommonToken CONCAT238=null;
		ParserRuleReturnScope p_RangeExpr237 =null;
		ParserRuleReturnScope p_RangeExpr239 =null;

		XQDTCommonTree CONCAT238_tree=null;

		try {
			// XQueryParser.g:636:9: ( p_RangeExpr ( CONCAT p_RangeExpr )* )
			// XQueryParser.g:636:11: p_RangeExpr ( CONCAT p_RangeExpr )*
			{
			root_0 = (XQDTCommonTree)adaptor.nil();


			pushFollow(FOLLOW_p_RangeExpr_in_p_StringConcatExpr5585);
			p_RangeExpr237=p_RangeExpr();
			state._fsp--;
			if (state.failed) return retval;
			if ( state.backtracking==0 ) adaptor.addChild(root_0, p_RangeExpr237.getTree());

			// XQueryParser.g:636:23: ( CONCAT p_RangeExpr )*
			loop94:
			while (true) {
				int alt94=2;
				int LA94_0 = input.LA(1);
				if ( (LA94_0==CONCAT) ) {
					alt94=1;
				}

				switch (alt94) {
				case 1 :
					// XQueryParser.g:636:25: CONCAT p_RangeExpr
					{
					CONCAT238=(CommonToken)match(input,CONCAT,FOLLOW_CONCAT_in_p_StringConcatExpr5589); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					CONCAT238_tree = (XQDTCommonTree)adaptor.create(CONCAT238);
					adaptor.addChild(root_0, CONCAT238_tree);
					}

					pushFollow(FOLLOW_p_RangeExpr_in_p_StringConcatExpr5591);
					p_RangeExpr239=p_RangeExpr();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, p_RangeExpr239.getTree());

					}
					break;

				default :
					break loop94;
				}
			}

			}

			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (XQDTCommonTree)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
			retval.tree = (XQDTCommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "p_StringConcatExpr"


	public static class p_RangeExpr_return extends ParserRuleReturnScope {
		XQDTCommonTree tree;
		@Override
		public XQDTCommonTree getTree() { return tree; }
	};


	// $ANTLR start "p_RangeExpr"
	// XQueryParser.g:640:1: p_RangeExpr : p_AdditiveExpr (k= TO p_AdditiveExpr )? ;
	public final XQueryParser.p_RangeExpr_return p_RangeExpr() throws RecognitionException {
		XQueryParser.p_RangeExpr_return retval = new XQueryParser.p_RangeExpr_return();
		retval.start = input.LT(1);

		XQDTCommonTree root_0 = null;

		CommonToken k=null;
		ParserRuleReturnScope p_AdditiveExpr240 =null;
		ParserRuleReturnScope p_AdditiveExpr241 =null;

		XQDTCommonTree k_tree=null;

		try {
			// XQueryParser.g:641:9: ( p_AdditiveExpr (k= TO p_AdditiveExpr )? )
			// XQueryParser.g:641:11: p_AdditiveExpr (k= TO p_AdditiveExpr )?
			{
			root_0 = (XQDTCommonTree)adaptor.nil();


			pushFollow(FOLLOW_p_AdditiveExpr_in_p_RangeExpr5620);
			p_AdditiveExpr240=p_AdditiveExpr();
			state._fsp--;
			if (state.failed) return retval;
			if ( state.backtracking==0 ) adaptor.addChild(root_0, p_AdditiveExpr240.getTree());

			// XQueryParser.g:641:26: (k= TO p_AdditiveExpr )?
			int alt95=2;
			int LA95_0 = input.LA(1);
			if ( (LA95_0==TO) ) {
				alt95=1;
			}
			switch (alt95) {
				case 1 :
					// XQueryParser.g:641:28: k= TO p_AdditiveExpr
					{
					k=(CommonToken)match(input,TO,FOLLOW_TO_in_p_RangeExpr5626); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					k_tree = (XQDTCommonTree)adaptor.create(k);
					adaptor.addChild(root_0, k_tree);
					}

					if ( state.backtracking==0 ) {ak(k);}
					pushFollow(FOLLOW_p_AdditiveExpr_in_p_RangeExpr5630);
					p_AdditiveExpr241=p_AdditiveExpr();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, p_AdditiveExpr241.getTree());

					}
					break;

			}

			}

			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (XQDTCommonTree)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
			retval.tree = (XQDTCommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "p_RangeExpr"


	public static class p_AdditiveExpr_return extends ParserRuleReturnScope {
		XQDTCommonTree tree;
		@Override
		public XQDTCommonTree getTree() { return tree; }
	};


	// $ANTLR start "p_AdditiveExpr"
	// XQueryParser.g:645:1: p_AdditiveExpr : p_MultiplicativeExpr ( ( PLUS | MINUS ) p_MultiplicativeExpr )* ;
	public final XQueryParser.p_AdditiveExpr_return p_AdditiveExpr() throws RecognitionException {
		XQueryParser.p_AdditiveExpr_return retval = new XQueryParser.p_AdditiveExpr_return();
		retval.start = input.LT(1);

		XQDTCommonTree root_0 = null;

		CommonToken set243=null;
		ParserRuleReturnScope p_MultiplicativeExpr242 =null;
		ParserRuleReturnScope p_MultiplicativeExpr244 =null;

		XQDTCommonTree set243_tree=null;

		try {
			// XQueryParser.g:646:9: ( p_MultiplicativeExpr ( ( PLUS | MINUS ) p_MultiplicativeExpr )* )
			// XQueryParser.g:646:11: p_MultiplicativeExpr ( ( PLUS | MINUS ) p_MultiplicativeExpr )*
			{
			root_0 = (XQDTCommonTree)adaptor.nil();


			pushFollow(FOLLOW_p_MultiplicativeExpr_in_p_AdditiveExpr5659);
			p_MultiplicativeExpr242=p_MultiplicativeExpr();
			state._fsp--;
			if (state.failed) return retval;
			if ( state.backtracking==0 ) adaptor.addChild(root_0, p_MultiplicativeExpr242.getTree());

			// XQueryParser.g:646:32: ( ( PLUS | MINUS ) p_MultiplicativeExpr )*
			loop96:
			while (true) {
				int alt96=2;
				int LA96_0 = input.LA(1);
				if ( (LA96_0==MINUS||LA96_0==PLUS) ) {
					alt96=1;
				}

				switch (alt96) {
				case 1 :
					// XQueryParser.g:646:34: ( PLUS | MINUS ) p_MultiplicativeExpr
					{
					set243=(CommonToken)input.LT(1);
					if ( input.LA(1)==MINUS||input.LA(1)==PLUS ) {
						input.consume();
						if ( state.backtracking==0 ) adaptor.addChild(root_0, (XQDTCommonTree)adaptor.create(set243));
						state.errorRecovery=false;
						state.failed=false;
					}
					else {
						if (state.backtracking>0) {state.failed=true; return retval;}
						MismatchedSetException mse = new MismatchedSetException(null,input);
						throw mse;
					}
					pushFollow(FOLLOW_p_MultiplicativeExpr_in_p_AdditiveExpr5671);
					p_MultiplicativeExpr244=p_MultiplicativeExpr();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, p_MultiplicativeExpr244.getTree());

					}
					break;

				default :
					break loop96;
				}
			}

			}

			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (XQDTCommonTree)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
			retval.tree = (XQDTCommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "p_AdditiveExpr"


	public static class p_MultiplicativeExpr_return extends ParserRuleReturnScope {
		XQDTCommonTree tree;
		@Override
		public XQDTCommonTree getTree() { return tree; }
	};


	// $ANTLR start "p_MultiplicativeExpr"
	// XQueryParser.g:650:1: p_MultiplicativeExpr : p_UnionExpr ( ( STAR | (k= DIV |k= IDIV |k= MOD ) ) p_UnionExpr )* ;
	public final XQueryParser.p_MultiplicativeExpr_return p_MultiplicativeExpr() throws RecognitionException {
		XQueryParser.p_MultiplicativeExpr_return retval = new XQueryParser.p_MultiplicativeExpr_return();
		retval.start = input.LT(1);

		XQDTCommonTree root_0 = null;

		CommonToken k=null;
		CommonToken STAR246=null;
		ParserRuleReturnScope p_UnionExpr245 =null;
		ParserRuleReturnScope p_UnionExpr247 =null;

		XQDTCommonTree k_tree=null;
		XQDTCommonTree STAR246_tree=null;

		try {
			// XQueryParser.g:651:9: ( p_UnionExpr ( ( STAR | (k= DIV |k= IDIV |k= MOD ) ) p_UnionExpr )* )
			// XQueryParser.g:651:11: p_UnionExpr ( ( STAR | (k= DIV |k= IDIV |k= MOD ) ) p_UnionExpr )*
			{
			root_0 = (XQDTCommonTree)adaptor.nil();


			pushFollow(FOLLOW_p_UnionExpr_in_p_MultiplicativeExpr5700);
			p_UnionExpr245=p_UnionExpr();
			state._fsp--;
			if (state.failed) return retval;
			if ( state.backtracking==0 ) adaptor.addChild(root_0, p_UnionExpr245.getTree());

			// XQueryParser.g:651:23: ( ( STAR | (k= DIV |k= IDIV |k= MOD ) ) p_UnionExpr )*
			loop99:
			while (true) {
				int alt99=2;
				int LA99_0 = input.LA(1);
				if ( (LA99_0==DIV||LA99_0==IDIV||LA99_0==MOD||LA99_0==STAR) ) {
					alt99=1;
				}

				switch (alt99) {
				case 1 :
					// XQueryParser.g:651:25: ( STAR | (k= DIV |k= IDIV |k= MOD ) ) p_UnionExpr
					{
					// XQueryParser.g:651:25: ( STAR | (k= DIV |k= IDIV |k= MOD ) )
					int alt98=2;
					int LA98_0 = input.LA(1);
					if ( (LA98_0==STAR) ) {
						alt98=1;
					}
					else if ( (LA98_0==DIV||LA98_0==IDIV||LA98_0==MOD) ) {
						alt98=2;
					}

					else {
						if (state.backtracking>0) {state.failed=true; return retval;}
						NoViableAltException nvae =
							new NoViableAltException("", 98, 0, input);
						throw nvae;
					}

					switch (alt98) {
						case 1 :
							// XQueryParser.g:651:26: STAR
							{
							STAR246=(CommonToken)match(input,STAR,FOLLOW_STAR_in_p_MultiplicativeExpr5705); if (state.failed) return retval;
							if ( state.backtracking==0 ) {
							STAR246_tree = (XQDTCommonTree)adaptor.create(STAR246);
							adaptor.addChild(root_0, STAR246_tree);
							}

							}
							break;
						case 2 :
							// XQueryParser.g:651:33: (k= DIV |k= IDIV |k= MOD )
							{
							// XQueryParser.g:651:33: (k= DIV |k= IDIV |k= MOD )
							int alt97=3;
							switch ( input.LA(1) ) {
							case DIV:
								{
								alt97=1;
								}
								break;
							case IDIV:
								{
								alt97=2;
								}
								break;
							case MOD:
								{
								alt97=3;
								}
								break;
							default:
								if (state.backtracking>0) {state.failed=true; return retval;}
								NoViableAltException nvae =
									new NoViableAltException("", 97, 0, input);
								throw nvae;
							}
							switch (alt97) {
								case 1 :
									// XQueryParser.g:651:34: k= DIV
									{
									k=(CommonToken)match(input,DIV,FOLLOW_DIV_in_p_MultiplicativeExpr5712); if (state.failed) return retval;
									if ( state.backtracking==0 ) {
									k_tree = (XQDTCommonTree)adaptor.create(k);
									adaptor.addChild(root_0, k_tree);
									}

									}
									break;
								case 2 :
									// XQueryParser.g:651:42: k= IDIV
									{
									k=(CommonToken)match(input,IDIV,FOLLOW_IDIV_in_p_MultiplicativeExpr5718); if (state.failed) return retval;
									if ( state.backtracking==0 ) {
									k_tree = (XQDTCommonTree)adaptor.create(k);
									adaptor.addChild(root_0, k_tree);
									}

									}
									break;
								case 3 :
									// XQueryParser.g:651:51: k= MOD
									{
									k=(CommonToken)match(input,MOD,FOLLOW_MOD_in_p_MultiplicativeExpr5724); if (state.failed) return retval;
									if ( state.backtracking==0 ) {
									k_tree = (XQDTCommonTree)adaptor.create(k);
									adaptor.addChild(root_0, k_tree);
									}

									}
									break;

							}

							if ( state.backtracking==0 ) {ak(k);}
							}
							break;

					}

					pushFollow(FOLLOW_p_UnionExpr_in_p_MultiplicativeExpr5730);
					p_UnionExpr247=p_UnionExpr();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, p_UnionExpr247.getTree());

					}
					break;

				default :
					break loop99;
				}
			}

			}

			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (XQDTCommonTree)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
			retval.tree = (XQDTCommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "p_MultiplicativeExpr"


	public static class p_UnionExpr_return extends ParserRuleReturnScope {
		XQDTCommonTree tree;
		@Override
		public XQDTCommonTree getTree() { return tree; }
	};


	// $ANTLR start "p_UnionExpr"
	// XQueryParser.g:655:1: p_UnionExpr : p_IntersectExceptExpr ( (k= UNION | VBAR ) p_IntersectExceptExpr )* ;
	public final XQueryParser.p_UnionExpr_return p_UnionExpr() throws RecognitionException {
		XQueryParser.p_UnionExpr_return retval = new XQueryParser.p_UnionExpr_return();
		retval.start = input.LT(1);

		XQDTCommonTree root_0 = null;

		CommonToken k=null;
		CommonToken VBAR249=null;
		ParserRuleReturnScope p_IntersectExceptExpr248 =null;
		ParserRuleReturnScope p_IntersectExceptExpr250 =null;

		XQDTCommonTree k_tree=null;
		XQDTCommonTree VBAR249_tree=null;

		try {
			// XQueryParser.g:656:9: ( p_IntersectExceptExpr ( (k= UNION | VBAR ) p_IntersectExceptExpr )* )
			// XQueryParser.g:656:11: p_IntersectExceptExpr ( (k= UNION | VBAR ) p_IntersectExceptExpr )*
			{
			root_0 = (XQDTCommonTree)adaptor.nil();


			pushFollow(FOLLOW_p_IntersectExceptExpr_in_p_UnionExpr5759);
			p_IntersectExceptExpr248=p_IntersectExceptExpr();
			state._fsp--;
			if (state.failed) return retval;
			if ( state.backtracking==0 ) adaptor.addChild(root_0, p_IntersectExceptExpr248.getTree());

			// XQueryParser.g:656:33: ( (k= UNION | VBAR ) p_IntersectExceptExpr )*
			loop101:
			while (true) {
				int alt101=2;
				int LA101_0 = input.LA(1);
				if ( (LA101_0==UNION||LA101_0==VBAR) ) {
					alt101=1;
				}

				switch (alt101) {
				case 1 :
					// XQueryParser.g:656:35: (k= UNION | VBAR ) p_IntersectExceptExpr
					{
					// XQueryParser.g:656:35: (k= UNION | VBAR )
					int alt100=2;
					int LA100_0 = input.LA(1);
					if ( (LA100_0==UNION) ) {
						alt100=1;
					}
					else if ( (LA100_0==VBAR) ) {
						alt100=2;
					}

					else {
						if (state.backtracking>0) {state.failed=true; return retval;}
						NoViableAltException nvae =
							new NoViableAltException("", 100, 0, input);
						throw nvae;
					}

					switch (alt100) {
						case 1 :
							// XQueryParser.g:656:36: k= UNION
							{
							k=(CommonToken)match(input,UNION,FOLLOW_UNION_in_p_UnionExpr5766); if (state.failed) return retval;
							if ( state.backtracking==0 ) {
							k_tree = (XQDTCommonTree)adaptor.create(k);
							adaptor.addChild(root_0, k_tree);
							}

							if ( state.backtracking==0 ) {ak(k);}
							}
							break;
						case 2 :
							// XQueryParser.g:656:56: VBAR
							{
							VBAR249=(CommonToken)match(input,VBAR,FOLLOW_VBAR_in_p_UnionExpr5772); if (state.failed) return retval;
							if ( state.backtracking==0 ) {
							VBAR249_tree = (XQDTCommonTree)adaptor.create(VBAR249);
							adaptor.addChild(root_0, VBAR249_tree);
							}

							}
							break;

					}

					pushFollow(FOLLOW_p_IntersectExceptExpr_in_p_UnionExpr5775);
					p_IntersectExceptExpr250=p_IntersectExceptExpr();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, p_IntersectExceptExpr250.getTree());

					}
					break;

				default :
					break loop101;
				}
			}

			}

			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (XQDTCommonTree)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
			retval.tree = (XQDTCommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "p_UnionExpr"


	public static class p_IntersectExceptExpr_return extends ParserRuleReturnScope {
		XQDTCommonTree tree;
		@Override
		public XQDTCommonTree getTree() { return tree; }
	};


	// $ANTLR start "p_IntersectExceptExpr"
	// XQueryParser.g:660:1: p_IntersectExceptExpr : p_InstanceofExpr ( (k= INTERSECT |k= EXCEPT ) p_InstanceofExpr )* ;
	public final XQueryParser.p_IntersectExceptExpr_return p_IntersectExceptExpr() throws RecognitionException {
		XQueryParser.p_IntersectExceptExpr_return retval = new XQueryParser.p_IntersectExceptExpr_return();
		retval.start = input.LT(1);

		XQDTCommonTree root_0 = null;

		CommonToken k=null;
		ParserRuleReturnScope p_InstanceofExpr251 =null;
		ParserRuleReturnScope p_InstanceofExpr252 =null;

		XQDTCommonTree k_tree=null;

		try {
			// XQueryParser.g:661:9: ( p_InstanceofExpr ( (k= INTERSECT |k= EXCEPT ) p_InstanceofExpr )* )
			// XQueryParser.g:661:11: p_InstanceofExpr ( (k= INTERSECT |k= EXCEPT ) p_InstanceofExpr )*
			{
			root_0 = (XQDTCommonTree)adaptor.nil();


			pushFollow(FOLLOW_p_InstanceofExpr_in_p_IntersectExceptExpr5804);
			p_InstanceofExpr251=p_InstanceofExpr();
			state._fsp--;
			if (state.failed) return retval;
			if ( state.backtracking==0 ) adaptor.addChild(root_0, p_InstanceofExpr251.getTree());

			// XQueryParser.g:661:28: ( (k= INTERSECT |k= EXCEPT ) p_InstanceofExpr )*
			loop103:
			while (true) {
				int alt103=2;
				int LA103_0 = input.LA(1);
				if ( (LA103_0==EXCEPT||LA103_0==INTERSECT) ) {
					alt103=1;
				}

				switch (alt103) {
				case 1 :
					// XQueryParser.g:661:30: (k= INTERSECT |k= EXCEPT ) p_InstanceofExpr
					{
					// XQueryParser.g:661:30: (k= INTERSECT |k= EXCEPT )
					int alt102=2;
					int LA102_0 = input.LA(1);
					if ( (LA102_0==INTERSECT) ) {
						alt102=1;
					}
					else if ( (LA102_0==EXCEPT) ) {
						alt102=2;
					}

					else {
						if (state.backtracking>0) {state.failed=true; return retval;}
						NoViableAltException nvae =
							new NoViableAltException("", 102, 0, input);
						throw nvae;
					}

					switch (alt102) {
						case 1 :
							// XQueryParser.g:661:31: k= INTERSECT
							{
							k=(CommonToken)match(input,INTERSECT,FOLLOW_INTERSECT_in_p_IntersectExceptExpr5811); if (state.failed) return retval;
							if ( state.backtracking==0 ) {
							k_tree = (XQDTCommonTree)adaptor.create(k);
							adaptor.addChild(root_0, k_tree);
							}

							}
							break;
						case 2 :
							// XQueryParser.g:661:45: k= EXCEPT
							{
							k=(CommonToken)match(input,EXCEPT,FOLLOW_EXCEPT_in_p_IntersectExceptExpr5817); if (state.failed) return retval;
							if ( state.backtracking==0 ) {
							k_tree = (XQDTCommonTree)adaptor.create(k);
							adaptor.addChild(root_0, k_tree);
							}

							}
							break;

					}

					if ( state.backtracking==0 ) {ak(k);}
					pushFollow(FOLLOW_p_InstanceofExpr_in_p_IntersectExceptExpr5822);
					p_InstanceofExpr252=p_InstanceofExpr();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, p_InstanceofExpr252.getTree());

					}
					break;

				default :
					break loop103;
				}
			}

			}

			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (XQDTCommonTree)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
			retval.tree = (XQDTCommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "p_IntersectExceptExpr"


	public static class p_InstanceofExpr_return extends ParserRuleReturnScope {
		XQDTCommonTree tree;
		@Override
		public XQDTCommonTree getTree() { return tree; }
	};


	// $ANTLR start "p_InstanceofExpr"
	// XQueryParser.g:665:1: p_InstanceofExpr : p_TreatExpr (k= INSTANCE k= OF p_SequenceType )? ;
	public final XQueryParser.p_InstanceofExpr_return p_InstanceofExpr() throws RecognitionException {
		XQueryParser.p_InstanceofExpr_return retval = new XQueryParser.p_InstanceofExpr_return();
		retval.start = input.LT(1);

		XQDTCommonTree root_0 = null;

		CommonToken k=null;
		ParserRuleReturnScope p_TreatExpr253 =null;
		ParserRuleReturnScope p_SequenceType254 =null;

		XQDTCommonTree k_tree=null;

		try {
			// XQueryParser.g:666:9: ( p_TreatExpr (k= INSTANCE k= OF p_SequenceType )? )
			// XQueryParser.g:666:11: p_TreatExpr (k= INSTANCE k= OF p_SequenceType )?
			{
			root_0 = (XQDTCommonTree)adaptor.nil();


			pushFollow(FOLLOW_p_TreatExpr_in_p_InstanceofExpr5851);
			p_TreatExpr253=p_TreatExpr();
			state._fsp--;
			if (state.failed) return retval;
			if ( state.backtracking==0 ) adaptor.addChild(root_0, p_TreatExpr253.getTree());

			// XQueryParser.g:666:23: (k= INSTANCE k= OF p_SequenceType )?
			int alt104=2;
			int LA104_0 = input.LA(1);
			if ( (LA104_0==INSTANCE) ) {
				alt104=1;
			}
			switch (alt104) {
				case 1 :
					// XQueryParser.g:666:25: k= INSTANCE k= OF p_SequenceType
					{
					k=(CommonToken)match(input,INSTANCE,FOLLOW_INSTANCE_in_p_InstanceofExpr5857); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					k_tree = (XQDTCommonTree)adaptor.create(k);
					adaptor.addChild(root_0, k_tree);
					}

					if ( state.backtracking==0 ) {ak(k);}
					k=(CommonToken)match(input,OF,FOLLOW_OF_in_p_InstanceofExpr5863); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					k_tree = (XQDTCommonTree)adaptor.create(k);
					adaptor.addChild(root_0, k_tree);
					}

					if ( state.backtracking==0 ) {ak(k);}
					pushFollow(FOLLOW_p_SequenceType_in_p_InstanceofExpr5867);
					p_SequenceType254=p_SequenceType();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, p_SequenceType254.getTree());

					}
					break;

			}

			}

			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (XQDTCommonTree)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
			retval.tree = (XQDTCommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "p_InstanceofExpr"


	public static class p_TreatExpr_return extends ParserRuleReturnScope {
		XQDTCommonTree tree;
		@Override
		public XQDTCommonTree getTree() { return tree; }
	};


	// $ANTLR start "p_TreatExpr"
	// XQueryParser.g:670:1: p_TreatExpr : p_CastableExpr (k= TREAT k= AS p_SequenceType )? ;
	public final XQueryParser.p_TreatExpr_return p_TreatExpr() throws RecognitionException {
		XQueryParser.p_TreatExpr_return retval = new XQueryParser.p_TreatExpr_return();
		retval.start = input.LT(1);

		XQDTCommonTree root_0 = null;

		CommonToken k=null;
		ParserRuleReturnScope p_CastableExpr255 =null;
		ParserRuleReturnScope p_SequenceType256 =null;

		XQDTCommonTree k_tree=null;

		try {
			// XQueryParser.g:671:9: ( p_CastableExpr (k= TREAT k= AS p_SequenceType )? )
			// XQueryParser.g:671:11: p_CastableExpr (k= TREAT k= AS p_SequenceType )?
			{
			root_0 = (XQDTCommonTree)adaptor.nil();


			pushFollow(FOLLOW_p_CastableExpr_in_p_TreatExpr5895);
			p_CastableExpr255=p_CastableExpr();
			state._fsp--;
			if (state.failed) return retval;
			if ( state.backtracking==0 ) adaptor.addChild(root_0, p_CastableExpr255.getTree());

			// XQueryParser.g:671:26: (k= TREAT k= AS p_SequenceType )?
			int alt105=2;
			int LA105_0 = input.LA(1);
			if ( (LA105_0==TREAT) ) {
				alt105=1;
			}
			switch (alt105) {
				case 1 :
					// XQueryParser.g:671:28: k= TREAT k= AS p_SequenceType
					{
					k=(CommonToken)match(input,TREAT,FOLLOW_TREAT_in_p_TreatExpr5901); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					k_tree = (XQDTCommonTree)adaptor.create(k);
					adaptor.addChild(root_0, k_tree);
					}

					if ( state.backtracking==0 ) {ak(k);}
					k=(CommonToken)match(input,AS,FOLLOW_AS_in_p_TreatExpr5907); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					k_tree = (XQDTCommonTree)adaptor.create(k);
					adaptor.addChild(root_0, k_tree);
					}

					if ( state.backtracking==0 ) {ak(k);}
					pushFollow(FOLLOW_p_SequenceType_in_p_TreatExpr5911);
					p_SequenceType256=p_SequenceType();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, p_SequenceType256.getTree());

					}
					break;

			}

			}

			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (XQDTCommonTree)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
			retval.tree = (XQDTCommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "p_TreatExpr"


	public static class p_CastableExpr_return extends ParserRuleReturnScope {
		XQDTCommonTree tree;
		@Override
		public XQDTCommonTree getTree() { return tree; }
	};


	// $ANTLR start "p_CastableExpr"
	// XQueryParser.g:675:1: p_CastableExpr : p_CastExpr (k= CASTABLE k= AS p_SingleType )? ;
	public final XQueryParser.p_CastableExpr_return p_CastableExpr() throws RecognitionException {
		XQueryParser.p_CastableExpr_return retval = new XQueryParser.p_CastableExpr_return();
		retval.start = input.LT(1);

		XQDTCommonTree root_0 = null;

		CommonToken k=null;
		ParserRuleReturnScope p_CastExpr257 =null;
		ParserRuleReturnScope p_SingleType258 =null;

		XQDTCommonTree k_tree=null;

		try {
			// XQueryParser.g:676:9: ( p_CastExpr (k= CASTABLE k= AS p_SingleType )? )
			// XQueryParser.g:676:11: p_CastExpr (k= CASTABLE k= AS p_SingleType )?
			{
			root_0 = (XQDTCommonTree)adaptor.nil();


			pushFollow(FOLLOW_p_CastExpr_in_p_CastableExpr5948);
			p_CastExpr257=p_CastExpr();
			state._fsp--;
			if (state.failed) return retval;
			if ( state.backtracking==0 ) adaptor.addChild(root_0, p_CastExpr257.getTree());

			// XQueryParser.g:676:22: (k= CASTABLE k= AS p_SingleType )?
			int alt106=2;
			int LA106_0 = input.LA(1);
			if ( (LA106_0==CASTABLE) ) {
				alt106=1;
			}
			switch (alt106) {
				case 1 :
					// XQueryParser.g:676:24: k= CASTABLE k= AS p_SingleType
					{
					k=(CommonToken)match(input,CASTABLE,FOLLOW_CASTABLE_in_p_CastableExpr5954); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					k_tree = (XQDTCommonTree)adaptor.create(k);
					adaptor.addChild(root_0, k_tree);
					}

					if ( state.backtracking==0 ) {ak(k);}
					k=(CommonToken)match(input,AS,FOLLOW_AS_in_p_CastableExpr5960); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					k_tree = (XQDTCommonTree)adaptor.create(k);
					adaptor.addChild(root_0, k_tree);
					}

					if ( state.backtracking==0 ) {ak(k);}
					pushFollow(FOLLOW_p_SingleType_in_p_CastableExpr5964);
					p_SingleType258=p_SingleType();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, p_SingleType258.getTree());

					}
					break;

			}

			}

			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (XQDTCommonTree)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
			retval.tree = (XQDTCommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "p_CastableExpr"


	public static class p_CastExpr_return extends ParserRuleReturnScope {
		XQDTCommonTree tree;
		@Override
		public XQDTCommonTree getTree() { return tree; }
	};


	// $ANTLR start "p_CastExpr"
	// XQueryParser.g:680:1: p_CastExpr : p_UnaryExpr (k= CAST k= AS p_SingleType )? ;
	public final XQueryParser.p_CastExpr_return p_CastExpr() throws RecognitionException {
		XQueryParser.p_CastExpr_return retval = new XQueryParser.p_CastExpr_return();
		retval.start = input.LT(1);

		XQDTCommonTree root_0 = null;

		CommonToken k=null;
		ParserRuleReturnScope p_UnaryExpr259 =null;
		ParserRuleReturnScope p_SingleType260 =null;

		XQDTCommonTree k_tree=null;

		try {
			// XQueryParser.g:681:9: ( p_UnaryExpr (k= CAST k= AS p_SingleType )? )
			// XQueryParser.g:681:11: p_UnaryExpr (k= CAST k= AS p_SingleType )?
			{
			root_0 = (XQDTCommonTree)adaptor.nil();


			pushFollow(FOLLOW_p_UnaryExpr_in_p_CastExpr6001);
			p_UnaryExpr259=p_UnaryExpr();
			state._fsp--;
			if (state.failed) return retval;
			if ( state.backtracking==0 ) adaptor.addChild(root_0, p_UnaryExpr259.getTree());

			// XQueryParser.g:681:23: (k= CAST k= AS p_SingleType )?
			int alt107=2;
			int LA107_0 = input.LA(1);
			if ( (LA107_0==CAST) ) {
				alt107=1;
			}
			switch (alt107) {
				case 1 :
					// XQueryParser.g:681:25: k= CAST k= AS p_SingleType
					{
					k=(CommonToken)match(input,CAST,FOLLOW_CAST_in_p_CastExpr6007); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					k_tree = (XQDTCommonTree)adaptor.create(k);
					adaptor.addChild(root_0, k_tree);
					}

					if ( state.backtracking==0 ) {ak(k);}
					k=(CommonToken)match(input,AS,FOLLOW_AS_in_p_CastExpr6013); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					k_tree = (XQDTCommonTree)adaptor.create(k);
					adaptor.addChild(root_0, k_tree);
					}

					if ( state.backtracking==0 ) {ak(k);}
					pushFollow(FOLLOW_p_SingleType_in_p_CastExpr6017);
					p_SingleType260=p_SingleType();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, p_SingleType260.getTree());

					}
					break;

			}

			}

			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (XQDTCommonTree)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
			retval.tree = (XQDTCommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "p_CastExpr"


	public static class p_UnaryExpr_return extends ParserRuleReturnScope {
		XQDTCommonTree tree;
		@Override
		public XQDTCommonTree getTree() { return tree; }
	};


	// $ANTLR start "p_UnaryExpr"
	// XQueryParser.g:685:1: p_UnaryExpr : ( PLUS | MINUS )* p_ValueExpr -> ^( UnaryExpr ( PLUS )* p_ValueExpr ) ;
	public final XQueryParser.p_UnaryExpr_return p_UnaryExpr() throws RecognitionException {
		XQueryParser.p_UnaryExpr_return retval = new XQueryParser.p_UnaryExpr_return();
		retval.start = input.LT(1);

		XQDTCommonTree root_0 = null;

		CommonToken PLUS261=null;
		CommonToken MINUS262=null;
		ParserRuleReturnScope p_ValueExpr263 =null;

		XQDTCommonTree PLUS261_tree=null;
		XQDTCommonTree MINUS262_tree=null;
		RewriteRuleTokenStream stream_PLUS=new RewriteRuleTokenStream(adaptor,"token PLUS");
		RewriteRuleTokenStream stream_MINUS=new RewriteRuleTokenStream(adaptor,"token MINUS");
		RewriteRuleSubtreeStream stream_p_ValueExpr=new RewriteRuleSubtreeStream(adaptor,"rule p_ValueExpr");

		try {
			// XQueryParser.g:686:9: ( ( PLUS | MINUS )* p_ValueExpr -> ^( UnaryExpr ( PLUS )* p_ValueExpr ) )
			// XQueryParser.g:686:11: ( PLUS | MINUS )* p_ValueExpr
			{
			// XQueryParser.g:686:11: ( PLUS | MINUS )*
			loop108:
			while (true) {
				int alt108=3;
				int LA108_0 = input.LA(1);
				if ( (LA108_0==PLUS) ) {
					alt108=1;
				}
				else if ( (LA108_0==MINUS) ) {
					alt108=2;
				}

				switch (alt108) {
				case 1 :
					// XQueryParser.g:686:12: PLUS
					{
					PLUS261=(CommonToken)match(input,PLUS,FOLLOW_PLUS_in_p_UnaryExpr6047); if (state.failed) return retval; 
					if ( state.backtracking==0 ) stream_PLUS.add(PLUS261);

					}
					break;
				case 2 :
					// XQueryParser.g:686:19: MINUS
					{
					MINUS262=(CommonToken)match(input,MINUS,FOLLOW_MINUS_in_p_UnaryExpr6051); if (state.failed) return retval; 
					if ( state.backtracking==0 ) stream_MINUS.add(MINUS262);

					}
					break;

				default :
					break loop108;
				}
			}

			pushFollow(FOLLOW_p_ValueExpr_in_p_UnaryExpr6055);
			p_ValueExpr263=p_ValueExpr();
			state._fsp--;
			if (state.failed) return retval;
			if ( state.backtracking==0 ) stream_p_ValueExpr.add(p_ValueExpr263.getTree());
			// AST REWRITE
			// elements: p_ValueExpr, PLUS
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			if ( state.backtracking==0 ) {
			retval.tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.getTree():null);

			root_0 = (XQDTCommonTree)adaptor.nil();
			// 687:17: -> ^( UnaryExpr ( PLUS )* p_ValueExpr )
			{
				// XQueryParser.g:687:20: ^( UnaryExpr ( PLUS )* p_ValueExpr )
				{
				XQDTCommonTree root_1 = (XQDTCommonTree)adaptor.nil();
				root_1 = (XQDTCommonTree)adaptor.becomeRoot((XQDTCommonTree)adaptor.create(UnaryExpr, "UnaryExpr"), root_1);
				// XQueryParser.g:687:32: ( PLUS )*
				while ( stream_PLUS.hasNext() ) {
					adaptor.addChild(root_1, stream_PLUS.nextNode());
				}
				stream_PLUS.reset();

				adaptor.addChild(root_1, stream_p_ValueExpr.nextTree());
				adaptor.addChild(root_0, root_1);
				}

			}


			retval.tree = root_0;
			}

			}

			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (XQDTCommonTree)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
			retval.tree = (XQDTCommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "p_UnaryExpr"


	public static class p_ValueExpr_return extends ParserRuleReturnScope {
		XQDTCommonTree tree;
		@Override
		public XQDTCommonTree getTree() { return tree; }
	};


	// $ANTLR start "p_ValueExpr"
	// XQueryParser.g:691:1: p_ValueExpr : ( ( VALIDATE ( p_ValidationMode | TYPE )? )=> p_ValidateExpr | p_PathExpr | p_ExtensionExpr );
	public final XQueryParser.p_ValueExpr_return p_ValueExpr() throws RecognitionException {
		XQueryParser.p_ValueExpr_return retval = new XQueryParser.p_ValueExpr_return();
		retval.start = input.LT(1);

		XQDTCommonTree root_0 = null;

		ParserRuleReturnScope p_ValidateExpr264 =null;
		ParserRuleReturnScope p_PathExpr265 =null;
		ParserRuleReturnScope p_ExtensionExpr266 =null;


		try {
			// XQueryParser.g:692:9: ( ( VALIDATE ( p_ValidationMode | TYPE )? )=> p_ValidateExpr | p_PathExpr | p_ExtensionExpr )
			int alt109=3;
			switch ( input.LA(1) ) {
			case VALIDATE:
				{
				int LA109_1 = input.LA(2);
				if ( (LA109_1==LAX) && (synpred6_XQueryParser())) {
					alt109=1;
				}
				else if ( (LA109_1==STRICT) && (synpred6_XQueryParser())) {
					alt109=1;
				}
				else if ( (LA109_1==TYPE) && (synpred6_XQueryParser())) {
					alt109=1;
				}
				else if ( (LA109_1==LBRACKET) && (synpred6_XQueryParser())) {
					alt109=1;
				}
				else if ( (LA109_1==EOF||LA109_1==AFTER||LA109_1==AND||(LA109_1 >= AS && LA109_1 <= ASCENDING)||LA109_1==BEFORE||(LA109_1 >= CASE && LA109_1 <= CASTABLE)||LA109_1==COLLATION||LA109_1==COLON||LA109_1==COMMA||LA109_1==CONCAT||LA109_1==CONTAINS||LA109_1==COUNT||LA109_1==DEFAULT||LA109_1==DESCENDING||LA109_1==DIV||LA109_1==EMPTY||LA109_1==END||(LA109_1 >= EQ && LA109_1 <= EQUAL)||LA109_1==EXCEPT||LA109_1==FOR||(LA109_1 >= GE && LA109_1 <= GREATER_GREATER)||LA109_1==GROUP||LA109_1==GT||LA109_1==IDIV||LA109_1==INSTANCE||(LA109_1 >= INTERSECT && LA109_1 <= IS)||LA109_1==LE||LA109_1==LET||(LA109_1 >= LPAREN && LA109_1 <= LT)||LA109_1==MINUS||(LA109_1 >= MOD && LA109_1 <= MODIFY)||LA109_1==NE||LA109_1==NOTEQUAL||LA109_1==ONLY||(LA109_1 >= OR && LA109_1 <= ORDER)||LA109_1==PARAGRAPHS||LA109_1==PLUS||LA109_1==RBRACKET||LA109_1==RETURN||(LA109_1 >= RPAREN && LA109_1 <= RSQUARE)||LA109_1==SATISFIES||LA109_1==SEMICOLON||LA109_1==SENTENCES||(LA109_1 >= SLASH && LA109_1 <= SLASH_SLASH)||(LA109_1 >= SMALLER && LA109_1 <= SMALLER_SMALLER)||(LA109_1 >= STABLE && LA109_1 <= START)||(LA109_1 >= TIMES && LA109_1 <= TREAT)||LA109_1==UNION||LA109_1==VBAR||LA109_1==WHERE||LA109_1==WITH||LA109_1==WORDS) ) {
					alt109=2;
				}

				else {
					if (state.backtracking>0) {state.failed=true; return retval;}
					int nvaeMark = input.mark();
					try {
						input.consume();
						NoViableAltException nvae =
							new NoViableAltException("", 109, 1, input);
						throw nvae;
					} finally {
						input.rewind(nvaeMark);
					}
				}

				}
				break;
			case AFTER:
			case ALL:
			case ALLOWING:
			case AMP_ER:
			case ANCESTOR:
			case ANCESTOR_OR_SELF:
			case AND:
			case ANY:
			case APOS:
			case APOS_ER:
			case AS:
			case ASCENDING:
			case AT:
			case ATTRIBUTE:
			case ATTR_SIGN:
			case BASE_URI:
			case BEFORE:
			case BINARY:
			case BOUNDARY_SPACE:
			case BREAK:
			case BY:
			case CASE:
			case CAST:
			case CASTABLE:
			case CATCH:
			case CHECK:
			case CHILD:
			case COLLATION:
			case COLLECTION:
			case COMMENT:
			case CONSTRAINT:
			case CONSTRUCTION:
			case CONTAINS:
			case CONTENT:
			case CONTEXT:
			case CONTINUE:
			case COPY:
			case COPY_NAMESPACES:
			case COUNT:
			case DECIMAL_FORMAT:
			case DECIMAL_SEPARATOR:
			case DECLARE:
			case DEFAULT:
			case DELETE:
			case DESCENDANT:
			case DESCENDANT_OR_SELF:
			case DESCENDING:
			case DIACRITICS:
			case DIFFERENT:
			case DIGIT:
			case DISTANCE:
			case DIV:
			case DOCUMENT:
			case DOCUMENT_NODE:
			case DOLLAR:
			case DOT:
			case DOT_DOT:
			case ELEMENT:
			case ELSE:
			case EMPTY:
			case EMPTY_SEQUENCE:
			case ENCODING:
			case END:
			case ENTIRE:
			case EQ:
			case EVERY:
			case EXACTLY:
			case EXCEPT:
			case EXIT:
			case EXTERNAL:
			case FIRST:
			case FOLLOWING:
			case FOLLOWING_SIBLING:
			case FOR:
			case FOREACH:
			case FOREIGN:
			case FROM:
			case FTAND:
			case FTNOT:
			case FTOR:
			case FT_OPTION:
			case FUNCTION:
			case GE:
			case GREATEST:
			case GROUP:
			case GROUPING_SEPARATOR:
			case GT:
			case IDIV:
			case IF:
			case IMPORT:
			case IN:
			case INDEX:
			case INFINITY:
			case INHERIT:
			case INSENSITIVE:
			case INSERT:
			case INSTANCE:
			case INTEGRITY:
			case INTERSECT:
			case INTO:
			case IS:
			case ITEM:
			case KEY:
			case LANGUAGE:
			case LAST:
			case LAX:
			case LBRACKET:
			case LE:
			case LEAST:
			case LET:
			case LEVELS:
			case LOOP:
			case LOWERCASE:
			case LPAREN:
			case LT:
			case L_DecimalLiteral:
			case L_DirCommentConstructor:
			case L_DirPIConstructor:
			case L_DoubleLiteral:
			case L_IntegerLiteral:
			case L_NCName:
			case MINUS_SIGN:
			case MOD:
			case MODIFY:
			case MODULE:
			case MOST:
			case NAMESPACE:
			case NAMESPACE_NODE:
			case NAN:
			case NE:
			case NEXT:
			case NO:
			case NODE:
			case NODES:
			case NOT:
			case NO_INHERIT:
			case NO_PRESERVE:
			case OCCURS:
			case OF:
			case ON:
			case ONLY:
			case OPTION:
			case OR:
			case ORDER:
			case ORDERED:
			case ORDERING:
			case PARAGRAPH:
			case PARAGRAPHS:
			case PARENT:
			case PATTERN_SEPARATOR:
			case PERCENT:
			case PER_MILLE:
			case PHRASE:
			case PRECEDING:
			case PRECEDING_SIBLING:
			case PRESERVE:
			case PREVIOUS:
			case PRIVATE:
			case PROCESSING_INSTRUCTION:
			case QUOT:
			case QUOT_ER:
			case RELATIONSHIP:
			case RENAME:
			case REPLACE:
			case RETURN:
			case RETURNING:
			case REVALIDATION:
			case SAME:
			case SATISFIES:
			case SCHEMA:
			case SCHEMA_ATTRIBUTE:
			case SCHEMA_ELEMENT:
			case SCORE:
			case SELF:
			case SENSITIVE:
			case SENTENCE:
			case SENTENCES:
			case SKIP:
			case SLASH:
			case SLASH_SLASH:
			case SLIDING:
			case SMALLER:
			case SOME:
			case STABLE:
			case STAR:
			case START:
			case STEMMING:
			case STOP:
			case STRICT:
			case STRIP:
			case SWITCH:
			case TEXT:
			case THEN:
			case THESAURUS:
			case TIMES:
			case TO:
			case TREAT:
			case TRY:
			case TUMBLING:
			case TYPE:
			case TYPESWITCH:
			case UNION:
			case UNIQUE:
			case UNORDERED:
			case UPDATING:
			case UPPERCASE:
			case USING:
			case VALUE:
			case VARIABLE:
			case VERSION:
			case WEIGHT:
			case WHEN:
			case WHERE:
			case WHILE:
			case WILDCARDS:
			case WINDOW:
			case WITH:
			case WITHOUT:
			case WORD:
			case WORDS:
			case XQUERY:
			case ZERO_DIGIT:
			case EXPLICITLY:
				{
				alt109=2;
				}
				break;
			case L_Pragma:
				{
				alt109=3;
				}
				break;
			default:
				if (state.backtracking>0) {state.failed=true; return retval;}
				NoViableAltException nvae =
					new NoViableAltException("", 109, 0, input);
				throw nvae;
			}
			switch (alt109) {
				case 1 :
					// XQueryParser.g:692:11: ( VALIDATE ( p_ValidationMode | TYPE )? )=> p_ValidateExpr
					{
					root_0 = (XQDTCommonTree)adaptor.nil();


					pushFollow(FOLLOW_p_ValidateExpr_in_p_ValueExpr6125);
					p_ValidateExpr264=p_ValidateExpr();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, p_ValidateExpr264.getTree());

					}
					break;
				case 2 :
					// XQueryParser.g:693:11: p_PathExpr
					{
					root_0 = (XQDTCommonTree)adaptor.nil();


					pushFollow(FOLLOW_p_PathExpr_in_p_ValueExpr6137);
					p_PathExpr265=p_PathExpr();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, p_PathExpr265.getTree());

					}
					break;
				case 3 :
					// XQueryParser.g:694:11: p_ExtensionExpr
					{
					root_0 = (XQDTCommonTree)adaptor.nil();


					pushFollow(FOLLOW_p_ExtensionExpr_in_p_ValueExpr6149);
					p_ExtensionExpr266=p_ExtensionExpr();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, p_ExtensionExpr266.getTree());

					}
					break;

			}
			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (XQDTCommonTree)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
			retval.tree = (XQDTCommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "p_ValueExpr"


	public static class p_GeneralComp_return extends ParserRuleReturnScope {
		XQDTCommonTree tree;
		@Override
		public XQDTCommonTree getTree() { return tree; }
	};


	// $ANTLR start "p_GeneralComp"
	// XQueryParser.g:698:1: p_GeneralComp : ( EQUAL | NOTEQUAL | SMALLER | SMALLEREQ | GREATER | GREATEREQ );
	public final XQueryParser.p_GeneralComp_return p_GeneralComp() throws RecognitionException {
		XQueryParser.p_GeneralComp_return retval = new XQueryParser.p_GeneralComp_return();
		retval.start = input.LT(1);

		XQDTCommonTree root_0 = null;

		CommonToken set267=null;

		XQDTCommonTree set267_tree=null;

		try {
			// XQueryParser.g:699:9: ( EQUAL | NOTEQUAL | SMALLER | SMALLEREQ | GREATER | GREATEREQ )
			// XQueryParser.g:
			{
			root_0 = (XQDTCommonTree)adaptor.nil();


			set267=(CommonToken)input.LT(1);
			if ( input.LA(1)==EQUAL||(input.LA(1) >= GREATER && input.LA(1) <= GREATEREQ)||input.LA(1)==NOTEQUAL||(input.LA(1) >= SMALLER && input.LA(1) <= SMALLEREQ) ) {
				input.consume();
				if ( state.backtracking==0 ) adaptor.addChild(root_0, (XQDTCommonTree)adaptor.create(set267));
				state.errorRecovery=false;
				state.failed=false;
			}
			else {
				if (state.backtracking>0) {state.failed=true; return retval;}
				MismatchedSetException mse = new MismatchedSetException(null,input);
				throw mse;
			}
			}

			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (XQDTCommonTree)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
			retval.tree = (XQDTCommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "p_GeneralComp"


	public static class p_ValueComp_return extends ParserRuleReturnScope {
		XQDTCommonTree tree;
		@Override
		public XQDTCommonTree getTree() { return tree; }
	};


	// $ANTLR start "p_ValueComp"
	// XQueryParser.g:703:1: p_ValueComp : (k= EQ |k= NE |k= LT |k= LE |k= GT |k= GE ) ;
	public final XQueryParser.p_ValueComp_return p_ValueComp() throws RecognitionException {
		XQueryParser.p_ValueComp_return retval = new XQueryParser.p_ValueComp_return();
		retval.start = input.LT(1);

		XQDTCommonTree root_0 = null;

		CommonToken k=null;

		XQDTCommonTree k_tree=null;

		try {
			// XQueryParser.g:704:9: ( (k= EQ |k= NE |k= LT |k= LE |k= GT |k= GE ) )
			// XQueryParser.g:704:11: (k= EQ |k= NE |k= LT |k= LE |k= GT |k= GE )
			{
			root_0 = (XQDTCommonTree)adaptor.nil();


			// XQueryParser.g:704:11: (k= EQ |k= NE |k= LT |k= LE |k= GT |k= GE )
			int alt110=6;
			switch ( input.LA(1) ) {
			case EQ:
				{
				alt110=1;
				}
				break;
			case NE:
				{
				alt110=2;
				}
				break;
			case LT:
				{
				alt110=3;
				}
				break;
			case LE:
				{
				alt110=4;
				}
				break;
			case GT:
				{
				alt110=5;
				}
				break;
			case GE:
				{
				alt110=6;
				}
				break;
			default:
				if (state.backtracking>0) {state.failed=true; return retval;}
				NoViableAltException nvae =
					new NoViableAltException("", 110, 0, input);
				throw nvae;
			}
			switch (alt110) {
				case 1 :
					// XQueryParser.g:704:12: k= EQ
					{
					k=(CommonToken)match(input,EQ,FOLLOW_EQ_in_p_ValueComp6224); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					k_tree = (XQDTCommonTree)adaptor.create(k);
					adaptor.addChild(root_0, k_tree);
					}

					}
					break;
				case 2 :
					// XQueryParser.g:704:19: k= NE
					{
					k=(CommonToken)match(input,NE,FOLLOW_NE_in_p_ValueComp6230); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					k_tree = (XQDTCommonTree)adaptor.create(k);
					adaptor.addChild(root_0, k_tree);
					}

					}
					break;
				case 3 :
					// XQueryParser.g:704:26: k= LT
					{
					k=(CommonToken)match(input,LT,FOLLOW_LT_in_p_ValueComp6236); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					k_tree = (XQDTCommonTree)adaptor.create(k);
					adaptor.addChild(root_0, k_tree);
					}

					}
					break;
				case 4 :
					// XQueryParser.g:704:33: k= LE
					{
					k=(CommonToken)match(input,LE,FOLLOW_LE_in_p_ValueComp6242); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					k_tree = (XQDTCommonTree)adaptor.create(k);
					adaptor.addChild(root_0, k_tree);
					}

					}
					break;
				case 5 :
					// XQueryParser.g:704:40: k= GT
					{
					k=(CommonToken)match(input,GT,FOLLOW_GT_in_p_ValueComp6248); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					k_tree = (XQDTCommonTree)adaptor.create(k);
					adaptor.addChild(root_0, k_tree);
					}

					}
					break;
				case 6 :
					// XQueryParser.g:704:47: k= GE
					{
					k=(CommonToken)match(input,GE,FOLLOW_GE_in_p_ValueComp6254); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					k_tree = (XQDTCommonTree)adaptor.create(k);
					adaptor.addChild(root_0, k_tree);
					}

					}
					break;

			}

			if ( state.backtracking==0 ) {ak(k);}
			}

			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (XQDTCommonTree)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
			retval.tree = (XQDTCommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "p_ValueComp"


	public static class p_NodeComp_return extends ParserRuleReturnScope {
		XQDTCommonTree tree;
		@Override
		public XQDTCommonTree getTree() { return tree; }
	};


	// $ANTLR start "p_NodeComp"
	// XQueryParser.g:708:1: p_NodeComp : (k= IS | SMALLER_SMALLER | GREATER_GREATER );
	public final XQueryParser.p_NodeComp_return p_NodeComp() throws RecognitionException {
		XQueryParser.p_NodeComp_return retval = new XQueryParser.p_NodeComp_return();
		retval.start = input.LT(1);

		XQDTCommonTree root_0 = null;

		CommonToken k=null;
		CommonToken SMALLER_SMALLER268=null;
		CommonToken GREATER_GREATER269=null;

		XQDTCommonTree k_tree=null;
		XQDTCommonTree SMALLER_SMALLER268_tree=null;
		XQDTCommonTree GREATER_GREATER269_tree=null;

		try {
			// XQueryParser.g:709:9: (k= IS | SMALLER_SMALLER | GREATER_GREATER )
			int alt111=3;
			switch ( input.LA(1) ) {
			case IS:
				{
				alt111=1;
				}
				break;
			case SMALLER_SMALLER:
				{
				alt111=2;
				}
				break;
			case GREATER_GREATER:
				{
				alt111=3;
				}
				break;
			default:
				if (state.backtracking>0) {state.failed=true; return retval;}
				NoViableAltException nvae =
					new NoViableAltException("", 111, 0, input);
				throw nvae;
			}
			switch (alt111) {
				case 1 :
					// XQueryParser.g:709:11: k= IS
					{
					root_0 = (XQDTCommonTree)adaptor.nil();


					k=(CommonToken)match(input,IS,FOLLOW_IS_in_p_NodeComp6285); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					k_tree = (XQDTCommonTree)adaptor.create(k);
					adaptor.addChild(root_0, k_tree);
					}

					if ( state.backtracking==0 ) {ak(k);}
					}
					break;
				case 2 :
					// XQueryParser.g:709:28: SMALLER_SMALLER
					{
					root_0 = (XQDTCommonTree)adaptor.nil();


					SMALLER_SMALLER268=(CommonToken)match(input,SMALLER_SMALLER,FOLLOW_SMALLER_SMALLER_in_p_NodeComp6291); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					SMALLER_SMALLER268_tree = (XQDTCommonTree)adaptor.create(SMALLER_SMALLER268);
					adaptor.addChild(root_0, SMALLER_SMALLER268_tree);
					}

					}
					break;
				case 3 :
					// XQueryParser.g:709:46: GREATER_GREATER
					{
					root_0 = (XQDTCommonTree)adaptor.nil();


					GREATER_GREATER269=(CommonToken)match(input,GREATER_GREATER,FOLLOW_GREATER_GREATER_in_p_NodeComp6295); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					GREATER_GREATER269_tree = (XQDTCommonTree)adaptor.create(GREATER_GREATER269);
					adaptor.addChild(root_0, GREATER_GREATER269_tree);
					}

					}
					break;

			}
			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (XQDTCommonTree)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
			retval.tree = (XQDTCommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "p_NodeComp"


	public static class p_ValidateExpr_return extends ParserRuleReturnScope {
		XQDTCommonTree tree;
		@Override
		public XQDTCommonTree getTree() { return tree; }
	};


	// $ANTLR start "p_ValidateExpr"
	// XQueryParser.g:713:1: p_ValidateExpr : k= VALIDATE ( p_ValidationMode |k= TYPE p_TypeName )? LBRACKET p_Expr[true,true] RBRACKET ;
	public final XQueryParser.p_ValidateExpr_return p_ValidateExpr() throws RecognitionException {
		XQueryParser.p_ValidateExpr_return retval = new XQueryParser.p_ValidateExpr_return();
		retval.start = input.LT(1);

		XQDTCommonTree root_0 = null;

		CommonToken k=null;
		CommonToken LBRACKET272=null;
		CommonToken RBRACKET274=null;
		ParserRuleReturnScope p_ValidationMode270 =null;
		ParserRuleReturnScope p_TypeName271 =null;
		ParserRuleReturnScope p_Expr273 =null;

		XQDTCommonTree k_tree=null;
		XQDTCommonTree LBRACKET272_tree=null;
		XQDTCommonTree RBRACKET274_tree=null;

		try {
			// XQueryParser.g:714:9: (k= VALIDATE ( p_ValidationMode |k= TYPE p_TypeName )? LBRACKET p_Expr[true,true] RBRACKET )
			// XQueryParser.g:714:11: k= VALIDATE ( p_ValidationMode |k= TYPE p_TypeName )? LBRACKET p_Expr[true,true] RBRACKET
			{
			root_0 = (XQDTCommonTree)adaptor.nil();


			k=(CommonToken)match(input,VALIDATE,FOLLOW_VALIDATE_in_p_ValidateExpr6323); if (state.failed) return retval;
			if ( state.backtracking==0 ) {
			k_tree = (XQDTCommonTree)adaptor.create(k);
			adaptor.addChild(root_0, k_tree);
			}

			if ( state.backtracking==0 ) {ak(k);}
			// XQueryParser.g:714:32: ( p_ValidationMode |k= TYPE p_TypeName )?
			int alt112=3;
			int LA112_0 = input.LA(1);
			if ( (LA112_0==LAX||LA112_0==STRICT) ) {
				alt112=1;
			}
			else if ( (LA112_0==TYPE) ) {
				alt112=2;
			}
			switch (alt112) {
				case 1 :
					// XQueryParser.g:714:34: p_ValidationMode
					{
					pushFollow(FOLLOW_p_ValidationMode_in_p_ValidateExpr6329);
					p_ValidationMode270=p_ValidationMode();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, p_ValidationMode270.getTree());

					}
					break;
				case 2 :
					// XQueryParser.g:714:53: k= TYPE p_TypeName
					{
					k=(CommonToken)match(input,TYPE,FOLLOW_TYPE_in_p_ValidateExpr6335); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					k_tree = (XQDTCommonTree)adaptor.create(k);
					adaptor.addChild(root_0, k_tree);
					}

					if ( state.backtracking==0 ) {ak(k);}
					pushFollow(FOLLOW_p_TypeName_in_p_ValidateExpr6339);
					p_TypeName271=p_TypeName();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, p_TypeName271.getTree());

					}
					break;

			}

			LBRACKET272=(CommonToken)match(input,LBRACKET,FOLLOW_LBRACKET_in_p_ValidateExpr6344); if (state.failed) return retval;
			if ( state.backtracking==0 ) {
			LBRACKET272_tree = (XQDTCommonTree)adaptor.create(LBRACKET272);
			adaptor.addChild(root_0, LBRACKET272_tree);
			}

			pushFollow(FOLLOW_p_Expr_in_p_ValidateExpr6346);
			p_Expr273=p_Expr(true, true);
			state._fsp--;
			if (state.failed) return retval;
			if ( state.backtracking==0 ) adaptor.addChild(root_0, p_Expr273.getTree());

			RBRACKET274=(CommonToken)match(input,RBRACKET,FOLLOW_RBRACKET_in_p_ValidateExpr6349); if (state.failed) return retval;
			if ( state.backtracking==0 ) {
			RBRACKET274_tree = (XQDTCommonTree)adaptor.create(RBRACKET274);
			adaptor.addChild(root_0, RBRACKET274_tree);
			}

			}

			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (XQDTCommonTree)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
			retval.tree = (XQDTCommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "p_ValidateExpr"


	public static class p_ValidationMode_return extends ParserRuleReturnScope {
		XQDTCommonTree tree;
		@Override
		public XQDTCommonTree getTree() { return tree; }
	};


	// $ANTLR start "p_ValidationMode"
	// XQueryParser.g:718:1: p_ValidationMode : (k= LAX |k= STRICT ) ;
	public final XQueryParser.p_ValidationMode_return p_ValidationMode() throws RecognitionException {
		XQueryParser.p_ValidationMode_return retval = new XQueryParser.p_ValidationMode_return();
		retval.start = input.LT(1);

		XQDTCommonTree root_0 = null;

		CommonToken k=null;

		XQDTCommonTree k_tree=null;

		try {
			// XQueryParser.g:719:9: ( (k= LAX |k= STRICT ) )
			// XQueryParser.g:719:11: (k= LAX |k= STRICT )
			{
			root_0 = (XQDTCommonTree)adaptor.nil();


			// XQueryParser.g:719:11: (k= LAX |k= STRICT )
			int alt113=2;
			int LA113_0 = input.LA(1);
			if ( (LA113_0==LAX) ) {
				alt113=1;
			}
			else if ( (LA113_0==STRICT) ) {
				alt113=2;
			}

			else {
				if (state.backtracking>0) {state.failed=true; return retval;}
				NoViableAltException nvae =
					new NoViableAltException("", 113, 0, input);
				throw nvae;
			}

			switch (alt113) {
				case 1 :
					// XQueryParser.g:719:12: k= LAX
					{
					k=(CommonToken)match(input,LAX,FOLLOW_LAX_in_p_ValidationMode6378); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					k_tree = (XQDTCommonTree)adaptor.create(k);
					adaptor.addChild(root_0, k_tree);
					}

					}
					break;
				case 2 :
					// XQueryParser.g:719:20: k= STRICT
					{
					k=(CommonToken)match(input,STRICT,FOLLOW_STRICT_in_p_ValidationMode6384); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					k_tree = (XQDTCommonTree)adaptor.create(k);
					adaptor.addChild(root_0, k_tree);
					}

					}
					break;

			}

			if ( state.backtracking==0 ) {ak(k);}
			}

			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (XQDTCommonTree)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
			retval.tree = (XQDTCommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "p_ValidationMode"


	public static class p_ExtensionExpr_return extends ParserRuleReturnScope {
		XQDTCommonTree tree;
		@Override
		public XQDTCommonTree getTree() { return tree; }
	};


	// $ANTLR start "p_ExtensionExpr"
	// XQueryParser.g:723:1: p_ExtensionExpr : ( L_Pragma )+ LBRACKET ( p_Expr[true,true] )? RBRACKET ;
	public final XQueryParser.p_ExtensionExpr_return p_ExtensionExpr() throws RecognitionException {
		XQueryParser.p_ExtensionExpr_return retval = new XQueryParser.p_ExtensionExpr_return();
		retval.start = input.LT(1);

		XQDTCommonTree root_0 = null;

		CommonToken L_Pragma275=null;
		CommonToken LBRACKET276=null;
		CommonToken RBRACKET278=null;
		ParserRuleReturnScope p_Expr277 =null;

		XQDTCommonTree L_Pragma275_tree=null;
		XQDTCommonTree LBRACKET276_tree=null;
		XQDTCommonTree RBRACKET278_tree=null;

		try {
			// XQueryParser.g:724:9: ( ( L_Pragma )+ LBRACKET ( p_Expr[true,true] )? RBRACKET )
			// XQueryParser.g:724:11: ( L_Pragma )+ LBRACKET ( p_Expr[true,true] )? RBRACKET
			{
			root_0 = (XQDTCommonTree)adaptor.nil();


			// XQueryParser.g:724:11: ( L_Pragma )+
			int cnt114=0;
			loop114:
			while (true) {
				int alt114=2;
				int LA114_0 = input.LA(1);
				if ( (LA114_0==L_Pragma) ) {
					alt114=1;
				}

				switch (alt114) {
				case 1 :
					// XQueryParser.g:724:11: L_Pragma
					{
					L_Pragma275=(CommonToken)match(input,L_Pragma,FOLLOW_L_Pragma_in_p_ExtensionExpr6413); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					L_Pragma275_tree = (XQDTCommonTree)adaptor.create(L_Pragma275);
					adaptor.addChild(root_0, L_Pragma275_tree);
					}

					}
					break;

				default :
					if ( cnt114 >= 1 ) break loop114;
					if (state.backtracking>0) {state.failed=true; return retval;}
					EarlyExitException eee = new EarlyExitException(114, input);
					throw eee;
				}
				cnt114++;
			}

			LBRACKET276=(CommonToken)match(input,LBRACKET,FOLLOW_LBRACKET_in_p_ExtensionExpr6416); if (state.failed) return retval;
			if ( state.backtracking==0 ) {
			LBRACKET276_tree = (XQDTCommonTree)adaptor.create(LBRACKET276);
			adaptor.addChild(root_0, LBRACKET276_tree);
			}

			// XQueryParser.g:724:30: ( p_Expr[true,true] )?
			int alt115=2;
			int LA115_0 = input.LA(1);
			if ( ((LA115_0 >= AFTER && LA115_0 <= ALLOWING)||(LA115_0 >= AMP_ER && LA115_0 <= AND)||(LA115_0 >= ANY && LA115_0 <= BINARY)||(LA115_0 >= BOUNDARY_SPACE && LA115_0 <= CATCH)||(LA115_0 >= CHECK && LA115_0 <= CHILD)||(LA115_0 >= COLLATION && LA115_0 <= COLLECTION)||LA115_0==COMMENT||(LA115_0 >= CONSTRAINT && LA115_0 <= DOT_DOT)||(LA115_0 >= ELEMENT && LA115_0 <= EMPTY)||(LA115_0 >= EMPTY_SEQUENCE && LA115_0 <= EQ)||(LA115_0 >= EVERY && LA115_0 <= GE)||(LA115_0 >= GREATEST && LA115_0 <= GT)||(LA115_0 >= IDIV && LA115_0 <= LPAREN)||LA115_0==LT||(LA115_0 >= L_DecimalLiteral && LA115_0 <= L_DoubleLiteral)||(LA115_0 >= L_IntegerLiteral && LA115_0 <= L_Pragma)||(LA115_0 >= MINUS && LA115_0 <= NAN)||(LA115_0 >= NE && LA115_0 <= NOT)||(LA115_0 >= NO_INHERIT && LA115_0 <= PHRASE)||LA115_0==PLUS||(LA115_0 >= PRECEDING && LA115_0 <= PROCESSING_INSTRUCTION)||(LA115_0 >= QUOT && LA115_0 <= QUOT_ER)||(LA115_0 >= RELATIONSHIP && LA115_0 <= REVALIDATION)||(LA115_0 >= SAME && LA115_0 <= SELF)||(LA115_0 >= SENSITIVE && LA115_0 <= SMALLER)||(LA115_0 >= SOME && LA115_0 <= STRIP)||(LA115_0 >= SWITCH && LA115_0 <= VARIABLE)||(LA115_0 >= VERSION && LA115_0 <= WORDS)||(LA115_0 >= XQUERY && LA115_0 <= ZERO_DIGIT)||LA115_0==EXPLICITLY) ) {
				alt115=1;
			}
			switch (alt115) {
				case 1 :
					// XQueryParser.g:724:30: p_Expr[true,true]
					{
					pushFollow(FOLLOW_p_Expr_in_p_ExtensionExpr6418);
					p_Expr277=p_Expr(true, true);
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, p_Expr277.getTree());

					}
					break;

			}

			RBRACKET278=(CommonToken)match(input,RBRACKET,FOLLOW_RBRACKET_in_p_ExtensionExpr6422); if (state.failed) return retval;
			if ( state.backtracking==0 ) {
			RBRACKET278_tree = (XQDTCommonTree)adaptor.create(RBRACKET278);
			adaptor.addChild(root_0, RBRACKET278_tree);
			}

			}

			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (XQDTCommonTree)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
			retval.tree = (XQDTCommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "p_ExtensionExpr"


	public static class p_PathExpr_return extends ParserRuleReturnScope {
		XQDTCommonTree tree;
		@Override
		public XQDTCommonTree getTree() { return tree; }
	};


	// $ANTLR start "p_PathExpr"
	// XQueryParser.g:736:1: p_PathExpr : ( ( SLASH p_RelativePathExpr )=> ( SLASH p_RelativePathExpr ) | SLASH | SLASH_SLASH p_RelativePathExpr | p_RelativePathExpr );
	public final XQueryParser.p_PathExpr_return p_PathExpr() throws RecognitionException {
		XQueryParser.p_PathExpr_return retval = new XQueryParser.p_PathExpr_return();
		retval.start = input.LT(1);

		XQDTCommonTree root_0 = null;

		CommonToken SLASH279=null;
		CommonToken SLASH281=null;
		CommonToken SLASH_SLASH282=null;
		ParserRuleReturnScope p_RelativePathExpr280 =null;
		ParserRuleReturnScope p_RelativePathExpr283 =null;
		ParserRuleReturnScope p_RelativePathExpr284 =null;

		XQDTCommonTree SLASH279_tree=null;
		XQDTCommonTree SLASH281_tree=null;
		XQDTCommonTree SLASH_SLASH282_tree=null;

		try {
			// XQueryParser.g:737:9: ( ( SLASH p_RelativePathExpr )=> ( SLASH p_RelativePathExpr ) | SLASH | SLASH_SLASH p_RelativePathExpr | p_RelativePathExpr )
			int alt116=4;
			switch ( input.LA(1) ) {
			case SLASH:
				{
				int LA116_1 = input.LA(2);
				if ( (synpred7_XQueryParser()) ) {
					alt116=1;
				}
				else if ( (true) ) {
					alt116=2;
				}

				}
				break;
			case SLASH_SLASH:
				{
				alt116=3;
				}
				break;
			case AFTER:
			case ALL:
			case ALLOWING:
			case AMP_ER:
			case ANCESTOR:
			case ANCESTOR_OR_SELF:
			case AND:
			case ANY:
			case APOS:
			case APOS_ER:
			case AS:
			case ASCENDING:
			case AT:
			case ATTRIBUTE:
			case ATTR_SIGN:
			case BASE_URI:
			case BEFORE:
			case BINARY:
			case BOUNDARY_SPACE:
			case BREAK:
			case BY:
			case CASE:
			case CAST:
			case CASTABLE:
			case CATCH:
			case CHECK:
			case CHILD:
			case COLLATION:
			case COLLECTION:
			case COMMENT:
			case CONSTRAINT:
			case CONSTRUCTION:
			case CONTAINS:
			case CONTENT:
			case CONTEXT:
			case CONTINUE:
			case COPY:
			case COPY_NAMESPACES:
			case COUNT:
			case DECIMAL_FORMAT:
			case DECIMAL_SEPARATOR:
			case DECLARE:
			case DEFAULT:
			case DELETE:
			case DESCENDANT:
			case DESCENDANT_OR_SELF:
			case DESCENDING:
			case DIACRITICS:
			case DIFFERENT:
			case DIGIT:
			case DISTANCE:
			case DIV:
			case DOCUMENT:
			case DOCUMENT_NODE:
			case DOLLAR:
			case DOT:
			case DOT_DOT:
			case ELEMENT:
			case ELSE:
			case EMPTY:
			case EMPTY_SEQUENCE:
			case ENCODING:
			case END:
			case ENTIRE:
			case EQ:
			case EVERY:
			case EXACTLY:
			case EXCEPT:
			case EXIT:
			case EXTERNAL:
			case FIRST:
			case FOLLOWING:
			case FOLLOWING_SIBLING:
			case FOR:
			case FOREACH:
			case FOREIGN:
			case FROM:
			case FTAND:
			case FTNOT:
			case FTOR:
			case FT_OPTION:
			case FUNCTION:
			case GE:
			case GREATEST:
			case GROUP:
			case GROUPING_SEPARATOR:
			case GT:
			case IDIV:
			case IF:
			case IMPORT:
			case IN:
			case INDEX:
			case INFINITY:
			case INHERIT:
			case INSENSITIVE:
			case INSERT:
			case INSTANCE:
			case INTEGRITY:
			case INTERSECT:
			case INTO:
			case IS:
			case ITEM:
			case KEY:
			case LANGUAGE:
			case LAST:
			case LAX:
			case LBRACKET:
			case LE:
			case LEAST:
			case LET:
			case LEVELS:
			case LOOP:
			case LOWERCASE:
			case LPAREN:
			case LT:
			case L_DecimalLiteral:
			case L_DirCommentConstructor:
			case L_DirPIConstructor:
			case L_DoubleLiteral:
			case L_IntegerLiteral:
			case L_NCName:
			case MINUS_SIGN:
			case MOD:
			case MODIFY:
			case MODULE:
			case MOST:
			case NAMESPACE:
			case NAMESPACE_NODE:
			case NAN:
			case NE:
			case NEXT:
			case NO:
			case NODE:
			case NODES:
			case NOT:
			case NO_INHERIT:
			case NO_PRESERVE:
			case OCCURS:
			case OF:
			case ON:
			case ONLY:
			case OPTION:
			case OR:
			case ORDER:
			case ORDERED:
			case ORDERING:
			case PARAGRAPH:
			case PARAGRAPHS:
			case PARENT:
			case PATTERN_SEPARATOR:
			case PERCENT:
			case PER_MILLE:
			case PHRASE:
			case PRECEDING:
			case PRECEDING_SIBLING:
			case PRESERVE:
			case PREVIOUS:
			case PRIVATE:
			case PROCESSING_INSTRUCTION:
			case QUOT:
			case QUOT_ER:
			case RELATIONSHIP:
			case RENAME:
			case REPLACE:
			case RETURN:
			case RETURNING:
			case REVALIDATION:
			case SAME:
			case SATISFIES:
			case SCHEMA:
			case SCHEMA_ATTRIBUTE:
			case SCHEMA_ELEMENT:
			case SCORE:
			case SELF:
			case SENSITIVE:
			case SENTENCE:
			case SENTENCES:
			case SKIP:
			case SLIDING:
			case SMALLER:
			case SOME:
			case STABLE:
			case STAR:
			case START:
			case STEMMING:
			case STOP:
			case STRICT:
			case STRIP:
			case SWITCH:
			case TEXT:
			case THEN:
			case THESAURUS:
			case TIMES:
			case TO:
			case TREAT:
			case TRY:
			case TUMBLING:
			case TYPE:
			case TYPESWITCH:
			case UNION:
			case UNIQUE:
			case UNORDERED:
			case UPDATING:
			case UPPERCASE:
			case USING:
			case VALIDATE:
			case VALUE:
			case VARIABLE:
			case VERSION:
			case WEIGHT:
			case WHEN:
			case WHERE:
			case WHILE:
			case WILDCARDS:
			case WINDOW:
			case WITH:
			case WITHOUT:
			case WORD:
			case WORDS:
			case XQUERY:
			case ZERO_DIGIT:
			case EXPLICITLY:
				{
				alt116=4;
				}
				break;
			default:
				if (state.backtracking>0) {state.failed=true; return retval;}
				NoViableAltException nvae =
					new NoViableAltException("", 116, 0, input);
				throw nvae;
			}
			switch (alt116) {
				case 1 :
					// XQueryParser.g:737:11: ( SLASH p_RelativePathExpr )=> ( SLASH p_RelativePathExpr )
					{
					root_0 = (XQDTCommonTree)adaptor.nil();


					// XQueryParser.g:737:41: ( SLASH p_RelativePathExpr )
					// XQueryParser.g:737:42: SLASH p_RelativePathExpr
					{
					SLASH279=(CommonToken)match(input,SLASH,FOLLOW_SLASH_in_p_PathExpr6465); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					SLASH279_tree = (XQDTCommonTree)adaptor.create(SLASH279);
					adaptor.addChild(root_0, SLASH279_tree);
					}

					pushFollow(FOLLOW_p_RelativePathExpr_in_p_PathExpr6467);
					p_RelativePathExpr280=p_RelativePathExpr();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, p_RelativePathExpr280.getTree());

					}

					}
					break;
				case 2 :
					// XQueryParser.g:738:11: SLASH
					{
					root_0 = (XQDTCommonTree)adaptor.nil();


					SLASH281=(CommonToken)match(input,SLASH,FOLLOW_SLASH_in_p_PathExpr6480); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					SLASH281_tree = (XQDTCommonTree)adaptor.create(SLASH281);
					adaptor.addChild(root_0, SLASH281_tree);
					}

					}
					break;
				case 3 :
					// XQueryParser.g:739:11: SLASH_SLASH p_RelativePathExpr
					{
					root_0 = (XQDTCommonTree)adaptor.nil();


					SLASH_SLASH282=(CommonToken)match(input,SLASH_SLASH,FOLLOW_SLASH_SLASH_in_p_PathExpr6492); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					SLASH_SLASH282_tree = (XQDTCommonTree)adaptor.create(SLASH_SLASH282);
					adaptor.addChild(root_0, SLASH_SLASH282_tree);
					}

					pushFollow(FOLLOW_p_RelativePathExpr_in_p_PathExpr6494);
					p_RelativePathExpr283=p_RelativePathExpr();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, p_RelativePathExpr283.getTree());

					}
					break;
				case 4 :
					// XQueryParser.g:740:11: p_RelativePathExpr
					{
					root_0 = (XQDTCommonTree)adaptor.nil();


					pushFollow(FOLLOW_p_RelativePathExpr_in_p_PathExpr6506);
					p_RelativePathExpr284=p_RelativePathExpr();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, p_RelativePathExpr284.getTree());

					}
					break;

			}
			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (XQDTCommonTree)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
			retval.tree = (XQDTCommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "p_PathExpr"


	public static class p_RelativePathExpr_return extends ParserRuleReturnScope {
		XQDTCommonTree tree;
		@Override
		public XQDTCommonTree getTree() { return tree; }
	};


	// $ANTLR start "p_RelativePathExpr"
	// XQueryParser.g:744:1: p_RelativePathExpr : p_StepExpr ( ( SLASH | SLASH_SLASH ) p_StepExpr )* ;
	public final XQueryParser.p_RelativePathExpr_return p_RelativePathExpr() throws RecognitionException {
		XQueryParser.p_RelativePathExpr_return retval = new XQueryParser.p_RelativePathExpr_return();
		retval.start = input.LT(1);

		XQDTCommonTree root_0 = null;

		CommonToken set286=null;
		ParserRuleReturnScope p_StepExpr285 =null;
		ParserRuleReturnScope p_StepExpr287 =null;

		XQDTCommonTree set286_tree=null;

		try {
			// XQueryParser.g:745:9: ( p_StepExpr ( ( SLASH | SLASH_SLASH ) p_StepExpr )* )
			// XQueryParser.g:745:11: p_StepExpr ( ( SLASH | SLASH_SLASH ) p_StepExpr )*
			{
			root_0 = (XQDTCommonTree)adaptor.nil();


			pushFollow(FOLLOW_p_StepExpr_in_p_RelativePathExpr6534);
			p_StepExpr285=p_StepExpr();
			state._fsp--;
			if (state.failed) return retval;
			if ( state.backtracking==0 ) adaptor.addChild(root_0, p_StepExpr285.getTree());

			// XQueryParser.g:745:22: ( ( SLASH | SLASH_SLASH ) p_StepExpr )*
			loop117:
			while (true) {
				int alt117=2;
				int LA117_0 = input.LA(1);
				if ( ((LA117_0 >= SLASH && LA117_0 <= SLASH_SLASH)) ) {
					alt117=1;
				}

				switch (alt117) {
				case 1 :
					// XQueryParser.g:745:23: ( SLASH | SLASH_SLASH ) p_StepExpr
					{
					set286=(CommonToken)input.LT(1);
					if ( (input.LA(1) >= SLASH && input.LA(1) <= SLASH_SLASH) ) {
						input.consume();
						if ( state.backtracking==0 ) adaptor.addChild(root_0, (XQDTCommonTree)adaptor.create(set286));
						state.errorRecovery=false;
						state.failed=false;
					}
					else {
						if (state.backtracking>0) {state.failed=true; return retval;}
						MismatchedSetException mse = new MismatchedSetException(null,input);
						throw mse;
					}
					pushFollow(FOLLOW_p_StepExpr_in_p_RelativePathExpr6545);
					p_StepExpr287=p_StepExpr();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, p_StepExpr287.getTree());

					}
					break;

				default :
					break loop117;
				}
			}

			}

			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (XQDTCommonTree)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
			retval.tree = (XQDTCommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "p_RelativePathExpr"


	public static class p_StepExpr_return extends ParserRuleReturnScope {
		XQDTCommonTree tree;
		@Override
		public XQDTCommonTree getTree() { return tree; }
	};


	// $ANTLR start "p_StepExpr"
	// XQueryParser.g:749:1: p_StepExpr : ( ( LBRACKET | LPAREN | SMALLER | QUOT | APOS | DOLLAR )=> p_PostfixExpr | ( ( ( ELEMENT | ATTRIBUTE ) ( p_QName )? LBRACKET ) | ( ( NAMESPACE | PROCESSING_INSTRUCTION ) ( p_NCName )? LBRACKET ) | ( ( DOCUMENT | TEXT | COMMENT ) LBRACKET ) )=> p_PostfixExpr | ( p_KindTest )=> p_AxisStep | ( p_QName LPAREN )=> p_PostfixExpr | ( p_PrimaryExpr )=> p_PostfixExpr | p_AxisStep );
	public final XQueryParser.p_StepExpr_return p_StepExpr() throws RecognitionException {
		XQueryParser.p_StepExpr_return retval = new XQueryParser.p_StepExpr_return();
		retval.start = input.LT(1);

		XQDTCommonTree root_0 = null;

		ParserRuleReturnScope p_PostfixExpr288 =null;
		ParserRuleReturnScope p_PostfixExpr289 =null;
		ParserRuleReturnScope p_AxisStep290 =null;
		ParserRuleReturnScope p_PostfixExpr291 =null;
		ParserRuleReturnScope p_PostfixExpr292 =null;
		ParserRuleReturnScope p_AxisStep293 =null;


		try {
			// XQueryParser.g:750:9: ( ( LBRACKET | LPAREN | SMALLER | QUOT | APOS | DOLLAR )=> p_PostfixExpr | ( ( ( ELEMENT | ATTRIBUTE ) ( p_QName )? LBRACKET ) | ( ( NAMESPACE | PROCESSING_INSTRUCTION ) ( p_NCName )? LBRACKET ) | ( ( DOCUMENT | TEXT | COMMENT ) LBRACKET ) )=> p_PostfixExpr | ( p_KindTest )=> p_AxisStep | ( p_QName LPAREN )=> p_PostfixExpr | ( p_PrimaryExpr )=> p_PostfixExpr | p_AxisStep )
			int alt118=6;
			switch ( input.LA(1) ) {
			case LPAREN:
				{
				int LA118_1 = input.LA(2);
				if ( (synpred8_XQueryParser()) ) {
					alt118=1;
				}
				else if ( (synpred9_XQueryParser()) ) {
					alt118=2;
				}
				else if ( (synpred11_XQueryParser()) ) {
					alt118=4;
				}
				else if ( (synpred12_XQueryParser()) ) {
					alt118=5;
				}

				else {
					if (state.backtracking>0) {state.failed=true; return retval;}
					int nvaeMark = input.mark();
					try {
						input.consume();
						NoViableAltException nvae =
							new NoViableAltException("", 118, 1, input);
						throw nvae;
					} finally {
						input.rewind(nvaeMark);
					}
				}

				}
				break;
			case L_DecimalLiteral:
			case L_DoubleLiteral:
			case L_IntegerLiteral:
				{
				int LA118_2 = input.LA(2);
				if ( (synpred8_XQueryParser()) ) {
					alt118=1;
				}
				else if ( (synpred9_XQueryParser()) ) {
					alt118=2;
				}
				else if ( (synpred11_XQueryParser()) ) {
					alt118=4;
				}
				else if ( (synpred12_XQueryParser()) ) {
					alt118=5;
				}

				else {
					if (state.backtracking>0) {state.failed=true; return retval;}
					int nvaeMark = input.mark();
					try {
						input.consume();
						NoViableAltException nvae =
							new NoViableAltException("", 118, 2, input);
						throw nvae;
					} finally {
						input.rewind(nvaeMark);
					}
				}

				}
				break;
			case QUOT:
				{
				int LA118_3 = input.LA(2);
				if ( (synpred8_XQueryParser()) ) {
					alt118=1;
				}
				else if ( (synpred9_XQueryParser()) ) {
					alt118=2;
				}
				else if ( (synpred10_XQueryParser()) ) {
					alt118=3;
				}
				else if ( (synpred11_XQueryParser()) ) {
					alt118=4;
				}
				else if ( (synpred12_XQueryParser()) ) {
					alt118=5;
				}
				else if ( (true) ) {
					alt118=6;
				}

				}
				break;
			case APOS:
				{
				int LA118_4 = input.LA(2);
				if ( (synpred8_XQueryParser()) ) {
					alt118=1;
				}
				else if ( (synpred9_XQueryParser()) ) {
					alt118=2;
				}
				else if ( (synpred10_XQueryParser()) ) {
					alt118=3;
				}
				else if ( (synpred11_XQueryParser()) ) {
					alt118=4;
				}
				else if ( (synpred12_XQueryParser()) ) {
					alt118=5;
				}
				else if ( (true) ) {
					alt118=6;
				}

				}
				break;
			case DOLLAR:
				{
				int LA118_5 = input.LA(2);
				if ( (synpred8_XQueryParser()) ) {
					alt118=1;
				}
				else if ( (synpred9_XQueryParser()) ) {
					alt118=2;
				}
				else if ( (synpred11_XQueryParser()) ) {
					alt118=4;
				}
				else if ( (synpred12_XQueryParser()) ) {
					alt118=5;
				}

				else {
					if (state.backtracking>0) {state.failed=true; return retval;}
					int nvaeMark = input.mark();
					try {
						input.consume();
						NoViableAltException nvae =
							new NoViableAltException("", 118, 5, input);
						throw nvae;
					} finally {
						input.rewind(nvaeMark);
					}
				}

				}
				break;
			case DOT:
				{
				int LA118_6 = input.LA(2);
				if ( (synpred8_XQueryParser()) ) {
					alt118=1;
				}
				else if ( (synpred9_XQueryParser()) ) {
					alt118=2;
				}
				else if ( (synpred11_XQueryParser()) ) {
					alt118=4;
				}
				else if ( (synpred12_XQueryParser()) ) {
					alt118=5;
				}

				else {
					if (state.backtracking>0) {state.failed=true; return retval;}
					int nvaeMark = input.mark();
					try {
						input.consume();
						NoViableAltException nvae =
							new NoViableAltException("", 118, 6, input);
						throw nvae;
					} finally {
						input.rewind(nvaeMark);
					}
				}

				}
				break;
			case ORDERED:
				{
				int LA118_7 = input.LA(2);
				if ( (synpred8_XQueryParser()) ) {
					alt118=1;
				}
				else if ( (synpred9_XQueryParser()) ) {
					alt118=2;
				}
				else if ( (synpred10_XQueryParser()) ) {
					alt118=3;
				}
				else if ( (synpred11_XQueryParser()) ) {
					alt118=4;
				}
				else if ( (synpred12_XQueryParser()) ) {
					alt118=5;
				}
				else if ( (true) ) {
					alt118=6;
				}

				}
				break;
			case ELEMENT:
				{
				int LA118_8 = input.LA(2);
				if ( (synpred8_XQueryParser()) ) {
					alt118=1;
				}
				else if ( (synpred9_XQueryParser()) ) {
					alt118=2;
				}
				else if ( (synpred10_XQueryParser()) ) {
					alt118=3;
				}
				else if ( (synpred11_XQueryParser()) ) {
					alt118=4;
				}
				else if ( (synpred12_XQueryParser()) ) {
					alt118=5;
				}
				else if ( (true) ) {
					alt118=6;
				}

				}
				break;
			case UPDATING:
				{
				int LA118_9 = input.LA(2);
				if ( (synpred8_XQueryParser()) ) {
					alt118=1;
				}
				else if ( (synpred9_XQueryParser()) ) {
					alt118=2;
				}
				else if ( (synpred11_XQueryParser()) ) {
					alt118=4;
				}
				else if ( (synpred12_XQueryParser()) ) {
					alt118=5;
				}

				else {
					if (state.backtracking>0) {state.failed=true; return retval;}
					int nvaeMark = input.mark();
					try {
						input.consume();
						NoViableAltException nvae =
							new NoViableAltException("", 118, 9, input);
						throw nvae;
					} finally {
						input.rewind(nvaeMark);
					}
				}

				}
				break;
			case UNORDERED:
				{
				int LA118_10 = input.LA(2);
				if ( (synpred8_XQueryParser()) ) {
					alt118=1;
				}
				else if ( (synpred9_XQueryParser()) ) {
					alt118=2;
				}
				else if ( (synpred10_XQueryParser()) ) {
					alt118=3;
				}
				else if ( (synpred11_XQueryParser()) ) {
					alt118=4;
				}
				else if ( (synpred12_XQueryParser()) ) {
					alt118=5;
				}
				else if ( (true) ) {
					alt118=6;
				}

				}
				break;
			case DOCUMENT:
				{
				int LA118_11 = input.LA(2);
				if ( (synpred8_XQueryParser()) ) {
					alt118=1;
				}
				else if ( (synpred9_XQueryParser()) ) {
					alt118=2;
				}
				else if ( (synpred10_XQueryParser()) ) {
					alt118=3;
				}
				else if ( (synpred11_XQueryParser()) ) {
					alt118=4;
				}
				else if ( (synpred12_XQueryParser()) ) {
					alt118=5;
				}
				else if ( (true) ) {
					alt118=6;
				}

				}
				break;
			case SMALLER:
				{
				int LA118_12 = input.LA(2);
				if ( (synpred8_XQueryParser()) ) {
					alt118=1;
				}
				else if ( (synpred9_XQueryParser()) ) {
					alt118=2;
				}
				else if ( (synpred11_XQueryParser()) ) {
					alt118=4;
				}
				else if ( (synpred12_XQueryParser()) ) {
					alt118=5;
				}

				else {
					if (state.backtracking>0) {state.failed=true; return retval;}
					int nvaeMark = input.mark();
					try {
						input.consume();
						NoViableAltException nvae =
							new NoViableAltException("", 118, 12, input);
						throw nvae;
					} finally {
						input.rewind(nvaeMark);
					}
				}

				}
				break;
			case L_DirCommentConstructor:
				{
				int LA118_13 = input.LA(2);
				if ( (synpred8_XQueryParser()) ) {
					alt118=1;
				}
				else if ( (synpred9_XQueryParser()) ) {
					alt118=2;
				}
				else if ( (synpred11_XQueryParser()) ) {
					alt118=4;
				}
				else if ( (synpred12_XQueryParser()) ) {
					alt118=5;
				}

				else {
					if (state.backtracking>0) {state.failed=true; return retval;}
					int nvaeMark = input.mark();
					try {
						input.consume();
						NoViableAltException nvae =
							new NoViableAltException("", 118, 13, input);
						throw nvae;
					} finally {
						input.rewind(nvaeMark);
					}
				}

				}
				break;
			case L_DirPIConstructor:
				{
				int LA118_14 = input.LA(2);
				if ( (synpred8_XQueryParser()) ) {
					alt118=1;
				}
				else if ( (synpred9_XQueryParser()) ) {
					alt118=2;
				}
				else if ( (synpred11_XQueryParser()) ) {
					alt118=4;
				}
				else if ( (synpred12_XQueryParser()) ) {
					alt118=5;
				}

				else {
					if (state.backtracking>0) {state.failed=true; return retval;}
					int nvaeMark = input.mark();
					try {
						input.consume();
						NoViableAltException nvae =
							new NoViableAltException("", 118, 14, input);
						throw nvae;
					} finally {
						input.rewind(nvaeMark);
					}
				}

				}
				break;
			case NAMESPACE:
				{
				int LA118_15 = input.LA(2);
				if ( (synpred8_XQueryParser()) ) {
					alt118=1;
				}
				else if ( (synpred9_XQueryParser()) ) {
					alt118=2;
				}
				else if ( (synpred10_XQueryParser()) ) {
					alt118=3;
				}
				else if ( (synpred11_XQueryParser()) ) {
					alt118=4;
				}
				else if ( (synpred12_XQueryParser()) ) {
					alt118=5;
				}
				else if ( (true) ) {
					alt118=6;
				}

				}
				break;
			case ATTRIBUTE:
				{
				int LA118_16 = input.LA(2);
				if ( (synpred8_XQueryParser()) ) {
					alt118=1;
				}
				else if ( (synpred9_XQueryParser()) ) {
					alt118=2;
				}
				else if ( (synpred10_XQueryParser()) ) {
					alt118=3;
				}
				else if ( (synpred11_XQueryParser()) ) {
					alt118=4;
				}
				else if ( (synpred12_XQueryParser()) ) {
					alt118=5;
				}
				else if ( (true) ) {
					alt118=6;
				}

				}
				break;
			case TEXT:
				{
				int LA118_17 = input.LA(2);
				if ( (synpred8_XQueryParser()) ) {
					alt118=1;
				}
				else if ( (synpred9_XQueryParser()) ) {
					alt118=2;
				}
				else if ( (synpred10_XQueryParser()) ) {
					alt118=3;
				}
				else if ( (synpred11_XQueryParser()) ) {
					alt118=4;
				}
				else if ( (synpred12_XQueryParser()) ) {
					alt118=5;
				}
				else if ( (true) ) {
					alt118=6;
				}

				}
				break;
			case BINARY:
				{
				int LA118_18 = input.LA(2);
				if ( (synpred8_XQueryParser()) ) {
					alt118=1;
				}
				else if ( (synpred9_XQueryParser()) ) {
					alt118=2;
				}
				else if ( (synpred10_XQueryParser()) ) {
					alt118=3;
				}
				else if ( (synpred11_XQueryParser()) ) {
					alt118=4;
				}
				else if ( (synpred12_XQueryParser()) ) {
					alt118=5;
				}
				else if ( (true) ) {
					alt118=6;
				}

				}
				break;
			case COMMENT:
				{
				int LA118_19 = input.LA(2);
				if ( (synpred8_XQueryParser()) ) {
					alt118=1;
				}
				else if ( (synpred9_XQueryParser()) ) {
					alt118=2;
				}
				else if ( (synpred10_XQueryParser()) ) {
					alt118=3;
				}
				else if ( (synpred11_XQueryParser()) ) {
					alt118=4;
				}
				else if ( (synpred12_XQueryParser()) ) {
					alt118=5;
				}
				else if ( (true) ) {
					alt118=6;
				}

				}
				break;
			case PROCESSING_INSTRUCTION:
				{
				int LA118_20 = input.LA(2);
				if ( (synpred8_XQueryParser()) ) {
					alt118=1;
				}
				else if ( (synpred9_XQueryParser()) ) {
					alt118=2;
				}
				else if ( (synpred10_XQueryParser()) ) {
					alt118=3;
				}
				else if ( (synpred11_XQueryParser()) ) {
					alt118=4;
				}
				else if ( (synpred12_XQueryParser()) ) {
					alt118=5;
				}
				else if ( (true) ) {
					alt118=6;
				}

				}
				break;
			case DOCUMENT_NODE:
				{
				int LA118_21 = input.LA(2);
				if ( (synpred8_XQueryParser()) ) {
					alt118=1;
				}
				else if ( (synpred9_XQueryParser()) ) {
					alt118=2;
				}
				else if ( (synpred10_XQueryParser()) ) {
					alt118=3;
				}
				else if ( (synpred11_XQueryParser()) ) {
					alt118=4;
				}
				else if ( (synpred12_XQueryParser()) ) {
					alt118=5;
				}
				else if ( (true) ) {
					alt118=6;
				}

				}
				break;
			case PARENT:
				{
				int LA118_22 = input.LA(2);
				if ( (synpred8_XQueryParser()) ) {
					alt118=1;
				}
				else if ( (synpred9_XQueryParser()) ) {
					alt118=2;
				}
				else if ( (synpred10_XQueryParser()) ) {
					alt118=3;
				}
				else if ( (synpred11_XQueryParser()) ) {
					alt118=4;
				}
				else if ( (synpred12_XQueryParser()) ) {
					alt118=5;
				}
				else if ( (true) ) {
					alt118=6;
				}

				}
				break;
			case LBRACKET:
				{
				int LA118_23 = input.LA(2);
				if ( (synpred8_XQueryParser()) ) {
					alt118=1;
				}
				else if ( (synpred9_XQueryParser()) ) {
					alt118=2;
				}
				else if ( (synpred11_XQueryParser()) ) {
					alt118=4;
				}
				else if ( (synpred12_XQueryParser()) ) {
					alt118=5;
				}

				else {
					if (state.backtracking>0) {state.failed=true; return retval;}
					int nvaeMark = input.mark();
					try {
						input.consume();
						NoViableAltException nvae =
							new NoViableAltException("", 118, 23, input);
						throw nvae;
					} finally {
						input.rewind(nvaeMark);
					}
				}

				}
				break;
			case ANCESTOR:
				{
				int LA118_24 = input.LA(2);
				if ( (synpred8_XQueryParser()) ) {
					alt118=1;
				}
				else if ( (synpred9_XQueryParser()) ) {
					alt118=2;
				}
				else if ( (synpred10_XQueryParser()) ) {
					alt118=3;
				}
				else if ( (synpred11_XQueryParser()) ) {
					alt118=4;
				}
				else if ( (synpred12_XQueryParser()) ) {
					alt118=5;
				}
				else if ( (true) ) {
					alt118=6;
				}

				}
				break;
			case PRECEDING_SIBLING:
				{
				int LA118_25 = input.LA(2);
				if ( (synpred8_XQueryParser()) ) {
					alt118=1;
				}
				else if ( (synpred9_XQueryParser()) ) {
					alt118=2;
				}
				else if ( (synpred10_XQueryParser()) ) {
					alt118=3;
				}
				else if ( (synpred11_XQueryParser()) ) {
					alt118=4;
				}
				else if ( (synpred12_XQueryParser()) ) {
					alt118=5;
				}
				else if ( (true) ) {
					alt118=6;
				}

				}
				break;
			case PRECEDING:
				{
				int LA118_26 = input.LA(2);
				if ( (synpred8_XQueryParser()) ) {
					alt118=1;
				}
				else if ( (synpred9_XQueryParser()) ) {
					alt118=2;
				}
				else if ( (synpred10_XQueryParser()) ) {
					alt118=3;
				}
				else if ( (synpred11_XQueryParser()) ) {
					alt118=4;
				}
				else if ( (synpred12_XQueryParser()) ) {
					alt118=5;
				}
				else if ( (true) ) {
					alt118=6;
				}

				}
				break;
			case ANCESTOR_OR_SELF:
				{
				int LA118_27 = input.LA(2);
				if ( (synpred8_XQueryParser()) ) {
					alt118=1;
				}
				else if ( (synpred9_XQueryParser()) ) {
					alt118=2;
				}
				else if ( (synpred10_XQueryParser()) ) {
					alt118=3;
				}
				else if ( (synpred11_XQueryParser()) ) {
					alt118=4;
				}
				else if ( (synpred12_XQueryParser()) ) {
					alt118=5;
				}
				else if ( (true) ) {
					alt118=6;
				}

				}
				break;
			case CHILD:
				{
				int LA118_28 = input.LA(2);
				if ( (synpred8_XQueryParser()) ) {
					alt118=1;
				}
				else if ( (synpred9_XQueryParser()) ) {
					alt118=2;
				}
				else if ( (synpred10_XQueryParser()) ) {
					alt118=3;
				}
				else if ( (synpred11_XQueryParser()) ) {
					alt118=4;
				}
				else if ( (synpred12_XQueryParser()) ) {
					alt118=5;
				}
				else if ( (true) ) {
					alt118=6;
				}

				}
				break;
			case DOT_DOT:
				{
				int LA118_29 = input.LA(2);
				if ( (synpred10_XQueryParser()) ) {
					alt118=3;
				}
				else if ( (true) ) {
					alt118=6;
				}

				}
				break;
			case DESCENDANT:
				{
				int LA118_30 = input.LA(2);
				if ( (synpred8_XQueryParser()) ) {
					alt118=1;
				}
				else if ( (synpred9_XQueryParser()) ) {
					alt118=2;
				}
				else if ( (synpred10_XQueryParser()) ) {
					alt118=3;
				}
				else if ( (synpred11_XQueryParser()) ) {
					alt118=4;
				}
				else if ( (synpred12_XQueryParser()) ) {
					alt118=5;
				}
				else if ( (true) ) {
					alt118=6;
				}

				}
				break;
			case SELF:
				{
				int LA118_31 = input.LA(2);
				if ( (synpred8_XQueryParser()) ) {
					alt118=1;
				}
				else if ( (synpred9_XQueryParser()) ) {
					alt118=2;
				}
				else if ( (synpred10_XQueryParser()) ) {
					alt118=3;
				}
				else if ( (synpred11_XQueryParser()) ) {
					alt118=4;
				}
				else if ( (synpred12_XQueryParser()) ) {
					alt118=5;
				}
				else if ( (true) ) {
					alt118=6;
				}

				}
				break;
			case DESCENDANT_OR_SELF:
				{
				int LA118_32 = input.LA(2);
				if ( (synpred8_XQueryParser()) ) {
					alt118=1;
				}
				else if ( (synpred9_XQueryParser()) ) {
					alt118=2;
				}
				else if ( (synpred10_XQueryParser()) ) {
					alt118=3;
				}
				else if ( (synpred11_XQueryParser()) ) {
					alt118=4;
				}
				else if ( (synpred12_XQueryParser()) ) {
					alt118=5;
				}
				else if ( (true) ) {
					alt118=6;
				}

				}
				break;
			case FOLLOWING_SIBLING:
				{
				int LA118_33 = input.LA(2);
				if ( (synpred8_XQueryParser()) ) {
					alt118=1;
				}
				else if ( (synpred9_XQueryParser()) ) {
					alt118=2;
				}
				else if ( (synpred10_XQueryParser()) ) {
					alt118=3;
				}
				else if ( (synpred11_XQueryParser()) ) {
					alt118=4;
				}
				else if ( (synpred12_XQueryParser()) ) {
					alt118=5;
				}
				else if ( (true) ) {
					alt118=6;
				}

				}
				break;
			case FOLLOWING:
				{
				int LA118_34 = input.LA(2);
				if ( (synpred8_XQueryParser()) ) {
					alt118=1;
				}
				else if ( (synpred9_XQueryParser()) ) {
					alt118=2;
				}
				else if ( (synpred10_XQueryParser()) ) {
					alt118=3;
				}
				else if ( (synpred11_XQueryParser()) ) {
					alt118=4;
				}
				else if ( (synpred12_XQueryParser()) ) {
					alt118=5;
				}
				else if ( (true) ) {
					alt118=6;
				}

				}
				break;
			case AFTER:
			case ALL:
			case ALLOWING:
			case AMP_ER:
			case AND:
			case ANY:
			case APOS_ER:
			case AS:
			case ASCENDING:
			case AT:
			case BASE_URI:
			case BEFORE:
			case BOUNDARY_SPACE:
			case BREAK:
			case BY:
			case CASE:
			case CAST:
			case CASTABLE:
			case CATCH:
			case CHECK:
			case COLLATION:
			case COLLECTION:
			case CONSTRAINT:
			case CONSTRUCTION:
			case CONTAINS:
			case CONTENT:
			case CONTEXT:
			case CONTINUE:
			case COPY:
			case COPY_NAMESPACES:
			case COUNT:
			case DECIMAL_FORMAT:
			case DECIMAL_SEPARATOR:
			case DECLARE:
			case DEFAULT:
			case DELETE:
			case DESCENDING:
			case DIACRITICS:
			case DIFFERENT:
			case DIGIT:
			case DISTANCE:
			case DIV:
			case ELSE:
			case EMPTY:
			case ENCODING:
			case END:
			case ENTIRE:
			case EQ:
			case EVERY:
			case EXACTLY:
			case EXCEPT:
			case EXIT:
			case EXTERNAL:
			case FIRST:
			case FOR:
			case FOREACH:
			case FOREIGN:
			case FROM:
			case FTAND:
			case FTNOT:
			case FTOR:
			case FT_OPTION:
			case FUNCTION:
			case GE:
			case GREATEST:
			case GROUP:
			case GROUPING_SEPARATOR:
			case GT:
			case IDIV:
			case IMPORT:
			case IN:
			case INDEX:
			case INFINITY:
			case INHERIT:
			case INSENSITIVE:
			case INSERT:
			case INSTANCE:
			case INTEGRITY:
			case INTERSECT:
			case INTO:
			case IS:
			case KEY:
			case LANGUAGE:
			case LAST:
			case LAX:
			case LE:
			case LEAST:
			case LET:
			case LEVELS:
			case LOOP:
			case LOWERCASE:
			case LT:
			case L_NCName:
			case MINUS_SIGN:
			case MOD:
			case MODIFY:
			case MODULE:
			case MOST:
			case NAN:
			case NE:
			case NEXT:
			case NO:
			case NODES:
			case NOT:
			case NO_INHERIT:
			case NO_PRESERVE:
			case OCCURS:
			case OF:
			case ON:
			case ONLY:
			case OPTION:
			case OR:
			case ORDER:
			case ORDERING:
			case PARAGRAPH:
			case PARAGRAPHS:
			case PATTERN_SEPARATOR:
			case PERCENT:
			case PER_MILLE:
			case PHRASE:
			case PRESERVE:
			case PREVIOUS:
			case PRIVATE:
			case QUOT_ER:
			case RELATIONSHIP:
			case RENAME:
			case REPLACE:
			case RETURN:
			case RETURNING:
			case REVALIDATION:
			case SAME:
			case SATISFIES:
			case SCHEMA:
			case SCORE:
			case SENSITIVE:
			case SENTENCE:
			case SENTENCES:
			case SKIP:
			case SLIDING:
			case SOME:
			case STABLE:
			case START:
			case STEMMING:
			case STOP:
			case STRICT:
			case STRIP:
			case THEN:
			case THESAURUS:
			case TIMES:
			case TO:
			case TREAT:
			case TRY:
			case TUMBLING:
			case TYPE:
			case UNION:
			case UNIQUE:
			case UPPERCASE:
			case USING:
			case VALIDATE:
			case VALUE:
			case VARIABLE:
			case VERSION:
			case WEIGHT:
			case WHEN:
			case WHERE:
			case WILDCARDS:
			case WINDOW:
			case WITH:
			case WITHOUT:
			case WORD:
			case WORDS:
			case XQUERY:
			case ZERO_DIGIT:
			case EXPLICITLY:
				{
				int LA118_35 = input.LA(2);
				if ( (synpred8_XQueryParser()) ) {
					alt118=1;
				}
				else if ( (synpred9_XQueryParser()) ) {
					alt118=2;
				}
				else if ( (synpred10_XQueryParser()) ) {
					alt118=3;
				}
				else if ( (synpred11_XQueryParser()) ) {
					alt118=4;
				}
				else if ( (synpred12_XQueryParser()) ) {
					alt118=5;
				}
				else if ( (true) ) {
					alt118=6;
				}

				}
				break;
			case ATTR_SIGN:
				{
				int LA118_36 = input.LA(2);
				if ( (synpred10_XQueryParser()) ) {
					alt118=3;
				}
				else if ( (true) ) {
					alt118=6;
				}

				}
				break;
			case SCHEMA_ELEMENT:
				{
				int LA118_37 = input.LA(2);
				if ( (synpred8_XQueryParser()) ) {
					alt118=1;
				}
				else if ( (synpred9_XQueryParser()) ) {
					alt118=2;
				}
				else if ( (synpred10_XQueryParser()) ) {
					alt118=3;
				}
				else if ( (synpred11_XQueryParser()) ) {
					alt118=4;
				}
				else if ( (synpred12_XQueryParser()) ) {
					alt118=5;
				}
				else if ( (true) ) {
					alt118=6;
				}

				}
				break;
			case SCHEMA_ATTRIBUTE:
				{
				int LA118_38 = input.LA(2);
				if ( (synpred8_XQueryParser()) ) {
					alt118=1;
				}
				else if ( (synpred9_XQueryParser()) ) {
					alt118=2;
				}
				else if ( (synpred10_XQueryParser()) ) {
					alt118=3;
				}
				else if ( (synpred11_XQueryParser()) ) {
					alt118=4;
				}
				else if ( (synpred12_XQueryParser()) ) {
					alt118=5;
				}
				else if ( (true) ) {
					alt118=6;
				}

				}
				break;
			case NAMESPACE_NODE:
				{
				int LA118_39 = input.LA(2);
				if ( (synpred8_XQueryParser()) ) {
					alt118=1;
				}
				else if ( (synpred9_XQueryParser()) ) {
					alt118=2;
				}
				else if ( (synpred10_XQueryParser()) ) {
					alt118=3;
				}
				else if ( (synpred11_XQueryParser()) ) {
					alt118=4;
				}
				else if ( (synpred12_XQueryParser()) ) {
					alt118=5;
				}
				else if ( (true) ) {
					alt118=6;
				}

				}
				break;
			case NODE:
				{
				int LA118_40 = input.LA(2);
				if ( (synpred8_XQueryParser()) ) {
					alt118=1;
				}
				else if ( (synpred9_XQueryParser()) ) {
					alt118=2;
				}
				else if ( (synpred10_XQueryParser()) ) {
					alt118=3;
				}
				else if ( (synpred11_XQueryParser()) ) {
					alt118=4;
				}
				else if ( (synpred12_XQueryParser()) ) {
					alt118=5;
				}
				else if ( (true) ) {
					alt118=6;
				}

				}
				break;
			case EMPTY_SEQUENCE:
			case IF:
			case ITEM:
			case SWITCH:
			case TYPESWITCH:
			case WHILE:
				{
				int LA118_41 = input.LA(2);
				if ( (synpred8_XQueryParser()) ) {
					alt118=1;
				}
				else if ( (synpred9_XQueryParser()) ) {
					alt118=2;
				}
				else if ( (synpred10_XQueryParser()) ) {
					alt118=3;
				}
				else if ( (synpred11_XQueryParser()) ) {
					alt118=4;
				}
				else if ( (synpred12_XQueryParser()) ) {
					alt118=5;
				}
				else if ( (true) ) {
					alt118=6;
				}

				}
				break;
			case STAR:
				{
				int LA118_42 = input.LA(2);
				if ( (synpred10_XQueryParser()) ) {
					alt118=3;
				}
				else if ( (true) ) {
					alt118=6;
				}

				}
				break;
			default:
				if (state.backtracking>0) {state.failed=true; return retval;}
				NoViableAltException nvae =
					new NoViableAltException("", 118, 0, input);
				throw nvae;
			}
			switch (alt118) {
				case 1 :
					// XQueryParser.g:750:11: ( LBRACKET | LPAREN | SMALLER | QUOT | APOS | DOLLAR )=> p_PostfixExpr
					{
					root_0 = (XQDTCommonTree)adaptor.nil();


					pushFollow(FOLLOW_p_PostfixExpr_in_p_StepExpr6599);
					p_PostfixExpr288=p_PostfixExpr();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, p_PostfixExpr288.getTree());

					}
					break;
				case 2 :
					// XQueryParser.g:751:11: ( ( ( ELEMENT | ATTRIBUTE ) ( p_QName )? LBRACKET ) | ( ( NAMESPACE | PROCESSING_INSTRUCTION ) ( p_NCName )? LBRACKET ) | ( ( DOCUMENT | TEXT | COMMENT ) LBRACKET ) )=> p_PostfixExpr
					{
					root_0 = (XQDTCommonTree)adaptor.nil();


					pushFollow(FOLLOW_p_PostfixExpr_in_p_StepExpr6713);
					p_PostfixExpr289=p_PostfixExpr();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, p_PostfixExpr289.getTree());

					}
					break;
				case 3 :
					// XQueryParser.g:756:11: ( p_KindTest )=> p_AxisStep
					{
					root_0 = (XQDTCommonTree)adaptor.nil();


					pushFollow(FOLLOW_p_AxisStep_in_p_StepExpr6731);
					p_AxisStep290=p_AxisStep();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, p_AxisStep290.getTree());

					}
					break;
				case 4 :
					// XQueryParser.g:757:11: ( p_QName LPAREN )=> p_PostfixExpr
					{
					root_0 = (XQDTCommonTree)adaptor.nil();


					pushFollow(FOLLOW_p_PostfixExpr_in_p_StepExpr6752);
					p_PostfixExpr291=p_PostfixExpr();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, p_PostfixExpr291.getTree());

					}
					break;
				case 5 :
					// XQueryParser.g:758:11: ( p_PrimaryExpr )=> p_PostfixExpr
					{
					root_0 = (XQDTCommonTree)adaptor.nil();


					pushFollow(FOLLOW_p_PostfixExpr_in_p_StepExpr6770);
					p_PostfixExpr292=p_PostfixExpr();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, p_PostfixExpr292.getTree());

					}
					break;
				case 6 :
					// XQueryParser.g:759:11: p_AxisStep
					{
					root_0 = (XQDTCommonTree)adaptor.nil();


					pushFollow(FOLLOW_p_AxisStep_in_p_StepExpr6782);
					p_AxisStep293=p_AxisStep();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, p_AxisStep293.getTree());

					}
					break;

			}
			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (XQDTCommonTree)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
			retval.tree = (XQDTCommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "p_StepExpr"


	public static class p_AxisStep_return extends ParserRuleReturnScope {
		XQDTCommonTree tree;
		@Override
		public XQDTCommonTree getTree() { return tree; }
	};


	// $ANTLR start "p_AxisStep"
	// XQueryParser.g:763:1: p_AxisStep : ( p_ReverseStep | p_ForwardStep ) p_PredicateList ;
	public final XQueryParser.p_AxisStep_return p_AxisStep() throws RecognitionException {
		XQueryParser.p_AxisStep_return retval = new XQueryParser.p_AxisStep_return();
		retval.start = input.LT(1);

		XQDTCommonTree root_0 = null;

		ParserRuleReturnScope p_ReverseStep294 =null;
		ParserRuleReturnScope p_ForwardStep295 =null;
		ParserRuleReturnScope p_PredicateList296 =null;


		try {
			// XQueryParser.g:764:9: ( ( p_ReverseStep | p_ForwardStep ) p_PredicateList )
			// XQueryParser.g:764:11: ( p_ReverseStep | p_ForwardStep ) p_PredicateList
			{
			root_0 = (XQDTCommonTree)adaptor.nil();


			// XQueryParser.g:764:11: ( p_ReverseStep | p_ForwardStep )
			int alt119=2;
			switch ( input.LA(1) ) {
			case PARENT:
				{
				int LA119_1 = input.LA(2);
				if ( (LA119_1==COLON_COLON) ) {
					alt119=1;
				}
				else if ( (LA119_1==EOF||LA119_1==AFTER||LA119_1==AND||(LA119_1 >= AS && LA119_1 <= ASCENDING)||LA119_1==BEFORE||(LA119_1 >= BY && LA119_1 <= CASTABLE)||LA119_1==COLLATION||LA119_1==COLON||LA119_1==COMMA||LA119_1==CONCAT||LA119_1==CONTAINS||LA119_1==COUNT||LA119_1==DEFAULT||LA119_1==DESCENDING||LA119_1==DIV||LA119_1==EMPTY||LA119_1==END||(LA119_1 >= EQ && LA119_1 <= EQUAL)||LA119_1==EXCEPT||LA119_1==FOR||(LA119_1 >= GE && LA119_1 <= GREATER_GREATER)||LA119_1==GROUP||LA119_1==GT||LA119_1==IDIV||LA119_1==INSTANCE||(LA119_1 >= INTERSECT && LA119_1 <= IS)||LA119_1==LE||LA119_1==LET||(LA119_1 >= LSQUARE && LA119_1 <= LT)||LA119_1==MINUS||(LA119_1 >= MOD && LA119_1 <= MODIFY)||LA119_1==NE||LA119_1==NOTEQUAL||LA119_1==ONLY||(LA119_1 >= OR && LA119_1 <= ORDER)||LA119_1==PARAGRAPHS||LA119_1==PLUS||LA119_1==RBRACKET||LA119_1==RETURN||(LA119_1 >= RPAREN && LA119_1 <= RSQUARE)||LA119_1==SATISFIES||LA119_1==SEMICOLON||LA119_1==SENTENCES||(LA119_1 >= SLASH && LA119_1 <= SLASH_SLASH)||(LA119_1 >= SMALLER && LA119_1 <= SMALLER_SMALLER)||(LA119_1 >= STABLE && LA119_1 <= START)||(LA119_1 >= TIMES && LA119_1 <= TREAT)||LA119_1==UNION||LA119_1==VBAR||LA119_1==WHERE||LA119_1==WITH||LA119_1==WORDS) ) {
					alt119=2;
				}

				else {
					if (state.backtracking>0) {state.failed=true; return retval;}
					int nvaeMark = input.mark();
					try {
						input.consume();
						NoViableAltException nvae =
							new NoViableAltException("", 119, 1, input);
						throw nvae;
					} finally {
						input.rewind(nvaeMark);
					}
				}

				}
				break;
			case ANCESTOR:
				{
				int LA119_2 = input.LA(2);
				if ( (LA119_2==COLON_COLON) ) {
					alt119=1;
				}
				else if ( (LA119_2==EOF||LA119_2==AFTER||LA119_2==AND||(LA119_2 >= AS && LA119_2 <= ASCENDING)||LA119_2==BEFORE||(LA119_2 >= BY && LA119_2 <= CASTABLE)||LA119_2==COLLATION||LA119_2==COLON||LA119_2==COMMA||LA119_2==CONCAT||LA119_2==CONTAINS||LA119_2==COUNT||LA119_2==DEFAULT||LA119_2==DESCENDING||LA119_2==DIV||LA119_2==EMPTY||LA119_2==END||(LA119_2 >= EQ && LA119_2 <= EQUAL)||LA119_2==EXCEPT||LA119_2==FOR||(LA119_2 >= GE && LA119_2 <= GREATER_GREATER)||LA119_2==GROUP||LA119_2==GT||LA119_2==IDIV||LA119_2==INSTANCE||(LA119_2 >= INTERSECT && LA119_2 <= IS)||LA119_2==LE||LA119_2==LET||(LA119_2 >= LSQUARE && LA119_2 <= LT)||LA119_2==MINUS||(LA119_2 >= MOD && LA119_2 <= MODIFY)||LA119_2==NE||LA119_2==NOTEQUAL||LA119_2==ONLY||(LA119_2 >= OR && LA119_2 <= ORDER)||LA119_2==PARAGRAPHS||LA119_2==PLUS||LA119_2==RBRACKET||LA119_2==RETURN||(LA119_2 >= RPAREN && LA119_2 <= RSQUARE)||LA119_2==SATISFIES||LA119_2==SEMICOLON||LA119_2==SENTENCES||(LA119_2 >= SLASH && LA119_2 <= SLASH_SLASH)||(LA119_2 >= SMALLER && LA119_2 <= SMALLER_SMALLER)||(LA119_2 >= STABLE && LA119_2 <= START)||(LA119_2 >= TIMES && LA119_2 <= TREAT)||LA119_2==UNION||LA119_2==VBAR||LA119_2==WHERE||LA119_2==WITH||LA119_2==WORDS) ) {
					alt119=2;
				}

				else {
					if (state.backtracking>0) {state.failed=true; return retval;}
					int nvaeMark = input.mark();
					try {
						input.consume();
						NoViableAltException nvae =
							new NoViableAltException("", 119, 2, input);
						throw nvae;
					} finally {
						input.rewind(nvaeMark);
					}
				}

				}
				break;
			case PRECEDING_SIBLING:
				{
				int LA119_3 = input.LA(2);
				if ( (LA119_3==COLON_COLON) ) {
					alt119=1;
				}
				else if ( (LA119_3==EOF||LA119_3==AFTER||LA119_3==AND||(LA119_3 >= AS && LA119_3 <= ASCENDING)||LA119_3==BEFORE||(LA119_3 >= BY && LA119_3 <= CASTABLE)||LA119_3==COLLATION||LA119_3==COLON||LA119_3==COMMA||LA119_3==CONCAT||LA119_3==CONTAINS||LA119_3==COUNT||LA119_3==DEFAULT||LA119_3==DESCENDING||LA119_3==DIV||LA119_3==EMPTY||LA119_3==END||(LA119_3 >= EQ && LA119_3 <= EQUAL)||LA119_3==EXCEPT||LA119_3==FOR||(LA119_3 >= GE && LA119_3 <= GREATER_GREATER)||LA119_3==GROUP||LA119_3==GT||LA119_3==IDIV||LA119_3==INSTANCE||(LA119_3 >= INTERSECT && LA119_3 <= IS)||LA119_3==LE||LA119_3==LET||(LA119_3 >= LSQUARE && LA119_3 <= LT)||LA119_3==MINUS||(LA119_3 >= MOD && LA119_3 <= MODIFY)||LA119_3==NE||LA119_3==NOTEQUAL||LA119_3==ONLY||(LA119_3 >= OR && LA119_3 <= ORDER)||LA119_3==PARAGRAPHS||LA119_3==PLUS||LA119_3==RBRACKET||LA119_3==RETURN||(LA119_3 >= RPAREN && LA119_3 <= RSQUARE)||LA119_3==SATISFIES||LA119_3==SEMICOLON||LA119_3==SENTENCES||(LA119_3 >= SLASH && LA119_3 <= SLASH_SLASH)||(LA119_3 >= SMALLER && LA119_3 <= SMALLER_SMALLER)||(LA119_3 >= STABLE && LA119_3 <= START)||(LA119_3 >= TIMES && LA119_3 <= TREAT)||LA119_3==UNION||LA119_3==VBAR||LA119_3==WHERE||LA119_3==WITH||LA119_3==WORDS) ) {
					alt119=2;
				}

				else {
					if (state.backtracking>0) {state.failed=true; return retval;}
					int nvaeMark = input.mark();
					try {
						input.consume();
						NoViableAltException nvae =
							new NoViableAltException("", 119, 3, input);
						throw nvae;
					} finally {
						input.rewind(nvaeMark);
					}
				}

				}
				break;
			case PRECEDING:
				{
				int LA119_4 = input.LA(2);
				if ( (LA119_4==COLON_COLON) ) {
					alt119=1;
				}
				else if ( (LA119_4==EOF||LA119_4==AFTER||LA119_4==AND||(LA119_4 >= AS && LA119_4 <= ASCENDING)||LA119_4==BEFORE||(LA119_4 >= BY && LA119_4 <= CASTABLE)||LA119_4==COLLATION||LA119_4==COLON||LA119_4==COMMA||LA119_4==CONCAT||LA119_4==CONTAINS||LA119_4==COUNT||LA119_4==DEFAULT||LA119_4==DESCENDING||LA119_4==DIV||LA119_4==EMPTY||LA119_4==END||(LA119_4 >= EQ && LA119_4 <= EQUAL)||LA119_4==EXCEPT||LA119_4==FOR||(LA119_4 >= GE && LA119_4 <= GREATER_GREATER)||LA119_4==GROUP||LA119_4==GT||LA119_4==IDIV||LA119_4==INSTANCE||(LA119_4 >= INTERSECT && LA119_4 <= IS)||LA119_4==LE||LA119_4==LET||(LA119_4 >= LSQUARE && LA119_4 <= LT)||LA119_4==MINUS||(LA119_4 >= MOD && LA119_4 <= MODIFY)||LA119_4==NE||LA119_4==NOTEQUAL||LA119_4==ONLY||(LA119_4 >= OR && LA119_4 <= ORDER)||LA119_4==PARAGRAPHS||LA119_4==PLUS||LA119_4==RBRACKET||LA119_4==RETURN||(LA119_4 >= RPAREN && LA119_4 <= RSQUARE)||LA119_4==SATISFIES||LA119_4==SEMICOLON||LA119_4==SENTENCES||(LA119_4 >= SLASH && LA119_4 <= SLASH_SLASH)||(LA119_4 >= SMALLER && LA119_4 <= SMALLER_SMALLER)||(LA119_4 >= STABLE && LA119_4 <= START)||(LA119_4 >= TIMES && LA119_4 <= TREAT)||LA119_4==UNION||LA119_4==VBAR||LA119_4==WHERE||LA119_4==WITH||LA119_4==WORDS) ) {
					alt119=2;
				}

				else {
					if (state.backtracking>0) {state.failed=true; return retval;}
					int nvaeMark = input.mark();
					try {
						input.consume();
						NoViableAltException nvae =
							new NoViableAltException("", 119, 4, input);
						throw nvae;
					} finally {
						input.rewind(nvaeMark);
					}
				}

				}
				break;
			case ANCESTOR_OR_SELF:
				{
				int LA119_5 = input.LA(2);
				if ( (LA119_5==COLON_COLON) ) {
					alt119=1;
				}
				else if ( (LA119_5==EOF||LA119_5==AFTER||LA119_5==AND||(LA119_5 >= AS && LA119_5 <= ASCENDING)||LA119_5==BEFORE||(LA119_5 >= BY && LA119_5 <= CASTABLE)||LA119_5==COLLATION||LA119_5==COLON||LA119_5==COMMA||LA119_5==CONCAT||LA119_5==CONTAINS||LA119_5==COUNT||LA119_5==DEFAULT||LA119_5==DESCENDING||LA119_5==DIV||LA119_5==EMPTY||LA119_5==END||(LA119_5 >= EQ && LA119_5 <= EQUAL)||LA119_5==EXCEPT||LA119_5==FOR||(LA119_5 >= GE && LA119_5 <= GREATER_GREATER)||LA119_5==GROUP||LA119_5==GT||LA119_5==IDIV||LA119_5==INSTANCE||(LA119_5 >= INTERSECT && LA119_5 <= IS)||LA119_5==LE||LA119_5==LET||(LA119_5 >= LSQUARE && LA119_5 <= LT)||LA119_5==MINUS||(LA119_5 >= MOD && LA119_5 <= MODIFY)||LA119_5==NE||LA119_5==NOTEQUAL||LA119_5==ONLY||(LA119_5 >= OR && LA119_5 <= ORDER)||LA119_5==PARAGRAPHS||LA119_5==PLUS||LA119_5==RBRACKET||LA119_5==RETURN||(LA119_5 >= RPAREN && LA119_5 <= RSQUARE)||LA119_5==SATISFIES||LA119_5==SEMICOLON||LA119_5==SENTENCES||(LA119_5 >= SLASH && LA119_5 <= SLASH_SLASH)||(LA119_5 >= SMALLER && LA119_5 <= SMALLER_SMALLER)||(LA119_5 >= STABLE && LA119_5 <= START)||(LA119_5 >= TIMES && LA119_5 <= TREAT)||LA119_5==UNION||LA119_5==VBAR||LA119_5==WHERE||LA119_5==WITH||LA119_5==WORDS) ) {
					alt119=2;
				}

				else {
					if (state.backtracking>0) {state.failed=true; return retval;}
					int nvaeMark = input.mark();
					try {
						input.consume();
						NoViableAltException nvae =
							new NoViableAltException("", 119, 5, input);
						throw nvae;
					} finally {
						input.rewind(nvaeMark);
					}
				}

				}
				break;
			case DOT_DOT:
				{
				alt119=1;
				}
				break;
			case AFTER:
			case ALL:
			case ALLOWING:
			case AMP_ER:
			case AND:
			case ANY:
			case APOS:
			case APOS_ER:
			case AS:
			case ASCENDING:
			case AT:
			case ATTRIBUTE:
			case ATTR_SIGN:
			case BASE_URI:
			case BEFORE:
			case BINARY:
			case BOUNDARY_SPACE:
			case BREAK:
			case BY:
			case CASE:
			case CAST:
			case CASTABLE:
			case CATCH:
			case CHECK:
			case CHILD:
			case COLLATION:
			case COLLECTION:
			case COMMENT:
			case CONSTRAINT:
			case CONSTRUCTION:
			case CONTAINS:
			case CONTENT:
			case CONTEXT:
			case CONTINUE:
			case COPY:
			case COPY_NAMESPACES:
			case COUNT:
			case DECIMAL_FORMAT:
			case DECIMAL_SEPARATOR:
			case DECLARE:
			case DEFAULT:
			case DELETE:
			case DESCENDANT:
			case DESCENDANT_OR_SELF:
			case DESCENDING:
			case DIACRITICS:
			case DIFFERENT:
			case DIGIT:
			case DISTANCE:
			case DIV:
			case DOCUMENT:
			case DOCUMENT_NODE:
			case ELEMENT:
			case ELSE:
			case EMPTY:
			case EMPTY_SEQUENCE:
			case ENCODING:
			case END:
			case ENTIRE:
			case EQ:
			case EVERY:
			case EXACTLY:
			case EXCEPT:
			case EXIT:
			case EXTERNAL:
			case FIRST:
			case FOLLOWING:
			case FOLLOWING_SIBLING:
			case FOR:
			case FOREACH:
			case FOREIGN:
			case FROM:
			case FTAND:
			case FTNOT:
			case FTOR:
			case FT_OPTION:
			case FUNCTION:
			case GE:
			case GREATEST:
			case GROUP:
			case GROUPING_SEPARATOR:
			case GT:
			case IDIV:
			case IF:
			case IMPORT:
			case IN:
			case INDEX:
			case INFINITY:
			case INHERIT:
			case INSENSITIVE:
			case INSERT:
			case INSTANCE:
			case INTEGRITY:
			case INTERSECT:
			case INTO:
			case IS:
			case ITEM:
			case KEY:
			case LANGUAGE:
			case LAST:
			case LAX:
			case LE:
			case LEAST:
			case LET:
			case LEVELS:
			case LOOP:
			case LOWERCASE:
			case LT:
			case L_NCName:
			case MINUS_SIGN:
			case MOD:
			case MODIFY:
			case MODULE:
			case MOST:
			case NAMESPACE:
			case NAMESPACE_NODE:
			case NAN:
			case NE:
			case NEXT:
			case NO:
			case NODE:
			case NODES:
			case NOT:
			case NO_INHERIT:
			case NO_PRESERVE:
			case OCCURS:
			case OF:
			case ON:
			case ONLY:
			case OPTION:
			case OR:
			case ORDER:
			case ORDERED:
			case ORDERING:
			case PARAGRAPH:
			case PARAGRAPHS:
			case PATTERN_SEPARATOR:
			case PERCENT:
			case PER_MILLE:
			case PHRASE:
			case PRESERVE:
			case PREVIOUS:
			case PRIVATE:
			case PROCESSING_INSTRUCTION:
			case QUOT:
			case QUOT_ER:
			case RELATIONSHIP:
			case RENAME:
			case REPLACE:
			case RETURN:
			case RETURNING:
			case REVALIDATION:
			case SAME:
			case SATISFIES:
			case SCHEMA:
			case SCHEMA_ATTRIBUTE:
			case SCHEMA_ELEMENT:
			case SCORE:
			case SELF:
			case SENSITIVE:
			case SENTENCE:
			case SENTENCES:
			case SKIP:
			case SLIDING:
			case SOME:
			case STABLE:
			case STAR:
			case START:
			case STEMMING:
			case STOP:
			case STRICT:
			case STRIP:
			case SWITCH:
			case TEXT:
			case THEN:
			case THESAURUS:
			case TIMES:
			case TO:
			case TREAT:
			case TRY:
			case TUMBLING:
			case TYPE:
			case TYPESWITCH:
			case UNION:
			case UNIQUE:
			case UNORDERED:
			case UPPERCASE:
			case USING:
			case VALIDATE:
			case VALUE:
			case VARIABLE:
			case VERSION:
			case WEIGHT:
			case WHEN:
			case WHERE:
			case WHILE:
			case WILDCARDS:
			case WINDOW:
			case WITH:
			case WITHOUT:
			case WORD:
			case WORDS:
			case XQUERY:
			case ZERO_DIGIT:
			case EXPLICITLY:
				{
				alt119=2;
				}
				break;
			default:
				if (state.backtracking>0) {state.failed=true; return retval;}
				NoViableAltException nvae =
					new NoViableAltException("", 119, 0, input);
				throw nvae;
			}
			switch (alt119) {
				case 1 :
					// XQueryParser.g:764:12: p_ReverseStep
					{
					pushFollow(FOLLOW_p_ReverseStep_in_p_AxisStep6809);
					p_ReverseStep294=p_ReverseStep();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, p_ReverseStep294.getTree());

					}
					break;
				case 2 :
					// XQueryParser.g:764:28: p_ForwardStep
					{
					pushFollow(FOLLOW_p_ForwardStep_in_p_AxisStep6813);
					p_ForwardStep295=p_ForwardStep();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, p_ForwardStep295.getTree());

					}
					break;

			}

			pushFollow(FOLLOW_p_PredicateList_in_p_AxisStep6816);
			p_PredicateList296=p_PredicateList();
			state._fsp--;
			if (state.failed) return retval;
			if ( state.backtracking==0 ) adaptor.addChild(root_0, p_PredicateList296.getTree());

			}

			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (XQDTCommonTree)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
			retval.tree = (XQDTCommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "p_AxisStep"


	public static class p_ForwardStep_return extends ParserRuleReturnScope {
		XQDTCommonTree tree;
		@Override
		public XQDTCommonTree getTree() { return tree; }
	};


	// $ANTLR start "p_ForwardStep"
	// XQueryParser.g:768:1: p_ForwardStep : ( p_ForwardAxis p_NodeTest | p_AbbrevForwardStep );
	public final XQueryParser.p_ForwardStep_return p_ForwardStep() throws RecognitionException {
		XQueryParser.p_ForwardStep_return retval = new XQueryParser.p_ForwardStep_return();
		retval.start = input.LT(1);

		XQDTCommonTree root_0 = null;

		ParserRuleReturnScope p_ForwardAxis297 =null;
		ParserRuleReturnScope p_NodeTest298 =null;
		ParserRuleReturnScope p_AbbrevForwardStep299 =null;


		try {
			// XQueryParser.g:769:9: ( p_ForwardAxis p_NodeTest | p_AbbrevForwardStep )
			int alt120=2;
			switch ( input.LA(1) ) {
			case CHILD:
				{
				int LA120_1 = input.LA(2);
				if ( (LA120_1==COLON_COLON) ) {
					alt120=1;
				}
				else if ( (LA120_1==EOF||LA120_1==AFTER||LA120_1==AND||(LA120_1 >= AS && LA120_1 <= ASCENDING)||LA120_1==BEFORE||(LA120_1 >= BY && LA120_1 <= CASTABLE)||LA120_1==COLLATION||LA120_1==COLON||LA120_1==COMMA||LA120_1==CONCAT||LA120_1==CONTAINS||LA120_1==COUNT||LA120_1==DEFAULT||LA120_1==DESCENDING||LA120_1==DIV||LA120_1==EMPTY||LA120_1==END||(LA120_1 >= EQ && LA120_1 <= EQUAL)||LA120_1==EXCEPT||LA120_1==FOR||(LA120_1 >= GE && LA120_1 <= GREATER_GREATER)||LA120_1==GROUP||LA120_1==GT||LA120_1==IDIV||LA120_1==INSTANCE||(LA120_1 >= INTERSECT && LA120_1 <= IS)||LA120_1==LE||LA120_1==LET||(LA120_1 >= LSQUARE && LA120_1 <= LT)||LA120_1==MINUS||(LA120_1 >= MOD && LA120_1 <= MODIFY)||LA120_1==NE||LA120_1==NOTEQUAL||LA120_1==ONLY||(LA120_1 >= OR && LA120_1 <= ORDER)||LA120_1==PARAGRAPHS||LA120_1==PLUS||LA120_1==RBRACKET||LA120_1==RETURN||(LA120_1 >= RPAREN && LA120_1 <= RSQUARE)||LA120_1==SATISFIES||LA120_1==SEMICOLON||LA120_1==SENTENCES||(LA120_1 >= SLASH && LA120_1 <= SLASH_SLASH)||(LA120_1 >= SMALLER && LA120_1 <= SMALLER_SMALLER)||(LA120_1 >= STABLE && LA120_1 <= START)||(LA120_1 >= TIMES && LA120_1 <= TREAT)||LA120_1==UNION||LA120_1==VBAR||LA120_1==WHERE||LA120_1==WITH||LA120_1==WORDS) ) {
					alt120=2;
				}

				else {
					if (state.backtracking>0) {state.failed=true; return retval;}
					int nvaeMark = input.mark();
					try {
						input.consume();
						NoViableAltException nvae =
							new NoViableAltException("", 120, 1, input);
						throw nvae;
					} finally {
						input.rewind(nvaeMark);
					}
				}

				}
				break;
			case DESCENDANT:
				{
				int LA120_2 = input.LA(2);
				if ( (LA120_2==COLON_COLON) ) {
					alt120=1;
				}
				else if ( (LA120_2==EOF||LA120_2==AFTER||LA120_2==AND||(LA120_2 >= AS && LA120_2 <= ASCENDING)||LA120_2==BEFORE||(LA120_2 >= BY && LA120_2 <= CASTABLE)||LA120_2==COLLATION||LA120_2==COLON||LA120_2==COMMA||LA120_2==CONCAT||LA120_2==CONTAINS||LA120_2==COUNT||LA120_2==DEFAULT||LA120_2==DESCENDING||LA120_2==DIV||LA120_2==EMPTY||LA120_2==END||(LA120_2 >= EQ && LA120_2 <= EQUAL)||LA120_2==EXCEPT||LA120_2==FOR||(LA120_2 >= GE && LA120_2 <= GREATER_GREATER)||LA120_2==GROUP||LA120_2==GT||LA120_2==IDIV||LA120_2==INSTANCE||(LA120_2 >= INTERSECT && LA120_2 <= IS)||LA120_2==LE||LA120_2==LET||(LA120_2 >= LSQUARE && LA120_2 <= LT)||LA120_2==MINUS||(LA120_2 >= MOD && LA120_2 <= MODIFY)||LA120_2==NE||LA120_2==NOTEQUAL||LA120_2==ONLY||(LA120_2 >= OR && LA120_2 <= ORDER)||LA120_2==PARAGRAPHS||LA120_2==PLUS||LA120_2==RBRACKET||LA120_2==RETURN||(LA120_2 >= RPAREN && LA120_2 <= RSQUARE)||LA120_2==SATISFIES||LA120_2==SEMICOLON||LA120_2==SENTENCES||(LA120_2 >= SLASH && LA120_2 <= SLASH_SLASH)||(LA120_2 >= SMALLER && LA120_2 <= SMALLER_SMALLER)||(LA120_2 >= STABLE && LA120_2 <= START)||(LA120_2 >= TIMES && LA120_2 <= TREAT)||LA120_2==UNION||LA120_2==VBAR||LA120_2==WHERE||LA120_2==WITH||LA120_2==WORDS) ) {
					alt120=2;
				}

				else {
					if (state.backtracking>0) {state.failed=true; return retval;}
					int nvaeMark = input.mark();
					try {
						input.consume();
						NoViableAltException nvae =
							new NoViableAltException("", 120, 2, input);
						throw nvae;
					} finally {
						input.rewind(nvaeMark);
					}
				}

				}
				break;
			case ATTRIBUTE:
				{
				int LA120_3 = input.LA(2);
				if ( (LA120_3==COLON_COLON) ) {
					alt120=1;
				}
				else if ( (LA120_3==EOF||LA120_3==AFTER||LA120_3==AND||(LA120_3 >= AS && LA120_3 <= ASCENDING)||LA120_3==BEFORE||(LA120_3 >= BY && LA120_3 <= CASTABLE)||LA120_3==COLLATION||LA120_3==COLON||LA120_3==COMMA||LA120_3==CONCAT||LA120_3==CONTAINS||LA120_3==COUNT||LA120_3==DEFAULT||LA120_3==DESCENDING||LA120_3==DIV||LA120_3==EMPTY||LA120_3==END||(LA120_3 >= EQ && LA120_3 <= EQUAL)||LA120_3==EXCEPT||LA120_3==FOR||(LA120_3 >= GE && LA120_3 <= GREATER_GREATER)||LA120_3==GROUP||LA120_3==GT||LA120_3==IDIV||LA120_3==INSTANCE||(LA120_3 >= INTERSECT && LA120_3 <= IS)||LA120_3==LE||LA120_3==LET||(LA120_3 >= LPAREN && LA120_3 <= LT)||LA120_3==MINUS||(LA120_3 >= MOD && LA120_3 <= MODIFY)||LA120_3==NE||LA120_3==NOTEQUAL||LA120_3==ONLY||(LA120_3 >= OR && LA120_3 <= ORDER)||LA120_3==PARAGRAPHS||LA120_3==PLUS||LA120_3==RBRACKET||LA120_3==RETURN||(LA120_3 >= RPAREN && LA120_3 <= RSQUARE)||LA120_3==SATISFIES||LA120_3==SEMICOLON||LA120_3==SENTENCES||(LA120_3 >= SLASH && LA120_3 <= SLASH_SLASH)||(LA120_3 >= SMALLER && LA120_3 <= SMALLER_SMALLER)||(LA120_3 >= STABLE && LA120_3 <= START)||(LA120_3 >= TIMES && LA120_3 <= TREAT)||LA120_3==UNION||LA120_3==VBAR||LA120_3==WHERE||LA120_3==WITH||LA120_3==WORDS) ) {
					alt120=2;
				}

				else {
					if (state.backtracking>0) {state.failed=true; return retval;}
					int nvaeMark = input.mark();
					try {
						input.consume();
						NoViableAltException nvae =
							new NoViableAltException("", 120, 3, input);
						throw nvae;
					} finally {
						input.rewind(nvaeMark);
					}
				}

				}
				break;
			case SELF:
				{
				int LA120_4 = input.LA(2);
				if ( (LA120_4==COLON_COLON) ) {
					alt120=1;
				}
				else if ( (LA120_4==EOF||LA120_4==AFTER||LA120_4==AND||(LA120_4 >= AS && LA120_4 <= ASCENDING)||LA120_4==BEFORE||(LA120_4 >= BY && LA120_4 <= CASTABLE)||LA120_4==COLLATION||LA120_4==COLON||LA120_4==COMMA||LA120_4==CONCAT||LA120_4==CONTAINS||LA120_4==COUNT||LA120_4==DEFAULT||LA120_4==DESCENDING||LA120_4==DIV||LA120_4==EMPTY||LA120_4==END||(LA120_4 >= EQ && LA120_4 <= EQUAL)||LA120_4==EXCEPT||LA120_4==FOR||(LA120_4 >= GE && LA120_4 <= GREATER_GREATER)||LA120_4==GROUP||LA120_4==GT||LA120_4==IDIV||LA120_4==INSTANCE||(LA120_4 >= INTERSECT && LA120_4 <= IS)||LA120_4==LE||LA120_4==LET||(LA120_4 >= LSQUARE && LA120_4 <= LT)||LA120_4==MINUS||(LA120_4 >= MOD && LA120_4 <= MODIFY)||LA120_4==NE||LA120_4==NOTEQUAL||LA120_4==ONLY||(LA120_4 >= OR && LA120_4 <= ORDER)||LA120_4==PARAGRAPHS||LA120_4==PLUS||LA120_4==RBRACKET||LA120_4==RETURN||(LA120_4 >= RPAREN && LA120_4 <= RSQUARE)||LA120_4==SATISFIES||LA120_4==SEMICOLON||LA120_4==SENTENCES||(LA120_4 >= SLASH && LA120_4 <= SLASH_SLASH)||(LA120_4 >= SMALLER && LA120_4 <= SMALLER_SMALLER)||(LA120_4 >= STABLE && LA120_4 <= START)||(LA120_4 >= TIMES && LA120_4 <= TREAT)||LA120_4==UNION||LA120_4==VBAR||LA120_4==WHERE||LA120_4==WITH||LA120_4==WORDS) ) {
					alt120=2;
				}

				else {
					if (state.backtracking>0) {state.failed=true; return retval;}
					int nvaeMark = input.mark();
					try {
						input.consume();
						NoViableAltException nvae =
							new NoViableAltException("", 120, 4, input);
						throw nvae;
					} finally {
						input.rewind(nvaeMark);
					}
				}

				}
				break;
			case DESCENDANT_OR_SELF:
				{
				int LA120_5 = input.LA(2);
				if ( (LA120_5==COLON_COLON) ) {
					alt120=1;
				}
				else if ( (LA120_5==EOF||LA120_5==AFTER||LA120_5==AND||(LA120_5 >= AS && LA120_5 <= ASCENDING)||LA120_5==BEFORE||(LA120_5 >= BY && LA120_5 <= CASTABLE)||LA120_5==COLLATION||LA120_5==COLON||LA120_5==COMMA||LA120_5==CONCAT||LA120_5==CONTAINS||LA120_5==COUNT||LA120_5==DEFAULT||LA120_5==DESCENDING||LA120_5==DIV||LA120_5==EMPTY||LA120_5==END||(LA120_5 >= EQ && LA120_5 <= EQUAL)||LA120_5==EXCEPT||LA120_5==FOR||(LA120_5 >= GE && LA120_5 <= GREATER_GREATER)||LA120_5==GROUP||LA120_5==GT||LA120_5==IDIV||LA120_5==INSTANCE||(LA120_5 >= INTERSECT && LA120_5 <= IS)||LA120_5==LE||LA120_5==LET||(LA120_5 >= LSQUARE && LA120_5 <= LT)||LA120_5==MINUS||(LA120_5 >= MOD && LA120_5 <= MODIFY)||LA120_5==NE||LA120_5==NOTEQUAL||LA120_5==ONLY||(LA120_5 >= OR && LA120_5 <= ORDER)||LA120_5==PARAGRAPHS||LA120_5==PLUS||LA120_5==RBRACKET||LA120_5==RETURN||(LA120_5 >= RPAREN && LA120_5 <= RSQUARE)||LA120_5==SATISFIES||LA120_5==SEMICOLON||LA120_5==SENTENCES||(LA120_5 >= SLASH && LA120_5 <= SLASH_SLASH)||(LA120_5 >= SMALLER && LA120_5 <= SMALLER_SMALLER)||(LA120_5 >= STABLE && LA120_5 <= START)||(LA120_5 >= TIMES && LA120_5 <= TREAT)||LA120_5==UNION||LA120_5==VBAR||LA120_5==WHERE||LA120_5==WITH||LA120_5==WORDS) ) {
					alt120=2;
				}

				else {
					if (state.backtracking>0) {state.failed=true; return retval;}
					int nvaeMark = input.mark();
					try {
						input.consume();
						NoViableAltException nvae =
							new NoViableAltException("", 120, 5, input);
						throw nvae;
					} finally {
						input.rewind(nvaeMark);
					}
				}

				}
				break;
			case FOLLOWING_SIBLING:
				{
				int LA120_6 = input.LA(2);
				if ( (LA120_6==COLON_COLON) ) {
					alt120=1;
				}
				else if ( (LA120_6==EOF||LA120_6==AFTER||LA120_6==AND||(LA120_6 >= AS && LA120_6 <= ASCENDING)||LA120_6==BEFORE||(LA120_6 >= BY && LA120_6 <= CASTABLE)||LA120_6==COLLATION||LA120_6==COLON||LA120_6==COMMA||LA120_6==CONCAT||LA120_6==CONTAINS||LA120_6==COUNT||LA120_6==DEFAULT||LA120_6==DESCENDING||LA120_6==DIV||LA120_6==EMPTY||LA120_6==END||(LA120_6 >= EQ && LA120_6 <= EQUAL)||LA120_6==EXCEPT||LA120_6==FOR||(LA120_6 >= GE && LA120_6 <= GREATER_GREATER)||LA120_6==GROUP||LA120_6==GT||LA120_6==IDIV||LA120_6==INSTANCE||(LA120_6 >= INTERSECT && LA120_6 <= IS)||LA120_6==LE||LA120_6==LET||(LA120_6 >= LSQUARE && LA120_6 <= LT)||LA120_6==MINUS||(LA120_6 >= MOD && LA120_6 <= MODIFY)||LA120_6==NE||LA120_6==NOTEQUAL||LA120_6==ONLY||(LA120_6 >= OR && LA120_6 <= ORDER)||LA120_6==PARAGRAPHS||LA120_6==PLUS||LA120_6==RBRACKET||LA120_6==RETURN||(LA120_6 >= RPAREN && LA120_6 <= RSQUARE)||LA120_6==SATISFIES||LA120_6==SEMICOLON||LA120_6==SENTENCES||(LA120_6 >= SLASH && LA120_6 <= SLASH_SLASH)||(LA120_6 >= SMALLER && LA120_6 <= SMALLER_SMALLER)||(LA120_6 >= STABLE && LA120_6 <= START)||(LA120_6 >= TIMES && LA120_6 <= TREAT)||LA120_6==UNION||LA120_6==VBAR||LA120_6==WHERE||LA120_6==WITH||LA120_6==WORDS) ) {
					alt120=2;
				}

				else {
					if (state.backtracking>0) {state.failed=true; return retval;}
					int nvaeMark = input.mark();
					try {
						input.consume();
						NoViableAltException nvae =
							new NoViableAltException("", 120, 6, input);
						throw nvae;
					} finally {
						input.rewind(nvaeMark);
					}
				}

				}
				break;
			case FOLLOWING:
				{
				int LA120_7 = input.LA(2);
				if ( (LA120_7==COLON_COLON) ) {
					alt120=1;
				}
				else if ( (LA120_7==EOF||LA120_7==AFTER||LA120_7==AND||(LA120_7 >= AS && LA120_7 <= ASCENDING)||LA120_7==BEFORE||(LA120_7 >= BY && LA120_7 <= CASTABLE)||LA120_7==COLLATION||LA120_7==COLON||LA120_7==COMMA||LA120_7==CONCAT||LA120_7==CONTAINS||LA120_7==COUNT||LA120_7==DEFAULT||LA120_7==DESCENDING||LA120_7==DIV||LA120_7==EMPTY||LA120_7==END||(LA120_7 >= EQ && LA120_7 <= EQUAL)||LA120_7==EXCEPT||LA120_7==FOR||(LA120_7 >= GE && LA120_7 <= GREATER_GREATER)||LA120_7==GROUP||LA120_7==GT||LA120_7==IDIV||LA120_7==INSTANCE||(LA120_7 >= INTERSECT && LA120_7 <= IS)||LA120_7==LE||LA120_7==LET||(LA120_7 >= LSQUARE && LA120_7 <= LT)||LA120_7==MINUS||(LA120_7 >= MOD && LA120_7 <= MODIFY)||LA120_7==NE||LA120_7==NOTEQUAL||LA120_7==ONLY||(LA120_7 >= OR && LA120_7 <= ORDER)||LA120_7==PARAGRAPHS||LA120_7==PLUS||LA120_7==RBRACKET||LA120_7==RETURN||(LA120_7 >= RPAREN && LA120_7 <= RSQUARE)||LA120_7==SATISFIES||LA120_7==SEMICOLON||LA120_7==SENTENCES||(LA120_7 >= SLASH && LA120_7 <= SLASH_SLASH)||(LA120_7 >= SMALLER && LA120_7 <= SMALLER_SMALLER)||(LA120_7 >= STABLE && LA120_7 <= START)||(LA120_7 >= TIMES && LA120_7 <= TREAT)||LA120_7==UNION||LA120_7==VBAR||LA120_7==WHERE||LA120_7==WITH||LA120_7==WORDS) ) {
					alt120=2;
				}

				else {
					if (state.backtracking>0) {state.failed=true; return retval;}
					int nvaeMark = input.mark();
					try {
						input.consume();
						NoViableAltException nvae =
							new NoViableAltException("", 120, 7, input);
						throw nvae;
					} finally {
						input.rewind(nvaeMark);
					}
				}

				}
				break;
			case AFTER:
			case ALL:
			case ALLOWING:
			case AMP_ER:
			case ANCESTOR:
			case ANCESTOR_OR_SELF:
			case AND:
			case ANY:
			case APOS:
			case APOS_ER:
			case AS:
			case ASCENDING:
			case AT:
			case ATTR_SIGN:
			case BASE_URI:
			case BEFORE:
			case BINARY:
			case BOUNDARY_SPACE:
			case BREAK:
			case BY:
			case CASE:
			case CAST:
			case CASTABLE:
			case CATCH:
			case CHECK:
			case COLLATION:
			case COLLECTION:
			case COMMENT:
			case CONSTRAINT:
			case CONSTRUCTION:
			case CONTAINS:
			case CONTENT:
			case CONTEXT:
			case CONTINUE:
			case COPY:
			case COPY_NAMESPACES:
			case COUNT:
			case DECIMAL_FORMAT:
			case DECIMAL_SEPARATOR:
			case DECLARE:
			case DEFAULT:
			case DELETE:
			case DESCENDING:
			case DIACRITICS:
			case DIFFERENT:
			case DIGIT:
			case DISTANCE:
			case DIV:
			case DOCUMENT:
			case DOCUMENT_NODE:
			case ELEMENT:
			case ELSE:
			case EMPTY:
			case EMPTY_SEQUENCE:
			case ENCODING:
			case END:
			case ENTIRE:
			case EQ:
			case EVERY:
			case EXACTLY:
			case EXCEPT:
			case EXIT:
			case EXTERNAL:
			case FIRST:
			case FOR:
			case FOREACH:
			case FOREIGN:
			case FROM:
			case FTAND:
			case FTNOT:
			case FTOR:
			case FT_OPTION:
			case FUNCTION:
			case GE:
			case GREATEST:
			case GROUP:
			case GROUPING_SEPARATOR:
			case GT:
			case IDIV:
			case IF:
			case IMPORT:
			case IN:
			case INDEX:
			case INFINITY:
			case INHERIT:
			case INSENSITIVE:
			case INSERT:
			case INSTANCE:
			case INTEGRITY:
			case INTERSECT:
			case INTO:
			case IS:
			case ITEM:
			case KEY:
			case LANGUAGE:
			case LAST:
			case LAX:
			case LE:
			case LEAST:
			case LET:
			case LEVELS:
			case LOOP:
			case LOWERCASE:
			case LT:
			case L_NCName:
			case MINUS_SIGN:
			case MOD:
			case MODIFY:
			case MODULE:
			case MOST:
			case NAMESPACE:
			case NAMESPACE_NODE:
			case NAN:
			case NE:
			case NEXT:
			case NO:
			case NODE:
			case NODES:
			case NOT:
			case NO_INHERIT:
			case NO_PRESERVE:
			case OCCURS:
			case OF:
			case ON:
			case ONLY:
			case OPTION:
			case OR:
			case ORDER:
			case ORDERED:
			case ORDERING:
			case PARAGRAPH:
			case PARAGRAPHS:
			case PARENT:
			case PATTERN_SEPARATOR:
			case PERCENT:
			case PER_MILLE:
			case PHRASE:
			case PRECEDING:
			case PRECEDING_SIBLING:
			case PRESERVE:
			case PREVIOUS:
			case PRIVATE:
			case PROCESSING_INSTRUCTION:
			case QUOT:
			case QUOT_ER:
			case RELATIONSHIP:
			case RENAME:
			case REPLACE:
			case RETURN:
			case RETURNING:
			case REVALIDATION:
			case SAME:
			case SATISFIES:
			case SCHEMA:
			case SCHEMA_ATTRIBUTE:
			case SCHEMA_ELEMENT:
			case SCORE:
			case SENSITIVE:
			case SENTENCE:
			case SENTENCES:
			case SKIP:
			case SLIDING:
			case SOME:
			case STABLE:
			case STAR:
			case START:
			case STEMMING:
			case STOP:
			case STRICT:
			case STRIP:
			case SWITCH:
			case TEXT:
			case THEN:
			case THESAURUS:
			case TIMES:
			case TO:
			case TREAT:
			case TRY:
			case TUMBLING:
			case TYPE:
			case TYPESWITCH:
			case UNION:
			case UNIQUE:
			case UNORDERED:
			case UPPERCASE:
			case USING:
			case VALIDATE:
			case VALUE:
			case VARIABLE:
			case VERSION:
			case WEIGHT:
			case WHEN:
			case WHERE:
			case WHILE:
			case WILDCARDS:
			case WINDOW:
			case WITH:
			case WITHOUT:
			case WORD:
			case WORDS:
			case XQUERY:
			case ZERO_DIGIT:
			case EXPLICITLY:
				{
				alt120=2;
				}
				break;
			default:
				if (state.backtracking>0) {state.failed=true; return retval;}
				NoViableAltException nvae =
					new NoViableAltException("", 120, 0, input);
				throw nvae;
			}
			switch (alt120) {
				case 1 :
					// XQueryParser.g:769:11: p_ForwardAxis p_NodeTest
					{
					root_0 = (XQDTCommonTree)adaptor.nil();


					pushFollow(FOLLOW_p_ForwardAxis_in_p_ForwardStep6842);
					p_ForwardAxis297=p_ForwardAxis();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, p_ForwardAxis297.getTree());

					pushFollow(FOLLOW_p_NodeTest_in_p_ForwardStep6844);
					p_NodeTest298=p_NodeTest();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, p_NodeTest298.getTree());

					}
					break;
				case 2 :
					// XQueryParser.g:770:11: p_AbbrevForwardStep
					{
					root_0 = (XQDTCommonTree)adaptor.nil();


					pushFollow(FOLLOW_p_AbbrevForwardStep_in_p_ForwardStep6856);
					p_AbbrevForwardStep299=p_AbbrevForwardStep();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, p_AbbrevForwardStep299.getTree());

					}
					break;

			}
			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (XQDTCommonTree)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
			retval.tree = (XQDTCommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "p_ForwardStep"


	public static class p_ForwardAxis_return extends ParserRuleReturnScope {
		XQDTCommonTree tree;
		@Override
		public XQDTCommonTree getTree() { return tree; }
	};


	// $ANTLR start "p_ForwardAxis"
	// XQueryParser.g:774:1: p_ForwardAxis : ( CHILD COLON_COLON | DESCENDANT COLON_COLON | ATTRIBUTE COLON_COLON | SELF COLON_COLON | DESCENDANT_OR_SELF COLON_COLON | FOLLOWING_SIBLING COLON_COLON | FOLLOWING COLON_COLON );
	public final XQueryParser.p_ForwardAxis_return p_ForwardAxis() throws RecognitionException {
		XQueryParser.p_ForwardAxis_return retval = new XQueryParser.p_ForwardAxis_return();
		retval.start = input.LT(1);

		XQDTCommonTree root_0 = null;

		CommonToken CHILD300=null;
		CommonToken COLON_COLON301=null;
		CommonToken DESCENDANT302=null;
		CommonToken COLON_COLON303=null;
		CommonToken ATTRIBUTE304=null;
		CommonToken COLON_COLON305=null;
		CommonToken SELF306=null;
		CommonToken COLON_COLON307=null;
		CommonToken DESCENDANT_OR_SELF308=null;
		CommonToken COLON_COLON309=null;
		CommonToken FOLLOWING_SIBLING310=null;
		CommonToken COLON_COLON311=null;
		CommonToken FOLLOWING312=null;
		CommonToken COLON_COLON313=null;

		XQDTCommonTree CHILD300_tree=null;
		XQDTCommonTree COLON_COLON301_tree=null;
		XQDTCommonTree DESCENDANT302_tree=null;
		XQDTCommonTree COLON_COLON303_tree=null;
		XQDTCommonTree ATTRIBUTE304_tree=null;
		XQDTCommonTree COLON_COLON305_tree=null;
		XQDTCommonTree SELF306_tree=null;
		XQDTCommonTree COLON_COLON307_tree=null;
		XQDTCommonTree DESCENDANT_OR_SELF308_tree=null;
		XQDTCommonTree COLON_COLON309_tree=null;
		XQDTCommonTree FOLLOWING_SIBLING310_tree=null;
		XQDTCommonTree COLON_COLON311_tree=null;
		XQDTCommonTree FOLLOWING312_tree=null;
		XQDTCommonTree COLON_COLON313_tree=null;

		try {
			// XQueryParser.g:775:9: ( CHILD COLON_COLON | DESCENDANT COLON_COLON | ATTRIBUTE COLON_COLON | SELF COLON_COLON | DESCENDANT_OR_SELF COLON_COLON | FOLLOWING_SIBLING COLON_COLON | FOLLOWING COLON_COLON )
			int alt121=7;
			switch ( input.LA(1) ) {
			case CHILD:
				{
				alt121=1;
				}
				break;
			case DESCENDANT:
				{
				alt121=2;
				}
				break;
			case ATTRIBUTE:
				{
				alt121=3;
				}
				break;
			case SELF:
				{
				alt121=4;
				}
				break;
			case DESCENDANT_OR_SELF:
				{
				alt121=5;
				}
				break;
			case FOLLOWING_SIBLING:
				{
				alt121=6;
				}
				break;
			case FOLLOWING:
				{
				alt121=7;
				}
				break;
			default:
				if (state.backtracking>0) {state.failed=true; return retval;}
				NoViableAltException nvae =
					new NoViableAltException("", 121, 0, input);
				throw nvae;
			}
			switch (alt121) {
				case 1 :
					// XQueryParser.g:775:11: CHILD COLON_COLON
					{
					root_0 = (XQDTCommonTree)adaptor.nil();


					CHILD300=(CommonToken)match(input,CHILD,FOLLOW_CHILD_in_p_ForwardAxis6882); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					CHILD300_tree = (XQDTCommonTree)adaptor.create(CHILD300);
					adaptor.addChild(root_0, CHILD300_tree);
					}

					COLON_COLON301=(CommonToken)match(input,COLON_COLON,FOLLOW_COLON_COLON_in_p_ForwardAxis6884); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					COLON_COLON301_tree = (XQDTCommonTree)adaptor.create(COLON_COLON301);
					adaptor.addChild(root_0, COLON_COLON301_tree);
					}

					}
					break;
				case 2 :
					// XQueryParser.g:776:11: DESCENDANT COLON_COLON
					{
					root_0 = (XQDTCommonTree)adaptor.nil();


					DESCENDANT302=(CommonToken)match(input,DESCENDANT,FOLLOW_DESCENDANT_in_p_ForwardAxis6896); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					DESCENDANT302_tree = (XQDTCommonTree)adaptor.create(DESCENDANT302);
					adaptor.addChild(root_0, DESCENDANT302_tree);
					}

					COLON_COLON303=(CommonToken)match(input,COLON_COLON,FOLLOW_COLON_COLON_in_p_ForwardAxis6898); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					COLON_COLON303_tree = (XQDTCommonTree)adaptor.create(COLON_COLON303);
					adaptor.addChild(root_0, COLON_COLON303_tree);
					}

					}
					break;
				case 3 :
					// XQueryParser.g:777:11: ATTRIBUTE COLON_COLON
					{
					root_0 = (XQDTCommonTree)adaptor.nil();


					ATTRIBUTE304=(CommonToken)match(input,ATTRIBUTE,FOLLOW_ATTRIBUTE_in_p_ForwardAxis6910); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					ATTRIBUTE304_tree = (XQDTCommonTree)adaptor.create(ATTRIBUTE304);
					adaptor.addChild(root_0, ATTRIBUTE304_tree);
					}

					COLON_COLON305=(CommonToken)match(input,COLON_COLON,FOLLOW_COLON_COLON_in_p_ForwardAxis6912); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					COLON_COLON305_tree = (XQDTCommonTree)adaptor.create(COLON_COLON305);
					adaptor.addChild(root_0, COLON_COLON305_tree);
					}

					}
					break;
				case 4 :
					// XQueryParser.g:778:11: SELF COLON_COLON
					{
					root_0 = (XQDTCommonTree)adaptor.nil();


					SELF306=(CommonToken)match(input,SELF,FOLLOW_SELF_in_p_ForwardAxis6924); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					SELF306_tree = (XQDTCommonTree)adaptor.create(SELF306);
					adaptor.addChild(root_0, SELF306_tree);
					}

					COLON_COLON307=(CommonToken)match(input,COLON_COLON,FOLLOW_COLON_COLON_in_p_ForwardAxis6926); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					COLON_COLON307_tree = (XQDTCommonTree)adaptor.create(COLON_COLON307);
					adaptor.addChild(root_0, COLON_COLON307_tree);
					}

					}
					break;
				case 5 :
					// XQueryParser.g:779:11: DESCENDANT_OR_SELF COLON_COLON
					{
					root_0 = (XQDTCommonTree)adaptor.nil();


					DESCENDANT_OR_SELF308=(CommonToken)match(input,DESCENDANT_OR_SELF,FOLLOW_DESCENDANT_OR_SELF_in_p_ForwardAxis6938); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					DESCENDANT_OR_SELF308_tree = (XQDTCommonTree)adaptor.create(DESCENDANT_OR_SELF308);
					adaptor.addChild(root_0, DESCENDANT_OR_SELF308_tree);
					}

					COLON_COLON309=(CommonToken)match(input,COLON_COLON,FOLLOW_COLON_COLON_in_p_ForwardAxis6940); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					COLON_COLON309_tree = (XQDTCommonTree)adaptor.create(COLON_COLON309);
					adaptor.addChild(root_0, COLON_COLON309_tree);
					}

					}
					break;
				case 6 :
					// XQueryParser.g:780:11: FOLLOWING_SIBLING COLON_COLON
					{
					root_0 = (XQDTCommonTree)adaptor.nil();


					FOLLOWING_SIBLING310=(CommonToken)match(input,FOLLOWING_SIBLING,FOLLOW_FOLLOWING_SIBLING_in_p_ForwardAxis6952); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					FOLLOWING_SIBLING310_tree = (XQDTCommonTree)adaptor.create(FOLLOWING_SIBLING310);
					adaptor.addChild(root_0, FOLLOWING_SIBLING310_tree);
					}

					COLON_COLON311=(CommonToken)match(input,COLON_COLON,FOLLOW_COLON_COLON_in_p_ForwardAxis6954); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					COLON_COLON311_tree = (XQDTCommonTree)adaptor.create(COLON_COLON311);
					adaptor.addChild(root_0, COLON_COLON311_tree);
					}

					}
					break;
				case 7 :
					// XQueryParser.g:781:11: FOLLOWING COLON_COLON
					{
					root_0 = (XQDTCommonTree)adaptor.nil();


					FOLLOWING312=(CommonToken)match(input,FOLLOWING,FOLLOW_FOLLOWING_in_p_ForwardAxis6966); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					FOLLOWING312_tree = (XQDTCommonTree)adaptor.create(FOLLOWING312);
					adaptor.addChild(root_0, FOLLOWING312_tree);
					}

					COLON_COLON313=(CommonToken)match(input,COLON_COLON,FOLLOW_COLON_COLON_in_p_ForwardAxis6968); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					COLON_COLON313_tree = (XQDTCommonTree)adaptor.create(COLON_COLON313);
					adaptor.addChild(root_0, COLON_COLON313_tree);
					}

					}
					break;

			}
			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (XQDTCommonTree)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
			retval.tree = (XQDTCommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "p_ForwardAxis"


	public static class p_AbbrevForwardStep_return extends ParserRuleReturnScope {
		XQDTCommonTree tree;
		@Override
		public XQDTCommonTree getTree() { return tree; }
	};


	// $ANTLR start "p_AbbrevForwardStep"
	// XQueryParser.g:785:1: p_AbbrevForwardStep : ( ATTR_SIGN )? p_NodeTest ;
	public final XQueryParser.p_AbbrevForwardStep_return p_AbbrevForwardStep() throws RecognitionException {
		XQueryParser.p_AbbrevForwardStep_return retval = new XQueryParser.p_AbbrevForwardStep_return();
		retval.start = input.LT(1);

		XQDTCommonTree root_0 = null;

		CommonToken ATTR_SIGN314=null;
		ParserRuleReturnScope p_NodeTest315 =null;

		XQDTCommonTree ATTR_SIGN314_tree=null;

		try {
			// XQueryParser.g:786:9: ( ( ATTR_SIGN )? p_NodeTest )
			// XQueryParser.g:786:11: ( ATTR_SIGN )? p_NodeTest
			{
			root_0 = (XQDTCommonTree)adaptor.nil();


			// XQueryParser.g:786:11: ( ATTR_SIGN )?
			int alt122=2;
			int LA122_0 = input.LA(1);
			if ( (LA122_0==ATTR_SIGN) ) {
				alt122=1;
			}
			switch (alt122) {
				case 1 :
					// XQueryParser.g:786:11: ATTR_SIGN
					{
					ATTR_SIGN314=(CommonToken)match(input,ATTR_SIGN,FOLLOW_ATTR_SIGN_in_p_AbbrevForwardStep6994); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					ATTR_SIGN314_tree = (XQDTCommonTree)adaptor.create(ATTR_SIGN314);
					adaptor.addChild(root_0, ATTR_SIGN314_tree);
					}

					}
					break;

			}

			pushFollow(FOLLOW_p_NodeTest_in_p_AbbrevForwardStep6997);
			p_NodeTest315=p_NodeTest();
			state._fsp--;
			if (state.failed) return retval;
			if ( state.backtracking==0 ) adaptor.addChild(root_0, p_NodeTest315.getTree());

			}

			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (XQDTCommonTree)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
			retval.tree = (XQDTCommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "p_AbbrevForwardStep"


	public static class p_ReverseStep_return extends ParserRuleReturnScope {
		XQDTCommonTree tree;
		@Override
		public XQDTCommonTree getTree() { return tree; }
	};


	// $ANTLR start "p_ReverseStep"
	// XQueryParser.g:790:1: p_ReverseStep : ( p_ReverseAxis p_NodeTest | p_AbbrevReverseStep );
	public final XQueryParser.p_ReverseStep_return p_ReverseStep() throws RecognitionException {
		XQueryParser.p_ReverseStep_return retval = new XQueryParser.p_ReverseStep_return();
		retval.start = input.LT(1);

		XQDTCommonTree root_0 = null;

		ParserRuleReturnScope p_ReverseAxis316 =null;
		ParserRuleReturnScope p_NodeTest317 =null;
		ParserRuleReturnScope p_AbbrevReverseStep318 =null;


		try {
			// XQueryParser.g:791:9: ( p_ReverseAxis p_NodeTest | p_AbbrevReverseStep )
			int alt123=2;
			int LA123_0 = input.LA(1);
			if ( ((LA123_0 >= ANCESTOR && LA123_0 <= ANCESTOR_OR_SELF)||LA123_0==PARENT||(LA123_0 >= PRECEDING && LA123_0 <= PRECEDING_SIBLING)) ) {
				alt123=1;
			}
			else if ( (LA123_0==DOT_DOT) ) {
				alt123=2;
			}

			else {
				if (state.backtracking>0) {state.failed=true; return retval;}
				NoViableAltException nvae =
					new NoViableAltException("", 123, 0, input);
				throw nvae;
			}

			switch (alt123) {
				case 1 :
					// XQueryParser.g:791:11: p_ReverseAxis p_NodeTest
					{
					root_0 = (XQDTCommonTree)adaptor.nil();


					pushFollow(FOLLOW_p_ReverseAxis_in_p_ReverseStep7023);
					p_ReverseAxis316=p_ReverseAxis();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, p_ReverseAxis316.getTree());

					pushFollow(FOLLOW_p_NodeTest_in_p_ReverseStep7025);
					p_NodeTest317=p_NodeTest();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, p_NodeTest317.getTree());

					}
					break;
				case 2 :
					// XQueryParser.g:792:11: p_AbbrevReverseStep
					{
					root_0 = (XQDTCommonTree)adaptor.nil();


					pushFollow(FOLLOW_p_AbbrevReverseStep_in_p_ReverseStep7037);
					p_AbbrevReverseStep318=p_AbbrevReverseStep();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, p_AbbrevReverseStep318.getTree());

					}
					break;

			}
			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (XQDTCommonTree)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
			retval.tree = (XQDTCommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "p_ReverseStep"


	public static class p_ReverseAxis_return extends ParserRuleReturnScope {
		XQDTCommonTree tree;
		@Override
		public XQDTCommonTree getTree() { return tree; }
	};


	// $ANTLR start "p_ReverseAxis"
	// XQueryParser.g:796:1: p_ReverseAxis : ( PARENT COLON_COLON | ANCESTOR COLON_COLON | PRECEDING_SIBLING COLON_COLON | PRECEDING COLON_COLON | ANCESTOR_OR_SELF COLON_COLON );
	public final XQueryParser.p_ReverseAxis_return p_ReverseAxis() throws RecognitionException {
		XQueryParser.p_ReverseAxis_return retval = new XQueryParser.p_ReverseAxis_return();
		retval.start = input.LT(1);

		XQDTCommonTree root_0 = null;

		CommonToken PARENT319=null;
		CommonToken COLON_COLON320=null;
		CommonToken ANCESTOR321=null;
		CommonToken COLON_COLON322=null;
		CommonToken PRECEDING_SIBLING323=null;
		CommonToken COLON_COLON324=null;
		CommonToken PRECEDING325=null;
		CommonToken COLON_COLON326=null;
		CommonToken ANCESTOR_OR_SELF327=null;
		CommonToken COLON_COLON328=null;

		XQDTCommonTree PARENT319_tree=null;
		XQDTCommonTree COLON_COLON320_tree=null;
		XQDTCommonTree ANCESTOR321_tree=null;
		XQDTCommonTree COLON_COLON322_tree=null;
		XQDTCommonTree PRECEDING_SIBLING323_tree=null;
		XQDTCommonTree COLON_COLON324_tree=null;
		XQDTCommonTree PRECEDING325_tree=null;
		XQDTCommonTree COLON_COLON326_tree=null;
		XQDTCommonTree ANCESTOR_OR_SELF327_tree=null;
		XQDTCommonTree COLON_COLON328_tree=null;

		try {
			// XQueryParser.g:797:9: ( PARENT COLON_COLON | ANCESTOR COLON_COLON | PRECEDING_SIBLING COLON_COLON | PRECEDING COLON_COLON | ANCESTOR_OR_SELF COLON_COLON )
			int alt124=5;
			switch ( input.LA(1) ) {
			case PARENT:
				{
				alt124=1;
				}
				break;
			case ANCESTOR:
				{
				alt124=2;
				}
				break;
			case PRECEDING_SIBLING:
				{
				alt124=3;
				}
				break;
			case PRECEDING:
				{
				alt124=4;
				}
				break;
			case ANCESTOR_OR_SELF:
				{
				alt124=5;
				}
				break;
			default:
				if (state.backtracking>0) {state.failed=true; return retval;}
				NoViableAltException nvae =
					new NoViableAltException("", 124, 0, input);
				throw nvae;
			}
			switch (alt124) {
				case 1 :
					// XQueryParser.g:797:11: PARENT COLON_COLON
					{
					root_0 = (XQDTCommonTree)adaptor.nil();


					PARENT319=(CommonToken)match(input,PARENT,FOLLOW_PARENT_in_p_ReverseAxis7063); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					PARENT319_tree = (XQDTCommonTree)adaptor.create(PARENT319);
					adaptor.addChild(root_0, PARENT319_tree);
					}

					COLON_COLON320=(CommonToken)match(input,COLON_COLON,FOLLOW_COLON_COLON_in_p_ReverseAxis7065); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					COLON_COLON320_tree = (XQDTCommonTree)adaptor.create(COLON_COLON320);
					adaptor.addChild(root_0, COLON_COLON320_tree);
					}

					}
					break;
				case 2 :
					// XQueryParser.g:798:11: ANCESTOR COLON_COLON
					{
					root_0 = (XQDTCommonTree)adaptor.nil();


					ANCESTOR321=(CommonToken)match(input,ANCESTOR,FOLLOW_ANCESTOR_in_p_ReverseAxis7077); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					ANCESTOR321_tree = (XQDTCommonTree)adaptor.create(ANCESTOR321);
					adaptor.addChild(root_0, ANCESTOR321_tree);
					}

					COLON_COLON322=(CommonToken)match(input,COLON_COLON,FOLLOW_COLON_COLON_in_p_ReverseAxis7079); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					COLON_COLON322_tree = (XQDTCommonTree)adaptor.create(COLON_COLON322);
					adaptor.addChild(root_0, COLON_COLON322_tree);
					}

					}
					break;
				case 3 :
					// XQueryParser.g:799:11: PRECEDING_SIBLING COLON_COLON
					{
					root_0 = (XQDTCommonTree)adaptor.nil();


					PRECEDING_SIBLING323=(CommonToken)match(input,PRECEDING_SIBLING,FOLLOW_PRECEDING_SIBLING_in_p_ReverseAxis7091); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					PRECEDING_SIBLING323_tree = (XQDTCommonTree)adaptor.create(PRECEDING_SIBLING323);
					adaptor.addChild(root_0, PRECEDING_SIBLING323_tree);
					}

					COLON_COLON324=(CommonToken)match(input,COLON_COLON,FOLLOW_COLON_COLON_in_p_ReverseAxis7093); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					COLON_COLON324_tree = (XQDTCommonTree)adaptor.create(COLON_COLON324);
					adaptor.addChild(root_0, COLON_COLON324_tree);
					}

					}
					break;
				case 4 :
					// XQueryParser.g:800:11: PRECEDING COLON_COLON
					{
					root_0 = (XQDTCommonTree)adaptor.nil();


					PRECEDING325=(CommonToken)match(input,PRECEDING,FOLLOW_PRECEDING_in_p_ReverseAxis7105); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					PRECEDING325_tree = (XQDTCommonTree)adaptor.create(PRECEDING325);
					adaptor.addChild(root_0, PRECEDING325_tree);
					}

					COLON_COLON326=(CommonToken)match(input,COLON_COLON,FOLLOW_COLON_COLON_in_p_ReverseAxis7107); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					COLON_COLON326_tree = (XQDTCommonTree)adaptor.create(COLON_COLON326);
					adaptor.addChild(root_0, COLON_COLON326_tree);
					}

					}
					break;
				case 5 :
					// XQueryParser.g:801:11: ANCESTOR_OR_SELF COLON_COLON
					{
					root_0 = (XQDTCommonTree)adaptor.nil();


					ANCESTOR_OR_SELF327=(CommonToken)match(input,ANCESTOR_OR_SELF,FOLLOW_ANCESTOR_OR_SELF_in_p_ReverseAxis7119); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					ANCESTOR_OR_SELF327_tree = (XQDTCommonTree)adaptor.create(ANCESTOR_OR_SELF327);
					adaptor.addChild(root_0, ANCESTOR_OR_SELF327_tree);
					}

					COLON_COLON328=(CommonToken)match(input,COLON_COLON,FOLLOW_COLON_COLON_in_p_ReverseAxis7121); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					COLON_COLON328_tree = (XQDTCommonTree)adaptor.create(COLON_COLON328);
					adaptor.addChild(root_0, COLON_COLON328_tree);
					}

					}
					break;

			}
			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (XQDTCommonTree)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
			retval.tree = (XQDTCommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "p_ReverseAxis"


	public static class p_AbbrevReverseStep_return extends ParserRuleReturnScope {
		XQDTCommonTree tree;
		@Override
		public XQDTCommonTree getTree() { return tree; }
	};


	// $ANTLR start "p_AbbrevReverseStep"
	// XQueryParser.g:805:1: p_AbbrevReverseStep : DOT_DOT ;
	public final XQueryParser.p_AbbrevReverseStep_return p_AbbrevReverseStep() throws RecognitionException {
		XQueryParser.p_AbbrevReverseStep_return retval = new XQueryParser.p_AbbrevReverseStep_return();
		retval.start = input.LT(1);

		XQDTCommonTree root_0 = null;

		CommonToken DOT_DOT329=null;

		XQDTCommonTree DOT_DOT329_tree=null;

		try {
			// XQueryParser.g:806:9: ( DOT_DOT )
			// XQueryParser.g:806:11: DOT_DOT
			{
			root_0 = (XQDTCommonTree)adaptor.nil();


			DOT_DOT329=(CommonToken)match(input,DOT_DOT,FOLLOW_DOT_DOT_in_p_AbbrevReverseStep7147); if (state.failed) return retval;
			if ( state.backtracking==0 ) {
			DOT_DOT329_tree = (XQDTCommonTree)adaptor.create(DOT_DOT329);
			adaptor.addChild(root_0, DOT_DOT329_tree);
			}

			}

			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (XQDTCommonTree)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
			retval.tree = (XQDTCommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "p_AbbrevReverseStep"


	public static class p_NodeTest_return extends ParserRuleReturnScope {
		XQDTCommonTree tree;
		@Override
		public XQDTCommonTree getTree() { return tree; }
	};


	// $ANTLR start "p_NodeTest"
	// XQueryParser.g:810:1: p_NodeTest : ( p_KindTest | p_NameTest );
	public final XQueryParser.p_NodeTest_return p_NodeTest() throws RecognitionException {
		XQueryParser.p_NodeTest_return retval = new XQueryParser.p_NodeTest_return();
		retval.start = input.LT(1);

		XQDTCommonTree root_0 = null;

		ParserRuleReturnScope p_KindTest330 =null;
		ParserRuleReturnScope p_NameTest331 =null;


		try {
			// XQueryParser.g:811:9: ( p_KindTest | p_NameTest )
			int alt125=2;
			switch ( input.LA(1) ) {
			case DOCUMENT_NODE:
				{
				int LA125_1 = input.LA(2);
				if ( (LA125_1==LPAREN) ) {
					alt125=1;
				}
				else if ( (LA125_1==EOF||LA125_1==AFTER||LA125_1==AND||(LA125_1 >= AS && LA125_1 <= ASCENDING)||LA125_1==BEFORE||(LA125_1 >= BY && LA125_1 <= CASTABLE)||LA125_1==COLLATION||LA125_1==COLON||LA125_1==COMMA||LA125_1==CONCAT||LA125_1==CONTAINS||LA125_1==COUNT||LA125_1==DEFAULT||LA125_1==DESCENDING||LA125_1==DIV||LA125_1==EMPTY||LA125_1==END||(LA125_1 >= EQ && LA125_1 <= EQUAL)||LA125_1==EXCEPT||LA125_1==FOR||(LA125_1 >= GE && LA125_1 <= GREATER_GREATER)||LA125_1==GROUP||LA125_1==GT||LA125_1==IDIV||LA125_1==INSTANCE||(LA125_1 >= INTERSECT && LA125_1 <= IS)||LA125_1==LE||LA125_1==LET||(LA125_1 >= LSQUARE && LA125_1 <= LT)||LA125_1==MINUS||(LA125_1 >= MOD && LA125_1 <= MODIFY)||LA125_1==NE||LA125_1==NOTEQUAL||LA125_1==ONLY||(LA125_1 >= OR && LA125_1 <= ORDER)||LA125_1==PARAGRAPHS||LA125_1==PLUS||LA125_1==RBRACKET||LA125_1==RETURN||(LA125_1 >= RPAREN && LA125_1 <= RSQUARE)||LA125_1==SATISFIES||LA125_1==SEMICOLON||LA125_1==SENTENCES||(LA125_1 >= SLASH && LA125_1 <= SLASH_SLASH)||(LA125_1 >= SMALLER && LA125_1 <= SMALLER_SMALLER)||(LA125_1 >= STABLE && LA125_1 <= START)||(LA125_1 >= TIMES && LA125_1 <= TREAT)||LA125_1==UNION||LA125_1==VBAR||LA125_1==WHERE||LA125_1==WITH||LA125_1==WORDS) ) {
					alt125=2;
				}

				else {
					if (state.backtracking>0) {state.failed=true; return retval;}
					int nvaeMark = input.mark();
					try {
						input.consume();
						NoViableAltException nvae =
							new NoViableAltException("", 125, 1, input);
						throw nvae;
					} finally {
						input.rewind(nvaeMark);
					}
				}

				}
				break;
			case ELEMENT:
				{
				int LA125_2 = input.LA(2);
				if ( (LA125_2==LPAREN) ) {
					alt125=1;
				}
				else if ( (LA125_2==EOF||LA125_2==AFTER||LA125_2==AND||(LA125_2 >= AS && LA125_2 <= ASCENDING)||LA125_2==BEFORE||(LA125_2 >= BY && LA125_2 <= CASTABLE)||LA125_2==COLLATION||LA125_2==COLON||LA125_2==COMMA||LA125_2==CONCAT||LA125_2==CONTAINS||LA125_2==COUNT||LA125_2==DEFAULT||LA125_2==DESCENDING||LA125_2==DIV||LA125_2==EMPTY||LA125_2==END||(LA125_2 >= EQ && LA125_2 <= EQUAL)||LA125_2==EXCEPT||LA125_2==FOR||(LA125_2 >= GE && LA125_2 <= GREATER_GREATER)||LA125_2==GROUP||LA125_2==GT||LA125_2==IDIV||LA125_2==INSTANCE||(LA125_2 >= INTERSECT && LA125_2 <= IS)||LA125_2==LE||LA125_2==LET||(LA125_2 >= LSQUARE && LA125_2 <= LT)||LA125_2==MINUS||(LA125_2 >= MOD && LA125_2 <= MODIFY)||LA125_2==NE||LA125_2==NOTEQUAL||LA125_2==ONLY||(LA125_2 >= OR && LA125_2 <= ORDER)||LA125_2==PARAGRAPHS||LA125_2==PLUS||LA125_2==RBRACKET||LA125_2==RETURN||(LA125_2 >= RPAREN && LA125_2 <= RSQUARE)||LA125_2==SATISFIES||LA125_2==SEMICOLON||LA125_2==SENTENCES||(LA125_2 >= SLASH && LA125_2 <= SLASH_SLASH)||(LA125_2 >= SMALLER && LA125_2 <= SMALLER_SMALLER)||(LA125_2 >= STABLE && LA125_2 <= START)||(LA125_2 >= TIMES && LA125_2 <= TREAT)||LA125_2==UNION||LA125_2==VBAR||LA125_2==WHERE||LA125_2==WITH||LA125_2==WORDS) ) {
					alt125=2;
				}

				else {
					if (state.backtracking>0) {state.failed=true; return retval;}
					int nvaeMark = input.mark();
					try {
						input.consume();
						NoViableAltException nvae =
							new NoViableAltException("", 125, 2, input);
						throw nvae;
					} finally {
						input.rewind(nvaeMark);
					}
				}

				}
				break;
			case ATTRIBUTE:
				{
				int LA125_3 = input.LA(2);
				if ( (LA125_3==LPAREN) ) {
					alt125=1;
				}
				else if ( (LA125_3==EOF||LA125_3==AFTER||LA125_3==AND||(LA125_3 >= AS && LA125_3 <= ASCENDING)||LA125_3==BEFORE||(LA125_3 >= BY && LA125_3 <= CASTABLE)||LA125_3==COLLATION||LA125_3==COLON||LA125_3==COMMA||LA125_3==CONCAT||LA125_3==CONTAINS||LA125_3==COUNT||LA125_3==DEFAULT||LA125_3==DESCENDING||LA125_3==DIV||LA125_3==EMPTY||LA125_3==END||(LA125_3 >= EQ && LA125_3 <= EQUAL)||LA125_3==EXCEPT||LA125_3==FOR||(LA125_3 >= GE && LA125_3 <= GREATER_GREATER)||LA125_3==GROUP||LA125_3==GT||LA125_3==IDIV||LA125_3==INSTANCE||(LA125_3 >= INTERSECT && LA125_3 <= IS)||LA125_3==LE||LA125_3==LET||(LA125_3 >= LSQUARE && LA125_3 <= LT)||LA125_3==MINUS||(LA125_3 >= MOD && LA125_3 <= MODIFY)||LA125_3==NE||LA125_3==NOTEQUAL||LA125_3==ONLY||(LA125_3 >= OR && LA125_3 <= ORDER)||LA125_3==PARAGRAPHS||LA125_3==PLUS||LA125_3==RBRACKET||LA125_3==RETURN||(LA125_3 >= RPAREN && LA125_3 <= RSQUARE)||LA125_3==SATISFIES||LA125_3==SEMICOLON||LA125_3==SENTENCES||(LA125_3 >= SLASH && LA125_3 <= SLASH_SLASH)||(LA125_3 >= SMALLER && LA125_3 <= SMALLER_SMALLER)||(LA125_3 >= STABLE && LA125_3 <= START)||(LA125_3 >= TIMES && LA125_3 <= TREAT)||LA125_3==UNION||LA125_3==VBAR||LA125_3==WHERE||LA125_3==WITH||LA125_3==WORDS) ) {
					alt125=2;
				}

				else {
					if (state.backtracking>0) {state.failed=true; return retval;}
					int nvaeMark = input.mark();
					try {
						input.consume();
						NoViableAltException nvae =
							new NoViableAltException("", 125, 3, input);
						throw nvae;
					} finally {
						input.rewind(nvaeMark);
					}
				}

				}
				break;
			case SCHEMA_ELEMENT:
				{
				int LA125_4 = input.LA(2);
				if ( (LA125_4==LPAREN) ) {
					alt125=1;
				}
				else if ( (LA125_4==EOF||LA125_4==AFTER||LA125_4==AND||(LA125_4 >= AS && LA125_4 <= ASCENDING)||LA125_4==BEFORE||(LA125_4 >= BY && LA125_4 <= CASTABLE)||LA125_4==COLLATION||LA125_4==COLON||LA125_4==COMMA||LA125_4==CONCAT||LA125_4==CONTAINS||LA125_4==COUNT||LA125_4==DEFAULT||LA125_4==DESCENDING||LA125_4==DIV||LA125_4==EMPTY||LA125_4==END||(LA125_4 >= EQ && LA125_4 <= EQUAL)||LA125_4==EXCEPT||LA125_4==FOR||(LA125_4 >= GE && LA125_4 <= GREATER_GREATER)||LA125_4==GROUP||LA125_4==GT||LA125_4==IDIV||LA125_4==INSTANCE||(LA125_4 >= INTERSECT && LA125_4 <= IS)||LA125_4==LE||LA125_4==LET||(LA125_4 >= LSQUARE && LA125_4 <= LT)||LA125_4==MINUS||(LA125_4 >= MOD && LA125_4 <= MODIFY)||LA125_4==NE||LA125_4==NOTEQUAL||LA125_4==ONLY||(LA125_4 >= OR && LA125_4 <= ORDER)||LA125_4==PARAGRAPHS||LA125_4==PLUS||LA125_4==RBRACKET||LA125_4==RETURN||(LA125_4 >= RPAREN && LA125_4 <= RSQUARE)||LA125_4==SATISFIES||LA125_4==SEMICOLON||LA125_4==SENTENCES||(LA125_4 >= SLASH && LA125_4 <= SLASH_SLASH)||(LA125_4 >= SMALLER && LA125_4 <= SMALLER_SMALLER)||(LA125_4 >= STABLE && LA125_4 <= START)||(LA125_4 >= TIMES && LA125_4 <= TREAT)||LA125_4==UNION||LA125_4==VBAR||LA125_4==WHERE||LA125_4==WITH||LA125_4==WORDS) ) {
					alt125=2;
				}

				else {
					if (state.backtracking>0) {state.failed=true; return retval;}
					int nvaeMark = input.mark();
					try {
						input.consume();
						NoViableAltException nvae =
							new NoViableAltException("", 125, 4, input);
						throw nvae;
					} finally {
						input.rewind(nvaeMark);
					}
				}

				}
				break;
			case SCHEMA_ATTRIBUTE:
				{
				int LA125_5 = input.LA(2);
				if ( (LA125_5==LPAREN) ) {
					alt125=1;
				}
				else if ( (LA125_5==EOF||LA125_5==AFTER||LA125_5==AND||(LA125_5 >= AS && LA125_5 <= ASCENDING)||LA125_5==BEFORE||(LA125_5 >= BY && LA125_5 <= CASTABLE)||LA125_5==COLLATION||LA125_5==COLON||LA125_5==COMMA||LA125_5==CONCAT||LA125_5==CONTAINS||LA125_5==COUNT||LA125_5==DEFAULT||LA125_5==DESCENDING||LA125_5==DIV||LA125_5==EMPTY||LA125_5==END||(LA125_5 >= EQ && LA125_5 <= EQUAL)||LA125_5==EXCEPT||LA125_5==FOR||(LA125_5 >= GE && LA125_5 <= GREATER_GREATER)||LA125_5==GROUP||LA125_5==GT||LA125_5==IDIV||LA125_5==INSTANCE||(LA125_5 >= INTERSECT && LA125_5 <= IS)||LA125_5==LE||LA125_5==LET||(LA125_5 >= LSQUARE && LA125_5 <= LT)||LA125_5==MINUS||(LA125_5 >= MOD && LA125_5 <= MODIFY)||LA125_5==NE||LA125_5==NOTEQUAL||LA125_5==ONLY||(LA125_5 >= OR && LA125_5 <= ORDER)||LA125_5==PARAGRAPHS||LA125_5==PLUS||LA125_5==RBRACKET||LA125_5==RETURN||(LA125_5 >= RPAREN && LA125_5 <= RSQUARE)||LA125_5==SATISFIES||LA125_5==SEMICOLON||LA125_5==SENTENCES||(LA125_5 >= SLASH && LA125_5 <= SLASH_SLASH)||(LA125_5 >= SMALLER && LA125_5 <= SMALLER_SMALLER)||(LA125_5 >= STABLE && LA125_5 <= START)||(LA125_5 >= TIMES && LA125_5 <= TREAT)||LA125_5==UNION||LA125_5==VBAR||LA125_5==WHERE||LA125_5==WITH||LA125_5==WORDS) ) {
					alt125=2;
				}

				else {
					if (state.backtracking>0) {state.failed=true; return retval;}
					int nvaeMark = input.mark();
					try {
						input.consume();
						NoViableAltException nvae =
							new NoViableAltException("", 125, 5, input);
						throw nvae;
					} finally {
						input.rewind(nvaeMark);
					}
				}

				}
				break;
			case PROCESSING_INSTRUCTION:
				{
				int LA125_6 = input.LA(2);
				if ( (LA125_6==LPAREN) ) {
					alt125=1;
				}
				else if ( (LA125_6==EOF||LA125_6==AFTER||LA125_6==AND||(LA125_6 >= AS && LA125_6 <= ASCENDING)||LA125_6==BEFORE||(LA125_6 >= BY && LA125_6 <= CASTABLE)||LA125_6==COLLATION||LA125_6==COLON||LA125_6==COMMA||LA125_6==CONCAT||LA125_6==CONTAINS||LA125_6==COUNT||LA125_6==DEFAULT||LA125_6==DESCENDING||LA125_6==DIV||LA125_6==EMPTY||LA125_6==END||(LA125_6 >= EQ && LA125_6 <= EQUAL)||LA125_6==EXCEPT||LA125_6==FOR||(LA125_6 >= GE && LA125_6 <= GREATER_GREATER)||LA125_6==GROUP||LA125_6==GT||LA125_6==IDIV||LA125_6==INSTANCE||(LA125_6 >= INTERSECT && LA125_6 <= IS)||LA125_6==LE||LA125_6==LET||(LA125_6 >= LSQUARE && LA125_6 <= LT)||LA125_6==MINUS||(LA125_6 >= MOD && LA125_6 <= MODIFY)||LA125_6==NE||LA125_6==NOTEQUAL||LA125_6==ONLY||(LA125_6 >= OR && LA125_6 <= ORDER)||LA125_6==PARAGRAPHS||LA125_6==PLUS||LA125_6==RBRACKET||LA125_6==RETURN||(LA125_6 >= RPAREN && LA125_6 <= RSQUARE)||LA125_6==SATISFIES||LA125_6==SEMICOLON||LA125_6==SENTENCES||(LA125_6 >= SLASH && LA125_6 <= SLASH_SLASH)||(LA125_6 >= SMALLER && LA125_6 <= SMALLER_SMALLER)||(LA125_6 >= STABLE && LA125_6 <= START)||(LA125_6 >= TIMES && LA125_6 <= TREAT)||LA125_6==UNION||LA125_6==VBAR||LA125_6==WHERE||LA125_6==WITH||LA125_6==WORDS) ) {
					alt125=2;
				}

				else {
					if (state.backtracking>0) {state.failed=true; return retval;}
					int nvaeMark = input.mark();
					try {
						input.consume();
						NoViableAltException nvae =
							new NoViableAltException("", 125, 6, input);
						throw nvae;
					} finally {
						input.rewind(nvaeMark);
					}
				}

				}
				break;
			case COMMENT:
				{
				int LA125_7 = input.LA(2);
				if ( (LA125_7==LPAREN) ) {
					alt125=1;
				}
				else if ( (LA125_7==EOF||LA125_7==AFTER||LA125_7==AND||(LA125_7 >= AS && LA125_7 <= ASCENDING)||LA125_7==BEFORE||(LA125_7 >= BY && LA125_7 <= CASTABLE)||LA125_7==COLLATION||LA125_7==COLON||LA125_7==COMMA||LA125_7==CONCAT||LA125_7==CONTAINS||LA125_7==COUNT||LA125_7==DEFAULT||LA125_7==DESCENDING||LA125_7==DIV||LA125_7==EMPTY||LA125_7==END||(LA125_7 >= EQ && LA125_7 <= EQUAL)||LA125_7==EXCEPT||LA125_7==FOR||(LA125_7 >= GE && LA125_7 <= GREATER_GREATER)||LA125_7==GROUP||LA125_7==GT||LA125_7==IDIV||LA125_7==INSTANCE||(LA125_7 >= INTERSECT && LA125_7 <= IS)||LA125_7==LE||LA125_7==LET||(LA125_7 >= LSQUARE && LA125_7 <= LT)||LA125_7==MINUS||(LA125_7 >= MOD && LA125_7 <= MODIFY)||LA125_7==NE||LA125_7==NOTEQUAL||LA125_7==ONLY||(LA125_7 >= OR && LA125_7 <= ORDER)||LA125_7==PARAGRAPHS||LA125_7==PLUS||LA125_7==RBRACKET||LA125_7==RETURN||(LA125_7 >= RPAREN && LA125_7 <= RSQUARE)||LA125_7==SATISFIES||LA125_7==SEMICOLON||LA125_7==SENTENCES||(LA125_7 >= SLASH && LA125_7 <= SLASH_SLASH)||(LA125_7 >= SMALLER && LA125_7 <= SMALLER_SMALLER)||(LA125_7 >= STABLE && LA125_7 <= START)||(LA125_7 >= TIMES && LA125_7 <= TREAT)||LA125_7==UNION||LA125_7==VBAR||LA125_7==WHERE||LA125_7==WITH||LA125_7==WORDS) ) {
					alt125=2;
				}

				else {
					if (state.backtracking>0) {state.failed=true; return retval;}
					int nvaeMark = input.mark();
					try {
						input.consume();
						NoViableAltException nvae =
							new NoViableAltException("", 125, 7, input);
						throw nvae;
					} finally {
						input.rewind(nvaeMark);
					}
				}

				}
				break;
			case TEXT:
				{
				int LA125_8 = input.LA(2);
				if ( (LA125_8==LPAREN) ) {
					alt125=1;
				}
				else if ( (LA125_8==EOF||LA125_8==AFTER||LA125_8==AND||(LA125_8 >= AS && LA125_8 <= ASCENDING)||LA125_8==BEFORE||(LA125_8 >= BY && LA125_8 <= CASTABLE)||LA125_8==COLLATION||LA125_8==COLON||LA125_8==COMMA||LA125_8==CONCAT||LA125_8==CONTAINS||LA125_8==COUNT||LA125_8==DEFAULT||LA125_8==DESCENDING||LA125_8==DIV||LA125_8==EMPTY||LA125_8==END||(LA125_8 >= EQ && LA125_8 <= EQUAL)||LA125_8==EXCEPT||LA125_8==FOR||(LA125_8 >= GE && LA125_8 <= GREATER_GREATER)||LA125_8==GROUP||LA125_8==GT||LA125_8==IDIV||LA125_8==INSTANCE||(LA125_8 >= INTERSECT && LA125_8 <= IS)||LA125_8==LE||LA125_8==LET||(LA125_8 >= LSQUARE && LA125_8 <= LT)||LA125_8==MINUS||(LA125_8 >= MOD && LA125_8 <= MODIFY)||LA125_8==NE||LA125_8==NOTEQUAL||LA125_8==ONLY||(LA125_8 >= OR && LA125_8 <= ORDER)||LA125_8==PARAGRAPHS||LA125_8==PLUS||LA125_8==RBRACKET||LA125_8==RETURN||(LA125_8 >= RPAREN && LA125_8 <= RSQUARE)||LA125_8==SATISFIES||LA125_8==SEMICOLON||LA125_8==SENTENCES||(LA125_8 >= SLASH && LA125_8 <= SLASH_SLASH)||(LA125_8 >= SMALLER && LA125_8 <= SMALLER_SMALLER)||(LA125_8 >= STABLE && LA125_8 <= START)||(LA125_8 >= TIMES && LA125_8 <= TREAT)||LA125_8==UNION||LA125_8==VBAR||LA125_8==WHERE||LA125_8==WITH||LA125_8==WORDS) ) {
					alt125=2;
				}

				else {
					if (state.backtracking>0) {state.failed=true; return retval;}
					int nvaeMark = input.mark();
					try {
						input.consume();
						NoViableAltException nvae =
							new NoViableAltException("", 125, 8, input);
						throw nvae;
					} finally {
						input.rewind(nvaeMark);
					}
				}

				}
				break;
			case NAMESPACE_NODE:
				{
				int LA125_9 = input.LA(2);
				if ( (LA125_9==LPAREN) ) {
					alt125=1;
				}
				else if ( (LA125_9==EOF||LA125_9==AFTER||LA125_9==AND||(LA125_9 >= AS && LA125_9 <= ASCENDING)||LA125_9==BEFORE||(LA125_9 >= BY && LA125_9 <= CASTABLE)||LA125_9==COLLATION||LA125_9==COLON||LA125_9==COMMA||LA125_9==CONCAT||LA125_9==CONTAINS||LA125_9==COUNT||LA125_9==DEFAULT||LA125_9==DESCENDING||LA125_9==DIV||LA125_9==EMPTY||LA125_9==END||(LA125_9 >= EQ && LA125_9 <= EQUAL)||LA125_9==EXCEPT||LA125_9==FOR||(LA125_9 >= GE && LA125_9 <= GREATER_GREATER)||LA125_9==GROUP||LA125_9==GT||LA125_9==IDIV||LA125_9==INSTANCE||(LA125_9 >= INTERSECT && LA125_9 <= IS)||LA125_9==LE||LA125_9==LET||(LA125_9 >= LSQUARE && LA125_9 <= LT)||LA125_9==MINUS||(LA125_9 >= MOD && LA125_9 <= MODIFY)||LA125_9==NE||LA125_9==NOTEQUAL||LA125_9==ONLY||(LA125_9 >= OR && LA125_9 <= ORDER)||LA125_9==PARAGRAPHS||LA125_9==PLUS||LA125_9==RBRACKET||LA125_9==RETURN||(LA125_9 >= RPAREN && LA125_9 <= RSQUARE)||LA125_9==SATISFIES||LA125_9==SEMICOLON||LA125_9==SENTENCES||(LA125_9 >= SLASH && LA125_9 <= SLASH_SLASH)||(LA125_9 >= SMALLER && LA125_9 <= SMALLER_SMALLER)||(LA125_9 >= STABLE && LA125_9 <= START)||(LA125_9 >= TIMES && LA125_9 <= TREAT)||LA125_9==UNION||LA125_9==VBAR||LA125_9==WHERE||LA125_9==WITH||LA125_9==WORDS) ) {
					alt125=2;
				}

				else {
					if (state.backtracking>0) {state.failed=true; return retval;}
					int nvaeMark = input.mark();
					try {
						input.consume();
						NoViableAltException nvae =
							new NoViableAltException("", 125, 9, input);
						throw nvae;
					} finally {
						input.rewind(nvaeMark);
					}
				}

				}
				break;
			case NODE:
				{
				int LA125_10 = input.LA(2);
				if ( (LA125_10==LPAREN) ) {
					alt125=1;
				}
				else if ( (LA125_10==EOF||LA125_10==AFTER||LA125_10==AND||(LA125_10 >= AS && LA125_10 <= ASCENDING)||LA125_10==BEFORE||(LA125_10 >= BY && LA125_10 <= CASTABLE)||LA125_10==COLLATION||LA125_10==COLON||LA125_10==COMMA||LA125_10==CONCAT||LA125_10==CONTAINS||LA125_10==COUNT||LA125_10==DEFAULT||LA125_10==DESCENDING||LA125_10==DIV||LA125_10==EMPTY||LA125_10==END||(LA125_10 >= EQ && LA125_10 <= EQUAL)||LA125_10==EXCEPT||LA125_10==FOR||(LA125_10 >= GE && LA125_10 <= GREATER_GREATER)||LA125_10==GROUP||LA125_10==GT||LA125_10==IDIV||LA125_10==INSTANCE||(LA125_10 >= INTERSECT && LA125_10 <= IS)||LA125_10==LE||LA125_10==LET||(LA125_10 >= LSQUARE && LA125_10 <= LT)||LA125_10==MINUS||(LA125_10 >= MOD && LA125_10 <= MODIFY)||LA125_10==NE||LA125_10==NOTEQUAL||LA125_10==ONLY||(LA125_10 >= OR && LA125_10 <= ORDER)||LA125_10==PARAGRAPHS||LA125_10==PLUS||LA125_10==RBRACKET||LA125_10==RETURN||(LA125_10 >= RPAREN && LA125_10 <= RSQUARE)||LA125_10==SATISFIES||LA125_10==SEMICOLON||LA125_10==SENTENCES||(LA125_10 >= SLASH && LA125_10 <= SLASH_SLASH)||(LA125_10 >= SMALLER && LA125_10 <= SMALLER_SMALLER)||(LA125_10 >= STABLE && LA125_10 <= START)||(LA125_10 >= TIMES && LA125_10 <= TREAT)||LA125_10==UNION||LA125_10==VBAR||LA125_10==WHERE||LA125_10==WITH||LA125_10==WORDS) ) {
					alt125=2;
				}

				else {
					if (state.backtracking>0) {state.failed=true; return retval;}
					int nvaeMark = input.mark();
					try {
						input.consume();
						NoViableAltException nvae =
							new NoViableAltException("", 125, 10, input);
						throw nvae;
					} finally {
						input.rewind(nvaeMark);
					}
				}

				}
				break;
			case AFTER:
			case ALL:
			case ALLOWING:
			case AMP_ER:
			case ANCESTOR:
			case ANCESTOR_OR_SELF:
			case AND:
			case ANY:
			case APOS:
			case APOS_ER:
			case AS:
			case ASCENDING:
			case AT:
			case BASE_URI:
			case BEFORE:
			case BINARY:
			case BOUNDARY_SPACE:
			case BREAK:
			case BY:
			case CASE:
			case CAST:
			case CASTABLE:
			case CATCH:
			case CHECK:
			case CHILD:
			case COLLATION:
			case COLLECTION:
			case CONSTRAINT:
			case CONSTRUCTION:
			case CONTAINS:
			case CONTENT:
			case CONTEXT:
			case CONTINUE:
			case COPY:
			case COPY_NAMESPACES:
			case COUNT:
			case DECIMAL_FORMAT:
			case DECIMAL_SEPARATOR:
			case DECLARE:
			case DEFAULT:
			case DELETE:
			case DESCENDANT:
			case DESCENDANT_OR_SELF:
			case DESCENDING:
			case DIACRITICS:
			case DIFFERENT:
			case DIGIT:
			case DISTANCE:
			case DIV:
			case DOCUMENT:
			case ELSE:
			case EMPTY:
			case EMPTY_SEQUENCE:
			case ENCODING:
			case END:
			case ENTIRE:
			case EQ:
			case EVERY:
			case EXACTLY:
			case EXCEPT:
			case EXIT:
			case EXTERNAL:
			case FIRST:
			case FOLLOWING:
			case FOLLOWING_SIBLING:
			case FOR:
			case FOREACH:
			case FOREIGN:
			case FROM:
			case FTAND:
			case FTNOT:
			case FTOR:
			case FT_OPTION:
			case FUNCTION:
			case GE:
			case GREATEST:
			case GROUP:
			case GROUPING_SEPARATOR:
			case GT:
			case IDIV:
			case IF:
			case IMPORT:
			case IN:
			case INDEX:
			case INFINITY:
			case INHERIT:
			case INSENSITIVE:
			case INSERT:
			case INSTANCE:
			case INTEGRITY:
			case INTERSECT:
			case INTO:
			case IS:
			case ITEM:
			case KEY:
			case LANGUAGE:
			case LAST:
			case LAX:
			case LE:
			case LEAST:
			case LET:
			case LEVELS:
			case LOOP:
			case LOWERCASE:
			case LT:
			case L_NCName:
			case MINUS_SIGN:
			case MOD:
			case MODIFY:
			case MODULE:
			case MOST:
			case NAMESPACE:
			case NAN:
			case NE:
			case NEXT:
			case NO:
			case NODES:
			case NOT:
			case NO_INHERIT:
			case NO_PRESERVE:
			case OCCURS:
			case OF:
			case ON:
			case ONLY:
			case OPTION:
			case OR:
			case ORDER:
			case ORDERED:
			case ORDERING:
			case PARAGRAPH:
			case PARAGRAPHS:
			case PARENT:
			case PATTERN_SEPARATOR:
			case PERCENT:
			case PER_MILLE:
			case PHRASE:
			case PRECEDING:
			case PRECEDING_SIBLING:
			case PRESERVE:
			case PREVIOUS:
			case PRIVATE:
			case QUOT:
			case QUOT_ER:
			case RELATIONSHIP:
			case RENAME:
			case REPLACE:
			case RETURN:
			case RETURNING:
			case REVALIDATION:
			case SAME:
			case SATISFIES:
			case SCHEMA:
			case SCORE:
			case SELF:
			case SENSITIVE:
			case SENTENCE:
			case SENTENCES:
			case SKIP:
			case SLIDING:
			case SOME:
			case STABLE:
			case STAR:
			case START:
			case STEMMING:
			case STOP:
			case STRICT:
			case STRIP:
			case SWITCH:
			case THEN:
			case THESAURUS:
			case TIMES:
			case TO:
			case TREAT:
			case TRY:
			case TUMBLING:
			case TYPE:
			case TYPESWITCH:
			case UNION:
			case UNIQUE:
			case UNORDERED:
			case UPPERCASE:
			case USING:
			case VALIDATE:
			case VALUE:
			case VARIABLE:
			case VERSION:
			case WEIGHT:
			case WHEN:
			case WHERE:
			case WHILE:
			case WILDCARDS:
			case WINDOW:
			case WITH:
			case WITHOUT:
			case WORD:
			case WORDS:
			case XQUERY:
			case ZERO_DIGIT:
			case EXPLICITLY:
				{
				alt125=2;
				}
				break;
			default:
				if (state.backtracking>0) {state.failed=true; return retval;}
				NoViableAltException nvae =
					new NoViableAltException("", 125, 0, input);
				throw nvae;
			}
			switch (alt125) {
				case 1 :
					// XQueryParser.g:811:11: p_KindTest
					{
					root_0 = (XQDTCommonTree)adaptor.nil();


					pushFollow(FOLLOW_p_KindTest_in_p_NodeTest7173);
					p_KindTest330=p_KindTest();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, p_KindTest330.getTree());

					}
					break;
				case 2 :
					// XQueryParser.g:811:24: p_NameTest
					{
					root_0 = (XQDTCommonTree)adaptor.nil();


					pushFollow(FOLLOW_p_NameTest_in_p_NodeTest7177);
					p_NameTest331=p_NameTest();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, p_NameTest331.getTree());

					}
					break;

			}
			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (XQDTCommonTree)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
			retval.tree = (XQDTCommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "p_NodeTest"


	public static class p_NameTest_return extends ParserRuleReturnScope {
		XQDTCommonTree tree;
		@Override
		public XQDTCommonTree getTree() { return tree; }
	};


	// $ANTLR start "p_NameTest"
	// XQueryParser.g:815:1: p_NameTest : ( ( p_Wildcard )=> p_Wildcard | ( p_NCName COLON )=> p_QName | ( p_NCName )=> p_QName );
	public final XQueryParser.p_NameTest_return p_NameTest() throws RecognitionException {
		XQueryParser.p_NameTest_return retval = new XQueryParser.p_NameTest_return();
		retval.start = input.LT(1);

		XQDTCommonTree root_0 = null;

		ParserRuleReturnScope p_Wildcard332 =null;
		ParserRuleReturnScope p_QName333 =null;
		ParserRuleReturnScope p_QName334 =null;


		try {
			// XQueryParser.g:816:9: ( ( p_Wildcard )=> p_Wildcard | ( p_NCName COLON )=> p_QName | ( p_NCName )=> p_QName )
			int alt126=3;
			int LA126_0 = input.LA(1);
			if ( (LA126_0==STAR) && (synpred13_XQueryParser())) {
				alt126=1;
			}
			else if ( ((LA126_0 >= AFTER && LA126_0 <= ALLOWING)||(LA126_0 >= AMP_ER && LA126_0 <= AND)||LA126_0==ANY||(LA126_0 >= APOS_ER && LA126_0 <= ATTRIBUTE)||(LA126_0 >= BASE_URI && LA126_0 <= BINARY)||(LA126_0 >= BOUNDARY_SPACE && LA126_0 <= CATCH)||(LA126_0 >= CHECK && LA126_0 <= CHILD)||(LA126_0 >= COLLATION && LA126_0 <= COLLECTION)||LA126_0==COMMENT||(LA126_0 >= CONSTRAINT && LA126_0 <= DOCUMENT_NODE)||(LA126_0 >= ELEMENT && LA126_0 <= EMPTY)||(LA126_0 >= EMPTY_SEQUENCE && LA126_0 <= EQ)||(LA126_0 >= EVERY && LA126_0 <= GE)||(LA126_0 >= GREATEST && LA126_0 <= GT)||(LA126_0 >= IDIV && LA126_0 <= LAX)||(LA126_0 >= LE && LA126_0 <= LOWERCASE)||LA126_0==LT||LA126_0==L_NCName||(LA126_0 >= MINUS_SIGN && LA126_0 <= NAN)||(LA126_0 >= NE && LA126_0 <= NOT)||(LA126_0 >= NO_INHERIT && LA126_0 <= PHRASE)||(LA126_0 >= PRECEDING && LA126_0 <= PROCESSING_INSTRUCTION)||LA126_0==QUOT_ER||(LA126_0 >= RELATIONSHIP && LA126_0 <= REVALIDATION)||(LA126_0 >= SAME && LA126_0 <= SELF)||(LA126_0 >= SENSITIVE && LA126_0 <= SKIP)||LA126_0==SLIDING||(LA126_0 >= SOME && LA126_0 <= STABLE)||(LA126_0 >= START && LA126_0 <= STRIP)||(LA126_0 >= SWITCH && LA126_0 <= UNORDERED)||(LA126_0 >= UPPERCASE && LA126_0 <= VARIABLE)||(LA126_0 >= VERSION && LA126_0 <= WORDS)||(LA126_0 >= XQUERY && LA126_0 <= ZERO_DIGIT)||LA126_0==EXPLICITLY) ) {
				int LA126_2 = input.LA(2);
				if ( (LA126_2==COLON) && (synpred13_XQueryParser())) {
					alt126=1;
				}
				else if ( (synpred14_XQueryParser()) ) {
					alt126=2;
				}
				else if ( (synpred15_XQueryParser()) ) {
					alt126=3;
				}

				else {
					if (state.backtracking>0) {state.failed=true; return retval;}
					int nvaeMark = input.mark();
					try {
						input.consume();
						NoViableAltException nvae =
							new NoViableAltException("", 126, 2, input);
						throw nvae;
					} finally {
						input.rewind(nvaeMark);
					}
				}

			}
			else if ( (LA126_0==QUOT) && (synpred13_XQueryParser())) {
				alt126=1;
			}
			else if ( (LA126_0==APOS) && (synpred13_XQueryParser())) {
				alt126=1;
			}

			switch (alt126) {
				case 1 :
					// XQueryParser.g:816:11: ( p_Wildcard )=> p_Wildcard
					{
					root_0 = (XQDTCommonTree)adaptor.nil();


					pushFollow(FOLLOW_p_Wildcard_in_p_NameTest7209);
					p_Wildcard332=p_Wildcard();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, p_Wildcard332.getTree());

					}
					break;
				case 2 :
					// XQueryParser.g:817:11: ( p_NCName COLON )=> p_QName
					{
					root_0 = (XQDTCommonTree)adaptor.nil();


					pushFollow(FOLLOW_p_QName_in_p_NameTest7230);
					p_QName333=p_QName();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, p_QName333.getTree());

					}
					break;
				case 3 :
					// XQueryParser.g:818:11: ( p_NCName )=> p_QName
					{
					root_0 = (XQDTCommonTree)adaptor.nil();


					pushFollow(FOLLOW_p_QName_in_p_NameTest7248);
					p_QName334=p_QName();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, p_QName334.getTree());

					}
					break;

			}
			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (XQDTCommonTree)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
			retval.tree = (XQDTCommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "p_NameTest"


	public static class p_Wildcard_return extends ParserRuleReturnScope {
		XQDTCommonTree tree;
		@Override
		public XQDTCommonTree getTree() { return tree; }
	};


	// $ANTLR start "p_Wildcard"
	// XQueryParser.g:822:1: p_Wildcard : ( STAR ( COLON p_NCName )? | p_NCName COLON STAR | p_StringLiteral COLON STAR );
	public final XQueryParser.p_Wildcard_return p_Wildcard() throws RecognitionException {
		XQueryParser.p_Wildcard_return retval = new XQueryParser.p_Wildcard_return();
		retval.start = input.LT(1);

		XQDTCommonTree root_0 = null;

		CommonToken STAR335=null;
		CommonToken COLON336=null;
		CommonToken COLON339=null;
		CommonToken STAR340=null;
		CommonToken COLON342=null;
		CommonToken STAR343=null;
		ParserRuleReturnScope p_NCName337 =null;
		ParserRuleReturnScope p_NCName338 =null;
		ParserRuleReturnScope p_StringLiteral341 =null;

		XQDTCommonTree STAR335_tree=null;
		XQDTCommonTree COLON336_tree=null;
		XQDTCommonTree COLON339_tree=null;
		XQDTCommonTree STAR340_tree=null;
		XQDTCommonTree COLON342_tree=null;
		XQDTCommonTree STAR343_tree=null;

		setWsExplicit(true);
		try {
			// XQueryParser.g:823:9: ( STAR ( COLON p_NCName )? | p_NCName COLON STAR | p_StringLiteral COLON STAR )
			int alt128=3;
			switch ( input.LA(1) ) {
			case STAR:
				{
				alt128=1;
				}
				break;
			case AFTER:
			case ALL:
			case ALLOWING:
			case AMP_ER:
			case ANCESTOR:
			case ANCESTOR_OR_SELF:
			case AND:
			case ANY:
			case APOS_ER:
			case AS:
			case ASCENDING:
			case AT:
			case ATTRIBUTE:
			case BASE_URI:
			case BEFORE:
			case BINARY:
			case BOUNDARY_SPACE:
			case BREAK:
			case BY:
			case CASE:
			case CAST:
			case CASTABLE:
			case CATCH:
			case CHECK:
			case CHILD:
			case COLLATION:
			case COLLECTION:
			case COMMENT:
			case CONSTRAINT:
			case CONSTRUCTION:
			case CONTAINS:
			case CONTENT:
			case CONTEXT:
			case CONTINUE:
			case COPY:
			case COPY_NAMESPACES:
			case COUNT:
			case DECIMAL_FORMAT:
			case DECIMAL_SEPARATOR:
			case DECLARE:
			case DEFAULT:
			case DELETE:
			case DESCENDANT:
			case DESCENDANT_OR_SELF:
			case DESCENDING:
			case DIACRITICS:
			case DIFFERENT:
			case DIGIT:
			case DISTANCE:
			case DIV:
			case DOCUMENT:
			case DOCUMENT_NODE:
			case ELEMENT:
			case ELSE:
			case EMPTY:
			case EMPTY_SEQUENCE:
			case ENCODING:
			case END:
			case ENTIRE:
			case EQ:
			case EVERY:
			case EXACTLY:
			case EXCEPT:
			case EXIT:
			case EXTERNAL:
			case FIRST:
			case FOLLOWING:
			case FOLLOWING_SIBLING:
			case FOR:
			case FOREACH:
			case FOREIGN:
			case FROM:
			case FTAND:
			case FTNOT:
			case FTOR:
			case FT_OPTION:
			case FUNCTION:
			case GE:
			case GREATEST:
			case GROUP:
			case GROUPING_SEPARATOR:
			case GT:
			case IDIV:
			case IF:
			case IMPORT:
			case IN:
			case INDEX:
			case INFINITY:
			case INHERIT:
			case INSENSITIVE:
			case INSERT:
			case INSTANCE:
			case INTEGRITY:
			case INTERSECT:
			case INTO:
			case IS:
			case ITEM:
			case KEY:
			case LANGUAGE:
			case LAST:
			case LAX:
			case LE:
			case LEAST:
			case LET:
			case LEVELS:
			case LOOP:
			case LOWERCASE:
			case LT:
			case L_NCName:
			case MINUS_SIGN:
			case MOD:
			case MODIFY:
			case MODULE:
			case MOST:
			case NAMESPACE:
			case NAMESPACE_NODE:
			case NAN:
			case NE:
			case NEXT:
			case NO:
			case NODE:
			case NODES:
			case NOT:
			case NO_INHERIT:
			case NO_PRESERVE:
			case OCCURS:
			case OF:
			case ON:
			case ONLY:
			case OPTION:
			case OR:
			case ORDER:
			case ORDERED:
			case ORDERING:
			case PARAGRAPH:
			case PARAGRAPHS:
			case PARENT:
			case PATTERN_SEPARATOR:
			case PERCENT:
			case PER_MILLE:
			case PHRASE:
			case PRECEDING:
			case PRECEDING_SIBLING:
			case PRESERVE:
			case PREVIOUS:
			case PRIVATE:
			case PROCESSING_INSTRUCTION:
			case QUOT_ER:
			case RELATIONSHIP:
			case RENAME:
			case REPLACE:
			case RETURN:
			case RETURNING:
			case REVALIDATION:
			case SAME:
			case SATISFIES:
			case SCHEMA:
			case SCHEMA_ATTRIBUTE:
			case SCHEMA_ELEMENT:
			case SCORE:
			case SELF:
			case SENSITIVE:
			case SENTENCE:
			case SENTENCES:
			case SKIP:
			case SLIDING:
			case SOME:
			case STABLE:
			case START:
			case STEMMING:
			case STOP:
			case STRICT:
			case STRIP:
			case SWITCH:
			case TEXT:
			case THEN:
			case THESAURUS:
			case TIMES:
			case TO:
			case TREAT:
			case TRY:
			case TUMBLING:
			case TYPE:
			case TYPESWITCH:
			case UNION:
			case UNIQUE:
			case UNORDERED:
			case UPPERCASE:
			case USING:
			case VALIDATE:
			case VALUE:
			case VARIABLE:
			case VERSION:
			case WEIGHT:
			case WHEN:
			case WHERE:
			case WHILE:
			case WILDCARDS:
			case WINDOW:
			case WITH:
			case WITHOUT:
			case WORD:
			case WORDS:
			case XQUERY:
			case ZERO_DIGIT:
			case EXPLICITLY:
				{
				alt128=2;
				}
				break;
			case APOS:
			case QUOT:
				{
				alt128=3;
				}
				break;
			default:
				if (state.backtracking>0) {state.failed=true; return retval;}
				NoViableAltException nvae =
					new NoViableAltException("", 128, 0, input);
				throw nvae;
			}
			switch (alt128) {
				case 1 :
					// XQueryParser.g:823:11: STAR ( COLON p_NCName )?
					{
					root_0 = (XQDTCommonTree)adaptor.nil();


					STAR335=(CommonToken)match(input,STAR,FOLLOW_STAR_in_p_Wildcard7278); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					STAR335_tree = (XQDTCommonTree)adaptor.create(STAR335);
					adaptor.addChild(root_0, STAR335_tree);
					}

					// XQueryParser.g:823:16: ( COLON p_NCName )?
					int alt127=2;
					int LA127_0 = input.LA(1);
					if ( (LA127_0==COLON) ) {
						alt127=1;
					}
					switch (alt127) {
						case 1 :
							// XQueryParser.g:823:17: COLON p_NCName
							{
							COLON336=(CommonToken)match(input,COLON,FOLLOW_COLON_in_p_Wildcard7281); if (state.failed) return retval;
							if ( state.backtracking==0 ) {
							COLON336_tree = (XQDTCommonTree)adaptor.create(COLON336);
							adaptor.addChild(root_0, COLON336_tree);
							}

							pushFollow(FOLLOW_p_NCName_in_p_Wildcard7283);
							p_NCName337=p_NCName();
							state._fsp--;
							if (state.failed) return retval;
							if ( state.backtracking==0 ) adaptor.addChild(root_0, p_NCName337.getTree());

							}
							break;

					}

					}
					break;
				case 2 :
					// XQueryParser.g:824:11: p_NCName COLON STAR
					{
					root_0 = (XQDTCommonTree)adaptor.nil();


					pushFollow(FOLLOW_p_NCName_in_p_Wildcard7297);
					p_NCName338=p_NCName();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, p_NCName338.getTree());

					COLON339=(CommonToken)match(input,COLON,FOLLOW_COLON_in_p_Wildcard7299); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					COLON339_tree = (XQDTCommonTree)adaptor.create(COLON339);
					adaptor.addChild(root_0, COLON339_tree);
					}

					STAR340=(CommonToken)match(input,STAR,FOLLOW_STAR_in_p_Wildcard7301); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					STAR340_tree = (XQDTCommonTree)adaptor.create(STAR340);
					adaptor.addChild(root_0, STAR340_tree);
					}

					}
					break;
				case 3 :
					// XQueryParser.g:825:11: p_StringLiteral COLON STAR
					{
					root_0 = (XQDTCommonTree)adaptor.nil();


					pushFollow(FOLLOW_p_StringLiteral_in_p_Wildcard7313);
					p_StringLiteral341=p_StringLiteral();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, p_StringLiteral341.getTree());

					COLON342=(CommonToken)match(input,COLON,FOLLOW_COLON_in_p_Wildcard7315); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					COLON342_tree = (XQDTCommonTree)adaptor.create(COLON342);
					adaptor.addChild(root_0, COLON342_tree);
					}

					STAR343=(CommonToken)match(input,STAR,FOLLOW_STAR_in_p_Wildcard7317); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					STAR343_tree = (XQDTCommonTree)adaptor.create(STAR343);
					adaptor.addChild(root_0, STAR343_tree);
					}

					}
					break;

			}
			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (XQDTCommonTree)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
			retval.tree = (XQDTCommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);
		}
		finally {
			// do for sure before leaving
			setWsExplicit(false);
		}
		return retval;
	}
	// $ANTLR end "p_Wildcard"


	public static class p_PostfixExpr_return extends ParserRuleReturnScope {
		XQDTCommonTree tree;
		@Override
		public XQDTCommonTree getTree() { return tree; }
	};


	// $ANTLR start "p_PostfixExpr"
	// XQueryParser.g:830:1: p_PostfixExpr : p_PrimaryExpr ( p_Predicate )* ;
	public final XQueryParser.p_PostfixExpr_return p_PostfixExpr() throws RecognitionException {
		XQueryParser.p_PostfixExpr_return retval = new XQueryParser.p_PostfixExpr_return();
		retval.start = input.LT(1);

		XQDTCommonTree root_0 = null;

		ParserRuleReturnScope p_PrimaryExpr344 =null;
		ParserRuleReturnScope p_Predicate345 =null;


		try {
			// XQueryParser.g:831:9: ( p_PrimaryExpr ( p_Predicate )* )
			// XQueryParser.g:831:11: p_PrimaryExpr ( p_Predicate )*
			{
			root_0 = (XQDTCommonTree)adaptor.nil();


			pushFollow(FOLLOW_p_PrimaryExpr_in_p_PostfixExpr7355);
			p_PrimaryExpr344=p_PrimaryExpr();
			state._fsp--;
			if (state.failed) return retval;
			if ( state.backtracking==0 ) adaptor.addChild(root_0, p_PrimaryExpr344.getTree());

			// XQueryParser.g:831:25: ( p_Predicate )*
			loop129:
			while (true) {
				int alt129=2;
				int LA129_0 = input.LA(1);
				if ( (LA129_0==LSQUARE) ) {
					alt129=1;
				}

				switch (alt129) {
				case 1 :
					// XQueryParser.g:831:26: p_Predicate
					{
					pushFollow(FOLLOW_p_Predicate_in_p_PostfixExpr7358);
					p_Predicate345=p_Predicate();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, p_Predicate345.getTree());

					}
					break;

				default :
					break loop129;
				}
			}

			}

			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (XQDTCommonTree)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
			retval.tree = (XQDTCommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "p_PostfixExpr"


	public static class p_ArgumentList_return extends ParserRuleReturnScope {
		XQDTCommonTree tree;
		@Override
		public XQDTCommonTree getTree() { return tree; }
	};


	// $ANTLR start "p_ArgumentList"
	// XQueryParser.g:838:1: p_ArgumentList : LPAREN ( p_Argument ( COMMA p_Argument )* )? RPAREN ;
	public final XQueryParser.p_ArgumentList_return p_ArgumentList() throws RecognitionException {
		XQueryParser.p_ArgumentList_return retval = new XQueryParser.p_ArgumentList_return();
		retval.start = input.LT(1);

		XQDTCommonTree root_0 = null;

		CommonToken LPAREN346=null;
		CommonToken COMMA348=null;
		CommonToken RPAREN350=null;
		ParserRuleReturnScope p_Argument347 =null;
		ParserRuleReturnScope p_Argument349 =null;

		XQDTCommonTree LPAREN346_tree=null;
		XQDTCommonTree COMMA348_tree=null;
		XQDTCommonTree RPAREN350_tree=null;

		try {
			// XQueryParser.g:839:9: ( LPAREN ( p_Argument ( COMMA p_Argument )* )? RPAREN )
			// XQueryParser.g:839:11: LPAREN ( p_Argument ( COMMA p_Argument )* )? RPAREN
			{
			root_0 = (XQDTCommonTree)adaptor.nil();


			LPAREN346=(CommonToken)match(input,LPAREN,FOLLOW_LPAREN_in_p_ArgumentList7399); if (state.failed) return retval;
			if ( state.backtracking==0 ) {
			LPAREN346_tree = (XQDTCommonTree)adaptor.create(LPAREN346);
			adaptor.addChild(root_0, LPAREN346_tree);
			}

			// XQueryParser.g:839:18: ( p_Argument ( COMMA p_Argument )* )?
			int alt131=2;
			int LA131_0 = input.LA(1);
			if ( ((LA131_0 >= AFTER && LA131_0 <= ALLOWING)||(LA131_0 >= AMP_ER && LA131_0 <= AND)||(LA131_0 >= ANY && LA131_0 <= BINARY)||(LA131_0 >= BOUNDARY_SPACE && LA131_0 <= CATCH)||(LA131_0 >= CHECK && LA131_0 <= CHILD)||(LA131_0 >= COLLATION && LA131_0 <= COLLECTION)||LA131_0==COMMENT||(LA131_0 >= CONSTRAINT && LA131_0 <= DOT_DOT)||(LA131_0 >= ELEMENT && LA131_0 <= EMPTY)||(LA131_0 >= EMPTY_SEQUENCE && LA131_0 <= EQ)||(LA131_0 >= EVERY && LA131_0 <= GE)||(LA131_0 >= GREATEST && LA131_0 <= GT)||(LA131_0 >= IDIV && LA131_0 <= LPAREN)||LA131_0==LT||(LA131_0 >= L_DecimalLiteral && LA131_0 <= L_DoubleLiteral)||(LA131_0 >= L_IntegerLiteral && LA131_0 <= L_Pragma)||(LA131_0 >= MINUS && LA131_0 <= NAN)||(LA131_0 >= NE && LA131_0 <= NOT)||(LA131_0 >= NO_INHERIT && LA131_0 <= PHRASE)||LA131_0==PLUS||(LA131_0 >= PRECEDING && LA131_0 <= QUOT_ER)||(LA131_0 >= RELATIONSHIP && LA131_0 <= REVALIDATION)||(LA131_0 >= SAME && LA131_0 <= SELF)||(LA131_0 >= SENSITIVE && LA131_0 <= SMALLER)||(LA131_0 >= SOME && LA131_0 <= STRIP)||(LA131_0 >= SWITCH && LA131_0 <= VARIABLE)||(LA131_0 >= VERSION && LA131_0 <= WORDS)||(LA131_0 >= XQUERY && LA131_0 <= ZERO_DIGIT)||LA131_0==EXPLICITLY) ) {
				alt131=1;
			}
			switch (alt131) {
				case 1 :
					// XQueryParser.g:839:19: p_Argument ( COMMA p_Argument )*
					{
					pushFollow(FOLLOW_p_Argument_in_p_ArgumentList7402);
					p_Argument347=p_Argument();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, p_Argument347.getTree());

					// XQueryParser.g:839:30: ( COMMA p_Argument )*
					loop130:
					while (true) {
						int alt130=2;
						int LA130_0 = input.LA(1);
						if ( (LA130_0==COMMA) ) {
							alt130=1;
						}

						switch (alt130) {
						case 1 :
							// XQueryParser.g:839:31: COMMA p_Argument
							{
							COMMA348=(CommonToken)match(input,COMMA,FOLLOW_COMMA_in_p_ArgumentList7405); if (state.failed) return retval;
							if ( state.backtracking==0 ) {
							COMMA348_tree = (XQDTCommonTree)adaptor.create(COMMA348);
							adaptor.addChild(root_0, COMMA348_tree);
							}

							pushFollow(FOLLOW_p_Argument_in_p_ArgumentList7407);
							p_Argument349=p_Argument();
							state._fsp--;
							if (state.failed) return retval;
							if ( state.backtracking==0 ) adaptor.addChild(root_0, p_Argument349.getTree());

							}
							break;

						default :
							break loop130;
						}
					}

					}
					break;

			}

			RPAREN350=(CommonToken)match(input,RPAREN,FOLLOW_RPAREN_in_p_ArgumentList7413); if (state.failed) return retval;
			if ( state.backtracking==0 ) {
			RPAREN350_tree = (XQDTCommonTree)adaptor.create(RPAREN350);
			adaptor.addChild(root_0, RPAREN350_tree);
			}

			}

			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (XQDTCommonTree)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
			retval.tree = (XQDTCommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "p_ArgumentList"


	public static class p_PredicateList_return extends ParserRuleReturnScope {
		XQDTCommonTree tree;
		@Override
		public XQDTCommonTree getTree() { return tree; }
	};


	// $ANTLR start "p_PredicateList"
	// XQueryParser.g:843:1: p_PredicateList : ( p_Predicate )* ;
	public final XQueryParser.p_PredicateList_return p_PredicateList() throws RecognitionException {
		XQueryParser.p_PredicateList_return retval = new XQueryParser.p_PredicateList_return();
		retval.start = input.LT(1);

		XQDTCommonTree root_0 = null;

		ParserRuleReturnScope p_Predicate351 =null;


		try {
			// XQueryParser.g:844:9: ( ( p_Predicate )* )
			// XQueryParser.g:844:11: ( p_Predicate )*
			{
			root_0 = (XQDTCommonTree)adaptor.nil();


			// XQueryParser.g:844:11: ( p_Predicate )*
			loop132:
			while (true) {
				int alt132=2;
				int LA132_0 = input.LA(1);
				if ( (LA132_0==LSQUARE) ) {
					alt132=1;
				}

				switch (alt132) {
				case 1 :
					// XQueryParser.g:844:11: p_Predicate
					{
					pushFollow(FOLLOW_p_Predicate_in_p_PredicateList7439);
					p_Predicate351=p_Predicate();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, p_Predicate351.getTree());

					}
					break;

				default :
					break loop132;
				}
			}

			}

			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (XQDTCommonTree)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
			retval.tree = (XQDTCommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "p_PredicateList"


	public static class p_Predicate_return extends ParserRuleReturnScope {
		XQDTCommonTree tree;
		@Override
		public XQDTCommonTree getTree() { return tree; }
	};


	// $ANTLR start "p_Predicate"
	// XQueryParser.g:848:1: p_Predicate : LSQUARE p_Expr[true,true] RSQUARE ;
	public final XQueryParser.p_Predicate_return p_Predicate() throws RecognitionException {
		XQueryParser.p_Predicate_return retval = new XQueryParser.p_Predicate_return();
		retval.start = input.LT(1);

		XQDTCommonTree root_0 = null;

		CommonToken LSQUARE352=null;
		CommonToken RSQUARE354=null;
		ParserRuleReturnScope p_Expr353 =null;

		XQDTCommonTree LSQUARE352_tree=null;
		XQDTCommonTree RSQUARE354_tree=null;

		try {
			// XQueryParser.g:849:9: ( LSQUARE p_Expr[true,true] RSQUARE )
			// XQueryParser.g:849:11: LSQUARE p_Expr[true,true] RSQUARE
			{
			root_0 = (XQDTCommonTree)adaptor.nil();


			LSQUARE352=(CommonToken)match(input,LSQUARE,FOLLOW_LSQUARE_in_p_Predicate7466); if (state.failed) return retval;
			if ( state.backtracking==0 ) {
			LSQUARE352_tree = (XQDTCommonTree)adaptor.create(LSQUARE352);
			adaptor.addChild(root_0, LSQUARE352_tree);
			}

			pushFollow(FOLLOW_p_Expr_in_p_Predicate7468);
			p_Expr353=p_Expr(true, true);
			state._fsp--;
			if (state.failed) return retval;
			if ( state.backtracking==0 ) adaptor.addChild(root_0, p_Expr353.getTree());

			RSQUARE354=(CommonToken)match(input,RSQUARE,FOLLOW_RSQUARE_in_p_Predicate7471); if (state.failed) return retval;
			if ( state.backtracking==0 ) {
			RSQUARE354_tree = (XQDTCommonTree)adaptor.create(RSQUARE354);
			adaptor.addChild(root_0, RSQUARE354_tree);
			}

			}

			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (XQDTCommonTree)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
			retval.tree = (XQDTCommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "p_Predicate"


	public static class p_PrimaryExpr_return extends ParserRuleReturnScope {
		XQDTCommonTree tree;
		@Override
		public XQDTCommonTree getTree() { return tree; }
	};


	// $ANTLR start "p_PrimaryExpr"
	// XQueryParser.g:854:1: p_PrimaryExpr : ( ( LPAREN )=> p_ParenthesizedExpr | p_Literal | p_VarRef | p_ContextItemExpr | p_FunctionCall | p_OrderedExpr | p_UnorderedExpr | p_Constructor | p_BlockExpr );
	public final XQueryParser.p_PrimaryExpr_return p_PrimaryExpr() throws RecognitionException {
		XQueryParser.p_PrimaryExpr_return retval = new XQueryParser.p_PrimaryExpr_return();
		retval.start = input.LT(1);

		XQDTCommonTree root_0 = null;

		ParserRuleReturnScope p_ParenthesizedExpr355 =null;
		ParserRuleReturnScope p_Literal356 =null;
		ParserRuleReturnScope p_VarRef357 =null;
		ParserRuleReturnScope p_ContextItemExpr358 =null;
		ParserRuleReturnScope p_FunctionCall359 =null;
		ParserRuleReturnScope p_OrderedExpr360 =null;
		ParserRuleReturnScope p_UnorderedExpr361 =null;
		ParserRuleReturnScope p_Constructor362 =null;
		ParserRuleReturnScope p_BlockExpr363 =null;


		try {
			// XQueryParser.g:855:9: ( ( LPAREN )=> p_ParenthesizedExpr | p_Literal | p_VarRef | p_ContextItemExpr | p_FunctionCall | p_OrderedExpr | p_UnorderedExpr | p_Constructor | p_BlockExpr )
			int alt133=9;
			int LA133_0 = input.LA(1);
			if ( (LA133_0==LPAREN) && (synpred16_XQueryParser())) {
				alt133=1;
			}
			else if ( (LA133_0==APOS||LA133_0==L_DecimalLiteral||LA133_0==L_DoubleLiteral||LA133_0==L_IntegerLiteral||LA133_0==QUOT) ) {
				alt133=2;
			}
			else if ( (LA133_0==DOLLAR) ) {
				alt133=3;
			}
			else if ( (LA133_0==DOT) ) {
				alt133=4;
			}
			else if ( (LA133_0==ORDERED) ) {
				int LA133_5 = input.LA(2);
				if ( (LA133_5==COLON||LA133_5==LPAREN) ) {
					alt133=5;
				}
				else if ( (LA133_5==LBRACKET) ) {
					alt133=6;
				}

				else {
					if (state.backtracking>0) {state.failed=true; return retval;}
					int nvaeMark = input.mark();
					try {
						input.consume();
						NoViableAltException nvae =
							new NoViableAltException("", 133, 5, input);
						throw nvae;
					} finally {
						input.rewind(nvaeMark);
					}
				}

			}
			else if ( (LA133_0==ELEMENT) ) {
				int LA133_6 = input.LA(2);
				if ( (LA133_6==COLON) ) {
					alt133=5;
				}
				else if ( ((LA133_6 >= AFTER && LA133_6 <= ALLOWING)||(LA133_6 >= AMP_ER && LA133_6 <= AND)||LA133_6==ANY||(LA133_6 >= APOS_ER && LA133_6 <= ATTRIBUTE)||(LA133_6 >= BASE_URI && LA133_6 <= BINARY)||(LA133_6 >= BOUNDARY_SPACE && LA133_6 <= CATCH)||(LA133_6 >= CHECK && LA133_6 <= CHILD)||(LA133_6 >= COLLATION && LA133_6 <= COLLECTION)||LA133_6==COMMENT||(LA133_6 >= CONSTRAINT && LA133_6 <= DOCUMENT_NODE)||(LA133_6 >= ELEMENT && LA133_6 <= EMPTY)||(LA133_6 >= EMPTY_SEQUENCE && LA133_6 <= EQ)||(LA133_6 >= EVERY && LA133_6 <= GE)||(LA133_6 >= GREATEST && LA133_6 <= GT)||(LA133_6 >= IDIV && LA133_6 <= LOWERCASE)||LA133_6==LT||LA133_6==L_NCName||(LA133_6 >= MINUS_SIGN && LA133_6 <= NAN)||(LA133_6 >= NE && LA133_6 <= NOT)||(LA133_6 >= NO_INHERIT && LA133_6 <= PHRASE)||(LA133_6 >= PRECEDING && LA133_6 <= PROCESSING_INSTRUCTION)||LA133_6==QUOT_ER||(LA133_6 >= RELATIONSHIP && LA133_6 <= REVALIDATION)||(LA133_6 >= SAME && LA133_6 <= SELF)||(LA133_6 >= SENSITIVE && LA133_6 <= SKIP)||LA133_6==SLIDING||(LA133_6 >= SOME && LA133_6 <= STABLE)||(LA133_6 >= START && LA133_6 <= STRIP)||(LA133_6 >= SWITCH && LA133_6 <= UNORDERED)||(LA133_6 >= UPPERCASE && LA133_6 <= VARIABLE)||(LA133_6 >= VERSION && LA133_6 <= WORDS)||(LA133_6 >= XQUERY && LA133_6 <= ZERO_DIGIT)||LA133_6==EXPLICITLY) ) {
					alt133=8;
				}

				else {
					if (state.backtracking>0) {state.failed=true; return retval;}
					int nvaeMark = input.mark();
					try {
						input.consume();
						NoViableAltException nvae =
							new NoViableAltException("", 133, 6, input);
						throw nvae;
					} finally {
						input.rewind(nvaeMark);
					}
				}

			}
			else if ( ((LA133_0 >= AFTER && LA133_0 <= ALLOWING)||(LA133_0 >= AMP_ER && LA133_0 <= AND)||LA133_0==ANY||(LA133_0 >= APOS_ER && LA133_0 <= AT)||(LA133_0 >= BASE_URI && LA133_0 <= BEFORE)||(LA133_0 >= BOUNDARY_SPACE && LA133_0 <= CATCH)||(LA133_0 >= CHECK && LA133_0 <= CHILD)||(LA133_0 >= COLLATION && LA133_0 <= COLLECTION)||(LA133_0 >= CONSTRAINT && LA133_0 <= DIV)||LA133_0==DOCUMENT_NODE||(LA133_0 >= ELSE && LA133_0 <= EMPTY)||(LA133_0 >= EMPTY_SEQUENCE && LA133_0 <= EQ)||(LA133_0 >= EVERY && LA133_0 <= GE)||(LA133_0 >= GREATEST && LA133_0 <= GT)||(LA133_0 >= IDIV && LA133_0 <= LAX)||(LA133_0 >= LE && LA133_0 <= LOWERCASE)||LA133_0==LT||LA133_0==L_NCName||(LA133_0 >= MINUS_SIGN && LA133_0 <= MOST)||(LA133_0 >= NAMESPACE_NODE && LA133_0 <= NAN)||(LA133_0 >= NE && LA133_0 <= NOT)||(LA133_0 >= NO_INHERIT && LA133_0 <= ORDER)||(LA133_0 >= ORDERING && LA133_0 <= PHRASE)||(LA133_0 >= PRECEDING && LA133_0 <= PRIVATE)||LA133_0==QUOT_ER||(LA133_0 >= RELATIONSHIP && LA133_0 <= REVALIDATION)||(LA133_0 >= SAME && LA133_0 <= SELF)||(LA133_0 >= SENSITIVE && LA133_0 <= SKIP)||LA133_0==SLIDING||(LA133_0 >= SOME && LA133_0 <= STABLE)||(LA133_0 >= START && LA133_0 <= STRIP)||LA133_0==SWITCH||(LA133_0 >= THEN && LA133_0 <= UNIQUE)||(LA133_0 >= UPDATING && LA133_0 <= VARIABLE)||(LA133_0 >= VERSION && LA133_0 <= WORDS)||(LA133_0 >= XQUERY && LA133_0 <= ZERO_DIGIT)||LA133_0==EXPLICITLY) ) {
				alt133=5;
			}
			else if ( (LA133_0==UNORDERED) ) {
				int LA133_8 = input.LA(2);
				if ( (LA133_8==COLON||LA133_8==LPAREN) ) {
					alt133=5;
				}
				else if ( (LA133_8==LBRACKET) ) {
					alt133=7;
				}

				else {
					if (state.backtracking>0) {state.failed=true; return retval;}
					int nvaeMark = input.mark();
					try {
						input.consume();
						NoViableAltException nvae =
							new NoViableAltException("", 133, 8, input);
						throw nvae;
					} finally {
						input.rewind(nvaeMark);
					}
				}

			}
			else if ( (LA133_0==DOCUMENT) ) {
				int LA133_9 = input.LA(2);
				if ( (LA133_9==COLON||LA133_9==LPAREN) ) {
					alt133=5;
				}
				else if ( (LA133_9==LBRACKET) ) {
					alt133=8;
				}

				else {
					if (state.backtracking>0) {state.failed=true; return retval;}
					int nvaeMark = input.mark();
					try {
						input.consume();
						NoViableAltException nvae =
							new NoViableAltException("", 133, 9, input);
						throw nvae;
					} finally {
						input.rewind(nvaeMark);
					}
				}

			}
			else if ( ((LA133_0 >= L_DirCommentConstructor && LA133_0 <= L_DirPIConstructor)||LA133_0==SMALLER) ) {
				alt133=8;
			}
			else if ( (LA133_0==NAMESPACE) ) {
				int LA133_11 = input.LA(2);
				if ( (LA133_11==COLON||LA133_11==LPAREN) ) {
					alt133=5;
				}
				else if ( ((LA133_11 >= AFTER && LA133_11 <= ALLOWING)||(LA133_11 >= AMP_ER && LA133_11 <= AND)||LA133_11==ANY||(LA133_11 >= APOS_ER && LA133_11 <= ATTRIBUTE)||(LA133_11 >= BASE_URI && LA133_11 <= BINARY)||(LA133_11 >= BOUNDARY_SPACE && LA133_11 <= CATCH)||(LA133_11 >= CHECK && LA133_11 <= CHILD)||(LA133_11 >= COLLATION && LA133_11 <= COLLECTION)||LA133_11==COMMENT||(LA133_11 >= CONSTRAINT && LA133_11 <= DOCUMENT_NODE)||(LA133_11 >= ELEMENT && LA133_11 <= EMPTY)||(LA133_11 >= EMPTY_SEQUENCE && LA133_11 <= EQ)||(LA133_11 >= EVERY && LA133_11 <= GE)||(LA133_11 >= GREATEST && LA133_11 <= GT)||(LA133_11 >= IDIV && LA133_11 <= LOWERCASE)||LA133_11==LT||LA133_11==L_NCName||(LA133_11 >= MINUS_SIGN && LA133_11 <= NAN)||(LA133_11 >= NE && LA133_11 <= NOT)||(LA133_11 >= NO_INHERIT && LA133_11 <= PHRASE)||(LA133_11 >= PRECEDING && LA133_11 <= PROCESSING_INSTRUCTION)||LA133_11==QUOT_ER||(LA133_11 >= RELATIONSHIP && LA133_11 <= REVALIDATION)||(LA133_11 >= SAME && LA133_11 <= SELF)||(LA133_11 >= SENSITIVE && LA133_11 <= SKIP)||LA133_11==SLIDING||(LA133_11 >= SOME && LA133_11 <= STABLE)||(LA133_11 >= START && LA133_11 <= STRIP)||(LA133_11 >= SWITCH && LA133_11 <= UNORDERED)||(LA133_11 >= UPPERCASE && LA133_11 <= VARIABLE)||(LA133_11 >= VERSION && LA133_11 <= WORDS)||(LA133_11 >= XQUERY && LA133_11 <= ZERO_DIGIT)||LA133_11==EXPLICITLY) ) {
					alt133=8;
				}

				else {
					if (state.backtracking>0) {state.failed=true; return retval;}
					int nvaeMark = input.mark();
					try {
						input.consume();
						NoViableAltException nvae =
							new NoViableAltException("", 133, 11, input);
						throw nvae;
					} finally {
						input.rewind(nvaeMark);
					}
				}

			}
			else if ( (LA133_0==ATTRIBUTE) ) {
				int LA133_12 = input.LA(2);
				if ( (LA133_12==COLON) ) {
					alt133=5;
				}
				else if ( ((LA133_12 >= AFTER && LA133_12 <= ALLOWING)||(LA133_12 >= AMP_ER && LA133_12 <= AND)||LA133_12==ANY||(LA133_12 >= APOS_ER && LA133_12 <= ATTRIBUTE)||(LA133_12 >= BASE_URI && LA133_12 <= BINARY)||(LA133_12 >= BOUNDARY_SPACE && LA133_12 <= CATCH)||(LA133_12 >= CHECK && LA133_12 <= CHILD)||(LA133_12 >= COLLATION && LA133_12 <= COLLECTION)||LA133_12==COMMENT||(LA133_12 >= CONSTRAINT && LA133_12 <= DOCUMENT_NODE)||(LA133_12 >= ELEMENT && LA133_12 <= EMPTY)||(LA133_12 >= EMPTY_SEQUENCE && LA133_12 <= EQ)||(LA133_12 >= EVERY && LA133_12 <= GE)||(LA133_12 >= GREATEST && LA133_12 <= GT)||(LA133_12 >= IDIV && LA133_12 <= LOWERCASE)||LA133_12==LT||LA133_12==L_NCName||(LA133_12 >= MINUS_SIGN && LA133_12 <= NAN)||(LA133_12 >= NE && LA133_12 <= NOT)||(LA133_12 >= NO_INHERIT && LA133_12 <= PHRASE)||(LA133_12 >= PRECEDING && LA133_12 <= PROCESSING_INSTRUCTION)||LA133_12==QUOT_ER||(LA133_12 >= RELATIONSHIP && LA133_12 <= REVALIDATION)||(LA133_12 >= SAME && LA133_12 <= SELF)||(LA133_12 >= SENSITIVE && LA133_12 <= SKIP)||LA133_12==SLIDING||(LA133_12 >= SOME && LA133_12 <= STABLE)||(LA133_12 >= START && LA133_12 <= STRIP)||(LA133_12 >= SWITCH && LA133_12 <= UNORDERED)||(LA133_12 >= UPPERCASE && LA133_12 <= VARIABLE)||(LA133_12 >= VERSION && LA133_12 <= WORDS)||(LA133_12 >= XQUERY && LA133_12 <= ZERO_DIGIT)||LA133_12==EXPLICITLY) ) {
					alt133=8;
				}

				else {
					if (state.backtracking>0) {state.failed=true; return retval;}
					int nvaeMark = input.mark();
					try {
						input.consume();
						NoViableAltException nvae =
							new NoViableAltException("", 133, 12, input);
						throw nvae;
					} finally {
						input.rewind(nvaeMark);
					}
				}

			}
			else if ( (LA133_0==TEXT) ) {
				int LA133_13 = input.LA(2);
				if ( (LA133_13==COLON) ) {
					alt133=5;
				}
				else if ( (LA133_13==LBRACKET) ) {
					alt133=8;
				}

				else {
					if (state.backtracking>0) {state.failed=true; return retval;}
					int nvaeMark = input.mark();
					try {
						input.consume();
						NoViableAltException nvae =
							new NoViableAltException("", 133, 13, input);
						throw nvae;
					} finally {
						input.rewind(nvaeMark);
					}
				}

			}
			else if ( (LA133_0==BINARY) ) {
				int LA133_14 = input.LA(2);
				if ( (LA133_14==COLON||LA133_14==LPAREN) ) {
					alt133=5;
				}
				else if ( (LA133_14==LBRACKET) && ((lc(MLS)))) {
					alt133=8;
				}

			}
			else if ( (LA133_0==COMMENT) ) {
				int LA133_15 = input.LA(2);
				if ( (LA133_15==COLON) ) {
					alt133=5;
				}
				else if ( (LA133_15==LBRACKET) ) {
					alt133=8;
				}

				else {
					if (state.backtracking>0) {state.failed=true; return retval;}
					int nvaeMark = input.mark();
					try {
						input.consume();
						NoViableAltException nvae =
							new NoViableAltException("", 133, 15, input);
						throw nvae;
					} finally {
						input.rewind(nvaeMark);
					}
				}

			}
			else if ( (LA133_0==PROCESSING_INSTRUCTION) ) {
				int LA133_16 = input.LA(2);
				if ( (LA133_16==COLON) ) {
					alt133=5;
				}
				else if ( ((LA133_16 >= AFTER && LA133_16 <= ALLOWING)||(LA133_16 >= AMP_ER && LA133_16 <= AND)||LA133_16==ANY||(LA133_16 >= APOS_ER && LA133_16 <= ATTRIBUTE)||(LA133_16 >= BASE_URI && LA133_16 <= BINARY)||(LA133_16 >= BOUNDARY_SPACE && LA133_16 <= CATCH)||(LA133_16 >= CHECK && LA133_16 <= CHILD)||(LA133_16 >= COLLATION && LA133_16 <= COLLECTION)||LA133_16==COMMENT||(LA133_16 >= CONSTRAINT && LA133_16 <= DOCUMENT_NODE)||(LA133_16 >= ELEMENT && LA133_16 <= EMPTY)||(LA133_16 >= EMPTY_SEQUENCE && LA133_16 <= EQ)||(LA133_16 >= EVERY && LA133_16 <= GE)||(LA133_16 >= GREATEST && LA133_16 <= GT)||(LA133_16 >= IDIV && LA133_16 <= LOWERCASE)||LA133_16==LT||LA133_16==L_NCName||(LA133_16 >= MINUS_SIGN && LA133_16 <= NAN)||(LA133_16 >= NE && LA133_16 <= NOT)||(LA133_16 >= NO_INHERIT && LA133_16 <= PHRASE)||(LA133_16 >= PRECEDING && LA133_16 <= PROCESSING_INSTRUCTION)||LA133_16==QUOT_ER||(LA133_16 >= RELATIONSHIP && LA133_16 <= REVALIDATION)||(LA133_16 >= SAME && LA133_16 <= SELF)||(LA133_16 >= SENSITIVE && LA133_16 <= SKIP)||LA133_16==SLIDING||(LA133_16 >= SOME && LA133_16 <= STABLE)||(LA133_16 >= START && LA133_16 <= STRIP)||(LA133_16 >= SWITCH && LA133_16 <= UNORDERED)||(LA133_16 >= UPPERCASE && LA133_16 <= VARIABLE)||(LA133_16 >= VERSION && LA133_16 <= WORDS)||(LA133_16 >= XQUERY && LA133_16 <= ZERO_DIGIT)||LA133_16==EXPLICITLY) ) {
					alt133=8;
				}

				else {
					if (state.backtracking>0) {state.failed=true; return retval;}
					int nvaeMark = input.mark();
					try {
						input.consume();
						NoViableAltException nvae =
							new NoViableAltException("", 133, 16, input);
						throw nvae;
					} finally {
						input.rewind(nvaeMark);
					}
				}

			}
			else if ( (LA133_0==LBRACKET) ) {
				alt133=9;
			}

			else {
				if (state.backtracking>0) {state.failed=true; return retval;}
				NoViableAltException nvae =
					new NoViableAltException("", 133, 0, input);
				throw nvae;
			}

			switch (alt133) {
				case 1 :
					// XQueryParser.g:855:11: ( LPAREN )=> p_ParenthesizedExpr
					{
					root_0 = (XQDTCommonTree)adaptor.nil();


					pushFollow(FOLLOW_p_ParenthesizedExpr_in_p_PrimaryExpr7504);
					p_ParenthesizedExpr355=p_ParenthesizedExpr();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, p_ParenthesizedExpr355.getTree());

					}
					break;
				case 2 :
					// XQueryParser.g:856:11: p_Literal
					{
					root_0 = (XQDTCommonTree)adaptor.nil();


					pushFollow(FOLLOW_p_Literal_in_p_PrimaryExpr7516);
					p_Literal356=p_Literal();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, p_Literal356.getTree());

					}
					break;
				case 3 :
					// XQueryParser.g:857:11: p_VarRef
					{
					root_0 = (XQDTCommonTree)adaptor.nil();


					pushFollow(FOLLOW_p_VarRef_in_p_PrimaryExpr7528);
					p_VarRef357=p_VarRef();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, p_VarRef357.getTree());

					}
					break;
				case 4 :
					// XQueryParser.g:858:11: p_ContextItemExpr
					{
					root_0 = (XQDTCommonTree)adaptor.nil();


					pushFollow(FOLLOW_p_ContextItemExpr_in_p_PrimaryExpr7540);
					p_ContextItemExpr358=p_ContextItemExpr();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, p_ContextItemExpr358.getTree());

					}
					break;
				case 5 :
					// XQueryParser.g:859:11: p_FunctionCall
					{
					root_0 = (XQDTCommonTree)adaptor.nil();


					pushFollow(FOLLOW_p_FunctionCall_in_p_PrimaryExpr7552);
					p_FunctionCall359=p_FunctionCall();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, p_FunctionCall359.getTree());

					}
					break;
				case 6 :
					// XQueryParser.g:860:11: p_OrderedExpr
					{
					root_0 = (XQDTCommonTree)adaptor.nil();


					pushFollow(FOLLOW_p_OrderedExpr_in_p_PrimaryExpr7564);
					p_OrderedExpr360=p_OrderedExpr();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, p_OrderedExpr360.getTree());

					}
					break;
				case 7 :
					// XQueryParser.g:861:11: p_UnorderedExpr
					{
					root_0 = (XQDTCommonTree)adaptor.nil();


					pushFollow(FOLLOW_p_UnorderedExpr_in_p_PrimaryExpr7576);
					p_UnorderedExpr361=p_UnorderedExpr();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, p_UnorderedExpr361.getTree());

					}
					break;
				case 8 :
					// XQueryParser.g:862:11: p_Constructor
					{
					root_0 = (XQDTCommonTree)adaptor.nil();


					pushFollow(FOLLOW_p_Constructor_in_p_PrimaryExpr7588);
					p_Constructor362=p_Constructor();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, p_Constructor362.getTree());

					}
					break;
				case 9 :
					// XQueryParser.g:865:11: p_BlockExpr
					{
					root_0 = (XQDTCommonTree)adaptor.nil();


					pushFollow(FOLLOW_p_BlockExpr_in_p_PrimaryExpr7602);
					p_BlockExpr363=p_BlockExpr();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, p_BlockExpr363.getTree());

					}
					break;

			}
			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (XQDTCommonTree)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
			retval.tree = (XQDTCommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "p_PrimaryExpr"


	public static class p_Literal_return extends ParserRuleReturnScope {
		XQDTCommonTree tree;
		@Override
		public XQDTCommonTree getTree() { return tree; }
	};


	// $ANTLR start "p_Literal"
	// XQueryParser.g:869:1: p_Literal : ( p_NumericLiteral | p_StringLiteral );
	public final XQueryParser.p_Literal_return p_Literal() throws RecognitionException {
		XQueryParser.p_Literal_return retval = new XQueryParser.p_Literal_return();
		retval.start = input.LT(1);

		XQDTCommonTree root_0 = null;

		ParserRuleReturnScope p_NumericLiteral364 =null;
		ParserRuleReturnScope p_StringLiteral365 =null;


		try {
			// XQueryParser.g:870:9: ( p_NumericLiteral | p_StringLiteral )
			int alt134=2;
			int LA134_0 = input.LA(1);
			if ( (LA134_0==L_DecimalLiteral||LA134_0==L_DoubleLiteral||LA134_0==L_IntegerLiteral) ) {
				alt134=1;
			}
			else if ( (LA134_0==APOS||LA134_0==QUOT) ) {
				alt134=2;
			}

			else {
				if (state.backtracking>0) {state.failed=true; return retval;}
				NoViableAltException nvae =
					new NoViableAltException("", 134, 0, input);
				throw nvae;
			}

			switch (alt134) {
				case 1 :
					// XQueryParser.g:870:11: p_NumericLiteral
					{
					root_0 = (XQDTCommonTree)adaptor.nil();


					pushFollow(FOLLOW_p_NumericLiteral_in_p_Literal7628);
					p_NumericLiteral364=p_NumericLiteral();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, p_NumericLiteral364.getTree());

					}
					break;
				case 2 :
					// XQueryParser.g:870:30: p_StringLiteral
					{
					root_0 = (XQDTCommonTree)adaptor.nil();


					pushFollow(FOLLOW_p_StringLiteral_in_p_Literal7632);
					p_StringLiteral365=p_StringLiteral();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, p_StringLiteral365.getTree());

					}
					break;

			}
			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (XQDTCommonTree)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
			retval.tree = (XQDTCommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "p_Literal"


	public static class p_NumericLiteral_return extends ParserRuleReturnScope {
		XQDTCommonTree tree;
		@Override
		public XQDTCommonTree getTree() { return tree; }
	};


	// $ANTLR start "p_NumericLiteral"
	// XQueryParser.g:874:1: p_NumericLiteral : ( L_IntegerLiteral | L_DecimalLiteral | L_DoubleLiteral );
	public final XQueryParser.p_NumericLiteral_return p_NumericLiteral() throws RecognitionException {
		XQueryParser.p_NumericLiteral_return retval = new XQueryParser.p_NumericLiteral_return();
		retval.start = input.LT(1);

		XQDTCommonTree root_0 = null;

		CommonToken set366=null;

		XQDTCommonTree set366_tree=null;

		try {
			// XQueryParser.g:875:9: ( L_IntegerLiteral | L_DecimalLiteral | L_DoubleLiteral )
			// XQueryParser.g:
			{
			root_0 = (XQDTCommonTree)adaptor.nil();


			set366=(CommonToken)input.LT(1);
			if ( input.LA(1)==L_DecimalLiteral||input.LA(1)==L_DoubleLiteral||input.LA(1)==L_IntegerLiteral ) {
				input.consume();
				if ( state.backtracking==0 ) adaptor.addChild(root_0, (XQDTCommonTree)adaptor.create(set366));
				state.errorRecovery=false;
				state.failed=false;
			}
			else {
				if (state.backtracking>0) {state.failed=true; return retval;}
				MismatchedSetException mse = new MismatchedSetException(null,input);
				throw mse;
			}
			}

			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (XQDTCommonTree)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
			retval.tree = (XQDTCommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "p_NumericLiteral"


	public static class p_VarRef_return extends ParserRuleReturnScope {
		XQDTCommonTree tree;
		@Override
		public XQDTCommonTree getTree() { return tree; }
	};


	// $ANTLR start "p_VarRef"
	// XQueryParser.g:879:1: p_VarRef : DOLLAR p_VarName ;
	public final XQueryParser.p_VarRef_return p_VarRef() throws RecognitionException {
		XQueryParser.p_VarRef_return retval = new XQueryParser.p_VarRef_return();
		retval.start = input.LT(1);

		XQDTCommonTree root_0 = null;

		CommonToken DOLLAR367=null;
		ParserRuleReturnScope p_VarName368 =null;

		XQDTCommonTree DOLLAR367_tree=null;

		try {
			// XQueryParser.g:880:9: ( DOLLAR p_VarName )
			// XQueryParser.g:880:11: DOLLAR p_VarName
			{
			root_0 = (XQDTCommonTree)adaptor.nil();


			DOLLAR367=(CommonToken)match(input,DOLLAR,FOLLOW_DOLLAR_in_p_VarRef7700); if (state.failed) return retval;
			if ( state.backtracking==0 ) {
			DOLLAR367_tree = (XQDTCommonTree)adaptor.create(DOLLAR367);
			adaptor.addChild(root_0, DOLLAR367_tree);
			}

			pushFollow(FOLLOW_p_VarName_in_p_VarRef7702);
			p_VarName368=p_VarName();
			state._fsp--;
			if (state.failed) return retval;
			if ( state.backtracking==0 ) adaptor.addChild(root_0, p_VarName368.getTree());

			}

			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (XQDTCommonTree)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
			retval.tree = (XQDTCommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "p_VarRef"


	public static class p_VarName_return extends ParserRuleReturnScope {
		XQDTCommonTree tree;
		@Override
		public XQDTCommonTree getTree() { return tree; }
	};


	// $ANTLR start "p_VarName"
	// XQueryParser.g:884:1: p_VarName : p_QName ;
	public final XQueryParser.p_VarName_return p_VarName() throws RecognitionException {
		XQueryParser.p_VarName_return retval = new XQueryParser.p_VarName_return();
		retval.start = input.LT(1);

		XQDTCommonTree root_0 = null;

		ParserRuleReturnScope p_QName369 =null;


		try {
			// XQueryParser.g:885:9: ( p_QName )
			// XQueryParser.g:885:11: p_QName
			{
			root_0 = (XQDTCommonTree)adaptor.nil();


			pushFollow(FOLLOW_p_QName_in_p_VarName7728);
			p_QName369=p_QName();
			state._fsp--;
			if (state.failed) return retval;
			if ( state.backtracking==0 ) adaptor.addChild(root_0, p_QName369.getTree());

			}

			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (XQDTCommonTree)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
			retval.tree = (XQDTCommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "p_VarName"


	public static class p_ParenthesizedExpr_return extends ParserRuleReturnScope {
		XQDTCommonTree tree;
		@Override
		public XQDTCommonTree getTree() { return tree; }
	};


	// $ANTLR start "p_ParenthesizedExpr"
	// XQueryParser.g:889:1: p_ParenthesizedExpr : LPAREN ( p_Expr[true,true] )? RPAREN ;
	public final XQueryParser.p_ParenthesizedExpr_return p_ParenthesizedExpr() throws RecognitionException {
		XQueryParser.p_ParenthesizedExpr_return retval = new XQueryParser.p_ParenthesizedExpr_return();
		retval.start = input.LT(1);

		XQDTCommonTree root_0 = null;

		CommonToken LPAREN370=null;
		CommonToken RPAREN372=null;
		ParserRuleReturnScope p_Expr371 =null;

		XQDTCommonTree LPAREN370_tree=null;
		XQDTCommonTree RPAREN372_tree=null;

		try {
			// XQueryParser.g:890:9: ( LPAREN ( p_Expr[true,true] )? RPAREN )
			// XQueryParser.g:890:11: LPAREN ( p_Expr[true,true] )? RPAREN
			{
			root_0 = (XQDTCommonTree)adaptor.nil();


			LPAREN370=(CommonToken)match(input,LPAREN,FOLLOW_LPAREN_in_p_ParenthesizedExpr7754); if (state.failed) return retval;
			if ( state.backtracking==0 ) {
			LPAREN370_tree = (XQDTCommonTree)adaptor.create(LPAREN370);
			adaptor.addChild(root_0, LPAREN370_tree);
			}

			// XQueryParser.g:890:18: ( p_Expr[true,true] )?
			int alt135=2;
			int LA135_0 = input.LA(1);
			if ( ((LA135_0 >= AFTER && LA135_0 <= ALLOWING)||(LA135_0 >= AMP_ER && LA135_0 <= AND)||(LA135_0 >= ANY && LA135_0 <= BINARY)||(LA135_0 >= BOUNDARY_SPACE && LA135_0 <= CATCH)||(LA135_0 >= CHECK && LA135_0 <= CHILD)||(LA135_0 >= COLLATION && LA135_0 <= COLLECTION)||LA135_0==COMMENT||(LA135_0 >= CONSTRAINT && LA135_0 <= DOT_DOT)||(LA135_0 >= ELEMENT && LA135_0 <= EMPTY)||(LA135_0 >= EMPTY_SEQUENCE && LA135_0 <= EQ)||(LA135_0 >= EVERY && LA135_0 <= GE)||(LA135_0 >= GREATEST && LA135_0 <= GT)||(LA135_0 >= IDIV && LA135_0 <= LPAREN)||LA135_0==LT||(LA135_0 >= L_DecimalLiteral && LA135_0 <= L_DoubleLiteral)||(LA135_0 >= L_IntegerLiteral && LA135_0 <= L_Pragma)||(LA135_0 >= MINUS && LA135_0 <= NAN)||(LA135_0 >= NE && LA135_0 <= NOT)||(LA135_0 >= NO_INHERIT && LA135_0 <= PHRASE)||LA135_0==PLUS||(LA135_0 >= PRECEDING && LA135_0 <= PROCESSING_INSTRUCTION)||(LA135_0 >= QUOT && LA135_0 <= QUOT_ER)||(LA135_0 >= RELATIONSHIP && LA135_0 <= REVALIDATION)||(LA135_0 >= SAME && LA135_0 <= SELF)||(LA135_0 >= SENSITIVE && LA135_0 <= SMALLER)||(LA135_0 >= SOME && LA135_0 <= STRIP)||(LA135_0 >= SWITCH && LA135_0 <= VARIABLE)||(LA135_0 >= VERSION && LA135_0 <= WORDS)||(LA135_0 >= XQUERY && LA135_0 <= ZERO_DIGIT)||LA135_0==EXPLICITLY) ) {
				alt135=1;
			}
			switch (alt135) {
				case 1 :
					// XQueryParser.g:890:18: p_Expr[true,true]
					{
					pushFollow(FOLLOW_p_Expr_in_p_ParenthesizedExpr7756);
					p_Expr371=p_Expr(true, true);
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, p_Expr371.getTree());

					}
					break;

			}

			RPAREN372=(CommonToken)match(input,RPAREN,FOLLOW_RPAREN_in_p_ParenthesizedExpr7760); if (state.failed) return retval;
			if ( state.backtracking==0 ) {
			RPAREN372_tree = (XQDTCommonTree)adaptor.create(RPAREN372);
			adaptor.addChild(root_0, RPAREN372_tree);
			}

			}

			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (XQDTCommonTree)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
			retval.tree = (XQDTCommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "p_ParenthesizedExpr"


	public static class p_ContextItemExpr_return extends ParserRuleReturnScope {
		XQDTCommonTree tree;
		@Override
		public XQDTCommonTree getTree() { return tree; }
	};


	// $ANTLR start "p_ContextItemExpr"
	// XQueryParser.g:894:1: p_ContextItemExpr : DOT ;
	public final XQueryParser.p_ContextItemExpr_return p_ContextItemExpr() throws RecognitionException {
		XQueryParser.p_ContextItemExpr_return retval = new XQueryParser.p_ContextItemExpr_return();
		retval.start = input.LT(1);

		XQDTCommonTree root_0 = null;

		CommonToken DOT373=null;

		XQDTCommonTree DOT373_tree=null;

		try {
			// XQueryParser.g:895:9: ( DOT )
			// XQueryParser.g:895:11: DOT
			{
			root_0 = (XQDTCommonTree)adaptor.nil();


			DOT373=(CommonToken)match(input,DOT,FOLLOW_DOT_in_p_ContextItemExpr7786); if (state.failed) return retval;
			if ( state.backtracking==0 ) {
			DOT373_tree = (XQDTCommonTree)adaptor.create(DOT373);
			adaptor.addChild(root_0, DOT373_tree);
			}

			}

			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (XQDTCommonTree)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
			retval.tree = (XQDTCommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "p_ContextItemExpr"


	public static class p_OrderedExpr_return extends ParserRuleReturnScope {
		XQDTCommonTree tree;
		@Override
		public XQDTCommonTree getTree() { return tree; }
	};


	// $ANTLR start "p_OrderedExpr"
	// XQueryParser.g:899:1: p_OrderedExpr : k= ORDERED LBRACKET p_Expr[true,true] RBRACKET ;
	public final XQueryParser.p_OrderedExpr_return p_OrderedExpr() throws RecognitionException {
		XQueryParser.p_OrderedExpr_return retval = new XQueryParser.p_OrderedExpr_return();
		retval.start = input.LT(1);

		XQDTCommonTree root_0 = null;

		CommonToken k=null;
		CommonToken LBRACKET374=null;
		CommonToken RBRACKET376=null;
		ParserRuleReturnScope p_Expr375 =null;

		XQDTCommonTree k_tree=null;
		XQDTCommonTree LBRACKET374_tree=null;
		XQDTCommonTree RBRACKET376_tree=null;

		try {
			// XQueryParser.g:900:9: (k= ORDERED LBRACKET p_Expr[true,true] RBRACKET )
			// XQueryParser.g:900:11: k= ORDERED LBRACKET p_Expr[true,true] RBRACKET
			{
			root_0 = (XQDTCommonTree)adaptor.nil();


			k=(CommonToken)match(input,ORDERED,FOLLOW_ORDERED_in_p_OrderedExpr7814); if (state.failed) return retval;
			if ( state.backtracking==0 ) {
			k_tree = (XQDTCommonTree)adaptor.create(k);
			adaptor.addChild(root_0, k_tree);
			}

			if ( state.backtracking==0 ) {ak(k);}
			LBRACKET374=(CommonToken)match(input,LBRACKET,FOLLOW_LBRACKET_in_p_OrderedExpr7818); if (state.failed) return retval;
			if ( state.backtracking==0 ) {
			LBRACKET374_tree = (XQDTCommonTree)adaptor.create(LBRACKET374);
			adaptor.addChild(root_0, LBRACKET374_tree);
			}

			pushFollow(FOLLOW_p_Expr_in_p_OrderedExpr7820);
			p_Expr375=p_Expr(true, true);
			state._fsp--;
			if (state.failed) return retval;
			if ( state.backtracking==0 ) adaptor.addChild(root_0, p_Expr375.getTree());

			RBRACKET376=(CommonToken)match(input,RBRACKET,FOLLOW_RBRACKET_in_p_OrderedExpr7823); if (state.failed) return retval;
			if ( state.backtracking==0 ) {
			RBRACKET376_tree = (XQDTCommonTree)adaptor.create(RBRACKET376);
			adaptor.addChild(root_0, RBRACKET376_tree);
			}

			}

			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (XQDTCommonTree)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
			retval.tree = (XQDTCommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "p_OrderedExpr"


	public static class p_UnorderedExpr_return extends ParserRuleReturnScope {
		XQDTCommonTree tree;
		@Override
		public XQDTCommonTree getTree() { return tree; }
	};


	// $ANTLR start "p_UnorderedExpr"
	// XQueryParser.g:904:1: p_UnorderedExpr : k= UNORDERED LBRACKET p_Expr[true,true] RBRACKET ;
	public final XQueryParser.p_UnorderedExpr_return p_UnorderedExpr() throws RecognitionException {
		XQueryParser.p_UnorderedExpr_return retval = new XQueryParser.p_UnorderedExpr_return();
		retval.start = input.LT(1);

		XQDTCommonTree root_0 = null;

		CommonToken k=null;
		CommonToken LBRACKET377=null;
		CommonToken RBRACKET379=null;
		ParserRuleReturnScope p_Expr378 =null;

		XQDTCommonTree k_tree=null;
		XQDTCommonTree LBRACKET377_tree=null;
		XQDTCommonTree RBRACKET379_tree=null;

		try {
			// XQueryParser.g:905:9: (k= UNORDERED LBRACKET p_Expr[true,true] RBRACKET )
			// XQueryParser.g:905:11: k= UNORDERED LBRACKET p_Expr[true,true] RBRACKET
			{
			root_0 = (XQDTCommonTree)adaptor.nil();


			k=(CommonToken)match(input,UNORDERED,FOLLOW_UNORDERED_in_p_UnorderedExpr7851); if (state.failed) return retval;
			if ( state.backtracking==0 ) {
			k_tree = (XQDTCommonTree)adaptor.create(k);
			adaptor.addChild(root_0, k_tree);
			}

			if ( state.backtracking==0 ) {ak(k);}
			LBRACKET377=(CommonToken)match(input,LBRACKET,FOLLOW_LBRACKET_in_p_UnorderedExpr7855); if (state.failed) return retval;
			if ( state.backtracking==0 ) {
			LBRACKET377_tree = (XQDTCommonTree)adaptor.create(LBRACKET377);
			adaptor.addChild(root_0, LBRACKET377_tree);
			}

			pushFollow(FOLLOW_p_Expr_in_p_UnorderedExpr7857);
			p_Expr378=p_Expr(true, true);
			state._fsp--;
			if (state.failed) return retval;
			if ( state.backtracking==0 ) adaptor.addChild(root_0, p_Expr378.getTree());

			RBRACKET379=(CommonToken)match(input,RBRACKET,FOLLOW_RBRACKET_in_p_UnorderedExpr7860); if (state.failed) return retval;
			if ( state.backtracking==0 ) {
			RBRACKET379_tree = (XQDTCommonTree)adaptor.create(RBRACKET379);
			adaptor.addChild(root_0, RBRACKET379_tree);
			}

			}

			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (XQDTCommonTree)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
			retval.tree = (XQDTCommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "p_UnorderedExpr"


	public static class p_FunctionCall_return extends ParserRuleReturnScope {
		XQDTCommonTree tree;
		@Override
		public XQDTCommonTree getTree() { return tree; }
	};


	// $ANTLR start "p_FunctionCall"
	// XQueryParser.g:910:1: p_FunctionCall : pg_FQName p_ArgumentList ;
	public final XQueryParser.p_FunctionCall_return p_FunctionCall() throws RecognitionException {
		XQueryParser.p_FunctionCall_return retval = new XQueryParser.p_FunctionCall_return();
		retval.start = input.LT(1);

		XQDTCommonTree root_0 = null;

		ParserRuleReturnScope pg_FQName380 =null;
		ParserRuleReturnScope p_ArgumentList381 =null;


		try {
			// XQueryParser.g:911:9: ( pg_FQName p_ArgumentList )
			// XQueryParser.g:911:11: pg_FQName p_ArgumentList
			{
			root_0 = (XQDTCommonTree)adaptor.nil();


			pushFollow(FOLLOW_pg_FQName_in_p_FunctionCall7887);
			pg_FQName380=pg_FQName();
			state._fsp--;
			if (state.failed) return retval;
			if ( state.backtracking==0 ) adaptor.addChild(root_0, pg_FQName380.getTree());

			pushFollow(FOLLOW_p_ArgumentList_in_p_FunctionCall7889);
			p_ArgumentList381=p_ArgumentList();
			state._fsp--;
			if (state.failed) return retval;
			if ( state.backtracking==0 ) adaptor.addChild(root_0, p_ArgumentList381.getTree());

			}

			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (XQDTCommonTree)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
			retval.tree = (XQDTCommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "p_FunctionCall"


	public static class p_Argument_return extends ParserRuleReturnScope {
		XQDTCommonTree tree;
		@Override
		public XQDTCommonTree getTree() { return tree; }
	};


	// $ANTLR start "p_Argument"
	// XQueryParser.g:915:1: p_Argument : ( p_ExprSingle[true] | p_ArgumentPlaceholder );
	public final XQueryParser.p_Argument_return p_Argument() throws RecognitionException {
		XQueryParser.p_Argument_return retval = new XQueryParser.p_Argument_return();
		retval.start = input.LT(1);

		XQDTCommonTree root_0 = null;

		ParserRuleReturnScope p_ExprSingle382 =null;
		ParserRuleReturnScope p_ArgumentPlaceholder383 =null;


		try {
			// XQueryParser.g:916:9: ( p_ExprSingle[true] | p_ArgumentPlaceholder )
			int alt136=2;
			int LA136_0 = input.LA(1);
			if ( ((LA136_0 >= AFTER && LA136_0 <= ALLOWING)||(LA136_0 >= AMP_ER && LA136_0 <= AND)||(LA136_0 >= ANY && LA136_0 <= BINARY)||(LA136_0 >= BOUNDARY_SPACE && LA136_0 <= CATCH)||(LA136_0 >= CHECK && LA136_0 <= CHILD)||(LA136_0 >= COLLATION && LA136_0 <= COLLECTION)||LA136_0==COMMENT||(LA136_0 >= CONSTRAINT && LA136_0 <= DOT_DOT)||(LA136_0 >= ELEMENT && LA136_0 <= EMPTY)||(LA136_0 >= EMPTY_SEQUENCE && LA136_0 <= EQ)||(LA136_0 >= EVERY && LA136_0 <= GE)||(LA136_0 >= GREATEST && LA136_0 <= GT)||(LA136_0 >= IDIV && LA136_0 <= LPAREN)||LA136_0==LT||(LA136_0 >= L_DecimalLiteral && LA136_0 <= L_DoubleLiteral)||(LA136_0 >= L_IntegerLiteral && LA136_0 <= L_Pragma)||(LA136_0 >= MINUS && LA136_0 <= NAN)||(LA136_0 >= NE && LA136_0 <= NOT)||(LA136_0 >= NO_INHERIT && LA136_0 <= PHRASE)||LA136_0==PLUS||(LA136_0 >= PRECEDING && LA136_0 <= PROCESSING_INSTRUCTION)||(LA136_0 >= QUOT && LA136_0 <= QUOT_ER)||(LA136_0 >= RELATIONSHIP && LA136_0 <= REVALIDATION)||(LA136_0 >= SAME && LA136_0 <= SELF)||(LA136_0 >= SENSITIVE && LA136_0 <= SMALLER)||(LA136_0 >= SOME && LA136_0 <= STRIP)||(LA136_0 >= SWITCH && LA136_0 <= VARIABLE)||(LA136_0 >= VERSION && LA136_0 <= WORDS)||(LA136_0 >= XQUERY && LA136_0 <= ZERO_DIGIT)||LA136_0==EXPLICITLY) ) {
				alt136=1;
			}
			else if ( (LA136_0==QUESTION) ) {
				alt136=2;
			}

			else {
				if (state.backtracking>0) {state.failed=true; return retval;}
				NoViableAltException nvae =
					new NoViableAltException("", 136, 0, input);
				throw nvae;
			}

			switch (alt136) {
				case 1 :
					// XQueryParser.g:916:11: p_ExprSingle[true]
					{
					root_0 = (XQDTCommonTree)adaptor.nil();


					pushFollow(FOLLOW_p_ExprSingle_in_p_Argument7915);
					p_ExprSingle382=p_ExprSingle(true);
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, p_ExprSingle382.getTree());

					}
					break;
				case 2 :
					// XQueryParser.g:916:32: p_ArgumentPlaceholder
					{
					root_0 = (XQDTCommonTree)adaptor.nil();


					pushFollow(FOLLOW_p_ArgumentPlaceholder_in_p_Argument7920);
					p_ArgumentPlaceholder383=p_ArgumentPlaceholder();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, p_ArgumentPlaceholder383.getTree());

					}
					break;

			}
			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (XQDTCommonTree)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
			retval.tree = (XQDTCommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "p_Argument"


	public static class p_ArgumentPlaceholder_return extends ParserRuleReturnScope {
		XQDTCommonTree tree;
		@Override
		public XQDTCommonTree getTree() { return tree; }
	};


	// $ANTLR start "p_ArgumentPlaceholder"
	// XQueryParser.g:920:1: p_ArgumentPlaceholder : QUESTION ;
	public final XQueryParser.p_ArgumentPlaceholder_return p_ArgumentPlaceholder() throws RecognitionException {
		XQueryParser.p_ArgumentPlaceholder_return retval = new XQueryParser.p_ArgumentPlaceholder_return();
		retval.start = input.LT(1);

		XQDTCommonTree root_0 = null;

		CommonToken QUESTION384=null;

		XQDTCommonTree QUESTION384_tree=null;

		try {
			// XQueryParser.g:921:9: ( QUESTION )
			// XQueryParser.g:921:11: QUESTION
			{
			root_0 = (XQDTCommonTree)adaptor.nil();


			QUESTION384=(CommonToken)match(input,QUESTION,FOLLOW_QUESTION_in_p_ArgumentPlaceholder7946); if (state.failed) return retval;
			if ( state.backtracking==0 ) {
			QUESTION384_tree = (XQDTCommonTree)adaptor.create(QUESTION384);
			adaptor.addChild(root_0, QUESTION384_tree);
			}

			}

			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (XQDTCommonTree)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
			retval.tree = (XQDTCommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "p_ArgumentPlaceholder"


	public static class p_Constructor_return extends ParserRuleReturnScope {
		XQDTCommonTree tree;
		@Override
		public XQDTCommonTree getTree() { return tree; }
	};


	// $ANTLR start "p_Constructor"
	// XQueryParser.g:925:1: p_Constructor : ( p_DirectConstructor | p_ComputedConstructor );
	public final XQueryParser.p_Constructor_return p_Constructor() throws RecognitionException {
		XQueryParser.p_Constructor_return retval = new XQueryParser.p_Constructor_return();
		retval.start = input.LT(1);

		XQDTCommonTree root_0 = null;

		ParserRuleReturnScope p_DirectConstructor385 =null;
		ParserRuleReturnScope p_ComputedConstructor386 =null;


		try {
			// XQueryParser.g:926:9: ( p_DirectConstructor | p_ComputedConstructor )
			int alt137=2;
			int LA137_0 = input.LA(1);
			if ( ((LA137_0 >= L_DirCommentConstructor && LA137_0 <= L_DirPIConstructor)||LA137_0==SMALLER) ) {
				alt137=1;
			}
			else if ( (LA137_0==ATTRIBUTE||LA137_0==COMMENT||LA137_0==DOCUMENT||LA137_0==ELEMENT||LA137_0==NAMESPACE||LA137_0==PROCESSING_INSTRUCTION||LA137_0==TEXT) ) {
				alt137=2;
			}
			else if ( (LA137_0==BINARY) && ((lc(MLS)))) {
				alt137=2;
			}

			switch (alt137) {
				case 1 :
					// XQueryParser.g:926:11: p_DirectConstructor
					{
					root_0 = (XQDTCommonTree)adaptor.nil();


					pushFollow(FOLLOW_p_DirectConstructor_in_p_Constructor7972);
					p_DirectConstructor385=p_DirectConstructor();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, p_DirectConstructor385.getTree());

					}
					break;
				case 2 :
					// XQueryParser.g:927:11: p_ComputedConstructor
					{
					root_0 = (XQDTCommonTree)adaptor.nil();


					pushFollow(FOLLOW_p_ComputedConstructor_in_p_Constructor7984);
					p_ComputedConstructor386=p_ComputedConstructor();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, p_ComputedConstructor386.getTree());

					}
					break;

			}
			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (XQDTCommonTree)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
			retval.tree = (XQDTCommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "p_Constructor"


	public static class p_DirectConstructor_return extends ParserRuleReturnScope {
		XQDTCommonTree tree;
		@Override
		public XQDTCommonTree getTree() { return tree; }
	};


	// $ANTLR start "p_DirectConstructor"
	// XQueryParser.g:931:1: p_DirectConstructor : ( p_DirElemConstructor | p_DirCommentConstructor | p_DirPIConstructor );
	public final XQueryParser.p_DirectConstructor_return p_DirectConstructor() throws RecognitionException {
		XQueryParser.p_DirectConstructor_return retval = new XQueryParser.p_DirectConstructor_return();
		retval.start = input.LT(1);

		XQDTCommonTree root_0 = null;

		ParserRuleReturnScope p_DirElemConstructor387 =null;
		ParserRuleReturnScope p_DirCommentConstructor388 =null;
		ParserRuleReturnScope p_DirPIConstructor389 =null;


		try {
			// XQueryParser.g:932:9: ( p_DirElemConstructor | p_DirCommentConstructor | p_DirPIConstructor )
			int alt138=3;
			switch ( input.LA(1) ) {
			case SMALLER:
				{
				alt138=1;
				}
				break;
			case L_DirCommentConstructor:
				{
				alt138=2;
				}
				break;
			case L_DirPIConstructor:
				{
				alt138=3;
				}
				break;
			default:
				if (state.backtracking>0) {state.failed=true; return retval;}
				NoViableAltException nvae =
					new NoViableAltException("", 138, 0, input);
				throw nvae;
			}
			switch (alt138) {
				case 1 :
					// XQueryParser.g:932:11: p_DirElemConstructor
					{
					root_0 = (XQDTCommonTree)adaptor.nil();


					pushFollow(FOLLOW_p_DirElemConstructor_in_p_DirectConstructor8010);
					p_DirElemConstructor387=p_DirElemConstructor();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, p_DirElemConstructor387.getTree());

					}
					break;
				case 2 :
					// XQueryParser.g:933:11: p_DirCommentConstructor
					{
					root_0 = (XQDTCommonTree)adaptor.nil();


					pushFollow(FOLLOW_p_DirCommentConstructor_in_p_DirectConstructor8022);
					p_DirCommentConstructor388=p_DirCommentConstructor();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, p_DirCommentConstructor388.getTree());

					}
					break;
				case 3 :
					// XQueryParser.g:934:11: p_DirPIConstructor
					{
					root_0 = (XQDTCommonTree)adaptor.nil();


					pushFollow(FOLLOW_p_DirPIConstructor_in_p_DirectConstructor8034);
					p_DirPIConstructor389=p_DirPIConstructor();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, p_DirPIConstructor389.getTree());

					}
					break;

			}
			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (XQDTCommonTree)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
			retval.tree = (XQDTCommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "p_DirectConstructor"


	public static class p_DirElemConstructor_return extends ParserRuleReturnScope {
		XQDTCommonTree tree;
		@Override
		public XQDTCommonTree getTree() { return tree; }
	};


	// $ANTLR start "p_DirElemConstructor"
	// XQueryParser.g:938:1: p_DirElemConstructor : SMALLER p_QName p_DirAttributeList ( EMPTY_CLOSE_TAG | ( GREATER ( pm_DirElemContent )* CLOSE_TAG p_QName ( S )? GREATER ) ) -> ^( DirElemConstructor ^( DirAttributeList ( p_DirAttributeList )* ) ^( DirElemContent ( pm_DirElemContent )* ) ) ;
	public final XQueryParser.p_DirElemConstructor_return p_DirElemConstructor() throws RecognitionException {
		XQueryParser.p_DirElemConstructor_return retval = new XQueryParser.p_DirElemConstructor_return();
		retval.start = input.LT(1);

		XQDTCommonTree root_0 = null;

		CommonToken SMALLER390=null;
		CommonToken EMPTY_CLOSE_TAG393=null;
		CommonToken GREATER394=null;
		CommonToken CLOSE_TAG396=null;
		CommonToken S398=null;
		CommonToken GREATER399=null;
		ParserRuleReturnScope p_QName391 =null;
		ParserRuleReturnScope p_DirAttributeList392 =null;
		ParserRuleReturnScope pm_DirElemContent395 =null;
		ParserRuleReturnScope p_QName397 =null;

		XQDTCommonTree SMALLER390_tree=null;
		XQDTCommonTree EMPTY_CLOSE_TAG393_tree=null;
		XQDTCommonTree GREATER394_tree=null;
		XQDTCommonTree CLOSE_TAG396_tree=null;
		XQDTCommonTree S398_tree=null;
		XQDTCommonTree GREATER399_tree=null;
		RewriteRuleTokenStream stream_CLOSE_TAG=new RewriteRuleTokenStream(adaptor,"token CLOSE_TAG");
		RewriteRuleTokenStream stream_GREATER=new RewriteRuleTokenStream(adaptor,"token GREATER");
		RewriteRuleTokenStream stream_S=new RewriteRuleTokenStream(adaptor,"token S");
		RewriteRuleTokenStream stream_EMPTY_CLOSE_TAG=new RewriteRuleTokenStream(adaptor,"token EMPTY_CLOSE_TAG");
		RewriteRuleTokenStream stream_SMALLER=new RewriteRuleTokenStream(adaptor,"token SMALLER");
		RewriteRuleSubtreeStream stream_p_DirAttributeList=new RewriteRuleSubtreeStream(adaptor,"rule p_DirAttributeList");
		RewriteRuleSubtreeStream stream_pm_DirElemContent=new RewriteRuleSubtreeStream(adaptor,"rule pm_DirElemContent");
		RewriteRuleSubtreeStream stream_p_QName=new RewriteRuleSubtreeStream(adaptor,"rule p_QName");

		try {
			// XQueryParser.g:939:9: ( SMALLER p_QName p_DirAttributeList ( EMPTY_CLOSE_TAG | ( GREATER ( pm_DirElemContent )* CLOSE_TAG p_QName ( S )? GREATER ) ) -> ^( DirElemConstructor ^( DirAttributeList ( p_DirAttributeList )* ) ^( DirElemContent ( pm_DirElemContent )* ) ) )
			// XQueryParser.g:939:11: SMALLER p_QName p_DirAttributeList ( EMPTY_CLOSE_TAG | ( GREATER ( pm_DirElemContent )* CLOSE_TAG p_QName ( S )? GREATER ) )
			{
			SMALLER390=(CommonToken)match(input,SMALLER,FOLLOW_SMALLER_in_p_DirElemConstructor8061); if (state.failed) return retval; 
			if ( state.backtracking==0 ) stream_SMALLER.add(SMALLER390);

			if ( state.backtracking==0 ) {pushXMLLexer();}
			pushFollow(FOLLOW_p_QName_in_p_DirElemConstructor8075);
			p_QName391=p_QName();
			state._fsp--;
			if (state.failed) return retval;
			if ( state.backtracking==0 ) stream_p_QName.add(p_QName391.getTree());
			pushFollow(FOLLOW_p_DirAttributeList_in_p_DirElemConstructor8077);
			p_DirAttributeList392=p_DirAttributeList();
			state._fsp--;
			if (state.failed) return retval;
			if ( state.backtracking==0 ) stream_p_DirAttributeList.add(p_DirAttributeList392.getTree());
			// XQueryParser.g:941:11: ( EMPTY_CLOSE_TAG | ( GREATER ( pm_DirElemContent )* CLOSE_TAG p_QName ( S )? GREATER ) )
			int alt141=2;
			int LA141_0 = input.LA(1);
			if ( (LA141_0==EMPTY_CLOSE_TAG) ) {
				alt141=1;
			}
			else if ( (LA141_0==GREATER) ) {
				alt141=2;
			}

			else {
				if (state.backtracking>0) {state.failed=true; return retval;}
				NoViableAltException nvae =
					new NoViableAltException("", 141, 0, input);
				throw nvae;
			}

			switch (alt141) {
				case 1 :
					// XQueryParser.g:941:12: EMPTY_CLOSE_TAG
					{
					EMPTY_CLOSE_TAG393=(CommonToken)match(input,EMPTY_CLOSE_TAG,FOLLOW_EMPTY_CLOSE_TAG_in_p_DirElemConstructor8091); if (state.failed) return retval; 
					if ( state.backtracking==0 ) stream_EMPTY_CLOSE_TAG.add(EMPTY_CLOSE_TAG393);

					}
					break;
				case 2 :
					// XQueryParser.g:941:30: ( GREATER ( pm_DirElemContent )* CLOSE_TAG p_QName ( S )? GREATER )
					{
					// XQueryParser.g:941:30: ( GREATER ( pm_DirElemContent )* CLOSE_TAG p_QName ( S )? GREATER )
					// XQueryParser.g:941:31: GREATER ( pm_DirElemContent )* CLOSE_TAG p_QName ( S )? GREATER
					{
					GREATER394=(CommonToken)match(input,GREATER,FOLLOW_GREATER_in_p_DirElemConstructor8096); if (state.failed) return retval; 
					if ( state.backtracking==0 ) stream_GREATER.add(GREATER394);

					// XQueryParser.g:941:39: ( pm_DirElemContent )*
					loop139:
					while (true) {
						int alt139=2;
						int LA139_0 = input.LA(1);
						if ( (LA139_0==ESCAPE_LBRACKET||LA139_0==ESCAPE_RBRACKET||LA139_0==LBRACKET||(LA139_0 >= L_CDataSection && LA139_0 <= L_CharRef)||(LA139_0 >= L_DirCommentConstructor && LA139_0 <= L_DirPIConstructor)||LA139_0==L_ElementContentChar||LA139_0==L_PredefinedEntityRef||LA139_0==SMALLER) ) {
							alt139=1;
						}

						switch (alt139) {
						case 1 :
							// XQueryParser.g:941:39: pm_DirElemContent
							{
							pushFollow(FOLLOW_pm_DirElemContent_in_p_DirElemConstructor8098);
							pm_DirElemContent395=pm_DirElemContent();
							state._fsp--;
							if (state.failed) return retval;
							if ( state.backtracking==0 ) stream_pm_DirElemContent.add(pm_DirElemContent395.getTree());
							}
							break;

						default :
							break loop139;
						}
					}

					CLOSE_TAG396=(CommonToken)match(input,CLOSE_TAG,FOLLOW_CLOSE_TAG_in_p_DirElemConstructor8101); if (state.failed) return retval; 
					if ( state.backtracking==0 ) stream_CLOSE_TAG.add(CLOSE_TAG396);

					pushFollow(FOLLOW_p_QName_in_p_DirElemConstructor8103);
					p_QName397=p_QName();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) stream_p_QName.add(p_QName397.getTree());
					// XQueryParser.g:941:76: ( S )?
					int alt140=2;
					int LA140_0 = input.LA(1);
					if ( (LA140_0==S) ) {
						alt140=1;
					}
					switch (alt140) {
						case 1 :
							// XQueryParser.g:941:76: S
							{
							S398=(CommonToken)match(input,S,FOLLOW_S_in_p_DirElemConstructor8105); if (state.failed) return retval; 
							if ( state.backtracking==0 ) stream_S.add(S398);

							}
							break;

					}

					GREATER399=(CommonToken)match(input,GREATER,FOLLOW_GREATER_in_p_DirElemConstructor8108); if (state.failed) return retval; 
					if ( state.backtracking==0 ) stream_GREATER.add(GREATER399);

					}

					}
					break;

			}

			// AST REWRITE
			// elements: pm_DirElemContent, p_DirAttributeList
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			if ( state.backtracking==0 ) {
			retval.tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.getTree():null);

			root_0 = (XQDTCommonTree)adaptor.nil();
			// 942:17: -> ^( DirElemConstructor ^( DirAttributeList ( p_DirAttributeList )* ) ^( DirElemContent ( pm_DirElemContent )* ) )
			{
				// XQueryParser.g:942:20: ^( DirElemConstructor ^( DirAttributeList ( p_DirAttributeList )* ) ^( DirElemContent ( pm_DirElemContent )* ) )
				{
				XQDTCommonTree root_1 = (XQDTCommonTree)adaptor.nil();
				root_1 = (XQDTCommonTree)adaptor.becomeRoot((XQDTCommonTree)adaptor.create(DirElemConstructor, "DirElemConstructor"), root_1);
				// XQueryParser.g:942:41: ^( DirAttributeList ( p_DirAttributeList )* )
				{
				XQDTCommonTree root_2 = (XQDTCommonTree)adaptor.nil();
				root_2 = (XQDTCommonTree)adaptor.becomeRoot((XQDTCommonTree)adaptor.create(DirAttributeList, "DirAttributeList"), root_2);
				// XQueryParser.g:942:60: ( p_DirAttributeList )*
				while ( stream_p_DirAttributeList.hasNext() ) {
					adaptor.addChild(root_2, stream_p_DirAttributeList.nextTree());
				}
				stream_p_DirAttributeList.reset();

				adaptor.addChild(root_1, root_2);
				}

				// XQueryParser.g:942:81: ^( DirElemContent ( pm_DirElemContent )* )
				{
				XQDTCommonTree root_2 = (XQDTCommonTree)adaptor.nil();
				root_2 = (XQDTCommonTree)adaptor.becomeRoot((XQDTCommonTree)adaptor.create(DirElemContent, "DirElemContent"), root_2);
				// XQueryParser.g:942:98: ( pm_DirElemContent )*
				while ( stream_pm_DirElemContent.hasNext() ) {
					adaptor.addChild(root_2, stream_pm_DirElemContent.nextTree());
				}
				stream_pm_DirElemContent.reset();

				adaptor.addChild(root_1, root_2);
				}

				adaptor.addChild(root_0, root_1);
				}

			}


			retval.tree = root_0;
			}

			}

			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (XQDTCommonTree)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
			retval.tree = (XQDTCommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);
		}
		finally {
			// do for sure before leaving
			popLexer();
		}
		return retval;
	}
	// $ANTLR end "p_DirElemConstructor"


	public static class p_DirAttributeList_return extends ParserRuleReturnScope {
		XQDTCommonTree tree;
		@Override
		public XQDTCommonTree getTree() { return tree; }
	};


	// $ANTLR start "p_DirAttributeList"
	// XQueryParser.g:947:1: p_DirAttributeList : ( S ( p_QName ( S )? EQUAL ( S )? p_DirAttributeValue )? )* ;
	public final XQueryParser.p_DirAttributeList_return p_DirAttributeList() throws RecognitionException {
		XQueryParser.p_DirAttributeList_return retval = new XQueryParser.p_DirAttributeList_return();
		retval.start = input.LT(1);

		XQDTCommonTree root_0 = null;

		CommonToken S400=null;
		CommonToken S402=null;
		CommonToken EQUAL403=null;
		CommonToken S404=null;
		ParserRuleReturnScope p_QName401 =null;
		ParserRuleReturnScope p_DirAttributeValue405 =null;

		XQDTCommonTree S400_tree=null;
		XQDTCommonTree S402_tree=null;
		XQDTCommonTree EQUAL403_tree=null;
		XQDTCommonTree S404_tree=null;

		try {
			// XQueryParser.g:948:9: ( ( S ( p_QName ( S )? EQUAL ( S )? p_DirAttributeValue )? )* )
			// XQueryParser.g:948:11: ( S ( p_QName ( S )? EQUAL ( S )? p_DirAttributeValue )? )*
			{
			root_0 = (XQDTCommonTree)adaptor.nil();


			// XQueryParser.g:948:11: ( S ( p_QName ( S )? EQUAL ( S )? p_DirAttributeValue )? )*
			loop145:
			while (true) {
				int alt145=2;
				int LA145_0 = input.LA(1);
				if ( (LA145_0==S) ) {
					alt145=1;
				}

				switch (alt145) {
				case 1 :
					// XQueryParser.g:948:12: S ( p_QName ( S )? EQUAL ( S )? p_DirAttributeValue )?
					{
					S400=(CommonToken)match(input,S,FOLLOW_S_in_p_DirAttributeList8185); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					S400_tree = (XQDTCommonTree)adaptor.create(S400);
					adaptor.addChild(root_0, S400_tree);
					}

					// XQueryParser.g:948:14: ( p_QName ( S )? EQUAL ( S )? p_DirAttributeValue )?
					int alt144=2;
					int LA144_0 = input.LA(1);
					if ( ((LA144_0 >= AFTER && LA144_0 <= ALLOWING)||(LA144_0 >= AMP_ER && LA144_0 <= AND)||LA144_0==ANY||(LA144_0 >= APOS_ER && LA144_0 <= ATTRIBUTE)||(LA144_0 >= BASE_URI && LA144_0 <= BINARY)||(LA144_0 >= BOUNDARY_SPACE && LA144_0 <= CATCH)||(LA144_0 >= CHECK && LA144_0 <= CHILD)||(LA144_0 >= COLLATION && LA144_0 <= COLLECTION)||LA144_0==COMMENT||(LA144_0 >= CONSTRAINT && LA144_0 <= DOCUMENT_NODE)||(LA144_0 >= ELEMENT && LA144_0 <= EMPTY)||(LA144_0 >= EMPTY_SEQUENCE && LA144_0 <= EQ)||(LA144_0 >= EVERY && LA144_0 <= GE)||(LA144_0 >= GREATEST && LA144_0 <= GT)||(LA144_0 >= IDIV && LA144_0 <= LAX)||(LA144_0 >= LE && LA144_0 <= LOWERCASE)||LA144_0==LT||LA144_0==L_NCName||(LA144_0 >= MINUS_SIGN && LA144_0 <= NAN)||(LA144_0 >= NE && LA144_0 <= NOT)||(LA144_0 >= NO_INHERIT && LA144_0 <= PHRASE)||(LA144_0 >= PRECEDING && LA144_0 <= PROCESSING_INSTRUCTION)||LA144_0==QUOT_ER||(LA144_0 >= RELATIONSHIP && LA144_0 <= REVALIDATION)||(LA144_0 >= SAME && LA144_0 <= SELF)||(LA144_0 >= SENSITIVE && LA144_0 <= SKIP)||LA144_0==SLIDING||(LA144_0 >= SOME && LA144_0 <= STABLE)||(LA144_0 >= START && LA144_0 <= STRIP)||(LA144_0 >= SWITCH && LA144_0 <= UNORDERED)||(LA144_0 >= UPPERCASE && LA144_0 <= VARIABLE)||(LA144_0 >= VERSION && LA144_0 <= WORDS)||(LA144_0 >= XQUERY && LA144_0 <= ZERO_DIGIT)||LA144_0==EXPLICITLY) ) {
						alt144=1;
					}
					switch (alt144) {
						case 1 :
							// XQueryParser.g:948:15: p_QName ( S )? EQUAL ( S )? p_DirAttributeValue
							{
							pushFollow(FOLLOW_p_QName_in_p_DirAttributeList8188);
							p_QName401=p_QName();
							state._fsp--;
							if (state.failed) return retval;
							if ( state.backtracking==0 ) adaptor.addChild(root_0, p_QName401.getTree());

							// XQueryParser.g:948:23: ( S )?
							int alt142=2;
							int LA142_0 = input.LA(1);
							if ( (LA142_0==S) ) {
								alt142=1;
							}
							switch (alt142) {
								case 1 :
									// XQueryParser.g:948:23: S
									{
									S402=(CommonToken)match(input,S,FOLLOW_S_in_p_DirAttributeList8190); if (state.failed) return retval;
									if ( state.backtracking==0 ) {
									S402_tree = (XQDTCommonTree)adaptor.create(S402);
									adaptor.addChild(root_0, S402_tree);
									}

									}
									break;

							}

							EQUAL403=(CommonToken)match(input,EQUAL,FOLLOW_EQUAL_in_p_DirAttributeList8193); if (state.failed) return retval;
							if ( state.backtracking==0 ) {
							EQUAL403_tree = (XQDTCommonTree)adaptor.create(EQUAL403);
							adaptor.addChild(root_0, EQUAL403_tree);
							}

							// XQueryParser.g:948:32: ( S )?
							int alt143=2;
							int LA143_0 = input.LA(1);
							if ( (LA143_0==S) ) {
								alt143=1;
							}
							switch (alt143) {
								case 1 :
									// XQueryParser.g:948:32: S
									{
									S404=(CommonToken)match(input,S,FOLLOW_S_in_p_DirAttributeList8195); if (state.failed) return retval;
									if ( state.backtracking==0 ) {
									S404_tree = (XQDTCommonTree)adaptor.create(S404);
									adaptor.addChild(root_0, S404_tree);
									}

									}
									break;

							}

							pushFollow(FOLLOW_p_DirAttributeValue_in_p_DirAttributeList8198);
							p_DirAttributeValue405=p_DirAttributeValue();
							state._fsp--;
							if (state.failed) return retval;
							if ( state.backtracking==0 ) adaptor.addChild(root_0, p_DirAttributeValue405.getTree());

							}
							break;

					}

					}
					break;

				default :
					break loop145;
				}
			}

			}

			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (XQDTCommonTree)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
			retval.tree = (XQDTCommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "p_DirAttributeList"


	public static class p_DirAttributeValue_return extends ParserRuleReturnScope {
		XQDTCommonTree tree;
		@Override
		public XQDTCommonTree getTree() { return tree; }
	};


	// $ANTLR start "p_DirAttributeValue"
	// XQueryParser.g:952:1: p_DirAttributeValue : ( ( QUOT ( ESCAPE_QUOT | APOS | p_QuotAttrValueContent )* QUOT ) -> ^( DirAttributeValue ( p_QuotAttrValueContent )* ) | ( APOS ( ESCAPE_APOS | QUOT | p_AposAttrValueContent )* APOS ) -> ^( DirAttributeValue ( p_AposAttrValueContent )* ) );
	public final XQueryParser.p_DirAttributeValue_return p_DirAttributeValue() throws RecognitionException {
		XQueryParser.p_DirAttributeValue_return retval = new XQueryParser.p_DirAttributeValue_return();
		retval.start = input.LT(1);

		XQDTCommonTree root_0 = null;

		CommonToken QUOT406=null;
		CommonToken ESCAPE_QUOT407=null;
		CommonToken APOS408=null;
		CommonToken QUOT410=null;
		CommonToken APOS411=null;
		CommonToken ESCAPE_APOS412=null;
		CommonToken QUOT413=null;
		CommonToken APOS415=null;
		ParserRuleReturnScope p_QuotAttrValueContent409 =null;
		ParserRuleReturnScope p_AposAttrValueContent414 =null;

		XQDTCommonTree QUOT406_tree=null;
		XQDTCommonTree ESCAPE_QUOT407_tree=null;
		XQDTCommonTree APOS408_tree=null;
		XQDTCommonTree QUOT410_tree=null;
		XQDTCommonTree APOS411_tree=null;
		XQDTCommonTree ESCAPE_APOS412_tree=null;
		XQDTCommonTree QUOT413_tree=null;
		XQDTCommonTree APOS415_tree=null;
		RewriteRuleTokenStream stream_ESCAPE_QUOT=new RewriteRuleTokenStream(adaptor,"token ESCAPE_QUOT");
		RewriteRuleTokenStream stream_APOS=new RewriteRuleTokenStream(adaptor,"token APOS");
		RewriteRuleTokenStream stream_ESCAPE_APOS=new RewriteRuleTokenStream(adaptor,"token ESCAPE_APOS");
		RewriteRuleTokenStream stream_QUOT=new RewriteRuleTokenStream(adaptor,"token QUOT");
		RewriteRuleSubtreeStream stream_p_QuotAttrValueContent=new RewriteRuleSubtreeStream(adaptor,"rule p_QuotAttrValueContent");
		RewriteRuleSubtreeStream stream_p_AposAttrValueContent=new RewriteRuleSubtreeStream(adaptor,"rule p_AposAttrValueContent");

		try {
			// XQueryParser.g:953:9: ( ( QUOT ( ESCAPE_QUOT | APOS | p_QuotAttrValueContent )* QUOT ) -> ^( DirAttributeValue ( p_QuotAttrValueContent )* ) | ( APOS ( ESCAPE_APOS | QUOT | p_AposAttrValueContent )* APOS ) -> ^( DirAttributeValue ( p_AposAttrValueContent )* ) )
			int alt148=2;
			int LA148_0 = input.LA(1);
			if ( (LA148_0==QUOT) ) {
				alt148=1;
			}
			else if ( (LA148_0==APOS) ) {
				alt148=2;
			}

			else {
				if (state.backtracking>0) {state.failed=true; return retval;}
				NoViableAltException nvae =
					new NoViableAltException("", 148, 0, input);
				throw nvae;
			}

			switch (alt148) {
				case 1 :
					// XQueryParser.g:953:11: ( QUOT ( ESCAPE_QUOT | APOS | p_QuotAttrValueContent )* QUOT )
					{
					// XQueryParser.g:953:11: ( QUOT ( ESCAPE_QUOT | APOS | p_QuotAttrValueContent )* QUOT )
					// XQueryParser.g:953:12: QUOT ( ESCAPE_QUOT | APOS | p_QuotAttrValueContent )* QUOT
					{
					QUOT406=(CommonToken)match(input,QUOT,FOLLOW_QUOT_in_p_DirAttributeValue8229); if (state.failed) return retval; 
					if ( state.backtracking==0 ) stream_QUOT.add(QUOT406);

					// XQueryParser.g:953:17: ( ESCAPE_QUOT | APOS | p_QuotAttrValueContent )*
					loop146:
					while (true) {
						int alt146=4;
						switch ( input.LA(1) ) {
						case ESCAPE_QUOT:
							{
							alt146=1;
							}
							break;
						case APOS:
							{
							alt146=2;
							}
							break;
						case ESCAPE_LBRACKET:
						case ESCAPE_RBRACKET:
						case LBRACKET:
						case L_CharRef:
						case L_PredefinedEntityRef:
						case L_QuotAttrContentChar:
							{
							alt146=3;
							}
							break;
						}
						switch (alt146) {
						case 1 :
							// XQueryParser.g:953:18: ESCAPE_QUOT
							{
							ESCAPE_QUOT407=(CommonToken)match(input,ESCAPE_QUOT,FOLLOW_ESCAPE_QUOT_in_p_DirAttributeValue8232); if (state.failed) return retval; 
							if ( state.backtracking==0 ) stream_ESCAPE_QUOT.add(ESCAPE_QUOT407);

							}
							break;
						case 2 :
							// XQueryParser.g:953:32: APOS
							{
							APOS408=(CommonToken)match(input,APOS,FOLLOW_APOS_in_p_DirAttributeValue8236); if (state.failed) return retval; 
							if ( state.backtracking==0 ) stream_APOS.add(APOS408);

							}
							break;
						case 3 :
							// XQueryParser.g:953:39: p_QuotAttrValueContent
							{
							pushFollow(FOLLOW_p_QuotAttrValueContent_in_p_DirAttributeValue8240);
							p_QuotAttrValueContent409=p_QuotAttrValueContent();
							state._fsp--;
							if (state.failed) return retval;
							if ( state.backtracking==0 ) stream_p_QuotAttrValueContent.add(p_QuotAttrValueContent409.getTree());
							}
							break;

						default :
							break loop146;
						}
					}

					QUOT410=(CommonToken)match(input,QUOT,FOLLOW_QUOT_in_p_DirAttributeValue8244); if (state.failed) return retval; 
					if ( state.backtracking==0 ) stream_QUOT.add(QUOT410);

					}

					// AST REWRITE
					// elements: p_QuotAttrValueContent
					// token labels: 
					// rule labels: retval
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					if ( state.backtracking==0 ) {
					retval.tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.getTree():null);

					root_0 = (XQDTCommonTree)adaptor.nil();
					// 954:17: -> ^( DirAttributeValue ( p_QuotAttrValueContent )* )
					{
						// XQueryParser.g:954:20: ^( DirAttributeValue ( p_QuotAttrValueContent )* )
						{
						XQDTCommonTree root_1 = (XQDTCommonTree)adaptor.nil();
						root_1 = (XQDTCommonTree)adaptor.becomeRoot((XQDTCommonTree)adaptor.create(DirAttributeValue, "DirAttributeValue"), root_1);
						// XQueryParser.g:954:40: ( p_QuotAttrValueContent )*
						while ( stream_p_QuotAttrValueContent.hasNext() ) {
							adaptor.addChild(root_1, stream_p_QuotAttrValueContent.nextTree());
						}
						stream_p_QuotAttrValueContent.reset();

						adaptor.addChild(root_0, root_1);
						}

					}


					retval.tree = root_0;
					}

					}
					break;
				case 2 :
					// XQueryParser.g:955:11: ( APOS ( ESCAPE_APOS | QUOT | p_AposAttrValueContent )* APOS )
					{
					// XQueryParser.g:955:11: ( APOS ( ESCAPE_APOS | QUOT | p_AposAttrValueContent )* APOS )
					// XQueryParser.g:955:12: APOS ( ESCAPE_APOS | QUOT | p_AposAttrValueContent )* APOS
					{
					APOS411=(CommonToken)match(input,APOS,FOLLOW_APOS_in_p_DirAttributeValue8283); if (state.failed) return retval; 
					if ( state.backtracking==0 ) stream_APOS.add(APOS411);

					// XQueryParser.g:955:17: ( ESCAPE_APOS | QUOT | p_AposAttrValueContent )*
					loop147:
					while (true) {
						int alt147=4;
						switch ( input.LA(1) ) {
						case ESCAPE_APOS:
							{
							alt147=1;
							}
							break;
						case QUOT:
							{
							alt147=2;
							}
							break;
						case ESCAPE_LBRACKET:
						case ESCAPE_RBRACKET:
						case LBRACKET:
						case L_AposAttrContentChar:
						case L_CharRef:
						case L_PredefinedEntityRef:
							{
							alt147=3;
							}
							break;
						}
						switch (alt147) {
						case 1 :
							// XQueryParser.g:955:18: ESCAPE_APOS
							{
							ESCAPE_APOS412=(CommonToken)match(input,ESCAPE_APOS,FOLLOW_ESCAPE_APOS_in_p_DirAttributeValue8286); if (state.failed) return retval; 
							if ( state.backtracking==0 ) stream_ESCAPE_APOS.add(ESCAPE_APOS412);

							}
							break;
						case 2 :
							// XQueryParser.g:955:32: QUOT
							{
							QUOT413=(CommonToken)match(input,QUOT,FOLLOW_QUOT_in_p_DirAttributeValue8290); if (state.failed) return retval; 
							if ( state.backtracking==0 ) stream_QUOT.add(QUOT413);

							}
							break;
						case 3 :
							// XQueryParser.g:955:39: p_AposAttrValueContent
							{
							pushFollow(FOLLOW_p_AposAttrValueContent_in_p_DirAttributeValue8294);
							p_AposAttrValueContent414=p_AposAttrValueContent();
							state._fsp--;
							if (state.failed) return retval;
							if ( state.backtracking==0 ) stream_p_AposAttrValueContent.add(p_AposAttrValueContent414.getTree());
							}
							break;

						default :
							break loop147;
						}
					}

					APOS415=(CommonToken)match(input,APOS,FOLLOW_APOS_in_p_DirAttributeValue8298); if (state.failed) return retval; 
					if ( state.backtracking==0 ) stream_APOS.add(APOS415);

					}

					// AST REWRITE
					// elements: p_AposAttrValueContent
					// token labels: 
					// rule labels: retval
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					if ( state.backtracking==0 ) {
					retval.tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.getTree():null);

					root_0 = (XQDTCommonTree)adaptor.nil();
					// 956:17: -> ^( DirAttributeValue ( p_AposAttrValueContent )* )
					{
						// XQueryParser.g:956:20: ^( DirAttributeValue ( p_AposAttrValueContent )* )
						{
						XQDTCommonTree root_1 = (XQDTCommonTree)adaptor.nil();
						root_1 = (XQDTCommonTree)adaptor.becomeRoot((XQDTCommonTree)adaptor.create(DirAttributeValue, "DirAttributeValue"), root_1);
						// XQueryParser.g:956:40: ( p_AposAttrValueContent )*
						while ( stream_p_AposAttrValueContent.hasNext() ) {
							adaptor.addChild(root_1, stream_p_AposAttrValueContent.nextTree());
						}
						stream_p_AposAttrValueContent.reset();

						adaptor.addChild(root_0, root_1);
						}

					}


					retval.tree = root_0;
					}

					}
					break;

			}
			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (XQDTCommonTree)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
			retval.tree = (XQDTCommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "p_DirAttributeValue"


	public static class p_QuotAttrValueContent_return extends ParserRuleReturnScope {
		XQDTCommonTree tree;
		@Override
		public XQDTCommonTree getTree() { return tree; }
	};


	// $ANTLR start "p_QuotAttrValueContent"
	// XQueryParser.g:960:1: p_QuotAttrValueContent : ( p_QuotAttrContentChar | pm_CommonContent );
	public final XQueryParser.p_QuotAttrValueContent_return p_QuotAttrValueContent() throws RecognitionException {
		XQueryParser.p_QuotAttrValueContent_return retval = new XQueryParser.p_QuotAttrValueContent_return();
		retval.start = input.LT(1);

		XQDTCommonTree root_0 = null;

		ParserRuleReturnScope p_QuotAttrContentChar416 =null;
		ParserRuleReturnScope pm_CommonContent417 =null;


		try {
			// XQueryParser.g:961:9: ( p_QuotAttrContentChar | pm_CommonContent )
			int alt149=2;
			int LA149_0 = input.LA(1);
			if ( (LA149_0==L_QuotAttrContentChar) ) {
				alt149=1;
			}
			else if ( (LA149_0==ESCAPE_LBRACKET||LA149_0==ESCAPE_RBRACKET||LA149_0==LBRACKET||LA149_0==L_CharRef||LA149_0==L_PredefinedEntityRef) ) {
				alt149=2;
			}

			else {
				if (state.backtracking>0) {state.failed=true; return retval;}
				NoViableAltException nvae =
					new NoViableAltException("", 149, 0, input);
				throw nvae;
			}

			switch (alt149) {
				case 1 :
					// XQueryParser.g:961:11: p_QuotAttrContentChar
					{
					root_0 = (XQDTCommonTree)adaptor.nil();


					pushFollow(FOLLOW_p_QuotAttrContentChar_in_p_QuotAttrValueContent8350);
					p_QuotAttrContentChar416=p_QuotAttrContentChar();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, p_QuotAttrContentChar416.getTree());

					}
					break;
				case 2 :
					// XQueryParser.g:961:35: pm_CommonContent
					{
					root_0 = (XQDTCommonTree)adaptor.nil();


					pushFollow(FOLLOW_pm_CommonContent_in_p_QuotAttrValueContent8354);
					pm_CommonContent417=pm_CommonContent();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, pm_CommonContent417.getTree());

					}
					break;

			}
			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (XQDTCommonTree)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
			retval.tree = (XQDTCommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "p_QuotAttrValueContent"


	public static class p_AposAttrValueContent_return extends ParserRuleReturnScope {
		XQDTCommonTree tree;
		@Override
		public XQDTCommonTree getTree() { return tree; }
	};


	// $ANTLR start "p_AposAttrValueContent"
	// XQueryParser.g:965:1: p_AposAttrValueContent : ( p_AposAttrContentChar | pm_CommonContent );
	public final XQueryParser.p_AposAttrValueContent_return p_AposAttrValueContent() throws RecognitionException {
		XQueryParser.p_AposAttrValueContent_return retval = new XQueryParser.p_AposAttrValueContent_return();
		retval.start = input.LT(1);

		XQDTCommonTree root_0 = null;

		ParserRuleReturnScope p_AposAttrContentChar418 =null;
		ParserRuleReturnScope pm_CommonContent419 =null;


		try {
			// XQueryParser.g:966:9: ( p_AposAttrContentChar | pm_CommonContent )
			int alt150=2;
			int LA150_0 = input.LA(1);
			if ( (LA150_0==L_AposAttrContentChar) ) {
				alt150=1;
			}
			else if ( (LA150_0==ESCAPE_LBRACKET||LA150_0==ESCAPE_RBRACKET||LA150_0==LBRACKET||LA150_0==L_CharRef||LA150_0==L_PredefinedEntityRef) ) {
				alt150=2;
			}

			else {
				if (state.backtracking>0) {state.failed=true; return retval;}
				NoViableAltException nvae =
					new NoViableAltException("", 150, 0, input);
				throw nvae;
			}

			switch (alt150) {
				case 1 :
					// XQueryParser.g:966:11: p_AposAttrContentChar
					{
					root_0 = (XQDTCommonTree)adaptor.nil();


					pushFollow(FOLLOW_p_AposAttrContentChar_in_p_AposAttrValueContent8380);
					p_AposAttrContentChar418=p_AposAttrContentChar();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, p_AposAttrContentChar418.getTree());

					}
					break;
				case 2 :
					// XQueryParser.g:966:35: pm_CommonContent
					{
					root_0 = (XQDTCommonTree)adaptor.nil();


					pushFollow(FOLLOW_pm_CommonContent_in_p_AposAttrValueContent8384);
					pm_CommonContent419=pm_CommonContent();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, pm_CommonContent419.getTree());

					}
					break;

			}
			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (XQDTCommonTree)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
			retval.tree = (XQDTCommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "p_AposAttrValueContent"


	public static class pm_DirElemContent_return extends ParserRuleReturnScope {
		XQDTCommonTree tree;
		@Override
		public XQDTCommonTree getTree() { return tree; }
	};


	// $ANTLR start "pm_DirElemContent"
	// XQueryParser.g:970:1: pm_DirElemContent : ( p_DirectConstructor | p_CDataSection | pm_CommonContent | p_ElementContentChar );
	public final XQueryParser.pm_DirElemContent_return pm_DirElemContent() throws RecognitionException {
		XQueryParser.pm_DirElemContent_return retval = new XQueryParser.pm_DirElemContent_return();
		retval.start = input.LT(1);

		XQDTCommonTree root_0 = null;

		ParserRuleReturnScope p_DirectConstructor420 =null;
		ParserRuleReturnScope p_CDataSection421 =null;
		ParserRuleReturnScope pm_CommonContent422 =null;
		ParserRuleReturnScope p_ElementContentChar423 =null;


		try {
			// XQueryParser.g:971:9: ( p_DirectConstructor | p_CDataSection | pm_CommonContent | p_ElementContentChar )
			int alt151=4;
			switch ( input.LA(1) ) {
			case L_DirCommentConstructor:
			case L_DirPIConstructor:
			case SMALLER:
				{
				alt151=1;
				}
				break;
			case L_CDataSection:
				{
				alt151=2;
				}
				break;
			case ESCAPE_LBRACKET:
			case ESCAPE_RBRACKET:
			case LBRACKET:
			case L_CharRef:
			case L_PredefinedEntityRef:
				{
				alt151=3;
				}
				break;
			case L_ElementContentChar:
				{
				alt151=4;
				}
				break;
			default:
				if (state.backtracking>0) {state.failed=true; return retval;}
				NoViableAltException nvae =
					new NoViableAltException("", 151, 0, input);
				throw nvae;
			}
			switch (alt151) {
				case 1 :
					// XQueryParser.g:971:11: p_DirectConstructor
					{
					root_0 = (XQDTCommonTree)adaptor.nil();


					pushFollow(FOLLOW_p_DirectConstructor_in_pm_DirElemContent8410);
					p_DirectConstructor420=p_DirectConstructor();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, p_DirectConstructor420.getTree());

					}
					break;
				case 2 :
					// XQueryParser.g:972:11: p_CDataSection
					{
					root_0 = (XQDTCommonTree)adaptor.nil();


					pushFollow(FOLLOW_p_CDataSection_in_pm_DirElemContent8422);
					p_CDataSection421=p_CDataSection();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, p_CDataSection421.getTree());

					}
					break;
				case 3 :
					// XQueryParser.g:973:11: pm_CommonContent
					{
					root_0 = (XQDTCommonTree)adaptor.nil();


					pushFollow(FOLLOW_pm_CommonContent_in_pm_DirElemContent8434);
					pm_CommonContent422=pm_CommonContent();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, pm_CommonContent422.getTree());

					}
					break;
				case 4 :
					// XQueryParser.g:974:11: p_ElementContentChar
					{
					root_0 = (XQDTCommonTree)adaptor.nil();


					pushFollow(FOLLOW_p_ElementContentChar_in_pm_DirElemContent8446);
					p_ElementContentChar423=p_ElementContentChar();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, p_ElementContentChar423.getTree());

					}
					break;

			}
			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (XQDTCommonTree)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
			retval.tree = (XQDTCommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "pm_DirElemContent"


	public static class pm_CommonContent_return extends ParserRuleReturnScope {
		XQDTCommonTree tree;
		@Override
		public XQDTCommonTree getTree() { return tree; }
	};


	// $ANTLR start "pm_CommonContent"
	// XQueryParser.g:980:1: pm_CommonContent : ( L_PredefinedEntityRef | L_CharRef | ESCAPE_LBRACKET | ESCAPE_RBRACKET | pg_EnclosedExprXml );
	public final XQueryParser.pm_CommonContent_return pm_CommonContent() throws RecognitionException {
		XQueryParser.pm_CommonContent_return retval = new XQueryParser.pm_CommonContent_return();
		retval.start = input.LT(1);

		XQDTCommonTree root_0 = null;

		CommonToken L_PredefinedEntityRef424=null;
		CommonToken L_CharRef425=null;
		CommonToken ESCAPE_LBRACKET426=null;
		CommonToken ESCAPE_RBRACKET427=null;
		ParserRuleReturnScope pg_EnclosedExprXml428 =null;

		XQDTCommonTree L_PredefinedEntityRef424_tree=null;
		XQDTCommonTree L_CharRef425_tree=null;
		XQDTCommonTree ESCAPE_LBRACKET426_tree=null;
		XQDTCommonTree ESCAPE_RBRACKET427_tree=null;

		try {
			// XQueryParser.g:981:9: ( L_PredefinedEntityRef | L_CharRef | ESCAPE_LBRACKET | ESCAPE_RBRACKET | pg_EnclosedExprXml )
			int alt152=5;
			switch ( input.LA(1) ) {
			case L_PredefinedEntityRef:
				{
				alt152=1;
				}
				break;
			case L_CharRef:
				{
				alt152=2;
				}
				break;
			case ESCAPE_LBRACKET:
				{
				alt152=3;
				}
				break;
			case ESCAPE_RBRACKET:
				{
				alt152=4;
				}
				break;
			case LBRACKET:
				{
				alt152=5;
				}
				break;
			default:
				if (state.backtracking>0) {state.failed=true; return retval;}
				NoViableAltException nvae =
					new NoViableAltException("", 152, 0, input);
				throw nvae;
			}
			switch (alt152) {
				case 1 :
					// XQueryParser.g:981:11: L_PredefinedEntityRef
					{
					root_0 = (XQDTCommonTree)adaptor.nil();


					L_PredefinedEntityRef424=(CommonToken)match(input,L_PredefinedEntityRef,FOLLOW_L_PredefinedEntityRef_in_pm_CommonContent8474); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					L_PredefinedEntityRef424_tree = (XQDTCommonTree)adaptor.create(L_PredefinedEntityRef424);
					adaptor.addChild(root_0, L_PredefinedEntityRef424_tree);
					}

					}
					break;
				case 2 :
					// XQueryParser.g:982:11: L_CharRef
					{
					root_0 = (XQDTCommonTree)adaptor.nil();


					L_CharRef425=(CommonToken)match(input,L_CharRef,FOLLOW_L_CharRef_in_pm_CommonContent8486); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					L_CharRef425_tree = (XQDTCommonTree)adaptor.create(L_CharRef425);
					adaptor.addChild(root_0, L_CharRef425_tree);
					}

					}
					break;
				case 3 :
					// XQueryParser.g:983:11: ESCAPE_LBRACKET
					{
					root_0 = (XQDTCommonTree)adaptor.nil();


					ESCAPE_LBRACKET426=(CommonToken)match(input,ESCAPE_LBRACKET,FOLLOW_ESCAPE_LBRACKET_in_pm_CommonContent8498); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					ESCAPE_LBRACKET426_tree = (XQDTCommonTree)adaptor.create(ESCAPE_LBRACKET426);
					adaptor.addChild(root_0, ESCAPE_LBRACKET426_tree);
					}

					}
					break;
				case 4 :
					// XQueryParser.g:984:11: ESCAPE_RBRACKET
					{
					root_0 = (XQDTCommonTree)adaptor.nil();


					ESCAPE_RBRACKET427=(CommonToken)match(input,ESCAPE_RBRACKET,FOLLOW_ESCAPE_RBRACKET_in_pm_CommonContent8510); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					ESCAPE_RBRACKET427_tree = (XQDTCommonTree)adaptor.create(ESCAPE_RBRACKET427);
					adaptor.addChild(root_0, ESCAPE_RBRACKET427_tree);
					}

					}
					break;
				case 5 :
					// XQueryParser.g:985:11: pg_EnclosedExprXml
					{
					root_0 = (XQDTCommonTree)adaptor.nil();


					pushFollow(FOLLOW_pg_EnclosedExprXml_in_pm_CommonContent8522);
					pg_EnclosedExprXml428=pg_EnclosedExprXml();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, pg_EnclosedExprXml428.getTree());

					}
					break;

			}
			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (XQDTCommonTree)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
			retval.tree = (XQDTCommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "pm_CommonContent"


	public static class pg_EnclosedExprXml_return extends ParserRuleReturnScope {
		XQDTCommonTree tree;
		@Override
		public XQDTCommonTree getTree() { return tree; }
	};


	// $ANTLR start "pg_EnclosedExprXml"
	// XQueryParser.g:993:1: pg_EnclosedExprXml : LBRACKET p_StatementsAndOptionalExpr RBRACKET ;
	public final XQueryParser.pg_EnclosedExprXml_return pg_EnclosedExprXml() throws RecognitionException {
		XQueryParser.pg_EnclosedExprXml_return retval = new XQueryParser.pg_EnclosedExprXml_return();
		retval.start = input.LT(1);

		XQDTCommonTree root_0 = null;

		CommonToken LBRACKET429=null;
		CommonToken RBRACKET431=null;
		ParserRuleReturnScope p_StatementsAndOptionalExpr430 =null;

		XQDTCommonTree LBRACKET429_tree=null;
		XQDTCommonTree RBRACKET431_tree=null;

		try {
			// XQueryParser.g:994:9: ( LBRACKET p_StatementsAndOptionalExpr RBRACKET )
			// XQueryParser.g:994:13: LBRACKET p_StatementsAndOptionalExpr RBRACKET
			{
			root_0 = (XQDTCommonTree)adaptor.nil();


			LBRACKET429=(CommonToken)match(input,LBRACKET,FOLLOW_LBRACKET_in_pg_EnclosedExprXml8554); if (state.failed) return retval;
			if ( state.backtracking==0 ) {
			LBRACKET429_tree = (XQDTCommonTree)adaptor.create(LBRACKET429);
			adaptor.addChild(root_0, LBRACKET429_tree);
			}

			if ( state.backtracking==0 ) {pushXQueryLexer();}
			pushFollow(FOLLOW_p_StatementsAndOptionalExpr_in_pg_EnclosedExprXml8570);
			p_StatementsAndOptionalExpr430=p_StatementsAndOptionalExpr();
			state._fsp--;
			if (state.failed) return retval;
			if ( state.backtracking==0 ) adaptor.addChild(root_0, p_StatementsAndOptionalExpr430.getTree());

			RBRACKET431=(CommonToken)match(input,RBRACKET,FOLLOW_RBRACKET_in_pg_EnclosedExprXml8584); if (state.failed) return retval;
			if ( state.backtracking==0 ) {
			RBRACKET431_tree = (XQDTCommonTree)adaptor.create(RBRACKET431);
			adaptor.addChild(root_0, RBRACKET431_tree);
			}

			if ( state.backtracking==0 ) {popLexer();}
			}

			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (XQDTCommonTree)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
			retval.tree = (XQDTCommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "pg_EnclosedExprXml"


	public static class p_DirCommentConstructor_return extends ParserRuleReturnScope {
		XQDTCommonTree tree;
		@Override
		public XQDTCommonTree getTree() { return tree; }
	};


	// $ANTLR start "p_DirCommentConstructor"
	// XQueryParser.g:1001:1: p_DirCommentConstructor : L_DirCommentConstructor ;
	public final XQueryParser.p_DirCommentConstructor_return p_DirCommentConstructor() throws RecognitionException {
		XQueryParser.p_DirCommentConstructor_return retval = new XQueryParser.p_DirCommentConstructor_return();
		retval.start = input.LT(1);

		XQDTCommonTree root_0 = null;

		CommonToken L_DirCommentConstructor432=null;

		XQDTCommonTree L_DirCommentConstructor432_tree=null;

		try {
			// XQueryParser.g:1002:9: ( L_DirCommentConstructor )
			// XQueryParser.g:1002:11: L_DirCommentConstructor
			{
			root_0 = (XQDTCommonTree)adaptor.nil();


			L_DirCommentConstructor432=(CommonToken)match(input,L_DirCommentConstructor,FOLLOW_L_DirCommentConstructor_in_p_DirCommentConstructor8613); if (state.failed) return retval;
			if ( state.backtracking==0 ) {
			L_DirCommentConstructor432_tree = (XQDTCommonTree)adaptor.create(L_DirCommentConstructor432);
			adaptor.addChild(root_0, L_DirCommentConstructor432_tree);
			}

			}

			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (XQDTCommonTree)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
			retval.tree = (XQDTCommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "p_DirCommentConstructor"


	public static class p_DirPIConstructor_return extends ParserRuleReturnScope {
		XQDTCommonTree tree;
		@Override
		public XQDTCommonTree getTree() { return tree; }
	};


	// $ANTLR start "p_DirPIConstructor"
	// XQueryParser.g:1009:1: p_DirPIConstructor : L_DirPIConstructor ;
	public final XQueryParser.p_DirPIConstructor_return p_DirPIConstructor() throws RecognitionException {
		XQueryParser.p_DirPIConstructor_return retval = new XQueryParser.p_DirPIConstructor_return();
		retval.start = input.LT(1);

		XQDTCommonTree root_0 = null;

		CommonToken L_DirPIConstructor433=null;

		XQDTCommonTree L_DirPIConstructor433_tree=null;

		try {
			// XQueryParser.g:1010:9: ( L_DirPIConstructor )
			// XQueryParser.g:1010:11: L_DirPIConstructor
			{
			root_0 = (XQDTCommonTree)adaptor.nil();


			L_DirPIConstructor433=(CommonToken)match(input,L_DirPIConstructor,FOLLOW_L_DirPIConstructor_in_p_DirPIConstructor8645); if (state.failed) return retval;
			if ( state.backtracking==0 ) {
			L_DirPIConstructor433_tree = (XQDTCommonTree)adaptor.create(L_DirPIConstructor433);
			adaptor.addChild(root_0, L_DirPIConstructor433_tree);
			}

			}

			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (XQDTCommonTree)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
			retval.tree = (XQDTCommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "p_DirPIConstructor"


	public static class p_CDataSection_return extends ParserRuleReturnScope {
		XQDTCommonTree tree;
		@Override
		public XQDTCommonTree getTree() { return tree; }
	};


	// $ANTLR start "p_CDataSection"
	// XQueryParser.g:1017:1: p_CDataSection : L_CDataSection ;
	public final XQueryParser.p_CDataSection_return p_CDataSection() throws RecognitionException {
		XQueryParser.p_CDataSection_return retval = new XQueryParser.p_CDataSection_return();
		retval.start = input.LT(1);

		XQDTCommonTree root_0 = null;

		CommonToken L_CDataSection434=null;

		XQDTCommonTree L_CDataSection434_tree=null;

		try {
			// XQueryParser.g:1018:9: ( L_CDataSection )
			// XQueryParser.g:1018:11: L_CDataSection
			{
			root_0 = (XQDTCommonTree)adaptor.nil();


			L_CDataSection434=(CommonToken)match(input,L_CDataSection,FOLLOW_L_CDataSection_in_p_CDataSection8678); if (state.failed) return retval;
			if ( state.backtracking==0 ) {
			L_CDataSection434_tree = (XQDTCommonTree)adaptor.create(L_CDataSection434);
			adaptor.addChild(root_0, L_CDataSection434_tree);
			}

			}

			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (XQDTCommonTree)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
			retval.tree = (XQDTCommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "p_CDataSection"


	public static class p_ComputedConstructor_return extends ParserRuleReturnScope {
		XQDTCommonTree tree;
		@Override
		public XQDTCommonTree getTree() { return tree; }
	};


	// $ANTLR start "p_ComputedConstructor"
	// XQueryParser.g:1025:1: p_ComputedConstructor : ( pm_CompDocConstructor | pm_CompElemConstructor | pm_CompAttrConstructor | p_CompNamespaceConstructor | p_CompTextConstructor | pm_CompCommentConstructor | pm_CompPIConstructor |{...}? => p_CompBinaryConstructor );
	public final XQueryParser.p_ComputedConstructor_return p_ComputedConstructor() throws RecognitionException {
		XQueryParser.p_ComputedConstructor_return retval = new XQueryParser.p_ComputedConstructor_return();
		retval.start = input.LT(1);

		XQDTCommonTree root_0 = null;

		ParserRuleReturnScope pm_CompDocConstructor435 =null;
		ParserRuleReturnScope pm_CompElemConstructor436 =null;
		ParserRuleReturnScope pm_CompAttrConstructor437 =null;
		ParserRuleReturnScope p_CompNamespaceConstructor438 =null;
		ParserRuleReturnScope p_CompTextConstructor439 =null;
		ParserRuleReturnScope pm_CompCommentConstructor440 =null;
		ParserRuleReturnScope pm_CompPIConstructor441 =null;
		ParserRuleReturnScope p_CompBinaryConstructor442 =null;


		try {
			// XQueryParser.g:1026:9: ( pm_CompDocConstructor | pm_CompElemConstructor | pm_CompAttrConstructor | p_CompNamespaceConstructor | p_CompTextConstructor | pm_CompCommentConstructor | pm_CompPIConstructor |{...}? => p_CompBinaryConstructor )
			int alt153=8;
			int LA153_0 = input.LA(1);
			if ( (LA153_0==DOCUMENT) ) {
				alt153=1;
			}
			else if ( (LA153_0==ELEMENT) ) {
				alt153=2;
			}
			else if ( (LA153_0==ATTRIBUTE) ) {
				alt153=3;
			}
			else if ( (LA153_0==NAMESPACE) ) {
				alt153=4;
			}
			else if ( (LA153_0==TEXT) ) {
				alt153=5;
			}
			else if ( (LA153_0==COMMENT) ) {
				alt153=6;
			}
			else if ( (LA153_0==PROCESSING_INSTRUCTION) ) {
				alt153=7;
			}
			else if ( (LA153_0==BINARY) && ((lc(MLS)))) {
				alt153=8;
			}

			switch (alt153) {
				case 1 :
					// XQueryParser.g:1026:11: pm_CompDocConstructor
					{
					root_0 = (XQDTCommonTree)adaptor.nil();


					pushFollow(FOLLOW_pm_CompDocConstructor_in_p_ComputedConstructor8710);
					pm_CompDocConstructor435=pm_CompDocConstructor();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, pm_CompDocConstructor435.getTree());

					}
					break;
				case 2 :
					// XQueryParser.g:1027:11: pm_CompElemConstructor
					{
					root_0 = (XQDTCommonTree)adaptor.nil();


					pushFollow(FOLLOW_pm_CompElemConstructor_in_p_ComputedConstructor8722);
					pm_CompElemConstructor436=pm_CompElemConstructor();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, pm_CompElemConstructor436.getTree());

					}
					break;
				case 3 :
					// XQueryParser.g:1028:11: pm_CompAttrConstructor
					{
					root_0 = (XQDTCommonTree)adaptor.nil();


					pushFollow(FOLLOW_pm_CompAttrConstructor_in_p_ComputedConstructor8734);
					pm_CompAttrConstructor437=pm_CompAttrConstructor();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, pm_CompAttrConstructor437.getTree());

					}
					break;
				case 4 :
					// XQueryParser.g:1029:11: p_CompNamespaceConstructor
					{
					root_0 = (XQDTCommonTree)adaptor.nil();


					pushFollow(FOLLOW_p_CompNamespaceConstructor_in_p_ComputedConstructor8746);
					p_CompNamespaceConstructor438=p_CompNamespaceConstructor();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, p_CompNamespaceConstructor438.getTree());

					}
					break;
				case 5 :
					// XQueryParser.g:1030:11: p_CompTextConstructor
					{
					root_0 = (XQDTCommonTree)adaptor.nil();


					pushFollow(FOLLOW_p_CompTextConstructor_in_p_ComputedConstructor8758);
					p_CompTextConstructor439=p_CompTextConstructor();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, p_CompTextConstructor439.getTree());

					}
					break;
				case 6 :
					// XQueryParser.g:1031:11: pm_CompCommentConstructor
					{
					root_0 = (XQDTCommonTree)adaptor.nil();


					pushFollow(FOLLOW_pm_CompCommentConstructor_in_p_ComputedConstructor8770);
					pm_CompCommentConstructor440=pm_CompCommentConstructor();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, pm_CompCommentConstructor440.getTree());

					}
					break;
				case 7 :
					// XQueryParser.g:1032:11: pm_CompPIConstructor
					{
					root_0 = (XQDTCommonTree)adaptor.nil();


					pushFollow(FOLLOW_pm_CompPIConstructor_in_p_ComputedConstructor8782);
					pm_CompPIConstructor441=pm_CompPIConstructor();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, pm_CompPIConstructor441.getTree());

					}
					break;
				case 8 :
					// XQueryParser.g:1033:11: {...}? => p_CompBinaryConstructor
					{
					root_0 = (XQDTCommonTree)adaptor.nil();


					if ( !((lc(MLS))) ) {
						if (state.backtracking>0) {state.failed=true; return retval;}
						throw new FailedPredicateException(input, "p_ComputedConstructor", "lc(MLS)");
					}
					pushFollow(FOLLOW_p_CompBinaryConstructor_in_p_ComputedConstructor8797);
					p_CompBinaryConstructor442=p_CompBinaryConstructor();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, p_CompBinaryConstructor442.getTree());

					}
					break;

			}
			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (XQDTCommonTree)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
			retval.tree = (XQDTCommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "p_ComputedConstructor"


	public static class pm_CompDocConstructor_return extends ParserRuleReturnScope {
		XQDTCommonTree tree;
		@Override
		public XQDTCommonTree getTree() { return tree; }
	};


	// $ANTLR start "pm_CompDocConstructor"
	// XQueryParser.g:1038:1: pm_CompDocConstructor : k= DOCUMENT LBRACKET p_StatementsAndOptionalExpr RBRACKET ;
	public final XQueryParser.pm_CompDocConstructor_return pm_CompDocConstructor() throws RecognitionException {
		XQueryParser.pm_CompDocConstructor_return retval = new XQueryParser.pm_CompDocConstructor_return();
		retval.start = input.LT(1);

		XQDTCommonTree root_0 = null;

		CommonToken k=null;
		CommonToken LBRACKET443=null;
		CommonToken RBRACKET445=null;
		ParserRuleReturnScope p_StatementsAndOptionalExpr444 =null;

		XQDTCommonTree k_tree=null;
		XQDTCommonTree LBRACKET443_tree=null;
		XQDTCommonTree RBRACKET445_tree=null;

		try {
			// XQueryParser.g:1039:9: (k= DOCUMENT LBRACKET p_StatementsAndOptionalExpr RBRACKET )
			// XQueryParser.g:1039:11: k= DOCUMENT LBRACKET p_StatementsAndOptionalExpr RBRACKET
			{
			root_0 = (XQDTCommonTree)adaptor.nil();


			k=(CommonToken)match(input,DOCUMENT,FOLLOW_DOCUMENT_in_pm_CompDocConstructor8826); if (state.failed) return retval;
			if ( state.backtracking==0 ) {
			k_tree = (XQDTCommonTree)adaptor.create(k);
			adaptor.addChild(root_0, k_tree);
			}

			if ( state.backtracking==0 ) {ak(k);}
			LBRACKET443=(CommonToken)match(input,LBRACKET,FOLLOW_LBRACKET_in_pm_CompDocConstructor8830); if (state.failed) return retval;
			if ( state.backtracking==0 ) {
			LBRACKET443_tree = (XQDTCommonTree)adaptor.create(LBRACKET443);
			adaptor.addChild(root_0, LBRACKET443_tree);
			}

			pushFollow(FOLLOW_p_StatementsAndOptionalExpr_in_pm_CompDocConstructor8832);
			p_StatementsAndOptionalExpr444=p_StatementsAndOptionalExpr();
			state._fsp--;
			if (state.failed) return retval;
			if ( state.backtracking==0 ) adaptor.addChild(root_0, p_StatementsAndOptionalExpr444.getTree());

			RBRACKET445=(CommonToken)match(input,RBRACKET,FOLLOW_RBRACKET_in_pm_CompDocConstructor8834); if (state.failed) return retval;
			if ( state.backtracking==0 ) {
			RBRACKET445_tree = (XQDTCommonTree)adaptor.create(RBRACKET445);
			adaptor.addChild(root_0, RBRACKET445_tree);
			}

			}

			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (XQDTCommonTree)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
			retval.tree = (XQDTCommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "pm_CompDocConstructor"


	public static class pm_CompElemConstructor_return extends ParserRuleReturnScope {
		XQDTCommonTree tree;
		@Override
		public XQDTCommonTree getTree() { return tree; }
	};


	// $ANTLR start "pm_CompElemConstructor"
	// XQueryParser.g:1043:1: pm_CompElemConstructor : k= ELEMENT ( p_QName | ( LBRACKET p_Expr[true,true] RBRACKET ) ) LBRACKET pm_ContentExpr RBRACKET ;
	public final XQueryParser.pm_CompElemConstructor_return pm_CompElemConstructor() throws RecognitionException {
		XQueryParser.pm_CompElemConstructor_return retval = new XQueryParser.pm_CompElemConstructor_return();
		retval.start = input.LT(1);

		XQDTCommonTree root_0 = null;

		CommonToken k=null;
		CommonToken LBRACKET447=null;
		CommonToken RBRACKET449=null;
		CommonToken LBRACKET450=null;
		CommonToken RBRACKET452=null;
		ParserRuleReturnScope p_QName446 =null;
		ParserRuleReturnScope p_Expr448 =null;
		ParserRuleReturnScope pm_ContentExpr451 =null;

		XQDTCommonTree k_tree=null;
		XQDTCommonTree LBRACKET447_tree=null;
		XQDTCommonTree RBRACKET449_tree=null;
		XQDTCommonTree LBRACKET450_tree=null;
		XQDTCommonTree RBRACKET452_tree=null;

		try {
			// XQueryParser.g:1044:9: (k= ELEMENT ( p_QName | ( LBRACKET p_Expr[true,true] RBRACKET ) ) LBRACKET pm_ContentExpr RBRACKET )
			// XQueryParser.g:1044:11: k= ELEMENT ( p_QName | ( LBRACKET p_Expr[true,true] RBRACKET ) ) LBRACKET pm_ContentExpr RBRACKET
			{
			root_0 = (XQDTCommonTree)adaptor.nil();


			k=(CommonToken)match(input,ELEMENT,FOLLOW_ELEMENT_in_pm_CompElemConstructor8870); if (state.failed) return retval;
			if ( state.backtracking==0 ) {
			k_tree = (XQDTCommonTree)adaptor.create(k);
			adaptor.addChild(root_0, k_tree);
			}

			if ( state.backtracking==0 ) {ak(k);}
			// XQueryParser.g:1044:31: ( p_QName | ( LBRACKET p_Expr[true,true] RBRACKET ) )
			int alt154=2;
			int LA154_0 = input.LA(1);
			if ( ((LA154_0 >= AFTER && LA154_0 <= ALLOWING)||(LA154_0 >= AMP_ER && LA154_0 <= AND)||LA154_0==ANY||(LA154_0 >= APOS_ER && LA154_0 <= ATTRIBUTE)||(LA154_0 >= BASE_URI && LA154_0 <= BINARY)||(LA154_0 >= BOUNDARY_SPACE && LA154_0 <= CATCH)||(LA154_0 >= CHECK && LA154_0 <= CHILD)||(LA154_0 >= COLLATION && LA154_0 <= COLLECTION)||LA154_0==COMMENT||(LA154_0 >= CONSTRAINT && LA154_0 <= DOCUMENT_NODE)||(LA154_0 >= ELEMENT && LA154_0 <= EMPTY)||(LA154_0 >= EMPTY_SEQUENCE && LA154_0 <= EQ)||(LA154_0 >= EVERY && LA154_0 <= GE)||(LA154_0 >= GREATEST && LA154_0 <= GT)||(LA154_0 >= IDIV && LA154_0 <= LAX)||(LA154_0 >= LE && LA154_0 <= LOWERCASE)||LA154_0==LT||LA154_0==L_NCName||(LA154_0 >= MINUS_SIGN && LA154_0 <= NAN)||(LA154_0 >= NE && LA154_0 <= NOT)||(LA154_0 >= NO_INHERIT && LA154_0 <= PHRASE)||(LA154_0 >= PRECEDING && LA154_0 <= PROCESSING_INSTRUCTION)||LA154_0==QUOT_ER||(LA154_0 >= RELATIONSHIP && LA154_0 <= REVALIDATION)||(LA154_0 >= SAME && LA154_0 <= SELF)||(LA154_0 >= SENSITIVE && LA154_0 <= SKIP)||LA154_0==SLIDING||(LA154_0 >= SOME && LA154_0 <= STABLE)||(LA154_0 >= START && LA154_0 <= STRIP)||(LA154_0 >= SWITCH && LA154_0 <= UNORDERED)||(LA154_0 >= UPPERCASE && LA154_0 <= VARIABLE)||(LA154_0 >= VERSION && LA154_0 <= WORDS)||(LA154_0 >= XQUERY && LA154_0 <= ZERO_DIGIT)||LA154_0==EXPLICITLY) ) {
				alt154=1;
			}
			else if ( (LA154_0==LBRACKET) ) {
				alt154=2;
			}

			else {
				if (state.backtracking>0) {state.failed=true; return retval;}
				NoViableAltException nvae =
					new NoViableAltException("", 154, 0, input);
				throw nvae;
			}

			switch (alt154) {
				case 1 :
					// XQueryParser.g:1044:32: p_QName
					{
					pushFollow(FOLLOW_p_QName_in_pm_CompElemConstructor8875);
					p_QName446=p_QName();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, p_QName446.getTree());

					}
					break;
				case 2 :
					// XQueryParser.g:1044:42: ( LBRACKET p_Expr[true,true] RBRACKET )
					{
					// XQueryParser.g:1044:42: ( LBRACKET p_Expr[true,true] RBRACKET )
					// XQueryParser.g:1044:43: LBRACKET p_Expr[true,true] RBRACKET
					{
					LBRACKET447=(CommonToken)match(input,LBRACKET,FOLLOW_LBRACKET_in_pm_CompElemConstructor8880); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					LBRACKET447_tree = (XQDTCommonTree)adaptor.create(LBRACKET447);
					adaptor.addChild(root_0, LBRACKET447_tree);
					}

					pushFollow(FOLLOW_p_Expr_in_pm_CompElemConstructor8882);
					p_Expr448=p_Expr(true, true);
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, p_Expr448.getTree());

					RBRACKET449=(CommonToken)match(input,RBRACKET,FOLLOW_RBRACKET_in_pm_CompElemConstructor8885); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					RBRACKET449_tree = (XQDTCommonTree)adaptor.create(RBRACKET449);
					adaptor.addChild(root_0, RBRACKET449_tree);
					}

					}

					}
					break;

			}

			LBRACKET450=(CommonToken)match(input,LBRACKET,FOLLOW_LBRACKET_in_pm_CompElemConstructor8889); if (state.failed) return retval;
			if ( state.backtracking==0 ) {
			LBRACKET450_tree = (XQDTCommonTree)adaptor.create(LBRACKET450);
			adaptor.addChild(root_0, LBRACKET450_tree);
			}

			pushFollow(FOLLOW_pm_ContentExpr_in_pm_CompElemConstructor8891);
			pm_ContentExpr451=pm_ContentExpr();
			state._fsp--;
			if (state.failed) return retval;
			if ( state.backtracking==0 ) adaptor.addChild(root_0, pm_ContentExpr451.getTree());

			RBRACKET452=(CommonToken)match(input,RBRACKET,FOLLOW_RBRACKET_in_pm_CompElemConstructor8893); if (state.failed) return retval;
			if ( state.backtracking==0 ) {
			RBRACKET452_tree = (XQDTCommonTree)adaptor.create(RBRACKET452);
			adaptor.addChild(root_0, RBRACKET452_tree);
			}

			}

			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (XQDTCommonTree)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
			retval.tree = (XQDTCommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "pm_CompElemConstructor"


	public static class pm_ContentExpr_return extends ParserRuleReturnScope {
		XQDTCommonTree tree;
		@Override
		public XQDTCommonTree getTree() { return tree; }
	};


	// $ANTLR start "pm_ContentExpr"
	// XQueryParser.g:1049:1: pm_ContentExpr : p_StatementsAndOptionalExpr ;
	public final XQueryParser.pm_ContentExpr_return pm_ContentExpr() throws RecognitionException {
		XQueryParser.pm_ContentExpr_return retval = new XQueryParser.pm_ContentExpr_return();
		retval.start = input.LT(1);

		XQDTCommonTree root_0 = null;

		ParserRuleReturnScope p_StatementsAndOptionalExpr453 =null;


		try {
			// XQueryParser.g:1050:9: ( p_StatementsAndOptionalExpr )
			// XQueryParser.g:1050:11: p_StatementsAndOptionalExpr
			{
			root_0 = (XQDTCommonTree)adaptor.nil();


			pushFollow(FOLLOW_p_StatementsAndOptionalExpr_in_pm_ContentExpr8920);
			p_StatementsAndOptionalExpr453=p_StatementsAndOptionalExpr();
			state._fsp--;
			if (state.failed) return retval;
			if ( state.backtracking==0 ) adaptor.addChild(root_0, p_StatementsAndOptionalExpr453.getTree());

			}

			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (XQDTCommonTree)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
			retval.tree = (XQDTCommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "pm_ContentExpr"


	public static class pm_CompAttrConstructor_return extends ParserRuleReturnScope {
		XQDTCommonTree tree;
		@Override
		public XQDTCommonTree getTree() { return tree; }
	};


	// $ANTLR start "pm_CompAttrConstructor"
	// XQueryParser.g:1055:1: pm_CompAttrConstructor : k= ATTRIBUTE ( p_QName | ( LBRACKET p_Expr[true,true] RBRACKET ) ) LBRACKET p_StatementsAndOptionalExpr RBRACKET ;
	public final XQueryParser.pm_CompAttrConstructor_return pm_CompAttrConstructor() throws RecognitionException {
		XQueryParser.pm_CompAttrConstructor_return retval = new XQueryParser.pm_CompAttrConstructor_return();
		retval.start = input.LT(1);

		XQDTCommonTree root_0 = null;

		CommonToken k=null;
		CommonToken LBRACKET455=null;
		CommonToken RBRACKET457=null;
		CommonToken LBRACKET458=null;
		CommonToken RBRACKET460=null;
		ParserRuleReturnScope p_QName454 =null;
		ParserRuleReturnScope p_Expr456 =null;
		ParserRuleReturnScope p_StatementsAndOptionalExpr459 =null;

		XQDTCommonTree k_tree=null;
		XQDTCommonTree LBRACKET455_tree=null;
		XQDTCommonTree RBRACKET457_tree=null;
		XQDTCommonTree LBRACKET458_tree=null;
		XQDTCommonTree RBRACKET460_tree=null;

		try {
			// XQueryParser.g:1056:9: (k= ATTRIBUTE ( p_QName | ( LBRACKET p_Expr[true,true] RBRACKET ) ) LBRACKET p_StatementsAndOptionalExpr RBRACKET )
			// XQueryParser.g:1056:11: k= ATTRIBUTE ( p_QName | ( LBRACKET p_Expr[true,true] RBRACKET ) ) LBRACKET p_StatementsAndOptionalExpr RBRACKET
			{
			root_0 = (XQDTCommonTree)adaptor.nil();


			k=(CommonToken)match(input,ATTRIBUTE,FOLLOW_ATTRIBUTE_in_pm_CompAttrConstructor8949); if (state.failed) return retval;
			if ( state.backtracking==0 ) {
			k_tree = (XQDTCommonTree)adaptor.create(k);
			adaptor.addChild(root_0, k_tree);
			}

			if ( state.backtracking==0 ) {ak(k);}
			// XQueryParser.g:1056:33: ( p_QName | ( LBRACKET p_Expr[true,true] RBRACKET ) )
			int alt155=2;
			int LA155_0 = input.LA(1);
			if ( ((LA155_0 >= AFTER && LA155_0 <= ALLOWING)||(LA155_0 >= AMP_ER && LA155_0 <= AND)||LA155_0==ANY||(LA155_0 >= APOS_ER && LA155_0 <= ATTRIBUTE)||(LA155_0 >= BASE_URI && LA155_0 <= BINARY)||(LA155_0 >= BOUNDARY_SPACE && LA155_0 <= CATCH)||(LA155_0 >= CHECK && LA155_0 <= CHILD)||(LA155_0 >= COLLATION && LA155_0 <= COLLECTION)||LA155_0==COMMENT||(LA155_0 >= CONSTRAINT && LA155_0 <= DOCUMENT_NODE)||(LA155_0 >= ELEMENT && LA155_0 <= EMPTY)||(LA155_0 >= EMPTY_SEQUENCE && LA155_0 <= EQ)||(LA155_0 >= EVERY && LA155_0 <= GE)||(LA155_0 >= GREATEST && LA155_0 <= GT)||(LA155_0 >= IDIV && LA155_0 <= LAX)||(LA155_0 >= LE && LA155_0 <= LOWERCASE)||LA155_0==LT||LA155_0==L_NCName||(LA155_0 >= MINUS_SIGN && LA155_0 <= NAN)||(LA155_0 >= NE && LA155_0 <= NOT)||(LA155_0 >= NO_INHERIT && LA155_0 <= PHRASE)||(LA155_0 >= PRECEDING && LA155_0 <= PROCESSING_INSTRUCTION)||LA155_0==QUOT_ER||(LA155_0 >= RELATIONSHIP && LA155_0 <= REVALIDATION)||(LA155_0 >= SAME && LA155_0 <= SELF)||(LA155_0 >= SENSITIVE && LA155_0 <= SKIP)||LA155_0==SLIDING||(LA155_0 >= SOME && LA155_0 <= STABLE)||(LA155_0 >= START && LA155_0 <= STRIP)||(LA155_0 >= SWITCH && LA155_0 <= UNORDERED)||(LA155_0 >= UPPERCASE && LA155_0 <= VARIABLE)||(LA155_0 >= VERSION && LA155_0 <= WORDS)||(LA155_0 >= XQUERY && LA155_0 <= ZERO_DIGIT)||LA155_0==EXPLICITLY) ) {
				alt155=1;
			}
			else if ( (LA155_0==LBRACKET) ) {
				alt155=2;
			}

			else {
				if (state.backtracking>0) {state.failed=true; return retval;}
				NoViableAltException nvae =
					new NoViableAltException("", 155, 0, input);
				throw nvae;
			}

			switch (alt155) {
				case 1 :
					// XQueryParser.g:1056:34: p_QName
					{
					pushFollow(FOLLOW_p_QName_in_pm_CompAttrConstructor8954);
					p_QName454=p_QName();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, p_QName454.getTree());

					}
					break;
				case 2 :
					// XQueryParser.g:1056:44: ( LBRACKET p_Expr[true,true] RBRACKET )
					{
					// XQueryParser.g:1056:44: ( LBRACKET p_Expr[true,true] RBRACKET )
					// XQueryParser.g:1056:45: LBRACKET p_Expr[true,true] RBRACKET
					{
					LBRACKET455=(CommonToken)match(input,LBRACKET,FOLLOW_LBRACKET_in_pm_CompAttrConstructor8959); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					LBRACKET455_tree = (XQDTCommonTree)adaptor.create(LBRACKET455);
					adaptor.addChild(root_0, LBRACKET455_tree);
					}

					pushFollow(FOLLOW_p_Expr_in_pm_CompAttrConstructor8961);
					p_Expr456=p_Expr(true, true);
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, p_Expr456.getTree());

					RBRACKET457=(CommonToken)match(input,RBRACKET,FOLLOW_RBRACKET_in_pm_CompAttrConstructor8964); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					RBRACKET457_tree = (XQDTCommonTree)adaptor.create(RBRACKET457);
					adaptor.addChild(root_0, RBRACKET457_tree);
					}

					}

					}
					break;

			}

			LBRACKET458=(CommonToken)match(input,LBRACKET,FOLLOW_LBRACKET_in_pm_CompAttrConstructor8968); if (state.failed) return retval;
			if ( state.backtracking==0 ) {
			LBRACKET458_tree = (XQDTCommonTree)adaptor.create(LBRACKET458);
			adaptor.addChild(root_0, LBRACKET458_tree);
			}

			pushFollow(FOLLOW_p_StatementsAndOptionalExpr_in_pm_CompAttrConstructor8970);
			p_StatementsAndOptionalExpr459=p_StatementsAndOptionalExpr();
			state._fsp--;
			if (state.failed) return retval;
			if ( state.backtracking==0 ) adaptor.addChild(root_0, p_StatementsAndOptionalExpr459.getTree());

			RBRACKET460=(CommonToken)match(input,RBRACKET,FOLLOW_RBRACKET_in_pm_CompAttrConstructor8972); if (state.failed) return retval;
			if ( state.backtracking==0 ) {
			RBRACKET460_tree = (XQDTCommonTree)adaptor.create(RBRACKET460);
			adaptor.addChild(root_0, RBRACKET460_tree);
			}

			}

			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (XQDTCommonTree)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
			retval.tree = (XQDTCommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "pm_CompAttrConstructor"


	public static class p_CompNamespaceConstructor_return extends ParserRuleReturnScope {
		XQDTCommonTree tree;
		@Override
		public XQDTCommonTree getTree() { return tree; }
	};


	// $ANTLR start "p_CompNamespaceConstructor"
	// XQueryParser.g:1060:1: p_CompNamespaceConstructor : k= NAMESPACE ( p_Prefix | ( LBRACKET p_PrefixExpr RBRACKET ) ) LBRACKET ( p_URIExpr )? RBRACKET ;
	public final XQueryParser.p_CompNamespaceConstructor_return p_CompNamespaceConstructor() throws RecognitionException {
		XQueryParser.p_CompNamespaceConstructor_return retval = new XQueryParser.p_CompNamespaceConstructor_return();
		retval.start = input.LT(1);

		XQDTCommonTree root_0 = null;

		CommonToken k=null;
		CommonToken LBRACKET462=null;
		CommonToken RBRACKET464=null;
		CommonToken LBRACKET465=null;
		CommonToken RBRACKET467=null;
		ParserRuleReturnScope p_Prefix461 =null;
		ParserRuleReturnScope p_PrefixExpr463 =null;
		ParserRuleReturnScope p_URIExpr466 =null;

		XQDTCommonTree k_tree=null;
		XQDTCommonTree LBRACKET462_tree=null;
		XQDTCommonTree RBRACKET464_tree=null;
		XQDTCommonTree LBRACKET465_tree=null;
		XQDTCommonTree RBRACKET467_tree=null;

		try {
			// XQueryParser.g:1061:9: (k= NAMESPACE ( p_Prefix | ( LBRACKET p_PrefixExpr RBRACKET ) ) LBRACKET ( p_URIExpr )? RBRACKET )
			// XQueryParser.g:1061:11: k= NAMESPACE ( p_Prefix | ( LBRACKET p_PrefixExpr RBRACKET ) ) LBRACKET ( p_URIExpr )? RBRACKET
			{
			root_0 = (XQDTCommonTree)adaptor.nil();


			k=(CommonToken)match(input,NAMESPACE,FOLLOW_NAMESPACE_in_p_CompNamespaceConstructor9000); if (state.failed) return retval;
			if ( state.backtracking==0 ) {
			k_tree = (XQDTCommonTree)adaptor.create(k);
			adaptor.addChild(root_0, k_tree);
			}

			if ( state.backtracking==0 ) {ak(k);}
			// XQueryParser.g:1061:33: ( p_Prefix | ( LBRACKET p_PrefixExpr RBRACKET ) )
			int alt156=2;
			int LA156_0 = input.LA(1);
			if ( ((LA156_0 >= AFTER && LA156_0 <= ALLOWING)||(LA156_0 >= AMP_ER && LA156_0 <= AND)||LA156_0==ANY||(LA156_0 >= APOS_ER && LA156_0 <= ATTRIBUTE)||(LA156_0 >= BASE_URI && LA156_0 <= BINARY)||(LA156_0 >= BOUNDARY_SPACE && LA156_0 <= CATCH)||(LA156_0 >= CHECK && LA156_0 <= CHILD)||(LA156_0 >= COLLATION && LA156_0 <= COLLECTION)||LA156_0==COMMENT||(LA156_0 >= CONSTRAINT && LA156_0 <= DOCUMENT_NODE)||(LA156_0 >= ELEMENT && LA156_0 <= EMPTY)||(LA156_0 >= EMPTY_SEQUENCE && LA156_0 <= EQ)||(LA156_0 >= EVERY && LA156_0 <= GE)||(LA156_0 >= GREATEST && LA156_0 <= GT)||(LA156_0 >= IDIV && LA156_0 <= LAX)||(LA156_0 >= LE && LA156_0 <= LOWERCASE)||LA156_0==LT||LA156_0==L_NCName||(LA156_0 >= MINUS_SIGN && LA156_0 <= NAN)||(LA156_0 >= NE && LA156_0 <= NOT)||(LA156_0 >= NO_INHERIT && LA156_0 <= PHRASE)||(LA156_0 >= PRECEDING && LA156_0 <= PROCESSING_INSTRUCTION)||LA156_0==QUOT_ER||(LA156_0 >= RELATIONSHIP && LA156_0 <= REVALIDATION)||(LA156_0 >= SAME && LA156_0 <= SELF)||(LA156_0 >= SENSITIVE && LA156_0 <= SKIP)||LA156_0==SLIDING||(LA156_0 >= SOME && LA156_0 <= STABLE)||(LA156_0 >= START && LA156_0 <= STRIP)||(LA156_0 >= SWITCH && LA156_0 <= UNORDERED)||(LA156_0 >= UPPERCASE && LA156_0 <= VARIABLE)||(LA156_0 >= VERSION && LA156_0 <= WORDS)||(LA156_0 >= XQUERY && LA156_0 <= ZERO_DIGIT)||LA156_0==EXPLICITLY) ) {
				alt156=1;
			}
			else if ( (LA156_0==LBRACKET) ) {
				alt156=2;
			}

			else {
				if (state.backtracking>0) {state.failed=true; return retval;}
				NoViableAltException nvae =
					new NoViableAltException("", 156, 0, input);
				throw nvae;
			}

			switch (alt156) {
				case 1 :
					// XQueryParser.g:1061:34: p_Prefix
					{
					pushFollow(FOLLOW_p_Prefix_in_p_CompNamespaceConstructor9005);
					p_Prefix461=p_Prefix();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, p_Prefix461.getTree());

					}
					break;
				case 2 :
					// XQueryParser.g:1061:45: ( LBRACKET p_PrefixExpr RBRACKET )
					{
					// XQueryParser.g:1061:45: ( LBRACKET p_PrefixExpr RBRACKET )
					// XQueryParser.g:1061:46: LBRACKET p_PrefixExpr RBRACKET
					{
					LBRACKET462=(CommonToken)match(input,LBRACKET,FOLLOW_LBRACKET_in_p_CompNamespaceConstructor9010); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					LBRACKET462_tree = (XQDTCommonTree)adaptor.create(LBRACKET462);
					adaptor.addChild(root_0, LBRACKET462_tree);
					}

					pushFollow(FOLLOW_p_PrefixExpr_in_p_CompNamespaceConstructor9012);
					p_PrefixExpr463=p_PrefixExpr();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, p_PrefixExpr463.getTree());

					RBRACKET464=(CommonToken)match(input,RBRACKET,FOLLOW_RBRACKET_in_p_CompNamespaceConstructor9014); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					RBRACKET464_tree = (XQDTCommonTree)adaptor.create(RBRACKET464);
					adaptor.addChild(root_0, RBRACKET464_tree);
					}

					}

					}
					break;

			}

			LBRACKET465=(CommonToken)match(input,LBRACKET,FOLLOW_LBRACKET_in_p_CompNamespaceConstructor9018); if (state.failed) return retval;
			if ( state.backtracking==0 ) {
			LBRACKET465_tree = (XQDTCommonTree)adaptor.create(LBRACKET465);
			adaptor.addChild(root_0, LBRACKET465_tree);
			}

			// XQueryParser.g:1061:88: ( p_URIExpr )?
			int alt157=2;
			int LA157_0 = input.LA(1);
			if ( ((LA157_0 >= AFTER && LA157_0 <= ALLOWING)||(LA157_0 >= AMP_ER && LA157_0 <= AND)||(LA157_0 >= ANY && LA157_0 <= BINARY)||(LA157_0 >= BOUNDARY_SPACE && LA157_0 <= CATCH)||(LA157_0 >= CHECK && LA157_0 <= CHILD)||(LA157_0 >= COLLATION && LA157_0 <= COLLECTION)||LA157_0==COMMENT||(LA157_0 >= CONSTRAINT && LA157_0 <= DOT_DOT)||(LA157_0 >= ELEMENT && LA157_0 <= EMPTY)||(LA157_0 >= EMPTY_SEQUENCE && LA157_0 <= EQ)||(LA157_0 >= EVERY && LA157_0 <= GE)||(LA157_0 >= GREATEST && LA157_0 <= GT)||(LA157_0 >= IDIV && LA157_0 <= LPAREN)||LA157_0==LT||(LA157_0 >= L_DecimalLiteral && LA157_0 <= L_DoubleLiteral)||(LA157_0 >= L_IntegerLiteral && LA157_0 <= L_Pragma)||(LA157_0 >= MINUS && LA157_0 <= NAN)||(LA157_0 >= NE && LA157_0 <= NOT)||(LA157_0 >= NO_INHERIT && LA157_0 <= PHRASE)||LA157_0==PLUS||(LA157_0 >= PRECEDING && LA157_0 <= PROCESSING_INSTRUCTION)||(LA157_0 >= QUOT && LA157_0 <= QUOT_ER)||(LA157_0 >= RELATIONSHIP && LA157_0 <= REVALIDATION)||(LA157_0 >= SAME && LA157_0 <= SELF)||(LA157_0 >= SENSITIVE && LA157_0 <= SMALLER)||(LA157_0 >= SOME && LA157_0 <= STRIP)||(LA157_0 >= SWITCH && LA157_0 <= VARIABLE)||(LA157_0 >= VERSION && LA157_0 <= WORDS)||(LA157_0 >= XQUERY && LA157_0 <= ZERO_DIGIT)||LA157_0==EXPLICITLY) ) {
				alt157=1;
			}
			switch (alt157) {
				case 1 :
					// XQueryParser.g:1061:88: p_URIExpr
					{
					pushFollow(FOLLOW_p_URIExpr_in_p_CompNamespaceConstructor9020);
					p_URIExpr466=p_URIExpr();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, p_URIExpr466.getTree());

					}
					break;

			}

			RBRACKET467=(CommonToken)match(input,RBRACKET,FOLLOW_RBRACKET_in_p_CompNamespaceConstructor9023); if (state.failed) return retval;
			if ( state.backtracking==0 ) {
			RBRACKET467_tree = (XQDTCommonTree)adaptor.create(RBRACKET467);
			adaptor.addChild(root_0, RBRACKET467_tree);
			}

			}

			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (XQDTCommonTree)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
			retval.tree = (XQDTCommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "p_CompNamespaceConstructor"


	public static class p_Prefix_return extends ParserRuleReturnScope {
		XQDTCommonTree tree;
		@Override
		public XQDTCommonTree getTree() { return tree; }
	};


	// $ANTLR start "p_Prefix"
	// XQueryParser.g:1065:1: p_Prefix : p_NCName ;
	public final XQueryParser.p_Prefix_return p_Prefix() throws RecognitionException {
		XQueryParser.p_Prefix_return retval = new XQueryParser.p_Prefix_return();
		retval.start = input.LT(1);

		XQDTCommonTree root_0 = null;

		ParserRuleReturnScope p_NCName468 =null;


		try {
			// XQueryParser.g:1066:9: ( p_NCName )
			// XQueryParser.g:1066:11: p_NCName
			{
			root_0 = (XQDTCommonTree)adaptor.nil();


			pushFollow(FOLLOW_p_NCName_in_p_Prefix9049);
			p_NCName468=p_NCName();
			state._fsp--;
			if (state.failed) return retval;
			if ( state.backtracking==0 ) adaptor.addChild(root_0, p_NCName468.getTree());

			}

			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (XQDTCommonTree)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
			retval.tree = (XQDTCommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "p_Prefix"


	public static class p_PrefixExpr_return extends ParserRuleReturnScope {
		XQDTCommonTree tree;
		@Override
		public XQDTCommonTree getTree() { return tree; }
	};


	// $ANTLR start "p_PrefixExpr"
	// XQueryParser.g:1070:1: p_PrefixExpr : p_Expr[true,true] ;
	public final XQueryParser.p_PrefixExpr_return p_PrefixExpr() throws RecognitionException {
		XQueryParser.p_PrefixExpr_return retval = new XQueryParser.p_PrefixExpr_return();
		retval.start = input.LT(1);

		XQDTCommonTree root_0 = null;

		ParserRuleReturnScope p_Expr469 =null;


		try {
			// XQueryParser.g:1071:9: ( p_Expr[true,true] )
			// XQueryParser.g:1071:11: p_Expr[true,true]
			{
			root_0 = (XQDTCommonTree)adaptor.nil();


			pushFollow(FOLLOW_p_Expr_in_p_PrefixExpr9075);
			p_Expr469=p_Expr(true, true);
			state._fsp--;
			if (state.failed) return retval;
			if ( state.backtracking==0 ) adaptor.addChild(root_0, p_Expr469.getTree());

			}

			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (XQDTCommonTree)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
			retval.tree = (XQDTCommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "p_PrefixExpr"


	public static class p_URIExpr_return extends ParserRuleReturnScope {
		XQDTCommonTree tree;
		@Override
		public XQDTCommonTree getTree() { return tree; }
	};


	// $ANTLR start "p_URIExpr"
	// XQueryParser.g:1075:1: p_URIExpr : p_Expr[true,true] ;
	public final XQueryParser.p_URIExpr_return p_URIExpr() throws RecognitionException {
		XQueryParser.p_URIExpr_return retval = new XQueryParser.p_URIExpr_return();
		retval.start = input.LT(1);

		XQDTCommonTree root_0 = null;

		ParserRuleReturnScope p_Expr470 =null;


		try {
			// XQueryParser.g:1076:9: ( p_Expr[true,true] )
			// XQueryParser.g:1076:11: p_Expr[true,true]
			{
			root_0 = (XQDTCommonTree)adaptor.nil();


			pushFollow(FOLLOW_p_Expr_in_p_URIExpr9102);
			p_Expr470=p_Expr(true, true);
			state._fsp--;
			if (state.failed) return retval;
			if ( state.backtracking==0 ) adaptor.addChild(root_0, p_Expr470.getTree());

			}

			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (XQDTCommonTree)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
			retval.tree = (XQDTCommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "p_URIExpr"


	public static class p_CompTextConstructor_return extends ParserRuleReturnScope {
		XQDTCommonTree tree;
		@Override
		public XQDTCommonTree getTree() { return tree; }
	};


	// $ANTLR start "p_CompTextConstructor"
	// XQueryParser.g:1080:1: p_CompTextConstructor : k= TEXT LBRACKET p_Expr[true,true] RBRACKET ;
	public final XQueryParser.p_CompTextConstructor_return p_CompTextConstructor() throws RecognitionException {
		XQueryParser.p_CompTextConstructor_return retval = new XQueryParser.p_CompTextConstructor_return();
		retval.start = input.LT(1);

		XQDTCommonTree root_0 = null;

		CommonToken k=null;
		CommonToken LBRACKET471=null;
		CommonToken RBRACKET473=null;
		ParserRuleReturnScope p_Expr472 =null;

		XQDTCommonTree k_tree=null;
		XQDTCommonTree LBRACKET471_tree=null;
		XQDTCommonTree RBRACKET473_tree=null;

		try {
			// XQueryParser.g:1081:9: (k= TEXT LBRACKET p_Expr[true,true] RBRACKET )
			// XQueryParser.g:1081:11: k= TEXT LBRACKET p_Expr[true,true] RBRACKET
			{
			root_0 = (XQDTCommonTree)adaptor.nil();


			k=(CommonToken)match(input,TEXT,FOLLOW_TEXT_in_p_CompTextConstructor9131); if (state.failed) return retval;
			if ( state.backtracking==0 ) {
			k_tree = (XQDTCommonTree)adaptor.create(k);
			adaptor.addChild(root_0, k_tree);
			}

			if ( state.backtracking==0 ) {ak(k);}
			LBRACKET471=(CommonToken)match(input,LBRACKET,FOLLOW_LBRACKET_in_p_CompTextConstructor9135); if (state.failed) return retval;
			if ( state.backtracking==0 ) {
			LBRACKET471_tree = (XQDTCommonTree)adaptor.create(LBRACKET471);
			adaptor.addChild(root_0, LBRACKET471_tree);
			}

			pushFollow(FOLLOW_p_Expr_in_p_CompTextConstructor9137);
			p_Expr472=p_Expr(true, true);
			state._fsp--;
			if (state.failed) return retval;
			if ( state.backtracking==0 ) adaptor.addChild(root_0, p_Expr472.getTree());

			RBRACKET473=(CommonToken)match(input,RBRACKET,FOLLOW_RBRACKET_in_p_CompTextConstructor9140); if (state.failed) return retval;
			if ( state.backtracking==0 ) {
			RBRACKET473_tree = (XQDTCommonTree)adaptor.create(RBRACKET473);
			adaptor.addChild(root_0, RBRACKET473_tree);
			}

			}

			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (XQDTCommonTree)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
			retval.tree = (XQDTCommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "p_CompTextConstructor"


	public static class p_CompBinaryConstructor_return extends ParserRuleReturnScope {
		XQDTCommonTree tree;
		@Override
		public XQDTCommonTree getTree() { return tree; }
	};


	// $ANTLR start "p_CompBinaryConstructor"
	// XQueryParser.g:1085:1: p_CompBinaryConstructor : k= BINARY LBRACKET p_Expr[true,true] RBRACKET ;
	public final XQueryParser.p_CompBinaryConstructor_return p_CompBinaryConstructor() throws RecognitionException {
		XQueryParser.p_CompBinaryConstructor_return retval = new XQueryParser.p_CompBinaryConstructor_return();
		retval.start = input.LT(1);

		XQDTCommonTree root_0 = null;

		CommonToken k=null;
		CommonToken LBRACKET474=null;
		CommonToken RBRACKET476=null;
		ParserRuleReturnScope p_Expr475 =null;

		XQDTCommonTree k_tree=null;
		XQDTCommonTree LBRACKET474_tree=null;
		XQDTCommonTree RBRACKET476_tree=null;

		try {
			// XQueryParser.g:1086:9: (k= BINARY LBRACKET p_Expr[true,true] RBRACKET )
			// XQueryParser.g:1086:11: k= BINARY LBRACKET p_Expr[true,true] RBRACKET
			{
			root_0 = (XQDTCommonTree)adaptor.nil();


			k=(CommonToken)match(input,BINARY,FOLLOW_BINARY_in_p_CompBinaryConstructor9168); if (state.failed) return retval;
			if ( state.backtracking==0 ) {
			k_tree = (XQDTCommonTree)adaptor.create(k);
			adaptor.addChild(root_0, k_tree);
			}

			if ( state.backtracking==0 ) {ak(k);}
			LBRACKET474=(CommonToken)match(input,LBRACKET,FOLLOW_LBRACKET_in_p_CompBinaryConstructor9172); if (state.failed) return retval;
			if ( state.backtracking==0 ) {
			LBRACKET474_tree = (XQDTCommonTree)adaptor.create(LBRACKET474);
			adaptor.addChild(root_0, LBRACKET474_tree);
			}

			pushFollow(FOLLOW_p_Expr_in_p_CompBinaryConstructor9174);
			p_Expr475=p_Expr(true, true);
			state._fsp--;
			if (state.failed) return retval;
			if ( state.backtracking==0 ) adaptor.addChild(root_0, p_Expr475.getTree());

			RBRACKET476=(CommonToken)match(input,RBRACKET,FOLLOW_RBRACKET_in_p_CompBinaryConstructor9177); if (state.failed) return retval;
			if ( state.backtracking==0 ) {
			RBRACKET476_tree = (XQDTCommonTree)adaptor.create(RBRACKET476);
			adaptor.addChild(root_0, RBRACKET476_tree);
			}

			}

			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (XQDTCommonTree)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
			retval.tree = (XQDTCommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "p_CompBinaryConstructor"


	public static class pm_CompCommentConstructor_return extends ParserRuleReturnScope {
		XQDTCommonTree tree;
		@Override
		public XQDTCommonTree getTree() { return tree; }
	};


	// $ANTLR start "pm_CompCommentConstructor"
	// XQueryParser.g:1091:1: pm_CompCommentConstructor : k= COMMENT LBRACKET p_StatementsAndOptionalExpr RBRACKET ;
	public final XQueryParser.pm_CompCommentConstructor_return pm_CompCommentConstructor() throws RecognitionException {
		XQueryParser.pm_CompCommentConstructor_return retval = new XQueryParser.pm_CompCommentConstructor_return();
		retval.start = input.LT(1);

		XQDTCommonTree root_0 = null;

		CommonToken k=null;
		CommonToken LBRACKET477=null;
		CommonToken RBRACKET479=null;
		ParserRuleReturnScope p_StatementsAndOptionalExpr478 =null;

		XQDTCommonTree k_tree=null;
		XQDTCommonTree LBRACKET477_tree=null;
		XQDTCommonTree RBRACKET479_tree=null;

		try {
			// XQueryParser.g:1092:9: (k= COMMENT LBRACKET p_StatementsAndOptionalExpr RBRACKET )
			// XQueryParser.g:1092:11: k= COMMENT LBRACKET p_StatementsAndOptionalExpr RBRACKET
			{
			root_0 = (XQDTCommonTree)adaptor.nil();


			k=(CommonToken)match(input,COMMENT,FOLLOW_COMMENT_in_pm_CompCommentConstructor9206); if (state.failed) return retval;
			if ( state.backtracking==0 ) {
			k_tree = (XQDTCommonTree)adaptor.create(k);
			adaptor.addChild(root_0, k_tree);
			}

			if ( state.backtracking==0 ) {ak(k);}
			LBRACKET477=(CommonToken)match(input,LBRACKET,FOLLOW_LBRACKET_in_pm_CompCommentConstructor9210); if (state.failed) return retval;
			if ( state.backtracking==0 ) {
			LBRACKET477_tree = (XQDTCommonTree)adaptor.create(LBRACKET477);
			adaptor.addChild(root_0, LBRACKET477_tree);
			}

			pushFollow(FOLLOW_p_StatementsAndOptionalExpr_in_pm_CompCommentConstructor9212);
			p_StatementsAndOptionalExpr478=p_StatementsAndOptionalExpr();
			state._fsp--;
			if (state.failed) return retval;
			if ( state.backtracking==0 ) adaptor.addChild(root_0, p_StatementsAndOptionalExpr478.getTree());

			RBRACKET479=(CommonToken)match(input,RBRACKET,FOLLOW_RBRACKET_in_pm_CompCommentConstructor9214); if (state.failed) return retval;
			if ( state.backtracking==0 ) {
			RBRACKET479_tree = (XQDTCommonTree)adaptor.create(RBRACKET479);
			adaptor.addChild(root_0, RBRACKET479_tree);
			}

			}

			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (XQDTCommonTree)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
			retval.tree = (XQDTCommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "pm_CompCommentConstructor"


	public static class pm_CompPIConstructor_return extends ParserRuleReturnScope {
		XQDTCommonTree tree;
		@Override
		public XQDTCommonTree getTree() { return tree; }
	};


	// $ANTLR start "pm_CompPIConstructor"
	// XQueryParser.g:1097:1: pm_CompPIConstructor : k= PROCESSING_INSTRUCTION ( p_NCName | ( LBRACKET p_Expr[true,true] RBRACKET ) ) LBRACKET p_StatementsAndOptionalExpr RBRACKET ;
	public final XQueryParser.pm_CompPIConstructor_return pm_CompPIConstructor() throws RecognitionException {
		XQueryParser.pm_CompPIConstructor_return retval = new XQueryParser.pm_CompPIConstructor_return();
		retval.start = input.LT(1);

		XQDTCommonTree root_0 = null;

		CommonToken k=null;
		CommonToken LBRACKET481=null;
		CommonToken RBRACKET483=null;
		CommonToken LBRACKET484=null;
		CommonToken RBRACKET486=null;
		ParserRuleReturnScope p_NCName480 =null;
		ParserRuleReturnScope p_Expr482 =null;
		ParserRuleReturnScope p_StatementsAndOptionalExpr485 =null;

		XQDTCommonTree k_tree=null;
		XQDTCommonTree LBRACKET481_tree=null;
		XQDTCommonTree RBRACKET483_tree=null;
		XQDTCommonTree LBRACKET484_tree=null;
		XQDTCommonTree RBRACKET486_tree=null;

		try {
			// XQueryParser.g:1098:9: (k= PROCESSING_INSTRUCTION ( p_NCName | ( LBRACKET p_Expr[true,true] RBRACKET ) ) LBRACKET p_StatementsAndOptionalExpr RBRACKET )
			// XQueryParser.g:1098:11: k= PROCESSING_INSTRUCTION ( p_NCName | ( LBRACKET p_Expr[true,true] RBRACKET ) ) LBRACKET p_StatementsAndOptionalExpr RBRACKET
			{
			root_0 = (XQDTCommonTree)adaptor.nil();


			k=(CommonToken)match(input,PROCESSING_INSTRUCTION,FOLLOW_PROCESSING_INSTRUCTION_in_pm_CompPIConstructor9243); if (state.failed) return retval;
			if ( state.backtracking==0 ) {
			k_tree = (XQDTCommonTree)adaptor.create(k);
			adaptor.addChild(root_0, k_tree);
			}

			if ( state.backtracking==0 ) {ak(k);}
			// XQueryParser.g:1098:46: ( p_NCName | ( LBRACKET p_Expr[true,true] RBRACKET ) )
			int alt158=2;
			int LA158_0 = input.LA(1);
			if ( ((LA158_0 >= AFTER && LA158_0 <= ALLOWING)||(LA158_0 >= AMP_ER && LA158_0 <= AND)||LA158_0==ANY||(LA158_0 >= APOS_ER && LA158_0 <= ATTRIBUTE)||(LA158_0 >= BASE_URI && LA158_0 <= BINARY)||(LA158_0 >= BOUNDARY_SPACE && LA158_0 <= CATCH)||(LA158_0 >= CHECK && LA158_0 <= CHILD)||(LA158_0 >= COLLATION && LA158_0 <= COLLECTION)||LA158_0==COMMENT||(LA158_0 >= CONSTRAINT && LA158_0 <= DOCUMENT_NODE)||(LA158_0 >= ELEMENT && LA158_0 <= EMPTY)||(LA158_0 >= EMPTY_SEQUENCE && LA158_0 <= EQ)||(LA158_0 >= EVERY && LA158_0 <= GE)||(LA158_0 >= GREATEST && LA158_0 <= GT)||(LA158_0 >= IDIV && LA158_0 <= LAX)||(LA158_0 >= LE && LA158_0 <= LOWERCASE)||LA158_0==LT||LA158_0==L_NCName||(LA158_0 >= MINUS_SIGN && LA158_0 <= NAN)||(LA158_0 >= NE && LA158_0 <= NOT)||(LA158_0 >= NO_INHERIT && LA158_0 <= PHRASE)||(LA158_0 >= PRECEDING && LA158_0 <= PROCESSING_INSTRUCTION)||LA158_0==QUOT_ER||(LA158_0 >= RELATIONSHIP && LA158_0 <= REVALIDATION)||(LA158_0 >= SAME && LA158_0 <= SELF)||(LA158_0 >= SENSITIVE && LA158_0 <= SKIP)||LA158_0==SLIDING||(LA158_0 >= SOME && LA158_0 <= STABLE)||(LA158_0 >= START && LA158_0 <= STRIP)||(LA158_0 >= SWITCH && LA158_0 <= UNORDERED)||(LA158_0 >= UPPERCASE && LA158_0 <= VARIABLE)||(LA158_0 >= VERSION && LA158_0 <= WORDS)||(LA158_0 >= XQUERY && LA158_0 <= ZERO_DIGIT)||LA158_0==EXPLICITLY) ) {
				alt158=1;
			}
			else if ( (LA158_0==LBRACKET) ) {
				alt158=2;
			}

			else {
				if (state.backtracking>0) {state.failed=true; return retval;}
				NoViableAltException nvae =
					new NoViableAltException("", 158, 0, input);
				throw nvae;
			}

			switch (alt158) {
				case 1 :
					// XQueryParser.g:1098:47: p_NCName
					{
					pushFollow(FOLLOW_p_NCName_in_pm_CompPIConstructor9248);
					p_NCName480=p_NCName();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, p_NCName480.getTree());

					}
					break;
				case 2 :
					// XQueryParser.g:1098:58: ( LBRACKET p_Expr[true,true] RBRACKET )
					{
					// XQueryParser.g:1098:58: ( LBRACKET p_Expr[true,true] RBRACKET )
					// XQueryParser.g:1098:59: LBRACKET p_Expr[true,true] RBRACKET
					{
					LBRACKET481=(CommonToken)match(input,LBRACKET,FOLLOW_LBRACKET_in_pm_CompPIConstructor9253); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					LBRACKET481_tree = (XQDTCommonTree)adaptor.create(LBRACKET481);
					adaptor.addChild(root_0, LBRACKET481_tree);
					}

					pushFollow(FOLLOW_p_Expr_in_pm_CompPIConstructor9255);
					p_Expr482=p_Expr(true, true);
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, p_Expr482.getTree());

					RBRACKET483=(CommonToken)match(input,RBRACKET,FOLLOW_RBRACKET_in_pm_CompPIConstructor9258); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					RBRACKET483_tree = (XQDTCommonTree)adaptor.create(RBRACKET483);
					adaptor.addChild(root_0, RBRACKET483_tree);
					}

					}

					}
					break;

			}

			LBRACKET484=(CommonToken)match(input,LBRACKET,FOLLOW_LBRACKET_in_pm_CompPIConstructor9262); if (state.failed) return retval;
			if ( state.backtracking==0 ) {
			LBRACKET484_tree = (XQDTCommonTree)adaptor.create(LBRACKET484);
			adaptor.addChild(root_0, LBRACKET484_tree);
			}

			pushFollow(FOLLOW_p_StatementsAndOptionalExpr_in_pm_CompPIConstructor9264);
			p_StatementsAndOptionalExpr485=p_StatementsAndOptionalExpr();
			state._fsp--;
			if (state.failed) return retval;
			if ( state.backtracking==0 ) adaptor.addChild(root_0, p_StatementsAndOptionalExpr485.getTree());

			RBRACKET486=(CommonToken)match(input,RBRACKET,FOLLOW_RBRACKET_in_pm_CompPIConstructor9266); if (state.failed) return retval;
			if ( state.backtracking==0 ) {
			RBRACKET486_tree = (XQDTCommonTree)adaptor.create(RBRACKET486);
			adaptor.addChild(root_0, RBRACKET486_tree);
			}

			}

			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (XQDTCommonTree)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
			retval.tree = (XQDTCommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "pm_CompPIConstructor"


	public static class p_SingleType_return extends ParserRuleReturnScope {
		XQDTCommonTree tree;
		@Override
		public XQDTCommonTree getTree() { return tree; }
	};


	// $ANTLR start "p_SingleType"
	// XQueryParser.g:1120:1: p_SingleType : p_AtomicOrUnionType ( QUESTION )? ;
	public final XQueryParser.p_SingleType_return p_SingleType() throws RecognitionException {
		XQueryParser.p_SingleType_return retval = new XQueryParser.p_SingleType_return();
		retval.start = input.LT(1);

		XQDTCommonTree root_0 = null;

		CommonToken QUESTION488=null;
		ParserRuleReturnScope p_AtomicOrUnionType487 =null;

		XQDTCommonTree QUESTION488_tree=null;

		try {
			// XQueryParser.g:1121:9: ( p_AtomicOrUnionType ( QUESTION )? )
			// XQueryParser.g:1121:11: p_AtomicOrUnionType ( QUESTION )?
			{
			root_0 = (XQDTCommonTree)adaptor.nil();


			pushFollow(FOLLOW_p_AtomicOrUnionType_in_p_SingleType9310);
			p_AtomicOrUnionType487=p_AtomicOrUnionType();
			state._fsp--;
			if (state.failed) return retval;
			if ( state.backtracking==0 ) adaptor.addChild(root_0, p_AtomicOrUnionType487.getTree());

			// XQueryParser.g:1121:31: ( QUESTION )?
			int alt159=2;
			int LA159_0 = input.LA(1);
			if ( (LA159_0==QUESTION) ) {
				alt159=1;
			}
			switch (alt159) {
				case 1 :
					// XQueryParser.g:1121:31: QUESTION
					{
					QUESTION488=(CommonToken)match(input,QUESTION,FOLLOW_QUESTION_in_p_SingleType9312); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					QUESTION488_tree = (XQDTCommonTree)adaptor.create(QUESTION488);
					adaptor.addChild(root_0, QUESTION488_tree);
					}

					}
					break;

			}

			}

			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (XQDTCommonTree)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
			retval.tree = (XQDTCommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "p_SingleType"


	public static class p_TypeDeclaration_return extends ParserRuleReturnScope {
		XQDTCommonTree tree;
		@Override
		public XQDTCommonTree getTree() { return tree; }
	};


	// $ANTLR start "p_TypeDeclaration"
	// XQueryParser.g:1125:1: p_TypeDeclaration : k= AS st= p_SequenceType -> ^( TypeDeclaration $st) ;
	public final XQueryParser.p_TypeDeclaration_return p_TypeDeclaration() throws RecognitionException {
		XQueryParser.p_TypeDeclaration_return retval = new XQueryParser.p_TypeDeclaration_return();
		retval.start = input.LT(1);

		XQDTCommonTree root_0 = null;

		CommonToken k=null;
		ParserRuleReturnScope st =null;

		XQDTCommonTree k_tree=null;
		RewriteRuleTokenStream stream_AS=new RewriteRuleTokenStream(adaptor,"token AS");
		RewriteRuleSubtreeStream stream_p_SequenceType=new RewriteRuleSubtreeStream(adaptor,"rule p_SequenceType");

		try {
			// XQueryParser.g:1126:9: (k= AS st= p_SequenceType -> ^( TypeDeclaration $st) )
			// XQueryParser.g:1126:11: k= AS st= p_SequenceType
			{
			k=(CommonToken)match(input,AS,FOLLOW_AS_in_p_TypeDeclaration9341); if (state.failed) return retval; 
			if ( state.backtracking==0 ) stream_AS.add(k);

			if ( state.backtracking==0 ) {ak(k);}
			pushFollow(FOLLOW_p_SequenceType_in_p_TypeDeclaration9347);
			st=p_SequenceType();
			state._fsp--;
			if (state.failed) return retval;
			if ( state.backtracking==0 ) stream_p_SequenceType.add(st.getTree());
			// AST REWRITE
			// elements: st
			// token labels: 
			// rule labels: retval, st
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			if ( state.backtracking==0 ) {
			retval.tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.getTree():null);
			RewriteRuleSubtreeStream stream_st=new RewriteRuleSubtreeStream(adaptor,"rule st",st!=null?st.getTree():null);

			root_0 = (XQDTCommonTree)adaptor.nil();
			// 1127:17: -> ^( TypeDeclaration $st)
			{
				// XQueryParser.g:1127:20: ^( TypeDeclaration $st)
				{
				XQDTCommonTree root_1 = (XQDTCommonTree)adaptor.nil();
				root_1 = (XQDTCommonTree)adaptor.becomeRoot((XQDTCommonTree)adaptor.create(TypeDeclaration, "TypeDeclaration"), root_1);
				adaptor.addChild(root_1, stream_st.nextTree());
				adaptor.addChild(root_0, root_1);
				}

			}


			retval.tree = root_0;
			}

			}

			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (XQDTCommonTree)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
			retval.tree = (XQDTCommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "p_TypeDeclaration"


	public static class p_SequenceType_return extends ParserRuleReturnScope {
		XQDTCommonTree tree;
		@Override
		public XQDTCommonTree getTree() { return tree; }
	};


	// $ANTLR start "p_SequenceType"
	// XQueryParser.g:1131:1: p_SequenceType : (k= EMPTY_SEQUENCE l= LPAREN r= RPAREN -> ^( SequenceType ^( EmptySequenceTest $k $l $r) ) |it= p_ItemType ( ( p_OccurrenceIndicator )=>oi= p_OccurrenceIndicator )? -> ^( SequenceType $it ( $oi)? ) );
	public final XQueryParser.p_SequenceType_return p_SequenceType() throws RecognitionException {
		XQueryParser.p_SequenceType_return retval = new XQueryParser.p_SequenceType_return();
		retval.start = input.LT(1);

		XQDTCommonTree root_0 = null;

		CommonToken k=null;
		CommonToken l=null;
		CommonToken r=null;
		ParserRuleReturnScope it =null;
		ParserRuleReturnScope oi =null;

		XQDTCommonTree k_tree=null;
		XQDTCommonTree l_tree=null;
		XQDTCommonTree r_tree=null;
		RewriteRuleTokenStream stream_EMPTY_SEQUENCE=new RewriteRuleTokenStream(adaptor,"token EMPTY_SEQUENCE");
		RewriteRuleTokenStream stream_RPAREN=new RewriteRuleTokenStream(adaptor,"token RPAREN");
		RewriteRuleTokenStream stream_LPAREN=new RewriteRuleTokenStream(adaptor,"token LPAREN");
		RewriteRuleSubtreeStream stream_p_ItemType=new RewriteRuleSubtreeStream(adaptor,"rule p_ItemType");
		RewriteRuleSubtreeStream stream_p_OccurrenceIndicator=new RewriteRuleSubtreeStream(adaptor,"rule p_OccurrenceIndicator");

		try {
			// XQueryParser.g:1132:9: (k= EMPTY_SEQUENCE l= LPAREN r= RPAREN -> ^( SequenceType ^( EmptySequenceTest $k $l $r) ) |it= p_ItemType ( ( p_OccurrenceIndicator )=>oi= p_OccurrenceIndicator )? -> ^( SequenceType $it ( $oi)? ) )
			int alt161=2;
			int LA161_0 = input.LA(1);
			if ( (LA161_0==EMPTY_SEQUENCE) ) {
				int LA161_1 = input.LA(2);
				if ( (LA161_1==LPAREN) ) {
					alt161=1;
				}
				else if ( (LA161_1==EOF||LA161_1==AFTER||LA161_1==ALLOWING||LA161_1==AND||(LA161_1 >= AS && LA161_1 <= AT)||LA161_1==BEFORE||LA161_1==BIND||LA161_1==CASE||LA161_1==COLLATION||LA161_1==COLON||LA161_1==COMMA||LA161_1==CONCAT||LA161_1==CONTAINS||LA161_1==COUNT||LA161_1==DEFAULT||LA161_1==DESCENDING||LA161_1==DIV||LA161_1==EMPTY||LA161_1==END||(LA161_1 >= EQ && LA161_1 <= EQUAL)||LA161_1==EXCEPT||LA161_1==EXTERNAL||LA161_1==FOR||(LA161_1 >= GE && LA161_1 <= GREATER_GREATER)||LA161_1==GROUP||LA161_1==GT||LA161_1==IDIV||LA161_1==IN||LA161_1==INSTANCE||(LA161_1 >= INTERSECT && LA161_1 <= IS)||(LA161_1 >= LBRACKET && LA161_1 <= LE)||LA161_1==LET||LA161_1==LT||LA161_1==MINUS||(LA161_1 >= MOD && LA161_1 <= MODIFY)||LA161_1==NE||LA161_1==NOTEQUAL||LA161_1==ONLY||(LA161_1 >= OR && LA161_1 <= ORDER)||LA161_1==PARAGRAPHS||LA161_1==PLUS||LA161_1==QUESTION||LA161_1==RBRACKET||LA161_1==RETURN||(LA161_1 >= RPAREN && LA161_1 <= RSQUARE)||LA161_1==SATISFIES||LA161_1==SCORE||LA161_1==SEMICOLON||LA161_1==SENTENCES||(LA161_1 >= SMALLER && LA161_1 <= SMALLER_SMALLER)||(LA161_1 >= STABLE && LA161_1 <= START)||(LA161_1 >= TIMES && LA161_1 <= TO)||LA161_1==UNION||LA161_1==VBAR||LA161_1==WHERE||LA161_1==WITH||LA161_1==WORDS) ) {
					alt161=2;
				}

				else {
					if (state.backtracking>0) {state.failed=true; return retval;}
					int nvaeMark = input.mark();
					try {
						input.consume();
						NoViableAltException nvae =
							new NoViableAltException("", 161, 1, input);
						throw nvae;
					} finally {
						input.rewind(nvaeMark);
					}
				}

			}
			else if ( ((LA161_0 >= AFTER && LA161_0 <= ALLOWING)||(LA161_0 >= AMP_ER && LA161_0 <= AND)||LA161_0==ANY||(LA161_0 >= APOS_ER && LA161_0 <= ATTRIBUTE)||(LA161_0 >= BASE_URI && LA161_0 <= BINARY)||(LA161_0 >= BOUNDARY_SPACE && LA161_0 <= CATCH)||(LA161_0 >= CHECK && LA161_0 <= CHILD)||(LA161_0 >= COLLATION && LA161_0 <= COLLECTION)||LA161_0==COMMENT||(LA161_0 >= CONSTRAINT && LA161_0 <= DOCUMENT_NODE)||(LA161_0 >= ELEMENT && LA161_0 <= EMPTY)||(LA161_0 >= ENCODING && LA161_0 <= EQ)||(LA161_0 >= EVERY && LA161_0 <= GE)||(LA161_0 >= GREATEST && LA161_0 <= GT)||(LA161_0 >= IDIV && LA161_0 <= LAX)||(LA161_0 >= LE && LA161_0 <= LPAREN)||LA161_0==LT||LA161_0==L_NCName||(LA161_0 >= MINUS_SIGN && LA161_0 <= NAN)||(LA161_0 >= NE && LA161_0 <= NOT)||(LA161_0 >= NO_INHERIT && LA161_0 <= PHRASE)||(LA161_0 >= PRECEDING && LA161_0 <= PROCESSING_INSTRUCTION)||LA161_0==QUOT_ER||(LA161_0 >= RELATIONSHIP && LA161_0 <= REVALIDATION)||(LA161_0 >= SAME && LA161_0 <= SELF)||(LA161_0 >= SENSITIVE && LA161_0 <= SKIP)||LA161_0==SLIDING||(LA161_0 >= SOME && LA161_0 <= STABLE)||(LA161_0 >= START && LA161_0 <= STRIP)||(LA161_0 >= SWITCH && LA161_0 <= UNORDERED)||(LA161_0 >= UPPERCASE && LA161_0 <= VARIABLE)||(LA161_0 >= VERSION && LA161_0 <= WORDS)||(LA161_0 >= XQUERY && LA161_0 <= ZERO_DIGIT)||LA161_0==EXPLICITLY) ) {
				alt161=2;
			}

			else {
				if (state.backtracking>0) {state.failed=true; return retval;}
				NoViableAltException nvae =
					new NoViableAltException("", 161, 0, input);
				throw nvae;
			}

			switch (alt161) {
				case 1 :
					// XQueryParser.g:1132:11: k= EMPTY_SEQUENCE l= LPAREN r= RPAREN
					{
					k=(CommonToken)match(input,EMPTY_SEQUENCE,FOLLOW_EMPTY_SEQUENCE_in_p_SequenceType9400); if (state.failed) return retval; 
					if ( state.backtracking==0 ) stream_EMPTY_SEQUENCE.add(k);

					if ( state.backtracking==0 ) {ak(k);}
					l=(CommonToken)match(input,LPAREN,FOLLOW_LPAREN_in_p_SequenceType9406); if (state.failed) return retval; 
					if ( state.backtracking==0 ) stream_LPAREN.add(l);

					r=(CommonToken)match(input,RPAREN,FOLLOW_RPAREN_in_p_SequenceType9410); if (state.failed) return retval; 
					if ( state.backtracking==0 ) stream_RPAREN.add(r);

					// AST REWRITE
					// elements: l, r, k
					// token labels: r, l, k
					// rule labels: retval
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					if ( state.backtracking==0 ) {
					retval.tree = root_0;
					RewriteRuleTokenStream stream_r=new RewriteRuleTokenStream(adaptor,"token r",r);
					RewriteRuleTokenStream stream_l=new RewriteRuleTokenStream(adaptor,"token l",l);
					RewriteRuleTokenStream stream_k=new RewriteRuleTokenStream(adaptor,"token k",k);
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.getTree():null);

					root_0 = (XQDTCommonTree)adaptor.nil();
					// 1133:17: -> ^( SequenceType ^( EmptySequenceTest $k $l $r) )
					{
						// XQueryParser.g:1133:20: ^( SequenceType ^( EmptySequenceTest $k $l $r) )
						{
						XQDTCommonTree root_1 = (XQDTCommonTree)adaptor.nil();
						root_1 = (XQDTCommonTree)adaptor.becomeRoot((XQDTCommonTree)adaptor.create(SequenceType, "SequenceType"), root_1);
						// XQueryParser.g:1133:35: ^( EmptySequenceTest $k $l $r)
						{
						XQDTCommonTree root_2 = (XQDTCommonTree)adaptor.nil();
						root_2 = (XQDTCommonTree)adaptor.becomeRoot((XQDTCommonTree)adaptor.create(EmptySequenceTest, "EmptySequenceTest"), root_2);
						adaptor.addChild(root_2, stream_k.nextNode());
						adaptor.addChild(root_2, stream_l.nextNode());
						adaptor.addChild(root_2, stream_r.nextNode());
						adaptor.addChild(root_1, root_2);
						}

						adaptor.addChild(root_0, root_1);
						}

					}


					retval.tree = root_0;
					}

					}
					break;
				case 2 :
					// XQueryParser.g:1134:11: it= p_ItemType ( ( p_OccurrenceIndicator )=>oi= p_OccurrenceIndicator )?
					{
					pushFollow(FOLLOW_p_ItemType_in_p_SequenceType9459);
					it=p_ItemType();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) stream_p_ItemType.add(it.getTree());
					// XQueryParser.g:1134:25: ( ( p_OccurrenceIndicator )=>oi= p_OccurrenceIndicator )?
					int alt160=2;
					alt160 = dfa160.predict(input);
					switch (alt160) {
						case 1 :
							// XQueryParser.g:1134:26: ( p_OccurrenceIndicator )=>oi= p_OccurrenceIndicator
							{
							pushFollow(FOLLOW_p_OccurrenceIndicator_in_p_SequenceType9470);
							oi=p_OccurrenceIndicator();
							state._fsp--;
							if (state.failed) return retval;
							if ( state.backtracking==0 ) stream_p_OccurrenceIndicator.add(oi.getTree());
							}
							break;

					}

					// AST REWRITE
					// elements: it, oi
					// token labels: 
					// rule labels: retval, it, oi
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					if ( state.backtracking==0 ) {
					retval.tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.getTree():null);
					RewriteRuleSubtreeStream stream_it=new RewriteRuleSubtreeStream(adaptor,"rule it",it!=null?it.getTree():null);
					RewriteRuleSubtreeStream stream_oi=new RewriteRuleSubtreeStream(adaptor,"rule oi",oi!=null?oi.getTree():null);

					root_0 = (XQDTCommonTree)adaptor.nil();
					// 1135:17: -> ^( SequenceType $it ( $oi)? )
					{
						// XQueryParser.g:1135:20: ^( SequenceType $it ( $oi)? )
						{
						XQDTCommonTree root_1 = (XQDTCommonTree)adaptor.nil();
						root_1 = (XQDTCommonTree)adaptor.becomeRoot((XQDTCommonTree)adaptor.create(SequenceType, "SequenceType"), root_1);
						adaptor.addChild(root_1, stream_it.nextTree());
						// XQueryParser.g:1135:40: ( $oi)?
						if ( stream_oi.hasNext() ) {
							adaptor.addChild(root_1, stream_oi.nextTree());
						}
						stream_oi.reset();

						adaptor.addChild(root_0, root_1);
						}

					}


					retval.tree = root_0;
					}

					}
					break;

			}
			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (XQDTCommonTree)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
			retval.tree = (XQDTCommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "p_SequenceType"


	public static class p_OccurrenceIndicator_return extends ParserRuleReturnScope {
		XQDTCommonTree tree;
		@Override
		public XQDTCommonTree getTree() { return tree; }
	};


	// $ANTLR start "p_OccurrenceIndicator"
	// XQueryParser.g:1139:1: p_OccurrenceIndicator : ( QUESTION | STAR | PLUS );
	public final XQueryParser.p_OccurrenceIndicator_return p_OccurrenceIndicator() throws RecognitionException {
		XQueryParser.p_OccurrenceIndicator_return retval = new XQueryParser.p_OccurrenceIndicator_return();
		retval.start = input.LT(1);

		XQDTCommonTree root_0 = null;

		CommonToken set489=null;

		XQDTCommonTree set489_tree=null;

		try {
			// XQueryParser.g:1140:9: ( QUESTION | STAR | PLUS )
			// XQueryParser.g:
			{
			root_0 = (XQDTCommonTree)adaptor.nil();


			set489=(CommonToken)input.LT(1);
			if ( input.LA(1)==PLUS||input.LA(1)==QUESTION||input.LA(1)==STAR ) {
				input.consume();
				if ( state.backtracking==0 ) adaptor.addChild(root_0, (XQDTCommonTree)adaptor.create(set489));
				state.errorRecovery=false;
				state.failed=false;
			}
			else {
				if (state.backtracking>0) {state.failed=true; return retval;}
				MismatchedSetException mse = new MismatchedSetException(null,input);
				throw mse;
			}
			}

			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (XQDTCommonTree)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
			retval.tree = (XQDTCommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "p_OccurrenceIndicator"


	public static class p_ItemType_return extends ParserRuleReturnScope {
		XQDTCommonTree tree;
		@Override
		public XQDTCommonTree getTree() { return tree; }
	};


	// $ANTLR start "p_ItemType"
	// XQueryParser.g:1144:1: p_ItemType : ( p_KindTest -> ^( KindTest p_KindTest ) |{...}? => ( BINARY LPAREN RPAREN ) -> ^( BinaryTest BINARY LPAREN RPAREN ) | ( ITEM LPAREN RPAREN ) -> ^( ItemTest ITEM LPAREN RPAREN ) | p_AtomicOrUnionType | p_ParenthesizedItemType );
	public final XQueryParser.p_ItemType_return p_ItemType() throws RecognitionException {
		XQueryParser.p_ItemType_return retval = new XQueryParser.p_ItemType_return();
		retval.start = input.LT(1);

		XQDTCommonTree root_0 = null;

		CommonToken BINARY491=null;
		CommonToken LPAREN492=null;
		CommonToken RPAREN493=null;
		CommonToken ITEM494=null;
		CommonToken LPAREN495=null;
		CommonToken RPAREN496=null;
		ParserRuleReturnScope p_KindTest490 =null;
		ParserRuleReturnScope p_AtomicOrUnionType497 =null;
		ParserRuleReturnScope p_ParenthesizedItemType498 =null;

		XQDTCommonTree BINARY491_tree=null;
		XQDTCommonTree LPAREN492_tree=null;
		XQDTCommonTree RPAREN493_tree=null;
		XQDTCommonTree ITEM494_tree=null;
		XQDTCommonTree LPAREN495_tree=null;
		XQDTCommonTree RPAREN496_tree=null;
		RewriteRuleTokenStream stream_RPAREN=new RewriteRuleTokenStream(adaptor,"token RPAREN");
		RewriteRuleTokenStream stream_ITEM=new RewriteRuleTokenStream(adaptor,"token ITEM");
		RewriteRuleTokenStream stream_BINARY=new RewriteRuleTokenStream(adaptor,"token BINARY");
		RewriteRuleTokenStream stream_LPAREN=new RewriteRuleTokenStream(adaptor,"token LPAREN");
		RewriteRuleSubtreeStream stream_p_KindTest=new RewriteRuleSubtreeStream(adaptor,"rule p_KindTest");

		try {
			// XQueryParser.g:1145:9: ( p_KindTest -> ^( KindTest p_KindTest ) |{...}? => ( BINARY LPAREN RPAREN ) -> ^( BinaryTest BINARY LPAREN RPAREN ) | ( ITEM LPAREN RPAREN ) -> ^( ItemTest ITEM LPAREN RPAREN ) | p_AtomicOrUnionType | p_ParenthesizedItemType )
			int alt162=5;
			switch ( input.LA(1) ) {
			case DOCUMENT_NODE:
				{
				int LA162_1 = input.LA(2);
				if ( (LA162_1==LPAREN) ) {
					alt162=1;
				}
				else if ( (LA162_1==EOF||LA162_1==AFTER||LA162_1==ALLOWING||LA162_1==AND||(LA162_1 >= AS && LA162_1 <= AT)||LA162_1==BEFORE||LA162_1==BIND||LA162_1==CASE||LA162_1==COLLATION||LA162_1==COLON||LA162_1==COMMA||LA162_1==CONCAT||LA162_1==CONTAINS||LA162_1==COUNT||LA162_1==DEFAULT||LA162_1==DESCENDING||LA162_1==DIV||LA162_1==EMPTY||LA162_1==END||(LA162_1 >= EQ && LA162_1 <= EQUAL)||LA162_1==EXCEPT||LA162_1==EXTERNAL||LA162_1==FOR||(LA162_1 >= GE && LA162_1 <= GREATER_GREATER)||LA162_1==GROUP||LA162_1==GT||LA162_1==IDIV||LA162_1==IN||LA162_1==INSTANCE||(LA162_1 >= INTERSECT && LA162_1 <= IS)||(LA162_1 >= LBRACKET && LA162_1 <= LE)||LA162_1==LET||LA162_1==LT||LA162_1==MINUS||(LA162_1 >= MOD && LA162_1 <= MODIFY)||LA162_1==NE||LA162_1==NOTEQUAL||LA162_1==ONLY||(LA162_1 >= OR && LA162_1 <= ORDER)||LA162_1==PARAGRAPHS||LA162_1==PLUS||LA162_1==QUESTION||LA162_1==RBRACKET||LA162_1==RETURN||(LA162_1 >= RPAREN && LA162_1 <= RSQUARE)||LA162_1==SATISFIES||LA162_1==SCORE||LA162_1==SEMICOLON||LA162_1==SENTENCES||(LA162_1 >= SMALLER && LA162_1 <= SMALLER_SMALLER)||(LA162_1 >= STABLE && LA162_1 <= START)||(LA162_1 >= TIMES && LA162_1 <= TO)||LA162_1==UNION||LA162_1==VBAR||LA162_1==WHERE||LA162_1==WITH||LA162_1==WORDS) ) {
					alt162=4;
				}

				else {
					if (state.backtracking>0) {state.failed=true; return retval;}
					int nvaeMark = input.mark();
					try {
						input.consume();
						NoViableAltException nvae =
							new NoViableAltException("", 162, 1, input);
						throw nvae;
					} finally {
						input.rewind(nvaeMark);
					}
				}

				}
				break;
			case ELEMENT:
				{
				int LA162_2 = input.LA(2);
				if ( (LA162_2==LPAREN) ) {
					alt162=1;
				}
				else if ( (LA162_2==EOF||LA162_2==AFTER||LA162_2==ALLOWING||LA162_2==AND||(LA162_2 >= AS && LA162_2 <= AT)||LA162_2==BEFORE||LA162_2==BIND||LA162_2==CASE||LA162_2==COLLATION||LA162_2==COLON||LA162_2==COMMA||LA162_2==CONCAT||LA162_2==CONTAINS||LA162_2==COUNT||LA162_2==DEFAULT||LA162_2==DESCENDING||LA162_2==DIV||LA162_2==EMPTY||LA162_2==END||(LA162_2 >= EQ && LA162_2 <= EQUAL)||LA162_2==EXCEPT||LA162_2==EXTERNAL||LA162_2==FOR||(LA162_2 >= GE && LA162_2 <= GREATER_GREATER)||LA162_2==GROUP||LA162_2==GT||LA162_2==IDIV||LA162_2==IN||LA162_2==INSTANCE||(LA162_2 >= INTERSECT && LA162_2 <= IS)||(LA162_2 >= LBRACKET && LA162_2 <= LE)||LA162_2==LET||LA162_2==LT||LA162_2==MINUS||(LA162_2 >= MOD && LA162_2 <= MODIFY)||LA162_2==NE||LA162_2==NOTEQUAL||LA162_2==ONLY||(LA162_2 >= OR && LA162_2 <= ORDER)||LA162_2==PARAGRAPHS||LA162_2==PLUS||LA162_2==QUESTION||LA162_2==RBRACKET||LA162_2==RETURN||(LA162_2 >= RPAREN && LA162_2 <= RSQUARE)||LA162_2==SATISFIES||LA162_2==SCORE||LA162_2==SEMICOLON||LA162_2==SENTENCES||(LA162_2 >= SMALLER && LA162_2 <= SMALLER_SMALLER)||(LA162_2 >= STABLE && LA162_2 <= START)||(LA162_2 >= TIMES && LA162_2 <= TO)||LA162_2==UNION||LA162_2==VBAR||LA162_2==WHERE||LA162_2==WITH||LA162_2==WORDS) ) {
					alt162=4;
				}

				else {
					if (state.backtracking>0) {state.failed=true; return retval;}
					int nvaeMark = input.mark();
					try {
						input.consume();
						NoViableAltException nvae =
							new NoViableAltException("", 162, 2, input);
						throw nvae;
					} finally {
						input.rewind(nvaeMark);
					}
				}

				}
				break;
			case ATTRIBUTE:
				{
				int LA162_3 = input.LA(2);
				if ( (LA162_3==LPAREN) ) {
					alt162=1;
				}
				else if ( (LA162_3==EOF||LA162_3==AFTER||LA162_3==ALLOWING||LA162_3==AND||(LA162_3 >= AS && LA162_3 <= AT)||LA162_3==BEFORE||LA162_3==BIND||LA162_3==CASE||LA162_3==COLLATION||LA162_3==COLON||LA162_3==COMMA||LA162_3==CONCAT||LA162_3==CONTAINS||LA162_3==COUNT||LA162_3==DEFAULT||LA162_3==DESCENDING||LA162_3==DIV||LA162_3==EMPTY||LA162_3==END||(LA162_3 >= EQ && LA162_3 <= EQUAL)||LA162_3==EXCEPT||LA162_3==EXTERNAL||LA162_3==FOR||(LA162_3 >= GE && LA162_3 <= GREATER_GREATER)||LA162_3==GROUP||LA162_3==GT||LA162_3==IDIV||LA162_3==IN||LA162_3==INSTANCE||(LA162_3 >= INTERSECT && LA162_3 <= IS)||(LA162_3 >= LBRACKET && LA162_3 <= LE)||LA162_3==LET||LA162_3==LT||LA162_3==MINUS||(LA162_3 >= MOD && LA162_3 <= MODIFY)||LA162_3==NE||LA162_3==NOTEQUAL||LA162_3==ONLY||(LA162_3 >= OR && LA162_3 <= ORDER)||LA162_3==PARAGRAPHS||LA162_3==PLUS||LA162_3==QUESTION||LA162_3==RBRACKET||LA162_3==RETURN||(LA162_3 >= RPAREN && LA162_3 <= RSQUARE)||LA162_3==SATISFIES||LA162_3==SCORE||LA162_3==SEMICOLON||LA162_3==SENTENCES||(LA162_3 >= SMALLER && LA162_3 <= SMALLER_SMALLER)||(LA162_3 >= STABLE && LA162_3 <= START)||(LA162_3 >= TIMES && LA162_3 <= TO)||LA162_3==UNION||LA162_3==VBAR||LA162_3==WHERE||LA162_3==WITH||LA162_3==WORDS) ) {
					alt162=4;
				}

				else {
					if (state.backtracking>0) {state.failed=true; return retval;}
					int nvaeMark = input.mark();
					try {
						input.consume();
						NoViableAltException nvae =
							new NoViableAltException("", 162, 3, input);
						throw nvae;
					} finally {
						input.rewind(nvaeMark);
					}
				}

				}
				break;
			case SCHEMA_ELEMENT:
				{
				int LA162_4 = input.LA(2);
				if ( (LA162_4==LPAREN) ) {
					alt162=1;
				}
				else if ( (LA162_4==EOF||LA162_4==AFTER||LA162_4==ALLOWING||LA162_4==AND||(LA162_4 >= AS && LA162_4 <= AT)||LA162_4==BEFORE||LA162_4==BIND||LA162_4==CASE||LA162_4==COLLATION||LA162_4==COLON||LA162_4==COMMA||LA162_4==CONCAT||LA162_4==CONTAINS||LA162_4==COUNT||LA162_4==DEFAULT||LA162_4==DESCENDING||LA162_4==DIV||LA162_4==EMPTY||LA162_4==END||(LA162_4 >= EQ && LA162_4 <= EQUAL)||LA162_4==EXCEPT||LA162_4==EXTERNAL||LA162_4==FOR||(LA162_4 >= GE && LA162_4 <= GREATER_GREATER)||LA162_4==GROUP||LA162_4==GT||LA162_4==IDIV||LA162_4==IN||LA162_4==INSTANCE||(LA162_4 >= INTERSECT && LA162_4 <= IS)||(LA162_4 >= LBRACKET && LA162_4 <= LE)||LA162_4==LET||LA162_4==LT||LA162_4==MINUS||(LA162_4 >= MOD && LA162_4 <= MODIFY)||LA162_4==NE||LA162_4==NOTEQUAL||LA162_4==ONLY||(LA162_4 >= OR && LA162_4 <= ORDER)||LA162_4==PARAGRAPHS||LA162_4==PLUS||LA162_4==QUESTION||LA162_4==RBRACKET||LA162_4==RETURN||(LA162_4 >= RPAREN && LA162_4 <= RSQUARE)||LA162_4==SATISFIES||LA162_4==SCORE||LA162_4==SEMICOLON||LA162_4==SENTENCES||(LA162_4 >= SMALLER && LA162_4 <= SMALLER_SMALLER)||(LA162_4 >= STABLE && LA162_4 <= START)||(LA162_4 >= TIMES && LA162_4 <= TO)||LA162_4==UNION||LA162_4==VBAR||LA162_4==WHERE||LA162_4==WITH||LA162_4==WORDS) ) {
					alt162=4;
				}

				else {
					if (state.backtracking>0) {state.failed=true; return retval;}
					int nvaeMark = input.mark();
					try {
						input.consume();
						NoViableAltException nvae =
							new NoViableAltException("", 162, 4, input);
						throw nvae;
					} finally {
						input.rewind(nvaeMark);
					}
				}

				}
				break;
			case SCHEMA_ATTRIBUTE:
				{
				int LA162_5 = input.LA(2);
				if ( (LA162_5==LPAREN) ) {
					alt162=1;
				}
				else if ( (LA162_5==EOF||LA162_5==AFTER||LA162_5==ALLOWING||LA162_5==AND||(LA162_5 >= AS && LA162_5 <= AT)||LA162_5==BEFORE||LA162_5==BIND||LA162_5==CASE||LA162_5==COLLATION||LA162_5==COLON||LA162_5==COMMA||LA162_5==CONCAT||LA162_5==CONTAINS||LA162_5==COUNT||LA162_5==DEFAULT||LA162_5==DESCENDING||LA162_5==DIV||LA162_5==EMPTY||LA162_5==END||(LA162_5 >= EQ && LA162_5 <= EQUAL)||LA162_5==EXCEPT||LA162_5==EXTERNAL||LA162_5==FOR||(LA162_5 >= GE && LA162_5 <= GREATER_GREATER)||LA162_5==GROUP||LA162_5==GT||LA162_5==IDIV||LA162_5==IN||LA162_5==INSTANCE||(LA162_5 >= INTERSECT && LA162_5 <= IS)||(LA162_5 >= LBRACKET && LA162_5 <= LE)||LA162_5==LET||LA162_5==LT||LA162_5==MINUS||(LA162_5 >= MOD && LA162_5 <= MODIFY)||LA162_5==NE||LA162_5==NOTEQUAL||LA162_5==ONLY||(LA162_5 >= OR && LA162_5 <= ORDER)||LA162_5==PARAGRAPHS||LA162_5==PLUS||LA162_5==QUESTION||LA162_5==RBRACKET||LA162_5==RETURN||(LA162_5 >= RPAREN && LA162_5 <= RSQUARE)||LA162_5==SATISFIES||LA162_5==SCORE||LA162_5==SEMICOLON||LA162_5==SENTENCES||(LA162_5 >= SMALLER && LA162_5 <= SMALLER_SMALLER)||(LA162_5 >= STABLE && LA162_5 <= START)||(LA162_5 >= TIMES && LA162_5 <= TO)||LA162_5==UNION||LA162_5==VBAR||LA162_5==WHERE||LA162_5==WITH||LA162_5==WORDS) ) {
					alt162=4;
				}

				else {
					if (state.backtracking>0) {state.failed=true; return retval;}
					int nvaeMark = input.mark();
					try {
						input.consume();
						NoViableAltException nvae =
							new NoViableAltException("", 162, 5, input);
						throw nvae;
					} finally {
						input.rewind(nvaeMark);
					}
				}

				}
				break;
			case PROCESSING_INSTRUCTION:
				{
				int LA162_6 = input.LA(2);
				if ( (LA162_6==LPAREN) ) {
					alt162=1;
				}
				else if ( (LA162_6==EOF||LA162_6==AFTER||LA162_6==ALLOWING||LA162_6==AND||(LA162_6 >= AS && LA162_6 <= AT)||LA162_6==BEFORE||LA162_6==BIND||LA162_6==CASE||LA162_6==COLLATION||LA162_6==COLON||LA162_6==COMMA||LA162_6==CONCAT||LA162_6==CONTAINS||LA162_6==COUNT||LA162_6==DEFAULT||LA162_6==DESCENDING||LA162_6==DIV||LA162_6==EMPTY||LA162_6==END||(LA162_6 >= EQ && LA162_6 <= EQUAL)||LA162_6==EXCEPT||LA162_6==EXTERNAL||LA162_6==FOR||(LA162_6 >= GE && LA162_6 <= GREATER_GREATER)||LA162_6==GROUP||LA162_6==GT||LA162_6==IDIV||LA162_6==IN||LA162_6==INSTANCE||(LA162_6 >= INTERSECT && LA162_6 <= IS)||(LA162_6 >= LBRACKET && LA162_6 <= LE)||LA162_6==LET||LA162_6==LT||LA162_6==MINUS||(LA162_6 >= MOD && LA162_6 <= MODIFY)||LA162_6==NE||LA162_6==NOTEQUAL||LA162_6==ONLY||(LA162_6 >= OR && LA162_6 <= ORDER)||LA162_6==PARAGRAPHS||LA162_6==PLUS||LA162_6==QUESTION||LA162_6==RBRACKET||LA162_6==RETURN||(LA162_6 >= RPAREN && LA162_6 <= RSQUARE)||LA162_6==SATISFIES||LA162_6==SCORE||LA162_6==SEMICOLON||LA162_6==SENTENCES||(LA162_6 >= SMALLER && LA162_6 <= SMALLER_SMALLER)||(LA162_6 >= STABLE && LA162_6 <= START)||(LA162_6 >= TIMES && LA162_6 <= TO)||LA162_6==UNION||LA162_6==VBAR||LA162_6==WHERE||LA162_6==WITH||LA162_6==WORDS) ) {
					alt162=4;
				}

				else {
					if (state.backtracking>0) {state.failed=true; return retval;}
					int nvaeMark = input.mark();
					try {
						input.consume();
						NoViableAltException nvae =
							new NoViableAltException("", 162, 6, input);
						throw nvae;
					} finally {
						input.rewind(nvaeMark);
					}
				}

				}
				break;
			case COMMENT:
				{
				int LA162_7 = input.LA(2);
				if ( (LA162_7==LPAREN) ) {
					alt162=1;
				}
				else if ( (LA162_7==EOF||LA162_7==AFTER||LA162_7==ALLOWING||LA162_7==AND||(LA162_7 >= AS && LA162_7 <= AT)||LA162_7==BEFORE||LA162_7==BIND||LA162_7==CASE||LA162_7==COLLATION||LA162_7==COLON||LA162_7==COMMA||LA162_7==CONCAT||LA162_7==CONTAINS||LA162_7==COUNT||LA162_7==DEFAULT||LA162_7==DESCENDING||LA162_7==DIV||LA162_7==EMPTY||LA162_7==END||(LA162_7 >= EQ && LA162_7 <= EQUAL)||LA162_7==EXCEPT||LA162_7==EXTERNAL||LA162_7==FOR||(LA162_7 >= GE && LA162_7 <= GREATER_GREATER)||LA162_7==GROUP||LA162_7==GT||LA162_7==IDIV||LA162_7==IN||LA162_7==INSTANCE||(LA162_7 >= INTERSECT && LA162_7 <= IS)||(LA162_7 >= LBRACKET && LA162_7 <= LE)||LA162_7==LET||LA162_7==LT||LA162_7==MINUS||(LA162_7 >= MOD && LA162_7 <= MODIFY)||LA162_7==NE||LA162_7==NOTEQUAL||LA162_7==ONLY||(LA162_7 >= OR && LA162_7 <= ORDER)||LA162_7==PARAGRAPHS||LA162_7==PLUS||LA162_7==QUESTION||LA162_7==RBRACKET||LA162_7==RETURN||(LA162_7 >= RPAREN && LA162_7 <= RSQUARE)||LA162_7==SATISFIES||LA162_7==SCORE||LA162_7==SEMICOLON||LA162_7==SENTENCES||(LA162_7 >= SMALLER && LA162_7 <= SMALLER_SMALLER)||(LA162_7 >= STABLE && LA162_7 <= START)||(LA162_7 >= TIMES && LA162_7 <= TO)||LA162_7==UNION||LA162_7==VBAR||LA162_7==WHERE||LA162_7==WITH||LA162_7==WORDS) ) {
					alt162=4;
				}

				else {
					if (state.backtracking>0) {state.failed=true; return retval;}
					int nvaeMark = input.mark();
					try {
						input.consume();
						NoViableAltException nvae =
							new NoViableAltException("", 162, 7, input);
						throw nvae;
					} finally {
						input.rewind(nvaeMark);
					}
				}

				}
				break;
			case TEXT:
				{
				int LA162_8 = input.LA(2);
				if ( (LA162_8==LPAREN) ) {
					alt162=1;
				}
				else if ( (LA162_8==EOF||LA162_8==AFTER||LA162_8==ALLOWING||LA162_8==AND||(LA162_8 >= AS && LA162_8 <= AT)||LA162_8==BEFORE||LA162_8==BIND||LA162_8==CASE||LA162_8==COLLATION||LA162_8==COLON||LA162_8==COMMA||LA162_8==CONCAT||LA162_8==CONTAINS||LA162_8==COUNT||LA162_8==DEFAULT||LA162_8==DESCENDING||LA162_8==DIV||LA162_8==EMPTY||LA162_8==END||(LA162_8 >= EQ && LA162_8 <= EQUAL)||LA162_8==EXCEPT||LA162_8==EXTERNAL||LA162_8==FOR||(LA162_8 >= GE && LA162_8 <= GREATER_GREATER)||LA162_8==GROUP||LA162_8==GT||LA162_8==IDIV||LA162_8==IN||LA162_8==INSTANCE||(LA162_8 >= INTERSECT && LA162_8 <= IS)||(LA162_8 >= LBRACKET && LA162_8 <= LE)||LA162_8==LET||LA162_8==LT||LA162_8==MINUS||(LA162_8 >= MOD && LA162_8 <= MODIFY)||LA162_8==NE||LA162_8==NOTEQUAL||LA162_8==ONLY||(LA162_8 >= OR && LA162_8 <= ORDER)||LA162_8==PARAGRAPHS||LA162_8==PLUS||LA162_8==QUESTION||LA162_8==RBRACKET||LA162_8==RETURN||(LA162_8 >= RPAREN && LA162_8 <= RSQUARE)||LA162_8==SATISFIES||LA162_8==SCORE||LA162_8==SEMICOLON||LA162_8==SENTENCES||(LA162_8 >= SMALLER && LA162_8 <= SMALLER_SMALLER)||(LA162_8 >= STABLE && LA162_8 <= START)||(LA162_8 >= TIMES && LA162_8 <= TO)||LA162_8==UNION||LA162_8==VBAR||LA162_8==WHERE||LA162_8==WITH||LA162_8==WORDS) ) {
					alt162=4;
				}

				else {
					if (state.backtracking>0) {state.failed=true; return retval;}
					int nvaeMark = input.mark();
					try {
						input.consume();
						NoViableAltException nvae =
							new NoViableAltException("", 162, 8, input);
						throw nvae;
					} finally {
						input.rewind(nvaeMark);
					}
				}

				}
				break;
			case NAMESPACE_NODE:
				{
				int LA162_9 = input.LA(2);
				if ( (LA162_9==LPAREN) ) {
					alt162=1;
				}
				else if ( (LA162_9==EOF||LA162_9==AFTER||LA162_9==ALLOWING||LA162_9==AND||(LA162_9 >= AS && LA162_9 <= AT)||LA162_9==BEFORE||LA162_9==BIND||LA162_9==CASE||LA162_9==COLLATION||LA162_9==COLON||LA162_9==COMMA||LA162_9==CONCAT||LA162_9==CONTAINS||LA162_9==COUNT||LA162_9==DEFAULT||LA162_9==DESCENDING||LA162_9==DIV||LA162_9==EMPTY||LA162_9==END||(LA162_9 >= EQ && LA162_9 <= EQUAL)||LA162_9==EXCEPT||LA162_9==EXTERNAL||LA162_9==FOR||(LA162_9 >= GE && LA162_9 <= GREATER_GREATER)||LA162_9==GROUP||LA162_9==GT||LA162_9==IDIV||LA162_9==IN||LA162_9==INSTANCE||(LA162_9 >= INTERSECT && LA162_9 <= IS)||(LA162_9 >= LBRACKET && LA162_9 <= LE)||LA162_9==LET||LA162_9==LT||LA162_9==MINUS||(LA162_9 >= MOD && LA162_9 <= MODIFY)||LA162_9==NE||LA162_9==NOTEQUAL||LA162_9==ONLY||(LA162_9 >= OR && LA162_9 <= ORDER)||LA162_9==PARAGRAPHS||LA162_9==PLUS||LA162_9==QUESTION||LA162_9==RBRACKET||LA162_9==RETURN||(LA162_9 >= RPAREN && LA162_9 <= RSQUARE)||LA162_9==SATISFIES||LA162_9==SCORE||LA162_9==SEMICOLON||LA162_9==SENTENCES||(LA162_9 >= SMALLER && LA162_9 <= SMALLER_SMALLER)||(LA162_9 >= STABLE && LA162_9 <= START)||(LA162_9 >= TIMES && LA162_9 <= TO)||LA162_9==UNION||LA162_9==VBAR||LA162_9==WHERE||LA162_9==WITH||LA162_9==WORDS) ) {
					alt162=4;
				}

				else {
					if (state.backtracking>0) {state.failed=true; return retval;}
					int nvaeMark = input.mark();
					try {
						input.consume();
						NoViableAltException nvae =
							new NoViableAltException("", 162, 9, input);
						throw nvae;
					} finally {
						input.rewind(nvaeMark);
					}
				}

				}
				break;
			case NODE:
				{
				int LA162_10 = input.LA(2);
				if ( (LA162_10==LPAREN) ) {
					alt162=1;
				}
				else if ( (LA162_10==EOF||LA162_10==AFTER||LA162_10==ALLOWING||LA162_10==AND||(LA162_10 >= AS && LA162_10 <= AT)||LA162_10==BEFORE||LA162_10==BIND||LA162_10==CASE||LA162_10==COLLATION||LA162_10==COLON||LA162_10==COMMA||LA162_10==CONCAT||LA162_10==CONTAINS||LA162_10==COUNT||LA162_10==DEFAULT||LA162_10==DESCENDING||LA162_10==DIV||LA162_10==EMPTY||LA162_10==END||(LA162_10 >= EQ && LA162_10 <= EQUAL)||LA162_10==EXCEPT||LA162_10==EXTERNAL||LA162_10==FOR||(LA162_10 >= GE && LA162_10 <= GREATER_GREATER)||LA162_10==GROUP||LA162_10==GT||LA162_10==IDIV||LA162_10==IN||LA162_10==INSTANCE||(LA162_10 >= INTERSECT && LA162_10 <= IS)||(LA162_10 >= LBRACKET && LA162_10 <= LE)||LA162_10==LET||LA162_10==LT||LA162_10==MINUS||(LA162_10 >= MOD && LA162_10 <= MODIFY)||LA162_10==NE||LA162_10==NOTEQUAL||LA162_10==ONLY||(LA162_10 >= OR && LA162_10 <= ORDER)||LA162_10==PARAGRAPHS||LA162_10==PLUS||LA162_10==QUESTION||LA162_10==RBRACKET||LA162_10==RETURN||(LA162_10 >= RPAREN && LA162_10 <= RSQUARE)||LA162_10==SATISFIES||LA162_10==SCORE||LA162_10==SEMICOLON||LA162_10==SENTENCES||(LA162_10 >= SMALLER && LA162_10 <= SMALLER_SMALLER)||(LA162_10 >= STABLE && LA162_10 <= START)||(LA162_10 >= TIMES && LA162_10 <= TO)||LA162_10==UNION||LA162_10==VBAR||LA162_10==WHERE||LA162_10==WITH||LA162_10==WORDS) ) {
					alt162=4;
				}

				else {
					if (state.backtracking>0) {state.failed=true; return retval;}
					int nvaeMark = input.mark();
					try {
						input.consume();
						NoViableAltException nvae =
							new NoViableAltException("", 162, 10, input);
						throw nvae;
					} finally {
						input.rewind(nvaeMark);
					}
				}

				}
				break;
			case BINARY:
				{
				int LA162_11 = input.LA(2);
				if ( (LA162_11==LPAREN) && ((lc(MLS)))) {
					alt162=2;
				}
				else if ( (LA162_11==EOF||LA162_11==AFTER||LA162_11==ALLOWING||LA162_11==AND||(LA162_11 >= AS && LA162_11 <= AT)||LA162_11==BEFORE||LA162_11==BIND||LA162_11==CASE||LA162_11==COLLATION||LA162_11==COLON||LA162_11==COMMA||LA162_11==CONCAT||LA162_11==CONTAINS||LA162_11==COUNT||LA162_11==DEFAULT||LA162_11==DESCENDING||LA162_11==DIV||LA162_11==EMPTY||LA162_11==END||(LA162_11 >= EQ && LA162_11 <= EQUAL)||LA162_11==EXCEPT||LA162_11==EXTERNAL||LA162_11==FOR||(LA162_11 >= GE && LA162_11 <= GREATER_GREATER)||LA162_11==GROUP||LA162_11==GT||LA162_11==IDIV||LA162_11==IN||LA162_11==INSTANCE||(LA162_11 >= INTERSECT && LA162_11 <= IS)||(LA162_11 >= LBRACKET && LA162_11 <= LE)||LA162_11==LET||LA162_11==LT||LA162_11==MINUS||(LA162_11 >= MOD && LA162_11 <= MODIFY)||LA162_11==NE||LA162_11==NOTEQUAL||LA162_11==ONLY||(LA162_11 >= OR && LA162_11 <= ORDER)||LA162_11==PARAGRAPHS||LA162_11==PLUS||LA162_11==QUESTION||LA162_11==RBRACKET||LA162_11==RETURN||(LA162_11 >= RPAREN && LA162_11 <= RSQUARE)||LA162_11==SATISFIES||LA162_11==SCORE||LA162_11==SEMICOLON||LA162_11==SENTENCES||(LA162_11 >= SMALLER && LA162_11 <= SMALLER_SMALLER)||(LA162_11 >= STABLE && LA162_11 <= START)||(LA162_11 >= TIMES && LA162_11 <= TO)||LA162_11==UNION||LA162_11==VBAR||LA162_11==WHERE||LA162_11==WITH||LA162_11==WORDS) ) {
					alt162=4;
				}

				else {
					if (state.backtracking>0) {state.failed=true; return retval;}
					int nvaeMark = input.mark();
					try {
						input.consume();
						NoViableAltException nvae =
							new NoViableAltException("", 162, 11, input);
						throw nvae;
					} finally {
						input.rewind(nvaeMark);
					}
				}

				}
				break;
			case ITEM:
				{
				int LA162_12 = input.LA(2);
				if ( (LA162_12==LPAREN) ) {
					alt162=3;
				}
				else if ( (LA162_12==EOF||LA162_12==AFTER||LA162_12==ALLOWING||LA162_12==AND||(LA162_12 >= AS && LA162_12 <= AT)||LA162_12==BEFORE||LA162_12==BIND||LA162_12==CASE||LA162_12==COLLATION||LA162_12==COLON||LA162_12==COMMA||LA162_12==CONCAT||LA162_12==CONTAINS||LA162_12==COUNT||LA162_12==DEFAULT||LA162_12==DESCENDING||LA162_12==DIV||LA162_12==EMPTY||LA162_12==END||(LA162_12 >= EQ && LA162_12 <= EQUAL)||LA162_12==EXCEPT||LA162_12==EXTERNAL||LA162_12==FOR||(LA162_12 >= GE && LA162_12 <= GREATER_GREATER)||LA162_12==GROUP||LA162_12==GT||LA162_12==IDIV||LA162_12==IN||LA162_12==INSTANCE||(LA162_12 >= INTERSECT && LA162_12 <= IS)||(LA162_12 >= LBRACKET && LA162_12 <= LE)||LA162_12==LET||LA162_12==LT||LA162_12==MINUS||(LA162_12 >= MOD && LA162_12 <= MODIFY)||LA162_12==NE||LA162_12==NOTEQUAL||LA162_12==ONLY||(LA162_12 >= OR && LA162_12 <= ORDER)||LA162_12==PARAGRAPHS||LA162_12==PLUS||LA162_12==QUESTION||LA162_12==RBRACKET||LA162_12==RETURN||(LA162_12 >= RPAREN && LA162_12 <= RSQUARE)||LA162_12==SATISFIES||LA162_12==SCORE||LA162_12==SEMICOLON||LA162_12==SENTENCES||(LA162_12 >= SMALLER && LA162_12 <= SMALLER_SMALLER)||(LA162_12 >= STABLE && LA162_12 <= START)||(LA162_12 >= TIMES && LA162_12 <= TO)||LA162_12==UNION||LA162_12==VBAR||LA162_12==WHERE||LA162_12==WITH||LA162_12==WORDS) ) {
					alt162=4;
				}

				else {
					if (state.backtracking>0) {state.failed=true; return retval;}
					int nvaeMark = input.mark();
					try {
						input.consume();
						NoViableAltException nvae =
							new NoViableAltException("", 162, 12, input);
						throw nvae;
					} finally {
						input.rewind(nvaeMark);
					}
				}

				}
				break;
			case AFTER:
			case ALL:
			case ALLOWING:
			case AMP_ER:
			case ANCESTOR:
			case ANCESTOR_OR_SELF:
			case AND:
			case ANY:
			case APOS_ER:
			case AS:
			case ASCENDING:
			case AT:
			case BASE_URI:
			case BEFORE:
			case BOUNDARY_SPACE:
			case BREAK:
			case BY:
			case CASE:
			case CAST:
			case CASTABLE:
			case CATCH:
			case CHECK:
			case CHILD:
			case COLLATION:
			case COLLECTION:
			case CONSTRAINT:
			case CONSTRUCTION:
			case CONTAINS:
			case CONTENT:
			case CONTEXT:
			case CONTINUE:
			case COPY:
			case COPY_NAMESPACES:
			case COUNT:
			case DECIMAL_FORMAT:
			case DECIMAL_SEPARATOR:
			case DECLARE:
			case DEFAULT:
			case DELETE:
			case DESCENDANT:
			case DESCENDANT_OR_SELF:
			case DESCENDING:
			case DIACRITICS:
			case DIFFERENT:
			case DIGIT:
			case DISTANCE:
			case DIV:
			case DOCUMENT:
			case ELSE:
			case EMPTY:
			case EMPTY_SEQUENCE:
			case ENCODING:
			case END:
			case ENTIRE:
			case EQ:
			case EVERY:
			case EXACTLY:
			case EXCEPT:
			case EXIT:
			case EXTERNAL:
			case FIRST:
			case FOLLOWING:
			case FOLLOWING_SIBLING:
			case FOR:
			case FOREACH:
			case FOREIGN:
			case FROM:
			case FTAND:
			case FTNOT:
			case FTOR:
			case FT_OPTION:
			case FUNCTION:
			case GE:
			case GREATEST:
			case GROUP:
			case GROUPING_SEPARATOR:
			case GT:
			case IDIV:
			case IF:
			case IMPORT:
			case IN:
			case INDEX:
			case INFINITY:
			case INHERIT:
			case INSENSITIVE:
			case INSERT:
			case INSTANCE:
			case INTEGRITY:
			case INTERSECT:
			case INTO:
			case IS:
			case KEY:
			case LANGUAGE:
			case LAST:
			case LAX:
			case LE:
			case LEAST:
			case LET:
			case LEVELS:
			case LOOP:
			case LOWERCASE:
			case LT:
			case L_NCName:
			case MINUS_SIGN:
			case MOD:
			case MODIFY:
			case MODULE:
			case MOST:
			case NAMESPACE:
			case NAN:
			case NE:
			case NEXT:
			case NO:
			case NODES:
			case NOT:
			case NO_INHERIT:
			case NO_PRESERVE:
			case OCCURS:
			case OF:
			case ON:
			case ONLY:
			case OPTION:
			case OR:
			case ORDER:
			case ORDERED:
			case ORDERING:
			case PARAGRAPH:
			case PARAGRAPHS:
			case PARENT:
			case PATTERN_SEPARATOR:
			case PERCENT:
			case PER_MILLE:
			case PHRASE:
			case PRECEDING:
			case PRECEDING_SIBLING:
			case PRESERVE:
			case PREVIOUS:
			case PRIVATE:
			case QUOT_ER:
			case RELATIONSHIP:
			case RENAME:
			case REPLACE:
			case RETURN:
			case RETURNING:
			case REVALIDATION:
			case SAME:
			case SATISFIES:
			case SCHEMA:
			case SCORE:
			case SELF:
			case SENSITIVE:
			case SENTENCE:
			case SENTENCES:
			case SKIP:
			case SLIDING:
			case SOME:
			case STABLE:
			case START:
			case STEMMING:
			case STOP:
			case STRICT:
			case STRIP:
			case SWITCH:
			case THEN:
			case THESAURUS:
			case TIMES:
			case TO:
			case TREAT:
			case TRY:
			case TUMBLING:
			case TYPE:
			case TYPESWITCH:
			case UNION:
			case UNIQUE:
			case UNORDERED:
			case UPPERCASE:
			case USING:
			case VALIDATE:
			case VALUE:
			case VARIABLE:
			case VERSION:
			case WEIGHT:
			case WHEN:
			case WHERE:
			case WHILE:
			case WILDCARDS:
			case WINDOW:
			case WITH:
			case WITHOUT:
			case WORD:
			case WORDS:
			case XQUERY:
			case ZERO_DIGIT:
			case EXPLICITLY:
				{
				alt162=4;
				}
				break;
			case LPAREN:
				{
				alt162=5;
				}
				break;
			default:
				if (state.backtracking>0) {state.failed=true; return retval;}
				NoViableAltException nvae =
					new NoViableAltException("", 162, 0, input);
				throw nvae;
			}
			switch (alt162) {
				case 1 :
					// XQueryParser.g:1145:11: p_KindTest
					{
					pushFollow(FOLLOW_p_KindTest_in_p_ItemType9572);
					p_KindTest490=p_KindTest();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) stream_p_KindTest.add(p_KindTest490.getTree());
					// AST REWRITE
					// elements: p_KindTest
					// token labels: 
					// rule labels: retval
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					if ( state.backtracking==0 ) {
					retval.tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.getTree():null);

					root_0 = (XQDTCommonTree)adaptor.nil();
					// 1146:17: -> ^( KindTest p_KindTest )
					{
						// XQueryParser.g:1146:20: ^( KindTest p_KindTest )
						{
						XQDTCommonTree root_1 = (XQDTCommonTree)adaptor.nil();
						root_1 = (XQDTCommonTree)adaptor.becomeRoot((XQDTCommonTree)adaptor.create(KindTest, "KindTest"), root_1);
						adaptor.addChild(root_1, stream_p_KindTest.nextTree());
						adaptor.addChild(root_0, root_1);
						}

					}


					retval.tree = root_0;
					}

					}
					break;
				case 2 :
					// XQueryParser.g:1147:11: {...}? => ( BINARY LPAREN RPAREN )
					{
					if ( !((lc(MLS))) ) {
						if (state.backtracking>0) {state.failed=true; return retval;}
						throw new FailedPredicateException(input, "p_ItemType", "lc(MLS)");
					}
					// XQueryParser.g:1147:24: ( BINARY LPAREN RPAREN )
					// XQueryParser.g:1147:25: BINARY LPAREN RPAREN
					{
					BINARY491=(CommonToken)match(input,BINARY,FOLLOW_BINARY_in_p_ItemType9612); if (state.failed) return retval; 
					if ( state.backtracking==0 ) stream_BINARY.add(BINARY491);

					LPAREN492=(CommonToken)match(input,LPAREN,FOLLOW_LPAREN_in_p_ItemType9614); if (state.failed) return retval; 
					if ( state.backtracking==0 ) stream_LPAREN.add(LPAREN492);

					RPAREN493=(CommonToken)match(input,RPAREN,FOLLOW_RPAREN_in_p_ItemType9616); if (state.failed) return retval; 
					if ( state.backtracking==0 ) stream_RPAREN.add(RPAREN493);

					}

					// AST REWRITE
					// elements: BINARY, RPAREN, LPAREN
					// token labels: 
					// rule labels: retval
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					if ( state.backtracking==0 ) {
					retval.tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.getTree():null);

					root_0 = (XQDTCommonTree)adaptor.nil();
					// 1148:17: -> ^( BinaryTest BINARY LPAREN RPAREN )
					{
						// XQueryParser.g:1148:20: ^( BinaryTest BINARY LPAREN RPAREN )
						{
						XQDTCommonTree root_1 = (XQDTCommonTree)adaptor.nil();
						root_1 = (XQDTCommonTree)adaptor.becomeRoot((XQDTCommonTree)adaptor.create(BinaryTest, "BinaryTest"), root_1);
						adaptor.addChild(root_1, stream_BINARY.nextNode());
						adaptor.addChild(root_1, stream_LPAREN.nextNode());
						adaptor.addChild(root_1, stream_RPAREN.nextNode());
						adaptor.addChild(root_0, root_1);
						}

					}


					retval.tree = root_0;
					}

					}
					break;
				case 3 :
					// XQueryParser.g:1149:11: ( ITEM LPAREN RPAREN )
					{
					// XQueryParser.g:1149:11: ( ITEM LPAREN RPAREN )
					// XQueryParser.g:1149:12: ITEM LPAREN RPAREN
					{
					ITEM494=(CommonToken)match(input,ITEM,FOLLOW_ITEM_in_p_ItemType9658); if (state.failed) return retval; 
					if ( state.backtracking==0 ) stream_ITEM.add(ITEM494);

					LPAREN495=(CommonToken)match(input,LPAREN,FOLLOW_LPAREN_in_p_ItemType9660); if (state.failed) return retval; 
					if ( state.backtracking==0 ) stream_LPAREN.add(LPAREN495);

					RPAREN496=(CommonToken)match(input,RPAREN,FOLLOW_RPAREN_in_p_ItemType9662); if (state.failed) return retval; 
					if ( state.backtracking==0 ) stream_RPAREN.add(RPAREN496);

					}

					// AST REWRITE
					// elements: LPAREN, ITEM, RPAREN
					// token labels: 
					// rule labels: retval
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					if ( state.backtracking==0 ) {
					retval.tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.getTree():null);

					root_0 = (XQDTCommonTree)adaptor.nil();
					// 1150:17: -> ^( ItemTest ITEM LPAREN RPAREN )
					{
						// XQueryParser.g:1150:20: ^( ItemTest ITEM LPAREN RPAREN )
						{
						XQDTCommonTree root_1 = (XQDTCommonTree)adaptor.nil();
						root_1 = (XQDTCommonTree)adaptor.becomeRoot((XQDTCommonTree)adaptor.create(ItemTest, "ItemTest"), root_1);
						adaptor.addChild(root_1, stream_ITEM.nextNode());
						adaptor.addChild(root_1, stream_LPAREN.nextNode());
						adaptor.addChild(root_1, stream_RPAREN.nextNode());
						adaptor.addChild(root_0, root_1);
						}

					}


					retval.tree = root_0;
					}

					}
					break;
				case 4 :
					// XQueryParser.g:1154:11: p_AtomicOrUnionType
					{
					root_0 = (XQDTCommonTree)adaptor.nil();


					pushFollow(FOLLOW_p_AtomicOrUnionType_in_p_ItemType9706);
					p_AtomicOrUnionType497=p_AtomicOrUnionType();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, p_AtomicOrUnionType497.getTree());

					}
					break;
				case 5 :
					// XQueryParser.g:1155:11: p_ParenthesizedItemType
					{
					root_0 = (XQDTCommonTree)adaptor.nil();


					pushFollow(FOLLOW_p_ParenthesizedItemType_in_p_ItemType9718);
					p_ParenthesizedItemType498=p_ParenthesizedItemType();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, p_ParenthesizedItemType498.getTree());

					}
					break;

			}
			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (XQDTCommonTree)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
			retval.tree = (XQDTCommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "p_ItemType"


	public static class p_AtomicOrUnionType_return extends ParserRuleReturnScope {
		XQDTCommonTree tree;
		@Override
		public XQDTCommonTree getTree() { return tree; }
	};


	// $ANTLR start "p_AtomicOrUnionType"
	// XQueryParser.g:1159:1: p_AtomicOrUnionType : p_QName -> ^( AtomicOrUnionType p_QName ) ;
	public final XQueryParser.p_AtomicOrUnionType_return p_AtomicOrUnionType() throws RecognitionException {
		XQueryParser.p_AtomicOrUnionType_return retval = new XQueryParser.p_AtomicOrUnionType_return();
		retval.start = input.LT(1);

		XQDTCommonTree root_0 = null;

		ParserRuleReturnScope p_QName499 =null;

		RewriteRuleSubtreeStream stream_p_QName=new RewriteRuleSubtreeStream(adaptor,"rule p_QName");

		try {
			// XQueryParser.g:1160:9: ( p_QName -> ^( AtomicOrUnionType p_QName ) )
			// XQueryParser.g:1160:11: p_QName
			{
			pushFollow(FOLLOW_p_QName_in_p_AtomicOrUnionType9744);
			p_QName499=p_QName();
			state._fsp--;
			if (state.failed) return retval;
			if ( state.backtracking==0 ) stream_p_QName.add(p_QName499.getTree());
			// AST REWRITE
			// elements: p_QName
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			if ( state.backtracking==0 ) {
			retval.tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.getTree():null);

			root_0 = (XQDTCommonTree)adaptor.nil();
			// 1161:17: -> ^( AtomicOrUnionType p_QName )
			{
				// XQueryParser.g:1161:20: ^( AtomicOrUnionType p_QName )
				{
				XQDTCommonTree root_1 = (XQDTCommonTree)adaptor.nil();
				root_1 = (XQDTCommonTree)adaptor.becomeRoot((XQDTCommonTree)adaptor.create(AtomicOrUnionType, "AtomicOrUnionType"), root_1);
				adaptor.addChild(root_1, stream_p_QName.nextTree());
				adaptor.addChild(root_0, root_1);
				}

			}


			retval.tree = root_0;
			}

			}

			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (XQDTCommonTree)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
			retval.tree = (XQDTCommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "p_AtomicOrUnionType"


	public static class p_KindTest_return extends ParserRuleReturnScope {
		XQDTCommonTree tree;
		@Override
		public XQDTCommonTree getTree() { return tree; }
	};


	// $ANTLR start "p_KindTest"
	// XQueryParser.g:1165:1: p_KindTest : ( p_DocumentTest | p_ElementTest | p_AttributeTest | p_SchemaElementTest | p_SchemaAttributeTest | p_PITest | p_CommentTest | p_TextTest | p_NamespaceNodeTest | p_AnyKindTest );
	public final XQueryParser.p_KindTest_return p_KindTest() throws RecognitionException {
		XQueryParser.p_KindTest_return retval = new XQueryParser.p_KindTest_return();
		retval.start = input.LT(1);

		XQDTCommonTree root_0 = null;

		ParserRuleReturnScope p_DocumentTest500 =null;
		ParserRuleReturnScope p_ElementTest501 =null;
		ParserRuleReturnScope p_AttributeTest502 =null;
		ParserRuleReturnScope p_SchemaElementTest503 =null;
		ParserRuleReturnScope p_SchemaAttributeTest504 =null;
		ParserRuleReturnScope p_PITest505 =null;
		ParserRuleReturnScope p_CommentTest506 =null;
		ParserRuleReturnScope p_TextTest507 =null;
		ParserRuleReturnScope p_NamespaceNodeTest508 =null;
		ParserRuleReturnScope p_AnyKindTest509 =null;


		try {
			// XQueryParser.g:1166:9: ( p_DocumentTest | p_ElementTest | p_AttributeTest | p_SchemaElementTest | p_SchemaAttributeTest | p_PITest | p_CommentTest | p_TextTest | p_NamespaceNodeTest | p_AnyKindTest )
			int alt163=10;
			switch ( input.LA(1) ) {
			case DOCUMENT_NODE:
				{
				alt163=1;
				}
				break;
			case ELEMENT:
				{
				alt163=2;
				}
				break;
			case ATTRIBUTE:
				{
				alt163=3;
				}
				break;
			case SCHEMA_ELEMENT:
				{
				alt163=4;
				}
				break;
			case SCHEMA_ATTRIBUTE:
				{
				alt163=5;
				}
				break;
			case PROCESSING_INSTRUCTION:
				{
				alt163=6;
				}
				break;
			case COMMENT:
				{
				alt163=7;
				}
				break;
			case TEXT:
				{
				alt163=8;
				}
				break;
			case NAMESPACE_NODE:
				{
				alt163=9;
				}
				break;
			case NODE:
				{
				alt163=10;
				}
				break;
			default:
				if (state.backtracking>0) {state.failed=true; return retval;}
				NoViableAltException nvae =
					new NoViableAltException("", 163, 0, input);
				throw nvae;
			}
			switch (alt163) {
				case 1 :
					// XQueryParser.g:1166:11: p_DocumentTest
					{
					root_0 = (XQDTCommonTree)adaptor.nil();


					pushFollow(FOLLOW_p_DocumentTest_in_p_KindTest9794);
					p_DocumentTest500=p_DocumentTest();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, p_DocumentTest500.getTree());

					}
					break;
				case 2 :
					// XQueryParser.g:1167:11: p_ElementTest
					{
					root_0 = (XQDTCommonTree)adaptor.nil();


					pushFollow(FOLLOW_p_ElementTest_in_p_KindTest9806);
					p_ElementTest501=p_ElementTest();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, p_ElementTest501.getTree());

					}
					break;
				case 3 :
					// XQueryParser.g:1168:11: p_AttributeTest
					{
					root_0 = (XQDTCommonTree)adaptor.nil();


					pushFollow(FOLLOW_p_AttributeTest_in_p_KindTest9818);
					p_AttributeTest502=p_AttributeTest();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, p_AttributeTest502.getTree());

					}
					break;
				case 4 :
					// XQueryParser.g:1169:11: p_SchemaElementTest
					{
					root_0 = (XQDTCommonTree)adaptor.nil();


					pushFollow(FOLLOW_p_SchemaElementTest_in_p_KindTest9830);
					p_SchemaElementTest503=p_SchemaElementTest();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, p_SchemaElementTest503.getTree());

					}
					break;
				case 5 :
					// XQueryParser.g:1170:11: p_SchemaAttributeTest
					{
					root_0 = (XQDTCommonTree)adaptor.nil();


					pushFollow(FOLLOW_p_SchemaAttributeTest_in_p_KindTest9842);
					p_SchemaAttributeTest504=p_SchemaAttributeTest();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, p_SchemaAttributeTest504.getTree());

					}
					break;
				case 6 :
					// XQueryParser.g:1171:11: p_PITest
					{
					root_0 = (XQDTCommonTree)adaptor.nil();


					pushFollow(FOLLOW_p_PITest_in_p_KindTest9854);
					p_PITest505=p_PITest();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, p_PITest505.getTree());

					}
					break;
				case 7 :
					// XQueryParser.g:1172:11: p_CommentTest
					{
					root_0 = (XQDTCommonTree)adaptor.nil();


					pushFollow(FOLLOW_p_CommentTest_in_p_KindTest9866);
					p_CommentTest506=p_CommentTest();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, p_CommentTest506.getTree());

					}
					break;
				case 8 :
					// XQueryParser.g:1173:11: p_TextTest
					{
					root_0 = (XQDTCommonTree)adaptor.nil();


					pushFollow(FOLLOW_p_TextTest_in_p_KindTest9878);
					p_TextTest507=p_TextTest();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, p_TextTest507.getTree());

					}
					break;
				case 9 :
					// XQueryParser.g:1174:11: p_NamespaceNodeTest
					{
					root_0 = (XQDTCommonTree)adaptor.nil();


					pushFollow(FOLLOW_p_NamespaceNodeTest_in_p_KindTest9890);
					p_NamespaceNodeTest508=p_NamespaceNodeTest();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, p_NamespaceNodeTest508.getTree());

					}
					break;
				case 10 :
					// XQueryParser.g:1175:11: p_AnyKindTest
					{
					root_0 = (XQDTCommonTree)adaptor.nil();


					pushFollow(FOLLOW_p_AnyKindTest_in_p_KindTest9902);
					p_AnyKindTest509=p_AnyKindTest();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, p_AnyKindTest509.getTree());

					}
					break;

			}
			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (XQDTCommonTree)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
			retval.tree = (XQDTCommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "p_KindTest"


	public static class p_AnyKindTest_return extends ParserRuleReturnScope {
		XQDTCommonTree tree;
		@Override
		public XQDTCommonTree getTree() { return tree; }
	};


	// $ANTLR start "p_AnyKindTest"
	// XQueryParser.g:1179:1: p_AnyKindTest : NODE LPAREN RPAREN ;
	public final XQueryParser.p_AnyKindTest_return p_AnyKindTest() throws RecognitionException {
		XQueryParser.p_AnyKindTest_return retval = new XQueryParser.p_AnyKindTest_return();
		retval.start = input.LT(1);

		XQDTCommonTree root_0 = null;

		CommonToken NODE510=null;
		CommonToken LPAREN511=null;
		CommonToken RPAREN512=null;

		XQDTCommonTree NODE510_tree=null;
		XQDTCommonTree LPAREN511_tree=null;
		XQDTCommonTree RPAREN512_tree=null;

		try {
			// XQueryParser.g:1180:9: ( NODE LPAREN RPAREN )
			// XQueryParser.g:1180:11: NODE LPAREN RPAREN
			{
			root_0 = (XQDTCommonTree)adaptor.nil();


			NODE510=(CommonToken)match(input,NODE,FOLLOW_NODE_in_p_AnyKindTest9928); if (state.failed) return retval;
			if ( state.backtracking==0 ) {
			NODE510_tree = (XQDTCommonTree)adaptor.create(NODE510);
			adaptor.addChild(root_0, NODE510_tree);
			}

			LPAREN511=(CommonToken)match(input,LPAREN,FOLLOW_LPAREN_in_p_AnyKindTest9930); if (state.failed) return retval;
			if ( state.backtracking==0 ) {
			LPAREN511_tree = (XQDTCommonTree)adaptor.create(LPAREN511);
			adaptor.addChild(root_0, LPAREN511_tree);
			}

			RPAREN512=(CommonToken)match(input,RPAREN,FOLLOW_RPAREN_in_p_AnyKindTest9932); if (state.failed) return retval;
			if ( state.backtracking==0 ) {
			RPAREN512_tree = (XQDTCommonTree)adaptor.create(RPAREN512);
			adaptor.addChild(root_0, RPAREN512_tree);
			}

			}

			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (XQDTCommonTree)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
			retval.tree = (XQDTCommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "p_AnyKindTest"


	public static class p_DocumentTest_return extends ParserRuleReturnScope {
		XQDTCommonTree tree;
		@Override
		public XQDTCommonTree getTree() { return tree; }
	};


	// $ANTLR start "p_DocumentTest"
	// XQueryParser.g:1184:1: p_DocumentTest : DOCUMENT_NODE LPAREN ( p_ElementTest | p_SchemaElementTest )? RPAREN ;
	public final XQueryParser.p_DocumentTest_return p_DocumentTest() throws RecognitionException {
		XQueryParser.p_DocumentTest_return retval = new XQueryParser.p_DocumentTest_return();
		retval.start = input.LT(1);

		XQDTCommonTree root_0 = null;

		CommonToken DOCUMENT_NODE513=null;
		CommonToken LPAREN514=null;
		CommonToken RPAREN517=null;
		ParserRuleReturnScope p_ElementTest515 =null;
		ParserRuleReturnScope p_SchemaElementTest516 =null;

		XQDTCommonTree DOCUMENT_NODE513_tree=null;
		XQDTCommonTree LPAREN514_tree=null;
		XQDTCommonTree RPAREN517_tree=null;

		try {
			// XQueryParser.g:1185:9: ( DOCUMENT_NODE LPAREN ( p_ElementTest | p_SchemaElementTest )? RPAREN )
			// XQueryParser.g:1185:11: DOCUMENT_NODE LPAREN ( p_ElementTest | p_SchemaElementTest )? RPAREN
			{
			root_0 = (XQDTCommonTree)adaptor.nil();


			DOCUMENT_NODE513=(CommonToken)match(input,DOCUMENT_NODE,FOLLOW_DOCUMENT_NODE_in_p_DocumentTest9958); if (state.failed) return retval;
			if ( state.backtracking==0 ) {
			DOCUMENT_NODE513_tree = (XQDTCommonTree)adaptor.create(DOCUMENT_NODE513);
			adaptor.addChild(root_0, DOCUMENT_NODE513_tree);
			}

			LPAREN514=(CommonToken)match(input,LPAREN,FOLLOW_LPAREN_in_p_DocumentTest9960); if (state.failed) return retval;
			if ( state.backtracking==0 ) {
			LPAREN514_tree = (XQDTCommonTree)adaptor.create(LPAREN514);
			adaptor.addChild(root_0, LPAREN514_tree);
			}

			// XQueryParser.g:1185:32: ( p_ElementTest | p_SchemaElementTest )?
			int alt164=3;
			int LA164_0 = input.LA(1);
			if ( (LA164_0==ELEMENT) ) {
				alt164=1;
			}
			else if ( (LA164_0==SCHEMA_ELEMENT) ) {
				alt164=2;
			}
			switch (alt164) {
				case 1 :
					// XQueryParser.g:1185:33: p_ElementTest
					{
					pushFollow(FOLLOW_p_ElementTest_in_p_DocumentTest9963);
					p_ElementTest515=p_ElementTest();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, p_ElementTest515.getTree());

					}
					break;
				case 2 :
					// XQueryParser.g:1185:49: p_SchemaElementTest
					{
					pushFollow(FOLLOW_p_SchemaElementTest_in_p_DocumentTest9967);
					p_SchemaElementTest516=p_SchemaElementTest();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, p_SchemaElementTest516.getTree());

					}
					break;

			}

			RPAREN517=(CommonToken)match(input,RPAREN,FOLLOW_RPAREN_in_p_DocumentTest9971); if (state.failed) return retval;
			if ( state.backtracking==0 ) {
			RPAREN517_tree = (XQDTCommonTree)adaptor.create(RPAREN517);
			adaptor.addChild(root_0, RPAREN517_tree);
			}

			}

			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (XQDTCommonTree)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
			retval.tree = (XQDTCommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "p_DocumentTest"


	public static class p_TextTest_return extends ParserRuleReturnScope {
		XQDTCommonTree tree;
		@Override
		public XQDTCommonTree getTree() { return tree; }
	};


	// $ANTLR start "p_TextTest"
	// XQueryParser.g:1189:1: p_TextTest : TEXT LPAREN RPAREN ;
	public final XQueryParser.p_TextTest_return p_TextTest() throws RecognitionException {
		XQueryParser.p_TextTest_return retval = new XQueryParser.p_TextTest_return();
		retval.start = input.LT(1);

		XQDTCommonTree root_0 = null;

		CommonToken TEXT518=null;
		CommonToken LPAREN519=null;
		CommonToken RPAREN520=null;

		XQDTCommonTree TEXT518_tree=null;
		XQDTCommonTree LPAREN519_tree=null;
		XQDTCommonTree RPAREN520_tree=null;

		try {
			// XQueryParser.g:1190:9: ( TEXT LPAREN RPAREN )
			// XQueryParser.g:1190:11: TEXT LPAREN RPAREN
			{
			root_0 = (XQDTCommonTree)adaptor.nil();


			TEXT518=(CommonToken)match(input,TEXT,FOLLOW_TEXT_in_p_TextTest9997); if (state.failed) return retval;
			if ( state.backtracking==0 ) {
			TEXT518_tree = (XQDTCommonTree)adaptor.create(TEXT518);
			adaptor.addChild(root_0, TEXT518_tree);
			}

			LPAREN519=(CommonToken)match(input,LPAREN,FOLLOW_LPAREN_in_p_TextTest9999); if (state.failed) return retval;
			if ( state.backtracking==0 ) {
			LPAREN519_tree = (XQDTCommonTree)adaptor.create(LPAREN519);
			adaptor.addChild(root_0, LPAREN519_tree);
			}

			RPAREN520=(CommonToken)match(input,RPAREN,FOLLOW_RPAREN_in_p_TextTest10001); if (state.failed) return retval;
			if ( state.backtracking==0 ) {
			RPAREN520_tree = (XQDTCommonTree)adaptor.create(RPAREN520);
			adaptor.addChild(root_0, RPAREN520_tree);
			}

			}

			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (XQDTCommonTree)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
			retval.tree = (XQDTCommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "p_TextTest"


	public static class p_CommentTest_return extends ParserRuleReturnScope {
		XQDTCommonTree tree;
		@Override
		public XQDTCommonTree getTree() { return tree; }
	};


	// $ANTLR start "p_CommentTest"
	// XQueryParser.g:1194:1: p_CommentTest : COMMENT LPAREN RPAREN ;
	public final XQueryParser.p_CommentTest_return p_CommentTest() throws RecognitionException {
		XQueryParser.p_CommentTest_return retval = new XQueryParser.p_CommentTest_return();
		retval.start = input.LT(1);

		XQDTCommonTree root_0 = null;

		CommonToken COMMENT521=null;
		CommonToken LPAREN522=null;
		CommonToken RPAREN523=null;

		XQDTCommonTree COMMENT521_tree=null;
		XQDTCommonTree LPAREN522_tree=null;
		XQDTCommonTree RPAREN523_tree=null;

		try {
			// XQueryParser.g:1195:9: ( COMMENT LPAREN RPAREN )
			// XQueryParser.g:1195:11: COMMENT LPAREN RPAREN
			{
			root_0 = (XQDTCommonTree)adaptor.nil();


			COMMENT521=(CommonToken)match(input,COMMENT,FOLLOW_COMMENT_in_p_CommentTest10027); if (state.failed) return retval;
			if ( state.backtracking==0 ) {
			COMMENT521_tree = (XQDTCommonTree)adaptor.create(COMMENT521);
			adaptor.addChild(root_0, COMMENT521_tree);
			}

			LPAREN522=(CommonToken)match(input,LPAREN,FOLLOW_LPAREN_in_p_CommentTest10029); if (state.failed) return retval;
			if ( state.backtracking==0 ) {
			LPAREN522_tree = (XQDTCommonTree)adaptor.create(LPAREN522);
			adaptor.addChild(root_0, LPAREN522_tree);
			}

			RPAREN523=(CommonToken)match(input,RPAREN,FOLLOW_RPAREN_in_p_CommentTest10031); if (state.failed) return retval;
			if ( state.backtracking==0 ) {
			RPAREN523_tree = (XQDTCommonTree)adaptor.create(RPAREN523);
			adaptor.addChild(root_0, RPAREN523_tree);
			}

			}

			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (XQDTCommonTree)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
			retval.tree = (XQDTCommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "p_CommentTest"


	public static class p_NamespaceNodeTest_return extends ParserRuleReturnScope {
		XQDTCommonTree tree;
		@Override
		public XQDTCommonTree getTree() { return tree; }
	};


	// $ANTLR start "p_NamespaceNodeTest"
	// XQueryParser.g:1199:1: p_NamespaceNodeTest : NAMESPACE_NODE LPAREN RPAREN ;
	public final XQueryParser.p_NamespaceNodeTest_return p_NamespaceNodeTest() throws RecognitionException {
		XQueryParser.p_NamespaceNodeTest_return retval = new XQueryParser.p_NamespaceNodeTest_return();
		retval.start = input.LT(1);

		XQDTCommonTree root_0 = null;

		CommonToken NAMESPACE_NODE524=null;
		CommonToken LPAREN525=null;
		CommonToken RPAREN526=null;

		XQDTCommonTree NAMESPACE_NODE524_tree=null;
		XQDTCommonTree LPAREN525_tree=null;
		XQDTCommonTree RPAREN526_tree=null;

		try {
			// XQueryParser.g:1200:9: ( NAMESPACE_NODE LPAREN RPAREN )
			// XQueryParser.g:1200:11: NAMESPACE_NODE LPAREN RPAREN
			{
			root_0 = (XQDTCommonTree)adaptor.nil();


			NAMESPACE_NODE524=(CommonToken)match(input,NAMESPACE_NODE,FOLLOW_NAMESPACE_NODE_in_p_NamespaceNodeTest10057); if (state.failed) return retval;
			if ( state.backtracking==0 ) {
			NAMESPACE_NODE524_tree = (XQDTCommonTree)adaptor.create(NAMESPACE_NODE524);
			adaptor.addChild(root_0, NAMESPACE_NODE524_tree);
			}

			LPAREN525=(CommonToken)match(input,LPAREN,FOLLOW_LPAREN_in_p_NamespaceNodeTest10059); if (state.failed) return retval;
			if ( state.backtracking==0 ) {
			LPAREN525_tree = (XQDTCommonTree)adaptor.create(LPAREN525);
			adaptor.addChild(root_0, LPAREN525_tree);
			}

			RPAREN526=(CommonToken)match(input,RPAREN,FOLLOW_RPAREN_in_p_NamespaceNodeTest10061); if (state.failed) return retval;
			if ( state.backtracking==0 ) {
			RPAREN526_tree = (XQDTCommonTree)adaptor.create(RPAREN526);
			adaptor.addChild(root_0, RPAREN526_tree);
			}

			}

			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (XQDTCommonTree)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
			retval.tree = (XQDTCommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "p_NamespaceNodeTest"


	public static class p_PITest_return extends ParserRuleReturnScope {
		XQDTCommonTree tree;
		@Override
		public XQDTCommonTree getTree() { return tree; }
	};


	// $ANTLR start "p_PITest"
	// XQueryParser.g:1204:1: p_PITest : PROCESSING_INSTRUCTION LPAREN ( p_NCName | p_StringLiteral )? RPAREN ;
	public final XQueryParser.p_PITest_return p_PITest() throws RecognitionException {
		XQueryParser.p_PITest_return retval = new XQueryParser.p_PITest_return();
		retval.start = input.LT(1);

		XQDTCommonTree root_0 = null;

		CommonToken PROCESSING_INSTRUCTION527=null;
		CommonToken LPAREN528=null;
		CommonToken RPAREN531=null;
		ParserRuleReturnScope p_NCName529 =null;
		ParserRuleReturnScope p_StringLiteral530 =null;

		XQDTCommonTree PROCESSING_INSTRUCTION527_tree=null;
		XQDTCommonTree LPAREN528_tree=null;
		XQDTCommonTree RPAREN531_tree=null;

		try {
			// XQueryParser.g:1205:9: ( PROCESSING_INSTRUCTION LPAREN ( p_NCName | p_StringLiteral )? RPAREN )
			// XQueryParser.g:1205:11: PROCESSING_INSTRUCTION LPAREN ( p_NCName | p_StringLiteral )? RPAREN
			{
			root_0 = (XQDTCommonTree)adaptor.nil();


			PROCESSING_INSTRUCTION527=(CommonToken)match(input,PROCESSING_INSTRUCTION,FOLLOW_PROCESSING_INSTRUCTION_in_p_PITest10087); if (state.failed) return retval;
			if ( state.backtracking==0 ) {
			PROCESSING_INSTRUCTION527_tree = (XQDTCommonTree)adaptor.create(PROCESSING_INSTRUCTION527);
			adaptor.addChild(root_0, PROCESSING_INSTRUCTION527_tree);
			}

			LPAREN528=(CommonToken)match(input,LPAREN,FOLLOW_LPAREN_in_p_PITest10089); if (state.failed) return retval;
			if ( state.backtracking==0 ) {
			LPAREN528_tree = (XQDTCommonTree)adaptor.create(LPAREN528);
			adaptor.addChild(root_0, LPAREN528_tree);
			}

			// XQueryParser.g:1205:41: ( p_NCName | p_StringLiteral )?
			int alt165=3;
			int LA165_0 = input.LA(1);
			if ( ((LA165_0 >= AFTER && LA165_0 <= ALLOWING)||(LA165_0 >= AMP_ER && LA165_0 <= AND)||LA165_0==ANY||(LA165_0 >= APOS_ER && LA165_0 <= ATTRIBUTE)||(LA165_0 >= BASE_URI && LA165_0 <= BINARY)||(LA165_0 >= BOUNDARY_SPACE && LA165_0 <= CATCH)||(LA165_0 >= CHECK && LA165_0 <= CHILD)||(LA165_0 >= COLLATION && LA165_0 <= COLLECTION)||LA165_0==COMMENT||(LA165_0 >= CONSTRAINT && LA165_0 <= DOCUMENT_NODE)||(LA165_0 >= ELEMENT && LA165_0 <= EMPTY)||(LA165_0 >= EMPTY_SEQUENCE && LA165_0 <= EQ)||(LA165_0 >= EVERY && LA165_0 <= GE)||(LA165_0 >= GREATEST && LA165_0 <= GT)||(LA165_0 >= IDIV && LA165_0 <= LAX)||(LA165_0 >= LE && LA165_0 <= LOWERCASE)||LA165_0==LT||LA165_0==L_NCName||(LA165_0 >= MINUS_SIGN && LA165_0 <= NAN)||(LA165_0 >= NE && LA165_0 <= NOT)||(LA165_0 >= NO_INHERIT && LA165_0 <= PHRASE)||(LA165_0 >= PRECEDING && LA165_0 <= PROCESSING_INSTRUCTION)||LA165_0==QUOT_ER||(LA165_0 >= RELATIONSHIP && LA165_0 <= REVALIDATION)||(LA165_0 >= SAME && LA165_0 <= SELF)||(LA165_0 >= SENSITIVE && LA165_0 <= SKIP)||LA165_0==SLIDING||(LA165_0 >= SOME && LA165_0 <= STABLE)||(LA165_0 >= START && LA165_0 <= STRIP)||(LA165_0 >= SWITCH && LA165_0 <= UNORDERED)||(LA165_0 >= UPPERCASE && LA165_0 <= VARIABLE)||(LA165_0 >= VERSION && LA165_0 <= WORDS)||(LA165_0 >= XQUERY && LA165_0 <= ZERO_DIGIT)||LA165_0==EXPLICITLY) ) {
				alt165=1;
			}
			else if ( (LA165_0==APOS||LA165_0==QUOT) ) {
				alt165=2;
			}
			switch (alt165) {
				case 1 :
					// XQueryParser.g:1205:42: p_NCName
					{
					pushFollow(FOLLOW_p_NCName_in_p_PITest10092);
					p_NCName529=p_NCName();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, p_NCName529.getTree());

					}
					break;
				case 2 :
					// XQueryParser.g:1205:53: p_StringLiteral
					{
					pushFollow(FOLLOW_p_StringLiteral_in_p_PITest10096);
					p_StringLiteral530=p_StringLiteral();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, p_StringLiteral530.getTree());

					}
					break;

			}

			RPAREN531=(CommonToken)match(input,RPAREN,FOLLOW_RPAREN_in_p_PITest10100); if (state.failed) return retval;
			if ( state.backtracking==0 ) {
			RPAREN531_tree = (XQDTCommonTree)adaptor.create(RPAREN531);
			adaptor.addChild(root_0, RPAREN531_tree);
			}

			}

			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (XQDTCommonTree)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
			retval.tree = (XQDTCommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "p_PITest"


	public static class p_AttributeTest_return extends ParserRuleReturnScope {
		XQDTCommonTree tree;
		@Override
		public XQDTCommonTree getTree() { return tree; }
	};


	// $ANTLR start "p_AttributeTest"
	// XQueryParser.g:1209:1: p_AttributeTest : ATTRIBUTE LPAREN ( p_AttribNameOrWildcard ( COMMA p_TypeName )? )? RPAREN ;
	public final XQueryParser.p_AttributeTest_return p_AttributeTest() throws RecognitionException {
		XQueryParser.p_AttributeTest_return retval = new XQueryParser.p_AttributeTest_return();
		retval.start = input.LT(1);

		XQDTCommonTree root_0 = null;

		CommonToken ATTRIBUTE532=null;
		CommonToken LPAREN533=null;
		CommonToken COMMA535=null;
		CommonToken RPAREN537=null;
		ParserRuleReturnScope p_AttribNameOrWildcard534 =null;
		ParserRuleReturnScope p_TypeName536 =null;

		XQDTCommonTree ATTRIBUTE532_tree=null;
		XQDTCommonTree LPAREN533_tree=null;
		XQDTCommonTree COMMA535_tree=null;
		XQDTCommonTree RPAREN537_tree=null;

		try {
			// XQueryParser.g:1210:9: ( ATTRIBUTE LPAREN ( p_AttribNameOrWildcard ( COMMA p_TypeName )? )? RPAREN )
			// XQueryParser.g:1210:11: ATTRIBUTE LPAREN ( p_AttribNameOrWildcard ( COMMA p_TypeName )? )? RPAREN
			{
			root_0 = (XQDTCommonTree)adaptor.nil();


			ATTRIBUTE532=(CommonToken)match(input,ATTRIBUTE,FOLLOW_ATTRIBUTE_in_p_AttributeTest10126); if (state.failed) return retval;
			if ( state.backtracking==0 ) {
			ATTRIBUTE532_tree = (XQDTCommonTree)adaptor.create(ATTRIBUTE532);
			adaptor.addChild(root_0, ATTRIBUTE532_tree);
			}

			LPAREN533=(CommonToken)match(input,LPAREN,FOLLOW_LPAREN_in_p_AttributeTest10128); if (state.failed) return retval;
			if ( state.backtracking==0 ) {
			LPAREN533_tree = (XQDTCommonTree)adaptor.create(LPAREN533);
			adaptor.addChild(root_0, LPAREN533_tree);
			}

			// XQueryParser.g:1210:28: ( p_AttribNameOrWildcard ( COMMA p_TypeName )? )?
			int alt167=2;
			int LA167_0 = input.LA(1);
			if ( ((LA167_0 >= AFTER && LA167_0 <= ALLOWING)||(LA167_0 >= AMP_ER && LA167_0 <= AND)||LA167_0==ANY||(LA167_0 >= APOS_ER && LA167_0 <= ATTRIBUTE)||(LA167_0 >= BASE_URI && LA167_0 <= BINARY)||(LA167_0 >= BOUNDARY_SPACE && LA167_0 <= CATCH)||(LA167_0 >= CHECK && LA167_0 <= CHILD)||(LA167_0 >= COLLATION && LA167_0 <= COLLECTION)||LA167_0==COMMENT||(LA167_0 >= CONSTRAINT && LA167_0 <= DOCUMENT_NODE)||(LA167_0 >= ELEMENT && LA167_0 <= EMPTY)||(LA167_0 >= EMPTY_SEQUENCE && LA167_0 <= EQ)||(LA167_0 >= EVERY && LA167_0 <= GE)||(LA167_0 >= GREATEST && LA167_0 <= GT)||(LA167_0 >= IDIV && LA167_0 <= LAX)||(LA167_0 >= LE && LA167_0 <= LOWERCASE)||LA167_0==LT||LA167_0==L_NCName||(LA167_0 >= MINUS_SIGN && LA167_0 <= NAN)||(LA167_0 >= NE && LA167_0 <= NOT)||(LA167_0 >= NO_INHERIT && LA167_0 <= PHRASE)||(LA167_0 >= PRECEDING && LA167_0 <= PROCESSING_INSTRUCTION)||LA167_0==QUOT_ER||(LA167_0 >= RELATIONSHIP && LA167_0 <= REVALIDATION)||(LA167_0 >= SAME && LA167_0 <= SELF)||(LA167_0 >= SENSITIVE && LA167_0 <= SKIP)||LA167_0==SLIDING||(LA167_0 >= SOME && LA167_0 <= STRIP)||(LA167_0 >= SWITCH && LA167_0 <= UNORDERED)||(LA167_0 >= UPPERCASE && LA167_0 <= VARIABLE)||(LA167_0 >= VERSION && LA167_0 <= WORDS)||(LA167_0 >= XQUERY && LA167_0 <= ZERO_DIGIT)||LA167_0==EXPLICITLY) ) {
				alt167=1;
			}
			switch (alt167) {
				case 1 :
					// XQueryParser.g:1210:29: p_AttribNameOrWildcard ( COMMA p_TypeName )?
					{
					pushFollow(FOLLOW_p_AttribNameOrWildcard_in_p_AttributeTest10131);
					p_AttribNameOrWildcard534=p_AttribNameOrWildcard();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, p_AttribNameOrWildcard534.getTree());

					// XQueryParser.g:1210:52: ( COMMA p_TypeName )?
					int alt166=2;
					int LA166_0 = input.LA(1);
					if ( (LA166_0==COMMA) ) {
						alt166=1;
					}
					switch (alt166) {
						case 1 :
							// XQueryParser.g:1210:53: COMMA p_TypeName
							{
							COMMA535=(CommonToken)match(input,COMMA,FOLLOW_COMMA_in_p_AttributeTest10134); if (state.failed) return retval;
							if ( state.backtracking==0 ) {
							COMMA535_tree = (XQDTCommonTree)adaptor.create(COMMA535);
							adaptor.addChild(root_0, COMMA535_tree);
							}

							pushFollow(FOLLOW_p_TypeName_in_p_AttributeTest10136);
							p_TypeName536=p_TypeName();
							state._fsp--;
							if (state.failed) return retval;
							if ( state.backtracking==0 ) adaptor.addChild(root_0, p_TypeName536.getTree());

							}
							break;

					}

					}
					break;

			}

			RPAREN537=(CommonToken)match(input,RPAREN,FOLLOW_RPAREN_in_p_AttributeTest10142); if (state.failed) return retval;
			if ( state.backtracking==0 ) {
			RPAREN537_tree = (XQDTCommonTree)adaptor.create(RPAREN537);
			adaptor.addChild(root_0, RPAREN537_tree);
			}

			}

			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (XQDTCommonTree)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
			retval.tree = (XQDTCommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "p_AttributeTest"


	public static class p_AttribNameOrWildcard_return extends ParserRuleReturnScope {
		XQDTCommonTree tree;
		@Override
		public XQDTCommonTree getTree() { return tree; }
	};


	// $ANTLR start "p_AttribNameOrWildcard"
	// XQueryParser.g:1214:1: p_AttribNameOrWildcard : ( p_AttributeName | STAR );
	public final XQueryParser.p_AttribNameOrWildcard_return p_AttribNameOrWildcard() throws RecognitionException {
		XQueryParser.p_AttribNameOrWildcard_return retval = new XQueryParser.p_AttribNameOrWildcard_return();
		retval.start = input.LT(1);

		XQDTCommonTree root_0 = null;

		CommonToken STAR539=null;
		ParserRuleReturnScope p_AttributeName538 =null;

		XQDTCommonTree STAR539_tree=null;

		try {
			// XQueryParser.g:1215:9: ( p_AttributeName | STAR )
			int alt168=2;
			int LA168_0 = input.LA(1);
			if ( ((LA168_0 >= AFTER && LA168_0 <= ALLOWING)||(LA168_0 >= AMP_ER && LA168_0 <= AND)||LA168_0==ANY||(LA168_0 >= APOS_ER && LA168_0 <= ATTRIBUTE)||(LA168_0 >= BASE_URI && LA168_0 <= BINARY)||(LA168_0 >= BOUNDARY_SPACE && LA168_0 <= CATCH)||(LA168_0 >= CHECK && LA168_0 <= CHILD)||(LA168_0 >= COLLATION && LA168_0 <= COLLECTION)||LA168_0==COMMENT||(LA168_0 >= CONSTRAINT && LA168_0 <= DOCUMENT_NODE)||(LA168_0 >= ELEMENT && LA168_0 <= EMPTY)||(LA168_0 >= EMPTY_SEQUENCE && LA168_0 <= EQ)||(LA168_0 >= EVERY && LA168_0 <= GE)||(LA168_0 >= GREATEST && LA168_0 <= GT)||(LA168_0 >= IDIV && LA168_0 <= LAX)||(LA168_0 >= LE && LA168_0 <= LOWERCASE)||LA168_0==LT||LA168_0==L_NCName||(LA168_0 >= MINUS_SIGN && LA168_0 <= NAN)||(LA168_0 >= NE && LA168_0 <= NOT)||(LA168_0 >= NO_INHERIT && LA168_0 <= PHRASE)||(LA168_0 >= PRECEDING && LA168_0 <= PROCESSING_INSTRUCTION)||LA168_0==QUOT_ER||(LA168_0 >= RELATIONSHIP && LA168_0 <= REVALIDATION)||(LA168_0 >= SAME && LA168_0 <= SELF)||(LA168_0 >= SENSITIVE && LA168_0 <= SKIP)||LA168_0==SLIDING||(LA168_0 >= SOME && LA168_0 <= STABLE)||(LA168_0 >= START && LA168_0 <= STRIP)||(LA168_0 >= SWITCH && LA168_0 <= UNORDERED)||(LA168_0 >= UPPERCASE && LA168_0 <= VARIABLE)||(LA168_0 >= VERSION && LA168_0 <= WORDS)||(LA168_0 >= XQUERY && LA168_0 <= ZERO_DIGIT)||LA168_0==EXPLICITLY) ) {
				alt168=1;
			}
			else if ( (LA168_0==STAR) ) {
				alt168=2;
			}

			else {
				if (state.backtracking>0) {state.failed=true; return retval;}
				NoViableAltException nvae =
					new NoViableAltException("", 168, 0, input);
				throw nvae;
			}

			switch (alt168) {
				case 1 :
					// XQueryParser.g:1215:11: p_AttributeName
					{
					root_0 = (XQDTCommonTree)adaptor.nil();


					pushFollow(FOLLOW_p_AttributeName_in_p_AttribNameOrWildcard10170);
					p_AttributeName538=p_AttributeName();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, p_AttributeName538.getTree());

					}
					break;
				case 2 :
					// XQueryParser.g:1215:29: STAR
					{
					root_0 = (XQDTCommonTree)adaptor.nil();


					STAR539=(CommonToken)match(input,STAR,FOLLOW_STAR_in_p_AttribNameOrWildcard10174); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					STAR539_tree = (XQDTCommonTree)adaptor.create(STAR539);
					adaptor.addChild(root_0, STAR539_tree);
					}

					}
					break;

			}
			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (XQDTCommonTree)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
			retval.tree = (XQDTCommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "p_AttribNameOrWildcard"


	public static class p_SchemaAttributeTest_return extends ParserRuleReturnScope {
		XQDTCommonTree tree;
		@Override
		public XQDTCommonTree getTree() { return tree; }
	};


	// $ANTLR start "p_SchemaAttributeTest"
	// XQueryParser.g:1219:1: p_SchemaAttributeTest : SCHEMA_ATTRIBUTE LPAREN p_AttributeDeclaration RPAREN ;
	public final XQueryParser.p_SchemaAttributeTest_return p_SchemaAttributeTest() throws RecognitionException {
		XQueryParser.p_SchemaAttributeTest_return retval = new XQueryParser.p_SchemaAttributeTest_return();
		retval.start = input.LT(1);

		XQDTCommonTree root_0 = null;

		CommonToken SCHEMA_ATTRIBUTE540=null;
		CommonToken LPAREN541=null;
		CommonToken RPAREN543=null;
		ParserRuleReturnScope p_AttributeDeclaration542 =null;

		XQDTCommonTree SCHEMA_ATTRIBUTE540_tree=null;
		XQDTCommonTree LPAREN541_tree=null;
		XQDTCommonTree RPAREN543_tree=null;

		try {
			// XQueryParser.g:1220:9: ( SCHEMA_ATTRIBUTE LPAREN p_AttributeDeclaration RPAREN )
			// XQueryParser.g:1220:11: SCHEMA_ATTRIBUTE LPAREN p_AttributeDeclaration RPAREN
			{
			root_0 = (XQDTCommonTree)adaptor.nil();


			SCHEMA_ATTRIBUTE540=(CommonToken)match(input,SCHEMA_ATTRIBUTE,FOLLOW_SCHEMA_ATTRIBUTE_in_p_SchemaAttributeTest10200); if (state.failed) return retval;
			if ( state.backtracking==0 ) {
			SCHEMA_ATTRIBUTE540_tree = (XQDTCommonTree)adaptor.create(SCHEMA_ATTRIBUTE540);
			adaptor.addChild(root_0, SCHEMA_ATTRIBUTE540_tree);
			}

			LPAREN541=(CommonToken)match(input,LPAREN,FOLLOW_LPAREN_in_p_SchemaAttributeTest10202); if (state.failed) return retval;
			if ( state.backtracking==0 ) {
			LPAREN541_tree = (XQDTCommonTree)adaptor.create(LPAREN541);
			adaptor.addChild(root_0, LPAREN541_tree);
			}

			pushFollow(FOLLOW_p_AttributeDeclaration_in_p_SchemaAttributeTest10204);
			p_AttributeDeclaration542=p_AttributeDeclaration();
			state._fsp--;
			if (state.failed) return retval;
			if ( state.backtracking==0 ) adaptor.addChild(root_0, p_AttributeDeclaration542.getTree());

			RPAREN543=(CommonToken)match(input,RPAREN,FOLLOW_RPAREN_in_p_SchemaAttributeTest10206); if (state.failed) return retval;
			if ( state.backtracking==0 ) {
			RPAREN543_tree = (XQDTCommonTree)adaptor.create(RPAREN543);
			adaptor.addChild(root_0, RPAREN543_tree);
			}

			}

			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (XQDTCommonTree)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
			retval.tree = (XQDTCommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "p_SchemaAttributeTest"


	public static class p_AttributeDeclaration_return extends ParserRuleReturnScope {
		XQDTCommonTree tree;
		@Override
		public XQDTCommonTree getTree() { return tree; }
	};


	// $ANTLR start "p_AttributeDeclaration"
	// XQueryParser.g:1224:1: p_AttributeDeclaration : p_AttributeName ;
	public final XQueryParser.p_AttributeDeclaration_return p_AttributeDeclaration() throws RecognitionException {
		XQueryParser.p_AttributeDeclaration_return retval = new XQueryParser.p_AttributeDeclaration_return();
		retval.start = input.LT(1);

		XQDTCommonTree root_0 = null;

		ParserRuleReturnScope p_AttributeName544 =null;


		try {
			// XQueryParser.g:1225:9: ( p_AttributeName )
			// XQueryParser.g:1225:11: p_AttributeName
			{
			root_0 = (XQDTCommonTree)adaptor.nil();


			pushFollow(FOLLOW_p_AttributeName_in_p_AttributeDeclaration10232);
			p_AttributeName544=p_AttributeName();
			state._fsp--;
			if (state.failed) return retval;
			if ( state.backtracking==0 ) adaptor.addChild(root_0, p_AttributeName544.getTree());

			}

			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (XQDTCommonTree)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
			retval.tree = (XQDTCommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "p_AttributeDeclaration"


	public static class p_ElementTest_return extends ParserRuleReturnScope {
		XQDTCommonTree tree;
		@Override
		public XQDTCommonTree getTree() { return tree; }
	};


	// $ANTLR start "p_ElementTest"
	// XQueryParser.g:1229:1: p_ElementTest : ELEMENT LPAREN ( p_ElementNameOrWildcard ( COMMA p_TypeName ( QUESTION )? )? )? RPAREN ;
	public final XQueryParser.p_ElementTest_return p_ElementTest() throws RecognitionException {
		XQueryParser.p_ElementTest_return retval = new XQueryParser.p_ElementTest_return();
		retval.start = input.LT(1);

		XQDTCommonTree root_0 = null;

		CommonToken ELEMENT545=null;
		CommonToken LPAREN546=null;
		CommonToken COMMA548=null;
		CommonToken QUESTION550=null;
		CommonToken RPAREN551=null;
		ParserRuleReturnScope p_ElementNameOrWildcard547 =null;
		ParserRuleReturnScope p_TypeName549 =null;

		XQDTCommonTree ELEMENT545_tree=null;
		XQDTCommonTree LPAREN546_tree=null;
		XQDTCommonTree COMMA548_tree=null;
		XQDTCommonTree QUESTION550_tree=null;
		XQDTCommonTree RPAREN551_tree=null;

		try {
			// XQueryParser.g:1230:9: ( ELEMENT LPAREN ( p_ElementNameOrWildcard ( COMMA p_TypeName ( QUESTION )? )? )? RPAREN )
			// XQueryParser.g:1230:11: ELEMENT LPAREN ( p_ElementNameOrWildcard ( COMMA p_TypeName ( QUESTION )? )? )? RPAREN
			{
			root_0 = (XQDTCommonTree)adaptor.nil();


			ELEMENT545=(CommonToken)match(input,ELEMENT,FOLLOW_ELEMENT_in_p_ElementTest10258); if (state.failed) return retval;
			if ( state.backtracking==0 ) {
			ELEMENT545_tree = (XQDTCommonTree)adaptor.create(ELEMENT545);
			adaptor.addChild(root_0, ELEMENT545_tree);
			}

			LPAREN546=(CommonToken)match(input,LPAREN,FOLLOW_LPAREN_in_p_ElementTest10260); if (state.failed) return retval;
			if ( state.backtracking==0 ) {
			LPAREN546_tree = (XQDTCommonTree)adaptor.create(LPAREN546);
			adaptor.addChild(root_0, LPAREN546_tree);
			}

			// XQueryParser.g:1230:26: ( p_ElementNameOrWildcard ( COMMA p_TypeName ( QUESTION )? )? )?
			int alt171=2;
			int LA171_0 = input.LA(1);
			if ( ((LA171_0 >= AFTER && LA171_0 <= ALLOWING)||(LA171_0 >= AMP_ER && LA171_0 <= AND)||LA171_0==ANY||(LA171_0 >= APOS_ER && LA171_0 <= ATTRIBUTE)||(LA171_0 >= BASE_URI && LA171_0 <= BINARY)||(LA171_0 >= BOUNDARY_SPACE && LA171_0 <= CATCH)||(LA171_0 >= CHECK && LA171_0 <= CHILD)||(LA171_0 >= COLLATION && LA171_0 <= COLLECTION)||LA171_0==COMMENT||(LA171_0 >= CONSTRAINT && LA171_0 <= DOCUMENT_NODE)||(LA171_0 >= ELEMENT && LA171_0 <= EMPTY)||(LA171_0 >= EMPTY_SEQUENCE && LA171_0 <= EQ)||(LA171_0 >= EVERY && LA171_0 <= GE)||(LA171_0 >= GREATEST && LA171_0 <= GT)||(LA171_0 >= IDIV && LA171_0 <= LAX)||(LA171_0 >= LE && LA171_0 <= LOWERCASE)||LA171_0==LT||LA171_0==L_NCName||(LA171_0 >= MINUS_SIGN && LA171_0 <= NAN)||(LA171_0 >= NE && LA171_0 <= NOT)||(LA171_0 >= NO_INHERIT && LA171_0 <= PHRASE)||(LA171_0 >= PRECEDING && LA171_0 <= PROCESSING_INSTRUCTION)||LA171_0==QUOT_ER||(LA171_0 >= RELATIONSHIP && LA171_0 <= REVALIDATION)||(LA171_0 >= SAME && LA171_0 <= SELF)||(LA171_0 >= SENSITIVE && LA171_0 <= SKIP)||LA171_0==SLIDING||(LA171_0 >= SOME && LA171_0 <= STRIP)||(LA171_0 >= SWITCH && LA171_0 <= UNORDERED)||(LA171_0 >= UPPERCASE && LA171_0 <= VARIABLE)||(LA171_0 >= VERSION && LA171_0 <= WORDS)||(LA171_0 >= XQUERY && LA171_0 <= ZERO_DIGIT)||LA171_0==EXPLICITLY) ) {
				alt171=1;
			}
			switch (alt171) {
				case 1 :
					// XQueryParser.g:1230:27: p_ElementNameOrWildcard ( COMMA p_TypeName ( QUESTION )? )?
					{
					pushFollow(FOLLOW_p_ElementNameOrWildcard_in_p_ElementTest10263);
					p_ElementNameOrWildcard547=p_ElementNameOrWildcard();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, p_ElementNameOrWildcard547.getTree());

					// XQueryParser.g:1230:51: ( COMMA p_TypeName ( QUESTION )? )?
					int alt170=2;
					int LA170_0 = input.LA(1);
					if ( (LA170_0==COMMA) ) {
						alt170=1;
					}
					switch (alt170) {
						case 1 :
							// XQueryParser.g:1230:52: COMMA p_TypeName ( QUESTION )?
							{
							COMMA548=(CommonToken)match(input,COMMA,FOLLOW_COMMA_in_p_ElementTest10266); if (state.failed) return retval;
							if ( state.backtracking==0 ) {
							COMMA548_tree = (XQDTCommonTree)adaptor.create(COMMA548);
							adaptor.addChild(root_0, COMMA548_tree);
							}

							pushFollow(FOLLOW_p_TypeName_in_p_ElementTest10268);
							p_TypeName549=p_TypeName();
							state._fsp--;
							if (state.failed) return retval;
							if ( state.backtracking==0 ) adaptor.addChild(root_0, p_TypeName549.getTree());

							// XQueryParser.g:1230:69: ( QUESTION )?
							int alt169=2;
							int LA169_0 = input.LA(1);
							if ( (LA169_0==QUESTION) ) {
								alt169=1;
							}
							switch (alt169) {
								case 1 :
									// XQueryParser.g:1230:69: QUESTION
									{
									QUESTION550=(CommonToken)match(input,QUESTION,FOLLOW_QUESTION_in_p_ElementTest10270); if (state.failed) return retval;
									if ( state.backtracking==0 ) {
									QUESTION550_tree = (XQDTCommonTree)adaptor.create(QUESTION550);
									adaptor.addChild(root_0, QUESTION550_tree);
									}

									}
									break;

							}

							}
							break;

					}

					}
					break;

			}

			RPAREN551=(CommonToken)match(input,RPAREN,FOLLOW_RPAREN_in_p_ElementTest10277); if (state.failed) return retval;
			if ( state.backtracking==0 ) {
			RPAREN551_tree = (XQDTCommonTree)adaptor.create(RPAREN551);
			adaptor.addChild(root_0, RPAREN551_tree);
			}

			}

			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (XQDTCommonTree)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
			retval.tree = (XQDTCommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "p_ElementTest"


	public static class p_ElementNameOrWildcard_return extends ParserRuleReturnScope {
		XQDTCommonTree tree;
		@Override
		public XQDTCommonTree getTree() { return tree; }
	};


	// $ANTLR start "p_ElementNameOrWildcard"
	// XQueryParser.g:1234:1: p_ElementNameOrWildcard : ( p_QName | STAR );
	public final XQueryParser.p_ElementNameOrWildcard_return p_ElementNameOrWildcard() throws RecognitionException {
		XQueryParser.p_ElementNameOrWildcard_return retval = new XQueryParser.p_ElementNameOrWildcard_return();
		retval.start = input.LT(1);

		XQDTCommonTree root_0 = null;

		CommonToken STAR553=null;
		ParserRuleReturnScope p_QName552 =null;

		XQDTCommonTree STAR553_tree=null;

		try {
			// XQueryParser.g:1235:9: ( p_QName | STAR )
			int alt172=2;
			int LA172_0 = input.LA(1);
			if ( ((LA172_0 >= AFTER && LA172_0 <= ALLOWING)||(LA172_0 >= AMP_ER && LA172_0 <= AND)||LA172_0==ANY||(LA172_0 >= APOS_ER && LA172_0 <= ATTRIBUTE)||(LA172_0 >= BASE_URI && LA172_0 <= BINARY)||(LA172_0 >= BOUNDARY_SPACE && LA172_0 <= CATCH)||(LA172_0 >= CHECK && LA172_0 <= CHILD)||(LA172_0 >= COLLATION && LA172_0 <= COLLECTION)||LA172_0==COMMENT||(LA172_0 >= CONSTRAINT && LA172_0 <= DOCUMENT_NODE)||(LA172_0 >= ELEMENT && LA172_0 <= EMPTY)||(LA172_0 >= EMPTY_SEQUENCE && LA172_0 <= EQ)||(LA172_0 >= EVERY && LA172_0 <= GE)||(LA172_0 >= GREATEST && LA172_0 <= GT)||(LA172_0 >= IDIV && LA172_0 <= LAX)||(LA172_0 >= LE && LA172_0 <= LOWERCASE)||LA172_0==LT||LA172_0==L_NCName||(LA172_0 >= MINUS_SIGN && LA172_0 <= NAN)||(LA172_0 >= NE && LA172_0 <= NOT)||(LA172_0 >= NO_INHERIT && LA172_0 <= PHRASE)||(LA172_0 >= PRECEDING && LA172_0 <= PROCESSING_INSTRUCTION)||LA172_0==QUOT_ER||(LA172_0 >= RELATIONSHIP && LA172_0 <= REVALIDATION)||(LA172_0 >= SAME && LA172_0 <= SELF)||(LA172_0 >= SENSITIVE && LA172_0 <= SKIP)||LA172_0==SLIDING||(LA172_0 >= SOME && LA172_0 <= STABLE)||(LA172_0 >= START && LA172_0 <= STRIP)||(LA172_0 >= SWITCH && LA172_0 <= UNORDERED)||(LA172_0 >= UPPERCASE && LA172_0 <= VARIABLE)||(LA172_0 >= VERSION && LA172_0 <= WORDS)||(LA172_0 >= XQUERY && LA172_0 <= ZERO_DIGIT)||LA172_0==EXPLICITLY) ) {
				alt172=1;
			}
			else if ( (LA172_0==STAR) ) {
				alt172=2;
			}

			else {
				if (state.backtracking>0) {state.failed=true; return retval;}
				NoViableAltException nvae =
					new NoViableAltException("", 172, 0, input);
				throw nvae;
			}

			switch (alt172) {
				case 1 :
					// XQueryParser.g:1235:11: p_QName
					{
					root_0 = (XQDTCommonTree)adaptor.nil();


					pushFollow(FOLLOW_p_QName_in_p_ElementNameOrWildcard10303);
					p_QName552=p_QName();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, p_QName552.getTree());

					}
					break;
				case 2 :
					// XQueryParser.g:1235:21: STAR
					{
					root_0 = (XQDTCommonTree)adaptor.nil();


					STAR553=(CommonToken)match(input,STAR,FOLLOW_STAR_in_p_ElementNameOrWildcard10307); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					STAR553_tree = (XQDTCommonTree)adaptor.create(STAR553);
					adaptor.addChild(root_0, STAR553_tree);
					}

					}
					break;

			}
			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (XQDTCommonTree)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
			retval.tree = (XQDTCommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "p_ElementNameOrWildcard"


	public static class p_SchemaElementTest_return extends ParserRuleReturnScope {
		XQDTCommonTree tree;
		@Override
		public XQDTCommonTree getTree() { return tree; }
	};


	// $ANTLR start "p_SchemaElementTest"
	// XQueryParser.g:1238:1: p_SchemaElementTest : SCHEMA_ELEMENT LPAREN p_ElementDeclaration RPAREN ;
	public final XQueryParser.p_SchemaElementTest_return p_SchemaElementTest() throws RecognitionException {
		XQueryParser.p_SchemaElementTest_return retval = new XQueryParser.p_SchemaElementTest_return();
		retval.start = input.LT(1);

		XQDTCommonTree root_0 = null;

		CommonToken SCHEMA_ELEMENT554=null;
		CommonToken LPAREN555=null;
		CommonToken RPAREN557=null;
		ParserRuleReturnScope p_ElementDeclaration556 =null;

		XQDTCommonTree SCHEMA_ELEMENT554_tree=null;
		XQDTCommonTree LPAREN555_tree=null;
		XQDTCommonTree RPAREN557_tree=null;

		try {
			// XQueryParser.g:1239:9: ( SCHEMA_ELEMENT LPAREN p_ElementDeclaration RPAREN )
			// XQueryParser.g:1239:11: SCHEMA_ELEMENT LPAREN p_ElementDeclaration RPAREN
			{
			root_0 = (XQDTCommonTree)adaptor.nil();


			SCHEMA_ELEMENT554=(CommonToken)match(input,SCHEMA_ELEMENT,FOLLOW_SCHEMA_ELEMENT_in_p_SchemaElementTest10325); if (state.failed) return retval;
			if ( state.backtracking==0 ) {
			SCHEMA_ELEMENT554_tree = (XQDTCommonTree)adaptor.create(SCHEMA_ELEMENT554);
			adaptor.addChild(root_0, SCHEMA_ELEMENT554_tree);
			}

			LPAREN555=(CommonToken)match(input,LPAREN,FOLLOW_LPAREN_in_p_SchemaElementTest10327); if (state.failed) return retval;
			if ( state.backtracking==0 ) {
			LPAREN555_tree = (XQDTCommonTree)adaptor.create(LPAREN555);
			adaptor.addChild(root_0, LPAREN555_tree);
			}

			pushFollow(FOLLOW_p_ElementDeclaration_in_p_SchemaElementTest10329);
			p_ElementDeclaration556=p_ElementDeclaration();
			state._fsp--;
			if (state.failed) return retval;
			if ( state.backtracking==0 ) adaptor.addChild(root_0, p_ElementDeclaration556.getTree());

			RPAREN557=(CommonToken)match(input,RPAREN,FOLLOW_RPAREN_in_p_SchemaElementTest10331); if (state.failed) return retval;
			if ( state.backtracking==0 ) {
			RPAREN557_tree = (XQDTCommonTree)adaptor.create(RPAREN557);
			adaptor.addChild(root_0, RPAREN557_tree);
			}

			}

			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (XQDTCommonTree)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
			retval.tree = (XQDTCommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "p_SchemaElementTest"


	public static class p_ElementDeclaration_return extends ParserRuleReturnScope {
		XQDTCommonTree tree;
		@Override
		public XQDTCommonTree getTree() { return tree; }
	};


	// $ANTLR start "p_ElementDeclaration"
	// XQueryParser.g:1243:1: p_ElementDeclaration : p_ElementName ;
	public final XQueryParser.p_ElementDeclaration_return p_ElementDeclaration() throws RecognitionException {
		XQueryParser.p_ElementDeclaration_return retval = new XQueryParser.p_ElementDeclaration_return();
		retval.start = input.LT(1);

		XQDTCommonTree root_0 = null;

		ParserRuleReturnScope p_ElementName558 =null;


		try {
			// XQueryParser.g:1244:9: ( p_ElementName )
			// XQueryParser.g:1244:11: p_ElementName
			{
			root_0 = (XQDTCommonTree)adaptor.nil();


			pushFollow(FOLLOW_p_ElementName_in_p_ElementDeclaration10357);
			p_ElementName558=p_ElementName();
			state._fsp--;
			if (state.failed) return retval;
			if ( state.backtracking==0 ) adaptor.addChild(root_0, p_ElementName558.getTree());

			}

			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (XQDTCommonTree)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
			retval.tree = (XQDTCommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "p_ElementDeclaration"


	public static class p_AttributeName_return extends ParserRuleReturnScope {
		XQDTCommonTree tree;
		@Override
		public XQDTCommonTree getTree() { return tree; }
	};


	// $ANTLR start "p_AttributeName"
	// XQueryParser.g:1248:1: p_AttributeName : p_QName ;
	public final XQueryParser.p_AttributeName_return p_AttributeName() throws RecognitionException {
		XQueryParser.p_AttributeName_return retval = new XQueryParser.p_AttributeName_return();
		retval.start = input.LT(1);

		XQDTCommonTree root_0 = null;

		ParserRuleReturnScope p_QName559 =null;


		try {
			// XQueryParser.g:1249:9: ( p_QName )
			// XQueryParser.g:1249:11: p_QName
			{
			root_0 = (XQDTCommonTree)adaptor.nil();


			pushFollow(FOLLOW_p_QName_in_p_AttributeName10383);
			p_QName559=p_QName();
			state._fsp--;
			if (state.failed) return retval;
			if ( state.backtracking==0 ) adaptor.addChild(root_0, p_QName559.getTree());

			}

			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (XQDTCommonTree)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
			retval.tree = (XQDTCommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "p_AttributeName"


	public static class p_ElementName_return extends ParserRuleReturnScope {
		XQDTCommonTree tree;
		@Override
		public XQDTCommonTree getTree() { return tree; }
	};


	// $ANTLR start "p_ElementName"
	// XQueryParser.g:1253:1: p_ElementName : p_QName ;
	public final XQueryParser.p_ElementName_return p_ElementName() throws RecognitionException {
		XQueryParser.p_ElementName_return retval = new XQueryParser.p_ElementName_return();
		retval.start = input.LT(1);

		XQDTCommonTree root_0 = null;

		ParserRuleReturnScope p_QName560 =null;


		try {
			// XQueryParser.g:1254:9: ( p_QName )
			// XQueryParser.g:1254:11: p_QName
			{
			root_0 = (XQDTCommonTree)adaptor.nil();


			pushFollow(FOLLOW_p_QName_in_p_ElementName10409);
			p_QName560=p_QName();
			state._fsp--;
			if (state.failed) return retval;
			if ( state.backtracking==0 ) adaptor.addChild(root_0, p_QName560.getTree());

			}

			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (XQDTCommonTree)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
			retval.tree = (XQDTCommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "p_ElementName"


	public static class p_TypeName_return extends ParserRuleReturnScope {
		XQDTCommonTree tree;
		@Override
		public XQDTCommonTree getTree() { return tree; }
	};


	// $ANTLR start "p_TypeName"
	// XQueryParser.g:1258:1: p_TypeName : p_QName ;
	public final XQueryParser.p_TypeName_return p_TypeName() throws RecognitionException {
		XQueryParser.p_TypeName_return retval = new XQueryParser.p_TypeName_return();
		retval.start = input.LT(1);

		XQDTCommonTree root_0 = null;

		ParserRuleReturnScope p_QName561 =null;


		try {
			// XQueryParser.g:1259:9: ( p_QName )
			// XQueryParser.g:1259:11: p_QName
			{
			root_0 = (XQDTCommonTree)adaptor.nil();


			pushFollow(FOLLOW_p_QName_in_p_TypeName10435);
			p_QName561=p_QName();
			state._fsp--;
			if (state.failed) return retval;
			if ( state.backtracking==0 ) adaptor.addChild(root_0, p_QName561.getTree());

			}

			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (XQDTCommonTree)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
			retval.tree = (XQDTCommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "p_TypeName"


	public static class p_FunctionTest_return extends ParserRuleReturnScope {
		XQDTCommonTree tree;
		@Override
		public XQDTCommonTree getTree() { return tree; }
	};


	// $ANTLR start "p_FunctionTest"
	// XQueryParser.g:1263:1: p_FunctionTest : ( p_Annotation )* ( p_AnyFunctionTest | p_TypedFunctionTest ) ;
	public final XQueryParser.p_FunctionTest_return p_FunctionTest() throws RecognitionException {
		XQueryParser.p_FunctionTest_return retval = new XQueryParser.p_FunctionTest_return();
		retval.start = input.LT(1);

		XQDTCommonTree root_0 = null;

		ParserRuleReturnScope p_Annotation562 =null;
		ParserRuleReturnScope p_AnyFunctionTest563 =null;
		ParserRuleReturnScope p_TypedFunctionTest564 =null;


		try {
			// XQueryParser.g:1264:9: ( ( p_Annotation )* ( p_AnyFunctionTest | p_TypedFunctionTest ) )
			// XQueryParser.g:1264:11: ( p_Annotation )* ( p_AnyFunctionTest | p_TypedFunctionTest )
			{
			root_0 = (XQDTCommonTree)adaptor.nil();


			// XQueryParser.g:1264:11: ( p_Annotation )*
			loop173:
			while (true) {
				int alt173=2;
				int LA173_0 = input.LA(1);
				if ( (LA173_0==ANN_PERCENT) ) {
					alt173=1;
				}

				switch (alt173) {
				case 1 :
					// XQueryParser.g:1264:11: p_Annotation
					{
					pushFollow(FOLLOW_p_Annotation_in_p_FunctionTest10461);
					p_Annotation562=p_Annotation();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, p_Annotation562.getTree());

					}
					break;

				default :
					break loop173;
				}
			}

			// XQueryParser.g:1264:25: ( p_AnyFunctionTest | p_TypedFunctionTest )
			int alt174=2;
			int LA174_0 = input.LA(1);
			if ( (LA174_0==FUNCTION) ) {
				int LA174_1 = input.LA(2);
				if ( (LA174_1==PRIVATE) ) {
					int LA174_2 = input.LA(3);
					if ( (LA174_2==LPAREN) ) {
						int LA174_3 = input.LA(4);
						if ( (LA174_3==STAR) ) {
							alt174=1;
						}
						else if ( ((LA174_3 >= AFTER && LA174_3 <= ALLOWING)||(LA174_3 >= AMP_ER && LA174_3 <= AND)||LA174_3==ANY||(LA174_3 >= APOS_ER && LA174_3 <= ATTRIBUTE)||(LA174_3 >= BASE_URI && LA174_3 <= BINARY)||(LA174_3 >= BOUNDARY_SPACE && LA174_3 <= CATCH)||(LA174_3 >= CHECK && LA174_3 <= CHILD)||(LA174_3 >= COLLATION && LA174_3 <= COLLECTION)||LA174_3==COMMENT||(LA174_3 >= CONSTRAINT && LA174_3 <= DOCUMENT_NODE)||(LA174_3 >= ELEMENT && LA174_3 <= EMPTY)||(LA174_3 >= EMPTY_SEQUENCE && LA174_3 <= EQ)||(LA174_3 >= EVERY && LA174_3 <= GE)||(LA174_3 >= GREATEST && LA174_3 <= GT)||(LA174_3 >= IDIV && LA174_3 <= LAX)||(LA174_3 >= LE && LA174_3 <= LPAREN)||LA174_3==LT||LA174_3==L_NCName||(LA174_3 >= MINUS_SIGN && LA174_3 <= NAN)||(LA174_3 >= NE && LA174_3 <= NOT)||(LA174_3 >= NO_INHERIT && LA174_3 <= PHRASE)||(LA174_3 >= PRECEDING && LA174_3 <= PROCESSING_INSTRUCTION)||LA174_3==QUOT_ER||(LA174_3 >= RELATIONSHIP && LA174_3 <= RPAREN)||(LA174_3 >= SAME && LA174_3 <= SELF)||(LA174_3 >= SENSITIVE && LA174_3 <= SKIP)||LA174_3==SLIDING||(LA174_3 >= SOME && LA174_3 <= STABLE)||(LA174_3 >= START && LA174_3 <= STRIP)||(LA174_3 >= SWITCH && LA174_3 <= UNORDERED)||(LA174_3 >= UPPERCASE && LA174_3 <= VARIABLE)||(LA174_3 >= VERSION && LA174_3 <= WORDS)||(LA174_3 >= XQUERY && LA174_3 <= ZERO_DIGIT)||LA174_3==EXPLICITLY) ) {
							alt174=2;
						}

						else {
							if (state.backtracking>0) {state.failed=true; return retval;}
							int nvaeMark = input.mark();
							try {
								for (int nvaeConsume = 0; nvaeConsume < 4 - 1; nvaeConsume++) {
									input.consume();
								}
								NoViableAltException nvae =
									new NoViableAltException("", 174, 3, input);
								throw nvae;
							} finally {
								input.rewind(nvaeMark);
							}
						}

					}

					else {
						if (state.backtracking>0) {state.failed=true; return retval;}
						int nvaeMark = input.mark();
						try {
							for (int nvaeConsume = 0; nvaeConsume < 3 - 1; nvaeConsume++) {
								input.consume();
							}
							NoViableAltException nvae =
								new NoViableAltException("", 174, 2, input);
							throw nvae;
						} finally {
							input.rewind(nvaeMark);
						}
					}

				}
				else if ( (LA174_1==LPAREN) ) {
					int LA174_3 = input.LA(3);
					if ( (LA174_3==STAR) ) {
						alt174=1;
					}
					else if ( ((LA174_3 >= AFTER && LA174_3 <= ALLOWING)||(LA174_3 >= AMP_ER && LA174_3 <= AND)||LA174_3==ANY||(LA174_3 >= APOS_ER && LA174_3 <= ATTRIBUTE)||(LA174_3 >= BASE_URI && LA174_3 <= BINARY)||(LA174_3 >= BOUNDARY_SPACE && LA174_3 <= CATCH)||(LA174_3 >= CHECK && LA174_3 <= CHILD)||(LA174_3 >= COLLATION && LA174_3 <= COLLECTION)||LA174_3==COMMENT||(LA174_3 >= CONSTRAINT && LA174_3 <= DOCUMENT_NODE)||(LA174_3 >= ELEMENT && LA174_3 <= EMPTY)||(LA174_3 >= EMPTY_SEQUENCE && LA174_3 <= EQ)||(LA174_3 >= EVERY && LA174_3 <= GE)||(LA174_3 >= GREATEST && LA174_3 <= GT)||(LA174_3 >= IDIV && LA174_3 <= LAX)||(LA174_3 >= LE && LA174_3 <= LPAREN)||LA174_3==LT||LA174_3==L_NCName||(LA174_3 >= MINUS_SIGN && LA174_3 <= NAN)||(LA174_3 >= NE && LA174_3 <= NOT)||(LA174_3 >= NO_INHERIT && LA174_3 <= PHRASE)||(LA174_3 >= PRECEDING && LA174_3 <= PROCESSING_INSTRUCTION)||LA174_3==QUOT_ER||(LA174_3 >= RELATIONSHIP && LA174_3 <= RPAREN)||(LA174_3 >= SAME && LA174_3 <= SELF)||(LA174_3 >= SENSITIVE && LA174_3 <= SKIP)||LA174_3==SLIDING||(LA174_3 >= SOME && LA174_3 <= STABLE)||(LA174_3 >= START && LA174_3 <= STRIP)||(LA174_3 >= SWITCH && LA174_3 <= UNORDERED)||(LA174_3 >= UPPERCASE && LA174_3 <= VARIABLE)||(LA174_3 >= VERSION && LA174_3 <= WORDS)||(LA174_3 >= XQUERY && LA174_3 <= ZERO_DIGIT)||LA174_3==EXPLICITLY) ) {
						alt174=2;
					}

					else {
						if (state.backtracking>0) {state.failed=true; return retval;}
						int nvaeMark = input.mark();
						try {
							for (int nvaeConsume = 0; nvaeConsume < 3 - 1; nvaeConsume++) {
								input.consume();
							}
							NoViableAltException nvae =
								new NoViableAltException("", 174, 3, input);
							throw nvae;
						} finally {
							input.rewind(nvaeMark);
						}
					}

				}

				else {
					if (state.backtracking>0) {state.failed=true; return retval;}
					int nvaeMark = input.mark();
					try {
						input.consume();
						NoViableAltException nvae =
							new NoViableAltException("", 174, 1, input);
						throw nvae;
					} finally {
						input.rewind(nvaeMark);
					}
				}

			}

			else {
				if (state.backtracking>0) {state.failed=true; return retval;}
				NoViableAltException nvae =
					new NoViableAltException("", 174, 0, input);
				throw nvae;
			}

			switch (alt174) {
				case 1 :
					// XQueryParser.g:1264:26: p_AnyFunctionTest
					{
					pushFollow(FOLLOW_p_AnyFunctionTest_in_p_FunctionTest10465);
					p_AnyFunctionTest563=p_AnyFunctionTest();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, p_AnyFunctionTest563.getTree());

					}
					break;
				case 2 :
					// XQueryParser.g:1264:46: p_TypedFunctionTest
					{
					pushFollow(FOLLOW_p_TypedFunctionTest_in_p_FunctionTest10469);
					p_TypedFunctionTest564=p_TypedFunctionTest();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, p_TypedFunctionTest564.getTree());

					}
					break;

			}

			}

			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (XQDTCommonTree)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
			retval.tree = (XQDTCommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "p_FunctionTest"


	public static class p_AnyFunctionTest_return extends ParserRuleReturnScope {
		XQDTCommonTree tree;
		@Override
		public XQDTCommonTree getTree() { return tree; }
	};


	// $ANTLR start "p_AnyFunctionTest"
	// XQueryParser.g:1268:1: p_AnyFunctionTest : FUNCTION ( PRIVATE )? LPAREN STAR RPAREN ;
	public final XQueryParser.p_AnyFunctionTest_return p_AnyFunctionTest() throws RecognitionException {
		XQueryParser.p_AnyFunctionTest_return retval = new XQueryParser.p_AnyFunctionTest_return();
		retval.start = input.LT(1);

		XQDTCommonTree root_0 = null;

		CommonToken FUNCTION565=null;
		CommonToken PRIVATE566=null;
		CommonToken LPAREN567=null;
		CommonToken STAR568=null;
		CommonToken RPAREN569=null;

		XQDTCommonTree FUNCTION565_tree=null;
		XQDTCommonTree PRIVATE566_tree=null;
		XQDTCommonTree LPAREN567_tree=null;
		XQDTCommonTree STAR568_tree=null;
		XQDTCommonTree RPAREN569_tree=null;

		try {
			// XQueryParser.g:1269:9: ( FUNCTION ( PRIVATE )? LPAREN STAR RPAREN )
			// XQueryParser.g:1269:11: FUNCTION ( PRIVATE )? LPAREN STAR RPAREN
			{
			root_0 = (XQDTCommonTree)adaptor.nil();


			FUNCTION565=(CommonToken)match(input,FUNCTION,FOLLOW_FUNCTION_in_p_AnyFunctionTest10496); if (state.failed) return retval;
			if ( state.backtracking==0 ) {
			FUNCTION565_tree = (XQDTCommonTree)adaptor.create(FUNCTION565);
			adaptor.addChild(root_0, FUNCTION565_tree);
			}

			// XQueryParser.g:1269:20: ( PRIVATE )?
			int alt175=2;
			int LA175_0 = input.LA(1);
			if ( (LA175_0==PRIVATE) ) {
				alt175=1;
			}
			switch (alt175) {
				case 1 :
					// XQueryParser.g:1269:20: PRIVATE
					{
					PRIVATE566=(CommonToken)match(input,PRIVATE,FOLLOW_PRIVATE_in_p_AnyFunctionTest10498); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					PRIVATE566_tree = (XQDTCommonTree)adaptor.create(PRIVATE566);
					adaptor.addChild(root_0, PRIVATE566_tree);
					}

					}
					break;

			}

			LPAREN567=(CommonToken)match(input,LPAREN,FOLLOW_LPAREN_in_p_AnyFunctionTest10501); if (state.failed) return retval;
			if ( state.backtracking==0 ) {
			LPAREN567_tree = (XQDTCommonTree)adaptor.create(LPAREN567);
			adaptor.addChild(root_0, LPAREN567_tree);
			}

			STAR568=(CommonToken)match(input,STAR,FOLLOW_STAR_in_p_AnyFunctionTest10503); if (state.failed) return retval;
			if ( state.backtracking==0 ) {
			STAR568_tree = (XQDTCommonTree)adaptor.create(STAR568);
			adaptor.addChild(root_0, STAR568_tree);
			}

			RPAREN569=(CommonToken)match(input,RPAREN,FOLLOW_RPAREN_in_p_AnyFunctionTest10505); if (state.failed) return retval;
			if ( state.backtracking==0 ) {
			RPAREN569_tree = (XQDTCommonTree)adaptor.create(RPAREN569);
			adaptor.addChild(root_0, RPAREN569_tree);
			}

			}

			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (XQDTCommonTree)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
			retval.tree = (XQDTCommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "p_AnyFunctionTest"


	public static class p_TypedFunctionTest_return extends ParserRuleReturnScope {
		XQDTCommonTree tree;
		@Override
		public XQDTCommonTree getTree() { return tree; }
	};


	// $ANTLR start "p_TypedFunctionTest"
	// XQueryParser.g:1273:1: p_TypedFunctionTest : FUNCTION ( PRIVATE )? LPAREN ( p_SequenceType ( COMMA p_SequenceType )* )? RPAREN AS p_SequenceType ;
	public final XQueryParser.p_TypedFunctionTest_return p_TypedFunctionTest() throws RecognitionException {
		XQueryParser.p_TypedFunctionTest_return retval = new XQueryParser.p_TypedFunctionTest_return();
		retval.start = input.LT(1);

		XQDTCommonTree root_0 = null;

		CommonToken FUNCTION570=null;
		CommonToken PRIVATE571=null;
		CommonToken LPAREN572=null;
		CommonToken COMMA574=null;
		CommonToken RPAREN576=null;
		CommonToken AS577=null;
		ParserRuleReturnScope p_SequenceType573 =null;
		ParserRuleReturnScope p_SequenceType575 =null;
		ParserRuleReturnScope p_SequenceType578 =null;

		XQDTCommonTree FUNCTION570_tree=null;
		XQDTCommonTree PRIVATE571_tree=null;
		XQDTCommonTree LPAREN572_tree=null;
		XQDTCommonTree COMMA574_tree=null;
		XQDTCommonTree RPAREN576_tree=null;
		XQDTCommonTree AS577_tree=null;

		try {
			// XQueryParser.g:1274:9: ( FUNCTION ( PRIVATE )? LPAREN ( p_SequenceType ( COMMA p_SequenceType )* )? RPAREN AS p_SequenceType )
			// XQueryParser.g:1274:11: FUNCTION ( PRIVATE )? LPAREN ( p_SequenceType ( COMMA p_SequenceType )* )? RPAREN AS p_SequenceType
			{
			root_0 = (XQDTCommonTree)adaptor.nil();


			FUNCTION570=(CommonToken)match(input,FUNCTION,FOLLOW_FUNCTION_in_p_TypedFunctionTest10531); if (state.failed) return retval;
			if ( state.backtracking==0 ) {
			FUNCTION570_tree = (XQDTCommonTree)adaptor.create(FUNCTION570);
			adaptor.addChild(root_0, FUNCTION570_tree);
			}

			// XQueryParser.g:1274:20: ( PRIVATE )?
			int alt176=2;
			int LA176_0 = input.LA(1);
			if ( (LA176_0==PRIVATE) ) {
				alt176=1;
			}
			switch (alt176) {
				case 1 :
					// XQueryParser.g:1274:20: PRIVATE
					{
					PRIVATE571=(CommonToken)match(input,PRIVATE,FOLLOW_PRIVATE_in_p_TypedFunctionTest10533); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					PRIVATE571_tree = (XQDTCommonTree)adaptor.create(PRIVATE571);
					adaptor.addChild(root_0, PRIVATE571_tree);
					}

					}
					break;

			}

			LPAREN572=(CommonToken)match(input,LPAREN,FOLLOW_LPAREN_in_p_TypedFunctionTest10536); if (state.failed) return retval;
			if ( state.backtracking==0 ) {
			LPAREN572_tree = (XQDTCommonTree)adaptor.create(LPAREN572);
			adaptor.addChild(root_0, LPAREN572_tree);
			}

			// XQueryParser.g:1274:36: ( p_SequenceType ( COMMA p_SequenceType )* )?
			int alt178=2;
			int LA178_0 = input.LA(1);
			if ( ((LA178_0 >= AFTER && LA178_0 <= ALLOWING)||(LA178_0 >= AMP_ER && LA178_0 <= AND)||LA178_0==ANY||(LA178_0 >= APOS_ER && LA178_0 <= ATTRIBUTE)||(LA178_0 >= BASE_URI && LA178_0 <= BINARY)||(LA178_0 >= BOUNDARY_SPACE && LA178_0 <= CATCH)||(LA178_0 >= CHECK && LA178_0 <= CHILD)||(LA178_0 >= COLLATION && LA178_0 <= COLLECTION)||LA178_0==COMMENT||(LA178_0 >= CONSTRAINT && LA178_0 <= DOCUMENT_NODE)||(LA178_0 >= ELEMENT && LA178_0 <= EMPTY)||(LA178_0 >= EMPTY_SEQUENCE && LA178_0 <= EQ)||(LA178_0 >= EVERY && LA178_0 <= GE)||(LA178_0 >= GREATEST && LA178_0 <= GT)||(LA178_0 >= IDIV && LA178_0 <= LAX)||(LA178_0 >= LE && LA178_0 <= LPAREN)||LA178_0==LT||LA178_0==L_NCName||(LA178_0 >= MINUS_SIGN && LA178_0 <= NAN)||(LA178_0 >= NE && LA178_0 <= NOT)||(LA178_0 >= NO_INHERIT && LA178_0 <= PHRASE)||(LA178_0 >= PRECEDING && LA178_0 <= PROCESSING_INSTRUCTION)||LA178_0==QUOT_ER||(LA178_0 >= RELATIONSHIP && LA178_0 <= REVALIDATION)||(LA178_0 >= SAME && LA178_0 <= SELF)||(LA178_0 >= SENSITIVE && LA178_0 <= SKIP)||LA178_0==SLIDING||(LA178_0 >= SOME && LA178_0 <= STABLE)||(LA178_0 >= START && LA178_0 <= STRIP)||(LA178_0 >= SWITCH && LA178_0 <= UNORDERED)||(LA178_0 >= UPPERCASE && LA178_0 <= VARIABLE)||(LA178_0 >= VERSION && LA178_0 <= WORDS)||(LA178_0 >= XQUERY && LA178_0 <= ZERO_DIGIT)||LA178_0==EXPLICITLY) ) {
				alt178=1;
			}
			switch (alt178) {
				case 1 :
					// XQueryParser.g:1274:37: p_SequenceType ( COMMA p_SequenceType )*
					{
					pushFollow(FOLLOW_p_SequenceType_in_p_TypedFunctionTest10539);
					p_SequenceType573=p_SequenceType();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, p_SequenceType573.getTree());

					// XQueryParser.g:1274:52: ( COMMA p_SequenceType )*
					loop177:
					while (true) {
						int alt177=2;
						int LA177_0 = input.LA(1);
						if ( (LA177_0==COMMA) ) {
							alt177=1;
						}

						switch (alt177) {
						case 1 :
							// XQueryParser.g:1274:53: COMMA p_SequenceType
							{
							COMMA574=(CommonToken)match(input,COMMA,FOLLOW_COMMA_in_p_TypedFunctionTest10542); if (state.failed) return retval;
							if ( state.backtracking==0 ) {
							COMMA574_tree = (XQDTCommonTree)adaptor.create(COMMA574);
							adaptor.addChild(root_0, COMMA574_tree);
							}

							pushFollow(FOLLOW_p_SequenceType_in_p_TypedFunctionTest10544);
							p_SequenceType575=p_SequenceType();
							state._fsp--;
							if (state.failed) return retval;
							if ( state.backtracking==0 ) adaptor.addChild(root_0, p_SequenceType575.getTree());

							}
							break;

						default :
							break loop177;
						}
					}

					}
					break;

			}

			RPAREN576=(CommonToken)match(input,RPAREN,FOLLOW_RPAREN_in_p_TypedFunctionTest10550); if (state.failed) return retval;
			if ( state.backtracking==0 ) {
			RPAREN576_tree = (XQDTCommonTree)adaptor.create(RPAREN576);
			adaptor.addChild(root_0, RPAREN576_tree);
			}

			AS577=(CommonToken)match(input,AS,FOLLOW_AS_in_p_TypedFunctionTest10552); if (state.failed) return retval;
			if ( state.backtracking==0 ) {
			AS577_tree = (XQDTCommonTree)adaptor.create(AS577);
			adaptor.addChild(root_0, AS577_tree);
			}

			pushFollow(FOLLOW_p_SequenceType_in_p_TypedFunctionTest10554);
			p_SequenceType578=p_SequenceType();
			state._fsp--;
			if (state.failed) return retval;
			if ( state.backtracking==0 ) adaptor.addChild(root_0, p_SequenceType578.getTree());

			}

			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (XQDTCommonTree)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
			retval.tree = (XQDTCommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "p_TypedFunctionTest"


	public static class p_ParenthesizedItemType_return extends ParserRuleReturnScope {
		XQDTCommonTree tree;
		@Override
		public XQDTCommonTree getTree() { return tree; }
	};


	// $ANTLR start "p_ParenthesizedItemType"
	// XQueryParser.g:1278:1: p_ParenthesizedItemType : LPAREN p_ItemType RPAREN ;
	public final XQueryParser.p_ParenthesizedItemType_return p_ParenthesizedItemType() throws RecognitionException {
		XQueryParser.p_ParenthesizedItemType_return retval = new XQueryParser.p_ParenthesizedItemType_return();
		retval.start = input.LT(1);

		XQDTCommonTree root_0 = null;

		CommonToken LPAREN579=null;
		CommonToken RPAREN581=null;
		ParserRuleReturnScope p_ItemType580 =null;

		XQDTCommonTree LPAREN579_tree=null;
		XQDTCommonTree RPAREN581_tree=null;

		try {
			// XQueryParser.g:1279:9: ( LPAREN p_ItemType RPAREN )
			// XQueryParser.g:1279:11: LPAREN p_ItemType RPAREN
			{
			root_0 = (XQDTCommonTree)adaptor.nil();


			LPAREN579=(CommonToken)match(input,LPAREN,FOLLOW_LPAREN_in_p_ParenthesizedItemType10580); if (state.failed) return retval;
			if ( state.backtracking==0 ) {
			LPAREN579_tree = (XQDTCommonTree)adaptor.create(LPAREN579);
			adaptor.addChild(root_0, LPAREN579_tree);
			}

			pushFollow(FOLLOW_p_ItemType_in_p_ParenthesizedItemType10582);
			p_ItemType580=p_ItemType();
			state._fsp--;
			if (state.failed) return retval;
			if ( state.backtracking==0 ) adaptor.addChild(root_0, p_ItemType580.getTree());

			RPAREN581=(CommonToken)match(input,RPAREN,FOLLOW_RPAREN_in_p_ParenthesizedItemType10584); if (state.failed) return retval;
			if ( state.backtracking==0 ) {
			RPAREN581_tree = (XQDTCommonTree)adaptor.create(RPAREN581);
			adaptor.addChild(root_0, RPAREN581_tree);
			}

			}

			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (XQDTCommonTree)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
			retval.tree = (XQDTCommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "p_ParenthesizedItemType"


	public static class p_StringLiteral_return extends ParserRuleReturnScope {
		XQDTCommonTree tree;
		@Override
		public XQDTCommonTree getTree() { return tree; }
	};


	// $ANTLR start "p_StringLiteral"
	// XQueryParser.g:1308:1: p_StringLiteral : ( QUOT pg_QuotStringLiteralContent QUOT -> ^( StringLiteral ( pg_QuotStringLiteralContent )* ) | APOS pg_AposStringLiteralContent APOS -> ^( StringLiteral ( pg_AposStringLiteralContent )* ) );
	public final XQueryParser.p_StringLiteral_return p_StringLiteral() throws RecognitionException {
		XQueryParser.p_StringLiteral_return retval = new XQueryParser.p_StringLiteral_return();
		retval.start = input.LT(1);

		XQDTCommonTree root_0 = null;

		CommonToken QUOT582=null;
		CommonToken QUOT584=null;
		CommonToken APOS585=null;
		CommonToken APOS587=null;
		ParserRuleReturnScope pg_QuotStringLiteralContent583 =null;
		ParserRuleReturnScope pg_AposStringLiteralContent586 =null;

		XQDTCommonTree QUOT582_tree=null;
		XQDTCommonTree QUOT584_tree=null;
		XQDTCommonTree APOS585_tree=null;
		XQDTCommonTree APOS587_tree=null;
		RewriteRuleTokenStream stream_APOS=new RewriteRuleTokenStream(adaptor,"token APOS");
		RewriteRuleTokenStream stream_QUOT=new RewriteRuleTokenStream(adaptor,"token QUOT");
		RewriteRuleSubtreeStream stream_pg_QuotStringLiteralContent=new RewriteRuleSubtreeStream(adaptor,"rule pg_QuotStringLiteralContent");
		RewriteRuleSubtreeStream stream_pg_AposStringLiteralContent=new RewriteRuleSubtreeStream(adaptor,"rule pg_AposStringLiteralContent");

		try {
			// XQueryParser.g:1309:9: ( QUOT pg_QuotStringLiteralContent QUOT -> ^( StringLiteral ( pg_QuotStringLiteralContent )* ) | APOS pg_AposStringLiteralContent APOS -> ^( StringLiteral ( pg_AposStringLiteralContent )* ) )
			int alt179=2;
			int LA179_0 = input.LA(1);
			if ( (LA179_0==QUOT) ) {
				alt179=1;
			}
			else if ( (LA179_0==APOS) ) {
				alt179=2;
			}

			else {
				if (state.backtracking>0) {state.failed=true; return retval;}
				NoViableAltException nvae =
					new NoViableAltException("", 179, 0, input);
				throw nvae;
			}

			switch (alt179) {
				case 1 :
					// XQueryParser.g:1309:11: QUOT pg_QuotStringLiteralContent QUOT
					{
					QUOT582=(CommonToken)match(input,QUOT,FOLLOW_QUOT_in_p_StringLiteral10635); if (state.failed) return retval; 
					if ( state.backtracking==0 ) stream_QUOT.add(QUOT582);

					if ( state.backtracking==0 ) { pushStringLexer(false);}
					pushFollow(FOLLOW_pg_QuotStringLiteralContent_in_p_StringLiteral10639);
					pg_QuotStringLiteralContent583=pg_QuotStringLiteralContent();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) stream_pg_QuotStringLiteralContent.add(pg_QuotStringLiteralContent583.getTree());
					QUOT584=(CommonToken)match(input,QUOT,FOLLOW_QUOT_in_p_StringLiteral10641); if (state.failed) return retval; 
					if ( state.backtracking==0 ) stream_QUOT.add(QUOT584);

					if ( state.backtracking==0 ) { popLexer(); }
					// AST REWRITE
					// elements: pg_QuotStringLiteralContent
					// token labels: 
					// rule labels: retval
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					if ( state.backtracking==0 ) {
					retval.tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.getTree():null);

					root_0 = (XQDTCommonTree)adaptor.nil();
					// 1310:17: -> ^( StringLiteral ( pg_QuotStringLiteralContent )* )
					{
						// XQueryParser.g:1310:20: ^( StringLiteral ( pg_QuotStringLiteralContent )* )
						{
						XQDTCommonTree root_1 = (XQDTCommonTree)adaptor.nil();
						root_1 = (XQDTCommonTree)adaptor.becomeRoot((XQDTCommonTree)adaptor.create(StringLiteral, "StringLiteral"), root_1);
						// XQueryParser.g:1310:36: ( pg_QuotStringLiteralContent )*
						while ( stream_pg_QuotStringLiteralContent.hasNext() ) {
							adaptor.addChild(root_1, stream_pg_QuotStringLiteralContent.nextTree());
						}
						stream_pg_QuotStringLiteralContent.reset();

						adaptor.addChild(root_0, root_1);
						}

					}


					retval.tree = root_0;
					}

					}
					break;
				case 2 :
					// XQueryParser.g:1311:11: APOS pg_AposStringLiteralContent APOS
					{
					APOS585=(CommonToken)match(input,APOS,FOLLOW_APOS_in_p_StringLiteral10680); if (state.failed) return retval; 
					if ( state.backtracking==0 ) stream_APOS.add(APOS585);

					if ( state.backtracking==0 ) {pushStringLexer(true);}
					pushFollow(FOLLOW_pg_AposStringLiteralContent_in_p_StringLiteral10684);
					pg_AposStringLiteralContent586=pg_AposStringLiteralContent();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) stream_pg_AposStringLiteralContent.add(pg_AposStringLiteralContent586.getTree());
					APOS587=(CommonToken)match(input,APOS,FOLLOW_APOS_in_p_StringLiteral10686); if (state.failed) return retval; 
					if ( state.backtracking==0 ) stream_APOS.add(APOS587);

					if ( state.backtracking==0 ) { popLexer(); }
					// AST REWRITE
					// elements: pg_AposStringLiteralContent
					// token labels: 
					// rule labels: retval
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					if ( state.backtracking==0 ) {
					retval.tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.getTree():null);

					root_0 = (XQDTCommonTree)adaptor.nil();
					// 1312:17: -> ^( StringLiteral ( pg_AposStringLiteralContent )* )
					{
						// XQueryParser.g:1312:20: ^( StringLiteral ( pg_AposStringLiteralContent )* )
						{
						XQDTCommonTree root_1 = (XQDTCommonTree)adaptor.nil();
						root_1 = (XQDTCommonTree)adaptor.becomeRoot((XQDTCommonTree)adaptor.create(StringLiteral, "StringLiteral"), root_1);
						// XQueryParser.g:1312:36: ( pg_AposStringLiteralContent )*
						while ( stream_pg_AposStringLiteralContent.hasNext() ) {
							adaptor.addChild(root_1, stream_pg_AposStringLiteralContent.nextTree());
						}
						stream_pg_AposStringLiteralContent.reset();

						adaptor.addChild(root_0, root_1);
						}

					}


					retval.tree = root_0;
					}

					}
					break;

			}
			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (XQDTCommonTree)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
			retval.tree = (XQDTCommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "p_StringLiteral"


	public static class pg_QuotStringLiteralContent_return extends ParserRuleReturnScope {
		XQDTCommonTree tree;
		@Override
		public XQDTCommonTree getTree() { return tree; }
	};


	// $ANTLR start "pg_QuotStringLiteralContent"
	// XQueryParser.g:1318:1: pg_QuotStringLiteralContent : ( ESCAPE_QUOT | L_CharRef | L_PredefinedEntityRef |~ ( QUOT | AMP ) )* ;
	public final XQueryParser.pg_QuotStringLiteralContent_return pg_QuotStringLiteralContent() throws RecognitionException {
		XQueryParser.pg_QuotStringLiteralContent_return retval = new XQueryParser.pg_QuotStringLiteralContent_return();
		retval.start = input.LT(1);

		XQDTCommonTree root_0 = null;

		CommonToken set588=null;

		XQDTCommonTree set588_tree=null;

		try {
			// XQueryParser.g:1319:9: ( ( ESCAPE_QUOT | L_CharRef | L_PredefinedEntityRef |~ ( QUOT | AMP ) )* )
			// XQueryParser.g:1319:11: ( ESCAPE_QUOT | L_CharRef | L_PredefinedEntityRef |~ ( QUOT | AMP ) )*
			{
			root_0 = (XQDTCommonTree)adaptor.nil();


			// XQueryParser.g:1319:11: ( ESCAPE_QUOT | L_CharRef | L_PredefinedEntityRef |~ ( QUOT | AMP ) )*
			loop180:
			while (true) {
				int alt180=2;
				int LA180_0 = input.LA(1);
				if ( ((LA180_0 >= AFTER && LA180_0 <= ALLOWING)||(LA180_0 >= AMP_ER && LA180_0 <= QUESTION)||(LA180_0 >= QUOT_ER && LA180_0 <= VersionDeclVersion)) ) {
					alt180=1;
				}

				switch (alt180) {
				case 1 :
					// XQueryParser.g:
					{
					set588=(CommonToken)input.LT(1);
					if ( (input.LA(1) >= AFTER && input.LA(1) <= ALLOWING)||(input.LA(1) >= AMP_ER && input.LA(1) <= QUESTION)||(input.LA(1) >= QUOT_ER && input.LA(1) <= VersionDeclVersion) ) {
						input.consume();
						if ( state.backtracking==0 ) adaptor.addChild(root_0, (XQDTCommonTree)adaptor.create(set588));
						state.errorRecovery=false;
						state.failed=false;
					}
					else {
						if (state.backtracking>0) {state.failed=true; return retval;}
						MismatchedSetException mse = new MismatchedSetException(null,input);
						throw mse;
					}
					}
					break;

				default :
					break loop180;
				}
			}

			}

			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (XQDTCommonTree)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
			retval.tree = (XQDTCommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "pg_QuotStringLiteralContent"


	public static class pg_AposStringLiteralContent_return extends ParserRuleReturnScope {
		XQDTCommonTree tree;
		@Override
		public XQDTCommonTree getTree() { return tree; }
	};


	// $ANTLR start "pg_AposStringLiteralContent"
	// XQueryParser.g:1326:1: pg_AposStringLiteralContent : ( ESCAPE_APOS | L_CharRef | L_PredefinedEntityRef |~ ( APOS | AMP ) )* ;
	public final XQueryParser.pg_AposStringLiteralContent_return pg_AposStringLiteralContent() throws RecognitionException {
		XQueryParser.pg_AposStringLiteralContent_return retval = new XQueryParser.pg_AposStringLiteralContent_return();
		retval.start = input.LT(1);

		XQDTCommonTree root_0 = null;

		CommonToken set589=null;

		XQDTCommonTree set589_tree=null;

		try {
			// XQueryParser.g:1327:9: ( ( ESCAPE_APOS | L_CharRef | L_PredefinedEntityRef |~ ( APOS | AMP ) )* )
			// XQueryParser.g:1327:11: ( ESCAPE_APOS | L_CharRef | L_PredefinedEntityRef |~ ( APOS | AMP ) )*
			{
			root_0 = (XQDTCommonTree)adaptor.nil();


			// XQueryParser.g:1327:11: ( ESCAPE_APOS | L_CharRef | L_PredefinedEntityRef |~ ( APOS | AMP ) )*
			loop181:
			while (true) {
				int alt181=2;
				int LA181_0 = input.LA(1);
				if ( ((LA181_0 >= AFTER && LA181_0 <= ALLOWING)||(LA181_0 >= AMP_ER && LA181_0 <= ANY)||(LA181_0 >= APOS_ER && LA181_0 <= VersionDeclVersion)) ) {
					alt181=1;
				}

				switch (alt181) {
				case 1 :
					// XQueryParser.g:
					{
					set589=(CommonToken)input.LT(1);
					if ( (input.LA(1) >= AFTER && input.LA(1) <= ALLOWING)||(input.LA(1) >= AMP_ER && input.LA(1) <= ANY)||(input.LA(1) >= APOS_ER && input.LA(1) <= VersionDeclVersion) ) {
						input.consume();
						if ( state.backtracking==0 ) adaptor.addChild(root_0, (XQDTCommonTree)adaptor.create(set589));
						state.errorRecovery=false;
						state.failed=false;
					}
					else {
						if (state.backtracking>0) {state.failed=true; return retval;}
						MismatchedSetException mse = new MismatchedSetException(null,input);
						throw mse;
					}
					}
					break;

				default :
					break loop181;
				}
			}

			}

			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (XQDTCommonTree)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
			retval.tree = (XQDTCommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "pg_AposStringLiteralContent"


	public static class p_ElementContentChar_return extends ParserRuleReturnScope {
		XQDTCommonTree tree;
		@Override
		public XQDTCommonTree getTree() { return tree; }
	};


	// $ANTLR start "p_ElementContentChar"
	// XQueryParser.g:1341:1: p_ElementContentChar : L_ElementContentChar ;
	public final XQueryParser.p_ElementContentChar_return p_ElementContentChar() throws RecognitionException {
		XQueryParser.p_ElementContentChar_return retval = new XQueryParser.p_ElementContentChar_return();
		retval.start = input.LT(1);

		XQDTCommonTree root_0 = null;

		CommonToken L_ElementContentChar590=null;

		XQDTCommonTree L_ElementContentChar590_tree=null;

		try {
			// XQueryParser.g:1342:9: ( L_ElementContentChar )
			// XQueryParser.g:1342:11: L_ElementContentChar
			{
			root_0 = (XQDTCommonTree)adaptor.nil();


			L_ElementContentChar590=(CommonToken)match(input,L_ElementContentChar,FOLLOW_L_ElementContentChar_in_p_ElementContentChar10850); if (state.failed) return retval;
			if ( state.backtracking==0 ) {
			L_ElementContentChar590_tree = (XQDTCommonTree)adaptor.create(L_ElementContentChar590);
			adaptor.addChild(root_0, L_ElementContentChar590_tree);
			}

			}

			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (XQDTCommonTree)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
			retval.tree = (XQDTCommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "p_ElementContentChar"


	public static class p_QuotAttrContentChar_return extends ParserRuleReturnScope {
		XQDTCommonTree tree;
		@Override
		public XQDTCommonTree getTree() { return tree; }
	};


	// $ANTLR start "p_QuotAttrContentChar"
	// XQueryParser.g:1346:1: p_QuotAttrContentChar : L_QuotAttrContentChar -> ^( AttributeValueChar L_QuotAttrContentChar ) ;
	public final XQueryParser.p_QuotAttrContentChar_return p_QuotAttrContentChar() throws RecognitionException {
		XQueryParser.p_QuotAttrContentChar_return retval = new XQueryParser.p_QuotAttrContentChar_return();
		retval.start = input.LT(1);

		XQDTCommonTree root_0 = null;

		CommonToken L_QuotAttrContentChar591=null;

		XQDTCommonTree L_QuotAttrContentChar591_tree=null;
		RewriteRuleTokenStream stream_L_QuotAttrContentChar=new RewriteRuleTokenStream(adaptor,"token L_QuotAttrContentChar");

		try {
			// XQueryParser.g:1347:9: ( L_QuotAttrContentChar -> ^( AttributeValueChar L_QuotAttrContentChar ) )
			// XQueryParser.g:1347:11: L_QuotAttrContentChar
			{
			L_QuotAttrContentChar591=(CommonToken)match(input,L_QuotAttrContentChar,FOLLOW_L_QuotAttrContentChar_in_p_QuotAttrContentChar10876); if (state.failed) return retval; 
			if ( state.backtracking==0 ) stream_L_QuotAttrContentChar.add(L_QuotAttrContentChar591);

			// AST REWRITE
			// elements: L_QuotAttrContentChar
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			if ( state.backtracking==0 ) {
			retval.tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.getTree():null);

			root_0 = (XQDTCommonTree)adaptor.nil();
			// 1348:17: -> ^( AttributeValueChar L_QuotAttrContentChar )
			{
				// XQueryParser.g:1348:20: ^( AttributeValueChar L_QuotAttrContentChar )
				{
				XQDTCommonTree root_1 = (XQDTCommonTree)adaptor.nil();
				root_1 = (XQDTCommonTree)adaptor.becomeRoot((XQDTCommonTree)adaptor.create(AttributeValueChar, "AttributeValueChar"), root_1);
				adaptor.addChild(root_1, stream_L_QuotAttrContentChar.nextNode());
				adaptor.addChild(root_0, root_1);
				}

			}


			retval.tree = root_0;
			}

			}

			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (XQDTCommonTree)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
			retval.tree = (XQDTCommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "p_QuotAttrContentChar"


	public static class p_AposAttrContentChar_return extends ParserRuleReturnScope {
		XQDTCommonTree tree;
		@Override
		public XQDTCommonTree getTree() { return tree; }
	};


	// $ANTLR start "p_AposAttrContentChar"
	// XQueryParser.g:1352:1: p_AposAttrContentChar : L_AposAttrContentChar -> ^( AttributeValueChar L_AposAttrContentChar ) ;
	public final XQueryParser.p_AposAttrContentChar_return p_AposAttrContentChar() throws RecognitionException {
		XQueryParser.p_AposAttrContentChar_return retval = new XQueryParser.p_AposAttrContentChar_return();
		retval.start = input.LT(1);

		XQDTCommonTree root_0 = null;

		CommonToken L_AposAttrContentChar592=null;

		XQDTCommonTree L_AposAttrContentChar592_tree=null;
		RewriteRuleTokenStream stream_L_AposAttrContentChar=new RewriteRuleTokenStream(adaptor,"token L_AposAttrContentChar");

		try {
			// XQueryParser.g:1353:9: ( L_AposAttrContentChar -> ^( AttributeValueChar L_AposAttrContentChar ) )
			// XQueryParser.g:1353:11: L_AposAttrContentChar
			{
			L_AposAttrContentChar592=(CommonToken)match(input,L_AposAttrContentChar,FOLLOW_L_AposAttrContentChar_in_p_AposAttrContentChar10926); if (state.failed) return retval; 
			if ( state.backtracking==0 ) stream_L_AposAttrContentChar.add(L_AposAttrContentChar592);

			// AST REWRITE
			// elements: L_AposAttrContentChar
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			if ( state.backtracking==0 ) {
			retval.tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.getTree():null);

			root_0 = (XQDTCommonTree)adaptor.nil();
			// 1354:17: -> ^( AttributeValueChar L_AposAttrContentChar )
			{
				// XQueryParser.g:1354:20: ^( AttributeValueChar L_AposAttrContentChar )
				{
				XQDTCommonTree root_1 = (XQDTCommonTree)adaptor.nil();
				root_1 = (XQDTCommonTree)adaptor.becomeRoot((XQDTCommonTree)adaptor.create(AttributeValueChar, "AttributeValueChar"), root_1);
				adaptor.addChild(root_1, stream_L_AposAttrContentChar.nextNode());
				adaptor.addChild(root_0, root_1);
				}

			}


			retval.tree = root_0;
			}

			}

			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (XQDTCommonTree)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
			retval.tree = (XQDTCommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "p_AposAttrContentChar"


	public static class p_QName_return extends ParserRuleReturnScope {
		XQDTCommonTree tree;
		@Override
		public XQDTCommonTree getTree() { return tree; }
	};


	// $ANTLR start "p_QName"
	// XQueryParser.g:1372:1: p_QName : ( pg_QName | p_NCName -> ^( QName p_NCName ) );
	public final XQueryParser.p_QName_return p_QName() throws RecognitionException {
		XQueryParser.p_QName_return retval = new XQueryParser.p_QName_return();
		retval.start = input.LT(1);

		XQDTCommonTree root_0 = null;

		ParserRuleReturnScope pg_QName593 =null;
		ParserRuleReturnScope p_NCName594 =null;

		RewriteRuleSubtreeStream stream_p_NCName=new RewriteRuleSubtreeStream(adaptor,"rule p_NCName");

		setWsExplicit(true);
		try {
			// XQueryParser.g:1374:9: ( pg_QName | p_NCName -> ^( QName p_NCName ) )
			int alt182=2;
			int LA182_0 = input.LA(1);
			if ( ((LA182_0 >= AFTER && LA182_0 <= ALLOWING)||(LA182_0 >= AMP_ER && LA182_0 <= AND)||LA182_0==ANY||(LA182_0 >= APOS_ER && LA182_0 <= ATTRIBUTE)||(LA182_0 >= BASE_URI && LA182_0 <= BINARY)||(LA182_0 >= BOUNDARY_SPACE && LA182_0 <= CATCH)||(LA182_0 >= CHECK && LA182_0 <= CHILD)||(LA182_0 >= COLLATION && LA182_0 <= COLLECTION)||LA182_0==COMMENT||(LA182_0 >= CONSTRAINT && LA182_0 <= DOCUMENT_NODE)||(LA182_0 >= ELEMENT && LA182_0 <= EMPTY)||(LA182_0 >= EMPTY_SEQUENCE && LA182_0 <= EQ)||(LA182_0 >= EVERY && LA182_0 <= GE)||(LA182_0 >= GREATEST && LA182_0 <= GT)||(LA182_0 >= IDIV && LA182_0 <= LAX)||(LA182_0 >= LE && LA182_0 <= LOWERCASE)||LA182_0==LT||LA182_0==L_NCName||(LA182_0 >= MINUS_SIGN && LA182_0 <= NAN)||(LA182_0 >= NE && LA182_0 <= NOT)||(LA182_0 >= NO_INHERIT && LA182_0 <= PHRASE)||(LA182_0 >= PRECEDING && LA182_0 <= PROCESSING_INSTRUCTION)||LA182_0==QUOT_ER||(LA182_0 >= RELATIONSHIP && LA182_0 <= REVALIDATION)||(LA182_0 >= SAME && LA182_0 <= SELF)||(LA182_0 >= SENSITIVE && LA182_0 <= SKIP)||LA182_0==SLIDING||(LA182_0 >= SOME && LA182_0 <= STABLE)||(LA182_0 >= START && LA182_0 <= STRIP)||(LA182_0 >= SWITCH && LA182_0 <= UNORDERED)||(LA182_0 >= UPPERCASE && LA182_0 <= VARIABLE)||(LA182_0 >= VERSION && LA182_0 <= WORDS)||(LA182_0 >= XQUERY && LA182_0 <= ZERO_DIGIT)||LA182_0==EXPLICITLY) ) {
				int LA182_1 = input.LA(2);
				if ( (LA182_1==COLON) ) {
					alt182=1;
				}
				else if ( (LA182_1==EOF||LA182_1==AFTER||LA182_1==ALLOWING||(LA182_1 >= AND && LA182_1 <= ANN_PERCENT)||LA182_1==APOS||(LA182_1 >= AS && LA182_1 <= AT)||LA182_1==BEFORE||LA182_1==BIND||(LA182_1 >= BY && LA182_1 <= CASTABLE)||LA182_1==CHECK||(LA182_1 >= COLLATION && LA182_1 <= COLLECTION)||LA182_1==COMMA||LA182_1==CONCAT||LA182_1==CONTAINS||LA182_1==COUNT||LA182_1==DECIMAL_SEPARATOR||LA182_1==DEFAULT||LA182_1==DESCENDING||LA182_1==DIGIT||LA182_1==DIV||LA182_1==DOLLAR||(LA182_1 >= EMPTY && LA182_1 <= EMPTY_CLOSE_TAG)||LA182_1==END||(LA182_1 >= EQ && LA182_1 <= EQUAL)||LA182_1==EXCEPT||LA182_1==EXTERNAL||(LA182_1 >= FOR && LA182_1 <= FOREIGN)||(LA182_1 >= FUNCTION && LA182_1 <= GREATER_GREATER)||(LA182_1 >= GROUP && LA182_1 <= GT)||LA182_1==IDIV||(LA182_1 >= IN && LA182_1 <= INFINITY)||(LA182_1 >= INSTANCE && LA182_1 <= IS)||LA182_1==KEY||(LA182_1 >= LBRACKET && LA182_1 <= LE)||LA182_1==LET||(LA182_1 >= LPAREN && LA182_1 <= LT)||(LA182_1 >= MINUS && LA182_1 <= MODIFY)||LA182_1==NAN||(LA182_1 >= NE && LA182_1 <= NEXT)||LA182_1==NODE||LA182_1==NOTEQUAL||(LA182_1 >= ON && LA182_1 <= ONLY)||(LA182_1 >= OR && LA182_1 <= ORDER)||LA182_1==PARAGRAPHS||(LA182_1 >= PATTERN_SEPARATOR && LA182_1 <= PER_MILLE)||LA182_1==PLUS||LA182_1==PREVIOUS||(LA182_1 >= QUESTION && LA182_1 <= QUOT)||LA182_1==RBRACKET||LA182_1==RETURN||(LA182_1 >= RPAREN && LA182_1 <= S)||LA182_1==SATISFIES||LA182_1==SCORE||LA182_1==SEMICOLON||LA182_1==SENTENCES||(LA182_1 >= SLASH && LA182_1 <= SLASH_SLASH)||(LA182_1 >= SMALLER && LA182_1 <= SMALLER_SMALLER)||(LA182_1 >= STABLE && LA182_1 <= START)||(LA182_1 >= TIMES && LA182_1 <= TREAT)||LA182_1==UNION||LA182_1==UPDATING||(LA182_1 >= VARIABLE && LA182_1 <= VBAR)||(LA182_1 >= WHEN && LA182_1 <= WHERE)||LA182_1==WITH||LA182_1==WORDS||LA182_1==ZERO_DIGIT) ) {
					alt182=2;
				}

				else {
					if (state.backtracking>0) {state.failed=true; return retval;}
					int nvaeMark = input.mark();
					try {
						input.consume();
						NoViableAltException nvae =
							new NoViableAltException("", 182, 1, input);
						throw nvae;
					} finally {
						input.rewind(nvaeMark);
					}
				}

			}

			else {
				if (state.backtracking>0) {state.failed=true; return retval;}
				NoViableAltException nvae =
					new NoViableAltException("", 182, 0, input);
				throw nvae;
			}

			switch (alt182) {
				case 1 :
					// XQueryParser.g:1374:11: pg_QName
					{
					root_0 = (XQDTCommonTree)adaptor.nil();


					pushFollow(FOLLOW_pg_QName_in_p_QName11012);
					pg_QName593=pg_QName();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, pg_QName593.getTree());

					}
					break;
				case 2 :
					// XQueryParser.g:1375:11: p_NCName
					{
					pushFollow(FOLLOW_p_NCName_in_p_QName11024);
					p_NCName594=p_NCName();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) stream_p_NCName.add(p_NCName594.getTree());
					// AST REWRITE
					// elements: p_NCName
					// token labels: 
					// rule labels: retval
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					if ( state.backtracking==0 ) {
					retval.tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.getTree():null);

					root_0 = (XQDTCommonTree)adaptor.nil();
					// 1376:17: -> ^( QName p_NCName )
					{
						// XQueryParser.g:1376:20: ^( QName p_NCName )
						{
						XQDTCommonTree root_1 = (XQDTCommonTree)adaptor.nil();
						root_1 = (XQDTCommonTree)adaptor.becomeRoot((XQDTCommonTree)adaptor.create(QName, "QName"), root_1);
						adaptor.addChild(root_1, stream_p_NCName.nextTree());
						adaptor.addChild(root_0, root_1);
						}

					}


					retval.tree = root_0;
					}

					}
					break;

			}
			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (XQDTCommonTree)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
			retval.tree = (XQDTCommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);
		}
		finally {
			// do for sure before leaving
			setWsExplicit(false);
		}
		return retval;
	}
	// $ANTLR end "p_QName"


	public static class pg_FQName_return extends ParserRuleReturnScope {
		XQDTCommonTree tree;
		@Override
		public XQDTCommonTree getTree() { return tree; }
	};


	// $ANTLR start "pg_FQName"
	// XQueryParser.g:1380:1: pg_FQName : ( pg_QName | p_FNCName -> ^( QName p_FNCName ) );
	public final XQueryParser.pg_FQName_return pg_FQName() throws RecognitionException {
		XQueryParser.pg_FQName_return retval = new XQueryParser.pg_FQName_return();
		retval.start = input.LT(1);

		XQDTCommonTree root_0 = null;

		ParserRuleReturnScope pg_QName595 =null;
		ParserRuleReturnScope p_FNCName596 =null;

		RewriteRuleSubtreeStream stream_p_FNCName=new RewriteRuleSubtreeStream(adaptor,"rule p_FNCName");

		try {
			// XQueryParser.g:1381:9: ( pg_QName | p_FNCName -> ^( QName p_FNCName ) )
			int alt183=2;
			switch ( input.LA(1) ) {
			case AFTER:
			case ALL:
			case ALLOWING:
			case AMP_ER:
			case ANCESTOR:
			case ANCESTOR_OR_SELF:
			case AND:
			case ANY:
			case APOS_ER:
			case AS:
			case ASCENDING:
			case AT:
			case BASE_URI:
			case BEFORE:
			case BINARY:
			case BOUNDARY_SPACE:
			case BREAK:
			case BY:
			case CASE:
			case CAST:
			case CASTABLE:
			case CATCH:
			case CHECK:
			case CHILD:
			case COLLATION:
			case COLLECTION:
			case CONSTRAINT:
			case CONSTRUCTION:
			case CONTAINS:
			case CONTENT:
			case CONTEXT:
			case CONTINUE:
			case COPY:
			case COPY_NAMESPACES:
			case COUNT:
			case DECIMAL_FORMAT:
			case DECIMAL_SEPARATOR:
			case DECLARE:
			case DEFAULT:
			case DELETE:
			case DESCENDANT:
			case DESCENDANT_OR_SELF:
			case DESCENDING:
			case DIACRITICS:
			case DIFFERENT:
			case DIGIT:
			case DISTANCE:
			case DIV:
			case DOCUMENT:
			case ELSE:
			case EMPTY:
			case ENCODING:
			case END:
			case ENTIRE:
			case EQ:
			case EVERY:
			case EXACTLY:
			case EXCEPT:
			case EXIT:
			case EXTERNAL:
			case FIRST:
			case FOLLOWING:
			case FOLLOWING_SIBLING:
			case FOR:
			case FOREACH:
			case FOREIGN:
			case FROM:
			case FTAND:
			case FTNOT:
			case FTOR:
			case FT_OPTION:
			case FUNCTION:
			case GE:
			case GREATEST:
			case GROUP:
			case GROUPING_SEPARATOR:
			case GT:
			case IDIV:
			case IMPORT:
			case IN:
			case INDEX:
			case INFINITY:
			case INHERIT:
			case INSENSITIVE:
			case INSERT:
			case INSTANCE:
			case INTEGRITY:
			case INTERSECT:
			case INTO:
			case IS:
			case KEY:
			case LANGUAGE:
			case LAST:
			case LAX:
			case LE:
			case LEAST:
			case LET:
			case LEVELS:
			case LOOP:
			case LOWERCASE:
			case LT:
			case L_NCName:
			case MINUS_SIGN:
			case MOD:
			case MODIFY:
			case MODULE:
			case MOST:
			case NAMESPACE:
			case NAN:
			case NE:
			case NEXT:
			case NO:
			case NODES:
			case NOT:
			case NO_INHERIT:
			case NO_PRESERVE:
			case OCCURS:
			case OF:
			case ON:
			case ONLY:
			case OPTION:
			case OR:
			case ORDER:
			case ORDERED:
			case ORDERING:
			case PARAGRAPH:
			case PARAGRAPHS:
			case PARENT:
			case PATTERN_SEPARATOR:
			case PERCENT:
			case PER_MILLE:
			case PHRASE:
			case PRECEDING:
			case PRECEDING_SIBLING:
			case PRESERVE:
			case PREVIOUS:
			case PRIVATE:
			case QUOT_ER:
			case RELATIONSHIP:
			case RENAME:
			case REPLACE:
			case RETURN:
			case RETURNING:
			case REVALIDATION:
			case SAME:
			case SATISFIES:
			case SCHEMA:
			case SCORE:
			case SELF:
			case SENSITIVE:
			case SENTENCE:
			case SENTENCES:
			case SKIP:
			case SLIDING:
			case SOME:
			case STABLE:
			case START:
			case STEMMING:
			case STOP:
			case STRICT:
			case STRIP:
			case THEN:
			case THESAURUS:
			case TIMES:
			case TO:
			case TREAT:
			case TRY:
			case TUMBLING:
			case TYPE:
			case UNION:
			case UNIQUE:
			case UNORDERED:
			case UPPERCASE:
			case USING:
			case VALIDATE:
			case VALUE:
			case VARIABLE:
			case VERSION:
			case WEIGHT:
			case WHEN:
			case WHERE:
			case WILDCARDS:
			case WINDOW:
			case WITH:
			case WITHOUT:
			case WORD:
			case WORDS:
			case XQUERY:
			case ZERO_DIGIT:
			case EXPLICITLY:
				{
				int LA183_1 = input.LA(2);
				if ( (LA183_1==COLON) ) {
					alt183=1;
				}
				else if ( (LA183_1==LPAREN) ) {
					alt183=2;
				}

				else {
					if (state.backtracking>0) {state.failed=true; return retval;}
					int nvaeMark = input.mark();
					try {
						input.consume();
						NoViableAltException nvae =
							new NoViableAltException("", 183, 1, input);
						throw nvae;
					} finally {
						input.rewind(nvaeMark);
					}
				}

				}
				break;
			case ATTRIBUTE:
			case COMMENT:
			case DOCUMENT_NODE:
			case ELEMENT:
			case EMPTY_SEQUENCE:
			case IF:
			case ITEM:
			case NAMESPACE_NODE:
			case NODE:
			case PROCESSING_INSTRUCTION:
			case SCHEMA_ATTRIBUTE:
			case SCHEMA_ELEMENT:
			case SWITCH:
			case TEXT:
			case TYPESWITCH:
			case WHILE:
				{
				alt183=1;
				}
				break;
			case UPDATING:
				{
				alt183=2;
				}
				break;
			default:
				if (state.backtracking>0) {state.failed=true; return retval;}
				NoViableAltException nvae =
					new NoViableAltException("", 183, 0, input);
				throw nvae;
			}
			switch (alt183) {
				case 1 :
					// XQueryParser.g:1381:11: pg_QName
					{
					root_0 = (XQDTCommonTree)adaptor.nil();


					pushFollow(FOLLOW_pg_QName_in_pg_FQName11085);
					pg_QName595=pg_QName();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, pg_QName595.getTree());

					}
					break;
				case 2 :
					// XQueryParser.g:1382:11: p_FNCName
					{
					pushFollow(FOLLOW_p_FNCName_in_pg_FQName11097);
					p_FNCName596=p_FNCName();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) stream_p_FNCName.add(p_FNCName596.getTree());
					// AST REWRITE
					// elements: p_FNCName
					// token labels: 
					// rule labels: retval
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					if ( state.backtracking==0 ) {
					retval.tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.getTree():null);

					root_0 = (XQDTCommonTree)adaptor.nil();
					// 1383:17: -> ^( QName p_FNCName )
					{
						// XQueryParser.g:1383:20: ^( QName p_FNCName )
						{
						XQDTCommonTree root_1 = (XQDTCommonTree)adaptor.nil();
						root_1 = (XQDTCommonTree)adaptor.becomeRoot((XQDTCommonTree)adaptor.create(QName, "QName"), root_1);
						adaptor.addChild(root_1, stream_p_FNCName.nextTree());
						adaptor.addChild(root_0, root_1);
						}

					}


					retval.tree = root_0;
					}

					}
					break;

			}
			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (XQDTCommonTree)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
			retval.tree = (XQDTCommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "pg_FQName"


	public static class pg_QName_return extends ParserRuleReturnScope {
		XQDTCommonTree tree;
		@Override
		public XQDTCommonTree getTree() { return tree; }
	};


	// $ANTLR start "pg_QName"
	// XQueryParser.g:1385:1: pg_QName : nn= p_NCName COLON nl= p_NCName -> ^( QName $nn $nl) ;
	public final XQueryParser.pg_QName_return pg_QName() throws RecognitionException {
		XQueryParser.pg_QName_return retval = new XQueryParser.pg_QName_return();
		retval.start = input.LT(1);

		XQDTCommonTree root_0 = null;

		CommonToken COLON597=null;
		ParserRuleReturnScope nn =null;
		ParserRuleReturnScope nl =null;

		XQDTCommonTree COLON597_tree=null;
		RewriteRuleTokenStream stream_COLON=new RewriteRuleTokenStream(adaptor,"token COLON");
		RewriteRuleSubtreeStream stream_p_NCName=new RewriteRuleSubtreeStream(adaptor,"rule p_NCName");

		try {
			// XQueryParser.g:1386:9: (nn= p_NCName COLON nl= p_NCName -> ^( QName $nn $nl) )
			// XQueryParser.g:1386:11: nn= p_NCName COLON nl= p_NCName
			{
			pushFollow(FOLLOW_p_NCName_in_pg_QName11141);
			nn=p_NCName();
			state._fsp--;
			if (state.failed) return retval;
			if ( state.backtracking==0 ) stream_p_NCName.add(nn.getTree());
			COLON597=(CommonToken)match(input,COLON,FOLLOW_COLON_in_pg_QName11143); if (state.failed) return retval; 
			if ( state.backtracking==0 ) stream_COLON.add(COLON597);

			pushFollow(FOLLOW_p_NCName_in_pg_QName11147);
			nl=p_NCName();
			state._fsp--;
			if (state.failed) return retval;
			if ( state.backtracking==0 ) stream_p_NCName.add(nl.getTree());
			// AST REWRITE
			// elements: nn, nl
			// token labels: 
			// rule labels: retval, nn, nl
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			if ( state.backtracking==0 ) {
			retval.tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.getTree():null);
			RewriteRuleSubtreeStream stream_nn=new RewriteRuleSubtreeStream(adaptor,"rule nn",nn!=null?nn.getTree():null);
			RewriteRuleSubtreeStream stream_nl=new RewriteRuleSubtreeStream(adaptor,"rule nl",nl!=null?nl.getTree():null);

			root_0 = (XQDTCommonTree)adaptor.nil();
			// 1387:17: -> ^( QName $nn $nl)
			{
				// XQueryParser.g:1387:20: ^( QName $nn $nl)
				{
				XQDTCommonTree root_1 = (XQDTCommonTree)adaptor.nil();
				root_1 = (XQDTCommonTree)adaptor.becomeRoot((XQDTCommonTree)adaptor.create(QName, "QName"), root_1);
				adaptor.addChild(root_1, stream_nn.nextTree());
				adaptor.addChild(root_1, stream_nl.nextTree());
				adaptor.addChild(root_0, root_1);
				}

			}


			retval.tree = root_0;
			}

			}

			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (XQDTCommonTree)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
			retval.tree = (XQDTCommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "pg_QName"


	public static class p_NCName_return extends ParserRuleReturnScope {
		XQDTCommonTree tree;
		@Override
		public XQDTCommonTree getTree() { return tree; }
	};


	// $ANTLR start "p_NCName"
	// XQueryParser.g:1417:1: p_NCName : ( L_NCName | ANCESTOR | ANCESTOR_OR_SELF | AND | AS | ASCENDING | AT | ATTRIBUTE | BASE_URI | BOUNDARY_SPACE | BY | CASE | CAST | CASTABLE | CHILD | COLLATION | COMMENT | CONSTRUCTION | COPY_NAMESPACES | DECLARE | DEFAULT | DESCENDANT | DESCENDANT_OR_SELF | DESCENDING | DIV | DOCUMENT | DOCUMENT_NODE | ELEMENT | ELSE | EMPTY | EMPTY_SEQUENCE | ENCODING | EQ | EVERY | EXCEPT | EXTERNAL | FOLLOWING | FOLLOWING_SIBLING | FOR | FUNCTION | GE | GREATEST | GT | IDIV | IF | IMPORT | IN | INHERIT | INSTANCE | INTERSECT | IS | ITEM | LAX | LE | LEAST | LET | LT | MOD | MODULE | NAMESPACE | NE | NO_INHERIT | NO_PRESERVE | NODE | OF | OPTION | OR | ORDER | ORDERED | ORDERING | PARENT | PRECEDING | PRECEDING_SIBLING | PRESERVE | PROCESSING_INSTRUCTION | RETURN | SATISFIES | SCHEMA | SCHEMA_ATTRIBUTE | SCHEMA_ELEMENT | SELF | SOME | STABLE | STRICT | STRIP | SWITCH | TEXT | THEN | TO | TREAT | TYPESWITCH | UNION | UNORDERED | VALIDATE | VARIABLE | VERSION | WHERE | XQUERY | ALLOWING | CATCH | CONTEXT | COUNT | DECIMAL_FORMAT | DECIMAL_SEPARATOR | DIGIT | END | GROUP | GROUPING_SEPARATOR | INFINITY | MINUS_SIGN | NAMESPACE_NODE | NAN | NEXT | ONLY | PATTERN_SEPARATOR | PERCENT | PER_MILLE | PREVIOUS | SLIDING | START | TRY | TUMBLING | TYPE | WHEN | WINDOW | ZERO_DIGIT | AFTER | BEFORE | COPY | DELETE | FIRST | INSERT | INTO | LAST | MODIFY | NODES | RENAME | REPLACE | REVALIDATION | SKIP | VALUE | WITH | ALL | ANY | CONTAINS | CONTENT | DIACRITICS | DIFFERENT | DISTANCE | ENTIRE | EXACTLY | FROM | FT_OPTION | FTAND | FTNOT | FTOR | INSENSITIVE | LANGUAGE | LEVELS | LOWERCASE | MOST | NO | NOT | OCCURS | PARAGRAPH | PARAGRAPHS | PHRASE | RELATIONSHIP | SAME | SCORE | SENSITIVE | SENTENCE | SENTENCES | STEMMING | STOP | THESAURUS | TIMES | UPPERCASE | USING | WEIGHT | WILDCARDS | WITHOUT | WORD | WORDS | BREAK | CONTINUE | EXIT | LOOP | RETURNING | WHILE | CHECK | COLLECTION | CONSTRAINT | EXPLICITLY | FOREACH | FOREIGN | INDEX | INTEGRITY | KEY | ON | UNIQUE | BINARY | PRIVATE | AMP_ER | APOS_ER | QUOT_ER );
	public final XQueryParser.p_NCName_return p_NCName() throws RecognitionException {
		XQueryParser.p_NCName_return retval = new XQueryParser.p_NCName_return();
		retval.start = input.LT(1);

		XQDTCommonTree root_0 = null;

		CommonToken set598=null;

		XQDTCommonTree set598_tree=null;

		try {
			// XQueryParser.g:1418:9: ( L_NCName | ANCESTOR | ANCESTOR_OR_SELF | AND | AS | ASCENDING | AT | ATTRIBUTE | BASE_URI | BOUNDARY_SPACE | BY | CASE | CAST | CASTABLE | CHILD | COLLATION | COMMENT | CONSTRUCTION | COPY_NAMESPACES | DECLARE | DEFAULT | DESCENDANT | DESCENDANT_OR_SELF | DESCENDING | DIV | DOCUMENT | DOCUMENT_NODE | ELEMENT | ELSE | EMPTY | EMPTY_SEQUENCE | ENCODING | EQ | EVERY | EXCEPT | EXTERNAL | FOLLOWING | FOLLOWING_SIBLING | FOR | FUNCTION | GE | GREATEST | GT | IDIV | IF | IMPORT | IN | INHERIT | INSTANCE | INTERSECT | IS | ITEM | LAX | LE | LEAST | LET | LT | MOD | MODULE | NAMESPACE | NE | NO_INHERIT | NO_PRESERVE | NODE | OF | OPTION | OR | ORDER | ORDERED | ORDERING | PARENT | PRECEDING | PRECEDING_SIBLING | PRESERVE | PROCESSING_INSTRUCTION | RETURN | SATISFIES | SCHEMA | SCHEMA_ATTRIBUTE | SCHEMA_ELEMENT | SELF | SOME | STABLE | STRICT | STRIP | SWITCH | TEXT | THEN | TO | TREAT | TYPESWITCH | UNION | UNORDERED | VALIDATE | VARIABLE | VERSION | WHERE | XQUERY | ALLOWING | CATCH | CONTEXT | COUNT | DECIMAL_FORMAT | DECIMAL_SEPARATOR | DIGIT | END | GROUP | GROUPING_SEPARATOR | INFINITY | MINUS_SIGN | NAMESPACE_NODE | NAN | NEXT | ONLY | PATTERN_SEPARATOR | PERCENT | PER_MILLE | PREVIOUS | SLIDING | START | TRY | TUMBLING | TYPE | WHEN | WINDOW | ZERO_DIGIT | AFTER | BEFORE | COPY | DELETE | FIRST | INSERT | INTO | LAST | MODIFY | NODES | RENAME | REPLACE | REVALIDATION | SKIP | VALUE | WITH | ALL | ANY | CONTAINS | CONTENT | DIACRITICS | DIFFERENT | DISTANCE | ENTIRE | EXACTLY | FROM | FT_OPTION | FTAND | FTNOT | FTOR | INSENSITIVE | LANGUAGE | LEVELS | LOWERCASE | MOST | NO | NOT | OCCURS | PARAGRAPH | PARAGRAPHS | PHRASE | RELATIONSHIP | SAME | SCORE | SENSITIVE | SENTENCE | SENTENCES | STEMMING | STOP | THESAURUS | TIMES | UPPERCASE | USING | WEIGHT | WILDCARDS | WITHOUT | WORD | WORDS | BREAK | CONTINUE | EXIT | LOOP | RETURNING | WHILE | CHECK | COLLECTION | CONSTRAINT | EXPLICITLY | FOREACH | FOREIGN | INDEX | INTEGRITY | KEY | ON | UNIQUE | BINARY | PRIVATE | AMP_ER | APOS_ER | QUOT_ER )
			// XQueryParser.g:
			{
			root_0 = (XQDTCommonTree)adaptor.nil();


			set598=(CommonToken)input.LT(1);
			if ( (input.LA(1) >= AFTER && input.LA(1) <= ALLOWING)||(input.LA(1) >= AMP_ER && input.LA(1) <= AND)||input.LA(1)==ANY||(input.LA(1) >= APOS_ER && input.LA(1) <= ATTRIBUTE)||(input.LA(1) >= BASE_URI && input.LA(1) <= BINARY)||(input.LA(1) >= BOUNDARY_SPACE && input.LA(1) <= CATCH)||(input.LA(1) >= CHECK && input.LA(1) <= CHILD)||(input.LA(1) >= COLLATION && input.LA(1) <= COLLECTION)||input.LA(1)==COMMENT||(input.LA(1) >= CONSTRAINT && input.LA(1) <= DOCUMENT_NODE)||(input.LA(1) >= ELEMENT && input.LA(1) <= EMPTY)||(input.LA(1) >= EMPTY_SEQUENCE && input.LA(1) <= EQ)||(input.LA(1) >= EVERY && input.LA(1) <= GE)||(input.LA(1) >= GREATEST && input.LA(1) <= GT)||(input.LA(1) >= IDIV && input.LA(1) <= LAX)||(input.LA(1) >= LE && input.LA(1) <= LOWERCASE)||input.LA(1)==LT||input.LA(1)==L_NCName||(input.LA(1) >= MINUS_SIGN && input.LA(1) <= NAN)||(input.LA(1) >= NE && input.LA(1) <= NOT)||(input.LA(1) >= NO_INHERIT && input.LA(1) <= PHRASE)||(input.LA(1) >= PRECEDING && input.LA(1) <= PROCESSING_INSTRUCTION)||input.LA(1)==QUOT_ER||(input.LA(1) >= RELATIONSHIP && input.LA(1) <= REVALIDATION)||(input.LA(1) >= SAME && input.LA(1) <= SELF)||(input.LA(1) >= SENSITIVE && input.LA(1) <= SKIP)||input.LA(1)==SLIDING||(input.LA(1) >= SOME && input.LA(1) <= STABLE)||(input.LA(1) >= START && input.LA(1) <= STRIP)||(input.LA(1) >= SWITCH && input.LA(1) <= UNORDERED)||(input.LA(1) >= UPPERCASE && input.LA(1) <= VARIABLE)||(input.LA(1) >= VERSION && input.LA(1) <= WORDS)||(input.LA(1) >= XQUERY && input.LA(1) <= ZERO_DIGIT)||input.LA(1)==EXPLICITLY ) {
				input.consume();
				if ( state.backtracking==0 ) adaptor.addChild(root_0, (XQDTCommonTree)adaptor.create(set598));
				state.errorRecovery=false;
				state.failed=false;
			}
			else {
				if (state.backtracking>0) {state.failed=true; return retval;}
				MismatchedSetException mse = new MismatchedSetException(null,input);
				throw mse;
			}
			}

			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (XQDTCommonTree)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
			retval.tree = (XQDTCommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "p_NCName"


	public static class p_FNCName_return extends ParserRuleReturnScope {
		XQDTCommonTree tree;
		@Override
		public XQDTCommonTree getTree() { return tree; }
	};


	// $ANTLR start "p_FNCName"
	// XQueryParser.g:1436:1: p_FNCName : ( L_NCName | ANCESTOR | ANCESTOR_OR_SELF | AND | AS | ASCENDING | AT | BASE_URI | BOUNDARY_SPACE | BY | CASE | CAST | CASTABLE | CHILD | COLLATION | CONSTRUCTION | COPY_NAMESPACES | DECLARE | DEFAULT | DESCENDANT | DESCENDANT_OR_SELF | DESCENDING | DIV | DOCUMENT | ELSE | EMPTY | ENCODING | EQ | EVERY | EXCEPT | EXTERNAL | FOLLOWING | FOLLOWING_SIBLING | FOR | FUNCTION | GE | GREATEST | GT | IDIV | IMPORT | IN | INHERIT | INSTANCE | INTERSECT | IS | LAX | LE | LEAST | LET | LT | MOD | MODULE | NAMESPACE | NE | NO_INHERIT | NO_PRESERVE | OF | OPTION | OR | ORDER | ORDERED | ORDERING | PARENT | PRECEDING | PRECEDING_SIBLING | PRESERVE | RETURN | SATISFIES | SCHEMA | SELF | SOME | STABLE | STRICT | STRIP | THEN | TO | TREAT | UNION | UNORDERED | VALIDATE | VARIABLE | VERSION | WHERE | XQUERY | ALLOWING | CATCH | CONTEXT | COUNT | DECIMAL_FORMAT | DECIMAL_SEPARATOR | DIGIT | END | GROUP | GROUPING_SEPARATOR | INFINITY | MINUS_SIGN | NAN | NEXT | ONLY | PATTERN_SEPARATOR | PERCENT | PER_MILLE | PREVIOUS | SLIDING | START | TRY | TUMBLING | TYPE | WHEN | WINDOW | ZERO_DIGIT | AFTER | BEFORE | COPY | DELETE | FIRST | INSERT | INTO | LAST | MODIFY | NODES | RENAME | REPLACE | REVALIDATION | SKIP | UPDATING | VALUE | WITH | ALL | ANY | CONTAINS | CONTENT | DIACRITICS | DIFFERENT | DISTANCE | ENTIRE | EXACTLY | FROM | FT_OPTION | FTAND | FTNOT | FTOR | INSENSITIVE | LANGUAGE | LEVELS | LOWERCASE | MOST | NO | NOT | OCCURS | PARAGRAPH | PARAGRAPHS | PHRASE | RELATIONSHIP | SAME | SCORE | SENSITIVE | SENTENCE | SENTENCES | STEMMING | STOP | THESAURUS | TIMES | UPPERCASE | USING | WEIGHT | WILDCARDS | WITHOUT | WORD | WORDS | BREAK | CONTINUE | EXIT | LOOP | RETURNING | CHECK | COLLECTION | CONSTRAINT | EXPLICITLY | FOREACH | FOREIGN | INDEX | INTEGRITY | KEY | ON | UNIQUE | BINARY | PRIVATE | AMP_ER | APOS_ER | QUOT_ER );
	public final XQueryParser.p_FNCName_return p_FNCName() throws RecognitionException {
		XQueryParser.p_FNCName_return retval = new XQueryParser.p_FNCName_return();
		retval.start = input.LT(1);

		XQDTCommonTree root_0 = null;

		CommonToken set599=null;

		XQDTCommonTree set599_tree=null;

		try {
			// XQueryParser.g:1437:9: ( L_NCName | ANCESTOR | ANCESTOR_OR_SELF | AND | AS | ASCENDING | AT | BASE_URI | BOUNDARY_SPACE | BY | CASE | CAST | CASTABLE | CHILD | COLLATION | CONSTRUCTION | COPY_NAMESPACES | DECLARE | DEFAULT | DESCENDANT | DESCENDANT_OR_SELF | DESCENDING | DIV | DOCUMENT | ELSE | EMPTY | ENCODING | EQ | EVERY | EXCEPT | EXTERNAL | FOLLOWING | FOLLOWING_SIBLING | FOR | FUNCTION | GE | GREATEST | GT | IDIV | IMPORT | IN | INHERIT | INSTANCE | INTERSECT | IS | LAX | LE | LEAST | LET | LT | MOD | MODULE | NAMESPACE | NE | NO_INHERIT | NO_PRESERVE | OF | OPTION | OR | ORDER | ORDERED | ORDERING | PARENT | PRECEDING | PRECEDING_SIBLING | PRESERVE | RETURN | SATISFIES | SCHEMA | SELF | SOME | STABLE | STRICT | STRIP | THEN | TO | TREAT | UNION | UNORDERED | VALIDATE | VARIABLE | VERSION | WHERE | XQUERY | ALLOWING | CATCH | CONTEXT | COUNT | DECIMAL_FORMAT | DECIMAL_SEPARATOR | DIGIT | END | GROUP | GROUPING_SEPARATOR | INFINITY | MINUS_SIGN | NAN | NEXT | ONLY | PATTERN_SEPARATOR | PERCENT | PER_MILLE | PREVIOUS | SLIDING | START | TRY | TUMBLING | TYPE | WHEN | WINDOW | ZERO_DIGIT | AFTER | BEFORE | COPY | DELETE | FIRST | INSERT | INTO | LAST | MODIFY | NODES | RENAME | REPLACE | REVALIDATION | SKIP | UPDATING | VALUE | WITH | ALL | ANY | CONTAINS | CONTENT | DIACRITICS | DIFFERENT | DISTANCE | ENTIRE | EXACTLY | FROM | FT_OPTION | FTAND | FTNOT | FTOR | INSENSITIVE | LANGUAGE | LEVELS | LOWERCASE | MOST | NO | NOT | OCCURS | PARAGRAPH | PARAGRAPHS | PHRASE | RELATIONSHIP | SAME | SCORE | SENSITIVE | SENTENCE | SENTENCES | STEMMING | STOP | THESAURUS | TIMES | UPPERCASE | USING | WEIGHT | WILDCARDS | WITHOUT | WORD | WORDS | BREAK | CONTINUE | EXIT | LOOP | RETURNING | CHECK | COLLECTION | CONSTRAINT | EXPLICITLY | FOREACH | FOREIGN | INDEX | INTEGRITY | KEY | ON | UNIQUE | BINARY | PRIVATE | AMP_ER | APOS_ER | QUOT_ER )
			// XQueryParser.g:
			{
			root_0 = (XQDTCommonTree)adaptor.nil();


			set599=(CommonToken)input.LT(1);
			if ( (input.LA(1) >= AFTER && input.LA(1) <= ALLOWING)||(input.LA(1) >= AMP_ER && input.LA(1) <= AND)||input.LA(1)==ANY||(input.LA(1) >= APOS_ER && input.LA(1) <= AT)||(input.LA(1) >= BASE_URI && input.LA(1) <= BINARY)||(input.LA(1) >= BOUNDARY_SPACE && input.LA(1) <= CATCH)||(input.LA(1) >= CHECK && input.LA(1) <= CHILD)||(input.LA(1) >= COLLATION && input.LA(1) <= COLLECTION)||(input.LA(1) >= CONSTRAINT && input.LA(1) <= DOCUMENT)||(input.LA(1) >= ELSE && input.LA(1) <= EMPTY)||(input.LA(1) >= ENCODING && input.LA(1) <= EQ)||(input.LA(1) >= EVERY && input.LA(1) <= GE)||(input.LA(1) >= GREATEST && input.LA(1) <= GT)||input.LA(1)==IDIV||(input.LA(1) >= IMPORT && input.LA(1) <= IS)||(input.LA(1) >= KEY && input.LA(1) <= LAX)||(input.LA(1) >= LE && input.LA(1) <= LOWERCASE)||input.LA(1)==LT||input.LA(1)==L_NCName||(input.LA(1) >= MINUS_SIGN && input.LA(1) <= NAMESPACE)||input.LA(1)==NAN||(input.LA(1) >= NE && input.LA(1) <= NO)||(input.LA(1) >= NODES && input.LA(1) <= NOT)||(input.LA(1) >= NO_INHERIT && input.LA(1) <= PHRASE)||(input.LA(1) >= PRECEDING && input.LA(1) <= PRIVATE)||input.LA(1)==QUOT_ER||(input.LA(1) >= RELATIONSHIP && input.LA(1) <= REVALIDATION)||(input.LA(1) >= SAME && input.LA(1) <= SCHEMA)||(input.LA(1) >= SCORE && input.LA(1) <= SELF)||(input.LA(1) >= SENSITIVE && input.LA(1) <= SKIP)||input.LA(1)==SLIDING||(input.LA(1) >= SOME && input.LA(1) <= STABLE)||(input.LA(1) >= START && input.LA(1) <= STRIP)||(input.LA(1) >= THEN && input.LA(1) <= TYPE)||(input.LA(1) >= UNION && input.LA(1) <= VARIABLE)||(input.LA(1) >= VERSION && input.LA(1) <= WHERE)||(input.LA(1) >= WILDCARDS && input.LA(1) <= WORDS)||(input.LA(1) >= XQUERY && input.LA(1) <= ZERO_DIGIT)||input.LA(1)==EXPLICITLY ) {
				input.consume();
				if ( state.backtracking==0 ) adaptor.addChild(root_0, (XQDTCommonTree)adaptor.create(set599));
				state.errorRecovery=false;
				state.failed=false;
			}
			else {
				if (state.backtracking>0) {state.failed=true; return retval;}
				MismatchedSetException mse = new MismatchedSetException(null,input);
				throw mse;
			}
			}

			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (XQDTCommonTree)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
			retval.tree = (XQDTCommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "p_FNCName"


	public static class pg_UpdateExpr_return extends ParserRuleReturnScope {
		XQDTCommonTree tree;
		@Override
		public XQDTCommonTree getTree() { return tree; }
	};


	// $ANTLR start "pg_UpdateExpr"
	// XQueryParser.g:1474:1: pg_UpdateExpr : ( p_InsertExpr | p_DeleteExpr | p_RenameExpr | p_ReplaceExpr | p_TransformExpr );
	public final XQueryParser.pg_UpdateExpr_return pg_UpdateExpr() throws RecognitionException {
		XQueryParser.pg_UpdateExpr_return retval = new XQueryParser.pg_UpdateExpr_return();
		retval.start = input.LT(1);

		XQDTCommonTree root_0 = null;

		ParserRuleReturnScope p_InsertExpr600 =null;
		ParserRuleReturnScope p_DeleteExpr601 =null;
		ParserRuleReturnScope p_RenameExpr602 =null;
		ParserRuleReturnScope p_ReplaceExpr603 =null;
		ParserRuleReturnScope p_TransformExpr604 =null;


		try {
			// XQueryParser.g:1475:9: ( p_InsertExpr | p_DeleteExpr | p_RenameExpr | p_ReplaceExpr | p_TransformExpr )
			int alt184=5;
			switch ( input.LA(1) ) {
			case INSERT:
				{
				alt184=1;
				}
				break;
			case DELETE:
				{
				alt184=2;
				}
				break;
			case RENAME:
				{
				alt184=3;
				}
				break;
			case REPLACE:
				{
				alt184=4;
				}
				break;
			case COPY:
				{
				alt184=5;
				}
				break;
			default:
				if (state.backtracking>0) {state.failed=true; return retval;}
				NoViableAltException nvae =
					new NoViableAltException("", 184, 0, input);
				throw nvae;
			}
			switch (alt184) {
				case 1 :
					// XQueryParser.g:1475:11: p_InsertExpr
					{
					root_0 = (XQDTCommonTree)adaptor.nil();


					pushFollow(FOLLOW_p_InsertExpr_in_pg_UpdateExpr13146);
					p_InsertExpr600=p_InsertExpr();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, p_InsertExpr600.getTree());

					}
					break;
				case 2 :
					// XQueryParser.g:1476:11: p_DeleteExpr
					{
					root_0 = (XQDTCommonTree)adaptor.nil();


					pushFollow(FOLLOW_p_DeleteExpr_in_pg_UpdateExpr13158);
					p_DeleteExpr601=p_DeleteExpr();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, p_DeleteExpr601.getTree());

					}
					break;
				case 3 :
					// XQueryParser.g:1477:11: p_RenameExpr
					{
					root_0 = (XQDTCommonTree)adaptor.nil();


					pushFollow(FOLLOW_p_RenameExpr_in_pg_UpdateExpr13170);
					p_RenameExpr602=p_RenameExpr();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, p_RenameExpr602.getTree());

					}
					break;
				case 4 :
					// XQueryParser.g:1478:11: p_ReplaceExpr
					{
					root_0 = (XQDTCommonTree)adaptor.nil();


					pushFollow(FOLLOW_p_ReplaceExpr_in_pg_UpdateExpr13182);
					p_ReplaceExpr603=p_ReplaceExpr();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, p_ReplaceExpr603.getTree());

					}
					break;
				case 5 :
					// XQueryParser.g:1479:11: p_TransformExpr
					{
					root_0 = (XQDTCommonTree)adaptor.nil();


					pushFollow(FOLLOW_p_TransformExpr_in_pg_UpdateExpr13194);
					p_TransformExpr604=p_TransformExpr();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, p_TransformExpr604.getTree());

					}
					break;

			}
			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (XQDTCommonTree)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
			retval.tree = (XQDTCommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "pg_UpdateExpr"


	public static class pm_RevalidationDecl_return extends ParserRuleReturnScope {
		XQDTCommonTree tree;
		@Override
		public XQDTCommonTree getTree() { return tree; }
	};


	// $ANTLR start "pm_RevalidationDecl"
	// XQueryParser.g:1483:1: pm_RevalidationDecl :k+= DECLARE k+= REVALIDATION (k+= STRICT |k+= LAX |k+= SKIP ) SEMICOLON ;
	public final XQueryParser.pm_RevalidationDecl_return pm_RevalidationDecl() throws RecognitionException {
		XQueryParser.pm_RevalidationDecl_return retval = new XQueryParser.pm_RevalidationDecl_return();
		retval.start = input.LT(1);

		XQDTCommonTree root_0 = null;

		CommonToken SEMICOLON605=null;
		CommonToken k=null;
		List<Object> list_k=null;

		XQDTCommonTree SEMICOLON605_tree=null;
		XQDTCommonTree k_tree=null;

		try {
			// XQueryParser.g:1484:9: (k+= DECLARE k+= REVALIDATION (k+= STRICT |k+= LAX |k+= SKIP ) SEMICOLON )
			// XQueryParser.g:1484:11: k+= DECLARE k+= REVALIDATION (k+= STRICT |k+= LAX |k+= SKIP ) SEMICOLON
			{
			root_0 = (XQDTCommonTree)adaptor.nil();


			k=(CommonToken)match(input,DECLARE,FOLLOW_DECLARE_in_pm_RevalidationDecl13222); if (state.failed) return retval;
			if ( state.backtracking==0 ) {
			k_tree = (XQDTCommonTree)adaptor.create(k);
			adaptor.addChild(root_0, k_tree);
			}

			if (list_k==null) list_k=new ArrayList<Object>();
			list_k.add(k);
			k=(CommonToken)match(input,REVALIDATION,FOLLOW_REVALIDATION_in_pm_RevalidationDecl13226); if (state.failed) return retval;
			if ( state.backtracking==0 ) {
			k_tree = (XQDTCommonTree)adaptor.create(k);
			adaptor.addChild(root_0, k_tree);
			}

			if (list_k==null) list_k=new ArrayList<Object>();
			list_k.add(k);
			// XQueryParser.g:1484:38: (k+= STRICT |k+= LAX |k+= SKIP )
			int alt185=3;
			switch ( input.LA(1) ) {
			case STRICT:
				{
				alt185=1;
				}
				break;
			case LAX:
				{
				alt185=2;
				}
				break;
			case SKIP:
				{
				alt185=3;
				}
				break;
			default:
				if (state.backtracking>0) {state.failed=true; return retval;}
				NoViableAltException nvae =
					new NoViableAltException("", 185, 0, input);
				throw nvae;
			}
			switch (alt185) {
				case 1 :
					// XQueryParser.g:1484:39: k+= STRICT
					{
					k=(CommonToken)match(input,STRICT,FOLLOW_STRICT_in_pm_RevalidationDecl13231); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					k_tree = (XQDTCommonTree)adaptor.create(k);
					adaptor.addChild(root_0, k_tree);
					}

					if (list_k==null) list_k=new ArrayList<Object>();
					list_k.add(k);
					}
					break;
				case 2 :
					// XQueryParser.g:1484:51: k+= LAX
					{
					k=(CommonToken)match(input,LAX,FOLLOW_LAX_in_pm_RevalidationDecl13237); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					k_tree = (XQDTCommonTree)adaptor.create(k);
					adaptor.addChild(root_0, k_tree);
					}

					if (list_k==null) list_k=new ArrayList<Object>();
					list_k.add(k);
					}
					break;
				case 3 :
					// XQueryParser.g:1484:60: k+= SKIP
					{
					k=(CommonToken)match(input,SKIP,FOLLOW_SKIP_in_pm_RevalidationDecl13243); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					k_tree = (XQDTCommonTree)adaptor.create(k);
					adaptor.addChild(root_0, k_tree);
					}

					if (list_k==null) list_k=new ArrayList<Object>();
					list_k.add(k);
					}
					break;

			}

			if ( state.backtracking==0 ) {ak(list_k);}
			SEMICOLON605=(CommonToken)match(input,SEMICOLON,FOLLOW_SEMICOLON_in_pm_RevalidationDecl13248); if (state.failed) return retval;
			if ( state.backtracking==0 ) {
			SEMICOLON605_tree = (XQDTCommonTree)adaptor.create(SEMICOLON605);
			adaptor.addChild(root_0, SEMICOLON605_tree);
			}

			}

			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (XQDTCommonTree)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
			retval.tree = (XQDTCommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "pm_RevalidationDecl"


	public static class p_InsertExprTargetChoice_return extends ParserRuleReturnScope {
		XQDTCommonTree tree;
		@Override
		public XQDTCommonTree getTree() { return tree; }
	};


	// $ANTLR start "p_InsertExprTargetChoice"
	// XQueryParser.g:1488:1: p_InsertExprTargetChoice : ( ( (k+= AS (k+= FIRST |k+= LAST ) )? k+= INTO ) |ka= AFTER |kb= BEFORE );
	public final XQueryParser.p_InsertExprTargetChoice_return p_InsertExprTargetChoice() throws RecognitionException {
		XQueryParser.p_InsertExprTargetChoice_return retval = new XQueryParser.p_InsertExprTargetChoice_return();
		retval.start = input.LT(1);

		XQDTCommonTree root_0 = null;

		CommonToken ka=null;
		CommonToken kb=null;
		CommonToken k=null;
		List<Object> list_k=null;

		XQDTCommonTree ka_tree=null;
		XQDTCommonTree kb_tree=null;
		XQDTCommonTree k_tree=null;

		try {
			// XQueryParser.g:1489:9: ( ( (k+= AS (k+= FIRST |k+= LAST ) )? k+= INTO ) |ka= AFTER |kb= BEFORE )
			int alt188=3;
			switch ( input.LA(1) ) {
			case AS:
			case INTO:
				{
				alt188=1;
				}
				break;
			case AFTER:
				{
				alt188=2;
				}
				break;
			case BEFORE:
				{
				alt188=3;
				}
				break;
			default:
				if (state.backtracking>0) {state.failed=true; return retval;}
				NoViableAltException nvae =
					new NoViableAltException("", 188, 0, input);
				throw nvae;
			}
			switch (alt188) {
				case 1 :
					// XQueryParser.g:1489:11: ( (k+= AS (k+= FIRST |k+= LAST ) )? k+= INTO )
					{
					root_0 = (XQDTCommonTree)adaptor.nil();


					// XQueryParser.g:1489:11: ( (k+= AS (k+= FIRST |k+= LAST ) )? k+= INTO )
					// XQueryParser.g:1489:12: (k+= AS (k+= FIRST |k+= LAST ) )? k+= INTO
					{
					// XQueryParser.g:1489:12: (k+= AS (k+= FIRST |k+= LAST ) )?
					int alt187=2;
					int LA187_0 = input.LA(1);
					if ( (LA187_0==AS) ) {
						alt187=1;
					}
					switch (alt187) {
						case 1 :
							// XQueryParser.g:1489:13: k+= AS (k+= FIRST |k+= LAST )
							{
							k=(CommonToken)match(input,AS,FOLLOW_AS_in_p_InsertExprTargetChoice13278); if (state.failed) return retval;
							if ( state.backtracking==0 ) {
							k_tree = (XQDTCommonTree)adaptor.create(k);
							adaptor.addChild(root_0, k_tree);
							}

							if (list_k==null) list_k=new ArrayList<Object>();
							list_k.add(k);
							// XQueryParser.g:1489:19: (k+= FIRST |k+= LAST )
							int alt186=2;
							int LA186_0 = input.LA(1);
							if ( (LA186_0==FIRST) ) {
								alt186=1;
							}
							else if ( (LA186_0==LAST) ) {
								alt186=2;
							}

							else {
								if (state.backtracking>0) {state.failed=true; return retval;}
								NoViableAltException nvae =
									new NoViableAltException("", 186, 0, input);
								throw nvae;
							}

							switch (alt186) {
								case 1 :
									// XQueryParser.g:1489:20: k+= FIRST
									{
									k=(CommonToken)match(input,FIRST,FOLLOW_FIRST_in_p_InsertExprTargetChoice13283); if (state.failed) return retval;
									if ( state.backtracking==0 ) {
									k_tree = (XQDTCommonTree)adaptor.create(k);
									adaptor.addChild(root_0, k_tree);
									}

									if (list_k==null) list_k=new ArrayList<Object>();
									list_k.add(k);
									}
									break;
								case 2 :
									// XQueryParser.g:1489:31: k+= LAST
									{
									k=(CommonToken)match(input,LAST,FOLLOW_LAST_in_p_InsertExprTargetChoice13289); if (state.failed) return retval;
									if ( state.backtracking==0 ) {
									k_tree = (XQDTCommonTree)adaptor.create(k);
									adaptor.addChild(root_0, k_tree);
									}

									if (list_k==null) list_k=new ArrayList<Object>();
									list_k.add(k);
									}
									break;

							}

							}
							break;

					}

					k=(CommonToken)match(input,INTO,FOLLOW_INTO_in_p_InsertExprTargetChoice13296); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					k_tree = (XQDTCommonTree)adaptor.create(k);
					adaptor.addChild(root_0, k_tree);
					}

					if (list_k==null) list_k=new ArrayList<Object>();
					list_k.add(k);
					}

					if ( state.backtracking==0 ) {ak(list_k);}
					}
					break;
				case 2 :
					// XQueryParser.g:1490:11: ka= AFTER
					{
					root_0 = (XQDTCommonTree)adaptor.nil();


					ka=(CommonToken)match(input,AFTER,FOLLOW_AFTER_in_p_InsertExprTargetChoice13313); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					ka_tree = (XQDTCommonTree)adaptor.create(ka);
					adaptor.addChild(root_0, ka_tree);
					}

					if ( state.backtracking==0 ) {ak(ka);}
					}
					break;
				case 3 :
					// XQueryParser.g:1491:11: kb= BEFORE
					{
					root_0 = (XQDTCommonTree)adaptor.nil();


					kb=(CommonToken)match(input,BEFORE,FOLLOW_BEFORE_in_p_InsertExprTargetChoice13329); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					kb_tree = (XQDTCommonTree)adaptor.create(kb);
					adaptor.addChild(root_0, kb_tree);
					}

					if ( state.backtracking==0 ) {ak(kb);}
					}
					break;

			}
			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (XQDTCommonTree)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
			retval.tree = (XQDTCommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "p_InsertExprTargetChoice"


	public static class p_InsertExpr_return extends ParserRuleReturnScope {
		XQDTCommonTree tree;
		@Override
		public XQDTCommonTree getTree() { return tree; }
	};


	// $ANTLR start "p_InsertExpr"
	// XQueryParser.g:1495:1: p_InsertExpr :k+= INSERT (k+= NODE |k+= NODES ) p_SourceExpr p_InsertExprTargetChoice p_TargetExpr ;
	public final XQueryParser.p_InsertExpr_return p_InsertExpr() throws RecognitionException {
		XQueryParser.p_InsertExpr_return retval = new XQueryParser.p_InsertExpr_return();
		retval.start = input.LT(1);

		XQDTCommonTree root_0 = null;

		CommonToken k=null;
		List<Object> list_k=null;
		ParserRuleReturnScope p_SourceExpr606 =null;
		ParserRuleReturnScope p_InsertExprTargetChoice607 =null;
		ParserRuleReturnScope p_TargetExpr608 =null;

		XQDTCommonTree k_tree=null;

		try {
			// XQueryParser.g:1496:9: (k+= INSERT (k+= NODE |k+= NODES ) p_SourceExpr p_InsertExprTargetChoice p_TargetExpr )
			// XQueryParser.g:1496:11: k+= INSERT (k+= NODE |k+= NODES ) p_SourceExpr p_InsertExprTargetChoice p_TargetExpr
			{
			root_0 = (XQDTCommonTree)adaptor.nil();


			k=(CommonToken)match(input,INSERT,FOLLOW_INSERT_in_p_InsertExpr13359); if (state.failed) return retval;
			if ( state.backtracking==0 ) {
			k_tree = (XQDTCommonTree)adaptor.create(k);
			adaptor.addChild(root_0, k_tree);
			}

			if (list_k==null) list_k=new ArrayList<Object>();
			list_k.add(k);
			// XQueryParser.g:1496:21: (k+= NODE |k+= NODES )
			int alt189=2;
			int LA189_0 = input.LA(1);
			if ( (LA189_0==NODE) ) {
				alt189=1;
			}
			else if ( (LA189_0==NODES) ) {
				alt189=2;
			}

			else {
				if (state.backtracking>0) {state.failed=true; return retval;}
				NoViableAltException nvae =
					new NoViableAltException("", 189, 0, input);
				throw nvae;
			}

			switch (alt189) {
				case 1 :
					// XQueryParser.g:1496:22: k+= NODE
					{
					k=(CommonToken)match(input,NODE,FOLLOW_NODE_in_p_InsertExpr13364); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					k_tree = (XQDTCommonTree)adaptor.create(k);
					adaptor.addChild(root_0, k_tree);
					}

					if (list_k==null) list_k=new ArrayList<Object>();
					list_k.add(k);
					}
					break;
				case 2 :
					// XQueryParser.g:1496:32: k+= NODES
					{
					k=(CommonToken)match(input,NODES,FOLLOW_NODES_in_p_InsertExpr13370); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					k_tree = (XQDTCommonTree)adaptor.create(k);
					adaptor.addChild(root_0, k_tree);
					}

					if (list_k==null) list_k=new ArrayList<Object>();
					list_k.add(k);
					}
					break;

			}

			pushFollow(FOLLOW_p_SourceExpr_in_p_InsertExpr13373);
			p_SourceExpr606=p_SourceExpr();
			state._fsp--;
			if (state.failed) return retval;
			if ( state.backtracking==0 ) adaptor.addChild(root_0, p_SourceExpr606.getTree());

			pushFollow(FOLLOW_p_InsertExprTargetChoice_in_p_InsertExpr13375);
			p_InsertExprTargetChoice607=p_InsertExprTargetChoice();
			state._fsp--;
			if (state.failed) return retval;
			if ( state.backtracking==0 ) adaptor.addChild(root_0, p_InsertExprTargetChoice607.getTree());

			pushFollow(FOLLOW_p_TargetExpr_in_p_InsertExpr13377);
			p_TargetExpr608=p_TargetExpr();
			state._fsp--;
			if (state.failed) return retval;
			if ( state.backtracking==0 ) adaptor.addChild(root_0, p_TargetExpr608.getTree());

			if ( state.backtracking==0 ) {ak(list_k);}
			}

			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (XQDTCommonTree)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
			retval.tree = (XQDTCommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "p_InsertExpr"


	public static class p_DeleteExpr_return extends ParserRuleReturnScope {
		XQDTCommonTree tree;
		@Override
		public XQDTCommonTree getTree() { return tree; }
	};


	// $ANTLR start "p_DeleteExpr"
	// XQueryParser.g:1500:1: p_DeleteExpr :k+= DELETE (k+= NODE |k+= NODES ) p_TargetExpr ;
	public final XQueryParser.p_DeleteExpr_return p_DeleteExpr() throws RecognitionException {
		XQueryParser.p_DeleteExpr_return retval = new XQueryParser.p_DeleteExpr_return();
		retval.start = input.LT(1);

		XQDTCommonTree root_0 = null;

		CommonToken k=null;
		List<Object> list_k=null;
		ParserRuleReturnScope p_TargetExpr609 =null;

		XQDTCommonTree k_tree=null;

		try {
			// XQueryParser.g:1501:9: (k+= DELETE (k+= NODE |k+= NODES ) p_TargetExpr )
			// XQueryParser.g:1501:11: k+= DELETE (k+= NODE |k+= NODES ) p_TargetExpr
			{
			root_0 = (XQDTCommonTree)adaptor.nil();


			k=(CommonToken)match(input,DELETE,FOLLOW_DELETE_in_p_DeleteExpr13407); if (state.failed) return retval;
			if ( state.backtracking==0 ) {
			k_tree = (XQDTCommonTree)adaptor.create(k);
			adaptor.addChild(root_0, k_tree);
			}

			if (list_k==null) list_k=new ArrayList<Object>();
			list_k.add(k);
			// XQueryParser.g:1501:21: (k+= NODE |k+= NODES )
			int alt190=2;
			int LA190_0 = input.LA(1);
			if ( (LA190_0==NODE) ) {
				alt190=1;
			}
			else if ( (LA190_0==NODES) ) {
				alt190=2;
			}

			else {
				if (state.backtracking>0) {state.failed=true; return retval;}
				NoViableAltException nvae =
					new NoViableAltException("", 190, 0, input);
				throw nvae;
			}

			switch (alt190) {
				case 1 :
					// XQueryParser.g:1501:22: k+= NODE
					{
					k=(CommonToken)match(input,NODE,FOLLOW_NODE_in_p_DeleteExpr13412); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					k_tree = (XQDTCommonTree)adaptor.create(k);
					adaptor.addChild(root_0, k_tree);
					}

					if (list_k==null) list_k=new ArrayList<Object>();
					list_k.add(k);
					}
					break;
				case 2 :
					// XQueryParser.g:1501:32: k+= NODES
					{
					k=(CommonToken)match(input,NODES,FOLLOW_NODES_in_p_DeleteExpr13418); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					k_tree = (XQDTCommonTree)adaptor.create(k);
					adaptor.addChild(root_0, k_tree);
					}

					if (list_k==null) list_k=new ArrayList<Object>();
					list_k.add(k);
					}
					break;

			}

			pushFollow(FOLLOW_p_TargetExpr_in_p_DeleteExpr13421);
			p_TargetExpr609=p_TargetExpr();
			state._fsp--;
			if (state.failed) return retval;
			if ( state.backtracking==0 ) adaptor.addChild(root_0, p_TargetExpr609.getTree());

			if ( state.backtracking==0 ) {ak(list_k);}
			}

			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (XQDTCommonTree)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
			retval.tree = (XQDTCommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "p_DeleteExpr"


	public static class p_ReplaceExpr_return extends ParserRuleReturnScope {
		XQDTCommonTree tree;
		@Override
		public XQDTCommonTree getTree() { return tree; }
	};


	// $ANTLR start "p_ReplaceExpr"
	// XQueryParser.g:1505:1: p_ReplaceExpr :k+= REPLACE (k+= VALUE k+= OF )? k+= NODE p_ExprSingle[true] k+= WITH p_ExprSingle[true] ;
	public final XQueryParser.p_ReplaceExpr_return p_ReplaceExpr() throws RecognitionException {
		XQueryParser.p_ReplaceExpr_return retval = new XQueryParser.p_ReplaceExpr_return();
		retval.start = input.LT(1);

		XQDTCommonTree root_0 = null;

		CommonToken k=null;
		List<Object> list_k=null;
		ParserRuleReturnScope p_ExprSingle610 =null;
		ParserRuleReturnScope p_ExprSingle611 =null;

		XQDTCommonTree k_tree=null;

		try {
			// XQueryParser.g:1506:9: (k+= REPLACE (k+= VALUE k+= OF )? k+= NODE p_ExprSingle[true] k+= WITH p_ExprSingle[true] )
			// XQueryParser.g:1506:11: k+= REPLACE (k+= VALUE k+= OF )? k+= NODE p_ExprSingle[true] k+= WITH p_ExprSingle[true]
			{
			root_0 = (XQDTCommonTree)adaptor.nil();


			k=(CommonToken)match(input,REPLACE,FOLLOW_REPLACE_in_p_ReplaceExpr13451); if (state.failed) return retval;
			if ( state.backtracking==0 ) {
			k_tree = (XQDTCommonTree)adaptor.create(k);
			adaptor.addChild(root_0, k_tree);
			}

			if (list_k==null) list_k=new ArrayList<Object>();
			list_k.add(k);
			// XQueryParser.g:1506:22: (k+= VALUE k+= OF )?
			int alt191=2;
			int LA191_0 = input.LA(1);
			if ( (LA191_0==VALUE) ) {
				alt191=1;
			}
			switch (alt191) {
				case 1 :
					// XQueryParser.g:1506:23: k+= VALUE k+= OF
					{
					k=(CommonToken)match(input,VALUE,FOLLOW_VALUE_in_p_ReplaceExpr13456); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					k_tree = (XQDTCommonTree)adaptor.create(k);
					adaptor.addChild(root_0, k_tree);
					}

					if (list_k==null) list_k=new ArrayList<Object>();
					list_k.add(k);
					k=(CommonToken)match(input,OF,FOLLOW_OF_in_p_ReplaceExpr13460); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					k_tree = (XQDTCommonTree)adaptor.create(k);
					adaptor.addChild(root_0, k_tree);
					}

					if (list_k==null) list_k=new ArrayList<Object>();
					list_k.add(k);
					}
					break;

			}

			k=(CommonToken)match(input,NODE,FOLLOW_NODE_in_p_ReplaceExpr13466); if (state.failed) return retval;
			if ( state.backtracking==0 ) {
			k_tree = (XQDTCommonTree)adaptor.create(k);
			adaptor.addChild(root_0, k_tree);
			}

			if (list_k==null) list_k=new ArrayList<Object>();
			list_k.add(k);
			pushFollow(FOLLOW_p_ExprSingle_in_p_ReplaceExpr13468);
			p_ExprSingle610=p_ExprSingle(true);
			state._fsp--;
			if (state.failed) return retval;
			if ( state.backtracking==0 ) adaptor.addChild(root_0, p_ExprSingle610.getTree());

			k=(CommonToken)match(input,WITH,FOLLOW_WITH_in_p_ReplaceExpr13473); if (state.failed) return retval;
			if ( state.backtracking==0 ) {
			k_tree = (XQDTCommonTree)adaptor.create(k);
			adaptor.addChild(root_0, k_tree);
			}

			if (list_k==null) list_k=new ArrayList<Object>();
			list_k.add(k);
			pushFollow(FOLLOW_p_ExprSingle_in_p_ReplaceExpr13475);
			p_ExprSingle611=p_ExprSingle(true);
			state._fsp--;
			if (state.failed) return retval;
			if ( state.backtracking==0 ) adaptor.addChild(root_0, p_ExprSingle611.getTree());

			if ( state.backtracking==0 ) {ak(list_k);}
			}

			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (XQDTCommonTree)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
			retval.tree = (XQDTCommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "p_ReplaceExpr"


	public static class p_RenameExpr_return extends ParserRuleReturnScope {
		XQDTCommonTree tree;
		@Override
		public XQDTCommonTree getTree() { return tree; }
	};


	// $ANTLR start "p_RenameExpr"
	// XQueryParser.g:1510:1: p_RenameExpr :k+= RENAME k+= NODE p_TargetExpr AS p_NewNameExpr ;
	public final XQueryParser.p_RenameExpr_return p_RenameExpr() throws RecognitionException {
		XQueryParser.p_RenameExpr_return retval = new XQueryParser.p_RenameExpr_return();
		retval.start = input.LT(1);

		XQDTCommonTree root_0 = null;

		CommonToken AS613=null;
		CommonToken k=null;
		List<Object> list_k=null;
		ParserRuleReturnScope p_TargetExpr612 =null;
		ParserRuleReturnScope p_NewNameExpr614 =null;

		XQDTCommonTree AS613_tree=null;
		XQDTCommonTree k_tree=null;

		try {
			// XQueryParser.g:1511:9: (k+= RENAME k+= NODE p_TargetExpr AS p_NewNameExpr )
			// XQueryParser.g:1511:11: k+= RENAME k+= NODE p_TargetExpr AS p_NewNameExpr
			{
			root_0 = (XQDTCommonTree)adaptor.nil();


			k=(CommonToken)match(input,RENAME,FOLLOW_RENAME_in_p_RenameExpr13506); if (state.failed) return retval;
			if ( state.backtracking==0 ) {
			k_tree = (XQDTCommonTree)adaptor.create(k);
			adaptor.addChild(root_0, k_tree);
			}

			if (list_k==null) list_k=new ArrayList<Object>();
			list_k.add(k);
			k=(CommonToken)match(input,NODE,FOLLOW_NODE_in_p_RenameExpr13510); if (state.failed) return retval;
			if ( state.backtracking==0 ) {
			k_tree = (XQDTCommonTree)adaptor.create(k);
			adaptor.addChild(root_0, k_tree);
			}

			if (list_k==null) list_k=new ArrayList<Object>();
			list_k.add(k);
			pushFollow(FOLLOW_p_TargetExpr_in_p_RenameExpr13512);
			p_TargetExpr612=p_TargetExpr();
			state._fsp--;
			if (state.failed) return retval;
			if ( state.backtracking==0 ) adaptor.addChild(root_0, p_TargetExpr612.getTree());

			AS613=(CommonToken)match(input,AS,FOLLOW_AS_in_p_RenameExpr13514); if (state.failed) return retval;
			if ( state.backtracking==0 ) {
			AS613_tree = (XQDTCommonTree)adaptor.create(AS613);
			adaptor.addChild(root_0, AS613_tree);
			}

			pushFollow(FOLLOW_p_NewNameExpr_in_p_RenameExpr13516);
			p_NewNameExpr614=p_NewNameExpr();
			state._fsp--;
			if (state.failed) return retval;
			if ( state.backtracking==0 ) adaptor.addChild(root_0, p_NewNameExpr614.getTree());

			if ( state.backtracking==0 ) {ak(list_k);}
			}

			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (XQDTCommonTree)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
			retval.tree = (XQDTCommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "p_RenameExpr"


	public static class p_SourceExpr_return extends ParserRuleReturnScope {
		XQDTCommonTree tree;
		@Override
		public XQDTCommonTree getTree() { return tree; }
	};


	// $ANTLR start "p_SourceExpr"
	// XQueryParser.g:1515:1: p_SourceExpr : p_ExprSingle[true] ;
	public final XQueryParser.p_SourceExpr_return p_SourceExpr() throws RecognitionException {
		XQueryParser.p_SourceExpr_return retval = new XQueryParser.p_SourceExpr_return();
		retval.start = input.LT(1);

		XQDTCommonTree root_0 = null;

		ParserRuleReturnScope p_ExprSingle615 =null;


		try {
			// XQueryParser.g:1516:9: ( p_ExprSingle[true] )
			// XQueryParser.g:1516:11: p_ExprSingle[true]
			{
			root_0 = (XQDTCommonTree)adaptor.nil();


			pushFollow(FOLLOW_p_ExprSingle_in_p_SourceExpr13544);
			p_ExprSingle615=p_ExprSingle(true);
			state._fsp--;
			if (state.failed) return retval;
			if ( state.backtracking==0 ) adaptor.addChild(root_0, p_ExprSingle615.getTree());

			}

			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (XQDTCommonTree)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
			retval.tree = (XQDTCommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "p_SourceExpr"


	public static class p_TargetExpr_return extends ParserRuleReturnScope {
		XQDTCommonTree tree;
		@Override
		public XQDTCommonTree getTree() { return tree; }
	};


	// $ANTLR start "p_TargetExpr"
	// XQueryParser.g:1520:1: p_TargetExpr : p_ExprSingle[true] ;
	public final XQueryParser.p_TargetExpr_return p_TargetExpr() throws RecognitionException {
		XQueryParser.p_TargetExpr_return retval = new XQueryParser.p_TargetExpr_return();
		retval.start = input.LT(1);

		XQDTCommonTree root_0 = null;

		ParserRuleReturnScope p_ExprSingle616 =null;


		try {
			// XQueryParser.g:1521:9: ( p_ExprSingle[true] )
			// XQueryParser.g:1521:11: p_ExprSingle[true]
			{
			root_0 = (XQDTCommonTree)adaptor.nil();


			pushFollow(FOLLOW_p_ExprSingle_in_p_TargetExpr13571);
			p_ExprSingle616=p_ExprSingle(true);
			state._fsp--;
			if (state.failed) return retval;
			if ( state.backtracking==0 ) adaptor.addChild(root_0, p_ExprSingle616.getTree());

			}

			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (XQDTCommonTree)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
			retval.tree = (XQDTCommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "p_TargetExpr"


	public static class p_NewNameExpr_return extends ParserRuleReturnScope {
		XQDTCommonTree tree;
		@Override
		public XQDTCommonTree getTree() { return tree; }
	};


	// $ANTLR start "p_NewNameExpr"
	// XQueryParser.g:1525:1: p_NewNameExpr : p_ExprSingle[true] ;
	public final XQueryParser.p_NewNameExpr_return p_NewNameExpr() throws RecognitionException {
		XQueryParser.p_NewNameExpr_return retval = new XQueryParser.p_NewNameExpr_return();
		retval.start = input.LT(1);

		XQDTCommonTree root_0 = null;

		ParserRuleReturnScope p_ExprSingle617 =null;


		try {
			// XQueryParser.g:1526:9: ( p_ExprSingle[true] )
			// XQueryParser.g:1526:11: p_ExprSingle[true]
			{
			root_0 = (XQDTCommonTree)adaptor.nil();


			pushFollow(FOLLOW_p_ExprSingle_in_p_NewNameExpr13598);
			p_ExprSingle617=p_ExprSingle(true);
			state._fsp--;
			if (state.failed) return retval;
			if ( state.backtracking==0 ) adaptor.addChild(root_0, p_ExprSingle617.getTree());

			}

			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (XQDTCommonTree)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
			retval.tree = (XQDTCommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "p_NewNameExpr"


	public static class p_TransformExpr_return extends ParserRuleReturnScope {
		XQDTCommonTree tree;
		@Override
		public XQDTCommonTree getTree() { return tree; }
	};


	// $ANTLR start "p_TransformExpr"
	// XQueryParser.g:1530:1: p_TransformExpr :k+= COPY DOLLAR p_VarName BIND p_ExprSingle[true] ( COMMA DOLLAR p_VarName BIND p_ExprSingle[true] )* k+= MODIFY p_ExprSingle[true] k+= RETURN p_ExprSingle[true] ;
	public final XQueryParser.p_TransformExpr_return p_TransformExpr() throws RecognitionException {
		XQueryParser.p_TransformExpr_return retval = new XQueryParser.p_TransformExpr_return();
		retval.start = input.LT(1);

		XQDTCommonTree root_0 = null;

		CommonToken DOLLAR618=null;
		CommonToken BIND620=null;
		CommonToken COMMA622=null;
		CommonToken DOLLAR623=null;
		CommonToken BIND625=null;
		CommonToken k=null;
		List<Object> list_k=null;
		ParserRuleReturnScope p_VarName619 =null;
		ParserRuleReturnScope p_ExprSingle621 =null;
		ParserRuleReturnScope p_VarName624 =null;
		ParserRuleReturnScope p_ExprSingle626 =null;
		ParserRuleReturnScope p_ExprSingle627 =null;
		ParserRuleReturnScope p_ExprSingle628 =null;

		XQDTCommonTree DOLLAR618_tree=null;
		XQDTCommonTree BIND620_tree=null;
		XQDTCommonTree COMMA622_tree=null;
		XQDTCommonTree DOLLAR623_tree=null;
		XQDTCommonTree BIND625_tree=null;
		XQDTCommonTree k_tree=null;

		try {
			// XQueryParser.g:1531:9: (k+= COPY DOLLAR p_VarName BIND p_ExprSingle[true] ( COMMA DOLLAR p_VarName BIND p_ExprSingle[true] )* k+= MODIFY p_ExprSingle[true] k+= RETURN p_ExprSingle[true] )
			// XQueryParser.g:1531:11: k+= COPY DOLLAR p_VarName BIND p_ExprSingle[true] ( COMMA DOLLAR p_VarName BIND p_ExprSingle[true] )* k+= MODIFY p_ExprSingle[true] k+= RETURN p_ExprSingle[true]
			{
			root_0 = (XQDTCommonTree)adaptor.nil();


			k=(CommonToken)match(input,COPY,FOLLOW_COPY_in_p_TransformExpr13627); if (state.failed) return retval;
			if ( state.backtracking==0 ) {
			k_tree = (XQDTCommonTree)adaptor.create(k);
			adaptor.addChild(root_0, k_tree);
			}

			if (list_k==null) list_k=new ArrayList<Object>();
			list_k.add(k);
			DOLLAR618=(CommonToken)match(input,DOLLAR,FOLLOW_DOLLAR_in_p_TransformExpr13629); if (state.failed) return retval;
			if ( state.backtracking==0 ) {
			DOLLAR618_tree = (XQDTCommonTree)adaptor.create(DOLLAR618);
			adaptor.addChild(root_0, DOLLAR618_tree);
			}

			pushFollow(FOLLOW_p_VarName_in_p_TransformExpr13631);
			p_VarName619=p_VarName();
			state._fsp--;
			if (state.failed) return retval;
			if ( state.backtracking==0 ) adaptor.addChild(root_0, p_VarName619.getTree());

			BIND620=(CommonToken)match(input,BIND,FOLLOW_BIND_in_p_TransformExpr13633); if (state.failed) return retval;
			if ( state.backtracking==0 ) {
			BIND620_tree = (XQDTCommonTree)adaptor.create(BIND620);
			adaptor.addChild(root_0, BIND620_tree);
			}

			pushFollow(FOLLOW_p_ExprSingle_in_p_TransformExpr13635);
			p_ExprSingle621=p_ExprSingle(true);
			state._fsp--;
			if (state.failed) return retval;
			if ( state.backtracking==0 ) adaptor.addChild(root_0, p_ExprSingle621.getTree());

			// XQueryParser.g:1531:60: ( COMMA DOLLAR p_VarName BIND p_ExprSingle[true] )*
			loop192:
			while (true) {
				int alt192=2;
				int LA192_0 = input.LA(1);
				if ( (LA192_0==COMMA) ) {
					alt192=1;
				}

				switch (alt192) {
				case 1 :
					// XQueryParser.g:1531:61: COMMA DOLLAR p_VarName BIND p_ExprSingle[true]
					{
					COMMA622=(CommonToken)match(input,COMMA,FOLLOW_COMMA_in_p_TransformExpr13639); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					COMMA622_tree = (XQDTCommonTree)adaptor.create(COMMA622);
					adaptor.addChild(root_0, COMMA622_tree);
					}

					DOLLAR623=(CommonToken)match(input,DOLLAR,FOLLOW_DOLLAR_in_p_TransformExpr13641); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					DOLLAR623_tree = (XQDTCommonTree)adaptor.create(DOLLAR623);
					adaptor.addChild(root_0, DOLLAR623_tree);
					}

					pushFollow(FOLLOW_p_VarName_in_p_TransformExpr13643);
					p_VarName624=p_VarName();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, p_VarName624.getTree());

					BIND625=(CommonToken)match(input,BIND,FOLLOW_BIND_in_p_TransformExpr13645); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					BIND625_tree = (XQDTCommonTree)adaptor.create(BIND625);
					adaptor.addChild(root_0, BIND625_tree);
					}

					pushFollow(FOLLOW_p_ExprSingle_in_p_TransformExpr13647);
					p_ExprSingle626=p_ExprSingle(true);
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, p_ExprSingle626.getTree());

					}
					break;

				default :
					break loop192;
				}
			}

			k=(CommonToken)match(input,MODIFY,FOLLOW_MODIFY_in_p_TransformExpr13654); if (state.failed) return retval;
			if ( state.backtracking==0 ) {
			k_tree = (XQDTCommonTree)adaptor.create(k);
			adaptor.addChild(root_0, k_tree);
			}

			if (list_k==null) list_k=new ArrayList<Object>();
			list_k.add(k);
			pushFollow(FOLLOW_p_ExprSingle_in_p_TransformExpr13656);
			p_ExprSingle627=p_ExprSingle(true);
			state._fsp--;
			if (state.failed) return retval;
			if ( state.backtracking==0 ) adaptor.addChild(root_0, p_ExprSingle627.getTree());

			k=(CommonToken)match(input,RETURN,FOLLOW_RETURN_in_p_TransformExpr13661); if (state.failed) return retval;
			if ( state.backtracking==0 ) {
			k_tree = (XQDTCommonTree)adaptor.create(k);
			adaptor.addChild(root_0, k_tree);
			}

			if (list_k==null) list_k=new ArrayList<Object>();
			list_k.add(k);
			pushFollow(FOLLOW_p_ExprSingle_in_p_TransformExpr13663);
			p_ExprSingle628=p_ExprSingle(true);
			state._fsp--;
			if (state.failed) return retval;
			if ( state.backtracking==0 ) adaptor.addChild(root_0, p_ExprSingle628.getTree());

			if ( state.backtracking==0 ) {ak(list_k);}
			}

			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (XQDTCommonTree)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
			retval.tree = (XQDTCommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "p_TransformExpr"


	public static class pm_FTOptionDecl_return extends ParserRuleReturnScope {
		XQDTCommonTree tree;
		@Override
		public XQDTCommonTree getTree() { return tree; }
	};


	// $ANTLR start "pm_FTOptionDecl"
	// XQueryParser.g:1541:1: pm_FTOptionDecl :k+= DECLARE k+= FT_OPTION p_FTMatchOptions SEMICOLON ;
	public final XQueryParser.pm_FTOptionDecl_return pm_FTOptionDecl() throws RecognitionException {
		XQueryParser.pm_FTOptionDecl_return retval = new XQueryParser.pm_FTOptionDecl_return();
		retval.start = input.LT(1);

		XQDTCommonTree root_0 = null;

		CommonToken SEMICOLON630=null;
		CommonToken k=null;
		List<Object> list_k=null;
		ParserRuleReturnScope p_FTMatchOptions629 =null;

		XQDTCommonTree SEMICOLON630_tree=null;
		XQDTCommonTree k_tree=null;

		try {
			// XQueryParser.g:1542:9: (k+= DECLARE k+= FT_OPTION p_FTMatchOptions SEMICOLON )
			// XQueryParser.g:1542:11: k+= DECLARE k+= FT_OPTION p_FTMatchOptions SEMICOLON
			{
			root_0 = (XQDTCommonTree)adaptor.nil();


			k=(CommonToken)match(input,DECLARE,FOLLOW_DECLARE_in_pm_FTOptionDecl13701); if (state.failed) return retval;
			if ( state.backtracking==0 ) {
			k_tree = (XQDTCommonTree)adaptor.create(k);
			adaptor.addChild(root_0, k_tree);
			}

			if (list_k==null) list_k=new ArrayList<Object>();
			list_k.add(k);
			k=(CommonToken)match(input,FT_OPTION,FOLLOW_FT_OPTION_in_pm_FTOptionDecl13705); if (state.failed) return retval;
			if ( state.backtracking==0 ) {
			k_tree = (XQDTCommonTree)adaptor.create(k);
			adaptor.addChild(root_0, k_tree);
			}

			if (list_k==null) list_k=new ArrayList<Object>();
			list_k.add(k);
			pushFollow(FOLLOW_p_FTMatchOptions_in_pm_FTOptionDecl13707);
			p_FTMatchOptions629=p_FTMatchOptions();
			state._fsp--;
			if (state.failed) return retval;
			if ( state.backtracking==0 ) adaptor.addChild(root_0, p_FTMatchOptions629.getTree());

			SEMICOLON630=(CommonToken)match(input,SEMICOLON,FOLLOW_SEMICOLON_in_pm_FTOptionDecl13709); if (state.failed) return retval;
			if ( state.backtracking==0 ) {
			SEMICOLON630_tree = (XQDTCommonTree)adaptor.create(SEMICOLON630);
			adaptor.addChild(root_0, SEMICOLON630_tree);
			}

			if ( state.backtracking==0 ) {ak(list_k);}
			}

			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (XQDTCommonTree)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
			retval.tree = (XQDTCommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "pm_FTOptionDecl"


	public static class p_FTScoreVar_return extends ParserRuleReturnScope {
		XQDTCommonTree tree;
		@Override
		public XQDTCommonTree getTree() { return tree; }
	};


	// $ANTLR start "p_FTScoreVar"
	// XQueryParser.g:1546:1: p_FTScoreVar : ks= SCORE DOLLAR p_VarName ;
	public final XQueryParser.p_FTScoreVar_return p_FTScoreVar() throws RecognitionException {
		XQueryParser.p_FTScoreVar_return retval = new XQueryParser.p_FTScoreVar_return();
		retval.start = input.LT(1);

		XQDTCommonTree root_0 = null;

		CommonToken ks=null;
		CommonToken DOLLAR631=null;
		ParserRuleReturnScope p_VarName632 =null;

		XQDTCommonTree ks_tree=null;
		XQDTCommonTree DOLLAR631_tree=null;

		try {
			// XQueryParser.g:1547:9: (ks= SCORE DOLLAR p_VarName )
			// XQueryParser.g:1547:11: ks= SCORE DOLLAR p_VarName
			{
			root_0 = (XQDTCommonTree)adaptor.nil();


			ks=(CommonToken)match(input,SCORE,FOLLOW_SCORE_in_p_FTScoreVar13739); if (state.failed) return retval;
			if ( state.backtracking==0 ) {
			ks_tree = (XQDTCommonTree)adaptor.create(ks);
			adaptor.addChild(root_0, ks_tree);
			}

			if ( state.backtracking==0 ) {ak(ks);}
			DOLLAR631=(CommonToken)match(input,DOLLAR,FOLLOW_DOLLAR_in_p_FTScoreVar13743); if (state.failed) return retval;
			if ( state.backtracking==0 ) {
			DOLLAR631_tree = (XQDTCommonTree)adaptor.create(DOLLAR631);
			adaptor.addChild(root_0, DOLLAR631_tree);
			}

			pushFollow(FOLLOW_p_VarName_in_p_FTScoreVar13745);
			p_VarName632=p_VarName();
			state._fsp--;
			if (state.failed) return retval;
			if ( state.backtracking==0 ) adaptor.addChild(root_0, p_VarName632.getTree());

			}

			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (XQDTCommonTree)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
			retval.tree = (XQDTCommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "p_FTScoreVar"


	public static class p_FTContainsExpr_return extends ParserRuleReturnScope {
		XQDTCommonTree tree;
		@Override
		public XQDTCommonTree getTree() { return tree; }
	};


	// $ANTLR start "p_FTContainsExpr"
	// XQueryParser.g:1551:1: p_FTContainsExpr : p_StringConcatExpr (k+= CONTAINS k+= TEXT p_FTSelection ( p_FTIgnoreOption )? )? ;
	public final XQueryParser.p_FTContainsExpr_return p_FTContainsExpr() throws RecognitionException {
		XQueryParser.p_FTContainsExpr_return retval = new XQueryParser.p_FTContainsExpr_return();
		retval.start = input.LT(1);

		XQDTCommonTree root_0 = null;

		CommonToken k=null;
		List<Object> list_k=null;
		ParserRuleReturnScope p_StringConcatExpr633 =null;
		ParserRuleReturnScope p_FTSelection634 =null;
		ParserRuleReturnScope p_FTIgnoreOption635 =null;

		XQDTCommonTree k_tree=null;

		try {
			// XQueryParser.g:1552:9: ( p_StringConcatExpr (k+= CONTAINS k+= TEXT p_FTSelection ( p_FTIgnoreOption )? )? )
			// XQueryParser.g:1552:11: p_StringConcatExpr (k+= CONTAINS k+= TEXT p_FTSelection ( p_FTIgnoreOption )? )?
			{
			root_0 = (XQDTCommonTree)adaptor.nil();


			pushFollow(FOLLOW_p_StringConcatExpr_in_p_FTContainsExpr13771);
			p_StringConcatExpr633=p_StringConcatExpr();
			state._fsp--;
			if (state.failed) return retval;
			if ( state.backtracking==0 ) adaptor.addChild(root_0, p_StringConcatExpr633.getTree());

			// XQueryParser.g:1552:30: (k+= CONTAINS k+= TEXT p_FTSelection ( p_FTIgnoreOption )? )?
			int alt194=2;
			int LA194_0 = input.LA(1);
			if ( (LA194_0==CONTAINS) ) {
				alt194=1;
			}
			switch (alt194) {
				case 1 :
					// XQueryParser.g:1552:32: k+= CONTAINS k+= TEXT p_FTSelection ( p_FTIgnoreOption )?
					{
					k=(CommonToken)match(input,CONTAINS,FOLLOW_CONTAINS_in_p_FTContainsExpr13777); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					k_tree = (XQDTCommonTree)adaptor.create(k);
					adaptor.addChild(root_0, k_tree);
					}

					if (list_k==null) list_k=new ArrayList<Object>();
					list_k.add(k);
					k=(CommonToken)match(input,TEXT,FOLLOW_TEXT_in_p_FTContainsExpr13781); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					k_tree = (XQDTCommonTree)adaptor.create(k);
					adaptor.addChild(root_0, k_tree);
					}

					if (list_k==null) list_k=new ArrayList<Object>();
					list_k.add(k);
					if ( state.backtracking==0 ) {ak(list_k);}
					pushFollow(FOLLOW_p_FTSelection_in_p_FTContainsExpr13785);
					p_FTSelection634=p_FTSelection();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, p_FTSelection634.getTree());

					// XQueryParser.g:1552:76: ( p_FTIgnoreOption )?
					int alt193=2;
					int LA193_0 = input.LA(1);
					if ( (LA193_0==WITHOUT) ) {
						alt193=1;
					}
					switch (alt193) {
						case 1 :
							// XQueryParser.g:1552:76: p_FTIgnoreOption
							{
							pushFollow(FOLLOW_p_FTIgnoreOption_in_p_FTContainsExpr13787);
							p_FTIgnoreOption635=p_FTIgnoreOption();
							state._fsp--;
							if (state.failed) return retval;
							if ( state.backtracking==0 ) adaptor.addChild(root_0, p_FTIgnoreOption635.getTree());

							}
							break;

					}

					}
					break;

			}

			}

			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (XQDTCommonTree)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
			retval.tree = (XQDTCommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "p_FTContainsExpr"


	public static class p_FTSelection_return extends ParserRuleReturnScope {
		XQDTCommonTree tree;
		@Override
		public XQDTCommonTree getTree() { return tree; }
	};


	// $ANTLR start "p_FTSelection"
	// XQueryParser.g:1556:1: p_FTSelection : p_FTOr ( p_FTPosFilter )* ;
	public final XQueryParser.p_FTSelection_return p_FTSelection() throws RecognitionException {
		XQueryParser.p_FTSelection_return retval = new XQueryParser.p_FTSelection_return();
		retval.start = input.LT(1);

		XQDTCommonTree root_0 = null;

		ParserRuleReturnScope p_FTOr636 =null;
		ParserRuleReturnScope p_FTPosFilter637 =null;


		try {
			// XQueryParser.g:1557:9: ( p_FTOr ( p_FTPosFilter )* )
			// XQueryParser.g:1557:11: p_FTOr ( p_FTPosFilter )*
			{
			root_0 = (XQDTCommonTree)adaptor.nil();


			pushFollow(FOLLOW_p_FTOr_in_p_FTSelection13817);
			p_FTOr636=p_FTOr();
			state._fsp--;
			if (state.failed) return retval;
			if ( state.backtracking==0 ) adaptor.addChild(root_0, p_FTOr636.getTree());

			// XQueryParser.g:1557:18: ( p_FTPosFilter )*
			loop195:
			while (true) {
				int alt195=2;
				int LA195_0 = input.LA(1);
				if ( (LA195_0==AT||LA195_0==DIFFERENT||LA195_0==DISTANCE||LA195_0==ENTIRE||LA195_0==ORDERED||LA195_0==SAME||LA195_0==WINDOW) ) {
					alt195=1;
				}

				switch (alt195) {
				case 1 :
					// XQueryParser.g:1557:18: p_FTPosFilter
					{
					pushFollow(FOLLOW_p_FTPosFilter_in_p_FTSelection13819);
					p_FTPosFilter637=p_FTPosFilter();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, p_FTPosFilter637.getTree());

					}
					break;

				default :
					break loop195;
				}
			}

			}

			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (XQDTCommonTree)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
			retval.tree = (XQDTCommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "p_FTSelection"


	public static class p_FTWeight_return extends ParserRuleReturnScope {
		XQDTCommonTree tree;
		@Override
		public XQDTCommonTree getTree() { return tree; }
	};


	// $ANTLR start "p_FTWeight"
	// XQueryParser.g:1561:1: p_FTWeight : kw= WEIGHT LBRACKET p_Expr[true,true] RBRACKET ;
	public final XQueryParser.p_FTWeight_return p_FTWeight() throws RecognitionException {
		XQueryParser.p_FTWeight_return retval = new XQueryParser.p_FTWeight_return();
		retval.start = input.LT(1);

		XQDTCommonTree root_0 = null;

		CommonToken kw=null;
		CommonToken LBRACKET638=null;
		CommonToken RBRACKET640=null;
		ParserRuleReturnScope p_Expr639 =null;

		XQDTCommonTree kw_tree=null;
		XQDTCommonTree LBRACKET638_tree=null;
		XQDTCommonTree RBRACKET640_tree=null;

		try {
			// XQueryParser.g:1562:9: (kw= WEIGHT LBRACKET p_Expr[true,true] RBRACKET )
			// XQueryParser.g:1562:11: kw= WEIGHT LBRACKET p_Expr[true,true] RBRACKET
			{
			root_0 = (XQDTCommonTree)adaptor.nil();


			kw=(CommonToken)match(input,WEIGHT,FOLLOW_WEIGHT_in_p_FTWeight13848); if (state.failed) return retval;
			if ( state.backtracking==0 ) {
			kw_tree = (XQDTCommonTree)adaptor.create(kw);
			adaptor.addChild(root_0, kw_tree);
			}

			if ( state.backtracking==0 ) {ak(kw);}
			LBRACKET638=(CommonToken)match(input,LBRACKET,FOLLOW_LBRACKET_in_p_FTWeight13852); if (state.failed) return retval;
			if ( state.backtracking==0 ) {
			LBRACKET638_tree = (XQDTCommonTree)adaptor.create(LBRACKET638);
			adaptor.addChild(root_0, LBRACKET638_tree);
			}

			pushFollow(FOLLOW_p_Expr_in_p_FTWeight13854);
			p_Expr639=p_Expr(true, true);
			state._fsp--;
			if (state.failed) return retval;
			if ( state.backtracking==0 ) adaptor.addChild(root_0, p_Expr639.getTree());

			RBRACKET640=(CommonToken)match(input,RBRACKET,FOLLOW_RBRACKET_in_p_FTWeight13857); if (state.failed) return retval;
			if ( state.backtracking==0 ) {
			RBRACKET640_tree = (XQDTCommonTree)adaptor.create(RBRACKET640);
			adaptor.addChild(root_0, RBRACKET640_tree);
			}

			}

			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (XQDTCommonTree)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
			retval.tree = (XQDTCommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "p_FTWeight"


	public static class p_FTOr_return extends ParserRuleReturnScope {
		XQDTCommonTree tree;
		@Override
		public XQDTCommonTree getTree() { return tree; }
	};


	// $ANTLR start "p_FTOr"
	// XQueryParser.g:1566:1: p_FTOr : p_FTAnd (ko= FTOR p_FTAnd )* ;
	public final XQueryParser.p_FTOr_return p_FTOr() throws RecognitionException {
		XQueryParser.p_FTOr_return retval = new XQueryParser.p_FTOr_return();
		retval.start = input.LT(1);

		XQDTCommonTree root_0 = null;

		CommonToken ko=null;
		ParserRuleReturnScope p_FTAnd641 =null;
		ParserRuleReturnScope p_FTAnd642 =null;

		XQDTCommonTree ko_tree=null;

		try {
			// XQueryParser.g:1567:9: ( p_FTAnd (ko= FTOR p_FTAnd )* )
			// XQueryParser.g:1567:11: p_FTAnd (ko= FTOR p_FTAnd )*
			{
			root_0 = (XQDTCommonTree)adaptor.nil();


			pushFollow(FOLLOW_p_FTAnd_in_p_FTOr13883);
			p_FTAnd641=p_FTAnd();
			state._fsp--;
			if (state.failed) return retval;
			if ( state.backtracking==0 ) adaptor.addChild(root_0, p_FTAnd641.getTree());

			// XQueryParser.g:1567:19: (ko= FTOR p_FTAnd )*
			loop196:
			while (true) {
				int alt196=2;
				int LA196_0 = input.LA(1);
				if ( (LA196_0==FTOR) ) {
					alt196=1;
				}

				switch (alt196) {
				case 1 :
					// XQueryParser.g:1567:21: ko= FTOR p_FTAnd
					{
					ko=(CommonToken)match(input,FTOR,FOLLOW_FTOR_in_p_FTOr13889); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					ko_tree = (XQDTCommonTree)adaptor.create(ko);
					adaptor.addChild(root_0, ko_tree);
					}

					if ( state.backtracking==0 ) {ak(ko);}
					pushFollow(FOLLOW_p_FTAnd_in_p_FTOr13893);
					p_FTAnd642=p_FTAnd();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, p_FTAnd642.getTree());

					}
					break;

				default :
					break loop196;
				}
			}

			}

			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (XQDTCommonTree)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
			retval.tree = (XQDTCommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "p_FTOr"


	public static class p_FTAnd_return extends ParserRuleReturnScope {
		XQDTCommonTree tree;
		@Override
		public XQDTCommonTree getTree() { return tree; }
	};


	// $ANTLR start "p_FTAnd"
	// XQueryParser.g:1571:1: p_FTAnd : p_FTMildNot (ka= FTAND p_FTMildNot )* ;
	public final XQueryParser.p_FTAnd_return p_FTAnd() throws RecognitionException {
		XQueryParser.p_FTAnd_return retval = new XQueryParser.p_FTAnd_return();
		retval.start = input.LT(1);

		XQDTCommonTree root_0 = null;

		CommonToken ka=null;
		ParserRuleReturnScope p_FTMildNot643 =null;
		ParserRuleReturnScope p_FTMildNot644 =null;

		XQDTCommonTree ka_tree=null;

		try {
			// XQueryParser.g:1572:9: ( p_FTMildNot (ka= FTAND p_FTMildNot )* )
			// XQueryParser.g:1572:11: p_FTMildNot (ka= FTAND p_FTMildNot )*
			{
			root_0 = (XQDTCommonTree)adaptor.nil();


			pushFollow(FOLLOW_p_FTMildNot_in_p_FTAnd13922);
			p_FTMildNot643=p_FTMildNot();
			state._fsp--;
			if (state.failed) return retval;
			if ( state.backtracking==0 ) adaptor.addChild(root_0, p_FTMildNot643.getTree());

			// XQueryParser.g:1572:23: (ka= FTAND p_FTMildNot )*
			loop197:
			while (true) {
				int alt197=2;
				int LA197_0 = input.LA(1);
				if ( (LA197_0==FTAND) ) {
					alt197=1;
				}

				switch (alt197) {
				case 1 :
					// XQueryParser.g:1572:25: ka= FTAND p_FTMildNot
					{
					ka=(CommonToken)match(input,FTAND,FOLLOW_FTAND_in_p_FTAnd13928); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					ka_tree = (XQDTCommonTree)adaptor.create(ka);
					adaptor.addChild(root_0, ka_tree);
					}

					if ( state.backtracking==0 ) {ak(ka);}
					pushFollow(FOLLOW_p_FTMildNot_in_p_FTAnd13932);
					p_FTMildNot644=p_FTMildNot();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, p_FTMildNot644.getTree());

					}
					break;

				default :
					break loop197;
				}
			}

			}

			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (XQDTCommonTree)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
			retval.tree = (XQDTCommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "p_FTAnd"


	public static class p_FTMildNot_return extends ParserRuleReturnScope {
		XQDTCommonTree tree;
		@Override
		public XQDTCommonTree getTree() { return tree; }
	};


	// $ANTLR start "p_FTMildNot"
	// XQueryParser.g:1576:1: p_FTMildNot : p_FTUnaryNot (k+= NOT k+= IN p_FTUnaryNot )* ;
	public final XQueryParser.p_FTMildNot_return p_FTMildNot() throws RecognitionException {
		XQueryParser.p_FTMildNot_return retval = new XQueryParser.p_FTMildNot_return();
		retval.start = input.LT(1);

		XQDTCommonTree root_0 = null;

		CommonToken k=null;
		List<Object> list_k=null;
		ParserRuleReturnScope p_FTUnaryNot645 =null;
		ParserRuleReturnScope p_FTUnaryNot646 =null;

		XQDTCommonTree k_tree=null;

		try {
			// XQueryParser.g:1577:9: ( p_FTUnaryNot (k+= NOT k+= IN p_FTUnaryNot )* )
			// XQueryParser.g:1577:11: p_FTUnaryNot (k+= NOT k+= IN p_FTUnaryNot )*
			{
			root_0 = (XQDTCommonTree)adaptor.nil();


			pushFollow(FOLLOW_p_FTUnaryNot_in_p_FTMildNot13961);
			p_FTUnaryNot645=p_FTUnaryNot();
			state._fsp--;
			if (state.failed) return retval;
			if ( state.backtracking==0 ) adaptor.addChild(root_0, p_FTUnaryNot645.getTree());

			// XQueryParser.g:1577:24: (k+= NOT k+= IN p_FTUnaryNot )*
			loop198:
			while (true) {
				int alt198=2;
				int LA198_0 = input.LA(1);
				if ( (LA198_0==NOT) ) {
					alt198=1;
				}

				switch (alt198) {
				case 1 :
					// XQueryParser.g:1577:26: k+= NOT k+= IN p_FTUnaryNot
					{
					k=(CommonToken)match(input,NOT,FOLLOW_NOT_in_p_FTMildNot13967); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					k_tree = (XQDTCommonTree)adaptor.create(k);
					adaptor.addChild(root_0, k_tree);
					}

					if (list_k==null) list_k=new ArrayList<Object>();
					list_k.add(k);
					k=(CommonToken)match(input,IN,FOLLOW_IN_in_p_FTMildNot13971); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					k_tree = (XQDTCommonTree)adaptor.create(k);
					adaptor.addChild(root_0, k_tree);
					}

					if (list_k==null) list_k=new ArrayList<Object>();
					list_k.add(k);
					if ( state.backtracking==0 ) {ak(list_k);}
					pushFollow(FOLLOW_p_FTUnaryNot_in_p_FTMildNot13975);
					p_FTUnaryNot646=p_FTUnaryNot();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, p_FTUnaryNot646.getTree());

					}
					break;

				default :
					break loop198;
				}
			}

			}

			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (XQDTCommonTree)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
			retval.tree = (XQDTCommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "p_FTMildNot"


	public static class p_FTUnaryNot_return extends ParserRuleReturnScope {
		XQDTCommonTree tree;
		@Override
		public XQDTCommonTree getTree() { return tree; }
	};


	// $ANTLR start "p_FTUnaryNot"
	// XQueryParser.g:1581:1: p_FTUnaryNot : (kn= FTNOT )? p_FTPrimaryWithOptions ;
	public final XQueryParser.p_FTUnaryNot_return p_FTUnaryNot() throws RecognitionException {
		XQueryParser.p_FTUnaryNot_return retval = new XQueryParser.p_FTUnaryNot_return();
		retval.start = input.LT(1);

		XQDTCommonTree root_0 = null;

		CommonToken kn=null;
		ParserRuleReturnScope p_FTPrimaryWithOptions647 =null;

		XQDTCommonTree kn_tree=null;

		try {
			// XQueryParser.g:1582:9: ( (kn= FTNOT )? p_FTPrimaryWithOptions )
			// XQueryParser.g:1582:11: (kn= FTNOT )? p_FTPrimaryWithOptions
			{
			root_0 = (XQDTCommonTree)adaptor.nil();


			// XQueryParser.g:1582:11: (kn= FTNOT )?
			int alt199=2;
			int LA199_0 = input.LA(1);
			if ( (LA199_0==FTNOT) ) {
				alt199=1;
			}
			switch (alt199) {
				case 1 :
					// XQueryParser.g:1582:13: kn= FTNOT
					{
					kn=(CommonToken)match(input,FTNOT,FOLLOW_FTNOT_in_p_FTUnaryNot14008); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					kn_tree = (XQDTCommonTree)adaptor.create(kn);
					adaptor.addChild(root_0, kn_tree);
					}

					if ( state.backtracking==0 ) {ak(kn);}
					}
					break;

			}

			pushFollow(FOLLOW_p_FTPrimaryWithOptions_in_p_FTUnaryNot14015);
			p_FTPrimaryWithOptions647=p_FTPrimaryWithOptions();
			state._fsp--;
			if (state.failed) return retval;
			if ( state.backtracking==0 ) adaptor.addChild(root_0, p_FTPrimaryWithOptions647.getTree());

			}

			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (XQDTCommonTree)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
			retval.tree = (XQDTCommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "p_FTUnaryNot"


	public static class p_FTPrimaryWithOptions_return extends ParserRuleReturnScope {
		XQDTCommonTree tree;
		@Override
		public XQDTCommonTree getTree() { return tree; }
	};


	// $ANTLR start "p_FTPrimaryWithOptions"
	// XQueryParser.g:1586:1: p_FTPrimaryWithOptions : p_FTPrimary ( p_FTMatchOptions )? ( p_FTWeight )? ;
	public final XQueryParser.p_FTPrimaryWithOptions_return p_FTPrimaryWithOptions() throws RecognitionException {
		XQueryParser.p_FTPrimaryWithOptions_return retval = new XQueryParser.p_FTPrimaryWithOptions_return();
		retval.start = input.LT(1);

		XQDTCommonTree root_0 = null;

		ParserRuleReturnScope p_FTPrimary648 =null;
		ParserRuleReturnScope p_FTMatchOptions649 =null;
		ParserRuleReturnScope p_FTWeight650 =null;


		try {
			// XQueryParser.g:1587:9: ( p_FTPrimary ( p_FTMatchOptions )? ( p_FTWeight )? )
			// XQueryParser.g:1587:11: p_FTPrimary ( p_FTMatchOptions )? ( p_FTWeight )?
			{
			root_0 = (XQDTCommonTree)adaptor.nil();


			pushFollow(FOLLOW_p_FTPrimary_in_p_FTPrimaryWithOptions14041);
			p_FTPrimary648=p_FTPrimary();
			state._fsp--;
			if (state.failed) return retval;
			if ( state.backtracking==0 ) adaptor.addChild(root_0, p_FTPrimary648.getTree());

			// XQueryParser.g:1587:23: ( p_FTMatchOptions )?
			int alt200=2;
			int LA200_0 = input.LA(1);
			if ( (LA200_0==USING) ) {
				alt200=1;
			}
			switch (alt200) {
				case 1 :
					// XQueryParser.g:1587:23: p_FTMatchOptions
					{
					pushFollow(FOLLOW_p_FTMatchOptions_in_p_FTPrimaryWithOptions14043);
					p_FTMatchOptions649=p_FTMatchOptions();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, p_FTMatchOptions649.getTree());

					}
					break;

			}

			// XQueryParser.g:1587:41: ( p_FTWeight )?
			int alt201=2;
			int LA201_0 = input.LA(1);
			if ( (LA201_0==WEIGHT) ) {
				alt201=1;
			}
			switch (alt201) {
				case 1 :
					// XQueryParser.g:1587:41: p_FTWeight
					{
					pushFollow(FOLLOW_p_FTWeight_in_p_FTPrimaryWithOptions14046);
					p_FTWeight650=p_FTWeight();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, p_FTWeight650.getTree());

					}
					break;

			}

			}

			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (XQDTCommonTree)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
			retval.tree = (XQDTCommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "p_FTPrimaryWithOptions"


	public static class p_FTPrimary_return extends ParserRuleReturnScope {
		XQDTCommonTree tree;
		@Override
		public XQDTCommonTree getTree() { return tree; }
	};


	// $ANTLR start "p_FTPrimary"
	// XQueryParser.g:1594:1: p_FTPrimary : ( ( p_FTWords ( p_FTTimes )? ) | ( LPAREN p_FTSelection RPAREN ) | p_FTExtensionSelection );
	public final XQueryParser.p_FTPrimary_return p_FTPrimary() throws RecognitionException {
		XQueryParser.p_FTPrimary_return retval = new XQueryParser.p_FTPrimary_return();
		retval.start = input.LT(1);

		XQDTCommonTree root_0 = null;

		CommonToken LPAREN653=null;
		CommonToken RPAREN655=null;
		ParserRuleReturnScope p_FTWords651 =null;
		ParserRuleReturnScope p_FTTimes652 =null;
		ParserRuleReturnScope p_FTSelection654 =null;
		ParserRuleReturnScope p_FTExtensionSelection656 =null;

		XQDTCommonTree LPAREN653_tree=null;
		XQDTCommonTree RPAREN655_tree=null;

		try {
			// XQueryParser.g:1595:9: ( ( p_FTWords ( p_FTTimes )? ) | ( LPAREN p_FTSelection RPAREN ) | p_FTExtensionSelection )
			int alt203=3;
			switch ( input.LA(1) ) {
			case APOS:
			case LBRACKET:
			case QUOT:
				{
				alt203=1;
				}
				break;
			case LPAREN:
				{
				alt203=2;
				}
				break;
			case L_Pragma:
				{
				alt203=3;
				}
				break;
			default:
				if (state.backtracking>0) {state.failed=true; return retval;}
				NoViableAltException nvae =
					new NoViableAltException("", 203, 0, input);
				throw nvae;
			}
			switch (alt203) {
				case 1 :
					// XQueryParser.g:1595:11: ( p_FTWords ( p_FTTimes )? )
					{
					root_0 = (XQDTCommonTree)adaptor.nil();


					// XQueryParser.g:1595:11: ( p_FTWords ( p_FTTimes )? )
					// XQueryParser.g:1595:12: p_FTWords ( p_FTTimes )?
					{
					pushFollow(FOLLOW_p_FTWords_in_p_FTPrimary14077);
					p_FTWords651=p_FTWords();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, p_FTWords651.getTree());

					// XQueryParser.g:1595:22: ( p_FTTimes )?
					int alt202=2;
					int LA202_0 = input.LA(1);
					if ( (LA202_0==OCCURS) ) {
						alt202=1;
					}
					switch (alt202) {
						case 1 :
							// XQueryParser.g:1595:22: p_FTTimes
							{
							pushFollow(FOLLOW_p_FTTimes_in_p_FTPrimary14079);
							p_FTTimes652=p_FTTimes();
							state._fsp--;
							if (state.failed) return retval;
							if ( state.backtracking==0 ) adaptor.addChild(root_0, p_FTTimes652.getTree());

							}
							break;

					}

					}

					}
					break;
				case 2 :
					// XQueryParser.g:1596:11: ( LPAREN p_FTSelection RPAREN )
					{
					root_0 = (XQDTCommonTree)adaptor.nil();


					// XQueryParser.g:1596:11: ( LPAREN p_FTSelection RPAREN )
					// XQueryParser.g:1596:12: LPAREN p_FTSelection RPAREN
					{
					LPAREN653=(CommonToken)match(input,LPAREN,FOLLOW_LPAREN_in_p_FTPrimary14094); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					LPAREN653_tree = (XQDTCommonTree)adaptor.create(LPAREN653);
					adaptor.addChild(root_0, LPAREN653_tree);
					}

					pushFollow(FOLLOW_p_FTSelection_in_p_FTPrimary14096);
					p_FTSelection654=p_FTSelection();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, p_FTSelection654.getTree());

					RPAREN655=(CommonToken)match(input,RPAREN,FOLLOW_RPAREN_in_p_FTPrimary14098); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					RPAREN655_tree = (XQDTCommonTree)adaptor.create(RPAREN655);
					adaptor.addChild(root_0, RPAREN655_tree);
					}

					}

					}
					break;
				case 3 :
					// XQueryParser.g:1597:11: p_FTExtensionSelection
					{
					root_0 = (XQDTCommonTree)adaptor.nil();


					pushFollow(FOLLOW_p_FTExtensionSelection_in_p_FTPrimary14111);
					p_FTExtensionSelection656=p_FTExtensionSelection();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, p_FTExtensionSelection656.getTree());

					}
					break;

			}
			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (XQDTCommonTree)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
			retval.tree = (XQDTCommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "p_FTPrimary"


	public static class p_FTWords_return extends ParserRuleReturnScope {
		XQDTCommonTree tree;
		@Override
		public XQDTCommonTree getTree() { return tree; }
	};


	// $ANTLR start "p_FTWords"
	// XQueryParser.g:1601:1: p_FTWords : p_FTWordsValue ( p_FTAnyallOption )? ;
	public final XQueryParser.p_FTWords_return p_FTWords() throws RecognitionException {
		XQueryParser.p_FTWords_return retval = new XQueryParser.p_FTWords_return();
		retval.start = input.LT(1);

		XQDTCommonTree root_0 = null;

		ParserRuleReturnScope p_FTWordsValue657 =null;
		ParserRuleReturnScope p_FTAnyallOption658 =null;


		try {
			// XQueryParser.g:1602:9: ( p_FTWordsValue ( p_FTAnyallOption )? )
			// XQueryParser.g:1602:11: p_FTWordsValue ( p_FTAnyallOption )?
			{
			root_0 = (XQDTCommonTree)adaptor.nil();


			pushFollow(FOLLOW_p_FTWordsValue_in_p_FTWords14137);
			p_FTWordsValue657=p_FTWordsValue();
			state._fsp--;
			if (state.failed) return retval;
			if ( state.backtracking==0 ) adaptor.addChild(root_0, p_FTWordsValue657.getTree());

			// XQueryParser.g:1602:26: ( p_FTAnyallOption )?
			int alt204=2;
			int LA204_0 = input.LA(1);
			if ( (LA204_0==ALL||LA204_0==ANY||LA204_0==PHRASE) ) {
				alt204=1;
			}
			switch (alt204) {
				case 1 :
					// XQueryParser.g:1602:26: p_FTAnyallOption
					{
					pushFollow(FOLLOW_p_FTAnyallOption_in_p_FTWords14139);
					p_FTAnyallOption658=p_FTAnyallOption();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, p_FTAnyallOption658.getTree());

					}
					break;

			}

			}

			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (XQDTCommonTree)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
			retval.tree = (XQDTCommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "p_FTWords"


	public static class p_FTWordsValue_return extends ParserRuleReturnScope {
		XQDTCommonTree tree;
		@Override
		public XQDTCommonTree getTree() { return tree; }
	};


	// $ANTLR start "p_FTWordsValue"
	// XQueryParser.g:1606:1: p_FTWordsValue : ( p_StringLiteral | ( LBRACKET p_Expr[true,true] RBRACKET ) );
	public final XQueryParser.p_FTWordsValue_return p_FTWordsValue() throws RecognitionException {
		XQueryParser.p_FTWordsValue_return retval = new XQueryParser.p_FTWordsValue_return();
		retval.start = input.LT(1);

		XQDTCommonTree root_0 = null;

		CommonToken LBRACKET660=null;
		CommonToken RBRACKET662=null;
		ParserRuleReturnScope p_StringLiteral659 =null;
		ParserRuleReturnScope p_Expr661 =null;

		XQDTCommonTree LBRACKET660_tree=null;
		XQDTCommonTree RBRACKET662_tree=null;

		try {
			// XQueryParser.g:1607:9: ( p_StringLiteral | ( LBRACKET p_Expr[true,true] RBRACKET ) )
			int alt205=2;
			int LA205_0 = input.LA(1);
			if ( (LA205_0==APOS||LA205_0==QUOT) ) {
				alt205=1;
			}
			else if ( (LA205_0==LBRACKET) ) {
				alt205=2;
			}

			else {
				if (state.backtracking>0) {state.failed=true; return retval;}
				NoViableAltException nvae =
					new NoViableAltException("", 205, 0, input);
				throw nvae;
			}

			switch (alt205) {
				case 1 :
					// XQueryParser.g:1607:11: p_StringLiteral
					{
					root_0 = (XQDTCommonTree)adaptor.nil();


					pushFollow(FOLLOW_p_StringLiteral_in_p_FTWordsValue14166);
					p_StringLiteral659=p_StringLiteral();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, p_StringLiteral659.getTree());

					}
					break;
				case 2 :
					// XQueryParser.g:1608:11: ( LBRACKET p_Expr[true,true] RBRACKET )
					{
					root_0 = (XQDTCommonTree)adaptor.nil();


					// XQueryParser.g:1608:11: ( LBRACKET p_Expr[true,true] RBRACKET )
					// XQueryParser.g:1608:12: LBRACKET p_Expr[true,true] RBRACKET
					{
					LBRACKET660=(CommonToken)match(input,LBRACKET,FOLLOW_LBRACKET_in_p_FTWordsValue14179); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					LBRACKET660_tree = (XQDTCommonTree)adaptor.create(LBRACKET660);
					adaptor.addChild(root_0, LBRACKET660_tree);
					}

					pushFollow(FOLLOW_p_Expr_in_p_FTWordsValue14181);
					p_Expr661=p_Expr(true, true);
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, p_Expr661.getTree());

					RBRACKET662=(CommonToken)match(input,RBRACKET,FOLLOW_RBRACKET_in_p_FTWordsValue14184); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					RBRACKET662_tree = (XQDTCommonTree)adaptor.create(RBRACKET662);
					adaptor.addChild(root_0, RBRACKET662_tree);
					}

					}

					}
					break;

			}
			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (XQDTCommonTree)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
			retval.tree = (XQDTCommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "p_FTWordsValue"


	public static class p_FTExtensionSelection_return extends ParserRuleReturnScope {
		XQDTCommonTree tree;
		@Override
		public XQDTCommonTree getTree() { return tree; }
	};


	// $ANTLR start "p_FTExtensionSelection"
	// XQueryParser.g:1612:1: p_FTExtensionSelection : ( L_Pragma )+ LBRACKET ( p_FTSelection )? RBRACKET ;
	public final XQueryParser.p_FTExtensionSelection_return p_FTExtensionSelection() throws RecognitionException {
		XQueryParser.p_FTExtensionSelection_return retval = new XQueryParser.p_FTExtensionSelection_return();
		retval.start = input.LT(1);

		XQDTCommonTree root_0 = null;

		CommonToken L_Pragma663=null;
		CommonToken LBRACKET664=null;
		CommonToken RBRACKET666=null;
		ParserRuleReturnScope p_FTSelection665 =null;

		XQDTCommonTree L_Pragma663_tree=null;
		XQDTCommonTree LBRACKET664_tree=null;
		XQDTCommonTree RBRACKET666_tree=null;

		try {
			// XQueryParser.g:1613:9: ( ( L_Pragma )+ LBRACKET ( p_FTSelection )? RBRACKET )
			// XQueryParser.g:1613:11: ( L_Pragma )+ LBRACKET ( p_FTSelection )? RBRACKET
			{
			root_0 = (XQDTCommonTree)adaptor.nil();


			// XQueryParser.g:1613:11: ( L_Pragma )+
			int cnt206=0;
			loop206:
			while (true) {
				int alt206=2;
				int LA206_0 = input.LA(1);
				if ( (LA206_0==L_Pragma) ) {
					alt206=1;
				}

				switch (alt206) {
				case 1 :
					// XQueryParser.g:1613:11: L_Pragma
					{
					L_Pragma663=(CommonToken)match(input,L_Pragma,FOLLOW_L_Pragma_in_p_FTExtensionSelection14211); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					L_Pragma663_tree = (XQDTCommonTree)adaptor.create(L_Pragma663);
					adaptor.addChild(root_0, L_Pragma663_tree);
					}

					}
					break;

				default :
					if ( cnt206 >= 1 ) break loop206;
					if (state.backtracking>0) {state.failed=true; return retval;}
					EarlyExitException eee = new EarlyExitException(206, input);
					throw eee;
				}
				cnt206++;
			}

			LBRACKET664=(CommonToken)match(input,LBRACKET,FOLLOW_LBRACKET_in_p_FTExtensionSelection14214); if (state.failed) return retval;
			if ( state.backtracking==0 ) {
			LBRACKET664_tree = (XQDTCommonTree)adaptor.create(LBRACKET664);
			adaptor.addChild(root_0, LBRACKET664_tree);
			}

			// XQueryParser.g:1613:30: ( p_FTSelection )?
			int alt207=2;
			int LA207_0 = input.LA(1);
			if ( (LA207_0==APOS||LA207_0==FTNOT||LA207_0==LBRACKET||LA207_0==LPAREN||LA207_0==L_Pragma||LA207_0==QUOT) ) {
				alt207=1;
			}
			switch (alt207) {
				case 1 :
					// XQueryParser.g:1613:30: p_FTSelection
					{
					pushFollow(FOLLOW_p_FTSelection_in_p_FTExtensionSelection14216);
					p_FTSelection665=p_FTSelection();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, p_FTSelection665.getTree());

					}
					break;

			}

			RBRACKET666=(CommonToken)match(input,RBRACKET,FOLLOW_RBRACKET_in_p_FTExtensionSelection14219); if (state.failed) return retval;
			if ( state.backtracking==0 ) {
			RBRACKET666_tree = (XQDTCommonTree)adaptor.create(RBRACKET666);
			adaptor.addChild(root_0, RBRACKET666_tree);
			}

			}

			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (XQDTCommonTree)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
			retval.tree = (XQDTCommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "p_FTExtensionSelection"


	public static class p_FTAnyallOption_return extends ParserRuleReturnScope {
		XQDTCommonTree tree;
		@Override
		public XQDTCommonTree getTree() { return tree; }
	};


	// $ANTLR start "p_FTAnyallOption"
	// XQueryParser.g:1617:1: p_FTAnyallOption : ( (k+= ANY (k+= WORD )? ) | (k+= ALL ( WORDS )? ) |k+= PHRASE ) ;
	public final XQueryParser.p_FTAnyallOption_return p_FTAnyallOption() throws RecognitionException {
		XQueryParser.p_FTAnyallOption_return retval = new XQueryParser.p_FTAnyallOption_return();
		retval.start = input.LT(1);

		XQDTCommonTree root_0 = null;

		CommonToken WORDS667=null;
		CommonToken k=null;
		List<Object> list_k=null;

		XQDTCommonTree WORDS667_tree=null;
		XQDTCommonTree k_tree=null;

		try {
			// XQueryParser.g:1618:9: ( ( (k+= ANY (k+= WORD )? ) | (k+= ALL ( WORDS )? ) |k+= PHRASE ) )
			// XQueryParser.g:1618:11: ( (k+= ANY (k+= WORD )? ) | (k+= ALL ( WORDS )? ) |k+= PHRASE )
			{
			root_0 = (XQDTCommonTree)adaptor.nil();


			// XQueryParser.g:1618:11: ( (k+= ANY (k+= WORD )? ) | (k+= ALL ( WORDS )? ) |k+= PHRASE )
			int alt210=3;
			switch ( input.LA(1) ) {
			case ANY:
				{
				alt210=1;
				}
				break;
			case ALL:
				{
				alt210=2;
				}
				break;
			case PHRASE:
				{
				alt210=3;
				}
				break;
			default:
				if (state.backtracking>0) {state.failed=true; return retval;}
				NoViableAltException nvae =
					new NoViableAltException("", 210, 0, input);
				throw nvae;
			}
			switch (alt210) {
				case 1 :
					// XQueryParser.g:1618:13: (k+= ANY (k+= WORD )? )
					{
					// XQueryParser.g:1618:13: (k+= ANY (k+= WORD )? )
					// XQueryParser.g:1618:14: k+= ANY (k+= WORD )?
					{
					k=(CommonToken)match(input,ANY,FOLLOW_ANY_in_p_FTAnyallOption14250); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					k_tree = (XQDTCommonTree)adaptor.create(k);
					adaptor.addChild(root_0, k_tree);
					}

					if (list_k==null) list_k=new ArrayList<Object>();
					list_k.add(k);
					// XQueryParser.g:1618:22: (k+= WORD )?
					int alt208=2;
					int LA208_0 = input.LA(1);
					if ( (LA208_0==WORD) ) {
						alt208=1;
					}
					switch (alt208) {
						case 1 :
							// XQueryParser.g:1618:22: k+= WORD
							{
							k=(CommonToken)match(input,WORD,FOLLOW_WORD_in_p_FTAnyallOption14254); if (state.failed) return retval;
							if ( state.backtracking==0 ) {
							k_tree = (XQDTCommonTree)adaptor.create(k);
							adaptor.addChild(root_0, k_tree);
							}

							if (list_k==null) list_k=new ArrayList<Object>();
							list_k.add(k);
							}
							break;

					}

					}

					}
					break;
				case 2 :
					// XQueryParser.g:1618:33: (k+= ALL ( WORDS )? )
					{
					// XQueryParser.g:1618:33: (k+= ALL ( WORDS )? )
					// XQueryParser.g:1618:34: k+= ALL ( WORDS )?
					{
					k=(CommonToken)match(input,ALL,FOLLOW_ALL_in_p_FTAnyallOption14263); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					k_tree = (XQDTCommonTree)adaptor.create(k);
					adaptor.addChild(root_0, k_tree);
					}

					if (list_k==null) list_k=new ArrayList<Object>();
					list_k.add(k);
					// XQueryParser.g:1618:41: ( WORDS )?
					int alt209=2;
					int LA209_0 = input.LA(1);
					if ( (LA209_0==WORDS) ) {
						alt209=1;
					}
					switch (alt209) {
						case 1 :
							// XQueryParser.g:1618:41: WORDS
							{
							WORDS667=(CommonToken)match(input,WORDS,FOLLOW_WORDS_in_p_FTAnyallOption14265); if (state.failed) return retval;
							if ( state.backtracking==0 ) {
							WORDS667_tree = (XQDTCommonTree)adaptor.create(WORDS667);
							adaptor.addChild(root_0, WORDS667_tree);
							}

							}
							break;

					}

					}

					}
					break;
				case 3 :
					// XQueryParser.g:1618:51: k+= PHRASE
					{
					k=(CommonToken)match(input,PHRASE,FOLLOW_PHRASE_in_p_FTAnyallOption14273); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					k_tree = (XQDTCommonTree)adaptor.create(k);
					adaptor.addChild(root_0, k_tree);
					}

					if (list_k==null) list_k=new ArrayList<Object>();
					list_k.add(k);
					}
					break;

			}

			if ( state.backtracking==0 ) {ak(list_k);}
			}

			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (XQDTCommonTree)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
			retval.tree = (XQDTCommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "p_FTAnyallOption"


	public static class p_FTTimes_return extends ParserRuleReturnScope {
		XQDTCommonTree tree;
		@Override
		public XQDTCommonTree getTree() { return tree; }
	};


	// $ANTLR start "p_FTTimes"
	// XQueryParser.g:1622:1: p_FTTimes :k+= OCCURS p_FTRange k+= TIMES ;
	public final XQueryParser.p_FTTimes_return p_FTTimes() throws RecognitionException {
		XQueryParser.p_FTTimes_return retval = new XQueryParser.p_FTTimes_return();
		retval.start = input.LT(1);

		XQDTCommonTree root_0 = null;

		CommonToken k=null;
		List<Object> list_k=null;
		ParserRuleReturnScope p_FTRange668 =null;

		XQDTCommonTree k_tree=null;

		try {
			// XQueryParser.g:1623:9: (k+= OCCURS p_FTRange k+= TIMES )
			// XQueryParser.g:1623:11: k+= OCCURS p_FTRange k+= TIMES
			{
			root_0 = (XQDTCommonTree)adaptor.nil();


			k=(CommonToken)match(input,OCCURS,FOLLOW_OCCURS_in_p_FTTimes14305); if (state.failed) return retval;
			if ( state.backtracking==0 ) {
			k_tree = (XQDTCommonTree)adaptor.create(k);
			adaptor.addChild(root_0, k_tree);
			}

			if (list_k==null) list_k=new ArrayList<Object>();
			list_k.add(k);
			pushFollow(FOLLOW_p_FTRange_in_p_FTTimes14307);
			p_FTRange668=p_FTRange();
			state._fsp--;
			if (state.failed) return retval;
			if ( state.backtracking==0 ) adaptor.addChild(root_0, p_FTRange668.getTree());

			k=(CommonToken)match(input,TIMES,FOLLOW_TIMES_in_p_FTTimes14311); if (state.failed) return retval;
			if ( state.backtracking==0 ) {
			k_tree = (XQDTCommonTree)adaptor.create(k);
			adaptor.addChild(root_0, k_tree);
			}

			if (list_k==null) list_k=new ArrayList<Object>();
			list_k.add(k);
			if ( state.backtracking==0 ) {ak(list_k);}
			}

			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (XQDTCommonTree)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
			retval.tree = (XQDTCommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "p_FTTimes"


	public static class p_FTRange_return extends ParserRuleReturnScope {
		XQDTCommonTree tree;
		@Override
		public XQDTCommonTree getTree() { return tree; }
	};


	// $ANTLR start "p_FTRange"
	// XQueryParser.g:1627:1: p_FTRange : ( (k+= EXACTLY p_AdditiveExpr ) | (k+= AT k+= LEAST p_AdditiveExpr ) | (k+= AT k+= MOST p_AdditiveExpr ) | (k+= FROM p_AdditiveExpr k+= TO p_AdditiveExpr ) ) ;
	public final XQueryParser.p_FTRange_return p_FTRange() throws RecognitionException {
		XQueryParser.p_FTRange_return retval = new XQueryParser.p_FTRange_return();
		retval.start = input.LT(1);

		XQDTCommonTree root_0 = null;

		CommonToken k=null;
		List<Object> list_k=null;
		ParserRuleReturnScope p_AdditiveExpr669 =null;
		ParserRuleReturnScope p_AdditiveExpr670 =null;
		ParserRuleReturnScope p_AdditiveExpr671 =null;
		ParserRuleReturnScope p_AdditiveExpr672 =null;
		ParserRuleReturnScope p_AdditiveExpr673 =null;

		XQDTCommonTree k_tree=null;

		try {
			// XQueryParser.g:1628:9: ( ( (k+= EXACTLY p_AdditiveExpr ) | (k+= AT k+= LEAST p_AdditiveExpr ) | (k+= AT k+= MOST p_AdditiveExpr ) | (k+= FROM p_AdditiveExpr k+= TO p_AdditiveExpr ) ) )
			// XQueryParser.g:1628:11: ( (k+= EXACTLY p_AdditiveExpr ) | (k+= AT k+= LEAST p_AdditiveExpr ) | (k+= AT k+= MOST p_AdditiveExpr ) | (k+= FROM p_AdditiveExpr k+= TO p_AdditiveExpr ) )
			{
			root_0 = (XQDTCommonTree)adaptor.nil();


			// XQueryParser.g:1628:11: ( (k+= EXACTLY p_AdditiveExpr ) | (k+= AT k+= LEAST p_AdditiveExpr ) | (k+= AT k+= MOST p_AdditiveExpr ) | (k+= FROM p_AdditiveExpr k+= TO p_AdditiveExpr ) )
			int alt211=4;
			switch ( input.LA(1) ) {
			case EXACTLY:
				{
				alt211=1;
				}
				break;
			case AT:
				{
				int LA211_2 = input.LA(2);
				if ( (LA211_2==LEAST) ) {
					alt211=2;
				}
				else if ( (LA211_2==MOST) ) {
					alt211=3;
				}

				else {
					if (state.backtracking>0) {state.failed=true; return retval;}
					int nvaeMark = input.mark();
					try {
						input.consume();
						NoViableAltException nvae =
							new NoViableAltException("", 211, 2, input);
						throw nvae;
					} finally {
						input.rewind(nvaeMark);
					}
				}

				}
				break;
			case FROM:
				{
				alt211=4;
				}
				break;
			default:
				if (state.backtracking>0) {state.failed=true; return retval;}
				NoViableAltException nvae =
					new NoViableAltException("", 211, 0, input);
				throw nvae;
			}
			switch (alt211) {
				case 1 :
					// XQueryParser.g:1628:13: (k+= EXACTLY p_AdditiveExpr )
					{
					// XQueryParser.g:1628:13: (k+= EXACTLY p_AdditiveExpr )
					// XQueryParser.g:1628:14: k+= EXACTLY p_AdditiveExpr
					{
					k=(CommonToken)match(input,EXACTLY,FOLLOW_EXACTLY_in_p_FTRange14344); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					k_tree = (XQDTCommonTree)adaptor.create(k);
					adaptor.addChild(root_0, k_tree);
					}

					if (list_k==null) list_k=new ArrayList<Object>();
					list_k.add(k);
					pushFollow(FOLLOW_p_AdditiveExpr_in_p_FTRange14346);
					p_AdditiveExpr669=p_AdditiveExpr();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, p_AdditiveExpr669.getTree());

					}

					}
					break;
				case 2 :
					// XQueryParser.g:1629:13: (k+= AT k+= LEAST p_AdditiveExpr )
					{
					// XQueryParser.g:1629:13: (k+= AT k+= LEAST p_AdditiveExpr )
					// XQueryParser.g:1629:14: k+= AT k+= LEAST p_AdditiveExpr
					{
					k=(CommonToken)match(input,AT,FOLLOW_AT_in_p_FTRange14364); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					k_tree = (XQDTCommonTree)adaptor.create(k);
					adaptor.addChild(root_0, k_tree);
					}

					if (list_k==null) list_k=new ArrayList<Object>();
					list_k.add(k);
					k=(CommonToken)match(input,LEAST,FOLLOW_LEAST_in_p_FTRange14368); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					k_tree = (XQDTCommonTree)adaptor.create(k);
					adaptor.addChild(root_0, k_tree);
					}

					if (list_k==null) list_k=new ArrayList<Object>();
					list_k.add(k);
					pushFollow(FOLLOW_p_AdditiveExpr_in_p_FTRange14370);
					p_AdditiveExpr670=p_AdditiveExpr();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, p_AdditiveExpr670.getTree());

					}

					}
					break;
				case 3 :
					// XQueryParser.g:1630:13: (k+= AT k+= MOST p_AdditiveExpr )
					{
					// XQueryParser.g:1630:13: (k+= AT k+= MOST p_AdditiveExpr )
					// XQueryParser.g:1630:14: k+= AT k+= MOST p_AdditiveExpr
					{
					k=(CommonToken)match(input,AT,FOLLOW_AT_in_p_FTRange14388); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					k_tree = (XQDTCommonTree)adaptor.create(k);
					adaptor.addChild(root_0, k_tree);
					}

					if (list_k==null) list_k=new ArrayList<Object>();
					list_k.add(k);
					k=(CommonToken)match(input,MOST,FOLLOW_MOST_in_p_FTRange14392); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					k_tree = (XQDTCommonTree)adaptor.create(k);
					adaptor.addChild(root_0, k_tree);
					}

					if (list_k==null) list_k=new ArrayList<Object>();
					list_k.add(k);
					pushFollow(FOLLOW_p_AdditiveExpr_in_p_FTRange14394);
					p_AdditiveExpr671=p_AdditiveExpr();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, p_AdditiveExpr671.getTree());

					}

					}
					break;
				case 4 :
					// XQueryParser.g:1631:13: (k+= FROM p_AdditiveExpr k+= TO p_AdditiveExpr )
					{
					// XQueryParser.g:1631:13: (k+= FROM p_AdditiveExpr k+= TO p_AdditiveExpr )
					// XQueryParser.g:1631:14: k+= FROM p_AdditiveExpr k+= TO p_AdditiveExpr
					{
					k=(CommonToken)match(input,FROM,FOLLOW_FROM_in_p_FTRange14412); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					k_tree = (XQDTCommonTree)adaptor.create(k);
					adaptor.addChild(root_0, k_tree);
					}

					if (list_k==null) list_k=new ArrayList<Object>();
					list_k.add(k);
					pushFollow(FOLLOW_p_AdditiveExpr_in_p_FTRange14414);
					p_AdditiveExpr672=p_AdditiveExpr();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, p_AdditiveExpr672.getTree());

					k=(CommonToken)match(input,TO,FOLLOW_TO_in_p_FTRange14418); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					k_tree = (XQDTCommonTree)adaptor.create(k);
					adaptor.addChild(root_0, k_tree);
					}

					if (list_k==null) list_k=new ArrayList<Object>();
					list_k.add(k);
					pushFollow(FOLLOW_p_AdditiveExpr_in_p_FTRange14420);
					p_AdditiveExpr673=p_AdditiveExpr();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, p_AdditiveExpr673.getTree());

					}

					}
					break;

			}

			if ( state.backtracking==0 ) {ak(list_k);}
			}

			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (XQDTCommonTree)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
			retval.tree = (XQDTCommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "p_FTRange"


	public static class p_FTPosFilter_return extends ParserRuleReturnScope {
		XQDTCommonTree tree;
		@Override
		public XQDTCommonTree getTree() { return tree; }
	};


	// $ANTLR start "p_FTPosFilter"
	// XQueryParser.g:1635:1: p_FTPosFilter : ( p_FTOrder | p_FTWindow | p_FTDistance | p_FTScope | p_FTContent );
	public final XQueryParser.p_FTPosFilter_return p_FTPosFilter() throws RecognitionException {
		XQueryParser.p_FTPosFilter_return retval = new XQueryParser.p_FTPosFilter_return();
		retval.start = input.LT(1);

		XQDTCommonTree root_0 = null;

		ParserRuleReturnScope p_FTOrder674 =null;
		ParserRuleReturnScope p_FTWindow675 =null;
		ParserRuleReturnScope p_FTDistance676 =null;
		ParserRuleReturnScope p_FTScope677 =null;
		ParserRuleReturnScope p_FTContent678 =null;


		try {
			// XQueryParser.g:1636:9: ( p_FTOrder | p_FTWindow | p_FTDistance | p_FTScope | p_FTContent )
			int alt212=5;
			switch ( input.LA(1) ) {
			case ORDERED:
				{
				alt212=1;
				}
				break;
			case WINDOW:
				{
				alt212=2;
				}
				break;
			case DISTANCE:
				{
				alt212=3;
				}
				break;
			case DIFFERENT:
			case SAME:
				{
				alt212=4;
				}
				break;
			case AT:
			case ENTIRE:
				{
				alt212=5;
				}
				break;
			default:
				if (state.backtracking>0) {state.failed=true; return retval;}
				NoViableAltException nvae =
					new NoViableAltException("", 212, 0, input);
				throw nvae;
			}
			switch (alt212) {
				case 1 :
					// XQueryParser.g:1636:11: p_FTOrder
					{
					root_0 = (XQDTCommonTree)adaptor.nil();


					pushFollow(FOLLOW_p_FTOrder_in_p_FTPosFilter14451);
					p_FTOrder674=p_FTOrder();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, p_FTOrder674.getTree());

					}
					break;
				case 2 :
					// XQueryParser.g:1636:23: p_FTWindow
					{
					root_0 = (XQDTCommonTree)adaptor.nil();


					pushFollow(FOLLOW_p_FTWindow_in_p_FTPosFilter14455);
					p_FTWindow675=p_FTWindow();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, p_FTWindow675.getTree());

					}
					break;
				case 3 :
					// XQueryParser.g:1636:36: p_FTDistance
					{
					root_0 = (XQDTCommonTree)adaptor.nil();


					pushFollow(FOLLOW_p_FTDistance_in_p_FTPosFilter14459);
					p_FTDistance676=p_FTDistance();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, p_FTDistance676.getTree());

					}
					break;
				case 4 :
					// XQueryParser.g:1636:51: p_FTScope
					{
					root_0 = (XQDTCommonTree)adaptor.nil();


					pushFollow(FOLLOW_p_FTScope_in_p_FTPosFilter14463);
					p_FTScope677=p_FTScope();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, p_FTScope677.getTree());

					}
					break;
				case 5 :
					// XQueryParser.g:1636:63: p_FTContent
					{
					root_0 = (XQDTCommonTree)adaptor.nil();


					pushFollow(FOLLOW_p_FTContent_in_p_FTPosFilter14467);
					p_FTContent678=p_FTContent();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, p_FTContent678.getTree());

					}
					break;

			}
			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (XQDTCommonTree)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
			retval.tree = (XQDTCommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "p_FTPosFilter"


	public static class p_FTOrder_return extends ParserRuleReturnScope {
		XQDTCommonTree tree;
		@Override
		public XQDTCommonTree getTree() { return tree; }
	};


	// $ANTLR start "p_FTOrder"
	// XQueryParser.g:1640:1: p_FTOrder : ko= ORDERED ;
	public final XQueryParser.p_FTOrder_return p_FTOrder() throws RecognitionException {
		XQueryParser.p_FTOrder_return retval = new XQueryParser.p_FTOrder_return();
		retval.start = input.LT(1);

		XQDTCommonTree root_0 = null;

		CommonToken ko=null;

		XQDTCommonTree ko_tree=null;

		try {
			// XQueryParser.g:1641:9: (ko= ORDERED )
			// XQueryParser.g:1641:11: ko= ORDERED
			{
			root_0 = (XQDTCommonTree)adaptor.nil();


			ko=(CommonToken)match(input,ORDERED,FOLLOW_ORDERED_in_p_FTOrder14495); if (state.failed) return retval;
			if ( state.backtracking==0 ) {
			ko_tree = (XQDTCommonTree)adaptor.create(ko);
			adaptor.addChild(root_0, ko_tree);
			}

			if ( state.backtracking==0 ) {ak(ko);}
			}

			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (XQDTCommonTree)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
			retval.tree = (XQDTCommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "p_FTOrder"


	public static class p_FTWindow_return extends ParserRuleReturnScope {
		XQDTCommonTree tree;
		@Override
		public XQDTCommonTree getTree() { return tree; }
	};


	// $ANTLR start "p_FTWindow"
	// XQueryParser.g:1645:1: p_FTWindow : kw= WINDOW p_AdditiveExpr p_FTUnit ;
	public final XQueryParser.p_FTWindow_return p_FTWindow() throws RecognitionException {
		XQueryParser.p_FTWindow_return retval = new XQueryParser.p_FTWindow_return();
		retval.start = input.LT(1);

		XQDTCommonTree root_0 = null;

		CommonToken kw=null;
		ParserRuleReturnScope p_AdditiveExpr679 =null;
		ParserRuleReturnScope p_FTUnit680 =null;

		XQDTCommonTree kw_tree=null;

		try {
			// XQueryParser.g:1646:9: (kw= WINDOW p_AdditiveExpr p_FTUnit )
			// XQueryParser.g:1646:11: kw= WINDOW p_AdditiveExpr p_FTUnit
			{
			root_0 = (XQDTCommonTree)adaptor.nil();


			kw=(CommonToken)match(input,WINDOW,FOLLOW_WINDOW_in_p_FTWindow14525); if (state.failed) return retval;
			if ( state.backtracking==0 ) {
			kw_tree = (XQDTCommonTree)adaptor.create(kw);
			adaptor.addChild(root_0, kw_tree);
			}

			if ( state.backtracking==0 ) {ak(kw);}
			pushFollow(FOLLOW_p_AdditiveExpr_in_p_FTWindow14529);
			p_AdditiveExpr679=p_AdditiveExpr();
			state._fsp--;
			if (state.failed) return retval;
			if ( state.backtracking==0 ) adaptor.addChild(root_0, p_AdditiveExpr679.getTree());

			pushFollow(FOLLOW_p_FTUnit_in_p_FTWindow14531);
			p_FTUnit680=p_FTUnit();
			state._fsp--;
			if (state.failed) return retval;
			if ( state.backtracking==0 ) adaptor.addChild(root_0, p_FTUnit680.getTree());

			}

			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (XQDTCommonTree)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
			retval.tree = (XQDTCommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "p_FTWindow"


	public static class p_FTDistance_return extends ParserRuleReturnScope {
		XQDTCommonTree tree;
		@Override
		public XQDTCommonTree getTree() { return tree; }
	};


	// $ANTLR start "p_FTDistance"
	// XQueryParser.g:1650:1: p_FTDistance : kd= DISTANCE p_FTRange p_FTUnit ;
	public final XQueryParser.p_FTDistance_return p_FTDistance() throws RecognitionException {
		XQueryParser.p_FTDistance_return retval = new XQueryParser.p_FTDistance_return();
		retval.start = input.LT(1);

		XQDTCommonTree root_0 = null;

		CommonToken kd=null;
		ParserRuleReturnScope p_FTRange681 =null;
		ParserRuleReturnScope p_FTUnit682 =null;

		XQDTCommonTree kd_tree=null;

		try {
			// XQueryParser.g:1651:9: (kd= DISTANCE p_FTRange p_FTUnit )
			// XQueryParser.g:1651:11: kd= DISTANCE p_FTRange p_FTUnit
			{
			root_0 = (XQDTCommonTree)adaptor.nil();


			kd=(CommonToken)match(input,DISTANCE,FOLLOW_DISTANCE_in_p_FTDistance14559); if (state.failed) return retval;
			if ( state.backtracking==0 ) {
			kd_tree = (XQDTCommonTree)adaptor.create(kd);
			adaptor.addChild(root_0, kd_tree);
			}

			if ( state.backtracking==0 ) {ak(kd);}
			pushFollow(FOLLOW_p_FTRange_in_p_FTDistance14563);
			p_FTRange681=p_FTRange();
			state._fsp--;
			if (state.failed) return retval;
			if ( state.backtracking==0 ) adaptor.addChild(root_0, p_FTRange681.getTree());

			pushFollow(FOLLOW_p_FTUnit_in_p_FTDistance14565);
			p_FTUnit682=p_FTUnit();
			state._fsp--;
			if (state.failed) return retval;
			if ( state.backtracking==0 ) adaptor.addChild(root_0, p_FTUnit682.getTree());

			}

			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (XQDTCommonTree)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
			retval.tree = (XQDTCommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "p_FTDistance"


	public static class p_FTUnit_return extends ParserRuleReturnScope {
		XQDTCommonTree tree;
		@Override
		public XQDTCommonTree getTree() { return tree; }
	};


	// $ANTLR start "p_FTUnit"
	// XQueryParser.g:1655:1: p_FTUnit : (k+= WORDS |k+= SENTENCES |k+= PARAGRAPHS ) ;
	public final XQueryParser.p_FTUnit_return p_FTUnit() throws RecognitionException {
		XQueryParser.p_FTUnit_return retval = new XQueryParser.p_FTUnit_return();
		retval.start = input.LT(1);

		XQDTCommonTree root_0 = null;

		CommonToken k=null;
		List<Object> list_k=null;

		XQDTCommonTree k_tree=null;

		try {
			// XQueryParser.g:1656:9: ( (k+= WORDS |k+= SENTENCES |k+= PARAGRAPHS ) )
			// XQueryParser.g:1656:11: (k+= WORDS |k+= SENTENCES |k+= PARAGRAPHS )
			{
			root_0 = (XQDTCommonTree)adaptor.nil();


			// XQueryParser.g:1656:11: (k+= WORDS |k+= SENTENCES |k+= PARAGRAPHS )
			int alt213=3;
			switch ( input.LA(1) ) {
			case WORDS:
				{
				alt213=1;
				}
				break;
			case SENTENCES:
				{
				alt213=2;
				}
				break;
			case PARAGRAPHS:
				{
				alt213=3;
				}
				break;
			default:
				if (state.backtracking>0) {state.failed=true; return retval;}
				NoViableAltException nvae =
					new NoViableAltException("", 213, 0, input);
				throw nvae;
			}
			switch (alt213) {
				case 1 :
					// XQueryParser.g:1656:13: k+= WORDS
					{
					k=(CommonToken)match(input,WORDS,FOLLOW_WORDS_in_p_FTUnit14595); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					k_tree = (XQDTCommonTree)adaptor.create(k);
					adaptor.addChild(root_0, k_tree);
					}

					if (list_k==null) list_k=new ArrayList<Object>();
					list_k.add(k);
					}
					break;
				case 2 :
					// XQueryParser.g:1656:24: k+= SENTENCES
					{
					k=(CommonToken)match(input,SENTENCES,FOLLOW_SENTENCES_in_p_FTUnit14601); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					k_tree = (XQDTCommonTree)adaptor.create(k);
					adaptor.addChild(root_0, k_tree);
					}

					if (list_k==null) list_k=new ArrayList<Object>();
					list_k.add(k);
					}
					break;
				case 3 :
					// XQueryParser.g:1656:39: k+= PARAGRAPHS
					{
					k=(CommonToken)match(input,PARAGRAPHS,FOLLOW_PARAGRAPHS_in_p_FTUnit14607); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					k_tree = (XQDTCommonTree)adaptor.create(k);
					adaptor.addChild(root_0, k_tree);
					}

					if (list_k==null) list_k=new ArrayList<Object>();
					list_k.add(k);
					}
					break;

			}

			if ( state.backtracking==0 ) {ak(list_k);}
			}

			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (XQDTCommonTree)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
			retval.tree = (XQDTCommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "p_FTUnit"


	public static class p_FTScope_return extends ParserRuleReturnScope {
		XQDTCommonTree tree;
		@Override
		public XQDTCommonTree getTree() { return tree; }
	};


	// $ANTLR start "p_FTScope"
	// XQueryParser.g:1660:1: p_FTScope : (k+= SAME |k+= DIFFERENT ) p_FTBigUnit ;
	public final XQueryParser.p_FTScope_return p_FTScope() throws RecognitionException {
		XQueryParser.p_FTScope_return retval = new XQueryParser.p_FTScope_return();
		retval.start = input.LT(1);

		XQDTCommonTree root_0 = null;

		CommonToken k=null;
		List<Object> list_k=null;
		ParserRuleReturnScope p_FTBigUnit683 =null;

		XQDTCommonTree k_tree=null;

		try {
			// XQueryParser.g:1661:9: ( (k+= SAME |k+= DIFFERENT ) p_FTBigUnit )
			// XQueryParser.g:1661:11: (k+= SAME |k+= DIFFERENT ) p_FTBigUnit
			{
			root_0 = (XQDTCommonTree)adaptor.nil();


			// XQueryParser.g:1661:11: (k+= SAME |k+= DIFFERENT )
			int alt214=2;
			int LA214_0 = input.LA(1);
			if ( (LA214_0==SAME) ) {
				alt214=1;
			}
			else if ( (LA214_0==DIFFERENT) ) {
				alt214=2;
			}

			else {
				if (state.backtracking>0) {state.failed=true; return retval;}
				NoViableAltException nvae =
					new NoViableAltException("", 214, 0, input);
				throw nvae;
			}

			switch (alt214) {
				case 1 :
					// XQueryParser.g:1661:12: k+= SAME
					{
					k=(CommonToken)match(input,SAME,FOLLOW_SAME_in_p_FTScope14640); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					k_tree = (XQDTCommonTree)adaptor.create(k);
					adaptor.addChild(root_0, k_tree);
					}

					if (list_k==null) list_k=new ArrayList<Object>();
					list_k.add(k);
					}
					break;
				case 2 :
					// XQueryParser.g:1661:22: k+= DIFFERENT
					{
					k=(CommonToken)match(input,DIFFERENT,FOLLOW_DIFFERENT_in_p_FTScope14646); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					k_tree = (XQDTCommonTree)adaptor.create(k);
					adaptor.addChild(root_0, k_tree);
					}

					if (list_k==null) list_k=new ArrayList<Object>();
					list_k.add(k);
					}
					break;

			}

			if ( state.backtracking==0 ) {ak(list_k);}
			pushFollow(FOLLOW_p_FTBigUnit_in_p_FTScope14651);
			p_FTBigUnit683=p_FTBigUnit();
			state._fsp--;
			if (state.failed) return retval;
			if ( state.backtracking==0 ) adaptor.addChild(root_0, p_FTBigUnit683.getTree());

			}

			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (XQDTCommonTree)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
			retval.tree = (XQDTCommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "p_FTScope"


	public static class p_FTBigUnit_return extends ParserRuleReturnScope {
		XQDTCommonTree tree;
		@Override
		public XQDTCommonTree getTree() { return tree; }
	};


	// $ANTLR start "p_FTBigUnit"
	// XQueryParser.g:1665:1: p_FTBigUnit : (k+= SENTENCE |k+= PARAGRAPH ) ;
	public final XQueryParser.p_FTBigUnit_return p_FTBigUnit() throws RecognitionException {
		XQueryParser.p_FTBigUnit_return retval = new XQueryParser.p_FTBigUnit_return();
		retval.start = input.LT(1);

		XQDTCommonTree root_0 = null;

		CommonToken k=null;
		List<Object> list_k=null;

		XQDTCommonTree k_tree=null;

		try {
			// XQueryParser.g:1666:9: ( (k+= SENTENCE |k+= PARAGRAPH ) )
			// XQueryParser.g:1666:11: (k+= SENTENCE |k+= PARAGRAPH )
			{
			root_0 = (XQDTCommonTree)adaptor.nil();


			// XQueryParser.g:1666:11: (k+= SENTENCE |k+= PARAGRAPH )
			int alt215=2;
			int LA215_0 = input.LA(1);
			if ( (LA215_0==SENTENCE) ) {
				alt215=1;
			}
			else if ( (LA215_0==PARAGRAPH) ) {
				alt215=2;
			}

			else {
				if (state.backtracking>0) {state.failed=true; return retval;}
				NoViableAltException nvae =
					new NoViableAltException("", 215, 0, input);
				throw nvae;
			}

			switch (alt215) {
				case 1 :
					// XQueryParser.g:1666:13: k+= SENTENCE
					{
					k=(CommonToken)match(input,SENTENCE,FOLLOW_SENTENCE_in_p_FTBigUnit14681); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					k_tree = (XQDTCommonTree)adaptor.create(k);
					adaptor.addChild(root_0, k_tree);
					}

					if (list_k==null) list_k=new ArrayList<Object>();
					list_k.add(k);
					}
					break;
				case 2 :
					// XQueryParser.g:1666:27: k+= PARAGRAPH
					{
					k=(CommonToken)match(input,PARAGRAPH,FOLLOW_PARAGRAPH_in_p_FTBigUnit14687); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					k_tree = (XQDTCommonTree)adaptor.create(k);
					adaptor.addChild(root_0, k_tree);
					}

					if (list_k==null) list_k=new ArrayList<Object>();
					list_k.add(k);
					}
					break;

			}

			if ( state.backtracking==0 ) {ak(list_k);}
			}

			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (XQDTCommonTree)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
			retval.tree = (XQDTCommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "p_FTBigUnit"


	public static class p_FTContent_return extends ParserRuleReturnScope {
		XQDTCommonTree tree;
		@Override
		public XQDTCommonTree getTree() { return tree; }
	};


	// $ANTLR start "p_FTContent"
	// XQueryParser.g:1670:1: p_FTContent : ( (k+= AT k+= START ) | (k+= AT k+= END ) | (k+= ENTIRE k+= CONTENT ) ) ;
	public final XQueryParser.p_FTContent_return p_FTContent() throws RecognitionException {
		XQueryParser.p_FTContent_return retval = new XQueryParser.p_FTContent_return();
		retval.start = input.LT(1);

		XQDTCommonTree root_0 = null;

		CommonToken k=null;
		List<Object> list_k=null;

		XQDTCommonTree k_tree=null;

		try {
			// XQueryParser.g:1671:9: ( ( (k+= AT k+= START ) | (k+= AT k+= END ) | (k+= ENTIRE k+= CONTENT ) ) )
			// XQueryParser.g:1671:11: ( (k+= AT k+= START ) | (k+= AT k+= END ) | (k+= ENTIRE k+= CONTENT ) )
			{
			root_0 = (XQDTCommonTree)adaptor.nil();


			// XQueryParser.g:1671:11: ( (k+= AT k+= START ) | (k+= AT k+= END ) | (k+= ENTIRE k+= CONTENT ) )
			int alt216=3;
			int LA216_0 = input.LA(1);
			if ( (LA216_0==AT) ) {
				int LA216_1 = input.LA(2);
				if ( (LA216_1==START) ) {
					alt216=1;
				}
				else if ( (LA216_1==END) ) {
					alt216=2;
				}

				else {
					if (state.backtracking>0) {state.failed=true; return retval;}
					int nvaeMark = input.mark();
					try {
						input.consume();
						NoViableAltException nvae =
							new NoViableAltException("", 216, 1, input);
						throw nvae;
					} finally {
						input.rewind(nvaeMark);
					}
				}

			}
			else if ( (LA216_0==ENTIRE) ) {
				alt216=3;
			}

			else {
				if (state.backtracking>0) {state.failed=true; return retval;}
				NoViableAltException nvae =
					new NoViableAltException("", 216, 0, input);
				throw nvae;
			}

			switch (alt216) {
				case 1 :
					// XQueryParser.g:1671:13: (k+= AT k+= START )
					{
					// XQueryParser.g:1671:13: (k+= AT k+= START )
					// XQueryParser.g:1671:14: k+= AT k+= START
					{
					k=(CommonToken)match(input,AT,FOLLOW_AT_in_p_FTContent14722); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					k_tree = (XQDTCommonTree)adaptor.create(k);
					adaptor.addChild(root_0, k_tree);
					}

					if (list_k==null) list_k=new ArrayList<Object>();
					list_k.add(k);
					k=(CommonToken)match(input,START,FOLLOW_START_in_p_FTContent14726); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					k_tree = (XQDTCommonTree)adaptor.create(k);
					adaptor.addChild(root_0, k_tree);
					}

					if (list_k==null) list_k=new ArrayList<Object>();
					list_k.add(k);
					}

					}
					break;
				case 2 :
					// XQueryParser.g:1671:32: (k+= AT k+= END )
					{
					// XQueryParser.g:1671:32: (k+= AT k+= END )
					// XQueryParser.g:1671:33: k+= AT k+= END
					{
					k=(CommonToken)match(input,AT,FOLLOW_AT_in_p_FTContent14734); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					k_tree = (XQDTCommonTree)adaptor.create(k);
					adaptor.addChild(root_0, k_tree);
					}

					if (list_k==null) list_k=new ArrayList<Object>();
					list_k.add(k);
					k=(CommonToken)match(input,END,FOLLOW_END_in_p_FTContent14738); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					k_tree = (XQDTCommonTree)adaptor.create(k);
					adaptor.addChild(root_0, k_tree);
					}

					if (list_k==null) list_k=new ArrayList<Object>();
					list_k.add(k);
					}

					}
					break;
				case 3 :
					// XQueryParser.g:1671:49: (k+= ENTIRE k+= CONTENT )
					{
					// XQueryParser.g:1671:49: (k+= ENTIRE k+= CONTENT )
					// XQueryParser.g:1671:50: k+= ENTIRE k+= CONTENT
					{
					k=(CommonToken)match(input,ENTIRE,FOLLOW_ENTIRE_in_p_FTContent14746); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					k_tree = (XQDTCommonTree)adaptor.create(k);
					adaptor.addChild(root_0, k_tree);
					}

					if (list_k==null) list_k=new ArrayList<Object>();
					list_k.add(k);
					k=(CommonToken)match(input,CONTENT,FOLLOW_CONTENT_in_p_FTContent14750); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					k_tree = (XQDTCommonTree)adaptor.create(k);
					adaptor.addChild(root_0, k_tree);
					}

					if (list_k==null) list_k=new ArrayList<Object>();
					list_k.add(k);
					}

					}
					break;

			}

			if ( state.backtracking==0 ) {ak(list_k);}
			}

			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (XQDTCommonTree)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
			retval.tree = (XQDTCommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "p_FTContent"


	public static class p_FTMatchOptions_return extends ParserRuleReturnScope {
		XQDTCommonTree tree;
		@Override
		public XQDTCommonTree getTree() { return tree; }
	};


	// $ANTLR start "p_FTMatchOptions"
	// XQueryParser.g:1675:1: p_FTMatchOptions : (ku= USING p_FTMatchOption )+ ;
	public final XQueryParser.p_FTMatchOptions_return p_FTMatchOptions() throws RecognitionException {
		XQueryParser.p_FTMatchOptions_return retval = new XQueryParser.p_FTMatchOptions_return();
		retval.start = input.LT(1);

		XQDTCommonTree root_0 = null;

		CommonToken ku=null;
		ParserRuleReturnScope p_FTMatchOption684 =null;

		XQDTCommonTree ku_tree=null;

		try {
			// XQueryParser.g:1676:9: ( (ku= USING p_FTMatchOption )+ )
			// XQueryParser.g:1676:11: (ku= USING p_FTMatchOption )+
			{
			root_0 = (XQDTCommonTree)adaptor.nil();


			// XQueryParser.g:1676:11: (ku= USING p_FTMatchOption )+
			int cnt217=0;
			loop217:
			while (true) {
				int alt217=2;
				int LA217_0 = input.LA(1);
				if ( (LA217_0==USING) ) {
					alt217=1;
				}

				switch (alt217) {
				case 1 :
					// XQueryParser.g:1676:12: ku= USING p_FTMatchOption
					{
					ku=(CommonToken)match(input,USING,FOLLOW_USING_in_p_FTMatchOptions14784); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					ku_tree = (XQDTCommonTree)adaptor.create(ku);
					adaptor.addChild(root_0, ku_tree);
					}

					if ( state.backtracking==0 ) {ak(ku);}
					pushFollow(FOLLOW_p_FTMatchOption_in_p_FTMatchOptions14788);
					p_FTMatchOption684=p_FTMatchOption();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, p_FTMatchOption684.getTree());

					}
					break;

				default :
					if ( cnt217 >= 1 ) break loop217;
					if (state.backtracking>0) {state.failed=true; return retval;}
					EarlyExitException eee = new EarlyExitException(217, input);
					throw eee;
				}
				cnt217++;
			}

			}

			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (XQDTCommonTree)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
			retval.tree = (XQDTCommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "p_FTMatchOptions"


	public static class p_FTMatchOption_return extends ParserRuleReturnScope {
		XQDTCommonTree tree;
		@Override
		public XQDTCommonTree getTree() { return tree; }
	};


	// $ANTLR start "p_FTMatchOption"
	// XQueryParser.g:1680:1: p_FTMatchOption : ( p_FTLanguageOption | p_FTWildCardOption | p_FTThesaurusOption | p_FTStemOption | p_FTCaseOption | p_FTDiacriticsOption | p_FTStopWordOption | p_FTExtensionOption );
	public final XQueryParser.p_FTMatchOption_return p_FTMatchOption() throws RecognitionException {
		XQueryParser.p_FTMatchOption_return retval = new XQueryParser.p_FTMatchOption_return();
		retval.start = input.LT(1);

		XQDTCommonTree root_0 = null;

		ParserRuleReturnScope p_FTLanguageOption685 =null;
		ParserRuleReturnScope p_FTWildCardOption686 =null;
		ParserRuleReturnScope p_FTThesaurusOption687 =null;
		ParserRuleReturnScope p_FTStemOption688 =null;
		ParserRuleReturnScope p_FTCaseOption689 =null;
		ParserRuleReturnScope p_FTDiacriticsOption690 =null;
		ParserRuleReturnScope p_FTStopWordOption691 =null;
		ParserRuleReturnScope p_FTExtensionOption692 =null;


		try {
			// XQueryParser.g:1681:9: ( p_FTLanguageOption | p_FTWildCardOption | p_FTThesaurusOption | p_FTStemOption | p_FTCaseOption | p_FTDiacriticsOption | p_FTStopWordOption | p_FTExtensionOption )
			int alt218=8;
			switch ( input.LA(1) ) {
			case LANGUAGE:
				{
				alt218=1;
				}
				break;
			case WILDCARDS:
				{
				alt218=2;
				}
				break;
			case NO:
				{
				switch ( input.LA(2) ) {
				case WILDCARDS:
					{
					alt218=2;
					}
					break;
				case THESAURUS:
					{
					alt218=3;
					}
					break;
				case STEMMING:
					{
					alt218=4;
					}
					break;
				case STOP:
					{
					alt218=7;
					}
					break;
				default:
					if (state.backtracking>0) {state.failed=true; return retval;}
					int nvaeMark = input.mark();
					try {
						input.consume();
						NoViableAltException nvae =
							new NoViableAltException("", 218, 3, input);
						throw nvae;
					} finally {
						input.rewind(nvaeMark);
					}
				}
				}
				break;
			case THESAURUS:
				{
				alt218=3;
				}
				break;
			case STEMMING:
				{
				alt218=4;
				}
				break;
			case CASE:
			case LOWERCASE:
			case UPPERCASE:
				{
				alt218=5;
				}
				break;
			case DIACRITICS:
				{
				alt218=6;
				}
				break;
			case STOP:
				{
				alt218=7;
				}
				break;
			case OPTION:
				{
				alt218=8;
				}
				break;
			default:
				if (state.backtracking>0) {state.failed=true; return retval;}
				NoViableAltException nvae =
					new NoViableAltException("", 218, 0, input);
				throw nvae;
			}
			switch (alt218) {
				case 1 :
					// XQueryParser.g:1681:11: p_FTLanguageOption
					{
					root_0 = (XQDTCommonTree)adaptor.nil();


					pushFollow(FOLLOW_p_FTLanguageOption_in_p_FTMatchOption14816);
					p_FTLanguageOption685=p_FTLanguageOption();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, p_FTLanguageOption685.getTree());

					}
					break;
				case 2 :
					// XQueryParser.g:1682:11: p_FTWildCardOption
					{
					root_0 = (XQDTCommonTree)adaptor.nil();


					pushFollow(FOLLOW_p_FTWildCardOption_in_p_FTMatchOption14828);
					p_FTWildCardOption686=p_FTWildCardOption();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, p_FTWildCardOption686.getTree());

					}
					break;
				case 3 :
					// XQueryParser.g:1683:11: p_FTThesaurusOption
					{
					root_0 = (XQDTCommonTree)adaptor.nil();


					pushFollow(FOLLOW_p_FTThesaurusOption_in_p_FTMatchOption14840);
					p_FTThesaurusOption687=p_FTThesaurusOption();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, p_FTThesaurusOption687.getTree());

					}
					break;
				case 4 :
					// XQueryParser.g:1684:11: p_FTStemOption
					{
					root_0 = (XQDTCommonTree)adaptor.nil();


					pushFollow(FOLLOW_p_FTStemOption_in_p_FTMatchOption14852);
					p_FTStemOption688=p_FTStemOption();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, p_FTStemOption688.getTree());

					}
					break;
				case 5 :
					// XQueryParser.g:1685:11: p_FTCaseOption
					{
					root_0 = (XQDTCommonTree)adaptor.nil();


					pushFollow(FOLLOW_p_FTCaseOption_in_p_FTMatchOption14864);
					p_FTCaseOption689=p_FTCaseOption();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, p_FTCaseOption689.getTree());

					}
					break;
				case 6 :
					// XQueryParser.g:1686:11: p_FTDiacriticsOption
					{
					root_0 = (XQDTCommonTree)adaptor.nil();


					pushFollow(FOLLOW_p_FTDiacriticsOption_in_p_FTMatchOption14876);
					p_FTDiacriticsOption690=p_FTDiacriticsOption();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, p_FTDiacriticsOption690.getTree());

					}
					break;
				case 7 :
					// XQueryParser.g:1687:11: p_FTStopWordOption
					{
					root_0 = (XQDTCommonTree)adaptor.nil();


					pushFollow(FOLLOW_p_FTStopWordOption_in_p_FTMatchOption14888);
					p_FTStopWordOption691=p_FTStopWordOption();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, p_FTStopWordOption691.getTree());

					}
					break;
				case 8 :
					// XQueryParser.g:1688:11: p_FTExtensionOption
					{
					root_0 = (XQDTCommonTree)adaptor.nil();


					pushFollow(FOLLOW_p_FTExtensionOption_in_p_FTMatchOption14900);
					p_FTExtensionOption692=p_FTExtensionOption();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, p_FTExtensionOption692.getTree());

					}
					break;

			}
			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (XQDTCommonTree)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
			retval.tree = (XQDTCommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "p_FTMatchOption"


	public static class p_FTCaseOption_return extends ParserRuleReturnScope {
		XQDTCommonTree tree;
		@Override
		public XQDTCommonTree getTree() { return tree; }
	};


	// $ANTLR start "p_FTCaseOption"
	// XQueryParser.g:1692:1: p_FTCaseOption : ( (k+= CASE k+= INSENSITIVE ) | (k+= CASE k+= SENSITIVE ) |k+= LOWERCASE |k+= UPPERCASE ) ;
	public final XQueryParser.p_FTCaseOption_return p_FTCaseOption() throws RecognitionException {
		XQueryParser.p_FTCaseOption_return retval = new XQueryParser.p_FTCaseOption_return();
		retval.start = input.LT(1);

		XQDTCommonTree root_0 = null;

		CommonToken k=null;
		List<Object> list_k=null;

		XQDTCommonTree k_tree=null;

		try {
			// XQueryParser.g:1693:9: ( ( (k+= CASE k+= INSENSITIVE ) | (k+= CASE k+= SENSITIVE ) |k+= LOWERCASE |k+= UPPERCASE ) )
			// XQueryParser.g:1693:11: ( (k+= CASE k+= INSENSITIVE ) | (k+= CASE k+= SENSITIVE ) |k+= LOWERCASE |k+= UPPERCASE )
			{
			root_0 = (XQDTCommonTree)adaptor.nil();


			// XQueryParser.g:1693:11: ( (k+= CASE k+= INSENSITIVE ) | (k+= CASE k+= SENSITIVE ) |k+= LOWERCASE |k+= UPPERCASE )
			int alt219=4;
			switch ( input.LA(1) ) {
			case CASE:
				{
				int LA219_1 = input.LA(2);
				if ( (LA219_1==INSENSITIVE) ) {
					alt219=1;
				}
				else if ( (LA219_1==SENSITIVE) ) {
					alt219=2;
				}

				else {
					if (state.backtracking>0) {state.failed=true; return retval;}
					int nvaeMark = input.mark();
					try {
						input.consume();
						NoViableAltException nvae =
							new NoViableAltException("", 219, 1, input);
						throw nvae;
					} finally {
						input.rewind(nvaeMark);
					}
				}

				}
				break;
			case LOWERCASE:
				{
				alt219=3;
				}
				break;
			case UPPERCASE:
				{
				alt219=4;
				}
				break;
			default:
				if (state.backtracking>0) {state.failed=true; return retval;}
				NoViableAltException nvae =
					new NoViableAltException("", 219, 0, input);
				throw nvae;
			}
			switch (alt219) {
				case 1 :
					// XQueryParser.g:1693:13: (k+= CASE k+= INSENSITIVE )
					{
					// XQueryParser.g:1693:13: (k+= CASE k+= INSENSITIVE )
					// XQueryParser.g:1693:14: k+= CASE k+= INSENSITIVE
					{
					k=(CommonToken)match(input,CASE,FOLLOW_CASE_in_p_FTCaseOption14931); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					k_tree = (XQDTCommonTree)adaptor.create(k);
					adaptor.addChild(root_0, k_tree);
					}

					if (list_k==null) list_k=new ArrayList<Object>();
					list_k.add(k);
					k=(CommonToken)match(input,INSENSITIVE,FOLLOW_INSENSITIVE_in_p_FTCaseOption14935); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					k_tree = (XQDTCommonTree)adaptor.create(k);
					adaptor.addChild(root_0, k_tree);
					}

					if (list_k==null) list_k=new ArrayList<Object>();
					list_k.add(k);
					}

					}
					break;
				case 2 :
					// XQueryParser.g:1694:13: (k+= CASE k+= SENSITIVE )
					{
					// XQueryParser.g:1694:13: (k+= CASE k+= SENSITIVE )
					// XQueryParser.g:1694:14: k+= CASE k+= SENSITIVE
					{
					k=(CommonToken)match(input,CASE,FOLLOW_CASE_in_p_FTCaseOption14953); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					k_tree = (XQDTCommonTree)adaptor.create(k);
					adaptor.addChild(root_0, k_tree);
					}

					if (list_k==null) list_k=new ArrayList<Object>();
					list_k.add(k);
					k=(CommonToken)match(input,SENSITIVE,FOLLOW_SENSITIVE_in_p_FTCaseOption14957); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					k_tree = (XQDTCommonTree)adaptor.create(k);
					adaptor.addChild(root_0, k_tree);
					}

					if (list_k==null) list_k=new ArrayList<Object>();
					list_k.add(k);
					}

					}
					break;
				case 3 :
					// XQueryParser.g:1695:13: k+= LOWERCASE
					{
					k=(CommonToken)match(input,LOWERCASE,FOLLOW_LOWERCASE_in_p_FTCaseOption14974); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					k_tree = (XQDTCommonTree)adaptor.create(k);
					adaptor.addChild(root_0, k_tree);
					}

					if (list_k==null) list_k=new ArrayList<Object>();
					list_k.add(k);
					}
					break;
				case 4 :
					// XQueryParser.g:1696:13: k+= UPPERCASE
					{
					k=(CommonToken)match(input,UPPERCASE,FOLLOW_UPPERCASE_in_p_FTCaseOption14990); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					k_tree = (XQDTCommonTree)adaptor.create(k);
					adaptor.addChild(root_0, k_tree);
					}

					if (list_k==null) list_k=new ArrayList<Object>();
					list_k.add(k);
					}
					break;

			}

			if ( state.backtracking==0 ) {ak(list_k);}
			}

			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (XQDTCommonTree)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
			retval.tree = (XQDTCommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "p_FTCaseOption"


	public static class p_FTDiacriticsOption_return extends ParserRuleReturnScope {
		XQDTCommonTree tree;
		@Override
		public XQDTCommonTree getTree() { return tree; }
	};


	// $ANTLR start "p_FTDiacriticsOption"
	// XQueryParser.g:1700:1: p_FTDiacriticsOption : ( (k+= DIACRITICS k+= INSENSITIVE ) | (k+= DIACRITICS k+= SENSITIVE ) ) ;
	public final XQueryParser.p_FTDiacriticsOption_return p_FTDiacriticsOption() throws RecognitionException {
		XQueryParser.p_FTDiacriticsOption_return retval = new XQueryParser.p_FTDiacriticsOption_return();
		retval.start = input.LT(1);

		XQDTCommonTree root_0 = null;

		CommonToken k=null;
		List<Object> list_k=null;

		XQDTCommonTree k_tree=null;

		try {
			// XQueryParser.g:1701:9: ( ( (k+= DIACRITICS k+= INSENSITIVE ) | (k+= DIACRITICS k+= SENSITIVE ) ) )
			// XQueryParser.g:1701:11: ( (k+= DIACRITICS k+= INSENSITIVE ) | (k+= DIACRITICS k+= SENSITIVE ) )
			{
			root_0 = (XQDTCommonTree)adaptor.nil();


			// XQueryParser.g:1701:11: ( (k+= DIACRITICS k+= INSENSITIVE ) | (k+= DIACRITICS k+= SENSITIVE ) )
			int alt220=2;
			int LA220_0 = input.LA(1);
			if ( (LA220_0==DIACRITICS) ) {
				int LA220_1 = input.LA(2);
				if ( (LA220_1==INSENSITIVE) ) {
					alt220=1;
				}
				else if ( (LA220_1==SENSITIVE) ) {
					alt220=2;
				}

				else {
					if (state.backtracking>0) {state.failed=true; return retval;}
					int nvaeMark = input.mark();
					try {
						input.consume();
						NoViableAltException nvae =
							new NoViableAltException("", 220, 1, input);
						throw nvae;
					} finally {
						input.rewind(nvaeMark);
					}
				}

			}

			else {
				if (state.backtracking>0) {state.failed=true; return retval;}
				NoViableAltException nvae =
					new NoViableAltException("", 220, 0, input);
				throw nvae;
			}

			switch (alt220) {
				case 1 :
					// XQueryParser.g:1701:13: (k+= DIACRITICS k+= INSENSITIVE )
					{
					// XQueryParser.g:1701:13: (k+= DIACRITICS k+= INSENSITIVE )
					// XQueryParser.g:1701:14: k+= DIACRITICS k+= INSENSITIVE
					{
					k=(CommonToken)match(input,DIACRITICS,FOLLOW_DIACRITICS_in_p_FTDiacriticsOption15025); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					k_tree = (XQDTCommonTree)adaptor.create(k);
					adaptor.addChild(root_0, k_tree);
					}

					if (list_k==null) list_k=new ArrayList<Object>();
					list_k.add(k);
					k=(CommonToken)match(input,INSENSITIVE,FOLLOW_INSENSITIVE_in_p_FTDiacriticsOption15029); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					k_tree = (XQDTCommonTree)adaptor.create(k);
					adaptor.addChild(root_0, k_tree);
					}

					if (list_k==null) list_k=new ArrayList<Object>();
					list_k.add(k);
					}

					}
					break;
				case 2 :
					// XQueryParser.g:1702:13: (k+= DIACRITICS k+= SENSITIVE )
					{
					// XQueryParser.g:1702:13: (k+= DIACRITICS k+= SENSITIVE )
					// XQueryParser.g:1702:14: k+= DIACRITICS k+= SENSITIVE
					{
					k=(CommonToken)match(input,DIACRITICS,FOLLOW_DIACRITICS_in_p_FTDiacriticsOption15047); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					k_tree = (XQDTCommonTree)adaptor.create(k);
					adaptor.addChild(root_0, k_tree);
					}

					if (list_k==null) list_k=new ArrayList<Object>();
					list_k.add(k);
					k=(CommonToken)match(input,SENSITIVE,FOLLOW_SENSITIVE_in_p_FTDiacriticsOption15051); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					k_tree = (XQDTCommonTree)adaptor.create(k);
					adaptor.addChild(root_0, k_tree);
					}

					if (list_k==null) list_k=new ArrayList<Object>();
					list_k.add(k);
					}

					}
					break;

			}

			if ( state.backtracking==0 ) {ak(list_k);}
			}

			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (XQDTCommonTree)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
			retval.tree = (XQDTCommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "p_FTDiacriticsOption"


	public static class p_FTStemOption_return extends ParserRuleReturnScope {
		XQDTCommonTree tree;
		@Override
		public XQDTCommonTree getTree() { return tree; }
	};


	// $ANTLR start "p_FTStemOption"
	// XQueryParser.g:1706:1: p_FTStemOption : (k+= STEMMING | (k+= NO k+= STEMMING ) ) ;
	public final XQueryParser.p_FTStemOption_return p_FTStemOption() throws RecognitionException {
		XQueryParser.p_FTStemOption_return retval = new XQueryParser.p_FTStemOption_return();
		retval.start = input.LT(1);

		XQDTCommonTree root_0 = null;

		CommonToken k=null;
		List<Object> list_k=null;

		XQDTCommonTree k_tree=null;

		try {
			// XQueryParser.g:1707:9: ( (k+= STEMMING | (k+= NO k+= STEMMING ) ) )
			// XQueryParser.g:1707:11: (k+= STEMMING | (k+= NO k+= STEMMING ) )
			{
			root_0 = (XQDTCommonTree)adaptor.nil();


			// XQueryParser.g:1707:11: (k+= STEMMING | (k+= NO k+= STEMMING ) )
			int alt221=2;
			int LA221_0 = input.LA(1);
			if ( (LA221_0==STEMMING) ) {
				alt221=1;
			}
			else if ( (LA221_0==NO) ) {
				alt221=2;
			}

			else {
				if (state.backtracking>0) {state.failed=true; return retval;}
				NoViableAltException nvae =
					new NoViableAltException("", 221, 0, input);
				throw nvae;
			}

			switch (alt221) {
				case 1 :
					// XQueryParser.g:1707:13: k+= STEMMING
					{
					k=(CommonToken)match(input,STEMMING,FOLLOW_STEMMING_in_p_FTStemOption15086); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					k_tree = (XQDTCommonTree)adaptor.create(k);
					adaptor.addChild(root_0, k_tree);
					}

					if (list_k==null) list_k=new ArrayList<Object>();
					list_k.add(k);
					}
					break;
				case 2 :
					// XQueryParser.g:1707:27: (k+= NO k+= STEMMING )
					{
					// XQueryParser.g:1707:27: (k+= NO k+= STEMMING )
					// XQueryParser.g:1707:28: k+= NO k+= STEMMING
					{
					k=(CommonToken)match(input,NO,FOLLOW_NO_in_p_FTStemOption15093); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					k_tree = (XQDTCommonTree)adaptor.create(k);
					adaptor.addChild(root_0, k_tree);
					}

					if (list_k==null) list_k=new ArrayList<Object>();
					list_k.add(k);
					k=(CommonToken)match(input,STEMMING,FOLLOW_STEMMING_in_p_FTStemOption15097); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					k_tree = (XQDTCommonTree)adaptor.create(k);
					adaptor.addChild(root_0, k_tree);
					}

					if (list_k==null) list_k=new ArrayList<Object>();
					list_k.add(k);
					}

					}
					break;

			}

			if ( state.backtracking==0 ) {ak(list_k);}
			}

			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (XQDTCommonTree)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
			retval.tree = (XQDTCommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "p_FTStemOption"


	public static class p_FTThesaurusOption_return extends ParserRuleReturnScope {
		XQDTCommonTree tree;
		@Override
		public XQDTCommonTree getTree() { return tree; }
	};


	// $ANTLR start "p_FTThesaurusOption"
	// XQueryParser.g:1711:1: p_FTThesaurusOption : ( (k+= THESAURUS ( p_FTThesaurusID |k+= DEFAULT ) ) | (k+= THESAURUS LPAREN ( p_FTThesaurusID |k+= DEFAULT ) ( COMMA p_FTThesaurusID )* RPAREN ) | (k+= NO k+= THESAURUS ) ) ;
	public final XQueryParser.p_FTThesaurusOption_return p_FTThesaurusOption() throws RecognitionException {
		XQueryParser.p_FTThesaurusOption_return retval = new XQueryParser.p_FTThesaurusOption_return();
		retval.start = input.LT(1);

		XQDTCommonTree root_0 = null;

		CommonToken LPAREN694=null;
		CommonToken COMMA696=null;
		CommonToken RPAREN698=null;
		CommonToken k=null;
		List<Object> list_k=null;
		ParserRuleReturnScope p_FTThesaurusID693 =null;
		ParserRuleReturnScope p_FTThesaurusID695 =null;
		ParserRuleReturnScope p_FTThesaurusID697 =null;

		XQDTCommonTree LPAREN694_tree=null;
		XQDTCommonTree COMMA696_tree=null;
		XQDTCommonTree RPAREN698_tree=null;
		XQDTCommonTree k_tree=null;

		try {
			// XQueryParser.g:1712:9: ( ( (k+= THESAURUS ( p_FTThesaurusID |k+= DEFAULT ) ) | (k+= THESAURUS LPAREN ( p_FTThesaurusID |k+= DEFAULT ) ( COMMA p_FTThesaurusID )* RPAREN ) | (k+= NO k+= THESAURUS ) ) )
			// XQueryParser.g:1712:11: ( (k+= THESAURUS ( p_FTThesaurusID |k+= DEFAULT ) ) | (k+= THESAURUS LPAREN ( p_FTThesaurusID |k+= DEFAULT ) ( COMMA p_FTThesaurusID )* RPAREN ) | (k+= NO k+= THESAURUS ) )
			{
			root_0 = (XQDTCommonTree)adaptor.nil();


			// XQueryParser.g:1712:11: ( (k+= THESAURUS ( p_FTThesaurusID |k+= DEFAULT ) ) | (k+= THESAURUS LPAREN ( p_FTThesaurusID |k+= DEFAULT ) ( COMMA p_FTThesaurusID )* RPAREN ) | (k+= NO k+= THESAURUS ) )
			int alt225=3;
			int LA225_0 = input.LA(1);
			if ( (LA225_0==THESAURUS) ) {
				int LA225_1 = input.LA(2);
				if ( (LA225_1==LPAREN) ) {
					alt225=2;
				}
				else if ( (LA225_1==AT||LA225_1==DEFAULT) ) {
					alt225=1;
				}

				else {
					if (state.backtracking>0) {state.failed=true; return retval;}
					int nvaeMark = input.mark();
					try {
						input.consume();
						NoViableAltException nvae =
							new NoViableAltException("", 225, 1, input);
						throw nvae;
					} finally {
						input.rewind(nvaeMark);
					}
				}

			}
			else if ( (LA225_0==NO) ) {
				alt225=3;
			}

			else {
				if (state.backtracking>0) {state.failed=true; return retval;}
				NoViableAltException nvae =
					new NoViableAltException("", 225, 0, input);
				throw nvae;
			}

			switch (alt225) {
				case 1 :
					// XQueryParser.g:1712:13: (k+= THESAURUS ( p_FTThesaurusID |k+= DEFAULT ) )
					{
					// XQueryParser.g:1712:13: (k+= THESAURUS ( p_FTThesaurusID |k+= DEFAULT ) )
					// XQueryParser.g:1712:14: k+= THESAURUS ( p_FTThesaurusID |k+= DEFAULT )
					{
					k=(CommonToken)match(input,THESAURUS,FOLLOW_THESAURUS_in_p_FTThesaurusOption15133); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					k_tree = (XQDTCommonTree)adaptor.create(k);
					adaptor.addChild(root_0, k_tree);
					}

					if (list_k==null) list_k=new ArrayList<Object>();
					list_k.add(k);
					// XQueryParser.g:1712:27: ( p_FTThesaurusID |k+= DEFAULT )
					int alt222=2;
					int LA222_0 = input.LA(1);
					if ( (LA222_0==AT) ) {
						alt222=1;
					}
					else if ( (LA222_0==DEFAULT) ) {
						alt222=2;
					}

					else {
						if (state.backtracking>0) {state.failed=true; return retval;}
						NoViableAltException nvae =
							new NoViableAltException("", 222, 0, input);
						throw nvae;
					}

					switch (alt222) {
						case 1 :
							// XQueryParser.g:1712:28: p_FTThesaurusID
							{
							pushFollow(FOLLOW_p_FTThesaurusID_in_p_FTThesaurusOption15136);
							p_FTThesaurusID693=p_FTThesaurusID();
							state._fsp--;
							if (state.failed) return retval;
							if ( state.backtracking==0 ) adaptor.addChild(root_0, p_FTThesaurusID693.getTree());

							}
							break;
						case 2 :
							// XQueryParser.g:1712:46: k+= DEFAULT
							{
							k=(CommonToken)match(input,DEFAULT,FOLLOW_DEFAULT_in_p_FTThesaurusOption15142); if (state.failed) return retval;
							if ( state.backtracking==0 ) {
							k_tree = (XQDTCommonTree)adaptor.create(k);
							adaptor.addChild(root_0, k_tree);
							}

							if (list_k==null) list_k=new ArrayList<Object>();
							list_k.add(k);
							}
							break;

					}

					}

					}
					break;
				case 2 :
					// XQueryParser.g:1713:13: (k+= THESAURUS LPAREN ( p_FTThesaurusID |k+= DEFAULT ) ( COMMA p_FTThesaurusID )* RPAREN )
					{
					// XQueryParser.g:1713:13: (k+= THESAURUS LPAREN ( p_FTThesaurusID |k+= DEFAULT ) ( COMMA p_FTThesaurusID )* RPAREN )
					// XQueryParser.g:1713:14: k+= THESAURUS LPAREN ( p_FTThesaurusID |k+= DEFAULT ) ( COMMA p_FTThesaurusID )* RPAREN
					{
					k=(CommonToken)match(input,THESAURUS,FOLLOW_THESAURUS_in_p_FTThesaurusOption15161); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					k_tree = (XQDTCommonTree)adaptor.create(k);
					adaptor.addChild(root_0, k_tree);
					}

					if (list_k==null) list_k=new ArrayList<Object>();
					list_k.add(k);
					LPAREN694=(CommonToken)match(input,LPAREN,FOLLOW_LPAREN_in_p_FTThesaurusOption15163); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					LPAREN694_tree = (XQDTCommonTree)adaptor.create(LPAREN694);
					adaptor.addChild(root_0, LPAREN694_tree);
					}

					// XQueryParser.g:1713:34: ( p_FTThesaurusID |k+= DEFAULT )
					int alt223=2;
					int LA223_0 = input.LA(1);
					if ( (LA223_0==AT) ) {
						alt223=1;
					}
					else if ( (LA223_0==DEFAULT) ) {
						alt223=2;
					}

					else {
						if (state.backtracking>0) {state.failed=true; return retval;}
						NoViableAltException nvae =
							new NoViableAltException("", 223, 0, input);
						throw nvae;
					}

					switch (alt223) {
						case 1 :
							// XQueryParser.g:1713:35: p_FTThesaurusID
							{
							pushFollow(FOLLOW_p_FTThesaurusID_in_p_FTThesaurusOption15166);
							p_FTThesaurusID695=p_FTThesaurusID();
							state._fsp--;
							if (state.failed) return retval;
							if ( state.backtracking==0 ) adaptor.addChild(root_0, p_FTThesaurusID695.getTree());

							}
							break;
						case 2 :
							// XQueryParser.g:1713:53: k+= DEFAULT
							{
							k=(CommonToken)match(input,DEFAULT,FOLLOW_DEFAULT_in_p_FTThesaurusOption15172); if (state.failed) return retval;
							if ( state.backtracking==0 ) {
							k_tree = (XQDTCommonTree)adaptor.create(k);
							adaptor.addChild(root_0, k_tree);
							}

							if (list_k==null) list_k=new ArrayList<Object>();
							list_k.add(k);
							}
							break;

					}

					// XQueryParser.g:1713:65: ( COMMA p_FTThesaurusID )*
					loop224:
					while (true) {
						int alt224=2;
						int LA224_0 = input.LA(1);
						if ( (LA224_0==COMMA) ) {
							alt224=1;
						}

						switch (alt224) {
						case 1 :
							// XQueryParser.g:1713:66: COMMA p_FTThesaurusID
							{
							COMMA696=(CommonToken)match(input,COMMA,FOLLOW_COMMA_in_p_FTThesaurusOption15176); if (state.failed) return retval;
							if ( state.backtracking==0 ) {
							COMMA696_tree = (XQDTCommonTree)adaptor.create(COMMA696);
							adaptor.addChild(root_0, COMMA696_tree);
							}

							pushFollow(FOLLOW_p_FTThesaurusID_in_p_FTThesaurusOption15178);
							p_FTThesaurusID697=p_FTThesaurusID();
							state._fsp--;
							if (state.failed) return retval;
							if ( state.backtracking==0 ) adaptor.addChild(root_0, p_FTThesaurusID697.getTree());

							}
							break;

						default :
							break loop224;
						}
					}

					RPAREN698=(CommonToken)match(input,RPAREN,FOLLOW_RPAREN_in_p_FTThesaurusOption15182); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					RPAREN698_tree = (XQDTCommonTree)adaptor.create(RPAREN698);
					adaptor.addChild(root_0, RPAREN698_tree);
					}

					}

					}
					break;
				case 3 :
					// XQueryParser.g:1714:13: (k+= NO k+= THESAURUS )
					{
					// XQueryParser.g:1714:13: (k+= NO k+= THESAURUS )
					// XQueryParser.g:1714:14: k+= NO k+= THESAURUS
					{
					k=(CommonToken)match(input,NO,FOLLOW_NO_in_p_FTThesaurusOption15200); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					k_tree = (XQDTCommonTree)adaptor.create(k);
					adaptor.addChild(root_0, k_tree);
					}

					if (list_k==null) list_k=new ArrayList<Object>();
					list_k.add(k);
					k=(CommonToken)match(input,THESAURUS,FOLLOW_THESAURUS_in_p_FTThesaurusOption15204); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					k_tree = (XQDTCommonTree)adaptor.create(k);
					adaptor.addChild(root_0, k_tree);
					}

					if (list_k==null) list_k=new ArrayList<Object>();
					list_k.add(k);
					}

					}
					break;

			}

			if ( state.backtracking==0 ) {ak(list_k);}
			}

			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (XQDTCommonTree)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
			retval.tree = (XQDTCommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "p_FTThesaurusOption"


	public static class p_FTThesaurusID_return extends ParserRuleReturnScope {
		XQDTCommonTree tree;
		@Override
		public XQDTCommonTree getTree() { return tree; }
	};


	// $ANTLR start "p_FTThesaurusID"
	// XQueryParser.g:1718:1: p_FTThesaurusID :k+= AT p_StringLiteral (k+= RELATIONSHIP p_StringLiteral )? ( p_FTLiteralRange k+= LEVELS )? ;
	public final XQueryParser.p_FTThesaurusID_return p_FTThesaurusID() throws RecognitionException {
		XQueryParser.p_FTThesaurusID_return retval = new XQueryParser.p_FTThesaurusID_return();
		retval.start = input.LT(1);

		XQDTCommonTree root_0 = null;

		CommonToken k=null;
		List<Object> list_k=null;
		ParserRuleReturnScope p_StringLiteral699 =null;
		ParserRuleReturnScope p_StringLiteral700 =null;
		ParserRuleReturnScope p_FTLiteralRange701 =null;

		XQDTCommonTree k_tree=null;

		try {
			// XQueryParser.g:1719:9: (k+= AT p_StringLiteral (k+= RELATIONSHIP p_StringLiteral )? ( p_FTLiteralRange k+= LEVELS )? )
			// XQueryParser.g:1719:11: k+= AT p_StringLiteral (k+= RELATIONSHIP p_StringLiteral )? ( p_FTLiteralRange k+= LEVELS )?
			{
			root_0 = (XQDTCommonTree)adaptor.nil();


			k=(CommonToken)match(input,AT,FOLLOW_AT_in_p_FTThesaurusID15237); if (state.failed) return retval;
			if ( state.backtracking==0 ) {
			k_tree = (XQDTCommonTree)adaptor.create(k);
			adaptor.addChild(root_0, k_tree);
			}

			if (list_k==null) list_k=new ArrayList<Object>();
			list_k.add(k);
			pushFollow(FOLLOW_p_StringLiteral_in_p_FTThesaurusID15239);
			p_StringLiteral699=p_StringLiteral();
			state._fsp--;
			if (state.failed) return retval;
			if ( state.backtracking==0 ) adaptor.addChild(root_0, p_StringLiteral699.getTree());

			// XQueryParser.g:1719:33: (k+= RELATIONSHIP p_StringLiteral )?
			int alt226=2;
			int LA226_0 = input.LA(1);
			if ( (LA226_0==RELATIONSHIP) ) {
				alt226=1;
			}
			switch (alt226) {
				case 1 :
					// XQueryParser.g:1719:34: k+= RELATIONSHIP p_StringLiteral
					{
					k=(CommonToken)match(input,RELATIONSHIP,FOLLOW_RELATIONSHIP_in_p_FTThesaurusID15244); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					k_tree = (XQDTCommonTree)adaptor.create(k);
					adaptor.addChild(root_0, k_tree);
					}

					if (list_k==null) list_k=new ArrayList<Object>();
					list_k.add(k);
					pushFollow(FOLLOW_p_StringLiteral_in_p_FTThesaurusID15246);
					p_StringLiteral700=p_StringLiteral();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, p_StringLiteral700.getTree());

					}
					break;

			}

			// XQueryParser.g:1719:68: ( p_FTLiteralRange k+= LEVELS )?
			int alt227=2;
			int LA227_0 = input.LA(1);
			if ( (LA227_0==EXACTLY||LA227_0==FROM) ) {
				alt227=1;
			}
			else if ( (LA227_0==AT) ) {
				int LA227_2 = input.LA(2);
				if ( (LA227_2==LEAST||LA227_2==MOST) ) {
					alt227=1;
				}
			}
			switch (alt227) {
				case 1 :
					// XQueryParser.g:1719:69: p_FTLiteralRange k+= LEVELS
					{
					pushFollow(FOLLOW_p_FTLiteralRange_in_p_FTThesaurusID15251);
					p_FTLiteralRange701=p_FTLiteralRange();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, p_FTLiteralRange701.getTree());

					k=(CommonToken)match(input,LEVELS,FOLLOW_LEVELS_in_p_FTThesaurusID15255); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					k_tree = (XQDTCommonTree)adaptor.create(k);
					adaptor.addChild(root_0, k_tree);
					}

					if (list_k==null) list_k=new ArrayList<Object>();
					list_k.add(k);
					}
					break;

			}

			if ( state.backtracking==0 ) {ak(list_k);}
			}

			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (XQDTCommonTree)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
			retval.tree = (XQDTCommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "p_FTThesaurusID"


	public static class p_FTLiteralRange_return extends ParserRuleReturnScope {
		XQDTCommonTree tree;
		@Override
		public XQDTCommonTree getTree() { return tree; }
	};


	// $ANTLR start "p_FTLiteralRange"
	// XQueryParser.g:1723:1: p_FTLiteralRange : ( (k+= EXACTLY L_IntegerLiteral ) | (k+= AT k+= LEAST L_IntegerLiteral ) | (k+= AT k+= MOST L_IntegerLiteral ) | (k+= FROM L_IntegerLiteral TO L_IntegerLiteral ) ) ;
	public final XQueryParser.p_FTLiteralRange_return p_FTLiteralRange() throws RecognitionException {
		XQueryParser.p_FTLiteralRange_return retval = new XQueryParser.p_FTLiteralRange_return();
		retval.start = input.LT(1);

		XQDTCommonTree root_0 = null;

		CommonToken L_IntegerLiteral702=null;
		CommonToken L_IntegerLiteral703=null;
		CommonToken L_IntegerLiteral704=null;
		CommonToken L_IntegerLiteral705=null;
		CommonToken TO706=null;
		CommonToken L_IntegerLiteral707=null;
		CommonToken k=null;
		List<Object> list_k=null;

		XQDTCommonTree L_IntegerLiteral702_tree=null;
		XQDTCommonTree L_IntegerLiteral703_tree=null;
		XQDTCommonTree L_IntegerLiteral704_tree=null;
		XQDTCommonTree L_IntegerLiteral705_tree=null;
		XQDTCommonTree TO706_tree=null;
		XQDTCommonTree L_IntegerLiteral707_tree=null;
		XQDTCommonTree k_tree=null;

		try {
			// XQueryParser.g:1724:9: ( ( (k+= EXACTLY L_IntegerLiteral ) | (k+= AT k+= LEAST L_IntegerLiteral ) | (k+= AT k+= MOST L_IntegerLiteral ) | (k+= FROM L_IntegerLiteral TO L_IntegerLiteral ) ) )
			// XQueryParser.g:1724:11: ( (k+= EXACTLY L_IntegerLiteral ) | (k+= AT k+= LEAST L_IntegerLiteral ) | (k+= AT k+= MOST L_IntegerLiteral ) | (k+= FROM L_IntegerLiteral TO L_IntegerLiteral ) )
			{
			root_0 = (XQDTCommonTree)adaptor.nil();


			// XQueryParser.g:1724:11: ( (k+= EXACTLY L_IntegerLiteral ) | (k+= AT k+= LEAST L_IntegerLiteral ) | (k+= AT k+= MOST L_IntegerLiteral ) | (k+= FROM L_IntegerLiteral TO L_IntegerLiteral ) )
			int alt228=4;
			switch ( input.LA(1) ) {
			case EXACTLY:
				{
				alt228=1;
				}
				break;
			case AT:
				{
				int LA228_2 = input.LA(2);
				if ( (LA228_2==LEAST) ) {
					alt228=2;
				}
				else if ( (LA228_2==MOST) ) {
					alt228=3;
				}

				else {
					if (state.backtracking>0) {state.failed=true; return retval;}
					int nvaeMark = input.mark();
					try {
						input.consume();
						NoViableAltException nvae =
							new NoViableAltException("", 228, 2, input);
						throw nvae;
					} finally {
						input.rewind(nvaeMark);
					}
				}

				}
				break;
			case FROM:
				{
				alt228=4;
				}
				break;
			default:
				if (state.backtracking>0) {state.failed=true; return retval;}
				NoViableAltException nvae =
					new NoViableAltException("", 228, 0, input);
				throw nvae;
			}
			switch (alt228) {
				case 1 :
					// XQueryParser.g:1724:13: (k+= EXACTLY L_IntegerLiteral )
					{
					// XQueryParser.g:1724:13: (k+= EXACTLY L_IntegerLiteral )
					// XQueryParser.g:1724:14: k+= EXACTLY L_IntegerLiteral
					{
					k=(CommonToken)match(input,EXACTLY,FOLLOW_EXACTLY_in_p_FTLiteralRange15290); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					k_tree = (XQDTCommonTree)adaptor.create(k);
					adaptor.addChild(root_0, k_tree);
					}

					if (list_k==null) list_k=new ArrayList<Object>();
					list_k.add(k);
					L_IntegerLiteral702=(CommonToken)match(input,L_IntegerLiteral,FOLLOW_L_IntegerLiteral_in_p_FTLiteralRange15292); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					L_IntegerLiteral702_tree = (XQDTCommonTree)adaptor.create(L_IntegerLiteral702);
					adaptor.addChild(root_0, L_IntegerLiteral702_tree);
					}

					}

					}
					break;
				case 2 :
					// XQueryParser.g:1725:13: (k+= AT k+= LEAST L_IntegerLiteral )
					{
					// XQueryParser.g:1725:13: (k+= AT k+= LEAST L_IntegerLiteral )
					// XQueryParser.g:1725:14: k+= AT k+= LEAST L_IntegerLiteral
					{
					k=(CommonToken)match(input,AT,FOLLOW_AT_in_p_FTLiteralRange15310); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					k_tree = (XQDTCommonTree)adaptor.create(k);
					adaptor.addChild(root_0, k_tree);
					}

					if (list_k==null) list_k=new ArrayList<Object>();
					list_k.add(k);
					k=(CommonToken)match(input,LEAST,FOLLOW_LEAST_in_p_FTLiteralRange15314); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					k_tree = (XQDTCommonTree)adaptor.create(k);
					adaptor.addChild(root_0, k_tree);
					}

					if (list_k==null) list_k=new ArrayList<Object>();
					list_k.add(k);
					L_IntegerLiteral703=(CommonToken)match(input,L_IntegerLiteral,FOLLOW_L_IntegerLiteral_in_p_FTLiteralRange15316); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					L_IntegerLiteral703_tree = (XQDTCommonTree)adaptor.create(L_IntegerLiteral703);
					adaptor.addChild(root_0, L_IntegerLiteral703_tree);
					}

					}

					}
					break;
				case 3 :
					// XQueryParser.g:1726:13: (k+= AT k+= MOST L_IntegerLiteral )
					{
					// XQueryParser.g:1726:13: (k+= AT k+= MOST L_IntegerLiteral )
					// XQueryParser.g:1726:14: k+= AT k+= MOST L_IntegerLiteral
					{
					k=(CommonToken)match(input,AT,FOLLOW_AT_in_p_FTLiteralRange15334); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					k_tree = (XQDTCommonTree)adaptor.create(k);
					adaptor.addChild(root_0, k_tree);
					}

					if (list_k==null) list_k=new ArrayList<Object>();
					list_k.add(k);
					k=(CommonToken)match(input,MOST,FOLLOW_MOST_in_p_FTLiteralRange15338); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					k_tree = (XQDTCommonTree)adaptor.create(k);
					adaptor.addChild(root_0, k_tree);
					}

					if (list_k==null) list_k=new ArrayList<Object>();
					list_k.add(k);
					L_IntegerLiteral704=(CommonToken)match(input,L_IntegerLiteral,FOLLOW_L_IntegerLiteral_in_p_FTLiteralRange15340); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					L_IntegerLiteral704_tree = (XQDTCommonTree)adaptor.create(L_IntegerLiteral704);
					adaptor.addChild(root_0, L_IntegerLiteral704_tree);
					}

					}

					}
					break;
				case 4 :
					// XQueryParser.g:1727:13: (k+= FROM L_IntegerLiteral TO L_IntegerLiteral )
					{
					// XQueryParser.g:1727:13: (k+= FROM L_IntegerLiteral TO L_IntegerLiteral )
					// XQueryParser.g:1727:14: k+= FROM L_IntegerLiteral TO L_IntegerLiteral
					{
					k=(CommonToken)match(input,FROM,FOLLOW_FROM_in_p_FTLiteralRange15358); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					k_tree = (XQDTCommonTree)adaptor.create(k);
					adaptor.addChild(root_0, k_tree);
					}

					if (list_k==null) list_k=new ArrayList<Object>();
					list_k.add(k);
					L_IntegerLiteral705=(CommonToken)match(input,L_IntegerLiteral,FOLLOW_L_IntegerLiteral_in_p_FTLiteralRange15360); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					L_IntegerLiteral705_tree = (XQDTCommonTree)adaptor.create(L_IntegerLiteral705);
					adaptor.addChild(root_0, L_IntegerLiteral705_tree);
					}

					TO706=(CommonToken)match(input,TO,FOLLOW_TO_in_p_FTLiteralRange15362); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					TO706_tree = (XQDTCommonTree)adaptor.create(TO706);
					adaptor.addChild(root_0, TO706_tree);
					}

					L_IntegerLiteral707=(CommonToken)match(input,L_IntegerLiteral,FOLLOW_L_IntegerLiteral_in_p_FTLiteralRange15364); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					L_IntegerLiteral707_tree = (XQDTCommonTree)adaptor.create(L_IntegerLiteral707);
					adaptor.addChild(root_0, L_IntegerLiteral707_tree);
					}

					}

					}
					break;

			}

			if ( state.backtracking==0 ) {ak(list_k);}
			}

			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (XQDTCommonTree)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
			retval.tree = (XQDTCommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "p_FTLiteralRange"


	public static class p_FTStopWordOption_return extends ParserRuleReturnScope {
		XQDTCommonTree tree;
		@Override
		public XQDTCommonTree getTree() { return tree; }
	};


	// $ANTLR start "p_FTStopWordOption"
	// XQueryParser.g:1731:1: p_FTStopWordOption : ( (k+= STOP k+= WORDS p_FTStopWords ( p_FTStopWordsInclExcl )* ) | (k+= STOP k+= WORDS k+= DEFAULT ( p_FTStopWordsInclExcl )* ) | (k+= NO k+= STOP k+= WORDS ) ) ;
	public final XQueryParser.p_FTStopWordOption_return p_FTStopWordOption() throws RecognitionException {
		XQueryParser.p_FTStopWordOption_return retval = new XQueryParser.p_FTStopWordOption_return();
		retval.start = input.LT(1);

		XQDTCommonTree root_0 = null;

		CommonToken k=null;
		List<Object> list_k=null;
		ParserRuleReturnScope p_FTStopWords708 =null;
		ParserRuleReturnScope p_FTStopWordsInclExcl709 =null;
		ParserRuleReturnScope p_FTStopWordsInclExcl710 =null;

		XQDTCommonTree k_tree=null;

		try {
			// XQueryParser.g:1732:9: ( ( (k+= STOP k+= WORDS p_FTStopWords ( p_FTStopWordsInclExcl )* ) | (k+= STOP k+= WORDS k+= DEFAULT ( p_FTStopWordsInclExcl )* ) | (k+= NO k+= STOP k+= WORDS ) ) )
			// XQueryParser.g:1732:11: ( (k+= STOP k+= WORDS p_FTStopWords ( p_FTStopWordsInclExcl )* ) | (k+= STOP k+= WORDS k+= DEFAULT ( p_FTStopWordsInclExcl )* ) | (k+= NO k+= STOP k+= WORDS ) )
			{
			root_0 = (XQDTCommonTree)adaptor.nil();


			// XQueryParser.g:1732:11: ( (k+= STOP k+= WORDS p_FTStopWords ( p_FTStopWordsInclExcl )* ) | (k+= STOP k+= WORDS k+= DEFAULT ( p_FTStopWordsInclExcl )* ) | (k+= NO k+= STOP k+= WORDS ) )
			int alt231=3;
			int LA231_0 = input.LA(1);
			if ( (LA231_0==STOP) ) {
				int LA231_1 = input.LA(2);
				if ( (LA231_1==WORDS) ) {
					int LA231_3 = input.LA(3);
					if ( (LA231_3==DEFAULT) ) {
						alt231=2;
					}
					else if ( (LA231_3==AT||LA231_3==LPAREN) ) {
						alt231=1;
					}

					else {
						if (state.backtracking>0) {state.failed=true; return retval;}
						int nvaeMark = input.mark();
						try {
							for (int nvaeConsume = 0; nvaeConsume < 3 - 1; nvaeConsume++) {
								input.consume();
							}
							NoViableAltException nvae =
								new NoViableAltException("", 231, 3, input);
							throw nvae;
						} finally {
							input.rewind(nvaeMark);
						}
					}

				}

				else {
					if (state.backtracking>0) {state.failed=true; return retval;}
					int nvaeMark = input.mark();
					try {
						input.consume();
						NoViableAltException nvae =
							new NoViableAltException("", 231, 1, input);
						throw nvae;
					} finally {
						input.rewind(nvaeMark);
					}
				}

			}
			else if ( (LA231_0==NO) ) {
				alt231=3;
			}

			else {
				if (state.backtracking>0) {state.failed=true; return retval;}
				NoViableAltException nvae =
					new NoViableAltException("", 231, 0, input);
				throw nvae;
			}

			switch (alt231) {
				case 1 :
					// XQueryParser.g:1732:13: (k+= STOP k+= WORDS p_FTStopWords ( p_FTStopWordsInclExcl )* )
					{
					// XQueryParser.g:1732:13: (k+= STOP k+= WORDS p_FTStopWords ( p_FTStopWordsInclExcl )* )
					// XQueryParser.g:1732:14: k+= STOP k+= WORDS p_FTStopWords ( p_FTStopWordsInclExcl )*
					{
					k=(CommonToken)match(input,STOP,FOLLOW_STOP_in_p_FTStopWordOption15400); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					k_tree = (XQDTCommonTree)adaptor.create(k);
					adaptor.addChild(root_0, k_tree);
					}

					if (list_k==null) list_k=new ArrayList<Object>();
					list_k.add(k);
					k=(CommonToken)match(input,WORDS,FOLLOW_WORDS_in_p_FTStopWordOption15404); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					k_tree = (XQDTCommonTree)adaptor.create(k);
					adaptor.addChild(root_0, k_tree);
					}

					if (list_k==null) list_k=new ArrayList<Object>();
					list_k.add(k);
					pushFollow(FOLLOW_p_FTStopWords_in_p_FTStopWordOption15406);
					p_FTStopWords708=p_FTStopWords();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, p_FTStopWords708.getTree());

					// XQueryParser.g:1732:45: ( p_FTStopWordsInclExcl )*
					loop229:
					while (true) {
						int alt229=2;
						int LA229_0 = input.LA(1);
						if ( (LA229_0==EXCEPT||LA229_0==UNION) ) {
							alt229=1;
						}

						switch (alt229) {
						case 1 :
							// XQueryParser.g:1732:45: p_FTStopWordsInclExcl
							{
							pushFollow(FOLLOW_p_FTStopWordsInclExcl_in_p_FTStopWordOption15408);
							p_FTStopWordsInclExcl709=p_FTStopWordsInclExcl();
							state._fsp--;
							if (state.failed) return retval;
							if ( state.backtracking==0 ) adaptor.addChild(root_0, p_FTStopWordsInclExcl709.getTree());

							}
							break;

						default :
							break loop229;
						}
					}

					}

					}
					break;
				case 2 :
					// XQueryParser.g:1733:13: (k+= STOP k+= WORDS k+= DEFAULT ( p_FTStopWordsInclExcl )* )
					{
					// XQueryParser.g:1733:13: (k+= STOP k+= WORDS k+= DEFAULT ( p_FTStopWordsInclExcl )* )
					// XQueryParser.g:1733:14: k+= STOP k+= WORDS k+= DEFAULT ( p_FTStopWordsInclExcl )*
					{
					k=(CommonToken)match(input,STOP,FOLLOW_STOP_in_p_FTStopWordOption15427); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					k_tree = (XQDTCommonTree)adaptor.create(k);
					adaptor.addChild(root_0, k_tree);
					}

					if (list_k==null) list_k=new ArrayList<Object>();
					list_k.add(k);
					k=(CommonToken)match(input,WORDS,FOLLOW_WORDS_in_p_FTStopWordOption15431); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					k_tree = (XQDTCommonTree)adaptor.create(k);
					adaptor.addChild(root_0, k_tree);
					}

					if (list_k==null) list_k=new ArrayList<Object>();
					list_k.add(k);
					k=(CommonToken)match(input,DEFAULT,FOLLOW_DEFAULT_in_p_FTStopWordOption15435); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					k_tree = (XQDTCommonTree)adaptor.create(k);
					adaptor.addChild(root_0, k_tree);
					}

					if (list_k==null) list_k=new ArrayList<Object>();
					list_k.add(k);
					// XQueryParser.g:1733:42: ( p_FTStopWordsInclExcl )*
					loop230:
					while (true) {
						int alt230=2;
						int LA230_0 = input.LA(1);
						if ( (LA230_0==EXCEPT||LA230_0==UNION) ) {
							alt230=1;
						}

						switch (alt230) {
						case 1 :
							// XQueryParser.g:1733:42: p_FTStopWordsInclExcl
							{
							pushFollow(FOLLOW_p_FTStopWordsInclExcl_in_p_FTStopWordOption15437);
							p_FTStopWordsInclExcl710=p_FTStopWordsInclExcl();
							state._fsp--;
							if (state.failed) return retval;
							if ( state.backtracking==0 ) adaptor.addChild(root_0, p_FTStopWordsInclExcl710.getTree());

							}
							break;

						default :
							break loop230;
						}
					}

					}

					}
					break;
				case 3 :
					// XQueryParser.g:1734:13: (k+= NO k+= STOP k+= WORDS )
					{
					// XQueryParser.g:1734:13: (k+= NO k+= STOP k+= WORDS )
					// XQueryParser.g:1734:14: k+= NO k+= STOP k+= WORDS
					{
					k=(CommonToken)match(input,NO,FOLLOW_NO_in_p_FTStopWordOption15456); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					k_tree = (XQDTCommonTree)adaptor.create(k);
					adaptor.addChild(root_0, k_tree);
					}

					if (list_k==null) list_k=new ArrayList<Object>();
					list_k.add(k);
					k=(CommonToken)match(input,STOP,FOLLOW_STOP_in_p_FTStopWordOption15460); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					k_tree = (XQDTCommonTree)adaptor.create(k);
					adaptor.addChild(root_0, k_tree);
					}

					if (list_k==null) list_k=new ArrayList<Object>();
					list_k.add(k);
					k=(CommonToken)match(input,WORDS,FOLLOW_WORDS_in_p_FTStopWordOption15464); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					k_tree = (XQDTCommonTree)adaptor.create(k);
					adaptor.addChild(root_0, k_tree);
					}

					if (list_k==null) list_k=new ArrayList<Object>();
					list_k.add(k);
					}

					}
					break;

			}

			if ( state.backtracking==0 ) {ak(list_k);}
			}

			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (XQDTCommonTree)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
			retval.tree = (XQDTCommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "p_FTStopWordOption"


	public static class p_FTStopWords_return extends ParserRuleReturnScope {
		XQDTCommonTree tree;
		@Override
		public XQDTCommonTree getTree() { return tree; }
	};


	// $ANTLR start "p_FTStopWords"
	// XQueryParser.g:1738:1: p_FTStopWords : ( (ka= AT p_StringLiteral ) | ( LPAREN p_StringLiteral ( COMMA p_StringLiteral )* RPAREN ) );
	public final XQueryParser.p_FTStopWords_return p_FTStopWords() throws RecognitionException {
		XQueryParser.p_FTStopWords_return retval = new XQueryParser.p_FTStopWords_return();
		retval.start = input.LT(1);

		XQDTCommonTree root_0 = null;

		CommonToken ka=null;
		CommonToken LPAREN712=null;
		CommonToken COMMA714=null;
		CommonToken RPAREN716=null;
		ParserRuleReturnScope p_StringLiteral711 =null;
		ParserRuleReturnScope p_StringLiteral713 =null;
		ParserRuleReturnScope p_StringLiteral715 =null;

		XQDTCommonTree ka_tree=null;
		XQDTCommonTree LPAREN712_tree=null;
		XQDTCommonTree COMMA714_tree=null;
		XQDTCommonTree RPAREN716_tree=null;

		try {
			// XQueryParser.g:1739:9: ( (ka= AT p_StringLiteral ) | ( LPAREN p_StringLiteral ( COMMA p_StringLiteral )* RPAREN ) )
			int alt233=2;
			int LA233_0 = input.LA(1);
			if ( (LA233_0==AT) ) {
				alt233=1;
			}
			else if ( (LA233_0==LPAREN) ) {
				alt233=2;
			}

			else {
				if (state.backtracking>0) {state.failed=true; return retval;}
				NoViableAltException nvae =
					new NoViableAltException("", 233, 0, input);
				throw nvae;
			}

			switch (alt233) {
				case 1 :
					// XQueryParser.g:1739:11: (ka= AT p_StringLiteral )
					{
					root_0 = (XQDTCommonTree)adaptor.nil();


					// XQueryParser.g:1739:11: (ka= AT p_StringLiteral )
					// XQueryParser.g:1739:12: ka= AT p_StringLiteral
					{
					ka=(CommonToken)match(input,AT,FOLLOW_AT_in_p_FTStopWords15498); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					ka_tree = (XQDTCommonTree)adaptor.create(ka);
					adaptor.addChild(root_0, ka_tree);
					}

					if ( state.backtracking==0 ) {ak(ka);}
					pushFollow(FOLLOW_p_StringLiteral_in_p_FTStopWords15502);
					p_StringLiteral711=p_StringLiteral();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, p_StringLiteral711.getTree());

					}

					}
					break;
				case 2 :
					// XQueryParser.g:1740:11: ( LPAREN p_StringLiteral ( COMMA p_StringLiteral )* RPAREN )
					{
					root_0 = (XQDTCommonTree)adaptor.nil();


					// XQueryParser.g:1740:11: ( LPAREN p_StringLiteral ( COMMA p_StringLiteral )* RPAREN )
					// XQueryParser.g:1740:12: LPAREN p_StringLiteral ( COMMA p_StringLiteral )* RPAREN
					{
					LPAREN712=(CommonToken)match(input,LPAREN,FOLLOW_LPAREN_in_p_FTStopWords15516); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					LPAREN712_tree = (XQDTCommonTree)adaptor.create(LPAREN712);
					adaptor.addChild(root_0, LPAREN712_tree);
					}

					pushFollow(FOLLOW_p_StringLiteral_in_p_FTStopWords15518);
					p_StringLiteral713=p_StringLiteral();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, p_StringLiteral713.getTree());

					// XQueryParser.g:1740:35: ( COMMA p_StringLiteral )*
					loop232:
					while (true) {
						int alt232=2;
						int LA232_0 = input.LA(1);
						if ( (LA232_0==COMMA) ) {
							alt232=1;
						}

						switch (alt232) {
						case 1 :
							// XQueryParser.g:1740:36: COMMA p_StringLiteral
							{
							COMMA714=(CommonToken)match(input,COMMA,FOLLOW_COMMA_in_p_FTStopWords15521); if (state.failed) return retval;
							if ( state.backtracking==0 ) {
							COMMA714_tree = (XQDTCommonTree)adaptor.create(COMMA714);
							adaptor.addChild(root_0, COMMA714_tree);
							}

							pushFollow(FOLLOW_p_StringLiteral_in_p_FTStopWords15523);
							p_StringLiteral715=p_StringLiteral();
							state._fsp--;
							if (state.failed) return retval;
							if ( state.backtracking==0 ) adaptor.addChild(root_0, p_StringLiteral715.getTree());

							}
							break;

						default :
							break loop232;
						}
					}

					RPAREN716=(CommonToken)match(input,RPAREN,FOLLOW_RPAREN_in_p_FTStopWords15527); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					RPAREN716_tree = (XQDTCommonTree)adaptor.create(RPAREN716);
					adaptor.addChild(root_0, RPAREN716_tree);
					}

					}

					}
					break;

			}
			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (XQDTCommonTree)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
			retval.tree = (XQDTCommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "p_FTStopWords"


	public static class p_FTStopWordsInclExcl_return extends ParserRuleReturnScope {
		XQDTCommonTree tree;
		@Override
		public XQDTCommonTree getTree() { return tree; }
	};


	// $ANTLR start "p_FTStopWordsInclExcl"
	// XQueryParser.g:1744:1: p_FTStopWordsInclExcl : ( (k+= UNION |k+= EXCEPT ) p_FTStopWords ) ;
	public final XQueryParser.p_FTStopWordsInclExcl_return p_FTStopWordsInclExcl() throws RecognitionException {
		XQueryParser.p_FTStopWordsInclExcl_return retval = new XQueryParser.p_FTStopWordsInclExcl_return();
		retval.start = input.LT(1);

		XQDTCommonTree root_0 = null;

		CommonToken k=null;
		List<Object> list_k=null;
		ParserRuleReturnScope p_FTStopWords717 =null;

		XQDTCommonTree k_tree=null;

		try {
			// XQueryParser.g:1745:9: ( ( (k+= UNION |k+= EXCEPT ) p_FTStopWords ) )
			// XQueryParser.g:1745:11: ( (k+= UNION |k+= EXCEPT ) p_FTStopWords )
			{
			root_0 = (XQDTCommonTree)adaptor.nil();


			// XQueryParser.g:1745:11: ( (k+= UNION |k+= EXCEPT ) p_FTStopWords )
			// XQueryParser.g:1745:13: (k+= UNION |k+= EXCEPT ) p_FTStopWords
			{
			// XQueryParser.g:1745:13: (k+= UNION |k+= EXCEPT )
			int alt234=2;
			int LA234_0 = input.LA(1);
			if ( (LA234_0==UNION) ) {
				alt234=1;
			}
			else if ( (LA234_0==EXCEPT) ) {
				alt234=2;
			}

			else {
				if (state.backtracking>0) {state.failed=true; return retval;}
				NoViableAltException nvae =
					new NoViableAltException("", 234, 0, input);
				throw nvae;
			}

			switch (alt234) {
				case 1 :
					// XQueryParser.g:1745:14: k+= UNION
					{
					k=(CommonToken)match(input,UNION,FOLLOW_UNION_in_p_FTStopWordsInclExcl15559); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					k_tree = (XQDTCommonTree)adaptor.create(k);
					adaptor.addChild(root_0, k_tree);
					}

					if (list_k==null) list_k=new ArrayList<Object>();
					list_k.add(k);
					}
					break;
				case 2 :
					// XQueryParser.g:1745:25: k+= EXCEPT
					{
					k=(CommonToken)match(input,EXCEPT,FOLLOW_EXCEPT_in_p_FTStopWordsInclExcl15565); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					k_tree = (XQDTCommonTree)adaptor.create(k);
					adaptor.addChild(root_0, k_tree);
					}

					if (list_k==null) list_k=new ArrayList<Object>();
					list_k.add(k);
					}
					break;

			}

			pushFollow(FOLLOW_p_FTStopWords_in_p_FTStopWordsInclExcl15568);
			p_FTStopWords717=p_FTStopWords();
			state._fsp--;
			if (state.failed) return retval;
			if ( state.backtracking==0 ) adaptor.addChild(root_0, p_FTStopWords717.getTree());

			}

			if ( state.backtracking==0 ) {ak(list_k);}
			}

			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (XQDTCommonTree)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
			retval.tree = (XQDTCommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "p_FTStopWordsInclExcl"


	public static class p_FTLanguageOption_return extends ParserRuleReturnScope {
		XQDTCommonTree tree;
		@Override
		public XQDTCommonTree getTree() { return tree; }
	};


	// $ANTLR start "p_FTLanguageOption"
	// XQueryParser.g:1749:1: p_FTLanguageOption : kl= LANGUAGE p_StringLiteral ;
	public final XQueryParser.p_FTLanguageOption_return p_FTLanguageOption() throws RecognitionException {
		XQueryParser.p_FTLanguageOption_return retval = new XQueryParser.p_FTLanguageOption_return();
		retval.start = input.LT(1);

		XQDTCommonTree root_0 = null;

		CommonToken kl=null;
		ParserRuleReturnScope p_StringLiteral718 =null;

		XQDTCommonTree kl_tree=null;

		try {
			// XQueryParser.g:1750:9: (kl= LANGUAGE p_StringLiteral )
			// XQueryParser.g:1750:11: kl= LANGUAGE p_StringLiteral
			{
			root_0 = (XQDTCommonTree)adaptor.nil();


			kl=(CommonToken)match(input,LANGUAGE,FOLLOW_LANGUAGE_in_p_FTLanguageOption15600); if (state.failed) return retval;
			if ( state.backtracking==0 ) {
			kl_tree = (XQDTCommonTree)adaptor.create(kl);
			adaptor.addChild(root_0, kl_tree);
			}

			if ( state.backtracking==0 ) {ak(kl);}
			pushFollow(FOLLOW_p_StringLiteral_in_p_FTLanguageOption15604);
			p_StringLiteral718=p_StringLiteral();
			state._fsp--;
			if (state.failed) return retval;
			if ( state.backtracking==0 ) adaptor.addChild(root_0, p_StringLiteral718.getTree());

			}

			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (XQDTCommonTree)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
			retval.tree = (XQDTCommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "p_FTLanguageOption"


	public static class p_FTWildCardOption_return extends ParserRuleReturnScope {
		XQDTCommonTree tree;
		@Override
		public XQDTCommonTree getTree() { return tree; }
	};


	// $ANTLR start "p_FTWildCardOption"
	// XQueryParser.g:1754:1: p_FTWildCardOption : (k+= WILDCARDS | (k+= NO k+= WILDCARDS ) ) ;
	public final XQueryParser.p_FTWildCardOption_return p_FTWildCardOption() throws RecognitionException {
		XQueryParser.p_FTWildCardOption_return retval = new XQueryParser.p_FTWildCardOption_return();
		retval.start = input.LT(1);

		XQDTCommonTree root_0 = null;

		CommonToken k=null;
		List<Object> list_k=null;

		XQDTCommonTree k_tree=null;

		try {
			// XQueryParser.g:1755:9: ( (k+= WILDCARDS | (k+= NO k+= WILDCARDS ) ) )
			// XQueryParser.g:1755:11: (k+= WILDCARDS | (k+= NO k+= WILDCARDS ) )
			{
			root_0 = (XQDTCommonTree)adaptor.nil();


			// XQueryParser.g:1755:11: (k+= WILDCARDS | (k+= NO k+= WILDCARDS ) )
			int alt235=2;
			int LA235_0 = input.LA(1);
			if ( (LA235_0==WILDCARDS) ) {
				alt235=1;
			}
			else if ( (LA235_0==NO) ) {
				alt235=2;
			}

			else {
				if (state.backtracking>0) {state.failed=true; return retval;}
				NoViableAltException nvae =
					new NoViableAltException("", 235, 0, input);
				throw nvae;
			}

			switch (alt235) {
				case 1 :
					// XQueryParser.g:1755:13: k+= WILDCARDS
					{
					k=(CommonToken)match(input,WILDCARDS,FOLLOW_WILDCARDS_in_p_FTWildCardOption15634); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					k_tree = (XQDTCommonTree)adaptor.create(k);
					adaptor.addChild(root_0, k_tree);
					}

					if (list_k==null) list_k=new ArrayList<Object>();
					list_k.add(k);
					}
					break;
				case 2 :
					// XQueryParser.g:1755:28: (k+= NO k+= WILDCARDS )
					{
					// XQueryParser.g:1755:28: (k+= NO k+= WILDCARDS )
					// XQueryParser.g:1755:29: k+= NO k+= WILDCARDS
					{
					k=(CommonToken)match(input,NO,FOLLOW_NO_in_p_FTWildCardOption15641); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					k_tree = (XQDTCommonTree)adaptor.create(k);
					adaptor.addChild(root_0, k_tree);
					}

					if (list_k==null) list_k=new ArrayList<Object>();
					list_k.add(k);
					k=(CommonToken)match(input,WILDCARDS,FOLLOW_WILDCARDS_in_p_FTWildCardOption15645); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					k_tree = (XQDTCommonTree)adaptor.create(k);
					adaptor.addChild(root_0, k_tree);
					}

					if (list_k==null) list_k=new ArrayList<Object>();
					list_k.add(k);
					}

					}
					break;

			}

			if ( state.backtracking==0 ) {ak(list_k);}
			}

			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (XQDTCommonTree)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
			retval.tree = (XQDTCommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "p_FTWildCardOption"


	public static class p_FTExtensionOption_return extends ParserRuleReturnScope {
		XQDTCommonTree tree;
		@Override
		public XQDTCommonTree getTree() { return tree; }
	};


	// $ANTLR start "p_FTExtensionOption"
	// XQueryParser.g:1759:1: p_FTExtensionOption : ko= OPTION p_QName p_StringLiteral ;
	public final XQueryParser.p_FTExtensionOption_return p_FTExtensionOption() throws RecognitionException {
		XQueryParser.p_FTExtensionOption_return retval = new XQueryParser.p_FTExtensionOption_return();
		retval.start = input.LT(1);

		XQDTCommonTree root_0 = null;

		CommonToken ko=null;
		ParserRuleReturnScope p_QName719 =null;
		ParserRuleReturnScope p_StringLiteral720 =null;

		XQDTCommonTree ko_tree=null;

		try {
			// XQueryParser.g:1760:9: (ko= OPTION p_QName p_StringLiteral )
			// XQueryParser.g:1760:11: ko= OPTION p_QName p_StringLiteral
			{
			root_0 = (XQDTCommonTree)adaptor.nil();


			ko=(CommonToken)match(input,OPTION,FOLLOW_OPTION_in_p_FTExtensionOption15678); if (state.failed) return retval;
			if ( state.backtracking==0 ) {
			ko_tree = (XQDTCommonTree)adaptor.create(ko);
			adaptor.addChild(root_0, ko_tree);
			}

			if ( state.backtracking==0 ) {ak(ko);}
			pushFollow(FOLLOW_p_QName_in_p_FTExtensionOption15682);
			p_QName719=p_QName();
			state._fsp--;
			if (state.failed) return retval;
			if ( state.backtracking==0 ) adaptor.addChild(root_0, p_QName719.getTree());

			pushFollow(FOLLOW_p_StringLiteral_in_p_FTExtensionOption15684);
			p_StringLiteral720=p_StringLiteral();
			state._fsp--;
			if (state.failed) return retval;
			if ( state.backtracking==0 ) adaptor.addChild(root_0, p_StringLiteral720.getTree());

			}

			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (XQDTCommonTree)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
			retval.tree = (XQDTCommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "p_FTExtensionOption"


	public static class p_FTIgnoreOption_return extends ParserRuleReturnScope {
		XQDTCommonTree tree;
		@Override
		public XQDTCommonTree getTree() { return tree; }
	};


	// $ANTLR start "p_FTIgnoreOption"
	// XQueryParser.g:1764:1: p_FTIgnoreOption :k+= WITHOUT k+= CONTENT p_UnionExpr ;
	public final XQueryParser.p_FTIgnoreOption_return p_FTIgnoreOption() throws RecognitionException {
		XQueryParser.p_FTIgnoreOption_return retval = new XQueryParser.p_FTIgnoreOption_return();
		retval.start = input.LT(1);

		XQDTCommonTree root_0 = null;

		CommonToken k=null;
		List<Object> list_k=null;
		ParserRuleReturnScope p_UnionExpr721 =null;

		XQDTCommonTree k_tree=null;

		try {
			// XQueryParser.g:1765:9: (k+= WITHOUT k+= CONTENT p_UnionExpr )
			// XQueryParser.g:1765:11: k+= WITHOUT k+= CONTENT p_UnionExpr
			{
			root_0 = (XQDTCommonTree)adaptor.nil();


			k=(CommonToken)match(input,WITHOUT,FOLLOW_WITHOUT_in_p_FTIgnoreOption15712); if (state.failed) return retval;
			if ( state.backtracking==0 ) {
			k_tree = (XQDTCommonTree)adaptor.create(k);
			adaptor.addChild(root_0, k_tree);
			}

			if (list_k==null) list_k=new ArrayList<Object>();
			list_k.add(k);
			k=(CommonToken)match(input,CONTENT,FOLLOW_CONTENT_in_p_FTIgnoreOption15716); if (state.failed) return retval;
			if ( state.backtracking==0 ) {
			k_tree = (XQDTCommonTree)adaptor.create(k);
			adaptor.addChild(root_0, k_tree);
			}

			if (list_k==null) list_k=new ArrayList<Object>();
			list_k.add(k);
			if ( state.backtracking==0 ) {ak(list_k);}
			pushFollow(FOLLOW_p_UnionExpr_in_p_FTIgnoreOption15720);
			p_UnionExpr721=p_UnionExpr();
			state._fsp--;
			if (state.failed) return retval;
			if ( state.backtracking==0 ) adaptor.addChild(root_0, p_UnionExpr721.getTree());

			}

			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (XQDTCommonTree)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
			retval.tree = (XQDTCommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "p_FTIgnoreOption"


	public static class p_Program_return extends ParserRuleReturnScope {
		XQDTCommonTree tree;
		@Override
		public XQDTCommonTree getTree() { return tree; }
	};


	// $ANTLR start "p_Program"
	// XQueryParser.g:1775:1: p_Program : p_StatementsAndOptionalExpr ;
	public final XQueryParser.p_Program_return p_Program() throws RecognitionException {
		XQueryParser.p_Program_return retval = new XQueryParser.p_Program_return();
		retval.start = input.LT(1);

		XQDTCommonTree root_0 = null;

		ParserRuleReturnScope p_StatementsAndOptionalExpr722 =null;


		try {
			// XQueryParser.g:1776:9: ( p_StatementsAndOptionalExpr )
			// XQueryParser.g:1776:11: p_StatementsAndOptionalExpr
			{
			root_0 = (XQDTCommonTree)adaptor.nil();


			pushFollow(FOLLOW_p_StatementsAndOptionalExpr_in_p_Program15752);
			p_StatementsAndOptionalExpr722=p_StatementsAndOptionalExpr();
			state._fsp--;
			if (state.failed) return retval;
			if ( state.backtracking==0 ) adaptor.addChild(root_0, p_StatementsAndOptionalExpr722.getTree());

			}

			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (XQDTCommonTree)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
			retval.tree = (XQDTCommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "p_Program"


	public static class p_Statements_return extends ParserRuleReturnScope {
		XQDTCommonTree tree;
		@Override
		public XQDTCommonTree getTree() { return tree; }
	};


	// $ANTLR start "p_Statements"
	// XQueryParser.g:1780:1: p_Statements[boolean strict] : ( p_Hybrid[$strict,true] )* ;
	public final XQueryParser.p_Statements_return p_Statements(boolean strict) throws RecognitionException {
		XQueryParser.p_Statements_return retval = new XQueryParser.p_Statements_return();
		retval.start = input.LT(1);

		XQDTCommonTree root_0 = null;

		ParserRuleReturnScope p_Hybrid723 =null;


		try {
			// XQueryParser.g:1781:9: ( ( p_Hybrid[$strict,true] )* )
			// XQueryParser.g:1781:11: ( p_Hybrid[$strict,true] )*
			{
			root_0 = (XQDTCommonTree)adaptor.nil();


			// XQueryParser.g:1781:11: ( p_Hybrid[$strict,true] )*
			loop236:
			while (true) {
				int alt236=2;
				int LA236_0 = input.LA(1);
				if ( ((LA236_0 >= AFTER && LA236_0 <= ALLOWING)||(LA236_0 >= AMP_ER && LA236_0 <= BINARY)||(LA236_0 >= BOUNDARY_SPACE && LA236_0 <= CATCH)||(LA236_0 >= CHECK && LA236_0 <= CHILD)||(LA236_0 >= COLLATION && LA236_0 <= COLLECTION)||LA236_0==COMMENT||(LA236_0 >= CONSTRAINT && LA236_0 <= DOT_DOT)||(LA236_0 >= ELEMENT && LA236_0 <= EMPTY)||(LA236_0 >= EMPTY_SEQUENCE && LA236_0 <= EQ)||(LA236_0 >= EVERY && LA236_0 <= GE)||(LA236_0 >= GREATEST && LA236_0 <= GT)||(LA236_0 >= IDIV && LA236_0 <= LPAREN)||LA236_0==LT||(LA236_0 >= L_DecimalLiteral && LA236_0 <= L_DoubleLiteral)||(LA236_0 >= L_IntegerLiteral && LA236_0 <= L_Pragma)||(LA236_0 >= MINUS && LA236_0 <= NAN)||(LA236_0 >= NE && LA236_0 <= NOT)||(LA236_0 >= NO_INHERIT && LA236_0 <= PHRASE)||LA236_0==PLUS||(LA236_0 >= PRECEDING && LA236_0 <= PROCESSING_INSTRUCTION)||(LA236_0 >= QUOT && LA236_0 <= QUOT_ER)||(LA236_0 >= RELATIONSHIP && LA236_0 <= REVALIDATION)||(LA236_0 >= SAME && LA236_0 <= SELF)||(LA236_0 >= SENSITIVE && LA236_0 <= SMALLER)||(LA236_0 >= SOME && LA236_0 <= STRIP)||(LA236_0 >= SWITCH && LA236_0 <= VARIABLE)||(LA236_0 >= VERSION && LA236_0 <= WORDS)||(LA236_0 >= XQUERY && LA236_0 <= ZERO_DIGIT)||LA236_0==EXPLICITLY) ) {
					alt236=1;
				}

				switch (alt236) {
				case 1 :
					// XQueryParser.g:1781:11: p_Hybrid[$strict,true]
					{
					pushFollow(FOLLOW_p_Hybrid_in_p_Statements15779);
					p_Hybrid723=p_Hybrid(strict, true);
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, p_Hybrid723.getTree());

					}
					break;

				default :
					break loop236;
				}
			}

			}

			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (XQDTCommonTree)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
			retval.tree = (XQDTCommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "p_Statements"


	public static class p_StatementsAndExpr_return extends ParserRuleReturnScope {
		XQDTCommonTree tree;
		@Override
		public XQDTCommonTree getTree() { return tree; }
	};


	// $ANTLR start "p_StatementsAndExpr"
	// XQueryParser.g:1785:1: p_StatementsAndExpr : p_Statements[false] ;
	public final XQueryParser.p_StatementsAndExpr_return p_StatementsAndExpr() throws RecognitionException {
		XQueryParser.p_StatementsAndExpr_return retval = new XQueryParser.p_StatementsAndExpr_return();
		retval.start = input.LT(1);

		XQDTCommonTree root_0 = null;

		ParserRuleReturnScope p_Statements724 =null;


		try {
			// XQueryParser.g:1786:9: ( p_Statements[false] )
			// XQueryParser.g:1786:11: p_Statements[false]
			{
			root_0 = (XQDTCommonTree)adaptor.nil();


			pushFollow(FOLLOW_p_Statements_in_p_StatementsAndExpr15807);
			p_Statements724=p_Statements(false);
			state._fsp--;
			if (state.failed) return retval;
			if ( state.backtracking==0 ) adaptor.addChild(root_0, p_Statements724.getTree());

			}

			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (XQDTCommonTree)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
			retval.tree = (XQDTCommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "p_StatementsAndExpr"


	public static class p_StatementsAndOptionalExpr_return extends ParserRuleReturnScope {
		XQDTCommonTree tree;
		@Override
		public XQDTCommonTree getTree() { return tree; }
	};


	// $ANTLR start "p_StatementsAndOptionalExpr"
	// XQueryParser.g:1790:1: p_StatementsAndOptionalExpr : p_Statements[false] ;
	public final XQueryParser.p_StatementsAndOptionalExpr_return p_StatementsAndOptionalExpr() throws RecognitionException {
		XQueryParser.p_StatementsAndOptionalExpr_return retval = new XQueryParser.p_StatementsAndOptionalExpr_return();
		retval.start = input.LT(1);

		XQDTCommonTree root_0 = null;

		ParserRuleReturnScope p_Statements725 =null;


		try {
			// XQueryParser.g:1791:9: ( p_Statements[false] )
			// XQueryParser.g:1791:11: p_Statements[false]
			{
			root_0 = (XQDTCommonTree)adaptor.nil();


			pushFollow(FOLLOW_p_Statements_in_p_StatementsAndOptionalExpr15834);
			p_Statements725=p_Statements(false);
			state._fsp--;
			if (state.failed) return retval;
			if ( state.backtracking==0 ) adaptor.addChild(root_0, p_Statements725.getTree());

			}

			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (XQDTCommonTree)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
			retval.tree = (XQDTCommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "p_StatementsAndOptionalExpr"


	public static class p_Hybrid_return extends ParserRuleReturnScope {
		XQDTCommonTree tree;
		@Override
		public XQDTCommonTree getTree() { return tree; }
	};


	// $ANTLR start "p_Hybrid"
	// XQueryParser.g:1794:1: p_Hybrid[boolean strict, boolean allowConcat] : ( p_HybridExprSingle[$strict,$allowConcat] | p_Statement );
	public final XQueryParser.p_Hybrid_return p_Hybrid(boolean strict, boolean allowConcat) throws RecognitionException {
		XQueryParser.p_Hybrid_return retval = new XQueryParser.p_Hybrid_return();
		retval.start = input.LT(1);

		XQDTCommonTree root_0 = null;

		ParserRuleReturnScope p_HybridExprSingle726 =null;
		ParserRuleReturnScope p_Statement727 =null;


		try {
			// XQueryParser.g:1795:9: ( p_HybridExprSingle[$strict,$allowConcat] | p_Statement )
			int alt237=2;
			switch ( input.LA(1) ) {
			case AFTER:
			case ALL:
			case ALLOWING:
			case AMP_ER:
			case ANCESTOR:
			case ANCESTOR_OR_SELF:
			case AND:
			case ANY:
			case APOS:
			case APOS_ER:
			case AS:
			case ASCENDING:
			case AT:
			case ATTRIBUTE:
			case ATTR_SIGN:
			case BASE_URI:
			case BEFORE:
			case BINARY:
			case BOUNDARY_SPACE:
			case BY:
			case CASE:
			case CAST:
			case CASTABLE:
			case CATCH:
			case CHECK:
			case CHILD:
			case COLLATION:
			case COLLECTION:
			case COMMENT:
			case CONSTRAINT:
			case CONSTRUCTION:
			case CONTAINS:
			case CONTENT:
			case CONTEXT:
			case COPY:
			case COPY_NAMESPACES:
			case COUNT:
			case DECIMAL_FORMAT:
			case DECIMAL_SEPARATOR:
			case DECLARE:
			case DEFAULT:
			case DELETE:
			case DESCENDANT:
			case DESCENDANT_OR_SELF:
			case DESCENDING:
			case DIACRITICS:
			case DIFFERENT:
			case DIGIT:
			case DISTANCE:
			case DIV:
			case DOCUMENT:
			case DOCUMENT_NODE:
			case DOT:
			case DOT_DOT:
			case ELEMENT:
			case ELSE:
			case EMPTY:
			case EMPTY_SEQUENCE:
			case ENCODING:
			case END:
			case ENTIRE:
			case EQ:
			case EVERY:
			case EXACTLY:
			case EXCEPT:
			case EXTERNAL:
			case FIRST:
			case FOLLOWING:
			case FOLLOWING_SIBLING:
			case FOR:
			case FOREACH:
			case FOREIGN:
			case FROM:
			case FTAND:
			case FTNOT:
			case FTOR:
			case FT_OPTION:
			case FUNCTION:
			case GE:
			case GREATEST:
			case GROUP:
			case GROUPING_SEPARATOR:
			case GT:
			case IDIV:
			case IF:
			case IMPORT:
			case IN:
			case INDEX:
			case INFINITY:
			case INHERIT:
			case INSENSITIVE:
			case INSERT:
			case INSTANCE:
			case INTEGRITY:
			case INTERSECT:
			case INTO:
			case IS:
			case ITEM:
			case KEY:
			case LANGUAGE:
			case LAST:
			case LAX:
			case LBRACKET:
			case LE:
			case LEAST:
			case LET:
			case LEVELS:
			case LOOP:
			case LOWERCASE:
			case LPAREN:
			case LT:
			case L_DecimalLiteral:
			case L_DirCommentConstructor:
			case L_DirPIConstructor:
			case L_DoubleLiteral:
			case L_IntegerLiteral:
			case L_NCName:
			case L_Pragma:
			case MINUS:
			case MINUS_SIGN:
			case MOD:
			case MODIFY:
			case MODULE:
			case MOST:
			case NAMESPACE:
			case NAMESPACE_NODE:
			case NAN:
			case NE:
			case NEXT:
			case NO:
			case NODE:
			case NODES:
			case NOT:
			case NO_INHERIT:
			case NO_PRESERVE:
			case OCCURS:
			case OF:
			case ON:
			case ONLY:
			case OPTION:
			case OR:
			case ORDER:
			case ORDERED:
			case ORDERING:
			case PARAGRAPH:
			case PARAGRAPHS:
			case PARENT:
			case PATTERN_SEPARATOR:
			case PERCENT:
			case PER_MILLE:
			case PHRASE:
			case PLUS:
			case PRECEDING:
			case PRECEDING_SIBLING:
			case PRESERVE:
			case PREVIOUS:
			case PRIVATE:
			case PROCESSING_INSTRUCTION:
			case QUOT:
			case QUOT_ER:
			case RELATIONSHIP:
			case RENAME:
			case REPLACE:
			case RETURN:
			case RETURNING:
			case REVALIDATION:
			case SAME:
			case SATISFIES:
			case SCHEMA:
			case SCHEMA_ATTRIBUTE:
			case SCHEMA_ELEMENT:
			case SCORE:
			case SELF:
			case SENSITIVE:
			case SENTENCE:
			case SENTENCES:
			case SKIP:
			case SLASH:
			case SLASH_SLASH:
			case SLIDING:
			case SMALLER:
			case SOME:
			case STABLE:
			case STAR:
			case START:
			case STEMMING:
			case STOP:
			case STRICT:
			case STRIP:
			case SWITCH:
			case TEXT:
			case THEN:
			case THESAURUS:
			case TIMES:
			case TO:
			case TREAT:
			case TRY:
			case TUMBLING:
			case TYPE:
			case TYPESWITCH:
			case UNION:
			case UNIQUE:
			case UNORDERED:
			case UPDATING:
			case UPPERCASE:
			case USING:
			case VALIDATE:
			case VALUE:
			case VERSION:
			case WEIGHT:
			case WHEN:
			case WHERE:
			case WILDCARDS:
			case WINDOW:
			case WITH:
			case WITHOUT:
			case WORD:
			case WORDS:
			case XQUERY:
			case ZERO_DIGIT:
			case EXPLICITLY:
				{
				alt237=1;
				}
				break;
			case DOLLAR:
				{
				int LA237_2 = input.LA(2);
				if ( ((LA237_2 >= AFTER && LA237_2 <= ALLOWING)||(LA237_2 >= AMP_ER && LA237_2 <= AND)||LA237_2==ANY||(LA237_2 >= APOS_ER && LA237_2 <= ATTRIBUTE)||(LA237_2 >= BASE_URI && LA237_2 <= BINARY)||(LA237_2 >= BOUNDARY_SPACE && LA237_2 <= CATCH)||(LA237_2 >= CHECK && LA237_2 <= CHILD)||(LA237_2 >= COLLATION && LA237_2 <= COLLECTION)||LA237_2==COMMENT||(LA237_2 >= CONSTRAINT && LA237_2 <= DOCUMENT_NODE)||(LA237_2 >= ELEMENT && LA237_2 <= EMPTY)||(LA237_2 >= EMPTY_SEQUENCE && LA237_2 <= EQ)||(LA237_2 >= EVERY && LA237_2 <= GE)||(LA237_2 >= GREATEST && LA237_2 <= GT)||(LA237_2 >= IDIV && LA237_2 <= LAX)||(LA237_2 >= LE && LA237_2 <= LOWERCASE)||LA237_2==LT||LA237_2==L_NCName||(LA237_2 >= MINUS_SIGN && LA237_2 <= NAN)||(LA237_2 >= NE && LA237_2 <= NOT)||(LA237_2 >= NO_INHERIT && LA237_2 <= PHRASE)||(LA237_2 >= PRECEDING && LA237_2 <= PROCESSING_INSTRUCTION)||LA237_2==QUOT_ER||(LA237_2 >= RELATIONSHIP && LA237_2 <= REVALIDATION)||(LA237_2 >= SAME && LA237_2 <= SELF)||(LA237_2 >= SENSITIVE && LA237_2 <= SKIP)||LA237_2==SLIDING||(LA237_2 >= SOME && LA237_2 <= STABLE)||(LA237_2 >= START && LA237_2 <= STRIP)||(LA237_2 >= SWITCH && LA237_2 <= UNORDERED)||(LA237_2 >= UPPERCASE && LA237_2 <= VARIABLE)||(LA237_2 >= VERSION && LA237_2 <= WORDS)||(LA237_2 >= XQUERY && LA237_2 <= ZERO_DIGIT)||LA237_2==EXPLICITLY) ) {
					switch ( input.LA(3) ) {
					case COLON:
						{
						int LA237_10 = input.LA(4);
						if ( ((LA237_10 >= AFTER && LA237_10 <= ALLOWING)||(LA237_10 >= AMP_ER && LA237_10 <= AND)||LA237_10==ANY||(LA237_10 >= APOS_ER && LA237_10 <= ATTRIBUTE)||(LA237_10 >= BASE_URI && LA237_10 <= BINARY)||(LA237_10 >= BOUNDARY_SPACE && LA237_10 <= CATCH)||(LA237_10 >= CHECK && LA237_10 <= CHILD)||(LA237_10 >= COLLATION && LA237_10 <= COLLECTION)||LA237_10==COMMENT||(LA237_10 >= CONSTRAINT && LA237_10 <= DOCUMENT_NODE)||(LA237_10 >= ELEMENT && LA237_10 <= EMPTY)||(LA237_10 >= EMPTY_SEQUENCE && LA237_10 <= EQ)||(LA237_10 >= EVERY && LA237_10 <= GE)||(LA237_10 >= GREATEST && LA237_10 <= GT)||(LA237_10 >= IDIV && LA237_10 <= LAX)||(LA237_10 >= LE && LA237_10 <= LOWERCASE)||LA237_10==LT||LA237_10==L_NCName||(LA237_10 >= MINUS_SIGN && LA237_10 <= NAN)||(LA237_10 >= NE && LA237_10 <= NOT)||(LA237_10 >= NO_INHERIT && LA237_10 <= PHRASE)||(LA237_10 >= PRECEDING && LA237_10 <= PROCESSING_INSTRUCTION)||LA237_10==QUOT_ER||(LA237_10 >= RELATIONSHIP && LA237_10 <= REVALIDATION)||(LA237_10 >= SAME && LA237_10 <= SELF)||(LA237_10 >= SENSITIVE && LA237_10 <= SKIP)||LA237_10==SLIDING||(LA237_10 >= SOME && LA237_10 <= STABLE)||(LA237_10 >= START && LA237_10 <= STRIP)||(LA237_10 >= SWITCH && LA237_10 <= UNORDERED)||(LA237_10 >= UPPERCASE && LA237_10 <= VARIABLE)||(LA237_10 >= VERSION && LA237_10 <= WORDS)||(LA237_10 >= XQUERY && LA237_10 <= ZERO_DIGIT)||LA237_10==EXPLICITLY) ) {
							int LA237_11 = input.LA(5);
							if ( (LA237_11==AND||(LA237_11 >= CAST && LA237_11 <= CASTABLE)||LA237_11==COMMA||LA237_11==CONCAT||LA237_11==CONTAINS||LA237_11==DIV||(LA237_11 >= EQ && LA237_11 <= EQUAL)||LA237_11==EXCEPT||(LA237_11 >= GE && LA237_11 <= GREATER_GREATER)||LA237_11==GT||LA237_11==IDIV||LA237_11==INSTANCE||LA237_11==INTERSECT||LA237_11==IS||LA237_11==LE||(LA237_11 >= LSQUARE && LA237_11 <= LT)||LA237_11==MINUS||LA237_11==MOD||LA237_11==NE||LA237_11==NOTEQUAL||LA237_11==OR||LA237_11==PLUS||LA237_11==SEMICOLON||(LA237_11 >= SLASH && LA237_11 <= SLASH_SLASH)||(LA237_11 >= SMALLER && LA237_11 <= SMALLER_SMALLER)||LA237_11==STAR||(LA237_11 >= TO && LA237_11 <= TREAT)||LA237_11==UNION||LA237_11==VBAR) ) {
								alt237=1;
							}
							else if ( (LA237_11==BIND) ) {
								alt237=2;
							}

							else {
								if (state.backtracking>0) {state.failed=true; return retval;}
								int nvaeMark = input.mark();
								try {
									for (int nvaeConsume = 0; nvaeConsume < 5 - 1; nvaeConsume++) {
										input.consume();
									}
									NoViableAltException nvae =
										new NoViableAltException("", 237, 11, input);
									throw nvae;
								} finally {
									input.rewind(nvaeMark);
								}
							}

						}

						else {
							if (state.backtracking>0) {state.failed=true; return retval;}
							int nvaeMark = input.mark();
							try {
								for (int nvaeConsume = 0; nvaeConsume < 4 - 1; nvaeConsume++) {
									input.consume();
								}
								NoViableAltException nvae =
									new NoViableAltException("", 237, 10, input);
								throw nvae;
							} finally {
								input.rewind(nvaeMark);
							}
						}

						}
						break;
					case AND:
					case CAST:
					case CASTABLE:
					case COMMA:
					case CONCAT:
					case CONTAINS:
					case DIV:
					case EQ:
					case EQUAL:
					case EXCEPT:
					case GE:
					case GREATER:
					case GREATEREQ:
					case GREATER_GREATER:
					case GT:
					case IDIV:
					case INSTANCE:
					case INTERSECT:
					case IS:
					case LE:
					case LSQUARE:
					case LT:
					case MINUS:
					case MOD:
					case NE:
					case NOTEQUAL:
					case OR:
					case PLUS:
					case SEMICOLON:
					case SLASH:
					case SLASH_SLASH:
					case SMALLER:
					case SMALLEREQ:
					case SMALLER_SMALLER:
					case STAR:
					case TO:
					case TREAT:
					case UNION:
					case VBAR:
						{
						alt237=1;
						}
						break;
					case BIND:
						{
						alt237=2;
						}
						break;
					default:
						if (state.backtracking>0) {state.failed=true; return retval;}
						int nvaeMark = input.mark();
						try {
							for (int nvaeConsume = 0; nvaeConsume < 3 - 1; nvaeConsume++) {
								input.consume();
							}
							NoViableAltException nvae =
								new NoViableAltException("", 237, 9, input);
							throw nvae;
						} finally {
							input.rewind(nvaeMark);
						}
					}
				}

				else {
					if (state.backtracking>0) {state.failed=true; return retval;}
					int nvaeMark = input.mark();
					try {
						input.consume();
						NoViableAltException nvae =
							new NoViableAltException("", 237, 2, input);
						throw nvae;
					} finally {
						input.rewind(nvaeMark);
					}
				}

				}
				break;
			case WHILE:
				{
				int LA237_3 = input.LA(2);
				if ( (LA237_3==AND||(LA237_3 >= CAST && LA237_3 <= CASTABLE)||LA237_3==COLON||LA237_3==COMMA||LA237_3==CONCAT||LA237_3==CONTAINS||LA237_3==DIV||(LA237_3 >= EQ && LA237_3 <= EQUAL)||LA237_3==EXCEPT||(LA237_3 >= GE && LA237_3 <= GREATER_GREATER)||LA237_3==GT||LA237_3==IDIV||LA237_3==INSTANCE||LA237_3==INTERSECT||LA237_3==IS||LA237_3==LE||(LA237_3 >= LSQUARE && LA237_3 <= LT)||LA237_3==MINUS||LA237_3==MOD||LA237_3==NE||LA237_3==NOTEQUAL||LA237_3==OR||LA237_3==PLUS||LA237_3==SEMICOLON||(LA237_3 >= SLASH && LA237_3 <= SLASH_SLASH)||(LA237_3 >= SMALLER && LA237_3 <= SMALLER_SMALLER)||LA237_3==STAR||(LA237_3 >= TO && LA237_3 <= TREAT)||LA237_3==UNION||LA237_3==VBAR) ) {
					alt237=1;
				}
				else if ( (LA237_3==LPAREN) ) {
					alt237=2;
				}

				else {
					if (state.backtracking>0) {state.failed=true; return retval;}
					int nvaeMark = input.mark();
					try {
						input.consume();
						NoViableAltException nvae =
							new NoViableAltException("", 237, 3, input);
						throw nvae;
					} finally {
						input.rewind(nvaeMark);
					}
				}

				}
				break;
			case BREAK:
				{
				int LA237_4 = input.LA(2);
				if ( (LA237_4==AND||(LA237_4 >= CAST && LA237_4 <= CASTABLE)||LA237_4==COLON||LA237_4==COMMA||LA237_4==CONCAT||LA237_4==CONTAINS||LA237_4==DIV||(LA237_4 >= EQ && LA237_4 <= EQUAL)||LA237_4==EXCEPT||(LA237_4 >= GE && LA237_4 <= GREATER_GREATER)||LA237_4==GT||LA237_4==IDIV||LA237_4==INSTANCE||LA237_4==INTERSECT||LA237_4==IS||LA237_4==LE||(LA237_4 >= LPAREN && LA237_4 <= LT)||LA237_4==MINUS||LA237_4==MOD||LA237_4==NE||LA237_4==NOTEQUAL||LA237_4==OR||LA237_4==PLUS||LA237_4==SEMICOLON||(LA237_4 >= SLASH && LA237_4 <= SLASH_SLASH)||(LA237_4 >= SMALLER && LA237_4 <= SMALLER_SMALLER)||LA237_4==STAR||(LA237_4 >= TO && LA237_4 <= TREAT)||LA237_4==UNION||LA237_4==VBAR) ) {
					alt237=1;
				}
				else if ( (LA237_4==LOOP) ) {
					alt237=2;
				}

				else {
					if (state.backtracking>0) {state.failed=true; return retval;}
					int nvaeMark = input.mark();
					try {
						input.consume();
						NoViableAltException nvae =
							new NoViableAltException("", 237, 4, input);
						throw nvae;
					} finally {
						input.rewind(nvaeMark);
					}
				}

				}
				break;
			case CONTINUE:
				{
				int LA237_5 = input.LA(2);
				if ( (LA237_5==AND||(LA237_5 >= CAST && LA237_5 <= CASTABLE)||LA237_5==COLON||LA237_5==COMMA||LA237_5==CONCAT||LA237_5==CONTAINS||LA237_5==DIV||(LA237_5 >= EQ && LA237_5 <= EQUAL)||LA237_5==EXCEPT||(LA237_5 >= GE && LA237_5 <= GREATER_GREATER)||LA237_5==GT||LA237_5==IDIV||LA237_5==INSTANCE||LA237_5==INTERSECT||LA237_5==IS||LA237_5==LE||(LA237_5 >= LPAREN && LA237_5 <= LT)||LA237_5==MINUS||LA237_5==MOD||LA237_5==NE||LA237_5==NOTEQUAL||LA237_5==OR||LA237_5==PLUS||LA237_5==SEMICOLON||(LA237_5 >= SLASH && LA237_5 <= SLASH_SLASH)||(LA237_5 >= SMALLER && LA237_5 <= SMALLER_SMALLER)||LA237_5==STAR||(LA237_5 >= TO && LA237_5 <= TREAT)||LA237_5==UNION||LA237_5==VBAR) ) {
					alt237=1;
				}
				else if ( (LA237_5==LOOP) ) {
					alt237=2;
				}

				else {
					if (state.backtracking>0) {state.failed=true; return retval;}
					int nvaeMark = input.mark();
					try {
						input.consume();
						NoViableAltException nvae =
							new NoViableAltException("", 237, 5, input);
						throw nvae;
					} finally {
						input.rewind(nvaeMark);
					}
				}

				}
				break;
			case EXIT:
				{
				int LA237_6 = input.LA(2);
				if ( (LA237_6==AND||(LA237_6 >= CAST && LA237_6 <= CASTABLE)||LA237_6==COLON||LA237_6==COMMA||LA237_6==CONCAT||LA237_6==CONTAINS||LA237_6==DIV||(LA237_6 >= EQ && LA237_6 <= EQUAL)||LA237_6==EXCEPT||(LA237_6 >= GE && LA237_6 <= GREATER_GREATER)||LA237_6==GT||LA237_6==IDIV||LA237_6==INSTANCE||LA237_6==INTERSECT||LA237_6==IS||LA237_6==LE||(LA237_6 >= LPAREN && LA237_6 <= LT)||LA237_6==MINUS||LA237_6==MOD||LA237_6==NE||LA237_6==NOTEQUAL||LA237_6==OR||LA237_6==PLUS||LA237_6==SEMICOLON||(LA237_6 >= SLASH && LA237_6 <= SLASH_SLASH)||(LA237_6 >= SMALLER && LA237_6 <= SMALLER_SMALLER)||LA237_6==STAR||(LA237_6 >= TO && LA237_6 <= TREAT)||LA237_6==UNION||LA237_6==VBAR) ) {
					alt237=1;
				}
				else if ( (LA237_6==RETURNING) ) {
					alt237=2;
				}

				else {
					if (state.backtracking>0) {state.failed=true; return retval;}
					int nvaeMark = input.mark();
					try {
						input.consume();
						NoViableAltException nvae =
							new NoViableAltException("", 237, 6, input);
						throw nvae;
					} finally {
						input.rewind(nvaeMark);
					}
				}

				}
				break;
			case VARIABLE:
				{
				int LA237_7 = input.LA(2);
				if ( (LA237_7==AND||(LA237_7 >= CAST && LA237_7 <= CASTABLE)||LA237_7==COLON||LA237_7==COMMA||LA237_7==CONCAT||LA237_7==CONTAINS||LA237_7==DIV||(LA237_7 >= EQ && LA237_7 <= EQUAL)||LA237_7==EXCEPT||(LA237_7 >= GE && LA237_7 <= GREATER_GREATER)||LA237_7==GT||LA237_7==IDIV||LA237_7==INSTANCE||LA237_7==INTERSECT||LA237_7==IS||LA237_7==LE||(LA237_7 >= LPAREN && LA237_7 <= LT)||LA237_7==MINUS||LA237_7==MOD||LA237_7==NE||LA237_7==NOTEQUAL||LA237_7==OR||LA237_7==PLUS||LA237_7==SEMICOLON||(LA237_7 >= SLASH && LA237_7 <= SLASH_SLASH)||(LA237_7 >= SMALLER && LA237_7 <= SMALLER_SMALLER)||LA237_7==STAR||(LA237_7 >= TO && LA237_7 <= TREAT)||LA237_7==UNION||LA237_7==VBAR) ) {
					alt237=1;
				}
				else if ( (LA237_7==DOLLAR) ) {
					alt237=2;
				}

				else {
					if (state.backtracking>0) {state.failed=true; return retval;}
					int nvaeMark = input.mark();
					try {
						input.consume();
						NoViableAltException nvae =
							new NoViableAltException("", 237, 7, input);
						throw nvae;
					} finally {
						input.rewind(nvaeMark);
					}
				}

				}
				break;
			case ANN_PERCENT:
				{
				alt237=2;
				}
				break;
			default:
				if (state.backtracking>0) {state.failed=true; return retval;}
				NoViableAltException nvae =
					new NoViableAltException("", 237, 0, input);
				throw nvae;
			}
			switch (alt237) {
				case 1 :
					// XQueryParser.g:1795:11: p_HybridExprSingle[$strict,$allowConcat]
					{
					root_0 = (XQDTCommonTree)adaptor.nil();


					pushFollow(FOLLOW_p_HybridExprSingle_in_p_Hybrid15861);
					p_HybridExprSingle726=p_HybridExprSingle(strict, allowConcat);
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, p_HybridExprSingle726.getTree());

					}
					break;
				case 2 :
					// XQueryParser.g:1796:11: p_Statement
					{
					root_0 = (XQDTCommonTree)adaptor.nil();


					pushFollow(FOLLOW_p_Statement_in_p_Hybrid15874);
					p_Statement727=p_Statement();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, p_Statement727.getTree());

					}
					break;

			}
			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (XQDTCommonTree)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
		}
		catch (RecognitionException re) {

			    XQueryParser.p_StepExpr_return var = p_StepExpr();
			    root_0 = (XQDTCommonTree)adaptor.nil();
			    adaptor.addChild(root_0, var.getTree());
			    retval.stop = input.LT(-1);
			    retval.tree = (XQDTCommonTree)adaptor.rulePostProcessing(root_0);
			    adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

		}

		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "p_Hybrid"


	public static class p_Statement_return extends ParserRuleReturnScope {
		XQDTCommonTree tree;
		@Override
		public XQDTCommonTree getTree() { return tree; }
	};


	// $ANTLR start "p_Statement"
	// XQueryParser.g:1807:1: p_Statement : ( p_AssignStatement | p_BreakStatement | p_ContinueStatement | p_ExitStatement | p_VarDeclStatement | p_WhileStatement );
	public final XQueryParser.p_Statement_return p_Statement() throws RecognitionException {
		XQueryParser.p_Statement_return retval = new XQueryParser.p_Statement_return();
		retval.start = input.LT(1);

		XQDTCommonTree root_0 = null;

		ParserRuleReturnScope p_AssignStatement728 =null;
		ParserRuleReturnScope p_BreakStatement729 =null;
		ParserRuleReturnScope p_ContinueStatement730 =null;
		ParserRuleReturnScope p_ExitStatement731 =null;
		ParserRuleReturnScope p_VarDeclStatement732 =null;
		ParserRuleReturnScope p_WhileStatement733 =null;


		try {
			// XQueryParser.g:1808:9: ( p_AssignStatement | p_BreakStatement | p_ContinueStatement | p_ExitStatement | p_VarDeclStatement | p_WhileStatement )
			int alt238=6;
			switch ( input.LA(1) ) {
			case DOLLAR:
				{
				alt238=1;
				}
				break;
			case BREAK:
				{
				alt238=2;
				}
				break;
			case CONTINUE:
				{
				alt238=3;
				}
				break;
			case EXIT:
				{
				alt238=4;
				}
				break;
			case ANN_PERCENT:
			case VARIABLE:
				{
				alt238=5;
				}
				break;
			case WHILE:
				{
				alt238=6;
				}
				break;
			default:
				if (state.backtracking>0) {state.failed=true; return retval;}
				NoViableAltException nvae =
					new NoViableAltException("", 238, 0, input);
				throw nvae;
			}
			switch (alt238) {
				case 1 :
					// XQueryParser.g:1808:11: p_AssignStatement
					{
					root_0 = (XQDTCommonTree)adaptor.nil();


					pushFollow(FOLLOW_p_AssignStatement_in_p_Statement15905);
					p_AssignStatement728=p_AssignStatement();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, p_AssignStatement728.getTree());

					}
					break;
				case 2 :
					// XQueryParser.g:1809:11: p_BreakStatement
					{
					root_0 = (XQDTCommonTree)adaptor.nil();


					pushFollow(FOLLOW_p_BreakStatement_in_p_Statement15917);
					p_BreakStatement729=p_BreakStatement();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, p_BreakStatement729.getTree());

					}
					break;
				case 3 :
					// XQueryParser.g:1810:11: p_ContinueStatement
					{
					root_0 = (XQDTCommonTree)adaptor.nil();


					pushFollow(FOLLOW_p_ContinueStatement_in_p_Statement15929);
					p_ContinueStatement730=p_ContinueStatement();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, p_ContinueStatement730.getTree());

					}
					break;
				case 4 :
					// XQueryParser.g:1811:11: p_ExitStatement
					{
					root_0 = (XQDTCommonTree)adaptor.nil();


					pushFollow(FOLLOW_p_ExitStatement_in_p_Statement15941);
					p_ExitStatement731=p_ExitStatement();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, p_ExitStatement731.getTree());

					}
					break;
				case 5 :
					// XQueryParser.g:1812:11: p_VarDeclStatement
					{
					root_0 = (XQDTCommonTree)adaptor.nil();


					pushFollow(FOLLOW_p_VarDeclStatement_in_p_Statement15953);
					p_VarDeclStatement732=p_VarDeclStatement();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, p_VarDeclStatement732.getTree());

					}
					break;
				case 6 :
					// XQueryParser.g:1813:11: p_WhileStatement
					{
					root_0 = (XQDTCommonTree)adaptor.nil();


					pushFollow(FOLLOW_p_WhileStatement_in_p_Statement15965);
					p_WhileStatement733=p_WhileStatement();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, p_WhileStatement733.getTree());

					}
					break;

			}
			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (XQDTCommonTree)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
			retval.tree = (XQDTCommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "p_Statement"


	public static class p_HybridExprSingle_return extends ParserRuleReturnScope {
		XQDTCommonTree tree;
		@Override
		public XQDTCommonTree getTree() { return tree; }
	};


	// $ANTLR start "p_HybridExprSingle"
	// XQueryParser.g:1815:1: p_HybridExprSingle[boolean strict, boolean allowConcat] : e= p_Expr[$strict,$allowConcat] SEMICOLON ;
	public final XQueryParser.p_HybridExprSingle_return p_HybridExprSingle(boolean strict, boolean allowConcat) throws RecognitionException {
		XQueryParser.p_HybridExprSingle_return retval = new XQueryParser.p_HybridExprSingle_return();
		retval.start = input.LT(1);

		XQDTCommonTree root_0 = null;

		CommonToken SEMICOLON734=null;
		ParserRuleReturnScope e =null;

		XQDTCommonTree SEMICOLON734_tree=null;

		try {
			// XQueryParser.g:1816:9: (e= p_Expr[$strict,$allowConcat] SEMICOLON )
			// XQueryParser.g:1816:11: e= p_Expr[$strict,$allowConcat] SEMICOLON
			{
			root_0 = (XQDTCommonTree)adaptor.nil();


			pushFollow(FOLLOW_p_Expr_in_p_HybridExprSingle15992);
			e=p_Expr(strict, allowConcat);
			state._fsp--;
			if (state.failed) return retval;
			if ( state.backtracking==0 ) adaptor.addChild(root_0, e.getTree());

			if ( state.backtracking==0 ) { if (strict || input.LT(1).getType() != SEMICOLON) throw new RecognitionException(); }
			SEMICOLON734=(CommonToken)match(input,SEMICOLON,FOLLOW_SEMICOLON_in_p_HybridExprSingle16007); if (state.failed) return retval;
			if ( state.backtracking==0 ) {
			SEMICOLON734_tree = (XQDTCommonTree)adaptor.create(SEMICOLON734);
			adaptor.addChild(root_0, SEMICOLON734_tree);
			}

			}

			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (XQDTCommonTree)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
		}
		catch (RecognitionException re) {

			    root_0 = (XQDTCommonTree)adaptor.nil();
			    adaptor.addChild(root_0, e.getTree());
			    retval.stop = input.LT(-1);
			    retval.tree = (XQDTCommonTree)adaptor.rulePostProcessing(root_0);
			    adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

		}

		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "p_HybridExprSingle"


	public static class p_ApplyStatement_return extends ParserRuleReturnScope {
		XQDTCommonTree tree;
		@Override
		public XQDTCommonTree getTree() { return tree; }
	};


	// $ANTLR start "p_ApplyStatement"
	// XQueryParser.g:1846:1: p_ApplyStatement : p_ExprSimple SEMICOLON ;
	public final XQueryParser.p_ApplyStatement_return p_ApplyStatement() throws RecognitionException {
		XQueryParser.p_ApplyStatement_return retval = new XQueryParser.p_ApplyStatement_return();
		retval.start = input.LT(1);

		XQDTCommonTree root_0 = null;

		CommonToken SEMICOLON736=null;
		ParserRuleReturnScope p_ExprSimple735 =null;

		XQDTCommonTree SEMICOLON736_tree=null;

		try {
			// XQueryParser.g:1847:9: ( p_ExprSimple SEMICOLON )
			// XQueryParser.g:1847:11: p_ExprSimple SEMICOLON
			{
			root_0 = (XQDTCommonTree)adaptor.nil();


			pushFollow(FOLLOW_p_ExprSimple_in_p_ApplyStatement16057);
			p_ExprSimple735=p_ExprSimple();
			state._fsp--;
			if (state.failed) return retval;
			if ( state.backtracking==0 ) adaptor.addChild(root_0, p_ExprSimple735.getTree());

			SEMICOLON736=(CommonToken)match(input,SEMICOLON,FOLLOW_SEMICOLON_in_p_ApplyStatement16059); if (state.failed) return retval;
			if ( state.backtracking==0 ) {
			SEMICOLON736_tree = (XQDTCommonTree)adaptor.create(SEMICOLON736);
			adaptor.addChild(root_0, SEMICOLON736_tree);
			}

			}

			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (XQDTCommonTree)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
			retval.tree = (XQDTCommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "p_ApplyStatement"


	public static class p_AssignStatement_return extends ParserRuleReturnScope {
		XQDTCommonTree tree;
		@Override
		public XQDTCommonTree getTree() { return tree; }
	};


	// $ANTLR start "p_AssignStatement"
	// XQueryParser.g:1851:1: p_AssignStatement : DOLLAR p_VarName BIND p_ExprSingle[true] SEMICOLON ;
	public final XQueryParser.p_AssignStatement_return p_AssignStatement() throws RecognitionException {
		XQueryParser.p_AssignStatement_return retval = new XQueryParser.p_AssignStatement_return();
		retval.start = input.LT(1);

		XQDTCommonTree root_0 = null;

		CommonToken DOLLAR737=null;
		CommonToken BIND739=null;
		CommonToken SEMICOLON741=null;
		ParserRuleReturnScope p_VarName738 =null;
		ParserRuleReturnScope p_ExprSingle740 =null;

		XQDTCommonTree DOLLAR737_tree=null;
		XQDTCommonTree BIND739_tree=null;
		XQDTCommonTree SEMICOLON741_tree=null;

		try {
			// XQueryParser.g:1852:9: ( DOLLAR p_VarName BIND p_ExprSingle[true] SEMICOLON )
			// XQueryParser.g:1852:11: DOLLAR p_VarName BIND p_ExprSingle[true] SEMICOLON
			{
			root_0 = (XQDTCommonTree)adaptor.nil();


			DOLLAR737=(CommonToken)match(input,DOLLAR,FOLLOW_DOLLAR_in_p_AssignStatement16085); if (state.failed) return retval;
			if ( state.backtracking==0 ) {
			DOLLAR737_tree = (XQDTCommonTree)adaptor.create(DOLLAR737);
			adaptor.addChild(root_0, DOLLAR737_tree);
			}

			pushFollow(FOLLOW_p_VarName_in_p_AssignStatement16087);
			p_VarName738=p_VarName();
			state._fsp--;
			if (state.failed) return retval;
			if ( state.backtracking==0 ) adaptor.addChild(root_0, p_VarName738.getTree());

			BIND739=(CommonToken)match(input,BIND,FOLLOW_BIND_in_p_AssignStatement16089); if (state.failed) return retval;
			if ( state.backtracking==0 ) {
			BIND739_tree = (XQDTCommonTree)adaptor.create(BIND739);
			adaptor.addChild(root_0, BIND739_tree);
			}

			pushFollow(FOLLOW_p_ExprSingle_in_p_AssignStatement16091);
			p_ExprSingle740=p_ExprSingle(true);
			state._fsp--;
			if (state.failed) return retval;
			if ( state.backtracking==0 ) adaptor.addChild(root_0, p_ExprSingle740.getTree());

			SEMICOLON741=(CommonToken)match(input,SEMICOLON,FOLLOW_SEMICOLON_in_p_AssignStatement16094); if (state.failed) return retval;
			if ( state.backtracking==0 ) {
			SEMICOLON741_tree = (XQDTCommonTree)adaptor.create(SEMICOLON741);
			adaptor.addChild(root_0, SEMICOLON741_tree);
			}

			}

			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (XQDTCommonTree)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
			retval.tree = (XQDTCommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "p_AssignStatement"


	public static class p_BlockStatement_return extends ParserRuleReturnScope {
		XQDTCommonTree tree;
		@Override
		public XQDTCommonTree getTree() { return tree; }
	};


	// $ANTLR start "p_BlockStatement"
	// XQueryParser.g:1856:1: p_BlockStatement : LBRACKET p_Statements[false] RBRACKET ;
	public final XQueryParser.p_BlockStatement_return p_BlockStatement() throws RecognitionException {
		XQueryParser.p_BlockStatement_return retval = new XQueryParser.p_BlockStatement_return();
		retval.start = input.LT(1);

		XQDTCommonTree root_0 = null;

		CommonToken LBRACKET742=null;
		CommonToken RBRACKET744=null;
		ParserRuleReturnScope p_Statements743 =null;

		XQDTCommonTree LBRACKET742_tree=null;
		XQDTCommonTree RBRACKET744_tree=null;

		try {
			// XQueryParser.g:1857:9: ( LBRACKET p_Statements[false] RBRACKET )
			// XQueryParser.g:1857:11: LBRACKET p_Statements[false] RBRACKET
			{
			root_0 = (XQDTCommonTree)adaptor.nil();


			LBRACKET742=(CommonToken)match(input,LBRACKET,FOLLOW_LBRACKET_in_p_BlockStatement16120); if (state.failed) return retval;
			if ( state.backtracking==0 ) {
			LBRACKET742_tree = (XQDTCommonTree)adaptor.create(LBRACKET742);
			adaptor.addChild(root_0, LBRACKET742_tree);
			}

			pushFollow(FOLLOW_p_Statements_in_p_BlockStatement16122);
			p_Statements743=p_Statements(false);
			state._fsp--;
			if (state.failed) return retval;
			if ( state.backtracking==0 ) adaptor.addChild(root_0, p_Statements743.getTree());

			RBRACKET744=(CommonToken)match(input,RBRACKET,FOLLOW_RBRACKET_in_p_BlockStatement16125); if (state.failed) return retval;
			if ( state.backtracking==0 ) {
			RBRACKET744_tree = (XQDTCommonTree)adaptor.create(RBRACKET744);
			adaptor.addChild(root_0, RBRACKET744_tree);
			}

			}

			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (XQDTCommonTree)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
			retval.tree = (XQDTCommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "p_BlockStatement"


	public static class p_BlockHybrid_return extends ParserRuleReturnScope {
		XQDTCommonTree tree;
		@Override
		public XQDTCommonTree getTree() { return tree; }
	};


	// $ANTLR start "p_BlockHybrid"
	// XQueryParser.g:1860:1: p_BlockHybrid[boolean strict] : LBRACKET p_Statements[$strict] RBRACKET ;
	public final XQueryParser.p_BlockHybrid_return p_BlockHybrid(boolean strict) throws RecognitionException {
		XQueryParser.p_BlockHybrid_return retval = new XQueryParser.p_BlockHybrid_return();
		retval.start = input.LT(1);

		XQDTCommonTree root_0 = null;

		CommonToken LBRACKET745=null;
		CommonToken RBRACKET747=null;
		ParserRuleReturnScope p_Statements746 =null;

		XQDTCommonTree LBRACKET745_tree=null;
		XQDTCommonTree RBRACKET747_tree=null;

		try {
			// XQueryParser.g:1861:9: ( LBRACKET p_Statements[$strict] RBRACKET )
			// XQueryParser.g:1861:11: LBRACKET p_Statements[$strict] RBRACKET
			{
			root_0 = (XQDTCommonTree)adaptor.nil();


			LBRACKET745=(CommonToken)match(input,LBRACKET,FOLLOW_LBRACKET_in_p_BlockHybrid16151); if (state.failed) return retval;
			if ( state.backtracking==0 ) {
			LBRACKET745_tree = (XQDTCommonTree)adaptor.create(LBRACKET745);
			adaptor.addChild(root_0, LBRACKET745_tree);
			}

			pushFollow(FOLLOW_p_Statements_in_p_BlockHybrid16153);
			p_Statements746=p_Statements(strict);
			state._fsp--;
			if (state.failed) return retval;
			if ( state.backtracking==0 ) adaptor.addChild(root_0, p_Statements746.getTree());

			RBRACKET747=(CommonToken)match(input,RBRACKET,FOLLOW_RBRACKET_in_p_BlockHybrid16156); if (state.failed) return retval;
			if ( state.backtracking==0 ) {
			RBRACKET747_tree = (XQDTCommonTree)adaptor.create(RBRACKET747);
			adaptor.addChild(root_0, RBRACKET747_tree);
			}

			}

			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (XQDTCommonTree)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
			retval.tree = (XQDTCommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "p_BlockHybrid"


	public static class p_BreakStatement_return extends ParserRuleReturnScope {
		XQDTCommonTree tree;
		@Override
		public XQDTCommonTree getTree() { return tree; }
	};


	// $ANTLR start "p_BreakStatement"
	// XQueryParser.g:1865:1: p_BreakStatement : k= BREAK k= LOOP SEMICOLON ;
	public final XQueryParser.p_BreakStatement_return p_BreakStatement() throws RecognitionException {
		XQueryParser.p_BreakStatement_return retval = new XQueryParser.p_BreakStatement_return();
		retval.start = input.LT(1);

		XQDTCommonTree root_0 = null;

		CommonToken k=null;
		CommonToken SEMICOLON748=null;

		XQDTCommonTree k_tree=null;
		XQDTCommonTree SEMICOLON748_tree=null;

		try {
			// XQueryParser.g:1866:9: (k= BREAK k= LOOP SEMICOLON )
			// XQueryParser.g:1866:11: k= BREAK k= LOOP SEMICOLON
			{
			root_0 = (XQDTCommonTree)adaptor.nil();


			k=(CommonToken)match(input,BREAK,FOLLOW_BREAK_in_p_BreakStatement16184); if (state.failed) return retval;
			if ( state.backtracking==0 ) {
			k_tree = (XQDTCommonTree)adaptor.create(k);
			adaptor.addChild(root_0, k_tree);
			}

			if ( state.backtracking==0 ) {ak(k);}
			k=(CommonToken)match(input,LOOP,FOLLOW_LOOP_in_p_BreakStatement16190); if (state.failed) return retval;
			if ( state.backtracking==0 ) {
			k_tree = (XQDTCommonTree)adaptor.create(k);
			adaptor.addChild(root_0, k_tree);
			}

			if ( state.backtracking==0 ) {ak(k);}
			SEMICOLON748=(CommonToken)match(input,SEMICOLON,FOLLOW_SEMICOLON_in_p_BreakStatement16194); if (state.failed) return retval;
			if ( state.backtracking==0 ) {
			SEMICOLON748_tree = (XQDTCommonTree)adaptor.create(SEMICOLON748);
			adaptor.addChild(root_0, SEMICOLON748_tree);
			}

			}

			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (XQDTCommonTree)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
			retval.tree = (XQDTCommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "p_BreakStatement"


	public static class p_ContinueStatement_return extends ParserRuleReturnScope {
		XQDTCommonTree tree;
		@Override
		public XQDTCommonTree getTree() { return tree; }
	};


	// $ANTLR start "p_ContinueStatement"
	// XQueryParser.g:1870:1: p_ContinueStatement : k= CONTINUE k= LOOP SEMICOLON ;
	public final XQueryParser.p_ContinueStatement_return p_ContinueStatement() throws RecognitionException {
		XQueryParser.p_ContinueStatement_return retval = new XQueryParser.p_ContinueStatement_return();
		retval.start = input.LT(1);

		XQDTCommonTree root_0 = null;

		CommonToken k=null;
		CommonToken SEMICOLON749=null;

		XQDTCommonTree k_tree=null;
		XQDTCommonTree SEMICOLON749_tree=null;

		try {
			// XQueryParser.g:1871:9: (k= CONTINUE k= LOOP SEMICOLON )
			// XQueryParser.g:1871:11: k= CONTINUE k= LOOP SEMICOLON
			{
			root_0 = (XQDTCommonTree)adaptor.nil();


			k=(CommonToken)match(input,CONTINUE,FOLLOW_CONTINUE_in_p_ContinueStatement16222); if (state.failed) return retval;
			if ( state.backtracking==0 ) {
			k_tree = (XQDTCommonTree)adaptor.create(k);
			adaptor.addChild(root_0, k_tree);
			}

			if ( state.backtracking==0 ) {ak(k);}
			k=(CommonToken)match(input,LOOP,FOLLOW_LOOP_in_p_ContinueStatement16228); if (state.failed) return retval;
			if ( state.backtracking==0 ) {
			k_tree = (XQDTCommonTree)adaptor.create(k);
			adaptor.addChild(root_0, k_tree);
			}

			if ( state.backtracking==0 ) {ak(k);}
			SEMICOLON749=(CommonToken)match(input,SEMICOLON,FOLLOW_SEMICOLON_in_p_ContinueStatement16232); if (state.failed) return retval;
			if ( state.backtracking==0 ) {
			SEMICOLON749_tree = (XQDTCommonTree)adaptor.create(SEMICOLON749);
			adaptor.addChild(root_0, SEMICOLON749_tree);
			}

			}

			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (XQDTCommonTree)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
			retval.tree = (XQDTCommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "p_ContinueStatement"


	public static class p_ExitStatement_return extends ParserRuleReturnScope {
		XQDTCommonTree tree;
		@Override
		public XQDTCommonTree getTree() { return tree; }
	};


	// $ANTLR start "p_ExitStatement"
	// XQueryParser.g:1875:1: p_ExitStatement : k= EXIT k= RETURNING p_ExprSingle[true] SEMICOLON ;
	public final XQueryParser.p_ExitStatement_return p_ExitStatement() throws RecognitionException {
		XQueryParser.p_ExitStatement_return retval = new XQueryParser.p_ExitStatement_return();
		retval.start = input.LT(1);

		XQDTCommonTree root_0 = null;

		CommonToken k=null;
		CommonToken SEMICOLON751=null;
		ParserRuleReturnScope p_ExprSingle750 =null;

		XQDTCommonTree k_tree=null;
		XQDTCommonTree SEMICOLON751_tree=null;

		try {
			// XQueryParser.g:1876:9: (k= EXIT k= RETURNING p_ExprSingle[true] SEMICOLON )
			// XQueryParser.g:1876:11: k= EXIT k= RETURNING p_ExprSingle[true] SEMICOLON
			{
			root_0 = (XQDTCommonTree)adaptor.nil();


			k=(CommonToken)match(input,EXIT,FOLLOW_EXIT_in_p_ExitStatement16260); if (state.failed) return retval;
			if ( state.backtracking==0 ) {
			k_tree = (XQDTCommonTree)adaptor.create(k);
			adaptor.addChild(root_0, k_tree);
			}

			if ( state.backtracking==0 ) {ak(k);}
			k=(CommonToken)match(input,RETURNING,FOLLOW_RETURNING_in_p_ExitStatement16266); if (state.failed) return retval;
			if ( state.backtracking==0 ) {
			k_tree = (XQDTCommonTree)adaptor.create(k);
			adaptor.addChild(root_0, k_tree);
			}

			if ( state.backtracking==0 ) {ak(k);}
			pushFollow(FOLLOW_p_ExprSingle_in_p_ExitStatement16270);
			p_ExprSingle750=p_ExprSingle(true);
			state._fsp--;
			if (state.failed) return retval;
			if ( state.backtracking==0 ) adaptor.addChild(root_0, p_ExprSingle750.getTree());

			SEMICOLON751=(CommonToken)match(input,SEMICOLON,FOLLOW_SEMICOLON_in_p_ExitStatement16273); if (state.failed) return retval;
			if ( state.backtracking==0 ) {
			SEMICOLON751_tree = (XQDTCommonTree)adaptor.create(SEMICOLON751);
			adaptor.addChild(root_0, SEMICOLON751_tree);
			}

			}

			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (XQDTCommonTree)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
			retval.tree = (XQDTCommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "p_ExitStatement"


	public static class p_FLWORStatement_return extends ParserRuleReturnScope {
		XQDTCommonTree tree;
		@Override
		public XQDTCommonTree getTree() { return tree; }
	};


	// $ANTLR start "p_FLWORStatement"
	// XQueryParser.g:1880:1: p_FLWORStatement : p_InitialClause ( p_IntermediateClause )* p_ReturnStatement ;
	public final XQueryParser.p_FLWORStatement_return p_FLWORStatement() throws RecognitionException {
		XQueryParser.p_FLWORStatement_return retval = new XQueryParser.p_FLWORStatement_return();
		retval.start = input.LT(1);

		XQDTCommonTree root_0 = null;

		ParserRuleReturnScope p_InitialClause752 =null;
		ParserRuleReturnScope p_IntermediateClause753 =null;
		ParserRuleReturnScope p_ReturnStatement754 =null;


		try {
			// XQueryParser.g:1881:9: ( p_InitialClause ( p_IntermediateClause )* p_ReturnStatement )
			// XQueryParser.g:1881:11: p_InitialClause ( p_IntermediateClause )* p_ReturnStatement
			{
			root_0 = (XQDTCommonTree)adaptor.nil();


			pushFollow(FOLLOW_p_InitialClause_in_p_FLWORStatement16299);
			p_InitialClause752=p_InitialClause();
			state._fsp--;
			if (state.failed) return retval;
			if ( state.backtracking==0 ) adaptor.addChild(root_0, p_InitialClause752.getTree());

			// XQueryParser.g:1881:27: ( p_IntermediateClause )*
			loop239:
			while (true) {
				int alt239=2;
				int LA239_0 = input.LA(1);
				if ( (LA239_0==COUNT||LA239_0==FOR||LA239_0==GROUP||LA239_0==LET||LA239_0==ORDER||LA239_0==STABLE||LA239_0==WHERE) ) {
					alt239=1;
				}

				switch (alt239) {
				case 1 :
					// XQueryParser.g:1881:27: p_IntermediateClause
					{
					pushFollow(FOLLOW_p_IntermediateClause_in_p_FLWORStatement16301);
					p_IntermediateClause753=p_IntermediateClause();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, p_IntermediateClause753.getTree());

					}
					break;

				default :
					break loop239;
				}
			}

			pushFollow(FOLLOW_p_ReturnStatement_in_p_FLWORStatement16304);
			p_ReturnStatement754=p_ReturnStatement();
			state._fsp--;
			if (state.failed) return retval;
			if ( state.backtracking==0 ) adaptor.addChild(root_0, p_ReturnStatement754.getTree());

			}

			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (XQDTCommonTree)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
			retval.tree = (XQDTCommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "p_FLWORStatement"


	public static class p_ReturnStatement_return extends ParserRuleReturnScope {
		XQDTCommonTree tree;
		@Override
		public XQDTCommonTree getTree() { return tree; }
	};


	// $ANTLR start "p_ReturnStatement"
	// XQueryParser.g:1885:1: p_ReturnStatement : k= RETURN p_Hybrid[false,false] ;
	public final XQueryParser.p_ReturnStatement_return p_ReturnStatement() throws RecognitionException {
		XQueryParser.p_ReturnStatement_return retval = new XQueryParser.p_ReturnStatement_return();
		retval.start = input.LT(1);

		XQDTCommonTree root_0 = null;

		CommonToken k=null;
		ParserRuleReturnScope p_Hybrid755 =null;

		XQDTCommonTree k_tree=null;

		try {
			// XQueryParser.g:1886:9: (k= RETURN p_Hybrid[false,false] )
			// XQueryParser.g:1886:11: k= RETURN p_Hybrid[false,false]
			{
			root_0 = (XQDTCommonTree)adaptor.nil();


			k=(CommonToken)match(input,RETURN,FOLLOW_RETURN_in_p_ReturnStatement16336); if (state.failed) return retval;
			if ( state.backtracking==0 ) {
			k_tree = (XQDTCommonTree)adaptor.create(k);
			adaptor.addChild(root_0, k_tree);
			}

			if ( state.backtracking==0 ) {ak(k);}
			pushFollow(FOLLOW_p_Hybrid_in_p_ReturnStatement16340);
			p_Hybrid755=p_Hybrid(false, false);
			state._fsp--;
			if (state.failed) return retval;
			if ( state.backtracking==0 ) adaptor.addChild(root_0, p_Hybrid755.getTree());

			}

			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (XQDTCommonTree)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
			retval.tree = (XQDTCommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "p_ReturnStatement"


	public static class p_IfStatement_return extends ParserRuleReturnScope {
		XQDTCommonTree tree;
		@Override
		public XQDTCommonTree getTree() { return tree; }
	};


	// $ANTLR start "p_IfStatement"
	// XQueryParser.g:1890:1: p_IfStatement : k= IF LPAREN p_Expr[true,true] RPAREN k= THEN p_Hybrid[false,false] k= ELSE p_Hybrid[false,false] ;
	public final XQueryParser.p_IfStatement_return p_IfStatement() throws RecognitionException {
		XQueryParser.p_IfStatement_return retval = new XQueryParser.p_IfStatement_return();
		retval.start = input.LT(1);

		XQDTCommonTree root_0 = null;

		CommonToken k=null;
		CommonToken LPAREN756=null;
		CommonToken RPAREN758=null;
		ParserRuleReturnScope p_Expr757 =null;
		ParserRuleReturnScope p_Hybrid759 =null;
		ParserRuleReturnScope p_Hybrid760 =null;

		XQDTCommonTree k_tree=null;
		XQDTCommonTree LPAREN756_tree=null;
		XQDTCommonTree RPAREN758_tree=null;

		try {
			// XQueryParser.g:1891:9: (k= IF LPAREN p_Expr[true,true] RPAREN k= THEN p_Hybrid[false,false] k= ELSE p_Hybrid[false,false] )
			// XQueryParser.g:1891:11: k= IF LPAREN p_Expr[true,true] RPAREN k= THEN p_Hybrid[false,false] k= ELSE p_Hybrid[false,false]
			{
			root_0 = (XQDTCommonTree)adaptor.nil();


			k=(CommonToken)match(input,IF,FOLLOW_IF_in_p_IfStatement16369); if (state.failed) return retval;
			if ( state.backtracking==0 ) {
			k_tree = (XQDTCommonTree)adaptor.create(k);
			adaptor.addChild(root_0, k_tree);
			}

			if ( state.backtracking==0 ) {ak(k);}
			LPAREN756=(CommonToken)match(input,LPAREN,FOLLOW_LPAREN_in_p_IfStatement16373); if (state.failed) return retval;
			if ( state.backtracking==0 ) {
			LPAREN756_tree = (XQDTCommonTree)adaptor.create(LPAREN756);
			adaptor.addChild(root_0, LPAREN756_tree);
			}

			pushFollow(FOLLOW_p_Expr_in_p_IfStatement16375);
			p_Expr757=p_Expr(true, true);
			state._fsp--;
			if (state.failed) return retval;
			if ( state.backtracking==0 ) adaptor.addChild(root_0, p_Expr757.getTree());

			RPAREN758=(CommonToken)match(input,RPAREN,FOLLOW_RPAREN_in_p_IfStatement16378); if (state.failed) return retval;
			if ( state.backtracking==0 ) {
			RPAREN758_tree = (XQDTCommonTree)adaptor.create(RPAREN758);
			adaptor.addChild(root_0, RPAREN758_tree);
			}

			k=(CommonToken)match(input,THEN,FOLLOW_THEN_in_p_IfStatement16382); if (state.failed) return retval;
			if ( state.backtracking==0 ) {
			k_tree = (XQDTCommonTree)adaptor.create(k);
			adaptor.addChild(root_0, k_tree);
			}

			if ( state.backtracking==0 ) {ak(k);}
			pushFollow(FOLLOW_p_Hybrid_in_p_IfStatement16386);
			p_Hybrid759=p_Hybrid(false, false);
			state._fsp--;
			if (state.failed) return retval;
			if ( state.backtracking==0 ) adaptor.addChild(root_0, p_Hybrid759.getTree());

			k=(CommonToken)match(input,ELSE,FOLLOW_ELSE_in_p_IfStatement16391); if (state.failed) return retval;
			if ( state.backtracking==0 ) {
			k_tree = (XQDTCommonTree)adaptor.create(k);
			adaptor.addChild(root_0, k_tree);
			}

			if ( state.backtracking==0 ) {ak(k);}
			pushFollow(FOLLOW_p_Hybrid_in_p_IfStatement16395);
			p_Hybrid760=p_Hybrid(false, false);
			state._fsp--;
			if (state.failed) return retval;
			if ( state.backtracking==0 ) adaptor.addChild(root_0, p_Hybrid760.getTree());

			}

			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (XQDTCommonTree)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
			retval.tree = (XQDTCommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "p_IfStatement"


	public static class p_SwitchStatement_return extends ParserRuleReturnScope {
		XQDTCommonTree tree;
		@Override
		public XQDTCommonTree getTree() { return tree; }
	};


	// $ANTLR start "p_SwitchStatement"
	// XQueryParser.g:1895:1: p_SwitchStatement : k= SWITCH LPAREN p_Expr[true,true] RPAREN ( p_SwitchCaseStatement )+ k= DEFAULT k= RETURN p_Hybrid[false,false] ;
	public final XQueryParser.p_SwitchStatement_return p_SwitchStatement() throws RecognitionException {
		XQueryParser.p_SwitchStatement_return retval = new XQueryParser.p_SwitchStatement_return();
		retval.start = input.LT(1);

		XQDTCommonTree root_0 = null;

		CommonToken k=null;
		CommonToken LPAREN761=null;
		CommonToken RPAREN763=null;
		ParserRuleReturnScope p_Expr762 =null;
		ParserRuleReturnScope p_SwitchCaseStatement764 =null;
		ParserRuleReturnScope p_Hybrid765 =null;

		XQDTCommonTree k_tree=null;
		XQDTCommonTree LPAREN761_tree=null;
		XQDTCommonTree RPAREN763_tree=null;

		try {
			// XQueryParser.g:1896:9: (k= SWITCH LPAREN p_Expr[true,true] RPAREN ( p_SwitchCaseStatement )+ k= DEFAULT k= RETURN p_Hybrid[false,false] )
			// XQueryParser.g:1896:11: k= SWITCH LPAREN p_Expr[true,true] RPAREN ( p_SwitchCaseStatement )+ k= DEFAULT k= RETURN p_Hybrid[false,false]
			{
			root_0 = (XQDTCommonTree)adaptor.nil();


			k=(CommonToken)match(input,SWITCH,FOLLOW_SWITCH_in_p_SwitchStatement16424); if (state.failed) return retval;
			if ( state.backtracking==0 ) {
			k_tree = (XQDTCommonTree)adaptor.create(k);
			adaptor.addChild(root_0, k_tree);
			}

			if ( state.backtracking==0 ) {ak(k);}
			LPAREN761=(CommonToken)match(input,LPAREN,FOLLOW_LPAREN_in_p_SwitchStatement16428); if (state.failed) return retval;
			if ( state.backtracking==0 ) {
			LPAREN761_tree = (XQDTCommonTree)adaptor.create(LPAREN761);
			adaptor.addChild(root_0, LPAREN761_tree);
			}

			pushFollow(FOLLOW_p_Expr_in_p_SwitchStatement16430);
			p_Expr762=p_Expr(true, true);
			state._fsp--;
			if (state.failed) return retval;
			if ( state.backtracking==0 ) adaptor.addChild(root_0, p_Expr762.getTree());

			RPAREN763=(CommonToken)match(input,RPAREN,FOLLOW_RPAREN_in_p_SwitchStatement16433); if (state.failed) return retval;
			if ( state.backtracking==0 ) {
			RPAREN763_tree = (XQDTCommonTree)adaptor.create(RPAREN763);
			adaptor.addChild(root_0, RPAREN763_tree);
			}

			// XQueryParser.g:1896:62: ( p_SwitchCaseStatement )+
			int cnt240=0;
			loop240:
			while (true) {
				int alt240=2;
				int LA240_0 = input.LA(1);
				if ( (LA240_0==CASE) ) {
					alt240=1;
				}

				switch (alt240) {
				case 1 :
					// XQueryParser.g:1896:62: p_SwitchCaseStatement
					{
					pushFollow(FOLLOW_p_SwitchCaseStatement_in_p_SwitchStatement16435);
					p_SwitchCaseStatement764=p_SwitchCaseStatement();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, p_SwitchCaseStatement764.getTree());

					}
					break;

				default :
					if ( cnt240 >= 1 ) break loop240;
					if (state.backtracking>0) {state.failed=true; return retval;}
					EarlyExitException eee = new EarlyExitException(240, input);
					throw eee;
				}
				cnt240++;
			}

			k=(CommonToken)match(input,DEFAULT,FOLLOW_DEFAULT_in_p_SwitchStatement16440); if (state.failed) return retval;
			if ( state.backtracking==0 ) {
			k_tree = (XQDTCommonTree)adaptor.create(k);
			adaptor.addChild(root_0, k_tree);
			}

			if ( state.backtracking==0 ) {ak(k);}
			k=(CommonToken)match(input,RETURN,FOLLOW_RETURN_in_p_SwitchStatement16446); if (state.failed) return retval;
			if ( state.backtracking==0 ) {
			k_tree = (XQDTCommonTree)adaptor.create(k);
			adaptor.addChild(root_0, k_tree);
			}

			if ( state.backtracking==0 ) {ak(k);}
			pushFollow(FOLLOW_p_Hybrid_in_p_SwitchStatement16450);
			p_Hybrid765=p_Hybrid(false, false);
			state._fsp--;
			if (state.failed) return retval;
			if ( state.backtracking==0 ) adaptor.addChild(root_0, p_Hybrid765.getTree());

			}

			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (XQDTCommonTree)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
			retval.tree = (XQDTCommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "p_SwitchStatement"


	public static class p_SwitchCaseStatement_return extends ParserRuleReturnScope {
		XQDTCommonTree tree;
		@Override
		public XQDTCommonTree getTree() { return tree; }
	};


	// $ANTLR start "p_SwitchCaseStatement"
	// XQueryParser.g:1900:1: p_SwitchCaseStatement : (k= CASE p_SwitchCaseOperand )+ k= RETURN p_Hybrid[false,false] ;
	public final XQueryParser.p_SwitchCaseStatement_return p_SwitchCaseStatement() throws RecognitionException {
		XQueryParser.p_SwitchCaseStatement_return retval = new XQueryParser.p_SwitchCaseStatement_return();
		retval.start = input.LT(1);

		XQDTCommonTree root_0 = null;

		CommonToken k=null;
		ParserRuleReturnScope p_SwitchCaseOperand766 =null;
		ParserRuleReturnScope p_Hybrid767 =null;

		XQDTCommonTree k_tree=null;

		try {
			// XQueryParser.g:1901:9: ( (k= CASE p_SwitchCaseOperand )+ k= RETURN p_Hybrid[false,false] )
			// XQueryParser.g:1901:11: (k= CASE p_SwitchCaseOperand )+ k= RETURN p_Hybrid[false,false]
			{
			root_0 = (XQDTCommonTree)adaptor.nil();


			// XQueryParser.g:1901:11: (k= CASE p_SwitchCaseOperand )+
			int cnt241=0;
			loop241:
			while (true) {
				int alt241=2;
				int LA241_0 = input.LA(1);
				if ( (LA241_0==CASE) ) {
					alt241=1;
				}

				switch (alt241) {
				case 1 :
					// XQueryParser.g:1901:12: k= CASE p_SwitchCaseOperand
					{
					k=(CommonToken)match(input,CASE,FOLLOW_CASE_in_p_SwitchCaseStatement16480); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					k_tree = (XQDTCommonTree)adaptor.create(k);
					adaptor.addChild(root_0, k_tree);
					}

					if ( state.backtracking==0 ) {ak(k);}
					pushFollow(FOLLOW_p_SwitchCaseOperand_in_p_SwitchCaseStatement16484);
					p_SwitchCaseOperand766=p_SwitchCaseOperand();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, p_SwitchCaseOperand766.getTree());

					}
					break;

				default :
					if ( cnt241 >= 1 ) break loop241;
					if (state.backtracking>0) {state.failed=true; return retval;}
					EarlyExitException eee = new EarlyExitException(241, input);
					throw eee;
				}
				cnt241++;
			}

			k=(CommonToken)match(input,RETURN,FOLLOW_RETURN_in_p_SwitchCaseStatement16490); if (state.failed) return retval;
			if ( state.backtracking==0 ) {
			k_tree = (XQDTCommonTree)adaptor.create(k);
			adaptor.addChild(root_0, k_tree);
			}

			if ( state.backtracking==0 ) {ak(k);}
			pushFollow(FOLLOW_p_Hybrid_in_p_SwitchCaseStatement16494);
			p_Hybrid767=p_Hybrid(false, false);
			state._fsp--;
			if (state.failed) return retval;
			if ( state.backtracking==0 ) adaptor.addChild(root_0, p_Hybrid767.getTree());

			}

			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (XQDTCommonTree)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
			retval.tree = (XQDTCommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "p_SwitchCaseStatement"


	public static class p_TryCatchStatement_return extends ParserRuleReturnScope {
		XQDTCommonTree tree;
		@Override
		public XQDTCommonTree getTree() { return tree; }
	};


	// $ANTLR start "p_TryCatchStatement"
	// XQueryParser.g:1905:1: p_TryCatchStatement : k= TRY p_BlockStatement (k= CATCH p_CatchErrorList p_BlockStatement )+ ;
	public final XQueryParser.p_TryCatchStatement_return p_TryCatchStatement() throws RecognitionException {
		XQueryParser.p_TryCatchStatement_return retval = new XQueryParser.p_TryCatchStatement_return();
		retval.start = input.LT(1);

		XQDTCommonTree root_0 = null;

		CommonToken k=null;
		ParserRuleReturnScope p_BlockStatement768 =null;
		ParserRuleReturnScope p_CatchErrorList769 =null;
		ParserRuleReturnScope p_BlockStatement770 =null;

		XQDTCommonTree k_tree=null;

		try {
			// XQueryParser.g:1906:9: (k= TRY p_BlockStatement (k= CATCH p_CatchErrorList p_BlockStatement )+ )
			// XQueryParser.g:1906:11: k= TRY p_BlockStatement (k= CATCH p_CatchErrorList p_BlockStatement )+
			{
			root_0 = (XQDTCommonTree)adaptor.nil();


			k=(CommonToken)match(input,TRY,FOLLOW_TRY_in_p_TryCatchStatement16523); if (state.failed) return retval;
			if ( state.backtracking==0 ) {
			k_tree = (XQDTCommonTree)adaptor.create(k);
			adaptor.addChild(root_0, k_tree);
			}

			if ( state.backtracking==0 ) {ak(k);}
			pushFollow(FOLLOW_p_BlockStatement_in_p_TryCatchStatement16527);
			p_BlockStatement768=p_BlockStatement();
			state._fsp--;
			if (state.failed) return retval;
			if ( state.backtracking==0 ) adaptor.addChild(root_0, p_BlockStatement768.getTree());

			// XQueryParser.g:1906:44: (k= CATCH p_CatchErrorList p_BlockStatement )+
			int cnt242=0;
			loop242:
			while (true) {
				int alt242=2;
				int LA242_0 = input.LA(1);
				if ( (LA242_0==CATCH) ) {
					alt242=1;
				}

				switch (alt242) {
				case 1 :
					// XQueryParser.g:1906:45: k= CATCH p_CatchErrorList p_BlockStatement
					{
					k=(CommonToken)match(input,CATCH,FOLLOW_CATCH_in_p_TryCatchStatement16532); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					k_tree = (XQDTCommonTree)adaptor.create(k);
					adaptor.addChild(root_0, k_tree);
					}

					if ( state.backtracking==0 ) {ak(k);}
					pushFollow(FOLLOW_p_CatchErrorList_in_p_TryCatchStatement16536);
					p_CatchErrorList769=p_CatchErrorList();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, p_CatchErrorList769.getTree());

					pushFollow(FOLLOW_p_BlockStatement_in_p_TryCatchStatement16538);
					p_BlockStatement770=p_BlockStatement();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, p_BlockStatement770.getTree());

					}
					break;

				default :
					if ( cnt242 >= 1 ) break loop242;
					if (state.backtracking>0) {state.failed=true; return retval;}
					EarlyExitException eee = new EarlyExitException(242, input);
					throw eee;
				}
				cnt242++;
			}

			if ( state.backtracking==0 ) {ak(k);}
			}

			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (XQDTCommonTree)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
			retval.tree = (XQDTCommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "p_TryCatchStatement"


	public static class p_TryCatchHybrid_return extends ParserRuleReturnScope {
		XQDTCommonTree tree;
		@Override
		public XQDTCommonTree getTree() { return tree; }
	};


	// $ANTLR start "p_TryCatchHybrid"
	// XQueryParser.g:1909:1: p_TryCatchHybrid[boolean strict] : k= TRY p_BlockHybrid[$strict] (k= CATCH p_CatchErrorList p_BlockHybrid[$strict] )+ ;
	public final XQueryParser.p_TryCatchHybrid_return p_TryCatchHybrid(boolean strict) throws RecognitionException {
		XQueryParser.p_TryCatchHybrid_return retval = new XQueryParser.p_TryCatchHybrid_return();
		retval.start = input.LT(1);

		XQDTCommonTree root_0 = null;

		CommonToken k=null;
		ParserRuleReturnScope p_BlockHybrid771 =null;
		ParserRuleReturnScope p_CatchErrorList772 =null;
		ParserRuleReturnScope p_BlockHybrid773 =null;

		XQDTCommonTree k_tree=null;

		try {
			// XQueryParser.g:1910:9: (k= TRY p_BlockHybrid[$strict] (k= CATCH p_CatchErrorList p_BlockHybrid[$strict] )+ )
			// XQueryParser.g:1910:11: k= TRY p_BlockHybrid[$strict] (k= CATCH p_CatchErrorList p_BlockHybrid[$strict] )+
			{
			root_0 = (XQDTCommonTree)adaptor.nil();


			k=(CommonToken)match(input,TRY,FOLLOW_TRY_in_p_TryCatchHybrid16570); if (state.failed) return retval;
			if ( state.backtracking==0 ) {
			k_tree = (XQDTCommonTree)adaptor.create(k);
			adaptor.addChild(root_0, k_tree);
			}

			if ( state.backtracking==0 ) {ak(k);}
			pushFollow(FOLLOW_p_BlockHybrid_in_p_TryCatchHybrid16574);
			p_BlockHybrid771=p_BlockHybrid(strict);
			state._fsp--;
			if (state.failed) return retval;
			if ( state.backtracking==0 ) adaptor.addChild(root_0, p_BlockHybrid771.getTree());

			// XQueryParser.g:1910:50: (k= CATCH p_CatchErrorList p_BlockHybrid[$strict] )+
			int cnt243=0;
			loop243:
			while (true) {
				int alt243=2;
				int LA243_0 = input.LA(1);
				if ( (LA243_0==CATCH) ) {
					alt243=1;
				}

				switch (alt243) {
				case 1 :
					// XQueryParser.g:1910:51: k= CATCH p_CatchErrorList p_BlockHybrid[$strict]
					{
					k=(CommonToken)match(input,CATCH,FOLLOW_CATCH_in_p_TryCatchHybrid16580); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					k_tree = (XQDTCommonTree)adaptor.create(k);
					adaptor.addChild(root_0, k_tree);
					}

					if ( state.backtracking==0 ) {ak(k);}
					pushFollow(FOLLOW_p_CatchErrorList_in_p_TryCatchHybrid16584);
					p_CatchErrorList772=p_CatchErrorList();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, p_CatchErrorList772.getTree());

					pushFollow(FOLLOW_p_BlockHybrid_in_p_TryCatchHybrid16586);
					p_BlockHybrid773=p_BlockHybrid(strict);
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, p_BlockHybrid773.getTree());

					}
					break;

				default :
					if ( cnt243 >= 1 ) break loop243;
					if (state.backtracking>0) {state.failed=true; return retval;}
					EarlyExitException eee = new EarlyExitException(243, input);
					throw eee;
				}
				cnt243++;
			}

			if ( state.backtracking==0 ) {ak(k);}
			}

			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (XQDTCommonTree)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
			retval.tree = (XQDTCommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "p_TryCatchHybrid"


	public static class p_TypeswitchStatement_return extends ParserRuleReturnScope {
		XQDTCommonTree tree;
		@Override
		public XQDTCommonTree getTree() { return tree; }
	};


	// $ANTLR start "p_TypeswitchStatement"
	// XQueryParser.g:1914:1: p_TypeswitchStatement : k= TYPESWITCH LPAREN p_Expr[true,true] RPAREN ( p_CaseStatement )+ k= DEFAULT ( DOLLAR p_VarName )? k= RETURN p_Hybrid[false,false] ;
	public final XQueryParser.p_TypeswitchStatement_return p_TypeswitchStatement() throws RecognitionException {
		XQueryParser.p_TypeswitchStatement_return retval = new XQueryParser.p_TypeswitchStatement_return();
		retval.start = input.LT(1);

		XQDTCommonTree root_0 = null;

		CommonToken k=null;
		CommonToken LPAREN774=null;
		CommonToken RPAREN776=null;
		CommonToken DOLLAR778=null;
		ParserRuleReturnScope p_Expr775 =null;
		ParserRuleReturnScope p_CaseStatement777 =null;
		ParserRuleReturnScope p_VarName779 =null;
		ParserRuleReturnScope p_Hybrid780 =null;

		XQDTCommonTree k_tree=null;
		XQDTCommonTree LPAREN774_tree=null;
		XQDTCommonTree RPAREN776_tree=null;
		XQDTCommonTree DOLLAR778_tree=null;

		try {
			// XQueryParser.g:1915:9: (k= TYPESWITCH LPAREN p_Expr[true,true] RPAREN ( p_CaseStatement )+ k= DEFAULT ( DOLLAR p_VarName )? k= RETURN p_Hybrid[false,false] )
			// XQueryParser.g:1915:11: k= TYPESWITCH LPAREN p_Expr[true,true] RPAREN ( p_CaseStatement )+ k= DEFAULT ( DOLLAR p_VarName )? k= RETURN p_Hybrid[false,false]
			{
			root_0 = (XQDTCommonTree)adaptor.nil();


			k=(CommonToken)match(input,TYPESWITCH,FOLLOW_TYPESWITCH_in_p_TypeswitchStatement16619); if (state.failed) return retval;
			if ( state.backtracking==0 ) {
			k_tree = (XQDTCommonTree)adaptor.create(k);
			adaptor.addChild(root_0, k_tree);
			}

			if ( state.backtracking==0 ) {ak(k);}
			LPAREN774=(CommonToken)match(input,LPAREN,FOLLOW_LPAREN_in_p_TypeswitchStatement16623); if (state.failed) return retval;
			if ( state.backtracking==0 ) {
			LPAREN774_tree = (XQDTCommonTree)adaptor.create(LPAREN774);
			adaptor.addChild(root_0, LPAREN774_tree);
			}

			pushFollow(FOLLOW_p_Expr_in_p_TypeswitchStatement16625);
			p_Expr775=p_Expr(true, true);
			state._fsp--;
			if (state.failed) return retval;
			if ( state.backtracking==0 ) adaptor.addChild(root_0, p_Expr775.getTree());

			RPAREN776=(CommonToken)match(input,RPAREN,FOLLOW_RPAREN_in_p_TypeswitchStatement16628); if (state.failed) return retval;
			if ( state.backtracking==0 ) {
			RPAREN776_tree = (XQDTCommonTree)adaptor.create(RPAREN776);
			adaptor.addChild(root_0, RPAREN776_tree);
			}

			// XQueryParser.g:1915:66: ( p_CaseStatement )+
			int cnt244=0;
			loop244:
			while (true) {
				int alt244=2;
				int LA244_0 = input.LA(1);
				if ( (LA244_0==CASE) ) {
					alt244=1;
				}

				switch (alt244) {
				case 1 :
					// XQueryParser.g:1915:66: p_CaseStatement
					{
					pushFollow(FOLLOW_p_CaseStatement_in_p_TypeswitchStatement16630);
					p_CaseStatement777=p_CaseStatement();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, p_CaseStatement777.getTree());

					}
					break;

				default :
					if ( cnt244 >= 1 ) break loop244;
					if (state.backtracking>0) {state.failed=true; return retval;}
					EarlyExitException eee = new EarlyExitException(244, input);
					throw eee;
				}
				cnt244++;
			}

			k=(CommonToken)match(input,DEFAULT,FOLLOW_DEFAULT_in_p_TypeswitchStatement16635); if (state.failed) return retval;
			if ( state.backtracking==0 ) {
			k_tree = (XQDTCommonTree)adaptor.create(k);
			adaptor.addChild(root_0, k_tree);
			}

			if ( state.backtracking==0 ) {ak(k);}
			// XQueryParser.g:1915:103: ( DOLLAR p_VarName )?
			int alt245=2;
			int LA245_0 = input.LA(1);
			if ( (LA245_0==DOLLAR) ) {
				alt245=1;
			}
			switch (alt245) {
				case 1 :
					// XQueryParser.g:1915:104: DOLLAR p_VarName
					{
					DOLLAR778=(CommonToken)match(input,DOLLAR,FOLLOW_DOLLAR_in_p_TypeswitchStatement16640); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					DOLLAR778_tree = (XQDTCommonTree)adaptor.create(DOLLAR778);
					adaptor.addChild(root_0, DOLLAR778_tree);
					}

					pushFollow(FOLLOW_p_VarName_in_p_TypeswitchStatement16642);
					p_VarName779=p_VarName();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, p_VarName779.getTree());

					}
					break;

			}

			k=(CommonToken)match(input,RETURN,FOLLOW_RETURN_in_p_TypeswitchStatement16648); if (state.failed) return retval;
			if ( state.backtracking==0 ) {
			k_tree = (XQDTCommonTree)adaptor.create(k);
			adaptor.addChild(root_0, k_tree);
			}

			if ( state.backtracking==0 ) {ak(k);}
			pushFollow(FOLLOW_p_Hybrid_in_p_TypeswitchStatement16652);
			p_Hybrid780=p_Hybrid(false, false);
			state._fsp--;
			if (state.failed) return retval;
			if ( state.backtracking==0 ) adaptor.addChild(root_0, p_Hybrid780.getTree());

			}

			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (XQDTCommonTree)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
			retval.tree = (XQDTCommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "p_TypeswitchStatement"


	public static class p_CaseStatement_return extends ParserRuleReturnScope {
		XQDTCommonTree tree;
		@Override
		public XQDTCommonTree getTree() { return tree; }
	};


	// $ANTLR start "p_CaseStatement"
	// XQueryParser.g:1919:1: p_CaseStatement : k= CASE ( DOLLAR p_VarName AS )? p_SequenceType k= RETURN p_Hybrid[false,false] ;
	public final XQueryParser.p_CaseStatement_return p_CaseStatement() throws RecognitionException {
		XQueryParser.p_CaseStatement_return retval = new XQueryParser.p_CaseStatement_return();
		retval.start = input.LT(1);

		XQDTCommonTree root_0 = null;

		CommonToken k=null;
		CommonToken DOLLAR781=null;
		CommonToken AS783=null;
		ParserRuleReturnScope p_VarName782 =null;
		ParserRuleReturnScope p_SequenceType784 =null;
		ParserRuleReturnScope p_Hybrid785 =null;

		XQDTCommonTree k_tree=null;
		XQDTCommonTree DOLLAR781_tree=null;
		XQDTCommonTree AS783_tree=null;

		try {
			// XQueryParser.g:1920:9: (k= CASE ( DOLLAR p_VarName AS )? p_SequenceType k= RETURN p_Hybrid[false,false] )
			// XQueryParser.g:1920:11: k= CASE ( DOLLAR p_VarName AS )? p_SequenceType k= RETURN p_Hybrid[false,false]
			{
			root_0 = (XQDTCommonTree)adaptor.nil();


			k=(CommonToken)match(input,CASE,FOLLOW_CASE_in_p_CaseStatement16681); if (state.failed) return retval;
			if ( state.backtracking==0 ) {
			k_tree = (XQDTCommonTree)adaptor.create(k);
			adaptor.addChild(root_0, k_tree);
			}

			if ( state.backtracking==0 ) {ak(k);}
			// XQueryParser.g:1920:28: ( DOLLAR p_VarName AS )?
			int alt246=2;
			int LA246_0 = input.LA(1);
			if ( (LA246_0==DOLLAR) ) {
				alt246=1;
			}
			switch (alt246) {
				case 1 :
					// XQueryParser.g:1920:29: DOLLAR p_VarName AS
					{
					DOLLAR781=(CommonToken)match(input,DOLLAR,FOLLOW_DOLLAR_in_p_CaseStatement16686); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					DOLLAR781_tree = (XQDTCommonTree)adaptor.create(DOLLAR781);
					adaptor.addChild(root_0, DOLLAR781_tree);
					}

					pushFollow(FOLLOW_p_VarName_in_p_CaseStatement16688);
					p_VarName782=p_VarName();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, p_VarName782.getTree());

					AS783=(CommonToken)match(input,AS,FOLLOW_AS_in_p_CaseStatement16690); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					AS783_tree = (XQDTCommonTree)adaptor.create(AS783);
					adaptor.addChild(root_0, AS783_tree);
					}

					}
					break;

			}

			pushFollow(FOLLOW_p_SequenceType_in_p_CaseStatement16694);
			p_SequenceType784=p_SequenceType();
			state._fsp--;
			if (state.failed) return retval;
			if ( state.backtracking==0 ) adaptor.addChild(root_0, p_SequenceType784.getTree());

			k=(CommonToken)match(input,RETURN,FOLLOW_RETURN_in_p_CaseStatement16698); if (state.failed) return retval;
			if ( state.backtracking==0 ) {
			k_tree = (XQDTCommonTree)adaptor.create(k);
			adaptor.addChild(root_0, k_tree);
			}

			if ( state.backtracking==0 ) {ak(k);}
			pushFollow(FOLLOW_p_Hybrid_in_p_CaseStatement16702);
			p_Hybrid785=p_Hybrid(false, false);
			state._fsp--;
			if (state.failed) return retval;
			if ( state.backtracking==0 ) adaptor.addChild(root_0, p_Hybrid785.getTree());

			}

			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (XQDTCommonTree)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
			retval.tree = (XQDTCommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "p_CaseStatement"


	public static class p_VarDeclStatement_return extends ParserRuleReturnScope {
		XQDTCommonTree tree;
		@Override
		public XQDTCommonTree getTree() { return tree; }
	};


	// $ANTLR start "p_VarDeclStatement"
	// XQueryParser.g:1924:1: p_VarDeclStatement : ( p_Annotation )* k= VARIABLE DOLLAR p_VarName ( p_TypeDeclaration )? ( BIND p_ExprSingle[true] )? ( COMMA DOLLAR p_VarName ( p_TypeDeclaration )? ( BIND p_ExprSingle[true] )? )* SEMICOLON ;
	public final XQueryParser.p_VarDeclStatement_return p_VarDeclStatement() throws RecognitionException {
		XQueryParser.p_VarDeclStatement_return retval = new XQueryParser.p_VarDeclStatement_return();
		retval.start = input.LT(1);

		XQDTCommonTree root_0 = null;

		CommonToken k=null;
		CommonToken DOLLAR787=null;
		CommonToken BIND790=null;
		CommonToken COMMA792=null;
		CommonToken DOLLAR793=null;
		CommonToken BIND796=null;
		CommonToken SEMICOLON798=null;
		ParserRuleReturnScope p_Annotation786 =null;
		ParserRuleReturnScope p_VarName788 =null;
		ParserRuleReturnScope p_TypeDeclaration789 =null;
		ParserRuleReturnScope p_ExprSingle791 =null;
		ParserRuleReturnScope p_VarName794 =null;
		ParserRuleReturnScope p_TypeDeclaration795 =null;
		ParserRuleReturnScope p_ExprSingle797 =null;

		XQDTCommonTree k_tree=null;
		XQDTCommonTree DOLLAR787_tree=null;
		XQDTCommonTree BIND790_tree=null;
		XQDTCommonTree COMMA792_tree=null;
		XQDTCommonTree DOLLAR793_tree=null;
		XQDTCommonTree BIND796_tree=null;
		XQDTCommonTree SEMICOLON798_tree=null;

		try {
			// XQueryParser.g:1925:9: ( ( p_Annotation )* k= VARIABLE DOLLAR p_VarName ( p_TypeDeclaration )? ( BIND p_ExprSingle[true] )? ( COMMA DOLLAR p_VarName ( p_TypeDeclaration )? ( BIND p_ExprSingle[true] )? )* SEMICOLON )
			// XQueryParser.g:1925:11: ( p_Annotation )* k= VARIABLE DOLLAR p_VarName ( p_TypeDeclaration )? ( BIND p_ExprSingle[true] )? ( COMMA DOLLAR p_VarName ( p_TypeDeclaration )? ( BIND p_ExprSingle[true] )? )* SEMICOLON
			{
			root_0 = (XQDTCommonTree)adaptor.nil();


			// XQueryParser.g:1925:11: ( p_Annotation )*
			loop247:
			while (true) {
				int alt247=2;
				int LA247_0 = input.LA(1);
				if ( (LA247_0==ANN_PERCENT) ) {
					alt247=1;
				}

				switch (alt247) {
				case 1 :
					// XQueryParser.g:1925:11: p_Annotation
					{
					pushFollow(FOLLOW_p_Annotation_in_p_VarDeclStatement16729);
					p_Annotation786=p_Annotation();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, p_Annotation786.getTree());

					}
					break;

				default :
					break loop247;
				}
			}

			k=(CommonToken)match(input,VARIABLE,FOLLOW_VARIABLE_in_p_VarDeclStatement16734); if (state.failed) return retval;
			if ( state.backtracking==0 ) {
			k_tree = (XQDTCommonTree)adaptor.create(k);
			adaptor.addChild(root_0, k_tree);
			}

			if ( state.backtracking==0 ) {ak(k);}
			DOLLAR787=(CommonToken)match(input,DOLLAR,FOLLOW_DOLLAR_in_p_VarDeclStatement16738); if (state.failed) return retval;
			if ( state.backtracking==0 ) {
			DOLLAR787_tree = (XQDTCommonTree)adaptor.create(DOLLAR787);
			adaptor.addChild(root_0, DOLLAR787_tree);
			}

			pushFollow(FOLLOW_p_VarName_in_p_VarDeclStatement16740);
			p_VarName788=p_VarName();
			state._fsp--;
			if (state.failed) return retval;
			if ( state.backtracking==0 ) adaptor.addChild(root_0, p_VarName788.getTree());

			// XQueryParser.g:1925:63: ( p_TypeDeclaration )?
			int alt248=2;
			int LA248_0 = input.LA(1);
			if ( (LA248_0==AS) ) {
				alt248=1;
			}
			switch (alt248) {
				case 1 :
					// XQueryParser.g:1925:63: p_TypeDeclaration
					{
					pushFollow(FOLLOW_p_TypeDeclaration_in_p_VarDeclStatement16742);
					p_TypeDeclaration789=p_TypeDeclaration();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, p_TypeDeclaration789.getTree());

					}
					break;

			}

			// XQueryParser.g:1925:82: ( BIND p_ExprSingle[true] )?
			int alt249=2;
			int LA249_0 = input.LA(1);
			if ( (LA249_0==BIND) ) {
				alt249=1;
			}
			switch (alt249) {
				case 1 :
					// XQueryParser.g:1925:83: BIND p_ExprSingle[true]
					{
					BIND790=(CommonToken)match(input,BIND,FOLLOW_BIND_in_p_VarDeclStatement16746); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					BIND790_tree = (XQDTCommonTree)adaptor.create(BIND790);
					adaptor.addChild(root_0, BIND790_tree);
					}

					pushFollow(FOLLOW_p_ExprSingle_in_p_VarDeclStatement16748);
					p_ExprSingle791=p_ExprSingle(true);
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, p_ExprSingle791.getTree());

					}
					break;

			}

			// XQueryParser.g:1926:11: ( COMMA DOLLAR p_VarName ( p_TypeDeclaration )? ( BIND p_ExprSingle[true] )? )*
			loop252:
			while (true) {
				int alt252=2;
				int LA252_0 = input.LA(1);
				if ( (LA252_0==COMMA) ) {
					alt252=1;
				}

				switch (alt252) {
				case 1 :
					// XQueryParser.g:1926:12: COMMA DOLLAR p_VarName ( p_TypeDeclaration )? ( BIND p_ExprSingle[true] )?
					{
					COMMA792=(CommonToken)match(input,COMMA,FOLLOW_COMMA_in_p_VarDeclStatement16764); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					COMMA792_tree = (XQDTCommonTree)adaptor.create(COMMA792);
					adaptor.addChild(root_0, COMMA792_tree);
					}

					DOLLAR793=(CommonToken)match(input,DOLLAR,FOLLOW_DOLLAR_in_p_VarDeclStatement16766); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					DOLLAR793_tree = (XQDTCommonTree)adaptor.create(DOLLAR793);
					adaptor.addChild(root_0, DOLLAR793_tree);
					}

					pushFollow(FOLLOW_p_VarName_in_p_VarDeclStatement16768);
					p_VarName794=p_VarName();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, p_VarName794.getTree());

					// XQueryParser.g:1926:35: ( p_TypeDeclaration )?
					int alt250=2;
					int LA250_0 = input.LA(1);
					if ( (LA250_0==AS) ) {
						alt250=1;
					}
					switch (alt250) {
						case 1 :
							// XQueryParser.g:1926:35: p_TypeDeclaration
							{
							pushFollow(FOLLOW_p_TypeDeclaration_in_p_VarDeclStatement16770);
							p_TypeDeclaration795=p_TypeDeclaration();
							state._fsp--;
							if (state.failed) return retval;
							if ( state.backtracking==0 ) adaptor.addChild(root_0, p_TypeDeclaration795.getTree());

							}
							break;

					}

					// XQueryParser.g:1926:54: ( BIND p_ExprSingle[true] )?
					int alt251=2;
					int LA251_0 = input.LA(1);
					if ( (LA251_0==BIND) ) {
						alt251=1;
					}
					switch (alt251) {
						case 1 :
							// XQueryParser.g:1926:55: BIND p_ExprSingle[true]
							{
							BIND796=(CommonToken)match(input,BIND,FOLLOW_BIND_in_p_VarDeclStatement16774); if (state.failed) return retval;
							if ( state.backtracking==0 ) {
							BIND796_tree = (XQDTCommonTree)adaptor.create(BIND796);
							adaptor.addChild(root_0, BIND796_tree);
							}

							pushFollow(FOLLOW_p_ExprSingle_in_p_VarDeclStatement16776);
							p_ExprSingle797=p_ExprSingle(true);
							state._fsp--;
							if (state.failed) return retval;
							if ( state.backtracking==0 ) adaptor.addChild(root_0, p_ExprSingle797.getTree());

							}
							break;

					}

					}
					break;

				default :
					break loop252;
				}
			}

			SEMICOLON798=(CommonToken)match(input,SEMICOLON,FOLLOW_SEMICOLON_in_p_VarDeclStatement16793); if (state.failed) return retval;
			if ( state.backtracking==0 ) {
			SEMICOLON798_tree = (XQDTCommonTree)adaptor.create(SEMICOLON798);
			adaptor.addChild(root_0, SEMICOLON798_tree);
			}

			}

			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (XQDTCommonTree)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
			retval.tree = (XQDTCommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "p_VarDeclStatement"


	public static class p_WhileStatement_return extends ParserRuleReturnScope {
		XQDTCommonTree tree;
		@Override
		public XQDTCommonTree getTree() { return tree; }
	};


	// $ANTLR start "p_WhileStatement"
	// XQueryParser.g:1931:1: p_WhileStatement : k= WHILE LPAREN p_Expr[true,true] RPAREN p_Hybrid[false,false] ;
	public final XQueryParser.p_WhileStatement_return p_WhileStatement() throws RecognitionException {
		XQueryParser.p_WhileStatement_return retval = new XQueryParser.p_WhileStatement_return();
		retval.start = input.LT(1);

		XQDTCommonTree root_0 = null;

		CommonToken k=null;
		CommonToken LPAREN799=null;
		CommonToken RPAREN801=null;
		ParserRuleReturnScope p_Expr800 =null;
		ParserRuleReturnScope p_Hybrid802 =null;

		XQDTCommonTree k_tree=null;
		XQDTCommonTree LPAREN799_tree=null;
		XQDTCommonTree RPAREN801_tree=null;

		try {
			// XQueryParser.g:1932:9: (k= WHILE LPAREN p_Expr[true,true] RPAREN p_Hybrid[false,false] )
			// XQueryParser.g:1932:11: k= WHILE LPAREN p_Expr[true,true] RPAREN p_Hybrid[false,false]
			{
			root_0 = (XQDTCommonTree)adaptor.nil();


			k=(CommonToken)match(input,WHILE,FOLLOW_WHILE_in_p_WhileStatement16821); if (state.failed) return retval;
			if ( state.backtracking==0 ) {
			k_tree = (XQDTCommonTree)adaptor.create(k);
			adaptor.addChild(root_0, k_tree);
			}

			if ( state.backtracking==0 ) {ak(k);}
			LPAREN799=(CommonToken)match(input,LPAREN,FOLLOW_LPAREN_in_p_WhileStatement16825); if (state.failed) return retval;
			if ( state.backtracking==0 ) {
			LPAREN799_tree = (XQDTCommonTree)adaptor.create(LPAREN799);
			adaptor.addChild(root_0, LPAREN799_tree);
			}

			pushFollow(FOLLOW_p_Expr_in_p_WhileStatement16827);
			p_Expr800=p_Expr(true, true);
			state._fsp--;
			if (state.failed) return retval;
			if ( state.backtracking==0 ) adaptor.addChild(root_0, p_Expr800.getTree());

			RPAREN801=(CommonToken)match(input,RPAREN,FOLLOW_RPAREN_in_p_WhileStatement16830); if (state.failed) return retval;
			if ( state.backtracking==0 ) {
			RPAREN801_tree = (XQDTCommonTree)adaptor.create(RPAREN801);
			adaptor.addChild(root_0, RPAREN801_tree);
			}

			pushFollow(FOLLOW_p_Hybrid_in_p_WhileStatement16832);
			p_Hybrid802=p_Hybrid(false, false);
			state._fsp--;
			if (state.failed) return retval;
			if ( state.backtracking==0 ) adaptor.addChild(root_0, p_Hybrid802.getTree());

			}

			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (XQDTCommonTree)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
			retval.tree = (XQDTCommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "p_WhileStatement"


	public static class p_ExprSimple_return extends ParserRuleReturnScope {
		XQDTCommonTree tree;
		@Override
		public XQDTCommonTree getTree() { return tree; }
	};


	// $ANTLR start "p_ExprSimple"
	// XQueryParser.g:1936:1: p_ExprSimple : ( p_QuantifiedExpr | p_OrExpr |{...}? => pg_UpdateExpr );
	public final XQueryParser.p_ExprSimple_return p_ExprSimple() throws RecognitionException {
		XQueryParser.p_ExprSimple_return retval = new XQueryParser.p_ExprSimple_return();
		retval.start = input.LT(1);

		XQDTCommonTree root_0 = null;

		ParserRuleReturnScope p_QuantifiedExpr803 =null;
		ParserRuleReturnScope p_OrExpr804 =null;
		ParserRuleReturnScope pg_UpdateExpr805 =null;


		try {
			// XQueryParser.g:1937:9: ( p_QuantifiedExpr | p_OrExpr |{...}? => pg_UpdateExpr )
			int alt253=3;
			switch ( input.LA(1) ) {
			case SOME:
				{
				int LA253_1 = input.LA(2);
				if ( (LA253_1==DOLLAR) ) {
					alt253=1;
				}
				else if ( (LA253_1==EOF||LA253_1==AFTER||LA253_1==AND||(LA253_1 >= AS && LA253_1 <= ASCENDING)||LA253_1==BEFORE||(LA253_1 >= CASE && LA253_1 <= CASTABLE)||LA253_1==COLLATION||LA253_1==COLON||LA253_1==COMMA||LA253_1==CONCAT||LA253_1==CONTAINS||LA253_1==COUNT||LA253_1==DEFAULT||LA253_1==DESCENDING||LA253_1==DIV||LA253_1==EMPTY||LA253_1==END||(LA253_1 >= EQ && LA253_1 <= EQUAL)||LA253_1==EXCEPT||LA253_1==FOR||(LA253_1 >= GE && LA253_1 <= GREATER_GREATER)||LA253_1==GROUP||LA253_1==GT||LA253_1==IDIV||LA253_1==INSTANCE||(LA253_1 >= INTERSECT && LA253_1 <= IS)||LA253_1==LE||LA253_1==LET||(LA253_1 >= LPAREN && LA253_1 <= LT)||LA253_1==MINUS||(LA253_1 >= MOD && LA253_1 <= MODIFY)||LA253_1==NE||LA253_1==NOTEQUAL||LA253_1==ONLY||(LA253_1 >= OR && LA253_1 <= ORDER)||LA253_1==PLUS||LA253_1==RBRACKET||LA253_1==RETURN||(LA253_1 >= RPAREN && LA253_1 <= RSQUARE)||LA253_1==SATISFIES||LA253_1==SEMICOLON||(LA253_1 >= SLASH && LA253_1 <= SLASH_SLASH)||(LA253_1 >= SMALLER && LA253_1 <= SMALLER_SMALLER)||(LA253_1 >= STABLE && LA253_1 <= START)||(LA253_1 >= TO && LA253_1 <= TREAT)||LA253_1==UNION||LA253_1==VBAR||LA253_1==WHERE||LA253_1==WITH) ) {
					alt253=2;
				}

				else {
					if (state.backtracking>0) {state.failed=true; return retval;}
					int nvaeMark = input.mark();
					try {
						input.consume();
						NoViableAltException nvae =
							new NoViableAltException("", 253, 1, input);
						throw nvae;
					} finally {
						input.rewind(nvaeMark);
					}
				}

				}
				break;
			case EVERY:
				{
				int LA253_2 = input.LA(2);
				if ( (LA253_2==DOLLAR) ) {
					alt253=1;
				}
				else if ( (LA253_2==EOF||LA253_2==AFTER||LA253_2==AND||(LA253_2 >= AS && LA253_2 <= ASCENDING)||LA253_2==BEFORE||(LA253_2 >= CASE && LA253_2 <= CASTABLE)||LA253_2==COLLATION||LA253_2==COLON||LA253_2==COMMA||LA253_2==CONCAT||LA253_2==CONTAINS||LA253_2==COUNT||LA253_2==DEFAULT||LA253_2==DESCENDING||LA253_2==DIV||LA253_2==EMPTY||LA253_2==END||(LA253_2 >= EQ && LA253_2 <= EQUAL)||LA253_2==EXCEPT||LA253_2==FOR||(LA253_2 >= GE && LA253_2 <= GREATER_GREATER)||LA253_2==GROUP||LA253_2==GT||LA253_2==IDIV||LA253_2==INSTANCE||(LA253_2 >= INTERSECT && LA253_2 <= IS)||LA253_2==LE||LA253_2==LET||(LA253_2 >= LPAREN && LA253_2 <= LT)||LA253_2==MINUS||(LA253_2 >= MOD && LA253_2 <= MODIFY)||LA253_2==NE||LA253_2==NOTEQUAL||LA253_2==ONLY||(LA253_2 >= OR && LA253_2 <= ORDER)||LA253_2==PLUS||LA253_2==RBRACKET||LA253_2==RETURN||(LA253_2 >= RPAREN && LA253_2 <= RSQUARE)||LA253_2==SATISFIES||LA253_2==SEMICOLON||(LA253_2 >= SLASH && LA253_2 <= SLASH_SLASH)||(LA253_2 >= SMALLER && LA253_2 <= SMALLER_SMALLER)||(LA253_2 >= STABLE && LA253_2 <= START)||(LA253_2 >= TO && LA253_2 <= TREAT)||LA253_2==UNION||LA253_2==VBAR||LA253_2==WHERE||LA253_2==WITH) ) {
					alt253=2;
				}

				else {
					if (state.backtracking>0) {state.failed=true; return retval;}
					int nvaeMark = input.mark();
					try {
						input.consume();
						NoViableAltException nvae =
							new NoViableAltException("", 253, 2, input);
						throw nvae;
					} finally {
						input.rewind(nvaeMark);
					}
				}

				}
				break;
			case AFTER:
			case ALL:
			case ALLOWING:
			case AMP_ER:
			case ANCESTOR:
			case ANCESTOR_OR_SELF:
			case AND:
			case ANY:
			case APOS:
			case APOS_ER:
			case AS:
			case ASCENDING:
			case AT:
			case ATTRIBUTE:
			case ATTR_SIGN:
			case BASE_URI:
			case BEFORE:
			case BINARY:
			case BOUNDARY_SPACE:
			case BREAK:
			case BY:
			case CASE:
			case CAST:
			case CASTABLE:
			case CATCH:
			case CHECK:
			case CHILD:
			case COLLATION:
			case COLLECTION:
			case COMMENT:
			case CONSTRAINT:
			case CONSTRUCTION:
			case CONTAINS:
			case CONTENT:
			case CONTEXT:
			case CONTINUE:
			case COPY_NAMESPACES:
			case COUNT:
			case DECIMAL_FORMAT:
			case DECIMAL_SEPARATOR:
			case DECLARE:
			case DEFAULT:
			case DESCENDANT:
			case DESCENDANT_OR_SELF:
			case DESCENDING:
			case DIACRITICS:
			case DIFFERENT:
			case DIGIT:
			case DISTANCE:
			case DIV:
			case DOCUMENT:
			case DOCUMENT_NODE:
			case DOLLAR:
			case DOT:
			case DOT_DOT:
			case ELEMENT:
			case ELSE:
			case EMPTY:
			case EMPTY_SEQUENCE:
			case ENCODING:
			case END:
			case ENTIRE:
			case EQ:
			case EXACTLY:
			case EXCEPT:
			case EXIT:
			case EXTERNAL:
			case FIRST:
			case FOLLOWING:
			case FOLLOWING_SIBLING:
			case FOR:
			case FOREACH:
			case FOREIGN:
			case FROM:
			case FTAND:
			case FTNOT:
			case FTOR:
			case FT_OPTION:
			case FUNCTION:
			case GE:
			case GREATEST:
			case GROUP:
			case GROUPING_SEPARATOR:
			case GT:
			case IDIV:
			case IF:
			case IMPORT:
			case IN:
			case INDEX:
			case INFINITY:
			case INHERIT:
			case INSENSITIVE:
			case INSTANCE:
			case INTEGRITY:
			case INTERSECT:
			case INTO:
			case IS:
			case ITEM:
			case KEY:
			case LANGUAGE:
			case LAST:
			case LAX:
			case LBRACKET:
			case LE:
			case LEAST:
			case LET:
			case LEVELS:
			case LOOP:
			case LOWERCASE:
			case LPAREN:
			case LT:
			case L_DecimalLiteral:
			case L_DirCommentConstructor:
			case L_DirPIConstructor:
			case L_DoubleLiteral:
			case L_IntegerLiteral:
			case L_NCName:
			case L_Pragma:
			case MINUS:
			case MINUS_SIGN:
			case MOD:
			case MODIFY:
			case MODULE:
			case MOST:
			case NAMESPACE:
			case NAMESPACE_NODE:
			case NAN:
			case NE:
			case NEXT:
			case NO:
			case NODE:
			case NODES:
			case NOT:
			case NO_INHERIT:
			case NO_PRESERVE:
			case OCCURS:
			case OF:
			case ON:
			case ONLY:
			case OPTION:
			case OR:
			case ORDER:
			case ORDERED:
			case ORDERING:
			case PARAGRAPH:
			case PARAGRAPHS:
			case PARENT:
			case PATTERN_SEPARATOR:
			case PERCENT:
			case PER_MILLE:
			case PHRASE:
			case PLUS:
			case PRECEDING:
			case PRECEDING_SIBLING:
			case PRESERVE:
			case PREVIOUS:
			case PRIVATE:
			case PROCESSING_INSTRUCTION:
			case QUOT:
			case QUOT_ER:
			case RELATIONSHIP:
			case RETURN:
			case RETURNING:
			case REVALIDATION:
			case SAME:
			case SATISFIES:
			case SCHEMA:
			case SCHEMA_ATTRIBUTE:
			case SCHEMA_ELEMENT:
			case SCORE:
			case SELF:
			case SENSITIVE:
			case SENTENCE:
			case SENTENCES:
			case SKIP:
			case SLASH:
			case SLASH_SLASH:
			case SLIDING:
			case SMALLER:
			case STABLE:
			case STAR:
			case START:
			case STEMMING:
			case STOP:
			case STRICT:
			case STRIP:
			case SWITCH:
			case TEXT:
			case THEN:
			case THESAURUS:
			case TIMES:
			case TO:
			case TREAT:
			case TRY:
			case TUMBLING:
			case TYPE:
			case TYPESWITCH:
			case UNION:
			case UNIQUE:
			case UNORDERED:
			case UPDATING:
			case UPPERCASE:
			case USING:
			case VALIDATE:
			case VALUE:
			case VARIABLE:
			case VERSION:
			case WEIGHT:
			case WHEN:
			case WHERE:
			case WHILE:
			case WILDCARDS:
			case WINDOW:
			case WITH:
			case WITHOUT:
			case WORD:
			case WORDS:
			case XQUERY:
			case ZERO_DIGIT:
			case EXPLICITLY:
				{
				alt253=2;
				}
				break;
			case INSERT:
				{
				int LA253_4 = input.LA(2);
				if ( (LA253_4==EOF||LA253_4==AFTER||LA253_4==AND||(LA253_4 >= AS && LA253_4 <= ASCENDING)||LA253_4==BEFORE||(LA253_4 >= CASE && LA253_4 <= CASTABLE)||LA253_4==COLLATION||LA253_4==COLON||LA253_4==COMMA||LA253_4==CONCAT||LA253_4==CONTAINS||LA253_4==COUNT||LA253_4==DEFAULT||LA253_4==DESCENDING||LA253_4==DIV||LA253_4==EMPTY||LA253_4==END||(LA253_4 >= EQ && LA253_4 <= EQUAL)||LA253_4==EXCEPT||LA253_4==FOR||(LA253_4 >= GE && LA253_4 <= GREATER_GREATER)||LA253_4==GROUP||LA253_4==GT||LA253_4==IDIV||LA253_4==INSTANCE||(LA253_4 >= INTERSECT && LA253_4 <= IS)||LA253_4==LE||LA253_4==LET||(LA253_4 >= LPAREN && LA253_4 <= LT)||LA253_4==MINUS||(LA253_4 >= MOD && LA253_4 <= MODIFY)||LA253_4==NE||LA253_4==NOTEQUAL||LA253_4==ONLY||(LA253_4 >= OR && LA253_4 <= ORDER)||LA253_4==PLUS||LA253_4==RBRACKET||LA253_4==RETURN||(LA253_4 >= RPAREN && LA253_4 <= RSQUARE)||LA253_4==SATISFIES||LA253_4==SEMICOLON||(LA253_4 >= SLASH && LA253_4 <= SLASH_SLASH)||(LA253_4 >= SMALLER && LA253_4 <= SMALLER_SMALLER)||(LA253_4 >= STABLE && LA253_4 <= START)||(LA253_4 >= TO && LA253_4 <= TREAT)||LA253_4==UNION||LA253_4==VBAR||LA253_4==WHERE||LA253_4==WITH) ) {
					alt253=2;
				}
				else if ( ((LA253_4 >= NODE && LA253_4 <= NODES)) && ((lc(XQU)))) {
					alt253=3;
				}

				}
				break;
			case DELETE:
				{
				int LA253_5 = input.LA(2);
				if ( (LA253_5==EOF||LA253_5==AFTER||LA253_5==AND||(LA253_5 >= AS && LA253_5 <= ASCENDING)||LA253_5==BEFORE||(LA253_5 >= CASE && LA253_5 <= CASTABLE)||LA253_5==COLLATION||LA253_5==COLON||LA253_5==COMMA||LA253_5==CONCAT||LA253_5==CONTAINS||LA253_5==COUNT||LA253_5==DEFAULT||LA253_5==DESCENDING||LA253_5==DIV||LA253_5==EMPTY||LA253_5==END||(LA253_5 >= EQ && LA253_5 <= EQUAL)||LA253_5==EXCEPT||LA253_5==FOR||(LA253_5 >= GE && LA253_5 <= GREATER_GREATER)||LA253_5==GROUP||LA253_5==GT||LA253_5==IDIV||LA253_5==INSTANCE||(LA253_5 >= INTERSECT && LA253_5 <= IS)||LA253_5==LE||LA253_5==LET||(LA253_5 >= LPAREN && LA253_5 <= LT)||LA253_5==MINUS||(LA253_5 >= MOD && LA253_5 <= MODIFY)||LA253_5==NE||LA253_5==NOTEQUAL||LA253_5==ONLY||(LA253_5 >= OR && LA253_5 <= ORDER)||LA253_5==PLUS||LA253_5==RBRACKET||LA253_5==RETURN||(LA253_5 >= RPAREN && LA253_5 <= RSQUARE)||LA253_5==SATISFIES||LA253_5==SEMICOLON||(LA253_5 >= SLASH && LA253_5 <= SLASH_SLASH)||(LA253_5 >= SMALLER && LA253_5 <= SMALLER_SMALLER)||(LA253_5 >= STABLE && LA253_5 <= START)||(LA253_5 >= TO && LA253_5 <= TREAT)||LA253_5==UNION||LA253_5==VBAR||LA253_5==WHERE||LA253_5==WITH) ) {
					alt253=2;
				}
				else if ( ((LA253_5 >= NODE && LA253_5 <= NODES)) && ((lc(XQU)))) {
					alt253=3;
				}

				}
				break;
			case RENAME:
				{
				int LA253_6 = input.LA(2);
				if ( (LA253_6==NODE) && ((lc(XQU)))) {
					alt253=3;
				}
				else if ( (LA253_6==EOF||LA253_6==AFTER||LA253_6==AND||(LA253_6 >= AS && LA253_6 <= ASCENDING)||LA253_6==BEFORE||(LA253_6 >= CASE && LA253_6 <= CASTABLE)||LA253_6==COLLATION||LA253_6==COLON||LA253_6==COMMA||LA253_6==CONCAT||LA253_6==CONTAINS||LA253_6==COUNT||LA253_6==DEFAULT||LA253_6==DESCENDING||LA253_6==DIV||LA253_6==EMPTY||LA253_6==END||(LA253_6 >= EQ && LA253_6 <= EQUAL)||LA253_6==EXCEPT||LA253_6==FOR||(LA253_6 >= GE && LA253_6 <= GREATER_GREATER)||LA253_6==GROUP||LA253_6==GT||LA253_6==IDIV||LA253_6==INSTANCE||(LA253_6 >= INTERSECT && LA253_6 <= IS)||LA253_6==LE||LA253_6==LET||(LA253_6 >= LPAREN && LA253_6 <= LT)||LA253_6==MINUS||(LA253_6 >= MOD && LA253_6 <= MODIFY)||LA253_6==NE||LA253_6==NOTEQUAL||LA253_6==ONLY||(LA253_6 >= OR && LA253_6 <= ORDER)||LA253_6==PLUS||LA253_6==RBRACKET||LA253_6==RETURN||(LA253_6 >= RPAREN && LA253_6 <= RSQUARE)||LA253_6==SATISFIES||LA253_6==SEMICOLON||(LA253_6 >= SLASH && LA253_6 <= SLASH_SLASH)||(LA253_6 >= SMALLER && LA253_6 <= SMALLER_SMALLER)||(LA253_6 >= STABLE && LA253_6 <= START)||(LA253_6 >= TO && LA253_6 <= TREAT)||LA253_6==UNION||LA253_6==VBAR||LA253_6==WHERE||LA253_6==WITH) ) {
					alt253=2;
				}

				else {
					if (state.backtracking>0) {state.failed=true; return retval;}
					int nvaeMark = input.mark();
					try {
						input.consume();
						NoViableAltException nvae =
							new NoViableAltException("", 253, 6, input);
						throw nvae;
					} finally {
						input.rewind(nvaeMark);
					}
				}

				}
				break;
			case REPLACE:
				{
				int LA253_7 = input.LA(2);
				if ( (LA253_7==EOF||LA253_7==AFTER||LA253_7==AND||(LA253_7 >= AS && LA253_7 <= ASCENDING)||LA253_7==BEFORE||(LA253_7 >= CASE && LA253_7 <= CASTABLE)||LA253_7==COLLATION||LA253_7==COLON||LA253_7==COMMA||LA253_7==CONCAT||LA253_7==CONTAINS||LA253_7==COUNT||LA253_7==DEFAULT||LA253_7==DESCENDING||LA253_7==DIV||LA253_7==EMPTY||LA253_7==END||(LA253_7 >= EQ && LA253_7 <= EQUAL)||LA253_7==EXCEPT||LA253_7==FOR||(LA253_7 >= GE && LA253_7 <= GREATER_GREATER)||LA253_7==GROUP||LA253_7==GT||LA253_7==IDIV||LA253_7==INSTANCE||(LA253_7 >= INTERSECT && LA253_7 <= IS)||LA253_7==LE||LA253_7==LET||(LA253_7 >= LPAREN && LA253_7 <= LT)||LA253_7==MINUS||(LA253_7 >= MOD && LA253_7 <= MODIFY)||LA253_7==NE||LA253_7==NOTEQUAL||LA253_7==ONLY||(LA253_7 >= OR && LA253_7 <= ORDER)||LA253_7==PLUS||LA253_7==RBRACKET||LA253_7==RETURN||(LA253_7 >= RPAREN && LA253_7 <= RSQUARE)||LA253_7==SATISFIES||LA253_7==SEMICOLON||(LA253_7 >= SLASH && LA253_7 <= SLASH_SLASH)||(LA253_7 >= SMALLER && LA253_7 <= SMALLER_SMALLER)||(LA253_7 >= STABLE && LA253_7 <= START)||(LA253_7 >= TO && LA253_7 <= TREAT)||LA253_7==UNION||LA253_7==VBAR||LA253_7==WHERE||LA253_7==WITH) ) {
					alt253=2;
				}
				else if ( (LA253_7==NODE||LA253_7==VALUE) && ((lc(XQU)))) {
					alt253=3;
				}

				}
				break;
			case COPY:
				{
				int LA253_8 = input.LA(2);
				if ( (LA253_8==DOLLAR) && ((lc(XQU)))) {
					alt253=3;
				}
				else if ( (LA253_8==EOF||LA253_8==AFTER||LA253_8==AND||(LA253_8 >= AS && LA253_8 <= ASCENDING)||LA253_8==BEFORE||(LA253_8 >= CASE && LA253_8 <= CASTABLE)||LA253_8==COLLATION||LA253_8==COLON||LA253_8==COMMA||LA253_8==CONCAT||LA253_8==CONTAINS||LA253_8==COUNT||LA253_8==DEFAULT||LA253_8==DESCENDING||LA253_8==DIV||LA253_8==EMPTY||LA253_8==END||(LA253_8 >= EQ && LA253_8 <= EQUAL)||LA253_8==EXCEPT||LA253_8==FOR||(LA253_8 >= GE && LA253_8 <= GREATER_GREATER)||LA253_8==GROUP||LA253_8==GT||LA253_8==IDIV||LA253_8==INSTANCE||(LA253_8 >= INTERSECT && LA253_8 <= IS)||LA253_8==LE||LA253_8==LET||(LA253_8 >= LPAREN && LA253_8 <= LT)||LA253_8==MINUS||(LA253_8 >= MOD && LA253_8 <= MODIFY)||LA253_8==NE||LA253_8==NOTEQUAL||LA253_8==ONLY||(LA253_8 >= OR && LA253_8 <= ORDER)||LA253_8==PLUS||LA253_8==RBRACKET||LA253_8==RETURN||(LA253_8 >= RPAREN && LA253_8 <= RSQUARE)||LA253_8==SATISFIES||LA253_8==SEMICOLON||(LA253_8 >= SLASH && LA253_8 <= SLASH_SLASH)||(LA253_8 >= SMALLER && LA253_8 <= SMALLER_SMALLER)||(LA253_8 >= STABLE && LA253_8 <= START)||(LA253_8 >= TO && LA253_8 <= TREAT)||LA253_8==UNION||LA253_8==VBAR||LA253_8==WHERE||LA253_8==WITH) ) {
					alt253=2;
				}

				else {
					if (state.backtracking>0) {state.failed=true; return retval;}
					int nvaeMark = input.mark();
					try {
						input.consume();
						NoViableAltException nvae =
							new NoViableAltException("", 253, 8, input);
						throw nvae;
					} finally {
						input.rewind(nvaeMark);
					}
				}

				}
				break;
			default:
				if (state.backtracking>0) {state.failed=true; return retval;}
				NoViableAltException nvae =
					new NoViableAltException("", 253, 0, input);
				throw nvae;
			}
			switch (alt253) {
				case 1 :
					// XQueryParser.g:1937:11: p_QuantifiedExpr
					{
					root_0 = (XQDTCommonTree)adaptor.nil();


					pushFollow(FOLLOW_p_QuantifiedExpr_in_p_ExprSimple16859);
					p_QuantifiedExpr803=p_QuantifiedExpr();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, p_QuantifiedExpr803.getTree());

					}
					break;
				case 2 :
					// XQueryParser.g:1938:11: p_OrExpr
					{
					root_0 = (XQDTCommonTree)adaptor.nil();


					pushFollow(FOLLOW_p_OrExpr_in_p_ExprSimple16871);
					p_OrExpr804=p_OrExpr();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, p_OrExpr804.getTree());

					}
					break;
				case 3 :
					// XQueryParser.g:1939:11: {...}? => pg_UpdateExpr
					{
					root_0 = (XQDTCommonTree)adaptor.nil();


					if ( !((lc(XQU))) ) {
						if (state.backtracking>0) {state.failed=true; return retval;}
						throw new FailedPredicateException(input, "p_ExprSimple", "lc(XQU)");
					}
					pushFollow(FOLLOW_pg_UpdateExpr_in_p_ExprSimple16886);
					pg_UpdateExpr805=pg_UpdateExpr();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, pg_UpdateExpr805.getTree());

					}
					break;

			}
			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (XQDTCommonTree)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
			retval.tree = (XQDTCommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "p_ExprSimple"


	public static class p_BlockExpr_return extends ParserRuleReturnScope {
		XQDTCommonTree tree;
		@Override
		public XQDTCommonTree getTree() { return tree; }
	};


	// $ANTLR start "p_BlockExpr"
	// XQueryParser.g:1943:1: p_BlockExpr : LBRACKET p_StatementsAndExpr RBRACKET ;
	public final XQueryParser.p_BlockExpr_return p_BlockExpr() throws RecognitionException {
		XQueryParser.p_BlockExpr_return retval = new XQueryParser.p_BlockExpr_return();
		retval.start = input.LT(1);

		XQDTCommonTree root_0 = null;

		CommonToken LBRACKET806=null;
		CommonToken RBRACKET808=null;
		ParserRuleReturnScope p_StatementsAndExpr807 =null;

		XQDTCommonTree LBRACKET806_tree=null;
		XQDTCommonTree RBRACKET808_tree=null;

		try {
			// XQueryParser.g:1944:9: ( LBRACKET p_StatementsAndExpr RBRACKET )
			// XQueryParser.g:1944:11: LBRACKET p_StatementsAndExpr RBRACKET
			{
			root_0 = (XQDTCommonTree)adaptor.nil();


			LBRACKET806=(CommonToken)match(input,LBRACKET,FOLLOW_LBRACKET_in_p_BlockExpr16912); if (state.failed) return retval;
			if ( state.backtracking==0 ) {
			LBRACKET806_tree = (XQDTCommonTree)adaptor.create(LBRACKET806);
			adaptor.addChild(root_0, LBRACKET806_tree);
			}

			pushFollow(FOLLOW_p_StatementsAndExpr_in_p_BlockExpr16914);
			p_StatementsAndExpr807=p_StatementsAndExpr();
			state._fsp--;
			if (state.failed) return retval;
			if ( state.backtracking==0 ) adaptor.addChild(root_0, p_StatementsAndExpr807.getTree());

			RBRACKET808=(CommonToken)match(input,RBRACKET,FOLLOW_RBRACKET_in_p_BlockExpr16916); if (state.failed) return retval;
			if ( state.backtracking==0 ) {
			RBRACKET808_tree = (XQDTCommonTree)adaptor.create(RBRACKET808);
			adaptor.addChild(root_0, RBRACKET808_tree);
			}

			}

			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (XQDTCommonTree)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
			retval.tree = (XQDTCommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "p_BlockExpr"


	public static class p_CollectionDecl_return extends ParserRuleReturnScope {
		XQDTCommonTree tree;
		@Override
		public XQDTCommonTree getTree() { return tree; }
	};


	// $ANTLR start "p_CollectionDecl"
	// XQueryParser.g:1951:1: p_CollectionDecl : k= COLLECTION p_QName ( p_CollectionTypeDecl )? ;
	public final XQueryParser.p_CollectionDecl_return p_CollectionDecl() throws RecognitionException {
		XQueryParser.p_CollectionDecl_return retval = new XQueryParser.p_CollectionDecl_return();
		retval.start = input.LT(1);

		XQDTCommonTree root_0 = null;

		CommonToken k=null;
		ParserRuleReturnScope p_QName809 =null;
		ParserRuleReturnScope p_CollectionTypeDecl810 =null;

		XQDTCommonTree k_tree=null;

		try {
			// XQueryParser.g:1952:9: (k= COLLECTION p_QName ( p_CollectionTypeDecl )? )
			// XQueryParser.g:1952:11: k= COLLECTION p_QName ( p_CollectionTypeDecl )?
			{
			root_0 = (XQDTCommonTree)adaptor.nil();


			k=(CommonToken)match(input,COLLECTION,FOLLOW_COLLECTION_in_p_CollectionDecl16947); if (state.failed) return retval;
			if ( state.backtracking==0 ) {
			k_tree = (XQDTCommonTree)adaptor.create(k);
			adaptor.addChild(root_0, k_tree);
			}

			if ( state.backtracking==0 ) {ak(k);}
			pushFollow(FOLLOW_p_QName_in_p_CollectionDecl16951);
			p_QName809=p_QName();
			state._fsp--;
			if (state.failed) return retval;
			if ( state.backtracking==0 ) adaptor.addChild(root_0, p_QName809.getTree());

			// XQueryParser.g:1952:42: ( p_CollectionTypeDecl )?
			int alt254=2;
			int LA254_0 = input.LA(1);
			if ( (LA254_0==AS) ) {
				alt254=1;
			}
			switch (alt254) {
				case 1 :
					// XQueryParser.g:1952:42: p_CollectionTypeDecl
					{
					pushFollow(FOLLOW_p_CollectionTypeDecl_in_p_CollectionDecl16953);
					p_CollectionTypeDecl810=p_CollectionTypeDecl();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, p_CollectionTypeDecl810.getTree());

					}
					break;

			}

			}

			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (XQDTCommonTree)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
			retval.tree = (XQDTCommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "p_CollectionDecl"


	public static class p_CollectionTypeDecl_return extends ParserRuleReturnScope {
		XQDTCommonTree tree;
		@Override
		public XQDTCommonTree getTree() { return tree; }
	};


	// $ANTLR start "p_CollectionTypeDecl"
	// XQueryParser.g:1955:1: p_CollectionTypeDecl : (k= AS p_KindTest ( ( p_OccurrenceIndicator )=> p_OccurrenceIndicator )? ) ;
	public final XQueryParser.p_CollectionTypeDecl_return p_CollectionTypeDecl() throws RecognitionException {
		XQueryParser.p_CollectionTypeDecl_return retval = new XQueryParser.p_CollectionTypeDecl_return();
		retval.start = input.LT(1);

		XQDTCommonTree root_0 = null;

		CommonToken k=null;
		ParserRuleReturnScope p_KindTest811 =null;
		ParserRuleReturnScope p_OccurrenceIndicator812 =null;

		XQDTCommonTree k_tree=null;

		try {
			// XQueryParser.g:1956:9: ( (k= AS p_KindTest ( ( p_OccurrenceIndicator )=> p_OccurrenceIndicator )? ) )
			// XQueryParser.g:1956:11: (k= AS p_KindTest ( ( p_OccurrenceIndicator )=> p_OccurrenceIndicator )? )
			{
			root_0 = (XQDTCommonTree)adaptor.nil();


			// XQueryParser.g:1956:11: (k= AS p_KindTest ( ( p_OccurrenceIndicator )=> p_OccurrenceIndicator )? )
			// XQueryParser.g:1956:12: k= AS p_KindTest ( ( p_OccurrenceIndicator )=> p_OccurrenceIndicator )?
			{
			k=(CommonToken)match(input,AS,FOLLOW_AS_in_p_CollectionTypeDecl16982); if (state.failed) return retval;
			if ( state.backtracking==0 ) {
			k_tree = (XQDTCommonTree)adaptor.create(k);
			adaptor.addChild(root_0, k_tree);
			}

			if ( state.backtracking==0 ) {ak(k);}
			pushFollow(FOLLOW_p_KindTest_in_p_CollectionTypeDecl16986);
			p_KindTest811=p_KindTest();
			state._fsp--;
			if (state.failed) return retval;
			if ( state.backtracking==0 ) adaptor.addChild(root_0, p_KindTest811.getTree());

			// XQueryParser.g:1956:38: ( ( p_OccurrenceIndicator )=> p_OccurrenceIndicator )?
			int alt255=2;
			int LA255_0 = input.LA(1);
			if ( (LA255_0==PLUS||LA255_0==QUESTION||LA255_0==STAR) && (synpred18_XQueryParser())) {
				alt255=1;
			}
			switch (alt255) {
				case 1 :
					// XQueryParser.g:1956:39: ( p_OccurrenceIndicator )=> p_OccurrenceIndicator
					{
					pushFollow(FOLLOW_p_OccurrenceIndicator_in_p_CollectionTypeDecl16995);
					p_OccurrenceIndicator812=p_OccurrenceIndicator();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, p_OccurrenceIndicator812.getTree());

					}
					break;

			}

			}

			}

			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (XQDTCommonTree)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
			retval.tree = (XQDTCommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "p_CollectionTypeDecl"


	public static class p_IndexDecl_return extends ParserRuleReturnScope {
		XQDTCommonTree tree;
		@Override
		public XQDTCommonTree getTree() { return tree; }
	};


	// $ANTLR start "p_IndexDecl"
	// XQueryParser.g:1959:1: p_IndexDecl : k= INDEX p_IndexName k= ON k= NODES p_IndexDomainExpr k= BY p_IndexKeySpec ( COMMA p_IndexKeySpec )* ;
	public final XQueryParser.p_IndexDecl_return p_IndexDecl() throws RecognitionException {
		XQueryParser.p_IndexDecl_return retval = new XQueryParser.p_IndexDecl_return();
		retval.start = input.LT(1);

		XQDTCommonTree root_0 = null;

		CommonToken k=null;
		CommonToken COMMA816=null;
		ParserRuleReturnScope p_IndexName813 =null;
		ParserRuleReturnScope p_IndexDomainExpr814 =null;
		ParserRuleReturnScope p_IndexKeySpec815 =null;
		ParserRuleReturnScope p_IndexKeySpec817 =null;

		XQDTCommonTree k_tree=null;
		XQDTCommonTree COMMA816_tree=null;

		try {
			// XQueryParser.g:1960:9: (k= INDEX p_IndexName k= ON k= NODES p_IndexDomainExpr k= BY p_IndexKeySpec ( COMMA p_IndexKeySpec )* )
			// XQueryParser.g:1960:11: k= INDEX p_IndexName k= ON k= NODES p_IndexDomainExpr k= BY p_IndexKeySpec ( COMMA p_IndexKeySpec )*
			{
			root_0 = (XQDTCommonTree)adaptor.nil();


			k=(CommonToken)match(input,INDEX,FOLLOW_INDEX_in_p_IndexDecl17025); if (state.failed) return retval;
			if ( state.backtracking==0 ) {
			k_tree = (XQDTCommonTree)adaptor.create(k);
			adaptor.addChild(root_0, k_tree);
			}

			if ( state.backtracking==0 ) {ak(k);}
			pushFollow(FOLLOW_p_IndexName_in_p_IndexDecl17029);
			p_IndexName813=p_IndexName();
			state._fsp--;
			if (state.failed) return retval;
			if ( state.backtracking==0 ) adaptor.addChild(root_0, p_IndexName813.getTree());

			k=(CommonToken)match(input,ON,FOLLOW_ON_in_p_IndexDecl17033); if (state.failed) return retval;
			if ( state.backtracking==0 ) {
			k_tree = (XQDTCommonTree)adaptor.create(k);
			adaptor.addChild(root_0, k_tree);
			}

			if ( state.backtracking==0 ) {ak(k);}
			k=(CommonToken)match(input,NODES,FOLLOW_NODES_in_p_IndexDecl17039); if (state.failed) return retval;
			if ( state.backtracking==0 ) {
			k_tree = (XQDTCommonTree)adaptor.create(k);
			adaptor.addChild(root_0, k_tree);
			}

			if ( state.backtracking==0 ) {ak(k);}
			pushFollow(FOLLOW_p_IndexDomainExpr_in_p_IndexDecl17043);
			p_IndexDomainExpr814=p_IndexDomainExpr();
			state._fsp--;
			if (state.failed) return retval;
			if ( state.backtracking==0 ) adaptor.addChild(root_0, p_IndexDomainExpr814.getTree());

			k=(CommonToken)match(input,BY,FOLLOW_BY_in_p_IndexDecl17047); if (state.failed) return retval;
			if ( state.backtracking==0 ) {
			k_tree = (XQDTCommonTree)adaptor.create(k);
			adaptor.addChild(root_0, k_tree);
			}

			if ( state.backtracking==0 ) {ak(k);}
			pushFollow(FOLLOW_p_IndexKeySpec_in_p_IndexDecl17051);
			p_IndexKeySpec815=p_IndexKeySpec();
			state._fsp--;
			if (state.failed) return retval;
			if ( state.backtracking==0 ) adaptor.addChild(root_0, p_IndexKeySpec815.getTree());

			// XQueryParser.g:1960:122: ( COMMA p_IndexKeySpec )*
			loop256:
			while (true) {
				int alt256=2;
				int LA256_0 = input.LA(1);
				if ( (LA256_0==COMMA) ) {
					alt256=1;
				}

				switch (alt256) {
				case 1 :
					// XQueryParser.g:1960:123: COMMA p_IndexKeySpec
					{
					COMMA816=(CommonToken)match(input,COMMA,FOLLOW_COMMA_in_p_IndexDecl17054); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					COMMA816_tree = (XQDTCommonTree)adaptor.create(COMMA816);
					adaptor.addChild(root_0, COMMA816_tree);
					}

					pushFollow(FOLLOW_p_IndexKeySpec_in_p_IndexDecl17056);
					p_IndexKeySpec817=p_IndexKeySpec();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, p_IndexKeySpec817.getTree());

					}
					break;

				default :
					break loop256;
				}
			}

			}

			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (XQDTCommonTree)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
			retval.tree = (XQDTCommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "p_IndexDecl"


	public static class p_IndexName_return extends ParserRuleReturnScope {
		XQDTCommonTree tree;
		@Override
		public XQDTCommonTree getTree() { return tree; }
	};


	// $ANTLR start "p_IndexName"
	// XQueryParser.g:1963:1: p_IndexName : p_QName ;
	public final XQueryParser.p_IndexName_return p_IndexName() throws RecognitionException {
		XQueryParser.p_IndexName_return retval = new XQueryParser.p_IndexName_return();
		retval.start = input.LT(1);

		XQDTCommonTree root_0 = null;

		ParserRuleReturnScope p_QName818 =null;


		try {
			// XQueryParser.g:1964:9: ( p_QName )
			// XQueryParser.g:1964:11: p_QName
			{
			root_0 = (XQDTCommonTree)adaptor.nil();


			pushFollow(FOLLOW_p_QName_in_p_IndexName17083);
			p_QName818=p_QName();
			state._fsp--;
			if (state.failed) return retval;
			if ( state.backtracking==0 ) adaptor.addChild(root_0, p_QName818.getTree());

			}

			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (XQDTCommonTree)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
			retval.tree = (XQDTCommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "p_IndexName"


	public static class p_IndexDomainExpr_return extends ParserRuleReturnScope {
		XQDTCommonTree tree;
		@Override
		public XQDTCommonTree getTree() { return tree; }
	};


	// $ANTLR start "p_IndexDomainExpr"
	// XQueryParser.g:1967:1: p_IndexDomainExpr : p_PathExpr ;
	public final XQueryParser.p_IndexDomainExpr_return p_IndexDomainExpr() throws RecognitionException {
		XQueryParser.p_IndexDomainExpr_return retval = new XQueryParser.p_IndexDomainExpr_return();
		retval.start = input.LT(1);

		XQDTCommonTree root_0 = null;

		ParserRuleReturnScope p_PathExpr819 =null;


		try {
			// XQueryParser.g:1968:9: ( p_PathExpr )
			// XQueryParser.g:1968:11: p_PathExpr
			{
			root_0 = (XQDTCommonTree)adaptor.nil();


			pushFollow(FOLLOW_p_PathExpr_in_p_IndexDomainExpr17108);
			p_PathExpr819=p_PathExpr();
			state._fsp--;
			if (state.failed) return retval;
			if ( state.backtracking==0 ) adaptor.addChild(root_0, p_PathExpr819.getTree());

			}

			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (XQDTCommonTree)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
			retval.tree = (XQDTCommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "p_IndexDomainExpr"


	public static class p_IndexKeySpec_return extends ParserRuleReturnScope {
		XQDTCommonTree tree;
		@Override
		public XQDTCommonTree getTree() { return tree; }
	};


	// $ANTLR start "p_IndexKeySpec"
	// XQueryParser.g:1971:1: p_IndexKeySpec : p_IndexKeyExpr ( p_IndexKeyTypeDecl )? ( p_IndexKeyCollation )? ;
	public final XQueryParser.p_IndexKeySpec_return p_IndexKeySpec() throws RecognitionException {
		XQueryParser.p_IndexKeySpec_return retval = new XQueryParser.p_IndexKeySpec_return();
		retval.start = input.LT(1);

		XQDTCommonTree root_0 = null;

		ParserRuleReturnScope p_IndexKeyExpr820 =null;
		ParserRuleReturnScope p_IndexKeyTypeDecl821 =null;
		ParserRuleReturnScope p_IndexKeyCollation822 =null;


		try {
			// XQueryParser.g:1972:9: ( p_IndexKeyExpr ( p_IndexKeyTypeDecl )? ( p_IndexKeyCollation )? )
			// XQueryParser.g:1972:11: p_IndexKeyExpr ( p_IndexKeyTypeDecl )? ( p_IndexKeyCollation )?
			{
			root_0 = (XQDTCommonTree)adaptor.nil();


			pushFollow(FOLLOW_p_IndexKeyExpr_in_p_IndexKeySpec17133);
			p_IndexKeyExpr820=p_IndexKeyExpr();
			state._fsp--;
			if (state.failed) return retval;
			if ( state.backtracking==0 ) adaptor.addChild(root_0, p_IndexKeyExpr820.getTree());

			// XQueryParser.g:1972:26: ( p_IndexKeyTypeDecl )?
			int alt257=2;
			int LA257_0 = input.LA(1);
			if ( (LA257_0==AS) ) {
				alt257=1;
			}
			switch (alt257) {
				case 1 :
					// XQueryParser.g:1972:26: p_IndexKeyTypeDecl
					{
					pushFollow(FOLLOW_p_IndexKeyTypeDecl_in_p_IndexKeySpec17135);
					p_IndexKeyTypeDecl821=p_IndexKeyTypeDecl();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, p_IndexKeyTypeDecl821.getTree());

					}
					break;

			}

			// XQueryParser.g:1972:46: ( p_IndexKeyCollation )?
			int alt258=2;
			int LA258_0 = input.LA(1);
			if ( (LA258_0==COLLATION) ) {
				alt258=1;
			}
			switch (alt258) {
				case 1 :
					// XQueryParser.g:1972:46: p_IndexKeyCollation
					{
					pushFollow(FOLLOW_p_IndexKeyCollation_in_p_IndexKeySpec17138);
					p_IndexKeyCollation822=p_IndexKeyCollation();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, p_IndexKeyCollation822.getTree());

					}
					break;

			}

			}

			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (XQDTCommonTree)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
			retval.tree = (XQDTCommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "p_IndexKeySpec"


	public static class p_IndexKeyExpr_return extends ParserRuleReturnScope {
		XQDTCommonTree tree;
		@Override
		public XQDTCommonTree getTree() { return tree; }
	};


	// $ANTLR start "p_IndexKeyExpr"
	// XQueryParser.g:1975:1: p_IndexKeyExpr : p_PathExpr ;
	public final XQueryParser.p_IndexKeyExpr_return p_IndexKeyExpr() throws RecognitionException {
		XQueryParser.p_IndexKeyExpr_return retval = new XQueryParser.p_IndexKeyExpr_return();
		retval.start = input.LT(1);

		XQDTCommonTree root_0 = null;

		ParserRuleReturnScope p_PathExpr823 =null;


		try {
			// XQueryParser.g:1976:9: ( p_PathExpr )
			// XQueryParser.g:1976:11: p_PathExpr
			{
			root_0 = (XQDTCommonTree)adaptor.nil();


			pushFollow(FOLLOW_p_PathExpr_in_p_IndexKeyExpr17164);
			p_PathExpr823=p_PathExpr();
			state._fsp--;
			if (state.failed) return retval;
			if ( state.backtracking==0 ) adaptor.addChild(root_0, p_PathExpr823.getTree());

			}

			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (XQDTCommonTree)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
			retval.tree = (XQDTCommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "p_IndexKeyExpr"


	public static class p_IndexKeyTypeDecl_return extends ParserRuleReturnScope {
		XQDTCommonTree tree;
		@Override
		public XQDTCommonTree getTree() { return tree; }
	};


	// $ANTLR start "p_IndexKeyTypeDecl"
	// XQueryParser.g:1979:1: p_IndexKeyTypeDecl : k= AS p_AtomicType ( p_OccurrenceIndicator )? ;
	public final XQueryParser.p_IndexKeyTypeDecl_return p_IndexKeyTypeDecl() throws RecognitionException {
		XQueryParser.p_IndexKeyTypeDecl_return retval = new XQueryParser.p_IndexKeyTypeDecl_return();
		retval.start = input.LT(1);

		XQDTCommonTree root_0 = null;

		CommonToken k=null;
		ParserRuleReturnScope p_AtomicType824 =null;
		ParserRuleReturnScope p_OccurrenceIndicator825 =null;

		XQDTCommonTree k_tree=null;

		try {
			// XQueryParser.g:1980:9: (k= AS p_AtomicType ( p_OccurrenceIndicator )? )
			// XQueryParser.g:1980:11: k= AS p_AtomicType ( p_OccurrenceIndicator )?
			{
			root_0 = (XQDTCommonTree)adaptor.nil();


			k=(CommonToken)match(input,AS,FOLLOW_AS_in_p_IndexKeyTypeDecl17191); if (state.failed) return retval;
			if ( state.backtracking==0 ) {
			k_tree = (XQDTCommonTree)adaptor.create(k);
			adaptor.addChild(root_0, k_tree);
			}

			if ( state.backtracking==0 ) {ak(k);}
			pushFollow(FOLLOW_p_AtomicType_in_p_IndexKeyTypeDecl17195);
			p_AtomicType824=p_AtomicType();
			state._fsp--;
			if (state.failed) return retval;
			if ( state.backtracking==0 ) adaptor.addChild(root_0, p_AtomicType824.getTree());

			// XQueryParser.g:1980:39: ( p_OccurrenceIndicator )?
			int alt259=2;
			int LA259_0 = input.LA(1);
			if ( (LA259_0==PLUS||LA259_0==QUESTION||LA259_0==STAR) ) {
				alt259=1;
			}
			switch (alt259) {
				case 1 :
					// XQueryParser.g:1980:39: p_OccurrenceIndicator
					{
					pushFollow(FOLLOW_p_OccurrenceIndicator_in_p_IndexKeyTypeDecl17197);
					p_OccurrenceIndicator825=p_OccurrenceIndicator();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, p_OccurrenceIndicator825.getTree());

					}
					break;

			}

			}

			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (XQDTCommonTree)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
			retval.tree = (XQDTCommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "p_IndexKeyTypeDecl"


	public static class p_AtomicType_return extends ParserRuleReturnScope {
		XQDTCommonTree tree;
		@Override
		public XQDTCommonTree getTree() { return tree; }
	};


	// $ANTLR start "p_AtomicType"
	// XQueryParser.g:1983:1: p_AtomicType : p_QName ;
	public final XQueryParser.p_AtomicType_return p_AtomicType() throws RecognitionException {
		XQueryParser.p_AtomicType_return retval = new XQueryParser.p_AtomicType_return();
		retval.start = input.LT(1);

		XQDTCommonTree root_0 = null;

		ParserRuleReturnScope p_QName826 =null;


		try {
			// XQueryParser.g:1984:9: ( p_QName )
			// XQueryParser.g:1984:11: p_QName
			{
			root_0 = (XQDTCommonTree)adaptor.nil();


			pushFollow(FOLLOW_p_QName_in_p_AtomicType17223);
			p_QName826=p_QName();
			state._fsp--;
			if (state.failed) return retval;
			if ( state.backtracking==0 ) adaptor.addChild(root_0, p_QName826.getTree());

			}

			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (XQDTCommonTree)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
			retval.tree = (XQDTCommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "p_AtomicType"


	public static class p_IndexKeyCollation_return extends ParserRuleReturnScope {
		XQDTCommonTree tree;
		@Override
		public XQDTCommonTree getTree() { return tree; }
	};


	// $ANTLR start "p_IndexKeyCollation"
	// XQueryParser.g:1987:1: p_IndexKeyCollation : k= COLLATION p_StringLiteral ;
	public final XQueryParser.p_IndexKeyCollation_return p_IndexKeyCollation() throws RecognitionException {
		XQueryParser.p_IndexKeyCollation_return retval = new XQueryParser.p_IndexKeyCollation_return();
		retval.start = input.LT(1);

		XQDTCommonTree root_0 = null;

		CommonToken k=null;
		ParserRuleReturnScope p_StringLiteral827 =null;

		XQDTCommonTree k_tree=null;

		try {
			// XQueryParser.g:1988:9: (k= COLLATION p_StringLiteral )
			// XQueryParser.g:1988:11: k= COLLATION p_StringLiteral
			{
			root_0 = (XQDTCommonTree)adaptor.nil();


			k=(CommonToken)match(input,COLLATION,FOLLOW_COLLATION_in_p_IndexKeyCollation17250); if (state.failed) return retval;
			if ( state.backtracking==0 ) {
			k_tree = (XQDTCommonTree)adaptor.create(k);
			adaptor.addChild(root_0, k_tree);
			}

			if ( state.backtracking==0 ) {ak(k);}
			pushFollow(FOLLOW_p_StringLiteral_in_p_IndexKeyCollation17254);
			p_StringLiteral827=p_StringLiteral();
			state._fsp--;
			if (state.failed) return retval;
			if ( state.backtracking==0 ) adaptor.addChild(root_0, p_StringLiteral827.getTree());

			}

			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (XQDTCommonTree)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
			retval.tree = (XQDTCommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "p_IndexKeyCollation"


	public static class p_ICDecl_return extends ParserRuleReturnScope {
		XQDTCommonTree tree;
		@Override
		public XQDTCommonTree getTree() { return tree; }
	};


	// $ANTLR start "p_ICDecl"
	// XQueryParser.g:1991:1: p_ICDecl : k= INTEGRITY k= CONSTRAINT p_QName ( p_ICCollection | p_ICForeignKey ) ;
	public final XQueryParser.p_ICDecl_return p_ICDecl() throws RecognitionException {
		XQueryParser.p_ICDecl_return retval = new XQueryParser.p_ICDecl_return();
		retval.start = input.LT(1);

		XQDTCommonTree root_0 = null;

		CommonToken k=null;
		ParserRuleReturnScope p_QName828 =null;
		ParserRuleReturnScope p_ICCollection829 =null;
		ParserRuleReturnScope p_ICForeignKey830 =null;

		XQDTCommonTree k_tree=null;

		try {
			// XQueryParser.g:1992:9: (k= INTEGRITY k= CONSTRAINT p_QName ( p_ICCollection | p_ICForeignKey ) )
			// XQueryParser.g:1992:11: k= INTEGRITY k= CONSTRAINT p_QName ( p_ICCollection | p_ICForeignKey )
			{
			root_0 = (XQDTCommonTree)adaptor.nil();


			k=(CommonToken)match(input,INTEGRITY,FOLLOW_INTEGRITY_in_p_ICDecl17281); if (state.failed) return retval;
			if ( state.backtracking==0 ) {
			k_tree = (XQDTCommonTree)adaptor.create(k);
			adaptor.addChild(root_0, k_tree);
			}

			if ( state.backtracking==0 ) {ak(k);}
			k=(CommonToken)match(input,CONSTRAINT,FOLLOW_CONSTRAINT_in_p_ICDecl17287); if (state.failed) return retval;
			if ( state.backtracking==0 ) {
			k_tree = (XQDTCommonTree)adaptor.create(k);
			adaptor.addChild(root_0, k_tree);
			}

			if ( state.backtracking==0 ) {ak(k);}
			pushFollow(FOLLOW_p_QName_in_p_ICDecl17291);
			p_QName828=p_QName();
			state._fsp--;
			if (state.failed) return retval;
			if ( state.backtracking==0 ) adaptor.addChild(root_0, p_QName828.getTree());

			// XQueryParser.g:1992:64: ( p_ICCollection | p_ICForeignKey )
			int alt260=2;
			int LA260_0 = input.LA(1);
			if ( (LA260_0==ON) ) {
				alt260=1;
			}
			else if ( (LA260_0==FOREIGN) ) {
				alt260=2;
			}

			else {
				if (state.backtracking>0) {state.failed=true; return retval;}
				NoViableAltException nvae =
					new NoViableAltException("", 260, 0, input);
				throw nvae;
			}

			switch (alt260) {
				case 1 :
					// XQueryParser.g:1992:65: p_ICCollection
					{
					pushFollow(FOLLOW_p_ICCollection_in_p_ICDecl17294);
					p_ICCollection829=p_ICCollection();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, p_ICCollection829.getTree());

					}
					break;
				case 2 :
					// XQueryParser.g:1992:82: p_ICForeignKey
					{
					pushFollow(FOLLOW_p_ICForeignKey_in_p_ICDecl17298);
					p_ICForeignKey830=p_ICForeignKey();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, p_ICForeignKey830.getTree());

					}
					break;

			}

			}

			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (XQDTCommonTree)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
			retval.tree = (XQDTCommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "p_ICDecl"


	public static class p_ICCollection_return extends ParserRuleReturnScope {
		XQDTCommonTree tree;
		@Override
		public XQDTCommonTree getTree() { return tree; }
	};


	// $ANTLR start "p_ICCollection"
	// XQueryParser.g:1995:1: p_ICCollection : k= ON k= COLLECTION p_QName ( p_ICCollSequence | p_ICCollSequenceUnique | p_ICCollNode ) ;
	public final XQueryParser.p_ICCollection_return p_ICCollection() throws RecognitionException {
		XQueryParser.p_ICCollection_return retval = new XQueryParser.p_ICCollection_return();
		retval.start = input.LT(1);

		XQDTCommonTree root_0 = null;

		CommonToken k=null;
		ParserRuleReturnScope p_QName831 =null;
		ParserRuleReturnScope p_ICCollSequence832 =null;
		ParserRuleReturnScope p_ICCollSequenceUnique833 =null;
		ParserRuleReturnScope p_ICCollNode834 =null;

		XQDTCommonTree k_tree=null;

		try {
			// XQueryParser.g:1996:9: (k= ON k= COLLECTION p_QName ( p_ICCollSequence | p_ICCollSequenceUnique | p_ICCollNode ) )
			// XQueryParser.g:1996:11: k= ON k= COLLECTION p_QName ( p_ICCollSequence | p_ICCollSequenceUnique | p_ICCollNode )
			{
			root_0 = (XQDTCommonTree)adaptor.nil();


			k=(CommonToken)match(input,ON,FOLLOW_ON_in_p_ICCollection17326); if (state.failed) return retval;
			if ( state.backtracking==0 ) {
			k_tree = (XQDTCommonTree)adaptor.create(k);
			adaptor.addChild(root_0, k_tree);
			}

			if ( state.backtracking==0 ) {ak(k);}
			k=(CommonToken)match(input,COLLECTION,FOLLOW_COLLECTION_in_p_ICCollection17332); if (state.failed) return retval;
			if ( state.backtracking==0 ) {
			k_tree = (XQDTCommonTree)adaptor.create(k);
			adaptor.addChild(root_0, k_tree);
			}

			if ( state.backtracking==0 ) {ak(k);}
			pushFollow(FOLLOW_p_QName_in_p_ICCollection17336);
			p_QName831=p_QName();
			state._fsp--;
			if (state.failed) return retval;
			if ( state.backtracking==0 ) adaptor.addChild(root_0, p_QName831.getTree());

			// XQueryParser.g:1996:57: ( p_ICCollSequence | p_ICCollSequenceUnique | p_ICCollNode )
			int alt261=3;
			switch ( input.LA(1) ) {
			case DOLLAR:
				{
				alt261=1;
				}
				break;
			case NODE:
				{
				alt261=2;
				}
				break;
			case FOREACH:
				{
				alt261=3;
				}
				break;
			default:
				if (state.backtracking>0) {state.failed=true; return retval;}
				NoViableAltException nvae =
					new NoViableAltException("", 261, 0, input);
				throw nvae;
			}
			switch (alt261) {
				case 1 :
					// XQueryParser.g:1996:58: p_ICCollSequence
					{
					pushFollow(FOLLOW_p_ICCollSequence_in_p_ICCollection17339);
					p_ICCollSequence832=p_ICCollSequence();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, p_ICCollSequence832.getTree());

					}
					break;
				case 2 :
					// XQueryParser.g:1996:77: p_ICCollSequenceUnique
					{
					pushFollow(FOLLOW_p_ICCollSequenceUnique_in_p_ICCollection17343);
					p_ICCollSequenceUnique833=p_ICCollSequenceUnique();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, p_ICCollSequenceUnique833.getTree());

					}
					break;
				case 3 :
					// XQueryParser.g:1996:102: p_ICCollNode
					{
					pushFollow(FOLLOW_p_ICCollNode_in_p_ICCollection17347);
					p_ICCollNode834=p_ICCollNode();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, p_ICCollNode834.getTree());

					}
					break;

			}

			}

			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (XQDTCommonTree)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
			retval.tree = (XQDTCommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "p_ICCollection"


	public static class p_ICCollSequence_return extends ParserRuleReturnScope {
		XQDTCommonTree tree;
		@Override
		public XQDTCommonTree getTree() { return tree; }
	};


	// $ANTLR start "p_ICCollSequence"
	// XQueryParser.g:1999:1: p_ICCollSequence : DOLLAR p_QName k= CHECK p_ExprSingle[true] ;
	public final XQueryParser.p_ICCollSequence_return p_ICCollSequence() throws RecognitionException {
		XQueryParser.p_ICCollSequence_return retval = new XQueryParser.p_ICCollSequence_return();
		retval.start = input.LT(1);

		XQDTCommonTree root_0 = null;

		CommonToken k=null;
		CommonToken DOLLAR835=null;
		ParserRuleReturnScope p_QName836 =null;
		ParserRuleReturnScope p_ExprSingle837 =null;

		XQDTCommonTree k_tree=null;
		XQDTCommonTree DOLLAR835_tree=null;

		try {
			// XQueryParser.g:2000:9: ( DOLLAR p_QName k= CHECK p_ExprSingle[true] )
			// XQueryParser.g:2000:11: DOLLAR p_QName k= CHECK p_ExprSingle[true]
			{
			root_0 = (XQDTCommonTree)adaptor.nil();


			DOLLAR835=(CommonToken)match(input,DOLLAR,FOLLOW_DOLLAR_in_p_ICCollSequence17373); if (state.failed) return retval;
			if ( state.backtracking==0 ) {
			DOLLAR835_tree = (XQDTCommonTree)adaptor.create(DOLLAR835);
			adaptor.addChild(root_0, DOLLAR835_tree);
			}

			pushFollow(FOLLOW_p_QName_in_p_ICCollSequence17375);
			p_QName836=p_QName();
			state._fsp--;
			if (state.failed) return retval;
			if ( state.backtracking==0 ) adaptor.addChild(root_0, p_QName836.getTree());

			k=(CommonToken)match(input,CHECK,FOLLOW_CHECK_in_p_ICCollSequence17379); if (state.failed) return retval;
			if ( state.backtracking==0 ) {
			k_tree = (XQDTCommonTree)adaptor.create(k);
			adaptor.addChild(root_0, k_tree);
			}

			if ( state.backtracking==0 ) {ak(k);}
			pushFollow(FOLLOW_p_ExprSingle_in_p_ICCollSequence17383);
			p_ExprSingle837=p_ExprSingle(true);
			state._fsp--;
			if (state.failed) return retval;
			if ( state.backtracking==0 ) adaptor.addChild(root_0, p_ExprSingle837.getTree());

			}

			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (XQDTCommonTree)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
			retval.tree = (XQDTCommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "p_ICCollSequence"


	public static class p_ICCollSequenceUnique_return extends ParserRuleReturnScope {
		XQDTCommonTree tree;
		@Override
		public XQDTCommonTree getTree() { return tree; }
	};


	// $ANTLR start "p_ICCollSequenceUnique"
	// XQueryParser.g:2003:1: p_ICCollSequenceUnique : k= NODE DOLLAR p_QName k= CHECK k= UNIQUE k= KEY p_PathExpr ;
	public final XQueryParser.p_ICCollSequenceUnique_return p_ICCollSequenceUnique() throws RecognitionException {
		XQueryParser.p_ICCollSequenceUnique_return retval = new XQueryParser.p_ICCollSequenceUnique_return();
		retval.start = input.LT(1);

		XQDTCommonTree root_0 = null;

		CommonToken k=null;
		CommonToken DOLLAR838=null;
		ParserRuleReturnScope p_QName839 =null;
		ParserRuleReturnScope p_PathExpr840 =null;

		XQDTCommonTree k_tree=null;
		XQDTCommonTree DOLLAR838_tree=null;

		try {
			// XQueryParser.g:2004:9: (k= NODE DOLLAR p_QName k= CHECK k= UNIQUE k= KEY p_PathExpr )
			// XQueryParser.g:2004:11: k= NODE DOLLAR p_QName k= CHECK k= UNIQUE k= KEY p_PathExpr
			{
			root_0 = (XQDTCommonTree)adaptor.nil();


			k=(CommonToken)match(input,NODE,FOLLOW_NODE_in_p_ICCollSequenceUnique17411); if (state.failed) return retval;
			if ( state.backtracking==0 ) {
			k_tree = (XQDTCommonTree)adaptor.create(k);
			adaptor.addChild(root_0, k_tree);
			}

			if ( state.backtracking==0 ) {ak(k);}
			DOLLAR838=(CommonToken)match(input,DOLLAR,FOLLOW_DOLLAR_in_p_ICCollSequenceUnique17415); if (state.failed) return retval;
			if ( state.backtracking==0 ) {
			DOLLAR838_tree = (XQDTCommonTree)adaptor.create(DOLLAR838);
			adaptor.addChild(root_0, DOLLAR838_tree);
			}

			pushFollow(FOLLOW_p_QName_in_p_ICCollSequenceUnique17417);
			p_QName839=p_QName();
			state._fsp--;
			if (state.failed) return retval;
			if ( state.backtracking==0 ) adaptor.addChild(root_0, p_QName839.getTree());

			k=(CommonToken)match(input,CHECK,FOLLOW_CHECK_in_p_ICCollSequenceUnique17421); if (state.failed) return retval;
			if ( state.backtracking==0 ) {
			k_tree = (XQDTCommonTree)adaptor.create(k);
			adaptor.addChild(root_0, k_tree);
			}

			if ( state.backtracking==0 ) {ak(k);}
			k=(CommonToken)match(input,UNIQUE,FOLLOW_UNIQUE_in_p_ICCollSequenceUnique17427); if (state.failed) return retval;
			if ( state.backtracking==0 ) {
			k_tree = (XQDTCommonTree)adaptor.create(k);
			adaptor.addChild(root_0, k_tree);
			}

			if ( state.backtracking==0 ) {ak(k);}
			k=(CommonToken)match(input,KEY,FOLLOW_KEY_in_p_ICCollSequenceUnique17433); if (state.failed) return retval;
			if ( state.backtracking==0 ) {
			k_tree = (XQDTCommonTree)adaptor.create(k);
			adaptor.addChild(root_0, k_tree);
			}

			if ( state.backtracking==0 ) {ak(k);}
			pushFollow(FOLLOW_p_PathExpr_in_p_ICCollSequenceUnique17437);
			p_PathExpr840=p_PathExpr();
			state._fsp--;
			if (state.failed) return retval;
			if ( state.backtracking==0 ) adaptor.addChild(root_0, p_PathExpr840.getTree());

			}

			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (XQDTCommonTree)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
			retval.tree = (XQDTCommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "p_ICCollSequenceUnique"


	public static class p_ICCollNode_return extends ParserRuleReturnScope {
		XQDTCommonTree tree;
		@Override
		public XQDTCommonTree getTree() { return tree; }
	};


	// $ANTLR start "p_ICCollNode"
	// XQueryParser.g:2007:1: p_ICCollNode : k= FOREACH k= NODE DOLLAR p_QName k= CHECK p_ExprSingle[true] ;
	public final XQueryParser.p_ICCollNode_return p_ICCollNode() throws RecognitionException {
		XQueryParser.p_ICCollNode_return retval = new XQueryParser.p_ICCollNode_return();
		retval.start = input.LT(1);

		XQDTCommonTree root_0 = null;

		CommonToken k=null;
		CommonToken DOLLAR841=null;
		ParserRuleReturnScope p_QName842 =null;
		ParserRuleReturnScope p_ExprSingle843 =null;

		XQDTCommonTree k_tree=null;
		XQDTCommonTree DOLLAR841_tree=null;

		try {
			// XQueryParser.g:2008:9: (k= FOREACH k= NODE DOLLAR p_QName k= CHECK p_ExprSingle[true] )
			// XQueryParser.g:2008:11: k= FOREACH k= NODE DOLLAR p_QName k= CHECK p_ExprSingle[true]
			{
			root_0 = (XQDTCommonTree)adaptor.nil();


			k=(CommonToken)match(input,FOREACH,FOLLOW_FOREACH_in_p_ICCollNode17464); if (state.failed) return retval;
			if ( state.backtracking==0 ) {
			k_tree = (XQDTCommonTree)adaptor.create(k);
			adaptor.addChild(root_0, k_tree);
			}

			if ( state.backtracking==0 ) {ak(k);}
			k=(CommonToken)match(input,NODE,FOLLOW_NODE_in_p_ICCollNode17470); if (state.failed) return retval;
			if ( state.backtracking==0 ) {
			k_tree = (XQDTCommonTree)adaptor.create(k);
			adaptor.addChild(root_0, k_tree);
			}

			if ( state.backtracking==0 ) {ak(k);}
			DOLLAR841=(CommonToken)match(input,DOLLAR,FOLLOW_DOLLAR_in_p_ICCollNode17474); if (state.failed) return retval;
			if ( state.backtracking==0 ) {
			DOLLAR841_tree = (XQDTCommonTree)adaptor.create(DOLLAR841);
			adaptor.addChild(root_0, DOLLAR841_tree);
			}

			pushFollow(FOLLOW_p_QName_in_p_ICCollNode17476);
			p_QName842=p_QName();
			state._fsp--;
			if (state.failed) return retval;
			if ( state.backtracking==0 ) adaptor.addChild(root_0, p_QName842.getTree());

			k=(CommonToken)match(input,CHECK,FOLLOW_CHECK_in_p_ICCollNode17480); if (state.failed) return retval;
			if ( state.backtracking==0 ) {
			k_tree = (XQDTCommonTree)adaptor.create(k);
			adaptor.addChild(root_0, k_tree);
			}

			if ( state.backtracking==0 ) {ak(k);}
			pushFollow(FOLLOW_p_ExprSingle_in_p_ICCollNode17484);
			p_ExprSingle843=p_ExprSingle(true);
			state._fsp--;
			if (state.failed) return retval;
			if ( state.backtracking==0 ) adaptor.addChild(root_0, p_ExprSingle843.getTree());

			}

			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (XQDTCommonTree)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
			retval.tree = (XQDTCommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "p_ICCollNode"


	public static class p_ICForeignKey_return extends ParserRuleReturnScope {
		XQDTCommonTree tree;
		@Override
		public XQDTCommonTree getTree() { return tree; }
	};


	// $ANTLR start "p_ICForeignKey"
	// XQueryParser.g:2011:1: p_ICForeignKey : k= FOREIGN k= KEY p_ICForeignKeySource p_ICForeignKeyTarget ;
	public final XQueryParser.p_ICForeignKey_return p_ICForeignKey() throws RecognitionException {
		XQueryParser.p_ICForeignKey_return retval = new XQueryParser.p_ICForeignKey_return();
		retval.start = input.LT(1);

		XQDTCommonTree root_0 = null;

		CommonToken k=null;
		ParserRuleReturnScope p_ICForeignKeySource844 =null;
		ParserRuleReturnScope p_ICForeignKeyTarget845 =null;

		XQDTCommonTree k_tree=null;

		try {
			// XQueryParser.g:2012:9: (k= FOREIGN k= KEY p_ICForeignKeySource p_ICForeignKeyTarget )
			// XQueryParser.g:2012:11: k= FOREIGN k= KEY p_ICForeignKeySource p_ICForeignKeyTarget
			{
			root_0 = (XQDTCommonTree)adaptor.nil();


			k=(CommonToken)match(input,FOREIGN,FOLLOW_FOREIGN_in_p_ICForeignKey17512); if (state.failed) return retval;
			if ( state.backtracking==0 ) {
			k_tree = (XQDTCommonTree)adaptor.create(k);
			adaptor.addChild(root_0, k_tree);
			}

			if ( state.backtracking==0 ) {ak(k);}
			k=(CommonToken)match(input,KEY,FOLLOW_KEY_in_p_ICForeignKey17518); if (state.failed) return retval;
			if ( state.backtracking==0 ) {
			k_tree = (XQDTCommonTree)adaptor.create(k);
			adaptor.addChild(root_0, k_tree);
			}

			if ( state.backtracking==0 ) {ak(k);}
			pushFollow(FOLLOW_p_ICForeignKeySource_in_p_ICForeignKey17522);
			p_ICForeignKeySource844=p_ICForeignKeySource();
			state._fsp--;
			if (state.failed) return retval;
			if ( state.backtracking==0 ) adaptor.addChild(root_0, p_ICForeignKeySource844.getTree());

			pushFollow(FOLLOW_p_ICForeignKeyTarget_in_p_ICForeignKey17524);
			p_ICForeignKeyTarget845=p_ICForeignKeyTarget();
			state._fsp--;
			if (state.failed) return retval;
			if ( state.backtracking==0 ) adaptor.addChild(root_0, p_ICForeignKeyTarget845.getTree());

			}

			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (XQDTCommonTree)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
			retval.tree = (XQDTCommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "p_ICForeignKey"


	public static class p_ICForeignKeySource_return extends ParserRuleReturnScope {
		XQDTCommonTree tree;
		@Override
		public XQDTCommonTree getTree() { return tree; }
	};


	// $ANTLR start "p_ICForeignKeySource"
	// XQueryParser.g:2015:1: p_ICForeignKeySource : k= FROM p_ICForeignKeyValues ;
	public final XQueryParser.p_ICForeignKeySource_return p_ICForeignKeySource() throws RecognitionException {
		XQueryParser.p_ICForeignKeySource_return retval = new XQueryParser.p_ICForeignKeySource_return();
		retval.start = input.LT(1);

		XQDTCommonTree root_0 = null;

		CommonToken k=null;
		ParserRuleReturnScope p_ICForeignKeyValues846 =null;

		XQDTCommonTree k_tree=null;

		try {
			// XQueryParser.g:2016:9: (k= FROM p_ICForeignKeyValues )
			// XQueryParser.g:2016:11: k= FROM p_ICForeignKeyValues
			{
			root_0 = (XQDTCommonTree)adaptor.nil();


			k=(CommonToken)match(input,FROM,FOLLOW_FROM_in_p_ICForeignKeySource17551); if (state.failed) return retval;
			if ( state.backtracking==0 ) {
			k_tree = (XQDTCommonTree)adaptor.create(k);
			adaptor.addChild(root_0, k_tree);
			}

			if ( state.backtracking==0 ) {ak(k);}
			pushFollow(FOLLOW_p_ICForeignKeyValues_in_p_ICForeignKeySource17555);
			p_ICForeignKeyValues846=p_ICForeignKeyValues();
			state._fsp--;
			if (state.failed) return retval;
			if ( state.backtracking==0 ) adaptor.addChild(root_0, p_ICForeignKeyValues846.getTree());

			}

			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (XQDTCommonTree)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
			retval.tree = (XQDTCommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "p_ICForeignKeySource"


	public static class p_ICForeignKeyTarget_return extends ParserRuleReturnScope {
		XQDTCommonTree tree;
		@Override
		public XQDTCommonTree getTree() { return tree; }
	};


	// $ANTLR start "p_ICForeignKeyTarget"
	// XQueryParser.g:2019:1: p_ICForeignKeyTarget : k= TO p_ICForeignKeyValues ;
	public final XQueryParser.p_ICForeignKeyTarget_return p_ICForeignKeyTarget() throws RecognitionException {
		XQueryParser.p_ICForeignKeyTarget_return retval = new XQueryParser.p_ICForeignKeyTarget_return();
		retval.start = input.LT(1);

		XQDTCommonTree root_0 = null;

		CommonToken k=null;
		ParserRuleReturnScope p_ICForeignKeyValues847 =null;

		XQDTCommonTree k_tree=null;

		try {
			// XQueryParser.g:2020:9: (k= TO p_ICForeignKeyValues )
			// XQueryParser.g:2020:11: k= TO p_ICForeignKeyValues
			{
			root_0 = (XQDTCommonTree)adaptor.nil();


			k=(CommonToken)match(input,TO,FOLLOW_TO_in_p_ICForeignKeyTarget17582); if (state.failed) return retval;
			if ( state.backtracking==0 ) {
			k_tree = (XQDTCommonTree)adaptor.create(k);
			adaptor.addChild(root_0, k_tree);
			}

			if ( state.backtracking==0 ) {ak(k);}
			pushFollow(FOLLOW_p_ICForeignKeyValues_in_p_ICForeignKeyTarget17586);
			p_ICForeignKeyValues847=p_ICForeignKeyValues();
			state._fsp--;
			if (state.failed) return retval;
			if ( state.backtracking==0 ) adaptor.addChild(root_0, p_ICForeignKeyValues847.getTree());

			}

			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (XQDTCommonTree)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
			retval.tree = (XQDTCommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "p_ICForeignKeyTarget"


	public static class p_ICForeignKeyValues_return extends ParserRuleReturnScope {
		XQDTCommonTree tree;
		@Override
		public XQDTCommonTree getTree() { return tree; }
	};


	// $ANTLR start "p_ICForeignKeyValues"
	// XQueryParser.g:2023:1: p_ICForeignKeyValues : k= COLLECTION p_QName k= NODE DOLLAR p_QName k= KEY p_PathExpr ;
	public final XQueryParser.p_ICForeignKeyValues_return p_ICForeignKeyValues() throws RecognitionException {
		XQueryParser.p_ICForeignKeyValues_return retval = new XQueryParser.p_ICForeignKeyValues_return();
		retval.start = input.LT(1);

		XQDTCommonTree root_0 = null;

		CommonToken k=null;
		CommonToken DOLLAR849=null;
		ParserRuleReturnScope p_QName848 =null;
		ParserRuleReturnScope p_QName850 =null;
		ParserRuleReturnScope p_PathExpr851 =null;

		XQDTCommonTree k_tree=null;
		XQDTCommonTree DOLLAR849_tree=null;

		try {
			// XQueryParser.g:2024:9: (k= COLLECTION p_QName k= NODE DOLLAR p_QName k= KEY p_PathExpr )
			// XQueryParser.g:2024:11: k= COLLECTION p_QName k= NODE DOLLAR p_QName k= KEY p_PathExpr
			{
			root_0 = (XQDTCommonTree)adaptor.nil();


			k=(CommonToken)match(input,COLLECTION,FOLLOW_COLLECTION_in_p_ICForeignKeyValues17613); if (state.failed) return retval;
			if ( state.backtracking==0 ) {
			k_tree = (XQDTCommonTree)adaptor.create(k);
			adaptor.addChild(root_0, k_tree);
			}

			if ( state.backtracking==0 ) {ak(k);}
			pushFollow(FOLLOW_p_QName_in_p_ICForeignKeyValues17617);
			p_QName848=p_QName();
			state._fsp--;
			if (state.failed) return retval;
			if ( state.backtracking==0 ) adaptor.addChild(root_0, p_QName848.getTree());

			k=(CommonToken)match(input,NODE,FOLLOW_NODE_in_p_ICForeignKeyValues17621); if (state.failed) return retval;
			if ( state.backtracking==0 ) {
			k_tree = (XQDTCommonTree)adaptor.create(k);
			adaptor.addChild(root_0, k_tree);
			}

			if ( state.backtracking==0 ) {ak(k);}
			DOLLAR849=(CommonToken)match(input,DOLLAR,FOLLOW_DOLLAR_in_p_ICForeignKeyValues17625); if (state.failed) return retval;
			if ( state.backtracking==0 ) {
			DOLLAR849_tree = (XQDTCommonTree)adaptor.create(DOLLAR849);
			adaptor.addChild(root_0, DOLLAR849_tree);
			}

			pushFollow(FOLLOW_p_QName_in_p_ICForeignKeyValues17627);
			p_QName850=p_QName();
			state._fsp--;
			if (state.failed) return retval;
			if ( state.backtracking==0 ) adaptor.addChild(root_0, p_QName850.getTree());

			k=(CommonToken)match(input,KEY,FOLLOW_KEY_in_p_ICForeignKeyValues17631); if (state.failed) return retval;
			if ( state.backtracking==0 ) {
			k_tree = (XQDTCommonTree)adaptor.create(k);
			adaptor.addChild(root_0, k_tree);
			}

			if ( state.backtracking==0 ) {ak(k);}
			pushFollow(FOLLOW_p_PathExpr_in_p_ICForeignKeyValues17635);
			p_PathExpr851=p_PathExpr();
			state._fsp--;
			if (state.failed) return retval;
			if ( state.backtracking==0 ) adaptor.addChild(root_0, p_PathExpr851.getTree());

			}

			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (XQDTCommonTree)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
			retval.tree = (XQDTCommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "p_ICForeignKeyValues"

	// $ANTLR start synpred1_XQueryParser
	public final void synpred1_XQueryParser_fragment() throws RecognitionException {
		// XQueryParser.g:403:11: ( ( ( FOR | LET ) DOLLAR ) | ( FOR ( TUMBLING | SLIDING ) ) )
		int alt262=2;
		int LA262_0 = input.LA(1);
		if ( (LA262_0==FOR) ) {
			int LA262_1 = input.LA(2);
			if ( (LA262_1==DOLLAR) ) {
				alt262=1;
			}
			else if ( (LA262_1==SLIDING||LA262_1==TUMBLING) ) {
				alt262=2;
			}

			else {
				if (state.backtracking>0) {state.failed=true; return;}
				int nvaeMark = input.mark();
				try {
					input.consume();
					NoViableAltException nvae =
						new NoViableAltException("", 262, 1, input);
					throw nvae;
				} finally {
					input.rewind(nvaeMark);
				}
			}

		}
		else if ( (LA262_0==LET) ) {
			alt262=1;
		}

		else {
			if (state.backtracking>0) {state.failed=true; return;}
			NoViableAltException nvae =
				new NoViableAltException("", 262, 0, input);
			throw nvae;
		}

		switch (alt262) {
			case 1 :
				// XQueryParser.g:403:12: ( ( FOR | LET ) DOLLAR )
				{
				// XQueryParser.g:403:12: ( ( FOR | LET ) DOLLAR )
				// XQueryParser.g:403:13: ( FOR | LET ) DOLLAR
				{
				if ( input.LA(1)==FOR||input.LA(1)==LET ) {
					input.consume();
					state.errorRecovery=false;
					state.failed=false;
				}
				else {
					if (state.backtracking>0) {state.failed=true; return;}
					MismatchedSetException mse = new MismatchedSetException(null,input);
					throw mse;
				}
				match(input,DOLLAR,FOLLOW_DOLLAR_in_synpred1_XQueryParser3549); if (state.failed) return;

				}

				}
				break;
			case 2 :
				// XQueryParser.g:403:35: ( FOR ( TUMBLING | SLIDING ) )
				{
				// XQueryParser.g:403:35: ( FOR ( TUMBLING | SLIDING ) )
				// XQueryParser.g:403:36: FOR ( TUMBLING | SLIDING )
				{
				match(input,FOR,FOLLOW_FOR_in_synpred1_XQueryParser3555); if (state.failed) return;

				if ( input.LA(1)==SLIDING||input.LA(1)==TUMBLING ) {
					input.consume();
					state.errorRecovery=false;
					state.failed=false;
				}
				else {
					if (state.backtracking>0) {state.failed=true; return;}
					MismatchedSetException mse = new MismatchedSetException(null,input);
					throw mse;
				}
				}

				}
				break;

		}
	}
	// $ANTLR end synpred1_XQueryParser

	// $ANTLR start synpred2_XQueryParser
	public final void synpred2_XQueryParser_fragment() throws RecognitionException {
		// XQueryParser.g:404:11: ( IF LPAREN )
		// XQueryParser.g:404:12: IF LPAREN
		{
		match(input,IF,FOLLOW_IF_in_synpred2_XQueryParser3583); if (state.failed) return;

		match(input,LPAREN,FOLLOW_LPAREN_in_synpred2_XQueryParser3585); if (state.failed) return;

		}

	}
	// $ANTLR end synpred2_XQueryParser

	// $ANTLR start synpred3_XQueryParser
	public final void synpred3_XQueryParser_fragment() throws RecognitionException {
		// XQueryParser.g:405:11: ( SWITCH LPAREN )
		// XQueryParser.g:405:12: SWITCH LPAREN
		{
		match(input,SWITCH,FOLLOW_SWITCH_in_synpred3_XQueryParser3613); if (state.failed) return;

		match(input,LPAREN,FOLLOW_LPAREN_in_synpred3_XQueryParser3615); if (state.failed) return;

		}

	}
	// $ANTLR end synpred3_XQueryParser

	// $ANTLR start synpred4_XQueryParser
	public final void synpred4_XQueryParser_fragment() throws RecognitionException {
		// XQueryParser.g:406:11: ( TYPESWITCH LPAREN )
		// XQueryParser.g:406:12: TYPESWITCH LPAREN
		{
		match(input,TYPESWITCH,FOLLOW_TYPESWITCH_in_synpred4_XQueryParser3639); if (state.failed) return;

		match(input,LPAREN,FOLLOW_LPAREN_in_synpred4_XQueryParser3641); if (state.failed) return;

		}

	}
	// $ANTLR end synpred4_XQueryParser

	// $ANTLR start synpred5_XQueryParser
	public final void synpred5_XQueryParser_fragment() throws RecognitionException {
		// XQueryParser.g:407:11: ( TRY LBRACKET )
		// XQueryParser.g:407:12: TRY LBRACKET
		{
		match(input,TRY,FOLLOW_TRY_in_synpred5_XQueryParser3661); if (state.failed) return;

		match(input,LBRACKET,FOLLOW_LBRACKET_in_synpred5_XQueryParser3663); if (state.failed) return;

		}

	}
	// $ANTLR end synpred5_XQueryParser

	// $ANTLR start synpred6_XQueryParser
	public final void synpred6_XQueryParser_fragment() throws RecognitionException {
		// XQueryParser.g:692:11: ( VALIDATE ( p_ValidationMode | TYPE )? )
		// XQueryParser.g:692:12: VALIDATE ( p_ValidationMode | TYPE )?
		{
		match(input,VALIDATE,FOLLOW_VALIDATE_in_synpred6_XQueryParser6109); if (state.failed) return;

		// XQueryParser.g:692:21: ( p_ValidationMode | TYPE )?
		int alt263=3;
		int LA263_0 = input.LA(1);
		if ( (LA263_0==LAX||LA263_0==STRICT) ) {
			alt263=1;
		}
		else if ( (LA263_0==TYPE) ) {
			alt263=2;
		}
		switch (alt263) {
			case 1 :
				// XQueryParser.g:692:23: p_ValidationMode
				{
				pushFollow(FOLLOW_p_ValidationMode_in_synpred6_XQueryParser6113);
				p_ValidationMode();
				state._fsp--;
				if (state.failed) return;

				}
				break;
			case 2 :
				// XQueryParser.g:692:42: TYPE
				{
				match(input,TYPE,FOLLOW_TYPE_in_synpred6_XQueryParser6117); if (state.failed) return;

				}
				break;

		}

		}

	}
	// $ANTLR end synpred6_XQueryParser

	// $ANTLR start synpred7_XQueryParser
	public final void synpred7_XQueryParser_fragment() throws RecognitionException {
		// XQueryParser.g:737:11: ( SLASH p_RelativePathExpr )
		// XQueryParser.g:737:12: SLASH p_RelativePathExpr
		{
		match(input,SLASH,FOLLOW_SLASH_in_synpred7_XQueryParser6457); if (state.failed) return;

		pushFollow(FOLLOW_p_RelativePathExpr_in_synpred7_XQueryParser6459);
		p_RelativePathExpr();
		state._fsp--;
		if (state.failed) return;

		}

	}
	// $ANTLR end synpred7_XQueryParser

	// $ANTLR start synpred8_XQueryParser
	public final void synpred8_XQueryParser_fragment() throws RecognitionException {
		// XQueryParser.g:750:11: ( LBRACKET | LPAREN | SMALLER | QUOT | APOS | DOLLAR )
		// XQueryParser.g:
		{
		if ( input.LA(1)==APOS||input.LA(1)==DOLLAR||input.LA(1)==LBRACKET||input.LA(1)==LPAREN||input.LA(1)==QUOT||input.LA(1)==SMALLER ) {
			input.consume();
			state.errorRecovery=false;
			state.failed=false;
		}
		else {
			if (state.backtracking>0) {state.failed=true; return;}
			MismatchedSetException mse = new MismatchedSetException(null,input);
			throw mse;
		}
		}

	}
	// $ANTLR end synpred8_XQueryParser

	// $ANTLR start synpred9_XQueryParser
	public final void synpred9_XQueryParser_fragment() throws RecognitionException {
		// XQueryParser.g:751:11: ( ( ( ELEMENT | ATTRIBUTE ) ( p_QName )? LBRACKET ) | ( ( NAMESPACE | PROCESSING_INSTRUCTION ) ( p_NCName )? LBRACKET ) | ( ( DOCUMENT | TEXT | COMMENT ) LBRACKET ) )
		int alt266=3;
		switch ( input.LA(1) ) {
		case ATTRIBUTE:
		case ELEMENT:
			{
			alt266=1;
			}
			break;
		case NAMESPACE:
		case PROCESSING_INSTRUCTION:
			{
			alt266=2;
			}
			break;
		case COMMENT:
		case DOCUMENT:
		case TEXT:
			{
			alt266=3;
			}
			break;
		default:
			if (state.backtracking>0) {state.failed=true; return;}
			NoViableAltException nvae =
				new NoViableAltException("", 266, 0, input);
			throw nvae;
		}
		switch (alt266) {
			case 1 :
				// XQueryParser.g:752:13: ( ( ELEMENT | ATTRIBUTE ) ( p_QName )? LBRACKET )
				{
				// XQueryParser.g:752:13: ( ( ELEMENT | ATTRIBUTE ) ( p_QName )? LBRACKET )
				// XQueryParser.g:752:14: ( ELEMENT | ATTRIBUTE ) ( p_QName )? LBRACKET
				{
				if ( input.LA(1)==ATTRIBUTE||input.LA(1)==ELEMENT ) {
					input.consume();
					state.errorRecovery=false;
					state.failed=false;
				}
				else {
					if (state.backtracking>0) {state.failed=true; return;}
					MismatchedSetException mse = new MismatchedSetException(null,input);
					throw mse;
				}
				// XQueryParser.g:752:36: ( p_QName )?
				int alt264=2;
				int LA264_0 = input.LA(1);
				if ( ((LA264_0 >= AFTER && LA264_0 <= ALLOWING)||(LA264_0 >= AMP_ER && LA264_0 <= AND)||LA264_0==ANY||(LA264_0 >= APOS_ER && LA264_0 <= ATTRIBUTE)||(LA264_0 >= BASE_URI && LA264_0 <= BINARY)||(LA264_0 >= BOUNDARY_SPACE && LA264_0 <= CATCH)||(LA264_0 >= CHECK && LA264_0 <= CHILD)||(LA264_0 >= COLLATION && LA264_0 <= COLLECTION)||LA264_0==COMMENT||(LA264_0 >= CONSTRAINT && LA264_0 <= DOCUMENT_NODE)||(LA264_0 >= ELEMENT && LA264_0 <= EMPTY)||(LA264_0 >= EMPTY_SEQUENCE && LA264_0 <= EQ)||(LA264_0 >= EVERY && LA264_0 <= GE)||(LA264_0 >= GREATEST && LA264_0 <= GT)||(LA264_0 >= IDIV && LA264_0 <= LAX)||(LA264_0 >= LE && LA264_0 <= LOWERCASE)||LA264_0==LT||LA264_0==L_NCName||(LA264_0 >= MINUS_SIGN && LA264_0 <= NAN)||(LA264_0 >= NE && LA264_0 <= NOT)||(LA264_0 >= NO_INHERIT && LA264_0 <= PHRASE)||(LA264_0 >= PRECEDING && LA264_0 <= PROCESSING_INSTRUCTION)||LA264_0==QUOT_ER||(LA264_0 >= RELATIONSHIP && LA264_0 <= REVALIDATION)||(LA264_0 >= SAME && LA264_0 <= SELF)||(LA264_0 >= SENSITIVE && LA264_0 <= SKIP)||LA264_0==SLIDING||(LA264_0 >= SOME && LA264_0 <= STABLE)||(LA264_0 >= START && LA264_0 <= STRIP)||(LA264_0 >= SWITCH && LA264_0 <= UNORDERED)||(LA264_0 >= UPPERCASE && LA264_0 <= VARIABLE)||(LA264_0 >= VERSION && LA264_0 <= WORDS)||(LA264_0 >= XQUERY && LA264_0 <= ZERO_DIGIT)||LA264_0==EXPLICITLY) ) {
					alt264=1;
				}
				switch (alt264) {
					case 1 :
						// XQueryParser.g:752:36: p_QName
						{
						pushFollow(FOLLOW_p_QName_in_synpred9_XQueryParser6634);
						p_QName();
						state._fsp--;
						if (state.failed) return;

						}
						break;

				}

				match(input,LBRACKET,FOLLOW_LBRACKET_in_synpred9_XQueryParser6637); if (state.failed) return;

				}

				}
				break;
			case 2 :
				// XQueryParser.g:753:13: ( ( NAMESPACE | PROCESSING_INSTRUCTION ) ( p_NCName )? LBRACKET )
				{
				// XQueryParser.g:753:13: ( ( NAMESPACE | PROCESSING_INSTRUCTION ) ( p_NCName )? LBRACKET )
				// XQueryParser.g:753:14: ( NAMESPACE | PROCESSING_INSTRUCTION ) ( p_NCName )? LBRACKET
				{
				if ( input.LA(1)==NAMESPACE||input.LA(1)==PROCESSING_INSTRUCTION ) {
					input.consume();
					state.errorRecovery=false;
					state.failed=false;
				}
				else {
					if (state.backtracking>0) {state.failed=true; return;}
					MismatchedSetException mse = new MismatchedSetException(null,input);
					throw mse;
				}
				// XQueryParser.g:753:51: ( p_NCName )?
				int alt265=2;
				int LA265_0 = input.LA(1);
				if ( ((LA265_0 >= AFTER && LA265_0 <= ALLOWING)||(LA265_0 >= AMP_ER && LA265_0 <= AND)||LA265_0==ANY||(LA265_0 >= APOS_ER && LA265_0 <= ATTRIBUTE)||(LA265_0 >= BASE_URI && LA265_0 <= BINARY)||(LA265_0 >= BOUNDARY_SPACE && LA265_0 <= CATCH)||(LA265_0 >= CHECK && LA265_0 <= CHILD)||(LA265_0 >= COLLATION && LA265_0 <= COLLECTION)||LA265_0==COMMENT||(LA265_0 >= CONSTRAINT && LA265_0 <= DOCUMENT_NODE)||(LA265_0 >= ELEMENT && LA265_0 <= EMPTY)||(LA265_0 >= EMPTY_SEQUENCE && LA265_0 <= EQ)||(LA265_0 >= EVERY && LA265_0 <= GE)||(LA265_0 >= GREATEST && LA265_0 <= GT)||(LA265_0 >= IDIV && LA265_0 <= LAX)||(LA265_0 >= LE && LA265_0 <= LOWERCASE)||LA265_0==LT||LA265_0==L_NCName||(LA265_0 >= MINUS_SIGN && LA265_0 <= NAN)||(LA265_0 >= NE && LA265_0 <= NOT)||(LA265_0 >= NO_INHERIT && LA265_0 <= PHRASE)||(LA265_0 >= PRECEDING && LA265_0 <= PROCESSING_INSTRUCTION)||LA265_0==QUOT_ER||(LA265_0 >= RELATIONSHIP && LA265_0 <= REVALIDATION)||(LA265_0 >= SAME && LA265_0 <= SELF)||(LA265_0 >= SENSITIVE && LA265_0 <= SKIP)||LA265_0==SLIDING||(LA265_0 >= SOME && LA265_0 <= STABLE)||(LA265_0 >= START && LA265_0 <= STRIP)||(LA265_0 >= SWITCH && LA265_0 <= UNORDERED)||(LA265_0 >= UPPERCASE && LA265_0 <= VARIABLE)||(LA265_0 >= VERSION && LA265_0 <= WORDS)||(LA265_0 >= XQUERY && LA265_0 <= ZERO_DIGIT)||LA265_0==EXPLICITLY) ) {
					alt265=1;
				}
				switch (alt265) {
					case 1 :
						// XQueryParser.g:753:51: p_NCName
						{
						pushFollow(FOLLOW_p_NCName_in_synpred9_XQueryParser6663);
						p_NCName();
						state._fsp--;
						if (state.failed) return;

						}
						break;

				}

				match(input,LBRACKET,FOLLOW_LBRACKET_in_synpred9_XQueryParser6666); if (state.failed) return;

				}

				}
				break;
			case 3 :
				// XQueryParser.g:754:13: ( ( DOCUMENT | TEXT | COMMENT ) LBRACKET )
				{
				// XQueryParser.g:754:13: ( ( DOCUMENT | TEXT | COMMENT ) LBRACKET )
				// XQueryParser.g:754:14: ( DOCUMENT | TEXT | COMMENT ) LBRACKET
				{
				if ( input.LA(1)==COMMENT||input.LA(1)==DOCUMENT||input.LA(1)==TEXT ) {
					input.consume();
					state.errorRecovery=false;
					state.failed=false;
				}
				else {
					if (state.backtracking>0) {state.failed=true; return;}
					MismatchedSetException mse = new MismatchedSetException(null,input);
					throw mse;
				}
				match(input,LBRACKET,FOLLOW_LBRACKET_in_synpred9_XQueryParser6696); if (state.failed) return;

				}

				}
				break;

		}
	}
	// $ANTLR end synpred9_XQueryParser

	// $ANTLR start synpred10_XQueryParser
	public final void synpred10_XQueryParser_fragment() throws RecognitionException {
		// XQueryParser.g:756:11: ( p_KindTest )
		// XQueryParser.g:756:12: p_KindTest
		{
		pushFollow(FOLLOW_p_KindTest_in_synpred10_XQueryParser6726);
		p_KindTest();
		state._fsp--;
		if (state.failed) return;

		}

	}
	// $ANTLR end synpred10_XQueryParser

	// $ANTLR start synpred11_XQueryParser
	public final void synpred11_XQueryParser_fragment() throws RecognitionException {
		// XQueryParser.g:757:11: ( p_QName LPAREN )
		// XQueryParser.g:757:12: p_QName LPAREN
		{
		pushFollow(FOLLOW_p_QName_in_synpred11_XQueryParser6745);
		p_QName();
		state._fsp--;
		if (state.failed) return;

		match(input,LPAREN,FOLLOW_LPAREN_in_synpred11_XQueryParser6747); if (state.failed) return;

		}

	}
	// $ANTLR end synpred11_XQueryParser

	// $ANTLR start synpred12_XQueryParser
	public final void synpred12_XQueryParser_fragment() throws RecognitionException {
		// XQueryParser.g:758:11: ( p_PrimaryExpr )
		// XQueryParser.g:758:12: p_PrimaryExpr
		{
		pushFollow(FOLLOW_p_PrimaryExpr_in_synpred12_XQueryParser6765);
		p_PrimaryExpr();
		state._fsp--;
		if (state.failed) return;

		}

	}
	// $ANTLR end synpred12_XQueryParser

	// $ANTLR start synpred13_XQueryParser
	public final void synpred13_XQueryParser_fragment() throws RecognitionException {
		// XQueryParser.g:816:11: ( p_Wildcard )
		// XQueryParser.g:816:12: p_Wildcard
		{
		pushFollow(FOLLOW_p_Wildcard_in_synpred13_XQueryParser7204);
		p_Wildcard();
		state._fsp--;
		if (state.failed) return;

		}

	}
	// $ANTLR end synpred13_XQueryParser

	// $ANTLR start synpred14_XQueryParser
	public final void synpred14_XQueryParser_fragment() throws RecognitionException {
		// XQueryParser.g:817:11: ( p_NCName COLON )
		// XQueryParser.g:817:12: p_NCName COLON
		{
		pushFollow(FOLLOW_p_NCName_in_synpred14_XQueryParser7223);
		p_NCName();
		state._fsp--;
		if (state.failed) return;

		match(input,COLON,FOLLOW_COLON_in_synpred14_XQueryParser7225); if (state.failed) return;

		}

	}
	// $ANTLR end synpred14_XQueryParser

	// $ANTLR start synpred15_XQueryParser
	public final void synpred15_XQueryParser_fragment() throws RecognitionException {
		// XQueryParser.g:818:11: ( p_NCName )
		// XQueryParser.g:818:12: p_NCName
		{
		pushFollow(FOLLOW_p_NCName_in_synpred15_XQueryParser7243);
		p_NCName();
		state._fsp--;
		if (state.failed) return;

		}

	}
	// $ANTLR end synpred15_XQueryParser

	// $ANTLR start synpred16_XQueryParser
	public final void synpred16_XQueryParser_fragment() throws RecognitionException {
		// XQueryParser.g:855:11: ( LPAREN )
		// XQueryParser.g:855:12: LPAREN
		{
		match(input,LPAREN,FOLLOW_LPAREN_in_synpred16_XQueryParser7499); if (state.failed) return;

		}

	}
	// $ANTLR end synpred16_XQueryParser

	// $ANTLR start synpred17_XQueryParser
	public final void synpred17_XQueryParser_fragment() throws RecognitionException {
		// XQueryParser.g:1134:26: ( p_OccurrenceIndicator )
		// XQueryParser.g:1134:27: p_OccurrenceIndicator
		{
		pushFollow(FOLLOW_p_OccurrenceIndicator_in_synpred17_XQueryParser9463);
		p_OccurrenceIndicator();
		state._fsp--;
		if (state.failed) return;

		}

	}
	// $ANTLR end synpred17_XQueryParser

	// $ANTLR start synpred18_XQueryParser
	public final void synpred18_XQueryParser_fragment() throws RecognitionException {
		// XQueryParser.g:1956:39: ( p_OccurrenceIndicator )
		// XQueryParser.g:1956:40: p_OccurrenceIndicator
		{
		pushFollow(FOLLOW_p_OccurrenceIndicator_in_synpred18_XQueryParser16990);
		p_OccurrenceIndicator();
		state._fsp--;
		if (state.failed) return;

		}

	}
	// $ANTLR end synpred18_XQueryParser

	// Delegated rules

	public final boolean synpred3_XQueryParser() {
		state.backtracking++;
		int start = input.mark();
		try {
			synpred3_XQueryParser_fragment(); // can never throw exception
		} catch (RecognitionException re) {
			System.err.println("impossible: "+re);
		}
		boolean success = !state.failed;
		input.rewind(start);
		state.backtracking--;
		state.failed=false;
		return success;
	}
	public final boolean synpred15_XQueryParser() {
		state.backtracking++;
		int start = input.mark();
		try {
			synpred15_XQueryParser_fragment(); // can never throw exception
		} catch (RecognitionException re) {
			System.err.println("impossible: "+re);
		}
		boolean success = !state.failed;
		input.rewind(start);
		state.backtracking--;
		state.failed=false;
		return success;
	}
	public final boolean synpred7_XQueryParser() {
		state.backtracking++;
		int start = input.mark();
		try {
			synpred7_XQueryParser_fragment(); // can never throw exception
		} catch (RecognitionException re) {
			System.err.println("impossible: "+re);
		}
		boolean success = !state.failed;
		input.rewind(start);
		state.backtracking--;
		state.failed=false;
		return success;
	}
	public final boolean synpred9_XQueryParser() {
		state.backtracking++;
		int start = input.mark();
		try {
			synpred9_XQueryParser_fragment(); // can never throw exception
		} catch (RecognitionException re) {
			System.err.println("impossible: "+re);
		}
		boolean success = !state.failed;
		input.rewind(start);
		state.backtracking--;
		state.failed=false;
		return success;
	}
	public final boolean synpred10_XQueryParser() {
		state.backtracking++;
		int start = input.mark();
		try {
			synpred10_XQueryParser_fragment(); // can never throw exception
		} catch (RecognitionException re) {
			System.err.println("impossible: "+re);
		}
		boolean success = !state.failed;
		input.rewind(start);
		state.backtracking--;
		state.failed=false;
		return success;
	}
	public final boolean synpred17_XQueryParser() {
		state.backtracking++;
		int start = input.mark();
		try {
			synpred17_XQueryParser_fragment(); // can never throw exception
		} catch (RecognitionException re) {
			System.err.println("impossible: "+re);
		}
		boolean success = !state.failed;
		input.rewind(start);
		state.backtracking--;
		state.failed=false;
		return success;
	}
	public final boolean synpred5_XQueryParser() {
		state.backtracking++;
		int start = input.mark();
		try {
			synpred5_XQueryParser_fragment(); // can never throw exception
		} catch (RecognitionException re) {
			System.err.println("impossible: "+re);
		}
		boolean success = !state.failed;
		input.rewind(start);
		state.backtracking--;
		state.failed=false;
		return success;
	}
	public final boolean synpred12_XQueryParser() {
		state.backtracking++;
		int start = input.mark();
		try {
			synpred12_XQueryParser_fragment(); // can never throw exception
		} catch (RecognitionException re) {
			System.err.println("impossible: "+re);
		}
		boolean success = !state.failed;
		input.rewind(start);
		state.backtracking--;
		state.failed=false;
		return success;
	}
	public final boolean synpred16_XQueryParser() {
		state.backtracking++;
		int start = input.mark();
		try {
			synpred16_XQueryParser_fragment(); // can never throw exception
		} catch (RecognitionException re) {
			System.err.println("impossible: "+re);
		}
		boolean success = !state.failed;
		input.rewind(start);
		state.backtracking--;
		state.failed=false;
		return success;
	}
	public final boolean synpred14_XQueryParser() {
		state.backtracking++;
		int start = input.mark();
		try {
			synpred14_XQueryParser_fragment(); // can never throw exception
		} catch (RecognitionException re) {
			System.err.println("impossible: "+re);
		}
		boolean success = !state.failed;
		input.rewind(start);
		state.backtracking--;
		state.failed=false;
		return success;
	}
	public final boolean synpred6_XQueryParser() {
		state.backtracking++;
		int start = input.mark();
		try {
			synpred6_XQueryParser_fragment(); // can never throw exception
		} catch (RecognitionException re) {
			System.err.println("impossible: "+re);
		}
		boolean success = !state.failed;
		input.rewind(start);
		state.backtracking--;
		state.failed=false;
		return success;
	}
	public final boolean synpred18_XQueryParser() {
		state.backtracking++;
		int start = input.mark();
		try {
			synpred18_XQueryParser_fragment(); // can never throw exception
		} catch (RecognitionException re) {
			System.err.println("impossible: "+re);
		}
		boolean success = !state.failed;
		input.rewind(start);
		state.backtracking--;
		state.failed=false;
		return success;
	}
	public final boolean synpred8_XQueryParser() {
		state.backtracking++;
		int start = input.mark();
		try {
			synpred8_XQueryParser_fragment(); // can never throw exception
		} catch (RecognitionException re) {
			System.err.println("impossible: "+re);
		}
		boolean success = !state.failed;
		input.rewind(start);
		state.backtracking--;
		state.failed=false;
		return success;
	}
	public final boolean synpred13_XQueryParser() {
		state.backtracking++;
		int start = input.mark();
		try {
			synpred13_XQueryParser_fragment(); // can never throw exception
		} catch (RecognitionException re) {
			System.err.println("impossible: "+re);
		}
		boolean success = !state.failed;
		input.rewind(start);
		state.backtracking--;
		state.failed=false;
		return success;
	}
	public final boolean synpred4_XQueryParser() {
		state.backtracking++;
		int start = input.mark();
		try {
			synpred4_XQueryParser_fragment(); // can never throw exception
		} catch (RecognitionException re) {
			System.err.println("impossible: "+re);
		}
		boolean success = !state.failed;
		input.rewind(start);
		state.backtracking--;
		state.failed=false;
		return success;
	}
	public final boolean synpred11_XQueryParser() {
		state.backtracking++;
		int start = input.mark();
		try {
			synpred11_XQueryParser_fragment(); // can never throw exception
		} catch (RecognitionException re) {
			System.err.println("impossible: "+re);
		}
		boolean success = !state.failed;
		input.rewind(start);
		state.backtracking--;
		state.failed=false;
		return success;
	}
	public final boolean synpred1_XQueryParser() {
		state.backtracking++;
		int start = input.mark();
		try {
			synpred1_XQueryParser_fragment(); // can never throw exception
		} catch (RecognitionException re) {
			System.err.println("impossible: "+re);
		}
		boolean success = !state.failed;
		input.rewind(start);
		state.backtracking--;
		state.failed=false;
		return success;
	}
	public final boolean synpred2_XQueryParser() {
		state.backtracking++;
		int start = input.mark();
		try {
			synpred2_XQueryParser_fragment(); // can never throw exception
		} catch (RecognitionException re) {
			System.err.println("impossible: "+re);
		}
		boolean success = !state.failed;
		input.rewind(start);
		state.backtracking--;
		state.failed=false;
		return success;
	}


	protected DFA45 dfa45 = new DFA45(this);
	protected DFA160 dfa160 = new DFA160(this);
	static final String DFA45_eotS =
		"\106\uffff";
	static final String DFA45_eofS =
		"\1\101\105\uffff";
	static final String DFA45_minS =
		"\1\4\100\0\1\uffff\2\0\2\uffff";
	static final String DFA45_maxS =
		"\1\u012b\100\0\1\uffff\2\0\2\uffff";
	static final String DFA45_acceptS =
		"\101\uffff\1\1\3\uffff\1\2";
	static final String DFA45_specialS =
		"\1\0\1\1\1\2\1\3\1\4\1\5\1\6\1\7\1\10\1\11\1\12\1\13\1\14\1\15\1\16\1"+
		"\17\1\20\1\21\1\22\1\23\1\24\1\25\1\26\1\27\1\30\1\31\1\32\1\33\1\34\1"+
		"\35\1\36\1\37\1\40\1\41\1\42\1\43\1\44\1\45\1\46\1\47\1\50\1\51\1\52\1"+
		"\53\1\54\1\55\1\56\1\57\1\60\1\61\1\62\1\63\1\64\1\65\1\66\1\67\1\70\1"+
		"\71\1\72\1\73\1\74\1\75\1\76\1\77\1\100\1\uffff\1\101\1\102\2\uffff}>";
	static final String[] DFA45_transitionS = {
			"\3\102\1\uffff\1\102\1\45\1\50\1\102\1\101\1\102\1\21\4\102\1\35\1\61"+
			"\2\102\1\37\1\uffff\1\102\1\75\5\102\4\uffff\1\102\1\51\1\uffff\2\102"+
			"\3\uffff\1\40\1\uffff\5\102\1\76\1\74\6\102\1\71\1\53\1\55\6\102\1\30"+
			"\1\42\1\22\1\23\1\52\2\uffff\1\25\2\102\1\uffff\1\103\4\102\5\uffff\1"+
			"\10\2\102\1\77\2\102\1\57\1\56\1\1\11\102\3\uffff\4\102\2\uffff\1\102"+
			"\1\3\6\102\1\60\5\102\1\103\4\102\1\44\2\102\1\2\3\102\1\16\1\uffff\1"+
			"\102\5\uffff\1\17\1\32\1\33\1\17\1\uffff\1\17\1\102\1\70\3\uffff\1\12"+
			"\5\102\1\34\1\64\1\102\2\uffff\3\102\1\65\2\102\1\uffff\11\102\1\24\3"+
			"\102\1\43\4\102\2\uffff\1\11\2\uffff\1\47\1\46\3\102\1\41\1\uffff\1\20"+
			"\1\102\1\uffff\1\102\1\72\1\73\3\102\3\uffff\3\102\1\63\1\62\1\102\1"+
			"\54\1\uffff\4\102\1\14\1\15\1\102\1\31\2\uffff\1\7\1\102\1\67\5\102\1"+
			"\uffff\1\4\1\36\5\102\1\6\2\102\1\5\2\102\1\27\1\26\2\102\1\13\1\102"+
			"\1\100\1\uffff\4\102\1\66\6\102\2\uffff\2\102\17\uffff\1\102",
			"\1\uffff",
			"\1\uffff",
			"\1\uffff",
			"\1\uffff",
			"\1\uffff",
			"\1\uffff",
			"\1\uffff",
			"\1\uffff",
			"\1\uffff",
			"\1\uffff",
			"\1\uffff",
			"\1\uffff",
			"\1\uffff",
			"\1\uffff",
			"\1\uffff",
			"\1\uffff",
			"\1\uffff",
			"\1\uffff",
			"\1\uffff",
			"\1\uffff",
			"\1\uffff",
			"\1\uffff",
			"\1\uffff",
			"\1\uffff",
			"\1\uffff",
			"\1\uffff",
			"\1\uffff",
			"\1\uffff",
			"\1\uffff",
			"\1\uffff",
			"\1\uffff",
			"\1\uffff",
			"\1\uffff",
			"\1\uffff",
			"\1\uffff",
			"\1\uffff",
			"\1\uffff",
			"\1\uffff",
			"\1\uffff",
			"\1\uffff",
			"\1\uffff",
			"\1\uffff",
			"\1\uffff",
			"\1\uffff",
			"\1\uffff",
			"\1\uffff",
			"\1\uffff",
			"\1\uffff",
			"\1\uffff",
			"\1\uffff",
			"\1\uffff",
			"\1\uffff",
			"\1\uffff",
			"\1\uffff",
			"\1\uffff",
			"\1\uffff",
			"\1\uffff",
			"\1\uffff",
			"\1\uffff",
			"\1\uffff",
			"\1\uffff",
			"\1\uffff",
			"\1\uffff",
			"\1\uffff",
			"",
			"\1\uffff",
			"\1\uffff",
			"",
			""
	};

	static final short[] DFA45_eot = DFA.unpackEncodedString(DFA45_eotS);
	static final short[] DFA45_eof = DFA.unpackEncodedString(DFA45_eofS);
	static final char[] DFA45_min = DFA.unpackEncodedStringToUnsignedChars(DFA45_minS);
	static final char[] DFA45_max = DFA.unpackEncodedStringToUnsignedChars(DFA45_maxS);
	static final short[] DFA45_accept = DFA.unpackEncodedString(DFA45_acceptS);
	static final short[] DFA45_special = DFA.unpackEncodedString(DFA45_specialS);
	static final short[][] DFA45_transition;

	static {
		int numStates = DFA45_transitionS.length;
		DFA45_transition = new short[numStates][];
		for (int i=0; i<numStates; i++) {
			DFA45_transition[i] = DFA.unpackEncodedString(DFA45_transitionS[i]);
		}
	}

	protected class DFA45 extends DFA {

		public DFA45(BaseRecognizer recognizer) {
			this.recognizer = recognizer;
			this.decisionNumber = 45;
			this.eot = DFA45_eot;
			this.eof = DFA45_eof;
			this.min = DFA45_min;
			this.max = DFA45_max;
			this.accept = DFA45_accept;
			this.special = DFA45_special;
			this.transition = DFA45_transition;
		}
		@Override
		public String getDescription() {
			return "371:1: pm_QueryBody : ({...}? => p_Program | p_Expr[true,true] );";
		}
		@Override
		public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
			TokenStream input = (TokenStream)_input;
			int _s = s;
			switch ( s ) {
					case 0 : 
						int LA45_0 = input.LA(1);
						 
						int index45_0 = input.index();
						input.rewind();
						s = -1;
						if ( (LA45_0==FOR) ) {s = 1;}
						else if ( (LA45_0==LET) ) {s = 2;}
						else if ( (LA45_0==IF) ) {s = 3;}
						else if ( (LA45_0==SWITCH) ) {s = 4;}
						else if ( (LA45_0==TYPESWITCH) ) {s = 5;}
						else if ( (LA45_0==TRY) ) {s = 6;}
						else if ( (LA45_0==SOME) ) {s = 7;}
						else if ( (LA45_0==EVERY) ) {s = 8;}
						else if ( (LA45_0==PLUS) ) {s = 9;}
						else if ( (LA45_0==MINUS) ) {s = 10;}
						else if ( (LA45_0==VALIDATE) ) {s = 11;}
						else if ( (LA45_0==SLASH) ) {s = 12;}
						else if ( (LA45_0==SLASH_SLASH) ) {s = 13;}
						else if ( (LA45_0==LPAREN) ) {s = 14;}
						else if ( (LA45_0==L_DecimalLiteral||LA45_0==L_DoubleLiteral||LA45_0==L_IntegerLiteral) ) {s = 15;}
						else if ( (LA45_0==QUOT) ) {s = 16;}
						else if ( (LA45_0==APOS) ) {s = 17;}
						else if ( (LA45_0==DOLLAR) ) {s = 18;}
						else if ( (LA45_0==DOT) ) {s = 19;}
						else if ( (LA45_0==ORDERED) ) {s = 20;}
						else if ( (LA45_0==ELEMENT) ) {s = 21;}
						else if ( (LA45_0==UPDATING) ) {s = 22;}
						else if ( (LA45_0==UNORDERED) ) {s = 23;}
						else if ( (LA45_0==DOCUMENT) ) {s = 24;}
						else if ( (LA45_0==SMALLER) ) {s = 25;}
						else if ( (LA45_0==L_DirCommentConstructor) ) {s = 26;}
						else if ( (LA45_0==L_DirPIConstructor) ) {s = 27;}
						else if ( (LA45_0==NAMESPACE) ) {s = 28;}
						else if ( (LA45_0==ATTRIBUTE) ) {s = 29;}
						else if ( (LA45_0==TEXT) ) {s = 30;}
						else if ( (LA45_0==BINARY) ) {s = 31;}
						else if ( (LA45_0==COMMENT) ) {s = 32;}
						else if ( (LA45_0==PROCESSING_INSTRUCTION) ) {s = 33;}
						else if ( (LA45_0==DOCUMENT_NODE) ) {s = 34;}
						else if ( (LA45_0==PARENT) ) {s = 35;}
						else if ( (LA45_0==LBRACKET) ) {s = 36;}
						else if ( (LA45_0==ANCESTOR) ) {s = 37;}
						else if ( (LA45_0==PRECEDING_SIBLING) ) {s = 38;}
						else if ( (LA45_0==PRECEDING) ) {s = 39;}
						else if ( (LA45_0==ANCESTOR_OR_SELF) ) {s = 40;}
						else if ( (LA45_0==CHILD) ) {s = 41;}
						else if ( (LA45_0==DOT_DOT) ) {s = 42;}
						else if ( (LA45_0==DESCENDANT) ) {s = 43;}
						else if ( (LA45_0==SELF) ) {s = 44;}
						else if ( (LA45_0==DESCENDANT_OR_SELF) ) {s = 45;}
						else if ( (LA45_0==FOLLOWING_SIBLING) ) {s = 46;}
						else if ( (LA45_0==FOLLOWING) ) {s = 47;}
						else if ( (LA45_0==INSERT) ) {s = 48;}
						else if ( (LA45_0==ATTR_SIGN) ) {s = 49;}
						else if ( (LA45_0==SCHEMA_ELEMENT) ) {s = 50;}
						else if ( (LA45_0==SCHEMA_ATTRIBUTE) ) {s = 51;}
						else if ( (LA45_0==NAMESPACE_NODE) ) {s = 52;}
						else if ( (LA45_0==NODE) ) {s = 53;}
						else if ( (LA45_0==WHILE) ) {s = 54;}
						else if ( (LA45_0==STAR) ) {s = 55;}
						else if ( (LA45_0==L_Pragma) ) {s = 56;}
						else if ( (LA45_0==DELETE) ) {s = 57;}
						else if ( (LA45_0==RENAME) ) {s = 58;}
						else if ( (LA45_0==REPLACE) ) {s = 59;}
						else if ( (LA45_0==COPY) ) {s = 60;}
						else if ( (LA45_0==BREAK) ) {s = 61;}
						else if ( (LA45_0==CONTINUE) ) {s = 62;}
						else if ( (LA45_0==EXIT) ) {s = 63;}
						else if ( (LA45_0==VARIABLE) ) {s = 64;}
						else if ( (LA45_0==EOF||LA45_0==ANN_PERCENT) && ((lc(XQS)))) {s = 65;}
						else if ( ((LA45_0 >= AFTER && LA45_0 <= ALLOWING)||LA45_0==AMP_ER||LA45_0==AND||LA45_0==ANY||(LA45_0 >= APOS_ER && LA45_0 <= AT)||(LA45_0 >= BASE_URI && LA45_0 <= BEFORE)||LA45_0==BOUNDARY_SPACE||(LA45_0 >= BY && LA45_0 <= CATCH)||LA45_0==CHECK||(LA45_0 >= COLLATION && LA45_0 <= COLLECTION)||(LA45_0 >= CONSTRAINT && LA45_0 <= CONTEXT)||(LA45_0 >= COPY_NAMESPACES && LA45_0 <= DEFAULT)||(LA45_0 >= DESCENDING && LA45_0 <= DIV)||(LA45_0 >= ELSE && LA45_0 <= EMPTY)||(LA45_0 >= ENCODING && LA45_0 <= EQ)||(LA45_0 >= EXACTLY && LA45_0 <= EXCEPT)||(LA45_0 >= EXTERNAL && LA45_0 <= FIRST)||(LA45_0 >= FOREACH && LA45_0 <= GE)||(LA45_0 >= GREATEST && LA45_0 <= GT)||LA45_0==IDIV||(LA45_0 >= IMPORT && LA45_0 <= INSENSITIVE)||(LA45_0 >= INSTANCE && LA45_0 <= IS)||(LA45_0 >= KEY && LA45_0 <= LAX)||(LA45_0 >= LE && LA45_0 <= LEAST)||(LA45_0 >= LEVELS && LA45_0 <= LOWERCASE)||LA45_0==LT||LA45_0==L_NCName||(LA45_0 >= MINUS_SIGN && LA45_0 <= MOST)||LA45_0==NAN||(LA45_0 >= NE && LA45_0 <= NO)||(LA45_0 >= NODES && LA45_0 <= NOT)||(LA45_0 >= NO_INHERIT && LA45_0 <= ORDER)||(LA45_0 >= ORDERING && LA45_0 <= PARAGRAPHS)||(LA45_0 >= PATTERN_SEPARATOR && LA45_0 <= PHRASE)||(LA45_0 >= PRESERVE && LA45_0 <= PRIVATE)||LA45_0==QUOT_ER||LA45_0==RELATIONSHIP||(LA45_0 >= RETURN && LA45_0 <= REVALIDATION)||(LA45_0 >= SAME && LA45_0 <= SCHEMA)||LA45_0==SCORE||(LA45_0 >= SENSITIVE && LA45_0 <= SKIP)||LA45_0==SLIDING||LA45_0==STABLE||(LA45_0 >= START && LA45_0 <= STRIP)||(LA45_0 >= THEN && LA45_0 <= TREAT)||(LA45_0 >= TUMBLING && LA45_0 <= TYPE)||(LA45_0 >= UNION && LA45_0 <= UNIQUE)||(LA45_0 >= UPPERCASE && LA45_0 <= USING)||LA45_0==VALUE||(LA45_0 >= VERSION && LA45_0 <= WHERE)||(LA45_0 >= WILDCARDS && LA45_0 <= WORDS)||(LA45_0 >= XQUERY && LA45_0 <= ZERO_DIGIT)||LA45_0==EXPLICITLY) ) {s = 66;}
						else if ( (LA45_0==EMPTY_SEQUENCE||LA45_0==ITEM) ) {s = 67;}
						 
						input.seek(index45_0);
						if ( s>=0 ) return s;
						break;

					case 1 : 
						int LA45_1 = input.LA(1);
						 
						int index45_1 = input.index();
						input.rewind();
						s = -1;
						if ( ((lc(XQS))) ) {s = 65;}
						else if ( (true) ) {s = 69;}
						 
						input.seek(index45_1);
						if ( s>=0 ) return s;
						break;

					case 2 : 
						int LA45_2 = input.LA(1);
						 
						int index45_2 = input.index();
						input.rewind();
						s = -1;
						if ( ((lc(XQS))) ) {s = 65;}
						else if ( (true) ) {s = 69;}
						 
						input.seek(index45_2);
						if ( s>=0 ) return s;
						break;

					case 3 : 
						int LA45_3 = input.LA(1);
						 
						int index45_3 = input.index();
						input.rewind();
						s = -1;
						if ( ((lc(XQS))) ) {s = 65;}
						else if ( (true) ) {s = 69;}
						 
						input.seek(index45_3);
						if ( s>=0 ) return s;
						break;

					case 4 : 
						int LA45_4 = input.LA(1);
						 
						int index45_4 = input.index();
						input.rewind();
						s = -1;
						if ( ((lc(XQS))) ) {s = 65;}
						else if ( (true) ) {s = 69;}
						 
						input.seek(index45_4);
						if ( s>=0 ) return s;
						break;

					case 5 : 
						int LA45_5 = input.LA(1);
						 
						int index45_5 = input.index();
						input.rewind();
						s = -1;
						if ( ((lc(XQS))) ) {s = 65;}
						else if ( (true) ) {s = 69;}
						 
						input.seek(index45_5);
						if ( s>=0 ) return s;
						break;

					case 6 : 
						int LA45_6 = input.LA(1);
						 
						int index45_6 = input.index();
						input.rewind();
						s = -1;
						if ( ((lc(XQS))) ) {s = 65;}
						else if ( (true) ) {s = 69;}
						 
						input.seek(index45_6);
						if ( s>=0 ) return s;
						break;

					case 7 : 
						int LA45_7 = input.LA(1);
						 
						int index45_7 = input.index();
						input.rewind();
						s = -1;
						if ( ((lc(XQS))) ) {s = 65;}
						else if ( (true) ) {s = 69;}
						 
						input.seek(index45_7);
						if ( s>=0 ) return s;
						break;

					case 8 : 
						int LA45_8 = input.LA(1);
						 
						int index45_8 = input.index();
						input.rewind();
						s = -1;
						if ( ((lc(XQS))) ) {s = 65;}
						else if ( (true) ) {s = 69;}
						 
						input.seek(index45_8);
						if ( s>=0 ) return s;
						break;

					case 9 : 
						int LA45_9 = input.LA(1);
						 
						int index45_9 = input.index();
						input.rewind();
						s = -1;
						if ( ((lc(XQS))) ) {s = 65;}
						else if ( (true) ) {s = 69;}
						 
						input.seek(index45_9);
						if ( s>=0 ) return s;
						break;

					case 10 : 
						int LA45_10 = input.LA(1);
						 
						int index45_10 = input.index();
						input.rewind();
						s = -1;
						if ( ((lc(XQS))) ) {s = 65;}
						else if ( (true) ) {s = 69;}
						 
						input.seek(index45_10);
						if ( s>=0 ) return s;
						break;

					case 11 : 
						int LA45_11 = input.LA(1);
						 
						int index45_11 = input.index();
						input.rewind();
						s = -1;
						if ( ((lc(XQS))) ) {s = 65;}
						else if ( (true) ) {s = 69;}
						 
						input.seek(index45_11);
						if ( s>=0 ) return s;
						break;

					case 12 : 
						int LA45_12 = input.LA(1);
						 
						int index45_12 = input.index();
						input.rewind();
						s = -1;
						if ( ((lc(XQS))) ) {s = 65;}
						else if ( (true) ) {s = 69;}
						 
						input.seek(index45_12);
						if ( s>=0 ) return s;
						break;

					case 13 : 
						int LA45_13 = input.LA(1);
						 
						int index45_13 = input.index();
						input.rewind();
						s = -1;
						if ( ((lc(XQS))) ) {s = 65;}
						else if ( (true) ) {s = 69;}
						 
						input.seek(index45_13);
						if ( s>=0 ) return s;
						break;

					case 14 : 
						int LA45_14 = input.LA(1);
						 
						int index45_14 = input.index();
						input.rewind();
						s = -1;
						if ( ((lc(XQS))) ) {s = 65;}
						else if ( (true) ) {s = 69;}
						 
						input.seek(index45_14);
						if ( s>=0 ) return s;
						break;

					case 15 : 
						int LA45_15 = input.LA(1);
						 
						int index45_15 = input.index();
						input.rewind();
						s = -1;
						if ( ((lc(XQS))) ) {s = 65;}
						else if ( (true) ) {s = 69;}
						 
						input.seek(index45_15);
						if ( s>=0 ) return s;
						break;

					case 16 : 
						int LA45_16 = input.LA(1);
						 
						int index45_16 = input.index();
						input.rewind();
						s = -1;
						if ( ((lc(XQS))) ) {s = 65;}
						else if ( (true) ) {s = 69;}
						 
						input.seek(index45_16);
						if ( s>=0 ) return s;
						break;

					case 17 : 
						int LA45_17 = input.LA(1);
						 
						int index45_17 = input.index();
						input.rewind();
						s = -1;
						if ( ((lc(XQS))) ) {s = 65;}
						else if ( (true) ) {s = 69;}
						 
						input.seek(index45_17);
						if ( s>=0 ) return s;
						break;

					case 18 : 
						int LA45_18 = input.LA(1);
						 
						int index45_18 = input.index();
						input.rewind();
						s = -1;
						if ( ((lc(XQS))) ) {s = 65;}
						else if ( (true) ) {s = 69;}
						 
						input.seek(index45_18);
						if ( s>=0 ) return s;
						break;

					case 19 : 
						int LA45_19 = input.LA(1);
						 
						int index45_19 = input.index();
						input.rewind();
						s = -1;
						if ( ((lc(XQS))) ) {s = 65;}
						else if ( (true) ) {s = 69;}
						 
						input.seek(index45_19);
						if ( s>=0 ) return s;
						break;

					case 20 : 
						int LA45_20 = input.LA(1);
						 
						int index45_20 = input.index();
						input.rewind();
						s = -1;
						if ( ((lc(XQS))) ) {s = 65;}
						else if ( (true) ) {s = 69;}
						 
						input.seek(index45_20);
						if ( s>=0 ) return s;
						break;

					case 21 : 
						int LA45_21 = input.LA(1);
						 
						int index45_21 = input.index();
						input.rewind();
						s = -1;
						if ( ((lc(XQS))) ) {s = 65;}
						else if ( (true) ) {s = 69;}
						 
						input.seek(index45_21);
						if ( s>=0 ) return s;
						break;

					case 22 : 
						int LA45_22 = input.LA(1);
						 
						int index45_22 = input.index();
						input.rewind();
						s = -1;
						if ( ((lc(XQS))) ) {s = 65;}
						else if ( (true) ) {s = 69;}
						 
						input.seek(index45_22);
						if ( s>=0 ) return s;
						break;

					case 23 : 
						int LA45_23 = input.LA(1);
						 
						int index45_23 = input.index();
						input.rewind();
						s = -1;
						if ( ((lc(XQS))) ) {s = 65;}
						else if ( (true) ) {s = 69;}
						 
						input.seek(index45_23);
						if ( s>=0 ) return s;
						break;

					case 24 : 
						int LA45_24 = input.LA(1);
						 
						int index45_24 = input.index();
						input.rewind();
						s = -1;
						if ( ((lc(XQS))) ) {s = 65;}
						else if ( (true) ) {s = 69;}
						 
						input.seek(index45_24);
						if ( s>=0 ) return s;
						break;

					case 25 : 
						int LA45_25 = input.LA(1);
						 
						int index45_25 = input.index();
						input.rewind();
						s = -1;
						if ( ((lc(XQS))) ) {s = 65;}
						else if ( (true) ) {s = 69;}
						 
						input.seek(index45_25);
						if ( s>=0 ) return s;
						break;

					case 26 : 
						int LA45_26 = input.LA(1);
						 
						int index45_26 = input.index();
						input.rewind();
						s = -1;
						if ( ((lc(XQS))) ) {s = 65;}
						else if ( (true) ) {s = 69;}
						 
						input.seek(index45_26);
						if ( s>=0 ) return s;
						break;

					case 27 : 
						int LA45_27 = input.LA(1);
						 
						int index45_27 = input.index();
						input.rewind();
						s = -1;
						if ( ((lc(XQS))) ) {s = 65;}
						else if ( (true) ) {s = 69;}
						 
						input.seek(index45_27);
						if ( s>=0 ) return s;
						break;

					case 28 : 
						int LA45_28 = input.LA(1);
						 
						int index45_28 = input.index();
						input.rewind();
						s = -1;
						if ( ((lc(XQS))) ) {s = 65;}
						else if ( (true) ) {s = 69;}
						 
						input.seek(index45_28);
						if ( s>=0 ) return s;
						break;

					case 29 : 
						int LA45_29 = input.LA(1);
						 
						int index45_29 = input.index();
						input.rewind();
						s = -1;
						if ( ((lc(XQS))) ) {s = 65;}
						else if ( (true) ) {s = 69;}
						 
						input.seek(index45_29);
						if ( s>=0 ) return s;
						break;

					case 30 : 
						int LA45_30 = input.LA(1);
						 
						int index45_30 = input.index();
						input.rewind();
						s = -1;
						if ( ((lc(XQS))) ) {s = 65;}
						else if ( (true) ) {s = 69;}
						 
						input.seek(index45_30);
						if ( s>=0 ) return s;
						break;

					case 31 : 
						int LA45_31 = input.LA(1);
						 
						int index45_31 = input.index();
						input.rewind();
						s = -1;
						if ( ((lc(XQS))) ) {s = 65;}
						else if ( (true) ) {s = 69;}
						 
						input.seek(index45_31);
						if ( s>=0 ) return s;
						break;

					case 32 : 
						int LA45_32 = input.LA(1);
						 
						int index45_32 = input.index();
						input.rewind();
						s = -1;
						if ( ((lc(XQS))) ) {s = 65;}
						else if ( (true) ) {s = 69;}
						 
						input.seek(index45_32);
						if ( s>=0 ) return s;
						break;

					case 33 : 
						int LA45_33 = input.LA(1);
						 
						int index45_33 = input.index();
						input.rewind();
						s = -1;
						if ( ((lc(XQS))) ) {s = 65;}
						else if ( (true) ) {s = 69;}
						 
						input.seek(index45_33);
						if ( s>=0 ) return s;
						break;

					case 34 : 
						int LA45_34 = input.LA(1);
						 
						int index45_34 = input.index();
						input.rewind();
						s = -1;
						if ( ((lc(XQS))) ) {s = 65;}
						else if ( (true) ) {s = 69;}
						 
						input.seek(index45_34);
						if ( s>=0 ) return s;
						break;

					case 35 : 
						int LA45_35 = input.LA(1);
						 
						int index45_35 = input.index();
						input.rewind();
						s = -1;
						if ( ((lc(XQS))) ) {s = 65;}
						else if ( (true) ) {s = 69;}
						 
						input.seek(index45_35);
						if ( s>=0 ) return s;
						break;

					case 36 : 
						int LA45_36 = input.LA(1);
						 
						int index45_36 = input.index();
						input.rewind();
						s = -1;
						if ( ((lc(XQS))) ) {s = 65;}
						else if ( (true) ) {s = 69;}
						 
						input.seek(index45_36);
						if ( s>=0 ) return s;
						break;

					case 37 : 
						int LA45_37 = input.LA(1);
						 
						int index45_37 = input.index();
						input.rewind();
						s = -1;
						if ( ((lc(XQS))) ) {s = 65;}
						else if ( (true) ) {s = 69;}
						 
						input.seek(index45_37);
						if ( s>=0 ) return s;
						break;

					case 38 : 
						int LA45_38 = input.LA(1);
						 
						int index45_38 = input.index();
						input.rewind();
						s = -1;
						if ( ((lc(XQS))) ) {s = 65;}
						else if ( (true) ) {s = 69;}
						 
						input.seek(index45_38);
						if ( s>=0 ) return s;
						break;

					case 39 : 
						int LA45_39 = input.LA(1);
						 
						int index45_39 = input.index();
						input.rewind();
						s = -1;
						if ( ((lc(XQS))) ) {s = 65;}
						else if ( (true) ) {s = 69;}
						 
						input.seek(index45_39);
						if ( s>=0 ) return s;
						break;

					case 40 : 
						int LA45_40 = input.LA(1);
						 
						int index45_40 = input.index();
						input.rewind();
						s = -1;
						if ( ((lc(XQS))) ) {s = 65;}
						else if ( (true) ) {s = 69;}
						 
						input.seek(index45_40);
						if ( s>=0 ) return s;
						break;

					case 41 : 
						int LA45_41 = input.LA(1);
						 
						int index45_41 = input.index();
						input.rewind();
						s = -1;
						if ( ((lc(XQS))) ) {s = 65;}
						else if ( (true) ) {s = 69;}
						 
						input.seek(index45_41);
						if ( s>=0 ) return s;
						break;

					case 42 : 
						int LA45_42 = input.LA(1);
						 
						int index45_42 = input.index();
						input.rewind();
						s = -1;
						if ( ((lc(XQS))) ) {s = 65;}
						else if ( (true) ) {s = 69;}
						 
						input.seek(index45_42);
						if ( s>=0 ) return s;
						break;

					case 43 : 
						int LA45_43 = input.LA(1);
						 
						int index45_43 = input.index();
						input.rewind();
						s = -1;
						if ( ((lc(XQS))) ) {s = 65;}
						else if ( (true) ) {s = 69;}
						 
						input.seek(index45_43);
						if ( s>=0 ) return s;
						break;

					case 44 : 
						int LA45_44 = input.LA(1);
						 
						int index45_44 = input.index();
						input.rewind();
						s = -1;
						if ( ((lc(XQS))) ) {s = 65;}
						else if ( (true) ) {s = 69;}
						 
						input.seek(index45_44);
						if ( s>=0 ) return s;
						break;

					case 45 : 
						int LA45_45 = input.LA(1);
						 
						int index45_45 = input.index();
						input.rewind();
						s = -1;
						if ( ((lc(XQS))) ) {s = 65;}
						else if ( (true) ) {s = 69;}
						 
						input.seek(index45_45);
						if ( s>=0 ) return s;
						break;

					case 46 : 
						int LA45_46 = input.LA(1);
						 
						int index45_46 = input.index();
						input.rewind();
						s = -1;
						if ( ((lc(XQS))) ) {s = 65;}
						else if ( (true) ) {s = 69;}
						 
						input.seek(index45_46);
						if ( s>=0 ) return s;
						break;

					case 47 : 
						int LA45_47 = input.LA(1);
						 
						int index45_47 = input.index();
						input.rewind();
						s = -1;
						if ( ((lc(XQS))) ) {s = 65;}
						else if ( (true) ) {s = 69;}
						 
						input.seek(index45_47);
						if ( s>=0 ) return s;
						break;

					case 48 : 
						int LA45_48 = input.LA(1);
						 
						int index45_48 = input.index();
						input.rewind();
						s = -1;
						if ( ((lc(XQS))) ) {s = 65;}
						else if ( (true) ) {s = 69;}
						 
						input.seek(index45_48);
						if ( s>=0 ) return s;
						break;

					case 49 : 
						int LA45_49 = input.LA(1);
						 
						int index45_49 = input.index();
						input.rewind();
						s = -1;
						if ( ((lc(XQS))) ) {s = 65;}
						else if ( (true) ) {s = 69;}
						 
						input.seek(index45_49);
						if ( s>=0 ) return s;
						break;

					case 50 : 
						int LA45_50 = input.LA(1);
						 
						int index45_50 = input.index();
						input.rewind();
						s = -1;
						if ( ((lc(XQS))) ) {s = 65;}
						else if ( (true) ) {s = 69;}
						 
						input.seek(index45_50);
						if ( s>=0 ) return s;
						break;

					case 51 : 
						int LA45_51 = input.LA(1);
						 
						int index45_51 = input.index();
						input.rewind();
						s = -1;
						if ( ((lc(XQS))) ) {s = 65;}
						else if ( (true) ) {s = 69;}
						 
						input.seek(index45_51);
						if ( s>=0 ) return s;
						break;

					case 52 : 
						int LA45_52 = input.LA(1);
						 
						int index45_52 = input.index();
						input.rewind();
						s = -1;
						if ( ((lc(XQS))) ) {s = 65;}
						else if ( (true) ) {s = 69;}
						 
						input.seek(index45_52);
						if ( s>=0 ) return s;
						break;

					case 53 : 
						int LA45_53 = input.LA(1);
						 
						int index45_53 = input.index();
						input.rewind();
						s = -1;
						if ( ((lc(XQS))) ) {s = 65;}
						else if ( (true) ) {s = 69;}
						 
						input.seek(index45_53);
						if ( s>=0 ) return s;
						break;

					case 54 : 
						int LA45_54 = input.LA(1);
						 
						int index45_54 = input.index();
						input.rewind();
						s = -1;
						if ( ((lc(XQS))) ) {s = 65;}
						else if ( (true) ) {s = 69;}
						 
						input.seek(index45_54);
						if ( s>=0 ) return s;
						break;

					case 55 : 
						int LA45_55 = input.LA(1);
						 
						int index45_55 = input.index();
						input.rewind();
						s = -1;
						if ( ((lc(XQS))) ) {s = 65;}
						else if ( (true) ) {s = 69;}
						 
						input.seek(index45_55);
						if ( s>=0 ) return s;
						break;

					case 56 : 
						int LA45_56 = input.LA(1);
						 
						int index45_56 = input.index();
						input.rewind();
						s = -1;
						if ( ((lc(XQS))) ) {s = 65;}
						else if ( (true) ) {s = 69;}
						 
						input.seek(index45_56);
						if ( s>=0 ) return s;
						break;

					case 57 : 
						int LA45_57 = input.LA(1);
						 
						int index45_57 = input.index();
						input.rewind();
						s = -1;
						if ( ((lc(XQS))) ) {s = 65;}
						else if ( (true) ) {s = 69;}
						 
						input.seek(index45_57);
						if ( s>=0 ) return s;
						break;

					case 58 : 
						int LA45_58 = input.LA(1);
						 
						int index45_58 = input.index();
						input.rewind();
						s = -1;
						if ( ((lc(XQS))) ) {s = 65;}
						else if ( (true) ) {s = 69;}
						 
						input.seek(index45_58);
						if ( s>=0 ) return s;
						break;

					case 59 : 
						int LA45_59 = input.LA(1);
						 
						int index45_59 = input.index();
						input.rewind();
						s = -1;
						if ( ((lc(XQS))) ) {s = 65;}
						else if ( (true) ) {s = 69;}
						 
						input.seek(index45_59);
						if ( s>=0 ) return s;
						break;

					case 60 : 
						int LA45_60 = input.LA(1);
						 
						int index45_60 = input.index();
						input.rewind();
						s = -1;
						if ( ((lc(XQS))) ) {s = 65;}
						else if ( (true) ) {s = 69;}
						 
						input.seek(index45_60);
						if ( s>=0 ) return s;
						break;

					case 61 : 
						int LA45_61 = input.LA(1);
						 
						int index45_61 = input.index();
						input.rewind();
						s = -1;
						if ( ((lc(XQS))) ) {s = 65;}
						else if ( (true) ) {s = 69;}
						 
						input.seek(index45_61);
						if ( s>=0 ) return s;
						break;

					case 62 : 
						int LA45_62 = input.LA(1);
						 
						int index45_62 = input.index();
						input.rewind();
						s = -1;
						if ( ((lc(XQS))) ) {s = 65;}
						else if ( (true) ) {s = 69;}
						 
						input.seek(index45_62);
						if ( s>=0 ) return s;
						break;

					case 63 : 
						int LA45_63 = input.LA(1);
						 
						int index45_63 = input.index();
						input.rewind();
						s = -1;
						if ( ((lc(XQS))) ) {s = 65;}
						else if ( (true) ) {s = 69;}
						 
						input.seek(index45_63);
						if ( s>=0 ) return s;
						break;

					case 64 : 
						int LA45_64 = input.LA(1);
						 
						int index45_64 = input.index();
						input.rewind();
						s = -1;
						if ( ((lc(XQS))) ) {s = 65;}
						else if ( (true) ) {s = 69;}
						 
						input.seek(index45_64);
						if ( s>=0 ) return s;
						break;

					case 65 : 
						int LA45_66 = input.LA(1);
						 
						int index45_66 = input.index();
						input.rewind();
						s = -1;
						if ( ((lc(XQS))) ) {s = 65;}
						else if ( (true) ) {s = 69;}
						 
						input.seek(index45_66);
						if ( s>=0 ) return s;
						break;

					case 66 : 
						int LA45_67 = input.LA(1);
						 
						int index45_67 = input.index();
						input.rewind();
						s = -1;
						if ( ((lc(XQS))) ) {s = 65;}
						else if ( (true) ) {s = 69;}
						 
						input.seek(index45_67);
						if ( s>=0 ) return s;
						break;
			}
			if (state.backtracking>0) {state.failed=true; return -1;}
			NoViableAltException nvae =
				new NoViableAltException(getDescription(), 45, _s, input);
			error(nvae);
			throw nvae;
		}
	}

	static final String DFA160_eotS =
		"\105\uffff";
	static final String DFA160_eofS =
		"\1\2\104\uffff";
	static final String DFA160_minS =
		"\1\4\1\0\7\uffff\1\0\73\uffff";
	static final String DFA160_maxS =
		"\1\u0117\1\0\7\uffff\1\0\73\uffff";
	static final String DFA160_acceptS =
		"\2\uffff\1\2\12\uffff\1\1\67\uffff";
	static final String DFA160_specialS =
		"\1\0\1\1\7\uffff\1\2\73\uffff}>";
	static final String[] DFA160_transitionS = {
			"\1\2\1\uffff\1\2\4\uffff\1\2\4\uffff\3\2\3\uffff\1\2\1\uffff\1\2\3\uffff"+
			"\1\2\12\uffff\1\2\3\uffff\1\2\1\uffff\1\2\2\uffff\1\2\5\uffff\1\2\3\uffff"+
			"\1\2\3\uffff\1\2\4\uffff\1\2\11\uffff\1\2\3\uffff\1\2\1\uffff\2\2\6\uffff"+
			"\1\2\1\uffff\1\2\3\uffff\1\2\10\uffff\4\2\1\uffff\1\2\1\uffff\1\2\2\uffff"+
			"\1\2\2\uffff\1\2\5\uffff\1\2\1\uffff\3\2\5\uffff\2\2\1\uffff\1\2\5\uffff"+
			"\1\2\20\uffff\1\2\1\uffff\2\2\7\uffff\1\2\5\uffff\1\2\5\uffff\1\2\1\uffff"+
			"\2\2\3\uffff\1\2\7\uffff\1\11\10\uffff\1\15\2\uffff\1\2\3\uffff\1\2\2"+
			"\uffff\2\2\2\uffff\1\2\3\uffff\1\2\1\uffff\1\2\2\uffff\1\2\4\uffff\3"+
			"\2\1\uffff\1\2\1\1\1\2\11\uffff\2\2\5\uffff\1\2\10\uffff\1\2\3\uffff"+
			"\1\2\3\uffff\1\2\2\uffff\1\2",
			"\1\uffff",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"\1\uffff",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			""
	};

	static final short[] DFA160_eot = DFA.unpackEncodedString(DFA160_eotS);
	static final short[] DFA160_eof = DFA.unpackEncodedString(DFA160_eofS);
	static final char[] DFA160_min = DFA.unpackEncodedStringToUnsignedChars(DFA160_minS);
	static final char[] DFA160_max = DFA.unpackEncodedStringToUnsignedChars(DFA160_maxS);
	static final short[] DFA160_accept = DFA.unpackEncodedString(DFA160_acceptS);
	static final short[] DFA160_special = DFA.unpackEncodedString(DFA160_specialS);
	static final short[][] DFA160_transition;

	static {
		int numStates = DFA160_transitionS.length;
		DFA160_transition = new short[numStates][];
		for (int i=0; i<numStates; i++) {
			DFA160_transition[i] = DFA.unpackEncodedString(DFA160_transitionS[i]);
		}
	}

	protected class DFA160 extends DFA {

		public DFA160(BaseRecognizer recognizer) {
			this.recognizer = recognizer;
			this.decisionNumber = 160;
			this.eot = DFA160_eot;
			this.eof = DFA160_eof;
			this.min = DFA160_min;
			this.max = DFA160_max;
			this.accept = DFA160_accept;
			this.special = DFA160_special;
			this.transition = DFA160_transition;
		}
		@Override
		public String getDescription() {
			return "1134:25: ( ( p_OccurrenceIndicator )=>oi= p_OccurrenceIndicator )?";
		}
		@Override
		public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
			TokenStream input = (TokenStream)_input;
			int _s = s;
			switch ( s ) {
					case 0 : 
						int LA160_0 = input.LA(1);
						 
						int index160_0 = input.index();
						input.rewind();
						s = -1;
						if ( (LA160_0==STAR) ) {s = 1;}
						else if ( (LA160_0==EOF||LA160_0==AFTER||LA160_0==ALLOWING||LA160_0==AND||(LA160_0 >= AS && LA160_0 <= AT)||LA160_0==BEFORE||LA160_0==BIND||LA160_0==CASE||LA160_0==COLLATION||LA160_0==COMMA||LA160_0==CONCAT||LA160_0==CONTAINS||LA160_0==COUNT||LA160_0==DEFAULT||LA160_0==DESCENDING||LA160_0==DIV||LA160_0==EMPTY||LA160_0==END||(LA160_0 >= EQ && LA160_0 <= EQUAL)||LA160_0==EXCEPT||LA160_0==EXTERNAL||LA160_0==FOR||(LA160_0 >= GE && LA160_0 <= GREATER_GREATER)||LA160_0==GROUP||LA160_0==GT||LA160_0==IDIV||LA160_0==IN||LA160_0==INSTANCE||(LA160_0 >= INTERSECT && LA160_0 <= IS)||(LA160_0 >= LBRACKET && LA160_0 <= LE)||LA160_0==LET||LA160_0==LT||LA160_0==MINUS||(LA160_0 >= MOD && LA160_0 <= MODIFY)||LA160_0==NE||LA160_0==NOTEQUAL||LA160_0==ONLY||(LA160_0 >= OR && LA160_0 <= ORDER)||LA160_0==PARAGRAPHS||LA160_0==RBRACKET||LA160_0==RETURN||(LA160_0 >= RPAREN && LA160_0 <= RSQUARE)||LA160_0==SATISFIES||LA160_0==SCORE||LA160_0==SEMICOLON||LA160_0==SENTENCES||(LA160_0 >= SMALLER && LA160_0 <= SMALLER_SMALLER)||LA160_0==STABLE||LA160_0==START||(LA160_0 >= TIMES && LA160_0 <= TO)||LA160_0==UNION||LA160_0==VBAR||LA160_0==WHERE||LA160_0==WITH||LA160_0==WORDS) ) {s = 2;}
						else if ( (LA160_0==PLUS) ) {s = 9;}
						else if ( (LA160_0==QUESTION) && (synpred17_XQueryParser())) {s = 13;}
						 
						input.seek(index160_0);
						if ( s>=0 ) return s;
						break;

					case 1 : 
						int LA160_1 = input.LA(1);
						 
						int index160_1 = input.index();
						input.rewind();
						s = -1;
						if ( (synpred17_XQueryParser()) ) {s = 13;}
						else if ( (true) ) {s = 2;}
						 
						input.seek(index160_1);
						if ( s>=0 ) return s;
						break;

					case 2 : 
						int LA160_9 = input.LA(1);
						 
						int index160_9 = input.index();
						input.rewind();
						s = -1;
						if ( (synpred17_XQueryParser()) ) {s = 13;}
						else if ( (true) ) {s = 2;}
						 
						input.seek(index160_9);
						if ( s>=0 ) return s;
						break;
			}
			if (state.backtracking>0) {state.failed=true; return -1;}
			NoViableAltException nvae =
				new NoViableAltException(getDescription(), 160, _s, input);
			error(nvae);
			throw nvae;
		}
	}

	public static final BitSet FOLLOW_p_VersionDecl_in_p_Module508 = new BitSet(new long[]{0xFFFFD1B0FEFFFF70L,0xFFF3C7FFFE0FB9FFL,0xFFFBF3FE3BC17FFFL,0xFF7F9FEFE3F6FC9FL,0x000008000CFFEFFFL});
	public static final BitSet FOLLOW_p_LibraryModule_in_p_Module541 = new BitSet(new long[]{0x0000000000000000L});
	public static final BitSet FOLLOW_p_MainModule_in_p_Module564 = new BitSet(new long[]{0x0000000000000000L});
	public static final BitSet FOLLOW_EOF_in_p_Module588 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_XQUERY_in_p_VersionDecl616 = new BitSet(new long[]{0x0000000000000000L,0x0000000000010000L,0x0000000000000000L,0x0000000000000000L,0x0000000000002000L});
	public static final BitSet FOLLOW_ENCODING_in_p_VersionDecl624 = new BitSet(new long[]{0x0000000000004000L,0x0000000000000000L,0x0000000000000000L,0x0000000000020000L});
	public static final BitSet FOLLOW_p_StringLiteral_in_p_VersionDecl630 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000001000000000L});
	public static final BitSet FOLLOW_VERSION_in_p_VersionDecl651 = new BitSet(new long[]{0x0000000000004000L,0x0000000000000000L,0x0000000000000000L,0x0000000000020000L});
	public static final BitSet FOLLOW_p_StringLiteral_in_p_VersionDecl657 = new BitSet(new long[]{0x0000000000000000L,0x0000000000010000L,0x0000000000000000L,0x0000001000000000L});
	public static final BitSet FOLLOW_ENCODING_in_p_VersionDecl664 = new BitSet(new long[]{0x0000000000004000L,0x0000000000000000L,0x0000000000000000L,0x0000000000020000L});
	public static final BitSet FOLLOW_p_StringLiteral_in_p_VersionDecl670 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000001000000000L});
	public static final BitSet FOLLOW_SEMICOLON_in_p_VersionDecl676 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_pm_Prolog_in_p_MainModule742 = new BitSet(new long[]{0xFFFFD1B0FEFFFF70L,0xFFF3C7FFFE0FB9FFL,0xFFFBF3FE3BC17FFFL,0xFF7F9FEFE3F6FC9FL,0x000008000CFFEFFFL});
	public static final BitSet FOLLOW_pm_QueryBody_in_p_MainModule744 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_p_ModuleDecl_in_p_LibraryModule800 = new BitSet(new long[]{0x0200000000000000L,0x0040000000000000L});
	public static final BitSet FOLLOW_pm_Prolog_in_p_LibraryModule802 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_MODULE_in_p_ModuleDecl858 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000008000000000L});
	public static final BitSet FOLLOW_NAMESPACE_in_p_ModuleDecl862 = new BitSet(new long[]{0xFFFFD1B0FEEFAF70L,0xFFF3C7FFFE0FB83FL,0xFFFBF3FC10013F7FL,0xFF7D89EFE3F4FC1FL,0x000008000CFFEFBFL});
	public static final BitSet FOLLOW_p_NCName_in_p_ModuleDecl866 = new BitSet(new long[]{0x0000000000000000L,0x0000000000100000L});
	public static final BitSet FOLLOW_EQUAL_in_p_ModuleDecl868 = new BitSet(new long[]{0x0000000000004000L,0x0000000000000000L,0x0000000000000000L,0x0000000000020000L});
	public static final BitSet FOLLOW_p_StringLiteral_in_p_ModuleDecl870 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000001000000000L});
	public static final BitSet FOLLOW_SEMICOLON_in_p_ModuleDecl872 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_pm_DefaultNamespaceDecl_in_pm_Prolog931 = new BitSet(new long[]{0x0200000000000002L,0x0040000000000000L});
	public static final BitSet FOLLOW_p_Setter_in_pm_Prolog937 = new BitSet(new long[]{0x0200000000000002L,0x0040000000000000L});
	public static final BitSet FOLLOW_pm_NamespaceDecl_in_pm_Prolog943 = new BitSet(new long[]{0x0200000000000002L,0x0040000000000000L});
	public static final BitSet FOLLOW_p_Import_in_pm_Prolog949 = new BitSet(new long[]{0x0200000000000002L,0x0040000000000000L});
	public static final BitSet FOLLOW_pm_FTOptionDecl_in_pm_Prolog955 = new BitSet(new long[]{0x0200000000000002L,0x0040000000000000L});
	public static final BitSet FOLLOW_pg_OrderedDecl_in_pm_Prolog962 = new BitSet(new long[]{0x0200000000000002L});
	public static final BitSet FOLLOW_pm_ContextItemDecl_in_pg_OrderedDecl1277 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_pm_AnnotatedDecl_in_pg_OrderedDecl1289 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_pm_OptionDecl_in_pg_OrderedDecl1301 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_pm_BoundarySpaceDecl_in_p_Setter1331 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_pm_DefaultCollationDecl_in_p_Setter1343 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_pm_BaseURIDecl_in_p_Setter1355 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_pm_ConstructionDecl_in_p_Setter1367 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_pm_OrderingModeDecl_in_p_Setter1379 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_pm_EmptyOrderDecl_in_p_Setter1391 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_pm_RevalidationDecl_in_p_Setter1406 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_pm_CopyNamespacesDecl_in_p_Setter1418 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_pm_DecimalFormatDecl_in_p_Setter1430 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_DECLARE_in_pm_BoundarySpaceDecl1462 = new BitSet(new long[]{0x0000000002000000L});
	public static final BitSet FOLLOW_BOUNDARY_SPACE_in_pm_BoundarySpaceDecl1468 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0040000000001000L});
	public static final BitSet FOLLOW_PRESERVE_in_pm_BoundarySpaceDecl1477 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000001000000000L});
	public static final BitSet FOLLOW_STRIP_in_pm_BoundarySpaceDecl1487 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000001000000000L});
	public static final BitSet FOLLOW_SEMICOLON_in_pm_BoundarySpaceDecl1494 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_DECLARE_in_pm_DefaultCollationDecl1522 = new BitSet(new long[]{0x0400000000000000L});
	public static final BitSet FOLLOW_DEFAULT_in_pm_DefaultCollationDecl1528 = new BitSet(new long[]{0x0000008000000000L});
	public static final BitSet FOLLOW_COLLATION_in_pm_DefaultCollationDecl1534 = new BitSet(new long[]{0x0000000000004000L,0x0000000000000000L,0x0000000000000000L,0x0000000000020000L});
	public static final BitSet FOLLOW_p_StringLiteral_in_pm_DefaultCollationDecl1538 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000001000000000L});
	public static final BitSet FOLLOW_SEMICOLON_in_pm_DefaultCollationDecl1540 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_DECLARE_in_pm_BaseURIDecl1576 = new BitSet(new long[]{0x0000000000200000L});
	public static final BitSet FOLLOW_BASE_URI_in_pm_BaseURIDecl1582 = new BitSet(new long[]{0x0000000000004000L,0x0000000000000000L,0x0000000000000000L,0x0000000000020000L});
	public static final BitSet FOLLOW_p_StringLiteral_in_pm_BaseURIDecl1588 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000001000000000L});
	public static final BitSet FOLLOW_SEMICOLON_in_pm_BaseURIDecl1590 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_DECLARE_in_pm_ConstructionDecl1643 = new BitSet(new long[]{0x0000800000000000L});
	public static final BitSet FOLLOW_CONSTRUCTION_in_pm_ConstructionDecl1649 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0040000000001000L});
	public static final BitSet FOLLOW_STRIP_in_pm_ConstructionDecl1658 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000001000000000L});
	public static final BitSet FOLLOW_PRESERVE_in_pm_ConstructionDecl1664 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000001000000000L});
	public static final BitSet FOLLOW_SEMICOLON_in_pm_ConstructionDecl1671 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_DECLARE_in_pm_OrderingModeDecl1699 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x2000000000000000L});
	public static final BitSet FOLLOW_ORDERING_in_pm_OrderingModeDecl1705 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x1000000000000000L,0x0000000000000000L,0x0000000000000020L});
	public static final BitSet FOLLOW_ORDERED_in_pm_OrderingModeDecl1714 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000001000000000L});
	public static final BitSet FOLLOW_UNORDERED_in_pm_OrderingModeDecl1720 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000001000000000L});
	public static final BitSet FOLLOW_SEMICOLON_in_pm_OrderingModeDecl1727 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_DECLARE_in_pm_EmptyOrderDecl1755 = new BitSet(new long[]{0x0400000000000000L});
	public static final BitSet FOLLOW_DEFAULT_in_pm_EmptyOrderDecl1761 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0800000000000000L});
	public static final BitSet FOLLOW_ORDER_in_pm_EmptyOrderDecl1767 = new BitSet(new long[]{0x0000000000000000L,0x0000000000002000L});
	public static final BitSet FOLLOW_EMPTY_in_pm_EmptyOrderDecl1773 = new BitSet(new long[]{0x0000000000000000L,0x0000400000000000L,0x0000000000000200L});
	public static final BitSet FOLLOW_GREATEST_in_pm_EmptyOrderDecl1782 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000001000000000L});
	public static final BitSet FOLLOW_LEAST_in_pm_EmptyOrderDecl1788 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000001000000000L});
	public static final BitSet FOLLOW_SEMICOLON_in_pm_EmptyOrderDecl1795 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_DECLARE_in_pm_CopyNamespacesDecl1823 = new BitSet(new long[]{0x0020000000000000L});
	public static final BitSet FOLLOW_COPY_NAMESPACES_in_pm_CopyNamespacesDecl1829 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0010000000000000L,0x0000000000001000L});
	public static final BitSet FOLLOW_p_PreserveMode_in_pm_CopyNamespacesDecl1833 = new BitSet(new long[]{0x0000080000000000L});
	public static final BitSet FOLLOW_COMMA_in_pm_CopyNamespacesDecl1835 = new BitSet(new long[]{0x0000000000000000L,0x0400000000000000L,0x0008000000000000L});
	public static final BitSet FOLLOW_p_InheritMode_in_pm_CopyNamespacesDecl1837 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000001000000000L});
	public static final BitSet FOLLOW_SEMICOLON_in_pm_CopyNamespacesDecl1839 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_PRESERVE_in_p_PreserveMode1868 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_NO_PRESERVE_in_p_PreserveMode1874 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_INHERIT_in_p_InheritMode1906 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_NO_INHERIT_in_p_InheritMode1912 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_DECLARE_in_pm_DecimalFormatDecl1951 = new BitSet(new long[]{0x0480000000000000L});
	public static final BitSet FOLLOW_DECIMAL_FORMAT_in_pm_DecimalFormatDecl1959 = new BitSet(new long[]{0xFFFFD1B0FEEFAF70L,0xFFF3C7FFFE0FB83FL,0xFFFBF3FC10013F7FL,0xFF7D89EFE3F4FC1FL,0x000008000CFFEFBFL});
	public static final BitSet FOLLOW_p_QName_in_pm_DecimalFormatDecl1963 = new BitSet(new long[]{0x0100000000000000L,0x0201000000000002L,0x0000020400000000L,0x000000100000000EL,0x0000000008000000L});
	public static final BitSet FOLLOW_DEFAULT_in_pm_DecimalFormatDecl1971 = new BitSet(new long[]{0x0080000000000000L});
	public static final BitSet FOLLOW_DECIMAL_FORMAT_in_pm_DecimalFormatDecl1977 = new BitSet(new long[]{0x0100000000000000L,0x0201000000000002L,0x0000020400000000L,0x000000100000000EL,0x0000000008000000L});
	public static final BitSet FOLLOW_p_DFPropertyName_in_pm_DecimalFormatDecl1984 = new BitSet(new long[]{0x0000000000000000L,0x0000000000100000L});
	public static final BitSet FOLLOW_EQUAL_in_pm_DecimalFormatDecl1986 = new BitSet(new long[]{0x0000000000004000L,0x0000000000000000L,0x0000000000000000L,0x0000000000020000L});
	public static final BitSet FOLLOW_p_StringLiteral_in_pm_DecimalFormatDecl1988 = new BitSet(new long[]{0x0100000000000000L,0x0201000000000002L,0x0000020400000000L,0x000000100000000EL,0x0000000008000000L});
	public static final BitSet FOLLOW_SEMICOLON_in_pm_DecimalFormatDecl1992 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_DECIMAL_SEPARATOR_in_p_DFPropertyName2021 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_GROUPING_SEPARATOR_in_p_DFPropertyName2027 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_INFINITY_in_p_DFPropertyName2033 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_MINUS_SIGN_in_p_DFPropertyName2039 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_NAN_in_p_DFPropertyName2045 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_PERCENT_in_p_DFPropertyName2051 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_PER_MILLE_in_p_DFPropertyName2057 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_ZERO_DIGIT_in_p_DFPropertyName2063 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_DIGIT_in_p_DFPropertyName2069 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_PATTERN_SEPARATOR_in_p_DFPropertyName2075 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_pm_SchemaImport_in_p_Import2104 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_pm_ModuleImport_in_p_Import2108 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_IMPORT_in_pm_SchemaImport2144 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000080000000L});
	public static final BitSet FOLLOW_SCHEMA_in_pm_SchemaImport2150 = new BitSet(new long[]{0x0400000000004000L,0x0000000000000000L,0x0000008000000000L,0x0000000000020000L});
	public static final BitSet FOLLOW_p_SchemaPrefix_in_pm_SchemaImport2156 = new BitSet(new long[]{0x0000000000004000L,0x0000000000000000L,0x0000000000000000L,0x0000000000020000L});
	public static final BitSet FOLLOW_p_StringLiteral_in_pm_SchemaImport2161 = new BitSet(new long[]{0x0000000000040000L,0x0000000000000000L,0x0000000000000000L,0x0000001000000000L});
	public static final BitSet FOLLOW_AT_in_pm_SchemaImport2166 = new BitSet(new long[]{0x0000000000004000L,0x0000000000000000L,0x0000000000000000L,0x0000000000020000L});
	public static final BitSet FOLLOW_p_StringLiteral_in_pm_SchemaImport2172 = new BitSet(new long[]{0x0000080000000000L,0x0000000000000000L,0x0000000000000000L,0x0000001000000000L});
	public static final BitSet FOLLOW_COMMA_in_pm_SchemaImport2175 = new BitSet(new long[]{0x0000000000004000L,0x0000000000000000L,0x0000000000000000L,0x0000000000020000L});
	public static final BitSet FOLLOW_p_StringLiteral_in_pm_SchemaImport2179 = new BitSet(new long[]{0x0000080000000000L,0x0000000000000000L,0x0000000000000000L,0x0000001000000000L});
	public static final BitSet FOLLOW_SEMICOLON_in_pm_SchemaImport2185 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_NAMESPACE_in_p_SchemaPrefix2255 = new BitSet(new long[]{0xFFFFD1B0FEEFAF70L,0xFFF3C7FFFE0FB83FL,0xFFFBF3FC10013F7FL,0xFF7D89EFE3F4FC1FL,0x000008000CFFEFBFL});
	public static final BitSet FOLLOW_p_NCName_in_p_SchemaPrefix2261 = new BitSet(new long[]{0x0000000000000000L,0x0000000000100000L});
	public static final BitSet FOLLOW_EQUAL_in_p_SchemaPrefix2263 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_DEFAULT_in_p_SchemaPrefix2302 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000800L});
	public static final BitSet FOLLOW_ELEMENT_in_p_SchemaPrefix2308 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000008000000000L});
	public static final BitSet FOLLOW_NAMESPACE_in_p_SchemaPrefix2314 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_IMPORT_in_pm_ModuleImport2364 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000002000000000L});
	public static final BitSet FOLLOW_MODULE_in_pm_ModuleImport2370 = new BitSet(new long[]{0x0000000000004000L,0x0000000000000000L,0x0000008000000000L,0x0000000000020000L});
	public static final BitSet FOLLOW_NAMESPACE_in_pm_ModuleImport2377 = new BitSet(new long[]{0xFFFFD1B0FEEFAF70L,0xFFF3C7FFFE0FB83FL,0xFFFBF3FC10013F7FL,0xFF7D89EFE3F4FC1FL,0x000008000CFFEFBFL});
	public static final BitSet FOLLOW_p_NCName_in_pm_ModuleImport2383 = new BitSet(new long[]{0x0000000000000000L,0x0000000000100000L});
	public static final BitSet FOLLOW_EQUAL_in_pm_ModuleImport2385 = new BitSet(new long[]{0x0000000000004000L,0x0000000000000000L,0x0000000000000000L,0x0000000000020000L});
	public static final BitSet FOLLOW_p_StringLiteral_in_pm_ModuleImport2391 = new BitSet(new long[]{0x0000000000040000L,0x0000000000000000L,0x0000000000000000L,0x0000001000000000L});
	public static final BitSet FOLLOW_AT_in_pm_ModuleImport2396 = new BitSet(new long[]{0x0000000000004000L,0x0000000000000000L,0x0000000000000000L,0x0000000000020000L});
	public static final BitSet FOLLOW_p_StringLiteral_in_pm_ModuleImport2402 = new BitSet(new long[]{0x0000080000000000L,0x0000000000000000L,0x0000000000000000L,0x0000001000000000L});
	public static final BitSet FOLLOW_COMMA_in_pm_ModuleImport2405 = new BitSet(new long[]{0x0000000000004000L,0x0000000000000000L,0x0000000000000000L,0x0000000000020000L});
	public static final BitSet FOLLOW_p_StringLiteral_in_pm_ModuleImport2409 = new BitSet(new long[]{0x0000080000000000L,0x0000000000000000L,0x0000000000000000L,0x0000001000000000L});
	public static final BitSet FOLLOW_SEMICOLON_in_pm_ModuleImport2415 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_DECLARE_in_pm_NamespaceDecl2484 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000008000000000L});
	public static final BitSet FOLLOW_NAMESPACE_in_pm_NamespaceDecl2490 = new BitSet(new long[]{0xFFFFD1B0FEEFAF70L,0xFFF3C7FFFE0FB83FL,0xFFFBF3FC10013F7FL,0xFF7D89EFE3F4FC1FL,0x000008000CFFEFBFL});
	public static final BitSet FOLLOW_p_NCName_in_pm_NamespaceDecl2496 = new BitSet(new long[]{0x0000000000000000L,0x0000000000100000L});
	public static final BitSet FOLLOW_EQUAL_in_pm_NamespaceDecl2498 = new BitSet(new long[]{0x0000000000004000L,0x0000000000000000L,0x0000000000000000L,0x0000000000020000L});
	public static final BitSet FOLLOW_p_StringLiteral_in_pm_NamespaceDecl2502 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000001000000000L});
	public static final BitSet FOLLOW_SEMICOLON_in_pm_NamespaceDecl2504 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_DECLARE_in_pm_DefaultNamespaceDecl2561 = new BitSet(new long[]{0x0400000000000000L});
	public static final BitSet FOLLOW_DEFAULT_in_pm_DefaultNamespaceDecl2567 = new BitSet(new long[]{0x0000000000000000L,0x0000020000000800L});
	public static final BitSet FOLLOW_ELEMENT_in_pm_DefaultNamespaceDecl2574 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000008000000000L});
	public static final BitSet FOLLOW_FUNCTION_in_pm_DefaultNamespaceDecl2580 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000008000000000L});
	public static final BitSet FOLLOW_NAMESPACE_in_pm_DefaultNamespaceDecl2587 = new BitSet(new long[]{0x0000000000004000L,0x0000000000000000L,0x0000000000000000L,0x0000000000020000L});
	public static final BitSet FOLLOW_p_StringLiteral_in_pm_DefaultNamespaceDecl2591 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000001000000000L});
	public static final BitSet FOLLOW_SEMICOLON_in_pm_DefaultNamespaceDecl2593 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_DECLARE_in_pm_AnnotatedDecl2621 = new BitSet(new long[]{0x0000010000001000L,0x4100020000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000840L});
	public static final BitSet FOLLOW_p_Annotation_in_pm_AnnotatedDecl2625 = new BitSet(new long[]{0x0000010000001000L,0x4100020000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000840L});
	public static final BitSet FOLLOW_pg_AnnotatedDecl_in_pm_AnnotatedDecl2628 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000001000000000L});
	public static final BitSet FOLLOW_SEMICOLON_in_pm_AnnotatedDecl2630 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_p_VarDecl_in_pg_AnnotatedDecl2654 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_pm_FunctionDecl_in_pg_AnnotatedDecl2666 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_p_CollectionDecl_in_pg_AnnotatedDecl2681 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_p_IndexDecl_in_pg_AnnotatedDecl2696 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_p_ICDecl_in_pg_AnnotatedDecl2711 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_ANN_PERCENT_in_p_Annotation2737 = new BitSet(new long[]{0xFFFFD1B0FEEFAF70L,0xFFF3C7FFFE0FB83FL,0xFFFBF3FC10013F7FL,0xFF7D89EFE3F4FC1FL,0x000008000CFFEFBFL});
	public static final BitSet FOLLOW_p_QName_in_p_Annotation2739 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000004000L});
	public static final BitSet FOLLOW_LPAREN_in_p_Annotation2742 = new BitSet(new long[]{0x0000000000004000L,0x0000000000000000L,0x000000000A400000L,0x0000000000020000L});
	public static final BitSet FOLLOW_p_Literal_in_p_Annotation2744 = new BitSet(new long[]{0x0000080000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000004000000L});
	public static final BitSet FOLLOW_COMMA_in_p_Annotation2747 = new BitSet(new long[]{0x0000000000004000L,0x0000000000000000L,0x000000000A400000L,0x0000000000020000L});
	public static final BitSet FOLLOW_p_Literal_in_p_Annotation2749 = new BitSet(new long[]{0x0000080000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000004000000L});
	public static final BitSet FOLLOW_RPAREN_in_p_Annotation2753 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_VARIABLE_in_p_VarDecl2783 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000040L});
	public static final BitSet FOLLOW_DOLLAR_in_p_VarDecl2787 = new BitSet(new long[]{0xFFFFD1B0FEEFAF70L,0xFFF3C7FFFE0FB83FL,0xFFFBF3FC10013F7FL,0xFF7D89EFE3F4FC1FL,0x000008000CFFEFBFL});
	public static final BitSet FOLLOW_p_QName_in_p_VarDecl2791 = new BitSet(new long[]{0x0000000001010000L,0x0000000020000000L});
	public static final BitSet FOLLOW_p_TypeDeclaration_in_p_VarDecl2795 = new BitSet(new long[]{0x0000000001000000L,0x0000000020000000L});
	public static final BitSet FOLLOW_BIND_in_p_VarDecl2800 = new BitSet(new long[]{0xFFFFD1B0FEFFEF70L,0xFFF3C7FFFE0FB9FFL,0xFFFBF3FE3BC17FFFL,0xFF7F9FEFE3F6FC9FL,0x000008000CFFEFFFL});
	public static final BitSet FOLLOW_p_VarValue_in_p_VarDecl2804 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_EXTERNAL_in_p_VarDecl2812 = new BitSet(new long[]{0x0000000001000002L});
	public static final BitSet FOLLOW_BIND_in_p_VarDecl2817 = new BitSet(new long[]{0xFFFFD1B0FEFFEF70L,0xFFF3C7FFFE0FB9FFL,0xFFFBF3FE3BC17FFFL,0xFF7F9FEFE3F6FC9FL,0x000008000CFFEFFFL});
	public static final BitSet FOLLOW_p_VarDefaultValue_in_p_VarDecl2821 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_p_ExprSingle_in_p_VarValue2900 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_p_ExprSingle_in_p_VarDefaultValue2927 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_DECLARE_in_pm_ContextItemDecl2956 = new BitSet(new long[]{0x0004000000000000L});
	public static final BitSet FOLLOW_CONTEXT_in_pm_ContextItemDecl2962 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000004L});
	public static final BitSet FOLLOW_ITEM_in_pm_ContextItemDecl2968 = new BitSet(new long[]{0x0000000001010000L,0x0000000020000000L});
	public static final BitSet FOLLOW_AS_in_pm_ContextItemDecl2975 = new BitSet(new long[]{0xFFFFD1B0FEEFAF70L,0xFFF3C7FFFE0FB83FL,0xFFFBF3FC10017F7FL,0xFF7D89EFE3F4FC1FL,0x000008000CFFEFBFL});
	public static final BitSet FOLLOW_p_ItemType_in_pm_ContextItemDecl2979 = new BitSet(new long[]{0x0000000001000000L,0x0000000020000000L});
	public static final BitSet FOLLOW_BIND_in_pm_ContextItemDecl2985 = new BitSet(new long[]{0xFFFFD1B0FEFFEF70L,0xFFF3C7FFFE0FB9FFL,0xFFFBF3FE3BC17FFFL,0xFF7F9FEFE3F6FC9FL,0x000008000CFFEFFFL});
	public static final BitSet FOLLOW_p_VarValue_in_pm_ContextItemDecl2987 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000001000000000L});
	public static final BitSet FOLLOW_EXTERNAL_in_pm_ContextItemDecl2995 = new BitSet(new long[]{0x0000000001000000L,0x0000000000000000L,0x0000000000000000L,0x0000001000000000L});
	public static final BitSet FOLLOW_BIND_in_pm_ContextItemDecl3000 = new BitSet(new long[]{0xFFFFD1B0FEFFEF70L,0xFFF3C7FFFE0FB9FFL,0xFFFBF3FE3BC17FFFL,0xFF7F9FEFE3F6FC9FL,0x000008000CFFEFFFL});
	public static final BitSet FOLLOW_p_VarDefaultValue_in_pm_ContextItemDecl3002 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000001000000000L});
	public static final BitSet FOLLOW_SEMICOLON_in_pm_ContextItemDecl3008 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_UPDATING_in_pm_FunctionDecl3041 = new BitSet(new long[]{0x0000000000000000L,0x0000020000000000L});
	public static final BitSet FOLLOW_FUNCTION_in_pm_FunctionDecl3049 = new BitSet(new long[]{0xFFFFD1B0FEEFAF70L,0xFFF3C7FFFE0FB83FL,0xFFFBF3FC10013F7FL,0xFF7D89EFE3F4FC1FL,0x000008000CFFEFFFL});
	public static final BitSet FOLLOW_PRIVATE_in_pm_FunctionDecl3055 = new BitSet(new long[]{0xFFFFD1B0FEEFAF70L,0xFFF3C7FFFE0FB83FL,0xFFFBF3FC10013F7FL,0xFF7D89EFE3F4FC1FL,0x000008000CFFEFFFL});
	public static final BitSet FOLLOW_pg_FQName_in_pm_FunctionDecl3060 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000004000L});
	public static final BitSet FOLLOW_LPAREN_in_pm_FunctionDecl3062 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000040L,0x0000000000000000L,0x0000000004000000L});
	public static final BitSet FOLLOW_p_ParamList_in_pm_FunctionDecl3066 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000004000000L});
	public static final BitSet FOLLOW_RPAREN_in_pm_FunctionDecl3069 = new BitSet(new long[]{0x0000000000010000L,0x0000000020000000L,0x0000000000000080L});
	public static final BitSet FOLLOW_AS_in_pm_FunctionDecl3074 = new BitSet(new long[]{0xFFFFD1B0FEEFAF70L,0xFFF3C7FFFE0FB83FL,0xFFFBF3FC10017F7FL,0xFF7D89EFE3F4FC1FL,0x000008000CFFEFBFL});
	public static final BitSet FOLLOW_p_SequenceType_in_pm_FunctionDecl3080 = new BitSet(new long[]{0x0000000000000000L,0x0000000020000000L,0x0000000000000080L});
	public static final BitSet FOLLOW_LBRACKET_in_pm_FunctionDecl3085 = new BitSet(new long[]{0xFFFFD1B0FEFFFF70L,0xFFF3C7FFFE0FB9FFL,0xFFFBF3FE3BC17FFFL,0xFF7F9FEFE3F6FC9FL,0x000008000CFFEFFFL});
	public static final BitSet FOLLOW_p_StatementsAndOptionalExpr_in_pm_FunctionDecl3089 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000080000L});
	public static final BitSet FOLLOW_RBRACKET_in_pm_FunctionDecl3091 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_EXTERNAL_in_pm_FunctionDecl3097 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_p_Param_in_p_ParamList3174 = new BitSet(new long[]{0x0000080000000002L});
	public static final BitSet FOLLOW_COMMA_in_p_ParamList3177 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000040L});
	public static final BitSet FOLLOW_p_Param_in_p_ParamList3181 = new BitSet(new long[]{0x0000080000000002L});
	public static final BitSet FOLLOW_DOLLAR_in_p_Param3239 = new BitSet(new long[]{0xFFFFD1B0FEEFAF70L,0xFFF3C7FFFE0FB83FL,0xFFFBF3FC10013F7FL,0xFF7D89EFE3F4FC1FL,0x000008000CFFEFBFL});
	public static final BitSet FOLLOW_p_QName_in_p_Param3243 = new BitSet(new long[]{0x0000000000010002L});
	public static final BitSet FOLLOW_p_TypeDeclaration_in_p_Param3247 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_p_EnclosedExpr_in_pm_FunctionBody3303 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_LBRACKET_in_p_EnclosedExpr3330 = new BitSet(new long[]{0xFFFFD1B0FEFFEF70L,0xFFF3C7FFFE0FB9FFL,0xFFFBF3FE3BC17FFFL,0xFF7F9FEFE3F6FC9FL,0x000008000CFFEFFFL});
	public static final BitSet FOLLOW_p_Expr_in_p_EnclosedExpr3332 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000080000L});
	public static final BitSet FOLLOW_RBRACKET_in_p_EnclosedExpr3335 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_DECLARE_in_pm_OptionDecl3387 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0200000000000000L});
	public static final BitSet FOLLOW_OPTION_in_pm_OptionDecl3393 = new BitSet(new long[]{0xFFFFD1B0FEEFAF70L,0xFFF3C7FFFE0FB83FL,0xFFFBF3FC10013F7FL,0xFF7D89EFE3F4FC1FL,0x000008000CFFEFBFL});
	public static final BitSet FOLLOW_p_QName_in_pm_OptionDecl3397 = new BitSet(new long[]{0x0000000000004000L,0x0000000000000000L,0x0000000000000000L,0x0000000000020000L});
	public static final BitSet FOLLOW_p_StringLiteral_in_pm_OptionDecl3399 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000001000000000L});
	public static final BitSet FOLLOW_SEMICOLON_in_pm_OptionDecl3401 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_p_Program_in_pm_QueryBody3430 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_p_Expr_in_pm_QueryBody3442 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_p_ExprSingle_in_p_Expr3478 = new BitSet(new long[]{0x0000080000000002L});
	public static final BitSet FOLLOW_COMMA_in_p_Expr3494 = new BitSet(new long[]{0xFFFFD1B0FEFFEF70L,0xFFF3C7FFFE0FB9FFL,0xFFFBF3FE3BC17FFFL,0xFF7F9FEFE3F6FC9FL,0x000008000CFFEFFFL});
	public static final BitSet FOLLOW_p_ExprSingle_in_p_Expr3496 = new BitSet(new long[]{0x0000080000000002L});
	public static final BitSet FOLLOW_p_FLWORHybrid_in_p_ExprSingle3569 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_p_IfHybrid_in_p_ExprSingle3599 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_p_SwitchHybrid_in_p_ExprSingle3625 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_p_TypeswitchHybrid_in_p_ExprSingle3647 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_p_TryCatchHybrid_in_p_ExprSingle3674 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_p_ExprSimple_in_p_ExprSingle3687 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_p_InitialClause_in_p_FLWORHybrid3714 = new BitSet(new long[]{0x0040000000000000L,0x0000800200000000L,0x0800000000000400L,0x0001000000800000L,0x0000000000010000L});
	public static final BitSet FOLLOW_p_IntermediateClause_in_p_FLWORHybrid3716 = new BitSet(new long[]{0x0040000000000000L,0x0000800200000000L,0x0800000000000400L,0x0001000000800000L,0x0000000000010000L});
	public static final BitSet FOLLOW_p_ReturnHybrid_in_p_FLWORHybrid3719 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_p_ForClause_in_p_InitialClause3746 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_p_LetClause_in_p_InitialClause3750 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_p_WindowClause_in_p_InitialClause3754 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_p_InitialClause_in_p_IntermediateClause3780 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_p_WhereClause_in_p_IntermediateClause3784 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_p_GroupByClause_in_p_IntermediateClause3788 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_p_OrderByClause_in_p_IntermediateClause3792 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_p_CountClause_in_p_IntermediateClause3796 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_FOR_in_p_ForClause3825 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000040L});
	public static final BitSet FOLLOW_p_ForBinding_in_p_ForClause3829 = new BitSet(new long[]{0x0000080000000002L});
	public static final BitSet FOLLOW_COMMA_in_p_ForClause3832 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000040L});
	public static final BitSet FOLLOW_p_ForBinding_in_p_ForClause3834 = new BitSet(new long[]{0x0000080000000002L});
	public static final BitSet FOLLOW_DOLLAR_in_p_ForBinding3862 = new BitSet(new long[]{0xFFFFD1B0FEEFAF70L,0xFFF3C7FFFE0FB83FL,0xFFFBF3FC10013F7FL,0xFF7D89EFE3F4FC1FL,0x000008000CFFEFBFL});
	public static final BitSet FOLLOW_p_VarName_in_p_ForBinding3864 = new BitSet(new long[]{0x0000000000050040L,0x0080000000000000L,0x0000000000000000L,0x0000000400000000L});
	public static final BitSet FOLLOW_p_TypeDeclaration_in_p_ForBinding3866 = new BitSet(new long[]{0x0000000000040040L,0x0080000000000000L,0x0000000000000000L,0x0000000400000000L});
	public static final BitSet FOLLOW_p_AllowingEmpty_in_p_ForBinding3869 = new BitSet(new long[]{0x0000000000040000L,0x0080000000000000L,0x0000000000000000L,0x0000000400000000L});
	public static final BitSet FOLLOW_p_PositionalVar_in_p_ForBinding3872 = new BitSet(new long[]{0x0000000000000000L,0x0080000000000000L,0x0000000000000000L,0x0000000400000000L});
	public static final BitSet FOLLOW_p_FTScoreVar_in_p_ForBinding3875 = new BitSet(new long[]{0x0000000000000000L,0x0080000000000000L});
	public static final BitSet FOLLOW_IN_in_p_ForBinding3880 = new BitSet(new long[]{0xFFFFD1B0FEFFEF70L,0xFFF3C7FFFE0FB9FFL,0xFFFBF3FE3BC17FFFL,0xFF7F9FEFE3F6FC9FL,0x000008000CFFEFFFL});
	public static final BitSet FOLLOW_p_ExprSingle_in_p_ForBinding3884 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_ALLOWING_in_p_AllowingEmpty3913 = new BitSet(new long[]{0x0000000000000000L,0x0000000000002000L});
	public static final BitSet FOLLOW_EMPTY_in_p_AllowingEmpty3919 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_AT_in_p_PositionalVar3949 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000040L});
	public static final BitSet FOLLOW_DOLLAR_in_p_PositionalVar3953 = new BitSet(new long[]{0xFFFFD1B0FEEFAF70L,0xFFF3C7FFFE0FB83FL,0xFFFBF3FC10013F7FL,0xFF7D89EFE3F4FC1FL,0x000008000CFFEFBFL});
	public static final BitSet FOLLOW_p_VarName_in_p_PositionalVar3955 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_LET_in_p_LetClause3983 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000040L,0x0000000000000000L,0x0000000400000000L});
	public static final BitSet FOLLOW_p_LetBinding_in_p_LetClause3987 = new BitSet(new long[]{0x0000080000000002L});
	public static final BitSet FOLLOW_COMMA_in_p_LetClause3990 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000040L,0x0000000000000000L,0x0000000400000000L});
	public static final BitSet FOLLOW_p_LetBinding_in_p_LetClause3992 = new BitSet(new long[]{0x0000080000000002L});
	public static final BitSet FOLLOW_DOLLAR_in_p_LetBinding4024 = new BitSet(new long[]{0xFFFFD1B0FEEFAF70L,0xFFF3C7FFFE0FB83FL,0xFFFBF3FC10013F7FL,0xFF7D89EFE3F4FC1FL,0x000008000CFFEFBFL});
	public static final BitSet FOLLOW_p_VarName_in_p_LetBinding4026 = new BitSet(new long[]{0x0000000001010000L});
	public static final BitSet FOLLOW_p_TypeDeclaration_in_p_LetBinding4028 = new BitSet(new long[]{0x0000000001000000L});
	public static final BitSet FOLLOW_p_FTScoreVar_in_p_LetBinding4034 = new BitSet(new long[]{0x0000000001000000L});
	public static final BitSet FOLLOW_BIND_in_p_LetBinding4038 = new BitSet(new long[]{0xFFFFD1B0FEFFEF70L,0xFFF3C7FFFE0FB9FFL,0xFFFBF3FE3BC17FFFL,0xFF7F9FEFE3F6FC9FL,0x000008000CFFEFFFL});
	public static final BitSet FOLLOW_p_ExprSingle_in_p_LetBinding4040 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_FOR_in_p_WindowClause4069 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000080000000000L,0x0000000000000001L});
	public static final BitSet FOLLOW_p_TumblingWindowClause_in_p_WindowClause4074 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_p_SlidingWindowClause_in_p_WindowClause4078 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_TUMBLING_in_p_TumblingWindowClause4115 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000080000L});
	public static final BitSet FOLLOW_WINDOW_in_p_TumblingWindowClause4121 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000040L});
	public static final BitSet FOLLOW_DOLLAR_in_p_TumblingWindowClause4125 = new BitSet(new long[]{0xFFFFD1B0FEEFAF70L,0xFFF3C7FFFE0FB83FL,0xFFFBF3FC10013F7FL,0xFF7D89EFE3F4FC1FL,0x000008000CFFEFBFL});
	public static final BitSet FOLLOW_p_VarName_in_p_TumblingWindowClause4127 = new BitSet(new long[]{0x0000000000010000L,0x0080000000000000L});
	public static final BitSet FOLLOW_p_TypeDeclaration_in_p_TumblingWindowClause4129 = new BitSet(new long[]{0x0000000000000000L,0x0080000000000000L});
	public static final BitSet FOLLOW_IN_in_p_TumblingWindowClause4134 = new BitSet(new long[]{0xFFFFD1B0FEFFEF70L,0xFFF3C7FFFE0FB9FFL,0xFFFBF3FE3BC17FFFL,0xFF7F9FEFE3F6FC9FL,0x000008000CFFEFFFL});
	public static final BitSet FOLLOW_p_ExprSingle_in_p_TumblingWindowClause4138 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0004000000000000L});
	public static final BitSet FOLLOW_p_WindowStartCondition_in_p_TumblingWindowClause4141 = new BitSet(new long[]{0x0000000000000002L,0x0000000000020000L,0x0100000000000000L});
	public static final BitSet FOLLOW_p_WindowEndCondition_in_p_TumblingWindowClause4143 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_SLIDING_in_p_SlidingWindowClause4172 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000080000L});
	public static final BitSet FOLLOW_WINDOW_in_p_SlidingWindowClause4178 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000040L});
	public static final BitSet FOLLOW_DOLLAR_in_p_SlidingWindowClause4182 = new BitSet(new long[]{0xFFFFD1B0FEEFAF70L,0xFFF3C7FFFE0FB83FL,0xFFFBF3FC10013F7FL,0xFF7D89EFE3F4FC1FL,0x000008000CFFEFBFL});
	public static final BitSet FOLLOW_p_VarName_in_p_SlidingWindowClause4184 = new BitSet(new long[]{0x0000000000010000L,0x0080000000000000L});
	public static final BitSet FOLLOW_p_TypeDeclaration_in_p_SlidingWindowClause4186 = new BitSet(new long[]{0x0000000000000000L,0x0080000000000000L});
	public static final BitSet FOLLOW_IN_in_p_SlidingWindowClause4191 = new BitSet(new long[]{0xFFFFD1B0FEFFEF70L,0xFFF3C7FFFE0FB9FFL,0xFFFBF3FE3BC17FFFL,0xFF7F9FEFE3F6FC9FL,0x000008000CFFEFFFL});
	public static final BitSet FOLLOW_p_ExprSingle_in_p_SlidingWindowClause4195 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0004000000000000L});
	public static final BitSet FOLLOW_p_WindowStartCondition_in_p_SlidingWindowClause4198 = new BitSet(new long[]{0x0000000000000002L,0x0000000000020000L,0x0100000000000000L});
	public static final BitSet FOLLOW_p_WindowEndCondition_in_p_SlidingWindowClause4200 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_START_in_p_WindowStartCondition4229 = new BitSet(new long[]{0x0000000000040000L,0x0000000000000040L,0x0000200000000000L,0x0000000000002000L,0x0000000000008000L});
	public static final BitSet FOLLOW_p_WindowVars_in_p_WindowStartCondition4233 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000008000L});
	public static final BitSet FOLLOW_WHEN_in_p_WindowStartCondition4237 = new BitSet(new long[]{0xFFFFD1B0FEFFEF70L,0xFFF3C7FFFE0FB9FFL,0xFFFBF3FE3BC17FFFL,0xFF7F9FEFE3F6FC9FL,0x000008000CFFEFFFL});
	public static final BitSet FOLLOW_p_ExprSingle_in_p_WindowStartCondition4241 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_ONLY_in_p_WindowEndCondition4271 = new BitSet(new long[]{0x0000000000000000L,0x0000000000020000L});
	public static final BitSet FOLLOW_END_in_p_WindowEndCondition4279 = new BitSet(new long[]{0x0000000000040000L,0x0000000000000040L,0x0000200000000000L,0x0000000000002000L,0x0000000000008000L});
	public static final BitSet FOLLOW_p_WindowVars_in_p_WindowEndCondition4283 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000008000L});
	public static final BitSet FOLLOW_WHEN_in_p_WindowEndCondition4287 = new BitSet(new long[]{0xFFFFD1B0FEFFEF70L,0xFFF3C7FFFE0FB9FFL,0xFFFBF3FE3BC17FFFL,0xFF7F9FEFE3F6FC9FL,0x000008000CFFEFFFL});
	public static final BitSet FOLLOW_p_ExprSingle_in_p_WindowEndCondition4291 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_DOLLAR_in_p_WindowVars4319 = new BitSet(new long[]{0xFFFFD1B0FEEFAF70L,0xFFF3C7FFFE0FB83FL,0xFFFBF3FC10013F7FL,0xFF7D89EFE3F4FC1FL,0x000008000CFFEFBFL});
	public static final BitSet FOLLOW_p_CurrentItem_in_p_WindowVars4321 = new BitSet(new long[]{0x0000000000040002L,0x0000000000000000L,0x0000200000000000L,0x0000000000002000L});
	public static final BitSet FOLLOW_p_PositionalVar_in_p_WindowVars4325 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000200000000000L,0x0000000000002000L});
	public static final BitSet FOLLOW_PREVIOUS_in_p_WindowVars4331 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000040L});
	public static final BitSet FOLLOW_DOLLAR_in_p_WindowVars4335 = new BitSet(new long[]{0xFFFFD1B0FEEFAF70L,0xFFF3C7FFFE0FB83FL,0xFFFBF3FC10013F7FL,0xFF7D89EFE3F4FC1FL,0x000008000CFFEFBFL});
	public static final BitSet FOLLOW_p_PreviousItem_in_p_WindowVars4337 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000200000000000L});
	public static final BitSet FOLLOW_NEXT_in_p_WindowVars4344 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000040L});
	public static final BitSet FOLLOW_DOLLAR_in_p_WindowVars4348 = new BitSet(new long[]{0xFFFFD1B0FEEFAF70L,0xFFF3C7FFFE0FB83FL,0xFFFBF3FC10013F7FL,0xFF7D89EFE3F4FC1FL,0x000008000CFFEFBFL});
	public static final BitSet FOLLOW_p_NextItem_in_p_WindowVars4350 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_p_QName_in_p_CurrentItem4378 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_p_QName_in_p_PreviousItem4404 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_p_QName_in_p_NextItem4430 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_COUNT_in_p_CountClause4458 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000040L});
	public static final BitSet FOLLOW_DOLLAR_in_p_CountClause4462 = new BitSet(new long[]{0xFFFFD1B0FEEFAF70L,0xFFF3C7FFFE0FB83FL,0xFFFBF3FC10013F7FL,0xFF7D89EFE3F4FC1FL,0x000008000CFFEFBFL});
	public static final BitSet FOLLOW_p_VarName_in_p_CountClause4464 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_WHERE_in_p_WhereClause4500 = new BitSet(new long[]{0xFFFFD1B0FEFFEF70L,0xFFF3C7FFFE0FB9FFL,0xFFFBF3FE3BC17FFFL,0xFF7F9FEFE3F6FC9FL,0x000008000CFFEFFFL});
	public static final BitSet FOLLOW_p_ExprSingle_in_p_WhereClause4504 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_GROUP_in_p_GroupByClause4533 = new BitSet(new long[]{0x0000000008000000L});
	public static final BitSet FOLLOW_BY_in_p_GroupByClause4539 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000040L});
	public static final BitSet FOLLOW_p_GroupingSpecList_in_p_GroupByClause4543 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_p_GroupingSpec_in_p_GroupingSpecList4569 = new BitSet(new long[]{0x0000080000000002L});
	public static final BitSet FOLLOW_COMMA_in_p_GroupingSpecList4572 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000040L});
	public static final BitSet FOLLOW_p_GroupingSpec_in_p_GroupingSpecList4574 = new BitSet(new long[]{0x0000080000000002L});
	public static final BitSet FOLLOW_DOLLAR_in_p_GroupingSpec4602 = new BitSet(new long[]{0xFFFFD1B0FEEFAF70L,0xFFF3C7FFFE0FB83FL,0xFFFBF3FC10013F7FL,0xFF7D89EFE3F4FC1FL,0x000008000CFFEFBFL});
	public static final BitSet FOLLOW_p_VarName_in_p_GroupingSpec4604 = new BitSet(new long[]{0x0000008000000002L});
	public static final BitSet FOLLOW_COLLATION_in_p_GroupingSpec4609 = new BitSet(new long[]{0x0000000000004000L,0x0000000000000000L,0x0000000000000000L,0x0000000000020000L});
	public static final BitSet FOLLOW_p_StringLiteral_in_p_GroupingSpec4613 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_ORDER_in_p_OrderByClause4645 = new BitSet(new long[]{0x0000000008000000L});
	public static final BitSet FOLLOW_BY_in_p_OrderByClause4649 = new BitSet(new long[]{0xFFFFD1B0FEFFEF70L,0xFFF3C7FFFE0FB9FFL,0xFFFBF3FE3BC17FFFL,0xFF7F9FEFE3F6FC9FL,0x000008000CFFEFFFL});
	public static final BitSet FOLLOW_STABLE_in_p_OrderByClause4657 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0800000000000000L});
	public static final BitSet FOLLOW_ORDER_in_p_OrderByClause4661 = new BitSet(new long[]{0x0000000008000000L});
	public static final BitSet FOLLOW_BY_in_p_OrderByClause4665 = new BitSet(new long[]{0xFFFFD1B0FEFFEF70L,0xFFF3C7FFFE0FB9FFL,0xFFFBF3FE3BC17FFFL,0xFF7F9FEFE3F6FC9FL,0x000008000CFFEFFFL});
	public static final BitSet FOLLOW_p_OrderSpecList_in_p_OrderByClause4671 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_p_OrderSpec_in_p_OrderSpecList4697 = new BitSet(new long[]{0x0000080000000002L});
	public static final BitSet FOLLOW_COMMA_in_p_OrderSpecList4700 = new BitSet(new long[]{0xFFFFD1B0FEFFEF70L,0xFFF3C7FFFE0FB9FFL,0xFFFBF3FE3BC17FFFL,0xFF7F9FEFE3F6FC9FL,0x000008000CFFEFFFL});
	public static final BitSet FOLLOW_p_OrderSpec_in_p_OrderSpecList4702 = new BitSet(new long[]{0x0000080000000002L});
	public static final BitSet FOLLOW_p_ExprSingle_in_p_OrderSpec4730 = new BitSet(new long[]{0x4000008000020000L,0x0000000000002000L});
	public static final BitSet FOLLOW_p_OrderModifier_in_p_OrderSpec4733 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_ASCENDING_in_p_OrderModifier4762 = new BitSet(new long[]{0x0000008000000002L,0x0000000000002000L});
	public static final BitSet FOLLOW_DESCENDING_in_p_OrderModifier4768 = new BitSet(new long[]{0x0000008000000002L,0x0000000000002000L});
	public static final BitSet FOLLOW_EMPTY_in_p_OrderModifier4775 = new BitSet(new long[]{0x0000000000000000L,0x0000400000000000L,0x0000000000000200L});
	public static final BitSet FOLLOW_GREATEST_in_p_OrderModifier4780 = new BitSet(new long[]{0x0000008000000002L});
	public static final BitSet FOLLOW_LEAST_in_p_OrderModifier4786 = new BitSet(new long[]{0x0000008000000002L});
	public static final BitSet FOLLOW_COLLATION_in_p_OrderModifier4794 = new BitSet(new long[]{0x0000000000004000L,0x0000000000000000L,0x0000000000000000L,0x0000000000020000L});
	public static final BitSet FOLLOW_p_StringLiteral_in_p_OrderModifier4796 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_RETURN_in_p_ReturnHybrid4829 = new BitSet(new long[]{0xFFFFD1B0FEFFFF70L,0xFFF3C7FFFE0FB9FFL,0xFFFBF3FE3BC17FFFL,0xFF7F9FEFE3F6FC9FL,0x000008000CFFEFFFL});
	public static final BitSet FOLLOW_p_Hybrid_in_p_ReturnHybrid4833 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_SOME_in_p_QuantifiedExpr4863 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000040L});
	public static final BitSet FOLLOW_EVERY_in_p_QuantifiedExpr4869 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000040L});
	public static final BitSet FOLLOW_DOLLAR_in_p_QuantifiedExpr4874 = new BitSet(new long[]{0xFFFFD1B0FEEFAF70L,0xFFF3C7FFFE0FB83FL,0xFFFBF3FC10013F7FL,0xFF7D89EFE3F4FC1FL,0x000008000CFFEFBFL});
	public static final BitSet FOLLOW_p_VarName_in_p_QuantifiedExpr4876 = new BitSet(new long[]{0x0000000000010000L,0x0080000000000000L});
	public static final BitSet FOLLOW_p_TypeDeclaration_in_p_QuantifiedExpr4878 = new BitSet(new long[]{0x0000000000000000L,0x0080000000000000L});
	public static final BitSet FOLLOW_IN_in_p_QuantifiedExpr4883 = new BitSet(new long[]{0xFFFFD1B0FEFFEF70L,0xFFF3C7FFFE0FB9FFL,0xFFFBF3FE3BC17FFFL,0xFF7F9FEFE3F6FC9FL,0x000008000CFFEFFFL});
	public static final BitSet FOLLOW_p_ExprSingle_in_p_QuantifiedExpr4887 = new BitSet(new long[]{0x0000080000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000040000000L});
	public static final BitSet FOLLOW_COMMA_in_p_QuantifiedExpr4891 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000040L});
	public static final BitSet FOLLOW_DOLLAR_in_p_QuantifiedExpr4893 = new BitSet(new long[]{0xFFFFD1B0FEEFAF70L,0xFFF3C7FFFE0FB83FL,0xFFFBF3FC10013F7FL,0xFF7D89EFE3F4FC1FL,0x000008000CFFEFBFL});
	public static final BitSet FOLLOW_p_QName_in_p_QuantifiedExpr4895 = new BitSet(new long[]{0x0000000000010000L,0x0080000000000000L});
	public static final BitSet FOLLOW_p_TypeDeclaration_in_p_QuantifiedExpr4897 = new BitSet(new long[]{0x0000000000000000L,0x0080000000000000L});
	public static final BitSet FOLLOW_IN_in_p_QuantifiedExpr4902 = new BitSet(new long[]{0xFFFFD1B0FEFFEF70L,0xFFF3C7FFFE0FB9FFL,0xFFFBF3FE3BC17FFFL,0xFF7F9FEFE3F6FC9FL,0x000008000CFFEFFFL});
	public static final BitSet FOLLOW_p_ExprSingle_in_p_QuantifiedExpr4906 = new BitSet(new long[]{0x0000080000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000040000000L});
	public static final BitSet FOLLOW_SATISFIES_in_p_QuantifiedExpr4913 = new BitSet(new long[]{0xFFFFD1B0FEFFEF70L,0xFFF3C7FFFE0FB9FFL,0xFFFBF3FE3BC17FFFL,0xFF7F9FEFE3F6FC9FL,0x000008000CFFEFFFL});
	public static final BitSet FOLLOW_p_ExprSingle_in_p_QuantifiedExpr4917 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_SWITCH_in_p_SwitchHybrid4947 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000004000L});
	public static final BitSet FOLLOW_LPAREN_in_p_SwitchHybrid4951 = new BitSet(new long[]{0xFFFFD1B0FEFFEF70L,0xFFF3C7FFFE0FB9FFL,0xFFFBF3FE3BC17FFFL,0xFF7F9FEFE3F6FC9FL,0x000008000CFFEFFFL});
	public static final BitSet FOLLOW_p_Expr_in_p_SwitchHybrid4953 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000004000000L});
	public static final BitSet FOLLOW_RPAREN_in_p_SwitchHybrid4956 = new BitSet(new long[]{0x0000000010000000L});
	public static final BitSet FOLLOW_p_SwitchCaseHybrid_in_p_SwitchHybrid4958 = new BitSet(new long[]{0x0400000010000000L});
	public static final BitSet FOLLOW_DEFAULT_in_p_SwitchHybrid4964 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000800000L});
	public static final BitSet FOLLOW_RETURN_in_p_SwitchHybrid4970 = new BitSet(new long[]{0xFFFFD1B0FEFFFF70L,0xFFF3C7FFFE0FB9FFL,0xFFFBF3FE3BC17FFFL,0xFF7F9FEFE3F6FC9FL,0x000008000CFFEFFFL});
	public static final BitSet FOLLOW_p_Hybrid_in_p_SwitchHybrid4974 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_CASE_in_p_SwitchCaseHybrid5005 = new BitSet(new long[]{0xFFFFD1B0FEFFEF70L,0xFFF3C7FFFE0FB9FFL,0xFFFBF3FE3BC17FFFL,0xFF7F9FEFE3F6FC9FL,0x000008000CFFEFFFL});
	public static final BitSet FOLLOW_p_SwitchCaseOperand_in_p_SwitchCaseHybrid5009 = new BitSet(new long[]{0x0000000010000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000800000L});
	public static final BitSet FOLLOW_RETURN_in_p_SwitchCaseHybrid5015 = new BitSet(new long[]{0xFFFFD1B0FEFFFF70L,0xFFF3C7FFFE0FB9FFL,0xFFFBF3FE3BC17FFFL,0xFF7F9FEFE3F6FC9FL,0x000008000CFFEFFFL});
	public static final BitSet FOLLOW_p_Hybrid_in_p_SwitchCaseHybrid5019 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_p_ExprSingle_in_p_SwitchCaseOperand5046 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_TYPESWITCH_in_p_TypeswitchHybrid5076 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000004000L});
	public static final BitSet FOLLOW_LPAREN_in_p_TypeswitchHybrid5080 = new BitSet(new long[]{0xFFFFD1B0FEFFEF70L,0xFFF3C7FFFE0FB9FFL,0xFFFBF3FE3BC17FFFL,0xFF7F9FEFE3F6FC9FL,0x000008000CFFEFFFL});
	public static final BitSet FOLLOW_p_Expr_in_p_TypeswitchHybrid5082 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000004000000L});
	public static final BitSet FOLLOW_RPAREN_in_p_TypeswitchHybrid5085 = new BitSet(new long[]{0x0000000010000000L});
	public static final BitSet FOLLOW_p_CaseHybrid_in_p_TypeswitchHybrid5087 = new BitSet(new long[]{0x0400000010000000L});
	public static final BitSet FOLLOW_DEFAULT_in_p_TypeswitchHybrid5093 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000040L,0x0000000000000000L,0x0000000000800000L});
	public static final BitSet FOLLOW_DOLLAR_in_p_TypeswitchHybrid5098 = new BitSet(new long[]{0xFFFFD1B0FEEFAF70L,0xFFF3C7FFFE0FB83FL,0xFFFBF3FC10013F7FL,0xFF7D89EFE3F4FC1FL,0x000008000CFFEFBFL});
	public static final BitSet FOLLOW_p_VarName_in_p_TypeswitchHybrid5100 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000800000L});
	public static final BitSet FOLLOW_RETURN_in_p_TypeswitchHybrid5106 = new BitSet(new long[]{0xFFFFD1B0FEFFFF70L,0xFFF3C7FFFE0FB9FFL,0xFFFBF3FE3BC17FFFL,0xFF7F9FEFE3F6FC9FL,0x000008000CFFEFFFL});
	public static final BitSet FOLLOW_p_Hybrid_in_p_TypeswitchHybrid5110 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_CASE_in_p_CaseHybrid5140 = new BitSet(new long[]{0xFFFFD1B0FEEFAF70L,0xFFF3C7FFFE0FB87FL,0xFFFBF3FC10017F7FL,0xFF7D89EFE3F4FC1FL,0x000008000CFFEFBFL});
	public static final BitSet FOLLOW_DOLLAR_in_p_CaseHybrid5145 = new BitSet(new long[]{0xFFFFD1B0FEEFAF70L,0xFFF3C7FFFE0FB83FL,0xFFFBF3FC10013F7FL,0xFF7D89EFE3F4FC1FL,0x000008000CFFEFBFL});
	public static final BitSet FOLLOW_p_VarName_in_p_CaseHybrid5147 = new BitSet(new long[]{0x0000000000010000L});
	public static final BitSet FOLLOW_AS_in_p_CaseHybrid5151 = new BitSet(new long[]{0xFFFFD1B0FEEFAF70L,0xFFF3C7FFFE0FB83FL,0xFFFBF3FC10017F7FL,0xFF7D89EFE3F4FC1FL,0x000008000CFFEFBFL});
	public static final BitSet FOLLOW_p_SequenceTypeUnion_in_p_CaseHybrid5157 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000800000L});
	public static final BitSet FOLLOW_RETURN_in_p_CaseHybrid5161 = new BitSet(new long[]{0xFFFFD1B0FEFFEF70L,0xFFF3C7FFFE0FB9FFL,0xFFFBF3FE3BC17FFFL,0xFF7F9FEFE3F6FC9FL,0x000008000CFFEFFFL});
	public static final BitSet FOLLOW_p_ExprSingle_in_p_CaseHybrid5165 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_p_SequenceType_in_p_SequenceTypeUnion5192 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000001000L});
	public static final BitSet FOLLOW_VBAR_in_p_SequenceTypeUnion5195 = new BitSet(new long[]{0xFFFFD1B0FEEFAF70L,0xFFF3C7FFFE0FB83FL,0xFFFBF3FC10017F7FL,0xFF7D89EFE3F4FC1FL,0x000008000CFFEFBFL});
	public static final BitSet FOLLOW_p_SequenceType_in_p_SequenceTypeUnion5197 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000001000L});
	public static final BitSet FOLLOW_IF_in_p_IfHybrid5228 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000004000L});
	public static final BitSet FOLLOW_LPAREN_in_p_IfHybrid5232 = new BitSet(new long[]{0xFFFFD1B0FEFFEF70L,0xFFF3C7FFFE0FB9FFL,0xFFFBF3FE3BC17FFFL,0xFF7F9FEFE3F6FC9FL,0x000008000CFFEFFFL});
	public static final BitSet FOLLOW_p_Expr_in_p_IfHybrid5234 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000004000000L});
	public static final BitSet FOLLOW_RPAREN_in_p_IfHybrid5237 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0400000000000000L});
	public static final BitSet FOLLOW_THEN_in_p_IfHybrid5241 = new BitSet(new long[]{0xFFFFD1B0FEFFFF70L,0xFFF3C7FFFE0FB9FFL,0xFFFBF3FE3BC17FFFL,0xFF7F9FEFE3F6FC9FL,0x000008000CFFEFFFL});
	public static final BitSet FOLLOW_p_Hybrid_in_p_IfHybrid5245 = new BitSet(new long[]{0x0000000000000000L,0x0000000000001000L});
	public static final BitSet FOLLOW_ELSE_in_p_IfHybrid5250 = new BitSet(new long[]{0xFFFFD1B0FEFFFF70L,0xFFF3C7FFFE0FB9FFL,0xFFFBF3FE3BC17FFFL,0xFF7F9FEFE3F6FC9FL,0x000008000CFFEFFFL});
	public static final BitSet FOLLOW_p_Hybrid_in_p_IfHybrid5254 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_p_TryClause_in_p_TryCatchExpr5281 = new BitSet(new long[]{0x0000000080000000L});
	public static final BitSet FOLLOW_p_CatchClause_in_p_TryCatchExpr5283 = new BitSet(new long[]{0x0000000080000002L});
	public static final BitSet FOLLOW_TRY_in_p_TryClause5312 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000080L});
	public static final BitSet FOLLOW_LBRACKET_in_p_TryClause5316 = new BitSet(new long[]{0xFFFFD1B0FEFFEF70L,0xFFF3C7FFFE0FB9FFL,0xFFFBF3FE3BC17FFFL,0xFF7F9FEFE3F6FC9FL,0x000008000CFFEFFFL});
	public static final BitSet FOLLOW_p_TryTargetExpr_in_p_TryClause5318 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000080000L});
	public static final BitSet FOLLOW_RBRACKET_in_p_TryClause5320 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_p_Expr_in_p_TryTargetExpr5346 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_CATCH_in_p_CatchClause5375 = new BitSet(new long[]{0xFFFFD1B0FEEFEF70L,0xFFF3C7FFFE0FB83FL,0xFFFBF3FC10013FFFL,0xFF7F89EFE3F6FC1FL,0x000008000CFFEFBFL});
	public static final BitSet FOLLOW_p_CatchErrorList_in_p_CatchClause5379 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000080L});
	public static final BitSet FOLLOW_LBRACKET_in_p_CatchClause5381 = new BitSet(new long[]{0xFFFFD1B0FEFFEF70L,0xFFF3C7FFFE0FB9FFL,0xFFFBF3FE3BC17FFFL,0xFF7F9FEFE3F6FC9FL,0x000008000CFFEFFFL});
	public static final BitSet FOLLOW_p_Expr_in_p_CatchClause5383 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000080000L});
	public static final BitSet FOLLOW_RBRACKET_in_p_CatchClause5386 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_p_NameTest_in_p_CatchErrorList5412 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000001000L});
	public static final BitSet FOLLOW_VBAR_in_p_CatchErrorList5415 = new BitSet(new long[]{0xFFFFD1B0FEEFEF70L,0xFFF3C7FFFE0FB83FL,0xFFFBF3FC10013F7FL,0xFF7F89EFE3F6FC1FL,0x000008000CFFEFBFL});
	public static final BitSet FOLLOW_p_NameTest_in_p_CatchErrorList5417 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000001000L});
	public static final BitSet FOLLOW_p_AndExpr_in_p_OrExpr5462 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0400000000000000L});
	public static final BitSet FOLLOW_OR_in_p_OrExpr5468 = new BitSet(new long[]{0xFFFFD1B0FEFFEF70L,0xFFF3C7FFFE0FB9FFL,0xFFFBF3FE3BC17FFFL,0xFF7F9FEFE3F6FC9FL,0x000008000CFFEFFFL});
	public static final BitSet FOLLOW_p_AndExpr_in_p_OrExpr5472 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0400000000000000L});
	public static final BitSet FOLLOW_p_ComparisonExpr_in_p_AndExpr5501 = new BitSet(new long[]{0x0000000000000802L});
	public static final BitSet FOLLOW_AND_in_p_AndExpr5507 = new BitSet(new long[]{0xFFFFD1B0FEFFEF70L,0xFFF3C7FFFE0FB9FFL,0xFFFBF3FE3BC17FFFL,0xFF7F9FEFE3F6FC9FL,0x000008000CFFEFFFL});
	public static final BitSet FOLLOW_p_ComparisonExpr_in_p_AndExpr5511 = new BitSet(new long[]{0x0000000000000802L});
	public static final BitSet FOLLOW_p_FTContainsExpr_in_p_ComparisonExpr5541 = new BitSet(new long[]{0x0000000000000002L,0x00023C0000180000L,0x0004100000010102L,0x0000700000000000L});
	public static final BitSet FOLLOW_p_ValueComp_in_p_ComparisonExpr5546 = new BitSet(new long[]{0xFFFFD1B0FEFFEF70L,0xFFF3C7FFFE0FB9FFL,0xFFFBF3FE3BC17FFFL,0xFF7F9FEFE3F6FC9FL,0x000008000CFFEFFFL});
	public static final BitSet FOLLOW_p_GeneralComp_in_p_ComparisonExpr5550 = new BitSet(new long[]{0xFFFFD1B0FEFFEF70L,0xFFF3C7FFFE0FB9FFL,0xFFFBF3FE3BC17FFFL,0xFF7F9FEFE3F6FC9FL,0x000008000CFFEFFFL});
	public static final BitSet FOLLOW_p_NodeComp_in_p_ComparisonExpr5554 = new BitSet(new long[]{0xFFFFD1B0FEFFEF70L,0xFFF3C7FFFE0FB9FFL,0xFFFBF3FE3BC17FFFL,0xFF7F9FEFE3F6FC9FL,0x000008000CFFEFFFL});
	public static final BitSet FOLLOW_p_FTContainsExpr_in_p_ComparisonExpr5557 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_p_RangeExpr_in_p_StringConcatExpr5585 = new BitSet(new long[]{0x0000200000000002L});
	public static final BitSet FOLLOW_CONCAT_in_p_StringConcatExpr5589 = new BitSet(new long[]{0xFFFFD1B0FEFFEF70L,0xFFF3C7FFFE0FB9FFL,0xFFFBF3FE3BC17FFFL,0xFF7F9FEFE3F6FC9FL,0x000008000CFFEFFFL});
	public static final BitSet FOLLOW_p_RangeExpr_in_p_StringConcatExpr5591 = new BitSet(new long[]{0x0000200000000002L});
	public static final BitSet FOLLOW_p_AdditiveExpr_in_p_RangeExpr5620 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x2000000000000000L});
	public static final BitSet FOLLOW_TO_in_p_RangeExpr5626 = new BitSet(new long[]{0xFFFFD1B0FEFFEF70L,0xFFF3C7FFFE0FB9FFL,0xFFFBF3FE3BC17FFFL,0xFF7F9FEFE3F6FC9FL,0x000008000CFFEFFFL});
	public static final BitSet FOLLOW_p_AdditiveExpr_in_p_RangeExpr5630 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_p_MultiplicativeExpr_in_p_AdditiveExpr5659 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000200000000L,0x0000000000000080L});
	public static final BitSet FOLLOW_set_in_p_AdditiveExpr5663 = new BitSet(new long[]{0xFFFFD1B0FEFFEF70L,0xFFF3C7FFFE0FB9FFL,0xFFFBF3FE3BC17FFFL,0xFF7F9FEFE3F6FC9FL,0x000008000CFFEFFFL});
	public static final BitSet FOLLOW_p_MultiplicativeExpr_in_p_AdditiveExpr5671 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000200000000L,0x0000000000000080L});
	public static final BitSet FOLLOW_p_UnionExpr_in_p_MultiplicativeExpr5700 = new BitSet(new long[]{0x0000000000000002L,0x0010000000000008L,0x0000000800000000L,0x0002000000000000L});
	public static final BitSet FOLLOW_STAR_in_p_MultiplicativeExpr5705 = new BitSet(new long[]{0xFFFFD1B0FEFFEF70L,0xFFF3C7FFFE0FB9FFL,0xFFFBF3FE3BC17FFFL,0xFF7F9FEFE3F6FC9FL,0x000008000CFFEFFFL});
	public static final BitSet FOLLOW_DIV_in_p_MultiplicativeExpr5712 = new BitSet(new long[]{0xFFFFD1B0FEFFEF70L,0xFFF3C7FFFE0FB9FFL,0xFFFBF3FE3BC17FFFL,0xFF7F9FEFE3F6FC9FL,0x000008000CFFEFFFL});
	public static final BitSet FOLLOW_IDIV_in_p_MultiplicativeExpr5718 = new BitSet(new long[]{0xFFFFD1B0FEFFEF70L,0xFFF3C7FFFE0FB9FFL,0xFFFBF3FE3BC17FFFL,0xFF7F9FEFE3F6FC9FL,0x000008000CFFEFFFL});
	public static final BitSet FOLLOW_MOD_in_p_MultiplicativeExpr5724 = new BitSet(new long[]{0xFFFFD1B0FEFFEF70L,0xFFF3C7FFFE0FB9FFL,0xFFFBF3FE3BC17FFFL,0xFF7F9FEFE3F6FC9FL,0x000008000CFFEFFFL});
	public static final BitSet FOLLOW_p_UnionExpr_in_p_MultiplicativeExpr5730 = new BitSet(new long[]{0x0000000000000002L,0x0010000000000008L,0x0000000800000000L,0x0002000000000000L});
	public static final BitSet FOLLOW_p_IntersectExceptExpr_in_p_UnionExpr5759 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000001008L});
	public static final BitSet FOLLOW_UNION_in_p_UnionExpr5766 = new BitSet(new long[]{0xFFFFD1B0FEFFEF70L,0xFFF3C7FFFE0FB9FFL,0xFFFBF3FE3BC17FFFL,0xFF7F9FEFE3F6FC9FL,0x000008000CFFEFFFL});
	public static final BitSet FOLLOW_VBAR_in_p_UnionExpr5772 = new BitSet(new long[]{0xFFFFD1B0FEFFEF70L,0xFFF3C7FFFE0FB9FFL,0xFFFBF3FE3BC17FFFL,0xFF7F9FEFE3F6FC9FL,0x000008000CFFEFFFL});
	public static final BitSet FOLLOW_p_IntersectExceptExpr_in_p_UnionExpr5775 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000001008L});
	public static final BitSet FOLLOW_p_InstanceofExpr_in_p_IntersectExceptExpr5804 = new BitSet(new long[]{0x0000000000000002L,0x8000000008000000L});
	public static final BitSet FOLLOW_INTERSECT_in_p_IntersectExceptExpr5811 = new BitSet(new long[]{0xFFFFD1B0FEFFEF70L,0xFFF3C7FFFE0FB9FFL,0xFFFBF3FE3BC17FFFL,0xFF7F9FEFE3F6FC9FL,0x000008000CFFEFFFL});
	public static final BitSet FOLLOW_EXCEPT_in_p_IntersectExceptExpr5817 = new BitSet(new long[]{0xFFFFD1B0FEFFEF70L,0xFFF3C7FFFE0FB9FFL,0xFFFBF3FE3BC17FFFL,0xFF7F9FEFE3F6FC9FL,0x000008000CFFEFFFL});
	public static final BitSet FOLLOW_p_InstanceofExpr_in_p_IntersectExceptExpr5822 = new BitSet(new long[]{0x0000000000000002L,0x8000000008000000L});
	public static final BitSet FOLLOW_p_TreatExpr_in_p_InstanceofExpr5851 = new BitSet(new long[]{0x0000000000000002L,0x2000000000000000L});
	public static final BitSet FOLLOW_INSTANCE_in_p_InstanceofExpr5857 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0040000000000000L});
	public static final BitSet FOLLOW_OF_in_p_InstanceofExpr5863 = new BitSet(new long[]{0xFFFFD1B0FEEFAF70L,0xFFF3C7FFFE0FB83FL,0xFFFBF3FC10017F7FL,0xFF7D89EFE3F4FC1FL,0x000008000CFFEFBFL});
	public static final BitSet FOLLOW_p_SequenceType_in_p_InstanceofExpr5867 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_p_CastableExpr_in_p_TreatExpr5895 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x4000000000000000L});
	public static final BitSet FOLLOW_TREAT_in_p_TreatExpr5901 = new BitSet(new long[]{0x0000000000010000L});
	public static final BitSet FOLLOW_AS_in_p_TreatExpr5907 = new BitSet(new long[]{0xFFFFD1B0FEEFAF70L,0xFFF3C7FFFE0FB83FL,0xFFFBF3FC10017F7FL,0xFF7D89EFE3F4FC1FL,0x000008000CFFEFBFL});
	public static final BitSet FOLLOW_p_SequenceType_in_p_TreatExpr5911 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_p_CastExpr_in_p_CastableExpr5948 = new BitSet(new long[]{0x0000000040000002L});
	public static final BitSet FOLLOW_CASTABLE_in_p_CastableExpr5954 = new BitSet(new long[]{0x0000000000010000L});
	public static final BitSet FOLLOW_AS_in_p_CastableExpr5960 = new BitSet(new long[]{0xFFFFD1B0FEEFAF70L,0xFFF3C7FFFE0FB83FL,0xFFFBF3FC10013F7FL,0xFF7D89EFE3F4FC1FL,0x000008000CFFEFBFL});
	public static final BitSet FOLLOW_p_SingleType_in_p_CastableExpr5964 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_p_UnaryExpr_in_p_CastExpr6001 = new BitSet(new long[]{0x0000000020000002L});
	public static final BitSet FOLLOW_CAST_in_p_CastExpr6007 = new BitSet(new long[]{0x0000000000010000L});
	public static final BitSet FOLLOW_AS_in_p_CastExpr6013 = new BitSet(new long[]{0xFFFFD1B0FEEFAF70L,0xFFF3C7FFFE0FB83FL,0xFFFBF3FC10013F7FL,0xFF7D89EFE3F4FC1FL,0x000008000CFFEFBFL});
	public static final BitSet FOLLOW_p_SingleType_in_p_CastExpr6017 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_PLUS_in_p_UnaryExpr6047 = new BitSet(new long[]{0xFFFFD1B0FEFFEF70L,0xFFF3C7FFFE0FB9FFL,0xFFFBF3FE3BC17FFFL,0xFF7F9FEFE3F6FC9FL,0x000008000CFFEFFFL});
	public static final BitSet FOLLOW_MINUS_in_p_UnaryExpr6051 = new BitSet(new long[]{0xFFFFD1B0FEFFEF70L,0xFFF3C7FFFE0FB9FFL,0xFFFBF3FE3BC17FFFL,0xFF7F9FEFE3F6FC9FL,0x000008000CFFEFFFL});
	public static final BitSet FOLLOW_p_ValueExpr_in_p_UnaryExpr6055 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_p_ValidateExpr_in_p_ValueExpr6125 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_p_PathExpr_in_p_ValueExpr6137 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_p_ExtensionExpr_in_p_ValueExpr6149 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_EQ_in_p_ValueComp6224 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_NE_in_p_ValueComp6230 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_LT_in_p_ValueComp6236 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_LE_in_p_ValueComp6242 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_GT_in_p_ValueComp6248 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_GE_in_p_ValueComp6254 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_IS_in_p_NodeComp6285 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_SMALLER_SMALLER_in_p_NodeComp6291 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_GREATER_GREATER_in_p_NodeComp6295 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_VALIDATE_in_p_ValidateExpr6323 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x00000000000000C0L,0x0020000000000000L,0x0000000000000002L});
	public static final BitSet FOLLOW_p_ValidationMode_in_p_ValidateExpr6329 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000080L});
	public static final BitSet FOLLOW_TYPE_in_p_ValidateExpr6335 = new BitSet(new long[]{0xFFFFD1B0FEEFAF70L,0xFFF3C7FFFE0FB83FL,0xFFFBF3FC10013F7FL,0xFF7D89EFE3F4FC1FL,0x000008000CFFEFBFL});
	public static final BitSet FOLLOW_p_TypeName_in_p_ValidateExpr6339 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000080L});
	public static final BitSet FOLLOW_LBRACKET_in_p_ValidateExpr6344 = new BitSet(new long[]{0xFFFFD1B0FEFFEF70L,0xFFF3C7FFFE0FB9FFL,0xFFFBF3FE3BC17FFFL,0xFF7F9FEFE3F6FC9FL,0x000008000CFFEFFFL});
	public static final BitSet FOLLOW_p_Expr_in_p_ValidateExpr6346 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000080000L});
	public static final BitSet FOLLOW_RBRACKET_in_p_ValidateExpr6349 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_LAX_in_p_ValidationMode6378 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_STRICT_in_p_ValidationMode6384 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_L_Pragma_in_p_ExtensionExpr6413 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000020000080L});
	public static final BitSet FOLLOW_LBRACKET_in_p_ExtensionExpr6416 = new BitSet(new long[]{0xFFFFD1B0FEFFEF70L,0xFFF3C7FFFE0FB9FFL,0xFFFBF3FE3BC17FFFL,0xFF7F9FEFE3FEFC9FL,0x000008000CFFEFFFL});
	public static final BitSet FOLLOW_p_Expr_in_p_ExtensionExpr6418 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000080000L});
	public static final BitSet FOLLOW_RBRACKET_in_p_ExtensionExpr6422 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_SLASH_in_p_PathExpr6465 = new BitSet(new long[]{0xFFFFD1B0FEFFEF70L,0xFFF3C7FFFE0FB9FFL,0xFFFBF3FC1BC17FFFL,0xFF7F99EFE3F6FC1FL,0x000008000CFFEFFFL});
	public static final BitSet FOLLOW_p_RelativePathExpr_in_p_PathExpr6467 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_SLASH_in_p_PathExpr6480 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_SLASH_SLASH_in_p_PathExpr6492 = new BitSet(new long[]{0xFFFFD1B0FEFFEF70L,0xFFF3C7FFFE0FB9FFL,0xFFFBF3FC1BC17FFFL,0xFF7F99EFE3F6FC1FL,0x000008000CFFEFFFL});
	public static final BitSet FOLLOW_p_RelativePathExpr_in_p_PathExpr6494 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_p_RelativePathExpr_in_p_PathExpr6506 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_p_StepExpr_in_p_RelativePathExpr6534 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000060000000000L});
	public static final BitSet FOLLOW_set_in_p_RelativePathExpr6537 = new BitSet(new long[]{0xFFFFD1B0FEFFEF70L,0xFFF3C7FFFE0FB9FFL,0xFFFBF3FC1BC17FFFL,0xFF7F99EFE3F6FC1FL,0x000008000CFFEFFFL});
	public static final BitSet FOLLOW_p_StepExpr_in_p_RelativePathExpr6545 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000060000000000L});
	public static final BitSet FOLLOW_p_PostfixExpr_in_p_StepExpr6599 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_p_PostfixExpr_in_p_StepExpr6713 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_p_AxisStep_in_p_StepExpr6731 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_p_PostfixExpr_in_p_StepExpr6752 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_p_PostfixExpr_in_p_StepExpr6770 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_p_AxisStep_in_p_StepExpr6782 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_p_ReverseStep_in_p_AxisStep6809 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000008000L});
	public static final BitSet FOLLOW_p_ForwardStep_in_p_AxisStep6813 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000008000L});
	public static final BitSet FOLLOW_p_PredicateList_in_p_AxisStep6816 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_p_ForwardAxis_in_p_ForwardStep6842 = new BitSet(new long[]{0xFFFFD1B0FEEFEF70L,0xFFF3C7FFFE0FB83FL,0xFFFBF3FC10013F7FL,0xFF7F89EFE3F6FC1FL,0x000008000CFFEFBFL});
	public static final BitSet FOLLOW_p_NodeTest_in_p_ForwardStep6844 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_p_AbbrevForwardStep_in_p_ForwardStep6856 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_CHILD_in_p_ForwardAxis6882 = new BitSet(new long[]{0x0000040000000000L});
	public static final BitSet FOLLOW_COLON_COLON_in_p_ForwardAxis6884 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_DESCENDANT_in_p_ForwardAxis6896 = new BitSet(new long[]{0x0000040000000000L});
	public static final BitSet FOLLOW_COLON_COLON_in_p_ForwardAxis6898 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_ATTRIBUTE_in_p_ForwardAxis6910 = new BitSet(new long[]{0x0000040000000000L});
	public static final BitSet FOLLOW_COLON_COLON_in_p_ForwardAxis6912 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_SELF_in_p_ForwardAxis6924 = new BitSet(new long[]{0x0000040000000000L});
	public static final BitSet FOLLOW_COLON_COLON_in_p_ForwardAxis6926 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_DESCENDANT_OR_SELF_in_p_ForwardAxis6938 = new BitSet(new long[]{0x0000040000000000L});
	public static final BitSet FOLLOW_COLON_COLON_in_p_ForwardAxis6940 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_FOLLOWING_SIBLING_in_p_ForwardAxis6952 = new BitSet(new long[]{0x0000040000000000L});
	public static final BitSet FOLLOW_COLON_COLON_in_p_ForwardAxis6954 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_FOLLOWING_in_p_ForwardAxis6966 = new BitSet(new long[]{0x0000040000000000L});
	public static final BitSet FOLLOW_COLON_COLON_in_p_ForwardAxis6968 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_ATTR_SIGN_in_p_AbbrevForwardStep6994 = new BitSet(new long[]{0xFFFFD1B0FEEFEF70L,0xFFF3C7FFFE0FB83FL,0xFFFBF3FC10013F7FL,0xFF7F89EFE3F6FC1FL,0x000008000CFFEFBFL});
	public static final BitSet FOLLOW_p_NodeTest_in_p_AbbrevForwardStep6997 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_p_ReverseAxis_in_p_ReverseStep7023 = new BitSet(new long[]{0xFFFFD1B0FEEFEF70L,0xFFF3C7FFFE0FB83FL,0xFFFBF3FC10013F7FL,0xFF7F89EFE3F6FC1FL,0x000008000CFFEFBFL});
	public static final BitSet FOLLOW_p_NodeTest_in_p_ReverseStep7025 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_p_AbbrevReverseStep_in_p_ReverseStep7037 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_PARENT_in_p_ReverseAxis7063 = new BitSet(new long[]{0x0000040000000000L});
	public static final BitSet FOLLOW_COLON_COLON_in_p_ReverseAxis7065 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_ANCESTOR_in_p_ReverseAxis7077 = new BitSet(new long[]{0x0000040000000000L});
	public static final BitSet FOLLOW_COLON_COLON_in_p_ReverseAxis7079 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_PRECEDING_SIBLING_in_p_ReverseAxis7091 = new BitSet(new long[]{0x0000040000000000L});
	public static final BitSet FOLLOW_COLON_COLON_in_p_ReverseAxis7093 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_PRECEDING_in_p_ReverseAxis7105 = new BitSet(new long[]{0x0000040000000000L});
	public static final BitSet FOLLOW_COLON_COLON_in_p_ReverseAxis7107 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_ANCESTOR_OR_SELF_in_p_ReverseAxis7119 = new BitSet(new long[]{0x0000040000000000L});
	public static final BitSet FOLLOW_COLON_COLON_in_p_ReverseAxis7121 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_DOT_DOT_in_p_AbbrevReverseStep7147 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_p_KindTest_in_p_NodeTest7173 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_p_NameTest_in_p_NodeTest7177 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_p_Wildcard_in_p_NameTest7209 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_p_QName_in_p_NameTest7230 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_p_QName_in_p_NameTest7248 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_STAR_in_p_Wildcard7278 = new BitSet(new long[]{0x0000020000000002L});
	public static final BitSet FOLLOW_COLON_in_p_Wildcard7281 = new BitSet(new long[]{0xFFFFD1B0FEEFAF70L,0xFFF3C7FFFE0FB83FL,0xFFFBF3FC10013F7FL,0xFF7D89EFE3F4FC1FL,0x000008000CFFEFBFL});
	public static final BitSet FOLLOW_p_NCName_in_p_Wildcard7283 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_p_NCName_in_p_Wildcard7297 = new BitSet(new long[]{0x0000020000000000L});
	public static final BitSet FOLLOW_COLON_in_p_Wildcard7299 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0002000000000000L});
	public static final BitSet FOLLOW_STAR_in_p_Wildcard7301 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_p_StringLiteral_in_p_Wildcard7313 = new BitSet(new long[]{0x0000020000000000L});
	public static final BitSet FOLLOW_COLON_in_p_Wildcard7315 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0002000000000000L});
	public static final BitSet FOLLOW_STAR_in_p_Wildcard7317 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_p_PrimaryExpr_in_p_PostfixExpr7355 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000008000L});
	public static final BitSet FOLLOW_p_Predicate_in_p_PostfixExpr7358 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000008000L});
	public static final BitSet FOLLOW_LPAREN_in_p_ArgumentList7399 = new BitSet(new long[]{0xFFFFD1B0FEFFEF70L,0xFFF3C7FFFE0FB9FFL,0xFFFBF3FE3BC17FFFL,0xFF7F9FEFE7F7FC9FL,0x000008000CFFEFFFL});
	public static final BitSet FOLLOW_p_Argument_in_p_ArgumentList7402 = new BitSet(new long[]{0x0000080000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000004000000L});
	public static final BitSet FOLLOW_COMMA_in_p_ArgumentList7405 = new BitSet(new long[]{0xFFFFD1B0FEFFEF70L,0xFFF3C7FFFE0FB9FFL,0xFFFBF3FE3BC17FFFL,0xFF7F9FEFE3F7FC9FL,0x000008000CFFEFFFL});
	public static final BitSet FOLLOW_p_Argument_in_p_ArgumentList7407 = new BitSet(new long[]{0x0000080000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000004000000L});
	public static final BitSet FOLLOW_RPAREN_in_p_ArgumentList7413 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_p_Predicate_in_p_PredicateList7439 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000008000L});
	public static final BitSet FOLLOW_LSQUARE_in_p_Predicate7466 = new BitSet(new long[]{0xFFFFD1B0FEFFEF70L,0xFFF3C7FFFE0FB9FFL,0xFFFBF3FE3BC17FFFL,0xFF7F9FEFE3F6FC9FL,0x000008000CFFEFFFL});
	public static final BitSet FOLLOW_p_Expr_in_p_Predicate7468 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000008000000L});
	public static final BitSet FOLLOW_RSQUARE_in_p_Predicate7471 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_p_ParenthesizedExpr_in_p_PrimaryExpr7504 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_p_Literal_in_p_PrimaryExpr7516 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_p_VarRef_in_p_PrimaryExpr7528 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_p_ContextItemExpr_in_p_PrimaryExpr7540 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_p_FunctionCall_in_p_PrimaryExpr7552 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_p_OrderedExpr_in_p_PrimaryExpr7564 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_p_UnorderedExpr_in_p_PrimaryExpr7576 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_p_Constructor_in_p_PrimaryExpr7588 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_p_BlockExpr_in_p_PrimaryExpr7602 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_p_NumericLiteral_in_p_Literal7628 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_p_StringLiteral_in_p_Literal7632 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_DOLLAR_in_p_VarRef7700 = new BitSet(new long[]{0xFFFFD1B0FEEFAF70L,0xFFF3C7FFFE0FB83FL,0xFFFBF3FC10013F7FL,0xFF7D89EFE3F4FC1FL,0x000008000CFFEFBFL});
	public static final BitSet FOLLOW_p_VarName_in_p_VarRef7702 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_p_QName_in_p_VarName7728 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_LPAREN_in_p_ParenthesizedExpr7754 = new BitSet(new long[]{0xFFFFD1B0FEFFEF70L,0xFFF3C7FFFE0FB9FFL,0xFFFBF3FE3BC17FFFL,0xFF7F9FEFE7F6FC9FL,0x000008000CFFEFFFL});
	public static final BitSet FOLLOW_p_Expr_in_p_ParenthesizedExpr7756 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000004000000L});
	public static final BitSet FOLLOW_RPAREN_in_p_ParenthesizedExpr7760 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_DOT_in_p_ContextItemExpr7786 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_ORDERED_in_p_OrderedExpr7814 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000080L});
	public static final BitSet FOLLOW_LBRACKET_in_p_OrderedExpr7818 = new BitSet(new long[]{0xFFFFD1B0FEFFEF70L,0xFFF3C7FFFE0FB9FFL,0xFFFBF3FE3BC17FFFL,0xFF7F9FEFE3F6FC9FL,0x000008000CFFEFFFL});
	public static final BitSet FOLLOW_p_Expr_in_p_OrderedExpr7820 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000080000L});
	public static final BitSet FOLLOW_RBRACKET_in_p_OrderedExpr7823 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_UNORDERED_in_p_UnorderedExpr7851 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000080L});
	public static final BitSet FOLLOW_LBRACKET_in_p_UnorderedExpr7855 = new BitSet(new long[]{0xFFFFD1B0FEFFEF70L,0xFFF3C7FFFE0FB9FFL,0xFFFBF3FE3BC17FFFL,0xFF7F9FEFE3F6FC9FL,0x000008000CFFEFFFL});
	public static final BitSet FOLLOW_p_Expr_in_p_UnorderedExpr7857 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000080000L});
	public static final BitSet FOLLOW_RBRACKET_in_p_UnorderedExpr7860 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_pg_FQName_in_p_FunctionCall7887 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000004000L});
	public static final BitSet FOLLOW_p_ArgumentList_in_p_FunctionCall7889 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_p_ExprSingle_in_p_Argument7915 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_p_ArgumentPlaceholder_in_p_Argument7920 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_QUESTION_in_p_ArgumentPlaceholder7946 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_p_DirectConstructor_in_p_Constructor7972 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_p_ComputedConstructor_in_p_Constructor7984 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_p_DirElemConstructor_in_p_DirectConstructor8010 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_p_DirCommentConstructor_in_p_DirectConstructor8022 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_p_DirPIConstructor_in_p_DirectConstructor8034 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_SMALLER_in_p_DirElemConstructor8061 = new BitSet(new long[]{0xFFFFD1B0FEEFAF70L,0xFFF3C7FFFE0FB83FL,0xFFFBF3FC10013F7FL,0xFF7D89EFE3F4FC1FL,0x000008000CFFEFBFL});
	public static final BitSet FOLLOW_p_QName_in_p_DirElemConstructor8075 = new BitSet(new long[]{0x0000000000000000L,0x0000080000004000L,0x0000000000000000L,0x0000000010000000L});
	public static final BitSet FOLLOW_p_DirAttributeList_in_p_DirElemConstructor8077 = new BitSet(new long[]{0x0000000000000000L,0x0000080000004000L});
	public static final BitSet FOLLOW_EMPTY_CLOSE_TAG_in_p_DirElemConstructor8091 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_GREATER_in_p_DirElemConstructor8096 = new BitSet(new long[]{0x0000004000000000L,0x0000000001400000L,0x0000000045980080L,0x0000100000000000L});
	public static final BitSet FOLLOW_pm_DirElemContent_in_p_DirElemConstructor8098 = new BitSet(new long[]{0x0000004000000000L,0x0000000001400000L,0x0000000045980080L,0x0000100000000000L});
	public static final BitSet FOLLOW_CLOSE_TAG_in_p_DirElemConstructor8101 = new BitSet(new long[]{0xFFFFD1B0FEEFAF70L,0xFFF3C7FFFE0FB83FL,0xFFFBF3FC10013F7FL,0xFF7D89EFE3F4FC1FL,0x000008000CFFEFBFL});
	public static final BitSet FOLLOW_p_QName_in_p_DirElemConstructor8103 = new BitSet(new long[]{0x0000000000000000L,0x0000080000000000L,0x0000000000000000L,0x0000000010000000L});
	public static final BitSet FOLLOW_S_in_p_DirElemConstructor8105 = new BitSet(new long[]{0x0000000000000000L,0x0000080000000000L});
	public static final BitSet FOLLOW_GREATER_in_p_DirElemConstructor8108 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_S_in_p_DirAttributeList8185 = new BitSet(new long[]{0xFFFFD1B0FEEFAF72L,0xFFF3C7FFFE0FB83FL,0xFFFBF3FC10013F7FL,0xFF7D89EFF3F4FC1FL,0x000008000CFFEFBFL});
	public static final BitSet FOLLOW_p_QName_in_p_DirAttributeList8188 = new BitSet(new long[]{0x0000000000000000L,0x0000000000100000L,0x0000000000000000L,0x0000000010000000L});
	public static final BitSet FOLLOW_S_in_p_DirAttributeList8190 = new BitSet(new long[]{0x0000000000000000L,0x0000000000100000L});
	public static final BitSet FOLLOW_EQUAL_in_p_DirAttributeList8193 = new BitSet(new long[]{0x0000000000004000L,0x0000000000000000L,0x0000000000000000L,0x0000000010020000L});
	public static final BitSet FOLLOW_S_in_p_DirAttributeList8195 = new BitSet(new long[]{0x0000000000004000L,0x0000000000000000L,0x0000000000000000L,0x0000000000020000L});
	public static final BitSet FOLLOW_p_DirAttributeValue_in_p_DirAttributeList8198 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000010000000L});
	public static final BitSet FOLLOW_QUOT_in_p_DirAttributeValue8229 = new BitSet(new long[]{0x0000000000004000L,0x0000000001C00000L,0x00000000C0100080L,0x0000000000020000L});
	public static final BitSet FOLLOW_ESCAPE_QUOT_in_p_DirAttributeValue8232 = new BitSet(new long[]{0x0000000000004000L,0x0000000001C00000L,0x00000000C0100080L,0x0000000000020000L});
	public static final BitSet FOLLOW_APOS_in_p_DirAttributeValue8236 = new BitSet(new long[]{0x0000000000004000L,0x0000000001C00000L,0x00000000C0100080L,0x0000000000020000L});
	public static final BitSet FOLLOW_p_QuotAttrValueContent_in_p_DirAttributeValue8240 = new BitSet(new long[]{0x0000000000004000L,0x0000000001C00000L,0x00000000C0100080L,0x0000000000020000L});
	public static final BitSet FOLLOW_QUOT_in_p_DirAttributeValue8244 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_APOS_in_p_DirAttributeValue8283 = new BitSet(new long[]{0x0000000000004000L,0x0000000001600000L,0x0000000040140080L,0x0000000000020000L});
	public static final BitSet FOLLOW_ESCAPE_APOS_in_p_DirAttributeValue8286 = new BitSet(new long[]{0x0000000000004000L,0x0000000001600000L,0x0000000040140080L,0x0000000000020000L});
	public static final BitSet FOLLOW_QUOT_in_p_DirAttributeValue8290 = new BitSet(new long[]{0x0000000000004000L,0x0000000001600000L,0x0000000040140080L,0x0000000000020000L});
	public static final BitSet FOLLOW_p_AposAttrValueContent_in_p_DirAttributeValue8294 = new BitSet(new long[]{0x0000000000004000L,0x0000000001600000L,0x0000000040140080L,0x0000000000020000L});
	public static final BitSet FOLLOW_APOS_in_p_DirAttributeValue8298 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_p_QuotAttrContentChar_in_p_QuotAttrValueContent8350 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_pm_CommonContent_in_p_QuotAttrValueContent8354 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_p_AposAttrContentChar_in_p_AposAttrValueContent8380 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_pm_CommonContent_in_p_AposAttrValueContent8384 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_p_DirectConstructor_in_pm_DirElemContent8410 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_p_CDataSection_in_pm_DirElemContent8422 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_pm_CommonContent_in_pm_DirElemContent8434 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_p_ElementContentChar_in_pm_DirElemContent8446 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_L_PredefinedEntityRef_in_pm_CommonContent8474 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_L_CharRef_in_pm_CommonContent8486 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_ESCAPE_LBRACKET_in_pm_CommonContent8498 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_ESCAPE_RBRACKET_in_pm_CommonContent8510 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_pg_EnclosedExprXml_in_pm_CommonContent8522 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_LBRACKET_in_pg_EnclosedExprXml8554 = new BitSet(new long[]{0xFFFFD1B0FEFFFF70L,0xFFF3C7FFFE0FB9FFL,0xFFFBF3FE3BC17FFFL,0xFF7F9FEFE3F6FC9FL,0x000008000CFFEFFFL});
	public static final BitSet FOLLOW_p_StatementsAndOptionalExpr_in_pg_EnclosedExprXml8570 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000080000L});
	public static final BitSet FOLLOW_RBRACKET_in_pg_EnclosedExprXml8584 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_L_DirCommentConstructor_in_p_DirCommentConstructor8613 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_L_DirPIConstructor_in_p_DirPIConstructor8645 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_L_CDataSection_in_p_CDataSection8678 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_pm_CompDocConstructor_in_p_ComputedConstructor8710 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_pm_CompElemConstructor_in_p_ComputedConstructor8722 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_pm_CompAttrConstructor_in_p_ComputedConstructor8734 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_p_CompNamespaceConstructor_in_p_ComputedConstructor8746 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_p_CompTextConstructor_in_p_ComputedConstructor8758 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_pm_CompCommentConstructor_in_p_ComputedConstructor8770 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_pm_CompPIConstructor_in_p_ComputedConstructor8782 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_p_CompBinaryConstructor_in_p_ComputedConstructor8797 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_DOCUMENT_in_pm_CompDocConstructor8826 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000080L});
	public static final BitSet FOLLOW_LBRACKET_in_pm_CompDocConstructor8830 = new BitSet(new long[]{0xFFFFD1B0FEFFFF70L,0xFFF3C7FFFE0FB9FFL,0xFFFBF3FE3BC17FFFL,0xFF7F9FEFE3F6FC9FL,0x000008000CFFEFFFL});
	public static final BitSet FOLLOW_p_StatementsAndOptionalExpr_in_pm_CompDocConstructor8832 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000080000L});
	public static final BitSet FOLLOW_RBRACKET_in_pm_CompDocConstructor8834 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_ELEMENT_in_pm_CompElemConstructor8870 = new BitSet(new long[]{0xFFFFD1B0FEEFAF70L,0xFFF3C7FFFE0FB83FL,0xFFFBF3FC10013FFFL,0xFF7D89EFE3F4FC1FL,0x000008000CFFEFBFL});
	public static final BitSet FOLLOW_p_QName_in_pm_CompElemConstructor8875 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000080L});
	public static final BitSet FOLLOW_LBRACKET_in_pm_CompElemConstructor8880 = new BitSet(new long[]{0xFFFFD1B0FEFFEF70L,0xFFF3C7FFFE0FB9FFL,0xFFFBF3FE3BC17FFFL,0xFF7F9FEFE3F6FC9FL,0x000008000CFFEFFFL});
	public static final BitSet FOLLOW_p_Expr_in_pm_CompElemConstructor8882 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000080000L});
	public static final BitSet FOLLOW_RBRACKET_in_pm_CompElemConstructor8885 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000080L});
	public static final BitSet FOLLOW_LBRACKET_in_pm_CompElemConstructor8889 = new BitSet(new long[]{0xFFFFD1B0FEFFFF70L,0xFFF3C7FFFE0FB9FFL,0xFFFBF3FE3BC17FFFL,0xFF7F9FEFE3F6FC9FL,0x000008000CFFEFFFL});
	public static final BitSet FOLLOW_pm_ContentExpr_in_pm_CompElemConstructor8891 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000080000L});
	public static final BitSet FOLLOW_RBRACKET_in_pm_CompElemConstructor8893 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_p_StatementsAndOptionalExpr_in_pm_ContentExpr8920 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_ATTRIBUTE_in_pm_CompAttrConstructor8949 = new BitSet(new long[]{0xFFFFD1B0FEEFAF70L,0xFFF3C7FFFE0FB83FL,0xFFFBF3FC10013FFFL,0xFF7D89EFE3F4FC1FL,0x000008000CFFEFBFL});
	public static final BitSet FOLLOW_p_QName_in_pm_CompAttrConstructor8954 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000080L});
	public static final BitSet FOLLOW_LBRACKET_in_pm_CompAttrConstructor8959 = new BitSet(new long[]{0xFFFFD1B0FEFFEF70L,0xFFF3C7FFFE0FB9FFL,0xFFFBF3FE3BC17FFFL,0xFF7F9FEFE3F6FC9FL,0x000008000CFFEFFFL});
	public static final BitSet FOLLOW_p_Expr_in_pm_CompAttrConstructor8961 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000080000L});
	public static final BitSet FOLLOW_RBRACKET_in_pm_CompAttrConstructor8964 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000080L});
	public static final BitSet FOLLOW_LBRACKET_in_pm_CompAttrConstructor8968 = new BitSet(new long[]{0xFFFFD1B0FEFFFF70L,0xFFF3C7FFFE0FB9FFL,0xFFFBF3FE3BC17FFFL,0xFF7F9FEFE3F6FC9FL,0x000008000CFFEFFFL});
	public static final BitSet FOLLOW_p_StatementsAndOptionalExpr_in_pm_CompAttrConstructor8970 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000080000L});
	public static final BitSet FOLLOW_RBRACKET_in_pm_CompAttrConstructor8972 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_NAMESPACE_in_p_CompNamespaceConstructor9000 = new BitSet(new long[]{0xFFFFD1B0FEEFAF70L,0xFFF3C7FFFE0FB83FL,0xFFFBF3FC10013FFFL,0xFF7D89EFE3F4FC1FL,0x000008000CFFEFBFL});
	public static final BitSet FOLLOW_p_Prefix_in_p_CompNamespaceConstructor9005 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000080L});
	public static final BitSet FOLLOW_LBRACKET_in_p_CompNamespaceConstructor9010 = new BitSet(new long[]{0xFFFFD1B0FEFFEF70L,0xFFF3C7FFFE0FB9FFL,0xFFFBF3FE3BC17FFFL,0xFF7F9FEFE3F6FC9FL,0x000008000CFFEFFFL});
	public static final BitSet FOLLOW_p_PrefixExpr_in_p_CompNamespaceConstructor9012 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000080000L});
	public static final BitSet FOLLOW_RBRACKET_in_p_CompNamespaceConstructor9014 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000080L});
	public static final BitSet FOLLOW_LBRACKET_in_p_CompNamespaceConstructor9018 = new BitSet(new long[]{0xFFFFD1B0FEFFEF70L,0xFFF3C7FFFE0FB9FFL,0xFFFBF3FE3BC17FFFL,0xFF7F9FEFE3FEFC9FL,0x000008000CFFEFFFL});
	public static final BitSet FOLLOW_p_URIExpr_in_p_CompNamespaceConstructor9020 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000080000L});
	public static final BitSet FOLLOW_RBRACKET_in_p_CompNamespaceConstructor9023 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_p_NCName_in_p_Prefix9049 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_p_Expr_in_p_PrefixExpr9075 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_p_Expr_in_p_URIExpr9102 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_TEXT_in_p_CompTextConstructor9131 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000080L});
	public static final BitSet FOLLOW_LBRACKET_in_p_CompTextConstructor9135 = new BitSet(new long[]{0xFFFFD1B0FEFFEF70L,0xFFF3C7FFFE0FB9FFL,0xFFFBF3FE3BC17FFFL,0xFF7F9FEFE3F6FC9FL,0x000008000CFFEFFFL});
	public static final BitSet FOLLOW_p_Expr_in_p_CompTextConstructor9137 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000080000L});
	public static final BitSet FOLLOW_RBRACKET_in_p_CompTextConstructor9140 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_BINARY_in_p_CompBinaryConstructor9168 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000080L});
	public static final BitSet FOLLOW_LBRACKET_in_p_CompBinaryConstructor9172 = new BitSet(new long[]{0xFFFFD1B0FEFFEF70L,0xFFF3C7FFFE0FB9FFL,0xFFFBF3FE3BC17FFFL,0xFF7F9FEFE3F6FC9FL,0x000008000CFFEFFFL});
	public static final BitSet FOLLOW_p_Expr_in_p_CompBinaryConstructor9174 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000080000L});
	public static final BitSet FOLLOW_RBRACKET_in_p_CompBinaryConstructor9177 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_COMMENT_in_pm_CompCommentConstructor9206 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000080L});
	public static final BitSet FOLLOW_LBRACKET_in_pm_CompCommentConstructor9210 = new BitSet(new long[]{0xFFFFD1B0FEFFFF70L,0xFFF3C7FFFE0FB9FFL,0xFFFBF3FE3BC17FFFL,0xFF7F9FEFE3F6FC9FL,0x000008000CFFEFFFL});
	public static final BitSet FOLLOW_p_StatementsAndOptionalExpr_in_pm_CompCommentConstructor9212 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000080000L});
	public static final BitSet FOLLOW_RBRACKET_in_pm_CompCommentConstructor9214 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_PROCESSING_INSTRUCTION_in_pm_CompPIConstructor9243 = new BitSet(new long[]{0xFFFFD1B0FEEFAF70L,0xFFF3C7FFFE0FB83FL,0xFFFBF3FC10013FFFL,0xFF7D89EFE3F4FC1FL,0x000008000CFFEFBFL});
	public static final BitSet FOLLOW_p_NCName_in_pm_CompPIConstructor9248 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000080L});
	public static final BitSet FOLLOW_LBRACKET_in_pm_CompPIConstructor9253 = new BitSet(new long[]{0xFFFFD1B0FEFFEF70L,0xFFF3C7FFFE0FB9FFL,0xFFFBF3FE3BC17FFFL,0xFF7F9FEFE3F6FC9FL,0x000008000CFFEFFFL});
	public static final BitSet FOLLOW_p_Expr_in_pm_CompPIConstructor9255 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000080000L});
	public static final BitSet FOLLOW_RBRACKET_in_pm_CompPIConstructor9258 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000080L});
	public static final BitSet FOLLOW_LBRACKET_in_pm_CompPIConstructor9262 = new BitSet(new long[]{0xFFFFD1B0FEFFFF70L,0xFFF3C7FFFE0FB9FFL,0xFFFBF3FE3BC17FFFL,0xFF7F9FEFE3F6FC9FL,0x000008000CFFEFFFL});
	public static final BitSet FOLLOW_p_StatementsAndOptionalExpr_in_pm_CompPIConstructor9264 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000080000L});
	public static final BitSet FOLLOW_RBRACKET_in_pm_CompPIConstructor9266 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_p_AtomicOrUnionType_in_p_SingleType9310 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000010000L});
	public static final BitSet FOLLOW_QUESTION_in_p_SingleType9312 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_AS_in_p_TypeDeclaration9341 = new BitSet(new long[]{0xFFFFD1B0FEEFAF70L,0xFFF3C7FFFE0FB83FL,0xFFFBF3FC10017F7FL,0xFF7D89EFE3F4FC1FL,0x000008000CFFEFBFL});
	public static final BitSet FOLLOW_p_SequenceType_in_p_TypeDeclaration9347 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_EMPTY_SEQUENCE_in_p_SequenceType9400 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000004000L});
	public static final BitSet FOLLOW_LPAREN_in_p_SequenceType9406 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000004000000L});
	public static final BitSet FOLLOW_RPAREN_in_p_SequenceType9410 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_p_ItemType_in_p_SequenceType9459 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0002000000010080L});
	public static final BitSet FOLLOW_p_OccurrenceIndicator_in_p_SequenceType9470 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_p_KindTest_in_p_ItemType9572 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_BINARY_in_p_ItemType9612 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000004000L});
	public static final BitSet FOLLOW_LPAREN_in_p_ItemType9614 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000004000000L});
	public static final BitSet FOLLOW_RPAREN_in_p_ItemType9616 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_ITEM_in_p_ItemType9658 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000004000L});
	public static final BitSet FOLLOW_LPAREN_in_p_ItemType9660 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000004000000L});
	public static final BitSet FOLLOW_RPAREN_in_p_ItemType9662 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_p_AtomicOrUnionType_in_p_ItemType9706 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_p_ParenthesizedItemType_in_p_ItemType9718 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_p_QName_in_p_AtomicOrUnionType9744 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_p_DocumentTest_in_p_KindTest9794 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_p_ElementTest_in_p_KindTest9806 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_p_AttributeTest_in_p_KindTest9818 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_p_SchemaElementTest_in_p_KindTest9830 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_p_SchemaAttributeTest_in_p_KindTest9842 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_p_PITest_in_p_KindTest9854 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_p_CommentTest_in_p_KindTest9866 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_p_TextTest_in_p_KindTest9878 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_p_NamespaceNodeTest_in_p_KindTest9890 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_p_AnyKindTest_in_p_KindTest9902 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_NODE_in_p_AnyKindTest9928 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000004000L});
	public static final BitSet FOLLOW_LPAREN_in_p_AnyKindTest9930 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000004000000L});
	public static final BitSet FOLLOW_RPAREN_in_p_AnyKindTest9932 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_DOCUMENT_NODE_in_p_DocumentTest9958 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000004000L});
	public static final BitSet FOLLOW_LPAREN_in_p_DocumentTest9960 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000800L,0x0000000000000000L,0x0000000204000000L});
	public static final BitSet FOLLOW_p_ElementTest_in_p_DocumentTest9963 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000004000000L});
	public static final BitSet FOLLOW_p_SchemaElementTest_in_p_DocumentTest9967 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000004000000L});
	public static final BitSet FOLLOW_RPAREN_in_p_DocumentTest9971 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_TEXT_in_p_TextTest9997 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000004000L});
	public static final BitSet FOLLOW_LPAREN_in_p_TextTest9999 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000004000000L});
	public static final BitSet FOLLOW_RPAREN_in_p_TextTest10001 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_COMMENT_in_p_CommentTest10027 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000004000L});
	public static final BitSet FOLLOW_LPAREN_in_p_CommentTest10029 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000004000000L});
	public static final BitSet FOLLOW_RPAREN_in_p_CommentTest10031 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_NAMESPACE_NODE_in_p_NamespaceNodeTest10057 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000004000L});
	public static final BitSet FOLLOW_LPAREN_in_p_NamespaceNodeTest10059 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000004000000L});
	public static final BitSet FOLLOW_RPAREN_in_p_NamespaceNodeTest10061 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_PROCESSING_INSTRUCTION_in_p_PITest10087 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000004000L});
	public static final BitSet FOLLOW_LPAREN_in_p_PITest10089 = new BitSet(new long[]{0xFFFFD1B0FEEFEF70L,0xFFF3C7FFFE0FB83FL,0xFFFBF3FC10013F7FL,0xFF7D89EFE7F6FC1FL,0x000008000CFFEFBFL});
	public static final BitSet FOLLOW_p_NCName_in_p_PITest10092 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000004000000L});
	public static final BitSet FOLLOW_p_StringLiteral_in_p_PITest10096 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000004000000L});
	public static final BitSet FOLLOW_RPAREN_in_p_PITest10100 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_ATTRIBUTE_in_p_AttributeTest10126 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000004000L});
	public static final BitSet FOLLOW_LPAREN_in_p_AttributeTest10128 = new BitSet(new long[]{0xFFFFD1B0FEEFAF70L,0xFFF3C7FFFE0FB83FL,0xFFFBF3FC10013F7FL,0xFF7F89EFE7F4FC1FL,0x000008000CFFEFBFL});
	public static final BitSet FOLLOW_p_AttribNameOrWildcard_in_p_AttributeTest10131 = new BitSet(new long[]{0x0000080000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000004000000L});
	public static final BitSet FOLLOW_COMMA_in_p_AttributeTest10134 = new BitSet(new long[]{0xFFFFD1B0FEEFAF70L,0xFFF3C7FFFE0FB83FL,0xFFFBF3FC10013F7FL,0xFF7D89EFE3F4FC1FL,0x000008000CFFEFBFL});
	public static final BitSet FOLLOW_p_TypeName_in_p_AttributeTest10136 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000004000000L});
	public static final BitSet FOLLOW_RPAREN_in_p_AttributeTest10142 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_p_AttributeName_in_p_AttribNameOrWildcard10170 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_STAR_in_p_AttribNameOrWildcard10174 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_SCHEMA_ATTRIBUTE_in_p_SchemaAttributeTest10200 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000004000L});
	public static final BitSet FOLLOW_LPAREN_in_p_SchemaAttributeTest10202 = new BitSet(new long[]{0xFFFFD1B0FEEFAF70L,0xFFF3C7FFFE0FB83FL,0xFFFBF3FC10013F7FL,0xFF7D89EFE3F4FC1FL,0x000008000CFFEFBFL});
	public static final BitSet FOLLOW_p_AttributeDeclaration_in_p_SchemaAttributeTest10204 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000004000000L});
	public static final BitSet FOLLOW_RPAREN_in_p_SchemaAttributeTest10206 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_p_AttributeName_in_p_AttributeDeclaration10232 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_ELEMENT_in_p_ElementTest10258 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000004000L});
	public static final BitSet FOLLOW_LPAREN_in_p_ElementTest10260 = new BitSet(new long[]{0xFFFFD1B0FEEFAF70L,0xFFF3C7FFFE0FB83FL,0xFFFBF3FC10013F7FL,0xFF7F89EFE7F4FC1FL,0x000008000CFFEFBFL});
	public static final BitSet FOLLOW_p_ElementNameOrWildcard_in_p_ElementTest10263 = new BitSet(new long[]{0x0000080000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000004000000L});
	public static final BitSet FOLLOW_COMMA_in_p_ElementTest10266 = new BitSet(new long[]{0xFFFFD1B0FEEFAF70L,0xFFF3C7FFFE0FB83FL,0xFFFBF3FC10013F7FL,0xFF7D89EFE3F4FC1FL,0x000008000CFFEFBFL});
	public static final BitSet FOLLOW_p_TypeName_in_p_ElementTest10268 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000004010000L});
	public static final BitSet FOLLOW_QUESTION_in_p_ElementTest10270 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000004000000L});
	public static final BitSet FOLLOW_RPAREN_in_p_ElementTest10277 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_p_QName_in_p_ElementNameOrWildcard10303 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_STAR_in_p_ElementNameOrWildcard10307 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_SCHEMA_ELEMENT_in_p_SchemaElementTest10325 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000004000L});
	public static final BitSet FOLLOW_LPAREN_in_p_SchemaElementTest10327 = new BitSet(new long[]{0xFFFFD1B0FEEFAF70L,0xFFF3C7FFFE0FB83FL,0xFFFBF3FC10013F7FL,0xFF7D89EFE3F4FC1FL,0x000008000CFFEFBFL});
	public static final BitSet FOLLOW_p_ElementDeclaration_in_p_SchemaElementTest10329 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000004000000L});
	public static final BitSet FOLLOW_RPAREN_in_p_SchemaElementTest10331 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_p_ElementName_in_p_ElementDeclaration10357 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_p_QName_in_p_AttributeName10383 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_p_QName_in_p_ElementName10409 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_p_QName_in_p_TypeName10435 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_p_Annotation_in_p_FunctionTest10461 = new BitSet(new long[]{0x0000000000001000L,0x0000020000000000L});
	public static final BitSet FOLLOW_p_AnyFunctionTest_in_p_FunctionTest10465 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_p_TypedFunctionTest_in_p_FunctionTest10469 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_FUNCTION_in_p_AnyFunctionTest10496 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000004000L,0x0000000000004000L});
	public static final BitSet FOLLOW_PRIVATE_in_p_AnyFunctionTest10498 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000004000L});
	public static final BitSet FOLLOW_LPAREN_in_p_AnyFunctionTest10501 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0002000000000000L});
	public static final BitSet FOLLOW_STAR_in_p_AnyFunctionTest10503 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000004000000L});
	public static final BitSet FOLLOW_RPAREN_in_p_AnyFunctionTest10505 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_FUNCTION_in_p_TypedFunctionTest10531 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000004000L,0x0000000000004000L});
	public static final BitSet FOLLOW_PRIVATE_in_p_TypedFunctionTest10533 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000004000L});
	public static final BitSet FOLLOW_LPAREN_in_p_TypedFunctionTest10536 = new BitSet(new long[]{0xFFFFD1B0FEEFAF70L,0xFFF3C7FFFE0FB83FL,0xFFFBF3FC10017F7FL,0xFF7D89EFE7F4FC1FL,0x000008000CFFEFBFL});
	public static final BitSet FOLLOW_p_SequenceType_in_p_TypedFunctionTest10539 = new BitSet(new long[]{0x0000080000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000004000000L});
	public static final BitSet FOLLOW_COMMA_in_p_TypedFunctionTest10542 = new BitSet(new long[]{0xFFFFD1B0FEEFAF70L,0xFFF3C7FFFE0FB83FL,0xFFFBF3FC10017F7FL,0xFF7D89EFE3F4FC1FL,0x000008000CFFEFBFL});
	public static final BitSet FOLLOW_p_SequenceType_in_p_TypedFunctionTest10544 = new BitSet(new long[]{0x0000080000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000004000000L});
	public static final BitSet FOLLOW_RPAREN_in_p_TypedFunctionTest10550 = new BitSet(new long[]{0x0000000000010000L});
	public static final BitSet FOLLOW_AS_in_p_TypedFunctionTest10552 = new BitSet(new long[]{0xFFFFD1B0FEEFAF70L,0xFFF3C7FFFE0FB83FL,0xFFFBF3FC10017F7FL,0xFF7D89EFE3F4FC1FL,0x000008000CFFEFBFL});
	public static final BitSet FOLLOW_p_SequenceType_in_p_TypedFunctionTest10554 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_LPAREN_in_p_ParenthesizedItemType10580 = new BitSet(new long[]{0xFFFFD1B0FEEFAF70L,0xFFF3C7FFFE0FB83FL,0xFFFBF3FC10017F7FL,0xFF7D89EFE3F4FC1FL,0x000008000CFFEFBFL});
	public static final BitSet FOLLOW_p_ItemType_in_p_ParenthesizedItemType10582 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000004000000L});
	public static final BitSet FOLLOW_RPAREN_in_p_ParenthesizedItemType10584 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_QUOT_in_p_StringLiteral10635 = new BitSet(new long[]{0xFFFFFFFFFFFFFF70L,0xFFFFFFFFFFFFFFFFL,0xFFFFFFFFFFFFFFFFL,0xFFFFFFFFFFFFFFFFL,0xFFFFFFFFFFFFFFFFL,0x00000000003FFFFFL});
	public static final BitSet FOLLOW_pg_QuotStringLiteralContent_in_p_StringLiteral10639 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000020000L});
	public static final BitSet FOLLOW_QUOT_in_p_StringLiteral10641 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_APOS_in_p_StringLiteral10680 = new BitSet(new long[]{0xFFFFFFFFFFFFFF70L,0xFFFFFFFFFFFFFFFFL,0xFFFFFFFFFFFFFFFFL,0xFFFFFFFFFFFFFFFFL,0xFFFFFFFFFFFFFFFFL,0x00000000003FFFFFL});
	public static final BitSet FOLLOW_pg_AposStringLiteralContent_in_p_StringLiteral10684 = new BitSet(new long[]{0x0000000000004000L});
	public static final BitSet FOLLOW_APOS_in_p_StringLiteral10686 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_L_ElementContentChar_in_p_ElementContentChar10850 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_L_QuotAttrContentChar_in_p_QuotAttrContentChar10876 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_L_AposAttrContentChar_in_p_AposAttrContentChar10926 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_pg_QName_in_p_QName11012 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_p_NCName_in_p_QName11024 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_pg_QName_in_pg_FQName11085 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_p_FNCName_in_pg_FQName11097 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_p_NCName_in_pg_QName11141 = new BitSet(new long[]{0x0000020000000000L});
	public static final BitSet FOLLOW_COLON_in_pg_QName11143 = new BitSet(new long[]{0xFFFFD1B0FEEFAF70L,0xFFF3C7FFFE0FB83FL,0xFFFBF3FC10013F7FL,0xFF7D89EFE3F4FC1FL,0x000008000CFFEFBFL});
	public static final BitSet FOLLOW_p_NCName_in_pg_QName11147 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_p_InsertExpr_in_pg_UpdateExpr13146 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_p_DeleteExpr_in_pg_UpdateExpr13158 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_p_RenameExpr_in_pg_UpdateExpr13170 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_p_ReplaceExpr_in_pg_UpdateExpr13182 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_p_TransformExpr_in_pg_UpdateExpr13194 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_DECLARE_in_pm_RevalidationDecl13222 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000002000000L});
	public static final BitSet FOLLOW_REVALIDATION_in_pm_RevalidationDecl13226 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000040L,0x0020010000000000L});
	public static final BitSet FOLLOW_STRICT_in_pm_RevalidationDecl13231 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000001000000000L});
	public static final BitSet FOLLOW_LAX_in_pm_RevalidationDecl13237 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000001000000000L});
	public static final BitSet FOLLOW_SKIP_in_pm_RevalidationDecl13243 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000001000000000L});
	public static final BitSet FOLLOW_SEMICOLON_in_pm_RevalidationDecl13248 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_AS_in_p_InsertExprTargetChoice13278 = new BitSet(new long[]{0x0000000000000000L,0x0000000040000000L,0x0000000000000020L});
	public static final BitSet FOLLOW_FIRST_in_p_InsertExprTargetChoice13283 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000001L});
	public static final BitSet FOLLOW_LAST_in_p_InsertExprTargetChoice13289 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000001L});
	public static final BitSet FOLLOW_INTO_in_p_InsertExprTargetChoice13296 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_AFTER_in_p_InsertExprTargetChoice13313 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_BEFORE_in_p_InsertExprTargetChoice13329 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_INSERT_in_p_InsertExpr13359 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0001800000000000L});
	public static final BitSet FOLLOW_NODE_in_p_InsertExpr13364 = new BitSet(new long[]{0xFFFFD1B0FEFFEF70L,0xFFF3C7FFFE0FB9FFL,0xFFFBF3FE3BC17FFFL,0xFF7F9FEFE3F6FC9FL,0x000008000CFFEFFFL});
	public static final BitSet FOLLOW_NODES_in_p_InsertExpr13370 = new BitSet(new long[]{0xFFFFD1B0FEFFEF70L,0xFFF3C7FFFE0FB9FFL,0xFFFBF3FE3BC17FFFL,0xFF7F9FEFE3F6FC9FL,0x000008000CFFEFFFL});
	public static final BitSet FOLLOW_p_SourceExpr_in_p_InsertExpr13373 = new BitSet(new long[]{0x0000000000410010L,0x0000000000000000L,0x0000000000000001L});
	public static final BitSet FOLLOW_p_InsertExprTargetChoice_in_p_InsertExpr13375 = new BitSet(new long[]{0xFFFFD1B0FEFFEF70L,0xFFF3C7FFFE0FB9FFL,0xFFFBF3FE3BC17FFFL,0xFF7F9FEFE3F6FC9FL,0x000008000CFFEFFFL});
	public static final BitSet FOLLOW_p_TargetExpr_in_p_InsertExpr13377 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_DELETE_in_p_DeleteExpr13407 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0001800000000000L});
	public static final BitSet FOLLOW_NODE_in_p_DeleteExpr13412 = new BitSet(new long[]{0xFFFFD1B0FEFFEF70L,0xFFF3C7FFFE0FB9FFL,0xFFFBF3FE3BC17FFFL,0xFF7F9FEFE3F6FC9FL,0x000008000CFFEFFFL});
	public static final BitSet FOLLOW_NODES_in_p_DeleteExpr13418 = new BitSet(new long[]{0xFFFFD1B0FEFFEF70L,0xFFF3C7FFFE0FB9FFL,0xFFFBF3FE3BC17FFFL,0xFF7F9FEFE3F6FC9FL,0x000008000CFFEFFFL});
	public static final BitSet FOLLOW_p_TargetExpr_in_p_DeleteExpr13421 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_REPLACE_in_p_ReplaceExpr13451 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000800000000000L,0x0000000000000000L,0x0000000000000400L});
	public static final BitSet FOLLOW_VALUE_in_p_ReplaceExpr13456 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0040000000000000L});
	public static final BitSet FOLLOW_OF_in_p_ReplaceExpr13460 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000800000000000L});
	public static final BitSet FOLLOW_NODE_in_p_ReplaceExpr13466 = new BitSet(new long[]{0xFFFFD1B0FEFFEF70L,0xFFF3C7FFFE0FB9FFL,0xFFFBF3FE3BC17FFFL,0xFF7F9FEFE3F6FC9FL,0x000008000CFFEFFFL});
	public static final BitSet FOLLOW_p_ExprSingle_in_p_ReplaceExpr13468 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000100000L});
	public static final BitSet FOLLOW_WITH_in_p_ReplaceExpr13473 = new BitSet(new long[]{0xFFFFD1B0FEFFEF70L,0xFFF3C7FFFE0FB9FFL,0xFFFBF3FE3BC17FFFL,0xFF7F9FEFE3F6FC9FL,0x000008000CFFEFFFL});
	public static final BitSet FOLLOW_p_ExprSingle_in_p_ReplaceExpr13475 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_RENAME_in_p_RenameExpr13506 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000800000000000L});
	public static final BitSet FOLLOW_NODE_in_p_RenameExpr13510 = new BitSet(new long[]{0xFFFFD1B0FEFFEF70L,0xFFF3C7FFFE0FB9FFL,0xFFFBF3FE3BC17FFFL,0xFF7F9FEFE3F6FC9FL,0x000008000CFFEFFFL});
	public static final BitSet FOLLOW_p_TargetExpr_in_p_RenameExpr13512 = new BitSet(new long[]{0x0000000000010000L});
	public static final BitSet FOLLOW_AS_in_p_RenameExpr13514 = new BitSet(new long[]{0xFFFFD1B0FEFFEF70L,0xFFF3C7FFFE0FB9FFL,0xFFFBF3FE3BC17FFFL,0xFF7F9FEFE3F6FC9FL,0x000008000CFFEFFFL});
	public static final BitSet FOLLOW_p_NewNameExpr_in_p_RenameExpr13516 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_p_ExprSingle_in_p_SourceExpr13544 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_p_ExprSingle_in_p_TargetExpr13571 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_p_ExprSingle_in_p_NewNameExpr13598 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_COPY_in_p_TransformExpr13627 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000040L});
	public static final BitSet FOLLOW_DOLLAR_in_p_TransformExpr13629 = new BitSet(new long[]{0xFFFFD1B0FEEFAF70L,0xFFF3C7FFFE0FB83FL,0xFFFBF3FC10013F7FL,0xFF7D89EFE3F4FC1FL,0x000008000CFFEFBFL});
	public static final BitSet FOLLOW_p_VarName_in_p_TransformExpr13631 = new BitSet(new long[]{0x0000000001000000L});
	public static final BitSet FOLLOW_BIND_in_p_TransformExpr13633 = new BitSet(new long[]{0xFFFFD1B0FEFFEF70L,0xFFF3C7FFFE0FB9FFL,0xFFFBF3FE3BC17FFFL,0xFF7F9FEFE3F6FC9FL,0x000008000CFFEFFFL});
	public static final BitSet FOLLOW_p_ExprSingle_in_p_TransformExpr13635 = new BitSet(new long[]{0x0000080000000000L,0x0000000000000000L,0x0000001000000000L});
	public static final BitSet FOLLOW_COMMA_in_p_TransformExpr13639 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000040L});
	public static final BitSet FOLLOW_DOLLAR_in_p_TransformExpr13641 = new BitSet(new long[]{0xFFFFD1B0FEEFAF70L,0xFFF3C7FFFE0FB83FL,0xFFFBF3FC10013F7FL,0xFF7D89EFE3F4FC1FL,0x000008000CFFEFBFL});
	public static final BitSet FOLLOW_p_VarName_in_p_TransformExpr13643 = new BitSet(new long[]{0x0000000001000000L});
	public static final BitSet FOLLOW_BIND_in_p_TransformExpr13645 = new BitSet(new long[]{0xFFFFD1B0FEFFEF70L,0xFFF3C7FFFE0FB9FFL,0xFFFBF3FE3BC17FFFL,0xFF7F9FEFE3F6FC9FL,0x000008000CFFEFFFL});
	public static final BitSet FOLLOW_p_ExprSingle_in_p_TransformExpr13647 = new BitSet(new long[]{0x0000080000000000L,0x0000000000000000L,0x0000001000000000L});
	public static final BitSet FOLLOW_MODIFY_in_p_TransformExpr13654 = new BitSet(new long[]{0xFFFFD1B0FEFFEF70L,0xFFF3C7FFFE0FB9FFL,0xFFFBF3FE3BC17FFFL,0xFF7F9FEFE3F6FC9FL,0x000008000CFFEFFFL});
	public static final BitSet FOLLOW_p_ExprSingle_in_p_TransformExpr13656 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000800000L});
	public static final BitSet FOLLOW_RETURN_in_p_TransformExpr13661 = new BitSet(new long[]{0xFFFFD1B0FEFFEF70L,0xFFF3C7FFFE0FB9FFL,0xFFFBF3FE3BC17FFFL,0xFF7F9FEFE3F6FC9FL,0x000008000CFFEFFFL});
	public static final BitSet FOLLOW_p_ExprSingle_in_p_TransformExpr13663 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_DECLARE_in_pm_FTOptionDecl13701 = new BitSet(new long[]{0x0000000000000000L,0x0000010000000000L});
	public static final BitSet FOLLOW_FT_OPTION_in_pm_FTOptionDecl13705 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000100L});
	public static final BitSet FOLLOW_p_FTMatchOptions_in_pm_FTOptionDecl13707 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000001000000000L});
	public static final BitSet FOLLOW_SEMICOLON_in_pm_FTOptionDecl13709 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_SCORE_in_p_FTScoreVar13739 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000040L});
	public static final BitSet FOLLOW_DOLLAR_in_p_FTScoreVar13743 = new BitSet(new long[]{0xFFFFD1B0FEEFAF70L,0xFFF3C7FFFE0FB83FL,0xFFFBF3FC10013F7FL,0xFF7D89EFE3F4FC1FL,0x000008000CFFEFBFL});
	public static final BitSet FOLLOW_p_VarName_in_p_FTScoreVar13745 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_p_StringConcatExpr_in_p_FTContainsExpr13771 = new BitSet(new long[]{0x0001000000000002L});
	public static final BitSet FOLLOW_CONTAINS_in_p_FTContainsExpr13777 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0200000000000000L});
	public static final BitSet FOLLOW_TEXT_in_p_FTContainsExpr13781 = new BitSet(new long[]{0x0000000000004000L,0x0000004000000000L,0x0000000020004080L,0x0000000000020000L});
	public static final BitSet FOLLOW_p_FTSelection_in_p_FTContainsExpr13785 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000200000L});
	public static final BitSet FOLLOW_p_FTIgnoreOption_in_p_FTContainsExpr13787 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_p_FTOr_in_p_FTSelection13817 = new BitSet(new long[]{0x0000000000040002L,0x0000000000040005L,0x1000000000000000L,0x0000000020000000L,0x0000000000080000L});
	public static final BitSet FOLLOW_p_FTPosFilter_in_p_FTSelection13819 = new BitSet(new long[]{0x0000000000040002L,0x0000000000040005L,0x1000000000000000L,0x0000000020000000L,0x0000000000080000L});
	public static final BitSet FOLLOW_WEIGHT_in_p_FTWeight13848 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000080L});
	public static final BitSet FOLLOW_LBRACKET_in_p_FTWeight13852 = new BitSet(new long[]{0xFFFFD1B0FEFFEF70L,0xFFF3C7FFFE0FB9FFL,0xFFFBF3FE3BC17FFFL,0xFF7F9FEFE3F6FC9FL,0x000008000CFFEFFFL});
	public static final BitSet FOLLOW_p_Expr_in_p_FTWeight13854 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000080000L});
	public static final BitSet FOLLOW_RBRACKET_in_p_FTWeight13857 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_p_FTAnd_in_p_FTOr13883 = new BitSet(new long[]{0x0000000000000002L,0x0000008000000000L});
	public static final BitSet FOLLOW_FTOR_in_p_FTOr13889 = new BitSet(new long[]{0x0000000000004000L,0x0000004000000000L,0x0000000020004080L,0x0000000000020000L});
	public static final BitSet FOLLOW_p_FTAnd_in_p_FTOr13893 = new BitSet(new long[]{0x0000000000000002L,0x0000008000000000L});
	public static final BitSet FOLLOW_p_FTMildNot_in_p_FTAnd13922 = new BitSet(new long[]{0x0000000000000002L,0x0000002000000000L});
	public static final BitSet FOLLOW_FTAND_in_p_FTAnd13928 = new BitSet(new long[]{0x0000000000004000L,0x0000004000000000L,0x0000000020004080L,0x0000000000020000L});
	public static final BitSet FOLLOW_p_FTMildNot_in_p_FTAnd13932 = new BitSet(new long[]{0x0000000000000002L,0x0000002000000000L});
	public static final BitSet FOLLOW_p_FTUnaryNot_in_p_FTMildNot13961 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0002000000000000L});
	public static final BitSet FOLLOW_NOT_in_p_FTMildNot13967 = new BitSet(new long[]{0x0000000000000000L,0x0080000000000000L});
	public static final BitSet FOLLOW_IN_in_p_FTMildNot13971 = new BitSet(new long[]{0x0000000000004000L,0x0000004000000000L,0x0000000020004080L,0x0000000000020000L});
	public static final BitSet FOLLOW_p_FTUnaryNot_in_p_FTMildNot13975 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0002000000000000L});
	public static final BitSet FOLLOW_FTNOT_in_p_FTUnaryNot14008 = new BitSet(new long[]{0x0000000000004000L,0x0000000000000000L,0x0000000020004080L,0x0000000000020000L});
	public static final BitSet FOLLOW_p_FTPrimaryWithOptions_in_p_FTUnaryNot14015 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_p_FTPrimary_in_p_FTPrimaryWithOptions14041 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000004100L});
	public static final BitSet FOLLOW_p_FTMatchOptions_in_p_FTPrimaryWithOptions14043 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000004000L});
	public static final BitSet FOLLOW_p_FTWeight_in_p_FTPrimaryWithOptions14046 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_p_FTWords_in_p_FTPrimary14077 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0020000000000000L});
	public static final BitSet FOLLOW_p_FTTimes_in_p_FTPrimary14079 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_LPAREN_in_p_FTPrimary14094 = new BitSet(new long[]{0x0000000000004000L,0x0000004000000000L,0x0000000020004080L,0x0000000000020000L});
	public static final BitSet FOLLOW_p_FTSelection_in_p_FTPrimary14096 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000004000000L});
	public static final BitSet FOLLOW_RPAREN_in_p_FTPrimary14098 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_p_FTExtensionSelection_in_p_FTPrimary14111 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_p_FTWordsValue_in_p_FTWords14137 = new BitSet(new long[]{0x0000000000002022L,0x0000000000000000L,0x0000000000000000L,0x0000000000000010L});
	public static final BitSet FOLLOW_p_FTAnyallOption_in_p_FTWords14139 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_p_StringLiteral_in_p_FTWordsValue14166 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_LBRACKET_in_p_FTWordsValue14179 = new BitSet(new long[]{0xFFFFD1B0FEFFEF70L,0xFFF3C7FFFE0FB9FFL,0xFFFBF3FE3BC17FFFL,0xFF7F9FEFE3F6FC9FL,0x000008000CFFEFFFL});
	public static final BitSet FOLLOW_p_Expr_in_p_FTWordsValue14181 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000080000L});
	public static final BitSet FOLLOW_RBRACKET_in_p_FTWordsValue14184 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_L_Pragma_in_p_FTExtensionSelection14211 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000020000080L});
	public static final BitSet FOLLOW_LBRACKET_in_p_FTExtensionSelection14214 = new BitSet(new long[]{0x0000000000004000L,0x0000004000000000L,0x0000000020004080L,0x00000000000A0000L});
	public static final BitSet FOLLOW_p_FTSelection_in_p_FTExtensionSelection14216 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000080000L});
	public static final BitSet FOLLOW_RBRACKET_in_p_FTExtensionSelection14219 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_ANY_in_p_FTAnyallOption14250 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000400000L});
	public static final BitSet FOLLOW_WORD_in_p_FTAnyallOption14254 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_ALL_in_p_FTAnyallOption14263 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000800000L});
	public static final BitSet FOLLOW_WORDS_in_p_FTAnyallOption14265 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_PHRASE_in_p_FTAnyallOption14273 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_OCCURS_in_p_FTTimes14305 = new BitSet(new long[]{0x0000000000040000L,0x0000001004000000L});
	public static final BitSet FOLLOW_p_FTRange_in_p_FTTimes14307 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x1000000000000000L});
	public static final BitSet FOLLOW_TIMES_in_p_FTTimes14311 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_EXACTLY_in_p_FTRange14344 = new BitSet(new long[]{0xFFFFD1B0FEFFEF70L,0xFFF3C7FFFE0FB9FFL,0xFFFBF3FE3BC17FFFL,0xFF7F9FEFE3F6FC9FL,0x000008000CFFEFFFL});
	public static final BitSet FOLLOW_p_AdditiveExpr_in_p_FTRange14346 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_AT_in_p_FTRange14364 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000200L});
	public static final BitSet FOLLOW_LEAST_in_p_FTRange14368 = new BitSet(new long[]{0xFFFFD1B0FEFFEF70L,0xFFF3C7FFFE0FB9FFL,0xFFFBF3FE3BC17FFFL,0xFF7F9FEFE3F6FC9FL,0x000008000CFFEFFFL});
	public static final BitSet FOLLOW_p_AdditiveExpr_in_p_FTRange14370 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_AT_in_p_FTRange14388 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000004000000000L});
	public static final BitSet FOLLOW_MOST_in_p_FTRange14392 = new BitSet(new long[]{0xFFFFD1B0FEFFEF70L,0xFFF3C7FFFE0FB9FFL,0xFFFBF3FE3BC17FFFL,0xFF7F9FEFE3F6FC9FL,0x000008000CFFEFFFL});
	public static final BitSet FOLLOW_p_AdditiveExpr_in_p_FTRange14394 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_FROM_in_p_FTRange14412 = new BitSet(new long[]{0xFFFFD1B0FEFFEF70L,0xFFF3C7FFFE0FB9FFL,0xFFFBF3FE3BC17FFFL,0xFF7F9FEFE3F6FC9FL,0x000008000CFFEFFFL});
	public static final BitSet FOLLOW_p_AdditiveExpr_in_p_FTRange14414 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x2000000000000000L});
	public static final BitSet FOLLOW_TO_in_p_FTRange14418 = new BitSet(new long[]{0xFFFFD1B0FEFFEF70L,0xFFF3C7FFFE0FB9FFL,0xFFFBF3FE3BC17FFFL,0xFF7F9FEFE3F6FC9FL,0x000008000CFFEFFFL});
	public static final BitSet FOLLOW_p_AdditiveExpr_in_p_FTRange14420 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_p_FTOrder_in_p_FTPosFilter14451 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_p_FTWindow_in_p_FTPosFilter14455 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_p_FTDistance_in_p_FTPosFilter14459 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_p_FTScope_in_p_FTPosFilter14463 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_p_FTContent_in_p_FTPosFilter14467 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_ORDERED_in_p_FTOrder14495 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_WINDOW_in_p_FTWindow14525 = new BitSet(new long[]{0xFFFFD1B0FEFFEF70L,0xFFF3C7FFFE0FB9FFL,0xFFFBF3FE3BC17FFFL,0xFF7F9FEFE3F6FC9FL,0x000008000CFFEFFFL});
	public static final BitSet FOLLOW_p_AdditiveExpr_in_p_FTWindow14529 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x8000000000000000L,0x0000008000000000L,0x0000000000800000L});
	public static final BitSet FOLLOW_p_FTUnit_in_p_FTWindow14531 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_DISTANCE_in_p_FTDistance14559 = new BitSet(new long[]{0x0000000000040000L,0x0000001004000000L});
	public static final BitSet FOLLOW_p_FTRange_in_p_FTDistance14563 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x8000000000000000L,0x0000008000000000L,0x0000000000800000L});
	public static final BitSet FOLLOW_p_FTUnit_in_p_FTDistance14565 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_WORDS_in_p_FTUnit14595 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_SENTENCES_in_p_FTUnit14601 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_PARAGRAPHS_in_p_FTUnit14607 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_SAME_in_p_FTScope14640 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x4000000000000000L,0x0000004000000000L});
	public static final BitSet FOLLOW_DIFFERENT_in_p_FTScope14646 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x4000000000000000L,0x0000004000000000L});
	public static final BitSet FOLLOW_p_FTBigUnit_in_p_FTScope14651 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_SENTENCE_in_p_FTBigUnit14681 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_PARAGRAPH_in_p_FTBigUnit14687 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_AT_in_p_FTContent14722 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0004000000000000L});
	public static final BitSet FOLLOW_START_in_p_FTContent14726 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_AT_in_p_FTContent14734 = new BitSet(new long[]{0x0000000000000000L,0x0000000000020000L});
	public static final BitSet FOLLOW_END_in_p_FTContent14738 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_ENTIRE_in_p_FTContent14746 = new BitSet(new long[]{0x0002000000000000L});
	public static final BitSet FOLLOW_CONTENT_in_p_FTContent14750 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_USING_in_p_FTMatchOptions14784 = new BitSet(new long[]{0x8000000010000000L,0x0000000000000000L,0x0200400000002010L,0x0818000000000000L,0x0000000000040080L});
	public static final BitSet FOLLOW_p_FTMatchOption_in_p_FTMatchOptions14788 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000100L});
	public static final BitSet FOLLOW_p_FTLanguageOption_in_p_FTMatchOption14816 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_p_FTWildCardOption_in_p_FTMatchOption14828 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_p_FTThesaurusOption_in_p_FTMatchOption14840 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_p_FTStemOption_in_p_FTMatchOption14852 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_p_FTCaseOption_in_p_FTMatchOption14864 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_p_FTDiacriticsOption_in_p_FTMatchOption14876 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_p_FTStopWordOption_in_p_FTMatchOption14888 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_p_FTExtensionOption_in_p_FTMatchOption14900 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_CASE_in_p_FTCaseOption14931 = new BitSet(new long[]{0x0000000000000000L,0x0800000000000000L});
	public static final BitSet FOLLOW_INSENSITIVE_in_p_FTCaseOption14935 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_CASE_in_p_FTCaseOption14953 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000002000000000L});
	public static final BitSet FOLLOW_SENSITIVE_in_p_FTCaseOption14957 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_LOWERCASE_in_p_FTCaseOption14974 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_UPPERCASE_in_p_FTCaseOption14990 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_DIACRITICS_in_p_FTDiacriticsOption15025 = new BitSet(new long[]{0x0000000000000000L,0x0800000000000000L});
	public static final BitSet FOLLOW_INSENSITIVE_in_p_FTDiacriticsOption15029 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_DIACRITICS_in_p_FTDiacriticsOption15047 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000002000000000L});
	public static final BitSet FOLLOW_SENSITIVE_in_p_FTDiacriticsOption15051 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_STEMMING_in_p_FTStemOption15086 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_NO_in_p_FTStemOption15093 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0008000000000000L});
	public static final BitSet FOLLOW_STEMMING_in_p_FTStemOption15097 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_THESAURUS_in_p_FTThesaurusOption15133 = new BitSet(new long[]{0x0400000000040000L});
	public static final BitSet FOLLOW_p_FTThesaurusID_in_p_FTThesaurusOption15136 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_DEFAULT_in_p_FTThesaurusOption15142 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_THESAURUS_in_p_FTThesaurusOption15161 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000004000L});
	public static final BitSet FOLLOW_LPAREN_in_p_FTThesaurusOption15163 = new BitSet(new long[]{0x0400000000040000L});
	public static final BitSet FOLLOW_p_FTThesaurusID_in_p_FTThesaurusOption15166 = new BitSet(new long[]{0x0000080000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000004000000L});
	public static final BitSet FOLLOW_DEFAULT_in_p_FTThesaurusOption15172 = new BitSet(new long[]{0x0000080000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000004000000L});
	public static final BitSet FOLLOW_COMMA_in_p_FTThesaurusOption15176 = new BitSet(new long[]{0x0000000000040000L});
	public static final BitSet FOLLOW_p_FTThesaurusID_in_p_FTThesaurusOption15178 = new BitSet(new long[]{0x0000080000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000004000000L});
	public static final BitSet FOLLOW_RPAREN_in_p_FTThesaurusOption15182 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_NO_in_p_FTThesaurusOption15200 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0800000000000000L});
	public static final BitSet FOLLOW_THESAURUS_in_p_FTThesaurusOption15204 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_AT_in_p_FTThesaurusID15237 = new BitSet(new long[]{0x0000000000004000L,0x0000000000000000L,0x0000000000000000L,0x0000000000020000L});
	public static final BitSet FOLLOW_p_StringLiteral_in_p_FTThesaurusID15239 = new BitSet(new long[]{0x0000000000040002L,0x0000001004000000L,0x0000000000000000L,0x0000000000100000L});
	public static final BitSet FOLLOW_RELATIONSHIP_in_p_FTThesaurusID15244 = new BitSet(new long[]{0x0000000000004000L,0x0000000000000000L,0x0000000000000000L,0x0000000000020000L});
	public static final BitSet FOLLOW_p_StringLiteral_in_p_FTThesaurusID15246 = new BitSet(new long[]{0x0000000000040002L,0x0000001004000000L});
	public static final BitSet FOLLOW_p_FTLiteralRange_in_p_FTThesaurusID15251 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000800L});
	public static final BitSet FOLLOW_LEVELS_in_p_FTThesaurusID15255 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_EXACTLY_in_p_FTLiteralRange15290 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000008000000L});
	public static final BitSet FOLLOW_L_IntegerLiteral_in_p_FTLiteralRange15292 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_AT_in_p_FTLiteralRange15310 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000200L});
	public static final BitSet FOLLOW_LEAST_in_p_FTLiteralRange15314 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000008000000L});
	public static final BitSet FOLLOW_L_IntegerLiteral_in_p_FTLiteralRange15316 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_AT_in_p_FTLiteralRange15334 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000004000000000L});
	public static final BitSet FOLLOW_MOST_in_p_FTLiteralRange15338 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000008000000L});
	public static final BitSet FOLLOW_L_IntegerLiteral_in_p_FTLiteralRange15340 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_FROM_in_p_FTLiteralRange15358 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000008000000L});
	public static final BitSet FOLLOW_L_IntegerLiteral_in_p_FTLiteralRange15360 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x2000000000000000L});
	public static final BitSet FOLLOW_TO_in_p_FTLiteralRange15362 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000008000000L});
	public static final BitSet FOLLOW_L_IntegerLiteral_in_p_FTLiteralRange15364 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_STOP_in_p_FTStopWordOption15400 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000800000L});
	public static final BitSet FOLLOW_WORDS_in_p_FTStopWordOption15404 = new BitSet(new long[]{0x0000000000040000L,0x0000000000000000L,0x0000000000004000L});
	public static final BitSet FOLLOW_p_FTStopWords_in_p_FTStopWordOption15406 = new BitSet(new long[]{0x0000000000000002L,0x0000000008000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000008L});
	public static final BitSet FOLLOW_p_FTStopWordsInclExcl_in_p_FTStopWordOption15408 = new BitSet(new long[]{0x0000000000000002L,0x0000000008000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000008L});
	public static final BitSet FOLLOW_STOP_in_p_FTStopWordOption15427 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000800000L});
	public static final BitSet FOLLOW_WORDS_in_p_FTStopWordOption15431 = new BitSet(new long[]{0x0400000000000000L});
	public static final BitSet FOLLOW_DEFAULT_in_p_FTStopWordOption15435 = new BitSet(new long[]{0x0000000000000002L,0x0000000008000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000008L});
	public static final BitSet FOLLOW_p_FTStopWordsInclExcl_in_p_FTStopWordOption15437 = new BitSet(new long[]{0x0000000000000002L,0x0000000008000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000008L});
	public static final BitSet FOLLOW_NO_in_p_FTStopWordOption15456 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0010000000000000L});
	public static final BitSet FOLLOW_STOP_in_p_FTStopWordOption15460 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000800000L});
	public static final BitSet FOLLOW_WORDS_in_p_FTStopWordOption15464 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_AT_in_p_FTStopWords15498 = new BitSet(new long[]{0x0000000000004000L,0x0000000000000000L,0x0000000000000000L,0x0000000000020000L});
	public static final BitSet FOLLOW_p_StringLiteral_in_p_FTStopWords15502 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_LPAREN_in_p_FTStopWords15516 = new BitSet(new long[]{0x0000000000004000L,0x0000000000000000L,0x0000000000000000L,0x0000000000020000L});
	public static final BitSet FOLLOW_p_StringLiteral_in_p_FTStopWords15518 = new BitSet(new long[]{0x0000080000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000004000000L});
	public static final BitSet FOLLOW_COMMA_in_p_FTStopWords15521 = new BitSet(new long[]{0x0000000000004000L,0x0000000000000000L,0x0000000000000000L,0x0000000000020000L});
	public static final BitSet FOLLOW_p_StringLiteral_in_p_FTStopWords15523 = new BitSet(new long[]{0x0000080000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000004000000L});
	public static final BitSet FOLLOW_RPAREN_in_p_FTStopWords15527 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_UNION_in_p_FTStopWordsInclExcl15559 = new BitSet(new long[]{0x0000000000040000L,0x0000000000000000L,0x0000000000004000L});
	public static final BitSet FOLLOW_EXCEPT_in_p_FTStopWordsInclExcl15565 = new BitSet(new long[]{0x0000000000040000L,0x0000000000000000L,0x0000000000004000L});
	public static final BitSet FOLLOW_p_FTStopWords_in_p_FTStopWordsInclExcl15568 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_LANGUAGE_in_p_FTLanguageOption15600 = new BitSet(new long[]{0x0000000000004000L,0x0000000000000000L,0x0000000000000000L,0x0000000000020000L});
	public static final BitSet FOLLOW_p_StringLiteral_in_p_FTLanguageOption15604 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_WILDCARDS_in_p_FTWildCardOption15634 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_NO_in_p_FTWildCardOption15641 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000040000L});
	public static final BitSet FOLLOW_WILDCARDS_in_p_FTWildCardOption15645 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_OPTION_in_p_FTExtensionOption15678 = new BitSet(new long[]{0xFFFFD1B0FEEFAF70L,0xFFF3C7FFFE0FB83FL,0xFFFBF3FC10013F7FL,0xFF7D89EFE3F4FC1FL,0x000008000CFFEFBFL});
	public static final BitSet FOLLOW_p_QName_in_p_FTExtensionOption15682 = new BitSet(new long[]{0x0000000000004000L,0x0000000000000000L,0x0000000000000000L,0x0000000000020000L});
	public static final BitSet FOLLOW_p_StringLiteral_in_p_FTExtensionOption15684 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_WITHOUT_in_p_FTIgnoreOption15712 = new BitSet(new long[]{0x0002000000000000L});
	public static final BitSet FOLLOW_CONTENT_in_p_FTIgnoreOption15716 = new BitSet(new long[]{0xFFFFD1B0FEFFEF70L,0xFFF3C7FFFE0FB9FFL,0xFFFBF3FE3BC17FFFL,0xFF7F9FEFE3F6FC9FL,0x000008000CFFEFFFL});
	public static final BitSet FOLLOW_p_UnionExpr_in_p_FTIgnoreOption15720 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_p_StatementsAndOptionalExpr_in_p_Program15752 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_p_Hybrid_in_p_Statements15779 = new BitSet(new long[]{0xFFFFD1B0FEFFFF72L,0xFFF3C7FFFE0FB9FFL,0xFFFBF3FE3BC17FFFL,0xFF7F9FEFE3F6FC9FL,0x000008000CFFEFFFL});
	public static final BitSet FOLLOW_p_Statements_in_p_StatementsAndExpr15807 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_p_Statements_in_p_StatementsAndOptionalExpr15834 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_p_HybridExprSingle_in_p_Hybrid15861 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_p_Statement_in_p_Hybrid15874 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_p_AssignStatement_in_p_Statement15905 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_p_BreakStatement_in_p_Statement15917 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_p_ContinueStatement_in_p_Statement15929 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_p_ExitStatement_in_p_Statement15941 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_p_VarDeclStatement_in_p_Statement15953 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_p_WhileStatement_in_p_Statement15965 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_p_Expr_in_p_HybridExprSingle15992 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000001000000000L});
	public static final BitSet FOLLOW_SEMICOLON_in_p_HybridExprSingle16007 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_p_ExprSimple_in_p_ApplyStatement16057 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000001000000000L});
	public static final BitSet FOLLOW_SEMICOLON_in_p_ApplyStatement16059 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_DOLLAR_in_p_AssignStatement16085 = new BitSet(new long[]{0xFFFFD1B0FEEFAF70L,0xFFF3C7FFFE0FB83FL,0xFFFBF3FC10013F7FL,0xFF7D89EFE3F4FC1FL,0x000008000CFFEFBFL});
	public static final BitSet FOLLOW_p_VarName_in_p_AssignStatement16087 = new BitSet(new long[]{0x0000000001000000L});
	public static final BitSet FOLLOW_BIND_in_p_AssignStatement16089 = new BitSet(new long[]{0xFFFFD1B0FEFFEF70L,0xFFF3C7FFFE0FB9FFL,0xFFFBF3FE3BC17FFFL,0xFF7F9FEFE3F6FC9FL,0x000008000CFFEFFFL});
	public static final BitSet FOLLOW_p_ExprSingle_in_p_AssignStatement16091 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000001000000000L});
	public static final BitSet FOLLOW_SEMICOLON_in_p_AssignStatement16094 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_LBRACKET_in_p_BlockStatement16120 = new BitSet(new long[]{0xFFFFD1B0FEFFFF70L,0xFFF3C7FFFE0FB9FFL,0xFFFBF3FE3BC17FFFL,0xFF7F9FEFE3FEFC9FL,0x000008000CFFEFFFL});
	public static final BitSet FOLLOW_p_Statements_in_p_BlockStatement16122 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000080000L});
	public static final BitSet FOLLOW_RBRACKET_in_p_BlockStatement16125 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_LBRACKET_in_p_BlockHybrid16151 = new BitSet(new long[]{0xFFFFD1B0FEFFFF70L,0xFFF3C7FFFE0FB9FFL,0xFFFBF3FE3BC17FFFL,0xFF7F9FEFE3FEFC9FL,0x000008000CFFEFFFL});
	public static final BitSet FOLLOW_p_Statements_in_p_BlockHybrid16153 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000080000L});
	public static final BitSet FOLLOW_RBRACKET_in_p_BlockHybrid16156 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_BREAK_in_p_BreakStatement16184 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000001000L});
	public static final BitSet FOLLOW_LOOP_in_p_BreakStatement16190 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000001000000000L});
	public static final BitSet FOLLOW_SEMICOLON_in_p_BreakStatement16194 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_CONTINUE_in_p_ContinueStatement16222 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000001000L});
	public static final BitSet FOLLOW_LOOP_in_p_ContinueStatement16228 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000001000000000L});
	public static final BitSet FOLLOW_SEMICOLON_in_p_ContinueStatement16232 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_EXIT_in_p_ExitStatement16260 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000001000000L});
	public static final BitSet FOLLOW_RETURNING_in_p_ExitStatement16266 = new BitSet(new long[]{0xFFFFD1B0FEFFEF70L,0xFFF3C7FFFE0FB9FFL,0xFFFBF3FE3BC17FFFL,0xFF7F9FEFE3F6FC9FL,0x000008000CFFEFFFL});
	public static final BitSet FOLLOW_p_ExprSingle_in_p_ExitStatement16270 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000001000000000L});
	public static final BitSet FOLLOW_SEMICOLON_in_p_ExitStatement16273 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_p_InitialClause_in_p_FLWORStatement16299 = new BitSet(new long[]{0x0040000000000000L,0x0000800200000000L,0x0800000000000400L,0x0001000000800000L,0x0000000000010000L});
	public static final BitSet FOLLOW_p_IntermediateClause_in_p_FLWORStatement16301 = new BitSet(new long[]{0x0040000000000000L,0x0000800200000000L,0x0800000000000400L,0x0001000000800000L,0x0000000000010000L});
	public static final BitSet FOLLOW_p_ReturnStatement_in_p_FLWORStatement16304 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_RETURN_in_p_ReturnStatement16336 = new BitSet(new long[]{0xFFFFD1B0FEFFFF70L,0xFFF3C7FFFE0FB9FFL,0xFFFBF3FE3BC17FFFL,0xFF7F9FEFE3F6FC9FL,0x000008000CFFEFFFL});
	public static final BitSet FOLLOW_p_Hybrid_in_p_ReturnStatement16340 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_IF_in_p_IfStatement16369 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000004000L});
	public static final BitSet FOLLOW_LPAREN_in_p_IfStatement16373 = new BitSet(new long[]{0xFFFFD1B0FEFFEF70L,0xFFF3C7FFFE0FB9FFL,0xFFFBF3FE3BC17FFFL,0xFF7F9FEFE3F6FC9FL,0x000008000CFFEFFFL});
	public static final BitSet FOLLOW_p_Expr_in_p_IfStatement16375 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000004000000L});
	public static final BitSet FOLLOW_RPAREN_in_p_IfStatement16378 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0400000000000000L});
	public static final BitSet FOLLOW_THEN_in_p_IfStatement16382 = new BitSet(new long[]{0xFFFFD1B0FEFFFF70L,0xFFF3C7FFFE0FB9FFL,0xFFFBF3FE3BC17FFFL,0xFF7F9FEFE3F6FC9FL,0x000008000CFFEFFFL});
	public static final BitSet FOLLOW_p_Hybrid_in_p_IfStatement16386 = new BitSet(new long[]{0x0000000000000000L,0x0000000000001000L});
	public static final BitSet FOLLOW_ELSE_in_p_IfStatement16391 = new BitSet(new long[]{0xFFFFD1B0FEFFFF70L,0xFFF3C7FFFE0FB9FFL,0xFFFBF3FE3BC17FFFL,0xFF7F9FEFE3F6FC9FL,0x000008000CFFEFFFL});
	public static final BitSet FOLLOW_p_Hybrid_in_p_IfStatement16395 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_SWITCH_in_p_SwitchStatement16424 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000004000L});
	public static final BitSet FOLLOW_LPAREN_in_p_SwitchStatement16428 = new BitSet(new long[]{0xFFFFD1B0FEFFEF70L,0xFFF3C7FFFE0FB9FFL,0xFFFBF3FE3BC17FFFL,0xFF7F9FEFE3F6FC9FL,0x000008000CFFEFFFL});
	public static final BitSet FOLLOW_p_Expr_in_p_SwitchStatement16430 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000004000000L});
	public static final BitSet FOLLOW_RPAREN_in_p_SwitchStatement16433 = new BitSet(new long[]{0x0000000010000000L});
	public static final BitSet FOLLOW_p_SwitchCaseStatement_in_p_SwitchStatement16435 = new BitSet(new long[]{0x0400000010000000L});
	public static final BitSet FOLLOW_DEFAULT_in_p_SwitchStatement16440 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000800000L});
	public static final BitSet FOLLOW_RETURN_in_p_SwitchStatement16446 = new BitSet(new long[]{0xFFFFD1B0FEFFFF70L,0xFFF3C7FFFE0FB9FFL,0xFFFBF3FE3BC17FFFL,0xFF7F9FEFE3F6FC9FL,0x000008000CFFEFFFL});
	public static final BitSet FOLLOW_p_Hybrid_in_p_SwitchStatement16450 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_CASE_in_p_SwitchCaseStatement16480 = new BitSet(new long[]{0xFFFFD1B0FEFFEF70L,0xFFF3C7FFFE0FB9FFL,0xFFFBF3FE3BC17FFFL,0xFF7F9FEFE3F6FC9FL,0x000008000CFFEFFFL});
	public static final BitSet FOLLOW_p_SwitchCaseOperand_in_p_SwitchCaseStatement16484 = new BitSet(new long[]{0x0000000010000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000800000L});
	public static final BitSet FOLLOW_RETURN_in_p_SwitchCaseStatement16490 = new BitSet(new long[]{0xFFFFD1B0FEFFFF70L,0xFFF3C7FFFE0FB9FFL,0xFFFBF3FE3BC17FFFL,0xFF7F9FEFE3F6FC9FL,0x000008000CFFEFFFL});
	public static final BitSet FOLLOW_p_Hybrid_in_p_SwitchCaseStatement16494 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_TRY_in_p_TryCatchStatement16523 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000080L});
	public static final BitSet FOLLOW_p_BlockStatement_in_p_TryCatchStatement16527 = new BitSet(new long[]{0x0000000080000000L});
	public static final BitSet FOLLOW_CATCH_in_p_TryCatchStatement16532 = new BitSet(new long[]{0xFFFFD1B0FEEFEF70L,0xFFF3C7FFFE0FB83FL,0xFFFBF3FC10013FFFL,0xFF7F89EFE3F6FC1FL,0x000008000CFFEFBFL});
	public static final BitSet FOLLOW_p_CatchErrorList_in_p_TryCatchStatement16536 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000080L});
	public static final BitSet FOLLOW_p_BlockStatement_in_p_TryCatchStatement16538 = new BitSet(new long[]{0x0000000080000002L});
	public static final BitSet FOLLOW_TRY_in_p_TryCatchHybrid16570 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000080L});
	public static final BitSet FOLLOW_p_BlockHybrid_in_p_TryCatchHybrid16574 = new BitSet(new long[]{0x0000000080000000L});
	public static final BitSet FOLLOW_CATCH_in_p_TryCatchHybrid16580 = new BitSet(new long[]{0xFFFFD1B0FEEFEF70L,0xFFF3C7FFFE0FB83FL,0xFFFBF3FC10013FFFL,0xFF7F89EFE3F6FC1FL,0x000008000CFFEFBFL});
	public static final BitSet FOLLOW_p_CatchErrorList_in_p_TryCatchHybrid16584 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000080L});
	public static final BitSet FOLLOW_p_BlockHybrid_in_p_TryCatchHybrid16586 = new BitSet(new long[]{0x0000000080000002L});
	public static final BitSet FOLLOW_TYPESWITCH_in_p_TypeswitchStatement16619 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000004000L});
	public static final BitSet FOLLOW_LPAREN_in_p_TypeswitchStatement16623 = new BitSet(new long[]{0xFFFFD1B0FEFFEF70L,0xFFF3C7FFFE0FB9FFL,0xFFFBF3FE3BC17FFFL,0xFF7F9FEFE3F6FC9FL,0x000008000CFFEFFFL});
	public static final BitSet FOLLOW_p_Expr_in_p_TypeswitchStatement16625 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000004000000L});
	public static final BitSet FOLLOW_RPAREN_in_p_TypeswitchStatement16628 = new BitSet(new long[]{0x0000000010000000L});
	public static final BitSet FOLLOW_p_CaseStatement_in_p_TypeswitchStatement16630 = new BitSet(new long[]{0x0400000010000000L});
	public static final BitSet FOLLOW_DEFAULT_in_p_TypeswitchStatement16635 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000040L,0x0000000000000000L,0x0000000000800000L});
	public static final BitSet FOLLOW_DOLLAR_in_p_TypeswitchStatement16640 = new BitSet(new long[]{0xFFFFD1B0FEEFAF70L,0xFFF3C7FFFE0FB83FL,0xFFFBF3FC10013F7FL,0xFF7D89EFE3F4FC1FL,0x000008000CFFEFBFL});
	public static final BitSet FOLLOW_p_VarName_in_p_TypeswitchStatement16642 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000800000L});
	public static final BitSet FOLLOW_RETURN_in_p_TypeswitchStatement16648 = new BitSet(new long[]{0xFFFFD1B0FEFFFF70L,0xFFF3C7FFFE0FB9FFL,0xFFFBF3FE3BC17FFFL,0xFF7F9FEFE3F6FC9FL,0x000008000CFFEFFFL});
	public static final BitSet FOLLOW_p_Hybrid_in_p_TypeswitchStatement16652 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_CASE_in_p_CaseStatement16681 = new BitSet(new long[]{0xFFFFD1B0FEEFAF70L,0xFFF3C7FFFE0FB87FL,0xFFFBF3FC10017F7FL,0xFF7D89EFE3F4FC1FL,0x000008000CFFEFBFL});
	public static final BitSet FOLLOW_DOLLAR_in_p_CaseStatement16686 = new BitSet(new long[]{0xFFFFD1B0FEEFAF70L,0xFFF3C7FFFE0FB83FL,0xFFFBF3FC10013F7FL,0xFF7D89EFE3F4FC1FL,0x000008000CFFEFBFL});
	public static final BitSet FOLLOW_p_VarName_in_p_CaseStatement16688 = new BitSet(new long[]{0x0000000000010000L});
	public static final BitSet FOLLOW_AS_in_p_CaseStatement16690 = new BitSet(new long[]{0xFFFFD1B0FEEFAF70L,0xFFF3C7FFFE0FB83FL,0xFFFBF3FC10017F7FL,0xFF7D89EFE3F4FC1FL,0x000008000CFFEFBFL});
	public static final BitSet FOLLOW_p_SequenceType_in_p_CaseStatement16694 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000800000L});
	public static final BitSet FOLLOW_RETURN_in_p_CaseStatement16698 = new BitSet(new long[]{0xFFFFD1B0FEFFFF70L,0xFFF3C7FFFE0FB9FFL,0xFFFBF3FE3BC17FFFL,0xFF7F9FEFE3F6FC9FL,0x000008000CFFEFFFL});
	public static final BitSet FOLLOW_p_Hybrid_in_p_CaseStatement16702 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_p_Annotation_in_p_VarDeclStatement16729 = new BitSet(new long[]{0x0000000000001000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000800L});
	public static final BitSet FOLLOW_VARIABLE_in_p_VarDeclStatement16734 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000040L});
	public static final BitSet FOLLOW_DOLLAR_in_p_VarDeclStatement16738 = new BitSet(new long[]{0xFFFFD1B0FEEFAF70L,0xFFF3C7FFFE0FB83FL,0xFFFBF3FC10013F7FL,0xFF7D89EFE3F4FC1FL,0x000008000CFFEFBFL});
	public static final BitSet FOLLOW_p_VarName_in_p_VarDeclStatement16740 = new BitSet(new long[]{0x0000080001010000L,0x0000000000000000L,0x0000000000000000L,0x0000001000000000L});
	public static final BitSet FOLLOW_p_TypeDeclaration_in_p_VarDeclStatement16742 = new BitSet(new long[]{0x0000080001000000L,0x0000000000000000L,0x0000000000000000L,0x0000001000000000L});
	public static final BitSet FOLLOW_BIND_in_p_VarDeclStatement16746 = new BitSet(new long[]{0xFFFFD1B0FEFFEF70L,0xFFF3C7FFFE0FB9FFL,0xFFFBF3FE3BC17FFFL,0xFF7F9FEFE3F6FC9FL,0x000008000CFFEFFFL});
	public static final BitSet FOLLOW_p_ExprSingle_in_p_VarDeclStatement16748 = new BitSet(new long[]{0x0000080000000000L,0x0000000000000000L,0x0000000000000000L,0x0000001000000000L});
	public static final BitSet FOLLOW_COMMA_in_p_VarDeclStatement16764 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000040L});
	public static final BitSet FOLLOW_DOLLAR_in_p_VarDeclStatement16766 = new BitSet(new long[]{0xFFFFD1B0FEEFAF70L,0xFFF3C7FFFE0FB83FL,0xFFFBF3FC10013F7FL,0xFF7D89EFE3F4FC1FL,0x000008000CFFEFBFL});
	public static final BitSet FOLLOW_p_VarName_in_p_VarDeclStatement16768 = new BitSet(new long[]{0x0000080001010000L,0x0000000000000000L,0x0000000000000000L,0x0000001000000000L});
	public static final BitSet FOLLOW_p_TypeDeclaration_in_p_VarDeclStatement16770 = new BitSet(new long[]{0x0000080001000000L,0x0000000000000000L,0x0000000000000000L,0x0000001000000000L});
	public static final BitSet FOLLOW_BIND_in_p_VarDeclStatement16774 = new BitSet(new long[]{0xFFFFD1B0FEFFEF70L,0xFFF3C7FFFE0FB9FFL,0xFFFBF3FE3BC17FFFL,0xFF7F9FEFE3F6FC9FL,0x000008000CFFEFFFL});
	public static final BitSet FOLLOW_p_ExprSingle_in_p_VarDeclStatement16776 = new BitSet(new long[]{0x0000080000000000L,0x0000000000000000L,0x0000000000000000L,0x0000001000000000L});
	public static final BitSet FOLLOW_SEMICOLON_in_p_VarDeclStatement16793 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_WHILE_in_p_WhileStatement16821 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000004000L});
	public static final BitSet FOLLOW_LPAREN_in_p_WhileStatement16825 = new BitSet(new long[]{0xFFFFD1B0FEFFEF70L,0xFFF3C7FFFE0FB9FFL,0xFFFBF3FE3BC17FFFL,0xFF7F9FEFE3F6FC9FL,0x000008000CFFEFFFL});
	public static final BitSet FOLLOW_p_Expr_in_p_WhileStatement16827 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000004000000L});
	public static final BitSet FOLLOW_RPAREN_in_p_WhileStatement16830 = new BitSet(new long[]{0xFFFFD1B0FEFFFF70L,0xFFF3C7FFFE0FB9FFL,0xFFFBF3FE3BC17FFFL,0xFF7F9FEFE3F6FC9FL,0x000008000CFFEFFFL});
	public static final BitSet FOLLOW_p_Hybrid_in_p_WhileStatement16832 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_p_QuantifiedExpr_in_p_ExprSimple16859 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_p_OrExpr_in_p_ExprSimple16871 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_pg_UpdateExpr_in_p_ExprSimple16886 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_LBRACKET_in_p_BlockExpr16912 = new BitSet(new long[]{0xFFFFD1B0FEFFFF70L,0xFFF3C7FFFE0FB9FFL,0xFFFBF3FE3BC17FFFL,0xFF7F9FEFE3F6FC9FL,0x000008000CFFEFFFL});
	public static final BitSet FOLLOW_p_StatementsAndExpr_in_p_BlockExpr16914 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000080000L});
	public static final BitSet FOLLOW_RBRACKET_in_p_BlockExpr16916 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_COLLECTION_in_p_CollectionDecl16947 = new BitSet(new long[]{0xFFFFD1B0FEEFAF70L,0xFFF3C7FFFE0FB83FL,0xFFFBF3FC10013F7FL,0xFF7D89EFE3F4FC1FL,0x000008000CFFEFBFL});
	public static final BitSet FOLLOW_p_QName_in_p_CollectionDecl16951 = new BitSet(new long[]{0x0000000000010002L});
	public static final BitSet FOLLOW_p_CollectionTypeDecl_in_p_CollectionDecl16953 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_AS_in_p_CollectionTypeDecl16982 = new BitSet(new long[]{0x0000100000080000L,0x0000000000000820L,0x0000810000000000L,0x0200000300008000L});
	public static final BitSet FOLLOW_p_KindTest_in_p_CollectionTypeDecl16986 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0002000000010080L});
	public static final BitSet FOLLOW_p_OccurrenceIndicator_in_p_CollectionTypeDecl16995 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_INDEX_in_p_IndexDecl17025 = new BitSet(new long[]{0xFFFFD1B0FEEFAF70L,0xFFF3C7FFFE0FB83FL,0xFFFBF3FC10013F7FL,0xFF7D89EFE3F4FC1FL,0x000008000CFFEFBFL});
	public static final BitSet FOLLOW_p_IndexName_in_p_IndexDecl17029 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0080000000000000L});
	public static final BitSet FOLLOW_ON_in_p_IndexDecl17033 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0001000000000000L});
	public static final BitSet FOLLOW_NODES_in_p_IndexDecl17039 = new BitSet(new long[]{0xFFFFD1B0FEFFEF70L,0xFFF3C7FFFE0FB9FFL,0xFFFBF3FC1BC17FFFL,0xFF7F9FEFE3F6FC1FL,0x000008000CFFEFFFL});
	public static final BitSet FOLLOW_p_IndexDomainExpr_in_p_IndexDecl17043 = new BitSet(new long[]{0x0000000008000000L});
	public static final BitSet FOLLOW_BY_in_p_IndexDecl17047 = new BitSet(new long[]{0xFFFFD1B0FEFFEF70L,0xFFF3C7FFFE0FB9FFL,0xFFFBF3FC1BC17FFFL,0xFF7F9FEFE3F6FC1FL,0x000008000CFFEFFFL});
	public static final BitSet FOLLOW_p_IndexKeySpec_in_p_IndexDecl17051 = new BitSet(new long[]{0x0000080000000002L});
	public static final BitSet FOLLOW_COMMA_in_p_IndexDecl17054 = new BitSet(new long[]{0xFFFFD1B0FEFFEF70L,0xFFF3C7FFFE0FB9FFL,0xFFFBF3FC1BC17FFFL,0xFF7F9FEFE3F6FC1FL,0x000008000CFFEFFFL});
	public static final BitSet FOLLOW_p_IndexKeySpec_in_p_IndexDecl17056 = new BitSet(new long[]{0x0000080000000002L});
	public static final BitSet FOLLOW_p_QName_in_p_IndexName17083 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_p_PathExpr_in_p_IndexDomainExpr17108 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_p_IndexKeyExpr_in_p_IndexKeySpec17133 = new BitSet(new long[]{0x0000008000010002L});
	public static final BitSet FOLLOW_p_IndexKeyTypeDecl_in_p_IndexKeySpec17135 = new BitSet(new long[]{0x0000008000000002L});
	public static final BitSet FOLLOW_p_IndexKeyCollation_in_p_IndexKeySpec17138 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_p_PathExpr_in_p_IndexKeyExpr17164 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_AS_in_p_IndexKeyTypeDecl17191 = new BitSet(new long[]{0xFFFFD1B0FEEFAF70L,0xFFF3C7FFFE0FB83FL,0xFFFBF3FC10013F7FL,0xFF7D89EFE3F4FC1FL,0x000008000CFFEFBFL});
	public static final BitSet FOLLOW_p_AtomicType_in_p_IndexKeyTypeDecl17195 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0002000000010080L});
	public static final BitSet FOLLOW_p_OccurrenceIndicator_in_p_IndexKeyTypeDecl17197 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_p_QName_in_p_AtomicType17223 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_COLLATION_in_p_IndexKeyCollation17250 = new BitSet(new long[]{0x0000000000004000L,0x0000000000000000L,0x0000000000000000L,0x0000000000020000L});
	public static final BitSet FOLLOW_p_StringLiteral_in_p_IndexKeyCollation17254 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_INTEGRITY_in_p_ICDecl17281 = new BitSet(new long[]{0x0000400000000000L});
	public static final BitSet FOLLOW_CONSTRAINT_in_p_ICDecl17287 = new BitSet(new long[]{0xFFFFD1B0FEEFAF70L,0xFFF3C7FFFE0FB83FL,0xFFFBF3FC10013F7FL,0xFF7D89EFE3F4FC1FL,0x000008000CFFEFBFL});
	public static final BitSet FOLLOW_p_QName_in_p_ICDecl17291 = new BitSet(new long[]{0x0000000000000000L,0x0000000800000000L,0x0080000000000000L});
	public static final BitSet FOLLOW_p_ICCollection_in_p_ICDecl17294 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_p_ICForeignKey_in_p_ICDecl17298 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_ON_in_p_ICCollection17326 = new BitSet(new long[]{0x0000010000000000L});
	public static final BitSet FOLLOW_COLLECTION_in_p_ICCollection17332 = new BitSet(new long[]{0xFFFFD1B0FEEFAF70L,0xFFF3C7FFFE0FB83FL,0xFFFBF3FC10013F7FL,0xFF7D89EFE3F4FC1FL,0x000008000CFFEFBFL});
	public static final BitSet FOLLOW_p_QName_in_p_ICCollection17336 = new BitSet(new long[]{0x0000000000000000L,0x0000000400000040L,0x0000800000000000L});
	public static final BitSet FOLLOW_p_ICCollSequence_in_p_ICCollection17339 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_p_ICCollSequenceUnique_in_p_ICCollection17343 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_p_ICCollNode_in_p_ICCollection17347 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_DOLLAR_in_p_ICCollSequence17373 = new BitSet(new long[]{0xFFFFD1B0FEEFAF70L,0xFFF3C7FFFE0FB83FL,0xFFFBF3FC10013F7FL,0xFF7D89EFE3F4FC1FL,0x000008000CFFEFBFL});
	public static final BitSet FOLLOW_p_QName_in_p_ICCollSequence17375 = new BitSet(new long[]{0x0000001000000000L});
	public static final BitSet FOLLOW_CHECK_in_p_ICCollSequence17379 = new BitSet(new long[]{0xFFFFD1B0FEFFEF70L,0xFFF3C7FFFE0FB9FFL,0xFFFBF3FE3BC17FFFL,0xFF7F9FEFE3F6FC9FL,0x000008000CFFEFFFL});
	public static final BitSet FOLLOW_p_ExprSingle_in_p_ICCollSequence17383 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_NODE_in_p_ICCollSequenceUnique17411 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000040L});
	public static final BitSet FOLLOW_DOLLAR_in_p_ICCollSequenceUnique17415 = new BitSet(new long[]{0xFFFFD1B0FEEFAF70L,0xFFF3C7FFFE0FB83FL,0xFFFBF3FC10013F7FL,0xFF7D89EFE3F4FC1FL,0x000008000CFFEFBFL});
	public static final BitSet FOLLOW_p_QName_in_p_ICCollSequenceUnique17417 = new BitSet(new long[]{0x0000001000000000L});
	public static final BitSet FOLLOW_CHECK_in_p_ICCollSequenceUnique17421 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000010L});
	public static final BitSet FOLLOW_UNIQUE_in_p_ICCollSequenceUnique17427 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000008L});
	public static final BitSet FOLLOW_KEY_in_p_ICCollSequenceUnique17433 = new BitSet(new long[]{0xFFFFD1B0FEFFEF70L,0xFFF3C7FFFE0FB9FFL,0xFFFBF3FC1BC17FFFL,0xFF7F9FEFE3F6FC1FL,0x000008000CFFEFFFL});
	public static final BitSet FOLLOW_p_PathExpr_in_p_ICCollSequenceUnique17437 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_FOREACH_in_p_ICCollNode17464 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000800000000000L});
	public static final BitSet FOLLOW_NODE_in_p_ICCollNode17470 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000040L});
	public static final BitSet FOLLOW_DOLLAR_in_p_ICCollNode17474 = new BitSet(new long[]{0xFFFFD1B0FEEFAF70L,0xFFF3C7FFFE0FB83FL,0xFFFBF3FC10013F7FL,0xFF7D89EFE3F4FC1FL,0x000008000CFFEFBFL});
	public static final BitSet FOLLOW_p_QName_in_p_ICCollNode17476 = new BitSet(new long[]{0x0000001000000000L});
	public static final BitSet FOLLOW_CHECK_in_p_ICCollNode17480 = new BitSet(new long[]{0xFFFFD1B0FEFFEF70L,0xFFF3C7FFFE0FB9FFL,0xFFFBF3FE3BC17FFFL,0xFF7F9FEFE3F6FC9FL,0x000008000CFFEFFFL});
	public static final BitSet FOLLOW_p_ExprSingle_in_p_ICCollNode17484 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_FOREIGN_in_p_ICForeignKey17512 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000008L});
	public static final BitSet FOLLOW_KEY_in_p_ICForeignKey17518 = new BitSet(new long[]{0x0000000000000000L,0x0000001000000000L});
	public static final BitSet FOLLOW_p_ICForeignKeySource_in_p_ICForeignKey17522 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x2000000000000000L});
	public static final BitSet FOLLOW_p_ICForeignKeyTarget_in_p_ICForeignKey17524 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_FROM_in_p_ICForeignKeySource17551 = new BitSet(new long[]{0x0000010000000000L});
	public static final BitSet FOLLOW_p_ICForeignKeyValues_in_p_ICForeignKeySource17555 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_TO_in_p_ICForeignKeyTarget17582 = new BitSet(new long[]{0x0000010000000000L});
	public static final BitSet FOLLOW_p_ICForeignKeyValues_in_p_ICForeignKeyTarget17586 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_COLLECTION_in_p_ICForeignKeyValues17613 = new BitSet(new long[]{0xFFFFD1B0FEEFAF70L,0xFFF3C7FFFE0FB83FL,0xFFFBF3FC10013F7FL,0xFF7D89EFE3F4FC1FL,0x000008000CFFEFBFL});
	public static final BitSet FOLLOW_p_QName_in_p_ICForeignKeyValues17617 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000800000000000L});
	public static final BitSet FOLLOW_NODE_in_p_ICForeignKeyValues17621 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000040L});
	public static final BitSet FOLLOW_DOLLAR_in_p_ICForeignKeyValues17625 = new BitSet(new long[]{0xFFFFD1B0FEEFAF70L,0xFFF3C7FFFE0FB83FL,0xFFFBF3FC10013F7FL,0xFF7D89EFE3F4FC1FL,0x000008000CFFEFBFL});
	public static final BitSet FOLLOW_p_QName_in_p_ICForeignKeyValues17627 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000008L});
	public static final BitSet FOLLOW_KEY_in_p_ICForeignKeyValues17631 = new BitSet(new long[]{0xFFFFD1B0FEFFEF70L,0xFFF3C7FFFE0FB9FFL,0xFFFBF3FC1BC17FFFL,0xFF7F9FEFE3F6FC1FL,0x000008000CFFEFFFL});
	public static final BitSet FOLLOW_p_PathExpr_in_p_ICForeignKeyValues17635 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_set_in_synpred1_XQueryParser3541 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000040L});
	public static final BitSet FOLLOW_DOLLAR_in_synpred1_XQueryParser3549 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_FOR_in_synpred1_XQueryParser3555 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000080000000000L,0x0000000000000001L});
	public static final BitSet FOLLOW_set_in_synpred1_XQueryParser3557 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_IF_in_synpred2_XQueryParser3583 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000004000L});
	public static final BitSet FOLLOW_LPAREN_in_synpred2_XQueryParser3585 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_SWITCH_in_synpred3_XQueryParser3613 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000004000L});
	public static final BitSet FOLLOW_LPAREN_in_synpred3_XQueryParser3615 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_TYPESWITCH_in_synpred4_XQueryParser3639 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000004000L});
	public static final BitSet FOLLOW_LPAREN_in_synpred4_XQueryParser3641 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_TRY_in_synpred5_XQueryParser3661 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000080L});
	public static final BitSet FOLLOW_LBRACKET_in_synpred5_XQueryParser3663 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_VALIDATE_in_synpred6_XQueryParser6109 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000040L,0x0020000000000000L,0x0000000000000002L});
	public static final BitSet FOLLOW_p_ValidationMode_in_synpred6_XQueryParser6113 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_TYPE_in_synpred6_XQueryParser6117 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_SLASH_in_synpred7_XQueryParser6457 = new BitSet(new long[]{0xFFFFD1B0FEFFEF70L,0xFFF3C7FFFE0FB9FFL,0xFFFBF3FC1BC17FFFL,0xFF7F99EFE3F6FC1FL,0x000008000CFFEFFFL});
	public static final BitSet FOLLOW_p_RelativePathExpr_in_synpred7_XQueryParser6459 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_set_in_synpred9_XQueryParser6626 = new BitSet(new long[]{0xFFFFD1B0FEEFAF70L,0xFFF3C7FFFE0FB83FL,0xFFFBF3FC10013FFFL,0xFF7D89EFE3F4FC1FL,0x000008000CFFEFBFL});
	public static final BitSet FOLLOW_p_QName_in_synpred9_XQueryParser6634 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000080L});
	public static final BitSet FOLLOW_LBRACKET_in_synpred9_XQueryParser6637 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_set_in_synpred9_XQueryParser6655 = new BitSet(new long[]{0xFFFFD1B0FEEFAF70L,0xFFF3C7FFFE0FB83FL,0xFFFBF3FC10013FFFL,0xFF7D89EFE3F4FC1FL,0x000008000CFFEFBFL});
	public static final BitSet FOLLOW_p_NCName_in_synpred9_XQueryParser6663 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000080L});
	public static final BitSet FOLLOW_LBRACKET_in_synpred9_XQueryParser6666 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_set_in_synpred9_XQueryParser6684 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000080L});
	public static final BitSet FOLLOW_LBRACKET_in_synpred9_XQueryParser6696 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_p_KindTest_in_synpred10_XQueryParser6726 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_p_QName_in_synpred11_XQueryParser6745 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000004000L});
	public static final BitSet FOLLOW_LPAREN_in_synpred11_XQueryParser6747 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_p_PrimaryExpr_in_synpred12_XQueryParser6765 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_p_Wildcard_in_synpred13_XQueryParser7204 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_p_NCName_in_synpred14_XQueryParser7223 = new BitSet(new long[]{0x0000020000000000L});
	public static final BitSet FOLLOW_COLON_in_synpred14_XQueryParser7225 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_p_NCName_in_synpred15_XQueryParser7243 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_LPAREN_in_synpred16_XQueryParser7499 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_p_OccurrenceIndicator_in_synpred17_XQueryParser9463 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_p_OccurrenceIndicator_in_synpred18_XQueryParser16990 = new BitSet(new long[]{0x0000000000000002L});
}
