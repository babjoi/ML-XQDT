/*
* generated by Xtext
*/
package org.oasisopen.contentassist.antlr;

import java.util.Collection;
import java.util.Map;
import java.util.HashMap;

import org.antlr.runtime.CharStream;
import org.antlr.runtime.RecognitionException;
import org.eclipse.xtext.AbstractElement;
import org.eclipse.xtext.ui.common.editor.contentassist.antlr.AbstractContentAssistParser;
import org.eclipse.xtext.ui.common.editor.contentassist.antlr.FollowElement;
import org.eclipse.xtext.ui.common.editor.contentassist.antlr.internal.AbstractInternalContentAssistParser;

import com.google.inject.Inject;

import org.oasisopen.services.RelaxngGrammarAccess;

public class RelaxngParser extends AbstractContentAssistParser {
	
	@Inject
	private RelaxngGrammarAccess grammarAccess;
	
	private Map<AbstractElement, String> nameMappings;
	
	@Override
	protected org.oasisopen.contentassist.antlr.internal.InternalRelaxngLexer createLexer(CharStream stream) {
		return new org.oasisopen.contentassist.antlr.internal.InternalRelaxngLexer(stream);
	}
	
	@Override
	protected org.oasisopen.contentassist.antlr.internal.InternalRelaxngParser createParser() {
		org.oasisopen.contentassist.antlr.internal.InternalRelaxngParser result = new org.oasisopen.contentassist.antlr.internal.InternalRelaxngParser(null);
		result.setGrammarAccess(grammarAccess);
		return result;
	}
	
	@Override
	protected String getRuleName(AbstractElement element) {
		if (nameMappings == null) {
			nameMappings = new HashMap<AbstractElement, String>() {
				{
					put(grammarAccess.getTopLevelAccess().getAlternatives_1(), "rule__TopLevel__Alternatives_1");
					put(grammarAccess.getDeclAccess().getAlternatives(), "rule__Decl__Alternatives");
					put(grammarAccess.getPatternAccess().getAlternatives(), "rule__Pattern__Alternatives");
					put(grammarAccess.getPatternAccess().getValAlternatives_0_0(), "rule__Pattern__ValAlternatives_0_0");
					put(grammarAccess.getElementAccess().getCardinalityAlternatives_5_0(), "rule__Element__CardinalityAlternatives_5_0");
					put(grammarAccess.getElementAccess().getContinueAlternatives_6_0(), "rule__Element__ContinueAlternatives_6_0");
					put(grammarAccess.getAttributeAccess().getContinueAlternatives_6_0(), "rule__Attribute__ContinueAlternatives_6_0");
					put(grammarAccess.getGrammarContentAccess().getAlternatives(), "rule__GrammarContent__Alternatives");
					put(grammarAccess.getIncludeContentAccess().getAlternatives(), "rule__IncludeContent__Alternatives");
					put(grammarAccess.getStartAccess().getAlternatives_1(), "rule__Start__Alternatives_1");
					put(grammarAccess.getStartAccess().getAlternatives_2(), "rule__Start__Alternatives_2");
					put(grammarAccess.getDefineAccess().getAlternatives_1(), "rule__Define__Alternatives_1");
					put(grammarAccess.getNameAccess().getAlternatives(), "rule__Name__Alternatives");
					put(grammarAccess.getNameClassAccess().getAlternatives(), "rule__NameClass__Alternatives");
					put(grammarAccess.getDataTypeNameAccess().getAlternatives(), "rule__DataTypeName__Alternatives");
					put(grammarAccess.getNamespaceURILiteralAccess().getAlternatives(), "rule__NamespaceURILiteral__Alternatives");
					put(grammarAccess.getIdentifierOrKeyWordAccess().getAlternatives(), "rule__IdentifierOrKeyWord__Alternatives");
					put(grammarAccess.getIdentifierAccess().getAlternatives(), "rule__Identifier__Alternatives");
					put(grammarAccess.getKeyWordAccess().getAlternatives(), "rule__KeyWord__Alternatives");
					put(grammarAccess.getTopLevelAccess().getGroup(), "rule__TopLevel__Group");
					put(grammarAccess.getDeclAccess().getGroup_0(), "rule__Decl__Group_0");
					put(grammarAccess.getDeclAccess().getGroup_1(), "rule__Decl__Group_1");
					put(grammarAccess.getDeclAccess().getGroup_2(), "rule__Decl__Group_2");
					put(grammarAccess.getPatternAccess().getGroup_1(), "rule__Pattern__Group_1");
					put(grammarAccess.getPatternAccess().getGroup_2(), "rule__Pattern__Group_2");
					put(grammarAccess.getPatternAccess().getGroup_3(), "rule__Pattern__Group_3");
					put(grammarAccess.getPatternAccess().getGroup_4(), "rule__Pattern__Group_4");
					put(grammarAccess.getPatternAccess().getGroup_9(), "rule__Pattern__Group_9");
					put(grammarAccess.getPatternAccess().getGroup_9_1(), "rule__Pattern__Group_9_1");
					put(grammarAccess.getPatternAccess().getGroup_11(), "rule__Pattern__Group_11");
					put(grammarAccess.getPatternAccess().getGroup_12(), "rule__Pattern__Group_12");
					put(grammarAccess.getPatternAccess().getGroup_13(), "rule__Pattern__Group_13");
					put(grammarAccess.getElementAccess().getGroup(), "rule__Element__Group");
					put(grammarAccess.getAttributeAccess().getGroup(), "rule__Attribute__Group");
					put(grammarAccess.getParamAccess().getGroup(), "rule__Param__Group");
					put(grammarAccess.getExceptPatternAccess().getGroup(), "rule__ExceptPattern__Group");
					put(grammarAccess.getGrammarContentAccess().getGroup_2(), "rule__GrammarContent__Group_2");
					put(grammarAccess.getGrammarContentAccess().getGroup_3(), "rule__GrammarContent__Group_3");
					put(grammarAccess.getGrammarContentAccess().getGroup_3_3(), "rule__GrammarContent__Group_3_3");
					put(grammarAccess.getIncludeContentAccess().getGroup_2(), "rule__IncludeContent__Group_2");
					put(grammarAccess.getStartAccess().getGroup(), "rule__Start__Group");
					put(grammarAccess.getDefineAccess().getGroup(), "rule__Define__Group");
					put(grammarAccess.getExceptNameClassAccess().getGroup(), "rule__ExceptNameClass__Group");
					put(grammarAccess.getNameClassAccess().getGroup_1(), "rule__NameClass__Group_1");
					put(grammarAccess.getNameClassAccess().getGroup_2(), "rule__NameClass__Group_2");
					put(grammarAccess.getNameClassAccess().getGroup_3(), "rule__NameClass__Group_3");
					put(grammarAccess.getNameClassAccess().getGroup_4(), "rule__NameClass__Group_4");
					put(grammarAccess.getInheritAccess().getGroup(), "rule__Inherit__Group");
					put(grammarAccess.getIdentifierAccess().getGroup_0(), "rule__Identifier__Group_0");
					put(grammarAccess.getQuotedIdentifierAccess().getGroup(), "rule__QuotedIdentifier__Group");
					put(grammarAccess.getCNameAccess().getGroup(), "rule__CName__Group");
					put(grammarAccess.getLiteralAccess().getGroup(), "rule__Literal__Group");
					put(grammarAccess.getLiteralAccess().getGroup_1(), "rule__Literal__Group_1");
				}
			};
		}
		return nameMappings.get(element);
	}
	
	@Override
	protected Collection<FollowElement> getFollowElements(AbstractInternalContentAssistParser parser) {
		try {
			org.oasisopen.contentassist.antlr.internal.InternalRelaxngParser typedParser = (org.oasisopen.contentassist.antlr.internal.InternalRelaxngParser) parser;
			typedParser.entryRuleTopLevel();
			return typedParser.getFollowElements();
		} catch(RecognitionException ex) {
			throw new RuntimeException(ex);
		}		
	}
	
	@Override
	protected String[] getInitialHiddenTokens() {
		return new String[] { "RULE_WS", "RULE_ML_COMMENT", "RULE_SL_COMMENT" };
	}
	
	public RelaxngGrammarAccess getGrammarAccess() {
		return this.grammarAccess;
	}
	
	public void setGrammarAccess(RelaxngGrammarAccess grammarAccess) {
		this.grammarAccess = grammarAccess;
	}
}
