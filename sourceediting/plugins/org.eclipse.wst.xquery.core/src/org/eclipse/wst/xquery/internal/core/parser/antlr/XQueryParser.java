// $ANTLR 3.3 Nov 30, 2010 12:50:56 XQueryParser.g 2012-04-09 17:36:17

/*******************************************************************************
 * Copyright (c) 2008, 2009 28msec Inc. and others.
 * All rights reserved. This program and the accompanying materials
 * are made available under the terms of the Eclipse Public License v1.0
 * which accompanies this distribution, and is available at
 * http://www.eclipse.org/legal/epl-v10.html
 *
 * Contributors:
 *     Gabriel Petrovay (28msec) - initial API and implementation
 *     Sam Neth (Mark Logic)
 *******************************************************************************/
package org.eclipse.wst.xquery.internal.core.parser.antlr;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.Stack;

import org.antlr.runtime.BaseRecognizer;
import org.antlr.runtime.BitSet;
import org.antlr.runtime.CommonToken;
import org.antlr.runtime.DFA;
import org.antlr.runtime.EarlyExitException;
import org.antlr.runtime.FailedPredicateException;
import org.antlr.runtime.IntStream;
import org.antlr.runtime.MismatchedSetException;
import org.antlr.runtime.NoViableAltException;
import org.antlr.runtime.ParserRuleReturnScope;
import org.antlr.runtime.RecognitionException;
import org.antlr.runtime.RecognizerSharedState;
import org.antlr.runtime.RuleReturnScope;
import org.antlr.runtime.TokenStream;
import org.antlr.runtime.tree.CommonTree;
import org.antlr.runtime.tree.CommonTreeAdaptor;
import org.antlr.runtime.tree.RewriteEarlyExitException;
import org.antlr.runtime.tree.RewriteRuleSubtreeStream;
import org.antlr.runtime.tree.RewriteRuleTokenStream;
import org.antlr.runtime.tree.TreeAdaptor;

public class XQueryParser extends XQDTParser {
    public static final String[] tokenNames = new String[] { "<invalid>", "<EOR>", "<DOWN>", "<UP>",
        "L_QuotAttrContentChar", "L_AposAttrContentChar", "L_ElementContentChar", "L_CDataSection",
        "L_PredefinedEntityRef", "L_CharRef", "ESCAPE_LBRACKET", "ESCAPE_RBRACKET", "ESCAPE_APOS", "ESCAPE_QUOT",
        "CDATA_START", "CDATA_END", "ANCESTOR", "ANCESTOR_OR_SELF", "AND", "AS", "ASCENDING", "AT", "ATTRIBUTE",
        "BASE_URI", "BOUNDARY_SPACE", "BY", "CASE", "CAST", "CASTABLE", "CHILD", "COLLATION", "COMMENT",
        "CONSTRUCTION", "COPY_NAMESPACES", "DECLARE", "DEFAULT", "DESCENDANT", "DESCENDANT_OR_SELF", "DESCENDING",
        "DIV", "DOCUMENT", "DOCUMENT_NODE", "ELEMENT", "ELSE", "EMPTY", "EMPTY_SEQUENCE", "ENCODING", "EQ",
        "EVERY", "EXCEPT", "EXTERNAL", "FOLLOWING", "FOLLOWING_SIBLING", "FOR", "FUNCTION", "GE", "GREATEST", "GT",
        "IDIV", "IF", "IMPORT", "IN", "INHERIT", "INSTANCE", "INTERSECT", "IS", "ITEM", "LAX", "LE", "LEAST",
        "LET", "LT", "MOD", "MODULE", "NAMESPACE", "NE", "NO_INHERIT", "NO_PRESERVE", "NODE", "OF", "OPTION", "OR",
        "ORDER", "ORDERED", "ORDERING", "PARENT", "PRECEDING", "PRECEDING_SIBLING", "PRESERVE",
        "PROCESSING_INSTRUCTION", "RETURN", "SATISFIES", "SCHEMA", "SCHEMA_ATTRIBUTE", "SCHEMA_ELEMENT", "SELF",
        "SOME", "STABLE", "STRICT", "STRIP", "TEXT", "THEN", "TO", "TREAT", "TYPESWITCH", "UNION", "UNORDERED",
        "VALIDATE", "VARIABLE", "VERSION", "WHERE", "XQUERY", "ALLOWING", "CATCH", "CONTEXT", "COUNT",
        "DECIMAL_FORMAT", "DECIMAL_SEPARATOR", "DIGIT", "END", "GROUP", "GROUPING_SEPARATOR", "INFINITY",
        "MINUS_SIGN", "NAMESPACE_NODE", "NAN", "NEXT", "ONLY", "PATTERN_SEPARATOR", "PERCENT", "PER_MILLE",
        "PREVIOUS", "SLIDING", "START", "SWITCH", "TRY", "TUMBLING", "TYPE", "WHEN", "WINDOW", "ZERO_DIGIT",
        "AFTER", "BEFORE", "COPY", "DELETE", "FIRST", "INSERT", "INTO", "LAST", "MODIFY", "NODES", "RENAME",
        "REPLACE", "REVALIDATION", "SKIP", "UPDATING", "VALUE", "WITH", "ALL", "ANY", "CONTAINS", "CONTENT",
        "DIACRITICS", "DIFFERENT", "DISTANCE", "ENTIRE", "EXACTLY", "FROM", "FT_OPTION", "FTAND", "FTNOT", "FTOR",
        "INSENSITIVE", "LANGUAGE", "LEVELS", "LOWERCASE", "MOST", "NO", "NOT", "OCCURS", "PARAGRAPH", "PARAGRAPHS",
        "PHRASE", "RELATIONSHIP", "SAME", "SCORE", "SENSITIVE", "SENTENCE", "SENTENCES", "STEMMING", "STOP",
        "THESAURUS", "TIMES", "UPPERCASE", "USING", "WEIGHT", "WILDCARDS", "WITHOUT", "WORD", "WORDS", "BREAK",
        "CONTINUE", "EXIT", "LOOP", "RETURNING", "WHILE", "CHECK", "COLLECTION", "CONSTRAINT", "FOREACH",
        "FOREIGN", "INDEX", "INTEGRITY", "KEY", "ON", "UNIQUE", "BINARY", "AMP_ER", "APOS_ER", "QUOT_ER", "CONCAT",
        "LPAREN", "RPAREN", "DOLLAR", "LBRACKET", "RBRACKET", "LSQUARE", "RSQUARE", "EQUAL", "BIND", "NOTEQUAL",
        "ANN_PERCENT", "HASH", "AMP", "COMMA", "QUESTION", "STAR", "PLUS", "MINUS", "SMALLER", "GREATER",
        "SMALLEREQ", "GREATEREQ", "SMALLER_SMALLER", "GREATER_GREATER", "SLASH", "SLASH_SLASH", "DOT", "DOT_DOT",
        "COLON", "COLON_COLON", "EMPTY_CLOSE_TAG", "CLOSE_TAG", "SEMICOLON", "VBAR", "PRAGMA_START", "PRAGMA_END",
        "XML_COMMENT_START", "XML_COMMENT_END", "PI_START", "PI_END", "ATTR_SIGN", "CHARREF_DEC", "CHARREF_HEX",
        "APOS", "QUOT", "NCNameStartChar", "NCNameChar", "L_NCName", "Letter", "HexLetter", "Digit", "Digits", "S",
        "SU", "L_Pragma", "L_DirCommentConstructor", "L_DirPIConstructor", "L_IntegerLiteral", "L_DecimalLiteral",
        "L_DoubleLiteral", "L_Comment", "L_AnyChar", "L_QuotStringLiteralChar", "L_AposStringLiteralChar",
        "LibraryModule", "MainModule", "VersionDecl", "VersionDeclEncoding", "VersionDeclVersion", "ModuleDecl",
        "Prolog", "DefaultNamespaceDecls", "DefaultNamespaceDecl", "Setters", "Setter", "NamespaceDecls",
        "NamespaceDecl", "Imports", "FTOptionDecls", "SchemaImport", "SchemaPrefix", "NamespaceName",
        "DefaultElementNamespace", "AtHints", "ModuleImport", "BaseURIDecl", "OrderedDecls", "VarDecl", "VarType",
        "VarValue", "VarDefaultValue", "VarVariableDecl", "FunctionDecl", "ParamList", "ReturnType", "OptionDecl",
        "TypeDeclaration", "Param", "EnclosedExpr", "QueryBody", "UnaryExpr", "DirElemConstructor",
        "DirAttributeList", "DirAttributeValue", "DirElemContent", "CommonContent", "SequenceType",
        "EmptySequenceTest", "KindTest", "ItemTest", "FunctionTest", "AtomicType", "AtomicOrUnionType",
        "StringLiteral", "ElementContentChar", "AttributeValueChar", "QName", "BlockExpr", "BinaryTest",
    "EXPLICITLY" };
    public static final int EOF = -1;
    public static final int L_QuotAttrContentChar = 4;
    public static final int L_AposAttrContentChar = 5;
    public static final int L_ElementContentChar = 6;
    public static final int L_CDataSection = 7;
    public static final int L_PredefinedEntityRef = 8;
    public static final int L_CharRef = 9;
    public static final int ESCAPE_LBRACKET = 10;
    public static final int ESCAPE_RBRACKET = 11;
    public static final int ESCAPE_APOS = 12;
    public static final int ESCAPE_QUOT = 13;
    public static final int CDATA_START = 14;
    public static final int CDATA_END = 15;
    public static final int ANCESTOR = 16;
    public static final int ANCESTOR_OR_SELF = 17;
    public static final int AND = 18;
    public static final int AS = 19;
    public static final int ASCENDING = 20;
    public static final int AT = 21;
    public static final int ATTRIBUTE = 22;
    public static final int BASE_URI = 23;
    public static final int BOUNDARY_SPACE = 24;
    public static final int BY = 25;
    public static final int CASE = 26;
    public static final int CAST = 27;
    public static final int CASTABLE = 28;
    public static final int CHILD = 29;
    public static final int COLLATION = 30;
    public static final int COMMENT = 31;
    public static final int CONSTRUCTION = 32;
    public static final int COPY_NAMESPACES = 33;
    public static final int DECLARE = 34;
    public static final int DEFAULT = 35;
    public static final int DESCENDANT = 36;
    public static final int DESCENDANT_OR_SELF = 37;
    public static final int DESCENDING = 38;
    public static final int DIV = 39;
    public static final int DOCUMENT = 40;
    public static final int DOCUMENT_NODE = 41;
    public static final int ELEMENT = 42;
    public static final int ELSE = 43;
    public static final int EMPTY = 44;
    public static final int EMPTY_SEQUENCE = 45;
    public static final int ENCODING = 46;
    public static final int EQ = 47;
    public static final int EVERY = 48;
    public static final int EXCEPT = 49;
    public static final int EXTERNAL = 50;
    public static final int FOLLOWING = 51;
    public static final int FOLLOWING_SIBLING = 52;
    public static final int FOR = 53;
    public static final int FUNCTION = 54;
    public static final int GE = 55;
    public static final int GREATEST = 56;
    public static final int GT = 57;
    public static final int IDIV = 58;
    public static final int IF = 59;
    public static final int IMPORT = 60;
    public static final int IN = 61;
    public static final int INHERIT = 62;
    public static final int INSTANCE = 63;
    public static final int INTERSECT = 64;
    public static final int IS = 65;
    public static final int ITEM = 66;
    public static final int LAX = 67;
    public static final int LE = 68;
    public static final int LEAST = 69;
    public static final int LET = 70;
    public static final int LT = 71;
    public static final int MOD = 72;
    public static final int MODULE = 73;
    public static final int NAMESPACE = 74;
    public static final int NE = 75;
    public static final int NO_INHERIT = 76;
    public static final int NO_PRESERVE = 77;
    public static final int NODE = 78;
    public static final int OF = 79;
    public static final int OPTION = 80;
    public static final int OR = 81;
    public static final int ORDER = 82;
    public static final int ORDERED = 83;
    public static final int ORDERING = 84;
    public static final int PARENT = 85;
    public static final int PRECEDING = 86;
    public static final int PRECEDING_SIBLING = 87;
    public static final int PRESERVE = 88;
    public static final int PROCESSING_INSTRUCTION = 89;
    public static final int RETURN = 90;
    public static final int SATISFIES = 91;
    public static final int SCHEMA = 92;
    public static final int SCHEMA_ATTRIBUTE = 93;
    public static final int SCHEMA_ELEMENT = 94;
    public static final int SELF = 95;
    public static final int SOME = 96;
    public static final int STABLE = 97;
    public static final int STRICT = 98;
    public static final int STRIP = 99;
    public static final int TEXT = 100;
    public static final int THEN = 101;
    public static final int TO = 102;
    public static final int TREAT = 103;
    public static final int TYPESWITCH = 104;
    public static final int UNION = 105;
    public static final int UNORDERED = 106;
    public static final int VALIDATE = 107;
    public static final int VARIABLE = 108;
    public static final int VERSION = 109;
    public static final int WHERE = 110;
    public static final int XQUERY = 111;
    public static final int ALLOWING = 112;
    public static final int CATCH = 113;
    public static final int CONTEXT = 114;
    public static final int COUNT = 115;
    public static final int DECIMAL_FORMAT = 116;
    public static final int DECIMAL_SEPARATOR = 117;
    public static final int DIGIT = 118;
    public static final int END = 119;
    public static final int GROUP = 120;
    public static final int GROUPING_SEPARATOR = 121;
    public static final int INFINITY = 122;
    public static final int MINUS_SIGN = 123;
    public static final int NAMESPACE_NODE = 124;
    public static final int NAN = 125;
    public static final int NEXT = 126;
    public static final int ONLY = 127;
    public static final int PATTERN_SEPARATOR = 128;
    public static final int PERCENT = 129;
    public static final int PER_MILLE = 130;
    public static final int PREVIOUS = 131;
    public static final int SLIDING = 132;
    public static final int START = 133;
    public static final int SWITCH = 134;
    public static final int TRY = 135;
    public static final int TUMBLING = 136;
    public static final int TYPE = 137;
    public static final int WHEN = 138;
    public static final int WINDOW = 139;
    public static final int ZERO_DIGIT = 140;
    public static final int AFTER = 141;
    public static final int BEFORE = 142;
    public static final int COPY = 143;
    public static final int DELETE = 144;
    public static final int FIRST = 145;
    public static final int INSERT = 146;
    public static final int INTO = 147;
    public static final int LAST = 148;
    public static final int MODIFY = 149;
    public static final int NODES = 150;
    public static final int RENAME = 151;
    public static final int REPLACE = 152;
    public static final int REVALIDATION = 153;
    public static final int SKIP = 154;
    public static final int UPDATING = 155;
    public static final int VALUE = 156;
    public static final int WITH = 157;
    public static final int ALL = 158;
    public static final int ANY = 159;
    public static final int CONTAINS = 160;
    public static final int CONTENT = 161;
    public static final int DIACRITICS = 162;
    public static final int DIFFERENT = 163;
    public static final int DISTANCE = 164;
    public static final int ENTIRE = 165;
    public static final int EXACTLY = 166;
    public static final int FROM = 167;
    public static final int FT_OPTION = 168;
    public static final int FTAND = 169;
    public static final int FTNOT = 170;
    public static final int FTOR = 171;
    public static final int INSENSITIVE = 172;
    public static final int LANGUAGE = 173;
    public static final int LEVELS = 174;
    public static final int LOWERCASE = 175;
    public static final int MOST = 176;
    public static final int NO = 177;
    public static final int NOT = 178;
    public static final int OCCURS = 179;
    public static final int PARAGRAPH = 180;
    public static final int PARAGRAPHS = 181;
    public static final int PHRASE = 182;
    public static final int RELATIONSHIP = 183;
    public static final int SAME = 184;
    public static final int SCORE = 185;
    public static final int SENSITIVE = 186;
    public static final int SENTENCE = 187;
    public static final int SENTENCES = 188;
    public static final int STEMMING = 189;
    public static final int STOP = 190;
    public static final int THESAURUS = 191;
    public static final int TIMES = 192;
    public static final int UPPERCASE = 193;
    public static final int USING = 194;
    public static final int WEIGHT = 195;
    public static final int WILDCARDS = 196;
    public static final int WITHOUT = 197;
    public static final int WORD = 198;
    public static final int WORDS = 199;
    public static final int BREAK = 200;
    public static final int CONTINUE = 201;
    public static final int EXIT = 202;
    public static final int LOOP = 203;
    public static final int RETURNING = 204;
    public static final int WHILE = 205;
    public static final int CHECK = 206;
    public static final int COLLECTION = 207;
    public static final int CONSTRAINT = 208;
    public static final int FOREACH = 209;
    public static final int FOREIGN = 210;
    public static final int INDEX = 211;
    public static final int INTEGRITY = 212;
    public static final int KEY = 213;
    public static final int ON = 214;
    public static final int UNIQUE = 215;
    public static final int BINARY = 216;
    public static final int AMP_ER = 217;
    public static final int APOS_ER = 218;
    public static final int QUOT_ER = 219;
    public static final int CONCAT = 220;
    public static final int LPAREN = 221;
    public static final int RPAREN = 222;
    public static final int DOLLAR = 223;
    public static final int LBRACKET = 224;
    public static final int RBRACKET = 225;
    public static final int LSQUARE = 226;
    public static final int RSQUARE = 227;
    public static final int EQUAL = 228;
    public static final int BIND = 229;
    public static final int NOTEQUAL = 230;
    public static final int ANN_PERCENT = 231;
    public static final int HASH = 232;
    public static final int AMP = 233;
    public static final int COMMA = 234;
    public static final int QUESTION = 235;
    public static final int STAR = 236;
    public static final int PLUS = 237;
    public static final int MINUS = 238;
    public static final int SMALLER = 239;
    public static final int GREATER = 240;
    public static final int SMALLEREQ = 241;
    public static final int GREATEREQ = 242;
    public static final int SMALLER_SMALLER = 243;
    public static final int GREATER_GREATER = 244;
    public static final int SLASH = 245;
    public static final int SLASH_SLASH = 246;
    public static final int DOT = 247;
    public static final int DOT_DOT = 248;
    public static final int COLON = 249;
    public static final int COLON_COLON = 250;
    public static final int EMPTY_CLOSE_TAG = 251;
    public static final int CLOSE_TAG = 252;
    public static final int SEMICOLON = 253;
    public static final int VBAR = 254;
    public static final int PRAGMA_START = 255;
    public static final int PRAGMA_END = 256;
    public static final int XML_COMMENT_START = 257;
    public static final int XML_COMMENT_END = 258;
    public static final int PI_START = 259;
    public static final int PI_END = 260;
    public static final int ATTR_SIGN = 261;
    public static final int CHARREF_DEC = 262;
    public static final int CHARREF_HEX = 263;
    public static final int APOS = 264;
    public static final int QUOT = 265;
    public static final int NCNameStartChar = 266;
    public static final int NCNameChar = 267;
    public static final int L_NCName = 268;
    public static final int Letter = 269;
    public static final int HexLetter = 270;
    public static final int Digit = 271;
    public static final int Digits = 272;
    public static final int S = 273;
    public static final int SU = 274;
    public static final int L_Pragma = 275;
    public static final int L_DirCommentConstructor = 276;
    public static final int L_DirPIConstructor = 277;
    public static final int L_IntegerLiteral = 278;
    public static final int L_DecimalLiteral = 279;
    public static final int L_DoubleLiteral = 280;
    public static final int L_Comment = 281;
    public static final int L_AnyChar = 282;
    public static final int L_QuotStringLiteralChar = 283;
    public static final int L_AposStringLiteralChar = 284;
    public static final int LibraryModule = 285;
    public static final int MainModule = 286;
    public static final int VersionDecl = 287;
    public static final int VersionDeclEncoding = 288;
    public static final int VersionDeclVersion = 289;
    public static final int ModuleDecl = 290;
    public static final int Prolog = 291;
    public static final int DefaultNamespaceDecls = 292;
    public static final int DefaultNamespaceDecl = 293;
    public static final int Setters = 294;
    public static final int Setter = 295;
    public static final int NamespaceDecls = 296;
    public static final int NamespaceDecl = 297;
    public static final int Imports = 298;
    public static final int FTOptionDecls = 299;
    public static final int SchemaImport = 300;
    public static final int SchemaPrefix = 301;
    public static final int NamespaceName = 302;
    public static final int DefaultElementNamespace = 303;
    public static final int AtHints = 304;
    public static final int ModuleImport = 305;
    public static final int BaseURIDecl = 306;
    public static final int OrderedDecls = 307;
    public static final int VarDecl = 308;
    public static final int VarType = 309;
    public static final int VarValue = 310;
    public static final int VarDefaultValue = 311;
    public static final int VarVariableDecl = 312;
    public static final int FunctionDecl = 313;
    public static final int ParamList = 314;
    public static final int ReturnType = 315;
    public static final int OptionDecl = 316;
    public static final int TypeDeclaration = 317;
    public static final int Param = 318;
    public static final int EnclosedExpr = 319;
    public static final int QueryBody = 320;
    public static final int UnaryExpr = 321;
    public static final int DirElemConstructor = 322;
    public static final int DirAttributeList = 323;
    public static final int DirAttributeValue = 324;
    public static final int DirElemContent = 325;
    public static final int CommonContent = 326;
    public static final int SequenceType = 327;
    public static final int EmptySequenceTest = 328;
    public static final int KindTest = 329;
    public static final int ItemTest = 330;
    public static final int FunctionTest = 331;
    public static final int AtomicType = 332;
    public static final int AtomicOrUnionType = 333;
    public static final int StringLiteral = 334;
    public static final int ElementContentChar = 335;
    public static final int AttributeValueChar = 336;
    public static final int QName = 337;
    public static final int BlockExpr = 338;
    public static final int BinaryTest = 339;
    public static final int EXPLICITLY = 340;

    // delegates
    // delegators

    public XQueryParser(TokenStream input) {
        this(input, new RecognizerSharedState());
    }

    public XQueryParser(TokenStream input, RecognizerSharedState state) {
        super(input, state);

    }

    protected TreeAdaptor adaptor = new CommonTreeAdaptor();

    public void setTreeAdaptor(TreeAdaptor adaptor) {
        this.adaptor = adaptor;
    }

    public TreeAdaptor getTreeAdaptor() {
        return adaptor;
    }

    public String[] getTokenNames() {
        return XQueryParser.tokenNames;
    }

    public String getGrammarFileName() {
        return "XQueryParser.g";
    }

    // dummy list for warning elimination
    List<Stack<Object>> dummy1 = new ArrayList<Stack<Object>>();
    Map<Object, Object> dummy2 = new HashMap<Object, Object>();

    public static class p_Module_return extends ParserRuleReturnScope {
        XQDTCommonTree tree;

        public Object getTree() {
            return tree;
        }
    };

    // $ANTLR start "p_Module"
    // XQueryParser.g:129:1: p_Module : (vd= p_VersionDecl )? (lm= p_LibraryModule[$vd.tree] -> | mm= p_MainModule[$vd.tree] ->) EOF ;
    public final XQueryParser.p_Module_return p_Module() throws RecognitionException {
        XQueryParser.p_Module_return retval = new XQueryParser.p_Module_return();
        retval.start = input.LT(1);

        XQDTCommonTree root_0 = null;

        CommonToken EOF1 = null;
        XQueryParser.p_VersionDecl_return vd = null;

        XQueryParser.p_LibraryModule_return lm = null;

        XQueryParser.p_MainModule_return mm = null;

        XQDTCommonTree EOF1_tree = null;
        RewriteRuleTokenStream stream_EOF = new RewriteRuleTokenStream(adaptor, "token EOF");
        RewriteRuleSubtreeStream stream_p_VersionDecl = new RewriteRuleSubtreeStream(adaptor, "rule p_VersionDecl");
        RewriteRuleSubtreeStream stream_p_LibraryModule = new RewriteRuleSubtreeStream(adaptor, "rule p_LibraryModule");
        RewriteRuleSubtreeStream stream_p_MainModule = new RewriteRuleSubtreeStream(adaptor, "rule p_MainModule");
        try {
            // XQueryParser.g:130:9: ( (vd= p_VersionDecl )? (lm= p_LibraryModule[$vd.tree] -> | mm= p_MainModule[$vd.tree] ->) EOF )
            // XQueryParser.g:130:11: (vd= p_VersionDecl )? (lm= p_LibraryModule[$vd.tree] -> | mm= p_MainModule[$vd.tree] ->) EOF
            {
                // XQueryParser.g:130:13: (vd= p_VersionDecl )?
                int alt1 = 2;
                alt1 = dfa1.predict(input);
                switch (alt1) {
                case 1:
                    // XQueryParser.g:130:13: vd= p_VersionDecl
                {
                    pushFollow(FOLLOW_p_VersionDecl_in_p_Module508);
                    vd = p_VersionDecl();

                    state._fsp--;
                    if (state.failed) {
                        return retval;
                    }
                    if (state.backtracking == 0) {
                        stream_p_VersionDecl.add(vd.getTree());
                    }

                }
                    break;

                }

                // XQueryParser.g:131:13: (lm= p_LibraryModule[$vd.tree] -> | mm= p_MainModule[$vd.tree] ->)
                int alt2 = 2;
                alt2 = dfa2.predict(input);
                switch (alt2) {
                case 1:
                    // XQueryParser.g:132:15: lm= p_LibraryModule[$vd.tree]
                {
                    pushFollow(FOLLOW_p_LibraryModule_in_p_Module541);
                    lm = p_LibraryModule((vd != null ? ((XQDTCommonTree)vd.tree) : null));

                    state._fsp--;
                    if (state.failed) {
                        return retval;
                    }
                    if (state.backtracking == 0) {
                        stream_p_LibraryModule.add(lm.getTree());
                    }

                    // AST REWRITE
                    // elements:
                    // token labels:
                    // rule labels: retval
                    // token list labels:
                    // rule list labels:
                    // wildcard labels:
                    if (state.backtracking == 0) {
                        retval.tree = root_0;
                        RewriteRuleSubtreeStream stream_retval = new RewriteRuleSubtreeStream(adaptor, "rule retval",
                                retval != null ? retval.tree : null);

                        root_0 = (XQDTCommonTree)adaptor.nil();
                        // 132:44: ->
                        {
                            adaptor.addChild(root_0, (lm != null ? ((XQDTCommonTree)lm.tree) : null));

                        }

                        retval.tree = root_0;
                    }
                }
                    break;
                case 2:
                    // XQueryParser.g:133:15: mm= p_MainModule[$vd.tree]
                {
                    pushFollow(FOLLOW_p_MainModule_in_p_Module564);
                    mm = p_MainModule((vd != null ? ((XQDTCommonTree)vd.tree) : null));

                    state._fsp--;
                    if (state.failed) {
                        return retval;
                    }
                    if (state.backtracking == 0) {
                        stream_p_MainModule.add(mm.getTree());
                    }

                    // AST REWRITE
                    // elements:
                    // token labels:
                    // rule labels: retval
                    // token list labels:
                    // rule list labels:
                    // wildcard labels:
                    if (state.backtracking == 0) {
                        retval.tree = root_0;
                        RewriteRuleSubtreeStream stream_retval = new RewriteRuleSubtreeStream(adaptor, "rule retval",
                                retval != null ? retval.tree : null);

                        root_0 = (XQDTCommonTree)adaptor.nil();
                        // 133:44: ->
                        {
                            adaptor.addChild(root_0, (mm != null ? ((XQDTCommonTree)mm.tree) : null));

                        }

                        retval.tree = root_0;
                    }
                }
                    break;

                }

                EOF1 = (CommonToken)match(input, EOF, FOLLOW_EOF_in_p_Module588);
                if (state.failed) {
                    return retval;
                }
                if (state.backtracking == 0) {
                    stream_EOF.add(EOF1);
                }

            }

            retval.stop = input.LT(-1);

            if (state.backtracking == 0) {

                retval.tree = (XQDTCommonTree)adaptor.rulePostProcessing(root_0);
                adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        } catch (RecognitionException re) {
            reportError(re);
            recover(input, re);
            retval.tree = (XQDTCommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        } finally {
        }
        return retval;
    }

    // $ANTLR end "p_Module"

    public static class p_VersionDecl_return extends ParserRuleReturnScope {
        XQDTCommonTree tree;

        public Object getTree() {
            return tree;
        }
    };

    // $ANTLR start "p_VersionDecl"
    // XQueryParser.g:138:1: p_VersionDecl : k= XQUERY ( (k= ENCODING enc= p_StringLiteral ) | (k= VERSION ver= p_StringLiteral (k= ENCODING enc= p_StringLiteral )? ) ) SEMICOLON -> ^( VersionDecl ^( VersionDeclVersion ( $ver)? ) ^( VersionDeclEncoding ( $enc)? ) ) ;
    public final XQueryParser.p_VersionDecl_return p_VersionDecl() throws RecognitionException {
        XQueryParser.p_VersionDecl_return retval = new XQueryParser.p_VersionDecl_return();
        retval.start = input.LT(1);

        XQDTCommonTree root_0 = null;

        CommonToken k = null;
        CommonToken SEMICOLON2 = null;
        XQueryParser.p_StringLiteral_return enc = null;

        XQueryParser.p_StringLiteral_return ver = null;

        XQDTCommonTree k_tree = null;
        XQDTCommonTree SEMICOLON2_tree = null;
        RewriteRuleTokenStream stream_ENCODING = new RewriteRuleTokenStream(adaptor, "token ENCODING");
        RewriteRuleTokenStream stream_VERSION = new RewriteRuleTokenStream(adaptor, "token VERSION");
        RewriteRuleTokenStream stream_SEMICOLON = new RewriteRuleTokenStream(adaptor, "token SEMICOLON");
        RewriteRuleTokenStream stream_XQUERY = new RewriteRuleTokenStream(adaptor, "token XQUERY");
        RewriteRuleSubtreeStream stream_p_StringLiteral = new RewriteRuleSubtreeStream(adaptor, "rule p_StringLiteral");
        try {
            // XQueryParser.g:139:9: (k= XQUERY ( (k= ENCODING enc= p_StringLiteral ) | (k= VERSION ver= p_StringLiteral (k= ENCODING enc= p_StringLiteral )? ) ) SEMICOLON -> ^( VersionDecl ^( VersionDeclVersion ( $ver)? ) ^( VersionDeclEncoding ( $enc)? ) ) )
            // XQueryParser.g:139:11: k= XQUERY ( (k= ENCODING enc= p_StringLiteral ) | (k= VERSION ver= p_StringLiteral (k= ENCODING enc= p_StringLiteral )? ) ) SEMICOLON
            {
                k = (CommonToken)match(input, XQUERY, FOLLOW_XQUERY_in_p_VersionDecl616);
                if (state.failed) {
                    return retval;
                }
                if (state.backtracking == 0) {
                    stream_XQUERY.add(k);
                }

                if (state.backtracking == 0) {
                    ak(k);
                }
                // XQueryParser.g:139:30: ( (k= ENCODING enc= p_StringLiteral ) | (k= VERSION ver= p_StringLiteral (k= ENCODING enc= p_StringLiteral )? ) )
                int alt4 = 2;
                int LA4_0 = input.LA(1);

                if ((LA4_0 == ENCODING)) {
                    alt4 = 1;
                } else if ((LA4_0 == VERSION)) {
                    alt4 = 2;
                } else {
                    if (state.backtracking > 0) {
                        state.failed = true;
                        return retval;
                    }
                    NoViableAltException nvae = new NoViableAltException("", 4, 0, input);

                    throw nvae;
                }
                switch (alt4) {
                case 1:
                    // XQueryParser.g:139:31: (k= ENCODING enc= p_StringLiteral )
                {
                    // XQueryParser.g:139:31: (k= ENCODING enc= p_StringLiteral )
                    // XQueryParser.g:139:32: k= ENCODING enc= p_StringLiteral
                    {
                        k = (CommonToken)match(input, ENCODING, FOLLOW_ENCODING_in_p_VersionDecl624);
                        if (state.failed) {
                            return retval;
                        }
                        if (state.backtracking == 0) {
                            stream_ENCODING.add(k);
                        }

                        if (state.backtracking == 0) {
                            ak(k);
                        }
                        pushFollow(FOLLOW_p_StringLiteral_in_p_VersionDecl630);
                        enc = p_StringLiteral();

                        state._fsp--;
                        if (state.failed) {
                            return retval;
                        }
                        if (state.backtracking == 0) {
                            stream_p_StringLiteral.add(enc.getTree());
                        }

                    }

                }
                    break;
                case 2:
                    // XQueryParser.g:140:13: (k= VERSION ver= p_StringLiteral (k= ENCODING enc= p_StringLiteral )? )
                {
                    // XQueryParser.g:140:13: (k= VERSION ver= p_StringLiteral (k= ENCODING enc= p_StringLiteral )? )
                    // XQueryParser.g:140:14: k= VERSION ver= p_StringLiteral (k= ENCODING enc= p_StringLiteral )?
                    {
                        k = (CommonToken)match(input, VERSION, FOLLOW_VERSION_in_p_VersionDecl651);
                        if (state.failed) {
                            return retval;
                        }
                        if (state.backtracking == 0) {
                            stream_VERSION.add(k);
                        }

                        if (state.backtracking == 0) {
                            ak(k);
                        }
                        pushFollow(FOLLOW_p_StringLiteral_in_p_VersionDecl657);
                        ver = p_StringLiteral();

                        state._fsp--;
                        if (state.failed) {
                            return retval;
                        }
                        if (state.backtracking == 0) {
                            stream_p_StringLiteral.add(ver.getTree());
                        }
                        if (state.backtracking == 0) {
                            setLanguageVersion(((XQDTCommonTree)ver.getTree()).getChild(0).getText());
                        }
                        // XQueryParser.g:140:131: (k= ENCODING enc= p_StringLiteral )?
                        int alt3 = 2;
                        int LA3_0 = input.LA(1);

                        if ((LA3_0 == ENCODING)) {
                            alt3 = 1;
                        }
                        switch (alt3) {
                        case 1:
                            // XQueryParser.g:140:132: k= ENCODING enc= p_StringLiteral
                        {
                            k = (CommonToken)match(input, ENCODING, FOLLOW_ENCODING_in_p_VersionDecl664);
                            if (state.failed) {
                                return retval;
                            }
                            if (state.backtracking == 0) {
                                stream_ENCODING.add(k);
                            }

                            if (state.backtracking == 0) {
                                ak(k);
                            }
                            pushFollow(FOLLOW_p_StringLiteral_in_p_VersionDecl670);
                            enc = p_StringLiteral();

                            state._fsp--;
                            if (state.failed) {
                                return retval;
                            }
                            if (state.backtracking == 0) {
                                stream_p_StringLiteral.add(enc.getTree());
                            }

                        }
                            break;

                        }

                    }

                }
                    break;

                }

                SEMICOLON2 = (CommonToken)match(input, SEMICOLON, FOLLOW_SEMICOLON_in_p_VersionDecl676);
                if (state.failed) {
                    return retval;
                }
                if (state.backtracking == 0) {
                    stream_SEMICOLON.add(SEMICOLON2);
                }

                // AST REWRITE
                // elements: enc, ver
                // token labels:
                // rule labels: retval, ver, enc
                // token list labels:
                // rule list labels:
                // wildcard labels:
                if (state.backtracking == 0) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval = new RewriteRuleSubtreeStream(adaptor, "rule retval",
                            retval != null ? retval.tree : null);
                    RewriteRuleSubtreeStream stream_ver = new RewriteRuleSubtreeStream(adaptor, "rule ver",
                            ver != null ? ver.tree : null);
                    RewriteRuleSubtreeStream stream_enc = new RewriteRuleSubtreeStream(adaptor, "rule enc",
                            enc != null ? enc.tree : null);

                    root_0 = (XQDTCommonTree)adaptor.nil();
                    // 141:17: -> ^( VersionDecl ^( VersionDeclVersion ( $ver)? ) ^( VersionDeclEncoding ( $enc)? ) )
                    {
                        // XQueryParser.g:141:20: ^( VersionDecl ^( VersionDeclVersion ( $ver)? ) ^( VersionDeclEncoding ( $enc)? ) )
                        {
                            XQDTCommonTree root_1 = (XQDTCommonTree)adaptor.nil();
                            root_1 = (XQDTCommonTree)adaptor.becomeRoot(adaptor.create(VersionDecl, "VersionDecl"),
                                    root_1);

                            // XQueryParser.g:141:34: ^( VersionDeclVersion ( $ver)? )
                            {
                                XQDTCommonTree root_2 = (XQDTCommonTree)adaptor.nil();
                                root_2 = (XQDTCommonTree)adaptor.becomeRoot(
                                        adaptor.create(VersionDeclVersion, "VersionDeclVersion"), root_2);

                                // XQueryParser.g:141:55: ( $ver)?
                                if (stream_ver.hasNext()) {
                                    adaptor.addChild(root_2, stream_ver.nextTree());

                                }
                                stream_ver.reset();

                                adaptor.addChild(root_1, root_2);
                            }
                            // XQueryParser.g:141:62: ^( VersionDeclEncoding ( $enc)? )
                            {
                                XQDTCommonTree root_2 = (XQDTCommonTree)adaptor.nil();
                                root_2 = (XQDTCommonTree)adaptor.becomeRoot(
                                        adaptor.create(VersionDeclEncoding, "VersionDeclEncoding"), root_2);

                                // XQueryParser.g:141:84: ( $enc)?
                                if (stream_enc.hasNext()) {
                                    adaptor.addChild(root_2, stream_enc.nextTree());

                                }
                                stream_enc.reset();

                                adaptor.addChild(root_1, root_2);
                            }

                            adaptor.addChild(root_0, root_1);
                        }

                    }

                    retval.tree = root_0;
                }
            }

            retval.stop = input.LT(-1);

            if (state.backtracking == 0) {

                retval.tree = (XQDTCommonTree)adaptor.rulePostProcessing(root_0);
                adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        } catch (RecognitionException re) {
            reportError(re);
            recover(input, re);
            retval.tree = (XQDTCommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        } finally {
        }
        return retval;
    }

    // $ANTLR end "p_VersionDecl"

    public static class p_MainModule_return extends ParserRuleReturnScope {
        XQDTCommonTree tree;

        public Object getTree() {
            return tree;
        }
    };

    // $ANTLR start "p_MainModule"
    // XQueryParser.g:145:1: p_MainModule[CommonTree vd] : pm_Prolog pm_QueryBody -> ^( MainModule pm_Prolog ) ;
    public final XQueryParser.p_MainModule_return p_MainModule(CommonTree vd) throws RecognitionException {
        XQueryParser.p_MainModule_return retval = new XQueryParser.p_MainModule_return();
        retval.start = input.LT(1);

        XQDTCommonTree root_0 = null;

        XQueryParser.pm_Prolog_return pm_Prolog3 = null;

        XQueryParser.pm_QueryBody_return pm_QueryBody4 = null;

        RewriteRuleSubtreeStream stream_pm_QueryBody = new RewriteRuleSubtreeStream(adaptor, "rule pm_QueryBody");
        RewriteRuleSubtreeStream stream_pm_Prolog = new RewriteRuleSubtreeStream(adaptor, "rule pm_Prolog");
        try {
            // XQueryParser.g:146:9: ( pm_Prolog pm_QueryBody -> ^( MainModule pm_Prolog ) )
            // XQueryParser.g:146:11: pm_Prolog pm_QueryBody
            {
                pushFollow(FOLLOW_pm_Prolog_in_p_MainModule742);
                pm_Prolog3 = pm_Prolog();

                state._fsp--;
                if (state.failed) {
                    return retval;
                }
                if (state.backtracking == 0) {
                    stream_pm_Prolog.add(pm_Prolog3.getTree());
                }
                pushFollow(FOLLOW_pm_QueryBody_in_p_MainModule744);
                pm_QueryBody4 = pm_QueryBody();

                state._fsp--;
                if (state.failed) {
                    return retval;
                }
                if (state.backtracking == 0) {
                    stream_pm_QueryBody.add(pm_QueryBody4.getTree());
                }

                // AST REWRITE
                // elements: pm_Prolog
                // token labels:
                // rule labels: retval
                // token list labels:
                // rule list labels:
                // wildcard labels:
                if (state.backtracking == 0) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval = new RewriteRuleSubtreeStream(adaptor, "rule retval",
                            retval != null ? retval.tree : null);

                    root_0 = (XQDTCommonTree)adaptor.nil();
                    // 147:17: -> ^( MainModule pm_Prolog )
                    {
                        // XQueryParser.g:147:20: ^( MainModule pm_Prolog )
                        {
                            XQDTCommonTree root_1 = (XQDTCommonTree)adaptor.nil();
                            root_1 = (XQDTCommonTree)adaptor.becomeRoot(adaptor.create(MainModule, "MainModule"),
                                    root_1);

                            adaptor.addChild(root_1, vd);
                            adaptor.addChild(root_1, stream_pm_Prolog.nextTree());

                            adaptor.addChild(root_0, root_1);
                        }

                    }

                    retval.tree = root_0;
                }
            }

            retval.stop = input.LT(-1);

            if (state.backtracking == 0) {

                retval.tree = (XQDTCommonTree)adaptor.rulePostProcessing(root_0);
                adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        } catch (RecognitionException re) {
            reportError(re);
            recover(input, re);
            retval.tree = (XQDTCommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        } finally {
        }
        return retval;
    }

    // $ANTLR end "p_MainModule"

    public static class p_LibraryModule_return extends ParserRuleReturnScope {
        XQDTCommonTree tree;

        public Object getTree() {
            return tree;
        }
    };

    // $ANTLR start "p_LibraryModule"
    // XQueryParser.g:151:1: p_LibraryModule[CommonTree vd] : p_ModuleDecl pm_Prolog -> ^( LibraryModule p_ModuleDecl pm_Prolog ) ;
    public final XQueryParser.p_LibraryModule_return p_LibraryModule(CommonTree vd) throws RecognitionException {
        XQueryParser.p_LibraryModule_return retval = new XQueryParser.p_LibraryModule_return();
        retval.start = input.LT(1);

        XQDTCommonTree root_0 = null;

        XQueryParser.p_ModuleDecl_return p_ModuleDecl5 = null;

        XQueryParser.pm_Prolog_return pm_Prolog6 = null;

        RewriteRuleSubtreeStream stream_pm_Prolog = new RewriteRuleSubtreeStream(adaptor, "rule pm_Prolog");
        RewriteRuleSubtreeStream stream_p_ModuleDecl = new RewriteRuleSubtreeStream(adaptor, "rule p_ModuleDecl");
        try {
            // XQueryParser.g:152:9: ( p_ModuleDecl pm_Prolog -> ^( LibraryModule p_ModuleDecl pm_Prolog ) )
            // XQueryParser.g:152:11: p_ModuleDecl pm_Prolog
            {
                pushFollow(FOLLOW_p_ModuleDecl_in_p_LibraryModule800);
                p_ModuleDecl5 = p_ModuleDecl();

                state._fsp--;
                if (state.failed) {
                    return retval;
                }
                if (state.backtracking == 0) {
                    stream_p_ModuleDecl.add(p_ModuleDecl5.getTree());
                }
                pushFollow(FOLLOW_pm_Prolog_in_p_LibraryModule802);
                pm_Prolog6 = pm_Prolog();

                state._fsp--;
                if (state.failed) {
                    return retval;
                }
                if (state.backtracking == 0) {
                    stream_pm_Prolog.add(pm_Prolog6.getTree());
                }

                // AST REWRITE
                // elements: pm_Prolog, p_ModuleDecl
                // token labels:
                // rule labels: retval
                // token list labels:
                // rule list labels:
                // wildcard labels:
                if (state.backtracking == 0) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval = new RewriteRuleSubtreeStream(adaptor, "rule retval",
                            retval != null ? retval.tree : null);

                    root_0 = (XQDTCommonTree)adaptor.nil();
                    // 153:17: -> ^( LibraryModule p_ModuleDecl pm_Prolog )
                    {
                        // XQueryParser.g:153:20: ^( LibraryModule p_ModuleDecl pm_Prolog )
                        {
                            XQDTCommonTree root_1 = (XQDTCommonTree)adaptor.nil();
                            root_1 = (XQDTCommonTree)adaptor.becomeRoot(adaptor.create(LibraryModule, "LibraryModule"),
                                    root_1);

                            adaptor.addChild(root_1, vd);
                            adaptor.addChild(root_1, stream_p_ModuleDecl.nextTree());
                            adaptor.addChild(root_1, stream_pm_Prolog.nextTree());

                            adaptor.addChild(root_0, root_1);
                        }

                    }

                    retval.tree = root_0;
                }
            }

            retval.stop = input.LT(-1);

            if (state.backtracking == 0) {

                retval.tree = (XQDTCommonTree)adaptor.rulePostProcessing(root_0);
                adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        } catch (RecognitionException re) {
            reportError(re);
            recover(input, re);
            retval.tree = (XQDTCommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        } finally {
        }
        return retval;
    }

    // $ANTLR end "p_LibraryModule"

    public static class p_ModuleDecl_return extends ParserRuleReturnScope {
        XQDTCommonTree tree;

        public Object getTree() {
            return tree;
        }
    };

    // $ANTLR start "p_ModuleDecl"
    // XQueryParser.g:157:1: p_ModuleDecl : k+= MODULE k+= NAMESPACE p_NCName EQUAL p_StringLiteral SEMICOLON -> ^( ModuleDecl p_NCName p_StringLiteral ) ;
    public final XQueryParser.p_ModuleDecl_return p_ModuleDecl() throws RecognitionException {
        XQueryParser.p_ModuleDecl_return retval = new XQueryParser.p_ModuleDecl_return();
        retval.start = input.LT(1);

        XQDTCommonTree root_0 = null;

        CommonToken EQUAL8 = null;
        CommonToken SEMICOLON10 = null;
        CommonToken k = null;
        List<CommonToken> list_k = null;
        XQueryParser.p_NCName_return p_NCName7 = null;

        XQueryParser.p_StringLiteral_return p_StringLiteral9 = null;

        XQDTCommonTree EQUAL8_tree = null;
        XQDTCommonTree SEMICOLON10_tree = null;
        XQDTCommonTree k_tree = null;
        RewriteRuleTokenStream stream_SEMICOLON = new RewriteRuleTokenStream(adaptor, "token SEMICOLON");
        RewriteRuleTokenStream stream_MODULE = new RewriteRuleTokenStream(adaptor, "token MODULE");
        RewriteRuleTokenStream stream_NAMESPACE = new RewriteRuleTokenStream(adaptor, "token NAMESPACE");
        RewriteRuleTokenStream stream_EQUAL = new RewriteRuleTokenStream(adaptor, "token EQUAL");
        RewriteRuleSubtreeStream stream_p_NCName = new RewriteRuleSubtreeStream(adaptor, "rule p_NCName");
        RewriteRuleSubtreeStream stream_p_StringLiteral = new RewriteRuleSubtreeStream(adaptor, "rule p_StringLiteral");
        try {
            // XQueryParser.g:158:9: (k+= MODULE k+= NAMESPACE p_NCName EQUAL p_StringLiteral SEMICOLON -> ^( ModuleDecl p_NCName p_StringLiteral ) )
            // XQueryParser.g:158:11: k+= MODULE k+= NAMESPACE p_NCName EQUAL p_StringLiteral SEMICOLON
            {
                k = (CommonToken)match(input, MODULE, FOLLOW_MODULE_in_p_ModuleDecl858);
                if (state.failed) {
                    return retval;
                }
                if (state.backtracking == 0) {
                    stream_MODULE.add(k);
                }

                if (list_k == null) {
                    list_k = new ArrayList<CommonToken>();
                }
                list_k.add(k);

                k = (CommonToken)match(input, NAMESPACE, FOLLOW_NAMESPACE_in_p_ModuleDecl862);
                if (state.failed) {
                    return retval;
                }
                if (state.backtracking == 0) {
                    stream_NAMESPACE.add(k);
                }

                list_k.add(k);

                if (state.backtracking == 0) {
                    ak(list_k);
                }
                pushFollow(FOLLOW_p_NCName_in_p_ModuleDecl866);
                p_NCName7 = p_NCName();

                state._fsp--;
                if (state.failed) {
                    return retval;
                }
                if (state.backtracking == 0) {
                    stream_p_NCName.add(p_NCName7.getTree());
                }
                EQUAL8 = (CommonToken)match(input, EQUAL, FOLLOW_EQUAL_in_p_ModuleDecl868);
                if (state.failed) {
                    return retval;
                }
                if (state.backtracking == 0) {
                    stream_EQUAL.add(EQUAL8);
                }

                pushFollow(FOLLOW_p_StringLiteral_in_p_ModuleDecl870);
                p_StringLiteral9 = p_StringLiteral();

                state._fsp--;
                if (state.failed) {
                    return retval;
                }
                if (state.backtracking == 0) {
                    stream_p_StringLiteral.add(p_StringLiteral9.getTree());
                }
                SEMICOLON10 = (CommonToken)match(input, SEMICOLON, FOLLOW_SEMICOLON_in_p_ModuleDecl872);
                if (state.failed) {
                    return retval;
                }
                if (state.backtracking == 0) {
                    stream_SEMICOLON.add(SEMICOLON10);
                }

                // AST REWRITE
                // elements: p_StringLiteral, p_NCName
                // token labels:
                // rule labels: retval
                // token list labels:
                // rule list labels:
                // wildcard labels:
                if (state.backtracking == 0) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval = new RewriteRuleSubtreeStream(adaptor, "rule retval",
                            retval != null ? retval.tree : null);

                    root_0 = (XQDTCommonTree)adaptor.nil();
                    // 159:17: -> ^( ModuleDecl p_NCName p_StringLiteral )
                    {
                        // XQueryParser.g:159:21: ^( ModuleDecl p_NCName p_StringLiteral )
                        {
                            XQDTCommonTree root_1 = (XQDTCommonTree)adaptor.nil();
                            root_1 = (XQDTCommonTree)adaptor.becomeRoot(adaptor.create(ModuleDecl, "ModuleDecl"),
                                    root_1);

                            adaptor.addChild(root_1, stream_p_NCName.nextTree());
                            adaptor.addChild(root_1, stream_p_StringLiteral.nextTree());

                            adaptor.addChild(root_0, root_1);
                        }

                    }

                    retval.tree = root_0;
                }
            }

            retval.stop = input.LT(-1);

            if (state.backtracking == 0) {

                retval.tree = (XQDTCommonTree)adaptor.rulePostProcessing(root_0);
                adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        } catch (RecognitionException re) {
            reportError(re);
            recover(input, re);
            retval.tree = (XQDTCommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        } finally {
        }
        return retval;
    }

    // $ANTLR end "p_ModuleDecl"

    public static class pm_Prolog_return extends ParserRuleReturnScope {
        XQDTCommonTree tree;

        public Object getTree() {
            return tree;
        }
    };

    // $ANTLR start "pm_Prolog"
    // XQueryParser.g:165:1: pm_Prolog : ( (dnd+= pm_DefaultNamespaceDecl | s+= p_Setter | nd+= pm_NamespaceDecl | i+= p_Import | fto+= pm_FTOptionDecl ) )* (od+= pg_OrderedDecl )* -> ^( Prolog ^( DefaultNamespaceDecls ( $dnd)* ) ^( Setters ( $s)* ) ^( NamespaceDecls ( $nd)* ) ^( Imports ( $i)* ) ^( FTOptionDecls ( $fto)* ) ^( OrderedDecls ( $od)* ) ) ;
    public final XQueryParser.pm_Prolog_return pm_Prolog() throws RecognitionException {
        XQueryParser.pm_Prolog_return retval = new XQueryParser.pm_Prolog_return();
        retval.start = input.LT(1);

        XQDTCommonTree root_0 = null;

        List<Object> list_dnd = null;
        List<Object> list_s = null;
        List<Object> list_nd = null;
        List<Object> list_i = null;
        List<Object> list_fto = null;
        List<Object> list_od = null;
        RuleReturnScope dnd = null;
        RuleReturnScope s = null;
        RuleReturnScope nd = null;
        RuleReturnScope i = null;
        RuleReturnScope fto = null;
        RuleReturnScope od = null;
        RewriteRuleSubtreeStream stream_pm_NamespaceDecl = new RewriteRuleSubtreeStream(adaptor,
                "rule pm_NamespaceDecl");
        RewriteRuleSubtreeStream stream_p_Import = new RewriteRuleSubtreeStream(adaptor, "rule p_Import");
        RewriteRuleSubtreeStream stream_p_Setter = new RewriteRuleSubtreeStream(adaptor, "rule p_Setter");
        RewriteRuleSubtreeStream stream_pm_DefaultNamespaceDecl = new RewriteRuleSubtreeStream(adaptor,
                "rule pm_DefaultNamespaceDecl");
        RewriteRuleSubtreeStream stream_pg_OrderedDecl = new RewriteRuleSubtreeStream(adaptor, "rule pg_OrderedDecl");
        RewriteRuleSubtreeStream stream_pm_FTOptionDecl = new RewriteRuleSubtreeStream(adaptor, "rule pm_FTOptionDecl");
        try {
            // XQueryParser.g:166:9: ( ( (dnd+= pm_DefaultNamespaceDecl | s+= p_Setter | nd+= pm_NamespaceDecl | i+= p_Import | fto+= pm_FTOptionDecl ) )* (od+= pg_OrderedDecl )* -> ^( Prolog ^( DefaultNamespaceDecls ( $dnd)* ) ^( Setters ( $s)* ) ^( NamespaceDecls ( $nd)* ) ^( Imports ( $i)* ) ^( FTOptionDecls ( $fto)* ) ^( OrderedDecls ( $od)* ) ) )
            // XQueryParser.g:166:11: ( (dnd+= pm_DefaultNamespaceDecl | s+= p_Setter | nd+= pm_NamespaceDecl | i+= p_Import | fto+= pm_FTOptionDecl ) )* (od+= pg_OrderedDecl )*
            {
                // XQueryParser.g:166:11: ( (dnd+= pm_DefaultNamespaceDecl | s+= p_Setter | nd+= pm_NamespaceDecl | i+= p_Import | fto+= pm_FTOptionDecl ) )*
                loop6: do {
                    int alt6 = 2;
                    alt6 = dfa6.predict(input);
                    switch (alt6) {
                    case 1:
                        // XQueryParser.g:166:12: (dnd+= pm_DefaultNamespaceDecl | s+= p_Setter | nd+= pm_NamespaceDecl | i+= p_Import | fto+= pm_FTOptionDecl )
                    {
                        // XQueryParser.g:166:12: (dnd+= pm_DefaultNamespaceDecl | s+= p_Setter | nd+= pm_NamespaceDecl | i+= p_Import | fto+= pm_FTOptionDecl )
                        int alt5 = 5;
                        int LA5_0 = input.LA(1);

                        if ((LA5_0 == DECLARE)) {
                            int LA5_1 = input.LA(2);

                            if ((LA5_1 == REVALIDATION) && ((lc(XQU)))) {
                                alt5 = 2;
                            } else if ((LA5_1 == FT_OPTION)) {
                                alt5 = 5;
                            } else if ((LA5_1 == DEFAULT)) {
                                int LA5_5 = input.LA(3);

                                if ((LA5_5 == ELEMENT || LA5_5 == FUNCTION)) {
                                    alt5 = 1;
                                } else if ((LA5_5 == COLLATION || LA5_5 == ORDER || LA5_5 == DECIMAL_FORMAT)) {
                                    alt5 = 2;
                                } else {
                                    if (state.backtracking > 0) {
                                        state.failed = true;
                                        return retval;
                                    }
                                    NoViableAltException nvae = new NoViableAltException("", 5, 5, input);

                                    throw nvae;
                                }
                            } else if (((LA5_1 >= BASE_URI && LA5_1 <= BOUNDARY_SPACE)
                                    || (LA5_1 >= CONSTRUCTION && LA5_1 <= COPY_NAMESPACES) || LA5_1 == ORDERING || LA5_1 == DECIMAL_FORMAT)) {
                                alt5 = 2;
                            } else if ((LA5_1 == NAMESPACE)) {
                                alt5 = 3;
                            } else {
                                if (state.backtracking > 0) {
                                    state.failed = true;
                                    return retval;
                                }
                                NoViableAltException nvae = new NoViableAltException("", 5, 1, input);

                                throw nvae;
                            }
                        } else if ((LA5_0 == IMPORT)) {
                            alt5 = 4;
                        } else {
                            if (state.backtracking > 0) {
                                state.failed = true;
                                return retval;
                            }
                            NoViableAltException nvae = new NoViableAltException("", 5, 0, input);

                            throw nvae;
                        }
                        switch (alt5) {
                        case 1:
                            // XQueryParser.g:166:13: dnd+= pm_DefaultNamespaceDecl
                        {
                            pushFollow(FOLLOW_pm_DefaultNamespaceDecl_in_pm_Prolog931);
                            dnd = pm_DefaultNamespaceDecl();

                            state._fsp--;
                            if (state.failed) {
                                return retval;
                            }
                            if (state.backtracking == 0) {
                                stream_pm_DefaultNamespaceDecl.add(dnd.getTree());
                            }
                            if (list_dnd == null) {
                                list_dnd = new ArrayList<Object>();
                            }
                            list_dnd.add(dnd.getTree());

                        }
                        break;
                        case 2:
                            // XQueryParser.g:166:44: s+= p_Setter
                        {
                            pushFollow(FOLLOW_p_Setter_in_pm_Prolog937);
                            s = p_Setter();

                            state._fsp--;
                            if (state.failed) {
                                return retval;
                            }
                            if (state.backtracking == 0) {
                                stream_p_Setter.add(s.getTree());
                            }
                            if (list_s == null) {
                                list_s = new ArrayList<Object>();
                            }
                            list_s.add(s.getTree());

                        }
                        break;
                        case 3:
                            // XQueryParser.g:166:58: nd+= pm_NamespaceDecl
                        {
                            pushFollow(FOLLOW_pm_NamespaceDecl_in_pm_Prolog943);
                            nd = pm_NamespaceDecl();

                            state._fsp--;
                            if (state.failed) {
                                return retval;
                            }
                            if (state.backtracking == 0) {
                                stream_pm_NamespaceDecl.add(nd.getTree());
                            }
                            if (list_nd == null) {
                                list_nd = new ArrayList<Object>();
                            }
                            list_nd.add(nd.getTree());

                        }
                        break;
                        case 4:
                            // XQueryParser.g:166:81: i+= p_Import
                        {
                            pushFollow(FOLLOW_p_Import_in_pm_Prolog949);
                            i = p_Import();

                            state._fsp--;
                            if (state.failed) {
                                return retval;
                            }
                            if (state.backtracking == 0) {
                                stream_p_Import.add(i.getTree());
                            }
                            if (list_i == null) {
                                list_i = new ArrayList<Object>();
                            }
                            list_i.add(i.getTree());

                        }
                        break;
                        case 5:
                            // XQueryParser.g:166:95: fto+= pm_FTOptionDecl
                        {
                            pushFollow(FOLLOW_pm_FTOptionDecl_in_pm_Prolog955);
                            fto = pm_FTOptionDecl();

                            state._fsp--;
                            if (state.failed) {
                                return retval;
                            }
                            if (state.backtracking == 0) {
                                stream_pm_FTOptionDecl.add(fto.getTree());
                            }
                            if (list_fto == null) {
                                list_fto = new ArrayList<Object>();
                            }
                            list_fto.add(fto.getTree());

                        }
                        break;

                        }

                    }
                    break;

                    default:
                        break loop6;
                    }
                } while (true);

            // XQueryParser.g:166:121: (od+= pg_OrderedDecl )*
            loop7: do {
                int alt7 = 2;
                int LA7_0 = input.LA(1);

                if ((LA7_0 == DECLARE)) {
                    int LA7_3 = input.LA(2);

                    if ((LA7_3 == FUNCTION || LA7_3 == OPTION || LA7_3 == VARIABLE || LA7_3 == CONTEXT
                            || LA7_3 == UPDATING || LA7_3 == COLLECTION || (LA7_3 >= INDEX && LA7_3 <= INTEGRITY) || LA7_3 == ANN_PERCENT)) {
                        alt7 = 1;
                    }

                }

                switch (alt7) {
                case 1:
                    // XQueryParser.g:166:121: od+= pg_OrderedDecl
                {
                    pushFollow(FOLLOW_pg_OrderedDecl_in_pm_Prolog962);
                    od = pg_OrderedDecl();

                    state._fsp--;
                    if (state.failed) {
                        return retval;
                    }
                    if (state.backtracking == 0) {
                        stream_pg_OrderedDecl.add(od.getTree());
                    }
                    if (list_od == null) {
                        list_od = new ArrayList<Object>();
                    }
                    list_od.add(od.getTree());

                }
                break;

                default:
                    break loop7;
                }
            } while (true);

            // AST REWRITE
            // elements: fto, nd, i, dnd, od, s
            // token labels:
            // rule labels: retval
            // token list labels:
            // rule list labels: od, s, fto, nd, dnd, i
            // wildcard labels:
            if (state.backtracking == 0) {
                retval.tree = root_0;
                RewriteRuleSubtreeStream stream_retval = new RewriteRuleSubtreeStream(adaptor, "rule retval",
                        retval != null ? retval.tree : null);
                RewriteRuleSubtreeStream stream_od = new RewriteRuleSubtreeStream(adaptor, "token od", list_od);
                RewriteRuleSubtreeStream stream_s = new RewriteRuleSubtreeStream(adaptor, "token s", list_s);
                RewriteRuleSubtreeStream stream_fto = new RewriteRuleSubtreeStream(adaptor, "token fto", list_fto);
                RewriteRuleSubtreeStream stream_nd = new RewriteRuleSubtreeStream(adaptor, "token nd", list_nd);
                RewriteRuleSubtreeStream stream_dnd = new RewriteRuleSubtreeStream(adaptor, "token dnd", list_dnd);
                RewriteRuleSubtreeStream stream_i = new RewriteRuleSubtreeStream(adaptor, "token i", list_i);
                root_0 = (XQDTCommonTree)adaptor.nil();
                // 167:17: -> ^( Prolog ^( DefaultNamespaceDecls ( $dnd)* ) ^( Setters ( $s)* ) ^( NamespaceDecls ( $nd)* ) ^( Imports ( $i)* ) ^( FTOptionDecls ( $fto)* ) ^( OrderedDecls ( $od)* ) )
                {
                    // XQueryParser.g:167:21: ^( Prolog ^( DefaultNamespaceDecls ( $dnd)* ) ^( Setters ( $s)* ) ^( NamespaceDecls ( $nd)* ) ^( Imports ( $i)* ) ^( FTOptionDecls ( $fto)* ) ^( OrderedDecls ( $od)* ) )
                    {
                        XQDTCommonTree root_1 = (XQDTCommonTree)adaptor.nil();
                        root_1 = (XQDTCommonTree)adaptor.becomeRoot(adaptor.create(Prolog, "Prolog"), root_1);

                        // XQueryParser.g:168:33: ^( DefaultNamespaceDecls ( $dnd)* )
                        {
                            XQDTCommonTree root_2 = (XQDTCommonTree)adaptor.nil();
                            root_2 = (XQDTCommonTree)adaptor.becomeRoot(
                                    adaptor.create(DefaultNamespaceDecls, "DefaultNamespaceDecls"), root_2);

                            // XQueryParser.g:168:57: ( $dnd)*
                            while (stream_dnd.hasNext()) {
                                adaptor.addChild(root_2, stream_dnd.nextTree());

                            }
                            stream_dnd.reset();

                            adaptor.addChild(root_1, root_2);
                        }
                        // XQueryParser.g:169:33: ^( Setters ( $s)* )
                        {
                            XQDTCommonTree root_2 = (XQDTCommonTree)adaptor.nil();
                            root_2 = (XQDTCommonTree)adaptor.becomeRoot(adaptor.create(Setters, "Setters"), root_2);

                            // XQueryParser.g:169:43: ( $s)*
                            while (stream_s.hasNext()) {
                                adaptor.addChild(root_2, stream_s.nextTree());

                            }
                            stream_s.reset();

                            adaptor.addChild(root_1, root_2);
                        }
                        // XQueryParser.g:170:33: ^( NamespaceDecls ( $nd)* )
                        {
                            XQDTCommonTree root_2 = (XQDTCommonTree)adaptor.nil();
                            root_2 = (XQDTCommonTree)adaptor.becomeRoot(
                                    adaptor.create(NamespaceDecls, "NamespaceDecls"), root_2);

                            // XQueryParser.g:170:50: ( $nd)*
                            while (stream_nd.hasNext()) {
                                adaptor.addChild(root_2, stream_nd.nextTree());

                            }
                            stream_nd.reset();

                            adaptor.addChild(root_1, root_2);
                        }
                        // XQueryParser.g:171:33: ^( Imports ( $i)* )
                        {
                            XQDTCommonTree root_2 = (XQDTCommonTree)adaptor.nil();
                            root_2 = (XQDTCommonTree)adaptor.becomeRoot(adaptor.create(Imports, "Imports"), root_2);

                            // XQueryParser.g:171:43: ( $i)*
                            while (stream_i.hasNext()) {
                                adaptor.addChild(root_2, stream_i.nextTree());

                            }
                            stream_i.reset();

                            adaptor.addChild(root_1, root_2);
                        }
                        // XQueryParser.g:172:33: ^( FTOptionDecls ( $fto)* )
                        {
                            XQDTCommonTree root_2 = (XQDTCommonTree)adaptor.nil();
                            root_2 = (XQDTCommonTree)adaptor.becomeRoot(
                                    adaptor.create(FTOptionDecls, "FTOptionDecls"), root_2);

                            // XQueryParser.g:172:49: ( $fto)*
                            while (stream_fto.hasNext()) {
                                adaptor.addChild(root_2, stream_fto.nextTree());

                            }
                            stream_fto.reset();

                            adaptor.addChild(root_1, root_2);
                        }
                        // XQueryParser.g:173:33: ^( OrderedDecls ( $od)* )
                        {
                            XQDTCommonTree root_2 = (XQDTCommonTree)adaptor.nil();
                            root_2 = (XQDTCommonTree)adaptor.becomeRoot(
                                    adaptor.create(OrderedDecls, "OrderedDecls"), root_2);

                            // XQueryParser.g:173:48: ( $od)*
                            while (stream_od.hasNext()) {
                                adaptor.addChild(root_2, stream_od.nextTree());

                            }
                            stream_od.reset();

                            adaptor.addChild(root_1, root_2);
                        }

                        adaptor.addChild(root_0, root_1);
                    }

                }

                retval.tree = root_0;
            }
            }

            retval.stop = input.LT(-1);

            if (state.backtracking == 0) {

                retval.tree = (XQDTCommonTree)adaptor.rulePostProcessing(root_0);
                adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        } catch (RecognitionException re) {
            reportError(re);
            recover(input, re);
            retval.tree = (XQDTCommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        } finally {
        }
        return retval;
    }

    // $ANTLR end "pm_Prolog"

    public static class pg_OrderedDecl_return extends ParserRuleReturnScope {
        XQDTCommonTree tree;

        public Object getTree() {
            return tree;
        }
    };

    // $ANTLR start "pg_OrderedDecl"
    // XQueryParser.g:181:1: pg_OrderedDecl : ( pm_ContextItemDecl | pm_AnnotatedDecl | pm_OptionDecl );
    public final XQueryParser.pg_OrderedDecl_return pg_OrderedDecl() throws RecognitionException {
        XQueryParser.pg_OrderedDecl_return retval = new XQueryParser.pg_OrderedDecl_return();
        retval.start = input.LT(1);

        XQDTCommonTree root_0 = null;

        XQueryParser.pm_ContextItemDecl_return pm_ContextItemDecl11 = null;

        XQueryParser.pm_AnnotatedDecl_return pm_AnnotatedDecl12 = null;

        XQueryParser.pm_OptionDecl_return pm_OptionDecl13 = null;

        try {
            // XQueryParser.g:182:9: ( pm_ContextItemDecl | pm_AnnotatedDecl | pm_OptionDecl )
            int alt8 = 3;
            int LA8_0 = input.LA(1);

            if ((LA8_0 == DECLARE)) {
                switch (input.LA(2)) {
                case CONTEXT: {
                    alt8 = 1;
                }
                    break;
                case FUNCTION:
                case VARIABLE:
                case UPDATING:
                case COLLECTION:
                case INDEX:
                case INTEGRITY:
                case ANN_PERCENT: {
                    alt8 = 2;
                }
                    break;
                case OPTION: {
                    alt8 = 3;
                }
                    break;
                default:
                    if (state.backtracking > 0) {
                        state.failed = true;
                        return retval;
                    }
                    NoViableAltException nvae = new NoViableAltException("", 8, 1, input);

                    throw nvae;
                }

            } else {
                if (state.backtracking > 0) {
                    state.failed = true;
                    return retval;
                }
                NoViableAltException nvae = new NoViableAltException("", 8, 0, input);

                throw nvae;
            }
            switch (alt8) {
            case 1:
                // XQueryParser.g:182:11: pm_ContextItemDecl
            {
                root_0 = (XQDTCommonTree)adaptor.nil();

                pushFollow(FOLLOW_pm_ContextItemDecl_in_pg_OrderedDecl1277);
                pm_ContextItemDecl11 = pm_ContextItemDecl();

                state._fsp--;
                if (state.failed) {
                    return retval;
                }
                if (state.backtracking == 0) {
                    adaptor.addChild(root_0, pm_ContextItemDecl11.getTree());
                }

            }
            break;
            case 2:
                // XQueryParser.g:183:11: pm_AnnotatedDecl
            {
                root_0 = (XQDTCommonTree)adaptor.nil();

                pushFollow(FOLLOW_pm_AnnotatedDecl_in_pg_OrderedDecl1289);
                pm_AnnotatedDecl12 = pm_AnnotatedDecl();

                state._fsp--;
                if (state.failed) {
                    return retval;
                }
                if (state.backtracking == 0) {
                    adaptor.addChild(root_0, pm_AnnotatedDecl12.getTree());
                }

            }
            break;
            case 3:
                // XQueryParser.g:184:11: pm_OptionDecl
            {
                root_0 = (XQDTCommonTree)adaptor.nil();

                pushFollow(FOLLOW_pm_OptionDecl_in_pg_OrderedDecl1301);
                pm_OptionDecl13 = pm_OptionDecl();

                state._fsp--;
                if (state.failed) {
                    return retval;
                }
                if (state.backtracking == 0) {
                    adaptor.addChild(root_0, pm_OptionDecl13.getTree());
                }

            }
            break;

            }
            retval.stop = input.LT(-1);

            if (state.backtracking == 0) {

                retval.tree = (XQDTCommonTree)adaptor.rulePostProcessing(root_0);
                adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        } catch (RecognitionException re) {
            reportError(re);
            recover(input, re);
            retval.tree = (XQDTCommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        } finally {
        }
        return retval;
    }

    // $ANTLR end "pg_OrderedDecl"

    public static class p_Setter_return extends ParserRuleReturnScope {
        XQDTCommonTree tree;

        public Object getTree() {
            return tree;
        }
    };

    // $ANTLR start "p_Setter"
    // XQueryParser.g:192:1: p_Setter : ( pm_BoundarySpaceDecl | pm_DefaultCollationDecl | pm_BaseURIDecl | pm_ConstructionDecl | pm_OrderingModeDecl | pm_EmptyOrderDecl | {...}? => pm_RevalidationDecl | pm_CopyNamespacesDecl | pm_DecimalFormatDecl );
    public final XQueryParser.p_Setter_return p_Setter() throws RecognitionException {
        XQueryParser.p_Setter_return retval = new XQueryParser.p_Setter_return();
        retval.start = input.LT(1);

        XQDTCommonTree root_0 = null;

        XQueryParser.pm_BoundarySpaceDecl_return pm_BoundarySpaceDecl14 = null;

        XQueryParser.pm_DefaultCollationDecl_return pm_DefaultCollationDecl15 = null;

        XQueryParser.pm_BaseURIDecl_return pm_BaseURIDecl16 = null;

        XQueryParser.pm_ConstructionDecl_return pm_ConstructionDecl17 = null;

        XQueryParser.pm_OrderingModeDecl_return pm_OrderingModeDecl18 = null;

        XQueryParser.pm_EmptyOrderDecl_return pm_EmptyOrderDecl19 = null;

        XQueryParser.pm_RevalidationDecl_return pm_RevalidationDecl20 = null;

        XQueryParser.pm_CopyNamespacesDecl_return pm_CopyNamespacesDecl21 = null;

        XQueryParser.pm_DecimalFormatDecl_return pm_DecimalFormatDecl22 = null;

        try {
            // XQueryParser.g:193:9: ( pm_BoundarySpaceDecl | pm_DefaultCollationDecl | pm_BaseURIDecl | pm_ConstructionDecl | pm_OrderingModeDecl | pm_EmptyOrderDecl | {...}? => pm_RevalidationDecl | pm_CopyNamespacesDecl | pm_DecimalFormatDecl )
            int alt9 = 9;
            alt9 = dfa9.predict(input);
            switch (alt9) {
            case 1:
                // XQueryParser.g:193:11: pm_BoundarySpaceDecl
            {
                root_0 = (XQDTCommonTree)adaptor.nil();

                pushFollow(FOLLOW_pm_BoundarySpaceDecl_in_p_Setter1331);
                pm_BoundarySpaceDecl14 = pm_BoundarySpaceDecl();

                state._fsp--;
                if (state.failed) {
                    return retval;
                }
                if (state.backtracking == 0) {
                    adaptor.addChild(root_0, pm_BoundarySpaceDecl14.getTree());
                }

            }
            break;
            case 2:
                // XQueryParser.g:194:11: pm_DefaultCollationDecl
            {
                root_0 = (XQDTCommonTree)adaptor.nil();

                pushFollow(FOLLOW_pm_DefaultCollationDecl_in_p_Setter1343);
                pm_DefaultCollationDecl15 = pm_DefaultCollationDecl();

                state._fsp--;
                if (state.failed) {
                    return retval;
                }
                if (state.backtracking == 0) {
                    adaptor.addChild(root_0, pm_DefaultCollationDecl15.getTree());
                }

            }
            break;
            case 3:
                // XQueryParser.g:195:11: pm_BaseURIDecl
            {
                root_0 = (XQDTCommonTree)adaptor.nil();

                pushFollow(FOLLOW_pm_BaseURIDecl_in_p_Setter1355);
                pm_BaseURIDecl16 = pm_BaseURIDecl();

                state._fsp--;
                if (state.failed) {
                    return retval;
                }
                if (state.backtracking == 0) {
                    adaptor.addChild(root_0, pm_BaseURIDecl16.getTree());
                }

            }
            break;
            case 4:
                // XQueryParser.g:196:11: pm_ConstructionDecl
            {
                root_0 = (XQDTCommonTree)adaptor.nil();

                pushFollow(FOLLOW_pm_ConstructionDecl_in_p_Setter1367);
                pm_ConstructionDecl17 = pm_ConstructionDecl();

                state._fsp--;
                if (state.failed) {
                    return retval;
                }
                if (state.backtracking == 0) {
                    adaptor.addChild(root_0, pm_ConstructionDecl17.getTree());
                }

            }
            break;
            case 5:
                // XQueryParser.g:197:11: pm_OrderingModeDecl
            {
                root_0 = (XQDTCommonTree)adaptor.nil();

                pushFollow(FOLLOW_pm_OrderingModeDecl_in_p_Setter1379);
                pm_OrderingModeDecl18 = pm_OrderingModeDecl();

                state._fsp--;
                if (state.failed) {
                    return retval;
                }
                if (state.backtracking == 0) {
                    adaptor.addChild(root_0, pm_OrderingModeDecl18.getTree());
                }

            }
            break;
            case 6:
                // XQueryParser.g:198:11: pm_EmptyOrderDecl
            {
                root_0 = (XQDTCommonTree)adaptor.nil();

                pushFollow(FOLLOW_pm_EmptyOrderDecl_in_p_Setter1391);
                pm_EmptyOrderDecl19 = pm_EmptyOrderDecl();

                state._fsp--;
                if (state.failed) {
                    return retval;
                }
                if (state.backtracking == 0) {
                    adaptor.addChild(root_0, pm_EmptyOrderDecl19.getTree());
                }

            }
            break;
            case 7:
                // XQueryParser.g:199:11: {...}? => pm_RevalidationDecl
            {
                root_0 = (XQDTCommonTree)adaptor.nil();

                if (!((lc(XQU)))) {
                    if (state.backtracking > 0) {
                        state.failed = true;
                        return retval;
                    }
                    throw new FailedPredicateException(input, "p_Setter", "lc(XQU)");
                }
                pushFollow(FOLLOW_pm_RevalidationDecl_in_p_Setter1406);
                pm_RevalidationDecl20 = pm_RevalidationDecl();

                state._fsp--;
                if (state.failed) {
                    return retval;
                }
                if (state.backtracking == 0) {
                    adaptor.addChild(root_0, pm_RevalidationDecl20.getTree());
                }

            }
            break;
            case 8:
                // XQueryParser.g:200:11: pm_CopyNamespacesDecl
            {
                root_0 = (XQDTCommonTree)adaptor.nil();

                pushFollow(FOLLOW_pm_CopyNamespacesDecl_in_p_Setter1418);
                pm_CopyNamespacesDecl21 = pm_CopyNamespacesDecl();

                state._fsp--;
                if (state.failed) {
                    return retval;
                }
                if (state.backtracking == 0) {
                    adaptor.addChild(root_0, pm_CopyNamespacesDecl21.getTree());
                }

            }
            break;
            case 9:
                // XQueryParser.g:201:11: pm_DecimalFormatDecl
            {
                root_0 = (XQDTCommonTree)adaptor.nil();

                pushFollow(FOLLOW_pm_DecimalFormatDecl_in_p_Setter1430);
                pm_DecimalFormatDecl22 = pm_DecimalFormatDecl();

                state._fsp--;
                if (state.failed) {
                    return retval;
                }
                if (state.backtracking == 0) {
                    adaptor.addChild(root_0, pm_DecimalFormatDecl22.getTree());
                }

            }
            break;

            }
            retval.stop = input.LT(-1);

            if (state.backtracking == 0) {

                retval.tree = (XQDTCommonTree)adaptor.rulePostProcessing(root_0);
                adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        } catch (RecognitionException re) {
            reportError(re);
            recover(input, re);
            retval.tree = (XQDTCommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        } finally {
        }
        return retval;
    }

    // $ANTLR end "p_Setter"

    public static class pm_BoundarySpaceDecl_return extends ParserRuleReturnScope {
        XQDTCommonTree tree;

        public Object getTree() {
            return tree;
        }
    };

    // $ANTLR start "pm_BoundarySpaceDecl"
    // XQueryParser.g:205:1: pm_BoundarySpaceDecl : k= DECLARE k= BOUNDARY_SPACE ( (k= PRESERVE ) | (k= STRIP ) ) SEMICOLON ;
    public final XQueryParser.pm_BoundarySpaceDecl_return pm_BoundarySpaceDecl() throws RecognitionException {
        XQueryParser.pm_BoundarySpaceDecl_return retval = new XQueryParser.pm_BoundarySpaceDecl_return();
        retval.start = input.LT(1);

        XQDTCommonTree root_0 = null;

        CommonToken k = null;
        CommonToken SEMICOLON23 = null;

        XQDTCommonTree k_tree = null;
        XQDTCommonTree SEMICOLON23_tree = null;

        try {
            // XQueryParser.g:206:9: (k= DECLARE k= BOUNDARY_SPACE ( (k= PRESERVE ) | (k= STRIP ) ) SEMICOLON )
            // XQueryParser.g:206:11: k= DECLARE k= BOUNDARY_SPACE ( (k= PRESERVE ) | (k= STRIP ) ) SEMICOLON
            {
                root_0 = (XQDTCommonTree)adaptor.nil();

                k = (CommonToken)match(input, DECLARE, FOLLOW_DECLARE_in_pm_BoundarySpaceDecl1462);
                if (state.failed) {
                    return retval;
                }
                if (state.backtracking == 0) {
                    k_tree = (XQDTCommonTree)adaptor.create(k);
                    adaptor.addChild(root_0, k_tree);
                }
                if (state.backtracking == 0) {
                    ak(k);
                }
                k = (CommonToken)match(input, BOUNDARY_SPACE, FOLLOW_BOUNDARY_SPACE_in_pm_BoundarySpaceDecl1468);
                if (state.failed) {
                    return retval;
                }
                if (state.backtracking == 0) {
                    k_tree = (XQDTCommonTree)adaptor.create(k);
                    adaptor.addChild(root_0, k_tree);
                }
                if (state.backtracking == 0) {
                    ak(k);
                }
                // XQueryParser.g:206:58: ( (k= PRESERVE ) | (k= STRIP ) )
                int alt10 = 2;
                int LA10_0 = input.LA(1);

                if ((LA10_0 == PRESERVE)) {
                    alt10 = 1;
                } else if ((LA10_0 == STRIP)) {
                    alt10 = 2;
                } else {
                    if (state.backtracking > 0) {
                        state.failed = true;
                        return retval;
                    }
                    NoViableAltException nvae = new NoViableAltException("", 10, 0, input);

                    throw nvae;
                }
                switch (alt10) {
                case 1:
                    // XQueryParser.g:206:60: (k= PRESERVE )
                {
                    // XQueryParser.g:206:60: (k= PRESERVE )
                    // XQueryParser.g:206:61: k= PRESERVE
                    {
                        k = (CommonToken)match(input, PRESERVE, FOLLOW_PRESERVE_in_pm_BoundarySpaceDecl1477);
                        if (state.failed) {
                            return retval;
                        }
                        if (state.backtracking == 0) {
                            k_tree = (XQDTCommonTree)adaptor.create(k);
                            adaptor.addChild(root_0, k_tree);
                        }
                        if (state.backtracking == 0) {
                            ak(k);
                        }

                    }

                }
                    break;
                case 2:
                    // XQueryParser.g:206:85: (k= STRIP )
                {
                    // XQueryParser.g:206:85: (k= STRIP )
                    // XQueryParser.g:206:86: k= STRIP
                    {
                        k = (CommonToken)match(input, STRIP, FOLLOW_STRIP_in_pm_BoundarySpaceDecl1487);
                        if (state.failed) {
                            return retval;
                        }
                        if (state.backtracking == 0) {
                            k_tree = (XQDTCommonTree)adaptor.create(k);
                            adaptor.addChild(root_0, k_tree);
                        }
                        if (state.backtracking == 0) {
                            ak(k);
                        }

                    }

                }
                    break;

                }

                SEMICOLON23 = (CommonToken)match(input, SEMICOLON, FOLLOW_SEMICOLON_in_pm_BoundarySpaceDecl1494);
                if (state.failed) {
                    return retval;
                }
                if (state.backtracking == 0) {
                    SEMICOLON23_tree = (XQDTCommonTree)adaptor.create(SEMICOLON23);
                    adaptor.addChild(root_0, SEMICOLON23_tree);
                }

            }

            retval.stop = input.LT(-1);

            if (state.backtracking == 0) {

                retval.tree = (XQDTCommonTree)adaptor.rulePostProcessing(root_0);
                adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        } catch (RecognitionException re) {
            reportError(re);
            recover(input, re);
            retval.tree = (XQDTCommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        } finally {
        }
        return retval;
    }

    // $ANTLR end "pm_BoundarySpaceDecl"

    public static class pm_DefaultCollationDecl_return extends ParserRuleReturnScope {
        XQDTCommonTree tree;

        public Object getTree() {
            return tree;
        }
    };

    // $ANTLR start "pm_DefaultCollationDecl"
    // XQueryParser.g:210:1: pm_DefaultCollationDecl : k= DECLARE k= DEFAULT k= COLLATION p_StringLiteral SEMICOLON ;
    public final XQueryParser.pm_DefaultCollationDecl_return pm_DefaultCollationDecl() throws RecognitionException {
        XQueryParser.pm_DefaultCollationDecl_return retval = new XQueryParser.pm_DefaultCollationDecl_return();
        retval.start = input.LT(1);

        XQDTCommonTree root_0 = null;

        CommonToken k = null;
        CommonToken SEMICOLON25 = null;
        XQueryParser.p_StringLiteral_return p_StringLiteral24 = null;

        XQDTCommonTree k_tree = null;
        XQDTCommonTree SEMICOLON25_tree = null;

        try {
            // XQueryParser.g:211:9: (k= DECLARE k= DEFAULT k= COLLATION p_StringLiteral SEMICOLON )
            // XQueryParser.g:211:11: k= DECLARE k= DEFAULT k= COLLATION p_StringLiteral SEMICOLON
            {
                root_0 = (XQDTCommonTree)adaptor.nil();

                k = (CommonToken)match(input, DECLARE, FOLLOW_DECLARE_in_pm_DefaultCollationDecl1522);
                if (state.failed) {
                    return retval;
                }
                if (state.backtracking == 0) {
                    k_tree = (XQDTCommonTree)adaptor.create(k);
                    adaptor.addChild(root_0, k_tree);
                }
                if (state.backtracking == 0) {
                    ak(k);
                }
                k = (CommonToken)match(input, DEFAULT, FOLLOW_DEFAULT_in_pm_DefaultCollationDecl1528);
                if (state.failed) {
                    return retval;
                }
                if (state.backtracking == 0) {
                    k_tree = (XQDTCommonTree)adaptor.create(k);
                    adaptor.addChild(root_0, k_tree);
                }
                if (state.backtracking == 0) {
                    ak(k);
                }
                k = (CommonToken)match(input, COLLATION, FOLLOW_COLLATION_in_pm_DefaultCollationDecl1534);
                if (state.failed) {
                    return retval;
                }
                if (state.backtracking == 0) {
                    k_tree = (XQDTCommonTree)adaptor.create(k);
                    adaptor.addChild(root_0, k_tree);
                }
                if (state.backtracking == 0) {
                    ak(k);
                }
                pushFollow(FOLLOW_p_StringLiteral_in_pm_DefaultCollationDecl1538);
                p_StringLiteral24 = p_StringLiteral();

                state._fsp--;
                if (state.failed) {
                    return retval;
                }
                if (state.backtracking == 0) {
                    adaptor.addChild(root_0, p_StringLiteral24.getTree());
                }
                SEMICOLON25 = (CommonToken)match(input, SEMICOLON, FOLLOW_SEMICOLON_in_pm_DefaultCollationDecl1540);
                if (state.failed) {
                    return retval;
                }
                if (state.backtracking == 0) {
                    SEMICOLON25_tree = (XQDTCommonTree)adaptor.create(SEMICOLON25);
                    adaptor.addChild(root_0, SEMICOLON25_tree);
                }

            }

            retval.stop = input.LT(-1);

            if (state.backtracking == 0) {

                retval.tree = (XQDTCommonTree)adaptor.rulePostProcessing(root_0);
                adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        } catch (RecognitionException re) {
            reportError(re);
            recover(input, re);
            retval.tree = (XQDTCommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        } finally {
        }
        return retval;
    }

    // $ANTLR end "pm_DefaultCollationDecl"

    public static class pm_BaseURIDecl_return extends ParserRuleReturnScope {
        XQDTCommonTree tree;

        public Object getTree() {
            return tree;
        }
    };

    // $ANTLR start "pm_BaseURIDecl"
    // XQueryParser.g:215:1: pm_BaseURIDecl : k= DECLARE k= BASE_URI sl= p_StringLiteral SEMICOLON -> ^( BaseURIDecl $sl) ;
    public final XQueryParser.pm_BaseURIDecl_return pm_BaseURIDecl() throws RecognitionException {
        XQueryParser.pm_BaseURIDecl_return retval = new XQueryParser.pm_BaseURIDecl_return();
        retval.start = input.LT(1);

        XQDTCommonTree root_0 = null;

        CommonToken k = null;
        CommonToken SEMICOLON26 = null;
        XQueryParser.p_StringLiteral_return sl = null;

        XQDTCommonTree k_tree = null;
        XQDTCommonTree SEMICOLON26_tree = null;
        RewriteRuleTokenStream stream_DECLARE = new RewriteRuleTokenStream(adaptor, "token DECLARE");
        RewriteRuleTokenStream stream_SEMICOLON = new RewriteRuleTokenStream(adaptor, "token SEMICOLON");
        RewriteRuleTokenStream stream_BASE_URI = new RewriteRuleTokenStream(adaptor, "token BASE_URI");
        RewriteRuleSubtreeStream stream_p_StringLiteral = new RewriteRuleSubtreeStream(adaptor, "rule p_StringLiteral");
        try {
            // XQueryParser.g:216:9: (k= DECLARE k= BASE_URI sl= p_StringLiteral SEMICOLON -> ^( BaseURIDecl $sl) )
            // XQueryParser.g:216:11: k= DECLARE k= BASE_URI sl= p_StringLiteral SEMICOLON
            {
                k = (CommonToken)match(input, DECLARE, FOLLOW_DECLARE_in_pm_BaseURIDecl1576);
                if (state.failed) {
                    return retval;
                }
                if (state.backtracking == 0) {
                    stream_DECLARE.add(k);
                }

                if (state.backtracking == 0) {
                    ak(k);
                }
                k = (CommonToken)match(input, BASE_URI, FOLLOW_BASE_URI_in_pm_BaseURIDecl1582);
                if (state.failed) {
                    return retval;
                }
                if (state.backtracking == 0) {
                    stream_BASE_URI.add(k);
                }

                if (state.backtracking == 0) {
                    ak(k);
                }
                pushFollow(FOLLOW_p_StringLiteral_in_pm_BaseURIDecl1588);
                sl = p_StringLiteral();

                state._fsp--;
                if (state.failed) {
                    return retval;
                }
                if (state.backtracking == 0) {
                    stream_p_StringLiteral.add(sl.getTree());
                }
                SEMICOLON26 = (CommonToken)match(input, SEMICOLON, FOLLOW_SEMICOLON_in_pm_BaseURIDecl1590);
                if (state.failed) {
                    return retval;
                }
                if (state.backtracking == 0) {
                    stream_SEMICOLON.add(SEMICOLON26);
                }

                // AST REWRITE
                // elements: sl
                // token labels:
                // rule labels: sl, retval
                // token list labels:
                // rule list labels:
                // wildcard labels:
                if (state.backtracking == 0) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_sl = new RewriteRuleSubtreeStream(adaptor, "rule sl",
                            sl != null ? sl.tree : null);
                    RewriteRuleSubtreeStream stream_retval = new RewriteRuleSubtreeStream(adaptor, "rule retval",
                            retval != null ? retval.tree : null);

                    root_0 = (XQDTCommonTree)adaptor.nil();
                    // 217:17: -> ^( BaseURIDecl $sl)
                    {
                        // XQueryParser.g:217:20: ^( BaseURIDecl $sl)
                        {
                            XQDTCommonTree root_1 = (XQDTCommonTree)adaptor.nil();
                            root_1 = (XQDTCommonTree)adaptor.becomeRoot(adaptor.create(BaseURIDecl, "BaseURIDecl"),
                                    root_1);

                            adaptor.addChild(root_1, stream_sl.nextTree());

                            adaptor.addChild(root_0, root_1);
                        }

                    }

                    retval.tree = root_0;
                }
            }

            retval.stop = input.LT(-1);

            if (state.backtracking == 0) {

                retval.tree = (XQDTCommonTree)adaptor.rulePostProcessing(root_0);
                adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        } catch (RecognitionException re) {
            reportError(re);
            recover(input, re);
            retval.tree = (XQDTCommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        } finally {
        }
        return retval;
    }

    // $ANTLR end "pm_BaseURIDecl"

    public static class pm_ConstructionDecl_return extends ParserRuleReturnScope {
        XQDTCommonTree tree;

        public Object getTree() {
            return tree;
        }
    };

    // $ANTLR start "pm_ConstructionDecl"
    // XQueryParser.g:221:1: pm_ConstructionDecl : k= DECLARE k= CONSTRUCTION ( (k= STRIP | k= PRESERVE ) ) SEMICOLON ;
    public final XQueryParser.pm_ConstructionDecl_return pm_ConstructionDecl() throws RecognitionException {
        XQueryParser.pm_ConstructionDecl_return retval = new XQueryParser.pm_ConstructionDecl_return();
        retval.start = input.LT(1);

        XQDTCommonTree root_0 = null;

        CommonToken k = null;
        CommonToken SEMICOLON27 = null;

        XQDTCommonTree k_tree = null;
        XQDTCommonTree SEMICOLON27_tree = null;

        try {
            // XQueryParser.g:222:9: (k= DECLARE k= CONSTRUCTION ( (k= STRIP | k= PRESERVE ) ) SEMICOLON )
            // XQueryParser.g:222:11: k= DECLARE k= CONSTRUCTION ( (k= STRIP | k= PRESERVE ) ) SEMICOLON
            {
                root_0 = (XQDTCommonTree)adaptor.nil();

                k = (CommonToken)match(input, DECLARE, FOLLOW_DECLARE_in_pm_ConstructionDecl1643);
                if (state.failed) {
                    return retval;
                }
                if (state.backtracking == 0) {
                    k_tree = (XQDTCommonTree)adaptor.create(k);
                    adaptor.addChild(root_0, k_tree);
                }
                if (state.backtracking == 0) {
                    ak(k);
                }
                k = (CommonToken)match(input, CONSTRUCTION, FOLLOW_CONSTRUCTION_in_pm_ConstructionDecl1649);
                if (state.failed) {
                    return retval;
                }
                if (state.backtracking == 0) {
                    k_tree = (XQDTCommonTree)adaptor.create(k);
                    adaptor.addChild(root_0, k_tree);
                }
                if (state.backtracking == 0) {
                    ak(k);
                }
                // XQueryParser.g:222:56: ( (k= STRIP | k= PRESERVE ) )
                // XQueryParser.g:222:58: (k= STRIP | k= PRESERVE )
                {
                    // XQueryParser.g:222:58: (k= STRIP | k= PRESERVE )
                    int alt11 = 2;
                    int LA11_0 = input.LA(1);

                    if ((LA11_0 == STRIP)) {
                        alt11 = 1;
                    } else if ((LA11_0 == PRESERVE)) {
                        alt11 = 2;
                    } else {
                        if (state.backtracking > 0) {
                            state.failed = true;
                            return retval;
                        }
                        NoViableAltException nvae = new NoViableAltException("", 11, 0, input);

                        throw nvae;
                    }
                    switch (alt11) {
                    case 1:
                    // XQueryParser.g:222:59: k= STRIP
                    {
                        k = (CommonToken)match(input, STRIP, FOLLOW_STRIP_in_pm_ConstructionDecl1658);
                        if (state.failed) {
                            return retval;
                        }
                        if (state.backtracking == 0) {
                            k_tree = (XQDTCommonTree)adaptor.create(k);
                            adaptor.addChild(root_0, k_tree);
                        }

                    }
                    break;
                    case 2:
                    // XQueryParser.g:222:69: k= PRESERVE
                    {
                        k = (CommonToken)match(input, PRESERVE, FOLLOW_PRESERVE_in_pm_ConstructionDecl1664);
                        if (state.failed) {
                            return retval;
                        }
                        if (state.backtracking == 0) {
                            k_tree = (XQDTCommonTree)adaptor.create(k);
                            adaptor.addChild(root_0, k_tree);
                        }

                    }
                    break;

                    }

                    if (state.backtracking == 0) {
                        ak(k);
                    }

                }

                SEMICOLON27 = (CommonToken)match(input, SEMICOLON, FOLLOW_SEMICOLON_in_pm_ConstructionDecl1671);
                if (state.failed) {
                    return retval;
                }
                if (state.backtracking == 0) {
                    SEMICOLON27_tree = (XQDTCommonTree)adaptor.create(SEMICOLON27);
                    adaptor.addChild(root_0, SEMICOLON27_tree);
                }

            }

            retval.stop = input.LT(-1);

            if (state.backtracking == 0) {

                retval.tree = (XQDTCommonTree)adaptor.rulePostProcessing(root_0);
                adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        } catch (RecognitionException re) {
            reportError(re);
            recover(input, re);
            retval.tree = (XQDTCommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        } finally {
        }
        return retval;
    }

    // $ANTLR end "pm_ConstructionDecl"

    public static class pm_OrderingModeDecl_return extends ParserRuleReturnScope {
        XQDTCommonTree tree;

        public Object getTree() {
            return tree;
        }
    };

    // $ANTLR start "pm_OrderingModeDecl"
    // XQueryParser.g:226:1: pm_OrderingModeDecl : k= DECLARE k= ORDERING ( (k= ORDERED | k= UNORDERED ) ) SEMICOLON ;
    public final XQueryParser.pm_OrderingModeDecl_return pm_OrderingModeDecl() throws RecognitionException {
        XQueryParser.pm_OrderingModeDecl_return retval = new XQueryParser.pm_OrderingModeDecl_return();
        retval.start = input.LT(1);

        XQDTCommonTree root_0 = null;

        CommonToken k = null;
        CommonToken SEMICOLON28 = null;

        XQDTCommonTree k_tree = null;
        XQDTCommonTree SEMICOLON28_tree = null;

        try {
            // XQueryParser.g:227:9: (k= DECLARE k= ORDERING ( (k= ORDERED | k= UNORDERED ) ) SEMICOLON )
            // XQueryParser.g:227:11: k= DECLARE k= ORDERING ( (k= ORDERED | k= UNORDERED ) ) SEMICOLON
            {
                root_0 = (XQDTCommonTree)adaptor.nil();

                k = (CommonToken)match(input, DECLARE, FOLLOW_DECLARE_in_pm_OrderingModeDecl1699);
                if (state.failed) {
                    return retval;
                }
                if (state.backtracking == 0) {
                    k_tree = (XQDTCommonTree)adaptor.create(k);
                    adaptor.addChild(root_0, k_tree);
                }
                if (state.backtracking == 0) {
                    ak(k);
                }
                k = (CommonToken)match(input, ORDERING, FOLLOW_ORDERING_in_pm_OrderingModeDecl1705);
                if (state.failed) {
                    return retval;
                }
                if (state.backtracking == 0) {
                    k_tree = (XQDTCommonTree)adaptor.create(k);
                    adaptor.addChild(root_0, k_tree);
                }
                if (state.backtracking == 0) {
                    ak(k);
                }
                // XQueryParser.g:227:52: ( (k= ORDERED | k= UNORDERED ) )
                // XQueryParser.g:227:54: (k= ORDERED | k= UNORDERED )
                {
                    // XQueryParser.g:227:54: (k= ORDERED | k= UNORDERED )
                    int alt12 = 2;
                    int LA12_0 = input.LA(1);

                    if ((LA12_0 == ORDERED)) {
                        alt12 = 1;
                    } else if ((LA12_0 == UNORDERED)) {
                        alt12 = 2;
                    } else {
                        if (state.backtracking > 0) {
                            state.failed = true;
                            return retval;
                        }
                        NoViableAltException nvae = new NoViableAltException("", 12, 0, input);

                        throw nvae;
                    }
                    switch (alt12) {
                    case 1:
                    // XQueryParser.g:227:55: k= ORDERED
                    {
                        k = (CommonToken)match(input, ORDERED, FOLLOW_ORDERED_in_pm_OrderingModeDecl1714);
                        if (state.failed) {
                            return retval;
                        }
                        if (state.backtracking == 0) {
                            k_tree = (XQDTCommonTree)adaptor.create(k);
                            adaptor.addChild(root_0, k_tree);
                        }

                    }
                    break;
                    case 2:
                    // XQueryParser.g:227:67: k= UNORDERED
                    {
                        k = (CommonToken)match(input, UNORDERED, FOLLOW_UNORDERED_in_pm_OrderingModeDecl1720);
                        if (state.failed) {
                            return retval;
                        }
                        if (state.backtracking == 0) {
                            k_tree = (XQDTCommonTree)adaptor.create(k);
                            adaptor.addChild(root_0, k_tree);
                        }

                    }
                    break;

                    }

                    if (state.backtracking == 0) {
                        ak(k);
                    }

                }

                SEMICOLON28 = (CommonToken)match(input, SEMICOLON, FOLLOW_SEMICOLON_in_pm_OrderingModeDecl1727);
                if (state.failed) {
                    return retval;
                }
                if (state.backtracking == 0) {
                    SEMICOLON28_tree = (XQDTCommonTree)adaptor.create(SEMICOLON28);
                    adaptor.addChild(root_0, SEMICOLON28_tree);
                }

            }

            retval.stop = input.LT(-1);

            if (state.backtracking == 0) {

                retval.tree = (XQDTCommonTree)adaptor.rulePostProcessing(root_0);
                adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        } catch (RecognitionException re) {
            reportError(re);
            recover(input, re);
            retval.tree = (XQDTCommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        } finally {
        }
        return retval;
    }

    // $ANTLR end "pm_OrderingModeDecl"

    public static class pm_EmptyOrderDecl_return extends ParserRuleReturnScope {
        XQDTCommonTree tree;

        public Object getTree() {
            return tree;
        }
    };

    // $ANTLR start "pm_EmptyOrderDecl"
    // XQueryParser.g:231:1: pm_EmptyOrderDecl : k= DECLARE k= DEFAULT k= ORDER k= EMPTY ( (k= GREATEST | k= LEAST ) ) SEMICOLON ;
    public final XQueryParser.pm_EmptyOrderDecl_return pm_EmptyOrderDecl() throws RecognitionException {
        XQueryParser.pm_EmptyOrderDecl_return retval = new XQueryParser.pm_EmptyOrderDecl_return();
        retval.start = input.LT(1);

        XQDTCommonTree root_0 = null;

        CommonToken k = null;
        CommonToken SEMICOLON29 = null;

        XQDTCommonTree k_tree = null;
        XQDTCommonTree SEMICOLON29_tree = null;

        try {
            // XQueryParser.g:232:9: (k= DECLARE k= DEFAULT k= ORDER k= EMPTY ( (k= GREATEST | k= LEAST ) ) SEMICOLON )
            // XQueryParser.g:232:11: k= DECLARE k= DEFAULT k= ORDER k= EMPTY ( (k= GREATEST | k= LEAST ) ) SEMICOLON
            {
                root_0 = (XQDTCommonTree)adaptor.nil();

                k = (CommonToken)match(input, DECLARE, FOLLOW_DECLARE_in_pm_EmptyOrderDecl1755);
                if (state.failed) {
                    return retval;
                }
                if (state.backtracking == 0) {
                    k_tree = (XQDTCommonTree)adaptor.create(k);
                    adaptor.addChild(root_0, k_tree);
                }
                if (state.backtracking == 0) {
                    ak(k);
                }
                k = (CommonToken)match(input, DEFAULT, FOLLOW_DEFAULT_in_pm_EmptyOrderDecl1761);
                if (state.failed) {
                    return retval;
                }
                if (state.backtracking == 0) {
                    k_tree = (XQDTCommonTree)adaptor.create(k);
                    adaptor.addChild(root_0, k_tree);
                }
                if (state.backtracking == 0) {
                    ak(k);
                }
                k = (CommonToken)match(input, ORDER, FOLLOW_ORDER_in_pm_EmptyOrderDecl1767);
                if (state.failed) {
                    return retval;
                }
                if (state.backtracking == 0) {
                    k_tree = (XQDTCommonTree)adaptor.create(k);
                    adaptor.addChild(root_0, k_tree);
                }
                if (state.backtracking == 0) {
                    ak(k);
                }
                k = (CommonToken)match(input, EMPTY, FOLLOW_EMPTY_in_pm_EmptyOrderDecl1773);
                if (state.failed) {
                    return retval;
                }
                if (state.backtracking == 0) {
                    k_tree = (XQDTCommonTree)adaptor.create(k);
                    adaptor.addChild(root_0, k_tree);
                }
                if (state.backtracking == 0) {
                    ak(k);
                }
                // XQueryParser.g:232:87: ( (k= GREATEST | k= LEAST ) )
                // XQueryParser.g:232:89: (k= GREATEST | k= LEAST )
                {
                    // XQueryParser.g:232:89: (k= GREATEST | k= LEAST )
                    int alt13 = 2;
                    int LA13_0 = input.LA(1);

                    if ((LA13_0 == GREATEST)) {
                        alt13 = 1;
                    } else if ((LA13_0 == LEAST)) {
                        alt13 = 2;
                    } else {
                        if (state.backtracking > 0) {
                            state.failed = true;
                            return retval;
                        }
                        NoViableAltException nvae = new NoViableAltException("", 13, 0, input);

                        throw nvae;
                    }
                    switch (alt13) {
                    case 1:
                    // XQueryParser.g:232:90: k= GREATEST
                    {
                        k = (CommonToken)match(input, GREATEST, FOLLOW_GREATEST_in_pm_EmptyOrderDecl1782);
                        if (state.failed) {
                            return retval;
                        }
                        if (state.backtracking == 0) {
                            k_tree = (XQDTCommonTree)adaptor.create(k);
                            adaptor.addChild(root_0, k_tree);
                        }

                    }
                    break;
                    case 2:
                    // XQueryParser.g:232:103: k= LEAST
                    {
                        k = (CommonToken)match(input, LEAST, FOLLOW_LEAST_in_pm_EmptyOrderDecl1788);
                        if (state.failed) {
                            return retval;
                        }
                        if (state.backtracking == 0) {
                            k_tree = (XQDTCommonTree)adaptor.create(k);
                            adaptor.addChild(root_0, k_tree);
                        }

                    }
                    break;

                    }

                    if (state.backtracking == 0) {
                        ak(k);
                    }

                }

                SEMICOLON29 = (CommonToken)match(input, SEMICOLON, FOLLOW_SEMICOLON_in_pm_EmptyOrderDecl1795);
                if (state.failed) {
                    return retval;
                }
                if (state.backtracking == 0) {
                    SEMICOLON29_tree = (XQDTCommonTree)adaptor.create(SEMICOLON29);
                    adaptor.addChild(root_0, SEMICOLON29_tree);
                }

            }

            retval.stop = input.LT(-1);

            if (state.backtracking == 0) {

                retval.tree = (XQDTCommonTree)adaptor.rulePostProcessing(root_0);
                adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        } catch (RecognitionException re) {
            reportError(re);
            recover(input, re);
            retval.tree = (XQDTCommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        } finally {
        }
        return retval;
    }

    // $ANTLR end "pm_EmptyOrderDecl"

    public static class pm_CopyNamespacesDecl_return extends ParserRuleReturnScope {
        XQDTCommonTree tree;

        public Object getTree() {
            return tree;
        }
    };

    // $ANTLR start "pm_CopyNamespacesDecl"
    // XQueryParser.g:236:1: pm_CopyNamespacesDecl : k= DECLARE k= COPY_NAMESPACES p_PreserveMode COMMA p_InheritMode SEMICOLON ;
    public final XQueryParser.pm_CopyNamespacesDecl_return pm_CopyNamespacesDecl() throws RecognitionException {
        XQueryParser.pm_CopyNamespacesDecl_return retval = new XQueryParser.pm_CopyNamespacesDecl_return();
        retval.start = input.LT(1);

        XQDTCommonTree root_0 = null;

        CommonToken k = null;
        CommonToken COMMA31 = null;
        CommonToken SEMICOLON33 = null;
        XQueryParser.p_PreserveMode_return p_PreserveMode30 = null;

        XQueryParser.p_InheritMode_return p_InheritMode32 = null;

        XQDTCommonTree k_tree = null;
        XQDTCommonTree COMMA31_tree = null;
        XQDTCommonTree SEMICOLON33_tree = null;

        try {
            // XQueryParser.g:237:9: (k= DECLARE k= COPY_NAMESPACES p_PreserveMode COMMA p_InheritMode SEMICOLON )
            // XQueryParser.g:237:11: k= DECLARE k= COPY_NAMESPACES p_PreserveMode COMMA p_InheritMode SEMICOLON
            {
                root_0 = (XQDTCommonTree)adaptor.nil();

                k = (CommonToken)match(input, DECLARE, FOLLOW_DECLARE_in_pm_CopyNamespacesDecl1823);
                if (state.failed) {
                    return retval;
                }
                if (state.backtracking == 0) {
                    k_tree = (XQDTCommonTree)adaptor.create(k);
                    adaptor.addChild(root_0, k_tree);
                }
                if (state.backtracking == 0) {
                    ak(k);
                }
                k = (CommonToken)match(input, COPY_NAMESPACES, FOLLOW_COPY_NAMESPACES_in_pm_CopyNamespacesDecl1829);
                if (state.failed) {
                    return retval;
                }
                if (state.backtracking == 0) {
                    k_tree = (XQDTCommonTree)adaptor.create(k);
                    adaptor.addChild(root_0, k_tree);
                }
                if (state.backtracking == 0) {
                    ak(k);
                }
                pushFollow(FOLLOW_p_PreserveMode_in_pm_CopyNamespacesDecl1833);
                p_PreserveMode30 = p_PreserveMode();

                state._fsp--;
                if (state.failed) {
                    return retval;
                }
                if (state.backtracking == 0) {
                    adaptor.addChild(root_0, p_PreserveMode30.getTree());
                }
                COMMA31 = (CommonToken)match(input, COMMA, FOLLOW_COMMA_in_pm_CopyNamespacesDecl1835);
                if (state.failed) {
                    return retval;
                }
                if (state.backtracking == 0) {
                    COMMA31_tree = (XQDTCommonTree)adaptor.create(COMMA31);
                    adaptor.addChild(root_0, COMMA31_tree);
                }
                pushFollow(FOLLOW_p_InheritMode_in_pm_CopyNamespacesDecl1837);
                p_InheritMode32 = p_InheritMode();

                state._fsp--;
                if (state.failed) {
                    return retval;
                }
                if (state.backtracking == 0) {
                    adaptor.addChild(root_0, p_InheritMode32.getTree());
                }
                SEMICOLON33 = (CommonToken)match(input, SEMICOLON, FOLLOW_SEMICOLON_in_pm_CopyNamespacesDecl1839);
                if (state.failed) {
                    return retval;
                }
                if (state.backtracking == 0) {
                    SEMICOLON33_tree = (XQDTCommonTree)adaptor.create(SEMICOLON33);
                    adaptor.addChild(root_0, SEMICOLON33_tree);
                }

            }

            retval.stop = input.LT(-1);

            if (state.backtracking == 0) {

                retval.tree = (XQDTCommonTree)adaptor.rulePostProcessing(root_0);
                adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        } catch (RecognitionException re) {
            reportError(re);
            recover(input, re);
            retval.tree = (XQDTCommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        } finally {
        }
        return retval;
    }

    // $ANTLR end "pm_CopyNamespacesDecl"

    public static class p_PreserveMode_return extends ParserRuleReturnScope {
        XQDTCommonTree tree;

        public Object getTree() {
            return tree;
        }
    };

    // $ANTLR start "p_PreserveMode"
    // XQueryParser.g:241:1: p_PreserveMode : (k+= PRESERVE | k+= NO_PRESERVE ) ;
    public final XQueryParser.p_PreserveMode_return p_PreserveMode() throws RecognitionException {
        XQueryParser.p_PreserveMode_return retval = new XQueryParser.p_PreserveMode_return();
        retval.start = input.LT(1);

        XQDTCommonTree root_0 = null;

        CommonToken k = null;
        List<CommonToken> list_k = null;

        XQDTCommonTree k_tree = null;

        try {
            // XQueryParser.g:242:9: ( (k+= PRESERVE | k+= NO_PRESERVE ) )
            // XQueryParser.g:242:11: (k+= PRESERVE | k+= NO_PRESERVE )
            {
                root_0 = (XQDTCommonTree)adaptor.nil();

                // XQueryParser.g:242:11: (k+= PRESERVE | k+= NO_PRESERVE )
                int alt14 = 2;
                int LA14_0 = input.LA(1);

                if ((LA14_0 == PRESERVE)) {
                    alt14 = 1;
                } else if ((LA14_0 == NO_PRESERVE)) {
                    alt14 = 2;
                } else {
                    if (state.backtracking > 0) {
                        state.failed = true;
                        return retval;
                    }
                    NoViableAltException nvae = new NoViableAltException("", 14, 0, input);

                    throw nvae;
                }
                switch (alt14) {
                case 1:
                    // XQueryParser.g:242:12: k+= PRESERVE
                {
                    k = (CommonToken)match(input, PRESERVE, FOLLOW_PRESERVE_in_p_PreserveMode1868);
                    if (state.failed) {
                        return retval;
                    }
                    if (state.backtracking == 0) {
                        k_tree = (XQDTCommonTree)adaptor.create(k);
                        adaptor.addChild(root_0, k_tree);
                    }
                    if (list_k == null) {
                        list_k = new ArrayList<CommonToken>();
                    }
                    list_k.add(k);

                }
                    break;
                case 2:
                    // XQueryParser.g:242:26: k+= NO_PRESERVE
                {
                    k = (CommonToken)match(input, NO_PRESERVE, FOLLOW_NO_PRESERVE_in_p_PreserveMode1874);
                    if (state.failed) {
                        return retval;
                    }
                    if (state.backtracking == 0) {
                        k_tree = (XQDTCommonTree)adaptor.create(k);
                        adaptor.addChild(root_0, k_tree);
                    }
                    if (list_k == null) {
                        list_k = new ArrayList<CommonToken>();
                    }
                    list_k.add(k);

                }
                    break;

                }

                if (state.backtracking == 0) {
                    ak(list_k);
                }

            }

            retval.stop = input.LT(-1);

            if (state.backtracking == 0) {

                retval.tree = (XQDTCommonTree)adaptor.rulePostProcessing(root_0);
                adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        } catch (RecognitionException re) {
            reportError(re);
            recover(input, re);
            retval.tree = (XQDTCommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        } finally {
        }
        return retval;
    }

    // $ANTLR end "p_PreserveMode"

    public static class p_InheritMode_return extends ParserRuleReturnScope {
        XQDTCommonTree tree;

        public Object getTree() {
            return tree;
        }
    };

    // $ANTLR start "p_InheritMode"
    // XQueryParser.g:246:1: p_InheritMode : (k+= INHERIT | k+= NO_INHERIT ) ;
    public final XQueryParser.p_InheritMode_return p_InheritMode() throws RecognitionException {
        XQueryParser.p_InheritMode_return retval = new XQueryParser.p_InheritMode_return();
        retval.start = input.LT(1);

        XQDTCommonTree root_0 = null;

        CommonToken k = null;
        List<CommonToken> list_k = null;

        XQDTCommonTree k_tree = null;

        try {
            // XQueryParser.g:247:9: ( (k+= INHERIT | k+= NO_INHERIT ) )
            // XQueryParser.g:247:11: (k+= INHERIT | k+= NO_INHERIT )
            {
                root_0 = (XQDTCommonTree)adaptor.nil();

                // XQueryParser.g:247:11: (k+= INHERIT | k+= NO_INHERIT )
                int alt15 = 2;
                int LA15_0 = input.LA(1);

                if ((LA15_0 == INHERIT)) {
                    alt15 = 1;
                } else if ((LA15_0 == NO_INHERIT)) {
                    alt15 = 2;
                } else {
                    if (state.backtracking > 0) {
                        state.failed = true;
                        return retval;
                    }
                    NoViableAltException nvae = new NoViableAltException("", 15, 0, input);

                    throw nvae;
                }
                switch (alt15) {
                case 1:
                    // XQueryParser.g:247:12: k+= INHERIT
                {
                    k = (CommonToken)match(input, INHERIT, FOLLOW_INHERIT_in_p_InheritMode1906);
                    if (state.failed) {
                        return retval;
                    }
                    if (state.backtracking == 0) {
                        k_tree = (XQDTCommonTree)adaptor.create(k);
                        adaptor.addChild(root_0, k_tree);
                    }
                    if (list_k == null) {
                        list_k = new ArrayList<CommonToken>();
                    }
                    list_k.add(k);

                }
                    break;
                case 2:
                    // XQueryParser.g:247:25: k+= NO_INHERIT
                {
                    k = (CommonToken)match(input, NO_INHERIT, FOLLOW_NO_INHERIT_in_p_InheritMode1912);
                    if (state.failed) {
                        return retval;
                    }
                    if (state.backtracking == 0) {
                        k_tree = (XQDTCommonTree)adaptor.create(k);
                        adaptor.addChild(root_0, k_tree);
                    }
                    if (list_k == null) {
                        list_k = new ArrayList<CommonToken>();
                    }
                    list_k.add(k);

                }
                    break;

                }

                if (state.backtracking == 0) {
                    ak(list_k);
                }

            }

            retval.stop = input.LT(-1);

            if (state.backtracking == 0) {

                retval.tree = (XQDTCommonTree)adaptor.rulePostProcessing(root_0);
                adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        } catch (RecognitionException re) {
            reportError(re);
            recover(input, re);
            retval.tree = (XQDTCommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        } finally {
        }
        return retval;
    }

    // $ANTLR end "p_InheritMode"

    public static class pm_DecimalFormatDecl_return extends ParserRuleReturnScope {
        XQDTCommonTree tree;

        public Object getTree() {
            return tree;
        }
    };

    // $ANTLR start "pm_DecimalFormatDecl"
    // XQueryParser.g:251:1: pm_DecimalFormatDecl : k= DECLARE ( (k= DECIMAL_FORMAT p_QName ) | (k= DEFAULT k= DECIMAL_FORMAT ) ) ( p_DFPropertyName EQUAL p_StringLiteral )* SEMICOLON ;
    public final XQueryParser.pm_DecimalFormatDecl_return pm_DecimalFormatDecl() throws RecognitionException {
        XQueryParser.pm_DecimalFormatDecl_return retval = new XQueryParser.pm_DecimalFormatDecl_return();
        retval.start = input.LT(1);

        XQDTCommonTree root_0 = null;

        CommonToken k = null;
        CommonToken EQUAL36 = null;
        CommonToken SEMICOLON38 = null;
        XQueryParser.p_QName_return p_QName34 = null;

        XQueryParser.p_DFPropertyName_return p_DFPropertyName35 = null;

        XQueryParser.p_StringLiteral_return p_StringLiteral37 = null;

        XQDTCommonTree k_tree = null;
        XQDTCommonTree EQUAL36_tree = null;
        XQDTCommonTree SEMICOLON38_tree = null;

        try {
            // XQueryParser.g:252:9: (k= DECLARE ( (k= DECIMAL_FORMAT p_QName ) | (k= DEFAULT k= DECIMAL_FORMAT ) ) ( p_DFPropertyName EQUAL p_StringLiteral )* SEMICOLON )
            // XQueryParser.g:252:11: k= DECLARE ( (k= DECIMAL_FORMAT p_QName ) | (k= DEFAULT k= DECIMAL_FORMAT ) ) ( p_DFPropertyName EQUAL p_StringLiteral )* SEMICOLON
            {
                root_0 = (XQDTCommonTree)adaptor.nil();

                k = (CommonToken)match(input, DECLARE, FOLLOW_DECLARE_in_pm_DecimalFormatDecl1951);
                if (state.failed) {
                    return retval;
                }
                if (state.backtracking == 0) {
                    k_tree = (XQDTCommonTree)adaptor.create(k);
                    adaptor.addChild(root_0, k_tree);
                }
                if (state.backtracking == 0) {
                    ak(k);
                }
                // XQueryParser.g:252:31: ( (k= DECIMAL_FORMAT p_QName ) | (k= DEFAULT k= DECIMAL_FORMAT ) )
                int alt16 = 2;
                int LA16_0 = input.LA(1);

                if ((LA16_0 == DECIMAL_FORMAT)) {
                    alt16 = 1;
                } else if ((LA16_0 == DEFAULT)) {
                    alt16 = 2;
                } else {
                    if (state.backtracking > 0) {
                        state.failed = true;
                        return retval;
                    }
                    NoViableAltException nvae = new NoViableAltException("", 16, 0, input);

                    throw nvae;
                }
                switch (alt16) {
                case 1:
                    // XQueryParser.g:252:32: (k= DECIMAL_FORMAT p_QName )
                {
                    // XQueryParser.g:252:32: (k= DECIMAL_FORMAT p_QName )
                    // XQueryParser.g:252:33: k= DECIMAL_FORMAT p_QName
                    {
                        k = (CommonToken)match(input, DECIMAL_FORMAT, FOLLOW_DECIMAL_FORMAT_in_pm_DecimalFormatDecl1959);
                        if (state.failed) {
                            return retval;
                        }
                        if (state.backtracking == 0) {
                            k_tree = (XQDTCommonTree)adaptor.create(k);
                            adaptor.addChild(root_0, k_tree);
                        }
                        if (state.backtracking == 0) {
                            ak(k);
                        }
                        pushFollow(FOLLOW_p_QName_in_pm_DecimalFormatDecl1963);
                        p_QName34 = p_QName();

                        state._fsp--;
                        if (state.failed) {
                            return retval;
                        }
                        if (state.backtracking == 0) {
                            adaptor.addChild(root_0, p_QName34.getTree());
                        }

                    }

                }
                    break;
                case 2:
                    // XQueryParser.g:252:71: (k= DEFAULT k= DECIMAL_FORMAT )
                {
                    // XQueryParser.g:252:71: (k= DEFAULT k= DECIMAL_FORMAT )
                    // XQueryParser.g:252:72: k= DEFAULT k= DECIMAL_FORMAT
                    {
                        k = (CommonToken)match(input, DEFAULT, FOLLOW_DEFAULT_in_pm_DecimalFormatDecl1971);
                        if (state.failed) {
                            return retval;
                        }
                        if (state.backtracking == 0) {
                            k_tree = (XQDTCommonTree)adaptor.create(k);
                            adaptor.addChild(root_0, k_tree);
                        }
                        if (state.backtracking == 0) {
                            ak(k);
                        }
                        k = (CommonToken)match(input, DECIMAL_FORMAT, FOLLOW_DECIMAL_FORMAT_in_pm_DecimalFormatDecl1977);
                        if (state.failed) {
                            return retval;
                        }
                        if (state.backtracking == 0) {
                            k_tree = (XQDTCommonTree)adaptor.create(k);
                            adaptor.addChild(root_0, k_tree);
                        }
                        if (state.backtracking == 0) {
                            ak(k);
                        }

                    }

                }
                    break;

                }

                // XQueryParser.g:252:121: ( p_DFPropertyName EQUAL p_StringLiteral )*
                loop17: do {
                    int alt17 = 2;
                    int LA17_0 = input.LA(1);

                    if (((LA17_0 >= DECIMAL_SEPARATOR && LA17_0 <= DIGIT)
                            || (LA17_0 >= GROUPING_SEPARATOR && LA17_0 <= MINUS_SIGN) || LA17_0 == NAN
                            || (LA17_0 >= PATTERN_SEPARATOR && LA17_0 <= PER_MILLE) || LA17_0 == ZERO_DIGIT)) {
                        alt17 = 1;
                    }

                    switch (alt17) {
                    case 1:
                        // XQueryParser.g:252:122: p_DFPropertyName EQUAL p_StringLiteral
                    {
                        pushFollow(FOLLOW_p_DFPropertyName_in_pm_DecimalFormatDecl1984);
                        p_DFPropertyName35 = p_DFPropertyName();

                        state._fsp--;
                        if (state.failed) {
                            return retval;
                        }
                        if (state.backtracking == 0) {
                            adaptor.addChild(root_0, p_DFPropertyName35.getTree());
                        }
                        EQUAL36 = (CommonToken)match(input, EQUAL, FOLLOW_EQUAL_in_pm_DecimalFormatDecl1986);
                        if (state.failed) {
                            return retval;
                        }
                        if (state.backtracking == 0) {
                            EQUAL36_tree = (XQDTCommonTree)adaptor.create(EQUAL36);
                            adaptor.addChild(root_0, EQUAL36_tree);
                        }
                        pushFollow(FOLLOW_p_StringLiteral_in_pm_DecimalFormatDecl1988);
                        p_StringLiteral37 = p_StringLiteral();

                        state._fsp--;
                        if (state.failed) {
                            return retval;
                        }
                        if (state.backtracking == 0) {
                            adaptor.addChild(root_0, p_StringLiteral37.getTree());
                        }

                    }
                    break;

                    default:
                        break loop17;
                    }
                } while (true);

                SEMICOLON38 = (CommonToken)match(input, SEMICOLON, FOLLOW_SEMICOLON_in_pm_DecimalFormatDecl1992);
                if (state.failed) {
                    return retval;
                }
                if (state.backtracking == 0) {
                    SEMICOLON38_tree = (XQDTCommonTree)adaptor.create(SEMICOLON38);
                    adaptor.addChild(root_0, SEMICOLON38_tree);
                }

            }

            retval.stop = input.LT(-1);

            if (state.backtracking == 0) {

                retval.tree = (XQDTCommonTree)adaptor.rulePostProcessing(root_0);
                adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        } catch (RecognitionException re) {
            reportError(re);
            recover(input, re);
            retval.tree = (XQDTCommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        } finally {
        }
        return retval;
    }

    // $ANTLR end "pm_DecimalFormatDecl"

    public static class p_DFPropertyName_return extends ParserRuleReturnScope {
        XQDTCommonTree tree;

        public Object getTree() {
            return tree;
        }
    };

    // $ANTLR start "p_DFPropertyName"
    // XQueryParser.g:256:1: p_DFPropertyName : (k= DECIMAL_SEPARATOR | k= GROUPING_SEPARATOR | k= INFINITY | k= MINUS_SIGN | k= NAN | k= PERCENT | k= PER_MILLE | k= ZERO_DIGIT | k= DIGIT | k= PATTERN_SEPARATOR ) ;
    public final XQueryParser.p_DFPropertyName_return p_DFPropertyName() throws RecognitionException {
        XQueryParser.p_DFPropertyName_return retval = new XQueryParser.p_DFPropertyName_return();
        retval.start = input.LT(1);

        XQDTCommonTree root_0 = null;

        CommonToken k = null;

        XQDTCommonTree k_tree = null;

        try {
            // XQueryParser.g:257:9: ( (k= DECIMAL_SEPARATOR | k= GROUPING_SEPARATOR | k= INFINITY | k= MINUS_SIGN | k= NAN | k= PERCENT | k= PER_MILLE | k= ZERO_DIGIT | k= DIGIT | k= PATTERN_SEPARATOR ) )
            // XQueryParser.g:257:11: (k= DECIMAL_SEPARATOR | k= GROUPING_SEPARATOR | k= INFINITY | k= MINUS_SIGN | k= NAN | k= PERCENT | k= PER_MILLE | k= ZERO_DIGIT | k= DIGIT | k= PATTERN_SEPARATOR )
            {
                root_0 = (XQDTCommonTree)adaptor.nil();

                // XQueryParser.g:257:11: (k= DECIMAL_SEPARATOR | k= GROUPING_SEPARATOR | k= INFINITY | k= MINUS_SIGN | k= NAN | k= PERCENT | k= PER_MILLE | k= ZERO_DIGIT | k= DIGIT | k= PATTERN_SEPARATOR )
                int alt18 = 10;
                switch (input.LA(1)) {
                case DECIMAL_SEPARATOR: {
                    alt18 = 1;
                }
                break;
                case GROUPING_SEPARATOR: {
                    alt18 = 2;
                }
                break;
                case INFINITY: {
                    alt18 = 3;
                }
                break;
                case MINUS_SIGN: {
                    alt18 = 4;
                }
                break;
                case NAN: {
                    alt18 = 5;
                }
                break;
                case PERCENT: {
                    alt18 = 6;
                }
                break;
                case PER_MILLE: {
                    alt18 = 7;
                }
                break;
                case ZERO_DIGIT: {
                    alt18 = 8;
                }
                break;
                case DIGIT: {
                    alt18 = 9;
                }
                break;
                case PATTERN_SEPARATOR: {
                    alt18 = 10;
                }
                break;
                default:
                    if (state.backtracking > 0) {
                        state.failed = true;
                        return retval;
                    }
                    NoViableAltException nvae = new NoViableAltException("", 18, 0, input);

                    throw nvae;
                }

                switch (alt18) {
                case 1:
                    // XQueryParser.g:257:12: k= DECIMAL_SEPARATOR
                {
                    k = (CommonToken)match(input, DECIMAL_SEPARATOR, FOLLOW_DECIMAL_SEPARATOR_in_p_DFPropertyName2021);
                    if (state.failed) {
                        return retval;
                    }
                    if (state.backtracking == 0) {
                        k_tree = (XQDTCommonTree)adaptor.create(k);
                        adaptor.addChild(root_0, k_tree);
                    }

                }
                    break;
                case 2:
                    // XQueryParser.g:257:34: k= GROUPING_SEPARATOR
                {
                    k = (CommonToken)match(input, GROUPING_SEPARATOR, FOLLOW_GROUPING_SEPARATOR_in_p_DFPropertyName2027);
                    if (state.failed) {
                        return retval;
                    }
                    if (state.backtracking == 0) {
                        k_tree = (XQDTCommonTree)adaptor.create(k);
                        adaptor.addChild(root_0, k_tree);
                    }

                }
                    break;
                case 3:
                    // XQueryParser.g:257:57: k= INFINITY
                {
                    k = (CommonToken)match(input, INFINITY, FOLLOW_INFINITY_in_p_DFPropertyName2033);
                    if (state.failed) {
                        return retval;
                    }
                    if (state.backtracking == 0) {
                        k_tree = (XQDTCommonTree)adaptor.create(k);
                        adaptor.addChild(root_0, k_tree);
                    }

                }
                    break;
                case 4:
                    // XQueryParser.g:257:70: k= MINUS_SIGN
                {
                    k = (CommonToken)match(input, MINUS_SIGN, FOLLOW_MINUS_SIGN_in_p_DFPropertyName2039);
                    if (state.failed) {
                        return retval;
                    }
                    if (state.backtracking == 0) {
                        k_tree = (XQDTCommonTree)adaptor.create(k);
                        adaptor.addChild(root_0, k_tree);
                    }

                }
                    break;
                case 5:
                    // XQueryParser.g:257:85: k= NAN
                {
                    k = (CommonToken)match(input, NAN, FOLLOW_NAN_in_p_DFPropertyName2045);
                    if (state.failed) {
                        return retval;
                    }
                    if (state.backtracking == 0) {
                        k_tree = (XQDTCommonTree)adaptor.create(k);
                        adaptor.addChild(root_0, k_tree);
                    }

                }
                    break;
                case 6:
                    // XQueryParser.g:257:93: k= PERCENT
                {
                    k = (CommonToken)match(input, PERCENT, FOLLOW_PERCENT_in_p_DFPropertyName2051);
                    if (state.failed) {
                        return retval;
                    }
                    if (state.backtracking == 0) {
                        k_tree = (XQDTCommonTree)adaptor.create(k);
                        adaptor.addChild(root_0, k_tree);
                    }

                }
                    break;
                case 7:
                    // XQueryParser.g:257:105: k= PER_MILLE
                {
                    k = (CommonToken)match(input, PER_MILLE, FOLLOW_PER_MILLE_in_p_DFPropertyName2057);
                    if (state.failed) {
                        return retval;
                    }
                    if (state.backtracking == 0) {
                        k_tree = (XQDTCommonTree)adaptor.create(k);
                        adaptor.addChild(root_0, k_tree);
                    }

                }
                    break;
                case 8:
                    // XQueryParser.g:257:119: k= ZERO_DIGIT
                {
                    k = (CommonToken)match(input, ZERO_DIGIT, FOLLOW_ZERO_DIGIT_in_p_DFPropertyName2063);
                    if (state.failed) {
                        return retval;
                    }
                    if (state.backtracking == 0) {
                        k_tree = (XQDTCommonTree)adaptor.create(k);
                        adaptor.addChild(root_0, k_tree);
                    }

                }
                    break;
                case 9:
                    // XQueryParser.g:257:134: k= DIGIT
                {
                    k = (CommonToken)match(input, DIGIT, FOLLOW_DIGIT_in_p_DFPropertyName2069);
                    if (state.failed) {
                        return retval;
                    }
                    if (state.backtracking == 0) {
                        k_tree = (XQDTCommonTree)adaptor.create(k);
                        adaptor.addChild(root_0, k_tree);
                    }

                }
                    break;
                case 10:
                    // XQueryParser.g:257:144: k= PATTERN_SEPARATOR
                {
                    k = (CommonToken)match(input, PATTERN_SEPARATOR, FOLLOW_PATTERN_SEPARATOR_in_p_DFPropertyName2075);
                    if (state.failed) {
                        return retval;
                    }
                    if (state.backtracking == 0) {
                        k_tree = (XQDTCommonTree)adaptor.create(k);
                        adaptor.addChild(root_0, k_tree);
                    }

                }
                    break;

                }

                if (state.backtracking == 0) {
                    ak(k);
                }

            }

            retval.stop = input.LT(-1);

            if (state.backtracking == 0) {

                retval.tree = (XQDTCommonTree)adaptor.rulePostProcessing(root_0);
                adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        } catch (RecognitionException re) {
            reportError(re);
            recover(input, re);
            retval.tree = (XQDTCommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        } finally {
        }
        return retval;
    }

    // $ANTLR end "p_DFPropertyName"

    public static class p_Import_return extends ParserRuleReturnScope {
        XQDTCommonTree tree;

        public Object getTree() {
            return tree;
        }
    };

    // $ANTLR start "p_Import"
    // XQueryParser.g:261:1: p_Import : ( pm_SchemaImport | pm_ModuleImport );
    public final XQueryParser.p_Import_return p_Import() throws RecognitionException {
        XQueryParser.p_Import_return retval = new XQueryParser.p_Import_return();
        retval.start = input.LT(1);

        XQDTCommonTree root_0 = null;

        XQueryParser.pm_SchemaImport_return pm_SchemaImport39 = null;

        XQueryParser.pm_ModuleImport_return pm_ModuleImport40 = null;

        try {
            // XQueryParser.g:262:9: ( pm_SchemaImport | pm_ModuleImport )
            int alt19 = 2;
            int LA19_0 = input.LA(1);

            if ((LA19_0 == IMPORT)) {
                int LA19_1 = input.LA(2);

                if ((LA19_1 == SCHEMA)) {
                    alt19 = 1;
                } else if ((LA19_1 == MODULE)) {
                    alt19 = 2;
                } else {
                    if (state.backtracking > 0) {
                        state.failed = true;
                        return retval;
                    }
                    NoViableAltException nvae = new NoViableAltException("", 19, 1, input);

                    throw nvae;
                }
            } else {
                if (state.backtracking > 0) {
                    state.failed = true;
                    return retval;
                }
                NoViableAltException nvae = new NoViableAltException("", 19, 0, input);

                throw nvae;
            }
            switch (alt19) {
            case 1:
                // XQueryParser.g:262:11: pm_SchemaImport
            {
                root_0 = (XQDTCommonTree)adaptor.nil();

                pushFollow(FOLLOW_pm_SchemaImport_in_p_Import2104);
                pm_SchemaImport39 = pm_SchemaImport();

                state._fsp--;
                if (state.failed) {
                    return retval;
                }
                if (state.backtracking == 0) {
                    adaptor.addChild(root_0, pm_SchemaImport39.getTree());
                }

            }
            break;
            case 2:
                // XQueryParser.g:262:29: pm_ModuleImport
            {
                root_0 = (XQDTCommonTree)adaptor.nil();

                pushFollow(FOLLOW_pm_ModuleImport_in_p_Import2108);
                pm_ModuleImport40 = pm_ModuleImport();

                state._fsp--;
                if (state.failed) {
                    return retval;
                }
                if (state.backtracking == 0) {
                    adaptor.addChild(root_0, pm_ModuleImport40.getTree());
                }

            }
            break;

            }
            retval.stop = input.LT(-1);

            if (state.backtracking == 0) {

                retval.tree = (XQDTCommonTree)adaptor.rulePostProcessing(root_0);
                adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        } catch (RecognitionException re) {
            reportError(re);
            recover(input, re);
            retval.tree = (XQDTCommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        } finally {
        }
        return retval;
    }

    // $ANTLR end "p_Import"

    public static class pm_SchemaImport_return extends ParserRuleReturnScope {
        XQDTCommonTree tree;

        public Object getTree() {
            return tree;
        }
    };

    // $ANTLR start "pm_SchemaImport"
    // XQueryParser.g:266:1: pm_SchemaImport : k= IMPORT k= SCHEMA (sp= p_SchemaPrefix )? us= p_StringLiteral (k= AT ah+= p_StringLiteral ( COMMA ah+= p_StringLiteral )* )? SEMICOLON -> ^( SchemaImport ^( SchemaPrefix ( $sp)? ) $us ^( AtHints ( $ah)* ) ) ;
    public final XQueryParser.pm_SchemaImport_return pm_SchemaImport() throws RecognitionException {
        XQueryParser.pm_SchemaImport_return retval = new XQueryParser.pm_SchemaImport_return();
        retval.start = input.LT(1);

        XQDTCommonTree root_0 = null;

        CommonToken k = null;
        CommonToken COMMA41 = null;
        CommonToken SEMICOLON42 = null;
        List<Object> list_ah = null;
        XQueryParser.p_SchemaPrefix_return sp = null;

        XQueryParser.p_StringLiteral_return us = null;

        RuleReturnScope ah = null;
        XQDTCommonTree k_tree = null;
        XQDTCommonTree COMMA41_tree = null;
        XQDTCommonTree SEMICOLON42_tree = null;
        RewriteRuleTokenStream stream_AT = new RewriteRuleTokenStream(adaptor, "token AT");
        RewriteRuleTokenStream stream_IMPORT = new RewriteRuleTokenStream(adaptor, "token IMPORT");
        RewriteRuleTokenStream stream_SCHEMA = new RewriteRuleTokenStream(adaptor, "token SCHEMA");
        RewriteRuleTokenStream stream_SEMICOLON = new RewriteRuleTokenStream(adaptor, "token SEMICOLON");
        RewriteRuleTokenStream stream_COMMA = new RewriteRuleTokenStream(adaptor, "token COMMA");
        RewriteRuleSubtreeStream stream_p_SchemaPrefix = new RewriteRuleSubtreeStream(adaptor, "rule p_SchemaPrefix");
        RewriteRuleSubtreeStream stream_p_StringLiteral = new RewriteRuleSubtreeStream(adaptor, "rule p_StringLiteral");
        try {
            // XQueryParser.g:267:9: (k= IMPORT k= SCHEMA (sp= p_SchemaPrefix )? us= p_StringLiteral (k= AT ah+= p_StringLiteral ( COMMA ah+= p_StringLiteral )* )? SEMICOLON -> ^( SchemaImport ^( SchemaPrefix ( $sp)? ) $us ^( AtHints ( $ah)* ) ) )
            // XQueryParser.g:267:11: k= IMPORT k= SCHEMA (sp= p_SchemaPrefix )? us= p_StringLiteral (k= AT ah+= p_StringLiteral ( COMMA ah+= p_StringLiteral )* )? SEMICOLON
            {
                k = (CommonToken)match(input, IMPORT, FOLLOW_IMPORT_in_pm_SchemaImport2144);
                if (state.failed) {
                    return retval;
                }
                if (state.backtracking == 0) {
                    stream_IMPORT.add(k);
                }

                if (state.backtracking == 0) {
                    ak(k);
                }
                k = (CommonToken)match(input, SCHEMA, FOLLOW_SCHEMA_in_pm_SchemaImport2150);
                if (state.failed) {
                    return retval;
                }
                if (state.backtracking == 0) {
                    stream_SCHEMA.add(k);
                }

                if (state.backtracking == 0) {
                    ak(k);
                }
                // XQueryParser.g:267:51: (sp= p_SchemaPrefix )?
                int alt20 = 2;
                int LA20_0 = input.LA(1);

                if ((LA20_0 == DEFAULT || LA20_0 == NAMESPACE)) {
                    alt20 = 1;
                }
                switch (alt20) {
                case 1:
                    // XQueryParser.g:267:51: sp= p_SchemaPrefix
                {
                    pushFollow(FOLLOW_p_SchemaPrefix_in_pm_SchemaImport2156);
                    sp = p_SchemaPrefix();

                    state._fsp--;
                    if (state.failed) {
                        return retval;
                    }
                    if (state.backtracking == 0) {
                        stream_p_SchemaPrefix.add(sp.getTree());
                    }

                }
                    break;

                }

                pushFollow(FOLLOW_p_StringLiteral_in_pm_SchemaImport2161);
                us = p_StringLiteral();

                state._fsp--;
                if (state.failed) {
                    return retval;
                }
                if (state.backtracking == 0) {
                    stream_p_StringLiteral.add(us.getTree());
                }
                // XQueryParser.g:267:87: (k= AT ah+= p_StringLiteral ( COMMA ah+= p_StringLiteral )* )?
                int alt22 = 2;
                int LA22_0 = input.LA(1);

                if ((LA22_0 == AT)) {
                    alt22 = 1;
                }
                switch (alt22) {
                case 1:
                    // XQueryParser.g:267:88: k= AT ah+= p_StringLiteral ( COMMA ah+= p_StringLiteral )*
                {
                    k = (CommonToken)match(input, AT, FOLLOW_AT_in_pm_SchemaImport2166);
                    if (state.failed) {
                        return retval;
                    }
                    if (state.backtracking == 0) {
                        stream_AT.add(k);
                    }

                    if (state.backtracking == 0) {
                        ak(k);
                    }
                    pushFollow(FOLLOW_p_StringLiteral_in_pm_SchemaImport2172);
                    ah = p_StringLiteral();

                    state._fsp--;
                    if (state.failed) {
                        return retval;
                    }
                    if (state.backtracking == 0) {
                        stream_p_StringLiteral.add(ah.getTree());
                    }
                    if (list_ah == null) {
                        list_ah = new ArrayList<Object>();
                    }
                    list_ah.add(ah.getTree());

                    // XQueryParser.g:267:123: ( COMMA ah+= p_StringLiteral )*
                    loop21: do {
                        int alt21 = 2;
                        int LA21_0 = input.LA(1);

                        if ((LA21_0 == COMMA)) {
                            alt21 = 1;
                        }

                        switch (alt21) {
                        case 1:
                            // XQueryParser.g:267:124: COMMA ah+= p_StringLiteral
                        {
                            COMMA41 = (CommonToken)match(input, COMMA, FOLLOW_COMMA_in_pm_SchemaImport2175);
                            if (state.failed) {
                                return retval;
                            }
                            if (state.backtracking == 0) {
                                stream_COMMA.add(COMMA41);
                            }

                            pushFollow(FOLLOW_p_StringLiteral_in_pm_SchemaImport2179);
                            ah = p_StringLiteral();

                            state._fsp--;
                            if (state.failed) {
                                return retval;
                            }
                            if (state.backtracking == 0) {
                                stream_p_StringLiteral.add(ah.getTree());
                            }
                            if (list_ah == null) {
                                list_ah = new ArrayList<Object>();
                            }
                            list_ah.add(ah.getTree());

                        }
                        break;

                        default:
                            break loop21;
                        }
                    } while (true);

                }
                    break;

                }

                SEMICOLON42 = (CommonToken)match(input, SEMICOLON, FOLLOW_SEMICOLON_in_pm_SchemaImport2185);
                if (state.failed) {
                    return retval;
                }
                if (state.backtracking == 0) {
                    stream_SEMICOLON.add(SEMICOLON42);
                }

                // AST REWRITE
                // elements: sp, ah, us
                // token labels:
                // rule labels: retval, sp, us
                // token list labels:
                // rule list labels: ah
                // wildcard labels:
                if (state.backtracking == 0) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval = new RewriteRuleSubtreeStream(adaptor, "rule retval",
                            retval != null ? retval.tree : null);
                    RewriteRuleSubtreeStream stream_sp = new RewriteRuleSubtreeStream(adaptor, "rule sp",
                            sp != null ? sp.tree : null);
                    RewriteRuleSubtreeStream stream_us = new RewriteRuleSubtreeStream(adaptor, "rule us",
                            us != null ? us.tree : null);
                    RewriteRuleSubtreeStream stream_ah = new RewriteRuleSubtreeStream(adaptor, "token ah", list_ah);
                    root_0 = (XQDTCommonTree)adaptor.nil();
                    // 268:17: -> ^( SchemaImport ^( SchemaPrefix ( $sp)? ) $us ^( AtHints ( $ah)* ) )
                    {
                        // XQueryParser.g:268:20: ^( SchemaImport ^( SchemaPrefix ( $sp)? ) $us ^( AtHints ( $ah)* ) )
                        {
                            XQDTCommonTree root_1 = (XQDTCommonTree)adaptor.nil();
                            root_1 = (XQDTCommonTree)adaptor.becomeRoot(adaptor.create(SchemaImport, "SchemaImport"),
                                    root_1);

                            // XQueryParser.g:268:35: ^( SchemaPrefix ( $sp)? )
                            {
                                XQDTCommonTree root_2 = (XQDTCommonTree)adaptor.nil();
                                root_2 = (XQDTCommonTree)adaptor.becomeRoot(
                                        adaptor.create(SchemaPrefix, "SchemaPrefix"), root_2);

                                // XQueryParser.g:268:50: ( $sp)?
                                if (stream_sp.hasNext()) {
                                    adaptor.addChild(root_2, stream_sp.nextTree());

                                }
                                stream_sp.reset();

                                adaptor.addChild(root_1, root_2);
                            }
                            adaptor.addChild(root_1, stream_us.nextTree());
                            // XQueryParser.g:268:60: ^( AtHints ( $ah)* )
                            {
                                XQDTCommonTree root_2 = (XQDTCommonTree)adaptor.nil();
                                root_2 = (XQDTCommonTree)adaptor.becomeRoot(adaptor.create(AtHints, "AtHints"), root_2);

                                // XQueryParser.g:268:70: ( $ah)*
                                while (stream_ah.hasNext()) {
                                    adaptor.addChild(root_2, stream_ah.nextTree());

                                }
                                stream_ah.reset();

                                adaptor.addChild(root_1, root_2);
                            }

                            adaptor.addChild(root_0, root_1);
                        }

                    }

                    retval.tree = root_0;
                }
            }

            retval.stop = input.LT(-1);

            if (state.backtracking == 0) {

                retval.tree = (XQDTCommonTree)adaptor.rulePostProcessing(root_0);
                adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        } catch (RecognitionException re) {
            reportError(re);
            recover(input, re);
            retval.tree = (XQDTCommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        } finally {
        }
        return retval;
    }

    // $ANTLR end "pm_SchemaImport"

    public static class p_SchemaPrefix_return extends ParserRuleReturnScope {
        XQDTCommonTree tree;

        public Object getTree() {
            return tree;
        }
    };

    // $ANTLR start "p_SchemaPrefix"
    // XQueryParser.g:272:1: p_SchemaPrefix : (k= NAMESPACE nn= p_NCName EQUAL -> ^( NamespaceName $nn) | k= DEFAULT k= ELEMENT k= NAMESPACE -> DefaultElementNamespace );
    public final XQueryParser.p_SchemaPrefix_return p_SchemaPrefix() throws RecognitionException {
        XQueryParser.p_SchemaPrefix_return retval = new XQueryParser.p_SchemaPrefix_return();
        retval.start = input.LT(1);

        XQDTCommonTree root_0 = null;

        CommonToken k = null;
        CommonToken EQUAL43 = null;
        XQueryParser.p_NCName_return nn = null;

        XQDTCommonTree k_tree = null;
        XQDTCommonTree EQUAL43_tree = null;
        RewriteRuleTokenStream stream_ELEMENT = new RewriteRuleTokenStream(adaptor, "token ELEMENT");
        RewriteRuleTokenStream stream_NAMESPACE = new RewriteRuleTokenStream(adaptor, "token NAMESPACE");
        RewriteRuleTokenStream stream_EQUAL = new RewriteRuleTokenStream(adaptor, "token EQUAL");
        RewriteRuleTokenStream stream_DEFAULT = new RewriteRuleTokenStream(adaptor, "token DEFAULT");
        RewriteRuleSubtreeStream stream_p_NCName = new RewriteRuleSubtreeStream(adaptor, "rule p_NCName");
        try {
            // XQueryParser.g:273:9: (k= NAMESPACE nn= p_NCName EQUAL -> ^( NamespaceName $nn) | k= DEFAULT k= ELEMENT k= NAMESPACE -> DefaultElementNamespace )
            int alt23 = 2;
            int LA23_0 = input.LA(1);

            if ((LA23_0 == NAMESPACE)) {
                alt23 = 1;
            } else if ((LA23_0 == DEFAULT)) {
                alt23 = 2;
            } else {
                if (state.backtracking > 0) {
                    state.failed = true;
                    return retval;
                }
                NoViableAltException nvae = new NoViableAltException("", 23, 0, input);

                throw nvae;
            }
            switch (alt23) {
            case 1:
                // XQueryParser.g:273:11: k= NAMESPACE nn= p_NCName EQUAL
            {
                k = (CommonToken)match(input, NAMESPACE, FOLLOW_NAMESPACE_in_p_SchemaPrefix2255);
                if (state.failed) {
                    return retval;
                }
                if (state.backtracking == 0) {
                    stream_NAMESPACE.add(k);
                }

                if (state.backtracking == 0) {
                    ak(k);
                }
                pushFollow(FOLLOW_p_NCName_in_p_SchemaPrefix2261);
                nn = p_NCName();

                state._fsp--;
                if (state.failed) {
                    return retval;
                }
                if (state.backtracking == 0) {
                    stream_p_NCName.add(nn.getTree());
                }
                EQUAL43 = (CommonToken)match(input, EQUAL, FOLLOW_EQUAL_in_p_SchemaPrefix2263);
                if (state.failed) {
                    return retval;
                }
                if (state.backtracking == 0) {
                    stream_EQUAL.add(EQUAL43);
                }

                // AST REWRITE
                // elements: nn
                // token labels:
                // rule labels: retval, nn
                // token list labels:
                // rule list labels:
                // wildcard labels:
                if (state.backtracking == 0) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval = new RewriteRuleSubtreeStream(adaptor, "rule retval",
                            retval != null ? retval.tree : null);
                    RewriteRuleSubtreeStream stream_nn = new RewriteRuleSubtreeStream(adaptor, "rule nn",
                            nn != null ? nn.tree : null);

                    root_0 = (XQDTCommonTree)adaptor.nil();
                    // 274:17: -> ^( NamespaceName $nn)
                    {
                        // XQueryParser.g:274:20: ^( NamespaceName $nn)
                        {
                            XQDTCommonTree root_1 = (XQDTCommonTree)adaptor.nil();
                            root_1 = (XQDTCommonTree)adaptor.becomeRoot(adaptor.create(NamespaceName, "NamespaceName"),
                                    root_1);

                            adaptor.addChild(root_1, stream_nn.nextTree());

                            adaptor.addChild(root_0, root_1);
                        }

                    }

                    retval.tree = root_0;
                }
            }
            break;
            case 2:
                // XQueryParser.g:275:11: k= DEFAULT k= ELEMENT k= NAMESPACE
            {
                k = (CommonToken)match(input, DEFAULT, FOLLOW_DEFAULT_in_p_SchemaPrefix2302);
                if (state.failed) {
                    return retval;
                }
                if (state.backtracking == 0) {
                    stream_DEFAULT.add(k);
                }

                if (state.backtracking == 0) {
                    ak(k);
                }
                k = (CommonToken)match(input, ELEMENT, FOLLOW_ELEMENT_in_p_SchemaPrefix2308);
                if (state.failed) {
                    return retval;
                }
                if (state.backtracking == 0) {
                    stream_ELEMENT.add(k);
                }

                if (state.backtracking == 0) {
                    ak(k);
                }
                k = (CommonToken)match(input, NAMESPACE, FOLLOW_NAMESPACE_in_p_SchemaPrefix2314);
                if (state.failed) {
                    return retval;
                }
                if (state.backtracking == 0) {
                    stream_NAMESPACE.add(k);
                }

                if (state.backtracking == 0) {
                    ak(k);
                }

                // AST REWRITE
                // elements:
                // token labels:
                // rule labels: retval
                // token list labels:
                // rule list labels:
                // wildcard labels:
                if (state.backtracking == 0) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval = new RewriteRuleSubtreeStream(adaptor, "rule retval",
                            retval != null ? retval.tree : null);

                    root_0 = (XQDTCommonTree)adaptor.nil();
                    // 276:17: -> DefaultElementNamespace
                    {
                        adaptor.addChild(root_0, adaptor.create(DefaultElementNamespace, "DefaultElementNamespace"));

                    }

                    retval.tree = root_0;
                }
            }
            break;

            }
            retval.stop = input.LT(-1);

            if (state.backtracking == 0) {

                retval.tree = (XQDTCommonTree)adaptor.rulePostProcessing(root_0);
                adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        } catch (RecognitionException re) {
            reportError(re);
            recover(input, re);
            retval.tree = (XQDTCommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        } finally {
        }
        return retval;
    }

    // $ANTLR end "p_SchemaPrefix"

    public static class pm_ModuleImport_return extends ParserRuleReturnScope {
        XQDTCommonTree tree;

        public Object getTree() {
            return tree;
        }
    };

    // $ANTLR start "pm_ModuleImport"
    // XQueryParser.g:280:1: pm_ModuleImport : k= IMPORT k= MODULE (k= NAMESPACE nn= p_NCName EQUAL )? us= p_StringLiteral (k= AT ah+= p_StringLiteral ( COMMA ah+= p_StringLiteral )* )? SEMICOLON -> ^( ModuleImport ^( NamespaceName ( $nn)? ) $us ^( AtHints ( $ah)* ) ) ;
    public final XQueryParser.pm_ModuleImport_return pm_ModuleImport() throws RecognitionException {
        XQueryParser.pm_ModuleImport_return retval = new XQueryParser.pm_ModuleImport_return();
        retval.start = input.LT(1);

        XQDTCommonTree root_0 = null;

        CommonToken k = null;
        CommonToken EQUAL44 = null;
        CommonToken COMMA45 = null;
        CommonToken SEMICOLON46 = null;
        List<Object> list_ah = null;
        XQueryParser.p_NCName_return nn = null;

        XQueryParser.p_StringLiteral_return us = null;

        RuleReturnScope ah = null;
        XQDTCommonTree k_tree = null;
        XQDTCommonTree EQUAL44_tree = null;
        XQDTCommonTree COMMA45_tree = null;
        XQDTCommonTree SEMICOLON46_tree = null;
        RewriteRuleTokenStream stream_AT = new RewriteRuleTokenStream(adaptor, "token AT");
        RewriteRuleTokenStream stream_IMPORT = new RewriteRuleTokenStream(adaptor, "token IMPORT");
        RewriteRuleTokenStream stream_SEMICOLON = new RewriteRuleTokenStream(adaptor, "token SEMICOLON");
        RewriteRuleTokenStream stream_MODULE = new RewriteRuleTokenStream(adaptor, "token MODULE");
        RewriteRuleTokenStream stream_COMMA = new RewriteRuleTokenStream(adaptor, "token COMMA");
        RewriteRuleTokenStream stream_NAMESPACE = new RewriteRuleTokenStream(adaptor, "token NAMESPACE");
        RewriteRuleTokenStream stream_EQUAL = new RewriteRuleTokenStream(adaptor, "token EQUAL");
        RewriteRuleSubtreeStream stream_p_NCName = new RewriteRuleSubtreeStream(adaptor, "rule p_NCName");
        RewriteRuleSubtreeStream stream_p_StringLiteral = new RewriteRuleSubtreeStream(adaptor, "rule p_StringLiteral");
        try {
            // XQueryParser.g:281:9: (k= IMPORT k= MODULE (k= NAMESPACE nn= p_NCName EQUAL )? us= p_StringLiteral (k= AT ah+= p_StringLiteral ( COMMA ah+= p_StringLiteral )* )? SEMICOLON -> ^( ModuleImport ^( NamespaceName ( $nn)? ) $us ^( AtHints ( $ah)* ) ) )
            // XQueryParser.g:281:11: k= IMPORT k= MODULE (k= NAMESPACE nn= p_NCName EQUAL )? us= p_StringLiteral (k= AT ah+= p_StringLiteral ( COMMA ah+= p_StringLiteral )* )? SEMICOLON
            {
                k = (CommonToken)match(input, IMPORT, FOLLOW_IMPORT_in_pm_ModuleImport2364);
                if (state.failed) {
                    return retval;
                }
                if (state.backtracking == 0) {
                    stream_IMPORT.add(k);
                }

                if (state.backtracking == 0) {
                    ak(k);
                }
                k = (CommonToken)match(input, MODULE, FOLLOW_MODULE_in_pm_ModuleImport2370);
                if (state.failed) {
                    return retval;
                }
                if (state.backtracking == 0) {
                    stream_MODULE.add(k);
                }

                if (state.backtracking == 0) {
                    ak(k);
                }
                // XQueryParser.g:281:49: (k= NAMESPACE nn= p_NCName EQUAL )?
                int alt24 = 2;
                int LA24_0 = input.LA(1);

                if ((LA24_0 == NAMESPACE)) {
                    alt24 = 1;
                }
                switch (alt24) {
                case 1:
                    // XQueryParser.g:281:50: k= NAMESPACE nn= p_NCName EQUAL
                {
                    k = (CommonToken)match(input, NAMESPACE, FOLLOW_NAMESPACE_in_pm_ModuleImport2377);
                    if (state.failed) {
                        return retval;
                    }
                    if (state.backtracking == 0) {
                        stream_NAMESPACE.add(k);
                    }

                    if (state.backtracking == 0) {
                        ak(k);
                    }
                    pushFollow(FOLLOW_p_NCName_in_pm_ModuleImport2383);
                    nn = p_NCName();

                    state._fsp--;
                    if (state.failed) {
                        return retval;
                    }
                    if (state.backtracking == 0) {
                        stream_p_NCName.add(nn.getTree());
                    }
                    EQUAL44 = (CommonToken)match(input, EQUAL, FOLLOW_EQUAL_in_pm_ModuleImport2385);
                    if (state.failed) {
                        return retval;
                    }
                    if (state.backtracking == 0) {
                        stream_EQUAL.add(EQUAL44);
                    }

                }
                    break;

                }

                pushFollow(FOLLOW_p_StringLiteral_in_pm_ModuleImport2391);
                us = p_StringLiteral();

                state._fsp--;
                if (state.failed) {
                    return retval;
                }
                if (state.backtracking == 0) {
                    stream_p_StringLiteral.add(us.getTree());
                }
                // XQueryParser.g:281:111: (k= AT ah+= p_StringLiteral ( COMMA ah+= p_StringLiteral )* )?
                int alt26 = 2;
                int LA26_0 = input.LA(1);

                if ((LA26_0 == AT)) {
                    alt26 = 1;
                }
                switch (alt26) {
                case 1:
                    // XQueryParser.g:281:112: k= AT ah+= p_StringLiteral ( COMMA ah+= p_StringLiteral )*
                {
                    k = (CommonToken)match(input, AT, FOLLOW_AT_in_pm_ModuleImport2396);
                    if (state.failed) {
                        return retval;
                    }
                    if (state.backtracking == 0) {
                        stream_AT.add(k);
                    }

                    if (state.backtracking == 0) {
                        ak(k);
                    }
                    pushFollow(FOLLOW_p_StringLiteral_in_pm_ModuleImport2402);
                    ah = p_StringLiteral();

                    state._fsp--;
                    if (state.failed) {
                        return retval;
                    }
                    if (state.backtracking == 0) {
                        stream_p_StringLiteral.add(ah.getTree());
                    }
                    if (list_ah == null) {
                        list_ah = new ArrayList<Object>();
                    }
                    list_ah.add(ah.getTree());

                    // XQueryParser.g:281:147: ( COMMA ah+= p_StringLiteral )*
                    loop25: do {
                        int alt25 = 2;
                        int LA25_0 = input.LA(1);

                        if ((LA25_0 == COMMA)) {
                            alt25 = 1;
                        }

                        switch (alt25) {
                        case 1:
                            // XQueryParser.g:281:148: COMMA ah+= p_StringLiteral
                        {
                            COMMA45 = (CommonToken)match(input, COMMA, FOLLOW_COMMA_in_pm_ModuleImport2405);
                            if (state.failed) {
                                return retval;
                            }
                            if (state.backtracking == 0) {
                                stream_COMMA.add(COMMA45);
                            }

                            pushFollow(FOLLOW_p_StringLiteral_in_pm_ModuleImport2409);
                            ah = p_StringLiteral();

                            state._fsp--;
                            if (state.failed) {
                                return retval;
                            }
                            if (state.backtracking == 0) {
                                stream_p_StringLiteral.add(ah.getTree());
                            }
                            if (list_ah == null) {
                                list_ah = new ArrayList<Object>();
                            }
                            list_ah.add(ah.getTree());

                        }
                        break;

                        default:
                            break loop25;
                        }
                    } while (true);

                }
                    break;

                }

                SEMICOLON46 = (CommonToken)match(input, SEMICOLON, FOLLOW_SEMICOLON_in_pm_ModuleImport2415);
                if (state.failed) {
                    return retval;
                }
                if (state.backtracking == 0) {
                    stream_SEMICOLON.add(SEMICOLON46);
                }

                // AST REWRITE
                // elements: ah, us, nn
                // token labels:
                // rule labels: retval, nn, us
                // token list labels:
                // rule list labels: ah
                // wildcard labels:
                if (state.backtracking == 0) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval = new RewriteRuleSubtreeStream(adaptor, "rule retval",
                            retval != null ? retval.tree : null);
                    RewriteRuleSubtreeStream stream_nn = new RewriteRuleSubtreeStream(adaptor, "rule nn",
                            nn != null ? nn.tree : null);
                    RewriteRuleSubtreeStream stream_us = new RewriteRuleSubtreeStream(adaptor, "rule us",
                            us != null ? us.tree : null);
                    RewriteRuleSubtreeStream stream_ah = new RewriteRuleSubtreeStream(adaptor, "token ah", list_ah);
                    root_0 = (XQDTCommonTree)adaptor.nil();
                    // 282:17: -> ^( ModuleImport ^( NamespaceName ( $nn)? ) $us ^( AtHints ( $ah)* ) )
                    {
                        // XQueryParser.g:282:20: ^( ModuleImport ^( NamespaceName ( $nn)? ) $us ^( AtHints ( $ah)* ) )
                        {
                            XQDTCommonTree root_1 = (XQDTCommonTree)adaptor.nil();
                            root_1 = (XQDTCommonTree)adaptor.becomeRoot(adaptor.create(ModuleImport, "ModuleImport"),
                                    root_1);

                            // XQueryParser.g:282:35: ^( NamespaceName ( $nn)? )
                            {
                                XQDTCommonTree root_2 = (XQDTCommonTree)adaptor.nil();
                                root_2 = (XQDTCommonTree)adaptor.becomeRoot(
                                        adaptor.create(NamespaceName, "NamespaceName"), root_2);

                                // XQueryParser.g:282:51: ( $nn)?
                                if (stream_nn.hasNext()) {
                                    adaptor.addChild(root_2, stream_nn.nextTree());

                                }
                                stream_nn.reset();

                                adaptor.addChild(root_1, root_2);
                            }
                            adaptor.addChild(root_1, stream_us.nextTree());
                            // XQueryParser.g:282:61: ^( AtHints ( $ah)* )
                            {
                                XQDTCommonTree root_2 = (XQDTCommonTree)adaptor.nil();
                                root_2 = (XQDTCommonTree)adaptor.becomeRoot(adaptor.create(AtHints, "AtHints"), root_2);

                                // XQueryParser.g:282:71: ( $ah)*
                                while (stream_ah.hasNext()) {
                                    adaptor.addChild(root_2, stream_ah.nextTree());

                                }
                                stream_ah.reset();

                                adaptor.addChild(root_1, root_2);
                            }

                            adaptor.addChild(root_0, root_1);
                        }

                    }

                    retval.tree = root_0;
                }
            }

            retval.stop = input.LT(-1);

            if (state.backtracking == 0) {

                retval.tree = (XQDTCommonTree)adaptor.rulePostProcessing(root_0);
                adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        } catch (RecognitionException re) {
            reportError(re);
            recover(input, re);
            retval.tree = (XQDTCommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        } finally {
        }
        return retval;
    }

    // $ANTLR end "pm_ModuleImport"

    public static class pm_NamespaceDecl_return extends ParserRuleReturnScope {
        XQDTCommonTree tree;

        public Object getTree() {
            return tree;
        }
    };

    // $ANTLR start "pm_NamespaceDecl"
    // XQueryParser.g:286:1: pm_NamespaceDecl : k= DECLARE k= NAMESPACE nn= p_NCName EQUAL us= p_StringLiteral SEMICOLON -> ^( NamespaceDecl $nn $us) ;
    public final XQueryParser.pm_NamespaceDecl_return pm_NamespaceDecl() throws RecognitionException {
        XQueryParser.pm_NamespaceDecl_return retval = new XQueryParser.pm_NamespaceDecl_return();
        retval.start = input.LT(1);

        XQDTCommonTree root_0 = null;

        CommonToken k = null;
        CommonToken EQUAL47 = null;
        CommonToken SEMICOLON48 = null;
        XQueryParser.p_NCName_return nn = null;

        XQueryParser.p_StringLiteral_return us = null;

        XQDTCommonTree k_tree = null;
        XQDTCommonTree EQUAL47_tree = null;
        XQDTCommonTree SEMICOLON48_tree = null;
        RewriteRuleTokenStream stream_DECLARE = new RewriteRuleTokenStream(adaptor, "token DECLARE");
        RewriteRuleTokenStream stream_SEMICOLON = new RewriteRuleTokenStream(adaptor, "token SEMICOLON");
        RewriteRuleTokenStream stream_NAMESPACE = new RewriteRuleTokenStream(adaptor, "token NAMESPACE");
        RewriteRuleTokenStream stream_EQUAL = new RewriteRuleTokenStream(adaptor, "token EQUAL");
        RewriteRuleSubtreeStream stream_p_NCName = new RewriteRuleSubtreeStream(adaptor, "rule p_NCName");
        RewriteRuleSubtreeStream stream_p_StringLiteral = new RewriteRuleSubtreeStream(adaptor, "rule p_StringLiteral");
        try {
            // XQueryParser.g:287:9: (k= DECLARE k= NAMESPACE nn= p_NCName EQUAL us= p_StringLiteral SEMICOLON -> ^( NamespaceDecl $nn $us) )
            // XQueryParser.g:287:11: k= DECLARE k= NAMESPACE nn= p_NCName EQUAL us= p_StringLiteral SEMICOLON
            {
                k = (CommonToken)match(input, DECLARE, FOLLOW_DECLARE_in_pm_NamespaceDecl2484);
                if (state.failed) {
                    return retval;
                }
                if (state.backtracking == 0) {
                    stream_DECLARE.add(k);
                }

                if (state.backtracking == 0) {
                    ak(k);
                }
                k = (CommonToken)match(input, NAMESPACE, FOLLOW_NAMESPACE_in_pm_NamespaceDecl2490);
                if (state.failed) {
                    return retval;
                }
                if (state.backtracking == 0) {
                    stream_NAMESPACE.add(k);
                }

                if (state.backtracking == 0) {
                    ak(k);
                }
                pushFollow(FOLLOW_p_NCName_in_pm_NamespaceDecl2496);
                nn = p_NCName();

                state._fsp--;
                if (state.failed) {
                    return retval;
                }
                if (state.backtracking == 0) {
                    stream_p_NCName.add(nn.getTree());
                }
                EQUAL47 = (CommonToken)match(input, EQUAL, FOLLOW_EQUAL_in_pm_NamespaceDecl2498);
                if (state.failed) {
                    return retval;
                }
                if (state.backtracking == 0) {
                    stream_EQUAL.add(EQUAL47);
                }

                pushFollow(FOLLOW_p_StringLiteral_in_pm_NamespaceDecl2502);
                us = p_StringLiteral();

                state._fsp--;
                if (state.failed) {
                    return retval;
                }
                if (state.backtracking == 0) {
                    stream_p_StringLiteral.add(us.getTree());
                }
                SEMICOLON48 = (CommonToken)match(input, SEMICOLON, FOLLOW_SEMICOLON_in_pm_NamespaceDecl2504);
                if (state.failed) {
                    return retval;
                }
                if (state.backtracking == 0) {
                    stream_SEMICOLON.add(SEMICOLON48);
                }

                // AST REWRITE
                // elements: us, nn
                // token labels:
                // rule labels: retval, nn, us
                // token list labels:
                // rule list labels:
                // wildcard labels:
                if (state.backtracking == 0) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval = new RewriteRuleSubtreeStream(adaptor, "rule retval",
                            retval != null ? retval.tree : null);
                    RewriteRuleSubtreeStream stream_nn = new RewriteRuleSubtreeStream(adaptor, "rule nn",
                            nn != null ? nn.tree : null);
                    RewriteRuleSubtreeStream stream_us = new RewriteRuleSubtreeStream(adaptor, "rule us",
                            us != null ? us.tree : null);

                    root_0 = (XQDTCommonTree)adaptor.nil();
                    // 288:17: -> ^( NamespaceDecl $nn $us)
                    {
                        // XQueryParser.g:288:20: ^( NamespaceDecl $nn $us)
                        {
                            XQDTCommonTree root_1 = (XQDTCommonTree)adaptor.nil();
                            root_1 = (XQDTCommonTree)adaptor.becomeRoot(adaptor.create(NamespaceDecl, "NamespaceDecl"),
                                    root_1);

                            adaptor.addChild(root_1, stream_nn.nextTree());
                            adaptor.addChild(root_1, stream_us.nextTree());

                            adaptor.addChild(root_0, root_1);
                        }

                    }

                    retval.tree = root_0;
                }
            }

            retval.stop = input.LT(-1);

            if (state.backtracking == 0) {

                retval.tree = (XQDTCommonTree)adaptor.rulePostProcessing(root_0);
                adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        } catch (RecognitionException re) {
            reportError(re);
            recover(input, re);
            retval.tree = (XQDTCommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        } finally {
        }
        return retval;
    }

    // $ANTLR end "pm_NamespaceDecl"

    public static class pm_DefaultNamespaceDecl_return extends ParserRuleReturnScope {
        XQDTCommonTree tree;

        public Object getTree() {
            return tree;
        }
    };

    // $ANTLR start "pm_DefaultNamespaceDecl"
    // XQueryParser.g:292:1: pm_DefaultNamespaceDecl : k= DECLARE k= DEFAULT (k= ELEMENT | k= FUNCTION ) k= NAMESPACE p_StringLiteral SEMICOLON ;
    public final XQueryParser.pm_DefaultNamespaceDecl_return pm_DefaultNamespaceDecl() throws RecognitionException {
        XQueryParser.pm_DefaultNamespaceDecl_return retval = new XQueryParser.pm_DefaultNamespaceDecl_return();
        retval.start = input.LT(1);

        XQDTCommonTree root_0 = null;

        CommonToken k = null;
        CommonToken SEMICOLON50 = null;
        XQueryParser.p_StringLiteral_return p_StringLiteral49 = null;

        XQDTCommonTree k_tree = null;
        XQDTCommonTree SEMICOLON50_tree = null;

        try {
            // XQueryParser.g:293:9: (k= DECLARE k= DEFAULT (k= ELEMENT | k= FUNCTION ) k= NAMESPACE p_StringLiteral SEMICOLON )
            // XQueryParser.g:293:11: k= DECLARE k= DEFAULT (k= ELEMENT | k= FUNCTION ) k= NAMESPACE p_StringLiteral SEMICOLON
            {
                root_0 = (XQDTCommonTree)adaptor.nil();

                k = (CommonToken)match(input, DECLARE, FOLLOW_DECLARE_in_pm_DefaultNamespaceDecl2561);
                if (state.failed) {
                    return retval;
                }
                if (state.backtracking == 0) {
                    k_tree = (XQDTCommonTree)adaptor.create(k);
                    adaptor.addChild(root_0, k_tree);
                }
                if (state.backtracking == 0) {
                    ak(k);
                }
                k = (CommonToken)match(input, DEFAULT, FOLLOW_DEFAULT_in_pm_DefaultNamespaceDecl2567);
                if (state.failed) {
                    return retval;
                }
                if (state.backtracking == 0) {
                    k_tree = (XQDTCommonTree)adaptor.create(k);
                    adaptor.addChild(root_0, k_tree);
                }
                if (state.backtracking == 0) {
                    ak(k);
                }
                // XQueryParser.g:293:51: (k= ELEMENT | k= FUNCTION )
                int alt27 = 2;
                int LA27_0 = input.LA(1);

                if ((LA27_0 == ELEMENT)) {
                    alt27 = 1;
                } else if ((LA27_0 == FUNCTION)) {
                    alt27 = 2;
                } else {
                    if (state.backtracking > 0) {
                        state.failed = true;
                        return retval;
                    }
                    NoViableAltException nvae = new NoViableAltException("", 27, 0, input);

                    throw nvae;
                }
                switch (alt27) {
                case 1:
                    // XQueryParser.g:293:52: k= ELEMENT
                {
                    k = (CommonToken)match(input, ELEMENT, FOLLOW_ELEMENT_in_pm_DefaultNamespaceDecl2574);
                    if (state.failed) {
                        return retval;
                    }
                    if (state.backtracking == 0) {
                        k_tree = (XQDTCommonTree)adaptor.create(k);
                        adaptor.addChild(root_0, k_tree);
                    }

                }
                    break;
                case 2:
                    // XQueryParser.g:293:64: k= FUNCTION
                {
                    k = (CommonToken)match(input, FUNCTION, FOLLOW_FUNCTION_in_pm_DefaultNamespaceDecl2580);
                    if (state.failed) {
                        return retval;
                    }
                    if (state.backtracking == 0) {
                        k_tree = (XQDTCommonTree)adaptor.create(k);
                        adaptor.addChild(root_0, k_tree);
                    }

                }
                    break;

                }

                if (state.backtracking == 0) {
                    ak(k);
                }
                k = (CommonToken)match(input, NAMESPACE, FOLLOW_NAMESPACE_in_pm_DefaultNamespaceDecl2587);
                if (state.failed) {
                    return retval;
                }
                if (state.backtracking == 0) {
                    k_tree = (XQDTCommonTree)adaptor.create(k);
                    adaptor.addChild(root_0, k_tree);
                }
                if (state.backtracking == 0) {
                    ak(k);
                }
                pushFollow(FOLLOW_p_StringLiteral_in_pm_DefaultNamespaceDecl2591);
                p_StringLiteral49 = p_StringLiteral();

                state._fsp--;
                if (state.failed) {
                    return retval;
                }
                if (state.backtracking == 0) {
                    adaptor.addChild(root_0, p_StringLiteral49.getTree());
                }
                SEMICOLON50 = (CommonToken)match(input, SEMICOLON, FOLLOW_SEMICOLON_in_pm_DefaultNamespaceDecl2593);
                if (state.failed) {
                    return retval;
                }
                if (state.backtracking == 0) {
                    SEMICOLON50_tree = (XQDTCommonTree)adaptor.create(SEMICOLON50);
                    adaptor.addChild(root_0, SEMICOLON50_tree);
                }

            }

            retval.stop = input.LT(-1);

            if (state.backtracking == 0) {

                retval.tree = (XQDTCommonTree)adaptor.rulePostProcessing(root_0);
                adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        } catch (RecognitionException re) {
            reportError(re);
            recover(input, re);
            retval.tree = (XQDTCommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        } finally {
        }
        return retval;
    }

    // $ANTLR end "pm_DefaultNamespaceDecl"

    public static class pm_AnnotatedDecl_return extends ParserRuleReturnScope {
        XQDTCommonTree tree;

        public Object getTree() {
            return tree;
        }
    };

    // $ANTLR start "pm_AnnotatedDecl"
    // XQueryParser.g:297:1: pm_AnnotatedDecl : k= DECLARE ( p_Annotation )* pg_AnnotatedDecl SEMICOLON ;
    public final XQueryParser.pm_AnnotatedDecl_return pm_AnnotatedDecl() throws RecognitionException {
        XQueryParser.pm_AnnotatedDecl_return retval = new XQueryParser.pm_AnnotatedDecl_return();
        retval.start = input.LT(1);

        XQDTCommonTree root_0 = null;

        CommonToken k = null;
        CommonToken SEMICOLON53 = null;
        XQueryParser.p_Annotation_return p_Annotation51 = null;

        XQueryParser.pg_AnnotatedDecl_return pg_AnnotatedDecl52 = null;

        XQDTCommonTree k_tree = null;
        XQDTCommonTree SEMICOLON53_tree = null;

        try {
            // XQueryParser.g:298:9: (k= DECLARE ( p_Annotation )* pg_AnnotatedDecl SEMICOLON )
            // XQueryParser.g:298:11: k= DECLARE ( p_Annotation )* pg_AnnotatedDecl SEMICOLON
            {
                root_0 = (XQDTCommonTree)adaptor.nil();

                k = (CommonToken)match(input, DECLARE, FOLLOW_DECLARE_in_pm_AnnotatedDecl2621);
                if (state.failed) {
                    return retval;
                }
                if (state.backtracking == 0) {
                    k_tree = (XQDTCommonTree)adaptor.create(k);
                    adaptor.addChild(root_0, k_tree);
                }
                if (state.backtracking == 0) {
                    ak(k);
                }
                // XQueryParser.g:298:31: ( p_Annotation )*
                loop28: do {
                    int alt28 = 2;
                    int LA28_0 = input.LA(1);

                    if ((LA28_0 == ANN_PERCENT)) {
                        alt28 = 1;
                    }

                    switch (alt28) {
                    case 1:
                        // XQueryParser.g:298:31: p_Annotation
                    {
                        pushFollow(FOLLOW_p_Annotation_in_pm_AnnotatedDecl2625);
                        p_Annotation51 = p_Annotation();

                        state._fsp--;
                        if (state.failed) {
                            return retval;
                        }
                        if (state.backtracking == 0) {
                            adaptor.addChild(root_0, p_Annotation51.getTree());
                        }

                    }
                    break;

                    default:
                        break loop28;
                    }
                } while (true);

                pushFollow(FOLLOW_pg_AnnotatedDecl_in_pm_AnnotatedDecl2628);
                pg_AnnotatedDecl52 = pg_AnnotatedDecl();

                state._fsp--;
                if (state.failed) {
                    return retval;
                }
                if (state.backtracking == 0) {
                    adaptor.addChild(root_0, pg_AnnotatedDecl52.getTree());
                }
                SEMICOLON53 = (CommonToken)match(input, SEMICOLON, FOLLOW_SEMICOLON_in_pm_AnnotatedDecl2630);
                if (state.failed) {
                    return retval;
                }
                if (state.backtracking == 0) {
                    SEMICOLON53_tree = (XQDTCommonTree)adaptor.create(SEMICOLON53);
                    adaptor.addChild(root_0, SEMICOLON53_tree);
                }

            }

            retval.stop = input.LT(-1);

            if (state.backtracking == 0) {

                retval.tree = (XQDTCommonTree)adaptor.rulePostProcessing(root_0);
                adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        } catch (RecognitionException re) {
            reportError(re);
            recover(input, re);
            retval.tree = (XQDTCommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        } finally {
        }
        return retval;
    }

    // $ANTLR end "pm_AnnotatedDecl"

    public static class pg_AnnotatedDecl_return extends ParserRuleReturnScope {
        XQDTCommonTree tree;

        public Object getTree() {
            return tree;
        }
    };

    // $ANTLR start "pg_AnnotatedDecl"
    // XQueryParser.g:300:1: pg_AnnotatedDecl : ( p_VarDecl | pm_FunctionDecl | {...}? => p_CollectionDecl | {...}? => p_IndexDecl | {...}? => p_ICDecl );
    public final XQueryParser.pg_AnnotatedDecl_return pg_AnnotatedDecl() throws RecognitionException {
        XQueryParser.pg_AnnotatedDecl_return retval = new XQueryParser.pg_AnnotatedDecl_return();
        retval.start = input.LT(1);

        XQDTCommonTree root_0 = null;

        XQueryParser.p_VarDecl_return p_VarDecl54 = null;

        XQueryParser.pm_FunctionDecl_return pm_FunctionDecl55 = null;

        XQueryParser.p_CollectionDecl_return p_CollectionDecl56 = null;

        XQueryParser.p_IndexDecl_return p_IndexDecl57 = null;

        XQueryParser.p_ICDecl_return p_ICDecl58 = null;

        try {
            // XQueryParser.g:301:9: ( p_VarDecl | pm_FunctionDecl | {...}? => p_CollectionDecl | {...}? => p_IndexDecl | {...}? => p_ICDecl )
            int alt29 = 5;
            int LA29_0 = input.LA(1);

            if ((LA29_0 == VARIABLE)) {
                alt29 = 1;
            } else if ((LA29_0 == UPDATING) && ((lc(XQU)))) {
                alt29 = 2;
            } else if ((LA29_0 == FUNCTION)) {
                alt29 = 2;
            } else if ((LA29_0 == COLLECTION) && ((lc(ZORBA)))) {
                alt29 = 3;
            } else if ((LA29_0 == INDEX) && ((lc(ZORBA)))) {
                alt29 = 4;
            } else if ((LA29_0 == INTEGRITY) && ((lc(ZORBA)))) {
                alt29 = 5;
            } else {
                if (state.backtracking > 0) {
                    state.failed = true;
                    return retval;
                }
                NoViableAltException nvae = new NoViableAltException("", 29, 0, input);

                throw nvae;
            }
            switch (alt29) {
            case 1:
                // XQueryParser.g:301:11: p_VarDecl
            {
                root_0 = (XQDTCommonTree)adaptor.nil();

                pushFollow(FOLLOW_p_VarDecl_in_pg_AnnotatedDecl2654);
                p_VarDecl54 = p_VarDecl();

                state._fsp--;
                if (state.failed) {
                    return retval;
                }
                if (state.backtracking == 0) {
                    adaptor.addChild(root_0, p_VarDecl54.getTree());
                }

            }
            break;
            case 2:
                // XQueryParser.g:302:11: pm_FunctionDecl
            {
                root_0 = (XQDTCommonTree)adaptor.nil();

                pushFollow(FOLLOW_pm_FunctionDecl_in_pg_AnnotatedDecl2666);
                pm_FunctionDecl55 = pm_FunctionDecl();

                state._fsp--;
                if (state.failed) {
                    return retval;
                }
                if (state.backtracking == 0) {
                    adaptor.addChild(root_0, pm_FunctionDecl55.getTree());
                }

            }
            break;
            case 3:
                // XQueryParser.g:303:11: {...}? => p_CollectionDecl
            {
                root_0 = (XQDTCommonTree)adaptor.nil();

                if (!((lc(ZORBA)))) {
                    if (state.backtracking > 0) {
                        state.failed = true;
                        return retval;
                    }
                    throw new FailedPredicateException(input, "pg_AnnotatedDecl", "lc(ZORBA)");
                }
                pushFollow(FOLLOW_p_CollectionDecl_in_pg_AnnotatedDecl2681);
                p_CollectionDecl56 = p_CollectionDecl();

                state._fsp--;
                if (state.failed) {
                    return retval;
                }
                if (state.backtracking == 0) {
                    adaptor.addChild(root_0, p_CollectionDecl56.getTree());
                }

            }
            break;
            case 4:
                // XQueryParser.g:304:11: {...}? => p_IndexDecl
            {
                root_0 = (XQDTCommonTree)adaptor.nil();

                if (!((lc(ZORBA)))) {
                    if (state.backtracking > 0) {
                        state.failed = true;
                        return retval;
                    }
                    throw new FailedPredicateException(input, "pg_AnnotatedDecl", "lc(ZORBA)");
                }
                pushFollow(FOLLOW_p_IndexDecl_in_pg_AnnotatedDecl2696);
                p_IndexDecl57 = p_IndexDecl();

                state._fsp--;
                if (state.failed) {
                    return retval;
                }
                if (state.backtracking == 0) {
                    adaptor.addChild(root_0, p_IndexDecl57.getTree());
                }

            }
            break;
            case 5:
                // XQueryParser.g:305:11: {...}? => p_ICDecl
            {
                root_0 = (XQDTCommonTree)adaptor.nil();

                if (!((lc(ZORBA)))) {
                    if (state.backtracking > 0) {
                        state.failed = true;
                        return retval;
                    }
                    throw new FailedPredicateException(input, "pg_AnnotatedDecl", "lc(ZORBA)");
                }
                pushFollow(FOLLOW_p_ICDecl_in_pg_AnnotatedDecl2711);
                p_ICDecl58 = p_ICDecl();

                state._fsp--;
                if (state.failed) {
                    return retval;
                }
                if (state.backtracking == 0) {
                    adaptor.addChild(root_0, p_ICDecl58.getTree());
                }

            }
            break;

            }
            retval.stop = input.LT(-1);

            if (state.backtracking == 0) {

                retval.tree = (XQDTCommonTree)adaptor.rulePostProcessing(root_0);
                adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        } catch (RecognitionException re) {
            reportError(re);
            recover(input, re);
            retval.tree = (XQDTCommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        } finally {
        }
        return retval;
    }

    // $ANTLR end "pg_AnnotatedDecl"

    public static class p_Annotation_return extends ParserRuleReturnScope {
        XQDTCommonTree tree;

        public Object getTree() {
            return tree;
        }
    };

    // $ANTLR start "p_Annotation"
    // XQueryParser.g:309:1: p_Annotation : ANN_PERCENT p_QName ( LPAREN p_Literal ( COMMA p_Literal )* RPAREN )? ;
    public final XQueryParser.p_Annotation_return p_Annotation() throws RecognitionException {
        XQueryParser.p_Annotation_return retval = new XQueryParser.p_Annotation_return();
        retval.start = input.LT(1);

        XQDTCommonTree root_0 = null;

        CommonToken ANN_PERCENT59 = null;
        CommonToken LPAREN61 = null;
        CommonToken COMMA63 = null;
        CommonToken RPAREN65 = null;
        XQueryParser.p_QName_return p_QName60 = null;

        XQueryParser.p_Literal_return p_Literal62 = null;

        XQueryParser.p_Literal_return p_Literal64 = null;

        XQDTCommonTree ANN_PERCENT59_tree = null;
        XQDTCommonTree LPAREN61_tree = null;
        XQDTCommonTree COMMA63_tree = null;
        XQDTCommonTree RPAREN65_tree = null;

        try {
            // XQueryParser.g:310:9: ( ANN_PERCENT p_QName ( LPAREN p_Literal ( COMMA p_Literal )* RPAREN )? )
            // XQueryParser.g:310:11: ANN_PERCENT p_QName ( LPAREN p_Literal ( COMMA p_Literal )* RPAREN )?
            {
                root_0 = (XQDTCommonTree)adaptor.nil();

                ANN_PERCENT59 = (CommonToken)match(input, ANN_PERCENT, FOLLOW_ANN_PERCENT_in_p_Annotation2737);
                if (state.failed) {
                    return retval;
                }
                if (state.backtracking == 0) {
                    ANN_PERCENT59_tree = (XQDTCommonTree)adaptor.create(ANN_PERCENT59);
                    adaptor.addChild(root_0, ANN_PERCENT59_tree);
                }
                pushFollow(FOLLOW_p_QName_in_p_Annotation2739);
                p_QName60 = p_QName();

                state._fsp--;
                if (state.failed) {
                    return retval;
                }
                if (state.backtracking == 0) {
                    adaptor.addChild(root_0, p_QName60.getTree());
                }
                // XQueryParser.g:310:31: ( LPAREN p_Literal ( COMMA p_Literal )* RPAREN )?
                int alt31 = 2;
                int LA31_0 = input.LA(1);

                if ((LA31_0 == LPAREN)) {
                    alt31 = 1;
                }
                switch (alt31) {
                case 1:
                    // XQueryParser.g:310:32: LPAREN p_Literal ( COMMA p_Literal )* RPAREN
                {
                    LPAREN61 = (CommonToken)match(input, LPAREN, FOLLOW_LPAREN_in_p_Annotation2742);
                    if (state.failed) {
                        return retval;
                    }
                    if (state.backtracking == 0) {
                        LPAREN61_tree = (XQDTCommonTree)adaptor.create(LPAREN61);
                        adaptor.addChild(root_0, LPAREN61_tree);
                    }
                    pushFollow(FOLLOW_p_Literal_in_p_Annotation2744);
                    p_Literal62 = p_Literal();

                    state._fsp--;
                    if (state.failed) {
                        return retval;
                    }
                    if (state.backtracking == 0) {
                        adaptor.addChild(root_0, p_Literal62.getTree());
                    }
                    // XQueryParser.g:310:49: ( COMMA p_Literal )*
                    loop30: do {
                        int alt30 = 2;
                        int LA30_0 = input.LA(1);

                        if ((LA30_0 == COMMA)) {
                            alt30 = 1;
                        }

                        switch (alt30) {
                        case 1:
                            // XQueryParser.g:310:50: COMMA p_Literal
                        {
                            COMMA63 = (CommonToken)match(input, COMMA, FOLLOW_COMMA_in_p_Annotation2747);
                            if (state.failed) {
                                return retval;
                            }
                            if (state.backtracking == 0) {
                                COMMA63_tree = (XQDTCommonTree)adaptor.create(COMMA63);
                                adaptor.addChild(root_0, COMMA63_tree);
                            }
                            pushFollow(FOLLOW_p_Literal_in_p_Annotation2749);
                            p_Literal64 = p_Literal();

                            state._fsp--;
                            if (state.failed) {
                                return retval;
                            }
                            if (state.backtracking == 0) {
                                adaptor.addChild(root_0, p_Literal64.getTree());
                            }

                        }
                        break;

                        default:
                            break loop30;
                        }
                    } while (true);

                    RPAREN65 = (CommonToken)match(input, RPAREN, FOLLOW_RPAREN_in_p_Annotation2753);
                    if (state.failed) {
                        return retval;
                    }
                    if (state.backtracking == 0) {
                        RPAREN65_tree = (XQDTCommonTree)adaptor.create(RPAREN65);
                        adaptor.addChild(root_0, RPAREN65_tree);
                    }

                }
                    break;

                }

            }

            retval.stop = input.LT(-1);

            if (state.backtracking == 0) {

                retval.tree = (XQDTCommonTree)adaptor.rulePostProcessing(root_0);
                adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        } catch (RecognitionException re) {
            reportError(re);
            recover(input, re);
            retval.tree = (XQDTCommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        } finally {
        }
        return retval;
    }

    // $ANTLR end "p_Annotation"

    public static class p_VarDecl_return extends ParserRuleReturnScope {
        XQDTCommonTree tree;

        public Object getTree() {
            return tree;
        }
    };

    // $ANTLR start "p_VarDecl"
    // XQueryParser.g:314:1: p_VarDecl : k= VARIABLE DOLLAR qn= p_QName (td= p_TypeDeclaration )? ( ( BIND vv= p_VarValue ) | (k= EXTERNAL ( BIND vdv= p_VarDefaultValue )? ) ) -> ^( VarDecl $qn ^( VarType ( $td)? ) ^( VarValue ( $vv)? ^( VarDefaultValue ( $vdv)? ) ) ) ;
    public final XQueryParser.p_VarDecl_return p_VarDecl() throws RecognitionException {
        XQueryParser.p_VarDecl_return retval = new XQueryParser.p_VarDecl_return();
        retval.start = input.LT(1);

        XQDTCommonTree root_0 = null;

        CommonToken k = null;
        CommonToken DOLLAR66 = null;
        CommonToken BIND67 = null;
        CommonToken BIND68 = null;
        XQueryParser.p_QName_return qn = null;

        XQueryParser.p_TypeDeclaration_return td = null;

        XQueryParser.p_VarValue_return vv = null;

        XQueryParser.p_VarDefaultValue_return vdv = null;

        XQDTCommonTree k_tree = null;
        XQDTCommonTree DOLLAR66_tree = null;
        XQDTCommonTree BIND67_tree = null;
        XQDTCommonTree BIND68_tree = null;
        RewriteRuleTokenStream stream_DOLLAR = new RewriteRuleTokenStream(adaptor, "token DOLLAR");
        RewriteRuleTokenStream stream_EXTERNAL = new RewriteRuleTokenStream(adaptor, "token EXTERNAL");
        RewriteRuleTokenStream stream_VARIABLE = new RewriteRuleTokenStream(adaptor, "token VARIABLE");
        RewriteRuleTokenStream stream_BIND = new RewriteRuleTokenStream(adaptor, "token BIND");
        RewriteRuleSubtreeStream stream_p_TypeDeclaration = new RewriteRuleSubtreeStream(adaptor,
                "rule p_TypeDeclaration");
        RewriteRuleSubtreeStream stream_p_QName = new RewriteRuleSubtreeStream(adaptor, "rule p_QName");
        RewriteRuleSubtreeStream stream_p_VarDefaultValue = new RewriteRuleSubtreeStream(adaptor,
                "rule p_VarDefaultValue");
        RewriteRuleSubtreeStream stream_p_VarValue = new RewriteRuleSubtreeStream(adaptor, "rule p_VarValue");
        try {
            // XQueryParser.g:315:9: (k= VARIABLE DOLLAR qn= p_QName (td= p_TypeDeclaration )? ( ( BIND vv= p_VarValue ) | (k= EXTERNAL ( BIND vdv= p_VarDefaultValue )? ) ) -> ^( VarDecl $qn ^( VarType ( $td)? ) ^( VarValue ( $vv)? ^( VarDefaultValue ( $vdv)? ) ) ) )
            // XQueryParser.g:315:11: k= VARIABLE DOLLAR qn= p_QName (td= p_TypeDeclaration )? ( ( BIND vv= p_VarValue ) | (k= EXTERNAL ( BIND vdv= p_VarDefaultValue )? ) )
            {
                k = (CommonToken)match(input, VARIABLE, FOLLOW_VARIABLE_in_p_VarDecl2783);
                if (state.failed) {
                    return retval;
                }
                if (state.backtracking == 0) {
                    stream_VARIABLE.add(k);
                }

                if (state.backtracking == 0) {
                    ak(k);
                }
                DOLLAR66 = (CommonToken)match(input, DOLLAR, FOLLOW_DOLLAR_in_p_VarDecl2787);
                if (state.failed) {
                    return retval;
                }
                if (state.backtracking == 0) {
                    stream_DOLLAR.add(DOLLAR66);
                }

                pushFollow(FOLLOW_p_QName_in_p_VarDecl2791);
                qn = p_QName();

                state._fsp--;
                if (state.failed) {
                    return retval;
                }
                if (state.backtracking == 0) {
                    stream_p_QName.add(qn.getTree());
                }
                // XQueryParser.g:315:52: (td= p_TypeDeclaration )?
                int alt32 = 2;
                int LA32_0 = input.LA(1);

                if ((LA32_0 == AS)) {
                    alt32 = 1;
                }
                switch (alt32) {
                case 1:
                    // XQueryParser.g:315:52: td= p_TypeDeclaration
                {
                    pushFollow(FOLLOW_p_TypeDeclaration_in_p_VarDecl2795);
                    td = p_TypeDeclaration();

                    state._fsp--;
                    if (state.failed) {
                        return retval;
                    }
                    if (state.backtracking == 0) {
                        stream_p_TypeDeclaration.add(td.getTree());
                    }

                }
                    break;

                }

                // XQueryParser.g:315:72: ( ( BIND vv= p_VarValue ) | (k= EXTERNAL ( BIND vdv= p_VarDefaultValue )? ) )
                int alt34 = 2;
                int LA34_0 = input.LA(1);

                if ((LA34_0 == BIND)) {
                    alt34 = 1;
                } else if ((LA34_0 == EXTERNAL)) {
                    alt34 = 2;
                } else {
                    if (state.backtracking > 0) {
                        state.failed = true;
                        return retval;
                    }
                    NoViableAltException nvae = new NoViableAltException("", 34, 0, input);

                    throw nvae;
                }
                switch (alt34) {
                case 1:
                    // XQueryParser.g:315:73: ( BIND vv= p_VarValue )
                {
                    // XQueryParser.g:315:73: ( BIND vv= p_VarValue )
                    // XQueryParser.g:315:74: BIND vv= p_VarValue
                    {
                        BIND67 = (CommonToken)match(input, BIND, FOLLOW_BIND_in_p_VarDecl2800);
                        if (state.failed) {
                            return retval;
                        }
                        if (state.backtracking == 0) {
                            stream_BIND.add(BIND67);
                        }

                        pushFollow(FOLLOW_p_VarValue_in_p_VarDecl2804);
                        vv = p_VarValue();

                        state._fsp--;
                        if (state.failed) {
                            return retval;
                        }
                        if (state.backtracking == 0) {
                            stream_p_VarValue.add(vv.getTree());
                        }

                    }

                }
                    break;
                case 2:
                    // XQueryParser.g:315:96: (k= EXTERNAL ( BIND vdv= p_VarDefaultValue )? )
                {
                    // XQueryParser.g:315:96: (k= EXTERNAL ( BIND vdv= p_VarDefaultValue )? )
                    // XQueryParser.g:315:97: k= EXTERNAL ( BIND vdv= p_VarDefaultValue )?
                    {
                        k = (CommonToken)match(input, EXTERNAL, FOLLOW_EXTERNAL_in_p_VarDecl2812);
                        if (state.failed) {
                            return retval;
                        }
                        if (state.backtracking == 0) {
                            stream_EXTERNAL.add(k);
                        }

                        if (state.backtracking == 0) {
                            ak(k);
                        }
                        // XQueryParser.g:315:118: ( BIND vdv= p_VarDefaultValue )?
                        int alt33 = 2;
                        int LA33_0 = input.LA(1);

                        if ((LA33_0 == BIND)) {
                            alt33 = 1;
                        }
                        switch (alt33) {
                        case 1:
                            // XQueryParser.g:315:119: BIND vdv= p_VarDefaultValue
                        {
                            BIND68 = (CommonToken)match(input, BIND, FOLLOW_BIND_in_p_VarDecl2817);
                            if (state.failed) {
                                return retval;
                            }
                            if (state.backtracking == 0) {
                                stream_BIND.add(BIND68);
                            }

                            pushFollow(FOLLOW_p_VarDefaultValue_in_p_VarDecl2821);
                            vdv = p_VarDefaultValue();

                            state._fsp--;
                            if (state.failed) {
                                return retval;
                            }
                            if (state.backtracking == 0) {
                                stream_p_VarDefaultValue.add(vdv.getTree());
                            }

                        }
                            break;

                        }

                    }

                }
                    break;

                }

                // AST REWRITE
                // elements: vdv, vv, qn, td
                // token labels:
                // rule labels: qn, vv, retval, vdv, td
                // token list labels:
                // rule list labels:
                // wildcard labels:
                if (state.backtracking == 0) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_qn = new RewriteRuleSubtreeStream(adaptor, "rule qn",
                            qn != null ? qn.tree : null);
                    RewriteRuleSubtreeStream stream_vv = new RewriteRuleSubtreeStream(adaptor, "rule vv",
                            vv != null ? vv.tree : null);
                    RewriteRuleSubtreeStream stream_retval = new RewriteRuleSubtreeStream(adaptor, "rule retval",
                            retval != null ? retval.tree : null);
                    RewriteRuleSubtreeStream stream_vdv = new RewriteRuleSubtreeStream(adaptor, "rule vdv",
                            vdv != null ? vdv.tree : null);
                    RewriteRuleSubtreeStream stream_td = new RewriteRuleSubtreeStream(adaptor, "rule td",
                            td != null ? td.tree : null);

                    root_0 = (XQDTCommonTree)adaptor.nil();
                    // 316:17: -> ^( VarDecl $qn ^( VarType ( $td)? ) ^( VarValue ( $vv)? ^( VarDefaultValue ( $vdv)? ) ) )
                    {
                        // XQueryParser.g:316:20: ^( VarDecl $qn ^( VarType ( $td)? ) ^( VarValue ( $vv)? ^( VarDefaultValue ( $vdv)? ) ) )
                        {
                            XQDTCommonTree root_1 = (XQDTCommonTree)adaptor.nil();
                            root_1 = (XQDTCommonTree)adaptor.becomeRoot(adaptor.create(VarDecl, "VarDecl"), root_1);

                            adaptor.addChild(root_1, stream_qn.nextTree());
                            // XQueryParser.g:316:34: ^( VarType ( $td)? )
                            {
                                XQDTCommonTree root_2 = (XQDTCommonTree)adaptor.nil();
                                root_2 = (XQDTCommonTree)adaptor.becomeRoot(adaptor.create(VarType, "VarType"), root_2);

                                // XQueryParser.g:316:44: ( $td)?
                                if (stream_td.hasNext()) {
                                    adaptor.addChild(root_2, stream_td.nextTree());

                                }
                                stream_td.reset();

                                adaptor.addChild(root_1, root_2);
                            }
                            // XQueryParser.g:316:50: ^( VarValue ( $vv)? ^( VarDefaultValue ( $vdv)? ) )
                            {
                                XQDTCommonTree root_2 = (XQDTCommonTree)adaptor.nil();
                                root_2 = (XQDTCommonTree)adaptor.becomeRoot(adaptor.create(VarValue, "VarValue"),
                                        root_2);

                                // XQueryParser.g:316:61: ( $vv)?
                                if (stream_vv.hasNext()) {
                                    adaptor.addChild(root_2, stream_vv.nextTree());

                                }
                                stream_vv.reset();
                                // XQueryParser.g:316:66: ^( VarDefaultValue ( $vdv)? )
                                {
                                    XQDTCommonTree root_3 = (XQDTCommonTree)adaptor.nil();
                                    root_3 = (XQDTCommonTree)adaptor.becomeRoot(
                                            adaptor.create(VarDefaultValue, "VarDefaultValue"), root_3);

                                    // XQueryParser.g:316:84: ( $vdv)?
                                    if (stream_vdv.hasNext()) {
                                        adaptor.addChild(root_3, stream_vdv.nextTree());

                                    }
                                    stream_vdv.reset();

                                    adaptor.addChild(root_2, root_3);
                                }

                                adaptor.addChild(root_1, root_2);
                            }

                            adaptor.addChild(root_0, root_1);
                        }

                    }

                    retval.tree = root_0;
                }
            }

            retval.stop = input.LT(-1);

            if (state.backtracking == 0) {

                retval.tree = (XQDTCommonTree)adaptor.rulePostProcessing(root_0);
                adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        } catch (RecognitionException re) {
            reportError(re);
            recover(input, re);
            retval.tree = (XQDTCommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        } finally {
        }
        return retval;
    }

    // $ANTLR end "p_VarDecl"

    public static class p_VarValue_return extends ParserRuleReturnScope {
        XQDTCommonTree tree;

        public Object getTree() {
            return tree;
        }
    };

    // $ANTLR start "p_VarValue"
    // XQueryParser.g:320:1: p_VarValue : p_ExprSingle[true] ;
    public final XQueryParser.p_VarValue_return p_VarValue() throws RecognitionException {
        XQueryParser.p_VarValue_return retval = new XQueryParser.p_VarValue_return();
        retval.start = input.LT(1);

        XQDTCommonTree root_0 = null;

        XQueryParser.p_ExprSingle_return p_ExprSingle69 = null;

        try {
            // XQueryParser.g:321:9: ( p_ExprSingle[true] )
            // XQueryParser.g:321:11: p_ExprSingle[true]
            {
                root_0 = (XQDTCommonTree)adaptor.nil();

                pushFollow(FOLLOW_p_ExprSingle_in_p_VarValue2900);
                p_ExprSingle69 = p_ExprSingle(true);

                state._fsp--;
                if (state.failed) {
                    return retval;
                }
                if (state.backtracking == 0) {
                    adaptor.addChild(root_0, p_ExprSingle69.getTree());
                }

            }

            retval.stop = input.LT(-1);

            if (state.backtracking == 0) {

                retval.tree = (XQDTCommonTree)adaptor.rulePostProcessing(root_0);
                adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        } catch (RecognitionException re) {
            reportError(re);
            recover(input, re);
            retval.tree = (XQDTCommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        } finally {
        }
        return retval;
    }

    // $ANTLR end "p_VarValue"

    public static class p_VarDefaultValue_return extends ParserRuleReturnScope {
        XQDTCommonTree tree;

        public Object getTree() {
            return tree;
        }
    };

    // $ANTLR start "p_VarDefaultValue"
    // XQueryParser.g:325:1: p_VarDefaultValue : p_ExprSingle[true] ;
    public final XQueryParser.p_VarDefaultValue_return p_VarDefaultValue() throws RecognitionException {
        XQueryParser.p_VarDefaultValue_return retval = new XQueryParser.p_VarDefaultValue_return();
        retval.start = input.LT(1);

        XQDTCommonTree root_0 = null;

        XQueryParser.p_ExprSingle_return p_ExprSingle70 = null;

        try {
            // XQueryParser.g:326:9: ( p_ExprSingle[true] )
            // XQueryParser.g:326:11: p_ExprSingle[true]
            {
                root_0 = (XQDTCommonTree)adaptor.nil();

                pushFollow(FOLLOW_p_ExprSingle_in_p_VarDefaultValue2927);
                p_ExprSingle70 = p_ExprSingle(true);

                state._fsp--;
                if (state.failed) {
                    return retval;
                }
                if (state.backtracking == 0) {
                    adaptor.addChild(root_0, p_ExprSingle70.getTree());
                }

            }

            retval.stop = input.LT(-1);

            if (state.backtracking == 0) {

                retval.tree = (XQDTCommonTree)adaptor.rulePostProcessing(root_0);
                adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        } catch (RecognitionException re) {
            reportError(re);
            recover(input, re);
            retval.tree = (XQDTCommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        } finally {
        }
        return retval;
    }

    // $ANTLR end "p_VarDefaultValue"

    public static class pm_ContextItemDecl_return extends ParserRuleReturnScope {
        XQDTCommonTree tree;

        public Object getTree() {
            return tree;
        }
    };

    // $ANTLR start "pm_ContextItemDecl"
    // XQueryParser.g:330:1: pm_ContextItemDecl : k= DECLARE k= CONTEXT k= ITEM (k= AS p_ItemType )? ( ( BIND p_VarValue ) | (k= EXTERNAL ( BIND p_VarDefaultValue )? ) ) SEMICOLON ;
    public final XQueryParser.pm_ContextItemDecl_return pm_ContextItemDecl() throws RecognitionException {
        XQueryParser.pm_ContextItemDecl_return retval = new XQueryParser.pm_ContextItemDecl_return();
        retval.start = input.LT(1);

        XQDTCommonTree root_0 = null;

        CommonToken k = null;
        CommonToken BIND72 = null;
        CommonToken BIND74 = null;
        CommonToken SEMICOLON76 = null;
        XQueryParser.p_ItemType_return p_ItemType71 = null;

        XQueryParser.p_VarValue_return p_VarValue73 = null;

        XQueryParser.p_VarDefaultValue_return p_VarDefaultValue75 = null;

        XQDTCommonTree k_tree = null;
        XQDTCommonTree BIND72_tree = null;
        XQDTCommonTree BIND74_tree = null;
        XQDTCommonTree SEMICOLON76_tree = null;

        try {
            // XQueryParser.g:331:9: (k= DECLARE k= CONTEXT k= ITEM (k= AS p_ItemType )? ( ( BIND p_VarValue ) | (k= EXTERNAL ( BIND p_VarDefaultValue )? ) ) SEMICOLON )
            // XQueryParser.g:331:11: k= DECLARE k= CONTEXT k= ITEM (k= AS p_ItemType )? ( ( BIND p_VarValue ) | (k= EXTERNAL ( BIND p_VarDefaultValue )? ) ) SEMICOLON
            {
                root_0 = (XQDTCommonTree)adaptor.nil();

                k = (CommonToken)match(input, DECLARE, FOLLOW_DECLARE_in_pm_ContextItemDecl2956);
                if (state.failed) {
                    return retval;
                }
                if (state.backtracking == 0) {
                    k_tree = (XQDTCommonTree)adaptor.create(k);
                    adaptor.addChild(root_0, k_tree);
                }
                if (state.backtracking == 0) {
                    ak(k);
                }
                k = (CommonToken)match(input, CONTEXT, FOLLOW_CONTEXT_in_pm_ContextItemDecl2962);
                if (state.failed) {
                    return retval;
                }
                if (state.backtracking == 0) {
                    k_tree = (XQDTCommonTree)adaptor.create(k);
                    adaptor.addChild(root_0, k_tree);
                }
                if (state.backtracking == 0) {
                    ak(k);
                }
                k = (CommonToken)match(input, ITEM, FOLLOW_ITEM_in_pm_ContextItemDecl2968);
                if (state.failed) {
                    return retval;
                }
                if (state.backtracking == 0) {
                    k_tree = (XQDTCommonTree)adaptor.create(k);
                    adaptor.addChild(root_0, k_tree);
                }
                if (state.backtracking == 0) {
                    ak(k);
                }
                // XQueryParser.g:331:68: (k= AS p_ItemType )?
                int alt35 = 2;
                int LA35_0 = input.LA(1);

                if ((LA35_0 == AS)) {
                    alt35 = 1;
                }
                switch (alt35) {
                case 1:
                    // XQueryParser.g:331:69: k= AS p_ItemType
                {
                    k = (CommonToken)match(input, AS, FOLLOW_AS_in_pm_ContextItemDecl2975);
                    if (state.failed) {
                        return retval;
                    }
                    if (state.backtracking == 0) {
                        k_tree = (XQDTCommonTree)adaptor.create(k);
                        adaptor.addChild(root_0, k_tree);
                    }
                    if (state.backtracking == 0) {
                        ak(k);
                    }
                    pushFollow(FOLLOW_p_ItemType_in_pm_ContextItemDecl2979);
                    p_ItemType71 = p_ItemType();

                    state._fsp--;
                    if (state.failed) {
                        return retval;
                    }
                    if (state.backtracking == 0) {
                        adaptor.addChild(root_0, p_ItemType71.getTree());
                    }

                }
                    break;

                }

                // XQueryParser.g:331:97: ( ( BIND p_VarValue ) | (k= EXTERNAL ( BIND p_VarDefaultValue )? ) )
                int alt37 = 2;
                int LA37_0 = input.LA(1);

                if ((LA37_0 == BIND)) {
                    alt37 = 1;
                } else if ((LA37_0 == EXTERNAL)) {
                    alt37 = 2;
                } else {
                    if (state.backtracking > 0) {
                        state.failed = true;
                        return retval;
                    }
                    NoViableAltException nvae = new NoViableAltException("", 37, 0, input);

                    throw nvae;
                }
                switch (alt37) {
                case 1:
                    // XQueryParser.g:331:98: ( BIND p_VarValue )
                {
                    // XQueryParser.g:331:98: ( BIND p_VarValue )
                    // XQueryParser.g:331:99: BIND p_VarValue
                    {
                        BIND72 = (CommonToken)match(input, BIND, FOLLOW_BIND_in_pm_ContextItemDecl2985);
                        if (state.failed) {
                            return retval;
                        }
                        if (state.backtracking == 0) {
                            BIND72_tree = (XQDTCommonTree)adaptor.create(BIND72);
                            adaptor.addChild(root_0, BIND72_tree);
                        }
                        pushFollow(FOLLOW_p_VarValue_in_pm_ContextItemDecl2987);
                        p_VarValue73 = p_VarValue();

                        state._fsp--;
                        if (state.failed) {
                            return retval;
                        }
                        if (state.backtracking == 0) {
                            adaptor.addChild(root_0, p_VarValue73.getTree());
                        }

                    }

                }
                    break;
                case 2:
                    // XQueryParser.g:331:118: (k= EXTERNAL ( BIND p_VarDefaultValue )? )
                {
                    // XQueryParser.g:331:118: (k= EXTERNAL ( BIND p_VarDefaultValue )? )
                    // XQueryParser.g:331:119: k= EXTERNAL ( BIND p_VarDefaultValue )?
                    {
                        k = (CommonToken)match(input, EXTERNAL, FOLLOW_EXTERNAL_in_pm_ContextItemDecl2995);
                        if (state.failed) {
                            return retval;
                        }
                        if (state.backtracking == 0) {
                            k_tree = (XQDTCommonTree)adaptor.create(k);
                            adaptor.addChild(root_0, k_tree);
                        }
                        if (state.backtracking == 0) {
                            ak(k);
                        }
                        // XQueryParser.g:331:140: ( BIND p_VarDefaultValue )?
                        int alt36 = 2;
                        int LA36_0 = input.LA(1);

                        if ((LA36_0 == BIND)) {
                            alt36 = 1;
                        }
                        switch (alt36) {
                        case 1:
                            // XQueryParser.g:331:141: BIND p_VarDefaultValue
                        {
                            BIND74 = (CommonToken)match(input, BIND, FOLLOW_BIND_in_pm_ContextItemDecl3000);
                            if (state.failed) {
                                return retval;
                            }
                            if (state.backtracking == 0) {
                                BIND74_tree = (XQDTCommonTree)adaptor.create(BIND74);
                                adaptor.addChild(root_0, BIND74_tree);
                            }
                            pushFollow(FOLLOW_p_VarDefaultValue_in_pm_ContextItemDecl3002);
                            p_VarDefaultValue75 = p_VarDefaultValue();

                            state._fsp--;
                            if (state.failed) {
                                return retval;
                            }
                            if (state.backtracking == 0) {
                                adaptor.addChild(root_0, p_VarDefaultValue75.getTree());
                            }

                        }
                            break;

                        }

                    }

                }
                    break;

                }

                SEMICOLON76 = (CommonToken)match(input, SEMICOLON, FOLLOW_SEMICOLON_in_pm_ContextItemDecl3008);
                if (state.failed) {
                    return retval;
                }
                if (state.backtracking == 0) {
                    SEMICOLON76_tree = (XQDTCommonTree)adaptor.create(SEMICOLON76);
                    adaptor.addChild(root_0, SEMICOLON76_tree);
                }

            }

            retval.stop = input.LT(-1);

            if (state.backtracking == 0) {

                retval.tree = (XQDTCommonTree)adaptor.rulePostProcessing(root_0);
                adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        } catch (RecognitionException re) {
            reportError(re);
            recover(input, re);
            retval.tree = (XQDTCommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        } finally {
        }
        return retval;
    }

    // $ANTLR end "pm_ContextItemDecl"

    public static class pm_FunctionDecl_return extends ParserRuleReturnScope {
        XQDTCommonTree tree;

        public Object getTree() {
            return tree;
        }
    };

    // $ANTLR start "pm_FunctionDecl"
    // XQueryParser.g:336:1: pm_FunctionDecl : ({...}? =>k= UPDATING )? k= FUNCTION qn= pg_FQName LPAREN (pl= p_ParamList )? RPAREN (k= AS st= p_SequenceType )? ( LBRACKET soe= p_StatementsAndOptionalExpr RBRACKET | k= EXTERNAL ) -> ^( FunctionDecl $qn ^( ParamList ( $pl)? ) ^( ReturnType ( $st)? ) ( $soe)? ) ;
    public final XQueryParser.pm_FunctionDecl_return pm_FunctionDecl() throws RecognitionException {
        XQueryParser.pm_FunctionDecl_return retval = new XQueryParser.pm_FunctionDecl_return();
        retval.start = input.LT(1);

        XQDTCommonTree root_0 = null;

        CommonToken k = null;
        CommonToken LPAREN77 = null;
        CommonToken RPAREN78 = null;
        CommonToken LBRACKET79 = null;
        CommonToken RBRACKET80 = null;
        XQueryParser.pg_FQName_return qn = null;

        XQueryParser.p_ParamList_return pl = null;

        XQueryParser.p_SequenceType_return st = null;

        XQueryParser.p_StatementsAndOptionalExpr_return soe = null;

        XQDTCommonTree k_tree = null;
        XQDTCommonTree LPAREN77_tree = null;
        XQDTCommonTree RPAREN78_tree = null;
        XQDTCommonTree LBRACKET79_tree = null;
        XQDTCommonTree RBRACKET80_tree = null;
        RewriteRuleTokenStream stream_FUNCTION = new RewriteRuleTokenStream(adaptor, "token FUNCTION");
        RewriteRuleTokenStream stream_LBRACKET = new RewriteRuleTokenStream(adaptor, "token LBRACKET");
        RewriteRuleTokenStream stream_AS = new RewriteRuleTokenStream(adaptor, "token AS");
        RewriteRuleTokenStream stream_RPAREN = new RewriteRuleTokenStream(adaptor, "token RPAREN");
        RewriteRuleTokenStream stream_EXTERNAL = new RewriteRuleTokenStream(adaptor, "token EXTERNAL");
        RewriteRuleTokenStream stream_RBRACKET = new RewriteRuleTokenStream(adaptor, "token RBRACKET");
        RewriteRuleTokenStream stream_LPAREN = new RewriteRuleTokenStream(adaptor, "token LPAREN");
        RewriteRuleTokenStream stream_UPDATING = new RewriteRuleTokenStream(adaptor, "token UPDATING");
        RewriteRuleSubtreeStream stream_p_StatementsAndOptionalExpr = new RewriteRuleSubtreeStream(adaptor,
                "rule p_StatementsAndOptionalExpr");
        RewriteRuleSubtreeStream stream_p_ParamList = new RewriteRuleSubtreeStream(adaptor, "rule p_ParamList");
        RewriteRuleSubtreeStream stream_pg_FQName = new RewriteRuleSubtreeStream(adaptor, "rule pg_FQName");
        RewriteRuleSubtreeStream stream_p_SequenceType = new RewriteRuleSubtreeStream(adaptor, "rule p_SequenceType");
        try {
            // XQueryParser.g:337:9: ( ({...}? =>k= UPDATING )? k= FUNCTION qn= pg_FQName LPAREN (pl= p_ParamList )? RPAREN (k= AS st= p_SequenceType )? ( LBRACKET soe= p_StatementsAndOptionalExpr RBRACKET | k= EXTERNAL ) -> ^( FunctionDecl $qn ^( ParamList ( $pl)? ) ^( ReturnType ( $st)? ) ( $soe)? ) )
            // XQueryParser.g:337:11: ({...}? =>k= UPDATING )? k= FUNCTION qn= pg_FQName LPAREN (pl= p_ParamList )? RPAREN (k= AS st= p_SequenceType )? ( LBRACKET soe= p_StatementsAndOptionalExpr RBRACKET | k= EXTERNAL )
            {
                // XQueryParser.g:337:11: ({...}? =>k= UPDATING )?
                int alt38 = 2;
                int LA38_0 = input.LA(1);

                if ((LA38_0 == UPDATING) && ((lc(XQU)))) {
                    alt38 = 1;
                }
                switch (alt38) {
                case 1:
                    // XQueryParser.g:337:12: {...}? =>k= UPDATING
                {
                    if (!((lc(XQU)))) {
                        if (state.backtracking > 0) {
                            state.failed = true;
                            return retval;
                        }
                        throw new FailedPredicateException(input, "pm_FunctionDecl", "lc(XQU)");
                    }
                    k = (CommonToken)match(input, UPDATING, FOLLOW_UPDATING_in_pm_FunctionDecl3041);
                    if (state.failed) {
                        return retval;
                    }
                    if (state.backtracking == 0) {
                        stream_UPDATING.add(k);
                    }

                    if (state.backtracking == 0) {
                        ak(k);
                    }

                }
                    break;

                }

                k = (CommonToken)match(input, FUNCTION, FOLLOW_FUNCTION_in_pm_FunctionDecl3049);
                if (state.failed) {
                    return retval;
                }
                if (state.backtracking == 0) {
                    stream_FUNCTION.add(k);
                }

                if (state.backtracking == 0) {
                    ak(k);
                }
                pushFollow(FOLLOW_pg_FQName_in_pm_FunctionDecl3055);
                qn = pg_FQName();

                state._fsp--;
                if (state.failed) {
                    return retval;
                }
                if (state.backtracking == 0) {
                    stream_pg_FQName.add(qn.getTree());
                }
                LPAREN77 = (CommonToken)match(input, LPAREN, FOLLOW_LPAREN_in_pm_FunctionDecl3057);
                if (state.failed) {
                    return retval;
                }
                if (state.backtracking == 0) {
                    stream_LPAREN.add(LPAREN77);
                }

                // XQueryParser.g:337:91: (pl= p_ParamList )?
                int alt39 = 2;
                int LA39_0 = input.LA(1);

                if ((LA39_0 == DOLLAR)) {
                    alt39 = 1;
                }
                switch (alt39) {
                case 1:
                    // XQueryParser.g:337:91: pl= p_ParamList
                {
                    pushFollow(FOLLOW_p_ParamList_in_pm_FunctionDecl3061);
                    pl = p_ParamList();

                    state._fsp--;
                    if (state.failed) {
                        return retval;
                    }
                    if (state.backtracking == 0) {
                        stream_p_ParamList.add(pl.getTree());
                    }

                }
                    break;

                }

                RPAREN78 = (CommonToken)match(input, RPAREN, FOLLOW_RPAREN_in_pm_FunctionDecl3064);
                if (state.failed) {
                    return retval;
                }
                if (state.backtracking == 0) {
                    stream_RPAREN.add(RPAREN78);
                }

                // XQueryParser.g:337:112: (k= AS st= p_SequenceType )?
                int alt40 = 2;
                int LA40_0 = input.LA(1);

                if ((LA40_0 == AS)) {
                    alt40 = 1;
                }
                switch (alt40) {
                case 1:
                    // XQueryParser.g:337:113: k= AS st= p_SequenceType
                {
                    k = (CommonToken)match(input, AS, FOLLOW_AS_in_pm_FunctionDecl3069);
                    if (state.failed) {
                        return retval;
                    }
                    if (state.backtracking == 0) {
                        stream_AS.add(k);
                    }

                    if (state.backtracking == 0) {
                        ak(k);
                    }
                    pushFollow(FOLLOW_p_SequenceType_in_pm_FunctionDecl3075);
                    st = p_SequenceType();

                    state._fsp--;
                    if (state.failed) {
                        return retval;
                    }
                    if (state.backtracking == 0) {
                        stream_p_SequenceType.add(st.getTree());
                    }

                }
                    break;

                }

                // XQueryParser.g:337:148: ( LBRACKET soe= p_StatementsAndOptionalExpr RBRACKET | k= EXTERNAL )
                int alt41 = 2;
                int LA41_0 = input.LA(1);

                if ((LA41_0 == LBRACKET)) {
                    alt41 = 1;
                } else if ((LA41_0 == EXTERNAL)) {
                    alt41 = 2;
                } else {
                    if (state.backtracking > 0) {
                        state.failed = true;
                        return retval;
                    }
                    NoViableAltException nvae = new NoViableAltException("", 41, 0, input);

                    throw nvae;
                }
                switch (alt41) {
                case 1:
                    // XQueryParser.g:337:149: LBRACKET soe= p_StatementsAndOptionalExpr RBRACKET
                {
                    LBRACKET79 = (CommonToken)match(input, LBRACKET, FOLLOW_LBRACKET_in_pm_FunctionDecl3080);
                    if (state.failed) {
                        return retval;
                    }
                    if (state.backtracking == 0) {
                        stream_LBRACKET.add(LBRACKET79);
                    }

                    pushFollow(FOLLOW_p_StatementsAndOptionalExpr_in_pm_FunctionDecl3084);
                    soe = p_StatementsAndOptionalExpr();

                    state._fsp--;
                    if (state.failed) {
                        return retval;
                    }
                    if (state.backtracking == 0) {
                        stream_p_StatementsAndOptionalExpr.add(soe.getTree());
                    }
                    RBRACKET80 = (CommonToken)match(input, RBRACKET, FOLLOW_RBRACKET_in_pm_FunctionDecl3086);
                    if (state.failed) {
                        return retval;
                    }
                    if (state.backtracking == 0) {
                        stream_RBRACKET.add(RBRACKET80);
                    }

                }
                    break;
                case 2:
                    // XQueryParser.g:337:201: k= EXTERNAL
                {
                    k = (CommonToken)match(input, EXTERNAL, FOLLOW_EXTERNAL_in_pm_FunctionDecl3092);
                    if (state.failed) {
                        return retval;
                    }
                    if (state.backtracking == 0) {
                        stream_EXTERNAL.add(k);
                    }

                    if (state.backtracking == 0) {
                        ak(k);
                    }

                }
                    break;

                }

                // AST REWRITE
                // elements: qn, soe, pl, st
                // token labels:
                // rule labels: soe, qn, retval, pl, st
                // token list labels:
                // rule list labels:
                // wildcard labels:
                if (state.backtracking == 0) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_soe = new RewriteRuleSubtreeStream(adaptor, "rule soe",
                            soe != null ? soe.tree : null);
                    RewriteRuleSubtreeStream stream_qn = new RewriteRuleSubtreeStream(adaptor, "rule qn",
                            qn != null ? qn.tree : null);
                    RewriteRuleSubtreeStream stream_retval = new RewriteRuleSubtreeStream(adaptor, "rule retval",
                            retval != null ? retval.tree : null);
                    RewriteRuleSubtreeStream stream_pl = new RewriteRuleSubtreeStream(adaptor, "rule pl",
                            pl != null ? pl.tree : null);
                    RewriteRuleSubtreeStream stream_st = new RewriteRuleSubtreeStream(adaptor, "rule st",
                            st != null ? st.tree : null);

                    root_0 = (XQDTCommonTree)adaptor.nil();
                    // 338:17: -> ^( FunctionDecl $qn ^( ParamList ( $pl)? ) ^( ReturnType ( $st)? ) ( $soe)? )
                    {
                        // XQueryParser.g:338:20: ^( FunctionDecl $qn ^( ParamList ( $pl)? ) ^( ReturnType ( $st)? ) ( $soe)? )
                        {
                            XQDTCommonTree root_1 = (XQDTCommonTree)adaptor.nil();
                            root_1 = (XQDTCommonTree)adaptor.becomeRoot(adaptor.create(FunctionDecl, "FunctionDecl"),
                                    root_1);

                            adaptor.addChild(root_1, stream_qn.nextTree());
                            // XQueryParser.g:338:39: ^( ParamList ( $pl)? )
                            {
                                XQDTCommonTree root_2 = (XQDTCommonTree)adaptor.nil();
                                root_2 = (XQDTCommonTree)adaptor.becomeRoot(adaptor.create(ParamList, "ParamList"),
                                        root_2);

                                // XQueryParser.g:338:51: ( $pl)?
                                if (stream_pl.hasNext()) {
                                    adaptor.addChild(root_2, stream_pl.nextTree());

                                }
                                stream_pl.reset();

                                adaptor.addChild(root_1, root_2);
                            }
                            // XQueryParser.g:338:57: ^( ReturnType ( $st)? )
                            {
                                XQDTCommonTree root_2 = (XQDTCommonTree)adaptor.nil();
                                root_2 = (XQDTCommonTree)adaptor.becomeRoot(adaptor.create(ReturnType, "ReturnType"),
                                        root_2);

                                // XQueryParser.g:338:70: ( $st)?
                                if (stream_st.hasNext()) {
                                    adaptor.addChild(root_2, stream_st.nextTree());

                                }
                                stream_st.reset();

                                adaptor.addChild(root_1, root_2);
                            }
                            // XQueryParser.g:338:76: ( $soe)?
                            if (stream_soe.hasNext()) {
                                adaptor.addChild(root_1, stream_soe.nextTree());

                            }
                            stream_soe.reset();

                            adaptor.addChild(root_0, root_1);
                        }

                    }

                    retval.tree = root_0;
                }
            }

            retval.stop = input.LT(-1);

            if (state.backtracking == 0) {

                retval.tree = (XQDTCommonTree)adaptor.rulePostProcessing(root_0);
                adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        } catch (RecognitionException re) {
            reportError(re);
            recover(input, re);
            retval.tree = (XQDTCommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        } finally {
        }
        return retval;
    }

    // $ANTLR end "pm_FunctionDecl"

    public static class p_ParamList_return extends ParserRuleReturnScope {
        XQDTCommonTree tree;

        public Object getTree() {
            return tree;
        }
    };

    // $ANTLR start "p_ParamList"
    // XQueryParser.g:342:1: p_ParamList : p+= p_Param ( COMMA p+= p_Param )* -> ( $p)+ ;
    public final XQueryParser.p_ParamList_return p_ParamList() throws RecognitionException {
        XQueryParser.p_ParamList_return retval = new XQueryParser.p_ParamList_return();
        retval.start = input.LT(1);

        XQDTCommonTree root_0 = null;

        CommonToken COMMA81 = null;
        List<Object> list_p = null;
        RuleReturnScope p = null;
        XQDTCommonTree COMMA81_tree = null;
        RewriteRuleTokenStream stream_COMMA = new RewriteRuleTokenStream(adaptor, "token COMMA");
        RewriteRuleSubtreeStream stream_p_Param = new RewriteRuleSubtreeStream(adaptor, "rule p_Param");
        try {
            // XQueryParser.g:343:9: (p+= p_Param ( COMMA p+= p_Param )* -> ( $p)+ )
            // XQueryParser.g:343:11: p+= p_Param ( COMMA p+= p_Param )*
            {
                pushFollow(FOLLOW_p_Param_in_p_ParamList3169);
                p = p_Param();

                state._fsp--;
                if (state.failed) {
                    return retval;
                }
                if (state.backtracking == 0) {
                    stream_p_Param.add(p.getTree());
                }
                if (list_p == null) {
                    list_p = new ArrayList<Object>();
                }
                list_p.add(p.getTree());

                // XQueryParser.g:343:22: ( COMMA p+= p_Param )*
                loop42: do {
                    int alt42 = 2;
                    int LA42_0 = input.LA(1);

                    if ((LA42_0 == COMMA)) {
                        alt42 = 1;
                    }

                    switch (alt42) {
                    case 1:
                        // XQueryParser.g:343:23: COMMA p+= p_Param
                    {
                        COMMA81 = (CommonToken)match(input, COMMA, FOLLOW_COMMA_in_p_ParamList3172);
                        if (state.failed) {
                            return retval;
                        }
                        if (state.backtracking == 0) {
                            stream_COMMA.add(COMMA81);
                        }

                        pushFollow(FOLLOW_p_Param_in_p_ParamList3176);
                        p = p_Param();

                        state._fsp--;
                        if (state.failed) {
                            return retval;
                        }
                        if (state.backtracking == 0) {
                            stream_p_Param.add(p.getTree());
                        }
                        if (list_p == null) {
                            list_p = new ArrayList<Object>();
                        }
                        list_p.add(p.getTree());

                    }
                    break;

                    default:
                        break loop42;
                    }
                } while (true);

                // AST REWRITE
                // elements: p
                // token labels:
                // rule labels: retval
                // token list labels:
                // rule list labels: p
                // wildcard labels:
                if (state.backtracking == 0) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval = new RewriteRuleSubtreeStream(adaptor, "rule retval",
                            retval != null ? retval.tree : null);
                    RewriteRuleSubtreeStream stream_p = new RewriteRuleSubtreeStream(adaptor, "token p", list_p);
                    root_0 = (XQDTCommonTree)adaptor.nil();
                    // 344:17: -> ( $p)+
                    {
                        if (!(stream_p.hasNext())) {
                            throw new RewriteEarlyExitException();
                        }
                        while (stream_p.hasNext()) {
                            adaptor.addChild(root_0, stream_p.nextTree());

                        }
                        stream_p.reset();

                    }

                    retval.tree = root_0;
                }
            }

            retval.stop = input.LT(-1);

            if (state.backtracking == 0) {

                retval.tree = (XQDTCommonTree)adaptor.rulePostProcessing(root_0);
                adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        } catch (RecognitionException re) {
            reportError(re);
            recover(input, re);
            retval.tree = (XQDTCommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        } finally {
        }
        return retval;
    }

    // $ANTLR end "p_ParamList"

    public static class p_Param_return extends ParserRuleReturnScope {
        XQDTCommonTree tree;

        public Object getTree() {
            return tree;
        }
    };

    // $ANTLR start "p_Param"
    // XQueryParser.g:348:1: p_Param : DOLLAR qn= p_QName (td= p_TypeDeclaration )? -> ^( Param $qn ( $td)? ) ;
    public final XQueryParser.p_Param_return p_Param() throws RecognitionException {
        XQueryParser.p_Param_return retval = new XQueryParser.p_Param_return();
        retval.start = input.LT(1);

        XQDTCommonTree root_0 = null;

        CommonToken DOLLAR82 = null;
        XQueryParser.p_QName_return qn = null;

        XQueryParser.p_TypeDeclaration_return td = null;

        XQDTCommonTree DOLLAR82_tree = null;
        RewriteRuleTokenStream stream_DOLLAR = new RewriteRuleTokenStream(adaptor, "token DOLLAR");
        RewriteRuleSubtreeStream stream_p_TypeDeclaration = new RewriteRuleSubtreeStream(adaptor,
                "rule p_TypeDeclaration");
        RewriteRuleSubtreeStream stream_p_QName = new RewriteRuleSubtreeStream(adaptor, "rule p_QName");
        try {
            // XQueryParser.g:349:9: ( DOLLAR qn= p_QName (td= p_TypeDeclaration )? -> ^( Param $qn ( $td)? ) )
            // XQueryParser.g:349:11: DOLLAR qn= p_QName (td= p_TypeDeclaration )?
            {
                DOLLAR82 = (CommonToken)match(input, DOLLAR, FOLLOW_DOLLAR_in_p_Param3234);
                if (state.failed) {
                    return retval;
                }
                if (state.backtracking == 0) {
                    stream_DOLLAR.add(DOLLAR82);
                }

                pushFollow(FOLLOW_p_QName_in_p_Param3238);
                qn = p_QName();

                state._fsp--;
                if (state.failed) {
                    return retval;
                }
                if (state.backtracking == 0) {
                    stream_p_QName.add(qn.getTree());
                }
                // XQueryParser.g:349:31: (td= p_TypeDeclaration )?
                int alt43 = 2;
                int LA43_0 = input.LA(1);

                if ((LA43_0 == AS)) {
                    alt43 = 1;
                }
                switch (alt43) {
                case 1:
                    // XQueryParser.g:349:31: td= p_TypeDeclaration
                {
                    pushFollow(FOLLOW_p_TypeDeclaration_in_p_Param3242);
                    td = p_TypeDeclaration();

                    state._fsp--;
                    if (state.failed) {
                        return retval;
                    }
                    if (state.backtracking == 0) {
                        stream_p_TypeDeclaration.add(td.getTree());
                    }

                }
                    break;

                }

                // AST REWRITE
                // elements: qn, td
                // token labels:
                // rule labels: qn, retval, td
                // token list labels:
                // rule list labels:
                // wildcard labels:
                if (state.backtracking == 0) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_qn = new RewriteRuleSubtreeStream(adaptor, "rule qn",
                            qn != null ? qn.tree : null);
                    RewriteRuleSubtreeStream stream_retval = new RewriteRuleSubtreeStream(adaptor, "rule retval",
                            retval != null ? retval.tree : null);
                    RewriteRuleSubtreeStream stream_td = new RewriteRuleSubtreeStream(adaptor, "rule td",
                            td != null ? td.tree : null);

                    root_0 = (XQDTCommonTree)adaptor.nil();
                    // 350:17: -> ^( Param $qn ( $td)? )
                    {
                        // XQueryParser.g:350:20: ^( Param $qn ( $td)? )
                        {
                            XQDTCommonTree root_1 = (XQDTCommonTree)adaptor.nil();
                            root_1 = (XQDTCommonTree)adaptor.becomeRoot(adaptor.create(Param, "Param"), root_1);

                            adaptor.addChild(root_1, stream_qn.nextTree());
                            // XQueryParser.g:350:32: ( $td)?
                            if (stream_td.hasNext()) {
                                adaptor.addChild(root_1, stream_td.nextTree());

                            }
                            stream_td.reset();

                            adaptor.addChild(root_0, root_1);
                        }

                    }

                    retval.tree = root_0;
                }
            }

            retval.stop = input.LT(-1);

            if (state.backtracking == 0) {

                retval.tree = (XQDTCommonTree)adaptor.rulePostProcessing(root_0);
                adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        } catch (RecognitionException re) {
            reportError(re);
            recover(input, re);
            retval.tree = (XQDTCommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        } finally {
        }
        return retval;
    }

    // $ANTLR end "p_Param"

    public static class pm_FunctionBody_return extends ParserRuleReturnScope {
        XQDTCommonTree tree;

        public Object getTree() {
            return tree;
        }
    };

    // $ANTLR start "pm_FunctionBody"
    // XQueryParser.g:354:1: pm_FunctionBody : p_EnclosedExpr ;
    public final XQueryParser.pm_FunctionBody_return pm_FunctionBody() throws RecognitionException {
        XQueryParser.pm_FunctionBody_return retval = new XQueryParser.pm_FunctionBody_return();
        retval.start = input.LT(1);

        XQDTCommonTree root_0 = null;

        XQueryParser.p_EnclosedExpr_return p_EnclosedExpr83 = null;

        try {
            // XQueryParser.g:355:9: ( p_EnclosedExpr )
            // XQueryParser.g:355:11: p_EnclosedExpr
            {
                root_0 = (XQDTCommonTree)adaptor.nil();

                pushFollow(FOLLOW_p_EnclosedExpr_in_pm_FunctionBody3298);
                p_EnclosedExpr83 = p_EnclosedExpr();

                state._fsp--;
                if (state.failed) {
                    return retval;
                }
                if (state.backtracking == 0) {
                    adaptor.addChild(root_0, p_EnclosedExpr83.getTree());
                }

            }

            retval.stop = input.LT(-1);

            if (state.backtracking == 0) {

                retval.tree = (XQDTCommonTree)adaptor.rulePostProcessing(root_0);
                adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        } catch (RecognitionException re) {
            reportError(re);
            recover(input, re);
            retval.tree = (XQDTCommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        } finally {
        }
        return retval;
    }

    // $ANTLR end "pm_FunctionBody"

    public static class p_EnclosedExpr_return extends ParserRuleReturnScope {
        XQDTCommonTree tree;

        public Object getTree() {
            return tree;
        }
    };

    // $ANTLR start "p_EnclosedExpr"
    // XQueryParser.g:360:1: p_EnclosedExpr : LBRACKET p_Expr[true,true] RBRACKET -> ^( EnclosedExpr p_Expr ) ;
    public final XQueryParser.p_EnclosedExpr_return p_EnclosedExpr() throws RecognitionException {
        XQueryParser.p_EnclosedExpr_return retval = new XQueryParser.p_EnclosedExpr_return();
        retval.start = input.LT(1);

        XQDTCommonTree root_0 = null;

        CommonToken LBRACKET84 = null;
        CommonToken RBRACKET86 = null;
        XQueryParser.p_Expr_return p_Expr85 = null;

        XQDTCommonTree LBRACKET84_tree = null;
        XQDTCommonTree RBRACKET86_tree = null;
        RewriteRuleTokenStream stream_LBRACKET = new RewriteRuleTokenStream(adaptor, "token LBRACKET");
        RewriteRuleTokenStream stream_RBRACKET = new RewriteRuleTokenStream(adaptor, "token RBRACKET");
        RewriteRuleSubtreeStream stream_p_Expr = new RewriteRuleSubtreeStream(adaptor, "rule p_Expr");
        try {
            // XQueryParser.g:361:9: ( LBRACKET p_Expr[true,true] RBRACKET -> ^( EnclosedExpr p_Expr ) )
            // XQueryParser.g:361:11: LBRACKET p_Expr[true,true] RBRACKET
            {
                LBRACKET84 = (CommonToken)match(input, LBRACKET, FOLLOW_LBRACKET_in_p_EnclosedExpr3325);
                if (state.failed) {
                    return retval;
                }
                if (state.backtracking == 0) {
                    stream_LBRACKET.add(LBRACKET84);
                }

                pushFollow(FOLLOW_p_Expr_in_p_EnclosedExpr3327);
                p_Expr85 = p_Expr(true, true);

                state._fsp--;
                if (state.failed) {
                    return retval;
                }
                if (state.backtracking == 0) {
                    stream_p_Expr.add(p_Expr85.getTree());
                }
                RBRACKET86 = (CommonToken)match(input, RBRACKET, FOLLOW_RBRACKET_in_p_EnclosedExpr3330);
                if (state.failed) {
                    return retval;
                }
                if (state.backtracking == 0) {
                    stream_RBRACKET.add(RBRACKET86);
                }

                // AST REWRITE
                // elements: p_Expr
                // token labels:
                // rule labels: retval
                // token list labels:
                // rule list labels:
                // wildcard labels:
                if (state.backtracking == 0) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval = new RewriteRuleSubtreeStream(adaptor, "rule retval",
                            retval != null ? retval.tree : null);

                    root_0 = (XQDTCommonTree)adaptor.nil();
                    // 362:17: -> ^( EnclosedExpr p_Expr )
                    {
                        // XQueryParser.g:362:20: ^( EnclosedExpr p_Expr )
                        {
                            XQDTCommonTree root_1 = (XQDTCommonTree)adaptor.nil();
                            root_1 = (XQDTCommonTree)adaptor.becomeRoot(adaptor.create(EnclosedExpr, "EnclosedExpr"),
                                    root_1);

                            adaptor.addChild(root_1, stream_p_Expr.nextTree());

                            adaptor.addChild(root_0, root_1);
                        }

                    }

                    retval.tree = root_0;
                }
            }

            retval.stop = input.LT(-1);

            if (state.backtracking == 0) {

                retval.tree = (XQDTCommonTree)adaptor.rulePostProcessing(root_0);
                adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        } catch (RecognitionException re) {
            reportError(re);
            recover(input, re);
            retval.tree = (XQDTCommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        } finally {
        }
        return retval;
    }

    // $ANTLR end "p_EnclosedExpr"

    public static class pm_OptionDecl_return extends ParserRuleReturnScope {
        XQDTCommonTree tree;

        public Object getTree() {
            return tree;
        }
    };

    // $ANTLR start "pm_OptionDecl"
    // XQueryParser.g:366:1: pm_OptionDecl : k= DECLARE k= OPTION p_QName p_StringLiteral SEMICOLON ;
    public final XQueryParser.pm_OptionDecl_return pm_OptionDecl() throws RecognitionException {
        XQueryParser.pm_OptionDecl_return retval = new XQueryParser.pm_OptionDecl_return();
        retval.start = input.LT(1);

        XQDTCommonTree root_0 = null;

        CommonToken k = null;
        CommonToken SEMICOLON89 = null;
        XQueryParser.p_QName_return p_QName87 = null;

        XQueryParser.p_StringLiteral_return p_StringLiteral88 = null;

        XQDTCommonTree k_tree = null;
        XQDTCommonTree SEMICOLON89_tree = null;

        try {
            // XQueryParser.g:367:9: (k= DECLARE k= OPTION p_QName p_StringLiteral SEMICOLON )
            // XQueryParser.g:367:11: k= DECLARE k= OPTION p_QName p_StringLiteral SEMICOLON
            {
                root_0 = (XQDTCommonTree)adaptor.nil();

                k = (CommonToken)match(input, DECLARE, FOLLOW_DECLARE_in_pm_OptionDecl3382);
                if (state.failed) {
                    return retval;
                }
                if (state.backtracking == 0) {
                    k_tree = (XQDTCommonTree)adaptor.create(k);
                    adaptor.addChild(root_0, k_tree);
                }
                if (state.backtracking == 0) {
                    ak(k);
                }
                k = (CommonToken)match(input, OPTION, FOLLOW_OPTION_in_pm_OptionDecl3388);
                if (state.failed) {
                    return retval;
                }
                if (state.backtracking == 0) {
                    k_tree = (XQDTCommonTree)adaptor.create(k);
                    adaptor.addChild(root_0, k_tree);
                }
                if (state.backtracking == 0) {
                    ak(k);
                }
                pushFollow(FOLLOW_p_QName_in_pm_OptionDecl3392);
                p_QName87 = p_QName();

                state._fsp--;
                if (state.failed) {
                    return retval;
                }
                if (state.backtracking == 0) {
                    adaptor.addChild(root_0, p_QName87.getTree());
                }
                pushFollow(FOLLOW_p_StringLiteral_in_pm_OptionDecl3394);
                p_StringLiteral88 = p_StringLiteral();

                state._fsp--;
                if (state.failed) {
                    return retval;
                }
                if (state.backtracking == 0) {
                    adaptor.addChild(root_0, p_StringLiteral88.getTree());
                }
                SEMICOLON89 = (CommonToken)match(input, SEMICOLON, FOLLOW_SEMICOLON_in_pm_OptionDecl3396);
                if (state.failed) {
                    return retval;
                }
                if (state.backtracking == 0) {
                    SEMICOLON89_tree = (XQDTCommonTree)adaptor.create(SEMICOLON89);
                    adaptor.addChild(root_0, SEMICOLON89_tree);
                }

            }

            retval.stop = input.LT(-1);

            if (state.backtracking == 0) {

                retval.tree = (XQDTCommonTree)adaptor.rulePostProcessing(root_0);
                adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        } catch (RecognitionException re) {
            reportError(re);
            recover(input, re);
            retval.tree = (XQDTCommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        } finally {
        }
        return retval;
    }

    // $ANTLR end "pm_OptionDecl"

    public static class pm_QueryBody_return extends ParserRuleReturnScope {
        XQDTCommonTree tree;

        public Object getTree() {
            return tree;
        }
    };

    // $ANTLR start "pm_QueryBody"
    // XQueryParser.g:371:1: pm_QueryBody : ({...}? => p_Program | p_Expr[true,true] );
    public final XQueryParser.pm_QueryBody_return pm_QueryBody() throws RecognitionException {
        XQueryParser.pm_QueryBody_return retval = new XQueryParser.pm_QueryBody_return();
        retval.start = input.LT(1);

        XQDTCommonTree root_0 = null;

        XQueryParser.p_Program_return p_Program90 = null;

        XQueryParser.p_Expr_return p_Expr91 = null;

        try {
            // XQueryParser.g:372:9: ({...}? => p_Program | p_Expr[true,true] )
            int alt44 = 2;
            alt44 = dfa44.predict(input);
            switch (alt44) {
            case 1:
                // XQueryParser.g:372:11: {...}? => p_Program
            {
                root_0 = (XQDTCommonTree)adaptor.nil();

                if (!((lc(XQS)))) {
                    if (state.backtracking > 0) {
                        state.failed = true;
                        return retval;
                    }
                    throw new FailedPredicateException(input, "pm_QueryBody", "lc(XQS)");
                }
                pushFollow(FOLLOW_p_Program_in_pm_QueryBody3425);
                p_Program90 = p_Program();

                state._fsp--;
                if (state.failed) {
                    return retval;
                }
                if (state.backtracking == 0) {
                    adaptor.addChild(root_0, p_Program90.getTree());
                }

            }
            break;
            case 2:
                // XQueryParser.g:373:11: p_Expr[true,true]
            {
                root_0 = (XQDTCommonTree)adaptor.nil();

                pushFollow(FOLLOW_p_Expr_in_pm_QueryBody3437);
                p_Expr91 = p_Expr(true, true);

                state._fsp--;
                if (state.failed) {
                    return retval;
                }
                if (state.backtracking == 0) {
                    adaptor.addChild(root_0, p_Expr91.getTree());
                }

            }
            break;

            }
            retval.stop = input.LT(-1);

            if (state.backtracking == 0) {

                retval.tree = (XQDTCommonTree)adaptor.rulePostProcessing(root_0);
                adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        } catch (RecognitionException re) {
            reportError(re);
            recover(input, re);
            retval.tree = (XQDTCommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        } finally {
        }
        return retval;
    }

    // $ANTLR end "pm_QueryBody"

    public static class p_Expr_return extends ParserRuleReturnScope {
        XQDTCommonTree tree;

        public Object getTree() {
            return tree;
        }
    };

    // $ANTLR start "p_Expr"
    // XQueryParser.g:383:1: p_Expr[boolean strict, boolean allowConcat] : es= p_ExprSingle[$strict] ( COMMA p_ExprSingle[$strict] )* ;
    public final XQueryParser.p_Expr_return p_Expr(boolean strict, boolean allowConcat) throws RecognitionException {
        XQueryParser.p_Expr_return retval = new XQueryParser.p_Expr_return();
        retval.start = input.LT(1);

        XQDTCommonTree root_0 = null;

        CommonToken COMMA92 = null;
        XQueryParser.p_ExprSingle_return es = null;

        XQueryParser.p_ExprSingle_return p_ExprSingle93 = null;

        XQDTCommonTree COMMA92_tree = null;

        try {
            // XQueryParser.g:384:9: (es= p_ExprSingle[$strict] ( COMMA p_ExprSingle[$strict] )* )
            // XQueryParser.g:384:11: es= p_ExprSingle[$strict] ( COMMA p_ExprSingle[$strict] )*
            {
                root_0 = (XQDTCommonTree)adaptor.nil();

                pushFollow(FOLLOW_p_ExprSingle_in_p_Expr3473);
                es = p_ExprSingle(strict);

                state._fsp--;
                if (state.failed) {
                    return retval;
                }
                if (state.backtracking == 0) {
                    adaptor.addChild(root_0, es.getTree());
                }
                if (state.backtracking == 0) {
                    if (!allowConcat) {
                        throw new Exception();
                    }
                }
                // XQueryParser.g:385:11: ( COMMA p_ExprSingle[$strict] )*
                loop45: do {
                    int alt45 = 2;
                    int LA45_0 = input.LA(1);

                    if ((LA45_0 == COMMA)) {
                        alt45 = 1;
                    }

                    switch (alt45) {
                    case 1:
                        // XQueryParser.g:385:12: COMMA p_ExprSingle[$strict]
                    {
                        COMMA92 = (CommonToken)match(input, COMMA, FOLLOW_COMMA_in_p_Expr3489);
                        if (state.failed) {
                            return retval;
                        }
                        if (state.backtracking == 0) {
                            COMMA92_tree = (XQDTCommonTree)adaptor.create(COMMA92);
                            adaptor.addChild(root_0, COMMA92_tree);
                        }
                        pushFollow(FOLLOW_p_ExprSingle_in_p_Expr3491);
                        p_ExprSingle93 = p_ExprSingle(strict);

                        state._fsp--;
                        if (state.failed) {
                            return retval;
                        }
                        if (state.backtracking == 0) {
                            adaptor.addChild(root_0, p_ExprSingle93.getTree());
                        }

                    }
                    break;

                    default:
                        break loop45;
                    }
                } while (true);

            }

            retval.stop = input.LT(-1);

            if (state.backtracking == 0) {

                retval.tree = (XQDTCommonTree)adaptor.rulePostProcessing(root_0);
                adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        } catch (RecognitionException re) {

            reportError(re);
            recover(input, re);
            retval.tree = (XQDTCommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        } catch (Exception e) {

            root_0 = (XQDTCommonTree)adaptor.nil();
            adaptor.addChild(root_0, es.getTree());
            retval.stop = input.LT(-1);
            retval.tree = (XQDTCommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        } finally {
        }
        return retval;
    }

    // $ANTLR end "p_Expr"

    public static class p_ExprSingle_return extends ParserRuleReturnScope {
        XQDTCommonTree tree;

        public Object getTree() {
            return tree;
        }
    };

    // $ANTLR start "p_ExprSingle"
    // XQueryParser.g:402:1: p_ExprSingle[boolean strict] : ( ( ( ( FOR | LET ) DOLLAR ) | ( FOR ( TUMBLING | SLIDING ) ) )=> p_FLWORHybrid[$strict] | ( IF LPAREN )=> p_IfHybrid[$strict] | ( SWITCH LPAREN )=> p_SwitchHybrid[$strict] | ( TYPESWITCH LPAREN )=> p_TypeswitchHybrid[$strict] | ( TRY LBRACKET )=> p_TryCatchHybrid[$strict] | p_ExprSimple );
    public final XQueryParser.p_ExprSingle_return p_ExprSingle(boolean strict) throws RecognitionException {
        XQueryParser.p_ExprSingle_return retval = new XQueryParser.p_ExprSingle_return();
        retval.start = input.LT(1);

        XQDTCommonTree root_0 = null;

        XQueryParser.p_FLWORHybrid_return p_FLWORHybrid94 = null;

        XQueryParser.p_IfHybrid_return p_IfHybrid95 = null;

        XQueryParser.p_SwitchHybrid_return p_SwitchHybrid96 = null;

        XQueryParser.p_TypeswitchHybrid_return p_TypeswitchHybrid97 = null;

        XQueryParser.p_TryCatchHybrid_return p_TryCatchHybrid98 = null;

        XQueryParser.p_ExprSimple_return p_ExprSimple99 = null;

        try {
            // XQueryParser.g:403:9: ( ( ( ( FOR | LET ) DOLLAR ) | ( FOR ( TUMBLING | SLIDING ) ) )=> p_FLWORHybrid[$strict] | ( IF LPAREN )=> p_IfHybrid[$strict] | ( SWITCH LPAREN )=> p_SwitchHybrid[$strict] | ( TYPESWITCH LPAREN )=> p_TypeswitchHybrid[$strict] | ( TRY LBRACKET )=> p_TryCatchHybrid[$strict] | p_ExprSimple )
            int alt46 = 6;
            alt46 = dfa46.predict(input);
            switch (alt46) {
            case 1:
                // XQueryParser.g:403:11: ( ( ( FOR | LET ) DOLLAR ) | ( FOR ( TUMBLING | SLIDING ) ) )=> p_FLWORHybrid[$strict]
            {
                root_0 = (XQDTCommonTree)adaptor.nil();

                pushFollow(FOLLOW_p_FLWORHybrid_in_p_ExprSingle3564);
                p_FLWORHybrid94 = p_FLWORHybrid(strict);

                state._fsp--;
                if (state.failed) {
                    return retval;
                }
                if (state.backtracking == 0) {
                    adaptor.addChild(root_0, p_FLWORHybrid94.getTree());
                }

            }
            break;
            case 2:
                // XQueryParser.g:404:11: ( IF LPAREN )=> p_IfHybrid[$strict]
            {
                root_0 = (XQDTCommonTree)adaptor.nil();

                pushFollow(FOLLOW_p_IfHybrid_in_p_ExprSingle3594);
                p_IfHybrid95 = p_IfHybrid(strict);

                state._fsp--;
                if (state.failed) {
                    return retval;
                }
                if (state.backtracking == 0) {
                    adaptor.addChild(root_0, p_IfHybrid95.getTree());
                }

            }
            break;
            case 3:
                // XQueryParser.g:405:11: ( SWITCH LPAREN )=> p_SwitchHybrid[$strict]
            {
                root_0 = (XQDTCommonTree)adaptor.nil();

                pushFollow(FOLLOW_p_SwitchHybrid_in_p_ExprSingle3620);
                p_SwitchHybrid96 = p_SwitchHybrid(strict);

                state._fsp--;
                if (state.failed) {
                    return retval;
                }
                if (state.backtracking == 0) {
                    adaptor.addChild(root_0, p_SwitchHybrid96.getTree());
                }

            }
            break;
            case 4:
                // XQueryParser.g:406:11: ( TYPESWITCH LPAREN )=> p_TypeswitchHybrid[$strict]
            {
                root_0 = (XQDTCommonTree)adaptor.nil();

                pushFollow(FOLLOW_p_TypeswitchHybrid_in_p_ExprSingle3642);
                p_TypeswitchHybrid97 = p_TypeswitchHybrid(strict);

                state._fsp--;
                if (state.failed) {
                    return retval;
                }
                if (state.backtracking == 0) {
                    adaptor.addChild(root_0, p_TypeswitchHybrid97.getTree());
                }

            }
            break;
            case 5:
                // XQueryParser.g:407:11: ( TRY LBRACKET )=> p_TryCatchHybrid[$strict]
            {
                root_0 = (XQDTCommonTree)adaptor.nil();

                pushFollow(FOLLOW_p_TryCatchHybrid_in_p_ExprSingle3669);
                p_TryCatchHybrid98 = p_TryCatchHybrid(strict);

                state._fsp--;
                if (state.failed) {
                    return retval;
                }
                if (state.backtracking == 0) {
                    adaptor.addChild(root_0, p_TryCatchHybrid98.getTree());
                }

            }
            break;
            case 6:
                // XQueryParser.g:408:11: p_ExprSimple
            {
                root_0 = (XQDTCommonTree)adaptor.nil();

                pushFollow(FOLLOW_p_ExprSimple_in_p_ExprSingle3682);
                p_ExprSimple99 = p_ExprSimple();

                state._fsp--;
                if (state.failed) {
                    return retval;
                }
                if (state.backtracking == 0) {
                    adaptor.addChild(root_0, p_ExprSimple99.getTree());
                }

            }
            break;

            }
            retval.stop = input.LT(-1);

            if (state.backtracking == 0) {

                retval.tree = (XQDTCommonTree)adaptor.rulePostProcessing(root_0);
                adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        } catch (RecognitionException re) {
            reportError(re);
            recover(input, re);
            retval.tree = (XQDTCommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        } finally {
        }
        return retval;
    }

    // $ANTLR end "p_ExprSingle"

    public static class p_FLWORHybrid_return extends ParserRuleReturnScope {
        XQDTCommonTree tree;

        public Object getTree() {
            return tree;
        }
    };

    // $ANTLR start "p_FLWORHybrid"
    // XQueryParser.g:412:1: p_FLWORHybrid[boolean strict] : p_InitialClause ( p_IntermediateClause )* p_ReturnHybrid[$strict] ;
    public final XQueryParser.p_FLWORHybrid_return p_FLWORHybrid(boolean strict) throws RecognitionException {
        XQueryParser.p_FLWORHybrid_return retval = new XQueryParser.p_FLWORHybrid_return();
        retval.start = input.LT(1);

        XQDTCommonTree root_0 = null;

        XQueryParser.p_InitialClause_return p_InitialClause100 = null;

        XQueryParser.p_IntermediateClause_return p_IntermediateClause101 = null;

        XQueryParser.p_ReturnHybrid_return p_ReturnHybrid102 = null;

        try {
            // XQueryParser.g:413:9: ( p_InitialClause ( p_IntermediateClause )* p_ReturnHybrid[$strict] )
            // XQueryParser.g:413:11: p_InitialClause ( p_IntermediateClause )* p_ReturnHybrid[$strict]
            {
                root_0 = (XQDTCommonTree)adaptor.nil();

                pushFollow(FOLLOW_p_InitialClause_in_p_FLWORHybrid3709);
                p_InitialClause100 = p_InitialClause();

                state._fsp--;
                if (state.failed) {
                    return retval;
                }
                if (state.backtracking == 0) {
                    adaptor.addChild(root_0, p_InitialClause100.getTree());
                }
                // XQueryParser.g:413:27: ( p_IntermediateClause )*
                loop47: do {
                    int alt47 = 2;
                    int LA47_0 = input.LA(1);

                    if ((LA47_0 == FOR || LA47_0 == LET || LA47_0 == ORDER || LA47_0 == STABLE || LA47_0 == WHERE
                            || LA47_0 == COUNT || LA47_0 == GROUP)) {
                        alt47 = 1;
                    }

                    switch (alt47) {
                    case 1:
                        // XQueryParser.g:413:27: p_IntermediateClause
                    {
                        pushFollow(FOLLOW_p_IntermediateClause_in_p_FLWORHybrid3711);
                        p_IntermediateClause101 = p_IntermediateClause();

                        state._fsp--;
                        if (state.failed) {
                            return retval;
                        }
                        if (state.backtracking == 0) {
                            adaptor.addChild(root_0, p_IntermediateClause101.getTree());
                        }

                    }
                    break;

                    default:
                        break loop47;
                    }
                } while (true);

                pushFollow(FOLLOW_p_ReturnHybrid_in_p_FLWORHybrid3714);
                p_ReturnHybrid102 = p_ReturnHybrid(strict);

                state._fsp--;
                if (state.failed) {
                    return retval;
                }
                if (state.backtracking == 0) {
                    adaptor.addChild(root_0, p_ReturnHybrid102.getTree());
                }

            }

            retval.stop = input.LT(-1);

            if (state.backtracking == 0) {

                retval.tree = (XQDTCommonTree)adaptor.rulePostProcessing(root_0);
                adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        } catch (RecognitionException re) {
            reportError(re);
            recover(input, re);
            retval.tree = (XQDTCommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        } finally {
        }
        return retval;
    }

    // $ANTLR end "p_FLWORHybrid"

    public static class p_InitialClause_return extends ParserRuleReturnScope {
        XQDTCommonTree tree;

        public Object getTree() {
            return tree;
        }
    };

    // $ANTLR start "p_InitialClause"
    // XQueryParser.g:417:1: p_InitialClause : ( p_ForClause | p_LetClause | p_WindowClause );
    public final XQueryParser.p_InitialClause_return p_InitialClause() throws RecognitionException {
        XQueryParser.p_InitialClause_return retval = new XQueryParser.p_InitialClause_return();
        retval.start = input.LT(1);

        XQDTCommonTree root_0 = null;

        XQueryParser.p_ForClause_return p_ForClause103 = null;

        XQueryParser.p_LetClause_return p_LetClause104 = null;

        XQueryParser.p_WindowClause_return p_WindowClause105 = null;

        try {
            // XQueryParser.g:418:9: ( p_ForClause | p_LetClause | p_WindowClause )
            int alt48 = 3;
            int LA48_0 = input.LA(1);

            if ((LA48_0 == FOR)) {
                int LA48_1 = input.LA(2);

                if ((LA48_1 == DOLLAR)) {
                    alt48 = 1;
                } else if ((LA48_1 == SLIDING || LA48_1 == TUMBLING)) {
                    alt48 = 3;
                } else {
                    if (state.backtracking > 0) {
                        state.failed = true;
                        return retval;
                    }
                    NoViableAltException nvae = new NoViableAltException("", 48, 1, input);

                    throw nvae;
                }
            } else if ((LA48_0 == LET)) {
                alt48 = 2;
            } else {
                if (state.backtracking > 0) {
                    state.failed = true;
                    return retval;
                }
                NoViableAltException nvae = new NoViableAltException("", 48, 0, input);

                throw nvae;
            }
            switch (alt48) {
            case 1:
                // XQueryParser.g:418:11: p_ForClause
            {
                root_0 = (XQDTCommonTree)adaptor.nil();

                pushFollow(FOLLOW_p_ForClause_in_p_InitialClause3741);
                p_ForClause103 = p_ForClause();

                state._fsp--;
                if (state.failed) {
                    return retval;
                }
                if (state.backtracking == 0) {
                    adaptor.addChild(root_0, p_ForClause103.getTree());
                }

            }
            break;
            case 2:
                // XQueryParser.g:418:25: p_LetClause
            {
                root_0 = (XQDTCommonTree)adaptor.nil();

                pushFollow(FOLLOW_p_LetClause_in_p_InitialClause3745);
                p_LetClause104 = p_LetClause();

                state._fsp--;
                if (state.failed) {
                    return retval;
                }
                if (state.backtracking == 0) {
                    adaptor.addChild(root_0, p_LetClause104.getTree());
                }

            }
            break;
            case 3:
                // XQueryParser.g:418:39: p_WindowClause
            {
                root_0 = (XQDTCommonTree)adaptor.nil();

                pushFollow(FOLLOW_p_WindowClause_in_p_InitialClause3749);
                p_WindowClause105 = p_WindowClause();

                state._fsp--;
                if (state.failed) {
                    return retval;
                }
                if (state.backtracking == 0) {
                    adaptor.addChild(root_0, p_WindowClause105.getTree());
                }

            }
            break;

            }
            retval.stop = input.LT(-1);

            if (state.backtracking == 0) {

                retval.tree = (XQDTCommonTree)adaptor.rulePostProcessing(root_0);
                adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        } catch (RecognitionException re) {
            reportError(re);
            recover(input, re);
            retval.tree = (XQDTCommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        } finally {
        }
        return retval;
    }

    // $ANTLR end "p_InitialClause"

    public static class p_IntermediateClause_return extends ParserRuleReturnScope {
        XQDTCommonTree tree;

        public Object getTree() {
            return tree;
        }
    };

    // $ANTLR start "p_IntermediateClause"
    // XQueryParser.g:422:1: p_IntermediateClause : ( p_InitialClause | p_WhereClause | p_GroupByClause | p_OrderByClause | p_CountClause );
    public final XQueryParser.p_IntermediateClause_return p_IntermediateClause() throws RecognitionException {
        XQueryParser.p_IntermediateClause_return retval = new XQueryParser.p_IntermediateClause_return();
        retval.start = input.LT(1);

        XQDTCommonTree root_0 = null;

        XQueryParser.p_InitialClause_return p_InitialClause106 = null;

        XQueryParser.p_WhereClause_return p_WhereClause107 = null;

        XQueryParser.p_GroupByClause_return p_GroupByClause108 = null;

        XQueryParser.p_OrderByClause_return p_OrderByClause109 = null;

        XQueryParser.p_CountClause_return p_CountClause110 = null;

        try {
            // XQueryParser.g:423:9: ( p_InitialClause | p_WhereClause | p_GroupByClause | p_OrderByClause | p_CountClause )
            int alt49 = 5;
            switch (input.LA(1)) {
            case FOR:
            case LET: {
                alt49 = 1;
            }
                break;
            case WHERE: {
                alt49 = 2;
            }
                break;
            case GROUP: {
                alt49 = 3;
            }
                break;
            case ORDER:
            case STABLE: {
                alt49 = 4;
            }
                break;
            case COUNT: {
                alt49 = 5;
            }
                break;
            default:
                if (state.backtracking > 0) {
                    state.failed = true;
                    return retval;
                }
                NoViableAltException nvae = new NoViableAltException("", 49, 0, input);

                throw nvae;
            }

            switch (alt49) {
            case 1:
                // XQueryParser.g:423:11: p_InitialClause
            {
                root_0 = (XQDTCommonTree)adaptor.nil();

                pushFollow(FOLLOW_p_InitialClause_in_p_IntermediateClause3775);
                p_InitialClause106 = p_InitialClause();

                state._fsp--;
                if (state.failed) {
                    return retval;
                }
                if (state.backtracking == 0) {
                    adaptor.addChild(root_0, p_InitialClause106.getTree());
                }

            }
            break;
            case 2:
                // XQueryParser.g:423:29: p_WhereClause
            {
                root_0 = (XQDTCommonTree)adaptor.nil();

                pushFollow(FOLLOW_p_WhereClause_in_p_IntermediateClause3779);
                p_WhereClause107 = p_WhereClause();

                state._fsp--;
                if (state.failed) {
                    return retval;
                }
                if (state.backtracking == 0) {
                    adaptor.addChild(root_0, p_WhereClause107.getTree());
                }

            }
            break;
            case 3:
                // XQueryParser.g:423:45: p_GroupByClause
            {
                root_0 = (XQDTCommonTree)adaptor.nil();

                pushFollow(FOLLOW_p_GroupByClause_in_p_IntermediateClause3783);
                p_GroupByClause108 = p_GroupByClause();

                state._fsp--;
                if (state.failed) {
                    return retval;
                }
                if (state.backtracking == 0) {
                    adaptor.addChild(root_0, p_GroupByClause108.getTree());
                }

            }
            break;
            case 4:
                // XQueryParser.g:423:63: p_OrderByClause
            {
                root_0 = (XQDTCommonTree)adaptor.nil();

                pushFollow(FOLLOW_p_OrderByClause_in_p_IntermediateClause3787);
                p_OrderByClause109 = p_OrderByClause();

                state._fsp--;
                if (state.failed) {
                    return retval;
                }
                if (state.backtracking == 0) {
                    adaptor.addChild(root_0, p_OrderByClause109.getTree());
                }

            }
            break;
            case 5:
                // XQueryParser.g:423:81: p_CountClause
            {
                root_0 = (XQDTCommonTree)adaptor.nil();

                pushFollow(FOLLOW_p_CountClause_in_p_IntermediateClause3791);
                p_CountClause110 = p_CountClause();

                state._fsp--;
                if (state.failed) {
                    return retval;
                }
                if (state.backtracking == 0) {
                    adaptor.addChild(root_0, p_CountClause110.getTree());
                }

            }
            break;

            }
            retval.stop = input.LT(-1);

            if (state.backtracking == 0) {

                retval.tree = (XQDTCommonTree)adaptor.rulePostProcessing(root_0);
                adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        } catch (RecognitionException re) {
            reportError(re);
            recover(input, re);
            retval.tree = (XQDTCommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        } finally {
        }
        return retval;
    }

    // $ANTLR end "p_IntermediateClause"

    public static class p_ForClause_return extends ParserRuleReturnScope {
        XQDTCommonTree tree;

        public Object getTree() {
            return tree;
        }
    };

    // $ANTLR start "p_ForClause"
    // XQueryParser.g:428:1: p_ForClause : k= FOR p_ForBinding ( COMMA p_ForBinding )* ;
    public final XQueryParser.p_ForClause_return p_ForClause() throws RecognitionException {
        XQueryParser.p_ForClause_return retval = new XQueryParser.p_ForClause_return();
        retval.start = input.LT(1);

        XQDTCommonTree root_0 = null;

        CommonToken k = null;
        CommonToken COMMA112 = null;
        XQueryParser.p_ForBinding_return p_ForBinding111 = null;

        XQueryParser.p_ForBinding_return p_ForBinding113 = null;

        XQDTCommonTree k_tree = null;
        XQDTCommonTree COMMA112_tree = null;

        try {
            // XQueryParser.g:429:9: (k= FOR p_ForBinding ( COMMA p_ForBinding )* )
            // XQueryParser.g:429:11: k= FOR p_ForBinding ( COMMA p_ForBinding )*
            {
                root_0 = (XQDTCommonTree)adaptor.nil();

                k = (CommonToken)match(input, FOR, FOLLOW_FOR_in_p_ForClause3820);
                if (state.failed) {
                    return retval;
                }
                if (state.backtracking == 0) {
                    k_tree = (XQDTCommonTree)adaptor.create(k);
                    adaptor.addChild(root_0, k_tree);
                }
                if (state.backtracking == 0) {
                    ak(k);
                }
                pushFollow(FOLLOW_p_ForBinding_in_p_ForClause3824);
                p_ForBinding111 = p_ForBinding();

                state._fsp--;
                if (state.failed) {
                    return retval;
                }
                if (state.backtracking == 0) {
                    adaptor.addChild(root_0, p_ForBinding111.getTree());
                }
                // XQueryParser.g:429:40: ( COMMA p_ForBinding )*
                loop50: do {
                    int alt50 = 2;
                    int LA50_0 = input.LA(1);

                    if ((LA50_0 == COMMA)) {
                        alt50 = 1;
                    }

                    switch (alt50) {
                    case 1:
                        // XQueryParser.g:429:41: COMMA p_ForBinding
                    {
                        COMMA112 = (CommonToken)match(input, COMMA, FOLLOW_COMMA_in_p_ForClause3827);
                        if (state.failed) {
                            return retval;
                        }
                        if (state.backtracking == 0) {
                            COMMA112_tree = (XQDTCommonTree)adaptor.create(COMMA112);
                            adaptor.addChild(root_0, COMMA112_tree);
                        }
                        pushFollow(FOLLOW_p_ForBinding_in_p_ForClause3829);
                        p_ForBinding113 = p_ForBinding();

                        state._fsp--;
                        if (state.failed) {
                            return retval;
                        }
                        if (state.backtracking == 0) {
                            adaptor.addChild(root_0, p_ForBinding113.getTree());
                        }

                    }
                    break;

                    default:
                        break loop50;
                    }
                } while (true);

            }

            retval.stop = input.LT(-1);

            if (state.backtracking == 0) {

                retval.tree = (XQDTCommonTree)adaptor.rulePostProcessing(root_0);
                adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        } catch (RecognitionException re) {
            reportError(re);
            recover(input, re);
            retval.tree = (XQDTCommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        } finally {
        }
        return retval;
    }

    // $ANTLR end "p_ForClause"

    public static class p_ForBinding_return extends ParserRuleReturnScope {
        XQDTCommonTree tree;

        public Object getTree() {
            return tree;
        }
    };

    // $ANTLR start "p_ForBinding"
    // XQueryParser.g:433:1: p_ForBinding : DOLLAR p_VarName ( p_TypeDeclaration )? ( p_AllowingEmpty )? ( p_PositionalVar )? ( p_FTScoreVar )? k= IN p_ExprSingle[true] ;
    public final XQueryParser.p_ForBinding_return p_ForBinding() throws RecognitionException {
        XQueryParser.p_ForBinding_return retval = new XQueryParser.p_ForBinding_return();
        retval.start = input.LT(1);

        XQDTCommonTree root_0 = null;

        CommonToken k = null;
        CommonToken DOLLAR114 = null;
        XQueryParser.p_VarName_return p_VarName115 = null;

        XQueryParser.p_TypeDeclaration_return p_TypeDeclaration116 = null;

        XQueryParser.p_AllowingEmpty_return p_AllowingEmpty117 = null;

        XQueryParser.p_PositionalVar_return p_PositionalVar118 = null;

        XQueryParser.p_FTScoreVar_return p_FTScoreVar119 = null;

        XQueryParser.p_ExprSingle_return p_ExprSingle120 = null;

        XQDTCommonTree k_tree = null;
        XQDTCommonTree DOLLAR114_tree = null;

        try {
            // XQueryParser.g:434:9: ( DOLLAR p_VarName ( p_TypeDeclaration )? ( p_AllowingEmpty )? ( p_PositionalVar )? ( p_FTScoreVar )? k= IN p_ExprSingle[true] )
            // XQueryParser.g:434:11: DOLLAR p_VarName ( p_TypeDeclaration )? ( p_AllowingEmpty )? ( p_PositionalVar )? ( p_FTScoreVar )? k= IN p_ExprSingle[true]
            {
                root_0 = (XQDTCommonTree)adaptor.nil();

                DOLLAR114 = (CommonToken)match(input, DOLLAR, FOLLOW_DOLLAR_in_p_ForBinding3857);
                if (state.failed) {
                    return retval;
                }
                if (state.backtracking == 0) {
                    DOLLAR114_tree = (XQDTCommonTree)adaptor.create(DOLLAR114);
                    adaptor.addChild(root_0, DOLLAR114_tree);
                }
                pushFollow(FOLLOW_p_VarName_in_p_ForBinding3859);
                p_VarName115 = p_VarName();

                state._fsp--;
                if (state.failed) {
                    return retval;
                }
                if (state.backtracking == 0) {
                    adaptor.addChild(root_0, p_VarName115.getTree());
                }
                // XQueryParser.g:434:28: ( p_TypeDeclaration )?
                int alt51 = 2;
                int LA51_0 = input.LA(1);

                if ((LA51_0 == AS)) {
                    alt51 = 1;
                }
                switch (alt51) {
                case 1:
                    // XQueryParser.g:434:28: p_TypeDeclaration
                {
                    pushFollow(FOLLOW_p_TypeDeclaration_in_p_ForBinding3861);
                    p_TypeDeclaration116 = p_TypeDeclaration();

                    state._fsp--;
                    if (state.failed) {
                        return retval;
                    }
                    if (state.backtracking == 0) {
                        adaptor.addChild(root_0, p_TypeDeclaration116.getTree());
                    }

                }
                    break;

                }

                // XQueryParser.g:434:47: ( p_AllowingEmpty )?
                int alt52 = 2;
                int LA52_0 = input.LA(1);

                if ((LA52_0 == ALLOWING)) {
                    alt52 = 1;
                }
                switch (alt52) {
                case 1:
                    // XQueryParser.g:434:47: p_AllowingEmpty
                {
                    pushFollow(FOLLOW_p_AllowingEmpty_in_p_ForBinding3864);
                    p_AllowingEmpty117 = p_AllowingEmpty();

                    state._fsp--;
                    if (state.failed) {
                        return retval;
                    }
                    if (state.backtracking == 0) {
                        adaptor.addChild(root_0, p_AllowingEmpty117.getTree());
                    }

                }
                    break;

                }

                // XQueryParser.g:434:64: ( p_PositionalVar )?
                int alt53 = 2;
                int LA53_0 = input.LA(1);

                if ((LA53_0 == AT)) {
                    alt53 = 1;
                }
                switch (alt53) {
                case 1:
                    // XQueryParser.g:434:64: p_PositionalVar
                {
                    pushFollow(FOLLOW_p_PositionalVar_in_p_ForBinding3867);
                    p_PositionalVar118 = p_PositionalVar();

                    state._fsp--;
                    if (state.failed) {
                        return retval;
                    }
                    if (state.backtracking == 0) {
                        adaptor.addChild(root_0, p_PositionalVar118.getTree());
                    }

                }
                    break;

                }

                // XQueryParser.g:434:81: ( p_FTScoreVar )?
                int alt54 = 2;
                int LA54_0 = input.LA(1);

                if ((LA54_0 == SCORE)) {
                    alt54 = 1;
                }
                switch (alt54) {
                case 1:
                    // XQueryParser.g:434:81: p_FTScoreVar
                {
                    pushFollow(FOLLOW_p_FTScoreVar_in_p_ForBinding3870);
                    p_FTScoreVar119 = p_FTScoreVar();

                    state._fsp--;
                    if (state.failed) {
                        return retval;
                    }
                    if (state.backtracking == 0) {
                        adaptor.addChild(root_0, p_FTScoreVar119.getTree());
                    }

                }
                    break;

                }

                k = (CommonToken)match(input, IN, FOLLOW_IN_in_p_ForBinding3875);
                if (state.failed) {
                    return retval;
                }
                if (state.backtracking == 0) {
                    k_tree = (XQDTCommonTree)adaptor.create(k);
                    adaptor.addChild(root_0, k_tree);
                }
                if (state.backtracking == 0) {
                    ak(k);
                }
                pushFollow(FOLLOW_p_ExprSingle_in_p_ForBinding3879);
                p_ExprSingle120 = p_ExprSingle(true);

                state._fsp--;
                if (state.failed) {
                    return retval;
                }
                if (state.backtracking == 0) {
                    adaptor.addChild(root_0, p_ExprSingle120.getTree());
                }

            }

            retval.stop = input.LT(-1);

            if (state.backtracking == 0) {

                retval.tree = (XQDTCommonTree)adaptor.rulePostProcessing(root_0);
                adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        } catch (RecognitionException re) {
            reportError(re);
            recover(input, re);
            retval.tree = (XQDTCommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        } finally {
        }
        return retval;
    }

    // $ANTLR end "p_ForBinding"

    public static class p_AllowingEmpty_return extends ParserRuleReturnScope {
        XQDTCommonTree tree;

        public Object getTree() {
            return tree;
        }
    };

    // $ANTLR start "p_AllowingEmpty"
    // XQueryParser.g:438:1: p_AllowingEmpty : k= ALLOWING k= EMPTY ;
    public final XQueryParser.p_AllowingEmpty_return p_AllowingEmpty() throws RecognitionException {
        XQueryParser.p_AllowingEmpty_return retval = new XQueryParser.p_AllowingEmpty_return();
        retval.start = input.LT(1);

        XQDTCommonTree root_0 = null;

        CommonToken k = null;

        XQDTCommonTree k_tree = null;

        try {
            // XQueryParser.g:439:9: (k= ALLOWING k= EMPTY )
            // XQueryParser.g:439:11: k= ALLOWING k= EMPTY
            {
                root_0 = (XQDTCommonTree)adaptor.nil();

                k = (CommonToken)match(input, ALLOWING, FOLLOW_ALLOWING_in_p_AllowingEmpty3908);
                if (state.failed) {
                    return retval;
                }
                if (state.backtracking == 0) {
                    k_tree = (XQDTCommonTree)adaptor.create(k);
                    adaptor.addChild(root_0, k_tree);
                }
                if (state.backtracking == 0) {
                    ak(k);
                }
                k = (CommonToken)match(input, EMPTY, FOLLOW_EMPTY_in_p_AllowingEmpty3914);
                if (state.failed) {
                    return retval;
                }
                if (state.backtracking == 0) {
                    k_tree = (XQDTCommonTree)adaptor.create(k);
                    adaptor.addChild(root_0, k_tree);
                }
                if (state.backtracking == 0) {
                    ak(k);
                }

            }

            retval.stop = input.LT(-1);

            if (state.backtracking == 0) {

                retval.tree = (XQDTCommonTree)adaptor.rulePostProcessing(root_0);
                adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        } catch (RecognitionException re) {
            reportError(re);
            recover(input, re);
            retval.tree = (XQDTCommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        } finally {
        }
        return retval;
    }

    // $ANTLR end "p_AllowingEmpty"

    public static class p_PositionalVar_return extends ParserRuleReturnScope {
        XQDTCommonTree tree;

        public Object getTree() {
            return tree;
        }
    };

    // $ANTLR start "p_PositionalVar"
    // XQueryParser.g:443:1: p_PositionalVar : k= AT DOLLAR p_VarName ;
    public final XQueryParser.p_PositionalVar_return p_PositionalVar() throws RecognitionException {
        XQueryParser.p_PositionalVar_return retval = new XQueryParser.p_PositionalVar_return();
        retval.start = input.LT(1);

        XQDTCommonTree root_0 = null;

        CommonToken k = null;
        CommonToken DOLLAR121 = null;
        XQueryParser.p_VarName_return p_VarName122 = null;

        XQDTCommonTree k_tree = null;
        XQDTCommonTree DOLLAR121_tree = null;

        try {
            // XQueryParser.g:444:9: (k= AT DOLLAR p_VarName )
            // XQueryParser.g:444:11: k= AT DOLLAR p_VarName
            {
                root_0 = (XQDTCommonTree)adaptor.nil();

                k = (CommonToken)match(input, AT, FOLLOW_AT_in_p_PositionalVar3944);
                if (state.failed) {
                    return retval;
                }
                if (state.backtracking == 0) {
                    k_tree = (XQDTCommonTree)adaptor.create(k);
                    adaptor.addChild(root_0, k_tree);
                }
                if (state.backtracking == 0) {
                    ak(k);
                }
                DOLLAR121 = (CommonToken)match(input, DOLLAR, FOLLOW_DOLLAR_in_p_PositionalVar3948);
                if (state.failed) {
                    return retval;
                }
                if (state.backtracking == 0) {
                    DOLLAR121_tree = (XQDTCommonTree)adaptor.create(DOLLAR121);
                    adaptor.addChild(root_0, DOLLAR121_tree);
                }
                pushFollow(FOLLOW_p_VarName_in_p_PositionalVar3950);
                p_VarName122 = p_VarName();

                state._fsp--;
                if (state.failed) {
                    return retval;
                }
                if (state.backtracking == 0) {
                    adaptor.addChild(root_0, p_VarName122.getTree());
                }

            }

            retval.stop = input.LT(-1);

            if (state.backtracking == 0) {

                retval.tree = (XQDTCommonTree)adaptor.rulePostProcessing(root_0);
                adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        } catch (RecognitionException re) {
            reportError(re);
            recover(input, re);
            retval.tree = (XQDTCommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        } finally {
        }
        return retval;
    }

    // $ANTLR end "p_PositionalVar"

    public static class p_LetClause_return extends ParserRuleReturnScope {
        XQDTCommonTree tree;

        public Object getTree() {
            return tree;
        }
    };

    // $ANTLR start "p_LetClause"
    // XQueryParser.g:448:1: p_LetClause : k= LET p_LetBinding ( COMMA p_LetBinding )* ;
    public final XQueryParser.p_LetClause_return p_LetClause() throws RecognitionException {
        XQueryParser.p_LetClause_return retval = new XQueryParser.p_LetClause_return();
        retval.start = input.LT(1);

        XQDTCommonTree root_0 = null;

        CommonToken k = null;
        CommonToken COMMA124 = null;
        XQueryParser.p_LetBinding_return p_LetBinding123 = null;

        XQueryParser.p_LetBinding_return p_LetBinding125 = null;

        XQDTCommonTree k_tree = null;
        XQDTCommonTree COMMA124_tree = null;

        try {
            // XQueryParser.g:449:9: (k= LET p_LetBinding ( COMMA p_LetBinding )* )
            // XQueryParser.g:449:11: k= LET p_LetBinding ( COMMA p_LetBinding )*
            {
                root_0 = (XQDTCommonTree)adaptor.nil();

                k = (CommonToken)match(input, LET, FOLLOW_LET_in_p_LetClause3978);
                if (state.failed) {
                    return retval;
                }
                if (state.backtracking == 0) {
                    k_tree = (XQDTCommonTree)adaptor.create(k);
                    adaptor.addChild(root_0, k_tree);
                }
                if (state.backtracking == 0) {
                    ak(k);
                }
                pushFollow(FOLLOW_p_LetBinding_in_p_LetClause3982);
                p_LetBinding123 = p_LetBinding();

                state._fsp--;
                if (state.failed) {
                    return retval;
                }
                if (state.backtracking == 0) {
                    adaptor.addChild(root_0, p_LetBinding123.getTree());
                }
                // XQueryParser.g:449:40: ( COMMA p_LetBinding )*
                loop55: do {
                    int alt55 = 2;
                    int LA55_0 = input.LA(1);

                    if ((LA55_0 == COMMA)) {
                        alt55 = 1;
                    }

                    switch (alt55) {
                    case 1:
                        // XQueryParser.g:449:41: COMMA p_LetBinding
                    {
                        COMMA124 = (CommonToken)match(input, COMMA, FOLLOW_COMMA_in_p_LetClause3985);
                        if (state.failed) {
                            return retval;
                        }
                        if (state.backtracking == 0) {
                            COMMA124_tree = (XQDTCommonTree)adaptor.create(COMMA124);
                            adaptor.addChild(root_0, COMMA124_tree);
                        }
                        pushFollow(FOLLOW_p_LetBinding_in_p_LetClause3987);
                        p_LetBinding125 = p_LetBinding();

                        state._fsp--;
                        if (state.failed) {
                            return retval;
                        }
                        if (state.backtracking == 0) {
                            adaptor.addChild(root_0, p_LetBinding125.getTree());
                        }

                    }
                    break;

                    default:
                        break loop55;
                    }
                } while (true);

            }

            retval.stop = input.LT(-1);

            if (state.backtracking == 0) {

                retval.tree = (XQDTCommonTree)adaptor.rulePostProcessing(root_0);
                adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        } catch (RecognitionException re) {
            reportError(re);
            recover(input, re);
            retval.tree = (XQDTCommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        } finally {
        }
        return retval;
    }

    // $ANTLR end "p_LetClause"

    public static class p_LetBinding_return extends ParserRuleReturnScope {
        XQDTCommonTree tree;

        public Object getTree() {
            return tree;
        }
    };

    // $ANTLR start "p_LetBinding"
    // XQueryParser.g:454:1: p_LetBinding : ( ( DOLLAR p_VarName ( p_TypeDeclaration )? ) | p_FTScoreVar ) BIND p_ExprSingle[true] ;
    public final XQueryParser.p_LetBinding_return p_LetBinding() throws RecognitionException {
        XQueryParser.p_LetBinding_return retval = new XQueryParser.p_LetBinding_return();
        retval.start = input.LT(1);

        XQDTCommonTree root_0 = null;

        CommonToken DOLLAR126 = null;
        CommonToken BIND130 = null;
        XQueryParser.p_VarName_return p_VarName127 = null;

        XQueryParser.p_TypeDeclaration_return p_TypeDeclaration128 = null;

        XQueryParser.p_FTScoreVar_return p_FTScoreVar129 = null;

        XQueryParser.p_ExprSingle_return p_ExprSingle131 = null;

        XQDTCommonTree DOLLAR126_tree = null;
        XQDTCommonTree BIND130_tree = null;

        try {
            // XQueryParser.g:455:9: ( ( ( DOLLAR p_VarName ( p_TypeDeclaration )? ) | p_FTScoreVar ) BIND p_ExprSingle[true] )
            // XQueryParser.g:455:11: ( ( DOLLAR p_VarName ( p_TypeDeclaration )? ) | p_FTScoreVar ) BIND p_ExprSingle[true]
            {
                root_0 = (XQDTCommonTree)adaptor.nil();

                // XQueryParser.g:455:11: ( ( DOLLAR p_VarName ( p_TypeDeclaration )? ) | p_FTScoreVar )
                int alt57 = 2;
                int LA57_0 = input.LA(1);

                if ((LA57_0 == DOLLAR)) {
                    alt57 = 1;
                } else if ((LA57_0 == SCORE)) {
                    alt57 = 2;
                } else {
                    if (state.backtracking > 0) {
                        state.failed = true;
                        return retval;
                    }
                    NoViableAltException nvae = new NoViableAltException("", 57, 0, input);

                    throw nvae;
                }
                switch (alt57) {
                case 1:
                    // XQueryParser.g:455:13: ( DOLLAR p_VarName ( p_TypeDeclaration )? )
                {
                    // XQueryParser.g:455:13: ( DOLLAR p_VarName ( p_TypeDeclaration )? )
                    // XQueryParser.g:455:14: DOLLAR p_VarName ( p_TypeDeclaration )?
                    {
                        DOLLAR126 = (CommonToken)match(input, DOLLAR, FOLLOW_DOLLAR_in_p_LetBinding4019);
                        if (state.failed) {
                            return retval;
                        }
                        if (state.backtracking == 0) {
                            DOLLAR126_tree = (XQDTCommonTree)adaptor.create(DOLLAR126);
                            adaptor.addChild(root_0, DOLLAR126_tree);
                        }
                        pushFollow(FOLLOW_p_VarName_in_p_LetBinding4021);
                        p_VarName127 = p_VarName();

                        state._fsp--;
                        if (state.failed) {
                            return retval;
                        }
                        if (state.backtracking == 0) {
                            adaptor.addChild(root_0, p_VarName127.getTree());
                        }
                        // XQueryParser.g:455:31: ( p_TypeDeclaration )?
                        int alt56 = 2;
                        int LA56_0 = input.LA(1);

                        if ((LA56_0 == AS)) {
                            alt56 = 1;
                        }
                        switch (alt56) {
                        case 1:
                            // XQueryParser.g:455:31: p_TypeDeclaration
                        {
                            pushFollow(FOLLOW_p_TypeDeclaration_in_p_LetBinding4023);
                            p_TypeDeclaration128 = p_TypeDeclaration();

                            state._fsp--;
                            if (state.failed) {
                                return retval;
                            }
                            if (state.backtracking == 0) {
                                adaptor.addChild(root_0, p_TypeDeclaration128.getTree());
                            }

                        }
                            break;

                        }

                    }

                }
                    break;
                case 2:
                    // XQueryParser.g:455:53: p_FTScoreVar
                {
                    pushFollow(FOLLOW_p_FTScoreVar_in_p_LetBinding4029);
                    p_FTScoreVar129 = p_FTScoreVar();

                    state._fsp--;
                    if (state.failed) {
                        return retval;
                    }
                    if (state.backtracking == 0) {
                        adaptor.addChild(root_0, p_FTScoreVar129.getTree());
                    }

                }
                    break;

                }

                BIND130 = (CommonToken)match(input, BIND, FOLLOW_BIND_in_p_LetBinding4033);
                if (state.failed) {
                    return retval;
                }
                if (state.backtracking == 0) {
                    BIND130_tree = (XQDTCommonTree)adaptor.create(BIND130);
                    adaptor.addChild(root_0, BIND130_tree);
                }
                pushFollow(FOLLOW_p_ExprSingle_in_p_LetBinding4035);
                p_ExprSingle131 = p_ExprSingle(true);

                state._fsp--;
                if (state.failed) {
                    return retval;
                }
                if (state.backtracking == 0) {
                    adaptor.addChild(root_0, p_ExprSingle131.getTree());
                }

            }

            retval.stop = input.LT(-1);

            if (state.backtracking == 0) {

                retval.tree = (XQDTCommonTree)adaptor.rulePostProcessing(root_0);
                adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        } catch (RecognitionException re) {
            reportError(re);
            recover(input, re);
            retval.tree = (XQDTCommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        } finally {
        }
        return retval;
    }

    // $ANTLR end "p_LetBinding"

    public static class p_WindowClause_return extends ParserRuleReturnScope {
        XQDTCommonTree tree;

        public Object getTree() {
            return tree;
        }
    };

    // $ANTLR start "p_WindowClause"
    // XQueryParser.g:459:1: p_WindowClause : k= FOR ( p_TumblingWindowClause | p_SlidingWindowClause ) ;
    public final XQueryParser.p_WindowClause_return p_WindowClause() throws RecognitionException {
        XQueryParser.p_WindowClause_return retval = new XQueryParser.p_WindowClause_return();
        retval.start = input.LT(1);

        XQDTCommonTree root_0 = null;

        CommonToken k = null;
        XQueryParser.p_TumblingWindowClause_return p_TumblingWindowClause132 = null;

        XQueryParser.p_SlidingWindowClause_return p_SlidingWindowClause133 = null;

        XQDTCommonTree k_tree = null;

        try {
            // XQueryParser.g:460:9: (k= FOR ( p_TumblingWindowClause | p_SlidingWindowClause ) )
            // XQueryParser.g:460:11: k= FOR ( p_TumblingWindowClause | p_SlidingWindowClause )
            {
                root_0 = (XQDTCommonTree)adaptor.nil();

                k = (CommonToken)match(input, FOR, FOLLOW_FOR_in_p_WindowClause4064);
                if (state.failed) {
                    return retval;
                }
                if (state.backtracking == 0) {
                    k_tree = (XQDTCommonTree)adaptor.create(k);
                    adaptor.addChild(root_0, k_tree);
                }
                if (state.backtracking == 0) {
                    ak(k);
                }
                // XQueryParser.g:460:27: ( p_TumblingWindowClause | p_SlidingWindowClause )
                int alt58 = 2;
                int LA58_0 = input.LA(1);

                if ((LA58_0 == TUMBLING)) {
                    alt58 = 1;
                } else if ((LA58_0 == SLIDING)) {
                    alt58 = 2;
                } else {
                    if (state.backtracking > 0) {
                        state.failed = true;
                        return retval;
                    }
                    NoViableAltException nvae = new NoViableAltException("", 58, 0, input);

                    throw nvae;
                }
                switch (alt58) {
                case 1:
                    // XQueryParser.g:460:28: p_TumblingWindowClause
                {
                    pushFollow(FOLLOW_p_TumblingWindowClause_in_p_WindowClause4069);
                    p_TumblingWindowClause132 = p_TumblingWindowClause();

                    state._fsp--;
                    if (state.failed) {
                        return retval;
                    }
                    if (state.backtracking == 0) {
                        adaptor.addChild(root_0, p_TumblingWindowClause132.getTree());
                    }

                }
                    break;
                case 2:
                    // XQueryParser.g:460:53: p_SlidingWindowClause
                {
                    pushFollow(FOLLOW_p_SlidingWindowClause_in_p_WindowClause4073);
                    p_SlidingWindowClause133 = p_SlidingWindowClause();

                    state._fsp--;
                    if (state.failed) {
                        return retval;
                    }
                    if (state.backtracking == 0) {
                        adaptor.addChild(root_0, p_SlidingWindowClause133.getTree());
                    }

                }
                    break;

                }

            }

            retval.stop = input.LT(-1);

            if (state.backtracking == 0) {

                retval.tree = (XQDTCommonTree)adaptor.rulePostProcessing(root_0);
                adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        } catch (RecognitionException re) {
            reportError(re);
            recover(input, re);
            retval.tree = (XQDTCommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        } finally {
        }
        return retval;
    }

    // $ANTLR end "p_WindowClause"

    public static class p_TumblingWindowClause_return extends ParserRuleReturnScope {
        XQDTCommonTree tree;

        public Object getTree() {
            return tree;
        }
    };

    // $ANTLR start "p_TumblingWindowClause"
    // XQueryParser.g:464:1: p_TumblingWindowClause : k= TUMBLING k= WINDOW DOLLAR p_VarName ( p_TypeDeclaration )? k= IN p_ExprSingle[true] p_WindowStartCondition ( p_WindowEndCondition )? ;
    public final XQueryParser.p_TumblingWindowClause_return p_TumblingWindowClause() throws RecognitionException {
        XQueryParser.p_TumblingWindowClause_return retval = new XQueryParser.p_TumblingWindowClause_return();
        retval.start = input.LT(1);

        XQDTCommonTree root_0 = null;

        CommonToken k = null;
        CommonToken DOLLAR134 = null;
        XQueryParser.p_VarName_return p_VarName135 = null;

        XQueryParser.p_TypeDeclaration_return p_TypeDeclaration136 = null;

        XQueryParser.p_ExprSingle_return p_ExprSingle137 = null;

        XQueryParser.p_WindowStartCondition_return p_WindowStartCondition138 = null;

        XQueryParser.p_WindowEndCondition_return p_WindowEndCondition139 = null;

        XQDTCommonTree k_tree = null;
        XQDTCommonTree DOLLAR134_tree = null;

        try {
            // XQueryParser.g:465:9: (k= TUMBLING k= WINDOW DOLLAR p_VarName ( p_TypeDeclaration )? k= IN p_ExprSingle[true] p_WindowStartCondition ( p_WindowEndCondition )? )
            // XQueryParser.g:465:11: k= TUMBLING k= WINDOW DOLLAR p_VarName ( p_TypeDeclaration )? k= IN p_ExprSingle[true] p_WindowStartCondition ( p_WindowEndCondition )?
            {
                root_0 = (XQDTCommonTree)adaptor.nil();

                k = (CommonToken)match(input, TUMBLING, FOLLOW_TUMBLING_in_p_TumblingWindowClause4110);
                if (state.failed) {
                    return retval;
                }
                if (state.backtracking == 0) {
                    k_tree = (XQDTCommonTree)adaptor.create(k);
                    adaptor.addChild(root_0, k_tree);
                }
                if (state.backtracking == 0) {
                    ak(k);
                }
                k = (CommonToken)match(input, WINDOW, FOLLOW_WINDOW_in_p_TumblingWindowClause4116);
                if (state.failed) {
                    return retval;
                }
                if (state.backtracking == 0) {
                    k_tree = (XQDTCommonTree)adaptor.create(k);
                    adaptor.addChild(root_0, k_tree);
                }
                if (state.backtracking == 0) {
                    ak(k);
                }
                DOLLAR134 = (CommonToken)match(input, DOLLAR, FOLLOW_DOLLAR_in_p_TumblingWindowClause4120);
                if (state.failed) {
                    return retval;
                }
                if (state.backtracking == 0) {
                    DOLLAR134_tree = (XQDTCommonTree)adaptor.create(DOLLAR134);
                    adaptor.addChild(root_0, DOLLAR134_tree);
                }
                pushFollow(FOLLOW_p_VarName_in_p_TumblingWindowClause4122);
                p_VarName135 = p_VarName();

                state._fsp--;
                if (state.failed) {
                    return retval;
                }
                if (state.backtracking == 0) {
                    adaptor.addChild(root_0, p_VarName135.getTree());
                }
                // XQueryParser.g:465:68: ( p_TypeDeclaration )?
                int alt59 = 2;
                int LA59_0 = input.LA(1);

                if ((LA59_0 == AS)) {
                    alt59 = 1;
                }
                switch (alt59) {
                case 1:
                    // XQueryParser.g:465:68: p_TypeDeclaration
                {
                    pushFollow(FOLLOW_p_TypeDeclaration_in_p_TumblingWindowClause4124);
                    p_TypeDeclaration136 = p_TypeDeclaration();

                    state._fsp--;
                    if (state.failed) {
                        return retval;
                    }
                    if (state.backtracking == 0) {
                        adaptor.addChild(root_0, p_TypeDeclaration136.getTree());
                    }

                }
                    break;

                }

                k = (CommonToken)match(input, IN, FOLLOW_IN_in_p_TumblingWindowClause4129);
                if (state.failed) {
                    return retval;
                }
                if (state.backtracking == 0) {
                    k_tree = (XQDTCommonTree)adaptor.create(k);
                    adaptor.addChild(root_0, k_tree);
                }
                if (state.backtracking == 0) {
                    ak(k);
                }
                pushFollow(FOLLOW_p_ExprSingle_in_p_TumblingWindowClause4133);
                p_ExprSingle137 = p_ExprSingle(true);

                state._fsp--;
                if (state.failed) {
                    return retval;
                }
                if (state.backtracking == 0) {
                    adaptor.addChild(root_0, p_ExprSingle137.getTree());
                }
                pushFollow(FOLLOW_p_WindowStartCondition_in_p_TumblingWindowClause4136);
                p_WindowStartCondition138 = p_WindowStartCondition();

                state._fsp--;
                if (state.failed) {
                    return retval;
                }
                if (state.backtracking == 0) {
                    adaptor.addChild(root_0, p_WindowStartCondition138.getTree());
                }
                // XQueryParser.g:465:144: ( p_WindowEndCondition )?
                int alt60 = 2;
                int LA60_0 = input.LA(1);

                if ((LA60_0 == END || LA60_0 == ONLY)) {
                    alt60 = 1;
                }
                switch (alt60) {
                case 1:
                    // XQueryParser.g:465:144: p_WindowEndCondition
                {
                    pushFollow(FOLLOW_p_WindowEndCondition_in_p_TumblingWindowClause4138);
                    p_WindowEndCondition139 = p_WindowEndCondition();

                    state._fsp--;
                    if (state.failed) {
                        return retval;
                    }
                    if (state.backtracking == 0) {
                        adaptor.addChild(root_0, p_WindowEndCondition139.getTree());
                    }

                }
                    break;

                }

            }

            retval.stop = input.LT(-1);

            if (state.backtracking == 0) {

                retval.tree = (XQDTCommonTree)adaptor.rulePostProcessing(root_0);
                adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        } catch (RecognitionException re) {
            reportError(re);
            recover(input, re);
            retval.tree = (XQDTCommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        } finally {
        }
        return retval;
    }

    // $ANTLR end "p_TumblingWindowClause"

    public static class p_SlidingWindowClause_return extends ParserRuleReturnScope {
        XQDTCommonTree tree;

        public Object getTree() {
            return tree;
        }
    };

    // $ANTLR start "p_SlidingWindowClause"
    // XQueryParser.g:469:1: p_SlidingWindowClause : k= SLIDING k= WINDOW DOLLAR p_VarName ( p_TypeDeclaration )? k= IN p_ExprSingle[true] p_WindowStartCondition ( p_WindowEndCondition )? ;
    public final XQueryParser.p_SlidingWindowClause_return p_SlidingWindowClause() throws RecognitionException {
        XQueryParser.p_SlidingWindowClause_return retval = new XQueryParser.p_SlidingWindowClause_return();
        retval.start = input.LT(1);

        XQDTCommonTree root_0 = null;

        CommonToken k = null;
        CommonToken DOLLAR140 = null;
        XQueryParser.p_VarName_return p_VarName141 = null;

        XQueryParser.p_TypeDeclaration_return p_TypeDeclaration142 = null;

        XQueryParser.p_ExprSingle_return p_ExprSingle143 = null;

        XQueryParser.p_WindowStartCondition_return p_WindowStartCondition144 = null;

        XQueryParser.p_WindowEndCondition_return p_WindowEndCondition145 = null;

        XQDTCommonTree k_tree = null;
        XQDTCommonTree DOLLAR140_tree = null;

        try {
            // XQueryParser.g:470:9: (k= SLIDING k= WINDOW DOLLAR p_VarName ( p_TypeDeclaration )? k= IN p_ExprSingle[true] p_WindowStartCondition ( p_WindowEndCondition )? )
            // XQueryParser.g:470:11: k= SLIDING k= WINDOW DOLLAR p_VarName ( p_TypeDeclaration )? k= IN p_ExprSingle[true] p_WindowStartCondition ( p_WindowEndCondition )?
            {
                root_0 = (XQDTCommonTree)adaptor.nil();

                k = (CommonToken)match(input, SLIDING, FOLLOW_SLIDING_in_p_SlidingWindowClause4167);
                if (state.failed) {
                    return retval;
                }
                if (state.backtracking == 0) {
                    k_tree = (XQDTCommonTree)adaptor.create(k);
                    adaptor.addChild(root_0, k_tree);
                }
                if (state.backtracking == 0) {
                    ak(k);
                }
                k = (CommonToken)match(input, WINDOW, FOLLOW_WINDOW_in_p_SlidingWindowClause4173);
                if (state.failed) {
                    return retval;
                }
                if (state.backtracking == 0) {
                    k_tree = (XQDTCommonTree)adaptor.create(k);
                    adaptor.addChild(root_0, k_tree);
                }
                if (state.backtracking == 0) {
                    ak(k);
                }
                DOLLAR140 = (CommonToken)match(input, DOLLAR, FOLLOW_DOLLAR_in_p_SlidingWindowClause4177);
                if (state.failed) {
                    return retval;
                }
                if (state.backtracking == 0) {
                    DOLLAR140_tree = (XQDTCommonTree)adaptor.create(DOLLAR140);
                    adaptor.addChild(root_0, DOLLAR140_tree);
                }
                pushFollow(FOLLOW_p_VarName_in_p_SlidingWindowClause4179);
                p_VarName141 = p_VarName();

                state._fsp--;
                if (state.failed) {
                    return retval;
                }
                if (state.backtracking == 0) {
                    adaptor.addChild(root_0, p_VarName141.getTree());
                }
                // XQueryParser.g:470:67: ( p_TypeDeclaration )?
                int alt61 = 2;
                int LA61_0 = input.LA(1);

                if ((LA61_0 == AS)) {
                    alt61 = 1;
                }
                switch (alt61) {
                case 1:
                    // XQueryParser.g:470:67: p_TypeDeclaration
                {
                    pushFollow(FOLLOW_p_TypeDeclaration_in_p_SlidingWindowClause4181);
                    p_TypeDeclaration142 = p_TypeDeclaration();

                    state._fsp--;
                    if (state.failed) {
                        return retval;
                    }
                    if (state.backtracking == 0) {
                        adaptor.addChild(root_0, p_TypeDeclaration142.getTree());
                    }

                }
                    break;

                }

                k = (CommonToken)match(input, IN, FOLLOW_IN_in_p_SlidingWindowClause4186);
                if (state.failed) {
                    return retval;
                }
                if (state.backtracking == 0) {
                    k_tree = (XQDTCommonTree)adaptor.create(k);
                    adaptor.addChild(root_0, k_tree);
                }
                if (state.backtracking == 0) {
                    ak(k);
                }
                pushFollow(FOLLOW_p_ExprSingle_in_p_SlidingWindowClause4190);
                p_ExprSingle143 = p_ExprSingle(true);

                state._fsp--;
                if (state.failed) {
                    return retval;
                }
                if (state.backtracking == 0) {
                    adaptor.addChild(root_0, p_ExprSingle143.getTree());
                }
                pushFollow(FOLLOW_p_WindowStartCondition_in_p_SlidingWindowClause4193);
                p_WindowStartCondition144 = p_WindowStartCondition();

                state._fsp--;
                if (state.failed) {
                    return retval;
                }
                if (state.backtracking == 0) {
                    adaptor.addChild(root_0, p_WindowStartCondition144.getTree());
                }
                // XQueryParser.g:470:143: ( p_WindowEndCondition )?
                int alt62 = 2;
                int LA62_0 = input.LA(1);

                if ((LA62_0 == END || LA62_0 == ONLY)) {
                    alt62 = 1;
                }
                switch (alt62) {
                case 1:
                    // XQueryParser.g:470:143: p_WindowEndCondition
                {
                    pushFollow(FOLLOW_p_WindowEndCondition_in_p_SlidingWindowClause4195);
                    p_WindowEndCondition145 = p_WindowEndCondition();

                    state._fsp--;
                    if (state.failed) {
                        return retval;
                    }
                    if (state.backtracking == 0) {
                        adaptor.addChild(root_0, p_WindowEndCondition145.getTree());
                    }

                }
                    break;

                }

            }

            retval.stop = input.LT(-1);

            if (state.backtracking == 0) {

                retval.tree = (XQDTCommonTree)adaptor.rulePostProcessing(root_0);
                adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        } catch (RecognitionException re) {
            reportError(re);
            recover(input, re);
            retval.tree = (XQDTCommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        } finally {
        }
        return retval;
    }

    // $ANTLR end "p_SlidingWindowClause"

    public static class p_WindowStartCondition_return extends ParserRuleReturnScope {
        XQDTCommonTree tree;

        public Object getTree() {
            return tree;
        }
    };

    // $ANTLR start "p_WindowStartCondition"
    // XQueryParser.g:474:1: p_WindowStartCondition : k= START p_WindowVars k= WHEN p_ExprSingle[true] ;
    public final XQueryParser.p_WindowStartCondition_return p_WindowStartCondition() throws RecognitionException {
        XQueryParser.p_WindowStartCondition_return retval = new XQueryParser.p_WindowStartCondition_return();
        retval.start = input.LT(1);

        XQDTCommonTree root_0 = null;

        CommonToken k = null;
        XQueryParser.p_WindowVars_return p_WindowVars146 = null;

        XQueryParser.p_ExprSingle_return p_ExprSingle147 = null;

        XQDTCommonTree k_tree = null;

        try {
            // XQueryParser.g:475:9: (k= START p_WindowVars k= WHEN p_ExprSingle[true] )
            // XQueryParser.g:475:11: k= START p_WindowVars k= WHEN p_ExprSingle[true]
            {
                root_0 = (XQDTCommonTree)adaptor.nil();

                k = (CommonToken)match(input, START, FOLLOW_START_in_p_WindowStartCondition4224);
                if (state.failed) {
                    return retval;
                }
                if (state.backtracking == 0) {
                    k_tree = (XQDTCommonTree)adaptor.create(k);
                    adaptor.addChild(root_0, k_tree);
                }
                if (state.backtracking == 0) {
                    ak(k);
                }
                pushFollow(FOLLOW_p_WindowVars_in_p_WindowStartCondition4228);
                p_WindowVars146 = p_WindowVars();

                state._fsp--;
                if (state.failed) {
                    return retval;
                }
                if (state.backtracking == 0) {
                    adaptor.addChild(root_0, p_WindowVars146.getTree());
                }
                k = (CommonToken)match(input, WHEN, FOLLOW_WHEN_in_p_WindowStartCondition4232);
                if (state.failed) {
                    return retval;
                }
                if (state.backtracking == 0) {
                    k_tree = (XQDTCommonTree)adaptor.create(k);
                    adaptor.addChild(root_0, k_tree);
                }
                if (state.backtracking == 0) {
                    ak(k);
                }
                pushFollow(FOLLOW_p_ExprSingle_in_p_WindowStartCondition4236);
                p_ExprSingle147 = p_ExprSingle(true);

                state._fsp--;
                if (state.failed) {
                    return retval;
                }
                if (state.backtracking == 0) {
                    adaptor.addChild(root_0, p_ExprSingle147.getTree());
                }

            }

            retval.stop = input.LT(-1);

            if (state.backtracking == 0) {

                retval.tree = (XQDTCommonTree)adaptor.rulePostProcessing(root_0);
                adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        } catch (RecognitionException re) {
            reportError(re);
            recover(input, re);
            retval.tree = (XQDTCommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        } finally {
        }
        return retval;
    }

    // $ANTLR end "p_WindowStartCondition"

    public static class p_WindowEndCondition_return extends ParserRuleReturnScope {
        XQDTCommonTree tree;

        public Object getTree() {
            return tree;
        }
    };

    // $ANTLR start "p_WindowEndCondition"
    // XQueryParser.g:479:1: p_WindowEndCondition : (k= ONLY )? k= END p_WindowVars k= WHEN p_ExprSingle[true] ;
    public final XQueryParser.p_WindowEndCondition_return p_WindowEndCondition() throws RecognitionException {
        XQueryParser.p_WindowEndCondition_return retval = new XQueryParser.p_WindowEndCondition_return();
        retval.start = input.LT(1);

        XQDTCommonTree root_0 = null;

        CommonToken k = null;
        XQueryParser.p_WindowVars_return p_WindowVars148 = null;

        XQueryParser.p_ExprSingle_return p_ExprSingle149 = null;

        XQDTCommonTree k_tree = null;

        try {
            // XQueryParser.g:480:9: ( (k= ONLY )? k= END p_WindowVars k= WHEN p_ExprSingle[true] )
            // XQueryParser.g:480:11: (k= ONLY )? k= END p_WindowVars k= WHEN p_ExprSingle[true]
            {
                root_0 = (XQDTCommonTree)adaptor.nil();

                // XQueryParser.g:480:11: (k= ONLY )?
                int alt63 = 2;
                int LA63_0 = input.LA(1);

                if ((LA63_0 == ONLY)) {
                    alt63 = 1;
                }
                switch (alt63) {
                case 1:
                    // XQueryParser.g:480:12: k= ONLY
                {
                    k = (CommonToken)match(input, ONLY, FOLLOW_ONLY_in_p_WindowEndCondition4266);
                    if (state.failed) {
                        return retval;
                    }
                    if (state.backtracking == 0) {
                        k_tree = (XQDTCommonTree)adaptor.create(k);
                        adaptor.addChild(root_0, k_tree);
                    }
                    if (state.backtracking == 0) {
                        ak(k);
                    }

                }
                    break;

                }

                k = (CommonToken)match(input, END, FOLLOW_END_in_p_WindowEndCondition4274);
                if (state.failed) {
                    return retval;
                }
                if (state.backtracking == 0) {
                    k_tree = (XQDTCommonTree)adaptor.create(k);
                    adaptor.addChild(root_0, k_tree);
                }
                if (state.backtracking == 0) {
                    ak(k);
                }
                pushFollow(FOLLOW_p_WindowVars_in_p_WindowEndCondition4278);
                p_WindowVars148 = p_WindowVars();

                state._fsp--;
                if (state.failed) {
                    return retval;
                }
                if (state.backtracking == 0) {
                    adaptor.addChild(root_0, p_WindowVars148.getTree());
                }
                k = (CommonToken)match(input, WHEN, FOLLOW_WHEN_in_p_WindowEndCondition4282);
                if (state.failed) {
                    return retval;
                }
                if (state.backtracking == 0) {
                    k_tree = (XQDTCommonTree)adaptor.create(k);
                    adaptor.addChild(root_0, k_tree);
                }
                if (state.backtracking == 0) {
                    ak(k);
                }
                pushFollow(FOLLOW_p_ExprSingle_in_p_WindowEndCondition4286);
                p_ExprSingle149 = p_ExprSingle(true);

                state._fsp--;
                if (state.failed) {
                    return retval;
                }
                if (state.backtracking == 0) {
                    adaptor.addChild(root_0, p_ExprSingle149.getTree());
                }

            }

            retval.stop = input.LT(-1);

            if (state.backtracking == 0) {

                retval.tree = (XQDTCommonTree)adaptor.rulePostProcessing(root_0);
                adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        } catch (RecognitionException re) {
            reportError(re);
            recover(input, re);
            retval.tree = (XQDTCommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        } finally {
        }
        return retval;
    }

    // $ANTLR end "p_WindowEndCondition"

    public static class p_WindowVars_return extends ParserRuleReturnScope {
        XQDTCommonTree tree;

        public Object getTree() {
            return tree;
        }
    };

    // $ANTLR start "p_WindowVars"
    // XQueryParser.g:484:1: p_WindowVars : ( DOLLAR p_CurrentItem )? ( p_PositionalVar )? (k= PREVIOUS DOLLAR p_PreviousItem )? (k= NEXT DOLLAR p_NextItem )? ;
    public final XQueryParser.p_WindowVars_return p_WindowVars() throws RecognitionException {
        XQueryParser.p_WindowVars_return retval = new XQueryParser.p_WindowVars_return();
        retval.start = input.LT(1);

        XQDTCommonTree root_0 = null;

        CommonToken k = null;
        CommonToken DOLLAR150 = null;
        CommonToken DOLLAR153 = null;
        CommonToken DOLLAR155 = null;
        XQueryParser.p_CurrentItem_return p_CurrentItem151 = null;

        XQueryParser.p_PositionalVar_return p_PositionalVar152 = null;

        XQueryParser.p_PreviousItem_return p_PreviousItem154 = null;

        XQueryParser.p_NextItem_return p_NextItem156 = null;

        XQDTCommonTree k_tree = null;
        XQDTCommonTree DOLLAR150_tree = null;
        XQDTCommonTree DOLLAR153_tree = null;
        XQDTCommonTree DOLLAR155_tree = null;

        try {
            // XQueryParser.g:485:9: ( ( DOLLAR p_CurrentItem )? ( p_PositionalVar )? (k= PREVIOUS DOLLAR p_PreviousItem )? (k= NEXT DOLLAR p_NextItem )? )
            // XQueryParser.g:485:11: ( DOLLAR p_CurrentItem )? ( p_PositionalVar )? (k= PREVIOUS DOLLAR p_PreviousItem )? (k= NEXT DOLLAR p_NextItem )?
            {
                root_0 = (XQDTCommonTree)adaptor.nil();

                // XQueryParser.g:485:11: ( DOLLAR p_CurrentItem )?
                int alt64 = 2;
                int LA64_0 = input.LA(1);

                if ((LA64_0 == DOLLAR)) {
                    alt64 = 1;
                }
                switch (alt64) {
                case 1:
                    // XQueryParser.g:485:12: DOLLAR p_CurrentItem
                {
                    DOLLAR150 = (CommonToken)match(input, DOLLAR, FOLLOW_DOLLAR_in_p_WindowVars4314);
                    if (state.failed) {
                        return retval;
                    }
                    if (state.backtracking == 0) {
                        DOLLAR150_tree = (XQDTCommonTree)adaptor.create(DOLLAR150);
                        adaptor.addChild(root_0, DOLLAR150_tree);
                    }
                    pushFollow(FOLLOW_p_CurrentItem_in_p_WindowVars4316);
                    p_CurrentItem151 = p_CurrentItem();

                    state._fsp--;
                    if (state.failed) {
                        return retval;
                    }
                    if (state.backtracking == 0) {
                        adaptor.addChild(root_0, p_CurrentItem151.getTree());
                    }

                }
                    break;

                }

                // XQueryParser.g:485:35: ( p_PositionalVar )?
                int alt65 = 2;
                int LA65_0 = input.LA(1);

                if ((LA65_0 == AT)) {
                    alt65 = 1;
                }
                switch (alt65) {
                case 1:
                    // XQueryParser.g:485:35: p_PositionalVar
                {
                    pushFollow(FOLLOW_p_PositionalVar_in_p_WindowVars4320);
                    p_PositionalVar152 = p_PositionalVar();

                    state._fsp--;
                    if (state.failed) {
                        return retval;
                    }
                    if (state.backtracking == 0) {
                        adaptor.addChild(root_0, p_PositionalVar152.getTree());
                    }

                }
                    break;

                }

                // XQueryParser.g:485:52: (k= PREVIOUS DOLLAR p_PreviousItem )?
                int alt66 = 2;
                int LA66_0 = input.LA(1);

                if ((LA66_0 == PREVIOUS)) {
                    alt66 = 1;
                }
                switch (alt66) {
                case 1:
                    // XQueryParser.g:485:53: k= PREVIOUS DOLLAR p_PreviousItem
                {
                    k = (CommonToken)match(input, PREVIOUS, FOLLOW_PREVIOUS_in_p_WindowVars4326);
                    if (state.failed) {
                        return retval;
                    }
                    if (state.backtracking == 0) {
                        k_tree = (XQDTCommonTree)adaptor.create(k);
                        adaptor.addChild(root_0, k_tree);
                    }
                    if (state.backtracking == 0) {
                        ak(k);
                    }
                    DOLLAR153 = (CommonToken)match(input, DOLLAR, FOLLOW_DOLLAR_in_p_WindowVars4330);
                    if (state.failed) {
                        return retval;
                    }
                    if (state.backtracking == 0) {
                        DOLLAR153_tree = (XQDTCommonTree)adaptor.create(DOLLAR153);
                        adaptor.addChild(root_0, DOLLAR153_tree);
                    }
                    pushFollow(FOLLOW_p_PreviousItem_in_p_WindowVars4332);
                    p_PreviousItem154 = p_PreviousItem();

                    state._fsp--;
                    if (state.failed) {
                        return retval;
                    }
                    if (state.backtracking == 0) {
                        adaptor.addChild(root_0, p_PreviousItem154.getTree());
                    }

                }
                    break;

                }

                // XQueryParser.g:485:98: (k= NEXT DOLLAR p_NextItem )?
                int alt67 = 2;
                int LA67_0 = input.LA(1);

                if ((LA67_0 == NEXT)) {
                    alt67 = 1;
                }
                switch (alt67) {
                case 1:
                    // XQueryParser.g:485:99: k= NEXT DOLLAR p_NextItem
                {
                    k = (CommonToken)match(input, NEXT, FOLLOW_NEXT_in_p_WindowVars4339);
                    if (state.failed) {
                        return retval;
                    }
                    if (state.backtracking == 0) {
                        k_tree = (XQDTCommonTree)adaptor.create(k);
                        adaptor.addChild(root_0, k_tree);
                    }
                    if (state.backtracking == 0) {
                        ak(k);
                    }
                    DOLLAR155 = (CommonToken)match(input, DOLLAR, FOLLOW_DOLLAR_in_p_WindowVars4343);
                    if (state.failed) {
                        return retval;
                    }
                    if (state.backtracking == 0) {
                        DOLLAR155_tree = (XQDTCommonTree)adaptor.create(DOLLAR155);
                        adaptor.addChild(root_0, DOLLAR155_tree);
                    }
                    pushFollow(FOLLOW_p_NextItem_in_p_WindowVars4345);
                    p_NextItem156 = p_NextItem();

                    state._fsp--;
                    if (state.failed) {
                        return retval;
                    }
                    if (state.backtracking == 0) {
                        adaptor.addChild(root_0, p_NextItem156.getTree());
                    }

                }
                    break;

                }

            }

            retval.stop = input.LT(-1);

            if (state.backtracking == 0) {

                retval.tree = (XQDTCommonTree)adaptor.rulePostProcessing(root_0);
                adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        } catch (RecognitionException re) {
            reportError(re);
            recover(input, re);
            retval.tree = (XQDTCommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        } finally {
        }
        return retval;
    }

    // $ANTLR end "p_WindowVars"

    public static class p_CurrentItem_return extends ParserRuleReturnScope {
        XQDTCommonTree tree;

        public Object getTree() {
            return tree;
        }
    };

    // $ANTLR start "p_CurrentItem"
    // XQueryParser.g:489:1: p_CurrentItem : p_QName ;
    public final XQueryParser.p_CurrentItem_return p_CurrentItem() throws RecognitionException {
        XQueryParser.p_CurrentItem_return retval = new XQueryParser.p_CurrentItem_return();
        retval.start = input.LT(1);

        XQDTCommonTree root_0 = null;

        XQueryParser.p_QName_return p_QName157 = null;

        try {
            // XQueryParser.g:490:9: ( p_QName )
            // XQueryParser.g:490:11: p_QName
            {
                root_0 = (XQDTCommonTree)adaptor.nil();

                pushFollow(FOLLOW_p_QName_in_p_CurrentItem4373);
                p_QName157 = p_QName();

                state._fsp--;
                if (state.failed) {
                    return retval;
                }
                if (state.backtracking == 0) {
                    adaptor.addChild(root_0, p_QName157.getTree());
                }

            }

            retval.stop = input.LT(-1);

            if (state.backtracking == 0) {

                retval.tree = (XQDTCommonTree)adaptor.rulePostProcessing(root_0);
                adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        } catch (RecognitionException re) {
            reportError(re);
            recover(input, re);
            retval.tree = (XQDTCommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        } finally {
        }
        return retval;
    }

    // $ANTLR end "p_CurrentItem"

    public static class p_PreviousItem_return extends ParserRuleReturnScope {
        XQDTCommonTree tree;

        public Object getTree() {
            return tree;
        }
    };

    // $ANTLR start "p_PreviousItem"
    // XQueryParser.g:494:1: p_PreviousItem : p_QName ;
    public final XQueryParser.p_PreviousItem_return p_PreviousItem() throws RecognitionException {
        XQueryParser.p_PreviousItem_return retval = new XQueryParser.p_PreviousItem_return();
        retval.start = input.LT(1);

        XQDTCommonTree root_0 = null;

        XQueryParser.p_QName_return p_QName158 = null;

        try {
            // XQueryParser.g:495:9: ( p_QName )
            // XQueryParser.g:495:11: p_QName
            {
                root_0 = (XQDTCommonTree)adaptor.nil();

                pushFollow(FOLLOW_p_QName_in_p_PreviousItem4399);
                p_QName158 = p_QName();

                state._fsp--;
                if (state.failed) {
                    return retval;
                }
                if (state.backtracking == 0) {
                    adaptor.addChild(root_0, p_QName158.getTree());
                }

            }

            retval.stop = input.LT(-1);

            if (state.backtracking == 0) {

                retval.tree = (XQDTCommonTree)adaptor.rulePostProcessing(root_0);
                adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        } catch (RecognitionException re) {
            reportError(re);
            recover(input, re);
            retval.tree = (XQDTCommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        } finally {
        }
        return retval;
    }

    // $ANTLR end "p_PreviousItem"

    public static class p_NextItem_return extends ParserRuleReturnScope {
        XQDTCommonTree tree;

        public Object getTree() {
            return tree;
        }
    };

    // $ANTLR start "p_NextItem"
    // XQueryParser.g:499:1: p_NextItem : p_QName ;
    public final XQueryParser.p_NextItem_return p_NextItem() throws RecognitionException {
        XQueryParser.p_NextItem_return retval = new XQueryParser.p_NextItem_return();
        retval.start = input.LT(1);

        XQDTCommonTree root_0 = null;

        XQueryParser.p_QName_return p_QName159 = null;

        try {
            // XQueryParser.g:500:9: ( p_QName )
            // XQueryParser.g:500:11: p_QName
            {
                root_0 = (XQDTCommonTree)adaptor.nil();

                pushFollow(FOLLOW_p_QName_in_p_NextItem4425);
                p_QName159 = p_QName();

                state._fsp--;
                if (state.failed) {
                    return retval;
                }
                if (state.backtracking == 0) {
                    adaptor.addChild(root_0, p_QName159.getTree());
                }

            }

            retval.stop = input.LT(-1);

            if (state.backtracking == 0) {

                retval.tree = (XQDTCommonTree)adaptor.rulePostProcessing(root_0);
                adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        } catch (RecognitionException re) {
            reportError(re);
            recover(input, re);
            retval.tree = (XQDTCommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        } finally {
        }
        return retval;
    }

    // $ANTLR end "p_NextItem"

    public static class p_CountClause_return extends ParserRuleReturnScope {
        XQDTCommonTree tree;

        public Object getTree() {
            return tree;
        }
    };

    // $ANTLR start "p_CountClause"
    // XQueryParser.g:504:1: p_CountClause : k= COUNT DOLLAR p_VarName ;
    public final XQueryParser.p_CountClause_return p_CountClause() throws RecognitionException {
        XQueryParser.p_CountClause_return retval = new XQueryParser.p_CountClause_return();
        retval.start = input.LT(1);

        XQDTCommonTree root_0 = null;

        CommonToken k = null;
        CommonToken DOLLAR160 = null;
        XQueryParser.p_VarName_return p_VarName161 = null;

        XQDTCommonTree k_tree = null;
        XQDTCommonTree DOLLAR160_tree = null;

        try {
            // XQueryParser.g:505:9: (k= COUNT DOLLAR p_VarName )
            // XQueryParser.g:505:11: k= COUNT DOLLAR p_VarName
            {
                root_0 = (XQDTCommonTree)adaptor.nil();

                k = (CommonToken)match(input, COUNT, FOLLOW_COUNT_in_p_CountClause4453);
                if (state.failed) {
                    return retval;
                }
                if (state.backtracking == 0) {
                    k_tree = (XQDTCommonTree)adaptor.create(k);
                    adaptor.addChild(root_0, k_tree);
                }
                if (state.backtracking == 0) {
                    ak(k);
                }
                DOLLAR160 = (CommonToken)match(input, DOLLAR, FOLLOW_DOLLAR_in_p_CountClause4457);
                if (state.failed) {
                    return retval;
                }
                if (state.backtracking == 0) {
                    DOLLAR160_tree = (XQDTCommonTree)adaptor.create(DOLLAR160);
                    adaptor.addChild(root_0, DOLLAR160_tree);
                }
                pushFollow(FOLLOW_p_VarName_in_p_CountClause4459);
                p_VarName161 = p_VarName();

                state._fsp--;
                if (state.failed) {
                    return retval;
                }
                if (state.backtracking == 0) {
                    adaptor.addChild(root_0, p_VarName161.getTree());
                }

            }

            retval.stop = input.LT(-1);

            if (state.backtracking == 0) {

                retval.tree = (XQDTCommonTree)adaptor.rulePostProcessing(root_0);
                adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        } catch (RecognitionException re) {
            reportError(re);
            recover(input, re);
            retval.tree = (XQDTCommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        } finally {
        }
        return retval;
    }

    // $ANTLR end "p_CountClause"

    public static class p_WhereClause_return extends ParserRuleReturnScope {
        XQDTCommonTree tree;

        public Object getTree() {
            return tree;
        }
    };

    // $ANTLR start "p_WhereClause"
    // XQueryParser.g:509:1: p_WhereClause : k= WHERE p_ExprSingle[true] ;
    public final XQueryParser.p_WhereClause_return p_WhereClause() throws RecognitionException {
        XQueryParser.p_WhereClause_return retval = new XQueryParser.p_WhereClause_return();
        retval.start = input.LT(1);

        XQDTCommonTree root_0 = null;

        CommonToken k = null;
        XQueryParser.p_ExprSingle_return p_ExprSingle162 = null;

        XQDTCommonTree k_tree = null;

        try {
            // XQueryParser.g:510:9: (k= WHERE p_ExprSingle[true] )
            // XQueryParser.g:510:11: k= WHERE p_ExprSingle[true]
            {
                root_0 = (XQDTCommonTree)adaptor.nil();

                k = (CommonToken)match(input, WHERE, FOLLOW_WHERE_in_p_WhereClause4495);
                if (state.failed) {
                    return retval;
                }
                if (state.backtracking == 0) {
                    k_tree = (XQDTCommonTree)adaptor.create(k);
                    adaptor.addChild(root_0, k_tree);
                }
                if (state.backtracking == 0) {
                    ak(k);
                }
                pushFollow(FOLLOW_p_ExprSingle_in_p_WhereClause4499);
                p_ExprSingle162 = p_ExprSingle(true);

                state._fsp--;
                if (state.failed) {
                    return retval;
                }
                if (state.backtracking == 0) {
                    adaptor.addChild(root_0, p_ExprSingle162.getTree());
                }

            }

            retval.stop = input.LT(-1);

            if (state.backtracking == 0) {

                retval.tree = (XQDTCommonTree)adaptor.rulePostProcessing(root_0);
                adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        } catch (RecognitionException re) {
            reportError(re);
            recover(input, re);
            retval.tree = (XQDTCommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        } finally {
        }
        return retval;
    }

    // $ANTLR end "p_WhereClause"

    public static class p_GroupByClause_return extends ParserRuleReturnScope {
        XQDTCommonTree tree;

        public Object getTree() {
            return tree;
        }
    };

    // $ANTLR start "p_GroupByClause"
    // XQueryParser.g:514:1: p_GroupByClause : k= GROUP k= BY p_GroupingSpecList ;
    public final XQueryParser.p_GroupByClause_return p_GroupByClause() throws RecognitionException {
        XQueryParser.p_GroupByClause_return retval = new XQueryParser.p_GroupByClause_return();
        retval.start = input.LT(1);

        XQDTCommonTree root_0 = null;

        CommonToken k = null;
        XQueryParser.p_GroupingSpecList_return p_GroupingSpecList163 = null;

        XQDTCommonTree k_tree = null;

        try {
            // XQueryParser.g:515:9: (k= GROUP k= BY p_GroupingSpecList )
            // XQueryParser.g:515:11: k= GROUP k= BY p_GroupingSpecList
            {
                root_0 = (XQDTCommonTree)adaptor.nil();

                k = (CommonToken)match(input, GROUP, FOLLOW_GROUP_in_p_GroupByClause4528);
                if (state.failed) {
                    return retval;
                }
                if (state.backtracking == 0) {
                    k_tree = (XQDTCommonTree)adaptor.create(k);
                    adaptor.addChild(root_0, k_tree);
                }
                if (state.backtracking == 0) {
                    ak(k);
                }
                k = (CommonToken)match(input, BY, FOLLOW_BY_in_p_GroupByClause4534);
                if (state.failed) {
                    return retval;
                }
                if (state.backtracking == 0) {
                    k_tree = (XQDTCommonTree)adaptor.create(k);
                    adaptor.addChild(root_0, k_tree);
                }
                if (state.backtracking == 0) {
                    ak(k);
                }
                pushFollow(FOLLOW_p_GroupingSpecList_in_p_GroupByClause4538);
                p_GroupingSpecList163 = p_GroupingSpecList();

                state._fsp--;
                if (state.failed) {
                    return retval;
                }
                if (state.backtracking == 0) {
                    adaptor.addChild(root_0, p_GroupingSpecList163.getTree());
                }

            }

            retval.stop = input.LT(-1);

            if (state.backtracking == 0) {

                retval.tree = (XQDTCommonTree)adaptor.rulePostProcessing(root_0);
                adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        } catch (RecognitionException re) {
            reportError(re);
            recover(input, re);
            retval.tree = (XQDTCommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        } finally {
        }
        return retval;
    }

    // $ANTLR end "p_GroupByClause"

    public static class p_GroupingSpecList_return extends ParserRuleReturnScope {
        XQDTCommonTree tree;

        public Object getTree() {
            return tree;
        }
    };

    // $ANTLR start "p_GroupingSpecList"
    // XQueryParser.g:519:1: p_GroupingSpecList : p_GroupingSpec ( COMMA p_GroupingSpec )* ;
    public final XQueryParser.p_GroupingSpecList_return p_GroupingSpecList() throws RecognitionException {
        XQueryParser.p_GroupingSpecList_return retval = new XQueryParser.p_GroupingSpecList_return();
        retval.start = input.LT(1);

        XQDTCommonTree root_0 = null;

        CommonToken COMMA165 = null;
        XQueryParser.p_GroupingSpec_return p_GroupingSpec164 = null;

        XQueryParser.p_GroupingSpec_return p_GroupingSpec166 = null;

        XQDTCommonTree COMMA165_tree = null;

        try {
            // XQueryParser.g:520:9: ( p_GroupingSpec ( COMMA p_GroupingSpec )* )
            // XQueryParser.g:520:11: p_GroupingSpec ( COMMA p_GroupingSpec )*
            {
                root_0 = (XQDTCommonTree)adaptor.nil();

                pushFollow(FOLLOW_p_GroupingSpec_in_p_GroupingSpecList4564);
                p_GroupingSpec164 = p_GroupingSpec();

                state._fsp--;
                if (state.failed) {
                    return retval;
                }
                if (state.backtracking == 0) {
                    adaptor.addChild(root_0, p_GroupingSpec164.getTree());
                }
                // XQueryParser.g:520:26: ( COMMA p_GroupingSpec )*
                loop68: do {
                    int alt68 = 2;
                    int LA68_0 = input.LA(1);

                    if ((LA68_0 == COMMA)) {
                        alt68 = 1;
                    }

                    switch (alt68) {
                    case 1:
                        // XQueryParser.g:520:27: COMMA p_GroupingSpec
                    {
                        COMMA165 = (CommonToken)match(input, COMMA, FOLLOW_COMMA_in_p_GroupingSpecList4567);
                        if (state.failed) {
                            return retval;
                        }
                        if (state.backtracking == 0) {
                            COMMA165_tree = (XQDTCommonTree)adaptor.create(COMMA165);
                            adaptor.addChild(root_0, COMMA165_tree);
                        }
                        pushFollow(FOLLOW_p_GroupingSpec_in_p_GroupingSpecList4569);
                        p_GroupingSpec166 = p_GroupingSpec();

                        state._fsp--;
                        if (state.failed) {
                            return retval;
                        }
                        if (state.backtracking == 0) {
                            adaptor.addChild(root_0, p_GroupingSpec166.getTree());
                        }

                    }
                    break;

                    default:
                        break loop68;
                    }
                } while (true);

            }

            retval.stop = input.LT(-1);

            if (state.backtracking == 0) {

                retval.tree = (XQDTCommonTree)adaptor.rulePostProcessing(root_0);
                adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        } catch (RecognitionException re) {
            reportError(re);
            recover(input, re);
            retval.tree = (XQDTCommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        } finally {
        }
        return retval;
    }

    // $ANTLR end "p_GroupingSpecList"

    public static class p_GroupingSpec_return extends ParserRuleReturnScope {
        XQDTCommonTree tree;

        public Object getTree() {
            return tree;
        }
    };

    // $ANTLR start "p_GroupingSpec"
    // XQueryParser.g:524:1: p_GroupingSpec : DOLLAR p_VarName (k= COLLATION p_StringLiteral )? ;
    public final XQueryParser.p_GroupingSpec_return p_GroupingSpec() throws RecognitionException {
        XQueryParser.p_GroupingSpec_return retval = new XQueryParser.p_GroupingSpec_return();
        retval.start = input.LT(1);

        XQDTCommonTree root_0 = null;

        CommonToken k = null;
        CommonToken DOLLAR167 = null;
        XQueryParser.p_VarName_return p_VarName168 = null;

        XQueryParser.p_StringLiteral_return p_StringLiteral169 = null;

        XQDTCommonTree k_tree = null;
        XQDTCommonTree DOLLAR167_tree = null;

        try {
            // XQueryParser.g:525:9: ( DOLLAR p_VarName (k= COLLATION p_StringLiteral )? )
            // XQueryParser.g:525:11: DOLLAR p_VarName (k= COLLATION p_StringLiteral )?
            {
                root_0 = (XQDTCommonTree)adaptor.nil();

                DOLLAR167 = (CommonToken)match(input, DOLLAR, FOLLOW_DOLLAR_in_p_GroupingSpec4597);
                if (state.failed) {
                    return retval;
                }
                if (state.backtracking == 0) {
                    DOLLAR167_tree = (XQDTCommonTree)adaptor.create(DOLLAR167);
                    adaptor.addChild(root_0, DOLLAR167_tree);
                }
                pushFollow(FOLLOW_p_VarName_in_p_GroupingSpec4599);
                p_VarName168 = p_VarName();

                state._fsp--;
                if (state.failed) {
                    return retval;
                }
                if (state.backtracking == 0) {
                    adaptor.addChild(root_0, p_VarName168.getTree());
                }
                // XQueryParser.g:525:28: (k= COLLATION p_StringLiteral )?
                int alt69 = 2;
                int LA69_0 = input.LA(1);

                if ((LA69_0 == COLLATION)) {
                    alt69 = 1;
                }
                switch (alt69) {
                case 1:
                    // XQueryParser.g:525:29: k= COLLATION p_StringLiteral
                {
                    k = (CommonToken)match(input, COLLATION, FOLLOW_COLLATION_in_p_GroupingSpec4604);
                    if (state.failed) {
                        return retval;
                    }
                    if (state.backtracking == 0) {
                        k_tree = (XQDTCommonTree)adaptor.create(k);
                        adaptor.addChild(root_0, k_tree);
                    }
                    if (state.backtracking == 0) {
                        ak(k);
                    }
                    pushFollow(FOLLOW_p_StringLiteral_in_p_GroupingSpec4608);
                    p_StringLiteral169 = p_StringLiteral();

                    state._fsp--;
                    if (state.failed) {
                        return retval;
                    }
                    if (state.backtracking == 0) {
                        adaptor.addChild(root_0, p_StringLiteral169.getTree());
                    }

                }
                    break;

                }

            }

            retval.stop = input.LT(-1);

            if (state.backtracking == 0) {

                retval.tree = (XQDTCommonTree)adaptor.rulePostProcessing(root_0);
                adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        } catch (RecognitionException re) {
            reportError(re);
            recover(input, re);
            retval.tree = (XQDTCommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        } finally {
        }
        return retval;
    }

    // $ANTLR end "p_GroupingSpec"

    public static class p_OrderByClause_return extends ParserRuleReturnScope {
        XQDTCommonTree tree;

        public Object getTree() {
            return tree;
        }
    };

    // $ANTLR start "p_OrderByClause"
    // XQueryParser.g:529:1: p_OrderByClause : ( (k+= ORDER k+= BY ) | (k+= STABLE k+= ORDER k+= BY ) ) p_OrderSpecList ;
    public final XQueryParser.p_OrderByClause_return p_OrderByClause() throws RecognitionException {
        XQueryParser.p_OrderByClause_return retval = new XQueryParser.p_OrderByClause_return();
        retval.start = input.LT(1);

        XQDTCommonTree root_0 = null;

        CommonToken k = null;
        List<CommonToken> list_k = null;
        XQueryParser.p_OrderSpecList_return p_OrderSpecList170 = null;

        XQDTCommonTree k_tree = null;

        try {
            // XQueryParser.g:530:9: ( ( (k+= ORDER k+= BY ) | (k+= STABLE k+= ORDER k+= BY ) ) p_OrderSpecList )
            // XQueryParser.g:530:11: ( (k+= ORDER k+= BY ) | (k+= STABLE k+= ORDER k+= BY ) ) p_OrderSpecList
            {
                root_0 = (XQDTCommonTree)adaptor.nil();

                // XQueryParser.g:530:11: ( (k+= ORDER k+= BY ) | (k+= STABLE k+= ORDER k+= BY ) )
                int alt70 = 2;
                int LA70_0 = input.LA(1);

                if ((LA70_0 == ORDER)) {
                    alt70 = 1;
                } else if ((LA70_0 == STABLE)) {
                    alt70 = 2;
                } else {
                    if (state.backtracking > 0) {
                        state.failed = true;
                        return retval;
                    }
                    NoViableAltException nvae = new NoViableAltException("", 70, 0, input);

                    throw nvae;
                }
                switch (alt70) {
                case 1:
                    // XQueryParser.g:530:12: (k+= ORDER k+= BY )
                {
                    // XQueryParser.g:530:12: (k+= ORDER k+= BY )
                    // XQueryParser.g:530:13: k+= ORDER k+= BY
                    {
                        k = (CommonToken)match(input, ORDER, FOLLOW_ORDER_in_p_OrderByClause4640);
                        if (state.failed) {
                            return retval;
                        }
                        if (state.backtracking == 0) {
                            k_tree = (XQDTCommonTree)adaptor.create(k);
                            adaptor.addChild(root_0, k_tree);
                        }
                        if (list_k == null) {
                            list_k = new ArrayList<CommonToken>();
                        }
                        list_k.add(k);

                        k = (CommonToken)match(input, BY, FOLLOW_BY_in_p_OrderByClause4644);
                        if (state.failed) {
                            return retval;
                        }
                        if (state.backtracking == 0) {
                            k_tree = (XQDTCommonTree)adaptor.create(k);
                            adaptor.addChild(root_0, k_tree);
                        }

                        list_k.add(k);

                    }

                }
                    break;
                case 2:
                    // XQueryParser.g:530:31: (k+= STABLE k+= ORDER k+= BY )
                {
                    // XQueryParser.g:530:31: (k+= STABLE k+= ORDER k+= BY )
                    // XQueryParser.g:530:32: k+= STABLE k+= ORDER k+= BY
                    {
                        k = (CommonToken)match(input, STABLE, FOLLOW_STABLE_in_p_OrderByClause4652);
                        if (state.failed) {
                            return retval;
                        }
                        if (state.backtracking == 0) {
                            k_tree = (XQDTCommonTree)adaptor.create(k);
                            adaptor.addChild(root_0, k_tree);
                        }
                        if (list_k == null) {
                            list_k = new ArrayList<CommonToken>();
                        }
                        list_k.add(k);

                        k = (CommonToken)match(input, ORDER, FOLLOW_ORDER_in_p_OrderByClause4656);
                        if (state.failed) {
                            return retval;
                        }
                        if (state.backtracking == 0) {
                            k_tree = (XQDTCommonTree)adaptor.create(k);
                            adaptor.addChild(root_0, k_tree);
                        }

                        list_k.add(k);

                        k = (CommonToken)match(input, BY, FOLLOW_BY_in_p_OrderByClause4660);
                        if (state.failed) {
                            return retval;
                        }
                        if (state.backtracking == 0) {
                            k_tree = (XQDTCommonTree)adaptor.create(k);
                            adaptor.addChild(root_0, k_tree);
                        }

                        list_k.add(k);

                    }

                }
                    break;

                }

                if (state.backtracking == 0) {
                    ak(list_k);
                }
                pushFollow(FOLLOW_p_OrderSpecList_in_p_OrderByClause4666);
                p_OrderSpecList170 = p_OrderSpecList();

                state._fsp--;
                if (state.failed) {
                    return retval;
                }
                if (state.backtracking == 0) {
                    adaptor.addChild(root_0, p_OrderSpecList170.getTree());
                }

            }

            retval.stop = input.LT(-1);

            if (state.backtracking == 0) {

                retval.tree = (XQDTCommonTree)adaptor.rulePostProcessing(root_0);
                adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        } catch (RecognitionException re) {
            reportError(re);
            recover(input, re);
            retval.tree = (XQDTCommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        } finally {
        }
        return retval;
    }

    // $ANTLR end "p_OrderByClause"

    public static class p_OrderSpecList_return extends ParserRuleReturnScope {
        XQDTCommonTree tree;

        public Object getTree() {
            return tree;
        }
    };

    // $ANTLR start "p_OrderSpecList"
    // XQueryParser.g:534:1: p_OrderSpecList : p_OrderSpec ( COMMA p_OrderSpec )* ;
    public final XQueryParser.p_OrderSpecList_return p_OrderSpecList() throws RecognitionException {
        XQueryParser.p_OrderSpecList_return retval = new XQueryParser.p_OrderSpecList_return();
        retval.start = input.LT(1);

        XQDTCommonTree root_0 = null;

        CommonToken COMMA172 = null;
        XQueryParser.p_OrderSpec_return p_OrderSpec171 = null;

        XQueryParser.p_OrderSpec_return p_OrderSpec173 = null;

        XQDTCommonTree COMMA172_tree = null;

        try {
            // XQueryParser.g:535:9: ( p_OrderSpec ( COMMA p_OrderSpec )* )
            // XQueryParser.g:535:11: p_OrderSpec ( COMMA p_OrderSpec )*
            {
                root_0 = (XQDTCommonTree)adaptor.nil();

                pushFollow(FOLLOW_p_OrderSpec_in_p_OrderSpecList4692);
                p_OrderSpec171 = p_OrderSpec();

                state._fsp--;
                if (state.failed) {
                    return retval;
                }
                if (state.backtracking == 0) {
                    adaptor.addChild(root_0, p_OrderSpec171.getTree());
                }
                // XQueryParser.g:535:23: ( COMMA p_OrderSpec )*
                loop71: do {
                    int alt71 = 2;
                    int LA71_0 = input.LA(1);

                    if ((LA71_0 == COMMA)) {
                        alt71 = 1;
                    }

                    switch (alt71) {
                    case 1:
                        // XQueryParser.g:535:24: COMMA p_OrderSpec
                    {
                        COMMA172 = (CommonToken)match(input, COMMA, FOLLOW_COMMA_in_p_OrderSpecList4695);
                        if (state.failed) {
                            return retval;
                        }
                        if (state.backtracking == 0) {
                            COMMA172_tree = (XQDTCommonTree)adaptor.create(COMMA172);
                            adaptor.addChild(root_0, COMMA172_tree);
                        }
                        pushFollow(FOLLOW_p_OrderSpec_in_p_OrderSpecList4697);
                        p_OrderSpec173 = p_OrderSpec();

                        state._fsp--;
                        if (state.failed) {
                            return retval;
                        }
                        if (state.backtracking == 0) {
                            adaptor.addChild(root_0, p_OrderSpec173.getTree());
                        }

                    }
                    break;

                    default:
                        break loop71;
                    }
                } while (true);

            }

            retval.stop = input.LT(-1);

            if (state.backtracking == 0) {

                retval.tree = (XQDTCommonTree)adaptor.rulePostProcessing(root_0);
                adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        } catch (RecognitionException re) {
            reportError(re);
            recover(input, re);
            retval.tree = (XQDTCommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        } finally {
        }
        return retval;
    }

    // $ANTLR end "p_OrderSpecList"

    public static class p_OrderSpec_return extends ParserRuleReturnScope {
        XQDTCommonTree tree;

        public Object getTree() {
            return tree;
        }
    };

    // $ANTLR start "p_OrderSpec"
    // XQueryParser.g:539:1: p_OrderSpec : p_ExprSingle[true] p_OrderModifier ;
    public final XQueryParser.p_OrderSpec_return p_OrderSpec() throws RecognitionException {
        XQueryParser.p_OrderSpec_return retval = new XQueryParser.p_OrderSpec_return();
        retval.start = input.LT(1);

        XQDTCommonTree root_0 = null;

        XQueryParser.p_ExprSingle_return p_ExprSingle174 = null;

        XQueryParser.p_OrderModifier_return p_OrderModifier175 = null;

        try {
            // XQueryParser.g:540:9: ( p_ExprSingle[true] p_OrderModifier )
            // XQueryParser.g:540:11: p_ExprSingle[true] p_OrderModifier
            {
                root_0 = (XQDTCommonTree)adaptor.nil();

                pushFollow(FOLLOW_p_ExprSingle_in_p_OrderSpec4725);
                p_ExprSingle174 = p_ExprSingle(true);

                state._fsp--;
                if (state.failed) {
                    return retval;
                }
                if (state.backtracking == 0) {
                    adaptor.addChild(root_0, p_ExprSingle174.getTree());
                }
                pushFollow(FOLLOW_p_OrderModifier_in_p_OrderSpec4728);
                p_OrderModifier175 = p_OrderModifier();

                state._fsp--;
                if (state.failed) {
                    return retval;
                }
                if (state.backtracking == 0) {
                    adaptor.addChild(root_0, p_OrderModifier175.getTree());
                }

            }

            retval.stop = input.LT(-1);

            if (state.backtracking == 0) {

                retval.tree = (XQDTCommonTree)adaptor.rulePostProcessing(root_0);
                adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        } catch (RecognitionException re) {
            reportError(re);
            recover(input, re);
            retval.tree = (XQDTCommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        } finally {
        }
        return retval;
    }

    // $ANTLR end "p_OrderSpec"

    public static class p_OrderModifier_return extends ParserRuleReturnScope {
        XQDTCommonTree tree;

        public Object getTree() {
            return tree;
        }
    };

    // $ANTLR start "p_OrderModifier"
    // XQueryParser.g:544:1: p_OrderModifier : (k+= ASCENDING | k+= DESCENDING )? (k+= EMPTY (k+= GREATEST | k+= LEAST ) )? (k+= COLLATION p_StringLiteral )? ;
    public final XQueryParser.p_OrderModifier_return p_OrderModifier() throws RecognitionException {
        XQueryParser.p_OrderModifier_return retval = new XQueryParser.p_OrderModifier_return();
        retval.start = input.LT(1);

        XQDTCommonTree root_0 = null;

        CommonToken k = null;
        List<CommonToken> list_k = null;
        XQueryParser.p_StringLiteral_return p_StringLiteral176 = null;

        XQDTCommonTree k_tree = null;

        try {
            // XQueryParser.g:545:9: ( (k+= ASCENDING | k+= DESCENDING )? (k+= EMPTY (k+= GREATEST | k+= LEAST ) )? (k+= COLLATION p_StringLiteral )? )
            // XQueryParser.g:545:11: (k+= ASCENDING | k+= DESCENDING )? (k+= EMPTY (k+= GREATEST | k+= LEAST ) )? (k+= COLLATION p_StringLiteral )?
            {
                root_0 = (XQDTCommonTree)adaptor.nil();

                // XQueryParser.g:545:11: (k+= ASCENDING | k+= DESCENDING )?
                int alt72 = 3;
                int LA72_0 = input.LA(1);

                if ((LA72_0 == ASCENDING)) {
                    alt72 = 1;
                } else if ((LA72_0 == DESCENDING)) {
                    alt72 = 2;
                }
                switch (alt72) {
                case 1:
                    // XQueryParser.g:545:12: k+= ASCENDING
                {
                    k = (CommonToken)match(input, ASCENDING, FOLLOW_ASCENDING_in_p_OrderModifier4757);
                    if (state.failed) {
                        return retval;
                    }
                    if (state.backtracking == 0) {
                        k_tree = (XQDTCommonTree)adaptor.create(k);
                        adaptor.addChild(root_0, k_tree);
                    }
                    if (list_k == null) {
                        list_k = new ArrayList<CommonToken>();
                    }
                    list_k.add(k);

                }
                    break;
                case 2:
                    // XQueryParser.g:545:27: k+= DESCENDING
                {
                    k = (CommonToken)match(input, DESCENDING, FOLLOW_DESCENDING_in_p_OrderModifier4763);
                    if (state.failed) {
                        return retval;
                    }
                    if (state.backtracking == 0) {
                        k_tree = (XQDTCommonTree)adaptor.create(k);
                        adaptor.addChild(root_0, k_tree);
                    }
                    if (list_k == null) {
                        list_k = new ArrayList<CommonToken>();
                    }
                    list_k.add(k);

                }
                    break;

                }

                // XQueryParser.g:545:43: (k+= EMPTY (k+= GREATEST | k+= LEAST ) )?
                int alt74 = 2;
                int LA74_0 = input.LA(1);

                if ((LA74_0 == EMPTY)) {
                    alt74 = 1;
                }
                switch (alt74) {
                case 1:
                    // XQueryParser.g:545:44: k+= EMPTY (k+= GREATEST | k+= LEAST )
                {
                    k = (CommonToken)match(input, EMPTY, FOLLOW_EMPTY_in_p_OrderModifier4770);
                    if (state.failed) {
                        return retval;
                    }
                    if (state.backtracking == 0) {
                        k_tree = (XQDTCommonTree)adaptor.create(k);
                        adaptor.addChild(root_0, k_tree);
                    }
                    if (list_k == null) {
                        list_k = new ArrayList<CommonToken>();
                    }
                    list_k.add(k);

                    // XQueryParser.g:545:53: (k+= GREATEST | k+= LEAST )
                    int alt73 = 2;
                    int LA73_0 = input.LA(1);

                    if ((LA73_0 == GREATEST)) {
                        alt73 = 1;
                    } else if ((LA73_0 == LEAST)) {
                        alt73 = 2;
                    } else {
                        if (state.backtracking > 0) {
                            state.failed = true;
                            return retval;
                        }
                        NoViableAltException nvae = new NoViableAltException("", 73, 0, input);

                        throw nvae;
                    }
                    switch (alt73) {
                    case 1:
                        // XQueryParser.g:545:54: k+= GREATEST
                    {
                        k = (CommonToken)match(input, GREATEST, FOLLOW_GREATEST_in_p_OrderModifier4775);
                        if (state.failed) {
                            return retval;
                        }
                        if (state.backtracking == 0) {
                            k_tree = (XQDTCommonTree)adaptor.create(k);
                            adaptor.addChild(root_0, k_tree);
                        }
                        if (list_k == null) {
                            list_k = new ArrayList<CommonToken>();
                        }
                        list_k.add(k);

                    }
                    break;
                    case 2:
                        // XQueryParser.g:545:68: k+= LEAST
                    {
                        k = (CommonToken)match(input, LEAST, FOLLOW_LEAST_in_p_OrderModifier4781);
                        if (state.failed) {
                            return retval;
                        }
                        if (state.backtracking == 0) {
                            k_tree = (XQDTCommonTree)adaptor.create(k);
                            adaptor.addChild(root_0, k_tree);
                        }
                        if (list_k == null) {
                            list_k = new ArrayList<CommonToken>();
                        }
                        list_k.add(k);

                    }
                    break;

                    }

                }
                    break;

                }

                // XQueryParser.g:545:80: (k+= COLLATION p_StringLiteral )?
                int alt75 = 2;
                int LA75_0 = input.LA(1);

                if ((LA75_0 == COLLATION)) {
                    alt75 = 1;
                }
                switch (alt75) {
                case 1:
                    // XQueryParser.g:545:81: k+= COLLATION p_StringLiteral
                {
                    k = (CommonToken)match(input, COLLATION, FOLLOW_COLLATION_in_p_OrderModifier4789);
                    if (state.failed) {
                        return retval;
                    }
                    if (state.backtracking == 0) {
                        k_tree = (XQDTCommonTree)adaptor.create(k);
                        adaptor.addChild(root_0, k_tree);
                    }
                    if (list_k == null) {
                        list_k = new ArrayList<CommonToken>();
                    }
                    list_k.add(k);

                    pushFollow(FOLLOW_p_StringLiteral_in_p_OrderModifier4791);
                    p_StringLiteral176 = p_StringLiteral();

                    state._fsp--;
                    if (state.failed) {
                        return retval;
                    }
                    if (state.backtracking == 0) {
                        adaptor.addChild(root_0, p_StringLiteral176.getTree());
                    }

                }
                    break;

                }

                if (state.backtracking == 0) {
                    ak(list_k);
                }

            }

            retval.stop = input.LT(-1);

            if (state.backtracking == 0) {

                retval.tree = (XQDTCommonTree)adaptor.rulePostProcessing(root_0);
                adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        } catch (RecognitionException re) {
            reportError(re);
            recover(input, re);
            retval.tree = (XQDTCommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        } finally {
        }
        return retval;
    }

    // $ANTLR end "p_OrderModifier"

    public static class p_ReturnHybrid_return extends ParserRuleReturnScope {
        XQDTCommonTree tree;

        public Object getTree() {
            return tree;
        }
    };

    // $ANTLR start "p_ReturnHybrid"
    // XQueryParser.g:549:1: p_ReturnHybrid[boolean strict] : k= RETURN p_Hybrid[$strict,false] ;
    public final XQueryParser.p_ReturnHybrid_return p_ReturnHybrid(boolean strict) throws RecognitionException {
        XQueryParser.p_ReturnHybrid_return retval = new XQueryParser.p_ReturnHybrid_return();
        retval.start = input.LT(1);

        XQDTCommonTree root_0 = null;

        CommonToken k = null;
        XQueryParser.p_Hybrid_return p_Hybrid177 = null;

        XQDTCommonTree k_tree = null;

        try {
            // XQueryParser.g:550:9: (k= RETURN p_Hybrid[$strict,false] )
            // XQueryParser.g:550:11: k= RETURN p_Hybrid[$strict,false]
            {
                root_0 = (XQDTCommonTree)adaptor.nil();

                k = (CommonToken)match(input, RETURN, FOLLOW_RETURN_in_p_ReturnHybrid4824);
                if (state.failed) {
                    return retval;
                }
                if (state.backtracking == 0) {
                    k_tree = (XQDTCommonTree)adaptor.create(k);
                    adaptor.addChild(root_0, k_tree);
                }
                if (state.backtracking == 0) {
                    ak(k);
                }
                pushFollow(FOLLOW_p_Hybrid_in_p_ReturnHybrid4828);
                p_Hybrid177 = p_Hybrid(strict, false);

                state._fsp--;
                if (state.failed) {
                    return retval;
                }
                if (state.backtracking == 0) {
                    adaptor.addChild(root_0, p_Hybrid177.getTree());
                }

            }

            retval.stop = input.LT(-1);

            if (state.backtracking == 0) {

                retval.tree = (XQDTCommonTree)adaptor.rulePostProcessing(root_0);
                adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        } catch (RecognitionException re) {
            reportError(re);
            recover(input, re);
            retval.tree = (XQDTCommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        } finally {
        }
        return retval;
    }

    // $ANTLR end "p_ReturnHybrid"

    public static class p_QuantifiedExpr_return extends ParserRuleReturnScope {
        XQDTCommonTree tree;

        public Object getTree() {
            return tree;
        }
    };

    // $ANTLR start "p_QuantifiedExpr"
    // XQueryParser.g:554:1: p_QuantifiedExpr : (k= SOME | k= EVERY ) DOLLAR p_VarName ( p_TypeDeclaration )? k= IN p_ExprSingle[true] ( COMMA DOLLAR p_QName ( p_TypeDeclaration )? k= IN p_ExprSingle[true] )* k= SATISFIES p_ExprSingle[true] ;
    public final XQueryParser.p_QuantifiedExpr_return p_QuantifiedExpr() throws RecognitionException {
        XQueryParser.p_QuantifiedExpr_return retval = new XQueryParser.p_QuantifiedExpr_return();
        retval.start = input.LT(1);

        XQDTCommonTree root_0 = null;

        CommonToken k = null;
        CommonToken DOLLAR178 = null;
        CommonToken COMMA182 = null;
        CommonToken DOLLAR183 = null;
        XQueryParser.p_VarName_return p_VarName179 = null;

        XQueryParser.p_TypeDeclaration_return p_TypeDeclaration180 = null;

        XQueryParser.p_ExprSingle_return p_ExprSingle181 = null;

        XQueryParser.p_QName_return p_QName184 = null;

        XQueryParser.p_TypeDeclaration_return p_TypeDeclaration185 = null;

        XQueryParser.p_ExprSingle_return p_ExprSingle186 = null;

        XQueryParser.p_ExprSingle_return p_ExprSingle187 = null;

        XQDTCommonTree k_tree = null;
        XQDTCommonTree DOLLAR178_tree = null;
        XQDTCommonTree COMMA182_tree = null;
        XQDTCommonTree DOLLAR183_tree = null;

        try {
            // XQueryParser.g:555:9: ( (k= SOME | k= EVERY ) DOLLAR p_VarName ( p_TypeDeclaration )? k= IN p_ExprSingle[true] ( COMMA DOLLAR p_QName ( p_TypeDeclaration )? k= IN p_ExprSingle[true] )* k= SATISFIES p_ExprSingle[true] )
            // XQueryParser.g:555:11: (k= SOME | k= EVERY ) DOLLAR p_VarName ( p_TypeDeclaration )? k= IN p_ExprSingle[true] ( COMMA DOLLAR p_QName ( p_TypeDeclaration )? k= IN p_ExprSingle[true] )* k= SATISFIES p_ExprSingle[true]
            {
                root_0 = (XQDTCommonTree)adaptor.nil();

                // XQueryParser.g:555:11: (k= SOME | k= EVERY )
                int alt76 = 2;
                int LA76_0 = input.LA(1);

                if ((LA76_0 == SOME)) {
                    alt76 = 1;
                } else if ((LA76_0 == EVERY)) {
                    alt76 = 2;
                } else {
                    if (state.backtracking > 0) {
                        state.failed = true;
                        return retval;
                    }
                    NoViableAltException nvae = new NoViableAltException("", 76, 0, input);

                    throw nvae;
                }
                switch (alt76) {
                case 1:
                    // XQueryParser.g:555:12: k= SOME
                {
                    k = (CommonToken)match(input, SOME, FOLLOW_SOME_in_p_QuantifiedExpr4858);
                    if (state.failed) {
                        return retval;
                    }
                    if (state.backtracking == 0) {
                        k_tree = (XQDTCommonTree)adaptor.create(k);
                        adaptor.addChild(root_0, k_tree);
                    }

                }
                    break;
                case 2:
                    // XQueryParser.g:555:21: k= EVERY
                {
                    k = (CommonToken)match(input, EVERY, FOLLOW_EVERY_in_p_QuantifiedExpr4864);
                    if (state.failed) {
                        return retval;
                    }
                    if (state.backtracking == 0) {
                        k_tree = (XQDTCommonTree)adaptor.create(k);
                        adaptor.addChild(root_0, k_tree);
                    }

                }
                    break;

                }

                if (state.backtracking == 0) {
                    ak(k);
                }
                DOLLAR178 = (CommonToken)match(input, DOLLAR, FOLLOW_DOLLAR_in_p_QuantifiedExpr4869);
                if (state.failed) {
                    return retval;
                }
                if (state.backtracking == 0) {
                    DOLLAR178_tree = (XQDTCommonTree)adaptor.create(DOLLAR178);
                    adaptor.addChild(root_0, DOLLAR178_tree);
                }
                pushFollow(FOLLOW_p_VarName_in_p_QuantifiedExpr4871);
                p_VarName179 = p_VarName();

                state._fsp--;
                if (state.failed) {
                    return retval;
                }
                if (state.backtracking == 0) {
                    adaptor.addChild(root_0, p_VarName179.getTree());
                }
                // XQueryParser.g:555:57: ( p_TypeDeclaration )?
                int alt77 = 2;
                int LA77_0 = input.LA(1);

                if ((LA77_0 == AS)) {
                    alt77 = 1;
                }
                switch (alt77) {
                case 1:
                    // XQueryParser.g:555:57: p_TypeDeclaration
                {
                    pushFollow(FOLLOW_p_TypeDeclaration_in_p_QuantifiedExpr4873);
                    p_TypeDeclaration180 = p_TypeDeclaration();

                    state._fsp--;
                    if (state.failed) {
                        return retval;
                    }
                    if (state.backtracking == 0) {
                        adaptor.addChild(root_0, p_TypeDeclaration180.getTree());
                    }

                }
                    break;

                }

                k = (CommonToken)match(input, IN, FOLLOW_IN_in_p_QuantifiedExpr4878);
                if (state.failed) {
                    return retval;
                }
                if (state.backtracking == 0) {
                    k_tree = (XQDTCommonTree)adaptor.create(k);
                    adaptor.addChild(root_0, k_tree);
                }
                if (state.backtracking == 0) {
                    ak(k);
                }
                pushFollow(FOLLOW_p_ExprSingle_in_p_QuantifiedExpr4882);
                p_ExprSingle181 = p_ExprSingle(true);

                state._fsp--;
                if (state.failed) {
                    return retval;
                }
                if (state.backtracking == 0) {
                    adaptor.addChild(root_0, p_ExprSingle181.getTree());
                }
                // XQueryParser.g:555:110: ( COMMA DOLLAR p_QName ( p_TypeDeclaration )? k= IN p_ExprSingle[true] )*
                loop79: do {
                    int alt79 = 2;
                    int LA79_0 = input.LA(1);

                    if ((LA79_0 == COMMA)) {
                        alt79 = 1;
                    }

                    switch (alt79) {
                    case 1:
                        // XQueryParser.g:555:111: COMMA DOLLAR p_QName ( p_TypeDeclaration )? k= IN p_ExprSingle[true]
                    {
                        COMMA182 = (CommonToken)match(input, COMMA, FOLLOW_COMMA_in_p_QuantifiedExpr4886);
                        if (state.failed) {
                            return retval;
                        }
                        if (state.backtracking == 0) {
                            COMMA182_tree = (XQDTCommonTree)adaptor.create(COMMA182);
                            adaptor.addChild(root_0, COMMA182_tree);
                        }
                        DOLLAR183 = (CommonToken)match(input, DOLLAR, FOLLOW_DOLLAR_in_p_QuantifiedExpr4888);
                        if (state.failed) {
                            return retval;
                        }
                        if (state.backtracking == 0) {
                            DOLLAR183_tree = (XQDTCommonTree)adaptor.create(DOLLAR183);
                            adaptor.addChild(root_0, DOLLAR183_tree);
                        }
                        pushFollow(FOLLOW_p_QName_in_p_QuantifiedExpr4890);
                        p_QName184 = p_QName();

                        state._fsp--;
                        if (state.failed) {
                            return retval;
                        }
                        if (state.backtracking == 0) {
                            adaptor.addChild(root_0, p_QName184.getTree());
                        }
                        // XQueryParser.g:555:132: ( p_TypeDeclaration )?
                        int alt78 = 2;
                        int LA78_0 = input.LA(1);

                        if ((LA78_0 == AS)) {
                            alt78 = 1;
                        }
                        switch (alt78) {
                        case 1:
                            // XQueryParser.g:555:132: p_TypeDeclaration
                        {
                            pushFollow(FOLLOW_p_TypeDeclaration_in_p_QuantifiedExpr4892);
                            p_TypeDeclaration185 = p_TypeDeclaration();

                            state._fsp--;
                            if (state.failed) {
                                return retval;
                            }
                            if (state.backtracking == 0) {
                                adaptor.addChild(root_0, p_TypeDeclaration185.getTree());
                            }

                        }
                        break;

                        }

                        k = (CommonToken)match(input, IN, FOLLOW_IN_in_p_QuantifiedExpr4897);
                        if (state.failed) {
                            return retval;
                        }
                        if (state.backtracking == 0) {
                            k_tree = (XQDTCommonTree)adaptor.create(k);
                            adaptor.addChild(root_0, k_tree);
                        }
                        if (state.backtracking == 0) {
                            ak(k);
                        }
                        pushFollow(FOLLOW_p_ExprSingle_in_p_QuantifiedExpr4901);
                        p_ExprSingle186 = p_ExprSingle(true);

                        state._fsp--;
                        if (state.failed) {
                            return retval;
                        }
                        if (state.backtracking == 0) {
                            adaptor.addChild(root_0, p_ExprSingle186.getTree());
                        }

                    }
                    break;

                    default:
                        break loop79;
                    }
                } while (true);

                k = (CommonToken)match(input, SATISFIES, FOLLOW_SATISFIES_in_p_QuantifiedExpr4908);
                if (state.failed) {
                    return retval;
                }
                if (state.backtracking == 0) {
                    k_tree = (XQDTCommonTree)adaptor.create(k);
                    adaptor.addChild(root_0, k_tree);
                }
                if (state.backtracking == 0) {
                    ak(k);
                }
                pushFollow(FOLLOW_p_ExprSingle_in_p_QuantifiedExpr4912);
                p_ExprSingle187 = p_ExprSingle(true);

                state._fsp--;
                if (state.failed) {
                    return retval;
                }
                if (state.backtracking == 0) {
                    adaptor.addChild(root_0, p_ExprSingle187.getTree());
                }

            }

            retval.stop = input.LT(-1);

            if (state.backtracking == 0) {

                retval.tree = (XQDTCommonTree)adaptor.rulePostProcessing(root_0);
                adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        } catch (RecognitionException re) {
            reportError(re);
            recover(input, re);
            retval.tree = (XQDTCommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        } finally {
        }
        return retval;
    }

    // $ANTLR end "p_QuantifiedExpr"

    public static class p_SwitchHybrid_return extends ParserRuleReturnScope {
        XQDTCommonTree tree;

        public Object getTree() {
            return tree;
        }
    };

    // $ANTLR start "p_SwitchHybrid"
    // XQueryParser.g:559:1: p_SwitchHybrid[boolean strict] : k= SWITCH LPAREN p_Expr[true,true] RPAREN ( p_SwitchCaseHybrid[$strict] )+ k= DEFAULT k= RETURN p_Hybrid[$strict,false] ;
    public final XQueryParser.p_SwitchHybrid_return p_SwitchHybrid(boolean strict) throws RecognitionException {
        XQueryParser.p_SwitchHybrid_return retval = new XQueryParser.p_SwitchHybrid_return();
        retval.start = input.LT(1);

        XQDTCommonTree root_0 = null;

        CommonToken k = null;
        CommonToken LPAREN188 = null;
        CommonToken RPAREN190 = null;
        XQueryParser.p_Expr_return p_Expr189 = null;

        XQueryParser.p_SwitchCaseHybrid_return p_SwitchCaseHybrid191 = null;

        XQueryParser.p_Hybrid_return p_Hybrid192 = null;

        XQDTCommonTree k_tree = null;
        XQDTCommonTree LPAREN188_tree = null;
        XQDTCommonTree RPAREN190_tree = null;

        try {
            // XQueryParser.g:560:9: (k= SWITCH LPAREN p_Expr[true,true] RPAREN ( p_SwitchCaseHybrid[$strict] )+ k= DEFAULT k= RETURN p_Hybrid[$strict,false] )
            // XQueryParser.g:560:11: k= SWITCH LPAREN p_Expr[true,true] RPAREN ( p_SwitchCaseHybrid[$strict] )+ k= DEFAULT k= RETURN p_Hybrid[$strict,false]
            {
                root_0 = (XQDTCommonTree)adaptor.nil();

                k = (CommonToken)match(input, SWITCH, FOLLOW_SWITCH_in_p_SwitchHybrid4942);
                if (state.failed) {
                    return retval;
                }
                if (state.backtracking == 0) {
                    k_tree = (XQDTCommonTree)adaptor.create(k);
                    adaptor.addChild(root_0, k_tree);
                }
                if (state.backtracking == 0) {
                    ak(k);
                }
                LPAREN188 = (CommonToken)match(input, LPAREN, FOLLOW_LPAREN_in_p_SwitchHybrid4946);
                if (state.failed) {
                    return retval;
                }
                if (state.backtracking == 0) {
                    LPAREN188_tree = (XQDTCommonTree)adaptor.create(LPAREN188);
                    adaptor.addChild(root_0, LPAREN188_tree);
                }
                pushFollow(FOLLOW_p_Expr_in_p_SwitchHybrid4948);
                p_Expr189 = p_Expr(true, true);

                state._fsp--;
                if (state.failed) {
                    return retval;
                }
                if (state.backtracking == 0) {
                    adaptor.addChild(root_0, p_Expr189.getTree());
                }
                RPAREN190 = (CommonToken)match(input, RPAREN, FOLLOW_RPAREN_in_p_SwitchHybrid4951);
                if (state.failed) {
                    return retval;
                }
                if (state.backtracking == 0) {
                    RPAREN190_tree = (XQDTCommonTree)adaptor.create(RPAREN190);
                    adaptor.addChild(root_0, RPAREN190_tree);
                }
                // XQueryParser.g:560:62: ( p_SwitchCaseHybrid[$strict] )+
                int cnt80 = 0;
                loop80: do {
                    int alt80 = 2;
                    int LA80_0 = input.LA(1);

                    if ((LA80_0 == CASE)) {
                        alt80 = 1;
                    }

                    switch (alt80) {
                    case 1:
                        // XQueryParser.g:560:62: p_SwitchCaseHybrid[$strict]
                    {
                        pushFollow(FOLLOW_p_SwitchCaseHybrid_in_p_SwitchHybrid4953);
                        p_SwitchCaseHybrid191 = p_SwitchCaseHybrid(strict);

                        state._fsp--;
                        if (state.failed) {
                            return retval;
                        }
                        if (state.backtracking == 0) {
                            adaptor.addChild(root_0, p_SwitchCaseHybrid191.getTree());
                        }

                    }
                    break;

                    default:
                        if (cnt80 >= 1) {
                            break loop80;
                        }
                        if (state.backtracking > 0) {
                            state.failed = true;
                            return retval;
                        }
                        EarlyExitException eee = new EarlyExitException(80, input);
                        throw eee;
                    }
                    cnt80++;
                } while (true);

                k = (CommonToken)match(input, DEFAULT, FOLLOW_DEFAULT_in_p_SwitchHybrid4959);
                if (state.failed) {
                    return retval;
                }
                if (state.backtracking == 0) {
                    k_tree = (XQDTCommonTree)adaptor.create(k);
                    adaptor.addChild(root_0, k_tree);
                }
                if (state.backtracking == 0) {
                    ak(k);
                }
                k = (CommonToken)match(input, RETURN, FOLLOW_RETURN_in_p_SwitchHybrid4965);
                if (state.failed) {
                    return retval;
                }
                if (state.backtracking == 0) {
                    k_tree = (XQDTCommonTree)adaptor.create(k);
                    adaptor.addChild(root_0, k_tree);
                }
                if (state.backtracking == 0) {
                    ak(k);
                }
                pushFollow(FOLLOW_p_Hybrid_in_p_SwitchHybrid4969);
                p_Hybrid192 = p_Hybrid(strict, false);

                state._fsp--;
                if (state.failed) {
                    return retval;
                }
                if (state.backtracking == 0) {
                    adaptor.addChild(root_0, p_Hybrid192.getTree());
                }

            }

            retval.stop = input.LT(-1);

            if (state.backtracking == 0) {

                retval.tree = (XQDTCommonTree)adaptor.rulePostProcessing(root_0);
                adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        } catch (RecognitionException re) {
            reportError(re);
            recover(input, re);
            retval.tree = (XQDTCommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        } finally {
        }
        return retval;
    }

    // $ANTLR end "p_SwitchHybrid"

    public static class p_SwitchCaseHybrid_return extends ParserRuleReturnScope {
        XQDTCommonTree tree;

        public Object getTree() {
            return tree;
        }
    };

    // $ANTLR start "p_SwitchCaseHybrid"
    // XQueryParser.g:564:1: p_SwitchCaseHybrid[boolean strict] : (k= CASE p_SwitchCaseOperand )+ k= RETURN p_Hybrid[$strict,false] ;
    public final XQueryParser.p_SwitchCaseHybrid_return p_SwitchCaseHybrid(boolean strict) throws RecognitionException {
        XQueryParser.p_SwitchCaseHybrid_return retval = new XQueryParser.p_SwitchCaseHybrid_return();
        retval.start = input.LT(1);

        XQDTCommonTree root_0 = null;

        CommonToken k = null;
        XQueryParser.p_SwitchCaseOperand_return p_SwitchCaseOperand193 = null;

        XQueryParser.p_Hybrid_return p_Hybrid194 = null;

        XQDTCommonTree k_tree = null;

        try {
            // XQueryParser.g:565:9: ( (k= CASE p_SwitchCaseOperand )+ k= RETURN p_Hybrid[$strict,false] )
            // XQueryParser.g:565:11: (k= CASE p_SwitchCaseOperand )+ k= RETURN p_Hybrid[$strict,false]
            {
                root_0 = (XQDTCommonTree)adaptor.nil();

                // XQueryParser.g:565:11: (k= CASE p_SwitchCaseOperand )+
                int cnt81 = 0;
                loop81: do {
                    int alt81 = 2;
                    int LA81_0 = input.LA(1);

                    if ((LA81_0 == CASE)) {
                        alt81 = 1;
                    }

                    switch (alt81) {
                    case 1:
                        // XQueryParser.g:565:12: k= CASE p_SwitchCaseOperand
                    {
                        k = (CommonToken)match(input, CASE, FOLLOW_CASE_in_p_SwitchCaseHybrid5000);
                        if (state.failed) {
                            return retval;
                        }
                        if (state.backtracking == 0) {
                            k_tree = (XQDTCommonTree)adaptor.create(k);
                            adaptor.addChild(root_0, k_tree);
                        }
                        if (state.backtracking == 0) {
                            ak(k);
                        }
                        pushFollow(FOLLOW_p_SwitchCaseOperand_in_p_SwitchCaseHybrid5004);
                        p_SwitchCaseOperand193 = p_SwitchCaseOperand();

                        state._fsp--;
                        if (state.failed) {
                            return retval;
                        }
                        if (state.backtracking == 0) {
                            adaptor.addChild(root_0, p_SwitchCaseOperand193.getTree());
                        }

                    }
                    break;

                    default:
                        if (cnt81 >= 1) {
                            break loop81;
                        }
                        if (state.backtracking > 0) {
                            state.failed = true;
                            return retval;
                        }
                        EarlyExitException eee = new EarlyExitException(81, input);
                        throw eee;
                    }
                    cnt81++;
                } while (true);

                k = (CommonToken)match(input, RETURN, FOLLOW_RETURN_in_p_SwitchCaseHybrid5010);
                if (state.failed) {
                    return retval;
                }
                if (state.backtracking == 0) {
                    k_tree = (XQDTCommonTree)adaptor.create(k);
                    adaptor.addChild(root_0, k_tree);
                }
                if (state.backtracking == 0) {
                    ak(k);
                }
                pushFollow(FOLLOW_p_Hybrid_in_p_SwitchCaseHybrid5014);
                p_Hybrid194 = p_Hybrid(strict, false);

                state._fsp--;
                if (state.failed) {
                    return retval;
                }
                if (state.backtracking == 0) {
                    adaptor.addChild(root_0, p_Hybrid194.getTree());
                }

            }

            retval.stop = input.LT(-1);

            if (state.backtracking == 0) {

                retval.tree = (XQDTCommonTree)adaptor.rulePostProcessing(root_0);
                adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        } catch (RecognitionException re) {
            reportError(re);
            recover(input, re);
            retval.tree = (XQDTCommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        } finally {
        }
        return retval;
    }

    // $ANTLR end "p_SwitchCaseHybrid"

    public static class p_SwitchCaseOperand_return extends ParserRuleReturnScope {
        XQDTCommonTree tree;

        public Object getTree() {
            return tree;
        }
    };

    // $ANTLR start "p_SwitchCaseOperand"
    // XQueryParser.g:569:1: p_SwitchCaseOperand : p_ExprSingle[true] ;
    public final XQueryParser.p_SwitchCaseOperand_return p_SwitchCaseOperand() throws RecognitionException {
        XQueryParser.p_SwitchCaseOperand_return retval = new XQueryParser.p_SwitchCaseOperand_return();
        retval.start = input.LT(1);

        XQDTCommonTree root_0 = null;

        XQueryParser.p_ExprSingle_return p_ExprSingle195 = null;

        try {
            // XQueryParser.g:570:9: ( p_ExprSingle[true] )
            // XQueryParser.g:570:11: p_ExprSingle[true]
            {
                root_0 = (XQDTCommonTree)adaptor.nil();

                pushFollow(FOLLOW_p_ExprSingle_in_p_SwitchCaseOperand5041);
                p_ExprSingle195 = p_ExprSingle(true);

                state._fsp--;
                if (state.failed) {
                    return retval;
                }
                if (state.backtracking == 0) {
                    adaptor.addChild(root_0, p_ExprSingle195.getTree());
                }

            }

            retval.stop = input.LT(-1);

            if (state.backtracking == 0) {

                retval.tree = (XQDTCommonTree)adaptor.rulePostProcessing(root_0);
                adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        } catch (RecognitionException re) {
            reportError(re);
            recover(input, re);
            retval.tree = (XQDTCommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        } finally {
        }
        return retval;
    }

    // $ANTLR end "p_SwitchCaseOperand"

    public static class p_TypeswitchHybrid_return extends ParserRuleReturnScope {
        XQDTCommonTree tree;

        public Object getTree() {
            return tree;
        }
    };

    // $ANTLR start "p_TypeswitchHybrid"
    // XQueryParser.g:574:1: p_TypeswitchHybrid[boolean strict] : k= TYPESWITCH LPAREN p_Expr[true,true] RPAREN ( p_CaseHybrid[$strict] )+ k= DEFAULT ( DOLLAR p_VarName )? k= RETURN p_Hybrid[$strict,false] ;
    public final XQueryParser.p_TypeswitchHybrid_return p_TypeswitchHybrid(boolean strict) throws RecognitionException {
        XQueryParser.p_TypeswitchHybrid_return retval = new XQueryParser.p_TypeswitchHybrid_return();
        retval.start = input.LT(1);

        XQDTCommonTree root_0 = null;

        CommonToken k = null;
        CommonToken LPAREN196 = null;
        CommonToken RPAREN198 = null;
        CommonToken DOLLAR200 = null;
        XQueryParser.p_Expr_return p_Expr197 = null;

        XQueryParser.p_CaseHybrid_return p_CaseHybrid199 = null;

        XQueryParser.p_VarName_return p_VarName201 = null;

        XQueryParser.p_Hybrid_return p_Hybrid202 = null;

        XQDTCommonTree k_tree = null;
        XQDTCommonTree LPAREN196_tree = null;
        XQDTCommonTree RPAREN198_tree = null;
        XQDTCommonTree DOLLAR200_tree = null;

        try {
            // XQueryParser.g:575:9: (k= TYPESWITCH LPAREN p_Expr[true,true] RPAREN ( p_CaseHybrid[$strict] )+ k= DEFAULT ( DOLLAR p_VarName )? k= RETURN p_Hybrid[$strict,false] )
            // XQueryParser.g:575:11: k= TYPESWITCH LPAREN p_Expr[true,true] RPAREN ( p_CaseHybrid[$strict] )+ k= DEFAULT ( DOLLAR p_VarName )? k= RETURN p_Hybrid[$strict,false]
            {
                root_0 = (XQDTCommonTree)adaptor.nil();

                k = (CommonToken)match(input, TYPESWITCH, FOLLOW_TYPESWITCH_in_p_TypeswitchHybrid5071);
                if (state.failed) {
                    return retval;
                }
                if (state.backtracking == 0) {
                    k_tree = (XQDTCommonTree)adaptor.create(k);
                    adaptor.addChild(root_0, k_tree);
                }
                if (state.backtracking == 0) {
                    ak(k);
                }
                LPAREN196 = (CommonToken)match(input, LPAREN, FOLLOW_LPAREN_in_p_TypeswitchHybrid5075);
                if (state.failed) {
                    return retval;
                }
                if (state.backtracking == 0) {
                    LPAREN196_tree = (XQDTCommonTree)adaptor.create(LPAREN196);
                    adaptor.addChild(root_0, LPAREN196_tree);
                }
                pushFollow(FOLLOW_p_Expr_in_p_TypeswitchHybrid5077);
                p_Expr197 = p_Expr(true, true);

                state._fsp--;
                if (state.failed) {
                    return retval;
                }
                if (state.backtracking == 0) {
                    adaptor.addChild(root_0, p_Expr197.getTree());
                }
                RPAREN198 = (CommonToken)match(input, RPAREN, FOLLOW_RPAREN_in_p_TypeswitchHybrid5080);
                if (state.failed) {
                    return retval;
                }
                if (state.backtracking == 0) {
                    RPAREN198_tree = (XQDTCommonTree)adaptor.create(RPAREN198);
                    adaptor.addChild(root_0, RPAREN198_tree);
                }
                // XQueryParser.g:575:66: ( p_CaseHybrid[$strict] )+
                int cnt82 = 0;
                loop82: do {
                    int alt82 = 2;
                    int LA82_0 = input.LA(1);

                    if ((LA82_0 == CASE)) {
                        alt82 = 1;
                    }

                    switch (alt82) {
                    case 1:
                        // XQueryParser.g:575:66: p_CaseHybrid[$strict]
                    {
                        pushFollow(FOLLOW_p_CaseHybrid_in_p_TypeswitchHybrid5082);
                        p_CaseHybrid199 = p_CaseHybrid(strict);

                        state._fsp--;
                        if (state.failed) {
                            return retval;
                        }
                        if (state.backtracking == 0) {
                            adaptor.addChild(root_0, p_CaseHybrid199.getTree());
                        }

                    }
                    break;

                    default:
                        if (cnt82 >= 1) {
                            break loop82;
                        }
                        if (state.backtracking > 0) {
                            state.failed = true;
                            return retval;
                        }
                        EarlyExitException eee = new EarlyExitException(82, input);
                        throw eee;
                    }
                    cnt82++;
                } while (true);

                k = (CommonToken)match(input, DEFAULT, FOLLOW_DEFAULT_in_p_TypeswitchHybrid5088);
                if (state.failed) {
                    return retval;
                }
                if (state.backtracking == 0) {
                    k_tree = (XQDTCommonTree)adaptor.create(k);
                    adaptor.addChild(root_0, k_tree);
                }
                if (state.backtracking == 0) {
                    ak(k);
                }
                // XQueryParser.g:575:109: ( DOLLAR p_VarName )?
                int alt83 = 2;
                int LA83_0 = input.LA(1);

                if ((LA83_0 == DOLLAR)) {
                    alt83 = 1;
                }
                switch (alt83) {
                case 1:
                    // XQueryParser.g:575:110: DOLLAR p_VarName
                {
                    DOLLAR200 = (CommonToken)match(input, DOLLAR, FOLLOW_DOLLAR_in_p_TypeswitchHybrid5093);
                    if (state.failed) {
                        return retval;
                    }
                    if (state.backtracking == 0) {
                        DOLLAR200_tree = (XQDTCommonTree)adaptor.create(DOLLAR200);
                        adaptor.addChild(root_0, DOLLAR200_tree);
                    }
                    pushFollow(FOLLOW_p_VarName_in_p_TypeswitchHybrid5095);
                    p_VarName201 = p_VarName();

                    state._fsp--;
                    if (state.failed) {
                        return retval;
                    }
                    if (state.backtracking == 0) {
                        adaptor.addChild(root_0, p_VarName201.getTree());
                    }

                }
                    break;

                }

                k = (CommonToken)match(input, RETURN, FOLLOW_RETURN_in_p_TypeswitchHybrid5101);
                if (state.failed) {
                    return retval;
                }
                if (state.backtracking == 0) {
                    k_tree = (XQDTCommonTree)adaptor.create(k);
                    adaptor.addChild(root_0, k_tree);
                }
                if (state.backtracking == 0) {
                    ak(k);
                }
                pushFollow(FOLLOW_p_Hybrid_in_p_TypeswitchHybrid5105);
                p_Hybrid202 = p_Hybrid(strict, false);

                state._fsp--;
                if (state.failed) {
                    return retval;
                }
                if (state.backtracking == 0) {
                    adaptor.addChild(root_0, p_Hybrid202.getTree());
                }

            }

            retval.stop = input.LT(-1);

            if (state.backtracking == 0) {

                retval.tree = (XQDTCommonTree)adaptor.rulePostProcessing(root_0);
                adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        } catch (RecognitionException re) {
            reportError(re);
            recover(input, re);
            retval.tree = (XQDTCommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        } finally {
        }
        return retval;
    }

    // $ANTLR end "p_TypeswitchHybrid"

    public static class p_CaseHybrid_return extends ParserRuleReturnScope {
        XQDTCommonTree tree;

        public Object getTree() {
            return tree;
        }
    };

    // $ANTLR start "p_CaseHybrid"
    // XQueryParser.g:579:1: p_CaseHybrid[boolean strict] : k= CASE ( DOLLAR p_VarName k= AS )? p_SequenceTypeUnion k= RETURN p_ExprSingle[false] ;
    public final XQueryParser.p_CaseHybrid_return p_CaseHybrid(boolean strict) throws RecognitionException {
        XQueryParser.p_CaseHybrid_return retval = new XQueryParser.p_CaseHybrid_return();
        retval.start = input.LT(1);

        XQDTCommonTree root_0 = null;

        CommonToken k = null;
        CommonToken DOLLAR203 = null;
        XQueryParser.p_VarName_return p_VarName204 = null;

        XQueryParser.p_SequenceTypeUnion_return p_SequenceTypeUnion205 = null;

        XQueryParser.p_ExprSingle_return p_ExprSingle206 = null;

        XQDTCommonTree k_tree = null;
        XQDTCommonTree DOLLAR203_tree = null;

        try {
            // XQueryParser.g:580:9: (k= CASE ( DOLLAR p_VarName k= AS )? p_SequenceTypeUnion k= RETURN p_ExprSingle[false] )
            // XQueryParser.g:580:11: k= CASE ( DOLLAR p_VarName k= AS )? p_SequenceTypeUnion k= RETURN p_ExprSingle[false]
            {
                root_0 = (XQDTCommonTree)adaptor.nil();

                k = (CommonToken)match(input, CASE, FOLLOW_CASE_in_p_CaseHybrid5135);
                if (state.failed) {
                    return retval;
                }
                if (state.backtracking == 0) {
                    k_tree = (XQDTCommonTree)adaptor.create(k);
                    adaptor.addChild(root_0, k_tree);
                }
                if (state.backtracking == 0) {
                    ak(k);
                }
                // XQueryParser.g:580:28: ( DOLLAR p_VarName k= AS )?
                int alt84 = 2;
                int LA84_0 = input.LA(1);

                if ((LA84_0 == DOLLAR)) {
                    alt84 = 1;
                }
                switch (alt84) {
                case 1:
                    // XQueryParser.g:580:29: DOLLAR p_VarName k= AS
                {
                    DOLLAR203 = (CommonToken)match(input, DOLLAR, FOLLOW_DOLLAR_in_p_CaseHybrid5140);
                    if (state.failed) {
                        return retval;
                    }
                    if (state.backtracking == 0) {
                        DOLLAR203_tree = (XQDTCommonTree)adaptor.create(DOLLAR203);
                        adaptor.addChild(root_0, DOLLAR203_tree);
                    }
                    pushFollow(FOLLOW_p_VarName_in_p_CaseHybrid5142);
                    p_VarName204 = p_VarName();

                    state._fsp--;
                    if (state.failed) {
                        return retval;
                    }
                    if (state.backtracking == 0) {
                        adaptor.addChild(root_0, p_VarName204.getTree());
                    }
                    k = (CommonToken)match(input, AS, FOLLOW_AS_in_p_CaseHybrid5146);
                    if (state.failed) {
                        return retval;
                    }
                    if (state.backtracking == 0) {
                        k_tree = (XQDTCommonTree)adaptor.create(k);
                        adaptor.addChild(root_0, k_tree);
                    }
                    if (state.backtracking == 0) {
                        ak(k);
                    }

                }
                    break;

                }

                pushFollow(FOLLOW_p_SequenceTypeUnion_in_p_CaseHybrid5152);
                p_SequenceTypeUnion205 = p_SequenceTypeUnion();

                state._fsp--;
                if (state.failed) {
                    return retval;
                }
                if (state.backtracking == 0) {
                    adaptor.addChild(root_0, p_SequenceTypeUnion205.getTree());
                }
                k = (CommonToken)match(input, RETURN, FOLLOW_RETURN_in_p_CaseHybrid5156);
                if (state.failed) {
                    return retval;
                }
                if (state.backtracking == 0) {
                    k_tree = (XQDTCommonTree)adaptor.create(k);
                    adaptor.addChild(root_0, k_tree);
                }
                if (state.backtracking == 0) {
                    ak(k);
                }
                pushFollow(FOLLOW_p_ExprSingle_in_p_CaseHybrid5160);
                p_ExprSingle206 = p_ExprSingle(false);

                state._fsp--;
                if (state.failed) {
                    return retval;
                }
                if (state.backtracking == 0) {
                    adaptor.addChild(root_0, p_ExprSingle206.getTree());
                }

            }

            retval.stop = input.LT(-1);

            if (state.backtracking == 0) {

                retval.tree = (XQDTCommonTree)adaptor.rulePostProcessing(root_0);
                adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        } catch (RecognitionException re) {
            reportError(re);
            recover(input, re);
            retval.tree = (XQDTCommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        } finally {
        }
        return retval;
    }

    // $ANTLR end "p_CaseHybrid"

    public static class p_SequenceTypeUnion_return extends ParserRuleReturnScope {
        XQDTCommonTree tree;

        public Object getTree() {
            return tree;
        }
    };

    // $ANTLR start "p_SequenceTypeUnion"
    // XQueryParser.g:584:1: p_SequenceTypeUnion : p_SequenceType ( VBAR p_SequenceType )* ;
    public final XQueryParser.p_SequenceTypeUnion_return p_SequenceTypeUnion() throws RecognitionException {
        XQueryParser.p_SequenceTypeUnion_return retval = new XQueryParser.p_SequenceTypeUnion_return();
        retval.start = input.LT(1);

        XQDTCommonTree root_0 = null;

        CommonToken VBAR208 = null;
        XQueryParser.p_SequenceType_return p_SequenceType207 = null;

        XQueryParser.p_SequenceType_return p_SequenceType209 = null;

        XQDTCommonTree VBAR208_tree = null;

        try {
            // XQueryParser.g:585:9: ( p_SequenceType ( VBAR p_SequenceType )* )
            // XQueryParser.g:585:11: p_SequenceType ( VBAR p_SequenceType )*
            {
                root_0 = (XQDTCommonTree)adaptor.nil();

                pushFollow(FOLLOW_p_SequenceType_in_p_SequenceTypeUnion5187);
                p_SequenceType207 = p_SequenceType();

                state._fsp--;
                if (state.failed) {
                    return retval;
                }
                if (state.backtracking == 0) {
                    adaptor.addChild(root_0, p_SequenceType207.getTree());
                }
                // XQueryParser.g:585:26: ( VBAR p_SequenceType )*
                loop85: do {
                    int alt85 = 2;
                    int LA85_0 = input.LA(1);

                    if ((LA85_0 == VBAR)) {
                        alt85 = 1;
                    }

                    switch (alt85) {
                    case 1:
                        // XQueryParser.g:585:27: VBAR p_SequenceType
                    {
                        VBAR208 = (CommonToken)match(input, VBAR, FOLLOW_VBAR_in_p_SequenceTypeUnion5190);
                        if (state.failed) {
                            return retval;
                        }
                        if (state.backtracking == 0) {
                            VBAR208_tree = (XQDTCommonTree)adaptor.create(VBAR208);
                            adaptor.addChild(root_0, VBAR208_tree);
                        }
                        pushFollow(FOLLOW_p_SequenceType_in_p_SequenceTypeUnion5192);
                        p_SequenceType209 = p_SequenceType();

                        state._fsp--;
                        if (state.failed) {
                            return retval;
                        }
                        if (state.backtracking == 0) {
                            adaptor.addChild(root_0, p_SequenceType209.getTree());
                        }

                    }
                    break;

                    default:
                        break loop85;
                    }
                } while (true);

            }

            retval.stop = input.LT(-1);

            if (state.backtracking == 0) {

                retval.tree = (XQDTCommonTree)adaptor.rulePostProcessing(root_0);
                adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        } catch (RecognitionException re) {
            reportError(re);
            recover(input, re);
            retval.tree = (XQDTCommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        } finally {
        }
        return retval;
    }

    // $ANTLR end "p_SequenceTypeUnion"

    public static class p_IfHybrid_return extends ParserRuleReturnScope {
        XQDTCommonTree tree;

        public Object getTree() {
            return tree;
        }
    };

    // $ANTLR start "p_IfHybrid"
    // XQueryParser.g:589:1: p_IfHybrid[boolean strict] : k= IF LPAREN p_Expr[true,true] RPAREN k= THEN p_Hybrid[$strict,false] k= ELSE p_Hybrid[$strict,false] ;
    public final XQueryParser.p_IfHybrid_return p_IfHybrid(boolean strict) throws RecognitionException {
        XQueryParser.p_IfHybrid_return retval = new XQueryParser.p_IfHybrid_return();
        retval.start = input.LT(1);

        XQDTCommonTree root_0 = null;

        CommonToken k = null;
        CommonToken LPAREN210 = null;
        CommonToken RPAREN212 = null;
        XQueryParser.p_Expr_return p_Expr211 = null;

        XQueryParser.p_Hybrid_return p_Hybrid213 = null;

        XQueryParser.p_Hybrid_return p_Hybrid214 = null;

        XQDTCommonTree k_tree = null;
        XQDTCommonTree LPAREN210_tree = null;
        XQDTCommonTree RPAREN212_tree = null;

        try {
            // XQueryParser.g:590:9: (k= IF LPAREN p_Expr[true,true] RPAREN k= THEN p_Hybrid[$strict,false] k= ELSE p_Hybrid[$strict,false] )
            // XQueryParser.g:590:11: k= IF LPAREN p_Expr[true,true] RPAREN k= THEN p_Hybrid[$strict,false] k= ELSE p_Hybrid[$strict,false]
            {
                root_0 = (XQDTCommonTree)adaptor.nil();

                k = (CommonToken)match(input, IF, FOLLOW_IF_in_p_IfHybrid5223);
                if (state.failed) {
                    return retval;
                }
                if (state.backtracking == 0) {
                    k_tree = (XQDTCommonTree)adaptor.create(k);
                    adaptor.addChild(root_0, k_tree);
                }
                if (state.backtracking == 0) {
                    ak(k);
                }
                LPAREN210 = (CommonToken)match(input, LPAREN, FOLLOW_LPAREN_in_p_IfHybrid5227);
                if (state.failed) {
                    return retval;
                }
                if (state.backtracking == 0) {
                    LPAREN210_tree = (XQDTCommonTree)adaptor.create(LPAREN210);
                    adaptor.addChild(root_0, LPAREN210_tree);
                }
                pushFollow(FOLLOW_p_Expr_in_p_IfHybrid5229);
                p_Expr211 = p_Expr(true, true);

                state._fsp--;
                if (state.failed) {
                    return retval;
                }
                if (state.backtracking == 0) {
                    adaptor.addChild(root_0, p_Expr211.getTree());
                }
                RPAREN212 = (CommonToken)match(input, RPAREN, FOLLOW_RPAREN_in_p_IfHybrid5232);
                if (state.failed) {
                    return retval;
                }
                if (state.backtracking == 0) {
                    RPAREN212_tree = (XQDTCommonTree)adaptor.create(RPAREN212);
                    adaptor.addChild(root_0, RPAREN212_tree);
                }
                k = (CommonToken)match(input, THEN, FOLLOW_THEN_in_p_IfHybrid5236);
                if (state.failed) {
                    return retval;
                }
                if (state.backtracking == 0) {
                    k_tree = (XQDTCommonTree)adaptor.create(k);
                    adaptor.addChild(root_0, k_tree);
                }
                if (state.backtracking == 0) {
                    ak(k);
                }
                pushFollow(FOLLOW_p_Hybrid_in_p_IfHybrid5240);
                p_Hybrid213 = p_Hybrid(strict, false);

                state._fsp--;
                if (state.failed) {
                    return retval;
                }
                if (state.backtracking == 0) {
                    adaptor.addChild(root_0, p_Hybrid213.getTree());
                }
                k = (CommonToken)match(input, ELSE, FOLLOW_ELSE_in_p_IfHybrid5245);
                if (state.failed) {
                    return retval;
                }
                if (state.backtracking == 0) {
                    k_tree = (XQDTCommonTree)adaptor.create(k);
                    adaptor.addChild(root_0, k_tree);
                }
                if (state.backtracking == 0) {
                    ak(k);
                }
                pushFollow(FOLLOW_p_Hybrid_in_p_IfHybrid5249);
                p_Hybrid214 = p_Hybrid(strict, false);

                state._fsp--;
                if (state.failed) {
                    return retval;
                }
                if (state.backtracking == 0) {
                    adaptor.addChild(root_0, p_Hybrid214.getTree());
                }

            }

            retval.stop = input.LT(-1);

            if (state.backtracking == 0) {

                retval.tree = (XQDTCommonTree)adaptor.rulePostProcessing(root_0);
                adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        } catch (RecognitionException re) {
            reportError(re);
            recover(input, re);
            retval.tree = (XQDTCommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        } finally {
        }
        return retval;
    }

    // $ANTLR end "p_IfHybrid"

    public static class p_TryCatchExpr_return extends ParserRuleReturnScope {
        XQDTCommonTree tree;

        public Object getTree() {
            return tree;
        }
    };

    // $ANTLR start "p_TryCatchExpr"
    // XQueryParser.g:594:1: p_TryCatchExpr : p_TryClause ( p_CatchClause )+ ;
    public final XQueryParser.p_TryCatchExpr_return p_TryCatchExpr() throws RecognitionException {
        XQueryParser.p_TryCatchExpr_return retval = new XQueryParser.p_TryCatchExpr_return();
        retval.start = input.LT(1);

        XQDTCommonTree root_0 = null;

        XQueryParser.p_TryClause_return p_TryClause215 = null;

        XQueryParser.p_CatchClause_return p_CatchClause216 = null;

        try {
            // XQueryParser.g:595:9: ( p_TryClause ( p_CatchClause )+ )
            // XQueryParser.g:595:11: p_TryClause ( p_CatchClause )+
            {
                root_0 = (XQDTCommonTree)adaptor.nil();

                pushFollow(FOLLOW_p_TryClause_in_p_TryCatchExpr5276);
                p_TryClause215 = p_TryClause();

                state._fsp--;
                if (state.failed) {
                    return retval;
                }
                if (state.backtracking == 0) {
                    adaptor.addChild(root_0, p_TryClause215.getTree());
                }
                // XQueryParser.g:595:23: ( p_CatchClause )+
                int cnt86 = 0;
                loop86: do {
                    int alt86 = 2;
                    int LA86_0 = input.LA(1);

                    if ((LA86_0 == CATCH)) {
                        alt86 = 1;
                    }

                    switch (alt86) {
                    case 1:
                        // XQueryParser.g:595:23: p_CatchClause
                    {
                        pushFollow(FOLLOW_p_CatchClause_in_p_TryCatchExpr5278);
                        p_CatchClause216 = p_CatchClause();

                        state._fsp--;
                        if (state.failed) {
                            return retval;
                        }
                        if (state.backtracking == 0) {
                            adaptor.addChild(root_0, p_CatchClause216.getTree());
                        }

                    }
                    break;

                    default:
                        if (cnt86 >= 1) {
                            break loop86;
                        }
                        if (state.backtracking > 0) {
                            state.failed = true;
                            return retval;
                        }
                        EarlyExitException eee = new EarlyExitException(86, input);
                        throw eee;
                    }
                    cnt86++;
                } while (true);

            }

            retval.stop = input.LT(-1);

            if (state.backtracking == 0) {

                retval.tree = (XQDTCommonTree)adaptor.rulePostProcessing(root_0);
                adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        } catch (RecognitionException re) {
            reportError(re);
            recover(input, re);
            retval.tree = (XQDTCommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        } finally {
        }
        return retval;
    }

    // $ANTLR end "p_TryCatchExpr"

    public static class p_TryClause_return extends ParserRuleReturnScope {
        XQDTCommonTree tree;

        public Object getTree() {
            return tree;
        }
    };

    // $ANTLR start "p_TryClause"
    // XQueryParser.g:599:1: p_TryClause : k= TRY LBRACKET p_TryTargetExpr RBRACKET ;
    public final XQueryParser.p_TryClause_return p_TryClause() throws RecognitionException {
        XQueryParser.p_TryClause_return retval = new XQueryParser.p_TryClause_return();
        retval.start = input.LT(1);

        XQDTCommonTree root_0 = null;

        CommonToken k = null;
        CommonToken LBRACKET217 = null;
        CommonToken RBRACKET219 = null;
        XQueryParser.p_TryTargetExpr_return p_TryTargetExpr218 = null;

        XQDTCommonTree k_tree = null;
        XQDTCommonTree LBRACKET217_tree = null;
        XQDTCommonTree RBRACKET219_tree = null;

        try {
            // XQueryParser.g:600:9: (k= TRY LBRACKET p_TryTargetExpr RBRACKET )
            // XQueryParser.g:600:11: k= TRY LBRACKET p_TryTargetExpr RBRACKET
            {
                root_0 = (XQDTCommonTree)adaptor.nil();

                k = (CommonToken)match(input, TRY, FOLLOW_TRY_in_p_TryClause5307);
                if (state.failed) {
                    return retval;
                }
                if (state.backtracking == 0) {
                    k_tree = (XQDTCommonTree)adaptor.create(k);
                    adaptor.addChild(root_0, k_tree);
                }
                if (state.backtracking == 0) {
                    ak(k);
                }
                LBRACKET217 = (CommonToken)match(input, LBRACKET, FOLLOW_LBRACKET_in_p_TryClause5311);
                if (state.failed) {
                    return retval;
                }
                if (state.backtracking == 0) {
                    LBRACKET217_tree = (XQDTCommonTree)adaptor.create(LBRACKET217);
                    adaptor.addChild(root_0, LBRACKET217_tree);
                }
                pushFollow(FOLLOW_p_TryTargetExpr_in_p_TryClause5313);
                p_TryTargetExpr218 = p_TryTargetExpr();

                state._fsp--;
                if (state.failed) {
                    return retval;
                }
                if (state.backtracking == 0) {
                    adaptor.addChild(root_0, p_TryTargetExpr218.getTree());
                }
                RBRACKET219 = (CommonToken)match(input, RBRACKET, FOLLOW_RBRACKET_in_p_TryClause5315);
                if (state.failed) {
                    return retval;
                }
                if (state.backtracking == 0) {
                    RBRACKET219_tree = (XQDTCommonTree)adaptor.create(RBRACKET219);
                    adaptor.addChild(root_0, RBRACKET219_tree);
                }

            }

            retval.stop = input.LT(-1);

            if (state.backtracking == 0) {

                retval.tree = (XQDTCommonTree)adaptor.rulePostProcessing(root_0);
                adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        } catch (RecognitionException re) {
            reportError(re);
            recover(input, re);
            retval.tree = (XQDTCommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        } finally {
        }
        return retval;
    }

    // $ANTLR end "p_TryClause"

    public static class p_TryTargetExpr_return extends ParserRuleReturnScope {
        XQDTCommonTree tree;

        public Object getTree() {
            return tree;
        }
    };

    // $ANTLR start "p_TryTargetExpr"
    // XQueryParser.g:604:1: p_TryTargetExpr : p_Expr[false,false] ;
    public final XQueryParser.p_TryTargetExpr_return p_TryTargetExpr() throws RecognitionException {
        XQueryParser.p_TryTargetExpr_return retval = new XQueryParser.p_TryTargetExpr_return();
        retval.start = input.LT(1);

        XQDTCommonTree root_0 = null;

        XQueryParser.p_Expr_return p_Expr220 = null;

        try {
            // XQueryParser.g:605:9: ( p_Expr[false,false] )
            // XQueryParser.g:605:11: p_Expr[false,false]
            {
                root_0 = (XQDTCommonTree)adaptor.nil();

                pushFollow(FOLLOW_p_Expr_in_p_TryTargetExpr5341);
                p_Expr220 = p_Expr(false, false);

                state._fsp--;
                if (state.failed) {
                    return retval;
                }
                if (state.backtracking == 0) {
                    adaptor.addChild(root_0, p_Expr220.getTree());
                }

            }

            retval.stop = input.LT(-1);

            if (state.backtracking == 0) {

                retval.tree = (XQDTCommonTree)adaptor.rulePostProcessing(root_0);
                adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        } catch (RecognitionException re) {
            reportError(re);
            recover(input, re);
            retval.tree = (XQDTCommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        } finally {
        }
        return retval;
    }

    // $ANTLR end "p_TryTargetExpr"

    public static class p_CatchClause_return extends ParserRuleReturnScope {
        XQDTCommonTree tree;

        public Object getTree() {
            return tree;
        }
    };

    // $ANTLR start "p_CatchClause"
    // XQueryParser.g:609:1: p_CatchClause : k= CATCH p_CatchErrorList LBRACKET p_Expr[false,false] RBRACKET ;
    public final XQueryParser.p_CatchClause_return p_CatchClause() throws RecognitionException {
        XQueryParser.p_CatchClause_return retval = new XQueryParser.p_CatchClause_return();
        retval.start = input.LT(1);

        XQDTCommonTree root_0 = null;

        CommonToken k = null;
        CommonToken LBRACKET222 = null;
        CommonToken RBRACKET224 = null;
        XQueryParser.p_CatchErrorList_return p_CatchErrorList221 = null;

        XQueryParser.p_Expr_return p_Expr223 = null;

        XQDTCommonTree k_tree = null;
        XQDTCommonTree LBRACKET222_tree = null;
        XQDTCommonTree RBRACKET224_tree = null;

        try {
            // XQueryParser.g:610:9: (k= CATCH p_CatchErrorList LBRACKET p_Expr[false,false] RBRACKET )
            // XQueryParser.g:610:11: k= CATCH p_CatchErrorList LBRACKET p_Expr[false,false] RBRACKET
            {
                root_0 = (XQDTCommonTree)adaptor.nil();

                k = (CommonToken)match(input, CATCH, FOLLOW_CATCH_in_p_CatchClause5370);
                if (state.failed) {
                    return retval;
                }
                if (state.backtracking == 0) {
                    k_tree = (XQDTCommonTree)adaptor.create(k);
                    adaptor.addChild(root_0, k_tree);
                }
                if (state.backtracking == 0) {
                    ak(k);
                }
                pushFollow(FOLLOW_p_CatchErrorList_in_p_CatchClause5374);
                p_CatchErrorList221 = p_CatchErrorList();

                state._fsp--;
                if (state.failed) {
                    return retval;
                }
                if (state.backtracking == 0) {
                    adaptor.addChild(root_0, p_CatchErrorList221.getTree());
                }
                LBRACKET222 = (CommonToken)match(input, LBRACKET, FOLLOW_LBRACKET_in_p_CatchClause5376);
                if (state.failed) {
                    return retval;
                }
                if (state.backtracking == 0) {
                    LBRACKET222_tree = (XQDTCommonTree)adaptor.create(LBRACKET222);
                    adaptor.addChild(root_0, LBRACKET222_tree);
                }
                pushFollow(FOLLOW_p_Expr_in_p_CatchClause5378);
                p_Expr223 = p_Expr(false, false);

                state._fsp--;
                if (state.failed) {
                    return retval;
                }
                if (state.backtracking == 0) {
                    adaptor.addChild(root_0, p_Expr223.getTree());
                }
                RBRACKET224 = (CommonToken)match(input, RBRACKET, FOLLOW_RBRACKET_in_p_CatchClause5381);
                if (state.failed) {
                    return retval;
                }
                if (state.backtracking == 0) {
                    RBRACKET224_tree = (XQDTCommonTree)adaptor.create(RBRACKET224);
                    adaptor.addChild(root_0, RBRACKET224_tree);
                }

            }

            retval.stop = input.LT(-1);

            if (state.backtracking == 0) {

                retval.tree = (XQDTCommonTree)adaptor.rulePostProcessing(root_0);
                adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        } catch (RecognitionException re) {
            reportError(re);
            recover(input, re);
            retval.tree = (XQDTCommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        } finally {
        }
        return retval;
    }

    // $ANTLR end "p_CatchClause"

    public static class p_CatchErrorList_return extends ParserRuleReturnScope {
        XQDTCommonTree tree;

        public Object getTree() {
            return tree;
        }
    };

    // $ANTLR start "p_CatchErrorList"
    // XQueryParser.g:614:1: p_CatchErrorList : ( p_NameTest ( VBAR p_NameTest )* | {...}? => () );
    public final XQueryParser.p_CatchErrorList_return p_CatchErrorList() throws RecognitionException {
        XQueryParser.p_CatchErrorList_return retval = new XQueryParser.p_CatchErrorList_return();
        retval.start = input.LT(1);

        XQDTCommonTree root_0 = null;

        CommonToken VBAR226 = null;
        XQueryParser.p_NameTest_return p_NameTest225 = null;

        XQueryParser.p_NameTest_return p_NameTest227 = null;

        XQDTCommonTree VBAR226_tree = null;

        try {
            // XQueryParser.g:615:9: ( p_NameTest ( VBAR p_NameTest )* | {...}? => () )
            int alt88 = 2;
            int LA88_0 = input.LA(1);

            if (((LA88_0 >= ANCESTOR && LA88_0 <= SKIP) || (LA88_0 >= VALUE && LA88_0 <= QUOT_ER) || LA88_0 == STAR
                    || (LA88_0 >= APOS && LA88_0 <= QUOT) || LA88_0 == L_NCName || LA88_0 == EXPLICITLY)) {
                alt88 = 1;
            } else if ((LA88_0 == LBRACKET) && ((lc(MLS)))) {
                alt88 = 2;
            } else {
                if (state.backtracking > 0) {
                    state.failed = true;
                    return retval;
                }
                NoViableAltException nvae = new NoViableAltException("", 88, 0, input);

                throw nvae;
            }
            switch (alt88) {
            case 1:
                // XQueryParser.g:615:11: p_NameTest ( VBAR p_NameTest )*
            {
                root_0 = (XQDTCommonTree)adaptor.nil();

                pushFollow(FOLLOW_p_NameTest_in_p_CatchErrorList5407);
                p_NameTest225 = p_NameTest();

                state._fsp--;
                if (state.failed) {
                    return retval;
                }
                if (state.backtracking == 0) {
                    adaptor.addChild(root_0, p_NameTest225.getTree());
                }
                // XQueryParser.g:615:22: ( VBAR p_NameTest )*
                loop87: do {
                    int alt87 = 2;
                    int LA87_0 = input.LA(1);

                    if ((LA87_0 == VBAR)) {
                        alt87 = 1;
                    }

                    switch (alt87) {
                    case 1:
                        // XQueryParser.g:615:23: VBAR p_NameTest
                    {
                        VBAR226 = (CommonToken)match(input, VBAR, FOLLOW_VBAR_in_p_CatchErrorList5410);
                        if (state.failed) {
                            return retval;
                        }
                        if (state.backtracking == 0) {
                            VBAR226_tree = (XQDTCommonTree)adaptor.create(VBAR226);
                            adaptor.addChild(root_0, VBAR226_tree);
                        }
                        pushFollow(FOLLOW_p_NameTest_in_p_CatchErrorList5412);
                        p_NameTest227 = p_NameTest();

                        state._fsp--;
                        if (state.failed) {
                            return retval;
                        }
                        if (state.backtracking == 0) {
                            adaptor.addChild(root_0, p_NameTest227.getTree());
                        }

                    }
                    break;

                    default:
                        break loop87;
                    }
                } while (true);

            }
            break;
            case 2:
                // XQueryParser.g:616:11: {...}? => ()
            {
                root_0 = (XQDTCommonTree)adaptor.nil();

                if (!((lc(MLS)))) {
                    if (state.backtracking > 0) {
                        state.failed = true;
                        return retval;
                    }
                    throw new FailedPredicateException(input, "p_CatchErrorList", "lc(MLS)");
                }
                // XQueryParser.g:616:24: ()
                // XQueryParser.g:616:38:
                {
                }

            }
            break;

            }
            retval.stop = input.LT(-1);

            if (state.backtracking == 0) {

                retval.tree = (XQDTCommonTree)adaptor.rulePostProcessing(root_0);
                adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        } catch (RecognitionException re) {
            reportError(re);
            recover(input, re);
            retval.tree = (XQDTCommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        } finally {
        }
        return retval;
    }

    // $ANTLR end "p_CatchErrorList"

    public static class p_OrExpr_return extends ParserRuleReturnScope {
        XQDTCommonTree tree;

        public Object getTree() {
            return tree;
        }
    };

    // $ANTLR start "p_OrExpr"
    // XQueryParser.g:620:1: p_OrExpr : p_AndExpr (k= OR p_AndExpr )* ;
    public final XQueryParser.p_OrExpr_return p_OrExpr() throws RecognitionException {
        XQueryParser.p_OrExpr_return retval = new XQueryParser.p_OrExpr_return();
        retval.start = input.LT(1);

        XQDTCommonTree root_0 = null;

        CommonToken k = null;
        XQueryParser.p_AndExpr_return p_AndExpr228 = null;

        XQueryParser.p_AndExpr_return p_AndExpr229 = null;

        XQDTCommonTree k_tree = null;

        try {
            // XQueryParser.g:621:9: ( p_AndExpr (k= OR p_AndExpr )* )
            // XQueryParser.g:621:11: p_AndExpr (k= OR p_AndExpr )*
            {
                root_0 = (XQDTCommonTree)adaptor.nil();

                pushFollow(FOLLOW_p_AndExpr_in_p_OrExpr5457);
                p_AndExpr228 = p_AndExpr();

                state._fsp--;
                if (state.failed) {
                    return retval;
                }
                if (state.backtracking == 0) {
                    adaptor.addChild(root_0, p_AndExpr228.getTree());
                }
                // XQueryParser.g:621:21: (k= OR p_AndExpr )*
                loop89: do {
                    int alt89 = 2;
                    int LA89_0 = input.LA(1);

                    if ((LA89_0 == OR)) {
                        alt89 = 1;
                    }

                    switch (alt89) {
                    case 1:
                        // XQueryParser.g:621:23: k= OR p_AndExpr
                    {
                        k = (CommonToken)match(input, OR, FOLLOW_OR_in_p_OrExpr5463);
                        if (state.failed) {
                            return retval;
                        }
                        if (state.backtracking == 0) {
                            k_tree = (XQDTCommonTree)adaptor.create(k);
                            adaptor.addChild(root_0, k_tree);
                        }
                        if (state.backtracking == 0) {
                            ak(k);
                        }
                        pushFollow(FOLLOW_p_AndExpr_in_p_OrExpr5467);
                        p_AndExpr229 = p_AndExpr();

                        state._fsp--;
                        if (state.failed) {
                            return retval;
                        }
                        if (state.backtracking == 0) {
                            adaptor.addChild(root_0, p_AndExpr229.getTree());
                        }

                    }
                    break;

                    default:
                        break loop89;
                    }
                } while (true);

            }

            retval.stop = input.LT(-1);

            if (state.backtracking == 0) {

                retval.tree = (XQDTCommonTree)adaptor.rulePostProcessing(root_0);
                adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        } catch (RecognitionException re) {
            reportError(re);
            recover(input, re);
            retval.tree = (XQDTCommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        } finally {
        }
        return retval;
    }

    // $ANTLR end "p_OrExpr"

    public static class p_AndExpr_return extends ParserRuleReturnScope {
        XQDTCommonTree tree;

        public Object getTree() {
            return tree;
        }
    };

    // $ANTLR start "p_AndExpr"
    // XQueryParser.g:625:1: p_AndExpr : p_ComparisonExpr (k= AND p_ComparisonExpr )* ;
    public final XQueryParser.p_AndExpr_return p_AndExpr() throws RecognitionException {
        XQueryParser.p_AndExpr_return retval = new XQueryParser.p_AndExpr_return();
        retval.start = input.LT(1);

        XQDTCommonTree root_0 = null;

        CommonToken k = null;
        XQueryParser.p_ComparisonExpr_return p_ComparisonExpr230 = null;

        XQueryParser.p_ComparisonExpr_return p_ComparisonExpr231 = null;

        XQDTCommonTree k_tree = null;

        try {
            // XQueryParser.g:626:9: ( p_ComparisonExpr (k= AND p_ComparisonExpr )* )
            // XQueryParser.g:626:11: p_ComparisonExpr (k= AND p_ComparisonExpr )*
            {
                root_0 = (XQDTCommonTree)adaptor.nil();

                pushFollow(FOLLOW_p_ComparisonExpr_in_p_AndExpr5496);
                p_ComparisonExpr230 = p_ComparisonExpr();

                state._fsp--;
                if (state.failed) {
                    return retval;
                }
                if (state.backtracking == 0) {
                    adaptor.addChild(root_0, p_ComparisonExpr230.getTree());
                }
                // XQueryParser.g:626:28: (k= AND p_ComparisonExpr )*
                loop90: do {
                    int alt90 = 2;
                    int LA90_0 = input.LA(1);

                    if ((LA90_0 == AND)) {
                        alt90 = 1;
                    }

                    switch (alt90) {
                    case 1:
                        // XQueryParser.g:626:30: k= AND p_ComparisonExpr
                    {
                        k = (CommonToken)match(input, AND, FOLLOW_AND_in_p_AndExpr5502);
                        if (state.failed) {
                            return retval;
                        }
                        if (state.backtracking == 0) {
                            k_tree = (XQDTCommonTree)adaptor.create(k);
                            adaptor.addChild(root_0, k_tree);
                        }
                        if (state.backtracking == 0) {
                            ak(k);
                        }
                        pushFollow(FOLLOW_p_ComparisonExpr_in_p_AndExpr5506);
                        p_ComparisonExpr231 = p_ComparisonExpr();

                        state._fsp--;
                        if (state.failed) {
                            return retval;
                        }
                        if (state.backtracking == 0) {
                            adaptor.addChild(root_0, p_ComparisonExpr231.getTree());
                        }

                    }
                    break;

                    default:
                        break loop90;
                    }
                } while (true);

            }

            retval.stop = input.LT(-1);

            if (state.backtracking == 0) {

                retval.tree = (XQDTCommonTree)adaptor.rulePostProcessing(root_0);
                adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        } catch (RecognitionException re) {
            reportError(re);
            recover(input, re);
            retval.tree = (XQDTCommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        } finally {
        }
        return retval;
    }

    // $ANTLR end "p_AndExpr"

    public static class p_ComparisonExpr_return extends ParserRuleReturnScope {
        XQDTCommonTree tree;

        public Object getTree() {
            return tree;
        }
    };

    // $ANTLR start "p_ComparisonExpr"
    // XQueryParser.g:631:1: p_ComparisonExpr : p_FTContainsExpr ( ( p_ValueComp | p_GeneralComp | p_NodeComp ) p_FTContainsExpr )? ;
    public final XQueryParser.p_ComparisonExpr_return p_ComparisonExpr() throws RecognitionException {
        XQueryParser.p_ComparisonExpr_return retval = new XQueryParser.p_ComparisonExpr_return();
        retval.start = input.LT(1);

        XQDTCommonTree root_0 = null;

        XQueryParser.p_FTContainsExpr_return p_FTContainsExpr232 = null;

        XQueryParser.p_ValueComp_return p_ValueComp233 = null;

        XQueryParser.p_GeneralComp_return p_GeneralComp234 = null;

        XQueryParser.p_NodeComp_return p_NodeComp235 = null;

        XQueryParser.p_FTContainsExpr_return p_FTContainsExpr236 = null;

        try {
            // XQueryParser.g:632:9: ( p_FTContainsExpr ( ( p_ValueComp | p_GeneralComp | p_NodeComp ) p_FTContainsExpr )? )
            // XQueryParser.g:632:11: p_FTContainsExpr ( ( p_ValueComp | p_GeneralComp | p_NodeComp ) p_FTContainsExpr )?
            {
                root_0 = (XQDTCommonTree)adaptor.nil();

                pushFollow(FOLLOW_p_FTContainsExpr_in_p_ComparisonExpr5536);
                p_FTContainsExpr232 = p_FTContainsExpr();

                state._fsp--;
                if (state.failed) {
                    return retval;
                }
                if (state.backtracking == 0) {
                    adaptor.addChild(root_0, p_FTContainsExpr232.getTree());
                }
                // XQueryParser.g:632:28: ( ( p_ValueComp | p_GeneralComp | p_NodeComp ) p_FTContainsExpr )?
                int alt92 = 2;
                int LA92_0 = input.LA(1);

                if ((LA92_0 == EQ || LA92_0 == GE || LA92_0 == GT || LA92_0 == IS || LA92_0 == LE || LA92_0 == LT
                        || LA92_0 == NE || LA92_0 == EQUAL || LA92_0 == NOTEQUAL || (LA92_0 >= SMALLER && LA92_0 <= GREATER_GREATER))) {
                    alt92 = 1;
                }
                switch (alt92) {
                case 1:
                    // XQueryParser.g:632:30: ( p_ValueComp | p_GeneralComp | p_NodeComp ) p_FTContainsExpr
                {
                    // XQueryParser.g:632:30: ( p_ValueComp | p_GeneralComp | p_NodeComp )
                    int alt91 = 3;
                    switch (input.LA(1)) {
                    case EQ:
                    case GE:
                    case GT:
                    case LE:
                    case LT:
                    case NE: {
                        alt91 = 1;
                    }
                        break;
                    case EQUAL:
                    case NOTEQUAL:
                    case SMALLER:
                    case GREATER:
                    case SMALLEREQ:
                    case GREATEREQ: {
                        alt91 = 2;
                    }
                        break;
                    case IS:
                    case SMALLER_SMALLER:
                    case GREATER_GREATER: {
                        alt91 = 3;
                    }
                        break;
                    default:
                        if (state.backtracking > 0) {
                            state.failed = true;
                            return retval;
                        }
                        NoViableAltException nvae = new NoViableAltException("", 91, 0, input);

                        throw nvae;
                    }

                    switch (alt91) {
                    case 1:
                        // XQueryParser.g:632:31: p_ValueComp
                    {
                        pushFollow(FOLLOW_p_ValueComp_in_p_ComparisonExpr5541);
                        p_ValueComp233 = p_ValueComp();

                        state._fsp--;
                        if (state.failed) {
                            return retval;
                        }
                        if (state.backtracking == 0) {
                            adaptor.addChild(root_0, p_ValueComp233.getTree());
                        }

                    }
                    break;
                    case 2:
                        // XQueryParser.g:632:45: p_GeneralComp
                    {
                        pushFollow(FOLLOW_p_GeneralComp_in_p_ComparisonExpr5545);
                        p_GeneralComp234 = p_GeneralComp();

                        state._fsp--;
                        if (state.failed) {
                            return retval;
                        }
                        if (state.backtracking == 0) {
                            adaptor.addChild(root_0, p_GeneralComp234.getTree());
                        }

                    }
                    break;
                    case 3:
                        // XQueryParser.g:632:61: p_NodeComp
                    {
                        pushFollow(FOLLOW_p_NodeComp_in_p_ComparisonExpr5549);
                        p_NodeComp235 = p_NodeComp();

                        state._fsp--;
                        if (state.failed) {
                            return retval;
                        }
                        if (state.backtracking == 0) {
                            adaptor.addChild(root_0, p_NodeComp235.getTree());
                        }

                    }
                    break;

                    }

                    pushFollow(FOLLOW_p_FTContainsExpr_in_p_ComparisonExpr5552);
                    p_FTContainsExpr236 = p_FTContainsExpr();

                    state._fsp--;
                    if (state.failed) {
                        return retval;
                    }
                    if (state.backtracking == 0) {
                        adaptor.addChild(root_0, p_FTContainsExpr236.getTree());
                    }

                }
                    break;

                }

            }

            retval.stop = input.LT(-1);

            if (state.backtracking == 0) {

                retval.tree = (XQDTCommonTree)adaptor.rulePostProcessing(root_0);
                adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        } catch (RecognitionException re) {
            reportError(re);
            recover(input, re);
            retval.tree = (XQDTCommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        } finally {
        }
        return retval;
    }

    // $ANTLR end "p_ComparisonExpr"

    public static class p_StringConcatExpr_return extends ParserRuleReturnScope {
        XQDTCommonTree tree;

        public Object getTree() {
            return tree;
        }
    };

    // $ANTLR start "p_StringConcatExpr"
    // XQueryParser.g:635:1: p_StringConcatExpr : p_RangeExpr ( CONCAT p_RangeExpr )* ;
    public final XQueryParser.p_StringConcatExpr_return p_StringConcatExpr() throws RecognitionException {
        XQueryParser.p_StringConcatExpr_return retval = new XQueryParser.p_StringConcatExpr_return();
        retval.start = input.LT(1);

        XQDTCommonTree root_0 = null;

        CommonToken CONCAT238 = null;
        XQueryParser.p_RangeExpr_return p_RangeExpr237 = null;

        XQueryParser.p_RangeExpr_return p_RangeExpr239 = null;

        XQDTCommonTree CONCAT238_tree = null;

        try {
            // XQueryParser.g:636:9: ( p_RangeExpr ( CONCAT p_RangeExpr )* )
            // XQueryParser.g:636:11: p_RangeExpr ( CONCAT p_RangeExpr )*
            {
                root_0 = (XQDTCommonTree)adaptor.nil();

                pushFollow(FOLLOW_p_RangeExpr_in_p_StringConcatExpr5580);
                p_RangeExpr237 = p_RangeExpr();

                state._fsp--;
                if (state.failed) {
                    return retval;
                }
                if (state.backtracking == 0) {
                    adaptor.addChild(root_0, p_RangeExpr237.getTree());
                }
                // XQueryParser.g:636:23: ( CONCAT p_RangeExpr )*
                loop93: do {
                    int alt93 = 2;
                    int LA93_0 = input.LA(1);

                    if ((LA93_0 == CONCAT)) {
                        alt93 = 1;
                    }

                    switch (alt93) {
                    case 1:
                        // XQueryParser.g:636:25: CONCAT p_RangeExpr
                    {
                        CONCAT238 = (CommonToken)match(input, CONCAT, FOLLOW_CONCAT_in_p_StringConcatExpr5584);
                        if (state.failed) {
                            return retval;
                        }
                        if (state.backtracking == 0) {
                            CONCAT238_tree = (XQDTCommonTree)adaptor.create(CONCAT238);
                            adaptor.addChild(root_0, CONCAT238_tree);
                        }
                        pushFollow(FOLLOW_p_RangeExpr_in_p_StringConcatExpr5586);
                        p_RangeExpr239 = p_RangeExpr();

                        state._fsp--;
                        if (state.failed) {
                            return retval;
                        }
                        if (state.backtracking == 0) {
                            adaptor.addChild(root_0, p_RangeExpr239.getTree());
                        }

                    }
                    break;

                    default:
                        break loop93;
                    }
                } while (true);

            }

            retval.stop = input.LT(-1);

            if (state.backtracking == 0) {

                retval.tree = (XQDTCommonTree)adaptor.rulePostProcessing(root_0);
                adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        } catch (RecognitionException re) {
            reportError(re);
            recover(input, re);
            retval.tree = (XQDTCommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        } finally {
        }
        return retval;
    }

    // $ANTLR end "p_StringConcatExpr"

    public static class p_RangeExpr_return extends ParserRuleReturnScope {
        XQDTCommonTree tree;

        public Object getTree() {
            return tree;
        }
    };

    // $ANTLR start "p_RangeExpr"
    // XQueryParser.g:640:1: p_RangeExpr : p_AdditiveExpr (k= TO p_AdditiveExpr )? ;
    public final XQueryParser.p_RangeExpr_return p_RangeExpr() throws RecognitionException {
        XQueryParser.p_RangeExpr_return retval = new XQueryParser.p_RangeExpr_return();
        retval.start = input.LT(1);

        XQDTCommonTree root_0 = null;

        CommonToken k = null;
        XQueryParser.p_AdditiveExpr_return p_AdditiveExpr240 = null;

        XQueryParser.p_AdditiveExpr_return p_AdditiveExpr241 = null;

        XQDTCommonTree k_tree = null;

        try {
            // XQueryParser.g:641:9: ( p_AdditiveExpr (k= TO p_AdditiveExpr )? )
            // XQueryParser.g:641:11: p_AdditiveExpr (k= TO p_AdditiveExpr )?
            {
                root_0 = (XQDTCommonTree)adaptor.nil();

                pushFollow(FOLLOW_p_AdditiveExpr_in_p_RangeExpr5615);
                p_AdditiveExpr240 = p_AdditiveExpr();

                state._fsp--;
                if (state.failed) {
                    return retval;
                }
                if (state.backtracking == 0) {
                    adaptor.addChild(root_0, p_AdditiveExpr240.getTree());
                }
                // XQueryParser.g:641:26: (k= TO p_AdditiveExpr )?
                int alt94 = 2;
                int LA94_0 = input.LA(1);

                if ((LA94_0 == TO)) {
                    alt94 = 1;
                }
                switch (alt94) {
                case 1:
                    // XQueryParser.g:641:28: k= TO p_AdditiveExpr
                {
                    k = (CommonToken)match(input, TO, FOLLOW_TO_in_p_RangeExpr5621);
                    if (state.failed) {
                        return retval;
                    }
                    if (state.backtracking == 0) {
                        k_tree = (XQDTCommonTree)adaptor.create(k);
                        adaptor.addChild(root_0, k_tree);
                    }
                    if (state.backtracking == 0) {
                        ak(k);
                    }
                    pushFollow(FOLLOW_p_AdditiveExpr_in_p_RangeExpr5625);
                    p_AdditiveExpr241 = p_AdditiveExpr();

                    state._fsp--;
                    if (state.failed) {
                        return retval;
                    }
                    if (state.backtracking == 0) {
                        adaptor.addChild(root_0, p_AdditiveExpr241.getTree());
                    }

                }
                    break;

                }

            }

            retval.stop = input.LT(-1);

            if (state.backtracking == 0) {

                retval.tree = (XQDTCommonTree)adaptor.rulePostProcessing(root_0);
                adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        } catch (RecognitionException re) {
            reportError(re);
            recover(input, re);
            retval.tree = (XQDTCommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        } finally {
        }
        return retval;
    }

    // $ANTLR end "p_RangeExpr"

    public static class p_AdditiveExpr_return extends ParserRuleReturnScope {
        XQDTCommonTree tree;

        public Object getTree() {
            return tree;
        }
    };

    // $ANTLR start "p_AdditiveExpr"
    // XQueryParser.g:645:1: p_AdditiveExpr : p_MultiplicativeExpr ( ( PLUS | MINUS ) p_MultiplicativeExpr )* ;
    public final XQueryParser.p_AdditiveExpr_return p_AdditiveExpr() throws RecognitionException {
        XQueryParser.p_AdditiveExpr_return retval = new XQueryParser.p_AdditiveExpr_return();
        retval.start = input.LT(1);

        XQDTCommonTree root_0 = null;

        CommonToken set243 = null;
        XQueryParser.p_MultiplicativeExpr_return p_MultiplicativeExpr242 = null;

        XQueryParser.p_MultiplicativeExpr_return p_MultiplicativeExpr244 = null;

        XQDTCommonTree set243_tree = null;

        try {
            // XQueryParser.g:646:9: ( p_MultiplicativeExpr ( ( PLUS | MINUS ) p_MultiplicativeExpr )* )
            // XQueryParser.g:646:11: p_MultiplicativeExpr ( ( PLUS | MINUS ) p_MultiplicativeExpr )*
            {
                root_0 = (XQDTCommonTree)adaptor.nil();

                pushFollow(FOLLOW_p_MultiplicativeExpr_in_p_AdditiveExpr5654);
                p_MultiplicativeExpr242 = p_MultiplicativeExpr();

                state._fsp--;
                if (state.failed) {
                    return retval;
                }
                if (state.backtracking == 0) {
                    adaptor.addChild(root_0, p_MultiplicativeExpr242.getTree());
                }
                // XQueryParser.g:646:32: ( ( PLUS | MINUS ) p_MultiplicativeExpr )*
                loop95: do {
                    int alt95 = 2;
                    int LA95_0 = input.LA(1);

                    if (((LA95_0 >= PLUS && LA95_0 <= MINUS))) {
                        alt95 = 1;
                    }

                    switch (alt95) {
                    case 1:
                        // XQueryParser.g:646:34: ( PLUS | MINUS ) p_MultiplicativeExpr
                    {
                        set243 = (CommonToken)input.LT(1);
                        if ((input.LA(1) >= PLUS && input.LA(1) <= MINUS)) {
                            input.consume();
                            if (state.backtracking == 0) {
                                adaptor.addChild(root_0, adaptor.create(set243));
                            }
                            state.errorRecovery = false;
                            state.failed = false;
                        } else {
                            if (state.backtracking > 0) {
                                state.failed = true;
                                return retval;
                            }
                            MismatchedSetException mse = new MismatchedSetException(null, input);
                            throw mse;
                        }

                        pushFollow(FOLLOW_p_MultiplicativeExpr_in_p_AdditiveExpr5666);
                        p_MultiplicativeExpr244 = p_MultiplicativeExpr();

                        state._fsp--;
                        if (state.failed) {
                            return retval;
                        }
                        if (state.backtracking == 0) {
                            adaptor.addChild(root_0, p_MultiplicativeExpr244.getTree());
                        }

                    }
                    break;

                    default:
                        break loop95;
                    }
                } while (true);

            }

            retval.stop = input.LT(-1);

            if (state.backtracking == 0) {

                retval.tree = (XQDTCommonTree)adaptor.rulePostProcessing(root_0);
                adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        } catch (RecognitionException re) {
            reportError(re);
            recover(input, re);
            retval.tree = (XQDTCommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        } finally {
        }
        return retval;
    }

    // $ANTLR end "p_AdditiveExpr"

    public static class p_MultiplicativeExpr_return extends ParserRuleReturnScope {
        XQDTCommonTree tree;

        public Object getTree() {
            return tree;
        }
    };

    // $ANTLR start "p_MultiplicativeExpr"
    // XQueryParser.g:650:1: p_MultiplicativeExpr : p_UnionExpr ( ( STAR | (k= DIV | k= IDIV | k= MOD ) ) p_UnionExpr )* ;
    public final XQueryParser.p_MultiplicativeExpr_return p_MultiplicativeExpr() throws RecognitionException {
        XQueryParser.p_MultiplicativeExpr_return retval = new XQueryParser.p_MultiplicativeExpr_return();
        retval.start = input.LT(1);

        XQDTCommonTree root_0 = null;

        CommonToken k = null;
        CommonToken STAR246 = null;
        XQueryParser.p_UnionExpr_return p_UnionExpr245 = null;

        XQueryParser.p_UnionExpr_return p_UnionExpr247 = null;

        XQDTCommonTree k_tree = null;
        XQDTCommonTree STAR246_tree = null;

        try {
            // XQueryParser.g:651:9: ( p_UnionExpr ( ( STAR | (k= DIV | k= IDIV | k= MOD ) ) p_UnionExpr )* )
            // XQueryParser.g:651:11: p_UnionExpr ( ( STAR | (k= DIV | k= IDIV | k= MOD ) ) p_UnionExpr )*
            {
                root_0 = (XQDTCommonTree)adaptor.nil();

                pushFollow(FOLLOW_p_UnionExpr_in_p_MultiplicativeExpr5695);
                p_UnionExpr245 = p_UnionExpr();

                state._fsp--;
                if (state.failed) {
                    return retval;
                }
                if (state.backtracking == 0) {
                    adaptor.addChild(root_0, p_UnionExpr245.getTree());
                }
                // XQueryParser.g:651:23: ( ( STAR | (k= DIV | k= IDIV | k= MOD ) ) p_UnionExpr )*
                loop98: do {
                    int alt98 = 2;
                    int LA98_0 = input.LA(1);

                    if ((LA98_0 == DIV || LA98_0 == IDIV || LA98_0 == MOD || LA98_0 == STAR)) {
                        alt98 = 1;
                    }

                    switch (alt98) {
                    case 1:
                        // XQueryParser.g:651:25: ( STAR | (k= DIV | k= IDIV | k= MOD ) ) p_UnionExpr
                    {
                        // XQueryParser.g:651:25: ( STAR | (k= DIV | k= IDIV | k= MOD ) )
                        int alt97 = 2;
                        int LA97_0 = input.LA(1);

                        if ((LA97_0 == STAR)) {
                            alt97 = 1;
                        } else if ((LA97_0 == DIV || LA97_0 == IDIV || LA97_0 == MOD)) {
                            alt97 = 2;
                        } else {
                            if (state.backtracking > 0) {
                                state.failed = true;
                                return retval;
                            }
                            NoViableAltException nvae = new NoViableAltException("", 97, 0, input);

                            throw nvae;
                        }
                        switch (alt97) {
                        case 1:
                            // XQueryParser.g:651:26: STAR
                        {
                            STAR246 = (CommonToken)match(input, STAR, FOLLOW_STAR_in_p_MultiplicativeExpr5700);
                            if (state.failed) {
                                return retval;
                            }
                            if (state.backtracking == 0) {
                                STAR246_tree = (XQDTCommonTree)adaptor.create(STAR246);
                                adaptor.addChild(root_0, STAR246_tree);
                            }

                        }
                        break;
                        case 2:
                            // XQueryParser.g:651:33: (k= DIV | k= IDIV | k= MOD )
                        {
                            // XQueryParser.g:651:33: (k= DIV | k= IDIV | k= MOD )
                            int alt96 = 3;
                            switch (input.LA(1)) {
                            case DIV: {
                                alt96 = 1;
                            }
                            break;
                            case IDIV: {
                                alt96 = 2;
                            }
                            break;
                            case MOD: {
                                alt96 = 3;
                            }
                            break;
                            default:
                                if (state.backtracking > 0) {
                                    state.failed = true;
                                    return retval;
                                }
                                NoViableAltException nvae = new NoViableAltException("", 96, 0, input);

                                throw nvae;
                            }

                            switch (alt96) {
                            case 1:
                                // XQueryParser.g:651:34: k= DIV
                            {
                                k = (CommonToken)match(input, DIV, FOLLOW_DIV_in_p_MultiplicativeExpr5707);
                                if (state.failed) {
                                    return retval;
                                }
                                if (state.backtracking == 0) {
                                    k_tree = (XQDTCommonTree)adaptor.create(k);
                                    adaptor.addChild(root_0, k_tree);
                                }

                            }
                            break;
                            case 2:
                                // XQueryParser.g:651:42: k= IDIV
                            {
                                k = (CommonToken)match(input, IDIV, FOLLOW_IDIV_in_p_MultiplicativeExpr5713);
                                if (state.failed) {
                                    return retval;
                                }
                                if (state.backtracking == 0) {
                                    k_tree = (XQDTCommonTree)adaptor.create(k);
                                    adaptor.addChild(root_0, k_tree);
                                }

                            }
                            break;
                            case 3:
                                // XQueryParser.g:651:51: k= MOD
                            {
                                k = (CommonToken)match(input, MOD, FOLLOW_MOD_in_p_MultiplicativeExpr5719);
                                if (state.failed) {
                                    return retval;
                                }
                                if (state.backtracking == 0) {
                                    k_tree = (XQDTCommonTree)adaptor.create(k);
                                    adaptor.addChild(root_0, k_tree);
                                }

                            }
                            break;

                            }

                            if (state.backtracking == 0) {
                                ak(k);
                            }

                        }
                        break;

                        }

                        pushFollow(FOLLOW_p_UnionExpr_in_p_MultiplicativeExpr5725);
                        p_UnionExpr247 = p_UnionExpr();

                        state._fsp--;
                        if (state.failed) {
                            return retval;
                        }
                        if (state.backtracking == 0) {
                            adaptor.addChild(root_0, p_UnionExpr247.getTree());
                        }

                    }
                    break;

                    default:
                        break loop98;
                    }
                } while (true);

            }

            retval.stop = input.LT(-1);

            if (state.backtracking == 0) {

                retval.tree = (XQDTCommonTree)adaptor.rulePostProcessing(root_0);
                adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        } catch (RecognitionException re) {
            reportError(re);
            recover(input, re);
            retval.tree = (XQDTCommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        } finally {
        }
        return retval;
    }

    // $ANTLR end "p_MultiplicativeExpr"

    public static class p_UnionExpr_return extends ParserRuleReturnScope {
        XQDTCommonTree tree;

        public Object getTree() {
            return tree;
        }
    };

    // $ANTLR start "p_UnionExpr"
    // XQueryParser.g:655:1: p_UnionExpr : p_IntersectExceptExpr ( (k= UNION | VBAR ) p_IntersectExceptExpr )* ;
    public final XQueryParser.p_UnionExpr_return p_UnionExpr() throws RecognitionException {
        XQueryParser.p_UnionExpr_return retval = new XQueryParser.p_UnionExpr_return();
        retval.start = input.LT(1);

        XQDTCommonTree root_0 = null;

        CommonToken k = null;
        CommonToken VBAR249 = null;
        XQueryParser.p_IntersectExceptExpr_return p_IntersectExceptExpr248 = null;

        XQueryParser.p_IntersectExceptExpr_return p_IntersectExceptExpr250 = null;

        XQDTCommonTree k_tree = null;
        XQDTCommonTree VBAR249_tree = null;

        try {
            // XQueryParser.g:656:9: ( p_IntersectExceptExpr ( (k= UNION | VBAR ) p_IntersectExceptExpr )* )
            // XQueryParser.g:656:11: p_IntersectExceptExpr ( (k= UNION | VBAR ) p_IntersectExceptExpr )*
            {
                root_0 = (XQDTCommonTree)adaptor.nil();

                pushFollow(FOLLOW_p_IntersectExceptExpr_in_p_UnionExpr5754);
                p_IntersectExceptExpr248 = p_IntersectExceptExpr();

                state._fsp--;
                if (state.failed) {
                    return retval;
                }
                if (state.backtracking == 0) {
                    adaptor.addChild(root_0, p_IntersectExceptExpr248.getTree());
                }
                // XQueryParser.g:656:33: ( (k= UNION | VBAR ) p_IntersectExceptExpr )*
                loop100: do {
                    int alt100 = 2;
                    int LA100_0 = input.LA(1);

                    if ((LA100_0 == UNION || LA100_0 == VBAR)) {
                        alt100 = 1;
                    }

                    switch (alt100) {
                    case 1:
                        // XQueryParser.g:656:35: (k= UNION | VBAR ) p_IntersectExceptExpr
                    {
                        // XQueryParser.g:656:35: (k= UNION | VBAR )
                        int alt99 = 2;
                        int LA99_0 = input.LA(1);

                        if ((LA99_0 == UNION)) {
                            alt99 = 1;
                        } else if ((LA99_0 == VBAR)) {
                            alt99 = 2;
                        } else {
                            if (state.backtracking > 0) {
                                state.failed = true;
                                return retval;
                            }
                            NoViableAltException nvae = new NoViableAltException("", 99, 0, input);

                            throw nvae;
                        }
                        switch (alt99) {
                        case 1:
                            // XQueryParser.g:656:36: k= UNION
                        {
                            k = (CommonToken)match(input, UNION, FOLLOW_UNION_in_p_UnionExpr5761);
                            if (state.failed) {
                                return retval;
                            }
                            if (state.backtracking == 0) {
                                k_tree = (XQDTCommonTree)adaptor.create(k);
                                adaptor.addChild(root_0, k_tree);
                            }
                            if (state.backtracking == 0) {
                                ak(k);
                            }

                        }
                        break;
                        case 2:
                            // XQueryParser.g:656:56: VBAR
                        {
                            VBAR249 = (CommonToken)match(input, VBAR, FOLLOW_VBAR_in_p_UnionExpr5767);
                            if (state.failed) {
                                return retval;
                            }
                            if (state.backtracking == 0) {
                                VBAR249_tree = (XQDTCommonTree)adaptor.create(VBAR249);
                                adaptor.addChild(root_0, VBAR249_tree);
                            }

                        }
                        break;

                        }

                        pushFollow(FOLLOW_p_IntersectExceptExpr_in_p_UnionExpr5770);
                        p_IntersectExceptExpr250 = p_IntersectExceptExpr();

                        state._fsp--;
                        if (state.failed) {
                            return retval;
                        }
                        if (state.backtracking == 0) {
                            adaptor.addChild(root_0, p_IntersectExceptExpr250.getTree());
                        }

                    }
                    break;

                    default:
                        break loop100;
                    }
                } while (true);

            }

            retval.stop = input.LT(-1);

            if (state.backtracking == 0) {

                retval.tree = (XQDTCommonTree)adaptor.rulePostProcessing(root_0);
                adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        } catch (RecognitionException re) {
            reportError(re);
            recover(input, re);
            retval.tree = (XQDTCommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        } finally {
        }
        return retval;
    }

    // $ANTLR end "p_UnionExpr"

    public static class p_IntersectExceptExpr_return extends ParserRuleReturnScope {
        XQDTCommonTree tree;

        public Object getTree() {
            return tree;
        }
    };

    // $ANTLR start "p_IntersectExceptExpr"
    // XQueryParser.g:660:1: p_IntersectExceptExpr : p_InstanceofExpr ( (k= INTERSECT | k= EXCEPT ) p_InstanceofExpr )* ;
    public final XQueryParser.p_IntersectExceptExpr_return p_IntersectExceptExpr() throws RecognitionException {
        XQueryParser.p_IntersectExceptExpr_return retval = new XQueryParser.p_IntersectExceptExpr_return();
        retval.start = input.LT(1);

        XQDTCommonTree root_0 = null;

        CommonToken k = null;
        XQueryParser.p_InstanceofExpr_return p_InstanceofExpr251 = null;

        XQueryParser.p_InstanceofExpr_return p_InstanceofExpr252 = null;

        XQDTCommonTree k_tree = null;

        try {
            // XQueryParser.g:661:9: ( p_InstanceofExpr ( (k= INTERSECT | k= EXCEPT ) p_InstanceofExpr )* )
            // XQueryParser.g:661:11: p_InstanceofExpr ( (k= INTERSECT | k= EXCEPT ) p_InstanceofExpr )*
            {
                root_0 = (XQDTCommonTree)adaptor.nil();

                pushFollow(FOLLOW_p_InstanceofExpr_in_p_IntersectExceptExpr5799);
                p_InstanceofExpr251 = p_InstanceofExpr();

                state._fsp--;
                if (state.failed) {
                    return retval;
                }
                if (state.backtracking == 0) {
                    adaptor.addChild(root_0, p_InstanceofExpr251.getTree());
                }
                // XQueryParser.g:661:28: ( (k= INTERSECT | k= EXCEPT ) p_InstanceofExpr )*
                loop102: do {
                    int alt102 = 2;
                    int LA102_0 = input.LA(1);

                    if ((LA102_0 == EXCEPT || LA102_0 == INTERSECT)) {
                        alt102 = 1;
                    }

                    switch (alt102) {
                    case 1:
                        // XQueryParser.g:661:30: (k= INTERSECT | k= EXCEPT ) p_InstanceofExpr
                    {
                        // XQueryParser.g:661:30: (k= INTERSECT | k= EXCEPT )
                        int alt101 = 2;
                        int LA101_0 = input.LA(1);

                        if ((LA101_0 == INTERSECT)) {
                            alt101 = 1;
                        } else if ((LA101_0 == EXCEPT)) {
                            alt101 = 2;
                        } else {
                            if (state.backtracking > 0) {
                                state.failed = true;
                                return retval;
                            }
                            NoViableAltException nvae = new NoViableAltException("", 101, 0, input);

                            throw nvae;
                        }
                        switch (alt101) {
                        case 1:
                            // XQueryParser.g:661:31: k= INTERSECT
                        {
                            k = (CommonToken)match(input, INTERSECT, FOLLOW_INTERSECT_in_p_IntersectExceptExpr5806);
                            if (state.failed) {
                                return retval;
                            }
                            if (state.backtracking == 0) {
                                k_tree = (XQDTCommonTree)adaptor.create(k);
                                adaptor.addChild(root_0, k_tree);
                            }

                        }
                        break;
                        case 2:
                            // XQueryParser.g:661:45: k= EXCEPT
                        {
                            k = (CommonToken)match(input, EXCEPT, FOLLOW_EXCEPT_in_p_IntersectExceptExpr5812);
                            if (state.failed) {
                                return retval;
                            }
                            if (state.backtracking == 0) {
                                k_tree = (XQDTCommonTree)adaptor.create(k);
                                adaptor.addChild(root_0, k_tree);
                            }

                        }
                        break;

                        }

                        if (state.backtracking == 0) {
                            ak(k);
                        }
                        pushFollow(FOLLOW_p_InstanceofExpr_in_p_IntersectExceptExpr5817);
                        p_InstanceofExpr252 = p_InstanceofExpr();

                        state._fsp--;
                        if (state.failed) {
                            return retval;
                        }
                        if (state.backtracking == 0) {
                            adaptor.addChild(root_0, p_InstanceofExpr252.getTree());
                        }

                    }
                    break;

                    default:
                        break loop102;
                    }
                } while (true);

            }

            retval.stop = input.LT(-1);

            if (state.backtracking == 0) {

                retval.tree = (XQDTCommonTree)adaptor.rulePostProcessing(root_0);
                adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        } catch (RecognitionException re) {
            reportError(re);
            recover(input, re);
            retval.tree = (XQDTCommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        } finally {
        }
        return retval;
    }

    // $ANTLR end "p_IntersectExceptExpr"

    public static class p_InstanceofExpr_return extends ParserRuleReturnScope {
        XQDTCommonTree tree;

        public Object getTree() {
            return tree;
        }
    };

    // $ANTLR start "p_InstanceofExpr"
    // XQueryParser.g:665:1: p_InstanceofExpr : p_TreatExpr (k= INSTANCE k= OF p_SequenceType )? ;
    public final XQueryParser.p_InstanceofExpr_return p_InstanceofExpr() throws RecognitionException {
        XQueryParser.p_InstanceofExpr_return retval = new XQueryParser.p_InstanceofExpr_return();
        retval.start = input.LT(1);

        XQDTCommonTree root_0 = null;

        CommonToken k = null;
        XQueryParser.p_TreatExpr_return p_TreatExpr253 = null;

        XQueryParser.p_SequenceType_return p_SequenceType254 = null;

        XQDTCommonTree k_tree = null;

        try {
            // XQueryParser.g:666:9: ( p_TreatExpr (k= INSTANCE k= OF p_SequenceType )? )
            // XQueryParser.g:666:11: p_TreatExpr (k= INSTANCE k= OF p_SequenceType )?
            {
                root_0 = (XQDTCommonTree)adaptor.nil();

                pushFollow(FOLLOW_p_TreatExpr_in_p_InstanceofExpr5846);
                p_TreatExpr253 = p_TreatExpr();

                state._fsp--;
                if (state.failed) {
                    return retval;
                }
                if (state.backtracking == 0) {
                    adaptor.addChild(root_0, p_TreatExpr253.getTree());
                }
                // XQueryParser.g:666:23: (k= INSTANCE k= OF p_SequenceType )?
                int alt103 = 2;
                int LA103_0 = input.LA(1);

                if ((LA103_0 == INSTANCE)) {
                    alt103 = 1;
                }
                switch (alt103) {
                case 1:
                    // XQueryParser.g:666:25: k= INSTANCE k= OF p_SequenceType
                {
                    k = (CommonToken)match(input, INSTANCE, FOLLOW_INSTANCE_in_p_InstanceofExpr5852);
                    if (state.failed) {
                        return retval;
                    }
                    if (state.backtracking == 0) {
                        k_tree = (XQDTCommonTree)adaptor.create(k);
                        adaptor.addChild(root_0, k_tree);
                    }
                    if (state.backtracking == 0) {
                        ak(k);
                    }
                    k = (CommonToken)match(input, OF, FOLLOW_OF_in_p_InstanceofExpr5858);
                    if (state.failed) {
                        return retval;
                    }
                    if (state.backtracking == 0) {
                        k_tree = (XQDTCommonTree)adaptor.create(k);
                        adaptor.addChild(root_0, k_tree);
                    }
                    if (state.backtracking == 0) {
                        ak(k);
                    }
                    pushFollow(FOLLOW_p_SequenceType_in_p_InstanceofExpr5862);
                    p_SequenceType254 = p_SequenceType();

                    state._fsp--;
                    if (state.failed) {
                        return retval;
                    }
                    if (state.backtracking == 0) {
                        adaptor.addChild(root_0, p_SequenceType254.getTree());
                    }

                }
                    break;

                }

            }

            retval.stop = input.LT(-1);

            if (state.backtracking == 0) {

                retval.tree = (XQDTCommonTree)adaptor.rulePostProcessing(root_0);
                adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        } catch (RecognitionException re) {
            reportError(re);
            recover(input, re);
            retval.tree = (XQDTCommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        } finally {
        }
        return retval;
    }

    // $ANTLR end "p_InstanceofExpr"

    public static class p_TreatExpr_return extends ParserRuleReturnScope {
        XQDTCommonTree tree;

        public Object getTree() {
            return tree;
        }
    };

    // $ANTLR start "p_TreatExpr"
    // XQueryParser.g:670:1: p_TreatExpr : p_CastableExpr (k= TREAT k= AS p_SequenceType )? ;
    public final XQueryParser.p_TreatExpr_return p_TreatExpr() throws RecognitionException {
        XQueryParser.p_TreatExpr_return retval = new XQueryParser.p_TreatExpr_return();
        retval.start = input.LT(1);

        XQDTCommonTree root_0 = null;

        CommonToken k = null;
        XQueryParser.p_CastableExpr_return p_CastableExpr255 = null;

        XQueryParser.p_SequenceType_return p_SequenceType256 = null;

        XQDTCommonTree k_tree = null;

        try {
            // XQueryParser.g:671:9: ( p_CastableExpr (k= TREAT k= AS p_SequenceType )? )
            // XQueryParser.g:671:11: p_CastableExpr (k= TREAT k= AS p_SequenceType )?
            {
                root_0 = (XQDTCommonTree)adaptor.nil();

                pushFollow(FOLLOW_p_CastableExpr_in_p_TreatExpr5890);
                p_CastableExpr255 = p_CastableExpr();

                state._fsp--;
                if (state.failed) {
                    return retval;
                }
                if (state.backtracking == 0) {
                    adaptor.addChild(root_0, p_CastableExpr255.getTree());
                }
                // XQueryParser.g:671:26: (k= TREAT k= AS p_SequenceType )?
                int alt104 = 2;
                int LA104_0 = input.LA(1);

                if ((LA104_0 == TREAT)) {
                    alt104 = 1;
                }
                switch (alt104) {
                case 1:
                    // XQueryParser.g:671:28: k= TREAT k= AS p_SequenceType
                {
                    k = (CommonToken)match(input, TREAT, FOLLOW_TREAT_in_p_TreatExpr5896);
                    if (state.failed) {
                        return retval;
                    }
                    if (state.backtracking == 0) {
                        k_tree = (XQDTCommonTree)adaptor.create(k);
                        adaptor.addChild(root_0, k_tree);
                    }
                    if (state.backtracking == 0) {
                        ak(k);
                    }
                    k = (CommonToken)match(input, AS, FOLLOW_AS_in_p_TreatExpr5902);
                    if (state.failed) {
                        return retval;
                    }
                    if (state.backtracking == 0) {
                        k_tree = (XQDTCommonTree)adaptor.create(k);
                        adaptor.addChild(root_0, k_tree);
                    }
                    if (state.backtracking == 0) {
                        ak(k);
                    }
                    pushFollow(FOLLOW_p_SequenceType_in_p_TreatExpr5906);
                    p_SequenceType256 = p_SequenceType();

                    state._fsp--;
                    if (state.failed) {
                        return retval;
                    }
                    if (state.backtracking == 0) {
                        adaptor.addChild(root_0, p_SequenceType256.getTree());
                    }

                }
                    break;

                }

            }

            retval.stop = input.LT(-1);

            if (state.backtracking == 0) {

                retval.tree = (XQDTCommonTree)adaptor.rulePostProcessing(root_0);
                adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        } catch (RecognitionException re) {
            reportError(re);
            recover(input, re);
            retval.tree = (XQDTCommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        } finally {
        }
        return retval;
    }

    // $ANTLR end "p_TreatExpr"

    public static class p_CastableExpr_return extends ParserRuleReturnScope {
        XQDTCommonTree tree;

        public Object getTree() {
            return tree;
        }
    };

    // $ANTLR start "p_CastableExpr"
    // XQueryParser.g:675:1: p_CastableExpr : p_CastExpr (k= CASTABLE k= AS p_SingleType )? ;
    public final XQueryParser.p_CastableExpr_return p_CastableExpr() throws RecognitionException {
        XQueryParser.p_CastableExpr_return retval = new XQueryParser.p_CastableExpr_return();
        retval.start = input.LT(1);

        XQDTCommonTree root_0 = null;

        CommonToken k = null;
        XQueryParser.p_CastExpr_return p_CastExpr257 = null;

        XQueryParser.p_SingleType_return p_SingleType258 = null;

        XQDTCommonTree k_tree = null;

        try {
            // XQueryParser.g:676:9: ( p_CastExpr (k= CASTABLE k= AS p_SingleType )? )
            // XQueryParser.g:676:11: p_CastExpr (k= CASTABLE k= AS p_SingleType )?
            {
                root_0 = (XQDTCommonTree)adaptor.nil();

                pushFollow(FOLLOW_p_CastExpr_in_p_CastableExpr5943);
                p_CastExpr257 = p_CastExpr();

                state._fsp--;
                if (state.failed) {
                    return retval;
                }
                if (state.backtracking == 0) {
                    adaptor.addChild(root_0, p_CastExpr257.getTree());
                }
                // XQueryParser.g:676:22: (k= CASTABLE k= AS p_SingleType )?
                int alt105 = 2;
                int LA105_0 = input.LA(1);

                if ((LA105_0 == CASTABLE)) {
                    alt105 = 1;
                }
                switch (alt105) {
                case 1:
                    // XQueryParser.g:676:24: k= CASTABLE k= AS p_SingleType
                {
                    k = (CommonToken)match(input, CASTABLE, FOLLOW_CASTABLE_in_p_CastableExpr5949);
                    if (state.failed) {
                        return retval;
                    }
                    if (state.backtracking == 0) {
                        k_tree = (XQDTCommonTree)adaptor.create(k);
                        adaptor.addChild(root_0, k_tree);
                    }
                    if (state.backtracking == 0) {
                        ak(k);
                    }
                    k = (CommonToken)match(input, AS, FOLLOW_AS_in_p_CastableExpr5955);
                    if (state.failed) {
                        return retval;
                    }
                    if (state.backtracking == 0) {
                        k_tree = (XQDTCommonTree)adaptor.create(k);
                        adaptor.addChild(root_0, k_tree);
                    }
                    if (state.backtracking == 0) {
                        ak(k);
                    }
                    pushFollow(FOLLOW_p_SingleType_in_p_CastableExpr5959);
                    p_SingleType258 = p_SingleType();

                    state._fsp--;
                    if (state.failed) {
                        return retval;
                    }
                    if (state.backtracking == 0) {
                        adaptor.addChild(root_0, p_SingleType258.getTree());
                    }

                }
                    break;

                }

            }

            retval.stop = input.LT(-1);

            if (state.backtracking == 0) {

                retval.tree = (XQDTCommonTree)adaptor.rulePostProcessing(root_0);
                adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        } catch (RecognitionException re) {
            reportError(re);
            recover(input, re);
            retval.tree = (XQDTCommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        } finally {
        }
        return retval;
    }

    // $ANTLR end "p_CastableExpr"

    public static class p_CastExpr_return extends ParserRuleReturnScope {
        XQDTCommonTree tree;

        public Object getTree() {
            return tree;
        }
    };

    // $ANTLR start "p_CastExpr"
    // XQueryParser.g:680:1: p_CastExpr : p_UnaryExpr (k= CAST k= AS p_SingleType )? ;
    public final XQueryParser.p_CastExpr_return p_CastExpr() throws RecognitionException {
        XQueryParser.p_CastExpr_return retval = new XQueryParser.p_CastExpr_return();
        retval.start = input.LT(1);

        XQDTCommonTree root_0 = null;

        CommonToken k = null;
        XQueryParser.p_UnaryExpr_return p_UnaryExpr259 = null;

        XQueryParser.p_SingleType_return p_SingleType260 = null;

        XQDTCommonTree k_tree = null;

        try {
            // XQueryParser.g:681:9: ( p_UnaryExpr (k= CAST k= AS p_SingleType )? )
            // XQueryParser.g:681:11: p_UnaryExpr (k= CAST k= AS p_SingleType )?
            {
                root_0 = (XQDTCommonTree)adaptor.nil();

                pushFollow(FOLLOW_p_UnaryExpr_in_p_CastExpr5996);
                p_UnaryExpr259 = p_UnaryExpr();

                state._fsp--;
                if (state.failed) {
                    return retval;
                }
                if (state.backtracking == 0) {
                    adaptor.addChild(root_0, p_UnaryExpr259.getTree());
                }
                // XQueryParser.g:681:23: (k= CAST k= AS p_SingleType )?
                int alt106 = 2;
                int LA106_0 = input.LA(1);

                if ((LA106_0 == CAST)) {
                    alt106 = 1;
                }
                switch (alt106) {
                case 1:
                    // XQueryParser.g:681:25: k= CAST k= AS p_SingleType
                {
                    k = (CommonToken)match(input, CAST, FOLLOW_CAST_in_p_CastExpr6002);
                    if (state.failed) {
                        return retval;
                    }
                    if (state.backtracking == 0) {
                        k_tree = (XQDTCommonTree)adaptor.create(k);
                        adaptor.addChild(root_0, k_tree);
                    }
                    if (state.backtracking == 0) {
                        ak(k);
                    }
                    k = (CommonToken)match(input, AS, FOLLOW_AS_in_p_CastExpr6008);
                    if (state.failed) {
                        return retval;
                    }
                    if (state.backtracking == 0) {
                        k_tree = (XQDTCommonTree)adaptor.create(k);
                        adaptor.addChild(root_0, k_tree);
                    }
                    if (state.backtracking == 0) {
                        ak(k);
                    }
                    pushFollow(FOLLOW_p_SingleType_in_p_CastExpr6012);
                    p_SingleType260 = p_SingleType();

                    state._fsp--;
                    if (state.failed) {
                        return retval;
                    }
                    if (state.backtracking == 0) {
                        adaptor.addChild(root_0, p_SingleType260.getTree());
                    }

                }
                    break;

                }

            }

            retval.stop = input.LT(-1);

            if (state.backtracking == 0) {

                retval.tree = (XQDTCommonTree)adaptor.rulePostProcessing(root_0);
                adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        } catch (RecognitionException re) {
            reportError(re);
            recover(input, re);
            retval.tree = (XQDTCommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        } finally {
        }
        return retval;
    }

    // $ANTLR end "p_CastExpr"

    public static class p_UnaryExpr_return extends ParserRuleReturnScope {
        XQDTCommonTree tree;

        public Object getTree() {
            return tree;
        }
    };

    // $ANTLR start "p_UnaryExpr"
    // XQueryParser.g:685:1: p_UnaryExpr : ( PLUS | MINUS )* p_ValueExpr -> ^( UnaryExpr ( PLUS )* p_ValueExpr ) ;
    public final XQueryParser.p_UnaryExpr_return p_UnaryExpr() throws RecognitionException {
        XQueryParser.p_UnaryExpr_return retval = new XQueryParser.p_UnaryExpr_return();
        retval.start = input.LT(1);

        XQDTCommonTree root_0 = null;

        CommonToken PLUS261 = null;
        CommonToken MINUS262 = null;
        XQueryParser.p_ValueExpr_return p_ValueExpr263 = null;

        XQDTCommonTree PLUS261_tree = null;
        XQDTCommonTree MINUS262_tree = null;
        RewriteRuleTokenStream stream_PLUS = new RewriteRuleTokenStream(adaptor, "token PLUS");
        RewriteRuleTokenStream stream_MINUS = new RewriteRuleTokenStream(adaptor, "token MINUS");
        RewriteRuleSubtreeStream stream_p_ValueExpr = new RewriteRuleSubtreeStream(adaptor, "rule p_ValueExpr");
        try {
            // XQueryParser.g:686:9: ( ( PLUS | MINUS )* p_ValueExpr -> ^( UnaryExpr ( PLUS )* p_ValueExpr ) )
            // XQueryParser.g:686:11: ( PLUS | MINUS )* p_ValueExpr
            {
                // XQueryParser.g:686:11: ( PLUS | MINUS )*
                loop107: do {
                    int alt107 = 3;
                    int LA107_0 = input.LA(1);

                    if ((LA107_0 == PLUS)) {
                        alt107 = 1;
                    } else if ((LA107_0 == MINUS)) {
                        alt107 = 2;
                    }

                    switch (alt107) {
                    case 1:
                        // XQueryParser.g:686:12: PLUS
                    {
                        PLUS261 = (CommonToken)match(input, PLUS, FOLLOW_PLUS_in_p_UnaryExpr6042);
                        if (state.failed) {
                            return retval;
                        }
                        if (state.backtracking == 0) {
                            stream_PLUS.add(PLUS261);
                        }

                    }
                    break;
                    case 2:
                        // XQueryParser.g:686:19: MINUS
                    {
                        MINUS262 = (CommonToken)match(input, MINUS, FOLLOW_MINUS_in_p_UnaryExpr6046);
                        if (state.failed) {
                            return retval;
                        }
                        if (state.backtracking == 0) {
                            stream_MINUS.add(MINUS262);
                        }

                    }
                    break;

                    default:
                        break loop107;
                    }
                } while (true);

            pushFollow(FOLLOW_p_ValueExpr_in_p_UnaryExpr6050);
            p_ValueExpr263 = p_ValueExpr();

            state._fsp--;
            if (state.failed) {
                return retval;
            }
            if (state.backtracking == 0) {
                stream_p_ValueExpr.add(p_ValueExpr263.getTree());
            }

            // AST REWRITE
            // elements: PLUS, p_ValueExpr
            // token labels:
            // rule labels: retval
            // token list labels:
            // rule list labels:
            // wildcard labels:
            if (state.backtracking == 0) {
                retval.tree = root_0;
                RewriteRuleSubtreeStream stream_retval = new RewriteRuleSubtreeStream(adaptor, "rule retval",
                        retval != null ? retval.tree : null);

                root_0 = (XQDTCommonTree)adaptor.nil();
                // 687:17: -> ^( UnaryExpr ( PLUS )* p_ValueExpr )
                {
                    // XQueryParser.g:687:20: ^( UnaryExpr ( PLUS )* p_ValueExpr )
                    {
                        XQDTCommonTree root_1 = (XQDTCommonTree)adaptor.nil();
                        root_1 = (XQDTCommonTree)adaptor.becomeRoot(adaptor.create(UnaryExpr, "UnaryExpr"), root_1);

                        // XQueryParser.g:687:32: ( PLUS )*
                        while (stream_PLUS.hasNext()) {
                            adaptor.addChild(root_1, stream_PLUS.nextNode());

                        }
                        stream_PLUS.reset();
                        adaptor.addChild(root_1, stream_p_ValueExpr.nextTree());

                        adaptor.addChild(root_0, root_1);
                    }

                }

                retval.tree = root_0;
            }
            }

            retval.stop = input.LT(-1);

            if (state.backtracking == 0) {

                retval.tree = (XQDTCommonTree)adaptor.rulePostProcessing(root_0);
                adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        } catch (RecognitionException re) {
            reportError(re);
            recover(input, re);
            retval.tree = (XQDTCommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        } finally {
        }
        return retval;
    }

    // $ANTLR end "p_UnaryExpr"

    public static class p_ValueExpr_return extends ParserRuleReturnScope {
        XQDTCommonTree tree;

        public Object getTree() {
            return tree;
        }
    };

    // $ANTLR start "p_ValueExpr"
    // XQueryParser.g:691:1: p_ValueExpr : ( ( VALIDATE ( p_ValidationMode | TYPE )? )=> p_ValidateExpr | p_PathExpr | p_ExtensionExpr );
    public final XQueryParser.p_ValueExpr_return p_ValueExpr() throws RecognitionException {
        XQueryParser.p_ValueExpr_return retval = new XQueryParser.p_ValueExpr_return();
        retval.start = input.LT(1);

        XQDTCommonTree root_0 = null;

        XQueryParser.p_ValidateExpr_return p_ValidateExpr264 = null;

        XQueryParser.p_PathExpr_return p_PathExpr265 = null;

        XQueryParser.p_ExtensionExpr_return p_ExtensionExpr266 = null;

        try {
            // XQueryParser.g:692:9: ( ( VALIDATE ( p_ValidationMode | TYPE )? )=> p_ValidateExpr | p_PathExpr | p_ExtensionExpr )
            int alt108 = 3;
            switch (input.LA(1)) {
            case VALIDATE: {
                int LA108_1 = input.LA(2);

                if ((LA108_1 == LAX) && (synpred6_XQueryParser())) {
                    alt108 = 1;
                } else if ((LA108_1 == STRICT) && (synpred6_XQueryParser())) {
                    alt108 = 1;
                } else if ((LA108_1 == TYPE) && (synpred6_XQueryParser())) {
                    alt108 = 1;
                } else if ((LA108_1 == LBRACKET) && (synpred6_XQueryParser())) {
                    alt108 = 1;
                } else if ((LA108_1 == EOF || (LA108_1 >= AND && LA108_1 <= ASCENDING)
                        || (LA108_1 >= CASE && LA108_1 <= CASTABLE) || LA108_1 == COLLATION || LA108_1 == DEFAULT
                        || (LA108_1 >= DESCENDING && LA108_1 <= DIV) || LA108_1 == EMPTY || LA108_1 == EQ
                        || LA108_1 == EXCEPT || LA108_1 == FOR || LA108_1 == GE || (LA108_1 >= GT && LA108_1 <= IDIV)
                        || (LA108_1 >= INSTANCE && LA108_1 <= IS) || LA108_1 == LE
                        || (LA108_1 >= LET && LA108_1 <= MOD) || LA108_1 == NE || (LA108_1 >= OR && LA108_1 <= ORDER)
                        || (LA108_1 >= RETURN && LA108_1 <= SATISFIES) || LA108_1 == STABLE
                        || (LA108_1 >= TO && LA108_1 <= TREAT) || LA108_1 == UNION || LA108_1 == WHERE
                        || LA108_1 == COUNT || (LA108_1 >= END && LA108_1 <= GROUP) || LA108_1 == ONLY
                        || LA108_1 == START || (LA108_1 >= AFTER && LA108_1 <= BEFORE) || LA108_1 == INTO
                        || LA108_1 == MODIFY || LA108_1 == WITH || LA108_1 == CONTAINS || LA108_1 == PARAGRAPHS
                        || LA108_1 == SENTENCES || LA108_1 == TIMES || LA108_1 == WORDS
                        || (LA108_1 >= CONCAT && LA108_1 <= RPAREN) || (LA108_1 >= RBRACKET && LA108_1 <= EQUAL)
                        || LA108_1 == NOTEQUAL || LA108_1 == COMMA || (LA108_1 >= STAR && LA108_1 <= SLASH_SLASH)
                        || LA108_1 == COLON || (LA108_1 >= SEMICOLON && LA108_1 <= VBAR))) {
                    alt108 = 2;
                } else {
                    if (state.backtracking > 0) {
                        state.failed = true;
                        return retval;
                    }
                    NoViableAltException nvae = new NoViableAltException("", 108, 1, input);

                    throw nvae;
                }
            }
                break;
            case ANCESTOR:
            case ANCESTOR_OR_SELF:
            case AND:
            case AS:
            case ASCENDING:
            case AT:
            case ATTRIBUTE:
            case BASE_URI:
            case BOUNDARY_SPACE:
            case BY:
            case CASE:
            case CAST:
            case CASTABLE:
            case CHILD:
            case COLLATION:
            case COMMENT:
            case CONSTRUCTION:
            case COPY_NAMESPACES:
            case DECLARE:
            case DEFAULT:
            case DESCENDANT:
            case DESCENDANT_OR_SELF:
            case DESCENDING:
            case DIV:
            case DOCUMENT:
            case DOCUMENT_NODE:
            case ELEMENT:
            case ELSE:
            case EMPTY:
            case EMPTY_SEQUENCE:
            case ENCODING:
            case EQ:
            case EVERY:
            case EXCEPT:
            case EXTERNAL:
            case FOLLOWING:
            case FOLLOWING_SIBLING:
            case FOR:
            case FUNCTION:
            case GE:
            case GREATEST:
            case GT:
            case IDIV:
            case IF:
            case IMPORT:
            case IN:
            case INHERIT:
            case INSTANCE:
            case INTERSECT:
            case IS:
            case ITEM:
            case LAX:
            case LE:
            case LEAST:
            case LET:
            case LT:
            case MOD:
            case MODULE:
            case NAMESPACE:
            case NE:
            case NO_INHERIT:
            case NO_PRESERVE:
            case NODE:
            case OF:
            case OPTION:
            case OR:
            case ORDER:
            case ORDERED:
            case ORDERING:
            case PARENT:
            case PRECEDING:
            case PRECEDING_SIBLING:
            case PRESERVE:
            case PROCESSING_INSTRUCTION:
            case RETURN:
            case SATISFIES:
            case SCHEMA:
            case SCHEMA_ATTRIBUTE:
            case SCHEMA_ELEMENT:
            case SELF:
            case SOME:
            case STABLE:
            case STRICT:
            case STRIP:
            case TEXT:
            case THEN:
            case TO:
            case TREAT:
            case TYPESWITCH:
            case UNION:
            case UNORDERED:
            case VARIABLE:
            case VERSION:
            case WHERE:
            case XQUERY:
            case ALLOWING:
            case CATCH:
            case CONTEXT:
            case COUNT:
            case DECIMAL_FORMAT:
            case DECIMAL_SEPARATOR:
            case DIGIT:
            case END:
            case GROUP:
            case GROUPING_SEPARATOR:
            case INFINITY:
            case MINUS_SIGN:
            case NAMESPACE_NODE:
            case NAN:
            case NEXT:
            case ONLY:
            case PATTERN_SEPARATOR:
            case PERCENT:
            case PER_MILLE:
            case PREVIOUS:
            case SLIDING:
            case START:
            case SWITCH:
            case TRY:
            case TUMBLING:
            case TYPE:
            case WHEN:
            case WINDOW:
            case ZERO_DIGIT:
            case AFTER:
            case BEFORE:
            case COPY:
            case DELETE:
            case FIRST:
            case INSERT:
            case INTO:
            case LAST:
            case MODIFY:
            case NODES:
            case RENAME:
            case REPLACE:
            case REVALIDATION:
            case SKIP:
            case UPDATING:
            case VALUE:
            case WITH:
            case ALL:
            case ANY:
            case CONTAINS:
            case CONTENT:
            case DIACRITICS:
            case DIFFERENT:
            case DISTANCE:
            case ENTIRE:
            case EXACTLY:
            case FROM:
            case FT_OPTION:
            case FTAND:
            case FTNOT:
            case FTOR:
            case INSENSITIVE:
            case LANGUAGE:
            case LEVELS:
            case LOWERCASE:
            case MOST:
            case NO:
            case NOT:
            case OCCURS:
            case PARAGRAPH:
            case PARAGRAPHS:
            case PHRASE:
            case RELATIONSHIP:
            case SAME:
            case SCORE:
            case SENSITIVE:
            case SENTENCE:
            case SENTENCES:
            case STEMMING:
            case STOP:
            case THESAURUS:
            case TIMES:
            case UPPERCASE:
            case USING:
            case WEIGHT:
            case WILDCARDS:
            case WITHOUT:
            case WORD:
            case WORDS:
            case BREAK:
            case CONTINUE:
            case EXIT:
            case LOOP:
            case RETURNING:
            case WHILE:
            case CHECK:
            case COLLECTION:
            case CONSTRAINT:
            case FOREACH:
            case FOREIGN:
            case INDEX:
            case INTEGRITY:
            case KEY:
            case ON:
            case UNIQUE:
            case BINARY:
            case AMP_ER:
            case APOS_ER:
            case QUOT_ER:
            case LPAREN:
            case DOLLAR:
            case LBRACKET:
            case STAR:
            case SMALLER:
            case SLASH:
            case SLASH_SLASH:
            case DOT:
            case DOT_DOT:
            case ATTR_SIGN:
            case APOS:
            case QUOT:
            case L_NCName:
            case L_DirCommentConstructor:
            case L_DirPIConstructor:
            case L_IntegerLiteral:
            case L_DecimalLiteral:
            case L_DoubleLiteral:
            case EXPLICITLY: {
                alt108 = 2;
            }
                break;
            case L_Pragma: {
                alt108 = 3;
            }
                break;
            default:
                if (state.backtracking > 0) {
                    state.failed = true;
                    return retval;
                }
                NoViableAltException nvae = new NoViableAltException("", 108, 0, input);

                throw nvae;
            }

            switch (alt108) {
            case 1:
                // XQueryParser.g:692:11: ( VALIDATE ( p_ValidationMode | TYPE )? )=> p_ValidateExpr
            {
                root_0 = (XQDTCommonTree)adaptor.nil();

                pushFollow(FOLLOW_p_ValidateExpr_in_p_ValueExpr6120);
                p_ValidateExpr264 = p_ValidateExpr();

                state._fsp--;
                if (state.failed) {
                    return retval;
                }
                if (state.backtracking == 0) {
                    adaptor.addChild(root_0, p_ValidateExpr264.getTree());
                }

            }
            break;
            case 2:
                // XQueryParser.g:693:11: p_PathExpr
            {
                root_0 = (XQDTCommonTree)adaptor.nil();

                pushFollow(FOLLOW_p_PathExpr_in_p_ValueExpr6132);
                p_PathExpr265 = p_PathExpr();

                state._fsp--;
                if (state.failed) {
                    return retval;
                }
                if (state.backtracking == 0) {
                    adaptor.addChild(root_0, p_PathExpr265.getTree());
                }

            }
            break;
            case 3:
                // XQueryParser.g:694:11: p_ExtensionExpr
            {
                root_0 = (XQDTCommonTree)adaptor.nil();

                pushFollow(FOLLOW_p_ExtensionExpr_in_p_ValueExpr6144);
                p_ExtensionExpr266 = p_ExtensionExpr();

                state._fsp--;
                if (state.failed) {
                    return retval;
                }
                if (state.backtracking == 0) {
                    adaptor.addChild(root_0, p_ExtensionExpr266.getTree());
                }

            }
            break;

            }
            retval.stop = input.LT(-1);

            if (state.backtracking == 0) {

                retval.tree = (XQDTCommonTree)adaptor.rulePostProcessing(root_0);
                adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        } catch (RecognitionException re) {
            reportError(re);
            recover(input, re);
            retval.tree = (XQDTCommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        } finally {
        }
        return retval;
    }

    // $ANTLR end "p_ValueExpr"

    public static class p_GeneralComp_return extends ParserRuleReturnScope {
        XQDTCommonTree tree;

        public Object getTree() {
            return tree;
        }
    };

    // $ANTLR start "p_GeneralComp"
    // XQueryParser.g:698:1: p_GeneralComp : ( EQUAL | NOTEQUAL | SMALLER | SMALLEREQ | GREATER | GREATEREQ );
    public final XQueryParser.p_GeneralComp_return p_GeneralComp() throws RecognitionException {
        XQueryParser.p_GeneralComp_return retval = new XQueryParser.p_GeneralComp_return();
        retval.start = input.LT(1);

        XQDTCommonTree root_0 = null;

        CommonToken set267 = null;

        XQDTCommonTree set267_tree = null;

        try {
            // XQueryParser.g:699:9: ( EQUAL | NOTEQUAL | SMALLER | SMALLEREQ | GREATER | GREATEREQ )
            // XQueryParser.g:
            {
                root_0 = (XQDTCommonTree)adaptor.nil();

                set267 = (CommonToken)input.LT(1);
                if (input.LA(1) == EQUAL || input.LA(1) == NOTEQUAL
                        || (input.LA(1) >= SMALLER && input.LA(1) <= GREATEREQ)) {
                    input.consume();
                    if (state.backtracking == 0) {
                        adaptor.addChild(root_0, adaptor.create(set267));
                    }
                    state.errorRecovery = false;
                    state.failed = false;
                } else {
                    if (state.backtracking > 0) {
                        state.failed = true;
                        return retval;
                    }
                    MismatchedSetException mse = new MismatchedSetException(null, input);
                    throw mse;
                }

            }

            retval.stop = input.LT(-1);

            if (state.backtracking == 0) {

                retval.tree = (XQDTCommonTree)adaptor.rulePostProcessing(root_0);
                adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        } catch (RecognitionException re) {
            reportError(re);
            recover(input, re);
            retval.tree = (XQDTCommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        } finally {
        }
        return retval;
    }

    // $ANTLR end "p_GeneralComp"

    public static class p_ValueComp_return extends ParserRuleReturnScope {
        XQDTCommonTree tree;

        public Object getTree() {
            return tree;
        }
    };

    // $ANTLR start "p_ValueComp"
    // XQueryParser.g:703:1: p_ValueComp : (k= EQ | k= NE | k= LT | k= LE | k= GT | k= GE ) ;
    public final XQueryParser.p_ValueComp_return p_ValueComp() throws RecognitionException {
        XQueryParser.p_ValueComp_return retval = new XQueryParser.p_ValueComp_return();
        retval.start = input.LT(1);

        XQDTCommonTree root_0 = null;

        CommonToken k = null;

        XQDTCommonTree k_tree = null;

        try {
            // XQueryParser.g:704:9: ( (k= EQ | k= NE | k= LT | k= LE | k= GT | k= GE ) )
            // XQueryParser.g:704:11: (k= EQ | k= NE | k= LT | k= LE | k= GT | k= GE )
            {
                root_0 = (XQDTCommonTree)adaptor.nil();

                // XQueryParser.g:704:11: (k= EQ | k= NE | k= LT | k= LE | k= GT | k= GE )
                int alt109 = 6;
                switch (input.LA(1)) {
                case EQ: {
                    alt109 = 1;
                }
                break;
                case NE: {
                    alt109 = 2;
                }
                break;
                case LT: {
                    alt109 = 3;
                }
                break;
                case LE: {
                    alt109 = 4;
                }
                break;
                case GT: {
                    alt109 = 5;
                }
                break;
                case GE: {
                    alt109 = 6;
                }
                break;
                default:
                    if (state.backtracking > 0) {
                        state.failed = true;
                        return retval;
                    }
                    NoViableAltException nvae = new NoViableAltException("", 109, 0, input);

                    throw nvae;
                }

                switch (alt109) {
                case 1:
                    // XQueryParser.g:704:12: k= EQ
                {
                    k = (CommonToken)match(input, EQ, FOLLOW_EQ_in_p_ValueComp6219);
                    if (state.failed) {
                        return retval;
                    }
                    if (state.backtracking == 0) {
                        k_tree = (XQDTCommonTree)adaptor.create(k);
                        adaptor.addChild(root_0, k_tree);
                    }

                }
                    break;
                case 2:
                    // XQueryParser.g:704:19: k= NE
                {
                    k = (CommonToken)match(input, NE, FOLLOW_NE_in_p_ValueComp6225);
                    if (state.failed) {
                        return retval;
                    }
                    if (state.backtracking == 0) {
                        k_tree = (XQDTCommonTree)adaptor.create(k);
                        adaptor.addChild(root_0, k_tree);
                    }

                }
                    break;
                case 3:
                    // XQueryParser.g:704:26: k= LT
                {
                    k = (CommonToken)match(input, LT, FOLLOW_LT_in_p_ValueComp6231);
                    if (state.failed) {
                        return retval;
                    }
                    if (state.backtracking == 0) {
                        k_tree = (XQDTCommonTree)adaptor.create(k);
                        adaptor.addChild(root_0, k_tree);
                    }

                }
                    break;
                case 4:
                    // XQueryParser.g:704:33: k= LE
                {
                    k = (CommonToken)match(input, LE, FOLLOW_LE_in_p_ValueComp6237);
                    if (state.failed) {
                        return retval;
                    }
                    if (state.backtracking == 0) {
                        k_tree = (XQDTCommonTree)adaptor.create(k);
                        adaptor.addChild(root_0, k_tree);
                    }

                }
                    break;
                case 5:
                    // XQueryParser.g:704:40: k= GT
                {
                    k = (CommonToken)match(input, GT, FOLLOW_GT_in_p_ValueComp6243);
                    if (state.failed) {
                        return retval;
                    }
                    if (state.backtracking == 0) {
                        k_tree = (XQDTCommonTree)adaptor.create(k);
                        adaptor.addChild(root_0, k_tree);
                    }

                }
                    break;
                case 6:
                    // XQueryParser.g:704:47: k= GE
                {
                    k = (CommonToken)match(input, GE, FOLLOW_GE_in_p_ValueComp6249);
                    if (state.failed) {
                        return retval;
                    }
                    if (state.backtracking == 0) {
                        k_tree = (XQDTCommonTree)adaptor.create(k);
                        adaptor.addChild(root_0, k_tree);
                    }

                }
                    break;

                }

                if (state.backtracking == 0) {
                    ak(k);
                }

            }

            retval.stop = input.LT(-1);

            if (state.backtracking == 0) {

                retval.tree = (XQDTCommonTree)adaptor.rulePostProcessing(root_0);
                adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        } catch (RecognitionException re) {
            reportError(re);
            recover(input, re);
            retval.tree = (XQDTCommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        } finally {
        }
        return retval;
    }

    // $ANTLR end "p_ValueComp"

    public static class p_NodeComp_return extends ParserRuleReturnScope {
        XQDTCommonTree tree;

        public Object getTree() {
            return tree;
        }
    };

    // $ANTLR start "p_NodeComp"
    // XQueryParser.g:708:1: p_NodeComp : (k= IS | SMALLER_SMALLER | GREATER_GREATER );
    public final XQueryParser.p_NodeComp_return p_NodeComp() throws RecognitionException {
        XQueryParser.p_NodeComp_return retval = new XQueryParser.p_NodeComp_return();
        retval.start = input.LT(1);

        XQDTCommonTree root_0 = null;

        CommonToken k = null;
        CommonToken SMALLER_SMALLER268 = null;
        CommonToken GREATER_GREATER269 = null;

        XQDTCommonTree k_tree = null;
        XQDTCommonTree SMALLER_SMALLER268_tree = null;
        XQDTCommonTree GREATER_GREATER269_tree = null;

        try {
            // XQueryParser.g:709:9: (k= IS | SMALLER_SMALLER | GREATER_GREATER )
            int alt110 = 3;
            switch (input.LA(1)) {
            case IS: {
                alt110 = 1;
            }
                break;
            case SMALLER_SMALLER: {
                alt110 = 2;
            }
                break;
            case GREATER_GREATER: {
                alt110 = 3;
            }
                break;
            default:
                if (state.backtracking > 0) {
                    state.failed = true;
                    return retval;
                }
                NoViableAltException nvae = new NoViableAltException("", 110, 0, input);

                throw nvae;
            }

            switch (alt110) {
            case 1:
                // XQueryParser.g:709:11: k= IS
            {
                root_0 = (XQDTCommonTree)adaptor.nil();

                k = (CommonToken)match(input, IS, FOLLOW_IS_in_p_NodeComp6280);
                if (state.failed) {
                    return retval;
                }
                if (state.backtracking == 0) {
                    k_tree = (XQDTCommonTree)adaptor.create(k);
                    adaptor.addChild(root_0, k_tree);
                }
                if (state.backtracking == 0) {
                    ak(k);
                }

            }
            break;
            case 2:
                // XQueryParser.g:709:28: SMALLER_SMALLER
            {
                root_0 = (XQDTCommonTree)adaptor.nil();

                SMALLER_SMALLER268 = (CommonToken)match(input, SMALLER_SMALLER,
                        FOLLOW_SMALLER_SMALLER_in_p_NodeComp6286);
                if (state.failed) {
                    return retval;
                }
                if (state.backtracking == 0) {
                    SMALLER_SMALLER268_tree = (XQDTCommonTree)adaptor.create(SMALLER_SMALLER268);
                    adaptor.addChild(root_0, SMALLER_SMALLER268_tree);
                }

            }
            break;
            case 3:
                // XQueryParser.g:709:46: GREATER_GREATER
            {
                root_0 = (XQDTCommonTree)adaptor.nil();

                GREATER_GREATER269 = (CommonToken)match(input, GREATER_GREATER,
                        FOLLOW_GREATER_GREATER_in_p_NodeComp6290);
                if (state.failed) {
                    return retval;
                }
                if (state.backtracking == 0) {
                    GREATER_GREATER269_tree = (XQDTCommonTree)adaptor.create(GREATER_GREATER269);
                    adaptor.addChild(root_0, GREATER_GREATER269_tree);
                }

            }
            break;

            }
            retval.stop = input.LT(-1);

            if (state.backtracking == 0) {

                retval.tree = (XQDTCommonTree)adaptor.rulePostProcessing(root_0);
                adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        } catch (RecognitionException re) {
            reportError(re);
            recover(input, re);
            retval.tree = (XQDTCommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        } finally {
        }
        return retval;
    }

    // $ANTLR end "p_NodeComp"

    public static class p_ValidateExpr_return extends ParserRuleReturnScope {
        XQDTCommonTree tree;

        public Object getTree() {
            return tree;
        }
    };

    // $ANTLR start "p_ValidateExpr"
    // XQueryParser.g:713:1: p_ValidateExpr : k= VALIDATE ( p_ValidationMode | k= TYPE p_TypeName )? LBRACKET p_Expr[true,true] RBRACKET ;
    public final XQueryParser.p_ValidateExpr_return p_ValidateExpr() throws RecognitionException {
        XQueryParser.p_ValidateExpr_return retval = new XQueryParser.p_ValidateExpr_return();
        retval.start = input.LT(1);

        XQDTCommonTree root_0 = null;

        CommonToken k = null;
        CommonToken LBRACKET272 = null;
        CommonToken RBRACKET274 = null;
        XQueryParser.p_ValidationMode_return p_ValidationMode270 = null;

        XQueryParser.p_TypeName_return p_TypeName271 = null;

        XQueryParser.p_Expr_return p_Expr273 = null;

        XQDTCommonTree k_tree = null;
        XQDTCommonTree LBRACKET272_tree = null;
        XQDTCommonTree RBRACKET274_tree = null;

        try {
            // XQueryParser.g:714:9: (k= VALIDATE ( p_ValidationMode | k= TYPE p_TypeName )? LBRACKET p_Expr[true,true] RBRACKET )
            // XQueryParser.g:714:11: k= VALIDATE ( p_ValidationMode | k= TYPE p_TypeName )? LBRACKET p_Expr[true,true] RBRACKET
            {
                root_0 = (XQDTCommonTree)adaptor.nil();

                k = (CommonToken)match(input, VALIDATE, FOLLOW_VALIDATE_in_p_ValidateExpr6318);
                if (state.failed) {
                    return retval;
                }
                if (state.backtracking == 0) {
                    k_tree = (XQDTCommonTree)adaptor.create(k);
                    adaptor.addChild(root_0, k_tree);
                }
                if (state.backtracking == 0) {
                    ak(k);
                }
                // XQueryParser.g:714:32: ( p_ValidationMode | k= TYPE p_TypeName )?
                int alt111 = 3;
                int LA111_0 = input.LA(1);

                if ((LA111_0 == LAX || LA111_0 == STRICT)) {
                    alt111 = 1;
                } else if ((LA111_0 == TYPE)) {
                    alt111 = 2;
                }
                switch (alt111) {
                case 1:
                    // XQueryParser.g:714:34: p_ValidationMode
                {
                    pushFollow(FOLLOW_p_ValidationMode_in_p_ValidateExpr6324);
                    p_ValidationMode270 = p_ValidationMode();

                    state._fsp--;
                    if (state.failed) {
                        return retval;
                    }
                    if (state.backtracking == 0) {
                        adaptor.addChild(root_0, p_ValidationMode270.getTree());
                    }

                }
                    break;
                case 2:
                    // XQueryParser.g:714:53: k= TYPE p_TypeName
                {
                    k = (CommonToken)match(input, TYPE, FOLLOW_TYPE_in_p_ValidateExpr6330);
                    if (state.failed) {
                        return retval;
                    }
                    if (state.backtracking == 0) {
                        k_tree = (XQDTCommonTree)adaptor.create(k);
                        adaptor.addChild(root_0, k_tree);
                    }
                    if (state.backtracking == 0) {
                        ak(k);
                    }
                    pushFollow(FOLLOW_p_TypeName_in_p_ValidateExpr6334);
                    p_TypeName271 = p_TypeName();

                    state._fsp--;
                    if (state.failed) {
                        return retval;
                    }
                    if (state.backtracking == 0) {
                        adaptor.addChild(root_0, p_TypeName271.getTree());
                    }

                }
                    break;

                }

                LBRACKET272 = (CommonToken)match(input, LBRACKET, FOLLOW_LBRACKET_in_p_ValidateExpr6339);
                if (state.failed) {
                    return retval;
                }
                if (state.backtracking == 0) {
                    LBRACKET272_tree = (XQDTCommonTree)adaptor.create(LBRACKET272);
                    adaptor.addChild(root_0, LBRACKET272_tree);
                }
                pushFollow(FOLLOW_p_Expr_in_p_ValidateExpr6341);
                p_Expr273 = p_Expr(true, true);

                state._fsp--;
                if (state.failed) {
                    return retval;
                }
                if (state.backtracking == 0) {
                    adaptor.addChild(root_0, p_Expr273.getTree());
                }
                RBRACKET274 = (CommonToken)match(input, RBRACKET, FOLLOW_RBRACKET_in_p_ValidateExpr6344);
                if (state.failed) {
                    return retval;
                }
                if (state.backtracking == 0) {
                    RBRACKET274_tree = (XQDTCommonTree)adaptor.create(RBRACKET274);
                    adaptor.addChild(root_0, RBRACKET274_tree);
                }

            }

            retval.stop = input.LT(-1);

            if (state.backtracking == 0) {

                retval.tree = (XQDTCommonTree)adaptor.rulePostProcessing(root_0);
                adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        } catch (RecognitionException re) {
            reportError(re);
            recover(input, re);
            retval.tree = (XQDTCommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        } finally {
        }
        return retval;
    }

    // $ANTLR end "p_ValidateExpr"

    public static class p_ValidationMode_return extends ParserRuleReturnScope {
        XQDTCommonTree tree;

        public Object getTree() {
            return tree;
        }
    };

    // $ANTLR start "p_ValidationMode"
    // XQueryParser.g:718:1: p_ValidationMode : (k= LAX | k= STRICT ) ;
    public final XQueryParser.p_ValidationMode_return p_ValidationMode() throws RecognitionException {
        XQueryParser.p_ValidationMode_return retval = new XQueryParser.p_ValidationMode_return();
        retval.start = input.LT(1);

        XQDTCommonTree root_0 = null;

        CommonToken k = null;

        XQDTCommonTree k_tree = null;

        try {
            // XQueryParser.g:719:9: ( (k= LAX | k= STRICT ) )
            // XQueryParser.g:719:11: (k= LAX | k= STRICT )
            {
                root_0 = (XQDTCommonTree)adaptor.nil();

                // XQueryParser.g:719:11: (k= LAX | k= STRICT )
                int alt112 = 2;
                int LA112_0 = input.LA(1);

                if ((LA112_0 == LAX)) {
                    alt112 = 1;
                } else if ((LA112_0 == STRICT)) {
                    alt112 = 2;
                } else {
                    if (state.backtracking > 0) {
                        state.failed = true;
                        return retval;
                    }
                    NoViableAltException nvae = new NoViableAltException("", 112, 0, input);

                    throw nvae;
                }
                switch (alt112) {
                case 1:
                    // XQueryParser.g:719:12: k= LAX
                {
                    k = (CommonToken)match(input, LAX, FOLLOW_LAX_in_p_ValidationMode6373);
                    if (state.failed) {
                        return retval;
                    }
                    if (state.backtracking == 0) {
                        k_tree = (XQDTCommonTree)adaptor.create(k);
                        adaptor.addChild(root_0, k_tree);
                    }

                }
                    break;
                case 2:
                    // XQueryParser.g:719:20: k= STRICT
                {
                    k = (CommonToken)match(input, STRICT, FOLLOW_STRICT_in_p_ValidationMode6379);
                    if (state.failed) {
                        return retval;
                    }
                    if (state.backtracking == 0) {
                        k_tree = (XQDTCommonTree)adaptor.create(k);
                        adaptor.addChild(root_0, k_tree);
                    }

                }
                    break;

                }

                if (state.backtracking == 0) {
                    ak(k);
                }

            }

            retval.stop = input.LT(-1);

            if (state.backtracking == 0) {

                retval.tree = (XQDTCommonTree)adaptor.rulePostProcessing(root_0);
                adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        } catch (RecognitionException re) {
            reportError(re);
            recover(input, re);
            retval.tree = (XQDTCommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        } finally {
        }
        return retval;
    }

    // $ANTLR end "p_ValidationMode"

    public static class p_ExtensionExpr_return extends ParserRuleReturnScope {
        XQDTCommonTree tree;

        public Object getTree() {
            return tree;
        }
    };

    // $ANTLR start "p_ExtensionExpr"
    // XQueryParser.g:723:1: p_ExtensionExpr : ( L_Pragma )+ LBRACKET ( p_Expr[true,true] )? RBRACKET ;
    public final XQueryParser.p_ExtensionExpr_return p_ExtensionExpr() throws RecognitionException {
        XQueryParser.p_ExtensionExpr_return retval = new XQueryParser.p_ExtensionExpr_return();
        retval.start = input.LT(1);

        XQDTCommonTree root_0 = null;

        CommonToken L_Pragma275 = null;
        CommonToken LBRACKET276 = null;
        CommonToken RBRACKET278 = null;
        XQueryParser.p_Expr_return p_Expr277 = null;

        XQDTCommonTree L_Pragma275_tree = null;
        XQDTCommonTree LBRACKET276_tree = null;
        XQDTCommonTree RBRACKET278_tree = null;

        try {
            // XQueryParser.g:724:9: ( ( L_Pragma )+ LBRACKET ( p_Expr[true,true] )? RBRACKET )
            // XQueryParser.g:724:11: ( L_Pragma )+ LBRACKET ( p_Expr[true,true] )? RBRACKET
            {
                root_0 = (XQDTCommonTree)adaptor.nil();

                // XQueryParser.g:724:11: ( L_Pragma )+
                int cnt113 = 0;
                loop113: do {
                    int alt113 = 2;
                    int LA113_0 = input.LA(1);

                    if ((LA113_0 == L_Pragma)) {
                        alt113 = 1;
                    }

                    switch (alt113) {
                    case 1:
                        // XQueryParser.g:724:11: L_Pragma
                    {
                        L_Pragma275 = (CommonToken)match(input, L_Pragma, FOLLOW_L_Pragma_in_p_ExtensionExpr6408);
                        if (state.failed) {
                            return retval;
                        }
                        if (state.backtracking == 0) {
                            L_Pragma275_tree = (XQDTCommonTree)adaptor.create(L_Pragma275);
                            adaptor.addChild(root_0, L_Pragma275_tree);
                        }

                    }
                    break;

                    default:
                        if (cnt113 >= 1) {
                            break loop113;
                        }
                        if (state.backtracking > 0) {
                            state.failed = true;
                            return retval;
                        }
                        EarlyExitException eee = new EarlyExitException(113, input);
                        throw eee;
                    }
                    cnt113++;
                } while (true);

                LBRACKET276 = (CommonToken)match(input, LBRACKET, FOLLOW_LBRACKET_in_p_ExtensionExpr6411);
                if (state.failed) {
                    return retval;
                }
                if (state.backtracking == 0) {
                    LBRACKET276_tree = (XQDTCommonTree)adaptor.create(LBRACKET276);
                    adaptor.addChild(root_0, LBRACKET276_tree);
                }
                // XQueryParser.g:724:30: ( p_Expr[true,true] )?
                int alt114 = 2;
                int LA114_0 = input.LA(1);

                if (((LA114_0 >= ANCESTOR && LA114_0 <= QUOT_ER) || LA114_0 == LPAREN
                        || (LA114_0 >= DOLLAR && LA114_0 <= LBRACKET) || (LA114_0 >= STAR && LA114_0 <= SMALLER)
                        || (LA114_0 >= SLASH && LA114_0 <= DOT_DOT) || LA114_0 == ATTR_SIGN
                        || (LA114_0 >= APOS && LA114_0 <= QUOT) || LA114_0 == L_NCName
                        || (LA114_0 >= L_Pragma && LA114_0 <= L_DoubleLiteral) || LA114_0 == EXPLICITLY)) {
                    alt114 = 1;
                }
                switch (alt114) {
                case 1:
                    // XQueryParser.g:724:30: p_Expr[true,true]
                {
                    pushFollow(FOLLOW_p_Expr_in_p_ExtensionExpr6413);
                    p_Expr277 = p_Expr(true, true);

                    state._fsp--;
                    if (state.failed) {
                        return retval;
                    }
                    if (state.backtracking == 0) {
                        adaptor.addChild(root_0, p_Expr277.getTree());
                    }

                }
                    break;

                }

                RBRACKET278 = (CommonToken)match(input, RBRACKET, FOLLOW_RBRACKET_in_p_ExtensionExpr6417);
                if (state.failed) {
                    return retval;
                }
                if (state.backtracking == 0) {
                    RBRACKET278_tree = (XQDTCommonTree)adaptor.create(RBRACKET278);
                    adaptor.addChild(root_0, RBRACKET278_tree);
                }

            }

            retval.stop = input.LT(-1);

            if (state.backtracking == 0) {

                retval.tree = (XQDTCommonTree)adaptor.rulePostProcessing(root_0);
                adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        } catch (RecognitionException re) {
            reportError(re);
            recover(input, re);
            retval.tree = (XQDTCommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        } finally {
        }
        return retval;
    }

    // $ANTLR end "p_ExtensionExpr"

    public static class p_PathExpr_return extends ParserRuleReturnScope {
        XQDTCommonTree tree;

        public Object getTree() {
            return tree;
        }
    };

    // $ANTLR start "p_PathExpr"
    // XQueryParser.g:736:1: p_PathExpr : ( ( SLASH p_RelativePathExpr )=> ( SLASH p_RelativePathExpr ) | SLASH | SLASH_SLASH p_RelativePathExpr | p_RelativePathExpr );
    public final XQueryParser.p_PathExpr_return p_PathExpr() throws RecognitionException {
        XQueryParser.p_PathExpr_return retval = new XQueryParser.p_PathExpr_return();
        retval.start = input.LT(1);

        XQDTCommonTree root_0 = null;

        CommonToken SLASH279 = null;
        CommonToken SLASH281 = null;
        CommonToken SLASH_SLASH282 = null;
        XQueryParser.p_RelativePathExpr_return p_RelativePathExpr280 = null;

        XQueryParser.p_RelativePathExpr_return p_RelativePathExpr283 = null;

        XQueryParser.p_RelativePathExpr_return p_RelativePathExpr284 = null;

        XQDTCommonTree SLASH279_tree = null;
        XQDTCommonTree SLASH281_tree = null;
        XQDTCommonTree SLASH_SLASH282_tree = null;

        try {
            // XQueryParser.g:737:9: ( ( SLASH p_RelativePathExpr )=> ( SLASH p_RelativePathExpr ) | SLASH | SLASH_SLASH p_RelativePathExpr | p_RelativePathExpr )
            int alt115 = 4;
            alt115 = dfa115.predict(input);
            switch (alt115) {
            case 1:
                // XQueryParser.g:737:11: ( SLASH p_RelativePathExpr )=> ( SLASH p_RelativePathExpr )
            {
                root_0 = (XQDTCommonTree)adaptor.nil();

                // XQueryParser.g:737:41: ( SLASH p_RelativePathExpr )
                // XQueryParser.g:737:42: SLASH p_RelativePathExpr
                {
                    SLASH279 = (CommonToken)match(input, SLASH, FOLLOW_SLASH_in_p_PathExpr6460);
                    if (state.failed) {
                        return retval;
                    }
                    if (state.backtracking == 0) {
                        SLASH279_tree = (XQDTCommonTree)adaptor.create(SLASH279);
                        adaptor.addChild(root_0, SLASH279_tree);
                    }
                    pushFollow(FOLLOW_p_RelativePathExpr_in_p_PathExpr6462);
                    p_RelativePathExpr280 = p_RelativePathExpr();

                    state._fsp--;
                    if (state.failed) {
                        return retval;
                    }
                    if (state.backtracking == 0) {
                        adaptor.addChild(root_0, p_RelativePathExpr280.getTree());
                    }

                }

            }
            break;
            case 2:
                // XQueryParser.g:738:11: SLASH
            {
                root_0 = (XQDTCommonTree)adaptor.nil();

                SLASH281 = (CommonToken)match(input, SLASH, FOLLOW_SLASH_in_p_PathExpr6475);
                if (state.failed) {
                    return retval;
                }
                if (state.backtracking == 0) {
                    SLASH281_tree = (XQDTCommonTree)adaptor.create(SLASH281);
                    adaptor.addChild(root_0, SLASH281_tree);
                }

            }
            break;
            case 3:
                // XQueryParser.g:739:11: SLASH_SLASH p_RelativePathExpr
            {
                root_0 = (XQDTCommonTree)adaptor.nil();

                SLASH_SLASH282 = (CommonToken)match(input, SLASH_SLASH, FOLLOW_SLASH_SLASH_in_p_PathExpr6487);
                if (state.failed) {
                    return retval;
                }
                if (state.backtracking == 0) {
                    SLASH_SLASH282_tree = (XQDTCommonTree)adaptor.create(SLASH_SLASH282);
                    adaptor.addChild(root_0, SLASH_SLASH282_tree);
                }
                pushFollow(FOLLOW_p_RelativePathExpr_in_p_PathExpr6489);
                p_RelativePathExpr283 = p_RelativePathExpr();

                state._fsp--;
                if (state.failed) {
                    return retval;
                }
                if (state.backtracking == 0) {
                    adaptor.addChild(root_0, p_RelativePathExpr283.getTree());
                }

            }
            break;
            case 4:
                // XQueryParser.g:740:11: p_RelativePathExpr
            {
                root_0 = (XQDTCommonTree)adaptor.nil();

                pushFollow(FOLLOW_p_RelativePathExpr_in_p_PathExpr6501);
                p_RelativePathExpr284 = p_RelativePathExpr();

                state._fsp--;
                if (state.failed) {
                    return retval;
                }
                if (state.backtracking == 0) {
                    adaptor.addChild(root_0, p_RelativePathExpr284.getTree());
                }

            }
            break;

            }
            retval.stop = input.LT(-1);

            if (state.backtracking == 0) {

                retval.tree = (XQDTCommonTree)adaptor.rulePostProcessing(root_0);
                adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        } catch (RecognitionException re) {
            reportError(re);
            recover(input, re);
            retval.tree = (XQDTCommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        } finally {
        }
        return retval;
    }

    // $ANTLR end "p_PathExpr"

    public static class p_RelativePathExpr_return extends ParserRuleReturnScope {
        XQDTCommonTree tree;

        public Object getTree() {
            return tree;
        }
    };

    // $ANTLR start "p_RelativePathExpr"
    // XQueryParser.g:744:1: p_RelativePathExpr : p_StepExpr ( ( SLASH | SLASH_SLASH ) p_StepExpr )* ;
    public final XQueryParser.p_RelativePathExpr_return p_RelativePathExpr() throws RecognitionException {
        XQueryParser.p_RelativePathExpr_return retval = new XQueryParser.p_RelativePathExpr_return();
        retval.start = input.LT(1);

        XQDTCommonTree root_0 = null;

        CommonToken set286 = null;
        XQueryParser.p_StepExpr_return p_StepExpr285 = null;

        XQueryParser.p_StepExpr_return p_StepExpr287 = null;

        XQDTCommonTree set286_tree = null;

        try {
            // XQueryParser.g:745:9: ( p_StepExpr ( ( SLASH | SLASH_SLASH ) p_StepExpr )* )
            // XQueryParser.g:745:11: p_StepExpr ( ( SLASH | SLASH_SLASH ) p_StepExpr )*
            {
                root_0 = (XQDTCommonTree)adaptor.nil();

                pushFollow(FOLLOW_p_StepExpr_in_p_RelativePathExpr6529);
                p_StepExpr285 = p_StepExpr();

                state._fsp--;
                if (state.failed) {
                    return retval;
                }
                if (state.backtracking == 0) {
                    adaptor.addChild(root_0, p_StepExpr285.getTree());
                }
                // XQueryParser.g:745:22: ( ( SLASH | SLASH_SLASH ) p_StepExpr )*
                loop116: do {
                    int alt116 = 2;
                    int LA116_0 = input.LA(1);

                    if (((LA116_0 >= SLASH && LA116_0 <= SLASH_SLASH))) {
                        alt116 = 1;
                    }

                    switch (alt116) {
                    case 1:
                        // XQueryParser.g:745:23: ( SLASH | SLASH_SLASH ) p_StepExpr
                    {
                        set286 = (CommonToken)input.LT(1);
                        if ((input.LA(1) >= SLASH && input.LA(1) <= SLASH_SLASH)) {
                            input.consume();
                            if (state.backtracking == 0) {
                                adaptor.addChild(root_0, adaptor.create(set286));
                            }
                            state.errorRecovery = false;
                            state.failed = false;
                        } else {
                            if (state.backtracking > 0) {
                                state.failed = true;
                                return retval;
                            }
                            MismatchedSetException mse = new MismatchedSetException(null, input);
                            throw mse;
                        }

                        pushFollow(FOLLOW_p_StepExpr_in_p_RelativePathExpr6540);
                        p_StepExpr287 = p_StepExpr();

                        state._fsp--;
                        if (state.failed) {
                            return retval;
                        }
                        if (state.backtracking == 0) {
                            adaptor.addChild(root_0, p_StepExpr287.getTree());
                        }

                    }
                    break;

                    default:
                        break loop116;
                    }
                } while (true);

            }

            retval.stop = input.LT(-1);

            if (state.backtracking == 0) {

                retval.tree = (XQDTCommonTree)adaptor.rulePostProcessing(root_0);
                adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        } catch (RecognitionException re) {
            reportError(re);
            recover(input, re);
            retval.tree = (XQDTCommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        } finally {
        }
        return retval;
    }

    // $ANTLR end "p_RelativePathExpr"

    public static class p_StepExpr_return extends ParserRuleReturnScope {
        XQDTCommonTree tree;

        public Object getTree() {
            return tree;
        }
    };

    // $ANTLR start "p_StepExpr"
    // XQueryParser.g:749:1: p_StepExpr : ( ( LBRACKET | LPAREN | SMALLER | QUOT | APOS | DOLLAR )=> p_PostfixExpr | ( ( ( ELEMENT | ATTRIBUTE ) ( p_QName )? LBRACKET ) | ( ( NAMESPACE | PROCESSING_INSTRUCTION ) ( p_NCName )? LBRACKET ) | ( ( DOCUMENT | TEXT | COMMENT ) LBRACKET ) )=> p_PostfixExpr | ( p_KindTest )=> p_AxisStep | ( p_QName LPAREN )=> p_PostfixExpr | ( p_PrimaryExpr )=> p_PostfixExpr | p_AxisStep );
    public final XQueryParser.p_StepExpr_return p_StepExpr() throws RecognitionException {
        XQueryParser.p_StepExpr_return retval = new XQueryParser.p_StepExpr_return();
        retval.start = input.LT(1);

        XQDTCommonTree root_0 = null;

        XQueryParser.p_PostfixExpr_return p_PostfixExpr288 = null;

        XQueryParser.p_PostfixExpr_return p_PostfixExpr289 = null;

        XQueryParser.p_AxisStep_return p_AxisStep290 = null;

        XQueryParser.p_PostfixExpr_return p_PostfixExpr291 = null;

        XQueryParser.p_PostfixExpr_return p_PostfixExpr292 = null;

        XQueryParser.p_AxisStep_return p_AxisStep293 = null;

        try {
            // XQueryParser.g:750:9: ( ( LBRACKET | LPAREN | SMALLER | QUOT | APOS | DOLLAR )=> p_PostfixExpr | ( ( ( ELEMENT | ATTRIBUTE ) ( p_QName )? LBRACKET ) | ( ( NAMESPACE | PROCESSING_INSTRUCTION ) ( p_NCName )? LBRACKET ) | ( ( DOCUMENT | TEXT | COMMENT ) LBRACKET ) )=> p_PostfixExpr | ( p_KindTest )=> p_AxisStep | ( p_QName LPAREN )=> p_PostfixExpr | ( p_PrimaryExpr )=> p_PostfixExpr | p_AxisStep )
            int alt117 = 6;
            alt117 = dfa117.predict(input);
            switch (alt117) {
            case 1:
                // XQueryParser.g:750:11: ( LBRACKET | LPAREN | SMALLER | QUOT | APOS | DOLLAR )=> p_PostfixExpr
            {
                root_0 = (XQDTCommonTree)adaptor.nil();

                pushFollow(FOLLOW_p_PostfixExpr_in_p_StepExpr6594);
                p_PostfixExpr288 = p_PostfixExpr();

                state._fsp--;
                if (state.failed) {
                    return retval;
                }
                if (state.backtracking == 0) {
                    adaptor.addChild(root_0, p_PostfixExpr288.getTree());
                }

            }
            break;
            case 2:
                // XQueryParser.g:751:11: ( ( ( ELEMENT | ATTRIBUTE ) ( p_QName )? LBRACKET ) | ( ( NAMESPACE | PROCESSING_INSTRUCTION ) ( p_NCName )? LBRACKET ) | ( ( DOCUMENT | TEXT | COMMENT ) LBRACKET ) )=> p_PostfixExpr
            {
                root_0 = (XQDTCommonTree)adaptor.nil();

                pushFollow(FOLLOW_p_PostfixExpr_in_p_StepExpr6708);
                p_PostfixExpr289 = p_PostfixExpr();

                state._fsp--;
                if (state.failed) {
                    return retval;
                }
                if (state.backtracking == 0) {
                    adaptor.addChild(root_0, p_PostfixExpr289.getTree());
                }

            }
            break;
            case 3:
                // XQueryParser.g:756:11: ( p_KindTest )=> p_AxisStep
            {
                root_0 = (XQDTCommonTree)adaptor.nil();

                pushFollow(FOLLOW_p_AxisStep_in_p_StepExpr6726);
                p_AxisStep290 = p_AxisStep();

                state._fsp--;
                if (state.failed) {
                    return retval;
                }
                if (state.backtracking == 0) {
                    adaptor.addChild(root_0, p_AxisStep290.getTree());
                }

            }
            break;
            case 4:
                // XQueryParser.g:757:11: ( p_QName LPAREN )=> p_PostfixExpr
            {
                root_0 = (XQDTCommonTree)adaptor.nil();

                pushFollow(FOLLOW_p_PostfixExpr_in_p_StepExpr6747);
                p_PostfixExpr291 = p_PostfixExpr();

                state._fsp--;
                if (state.failed) {
                    return retval;
                }
                if (state.backtracking == 0) {
                    adaptor.addChild(root_0, p_PostfixExpr291.getTree());
                }

            }
            break;
            case 5:
                // XQueryParser.g:758:11: ( p_PrimaryExpr )=> p_PostfixExpr
            {
                root_0 = (XQDTCommonTree)adaptor.nil();

                pushFollow(FOLLOW_p_PostfixExpr_in_p_StepExpr6765);
                p_PostfixExpr292 = p_PostfixExpr();

                state._fsp--;
                if (state.failed) {
                    return retval;
                }
                if (state.backtracking == 0) {
                    adaptor.addChild(root_0, p_PostfixExpr292.getTree());
                }

            }
            break;
            case 6:
                // XQueryParser.g:759:11: p_AxisStep
            {
                root_0 = (XQDTCommonTree)adaptor.nil();

                pushFollow(FOLLOW_p_AxisStep_in_p_StepExpr6777);
                p_AxisStep293 = p_AxisStep();

                state._fsp--;
                if (state.failed) {
                    return retval;
                }
                if (state.backtracking == 0) {
                    adaptor.addChild(root_0, p_AxisStep293.getTree());
                }

            }
            break;

            }
            retval.stop = input.LT(-1);

            if (state.backtracking == 0) {

                retval.tree = (XQDTCommonTree)adaptor.rulePostProcessing(root_0);
                adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        } catch (RecognitionException re) {
            reportError(re);
            recover(input, re);
            retval.tree = (XQDTCommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        } finally {
        }
        return retval;
    }

    // $ANTLR end "p_StepExpr"

    public static class p_AxisStep_return extends ParserRuleReturnScope {
        XQDTCommonTree tree;

        public Object getTree() {
            return tree;
        }
    };

    // $ANTLR start "p_AxisStep"
    // XQueryParser.g:763:1: p_AxisStep : ( p_ReverseStep | p_ForwardStep ) p_PredicateList ;
    public final XQueryParser.p_AxisStep_return p_AxisStep() throws RecognitionException {
        XQueryParser.p_AxisStep_return retval = new XQueryParser.p_AxisStep_return();
        retval.start = input.LT(1);

        XQDTCommonTree root_0 = null;

        XQueryParser.p_ReverseStep_return p_ReverseStep294 = null;

        XQueryParser.p_ForwardStep_return p_ForwardStep295 = null;

        XQueryParser.p_PredicateList_return p_PredicateList296 = null;

        try {
            // XQueryParser.g:764:9: ( ( p_ReverseStep | p_ForwardStep ) p_PredicateList )
            // XQueryParser.g:764:11: ( p_ReverseStep | p_ForwardStep ) p_PredicateList
            {
                root_0 = (XQDTCommonTree)adaptor.nil();

                // XQueryParser.g:764:11: ( p_ReverseStep | p_ForwardStep )
                int alt118 = 2;
                switch (input.LA(1)) {
                case PARENT: {
                    int LA118_1 = input.LA(2);

                    if ((LA118_1 == COLON_COLON)) {
                        alt118 = 1;
                    } else if ((LA118_1 == EOF || (LA118_1 >= AND && LA118_1 <= ASCENDING)
                            || (LA118_1 >= BY && LA118_1 <= CASTABLE) || LA118_1 == COLLATION || LA118_1 == DEFAULT
                            || (LA118_1 >= DESCENDING && LA118_1 <= DIV) || LA118_1 == EMPTY || LA118_1 == EQ
                            || LA118_1 == EXCEPT || LA118_1 == FOR || LA118_1 == GE
                            || (LA118_1 >= GT && LA118_1 <= IDIV) || (LA118_1 >= INSTANCE && LA118_1 <= IS)
                            || LA118_1 == LE || (LA118_1 >= LET && LA118_1 <= MOD) || LA118_1 == NE
                            || (LA118_1 >= OR && LA118_1 <= ORDER) || (LA118_1 >= RETURN && LA118_1 <= SATISFIES)
                            || LA118_1 == STABLE || (LA118_1 >= TO && LA118_1 <= TREAT) || LA118_1 == UNION
                            || LA118_1 == WHERE || LA118_1 == COUNT || (LA118_1 >= END && LA118_1 <= GROUP)
                            || LA118_1 == ONLY || LA118_1 == START || (LA118_1 >= AFTER && LA118_1 <= BEFORE)
                            || LA118_1 == INTO || LA118_1 == MODIFY || LA118_1 == WITH || LA118_1 == CONTAINS
                            || LA118_1 == PARAGRAPHS || LA118_1 == SENTENCES || LA118_1 == TIMES || LA118_1 == WORDS
                            || LA118_1 == CONCAT || LA118_1 == RPAREN || (LA118_1 >= RBRACKET && LA118_1 <= EQUAL)
                            || LA118_1 == NOTEQUAL || LA118_1 == COMMA || (LA118_1 >= STAR && LA118_1 <= SLASH_SLASH)
                            || LA118_1 == COLON || (LA118_1 >= SEMICOLON && LA118_1 <= VBAR))) {
                        alt118 = 2;
                    } else {
                        if (state.backtracking > 0) {
                            state.failed = true;
                            return retval;
                        }
                        NoViableAltException nvae = new NoViableAltException("", 118, 1, input);

                        throw nvae;
                    }
                }
                break;
                case ANCESTOR: {
                    int LA118_2 = input.LA(2);

                    if ((LA118_2 == COLON_COLON)) {
                        alt118 = 1;
                    } else if ((LA118_2 == EOF || (LA118_2 >= AND && LA118_2 <= ASCENDING)
                            || (LA118_2 >= BY && LA118_2 <= CASTABLE) || LA118_2 == COLLATION || LA118_2 == DEFAULT
                            || (LA118_2 >= DESCENDING && LA118_2 <= DIV) || LA118_2 == EMPTY || LA118_2 == EQ
                            || LA118_2 == EXCEPT || LA118_2 == FOR || LA118_2 == GE
                            || (LA118_2 >= GT && LA118_2 <= IDIV) || (LA118_2 >= INSTANCE && LA118_2 <= IS)
                            || LA118_2 == LE || (LA118_2 >= LET && LA118_2 <= MOD) || LA118_2 == NE
                            || (LA118_2 >= OR && LA118_2 <= ORDER) || (LA118_2 >= RETURN && LA118_2 <= SATISFIES)
                            || LA118_2 == STABLE || (LA118_2 >= TO && LA118_2 <= TREAT) || LA118_2 == UNION
                            || LA118_2 == WHERE || LA118_2 == COUNT || (LA118_2 >= END && LA118_2 <= GROUP)
                            || LA118_2 == ONLY || LA118_2 == START || (LA118_2 >= AFTER && LA118_2 <= BEFORE)
                            || LA118_2 == INTO || LA118_2 == MODIFY || LA118_2 == WITH || LA118_2 == CONTAINS
                            || LA118_2 == PARAGRAPHS || LA118_2 == SENTENCES || LA118_2 == TIMES || LA118_2 == WORDS
                            || LA118_2 == CONCAT || LA118_2 == RPAREN || (LA118_2 >= RBRACKET && LA118_2 <= EQUAL)
                            || LA118_2 == NOTEQUAL || LA118_2 == COMMA || (LA118_2 >= STAR && LA118_2 <= SLASH_SLASH)
                            || LA118_2 == COLON || (LA118_2 >= SEMICOLON && LA118_2 <= VBAR))) {
                        alt118 = 2;
                    } else {
                        if (state.backtracking > 0) {
                            state.failed = true;
                            return retval;
                        }
                        NoViableAltException nvae = new NoViableAltException("", 118, 2, input);

                        throw nvae;
                    }
                }
                break;
                case PRECEDING_SIBLING: {
                    int LA118_3 = input.LA(2);

                    if ((LA118_3 == COLON_COLON)) {
                        alt118 = 1;
                    } else if ((LA118_3 == EOF || (LA118_3 >= AND && LA118_3 <= ASCENDING)
                            || (LA118_3 >= BY && LA118_3 <= CASTABLE) || LA118_3 == COLLATION || LA118_3 == DEFAULT
                            || (LA118_3 >= DESCENDING && LA118_3 <= DIV) || LA118_3 == EMPTY || LA118_3 == EQ
                            || LA118_3 == EXCEPT || LA118_3 == FOR || LA118_3 == GE
                            || (LA118_3 >= GT && LA118_3 <= IDIV) || (LA118_3 >= INSTANCE && LA118_3 <= IS)
                            || LA118_3 == LE || (LA118_3 >= LET && LA118_3 <= MOD) || LA118_3 == NE
                            || (LA118_3 >= OR && LA118_3 <= ORDER) || (LA118_3 >= RETURN && LA118_3 <= SATISFIES)
                            || LA118_3 == STABLE || (LA118_3 >= TO && LA118_3 <= TREAT) || LA118_3 == UNION
                            || LA118_3 == WHERE || LA118_3 == COUNT || (LA118_3 >= END && LA118_3 <= GROUP)
                            || LA118_3 == ONLY || LA118_3 == START || (LA118_3 >= AFTER && LA118_3 <= BEFORE)
                            || LA118_3 == INTO || LA118_3 == MODIFY || LA118_3 == WITH || LA118_3 == CONTAINS
                            || LA118_3 == PARAGRAPHS || LA118_3 == SENTENCES || LA118_3 == TIMES || LA118_3 == WORDS
                            || LA118_3 == CONCAT || LA118_3 == RPAREN || (LA118_3 >= RBRACKET && LA118_3 <= EQUAL)
                            || LA118_3 == NOTEQUAL || LA118_3 == COMMA || (LA118_3 >= STAR && LA118_3 <= SLASH_SLASH)
                            || LA118_3 == COLON || (LA118_3 >= SEMICOLON && LA118_3 <= VBAR))) {
                        alt118 = 2;
                    } else {
                        if (state.backtracking > 0) {
                            state.failed = true;
                            return retval;
                        }
                        NoViableAltException nvae = new NoViableAltException("", 118, 3, input);

                        throw nvae;
                    }
                }
                break;
                case PRECEDING: {
                    int LA118_4 = input.LA(2);

                    if ((LA118_4 == COLON_COLON)) {
                        alt118 = 1;
                    } else if ((LA118_4 == EOF || (LA118_4 >= AND && LA118_4 <= ASCENDING)
                            || (LA118_4 >= BY && LA118_4 <= CASTABLE) || LA118_4 == COLLATION || LA118_4 == DEFAULT
                            || (LA118_4 >= DESCENDING && LA118_4 <= DIV) || LA118_4 == EMPTY || LA118_4 == EQ
                            || LA118_4 == EXCEPT || LA118_4 == FOR || LA118_4 == GE
                            || (LA118_4 >= GT && LA118_4 <= IDIV) || (LA118_4 >= INSTANCE && LA118_4 <= IS)
                            || LA118_4 == LE || (LA118_4 >= LET && LA118_4 <= MOD) || LA118_4 == NE
                            || (LA118_4 >= OR && LA118_4 <= ORDER) || (LA118_4 >= RETURN && LA118_4 <= SATISFIES)
                            || LA118_4 == STABLE || (LA118_4 >= TO && LA118_4 <= TREAT) || LA118_4 == UNION
                            || LA118_4 == WHERE || LA118_4 == COUNT || (LA118_4 >= END && LA118_4 <= GROUP)
                            || LA118_4 == ONLY || LA118_4 == START || (LA118_4 >= AFTER && LA118_4 <= BEFORE)
                            || LA118_4 == INTO || LA118_4 == MODIFY || LA118_4 == WITH || LA118_4 == CONTAINS
                            || LA118_4 == PARAGRAPHS || LA118_4 == SENTENCES || LA118_4 == TIMES || LA118_4 == WORDS
                            || LA118_4 == CONCAT || LA118_4 == RPAREN || (LA118_4 >= RBRACKET && LA118_4 <= EQUAL)
                            || LA118_4 == NOTEQUAL || LA118_4 == COMMA || (LA118_4 >= STAR && LA118_4 <= SLASH_SLASH)
                            || LA118_4 == COLON || (LA118_4 >= SEMICOLON && LA118_4 <= VBAR))) {
                        alt118 = 2;
                    } else {
                        if (state.backtracking > 0) {
                            state.failed = true;
                            return retval;
                        }
                        NoViableAltException nvae = new NoViableAltException("", 118, 4, input);

                        throw nvae;
                    }
                }
                break;
                case ANCESTOR_OR_SELF: {
                    int LA118_5 = input.LA(2);

                    if ((LA118_5 == COLON_COLON)) {
                        alt118 = 1;
                    } else if ((LA118_5 == EOF || (LA118_5 >= AND && LA118_5 <= ASCENDING)
                            || (LA118_5 >= BY && LA118_5 <= CASTABLE) || LA118_5 == COLLATION || LA118_5 == DEFAULT
                            || (LA118_5 >= DESCENDING && LA118_5 <= DIV) || LA118_5 == EMPTY || LA118_5 == EQ
                            || LA118_5 == EXCEPT || LA118_5 == FOR || LA118_5 == GE
                            || (LA118_5 >= GT && LA118_5 <= IDIV) || (LA118_5 >= INSTANCE && LA118_5 <= IS)
                            || LA118_5 == LE || (LA118_5 >= LET && LA118_5 <= MOD) || LA118_5 == NE
                            || (LA118_5 >= OR && LA118_5 <= ORDER) || (LA118_5 >= RETURN && LA118_5 <= SATISFIES)
                            || LA118_5 == STABLE || (LA118_5 >= TO && LA118_5 <= TREAT) || LA118_5 == UNION
                            || LA118_5 == WHERE || LA118_5 == COUNT || (LA118_5 >= END && LA118_5 <= GROUP)
                            || LA118_5 == ONLY || LA118_5 == START || (LA118_5 >= AFTER && LA118_5 <= BEFORE)
                            || LA118_5 == INTO || LA118_5 == MODIFY || LA118_5 == WITH || LA118_5 == CONTAINS
                            || LA118_5 == PARAGRAPHS || LA118_5 == SENTENCES || LA118_5 == TIMES || LA118_5 == WORDS
                            || LA118_5 == CONCAT || LA118_5 == RPAREN || (LA118_5 >= RBRACKET && LA118_5 <= EQUAL)
                            || LA118_5 == NOTEQUAL || LA118_5 == COMMA || (LA118_5 >= STAR && LA118_5 <= SLASH_SLASH)
                            || LA118_5 == COLON || (LA118_5 >= SEMICOLON && LA118_5 <= VBAR))) {
                        alt118 = 2;
                    } else {
                        if (state.backtracking > 0) {
                            state.failed = true;
                            return retval;
                        }
                        NoViableAltException nvae = new NoViableAltException("", 118, 5, input);

                        throw nvae;
                    }
                }
                break;
                case DOT_DOT: {
                    alt118 = 1;
                }
                break;
                case AND:
                case AS:
                case ASCENDING:
                case AT:
                case ATTRIBUTE:
                case BASE_URI:
                case BOUNDARY_SPACE:
                case BY:
                case CASE:
                case CAST:
                case CASTABLE:
                case CHILD:
                case COLLATION:
                case COMMENT:
                case CONSTRUCTION:
                case COPY_NAMESPACES:
                case DECLARE:
                case DEFAULT:
                case DESCENDANT:
                case DESCENDANT_OR_SELF:
                case DESCENDING:
                case DIV:
                case DOCUMENT:
                case DOCUMENT_NODE:
                case ELEMENT:
                case ELSE:
                case EMPTY:
                case EMPTY_SEQUENCE:
                case ENCODING:
                case EQ:
                case EVERY:
                case EXCEPT:
                case EXTERNAL:
                case FOLLOWING:
                case FOLLOWING_SIBLING:
                case FOR:
                case FUNCTION:
                case GE:
                case GREATEST:
                case GT:
                case IDIV:
                case IF:
                case IMPORT:
                case IN:
                case INHERIT:
                case INSTANCE:
                case INTERSECT:
                case IS:
                case ITEM:
                case LAX:
                case LE:
                case LEAST:
                case LET:
                case LT:
                case MOD:
                case MODULE:
                case NAMESPACE:
                case NE:
                case NO_INHERIT:
                case NO_PRESERVE:
                case NODE:
                case OF:
                case OPTION:
                case OR:
                case ORDER:
                case ORDERED:
                case ORDERING:
                case PRESERVE:
                case PROCESSING_INSTRUCTION:
                case RETURN:
                case SATISFIES:
                case SCHEMA:
                case SCHEMA_ATTRIBUTE:
                case SCHEMA_ELEMENT:
                case SELF:
                case SOME:
                case STABLE:
                case STRICT:
                case STRIP:
                case TEXT:
                case THEN:
                case TO:
                case TREAT:
                case TYPESWITCH:
                case UNION:
                case UNORDERED:
                case VALIDATE:
                case VARIABLE:
                case VERSION:
                case WHERE:
                case XQUERY:
                case ALLOWING:
                case CATCH:
                case CONTEXT:
                case COUNT:
                case DECIMAL_FORMAT:
                case DECIMAL_SEPARATOR:
                case DIGIT:
                case END:
                case GROUP:
                case GROUPING_SEPARATOR:
                case INFINITY:
                case MINUS_SIGN:
                case NAMESPACE_NODE:
                case NAN:
                case NEXT:
                case ONLY:
                case PATTERN_SEPARATOR:
                case PERCENT:
                case PER_MILLE:
                case PREVIOUS:
                case SLIDING:
                case START:
                case SWITCH:
                case TRY:
                case TUMBLING:
                case TYPE:
                case WHEN:
                case WINDOW:
                case ZERO_DIGIT:
                case AFTER:
                case BEFORE:
                case COPY:
                case DELETE:
                case FIRST:
                case INSERT:
                case INTO:
                case LAST:
                case MODIFY:
                case NODES:
                case RENAME:
                case REPLACE:
                case REVALIDATION:
                case SKIP:
                case VALUE:
                case WITH:
                case ALL:
                case ANY:
                case CONTAINS:
                case CONTENT:
                case DIACRITICS:
                case DIFFERENT:
                case DISTANCE:
                case ENTIRE:
                case EXACTLY:
                case FROM:
                case FT_OPTION:
                case FTAND:
                case FTNOT:
                case FTOR:
                case INSENSITIVE:
                case LANGUAGE:
                case LEVELS:
                case LOWERCASE:
                case MOST:
                case NO:
                case NOT:
                case OCCURS:
                case PARAGRAPH:
                case PARAGRAPHS:
                case PHRASE:
                case RELATIONSHIP:
                case SAME:
                case SCORE:
                case SENSITIVE:
                case SENTENCE:
                case SENTENCES:
                case STEMMING:
                case STOP:
                case THESAURUS:
                case TIMES:
                case UPPERCASE:
                case USING:
                case WEIGHT:
                case WILDCARDS:
                case WITHOUT:
                case WORD:
                case WORDS:
                case BREAK:
                case CONTINUE:
                case EXIT:
                case LOOP:
                case RETURNING:
                case WHILE:
                case CHECK:
                case COLLECTION:
                case CONSTRAINT:
                case FOREACH:
                case FOREIGN:
                case INDEX:
                case INTEGRITY:
                case KEY:
                case ON:
                case UNIQUE:
                case BINARY:
                case AMP_ER:
                case APOS_ER:
                case QUOT_ER:
                case STAR:
                case ATTR_SIGN:
                case APOS:
                case QUOT:
                case L_NCName:
                case EXPLICITLY: {
                    alt118 = 2;
                }
                break;
                default:
                    if (state.backtracking > 0) {
                        state.failed = true;
                        return retval;
                    }
                    NoViableAltException nvae = new NoViableAltException("", 118, 0, input);

                    throw nvae;
                }

                switch (alt118) {
                case 1:
                    // XQueryParser.g:764:12: p_ReverseStep
                {
                    pushFollow(FOLLOW_p_ReverseStep_in_p_AxisStep6804);
                    p_ReverseStep294 = p_ReverseStep();

                    state._fsp--;
                    if (state.failed) {
                        return retval;
                    }
                    if (state.backtracking == 0) {
                        adaptor.addChild(root_0, p_ReverseStep294.getTree());
                    }

                }
                    break;
                case 2:
                    // XQueryParser.g:764:28: p_ForwardStep
                {
                    pushFollow(FOLLOW_p_ForwardStep_in_p_AxisStep6808);
                    p_ForwardStep295 = p_ForwardStep();

                    state._fsp--;
                    if (state.failed) {
                        return retval;
                    }
                    if (state.backtracking == 0) {
                        adaptor.addChild(root_0, p_ForwardStep295.getTree());
                    }

                }
                    break;

                }

                pushFollow(FOLLOW_p_PredicateList_in_p_AxisStep6811);
                p_PredicateList296 = p_PredicateList();

                state._fsp--;
                if (state.failed) {
                    return retval;
                }
                if (state.backtracking == 0) {
                    adaptor.addChild(root_0, p_PredicateList296.getTree());
                }

            }

            retval.stop = input.LT(-1);

            if (state.backtracking == 0) {

                retval.tree = (XQDTCommonTree)adaptor.rulePostProcessing(root_0);
                adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        } catch (RecognitionException re) {
            reportError(re);
            recover(input, re);
            retval.tree = (XQDTCommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        } finally {
        }
        return retval;
    }

    // $ANTLR end "p_AxisStep"

    public static class p_ForwardStep_return extends ParserRuleReturnScope {
        XQDTCommonTree tree;

        public Object getTree() {
            return tree;
        }
    };

    // $ANTLR start "p_ForwardStep"
    // XQueryParser.g:768:1: p_ForwardStep : ( p_ForwardAxis p_NodeTest | p_AbbrevForwardStep );
    public final XQueryParser.p_ForwardStep_return p_ForwardStep() throws RecognitionException {
        XQueryParser.p_ForwardStep_return retval = new XQueryParser.p_ForwardStep_return();
        retval.start = input.LT(1);

        XQDTCommonTree root_0 = null;

        XQueryParser.p_ForwardAxis_return p_ForwardAxis297 = null;

        XQueryParser.p_NodeTest_return p_NodeTest298 = null;

        XQueryParser.p_AbbrevForwardStep_return p_AbbrevForwardStep299 = null;

        try {
            // XQueryParser.g:769:9: ( p_ForwardAxis p_NodeTest | p_AbbrevForwardStep )
            int alt119 = 2;
            alt119 = dfa119.predict(input);
            switch (alt119) {
            case 1:
                // XQueryParser.g:769:11: p_ForwardAxis p_NodeTest
            {
                root_0 = (XQDTCommonTree)adaptor.nil();

                pushFollow(FOLLOW_p_ForwardAxis_in_p_ForwardStep6837);
                p_ForwardAxis297 = p_ForwardAxis();

                state._fsp--;
                if (state.failed) {
                    return retval;
                }
                if (state.backtracking == 0) {
                    adaptor.addChild(root_0, p_ForwardAxis297.getTree());
                }
                pushFollow(FOLLOW_p_NodeTest_in_p_ForwardStep6839);
                p_NodeTest298 = p_NodeTest();

                state._fsp--;
                if (state.failed) {
                    return retval;
                }
                if (state.backtracking == 0) {
                    adaptor.addChild(root_0, p_NodeTest298.getTree());
                }

            }
            break;
            case 2:
                // XQueryParser.g:770:11: p_AbbrevForwardStep
            {
                root_0 = (XQDTCommonTree)adaptor.nil();

                pushFollow(FOLLOW_p_AbbrevForwardStep_in_p_ForwardStep6851);
                p_AbbrevForwardStep299 = p_AbbrevForwardStep();

                state._fsp--;
                if (state.failed) {
                    return retval;
                }
                if (state.backtracking == 0) {
                    adaptor.addChild(root_0, p_AbbrevForwardStep299.getTree());
                }

            }
            break;

            }
            retval.stop = input.LT(-1);

            if (state.backtracking == 0) {

                retval.tree = (XQDTCommonTree)adaptor.rulePostProcessing(root_0);
                adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        } catch (RecognitionException re) {
            reportError(re);
            recover(input, re);
            retval.tree = (XQDTCommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        } finally {
        }
        return retval;
    }

    // $ANTLR end "p_ForwardStep"

    public static class p_ForwardAxis_return extends ParserRuleReturnScope {
        XQDTCommonTree tree;

        public Object getTree() {
            return tree;
        }
    };

    // $ANTLR start "p_ForwardAxis"
    // XQueryParser.g:774:1: p_ForwardAxis : ( CHILD COLON_COLON | DESCENDANT COLON_COLON | ATTRIBUTE COLON_COLON | SELF COLON_COLON | DESCENDANT_OR_SELF COLON_COLON | FOLLOWING_SIBLING COLON_COLON | FOLLOWING COLON_COLON );
    public final XQueryParser.p_ForwardAxis_return p_ForwardAxis() throws RecognitionException {
        XQueryParser.p_ForwardAxis_return retval = new XQueryParser.p_ForwardAxis_return();
        retval.start = input.LT(1);

        XQDTCommonTree root_0 = null;

        CommonToken CHILD300 = null;
        CommonToken COLON_COLON301 = null;
        CommonToken DESCENDANT302 = null;
        CommonToken COLON_COLON303 = null;
        CommonToken ATTRIBUTE304 = null;
        CommonToken COLON_COLON305 = null;
        CommonToken SELF306 = null;
        CommonToken COLON_COLON307 = null;
        CommonToken DESCENDANT_OR_SELF308 = null;
        CommonToken COLON_COLON309 = null;
        CommonToken FOLLOWING_SIBLING310 = null;
        CommonToken COLON_COLON311 = null;
        CommonToken FOLLOWING312 = null;
        CommonToken COLON_COLON313 = null;

        XQDTCommonTree CHILD300_tree = null;
        XQDTCommonTree COLON_COLON301_tree = null;
        XQDTCommonTree DESCENDANT302_tree = null;
        XQDTCommonTree COLON_COLON303_tree = null;
        XQDTCommonTree ATTRIBUTE304_tree = null;
        XQDTCommonTree COLON_COLON305_tree = null;
        XQDTCommonTree SELF306_tree = null;
        XQDTCommonTree COLON_COLON307_tree = null;
        XQDTCommonTree DESCENDANT_OR_SELF308_tree = null;
        XQDTCommonTree COLON_COLON309_tree = null;
        XQDTCommonTree FOLLOWING_SIBLING310_tree = null;
        XQDTCommonTree COLON_COLON311_tree = null;
        XQDTCommonTree FOLLOWING312_tree = null;
        XQDTCommonTree COLON_COLON313_tree = null;

        try {
            // XQueryParser.g:775:9: ( CHILD COLON_COLON | DESCENDANT COLON_COLON | ATTRIBUTE COLON_COLON | SELF COLON_COLON | DESCENDANT_OR_SELF COLON_COLON | FOLLOWING_SIBLING COLON_COLON | FOLLOWING COLON_COLON )
            int alt120 = 7;
            switch (input.LA(1)) {
            case CHILD: {
                alt120 = 1;
            }
                break;
            case DESCENDANT: {
                alt120 = 2;
            }
                break;
            case ATTRIBUTE: {
                alt120 = 3;
            }
                break;
            case SELF: {
                alt120 = 4;
            }
                break;
            case DESCENDANT_OR_SELF: {
                alt120 = 5;
            }
                break;
            case FOLLOWING_SIBLING: {
                alt120 = 6;
            }
                break;
            case FOLLOWING: {
                alt120 = 7;
            }
                break;
            default:
                if (state.backtracking > 0) {
                    state.failed = true;
                    return retval;
                }
                NoViableAltException nvae = new NoViableAltException("", 120, 0, input);

                throw nvae;
            }

            switch (alt120) {
            case 1:
                // XQueryParser.g:775:11: CHILD COLON_COLON
            {
                root_0 = (XQDTCommonTree)adaptor.nil();

                CHILD300 = (CommonToken)match(input, CHILD, FOLLOW_CHILD_in_p_ForwardAxis6877);
                if (state.failed) {
                    return retval;
                }
                if (state.backtracking == 0) {
                    CHILD300_tree = (XQDTCommonTree)adaptor.create(CHILD300);
                    adaptor.addChild(root_0, CHILD300_tree);
                }
                COLON_COLON301 = (CommonToken)match(input, COLON_COLON, FOLLOW_COLON_COLON_in_p_ForwardAxis6879);
                if (state.failed) {
                    return retval;
                }
                if (state.backtracking == 0) {
                    COLON_COLON301_tree = (XQDTCommonTree)adaptor.create(COLON_COLON301);
                    adaptor.addChild(root_0, COLON_COLON301_tree);
                }

            }
            break;
            case 2:
                // XQueryParser.g:776:11: DESCENDANT COLON_COLON
            {
                root_0 = (XQDTCommonTree)adaptor.nil();

                DESCENDANT302 = (CommonToken)match(input, DESCENDANT, FOLLOW_DESCENDANT_in_p_ForwardAxis6891);
                if (state.failed) {
                    return retval;
                }
                if (state.backtracking == 0) {
                    DESCENDANT302_tree = (XQDTCommonTree)adaptor.create(DESCENDANT302);
                    adaptor.addChild(root_0, DESCENDANT302_tree);
                }
                COLON_COLON303 = (CommonToken)match(input, COLON_COLON, FOLLOW_COLON_COLON_in_p_ForwardAxis6893);
                if (state.failed) {
                    return retval;
                }
                if (state.backtracking == 0) {
                    COLON_COLON303_tree = (XQDTCommonTree)adaptor.create(COLON_COLON303);
                    adaptor.addChild(root_0, COLON_COLON303_tree);
                }

            }
            break;
            case 3:
                // XQueryParser.g:777:11: ATTRIBUTE COLON_COLON
            {
                root_0 = (XQDTCommonTree)adaptor.nil();

                ATTRIBUTE304 = (CommonToken)match(input, ATTRIBUTE, FOLLOW_ATTRIBUTE_in_p_ForwardAxis6905);
                if (state.failed) {
                    return retval;
                }
                if (state.backtracking == 0) {
                    ATTRIBUTE304_tree = (XQDTCommonTree)adaptor.create(ATTRIBUTE304);
                    adaptor.addChild(root_0, ATTRIBUTE304_tree);
                }
                COLON_COLON305 = (CommonToken)match(input, COLON_COLON, FOLLOW_COLON_COLON_in_p_ForwardAxis6907);
                if (state.failed) {
                    return retval;
                }
                if (state.backtracking == 0) {
                    COLON_COLON305_tree = (XQDTCommonTree)adaptor.create(COLON_COLON305);
                    adaptor.addChild(root_0, COLON_COLON305_tree);
                }

            }
            break;
            case 4:
                // XQueryParser.g:778:11: SELF COLON_COLON
            {
                root_0 = (XQDTCommonTree)adaptor.nil();

                SELF306 = (CommonToken)match(input, SELF, FOLLOW_SELF_in_p_ForwardAxis6919);
                if (state.failed) {
                    return retval;
                }
                if (state.backtracking == 0) {
                    SELF306_tree = (XQDTCommonTree)adaptor.create(SELF306);
                    adaptor.addChild(root_0, SELF306_tree);
                }
                COLON_COLON307 = (CommonToken)match(input, COLON_COLON, FOLLOW_COLON_COLON_in_p_ForwardAxis6921);
                if (state.failed) {
                    return retval;
                }
                if (state.backtracking == 0) {
                    COLON_COLON307_tree = (XQDTCommonTree)adaptor.create(COLON_COLON307);
                    adaptor.addChild(root_0, COLON_COLON307_tree);
                }

            }
            break;
            case 5:
                // XQueryParser.g:779:11: DESCENDANT_OR_SELF COLON_COLON
            {
                root_0 = (XQDTCommonTree)adaptor.nil();

                DESCENDANT_OR_SELF308 = (CommonToken)match(input, DESCENDANT_OR_SELF,
                        FOLLOW_DESCENDANT_OR_SELF_in_p_ForwardAxis6933);
                if (state.failed) {
                    return retval;
                }
                if (state.backtracking == 0) {
                    DESCENDANT_OR_SELF308_tree = (XQDTCommonTree)adaptor.create(DESCENDANT_OR_SELF308);
                    adaptor.addChild(root_0, DESCENDANT_OR_SELF308_tree);
                }
                COLON_COLON309 = (CommonToken)match(input, COLON_COLON, FOLLOW_COLON_COLON_in_p_ForwardAxis6935);
                if (state.failed) {
                    return retval;
                }
                if (state.backtracking == 0) {
                    COLON_COLON309_tree = (XQDTCommonTree)adaptor.create(COLON_COLON309);
                    adaptor.addChild(root_0, COLON_COLON309_tree);
                }

            }
            break;
            case 6:
                // XQueryParser.g:780:11: FOLLOWING_SIBLING COLON_COLON
            {
                root_0 = (XQDTCommonTree)adaptor.nil();

                FOLLOWING_SIBLING310 = (CommonToken)match(input, FOLLOWING_SIBLING,
                        FOLLOW_FOLLOWING_SIBLING_in_p_ForwardAxis6947);
                if (state.failed) {
                    return retval;
                }
                if (state.backtracking == 0) {
                    FOLLOWING_SIBLING310_tree = (XQDTCommonTree)adaptor.create(FOLLOWING_SIBLING310);
                    adaptor.addChild(root_0, FOLLOWING_SIBLING310_tree);
                }
                COLON_COLON311 = (CommonToken)match(input, COLON_COLON, FOLLOW_COLON_COLON_in_p_ForwardAxis6949);
                if (state.failed) {
                    return retval;
                }
                if (state.backtracking == 0) {
                    COLON_COLON311_tree = (XQDTCommonTree)adaptor.create(COLON_COLON311);
                    adaptor.addChild(root_0, COLON_COLON311_tree);
                }

            }
            break;
            case 7:
                // XQueryParser.g:781:11: FOLLOWING COLON_COLON
            {
                root_0 = (XQDTCommonTree)adaptor.nil();

                FOLLOWING312 = (CommonToken)match(input, FOLLOWING, FOLLOW_FOLLOWING_in_p_ForwardAxis6961);
                if (state.failed) {
                    return retval;
                }
                if (state.backtracking == 0) {
                    FOLLOWING312_tree = (XQDTCommonTree)adaptor.create(FOLLOWING312);
                    adaptor.addChild(root_0, FOLLOWING312_tree);
                }
                COLON_COLON313 = (CommonToken)match(input, COLON_COLON, FOLLOW_COLON_COLON_in_p_ForwardAxis6963);
                if (state.failed) {
                    return retval;
                }
                if (state.backtracking == 0) {
                    COLON_COLON313_tree = (XQDTCommonTree)adaptor.create(COLON_COLON313);
                    adaptor.addChild(root_0, COLON_COLON313_tree);
                }

            }
            break;

            }
            retval.stop = input.LT(-1);

            if (state.backtracking == 0) {

                retval.tree = (XQDTCommonTree)adaptor.rulePostProcessing(root_0);
                adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        } catch (RecognitionException re) {
            reportError(re);
            recover(input, re);
            retval.tree = (XQDTCommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        } finally {
        }
        return retval;
    }

    // $ANTLR end "p_ForwardAxis"

    public static class p_AbbrevForwardStep_return extends ParserRuleReturnScope {
        XQDTCommonTree tree;

        public Object getTree() {
            return tree;
        }
    };

    // $ANTLR start "p_AbbrevForwardStep"
    // XQueryParser.g:785:1: p_AbbrevForwardStep : ( ATTR_SIGN )? p_NodeTest ;
    public final XQueryParser.p_AbbrevForwardStep_return p_AbbrevForwardStep() throws RecognitionException {
        XQueryParser.p_AbbrevForwardStep_return retval = new XQueryParser.p_AbbrevForwardStep_return();
        retval.start = input.LT(1);

        XQDTCommonTree root_0 = null;

        CommonToken ATTR_SIGN314 = null;
        XQueryParser.p_NodeTest_return p_NodeTest315 = null;

        XQDTCommonTree ATTR_SIGN314_tree = null;

        try {
            // XQueryParser.g:786:9: ( ( ATTR_SIGN )? p_NodeTest )
            // XQueryParser.g:786:11: ( ATTR_SIGN )? p_NodeTest
            {
                root_0 = (XQDTCommonTree)adaptor.nil();

                // XQueryParser.g:786:11: ( ATTR_SIGN )?
                int alt121 = 2;
                int LA121_0 = input.LA(1);

                if ((LA121_0 == ATTR_SIGN)) {
                    alt121 = 1;
                }
                switch (alt121) {
                case 1:
                    // XQueryParser.g:786:11: ATTR_SIGN
                {
                    ATTR_SIGN314 = (CommonToken)match(input, ATTR_SIGN, FOLLOW_ATTR_SIGN_in_p_AbbrevForwardStep6989);
                    if (state.failed) {
                        return retval;
                    }
                    if (state.backtracking == 0) {
                        ATTR_SIGN314_tree = (XQDTCommonTree)adaptor.create(ATTR_SIGN314);
                        adaptor.addChild(root_0, ATTR_SIGN314_tree);
                    }

                }
                    break;

                }

                pushFollow(FOLLOW_p_NodeTest_in_p_AbbrevForwardStep6992);
                p_NodeTest315 = p_NodeTest();

                state._fsp--;
                if (state.failed) {
                    return retval;
                }
                if (state.backtracking == 0) {
                    adaptor.addChild(root_0, p_NodeTest315.getTree());
                }

            }

            retval.stop = input.LT(-1);

            if (state.backtracking == 0) {

                retval.tree = (XQDTCommonTree)adaptor.rulePostProcessing(root_0);
                adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        } catch (RecognitionException re) {
            reportError(re);
            recover(input, re);
            retval.tree = (XQDTCommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        } finally {
        }
        return retval;
    }

    // $ANTLR end "p_AbbrevForwardStep"

    public static class p_ReverseStep_return extends ParserRuleReturnScope {
        XQDTCommonTree tree;

        public Object getTree() {
            return tree;
        }
    };

    // $ANTLR start "p_ReverseStep"
    // XQueryParser.g:790:1: p_ReverseStep : ( p_ReverseAxis p_NodeTest | p_AbbrevReverseStep );
    public final XQueryParser.p_ReverseStep_return p_ReverseStep() throws RecognitionException {
        XQueryParser.p_ReverseStep_return retval = new XQueryParser.p_ReverseStep_return();
        retval.start = input.LT(1);

        XQDTCommonTree root_0 = null;

        XQueryParser.p_ReverseAxis_return p_ReverseAxis316 = null;

        XQueryParser.p_NodeTest_return p_NodeTest317 = null;

        XQueryParser.p_AbbrevReverseStep_return p_AbbrevReverseStep318 = null;

        try {
            // XQueryParser.g:791:9: ( p_ReverseAxis p_NodeTest | p_AbbrevReverseStep )
            int alt122 = 2;
            int LA122_0 = input.LA(1);

            if (((LA122_0 >= ANCESTOR && LA122_0 <= ANCESTOR_OR_SELF) || (LA122_0 >= PARENT && LA122_0 <= PRECEDING_SIBLING))) {
                alt122 = 1;
            } else if ((LA122_0 == DOT_DOT)) {
                alt122 = 2;
            } else {
                if (state.backtracking > 0) {
                    state.failed = true;
                    return retval;
                }
                NoViableAltException nvae = new NoViableAltException("", 122, 0, input);

                throw nvae;
            }
            switch (alt122) {
            case 1:
                // XQueryParser.g:791:11: p_ReverseAxis p_NodeTest
            {
                root_0 = (XQDTCommonTree)adaptor.nil();

                pushFollow(FOLLOW_p_ReverseAxis_in_p_ReverseStep7018);
                p_ReverseAxis316 = p_ReverseAxis();

                state._fsp--;
                if (state.failed) {
                    return retval;
                }
                if (state.backtracking == 0) {
                    adaptor.addChild(root_0, p_ReverseAxis316.getTree());
                }
                pushFollow(FOLLOW_p_NodeTest_in_p_ReverseStep7020);
                p_NodeTest317 = p_NodeTest();

                state._fsp--;
                if (state.failed) {
                    return retval;
                }
                if (state.backtracking == 0) {
                    adaptor.addChild(root_0, p_NodeTest317.getTree());
                }

            }
            break;
            case 2:
                // XQueryParser.g:792:11: p_AbbrevReverseStep
            {
                root_0 = (XQDTCommonTree)adaptor.nil();

                pushFollow(FOLLOW_p_AbbrevReverseStep_in_p_ReverseStep7032);
                p_AbbrevReverseStep318 = p_AbbrevReverseStep();

                state._fsp--;
                if (state.failed) {
                    return retval;
                }
                if (state.backtracking == 0) {
                    adaptor.addChild(root_0, p_AbbrevReverseStep318.getTree());
                }

            }
            break;

            }
            retval.stop = input.LT(-1);

            if (state.backtracking == 0) {

                retval.tree = (XQDTCommonTree)adaptor.rulePostProcessing(root_0);
                adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        } catch (RecognitionException re) {
            reportError(re);
            recover(input, re);
            retval.tree = (XQDTCommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        } finally {
        }
        return retval;
    }

    // $ANTLR end "p_ReverseStep"

    public static class p_ReverseAxis_return extends ParserRuleReturnScope {
        XQDTCommonTree tree;

        public Object getTree() {
            return tree;
        }
    };

    // $ANTLR start "p_ReverseAxis"
    // XQueryParser.g:796:1: p_ReverseAxis : ( PARENT COLON_COLON | ANCESTOR COLON_COLON | PRECEDING_SIBLING COLON_COLON | PRECEDING COLON_COLON | ANCESTOR_OR_SELF COLON_COLON );
    public final XQueryParser.p_ReverseAxis_return p_ReverseAxis() throws RecognitionException {
        XQueryParser.p_ReverseAxis_return retval = new XQueryParser.p_ReverseAxis_return();
        retval.start = input.LT(1);

        XQDTCommonTree root_0 = null;

        CommonToken PARENT319 = null;
        CommonToken COLON_COLON320 = null;
        CommonToken ANCESTOR321 = null;
        CommonToken COLON_COLON322 = null;
        CommonToken PRECEDING_SIBLING323 = null;
        CommonToken COLON_COLON324 = null;
        CommonToken PRECEDING325 = null;
        CommonToken COLON_COLON326 = null;
        CommonToken ANCESTOR_OR_SELF327 = null;
        CommonToken COLON_COLON328 = null;

        XQDTCommonTree PARENT319_tree = null;
        XQDTCommonTree COLON_COLON320_tree = null;
        XQDTCommonTree ANCESTOR321_tree = null;
        XQDTCommonTree COLON_COLON322_tree = null;
        XQDTCommonTree PRECEDING_SIBLING323_tree = null;
        XQDTCommonTree COLON_COLON324_tree = null;
        XQDTCommonTree PRECEDING325_tree = null;
        XQDTCommonTree COLON_COLON326_tree = null;
        XQDTCommonTree ANCESTOR_OR_SELF327_tree = null;
        XQDTCommonTree COLON_COLON328_tree = null;

        try {
            // XQueryParser.g:797:9: ( PARENT COLON_COLON | ANCESTOR COLON_COLON | PRECEDING_SIBLING COLON_COLON | PRECEDING COLON_COLON | ANCESTOR_OR_SELF COLON_COLON )
            int alt123 = 5;
            switch (input.LA(1)) {
            case PARENT: {
                alt123 = 1;
            }
                break;
            case ANCESTOR: {
                alt123 = 2;
            }
                break;
            case PRECEDING_SIBLING: {
                alt123 = 3;
            }
                break;
            case PRECEDING: {
                alt123 = 4;
            }
                break;
            case ANCESTOR_OR_SELF: {
                alt123 = 5;
            }
                break;
            default:
                if (state.backtracking > 0) {
                    state.failed = true;
                    return retval;
                }
                NoViableAltException nvae = new NoViableAltException("", 123, 0, input);

                throw nvae;
            }

            switch (alt123) {
            case 1:
                // XQueryParser.g:797:11: PARENT COLON_COLON
            {
                root_0 = (XQDTCommonTree)adaptor.nil();

                PARENT319 = (CommonToken)match(input, PARENT, FOLLOW_PARENT_in_p_ReverseAxis7058);
                if (state.failed) {
                    return retval;
                }
                if (state.backtracking == 0) {
                    PARENT319_tree = (XQDTCommonTree)adaptor.create(PARENT319);
                    adaptor.addChild(root_0, PARENT319_tree);
                }
                COLON_COLON320 = (CommonToken)match(input, COLON_COLON, FOLLOW_COLON_COLON_in_p_ReverseAxis7060);
                if (state.failed) {
                    return retval;
                }
                if (state.backtracking == 0) {
                    COLON_COLON320_tree = (XQDTCommonTree)adaptor.create(COLON_COLON320);
                    adaptor.addChild(root_0, COLON_COLON320_tree);
                }

            }
            break;
            case 2:
                // XQueryParser.g:798:11: ANCESTOR COLON_COLON
            {
                root_0 = (XQDTCommonTree)adaptor.nil();

                ANCESTOR321 = (CommonToken)match(input, ANCESTOR, FOLLOW_ANCESTOR_in_p_ReverseAxis7072);
                if (state.failed) {
                    return retval;
                }
                if (state.backtracking == 0) {
                    ANCESTOR321_tree = (XQDTCommonTree)adaptor.create(ANCESTOR321);
                    adaptor.addChild(root_0, ANCESTOR321_tree);
                }
                COLON_COLON322 = (CommonToken)match(input, COLON_COLON, FOLLOW_COLON_COLON_in_p_ReverseAxis7074);
                if (state.failed) {
                    return retval;
                }
                if (state.backtracking == 0) {
                    COLON_COLON322_tree = (XQDTCommonTree)adaptor.create(COLON_COLON322);
                    adaptor.addChild(root_0, COLON_COLON322_tree);
                }

            }
            break;
            case 3:
                // XQueryParser.g:799:11: PRECEDING_SIBLING COLON_COLON
            {
                root_0 = (XQDTCommonTree)adaptor.nil();

                PRECEDING_SIBLING323 = (CommonToken)match(input, PRECEDING_SIBLING,
                        FOLLOW_PRECEDING_SIBLING_in_p_ReverseAxis7086);
                if (state.failed) {
                    return retval;
                }
                if (state.backtracking == 0) {
                    PRECEDING_SIBLING323_tree = (XQDTCommonTree)adaptor.create(PRECEDING_SIBLING323);
                    adaptor.addChild(root_0, PRECEDING_SIBLING323_tree);
                }
                COLON_COLON324 = (CommonToken)match(input, COLON_COLON, FOLLOW_COLON_COLON_in_p_ReverseAxis7088);
                if (state.failed) {
                    return retval;
                }
                if (state.backtracking == 0) {
                    COLON_COLON324_tree = (XQDTCommonTree)adaptor.create(COLON_COLON324);
                    adaptor.addChild(root_0, COLON_COLON324_tree);
                }

            }
            break;
            case 4:
                // XQueryParser.g:800:11: PRECEDING COLON_COLON
            {
                root_0 = (XQDTCommonTree)adaptor.nil();

                PRECEDING325 = (CommonToken)match(input, PRECEDING, FOLLOW_PRECEDING_in_p_ReverseAxis7100);
                if (state.failed) {
                    return retval;
                }
                if (state.backtracking == 0) {
                    PRECEDING325_tree = (XQDTCommonTree)adaptor.create(PRECEDING325);
                    adaptor.addChild(root_0, PRECEDING325_tree);
                }
                COLON_COLON326 = (CommonToken)match(input, COLON_COLON, FOLLOW_COLON_COLON_in_p_ReverseAxis7102);
                if (state.failed) {
                    return retval;
                }
                if (state.backtracking == 0) {
                    COLON_COLON326_tree = (XQDTCommonTree)adaptor.create(COLON_COLON326);
                    adaptor.addChild(root_0, COLON_COLON326_tree);
                }

            }
            break;
            case 5:
                // XQueryParser.g:801:11: ANCESTOR_OR_SELF COLON_COLON
            {
                root_0 = (XQDTCommonTree)adaptor.nil();

                ANCESTOR_OR_SELF327 = (CommonToken)match(input, ANCESTOR_OR_SELF,
                        FOLLOW_ANCESTOR_OR_SELF_in_p_ReverseAxis7114);
                if (state.failed) {
                    return retval;
                }
                if (state.backtracking == 0) {
                    ANCESTOR_OR_SELF327_tree = (XQDTCommonTree)adaptor.create(ANCESTOR_OR_SELF327);
                    adaptor.addChild(root_0, ANCESTOR_OR_SELF327_tree);
                }
                COLON_COLON328 = (CommonToken)match(input, COLON_COLON, FOLLOW_COLON_COLON_in_p_ReverseAxis7116);
                if (state.failed) {
                    return retval;
                }
                if (state.backtracking == 0) {
                    COLON_COLON328_tree = (XQDTCommonTree)adaptor.create(COLON_COLON328);
                    adaptor.addChild(root_0, COLON_COLON328_tree);
                }

            }
            break;

            }
            retval.stop = input.LT(-1);

            if (state.backtracking == 0) {

                retval.tree = (XQDTCommonTree)adaptor.rulePostProcessing(root_0);
                adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        } catch (RecognitionException re) {
            reportError(re);
            recover(input, re);
            retval.tree = (XQDTCommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        } finally {
        }
        return retval;
    }

    // $ANTLR end "p_ReverseAxis"

    public static class p_AbbrevReverseStep_return extends ParserRuleReturnScope {
        XQDTCommonTree tree;

        public Object getTree() {
            return tree;
        }
    };

    // $ANTLR start "p_AbbrevReverseStep"
    // XQueryParser.g:805:1: p_AbbrevReverseStep : DOT_DOT ;
    public final XQueryParser.p_AbbrevReverseStep_return p_AbbrevReverseStep() throws RecognitionException {
        XQueryParser.p_AbbrevReverseStep_return retval = new XQueryParser.p_AbbrevReverseStep_return();
        retval.start = input.LT(1);

        XQDTCommonTree root_0 = null;

        CommonToken DOT_DOT329 = null;

        XQDTCommonTree DOT_DOT329_tree = null;

        try {
            // XQueryParser.g:806:9: ( DOT_DOT )
            // XQueryParser.g:806:11: DOT_DOT
            {
                root_0 = (XQDTCommonTree)adaptor.nil();

                DOT_DOT329 = (CommonToken)match(input, DOT_DOT, FOLLOW_DOT_DOT_in_p_AbbrevReverseStep7142);
                if (state.failed) {
                    return retval;
                }
                if (state.backtracking == 0) {
                    DOT_DOT329_tree = (XQDTCommonTree)adaptor.create(DOT_DOT329);
                    adaptor.addChild(root_0, DOT_DOT329_tree);
                }

            }

            retval.stop = input.LT(-1);

            if (state.backtracking == 0) {

                retval.tree = (XQDTCommonTree)adaptor.rulePostProcessing(root_0);
                adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        } catch (RecognitionException re) {
            reportError(re);
            recover(input, re);
            retval.tree = (XQDTCommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        } finally {
        }
        return retval;
    }

    // $ANTLR end "p_AbbrevReverseStep"

    public static class p_NodeTest_return extends ParserRuleReturnScope {
        XQDTCommonTree tree;

        public Object getTree() {
            return tree;
        }
    };

    // $ANTLR start "p_NodeTest"
    // XQueryParser.g:810:1: p_NodeTest : ( p_KindTest | p_NameTest );
    public final XQueryParser.p_NodeTest_return p_NodeTest() throws RecognitionException {
        XQueryParser.p_NodeTest_return retval = new XQueryParser.p_NodeTest_return();
        retval.start = input.LT(1);

        XQDTCommonTree root_0 = null;

        XQueryParser.p_KindTest_return p_KindTest330 = null;

        XQueryParser.p_NameTest_return p_NameTest331 = null;

        try {
            // XQueryParser.g:811:9: ( p_KindTest | p_NameTest )
            int alt124 = 2;
            alt124 = dfa124.predict(input);
            switch (alt124) {
            case 1:
                // XQueryParser.g:811:11: p_KindTest
            {
                root_0 = (XQDTCommonTree)adaptor.nil();

                pushFollow(FOLLOW_p_KindTest_in_p_NodeTest7168);
                p_KindTest330 = p_KindTest();

                state._fsp--;
                if (state.failed) {
                    return retval;
                }
                if (state.backtracking == 0) {
                    adaptor.addChild(root_0, p_KindTest330.getTree());
                }

            }
            break;
            case 2:
                // XQueryParser.g:811:24: p_NameTest
            {
                root_0 = (XQDTCommonTree)adaptor.nil();

                pushFollow(FOLLOW_p_NameTest_in_p_NodeTest7172);
                p_NameTest331 = p_NameTest();

                state._fsp--;
                if (state.failed) {
                    return retval;
                }
                if (state.backtracking == 0) {
                    adaptor.addChild(root_0, p_NameTest331.getTree());
                }

            }
            break;

            }
            retval.stop = input.LT(-1);

            if (state.backtracking == 0) {

                retval.tree = (XQDTCommonTree)adaptor.rulePostProcessing(root_0);
                adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        } catch (RecognitionException re) {
            reportError(re);
            recover(input, re);
            retval.tree = (XQDTCommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        } finally {
        }
        return retval;
    }

    // $ANTLR end "p_NodeTest"

    public static class p_NameTest_return extends ParserRuleReturnScope {
        XQDTCommonTree tree;

        public Object getTree() {
            return tree;
        }
    };

    // $ANTLR start "p_NameTest"
    // XQueryParser.g:815:1: p_NameTest : ( ( p_Wildcard )=> p_Wildcard | ( p_NCName COLON )=> p_QName | ( p_NCName )=> p_QName );
    public final XQueryParser.p_NameTest_return p_NameTest() throws RecognitionException {
        XQueryParser.p_NameTest_return retval = new XQueryParser.p_NameTest_return();
        retval.start = input.LT(1);

        XQDTCommonTree root_0 = null;

        XQueryParser.p_Wildcard_return p_Wildcard332 = null;

        XQueryParser.p_QName_return p_QName333 = null;

        XQueryParser.p_QName_return p_QName334 = null;

        try {
            // XQueryParser.g:816:9: ( ( p_Wildcard )=> p_Wildcard | ( p_NCName COLON )=> p_QName | ( p_NCName )=> p_QName )
            int alt125 = 3;
            int LA125_0 = input.LA(1);

            if ((LA125_0 == STAR) && (synpred13_XQueryParser())) {
                alt125 = 1;
            } else if (((LA125_0 >= ANCESTOR && LA125_0 <= SKIP) || (LA125_0 >= VALUE && LA125_0 <= QUOT_ER)
                    || LA125_0 == L_NCName || LA125_0 == EXPLICITLY)) {
                int LA125_2 = input.LA(2);

                if ((LA125_2 == COLON) && (synpred13_XQueryParser())) {
                    alt125 = 1;
                } else if ((synpred14_XQueryParser())) {
                    alt125 = 2;
                } else if ((synpred15_XQueryParser())) {
                    alt125 = 3;
                } else {
                    if (state.backtracking > 0) {
                        state.failed = true;
                        return retval;
                    }
                    NoViableAltException nvae = new NoViableAltException("", 125, 2, input);

                    throw nvae;
                }
            } else if ((LA125_0 == QUOT) && (synpred13_XQueryParser())) {
                alt125 = 1;
            } else if ((LA125_0 == APOS) && (synpred13_XQueryParser())) {
                alt125 = 1;
            } else {
                if (state.backtracking > 0) {
                    state.failed = true;
                    return retval;
                }
                NoViableAltException nvae = new NoViableAltException("", 125, 0, input);

                throw nvae;
            }
            switch (alt125) {
            case 1:
                // XQueryParser.g:816:11: ( p_Wildcard )=> p_Wildcard
            {
                root_0 = (XQDTCommonTree)adaptor.nil();

                pushFollow(FOLLOW_p_Wildcard_in_p_NameTest7204);
                p_Wildcard332 = p_Wildcard();

                state._fsp--;
                if (state.failed) {
                    return retval;
                }
                if (state.backtracking == 0) {
                    adaptor.addChild(root_0, p_Wildcard332.getTree());
                }

            }
            break;
            case 2:
                // XQueryParser.g:817:11: ( p_NCName COLON )=> p_QName
            {
                root_0 = (XQDTCommonTree)adaptor.nil();

                pushFollow(FOLLOW_p_QName_in_p_NameTest7225);
                p_QName333 = p_QName();

                state._fsp--;
                if (state.failed) {
                    return retval;
                }
                if (state.backtracking == 0) {
                    adaptor.addChild(root_0, p_QName333.getTree());
                }

            }
            break;
            case 3:
                // XQueryParser.g:818:11: ( p_NCName )=> p_QName
            {
                root_0 = (XQDTCommonTree)adaptor.nil();

                pushFollow(FOLLOW_p_QName_in_p_NameTest7243);
                p_QName334 = p_QName();

                state._fsp--;
                if (state.failed) {
                    return retval;
                }
                if (state.backtracking == 0) {
                    adaptor.addChild(root_0, p_QName334.getTree());
                }

            }
            break;

            }
            retval.stop = input.LT(-1);

            if (state.backtracking == 0) {

                retval.tree = (XQDTCommonTree)adaptor.rulePostProcessing(root_0);
                adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        } catch (RecognitionException re) {
            reportError(re);
            recover(input, re);
            retval.tree = (XQDTCommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        } finally {
        }
        return retval;
    }

    // $ANTLR end "p_NameTest"

    public static class p_Wildcard_return extends ParserRuleReturnScope {
        XQDTCommonTree tree;

        public Object getTree() {
            return tree;
        }
    };

    // $ANTLR start "p_Wildcard"
    // XQueryParser.g:822:1: p_Wildcard : ( STAR ( COLON p_NCName )? | p_NCName COLON STAR | p_StringLiteral COLON STAR );
    public final XQueryParser.p_Wildcard_return p_Wildcard() throws RecognitionException {
        XQueryParser.p_Wildcard_return retval = new XQueryParser.p_Wildcard_return();
        retval.start = input.LT(1);

        XQDTCommonTree root_0 = null;

        CommonToken STAR335 = null;
        CommonToken COLON336 = null;
        CommonToken COLON339 = null;
        CommonToken STAR340 = null;
        CommonToken COLON342 = null;
        CommonToken STAR343 = null;
        XQueryParser.p_NCName_return p_NCName337 = null;

        XQueryParser.p_NCName_return p_NCName338 = null;

        XQueryParser.p_StringLiteral_return p_StringLiteral341 = null;

        XQDTCommonTree STAR335_tree = null;
        XQDTCommonTree COLON336_tree = null;
        XQDTCommonTree COLON339_tree = null;
        XQDTCommonTree STAR340_tree = null;
        XQDTCommonTree COLON342_tree = null;
        XQDTCommonTree STAR343_tree = null;

        setWsExplicit(true);
        try {
            // XQueryParser.g:823:9: ( STAR ( COLON p_NCName )? | p_NCName COLON STAR | p_StringLiteral COLON STAR )
            int alt127 = 3;
            switch (input.LA(1)) {
            case STAR: {
                alt127 = 1;
            }
                break;
            case ANCESTOR:
            case ANCESTOR_OR_SELF:
            case AND:
            case AS:
            case ASCENDING:
            case AT:
            case ATTRIBUTE:
            case BASE_URI:
            case BOUNDARY_SPACE:
            case BY:
            case CASE:
            case CAST:
            case CASTABLE:
            case CHILD:
            case COLLATION:
            case COMMENT:
            case CONSTRUCTION:
            case COPY_NAMESPACES:
            case DECLARE:
            case DEFAULT:
            case DESCENDANT:
            case DESCENDANT_OR_SELF:
            case DESCENDING:
            case DIV:
            case DOCUMENT:
            case DOCUMENT_NODE:
            case ELEMENT:
            case ELSE:
            case EMPTY:
            case EMPTY_SEQUENCE:
            case ENCODING:
            case EQ:
            case EVERY:
            case EXCEPT:
            case EXTERNAL:
            case FOLLOWING:
            case FOLLOWING_SIBLING:
            case FOR:
            case FUNCTION:
            case GE:
            case GREATEST:
            case GT:
            case IDIV:
            case IF:
            case IMPORT:
            case IN:
            case INHERIT:
            case INSTANCE:
            case INTERSECT:
            case IS:
            case ITEM:
            case LAX:
            case LE:
            case LEAST:
            case LET:
            case LT:
            case MOD:
            case MODULE:
            case NAMESPACE:
            case NE:
            case NO_INHERIT:
            case NO_PRESERVE:
            case NODE:
            case OF:
            case OPTION:
            case OR:
            case ORDER:
            case ORDERED:
            case ORDERING:
            case PARENT:
            case PRECEDING:
            case PRECEDING_SIBLING:
            case PRESERVE:
            case PROCESSING_INSTRUCTION:
            case RETURN:
            case SATISFIES:
            case SCHEMA:
            case SCHEMA_ATTRIBUTE:
            case SCHEMA_ELEMENT:
            case SELF:
            case SOME:
            case STABLE:
            case STRICT:
            case STRIP:
            case TEXT:
            case THEN:
            case TO:
            case TREAT:
            case TYPESWITCH:
            case UNION:
            case UNORDERED:
            case VALIDATE:
            case VARIABLE:
            case VERSION:
            case WHERE:
            case XQUERY:
            case ALLOWING:
            case CATCH:
            case CONTEXT:
            case COUNT:
            case DECIMAL_FORMAT:
            case DECIMAL_SEPARATOR:
            case DIGIT:
            case END:
            case GROUP:
            case GROUPING_SEPARATOR:
            case INFINITY:
            case MINUS_SIGN:
            case NAMESPACE_NODE:
            case NAN:
            case NEXT:
            case ONLY:
            case PATTERN_SEPARATOR:
            case PERCENT:
            case PER_MILLE:
            case PREVIOUS:
            case SLIDING:
            case START:
            case SWITCH:
            case TRY:
            case TUMBLING:
            case TYPE:
            case WHEN:
            case WINDOW:
            case ZERO_DIGIT:
            case AFTER:
            case BEFORE:
            case COPY:
            case DELETE:
            case FIRST:
            case INSERT:
            case INTO:
            case LAST:
            case MODIFY:
            case NODES:
            case RENAME:
            case REPLACE:
            case REVALIDATION:
            case SKIP:
            case VALUE:
            case WITH:
            case ALL:
            case ANY:
            case CONTAINS:
            case CONTENT:
            case DIACRITICS:
            case DIFFERENT:
            case DISTANCE:
            case ENTIRE:
            case EXACTLY:
            case FROM:
            case FT_OPTION:
            case FTAND:
            case FTNOT:
            case FTOR:
            case INSENSITIVE:
            case LANGUAGE:
            case LEVELS:
            case LOWERCASE:
            case MOST:
            case NO:
            case NOT:
            case OCCURS:
            case PARAGRAPH:
            case PARAGRAPHS:
            case PHRASE:
            case RELATIONSHIP:
            case SAME:
            case SCORE:
            case SENSITIVE:
            case SENTENCE:
            case SENTENCES:
            case STEMMING:
            case STOP:
            case THESAURUS:
            case TIMES:
            case UPPERCASE:
            case USING:
            case WEIGHT:
            case WILDCARDS:
            case WITHOUT:
            case WORD:
            case WORDS:
            case BREAK:
            case CONTINUE:
            case EXIT:
            case LOOP:
            case RETURNING:
            case WHILE:
            case CHECK:
            case COLLECTION:
            case CONSTRAINT:
            case FOREACH:
            case FOREIGN:
            case INDEX:
            case INTEGRITY:
            case KEY:
            case ON:
            case UNIQUE:
            case BINARY:
            case AMP_ER:
            case APOS_ER:
            case QUOT_ER:
            case L_NCName:
            case EXPLICITLY: {
                alt127 = 2;
            }
                break;
            case APOS:
            case QUOT: {
                alt127 = 3;
            }
                break;
            default:
                if (state.backtracking > 0) {
                    state.failed = true;
                    return retval;
                }
                NoViableAltException nvae = new NoViableAltException("", 127, 0, input);

                throw nvae;
            }

            switch (alt127) {
            case 1:
                // XQueryParser.g:823:11: STAR ( COLON p_NCName )?
            {
                root_0 = (XQDTCommonTree)adaptor.nil();

                STAR335 = (CommonToken)match(input, STAR, FOLLOW_STAR_in_p_Wildcard7273);
                if (state.failed) {
                    return retval;
                }
                if (state.backtracking == 0) {
                    STAR335_tree = (XQDTCommonTree)adaptor.create(STAR335);
                    adaptor.addChild(root_0, STAR335_tree);
                }
                // XQueryParser.g:823:16: ( COLON p_NCName )?
                int alt126 = 2;
                int LA126_0 = input.LA(1);

                if ((LA126_0 == COLON)) {
                    alt126 = 1;
                }
                switch (alt126) {
                case 1:
                    // XQueryParser.g:823:17: COLON p_NCName
                {
                    COLON336 = (CommonToken)match(input, COLON, FOLLOW_COLON_in_p_Wildcard7276);
                    if (state.failed) {
                        return retval;
                    }
                    if (state.backtracking == 0) {
                        COLON336_tree = (XQDTCommonTree)adaptor.create(COLON336);
                        adaptor.addChild(root_0, COLON336_tree);
                    }
                    pushFollow(FOLLOW_p_NCName_in_p_Wildcard7278);
                    p_NCName337 = p_NCName();

                    state._fsp--;
                    if (state.failed) {
                        return retval;
                    }
                    if (state.backtracking == 0) {
                        adaptor.addChild(root_0, p_NCName337.getTree());
                    }

                }
                break;

                }

            }
            break;
            case 2:
                // XQueryParser.g:824:11: p_NCName COLON STAR
            {
                root_0 = (XQDTCommonTree)adaptor.nil();

                pushFollow(FOLLOW_p_NCName_in_p_Wildcard7292);
                p_NCName338 = p_NCName();

                state._fsp--;
                if (state.failed) {
                    return retval;
                }
                if (state.backtracking == 0) {
                    adaptor.addChild(root_0, p_NCName338.getTree());
                }
                COLON339 = (CommonToken)match(input, COLON, FOLLOW_COLON_in_p_Wildcard7294);
                if (state.failed) {
                    return retval;
                }
                if (state.backtracking == 0) {
                    COLON339_tree = (XQDTCommonTree)adaptor.create(COLON339);
                    adaptor.addChild(root_0, COLON339_tree);
                }
                STAR340 = (CommonToken)match(input, STAR, FOLLOW_STAR_in_p_Wildcard7296);
                if (state.failed) {
                    return retval;
                }
                if (state.backtracking == 0) {
                    STAR340_tree = (XQDTCommonTree)adaptor.create(STAR340);
                    adaptor.addChild(root_0, STAR340_tree);
                }

            }
            break;
            case 3:
                // XQueryParser.g:825:11: p_StringLiteral COLON STAR
            {
                root_0 = (XQDTCommonTree)adaptor.nil();

                pushFollow(FOLLOW_p_StringLiteral_in_p_Wildcard7308);
                p_StringLiteral341 = p_StringLiteral();

                state._fsp--;
                if (state.failed) {
                    return retval;
                }
                if (state.backtracking == 0) {
                    adaptor.addChild(root_0, p_StringLiteral341.getTree());
                }
                COLON342 = (CommonToken)match(input, COLON, FOLLOW_COLON_in_p_Wildcard7310);
                if (state.failed) {
                    return retval;
                }
                if (state.backtracking == 0) {
                    COLON342_tree = (XQDTCommonTree)adaptor.create(COLON342);
                    adaptor.addChild(root_0, COLON342_tree);
                }
                STAR343 = (CommonToken)match(input, STAR, FOLLOW_STAR_in_p_Wildcard7312);
                if (state.failed) {
                    return retval;
                }
                if (state.backtracking == 0) {
                    STAR343_tree = (XQDTCommonTree)adaptor.create(STAR343);
                    adaptor.addChild(root_0, STAR343_tree);
                }

            }
            break;

            }
            retval.stop = input.LT(-1);

            if (state.backtracking == 0) {

                retval.tree = (XQDTCommonTree)adaptor.rulePostProcessing(root_0);
                adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        } catch (RecognitionException re) {
            reportError(re);
            recover(input, re);
            retval.tree = (XQDTCommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        } finally {
            setWsExplicit(false);
        }
        return retval;
    }

    // $ANTLR end "p_Wildcard"

    public static class p_PostfixExpr_return extends ParserRuleReturnScope {
        XQDTCommonTree tree;

        public Object getTree() {
            return tree;
        }
    };

    // $ANTLR start "p_PostfixExpr"
    // XQueryParser.g:830:1: p_PostfixExpr : p_PrimaryExpr ( p_Predicate )* ;
    public final XQueryParser.p_PostfixExpr_return p_PostfixExpr() throws RecognitionException {
        XQueryParser.p_PostfixExpr_return retval = new XQueryParser.p_PostfixExpr_return();
        retval.start = input.LT(1);

        XQDTCommonTree root_0 = null;

        XQueryParser.p_PrimaryExpr_return p_PrimaryExpr344 = null;

        XQueryParser.p_Predicate_return p_Predicate345 = null;

        try {
            // XQueryParser.g:831:9: ( p_PrimaryExpr ( p_Predicate )* )
            // XQueryParser.g:831:11: p_PrimaryExpr ( p_Predicate )*
            {
                root_0 = (XQDTCommonTree)adaptor.nil();

                pushFollow(FOLLOW_p_PrimaryExpr_in_p_PostfixExpr7350);
                p_PrimaryExpr344 = p_PrimaryExpr();

                state._fsp--;
                if (state.failed) {
                    return retval;
                }
                if (state.backtracking == 0) {
                    adaptor.addChild(root_0, p_PrimaryExpr344.getTree());
                }
                // XQueryParser.g:831:25: ( p_Predicate )*
                loop128: do {
                    int alt128 = 2;
                    int LA128_0 = input.LA(1);

                    if ((LA128_0 == LSQUARE)) {
                        alt128 = 1;
                    }

                    switch (alt128) {
                    case 1:
                        // XQueryParser.g:831:26: p_Predicate
                    {
                        pushFollow(FOLLOW_p_Predicate_in_p_PostfixExpr7353);
                        p_Predicate345 = p_Predicate();

                        state._fsp--;
                        if (state.failed) {
                            return retval;
                        }
                        if (state.backtracking == 0) {
                            adaptor.addChild(root_0, p_Predicate345.getTree());
                        }

                    }
                    break;

                    default:
                        break loop128;
                    }
                } while (true);

            }

            retval.stop = input.LT(-1);

            if (state.backtracking == 0) {

                retval.tree = (XQDTCommonTree)adaptor.rulePostProcessing(root_0);
                adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        } catch (RecognitionException re) {
            reportError(re);
            recover(input, re);
            retval.tree = (XQDTCommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        } finally {
        }
        return retval;
    }

    // $ANTLR end "p_PostfixExpr"

    public static class p_ArgumentList_return extends ParserRuleReturnScope {
        XQDTCommonTree tree;

        public Object getTree() {
            return tree;
        }
    };

    // $ANTLR start "p_ArgumentList"
    // XQueryParser.g:838:1: p_ArgumentList : LPAREN ( p_Argument ( COMMA p_Argument )* )? RPAREN ;
    public final XQueryParser.p_ArgumentList_return p_ArgumentList() throws RecognitionException {
        XQueryParser.p_ArgumentList_return retval = new XQueryParser.p_ArgumentList_return();
        retval.start = input.LT(1);

        XQDTCommonTree root_0 = null;

        CommonToken LPAREN346 = null;
        CommonToken COMMA348 = null;
        CommonToken RPAREN350 = null;
        XQueryParser.p_Argument_return p_Argument347 = null;

        XQueryParser.p_Argument_return p_Argument349 = null;

        XQDTCommonTree LPAREN346_tree = null;
        XQDTCommonTree COMMA348_tree = null;
        XQDTCommonTree RPAREN350_tree = null;

        try {
            // XQueryParser.g:839:9: ( LPAREN ( p_Argument ( COMMA p_Argument )* )? RPAREN )
            // XQueryParser.g:839:11: LPAREN ( p_Argument ( COMMA p_Argument )* )? RPAREN
            {
                root_0 = (XQDTCommonTree)adaptor.nil();

                LPAREN346 = (CommonToken)match(input, LPAREN, FOLLOW_LPAREN_in_p_ArgumentList7394);
                if (state.failed) {
                    return retval;
                }
                if (state.backtracking == 0) {
                    LPAREN346_tree = (XQDTCommonTree)adaptor.create(LPAREN346);
                    adaptor.addChild(root_0, LPAREN346_tree);
                }
                // XQueryParser.g:839:18: ( p_Argument ( COMMA p_Argument )* )?
                int alt130 = 2;
                int LA130_0 = input.LA(1);

                if (((LA130_0 >= ANCESTOR && LA130_0 <= QUOT_ER) || LA130_0 == LPAREN
                        || (LA130_0 >= DOLLAR && LA130_0 <= LBRACKET) || (LA130_0 >= QUESTION && LA130_0 <= SMALLER)
                        || (LA130_0 >= SLASH && LA130_0 <= DOT_DOT) || LA130_0 == ATTR_SIGN
                        || (LA130_0 >= APOS && LA130_0 <= QUOT) || LA130_0 == L_NCName
                        || (LA130_0 >= L_Pragma && LA130_0 <= L_DoubleLiteral) || LA130_0 == EXPLICITLY)) {
                    alt130 = 1;
                }
                switch (alt130) {
                case 1:
                    // XQueryParser.g:839:19: p_Argument ( COMMA p_Argument )*
                {
                    pushFollow(FOLLOW_p_Argument_in_p_ArgumentList7397);
                    p_Argument347 = p_Argument();

                    state._fsp--;
                    if (state.failed) {
                        return retval;
                    }
                    if (state.backtracking == 0) {
                        adaptor.addChild(root_0, p_Argument347.getTree());
                    }
                    // XQueryParser.g:839:30: ( COMMA p_Argument )*
                    loop129: do {
                        int alt129 = 2;
                        int LA129_0 = input.LA(1);

                        if ((LA129_0 == COMMA)) {
                            alt129 = 1;
                        }

                        switch (alt129) {
                        case 1:
                            // XQueryParser.g:839:31: COMMA p_Argument
                        {
                            COMMA348 = (CommonToken)match(input, COMMA, FOLLOW_COMMA_in_p_ArgumentList7400);
                            if (state.failed) {
                                return retval;
                            }
                            if (state.backtracking == 0) {
                                COMMA348_tree = (XQDTCommonTree)adaptor.create(COMMA348);
                                adaptor.addChild(root_0, COMMA348_tree);
                            }
                            pushFollow(FOLLOW_p_Argument_in_p_ArgumentList7402);
                            p_Argument349 = p_Argument();

                            state._fsp--;
                            if (state.failed) {
                                return retval;
                            }
                            if (state.backtracking == 0) {
                                adaptor.addChild(root_0, p_Argument349.getTree());
                            }

                        }
                        break;

                        default:
                            break loop129;
                        }
                    } while (true);

                }
                    break;

                }

                RPAREN350 = (CommonToken)match(input, RPAREN, FOLLOW_RPAREN_in_p_ArgumentList7408);
                if (state.failed) {
                    return retval;
                }
                if (state.backtracking == 0) {
                    RPAREN350_tree = (XQDTCommonTree)adaptor.create(RPAREN350);
                    adaptor.addChild(root_0, RPAREN350_tree);
                }

            }

            retval.stop = input.LT(-1);

            if (state.backtracking == 0) {

                retval.tree = (XQDTCommonTree)adaptor.rulePostProcessing(root_0);
                adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        } catch (RecognitionException re) {
            reportError(re);
            recover(input, re);
            retval.tree = (XQDTCommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        } finally {
        }
        return retval;
    }

    // $ANTLR end "p_ArgumentList"

    public static class p_PredicateList_return extends ParserRuleReturnScope {
        XQDTCommonTree tree;

        public Object getTree() {
            return tree;
        }
    };

    // $ANTLR start "p_PredicateList"
    // XQueryParser.g:843:1: p_PredicateList : ( p_Predicate )* ;
    public final XQueryParser.p_PredicateList_return p_PredicateList() throws RecognitionException {
        XQueryParser.p_PredicateList_return retval = new XQueryParser.p_PredicateList_return();
        retval.start = input.LT(1);

        XQDTCommonTree root_0 = null;

        XQueryParser.p_Predicate_return p_Predicate351 = null;

        try {
            // XQueryParser.g:844:9: ( ( p_Predicate )* )
            // XQueryParser.g:844:11: ( p_Predicate )*
            {
                root_0 = (XQDTCommonTree)adaptor.nil();

                // XQueryParser.g:844:11: ( p_Predicate )*
                loop131: do {
                    int alt131 = 2;
                    int LA131_0 = input.LA(1);

                    if ((LA131_0 == LSQUARE)) {
                        alt131 = 1;
                    }

                    switch (alt131) {
                    case 1:
                        // XQueryParser.g:844:11: p_Predicate
                    {
                        pushFollow(FOLLOW_p_Predicate_in_p_PredicateList7434);
                        p_Predicate351 = p_Predicate();

                        state._fsp--;
                        if (state.failed) {
                            return retval;
                        }
                        if (state.backtracking == 0) {
                            adaptor.addChild(root_0, p_Predicate351.getTree());
                        }

                    }
                    break;

                    default:
                        break loop131;
                    }
                } while (true);

            }

            retval.stop = input.LT(-1);

            if (state.backtracking == 0) {

                retval.tree = (XQDTCommonTree)adaptor.rulePostProcessing(root_0);
                adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        } catch (RecognitionException re) {
            reportError(re);
            recover(input, re);
            retval.tree = (XQDTCommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        } finally {
        }
        return retval;
    }

    // $ANTLR end "p_PredicateList"

    public static class p_Predicate_return extends ParserRuleReturnScope {
        XQDTCommonTree tree;

        public Object getTree() {
            return tree;
        }
    };

    // $ANTLR start "p_Predicate"
    // XQueryParser.g:848:1: p_Predicate : LSQUARE p_Expr[true,true] RSQUARE ;
    public final XQueryParser.p_Predicate_return p_Predicate() throws RecognitionException {
        XQueryParser.p_Predicate_return retval = new XQueryParser.p_Predicate_return();
        retval.start = input.LT(1);

        XQDTCommonTree root_0 = null;

        CommonToken LSQUARE352 = null;
        CommonToken RSQUARE354 = null;
        XQueryParser.p_Expr_return p_Expr353 = null;

        XQDTCommonTree LSQUARE352_tree = null;
        XQDTCommonTree RSQUARE354_tree = null;

        try {
            // XQueryParser.g:849:9: ( LSQUARE p_Expr[true,true] RSQUARE )
            // XQueryParser.g:849:11: LSQUARE p_Expr[true,true] RSQUARE
            {
                root_0 = (XQDTCommonTree)adaptor.nil();

                LSQUARE352 = (CommonToken)match(input, LSQUARE, FOLLOW_LSQUARE_in_p_Predicate7461);
                if (state.failed) {
                    return retval;
                }
                if (state.backtracking == 0) {
                    LSQUARE352_tree = (XQDTCommonTree)adaptor.create(LSQUARE352);
                    adaptor.addChild(root_0, LSQUARE352_tree);
                }
                pushFollow(FOLLOW_p_Expr_in_p_Predicate7463);
                p_Expr353 = p_Expr(true, true);

                state._fsp--;
                if (state.failed) {
                    return retval;
                }
                if (state.backtracking == 0) {
                    adaptor.addChild(root_0, p_Expr353.getTree());
                }
                RSQUARE354 = (CommonToken)match(input, RSQUARE, FOLLOW_RSQUARE_in_p_Predicate7466);
                if (state.failed) {
                    return retval;
                }
                if (state.backtracking == 0) {
                    RSQUARE354_tree = (XQDTCommonTree)adaptor.create(RSQUARE354);
                    adaptor.addChild(root_0, RSQUARE354_tree);
                }

            }

            retval.stop = input.LT(-1);

            if (state.backtracking == 0) {

                retval.tree = (XQDTCommonTree)adaptor.rulePostProcessing(root_0);
                adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        } catch (RecognitionException re) {
            reportError(re);
            recover(input, re);
            retval.tree = (XQDTCommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        } finally {
        }
        return retval;
    }

    // $ANTLR end "p_Predicate"

    public static class p_PrimaryExpr_return extends ParserRuleReturnScope {
        XQDTCommonTree tree;

        public Object getTree() {
            return tree;
        }
    };

    // $ANTLR start "p_PrimaryExpr"
    // XQueryParser.g:854:1: p_PrimaryExpr : ( ( LPAREN )=> p_ParenthesizedExpr | p_Literal | p_VarRef | p_ContextItemExpr | p_FunctionCall | p_OrderedExpr | p_UnorderedExpr | p_Constructor | p_BlockExpr );
    public final XQueryParser.p_PrimaryExpr_return p_PrimaryExpr() throws RecognitionException {
        XQueryParser.p_PrimaryExpr_return retval = new XQueryParser.p_PrimaryExpr_return();
        retval.start = input.LT(1);

        XQDTCommonTree root_0 = null;

        XQueryParser.p_ParenthesizedExpr_return p_ParenthesizedExpr355 = null;

        XQueryParser.p_Literal_return p_Literal356 = null;

        XQueryParser.p_VarRef_return p_VarRef357 = null;

        XQueryParser.p_ContextItemExpr_return p_ContextItemExpr358 = null;

        XQueryParser.p_FunctionCall_return p_FunctionCall359 = null;

        XQueryParser.p_OrderedExpr_return p_OrderedExpr360 = null;

        XQueryParser.p_UnorderedExpr_return p_UnorderedExpr361 = null;

        XQueryParser.p_Constructor_return p_Constructor362 = null;

        XQueryParser.p_BlockExpr_return p_BlockExpr363 = null;

        try {
            // XQueryParser.g:855:9: ( ( LPAREN )=> p_ParenthesizedExpr | p_Literal | p_VarRef | p_ContextItemExpr | p_FunctionCall | p_OrderedExpr | p_UnorderedExpr | p_Constructor | p_BlockExpr )
            int alt132 = 9;
            alt132 = dfa132.predict(input);
            switch (alt132) {
            case 1:
                // XQueryParser.g:855:11: ( LPAREN )=> p_ParenthesizedExpr
            {
                root_0 = (XQDTCommonTree)adaptor.nil();

                pushFollow(FOLLOW_p_ParenthesizedExpr_in_p_PrimaryExpr7499);
                p_ParenthesizedExpr355 = p_ParenthesizedExpr();

                state._fsp--;
                if (state.failed) {
                    return retval;
                }
                if (state.backtracking == 0) {
                    adaptor.addChild(root_0, p_ParenthesizedExpr355.getTree());
                }

            }
            break;
            case 2:
                // XQueryParser.g:856:11: p_Literal
            {
                root_0 = (XQDTCommonTree)adaptor.nil();

                pushFollow(FOLLOW_p_Literal_in_p_PrimaryExpr7511);
                p_Literal356 = p_Literal();

                state._fsp--;
                if (state.failed) {
                    return retval;
                }
                if (state.backtracking == 0) {
                    adaptor.addChild(root_0, p_Literal356.getTree());
                }

            }
            break;
            case 3:
                // XQueryParser.g:857:11: p_VarRef
            {
                root_0 = (XQDTCommonTree)adaptor.nil();

                pushFollow(FOLLOW_p_VarRef_in_p_PrimaryExpr7523);
                p_VarRef357 = p_VarRef();

                state._fsp--;
                if (state.failed) {
                    return retval;
                }
                if (state.backtracking == 0) {
                    adaptor.addChild(root_0, p_VarRef357.getTree());
                }

            }
            break;
            case 4:
                // XQueryParser.g:858:11: p_ContextItemExpr
            {
                root_0 = (XQDTCommonTree)adaptor.nil();

                pushFollow(FOLLOW_p_ContextItemExpr_in_p_PrimaryExpr7535);
                p_ContextItemExpr358 = p_ContextItemExpr();

                state._fsp--;
                if (state.failed) {
                    return retval;
                }
                if (state.backtracking == 0) {
                    adaptor.addChild(root_0, p_ContextItemExpr358.getTree());
                }

            }
            break;
            case 5:
                // XQueryParser.g:859:11: p_FunctionCall
            {
                root_0 = (XQDTCommonTree)adaptor.nil();

                pushFollow(FOLLOW_p_FunctionCall_in_p_PrimaryExpr7547);
                p_FunctionCall359 = p_FunctionCall();

                state._fsp--;
                if (state.failed) {
                    return retval;
                }
                if (state.backtracking == 0) {
                    adaptor.addChild(root_0, p_FunctionCall359.getTree());
                }

            }
            break;
            case 6:
                // XQueryParser.g:860:11: p_OrderedExpr
            {
                root_0 = (XQDTCommonTree)adaptor.nil();

                pushFollow(FOLLOW_p_OrderedExpr_in_p_PrimaryExpr7559);
                p_OrderedExpr360 = p_OrderedExpr();

                state._fsp--;
                if (state.failed) {
                    return retval;
                }
                if (state.backtracking == 0) {
                    adaptor.addChild(root_0, p_OrderedExpr360.getTree());
                }

            }
            break;
            case 7:
                // XQueryParser.g:861:11: p_UnorderedExpr
            {
                root_0 = (XQDTCommonTree)adaptor.nil();

                pushFollow(FOLLOW_p_UnorderedExpr_in_p_PrimaryExpr7571);
                p_UnorderedExpr361 = p_UnorderedExpr();

                state._fsp--;
                if (state.failed) {
                    return retval;
                }
                if (state.backtracking == 0) {
                    adaptor.addChild(root_0, p_UnorderedExpr361.getTree());
                }

            }
            break;
            case 8:
                // XQueryParser.g:862:11: p_Constructor
            {
                root_0 = (XQDTCommonTree)adaptor.nil();

                pushFollow(FOLLOW_p_Constructor_in_p_PrimaryExpr7583);
                p_Constructor362 = p_Constructor();

                state._fsp--;
                if (state.failed) {
                    return retval;
                }
                if (state.backtracking == 0) {
                    adaptor.addChild(root_0, p_Constructor362.getTree());
                }

            }
            break;
            case 9:
                // XQueryParser.g:865:11: p_BlockExpr
            {
                root_0 = (XQDTCommonTree)adaptor.nil();

                pushFollow(FOLLOW_p_BlockExpr_in_p_PrimaryExpr7597);
                p_BlockExpr363 = p_BlockExpr();

                state._fsp--;
                if (state.failed) {
                    return retval;
                }
                if (state.backtracking == 0) {
                    adaptor.addChild(root_0, p_BlockExpr363.getTree());
                }

            }
            break;

            }
            retval.stop = input.LT(-1);

            if (state.backtracking == 0) {

                retval.tree = (XQDTCommonTree)adaptor.rulePostProcessing(root_0);
                adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        } catch (RecognitionException re) {
            reportError(re);
            recover(input, re);
            retval.tree = (XQDTCommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        } finally {
        }
        return retval;
    }

    // $ANTLR end "p_PrimaryExpr"

    public static class p_Literal_return extends ParserRuleReturnScope {
        XQDTCommonTree tree;

        public Object getTree() {
            return tree;
        }
    };

    // $ANTLR start "p_Literal"
    // XQueryParser.g:869:1: p_Literal : ( p_NumericLiteral | p_StringLiteral );
    public final XQueryParser.p_Literal_return p_Literal() throws RecognitionException {
        XQueryParser.p_Literal_return retval = new XQueryParser.p_Literal_return();
        retval.start = input.LT(1);

        XQDTCommonTree root_0 = null;

        XQueryParser.p_NumericLiteral_return p_NumericLiteral364 = null;

        XQueryParser.p_StringLiteral_return p_StringLiteral365 = null;

        try {
            // XQueryParser.g:870:9: ( p_NumericLiteral | p_StringLiteral )
            int alt133 = 2;
            int LA133_0 = input.LA(1);

            if (((LA133_0 >= L_IntegerLiteral && LA133_0 <= L_DoubleLiteral))) {
                alt133 = 1;
            } else if (((LA133_0 >= APOS && LA133_0 <= QUOT))) {
                alt133 = 2;
            } else {
                if (state.backtracking > 0) {
                    state.failed = true;
                    return retval;
                }
                NoViableAltException nvae = new NoViableAltException("", 133, 0, input);

                throw nvae;
            }
            switch (alt133) {
            case 1:
                // XQueryParser.g:870:11: p_NumericLiteral
            {
                root_0 = (XQDTCommonTree)adaptor.nil();

                pushFollow(FOLLOW_p_NumericLiteral_in_p_Literal7623);
                p_NumericLiteral364 = p_NumericLiteral();

                state._fsp--;
                if (state.failed) {
                    return retval;
                }
                if (state.backtracking == 0) {
                    adaptor.addChild(root_0, p_NumericLiteral364.getTree());
                }

            }
            break;
            case 2:
                // XQueryParser.g:870:30: p_StringLiteral
            {
                root_0 = (XQDTCommonTree)adaptor.nil();

                pushFollow(FOLLOW_p_StringLiteral_in_p_Literal7627);
                p_StringLiteral365 = p_StringLiteral();

                state._fsp--;
                if (state.failed) {
                    return retval;
                }
                if (state.backtracking == 0) {
                    adaptor.addChild(root_0, p_StringLiteral365.getTree());
                }

            }
            break;

            }
            retval.stop = input.LT(-1);

            if (state.backtracking == 0) {

                retval.tree = (XQDTCommonTree)adaptor.rulePostProcessing(root_0);
                adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        } catch (RecognitionException re) {
            reportError(re);
            recover(input, re);
            retval.tree = (XQDTCommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        } finally {
        }
        return retval;
    }

    // $ANTLR end "p_Literal"

    public static class p_NumericLiteral_return extends ParserRuleReturnScope {
        XQDTCommonTree tree;

        public Object getTree() {
            return tree;
        }
    };

    // $ANTLR start "p_NumericLiteral"
    // XQueryParser.g:874:1: p_NumericLiteral : ( L_IntegerLiteral | L_DecimalLiteral | L_DoubleLiteral );
    public final XQueryParser.p_NumericLiteral_return p_NumericLiteral() throws RecognitionException {
        XQueryParser.p_NumericLiteral_return retval = new XQueryParser.p_NumericLiteral_return();
        retval.start = input.LT(1);

        XQDTCommonTree root_0 = null;

        CommonToken set366 = null;

        XQDTCommonTree set366_tree = null;

        try {
            // XQueryParser.g:875:9: ( L_IntegerLiteral | L_DecimalLiteral | L_DoubleLiteral )
            // XQueryParser.g:
            {
                root_0 = (XQDTCommonTree)adaptor.nil();

                set366 = (CommonToken)input.LT(1);
                if ((input.LA(1) >= L_IntegerLiteral && input.LA(1) <= L_DoubleLiteral)) {
                    input.consume();
                    if (state.backtracking == 0) {
                        adaptor.addChild(root_0, adaptor.create(set366));
                    }
                    state.errorRecovery = false;
                    state.failed = false;
                } else {
                    if (state.backtracking > 0) {
                        state.failed = true;
                        return retval;
                    }
                    MismatchedSetException mse = new MismatchedSetException(null, input);
                    throw mse;
                }

            }

            retval.stop = input.LT(-1);

            if (state.backtracking == 0) {

                retval.tree = (XQDTCommonTree)adaptor.rulePostProcessing(root_0);
                adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        } catch (RecognitionException re) {
            reportError(re);
            recover(input, re);
            retval.tree = (XQDTCommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        } finally {
        }
        return retval;
    }

    // $ANTLR end "p_NumericLiteral"

    public static class p_VarRef_return extends ParserRuleReturnScope {
        XQDTCommonTree tree;

        public Object getTree() {
            return tree;
        }
    };

    // $ANTLR start "p_VarRef"
    // XQueryParser.g:879:1: p_VarRef : DOLLAR p_VarName ;
    public final XQueryParser.p_VarRef_return p_VarRef() throws RecognitionException {
        XQueryParser.p_VarRef_return retval = new XQueryParser.p_VarRef_return();
        retval.start = input.LT(1);

        XQDTCommonTree root_0 = null;

        CommonToken DOLLAR367 = null;
        XQueryParser.p_VarName_return p_VarName368 = null;

        XQDTCommonTree DOLLAR367_tree = null;

        try {
            // XQueryParser.g:880:9: ( DOLLAR p_VarName )
            // XQueryParser.g:880:11: DOLLAR p_VarName
            {
                root_0 = (XQDTCommonTree)adaptor.nil();

                DOLLAR367 = (CommonToken)match(input, DOLLAR, FOLLOW_DOLLAR_in_p_VarRef7695);
                if (state.failed) {
                    return retval;
                }
                if (state.backtracking == 0) {
                    DOLLAR367_tree = (XQDTCommonTree)adaptor.create(DOLLAR367);
                    adaptor.addChild(root_0, DOLLAR367_tree);
                }
                pushFollow(FOLLOW_p_VarName_in_p_VarRef7697);
                p_VarName368 = p_VarName();

                state._fsp--;
                if (state.failed) {
                    return retval;
                }
                if (state.backtracking == 0) {
                    adaptor.addChild(root_0, p_VarName368.getTree());
                }

            }

            retval.stop = input.LT(-1);

            if (state.backtracking == 0) {

                retval.tree = (XQDTCommonTree)adaptor.rulePostProcessing(root_0);
                adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        } catch (RecognitionException re) {
            reportError(re);
            recover(input, re);
            retval.tree = (XQDTCommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        } finally {
        }
        return retval;
    }

    // $ANTLR end "p_VarRef"

    public static class p_VarName_return extends ParserRuleReturnScope {
        XQDTCommonTree tree;

        public Object getTree() {
            return tree;
        }
    };

    // $ANTLR start "p_VarName"
    // XQueryParser.g:884:1: p_VarName : p_QName ;
    public final XQueryParser.p_VarName_return p_VarName() throws RecognitionException {
        XQueryParser.p_VarName_return retval = new XQueryParser.p_VarName_return();
        retval.start = input.LT(1);

        XQDTCommonTree root_0 = null;

        XQueryParser.p_QName_return p_QName369 = null;

        try {
            // XQueryParser.g:885:9: ( p_QName )
            // XQueryParser.g:885:11: p_QName
            {
                root_0 = (XQDTCommonTree)adaptor.nil();

                pushFollow(FOLLOW_p_QName_in_p_VarName7723);
                p_QName369 = p_QName();

                state._fsp--;
                if (state.failed) {
                    return retval;
                }
                if (state.backtracking == 0) {
                    adaptor.addChild(root_0, p_QName369.getTree());
                }

            }

            retval.stop = input.LT(-1);

            if (state.backtracking == 0) {

                retval.tree = (XQDTCommonTree)adaptor.rulePostProcessing(root_0);
                adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        } catch (RecognitionException re) {
            reportError(re);
            recover(input, re);
            retval.tree = (XQDTCommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        } finally {
        }
        return retval;
    }

    // $ANTLR end "p_VarName"

    public static class p_ParenthesizedExpr_return extends ParserRuleReturnScope {
        XQDTCommonTree tree;

        public Object getTree() {
            return tree;
        }
    };

    // $ANTLR start "p_ParenthesizedExpr"
    // XQueryParser.g:889:1: p_ParenthesizedExpr : LPAREN ( p_Expr[true,true] )? RPAREN ;
    public final XQueryParser.p_ParenthesizedExpr_return p_ParenthesizedExpr() throws RecognitionException {
        XQueryParser.p_ParenthesizedExpr_return retval = new XQueryParser.p_ParenthesizedExpr_return();
        retval.start = input.LT(1);

        XQDTCommonTree root_0 = null;

        CommonToken LPAREN370 = null;
        CommonToken RPAREN372 = null;
        XQueryParser.p_Expr_return p_Expr371 = null;

        XQDTCommonTree LPAREN370_tree = null;
        XQDTCommonTree RPAREN372_tree = null;

        try {
            // XQueryParser.g:890:9: ( LPAREN ( p_Expr[true,true] )? RPAREN )
            // XQueryParser.g:890:11: LPAREN ( p_Expr[true,true] )? RPAREN
            {
                root_0 = (XQDTCommonTree)adaptor.nil();

                LPAREN370 = (CommonToken)match(input, LPAREN, FOLLOW_LPAREN_in_p_ParenthesizedExpr7749);
                if (state.failed) {
                    return retval;
                }
                if (state.backtracking == 0) {
                    LPAREN370_tree = (XQDTCommonTree)adaptor.create(LPAREN370);
                    adaptor.addChild(root_0, LPAREN370_tree);
                }
                // XQueryParser.g:890:18: ( p_Expr[true,true] )?
                int alt134 = 2;
                int LA134_0 = input.LA(1);

                if (((LA134_0 >= ANCESTOR && LA134_0 <= QUOT_ER) || LA134_0 == LPAREN
                        || (LA134_0 >= DOLLAR && LA134_0 <= LBRACKET) || (LA134_0 >= STAR && LA134_0 <= SMALLER)
                        || (LA134_0 >= SLASH && LA134_0 <= DOT_DOT) || LA134_0 == ATTR_SIGN
                        || (LA134_0 >= APOS && LA134_0 <= QUOT) || LA134_0 == L_NCName
                        || (LA134_0 >= L_Pragma && LA134_0 <= L_DoubleLiteral) || LA134_0 == EXPLICITLY)) {
                    alt134 = 1;
                }
                switch (alt134) {
                case 1:
                    // XQueryParser.g:890:18: p_Expr[true,true]
                {
                    pushFollow(FOLLOW_p_Expr_in_p_ParenthesizedExpr7751);
                    p_Expr371 = p_Expr(true, true);

                    state._fsp--;
                    if (state.failed) {
                        return retval;
                    }
                    if (state.backtracking == 0) {
                        adaptor.addChild(root_0, p_Expr371.getTree());
                    }

                }
                    break;

                }

                RPAREN372 = (CommonToken)match(input, RPAREN, FOLLOW_RPAREN_in_p_ParenthesizedExpr7755);
                if (state.failed) {
                    return retval;
                }
                if (state.backtracking == 0) {
                    RPAREN372_tree = (XQDTCommonTree)adaptor.create(RPAREN372);
                    adaptor.addChild(root_0, RPAREN372_tree);
                }

            }

            retval.stop = input.LT(-1);

            if (state.backtracking == 0) {

                retval.tree = (XQDTCommonTree)adaptor.rulePostProcessing(root_0);
                adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        } catch (RecognitionException re) {
            reportError(re);
            recover(input, re);
            retval.tree = (XQDTCommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        } finally {
        }
        return retval;
    }

    // $ANTLR end "p_ParenthesizedExpr"

    public static class p_ContextItemExpr_return extends ParserRuleReturnScope {
        XQDTCommonTree tree;

        public Object getTree() {
            return tree;
        }
    };

    // $ANTLR start "p_ContextItemExpr"
    // XQueryParser.g:894:1: p_ContextItemExpr : DOT ;
    public final XQueryParser.p_ContextItemExpr_return p_ContextItemExpr() throws RecognitionException {
        XQueryParser.p_ContextItemExpr_return retval = new XQueryParser.p_ContextItemExpr_return();
        retval.start = input.LT(1);

        XQDTCommonTree root_0 = null;

        CommonToken DOT373 = null;

        XQDTCommonTree DOT373_tree = null;

        try {
            // XQueryParser.g:895:9: ( DOT )
            // XQueryParser.g:895:11: DOT
            {
                root_0 = (XQDTCommonTree)adaptor.nil();

                DOT373 = (CommonToken)match(input, DOT, FOLLOW_DOT_in_p_ContextItemExpr7781);
                if (state.failed) {
                    return retval;
                }
                if (state.backtracking == 0) {
                    DOT373_tree = (XQDTCommonTree)adaptor.create(DOT373);
                    adaptor.addChild(root_0, DOT373_tree);
                }

            }

            retval.stop = input.LT(-1);

            if (state.backtracking == 0) {

                retval.tree = (XQDTCommonTree)adaptor.rulePostProcessing(root_0);
                adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        } catch (RecognitionException re) {
            reportError(re);
            recover(input, re);
            retval.tree = (XQDTCommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        } finally {
        }
        return retval;
    }

    // $ANTLR end "p_ContextItemExpr"

    public static class p_OrderedExpr_return extends ParserRuleReturnScope {
        XQDTCommonTree tree;

        public Object getTree() {
            return tree;
        }
    };

    // $ANTLR start "p_OrderedExpr"
    // XQueryParser.g:899:1: p_OrderedExpr : k= ORDERED LBRACKET p_Expr[true,true] RBRACKET ;
    public final XQueryParser.p_OrderedExpr_return p_OrderedExpr() throws RecognitionException {
        XQueryParser.p_OrderedExpr_return retval = new XQueryParser.p_OrderedExpr_return();
        retval.start = input.LT(1);

        XQDTCommonTree root_0 = null;

        CommonToken k = null;
        CommonToken LBRACKET374 = null;
        CommonToken RBRACKET376 = null;
        XQueryParser.p_Expr_return p_Expr375 = null;

        XQDTCommonTree k_tree = null;
        XQDTCommonTree LBRACKET374_tree = null;
        XQDTCommonTree RBRACKET376_tree = null;

        try {
            // XQueryParser.g:900:9: (k= ORDERED LBRACKET p_Expr[true,true] RBRACKET )
            // XQueryParser.g:900:11: k= ORDERED LBRACKET p_Expr[true,true] RBRACKET
            {
                root_0 = (XQDTCommonTree)adaptor.nil();

                k = (CommonToken)match(input, ORDERED, FOLLOW_ORDERED_in_p_OrderedExpr7809);
                if (state.failed) {
                    return retval;
                }
                if (state.backtracking == 0) {
                    k_tree = (XQDTCommonTree)adaptor.create(k);
                    adaptor.addChild(root_0, k_tree);
                }
                if (state.backtracking == 0) {
                    ak(k);
                }
                LBRACKET374 = (CommonToken)match(input, LBRACKET, FOLLOW_LBRACKET_in_p_OrderedExpr7813);
                if (state.failed) {
                    return retval;
                }
                if (state.backtracking == 0) {
                    LBRACKET374_tree = (XQDTCommonTree)adaptor.create(LBRACKET374);
                    adaptor.addChild(root_0, LBRACKET374_tree);
                }
                pushFollow(FOLLOW_p_Expr_in_p_OrderedExpr7815);
                p_Expr375 = p_Expr(true, true);

                state._fsp--;
                if (state.failed) {
                    return retval;
                }
                if (state.backtracking == 0) {
                    adaptor.addChild(root_0, p_Expr375.getTree());
                }
                RBRACKET376 = (CommonToken)match(input, RBRACKET, FOLLOW_RBRACKET_in_p_OrderedExpr7818);
                if (state.failed) {
                    return retval;
                }
                if (state.backtracking == 0) {
                    RBRACKET376_tree = (XQDTCommonTree)adaptor.create(RBRACKET376);
                    adaptor.addChild(root_0, RBRACKET376_tree);
                }

            }

            retval.stop = input.LT(-1);

            if (state.backtracking == 0) {

                retval.tree = (XQDTCommonTree)adaptor.rulePostProcessing(root_0);
                adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        } catch (RecognitionException re) {
            reportError(re);
            recover(input, re);
            retval.tree = (XQDTCommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        } finally {
        }
        return retval;
    }

    // $ANTLR end "p_OrderedExpr"

    public static class p_UnorderedExpr_return extends ParserRuleReturnScope {
        XQDTCommonTree tree;

        public Object getTree() {
            return tree;
        }
    };

    // $ANTLR start "p_UnorderedExpr"
    // XQueryParser.g:904:1: p_UnorderedExpr : k= UNORDERED LBRACKET p_Expr[true,true] RBRACKET ;
    public final XQueryParser.p_UnorderedExpr_return p_UnorderedExpr() throws RecognitionException {
        XQueryParser.p_UnorderedExpr_return retval = new XQueryParser.p_UnorderedExpr_return();
        retval.start = input.LT(1);

        XQDTCommonTree root_0 = null;

        CommonToken k = null;
        CommonToken LBRACKET377 = null;
        CommonToken RBRACKET379 = null;
        XQueryParser.p_Expr_return p_Expr378 = null;

        XQDTCommonTree k_tree = null;
        XQDTCommonTree LBRACKET377_tree = null;
        XQDTCommonTree RBRACKET379_tree = null;

        try {
            // XQueryParser.g:905:9: (k= UNORDERED LBRACKET p_Expr[true,true] RBRACKET )
            // XQueryParser.g:905:11: k= UNORDERED LBRACKET p_Expr[true,true] RBRACKET
            {
                root_0 = (XQDTCommonTree)adaptor.nil();

                k = (CommonToken)match(input, UNORDERED, FOLLOW_UNORDERED_in_p_UnorderedExpr7846);
                if (state.failed) {
                    return retval;
                }
                if (state.backtracking == 0) {
                    k_tree = (XQDTCommonTree)adaptor.create(k);
                    adaptor.addChild(root_0, k_tree);
                }
                if (state.backtracking == 0) {
                    ak(k);
                }
                LBRACKET377 = (CommonToken)match(input, LBRACKET, FOLLOW_LBRACKET_in_p_UnorderedExpr7850);
                if (state.failed) {
                    return retval;
                }
                if (state.backtracking == 0) {
                    LBRACKET377_tree = (XQDTCommonTree)adaptor.create(LBRACKET377);
                    adaptor.addChild(root_0, LBRACKET377_tree);
                }
                pushFollow(FOLLOW_p_Expr_in_p_UnorderedExpr7852);
                p_Expr378 = p_Expr(true, true);

                state._fsp--;
                if (state.failed) {
                    return retval;
                }
                if (state.backtracking == 0) {
                    adaptor.addChild(root_0, p_Expr378.getTree());
                }
                RBRACKET379 = (CommonToken)match(input, RBRACKET, FOLLOW_RBRACKET_in_p_UnorderedExpr7855);
                if (state.failed) {
                    return retval;
                }
                if (state.backtracking == 0) {
                    RBRACKET379_tree = (XQDTCommonTree)adaptor.create(RBRACKET379);
                    adaptor.addChild(root_0, RBRACKET379_tree);
                }

            }

            retval.stop = input.LT(-1);

            if (state.backtracking == 0) {

                retval.tree = (XQDTCommonTree)adaptor.rulePostProcessing(root_0);
                adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        } catch (RecognitionException re) {
            reportError(re);
            recover(input, re);
            retval.tree = (XQDTCommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        } finally {
        }
        return retval;
    }

    // $ANTLR end "p_UnorderedExpr"

    public static class p_FunctionCall_return extends ParserRuleReturnScope {
        XQDTCommonTree tree;

        public Object getTree() {
            return tree;
        }
    };

    // $ANTLR start "p_FunctionCall"
    // XQueryParser.g:910:1: p_FunctionCall : pg_FQName p_ArgumentList ;
    public final XQueryParser.p_FunctionCall_return p_FunctionCall() throws RecognitionException {
        XQueryParser.p_FunctionCall_return retval = new XQueryParser.p_FunctionCall_return();
        retval.start = input.LT(1);

        XQDTCommonTree root_0 = null;

        XQueryParser.pg_FQName_return pg_FQName380 = null;

        XQueryParser.p_ArgumentList_return p_ArgumentList381 = null;

        try {
            // XQueryParser.g:911:9: ( pg_FQName p_ArgumentList )
            // XQueryParser.g:911:11: pg_FQName p_ArgumentList
            {
                root_0 = (XQDTCommonTree)adaptor.nil();

                pushFollow(FOLLOW_pg_FQName_in_p_FunctionCall7882);
                pg_FQName380 = pg_FQName();

                state._fsp--;
                if (state.failed) {
                    return retval;
                }
                if (state.backtracking == 0) {
                    adaptor.addChild(root_0, pg_FQName380.getTree());
                }
                pushFollow(FOLLOW_p_ArgumentList_in_p_FunctionCall7884);
                p_ArgumentList381 = p_ArgumentList();

                state._fsp--;
                if (state.failed) {
                    return retval;
                }
                if (state.backtracking == 0) {
                    adaptor.addChild(root_0, p_ArgumentList381.getTree());
                }

            }

            retval.stop = input.LT(-1);

            if (state.backtracking == 0) {

                retval.tree = (XQDTCommonTree)adaptor.rulePostProcessing(root_0);
                adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        } catch (RecognitionException re) {
            reportError(re);
            recover(input, re);
            retval.tree = (XQDTCommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        } finally {
        }
        return retval;
    }

    // $ANTLR end "p_FunctionCall"

    public static class p_Argument_return extends ParserRuleReturnScope {
        XQDTCommonTree tree;

        public Object getTree() {
            return tree;
        }
    };

    // $ANTLR start "p_Argument"
    // XQueryParser.g:915:1: p_Argument : ( p_ExprSingle[true] | p_ArgumentPlaceholder );
    public final XQueryParser.p_Argument_return p_Argument() throws RecognitionException {
        XQueryParser.p_Argument_return retval = new XQueryParser.p_Argument_return();
        retval.start = input.LT(1);

        XQDTCommonTree root_0 = null;

        XQueryParser.p_ExprSingle_return p_ExprSingle382 = null;

        XQueryParser.p_ArgumentPlaceholder_return p_ArgumentPlaceholder383 = null;

        try {
            // XQueryParser.g:916:9: ( p_ExprSingle[true] | p_ArgumentPlaceholder )
            int alt135 = 2;
            int LA135_0 = input.LA(1);

            if (((LA135_0 >= ANCESTOR && LA135_0 <= QUOT_ER) || LA135_0 == LPAREN
                    || (LA135_0 >= DOLLAR && LA135_0 <= LBRACKET) || (LA135_0 >= STAR && LA135_0 <= SMALLER)
                    || (LA135_0 >= SLASH && LA135_0 <= DOT_DOT) || LA135_0 == ATTR_SIGN
                    || (LA135_0 >= APOS && LA135_0 <= QUOT) || LA135_0 == L_NCName
                    || (LA135_0 >= L_Pragma && LA135_0 <= L_DoubleLiteral) || LA135_0 == EXPLICITLY)) {
                alt135 = 1;
            } else if ((LA135_0 == QUESTION)) {
                alt135 = 2;
            } else {
                if (state.backtracking > 0) {
                    state.failed = true;
                    return retval;
                }
                NoViableAltException nvae = new NoViableAltException("", 135, 0, input);

                throw nvae;
            }
            switch (alt135) {
            case 1:
                // XQueryParser.g:916:11: p_ExprSingle[true]
            {
                root_0 = (XQDTCommonTree)adaptor.nil();

                pushFollow(FOLLOW_p_ExprSingle_in_p_Argument7910);
                p_ExprSingle382 = p_ExprSingle(true);

                state._fsp--;
                if (state.failed) {
                    return retval;
                }
                if (state.backtracking == 0) {
                    adaptor.addChild(root_0, p_ExprSingle382.getTree());
                }

            }
            break;
            case 2:
                // XQueryParser.g:916:32: p_ArgumentPlaceholder
            {
                root_0 = (XQDTCommonTree)adaptor.nil();

                pushFollow(FOLLOW_p_ArgumentPlaceholder_in_p_Argument7915);
                p_ArgumentPlaceholder383 = p_ArgumentPlaceholder();

                state._fsp--;
                if (state.failed) {
                    return retval;
                }
                if (state.backtracking == 0) {
                    adaptor.addChild(root_0, p_ArgumentPlaceholder383.getTree());
                }

            }
            break;

            }
            retval.stop = input.LT(-1);

            if (state.backtracking == 0) {

                retval.tree = (XQDTCommonTree)adaptor.rulePostProcessing(root_0);
                adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        } catch (RecognitionException re) {
            reportError(re);
            recover(input, re);
            retval.tree = (XQDTCommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        } finally {
        }
        return retval;
    }

    // $ANTLR end "p_Argument"

    public static class p_ArgumentPlaceholder_return extends ParserRuleReturnScope {
        XQDTCommonTree tree;

        public Object getTree() {
            return tree;
        }
    };

    // $ANTLR start "p_ArgumentPlaceholder"
    // XQueryParser.g:920:1: p_ArgumentPlaceholder : QUESTION ;
    public final XQueryParser.p_ArgumentPlaceholder_return p_ArgumentPlaceholder() throws RecognitionException {
        XQueryParser.p_ArgumentPlaceholder_return retval = new XQueryParser.p_ArgumentPlaceholder_return();
        retval.start = input.LT(1);

        XQDTCommonTree root_0 = null;

        CommonToken QUESTION384 = null;

        XQDTCommonTree QUESTION384_tree = null;

        try {
            // XQueryParser.g:921:9: ( QUESTION )
            // XQueryParser.g:921:11: QUESTION
            {
                root_0 = (XQDTCommonTree)adaptor.nil();

                QUESTION384 = (CommonToken)match(input, QUESTION, FOLLOW_QUESTION_in_p_ArgumentPlaceholder7941);
                if (state.failed) {
                    return retval;
                }
                if (state.backtracking == 0) {
                    QUESTION384_tree = (XQDTCommonTree)adaptor.create(QUESTION384);
                    adaptor.addChild(root_0, QUESTION384_tree);
                }

            }

            retval.stop = input.LT(-1);

            if (state.backtracking == 0) {

                retval.tree = (XQDTCommonTree)adaptor.rulePostProcessing(root_0);
                adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        } catch (RecognitionException re) {
            reportError(re);
            recover(input, re);
            retval.tree = (XQDTCommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        } finally {
        }
        return retval;
    }

    // $ANTLR end "p_ArgumentPlaceholder"

    public static class p_Constructor_return extends ParserRuleReturnScope {
        XQDTCommonTree tree;

        public Object getTree() {
            return tree;
        }
    };

    // $ANTLR start "p_Constructor"
    // XQueryParser.g:925:1: p_Constructor : ( p_DirectConstructor | p_ComputedConstructor );
    public final XQueryParser.p_Constructor_return p_Constructor() throws RecognitionException {
        XQueryParser.p_Constructor_return retval = new XQueryParser.p_Constructor_return();
        retval.start = input.LT(1);

        XQDTCommonTree root_0 = null;

        XQueryParser.p_DirectConstructor_return p_DirectConstructor385 = null;

        XQueryParser.p_ComputedConstructor_return p_ComputedConstructor386 = null;

        try {
            // XQueryParser.g:926:9: ( p_DirectConstructor | p_ComputedConstructor )
            int alt136 = 2;
            int LA136_0 = input.LA(1);

            if ((LA136_0 == SMALLER || (LA136_0 >= L_DirCommentConstructor && LA136_0 <= L_DirPIConstructor))) {
                alt136 = 1;
            } else if ((LA136_0 == ATTRIBUTE || LA136_0 == COMMENT || LA136_0 == DOCUMENT || LA136_0 == ELEMENT
                    || LA136_0 == NAMESPACE || LA136_0 == PROCESSING_INSTRUCTION || LA136_0 == TEXT)) {
                alt136 = 2;
            } else if ((LA136_0 == BINARY) && ((lc(MLS)))) {
                alt136 = 2;
            } else {
                if (state.backtracking > 0) {
                    state.failed = true;
                    return retval;
                }
                NoViableAltException nvae = new NoViableAltException("", 136, 0, input);

                throw nvae;
            }
            switch (alt136) {
            case 1:
                // XQueryParser.g:926:11: p_DirectConstructor
            {
                root_0 = (XQDTCommonTree)adaptor.nil();

                pushFollow(FOLLOW_p_DirectConstructor_in_p_Constructor7967);
                p_DirectConstructor385 = p_DirectConstructor();

                state._fsp--;
                if (state.failed) {
                    return retval;
                }
                if (state.backtracking == 0) {
                    adaptor.addChild(root_0, p_DirectConstructor385.getTree());
                }

            }
            break;
            case 2:
                // XQueryParser.g:927:11: p_ComputedConstructor
            {
                root_0 = (XQDTCommonTree)adaptor.nil();

                pushFollow(FOLLOW_p_ComputedConstructor_in_p_Constructor7979);
                p_ComputedConstructor386 = p_ComputedConstructor();

                state._fsp--;
                if (state.failed) {
                    return retval;
                }
                if (state.backtracking == 0) {
                    adaptor.addChild(root_0, p_ComputedConstructor386.getTree());
                }

            }
            break;

            }
            retval.stop = input.LT(-1);

            if (state.backtracking == 0) {

                retval.tree = (XQDTCommonTree)adaptor.rulePostProcessing(root_0);
                adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        } catch (RecognitionException re) {
            reportError(re);
            recover(input, re);
            retval.tree = (XQDTCommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        } finally {
        }
        return retval;
    }

    // $ANTLR end "p_Constructor"

    public static class p_DirectConstructor_return extends ParserRuleReturnScope {
        XQDTCommonTree tree;

        public Object getTree() {
            return tree;
        }
    };

    // $ANTLR start "p_DirectConstructor"
    // XQueryParser.g:931:1: p_DirectConstructor : ( p_DirElemConstructor | p_DirCommentConstructor | p_DirPIConstructor );
    public final XQueryParser.p_DirectConstructor_return p_DirectConstructor() throws RecognitionException {
        XQueryParser.p_DirectConstructor_return retval = new XQueryParser.p_DirectConstructor_return();
        retval.start = input.LT(1);

        XQDTCommonTree root_0 = null;

        XQueryParser.p_DirElemConstructor_return p_DirElemConstructor387 = null;

        XQueryParser.p_DirCommentConstructor_return p_DirCommentConstructor388 = null;

        XQueryParser.p_DirPIConstructor_return p_DirPIConstructor389 = null;

        try {
            // XQueryParser.g:932:9: ( p_DirElemConstructor | p_DirCommentConstructor | p_DirPIConstructor )
            int alt137 = 3;
            switch (input.LA(1)) {
            case SMALLER: {
                alt137 = 1;
            }
                break;
            case L_DirCommentConstructor: {
                alt137 = 2;
            }
                break;
            case L_DirPIConstructor: {
                alt137 = 3;
            }
                break;
            default:
                if (state.backtracking > 0) {
                    state.failed = true;
                    return retval;
                }
                NoViableAltException nvae = new NoViableAltException("", 137, 0, input);

                throw nvae;
            }

            switch (alt137) {
            case 1:
                // XQueryParser.g:932:11: p_DirElemConstructor
            {
                root_0 = (XQDTCommonTree)adaptor.nil();

                pushFollow(FOLLOW_p_DirElemConstructor_in_p_DirectConstructor8005);
                p_DirElemConstructor387 = p_DirElemConstructor();

                state._fsp--;
                if (state.failed) {
                    return retval;
                }
                if (state.backtracking == 0) {
                    adaptor.addChild(root_0, p_DirElemConstructor387.getTree());
                }

            }
            break;
            case 2:
                // XQueryParser.g:933:11: p_DirCommentConstructor
            {
                root_0 = (XQDTCommonTree)adaptor.nil();

                pushFollow(FOLLOW_p_DirCommentConstructor_in_p_DirectConstructor8017);
                p_DirCommentConstructor388 = p_DirCommentConstructor();

                state._fsp--;
                if (state.failed) {
                    return retval;
                }
                if (state.backtracking == 0) {
                    adaptor.addChild(root_0, p_DirCommentConstructor388.getTree());
                }

            }
            break;
            case 3:
                // XQueryParser.g:934:11: p_DirPIConstructor
            {
                root_0 = (XQDTCommonTree)adaptor.nil();

                pushFollow(FOLLOW_p_DirPIConstructor_in_p_DirectConstructor8029);
                p_DirPIConstructor389 = p_DirPIConstructor();

                state._fsp--;
                if (state.failed) {
                    return retval;
                }
                if (state.backtracking == 0) {
                    adaptor.addChild(root_0, p_DirPIConstructor389.getTree());
                }

            }
            break;

            }
            retval.stop = input.LT(-1);

            if (state.backtracking == 0) {

                retval.tree = (XQDTCommonTree)adaptor.rulePostProcessing(root_0);
                adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        } catch (RecognitionException re) {
            reportError(re);
            recover(input, re);
            retval.tree = (XQDTCommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        } finally {
        }
        return retval;
    }

    // $ANTLR end "p_DirectConstructor"

    public static class p_DirElemConstructor_return extends ParserRuleReturnScope {
        XQDTCommonTree tree;

        public Object getTree() {
            return tree;
        }
    };

    // $ANTLR start "p_DirElemConstructor"
    // XQueryParser.g:938:1: p_DirElemConstructor : SMALLER p_QName p_DirAttributeList ( EMPTY_CLOSE_TAG | ( GREATER ( pm_DirElemContent )* CLOSE_TAG p_QName ( S )? GREATER ) ) -> ^( DirElemConstructor ^( DirAttributeList ( p_DirAttributeList )* ) ^( DirElemContent ( pm_DirElemContent )* ) ) ;
    public final XQueryParser.p_DirElemConstructor_return p_DirElemConstructor() throws RecognitionException {
        XQueryParser.p_DirElemConstructor_return retval = new XQueryParser.p_DirElemConstructor_return();
        retval.start = input.LT(1);

        XQDTCommonTree root_0 = null;

        CommonToken SMALLER390 = null;
        CommonToken EMPTY_CLOSE_TAG393 = null;
        CommonToken GREATER394 = null;
        CommonToken CLOSE_TAG396 = null;
        CommonToken S398 = null;
        CommonToken GREATER399 = null;
        XQueryParser.p_QName_return p_QName391 = null;

        XQueryParser.p_DirAttributeList_return p_DirAttributeList392 = null;

        XQueryParser.pm_DirElemContent_return pm_DirElemContent395 = null;

        XQueryParser.p_QName_return p_QName397 = null;

        XQDTCommonTree SMALLER390_tree = null;
        XQDTCommonTree EMPTY_CLOSE_TAG393_tree = null;
        XQDTCommonTree GREATER394_tree = null;
        XQDTCommonTree CLOSE_TAG396_tree = null;
        XQDTCommonTree S398_tree = null;
        XQDTCommonTree GREATER399_tree = null;
        RewriteRuleTokenStream stream_CLOSE_TAG = new RewriteRuleTokenStream(adaptor, "token CLOSE_TAG");
        RewriteRuleTokenStream stream_GREATER = new RewriteRuleTokenStream(adaptor, "token GREATER");
        RewriteRuleTokenStream stream_S = new RewriteRuleTokenStream(adaptor, "token S");
        RewriteRuleTokenStream stream_EMPTY_CLOSE_TAG = new RewriteRuleTokenStream(adaptor, "token EMPTY_CLOSE_TAG");
        RewriteRuleTokenStream stream_SMALLER = new RewriteRuleTokenStream(adaptor, "token SMALLER");
        RewriteRuleSubtreeStream stream_p_DirAttributeList = new RewriteRuleSubtreeStream(adaptor,
                "rule p_DirAttributeList");
        RewriteRuleSubtreeStream stream_pm_DirElemContent = new RewriteRuleSubtreeStream(adaptor,
                "rule pm_DirElemContent");
        RewriteRuleSubtreeStream stream_p_QName = new RewriteRuleSubtreeStream(adaptor, "rule p_QName");
        try {
            // XQueryParser.g:939:9: ( SMALLER p_QName p_DirAttributeList ( EMPTY_CLOSE_TAG | ( GREATER ( pm_DirElemContent )* CLOSE_TAG p_QName ( S )? GREATER ) ) -> ^( DirElemConstructor ^( DirAttributeList ( p_DirAttributeList )* ) ^( DirElemContent ( pm_DirElemContent )* ) ) )
            // XQueryParser.g:939:11: SMALLER p_QName p_DirAttributeList ( EMPTY_CLOSE_TAG | ( GREATER ( pm_DirElemContent )* CLOSE_TAG p_QName ( S )? GREATER ) )
            {
                SMALLER390 = (CommonToken)match(input, SMALLER, FOLLOW_SMALLER_in_p_DirElemConstructor8056);
                if (state.failed) {
                    return retval;
                }
                if (state.backtracking == 0) {
                    stream_SMALLER.add(SMALLER390);
                }

                if (state.backtracking == 0) {
                    pushXMLLexer();
                }
                pushFollow(FOLLOW_p_QName_in_p_DirElemConstructor8070);
                p_QName391 = p_QName();

                state._fsp--;
                if (state.failed) {
                    return retval;
                }
                if (state.backtracking == 0) {
                    stream_p_QName.add(p_QName391.getTree());
                }
                pushFollow(FOLLOW_p_DirAttributeList_in_p_DirElemConstructor8072);
                p_DirAttributeList392 = p_DirAttributeList();

                state._fsp--;
                if (state.failed) {
                    return retval;
                }
                if (state.backtracking == 0) {
                    stream_p_DirAttributeList.add(p_DirAttributeList392.getTree());
                }
                // XQueryParser.g:941:11: ( EMPTY_CLOSE_TAG | ( GREATER ( pm_DirElemContent )* CLOSE_TAG p_QName ( S )? GREATER ) )
                int alt140 = 2;
                int LA140_0 = input.LA(1);

                if ((LA140_0 == EMPTY_CLOSE_TAG)) {
                    alt140 = 1;
                } else if ((LA140_0 == GREATER)) {
                    alt140 = 2;
                } else {
                    if (state.backtracking > 0) {
                        state.failed = true;
                        return retval;
                    }
                    NoViableAltException nvae = new NoViableAltException("", 140, 0, input);

                    throw nvae;
                }
                switch (alt140) {
                case 1:
                    // XQueryParser.g:941:12: EMPTY_CLOSE_TAG
                {
                    EMPTY_CLOSE_TAG393 = (CommonToken)match(input, EMPTY_CLOSE_TAG,
                            FOLLOW_EMPTY_CLOSE_TAG_in_p_DirElemConstructor8086);
                    if (state.failed) {
                        return retval;
                    }
                    if (state.backtracking == 0) {
                        stream_EMPTY_CLOSE_TAG.add(EMPTY_CLOSE_TAG393);
                    }

                }
                    break;
                case 2:
                    // XQueryParser.g:941:30: ( GREATER ( pm_DirElemContent )* CLOSE_TAG p_QName ( S )? GREATER )
                {
                    // XQueryParser.g:941:30: ( GREATER ( pm_DirElemContent )* CLOSE_TAG p_QName ( S )? GREATER )
                    // XQueryParser.g:941:31: GREATER ( pm_DirElemContent )* CLOSE_TAG p_QName ( S )? GREATER
                    {
                        GREATER394 = (CommonToken)match(input, GREATER, FOLLOW_GREATER_in_p_DirElemConstructor8091);
                        if (state.failed) {
                            return retval;
                        }
                        if (state.backtracking == 0) {
                            stream_GREATER.add(GREATER394);
                        }

                        // XQueryParser.g:941:39: ( pm_DirElemContent )*
                        loop138: do {
                            int alt138 = 2;
                            int LA138_0 = input.LA(1);

                            if (((LA138_0 >= L_ElementContentChar && LA138_0 <= ESCAPE_RBRACKET) || LA138_0 == LBRACKET
                                    || LA138_0 == SMALLER || (LA138_0 >= L_DirCommentConstructor && LA138_0 <= L_DirPIConstructor))) {
                                alt138 = 1;
                            }

                            switch (alt138) {
                            case 1:
                                // XQueryParser.g:941:39: pm_DirElemContent
                            {
                                pushFollow(FOLLOW_pm_DirElemContent_in_p_DirElemConstructor8093);
                                pm_DirElemContent395 = pm_DirElemContent();

                                state._fsp--;
                                if (state.failed) {
                                    return retval;
                                }
                                if (state.backtracking == 0) {
                                    stream_pm_DirElemContent.add(pm_DirElemContent395.getTree());
                                }

                            }
                            break;

                            default:
                                break loop138;
                            }
                        } while (true);

                        CLOSE_TAG396 = (CommonToken)match(input, CLOSE_TAG,
                                FOLLOW_CLOSE_TAG_in_p_DirElemConstructor8096);
                        if (state.failed) {
                            return retval;
                        }
                        if (state.backtracking == 0) {
                            stream_CLOSE_TAG.add(CLOSE_TAG396);
                        }

                        pushFollow(FOLLOW_p_QName_in_p_DirElemConstructor8098);
                        p_QName397 = p_QName();

                        state._fsp--;
                        if (state.failed) {
                            return retval;
                        }
                        if (state.backtracking == 0) {
                            stream_p_QName.add(p_QName397.getTree());
                        }
                        // XQueryParser.g:941:76: ( S )?
                        int alt139 = 2;
                        int LA139_0 = input.LA(1);

                        if ((LA139_0 == S)) {
                            alt139 = 1;
                        }
                        switch (alt139) {
                        case 1:
                            // XQueryParser.g:941:76: S
                        {
                            S398 = (CommonToken)match(input, S, FOLLOW_S_in_p_DirElemConstructor8100);
                            if (state.failed) {
                                return retval;
                            }
                            if (state.backtracking == 0) {
                                stream_S.add(S398);
                            }

                        }
                            break;

                        }

                        GREATER399 = (CommonToken)match(input, GREATER, FOLLOW_GREATER_in_p_DirElemConstructor8103);
                        if (state.failed) {
                            return retval;
                        }
                        if (state.backtracking == 0) {
                            stream_GREATER.add(GREATER399);
                        }

                    }

                }
                    break;

                }

                // AST REWRITE
                // elements: p_DirAttributeList, pm_DirElemContent
                // token labels:
                // rule labels: retval
                // token list labels:
                // rule list labels:
                // wildcard labels:
                if (state.backtracking == 0) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval = new RewriteRuleSubtreeStream(adaptor, "rule retval",
                            retval != null ? retval.tree : null);

                    root_0 = (XQDTCommonTree)adaptor.nil();
                    // 942:17: -> ^( DirElemConstructor ^( DirAttributeList ( p_DirAttributeList )* ) ^( DirElemContent ( pm_DirElemContent )* ) )
                    {
                        // XQueryParser.g:942:20: ^( DirElemConstructor ^( DirAttributeList ( p_DirAttributeList )* ) ^( DirElemContent ( pm_DirElemContent )* ) )
                        {
                            XQDTCommonTree root_1 = (XQDTCommonTree)adaptor.nil();
                            root_1 = (XQDTCommonTree)adaptor.becomeRoot(
                                    adaptor.create(DirElemConstructor, "DirElemConstructor"), root_1);

                            // XQueryParser.g:942:41: ^( DirAttributeList ( p_DirAttributeList )* )
                            {
                                XQDTCommonTree root_2 = (XQDTCommonTree)adaptor.nil();
                                root_2 = (XQDTCommonTree)adaptor.becomeRoot(
                                        adaptor.create(DirAttributeList, "DirAttributeList"), root_2);

                                // XQueryParser.g:942:60: ( p_DirAttributeList )*
                                while (stream_p_DirAttributeList.hasNext()) {
                                    adaptor.addChild(root_2, stream_p_DirAttributeList.nextTree());

                                }
                                stream_p_DirAttributeList.reset();

                                adaptor.addChild(root_1, root_2);
                            }
                            // XQueryParser.g:942:81: ^( DirElemContent ( pm_DirElemContent )* )
                            {
                                XQDTCommonTree root_2 = (XQDTCommonTree)adaptor.nil();
                                root_2 = (XQDTCommonTree)adaptor.becomeRoot(
                                        adaptor.create(DirElemContent, "DirElemContent"), root_2);

                                // XQueryParser.g:942:98: ( pm_DirElemContent )*
                                while (stream_pm_DirElemContent.hasNext()) {
                                    adaptor.addChild(root_2, stream_pm_DirElemContent.nextTree());

                                }
                                stream_pm_DirElemContent.reset();

                                adaptor.addChild(root_1, root_2);
                            }

                            adaptor.addChild(root_0, root_1);
                        }

                    }

                    retval.tree = root_0;
                }
            }

            retval.stop = input.LT(-1);

            if (state.backtracking == 0) {

                retval.tree = (XQDTCommonTree)adaptor.rulePostProcessing(root_0);
                adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        } catch (RecognitionException re) {
            reportError(re);
            recover(input, re);
            retval.tree = (XQDTCommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        } finally {
            popLexer();
        }
        return retval;
    }

    // $ANTLR end "p_DirElemConstructor"

    public static class p_DirAttributeList_return extends ParserRuleReturnScope {
        XQDTCommonTree tree;

        public Object getTree() {
            return tree;
        }
    };

    // $ANTLR start "p_DirAttributeList"
    // XQueryParser.g:947:1: p_DirAttributeList : ( S ( p_QName ( S )? EQUAL ( S )? p_DirAttributeValue )? )* ;
    public final XQueryParser.p_DirAttributeList_return p_DirAttributeList() throws RecognitionException {
        XQueryParser.p_DirAttributeList_return retval = new XQueryParser.p_DirAttributeList_return();
        retval.start = input.LT(1);

        XQDTCommonTree root_0 = null;

        CommonToken S400 = null;
        CommonToken S402 = null;
        CommonToken EQUAL403 = null;
        CommonToken S404 = null;
        XQueryParser.p_QName_return p_QName401 = null;

        XQueryParser.p_DirAttributeValue_return p_DirAttributeValue405 = null;

        XQDTCommonTree S400_tree = null;
        XQDTCommonTree S402_tree = null;
        XQDTCommonTree EQUAL403_tree = null;
        XQDTCommonTree S404_tree = null;

        try {
            // XQueryParser.g:948:9: ( ( S ( p_QName ( S )? EQUAL ( S )? p_DirAttributeValue )? )* )
            // XQueryParser.g:948:11: ( S ( p_QName ( S )? EQUAL ( S )? p_DirAttributeValue )? )*
            {
                root_0 = (XQDTCommonTree)adaptor.nil();

                // XQueryParser.g:948:11: ( S ( p_QName ( S )? EQUAL ( S )? p_DirAttributeValue )? )*
                loop144: do {
                    int alt144 = 2;
                    int LA144_0 = input.LA(1);

                    if ((LA144_0 == S)) {
                        alt144 = 1;
                    }

                    switch (alt144) {
                    case 1:
                        // XQueryParser.g:948:12: S ( p_QName ( S )? EQUAL ( S )? p_DirAttributeValue )?
                    {
                        S400 = (CommonToken)match(input, S, FOLLOW_S_in_p_DirAttributeList8180);
                        if (state.failed) {
                            return retval;
                        }
                        if (state.backtracking == 0) {
                            S400_tree = (XQDTCommonTree)adaptor.create(S400);
                            adaptor.addChild(root_0, S400_tree);
                        }
                        // XQueryParser.g:948:14: ( p_QName ( S )? EQUAL ( S )? p_DirAttributeValue )?
                        int alt143 = 2;
                        int LA143_0 = input.LA(1);

                        if (((LA143_0 >= ANCESTOR && LA143_0 <= SKIP) || (LA143_0 >= VALUE && LA143_0 <= QUOT_ER)
                                || LA143_0 == L_NCName || LA143_0 == EXPLICITLY)) {
                            alt143 = 1;
                        }
                        switch (alt143) {
                        case 1:
                            // XQueryParser.g:948:15: p_QName ( S )? EQUAL ( S )? p_DirAttributeValue
                        {
                            pushFollow(FOLLOW_p_QName_in_p_DirAttributeList8183);
                            p_QName401 = p_QName();

                            state._fsp--;
                            if (state.failed) {
                                return retval;
                            }
                            if (state.backtracking == 0) {
                                adaptor.addChild(root_0, p_QName401.getTree());
                            }
                            // XQueryParser.g:948:23: ( S )?
                            int alt141 = 2;
                            int LA141_0 = input.LA(1);

                            if ((LA141_0 == S)) {
                                alt141 = 1;
                            }
                            switch (alt141) {
                            case 1:
                                // XQueryParser.g:948:23: S
                            {
                                S402 = (CommonToken)match(input, S, FOLLOW_S_in_p_DirAttributeList8185);
                                if (state.failed) {
                                    return retval;
                                }
                                if (state.backtracking == 0) {
                                    S402_tree = (XQDTCommonTree)adaptor.create(S402);
                                    adaptor.addChild(root_0, S402_tree);
                                }

                            }
                            break;

                            }

                            EQUAL403 = (CommonToken)match(input, EQUAL, FOLLOW_EQUAL_in_p_DirAttributeList8188);
                            if (state.failed) {
                                return retval;
                            }
                            if (state.backtracking == 0) {
                                EQUAL403_tree = (XQDTCommonTree)adaptor.create(EQUAL403);
                                adaptor.addChild(root_0, EQUAL403_tree);
                            }
                            // XQueryParser.g:948:32: ( S )?
                            int alt142 = 2;
                            int LA142_0 = input.LA(1);

                            if ((LA142_0 == S)) {
                                alt142 = 1;
                            }
                            switch (alt142) {
                            case 1:
                                // XQueryParser.g:948:32: S
                            {
                                S404 = (CommonToken)match(input, S, FOLLOW_S_in_p_DirAttributeList8190);
                                if (state.failed) {
                                    return retval;
                                }
                                if (state.backtracking == 0) {
                                    S404_tree = (XQDTCommonTree)adaptor.create(S404);
                                    adaptor.addChild(root_0, S404_tree);
                                }

                            }
                            break;

                            }

                            pushFollow(FOLLOW_p_DirAttributeValue_in_p_DirAttributeList8193);
                            p_DirAttributeValue405 = p_DirAttributeValue();

                            state._fsp--;
                            if (state.failed) {
                                return retval;
                            }
                            if (state.backtracking == 0) {
                                adaptor.addChild(root_0, p_DirAttributeValue405.getTree());
                            }

                        }
                        break;

                        }

                    }
                    break;

                    default:
                        break loop144;
                    }
                } while (true);

            }

            retval.stop = input.LT(-1);

            if (state.backtracking == 0) {

                retval.tree = (XQDTCommonTree)adaptor.rulePostProcessing(root_0);
                adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        } catch (RecognitionException re) {
            reportError(re);
            recover(input, re);
            retval.tree = (XQDTCommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        } finally {
        }
        return retval;
    }

    // $ANTLR end "p_DirAttributeList"

    public static class p_DirAttributeValue_return extends ParserRuleReturnScope {
        XQDTCommonTree tree;

        public Object getTree() {
            return tree;
        }
    };

    // $ANTLR start "p_DirAttributeValue"
    // XQueryParser.g:952:1: p_DirAttributeValue : ( ( QUOT ( ESCAPE_QUOT | APOS | p_QuotAttrValueContent )* QUOT ) -> ^( DirAttributeValue ( p_QuotAttrValueContent )* ) | ( APOS ( ESCAPE_APOS | QUOT | p_AposAttrValueContent )* APOS ) -> ^( DirAttributeValue ( p_AposAttrValueContent )* ) );
    public final XQueryParser.p_DirAttributeValue_return p_DirAttributeValue() throws RecognitionException {
        XQueryParser.p_DirAttributeValue_return retval = new XQueryParser.p_DirAttributeValue_return();
        retval.start = input.LT(1);

        XQDTCommonTree root_0 = null;

        CommonToken QUOT406 = null;
        CommonToken ESCAPE_QUOT407 = null;
        CommonToken APOS408 = null;
        CommonToken QUOT410 = null;
        CommonToken APOS411 = null;
        CommonToken ESCAPE_APOS412 = null;
        CommonToken QUOT413 = null;
        CommonToken APOS415 = null;
        XQueryParser.p_QuotAttrValueContent_return p_QuotAttrValueContent409 = null;

        XQueryParser.p_AposAttrValueContent_return p_AposAttrValueContent414 = null;

        XQDTCommonTree QUOT406_tree = null;
        XQDTCommonTree ESCAPE_QUOT407_tree = null;
        XQDTCommonTree APOS408_tree = null;
        XQDTCommonTree QUOT410_tree = null;
        XQDTCommonTree APOS411_tree = null;
        XQDTCommonTree ESCAPE_APOS412_tree = null;
        XQDTCommonTree QUOT413_tree = null;
        XQDTCommonTree APOS415_tree = null;
        RewriteRuleTokenStream stream_ESCAPE_QUOT = new RewriteRuleTokenStream(adaptor, "token ESCAPE_QUOT");
        RewriteRuleTokenStream stream_APOS = new RewriteRuleTokenStream(adaptor, "token APOS");
        RewriteRuleTokenStream stream_ESCAPE_APOS = new RewriteRuleTokenStream(adaptor, "token ESCAPE_APOS");
        RewriteRuleTokenStream stream_QUOT = new RewriteRuleTokenStream(adaptor, "token QUOT");
        RewriteRuleSubtreeStream stream_p_QuotAttrValueContent = new RewriteRuleSubtreeStream(adaptor,
                "rule p_QuotAttrValueContent");
        RewriteRuleSubtreeStream stream_p_AposAttrValueContent = new RewriteRuleSubtreeStream(adaptor,
                "rule p_AposAttrValueContent");
        try {
            // XQueryParser.g:953:9: ( ( QUOT ( ESCAPE_QUOT | APOS | p_QuotAttrValueContent )* QUOT ) -> ^( DirAttributeValue ( p_QuotAttrValueContent )* ) | ( APOS ( ESCAPE_APOS | QUOT | p_AposAttrValueContent )* APOS ) -> ^( DirAttributeValue ( p_AposAttrValueContent )* ) )
            int alt147 = 2;
            int LA147_0 = input.LA(1);

            if ((LA147_0 == QUOT)) {
                alt147 = 1;
            } else if ((LA147_0 == APOS)) {
                alt147 = 2;
            } else {
                if (state.backtracking > 0) {
                    state.failed = true;
                    return retval;
                }
                NoViableAltException nvae = new NoViableAltException("", 147, 0, input);

                throw nvae;
            }
            switch (alt147) {
            case 1:
                // XQueryParser.g:953:11: ( QUOT ( ESCAPE_QUOT | APOS | p_QuotAttrValueContent )* QUOT )
            {
                // XQueryParser.g:953:11: ( QUOT ( ESCAPE_QUOT | APOS | p_QuotAttrValueContent )* QUOT )
                // XQueryParser.g:953:12: QUOT ( ESCAPE_QUOT | APOS | p_QuotAttrValueContent )* QUOT
                {
                    QUOT406 = (CommonToken)match(input, QUOT, FOLLOW_QUOT_in_p_DirAttributeValue8224);
                    if (state.failed) {
                        return retval;
                    }
                    if (state.backtracking == 0) {
                        stream_QUOT.add(QUOT406);
                    }

                    // XQueryParser.g:953:17: ( ESCAPE_QUOT | APOS | p_QuotAttrValueContent )*
                    loop145: do {
                        int alt145 = 4;
                        switch (input.LA(1)) {
                        case ESCAPE_QUOT: {
                            alt145 = 1;
                        }
                        break;
                        case APOS: {
                            alt145 = 2;
                        }
                        break;
                        case L_QuotAttrContentChar:
                        case L_PredefinedEntityRef:
                        case L_CharRef:
                        case ESCAPE_LBRACKET:
                        case ESCAPE_RBRACKET:
                        case LBRACKET: {
                            alt145 = 3;
                        }
                        break;

                        }

                        switch (alt145) {
                        case 1:
                            // XQueryParser.g:953:18: ESCAPE_QUOT
                        {
                            ESCAPE_QUOT407 = (CommonToken)match(input, ESCAPE_QUOT,
                                    FOLLOW_ESCAPE_QUOT_in_p_DirAttributeValue8227);
                            if (state.failed) {
                                return retval;
                            }
                            if (state.backtracking == 0) {
                                stream_ESCAPE_QUOT.add(ESCAPE_QUOT407);
                            }

                        }
                            break;
                        case 2:
                            // XQueryParser.g:953:32: APOS
                        {
                            APOS408 = (CommonToken)match(input, APOS, FOLLOW_APOS_in_p_DirAttributeValue8231);
                            if (state.failed) {
                                return retval;
                            }
                            if (state.backtracking == 0) {
                                stream_APOS.add(APOS408);
                            }

                        }
                        break;
                        case 3:
                            // XQueryParser.g:953:39: p_QuotAttrValueContent
                        {
                            pushFollow(FOLLOW_p_QuotAttrValueContent_in_p_DirAttributeValue8235);
                            p_QuotAttrValueContent409 = p_QuotAttrValueContent();

                            state._fsp--;
                            if (state.failed) {
                                return retval;
                            }
                            if (state.backtracking == 0) {
                                stream_p_QuotAttrValueContent.add(p_QuotAttrValueContent409.getTree());
                            }

                        }
                        break;

                        default:
                            break loop145;
                        }
                    } while (true);

                    QUOT410 = (CommonToken)match(input, QUOT, FOLLOW_QUOT_in_p_DirAttributeValue8239);
                    if (state.failed) {
                        return retval;
                    }
                    if (state.backtracking == 0) {
                        stream_QUOT.add(QUOT410);
                    }

                }

                // AST REWRITE
                // elements: p_QuotAttrValueContent
                // token labels:
                // rule labels: retval
                // token list labels:
                // rule list labels:
                // wildcard labels:
                if (state.backtracking == 0) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval = new RewriteRuleSubtreeStream(adaptor, "rule retval",
                            retval != null ? retval.tree : null);

                    root_0 = (XQDTCommonTree)adaptor.nil();
                    // 954:17: -> ^( DirAttributeValue ( p_QuotAttrValueContent )* )
                    {
                        // XQueryParser.g:954:20: ^( DirAttributeValue ( p_QuotAttrValueContent )* )
                        {
                            XQDTCommonTree root_1 = (XQDTCommonTree)adaptor.nil();
                            root_1 = (XQDTCommonTree)adaptor.becomeRoot(
                                    adaptor.create(DirAttributeValue, "DirAttributeValue"), root_1);

                            // XQueryParser.g:954:40: ( p_QuotAttrValueContent )*
                            while (stream_p_QuotAttrValueContent.hasNext()) {
                                adaptor.addChild(root_1, stream_p_QuotAttrValueContent.nextTree());

                            }
                            stream_p_QuotAttrValueContent.reset();

                            adaptor.addChild(root_0, root_1);
                        }

                    }

                    retval.tree = root_0;
                }
            }
            break;
            case 2:
                // XQueryParser.g:955:11: ( APOS ( ESCAPE_APOS | QUOT | p_AposAttrValueContent )* APOS )
            {
                // XQueryParser.g:955:11: ( APOS ( ESCAPE_APOS | QUOT | p_AposAttrValueContent )* APOS )
                // XQueryParser.g:955:12: APOS ( ESCAPE_APOS | QUOT | p_AposAttrValueContent )* APOS
                {
                    APOS411 = (CommonToken)match(input, APOS, FOLLOW_APOS_in_p_DirAttributeValue8278);
                    if (state.failed) {
                        return retval;
                    }
                    if (state.backtracking == 0) {
                        stream_APOS.add(APOS411);
                    }

                    // XQueryParser.g:955:17: ( ESCAPE_APOS | QUOT | p_AposAttrValueContent )*
                    loop146: do {
                        int alt146 = 4;
                        switch (input.LA(1)) {
                        case ESCAPE_APOS: {
                            alt146 = 1;
                        }
                        break;
                        case QUOT: {
                            alt146 = 2;
                        }
                        break;
                        case L_AposAttrContentChar:
                        case L_PredefinedEntityRef:
                        case L_CharRef:
                        case ESCAPE_LBRACKET:
                        case ESCAPE_RBRACKET:
                        case LBRACKET: {
                            alt146 = 3;
                        }
                        break;

                        }

                        switch (alt146) {
                        case 1:
                            // XQueryParser.g:955:18: ESCAPE_APOS
                        {
                            ESCAPE_APOS412 = (CommonToken)match(input, ESCAPE_APOS,
                                    FOLLOW_ESCAPE_APOS_in_p_DirAttributeValue8281);
                            if (state.failed) {
                                return retval;
                            }
                            if (state.backtracking == 0) {
                                stream_ESCAPE_APOS.add(ESCAPE_APOS412);
                            }

                        }
                            break;
                        case 2:
                            // XQueryParser.g:955:32: QUOT
                        {
                            QUOT413 = (CommonToken)match(input, QUOT, FOLLOW_QUOT_in_p_DirAttributeValue8285);
                            if (state.failed) {
                                return retval;
                            }
                            if (state.backtracking == 0) {
                                stream_QUOT.add(QUOT413);
                            }

                        }
                        break;
                        case 3:
                            // XQueryParser.g:955:39: p_AposAttrValueContent
                        {
                            pushFollow(FOLLOW_p_AposAttrValueContent_in_p_DirAttributeValue8289);
                            p_AposAttrValueContent414 = p_AposAttrValueContent();

                            state._fsp--;
                            if (state.failed) {
                                return retval;
                            }
                            if (state.backtracking == 0) {
                                stream_p_AposAttrValueContent.add(p_AposAttrValueContent414.getTree());
                            }

                        }
                        break;

                        default:
                            break loop146;
                        }
                    } while (true);

                    APOS415 = (CommonToken)match(input, APOS, FOLLOW_APOS_in_p_DirAttributeValue8293);
                    if (state.failed) {
                        return retval;
                    }
                    if (state.backtracking == 0) {
                        stream_APOS.add(APOS415);
                    }

                }

                // AST REWRITE
                // elements: p_AposAttrValueContent
                // token labels:
                // rule labels: retval
                // token list labels:
                // rule list labels:
                // wildcard labels:
                if (state.backtracking == 0) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval = new RewriteRuleSubtreeStream(adaptor, "rule retval",
                            retval != null ? retval.tree : null);

                    root_0 = (XQDTCommonTree)adaptor.nil();
                    // 956:17: -> ^( DirAttributeValue ( p_AposAttrValueContent )* )
                    {
                        // XQueryParser.g:956:20: ^( DirAttributeValue ( p_AposAttrValueContent )* )
                        {
                            XQDTCommonTree root_1 = (XQDTCommonTree)adaptor.nil();
                            root_1 = (XQDTCommonTree)adaptor.becomeRoot(
                                    adaptor.create(DirAttributeValue, "DirAttributeValue"), root_1);

                            // XQueryParser.g:956:40: ( p_AposAttrValueContent )*
                            while (stream_p_AposAttrValueContent.hasNext()) {
                                adaptor.addChild(root_1, stream_p_AposAttrValueContent.nextTree());

                            }
                            stream_p_AposAttrValueContent.reset();

                            adaptor.addChild(root_0, root_1);
                        }

                    }

                    retval.tree = root_0;
                }
            }
            break;

            }
            retval.stop = input.LT(-1);

            if (state.backtracking == 0) {

                retval.tree = (XQDTCommonTree)adaptor.rulePostProcessing(root_0);
                adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        } catch (RecognitionException re) {
            reportError(re);
            recover(input, re);
            retval.tree = (XQDTCommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        } finally {
        }
        return retval;
    }

    // $ANTLR end "p_DirAttributeValue"

    public static class p_QuotAttrValueContent_return extends ParserRuleReturnScope {
        XQDTCommonTree tree;

        public Object getTree() {
            return tree;
        }
    };

    // $ANTLR start "p_QuotAttrValueContent"
    // XQueryParser.g:960:1: p_QuotAttrValueContent : ( p_QuotAttrContentChar | pm_CommonContent );
    public final XQueryParser.p_QuotAttrValueContent_return p_QuotAttrValueContent() throws RecognitionException {
        XQueryParser.p_QuotAttrValueContent_return retval = new XQueryParser.p_QuotAttrValueContent_return();
        retval.start = input.LT(1);

        XQDTCommonTree root_0 = null;

        XQueryParser.p_QuotAttrContentChar_return p_QuotAttrContentChar416 = null;

        XQueryParser.pm_CommonContent_return pm_CommonContent417 = null;

        try {
            // XQueryParser.g:961:9: ( p_QuotAttrContentChar | pm_CommonContent )
            int alt148 = 2;
            int LA148_0 = input.LA(1);

            if ((LA148_0 == L_QuotAttrContentChar)) {
                alt148 = 1;
            } else if (((LA148_0 >= L_PredefinedEntityRef && LA148_0 <= ESCAPE_RBRACKET) || LA148_0 == LBRACKET)) {
                alt148 = 2;
            } else {
                if (state.backtracking > 0) {
                    state.failed = true;
                    return retval;
                }
                NoViableAltException nvae = new NoViableAltException("", 148, 0, input);

                throw nvae;
            }
            switch (alt148) {
            case 1:
                // XQueryParser.g:961:11: p_QuotAttrContentChar
            {
                root_0 = (XQDTCommonTree)adaptor.nil();

                pushFollow(FOLLOW_p_QuotAttrContentChar_in_p_QuotAttrValueContent8345);
                p_QuotAttrContentChar416 = p_QuotAttrContentChar();

                state._fsp--;
                if (state.failed) {
                    return retval;
                }
                if (state.backtracking == 0) {
                    adaptor.addChild(root_0, p_QuotAttrContentChar416.getTree());
                }

            }
            break;
            case 2:
                // XQueryParser.g:961:35: pm_CommonContent
            {
                root_0 = (XQDTCommonTree)adaptor.nil();

                pushFollow(FOLLOW_pm_CommonContent_in_p_QuotAttrValueContent8349);
                pm_CommonContent417 = pm_CommonContent();

                state._fsp--;
                if (state.failed) {
                    return retval;
                }
                if (state.backtracking == 0) {
                    adaptor.addChild(root_0, pm_CommonContent417.getTree());
                }

            }
            break;

            }
            retval.stop = input.LT(-1);

            if (state.backtracking == 0) {

                retval.tree = (XQDTCommonTree)adaptor.rulePostProcessing(root_0);
                adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        } catch (RecognitionException re) {
            reportError(re);
            recover(input, re);
            retval.tree = (XQDTCommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        } finally {
        }
        return retval;
    }

    // $ANTLR end "p_QuotAttrValueContent"

    public static class p_AposAttrValueContent_return extends ParserRuleReturnScope {
        XQDTCommonTree tree;

        public Object getTree() {
            return tree;
        }
    };

    // $ANTLR start "p_AposAttrValueContent"
    // XQueryParser.g:965:1: p_AposAttrValueContent : ( p_AposAttrContentChar | pm_CommonContent );
    public final XQueryParser.p_AposAttrValueContent_return p_AposAttrValueContent() throws RecognitionException {
        XQueryParser.p_AposAttrValueContent_return retval = new XQueryParser.p_AposAttrValueContent_return();
        retval.start = input.LT(1);

        XQDTCommonTree root_0 = null;

        XQueryParser.p_AposAttrContentChar_return p_AposAttrContentChar418 = null;

        XQueryParser.pm_CommonContent_return pm_CommonContent419 = null;

        try {
            // XQueryParser.g:966:9: ( p_AposAttrContentChar | pm_CommonContent )
            int alt149 = 2;
            int LA149_0 = input.LA(1);

            if ((LA149_0 == L_AposAttrContentChar)) {
                alt149 = 1;
            } else if (((LA149_0 >= L_PredefinedEntityRef && LA149_0 <= ESCAPE_RBRACKET) || LA149_0 == LBRACKET)) {
                alt149 = 2;
            } else {
                if (state.backtracking > 0) {
                    state.failed = true;
                    return retval;
                }
                NoViableAltException nvae = new NoViableAltException("", 149, 0, input);

                throw nvae;
            }
            switch (alt149) {
            case 1:
                // XQueryParser.g:966:11: p_AposAttrContentChar
            {
                root_0 = (XQDTCommonTree)adaptor.nil();

                pushFollow(FOLLOW_p_AposAttrContentChar_in_p_AposAttrValueContent8375);
                p_AposAttrContentChar418 = p_AposAttrContentChar();

                state._fsp--;
                if (state.failed) {
                    return retval;
                }
                if (state.backtracking == 0) {
                    adaptor.addChild(root_0, p_AposAttrContentChar418.getTree());
                }

            }
            break;
            case 2:
                // XQueryParser.g:966:35: pm_CommonContent
            {
                root_0 = (XQDTCommonTree)adaptor.nil();

                pushFollow(FOLLOW_pm_CommonContent_in_p_AposAttrValueContent8379);
                pm_CommonContent419 = pm_CommonContent();

                state._fsp--;
                if (state.failed) {
                    return retval;
                }
                if (state.backtracking == 0) {
                    adaptor.addChild(root_0, pm_CommonContent419.getTree());
                }

            }
            break;

            }
            retval.stop = input.LT(-1);

            if (state.backtracking == 0) {

                retval.tree = (XQDTCommonTree)adaptor.rulePostProcessing(root_0);
                adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        } catch (RecognitionException re) {
            reportError(re);
            recover(input, re);
            retval.tree = (XQDTCommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        } finally {
        }
        return retval;
    }

    // $ANTLR end "p_AposAttrValueContent"

    public static class pm_DirElemContent_return extends ParserRuleReturnScope {
        XQDTCommonTree tree;

        public Object getTree() {
            return tree;
        }
    };

    // $ANTLR start "pm_DirElemContent"
    // XQueryParser.g:970:1: pm_DirElemContent : ( p_DirectConstructor | p_CDataSection | pm_CommonContent | p_ElementContentChar );
    public final XQueryParser.pm_DirElemContent_return pm_DirElemContent() throws RecognitionException {
        XQueryParser.pm_DirElemContent_return retval = new XQueryParser.pm_DirElemContent_return();
        retval.start = input.LT(1);

        XQDTCommonTree root_0 = null;

        XQueryParser.p_DirectConstructor_return p_DirectConstructor420 = null;

        XQueryParser.p_CDataSection_return p_CDataSection421 = null;

        XQueryParser.pm_CommonContent_return pm_CommonContent422 = null;

        XQueryParser.p_ElementContentChar_return p_ElementContentChar423 = null;

        try {
            // XQueryParser.g:971:9: ( p_DirectConstructor | p_CDataSection | pm_CommonContent | p_ElementContentChar )
            int alt150 = 4;
            switch (input.LA(1)) {
            case SMALLER:
            case L_DirCommentConstructor:
            case L_DirPIConstructor: {
                alt150 = 1;
            }
                break;
            case L_CDataSection: {
                alt150 = 2;
            }
                break;
            case L_PredefinedEntityRef:
            case L_CharRef:
            case ESCAPE_LBRACKET:
            case ESCAPE_RBRACKET:
            case LBRACKET: {
                alt150 = 3;
            }
                break;
            case L_ElementContentChar: {
                alt150 = 4;
            }
                break;
            default:
                if (state.backtracking > 0) {
                    state.failed = true;
                    return retval;
                }
                NoViableAltException nvae = new NoViableAltException("", 150, 0, input);

                throw nvae;
            }

            switch (alt150) {
            case 1:
                // XQueryParser.g:971:11: p_DirectConstructor
            {
                root_0 = (XQDTCommonTree)adaptor.nil();

                pushFollow(FOLLOW_p_DirectConstructor_in_pm_DirElemContent8405);
                p_DirectConstructor420 = p_DirectConstructor();

                state._fsp--;
                if (state.failed) {
                    return retval;
                }
                if (state.backtracking == 0) {
                    adaptor.addChild(root_0, p_DirectConstructor420.getTree());
                }

            }
            break;
            case 2:
                // XQueryParser.g:972:11: p_CDataSection
            {
                root_0 = (XQDTCommonTree)adaptor.nil();

                pushFollow(FOLLOW_p_CDataSection_in_pm_DirElemContent8417);
                p_CDataSection421 = p_CDataSection();

                state._fsp--;
                if (state.failed) {
                    return retval;
                }
                if (state.backtracking == 0) {
                    adaptor.addChild(root_0, p_CDataSection421.getTree());
                }

            }
            break;
            case 3:
                // XQueryParser.g:973:11: pm_CommonContent
            {
                root_0 = (XQDTCommonTree)adaptor.nil();

                pushFollow(FOLLOW_pm_CommonContent_in_pm_DirElemContent8429);
                pm_CommonContent422 = pm_CommonContent();

                state._fsp--;
                if (state.failed) {
                    return retval;
                }
                if (state.backtracking == 0) {
                    adaptor.addChild(root_0, pm_CommonContent422.getTree());
                }

            }
            break;
            case 4:
                // XQueryParser.g:974:11: p_ElementContentChar
            {
                root_0 = (XQDTCommonTree)adaptor.nil();

                pushFollow(FOLLOW_p_ElementContentChar_in_pm_DirElemContent8441);
                p_ElementContentChar423 = p_ElementContentChar();

                state._fsp--;
                if (state.failed) {
                    return retval;
                }
                if (state.backtracking == 0) {
                    adaptor.addChild(root_0, p_ElementContentChar423.getTree());
                }

            }
            break;

            }
            retval.stop = input.LT(-1);

            if (state.backtracking == 0) {

                retval.tree = (XQDTCommonTree)adaptor.rulePostProcessing(root_0);
                adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        } catch (RecognitionException re) {
            reportError(re);
            recover(input, re);
            retval.tree = (XQDTCommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        } finally {
        }
        return retval;
    }

    // $ANTLR end "pm_DirElemContent"

    public static class pm_CommonContent_return extends ParserRuleReturnScope {
        XQDTCommonTree tree;

        public Object getTree() {
            return tree;
        }
    };

    // $ANTLR start "pm_CommonContent"
    // XQueryParser.g:980:1: pm_CommonContent : ( L_PredefinedEntityRef | L_CharRef | ESCAPE_LBRACKET | ESCAPE_RBRACKET | pg_EnclosedExprXml );
    public final XQueryParser.pm_CommonContent_return pm_CommonContent() throws RecognitionException {
        XQueryParser.pm_CommonContent_return retval = new XQueryParser.pm_CommonContent_return();
        retval.start = input.LT(1);

        XQDTCommonTree root_0 = null;

        CommonToken L_PredefinedEntityRef424 = null;
        CommonToken L_CharRef425 = null;
        CommonToken ESCAPE_LBRACKET426 = null;
        CommonToken ESCAPE_RBRACKET427 = null;
        XQueryParser.pg_EnclosedExprXml_return pg_EnclosedExprXml428 = null;

        XQDTCommonTree L_PredefinedEntityRef424_tree = null;
        XQDTCommonTree L_CharRef425_tree = null;
        XQDTCommonTree ESCAPE_LBRACKET426_tree = null;
        XQDTCommonTree ESCAPE_RBRACKET427_tree = null;

        try {
            // XQueryParser.g:981:9: ( L_PredefinedEntityRef | L_CharRef | ESCAPE_LBRACKET | ESCAPE_RBRACKET | pg_EnclosedExprXml )
            int alt151 = 5;
            switch (input.LA(1)) {
            case L_PredefinedEntityRef: {
                alt151 = 1;
            }
                break;
            case L_CharRef: {
                alt151 = 2;
            }
                break;
            case ESCAPE_LBRACKET: {
                alt151 = 3;
            }
                break;
            case ESCAPE_RBRACKET: {
                alt151 = 4;
            }
                break;
            case LBRACKET: {
                alt151 = 5;
            }
                break;
            default:
                if (state.backtracking > 0) {
                    state.failed = true;
                    return retval;
                }
                NoViableAltException nvae = new NoViableAltException("", 151, 0, input);

                throw nvae;
            }

            switch (alt151) {
            case 1:
                // XQueryParser.g:981:11: L_PredefinedEntityRef
            {
                root_0 = (XQDTCommonTree)adaptor.nil();

                L_PredefinedEntityRef424 = (CommonToken)match(input, L_PredefinedEntityRef,
                        FOLLOW_L_PredefinedEntityRef_in_pm_CommonContent8469);
                if (state.failed) {
                    return retval;
                }
                if (state.backtracking == 0) {
                    L_PredefinedEntityRef424_tree = (XQDTCommonTree)adaptor.create(L_PredefinedEntityRef424);
                    adaptor.addChild(root_0, L_PredefinedEntityRef424_tree);
                }

            }
            break;
            case 2:
                // XQueryParser.g:982:11: L_CharRef
            {
                root_0 = (XQDTCommonTree)adaptor.nil();

                L_CharRef425 = (CommonToken)match(input, L_CharRef, FOLLOW_L_CharRef_in_pm_CommonContent8481);
                if (state.failed) {
                    return retval;
                }
                if (state.backtracking == 0) {
                    L_CharRef425_tree = (XQDTCommonTree)adaptor.create(L_CharRef425);
                    adaptor.addChild(root_0, L_CharRef425_tree);
                }

            }
            break;
            case 3:
                // XQueryParser.g:983:11: ESCAPE_LBRACKET
            {
                root_0 = (XQDTCommonTree)adaptor.nil();

                ESCAPE_LBRACKET426 = (CommonToken)match(input, ESCAPE_LBRACKET,
                        FOLLOW_ESCAPE_LBRACKET_in_pm_CommonContent8493);
                if (state.failed) {
                    return retval;
                }
                if (state.backtracking == 0) {
                    ESCAPE_LBRACKET426_tree = (XQDTCommonTree)adaptor.create(ESCAPE_LBRACKET426);
                    adaptor.addChild(root_0, ESCAPE_LBRACKET426_tree);
                }

            }
            break;
            case 4:
                // XQueryParser.g:984:11: ESCAPE_RBRACKET
            {
                root_0 = (XQDTCommonTree)adaptor.nil();

                ESCAPE_RBRACKET427 = (CommonToken)match(input, ESCAPE_RBRACKET,
                        FOLLOW_ESCAPE_RBRACKET_in_pm_CommonContent8505);
                if (state.failed) {
                    return retval;
                }
                if (state.backtracking == 0) {
                    ESCAPE_RBRACKET427_tree = (XQDTCommonTree)adaptor.create(ESCAPE_RBRACKET427);
                    adaptor.addChild(root_0, ESCAPE_RBRACKET427_tree);
                }

            }
            break;
            case 5:
                // XQueryParser.g:985:11: pg_EnclosedExprXml
            {
                root_0 = (XQDTCommonTree)adaptor.nil();

                pushFollow(FOLLOW_pg_EnclosedExprXml_in_pm_CommonContent8517);
                pg_EnclosedExprXml428 = pg_EnclosedExprXml();

                state._fsp--;
                if (state.failed) {
                    return retval;
                }
                if (state.backtracking == 0) {
                    adaptor.addChild(root_0, pg_EnclosedExprXml428.getTree());
                }

            }
            break;

            }
            retval.stop = input.LT(-1);

            if (state.backtracking == 0) {

                retval.tree = (XQDTCommonTree)adaptor.rulePostProcessing(root_0);
                adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        } catch (RecognitionException re) {
            reportError(re);
            recover(input, re);
            retval.tree = (XQDTCommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        } finally {
        }
        return retval;
    }

    // $ANTLR end "pm_CommonContent"

    public static class pg_EnclosedExprXml_return extends ParserRuleReturnScope {
        XQDTCommonTree tree;

        public Object getTree() {
            return tree;
        }
    };

    // $ANTLR start "pg_EnclosedExprXml"
    // XQueryParser.g:993:1: pg_EnclosedExprXml : LBRACKET p_StatementsAndOptionalExpr RBRACKET ;
    public final XQueryParser.pg_EnclosedExprXml_return pg_EnclosedExprXml() throws RecognitionException {
        XQueryParser.pg_EnclosedExprXml_return retval = new XQueryParser.pg_EnclosedExprXml_return();
        retval.start = input.LT(1);

        XQDTCommonTree root_0 = null;

        CommonToken LBRACKET429 = null;
        CommonToken RBRACKET431 = null;
        XQueryParser.p_StatementsAndOptionalExpr_return p_StatementsAndOptionalExpr430 = null;

        XQDTCommonTree LBRACKET429_tree = null;
        XQDTCommonTree RBRACKET431_tree = null;

        try {
            // XQueryParser.g:994:9: ( LBRACKET p_StatementsAndOptionalExpr RBRACKET )
            // XQueryParser.g:994:13: LBRACKET p_StatementsAndOptionalExpr RBRACKET
            {
                root_0 = (XQDTCommonTree)adaptor.nil();

                LBRACKET429 = (CommonToken)match(input, LBRACKET, FOLLOW_LBRACKET_in_pg_EnclosedExprXml8549);
                if (state.failed) {
                    return retval;
                }
                if (state.backtracking == 0) {
                    LBRACKET429_tree = (XQDTCommonTree)adaptor.create(LBRACKET429);
                    adaptor.addChild(root_0, LBRACKET429_tree);
                }
                if (state.backtracking == 0) {
                    pushXQueryLexer();
                }
                pushFollow(FOLLOW_p_StatementsAndOptionalExpr_in_pg_EnclosedExprXml8565);
                p_StatementsAndOptionalExpr430 = p_StatementsAndOptionalExpr();

                state._fsp--;
                if (state.failed) {
                    return retval;
                }
                if (state.backtracking == 0) {
                    adaptor.addChild(root_0, p_StatementsAndOptionalExpr430.getTree());
                }
                RBRACKET431 = (CommonToken)match(input, RBRACKET, FOLLOW_RBRACKET_in_pg_EnclosedExprXml8579);
                if (state.failed) {
                    return retval;
                }
                if (state.backtracking == 0) {
                    RBRACKET431_tree = (XQDTCommonTree)adaptor.create(RBRACKET431);
                    adaptor.addChild(root_0, RBRACKET431_tree);
                }
                if (state.backtracking == 0) {
                    popLexer();
                }

            }

            retval.stop = input.LT(-1);

            if (state.backtracking == 0) {

                retval.tree = (XQDTCommonTree)adaptor.rulePostProcessing(root_0);
                adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        } catch (RecognitionException re) {
            reportError(re);
            recover(input, re);
            retval.tree = (XQDTCommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        } finally {
        }
        return retval;
    }

    // $ANTLR end "pg_EnclosedExprXml"

    public static class p_DirCommentConstructor_return extends ParserRuleReturnScope {
        XQDTCommonTree tree;

        public Object getTree() {
            return tree;
        }
    };

    // $ANTLR start "p_DirCommentConstructor"
    // XQueryParser.g:1001:1: p_DirCommentConstructor : L_DirCommentConstructor ;
    public final XQueryParser.p_DirCommentConstructor_return p_DirCommentConstructor() throws RecognitionException {
        XQueryParser.p_DirCommentConstructor_return retval = new XQueryParser.p_DirCommentConstructor_return();
        retval.start = input.LT(1);

        XQDTCommonTree root_0 = null;

        CommonToken L_DirCommentConstructor432 = null;

        XQDTCommonTree L_DirCommentConstructor432_tree = null;

        try {
            // XQueryParser.g:1002:9: ( L_DirCommentConstructor )
            // XQueryParser.g:1002:11: L_DirCommentConstructor
            {
                root_0 = (XQDTCommonTree)adaptor.nil();

                L_DirCommentConstructor432 = (CommonToken)match(input, L_DirCommentConstructor,
                        FOLLOW_L_DirCommentConstructor_in_p_DirCommentConstructor8608);
                if (state.failed) {
                    return retval;
                }
                if (state.backtracking == 0) {
                    L_DirCommentConstructor432_tree = (XQDTCommonTree)adaptor.create(L_DirCommentConstructor432);
                    adaptor.addChild(root_0, L_DirCommentConstructor432_tree);
                }

            }

            retval.stop = input.LT(-1);

            if (state.backtracking == 0) {

                retval.tree = (XQDTCommonTree)adaptor.rulePostProcessing(root_0);
                adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        } catch (RecognitionException re) {
            reportError(re);
            recover(input, re);
            retval.tree = (XQDTCommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        } finally {
        }
        return retval;
    }

    // $ANTLR end "p_DirCommentConstructor"

    public static class p_DirPIConstructor_return extends ParserRuleReturnScope {
        XQDTCommonTree tree;

        public Object getTree() {
            return tree;
        }
    };

    // $ANTLR start "p_DirPIConstructor"
    // XQueryParser.g:1009:1: p_DirPIConstructor : L_DirPIConstructor ;
    public final XQueryParser.p_DirPIConstructor_return p_DirPIConstructor() throws RecognitionException {
        XQueryParser.p_DirPIConstructor_return retval = new XQueryParser.p_DirPIConstructor_return();
        retval.start = input.LT(1);

        XQDTCommonTree root_0 = null;

        CommonToken L_DirPIConstructor433 = null;

        XQDTCommonTree L_DirPIConstructor433_tree = null;

        try {
            // XQueryParser.g:1010:9: ( L_DirPIConstructor )
            // XQueryParser.g:1010:11: L_DirPIConstructor
            {
                root_0 = (XQDTCommonTree)adaptor.nil();

                L_DirPIConstructor433 = (CommonToken)match(input, L_DirPIConstructor,
                        FOLLOW_L_DirPIConstructor_in_p_DirPIConstructor8640);
                if (state.failed) {
                    return retval;
                }
                if (state.backtracking == 0) {
                    L_DirPIConstructor433_tree = (XQDTCommonTree)adaptor.create(L_DirPIConstructor433);
                    adaptor.addChild(root_0, L_DirPIConstructor433_tree);
                }

            }

            retval.stop = input.LT(-1);

            if (state.backtracking == 0) {

                retval.tree = (XQDTCommonTree)adaptor.rulePostProcessing(root_0);
                adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        } catch (RecognitionException re) {
            reportError(re);
            recover(input, re);
            retval.tree = (XQDTCommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        } finally {
        }
        return retval;
    }

    // $ANTLR end "p_DirPIConstructor"

    public static class p_CDataSection_return extends ParserRuleReturnScope {
        XQDTCommonTree tree;

        public Object getTree() {
            return tree;
        }
    };

    // $ANTLR start "p_CDataSection"
    // XQueryParser.g:1017:1: p_CDataSection : L_CDataSection ;
    public final XQueryParser.p_CDataSection_return p_CDataSection() throws RecognitionException {
        XQueryParser.p_CDataSection_return retval = new XQueryParser.p_CDataSection_return();
        retval.start = input.LT(1);

        XQDTCommonTree root_0 = null;

        CommonToken L_CDataSection434 = null;

        XQDTCommonTree L_CDataSection434_tree = null;

        try {
            // XQueryParser.g:1018:9: ( L_CDataSection )
            // XQueryParser.g:1018:11: L_CDataSection
            {
                root_0 = (XQDTCommonTree)adaptor.nil();

                L_CDataSection434 = (CommonToken)match(input, L_CDataSection,
                        FOLLOW_L_CDataSection_in_p_CDataSection8673);
                if (state.failed) {
                    return retval;
                }
                if (state.backtracking == 0) {
                    L_CDataSection434_tree = (XQDTCommonTree)adaptor.create(L_CDataSection434);
                    adaptor.addChild(root_0, L_CDataSection434_tree);
                }

            }

            retval.stop = input.LT(-1);

            if (state.backtracking == 0) {

                retval.tree = (XQDTCommonTree)adaptor.rulePostProcessing(root_0);
                adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        } catch (RecognitionException re) {
            reportError(re);
            recover(input, re);
            retval.tree = (XQDTCommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        } finally {
        }
        return retval;
    }

    // $ANTLR end "p_CDataSection"

    public static class p_ComputedConstructor_return extends ParserRuleReturnScope {
        XQDTCommonTree tree;

        public Object getTree() {
            return tree;
        }
    };

    // $ANTLR start "p_ComputedConstructor"
    // XQueryParser.g:1025:1: p_ComputedConstructor : ( pm_CompDocConstructor | pm_CompElemConstructor | pm_CompAttrConstructor | p_CompNamespaceConstructor | p_CompTextConstructor | pm_CompCommentConstructor | pm_CompPIConstructor | {...}? => p_CompBinaryConstructor );
    public final XQueryParser.p_ComputedConstructor_return p_ComputedConstructor() throws RecognitionException {
        XQueryParser.p_ComputedConstructor_return retval = new XQueryParser.p_ComputedConstructor_return();
        retval.start = input.LT(1);

        XQDTCommonTree root_0 = null;

        XQueryParser.pm_CompDocConstructor_return pm_CompDocConstructor435 = null;

        XQueryParser.pm_CompElemConstructor_return pm_CompElemConstructor436 = null;

        XQueryParser.pm_CompAttrConstructor_return pm_CompAttrConstructor437 = null;

        XQueryParser.p_CompNamespaceConstructor_return p_CompNamespaceConstructor438 = null;

        XQueryParser.p_CompTextConstructor_return p_CompTextConstructor439 = null;

        XQueryParser.pm_CompCommentConstructor_return pm_CompCommentConstructor440 = null;

        XQueryParser.pm_CompPIConstructor_return pm_CompPIConstructor441 = null;

        XQueryParser.p_CompBinaryConstructor_return p_CompBinaryConstructor442 = null;

        try {
            // XQueryParser.g:1026:9: ( pm_CompDocConstructor | pm_CompElemConstructor | pm_CompAttrConstructor | p_CompNamespaceConstructor | p_CompTextConstructor | pm_CompCommentConstructor | pm_CompPIConstructor | {...}? => p_CompBinaryConstructor )
            int alt152 = 8;
            int LA152_0 = input.LA(1);

            if ((LA152_0 == DOCUMENT)) {
                alt152 = 1;
            } else if ((LA152_0 == ELEMENT)) {
                alt152 = 2;
            } else if ((LA152_0 == ATTRIBUTE)) {
                alt152 = 3;
            } else if ((LA152_0 == NAMESPACE)) {
                alt152 = 4;
            } else if ((LA152_0 == TEXT)) {
                alt152 = 5;
            } else if ((LA152_0 == COMMENT)) {
                alt152 = 6;
            } else if ((LA152_0 == PROCESSING_INSTRUCTION)) {
                alt152 = 7;
            } else if ((LA152_0 == BINARY) && ((lc(MLS)))) {
                alt152 = 8;
            } else {
                if (state.backtracking > 0) {
                    state.failed = true;
                    return retval;
                }
                NoViableAltException nvae = new NoViableAltException("", 152, 0, input);

                throw nvae;
            }
            switch (alt152) {
            case 1:
                // XQueryParser.g:1026:11: pm_CompDocConstructor
            {
                root_0 = (XQDTCommonTree)adaptor.nil();

                pushFollow(FOLLOW_pm_CompDocConstructor_in_p_ComputedConstructor8705);
                pm_CompDocConstructor435 = pm_CompDocConstructor();

                state._fsp--;
                if (state.failed) {
                    return retval;
                }
                if (state.backtracking == 0) {
                    adaptor.addChild(root_0, pm_CompDocConstructor435.getTree());
                }

            }
            break;
            case 2:
                // XQueryParser.g:1027:11: pm_CompElemConstructor
            {
                root_0 = (XQDTCommonTree)adaptor.nil();

                pushFollow(FOLLOW_pm_CompElemConstructor_in_p_ComputedConstructor8717);
                pm_CompElemConstructor436 = pm_CompElemConstructor();

                state._fsp--;
                if (state.failed) {
                    return retval;
                }
                if (state.backtracking == 0) {
                    adaptor.addChild(root_0, pm_CompElemConstructor436.getTree());
                }

            }
            break;
            case 3:
                // XQueryParser.g:1028:11: pm_CompAttrConstructor
            {
                root_0 = (XQDTCommonTree)adaptor.nil();

                pushFollow(FOLLOW_pm_CompAttrConstructor_in_p_ComputedConstructor8729);
                pm_CompAttrConstructor437 = pm_CompAttrConstructor();

                state._fsp--;
                if (state.failed) {
                    return retval;
                }
                if (state.backtracking == 0) {
                    adaptor.addChild(root_0, pm_CompAttrConstructor437.getTree());
                }

            }
            break;
            case 4:
                // XQueryParser.g:1029:11: p_CompNamespaceConstructor
            {
                root_0 = (XQDTCommonTree)adaptor.nil();

                pushFollow(FOLLOW_p_CompNamespaceConstructor_in_p_ComputedConstructor8741);
                p_CompNamespaceConstructor438 = p_CompNamespaceConstructor();

                state._fsp--;
                if (state.failed) {
                    return retval;
                }
                if (state.backtracking == 0) {
                    adaptor.addChild(root_0, p_CompNamespaceConstructor438.getTree());
                }

            }
            break;
            case 5:
                // XQueryParser.g:1030:11: p_CompTextConstructor
            {
                root_0 = (XQDTCommonTree)adaptor.nil();

                pushFollow(FOLLOW_p_CompTextConstructor_in_p_ComputedConstructor8753);
                p_CompTextConstructor439 = p_CompTextConstructor();

                state._fsp--;
                if (state.failed) {
                    return retval;
                }
                if (state.backtracking == 0) {
                    adaptor.addChild(root_0, p_CompTextConstructor439.getTree());
                }

            }
            break;
            case 6:
                // XQueryParser.g:1031:11: pm_CompCommentConstructor
            {
                root_0 = (XQDTCommonTree)adaptor.nil();

                pushFollow(FOLLOW_pm_CompCommentConstructor_in_p_ComputedConstructor8765);
                pm_CompCommentConstructor440 = pm_CompCommentConstructor();

                state._fsp--;
                if (state.failed) {
                    return retval;
                }
                if (state.backtracking == 0) {
                    adaptor.addChild(root_0, pm_CompCommentConstructor440.getTree());
                }

            }
            break;
            case 7:
                // XQueryParser.g:1032:11: pm_CompPIConstructor
            {
                root_0 = (XQDTCommonTree)adaptor.nil();

                pushFollow(FOLLOW_pm_CompPIConstructor_in_p_ComputedConstructor8777);
                pm_CompPIConstructor441 = pm_CompPIConstructor();

                state._fsp--;
                if (state.failed) {
                    return retval;
                }
                if (state.backtracking == 0) {
                    adaptor.addChild(root_0, pm_CompPIConstructor441.getTree());
                }

            }
            break;
            case 8:
                // XQueryParser.g:1033:11: {...}? => p_CompBinaryConstructor
            {
                root_0 = (XQDTCommonTree)adaptor.nil();

                if (!((lc(MLS)))) {
                    if (state.backtracking > 0) {
                        state.failed = true;
                        return retval;
                    }
                    throw new FailedPredicateException(input, "p_ComputedConstructor", "lc(MLS)");
                }
                pushFollow(FOLLOW_p_CompBinaryConstructor_in_p_ComputedConstructor8792);
                p_CompBinaryConstructor442 = p_CompBinaryConstructor();

                state._fsp--;
                if (state.failed) {
                    return retval;
                }
                if (state.backtracking == 0) {
                    adaptor.addChild(root_0, p_CompBinaryConstructor442.getTree());
                }

            }
            break;

            }
            retval.stop = input.LT(-1);

            if (state.backtracking == 0) {

                retval.tree = (XQDTCommonTree)adaptor.rulePostProcessing(root_0);
                adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        } catch (RecognitionException re) {
            reportError(re);
            recover(input, re);
            retval.tree = (XQDTCommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        } finally {
        }
        return retval;
    }

    // $ANTLR end "p_ComputedConstructor"

    public static class pm_CompDocConstructor_return extends ParserRuleReturnScope {
        XQDTCommonTree tree;

        public Object getTree() {
            return tree;
        }
    };

    // $ANTLR start "pm_CompDocConstructor"
    // XQueryParser.g:1038:1: pm_CompDocConstructor : k= DOCUMENT LBRACKET p_StatementsAndOptionalExpr RBRACKET ;
    public final XQueryParser.pm_CompDocConstructor_return pm_CompDocConstructor() throws RecognitionException {
        XQueryParser.pm_CompDocConstructor_return retval = new XQueryParser.pm_CompDocConstructor_return();
        retval.start = input.LT(1);

        XQDTCommonTree root_0 = null;

        CommonToken k = null;
        CommonToken LBRACKET443 = null;
        CommonToken RBRACKET445 = null;
        XQueryParser.p_StatementsAndOptionalExpr_return p_StatementsAndOptionalExpr444 = null;

        XQDTCommonTree k_tree = null;
        XQDTCommonTree LBRACKET443_tree = null;
        XQDTCommonTree RBRACKET445_tree = null;

        try {
            // XQueryParser.g:1039:9: (k= DOCUMENT LBRACKET p_StatementsAndOptionalExpr RBRACKET )
            // XQueryParser.g:1039:11: k= DOCUMENT LBRACKET p_StatementsAndOptionalExpr RBRACKET
            {
                root_0 = (XQDTCommonTree)adaptor.nil();

                k = (CommonToken)match(input, DOCUMENT, FOLLOW_DOCUMENT_in_pm_CompDocConstructor8821);
                if (state.failed) {
                    return retval;
                }
                if (state.backtracking == 0) {
                    k_tree = (XQDTCommonTree)adaptor.create(k);
                    adaptor.addChild(root_0, k_tree);
                }
                if (state.backtracking == 0) {
                    ak(k);
                }
                LBRACKET443 = (CommonToken)match(input, LBRACKET, FOLLOW_LBRACKET_in_pm_CompDocConstructor8825);
                if (state.failed) {
                    return retval;
                }
                if (state.backtracking == 0) {
                    LBRACKET443_tree = (XQDTCommonTree)adaptor.create(LBRACKET443);
                    adaptor.addChild(root_0, LBRACKET443_tree);
                }
                pushFollow(FOLLOW_p_StatementsAndOptionalExpr_in_pm_CompDocConstructor8827);
                p_StatementsAndOptionalExpr444 = p_StatementsAndOptionalExpr();

                state._fsp--;
                if (state.failed) {
                    return retval;
                }
                if (state.backtracking == 0) {
                    adaptor.addChild(root_0, p_StatementsAndOptionalExpr444.getTree());
                }
                RBRACKET445 = (CommonToken)match(input, RBRACKET, FOLLOW_RBRACKET_in_pm_CompDocConstructor8829);
                if (state.failed) {
                    return retval;
                }
                if (state.backtracking == 0) {
                    RBRACKET445_tree = (XQDTCommonTree)adaptor.create(RBRACKET445);
                    adaptor.addChild(root_0, RBRACKET445_tree);
                }

            }

            retval.stop = input.LT(-1);

            if (state.backtracking == 0) {

                retval.tree = (XQDTCommonTree)adaptor.rulePostProcessing(root_0);
                adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        } catch (RecognitionException re) {
            reportError(re);
            recover(input, re);
            retval.tree = (XQDTCommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        } finally {
        }
        return retval;
    }

    // $ANTLR end "pm_CompDocConstructor"

    public static class pm_CompElemConstructor_return extends ParserRuleReturnScope {
        XQDTCommonTree tree;

        public Object getTree() {
            return tree;
        }
    };

    // $ANTLR start "pm_CompElemConstructor"
    // XQueryParser.g:1043:1: pm_CompElemConstructor : k= ELEMENT ( p_QName | ( LBRACKET p_Expr[true,true] RBRACKET ) ) LBRACKET pm_ContentExpr RBRACKET ;
    public final XQueryParser.pm_CompElemConstructor_return pm_CompElemConstructor() throws RecognitionException {
        XQueryParser.pm_CompElemConstructor_return retval = new XQueryParser.pm_CompElemConstructor_return();
        retval.start = input.LT(1);

        XQDTCommonTree root_0 = null;

        CommonToken k = null;
        CommonToken LBRACKET447 = null;
        CommonToken RBRACKET449 = null;
        CommonToken LBRACKET450 = null;
        CommonToken RBRACKET452 = null;
        XQueryParser.p_QName_return p_QName446 = null;

        XQueryParser.p_Expr_return p_Expr448 = null;

        XQueryParser.pm_ContentExpr_return pm_ContentExpr451 = null;

        XQDTCommonTree k_tree = null;
        XQDTCommonTree LBRACKET447_tree = null;
        XQDTCommonTree RBRACKET449_tree = null;
        XQDTCommonTree LBRACKET450_tree = null;
        XQDTCommonTree RBRACKET452_tree = null;

        try {
            // XQueryParser.g:1044:9: (k= ELEMENT ( p_QName | ( LBRACKET p_Expr[true,true] RBRACKET ) ) LBRACKET pm_ContentExpr RBRACKET )
            // XQueryParser.g:1044:11: k= ELEMENT ( p_QName | ( LBRACKET p_Expr[true,true] RBRACKET ) ) LBRACKET pm_ContentExpr RBRACKET
            {
                root_0 = (XQDTCommonTree)adaptor.nil();

                k = (CommonToken)match(input, ELEMENT, FOLLOW_ELEMENT_in_pm_CompElemConstructor8865);
                if (state.failed) {
                    return retval;
                }
                if (state.backtracking == 0) {
                    k_tree = (XQDTCommonTree)adaptor.create(k);
                    adaptor.addChild(root_0, k_tree);
                }
                if (state.backtracking == 0) {
                    ak(k);
                }
                // XQueryParser.g:1044:31: ( p_QName | ( LBRACKET p_Expr[true,true] RBRACKET ) )
                int alt153 = 2;
                int LA153_0 = input.LA(1);

                if (((LA153_0 >= ANCESTOR && LA153_0 <= SKIP) || (LA153_0 >= VALUE && LA153_0 <= QUOT_ER)
                        || LA153_0 == L_NCName || LA153_0 == EXPLICITLY)) {
                    alt153 = 1;
                } else if ((LA153_0 == LBRACKET)) {
                    alt153 = 2;
                } else {
                    if (state.backtracking > 0) {
                        state.failed = true;
                        return retval;
                    }
                    NoViableAltException nvae = new NoViableAltException("", 153, 0, input);

                    throw nvae;
                }
                switch (alt153) {
                case 1:
                    // XQueryParser.g:1044:32: p_QName
                {
                    pushFollow(FOLLOW_p_QName_in_pm_CompElemConstructor8870);
                    p_QName446 = p_QName();

                    state._fsp--;
                    if (state.failed) {
                        return retval;
                    }
                    if (state.backtracking == 0) {
                        adaptor.addChild(root_0, p_QName446.getTree());
                    }

                }
                    break;
                case 2:
                    // XQueryParser.g:1044:42: ( LBRACKET p_Expr[true,true] RBRACKET )
                {
                    // XQueryParser.g:1044:42: ( LBRACKET p_Expr[true,true] RBRACKET )
                    // XQueryParser.g:1044:43: LBRACKET p_Expr[true,true] RBRACKET
                    {
                        LBRACKET447 = (CommonToken)match(input, LBRACKET, FOLLOW_LBRACKET_in_pm_CompElemConstructor8875);
                        if (state.failed) {
                            return retval;
                        }
                        if (state.backtracking == 0) {
                            LBRACKET447_tree = (XQDTCommonTree)adaptor.create(LBRACKET447);
                            adaptor.addChild(root_0, LBRACKET447_tree);
                        }
                        pushFollow(FOLLOW_p_Expr_in_pm_CompElemConstructor8877);
                        p_Expr448 = p_Expr(true, true);

                        state._fsp--;
                        if (state.failed) {
                            return retval;
                        }
                        if (state.backtracking == 0) {
                            adaptor.addChild(root_0, p_Expr448.getTree());
                        }
                        RBRACKET449 = (CommonToken)match(input, RBRACKET, FOLLOW_RBRACKET_in_pm_CompElemConstructor8880);
                        if (state.failed) {
                            return retval;
                        }
                        if (state.backtracking == 0) {
                            RBRACKET449_tree = (XQDTCommonTree)adaptor.create(RBRACKET449);
                            adaptor.addChild(root_0, RBRACKET449_tree);
                        }

                    }

                }
                    break;

                }

                LBRACKET450 = (CommonToken)match(input, LBRACKET, FOLLOW_LBRACKET_in_pm_CompElemConstructor8884);
                if (state.failed) {
                    return retval;
                }
                if (state.backtracking == 0) {
                    LBRACKET450_tree = (XQDTCommonTree)adaptor.create(LBRACKET450);
                    adaptor.addChild(root_0, LBRACKET450_tree);
                }
                pushFollow(FOLLOW_pm_ContentExpr_in_pm_CompElemConstructor8886);
                pm_ContentExpr451 = pm_ContentExpr();

                state._fsp--;
                if (state.failed) {
                    return retval;
                }
                if (state.backtracking == 0) {
                    adaptor.addChild(root_0, pm_ContentExpr451.getTree());
                }
                RBRACKET452 = (CommonToken)match(input, RBRACKET, FOLLOW_RBRACKET_in_pm_CompElemConstructor8888);
                if (state.failed) {
                    return retval;
                }
                if (state.backtracking == 0) {
                    RBRACKET452_tree = (XQDTCommonTree)adaptor.create(RBRACKET452);
                    adaptor.addChild(root_0, RBRACKET452_tree);
                }

            }

            retval.stop = input.LT(-1);

            if (state.backtracking == 0) {

                retval.tree = (XQDTCommonTree)adaptor.rulePostProcessing(root_0);
                adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        } catch (RecognitionException re) {
            reportError(re);
            recover(input, re);
            retval.tree = (XQDTCommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        } finally {
        }
        return retval;
    }

    // $ANTLR end "pm_CompElemConstructor"

    public static class pm_ContentExpr_return extends ParserRuleReturnScope {
        XQDTCommonTree tree;

        public Object getTree() {
            return tree;
        }
    };

    // $ANTLR start "pm_ContentExpr"
    // XQueryParser.g:1049:1: pm_ContentExpr : p_StatementsAndOptionalExpr ;
    public final XQueryParser.pm_ContentExpr_return pm_ContentExpr() throws RecognitionException {
        XQueryParser.pm_ContentExpr_return retval = new XQueryParser.pm_ContentExpr_return();
        retval.start = input.LT(1);

        XQDTCommonTree root_0 = null;

        XQueryParser.p_StatementsAndOptionalExpr_return p_StatementsAndOptionalExpr453 = null;

        try {
            // XQueryParser.g:1050:9: ( p_StatementsAndOptionalExpr )
            // XQueryParser.g:1050:11: p_StatementsAndOptionalExpr
            {
                root_0 = (XQDTCommonTree)adaptor.nil();

                pushFollow(FOLLOW_p_StatementsAndOptionalExpr_in_pm_ContentExpr8915);
                p_StatementsAndOptionalExpr453 = p_StatementsAndOptionalExpr();

                state._fsp--;
                if (state.failed) {
                    return retval;
                }
                if (state.backtracking == 0) {
                    adaptor.addChild(root_0, p_StatementsAndOptionalExpr453.getTree());
                }

            }

            retval.stop = input.LT(-1);

            if (state.backtracking == 0) {

                retval.tree = (XQDTCommonTree)adaptor.rulePostProcessing(root_0);
                adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        } catch (RecognitionException re) {
            reportError(re);
            recover(input, re);
            retval.tree = (XQDTCommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        } finally {
        }
        return retval;
    }

    // $ANTLR end "pm_ContentExpr"

    public static class pm_CompAttrConstructor_return extends ParserRuleReturnScope {
        XQDTCommonTree tree;

        public Object getTree() {
            return tree;
        }
    };

    // $ANTLR start "pm_CompAttrConstructor"
    // XQueryParser.g:1055:1: pm_CompAttrConstructor : k= ATTRIBUTE ( p_QName | ( LBRACKET p_Expr[true,true] RBRACKET ) ) LBRACKET p_StatementsAndOptionalExpr RBRACKET ;
    public final XQueryParser.pm_CompAttrConstructor_return pm_CompAttrConstructor() throws RecognitionException {
        XQueryParser.pm_CompAttrConstructor_return retval = new XQueryParser.pm_CompAttrConstructor_return();
        retval.start = input.LT(1);

        XQDTCommonTree root_0 = null;

        CommonToken k = null;
        CommonToken LBRACKET455 = null;
        CommonToken RBRACKET457 = null;
        CommonToken LBRACKET458 = null;
        CommonToken RBRACKET460 = null;
        XQueryParser.p_QName_return p_QName454 = null;

        XQueryParser.p_Expr_return p_Expr456 = null;

        XQueryParser.p_StatementsAndOptionalExpr_return p_StatementsAndOptionalExpr459 = null;

        XQDTCommonTree k_tree = null;
        XQDTCommonTree LBRACKET455_tree = null;
        XQDTCommonTree RBRACKET457_tree = null;
        XQDTCommonTree LBRACKET458_tree = null;
        XQDTCommonTree RBRACKET460_tree = null;

        try {
            // XQueryParser.g:1056:9: (k= ATTRIBUTE ( p_QName | ( LBRACKET p_Expr[true,true] RBRACKET ) ) LBRACKET p_StatementsAndOptionalExpr RBRACKET )
            // XQueryParser.g:1056:11: k= ATTRIBUTE ( p_QName | ( LBRACKET p_Expr[true,true] RBRACKET ) ) LBRACKET p_StatementsAndOptionalExpr RBRACKET
            {
                root_0 = (XQDTCommonTree)adaptor.nil();

                k = (CommonToken)match(input, ATTRIBUTE, FOLLOW_ATTRIBUTE_in_pm_CompAttrConstructor8944);
                if (state.failed) {
                    return retval;
                }
                if (state.backtracking == 0) {
                    k_tree = (XQDTCommonTree)adaptor.create(k);
                    adaptor.addChild(root_0, k_tree);
                }
                if (state.backtracking == 0) {
                    ak(k);
                }
                // XQueryParser.g:1056:33: ( p_QName | ( LBRACKET p_Expr[true,true] RBRACKET ) )
                int alt154 = 2;
                int LA154_0 = input.LA(1);

                if (((LA154_0 >= ANCESTOR && LA154_0 <= SKIP) || (LA154_0 >= VALUE && LA154_0 <= QUOT_ER)
                        || LA154_0 == L_NCName || LA154_0 == EXPLICITLY)) {
                    alt154 = 1;
                } else if ((LA154_0 == LBRACKET)) {
                    alt154 = 2;
                } else {
                    if (state.backtracking > 0) {
                        state.failed = true;
                        return retval;
                    }
                    NoViableAltException nvae = new NoViableAltException("", 154, 0, input);

                    throw nvae;
                }
                switch (alt154) {
                case 1:
                    // XQueryParser.g:1056:34: p_QName
                {
                    pushFollow(FOLLOW_p_QName_in_pm_CompAttrConstructor8949);
                    p_QName454 = p_QName();

                    state._fsp--;
                    if (state.failed) {
                        return retval;
                    }
                    if (state.backtracking == 0) {
                        adaptor.addChild(root_0, p_QName454.getTree());
                    }

                }
                    break;
                case 2:
                    // XQueryParser.g:1056:44: ( LBRACKET p_Expr[true,true] RBRACKET )
                {
                    // XQueryParser.g:1056:44: ( LBRACKET p_Expr[true,true] RBRACKET )
                    // XQueryParser.g:1056:45: LBRACKET p_Expr[true,true] RBRACKET
                    {
                        LBRACKET455 = (CommonToken)match(input, LBRACKET, FOLLOW_LBRACKET_in_pm_CompAttrConstructor8954);
                        if (state.failed) {
                            return retval;
                        }
                        if (state.backtracking == 0) {
                            LBRACKET455_tree = (XQDTCommonTree)adaptor.create(LBRACKET455);
                            adaptor.addChild(root_0, LBRACKET455_tree);
                        }
                        pushFollow(FOLLOW_p_Expr_in_pm_CompAttrConstructor8956);
                        p_Expr456 = p_Expr(true, true);

                        state._fsp--;
                        if (state.failed) {
                            return retval;
                        }
                        if (state.backtracking == 0) {
                            adaptor.addChild(root_0, p_Expr456.getTree());
                        }
                        RBRACKET457 = (CommonToken)match(input, RBRACKET, FOLLOW_RBRACKET_in_pm_CompAttrConstructor8959);
                        if (state.failed) {
                            return retval;
                        }
                        if (state.backtracking == 0) {
                            RBRACKET457_tree = (XQDTCommonTree)adaptor.create(RBRACKET457);
                            adaptor.addChild(root_0, RBRACKET457_tree);
                        }

                    }

                }
                    break;

                }

                LBRACKET458 = (CommonToken)match(input, LBRACKET, FOLLOW_LBRACKET_in_pm_CompAttrConstructor8963);
                if (state.failed) {
                    return retval;
                }
                if (state.backtracking == 0) {
                    LBRACKET458_tree = (XQDTCommonTree)adaptor.create(LBRACKET458);
                    adaptor.addChild(root_0, LBRACKET458_tree);
                }
                pushFollow(FOLLOW_p_StatementsAndOptionalExpr_in_pm_CompAttrConstructor8965);
                p_StatementsAndOptionalExpr459 = p_StatementsAndOptionalExpr();

                state._fsp--;
                if (state.failed) {
                    return retval;
                }
                if (state.backtracking == 0) {
                    adaptor.addChild(root_0, p_StatementsAndOptionalExpr459.getTree());
                }
                RBRACKET460 = (CommonToken)match(input, RBRACKET, FOLLOW_RBRACKET_in_pm_CompAttrConstructor8967);
                if (state.failed) {
                    return retval;
                }
                if (state.backtracking == 0) {
                    RBRACKET460_tree = (XQDTCommonTree)adaptor.create(RBRACKET460);
                    adaptor.addChild(root_0, RBRACKET460_tree);
                }

            }

            retval.stop = input.LT(-1);

            if (state.backtracking == 0) {

                retval.tree = (XQDTCommonTree)adaptor.rulePostProcessing(root_0);
                adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        } catch (RecognitionException re) {
            reportError(re);
            recover(input, re);
            retval.tree = (XQDTCommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        } finally {
        }
        return retval;
    }

    // $ANTLR end "pm_CompAttrConstructor"

    public static class p_CompNamespaceConstructor_return extends ParserRuleReturnScope {
        XQDTCommonTree tree;

        public Object getTree() {
            return tree;
        }
    };

    // $ANTLR start "p_CompNamespaceConstructor"
    // XQueryParser.g:1060:1: p_CompNamespaceConstructor : k= NAMESPACE ( p_Prefix | ( LBRACKET p_PrefixExpr RBRACKET ) ) LBRACKET ( p_URIExpr )? RBRACKET ;
    public final XQueryParser.p_CompNamespaceConstructor_return p_CompNamespaceConstructor()
            throws RecognitionException {
        XQueryParser.p_CompNamespaceConstructor_return retval = new XQueryParser.p_CompNamespaceConstructor_return();
        retval.start = input.LT(1);

        XQDTCommonTree root_0 = null;

        CommonToken k = null;
        CommonToken LBRACKET462 = null;
        CommonToken RBRACKET464 = null;
        CommonToken LBRACKET465 = null;
        CommonToken RBRACKET467 = null;
        XQueryParser.p_Prefix_return p_Prefix461 = null;

        XQueryParser.p_PrefixExpr_return p_PrefixExpr463 = null;

        XQueryParser.p_URIExpr_return p_URIExpr466 = null;

        XQDTCommonTree k_tree = null;
        XQDTCommonTree LBRACKET462_tree = null;
        XQDTCommonTree RBRACKET464_tree = null;
        XQDTCommonTree LBRACKET465_tree = null;
        XQDTCommonTree RBRACKET467_tree = null;

        try {
            // XQueryParser.g:1061:9: (k= NAMESPACE ( p_Prefix | ( LBRACKET p_PrefixExpr RBRACKET ) ) LBRACKET ( p_URIExpr )? RBRACKET )
            // XQueryParser.g:1061:11: k= NAMESPACE ( p_Prefix | ( LBRACKET p_PrefixExpr RBRACKET ) ) LBRACKET ( p_URIExpr )? RBRACKET
            {
                root_0 = (XQDTCommonTree)adaptor.nil();

                k = (CommonToken)match(input, NAMESPACE, FOLLOW_NAMESPACE_in_p_CompNamespaceConstructor8995);
                if (state.failed) {
                    return retval;
                }
                if (state.backtracking == 0) {
                    k_tree = (XQDTCommonTree)adaptor.create(k);
                    adaptor.addChild(root_0, k_tree);
                }
                if (state.backtracking == 0) {
                    ak(k);
                }
                // XQueryParser.g:1061:33: ( p_Prefix | ( LBRACKET p_PrefixExpr RBRACKET ) )
                int alt155 = 2;
                int LA155_0 = input.LA(1);

                if (((LA155_0 >= ANCESTOR && LA155_0 <= SKIP) || (LA155_0 >= VALUE && LA155_0 <= QUOT_ER)
                        || LA155_0 == L_NCName || LA155_0 == EXPLICITLY)) {
                    alt155 = 1;
                } else if ((LA155_0 == LBRACKET)) {
                    alt155 = 2;
                } else {
                    if (state.backtracking > 0) {
                        state.failed = true;
                        return retval;
                    }
                    NoViableAltException nvae = new NoViableAltException("", 155, 0, input);

                    throw nvae;
                }
                switch (alt155) {
                case 1:
                    // XQueryParser.g:1061:34: p_Prefix
                {
                    pushFollow(FOLLOW_p_Prefix_in_p_CompNamespaceConstructor9000);
                    p_Prefix461 = p_Prefix();

                    state._fsp--;
                    if (state.failed) {
                        return retval;
                    }
                    if (state.backtracking == 0) {
                        adaptor.addChild(root_0, p_Prefix461.getTree());
                    }

                }
                    break;
                case 2:
                    // XQueryParser.g:1061:45: ( LBRACKET p_PrefixExpr RBRACKET )
                {
                    // XQueryParser.g:1061:45: ( LBRACKET p_PrefixExpr RBRACKET )
                    // XQueryParser.g:1061:46: LBRACKET p_PrefixExpr RBRACKET
                    {
                        LBRACKET462 = (CommonToken)match(input, LBRACKET,
                                FOLLOW_LBRACKET_in_p_CompNamespaceConstructor9005);
                        if (state.failed) {
                            return retval;
                        }
                        if (state.backtracking == 0) {
                            LBRACKET462_tree = (XQDTCommonTree)adaptor.create(LBRACKET462);
                            adaptor.addChild(root_0, LBRACKET462_tree);
                        }
                        pushFollow(FOLLOW_p_PrefixExpr_in_p_CompNamespaceConstructor9007);
                        p_PrefixExpr463 = p_PrefixExpr();

                        state._fsp--;
                        if (state.failed) {
                            return retval;
                        }
                        if (state.backtracking == 0) {
                            adaptor.addChild(root_0, p_PrefixExpr463.getTree());
                        }
                        RBRACKET464 = (CommonToken)match(input, RBRACKET,
                                FOLLOW_RBRACKET_in_p_CompNamespaceConstructor9009);
                        if (state.failed) {
                            return retval;
                        }
                        if (state.backtracking == 0) {
                            RBRACKET464_tree = (XQDTCommonTree)adaptor.create(RBRACKET464);
                            adaptor.addChild(root_0, RBRACKET464_tree);
                        }

                    }

                }
                    break;

                }

                LBRACKET465 = (CommonToken)match(input, LBRACKET, FOLLOW_LBRACKET_in_p_CompNamespaceConstructor9013);
                if (state.failed) {
                    return retval;
                }
                if (state.backtracking == 0) {
                    LBRACKET465_tree = (XQDTCommonTree)adaptor.create(LBRACKET465);
                    adaptor.addChild(root_0, LBRACKET465_tree);
                }
                // XQueryParser.g:1061:88: ( p_URIExpr )?
                int alt156 = 2;
                int LA156_0 = input.LA(1);

                if (((LA156_0 >= ANCESTOR && LA156_0 <= QUOT_ER) || LA156_0 == LPAREN
                        || (LA156_0 >= DOLLAR && LA156_0 <= LBRACKET) || (LA156_0 >= STAR && LA156_0 <= SMALLER)
                        || (LA156_0 >= SLASH && LA156_0 <= DOT_DOT) || LA156_0 == ATTR_SIGN
                        || (LA156_0 >= APOS && LA156_0 <= QUOT) || LA156_0 == L_NCName
                        || (LA156_0 >= L_Pragma && LA156_0 <= L_DoubleLiteral) || LA156_0 == EXPLICITLY)) {
                    alt156 = 1;
                }
                switch (alt156) {
                case 1:
                    // XQueryParser.g:1061:88: p_URIExpr
                {
                    pushFollow(FOLLOW_p_URIExpr_in_p_CompNamespaceConstructor9015);
                    p_URIExpr466 = p_URIExpr();

                    state._fsp--;
                    if (state.failed) {
                        return retval;
                    }
                    if (state.backtracking == 0) {
                        adaptor.addChild(root_0, p_URIExpr466.getTree());
                    }

                }
                    break;

                }

                RBRACKET467 = (CommonToken)match(input, RBRACKET, FOLLOW_RBRACKET_in_p_CompNamespaceConstructor9018);
                if (state.failed) {
                    return retval;
                }
                if (state.backtracking == 0) {
                    RBRACKET467_tree = (XQDTCommonTree)adaptor.create(RBRACKET467);
                    adaptor.addChild(root_0, RBRACKET467_tree);
                }

            }

            retval.stop = input.LT(-1);

            if (state.backtracking == 0) {

                retval.tree = (XQDTCommonTree)adaptor.rulePostProcessing(root_0);
                adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        } catch (RecognitionException re) {
            reportError(re);
            recover(input, re);
            retval.tree = (XQDTCommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        } finally {
        }
        return retval;
    }

    // $ANTLR end "p_CompNamespaceConstructor"

    public static class p_Prefix_return extends ParserRuleReturnScope {
        XQDTCommonTree tree;

        public Object getTree() {
            return tree;
        }
    };

    // $ANTLR start "p_Prefix"
    // XQueryParser.g:1065:1: p_Prefix : p_NCName ;
    public final XQueryParser.p_Prefix_return p_Prefix() throws RecognitionException {
        XQueryParser.p_Prefix_return retval = new XQueryParser.p_Prefix_return();
        retval.start = input.LT(1);

        XQDTCommonTree root_0 = null;

        XQueryParser.p_NCName_return p_NCName468 = null;

        try {
            // XQueryParser.g:1066:9: ( p_NCName )
            // XQueryParser.g:1066:11: p_NCName
            {
                root_0 = (XQDTCommonTree)adaptor.nil();

                pushFollow(FOLLOW_p_NCName_in_p_Prefix9044);
                p_NCName468 = p_NCName();

                state._fsp--;
                if (state.failed) {
                    return retval;
                }
                if (state.backtracking == 0) {
                    adaptor.addChild(root_0, p_NCName468.getTree());
                }

            }

            retval.stop = input.LT(-1);

            if (state.backtracking == 0) {

                retval.tree = (XQDTCommonTree)adaptor.rulePostProcessing(root_0);
                adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        } catch (RecognitionException re) {
            reportError(re);
            recover(input, re);
            retval.tree = (XQDTCommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        } finally {
        }
        return retval;
    }

    // $ANTLR end "p_Prefix"

    public static class p_PrefixExpr_return extends ParserRuleReturnScope {
        XQDTCommonTree tree;

        public Object getTree() {
            return tree;
        }
    };

    // $ANTLR start "p_PrefixExpr"
    // XQueryParser.g:1070:1: p_PrefixExpr : p_Expr[true,true] ;
    public final XQueryParser.p_PrefixExpr_return p_PrefixExpr() throws RecognitionException {
        XQueryParser.p_PrefixExpr_return retval = new XQueryParser.p_PrefixExpr_return();
        retval.start = input.LT(1);

        XQDTCommonTree root_0 = null;

        XQueryParser.p_Expr_return p_Expr469 = null;

        try {
            // XQueryParser.g:1071:9: ( p_Expr[true,true] )
            // XQueryParser.g:1071:11: p_Expr[true,true]
            {
                root_0 = (XQDTCommonTree)adaptor.nil();

                pushFollow(FOLLOW_p_Expr_in_p_PrefixExpr9070);
                p_Expr469 = p_Expr(true, true);

                state._fsp--;
                if (state.failed) {
                    return retval;
                }
                if (state.backtracking == 0) {
                    adaptor.addChild(root_0, p_Expr469.getTree());
                }

            }

            retval.stop = input.LT(-1);

            if (state.backtracking == 0) {

                retval.tree = (XQDTCommonTree)adaptor.rulePostProcessing(root_0);
                adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        } catch (RecognitionException re) {
            reportError(re);
            recover(input, re);
            retval.tree = (XQDTCommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        } finally {
        }
        return retval;
    }

    // $ANTLR end "p_PrefixExpr"

    public static class p_URIExpr_return extends ParserRuleReturnScope {
        XQDTCommonTree tree;

        public Object getTree() {
            return tree;
        }
    };

    // $ANTLR start "p_URIExpr"
    // XQueryParser.g:1075:1: p_URIExpr : p_Expr[true,true] ;
    public final XQueryParser.p_URIExpr_return p_URIExpr() throws RecognitionException {
        XQueryParser.p_URIExpr_return retval = new XQueryParser.p_URIExpr_return();
        retval.start = input.LT(1);

        XQDTCommonTree root_0 = null;

        XQueryParser.p_Expr_return p_Expr470 = null;

        try {
            // XQueryParser.g:1076:9: ( p_Expr[true,true] )
            // XQueryParser.g:1076:11: p_Expr[true,true]
            {
                root_0 = (XQDTCommonTree)adaptor.nil();

                pushFollow(FOLLOW_p_Expr_in_p_URIExpr9097);
                p_Expr470 = p_Expr(true, true);

                state._fsp--;
                if (state.failed) {
                    return retval;
                }
                if (state.backtracking == 0) {
                    adaptor.addChild(root_0, p_Expr470.getTree());
                }

            }

            retval.stop = input.LT(-1);

            if (state.backtracking == 0) {

                retval.tree = (XQDTCommonTree)adaptor.rulePostProcessing(root_0);
                adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        } catch (RecognitionException re) {
            reportError(re);
            recover(input, re);
            retval.tree = (XQDTCommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        } finally {
        }
        return retval;
    }

    // $ANTLR end "p_URIExpr"

    public static class p_CompTextConstructor_return extends ParserRuleReturnScope {
        XQDTCommonTree tree;

        public Object getTree() {
            return tree;
        }
    };

    // $ANTLR start "p_CompTextConstructor"
    // XQueryParser.g:1080:1: p_CompTextConstructor : k= TEXT LBRACKET p_Expr[true,true] RBRACKET ;
    public final XQueryParser.p_CompTextConstructor_return p_CompTextConstructor() throws RecognitionException {
        XQueryParser.p_CompTextConstructor_return retval = new XQueryParser.p_CompTextConstructor_return();
        retval.start = input.LT(1);

        XQDTCommonTree root_0 = null;

        CommonToken k = null;
        CommonToken LBRACKET471 = null;
        CommonToken RBRACKET473 = null;
        XQueryParser.p_Expr_return p_Expr472 = null;

        XQDTCommonTree k_tree = null;
        XQDTCommonTree LBRACKET471_tree = null;
        XQDTCommonTree RBRACKET473_tree = null;

        try {
            // XQueryParser.g:1081:9: (k= TEXT LBRACKET p_Expr[true,true] RBRACKET )
            // XQueryParser.g:1081:11: k= TEXT LBRACKET p_Expr[true,true] RBRACKET
            {
                root_0 = (XQDTCommonTree)adaptor.nil();

                k = (CommonToken)match(input, TEXT, FOLLOW_TEXT_in_p_CompTextConstructor9126);
                if (state.failed) {
                    return retval;
                }
                if (state.backtracking == 0) {
                    k_tree = (XQDTCommonTree)adaptor.create(k);
                    adaptor.addChild(root_0, k_tree);
                }
                if (state.backtracking == 0) {
                    ak(k);
                }
                LBRACKET471 = (CommonToken)match(input, LBRACKET, FOLLOW_LBRACKET_in_p_CompTextConstructor9130);
                if (state.failed) {
                    return retval;
                }
                if (state.backtracking == 0) {
                    LBRACKET471_tree = (XQDTCommonTree)adaptor.create(LBRACKET471);
                    adaptor.addChild(root_0, LBRACKET471_tree);
                }
                pushFollow(FOLLOW_p_Expr_in_p_CompTextConstructor9132);
                p_Expr472 = p_Expr(true, true);

                state._fsp--;
                if (state.failed) {
                    return retval;
                }
                if (state.backtracking == 0) {
                    adaptor.addChild(root_0, p_Expr472.getTree());
                }
                RBRACKET473 = (CommonToken)match(input, RBRACKET, FOLLOW_RBRACKET_in_p_CompTextConstructor9135);
                if (state.failed) {
                    return retval;
                }
                if (state.backtracking == 0) {
                    RBRACKET473_tree = (XQDTCommonTree)adaptor.create(RBRACKET473);
                    adaptor.addChild(root_0, RBRACKET473_tree);
                }

            }

            retval.stop = input.LT(-1);

            if (state.backtracking == 0) {

                retval.tree = (XQDTCommonTree)adaptor.rulePostProcessing(root_0);
                adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        } catch (RecognitionException re) {
            reportError(re);
            recover(input, re);
            retval.tree = (XQDTCommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        } finally {
        }
        return retval;
    }

    // $ANTLR end "p_CompTextConstructor"

    public static class p_CompBinaryConstructor_return extends ParserRuleReturnScope {
        XQDTCommonTree tree;

        public Object getTree() {
            return tree;
        }
    };

    // $ANTLR start "p_CompBinaryConstructor"
    // XQueryParser.g:1085:1: p_CompBinaryConstructor : k= BINARY LBRACKET p_Expr[true,true] RBRACKET ;
    public final XQueryParser.p_CompBinaryConstructor_return p_CompBinaryConstructor() throws RecognitionException {
        XQueryParser.p_CompBinaryConstructor_return retval = new XQueryParser.p_CompBinaryConstructor_return();
        retval.start = input.LT(1);

        XQDTCommonTree root_0 = null;

        CommonToken k = null;
        CommonToken LBRACKET474 = null;
        CommonToken RBRACKET476 = null;
        XQueryParser.p_Expr_return p_Expr475 = null;

        XQDTCommonTree k_tree = null;
        XQDTCommonTree LBRACKET474_tree = null;
        XQDTCommonTree RBRACKET476_tree = null;

        try {
            // XQueryParser.g:1086:9: (k= BINARY LBRACKET p_Expr[true,true] RBRACKET )
            // XQueryParser.g:1086:11: k= BINARY LBRACKET p_Expr[true,true] RBRACKET
            {
                root_0 = (XQDTCommonTree)adaptor.nil();

                k = (CommonToken)match(input, BINARY, FOLLOW_BINARY_in_p_CompBinaryConstructor9163);
                if (state.failed) {
                    return retval;
                }
                if (state.backtracking == 0) {
                    k_tree = (XQDTCommonTree)adaptor.create(k);
                    adaptor.addChild(root_0, k_tree);
                }
                if (state.backtracking == 0) {
                    ak(k);
                }
                LBRACKET474 = (CommonToken)match(input, LBRACKET, FOLLOW_LBRACKET_in_p_CompBinaryConstructor9167);
                if (state.failed) {
                    return retval;
                }
                if (state.backtracking == 0) {
                    LBRACKET474_tree = (XQDTCommonTree)adaptor.create(LBRACKET474);
                    adaptor.addChild(root_0, LBRACKET474_tree);
                }
                pushFollow(FOLLOW_p_Expr_in_p_CompBinaryConstructor9169);
                p_Expr475 = p_Expr(true, true);

                state._fsp--;
                if (state.failed) {
                    return retval;
                }
                if (state.backtracking == 0) {
                    adaptor.addChild(root_0, p_Expr475.getTree());
                }
                RBRACKET476 = (CommonToken)match(input, RBRACKET, FOLLOW_RBRACKET_in_p_CompBinaryConstructor9172);
                if (state.failed) {
                    return retval;
                }
                if (state.backtracking == 0) {
                    RBRACKET476_tree = (XQDTCommonTree)adaptor.create(RBRACKET476);
                    adaptor.addChild(root_0, RBRACKET476_tree);
                }

            }

            retval.stop = input.LT(-1);

            if (state.backtracking == 0) {

                retval.tree = (XQDTCommonTree)adaptor.rulePostProcessing(root_0);
                adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        } catch (RecognitionException re) {
            reportError(re);
            recover(input, re);
            retval.tree = (XQDTCommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        } finally {
        }
        return retval;
    }

    // $ANTLR end "p_CompBinaryConstructor"

    public static class pm_CompCommentConstructor_return extends ParserRuleReturnScope {
        XQDTCommonTree tree;

        public Object getTree() {
            return tree;
        }
    };

    // $ANTLR start "pm_CompCommentConstructor"
    // XQueryParser.g:1091:1: pm_CompCommentConstructor : k= COMMENT LBRACKET p_StatementsAndOptionalExpr RBRACKET ;
    public final XQueryParser.pm_CompCommentConstructor_return pm_CompCommentConstructor() throws RecognitionException {
        XQueryParser.pm_CompCommentConstructor_return retval = new XQueryParser.pm_CompCommentConstructor_return();
        retval.start = input.LT(1);

        XQDTCommonTree root_0 = null;

        CommonToken k = null;
        CommonToken LBRACKET477 = null;
        CommonToken RBRACKET479 = null;
        XQueryParser.p_StatementsAndOptionalExpr_return p_StatementsAndOptionalExpr478 = null;

        XQDTCommonTree k_tree = null;
        XQDTCommonTree LBRACKET477_tree = null;
        XQDTCommonTree RBRACKET479_tree = null;

        try {
            // XQueryParser.g:1092:9: (k= COMMENT LBRACKET p_StatementsAndOptionalExpr RBRACKET )
            // XQueryParser.g:1092:11: k= COMMENT LBRACKET p_StatementsAndOptionalExpr RBRACKET
            {
                root_0 = (XQDTCommonTree)adaptor.nil();

                k = (CommonToken)match(input, COMMENT, FOLLOW_COMMENT_in_pm_CompCommentConstructor9201);
                if (state.failed) {
                    return retval;
                }
                if (state.backtracking == 0) {
                    k_tree = (XQDTCommonTree)adaptor.create(k);
                    adaptor.addChild(root_0, k_tree);
                }
                if (state.backtracking == 0) {
                    ak(k);
                }
                LBRACKET477 = (CommonToken)match(input, LBRACKET, FOLLOW_LBRACKET_in_pm_CompCommentConstructor9205);
                if (state.failed) {
                    return retval;
                }
                if (state.backtracking == 0) {
                    LBRACKET477_tree = (XQDTCommonTree)adaptor.create(LBRACKET477);
                    adaptor.addChild(root_0, LBRACKET477_tree);
                }
                pushFollow(FOLLOW_p_StatementsAndOptionalExpr_in_pm_CompCommentConstructor9207);
                p_StatementsAndOptionalExpr478 = p_StatementsAndOptionalExpr();

                state._fsp--;
                if (state.failed) {
                    return retval;
                }
                if (state.backtracking == 0) {
                    adaptor.addChild(root_0, p_StatementsAndOptionalExpr478.getTree());
                }
                RBRACKET479 = (CommonToken)match(input, RBRACKET, FOLLOW_RBRACKET_in_pm_CompCommentConstructor9209);
                if (state.failed) {
                    return retval;
                }
                if (state.backtracking == 0) {
                    RBRACKET479_tree = (XQDTCommonTree)adaptor.create(RBRACKET479);
                    adaptor.addChild(root_0, RBRACKET479_tree);
                }

            }

            retval.stop = input.LT(-1);

            if (state.backtracking == 0) {

                retval.tree = (XQDTCommonTree)adaptor.rulePostProcessing(root_0);
                adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        } catch (RecognitionException re) {
            reportError(re);
            recover(input, re);
            retval.tree = (XQDTCommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        } finally {
        }
        return retval;
    }

    // $ANTLR end "pm_CompCommentConstructor"

    public static class pm_CompPIConstructor_return extends ParserRuleReturnScope {
        XQDTCommonTree tree;

        public Object getTree() {
            return tree;
        }
    };

    // $ANTLR start "pm_CompPIConstructor"
    // XQueryParser.g:1097:1: pm_CompPIConstructor : k= PROCESSING_INSTRUCTION ( p_NCName | ( LBRACKET p_Expr[true,true] RBRACKET ) ) LBRACKET p_StatementsAndOptionalExpr RBRACKET ;
    public final XQueryParser.pm_CompPIConstructor_return pm_CompPIConstructor() throws RecognitionException {
        XQueryParser.pm_CompPIConstructor_return retval = new XQueryParser.pm_CompPIConstructor_return();
        retval.start = input.LT(1);

        XQDTCommonTree root_0 = null;

        CommonToken k = null;
        CommonToken LBRACKET481 = null;
        CommonToken RBRACKET483 = null;
        CommonToken LBRACKET484 = null;
        CommonToken RBRACKET486 = null;
        XQueryParser.p_NCName_return p_NCName480 = null;

        XQueryParser.p_Expr_return p_Expr482 = null;

        XQueryParser.p_StatementsAndOptionalExpr_return p_StatementsAndOptionalExpr485 = null;

        XQDTCommonTree k_tree = null;
        XQDTCommonTree LBRACKET481_tree = null;
        XQDTCommonTree RBRACKET483_tree = null;
        XQDTCommonTree LBRACKET484_tree = null;
        XQDTCommonTree RBRACKET486_tree = null;

        try {
            // XQueryParser.g:1098:9: (k= PROCESSING_INSTRUCTION ( p_NCName | ( LBRACKET p_Expr[true,true] RBRACKET ) ) LBRACKET p_StatementsAndOptionalExpr RBRACKET )
            // XQueryParser.g:1098:11: k= PROCESSING_INSTRUCTION ( p_NCName | ( LBRACKET p_Expr[true,true] RBRACKET ) ) LBRACKET p_StatementsAndOptionalExpr RBRACKET
            {
                root_0 = (XQDTCommonTree)adaptor.nil();

                k = (CommonToken)match(input, PROCESSING_INSTRUCTION,
                        FOLLOW_PROCESSING_INSTRUCTION_in_pm_CompPIConstructor9238);
                if (state.failed) {
                    return retval;
                }
                if (state.backtracking == 0) {
                    k_tree = (XQDTCommonTree)adaptor.create(k);
                    adaptor.addChild(root_0, k_tree);
                }
                if (state.backtracking == 0) {
                    ak(k);
                }
                // XQueryParser.g:1098:46: ( p_NCName | ( LBRACKET p_Expr[true,true] RBRACKET ) )
                int alt157 = 2;
                int LA157_0 = input.LA(1);

                if (((LA157_0 >= ANCESTOR && LA157_0 <= SKIP) || (LA157_0 >= VALUE && LA157_0 <= QUOT_ER)
                        || LA157_0 == L_NCName || LA157_0 == EXPLICITLY)) {
                    alt157 = 1;
                } else if ((LA157_0 == LBRACKET)) {
                    alt157 = 2;
                } else {
                    if (state.backtracking > 0) {
                        state.failed = true;
                        return retval;
                    }
                    NoViableAltException nvae = new NoViableAltException("", 157, 0, input);

                    throw nvae;
                }
                switch (alt157) {
                case 1:
                    // XQueryParser.g:1098:47: p_NCName
                {
                    pushFollow(FOLLOW_p_NCName_in_pm_CompPIConstructor9243);
                    p_NCName480 = p_NCName();

                    state._fsp--;
                    if (state.failed) {
                        return retval;
                    }
                    if (state.backtracking == 0) {
                        adaptor.addChild(root_0, p_NCName480.getTree());
                    }

                }
                    break;
                case 2:
                    // XQueryParser.g:1098:58: ( LBRACKET p_Expr[true,true] RBRACKET )
                {
                    // XQueryParser.g:1098:58: ( LBRACKET p_Expr[true,true] RBRACKET )
                    // XQueryParser.g:1098:59: LBRACKET p_Expr[true,true] RBRACKET
                    {
                        LBRACKET481 = (CommonToken)match(input, LBRACKET, FOLLOW_LBRACKET_in_pm_CompPIConstructor9248);
                        if (state.failed) {
                            return retval;
                        }
                        if (state.backtracking == 0) {
                            LBRACKET481_tree = (XQDTCommonTree)adaptor.create(LBRACKET481);
                            adaptor.addChild(root_0, LBRACKET481_tree);
                        }
                        pushFollow(FOLLOW_p_Expr_in_pm_CompPIConstructor9250);
                        p_Expr482 = p_Expr(true, true);

                        state._fsp--;
                        if (state.failed) {
                            return retval;
                        }
                        if (state.backtracking == 0) {
                            adaptor.addChild(root_0, p_Expr482.getTree());
                        }
                        RBRACKET483 = (CommonToken)match(input, RBRACKET, FOLLOW_RBRACKET_in_pm_CompPIConstructor9253);
                        if (state.failed) {
                            return retval;
                        }
                        if (state.backtracking == 0) {
                            RBRACKET483_tree = (XQDTCommonTree)adaptor.create(RBRACKET483);
                            adaptor.addChild(root_0, RBRACKET483_tree);
                        }

                    }

                }
                    break;

                }

                LBRACKET484 = (CommonToken)match(input, LBRACKET, FOLLOW_LBRACKET_in_pm_CompPIConstructor9257);
                if (state.failed) {
                    return retval;
                }
                if (state.backtracking == 0) {
                    LBRACKET484_tree = (XQDTCommonTree)adaptor.create(LBRACKET484);
                    adaptor.addChild(root_0, LBRACKET484_tree);
                }
                pushFollow(FOLLOW_p_StatementsAndOptionalExpr_in_pm_CompPIConstructor9259);
                p_StatementsAndOptionalExpr485 = p_StatementsAndOptionalExpr();

                state._fsp--;
                if (state.failed) {
                    return retval;
                }
                if (state.backtracking == 0) {
                    adaptor.addChild(root_0, p_StatementsAndOptionalExpr485.getTree());
                }
                RBRACKET486 = (CommonToken)match(input, RBRACKET, FOLLOW_RBRACKET_in_pm_CompPIConstructor9261);
                if (state.failed) {
                    return retval;
                }
                if (state.backtracking == 0) {
                    RBRACKET486_tree = (XQDTCommonTree)adaptor.create(RBRACKET486);
                    adaptor.addChild(root_0, RBRACKET486_tree);
                }

            }

            retval.stop = input.LT(-1);

            if (state.backtracking == 0) {

                retval.tree = (XQDTCommonTree)adaptor.rulePostProcessing(root_0);
                adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        } catch (RecognitionException re) {
            reportError(re);
            recover(input, re);
            retval.tree = (XQDTCommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        } finally {
        }
        return retval;
    }

    // $ANTLR end "pm_CompPIConstructor"

    public static class p_SingleType_return extends ParserRuleReturnScope {
        XQDTCommonTree tree;

        public Object getTree() {
            return tree;
        }
    };

    // $ANTLR start "p_SingleType"
    // XQueryParser.g:1120:1: p_SingleType : p_AtomicOrUnionType ( QUESTION )? ;
    public final XQueryParser.p_SingleType_return p_SingleType() throws RecognitionException {
        XQueryParser.p_SingleType_return retval = new XQueryParser.p_SingleType_return();
        retval.start = input.LT(1);

        XQDTCommonTree root_0 = null;

        CommonToken QUESTION488 = null;
        XQueryParser.p_AtomicOrUnionType_return p_AtomicOrUnionType487 = null;

        XQDTCommonTree QUESTION488_tree = null;

        try {
            // XQueryParser.g:1121:9: ( p_AtomicOrUnionType ( QUESTION )? )
            // XQueryParser.g:1121:11: p_AtomicOrUnionType ( QUESTION )?
            {
                root_0 = (XQDTCommonTree)adaptor.nil();

                pushFollow(FOLLOW_p_AtomicOrUnionType_in_p_SingleType9305);
                p_AtomicOrUnionType487 = p_AtomicOrUnionType();

                state._fsp--;
                if (state.failed) {
                    return retval;
                }
                if (state.backtracking == 0) {
                    adaptor.addChild(root_0, p_AtomicOrUnionType487.getTree());
                }
                // XQueryParser.g:1121:31: ( QUESTION )?
                int alt158 = 2;
                int LA158_0 = input.LA(1);

                if ((LA158_0 == QUESTION)) {
                    alt158 = 1;
                }
                switch (alt158) {
                case 1:
                    // XQueryParser.g:1121:31: QUESTION
                {
                    QUESTION488 = (CommonToken)match(input, QUESTION, FOLLOW_QUESTION_in_p_SingleType9307);
                    if (state.failed) {
                        return retval;
                    }
                    if (state.backtracking == 0) {
                        QUESTION488_tree = (XQDTCommonTree)adaptor.create(QUESTION488);
                        adaptor.addChild(root_0, QUESTION488_tree);
                    }

                }
                    break;

                }

            }

            retval.stop = input.LT(-1);

            if (state.backtracking == 0) {

                retval.tree = (XQDTCommonTree)adaptor.rulePostProcessing(root_0);
                adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        } catch (RecognitionException re) {
            reportError(re);
            recover(input, re);
            retval.tree = (XQDTCommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        } finally {
        }
        return retval;
    }

    // $ANTLR end "p_SingleType"

    public static class p_TypeDeclaration_return extends ParserRuleReturnScope {
        XQDTCommonTree tree;

        public Object getTree() {
            return tree;
        }
    };

    // $ANTLR start "p_TypeDeclaration"
    // XQueryParser.g:1125:1: p_TypeDeclaration : k= AS st= p_SequenceType -> ^( TypeDeclaration $st) ;
    public final XQueryParser.p_TypeDeclaration_return p_TypeDeclaration() throws RecognitionException {
        XQueryParser.p_TypeDeclaration_return retval = new XQueryParser.p_TypeDeclaration_return();
        retval.start = input.LT(1);

        XQDTCommonTree root_0 = null;

        CommonToken k = null;
        XQueryParser.p_SequenceType_return st = null;

        XQDTCommonTree k_tree = null;
        RewriteRuleTokenStream stream_AS = new RewriteRuleTokenStream(adaptor, "token AS");
        RewriteRuleSubtreeStream stream_p_SequenceType = new RewriteRuleSubtreeStream(adaptor, "rule p_SequenceType");
        try {
            // XQueryParser.g:1126:9: (k= AS st= p_SequenceType -> ^( TypeDeclaration $st) )
            // XQueryParser.g:1126:11: k= AS st= p_SequenceType
            {
                k = (CommonToken)match(input, AS, FOLLOW_AS_in_p_TypeDeclaration9336);
                if (state.failed) {
                    return retval;
                }
                if (state.backtracking == 0) {
                    stream_AS.add(k);
                }

                if (state.backtracking == 0) {
                    ak(k);
                }
                pushFollow(FOLLOW_p_SequenceType_in_p_TypeDeclaration9342);
                st = p_SequenceType();

                state._fsp--;
                if (state.failed) {
                    return retval;
                }
                if (state.backtracking == 0) {
                    stream_p_SequenceType.add(st.getTree());
                }

                // AST REWRITE
                // elements: st
                // token labels:
                // rule labels: retval, st
                // token list labels:
                // rule list labels:
                // wildcard labels:
                if (state.backtracking == 0) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval = new RewriteRuleSubtreeStream(adaptor, "rule retval",
                            retval != null ? retval.tree : null);
                    RewriteRuleSubtreeStream stream_st = new RewriteRuleSubtreeStream(adaptor, "rule st",
                            st != null ? st.tree : null);

                    root_0 = (XQDTCommonTree)adaptor.nil();
                    // 1127:17: -> ^( TypeDeclaration $st)
                    {
                        // XQueryParser.g:1127:20: ^( TypeDeclaration $st)
                        {
                            XQDTCommonTree root_1 = (XQDTCommonTree)adaptor.nil();
                            root_1 = (XQDTCommonTree)adaptor.becomeRoot(
                                    adaptor.create(TypeDeclaration, "TypeDeclaration"), root_1);

                            adaptor.addChild(root_1, stream_st.nextTree());

                            adaptor.addChild(root_0, root_1);
                        }

                    }

                    retval.tree = root_0;
                }
            }

            retval.stop = input.LT(-1);

            if (state.backtracking == 0) {

                retval.tree = (XQDTCommonTree)adaptor.rulePostProcessing(root_0);
                adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        } catch (RecognitionException re) {
            reportError(re);
            recover(input, re);
            retval.tree = (XQDTCommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        } finally {
        }
        return retval;
    }

    // $ANTLR end "p_TypeDeclaration"

    public static class p_SequenceType_return extends ParserRuleReturnScope {
        XQDTCommonTree tree;

        public Object getTree() {
            return tree;
        }
    };

    // $ANTLR start "p_SequenceType"
    // XQueryParser.g:1131:1: p_SequenceType : (k= EMPTY_SEQUENCE l= LPAREN r= RPAREN -> ^( SequenceType ^( EmptySequenceTest $k $l $r) ) | it= p_ItemType ( ( p_OccurrenceIndicator )=>oi= p_OccurrenceIndicator )? -> ^( SequenceType $it ( $oi)? ) );
    public final XQueryParser.p_SequenceType_return p_SequenceType() throws RecognitionException {
        XQueryParser.p_SequenceType_return retval = new XQueryParser.p_SequenceType_return();
        retval.start = input.LT(1);

        XQDTCommonTree root_0 = null;

        CommonToken k = null;
        CommonToken l = null;
        CommonToken r = null;
        XQueryParser.p_ItemType_return it = null;

        XQueryParser.p_OccurrenceIndicator_return oi = null;

        XQDTCommonTree k_tree = null;
        XQDTCommonTree l_tree = null;
        XQDTCommonTree r_tree = null;
        RewriteRuleTokenStream stream_EMPTY_SEQUENCE = new RewriteRuleTokenStream(adaptor, "token EMPTY_SEQUENCE");
        RewriteRuleTokenStream stream_RPAREN = new RewriteRuleTokenStream(adaptor, "token RPAREN");
        RewriteRuleTokenStream stream_LPAREN = new RewriteRuleTokenStream(adaptor, "token LPAREN");
        RewriteRuleSubtreeStream stream_p_ItemType = new RewriteRuleSubtreeStream(adaptor, "rule p_ItemType");
        RewriteRuleSubtreeStream stream_p_OccurrenceIndicator = new RewriteRuleSubtreeStream(adaptor,
                "rule p_OccurrenceIndicator");
        try {
            // XQueryParser.g:1132:9: (k= EMPTY_SEQUENCE l= LPAREN r= RPAREN -> ^( SequenceType ^( EmptySequenceTest $k $l $r) ) | it= p_ItemType ( ( p_OccurrenceIndicator )=>oi= p_OccurrenceIndicator )? -> ^( SequenceType $it ( $oi)? ) )
            int alt160 = 2;
            int LA160_0 = input.LA(1);

            if ((LA160_0 == EMPTY_SEQUENCE)) {
                int LA160_1 = input.LA(2);

                if ((LA160_1 == LPAREN)) {
                    alt160 = 1;
                } else if ((LA160_1 == EOF || (LA160_1 >= AND && LA160_1 <= AT) || LA160_1 == CASE
                        || LA160_1 == COLLATION || LA160_1 == DEFAULT || (LA160_1 >= DESCENDING && LA160_1 <= DIV)
                        || LA160_1 == EMPTY || LA160_1 == EQ || (LA160_1 >= EXCEPT && LA160_1 <= EXTERNAL)
                        || LA160_1 == FOR || LA160_1 == GE || (LA160_1 >= GT && LA160_1 <= IDIV) || LA160_1 == IN
                        || (LA160_1 >= INSTANCE && LA160_1 <= IS) || LA160_1 == LE
                        || (LA160_1 >= LET && LA160_1 <= MOD) || LA160_1 == NE || (LA160_1 >= OR && LA160_1 <= ORDER)
                        || (LA160_1 >= RETURN && LA160_1 <= SATISFIES) || LA160_1 == STABLE || LA160_1 == TO
                        || LA160_1 == UNION || LA160_1 == WHERE || LA160_1 == ALLOWING || LA160_1 == COUNT
                        || (LA160_1 >= END && LA160_1 <= GROUP) || LA160_1 == ONLY || LA160_1 == START
                        || (LA160_1 >= AFTER && LA160_1 <= BEFORE) || LA160_1 == INTO || LA160_1 == MODIFY
                        || LA160_1 == WITH || LA160_1 == CONTAINS || LA160_1 == PARAGRAPHS || LA160_1 == SCORE
                        || LA160_1 == SENTENCES || LA160_1 == TIMES || LA160_1 == WORDS || LA160_1 == CONCAT
                        || LA160_1 == RPAREN || (LA160_1 >= LBRACKET && LA160_1 <= RBRACKET)
                        || (LA160_1 >= RSQUARE && LA160_1 <= NOTEQUAL)
                        || (LA160_1 >= COMMA && LA160_1 <= GREATER_GREATER) || LA160_1 == COLON || (LA160_1 >= SEMICOLON && LA160_1 <= VBAR))) {
                    alt160 = 2;
                } else {
                    if (state.backtracking > 0) {
                        state.failed = true;
                        return retval;
                    }
                    NoViableAltException nvae = new NoViableAltException("", 160, 1, input);

                    throw nvae;
                }
            } else if (((LA160_0 >= ANCESTOR && LA160_0 <= EMPTY) || (LA160_0 >= ENCODING && LA160_0 <= SKIP)
                    || (LA160_0 >= VALUE && LA160_0 <= QUOT_ER) || LA160_0 == LPAREN || LA160_0 == L_NCName || LA160_0 == EXPLICITLY)) {
                alt160 = 2;
            } else {
                if (state.backtracking > 0) {
                    state.failed = true;
                    return retval;
                }
                NoViableAltException nvae = new NoViableAltException("", 160, 0, input);

                throw nvae;
            }
            switch (alt160) {
            case 1:
                // XQueryParser.g:1132:11: k= EMPTY_SEQUENCE l= LPAREN r= RPAREN
            {
                k = (CommonToken)match(input, EMPTY_SEQUENCE, FOLLOW_EMPTY_SEQUENCE_in_p_SequenceType9395);
                if (state.failed) {
                    return retval;
                }
                if (state.backtracking == 0) {
                    stream_EMPTY_SEQUENCE.add(k);
                }

                if (state.backtracking == 0) {
                    ak(k);
                }
                l = (CommonToken)match(input, LPAREN, FOLLOW_LPAREN_in_p_SequenceType9401);
                if (state.failed) {
                    return retval;
                }
                if (state.backtracking == 0) {
                    stream_LPAREN.add(l);
                }

                r = (CommonToken)match(input, RPAREN, FOLLOW_RPAREN_in_p_SequenceType9405);
                if (state.failed) {
                    return retval;
                }
                if (state.backtracking == 0) {
                    stream_RPAREN.add(r);
                }

                // AST REWRITE
                // elements: r, k, l
                // token labels: r, l, k
                // rule labels: retval
                // token list labels:
                // rule list labels:
                // wildcard labels:
                if (state.backtracking == 0) {
                    retval.tree = root_0;
                    RewriteRuleTokenStream stream_r = new RewriteRuleTokenStream(adaptor, "token r", r);
                    RewriteRuleTokenStream stream_l = new RewriteRuleTokenStream(adaptor, "token l", l);
                    RewriteRuleTokenStream stream_k = new RewriteRuleTokenStream(adaptor, "token k", k);
                    RewriteRuleSubtreeStream stream_retval = new RewriteRuleSubtreeStream(adaptor, "rule retval",
                            retval != null ? retval.tree : null);

                    root_0 = (XQDTCommonTree)adaptor.nil();
                    // 1133:17: -> ^( SequenceType ^( EmptySequenceTest $k $l $r) )
                    {
                        // XQueryParser.g:1133:20: ^( SequenceType ^( EmptySequenceTest $k $l $r) )
                        {
                            XQDTCommonTree root_1 = (XQDTCommonTree)adaptor.nil();
                            root_1 = (XQDTCommonTree)adaptor.becomeRoot(adaptor.create(SequenceType, "SequenceType"),
                                    root_1);

                            // XQueryParser.g:1133:35: ^( EmptySequenceTest $k $l $r)
                            {
                                XQDTCommonTree root_2 = (XQDTCommonTree)adaptor.nil();
                                root_2 = (XQDTCommonTree)adaptor.becomeRoot(
                                        adaptor.create(EmptySequenceTest, "EmptySequenceTest"), root_2);

                                adaptor.addChild(root_2, stream_k.nextNode());
                                adaptor.addChild(root_2, stream_l.nextNode());
                                adaptor.addChild(root_2, stream_r.nextNode());

                                adaptor.addChild(root_1, root_2);
                            }

                            adaptor.addChild(root_0, root_1);
                        }

                    }

                    retval.tree = root_0;
                }
            }
            break;
            case 2:
                // XQueryParser.g:1134:11: it= p_ItemType ( ( p_OccurrenceIndicator )=>oi= p_OccurrenceIndicator )?
            {
                pushFollow(FOLLOW_p_ItemType_in_p_SequenceType9454);
                it = p_ItemType();

                state._fsp--;
                if (state.failed) {
                    return retval;
                }
                if (state.backtracking == 0) {
                    stream_p_ItemType.add(it.getTree());
                }
                // XQueryParser.g:1134:25: ( ( p_OccurrenceIndicator )=>oi= p_OccurrenceIndicator )?
                int alt159 = 2;
                alt159 = dfa159.predict(input);
                switch (alt159) {
                case 1:
                    // XQueryParser.g:1134:26: ( p_OccurrenceIndicator )=>oi= p_OccurrenceIndicator
                {
                    pushFollow(FOLLOW_p_OccurrenceIndicator_in_p_SequenceType9465);
                    oi = p_OccurrenceIndicator();

                    state._fsp--;
                    if (state.failed) {
                        return retval;
                    }
                    if (state.backtracking == 0) {
                        stream_p_OccurrenceIndicator.add(oi.getTree());
                    }

                }
                break;

                }

                // AST REWRITE
                // elements: it, oi
                // token labels:
                // rule labels: retval, it, oi
                // token list labels:
                // rule list labels:
                // wildcard labels:
                if (state.backtracking == 0) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval = new RewriteRuleSubtreeStream(adaptor, "rule retval",
                            retval != null ? retval.tree : null);
                    RewriteRuleSubtreeStream stream_it = new RewriteRuleSubtreeStream(adaptor, "rule it",
                            it != null ? it.tree : null);
                    RewriteRuleSubtreeStream stream_oi = new RewriteRuleSubtreeStream(adaptor, "rule oi",
                            oi != null ? oi.tree : null);

                    root_0 = (XQDTCommonTree)adaptor.nil();
                    // 1135:17: -> ^( SequenceType $it ( $oi)? )
                    {
                        // XQueryParser.g:1135:20: ^( SequenceType $it ( $oi)? )
                        {
                            XQDTCommonTree root_1 = (XQDTCommonTree)adaptor.nil();
                            root_1 = (XQDTCommonTree)adaptor.becomeRoot(adaptor.create(SequenceType, "SequenceType"),
                                    root_1);

                            adaptor.addChild(root_1, stream_it.nextTree());
                            // XQueryParser.g:1135:39: ( $oi)?
                            if (stream_oi.hasNext()) {
                                adaptor.addChild(root_1, stream_oi.nextTree());

                            }
                            stream_oi.reset();

                            adaptor.addChild(root_0, root_1);
                        }

                    }

                    retval.tree = root_0;
                }
            }
            break;

            }
            retval.stop = input.LT(-1);

            if (state.backtracking == 0) {

                retval.tree = (XQDTCommonTree)adaptor.rulePostProcessing(root_0);
                adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        } catch (RecognitionException re) {
            reportError(re);
            recover(input, re);
            retval.tree = (XQDTCommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        } finally {
        }
        return retval;
    }

    // $ANTLR end "p_SequenceType"

    public static class p_OccurrenceIndicator_return extends ParserRuleReturnScope {
        XQDTCommonTree tree;

        public Object getTree() {
            return tree;
        }
    };

    // $ANTLR start "p_OccurrenceIndicator"
    // XQueryParser.g:1139:1: p_OccurrenceIndicator : ( QUESTION | STAR | PLUS );
    public final XQueryParser.p_OccurrenceIndicator_return p_OccurrenceIndicator() throws RecognitionException {
        XQueryParser.p_OccurrenceIndicator_return retval = new XQueryParser.p_OccurrenceIndicator_return();
        retval.start = input.LT(1);

        XQDTCommonTree root_0 = null;

        CommonToken set489 = null;

        XQDTCommonTree set489_tree = null;

        try {
            // XQueryParser.g:1140:9: ( QUESTION | STAR | PLUS )
            // XQueryParser.g:
            {
                root_0 = (XQDTCommonTree)adaptor.nil();

                set489 = (CommonToken)input.LT(1);
                if ((input.LA(1) >= QUESTION && input.LA(1) <= PLUS)) {
                    input.consume();
                    if (state.backtracking == 0) {
                        adaptor.addChild(root_0, adaptor.create(set489));
                    }
                    state.errorRecovery = false;
                    state.failed = false;
                } else {
                    if (state.backtracking > 0) {
                        state.failed = true;
                        return retval;
                    }
                    MismatchedSetException mse = new MismatchedSetException(null, input);
                    throw mse;
                }

            }

            retval.stop = input.LT(-1);

            if (state.backtracking == 0) {

                retval.tree = (XQDTCommonTree)adaptor.rulePostProcessing(root_0);
                adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        } catch (RecognitionException re) {
            reportError(re);
            recover(input, re);
            retval.tree = (XQDTCommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        } finally {
        }
        return retval;
    }

    // $ANTLR end "p_OccurrenceIndicator"

    public static class p_ItemType_return extends ParserRuleReturnScope {
        XQDTCommonTree tree;

        public Object getTree() {
            return tree;
        }
    };

    // $ANTLR start "p_ItemType"
    // XQueryParser.g:1144:1: p_ItemType : ( p_KindTest -> ^( KindTest p_KindTest ) | {...}? => ( BINARY LPAREN RPAREN ) -> ^( BinaryTest BINARY LPAREN RPAREN ) | ( ITEM LPAREN RPAREN ) -> ^( ItemTest ITEM LPAREN RPAREN ) | p_AtomicOrUnionType | p_ParenthesizedItemType );
    public final XQueryParser.p_ItemType_return p_ItemType() throws RecognitionException {
        XQueryParser.p_ItemType_return retval = new XQueryParser.p_ItemType_return();
        retval.start = input.LT(1);

        XQDTCommonTree root_0 = null;

        CommonToken BINARY491 = null;
        CommonToken LPAREN492 = null;
        CommonToken RPAREN493 = null;
        CommonToken ITEM494 = null;
        CommonToken LPAREN495 = null;
        CommonToken RPAREN496 = null;
        XQueryParser.p_KindTest_return p_KindTest490 = null;

        XQueryParser.p_AtomicOrUnionType_return p_AtomicOrUnionType497 = null;

        XQueryParser.p_ParenthesizedItemType_return p_ParenthesizedItemType498 = null;

        XQDTCommonTree BINARY491_tree = null;
        XQDTCommonTree LPAREN492_tree = null;
        XQDTCommonTree RPAREN493_tree = null;
        XQDTCommonTree ITEM494_tree = null;
        XQDTCommonTree LPAREN495_tree = null;
        XQDTCommonTree RPAREN496_tree = null;
        RewriteRuleTokenStream stream_RPAREN = new RewriteRuleTokenStream(adaptor, "token RPAREN");
        RewriteRuleTokenStream stream_ITEM = new RewriteRuleTokenStream(adaptor, "token ITEM");
        RewriteRuleTokenStream stream_BINARY = new RewriteRuleTokenStream(adaptor, "token BINARY");
        RewriteRuleTokenStream stream_LPAREN = new RewriteRuleTokenStream(adaptor, "token LPAREN");
        RewriteRuleSubtreeStream stream_p_KindTest = new RewriteRuleSubtreeStream(adaptor, "rule p_KindTest");
        try {
            // XQueryParser.g:1145:9: ( p_KindTest -> ^( KindTest p_KindTest ) | {...}? => ( BINARY LPAREN RPAREN ) -> ^( BinaryTest BINARY LPAREN RPAREN ) | ( ITEM LPAREN RPAREN ) -> ^( ItemTest ITEM LPAREN RPAREN ) | p_AtomicOrUnionType | p_ParenthesizedItemType )
            int alt161 = 5;
            alt161 = dfa161.predict(input);
            switch (alt161) {
            case 1:
                // XQueryParser.g:1145:11: p_KindTest
            {
                pushFollow(FOLLOW_p_KindTest_in_p_ItemType9567);
                p_KindTest490 = p_KindTest();

                state._fsp--;
                if (state.failed) {
                    return retval;
                }
                if (state.backtracking == 0) {
                    stream_p_KindTest.add(p_KindTest490.getTree());
                }

                // AST REWRITE
                // elements: p_KindTest
                // token labels:
                // rule labels: retval
                // token list labels:
                // rule list labels:
                // wildcard labels:
                if (state.backtracking == 0) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval = new RewriteRuleSubtreeStream(adaptor, "rule retval",
                            retval != null ? retval.tree : null);

                    root_0 = (XQDTCommonTree)adaptor.nil();
                    // 1146:17: -> ^( KindTest p_KindTest )
                    {
                        // XQueryParser.g:1146:20: ^( KindTest p_KindTest )
                        {
                            XQDTCommonTree root_1 = (XQDTCommonTree)adaptor.nil();
                            root_1 = (XQDTCommonTree)adaptor.becomeRoot(adaptor.create(KindTest, "KindTest"), root_1);

                            adaptor.addChild(root_1, stream_p_KindTest.nextTree());

                            adaptor.addChild(root_0, root_1);
                        }

                    }

                    retval.tree = root_0;
                }
            }
            break;
            case 2:
                // XQueryParser.g:1147:11: {...}? => ( BINARY LPAREN RPAREN )
            {
                if (!((lc(MLS)))) {
                    if (state.backtracking > 0) {
                        state.failed = true;
                        return retval;
                    }
                    throw new FailedPredicateException(input, "p_ItemType", "lc(MLS)");
                }
                // XQueryParser.g:1147:24: ( BINARY LPAREN RPAREN )
                // XQueryParser.g:1147:25: BINARY LPAREN RPAREN
                {
                    BINARY491 = (CommonToken)match(input, BINARY, FOLLOW_BINARY_in_p_ItemType9607);
                    if (state.failed) {
                        return retval;
                    }
                    if (state.backtracking == 0) {
                        stream_BINARY.add(BINARY491);
                    }

                    LPAREN492 = (CommonToken)match(input, LPAREN, FOLLOW_LPAREN_in_p_ItemType9609);
                    if (state.failed) {
                        return retval;
                    }
                    if (state.backtracking == 0) {
                        stream_LPAREN.add(LPAREN492);
                    }

                    RPAREN493 = (CommonToken)match(input, RPAREN, FOLLOW_RPAREN_in_p_ItemType9611);
                    if (state.failed) {
                        return retval;
                    }
                    if (state.backtracking == 0) {
                        stream_RPAREN.add(RPAREN493);
                    }

                }

                // AST REWRITE
                // elements: BINARY, LPAREN, RPAREN
                // token labels:
                // rule labels: retval
                // token list labels:
                // rule list labels:
                // wildcard labels:
                if (state.backtracking == 0) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval = new RewriteRuleSubtreeStream(adaptor, "rule retval",
                            retval != null ? retval.tree : null);

                    root_0 = (XQDTCommonTree)adaptor.nil();
                    // 1148:17: -> ^( BinaryTest BINARY LPAREN RPAREN )
                    {
                        // XQueryParser.g:1148:20: ^( BinaryTest BINARY LPAREN RPAREN )
                        {
                            XQDTCommonTree root_1 = (XQDTCommonTree)adaptor.nil();
                            root_1 = (XQDTCommonTree)adaptor.becomeRoot(adaptor.create(BinaryTest, "BinaryTest"),
                                    root_1);

                            adaptor.addChild(root_1, stream_BINARY.nextNode());
                            adaptor.addChild(root_1, stream_LPAREN.nextNode());
                            adaptor.addChild(root_1, stream_RPAREN.nextNode());

                            adaptor.addChild(root_0, root_1);
                        }

                    }

                    retval.tree = root_0;
                }
            }
            break;
            case 3:
                // XQueryParser.g:1149:11: ( ITEM LPAREN RPAREN )
            {
                // XQueryParser.g:1149:11: ( ITEM LPAREN RPAREN )
                // XQueryParser.g:1149:12: ITEM LPAREN RPAREN
                {
                    ITEM494 = (CommonToken)match(input, ITEM, FOLLOW_ITEM_in_p_ItemType9653);
                    if (state.failed) {
                        return retval;
                    }
                    if (state.backtracking == 0) {
                        stream_ITEM.add(ITEM494);
                    }

                    LPAREN495 = (CommonToken)match(input, LPAREN, FOLLOW_LPAREN_in_p_ItemType9655);
                    if (state.failed) {
                        return retval;
                    }
                    if (state.backtracking == 0) {
                        stream_LPAREN.add(LPAREN495);
                    }

                    RPAREN496 = (CommonToken)match(input, RPAREN, FOLLOW_RPAREN_in_p_ItemType9657);
                    if (state.failed) {
                        return retval;
                    }
                    if (state.backtracking == 0) {
                        stream_RPAREN.add(RPAREN496);
                    }

                }

                // AST REWRITE
                // elements: LPAREN, RPAREN, ITEM
                // token labels:
                // rule labels: retval
                // token list labels:
                // rule list labels:
                // wildcard labels:
                if (state.backtracking == 0) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval = new RewriteRuleSubtreeStream(adaptor, "rule retval",
                            retval != null ? retval.tree : null);

                    root_0 = (XQDTCommonTree)adaptor.nil();
                    // 1150:17: -> ^( ItemTest ITEM LPAREN RPAREN )
                    {
                        // XQueryParser.g:1150:20: ^( ItemTest ITEM LPAREN RPAREN )
                        {
                            XQDTCommonTree root_1 = (XQDTCommonTree)adaptor.nil();
                            root_1 = (XQDTCommonTree)adaptor.becomeRoot(adaptor.create(ItemTest, "ItemTest"), root_1);

                            adaptor.addChild(root_1, stream_ITEM.nextNode());
                            adaptor.addChild(root_1, stream_LPAREN.nextNode());
                            adaptor.addChild(root_1, stream_RPAREN.nextNode());

                            adaptor.addChild(root_0, root_1);
                        }

                    }

                    retval.tree = root_0;
                }
            }
            break;
            case 4:
                // XQueryParser.g:1154:11: p_AtomicOrUnionType
            {
                root_0 = (XQDTCommonTree)adaptor.nil();

                pushFollow(FOLLOW_p_AtomicOrUnionType_in_p_ItemType9701);
                p_AtomicOrUnionType497 = p_AtomicOrUnionType();

                state._fsp--;
                if (state.failed) {
                    return retval;
                }
                if (state.backtracking == 0) {
                    adaptor.addChild(root_0, p_AtomicOrUnionType497.getTree());
                }

            }
            break;
            case 5:
                // XQueryParser.g:1155:11: p_ParenthesizedItemType
            {
                root_0 = (XQDTCommonTree)adaptor.nil();

                pushFollow(FOLLOW_p_ParenthesizedItemType_in_p_ItemType9713);
                p_ParenthesizedItemType498 = p_ParenthesizedItemType();

                state._fsp--;
                if (state.failed) {
                    return retval;
                }
                if (state.backtracking == 0) {
                    adaptor.addChild(root_0, p_ParenthesizedItemType498.getTree());
                }

            }
            break;

            }
            retval.stop = input.LT(-1);

            if (state.backtracking == 0) {

                retval.tree = (XQDTCommonTree)adaptor.rulePostProcessing(root_0);
                adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        } catch (RecognitionException re) {
            reportError(re);
            recover(input, re);
            retval.tree = (XQDTCommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        } finally {
        }
        return retval;
    }

    // $ANTLR end "p_ItemType"

    public static class p_AtomicOrUnionType_return extends ParserRuleReturnScope {
        XQDTCommonTree tree;

        public Object getTree() {
            return tree;
        }
    };

    // $ANTLR start "p_AtomicOrUnionType"
    // XQueryParser.g:1159:1: p_AtomicOrUnionType : p_QName -> ^( AtomicOrUnionType p_QName ) ;
    public final XQueryParser.p_AtomicOrUnionType_return p_AtomicOrUnionType() throws RecognitionException {
        XQueryParser.p_AtomicOrUnionType_return retval = new XQueryParser.p_AtomicOrUnionType_return();
        retval.start = input.LT(1);

        XQDTCommonTree root_0 = null;

        XQueryParser.p_QName_return p_QName499 = null;

        RewriteRuleSubtreeStream stream_p_QName = new RewriteRuleSubtreeStream(adaptor, "rule p_QName");
        try {
            // XQueryParser.g:1160:9: ( p_QName -> ^( AtomicOrUnionType p_QName ) )
            // XQueryParser.g:1160:11: p_QName
            {
                pushFollow(FOLLOW_p_QName_in_p_AtomicOrUnionType9739);
                p_QName499 = p_QName();

                state._fsp--;
                if (state.failed) {
                    return retval;
                }
                if (state.backtracking == 0) {
                    stream_p_QName.add(p_QName499.getTree());
                }

                // AST REWRITE
                // elements: p_QName
                // token labels:
                // rule labels: retval
                // token list labels:
                // rule list labels:
                // wildcard labels:
                if (state.backtracking == 0) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval = new RewriteRuleSubtreeStream(adaptor, "rule retval",
                            retval != null ? retval.tree : null);

                    root_0 = (XQDTCommonTree)adaptor.nil();
                    // 1161:17: -> ^( AtomicOrUnionType p_QName )
                    {
                        // XQueryParser.g:1161:20: ^( AtomicOrUnionType p_QName )
                        {
                            XQDTCommonTree root_1 = (XQDTCommonTree)adaptor.nil();
                            root_1 = (XQDTCommonTree)adaptor.becomeRoot(
                                    adaptor.create(AtomicOrUnionType, "AtomicOrUnionType"), root_1);

                            adaptor.addChild(root_1, stream_p_QName.nextTree());

                            adaptor.addChild(root_0, root_1);
                        }

                    }

                    retval.tree = root_0;
                }
            }

            retval.stop = input.LT(-1);

            if (state.backtracking == 0) {

                retval.tree = (XQDTCommonTree)adaptor.rulePostProcessing(root_0);
                adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        } catch (RecognitionException re) {
            reportError(re);
            recover(input, re);
            retval.tree = (XQDTCommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        } finally {
        }
        return retval;
    }

    // $ANTLR end "p_AtomicOrUnionType"

    public static class p_KindTest_return extends ParserRuleReturnScope {
        XQDTCommonTree tree;

        public Object getTree() {
            return tree;
        }
    };

    // $ANTLR start "p_KindTest"
    // XQueryParser.g:1165:1: p_KindTest : ( p_DocumentTest | p_ElementTest | p_AttributeTest | p_SchemaElementTest | p_SchemaAttributeTest | p_PITest | p_CommentTest | p_TextTest | p_NamespaceNodeTest | p_AnyKindTest );
    public final XQueryParser.p_KindTest_return p_KindTest() throws RecognitionException {
        XQueryParser.p_KindTest_return retval = new XQueryParser.p_KindTest_return();
        retval.start = input.LT(1);

        XQDTCommonTree root_0 = null;

        XQueryParser.p_DocumentTest_return p_DocumentTest500 = null;

        XQueryParser.p_ElementTest_return p_ElementTest501 = null;

        XQueryParser.p_AttributeTest_return p_AttributeTest502 = null;

        XQueryParser.p_SchemaElementTest_return p_SchemaElementTest503 = null;

        XQueryParser.p_SchemaAttributeTest_return p_SchemaAttributeTest504 = null;

        XQueryParser.p_PITest_return p_PITest505 = null;

        XQueryParser.p_CommentTest_return p_CommentTest506 = null;

        XQueryParser.p_TextTest_return p_TextTest507 = null;

        XQueryParser.p_NamespaceNodeTest_return p_NamespaceNodeTest508 = null;

        XQueryParser.p_AnyKindTest_return p_AnyKindTest509 = null;

        try {
            // XQueryParser.g:1166:9: ( p_DocumentTest | p_ElementTest | p_AttributeTest | p_SchemaElementTest | p_SchemaAttributeTest | p_PITest | p_CommentTest | p_TextTest | p_NamespaceNodeTest | p_AnyKindTest )
            int alt162 = 10;
            switch (input.LA(1)) {
            case DOCUMENT_NODE: {
                alt162 = 1;
            }
                break;
            case ELEMENT: {
                alt162 = 2;
            }
                break;
            case ATTRIBUTE: {
                alt162 = 3;
            }
                break;
            case SCHEMA_ELEMENT: {
                alt162 = 4;
            }
                break;
            case SCHEMA_ATTRIBUTE: {
                alt162 = 5;
            }
                break;
            case PROCESSING_INSTRUCTION: {
                alt162 = 6;
            }
                break;
            case COMMENT: {
                alt162 = 7;
            }
                break;
            case TEXT: {
                alt162 = 8;
            }
                break;
            case NAMESPACE_NODE: {
                alt162 = 9;
            }
                break;
            case NODE: {
                alt162 = 10;
            }
                break;
            default:
                if (state.backtracking > 0) {
                    state.failed = true;
                    return retval;
                }
                NoViableAltException nvae = new NoViableAltException("", 162, 0, input);

                throw nvae;
            }

            switch (alt162) {
            case 1:
                // XQueryParser.g:1166:11: p_DocumentTest
            {
                root_0 = (XQDTCommonTree)adaptor.nil();

                pushFollow(FOLLOW_p_DocumentTest_in_p_KindTest9789);
                p_DocumentTest500 = p_DocumentTest();

                state._fsp--;
                if (state.failed) {
                    return retval;
                }
                if (state.backtracking == 0) {
                    adaptor.addChild(root_0, p_DocumentTest500.getTree());
                }

            }
            break;
            case 2:
                // XQueryParser.g:1167:11: p_ElementTest
            {
                root_0 = (XQDTCommonTree)adaptor.nil();

                pushFollow(FOLLOW_p_ElementTest_in_p_KindTest9801);
                p_ElementTest501 = p_ElementTest();

                state._fsp--;
                if (state.failed) {
                    return retval;
                }
                if (state.backtracking == 0) {
                    adaptor.addChild(root_0, p_ElementTest501.getTree());
                }

            }
            break;
            case 3:
                // XQueryParser.g:1168:11: p_AttributeTest
            {
                root_0 = (XQDTCommonTree)adaptor.nil();

                pushFollow(FOLLOW_p_AttributeTest_in_p_KindTest9813);
                p_AttributeTest502 = p_AttributeTest();

                state._fsp--;
                if (state.failed) {
                    return retval;
                }
                if (state.backtracking == 0) {
                    adaptor.addChild(root_0, p_AttributeTest502.getTree());
                }

            }
            break;
            case 4:
                // XQueryParser.g:1169:11: p_SchemaElementTest
            {
                root_0 = (XQDTCommonTree)adaptor.nil();

                pushFollow(FOLLOW_p_SchemaElementTest_in_p_KindTest9825);
                p_SchemaElementTest503 = p_SchemaElementTest();

                state._fsp--;
                if (state.failed) {
                    return retval;
                }
                if (state.backtracking == 0) {
                    adaptor.addChild(root_0, p_SchemaElementTest503.getTree());
                }

            }
            break;
            case 5:
                // XQueryParser.g:1170:11: p_SchemaAttributeTest
            {
                root_0 = (XQDTCommonTree)adaptor.nil();

                pushFollow(FOLLOW_p_SchemaAttributeTest_in_p_KindTest9837);
                p_SchemaAttributeTest504 = p_SchemaAttributeTest();

                state._fsp--;
                if (state.failed) {
                    return retval;
                }
                if (state.backtracking == 0) {
                    adaptor.addChild(root_0, p_SchemaAttributeTest504.getTree());
                }

            }
            break;
            case 6:
                // XQueryParser.g:1171:11: p_PITest
            {
                root_0 = (XQDTCommonTree)adaptor.nil();

                pushFollow(FOLLOW_p_PITest_in_p_KindTest9849);
                p_PITest505 = p_PITest();

                state._fsp--;
                if (state.failed) {
                    return retval;
                }
                if (state.backtracking == 0) {
                    adaptor.addChild(root_0, p_PITest505.getTree());
                }

            }
            break;
            case 7:
                // XQueryParser.g:1172:11: p_CommentTest
            {
                root_0 = (XQDTCommonTree)adaptor.nil();

                pushFollow(FOLLOW_p_CommentTest_in_p_KindTest9861);
                p_CommentTest506 = p_CommentTest();

                state._fsp--;
                if (state.failed) {
                    return retval;
                }
                if (state.backtracking == 0) {
                    adaptor.addChild(root_0, p_CommentTest506.getTree());
                }

            }
            break;
            case 8:
                // XQueryParser.g:1173:11: p_TextTest
            {
                root_0 = (XQDTCommonTree)adaptor.nil();

                pushFollow(FOLLOW_p_TextTest_in_p_KindTest9873);
                p_TextTest507 = p_TextTest();

                state._fsp--;
                if (state.failed) {
                    return retval;
                }
                if (state.backtracking == 0) {
                    adaptor.addChild(root_0, p_TextTest507.getTree());
                }

            }
            break;
            case 9:
                // XQueryParser.g:1174:11: p_NamespaceNodeTest
            {
                root_0 = (XQDTCommonTree)adaptor.nil();

                pushFollow(FOLLOW_p_NamespaceNodeTest_in_p_KindTest9885);
                p_NamespaceNodeTest508 = p_NamespaceNodeTest();

                state._fsp--;
                if (state.failed) {
                    return retval;
                }
                if (state.backtracking == 0) {
                    adaptor.addChild(root_0, p_NamespaceNodeTest508.getTree());
                }

            }
            break;
            case 10:
                // XQueryParser.g:1175:11: p_AnyKindTest
            {
                root_0 = (XQDTCommonTree)adaptor.nil();

                pushFollow(FOLLOW_p_AnyKindTest_in_p_KindTest9897);
                p_AnyKindTest509 = p_AnyKindTest();

                state._fsp--;
                if (state.failed) {
                    return retval;
                }
                if (state.backtracking == 0) {
                    adaptor.addChild(root_0, p_AnyKindTest509.getTree());
                }

            }
            break;

            }
            retval.stop = input.LT(-1);

            if (state.backtracking == 0) {

                retval.tree = (XQDTCommonTree)adaptor.rulePostProcessing(root_0);
                adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        } catch (RecognitionException re) {
            reportError(re);
            recover(input, re);
            retval.tree = (XQDTCommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        } finally {
        }
        return retval;
    }

    // $ANTLR end "p_KindTest"

    public static class p_AnyKindTest_return extends ParserRuleReturnScope {
        XQDTCommonTree tree;

        public Object getTree() {
            return tree;
        }
    };

    // $ANTLR start "p_AnyKindTest"
    // XQueryParser.g:1179:1: p_AnyKindTest : NODE LPAREN RPAREN ;
    public final XQueryParser.p_AnyKindTest_return p_AnyKindTest() throws RecognitionException {
        XQueryParser.p_AnyKindTest_return retval = new XQueryParser.p_AnyKindTest_return();
        retval.start = input.LT(1);

        XQDTCommonTree root_0 = null;

        CommonToken NODE510 = null;
        CommonToken LPAREN511 = null;
        CommonToken RPAREN512 = null;

        XQDTCommonTree NODE510_tree = null;
        XQDTCommonTree LPAREN511_tree = null;
        XQDTCommonTree RPAREN512_tree = null;

        try {
            // XQueryParser.g:1180:9: ( NODE LPAREN RPAREN )
            // XQueryParser.g:1180:11: NODE LPAREN RPAREN
            {
                root_0 = (XQDTCommonTree)adaptor.nil();

                NODE510 = (CommonToken)match(input, NODE, FOLLOW_NODE_in_p_AnyKindTest9923);
                if (state.failed) {
                    return retval;
                }
                if (state.backtracking == 0) {
                    NODE510_tree = (XQDTCommonTree)adaptor.create(NODE510);
                    adaptor.addChild(root_0, NODE510_tree);
                }
                LPAREN511 = (CommonToken)match(input, LPAREN, FOLLOW_LPAREN_in_p_AnyKindTest9925);
                if (state.failed) {
                    return retval;
                }
                if (state.backtracking == 0) {
                    LPAREN511_tree = (XQDTCommonTree)adaptor.create(LPAREN511);
                    adaptor.addChild(root_0, LPAREN511_tree);
                }
                RPAREN512 = (CommonToken)match(input, RPAREN, FOLLOW_RPAREN_in_p_AnyKindTest9927);
                if (state.failed) {
                    return retval;
                }
                if (state.backtracking == 0) {
                    RPAREN512_tree = (XQDTCommonTree)adaptor.create(RPAREN512);
                    adaptor.addChild(root_0, RPAREN512_tree);
                }

            }

            retval.stop = input.LT(-1);

            if (state.backtracking == 0) {

                retval.tree = (XQDTCommonTree)adaptor.rulePostProcessing(root_0);
                adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        } catch (RecognitionException re) {
            reportError(re);
            recover(input, re);
            retval.tree = (XQDTCommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        } finally {
        }
        return retval;
    }

    // $ANTLR end "p_AnyKindTest"

    public static class p_DocumentTest_return extends ParserRuleReturnScope {
        XQDTCommonTree tree;

        public Object getTree() {
            return tree;
        }
    };

    // $ANTLR start "p_DocumentTest"
    // XQueryParser.g:1184:1: p_DocumentTest : DOCUMENT_NODE LPAREN ( p_ElementTest | p_SchemaElementTest )? RPAREN ;
    public final XQueryParser.p_DocumentTest_return p_DocumentTest() throws RecognitionException {
        XQueryParser.p_DocumentTest_return retval = new XQueryParser.p_DocumentTest_return();
        retval.start = input.LT(1);

        XQDTCommonTree root_0 = null;

        CommonToken DOCUMENT_NODE513 = null;
        CommonToken LPAREN514 = null;
        CommonToken RPAREN517 = null;
        XQueryParser.p_ElementTest_return p_ElementTest515 = null;

        XQueryParser.p_SchemaElementTest_return p_SchemaElementTest516 = null;

        XQDTCommonTree DOCUMENT_NODE513_tree = null;
        XQDTCommonTree LPAREN514_tree = null;
        XQDTCommonTree RPAREN517_tree = null;

        try {
            // XQueryParser.g:1185:9: ( DOCUMENT_NODE LPAREN ( p_ElementTest | p_SchemaElementTest )? RPAREN )
            // XQueryParser.g:1185:11: DOCUMENT_NODE LPAREN ( p_ElementTest | p_SchemaElementTest )? RPAREN
            {
                root_0 = (XQDTCommonTree)adaptor.nil();

                DOCUMENT_NODE513 = (CommonToken)match(input, DOCUMENT_NODE, FOLLOW_DOCUMENT_NODE_in_p_DocumentTest9953);
                if (state.failed) {
                    return retval;
                }
                if (state.backtracking == 0) {
                    DOCUMENT_NODE513_tree = (XQDTCommonTree)adaptor.create(DOCUMENT_NODE513);
                    adaptor.addChild(root_0, DOCUMENT_NODE513_tree);
                }
                LPAREN514 = (CommonToken)match(input, LPAREN, FOLLOW_LPAREN_in_p_DocumentTest9955);
                if (state.failed) {
                    return retval;
                }
                if (state.backtracking == 0) {
                    LPAREN514_tree = (XQDTCommonTree)adaptor.create(LPAREN514);
                    adaptor.addChild(root_0, LPAREN514_tree);
                }
                // XQueryParser.g:1185:32: ( p_ElementTest | p_SchemaElementTest )?
                int alt163 = 3;
                int LA163_0 = input.LA(1);

                if ((LA163_0 == ELEMENT)) {
                    alt163 = 1;
                } else if ((LA163_0 == SCHEMA_ELEMENT)) {
                    alt163 = 2;
                }
                switch (alt163) {
                case 1:
                    // XQueryParser.g:1185:33: p_ElementTest
                {
                    pushFollow(FOLLOW_p_ElementTest_in_p_DocumentTest9958);
                    p_ElementTest515 = p_ElementTest();

                    state._fsp--;
                    if (state.failed) {
                        return retval;
                    }
                    if (state.backtracking == 0) {
                        adaptor.addChild(root_0, p_ElementTest515.getTree());
                    }

                }
                    break;
                case 2:
                    // XQueryParser.g:1185:49: p_SchemaElementTest
                {
                    pushFollow(FOLLOW_p_SchemaElementTest_in_p_DocumentTest9962);
                    p_SchemaElementTest516 = p_SchemaElementTest();

                    state._fsp--;
                    if (state.failed) {
                        return retval;
                    }
                    if (state.backtracking == 0) {
                        adaptor.addChild(root_0, p_SchemaElementTest516.getTree());
                    }

                }
                    break;

                }

                RPAREN517 = (CommonToken)match(input, RPAREN, FOLLOW_RPAREN_in_p_DocumentTest9966);
                if (state.failed) {
                    return retval;
                }
                if (state.backtracking == 0) {
                    RPAREN517_tree = (XQDTCommonTree)adaptor.create(RPAREN517);
                    adaptor.addChild(root_0, RPAREN517_tree);
                }

            }

            retval.stop = input.LT(-1);

            if (state.backtracking == 0) {

                retval.tree = (XQDTCommonTree)adaptor.rulePostProcessing(root_0);
                adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        } catch (RecognitionException re) {
            reportError(re);
            recover(input, re);
            retval.tree = (XQDTCommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        } finally {
        }
        return retval;
    }

    // $ANTLR end "p_DocumentTest"

    public static class p_TextTest_return extends ParserRuleReturnScope {
        XQDTCommonTree tree;

        public Object getTree() {
            return tree;
        }
    };

    // $ANTLR start "p_TextTest"
    // XQueryParser.g:1189:1: p_TextTest : TEXT LPAREN RPAREN ;
    public final XQueryParser.p_TextTest_return p_TextTest() throws RecognitionException {
        XQueryParser.p_TextTest_return retval = new XQueryParser.p_TextTest_return();
        retval.start = input.LT(1);

        XQDTCommonTree root_0 = null;

        CommonToken TEXT518 = null;
        CommonToken LPAREN519 = null;
        CommonToken RPAREN520 = null;

        XQDTCommonTree TEXT518_tree = null;
        XQDTCommonTree LPAREN519_tree = null;
        XQDTCommonTree RPAREN520_tree = null;

        try {
            // XQueryParser.g:1190:9: ( TEXT LPAREN RPAREN )
            // XQueryParser.g:1190:11: TEXT LPAREN RPAREN
            {
                root_0 = (XQDTCommonTree)adaptor.nil();

                TEXT518 = (CommonToken)match(input, TEXT, FOLLOW_TEXT_in_p_TextTest9992);
                if (state.failed) {
                    return retval;
                }
                if (state.backtracking == 0) {
                    TEXT518_tree = (XQDTCommonTree)adaptor.create(TEXT518);
                    adaptor.addChild(root_0, TEXT518_tree);
                }
                LPAREN519 = (CommonToken)match(input, LPAREN, FOLLOW_LPAREN_in_p_TextTest9994);
                if (state.failed) {
                    return retval;
                }
                if (state.backtracking == 0) {
                    LPAREN519_tree = (XQDTCommonTree)adaptor.create(LPAREN519);
                    adaptor.addChild(root_0, LPAREN519_tree);
                }
                RPAREN520 = (CommonToken)match(input, RPAREN, FOLLOW_RPAREN_in_p_TextTest9996);
                if (state.failed) {
                    return retval;
                }
                if (state.backtracking == 0) {
                    RPAREN520_tree = (XQDTCommonTree)adaptor.create(RPAREN520);
                    adaptor.addChild(root_0, RPAREN520_tree);
                }

            }

            retval.stop = input.LT(-1);

            if (state.backtracking == 0) {

                retval.tree = (XQDTCommonTree)adaptor.rulePostProcessing(root_0);
                adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        } catch (RecognitionException re) {
            reportError(re);
            recover(input, re);
            retval.tree = (XQDTCommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        } finally {
        }
        return retval;
    }

    // $ANTLR end "p_TextTest"

    public static class p_CommentTest_return extends ParserRuleReturnScope {
        XQDTCommonTree tree;

        public Object getTree() {
            return tree;
        }
    };

    // $ANTLR start "p_CommentTest"
    // XQueryParser.g:1194:1: p_CommentTest : COMMENT LPAREN RPAREN ;
    public final XQueryParser.p_CommentTest_return p_CommentTest() throws RecognitionException {
        XQueryParser.p_CommentTest_return retval = new XQueryParser.p_CommentTest_return();
        retval.start = input.LT(1);

        XQDTCommonTree root_0 = null;

        CommonToken COMMENT521 = null;
        CommonToken LPAREN522 = null;
        CommonToken RPAREN523 = null;

        XQDTCommonTree COMMENT521_tree = null;
        XQDTCommonTree LPAREN522_tree = null;
        XQDTCommonTree RPAREN523_tree = null;

        try {
            // XQueryParser.g:1195:9: ( COMMENT LPAREN RPAREN )
            // XQueryParser.g:1195:11: COMMENT LPAREN RPAREN
            {
                root_0 = (XQDTCommonTree)adaptor.nil();

                COMMENT521 = (CommonToken)match(input, COMMENT, FOLLOW_COMMENT_in_p_CommentTest10022);
                if (state.failed) {
                    return retval;
                }
                if (state.backtracking == 0) {
                    COMMENT521_tree = (XQDTCommonTree)adaptor.create(COMMENT521);
                    adaptor.addChild(root_0, COMMENT521_tree);
                }
                LPAREN522 = (CommonToken)match(input, LPAREN, FOLLOW_LPAREN_in_p_CommentTest10024);
                if (state.failed) {
                    return retval;
                }
                if (state.backtracking == 0) {
                    LPAREN522_tree = (XQDTCommonTree)adaptor.create(LPAREN522);
                    adaptor.addChild(root_0, LPAREN522_tree);
                }
                RPAREN523 = (CommonToken)match(input, RPAREN, FOLLOW_RPAREN_in_p_CommentTest10026);
                if (state.failed) {
                    return retval;
                }
                if (state.backtracking == 0) {
                    RPAREN523_tree = (XQDTCommonTree)adaptor.create(RPAREN523);
                    adaptor.addChild(root_0, RPAREN523_tree);
                }

            }

            retval.stop = input.LT(-1);

            if (state.backtracking == 0) {

                retval.tree = (XQDTCommonTree)adaptor.rulePostProcessing(root_0);
                adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        } catch (RecognitionException re) {
            reportError(re);
            recover(input, re);
            retval.tree = (XQDTCommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        } finally {
        }
        return retval;
    }

    // $ANTLR end "p_CommentTest"

    public static class p_NamespaceNodeTest_return extends ParserRuleReturnScope {
        XQDTCommonTree tree;

        public Object getTree() {
            return tree;
        }
    };

    // $ANTLR start "p_NamespaceNodeTest"
    // XQueryParser.g:1199:1: p_NamespaceNodeTest : NAMESPACE_NODE LPAREN RPAREN ;
    public final XQueryParser.p_NamespaceNodeTest_return p_NamespaceNodeTest() throws RecognitionException {
        XQueryParser.p_NamespaceNodeTest_return retval = new XQueryParser.p_NamespaceNodeTest_return();
        retval.start = input.LT(1);

        XQDTCommonTree root_0 = null;

        CommonToken NAMESPACE_NODE524 = null;
        CommonToken LPAREN525 = null;
        CommonToken RPAREN526 = null;

        XQDTCommonTree NAMESPACE_NODE524_tree = null;
        XQDTCommonTree LPAREN525_tree = null;
        XQDTCommonTree RPAREN526_tree = null;

        try {
            // XQueryParser.g:1200:9: ( NAMESPACE_NODE LPAREN RPAREN )
            // XQueryParser.g:1200:11: NAMESPACE_NODE LPAREN RPAREN
            {
                root_0 = (XQDTCommonTree)adaptor.nil();

                NAMESPACE_NODE524 = (CommonToken)match(input, NAMESPACE_NODE,
                        FOLLOW_NAMESPACE_NODE_in_p_NamespaceNodeTest10052);
                if (state.failed) {
                    return retval;
                }
                if (state.backtracking == 0) {
                    NAMESPACE_NODE524_tree = (XQDTCommonTree)adaptor.create(NAMESPACE_NODE524);
                    adaptor.addChild(root_0, NAMESPACE_NODE524_tree);
                }
                LPAREN525 = (CommonToken)match(input, LPAREN, FOLLOW_LPAREN_in_p_NamespaceNodeTest10054);
                if (state.failed) {
                    return retval;
                }
                if (state.backtracking == 0) {
                    LPAREN525_tree = (XQDTCommonTree)adaptor.create(LPAREN525);
                    adaptor.addChild(root_0, LPAREN525_tree);
                }
                RPAREN526 = (CommonToken)match(input, RPAREN, FOLLOW_RPAREN_in_p_NamespaceNodeTest10056);
                if (state.failed) {
                    return retval;
                }
                if (state.backtracking == 0) {
                    RPAREN526_tree = (XQDTCommonTree)adaptor.create(RPAREN526);
                    adaptor.addChild(root_0, RPAREN526_tree);
                }

            }

            retval.stop = input.LT(-1);

            if (state.backtracking == 0) {

                retval.tree = (XQDTCommonTree)adaptor.rulePostProcessing(root_0);
                adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        } catch (RecognitionException re) {
            reportError(re);
            recover(input, re);
            retval.tree = (XQDTCommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        } finally {
        }
        return retval;
    }

    // $ANTLR end "p_NamespaceNodeTest"

    public static class p_PITest_return extends ParserRuleReturnScope {
        XQDTCommonTree tree;

        public Object getTree() {
            return tree;
        }
    };

    // $ANTLR start "p_PITest"
    // XQueryParser.g:1204:1: p_PITest : PROCESSING_INSTRUCTION LPAREN ( p_NCName | p_StringLiteral )? RPAREN ;
    public final XQueryParser.p_PITest_return p_PITest() throws RecognitionException {
        XQueryParser.p_PITest_return retval = new XQueryParser.p_PITest_return();
        retval.start = input.LT(1);

        XQDTCommonTree root_0 = null;

        CommonToken PROCESSING_INSTRUCTION527 = null;
        CommonToken LPAREN528 = null;
        CommonToken RPAREN531 = null;
        XQueryParser.p_NCName_return p_NCName529 = null;

        XQueryParser.p_StringLiteral_return p_StringLiteral530 = null;

        XQDTCommonTree PROCESSING_INSTRUCTION527_tree = null;
        XQDTCommonTree LPAREN528_tree = null;
        XQDTCommonTree RPAREN531_tree = null;

        try {
            // XQueryParser.g:1205:9: ( PROCESSING_INSTRUCTION LPAREN ( p_NCName | p_StringLiteral )? RPAREN )
            // XQueryParser.g:1205:11: PROCESSING_INSTRUCTION LPAREN ( p_NCName | p_StringLiteral )? RPAREN
            {
                root_0 = (XQDTCommonTree)adaptor.nil();

                PROCESSING_INSTRUCTION527 = (CommonToken)match(input, PROCESSING_INSTRUCTION,
                        FOLLOW_PROCESSING_INSTRUCTION_in_p_PITest10082);
                if (state.failed) {
                    return retval;
                }
                if (state.backtracking == 0) {
                    PROCESSING_INSTRUCTION527_tree = (XQDTCommonTree)adaptor.create(PROCESSING_INSTRUCTION527);
                    adaptor.addChild(root_0, PROCESSING_INSTRUCTION527_tree);
                }
                LPAREN528 = (CommonToken)match(input, LPAREN, FOLLOW_LPAREN_in_p_PITest10084);
                if (state.failed) {
                    return retval;
                }
                if (state.backtracking == 0) {
                    LPAREN528_tree = (XQDTCommonTree)adaptor.create(LPAREN528);
                    adaptor.addChild(root_0, LPAREN528_tree);
                }
                // XQueryParser.g:1205:41: ( p_NCName | p_StringLiteral )?
                int alt164 = 3;
                int LA164_0 = input.LA(1);

                if (((LA164_0 >= ANCESTOR && LA164_0 <= SKIP) || (LA164_0 >= VALUE && LA164_0 <= QUOT_ER)
                        || LA164_0 == L_NCName || LA164_0 == EXPLICITLY)) {
                    alt164 = 1;
                } else if (((LA164_0 >= APOS && LA164_0 <= QUOT))) {
                    alt164 = 2;
                }
                switch (alt164) {
                case 1:
                    // XQueryParser.g:1205:42: p_NCName
                {
                    pushFollow(FOLLOW_p_NCName_in_p_PITest10087);
                    p_NCName529 = p_NCName();

                    state._fsp--;
                    if (state.failed) {
                        return retval;
                    }
                    if (state.backtracking == 0) {
                        adaptor.addChild(root_0, p_NCName529.getTree());
                    }

                }
                    break;
                case 2:
                    // XQueryParser.g:1205:53: p_StringLiteral
                {
                    pushFollow(FOLLOW_p_StringLiteral_in_p_PITest10091);
                    p_StringLiteral530 = p_StringLiteral();

                    state._fsp--;
                    if (state.failed) {
                        return retval;
                    }
                    if (state.backtracking == 0) {
                        adaptor.addChild(root_0, p_StringLiteral530.getTree());
                    }

                }
                    break;

                }

                RPAREN531 = (CommonToken)match(input, RPAREN, FOLLOW_RPAREN_in_p_PITest10095);
                if (state.failed) {
                    return retval;
                }
                if (state.backtracking == 0) {
                    RPAREN531_tree = (XQDTCommonTree)adaptor.create(RPAREN531);
                    adaptor.addChild(root_0, RPAREN531_tree);
                }

            }

            retval.stop = input.LT(-1);

            if (state.backtracking == 0) {

                retval.tree = (XQDTCommonTree)adaptor.rulePostProcessing(root_0);
                adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        } catch (RecognitionException re) {
            reportError(re);
            recover(input, re);
            retval.tree = (XQDTCommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        } finally {
        }
        return retval;
    }

    // $ANTLR end "p_PITest"

    public static class p_AttributeTest_return extends ParserRuleReturnScope {
        XQDTCommonTree tree;

        public Object getTree() {
            return tree;
        }
    };

    // $ANTLR start "p_AttributeTest"
    // XQueryParser.g:1209:1: p_AttributeTest : ATTRIBUTE LPAREN ( p_AttribNameOrWildcard ( COMMA p_TypeName )? )? RPAREN ;
    public final XQueryParser.p_AttributeTest_return p_AttributeTest() throws RecognitionException {
        XQueryParser.p_AttributeTest_return retval = new XQueryParser.p_AttributeTest_return();
        retval.start = input.LT(1);

        XQDTCommonTree root_0 = null;

        CommonToken ATTRIBUTE532 = null;
        CommonToken LPAREN533 = null;
        CommonToken COMMA535 = null;
        CommonToken RPAREN537 = null;
        XQueryParser.p_AttribNameOrWildcard_return p_AttribNameOrWildcard534 = null;

        XQueryParser.p_TypeName_return p_TypeName536 = null;

        XQDTCommonTree ATTRIBUTE532_tree = null;
        XQDTCommonTree LPAREN533_tree = null;
        XQDTCommonTree COMMA535_tree = null;
        XQDTCommonTree RPAREN537_tree = null;

        try {
            // XQueryParser.g:1210:9: ( ATTRIBUTE LPAREN ( p_AttribNameOrWildcard ( COMMA p_TypeName )? )? RPAREN )
            // XQueryParser.g:1210:11: ATTRIBUTE LPAREN ( p_AttribNameOrWildcard ( COMMA p_TypeName )? )? RPAREN
            {
                root_0 = (XQDTCommonTree)adaptor.nil();

                ATTRIBUTE532 = (CommonToken)match(input, ATTRIBUTE, FOLLOW_ATTRIBUTE_in_p_AttributeTest10121);
                if (state.failed) {
                    return retval;
                }
                if (state.backtracking == 0) {
                    ATTRIBUTE532_tree = (XQDTCommonTree)adaptor.create(ATTRIBUTE532);
                    adaptor.addChild(root_0, ATTRIBUTE532_tree);
                }
                LPAREN533 = (CommonToken)match(input, LPAREN, FOLLOW_LPAREN_in_p_AttributeTest10123);
                if (state.failed) {
                    return retval;
                }
                if (state.backtracking == 0) {
                    LPAREN533_tree = (XQDTCommonTree)adaptor.create(LPAREN533);
                    adaptor.addChild(root_0, LPAREN533_tree);
                }
                // XQueryParser.g:1210:28: ( p_AttribNameOrWildcard ( COMMA p_TypeName )? )?
                int alt166 = 2;
                int LA166_0 = input.LA(1);

                if (((LA166_0 >= ANCESTOR && LA166_0 <= SKIP) || (LA166_0 >= VALUE && LA166_0 <= QUOT_ER)
                        || LA166_0 == STAR || LA166_0 == L_NCName || LA166_0 == EXPLICITLY)) {
                    alt166 = 1;
                }
                switch (alt166) {
                case 1:
                    // XQueryParser.g:1210:29: p_AttribNameOrWildcard ( COMMA p_TypeName )?
                {
                    pushFollow(FOLLOW_p_AttribNameOrWildcard_in_p_AttributeTest10126);
                    p_AttribNameOrWildcard534 = p_AttribNameOrWildcard();

                    state._fsp--;
                    if (state.failed) {
                        return retval;
                    }
                    if (state.backtracking == 0) {
                        adaptor.addChild(root_0, p_AttribNameOrWildcard534.getTree());
                    }
                    // XQueryParser.g:1210:52: ( COMMA p_TypeName )?
                    int alt165 = 2;
                    int LA165_0 = input.LA(1);

                    if ((LA165_0 == COMMA)) {
                        alt165 = 1;
                    }
                    switch (alt165) {
                    case 1:
                        // XQueryParser.g:1210:53: COMMA p_TypeName
                    {
                        COMMA535 = (CommonToken)match(input, COMMA, FOLLOW_COMMA_in_p_AttributeTest10129);
                        if (state.failed) {
                            return retval;
                        }
                        if (state.backtracking == 0) {
                            COMMA535_tree = (XQDTCommonTree)adaptor.create(COMMA535);
                            adaptor.addChild(root_0, COMMA535_tree);
                        }
                        pushFollow(FOLLOW_p_TypeName_in_p_AttributeTest10131);
                        p_TypeName536 = p_TypeName();

                        state._fsp--;
                        if (state.failed) {
                            return retval;
                        }
                        if (state.backtracking == 0) {
                            adaptor.addChild(root_0, p_TypeName536.getTree());
                        }

                    }
                    break;

                    }

                }
                    break;

                }

                RPAREN537 = (CommonToken)match(input, RPAREN, FOLLOW_RPAREN_in_p_AttributeTest10137);
                if (state.failed) {
                    return retval;
                }
                if (state.backtracking == 0) {
                    RPAREN537_tree = (XQDTCommonTree)adaptor.create(RPAREN537);
                    adaptor.addChild(root_0, RPAREN537_tree);
                }

            }

            retval.stop = input.LT(-1);

            if (state.backtracking == 0) {

                retval.tree = (XQDTCommonTree)adaptor.rulePostProcessing(root_0);
                adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        } catch (RecognitionException re) {
            reportError(re);
            recover(input, re);
            retval.tree = (XQDTCommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        } finally {
        }
        return retval;
    }

    // $ANTLR end "p_AttributeTest"

    public static class p_AttribNameOrWildcard_return extends ParserRuleReturnScope {
        XQDTCommonTree tree;

        public Object getTree() {
            return tree;
        }
    };

    // $ANTLR start "p_AttribNameOrWildcard"
    // XQueryParser.g:1214:1: p_AttribNameOrWildcard : ( p_AttributeName | STAR );
    public final XQueryParser.p_AttribNameOrWildcard_return p_AttribNameOrWildcard() throws RecognitionException {
        XQueryParser.p_AttribNameOrWildcard_return retval = new XQueryParser.p_AttribNameOrWildcard_return();
        retval.start = input.LT(1);

        XQDTCommonTree root_0 = null;

        CommonToken STAR539 = null;
        XQueryParser.p_AttributeName_return p_AttributeName538 = null;

        XQDTCommonTree STAR539_tree = null;

        try {
            // XQueryParser.g:1215:9: ( p_AttributeName | STAR )
            int alt167 = 2;
            int LA167_0 = input.LA(1);

            if (((LA167_0 >= ANCESTOR && LA167_0 <= SKIP) || (LA167_0 >= VALUE && LA167_0 <= QUOT_ER)
                    || LA167_0 == L_NCName || LA167_0 == EXPLICITLY)) {
                alt167 = 1;
            } else if ((LA167_0 == STAR)) {
                alt167 = 2;
            } else {
                if (state.backtracking > 0) {
                    state.failed = true;
                    return retval;
                }
                NoViableAltException nvae = new NoViableAltException("", 167, 0, input);

                throw nvae;
            }
            switch (alt167) {
            case 1:
                // XQueryParser.g:1215:11: p_AttributeName
            {
                root_0 = (XQDTCommonTree)adaptor.nil();

                pushFollow(FOLLOW_p_AttributeName_in_p_AttribNameOrWildcard10165);
                p_AttributeName538 = p_AttributeName();

                state._fsp--;
                if (state.failed) {
                    return retval;
                }
                if (state.backtracking == 0) {
                    adaptor.addChild(root_0, p_AttributeName538.getTree());
                }

            }
            break;
            case 2:
                // XQueryParser.g:1215:29: STAR
            {
                root_0 = (XQDTCommonTree)adaptor.nil();

                STAR539 = (CommonToken)match(input, STAR, FOLLOW_STAR_in_p_AttribNameOrWildcard10169);
                if (state.failed) {
                    return retval;
                }
                if (state.backtracking == 0) {
                    STAR539_tree = (XQDTCommonTree)adaptor.create(STAR539);
                    adaptor.addChild(root_0, STAR539_tree);
                }

            }
            break;

            }
            retval.stop = input.LT(-1);

            if (state.backtracking == 0) {

                retval.tree = (XQDTCommonTree)adaptor.rulePostProcessing(root_0);
                adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        } catch (RecognitionException re) {
            reportError(re);
            recover(input, re);
            retval.tree = (XQDTCommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        } finally {
        }
        return retval;
    }

    // $ANTLR end "p_AttribNameOrWildcard"

    public static class p_SchemaAttributeTest_return extends ParserRuleReturnScope {
        XQDTCommonTree tree;

        public Object getTree() {
            return tree;
        }
    };

    // $ANTLR start "p_SchemaAttributeTest"
    // XQueryParser.g:1219:1: p_SchemaAttributeTest : SCHEMA_ATTRIBUTE LPAREN p_AttributeDeclaration RPAREN ;
    public final XQueryParser.p_SchemaAttributeTest_return p_SchemaAttributeTest() throws RecognitionException {
        XQueryParser.p_SchemaAttributeTest_return retval = new XQueryParser.p_SchemaAttributeTest_return();
        retval.start = input.LT(1);

        XQDTCommonTree root_0 = null;

        CommonToken SCHEMA_ATTRIBUTE540 = null;
        CommonToken LPAREN541 = null;
        CommonToken RPAREN543 = null;
        XQueryParser.p_AttributeDeclaration_return p_AttributeDeclaration542 = null;

        XQDTCommonTree SCHEMA_ATTRIBUTE540_tree = null;
        XQDTCommonTree LPAREN541_tree = null;
        XQDTCommonTree RPAREN543_tree = null;

        try {
            // XQueryParser.g:1220:9: ( SCHEMA_ATTRIBUTE LPAREN p_AttributeDeclaration RPAREN )
            // XQueryParser.g:1220:11: SCHEMA_ATTRIBUTE LPAREN p_AttributeDeclaration RPAREN
            {
                root_0 = (XQDTCommonTree)adaptor.nil();

                SCHEMA_ATTRIBUTE540 = (CommonToken)match(input, SCHEMA_ATTRIBUTE,
                        FOLLOW_SCHEMA_ATTRIBUTE_in_p_SchemaAttributeTest10195);
                if (state.failed) {
                    return retval;
                }
                if (state.backtracking == 0) {
                    SCHEMA_ATTRIBUTE540_tree = (XQDTCommonTree)adaptor.create(SCHEMA_ATTRIBUTE540);
                    adaptor.addChild(root_0, SCHEMA_ATTRIBUTE540_tree);
                }
                LPAREN541 = (CommonToken)match(input, LPAREN, FOLLOW_LPAREN_in_p_SchemaAttributeTest10197);
                if (state.failed) {
                    return retval;
                }
                if (state.backtracking == 0) {
                    LPAREN541_tree = (XQDTCommonTree)adaptor.create(LPAREN541);
                    adaptor.addChild(root_0, LPAREN541_tree);
                }
                pushFollow(FOLLOW_p_AttributeDeclaration_in_p_SchemaAttributeTest10199);
                p_AttributeDeclaration542 = p_AttributeDeclaration();

                state._fsp--;
                if (state.failed) {
                    return retval;
                }
                if (state.backtracking == 0) {
                    adaptor.addChild(root_0, p_AttributeDeclaration542.getTree());
                }
                RPAREN543 = (CommonToken)match(input, RPAREN, FOLLOW_RPAREN_in_p_SchemaAttributeTest10201);
                if (state.failed) {
                    return retval;
                }
                if (state.backtracking == 0) {
                    RPAREN543_tree = (XQDTCommonTree)adaptor.create(RPAREN543);
                    adaptor.addChild(root_0, RPAREN543_tree);
                }

            }

            retval.stop = input.LT(-1);

            if (state.backtracking == 0) {

                retval.tree = (XQDTCommonTree)adaptor.rulePostProcessing(root_0);
                adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        } catch (RecognitionException re) {
            reportError(re);
            recover(input, re);
            retval.tree = (XQDTCommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        } finally {
        }
        return retval;
    }

    // $ANTLR end "p_SchemaAttributeTest"

    public static class p_AttributeDeclaration_return extends ParserRuleReturnScope {
        XQDTCommonTree tree;

        public Object getTree() {
            return tree;
        }
    };

    // $ANTLR start "p_AttributeDeclaration"
    // XQueryParser.g:1224:1: p_AttributeDeclaration : p_AttributeName ;
    public final XQueryParser.p_AttributeDeclaration_return p_AttributeDeclaration() throws RecognitionException {
        XQueryParser.p_AttributeDeclaration_return retval = new XQueryParser.p_AttributeDeclaration_return();
        retval.start = input.LT(1);

        XQDTCommonTree root_0 = null;

        XQueryParser.p_AttributeName_return p_AttributeName544 = null;

        try {
            // XQueryParser.g:1225:9: ( p_AttributeName )
            // XQueryParser.g:1225:11: p_AttributeName
            {
                root_0 = (XQDTCommonTree)adaptor.nil();

                pushFollow(FOLLOW_p_AttributeName_in_p_AttributeDeclaration10227);
                p_AttributeName544 = p_AttributeName();

                state._fsp--;
                if (state.failed) {
                    return retval;
                }
                if (state.backtracking == 0) {
                    adaptor.addChild(root_0, p_AttributeName544.getTree());
                }

            }

            retval.stop = input.LT(-1);

            if (state.backtracking == 0) {

                retval.tree = (XQDTCommonTree)adaptor.rulePostProcessing(root_0);
                adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        } catch (RecognitionException re) {
            reportError(re);
            recover(input, re);
            retval.tree = (XQDTCommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        } finally {
        }
        return retval;
    }

    // $ANTLR end "p_AttributeDeclaration"

    public static class p_ElementTest_return extends ParserRuleReturnScope {
        XQDTCommonTree tree;

        public Object getTree() {
            return tree;
        }
    };

    // $ANTLR start "p_ElementTest"
    // XQueryParser.g:1229:1: p_ElementTest : ELEMENT LPAREN ( p_ElementNameOrWildcard ( COMMA p_TypeName ( QUESTION )? )? )? RPAREN ;
    public final XQueryParser.p_ElementTest_return p_ElementTest() throws RecognitionException {
        XQueryParser.p_ElementTest_return retval = new XQueryParser.p_ElementTest_return();
        retval.start = input.LT(1);

        XQDTCommonTree root_0 = null;

        CommonToken ELEMENT545 = null;
        CommonToken LPAREN546 = null;
        CommonToken COMMA548 = null;
        CommonToken QUESTION550 = null;
        CommonToken RPAREN551 = null;
        XQueryParser.p_ElementNameOrWildcard_return p_ElementNameOrWildcard547 = null;

        XQueryParser.p_TypeName_return p_TypeName549 = null;

        XQDTCommonTree ELEMENT545_tree = null;
        XQDTCommonTree LPAREN546_tree = null;
        XQDTCommonTree COMMA548_tree = null;
        XQDTCommonTree QUESTION550_tree = null;
        XQDTCommonTree RPAREN551_tree = null;

        try {
            // XQueryParser.g:1230:9: ( ELEMENT LPAREN ( p_ElementNameOrWildcard ( COMMA p_TypeName ( QUESTION )? )? )? RPAREN )
            // XQueryParser.g:1230:11: ELEMENT LPAREN ( p_ElementNameOrWildcard ( COMMA p_TypeName ( QUESTION )? )? )? RPAREN
            {
                root_0 = (XQDTCommonTree)adaptor.nil();

                ELEMENT545 = (CommonToken)match(input, ELEMENT, FOLLOW_ELEMENT_in_p_ElementTest10253);
                if (state.failed) {
                    return retval;
                }
                if (state.backtracking == 0) {
                    ELEMENT545_tree = (XQDTCommonTree)adaptor.create(ELEMENT545);
                    adaptor.addChild(root_0, ELEMENT545_tree);
                }
                LPAREN546 = (CommonToken)match(input, LPAREN, FOLLOW_LPAREN_in_p_ElementTest10255);
                if (state.failed) {
                    return retval;
                }
                if (state.backtracking == 0) {
                    LPAREN546_tree = (XQDTCommonTree)adaptor.create(LPAREN546);
                    adaptor.addChild(root_0, LPAREN546_tree);
                }
                // XQueryParser.g:1230:26: ( p_ElementNameOrWildcard ( COMMA p_TypeName ( QUESTION )? )? )?
                int alt170 = 2;
                int LA170_0 = input.LA(1);

                if (((LA170_0 >= ANCESTOR && LA170_0 <= SKIP) || (LA170_0 >= VALUE && LA170_0 <= QUOT_ER)
                        || LA170_0 == STAR || LA170_0 == L_NCName || LA170_0 == EXPLICITLY)) {
                    alt170 = 1;
                }
                switch (alt170) {
                case 1:
                    // XQueryParser.g:1230:27: p_ElementNameOrWildcard ( COMMA p_TypeName ( QUESTION )? )?
                {
                    pushFollow(FOLLOW_p_ElementNameOrWildcard_in_p_ElementTest10258);
                    p_ElementNameOrWildcard547 = p_ElementNameOrWildcard();

                    state._fsp--;
                    if (state.failed) {
                        return retval;
                    }
                    if (state.backtracking == 0) {
                        adaptor.addChild(root_0, p_ElementNameOrWildcard547.getTree());
                    }
                    // XQueryParser.g:1230:51: ( COMMA p_TypeName ( QUESTION )? )?
                    int alt169 = 2;
                    int LA169_0 = input.LA(1);

                    if ((LA169_0 == COMMA)) {
                        alt169 = 1;
                    }
                    switch (alt169) {
                    case 1:
                        // XQueryParser.g:1230:52: COMMA p_TypeName ( QUESTION )?
                    {
                        COMMA548 = (CommonToken)match(input, COMMA, FOLLOW_COMMA_in_p_ElementTest10261);
                        if (state.failed) {
                            return retval;
                        }
                        if (state.backtracking == 0) {
                            COMMA548_tree = (XQDTCommonTree)adaptor.create(COMMA548);
                            adaptor.addChild(root_0, COMMA548_tree);
                        }
                        pushFollow(FOLLOW_p_TypeName_in_p_ElementTest10263);
                        p_TypeName549 = p_TypeName();

                        state._fsp--;
                        if (state.failed) {
                            return retval;
                        }
                        if (state.backtracking == 0) {
                            adaptor.addChild(root_0, p_TypeName549.getTree());
                        }
                        // XQueryParser.g:1230:69: ( QUESTION )?
                        int alt168 = 2;
                        int LA168_0 = input.LA(1);

                        if ((LA168_0 == QUESTION)) {
                            alt168 = 1;
                        }
                        switch (alt168) {
                        case 1:
                            // XQueryParser.g:1230:69: QUESTION
                        {
                            QUESTION550 = (CommonToken)match(input, QUESTION, FOLLOW_QUESTION_in_p_ElementTest10265);
                            if (state.failed) {
                                return retval;
                            }
                            if (state.backtracking == 0) {
                                QUESTION550_tree = (XQDTCommonTree)adaptor.create(QUESTION550);
                                adaptor.addChild(root_0, QUESTION550_tree);
                            }

                        }
                        break;

                        }

                    }
                    break;

                    }

                }
                    break;

                }

                RPAREN551 = (CommonToken)match(input, RPAREN, FOLLOW_RPAREN_in_p_ElementTest10272);
                if (state.failed) {
                    return retval;
                }
                if (state.backtracking == 0) {
                    RPAREN551_tree = (XQDTCommonTree)adaptor.create(RPAREN551);
                    adaptor.addChild(root_0, RPAREN551_tree);
                }

            }

            retval.stop = input.LT(-1);

            if (state.backtracking == 0) {

                retval.tree = (XQDTCommonTree)adaptor.rulePostProcessing(root_0);
                adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        } catch (RecognitionException re) {
            reportError(re);
            recover(input, re);
            retval.tree = (XQDTCommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        } finally {
        }
        return retval;
    }

    // $ANTLR end "p_ElementTest"

    public static class p_ElementNameOrWildcard_return extends ParserRuleReturnScope {
        XQDTCommonTree tree;

        public Object getTree() {
            return tree;
        }
    };

    // $ANTLR start "p_ElementNameOrWildcard"
    // XQueryParser.g:1234:1: p_ElementNameOrWildcard : ( p_QName | STAR );
    public final XQueryParser.p_ElementNameOrWildcard_return p_ElementNameOrWildcard() throws RecognitionException {
        XQueryParser.p_ElementNameOrWildcard_return retval = new XQueryParser.p_ElementNameOrWildcard_return();
        retval.start = input.LT(1);

        XQDTCommonTree root_0 = null;

        CommonToken STAR553 = null;
        XQueryParser.p_QName_return p_QName552 = null;

        XQDTCommonTree STAR553_tree = null;

        try {
            // XQueryParser.g:1235:9: ( p_QName | STAR )
            int alt171 = 2;
            int LA171_0 = input.LA(1);

            if (((LA171_0 >= ANCESTOR && LA171_0 <= SKIP) || (LA171_0 >= VALUE && LA171_0 <= QUOT_ER)
                    || LA171_0 == L_NCName || LA171_0 == EXPLICITLY)) {
                alt171 = 1;
            } else if ((LA171_0 == STAR)) {
                alt171 = 2;
            } else {
                if (state.backtracking > 0) {
                    state.failed = true;
                    return retval;
                }
                NoViableAltException nvae = new NoViableAltException("", 171, 0, input);

                throw nvae;
            }
            switch (alt171) {
            case 1:
                // XQueryParser.g:1235:11: p_QName
            {
                root_0 = (XQDTCommonTree)adaptor.nil();

                pushFollow(FOLLOW_p_QName_in_p_ElementNameOrWildcard10298);
                p_QName552 = p_QName();

                state._fsp--;
                if (state.failed) {
                    return retval;
                }
                if (state.backtracking == 0) {
                    adaptor.addChild(root_0, p_QName552.getTree());
                }

            }
            break;
            case 2:
                // XQueryParser.g:1235:21: STAR
            {
                root_0 = (XQDTCommonTree)adaptor.nil();

                STAR553 = (CommonToken)match(input, STAR, FOLLOW_STAR_in_p_ElementNameOrWildcard10302);
                if (state.failed) {
                    return retval;
                }
                if (state.backtracking == 0) {
                    STAR553_tree = (XQDTCommonTree)adaptor.create(STAR553);
                    adaptor.addChild(root_0, STAR553_tree);
                }

            }
            break;

            }
            retval.stop = input.LT(-1);

            if (state.backtracking == 0) {

                retval.tree = (XQDTCommonTree)adaptor.rulePostProcessing(root_0);
                adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        } catch (RecognitionException re) {
            reportError(re);
            recover(input, re);
            retval.tree = (XQDTCommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        } finally {
        }
        return retval;
    }

    // $ANTLR end "p_ElementNameOrWildcard"

    public static class p_SchemaElementTest_return extends ParserRuleReturnScope {
        XQDTCommonTree tree;

        public Object getTree() {
            return tree;
        }
    };

    // $ANTLR start "p_SchemaElementTest"
    // XQueryParser.g:1238:1: p_SchemaElementTest : SCHEMA_ELEMENT LPAREN p_ElementDeclaration RPAREN ;
    public final XQueryParser.p_SchemaElementTest_return p_SchemaElementTest() throws RecognitionException {
        XQueryParser.p_SchemaElementTest_return retval = new XQueryParser.p_SchemaElementTest_return();
        retval.start = input.LT(1);

        XQDTCommonTree root_0 = null;

        CommonToken SCHEMA_ELEMENT554 = null;
        CommonToken LPAREN555 = null;
        CommonToken RPAREN557 = null;
        XQueryParser.p_ElementDeclaration_return p_ElementDeclaration556 = null;

        XQDTCommonTree SCHEMA_ELEMENT554_tree = null;
        XQDTCommonTree LPAREN555_tree = null;
        XQDTCommonTree RPAREN557_tree = null;

        try {
            // XQueryParser.g:1239:9: ( SCHEMA_ELEMENT LPAREN p_ElementDeclaration RPAREN )
            // XQueryParser.g:1239:11: SCHEMA_ELEMENT LPAREN p_ElementDeclaration RPAREN
            {
                root_0 = (XQDTCommonTree)adaptor.nil();

                SCHEMA_ELEMENT554 = (CommonToken)match(input, SCHEMA_ELEMENT,
                        FOLLOW_SCHEMA_ELEMENT_in_p_SchemaElementTest10320);
                if (state.failed) {
                    return retval;
                }
                if (state.backtracking == 0) {
                    SCHEMA_ELEMENT554_tree = (XQDTCommonTree)adaptor.create(SCHEMA_ELEMENT554);
                    adaptor.addChild(root_0, SCHEMA_ELEMENT554_tree);
                }
                LPAREN555 = (CommonToken)match(input, LPAREN, FOLLOW_LPAREN_in_p_SchemaElementTest10322);
                if (state.failed) {
                    return retval;
                }
                if (state.backtracking == 0) {
                    LPAREN555_tree = (XQDTCommonTree)adaptor.create(LPAREN555);
                    adaptor.addChild(root_0, LPAREN555_tree);
                }
                pushFollow(FOLLOW_p_ElementDeclaration_in_p_SchemaElementTest10324);
                p_ElementDeclaration556 = p_ElementDeclaration();

                state._fsp--;
                if (state.failed) {
                    return retval;
                }
                if (state.backtracking == 0) {
                    adaptor.addChild(root_0, p_ElementDeclaration556.getTree());
                }
                RPAREN557 = (CommonToken)match(input, RPAREN, FOLLOW_RPAREN_in_p_SchemaElementTest10326);
                if (state.failed) {
                    return retval;
                }
                if (state.backtracking == 0) {
                    RPAREN557_tree = (XQDTCommonTree)adaptor.create(RPAREN557);
                    adaptor.addChild(root_0, RPAREN557_tree);
                }

            }

            retval.stop = input.LT(-1);

            if (state.backtracking == 0) {

                retval.tree = (XQDTCommonTree)adaptor.rulePostProcessing(root_0);
                adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        } catch (RecognitionException re) {
            reportError(re);
            recover(input, re);
            retval.tree = (XQDTCommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        } finally {
        }
        return retval;
    }

    // $ANTLR end "p_SchemaElementTest"

    public static class p_ElementDeclaration_return extends ParserRuleReturnScope {
        XQDTCommonTree tree;

        public Object getTree() {
            return tree;
        }
    };

    // $ANTLR start "p_ElementDeclaration"
    // XQueryParser.g:1243:1: p_ElementDeclaration : p_ElementName ;
    public final XQueryParser.p_ElementDeclaration_return p_ElementDeclaration() throws RecognitionException {
        XQueryParser.p_ElementDeclaration_return retval = new XQueryParser.p_ElementDeclaration_return();
        retval.start = input.LT(1);

        XQDTCommonTree root_0 = null;

        XQueryParser.p_ElementName_return p_ElementName558 = null;

        try {
            // XQueryParser.g:1244:9: ( p_ElementName )
            // XQueryParser.g:1244:11: p_ElementName
            {
                root_0 = (XQDTCommonTree)adaptor.nil();

                pushFollow(FOLLOW_p_ElementName_in_p_ElementDeclaration10352);
                p_ElementName558 = p_ElementName();

                state._fsp--;
                if (state.failed) {
                    return retval;
                }
                if (state.backtracking == 0) {
                    adaptor.addChild(root_0, p_ElementName558.getTree());
                }

            }

            retval.stop = input.LT(-1);

            if (state.backtracking == 0) {

                retval.tree = (XQDTCommonTree)adaptor.rulePostProcessing(root_0);
                adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        } catch (RecognitionException re) {
            reportError(re);
            recover(input, re);
            retval.tree = (XQDTCommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        } finally {
        }
        return retval;
    }

    // $ANTLR end "p_ElementDeclaration"

    public static class p_AttributeName_return extends ParserRuleReturnScope {
        XQDTCommonTree tree;

        public Object getTree() {
            return tree;
        }
    };

    // $ANTLR start "p_AttributeName"
    // XQueryParser.g:1248:1: p_AttributeName : p_QName ;
    public final XQueryParser.p_AttributeName_return p_AttributeName() throws RecognitionException {
        XQueryParser.p_AttributeName_return retval = new XQueryParser.p_AttributeName_return();
        retval.start = input.LT(1);

        XQDTCommonTree root_0 = null;

        XQueryParser.p_QName_return p_QName559 = null;

        try {
            // XQueryParser.g:1249:9: ( p_QName )
            // XQueryParser.g:1249:11: p_QName
            {
                root_0 = (XQDTCommonTree)adaptor.nil();

                pushFollow(FOLLOW_p_QName_in_p_AttributeName10378);
                p_QName559 = p_QName();

                state._fsp--;
                if (state.failed) {
                    return retval;
                }
                if (state.backtracking == 0) {
                    adaptor.addChild(root_0, p_QName559.getTree());
                }

            }

            retval.stop = input.LT(-1);

            if (state.backtracking == 0) {

                retval.tree = (XQDTCommonTree)adaptor.rulePostProcessing(root_0);
                adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        } catch (RecognitionException re) {
            reportError(re);
            recover(input, re);
            retval.tree = (XQDTCommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        } finally {
        }
        return retval;
    }

    // $ANTLR end "p_AttributeName"

    public static class p_ElementName_return extends ParserRuleReturnScope {
        XQDTCommonTree tree;

        public Object getTree() {
            return tree;
        }
    };

    // $ANTLR start "p_ElementName"
    // XQueryParser.g:1253:1: p_ElementName : p_QName ;
    public final XQueryParser.p_ElementName_return p_ElementName() throws RecognitionException {
        XQueryParser.p_ElementName_return retval = new XQueryParser.p_ElementName_return();
        retval.start = input.LT(1);

        XQDTCommonTree root_0 = null;

        XQueryParser.p_QName_return p_QName560 = null;

        try {
            // XQueryParser.g:1254:9: ( p_QName )
            // XQueryParser.g:1254:11: p_QName
            {
                root_0 = (XQDTCommonTree)adaptor.nil();

                pushFollow(FOLLOW_p_QName_in_p_ElementName10404);
                p_QName560 = p_QName();

                state._fsp--;
                if (state.failed) {
                    return retval;
                }
                if (state.backtracking == 0) {
                    adaptor.addChild(root_0, p_QName560.getTree());
                }

            }

            retval.stop = input.LT(-1);

            if (state.backtracking == 0) {

                retval.tree = (XQDTCommonTree)adaptor.rulePostProcessing(root_0);
                adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        } catch (RecognitionException re) {
            reportError(re);
            recover(input, re);
            retval.tree = (XQDTCommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        } finally {
        }
        return retval;
    }

    // $ANTLR end "p_ElementName"

    public static class p_TypeName_return extends ParserRuleReturnScope {
        XQDTCommonTree tree;

        public Object getTree() {
            return tree;
        }
    };

    // $ANTLR start "p_TypeName"
    // XQueryParser.g:1258:1: p_TypeName : p_QName ;
    public final XQueryParser.p_TypeName_return p_TypeName() throws RecognitionException {
        XQueryParser.p_TypeName_return retval = new XQueryParser.p_TypeName_return();
        retval.start = input.LT(1);

        XQDTCommonTree root_0 = null;

        XQueryParser.p_QName_return p_QName561 = null;

        try {
            // XQueryParser.g:1259:9: ( p_QName )
            // XQueryParser.g:1259:11: p_QName
            {
                root_0 = (XQDTCommonTree)adaptor.nil();

                pushFollow(FOLLOW_p_QName_in_p_TypeName10430);
                p_QName561 = p_QName();

                state._fsp--;
                if (state.failed) {
                    return retval;
                }
                if (state.backtracking == 0) {
                    adaptor.addChild(root_0, p_QName561.getTree());
                }

            }

            retval.stop = input.LT(-1);

            if (state.backtracking == 0) {

                retval.tree = (XQDTCommonTree)adaptor.rulePostProcessing(root_0);
                adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        } catch (RecognitionException re) {
            reportError(re);
            recover(input, re);
            retval.tree = (XQDTCommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        } finally {
        }
        return retval;
    }

    // $ANTLR end "p_TypeName"

    public static class p_FunctionTest_return extends ParserRuleReturnScope {
        XQDTCommonTree tree;

        public Object getTree() {
            return tree;
        }
    };

    // $ANTLR start "p_FunctionTest"
    // XQueryParser.g:1263:1: p_FunctionTest : ( p_Annotation )* ( p_AnyFunctionTest | p_TypedFunctionTest ) ;
    public final XQueryParser.p_FunctionTest_return p_FunctionTest() throws RecognitionException {
        XQueryParser.p_FunctionTest_return retval = new XQueryParser.p_FunctionTest_return();
        retval.start = input.LT(1);

        XQDTCommonTree root_0 = null;

        XQueryParser.p_Annotation_return p_Annotation562 = null;

        XQueryParser.p_AnyFunctionTest_return p_AnyFunctionTest563 = null;

        XQueryParser.p_TypedFunctionTest_return p_TypedFunctionTest564 = null;

        try {
            // XQueryParser.g:1264:9: ( ( p_Annotation )* ( p_AnyFunctionTest | p_TypedFunctionTest ) )
            // XQueryParser.g:1264:11: ( p_Annotation )* ( p_AnyFunctionTest | p_TypedFunctionTest )
            {
                root_0 = (XQDTCommonTree)adaptor.nil();

                // XQueryParser.g:1264:11: ( p_Annotation )*
                loop172: do {
                    int alt172 = 2;
                    int LA172_0 = input.LA(1);

                    if ((LA172_0 == ANN_PERCENT)) {
                        alt172 = 1;
                    }

                    switch (alt172) {
                    case 1:
                        // XQueryParser.g:1264:11: p_Annotation
                    {
                        pushFollow(FOLLOW_p_Annotation_in_p_FunctionTest10456);
                        p_Annotation562 = p_Annotation();

                        state._fsp--;
                        if (state.failed) {
                            return retval;
                        }
                        if (state.backtracking == 0) {
                            adaptor.addChild(root_0, p_Annotation562.getTree());
                        }

                    }
                    break;

                    default:
                        break loop172;
                    }
                } while (true);

                // XQueryParser.g:1264:25: ( p_AnyFunctionTest | p_TypedFunctionTest )
                int alt173 = 2;
                int LA173_0 = input.LA(1);

                if ((LA173_0 == FUNCTION)) {
                    int LA173_1 = input.LA(2);

                    if ((LA173_1 == LPAREN)) {
                        int LA173_2 = input.LA(3);

                        if ((LA173_2 == STAR)) {
                            alt173 = 1;
                        } else if (((LA173_2 >= ANCESTOR && LA173_2 <= SKIP)
                                || (LA173_2 >= VALUE && LA173_2 <= QUOT_ER) || (LA173_2 >= LPAREN && LA173_2 <= RPAREN)
                                || LA173_2 == L_NCName || LA173_2 == EXPLICITLY)) {
                            alt173 = 2;
                        } else {
                            if (state.backtracking > 0) {
                                state.failed = true;
                                return retval;
                            }
                            NoViableAltException nvae = new NoViableAltException("", 173, 2, input);

                            throw nvae;
                        }
                    } else {
                        if (state.backtracking > 0) {
                            state.failed = true;
                            return retval;
                        }
                        NoViableAltException nvae = new NoViableAltException("", 173, 1, input);

                        throw nvae;
                    }
                } else {
                    if (state.backtracking > 0) {
                        state.failed = true;
                        return retval;
                    }
                    NoViableAltException nvae = new NoViableAltException("", 173, 0, input);

                    throw nvae;
                }
                switch (alt173) {
                case 1:
                    // XQueryParser.g:1264:26: p_AnyFunctionTest
                {
                    pushFollow(FOLLOW_p_AnyFunctionTest_in_p_FunctionTest10460);
                    p_AnyFunctionTest563 = p_AnyFunctionTest();

                    state._fsp--;
                    if (state.failed) {
                        return retval;
                    }
                    if (state.backtracking == 0) {
                        adaptor.addChild(root_0, p_AnyFunctionTest563.getTree());
                    }

                }
                    break;
                case 2:
                    // XQueryParser.g:1264:46: p_TypedFunctionTest
                {
                    pushFollow(FOLLOW_p_TypedFunctionTest_in_p_FunctionTest10464);
                    p_TypedFunctionTest564 = p_TypedFunctionTest();

                    state._fsp--;
                    if (state.failed) {
                        return retval;
                    }
                    if (state.backtracking == 0) {
                        adaptor.addChild(root_0, p_TypedFunctionTest564.getTree());
                    }

                }
                    break;

                }

            }

            retval.stop = input.LT(-1);

            if (state.backtracking == 0) {

                retval.tree = (XQDTCommonTree)adaptor.rulePostProcessing(root_0);
                adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        } catch (RecognitionException re) {
            reportError(re);
            recover(input, re);
            retval.tree = (XQDTCommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        } finally {
        }
        return retval;
    }

    // $ANTLR end "p_FunctionTest"

    public static class p_AnyFunctionTest_return extends ParserRuleReturnScope {
        XQDTCommonTree tree;

        public Object getTree() {
            return tree;
        }
    };

    // $ANTLR start "p_AnyFunctionTest"
    // XQueryParser.g:1268:1: p_AnyFunctionTest : FUNCTION LPAREN STAR RPAREN ;
    public final XQueryParser.p_AnyFunctionTest_return p_AnyFunctionTest() throws RecognitionException {
        XQueryParser.p_AnyFunctionTest_return retval = new XQueryParser.p_AnyFunctionTest_return();
        retval.start = input.LT(1);

        XQDTCommonTree root_0 = null;

        CommonToken FUNCTION565 = null;
        CommonToken LPAREN566 = null;
        CommonToken STAR567 = null;
        CommonToken RPAREN568 = null;

        XQDTCommonTree FUNCTION565_tree = null;
        XQDTCommonTree LPAREN566_tree = null;
        XQDTCommonTree STAR567_tree = null;
        XQDTCommonTree RPAREN568_tree = null;

        try {
            // XQueryParser.g:1269:9: ( FUNCTION LPAREN STAR RPAREN )
            // XQueryParser.g:1269:11: FUNCTION LPAREN STAR RPAREN
            {
                root_0 = (XQDTCommonTree)adaptor.nil();

                FUNCTION565 = (CommonToken)match(input, FUNCTION, FOLLOW_FUNCTION_in_p_AnyFunctionTest10491);
                if (state.failed) {
                    return retval;
                }
                if (state.backtracking == 0) {
                    FUNCTION565_tree = (XQDTCommonTree)adaptor.create(FUNCTION565);
                    adaptor.addChild(root_0, FUNCTION565_tree);
                }
                LPAREN566 = (CommonToken)match(input, LPAREN, FOLLOW_LPAREN_in_p_AnyFunctionTest10493);
                if (state.failed) {
                    return retval;
                }
                if (state.backtracking == 0) {
                    LPAREN566_tree = (XQDTCommonTree)adaptor.create(LPAREN566);
                    adaptor.addChild(root_0, LPAREN566_tree);
                }
                STAR567 = (CommonToken)match(input, STAR, FOLLOW_STAR_in_p_AnyFunctionTest10495);
                if (state.failed) {
                    return retval;
                }
                if (state.backtracking == 0) {
                    STAR567_tree = (XQDTCommonTree)adaptor.create(STAR567);
                    adaptor.addChild(root_0, STAR567_tree);
                }
                RPAREN568 = (CommonToken)match(input, RPAREN, FOLLOW_RPAREN_in_p_AnyFunctionTest10497);
                if (state.failed) {
                    return retval;
                }
                if (state.backtracking == 0) {
                    RPAREN568_tree = (XQDTCommonTree)adaptor.create(RPAREN568);
                    adaptor.addChild(root_0, RPAREN568_tree);
                }

            }

            retval.stop = input.LT(-1);

            if (state.backtracking == 0) {

                retval.tree = (XQDTCommonTree)adaptor.rulePostProcessing(root_0);
                adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        } catch (RecognitionException re) {
            reportError(re);
            recover(input, re);
            retval.tree = (XQDTCommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        } finally {
        }
        return retval;
    }

    // $ANTLR end "p_AnyFunctionTest"

    public static class p_TypedFunctionTest_return extends ParserRuleReturnScope {
        XQDTCommonTree tree;

        public Object getTree() {
            return tree;
        }
    };

    // $ANTLR start "p_TypedFunctionTest"
    // XQueryParser.g:1273:1: p_TypedFunctionTest : FUNCTION LPAREN ( p_SequenceType ( COMMA p_SequenceType )* )? RPAREN AS p_SequenceType ;
    public final XQueryParser.p_TypedFunctionTest_return p_TypedFunctionTest() throws RecognitionException {
        XQueryParser.p_TypedFunctionTest_return retval = new XQueryParser.p_TypedFunctionTest_return();
        retval.start = input.LT(1);

        XQDTCommonTree root_0 = null;

        CommonToken FUNCTION569 = null;
        CommonToken LPAREN570 = null;
        CommonToken COMMA572 = null;
        CommonToken RPAREN574 = null;
        CommonToken AS575 = null;
        XQueryParser.p_SequenceType_return p_SequenceType571 = null;

        XQueryParser.p_SequenceType_return p_SequenceType573 = null;

        XQueryParser.p_SequenceType_return p_SequenceType576 = null;

        XQDTCommonTree FUNCTION569_tree = null;
        XQDTCommonTree LPAREN570_tree = null;
        XQDTCommonTree COMMA572_tree = null;
        XQDTCommonTree RPAREN574_tree = null;
        XQDTCommonTree AS575_tree = null;

        try {
            // XQueryParser.g:1274:9: ( FUNCTION LPAREN ( p_SequenceType ( COMMA p_SequenceType )* )? RPAREN AS p_SequenceType )
            // XQueryParser.g:1274:11: FUNCTION LPAREN ( p_SequenceType ( COMMA p_SequenceType )* )? RPAREN AS p_SequenceType
            {
                root_0 = (XQDTCommonTree)adaptor.nil();

                FUNCTION569 = (CommonToken)match(input, FUNCTION, FOLLOW_FUNCTION_in_p_TypedFunctionTest10523);
                if (state.failed) {
                    return retval;
                }
                if (state.backtracking == 0) {
                    FUNCTION569_tree = (XQDTCommonTree)adaptor.create(FUNCTION569);
                    adaptor.addChild(root_0, FUNCTION569_tree);
                }
                LPAREN570 = (CommonToken)match(input, LPAREN, FOLLOW_LPAREN_in_p_TypedFunctionTest10525);
                if (state.failed) {
                    return retval;
                }
                if (state.backtracking == 0) {
                    LPAREN570_tree = (XQDTCommonTree)adaptor.create(LPAREN570);
                    adaptor.addChild(root_0, LPAREN570_tree);
                }
                // XQueryParser.g:1274:27: ( p_SequenceType ( COMMA p_SequenceType )* )?
                int alt175 = 2;
                int LA175_0 = input.LA(1);

                if (((LA175_0 >= ANCESTOR && LA175_0 <= SKIP) || (LA175_0 >= VALUE && LA175_0 <= QUOT_ER)
                        || LA175_0 == LPAREN || LA175_0 == L_NCName || LA175_0 == EXPLICITLY)) {
                    alt175 = 1;
                }
                switch (alt175) {
                case 1:
                    // XQueryParser.g:1274:28: p_SequenceType ( COMMA p_SequenceType )*
                {
                    pushFollow(FOLLOW_p_SequenceType_in_p_TypedFunctionTest10528);
                    p_SequenceType571 = p_SequenceType();

                    state._fsp--;
                    if (state.failed) {
                        return retval;
                    }
                    if (state.backtracking == 0) {
                        adaptor.addChild(root_0, p_SequenceType571.getTree());
                    }
                    // XQueryParser.g:1274:43: ( COMMA p_SequenceType )*
                    loop174: do {
                        int alt174 = 2;
                        int LA174_0 = input.LA(1);

                        if ((LA174_0 == COMMA)) {
                            alt174 = 1;
                        }

                        switch (alt174) {
                        case 1:
                            // XQueryParser.g:1274:44: COMMA p_SequenceType
                        {
                            COMMA572 = (CommonToken)match(input, COMMA, FOLLOW_COMMA_in_p_TypedFunctionTest10531);
                            if (state.failed) {
                                return retval;
                            }
                            if (state.backtracking == 0) {
                                COMMA572_tree = (XQDTCommonTree)adaptor.create(COMMA572);
                                adaptor.addChild(root_0, COMMA572_tree);
                            }
                            pushFollow(FOLLOW_p_SequenceType_in_p_TypedFunctionTest10533);
                            p_SequenceType573 = p_SequenceType();

                            state._fsp--;
                            if (state.failed) {
                                return retval;
                            }
                            if (state.backtracking == 0) {
                                adaptor.addChild(root_0, p_SequenceType573.getTree());
                            }

                        }
                        break;

                        default:
                            break loop174;
                        }
                    } while (true);

                }
                    break;

                }

                RPAREN574 = (CommonToken)match(input, RPAREN, FOLLOW_RPAREN_in_p_TypedFunctionTest10539);
                if (state.failed) {
                    return retval;
                }
                if (state.backtracking == 0) {
                    RPAREN574_tree = (XQDTCommonTree)adaptor.create(RPAREN574);
                    adaptor.addChild(root_0, RPAREN574_tree);
                }
                AS575 = (CommonToken)match(input, AS, FOLLOW_AS_in_p_TypedFunctionTest10541);
                if (state.failed) {
                    return retval;
                }
                if (state.backtracking == 0) {
                    AS575_tree = (XQDTCommonTree)adaptor.create(AS575);
                    adaptor.addChild(root_0, AS575_tree);
                }
                pushFollow(FOLLOW_p_SequenceType_in_p_TypedFunctionTest10543);
                p_SequenceType576 = p_SequenceType();

                state._fsp--;
                if (state.failed) {
                    return retval;
                }
                if (state.backtracking == 0) {
                    adaptor.addChild(root_0, p_SequenceType576.getTree());
                }

            }

            retval.stop = input.LT(-1);

            if (state.backtracking == 0) {

                retval.tree = (XQDTCommonTree)adaptor.rulePostProcessing(root_0);
                adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        } catch (RecognitionException re) {
            reportError(re);
            recover(input, re);
            retval.tree = (XQDTCommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        } finally {
        }
        return retval;
    }

    // $ANTLR end "p_TypedFunctionTest"

    public static class p_ParenthesizedItemType_return extends ParserRuleReturnScope {
        XQDTCommonTree tree;

        public Object getTree() {
            return tree;
        }
    };

    // $ANTLR start "p_ParenthesizedItemType"
    // XQueryParser.g:1278:1: p_ParenthesizedItemType : LPAREN p_ItemType RPAREN ;
    public final XQueryParser.p_ParenthesizedItemType_return p_ParenthesizedItemType() throws RecognitionException {
        XQueryParser.p_ParenthesizedItemType_return retval = new XQueryParser.p_ParenthesizedItemType_return();
        retval.start = input.LT(1);

        XQDTCommonTree root_0 = null;

        CommonToken LPAREN577 = null;
        CommonToken RPAREN579 = null;
        XQueryParser.p_ItemType_return p_ItemType578 = null;

        XQDTCommonTree LPAREN577_tree = null;
        XQDTCommonTree RPAREN579_tree = null;

        try {
            // XQueryParser.g:1279:9: ( LPAREN p_ItemType RPAREN )
            // XQueryParser.g:1279:11: LPAREN p_ItemType RPAREN
            {
                root_0 = (XQDTCommonTree)adaptor.nil();

                LPAREN577 = (CommonToken)match(input, LPAREN, FOLLOW_LPAREN_in_p_ParenthesizedItemType10569);
                if (state.failed) {
                    return retval;
                }
                if (state.backtracking == 0) {
                    LPAREN577_tree = (XQDTCommonTree)adaptor.create(LPAREN577);
                    adaptor.addChild(root_0, LPAREN577_tree);
                }
                pushFollow(FOLLOW_p_ItemType_in_p_ParenthesizedItemType10571);
                p_ItemType578 = p_ItemType();

                state._fsp--;
                if (state.failed) {
                    return retval;
                }
                if (state.backtracking == 0) {
                    adaptor.addChild(root_0, p_ItemType578.getTree());
                }
                RPAREN579 = (CommonToken)match(input, RPAREN, FOLLOW_RPAREN_in_p_ParenthesizedItemType10573);
                if (state.failed) {
                    return retval;
                }
                if (state.backtracking == 0) {
                    RPAREN579_tree = (XQDTCommonTree)adaptor.create(RPAREN579);
                    adaptor.addChild(root_0, RPAREN579_tree);
                }

            }

            retval.stop = input.LT(-1);

            if (state.backtracking == 0) {

                retval.tree = (XQDTCommonTree)adaptor.rulePostProcessing(root_0);
                adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        } catch (RecognitionException re) {
            reportError(re);
            recover(input, re);
            retval.tree = (XQDTCommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        } finally {
        }
        return retval;
    }

    // $ANTLR end "p_ParenthesizedItemType"

    public static class p_StringLiteral_return extends ParserRuleReturnScope {
        XQDTCommonTree tree;

        public Object getTree() {
            return tree;
        }
    };

    // $ANTLR start "p_StringLiteral"
    // XQueryParser.g:1308:1: p_StringLiteral : ( QUOT pg_QuotStringLiteralContent QUOT -> ^( StringLiteral ( pg_QuotStringLiteralContent )* ) | APOS pg_AposStringLiteralContent APOS -> ^( StringLiteral ( pg_AposStringLiteralContent )* ) );
    public final XQueryParser.p_StringLiteral_return p_StringLiteral() throws RecognitionException {
        XQueryParser.p_StringLiteral_return retval = new XQueryParser.p_StringLiteral_return();
        retval.start = input.LT(1);

        XQDTCommonTree root_0 = null;

        CommonToken QUOT580 = null;
        CommonToken QUOT582 = null;
        CommonToken APOS583 = null;
        CommonToken APOS585 = null;
        XQueryParser.pg_QuotStringLiteralContent_return pg_QuotStringLiteralContent581 = null;

        XQueryParser.pg_AposStringLiteralContent_return pg_AposStringLiteralContent584 = null;

        XQDTCommonTree QUOT580_tree = null;
        XQDTCommonTree QUOT582_tree = null;
        XQDTCommonTree APOS583_tree = null;
        XQDTCommonTree APOS585_tree = null;
        RewriteRuleTokenStream stream_APOS = new RewriteRuleTokenStream(adaptor, "token APOS");
        RewriteRuleTokenStream stream_QUOT = new RewriteRuleTokenStream(adaptor, "token QUOT");
        RewriteRuleSubtreeStream stream_pg_QuotStringLiteralContent = new RewriteRuleSubtreeStream(adaptor,
                "rule pg_QuotStringLiteralContent");
        RewriteRuleSubtreeStream stream_pg_AposStringLiteralContent = new RewriteRuleSubtreeStream(adaptor,
                "rule pg_AposStringLiteralContent");
        try {
            // XQueryParser.g:1309:9: ( QUOT pg_QuotStringLiteralContent QUOT -> ^( StringLiteral ( pg_QuotStringLiteralContent )* ) | APOS pg_AposStringLiteralContent APOS -> ^( StringLiteral ( pg_AposStringLiteralContent )* ) )
            int alt176 = 2;
            int LA176_0 = input.LA(1);

            if ((LA176_0 == QUOT)) {
                alt176 = 1;
            } else if ((LA176_0 == APOS)) {
                alt176 = 2;
            } else {
                if (state.backtracking > 0) {
                    state.failed = true;
                    return retval;
                }
                NoViableAltException nvae = new NoViableAltException("", 176, 0, input);

                throw nvae;
            }
            switch (alt176) {
            case 1:
                // XQueryParser.g:1309:11: QUOT pg_QuotStringLiteralContent QUOT
            {
                QUOT580 = (CommonToken)match(input, QUOT, FOLLOW_QUOT_in_p_StringLiteral10624);
                if (state.failed) {
                    return retval;
                }
                if (state.backtracking == 0) {
                    stream_QUOT.add(QUOT580);
                }

                if (state.backtracking == 0) {
                    pushStringLexer(false);
                }
                pushFollow(FOLLOW_pg_QuotStringLiteralContent_in_p_StringLiteral10628);
                pg_QuotStringLiteralContent581 = pg_QuotStringLiteralContent();

                state._fsp--;
                if (state.failed) {
                    return retval;
                }
                if (state.backtracking == 0) {
                    stream_pg_QuotStringLiteralContent.add(pg_QuotStringLiteralContent581.getTree());
                }
                QUOT582 = (CommonToken)match(input, QUOT, FOLLOW_QUOT_in_p_StringLiteral10630);
                if (state.failed) {
                    return retval;
                }
                if (state.backtracking == 0) {
                    stream_QUOT.add(QUOT582);
                }

                if (state.backtracking == 0) {
                    popLexer();
                }

                // AST REWRITE
                // elements: pg_QuotStringLiteralContent
                // token labels:
                // rule labels: retval
                // token list labels:
                // rule list labels:
                // wildcard labels:
                if (state.backtracking == 0) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval = new RewriteRuleSubtreeStream(adaptor, "rule retval",
                            retval != null ? retval.tree : null);

                    root_0 = (XQDTCommonTree)adaptor.nil();
                    // 1310:17: -> ^( StringLiteral ( pg_QuotStringLiteralContent )* )
                    {
                        // XQueryParser.g:1310:20: ^( StringLiteral ( pg_QuotStringLiteralContent )* )
                        {
                            XQDTCommonTree root_1 = (XQDTCommonTree)adaptor.nil();
                            root_1 = (XQDTCommonTree)adaptor.becomeRoot(adaptor.create(StringLiteral, "StringLiteral"),
                                    root_1);

                            // XQueryParser.g:1310:36: ( pg_QuotStringLiteralContent )*
                            while (stream_pg_QuotStringLiteralContent.hasNext()) {
                                adaptor.addChild(root_1, stream_pg_QuotStringLiteralContent.nextTree());

                            }
                            stream_pg_QuotStringLiteralContent.reset();

                            adaptor.addChild(root_0, root_1);
                        }

                    }

                    retval.tree = root_0;
                }
            }
            break;
            case 2:
                // XQueryParser.g:1311:11: APOS pg_AposStringLiteralContent APOS
            {
                APOS583 = (CommonToken)match(input, APOS, FOLLOW_APOS_in_p_StringLiteral10669);
                if (state.failed) {
                    return retval;
                }
                if (state.backtracking == 0) {
                    stream_APOS.add(APOS583);
                }

                if (state.backtracking == 0) {
                    pushStringLexer(true);
                }
                pushFollow(FOLLOW_pg_AposStringLiteralContent_in_p_StringLiteral10673);
                pg_AposStringLiteralContent584 = pg_AposStringLiteralContent();

                state._fsp--;
                if (state.failed) {
                    return retval;
                }
                if (state.backtracking == 0) {
                    stream_pg_AposStringLiteralContent.add(pg_AposStringLiteralContent584.getTree());
                }
                APOS585 = (CommonToken)match(input, APOS, FOLLOW_APOS_in_p_StringLiteral10675);
                if (state.failed) {
                    return retval;
                }
                if (state.backtracking == 0) {
                    stream_APOS.add(APOS585);
                }

                if (state.backtracking == 0) {
                    popLexer();
                }

                // AST REWRITE
                // elements: pg_AposStringLiteralContent
                // token labels:
                // rule labels: retval
                // token list labels:
                // rule list labels:
                // wildcard labels:
                if (state.backtracking == 0) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval = new RewriteRuleSubtreeStream(adaptor, "rule retval",
                            retval != null ? retval.tree : null);

                    root_0 = (XQDTCommonTree)adaptor.nil();
                    // 1312:17: -> ^( StringLiteral ( pg_AposStringLiteralContent )* )
                    {
                        // XQueryParser.g:1312:20: ^( StringLiteral ( pg_AposStringLiteralContent )* )
                        {
                            XQDTCommonTree root_1 = (XQDTCommonTree)adaptor.nil();
                            root_1 = (XQDTCommonTree)adaptor.becomeRoot(adaptor.create(StringLiteral, "StringLiteral"),
                                    root_1);

                            // XQueryParser.g:1312:36: ( pg_AposStringLiteralContent )*
                            while (stream_pg_AposStringLiteralContent.hasNext()) {
                                adaptor.addChild(root_1, stream_pg_AposStringLiteralContent.nextTree());

                            }
                            stream_pg_AposStringLiteralContent.reset();

                            adaptor.addChild(root_0, root_1);
                        }

                    }

                    retval.tree = root_0;
                }
            }
            break;

            }
            retval.stop = input.LT(-1);

            if (state.backtracking == 0) {

                retval.tree = (XQDTCommonTree)adaptor.rulePostProcessing(root_0);
                adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        } catch (RecognitionException re) {
            reportError(re);
            recover(input, re);
            retval.tree = (XQDTCommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        } finally {
        }
        return retval;
    }

    // $ANTLR end "p_StringLiteral"

    public static class pg_QuotStringLiteralContent_return extends ParserRuleReturnScope {
        XQDTCommonTree tree;

        public Object getTree() {
            return tree;
        }
    };

    // $ANTLR start "pg_QuotStringLiteralContent"
    // XQueryParser.g:1318:1: pg_QuotStringLiteralContent : ( ESCAPE_QUOT | L_CharRef | L_PredefinedEntityRef | ~ ( QUOT | AMP ) )* ;
    public final XQueryParser.pg_QuotStringLiteralContent_return pg_QuotStringLiteralContent()
            throws RecognitionException {
        XQueryParser.pg_QuotStringLiteralContent_return retval = new XQueryParser.pg_QuotStringLiteralContent_return();
        retval.start = input.LT(1);

        XQDTCommonTree root_0 = null;

        CommonToken set586 = null;

        XQDTCommonTree set586_tree = null;

        try {
            // XQueryParser.g:1319:9: ( ( ESCAPE_QUOT | L_CharRef | L_PredefinedEntityRef | ~ ( QUOT | AMP ) )* )
            // XQueryParser.g:1319:11: ( ESCAPE_QUOT | L_CharRef | L_PredefinedEntityRef | ~ ( QUOT | AMP ) )*
            {
                root_0 = (XQDTCommonTree)adaptor.nil();

                // XQueryParser.g:1319:11: ( ESCAPE_QUOT | L_CharRef | L_PredefinedEntityRef | ~ ( QUOT | AMP ) )*
                loop177: do {
                    int alt177 = 2;
                    int LA177_0 = input.LA(1);

                    if (((LA177_0 >= L_QuotAttrContentChar && LA177_0 <= HASH) || (LA177_0 >= COMMA && LA177_0 <= APOS) || (LA177_0 >= NCNameStartChar && LA177_0 <= EXPLICITLY))) {
                        alt177 = 1;
                    }

                    switch (alt177) {
                    case 1:
                        // XQueryParser.g:
                    {
                        set586 = (CommonToken)input.LT(1);
                        if ((input.LA(1) >= L_QuotAttrContentChar && input.LA(1) <= HASH)
                                || (input.LA(1) >= COMMA && input.LA(1) <= APOS)
                                || (input.LA(1) >= NCNameStartChar && input.LA(1) <= EXPLICITLY)) {
                            input.consume();
                            if (state.backtracking == 0) {
                                adaptor.addChild(root_0, adaptor.create(set586));
                            }
                            state.errorRecovery = false;
                            state.failed = false;
                        } else {
                            if (state.backtracking > 0) {
                                state.failed = true;
                                return retval;
                            }
                            MismatchedSetException mse = new MismatchedSetException(null, input);
                            throw mse;
                        }

                    }
                    break;

                    default:
                        break loop177;
                    }
                } while (true);

            }

            retval.stop = input.LT(-1);

            if (state.backtracking == 0) {

                retval.tree = (XQDTCommonTree)adaptor.rulePostProcessing(root_0);
                adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        } catch (RecognitionException re) {
            reportError(re);
            recover(input, re);
            retval.tree = (XQDTCommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        } finally {
        }
        return retval;
    }

    // $ANTLR end "pg_QuotStringLiteralContent"

    public static class pg_AposStringLiteralContent_return extends ParserRuleReturnScope {
        XQDTCommonTree tree;

        public Object getTree() {
            return tree;
        }
    };

    // $ANTLR start "pg_AposStringLiteralContent"
    // XQueryParser.g:1326:1: pg_AposStringLiteralContent : ( ESCAPE_APOS | L_CharRef | L_PredefinedEntityRef | ~ ( APOS | AMP ) )* ;
    public final XQueryParser.pg_AposStringLiteralContent_return pg_AposStringLiteralContent()
            throws RecognitionException {
        XQueryParser.pg_AposStringLiteralContent_return retval = new XQueryParser.pg_AposStringLiteralContent_return();
        retval.start = input.LT(1);

        XQDTCommonTree root_0 = null;

        CommonToken set587 = null;

        XQDTCommonTree set587_tree = null;

        try {
            // XQueryParser.g:1327:9: ( ( ESCAPE_APOS | L_CharRef | L_PredefinedEntityRef | ~ ( APOS | AMP ) )* )
            // XQueryParser.g:1327:11: ( ESCAPE_APOS | L_CharRef | L_PredefinedEntityRef | ~ ( APOS | AMP ) )*
            {
                root_0 = (XQDTCommonTree)adaptor.nil();

                // XQueryParser.g:1327:11: ( ESCAPE_APOS | L_CharRef | L_PredefinedEntityRef | ~ ( APOS | AMP ) )*
                loop178: do {
                    int alt178 = 2;
                    int LA178_0 = input.LA(1);

                    if (((LA178_0 >= L_QuotAttrContentChar && LA178_0 <= HASH)
                            || (LA178_0 >= COMMA && LA178_0 <= CHARREF_HEX) || (LA178_0 >= QUOT && LA178_0 <= EXPLICITLY))) {
                        alt178 = 1;
                    }

                    switch (alt178) {
                    case 1:
                        // XQueryParser.g:
                    {
                        set587 = (CommonToken)input.LT(1);
                        if ((input.LA(1) >= L_QuotAttrContentChar && input.LA(1) <= HASH)
                                || (input.LA(1) >= COMMA && input.LA(1) <= CHARREF_HEX)
                                || (input.LA(1) >= QUOT && input.LA(1) <= EXPLICITLY)) {
                            input.consume();
                            if (state.backtracking == 0) {
                                adaptor.addChild(root_0, adaptor.create(set587));
                            }
                            state.errorRecovery = false;
                            state.failed = false;
                        } else {
                            if (state.backtracking > 0) {
                                state.failed = true;
                                return retval;
                            }
                            MismatchedSetException mse = new MismatchedSetException(null, input);
                            throw mse;
                        }

                    }
                    break;

                    default:
                        break loop178;
                    }
                } while (true);

            }

            retval.stop = input.LT(-1);

            if (state.backtracking == 0) {

                retval.tree = (XQDTCommonTree)adaptor.rulePostProcessing(root_0);
                adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        } catch (RecognitionException re) {
            reportError(re);
            recover(input, re);
            retval.tree = (XQDTCommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        } finally {
        }
        return retval;
    }

    // $ANTLR end "pg_AposStringLiteralContent"

    public static class p_ElementContentChar_return extends ParserRuleReturnScope {
        XQDTCommonTree tree;

        public Object getTree() {
            return tree;
        }
    };

    // $ANTLR start "p_ElementContentChar"
    // XQueryParser.g:1341:1: p_ElementContentChar : L_ElementContentChar ;
    public final XQueryParser.p_ElementContentChar_return p_ElementContentChar() throws RecognitionException {
        XQueryParser.p_ElementContentChar_return retval = new XQueryParser.p_ElementContentChar_return();
        retval.start = input.LT(1);

        XQDTCommonTree root_0 = null;

        CommonToken L_ElementContentChar588 = null;

        XQDTCommonTree L_ElementContentChar588_tree = null;

        try {
            // XQueryParser.g:1342:9: ( L_ElementContentChar )
            // XQueryParser.g:1342:11: L_ElementContentChar
            {
                root_0 = (XQDTCommonTree)adaptor.nil();

                L_ElementContentChar588 = (CommonToken)match(input, L_ElementContentChar,
                        FOLLOW_L_ElementContentChar_in_p_ElementContentChar10839);
                if (state.failed) {
                    return retval;
                }
                if (state.backtracking == 0) {
                    L_ElementContentChar588_tree = (XQDTCommonTree)adaptor.create(L_ElementContentChar588);
                    adaptor.addChild(root_0, L_ElementContentChar588_tree);
                }

            }

            retval.stop = input.LT(-1);

            if (state.backtracking == 0) {

                retval.tree = (XQDTCommonTree)adaptor.rulePostProcessing(root_0);
                adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        } catch (RecognitionException re) {
            reportError(re);
            recover(input, re);
            retval.tree = (XQDTCommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        } finally {
        }
        return retval;
    }

    // $ANTLR end "p_ElementContentChar"

    public static class p_QuotAttrContentChar_return extends ParserRuleReturnScope {
        XQDTCommonTree tree;

        public Object getTree() {
            return tree;
        }
    };

    // $ANTLR start "p_QuotAttrContentChar"
    // XQueryParser.g:1346:1: p_QuotAttrContentChar : L_QuotAttrContentChar -> ^( AttributeValueChar L_QuotAttrContentChar ) ;
    public final XQueryParser.p_QuotAttrContentChar_return p_QuotAttrContentChar() throws RecognitionException {
        XQueryParser.p_QuotAttrContentChar_return retval = new XQueryParser.p_QuotAttrContentChar_return();
        retval.start = input.LT(1);

        XQDTCommonTree root_0 = null;

        CommonToken L_QuotAttrContentChar589 = null;

        XQDTCommonTree L_QuotAttrContentChar589_tree = null;
        RewriteRuleTokenStream stream_L_QuotAttrContentChar = new RewriteRuleTokenStream(adaptor,
                "token L_QuotAttrContentChar");

        try {
            // XQueryParser.g:1347:9: ( L_QuotAttrContentChar -> ^( AttributeValueChar L_QuotAttrContentChar ) )
            // XQueryParser.g:1347:11: L_QuotAttrContentChar
            {
                L_QuotAttrContentChar589 = (CommonToken)match(input, L_QuotAttrContentChar,
                        FOLLOW_L_QuotAttrContentChar_in_p_QuotAttrContentChar10865);
                if (state.failed) {
                    return retval;
                }
                if (state.backtracking == 0) {
                    stream_L_QuotAttrContentChar.add(L_QuotAttrContentChar589);
                }

                // AST REWRITE
                // elements: L_QuotAttrContentChar
                // token labels:
                // rule labels: retval
                // token list labels:
                // rule list labels:
                // wildcard labels:
                if (state.backtracking == 0) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval = new RewriteRuleSubtreeStream(adaptor, "rule retval",
                            retval != null ? retval.tree : null);

                    root_0 = (XQDTCommonTree)adaptor.nil();
                    // 1348:17: -> ^( AttributeValueChar L_QuotAttrContentChar )
                    {
                        // XQueryParser.g:1348:20: ^( AttributeValueChar L_QuotAttrContentChar )
                        {
                            XQDTCommonTree root_1 = (XQDTCommonTree)adaptor.nil();
                            root_1 = (XQDTCommonTree)adaptor.becomeRoot(
                                    adaptor.create(AttributeValueChar, "AttributeValueChar"), root_1);

                            adaptor.addChild(root_1, stream_L_QuotAttrContentChar.nextNode());

                            adaptor.addChild(root_0, root_1);
                        }

                    }

                    retval.tree = root_0;
                }
            }

            retval.stop = input.LT(-1);

            if (state.backtracking == 0) {

                retval.tree = (XQDTCommonTree)adaptor.rulePostProcessing(root_0);
                adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        } catch (RecognitionException re) {
            reportError(re);
            recover(input, re);
            retval.tree = (XQDTCommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        } finally {
        }
        return retval;
    }

    // $ANTLR end "p_QuotAttrContentChar"

    public static class p_AposAttrContentChar_return extends ParserRuleReturnScope {
        XQDTCommonTree tree;

        public Object getTree() {
            return tree;
        }
    };

    // $ANTLR start "p_AposAttrContentChar"
    // XQueryParser.g:1352:1: p_AposAttrContentChar : L_AposAttrContentChar -> ^( AttributeValueChar L_AposAttrContentChar ) ;
    public final XQueryParser.p_AposAttrContentChar_return p_AposAttrContentChar() throws RecognitionException {
        XQueryParser.p_AposAttrContentChar_return retval = new XQueryParser.p_AposAttrContentChar_return();
        retval.start = input.LT(1);

        XQDTCommonTree root_0 = null;

        CommonToken L_AposAttrContentChar590 = null;

        XQDTCommonTree L_AposAttrContentChar590_tree = null;
        RewriteRuleTokenStream stream_L_AposAttrContentChar = new RewriteRuleTokenStream(adaptor,
                "token L_AposAttrContentChar");

        try {
            // XQueryParser.g:1353:9: ( L_AposAttrContentChar -> ^( AttributeValueChar L_AposAttrContentChar ) )
            // XQueryParser.g:1353:11: L_AposAttrContentChar
            {
                L_AposAttrContentChar590 = (CommonToken)match(input, L_AposAttrContentChar,
                        FOLLOW_L_AposAttrContentChar_in_p_AposAttrContentChar10915);
                if (state.failed) {
                    return retval;
                }
                if (state.backtracking == 0) {
                    stream_L_AposAttrContentChar.add(L_AposAttrContentChar590);
                }

                // AST REWRITE
                // elements: L_AposAttrContentChar
                // token labels:
                // rule labels: retval
                // token list labels:
                // rule list labels:
                // wildcard labels:
                if (state.backtracking == 0) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval = new RewriteRuleSubtreeStream(adaptor, "rule retval",
                            retval != null ? retval.tree : null);

                    root_0 = (XQDTCommonTree)adaptor.nil();
                    // 1354:17: -> ^( AttributeValueChar L_AposAttrContentChar )
                    {
                        // XQueryParser.g:1354:20: ^( AttributeValueChar L_AposAttrContentChar )
                        {
                            XQDTCommonTree root_1 = (XQDTCommonTree)adaptor.nil();
                            root_1 = (XQDTCommonTree)adaptor.becomeRoot(
                                    adaptor.create(AttributeValueChar, "AttributeValueChar"), root_1);

                            adaptor.addChild(root_1, stream_L_AposAttrContentChar.nextNode());

                            adaptor.addChild(root_0, root_1);
                        }

                    }

                    retval.tree = root_0;
                }
            }

            retval.stop = input.LT(-1);

            if (state.backtracking == 0) {

                retval.tree = (XQDTCommonTree)adaptor.rulePostProcessing(root_0);
                adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        } catch (RecognitionException re) {
            reportError(re);
            recover(input, re);
            retval.tree = (XQDTCommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        } finally {
        }
        return retval;
    }

    // $ANTLR end "p_AposAttrContentChar"

    public static class p_QName_return extends ParserRuleReturnScope {
        XQDTCommonTree tree;

        public Object getTree() {
            return tree;
        }
    };

    // $ANTLR start "p_QName"
    // XQueryParser.g:1372:1: p_QName : ( pg_QName | p_NCName -> ^( QName p_NCName ) );
    public final XQueryParser.p_QName_return p_QName() throws RecognitionException {
        XQueryParser.p_QName_return retval = new XQueryParser.p_QName_return();
        retval.start = input.LT(1);

        XQDTCommonTree root_0 = null;

        XQueryParser.pg_QName_return pg_QName591 = null;

        XQueryParser.p_NCName_return p_NCName592 = null;

        RewriteRuleSubtreeStream stream_p_NCName = new RewriteRuleSubtreeStream(adaptor, "rule p_NCName");
        setWsExplicit(true);
        try {
            // XQueryParser.g:1374:9: ( pg_QName | p_NCName -> ^( QName p_NCName ) )
            int alt179 = 2;
            int LA179_0 = input.LA(1);

            if (((LA179_0 >= ANCESTOR && LA179_0 <= SKIP) || (LA179_0 >= VALUE && LA179_0 <= QUOT_ER)
                    || LA179_0 == L_NCName || LA179_0 == EXPLICITLY)) {
                int LA179_1 = input.LA(2);

                if ((LA179_1 == COLON)) {
                    alt179 = 1;
                } else if ((LA179_1 == EOF || (LA179_1 >= AND && LA179_1 <= AT)
                        || (LA179_1 >= BY && LA179_1 <= CASTABLE) || LA179_1 == COLLATION || LA179_1 == DEFAULT
                        || (LA179_1 >= DESCENDING && LA179_1 <= DIV) || LA179_1 == EMPTY || LA179_1 == EQ
                        || (LA179_1 >= EXCEPT && LA179_1 <= EXTERNAL) || (LA179_1 >= FOR && LA179_1 <= GE)
                        || (LA179_1 >= GT && LA179_1 <= IDIV) || LA179_1 == IN
                        || (LA179_1 >= INSTANCE && LA179_1 <= IS) || LA179_1 == LE
                        || (LA179_1 >= LET && LA179_1 <= MOD) || LA179_1 == NE || LA179_1 == NODE
                        || (LA179_1 >= OR && LA179_1 <= ORDER) || (LA179_1 >= RETURN && LA179_1 <= SATISFIES)
                        || LA179_1 == STABLE || (LA179_1 >= TO && LA179_1 <= TREAT) || LA179_1 == UNION
                        || LA179_1 == VARIABLE || LA179_1 == WHERE || LA179_1 == ALLOWING || LA179_1 == COUNT
                        || (LA179_1 >= DECIMAL_SEPARATOR && LA179_1 <= MINUS_SIGN)
                        || (LA179_1 >= NAN && LA179_1 <= PREVIOUS) || LA179_1 == START || LA179_1 == WHEN
                        || (LA179_1 >= ZERO_DIGIT && LA179_1 <= BEFORE) || LA179_1 == INTO || LA179_1 == MODIFY
                        || LA179_1 == UPDATING || LA179_1 == WITH || LA179_1 == CONTAINS || LA179_1 == PARAGRAPHS
                        || LA179_1 == SCORE || LA179_1 == SENTENCES || LA179_1 == TIMES || LA179_1 == WORDS
                        || (LA179_1 >= CHECK && LA179_1 <= COLLECTION) || (LA179_1 >= FOREACH && LA179_1 <= ON)
                        || (LA179_1 >= CONCAT && LA179_1 <= ANN_PERCENT)
                        || (LA179_1 >= COMMA && LA179_1 <= SLASH_SLASH) || LA179_1 == EMPTY_CLOSE_TAG
                        || (LA179_1 >= SEMICOLON && LA179_1 <= VBAR) || (LA179_1 >= APOS && LA179_1 <= QUOT) || LA179_1 == S)) {
                    alt179 = 2;
                } else {
                    if (state.backtracking > 0) {
                        state.failed = true;
                        return retval;
                    }
                    NoViableAltException nvae = new NoViableAltException("", 179, 1, input);

                    throw nvae;
                }
            } else {
                if (state.backtracking > 0) {
                    state.failed = true;
                    return retval;
                }
                NoViableAltException nvae = new NoViableAltException("", 179, 0, input);

                throw nvae;
            }
            switch (alt179) {
            case 1:
                // XQueryParser.g:1374:11: pg_QName
            {
                root_0 = (XQDTCommonTree)adaptor.nil();

                pushFollow(FOLLOW_pg_QName_in_p_QName11001);
                pg_QName591 = pg_QName();

                state._fsp--;
                if (state.failed) {
                    return retval;
                }
                if (state.backtracking == 0) {
                    adaptor.addChild(root_0, pg_QName591.getTree());
                }

            }
            break;
            case 2:
                // XQueryParser.g:1375:11: p_NCName
            {
                pushFollow(FOLLOW_p_NCName_in_p_QName11013);
                p_NCName592 = p_NCName();

                state._fsp--;
                if (state.failed) {
                    return retval;
                }
                if (state.backtracking == 0) {
                    stream_p_NCName.add(p_NCName592.getTree());
                }

                // AST REWRITE
                // elements: p_NCName
                // token labels:
                // rule labels: retval
                // token list labels:
                // rule list labels:
                // wildcard labels:
                if (state.backtracking == 0) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval = new RewriteRuleSubtreeStream(adaptor, "rule retval",
                            retval != null ? retval.tree : null);

                    root_0 = (XQDTCommonTree)adaptor.nil();
                    // 1376:17: -> ^( QName p_NCName )
                    {
                        // XQueryParser.g:1376:20: ^( QName p_NCName )
                        {
                            XQDTCommonTree root_1 = (XQDTCommonTree)adaptor.nil();
                            root_1 = (XQDTCommonTree)adaptor.becomeRoot(adaptor.create(QName, "QName"), root_1);

                            adaptor.addChild(root_1, stream_p_NCName.nextTree());

                            adaptor.addChild(root_0, root_1);
                        }

                    }

                    retval.tree = root_0;
                }
            }
            break;

            }
            retval.stop = input.LT(-1);

            if (state.backtracking == 0) {

                retval.tree = (XQDTCommonTree)adaptor.rulePostProcessing(root_0);
                adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        } catch (RecognitionException re) {
            reportError(re);
            recover(input, re);
            retval.tree = (XQDTCommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        } finally {
            setWsExplicit(false);
        }
        return retval;
    }

    // $ANTLR end "p_QName"

    public static class pg_FQName_return extends ParserRuleReturnScope {
        XQDTCommonTree tree;

        public Object getTree() {
            return tree;
        }
    };

    // $ANTLR start "pg_FQName"
    // XQueryParser.g:1380:1: pg_FQName : ( pg_QName | p_FNCName -> ^( QName p_FNCName ) );
    public final XQueryParser.pg_FQName_return pg_FQName() throws RecognitionException {
        XQueryParser.pg_FQName_return retval = new XQueryParser.pg_FQName_return();
        retval.start = input.LT(1);

        XQDTCommonTree root_0 = null;

        XQueryParser.pg_QName_return pg_QName593 = null;

        XQueryParser.p_FNCName_return p_FNCName594 = null;

        RewriteRuleSubtreeStream stream_p_FNCName = new RewriteRuleSubtreeStream(adaptor, "rule p_FNCName");
        try {
            // XQueryParser.g:1381:9: ( pg_QName | p_FNCName -> ^( QName p_FNCName ) )
            int alt180 = 2;
            switch (input.LA(1)) {
            case ANCESTOR:
            case ANCESTOR_OR_SELF:
            case AND:
            case AS:
            case ASCENDING:
            case AT:
            case BASE_URI:
            case BOUNDARY_SPACE:
            case BY:
            case CASE:
            case CAST:
            case CASTABLE:
            case CHILD:
            case COLLATION:
            case CONSTRUCTION:
            case COPY_NAMESPACES:
            case DECLARE:
            case DEFAULT:
            case DESCENDANT:
            case DESCENDANT_OR_SELF:
            case DESCENDING:
            case DIV:
            case DOCUMENT:
            case ELSE:
            case EMPTY:
            case ENCODING:
            case EQ:
            case EVERY:
            case EXCEPT:
            case EXTERNAL:
            case FOLLOWING:
            case FOLLOWING_SIBLING:
            case FOR:
            case FUNCTION:
            case GE:
            case GREATEST:
            case GT:
            case IDIV:
            case IMPORT:
            case IN:
            case INHERIT:
            case INSTANCE:
            case INTERSECT:
            case IS:
            case LAX:
            case LE:
            case LEAST:
            case LET:
            case LT:
            case MOD:
            case MODULE:
            case NAMESPACE:
            case NE:
            case NO_INHERIT:
            case NO_PRESERVE:
            case OF:
            case OPTION:
            case OR:
            case ORDER:
            case ORDERED:
            case ORDERING:
            case PARENT:
            case PRECEDING:
            case PRECEDING_SIBLING:
            case PRESERVE:
            case RETURN:
            case SATISFIES:
            case SCHEMA:
            case SELF:
            case SOME:
            case STABLE:
            case STRICT:
            case STRIP:
            case THEN:
            case TO:
            case TREAT:
            case UNION:
            case UNORDERED:
            case VALIDATE:
            case VARIABLE:
            case VERSION:
            case WHERE:
            case XQUERY:
            case ALLOWING:
            case CATCH:
            case CONTEXT:
            case COUNT:
            case DECIMAL_FORMAT:
            case DECIMAL_SEPARATOR:
            case DIGIT:
            case END:
            case GROUP:
            case GROUPING_SEPARATOR:
            case INFINITY:
            case MINUS_SIGN:
            case NAN:
            case NEXT:
            case ONLY:
            case PATTERN_SEPARATOR:
            case PERCENT:
            case PER_MILLE:
            case PREVIOUS:
            case SLIDING:
            case START:
            case TRY:
            case TUMBLING:
            case TYPE:
            case WHEN:
            case WINDOW:
            case ZERO_DIGIT:
            case AFTER:
            case BEFORE:
            case COPY:
            case DELETE:
            case FIRST:
            case INSERT:
            case INTO:
            case LAST:
            case MODIFY:
            case NODES:
            case RENAME:
            case REPLACE:
            case REVALIDATION:
            case SKIP:
            case VALUE:
            case WITH:
            case ALL:
            case ANY:
            case CONTAINS:
            case CONTENT:
            case DIACRITICS:
            case DIFFERENT:
            case DISTANCE:
            case ENTIRE:
            case EXACTLY:
            case FROM:
            case FT_OPTION:
            case FTAND:
            case FTNOT:
            case FTOR:
            case INSENSITIVE:
            case LANGUAGE:
            case LEVELS:
            case LOWERCASE:
            case MOST:
            case NO:
            case NOT:
            case OCCURS:
            case PARAGRAPH:
            case PARAGRAPHS:
            case PHRASE:
            case RELATIONSHIP:
            case SAME:
            case SCORE:
            case SENSITIVE:
            case SENTENCE:
            case SENTENCES:
            case STEMMING:
            case STOP:
            case THESAURUS:
            case TIMES:
            case UPPERCASE:
            case USING:
            case WEIGHT:
            case WILDCARDS:
            case WITHOUT:
            case WORD:
            case WORDS:
            case BREAK:
            case CONTINUE:
            case EXIT:
            case LOOP:
            case RETURNING:
            case CHECK:
            case COLLECTION:
            case CONSTRAINT:
            case FOREACH:
            case FOREIGN:
            case INDEX:
            case INTEGRITY:
            case KEY:
            case ON:
            case UNIQUE:
            case BINARY:
            case AMP_ER:
            case APOS_ER:
            case QUOT_ER:
            case L_NCName:
            case EXPLICITLY: {
                int LA180_1 = input.LA(2);

                if ((LA180_1 == COLON)) {
                    alt180 = 1;
                } else if ((LA180_1 == LPAREN)) {
                    alt180 = 2;
                } else {
                    if (state.backtracking > 0) {
                        state.failed = true;
                        return retval;
                    }
                    NoViableAltException nvae = new NoViableAltException("", 180, 1, input);

                    throw nvae;
                }
            }
                break;
            case ATTRIBUTE:
            case COMMENT:
            case DOCUMENT_NODE:
            case ELEMENT:
            case EMPTY_SEQUENCE:
            case IF:
            case ITEM:
            case NODE:
            case PROCESSING_INSTRUCTION:
            case SCHEMA_ATTRIBUTE:
            case SCHEMA_ELEMENT:
            case TEXT:
            case TYPESWITCH:
            case NAMESPACE_NODE:
            case SWITCH:
            case WHILE: {
                alt180 = 1;
            }
                break;
            case UPDATING: {
                alt180 = 2;
            }
                break;
            default:
                if (state.backtracking > 0) {
                    state.failed = true;
                    return retval;
                }
                NoViableAltException nvae = new NoViableAltException("", 180, 0, input);

                throw nvae;
            }

            switch (alt180) {
            case 1:
                // XQueryParser.g:1381:11: pg_QName
            {
                root_0 = (XQDTCommonTree)adaptor.nil();

                pushFollow(FOLLOW_pg_QName_in_pg_FQName11074);
                pg_QName593 = pg_QName();

                state._fsp--;
                if (state.failed) {
                    return retval;
                }
                if (state.backtracking == 0) {
                    adaptor.addChild(root_0, pg_QName593.getTree());
                }

            }
            break;
            case 2:
                // XQueryParser.g:1382:11: p_FNCName
            {
                pushFollow(FOLLOW_p_FNCName_in_pg_FQName11086);
                p_FNCName594 = p_FNCName();

                state._fsp--;
                if (state.failed) {
                    return retval;
                }
                if (state.backtracking == 0) {
                    stream_p_FNCName.add(p_FNCName594.getTree());
                }

                // AST REWRITE
                // elements: p_FNCName
                // token labels:
                // rule labels: retval
                // token list labels:
                // rule list labels:
                // wildcard labels:
                if (state.backtracking == 0) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval = new RewriteRuleSubtreeStream(adaptor, "rule retval",
                            retval != null ? retval.tree : null);

                    root_0 = (XQDTCommonTree)adaptor.nil();
                    // 1383:17: -> ^( QName p_FNCName )
                    {
                        // XQueryParser.g:1383:20: ^( QName p_FNCName )
                        {
                            XQDTCommonTree root_1 = (XQDTCommonTree)adaptor.nil();
                            root_1 = (XQDTCommonTree)adaptor.becomeRoot(adaptor.create(QName, "QName"), root_1);

                            adaptor.addChild(root_1, stream_p_FNCName.nextTree());

                            adaptor.addChild(root_0, root_1);
                        }

                    }

                    retval.tree = root_0;
                }
            }
            break;

            }
            retval.stop = input.LT(-1);

            if (state.backtracking == 0) {

                retval.tree = (XQDTCommonTree)adaptor.rulePostProcessing(root_0);
                adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        } catch (RecognitionException re) {
            reportError(re);
            recover(input, re);
            retval.tree = (XQDTCommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        } finally {
        }
        return retval;
    }

    // $ANTLR end "pg_FQName"

    public static class pg_QName_return extends ParserRuleReturnScope {
        XQDTCommonTree tree;

        public Object getTree() {
            return tree;
        }
    };

    // $ANTLR start "pg_QName"
    // XQueryParser.g:1385:1: pg_QName : nn= p_NCName COLON nl= p_NCName -> ^( QName $nn $nl) ;
    public final XQueryParser.pg_QName_return pg_QName() throws RecognitionException {
        XQueryParser.pg_QName_return retval = new XQueryParser.pg_QName_return();
        retval.start = input.LT(1);

        XQDTCommonTree root_0 = null;

        CommonToken COLON595 = null;
        XQueryParser.p_NCName_return nn = null;

        XQueryParser.p_NCName_return nl = null;

        XQDTCommonTree COLON595_tree = null;
        RewriteRuleTokenStream stream_COLON = new RewriteRuleTokenStream(adaptor, "token COLON");
        RewriteRuleSubtreeStream stream_p_NCName = new RewriteRuleSubtreeStream(adaptor, "rule p_NCName");
        try {
            // XQueryParser.g:1386:9: (nn= p_NCName COLON nl= p_NCName -> ^( QName $nn $nl) )
            // XQueryParser.g:1386:11: nn= p_NCName COLON nl= p_NCName
            {
                pushFollow(FOLLOW_p_NCName_in_pg_QName11130);
                nn = p_NCName();

                state._fsp--;
                if (state.failed) {
                    return retval;
                }
                if (state.backtracking == 0) {
                    stream_p_NCName.add(nn.getTree());
                }
                COLON595 = (CommonToken)match(input, COLON, FOLLOW_COLON_in_pg_QName11132);
                if (state.failed) {
                    return retval;
                }
                if (state.backtracking == 0) {
                    stream_COLON.add(COLON595);
                }

                pushFollow(FOLLOW_p_NCName_in_pg_QName11136);
                nl = p_NCName();

                state._fsp--;
                if (state.failed) {
                    return retval;
                }
                if (state.backtracking == 0) {
                    stream_p_NCName.add(nl.getTree());
                }

                // AST REWRITE
                // elements: nn, nl
                // token labels:
                // rule labels: retval, nn, nl
                // token list labels:
                // rule list labels:
                // wildcard labels:
                if (state.backtracking == 0) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval = new RewriteRuleSubtreeStream(adaptor, "rule retval",
                            retval != null ? retval.tree : null);
                    RewriteRuleSubtreeStream stream_nn = new RewriteRuleSubtreeStream(adaptor, "rule nn",
                            nn != null ? nn.tree : null);
                    RewriteRuleSubtreeStream stream_nl = new RewriteRuleSubtreeStream(adaptor, "rule nl",
                            nl != null ? nl.tree : null);

                    root_0 = (XQDTCommonTree)adaptor.nil();
                    // 1387:17: -> ^( QName $nn $nl)
                    {
                        // XQueryParser.g:1387:20: ^( QName $nn $nl)
                        {
                            XQDTCommonTree root_1 = (XQDTCommonTree)adaptor.nil();
                            root_1 = (XQDTCommonTree)adaptor.becomeRoot(adaptor.create(QName, "QName"), root_1);

                            adaptor.addChild(root_1, stream_nn.nextTree());
                            adaptor.addChild(root_1, stream_nl.nextTree());

                            adaptor.addChild(root_0, root_1);
                        }

                    }

                    retval.tree = root_0;
                }
            }

            retval.stop = input.LT(-1);

            if (state.backtracking == 0) {

                retval.tree = (XQDTCommonTree)adaptor.rulePostProcessing(root_0);
                adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        } catch (RecognitionException re) {
            reportError(re);
            recover(input, re);
            retval.tree = (XQDTCommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        } finally {
        }
        return retval;
    }

    // $ANTLR end "pg_QName"

    public static class p_NCName_return extends ParserRuleReturnScope {
        XQDTCommonTree tree;

        public Object getTree() {
            return tree;
        }
    };

    // $ANTLR start "p_NCName"
    // XQueryParser.g:1417:1: p_NCName : ( L_NCName | ANCESTOR | ANCESTOR_OR_SELF | AND | AS | ASCENDING | AT | ATTRIBUTE | BASE_URI | BOUNDARY_SPACE | BY | CASE | CAST | CASTABLE | CHILD | COLLATION | COMMENT | CONSTRUCTION | COPY_NAMESPACES | DECLARE | DEFAULT | DESCENDANT | DESCENDANT_OR_SELF | DESCENDING | DIV | DOCUMENT | DOCUMENT_NODE | ELEMENT | ELSE | EMPTY | EMPTY_SEQUENCE | ENCODING | EQ | EVERY | EXCEPT | EXTERNAL | FOLLOWING | FOLLOWING_SIBLING | FOR | FUNCTION | GE | GREATEST | GT | IDIV | IF | IMPORT | IN | INHERIT | INSTANCE | INTERSECT | IS | ITEM | LAX | LE | LEAST | LET | LT | MOD | MODULE | NAMESPACE | NE | NO_INHERIT | NO_PRESERVE | NODE | OF | OPTION | OR | ORDER | ORDERED | ORDERING | PARENT | PRECEDING | PRECEDING_SIBLING | PRESERVE | PROCESSING_INSTRUCTION | RETURN | SATISFIES | SCHEMA | SCHEMA_ATTRIBUTE | SCHEMA_ELEMENT | SELF | SOME | STABLE | STRICT | STRIP | SWITCH | TEXT | THEN | TO | TREAT | TYPESWITCH | UNION | UNORDERED | VALIDATE | VARIABLE | VERSION | WHERE | XQUERY | ALLOWING | CATCH | CONTEXT | COUNT | DECIMAL_FORMAT | DECIMAL_SEPARATOR | DIGIT | END | GROUP | GROUPING_SEPARATOR | INFINITY | MINUS_SIGN | NAMESPACE_NODE | NAN | NEXT | ONLY | PATTERN_SEPARATOR | PERCENT | PER_MILLE | PREVIOUS | SLIDING | START | TRY | TUMBLING | TYPE | WHEN | WINDOW | ZERO_DIGIT | AFTER | BEFORE | COPY | DELETE | FIRST | INSERT | INTO | LAST | MODIFY | NODES | RENAME | REPLACE | REVALIDATION | SKIP | VALUE | WITH | ALL | ANY | CONTAINS | CONTENT | DIACRITICS | DIFFERENT | DISTANCE | ENTIRE | EXACTLY | FROM | FT_OPTION | FTAND | FTNOT | FTOR | INSENSITIVE | LANGUAGE | LEVELS | LOWERCASE | MOST | NO | NOT | OCCURS | PARAGRAPH | PARAGRAPHS | PHRASE | RELATIONSHIP | SAME | SCORE | SENSITIVE | SENTENCE | SENTENCES | STEMMING | STOP | THESAURUS | TIMES | UPPERCASE | USING | WEIGHT | WILDCARDS | WITHOUT | WORD | WORDS | BREAK | CONTINUE | EXIT | LOOP | RETURNING | WHILE | CHECK | COLLECTION | CONSTRAINT | EXPLICITLY | FOREACH | FOREIGN | INDEX | INTEGRITY | KEY | ON | UNIQUE | BINARY | AMP_ER | APOS_ER | QUOT_ER );
    public final XQueryParser.p_NCName_return p_NCName() throws RecognitionException {
        XQueryParser.p_NCName_return retval = new XQueryParser.p_NCName_return();
        retval.start = input.LT(1);

        XQDTCommonTree root_0 = null;

        CommonToken set596 = null;

        XQDTCommonTree set596_tree = null;

        try {
            // XQueryParser.g:1418:9: ( L_NCName | ANCESTOR | ANCESTOR_OR_SELF | AND | AS | ASCENDING | AT | ATTRIBUTE | BASE_URI | BOUNDARY_SPACE | BY | CASE | CAST | CASTABLE | CHILD | COLLATION | COMMENT | CONSTRUCTION | COPY_NAMESPACES | DECLARE | DEFAULT | DESCENDANT | DESCENDANT_OR_SELF | DESCENDING | DIV | DOCUMENT | DOCUMENT_NODE | ELEMENT | ELSE | EMPTY | EMPTY_SEQUENCE | ENCODING | EQ | EVERY | EXCEPT | EXTERNAL | FOLLOWING | FOLLOWING_SIBLING | FOR | FUNCTION | GE | GREATEST | GT | IDIV | IF | IMPORT | IN | INHERIT | INSTANCE | INTERSECT | IS | ITEM | LAX | LE | LEAST | LET | LT | MOD | MODULE | NAMESPACE | NE | NO_INHERIT | NO_PRESERVE | NODE | OF | OPTION | OR | ORDER | ORDERED | ORDERING | PARENT | PRECEDING | PRECEDING_SIBLING | PRESERVE | PROCESSING_INSTRUCTION | RETURN | SATISFIES | SCHEMA | SCHEMA_ATTRIBUTE | SCHEMA_ELEMENT | SELF | SOME | STABLE | STRICT | STRIP | SWITCH | TEXT | THEN | TO | TREAT | TYPESWITCH | UNION | UNORDERED | VALIDATE | VARIABLE | VERSION | WHERE | XQUERY | ALLOWING | CATCH | CONTEXT | COUNT | DECIMAL_FORMAT | DECIMAL_SEPARATOR | DIGIT | END | GROUP | GROUPING_SEPARATOR | INFINITY | MINUS_SIGN | NAMESPACE_NODE | NAN | NEXT | ONLY | PATTERN_SEPARATOR | PERCENT | PER_MILLE | PREVIOUS | SLIDING | START | TRY | TUMBLING | TYPE | WHEN | WINDOW | ZERO_DIGIT | AFTER | BEFORE | COPY | DELETE | FIRST | INSERT | INTO | LAST | MODIFY | NODES | RENAME | REPLACE | REVALIDATION | SKIP | VALUE | WITH | ALL | ANY | CONTAINS | CONTENT | DIACRITICS | DIFFERENT | DISTANCE | ENTIRE | EXACTLY | FROM | FT_OPTION | FTAND | FTNOT | FTOR | INSENSITIVE | LANGUAGE | LEVELS | LOWERCASE | MOST | NO | NOT | OCCURS | PARAGRAPH | PARAGRAPHS | PHRASE | RELATIONSHIP | SAME | SCORE | SENSITIVE | SENTENCE | SENTENCES | STEMMING | STOP | THESAURUS | TIMES | UPPERCASE | USING | WEIGHT | WILDCARDS | WITHOUT | WORD | WORDS | BREAK | CONTINUE | EXIT | LOOP | RETURNING | WHILE | CHECK | COLLECTION | CONSTRAINT | EXPLICITLY | FOREACH | FOREIGN | INDEX | INTEGRITY | KEY | ON | UNIQUE | BINARY | AMP_ER | APOS_ER | QUOT_ER )
            // XQueryParser.g:
            {
                root_0 = (XQDTCommonTree)adaptor.nil();

                set596 = (CommonToken)input.LT(1);
                if ((input.LA(1) >= ANCESTOR && input.LA(1) <= SKIP)
                        || (input.LA(1) >= VALUE && input.LA(1) <= QUOT_ER) || input.LA(1) == L_NCName
                        || input.LA(1) == EXPLICITLY) {
                    input.consume();
                    if (state.backtracking == 0) {
                        adaptor.addChild(root_0, adaptor.create(set596));
                    }
                    state.errorRecovery = false;
                    state.failed = false;
                } else {
                    if (state.backtracking > 0) {
                        state.failed = true;
                        return retval;
                    }
                    MismatchedSetException mse = new MismatchedSetException(null, input);
                    throw mse;
                }

            }

            retval.stop = input.LT(-1);

            if (state.backtracking == 0) {

                retval.tree = (XQDTCommonTree)adaptor.rulePostProcessing(root_0);
                adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        } catch (RecognitionException re) {
            reportError(re);
            recover(input, re);
            retval.tree = (XQDTCommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        } finally {
        }
        return retval;
    }

    // $ANTLR end "p_NCName"

    public static class p_FNCName_return extends ParserRuleReturnScope {
        XQDTCommonTree tree;

        public Object getTree() {
            return tree;
        }
    };

    // $ANTLR start "p_FNCName"
    // XQueryParser.g:1436:1: p_FNCName : ( L_NCName | ANCESTOR | ANCESTOR_OR_SELF | AND | AS | ASCENDING | AT | BASE_URI | BOUNDARY_SPACE | BY | CASE | CAST | CASTABLE | CHILD | COLLATION | CONSTRUCTION | COPY_NAMESPACES | DECLARE | DEFAULT | DESCENDANT | DESCENDANT_OR_SELF | DESCENDING | DIV | DOCUMENT | ELSE | EMPTY | ENCODING | EQ | EVERY | EXCEPT | EXTERNAL | FOLLOWING | FOLLOWING_SIBLING | FOR | FUNCTION | GE | GREATEST | GT | IDIV | IMPORT | IN | INHERIT | INSTANCE | INTERSECT | IS | LAX | LE | LEAST | LET | LT | MOD | MODULE | NAMESPACE | NE | NO_INHERIT | NO_PRESERVE | OF | OPTION | OR | ORDER | ORDERED | ORDERING | PARENT | PRECEDING | PRECEDING_SIBLING | PRESERVE | RETURN | SATISFIES | SCHEMA | SELF | SOME | STABLE | STRICT | STRIP | THEN | TO | TREAT | UNION | UNORDERED | VALIDATE | VARIABLE | VERSION | WHERE | XQUERY | ALLOWING | CATCH | CONTEXT | COUNT | DECIMAL_FORMAT | DECIMAL_SEPARATOR | DIGIT | END | GROUP | GROUPING_SEPARATOR | INFINITY | MINUS_SIGN | NAN | NEXT | ONLY | PATTERN_SEPARATOR | PERCENT | PER_MILLE | PREVIOUS | SLIDING | START | TRY | TUMBLING | TYPE | WHEN | WINDOW | ZERO_DIGIT | AFTER | BEFORE | COPY | DELETE | FIRST | INSERT | INTO | LAST | MODIFY | NODES | RENAME | REPLACE | REVALIDATION | SKIP | UPDATING | VALUE | WITH | ALL | ANY | CONTAINS | CONTENT | DIACRITICS | DIFFERENT | DISTANCE | ENTIRE | EXACTLY | FROM | FT_OPTION | FTAND | FTNOT | FTOR | INSENSITIVE | LANGUAGE | LEVELS | LOWERCASE | MOST | NO | NOT | OCCURS | PARAGRAPH | PARAGRAPHS | PHRASE | RELATIONSHIP | SAME | SCORE | SENSITIVE | SENTENCE | SENTENCES | STEMMING | STOP | THESAURUS | TIMES | UPPERCASE | USING | WEIGHT | WILDCARDS | WITHOUT | WORD | WORDS | BREAK | CONTINUE | EXIT | LOOP | RETURNING | CHECK | COLLECTION | CONSTRAINT | EXPLICITLY | FOREACH | FOREIGN | INDEX | INTEGRITY | KEY | ON | UNIQUE | BINARY | AMP_ER | APOS_ER | QUOT_ER );
    public final XQueryParser.p_FNCName_return p_FNCName() throws RecognitionException {
        XQueryParser.p_FNCName_return retval = new XQueryParser.p_FNCName_return();
        retval.start = input.LT(1);

        XQDTCommonTree root_0 = null;

        CommonToken set597 = null;

        XQDTCommonTree set597_tree = null;

        try {
            // XQueryParser.g:1437:9: ( L_NCName | ANCESTOR | ANCESTOR_OR_SELF | AND | AS | ASCENDING | AT | BASE_URI | BOUNDARY_SPACE | BY | CASE | CAST | CASTABLE | CHILD | COLLATION | CONSTRUCTION | COPY_NAMESPACES | DECLARE | DEFAULT | DESCENDANT | DESCENDANT_OR_SELF | DESCENDING | DIV | DOCUMENT | ELSE | EMPTY | ENCODING | EQ | EVERY | EXCEPT | EXTERNAL | FOLLOWING | FOLLOWING_SIBLING | FOR | FUNCTION | GE | GREATEST | GT | IDIV | IMPORT | IN | INHERIT | INSTANCE | INTERSECT | IS | LAX | LE | LEAST | LET | LT | MOD | MODULE | NAMESPACE | NE | NO_INHERIT | NO_PRESERVE | OF | OPTION | OR | ORDER | ORDERED | ORDERING | PARENT | PRECEDING | PRECEDING_SIBLING | PRESERVE | RETURN | SATISFIES | SCHEMA | SELF | SOME | STABLE | STRICT | STRIP | THEN | TO | TREAT | UNION | UNORDERED | VALIDATE | VARIABLE | VERSION | WHERE | XQUERY | ALLOWING | CATCH | CONTEXT | COUNT | DECIMAL_FORMAT | DECIMAL_SEPARATOR | DIGIT | END | GROUP | GROUPING_SEPARATOR | INFINITY | MINUS_SIGN | NAN | NEXT | ONLY | PATTERN_SEPARATOR | PERCENT | PER_MILLE | PREVIOUS | SLIDING | START | TRY | TUMBLING | TYPE | WHEN | WINDOW | ZERO_DIGIT | AFTER | BEFORE | COPY | DELETE | FIRST | INSERT | INTO | LAST | MODIFY | NODES | RENAME | REPLACE | REVALIDATION | SKIP | UPDATING | VALUE | WITH | ALL | ANY | CONTAINS | CONTENT | DIACRITICS | DIFFERENT | DISTANCE | ENTIRE | EXACTLY | FROM | FT_OPTION | FTAND | FTNOT | FTOR | INSENSITIVE | LANGUAGE | LEVELS | LOWERCASE | MOST | NO | NOT | OCCURS | PARAGRAPH | PARAGRAPHS | PHRASE | RELATIONSHIP | SAME | SCORE | SENSITIVE | SENTENCE | SENTENCES | STEMMING | STOP | THESAURUS | TIMES | UPPERCASE | USING | WEIGHT | WILDCARDS | WITHOUT | WORD | WORDS | BREAK | CONTINUE | EXIT | LOOP | RETURNING | CHECK | COLLECTION | CONSTRAINT | EXPLICITLY | FOREACH | FOREIGN | INDEX | INTEGRITY | KEY | ON | UNIQUE | BINARY | AMP_ER | APOS_ER | QUOT_ER )
            // XQueryParser.g:
            {
                root_0 = (XQDTCommonTree)adaptor.nil();

                set597 = (CommonToken)input.LT(1);
                if ((input.LA(1) >= ANCESTOR && input.LA(1) <= AT)
                        || (input.LA(1) >= BASE_URI && input.LA(1) <= COLLATION)
                        || (input.LA(1) >= CONSTRUCTION && input.LA(1) <= DOCUMENT)
                        || (input.LA(1) >= ELSE && input.LA(1) <= EMPTY)
                        || (input.LA(1) >= ENCODING && input.LA(1) <= IDIV)
                        || (input.LA(1) >= IMPORT && input.LA(1) <= IS)
                        || (input.LA(1) >= LAX && input.LA(1) <= NO_PRESERVE)
                        || (input.LA(1) >= OF && input.LA(1) <= PRESERVE)
                        || (input.LA(1) >= RETURN && input.LA(1) <= SCHEMA)
                        || (input.LA(1) >= SELF && input.LA(1) <= STRIP)
                        || (input.LA(1) >= THEN && input.LA(1) <= TREAT)
                        || (input.LA(1) >= UNION && input.LA(1) <= MINUS_SIGN)
                        || (input.LA(1) >= NAN && input.LA(1) <= START)
                        || (input.LA(1) >= TRY && input.LA(1) <= RETURNING)
                        || (input.LA(1) >= CHECK && input.LA(1) <= QUOT_ER) || input.LA(1) == L_NCName
                        || input.LA(1) == EXPLICITLY) {
                    input.consume();
                    if (state.backtracking == 0) {
                        adaptor.addChild(root_0, adaptor.create(set597));
                    }
                    state.errorRecovery = false;
                    state.failed = false;
                } else {
                    if (state.backtracking > 0) {
                        state.failed = true;
                        return retval;
                    }
                    MismatchedSetException mse = new MismatchedSetException(null, input);
                    throw mse;
                }

            }

            retval.stop = input.LT(-1);

            if (state.backtracking == 0) {

                retval.tree = (XQDTCommonTree)adaptor.rulePostProcessing(root_0);
                adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        } catch (RecognitionException re) {
            reportError(re);
            recover(input, re);
            retval.tree = (XQDTCommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        } finally {
        }
        return retval;
    }

    // $ANTLR end "p_FNCName"

    public static class pg_UpdateExpr_return extends ParserRuleReturnScope {
        XQDTCommonTree tree;

        public Object getTree() {
            return tree;
        }
    };

    // $ANTLR start "pg_UpdateExpr"
    // XQueryParser.g:1474:1: pg_UpdateExpr : ( p_InsertExpr | p_DeleteExpr | p_RenameExpr | p_ReplaceExpr | p_TransformExpr );
    public final XQueryParser.pg_UpdateExpr_return pg_UpdateExpr() throws RecognitionException {
        XQueryParser.pg_UpdateExpr_return retval = new XQueryParser.pg_UpdateExpr_return();
        retval.start = input.LT(1);

        XQDTCommonTree root_0 = null;

        XQueryParser.p_InsertExpr_return p_InsertExpr598 = null;

        XQueryParser.p_DeleteExpr_return p_DeleteExpr599 = null;

        XQueryParser.p_RenameExpr_return p_RenameExpr600 = null;

        XQueryParser.p_ReplaceExpr_return p_ReplaceExpr601 = null;

        XQueryParser.p_TransformExpr_return p_TransformExpr602 = null;

        try {
            // XQueryParser.g:1475:9: ( p_InsertExpr | p_DeleteExpr | p_RenameExpr | p_ReplaceExpr | p_TransformExpr )
            int alt181 = 5;
            switch (input.LA(1)) {
            case INSERT: {
                alt181 = 1;
            }
                break;
            case DELETE: {
                alt181 = 2;
            }
                break;
            case RENAME: {
                alt181 = 3;
            }
                break;
            case REPLACE: {
                alt181 = 4;
            }
                break;
            case COPY: {
                alt181 = 5;
            }
                break;
            default:
                if (state.backtracking > 0) {
                    state.failed = true;
                    return retval;
                }
                NoViableAltException nvae = new NoViableAltException("", 181, 0, input);

                throw nvae;
            }

            switch (alt181) {
            case 1:
                // XQueryParser.g:1475:11: p_InsertExpr
            {
                root_0 = (XQDTCommonTree)adaptor.nil();

                pushFollow(FOLLOW_p_InsertExpr_in_pg_UpdateExpr13127);
                p_InsertExpr598 = p_InsertExpr();

                state._fsp--;
                if (state.failed) {
                    return retval;
                }
                if (state.backtracking == 0) {
                    adaptor.addChild(root_0, p_InsertExpr598.getTree());
                }

            }
            break;
            case 2:
                // XQueryParser.g:1476:11: p_DeleteExpr
            {
                root_0 = (XQDTCommonTree)adaptor.nil();

                pushFollow(FOLLOW_p_DeleteExpr_in_pg_UpdateExpr13139);
                p_DeleteExpr599 = p_DeleteExpr();

                state._fsp--;
                if (state.failed) {
                    return retval;
                }
                if (state.backtracking == 0) {
                    adaptor.addChild(root_0, p_DeleteExpr599.getTree());
                }

            }
            break;
            case 3:
                // XQueryParser.g:1477:11: p_RenameExpr
            {
                root_0 = (XQDTCommonTree)adaptor.nil();

                pushFollow(FOLLOW_p_RenameExpr_in_pg_UpdateExpr13151);
                p_RenameExpr600 = p_RenameExpr();

                state._fsp--;
                if (state.failed) {
                    return retval;
                }
                if (state.backtracking == 0) {
                    adaptor.addChild(root_0, p_RenameExpr600.getTree());
                }

            }
            break;
            case 4:
                // XQueryParser.g:1478:11: p_ReplaceExpr
            {
                root_0 = (XQDTCommonTree)adaptor.nil();

                pushFollow(FOLLOW_p_ReplaceExpr_in_pg_UpdateExpr13163);
                p_ReplaceExpr601 = p_ReplaceExpr();

                state._fsp--;
                if (state.failed) {
                    return retval;
                }
                if (state.backtracking == 0) {
                    adaptor.addChild(root_0, p_ReplaceExpr601.getTree());
                }

            }
            break;
            case 5:
                // XQueryParser.g:1479:11: p_TransformExpr
            {
                root_0 = (XQDTCommonTree)adaptor.nil();

                pushFollow(FOLLOW_p_TransformExpr_in_pg_UpdateExpr13175);
                p_TransformExpr602 = p_TransformExpr();

                state._fsp--;
                if (state.failed) {
                    return retval;
                }
                if (state.backtracking == 0) {
                    adaptor.addChild(root_0, p_TransformExpr602.getTree());
                }

            }
            break;

            }
            retval.stop = input.LT(-1);

            if (state.backtracking == 0) {

                retval.tree = (XQDTCommonTree)adaptor.rulePostProcessing(root_0);
                adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        } catch (RecognitionException re) {
            reportError(re);
            recover(input, re);
            retval.tree = (XQDTCommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        } finally {
        }
        return retval;
    }

    // $ANTLR end "pg_UpdateExpr"

    public static class pm_RevalidationDecl_return extends ParserRuleReturnScope {
        XQDTCommonTree tree;

        public Object getTree() {
            return tree;
        }
    };

    // $ANTLR start "pm_RevalidationDecl"
    // XQueryParser.g:1483:1: pm_RevalidationDecl : k+= DECLARE k+= REVALIDATION (k+= STRICT | k+= LAX | k+= SKIP ) SEMICOLON ;
    public final XQueryParser.pm_RevalidationDecl_return pm_RevalidationDecl() throws RecognitionException {
        XQueryParser.pm_RevalidationDecl_return retval = new XQueryParser.pm_RevalidationDecl_return();
        retval.start = input.LT(1);

        XQDTCommonTree root_0 = null;

        CommonToken SEMICOLON603 = null;
        CommonToken k = null;
        List<CommonToken> list_k = null;

        XQDTCommonTree SEMICOLON603_tree = null;
        XQDTCommonTree k_tree = null;

        try {
            // XQueryParser.g:1484:9: (k+= DECLARE k+= REVALIDATION (k+= STRICT | k+= LAX | k+= SKIP ) SEMICOLON )
            // XQueryParser.g:1484:11: k+= DECLARE k+= REVALIDATION (k+= STRICT | k+= LAX | k+= SKIP ) SEMICOLON
            {
                root_0 = (XQDTCommonTree)adaptor.nil();

                k = (CommonToken)match(input, DECLARE, FOLLOW_DECLARE_in_pm_RevalidationDecl13203);
                if (state.failed) {
                    return retval;
                }
                if (state.backtracking == 0) {
                    k_tree = (XQDTCommonTree)adaptor.create(k);
                    adaptor.addChild(root_0, k_tree);
                }
                if (list_k == null) {
                    list_k = new ArrayList<CommonToken>();
                }
                list_k.add(k);

                k = (CommonToken)match(input, REVALIDATION, FOLLOW_REVALIDATION_in_pm_RevalidationDecl13207);
                if (state.failed) {
                    return retval;
                }
                if (state.backtracking == 0) {
                    k_tree = (XQDTCommonTree)adaptor.create(k);
                    adaptor.addChild(root_0, k_tree);
                }
                if (list_k == null) {
                    list_k = new ArrayList<CommonToken>();
                }
                list_k.add(k);

                // XQueryParser.g:1484:38: (k+= STRICT | k+= LAX | k+= SKIP )
                int alt182 = 3;
                switch (input.LA(1)) {
                case STRICT: {
                    alt182 = 1;
                }
                break;
                case LAX: {
                    alt182 = 2;
                }
                break;
                case SKIP: {
                    alt182 = 3;
                }
                break;
                default:
                    if (state.backtracking > 0) {
                        state.failed = true;
                        return retval;
                    }
                    NoViableAltException nvae = new NoViableAltException("", 182, 0, input);

                    throw nvae;
                }

                switch (alt182) {
                case 1:
                    // XQueryParser.g:1484:39: k+= STRICT
                {
                    k = (CommonToken)match(input, STRICT, FOLLOW_STRICT_in_pm_RevalidationDecl13212);
                    if (state.failed) {
                        return retval;
                    }
                    if (state.backtracking == 0) {
                        k_tree = (XQDTCommonTree)adaptor.create(k);
                        adaptor.addChild(root_0, k_tree);
                    }
                    if (list_k == null) {
                        list_k = new ArrayList<CommonToken>();
                    }
                    list_k.add(k);

                }
                    break;
                case 2:
                    // XQueryParser.g:1484:51: k+= LAX
                {
                    k = (CommonToken)match(input, LAX, FOLLOW_LAX_in_pm_RevalidationDecl13218);
                    if (state.failed) {
                        return retval;
                    }
                    if (state.backtracking == 0) {
                        k_tree = (XQDTCommonTree)adaptor.create(k);
                        adaptor.addChild(root_0, k_tree);
                    }
                    if (list_k == null) {
                        list_k = new ArrayList<CommonToken>();
                    }
                    list_k.add(k);

                }
                    break;
                case 3:
                    // XQueryParser.g:1484:60: k+= SKIP
                {
                    k = (CommonToken)match(input, SKIP, FOLLOW_SKIP_in_pm_RevalidationDecl13224);
                    if (state.failed) {
                        return retval;
                    }
                    if (state.backtracking == 0) {
                        k_tree = (XQDTCommonTree)adaptor.create(k);
                        adaptor.addChild(root_0, k_tree);
                    }
                    if (list_k == null) {
                        list_k = new ArrayList<CommonToken>();
                    }
                    list_k.add(k);

                }
                    break;

                }

                if (state.backtracking == 0) {
                    ak(list_k);
                }
                SEMICOLON603 = (CommonToken)match(input, SEMICOLON, FOLLOW_SEMICOLON_in_pm_RevalidationDecl13229);
                if (state.failed) {
                    return retval;
                }
                if (state.backtracking == 0) {
                    SEMICOLON603_tree = (XQDTCommonTree)adaptor.create(SEMICOLON603);
                    adaptor.addChild(root_0, SEMICOLON603_tree);
                }

            }

            retval.stop = input.LT(-1);

            if (state.backtracking == 0) {

                retval.tree = (XQDTCommonTree)adaptor.rulePostProcessing(root_0);
                adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        } catch (RecognitionException re) {
            reportError(re);
            recover(input, re);
            retval.tree = (XQDTCommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        } finally {
        }
        return retval;
    }

    // $ANTLR end "pm_RevalidationDecl"

    public static class p_InsertExprTargetChoice_return extends ParserRuleReturnScope {
        XQDTCommonTree tree;

        public Object getTree() {
            return tree;
        }
    };

    // $ANTLR start "p_InsertExprTargetChoice"
    // XQueryParser.g:1488:1: p_InsertExprTargetChoice : ( ( (k+= AS (k+= FIRST | k+= LAST ) )? k+= INTO ) | ka= AFTER | kb= BEFORE );
    public final XQueryParser.p_InsertExprTargetChoice_return p_InsertExprTargetChoice() throws RecognitionException {
        XQueryParser.p_InsertExprTargetChoice_return retval = new XQueryParser.p_InsertExprTargetChoice_return();
        retval.start = input.LT(1);

        XQDTCommonTree root_0 = null;

        CommonToken ka = null;
        CommonToken kb = null;
        CommonToken k = null;
        List<CommonToken> list_k = null;

        XQDTCommonTree ka_tree = null;
        XQDTCommonTree kb_tree = null;
        XQDTCommonTree k_tree = null;

        try {
            // XQueryParser.g:1489:9: ( ( (k+= AS (k+= FIRST | k+= LAST ) )? k+= INTO ) | ka= AFTER | kb= BEFORE )
            int alt185 = 3;
            switch (input.LA(1)) {
            case AS:
            case INTO: {
                alt185 = 1;
            }
                break;
            case AFTER: {
                alt185 = 2;
            }
                break;
            case BEFORE: {
                alt185 = 3;
            }
                break;
            default:
                if (state.backtracking > 0) {
                    state.failed = true;
                    return retval;
                }
                NoViableAltException nvae = new NoViableAltException("", 185, 0, input);

                throw nvae;
            }

            switch (alt185) {
            case 1:
                // XQueryParser.g:1489:11: ( (k+= AS (k+= FIRST | k+= LAST ) )? k+= INTO )
            {
                root_0 = (XQDTCommonTree)adaptor.nil();

                // XQueryParser.g:1489:11: ( (k+= AS (k+= FIRST | k+= LAST ) )? k+= INTO )
                // XQueryParser.g:1489:12: (k+= AS (k+= FIRST | k+= LAST ) )? k+= INTO
                {
                    // XQueryParser.g:1489:12: (k+= AS (k+= FIRST | k+= LAST ) )?
                    int alt184 = 2;
                    int LA184_0 = input.LA(1);

                    if ((LA184_0 == AS)) {
                        alt184 = 1;
                    }
                    switch (alt184) {
                    case 1:
                        // XQueryParser.g:1489:13: k+= AS (k+= FIRST | k+= LAST )
                    {
                        k = (CommonToken)match(input, AS, FOLLOW_AS_in_p_InsertExprTargetChoice13259);
                        if (state.failed) {
                            return retval;
                        }
                        if (state.backtracking == 0) {
                            k_tree = (XQDTCommonTree)adaptor.create(k);
                            adaptor.addChild(root_0, k_tree);
                        }
                        if (list_k == null) {
                            list_k = new ArrayList<CommonToken>();
                        }
                        list_k.add(k);

                        // XQueryParser.g:1489:19: (k+= FIRST | k+= LAST )
                        int alt183 = 2;
                        int LA183_0 = input.LA(1);

                        if ((LA183_0 == FIRST)) {
                            alt183 = 1;
                        } else if ((LA183_0 == LAST)) {
                            alt183 = 2;
                        } else {
                            if (state.backtracking > 0) {
                                state.failed = true;
                                return retval;
                            }
                            NoViableAltException nvae = new NoViableAltException("", 183, 0, input);

                            throw nvae;
                        }
                        switch (alt183) {
                        case 1:
                            // XQueryParser.g:1489:20: k+= FIRST
                        {
                            k = (CommonToken)match(input, FIRST, FOLLOW_FIRST_in_p_InsertExprTargetChoice13264);
                            if (state.failed) {
                                return retval;
                            }
                            if (state.backtracking == 0) {
                                k_tree = (XQDTCommonTree)adaptor.create(k);
                                adaptor.addChild(root_0, k_tree);
                            }
                            if (list_k == null) {
                                list_k = new ArrayList<CommonToken>();
                            }
                            list_k.add(k);

                        }
                        break;
                        case 2:
                            // XQueryParser.g:1489:31: k+= LAST
                        {
                            k = (CommonToken)match(input, LAST, FOLLOW_LAST_in_p_InsertExprTargetChoice13270);
                            if (state.failed) {
                                return retval;
                            }
                            if (state.backtracking == 0) {
                                k_tree = (XQDTCommonTree)adaptor.create(k);
                                adaptor.addChild(root_0, k_tree);
                            }
                            if (list_k == null) {
                                list_k = new ArrayList<CommonToken>();
                            }
                            list_k.add(k);

                        }
                        break;

                        }

                    }
                    break;

                    }

                    k = (CommonToken)match(input, INTO, FOLLOW_INTO_in_p_InsertExprTargetChoice13277);
                    if (state.failed) {
                        return retval;
                    }
                    if (state.backtracking == 0) {
                        k_tree = (XQDTCommonTree)adaptor.create(k);
                        adaptor.addChild(root_0, k_tree);
                    }
                    if (list_k == null) {
                        list_k = new ArrayList<CommonToken>();
                    }
                    list_k.add(k);

                }

                if (state.backtracking == 0) {
                    ak(list_k);
                }

            }
            break;
            case 2:
                // XQueryParser.g:1490:11: ka= AFTER
            {
                root_0 = (XQDTCommonTree)adaptor.nil();

                ka = (CommonToken)match(input, AFTER, FOLLOW_AFTER_in_p_InsertExprTargetChoice13294);
                if (state.failed) {
                    return retval;
                }
                if (state.backtracking == 0) {
                    ka_tree = (XQDTCommonTree)adaptor.create(ka);
                    adaptor.addChild(root_0, ka_tree);
                }
                if (state.backtracking == 0) {
                    ak(ka);
                }

            }
            break;
            case 3:
                // XQueryParser.g:1491:11: kb= BEFORE
            {
                root_0 = (XQDTCommonTree)adaptor.nil();

                kb = (CommonToken)match(input, BEFORE, FOLLOW_BEFORE_in_p_InsertExprTargetChoice13310);
                if (state.failed) {
                    return retval;
                }
                if (state.backtracking == 0) {
                    kb_tree = (XQDTCommonTree)adaptor.create(kb);
                    adaptor.addChild(root_0, kb_tree);
                }
                if (state.backtracking == 0) {
                    ak(kb);
                }

            }
            break;

            }
            retval.stop = input.LT(-1);

            if (state.backtracking == 0) {

                retval.tree = (XQDTCommonTree)adaptor.rulePostProcessing(root_0);
                adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        } catch (RecognitionException re) {
            reportError(re);
            recover(input, re);
            retval.tree = (XQDTCommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        } finally {
        }
        return retval;
    }

    // $ANTLR end "p_InsertExprTargetChoice"

    public static class p_InsertExpr_return extends ParserRuleReturnScope {
        XQDTCommonTree tree;

        public Object getTree() {
            return tree;
        }
    };

    // $ANTLR start "p_InsertExpr"
    // XQueryParser.g:1495:1: p_InsertExpr : k+= INSERT (k+= NODE | k+= NODES ) p_SourceExpr p_InsertExprTargetChoice p_TargetExpr ;
    public final XQueryParser.p_InsertExpr_return p_InsertExpr() throws RecognitionException {
        XQueryParser.p_InsertExpr_return retval = new XQueryParser.p_InsertExpr_return();
        retval.start = input.LT(1);

        XQDTCommonTree root_0 = null;

        CommonToken k = null;
        List<CommonToken> list_k = null;
        XQueryParser.p_SourceExpr_return p_SourceExpr604 = null;

        XQueryParser.p_InsertExprTargetChoice_return p_InsertExprTargetChoice605 = null;

        XQueryParser.p_TargetExpr_return p_TargetExpr606 = null;

        XQDTCommonTree k_tree = null;

        try {
            // XQueryParser.g:1496:9: (k+= INSERT (k+= NODE | k+= NODES ) p_SourceExpr p_InsertExprTargetChoice p_TargetExpr )
            // XQueryParser.g:1496:11: k+= INSERT (k+= NODE | k+= NODES ) p_SourceExpr p_InsertExprTargetChoice p_TargetExpr
            {
                root_0 = (XQDTCommonTree)adaptor.nil();

                k = (CommonToken)match(input, INSERT, FOLLOW_INSERT_in_p_InsertExpr13340);
                if (state.failed) {
                    return retval;
                }
                if (state.backtracking == 0) {
                    k_tree = (XQDTCommonTree)adaptor.create(k);
                    adaptor.addChild(root_0, k_tree);
                }
                if (list_k == null) {
                    list_k = new ArrayList<CommonToken>();
                }
                list_k.add(k);

                // XQueryParser.g:1496:21: (k+= NODE | k+= NODES )
                int alt186 = 2;
                int LA186_0 = input.LA(1);

                if ((LA186_0 == NODE)) {
                    alt186 = 1;
                } else if ((LA186_0 == NODES)) {
                    alt186 = 2;
                } else {
                    if (state.backtracking > 0) {
                        state.failed = true;
                        return retval;
                    }
                    NoViableAltException nvae = new NoViableAltException("", 186, 0, input);

                    throw nvae;
                }
                switch (alt186) {
                case 1:
                    // XQueryParser.g:1496:22: k+= NODE
                {
                    k = (CommonToken)match(input, NODE, FOLLOW_NODE_in_p_InsertExpr13345);
                    if (state.failed) {
                        return retval;
                    }
                    if (state.backtracking == 0) {
                        k_tree = (XQDTCommonTree)adaptor.create(k);
                        adaptor.addChild(root_0, k_tree);
                    }
                    if (list_k == null) {
                        list_k = new ArrayList<CommonToken>();
                    }
                    list_k.add(k);

                }
                    break;
                case 2:
                    // XQueryParser.g:1496:32: k+= NODES
                {
                    k = (CommonToken)match(input, NODES, FOLLOW_NODES_in_p_InsertExpr13351);
                    if (state.failed) {
                        return retval;
                    }
                    if (state.backtracking == 0) {
                        k_tree = (XQDTCommonTree)adaptor.create(k);
                        adaptor.addChild(root_0, k_tree);
                    }
                    if (list_k == null) {
                        list_k = new ArrayList<CommonToken>();
                    }
                    list_k.add(k);

                }
                    break;

                }

                pushFollow(FOLLOW_p_SourceExpr_in_p_InsertExpr13354);
                p_SourceExpr604 = p_SourceExpr();

                state._fsp--;
                if (state.failed) {
                    return retval;
                }
                if (state.backtracking == 0) {
                    adaptor.addChild(root_0, p_SourceExpr604.getTree());
                }
                pushFollow(FOLLOW_p_InsertExprTargetChoice_in_p_InsertExpr13356);
                p_InsertExprTargetChoice605 = p_InsertExprTargetChoice();

                state._fsp--;
                if (state.failed) {
                    return retval;
                }
                if (state.backtracking == 0) {
                    adaptor.addChild(root_0, p_InsertExprTargetChoice605.getTree());
                }
                pushFollow(FOLLOW_p_TargetExpr_in_p_InsertExpr13358);
                p_TargetExpr606 = p_TargetExpr();

                state._fsp--;
                if (state.failed) {
                    return retval;
                }
                if (state.backtracking == 0) {
                    adaptor.addChild(root_0, p_TargetExpr606.getTree());
                }
                if (state.backtracking == 0) {
                    ak(list_k);
                }

            }

            retval.stop = input.LT(-1);

            if (state.backtracking == 0) {

                retval.tree = (XQDTCommonTree)adaptor.rulePostProcessing(root_0);
                adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        } catch (RecognitionException re) {
            reportError(re);
            recover(input, re);
            retval.tree = (XQDTCommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        } finally {
        }
        return retval;
    }

    // $ANTLR end "p_InsertExpr"

    public static class p_DeleteExpr_return extends ParserRuleReturnScope {
        XQDTCommonTree tree;

        public Object getTree() {
            return tree;
        }
    };

    // $ANTLR start "p_DeleteExpr"
    // XQueryParser.g:1500:1: p_DeleteExpr : k+= DELETE (k+= NODE | k+= NODES ) p_TargetExpr ;
    public final XQueryParser.p_DeleteExpr_return p_DeleteExpr() throws RecognitionException {
        XQueryParser.p_DeleteExpr_return retval = new XQueryParser.p_DeleteExpr_return();
        retval.start = input.LT(1);

        XQDTCommonTree root_0 = null;

        CommonToken k = null;
        List<CommonToken> list_k = null;
        XQueryParser.p_TargetExpr_return p_TargetExpr607 = null;

        XQDTCommonTree k_tree = null;

        try {
            // XQueryParser.g:1501:9: (k+= DELETE (k+= NODE | k+= NODES ) p_TargetExpr )
            // XQueryParser.g:1501:11: k+= DELETE (k+= NODE | k+= NODES ) p_TargetExpr
            {
                root_0 = (XQDTCommonTree)adaptor.nil();

                k = (CommonToken)match(input, DELETE, FOLLOW_DELETE_in_p_DeleteExpr13388);
                if (state.failed) {
                    return retval;
                }
                if (state.backtracking == 0) {
                    k_tree = (XQDTCommonTree)adaptor.create(k);
                    adaptor.addChild(root_0, k_tree);
                }
                if (list_k == null) {
                    list_k = new ArrayList<CommonToken>();
                }
                list_k.add(k);

                // XQueryParser.g:1501:21: (k+= NODE | k+= NODES )
                int alt187 = 2;
                int LA187_0 = input.LA(1);

                if ((LA187_0 == NODE)) {
                    alt187 = 1;
                } else if ((LA187_0 == NODES)) {
                    alt187 = 2;
                } else {
                    if (state.backtracking > 0) {
                        state.failed = true;
                        return retval;
                    }
                    NoViableAltException nvae = new NoViableAltException("", 187, 0, input);

                    throw nvae;
                }
                switch (alt187) {
                case 1:
                    // XQueryParser.g:1501:22: k+= NODE
                {
                    k = (CommonToken)match(input, NODE, FOLLOW_NODE_in_p_DeleteExpr13393);
                    if (state.failed) {
                        return retval;
                    }
                    if (state.backtracking == 0) {
                        k_tree = (XQDTCommonTree)adaptor.create(k);
                        adaptor.addChild(root_0, k_tree);
                    }
                    if (list_k == null) {
                        list_k = new ArrayList<CommonToken>();
                    }
                    list_k.add(k);

                }
                    break;
                case 2:
                    // XQueryParser.g:1501:32: k+= NODES
                {
                    k = (CommonToken)match(input, NODES, FOLLOW_NODES_in_p_DeleteExpr13399);
                    if (state.failed) {
                        return retval;
                    }
                    if (state.backtracking == 0) {
                        k_tree = (XQDTCommonTree)adaptor.create(k);
                        adaptor.addChild(root_0, k_tree);
                    }
                    if (list_k == null) {
                        list_k = new ArrayList<CommonToken>();
                    }
                    list_k.add(k);

                }
                    break;

                }

                pushFollow(FOLLOW_p_TargetExpr_in_p_DeleteExpr13402);
                p_TargetExpr607 = p_TargetExpr();

                state._fsp--;
                if (state.failed) {
                    return retval;
                }
                if (state.backtracking == 0) {
                    adaptor.addChild(root_0, p_TargetExpr607.getTree());
                }
                if (state.backtracking == 0) {
                    ak(list_k);
                }

            }

            retval.stop = input.LT(-1);

            if (state.backtracking == 0) {

                retval.tree = (XQDTCommonTree)adaptor.rulePostProcessing(root_0);
                adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        } catch (RecognitionException re) {
            reportError(re);
            recover(input, re);
            retval.tree = (XQDTCommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        } finally {
        }
        return retval;
    }

    // $ANTLR end "p_DeleteExpr"

    public static class p_ReplaceExpr_return extends ParserRuleReturnScope {
        XQDTCommonTree tree;

        public Object getTree() {
            return tree;
        }
    };

    // $ANTLR start "p_ReplaceExpr"
    // XQueryParser.g:1505:1: p_ReplaceExpr : k+= REPLACE (k+= VALUE k+= OF )? k+= NODE p_ExprSingle[true] k+= WITH p_ExprSingle[true] ;
    public final XQueryParser.p_ReplaceExpr_return p_ReplaceExpr() throws RecognitionException {
        XQueryParser.p_ReplaceExpr_return retval = new XQueryParser.p_ReplaceExpr_return();
        retval.start = input.LT(1);

        XQDTCommonTree root_0 = null;

        CommonToken k = null;
        List<CommonToken> list_k = null;
        XQueryParser.p_ExprSingle_return p_ExprSingle608 = null;

        XQueryParser.p_ExprSingle_return p_ExprSingle609 = null;

        XQDTCommonTree k_tree = null;

        try {
            // XQueryParser.g:1506:9: (k+= REPLACE (k+= VALUE k+= OF )? k+= NODE p_ExprSingle[true] k+= WITH p_ExprSingle[true] )
            // XQueryParser.g:1506:11: k+= REPLACE (k+= VALUE k+= OF )? k+= NODE p_ExprSingle[true] k+= WITH p_ExprSingle[true]
            {
                root_0 = (XQDTCommonTree)adaptor.nil();

                k = (CommonToken)match(input, REPLACE, FOLLOW_REPLACE_in_p_ReplaceExpr13432);
                if (state.failed) {
                    return retval;
                }
                if (state.backtracking == 0) {
                    k_tree = (XQDTCommonTree)adaptor.create(k);
                    adaptor.addChild(root_0, k_tree);
                }
                if (list_k == null) {
                    list_k = new ArrayList<CommonToken>();
                }
                list_k.add(k);

                // XQueryParser.g:1506:22: (k+= VALUE k+= OF )?
                int alt188 = 2;
                int LA188_0 = input.LA(1);

                if ((LA188_0 == VALUE)) {
                    alt188 = 1;
                }
                switch (alt188) {
                case 1:
                    // XQueryParser.g:1506:23: k+= VALUE k+= OF
                {
                    k = (CommonToken)match(input, VALUE, FOLLOW_VALUE_in_p_ReplaceExpr13437);
                    if (state.failed) {
                        return retval;
                    }
                    if (state.backtracking == 0) {
                        k_tree = (XQDTCommonTree)adaptor.create(k);
                        adaptor.addChild(root_0, k_tree);
                    }
                    if (list_k == null) {
                        list_k = new ArrayList<CommonToken>();
                    }
                    list_k.add(k);

                    k = (CommonToken)match(input, OF, FOLLOW_OF_in_p_ReplaceExpr13441);
                    if (state.failed) {
                        return retval;
                    }
                    if (state.backtracking == 0) {
                        k_tree = (XQDTCommonTree)adaptor.create(k);
                        adaptor.addChild(root_0, k_tree);
                    }
                    if (list_k == null) {
                        list_k = new ArrayList<CommonToken>();
                    }
                    list_k.add(k);

                }
                    break;

                }

                k = (CommonToken)match(input, NODE, FOLLOW_NODE_in_p_ReplaceExpr13447);
                if (state.failed) {
                    return retval;
                }
                if (state.backtracking == 0) {
                    k_tree = (XQDTCommonTree)adaptor.create(k);
                    adaptor.addChild(root_0, k_tree);
                }
                if (list_k == null) {
                    list_k = new ArrayList<CommonToken>();
                }
                list_k.add(k);

                pushFollow(FOLLOW_p_ExprSingle_in_p_ReplaceExpr13449);
                p_ExprSingle608 = p_ExprSingle(true);

                state._fsp--;
                if (state.failed) {
                    return retval;
                }
                if (state.backtracking == 0) {
                    adaptor.addChild(root_0, p_ExprSingle608.getTree());
                }
                k = (CommonToken)match(input, WITH, FOLLOW_WITH_in_p_ReplaceExpr13454);
                if (state.failed) {
                    return retval;
                }
                if (state.backtracking == 0) {
                    k_tree = (XQDTCommonTree)adaptor.create(k);
                    adaptor.addChild(root_0, k_tree);
                }
                if (list_k == null) {
                    list_k = new ArrayList<CommonToken>();
                }
                list_k.add(k);

                pushFollow(FOLLOW_p_ExprSingle_in_p_ReplaceExpr13456);
                p_ExprSingle609 = p_ExprSingle(true);

                state._fsp--;
                if (state.failed) {
                    return retval;
                }
                if (state.backtracking == 0) {
                    adaptor.addChild(root_0, p_ExprSingle609.getTree());
                }
                if (state.backtracking == 0) {
                    ak(list_k);
                }

            }

            retval.stop = input.LT(-1);

            if (state.backtracking == 0) {

                retval.tree = (XQDTCommonTree)adaptor.rulePostProcessing(root_0);
                adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        } catch (RecognitionException re) {
            reportError(re);
            recover(input, re);
            retval.tree = (XQDTCommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        } finally {
        }
        return retval;
    }

    // $ANTLR end "p_ReplaceExpr"

    public static class p_RenameExpr_return extends ParserRuleReturnScope {
        XQDTCommonTree tree;

        public Object getTree() {
            return tree;
        }
    };

    // $ANTLR start "p_RenameExpr"
    // XQueryParser.g:1510:1: p_RenameExpr : k+= RENAME k+= NODE p_TargetExpr AS p_NewNameExpr ;
    public final XQueryParser.p_RenameExpr_return p_RenameExpr() throws RecognitionException {
        XQueryParser.p_RenameExpr_return retval = new XQueryParser.p_RenameExpr_return();
        retval.start = input.LT(1);

        XQDTCommonTree root_0 = null;

        CommonToken AS611 = null;
        CommonToken k = null;
        List<CommonToken> list_k = null;
        XQueryParser.p_TargetExpr_return p_TargetExpr610 = null;

        XQueryParser.p_NewNameExpr_return p_NewNameExpr612 = null;

        XQDTCommonTree AS611_tree = null;
        XQDTCommonTree k_tree = null;

        try {
            // XQueryParser.g:1511:9: (k+= RENAME k+= NODE p_TargetExpr AS p_NewNameExpr )
            // XQueryParser.g:1511:11: k+= RENAME k+= NODE p_TargetExpr AS p_NewNameExpr
            {
                root_0 = (XQDTCommonTree)adaptor.nil();

                k = (CommonToken)match(input, RENAME, FOLLOW_RENAME_in_p_RenameExpr13487);
                if (state.failed) {
                    return retval;
                }
                if (state.backtracking == 0) {
                    k_tree = (XQDTCommonTree)adaptor.create(k);
                    adaptor.addChild(root_0, k_tree);
                }
                if (list_k == null) {
                    list_k = new ArrayList<CommonToken>();
                }
                list_k.add(k);

                k = (CommonToken)match(input, NODE, FOLLOW_NODE_in_p_RenameExpr13491);
                if (state.failed) {
                    return retval;
                }
                if (state.backtracking == 0) {
                    k_tree = (XQDTCommonTree)adaptor.create(k);
                    adaptor.addChild(root_0, k_tree);
                }
                if (list_k == null) {
                    list_k = new ArrayList<CommonToken>();
                }
                list_k.add(k);

                pushFollow(FOLLOW_p_TargetExpr_in_p_RenameExpr13493);
                p_TargetExpr610 = p_TargetExpr();

                state._fsp--;
                if (state.failed) {
                    return retval;
                }
                if (state.backtracking == 0) {
                    adaptor.addChild(root_0, p_TargetExpr610.getTree());
                }
                AS611 = (CommonToken)match(input, AS, FOLLOW_AS_in_p_RenameExpr13495);
                if (state.failed) {
                    return retval;
                }
                if (state.backtracking == 0) {
                    AS611_tree = (XQDTCommonTree)adaptor.create(AS611);
                    adaptor.addChild(root_0, AS611_tree);
                }
                pushFollow(FOLLOW_p_NewNameExpr_in_p_RenameExpr13497);
                p_NewNameExpr612 = p_NewNameExpr();

                state._fsp--;
                if (state.failed) {
                    return retval;
                }
                if (state.backtracking == 0) {
                    adaptor.addChild(root_0, p_NewNameExpr612.getTree());
                }
                if (state.backtracking == 0) {
                    ak(list_k);
                }

            }

            retval.stop = input.LT(-1);

            if (state.backtracking == 0) {

                retval.tree = (XQDTCommonTree)adaptor.rulePostProcessing(root_0);
                adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        } catch (RecognitionException re) {
            reportError(re);
            recover(input, re);
            retval.tree = (XQDTCommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        } finally {
        }
        return retval;
    }

    // $ANTLR end "p_RenameExpr"

    public static class p_SourceExpr_return extends ParserRuleReturnScope {
        XQDTCommonTree tree;

        public Object getTree() {
            return tree;
        }
    };

    // $ANTLR start "p_SourceExpr"
    // XQueryParser.g:1515:1: p_SourceExpr : p_ExprSingle[true] ;
    public final XQueryParser.p_SourceExpr_return p_SourceExpr() throws RecognitionException {
        XQueryParser.p_SourceExpr_return retval = new XQueryParser.p_SourceExpr_return();
        retval.start = input.LT(1);

        XQDTCommonTree root_0 = null;

        XQueryParser.p_ExprSingle_return p_ExprSingle613 = null;

        try {
            // XQueryParser.g:1516:9: ( p_ExprSingle[true] )
            // XQueryParser.g:1516:11: p_ExprSingle[true]
            {
                root_0 = (XQDTCommonTree)adaptor.nil();

                pushFollow(FOLLOW_p_ExprSingle_in_p_SourceExpr13525);
                p_ExprSingle613 = p_ExprSingle(true);

                state._fsp--;
                if (state.failed) {
                    return retval;
                }
                if (state.backtracking == 0) {
                    adaptor.addChild(root_0, p_ExprSingle613.getTree());
                }

            }

            retval.stop = input.LT(-1);

            if (state.backtracking == 0) {

                retval.tree = (XQDTCommonTree)adaptor.rulePostProcessing(root_0);
                adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        } catch (RecognitionException re) {
            reportError(re);
            recover(input, re);
            retval.tree = (XQDTCommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        } finally {
        }
        return retval;
    }

    // $ANTLR end "p_SourceExpr"

    public static class p_TargetExpr_return extends ParserRuleReturnScope {
        XQDTCommonTree tree;

        public Object getTree() {
            return tree;
        }
    };

    // $ANTLR start "p_TargetExpr"
    // XQueryParser.g:1520:1: p_TargetExpr : p_ExprSingle[true] ;
    public final XQueryParser.p_TargetExpr_return p_TargetExpr() throws RecognitionException {
        XQueryParser.p_TargetExpr_return retval = new XQueryParser.p_TargetExpr_return();
        retval.start = input.LT(1);

        XQDTCommonTree root_0 = null;

        XQueryParser.p_ExprSingle_return p_ExprSingle614 = null;

        try {
            // XQueryParser.g:1521:9: ( p_ExprSingle[true] )
            // XQueryParser.g:1521:11: p_ExprSingle[true]
            {
                root_0 = (XQDTCommonTree)adaptor.nil();

                pushFollow(FOLLOW_p_ExprSingle_in_p_TargetExpr13552);
                p_ExprSingle614 = p_ExprSingle(true);

                state._fsp--;
                if (state.failed) {
                    return retval;
                }
                if (state.backtracking == 0) {
                    adaptor.addChild(root_0, p_ExprSingle614.getTree());
                }

            }

            retval.stop = input.LT(-1);

            if (state.backtracking == 0) {

                retval.tree = (XQDTCommonTree)adaptor.rulePostProcessing(root_0);
                adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        } catch (RecognitionException re) {
            reportError(re);
            recover(input, re);
            retval.tree = (XQDTCommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        } finally {
        }
        return retval;
    }

    // $ANTLR end "p_TargetExpr"

    public static class p_NewNameExpr_return extends ParserRuleReturnScope {
        XQDTCommonTree tree;

        public Object getTree() {
            return tree;
        }
    };

    // $ANTLR start "p_NewNameExpr"
    // XQueryParser.g:1525:1: p_NewNameExpr : p_ExprSingle[true] ;
    public final XQueryParser.p_NewNameExpr_return p_NewNameExpr() throws RecognitionException {
        XQueryParser.p_NewNameExpr_return retval = new XQueryParser.p_NewNameExpr_return();
        retval.start = input.LT(1);

        XQDTCommonTree root_0 = null;

        XQueryParser.p_ExprSingle_return p_ExprSingle615 = null;

        try {
            // XQueryParser.g:1526:9: ( p_ExprSingle[true] )
            // XQueryParser.g:1526:11: p_ExprSingle[true]
            {
                root_0 = (XQDTCommonTree)adaptor.nil();

                pushFollow(FOLLOW_p_ExprSingle_in_p_NewNameExpr13579);
                p_ExprSingle615 = p_ExprSingle(true);

                state._fsp--;
                if (state.failed) {
                    return retval;
                }
                if (state.backtracking == 0) {
                    adaptor.addChild(root_0, p_ExprSingle615.getTree());
                }

            }

            retval.stop = input.LT(-1);

            if (state.backtracking == 0) {

                retval.tree = (XQDTCommonTree)adaptor.rulePostProcessing(root_0);
                adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        } catch (RecognitionException re) {
            reportError(re);
            recover(input, re);
            retval.tree = (XQDTCommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        } finally {
        }
        return retval;
    }

    // $ANTLR end "p_NewNameExpr"

    public static class p_TransformExpr_return extends ParserRuleReturnScope {
        XQDTCommonTree tree;

        public Object getTree() {
            return tree;
        }
    };

    // $ANTLR start "p_TransformExpr"
    // XQueryParser.g:1530:1: p_TransformExpr : k+= COPY DOLLAR p_VarName BIND p_ExprSingle[true] ( COMMA DOLLAR p_VarName BIND p_ExprSingle[true] )* k+= MODIFY p_ExprSingle[true] k+= RETURN p_ExprSingle[true] ;
    public final XQueryParser.p_TransformExpr_return p_TransformExpr() throws RecognitionException {
        XQueryParser.p_TransformExpr_return retval = new XQueryParser.p_TransformExpr_return();
        retval.start = input.LT(1);

        XQDTCommonTree root_0 = null;

        CommonToken DOLLAR616 = null;
        CommonToken BIND618 = null;
        CommonToken COMMA620 = null;
        CommonToken DOLLAR621 = null;
        CommonToken BIND623 = null;
        CommonToken k = null;
        List<CommonToken> list_k = null;
        XQueryParser.p_VarName_return p_VarName617 = null;

        XQueryParser.p_ExprSingle_return p_ExprSingle619 = null;

        XQueryParser.p_VarName_return p_VarName622 = null;

        XQueryParser.p_ExprSingle_return p_ExprSingle624 = null;

        XQueryParser.p_ExprSingle_return p_ExprSingle625 = null;

        XQueryParser.p_ExprSingle_return p_ExprSingle626 = null;

        XQDTCommonTree DOLLAR616_tree = null;
        XQDTCommonTree BIND618_tree = null;
        XQDTCommonTree COMMA620_tree = null;
        XQDTCommonTree DOLLAR621_tree = null;
        XQDTCommonTree BIND623_tree = null;
        XQDTCommonTree k_tree = null;

        try {
            // XQueryParser.g:1531:9: (k+= COPY DOLLAR p_VarName BIND p_ExprSingle[true] ( COMMA DOLLAR p_VarName BIND p_ExprSingle[true] )* k+= MODIFY p_ExprSingle[true] k+= RETURN p_ExprSingle[true] )
            // XQueryParser.g:1531:11: k+= COPY DOLLAR p_VarName BIND p_ExprSingle[true] ( COMMA DOLLAR p_VarName BIND p_ExprSingle[true] )* k+= MODIFY p_ExprSingle[true] k+= RETURN p_ExprSingle[true]
            {
                root_0 = (XQDTCommonTree)adaptor.nil();

                k = (CommonToken)match(input, COPY, FOLLOW_COPY_in_p_TransformExpr13608);
                if (state.failed) {
                    return retval;
                }
                if (state.backtracking == 0) {
                    k_tree = (XQDTCommonTree)adaptor.create(k);
                    adaptor.addChild(root_0, k_tree);
                }
                if (list_k == null) {
                    list_k = new ArrayList<CommonToken>();
                }
                list_k.add(k);

                DOLLAR616 = (CommonToken)match(input, DOLLAR, FOLLOW_DOLLAR_in_p_TransformExpr13610);
                if (state.failed) {
                    return retval;
                }
                if (state.backtracking == 0) {
                    DOLLAR616_tree = (XQDTCommonTree)adaptor.create(DOLLAR616);
                    adaptor.addChild(root_0, DOLLAR616_tree);
                }
                pushFollow(FOLLOW_p_VarName_in_p_TransformExpr13612);
                p_VarName617 = p_VarName();

                state._fsp--;
                if (state.failed) {
                    return retval;
                }
                if (state.backtracking == 0) {
                    adaptor.addChild(root_0, p_VarName617.getTree());
                }
                BIND618 = (CommonToken)match(input, BIND, FOLLOW_BIND_in_p_TransformExpr13614);
                if (state.failed) {
                    return retval;
                }
                if (state.backtracking == 0) {
                    BIND618_tree = (XQDTCommonTree)adaptor.create(BIND618);
                    adaptor.addChild(root_0, BIND618_tree);
                }
                pushFollow(FOLLOW_p_ExprSingle_in_p_TransformExpr13616);
                p_ExprSingle619 = p_ExprSingle(true);

                state._fsp--;
                if (state.failed) {
                    return retval;
                }
                if (state.backtracking == 0) {
                    adaptor.addChild(root_0, p_ExprSingle619.getTree());
                }
                // XQueryParser.g:1531:60: ( COMMA DOLLAR p_VarName BIND p_ExprSingle[true] )*
                loop189: do {
                    int alt189 = 2;
                    int LA189_0 = input.LA(1);

                    if ((LA189_0 == COMMA)) {
                        alt189 = 1;
                    }

                    switch (alt189) {
                    case 1:
                        // XQueryParser.g:1531:61: COMMA DOLLAR p_VarName BIND p_ExprSingle[true]
                    {
                        COMMA620 = (CommonToken)match(input, COMMA, FOLLOW_COMMA_in_p_TransformExpr13620);
                        if (state.failed) {
                            return retval;
                        }
                        if (state.backtracking == 0) {
                            COMMA620_tree = (XQDTCommonTree)adaptor.create(COMMA620);
                            adaptor.addChild(root_0, COMMA620_tree);
                        }
                        DOLLAR621 = (CommonToken)match(input, DOLLAR, FOLLOW_DOLLAR_in_p_TransformExpr13622);
                        if (state.failed) {
                            return retval;
                        }
                        if (state.backtracking == 0) {
                            DOLLAR621_tree = (XQDTCommonTree)adaptor.create(DOLLAR621);
                            adaptor.addChild(root_0, DOLLAR621_tree);
                        }
                        pushFollow(FOLLOW_p_VarName_in_p_TransformExpr13624);
                        p_VarName622 = p_VarName();

                        state._fsp--;
                        if (state.failed) {
                            return retval;
                        }
                        if (state.backtracking == 0) {
                            adaptor.addChild(root_0, p_VarName622.getTree());
                        }
                        BIND623 = (CommonToken)match(input, BIND, FOLLOW_BIND_in_p_TransformExpr13626);
                        if (state.failed) {
                            return retval;
                        }
                        if (state.backtracking == 0) {
                            BIND623_tree = (XQDTCommonTree)adaptor.create(BIND623);
                            adaptor.addChild(root_0, BIND623_tree);
                        }
                        pushFollow(FOLLOW_p_ExprSingle_in_p_TransformExpr13628);
                        p_ExprSingle624 = p_ExprSingle(true);

                        state._fsp--;
                        if (state.failed) {
                            return retval;
                        }
                        if (state.backtracking == 0) {
                            adaptor.addChild(root_0, p_ExprSingle624.getTree());
                        }

                    }
                    break;

                    default:
                        break loop189;
                    }
                } while (true);

                k = (CommonToken)match(input, MODIFY, FOLLOW_MODIFY_in_p_TransformExpr13635);
                if (state.failed) {
                    return retval;
                }
                if (state.backtracking == 0) {
                    k_tree = (XQDTCommonTree)adaptor.create(k);
                    adaptor.addChild(root_0, k_tree);
                }
                if (list_k == null) {
                    list_k = new ArrayList<CommonToken>();
                }
                list_k.add(k);

                pushFollow(FOLLOW_p_ExprSingle_in_p_TransformExpr13637);
                p_ExprSingle625 = p_ExprSingle(true);

                state._fsp--;
                if (state.failed) {
                    return retval;
                }
                if (state.backtracking == 0) {
                    adaptor.addChild(root_0, p_ExprSingle625.getTree());
                }
                k = (CommonToken)match(input, RETURN, FOLLOW_RETURN_in_p_TransformExpr13642);
                if (state.failed) {
                    return retval;
                }
                if (state.backtracking == 0) {
                    k_tree = (XQDTCommonTree)adaptor.create(k);
                    adaptor.addChild(root_0, k_tree);
                }
                if (list_k == null) {
                    list_k = new ArrayList<CommonToken>();
                }
                list_k.add(k);

                pushFollow(FOLLOW_p_ExprSingle_in_p_TransformExpr13644);
                p_ExprSingle626 = p_ExprSingle(true);

                state._fsp--;
                if (state.failed) {
                    return retval;
                }
                if (state.backtracking == 0) {
                    adaptor.addChild(root_0, p_ExprSingle626.getTree());
                }
                if (state.backtracking == 0) {
                    ak(list_k);
                }

            }

            retval.stop = input.LT(-1);

            if (state.backtracking == 0) {

                retval.tree = (XQDTCommonTree)adaptor.rulePostProcessing(root_0);
                adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        } catch (RecognitionException re) {
            reportError(re);
            recover(input, re);
            retval.tree = (XQDTCommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        } finally {
        }
        return retval;
    }

    // $ANTLR end "p_TransformExpr"

    public static class pm_FTOptionDecl_return extends ParserRuleReturnScope {
        XQDTCommonTree tree;

        public Object getTree() {
            return tree;
        }
    };

    // $ANTLR start "pm_FTOptionDecl"
    // XQueryParser.g:1541:1: pm_FTOptionDecl : k+= DECLARE k+= FT_OPTION p_FTMatchOptions SEMICOLON ;
    public final XQueryParser.pm_FTOptionDecl_return pm_FTOptionDecl() throws RecognitionException {
        XQueryParser.pm_FTOptionDecl_return retval = new XQueryParser.pm_FTOptionDecl_return();
        retval.start = input.LT(1);

        XQDTCommonTree root_0 = null;

        CommonToken SEMICOLON628 = null;
        CommonToken k = null;
        List<CommonToken> list_k = null;
        XQueryParser.p_FTMatchOptions_return p_FTMatchOptions627 = null;

        XQDTCommonTree SEMICOLON628_tree = null;
        XQDTCommonTree k_tree = null;

        try {
            // XQueryParser.g:1542:9: (k+= DECLARE k+= FT_OPTION p_FTMatchOptions SEMICOLON )
            // XQueryParser.g:1542:11: k+= DECLARE k+= FT_OPTION p_FTMatchOptions SEMICOLON
            {
                root_0 = (XQDTCommonTree)adaptor.nil();

                k = (CommonToken)match(input, DECLARE, FOLLOW_DECLARE_in_pm_FTOptionDecl13682);
                if (state.failed) {
                    return retval;
                }
                if (state.backtracking == 0) {
                    k_tree = (XQDTCommonTree)adaptor.create(k);
                    adaptor.addChild(root_0, k_tree);
                }
                if (list_k == null) {
                    list_k = new ArrayList<CommonToken>();
                }
                list_k.add(k);

                k = (CommonToken)match(input, FT_OPTION, FOLLOW_FT_OPTION_in_pm_FTOptionDecl13686);
                if (state.failed) {
                    return retval;
                }
                if (state.backtracking == 0) {
                    k_tree = (XQDTCommonTree)adaptor.create(k);
                    adaptor.addChild(root_0, k_tree);
                }
                if (list_k == null) {
                    list_k = new ArrayList<CommonToken>();
                }
                list_k.add(k);

                pushFollow(FOLLOW_p_FTMatchOptions_in_pm_FTOptionDecl13688);
                p_FTMatchOptions627 = p_FTMatchOptions();

                state._fsp--;
                if (state.failed) {
                    return retval;
                }
                if (state.backtracking == 0) {
                    adaptor.addChild(root_0, p_FTMatchOptions627.getTree());
                }
                SEMICOLON628 = (CommonToken)match(input, SEMICOLON, FOLLOW_SEMICOLON_in_pm_FTOptionDecl13690);
                if (state.failed) {
                    return retval;
                }
                if (state.backtracking == 0) {
                    SEMICOLON628_tree = (XQDTCommonTree)adaptor.create(SEMICOLON628);
                    adaptor.addChild(root_0, SEMICOLON628_tree);
                }
                if (state.backtracking == 0) {
                    ak(list_k);
                }

            }

            retval.stop = input.LT(-1);

            if (state.backtracking == 0) {

                retval.tree = (XQDTCommonTree)adaptor.rulePostProcessing(root_0);
                adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        } catch (RecognitionException re) {
            reportError(re);
            recover(input, re);
            retval.tree = (XQDTCommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        } finally {
        }
        return retval;
    }

    // $ANTLR end "pm_FTOptionDecl"

    public static class p_FTScoreVar_return extends ParserRuleReturnScope {
        XQDTCommonTree tree;

        public Object getTree() {
            return tree;
        }
    };

    // $ANTLR start "p_FTScoreVar"
    // XQueryParser.g:1546:1: p_FTScoreVar : ks= SCORE DOLLAR p_VarName ;
    public final XQueryParser.p_FTScoreVar_return p_FTScoreVar() throws RecognitionException {
        XQueryParser.p_FTScoreVar_return retval = new XQueryParser.p_FTScoreVar_return();
        retval.start = input.LT(1);

        XQDTCommonTree root_0 = null;

        CommonToken ks = null;
        CommonToken DOLLAR629 = null;
        XQueryParser.p_VarName_return p_VarName630 = null;

        XQDTCommonTree ks_tree = null;
        XQDTCommonTree DOLLAR629_tree = null;

        try {
            // XQueryParser.g:1547:9: (ks= SCORE DOLLAR p_VarName )
            // XQueryParser.g:1547:11: ks= SCORE DOLLAR p_VarName
            {
                root_0 = (XQDTCommonTree)adaptor.nil();

                ks = (CommonToken)match(input, SCORE, FOLLOW_SCORE_in_p_FTScoreVar13720);
                if (state.failed) {
                    return retval;
                }
                if (state.backtracking == 0) {
                    ks_tree = (XQDTCommonTree)adaptor.create(ks);
                    adaptor.addChild(root_0, ks_tree);
                }
                if (state.backtracking == 0) {
                    ak(ks);
                }
                DOLLAR629 = (CommonToken)match(input, DOLLAR, FOLLOW_DOLLAR_in_p_FTScoreVar13724);
                if (state.failed) {
                    return retval;
                }
                if (state.backtracking == 0) {
                    DOLLAR629_tree = (XQDTCommonTree)adaptor.create(DOLLAR629);
                    adaptor.addChild(root_0, DOLLAR629_tree);
                }
                pushFollow(FOLLOW_p_VarName_in_p_FTScoreVar13726);
                p_VarName630 = p_VarName();

                state._fsp--;
                if (state.failed) {
                    return retval;
                }
                if (state.backtracking == 0) {
                    adaptor.addChild(root_0, p_VarName630.getTree());
                }

            }

            retval.stop = input.LT(-1);

            if (state.backtracking == 0) {

                retval.tree = (XQDTCommonTree)adaptor.rulePostProcessing(root_0);
                adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        } catch (RecognitionException re) {
            reportError(re);
            recover(input, re);
            retval.tree = (XQDTCommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        } finally {
        }
        return retval;
    }

    // $ANTLR end "p_FTScoreVar"

    public static class p_FTContainsExpr_return extends ParserRuleReturnScope {
        XQDTCommonTree tree;

        public Object getTree() {
            return tree;
        }
    };

    // $ANTLR start "p_FTContainsExpr"
    // XQueryParser.g:1551:1: p_FTContainsExpr : p_StringConcatExpr (k+= CONTAINS k+= TEXT p_FTSelection ( p_FTIgnoreOption )? )? ;
    public final XQueryParser.p_FTContainsExpr_return p_FTContainsExpr() throws RecognitionException {
        XQueryParser.p_FTContainsExpr_return retval = new XQueryParser.p_FTContainsExpr_return();
        retval.start = input.LT(1);

        XQDTCommonTree root_0 = null;

        CommonToken k = null;
        List<CommonToken> list_k = null;
        XQueryParser.p_StringConcatExpr_return p_StringConcatExpr631 = null;

        XQueryParser.p_FTSelection_return p_FTSelection632 = null;

        XQueryParser.p_FTIgnoreOption_return p_FTIgnoreOption633 = null;

        XQDTCommonTree k_tree = null;

        try {
            // XQueryParser.g:1552:9: ( p_StringConcatExpr (k+= CONTAINS k+= TEXT p_FTSelection ( p_FTIgnoreOption )? )? )
            // XQueryParser.g:1552:11: p_StringConcatExpr (k+= CONTAINS k+= TEXT p_FTSelection ( p_FTIgnoreOption )? )?
            {
                root_0 = (XQDTCommonTree)adaptor.nil();

                pushFollow(FOLLOW_p_StringConcatExpr_in_p_FTContainsExpr13752);
                p_StringConcatExpr631 = p_StringConcatExpr();

                state._fsp--;
                if (state.failed) {
                    return retval;
                }
                if (state.backtracking == 0) {
                    adaptor.addChild(root_0, p_StringConcatExpr631.getTree());
                }
                // XQueryParser.g:1552:30: (k+= CONTAINS k+= TEXT p_FTSelection ( p_FTIgnoreOption )? )?
                int alt191 = 2;
                int LA191_0 = input.LA(1);

                if ((LA191_0 == CONTAINS)) {
                    alt191 = 1;
                }
                switch (alt191) {
                case 1:
                    // XQueryParser.g:1552:32: k+= CONTAINS k+= TEXT p_FTSelection ( p_FTIgnoreOption )?
                {
                    k = (CommonToken)match(input, CONTAINS, FOLLOW_CONTAINS_in_p_FTContainsExpr13758);
                    if (state.failed) {
                        return retval;
                    }
                    if (state.backtracking == 0) {
                        k_tree = (XQDTCommonTree)adaptor.create(k);
                        adaptor.addChild(root_0, k_tree);
                    }
                    if (list_k == null) {
                        list_k = new ArrayList<CommonToken>();
                    }
                    list_k.add(k);

                    k = (CommonToken)match(input, TEXT, FOLLOW_TEXT_in_p_FTContainsExpr13762);
                    if (state.failed) {
                        return retval;
                    }
                    if (state.backtracking == 0) {
                        k_tree = (XQDTCommonTree)adaptor.create(k);
                        adaptor.addChild(root_0, k_tree);
                    }
                    if (list_k == null) {
                        list_k = new ArrayList<CommonToken>();
                    }
                    list_k.add(k);

                    if (state.backtracking == 0) {
                        ak(list_k);
                    }
                    pushFollow(FOLLOW_p_FTSelection_in_p_FTContainsExpr13766);
                    p_FTSelection632 = p_FTSelection();

                    state._fsp--;
                    if (state.failed) {
                        return retval;
                    }
                    if (state.backtracking == 0) {
                        adaptor.addChild(root_0, p_FTSelection632.getTree());
                    }
                    // XQueryParser.g:1552:76: ( p_FTIgnoreOption )?
                    int alt190 = 2;
                    int LA190_0 = input.LA(1);

                    if ((LA190_0 == WITHOUT)) {
                        alt190 = 1;
                    }
                    switch (alt190) {
                    case 1:
                        // XQueryParser.g:1552:76: p_FTIgnoreOption
                    {
                        pushFollow(FOLLOW_p_FTIgnoreOption_in_p_FTContainsExpr13768);
                        p_FTIgnoreOption633 = p_FTIgnoreOption();

                        state._fsp--;
                        if (state.failed) {
                            return retval;
                        }
                        if (state.backtracking == 0) {
                            adaptor.addChild(root_0, p_FTIgnoreOption633.getTree());
                        }

                    }
                    break;

                    }

                }
                    break;

                }

            }

            retval.stop = input.LT(-1);

            if (state.backtracking == 0) {

                retval.tree = (XQDTCommonTree)adaptor.rulePostProcessing(root_0);
                adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        } catch (RecognitionException re) {
            reportError(re);
            recover(input, re);
            retval.tree = (XQDTCommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        } finally {
        }
        return retval;
    }

    // $ANTLR end "p_FTContainsExpr"

    public static class p_FTSelection_return extends ParserRuleReturnScope {
        XQDTCommonTree tree;

        public Object getTree() {
            return tree;
        }
    };

    // $ANTLR start "p_FTSelection"
    // XQueryParser.g:1556:1: p_FTSelection : p_FTOr ( p_FTPosFilter )* ;
    public final XQueryParser.p_FTSelection_return p_FTSelection() throws RecognitionException {
        XQueryParser.p_FTSelection_return retval = new XQueryParser.p_FTSelection_return();
        retval.start = input.LT(1);

        XQDTCommonTree root_0 = null;

        XQueryParser.p_FTOr_return p_FTOr634 = null;

        XQueryParser.p_FTPosFilter_return p_FTPosFilter635 = null;

        try {
            // XQueryParser.g:1557:9: ( p_FTOr ( p_FTPosFilter )* )
            // XQueryParser.g:1557:11: p_FTOr ( p_FTPosFilter )*
            {
                root_0 = (XQDTCommonTree)adaptor.nil();

                pushFollow(FOLLOW_p_FTOr_in_p_FTSelection13798);
                p_FTOr634 = p_FTOr();

                state._fsp--;
                if (state.failed) {
                    return retval;
                }
                if (state.backtracking == 0) {
                    adaptor.addChild(root_0, p_FTOr634.getTree());
                }
                // XQueryParser.g:1557:18: ( p_FTPosFilter )*
                loop192: do {
                    int alt192 = 2;
                    int LA192_0 = input.LA(1);

                    if ((LA192_0 == AT || LA192_0 == ORDERED || LA192_0 == WINDOW
                            || (LA192_0 >= DIFFERENT && LA192_0 <= ENTIRE) || LA192_0 == SAME)) {
                        alt192 = 1;
                    }

                    switch (alt192) {
                    case 1:
                        // XQueryParser.g:1557:18: p_FTPosFilter
                    {
                        pushFollow(FOLLOW_p_FTPosFilter_in_p_FTSelection13800);
                        p_FTPosFilter635 = p_FTPosFilter();

                        state._fsp--;
                        if (state.failed) {
                            return retval;
                        }
                        if (state.backtracking == 0) {
                            adaptor.addChild(root_0, p_FTPosFilter635.getTree());
                        }

                    }
                    break;

                    default:
                        break loop192;
                    }
                } while (true);

            }

            retval.stop = input.LT(-1);

            if (state.backtracking == 0) {

                retval.tree = (XQDTCommonTree)adaptor.rulePostProcessing(root_0);
                adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        } catch (RecognitionException re) {
            reportError(re);
            recover(input, re);
            retval.tree = (XQDTCommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        } finally {
        }
        return retval;
    }

    // $ANTLR end "p_FTSelection"

    public static class p_FTWeight_return extends ParserRuleReturnScope {
        XQDTCommonTree tree;

        public Object getTree() {
            return tree;
        }
    };

    // $ANTLR start "p_FTWeight"
    // XQueryParser.g:1561:1: p_FTWeight : kw= WEIGHT LBRACKET p_Expr[true,true] RBRACKET ;
    public final XQueryParser.p_FTWeight_return p_FTWeight() throws RecognitionException {
        XQueryParser.p_FTWeight_return retval = new XQueryParser.p_FTWeight_return();
        retval.start = input.LT(1);

        XQDTCommonTree root_0 = null;

        CommonToken kw = null;
        CommonToken LBRACKET636 = null;
        CommonToken RBRACKET638 = null;
        XQueryParser.p_Expr_return p_Expr637 = null;

        XQDTCommonTree kw_tree = null;
        XQDTCommonTree LBRACKET636_tree = null;
        XQDTCommonTree RBRACKET638_tree = null;

        try {
            // XQueryParser.g:1562:9: (kw= WEIGHT LBRACKET p_Expr[true,true] RBRACKET )
            // XQueryParser.g:1562:11: kw= WEIGHT LBRACKET p_Expr[true,true] RBRACKET
            {
                root_0 = (XQDTCommonTree)adaptor.nil();

                kw = (CommonToken)match(input, WEIGHT, FOLLOW_WEIGHT_in_p_FTWeight13829);
                if (state.failed) {
                    return retval;
                }
                if (state.backtracking == 0) {
                    kw_tree = (XQDTCommonTree)adaptor.create(kw);
                    adaptor.addChild(root_0, kw_tree);
                }
                if (state.backtracking == 0) {
                    ak(kw);
                }
                LBRACKET636 = (CommonToken)match(input, LBRACKET, FOLLOW_LBRACKET_in_p_FTWeight13833);
                if (state.failed) {
                    return retval;
                }
                if (state.backtracking == 0) {
                    LBRACKET636_tree = (XQDTCommonTree)adaptor.create(LBRACKET636);
                    adaptor.addChild(root_0, LBRACKET636_tree);
                }
                pushFollow(FOLLOW_p_Expr_in_p_FTWeight13835);
                p_Expr637 = p_Expr(true, true);

                state._fsp--;
                if (state.failed) {
                    return retval;
                }
                if (state.backtracking == 0) {
                    adaptor.addChild(root_0, p_Expr637.getTree());
                }
                RBRACKET638 = (CommonToken)match(input, RBRACKET, FOLLOW_RBRACKET_in_p_FTWeight13838);
                if (state.failed) {
                    return retval;
                }
                if (state.backtracking == 0) {
                    RBRACKET638_tree = (XQDTCommonTree)adaptor.create(RBRACKET638);
                    adaptor.addChild(root_0, RBRACKET638_tree);
                }

            }

            retval.stop = input.LT(-1);

            if (state.backtracking == 0) {

                retval.tree = (XQDTCommonTree)adaptor.rulePostProcessing(root_0);
                adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        } catch (RecognitionException re) {
            reportError(re);
            recover(input, re);
            retval.tree = (XQDTCommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        } finally {
        }
        return retval;
    }

    // $ANTLR end "p_FTWeight"

    public static class p_FTOr_return extends ParserRuleReturnScope {
        XQDTCommonTree tree;

        public Object getTree() {
            return tree;
        }
    };

    // $ANTLR start "p_FTOr"
    // XQueryParser.g:1566:1: p_FTOr : p_FTAnd (ko= FTOR p_FTAnd )* ;
    public final XQueryParser.p_FTOr_return p_FTOr() throws RecognitionException {
        XQueryParser.p_FTOr_return retval = new XQueryParser.p_FTOr_return();
        retval.start = input.LT(1);

        XQDTCommonTree root_0 = null;

        CommonToken ko = null;
        XQueryParser.p_FTAnd_return p_FTAnd639 = null;

        XQueryParser.p_FTAnd_return p_FTAnd640 = null;

        XQDTCommonTree ko_tree = null;

        try {
            // XQueryParser.g:1567:9: ( p_FTAnd (ko= FTOR p_FTAnd )* )
            // XQueryParser.g:1567:11: p_FTAnd (ko= FTOR p_FTAnd )*
            {
                root_0 = (XQDTCommonTree)adaptor.nil();

                pushFollow(FOLLOW_p_FTAnd_in_p_FTOr13864);
                p_FTAnd639 = p_FTAnd();

                state._fsp--;
                if (state.failed) {
                    return retval;
                }
                if (state.backtracking == 0) {
                    adaptor.addChild(root_0, p_FTAnd639.getTree());
                }
                // XQueryParser.g:1567:19: (ko= FTOR p_FTAnd )*
                loop193: do {
                    int alt193 = 2;
                    int LA193_0 = input.LA(1);

                    if ((LA193_0 == FTOR)) {
                        alt193 = 1;
                    }

                    switch (alt193) {
                    case 1:
                        // XQueryParser.g:1567:21: ko= FTOR p_FTAnd
                    {
                        ko = (CommonToken)match(input, FTOR, FOLLOW_FTOR_in_p_FTOr13870);
                        if (state.failed) {
                            return retval;
                        }
                        if (state.backtracking == 0) {
                            ko_tree = (XQDTCommonTree)adaptor.create(ko);
                            adaptor.addChild(root_0, ko_tree);
                        }
                        if (state.backtracking == 0) {
                            ak(ko);
                        }
                        pushFollow(FOLLOW_p_FTAnd_in_p_FTOr13874);
                        p_FTAnd640 = p_FTAnd();

                        state._fsp--;
                        if (state.failed) {
                            return retval;
                        }
                        if (state.backtracking == 0) {
                            adaptor.addChild(root_0, p_FTAnd640.getTree());
                        }

                    }
                    break;

                    default:
                        break loop193;
                    }
                } while (true);

            }

            retval.stop = input.LT(-1);

            if (state.backtracking == 0) {

                retval.tree = (XQDTCommonTree)adaptor.rulePostProcessing(root_0);
                adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        } catch (RecognitionException re) {
            reportError(re);
            recover(input, re);
            retval.tree = (XQDTCommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        } finally {
        }
        return retval;
    }

    // $ANTLR end "p_FTOr"

    public static class p_FTAnd_return extends ParserRuleReturnScope {
        XQDTCommonTree tree;

        public Object getTree() {
            return tree;
        }
    };

    // $ANTLR start "p_FTAnd"
    // XQueryParser.g:1571:1: p_FTAnd : p_FTMildNot (ka= FTAND p_FTMildNot )* ;
    public final XQueryParser.p_FTAnd_return p_FTAnd() throws RecognitionException {
        XQueryParser.p_FTAnd_return retval = new XQueryParser.p_FTAnd_return();
        retval.start = input.LT(1);

        XQDTCommonTree root_0 = null;

        CommonToken ka = null;
        XQueryParser.p_FTMildNot_return p_FTMildNot641 = null;

        XQueryParser.p_FTMildNot_return p_FTMildNot642 = null;

        XQDTCommonTree ka_tree = null;

        try {
            // XQueryParser.g:1572:9: ( p_FTMildNot (ka= FTAND p_FTMildNot )* )
            // XQueryParser.g:1572:11: p_FTMildNot (ka= FTAND p_FTMildNot )*
            {
                root_0 = (XQDTCommonTree)adaptor.nil();

                pushFollow(FOLLOW_p_FTMildNot_in_p_FTAnd13903);
                p_FTMildNot641 = p_FTMildNot();

                state._fsp--;
                if (state.failed) {
                    return retval;
                }
                if (state.backtracking == 0) {
                    adaptor.addChild(root_0, p_FTMildNot641.getTree());
                }
                // XQueryParser.g:1572:23: (ka= FTAND p_FTMildNot )*
                loop194: do {
                    int alt194 = 2;
                    int LA194_0 = input.LA(1);

                    if ((LA194_0 == FTAND)) {
                        alt194 = 1;
                    }

                    switch (alt194) {
                    case 1:
                        // XQueryParser.g:1572:25: ka= FTAND p_FTMildNot
                    {
                        ka = (CommonToken)match(input, FTAND, FOLLOW_FTAND_in_p_FTAnd13909);
                        if (state.failed) {
                            return retval;
                        }
                        if (state.backtracking == 0) {
                            ka_tree = (XQDTCommonTree)adaptor.create(ka);
                            adaptor.addChild(root_0, ka_tree);
                        }
                        if (state.backtracking == 0) {
                            ak(ka);
                        }
                        pushFollow(FOLLOW_p_FTMildNot_in_p_FTAnd13913);
                        p_FTMildNot642 = p_FTMildNot();

                        state._fsp--;
                        if (state.failed) {
                            return retval;
                        }
                        if (state.backtracking == 0) {
                            adaptor.addChild(root_0, p_FTMildNot642.getTree());
                        }

                    }
                    break;

                    default:
                        break loop194;
                    }
                } while (true);

            }

            retval.stop = input.LT(-1);

            if (state.backtracking == 0) {

                retval.tree = (XQDTCommonTree)adaptor.rulePostProcessing(root_0);
                adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        } catch (RecognitionException re) {
            reportError(re);
            recover(input, re);
            retval.tree = (XQDTCommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        } finally {
        }
        return retval;
    }

    // $ANTLR end "p_FTAnd"

    public static class p_FTMildNot_return extends ParserRuleReturnScope {
        XQDTCommonTree tree;

        public Object getTree() {
            return tree;
        }
    };

    // $ANTLR start "p_FTMildNot"
    // XQueryParser.g:1576:1: p_FTMildNot : p_FTUnaryNot (k+= NOT k+= IN p_FTUnaryNot )* ;
    public final XQueryParser.p_FTMildNot_return p_FTMildNot() throws RecognitionException {
        XQueryParser.p_FTMildNot_return retval = new XQueryParser.p_FTMildNot_return();
        retval.start = input.LT(1);

        XQDTCommonTree root_0 = null;

        CommonToken k = null;
        List<CommonToken> list_k = null;
        XQueryParser.p_FTUnaryNot_return p_FTUnaryNot643 = null;

        XQueryParser.p_FTUnaryNot_return p_FTUnaryNot644 = null;

        XQDTCommonTree k_tree = null;

        try {
            // XQueryParser.g:1577:9: ( p_FTUnaryNot (k+= NOT k+= IN p_FTUnaryNot )* )
            // XQueryParser.g:1577:11: p_FTUnaryNot (k+= NOT k+= IN p_FTUnaryNot )*
            {
                root_0 = (XQDTCommonTree)adaptor.nil();

                pushFollow(FOLLOW_p_FTUnaryNot_in_p_FTMildNot13942);
                p_FTUnaryNot643 = p_FTUnaryNot();

                state._fsp--;
                if (state.failed) {
                    return retval;
                }
                if (state.backtracking == 0) {
                    adaptor.addChild(root_0, p_FTUnaryNot643.getTree());
                }
                // XQueryParser.g:1577:24: (k+= NOT k+= IN p_FTUnaryNot )*
                loop195: do {
                    int alt195 = 2;
                    int LA195_0 = input.LA(1);

                    if ((LA195_0 == NOT)) {
                        alt195 = 1;
                    }

                    switch (alt195) {
                    case 1:
                        // XQueryParser.g:1577:26: k+= NOT k+= IN p_FTUnaryNot
                    {
                        k = (CommonToken)match(input, NOT, FOLLOW_NOT_in_p_FTMildNot13948);
                        if (state.failed) {
                            return retval;
                        }
                        if (state.backtracking == 0) {
                            k_tree = (XQDTCommonTree)adaptor.create(k);
                            adaptor.addChild(root_0, k_tree);
                        }
                        if (list_k == null) {
                            list_k = new ArrayList<CommonToken>();
                        }
                        list_k.add(k);

                        k = (CommonToken)match(input, IN, FOLLOW_IN_in_p_FTMildNot13952);
                        if (state.failed) {
                            return retval;
                        }
                        if (state.backtracking == 0) {
                            k_tree = (XQDTCommonTree)adaptor.create(k);
                            adaptor.addChild(root_0, k_tree);
                        }
                        if (list_k == null) {
                            list_k = new ArrayList<CommonToken>();
                        }
                        list_k.add(k);

                        if (state.backtracking == 0) {
                            ak(list_k);
                        }
                        pushFollow(FOLLOW_p_FTUnaryNot_in_p_FTMildNot13956);
                        p_FTUnaryNot644 = p_FTUnaryNot();

                        state._fsp--;
                        if (state.failed) {
                            return retval;
                        }
                        if (state.backtracking == 0) {
                            adaptor.addChild(root_0, p_FTUnaryNot644.getTree());
                        }

                    }
                    break;

                    default:
                        break loop195;
                    }
                } while (true);

            }

            retval.stop = input.LT(-1);

            if (state.backtracking == 0) {

                retval.tree = (XQDTCommonTree)adaptor.rulePostProcessing(root_0);
                adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        } catch (RecognitionException re) {
            reportError(re);
            recover(input, re);
            retval.tree = (XQDTCommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        } finally {
        }
        return retval;
    }

    // $ANTLR end "p_FTMildNot"

    public static class p_FTUnaryNot_return extends ParserRuleReturnScope {
        XQDTCommonTree tree;

        public Object getTree() {
            return tree;
        }
    };

    // $ANTLR start "p_FTUnaryNot"
    // XQueryParser.g:1581:1: p_FTUnaryNot : (kn= FTNOT )? p_FTPrimaryWithOptions ;
    public final XQueryParser.p_FTUnaryNot_return p_FTUnaryNot() throws RecognitionException {
        XQueryParser.p_FTUnaryNot_return retval = new XQueryParser.p_FTUnaryNot_return();
        retval.start = input.LT(1);

        XQDTCommonTree root_0 = null;

        CommonToken kn = null;
        XQueryParser.p_FTPrimaryWithOptions_return p_FTPrimaryWithOptions645 = null;

        XQDTCommonTree kn_tree = null;

        try {
            // XQueryParser.g:1582:9: ( (kn= FTNOT )? p_FTPrimaryWithOptions )
            // XQueryParser.g:1582:11: (kn= FTNOT )? p_FTPrimaryWithOptions
            {
                root_0 = (XQDTCommonTree)adaptor.nil();

                // XQueryParser.g:1582:11: (kn= FTNOT )?
                int alt196 = 2;
                int LA196_0 = input.LA(1);

                if ((LA196_0 == FTNOT)) {
                    alt196 = 1;
                }
                switch (alt196) {
                case 1:
                    // XQueryParser.g:1582:13: kn= FTNOT
                {
                    kn = (CommonToken)match(input, FTNOT, FOLLOW_FTNOT_in_p_FTUnaryNot13989);
                    if (state.failed) {
                        return retval;
                    }
                    if (state.backtracking == 0) {
                        kn_tree = (XQDTCommonTree)adaptor.create(kn);
                        adaptor.addChild(root_0, kn_tree);
                    }
                    if (state.backtracking == 0) {
                        ak(kn);
                    }

                }
                    break;

                }

                pushFollow(FOLLOW_p_FTPrimaryWithOptions_in_p_FTUnaryNot13996);
                p_FTPrimaryWithOptions645 = p_FTPrimaryWithOptions();

                state._fsp--;
                if (state.failed) {
                    return retval;
                }
                if (state.backtracking == 0) {
                    adaptor.addChild(root_0, p_FTPrimaryWithOptions645.getTree());
                }

            }

            retval.stop = input.LT(-1);

            if (state.backtracking == 0) {

                retval.tree = (XQDTCommonTree)adaptor.rulePostProcessing(root_0);
                adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        } catch (RecognitionException re) {
            reportError(re);
            recover(input, re);
            retval.tree = (XQDTCommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        } finally {
        }
        return retval;
    }

    // $ANTLR end "p_FTUnaryNot"

    public static class p_FTPrimaryWithOptions_return extends ParserRuleReturnScope {
        XQDTCommonTree tree;

        public Object getTree() {
            return tree;
        }
    };

    // $ANTLR start "p_FTPrimaryWithOptions"
    // XQueryParser.g:1586:1: p_FTPrimaryWithOptions : p_FTPrimary ( p_FTMatchOptions )? ( p_FTWeight )? ;
    public final XQueryParser.p_FTPrimaryWithOptions_return p_FTPrimaryWithOptions() throws RecognitionException {
        XQueryParser.p_FTPrimaryWithOptions_return retval = new XQueryParser.p_FTPrimaryWithOptions_return();
        retval.start = input.LT(1);

        XQDTCommonTree root_0 = null;

        XQueryParser.p_FTPrimary_return p_FTPrimary646 = null;

        XQueryParser.p_FTMatchOptions_return p_FTMatchOptions647 = null;

        XQueryParser.p_FTWeight_return p_FTWeight648 = null;

        try {
            // XQueryParser.g:1587:9: ( p_FTPrimary ( p_FTMatchOptions )? ( p_FTWeight )? )
            // XQueryParser.g:1587:11: p_FTPrimary ( p_FTMatchOptions )? ( p_FTWeight )?
            {
                root_0 = (XQDTCommonTree)adaptor.nil();

                pushFollow(FOLLOW_p_FTPrimary_in_p_FTPrimaryWithOptions14022);
                p_FTPrimary646 = p_FTPrimary();

                state._fsp--;
                if (state.failed) {
                    return retval;
                }
                if (state.backtracking == 0) {
                    adaptor.addChild(root_0, p_FTPrimary646.getTree());
                }
                // XQueryParser.g:1587:23: ( p_FTMatchOptions )?
                int alt197 = 2;
                int LA197_0 = input.LA(1);

                if ((LA197_0 == USING)) {
                    alt197 = 1;
                }
                switch (alt197) {
                case 1:
                    // XQueryParser.g:1587:23: p_FTMatchOptions
                {
                    pushFollow(FOLLOW_p_FTMatchOptions_in_p_FTPrimaryWithOptions14024);
                    p_FTMatchOptions647 = p_FTMatchOptions();

                    state._fsp--;
                    if (state.failed) {
                        return retval;
                    }
                    if (state.backtracking == 0) {
                        adaptor.addChild(root_0, p_FTMatchOptions647.getTree());
                    }

                }
                    break;

                }

                // XQueryParser.g:1587:41: ( p_FTWeight )?
                int alt198 = 2;
                int LA198_0 = input.LA(1);

                if ((LA198_0 == WEIGHT)) {
                    alt198 = 1;
                }
                switch (alt198) {
                case 1:
                    // XQueryParser.g:1587:41: p_FTWeight
                {
                    pushFollow(FOLLOW_p_FTWeight_in_p_FTPrimaryWithOptions14027);
                    p_FTWeight648 = p_FTWeight();

                    state._fsp--;
                    if (state.failed) {
                        return retval;
                    }
                    if (state.backtracking == 0) {
                        adaptor.addChild(root_0, p_FTWeight648.getTree());
                    }

                }
                    break;

                }

            }

            retval.stop = input.LT(-1);

            if (state.backtracking == 0) {

                retval.tree = (XQDTCommonTree)adaptor.rulePostProcessing(root_0);
                adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        } catch (RecognitionException re) {
            reportError(re);
            recover(input, re);
            retval.tree = (XQDTCommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        } finally {
        }
        return retval;
    }

    // $ANTLR end "p_FTPrimaryWithOptions"

    public static class p_FTPrimary_return extends ParserRuleReturnScope {
        XQDTCommonTree tree;

        public Object getTree() {
            return tree;
        }
    };

    // $ANTLR start "p_FTPrimary"
    // XQueryParser.g:1594:1: p_FTPrimary : ( ( p_FTWords ( p_FTTimes )? ) | ( LPAREN p_FTSelection RPAREN ) | p_FTExtensionSelection );
    public final XQueryParser.p_FTPrimary_return p_FTPrimary() throws RecognitionException {
        XQueryParser.p_FTPrimary_return retval = new XQueryParser.p_FTPrimary_return();
        retval.start = input.LT(1);

        XQDTCommonTree root_0 = null;

        CommonToken LPAREN651 = null;
        CommonToken RPAREN653 = null;
        XQueryParser.p_FTWords_return p_FTWords649 = null;

        XQueryParser.p_FTTimes_return p_FTTimes650 = null;

        XQueryParser.p_FTSelection_return p_FTSelection652 = null;

        XQueryParser.p_FTExtensionSelection_return p_FTExtensionSelection654 = null;

        XQDTCommonTree LPAREN651_tree = null;
        XQDTCommonTree RPAREN653_tree = null;

        try {
            // XQueryParser.g:1595:9: ( ( p_FTWords ( p_FTTimes )? ) | ( LPAREN p_FTSelection RPAREN ) | p_FTExtensionSelection )
            int alt200 = 3;
            switch (input.LA(1)) {
            case LBRACKET:
            case APOS:
            case QUOT: {
                alt200 = 1;
            }
                break;
            case LPAREN: {
                alt200 = 2;
            }
                break;
            case L_Pragma: {
                alt200 = 3;
            }
                break;
            default:
                if (state.backtracking > 0) {
                    state.failed = true;
                    return retval;
                }
                NoViableAltException nvae = new NoViableAltException("", 200, 0, input);

                throw nvae;
            }

            switch (alt200) {
            case 1:
                // XQueryParser.g:1595:11: ( p_FTWords ( p_FTTimes )? )
            {
                root_0 = (XQDTCommonTree)adaptor.nil();

                // XQueryParser.g:1595:11: ( p_FTWords ( p_FTTimes )? )
                // XQueryParser.g:1595:12: p_FTWords ( p_FTTimes )?
                {
                    pushFollow(FOLLOW_p_FTWords_in_p_FTPrimary14058);
                    p_FTWords649 = p_FTWords();

                    state._fsp--;
                    if (state.failed) {
                        return retval;
                    }
                    if (state.backtracking == 0) {
                        adaptor.addChild(root_0, p_FTWords649.getTree());
                    }
                    // XQueryParser.g:1595:22: ( p_FTTimes )?
                    int alt199 = 2;
                    int LA199_0 = input.LA(1);

                    if ((LA199_0 == OCCURS)) {
                        alt199 = 1;
                    }
                    switch (alt199) {
                    case 1:
                        // XQueryParser.g:1595:22: p_FTTimes
                    {
                        pushFollow(FOLLOW_p_FTTimes_in_p_FTPrimary14060);
                        p_FTTimes650 = p_FTTimes();

                        state._fsp--;
                        if (state.failed) {
                            return retval;
                        }
                        if (state.backtracking == 0) {
                            adaptor.addChild(root_0, p_FTTimes650.getTree());
                        }

                    }
                    break;

                    }

                }

            }
            break;
            case 2:
                // XQueryParser.g:1596:11: ( LPAREN p_FTSelection RPAREN )
            {
                root_0 = (XQDTCommonTree)adaptor.nil();

                // XQueryParser.g:1596:11: ( LPAREN p_FTSelection RPAREN )
                // XQueryParser.g:1596:12: LPAREN p_FTSelection RPAREN
                {
                    LPAREN651 = (CommonToken)match(input, LPAREN, FOLLOW_LPAREN_in_p_FTPrimary14075);
                    if (state.failed) {
                        return retval;
                    }
                    if (state.backtracking == 0) {
                        LPAREN651_tree = (XQDTCommonTree)adaptor.create(LPAREN651);
                        adaptor.addChild(root_0, LPAREN651_tree);
                    }
                    pushFollow(FOLLOW_p_FTSelection_in_p_FTPrimary14077);
                    p_FTSelection652 = p_FTSelection();

                    state._fsp--;
                    if (state.failed) {
                        return retval;
                    }
                    if (state.backtracking == 0) {
                        adaptor.addChild(root_0, p_FTSelection652.getTree());
                    }
                    RPAREN653 = (CommonToken)match(input, RPAREN, FOLLOW_RPAREN_in_p_FTPrimary14079);
                    if (state.failed) {
                        return retval;
                    }
                    if (state.backtracking == 0) {
                        RPAREN653_tree = (XQDTCommonTree)adaptor.create(RPAREN653);
                        adaptor.addChild(root_0, RPAREN653_tree);
                    }

                }

            }
            break;
            case 3:
                // XQueryParser.g:1597:11: p_FTExtensionSelection
            {
                root_0 = (XQDTCommonTree)adaptor.nil();

                pushFollow(FOLLOW_p_FTExtensionSelection_in_p_FTPrimary14092);
                p_FTExtensionSelection654 = p_FTExtensionSelection();

                state._fsp--;
                if (state.failed) {
                    return retval;
                }
                if (state.backtracking == 0) {
                    adaptor.addChild(root_0, p_FTExtensionSelection654.getTree());
                }

            }
            break;

            }
            retval.stop = input.LT(-1);

            if (state.backtracking == 0) {

                retval.tree = (XQDTCommonTree)adaptor.rulePostProcessing(root_0);
                adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        } catch (RecognitionException re) {
            reportError(re);
            recover(input, re);
            retval.tree = (XQDTCommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        } finally {
        }
        return retval;
    }

    // $ANTLR end "p_FTPrimary"

    public static class p_FTWords_return extends ParserRuleReturnScope {
        XQDTCommonTree tree;

        public Object getTree() {
            return tree;
        }
    };

    // $ANTLR start "p_FTWords"
    // XQueryParser.g:1601:1: p_FTWords : p_FTWordsValue ( p_FTAnyallOption )? ;
    public final XQueryParser.p_FTWords_return p_FTWords() throws RecognitionException {
        XQueryParser.p_FTWords_return retval = new XQueryParser.p_FTWords_return();
        retval.start = input.LT(1);

        XQDTCommonTree root_0 = null;

        XQueryParser.p_FTWordsValue_return p_FTWordsValue655 = null;

        XQueryParser.p_FTAnyallOption_return p_FTAnyallOption656 = null;

        try {
            // XQueryParser.g:1602:9: ( p_FTWordsValue ( p_FTAnyallOption )? )
            // XQueryParser.g:1602:11: p_FTWordsValue ( p_FTAnyallOption )?
            {
                root_0 = (XQDTCommonTree)adaptor.nil();

                pushFollow(FOLLOW_p_FTWordsValue_in_p_FTWords14118);
                p_FTWordsValue655 = p_FTWordsValue();

                state._fsp--;
                if (state.failed) {
                    return retval;
                }
                if (state.backtracking == 0) {
                    adaptor.addChild(root_0, p_FTWordsValue655.getTree());
                }
                // XQueryParser.g:1602:26: ( p_FTAnyallOption )?
                int alt201 = 2;
                int LA201_0 = input.LA(1);

                if (((LA201_0 >= ALL && LA201_0 <= ANY) || LA201_0 == PHRASE)) {
                    alt201 = 1;
                }
                switch (alt201) {
                case 1:
                    // XQueryParser.g:1602:26: p_FTAnyallOption
                {
                    pushFollow(FOLLOW_p_FTAnyallOption_in_p_FTWords14120);
                    p_FTAnyallOption656 = p_FTAnyallOption();

                    state._fsp--;
                    if (state.failed) {
                        return retval;
                    }
                    if (state.backtracking == 0) {
                        adaptor.addChild(root_0, p_FTAnyallOption656.getTree());
                    }

                }
                    break;

                }

            }

            retval.stop = input.LT(-1);

            if (state.backtracking == 0) {

                retval.tree = (XQDTCommonTree)adaptor.rulePostProcessing(root_0);
                adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        } catch (RecognitionException re) {
            reportError(re);
            recover(input, re);
            retval.tree = (XQDTCommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        } finally {
        }
        return retval;
    }

    // $ANTLR end "p_FTWords"

    public static class p_FTWordsValue_return extends ParserRuleReturnScope {
        XQDTCommonTree tree;

        public Object getTree() {
            return tree;
        }
    };

    // $ANTLR start "p_FTWordsValue"
    // XQueryParser.g:1606:1: p_FTWordsValue : ( p_StringLiteral | ( LBRACKET p_Expr[true,true] RBRACKET ) );
    public final XQueryParser.p_FTWordsValue_return p_FTWordsValue() throws RecognitionException {
        XQueryParser.p_FTWordsValue_return retval = new XQueryParser.p_FTWordsValue_return();
        retval.start = input.LT(1);

        XQDTCommonTree root_0 = null;

        CommonToken LBRACKET658 = null;
        CommonToken RBRACKET660 = null;
        XQueryParser.p_StringLiteral_return p_StringLiteral657 = null;

        XQueryParser.p_Expr_return p_Expr659 = null;

        XQDTCommonTree LBRACKET658_tree = null;
        XQDTCommonTree RBRACKET660_tree = null;

        try {
            // XQueryParser.g:1607:9: ( p_StringLiteral | ( LBRACKET p_Expr[true,true] RBRACKET ) )
            int alt202 = 2;
            int LA202_0 = input.LA(1);

            if (((LA202_0 >= APOS && LA202_0 <= QUOT))) {
                alt202 = 1;
            } else if ((LA202_0 == LBRACKET)) {
                alt202 = 2;
            } else {
                if (state.backtracking > 0) {
                    state.failed = true;
                    return retval;
                }
                NoViableAltException nvae = new NoViableAltException("", 202, 0, input);

                throw nvae;
            }
            switch (alt202) {
            case 1:
                // XQueryParser.g:1607:11: p_StringLiteral
            {
                root_0 = (XQDTCommonTree)adaptor.nil();

                pushFollow(FOLLOW_p_StringLiteral_in_p_FTWordsValue14147);
                p_StringLiteral657 = p_StringLiteral();

                state._fsp--;
                if (state.failed) {
                    return retval;
                }
                if (state.backtracking == 0) {
                    adaptor.addChild(root_0, p_StringLiteral657.getTree());
                }

            }
            break;
            case 2:
                // XQueryParser.g:1608:11: ( LBRACKET p_Expr[true,true] RBRACKET )
            {
                root_0 = (XQDTCommonTree)adaptor.nil();

                // XQueryParser.g:1608:11: ( LBRACKET p_Expr[true,true] RBRACKET )
                // XQueryParser.g:1608:12: LBRACKET p_Expr[true,true] RBRACKET
                {
                    LBRACKET658 = (CommonToken)match(input, LBRACKET, FOLLOW_LBRACKET_in_p_FTWordsValue14160);
                    if (state.failed) {
                        return retval;
                    }
                    if (state.backtracking == 0) {
                        LBRACKET658_tree = (XQDTCommonTree)adaptor.create(LBRACKET658);
                        adaptor.addChild(root_0, LBRACKET658_tree);
                    }
                    pushFollow(FOLLOW_p_Expr_in_p_FTWordsValue14162);
                    p_Expr659 = p_Expr(true, true);

                    state._fsp--;
                    if (state.failed) {
                        return retval;
                    }
                    if (state.backtracking == 0) {
                        adaptor.addChild(root_0, p_Expr659.getTree());
                    }
                    RBRACKET660 = (CommonToken)match(input, RBRACKET, FOLLOW_RBRACKET_in_p_FTWordsValue14165);
                    if (state.failed) {
                        return retval;
                    }
                    if (state.backtracking == 0) {
                        RBRACKET660_tree = (XQDTCommonTree)adaptor.create(RBRACKET660);
                        adaptor.addChild(root_0, RBRACKET660_tree);
                    }

                }

            }
            break;

            }
            retval.stop = input.LT(-1);

            if (state.backtracking == 0) {

                retval.tree = (XQDTCommonTree)adaptor.rulePostProcessing(root_0);
                adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        } catch (RecognitionException re) {
            reportError(re);
            recover(input, re);
            retval.tree = (XQDTCommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        } finally {
        }
        return retval;
    }

    // $ANTLR end "p_FTWordsValue"

    public static class p_FTExtensionSelection_return extends ParserRuleReturnScope {
        XQDTCommonTree tree;

        public Object getTree() {
            return tree;
        }
    };

    // $ANTLR start "p_FTExtensionSelection"
    // XQueryParser.g:1612:1: p_FTExtensionSelection : ( L_Pragma )+ LBRACKET ( p_FTSelection )? RBRACKET ;
    public final XQueryParser.p_FTExtensionSelection_return p_FTExtensionSelection() throws RecognitionException {
        XQueryParser.p_FTExtensionSelection_return retval = new XQueryParser.p_FTExtensionSelection_return();
        retval.start = input.LT(1);

        XQDTCommonTree root_0 = null;

        CommonToken L_Pragma661 = null;
        CommonToken LBRACKET662 = null;
        CommonToken RBRACKET664 = null;
        XQueryParser.p_FTSelection_return p_FTSelection663 = null;

        XQDTCommonTree L_Pragma661_tree = null;
        XQDTCommonTree LBRACKET662_tree = null;
        XQDTCommonTree RBRACKET664_tree = null;

        try {
            // XQueryParser.g:1613:9: ( ( L_Pragma )+ LBRACKET ( p_FTSelection )? RBRACKET )
            // XQueryParser.g:1613:11: ( L_Pragma )+ LBRACKET ( p_FTSelection )? RBRACKET
            {
                root_0 = (XQDTCommonTree)adaptor.nil();

                // XQueryParser.g:1613:11: ( L_Pragma )+
                int cnt203 = 0;
                loop203: do {
                    int alt203 = 2;
                    int LA203_0 = input.LA(1);

                    if ((LA203_0 == L_Pragma)) {
                        alt203 = 1;
                    }

                    switch (alt203) {
                    case 1:
                        // XQueryParser.g:1613:11: L_Pragma
                    {
                        L_Pragma661 = (CommonToken)match(input, L_Pragma,
                                FOLLOW_L_Pragma_in_p_FTExtensionSelection14192);
                        if (state.failed) {
                            return retval;
                        }
                        if (state.backtracking == 0) {
                            L_Pragma661_tree = (XQDTCommonTree)adaptor.create(L_Pragma661);
                            adaptor.addChild(root_0, L_Pragma661_tree);
                        }

                    }
                    break;

                    default:
                        if (cnt203 >= 1) {
                            break loop203;
                        }
                        if (state.backtracking > 0) {
                            state.failed = true;
                            return retval;
                        }
                        EarlyExitException eee = new EarlyExitException(203, input);
                        throw eee;
                    }
                    cnt203++;
                } while (true);

                LBRACKET662 = (CommonToken)match(input, LBRACKET, FOLLOW_LBRACKET_in_p_FTExtensionSelection14195);
                if (state.failed) {
                    return retval;
                }
                if (state.backtracking == 0) {
                    LBRACKET662_tree = (XQDTCommonTree)adaptor.create(LBRACKET662);
                    adaptor.addChild(root_0, LBRACKET662_tree);
                }
                // XQueryParser.g:1613:30: ( p_FTSelection )?
                int alt204 = 2;
                int LA204_0 = input.LA(1);

                if ((LA204_0 == FTNOT || LA204_0 == LPAREN || LA204_0 == LBRACKET
                        || (LA204_0 >= APOS && LA204_0 <= QUOT) || LA204_0 == L_Pragma)) {
                    alt204 = 1;
                }
                switch (alt204) {
                case 1:
                    // XQueryParser.g:1613:30: p_FTSelection
                {
                    pushFollow(FOLLOW_p_FTSelection_in_p_FTExtensionSelection14197);
                    p_FTSelection663 = p_FTSelection();

                    state._fsp--;
                    if (state.failed) {
                        return retval;
                    }
                    if (state.backtracking == 0) {
                        adaptor.addChild(root_0, p_FTSelection663.getTree());
                    }

                }
                    break;

                }

                RBRACKET664 = (CommonToken)match(input, RBRACKET, FOLLOW_RBRACKET_in_p_FTExtensionSelection14200);
                if (state.failed) {
                    return retval;
                }
                if (state.backtracking == 0) {
                    RBRACKET664_tree = (XQDTCommonTree)adaptor.create(RBRACKET664);
                    adaptor.addChild(root_0, RBRACKET664_tree);
                }

            }

            retval.stop = input.LT(-1);

            if (state.backtracking == 0) {

                retval.tree = (XQDTCommonTree)adaptor.rulePostProcessing(root_0);
                adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        } catch (RecognitionException re) {
            reportError(re);
            recover(input, re);
            retval.tree = (XQDTCommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        } finally {
        }
        return retval;
    }

    // $ANTLR end "p_FTExtensionSelection"

    public static class p_FTAnyallOption_return extends ParserRuleReturnScope {
        XQDTCommonTree tree;

        public Object getTree() {
            return tree;
        }
    };

    // $ANTLR start "p_FTAnyallOption"
    // XQueryParser.g:1617:1: p_FTAnyallOption : ( (k+= ANY (k+= WORD )? ) | (k+= ALL ( WORDS )? ) | k+= PHRASE ) ;
    public final XQueryParser.p_FTAnyallOption_return p_FTAnyallOption() throws RecognitionException {
        XQueryParser.p_FTAnyallOption_return retval = new XQueryParser.p_FTAnyallOption_return();
        retval.start = input.LT(1);

        XQDTCommonTree root_0 = null;

        CommonToken WORDS665 = null;
        CommonToken k = null;
        List<CommonToken> list_k = null;

        XQDTCommonTree WORDS665_tree = null;
        XQDTCommonTree k_tree = null;

        try {
            // XQueryParser.g:1618:9: ( ( (k+= ANY (k+= WORD )? ) | (k+= ALL ( WORDS )? ) | k+= PHRASE ) )
            // XQueryParser.g:1618:11: ( (k+= ANY (k+= WORD )? ) | (k+= ALL ( WORDS )? ) | k+= PHRASE )
            {
                root_0 = (XQDTCommonTree)adaptor.nil();

                // XQueryParser.g:1618:11: ( (k+= ANY (k+= WORD )? ) | (k+= ALL ( WORDS )? ) | k+= PHRASE )
                int alt207 = 3;
                switch (input.LA(1)) {
                case ANY: {
                    alt207 = 1;
                }
                break;
                case ALL: {
                    alt207 = 2;
                }
                break;
                case PHRASE: {
                    alt207 = 3;
                }
                break;
                default:
                    if (state.backtracking > 0) {
                        state.failed = true;
                        return retval;
                    }
                    NoViableAltException nvae = new NoViableAltException("", 207, 0, input);

                    throw nvae;
                }

                switch (alt207) {
                case 1:
                    // XQueryParser.g:1618:13: (k+= ANY (k+= WORD )? )
                {
                    // XQueryParser.g:1618:13: (k+= ANY (k+= WORD )? )
                    // XQueryParser.g:1618:14: k+= ANY (k+= WORD )?
                    {
                        k = (CommonToken)match(input, ANY, FOLLOW_ANY_in_p_FTAnyallOption14231);
                        if (state.failed) {
                            return retval;
                        }
                        if (state.backtracking == 0) {
                            k_tree = (XQDTCommonTree)adaptor.create(k);
                            adaptor.addChild(root_0, k_tree);
                        }
                        if (list_k == null) {
                            list_k = new ArrayList<CommonToken>();
                        }
                        list_k.add(k);

                        // XQueryParser.g:1618:22: (k+= WORD )?
                        int alt205 = 2;
                        int LA205_0 = input.LA(1);

                        if ((LA205_0 == WORD)) {
                            alt205 = 1;
                        }
                        switch (alt205) {
                        case 1:
                            // XQueryParser.g:1618:22: k+= WORD
                        {
                            k = (CommonToken)match(input, WORD, FOLLOW_WORD_in_p_FTAnyallOption14235);
                            if (state.failed) {
                                return retval;
                            }
                            if (state.backtracking == 0) {
                                k_tree = (XQDTCommonTree)adaptor.create(k);
                                adaptor.addChild(root_0, k_tree);
                            }
                            if (list_k == null) {
                                list_k = new ArrayList<CommonToken>();
                            }
                            list_k.add(k);

                        }
                            break;

                        }

                    }

                }
                    break;
                case 2:
                    // XQueryParser.g:1618:33: (k+= ALL ( WORDS )? )
                {
                    // XQueryParser.g:1618:33: (k+= ALL ( WORDS )? )
                    // XQueryParser.g:1618:34: k+= ALL ( WORDS )?
                    {
                        k = (CommonToken)match(input, ALL, FOLLOW_ALL_in_p_FTAnyallOption14244);
                        if (state.failed) {
                            return retval;
                        }
                        if (state.backtracking == 0) {
                            k_tree = (XQDTCommonTree)adaptor.create(k);
                            adaptor.addChild(root_0, k_tree);
                        }
                        if (list_k == null) {
                            list_k = new ArrayList<CommonToken>();
                        }
                        list_k.add(k);

                        // XQueryParser.g:1618:41: ( WORDS )?
                        int alt206 = 2;
                        int LA206_0 = input.LA(1);

                        if ((LA206_0 == WORDS)) {
                            alt206 = 1;
                        }
                        switch (alt206) {
                        case 1:
                            // XQueryParser.g:1618:41: WORDS
                        {
                            WORDS665 = (CommonToken)match(input, WORDS, FOLLOW_WORDS_in_p_FTAnyallOption14246);
                            if (state.failed) {
                                return retval;
                            }
                            if (state.backtracking == 0) {
                                WORDS665_tree = (XQDTCommonTree)adaptor.create(WORDS665);
                                adaptor.addChild(root_0, WORDS665_tree);
                            }

                        }
                            break;

                        }

                    }

                }
                    break;
                case 3:
                    // XQueryParser.g:1618:51: k+= PHRASE
                {
                    k = (CommonToken)match(input, PHRASE, FOLLOW_PHRASE_in_p_FTAnyallOption14254);
                    if (state.failed) {
                        return retval;
                    }
                    if (state.backtracking == 0) {
                        k_tree = (XQDTCommonTree)adaptor.create(k);
                        adaptor.addChild(root_0, k_tree);
                    }
                    if (list_k == null) {
                        list_k = new ArrayList<CommonToken>();
                    }
                    list_k.add(k);

                }
                    break;

                }

                if (state.backtracking == 0) {
                    ak(list_k);
                }

            }

            retval.stop = input.LT(-1);

            if (state.backtracking == 0) {

                retval.tree = (XQDTCommonTree)adaptor.rulePostProcessing(root_0);
                adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        } catch (RecognitionException re) {
            reportError(re);
            recover(input, re);
            retval.tree = (XQDTCommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        } finally {
        }
        return retval;
    }

    // $ANTLR end "p_FTAnyallOption"

    public static class p_FTTimes_return extends ParserRuleReturnScope {
        XQDTCommonTree tree;

        public Object getTree() {
            return tree;
        }
    };

    // $ANTLR start "p_FTTimes"
    // XQueryParser.g:1622:1: p_FTTimes : k+= OCCURS p_FTRange k+= TIMES ;
    public final XQueryParser.p_FTTimes_return p_FTTimes() throws RecognitionException {
        XQueryParser.p_FTTimes_return retval = new XQueryParser.p_FTTimes_return();
        retval.start = input.LT(1);

        XQDTCommonTree root_0 = null;

        CommonToken k = null;
        List<CommonToken> list_k = null;
        XQueryParser.p_FTRange_return p_FTRange666 = null;

        XQDTCommonTree k_tree = null;

        try {
            // XQueryParser.g:1623:9: (k+= OCCURS p_FTRange k+= TIMES )
            // XQueryParser.g:1623:11: k+= OCCURS p_FTRange k+= TIMES
            {
                root_0 = (XQDTCommonTree)adaptor.nil();

                k = (CommonToken)match(input, OCCURS, FOLLOW_OCCURS_in_p_FTTimes14286);
                if (state.failed) {
                    return retval;
                }
                if (state.backtracking == 0) {
                    k_tree = (XQDTCommonTree)adaptor.create(k);
                    adaptor.addChild(root_0, k_tree);
                }
                if (list_k == null) {
                    list_k = new ArrayList<CommonToken>();
                }
                list_k.add(k);

                pushFollow(FOLLOW_p_FTRange_in_p_FTTimes14288);
                p_FTRange666 = p_FTRange();

                state._fsp--;
                if (state.failed) {
                    return retval;
                }
                if (state.backtracking == 0) {
                    adaptor.addChild(root_0, p_FTRange666.getTree());
                }
                k = (CommonToken)match(input, TIMES, FOLLOW_TIMES_in_p_FTTimes14292);
                if (state.failed) {
                    return retval;
                }
                if (state.backtracking == 0) {
                    k_tree = (XQDTCommonTree)adaptor.create(k);
                    adaptor.addChild(root_0, k_tree);
                }
                if (list_k == null) {
                    list_k = new ArrayList<CommonToken>();
                }
                list_k.add(k);

                if (state.backtracking == 0) {
                    ak(list_k);
                }

            }

            retval.stop = input.LT(-1);

            if (state.backtracking == 0) {

                retval.tree = (XQDTCommonTree)adaptor.rulePostProcessing(root_0);
                adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        } catch (RecognitionException re) {
            reportError(re);
            recover(input, re);
            retval.tree = (XQDTCommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        } finally {
        }
        return retval;
    }

    // $ANTLR end "p_FTTimes"

    public static class p_FTRange_return extends ParserRuleReturnScope {
        XQDTCommonTree tree;

        public Object getTree() {
            return tree;
        }
    };

    // $ANTLR start "p_FTRange"
    // XQueryParser.g:1627:1: p_FTRange : ( (k+= EXACTLY p_AdditiveExpr ) | (k+= AT k+= LEAST p_AdditiveExpr ) | (k+= AT k+= MOST p_AdditiveExpr ) | (k+= FROM p_AdditiveExpr k+= TO p_AdditiveExpr ) ) ;
    public final XQueryParser.p_FTRange_return p_FTRange() throws RecognitionException {
        XQueryParser.p_FTRange_return retval = new XQueryParser.p_FTRange_return();
        retval.start = input.LT(1);

        XQDTCommonTree root_0 = null;

        CommonToken k = null;
        List<CommonToken> list_k = null;
        XQueryParser.p_AdditiveExpr_return p_AdditiveExpr667 = null;

        XQueryParser.p_AdditiveExpr_return p_AdditiveExpr668 = null;

        XQueryParser.p_AdditiveExpr_return p_AdditiveExpr669 = null;

        XQueryParser.p_AdditiveExpr_return p_AdditiveExpr670 = null;

        XQueryParser.p_AdditiveExpr_return p_AdditiveExpr671 = null;

        XQDTCommonTree k_tree = null;

        try {
            // XQueryParser.g:1628:9: ( ( (k+= EXACTLY p_AdditiveExpr ) | (k+= AT k+= LEAST p_AdditiveExpr ) | (k+= AT k+= MOST p_AdditiveExpr ) | (k+= FROM p_AdditiveExpr k+= TO p_AdditiveExpr ) ) )
            // XQueryParser.g:1628:11: ( (k+= EXACTLY p_AdditiveExpr ) | (k+= AT k+= LEAST p_AdditiveExpr ) | (k+= AT k+= MOST p_AdditiveExpr ) | (k+= FROM p_AdditiveExpr k+= TO p_AdditiveExpr ) )
            {
                root_0 = (XQDTCommonTree)adaptor.nil();

                // XQueryParser.g:1628:11: ( (k+= EXACTLY p_AdditiveExpr ) | (k+= AT k+= LEAST p_AdditiveExpr ) | (k+= AT k+= MOST p_AdditiveExpr ) | (k+= FROM p_AdditiveExpr k+= TO p_AdditiveExpr ) )
                int alt208 = 4;
                switch (input.LA(1)) {
                case EXACTLY: {
                    alt208 = 1;
                }
                break;
                case AT: {
                    int LA208_2 = input.LA(2);

                    if ((LA208_2 == LEAST)) {
                        alt208 = 2;
                    } else if ((LA208_2 == MOST)) {
                        alt208 = 3;
                    } else {
                        if (state.backtracking > 0) {
                            state.failed = true;
                            return retval;
                        }
                        NoViableAltException nvae = new NoViableAltException("", 208, 2, input);

                        throw nvae;
                    }
                }
                break;
                case FROM: {
                    alt208 = 4;
                }
                break;
                default:
                    if (state.backtracking > 0) {
                        state.failed = true;
                        return retval;
                    }
                    NoViableAltException nvae = new NoViableAltException("", 208, 0, input);

                    throw nvae;
                }

                switch (alt208) {
                case 1:
                    // XQueryParser.g:1628:13: (k+= EXACTLY p_AdditiveExpr )
                {
                    // XQueryParser.g:1628:13: (k+= EXACTLY p_AdditiveExpr )
                    // XQueryParser.g:1628:14: k+= EXACTLY p_AdditiveExpr
                    {
                        k = (CommonToken)match(input, EXACTLY, FOLLOW_EXACTLY_in_p_FTRange14325);
                        if (state.failed) {
                            return retval;
                        }
                        if (state.backtracking == 0) {
                            k_tree = (XQDTCommonTree)adaptor.create(k);
                            adaptor.addChild(root_0, k_tree);
                        }
                        if (list_k == null) {
                            list_k = new ArrayList<CommonToken>();
                        }
                        list_k.add(k);

                        pushFollow(FOLLOW_p_AdditiveExpr_in_p_FTRange14327);
                        p_AdditiveExpr667 = p_AdditiveExpr();

                        state._fsp--;
                        if (state.failed) {
                            return retval;
                        }
                        if (state.backtracking == 0) {
                            adaptor.addChild(root_0, p_AdditiveExpr667.getTree());
                        }

                    }

                }
                    break;
                case 2:
                    // XQueryParser.g:1629:13: (k+= AT k+= LEAST p_AdditiveExpr )
                {
                    // XQueryParser.g:1629:13: (k+= AT k+= LEAST p_AdditiveExpr )
                    // XQueryParser.g:1629:14: k+= AT k+= LEAST p_AdditiveExpr
                    {
                        k = (CommonToken)match(input, AT, FOLLOW_AT_in_p_FTRange14345);
                        if (state.failed) {
                            return retval;
                        }
                        if (state.backtracking == 0) {
                            k_tree = (XQDTCommonTree)adaptor.create(k);
                            adaptor.addChild(root_0, k_tree);
                        }
                        if (list_k == null) {
                            list_k = new ArrayList<CommonToken>();
                        }
                        list_k.add(k);

                        k = (CommonToken)match(input, LEAST, FOLLOW_LEAST_in_p_FTRange14349);
                        if (state.failed) {
                            return retval;
                        }
                        if (state.backtracking == 0) {
                            k_tree = (XQDTCommonTree)adaptor.create(k);
                            adaptor.addChild(root_0, k_tree);
                        }
                        if (list_k == null) {
                            list_k = new ArrayList<CommonToken>();
                        }
                        list_k.add(k);

                        pushFollow(FOLLOW_p_AdditiveExpr_in_p_FTRange14351);
                        p_AdditiveExpr668 = p_AdditiveExpr();

                        state._fsp--;
                        if (state.failed) {
                            return retval;
                        }
                        if (state.backtracking == 0) {
                            adaptor.addChild(root_0, p_AdditiveExpr668.getTree());
                        }

                    }

                }
                    break;
                case 3:
                    // XQueryParser.g:1630:13: (k+= AT k+= MOST p_AdditiveExpr )
                {
                    // XQueryParser.g:1630:13: (k+= AT k+= MOST p_AdditiveExpr )
                    // XQueryParser.g:1630:14: k+= AT k+= MOST p_AdditiveExpr
                    {
                        k = (CommonToken)match(input, AT, FOLLOW_AT_in_p_FTRange14369);
                        if (state.failed) {
                            return retval;
                        }
                        if (state.backtracking == 0) {
                            k_tree = (XQDTCommonTree)adaptor.create(k);
                            adaptor.addChild(root_0, k_tree);
                        }
                        if (list_k == null) {
                            list_k = new ArrayList<CommonToken>();
                        }
                        list_k.add(k);

                        k = (CommonToken)match(input, MOST, FOLLOW_MOST_in_p_FTRange14373);
                        if (state.failed) {
                            return retval;
                        }
                        if (state.backtracking == 0) {
                            k_tree = (XQDTCommonTree)adaptor.create(k);
                            adaptor.addChild(root_0, k_tree);
                        }
                        if (list_k == null) {
                            list_k = new ArrayList<CommonToken>();
                        }
                        list_k.add(k);

                        pushFollow(FOLLOW_p_AdditiveExpr_in_p_FTRange14375);
                        p_AdditiveExpr669 = p_AdditiveExpr();

                        state._fsp--;
                        if (state.failed) {
                            return retval;
                        }
                        if (state.backtracking == 0) {
                            adaptor.addChild(root_0, p_AdditiveExpr669.getTree());
                        }

                    }

                }
                    break;
                case 4:
                    // XQueryParser.g:1631:13: (k+= FROM p_AdditiveExpr k+= TO p_AdditiveExpr )
                {
                    // XQueryParser.g:1631:13: (k+= FROM p_AdditiveExpr k+= TO p_AdditiveExpr )
                    // XQueryParser.g:1631:14: k+= FROM p_AdditiveExpr k+= TO p_AdditiveExpr
                    {
                        k = (CommonToken)match(input, FROM, FOLLOW_FROM_in_p_FTRange14393);
                        if (state.failed) {
                            return retval;
                        }
                        if (state.backtracking == 0) {
                            k_tree = (XQDTCommonTree)adaptor.create(k);
                            adaptor.addChild(root_0, k_tree);
                        }
                        if (list_k == null) {
                            list_k = new ArrayList<CommonToken>();
                        }
                        list_k.add(k);

                        pushFollow(FOLLOW_p_AdditiveExpr_in_p_FTRange14395);
                        p_AdditiveExpr670 = p_AdditiveExpr();

                        state._fsp--;
                        if (state.failed) {
                            return retval;
                        }
                        if (state.backtracking == 0) {
                            adaptor.addChild(root_0, p_AdditiveExpr670.getTree());
                        }
                        k = (CommonToken)match(input, TO, FOLLOW_TO_in_p_FTRange14399);
                        if (state.failed) {
                            return retval;
                        }
                        if (state.backtracking == 0) {
                            k_tree = (XQDTCommonTree)adaptor.create(k);
                            adaptor.addChild(root_0, k_tree);
                        }
                        if (list_k == null) {
                            list_k = new ArrayList<CommonToken>();
                        }
                        list_k.add(k);

                        pushFollow(FOLLOW_p_AdditiveExpr_in_p_FTRange14401);
                        p_AdditiveExpr671 = p_AdditiveExpr();

                        state._fsp--;
                        if (state.failed) {
                            return retval;
                        }
                        if (state.backtracking == 0) {
                            adaptor.addChild(root_0, p_AdditiveExpr671.getTree());
                        }

                    }

                }
                    break;

                }

                if (state.backtracking == 0) {
                    ak(list_k);
                }

            }

            retval.stop = input.LT(-1);

            if (state.backtracking == 0) {

                retval.tree = (XQDTCommonTree)adaptor.rulePostProcessing(root_0);
                adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        } catch (RecognitionException re) {
            reportError(re);
            recover(input, re);
            retval.tree = (XQDTCommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        } finally {
        }
        return retval;
    }

    // $ANTLR end "p_FTRange"

    public static class p_FTPosFilter_return extends ParserRuleReturnScope {
        XQDTCommonTree tree;

        public Object getTree() {
            return tree;
        }
    };

    // $ANTLR start "p_FTPosFilter"
    // XQueryParser.g:1635:1: p_FTPosFilter : ( p_FTOrder | p_FTWindow | p_FTDistance | p_FTScope | p_FTContent );
    public final XQueryParser.p_FTPosFilter_return p_FTPosFilter() throws RecognitionException {
        XQueryParser.p_FTPosFilter_return retval = new XQueryParser.p_FTPosFilter_return();
        retval.start = input.LT(1);

        XQDTCommonTree root_0 = null;

        XQueryParser.p_FTOrder_return p_FTOrder672 = null;

        XQueryParser.p_FTWindow_return p_FTWindow673 = null;

        XQueryParser.p_FTDistance_return p_FTDistance674 = null;

        XQueryParser.p_FTScope_return p_FTScope675 = null;

        XQueryParser.p_FTContent_return p_FTContent676 = null;

        try {
            // XQueryParser.g:1636:9: ( p_FTOrder | p_FTWindow | p_FTDistance | p_FTScope | p_FTContent )
            int alt209 = 5;
            switch (input.LA(1)) {
            case ORDERED: {
                alt209 = 1;
            }
                break;
            case WINDOW: {
                alt209 = 2;
            }
                break;
            case DISTANCE: {
                alt209 = 3;
            }
                break;
            case DIFFERENT:
            case SAME: {
                alt209 = 4;
            }
                break;
            case AT:
            case ENTIRE: {
                alt209 = 5;
            }
                break;
            default:
                if (state.backtracking > 0) {
                    state.failed = true;
                    return retval;
                }
                NoViableAltException nvae = new NoViableAltException("", 209, 0, input);

                throw nvae;
            }

            switch (alt209) {
            case 1:
                // XQueryParser.g:1636:11: p_FTOrder
            {
                root_0 = (XQDTCommonTree)adaptor.nil();

                pushFollow(FOLLOW_p_FTOrder_in_p_FTPosFilter14432);
                p_FTOrder672 = p_FTOrder();

                state._fsp--;
                if (state.failed) {
                    return retval;
                }
                if (state.backtracking == 0) {
                    adaptor.addChild(root_0, p_FTOrder672.getTree());
                }

            }
            break;
            case 2:
                // XQueryParser.g:1636:23: p_FTWindow
            {
                root_0 = (XQDTCommonTree)adaptor.nil();

                pushFollow(FOLLOW_p_FTWindow_in_p_FTPosFilter14436);
                p_FTWindow673 = p_FTWindow();

                state._fsp--;
                if (state.failed) {
                    return retval;
                }
                if (state.backtracking == 0) {
                    adaptor.addChild(root_0, p_FTWindow673.getTree());
                }

            }
            break;
            case 3:
                // XQueryParser.g:1636:36: p_FTDistance
            {
                root_0 = (XQDTCommonTree)adaptor.nil();

                pushFollow(FOLLOW_p_FTDistance_in_p_FTPosFilter14440);
                p_FTDistance674 = p_FTDistance();

                state._fsp--;
                if (state.failed) {
                    return retval;
                }
                if (state.backtracking == 0) {
                    adaptor.addChild(root_0, p_FTDistance674.getTree());
                }

            }
            break;
            case 4:
                // XQueryParser.g:1636:51: p_FTScope
            {
                root_0 = (XQDTCommonTree)adaptor.nil();

                pushFollow(FOLLOW_p_FTScope_in_p_FTPosFilter14444);
                p_FTScope675 = p_FTScope();

                state._fsp--;
                if (state.failed) {
                    return retval;
                }
                if (state.backtracking == 0) {
                    adaptor.addChild(root_0, p_FTScope675.getTree());
                }

            }
            break;
            case 5:
                // XQueryParser.g:1636:63: p_FTContent
            {
                root_0 = (XQDTCommonTree)adaptor.nil();

                pushFollow(FOLLOW_p_FTContent_in_p_FTPosFilter14448);
                p_FTContent676 = p_FTContent();

                state._fsp--;
                if (state.failed) {
                    return retval;
                }
                if (state.backtracking == 0) {
                    adaptor.addChild(root_0, p_FTContent676.getTree());
                }

            }
            break;

            }
            retval.stop = input.LT(-1);

            if (state.backtracking == 0) {

                retval.tree = (XQDTCommonTree)adaptor.rulePostProcessing(root_0);
                adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        } catch (RecognitionException re) {
            reportError(re);
            recover(input, re);
            retval.tree = (XQDTCommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        } finally {
        }
        return retval;
    }

    // $ANTLR end "p_FTPosFilter"

    public static class p_FTOrder_return extends ParserRuleReturnScope {
        XQDTCommonTree tree;

        public Object getTree() {
            return tree;
        }
    };

    // $ANTLR start "p_FTOrder"
    // XQueryParser.g:1640:1: p_FTOrder : ko= ORDERED ;
    public final XQueryParser.p_FTOrder_return p_FTOrder() throws RecognitionException {
        XQueryParser.p_FTOrder_return retval = new XQueryParser.p_FTOrder_return();
        retval.start = input.LT(1);

        XQDTCommonTree root_0 = null;

        CommonToken ko = null;

        XQDTCommonTree ko_tree = null;

        try {
            // XQueryParser.g:1641:9: (ko= ORDERED )
            // XQueryParser.g:1641:11: ko= ORDERED
            {
                root_0 = (XQDTCommonTree)adaptor.nil();

                ko = (CommonToken)match(input, ORDERED, FOLLOW_ORDERED_in_p_FTOrder14476);
                if (state.failed) {
                    return retval;
                }
                if (state.backtracking == 0) {
                    ko_tree = (XQDTCommonTree)adaptor.create(ko);
                    adaptor.addChild(root_0, ko_tree);
                }
                if (state.backtracking == 0) {
                    ak(ko);
                }

            }

            retval.stop = input.LT(-1);

            if (state.backtracking == 0) {

                retval.tree = (XQDTCommonTree)adaptor.rulePostProcessing(root_0);
                adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        } catch (RecognitionException re) {
            reportError(re);
            recover(input, re);
            retval.tree = (XQDTCommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        } finally {
        }
        return retval;
    }

    // $ANTLR end "p_FTOrder"

    public static class p_FTWindow_return extends ParserRuleReturnScope {
        XQDTCommonTree tree;

        public Object getTree() {
            return tree;
        }
    };

    // $ANTLR start "p_FTWindow"
    // XQueryParser.g:1645:1: p_FTWindow : kw= WINDOW p_AdditiveExpr p_FTUnit ;
    public final XQueryParser.p_FTWindow_return p_FTWindow() throws RecognitionException {
        XQueryParser.p_FTWindow_return retval = new XQueryParser.p_FTWindow_return();
        retval.start = input.LT(1);

        XQDTCommonTree root_0 = null;

        CommonToken kw = null;
        XQueryParser.p_AdditiveExpr_return p_AdditiveExpr677 = null;

        XQueryParser.p_FTUnit_return p_FTUnit678 = null;

        XQDTCommonTree kw_tree = null;

        try {
            // XQueryParser.g:1646:9: (kw= WINDOW p_AdditiveExpr p_FTUnit )
            // XQueryParser.g:1646:11: kw= WINDOW p_AdditiveExpr p_FTUnit
            {
                root_0 = (XQDTCommonTree)adaptor.nil();

                kw = (CommonToken)match(input, WINDOW, FOLLOW_WINDOW_in_p_FTWindow14506);
                if (state.failed) {
                    return retval;
                }
                if (state.backtracking == 0) {
                    kw_tree = (XQDTCommonTree)adaptor.create(kw);
                    adaptor.addChild(root_0, kw_tree);
                }
                if (state.backtracking == 0) {
                    ak(kw);
                }
                pushFollow(FOLLOW_p_AdditiveExpr_in_p_FTWindow14510);
                p_AdditiveExpr677 = p_AdditiveExpr();

                state._fsp--;
                if (state.failed) {
                    return retval;
                }
                if (state.backtracking == 0) {
                    adaptor.addChild(root_0, p_AdditiveExpr677.getTree());
                }
                pushFollow(FOLLOW_p_FTUnit_in_p_FTWindow14512);
                p_FTUnit678 = p_FTUnit();

                state._fsp--;
                if (state.failed) {
                    return retval;
                }
                if (state.backtracking == 0) {
                    adaptor.addChild(root_0, p_FTUnit678.getTree());
                }

            }

            retval.stop = input.LT(-1);

            if (state.backtracking == 0) {

                retval.tree = (XQDTCommonTree)adaptor.rulePostProcessing(root_0);
                adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        } catch (RecognitionException re) {
            reportError(re);
            recover(input, re);
            retval.tree = (XQDTCommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        } finally {
        }
        return retval;
    }

    // $ANTLR end "p_FTWindow"

    public static class p_FTDistance_return extends ParserRuleReturnScope {
        XQDTCommonTree tree;

        public Object getTree() {
            return tree;
        }
    };

    // $ANTLR start "p_FTDistance"
    // XQueryParser.g:1650:1: p_FTDistance : kd= DISTANCE p_FTRange p_FTUnit ;
    public final XQueryParser.p_FTDistance_return p_FTDistance() throws RecognitionException {
        XQueryParser.p_FTDistance_return retval = new XQueryParser.p_FTDistance_return();
        retval.start = input.LT(1);

        XQDTCommonTree root_0 = null;

        CommonToken kd = null;
        XQueryParser.p_FTRange_return p_FTRange679 = null;

        XQueryParser.p_FTUnit_return p_FTUnit680 = null;

        XQDTCommonTree kd_tree = null;

        try {
            // XQueryParser.g:1651:9: (kd= DISTANCE p_FTRange p_FTUnit )
            // XQueryParser.g:1651:11: kd= DISTANCE p_FTRange p_FTUnit
            {
                root_0 = (XQDTCommonTree)adaptor.nil();

                kd = (CommonToken)match(input, DISTANCE, FOLLOW_DISTANCE_in_p_FTDistance14540);
                if (state.failed) {
                    return retval;
                }
                if (state.backtracking == 0) {
                    kd_tree = (XQDTCommonTree)adaptor.create(kd);
                    adaptor.addChild(root_0, kd_tree);
                }
                if (state.backtracking == 0) {
                    ak(kd);
                }
                pushFollow(FOLLOW_p_FTRange_in_p_FTDistance14544);
                p_FTRange679 = p_FTRange();

                state._fsp--;
                if (state.failed) {
                    return retval;
                }
                if (state.backtracking == 0) {
                    adaptor.addChild(root_0, p_FTRange679.getTree());
                }
                pushFollow(FOLLOW_p_FTUnit_in_p_FTDistance14546);
                p_FTUnit680 = p_FTUnit();

                state._fsp--;
                if (state.failed) {
                    return retval;
                }
                if (state.backtracking == 0) {
                    adaptor.addChild(root_0, p_FTUnit680.getTree());
                }

            }

            retval.stop = input.LT(-1);

            if (state.backtracking == 0) {

                retval.tree = (XQDTCommonTree)adaptor.rulePostProcessing(root_0);
                adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        } catch (RecognitionException re) {
            reportError(re);
            recover(input, re);
            retval.tree = (XQDTCommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        } finally {
        }
        return retval;
    }

    // $ANTLR end "p_FTDistance"

    public static class p_FTUnit_return extends ParserRuleReturnScope {
        XQDTCommonTree tree;

        public Object getTree() {
            return tree;
        }
    };

    // $ANTLR start "p_FTUnit"
    // XQueryParser.g:1655:1: p_FTUnit : (k+= WORDS | k+= SENTENCES | k+= PARAGRAPHS ) ;
    public final XQueryParser.p_FTUnit_return p_FTUnit() throws RecognitionException {
        XQueryParser.p_FTUnit_return retval = new XQueryParser.p_FTUnit_return();
        retval.start = input.LT(1);

        XQDTCommonTree root_0 = null;

        CommonToken k = null;
        List<CommonToken> list_k = null;

        XQDTCommonTree k_tree = null;

        try {
            // XQueryParser.g:1656:9: ( (k+= WORDS | k+= SENTENCES | k+= PARAGRAPHS ) )
            // XQueryParser.g:1656:11: (k+= WORDS | k+= SENTENCES | k+= PARAGRAPHS )
            {
                root_0 = (XQDTCommonTree)adaptor.nil();

                // XQueryParser.g:1656:11: (k+= WORDS | k+= SENTENCES | k+= PARAGRAPHS )
                int alt210 = 3;
                switch (input.LA(1)) {
                case WORDS: {
                    alt210 = 1;
                }
                break;
                case SENTENCES: {
                    alt210 = 2;
                }
                break;
                case PARAGRAPHS: {
                    alt210 = 3;
                }
                break;
                default:
                    if (state.backtracking > 0) {
                        state.failed = true;
                        return retval;
                    }
                    NoViableAltException nvae = new NoViableAltException("", 210, 0, input);

                    throw nvae;
                }

                switch (alt210) {
                case 1:
                    // XQueryParser.g:1656:13: k+= WORDS
                {
                    k = (CommonToken)match(input, WORDS, FOLLOW_WORDS_in_p_FTUnit14576);
                    if (state.failed) {
                        return retval;
                    }
                    if (state.backtracking == 0) {
                        k_tree = (XQDTCommonTree)adaptor.create(k);
                        adaptor.addChild(root_0, k_tree);
                    }
                    if (list_k == null) {
                        list_k = new ArrayList<CommonToken>();
                    }
                    list_k.add(k);

                }
                    break;
                case 2:
                    // XQueryParser.g:1656:24: k+= SENTENCES
                {
                    k = (CommonToken)match(input, SENTENCES, FOLLOW_SENTENCES_in_p_FTUnit14582);
                    if (state.failed) {
                        return retval;
                    }
                    if (state.backtracking == 0) {
                        k_tree = (XQDTCommonTree)adaptor.create(k);
                        adaptor.addChild(root_0, k_tree);
                    }
                    if (list_k == null) {
                        list_k = new ArrayList<CommonToken>();
                    }
                    list_k.add(k);

                }
                    break;
                case 3:
                    // XQueryParser.g:1656:39: k+= PARAGRAPHS
                {
                    k = (CommonToken)match(input, PARAGRAPHS, FOLLOW_PARAGRAPHS_in_p_FTUnit14588);
                    if (state.failed) {
                        return retval;
                    }
                    if (state.backtracking == 0) {
                        k_tree = (XQDTCommonTree)adaptor.create(k);
                        adaptor.addChild(root_0, k_tree);
                    }
                    if (list_k == null) {
                        list_k = new ArrayList<CommonToken>();
                    }
                    list_k.add(k);

                }
                    break;

                }

                if (state.backtracking == 0) {
                    ak(list_k);
                }

            }

            retval.stop = input.LT(-1);

            if (state.backtracking == 0) {

                retval.tree = (XQDTCommonTree)adaptor.rulePostProcessing(root_0);
                adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        } catch (RecognitionException re) {
            reportError(re);
            recover(input, re);
            retval.tree = (XQDTCommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        } finally {
        }
        return retval;
    }

    // $ANTLR end "p_FTUnit"

    public static class p_FTScope_return extends ParserRuleReturnScope {
        XQDTCommonTree tree;

        public Object getTree() {
            return tree;
        }
    };

    // $ANTLR start "p_FTScope"
    // XQueryParser.g:1660:1: p_FTScope : (k+= SAME | k+= DIFFERENT ) p_FTBigUnit ;
    public final XQueryParser.p_FTScope_return p_FTScope() throws RecognitionException {
        XQueryParser.p_FTScope_return retval = new XQueryParser.p_FTScope_return();
        retval.start = input.LT(1);

        XQDTCommonTree root_0 = null;

        CommonToken k = null;
        List<CommonToken> list_k = null;
        XQueryParser.p_FTBigUnit_return p_FTBigUnit681 = null;

        XQDTCommonTree k_tree = null;

        try {
            // XQueryParser.g:1661:9: ( (k+= SAME | k+= DIFFERENT ) p_FTBigUnit )
            // XQueryParser.g:1661:11: (k+= SAME | k+= DIFFERENT ) p_FTBigUnit
            {
                root_0 = (XQDTCommonTree)adaptor.nil();

                // XQueryParser.g:1661:11: (k+= SAME | k+= DIFFERENT )
                int alt211 = 2;
                int LA211_0 = input.LA(1);

                if ((LA211_0 == SAME)) {
                    alt211 = 1;
                } else if ((LA211_0 == DIFFERENT)) {
                    alt211 = 2;
                } else {
                    if (state.backtracking > 0) {
                        state.failed = true;
                        return retval;
                    }
                    NoViableAltException nvae = new NoViableAltException("", 211, 0, input);

                    throw nvae;
                }
                switch (alt211) {
                case 1:
                    // XQueryParser.g:1661:12: k+= SAME
                {
                    k = (CommonToken)match(input, SAME, FOLLOW_SAME_in_p_FTScope14621);
                    if (state.failed) {
                        return retval;
                    }
                    if (state.backtracking == 0) {
                        k_tree = (XQDTCommonTree)adaptor.create(k);
                        adaptor.addChild(root_0, k_tree);
                    }
                    if (list_k == null) {
                        list_k = new ArrayList<CommonToken>();
                    }
                    list_k.add(k);

                }
                    break;
                case 2:
                    // XQueryParser.g:1661:22: k+= DIFFERENT
                {
                    k = (CommonToken)match(input, DIFFERENT, FOLLOW_DIFFERENT_in_p_FTScope14627);
                    if (state.failed) {
                        return retval;
                    }
                    if (state.backtracking == 0) {
                        k_tree = (XQDTCommonTree)adaptor.create(k);
                        adaptor.addChild(root_0, k_tree);
                    }
                    if (list_k == null) {
                        list_k = new ArrayList<CommonToken>();
                    }
                    list_k.add(k);

                }
                    break;

                }

                if (state.backtracking == 0) {
                    ak(list_k);
                }
                pushFollow(FOLLOW_p_FTBigUnit_in_p_FTScope14632);
                p_FTBigUnit681 = p_FTBigUnit();

                state._fsp--;
                if (state.failed) {
                    return retval;
                }
                if (state.backtracking == 0) {
                    adaptor.addChild(root_0, p_FTBigUnit681.getTree());
                }

            }

            retval.stop = input.LT(-1);

            if (state.backtracking == 0) {

                retval.tree = (XQDTCommonTree)adaptor.rulePostProcessing(root_0);
                adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        } catch (RecognitionException re) {
            reportError(re);
            recover(input, re);
            retval.tree = (XQDTCommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        } finally {
        }
        return retval;
    }

    // $ANTLR end "p_FTScope"

    public static class p_FTBigUnit_return extends ParserRuleReturnScope {
        XQDTCommonTree tree;

        public Object getTree() {
            return tree;
        }
    };

    // $ANTLR start "p_FTBigUnit"
    // XQueryParser.g:1665:1: p_FTBigUnit : (k+= SENTENCE | k+= PARAGRAPH ) ;
    public final XQueryParser.p_FTBigUnit_return p_FTBigUnit() throws RecognitionException {
        XQueryParser.p_FTBigUnit_return retval = new XQueryParser.p_FTBigUnit_return();
        retval.start = input.LT(1);

        XQDTCommonTree root_0 = null;

        CommonToken k = null;
        List<CommonToken> list_k = null;

        XQDTCommonTree k_tree = null;

        try {
            // XQueryParser.g:1666:9: ( (k+= SENTENCE | k+= PARAGRAPH ) )
            // XQueryParser.g:1666:11: (k+= SENTENCE | k+= PARAGRAPH )
            {
                root_0 = (XQDTCommonTree)adaptor.nil();

                // XQueryParser.g:1666:11: (k+= SENTENCE | k+= PARAGRAPH )
                int alt212 = 2;
                int LA212_0 = input.LA(1);

                if ((LA212_0 == SENTENCE)) {
                    alt212 = 1;
                } else if ((LA212_0 == PARAGRAPH)) {
                    alt212 = 2;
                } else {
                    if (state.backtracking > 0) {
                        state.failed = true;
                        return retval;
                    }
                    NoViableAltException nvae = new NoViableAltException("", 212, 0, input);

                    throw nvae;
                }
                switch (alt212) {
                case 1:
                    // XQueryParser.g:1666:13: k+= SENTENCE
                {
                    k = (CommonToken)match(input, SENTENCE, FOLLOW_SENTENCE_in_p_FTBigUnit14662);
                    if (state.failed) {
                        return retval;
                    }
                    if (state.backtracking == 0) {
                        k_tree = (XQDTCommonTree)adaptor.create(k);
                        adaptor.addChild(root_0, k_tree);
                    }
                    if (list_k == null) {
                        list_k = new ArrayList<CommonToken>();
                    }
                    list_k.add(k);

                }
                    break;
                case 2:
                    // XQueryParser.g:1666:27: k+= PARAGRAPH
                {
                    k = (CommonToken)match(input, PARAGRAPH, FOLLOW_PARAGRAPH_in_p_FTBigUnit14668);
                    if (state.failed) {
                        return retval;
                    }
                    if (state.backtracking == 0) {
                        k_tree = (XQDTCommonTree)adaptor.create(k);
                        adaptor.addChild(root_0, k_tree);
                    }
                    if (list_k == null) {
                        list_k = new ArrayList<CommonToken>();
                    }
                    list_k.add(k);

                }
                    break;

                }

                if (state.backtracking == 0) {
                    ak(list_k);
                }

            }

            retval.stop = input.LT(-1);

            if (state.backtracking == 0) {

                retval.tree = (XQDTCommonTree)adaptor.rulePostProcessing(root_0);
                adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        } catch (RecognitionException re) {
            reportError(re);
            recover(input, re);
            retval.tree = (XQDTCommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        } finally {
        }
        return retval;
    }

    // $ANTLR end "p_FTBigUnit"

    public static class p_FTContent_return extends ParserRuleReturnScope {
        XQDTCommonTree tree;

        public Object getTree() {
            return tree;
        }
    };

    // $ANTLR start "p_FTContent"
    // XQueryParser.g:1670:1: p_FTContent : ( (k+= AT k+= START ) | (k+= AT k+= END ) | (k+= ENTIRE k+= CONTENT ) ) ;
    public final XQueryParser.p_FTContent_return p_FTContent() throws RecognitionException {
        XQueryParser.p_FTContent_return retval = new XQueryParser.p_FTContent_return();
        retval.start = input.LT(1);

        XQDTCommonTree root_0 = null;

        CommonToken k = null;
        List<CommonToken> list_k = null;

        XQDTCommonTree k_tree = null;

        try {
            // XQueryParser.g:1671:9: ( ( (k+= AT k+= START ) | (k+= AT k+= END ) | (k+= ENTIRE k+= CONTENT ) ) )
            // XQueryParser.g:1671:11: ( (k+= AT k+= START ) | (k+= AT k+= END ) | (k+= ENTIRE k+= CONTENT ) )
            {
                root_0 = (XQDTCommonTree)adaptor.nil();

                // XQueryParser.g:1671:11: ( (k+= AT k+= START ) | (k+= AT k+= END ) | (k+= ENTIRE k+= CONTENT ) )
                int alt213 = 3;
                int LA213_0 = input.LA(1);

                if ((LA213_0 == AT)) {
                    int LA213_1 = input.LA(2);

                    if ((LA213_1 == START)) {
                        alt213 = 1;
                    } else if ((LA213_1 == END)) {
                        alt213 = 2;
                    } else {
                        if (state.backtracking > 0) {
                            state.failed = true;
                            return retval;
                        }
                        NoViableAltException nvae = new NoViableAltException("", 213, 1, input);

                        throw nvae;
                    }
                } else if ((LA213_0 == ENTIRE)) {
                    alt213 = 3;
                } else {
                    if (state.backtracking > 0) {
                        state.failed = true;
                        return retval;
                    }
                    NoViableAltException nvae = new NoViableAltException("", 213, 0, input);

                    throw nvae;
                }
                switch (alt213) {
                case 1:
                    // XQueryParser.g:1671:13: (k+= AT k+= START )
                {
                    // XQueryParser.g:1671:13: (k+= AT k+= START )
                    // XQueryParser.g:1671:14: k+= AT k+= START
                    {
                        k = (CommonToken)match(input, AT, FOLLOW_AT_in_p_FTContent14703);
                        if (state.failed) {
                            return retval;
                        }
                        if (state.backtracking == 0) {
                            k_tree = (XQDTCommonTree)adaptor.create(k);
                            adaptor.addChild(root_0, k_tree);
                        }
                        if (list_k == null) {
                            list_k = new ArrayList<CommonToken>();
                        }
                        list_k.add(k);

                        k = (CommonToken)match(input, START, FOLLOW_START_in_p_FTContent14707);
                        if (state.failed) {
                            return retval;
                        }
                        if (state.backtracking == 0) {
                            k_tree = (XQDTCommonTree)adaptor.create(k);
                            adaptor.addChild(root_0, k_tree);
                        }
                        if (list_k == null) {
                            list_k = new ArrayList<CommonToken>();
                        }
                        list_k.add(k);

                    }

                }
                    break;
                case 2:
                    // XQueryParser.g:1671:32: (k+= AT k+= END )
                {
                    // XQueryParser.g:1671:32: (k+= AT k+= END )
                    // XQueryParser.g:1671:33: k+= AT k+= END
                    {
                        k = (CommonToken)match(input, AT, FOLLOW_AT_in_p_FTContent14715);
                        if (state.failed) {
                            return retval;
                        }
                        if (state.backtracking == 0) {
                            k_tree = (XQDTCommonTree)adaptor.create(k);
                            adaptor.addChild(root_0, k_tree);
                        }
                        if (list_k == null) {
                            list_k = new ArrayList<CommonToken>();
                        }
                        list_k.add(k);

                        k = (CommonToken)match(input, END, FOLLOW_END_in_p_FTContent14719);
                        if (state.failed) {
                            return retval;
                        }
                        if (state.backtracking == 0) {
                            k_tree = (XQDTCommonTree)adaptor.create(k);
                            adaptor.addChild(root_0, k_tree);
                        }
                        if (list_k == null) {
                            list_k = new ArrayList<CommonToken>();
                        }
                        list_k.add(k);

                    }

                }
                    break;
                case 3:
                    // XQueryParser.g:1671:49: (k+= ENTIRE k+= CONTENT )
                {
                    // XQueryParser.g:1671:49: (k+= ENTIRE k+= CONTENT )
                    // XQueryParser.g:1671:50: k+= ENTIRE k+= CONTENT
                    {
                        k = (CommonToken)match(input, ENTIRE, FOLLOW_ENTIRE_in_p_FTContent14727);
                        if (state.failed) {
                            return retval;
                        }
                        if (state.backtracking == 0) {
                            k_tree = (XQDTCommonTree)adaptor.create(k);
                            adaptor.addChild(root_0, k_tree);
                        }
                        if (list_k == null) {
                            list_k = new ArrayList<CommonToken>();
                        }
                        list_k.add(k);

                        k = (CommonToken)match(input, CONTENT, FOLLOW_CONTENT_in_p_FTContent14731);
                        if (state.failed) {
                            return retval;
                        }
                        if (state.backtracking == 0) {
                            k_tree = (XQDTCommonTree)adaptor.create(k);
                            adaptor.addChild(root_0, k_tree);
                        }
                        if (list_k == null) {
                            list_k = new ArrayList<CommonToken>();
                        }
                        list_k.add(k);

                    }

                }
                    break;

                }

                if (state.backtracking == 0) {
                    ak(list_k);
                }

            }

            retval.stop = input.LT(-1);

            if (state.backtracking == 0) {

                retval.tree = (XQDTCommonTree)adaptor.rulePostProcessing(root_0);
                adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        } catch (RecognitionException re) {
            reportError(re);
            recover(input, re);
            retval.tree = (XQDTCommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        } finally {
        }
        return retval;
    }

    // $ANTLR end "p_FTContent"

    public static class p_FTMatchOptions_return extends ParserRuleReturnScope {
        XQDTCommonTree tree;

        public Object getTree() {
            return tree;
        }
    };

    // $ANTLR start "p_FTMatchOptions"
    // XQueryParser.g:1675:1: p_FTMatchOptions : (ku= USING p_FTMatchOption )+ ;
    public final XQueryParser.p_FTMatchOptions_return p_FTMatchOptions() throws RecognitionException {
        XQueryParser.p_FTMatchOptions_return retval = new XQueryParser.p_FTMatchOptions_return();
        retval.start = input.LT(1);

        XQDTCommonTree root_0 = null;

        CommonToken ku = null;
        XQueryParser.p_FTMatchOption_return p_FTMatchOption682 = null;

        XQDTCommonTree ku_tree = null;

        try {
            // XQueryParser.g:1676:9: ( (ku= USING p_FTMatchOption )+ )
            // XQueryParser.g:1676:11: (ku= USING p_FTMatchOption )+
            {
                root_0 = (XQDTCommonTree)adaptor.nil();

                // XQueryParser.g:1676:11: (ku= USING p_FTMatchOption )+
                int cnt214 = 0;
                loop214: do {
                    int alt214 = 2;
                    int LA214_0 = input.LA(1);

                    if ((LA214_0 == USING)) {
                        alt214 = 1;
                    }

                    switch (alt214) {
                    case 1:
                        // XQueryParser.g:1676:12: ku= USING p_FTMatchOption
                    {
                        ku = (CommonToken)match(input, USING, FOLLOW_USING_in_p_FTMatchOptions14765);
                        if (state.failed) {
                            return retval;
                        }
                        if (state.backtracking == 0) {
                            ku_tree = (XQDTCommonTree)adaptor.create(ku);
                            adaptor.addChild(root_0, ku_tree);
                        }
                        if (state.backtracking == 0) {
                            ak(ku);
                        }
                        pushFollow(FOLLOW_p_FTMatchOption_in_p_FTMatchOptions14769);
                        p_FTMatchOption682 = p_FTMatchOption();

                        state._fsp--;
                        if (state.failed) {
                            return retval;
                        }
                        if (state.backtracking == 0) {
                            adaptor.addChild(root_0, p_FTMatchOption682.getTree());
                        }

                    }
                    break;

                    default:
                        if (cnt214 >= 1) {
                            break loop214;
                        }
                        if (state.backtracking > 0) {
                            state.failed = true;
                            return retval;
                        }
                        EarlyExitException eee = new EarlyExitException(214, input);
                        throw eee;
                    }
                    cnt214++;
                } while (true);

            }

            retval.stop = input.LT(-1);

            if (state.backtracking == 0) {

                retval.tree = (XQDTCommonTree)adaptor.rulePostProcessing(root_0);
                adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        } catch (RecognitionException re) {
            reportError(re);
            recover(input, re);
            retval.tree = (XQDTCommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        } finally {
        }
        return retval;
    }

    // $ANTLR end "p_FTMatchOptions"

    public static class p_FTMatchOption_return extends ParserRuleReturnScope {
        XQDTCommonTree tree;

        public Object getTree() {
            return tree;
        }
    };

    // $ANTLR start "p_FTMatchOption"
    // XQueryParser.g:1680:1: p_FTMatchOption : ( p_FTLanguageOption | p_FTWildCardOption | p_FTThesaurusOption | p_FTStemOption | p_FTCaseOption | p_FTDiacriticsOption | p_FTStopWordOption | p_FTExtensionOption );
    public final XQueryParser.p_FTMatchOption_return p_FTMatchOption() throws RecognitionException {
        XQueryParser.p_FTMatchOption_return retval = new XQueryParser.p_FTMatchOption_return();
        retval.start = input.LT(1);

        XQDTCommonTree root_0 = null;

        XQueryParser.p_FTLanguageOption_return p_FTLanguageOption683 = null;

        XQueryParser.p_FTWildCardOption_return p_FTWildCardOption684 = null;

        XQueryParser.p_FTThesaurusOption_return p_FTThesaurusOption685 = null;

        XQueryParser.p_FTStemOption_return p_FTStemOption686 = null;

        XQueryParser.p_FTCaseOption_return p_FTCaseOption687 = null;

        XQueryParser.p_FTDiacriticsOption_return p_FTDiacriticsOption688 = null;

        XQueryParser.p_FTStopWordOption_return p_FTStopWordOption689 = null;

        XQueryParser.p_FTExtensionOption_return p_FTExtensionOption690 = null;

        try {
            // XQueryParser.g:1681:9: ( p_FTLanguageOption | p_FTWildCardOption | p_FTThesaurusOption | p_FTStemOption | p_FTCaseOption | p_FTDiacriticsOption | p_FTStopWordOption | p_FTExtensionOption )
            int alt215 = 8;
            alt215 = dfa215.predict(input);
            switch (alt215) {
            case 1:
                // XQueryParser.g:1681:11: p_FTLanguageOption
            {
                root_0 = (XQDTCommonTree)adaptor.nil();

                pushFollow(FOLLOW_p_FTLanguageOption_in_p_FTMatchOption14797);
                p_FTLanguageOption683 = p_FTLanguageOption();

                state._fsp--;
                if (state.failed) {
                    return retval;
                }
                if (state.backtracking == 0) {
                    adaptor.addChild(root_0, p_FTLanguageOption683.getTree());
                }

            }
            break;
            case 2:
                // XQueryParser.g:1682:11: p_FTWildCardOption
            {
                root_0 = (XQDTCommonTree)adaptor.nil();

                pushFollow(FOLLOW_p_FTWildCardOption_in_p_FTMatchOption14809);
                p_FTWildCardOption684 = p_FTWildCardOption();

                state._fsp--;
                if (state.failed) {
                    return retval;
                }
                if (state.backtracking == 0) {
                    adaptor.addChild(root_0, p_FTWildCardOption684.getTree());
                }

            }
            break;
            case 3:
                // XQueryParser.g:1683:11: p_FTThesaurusOption
            {
                root_0 = (XQDTCommonTree)adaptor.nil();

                pushFollow(FOLLOW_p_FTThesaurusOption_in_p_FTMatchOption14821);
                p_FTThesaurusOption685 = p_FTThesaurusOption();

                state._fsp--;
                if (state.failed) {
                    return retval;
                }
                if (state.backtracking == 0) {
                    adaptor.addChild(root_0, p_FTThesaurusOption685.getTree());
                }

            }
            break;
            case 4:
                // XQueryParser.g:1684:11: p_FTStemOption
            {
                root_0 = (XQDTCommonTree)adaptor.nil();

                pushFollow(FOLLOW_p_FTStemOption_in_p_FTMatchOption14833);
                p_FTStemOption686 = p_FTStemOption();

                state._fsp--;
                if (state.failed) {
                    return retval;
                }
                if (state.backtracking == 0) {
                    adaptor.addChild(root_0, p_FTStemOption686.getTree());
                }

            }
            break;
            case 5:
                // XQueryParser.g:1685:11: p_FTCaseOption
            {
                root_0 = (XQDTCommonTree)adaptor.nil();

                pushFollow(FOLLOW_p_FTCaseOption_in_p_FTMatchOption14845);
                p_FTCaseOption687 = p_FTCaseOption();

                state._fsp--;
                if (state.failed) {
                    return retval;
                }
                if (state.backtracking == 0) {
                    adaptor.addChild(root_0, p_FTCaseOption687.getTree());
                }

            }
            break;
            case 6:
                // XQueryParser.g:1686:11: p_FTDiacriticsOption
            {
                root_0 = (XQDTCommonTree)adaptor.nil();

                pushFollow(FOLLOW_p_FTDiacriticsOption_in_p_FTMatchOption14857);
                p_FTDiacriticsOption688 = p_FTDiacriticsOption();

                state._fsp--;
                if (state.failed) {
                    return retval;
                }
                if (state.backtracking == 0) {
                    adaptor.addChild(root_0, p_FTDiacriticsOption688.getTree());
                }

            }
            break;
            case 7:
                // XQueryParser.g:1687:11: p_FTStopWordOption
            {
                root_0 = (XQDTCommonTree)adaptor.nil();

                pushFollow(FOLLOW_p_FTStopWordOption_in_p_FTMatchOption14869);
                p_FTStopWordOption689 = p_FTStopWordOption();

                state._fsp--;
                if (state.failed) {
                    return retval;
                }
                if (state.backtracking == 0) {
                    adaptor.addChild(root_0, p_FTStopWordOption689.getTree());
                }

            }
            break;
            case 8:
                // XQueryParser.g:1688:11: p_FTExtensionOption
            {
                root_0 = (XQDTCommonTree)adaptor.nil();

                pushFollow(FOLLOW_p_FTExtensionOption_in_p_FTMatchOption14881);
                p_FTExtensionOption690 = p_FTExtensionOption();

                state._fsp--;
                if (state.failed) {
                    return retval;
                }
                if (state.backtracking == 0) {
                    adaptor.addChild(root_0, p_FTExtensionOption690.getTree());
                }

            }
            break;

            }
            retval.stop = input.LT(-1);

            if (state.backtracking == 0) {

                retval.tree = (XQDTCommonTree)adaptor.rulePostProcessing(root_0);
                adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        } catch (RecognitionException re) {
            reportError(re);
            recover(input, re);
            retval.tree = (XQDTCommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        } finally {
        }
        return retval;
    }

    // $ANTLR end "p_FTMatchOption"

    public static class p_FTCaseOption_return extends ParserRuleReturnScope {
        XQDTCommonTree tree;

        public Object getTree() {
            return tree;
        }
    };

    // $ANTLR start "p_FTCaseOption"
    // XQueryParser.g:1692:1: p_FTCaseOption : ( (k+= CASE k+= INSENSITIVE ) | (k+= CASE k+= SENSITIVE ) | k+= LOWERCASE | k+= UPPERCASE ) ;
    public final XQueryParser.p_FTCaseOption_return p_FTCaseOption() throws RecognitionException {
        XQueryParser.p_FTCaseOption_return retval = new XQueryParser.p_FTCaseOption_return();
        retval.start = input.LT(1);

        XQDTCommonTree root_0 = null;

        CommonToken k = null;
        List<CommonToken> list_k = null;

        XQDTCommonTree k_tree = null;

        try {
            // XQueryParser.g:1693:9: ( ( (k+= CASE k+= INSENSITIVE ) | (k+= CASE k+= SENSITIVE ) | k+= LOWERCASE | k+= UPPERCASE ) )
            // XQueryParser.g:1693:11: ( (k+= CASE k+= INSENSITIVE ) | (k+= CASE k+= SENSITIVE ) | k+= LOWERCASE | k+= UPPERCASE )
            {
                root_0 = (XQDTCommonTree)adaptor.nil();

                // XQueryParser.g:1693:11: ( (k+= CASE k+= INSENSITIVE ) | (k+= CASE k+= SENSITIVE ) | k+= LOWERCASE | k+= UPPERCASE )
                int alt216 = 4;
                switch (input.LA(1)) {
                case CASE: {
                    int LA216_1 = input.LA(2);

                    if ((LA216_1 == INSENSITIVE)) {
                        alt216 = 1;
                    } else if ((LA216_1 == SENSITIVE)) {
                        alt216 = 2;
                    } else {
                        if (state.backtracking > 0) {
                            state.failed = true;
                            return retval;
                        }
                        NoViableAltException nvae = new NoViableAltException("", 216, 1, input);

                        throw nvae;
                    }
                }
                break;
                case LOWERCASE: {
                    alt216 = 3;
                }
                break;
                case UPPERCASE: {
                    alt216 = 4;
                }
                break;
                default:
                    if (state.backtracking > 0) {
                        state.failed = true;
                        return retval;
                    }
                    NoViableAltException nvae = new NoViableAltException("", 216, 0, input);

                    throw nvae;
                }

                switch (alt216) {
                case 1:
                    // XQueryParser.g:1693:13: (k+= CASE k+= INSENSITIVE )
                {
                    // XQueryParser.g:1693:13: (k+= CASE k+= INSENSITIVE )
                    // XQueryParser.g:1693:14: k+= CASE k+= INSENSITIVE
                    {
                        k = (CommonToken)match(input, CASE, FOLLOW_CASE_in_p_FTCaseOption14912);
                        if (state.failed) {
                            return retval;
                        }
                        if (state.backtracking == 0) {
                            k_tree = (XQDTCommonTree)adaptor.create(k);
                            adaptor.addChild(root_0, k_tree);
                        }
                        if (list_k == null) {
                            list_k = new ArrayList<CommonToken>();
                        }
                        list_k.add(k);

                        k = (CommonToken)match(input, INSENSITIVE, FOLLOW_INSENSITIVE_in_p_FTCaseOption14916);
                        if (state.failed) {
                            return retval;
                        }
                        if (state.backtracking == 0) {
                            k_tree = (XQDTCommonTree)adaptor.create(k);
                            adaptor.addChild(root_0, k_tree);
                        }
                        if (list_k == null) {
                            list_k = new ArrayList<CommonToken>();
                        }
                        list_k.add(k);

                    }

                }
                    break;
                case 2:
                    // XQueryParser.g:1694:13: (k+= CASE k+= SENSITIVE )
                {
                    // XQueryParser.g:1694:13: (k+= CASE k+= SENSITIVE )
                    // XQueryParser.g:1694:14: k+= CASE k+= SENSITIVE
                    {
                        k = (CommonToken)match(input, CASE, FOLLOW_CASE_in_p_FTCaseOption14934);
                        if (state.failed) {
                            return retval;
                        }
                        if (state.backtracking == 0) {
                            k_tree = (XQDTCommonTree)adaptor.create(k);
                            adaptor.addChild(root_0, k_tree);
                        }
                        if (list_k == null) {
                            list_k = new ArrayList<CommonToken>();
                        }
                        list_k.add(k);

                        k = (CommonToken)match(input, SENSITIVE, FOLLOW_SENSITIVE_in_p_FTCaseOption14938);
                        if (state.failed) {
                            return retval;
                        }
                        if (state.backtracking == 0) {
                            k_tree = (XQDTCommonTree)adaptor.create(k);
                            adaptor.addChild(root_0, k_tree);
                        }
                        if (list_k == null) {
                            list_k = new ArrayList<CommonToken>();
                        }
                        list_k.add(k);

                    }

                }
                    break;
                case 3:
                    // XQueryParser.g:1695:13: k+= LOWERCASE
                {
                    k = (CommonToken)match(input, LOWERCASE, FOLLOW_LOWERCASE_in_p_FTCaseOption14955);
                    if (state.failed) {
                        return retval;
                    }
                    if (state.backtracking == 0) {
                        k_tree = (XQDTCommonTree)adaptor.create(k);
                        adaptor.addChild(root_0, k_tree);
                    }
                    if (list_k == null) {
                        list_k = new ArrayList<CommonToken>();
                    }
                    list_k.add(k);

                }
                    break;
                case 4:
                    // XQueryParser.g:1696:13: k+= UPPERCASE
                {
                    k = (CommonToken)match(input, UPPERCASE, FOLLOW_UPPERCASE_in_p_FTCaseOption14971);
                    if (state.failed) {
                        return retval;
                    }
                    if (state.backtracking == 0) {
                        k_tree = (XQDTCommonTree)adaptor.create(k);
                        adaptor.addChild(root_0, k_tree);
                    }
                    if (list_k == null) {
                        list_k = new ArrayList<CommonToken>();
                    }
                    list_k.add(k);

                }
                    break;

                }

                if (state.backtracking == 0) {
                    ak(list_k);
                }

            }

            retval.stop = input.LT(-1);

            if (state.backtracking == 0) {

                retval.tree = (XQDTCommonTree)adaptor.rulePostProcessing(root_0);
                adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        } catch (RecognitionException re) {
            reportError(re);
            recover(input, re);
            retval.tree = (XQDTCommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        } finally {
        }
        return retval;
    }

    // $ANTLR end "p_FTCaseOption"

    public static class p_FTDiacriticsOption_return extends ParserRuleReturnScope {
        XQDTCommonTree tree;

        public Object getTree() {
            return tree;
        }
    };

    // $ANTLR start "p_FTDiacriticsOption"
    // XQueryParser.g:1700:1: p_FTDiacriticsOption : ( (k+= DIACRITICS k+= INSENSITIVE ) | (k+= DIACRITICS k+= SENSITIVE ) ) ;
    public final XQueryParser.p_FTDiacriticsOption_return p_FTDiacriticsOption() throws RecognitionException {
        XQueryParser.p_FTDiacriticsOption_return retval = new XQueryParser.p_FTDiacriticsOption_return();
        retval.start = input.LT(1);

        XQDTCommonTree root_0 = null;

        CommonToken k = null;
        List<CommonToken> list_k = null;

        XQDTCommonTree k_tree = null;

        try {
            // XQueryParser.g:1701:9: ( ( (k+= DIACRITICS k+= INSENSITIVE ) | (k+= DIACRITICS k+= SENSITIVE ) ) )
            // XQueryParser.g:1701:11: ( (k+= DIACRITICS k+= INSENSITIVE ) | (k+= DIACRITICS k+= SENSITIVE ) )
            {
                root_0 = (XQDTCommonTree)adaptor.nil();

                // XQueryParser.g:1701:11: ( (k+= DIACRITICS k+= INSENSITIVE ) | (k+= DIACRITICS k+= SENSITIVE ) )
                int alt217 = 2;
                int LA217_0 = input.LA(1);

                if ((LA217_0 == DIACRITICS)) {
                    int LA217_1 = input.LA(2);

                    if ((LA217_1 == INSENSITIVE)) {
                        alt217 = 1;
                    } else if ((LA217_1 == SENSITIVE)) {
                        alt217 = 2;
                    } else {
                        if (state.backtracking > 0) {
                            state.failed = true;
                            return retval;
                        }
                        NoViableAltException nvae = new NoViableAltException("", 217, 1, input);

                        throw nvae;
                    }
                } else {
                    if (state.backtracking > 0) {
                        state.failed = true;
                        return retval;
                    }
                    NoViableAltException nvae = new NoViableAltException("", 217, 0, input);

                    throw nvae;
                }
                switch (alt217) {
                case 1:
                    // XQueryParser.g:1701:13: (k+= DIACRITICS k+= INSENSITIVE )
                {
                    // XQueryParser.g:1701:13: (k+= DIACRITICS k+= INSENSITIVE )
                    // XQueryParser.g:1701:14: k+= DIACRITICS k+= INSENSITIVE
                    {
                        k = (CommonToken)match(input, DIACRITICS, FOLLOW_DIACRITICS_in_p_FTDiacriticsOption15006);
                        if (state.failed) {
                            return retval;
                        }
                        if (state.backtracking == 0) {
                            k_tree = (XQDTCommonTree)adaptor.create(k);
                            adaptor.addChild(root_0, k_tree);
                        }
                        if (list_k == null) {
                            list_k = new ArrayList<CommonToken>();
                        }
                        list_k.add(k);

                        k = (CommonToken)match(input, INSENSITIVE, FOLLOW_INSENSITIVE_in_p_FTDiacriticsOption15010);
                        if (state.failed) {
                            return retval;
                        }
                        if (state.backtracking == 0) {
                            k_tree = (XQDTCommonTree)adaptor.create(k);
                            adaptor.addChild(root_0, k_tree);
                        }
                        if (list_k == null) {
                            list_k = new ArrayList<CommonToken>();
                        }
                        list_k.add(k);

                    }

                }
                    break;
                case 2:
                    // XQueryParser.g:1702:13: (k+= DIACRITICS k+= SENSITIVE )
                {
                    // XQueryParser.g:1702:13: (k+= DIACRITICS k+= SENSITIVE )
                    // XQueryParser.g:1702:14: k+= DIACRITICS k+= SENSITIVE
                    {
                        k = (CommonToken)match(input, DIACRITICS, FOLLOW_DIACRITICS_in_p_FTDiacriticsOption15028);
                        if (state.failed) {
                            return retval;
                        }
                        if (state.backtracking == 0) {
                            k_tree = (XQDTCommonTree)adaptor.create(k);
                            adaptor.addChild(root_0, k_tree);
                        }
                        if (list_k == null) {
                            list_k = new ArrayList<CommonToken>();
                        }
                        list_k.add(k);

                        k = (CommonToken)match(input, SENSITIVE, FOLLOW_SENSITIVE_in_p_FTDiacriticsOption15032);
                        if (state.failed) {
                            return retval;
                        }
                        if (state.backtracking == 0) {
                            k_tree = (XQDTCommonTree)adaptor.create(k);
                            adaptor.addChild(root_0, k_tree);
                        }
                        if (list_k == null) {
                            list_k = new ArrayList<CommonToken>();
                        }
                        list_k.add(k);

                    }

                }
                    break;

                }

                if (state.backtracking == 0) {
                    ak(list_k);
                }

            }

            retval.stop = input.LT(-1);

            if (state.backtracking == 0) {

                retval.tree = (XQDTCommonTree)adaptor.rulePostProcessing(root_0);
                adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        } catch (RecognitionException re) {
            reportError(re);
            recover(input, re);
            retval.tree = (XQDTCommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        } finally {
        }
        return retval;
    }

    // $ANTLR end "p_FTDiacriticsOption"

    public static class p_FTStemOption_return extends ParserRuleReturnScope {
        XQDTCommonTree tree;

        public Object getTree() {
            return tree;
        }
    };

    // $ANTLR start "p_FTStemOption"
    // XQueryParser.g:1706:1: p_FTStemOption : (k+= STEMMING | (k+= NO k+= STEMMING ) ) ;
    public final XQueryParser.p_FTStemOption_return p_FTStemOption() throws RecognitionException {
        XQueryParser.p_FTStemOption_return retval = new XQueryParser.p_FTStemOption_return();
        retval.start = input.LT(1);

        XQDTCommonTree root_0 = null;

        CommonToken k = null;
        List<CommonToken> list_k = null;

        XQDTCommonTree k_tree = null;

        try {
            // XQueryParser.g:1707:9: ( (k+= STEMMING | (k+= NO k+= STEMMING ) ) )
            // XQueryParser.g:1707:11: (k+= STEMMING | (k+= NO k+= STEMMING ) )
            {
                root_0 = (XQDTCommonTree)adaptor.nil();

                // XQueryParser.g:1707:11: (k+= STEMMING | (k+= NO k+= STEMMING ) )
                int alt218 = 2;
                int LA218_0 = input.LA(1);

                if ((LA218_0 == STEMMING)) {
                    alt218 = 1;
                } else if ((LA218_0 == NO)) {
                    alt218 = 2;
                } else {
                    if (state.backtracking > 0) {
                        state.failed = true;
                        return retval;
                    }
                    NoViableAltException nvae = new NoViableAltException("", 218, 0, input);

                    throw nvae;
                }
                switch (alt218) {
                case 1:
                    // XQueryParser.g:1707:13: k+= STEMMING
                {
                    k = (CommonToken)match(input, STEMMING, FOLLOW_STEMMING_in_p_FTStemOption15067);
                    if (state.failed) {
                        return retval;
                    }
                    if (state.backtracking == 0) {
                        k_tree = (XQDTCommonTree)adaptor.create(k);
                        adaptor.addChild(root_0, k_tree);
                    }
                    if (list_k == null) {
                        list_k = new ArrayList<CommonToken>();
                    }
                    list_k.add(k);

                }
                    break;
                case 2:
                    // XQueryParser.g:1707:27: (k+= NO k+= STEMMING )
                {
                    // XQueryParser.g:1707:27: (k+= NO k+= STEMMING )
                    // XQueryParser.g:1707:28: k+= NO k+= STEMMING
                    {
                        k = (CommonToken)match(input, NO, FOLLOW_NO_in_p_FTStemOption15074);
                        if (state.failed) {
                            return retval;
                        }
                        if (state.backtracking == 0) {
                            k_tree = (XQDTCommonTree)adaptor.create(k);
                            adaptor.addChild(root_0, k_tree);
                        }
                        if (list_k == null) {
                            list_k = new ArrayList<CommonToken>();
                        }
                        list_k.add(k);

                        k = (CommonToken)match(input, STEMMING, FOLLOW_STEMMING_in_p_FTStemOption15078);
                        if (state.failed) {
                            return retval;
                        }
                        if (state.backtracking == 0) {
                            k_tree = (XQDTCommonTree)adaptor.create(k);
                            adaptor.addChild(root_0, k_tree);
                        }
                        if (list_k == null) {
                            list_k = new ArrayList<CommonToken>();
                        }
                        list_k.add(k);

                    }

                }
                    break;

                }

                if (state.backtracking == 0) {
                    ak(list_k);
                }

            }

            retval.stop = input.LT(-1);

            if (state.backtracking == 0) {

                retval.tree = (XQDTCommonTree)adaptor.rulePostProcessing(root_0);
                adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        } catch (RecognitionException re) {
            reportError(re);
            recover(input, re);
            retval.tree = (XQDTCommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        } finally {
        }
        return retval;
    }

    // $ANTLR end "p_FTStemOption"

    public static class p_FTThesaurusOption_return extends ParserRuleReturnScope {
        XQDTCommonTree tree;

        public Object getTree() {
            return tree;
        }
    };

    // $ANTLR start "p_FTThesaurusOption"
    // XQueryParser.g:1711:1: p_FTThesaurusOption : ( (k+= THESAURUS ( p_FTThesaurusID | k+= DEFAULT ) ) | (k+= THESAURUS LPAREN ( p_FTThesaurusID | k+= DEFAULT ) ( COMMA p_FTThesaurusID )* RPAREN ) | (k+= NO k+= THESAURUS ) ) ;
    public final XQueryParser.p_FTThesaurusOption_return p_FTThesaurusOption() throws RecognitionException {
        XQueryParser.p_FTThesaurusOption_return retval = new XQueryParser.p_FTThesaurusOption_return();
        retval.start = input.LT(1);

        XQDTCommonTree root_0 = null;

        CommonToken LPAREN692 = null;
        CommonToken COMMA694 = null;
        CommonToken RPAREN696 = null;
        CommonToken k = null;
        List<CommonToken> list_k = null;
        XQueryParser.p_FTThesaurusID_return p_FTThesaurusID691 = null;

        XQueryParser.p_FTThesaurusID_return p_FTThesaurusID693 = null;

        XQueryParser.p_FTThesaurusID_return p_FTThesaurusID695 = null;

        XQDTCommonTree LPAREN692_tree = null;
        XQDTCommonTree COMMA694_tree = null;
        XQDTCommonTree RPAREN696_tree = null;
        XQDTCommonTree k_tree = null;

        try {
            // XQueryParser.g:1712:9: ( ( (k+= THESAURUS ( p_FTThesaurusID | k+= DEFAULT ) ) | (k+= THESAURUS LPAREN ( p_FTThesaurusID | k+= DEFAULT ) ( COMMA p_FTThesaurusID )* RPAREN ) | (k+= NO k+= THESAURUS ) ) )
            // XQueryParser.g:1712:11: ( (k+= THESAURUS ( p_FTThesaurusID | k+= DEFAULT ) ) | (k+= THESAURUS LPAREN ( p_FTThesaurusID | k+= DEFAULT ) ( COMMA p_FTThesaurusID )* RPAREN ) | (k+= NO k+= THESAURUS ) )
            {
                root_0 = (XQDTCommonTree)adaptor.nil();

                // XQueryParser.g:1712:11: ( (k+= THESAURUS ( p_FTThesaurusID | k+= DEFAULT ) ) | (k+= THESAURUS LPAREN ( p_FTThesaurusID | k+= DEFAULT ) ( COMMA p_FTThesaurusID )* RPAREN ) | (k+= NO k+= THESAURUS ) )
                int alt222 = 3;
                int LA222_0 = input.LA(1);

                if ((LA222_0 == THESAURUS)) {
                    int LA222_1 = input.LA(2);

                    if ((LA222_1 == LPAREN)) {
                        alt222 = 2;
                    } else if ((LA222_1 == AT || LA222_1 == DEFAULT)) {
                        alt222 = 1;
                    } else {
                        if (state.backtracking > 0) {
                            state.failed = true;
                            return retval;
                        }
                        NoViableAltException nvae = new NoViableAltException("", 222, 1, input);

                        throw nvae;
                    }
                } else if ((LA222_0 == NO)) {
                    alt222 = 3;
                } else {
                    if (state.backtracking > 0) {
                        state.failed = true;
                        return retval;
                    }
                    NoViableAltException nvae = new NoViableAltException("", 222, 0, input);

                    throw nvae;
                }
                switch (alt222) {
                case 1:
                    // XQueryParser.g:1712:13: (k+= THESAURUS ( p_FTThesaurusID | k+= DEFAULT ) )
                {
                    // XQueryParser.g:1712:13: (k+= THESAURUS ( p_FTThesaurusID | k+= DEFAULT ) )
                    // XQueryParser.g:1712:14: k+= THESAURUS ( p_FTThesaurusID | k+= DEFAULT )
                    {
                        k = (CommonToken)match(input, THESAURUS, FOLLOW_THESAURUS_in_p_FTThesaurusOption15114);
                        if (state.failed) {
                            return retval;
                        }
                        if (state.backtracking == 0) {
                            k_tree = (XQDTCommonTree)adaptor.create(k);
                            adaptor.addChild(root_0, k_tree);
                        }
                        if (list_k == null) {
                            list_k = new ArrayList<CommonToken>();
                        }
                        list_k.add(k);

                        // XQueryParser.g:1712:27: ( p_FTThesaurusID | k+= DEFAULT )
                        int alt219 = 2;
                        int LA219_0 = input.LA(1);

                        if ((LA219_0 == AT)) {
                            alt219 = 1;
                        } else if ((LA219_0 == DEFAULT)) {
                            alt219 = 2;
                        } else {
                            if (state.backtracking > 0) {
                                state.failed = true;
                                return retval;
                            }
                            NoViableAltException nvae = new NoViableAltException("", 219, 0, input);

                            throw nvae;
                        }
                        switch (alt219) {
                        case 1:
                            // XQueryParser.g:1712:28: p_FTThesaurusID
                        {
                            pushFollow(FOLLOW_p_FTThesaurusID_in_p_FTThesaurusOption15117);
                            p_FTThesaurusID691 = p_FTThesaurusID();

                            state._fsp--;
                            if (state.failed) {
                                return retval;
                            }
                            if (state.backtracking == 0) {
                                adaptor.addChild(root_0, p_FTThesaurusID691.getTree());
                            }

                        }
                            break;
                        case 2:
                            // XQueryParser.g:1712:46: k+= DEFAULT
                        {
                            k = (CommonToken)match(input, DEFAULT, FOLLOW_DEFAULT_in_p_FTThesaurusOption15123);
                            if (state.failed) {
                                return retval;
                            }
                            if (state.backtracking == 0) {
                                k_tree = (XQDTCommonTree)adaptor.create(k);
                                adaptor.addChild(root_0, k_tree);
                            }
                            if (list_k == null) {
                                list_k = new ArrayList<CommonToken>();
                            }
                            list_k.add(k);

                        }
                            break;

                        }

                    }

                }
                    break;
                case 2:
                    // XQueryParser.g:1713:13: (k+= THESAURUS LPAREN ( p_FTThesaurusID | k+= DEFAULT ) ( COMMA p_FTThesaurusID )* RPAREN )
                {
                    // XQueryParser.g:1713:13: (k+= THESAURUS LPAREN ( p_FTThesaurusID | k+= DEFAULT ) ( COMMA p_FTThesaurusID )* RPAREN )
                    // XQueryParser.g:1713:14: k+= THESAURUS LPAREN ( p_FTThesaurusID | k+= DEFAULT ) ( COMMA p_FTThesaurusID )* RPAREN
                    {
                        k = (CommonToken)match(input, THESAURUS, FOLLOW_THESAURUS_in_p_FTThesaurusOption15142);
                        if (state.failed) {
                            return retval;
                        }
                        if (state.backtracking == 0) {
                            k_tree = (XQDTCommonTree)adaptor.create(k);
                            adaptor.addChild(root_0, k_tree);
                        }
                        if (list_k == null) {
                            list_k = new ArrayList<CommonToken>();
                        }
                        list_k.add(k);

                        LPAREN692 = (CommonToken)match(input, LPAREN, FOLLOW_LPAREN_in_p_FTThesaurusOption15144);
                        if (state.failed) {
                            return retval;
                        }
                        if (state.backtracking == 0) {
                            LPAREN692_tree = (XQDTCommonTree)adaptor.create(LPAREN692);
                            adaptor.addChild(root_0, LPAREN692_tree);
                        }
                        // XQueryParser.g:1713:34: ( p_FTThesaurusID | k+= DEFAULT )
                        int alt220 = 2;
                        int LA220_0 = input.LA(1);

                        if ((LA220_0 == AT)) {
                            alt220 = 1;
                        } else if ((LA220_0 == DEFAULT)) {
                            alt220 = 2;
                        } else {
                            if (state.backtracking > 0) {
                                state.failed = true;
                                return retval;
                            }
                            NoViableAltException nvae = new NoViableAltException("", 220, 0, input);

                            throw nvae;
                        }
                        switch (alt220) {
                        case 1:
                            // XQueryParser.g:1713:35: p_FTThesaurusID
                        {
                            pushFollow(FOLLOW_p_FTThesaurusID_in_p_FTThesaurusOption15147);
                            p_FTThesaurusID693 = p_FTThesaurusID();

                            state._fsp--;
                            if (state.failed) {
                                return retval;
                            }
                            if (state.backtracking == 0) {
                                adaptor.addChild(root_0, p_FTThesaurusID693.getTree());
                            }

                        }
                            break;
                        case 2:
                            // XQueryParser.g:1713:53: k+= DEFAULT
                        {
                            k = (CommonToken)match(input, DEFAULT, FOLLOW_DEFAULT_in_p_FTThesaurusOption15153);
                            if (state.failed) {
                                return retval;
                            }
                            if (state.backtracking == 0) {
                                k_tree = (XQDTCommonTree)adaptor.create(k);
                                adaptor.addChild(root_0, k_tree);
                            }
                            if (list_k == null) {
                                list_k = new ArrayList<CommonToken>();
                            }
                            list_k.add(k);

                        }
                            break;

                        }

                        // XQueryParser.g:1713:65: ( COMMA p_FTThesaurusID )*
                        loop221: do {
                            int alt221 = 2;
                            int LA221_0 = input.LA(1);

                            if ((LA221_0 == COMMA)) {
                                alt221 = 1;
                            }

                            switch (alt221) {
                            case 1:
                                // XQueryParser.g:1713:66: COMMA p_FTThesaurusID
                            {
                                COMMA694 = (CommonToken)match(input, COMMA, FOLLOW_COMMA_in_p_FTThesaurusOption15157);
                                if (state.failed) {
                                    return retval;
                                }
                                if (state.backtracking == 0) {
                                    COMMA694_tree = (XQDTCommonTree)adaptor.create(COMMA694);
                                    adaptor.addChild(root_0, COMMA694_tree);
                                }
                                pushFollow(FOLLOW_p_FTThesaurusID_in_p_FTThesaurusOption15159);
                                p_FTThesaurusID695 = p_FTThesaurusID();

                                state._fsp--;
                                if (state.failed) {
                                    return retval;
                                }
                                if (state.backtracking == 0) {
                                    adaptor.addChild(root_0, p_FTThesaurusID695.getTree());
                                }

                            }
                            break;

                            default:
                                break loop221;
                            }
                        } while (true);

                        RPAREN696 = (CommonToken)match(input, RPAREN, FOLLOW_RPAREN_in_p_FTThesaurusOption15163);
                        if (state.failed) {
                            return retval;
                        }
                        if (state.backtracking == 0) {
                            RPAREN696_tree = (XQDTCommonTree)adaptor.create(RPAREN696);
                            adaptor.addChild(root_0, RPAREN696_tree);
                        }

                    }

                }
                    break;
                case 3:
                    // XQueryParser.g:1714:13: (k+= NO k+= THESAURUS )
                {
                    // XQueryParser.g:1714:13: (k+= NO k+= THESAURUS )
                    // XQueryParser.g:1714:14: k+= NO k+= THESAURUS
                    {
                        k = (CommonToken)match(input, NO, FOLLOW_NO_in_p_FTThesaurusOption15181);
                        if (state.failed) {
                            return retval;
                        }
                        if (state.backtracking == 0) {
                            k_tree = (XQDTCommonTree)adaptor.create(k);
                            adaptor.addChild(root_0, k_tree);
                        }
                        if (list_k == null) {
                            list_k = new ArrayList<CommonToken>();
                        }
                        list_k.add(k);

                        k = (CommonToken)match(input, THESAURUS, FOLLOW_THESAURUS_in_p_FTThesaurusOption15185);
                        if (state.failed) {
                            return retval;
                        }
                        if (state.backtracking == 0) {
                            k_tree = (XQDTCommonTree)adaptor.create(k);
                            adaptor.addChild(root_0, k_tree);
                        }
                        if (list_k == null) {
                            list_k = new ArrayList<CommonToken>();
                        }
                        list_k.add(k);

                    }

                }
                    break;

                }

                if (state.backtracking == 0) {
                    ak(list_k);
                }

            }

            retval.stop = input.LT(-1);

            if (state.backtracking == 0) {

                retval.tree = (XQDTCommonTree)adaptor.rulePostProcessing(root_0);
                adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        } catch (RecognitionException re) {
            reportError(re);
            recover(input, re);
            retval.tree = (XQDTCommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        } finally {
        }
        return retval;
    }

    // $ANTLR end "p_FTThesaurusOption"

    public static class p_FTThesaurusID_return extends ParserRuleReturnScope {
        XQDTCommonTree tree;

        public Object getTree() {
            return tree;
        }
    };

    // $ANTLR start "p_FTThesaurusID"
    // XQueryParser.g:1718:1: p_FTThesaurusID : k+= AT p_StringLiteral (k+= RELATIONSHIP p_StringLiteral )? ( p_FTLiteralRange k+= LEVELS )? ;
    public final XQueryParser.p_FTThesaurusID_return p_FTThesaurusID() throws RecognitionException {
        XQueryParser.p_FTThesaurusID_return retval = new XQueryParser.p_FTThesaurusID_return();
        retval.start = input.LT(1);

        XQDTCommonTree root_0 = null;

        CommonToken k = null;
        List<CommonToken> list_k = null;
        XQueryParser.p_StringLiteral_return p_StringLiteral697 = null;

        XQueryParser.p_StringLiteral_return p_StringLiteral698 = null;

        XQueryParser.p_FTLiteralRange_return p_FTLiteralRange699 = null;

        XQDTCommonTree k_tree = null;

        try {
            // XQueryParser.g:1719:9: (k+= AT p_StringLiteral (k+= RELATIONSHIP p_StringLiteral )? ( p_FTLiteralRange k+= LEVELS )? )
            // XQueryParser.g:1719:11: k+= AT p_StringLiteral (k+= RELATIONSHIP p_StringLiteral )? ( p_FTLiteralRange k+= LEVELS )?
            {
                root_0 = (XQDTCommonTree)adaptor.nil();

                k = (CommonToken)match(input, AT, FOLLOW_AT_in_p_FTThesaurusID15218);
                if (state.failed) {
                    return retval;
                }
                if (state.backtracking == 0) {
                    k_tree = (XQDTCommonTree)adaptor.create(k);
                    adaptor.addChild(root_0, k_tree);
                }
                if (list_k == null) {
                    list_k = new ArrayList<CommonToken>();
                }
                list_k.add(k);

                pushFollow(FOLLOW_p_StringLiteral_in_p_FTThesaurusID15220);
                p_StringLiteral697 = p_StringLiteral();

                state._fsp--;
                if (state.failed) {
                    return retval;
                }
                if (state.backtracking == 0) {
                    adaptor.addChild(root_0, p_StringLiteral697.getTree());
                }
                // XQueryParser.g:1719:33: (k+= RELATIONSHIP p_StringLiteral )?
                int alt223 = 2;
                int LA223_0 = input.LA(1);

                if ((LA223_0 == RELATIONSHIP)) {
                    alt223 = 1;
                }
                switch (alt223) {
                case 1:
                    // XQueryParser.g:1719:34: k+= RELATIONSHIP p_StringLiteral
                {
                    k = (CommonToken)match(input, RELATIONSHIP, FOLLOW_RELATIONSHIP_in_p_FTThesaurusID15225);
                    if (state.failed) {
                        return retval;
                    }
                    if (state.backtracking == 0) {
                        k_tree = (XQDTCommonTree)adaptor.create(k);
                        adaptor.addChild(root_0, k_tree);
                    }
                    if (list_k == null) {
                        list_k = new ArrayList<CommonToken>();
                    }
                    list_k.add(k);

                    pushFollow(FOLLOW_p_StringLiteral_in_p_FTThesaurusID15227);
                    p_StringLiteral698 = p_StringLiteral();

                    state._fsp--;
                    if (state.failed) {
                        return retval;
                    }
                    if (state.backtracking == 0) {
                        adaptor.addChild(root_0, p_StringLiteral698.getTree());
                    }

                }
                    break;

                }

                // XQueryParser.g:1719:68: ( p_FTLiteralRange k+= LEVELS )?
                int alt224 = 2;
                int LA224_0 = input.LA(1);

                if (((LA224_0 >= EXACTLY && LA224_0 <= FROM))) {
                    alt224 = 1;
                } else if ((LA224_0 == AT)) {
                    int LA224_2 = input.LA(2);

                    if ((LA224_2 == LEAST || LA224_2 == MOST)) {
                        alt224 = 1;
                    }
                }
                switch (alt224) {
                case 1:
                    // XQueryParser.g:1719:69: p_FTLiteralRange k+= LEVELS
                {
                    pushFollow(FOLLOW_p_FTLiteralRange_in_p_FTThesaurusID15232);
                    p_FTLiteralRange699 = p_FTLiteralRange();

                    state._fsp--;
                    if (state.failed) {
                        return retval;
                    }
                    if (state.backtracking == 0) {
                        adaptor.addChild(root_0, p_FTLiteralRange699.getTree());
                    }
                    k = (CommonToken)match(input, LEVELS, FOLLOW_LEVELS_in_p_FTThesaurusID15236);
                    if (state.failed) {
                        return retval;
                    }
                    if (state.backtracking == 0) {
                        k_tree = (XQDTCommonTree)adaptor.create(k);
                        adaptor.addChild(root_0, k_tree);
                    }
                    if (list_k == null) {
                        list_k = new ArrayList<CommonToken>();
                    }
                    list_k.add(k);

                }
                    break;

                }

                if (state.backtracking == 0) {
                    ak(list_k);
                }

            }

            retval.stop = input.LT(-1);

            if (state.backtracking == 0) {

                retval.tree = (XQDTCommonTree)adaptor.rulePostProcessing(root_0);
                adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        } catch (RecognitionException re) {
            reportError(re);
            recover(input, re);
            retval.tree = (XQDTCommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        } finally {
        }
        return retval;
    }

    // $ANTLR end "p_FTThesaurusID"

    public static class p_FTLiteralRange_return extends ParserRuleReturnScope {
        XQDTCommonTree tree;

        public Object getTree() {
            return tree;
        }
    };

    // $ANTLR start "p_FTLiteralRange"
    // XQueryParser.g:1723:1: p_FTLiteralRange : ( (k+= EXACTLY L_IntegerLiteral ) | (k+= AT k+= LEAST L_IntegerLiteral ) | (k+= AT k+= MOST L_IntegerLiteral ) | (k+= FROM L_IntegerLiteral TO L_IntegerLiteral ) ) ;
    public final XQueryParser.p_FTLiteralRange_return p_FTLiteralRange() throws RecognitionException {
        XQueryParser.p_FTLiteralRange_return retval = new XQueryParser.p_FTLiteralRange_return();
        retval.start = input.LT(1);

        XQDTCommonTree root_0 = null;

        CommonToken L_IntegerLiteral700 = null;
        CommonToken L_IntegerLiteral701 = null;
        CommonToken L_IntegerLiteral702 = null;
        CommonToken L_IntegerLiteral703 = null;
        CommonToken TO704 = null;
        CommonToken L_IntegerLiteral705 = null;
        CommonToken k = null;
        List<CommonToken> list_k = null;

        XQDTCommonTree L_IntegerLiteral700_tree = null;
        XQDTCommonTree L_IntegerLiteral701_tree = null;
        XQDTCommonTree L_IntegerLiteral702_tree = null;
        XQDTCommonTree L_IntegerLiteral703_tree = null;
        XQDTCommonTree TO704_tree = null;
        XQDTCommonTree L_IntegerLiteral705_tree = null;
        XQDTCommonTree k_tree = null;

        try {
            // XQueryParser.g:1724:9: ( ( (k+= EXACTLY L_IntegerLiteral ) | (k+= AT k+= LEAST L_IntegerLiteral ) | (k+= AT k+= MOST L_IntegerLiteral ) | (k+= FROM L_IntegerLiteral TO L_IntegerLiteral ) ) )
            // XQueryParser.g:1724:11: ( (k+= EXACTLY L_IntegerLiteral ) | (k+= AT k+= LEAST L_IntegerLiteral ) | (k+= AT k+= MOST L_IntegerLiteral ) | (k+= FROM L_IntegerLiteral TO L_IntegerLiteral ) )
            {
                root_0 = (XQDTCommonTree)adaptor.nil();

                // XQueryParser.g:1724:11: ( (k+= EXACTLY L_IntegerLiteral ) | (k+= AT k+= LEAST L_IntegerLiteral ) | (k+= AT k+= MOST L_IntegerLiteral ) | (k+= FROM L_IntegerLiteral TO L_IntegerLiteral ) )
                int alt225 = 4;
                switch (input.LA(1)) {
                case EXACTLY: {
                    alt225 = 1;
                }
                break;
                case AT: {
                    int LA225_2 = input.LA(2);

                    if ((LA225_2 == LEAST)) {
                        alt225 = 2;
                    } else if ((LA225_2 == MOST)) {
                        alt225 = 3;
                    } else {
                        if (state.backtracking > 0) {
                            state.failed = true;
                            return retval;
                        }
                        NoViableAltException nvae = new NoViableAltException("", 225, 2, input);

                        throw nvae;
                    }
                }
                break;
                case FROM: {
                    alt225 = 4;
                }
                break;
                default:
                    if (state.backtracking > 0) {
                        state.failed = true;
                        return retval;
                    }
                    NoViableAltException nvae = new NoViableAltException("", 225, 0, input);

                    throw nvae;
                }

                switch (alt225) {
                case 1:
                    // XQueryParser.g:1724:13: (k+= EXACTLY L_IntegerLiteral )
                {
                    // XQueryParser.g:1724:13: (k+= EXACTLY L_IntegerLiteral )
                    // XQueryParser.g:1724:14: k+= EXACTLY L_IntegerLiteral
                    {
                        k = (CommonToken)match(input, EXACTLY, FOLLOW_EXACTLY_in_p_FTLiteralRange15271);
                        if (state.failed) {
                            return retval;
                        }
                        if (state.backtracking == 0) {
                            k_tree = (XQDTCommonTree)adaptor.create(k);
                            adaptor.addChild(root_0, k_tree);
                        }
                        if (list_k == null) {
                            list_k = new ArrayList<CommonToken>();
                        }
                        list_k.add(k);

                        L_IntegerLiteral700 = (CommonToken)match(input, L_IntegerLiteral,
                                FOLLOW_L_IntegerLiteral_in_p_FTLiteralRange15273);
                        if (state.failed) {
                            return retval;
                        }
                        if (state.backtracking == 0) {
                            L_IntegerLiteral700_tree = (XQDTCommonTree)adaptor.create(L_IntegerLiteral700);
                            adaptor.addChild(root_0, L_IntegerLiteral700_tree);
                        }

                    }

                }
                    break;
                case 2:
                    // XQueryParser.g:1725:13: (k+= AT k+= LEAST L_IntegerLiteral )
                {
                    // XQueryParser.g:1725:13: (k+= AT k+= LEAST L_IntegerLiteral )
                    // XQueryParser.g:1725:14: k+= AT k+= LEAST L_IntegerLiteral
                    {
                        k = (CommonToken)match(input, AT, FOLLOW_AT_in_p_FTLiteralRange15291);
                        if (state.failed) {
                            return retval;
                        }
                        if (state.backtracking == 0) {
                            k_tree = (XQDTCommonTree)adaptor.create(k);
                            adaptor.addChild(root_0, k_tree);
                        }
                        if (list_k == null) {
                            list_k = new ArrayList<CommonToken>();
                        }
                        list_k.add(k);

                        k = (CommonToken)match(input, LEAST, FOLLOW_LEAST_in_p_FTLiteralRange15295);
                        if (state.failed) {
                            return retval;
                        }
                        if (state.backtracking == 0) {
                            k_tree = (XQDTCommonTree)adaptor.create(k);
                            adaptor.addChild(root_0, k_tree);
                        }
                        if (list_k == null) {
                            list_k = new ArrayList<CommonToken>();
                        }
                        list_k.add(k);

                        L_IntegerLiteral701 = (CommonToken)match(input, L_IntegerLiteral,
                                FOLLOW_L_IntegerLiteral_in_p_FTLiteralRange15297);
                        if (state.failed) {
                            return retval;
                        }
                        if (state.backtracking == 0) {
                            L_IntegerLiteral701_tree = (XQDTCommonTree)adaptor.create(L_IntegerLiteral701);
                            adaptor.addChild(root_0, L_IntegerLiteral701_tree);
                        }

                    }

                }
                    break;
                case 3:
                    // XQueryParser.g:1726:13: (k+= AT k+= MOST L_IntegerLiteral )
                {
                    // XQueryParser.g:1726:13: (k+= AT k+= MOST L_IntegerLiteral )
                    // XQueryParser.g:1726:14: k+= AT k+= MOST L_IntegerLiteral
                    {
                        k = (CommonToken)match(input, AT, FOLLOW_AT_in_p_FTLiteralRange15315);
                        if (state.failed) {
                            return retval;
                        }
                        if (state.backtracking == 0) {
                            k_tree = (XQDTCommonTree)adaptor.create(k);
                            adaptor.addChild(root_0, k_tree);
                        }
                        if (list_k == null) {
                            list_k = new ArrayList<CommonToken>();
                        }
                        list_k.add(k);

                        k = (CommonToken)match(input, MOST, FOLLOW_MOST_in_p_FTLiteralRange15319);
                        if (state.failed) {
                            return retval;
                        }
                        if (state.backtracking == 0) {
                            k_tree = (XQDTCommonTree)adaptor.create(k);
                            adaptor.addChild(root_0, k_tree);
                        }
                        if (list_k == null) {
                            list_k = new ArrayList<CommonToken>();
                        }
                        list_k.add(k);

                        L_IntegerLiteral702 = (CommonToken)match(input, L_IntegerLiteral,
                                FOLLOW_L_IntegerLiteral_in_p_FTLiteralRange15321);
                        if (state.failed) {
                            return retval;
                        }
                        if (state.backtracking == 0) {
                            L_IntegerLiteral702_tree = (XQDTCommonTree)adaptor.create(L_IntegerLiteral702);
                            adaptor.addChild(root_0, L_IntegerLiteral702_tree);
                        }

                    }

                }
                    break;
                case 4:
                    // XQueryParser.g:1727:13: (k+= FROM L_IntegerLiteral TO L_IntegerLiteral )
                {
                    // XQueryParser.g:1727:13: (k+= FROM L_IntegerLiteral TO L_IntegerLiteral )
                    // XQueryParser.g:1727:14: k+= FROM L_IntegerLiteral TO L_IntegerLiteral
                    {
                        k = (CommonToken)match(input, FROM, FOLLOW_FROM_in_p_FTLiteralRange15339);
                        if (state.failed) {
                            return retval;
                        }
                        if (state.backtracking == 0) {
                            k_tree = (XQDTCommonTree)adaptor.create(k);
                            adaptor.addChild(root_0, k_tree);
                        }
                        if (list_k == null) {
                            list_k = new ArrayList<CommonToken>();
                        }
                        list_k.add(k);

                        L_IntegerLiteral703 = (CommonToken)match(input, L_IntegerLiteral,
                                FOLLOW_L_IntegerLiteral_in_p_FTLiteralRange15341);
                        if (state.failed) {
                            return retval;
                        }
                        if (state.backtracking == 0) {
                            L_IntegerLiteral703_tree = (XQDTCommonTree)adaptor.create(L_IntegerLiteral703);
                            adaptor.addChild(root_0, L_IntegerLiteral703_tree);
                        }
                        TO704 = (CommonToken)match(input, TO, FOLLOW_TO_in_p_FTLiteralRange15343);
                        if (state.failed) {
                            return retval;
                        }
                        if (state.backtracking == 0) {
                            TO704_tree = (XQDTCommonTree)adaptor.create(TO704);
                            adaptor.addChild(root_0, TO704_tree);
                        }
                        L_IntegerLiteral705 = (CommonToken)match(input, L_IntegerLiteral,
                                FOLLOW_L_IntegerLiteral_in_p_FTLiteralRange15345);
                        if (state.failed) {
                            return retval;
                        }
                        if (state.backtracking == 0) {
                            L_IntegerLiteral705_tree = (XQDTCommonTree)adaptor.create(L_IntegerLiteral705);
                            adaptor.addChild(root_0, L_IntegerLiteral705_tree);
                        }

                    }

                }
                    break;

                }

                if (state.backtracking == 0) {
                    ak(list_k);
                }

            }

            retval.stop = input.LT(-1);

            if (state.backtracking == 0) {

                retval.tree = (XQDTCommonTree)adaptor.rulePostProcessing(root_0);
                adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        } catch (RecognitionException re) {
            reportError(re);
            recover(input, re);
            retval.tree = (XQDTCommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        } finally {
        }
        return retval;
    }

    // $ANTLR end "p_FTLiteralRange"

    public static class p_FTStopWordOption_return extends ParserRuleReturnScope {
        XQDTCommonTree tree;

        public Object getTree() {
            return tree;
        }
    };

    // $ANTLR start "p_FTStopWordOption"
    // XQueryParser.g:1731:1: p_FTStopWordOption : ( (k+= STOP k+= WORDS p_FTStopWords ( p_FTStopWordsInclExcl )* ) | (k+= STOP k+= WORDS k+= DEFAULT ( p_FTStopWordsInclExcl )* ) | (k+= NO k+= STOP k+= WORDS ) ) ;
    public final XQueryParser.p_FTStopWordOption_return p_FTStopWordOption() throws RecognitionException {
        XQueryParser.p_FTStopWordOption_return retval = new XQueryParser.p_FTStopWordOption_return();
        retval.start = input.LT(1);

        XQDTCommonTree root_0 = null;

        CommonToken k = null;
        List<CommonToken> list_k = null;
        XQueryParser.p_FTStopWords_return p_FTStopWords706 = null;

        XQueryParser.p_FTStopWordsInclExcl_return p_FTStopWordsInclExcl707 = null;

        XQueryParser.p_FTStopWordsInclExcl_return p_FTStopWordsInclExcl708 = null;

        XQDTCommonTree k_tree = null;

        try {
            // XQueryParser.g:1732:9: ( ( (k+= STOP k+= WORDS p_FTStopWords ( p_FTStopWordsInclExcl )* ) | (k+= STOP k+= WORDS k+= DEFAULT ( p_FTStopWordsInclExcl )* ) | (k+= NO k+= STOP k+= WORDS ) ) )
            // XQueryParser.g:1732:11: ( (k+= STOP k+= WORDS p_FTStopWords ( p_FTStopWordsInclExcl )* ) | (k+= STOP k+= WORDS k+= DEFAULT ( p_FTStopWordsInclExcl )* ) | (k+= NO k+= STOP k+= WORDS ) )
            {
                root_0 = (XQDTCommonTree)adaptor.nil();

                // XQueryParser.g:1732:11: ( (k+= STOP k+= WORDS p_FTStopWords ( p_FTStopWordsInclExcl )* ) | (k+= STOP k+= WORDS k+= DEFAULT ( p_FTStopWordsInclExcl )* ) | (k+= NO k+= STOP k+= WORDS ) )
                int alt228 = 3;
                int LA228_0 = input.LA(1);

                if ((LA228_0 == STOP)) {
                    int LA228_1 = input.LA(2);

                    if ((LA228_1 == WORDS)) {
                        int LA228_3 = input.LA(3);

                        if ((LA228_3 == DEFAULT)) {
                            alt228 = 2;
                        } else if ((LA228_3 == AT || LA228_3 == LPAREN)) {
                            alt228 = 1;
                        } else {
                            if (state.backtracking > 0) {
                                state.failed = true;
                                return retval;
                            }
                            NoViableAltException nvae = new NoViableAltException("", 228, 3, input);

                            throw nvae;
                        }
                    } else {
                        if (state.backtracking > 0) {
                            state.failed = true;
                            return retval;
                        }
                        NoViableAltException nvae = new NoViableAltException("", 228, 1, input);

                        throw nvae;
                    }
                } else if ((LA228_0 == NO)) {
                    alt228 = 3;
                } else {
                    if (state.backtracking > 0) {
                        state.failed = true;
                        return retval;
                    }
                    NoViableAltException nvae = new NoViableAltException("", 228, 0, input);

                    throw nvae;
                }
                switch (alt228) {
                case 1:
                    // XQueryParser.g:1732:13: (k+= STOP k+= WORDS p_FTStopWords ( p_FTStopWordsInclExcl )* )
                {
                    // XQueryParser.g:1732:13: (k+= STOP k+= WORDS p_FTStopWords ( p_FTStopWordsInclExcl )* )
                    // XQueryParser.g:1732:14: k+= STOP k+= WORDS p_FTStopWords ( p_FTStopWordsInclExcl )*
                    {
                        k = (CommonToken)match(input, STOP, FOLLOW_STOP_in_p_FTStopWordOption15381);
                        if (state.failed) {
                            return retval;
                        }
                        if (state.backtracking == 0) {
                            k_tree = (XQDTCommonTree)adaptor.create(k);
                            adaptor.addChild(root_0, k_tree);
                        }
                        if (list_k == null) {
                            list_k = new ArrayList<CommonToken>();
                        }
                        list_k.add(k);

                        k = (CommonToken)match(input, WORDS, FOLLOW_WORDS_in_p_FTStopWordOption15385);
                        if (state.failed) {
                            return retval;
                        }
                        if (state.backtracking == 0) {
                            k_tree = (XQDTCommonTree)adaptor.create(k);
                            adaptor.addChild(root_0, k_tree);
                        }
                        if (list_k == null) {
                            list_k = new ArrayList<CommonToken>();
                        }
                        list_k.add(k);

                        pushFollow(FOLLOW_p_FTStopWords_in_p_FTStopWordOption15387);
                        p_FTStopWords706 = p_FTStopWords();

                        state._fsp--;
                        if (state.failed) {
                            return retval;
                        }
                        if (state.backtracking == 0) {
                            adaptor.addChild(root_0, p_FTStopWords706.getTree());
                        }
                        // XQueryParser.g:1732:45: ( p_FTStopWordsInclExcl )*
                        loop226: do {
                            int alt226 = 2;
                            int LA226_0 = input.LA(1);

                            if ((LA226_0 == EXCEPT || LA226_0 == UNION)) {
                                alt226 = 1;
                            }

                            switch (alt226) {
                            case 1:
                                // XQueryParser.g:1732:45: p_FTStopWordsInclExcl
                            {
                                pushFollow(FOLLOW_p_FTStopWordsInclExcl_in_p_FTStopWordOption15389);
                                p_FTStopWordsInclExcl707 = p_FTStopWordsInclExcl();

                                state._fsp--;
                                if (state.failed) {
                                    return retval;
                                }
                                if (state.backtracking == 0) {
                                    adaptor.addChild(root_0, p_FTStopWordsInclExcl707.getTree());
                                }

                            }
                            break;

                            default:
                                break loop226;
                            }
                        } while (true);

                    }

                }
                    break;
                case 2:
                    // XQueryParser.g:1733:13: (k+= STOP k+= WORDS k+= DEFAULT ( p_FTStopWordsInclExcl )* )
                {
                    // XQueryParser.g:1733:13: (k+= STOP k+= WORDS k+= DEFAULT ( p_FTStopWordsInclExcl )* )
                    // XQueryParser.g:1733:14: k+= STOP k+= WORDS k+= DEFAULT ( p_FTStopWordsInclExcl )*
                    {
                        k = (CommonToken)match(input, STOP, FOLLOW_STOP_in_p_FTStopWordOption15408);
                        if (state.failed) {
                            return retval;
                        }
                        if (state.backtracking == 0) {
                            k_tree = (XQDTCommonTree)adaptor.create(k);
                            adaptor.addChild(root_0, k_tree);
                        }
                        if (list_k == null) {
                            list_k = new ArrayList<CommonToken>();
                        }
                        list_k.add(k);

                        k = (CommonToken)match(input, WORDS, FOLLOW_WORDS_in_p_FTStopWordOption15412);
                        if (state.failed) {
                            return retval;
                        }
                        if (state.backtracking == 0) {
                            k_tree = (XQDTCommonTree)adaptor.create(k);
                            adaptor.addChild(root_0, k_tree);
                        }
                        if (list_k == null) {
                            list_k = new ArrayList<CommonToken>();
                        }
                        list_k.add(k);

                        k = (CommonToken)match(input, DEFAULT, FOLLOW_DEFAULT_in_p_FTStopWordOption15416);
                        if (state.failed) {
                            return retval;
                        }
                        if (state.backtracking == 0) {
                            k_tree = (XQDTCommonTree)adaptor.create(k);
                            adaptor.addChild(root_0, k_tree);
                        }
                        if (list_k == null) {
                            list_k = new ArrayList<CommonToken>();
                        }
                        list_k.add(k);

                        // XQueryParser.g:1733:42: ( p_FTStopWordsInclExcl )*
                        loop227: do {
                            int alt227 = 2;
                            int LA227_0 = input.LA(1);

                            if ((LA227_0 == EXCEPT || LA227_0 == UNION)) {
                                alt227 = 1;
                            }

                            switch (alt227) {
                            case 1:
                                // XQueryParser.g:1733:42: p_FTStopWordsInclExcl
                            {
                                pushFollow(FOLLOW_p_FTStopWordsInclExcl_in_p_FTStopWordOption15418);
                                p_FTStopWordsInclExcl708 = p_FTStopWordsInclExcl();

                                state._fsp--;
                                if (state.failed) {
                                    return retval;
                                }
                                if (state.backtracking == 0) {
                                    adaptor.addChild(root_0, p_FTStopWordsInclExcl708.getTree());
                                }

                            }
                            break;

                            default:
                                break loop227;
                            }
                        } while (true);

                    }

                }
                    break;
                case 3:
                    // XQueryParser.g:1734:13: (k+= NO k+= STOP k+= WORDS )
                {
                    // XQueryParser.g:1734:13: (k+= NO k+= STOP k+= WORDS )
                    // XQueryParser.g:1734:14: k+= NO k+= STOP k+= WORDS
                    {
                        k = (CommonToken)match(input, NO, FOLLOW_NO_in_p_FTStopWordOption15437);
                        if (state.failed) {
                            return retval;
                        }
                        if (state.backtracking == 0) {
                            k_tree = (XQDTCommonTree)adaptor.create(k);
                            adaptor.addChild(root_0, k_tree);
                        }
                        if (list_k == null) {
                            list_k = new ArrayList<CommonToken>();
                        }
                        list_k.add(k);

                        k = (CommonToken)match(input, STOP, FOLLOW_STOP_in_p_FTStopWordOption15441);
                        if (state.failed) {
                            return retval;
                        }
                        if (state.backtracking == 0) {
                            k_tree = (XQDTCommonTree)adaptor.create(k);
                            adaptor.addChild(root_0, k_tree);
                        }
                        if (list_k == null) {
                            list_k = new ArrayList<CommonToken>();
                        }
                        list_k.add(k);

                        k = (CommonToken)match(input, WORDS, FOLLOW_WORDS_in_p_FTStopWordOption15445);
                        if (state.failed) {
                            return retval;
                        }
                        if (state.backtracking == 0) {
                            k_tree = (XQDTCommonTree)adaptor.create(k);
                            adaptor.addChild(root_0, k_tree);
                        }
                        if (list_k == null) {
                            list_k = new ArrayList<CommonToken>();
                        }
                        list_k.add(k);

                    }

                }
                    break;

                }

                if (state.backtracking == 0) {
                    ak(list_k);
                }

            }

            retval.stop = input.LT(-1);

            if (state.backtracking == 0) {

                retval.tree = (XQDTCommonTree)adaptor.rulePostProcessing(root_0);
                adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        } catch (RecognitionException re) {
            reportError(re);
            recover(input, re);
            retval.tree = (XQDTCommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        } finally {
        }
        return retval;
    }

    // $ANTLR end "p_FTStopWordOption"

    public static class p_FTStopWords_return extends ParserRuleReturnScope {
        XQDTCommonTree tree;

        public Object getTree() {
            return tree;
        }
    };

    // $ANTLR start "p_FTStopWords"
    // XQueryParser.g:1738:1: p_FTStopWords : ( (ka= AT p_StringLiteral ) | ( LPAREN p_StringLiteral ( COMMA p_StringLiteral )* RPAREN ) );
    public final XQueryParser.p_FTStopWords_return p_FTStopWords() throws RecognitionException {
        XQueryParser.p_FTStopWords_return retval = new XQueryParser.p_FTStopWords_return();
        retval.start = input.LT(1);

        XQDTCommonTree root_0 = null;

        CommonToken ka = null;
        CommonToken LPAREN710 = null;
        CommonToken COMMA712 = null;
        CommonToken RPAREN714 = null;
        XQueryParser.p_StringLiteral_return p_StringLiteral709 = null;

        XQueryParser.p_StringLiteral_return p_StringLiteral711 = null;

        XQueryParser.p_StringLiteral_return p_StringLiteral713 = null;

        XQDTCommonTree ka_tree = null;
        XQDTCommonTree LPAREN710_tree = null;
        XQDTCommonTree COMMA712_tree = null;
        XQDTCommonTree RPAREN714_tree = null;

        try {
            // XQueryParser.g:1739:9: ( (ka= AT p_StringLiteral ) | ( LPAREN p_StringLiteral ( COMMA p_StringLiteral )* RPAREN ) )
            int alt230 = 2;
            int LA230_0 = input.LA(1);

            if ((LA230_0 == AT)) {
                alt230 = 1;
            } else if ((LA230_0 == LPAREN)) {
                alt230 = 2;
            } else {
                if (state.backtracking > 0) {
                    state.failed = true;
                    return retval;
                }
                NoViableAltException nvae = new NoViableAltException("", 230, 0, input);

                throw nvae;
            }
            switch (alt230) {
            case 1:
                // XQueryParser.g:1739:11: (ka= AT p_StringLiteral )
            {
                root_0 = (XQDTCommonTree)adaptor.nil();

                // XQueryParser.g:1739:11: (ka= AT p_StringLiteral )
                // XQueryParser.g:1739:12: ka= AT p_StringLiteral
                {
                    ka = (CommonToken)match(input, AT, FOLLOW_AT_in_p_FTStopWords15479);
                    if (state.failed) {
                        return retval;
                    }
                    if (state.backtracking == 0) {
                        ka_tree = (XQDTCommonTree)adaptor.create(ka);
                        adaptor.addChild(root_0, ka_tree);
                    }
                    if (state.backtracking == 0) {
                        ak(ka);
                    }
                    pushFollow(FOLLOW_p_StringLiteral_in_p_FTStopWords15483);
                    p_StringLiteral709 = p_StringLiteral();

                    state._fsp--;
                    if (state.failed) {
                        return retval;
                    }
                    if (state.backtracking == 0) {
                        adaptor.addChild(root_0, p_StringLiteral709.getTree());
                    }

                }

            }
            break;
            case 2:
                // XQueryParser.g:1740:11: ( LPAREN p_StringLiteral ( COMMA p_StringLiteral )* RPAREN )
            {
                root_0 = (XQDTCommonTree)adaptor.nil();

                // XQueryParser.g:1740:11: ( LPAREN p_StringLiteral ( COMMA p_StringLiteral )* RPAREN )
                // XQueryParser.g:1740:12: LPAREN p_StringLiteral ( COMMA p_StringLiteral )* RPAREN
                {
                    LPAREN710 = (CommonToken)match(input, LPAREN, FOLLOW_LPAREN_in_p_FTStopWords15497);
                    if (state.failed) {
                        return retval;
                    }
                    if (state.backtracking == 0) {
                        LPAREN710_tree = (XQDTCommonTree)adaptor.create(LPAREN710);
                        adaptor.addChild(root_0, LPAREN710_tree);
                    }
                    pushFollow(FOLLOW_p_StringLiteral_in_p_FTStopWords15499);
                    p_StringLiteral711 = p_StringLiteral();

                    state._fsp--;
                    if (state.failed) {
                        return retval;
                    }
                    if (state.backtracking == 0) {
                        adaptor.addChild(root_0, p_StringLiteral711.getTree());
                    }
                    // XQueryParser.g:1740:35: ( COMMA p_StringLiteral )*
                    loop229: do {
                        int alt229 = 2;
                        int LA229_0 = input.LA(1);

                        if ((LA229_0 == COMMA)) {
                            alt229 = 1;
                        }

                        switch (alt229) {
                        case 1:
                            // XQueryParser.g:1740:36: COMMA p_StringLiteral
                        {
                            COMMA712 = (CommonToken)match(input, COMMA, FOLLOW_COMMA_in_p_FTStopWords15502);
                            if (state.failed) {
                                return retval;
                            }
                            if (state.backtracking == 0) {
                                COMMA712_tree = (XQDTCommonTree)adaptor.create(COMMA712);
                                adaptor.addChild(root_0, COMMA712_tree);
                            }
                            pushFollow(FOLLOW_p_StringLiteral_in_p_FTStopWords15504);
                            p_StringLiteral713 = p_StringLiteral();

                            state._fsp--;
                            if (state.failed) {
                                return retval;
                            }
                            if (state.backtracking == 0) {
                                adaptor.addChild(root_0, p_StringLiteral713.getTree());
                            }

                        }
                        break;

                        default:
                            break loop229;
                        }
                    } while (true);

                    RPAREN714 = (CommonToken)match(input, RPAREN, FOLLOW_RPAREN_in_p_FTStopWords15508);
                    if (state.failed) {
                        return retval;
                    }
                    if (state.backtracking == 0) {
                        RPAREN714_tree = (XQDTCommonTree)adaptor.create(RPAREN714);
                        adaptor.addChild(root_0, RPAREN714_tree);
                    }

                }

            }
            break;

            }
            retval.stop = input.LT(-1);

            if (state.backtracking == 0) {

                retval.tree = (XQDTCommonTree)adaptor.rulePostProcessing(root_0);
                adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        } catch (RecognitionException re) {
            reportError(re);
            recover(input, re);
            retval.tree = (XQDTCommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        } finally {
        }
        return retval;
    }

    // $ANTLR end "p_FTStopWords"

    public static class p_FTStopWordsInclExcl_return extends ParserRuleReturnScope {
        XQDTCommonTree tree;

        public Object getTree() {
            return tree;
        }
    };

    // $ANTLR start "p_FTStopWordsInclExcl"
    // XQueryParser.g:1744:1: p_FTStopWordsInclExcl : ( (k+= UNION | k+= EXCEPT ) p_FTStopWords ) ;
    public final XQueryParser.p_FTStopWordsInclExcl_return p_FTStopWordsInclExcl() throws RecognitionException {
        XQueryParser.p_FTStopWordsInclExcl_return retval = new XQueryParser.p_FTStopWordsInclExcl_return();
        retval.start = input.LT(1);

        XQDTCommonTree root_0 = null;

        CommonToken k = null;
        List<CommonToken> list_k = null;
        XQueryParser.p_FTStopWords_return p_FTStopWords715 = null;

        XQDTCommonTree k_tree = null;

        try {
            // XQueryParser.g:1745:9: ( ( (k+= UNION | k+= EXCEPT ) p_FTStopWords ) )
            // XQueryParser.g:1745:11: ( (k+= UNION | k+= EXCEPT ) p_FTStopWords )
            {
                root_0 = (XQDTCommonTree)adaptor.nil();

                // XQueryParser.g:1745:11: ( (k+= UNION | k+= EXCEPT ) p_FTStopWords )
                // XQueryParser.g:1745:13: (k+= UNION | k+= EXCEPT ) p_FTStopWords
                {
                    // XQueryParser.g:1745:13: (k+= UNION | k+= EXCEPT )
                    int alt231 = 2;
                    int LA231_0 = input.LA(1);

                    if ((LA231_0 == UNION)) {
                        alt231 = 1;
                    } else if ((LA231_0 == EXCEPT)) {
                        alt231 = 2;
                    } else {
                        if (state.backtracking > 0) {
                            state.failed = true;
                            return retval;
                        }
                        NoViableAltException nvae = new NoViableAltException("", 231, 0, input);

                        throw nvae;
                    }
                    switch (alt231) {
                    case 1:
                    // XQueryParser.g:1745:14: k+= UNION
                    {
                        k = (CommonToken)match(input, UNION, FOLLOW_UNION_in_p_FTStopWordsInclExcl15540);
                        if (state.failed) {
                            return retval;
                        }
                        if (state.backtracking == 0) {
                            k_tree = (XQDTCommonTree)adaptor.create(k);
                            adaptor.addChild(root_0, k_tree);
                        }
                        if (list_k == null) {
                            list_k = new ArrayList<CommonToken>();
                        }
                        list_k.add(k);

                    }
                    break;
                    case 2:
                    // XQueryParser.g:1745:25: k+= EXCEPT
                    {
                        k = (CommonToken)match(input, EXCEPT, FOLLOW_EXCEPT_in_p_FTStopWordsInclExcl15546);
                        if (state.failed) {
                            return retval;
                        }
                        if (state.backtracking == 0) {
                            k_tree = (XQDTCommonTree)adaptor.create(k);
                            adaptor.addChild(root_0, k_tree);
                        }
                        if (list_k == null) {
                            list_k = new ArrayList<CommonToken>();
                        }
                        list_k.add(k);

                    }
                    break;

                    }

                    pushFollow(FOLLOW_p_FTStopWords_in_p_FTStopWordsInclExcl15549);
                    p_FTStopWords715 = p_FTStopWords();

                    state._fsp--;
                    if (state.failed) {
                        return retval;
                    }
                    if (state.backtracking == 0) {
                        adaptor.addChild(root_0, p_FTStopWords715.getTree());
                    }

                }

                if (state.backtracking == 0) {
                    ak(list_k);
                }

            }

            retval.stop = input.LT(-1);

            if (state.backtracking == 0) {

                retval.tree = (XQDTCommonTree)adaptor.rulePostProcessing(root_0);
                adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        } catch (RecognitionException re) {
            reportError(re);
            recover(input, re);
            retval.tree = (XQDTCommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        } finally {
        }
        return retval;
    }

    // $ANTLR end "p_FTStopWordsInclExcl"

    public static class p_FTLanguageOption_return extends ParserRuleReturnScope {
        XQDTCommonTree tree;

        public Object getTree() {
            return tree;
        }
    };

    // $ANTLR start "p_FTLanguageOption"
    // XQueryParser.g:1749:1: p_FTLanguageOption : kl= LANGUAGE p_StringLiteral ;
    public final XQueryParser.p_FTLanguageOption_return p_FTLanguageOption() throws RecognitionException {
        XQueryParser.p_FTLanguageOption_return retval = new XQueryParser.p_FTLanguageOption_return();
        retval.start = input.LT(1);

        XQDTCommonTree root_0 = null;

        CommonToken kl = null;
        XQueryParser.p_StringLiteral_return p_StringLiteral716 = null;

        XQDTCommonTree kl_tree = null;

        try {
            // XQueryParser.g:1750:9: (kl= LANGUAGE p_StringLiteral )
            // XQueryParser.g:1750:11: kl= LANGUAGE p_StringLiteral
            {
                root_0 = (XQDTCommonTree)adaptor.nil();

                kl = (CommonToken)match(input, LANGUAGE, FOLLOW_LANGUAGE_in_p_FTLanguageOption15581);
                if (state.failed) {
                    return retval;
                }
                if (state.backtracking == 0) {
                    kl_tree = (XQDTCommonTree)adaptor.create(kl);
                    adaptor.addChild(root_0, kl_tree);
                }
                if (state.backtracking == 0) {
                    ak(kl);
                }
                pushFollow(FOLLOW_p_StringLiteral_in_p_FTLanguageOption15585);
                p_StringLiteral716 = p_StringLiteral();

                state._fsp--;
                if (state.failed) {
                    return retval;
                }
                if (state.backtracking == 0) {
                    adaptor.addChild(root_0, p_StringLiteral716.getTree());
                }

            }

            retval.stop = input.LT(-1);

            if (state.backtracking == 0) {

                retval.tree = (XQDTCommonTree)adaptor.rulePostProcessing(root_0);
                adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        } catch (RecognitionException re) {
            reportError(re);
            recover(input, re);
            retval.tree = (XQDTCommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        } finally {
        }
        return retval;
    }

    // $ANTLR end "p_FTLanguageOption"

    public static class p_FTWildCardOption_return extends ParserRuleReturnScope {
        XQDTCommonTree tree;

        public Object getTree() {
            return tree;
        }
    };

    // $ANTLR start "p_FTWildCardOption"
    // XQueryParser.g:1754:1: p_FTWildCardOption : (k+= WILDCARDS | (k+= NO k+= WILDCARDS ) ) ;
    public final XQueryParser.p_FTWildCardOption_return p_FTWildCardOption() throws RecognitionException {
        XQueryParser.p_FTWildCardOption_return retval = new XQueryParser.p_FTWildCardOption_return();
        retval.start = input.LT(1);

        XQDTCommonTree root_0 = null;

        CommonToken k = null;
        List<CommonToken> list_k = null;

        XQDTCommonTree k_tree = null;

        try {
            // XQueryParser.g:1755:9: ( (k+= WILDCARDS | (k+= NO k+= WILDCARDS ) ) )
            // XQueryParser.g:1755:11: (k+= WILDCARDS | (k+= NO k+= WILDCARDS ) )
            {
                root_0 = (XQDTCommonTree)adaptor.nil();

                // XQueryParser.g:1755:11: (k+= WILDCARDS | (k+= NO k+= WILDCARDS ) )
                int alt232 = 2;
                int LA232_0 = input.LA(1);

                if ((LA232_0 == WILDCARDS)) {
                    alt232 = 1;
                } else if ((LA232_0 == NO)) {
                    alt232 = 2;
                } else {
                    if (state.backtracking > 0) {
                        state.failed = true;
                        return retval;
                    }
                    NoViableAltException nvae = new NoViableAltException("", 232, 0, input);

                    throw nvae;
                }
                switch (alt232) {
                case 1:
                    // XQueryParser.g:1755:13: k+= WILDCARDS
                {
                    k = (CommonToken)match(input, WILDCARDS, FOLLOW_WILDCARDS_in_p_FTWildCardOption15615);
                    if (state.failed) {
                        return retval;
                    }
                    if (state.backtracking == 0) {
                        k_tree = (XQDTCommonTree)adaptor.create(k);
                        adaptor.addChild(root_0, k_tree);
                    }
                    if (list_k == null) {
                        list_k = new ArrayList<CommonToken>();
                    }
                    list_k.add(k);

                }
                    break;
                case 2:
                    // XQueryParser.g:1755:28: (k+= NO k+= WILDCARDS )
                {
                    // XQueryParser.g:1755:28: (k+= NO k+= WILDCARDS )
                    // XQueryParser.g:1755:29: k+= NO k+= WILDCARDS
                    {
                        k = (CommonToken)match(input, NO, FOLLOW_NO_in_p_FTWildCardOption15622);
                        if (state.failed) {
                            return retval;
                        }
                        if (state.backtracking == 0) {
                            k_tree = (XQDTCommonTree)adaptor.create(k);
                            adaptor.addChild(root_0, k_tree);
                        }
                        if (list_k == null) {
                            list_k = new ArrayList<CommonToken>();
                        }
                        list_k.add(k);

                        k = (CommonToken)match(input, WILDCARDS, FOLLOW_WILDCARDS_in_p_FTWildCardOption15626);
                        if (state.failed) {
                            return retval;
                        }
                        if (state.backtracking == 0) {
                            k_tree = (XQDTCommonTree)adaptor.create(k);
                            adaptor.addChild(root_0, k_tree);
                        }
                        if (list_k == null) {
                            list_k = new ArrayList<CommonToken>();
                        }
                        list_k.add(k);

                    }

                }
                    break;

                }

                if (state.backtracking == 0) {
                    ak(list_k);
                }

            }

            retval.stop = input.LT(-1);

            if (state.backtracking == 0) {

                retval.tree = (XQDTCommonTree)adaptor.rulePostProcessing(root_0);
                adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        } catch (RecognitionException re) {
            reportError(re);
            recover(input, re);
            retval.tree = (XQDTCommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        } finally {
        }
        return retval;
    }

    // $ANTLR end "p_FTWildCardOption"

    public static class p_FTExtensionOption_return extends ParserRuleReturnScope {
        XQDTCommonTree tree;

        public Object getTree() {
            return tree;
        }
    };

    // $ANTLR start "p_FTExtensionOption"
    // XQueryParser.g:1759:1: p_FTExtensionOption : ko= OPTION p_QName p_StringLiteral ;
    public final XQueryParser.p_FTExtensionOption_return p_FTExtensionOption() throws RecognitionException {
        XQueryParser.p_FTExtensionOption_return retval = new XQueryParser.p_FTExtensionOption_return();
        retval.start = input.LT(1);

        XQDTCommonTree root_0 = null;

        CommonToken ko = null;
        XQueryParser.p_QName_return p_QName717 = null;

        XQueryParser.p_StringLiteral_return p_StringLiteral718 = null;

        XQDTCommonTree ko_tree = null;

        try {
            // XQueryParser.g:1760:9: (ko= OPTION p_QName p_StringLiteral )
            // XQueryParser.g:1760:11: ko= OPTION p_QName p_StringLiteral
            {
                root_0 = (XQDTCommonTree)adaptor.nil();

                ko = (CommonToken)match(input, OPTION, FOLLOW_OPTION_in_p_FTExtensionOption15659);
                if (state.failed) {
                    return retval;
                }
                if (state.backtracking == 0) {
                    ko_tree = (XQDTCommonTree)adaptor.create(ko);
                    adaptor.addChild(root_0, ko_tree);
                }
                if (state.backtracking == 0) {
                    ak(ko);
                }
                pushFollow(FOLLOW_p_QName_in_p_FTExtensionOption15663);
                p_QName717 = p_QName();

                state._fsp--;
                if (state.failed) {
                    return retval;
                }
                if (state.backtracking == 0) {
                    adaptor.addChild(root_0, p_QName717.getTree());
                }
                pushFollow(FOLLOW_p_StringLiteral_in_p_FTExtensionOption15665);
                p_StringLiteral718 = p_StringLiteral();

                state._fsp--;
                if (state.failed) {
                    return retval;
                }
                if (state.backtracking == 0) {
                    adaptor.addChild(root_0, p_StringLiteral718.getTree());
                }

            }

            retval.stop = input.LT(-1);

            if (state.backtracking == 0) {

                retval.tree = (XQDTCommonTree)adaptor.rulePostProcessing(root_0);
                adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        } catch (RecognitionException re) {
            reportError(re);
            recover(input, re);
            retval.tree = (XQDTCommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        } finally {
        }
        return retval;
    }

    // $ANTLR end "p_FTExtensionOption"

    public static class p_FTIgnoreOption_return extends ParserRuleReturnScope {
        XQDTCommonTree tree;

        public Object getTree() {
            return tree;
        }
    };

    // $ANTLR start "p_FTIgnoreOption"
    // XQueryParser.g:1764:1: p_FTIgnoreOption : k+= WITHOUT k+= CONTENT p_UnionExpr ;
    public final XQueryParser.p_FTIgnoreOption_return p_FTIgnoreOption() throws RecognitionException {
        XQueryParser.p_FTIgnoreOption_return retval = new XQueryParser.p_FTIgnoreOption_return();
        retval.start = input.LT(1);

        XQDTCommonTree root_0 = null;

        CommonToken k = null;
        List<CommonToken> list_k = null;
        XQueryParser.p_UnionExpr_return p_UnionExpr719 = null;

        XQDTCommonTree k_tree = null;

        try {
            // XQueryParser.g:1765:9: (k+= WITHOUT k+= CONTENT p_UnionExpr )
            // XQueryParser.g:1765:11: k+= WITHOUT k+= CONTENT p_UnionExpr
            {
                root_0 = (XQDTCommonTree)adaptor.nil();

                k = (CommonToken)match(input, WITHOUT, FOLLOW_WITHOUT_in_p_FTIgnoreOption15693);
                if (state.failed) {
                    return retval;
                }
                if (state.backtracking == 0) {
                    k_tree = (XQDTCommonTree)adaptor.create(k);
                    adaptor.addChild(root_0, k_tree);
                }
                if (list_k == null) {
                    list_k = new ArrayList<CommonToken>();
                }
                list_k.add(k);

                k = (CommonToken)match(input, CONTENT, FOLLOW_CONTENT_in_p_FTIgnoreOption15697);
                if (state.failed) {
                    return retval;
                }
                if (state.backtracking == 0) {
                    k_tree = (XQDTCommonTree)adaptor.create(k);
                    adaptor.addChild(root_0, k_tree);
                }
                if (list_k == null) {
                    list_k = new ArrayList<CommonToken>();
                }
                list_k.add(k);

                if (state.backtracking == 0) {
                    ak(list_k);
                }
                pushFollow(FOLLOW_p_UnionExpr_in_p_FTIgnoreOption15701);
                p_UnionExpr719 = p_UnionExpr();

                state._fsp--;
                if (state.failed) {
                    return retval;
                }
                if (state.backtracking == 0) {
                    adaptor.addChild(root_0, p_UnionExpr719.getTree());
                }

            }

            retval.stop = input.LT(-1);

            if (state.backtracking == 0) {

                retval.tree = (XQDTCommonTree)adaptor.rulePostProcessing(root_0);
                adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        } catch (RecognitionException re) {
            reportError(re);
            recover(input, re);
            retval.tree = (XQDTCommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        } finally {
        }
        return retval;
    }

    // $ANTLR end "p_FTIgnoreOption"

    public static class p_Program_return extends ParserRuleReturnScope {
        XQDTCommonTree tree;

        public Object getTree() {
            return tree;
        }
    };

    // $ANTLR start "p_Program"
    // XQueryParser.g:1775:1: p_Program : p_StatementsAndOptionalExpr ;
    public final XQueryParser.p_Program_return p_Program() throws RecognitionException {
        XQueryParser.p_Program_return retval = new XQueryParser.p_Program_return();
        retval.start = input.LT(1);

        XQDTCommonTree root_0 = null;

        XQueryParser.p_StatementsAndOptionalExpr_return p_StatementsAndOptionalExpr720 = null;

        try {
            // XQueryParser.g:1776:9: ( p_StatementsAndOptionalExpr )
            // XQueryParser.g:1776:11: p_StatementsAndOptionalExpr
            {
                root_0 = (XQDTCommonTree)adaptor.nil();

                pushFollow(FOLLOW_p_StatementsAndOptionalExpr_in_p_Program15733);
                p_StatementsAndOptionalExpr720 = p_StatementsAndOptionalExpr();

                state._fsp--;
                if (state.failed) {
                    return retval;
                }
                if (state.backtracking == 0) {
                    adaptor.addChild(root_0, p_StatementsAndOptionalExpr720.getTree());
                }

            }

            retval.stop = input.LT(-1);

            if (state.backtracking == 0) {

                retval.tree = (XQDTCommonTree)adaptor.rulePostProcessing(root_0);
                adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        } catch (RecognitionException re) {
            reportError(re);
            recover(input, re);
            retval.tree = (XQDTCommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        } finally {
        }
        return retval;
    }

    // $ANTLR end "p_Program"

    public static class p_Statements_return extends ParserRuleReturnScope {
        XQDTCommonTree tree;

        public Object getTree() {
            return tree;
        }
    };

    // $ANTLR start "p_Statements"
    // XQueryParser.g:1780:1: p_Statements[boolean strict] : ( p_Hybrid[$strict,true] )* ;
    public final XQueryParser.p_Statements_return p_Statements(boolean strict) throws RecognitionException {
        XQueryParser.p_Statements_return retval = new XQueryParser.p_Statements_return();
        retval.start = input.LT(1);

        XQDTCommonTree root_0 = null;

        XQueryParser.p_Hybrid_return p_Hybrid721 = null;

        try {
            // XQueryParser.g:1781:9: ( ( p_Hybrid[$strict,true] )* )
            // XQueryParser.g:1781:11: ( p_Hybrid[$strict,true] )*
            {
                root_0 = (XQDTCommonTree)adaptor.nil();

                // XQueryParser.g:1781:11: ( p_Hybrid[$strict,true] )*
                loop233: do {
                    int alt233 = 2;
                    int LA233_0 = input.LA(1);

                    if (((LA233_0 >= ANCESTOR && LA233_0 <= QUOT_ER) || LA233_0 == LPAREN
                            || (LA233_0 >= DOLLAR && LA233_0 <= LBRACKET) || LA233_0 == ANN_PERCENT
                            || (LA233_0 >= STAR && LA233_0 <= SMALLER) || (LA233_0 >= SLASH && LA233_0 <= DOT_DOT)
                            || LA233_0 == ATTR_SIGN || (LA233_0 >= APOS && LA233_0 <= QUOT) || LA233_0 == L_NCName
                            || (LA233_0 >= L_Pragma && LA233_0 <= L_DoubleLiteral) || LA233_0 == EXPLICITLY)) {
                        alt233 = 1;
                    }

                    switch (alt233) {
                    case 1:
                        // XQueryParser.g:1781:11: p_Hybrid[$strict,true]
                    {
                        pushFollow(FOLLOW_p_Hybrid_in_p_Statements15760);
                        p_Hybrid721 = p_Hybrid(strict, true);

                        state._fsp--;
                        if (state.failed) {
                            return retval;
                        }
                        if (state.backtracking == 0) {
                            adaptor.addChild(root_0, p_Hybrid721.getTree());
                        }

                    }
                    break;

                    default:
                        break loop233;
                    }
                } while (true);

            }

            retval.stop = input.LT(-1);

            if (state.backtracking == 0) {

                retval.tree = (XQDTCommonTree)adaptor.rulePostProcessing(root_0);
                adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        } catch (RecognitionException re) {
            reportError(re);
            recover(input, re);
            retval.tree = (XQDTCommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        } finally {
        }
        return retval;
    }

    // $ANTLR end "p_Statements"

    public static class p_StatementsAndExpr_return extends ParserRuleReturnScope {
        XQDTCommonTree tree;

        public Object getTree() {
            return tree;
        }
    };

    // $ANTLR start "p_StatementsAndExpr"
    // XQueryParser.g:1785:1: p_StatementsAndExpr : p_Statements[false] ;
    public final XQueryParser.p_StatementsAndExpr_return p_StatementsAndExpr() throws RecognitionException {
        XQueryParser.p_StatementsAndExpr_return retval = new XQueryParser.p_StatementsAndExpr_return();
        retval.start = input.LT(1);

        XQDTCommonTree root_0 = null;

        XQueryParser.p_Statements_return p_Statements722 = null;

        try {
            // XQueryParser.g:1786:9: ( p_Statements[false] )
            // XQueryParser.g:1786:11: p_Statements[false]
            {
                root_0 = (XQDTCommonTree)adaptor.nil();

                pushFollow(FOLLOW_p_Statements_in_p_StatementsAndExpr15788);
                p_Statements722 = p_Statements(false);

                state._fsp--;
                if (state.failed) {
                    return retval;
                }
                if (state.backtracking == 0) {
                    adaptor.addChild(root_0, p_Statements722.getTree());
                }

            }

            retval.stop = input.LT(-1);

            if (state.backtracking == 0) {

                retval.tree = (XQDTCommonTree)adaptor.rulePostProcessing(root_0);
                adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        } catch (RecognitionException re) {
            reportError(re);
            recover(input, re);
            retval.tree = (XQDTCommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        } finally {
        }
        return retval;
    }

    // $ANTLR end "p_StatementsAndExpr"

    public static class p_StatementsAndOptionalExpr_return extends ParserRuleReturnScope {
        XQDTCommonTree tree;

        public Object getTree() {
            return tree;
        }
    };

    // $ANTLR start "p_StatementsAndOptionalExpr"
    // XQueryParser.g:1790:1: p_StatementsAndOptionalExpr : p_Statements[false] ;
    public final XQueryParser.p_StatementsAndOptionalExpr_return p_StatementsAndOptionalExpr()
            throws RecognitionException {
        XQueryParser.p_StatementsAndOptionalExpr_return retval = new XQueryParser.p_StatementsAndOptionalExpr_return();
        retval.start = input.LT(1);

        XQDTCommonTree root_0 = null;

        XQueryParser.p_Statements_return p_Statements723 = null;

        try {
            // XQueryParser.g:1791:9: ( p_Statements[false] )
            // XQueryParser.g:1791:11: p_Statements[false]
            {
                root_0 = (XQDTCommonTree)adaptor.nil();

                pushFollow(FOLLOW_p_Statements_in_p_StatementsAndOptionalExpr15815);
                p_Statements723 = p_Statements(false);

                state._fsp--;
                if (state.failed) {
                    return retval;
                }
                if (state.backtracking == 0) {
                    adaptor.addChild(root_0, p_Statements723.getTree());
                }

            }

            retval.stop = input.LT(-1);

            if (state.backtracking == 0) {

                retval.tree = (XQDTCommonTree)adaptor.rulePostProcessing(root_0);
                adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        } catch (RecognitionException re) {
            reportError(re);
            recover(input, re);
            retval.tree = (XQDTCommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        } finally {
        }
        return retval;
    }

    // $ANTLR end "p_StatementsAndOptionalExpr"

    public static class p_Hybrid_return extends ParserRuleReturnScope {
        XQDTCommonTree tree;

        public Object getTree() {
            return tree;
        }
    };

    // $ANTLR start "p_Hybrid"
    // XQueryParser.g:1794:1: p_Hybrid[boolean strict, boolean allowConcat] : ( p_HybridExprSingle[$strict,$allowConcat] | p_Statement );
    public final XQueryParser.p_Hybrid_return p_Hybrid(boolean strict, boolean allowConcat) throws RecognitionException {
        XQueryParser.p_Hybrid_return retval = new XQueryParser.p_Hybrid_return();
        retval.start = input.LT(1);

        XQDTCommonTree root_0 = null;

        XQueryParser.p_HybridExprSingle_return p_HybridExprSingle724 = null;

        XQueryParser.p_Statement_return p_Statement725 = null;

        try {
            // XQueryParser.g:1795:9: ( p_HybridExprSingle[$strict,$allowConcat] | p_Statement )
            int alt234 = 2;
            alt234 = dfa234.predict(input);
            switch (alt234) {
            case 1:
                // XQueryParser.g:1795:11: p_HybridExprSingle[$strict,$allowConcat]
            {
                root_0 = (XQDTCommonTree)adaptor.nil();

                pushFollow(FOLLOW_p_HybridExprSingle_in_p_Hybrid15842);
                p_HybridExprSingle724 = p_HybridExprSingle(strict, allowConcat);

                state._fsp--;
                if (state.failed) {
                    return retval;
                }
                if (state.backtracking == 0) {
                    adaptor.addChild(root_0, p_HybridExprSingle724.getTree());
                }

            }
            break;
            case 2:
                // XQueryParser.g:1796:11: p_Statement
            {
                root_0 = (XQDTCommonTree)adaptor.nil();

                pushFollow(FOLLOW_p_Statement_in_p_Hybrid15855);
                p_Statement725 = p_Statement();

                state._fsp--;
                if (state.failed) {
                    return retval;
                }
                if (state.backtracking == 0) {
                    adaptor.addChild(root_0, p_Statement725.getTree());
                }

            }
            break;

            }
            retval.stop = input.LT(-1);

            if (state.backtracking == 0) {

                retval.tree = (XQDTCommonTree)adaptor.rulePostProcessing(root_0);
                adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        } catch (RecognitionException re) {

            XQueryParser.p_StepExpr_return var = p_StepExpr();
            root_0 = (XQDTCommonTree)adaptor.nil();
            adaptor.addChild(root_0, var.getTree());
            retval.stop = input.LT(-1);
            retval.tree = (XQDTCommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        } finally {
        }
        return retval;
    }

    // $ANTLR end "p_Hybrid"

    public static class p_Statement_return extends ParserRuleReturnScope {
        XQDTCommonTree tree;

        public Object getTree() {
            return tree;
        }
    };

    // $ANTLR start "p_Statement"
    // XQueryParser.g:1807:1: p_Statement : ( p_AssignStatement | p_BreakStatement | p_ContinueStatement | p_ExitStatement | p_VarDeclStatement | p_WhileStatement );
    public final XQueryParser.p_Statement_return p_Statement() throws RecognitionException {
        XQueryParser.p_Statement_return retval = new XQueryParser.p_Statement_return();
        retval.start = input.LT(1);

        XQDTCommonTree root_0 = null;

        XQueryParser.p_AssignStatement_return p_AssignStatement726 = null;

        XQueryParser.p_BreakStatement_return p_BreakStatement727 = null;

        XQueryParser.p_ContinueStatement_return p_ContinueStatement728 = null;

        XQueryParser.p_ExitStatement_return p_ExitStatement729 = null;

        XQueryParser.p_VarDeclStatement_return p_VarDeclStatement730 = null;

        XQueryParser.p_WhileStatement_return p_WhileStatement731 = null;

        try {
            // XQueryParser.g:1808:9: ( p_AssignStatement | p_BreakStatement | p_ContinueStatement | p_ExitStatement | p_VarDeclStatement | p_WhileStatement )
            int alt235 = 6;
            switch (input.LA(1)) {
            case DOLLAR: {
                alt235 = 1;
            }
                break;
            case BREAK: {
                alt235 = 2;
            }
                break;
            case CONTINUE: {
                alt235 = 3;
            }
                break;
            case EXIT: {
                alt235 = 4;
            }
                break;
            case VARIABLE:
            case ANN_PERCENT: {
                alt235 = 5;
            }
                break;
            case WHILE: {
                alt235 = 6;
            }
                break;
            default:
                if (state.backtracking > 0) {
                    state.failed = true;
                    return retval;
                }
                NoViableAltException nvae = new NoViableAltException("", 235, 0, input);

                throw nvae;
            }

            switch (alt235) {
            case 1:
                // XQueryParser.g:1808:11: p_AssignStatement
            {
                root_0 = (XQDTCommonTree)adaptor.nil();

                pushFollow(FOLLOW_p_AssignStatement_in_p_Statement15886);
                p_AssignStatement726 = p_AssignStatement();

                state._fsp--;
                if (state.failed) {
                    return retval;
                }
                if (state.backtracking == 0) {
                    adaptor.addChild(root_0, p_AssignStatement726.getTree());
                }

            }
            break;
            case 2:
                // XQueryParser.g:1809:11: p_BreakStatement
            {
                root_0 = (XQDTCommonTree)adaptor.nil();

                pushFollow(FOLLOW_p_BreakStatement_in_p_Statement15898);
                p_BreakStatement727 = p_BreakStatement();

                state._fsp--;
                if (state.failed) {
                    return retval;
                }
                if (state.backtracking == 0) {
                    adaptor.addChild(root_0, p_BreakStatement727.getTree());
                }

            }
            break;
            case 3:
                // XQueryParser.g:1810:11: p_ContinueStatement
            {
                root_0 = (XQDTCommonTree)adaptor.nil();

                pushFollow(FOLLOW_p_ContinueStatement_in_p_Statement15910);
                p_ContinueStatement728 = p_ContinueStatement();

                state._fsp--;
                if (state.failed) {
                    return retval;
                }
                if (state.backtracking == 0) {
                    adaptor.addChild(root_0, p_ContinueStatement728.getTree());
                }

            }
            break;
            case 4:
                // XQueryParser.g:1811:11: p_ExitStatement
            {
                root_0 = (XQDTCommonTree)adaptor.nil();

                pushFollow(FOLLOW_p_ExitStatement_in_p_Statement15922);
                p_ExitStatement729 = p_ExitStatement();

                state._fsp--;
                if (state.failed) {
                    return retval;
                }
                if (state.backtracking == 0) {
                    adaptor.addChild(root_0, p_ExitStatement729.getTree());
                }

            }
            break;
            case 5:
                // XQueryParser.g:1812:11: p_VarDeclStatement
            {
                root_0 = (XQDTCommonTree)adaptor.nil();

                pushFollow(FOLLOW_p_VarDeclStatement_in_p_Statement15934);
                p_VarDeclStatement730 = p_VarDeclStatement();

                state._fsp--;
                if (state.failed) {
                    return retval;
                }
                if (state.backtracking == 0) {
                    adaptor.addChild(root_0, p_VarDeclStatement730.getTree());
                }

            }
            break;
            case 6:
                // XQueryParser.g:1813:11: p_WhileStatement
            {
                root_0 = (XQDTCommonTree)adaptor.nil();

                pushFollow(FOLLOW_p_WhileStatement_in_p_Statement15946);
                p_WhileStatement731 = p_WhileStatement();

                state._fsp--;
                if (state.failed) {
                    return retval;
                }
                if (state.backtracking == 0) {
                    adaptor.addChild(root_0, p_WhileStatement731.getTree());
                }

            }
            break;

            }
            retval.stop = input.LT(-1);

            if (state.backtracking == 0) {

                retval.tree = (XQDTCommonTree)adaptor.rulePostProcessing(root_0);
                adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        } catch (RecognitionException re) {
            reportError(re);
            recover(input, re);
            retval.tree = (XQDTCommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        } finally {
        }
        return retval;
    }

    // $ANTLR end "p_Statement"

    public static class p_HybridExprSingle_return extends ParserRuleReturnScope {
        XQDTCommonTree tree;

        public Object getTree() {
            return tree;
        }
    };

    // $ANTLR start "p_HybridExprSingle"
    // XQueryParser.g:1815:1: p_HybridExprSingle[boolean strict, boolean allowConcat] : e= p_Expr[$strict,$allowConcat] SEMICOLON ;
    public final XQueryParser.p_HybridExprSingle_return p_HybridExprSingle(boolean strict, boolean allowConcat)
            throws RecognitionException {
        XQueryParser.p_HybridExprSingle_return retval = new XQueryParser.p_HybridExprSingle_return();
        retval.start = input.LT(1);

        XQDTCommonTree root_0 = null;

        CommonToken SEMICOLON732 = null;
        XQueryParser.p_Expr_return e = null;

        XQDTCommonTree SEMICOLON732_tree = null;

        try {
            // XQueryParser.g:1816:9: (e= p_Expr[$strict,$allowConcat] SEMICOLON )
            // XQueryParser.g:1816:11: e= p_Expr[$strict,$allowConcat] SEMICOLON
            {
                root_0 = (XQDTCommonTree)adaptor.nil();

                pushFollow(FOLLOW_p_Expr_in_p_HybridExprSingle15973);
                e = p_Expr(strict, allowConcat);

                state._fsp--;
                if (state.failed) {
                    return retval;
                }
                if (state.backtracking == 0) {
                    adaptor.addChild(root_0, e.getTree());
                }
                if (state.backtracking == 0) {
                    if (strict || input.LT(1).getType() != SEMICOLON) {
                        throw new RecognitionException();
                    }
                }
                SEMICOLON732 = (CommonToken)match(input, SEMICOLON, FOLLOW_SEMICOLON_in_p_HybridExprSingle15988);
                if (state.failed) {
                    return retval;
                }
                if (state.backtracking == 0) {
                    SEMICOLON732_tree = (XQDTCommonTree)adaptor.create(SEMICOLON732);
                    adaptor.addChild(root_0, SEMICOLON732_tree);
                }

            }

            retval.stop = input.LT(-1);

            if (state.backtracking == 0) {

                retval.tree = (XQDTCommonTree)adaptor.rulePostProcessing(root_0);
                adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        } catch (RecognitionException re) {

            root_0 = (XQDTCommonTree)adaptor.nil();
            adaptor.addChild(root_0, e.getTree());
            retval.stop = input.LT(-1);
            retval.tree = (XQDTCommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        } finally {
        }
        return retval;
    }

    // $ANTLR end "p_HybridExprSingle"

    public static class p_ApplyStatement_return extends ParserRuleReturnScope {
        XQDTCommonTree tree;

        public Object getTree() {
            return tree;
        }
    };

    // $ANTLR start "p_ApplyStatement"
    // XQueryParser.g:1846:1: p_ApplyStatement : p_ExprSimple SEMICOLON ;
    public final XQueryParser.p_ApplyStatement_return p_ApplyStatement() throws RecognitionException {
        XQueryParser.p_ApplyStatement_return retval = new XQueryParser.p_ApplyStatement_return();
        retval.start = input.LT(1);

        XQDTCommonTree root_0 = null;

        CommonToken SEMICOLON734 = null;
        XQueryParser.p_ExprSimple_return p_ExprSimple733 = null;

        XQDTCommonTree SEMICOLON734_tree = null;

        try {
            // XQueryParser.g:1847:9: ( p_ExprSimple SEMICOLON )
            // XQueryParser.g:1847:11: p_ExprSimple SEMICOLON
            {
                root_0 = (XQDTCommonTree)adaptor.nil();

                pushFollow(FOLLOW_p_ExprSimple_in_p_ApplyStatement16038);
                p_ExprSimple733 = p_ExprSimple();

                state._fsp--;
                if (state.failed) {
                    return retval;
                }
                if (state.backtracking == 0) {
                    adaptor.addChild(root_0, p_ExprSimple733.getTree());
                }
                SEMICOLON734 = (CommonToken)match(input, SEMICOLON, FOLLOW_SEMICOLON_in_p_ApplyStatement16040);
                if (state.failed) {
                    return retval;
                }
                if (state.backtracking == 0) {
                    SEMICOLON734_tree = (XQDTCommonTree)adaptor.create(SEMICOLON734);
                    adaptor.addChild(root_0, SEMICOLON734_tree);
                }

            }

            retval.stop = input.LT(-1);

            if (state.backtracking == 0) {

                retval.tree = (XQDTCommonTree)adaptor.rulePostProcessing(root_0);
                adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        } catch (RecognitionException re) {
            reportError(re);
            recover(input, re);
            retval.tree = (XQDTCommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        } finally {
        }
        return retval;
    }

    // $ANTLR end "p_ApplyStatement"

    public static class p_AssignStatement_return extends ParserRuleReturnScope {
        XQDTCommonTree tree;

        public Object getTree() {
            return tree;
        }
    };

    // $ANTLR start "p_AssignStatement"
    // XQueryParser.g:1851:1: p_AssignStatement : DOLLAR p_VarName BIND p_ExprSingle[true] SEMICOLON ;
    public final XQueryParser.p_AssignStatement_return p_AssignStatement() throws RecognitionException {
        XQueryParser.p_AssignStatement_return retval = new XQueryParser.p_AssignStatement_return();
        retval.start = input.LT(1);

        XQDTCommonTree root_0 = null;

        CommonToken DOLLAR735 = null;
        CommonToken BIND737 = null;
        CommonToken SEMICOLON739 = null;
        XQueryParser.p_VarName_return p_VarName736 = null;

        XQueryParser.p_ExprSingle_return p_ExprSingle738 = null;

        XQDTCommonTree DOLLAR735_tree = null;
        XQDTCommonTree BIND737_tree = null;
        XQDTCommonTree SEMICOLON739_tree = null;

        try {
            // XQueryParser.g:1852:9: ( DOLLAR p_VarName BIND p_ExprSingle[true] SEMICOLON )
            // XQueryParser.g:1852:11: DOLLAR p_VarName BIND p_ExprSingle[true] SEMICOLON
            {
                root_0 = (XQDTCommonTree)adaptor.nil();

                DOLLAR735 = (CommonToken)match(input, DOLLAR, FOLLOW_DOLLAR_in_p_AssignStatement16066);
                if (state.failed) {
                    return retval;
                }
                if (state.backtracking == 0) {
                    DOLLAR735_tree = (XQDTCommonTree)adaptor.create(DOLLAR735);
                    adaptor.addChild(root_0, DOLLAR735_tree);
                }
                pushFollow(FOLLOW_p_VarName_in_p_AssignStatement16068);
                p_VarName736 = p_VarName();

                state._fsp--;
                if (state.failed) {
                    return retval;
                }
                if (state.backtracking == 0) {
                    adaptor.addChild(root_0, p_VarName736.getTree());
                }
                BIND737 = (CommonToken)match(input, BIND, FOLLOW_BIND_in_p_AssignStatement16070);
                if (state.failed) {
                    return retval;
                }
                if (state.backtracking == 0) {
                    BIND737_tree = (XQDTCommonTree)adaptor.create(BIND737);
                    adaptor.addChild(root_0, BIND737_tree);
                }
                pushFollow(FOLLOW_p_ExprSingle_in_p_AssignStatement16072);
                p_ExprSingle738 = p_ExprSingle(true);

                state._fsp--;
                if (state.failed) {
                    return retval;
                }
                if (state.backtracking == 0) {
                    adaptor.addChild(root_0, p_ExprSingle738.getTree());
                }
                SEMICOLON739 = (CommonToken)match(input, SEMICOLON, FOLLOW_SEMICOLON_in_p_AssignStatement16075);
                if (state.failed) {
                    return retval;
                }
                if (state.backtracking == 0) {
                    SEMICOLON739_tree = (XQDTCommonTree)adaptor.create(SEMICOLON739);
                    adaptor.addChild(root_0, SEMICOLON739_tree);
                }

            }

            retval.stop = input.LT(-1);

            if (state.backtracking == 0) {

                retval.tree = (XQDTCommonTree)adaptor.rulePostProcessing(root_0);
                adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        } catch (RecognitionException re) {
            reportError(re);
            recover(input, re);
            retval.tree = (XQDTCommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        } finally {
        }
        return retval;
    }

    // $ANTLR end "p_AssignStatement"

    public static class p_BlockStatement_return extends ParserRuleReturnScope {
        XQDTCommonTree tree;

        public Object getTree() {
            return tree;
        }
    };

    // $ANTLR start "p_BlockStatement"
    // XQueryParser.g:1856:1: p_BlockStatement : LBRACKET p_Statements[false] RBRACKET ;
    public final XQueryParser.p_BlockStatement_return p_BlockStatement() throws RecognitionException {
        XQueryParser.p_BlockStatement_return retval = new XQueryParser.p_BlockStatement_return();
        retval.start = input.LT(1);

        XQDTCommonTree root_0 = null;

        CommonToken LBRACKET740 = null;
        CommonToken RBRACKET742 = null;
        XQueryParser.p_Statements_return p_Statements741 = null;

        XQDTCommonTree LBRACKET740_tree = null;
        XQDTCommonTree RBRACKET742_tree = null;

        try {
            // XQueryParser.g:1857:9: ( LBRACKET p_Statements[false] RBRACKET )
            // XQueryParser.g:1857:11: LBRACKET p_Statements[false] RBRACKET
            {
                root_0 = (XQDTCommonTree)adaptor.nil();

                LBRACKET740 = (CommonToken)match(input, LBRACKET, FOLLOW_LBRACKET_in_p_BlockStatement16101);
                if (state.failed) {
                    return retval;
                }
                if (state.backtracking == 0) {
                    LBRACKET740_tree = (XQDTCommonTree)adaptor.create(LBRACKET740);
                    adaptor.addChild(root_0, LBRACKET740_tree);
                }
                pushFollow(FOLLOW_p_Statements_in_p_BlockStatement16103);
                p_Statements741 = p_Statements(false);

                state._fsp--;
                if (state.failed) {
                    return retval;
                }
                if (state.backtracking == 0) {
                    adaptor.addChild(root_0, p_Statements741.getTree());
                }
                RBRACKET742 = (CommonToken)match(input, RBRACKET, FOLLOW_RBRACKET_in_p_BlockStatement16106);
                if (state.failed) {
                    return retval;
                }
                if (state.backtracking == 0) {
                    RBRACKET742_tree = (XQDTCommonTree)adaptor.create(RBRACKET742);
                    adaptor.addChild(root_0, RBRACKET742_tree);
                }

            }

            retval.stop = input.LT(-1);

            if (state.backtracking == 0) {

                retval.tree = (XQDTCommonTree)adaptor.rulePostProcessing(root_0);
                adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        } catch (RecognitionException re) {
            reportError(re);
            recover(input, re);
            retval.tree = (XQDTCommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        } finally {
        }
        return retval;
    }

    // $ANTLR end "p_BlockStatement"

    public static class p_BlockHybrid_return extends ParserRuleReturnScope {
        XQDTCommonTree tree;

        public Object getTree() {
            return tree;
        }
    };

    // $ANTLR start "p_BlockHybrid"
    // XQueryParser.g:1860:1: p_BlockHybrid[boolean strict] : LBRACKET p_Statements[$strict] RBRACKET ;
    public final XQueryParser.p_BlockHybrid_return p_BlockHybrid(boolean strict) throws RecognitionException {
        XQueryParser.p_BlockHybrid_return retval = new XQueryParser.p_BlockHybrid_return();
        retval.start = input.LT(1);

        XQDTCommonTree root_0 = null;

        CommonToken LBRACKET743 = null;
        CommonToken RBRACKET745 = null;
        XQueryParser.p_Statements_return p_Statements744 = null;

        XQDTCommonTree LBRACKET743_tree = null;
        XQDTCommonTree RBRACKET745_tree = null;

        try {
            // XQueryParser.g:1861:9: ( LBRACKET p_Statements[$strict] RBRACKET )
            // XQueryParser.g:1861:11: LBRACKET p_Statements[$strict] RBRACKET
            {
                root_0 = (XQDTCommonTree)adaptor.nil();

                LBRACKET743 = (CommonToken)match(input, LBRACKET, FOLLOW_LBRACKET_in_p_BlockHybrid16132);
                if (state.failed) {
                    return retval;
                }
                if (state.backtracking == 0) {
                    LBRACKET743_tree = (XQDTCommonTree)adaptor.create(LBRACKET743);
                    adaptor.addChild(root_0, LBRACKET743_tree);
                }
                pushFollow(FOLLOW_p_Statements_in_p_BlockHybrid16134);
                p_Statements744 = p_Statements(strict);

                state._fsp--;
                if (state.failed) {
                    return retval;
                }
                if (state.backtracking == 0) {
                    adaptor.addChild(root_0, p_Statements744.getTree());
                }
                RBRACKET745 = (CommonToken)match(input, RBRACKET, FOLLOW_RBRACKET_in_p_BlockHybrid16137);
                if (state.failed) {
                    return retval;
                }
                if (state.backtracking == 0) {
                    RBRACKET745_tree = (XQDTCommonTree)adaptor.create(RBRACKET745);
                    adaptor.addChild(root_0, RBRACKET745_tree);
                }

            }

            retval.stop = input.LT(-1);

            if (state.backtracking == 0) {

                retval.tree = (XQDTCommonTree)adaptor.rulePostProcessing(root_0);
                adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        } catch (RecognitionException re) {
            reportError(re);
            recover(input, re);
            retval.tree = (XQDTCommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        } finally {
        }
        return retval;
    }

    // $ANTLR end "p_BlockHybrid"

    public static class p_BreakStatement_return extends ParserRuleReturnScope {
        XQDTCommonTree tree;

        public Object getTree() {
            return tree;
        }
    };

    // $ANTLR start "p_BreakStatement"
    // XQueryParser.g:1865:1: p_BreakStatement : k= BREAK k= LOOP SEMICOLON ;
    public final XQueryParser.p_BreakStatement_return p_BreakStatement() throws RecognitionException {
        XQueryParser.p_BreakStatement_return retval = new XQueryParser.p_BreakStatement_return();
        retval.start = input.LT(1);

        XQDTCommonTree root_0 = null;

        CommonToken k = null;
        CommonToken SEMICOLON746 = null;

        XQDTCommonTree k_tree = null;
        XQDTCommonTree SEMICOLON746_tree = null;

        try {
            // XQueryParser.g:1866:9: (k= BREAK k= LOOP SEMICOLON )
            // XQueryParser.g:1866:11: k= BREAK k= LOOP SEMICOLON
            {
                root_0 = (XQDTCommonTree)adaptor.nil();

                k = (CommonToken)match(input, BREAK, FOLLOW_BREAK_in_p_BreakStatement16165);
                if (state.failed) {
                    return retval;
                }
                if (state.backtracking == 0) {
                    k_tree = (XQDTCommonTree)adaptor.create(k);
                    adaptor.addChild(root_0, k_tree);
                }
                if (state.backtracking == 0) {
                    ak(k);
                }
                k = (CommonToken)match(input, LOOP, FOLLOW_LOOP_in_p_BreakStatement16171);
                if (state.failed) {
                    return retval;
                }
                if (state.backtracking == 0) {
                    k_tree = (XQDTCommonTree)adaptor.create(k);
                    adaptor.addChild(root_0, k_tree);
                }
                if (state.backtracking == 0) {
                    ak(k);
                }
                SEMICOLON746 = (CommonToken)match(input, SEMICOLON, FOLLOW_SEMICOLON_in_p_BreakStatement16175);
                if (state.failed) {
                    return retval;
                }
                if (state.backtracking == 0) {
                    SEMICOLON746_tree = (XQDTCommonTree)adaptor.create(SEMICOLON746);
                    adaptor.addChild(root_0, SEMICOLON746_tree);
                }

            }

            retval.stop = input.LT(-1);

            if (state.backtracking == 0) {

                retval.tree = (XQDTCommonTree)adaptor.rulePostProcessing(root_0);
                adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        } catch (RecognitionException re) {
            reportError(re);
            recover(input, re);
            retval.tree = (XQDTCommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        } finally {
        }
        return retval;
    }

    // $ANTLR end "p_BreakStatement"

    public static class p_ContinueStatement_return extends ParserRuleReturnScope {
        XQDTCommonTree tree;

        public Object getTree() {
            return tree;
        }
    };

    // $ANTLR start "p_ContinueStatement"
    // XQueryParser.g:1870:1: p_ContinueStatement : k= CONTINUE k= LOOP SEMICOLON ;
    public final XQueryParser.p_ContinueStatement_return p_ContinueStatement() throws RecognitionException {
        XQueryParser.p_ContinueStatement_return retval = new XQueryParser.p_ContinueStatement_return();
        retval.start = input.LT(1);

        XQDTCommonTree root_0 = null;

        CommonToken k = null;
        CommonToken SEMICOLON747 = null;

        XQDTCommonTree k_tree = null;
        XQDTCommonTree SEMICOLON747_tree = null;

        try {
            // XQueryParser.g:1871:9: (k= CONTINUE k= LOOP SEMICOLON )
            // XQueryParser.g:1871:11: k= CONTINUE k= LOOP SEMICOLON
            {
                root_0 = (XQDTCommonTree)adaptor.nil();

                k = (CommonToken)match(input, CONTINUE, FOLLOW_CONTINUE_in_p_ContinueStatement16203);
                if (state.failed) {
                    return retval;
                }
                if (state.backtracking == 0) {
                    k_tree = (XQDTCommonTree)adaptor.create(k);
                    adaptor.addChild(root_0, k_tree);
                }
                if (state.backtracking == 0) {
                    ak(k);
                }
                k = (CommonToken)match(input, LOOP, FOLLOW_LOOP_in_p_ContinueStatement16209);
                if (state.failed) {
                    return retval;
                }
                if (state.backtracking == 0) {
                    k_tree = (XQDTCommonTree)adaptor.create(k);
                    adaptor.addChild(root_0, k_tree);
                }
                if (state.backtracking == 0) {
                    ak(k);
                }
                SEMICOLON747 = (CommonToken)match(input, SEMICOLON, FOLLOW_SEMICOLON_in_p_ContinueStatement16213);
                if (state.failed) {
                    return retval;
                }
                if (state.backtracking == 0) {
                    SEMICOLON747_tree = (XQDTCommonTree)adaptor.create(SEMICOLON747);
                    adaptor.addChild(root_0, SEMICOLON747_tree);
                }

            }

            retval.stop = input.LT(-1);

            if (state.backtracking == 0) {

                retval.tree = (XQDTCommonTree)adaptor.rulePostProcessing(root_0);
                adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        } catch (RecognitionException re) {
            reportError(re);
            recover(input, re);
            retval.tree = (XQDTCommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        } finally {
        }
        return retval;
    }

    // $ANTLR end "p_ContinueStatement"

    public static class p_ExitStatement_return extends ParserRuleReturnScope {
        XQDTCommonTree tree;

        public Object getTree() {
            return tree;
        }
    };

    // $ANTLR start "p_ExitStatement"
    // XQueryParser.g:1875:1: p_ExitStatement : k= EXIT k= RETURNING p_ExprSingle[true] SEMICOLON ;
    public final XQueryParser.p_ExitStatement_return p_ExitStatement() throws RecognitionException {
        XQueryParser.p_ExitStatement_return retval = new XQueryParser.p_ExitStatement_return();
        retval.start = input.LT(1);

        XQDTCommonTree root_0 = null;

        CommonToken k = null;
        CommonToken SEMICOLON749 = null;
        XQueryParser.p_ExprSingle_return p_ExprSingle748 = null;

        XQDTCommonTree k_tree = null;
        XQDTCommonTree SEMICOLON749_tree = null;

        try {
            // XQueryParser.g:1876:9: (k= EXIT k= RETURNING p_ExprSingle[true] SEMICOLON )
            // XQueryParser.g:1876:11: k= EXIT k= RETURNING p_ExprSingle[true] SEMICOLON
            {
                root_0 = (XQDTCommonTree)adaptor.nil();

                k = (CommonToken)match(input, EXIT, FOLLOW_EXIT_in_p_ExitStatement16241);
                if (state.failed) {
                    return retval;
                }
                if (state.backtracking == 0) {
                    k_tree = (XQDTCommonTree)adaptor.create(k);
                    adaptor.addChild(root_0, k_tree);
                }
                if (state.backtracking == 0) {
                    ak(k);
                }
                k = (CommonToken)match(input, RETURNING, FOLLOW_RETURNING_in_p_ExitStatement16247);
                if (state.failed) {
                    return retval;
                }
                if (state.backtracking == 0) {
                    k_tree = (XQDTCommonTree)adaptor.create(k);
                    adaptor.addChild(root_0, k_tree);
                }
                if (state.backtracking == 0) {
                    ak(k);
                }
                pushFollow(FOLLOW_p_ExprSingle_in_p_ExitStatement16251);
                p_ExprSingle748 = p_ExprSingle(true);

                state._fsp--;
                if (state.failed) {
                    return retval;
                }
                if (state.backtracking == 0) {
                    adaptor.addChild(root_0, p_ExprSingle748.getTree());
                }
                SEMICOLON749 = (CommonToken)match(input, SEMICOLON, FOLLOW_SEMICOLON_in_p_ExitStatement16254);
                if (state.failed) {
                    return retval;
                }
                if (state.backtracking == 0) {
                    SEMICOLON749_tree = (XQDTCommonTree)adaptor.create(SEMICOLON749);
                    adaptor.addChild(root_0, SEMICOLON749_tree);
                }

            }

            retval.stop = input.LT(-1);

            if (state.backtracking == 0) {

                retval.tree = (XQDTCommonTree)adaptor.rulePostProcessing(root_0);
                adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        } catch (RecognitionException re) {
            reportError(re);
            recover(input, re);
            retval.tree = (XQDTCommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        } finally {
        }
        return retval;
    }

    // $ANTLR end "p_ExitStatement"

    public static class p_FLWORStatement_return extends ParserRuleReturnScope {
        XQDTCommonTree tree;

        public Object getTree() {
            return tree;
        }
    };

    // $ANTLR start "p_FLWORStatement"
    // XQueryParser.g:1880:1: p_FLWORStatement : p_InitialClause ( p_IntermediateClause )* p_ReturnStatement ;
    public final XQueryParser.p_FLWORStatement_return p_FLWORStatement() throws RecognitionException {
        XQueryParser.p_FLWORStatement_return retval = new XQueryParser.p_FLWORStatement_return();
        retval.start = input.LT(1);

        XQDTCommonTree root_0 = null;

        XQueryParser.p_InitialClause_return p_InitialClause750 = null;

        XQueryParser.p_IntermediateClause_return p_IntermediateClause751 = null;

        XQueryParser.p_ReturnStatement_return p_ReturnStatement752 = null;

        try {
            // XQueryParser.g:1881:9: ( p_InitialClause ( p_IntermediateClause )* p_ReturnStatement )
            // XQueryParser.g:1881:11: p_InitialClause ( p_IntermediateClause )* p_ReturnStatement
            {
                root_0 = (XQDTCommonTree)adaptor.nil();

                pushFollow(FOLLOW_p_InitialClause_in_p_FLWORStatement16280);
                p_InitialClause750 = p_InitialClause();

                state._fsp--;
                if (state.failed) {
                    return retval;
                }
                if (state.backtracking == 0) {
                    adaptor.addChild(root_0, p_InitialClause750.getTree());
                }
                // XQueryParser.g:1881:27: ( p_IntermediateClause )*
                loop236: do {
                    int alt236 = 2;
                    int LA236_0 = input.LA(1);

                    if ((LA236_0 == FOR || LA236_0 == LET || LA236_0 == ORDER || LA236_0 == STABLE || LA236_0 == WHERE
                            || LA236_0 == COUNT || LA236_0 == GROUP)) {
                        alt236 = 1;
                    }

                    switch (alt236) {
                    case 1:
                        // XQueryParser.g:1881:27: p_IntermediateClause
                    {
                        pushFollow(FOLLOW_p_IntermediateClause_in_p_FLWORStatement16282);
                        p_IntermediateClause751 = p_IntermediateClause();

                        state._fsp--;
                        if (state.failed) {
                            return retval;
                        }
                        if (state.backtracking == 0) {
                            adaptor.addChild(root_0, p_IntermediateClause751.getTree());
                        }

                    }
                    break;

                    default:
                        break loop236;
                    }
                } while (true);

                pushFollow(FOLLOW_p_ReturnStatement_in_p_FLWORStatement16285);
                p_ReturnStatement752 = p_ReturnStatement();

                state._fsp--;
                if (state.failed) {
                    return retval;
                }
                if (state.backtracking == 0) {
                    adaptor.addChild(root_0, p_ReturnStatement752.getTree());
                }

            }

            retval.stop = input.LT(-1);

            if (state.backtracking == 0) {

                retval.tree = (XQDTCommonTree)adaptor.rulePostProcessing(root_0);
                adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        } catch (RecognitionException re) {
            reportError(re);
            recover(input, re);
            retval.tree = (XQDTCommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        } finally {
        }
        return retval;
    }

    // $ANTLR end "p_FLWORStatement"

    public static class p_ReturnStatement_return extends ParserRuleReturnScope {
        XQDTCommonTree tree;

        public Object getTree() {
            return tree;
        }
    };

    // $ANTLR start "p_ReturnStatement"
    // XQueryParser.g:1885:1: p_ReturnStatement : k= RETURN p_Hybrid[false,false] ;
    public final XQueryParser.p_ReturnStatement_return p_ReturnStatement() throws RecognitionException {
        XQueryParser.p_ReturnStatement_return retval = new XQueryParser.p_ReturnStatement_return();
        retval.start = input.LT(1);

        XQDTCommonTree root_0 = null;

        CommonToken k = null;
        XQueryParser.p_Hybrid_return p_Hybrid753 = null;

        XQDTCommonTree k_tree = null;

        try {
            // XQueryParser.g:1886:9: (k= RETURN p_Hybrid[false,false] )
            // XQueryParser.g:1886:11: k= RETURN p_Hybrid[false,false]
            {
                root_0 = (XQDTCommonTree)adaptor.nil();

                k = (CommonToken)match(input, RETURN, FOLLOW_RETURN_in_p_ReturnStatement16317);
                if (state.failed) {
                    return retval;
                }
                if (state.backtracking == 0) {
                    k_tree = (XQDTCommonTree)adaptor.create(k);
                    adaptor.addChild(root_0, k_tree);
                }
                if (state.backtracking == 0) {
                    ak(k);
                }
                pushFollow(FOLLOW_p_Hybrid_in_p_ReturnStatement16321);
                p_Hybrid753 = p_Hybrid(false, false);

                state._fsp--;
                if (state.failed) {
                    return retval;
                }
                if (state.backtracking == 0) {
                    adaptor.addChild(root_0, p_Hybrid753.getTree());
                }

            }

            retval.stop = input.LT(-1);

            if (state.backtracking == 0) {

                retval.tree = (XQDTCommonTree)adaptor.rulePostProcessing(root_0);
                adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        } catch (RecognitionException re) {
            reportError(re);
            recover(input, re);
            retval.tree = (XQDTCommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        } finally {
        }
        return retval;
    }

    // $ANTLR end "p_ReturnStatement"

    public static class p_IfStatement_return extends ParserRuleReturnScope {
        XQDTCommonTree tree;

        public Object getTree() {
            return tree;
        }
    };

    // $ANTLR start "p_IfStatement"
    // XQueryParser.g:1890:1: p_IfStatement : k= IF LPAREN p_Expr[true,true] RPAREN k= THEN p_Hybrid[false,false] k= ELSE p_Hybrid[false,false] ;
    public final XQueryParser.p_IfStatement_return p_IfStatement() throws RecognitionException {
        XQueryParser.p_IfStatement_return retval = new XQueryParser.p_IfStatement_return();
        retval.start = input.LT(1);

        XQDTCommonTree root_0 = null;

        CommonToken k = null;
        CommonToken LPAREN754 = null;
        CommonToken RPAREN756 = null;
        XQueryParser.p_Expr_return p_Expr755 = null;

        XQueryParser.p_Hybrid_return p_Hybrid757 = null;

        XQueryParser.p_Hybrid_return p_Hybrid758 = null;

        XQDTCommonTree k_tree = null;
        XQDTCommonTree LPAREN754_tree = null;
        XQDTCommonTree RPAREN756_tree = null;

        try {
            // XQueryParser.g:1891:9: (k= IF LPAREN p_Expr[true,true] RPAREN k= THEN p_Hybrid[false,false] k= ELSE p_Hybrid[false,false] )
            // XQueryParser.g:1891:11: k= IF LPAREN p_Expr[true,true] RPAREN k= THEN p_Hybrid[false,false] k= ELSE p_Hybrid[false,false]
            {
                root_0 = (XQDTCommonTree)adaptor.nil();

                k = (CommonToken)match(input, IF, FOLLOW_IF_in_p_IfStatement16350);
                if (state.failed) {
                    return retval;
                }
                if (state.backtracking == 0) {
                    k_tree = (XQDTCommonTree)adaptor.create(k);
                    adaptor.addChild(root_0, k_tree);
                }
                if (state.backtracking == 0) {
                    ak(k);
                }
                LPAREN754 = (CommonToken)match(input, LPAREN, FOLLOW_LPAREN_in_p_IfStatement16354);
                if (state.failed) {
                    return retval;
                }
                if (state.backtracking == 0) {
                    LPAREN754_tree = (XQDTCommonTree)adaptor.create(LPAREN754);
                    adaptor.addChild(root_0, LPAREN754_tree);
                }
                pushFollow(FOLLOW_p_Expr_in_p_IfStatement16356);
                p_Expr755 = p_Expr(true, true);

                state._fsp--;
                if (state.failed) {
                    return retval;
                }
                if (state.backtracking == 0) {
                    adaptor.addChild(root_0, p_Expr755.getTree());
                }
                RPAREN756 = (CommonToken)match(input, RPAREN, FOLLOW_RPAREN_in_p_IfStatement16359);
                if (state.failed) {
                    return retval;
                }
                if (state.backtracking == 0) {
                    RPAREN756_tree = (XQDTCommonTree)adaptor.create(RPAREN756);
                    adaptor.addChild(root_0, RPAREN756_tree);
                }
                k = (CommonToken)match(input, THEN, FOLLOW_THEN_in_p_IfStatement16363);
                if (state.failed) {
                    return retval;
                }
                if (state.backtracking == 0) {
                    k_tree = (XQDTCommonTree)adaptor.create(k);
                    adaptor.addChild(root_0, k_tree);
                }
                if (state.backtracking == 0) {
                    ak(k);
                }
                pushFollow(FOLLOW_p_Hybrid_in_p_IfStatement16367);
                p_Hybrid757 = p_Hybrid(false, false);

                state._fsp--;
                if (state.failed) {
                    return retval;
                }
                if (state.backtracking == 0) {
                    adaptor.addChild(root_0, p_Hybrid757.getTree());
                }
                k = (CommonToken)match(input, ELSE, FOLLOW_ELSE_in_p_IfStatement16372);
                if (state.failed) {
                    return retval;
                }
                if (state.backtracking == 0) {
                    k_tree = (XQDTCommonTree)adaptor.create(k);
                    adaptor.addChild(root_0, k_tree);
                }
                if (state.backtracking == 0) {
                    ak(k);
                }
                pushFollow(FOLLOW_p_Hybrid_in_p_IfStatement16376);
                p_Hybrid758 = p_Hybrid(false, false);

                state._fsp--;
                if (state.failed) {
                    return retval;
                }
                if (state.backtracking == 0) {
                    adaptor.addChild(root_0, p_Hybrid758.getTree());
                }

            }

            retval.stop = input.LT(-1);

            if (state.backtracking == 0) {

                retval.tree = (XQDTCommonTree)adaptor.rulePostProcessing(root_0);
                adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        } catch (RecognitionException re) {
            reportError(re);
            recover(input, re);
            retval.tree = (XQDTCommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        } finally {
        }
        return retval;
    }

    // $ANTLR end "p_IfStatement"

    public static class p_SwitchStatement_return extends ParserRuleReturnScope {
        XQDTCommonTree tree;

        public Object getTree() {
            return tree;
        }
    };

    // $ANTLR start "p_SwitchStatement"
    // XQueryParser.g:1895:1: p_SwitchStatement : k= SWITCH LPAREN p_Expr[true,true] RPAREN ( p_SwitchCaseStatement )+ k= DEFAULT k= RETURN p_Hybrid[false,false] ;
    public final XQueryParser.p_SwitchStatement_return p_SwitchStatement() throws RecognitionException {
        XQueryParser.p_SwitchStatement_return retval = new XQueryParser.p_SwitchStatement_return();
        retval.start = input.LT(1);

        XQDTCommonTree root_0 = null;

        CommonToken k = null;
        CommonToken LPAREN759 = null;
        CommonToken RPAREN761 = null;
        XQueryParser.p_Expr_return p_Expr760 = null;

        XQueryParser.p_SwitchCaseStatement_return p_SwitchCaseStatement762 = null;

        XQueryParser.p_Hybrid_return p_Hybrid763 = null;

        XQDTCommonTree k_tree = null;
        XQDTCommonTree LPAREN759_tree = null;
        XQDTCommonTree RPAREN761_tree = null;

        try {
            // XQueryParser.g:1896:9: (k= SWITCH LPAREN p_Expr[true,true] RPAREN ( p_SwitchCaseStatement )+ k= DEFAULT k= RETURN p_Hybrid[false,false] )
            // XQueryParser.g:1896:11: k= SWITCH LPAREN p_Expr[true,true] RPAREN ( p_SwitchCaseStatement )+ k= DEFAULT k= RETURN p_Hybrid[false,false]
            {
                root_0 = (XQDTCommonTree)adaptor.nil();

                k = (CommonToken)match(input, SWITCH, FOLLOW_SWITCH_in_p_SwitchStatement16405);
                if (state.failed) {
                    return retval;
                }
                if (state.backtracking == 0) {
                    k_tree = (XQDTCommonTree)adaptor.create(k);
                    adaptor.addChild(root_0, k_tree);
                }
                if (state.backtracking == 0) {
                    ak(k);
                }
                LPAREN759 = (CommonToken)match(input, LPAREN, FOLLOW_LPAREN_in_p_SwitchStatement16409);
                if (state.failed) {
                    return retval;
                }
                if (state.backtracking == 0) {
                    LPAREN759_tree = (XQDTCommonTree)adaptor.create(LPAREN759);
                    adaptor.addChild(root_0, LPAREN759_tree);
                }
                pushFollow(FOLLOW_p_Expr_in_p_SwitchStatement16411);
                p_Expr760 = p_Expr(true, true);

                state._fsp--;
                if (state.failed) {
                    return retval;
                }
                if (state.backtracking == 0) {
                    adaptor.addChild(root_0, p_Expr760.getTree());
                }
                RPAREN761 = (CommonToken)match(input, RPAREN, FOLLOW_RPAREN_in_p_SwitchStatement16414);
                if (state.failed) {
                    return retval;
                }
                if (state.backtracking == 0) {
                    RPAREN761_tree = (XQDTCommonTree)adaptor.create(RPAREN761);
                    adaptor.addChild(root_0, RPAREN761_tree);
                }
                // XQueryParser.g:1896:62: ( p_SwitchCaseStatement )+
                int cnt237 = 0;
                loop237: do {
                    int alt237 = 2;
                    int LA237_0 = input.LA(1);

                    if ((LA237_0 == CASE)) {
                        alt237 = 1;
                    }

                    switch (alt237) {
                    case 1:
                        // XQueryParser.g:1896:62: p_SwitchCaseStatement
                    {
                        pushFollow(FOLLOW_p_SwitchCaseStatement_in_p_SwitchStatement16416);
                        p_SwitchCaseStatement762 = p_SwitchCaseStatement();

                        state._fsp--;
                        if (state.failed) {
                            return retval;
                        }
                        if (state.backtracking == 0) {
                            adaptor.addChild(root_0, p_SwitchCaseStatement762.getTree());
                        }

                    }
                    break;

                    default:
                        if (cnt237 >= 1) {
                            break loop237;
                        }
                        if (state.backtracking > 0) {
                            state.failed = true;
                            return retval;
                        }
                        EarlyExitException eee = new EarlyExitException(237, input);
                        throw eee;
                    }
                    cnt237++;
                } while (true);

                k = (CommonToken)match(input, DEFAULT, FOLLOW_DEFAULT_in_p_SwitchStatement16421);
                if (state.failed) {
                    return retval;
                }
                if (state.backtracking == 0) {
                    k_tree = (XQDTCommonTree)adaptor.create(k);
                    adaptor.addChild(root_0, k_tree);
                }
                if (state.backtracking == 0) {
                    ak(k);
                }
                k = (CommonToken)match(input, RETURN, FOLLOW_RETURN_in_p_SwitchStatement16427);
                if (state.failed) {
                    return retval;
                }
                if (state.backtracking == 0) {
                    k_tree = (XQDTCommonTree)adaptor.create(k);
                    adaptor.addChild(root_0, k_tree);
                }
                if (state.backtracking == 0) {
                    ak(k);
                }
                pushFollow(FOLLOW_p_Hybrid_in_p_SwitchStatement16431);
                p_Hybrid763 = p_Hybrid(false, false);

                state._fsp--;
                if (state.failed) {
                    return retval;
                }
                if (state.backtracking == 0) {
                    adaptor.addChild(root_0, p_Hybrid763.getTree());
                }

            }

            retval.stop = input.LT(-1);

            if (state.backtracking == 0) {

                retval.tree = (XQDTCommonTree)adaptor.rulePostProcessing(root_0);
                adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        } catch (RecognitionException re) {
            reportError(re);
            recover(input, re);
            retval.tree = (XQDTCommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        } finally {
        }
        return retval;
    }

    // $ANTLR end "p_SwitchStatement"

    public static class p_SwitchCaseStatement_return extends ParserRuleReturnScope {
        XQDTCommonTree tree;

        public Object getTree() {
            return tree;
        }
    };

    // $ANTLR start "p_SwitchCaseStatement"
    // XQueryParser.g:1900:1: p_SwitchCaseStatement : (k= CASE p_SwitchCaseOperand )+ k= RETURN p_Hybrid[false,false] ;
    public final XQueryParser.p_SwitchCaseStatement_return p_SwitchCaseStatement() throws RecognitionException {
        XQueryParser.p_SwitchCaseStatement_return retval = new XQueryParser.p_SwitchCaseStatement_return();
        retval.start = input.LT(1);

        XQDTCommonTree root_0 = null;

        CommonToken k = null;
        XQueryParser.p_SwitchCaseOperand_return p_SwitchCaseOperand764 = null;

        XQueryParser.p_Hybrid_return p_Hybrid765 = null;

        XQDTCommonTree k_tree = null;

        try {
            // XQueryParser.g:1901:9: ( (k= CASE p_SwitchCaseOperand )+ k= RETURN p_Hybrid[false,false] )
            // XQueryParser.g:1901:11: (k= CASE p_SwitchCaseOperand )+ k= RETURN p_Hybrid[false,false]
            {
                root_0 = (XQDTCommonTree)adaptor.nil();

                // XQueryParser.g:1901:11: (k= CASE p_SwitchCaseOperand )+
                int cnt238 = 0;
                loop238: do {
                    int alt238 = 2;
                    int LA238_0 = input.LA(1);

                    if ((LA238_0 == CASE)) {
                        alt238 = 1;
                    }

                    switch (alt238) {
                    case 1:
                        // XQueryParser.g:1901:12: k= CASE p_SwitchCaseOperand
                    {
                        k = (CommonToken)match(input, CASE, FOLLOW_CASE_in_p_SwitchCaseStatement16461);
                        if (state.failed) {
                            return retval;
                        }
                        if (state.backtracking == 0) {
                            k_tree = (XQDTCommonTree)adaptor.create(k);
                            adaptor.addChild(root_0, k_tree);
                        }
                        if (state.backtracking == 0) {
                            ak(k);
                        }
                        pushFollow(FOLLOW_p_SwitchCaseOperand_in_p_SwitchCaseStatement16465);
                        p_SwitchCaseOperand764 = p_SwitchCaseOperand();

                        state._fsp--;
                        if (state.failed) {
                            return retval;
                        }
                        if (state.backtracking == 0) {
                            adaptor.addChild(root_0, p_SwitchCaseOperand764.getTree());
                        }

                    }
                    break;

                    default:
                        if (cnt238 >= 1) {
                            break loop238;
                        }
                        if (state.backtracking > 0) {
                            state.failed = true;
                            return retval;
                        }
                        EarlyExitException eee = new EarlyExitException(238, input);
                        throw eee;
                    }
                    cnt238++;
                } while (true);

                k = (CommonToken)match(input, RETURN, FOLLOW_RETURN_in_p_SwitchCaseStatement16471);
                if (state.failed) {
                    return retval;
                }
                if (state.backtracking == 0) {
                    k_tree = (XQDTCommonTree)adaptor.create(k);
                    adaptor.addChild(root_0, k_tree);
                }
                if (state.backtracking == 0) {
                    ak(k);
                }
                pushFollow(FOLLOW_p_Hybrid_in_p_SwitchCaseStatement16475);
                p_Hybrid765 = p_Hybrid(false, false);

                state._fsp--;
                if (state.failed) {
                    return retval;
                }
                if (state.backtracking == 0) {
                    adaptor.addChild(root_0, p_Hybrid765.getTree());
                }

            }

            retval.stop = input.LT(-1);

            if (state.backtracking == 0) {

                retval.tree = (XQDTCommonTree)adaptor.rulePostProcessing(root_0);
                adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        } catch (RecognitionException re) {
            reportError(re);
            recover(input, re);
            retval.tree = (XQDTCommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        } finally {
        }
        return retval;
    }

    // $ANTLR end "p_SwitchCaseStatement"

    public static class p_TryCatchStatement_return extends ParserRuleReturnScope {
        XQDTCommonTree tree;

        public Object getTree() {
            return tree;
        }
    };

    // $ANTLR start "p_TryCatchStatement"
    // XQueryParser.g:1905:1: p_TryCatchStatement : k= TRY p_BlockStatement (k= CATCH p_CatchErrorList p_BlockStatement )+ ;
    public final XQueryParser.p_TryCatchStatement_return p_TryCatchStatement() throws RecognitionException {
        XQueryParser.p_TryCatchStatement_return retval = new XQueryParser.p_TryCatchStatement_return();
        retval.start = input.LT(1);

        XQDTCommonTree root_0 = null;

        CommonToken k = null;
        XQueryParser.p_BlockStatement_return p_BlockStatement766 = null;

        XQueryParser.p_CatchErrorList_return p_CatchErrorList767 = null;

        XQueryParser.p_BlockStatement_return p_BlockStatement768 = null;

        XQDTCommonTree k_tree = null;

        try {
            // XQueryParser.g:1906:9: (k= TRY p_BlockStatement (k= CATCH p_CatchErrorList p_BlockStatement )+ )
            // XQueryParser.g:1906:11: k= TRY p_BlockStatement (k= CATCH p_CatchErrorList p_BlockStatement )+
            {
                root_0 = (XQDTCommonTree)adaptor.nil();

                k = (CommonToken)match(input, TRY, FOLLOW_TRY_in_p_TryCatchStatement16504);
                if (state.failed) {
                    return retval;
                }
                if (state.backtracking == 0) {
                    k_tree = (XQDTCommonTree)adaptor.create(k);
                    adaptor.addChild(root_0, k_tree);
                }
                if (state.backtracking == 0) {
                    ak(k);
                }
                pushFollow(FOLLOW_p_BlockStatement_in_p_TryCatchStatement16508);
                p_BlockStatement766 = p_BlockStatement();

                state._fsp--;
                if (state.failed) {
                    return retval;
                }
                if (state.backtracking == 0) {
                    adaptor.addChild(root_0, p_BlockStatement766.getTree());
                }
                // XQueryParser.g:1906:44: (k= CATCH p_CatchErrorList p_BlockStatement )+
                int cnt239 = 0;
                loop239: do {
                    int alt239 = 2;
                    int LA239_0 = input.LA(1);

                    if ((LA239_0 == CATCH)) {
                        alt239 = 1;
                    }

                    switch (alt239) {
                    case 1:
                        // XQueryParser.g:1906:45: k= CATCH p_CatchErrorList p_BlockStatement
                    {
                        k = (CommonToken)match(input, CATCH, FOLLOW_CATCH_in_p_TryCatchStatement16513);
                        if (state.failed) {
                            return retval;
                        }
                        if (state.backtracking == 0) {
                            k_tree = (XQDTCommonTree)adaptor.create(k);
                            adaptor.addChild(root_0, k_tree);
                        }
                        if (state.backtracking == 0) {
                            ak(k);
                        }
                        pushFollow(FOLLOW_p_CatchErrorList_in_p_TryCatchStatement16517);
                        p_CatchErrorList767 = p_CatchErrorList();

                        state._fsp--;
                        if (state.failed) {
                            return retval;
                        }
                        if (state.backtracking == 0) {
                            adaptor.addChild(root_0, p_CatchErrorList767.getTree());
                        }
                        pushFollow(FOLLOW_p_BlockStatement_in_p_TryCatchStatement16519);
                        p_BlockStatement768 = p_BlockStatement();

                        state._fsp--;
                        if (state.failed) {
                            return retval;
                        }
                        if (state.backtracking == 0) {
                            adaptor.addChild(root_0, p_BlockStatement768.getTree());
                        }

                    }
                    break;

                    default:
                        if (cnt239 >= 1) {
                            break loop239;
                        }
                        if (state.backtracking > 0) {
                            state.failed = true;
                            return retval;
                        }
                        EarlyExitException eee = new EarlyExitException(239, input);
                        throw eee;
                    }
                    cnt239++;
                } while (true);

                if (state.backtracking == 0) {
                    ak(k);
                }

            }

            retval.stop = input.LT(-1);

            if (state.backtracking == 0) {

                retval.tree = (XQDTCommonTree)adaptor.rulePostProcessing(root_0);
                adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        } catch (RecognitionException re) {
            reportError(re);
            recover(input, re);
            retval.tree = (XQDTCommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        } finally {
        }
        return retval;
    }

    // $ANTLR end "p_TryCatchStatement"

    public static class p_TryCatchHybrid_return extends ParserRuleReturnScope {
        XQDTCommonTree tree;

        public Object getTree() {
            return tree;
        }
    };

    // $ANTLR start "p_TryCatchHybrid"
    // XQueryParser.g:1909:1: p_TryCatchHybrid[boolean strict] : k= TRY p_BlockHybrid[$strict] (k= CATCH p_CatchErrorList p_BlockHybrid[$strict] )+ ;
    public final XQueryParser.p_TryCatchHybrid_return p_TryCatchHybrid(boolean strict) throws RecognitionException {
        XQueryParser.p_TryCatchHybrid_return retval = new XQueryParser.p_TryCatchHybrid_return();
        retval.start = input.LT(1);

        XQDTCommonTree root_0 = null;

        CommonToken k = null;
        XQueryParser.p_BlockHybrid_return p_BlockHybrid769 = null;

        XQueryParser.p_CatchErrorList_return p_CatchErrorList770 = null;

        XQueryParser.p_BlockHybrid_return p_BlockHybrid771 = null;

        XQDTCommonTree k_tree = null;

        try {
            // XQueryParser.g:1910:9: (k= TRY p_BlockHybrid[$strict] (k= CATCH p_CatchErrorList p_BlockHybrid[$strict] )+ )
            // XQueryParser.g:1910:11: k= TRY p_BlockHybrid[$strict] (k= CATCH p_CatchErrorList p_BlockHybrid[$strict] )+
            {
                root_0 = (XQDTCommonTree)adaptor.nil();

                k = (CommonToken)match(input, TRY, FOLLOW_TRY_in_p_TryCatchHybrid16551);
                if (state.failed) {
                    return retval;
                }
                if (state.backtracking == 0) {
                    k_tree = (XQDTCommonTree)adaptor.create(k);
                    adaptor.addChild(root_0, k_tree);
                }
                if (state.backtracking == 0) {
                    ak(k);
                }
                pushFollow(FOLLOW_p_BlockHybrid_in_p_TryCatchHybrid16555);
                p_BlockHybrid769 = p_BlockHybrid(strict);

                state._fsp--;
                if (state.failed) {
                    return retval;
                }
                if (state.backtracking == 0) {
                    adaptor.addChild(root_0, p_BlockHybrid769.getTree());
                }
                // XQueryParser.g:1910:50: (k= CATCH p_CatchErrorList p_BlockHybrid[$strict] )+
                int cnt240 = 0;
                loop240: do {
                    int alt240 = 2;
                    int LA240_0 = input.LA(1);

                    if ((LA240_0 == CATCH)) {
                        alt240 = 1;
                    }

                    switch (alt240) {
                    case 1:
                        // XQueryParser.g:1910:51: k= CATCH p_CatchErrorList p_BlockHybrid[$strict]
                    {
                        k = (CommonToken)match(input, CATCH, FOLLOW_CATCH_in_p_TryCatchHybrid16561);
                        if (state.failed) {
                            return retval;
                        }
                        if (state.backtracking == 0) {
                            k_tree = (XQDTCommonTree)adaptor.create(k);
                            adaptor.addChild(root_0, k_tree);
                        }
                        if (state.backtracking == 0) {
                            ak(k);
                        }
                        pushFollow(FOLLOW_p_CatchErrorList_in_p_TryCatchHybrid16565);
                        p_CatchErrorList770 = p_CatchErrorList();

                        state._fsp--;
                        if (state.failed) {
                            return retval;
                        }
                        if (state.backtracking == 0) {
                            adaptor.addChild(root_0, p_CatchErrorList770.getTree());
                        }
                        pushFollow(FOLLOW_p_BlockHybrid_in_p_TryCatchHybrid16567);
                        p_BlockHybrid771 = p_BlockHybrid(strict);

                        state._fsp--;
                        if (state.failed) {
                            return retval;
                        }
                        if (state.backtracking == 0) {
                            adaptor.addChild(root_0, p_BlockHybrid771.getTree());
                        }

                    }
                    break;

                    default:
                        if (cnt240 >= 1) {
                            break loop240;
                        }
                        if (state.backtracking > 0) {
                            state.failed = true;
                            return retval;
                        }
                        EarlyExitException eee = new EarlyExitException(240, input);
                        throw eee;
                    }
                    cnt240++;
                } while (true);

                if (state.backtracking == 0) {
                    ak(k);
                }

            }

            retval.stop = input.LT(-1);

            if (state.backtracking == 0) {

                retval.tree = (XQDTCommonTree)adaptor.rulePostProcessing(root_0);
                adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        } catch (RecognitionException re) {
            reportError(re);
            recover(input, re);
            retval.tree = (XQDTCommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        } finally {
        }
        return retval;
    }

    // $ANTLR end "p_TryCatchHybrid"

    public static class p_TypeswitchStatement_return extends ParserRuleReturnScope {
        XQDTCommonTree tree;

        public Object getTree() {
            return tree;
        }
    };

    // $ANTLR start "p_TypeswitchStatement"
    // XQueryParser.g:1914:1: p_TypeswitchStatement : k= TYPESWITCH LPAREN p_Expr[true,true] RPAREN ( p_CaseStatement )+ k= DEFAULT ( DOLLAR p_VarName )? k= RETURN p_Hybrid[false,false] ;
    public final XQueryParser.p_TypeswitchStatement_return p_TypeswitchStatement() throws RecognitionException {
        XQueryParser.p_TypeswitchStatement_return retval = new XQueryParser.p_TypeswitchStatement_return();
        retval.start = input.LT(1);

        XQDTCommonTree root_0 = null;

        CommonToken k = null;
        CommonToken LPAREN772 = null;
        CommonToken RPAREN774 = null;
        CommonToken DOLLAR776 = null;
        XQueryParser.p_Expr_return p_Expr773 = null;

        XQueryParser.p_CaseStatement_return p_CaseStatement775 = null;

        XQueryParser.p_VarName_return p_VarName777 = null;

        XQueryParser.p_Hybrid_return p_Hybrid778 = null;

        XQDTCommonTree k_tree = null;
        XQDTCommonTree LPAREN772_tree = null;
        XQDTCommonTree RPAREN774_tree = null;
        XQDTCommonTree DOLLAR776_tree = null;

        try {
            // XQueryParser.g:1915:9: (k= TYPESWITCH LPAREN p_Expr[true,true] RPAREN ( p_CaseStatement )+ k= DEFAULT ( DOLLAR p_VarName )? k= RETURN p_Hybrid[false,false] )
            // XQueryParser.g:1915:11: k= TYPESWITCH LPAREN p_Expr[true,true] RPAREN ( p_CaseStatement )+ k= DEFAULT ( DOLLAR p_VarName )? k= RETURN p_Hybrid[false,false]
            {
                root_0 = (XQDTCommonTree)adaptor.nil();

                k = (CommonToken)match(input, TYPESWITCH, FOLLOW_TYPESWITCH_in_p_TypeswitchStatement16600);
                if (state.failed) {
                    return retval;
                }
                if (state.backtracking == 0) {
                    k_tree = (XQDTCommonTree)adaptor.create(k);
                    adaptor.addChild(root_0, k_tree);
                }
                if (state.backtracking == 0) {
                    ak(k);
                }
                LPAREN772 = (CommonToken)match(input, LPAREN, FOLLOW_LPAREN_in_p_TypeswitchStatement16604);
                if (state.failed) {
                    return retval;
                }
                if (state.backtracking == 0) {
                    LPAREN772_tree = (XQDTCommonTree)adaptor.create(LPAREN772);
                    adaptor.addChild(root_0, LPAREN772_tree);
                }
                pushFollow(FOLLOW_p_Expr_in_p_TypeswitchStatement16606);
                p_Expr773 = p_Expr(true, true);

                state._fsp--;
                if (state.failed) {
                    return retval;
                }
                if (state.backtracking == 0) {
                    adaptor.addChild(root_0, p_Expr773.getTree());
                }
                RPAREN774 = (CommonToken)match(input, RPAREN, FOLLOW_RPAREN_in_p_TypeswitchStatement16609);
                if (state.failed) {
                    return retval;
                }
                if (state.backtracking == 0) {
                    RPAREN774_tree = (XQDTCommonTree)adaptor.create(RPAREN774);
                    adaptor.addChild(root_0, RPAREN774_tree);
                }
                // XQueryParser.g:1915:66: ( p_CaseStatement )+
                int cnt241 = 0;
                loop241: do {
                    int alt241 = 2;
                    int LA241_0 = input.LA(1);

                    if ((LA241_0 == CASE)) {
                        alt241 = 1;
                    }

                    switch (alt241) {
                    case 1:
                        // XQueryParser.g:1915:66: p_CaseStatement
                    {
                        pushFollow(FOLLOW_p_CaseStatement_in_p_TypeswitchStatement16611);
                        p_CaseStatement775 = p_CaseStatement();

                        state._fsp--;
                        if (state.failed) {
                            return retval;
                        }
                        if (state.backtracking == 0) {
                            adaptor.addChild(root_0, p_CaseStatement775.getTree());
                        }

                    }
                    break;

                    default:
                        if (cnt241 >= 1) {
                            break loop241;
                        }
                        if (state.backtracking > 0) {
                            state.failed = true;
                            return retval;
                        }
                        EarlyExitException eee = new EarlyExitException(241, input);
                        throw eee;
                    }
                    cnt241++;
                } while (true);

                k = (CommonToken)match(input, DEFAULT, FOLLOW_DEFAULT_in_p_TypeswitchStatement16616);
                if (state.failed) {
                    return retval;
                }
                if (state.backtracking == 0) {
                    k_tree = (XQDTCommonTree)adaptor.create(k);
                    adaptor.addChild(root_0, k_tree);
                }
                if (state.backtracking == 0) {
                    ak(k);
                }
                // XQueryParser.g:1915:103: ( DOLLAR p_VarName )?
                int alt242 = 2;
                int LA242_0 = input.LA(1);

                if ((LA242_0 == DOLLAR)) {
                    alt242 = 1;
                }
                switch (alt242) {
                case 1:
                    // XQueryParser.g:1915:104: DOLLAR p_VarName
                {
                    DOLLAR776 = (CommonToken)match(input, DOLLAR, FOLLOW_DOLLAR_in_p_TypeswitchStatement16621);
                    if (state.failed) {
                        return retval;
                    }
                    if (state.backtracking == 0) {
                        DOLLAR776_tree = (XQDTCommonTree)adaptor.create(DOLLAR776);
                        adaptor.addChild(root_0, DOLLAR776_tree);
                    }
                    pushFollow(FOLLOW_p_VarName_in_p_TypeswitchStatement16623);
                    p_VarName777 = p_VarName();

                    state._fsp--;
                    if (state.failed) {
                        return retval;
                    }
                    if (state.backtracking == 0) {
                        adaptor.addChild(root_0, p_VarName777.getTree());
                    }

                }
                    break;

                }

                k = (CommonToken)match(input, RETURN, FOLLOW_RETURN_in_p_TypeswitchStatement16629);
                if (state.failed) {
                    return retval;
                }
                if (state.backtracking == 0) {
                    k_tree = (XQDTCommonTree)adaptor.create(k);
                    adaptor.addChild(root_0, k_tree);
                }
                if (state.backtracking == 0) {
                    ak(k);
                }
                pushFollow(FOLLOW_p_Hybrid_in_p_TypeswitchStatement16633);
                p_Hybrid778 = p_Hybrid(false, false);

                state._fsp--;
                if (state.failed) {
                    return retval;
                }
                if (state.backtracking == 0) {
                    adaptor.addChild(root_0, p_Hybrid778.getTree());
                }

            }

            retval.stop = input.LT(-1);

            if (state.backtracking == 0) {

                retval.tree = (XQDTCommonTree)adaptor.rulePostProcessing(root_0);
                adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        } catch (RecognitionException re) {
            reportError(re);
            recover(input, re);
            retval.tree = (XQDTCommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        } finally {
        }
        return retval;
    }

    // $ANTLR end "p_TypeswitchStatement"

    public static class p_CaseStatement_return extends ParserRuleReturnScope {
        XQDTCommonTree tree;

        public Object getTree() {
            return tree;
        }
    };

    // $ANTLR start "p_CaseStatement"
    // XQueryParser.g:1919:1: p_CaseStatement : k= CASE ( DOLLAR p_VarName AS )? p_SequenceType k= RETURN p_Hybrid[false,false] ;
    public final XQueryParser.p_CaseStatement_return p_CaseStatement() throws RecognitionException {
        XQueryParser.p_CaseStatement_return retval = new XQueryParser.p_CaseStatement_return();
        retval.start = input.LT(1);

        XQDTCommonTree root_0 = null;

        CommonToken k = null;
        CommonToken DOLLAR779 = null;
        CommonToken AS781 = null;
        XQueryParser.p_VarName_return p_VarName780 = null;

        XQueryParser.p_SequenceType_return p_SequenceType782 = null;

        XQueryParser.p_Hybrid_return p_Hybrid783 = null;

        XQDTCommonTree k_tree = null;
        XQDTCommonTree DOLLAR779_tree = null;
        XQDTCommonTree AS781_tree = null;

        try {
            // XQueryParser.g:1920:9: (k= CASE ( DOLLAR p_VarName AS )? p_SequenceType k= RETURN p_Hybrid[false,false] )
            // XQueryParser.g:1920:11: k= CASE ( DOLLAR p_VarName AS )? p_SequenceType k= RETURN p_Hybrid[false,false]
            {
                root_0 = (XQDTCommonTree)adaptor.nil();

                k = (CommonToken)match(input, CASE, FOLLOW_CASE_in_p_CaseStatement16662);
                if (state.failed) {
                    return retval;
                }
                if (state.backtracking == 0) {
                    k_tree = (XQDTCommonTree)adaptor.create(k);
                    adaptor.addChild(root_0, k_tree);
                }
                if (state.backtracking == 0) {
                    ak(k);
                }
                // XQueryParser.g:1920:28: ( DOLLAR p_VarName AS )?
                int alt243 = 2;
                int LA243_0 = input.LA(1);

                if ((LA243_0 == DOLLAR)) {
                    alt243 = 1;
                }
                switch (alt243) {
                case 1:
                    // XQueryParser.g:1920:29: DOLLAR p_VarName AS
                {
                    DOLLAR779 = (CommonToken)match(input, DOLLAR, FOLLOW_DOLLAR_in_p_CaseStatement16667);
                    if (state.failed) {
                        return retval;
                    }
                    if (state.backtracking == 0) {
                        DOLLAR779_tree = (XQDTCommonTree)adaptor.create(DOLLAR779);
                        adaptor.addChild(root_0, DOLLAR779_tree);
                    }
                    pushFollow(FOLLOW_p_VarName_in_p_CaseStatement16669);
                    p_VarName780 = p_VarName();

                    state._fsp--;
                    if (state.failed) {
                        return retval;
                    }
                    if (state.backtracking == 0) {
                        adaptor.addChild(root_0, p_VarName780.getTree());
                    }
                    AS781 = (CommonToken)match(input, AS, FOLLOW_AS_in_p_CaseStatement16671);
                    if (state.failed) {
                        return retval;
                    }
                    if (state.backtracking == 0) {
                        AS781_tree = (XQDTCommonTree)adaptor.create(AS781);
                        adaptor.addChild(root_0, AS781_tree);
                    }

                }
                    break;

                }

                pushFollow(FOLLOW_p_SequenceType_in_p_CaseStatement16675);
                p_SequenceType782 = p_SequenceType();

                state._fsp--;
                if (state.failed) {
                    return retval;
                }
                if (state.backtracking == 0) {
                    adaptor.addChild(root_0, p_SequenceType782.getTree());
                }
                k = (CommonToken)match(input, RETURN, FOLLOW_RETURN_in_p_CaseStatement16679);
                if (state.failed) {
                    return retval;
                }
                if (state.backtracking == 0) {
                    k_tree = (XQDTCommonTree)adaptor.create(k);
                    adaptor.addChild(root_0, k_tree);
                }
                if (state.backtracking == 0) {
                    ak(k);
                }
                pushFollow(FOLLOW_p_Hybrid_in_p_CaseStatement16683);
                p_Hybrid783 = p_Hybrid(false, false);

                state._fsp--;
                if (state.failed) {
                    return retval;
                }
                if (state.backtracking == 0) {
                    adaptor.addChild(root_0, p_Hybrid783.getTree());
                }

            }

            retval.stop = input.LT(-1);

            if (state.backtracking == 0) {

                retval.tree = (XQDTCommonTree)adaptor.rulePostProcessing(root_0);
                adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        } catch (RecognitionException re) {
            reportError(re);
            recover(input, re);
            retval.tree = (XQDTCommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        } finally {
        }
        return retval;
    }

    // $ANTLR end "p_CaseStatement"

    public static class p_VarDeclStatement_return extends ParserRuleReturnScope {
        XQDTCommonTree tree;

        public Object getTree() {
            return tree;
        }
    };

    // $ANTLR start "p_VarDeclStatement"
    // XQueryParser.g:1924:1: p_VarDeclStatement : ( p_Annotation )* k= VARIABLE DOLLAR p_VarName ( p_TypeDeclaration )? ( BIND p_ExprSingle[true] )? ( COMMA DOLLAR p_VarName ( p_TypeDeclaration )? ( BIND p_ExprSingle[true] )? )* SEMICOLON ;
    public final XQueryParser.p_VarDeclStatement_return p_VarDeclStatement() throws RecognitionException {
        XQueryParser.p_VarDeclStatement_return retval = new XQueryParser.p_VarDeclStatement_return();
        retval.start = input.LT(1);

        XQDTCommonTree root_0 = null;

        CommonToken k = null;
        CommonToken DOLLAR785 = null;
        CommonToken BIND788 = null;
        CommonToken COMMA790 = null;
        CommonToken DOLLAR791 = null;
        CommonToken BIND794 = null;
        CommonToken SEMICOLON796 = null;
        XQueryParser.p_Annotation_return p_Annotation784 = null;

        XQueryParser.p_VarName_return p_VarName786 = null;

        XQueryParser.p_TypeDeclaration_return p_TypeDeclaration787 = null;

        XQueryParser.p_ExprSingle_return p_ExprSingle789 = null;

        XQueryParser.p_VarName_return p_VarName792 = null;

        XQueryParser.p_TypeDeclaration_return p_TypeDeclaration793 = null;

        XQueryParser.p_ExprSingle_return p_ExprSingle795 = null;

        XQDTCommonTree k_tree = null;
        XQDTCommonTree DOLLAR785_tree = null;
        XQDTCommonTree BIND788_tree = null;
        XQDTCommonTree COMMA790_tree = null;
        XQDTCommonTree DOLLAR791_tree = null;
        XQDTCommonTree BIND794_tree = null;
        XQDTCommonTree SEMICOLON796_tree = null;

        try {
            // XQueryParser.g:1925:9: ( ( p_Annotation )* k= VARIABLE DOLLAR p_VarName ( p_TypeDeclaration )? ( BIND p_ExprSingle[true] )? ( COMMA DOLLAR p_VarName ( p_TypeDeclaration )? ( BIND p_ExprSingle[true] )? )* SEMICOLON )
            // XQueryParser.g:1925:11: ( p_Annotation )* k= VARIABLE DOLLAR p_VarName ( p_TypeDeclaration )? ( BIND p_ExprSingle[true] )? ( COMMA DOLLAR p_VarName ( p_TypeDeclaration )? ( BIND p_ExprSingle[true] )? )* SEMICOLON
            {
                root_0 = (XQDTCommonTree)adaptor.nil();

                // XQueryParser.g:1925:11: ( p_Annotation )*
                loop244: do {
                    int alt244 = 2;
                    int LA244_0 = input.LA(1);

                    if ((LA244_0 == ANN_PERCENT)) {
                        alt244 = 1;
                    }

                    switch (alt244) {
                    case 1:
                        // XQueryParser.g:1925:11: p_Annotation
                    {
                        pushFollow(FOLLOW_p_Annotation_in_p_VarDeclStatement16710);
                        p_Annotation784 = p_Annotation();

                        state._fsp--;
                        if (state.failed) {
                            return retval;
                        }
                        if (state.backtracking == 0) {
                            adaptor.addChild(root_0, p_Annotation784.getTree());
                        }

                    }
                    break;

                    default:
                        break loop244;
                    }
                } while (true);

                k = (CommonToken)match(input, VARIABLE, FOLLOW_VARIABLE_in_p_VarDeclStatement16715);
                if (state.failed) {
                    return retval;
                }
                if (state.backtracking == 0) {
                    k_tree = (XQDTCommonTree)adaptor.create(k);
                    adaptor.addChild(root_0, k_tree);
                }
                if (state.backtracking == 0) {
                    ak(k);
                }
                DOLLAR785 = (CommonToken)match(input, DOLLAR, FOLLOW_DOLLAR_in_p_VarDeclStatement16719);
                if (state.failed) {
                    return retval;
                }
                if (state.backtracking == 0) {
                    DOLLAR785_tree = (XQDTCommonTree)adaptor.create(DOLLAR785);
                    adaptor.addChild(root_0, DOLLAR785_tree);
                }
                pushFollow(FOLLOW_p_VarName_in_p_VarDeclStatement16721);
                p_VarName786 = p_VarName();

                state._fsp--;
                if (state.failed) {
                    return retval;
                }
                if (state.backtracking == 0) {
                    adaptor.addChild(root_0, p_VarName786.getTree());
                }
                // XQueryParser.g:1925:63: ( p_TypeDeclaration )?
                int alt245 = 2;
                int LA245_0 = input.LA(1);

                if ((LA245_0 == AS)) {
                    alt245 = 1;
                }
                switch (alt245) {
                case 1:
                    // XQueryParser.g:1925:63: p_TypeDeclaration
                {
                    pushFollow(FOLLOW_p_TypeDeclaration_in_p_VarDeclStatement16723);
                    p_TypeDeclaration787 = p_TypeDeclaration();

                    state._fsp--;
                    if (state.failed) {
                        return retval;
                    }
                    if (state.backtracking == 0) {
                        adaptor.addChild(root_0, p_TypeDeclaration787.getTree());
                    }

                }
                    break;

                }

                // XQueryParser.g:1925:82: ( BIND p_ExprSingle[true] )?
                int alt246 = 2;
                int LA246_0 = input.LA(1);

                if ((LA246_0 == BIND)) {
                    alt246 = 1;
                }
                switch (alt246) {
                case 1:
                    // XQueryParser.g:1925:83: BIND p_ExprSingle[true]
                {
                    BIND788 = (CommonToken)match(input, BIND, FOLLOW_BIND_in_p_VarDeclStatement16727);
                    if (state.failed) {
                        return retval;
                    }
                    if (state.backtracking == 0) {
                        BIND788_tree = (XQDTCommonTree)adaptor.create(BIND788);
                        adaptor.addChild(root_0, BIND788_tree);
                    }
                    pushFollow(FOLLOW_p_ExprSingle_in_p_VarDeclStatement16729);
                    p_ExprSingle789 = p_ExprSingle(true);

                    state._fsp--;
                    if (state.failed) {
                        return retval;
                    }
                    if (state.backtracking == 0) {
                        adaptor.addChild(root_0, p_ExprSingle789.getTree());
                    }

                }
                    break;

                }

                // XQueryParser.g:1926:11: ( COMMA DOLLAR p_VarName ( p_TypeDeclaration )? ( BIND p_ExprSingle[true] )? )*
                loop249: do {
                    int alt249 = 2;
                    int LA249_0 = input.LA(1);

                    if ((LA249_0 == COMMA)) {
                        alt249 = 1;
                    }

                    switch (alt249) {
                    case 1:
                        // XQueryParser.g:1926:12: COMMA DOLLAR p_VarName ( p_TypeDeclaration )? ( BIND p_ExprSingle[true] )?
                    {
                        COMMA790 = (CommonToken)match(input, COMMA, FOLLOW_COMMA_in_p_VarDeclStatement16745);
                        if (state.failed) {
                            return retval;
                        }
                        if (state.backtracking == 0) {
                            COMMA790_tree = (XQDTCommonTree)adaptor.create(COMMA790);
                            adaptor.addChild(root_0, COMMA790_tree);
                        }
                        DOLLAR791 = (CommonToken)match(input, DOLLAR, FOLLOW_DOLLAR_in_p_VarDeclStatement16747);
                        if (state.failed) {
                            return retval;
                        }
                        if (state.backtracking == 0) {
                            DOLLAR791_tree = (XQDTCommonTree)adaptor.create(DOLLAR791);
                            adaptor.addChild(root_0, DOLLAR791_tree);
                        }
                        pushFollow(FOLLOW_p_VarName_in_p_VarDeclStatement16749);
                        p_VarName792 = p_VarName();

                        state._fsp--;
                        if (state.failed) {
                            return retval;
                        }
                        if (state.backtracking == 0) {
                            adaptor.addChild(root_0, p_VarName792.getTree());
                        }
                        // XQueryParser.g:1926:35: ( p_TypeDeclaration )?
                        int alt247 = 2;
                        int LA247_0 = input.LA(1);

                        if ((LA247_0 == AS)) {
                            alt247 = 1;
                        }
                        switch (alt247) {
                        case 1:
                            // XQueryParser.g:1926:35: p_TypeDeclaration
                        {
                            pushFollow(FOLLOW_p_TypeDeclaration_in_p_VarDeclStatement16751);
                            p_TypeDeclaration793 = p_TypeDeclaration();

                            state._fsp--;
                            if (state.failed) {
                                return retval;
                            }
                            if (state.backtracking == 0) {
                                adaptor.addChild(root_0, p_TypeDeclaration793.getTree());
                            }

                        }
                        break;

                        }

                        // XQueryParser.g:1926:54: ( BIND p_ExprSingle[true] )?
                        int alt248 = 2;
                        int LA248_0 = input.LA(1);

                        if ((LA248_0 == BIND)) {
                            alt248 = 1;
                        }
                        switch (alt248) {
                        case 1:
                            // XQueryParser.g:1926:55: BIND p_ExprSingle[true]
                        {
                            BIND794 = (CommonToken)match(input, BIND, FOLLOW_BIND_in_p_VarDeclStatement16755);
                            if (state.failed) {
                                return retval;
                            }
                            if (state.backtracking == 0) {
                                BIND794_tree = (XQDTCommonTree)adaptor.create(BIND794);
                                adaptor.addChild(root_0, BIND794_tree);
                            }
                            pushFollow(FOLLOW_p_ExprSingle_in_p_VarDeclStatement16757);
                            p_ExprSingle795 = p_ExprSingle(true);

                            state._fsp--;
                            if (state.failed) {
                                return retval;
                            }
                            if (state.backtracking == 0) {
                                adaptor.addChild(root_0, p_ExprSingle795.getTree());
                            }

                        }
                        break;

                        }

                    }
                    break;

                    default:
                        break loop249;
                    }
                } while (true);

                SEMICOLON796 = (CommonToken)match(input, SEMICOLON, FOLLOW_SEMICOLON_in_p_VarDeclStatement16774);
                if (state.failed) {
                    return retval;
                }
                if (state.backtracking == 0) {
                    SEMICOLON796_tree = (XQDTCommonTree)adaptor.create(SEMICOLON796);
                    adaptor.addChild(root_0, SEMICOLON796_tree);
                }

            }

            retval.stop = input.LT(-1);

            if (state.backtracking == 0) {

                retval.tree = (XQDTCommonTree)adaptor.rulePostProcessing(root_0);
                adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        } catch (RecognitionException re) {
            reportError(re);
            recover(input, re);
            retval.tree = (XQDTCommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        } finally {
        }
        return retval;
    }

    // $ANTLR end "p_VarDeclStatement"

    public static class p_WhileStatement_return extends ParserRuleReturnScope {
        XQDTCommonTree tree;

        public Object getTree() {
            return tree;
        }
    };

    // $ANTLR start "p_WhileStatement"
    // XQueryParser.g:1931:1: p_WhileStatement : k= WHILE LPAREN p_Expr[true,true] RPAREN p_Hybrid[false,false] ;
    public final XQueryParser.p_WhileStatement_return p_WhileStatement() throws RecognitionException {
        XQueryParser.p_WhileStatement_return retval = new XQueryParser.p_WhileStatement_return();
        retval.start = input.LT(1);

        XQDTCommonTree root_0 = null;

        CommonToken k = null;
        CommonToken LPAREN797 = null;
        CommonToken RPAREN799 = null;
        XQueryParser.p_Expr_return p_Expr798 = null;

        XQueryParser.p_Hybrid_return p_Hybrid800 = null;

        XQDTCommonTree k_tree = null;
        XQDTCommonTree LPAREN797_tree = null;
        XQDTCommonTree RPAREN799_tree = null;

        try {
            // XQueryParser.g:1932:9: (k= WHILE LPAREN p_Expr[true,true] RPAREN p_Hybrid[false,false] )
            // XQueryParser.g:1932:11: k= WHILE LPAREN p_Expr[true,true] RPAREN p_Hybrid[false,false]
            {
                root_0 = (XQDTCommonTree)adaptor.nil();

                k = (CommonToken)match(input, WHILE, FOLLOW_WHILE_in_p_WhileStatement16802);
                if (state.failed) {
                    return retval;
                }
                if (state.backtracking == 0) {
                    k_tree = (XQDTCommonTree)adaptor.create(k);
                    adaptor.addChild(root_0, k_tree);
                }
                if (state.backtracking == 0) {
                    ak(k);
                }
                LPAREN797 = (CommonToken)match(input, LPAREN, FOLLOW_LPAREN_in_p_WhileStatement16806);
                if (state.failed) {
                    return retval;
                }
                if (state.backtracking == 0) {
                    LPAREN797_tree = (XQDTCommonTree)adaptor.create(LPAREN797);
                    adaptor.addChild(root_0, LPAREN797_tree);
                }
                pushFollow(FOLLOW_p_Expr_in_p_WhileStatement16808);
                p_Expr798 = p_Expr(true, true);

                state._fsp--;
                if (state.failed) {
                    return retval;
                }
                if (state.backtracking == 0) {
                    adaptor.addChild(root_0, p_Expr798.getTree());
                }
                RPAREN799 = (CommonToken)match(input, RPAREN, FOLLOW_RPAREN_in_p_WhileStatement16811);
                if (state.failed) {
                    return retval;
                }
                if (state.backtracking == 0) {
                    RPAREN799_tree = (XQDTCommonTree)adaptor.create(RPAREN799);
                    adaptor.addChild(root_0, RPAREN799_tree);
                }
                pushFollow(FOLLOW_p_Hybrid_in_p_WhileStatement16813);
                p_Hybrid800 = p_Hybrid(false, false);

                state._fsp--;
                if (state.failed) {
                    return retval;
                }
                if (state.backtracking == 0) {
                    adaptor.addChild(root_0, p_Hybrid800.getTree());
                }

            }

            retval.stop = input.LT(-1);

            if (state.backtracking == 0) {

                retval.tree = (XQDTCommonTree)adaptor.rulePostProcessing(root_0);
                adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        } catch (RecognitionException re) {
            reportError(re);
            recover(input, re);
            retval.tree = (XQDTCommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        } finally {
        }
        return retval;
    }

    // $ANTLR end "p_WhileStatement"

    public static class p_ExprSimple_return extends ParserRuleReturnScope {
        XQDTCommonTree tree;

        public Object getTree() {
            return tree;
        }
    };

    // $ANTLR start "p_ExprSimple"
    // XQueryParser.g:1936:1: p_ExprSimple : ( p_QuantifiedExpr | p_OrExpr | {...}? => pg_UpdateExpr );
    public final XQueryParser.p_ExprSimple_return p_ExprSimple() throws RecognitionException {
        XQueryParser.p_ExprSimple_return retval = new XQueryParser.p_ExprSimple_return();
        retval.start = input.LT(1);

        XQDTCommonTree root_0 = null;

        XQueryParser.p_QuantifiedExpr_return p_QuantifiedExpr801 = null;

        XQueryParser.p_OrExpr_return p_OrExpr802 = null;

        XQueryParser.pg_UpdateExpr_return pg_UpdateExpr803 = null;

        try {
            // XQueryParser.g:1937:9: ( p_QuantifiedExpr | p_OrExpr | {...}? => pg_UpdateExpr )
            int alt250 = 3;
            alt250 = dfa250.predict(input);
            switch (alt250) {
            case 1:
                // XQueryParser.g:1937:11: p_QuantifiedExpr
            {
                root_0 = (XQDTCommonTree)adaptor.nil();

                pushFollow(FOLLOW_p_QuantifiedExpr_in_p_ExprSimple16840);
                p_QuantifiedExpr801 = p_QuantifiedExpr();

                state._fsp--;
                if (state.failed) {
                    return retval;
                }
                if (state.backtracking == 0) {
                    adaptor.addChild(root_0, p_QuantifiedExpr801.getTree());
                }

            }
            break;
            case 2:
                // XQueryParser.g:1938:11: p_OrExpr
            {
                root_0 = (XQDTCommonTree)adaptor.nil();

                pushFollow(FOLLOW_p_OrExpr_in_p_ExprSimple16852);
                p_OrExpr802 = p_OrExpr();

                state._fsp--;
                if (state.failed) {
                    return retval;
                }
                if (state.backtracking == 0) {
                    adaptor.addChild(root_0, p_OrExpr802.getTree());
                }

            }
            break;
            case 3:
                // XQueryParser.g:1939:11: {...}? => pg_UpdateExpr
            {
                root_0 = (XQDTCommonTree)adaptor.nil();

                if (!((lc(XQU)))) {
                    if (state.backtracking > 0) {
                        state.failed = true;
                        return retval;
                    }
                    throw new FailedPredicateException(input, "p_ExprSimple", "lc(XQU)");
                }
                pushFollow(FOLLOW_pg_UpdateExpr_in_p_ExprSimple16867);
                pg_UpdateExpr803 = pg_UpdateExpr();

                state._fsp--;
                if (state.failed) {
                    return retval;
                }
                if (state.backtracking == 0) {
                    adaptor.addChild(root_0, pg_UpdateExpr803.getTree());
                }

            }
            break;

            }
            retval.stop = input.LT(-1);

            if (state.backtracking == 0) {

                retval.tree = (XQDTCommonTree)adaptor.rulePostProcessing(root_0);
                adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        } catch (RecognitionException re) {
            reportError(re);
            recover(input, re);
            retval.tree = (XQDTCommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        } finally {
        }
        return retval;
    }

    // $ANTLR end "p_ExprSimple"

    public static class p_BlockExpr_return extends ParserRuleReturnScope {
        XQDTCommonTree tree;

        public Object getTree() {
            return tree;
        }
    };

    // $ANTLR start "p_BlockExpr"
    // XQueryParser.g:1943:1: p_BlockExpr : LBRACKET p_StatementsAndExpr RBRACKET ;
    public final XQueryParser.p_BlockExpr_return p_BlockExpr() throws RecognitionException {
        XQueryParser.p_BlockExpr_return retval = new XQueryParser.p_BlockExpr_return();
        retval.start = input.LT(1);

        XQDTCommonTree root_0 = null;

        CommonToken LBRACKET804 = null;
        CommonToken RBRACKET806 = null;
        XQueryParser.p_StatementsAndExpr_return p_StatementsAndExpr805 = null;

        XQDTCommonTree LBRACKET804_tree = null;
        XQDTCommonTree RBRACKET806_tree = null;

        try {
            // XQueryParser.g:1944:9: ( LBRACKET p_StatementsAndExpr RBRACKET )
            // XQueryParser.g:1944:11: LBRACKET p_StatementsAndExpr RBRACKET
            {
                root_0 = (XQDTCommonTree)adaptor.nil();

                LBRACKET804 = (CommonToken)match(input, LBRACKET, FOLLOW_LBRACKET_in_p_BlockExpr16893);
                if (state.failed) {
                    return retval;
                }
                if (state.backtracking == 0) {
                    LBRACKET804_tree = (XQDTCommonTree)adaptor.create(LBRACKET804);
                    adaptor.addChild(root_0, LBRACKET804_tree);
                }
                pushFollow(FOLLOW_p_StatementsAndExpr_in_p_BlockExpr16895);
                p_StatementsAndExpr805 = p_StatementsAndExpr();

                state._fsp--;
                if (state.failed) {
                    return retval;
                }
                if (state.backtracking == 0) {
                    adaptor.addChild(root_0, p_StatementsAndExpr805.getTree());
                }
                RBRACKET806 = (CommonToken)match(input, RBRACKET, FOLLOW_RBRACKET_in_p_BlockExpr16897);
                if (state.failed) {
                    return retval;
                }
                if (state.backtracking == 0) {
                    RBRACKET806_tree = (XQDTCommonTree)adaptor.create(RBRACKET806);
                    adaptor.addChild(root_0, RBRACKET806_tree);
                }

            }

            retval.stop = input.LT(-1);

            if (state.backtracking == 0) {

                retval.tree = (XQDTCommonTree)adaptor.rulePostProcessing(root_0);
                adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        } catch (RecognitionException re) {
            reportError(re);
            recover(input, re);
            retval.tree = (XQDTCommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        } finally {
        }
        return retval;
    }

    // $ANTLR end "p_BlockExpr"

    public static class p_CollectionDecl_return extends ParserRuleReturnScope {
        XQDTCommonTree tree;

        public Object getTree() {
            return tree;
        }
    };

    // $ANTLR start "p_CollectionDecl"
    // XQueryParser.g:1951:1: p_CollectionDecl : k= COLLECTION p_QName ( p_CollectionTypeDecl )? ;
    public final XQueryParser.p_CollectionDecl_return p_CollectionDecl() throws RecognitionException {
        XQueryParser.p_CollectionDecl_return retval = new XQueryParser.p_CollectionDecl_return();
        retval.start = input.LT(1);

        XQDTCommonTree root_0 = null;

        CommonToken k = null;
        XQueryParser.p_QName_return p_QName807 = null;

        XQueryParser.p_CollectionTypeDecl_return p_CollectionTypeDecl808 = null;

        XQDTCommonTree k_tree = null;

        try {
            // XQueryParser.g:1952:9: (k= COLLECTION p_QName ( p_CollectionTypeDecl )? )
            // XQueryParser.g:1952:11: k= COLLECTION p_QName ( p_CollectionTypeDecl )?
            {
                root_0 = (XQDTCommonTree)adaptor.nil();

                k = (CommonToken)match(input, COLLECTION, FOLLOW_COLLECTION_in_p_CollectionDecl16928);
                if (state.failed) {
                    return retval;
                }
                if (state.backtracking == 0) {
                    k_tree = (XQDTCommonTree)adaptor.create(k);
                    adaptor.addChild(root_0, k_tree);
                }
                if (state.backtracking == 0) {
                    ak(k);
                }
                pushFollow(FOLLOW_p_QName_in_p_CollectionDecl16932);
                p_QName807 = p_QName();

                state._fsp--;
                if (state.failed) {
                    return retval;
                }
                if (state.backtracking == 0) {
                    adaptor.addChild(root_0, p_QName807.getTree());
                }
                // XQueryParser.g:1952:42: ( p_CollectionTypeDecl )?
                int alt251 = 2;
                int LA251_0 = input.LA(1);

                if ((LA251_0 == AS)) {
                    alt251 = 1;
                }
                switch (alt251) {
                case 1:
                    // XQueryParser.g:1952:42: p_CollectionTypeDecl
                {
                    pushFollow(FOLLOW_p_CollectionTypeDecl_in_p_CollectionDecl16934);
                    p_CollectionTypeDecl808 = p_CollectionTypeDecl();

                    state._fsp--;
                    if (state.failed) {
                        return retval;
                    }
                    if (state.backtracking == 0) {
                        adaptor.addChild(root_0, p_CollectionTypeDecl808.getTree());
                    }

                }
                    break;

                }

            }

            retval.stop = input.LT(-1);

            if (state.backtracking == 0) {

                retval.tree = (XQDTCommonTree)adaptor.rulePostProcessing(root_0);
                adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        } catch (RecognitionException re) {
            reportError(re);
            recover(input, re);
            retval.tree = (XQDTCommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        } finally {
        }
        return retval;
    }

    // $ANTLR end "p_CollectionDecl"

    public static class p_CollectionTypeDecl_return extends ParserRuleReturnScope {
        XQDTCommonTree tree;

        public Object getTree() {
            return tree;
        }
    };

    // $ANTLR start "p_CollectionTypeDecl"
    // XQueryParser.g:1955:1: p_CollectionTypeDecl : (k= AS p_KindTest ( ( p_OccurrenceIndicator )=> p_OccurrenceIndicator )? ) ;
    public final XQueryParser.p_CollectionTypeDecl_return p_CollectionTypeDecl() throws RecognitionException {
        XQueryParser.p_CollectionTypeDecl_return retval = new XQueryParser.p_CollectionTypeDecl_return();
        retval.start = input.LT(1);

        XQDTCommonTree root_0 = null;

        CommonToken k = null;
        XQueryParser.p_KindTest_return p_KindTest809 = null;

        XQueryParser.p_OccurrenceIndicator_return p_OccurrenceIndicator810 = null;

        XQDTCommonTree k_tree = null;

        try {
            // XQueryParser.g:1956:9: ( (k= AS p_KindTest ( ( p_OccurrenceIndicator )=> p_OccurrenceIndicator )? ) )
            // XQueryParser.g:1956:11: (k= AS p_KindTest ( ( p_OccurrenceIndicator )=> p_OccurrenceIndicator )? )
            {
                root_0 = (XQDTCommonTree)adaptor.nil();

                // XQueryParser.g:1956:11: (k= AS p_KindTest ( ( p_OccurrenceIndicator )=> p_OccurrenceIndicator )? )
                // XQueryParser.g:1956:12: k= AS p_KindTest ( ( p_OccurrenceIndicator )=> p_OccurrenceIndicator )?
                {
                    k = (CommonToken)match(input, AS, FOLLOW_AS_in_p_CollectionTypeDecl16963);
                    if (state.failed) {
                        return retval;
                    }
                    if (state.backtracking == 0) {
                        k_tree = (XQDTCommonTree)adaptor.create(k);
                        adaptor.addChild(root_0, k_tree);
                    }
                    if (state.backtracking == 0) {
                        ak(k);
                    }
                    pushFollow(FOLLOW_p_KindTest_in_p_CollectionTypeDecl16967);
                    p_KindTest809 = p_KindTest();

                    state._fsp--;
                    if (state.failed) {
                        return retval;
                    }
                    if (state.backtracking == 0) {
                        adaptor.addChild(root_0, p_KindTest809.getTree());
                    }
                    // XQueryParser.g:1956:38: ( ( p_OccurrenceIndicator )=> p_OccurrenceIndicator )?
                    int alt252 = 2;
                    int LA252_0 = input.LA(1);

                    if (((LA252_0 >= QUESTION && LA252_0 <= PLUS)) && (synpred18_XQueryParser())) {
                        alt252 = 1;
                    }
                    switch (alt252) {
                    case 1:
                    // XQueryParser.g:1956:39: ( p_OccurrenceIndicator )=> p_OccurrenceIndicator
                    {
                        pushFollow(FOLLOW_p_OccurrenceIndicator_in_p_CollectionTypeDecl16976);
                        p_OccurrenceIndicator810 = p_OccurrenceIndicator();

                        state._fsp--;
                        if (state.failed) {
                            return retval;
                        }
                        if (state.backtracking == 0) {
                            adaptor.addChild(root_0, p_OccurrenceIndicator810.getTree());
                        }

                    }
                    break;

                    }

                }

            }

            retval.stop = input.LT(-1);

            if (state.backtracking == 0) {

                retval.tree = (XQDTCommonTree)adaptor.rulePostProcessing(root_0);
                adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        } catch (RecognitionException re) {
            reportError(re);
            recover(input, re);
            retval.tree = (XQDTCommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        } finally {
        }
        return retval;
    }

    // $ANTLR end "p_CollectionTypeDecl"

    public static class p_IndexDecl_return extends ParserRuleReturnScope {
        XQDTCommonTree tree;

        public Object getTree() {
            return tree;
        }
    };

    // $ANTLR start "p_IndexDecl"
    // XQueryParser.g:1959:1: p_IndexDecl : k= INDEX p_IndexName k= ON k= NODES p_IndexDomainExpr k= BY p_IndexKeySpec ( COMMA p_IndexKeySpec )* ;
    public final XQueryParser.p_IndexDecl_return p_IndexDecl() throws RecognitionException {
        XQueryParser.p_IndexDecl_return retval = new XQueryParser.p_IndexDecl_return();
        retval.start = input.LT(1);

        XQDTCommonTree root_0 = null;

        CommonToken k = null;
        CommonToken COMMA814 = null;
        XQueryParser.p_IndexName_return p_IndexName811 = null;

        XQueryParser.p_IndexDomainExpr_return p_IndexDomainExpr812 = null;

        XQueryParser.p_IndexKeySpec_return p_IndexKeySpec813 = null;

        XQueryParser.p_IndexKeySpec_return p_IndexKeySpec815 = null;

        XQDTCommonTree k_tree = null;
        XQDTCommonTree COMMA814_tree = null;

        try {
            // XQueryParser.g:1960:9: (k= INDEX p_IndexName k= ON k= NODES p_IndexDomainExpr k= BY p_IndexKeySpec ( COMMA p_IndexKeySpec )* )
            // XQueryParser.g:1960:11: k= INDEX p_IndexName k= ON k= NODES p_IndexDomainExpr k= BY p_IndexKeySpec ( COMMA p_IndexKeySpec )*
            {
                root_0 = (XQDTCommonTree)adaptor.nil();

                k = (CommonToken)match(input, INDEX, FOLLOW_INDEX_in_p_IndexDecl17006);
                if (state.failed) {
                    return retval;
                }
                if (state.backtracking == 0) {
                    k_tree = (XQDTCommonTree)adaptor.create(k);
                    adaptor.addChild(root_0, k_tree);
                }
                if (state.backtracking == 0) {
                    ak(k);
                }
                pushFollow(FOLLOW_p_IndexName_in_p_IndexDecl17010);
                p_IndexName811 = p_IndexName();

                state._fsp--;
                if (state.failed) {
                    return retval;
                }
                if (state.backtracking == 0) {
                    adaptor.addChild(root_0, p_IndexName811.getTree());
                }
                k = (CommonToken)match(input, ON, FOLLOW_ON_in_p_IndexDecl17014);
                if (state.failed) {
                    return retval;
                }
                if (state.backtracking == 0) {
                    k_tree = (XQDTCommonTree)adaptor.create(k);
                    adaptor.addChild(root_0, k_tree);
                }
                if (state.backtracking == 0) {
                    ak(k);
                }
                k = (CommonToken)match(input, NODES, FOLLOW_NODES_in_p_IndexDecl17020);
                if (state.failed) {
                    return retval;
                }
                if (state.backtracking == 0) {
                    k_tree = (XQDTCommonTree)adaptor.create(k);
                    adaptor.addChild(root_0, k_tree);
                }
                if (state.backtracking == 0) {
                    ak(k);
                }
                pushFollow(FOLLOW_p_IndexDomainExpr_in_p_IndexDecl17024);
                p_IndexDomainExpr812 = p_IndexDomainExpr();

                state._fsp--;
                if (state.failed) {
                    return retval;
                }
                if (state.backtracking == 0) {
                    adaptor.addChild(root_0, p_IndexDomainExpr812.getTree());
                }
                k = (CommonToken)match(input, BY, FOLLOW_BY_in_p_IndexDecl17028);
                if (state.failed) {
                    return retval;
                }
                if (state.backtracking == 0) {
                    k_tree = (XQDTCommonTree)adaptor.create(k);
                    adaptor.addChild(root_0, k_tree);
                }
                if (state.backtracking == 0) {
                    ak(k);
                }
                pushFollow(FOLLOW_p_IndexKeySpec_in_p_IndexDecl17032);
                p_IndexKeySpec813 = p_IndexKeySpec();

                state._fsp--;
                if (state.failed) {
                    return retval;
                }
                if (state.backtracking == 0) {
                    adaptor.addChild(root_0, p_IndexKeySpec813.getTree());
                }
                // XQueryParser.g:1960:122: ( COMMA p_IndexKeySpec )*
                loop253: do {
                    int alt253 = 2;
                    int LA253_0 = input.LA(1);

                    if ((LA253_0 == COMMA)) {
                        alt253 = 1;
                    }

                    switch (alt253) {
                    case 1:
                        // XQueryParser.g:1960:123: COMMA p_IndexKeySpec
                    {
                        COMMA814 = (CommonToken)match(input, COMMA, FOLLOW_COMMA_in_p_IndexDecl17035);
                        if (state.failed) {
                            return retval;
                        }
                        if (state.backtracking == 0) {
                            COMMA814_tree = (XQDTCommonTree)adaptor.create(COMMA814);
                            adaptor.addChild(root_0, COMMA814_tree);
                        }
                        pushFollow(FOLLOW_p_IndexKeySpec_in_p_IndexDecl17037);
                        p_IndexKeySpec815 = p_IndexKeySpec();

                        state._fsp--;
                        if (state.failed) {
                            return retval;
                        }
                        if (state.backtracking == 0) {
                            adaptor.addChild(root_0, p_IndexKeySpec815.getTree());
                        }

                    }
                    break;

                    default:
                        break loop253;
                    }
                } while (true);

            }

            retval.stop = input.LT(-1);

            if (state.backtracking == 0) {

                retval.tree = (XQDTCommonTree)adaptor.rulePostProcessing(root_0);
                adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        } catch (RecognitionException re) {
            reportError(re);
            recover(input, re);
            retval.tree = (XQDTCommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        } finally {
        }
        return retval;
    }

    // $ANTLR end "p_IndexDecl"

    public static class p_IndexName_return extends ParserRuleReturnScope {
        XQDTCommonTree tree;

        public Object getTree() {
            return tree;
        }
    };

    // $ANTLR start "p_IndexName"
    // XQueryParser.g:1963:1: p_IndexName : p_QName ;
    public final XQueryParser.p_IndexName_return p_IndexName() throws RecognitionException {
        XQueryParser.p_IndexName_return retval = new XQueryParser.p_IndexName_return();
        retval.start = input.LT(1);

        XQDTCommonTree root_0 = null;

        XQueryParser.p_QName_return p_QName816 = null;

        try {
            // XQueryParser.g:1964:9: ( p_QName )
            // XQueryParser.g:1964:11: p_QName
            {
                root_0 = (XQDTCommonTree)adaptor.nil();

                pushFollow(FOLLOW_p_QName_in_p_IndexName17064);
                p_QName816 = p_QName();

                state._fsp--;
                if (state.failed) {
                    return retval;
                }
                if (state.backtracking == 0) {
                    adaptor.addChild(root_0, p_QName816.getTree());
                }

            }

            retval.stop = input.LT(-1);

            if (state.backtracking == 0) {

                retval.tree = (XQDTCommonTree)adaptor.rulePostProcessing(root_0);
                adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        } catch (RecognitionException re) {
            reportError(re);
            recover(input, re);
            retval.tree = (XQDTCommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        } finally {
        }
        return retval;
    }

    // $ANTLR end "p_IndexName"

    public static class p_IndexDomainExpr_return extends ParserRuleReturnScope {
        XQDTCommonTree tree;

        public Object getTree() {
            return tree;
        }
    };

    // $ANTLR start "p_IndexDomainExpr"
    // XQueryParser.g:1967:1: p_IndexDomainExpr : p_PathExpr ;
    public final XQueryParser.p_IndexDomainExpr_return p_IndexDomainExpr() throws RecognitionException {
        XQueryParser.p_IndexDomainExpr_return retval = new XQueryParser.p_IndexDomainExpr_return();
        retval.start = input.LT(1);

        XQDTCommonTree root_0 = null;

        XQueryParser.p_PathExpr_return p_PathExpr817 = null;

        try {
            // XQueryParser.g:1968:9: ( p_PathExpr )
            // XQueryParser.g:1968:11: p_PathExpr
            {
                root_0 = (XQDTCommonTree)adaptor.nil();

                pushFollow(FOLLOW_p_PathExpr_in_p_IndexDomainExpr17089);
                p_PathExpr817 = p_PathExpr();

                state._fsp--;
                if (state.failed) {
                    return retval;
                }
                if (state.backtracking == 0) {
                    adaptor.addChild(root_0, p_PathExpr817.getTree());
                }

            }

            retval.stop = input.LT(-1);

            if (state.backtracking == 0) {

                retval.tree = (XQDTCommonTree)adaptor.rulePostProcessing(root_0);
                adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        } catch (RecognitionException re) {
            reportError(re);
            recover(input, re);
            retval.tree = (XQDTCommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        } finally {
        }
        return retval;
    }

    // $ANTLR end "p_IndexDomainExpr"

    public static class p_IndexKeySpec_return extends ParserRuleReturnScope {
        XQDTCommonTree tree;

        public Object getTree() {
            return tree;
        }
    };

    // $ANTLR start "p_IndexKeySpec"
    // XQueryParser.g:1971:1: p_IndexKeySpec : p_IndexKeyExpr ( p_IndexKeyTypeDecl )? ( p_IndexKeyCollation )? ;
    public final XQueryParser.p_IndexKeySpec_return p_IndexKeySpec() throws RecognitionException {
        XQueryParser.p_IndexKeySpec_return retval = new XQueryParser.p_IndexKeySpec_return();
        retval.start = input.LT(1);

        XQDTCommonTree root_0 = null;

        XQueryParser.p_IndexKeyExpr_return p_IndexKeyExpr818 = null;

        XQueryParser.p_IndexKeyTypeDecl_return p_IndexKeyTypeDecl819 = null;

        XQueryParser.p_IndexKeyCollation_return p_IndexKeyCollation820 = null;

        try {
            // XQueryParser.g:1972:9: ( p_IndexKeyExpr ( p_IndexKeyTypeDecl )? ( p_IndexKeyCollation )? )
            // XQueryParser.g:1972:11: p_IndexKeyExpr ( p_IndexKeyTypeDecl )? ( p_IndexKeyCollation )?
            {
                root_0 = (XQDTCommonTree)adaptor.nil();

                pushFollow(FOLLOW_p_IndexKeyExpr_in_p_IndexKeySpec17114);
                p_IndexKeyExpr818 = p_IndexKeyExpr();

                state._fsp--;
                if (state.failed) {
                    return retval;
                }
                if (state.backtracking == 0) {
                    adaptor.addChild(root_0, p_IndexKeyExpr818.getTree());
                }
                // XQueryParser.g:1972:26: ( p_IndexKeyTypeDecl )?
                int alt254 = 2;
                int LA254_0 = input.LA(1);

                if ((LA254_0 == AS)) {
                    alt254 = 1;
                }
                switch (alt254) {
                case 1:
                    // XQueryParser.g:1972:26: p_IndexKeyTypeDecl
                {
                    pushFollow(FOLLOW_p_IndexKeyTypeDecl_in_p_IndexKeySpec17116);
                    p_IndexKeyTypeDecl819 = p_IndexKeyTypeDecl();

                    state._fsp--;
                    if (state.failed) {
                        return retval;
                    }
                    if (state.backtracking == 0) {
                        adaptor.addChild(root_0, p_IndexKeyTypeDecl819.getTree());
                    }

                }
                    break;

                }

                // XQueryParser.g:1972:46: ( p_IndexKeyCollation )?
                int alt255 = 2;
                int LA255_0 = input.LA(1);

                if ((LA255_0 == COLLATION)) {
                    alt255 = 1;
                }
                switch (alt255) {
                case 1:
                    // XQueryParser.g:1972:46: p_IndexKeyCollation
                {
                    pushFollow(FOLLOW_p_IndexKeyCollation_in_p_IndexKeySpec17119);
                    p_IndexKeyCollation820 = p_IndexKeyCollation();

                    state._fsp--;
                    if (state.failed) {
                        return retval;
                    }
                    if (state.backtracking == 0) {
                        adaptor.addChild(root_0, p_IndexKeyCollation820.getTree());
                    }

                }
                    break;

                }

            }

            retval.stop = input.LT(-1);

            if (state.backtracking == 0) {

                retval.tree = (XQDTCommonTree)adaptor.rulePostProcessing(root_0);
                adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        } catch (RecognitionException re) {
            reportError(re);
            recover(input, re);
            retval.tree = (XQDTCommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        } finally {
        }
        return retval;
    }

    // $ANTLR end "p_IndexKeySpec"

    public static class p_IndexKeyExpr_return extends ParserRuleReturnScope {
        XQDTCommonTree tree;

        public Object getTree() {
            return tree;
        }
    };

    // $ANTLR start "p_IndexKeyExpr"
    // XQueryParser.g:1975:1: p_IndexKeyExpr : p_PathExpr ;
    public final XQueryParser.p_IndexKeyExpr_return p_IndexKeyExpr() throws RecognitionException {
        XQueryParser.p_IndexKeyExpr_return retval = new XQueryParser.p_IndexKeyExpr_return();
        retval.start = input.LT(1);

        XQDTCommonTree root_0 = null;

        XQueryParser.p_PathExpr_return p_PathExpr821 = null;

        try {
            // XQueryParser.g:1976:9: ( p_PathExpr )
            // XQueryParser.g:1976:11: p_PathExpr
            {
                root_0 = (XQDTCommonTree)adaptor.nil();

                pushFollow(FOLLOW_p_PathExpr_in_p_IndexKeyExpr17145);
                p_PathExpr821 = p_PathExpr();

                state._fsp--;
                if (state.failed) {
                    return retval;
                }
                if (state.backtracking == 0) {
                    adaptor.addChild(root_0, p_PathExpr821.getTree());
                }

            }

            retval.stop = input.LT(-1);

            if (state.backtracking == 0) {

                retval.tree = (XQDTCommonTree)adaptor.rulePostProcessing(root_0);
                adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        } catch (RecognitionException re) {
            reportError(re);
            recover(input, re);
            retval.tree = (XQDTCommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        } finally {
        }
        return retval;
    }

    // $ANTLR end "p_IndexKeyExpr"

    public static class p_IndexKeyTypeDecl_return extends ParserRuleReturnScope {
        XQDTCommonTree tree;

        public Object getTree() {
            return tree;
        }
    };

    // $ANTLR start "p_IndexKeyTypeDecl"
    // XQueryParser.g:1979:1: p_IndexKeyTypeDecl : k= AS p_AtomicType ( p_OccurrenceIndicator )? ;
    public final XQueryParser.p_IndexKeyTypeDecl_return p_IndexKeyTypeDecl() throws RecognitionException {
        XQueryParser.p_IndexKeyTypeDecl_return retval = new XQueryParser.p_IndexKeyTypeDecl_return();
        retval.start = input.LT(1);

        XQDTCommonTree root_0 = null;

        CommonToken k = null;
        XQueryParser.p_AtomicType_return p_AtomicType822 = null;

        XQueryParser.p_OccurrenceIndicator_return p_OccurrenceIndicator823 = null;

        XQDTCommonTree k_tree = null;

        try {
            // XQueryParser.g:1980:9: (k= AS p_AtomicType ( p_OccurrenceIndicator )? )
            // XQueryParser.g:1980:11: k= AS p_AtomicType ( p_OccurrenceIndicator )?
            {
                root_0 = (XQDTCommonTree)adaptor.nil();

                k = (CommonToken)match(input, AS, FOLLOW_AS_in_p_IndexKeyTypeDecl17172);
                if (state.failed) {
                    return retval;
                }
                if (state.backtracking == 0) {
                    k_tree = (XQDTCommonTree)adaptor.create(k);
                    adaptor.addChild(root_0, k_tree);
                }
                if (state.backtracking == 0) {
                    ak(k);
                }
                pushFollow(FOLLOW_p_AtomicType_in_p_IndexKeyTypeDecl17176);
                p_AtomicType822 = p_AtomicType();

                state._fsp--;
                if (state.failed) {
                    return retval;
                }
                if (state.backtracking == 0) {
                    adaptor.addChild(root_0, p_AtomicType822.getTree());
                }
                // XQueryParser.g:1980:39: ( p_OccurrenceIndicator )?
                int alt256 = 2;
                int LA256_0 = input.LA(1);

                if (((LA256_0 >= QUESTION && LA256_0 <= PLUS))) {
                    alt256 = 1;
                }
                switch (alt256) {
                case 1:
                    // XQueryParser.g:1980:39: p_OccurrenceIndicator
                {
                    pushFollow(FOLLOW_p_OccurrenceIndicator_in_p_IndexKeyTypeDecl17178);
                    p_OccurrenceIndicator823 = p_OccurrenceIndicator();

                    state._fsp--;
                    if (state.failed) {
                        return retval;
                    }
                    if (state.backtracking == 0) {
                        adaptor.addChild(root_0, p_OccurrenceIndicator823.getTree());
                    }

                }
                    break;

                }

            }

            retval.stop = input.LT(-1);

            if (state.backtracking == 0) {

                retval.tree = (XQDTCommonTree)adaptor.rulePostProcessing(root_0);
                adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        } catch (RecognitionException re) {
            reportError(re);
            recover(input, re);
            retval.tree = (XQDTCommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        } finally {
        }
        return retval;
    }

    // $ANTLR end "p_IndexKeyTypeDecl"

    public static class p_AtomicType_return extends ParserRuleReturnScope {
        XQDTCommonTree tree;

        public Object getTree() {
            return tree;
        }
    };

    // $ANTLR start "p_AtomicType"
    // XQueryParser.g:1983:1: p_AtomicType : p_QName ;
    public final XQueryParser.p_AtomicType_return p_AtomicType() throws RecognitionException {
        XQueryParser.p_AtomicType_return retval = new XQueryParser.p_AtomicType_return();
        retval.start = input.LT(1);

        XQDTCommonTree root_0 = null;

        XQueryParser.p_QName_return p_QName824 = null;

        try {
            // XQueryParser.g:1984:9: ( p_QName )
            // XQueryParser.g:1984:11: p_QName
            {
                root_0 = (XQDTCommonTree)adaptor.nil();

                pushFollow(FOLLOW_p_QName_in_p_AtomicType17204);
                p_QName824 = p_QName();

                state._fsp--;
                if (state.failed) {
                    return retval;
                }
                if (state.backtracking == 0) {
                    adaptor.addChild(root_0, p_QName824.getTree());
                }

            }

            retval.stop = input.LT(-1);

            if (state.backtracking == 0) {

                retval.tree = (XQDTCommonTree)adaptor.rulePostProcessing(root_0);
                adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        } catch (RecognitionException re) {
            reportError(re);
            recover(input, re);
            retval.tree = (XQDTCommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        } finally {
        }
        return retval;
    }

    // $ANTLR end "p_AtomicType"

    public static class p_IndexKeyCollation_return extends ParserRuleReturnScope {
        XQDTCommonTree tree;

        public Object getTree() {
            return tree;
        }
    };

    // $ANTLR start "p_IndexKeyCollation"
    // XQueryParser.g:1987:1: p_IndexKeyCollation : k= COLLATION p_StringLiteral ;
    public final XQueryParser.p_IndexKeyCollation_return p_IndexKeyCollation() throws RecognitionException {
        XQueryParser.p_IndexKeyCollation_return retval = new XQueryParser.p_IndexKeyCollation_return();
        retval.start = input.LT(1);

        XQDTCommonTree root_0 = null;

        CommonToken k = null;
        XQueryParser.p_StringLiteral_return p_StringLiteral825 = null;

        XQDTCommonTree k_tree = null;

        try {
            // XQueryParser.g:1988:9: (k= COLLATION p_StringLiteral )
            // XQueryParser.g:1988:11: k= COLLATION p_StringLiteral
            {
                root_0 = (XQDTCommonTree)adaptor.nil();

                k = (CommonToken)match(input, COLLATION, FOLLOW_COLLATION_in_p_IndexKeyCollation17231);
                if (state.failed) {
                    return retval;
                }
                if (state.backtracking == 0) {
                    k_tree = (XQDTCommonTree)adaptor.create(k);
                    adaptor.addChild(root_0, k_tree);
                }
                if (state.backtracking == 0) {
                    ak(k);
                }
                pushFollow(FOLLOW_p_StringLiteral_in_p_IndexKeyCollation17235);
                p_StringLiteral825 = p_StringLiteral();

                state._fsp--;
                if (state.failed) {
                    return retval;
                }
                if (state.backtracking == 0) {
                    adaptor.addChild(root_0, p_StringLiteral825.getTree());
                }

            }

            retval.stop = input.LT(-1);

            if (state.backtracking == 0) {

                retval.tree = (XQDTCommonTree)adaptor.rulePostProcessing(root_0);
                adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        } catch (RecognitionException re) {
            reportError(re);
            recover(input, re);
            retval.tree = (XQDTCommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        } finally {
        }
        return retval;
    }

    // $ANTLR end "p_IndexKeyCollation"

    public static class p_ICDecl_return extends ParserRuleReturnScope {
        XQDTCommonTree tree;

        public Object getTree() {
            return tree;
        }
    };

    // $ANTLR start "p_ICDecl"
    // XQueryParser.g:1991:1: p_ICDecl : k= INTEGRITY k= CONSTRAINT p_QName ( p_ICCollection | p_ICForeignKey ) ;
    public final XQueryParser.p_ICDecl_return p_ICDecl() throws RecognitionException {
        XQueryParser.p_ICDecl_return retval = new XQueryParser.p_ICDecl_return();
        retval.start = input.LT(1);

        XQDTCommonTree root_0 = null;

        CommonToken k = null;
        XQueryParser.p_QName_return p_QName826 = null;

        XQueryParser.p_ICCollection_return p_ICCollection827 = null;

        XQueryParser.p_ICForeignKey_return p_ICForeignKey828 = null;

        XQDTCommonTree k_tree = null;

        try {
            // XQueryParser.g:1992:9: (k= INTEGRITY k= CONSTRAINT p_QName ( p_ICCollection | p_ICForeignKey ) )
            // XQueryParser.g:1992:11: k= INTEGRITY k= CONSTRAINT p_QName ( p_ICCollection | p_ICForeignKey )
            {
                root_0 = (XQDTCommonTree)adaptor.nil();

                k = (CommonToken)match(input, INTEGRITY, FOLLOW_INTEGRITY_in_p_ICDecl17262);
                if (state.failed) {
                    return retval;
                }
                if (state.backtracking == 0) {
                    k_tree = (XQDTCommonTree)adaptor.create(k);
                    adaptor.addChild(root_0, k_tree);
                }
                if (state.backtracking == 0) {
                    ak(k);
                }
                k = (CommonToken)match(input, CONSTRAINT, FOLLOW_CONSTRAINT_in_p_ICDecl17268);
                if (state.failed) {
                    return retval;
                }
                if (state.backtracking == 0) {
                    k_tree = (XQDTCommonTree)adaptor.create(k);
                    adaptor.addChild(root_0, k_tree);
                }
                if (state.backtracking == 0) {
                    ak(k);
                }
                pushFollow(FOLLOW_p_QName_in_p_ICDecl17272);
                p_QName826 = p_QName();

                state._fsp--;
                if (state.failed) {
                    return retval;
                }
                if (state.backtracking == 0) {
                    adaptor.addChild(root_0, p_QName826.getTree());
                }
                // XQueryParser.g:1992:64: ( p_ICCollection | p_ICForeignKey )
                int alt257 = 2;
                int LA257_0 = input.LA(1);

                if ((LA257_0 == ON)) {
                    alt257 = 1;
                } else if ((LA257_0 == FOREIGN)) {
                    alt257 = 2;
                } else {
                    if (state.backtracking > 0) {
                        state.failed = true;
                        return retval;
                    }
                    NoViableAltException nvae = new NoViableAltException("", 257, 0, input);

                    throw nvae;
                }
                switch (alt257) {
                case 1:
                    // XQueryParser.g:1992:65: p_ICCollection
                {
                    pushFollow(FOLLOW_p_ICCollection_in_p_ICDecl17275);
                    p_ICCollection827 = p_ICCollection();

                    state._fsp--;
                    if (state.failed) {
                        return retval;
                    }
                    if (state.backtracking == 0) {
                        adaptor.addChild(root_0, p_ICCollection827.getTree());
                    }

                }
                    break;
                case 2:
                    // XQueryParser.g:1992:82: p_ICForeignKey
                {
                    pushFollow(FOLLOW_p_ICForeignKey_in_p_ICDecl17279);
                    p_ICForeignKey828 = p_ICForeignKey();

                    state._fsp--;
                    if (state.failed) {
                        return retval;
                    }
                    if (state.backtracking == 0) {
                        adaptor.addChild(root_0, p_ICForeignKey828.getTree());
                    }

                }
                    break;

                }

            }

            retval.stop = input.LT(-1);

            if (state.backtracking == 0) {

                retval.tree = (XQDTCommonTree)adaptor.rulePostProcessing(root_0);
                adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        } catch (RecognitionException re) {
            reportError(re);
            recover(input, re);
            retval.tree = (XQDTCommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        } finally {
        }
        return retval;
    }

    // $ANTLR end "p_ICDecl"

    public static class p_ICCollection_return extends ParserRuleReturnScope {
        XQDTCommonTree tree;

        public Object getTree() {
            return tree;
        }
    };

    // $ANTLR start "p_ICCollection"
    // XQueryParser.g:1995:1: p_ICCollection : k= ON k= COLLECTION p_QName ( p_ICCollSequence | p_ICCollSequenceUnique | p_ICCollNode ) ;
    public final XQueryParser.p_ICCollection_return p_ICCollection() throws RecognitionException {
        XQueryParser.p_ICCollection_return retval = new XQueryParser.p_ICCollection_return();
        retval.start = input.LT(1);

        XQDTCommonTree root_0 = null;

        CommonToken k = null;
        XQueryParser.p_QName_return p_QName829 = null;

        XQueryParser.p_ICCollSequence_return p_ICCollSequence830 = null;

        XQueryParser.p_ICCollSequenceUnique_return p_ICCollSequenceUnique831 = null;

        XQueryParser.p_ICCollNode_return p_ICCollNode832 = null;

        XQDTCommonTree k_tree = null;

        try {
            // XQueryParser.g:1996:9: (k= ON k= COLLECTION p_QName ( p_ICCollSequence | p_ICCollSequenceUnique | p_ICCollNode ) )
            // XQueryParser.g:1996:11: k= ON k= COLLECTION p_QName ( p_ICCollSequence | p_ICCollSequenceUnique | p_ICCollNode )
            {
                root_0 = (XQDTCommonTree)adaptor.nil();

                k = (CommonToken)match(input, ON, FOLLOW_ON_in_p_ICCollection17307);
                if (state.failed) {
                    return retval;
                }
                if (state.backtracking == 0) {
                    k_tree = (XQDTCommonTree)adaptor.create(k);
                    adaptor.addChild(root_0, k_tree);
                }
                if (state.backtracking == 0) {
                    ak(k);
                }
                k = (CommonToken)match(input, COLLECTION, FOLLOW_COLLECTION_in_p_ICCollection17313);
                if (state.failed) {
                    return retval;
                }
                if (state.backtracking == 0) {
                    k_tree = (XQDTCommonTree)adaptor.create(k);
                    adaptor.addChild(root_0, k_tree);
                }
                if (state.backtracking == 0) {
                    ak(k);
                }
                pushFollow(FOLLOW_p_QName_in_p_ICCollection17317);
                p_QName829 = p_QName();

                state._fsp--;
                if (state.failed) {
                    return retval;
                }
                if (state.backtracking == 0) {
                    adaptor.addChild(root_0, p_QName829.getTree());
                }
                // XQueryParser.g:1996:57: ( p_ICCollSequence | p_ICCollSequenceUnique | p_ICCollNode )
                int alt258 = 3;
                switch (input.LA(1)) {
                case DOLLAR: {
                    alt258 = 1;
                }
                break;
                case NODE: {
                    alt258 = 2;
                }
                break;
                case FOREACH: {
                    alt258 = 3;
                }
                break;
                default:
                    if (state.backtracking > 0) {
                        state.failed = true;
                        return retval;
                    }
                    NoViableAltException nvae = new NoViableAltException("", 258, 0, input);

                    throw nvae;
                }

                switch (alt258) {
                case 1:
                    // XQueryParser.g:1996:58: p_ICCollSequence
                {
                    pushFollow(FOLLOW_p_ICCollSequence_in_p_ICCollection17320);
                    p_ICCollSequence830 = p_ICCollSequence();

                    state._fsp--;
                    if (state.failed) {
                        return retval;
                    }
                    if (state.backtracking == 0) {
                        adaptor.addChild(root_0, p_ICCollSequence830.getTree());
                    }

                }
                    break;
                case 2:
                    // XQueryParser.g:1996:77: p_ICCollSequenceUnique
                {
                    pushFollow(FOLLOW_p_ICCollSequenceUnique_in_p_ICCollection17324);
                    p_ICCollSequenceUnique831 = p_ICCollSequenceUnique();

                    state._fsp--;
                    if (state.failed) {
                        return retval;
                    }
                    if (state.backtracking == 0) {
                        adaptor.addChild(root_0, p_ICCollSequenceUnique831.getTree());
                    }

                }
                    break;
                case 3:
                    // XQueryParser.g:1996:102: p_ICCollNode
                {
                    pushFollow(FOLLOW_p_ICCollNode_in_p_ICCollection17328);
                    p_ICCollNode832 = p_ICCollNode();

                    state._fsp--;
                    if (state.failed) {
                        return retval;
                    }
                    if (state.backtracking == 0) {
                        adaptor.addChild(root_0, p_ICCollNode832.getTree());
                    }

                }
                    break;

                }

            }

            retval.stop = input.LT(-1);

            if (state.backtracking == 0) {

                retval.tree = (XQDTCommonTree)adaptor.rulePostProcessing(root_0);
                adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        } catch (RecognitionException re) {
            reportError(re);
            recover(input, re);
            retval.tree = (XQDTCommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        } finally {
        }
        return retval;
    }

    // $ANTLR end "p_ICCollection"

    public static class p_ICCollSequence_return extends ParserRuleReturnScope {
        XQDTCommonTree tree;

        public Object getTree() {
            return tree;
        }
    };

    // $ANTLR start "p_ICCollSequence"
    // XQueryParser.g:1999:1: p_ICCollSequence : DOLLAR p_QName k= CHECK p_ExprSingle[true] ;
    public final XQueryParser.p_ICCollSequence_return p_ICCollSequence() throws RecognitionException {
        XQueryParser.p_ICCollSequence_return retval = new XQueryParser.p_ICCollSequence_return();
        retval.start = input.LT(1);

        XQDTCommonTree root_0 = null;

        CommonToken k = null;
        CommonToken DOLLAR833 = null;
        XQueryParser.p_QName_return p_QName834 = null;

        XQueryParser.p_ExprSingle_return p_ExprSingle835 = null;

        XQDTCommonTree k_tree = null;
        XQDTCommonTree DOLLAR833_tree = null;

        try {
            // XQueryParser.g:2000:9: ( DOLLAR p_QName k= CHECK p_ExprSingle[true] )
            // XQueryParser.g:2000:11: DOLLAR p_QName k= CHECK p_ExprSingle[true]
            {
                root_0 = (XQDTCommonTree)adaptor.nil();

                DOLLAR833 = (CommonToken)match(input, DOLLAR, FOLLOW_DOLLAR_in_p_ICCollSequence17354);
                if (state.failed) {
                    return retval;
                }
                if (state.backtracking == 0) {
                    DOLLAR833_tree = (XQDTCommonTree)adaptor.create(DOLLAR833);
                    adaptor.addChild(root_0, DOLLAR833_tree);
                }
                pushFollow(FOLLOW_p_QName_in_p_ICCollSequence17356);
                p_QName834 = p_QName();

                state._fsp--;
                if (state.failed) {
                    return retval;
                }
                if (state.backtracking == 0) {
                    adaptor.addChild(root_0, p_QName834.getTree());
                }
                k = (CommonToken)match(input, CHECK, FOLLOW_CHECK_in_p_ICCollSequence17360);
                if (state.failed) {
                    return retval;
                }
                if (state.backtracking == 0) {
                    k_tree = (XQDTCommonTree)adaptor.create(k);
                    adaptor.addChild(root_0, k_tree);
                }
                if (state.backtracking == 0) {
                    ak(k);
                }
                pushFollow(FOLLOW_p_ExprSingle_in_p_ICCollSequence17364);
                p_ExprSingle835 = p_ExprSingle(true);

                state._fsp--;
                if (state.failed) {
                    return retval;
                }
                if (state.backtracking == 0) {
                    adaptor.addChild(root_0, p_ExprSingle835.getTree());
                }

            }

            retval.stop = input.LT(-1);

            if (state.backtracking == 0) {

                retval.tree = (XQDTCommonTree)adaptor.rulePostProcessing(root_0);
                adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        } catch (RecognitionException re) {
            reportError(re);
            recover(input, re);
            retval.tree = (XQDTCommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        } finally {
        }
        return retval;
    }

    // $ANTLR end "p_ICCollSequence"

    public static class p_ICCollSequenceUnique_return extends ParserRuleReturnScope {
        XQDTCommonTree tree;

        public Object getTree() {
            return tree;
        }
    };

    // $ANTLR start "p_ICCollSequenceUnique"
    // XQueryParser.g:2003:1: p_ICCollSequenceUnique : k= NODE DOLLAR p_QName k= CHECK k= UNIQUE k= KEY p_PathExpr ;
    public final XQueryParser.p_ICCollSequenceUnique_return p_ICCollSequenceUnique() throws RecognitionException {
        XQueryParser.p_ICCollSequenceUnique_return retval = new XQueryParser.p_ICCollSequenceUnique_return();
        retval.start = input.LT(1);

        XQDTCommonTree root_0 = null;

        CommonToken k = null;
        CommonToken DOLLAR836 = null;
        XQueryParser.p_QName_return p_QName837 = null;

        XQueryParser.p_PathExpr_return p_PathExpr838 = null;

        XQDTCommonTree k_tree = null;
        XQDTCommonTree DOLLAR836_tree = null;

        try {
            // XQueryParser.g:2004:9: (k= NODE DOLLAR p_QName k= CHECK k= UNIQUE k= KEY p_PathExpr )
            // XQueryParser.g:2004:11: k= NODE DOLLAR p_QName k= CHECK k= UNIQUE k= KEY p_PathExpr
            {
                root_0 = (XQDTCommonTree)adaptor.nil();

                k = (CommonToken)match(input, NODE, FOLLOW_NODE_in_p_ICCollSequenceUnique17392);
                if (state.failed) {
                    return retval;
                }
                if (state.backtracking == 0) {
                    k_tree = (XQDTCommonTree)adaptor.create(k);
                    adaptor.addChild(root_0, k_tree);
                }
                if (state.backtracking == 0) {
                    ak(k);
                }
                DOLLAR836 = (CommonToken)match(input, DOLLAR, FOLLOW_DOLLAR_in_p_ICCollSequenceUnique17396);
                if (state.failed) {
                    return retval;
                }
                if (state.backtracking == 0) {
                    DOLLAR836_tree = (XQDTCommonTree)adaptor.create(DOLLAR836);
                    adaptor.addChild(root_0, DOLLAR836_tree);
                }
                pushFollow(FOLLOW_p_QName_in_p_ICCollSequenceUnique17398);
                p_QName837 = p_QName();

                state._fsp--;
                if (state.failed) {
                    return retval;
                }
                if (state.backtracking == 0) {
                    adaptor.addChild(root_0, p_QName837.getTree());
                }
                k = (CommonToken)match(input, CHECK, FOLLOW_CHECK_in_p_ICCollSequenceUnique17402);
                if (state.failed) {
                    return retval;
                }
                if (state.backtracking == 0) {
                    k_tree = (XQDTCommonTree)adaptor.create(k);
                    adaptor.addChild(root_0, k_tree);
                }
                if (state.backtracking == 0) {
                    ak(k);
                }
                k = (CommonToken)match(input, UNIQUE, FOLLOW_UNIQUE_in_p_ICCollSequenceUnique17408);
                if (state.failed) {
                    return retval;
                }
                if (state.backtracking == 0) {
                    k_tree = (XQDTCommonTree)adaptor.create(k);
                    adaptor.addChild(root_0, k_tree);
                }
                if (state.backtracking == 0) {
                    ak(k);
                }
                k = (CommonToken)match(input, KEY, FOLLOW_KEY_in_p_ICCollSequenceUnique17414);
                if (state.failed) {
                    return retval;
                }
                if (state.backtracking == 0) {
                    k_tree = (XQDTCommonTree)adaptor.create(k);
                    adaptor.addChild(root_0, k_tree);
                }
                if (state.backtracking == 0) {
                    ak(k);
                }
                pushFollow(FOLLOW_p_PathExpr_in_p_ICCollSequenceUnique17418);
                p_PathExpr838 = p_PathExpr();

                state._fsp--;
                if (state.failed) {
                    return retval;
                }
                if (state.backtracking == 0) {
                    adaptor.addChild(root_0, p_PathExpr838.getTree());
                }

            }

            retval.stop = input.LT(-1);

            if (state.backtracking == 0) {

                retval.tree = (XQDTCommonTree)adaptor.rulePostProcessing(root_0);
                adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        } catch (RecognitionException re) {
            reportError(re);
            recover(input, re);
            retval.tree = (XQDTCommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        } finally {
        }
        return retval;
    }

    // $ANTLR end "p_ICCollSequenceUnique"

    public static class p_ICCollNode_return extends ParserRuleReturnScope {
        XQDTCommonTree tree;

        public Object getTree() {
            return tree;
        }
    };

    // $ANTLR start "p_ICCollNode"
    // XQueryParser.g:2007:1: p_ICCollNode : k= FOREACH k= NODE DOLLAR p_QName k= CHECK p_ExprSingle[true] ;
    public final XQueryParser.p_ICCollNode_return p_ICCollNode() throws RecognitionException {
        XQueryParser.p_ICCollNode_return retval = new XQueryParser.p_ICCollNode_return();
        retval.start = input.LT(1);

        XQDTCommonTree root_0 = null;

        CommonToken k = null;
        CommonToken DOLLAR839 = null;
        XQueryParser.p_QName_return p_QName840 = null;

        XQueryParser.p_ExprSingle_return p_ExprSingle841 = null;

        XQDTCommonTree k_tree = null;
        XQDTCommonTree DOLLAR839_tree = null;

        try {
            // XQueryParser.g:2008:9: (k= FOREACH k= NODE DOLLAR p_QName k= CHECK p_ExprSingle[true] )
            // XQueryParser.g:2008:11: k= FOREACH k= NODE DOLLAR p_QName k= CHECK p_ExprSingle[true]
            {
                root_0 = (XQDTCommonTree)adaptor.nil();

                k = (CommonToken)match(input, FOREACH, FOLLOW_FOREACH_in_p_ICCollNode17445);
                if (state.failed) {
                    return retval;
                }
                if (state.backtracking == 0) {
                    k_tree = (XQDTCommonTree)adaptor.create(k);
                    adaptor.addChild(root_0, k_tree);
                }
                if (state.backtracking == 0) {
                    ak(k);
                }
                k = (CommonToken)match(input, NODE, FOLLOW_NODE_in_p_ICCollNode17451);
                if (state.failed) {
                    return retval;
                }
                if (state.backtracking == 0) {
                    k_tree = (XQDTCommonTree)adaptor.create(k);
                    adaptor.addChild(root_0, k_tree);
                }
                if (state.backtracking == 0) {
                    ak(k);
                }
                DOLLAR839 = (CommonToken)match(input, DOLLAR, FOLLOW_DOLLAR_in_p_ICCollNode17455);
                if (state.failed) {
                    return retval;
                }
                if (state.backtracking == 0) {
                    DOLLAR839_tree = (XQDTCommonTree)adaptor.create(DOLLAR839);
                    adaptor.addChild(root_0, DOLLAR839_tree);
                }
                pushFollow(FOLLOW_p_QName_in_p_ICCollNode17457);
                p_QName840 = p_QName();

                state._fsp--;
                if (state.failed) {
                    return retval;
                }
                if (state.backtracking == 0) {
                    adaptor.addChild(root_0, p_QName840.getTree());
                }
                k = (CommonToken)match(input, CHECK, FOLLOW_CHECK_in_p_ICCollNode17461);
                if (state.failed) {
                    return retval;
                }
                if (state.backtracking == 0) {
                    k_tree = (XQDTCommonTree)adaptor.create(k);
                    adaptor.addChild(root_0, k_tree);
                }
                if (state.backtracking == 0) {
                    ak(k);
                }
                pushFollow(FOLLOW_p_ExprSingle_in_p_ICCollNode17465);
                p_ExprSingle841 = p_ExprSingle(true);

                state._fsp--;
                if (state.failed) {
                    return retval;
                }
                if (state.backtracking == 0) {
                    adaptor.addChild(root_0, p_ExprSingle841.getTree());
                }

            }

            retval.stop = input.LT(-1);

            if (state.backtracking == 0) {

                retval.tree = (XQDTCommonTree)adaptor.rulePostProcessing(root_0);
                adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        } catch (RecognitionException re) {
            reportError(re);
            recover(input, re);
            retval.tree = (XQDTCommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        } finally {
        }
        return retval;
    }

    // $ANTLR end "p_ICCollNode"

    public static class p_ICForeignKey_return extends ParserRuleReturnScope {
        XQDTCommonTree tree;

        public Object getTree() {
            return tree;
        }
    };

    // $ANTLR start "p_ICForeignKey"
    // XQueryParser.g:2011:1: p_ICForeignKey : k= FOREIGN k= KEY p_ICForeignKeySource p_ICForeignKeyTarget ;
    public final XQueryParser.p_ICForeignKey_return p_ICForeignKey() throws RecognitionException {
        XQueryParser.p_ICForeignKey_return retval = new XQueryParser.p_ICForeignKey_return();
        retval.start = input.LT(1);

        XQDTCommonTree root_0 = null;

        CommonToken k = null;
        XQueryParser.p_ICForeignKeySource_return p_ICForeignKeySource842 = null;

        XQueryParser.p_ICForeignKeyTarget_return p_ICForeignKeyTarget843 = null;

        XQDTCommonTree k_tree = null;

        try {
            // XQueryParser.g:2012:9: (k= FOREIGN k= KEY p_ICForeignKeySource p_ICForeignKeyTarget )
            // XQueryParser.g:2012:11: k= FOREIGN k= KEY p_ICForeignKeySource p_ICForeignKeyTarget
            {
                root_0 = (XQDTCommonTree)adaptor.nil();

                k = (CommonToken)match(input, FOREIGN, FOLLOW_FOREIGN_in_p_ICForeignKey17493);
                if (state.failed) {
                    return retval;
                }
                if (state.backtracking == 0) {
                    k_tree = (XQDTCommonTree)adaptor.create(k);
                    adaptor.addChild(root_0, k_tree);
                }
                if (state.backtracking == 0) {
                    ak(k);
                }
                k = (CommonToken)match(input, KEY, FOLLOW_KEY_in_p_ICForeignKey17499);
                if (state.failed) {
                    return retval;
                }
                if (state.backtracking == 0) {
                    k_tree = (XQDTCommonTree)adaptor.create(k);
                    adaptor.addChild(root_0, k_tree);
                }
                if (state.backtracking == 0) {
                    ak(k);
                }
                pushFollow(FOLLOW_p_ICForeignKeySource_in_p_ICForeignKey17503);
                p_ICForeignKeySource842 = p_ICForeignKeySource();

                state._fsp--;
                if (state.failed) {
                    return retval;
                }
                if (state.backtracking == 0) {
                    adaptor.addChild(root_0, p_ICForeignKeySource842.getTree());
                }
                pushFollow(FOLLOW_p_ICForeignKeyTarget_in_p_ICForeignKey17505);
                p_ICForeignKeyTarget843 = p_ICForeignKeyTarget();

                state._fsp--;
                if (state.failed) {
                    return retval;
                }
                if (state.backtracking == 0) {
                    adaptor.addChild(root_0, p_ICForeignKeyTarget843.getTree());
                }

            }

            retval.stop = input.LT(-1);

            if (state.backtracking == 0) {

                retval.tree = (XQDTCommonTree)adaptor.rulePostProcessing(root_0);
                adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        } catch (RecognitionException re) {
            reportError(re);
            recover(input, re);
            retval.tree = (XQDTCommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        } finally {
        }
        return retval;
    }

    // $ANTLR end "p_ICForeignKey"

    public static class p_ICForeignKeySource_return extends ParserRuleReturnScope {
        XQDTCommonTree tree;

        public Object getTree() {
            return tree;
        }
    };

    // $ANTLR start "p_ICForeignKeySource"
    // XQueryParser.g:2015:1: p_ICForeignKeySource : k= FROM p_ICForeignKeyValues ;
    public final XQueryParser.p_ICForeignKeySource_return p_ICForeignKeySource() throws RecognitionException {
        XQueryParser.p_ICForeignKeySource_return retval = new XQueryParser.p_ICForeignKeySource_return();
        retval.start = input.LT(1);

        XQDTCommonTree root_0 = null;

        CommonToken k = null;
        XQueryParser.p_ICForeignKeyValues_return p_ICForeignKeyValues844 = null;

        XQDTCommonTree k_tree = null;

        try {
            // XQueryParser.g:2016:9: (k= FROM p_ICForeignKeyValues )
            // XQueryParser.g:2016:11: k= FROM p_ICForeignKeyValues
            {
                root_0 = (XQDTCommonTree)adaptor.nil();

                k = (CommonToken)match(input, FROM, FOLLOW_FROM_in_p_ICForeignKeySource17532);
                if (state.failed) {
                    return retval;
                }
                if (state.backtracking == 0) {
                    k_tree = (XQDTCommonTree)adaptor.create(k);
                    adaptor.addChild(root_0, k_tree);
                }
                if (state.backtracking == 0) {
                    ak(k);
                }
                pushFollow(FOLLOW_p_ICForeignKeyValues_in_p_ICForeignKeySource17536);
                p_ICForeignKeyValues844 = p_ICForeignKeyValues();

                state._fsp--;
                if (state.failed) {
                    return retval;
                }
                if (state.backtracking == 0) {
                    adaptor.addChild(root_0, p_ICForeignKeyValues844.getTree());
                }

            }

            retval.stop = input.LT(-1);

            if (state.backtracking == 0) {

                retval.tree = (XQDTCommonTree)adaptor.rulePostProcessing(root_0);
                adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        } catch (RecognitionException re) {
            reportError(re);
            recover(input, re);
            retval.tree = (XQDTCommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        } finally {
        }
        return retval;
    }

    // $ANTLR end "p_ICForeignKeySource"

    public static class p_ICForeignKeyTarget_return extends ParserRuleReturnScope {
        XQDTCommonTree tree;

        public Object getTree() {
            return tree;
        }
    };

    // $ANTLR start "p_ICForeignKeyTarget"
    // XQueryParser.g:2019:1: p_ICForeignKeyTarget : k= TO p_ICForeignKeyValues ;
    public final XQueryParser.p_ICForeignKeyTarget_return p_ICForeignKeyTarget() throws RecognitionException {
        XQueryParser.p_ICForeignKeyTarget_return retval = new XQueryParser.p_ICForeignKeyTarget_return();
        retval.start = input.LT(1);

        XQDTCommonTree root_0 = null;

        CommonToken k = null;
        XQueryParser.p_ICForeignKeyValues_return p_ICForeignKeyValues845 = null;

        XQDTCommonTree k_tree = null;

        try {
            // XQueryParser.g:2020:9: (k= TO p_ICForeignKeyValues )
            // XQueryParser.g:2020:11: k= TO p_ICForeignKeyValues
            {
                root_0 = (XQDTCommonTree)adaptor.nil();

                k = (CommonToken)match(input, TO, FOLLOW_TO_in_p_ICForeignKeyTarget17563);
                if (state.failed) {
                    return retval;
                }
                if (state.backtracking == 0) {
                    k_tree = (XQDTCommonTree)adaptor.create(k);
                    adaptor.addChild(root_0, k_tree);
                }
                if (state.backtracking == 0) {
                    ak(k);
                }
                pushFollow(FOLLOW_p_ICForeignKeyValues_in_p_ICForeignKeyTarget17567);
                p_ICForeignKeyValues845 = p_ICForeignKeyValues();

                state._fsp--;
                if (state.failed) {
                    return retval;
                }
                if (state.backtracking == 0) {
                    adaptor.addChild(root_0, p_ICForeignKeyValues845.getTree());
                }

            }

            retval.stop = input.LT(-1);

            if (state.backtracking == 0) {

                retval.tree = (XQDTCommonTree)adaptor.rulePostProcessing(root_0);
                adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        } catch (RecognitionException re) {
            reportError(re);
            recover(input, re);
            retval.tree = (XQDTCommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        } finally {
        }
        return retval;
    }

    // $ANTLR end "p_ICForeignKeyTarget"

    public static class p_ICForeignKeyValues_return extends ParserRuleReturnScope {
        XQDTCommonTree tree;

        public Object getTree() {
            return tree;
        }
    };

    // $ANTLR start "p_ICForeignKeyValues"
    // XQueryParser.g:2023:1: p_ICForeignKeyValues : k= COLLECTION p_QName k= NODE DOLLAR p_QName k= KEY p_PathExpr ;
    public final XQueryParser.p_ICForeignKeyValues_return p_ICForeignKeyValues() throws RecognitionException {
        XQueryParser.p_ICForeignKeyValues_return retval = new XQueryParser.p_ICForeignKeyValues_return();
        retval.start = input.LT(1);

        XQDTCommonTree root_0 = null;

        CommonToken k = null;
        CommonToken DOLLAR847 = null;
        XQueryParser.p_QName_return p_QName846 = null;

        XQueryParser.p_QName_return p_QName848 = null;

        XQueryParser.p_PathExpr_return p_PathExpr849 = null;

        XQDTCommonTree k_tree = null;
        XQDTCommonTree DOLLAR847_tree = null;

        try {
            // XQueryParser.g:2024:9: (k= COLLECTION p_QName k= NODE DOLLAR p_QName k= KEY p_PathExpr )
            // XQueryParser.g:2024:11: k= COLLECTION p_QName k= NODE DOLLAR p_QName k= KEY p_PathExpr
            {
                root_0 = (XQDTCommonTree)adaptor.nil();

                k = (CommonToken)match(input, COLLECTION, FOLLOW_COLLECTION_in_p_ICForeignKeyValues17594);
                if (state.failed) {
                    return retval;
                }
                if (state.backtracking == 0) {
                    k_tree = (XQDTCommonTree)adaptor.create(k);
                    adaptor.addChild(root_0, k_tree);
                }
                if (state.backtracking == 0) {
                    ak(k);
                }
                pushFollow(FOLLOW_p_QName_in_p_ICForeignKeyValues17598);
                p_QName846 = p_QName();

                state._fsp--;
                if (state.failed) {
                    return retval;
                }
                if (state.backtracking == 0) {
                    adaptor.addChild(root_0, p_QName846.getTree());
                }
                k = (CommonToken)match(input, NODE, FOLLOW_NODE_in_p_ICForeignKeyValues17602);
                if (state.failed) {
                    return retval;
                }
                if (state.backtracking == 0) {
                    k_tree = (XQDTCommonTree)adaptor.create(k);
                    adaptor.addChild(root_0, k_tree);
                }
                if (state.backtracking == 0) {
                    ak(k);
                }
                DOLLAR847 = (CommonToken)match(input, DOLLAR, FOLLOW_DOLLAR_in_p_ICForeignKeyValues17606);
                if (state.failed) {
                    return retval;
                }
                if (state.backtracking == 0) {
                    DOLLAR847_tree = (XQDTCommonTree)adaptor.create(DOLLAR847);
                    adaptor.addChild(root_0, DOLLAR847_tree);
                }
                pushFollow(FOLLOW_p_QName_in_p_ICForeignKeyValues17608);
                p_QName848 = p_QName();

                state._fsp--;
                if (state.failed) {
                    return retval;
                }
                if (state.backtracking == 0) {
                    adaptor.addChild(root_0, p_QName848.getTree());
                }
                k = (CommonToken)match(input, KEY, FOLLOW_KEY_in_p_ICForeignKeyValues17612);
                if (state.failed) {
                    return retval;
                }
                if (state.backtracking == 0) {
                    k_tree = (XQDTCommonTree)adaptor.create(k);
                    adaptor.addChild(root_0, k_tree);
                }
                if (state.backtracking == 0) {
                    ak(k);
                }
                pushFollow(FOLLOW_p_PathExpr_in_p_ICForeignKeyValues17616);
                p_PathExpr849 = p_PathExpr();

                state._fsp--;
                if (state.failed) {
                    return retval;
                }
                if (state.backtracking == 0) {
                    adaptor.addChild(root_0, p_PathExpr849.getTree());
                }

            }

            retval.stop = input.LT(-1);

            if (state.backtracking == 0) {

                retval.tree = (XQDTCommonTree)adaptor.rulePostProcessing(root_0);
                adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        } catch (RecognitionException re) {
            reportError(re);
            recover(input, re);
            retval.tree = (XQDTCommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        } finally {
        }
        return retval;
    }

    // $ANTLR end "p_ICForeignKeyValues"

    // $ANTLR start synpred1_XQueryParser
    public final void synpred1_XQueryParser_fragment() throws RecognitionException {
        // XQueryParser.g:403:11: ( ( ( FOR | LET ) DOLLAR ) | ( FOR ( TUMBLING | SLIDING ) ) )
        int alt259 = 2;
        int LA259_0 = input.LA(1);

        if ((LA259_0 == FOR)) {
            int LA259_1 = input.LA(2);

            if ((LA259_1 == DOLLAR)) {
                alt259 = 1;
            } else if ((LA259_1 == SLIDING || LA259_1 == TUMBLING)) {
                alt259 = 2;
            } else {
                if (state.backtracking > 0) {
                    state.failed = true;
                    return;
                }
                NoViableAltException nvae = new NoViableAltException("", 259, 1, input);

                throw nvae;
            }
        } else if ((LA259_0 == LET)) {
            alt259 = 1;
        } else {
            if (state.backtracking > 0) {
                state.failed = true;
                return;
            }
            NoViableAltException nvae = new NoViableAltException("", 259, 0, input);

            throw nvae;
        }
        switch (alt259) {
        case 1:
            // XQueryParser.g:403:12: ( ( FOR | LET ) DOLLAR )
        {
            // XQueryParser.g:403:12: ( ( FOR | LET ) DOLLAR )
            // XQueryParser.g:403:13: ( FOR | LET ) DOLLAR
            {
                if (input.LA(1) == FOR || input.LA(1) == LET) {
                    input.consume();
                    state.errorRecovery = false;
                    state.failed = false;
                } else {
                    if (state.backtracking > 0) {
                        state.failed = true;
                        return;
                    }
                    MismatchedSetException mse = new MismatchedSetException(null, input);
                    throw mse;
                }

                match(input, DOLLAR, FOLLOW_DOLLAR_in_synpred1_XQueryParser3544);
                if (state.failed) {
                    return;
                }

            }

        }
        break;
        case 2:
            // XQueryParser.g:403:35: ( FOR ( TUMBLING | SLIDING ) )
        {
            // XQueryParser.g:403:35: ( FOR ( TUMBLING | SLIDING ) )
            // XQueryParser.g:403:36: FOR ( TUMBLING | SLIDING )
            {
                match(input, FOR, FOLLOW_FOR_in_synpred1_XQueryParser3550);
                if (state.failed) {
                    return;
                }
                if (input.LA(1) == SLIDING || input.LA(1) == TUMBLING) {
                    input.consume();
                    state.errorRecovery = false;
                    state.failed = false;
                } else {
                    if (state.backtracking > 0) {
                        state.failed = true;
                        return;
                    }
                    MismatchedSetException mse = new MismatchedSetException(null, input);
                    throw mse;
                }

            }

        }
        break;

        }
    }

    // $ANTLR end synpred1_XQueryParser

    // $ANTLR start synpred2_XQueryParser
    public final void synpred2_XQueryParser_fragment() throws RecognitionException {
        // XQueryParser.g:404:11: ( IF LPAREN )
        // XQueryParser.g:404:12: IF LPAREN
        {
            match(input, IF, FOLLOW_IF_in_synpred2_XQueryParser3578);
            if (state.failed) {
                return;
            }
            match(input, LPAREN, FOLLOW_LPAREN_in_synpred2_XQueryParser3580);
            if (state.failed) {
                return;
            }

        }
    }

    // $ANTLR end synpred2_XQueryParser

    // $ANTLR start synpred3_XQueryParser
    public final void synpred3_XQueryParser_fragment() throws RecognitionException {
        // XQueryParser.g:405:11: ( SWITCH LPAREN )
        // XQueryParser.g:405:12: SWITCH LPAREN
        {
            match(input, SWITCH, FOLLOW_SWITCH_in_synpred3_XQueryParser3608);
            if (state.failed) {
                return;
            }
            match(input, LPAREN, FOLLOW_LPAREN_in_synpred3_XQueryParser3610);
            if (state.failed) {
                return;
            }

        }
    }

    // $ANTLR end synpred3_XQueryParser

    // $ANTLR start synpred4_XQueryParser
    public final void synpred4_XQueryParser_fragment() throws RecognitionException {
        // XQueryParser.g:406:11: ( TYPESWITCH LPAREN )
        // XQueryParser.g:406:12: TYPESWITCH LPAREN
        {
            match(input, TYPESWITCH, FOLLOW_TYPESWITCH_in_synpred4_XQueryParser3634);
            if (state.failed) {
                return;
            }
            match(input, LPAREN, FOLLOW_LPAREN_in_synpred4_XQueryParser3636);
            if (state.failed) {
                return;
            }

        }
    }

    // $ANTLR end synpred4_XQueryParser

    // $ANTLR start synpred5_XQueryParser
    public final void synpred5_XQueryParser_fragment() throws RecognitionException {
        // XQueryParser.g:407:11: ( TRY LBRACKET )
        // XQueryParser.g:407:12: TRY LBRACKET
        {
            match(input, TRY, FOLLOW_TRY_in_synpred5_XQueryParser3656);
            if (state.failed) {
                return;
            }
            match(input, LBRACKET, FOLLOW_LBRACKET_in_synpred5_XQueryParser3658);
            if (state.failed) {
                return;
            }

        }
    }

    // $ANTLR end synpred5_XQueryParser

    // $ANTLR start synpred6_XQueryParser
    public final void synpred6_XQueryParser_fragment() throws RecognitionException {
        // XQueryParser.g:692:11: ( VALIDATE ( p_ValidationMode | TYPE )? )
        // XQueryParser.g:692:12: VALIDATE ( p_ValidationMode | TYPE )?
        {
            match(input, VALIDATE, FOLLOW_VALIDATE_in_synpred6_XQueryParser6104);
            if (state.failed) {
                return;
            }
            // XQueryParser.g:692:21: ( p_ValidationMode | TYPE )?
            int alt260 = 3;
            int LA260_0 = input.LA(1);

            if ((LA260_0 == LAX || LA260_0 == STRICT)) {
                alt260 = 1;
            } else if ((LA260_0 == TYPE)) {
                alt260 = 2;
            }
            switch (alt260) {
            case 1:
                // XQueryParser.g:692:23: p_ValidationMode
            {
                pushFollow(FOLLOW_p_ValidationMode_in_synpred6_XQueryParser6108);
                p_ValidationMode();

                state._fsp--;
                if (state.failed) {
                    return;
                }

            }
                break;
            case 2:
                // XQueryParser.g:692:42: TYPE
            {
                match(input, TYPE, FOLLOW_TYPE_in_synpred6_XQueryParser6112);
                if (state.failed) {
                    return;
                }

            }
                break;

            }

        }
    }

    // $ANTLR end synpred6_XQueryParser

    // $ANTLR start synpred7_XQueryParser
    public final void synpred7_XQueryParser_fragment() throws RecognitionException {
        // XQueryParser.g:737:11: ( SLASH p_RelativePathExpr )
        // XQueryParser.g:737:12: SLASH p_RelativePathExpr
        {
            match(input, SLASH, FOLLOW_SLASH_in_synpred7_XQueryParser6452);
            if (state.failed) {
                return;
            }
            pushFollow(FOLLOW_p_RelativePathExpr_in_synpred7_XQueryParser6454);
            p_RelativePathExpr();

            state._fsp--;
            if (state.failed) {
                return;
            }

        }
    }

    // $ANTLR end synpred7_XQueryParser

    // $ANTLR start synpred8_XQueryParser
    public final void synpred8_XQueryParser_fragment() throws RecognitionException {
        // XQueryParser.g:750:11: ( LBRACKET | LPAREN | SMALLER | QUOT | APOS | DOLLAR )
        // XQueryParser.g:
        {
            if (input.LA(1) == LPAREN || (input.LA(1) >= DOLLAR && input.LA(1) <= LBRACKET) || input.LA(1) == SMALLER
                    || (input.LA(1) >= APOS && input.LA(1) <= QUOT)) {
                input.consume();
                state.errorRecovery = false;
                state.failed = false;
            } else {
                if (state.backtracking > 0) {
                    state.failed = true;
                    return;
                }
                MismatchedSetException mse = new MismatchedSetException(null, input);
                throw mse;
            }

        }
    }

    // $ANTLR end synpred8_XQueryParser

    // $ANTLR start synpred9_XQueryParser
    public final void synpred9_XQueryParser_fragment() throws RecognitionException {
        // XQueryParser.g:751:11: ( ( ( ELEMENT | ATTRIBUTE ) ( p_QName )? LBRACKET ) | ( ( NAMESPACE | PROCESSING_INSTRUCTION ) ( p_NCName )? LBRACKET ) | ( ( DOCUMENT | TEXT | COMMENT ) LBRACKET ) )
        int alt263 = 3;
        switch (input.LA(1)) {
        case ATTRIBUTE:
        case ELEMENT: {
            alt263 = 1;
        }
            break;
        case NAMESPACE:
        case PROCESSING_INSTRUCTION: {
            alt263 = 2;
        }
            break;
        case COMMENT:
        case DOCUMENT:
        case TEXT: {
            alt263 = 3;
        }
            break;
        default:
            if (state.backtracking > 0) {
                state.failed = true;
                return;
            }
            NoViableAltException nvae = new NoViableAltException("", 263, 0, input);

            throw nvae;
        }

        switch (alt263) {
        case 1:
            // XQueryParser.g:752:13: ( ( ELEMENT | ATTRIBUTE ) ( p_QName )? LBRACKET )
        {
            // XQueryParser.g:752:13: ( ( ELEMENT | ATTRIBUTE ) ( p_QName )? LBRACKET )
            // XQueryParser.g:752:14: ( ELEMENT | ATTRIBUTE ) ( p_QName )? LBRACKET
            {
                if (input.LA(1) == ATTRIBUTE || input.LA(1) == ELEMENT) {
                    input.consume();
                    state.errorRecovery = false;
                    state.failed = false;
                } else {
                    if (state.backtracking > 0) {
                        state.failed = true;
                        return;
                    }
                    MismatchedSetException mse = new MismatchedSetException(null, input);
                    throw mse;
                }

                // XQueryParser.g:752:36: ( p_QName )?
                int alt261 = 2;
                int LA261_0 = input.LA(1);

                if (((LA261_0 >= ANCESTOR && LA261_0 <= SKIP) || (LA261_0 >= VALUE && LA261_0 <= QUOT_ER)
                        || LA261_0 == L_NCName || LA261_0 == EXPLICITLY)) {
                    alt261 = 1;
                }
                switch (alt261) {
                case 1:
                    // XQueryParser.g:752:36: p_QName
                {
                    pushFollow(FOLLOW_p_QName_in_synpred9_XQueryParser6629);
                    p_QName();

                    state._fsp--;
                    if (state.failed) {
                        return;
                    }

                }
                break;

                }

                match(input, LBRACKET, FOLLOW_LBRACKET_in_synpred9_XQueryParser6632);
                if (state.failed) {
                    return;
                }

            }

        }
        break;
        case 2:
            // XQueryParser.g:753:13: ( ( NAMESPACE | PROCESSING_INSTRUCTION ) ( p_NCName )? LBRACKET )
        {
            // XQueryParser.g:753:13: ( ( NAMESPACE | PROCESSING_INSTRUCTION ) ( p_NCName )? LBRACKET )
            // XQueryParser.g:753:14: ( NAMESPACE | PROCESSING_INSTRUCTION ) ( p_NCName )? LBRACKET
            {
                if (input.LA(1) == NAMESPACE || input.LA(1) == PROCESSING_INSTRUCTION) {
                    input.consume();
                    state.errorRecovery = false;
                    state.failed = false;
                } else {
                    if (state.backtracking > 0) {
                        state.failed = true;
                        return;
                    }
                    MismatchedSetException mse = new MismatchedSetException(null, input);
                    throw mse;
                }

                // XQueryParser.g:753:51: ( p_NCName )?
                int alt262 = 2;
                int LA262_0 = input.LA(1);

                if (((LA262_0 >= ANCESTOR && LA262_0 <= SKIP) || (LA262_0 >= VALUE && LA262_0 <= QUOT_ER)
                        || LA262_0 == L_NCName || LA262_0 == EXPLICITLY)) {
                    alt262 = 1;
                }
                switch (alt262) {
                case 1:
                    // XQueryParser.g:753:51: p_NCName
                {
                    pushFollow(FOLLOW_p_NCName_in_synpred9_XQueryParser6658);
                    p_NCName();

                    state._fsp--;
                    if (state.failed) {
                        return;
                    }

                }
                break;

                }

                match(input, LBRACKET, FOLLOW_LBRACKET_in_synpred9_XQueryParser6661);
                if (state.failed) {
                    return;
                }

            }

        }
        break;
        case 3:
            // XQueryParser.g:754:13: ( ( DOCUMENT | TEXT | COMMENT ) LBRACKET )
        {
            // XQueryParser.g:754:13: ( ( DOCUMENT | TEXT | COMMENT ) LBRACKET )
            // XQueryParser.g:754:14: ( DOCUMENT | TEXT | COMMENT ) LBRACKET
            {
                if (input.LA(1) == COMMENT || input.LA(1) == DOCUMENT || input.LA(1) == TEXT) {
                    input.consume();
                    state.errorRecovery = false;
                    state.failed = false;
                } else {
                    if (state.backtracking > 0) {
                        state.failed = true;
                        return;
                    }
                    MismatchedSetException mse = new MismatchedSetException(null, input);
                    throw mse;
                }

                match(input, LBRACKET, FOLLOW_LBRACKET_in_synpred9_XQueryParser6691);
                if (state.failed) {
                    return;
                }

            }

        }
        break;

        }
    }

    // $ANTLR end synpred9_XQueryParser

    // $ANTLR start synpred10_XQueryParser
    public final void synpred10_XQueryParser_fragment() throws RecognitionException {
        // XQueryParser.g:756:11: ( p_KindTest )
        // XQueryParser.g:756:12: p_KindTest
        {
            pushFollow(FOLLOW_p_KindTest_in_synpred10_XQueryParser6721);
            p_KindTest();

            state._fsp--;
            if (state.failed) {
                return;
            }

        }
    }

    // $ANTLR end synpred10_XQueryParser

    // $ANTLR start synpred11_XQueryParser
    public final void synpred11_XQueryParser_fragment() throws RecognitionException {
        // XQueryParser.g:757:11: ( p_QName LPAREN )
        // XQueryParser.g:757:12: p_QName LPAREN
        {
            pushFollow(FOLLOW_p_QName_in_synpred11_XQueryParser6740);
            p_QName();

            state._fsp--;
            if (state.failed) {
                return;
            }
            match(input, LPAREN, FOLLOW_LPAREN_in_synpred11_XQueryParser6742);
            if (state.failed) {
                return;
            }

        }
    }

    // $ANTLR end synpred11_XQueryParser

    // $ANTLR start synpred12_XQueryParser
    public final void synpred12_XQueryParser_fragment() throws RecognitionException {
        // XQueryParser.g:758:11: ( p_PrimaryExpr )
        // XQueryParser.g:758:12: p_PrimaryExpr
        {
            pushFollow(FOLLOW_p_PrimaryExpr_in_synpred12_XQueryParser6760);
            p_PrimaryExpr();

            state._fsp--;
            if (state.failed) {
                return;
            }

        }
    }

    // $ANTLR end synpred12_XQueryParser

    // $ANTLR start synpred13_XQueryParser
    public final void synpred13_XQueryParser_fragment() throws RecognitionException {
        // XQueryParser.g:816:11: ( p_Wildcard )
        // XQueryParser.g:816:12: p_Wildcard
        {
            pushFollow(FOLLOW_p_Wildcard_in_synpred13_XQueryParser7199);
            p_Wildcard();

            state._fsp--;
            if (state.failed) {
                return;
            }

        }
    }

    // $ANTLR end synpred13_XQueryParser

    // $ANTLR start synpred14_XQueryParser
    public final void synpred14_XQueryParser_fragment() throws RecognitionException {
        // XQueryParser.g:817:11: ( p_NCName COLON )
        // XQueryParser.g:817:12: p_NCName COLON
        {
            pushFollow(FOLLOW_p_NCName_in_synpred14_XQueryParser7218);
            p_NCName();

            state._fsp--;
            if (state.failed) {
                return;
            }
            match(input, COLON, FOLLOW_COLON_in_synpred14_XQueryParser7220);
            if (state.failed) {
                return;
            }

        }
    }

    // $ANTLR end synpred14_XQueryParser

    // $ANTLR start synpred15_XQueryParser
    public final void synpred15_XQueryParser_fragment() throws RecognitionException {
        // XQueryParser.g:818:11: ( p_NCName )
        // XQueryParser.g:818:12: p_NCName
        {
            pushFollow(FOLLOW_p_NCName_in_synpred15_XQueryParser7238);
            p_NCName();

            state._fsp--;
            if (state.failed) {
                return;
            }

        }
    }

    // $ANTLR end synpred15_XQueryParser

    // $ANTLR start synpred16_XQueryParser
    public final void synpred16_XQueryParser_fragment() throws RecognitionException {
        // XQueryParser.g:855:11: ( LPAREN )
        // XQueryParser.g:855:12: LPAREN
        {
            match(input, LPAREN, FOLLOW_LPAREN_in_synpred16_XQueryParser7494);
            if (state.failed) {
                return;
            }

        }
    }

    // $ANTLR end synpred16_XQueryParser

    // $ANTLR start synpred17_XQueryParser
    public final void synpred17_XQueryParser_fragment() throws RecognitionException {
        // XQueryParser.g:1134:26: ( p_OccurrenceIndicator )
        // XQueryParser.g:1134:27: p_OccurrenceIndicator
        {
            pushFollow(FOLLOW_p_OccurrenceIndicator_in_synpred17_XQueryParser9458);
            p_OccurrenceIndicator();

            state._fsp--;
            if (state.failed) {
                return;
            }

        }
    }

    // $ANTLR end synpred17_XQueryParser

    // $ANTLR start synpred18_XQueryParser
    public final void synpred18_XQueryParser_fragment() throws RecognitionException {
        // XQueryParser.g:1956:39: ( p_OccurrenceIndicator )
        // XQueryParser.g:1956:40: p_OccurrenceIndicator
        {
            pushFollow(FOLLOW_p_OccurrenceIndicator_in_synpred18_XQueryParser16971);
            p_OccurrenceIndicator();

            state._fsp--;
            if (state.failed) {
                return;
            }

        }
    }

    // $ANTLR end synpred18_XQueryParser

    // Delegated rules

    public final boolean synpred3_XQueryParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred3_XQueryParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: " + re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed = false;
        return success;
    }

    public final boolean synpred15_XQueryParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred15_XQueryParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: " + re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed = false;
        return success;
    }

    public final boolean synpred7_XQueryParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred7_XQueryParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: " + re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed = false;
        return success;
    }

    public final boolean synpred9_XQueryParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred9_XQueryParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: " + re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed = false;
        return success;
    }

    public final boolean synpred10_XQueryParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred10_XQueryParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: " + re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed = false;
        return success;
    }

    public final boolean synpred17_XQueryParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred17_XQueryParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: " + re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed = false;
        return success;
    }

    public final boolean synpred5_XQueryParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred5_XQueryParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: " + re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed = false;
        return success;
    }

    public final boolean synpred12_XQueryParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred12_XQueryParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: " + re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed = false;
        return success;
    }

    public final boolean synpred16_XQueryParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred16_XQueryParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: " + re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed = false;
        return success;
    }

    public final boolean synpred14_XQueryParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred14_XQueryParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: " + re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed = false;
        return success;
    }

    public final boolean synpred6_XQueryParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred6_XQueryParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: " + re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed = false;
        return success;
    }

    public final boolean synpred18_XQueryParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred18_XQueryParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: " + re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed = false;
        return success;
    }

    public final boolean synpred8_XQueryParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred8_XQueryParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: " + re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed = false;
        return success;
    }

    public final boolean synpred13_XQueryParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred13_XQueryParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: " + re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed = false;
        return success;
    }

    public final boolean synpred4_XQueryParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred4_XQueryParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: " + re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed = false;
        return success;
    }

    public final boolean synpred11_XQueryParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred11_XQueryParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: " + re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed = false;
        return success;
    }

    public final boolean synpred1_XQueryParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred1_XQueryParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: " + re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed = false;
        return success;
    }

    public final boolean synpred2_XQueryParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred2_XQueryParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: " + re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed = false;
        return success;
    }

    protected DFA1 dfa1 = new DFA1(this);
    protected DFA2 dfa2 = new DFA2(this);
    protected DFA6 dfa6 = new DFA6(this);
    protected DFA9 dfa9 = new DFA9(this);
    protected DFA44 dfa44 = new DFA44(this);
    protected DFA46 dfa46 = new DFA46(this);
    protected DFA115 dfa115 = new DFA115(this);
    protected DFA117 dfa117 = new DFA117(this);
    protected DFA119 dfa119 = new DFA119(this);
    protected DFA124 dfa124 = new DFA124(this);
    protected DFA132 dfa132 = new DFA132(this);
    protected DFA159 dfa159 = new DFA159(this);
    protected DFA161 dfa161 = new DFA161(this);
    protected DFA215 dfa215 = new DFA215(this);
    protected DFA234 dfa234 = new DFA234(this);
    protected DFA250 dfa250 = new DFA250(this);
    static final String DFA1_eotS = "\12\uffff";
    static final String DFA1_eofS = "\1\5\1\11\10\uffff";
    static final String DFA1_minS = "\1\20\1\22\10\uffff";
    static final String DFA1_maxS = "\1\u0154\1\u00fe\10\uffff";
    static final String DFA1_acceptS = "\2\uffff\4\2\1\1\3\2";
    static final String DFA1_specialS = "\1\0\1\1\10\uffff}>";
    static final String[] DFA1_transitionS = {
            "\2\2\4\4\1\2\6\4\1\2\1\4\1\2\2\4\1\2\1\4\2\2\2\4\3\2\5\4\1\2"
                + "\2\4\3\2\5\4\2\2\11\4\1\2\2\4\2\2\3\4\1\2\4\4\1\2\1\4\3\2\1"
                + "\4\1\2\3\4\4\2\3\4\1\2\3\4\1\2\1\4\3\2\2\4\1\1\14\4\1\2\11\4"
                + "\2\2\7\4\2\2\1\4\1\2\4\4\2\2\2\4\1\2\54\4\3\2\2\4\1\2\12\4\1"
                + "\2\3\4\1\uffff\1\2\1\uffff\2\2\6\uffff\1\3\4\uffff\4\2\5\uffff"
                + "\4\2\14\uffff\1\2\2\uffff\2\2\2\uffff\1\4\6\uffff\6\2\73\uffff" + "\1\4",
            "\1\7\10\uffff\2\7\12\uffff\1\7\6\uffff\1\6\1\7\1\uffff\1\7"
                        + "\5\uffff\1\7\1\uffff\2\7\4\uffff\3\7\2\uffff\1\7\2\uffff\2\7"
                        + "\2\uffff\1\7\5\uffff\1\7\24\uffff\2\7\1\uffff\1\7\3\uffff\1"
                        + "\6\62\uffff\1\7\73\uffff\2\7\4\uffff\1\7\1\uffff\1\7\1\uffff"
                        + "\1\7\3\uffff\1\7\1\uffff\13\7\2\uffff\1\7\3\uffff\1\10\1\7", "", "", "", "", "", "", "", "" };

    static final short[] DFA1_eot = DFA.unpackEncodedString(DFA1_eotS);
    static final short[] DFA1_eof = DFA.unpackEncodedString(DFA1_eofS);
    static final char[] DFA1_min = DFA.unpackEncodedStringToUnsignedChars(DFA1_minS);
    static final char[] DFA1_max = DFA.unpackEncodedStringToUnsignedChars(DFA1_maxS);
    static final short[] DFA1_accept = DFA.unpackEncodedString(DFA1_acceptS);
    static final short[] DFA1_special = DFA.unpackEncodedString(DFA1_specialS);
    static final short[][] DFA1_transition;

    static {
        int numStates = DFA1_transitionS.length;
        DFA1_transition = new short[numStates][];
        for (int i = 0; i < numStates; i++) {
            DFA1_transition[i] = DFA.unpackEncodedString(DFA1_transitionS[i]);
        }
    }

    class DFA1 extends DFA {

        public DFA1(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 1;
            this.eot = DFA1_eot;
            this.eof = DFA1_eof;
            this.min = DFA1_min;
            this.max = DFA1_max;
            this.accept = DFA1_accept;
            this.special = DFA1_special;
            this.transition = DFA1_transition;
        }

        public String getDescription() {
            return "130:13: (vd= p_VersionDecl )?";
        }

        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
            int _s = s;
            switch (s) {
            case 0:
                int LA1_0 = input.LA(1);

                int index1_0 = input.index();
                input.rewind();
                s = -1;
                if ((LA1_0 == XQUERY)) {
                    s = 1;
                }

                else if (((LA1_0 >= ANCESTOR && LA1_0 <= ANCESTOR_OR_SELF) || LA1_0 == ATTRIBUTE || LA1_0 == CHILD
                        || LA1_0 == COMMENT || LA1_0 == DECLARE || (LA1_0 >= DESCENDANT && LA1_0 <= DESCENDANT_OR_SELF)
                        || (LA1_0 >= DOCUMENT && LA1_0 <= ELEMENT) || LA1_0 == EVERY
                        || (LA1_0 >= FOLLOWING && LA1_0 <= FOR) || (LA1_0 >= IF && LA1_0 <= IMPORT) || LA1_0 == LET
                        || (LA1_0 >= MODULE && LA1_0 <= NAMESPACE) || LA1_0 == NODE || LA1_0 == ORDERED
                        || (LA1_0 >= PARENT && LA1_0 <= PRECEDING_SIBLING) || LA1_0 == PROCESSING_INSTRUCTION
                        || (LA1_0 >= SCHEMA_ATTRIBUTE && LA1_0 <= SOME) || LA1_0 == TEXT || LA1_0 == TYPESWITCH
                        || (LA1_0 >= UNORDERED && LA1_0 <= VARIABLE) || LA1_0 == NAMESPACE_NODE
                        || (LA1_0 >= SWITCH && LA1_0 <= TRY) || (LA1_0 >= COPY && LA1_0 <= DELETE) || LA1_0 == INSERT
                        || (LA1_0 >= RENAME && LA1_0 <= REPLACE) || LA1_0 == UPDATING
                        || (LA1_0 >= BREAK && LA1_0 <= EXIT) || LA1_0 == WHILE || LA1_0 == BINARY || LA1_0 == LPAREN
                        || (LA1_0 >= DOLLAR && LA1_0 <= LBRACKET) || (LA1_0 >= STAR && LA1_0 <= SMALLER)
                        || (LA1_0 >= SLASH && LA1_0 <= DOT_DOT) || LA1_0 == ATTR_SIGN
                        || (LA1_0 >= APOS && LA1_0 <= QUOT) || (LA1_0 >= L_Pragma && LA1_0 <= L_DoubleLiteral))) {
                    s = 2;
                }

                else if ((LA1_0 == ANN_PERCENT) && ((lc(XQS)))) {
                    s = 3;
                }

                else if (((LA1_0 >= AND && LA1_0 <= AT) || (LA1_0 >= BASE_URI && LA1_0 <= CASTABLE)
                        || LA1_0 == COLLATION || (LA1_0 >= CONSTRUCTION && LA1_0 <= COPY_NAMESPACES)
                        || LA1_0 == DEFAULT || (LA1_0 >= DESCENDING && LA1_0 <= DIV) || (LA1_0 >= ELSE && LA1_0 <= EQ)
                        || (LA1_0 >= EXCEPT && LA1_0 <= EXTERNAL) || (LA1_0 >= FUNCTION && LA1_0 <= IDIV)
                        || (LA1_0 >= IN && LA1_0 <= LEAST) || (LA1_0 >= LT && LA1_0 <= MOD)
                        || (LA1_0 >= NE && LA1_0 <= NO_PRESERVE) || (LA1_0 >= OF && LA1_0 <= ORDER)
                        || LA1_0 == ORDERING || LA1_0 == PRESERVE || (LA1_0 >= RETURN && LA1_0 <= SCHEMA)
                        || (LA1_0 >= STABLE && LA1_0 <= STRIP) || (LA1_0 >= THEN && LA1_0 <= TREAT) || LA1_0 == UNION
                        || (LA1_0 >= VERSION && LA1_0 <= WHERE) || (LA1_0 >= ALLOWING && LA1_0 <= MINUS_SIGN)
                        || (LA1_0 >= NAN && LA1_0 <= START) || (LA1_0 >= TUMBLING && LA1_0 <= BEFORE) || LA1_0 == FIRST
                        || (LA1_0 >= INTO && LA1_0 <= NODES) || (LA1_0 >= REVALIDATION && LA1_0 <= SKIP)
                        || (LA1_0 >= VALUE && LA1_0 <= WORDS) || (LA1_0 >= LOOP && LA1_0 <= RETURNING)
                        || (LA1_0 >= CHECK && LA1_0 <= UNIQUE) || (LA1_0 >= AMP_ER && LA1_0 <= QUOT_ER)
                        || LA1_0 == L_NCName || LA1_0 == EXPLICITLY)) {
                    s = 4;
                }

                else if ((LA1_0 == EOF) && ((lc(XQS)))) {
                    s = 5;
                }

                input.seek(index1_0);
                if (s >= 0) {
                    return s;
                }
                break;
            case 1:
                int LA1_1 = input.LA(1);

                int index1_1 = input.index();
                input.rewind();
                s = -1;
                if ((LA1_1 == ENCODING || LA1_1 == VERSION)) {
                    s = 6;
                }

                else if ((LA1_1 == AND || (LA1_1 >= CAST && LA1_1 <= CASTABLE) || LA1_1 == DIV || LA1_1 == EQ
                        || LA1_1 == EXCEPT || LA1_1 == GE || (LA1_1 >= GT && LA1_1 <= IDIV)
                        || (LA1_1 >= INSTANCE && LA1_1 <= IS) || LA1_1 == LE || (LA1_1 >= LT && LA1_1 <= MOD)
                        || LA1_1 == NE || LA1_1 == OR || (LA1_1 >= TO && LA1_1 <= TREAT) || LA1_1 == UNION
                        || LA1_1 == CONTAINS || (LA1_1 >= CONCAT && LA1_1 <= LPAREN) || LA1_1 == LSQUARE
                        || LA1_1 == EQUAL || LA1_1 == NOTEQUAL || LA1_1 == COMMA
                        || (LA1_1 >= STAR && LA1_1 <= SLASH_SLASH) || LA1_1 == COLON || LA1_1 == VBAR)) {
                    s = 7;
                }

                else if ((LA1_1 == SEMICOLON) && ((lc(XQS)))) {
                    s = 8;
                }

                else if ((LA1_1 == EOF)) {
                    s = 9;
                }

                input.seek(index1_1);
                if (s >= 0) {
                    return s;
                }
                break;
            }
            if (state.backtracking > 0) {
                state.failed = true;
                return -1;
            }
            NoViableAltException nvae = new NoViableAltException(getDescription(), 1, _s, input);
            error(nvae);
            throw nvae;
        }
    }

    static final String DFA2_eotS = "\12\uffff";
    static final String DFA2_eofS = "\1\5\1\11\10\uffff";
    static final String DFA2_minS = "\1\20\1\22\10\uffff";
    static final String DFA2_maxS = "\1\u0154\1\u00fe\10\uffff";
    static final String DFA2_acceptS = "\2\uffff\4\2\1\1\3\2";
    static final String DFA2_specialS = "\1\0\1\1\10\uffff}>";
    static final String[] DFA2_transitionS = {
            "\2\2\4\4\1\2\6\4\1\2\1\4\1\2\2\4\1\2\1\4\2\2\2\4\3\2\5\4\1\2"
                + "\2\4\3\2\5\4\2\2\11\4\1\2\2\4\1\1\1\2\3\4\1\2\4\4\1\2\1\4\3"
                + "\2\1\4\1\2\3\4\4\2\3\4\1\2\3\4\1\2\1\4\3\2\17\4\1\2\11\4\2\2"
                + "\7\4\2\2\1\4\1\2\4\4\2\2\2\4\1\2\54\4\3\2\2\4\1\2\12\4\1\2\3"
                + "\4\1\uffff\1\2\1\uffff\2\2\6\uffff\1\3\4\uffff\4\2\5\uffff\4"
                + "\2\14\uffff\1\2\2\uffff\2\2\2\uffff\1\4\6\uffff\6\2\73\uffff" + "\1\4",
            "\1\7\10\uffff\2\7\12\uffff\1\7\7\uffff\1\7\1\uffff\1\7\5\uffff"
                        + "\1\7\1\uffff\2\7\4\uffff\3\7\2\uffff\1\7\2\uffff\2\7\1\uffff"
                        + "\1\6\1\7\5\uffff\1\7\24\uffff\2\7\1\uffff\1\7\66\uffff\1\7\73"
                        + "\uffff\2\7\4\uffff\1\7\1\uffff\1\7\1\uffff\1\7\3\uffff\1\7\1"
                        + "\uffff\13\7\2\uffff\1\7\3\uffff\1\10\1\7", "", "", "", "", "", "", "", "" };

    static final short[] DFA2_eot = DFA.unpackEncodedString(DFA2_eotS);
    static final short[] DFA2_eof = DFA.unpackEncodedString(DFA2_eofS);
    static final char[] DFA2_min = DFA.unpackEncodedStringToUnsignedChars(DFA2_minS);
    static final char[] DFA2_max = DFA.unpackEncodedStringToUnsignedChars(DFA2_maxS);
    static final short[] DFA2_accept = DFA.unpackEncodedString(DFA2_acceptS);
    static final short[] DFA2_special = DFA.unpackEncodedString(DFA2_specialS);
    static final short[][] DFA2_transition;

    static {
        int numStates = DFA2_transitionS.length;
        DFA2_transition = new short[numStates][];
        for (int i = 0; i < numStates; i++) {
            DFA2_transition[i] = DFA.unpackEncodedString(DFA2_transitionS[i]);
        }
    }

    class DFA2 extends DFA {

        public DFA2(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 2;
            this.eot = DFA2_eot;
            this.eof = DFA2_eof;
            this.min = DFA2_min;
            this.max = DFA2_max;
            this.accept = DFA2_accept;
            this.special = DFA2_special;
            this.transition = DFA2_transition;
        }

        public String getDescription() {
            return "131:13: (lm= p_LibraryModule[$vd.tree] -> | mm= p_MainModule[$vd.tree] ->)";
        }

        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
            int _s = s;
            switch (s) {
            case 0:
                int LA2_0 = input.LA(1);

                int index2_0 = input.index();
                input.rewind();
                s = -1;
                if ((LA2_0 == MODULE)) {
                    s = 1;
                }

                else if (((LA2_0 >= ANCESTOR && LA2_0 <= ANCESTOR_OR_SELF) || LA2_0 == ATTRIBUTE || LA2_0 == CHILD
                        || LA2_0 == COMMENT || LA2_0 == DECLARE || (LA2_0 >= DESCENDANT && LA2_0 <= DESCENDANT_OR_SELF)
                        || (LA2_0 >= DOCUMENT && LA2_0 <= ELEMENT) || LA2_0 == EVERY
                        || (LA2_0 >= FOLLOWING && LA2_0 <= FOR) || (LA2_0 >= IF && LA2_0 <= IMPORT) || LA2_0 == LET
                        || LA2_0 == NAMESPACE || LA2_0 == NODE || LA2_0 == ORDERED
                        || (LA2_0 >= PARENT && LA2_0 <= PRECEDING_SIBLING) || LA2_0 == PROCESSING_INSTRUCTION
                        || (LA2_0 >= SCHEMA_ATTRIBUTE && LA2_0 <= SOME) || LA2_0 == TEXT || LA2_0 == TYPESWITCH
                        || (LA2_0 >= UNORDERED && LA2_0 <= VARIABLE) || LA2_0 == NAMESPACE_NODE
                        || (LA2_0 >= SWITCH && LA2_0 <= TRY) || (LA2_0 >= COPY && LA2_0 <= DELETE) || LA2_0 == INSERT
                        || (LA2_0 >= RENAME && LA2_0 <= REPLACE) || LA2_0 == UPDATING
                        || (LA2_0 >= BREAK && LA2_0 <= EXIT) || LA2_0 == WHILE || LA2_0 == BINARY || LA2_0 == LPAREN
                        || (LA2_0 >= DOLLAR && LA2_0 <= LBRACKET) || (LA2_0 >= STAR && LA2_0 <= SMALLER)
                        || (LA2_0 >= SLASH && LA2_0 <= DOT_DOT) || LA2_0 == ATTR_SIGN
                        || (LA2_0 >= APOS && LA2_0 <= QUOT) || (LA2_0 >= L_Pragma && LA2_0 <= L_DoubleLiteral))) {
                    s = 2;
                }

                else if ((LA2_0 == ANN_PERCENT) && ((lc(XQS)))) {
                    s = 3;
                }

                else if (((LA2_0 >= AND && LA2_0 <= AT) || (LA2_0 >= BASE_URI && LA2_0 <= CASTABLE)
                        || LA2_0 == COLLATION || (LA2_0 >= CONSTRUCTION && LA2_0 <= COPY_NAMESPACES)
                        || LA2_0 == DEFAULT || (LA2_0 >= DESCENDING && LA2_0 <= DIV) || (LA2_0 >= ELSE && LA2_0 <= EQ)
                        || (LA2_0 >= EXCEPT && LA2_0 <= EXTERNAL) || (LA2_0 >= FUNCTION && LA2_0 <= IDIV)
                        || (LA2_0 >= IN && LA2_0 <= LEAST) || (LA2_0 >= LT && LA2_0 <= MOD)
                        || (LA2_0 >= NE && LA2_0 <= NO_PRESERVE) || (LA2_0 >= OF && LA2_0 <= ORDER)
                        || LA2_0 == ORDERING || LA2_0 == PRESERVE || (LA2_0 >= RETURN && LA2_0 <= SCHEMA)
                        || (LA2_0 >= STABLE && LA2_0 <= STRIP) || (LA2_0 >= THEN && LA2_0 <= TREAT) || LA2_0 == UNION
                        || (LA2_0 >= VERSION && LA2_0 <= MINUS_SIGN) || (LA2_0 >= NAN && LA2_0 <= START)
                        || (LA2_0 >= TUMBLING && LA2_0 <= BEFORE) || LA2_0 == FIRST
                        || (LA2_0 >= INTO && LA2_0 <= NODES) || (LA2_0 >= REVALIDATION && LA2_0 <= SKIP)
                        || (LA2_0 >= VALUE && LA2_0 <= WORDS) || (LA2_0 >= LOOP && LA2_0 <= RETURNING)
                        || (LA2_0 >= CHECK && LA2_0 <= UNIQUE) || (LA2_0 >= AMP_ER && LA2_0 <= QUOT_ER)
                        || LA2_0 == L_NCName || LA2_0 == EXPLICITLY)) {
                    s = 4;
                }

                else if ((LA2_0 == EOF) && ((lc(XQS)))) {
                    s = 5;
                }

                input.seek(index2_0);
                if (s >= 0) {
                    return s;
                }
                break;
            case 1:
                int LA2_1 = input.LA(1);

                int index2_1 = input.index();
                input.rewind();
                s = -1;
                if ((LA2_1 == NAMESPACE)) {
                    s = 6;
                }

                else if ((LA2_1 == AND || (LA2_1 >= CAST && LA2_1 <= CASTABLE) || LA2_1 == DIV || LA2_1 == EQ
                        || LA2_1 == EXCEPT || LA2_1 == GE || (LA2_1 >= GT && LA2_1 <= IDIV)
                        || (LA2_1 >= INSTANCE && LA2_1 <= IS) || LA2_1 == LE || (LA2_1 >= LT && LA2_1 <= MOD)
                        || LA2_1 == NE || LA2_1 == OR || (LA2_1 >= TO && LA2_1 <= TREAT) || LA2_1 == UNION
                        || LA2_1 == CONTAINS || (LA2_1 >= CONCAT && LA2_1 <= LPAREN) || LA2_1 == LSQUARE
                        || LA2_1 == EQUAL || LA2_1 == NOTEQUAL || LA2_1 == COMMA
                        || (LA2_1 >= STAR && LA2_1 <= SLASH_SLASH) || LA2_1 == COLON || LA2_1 == VBAR)) {
                    s = 7;
                }

                else if ((LA2_1 == SEMICOLON) && ((lc(XQS)))) {
                    s = 8;
                }

                else if ((LA2_1 == EOF)) {
                    s = 9;
                }

                input.seek(index2_1);
                if (s >= 0) {
                    return s;
                }
                break;
            }
            if (state.backtracking > 0) {
                state.failed = true;
                return -1;
            }
            NoViableAltException nvae = new NoViableAltException(getDescription(), 2, _s, input);
            error(nvae);
            throw nvae;
        }
    }

    static final String DFA6_eotS = "\12\uffff";
    static final String DFA6_eofS = "\1\5\1\11\2\uffff\1\11\5\uffff";
    static final String DFA6_minS = "\1\20\1\22\2\uffff\1\22\5\uffff";
    static final String DFA6_maxS = "\1\u0154\1\u00fe\2\uffff\1\u00fe\5\uffff";
    static final String DFA6_acceptS = "\2\uffff\2\2\1\uffff\1\2\2\1\2\2";
    static final String DFA6_specialS = "\1\0\1\1\2\uffff\1\2\5\uffff}>";
    static final String[] DFA6_transitionS = {
            "\2\2\4\5\1\2\6\5\1\2\1\5\1\2\2\5\1\1\1\5\2\2\2\5\3\2\5\5\1\2"
                + "\2\5\3\2\5\5\1\2\1\4\11\5\1\2\3\5\1\2\3\5\1\2\4\5\1\2\1\5\3"
                + "\2\1\5\1\2\3\5\4\2\3\5\1\2\3\5\1\2\1\5\3\2\17\5\1\2\11\5\2\2"
                + "\7\5\2\2\1\5\1\2\4\5\2\2\2\5\1\2\54\5\3\2\2\5\1\2\12\5\1\2\3"
                + "\5\1\uffff\1\2\1\uffff\2\2\6\uffff\1\3\4\uffff\4\2\5\uffff\4"
                + "\2\14\uffff\1\2\2\uffff\2\2\2\uffff\1\5\6\uffff\6\2\73\uffff" + "\1\5",
            "\1\5\4\uffff\2\7\2\uffff\2\5\3\uffff\2\7\1\uffff\1\7\3\uffff"
                        + "\1\5\7\uffff\1\5\1\uffff\1\5\4\uffff\2\5\1\uffff\2\5\4\uffff"
                        + "\3\5\2\uffff\1\5\2\uffff\2\5\1\uffff\1\7\1\5\4\uffff\2\5\2\uffff"
                        + "\1\7\21\uffff\2\5\1\uffff\1\5\2\uffff\1\5\5\uffff\1\5\1\uffff"
                        + "\1\7\44\uffff\1\6\1\uffff\1\5\4\uffff\1\5\7\uffff\1\7\46\uffff"
                        + "\1\5\3\uffff\2\5\7\uffff\2\5\4\uffff\1\5\1\uffff\1\5\1\uffff"
                        + "\2\5\2\uffff\1\5\1\uffff\13\5\2\uffff\1\5\3\uffff\1\10\1\5",
            "",
            "",
            "\1\11\10\uffff\2\11\12\uffff\1\11\7\uffff\1\11\1\uffff\1\11"
                                + "\5\uffff\1\11\1\uffff\2\11\4\uffff\3\11\2\uffff\1\11\2\uffff"
                                + "\2\11\1\7\1\uffff\1\11\5\uffff\1\11\12\uffff\1\7\11\uffff\2"
                                + "\11\1\uffff\1\11\66\uffff\1\11\73\uffff\2\11\4\uffff\1\11\1"
                                + "\uffff\1\11\1\uffff\1\11\3\uffff\1\11\1\uffff\13\11\2\uffff" + "\1\11\3\uffff\1\10\1\11", "",
            "", "", "", "" };

    static final short[] DFA6_eot = DFA.unpackEncodedString(DFA6_eotS);
    static final short[] DFA6_eof = DFA.unpackEncodedString(DFA6_eofS);
    static final char[] DFA6_min = DFA.unpackEncodedStringToUnsignedChars(DFA6_minS);
    static final char[] DFA6_max = DFA.unpackEncodedStringToUnsignedChars(DFA6_maxS);
    static final short[] DFA6_accept = DFA.unpackEncodedString(DFA6_acceptS);
    static final short[] DFA6_special = DFA.unpackEncodedString(DFA6_specialS);
    static final short[][] DFA6_transition;

    static {
        int numStates = DFA6_transitionS.length;
        DFA6_transition = new short[numStates][];
        for (int i = 0; i < numStates; i++) {
            DFA6_transition[i] = DFA.unpackEncodedString(DFA6_transitionS[i]);
        }
    }

    class DFA6 extends DFA {

        public DFA6(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 6;
            this.eot = DFA6_eot;
            this.eof = DFA6_eof;
            this.min = DFA6_min;
            this.max = DFA6_max;
            this.accept = DFA6_accept;
            this.special = DFA6_special;
            this.transition = DFA6_transition;
        }

        public String getDescription() {
            return "()* loopback of 166:11: ( (dnd+= pm_DefaultNamespaceDecl | s+= p_Setter | nd+= pm_NamespaceDecl | i+= p_Import | fto+= pm_FTOptionDecl ) )*";
        }

        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
            int _s = s;
            switch (s) {
            case 0:
                int LA6_0 = input.LA(1);

                int index6_0 = input.index();
                input.rewind();
                s = -1;
                if ((LA6_0 == DECLARE)) {
                    s = 1;
                }

                else if (((LA6_0 >= ANCESTOR && LA6_0 <= ANCESTOR_OR_SELF) || LA6_0 == ATTRIBUTE || LA6_0 == CHILD
                        || LA6_0 == COMMENT || (LA6_0 >= DESCENDANT && LA6_0 <= DESCENDANT_OR_SELF)
                        || (LA6_0 >= DOCUMENT && LA6_0 <= ELEMENT) || LA6_0 == EVERY
                        || (LA6_0 >= FOLLOWING && LA6_0 <= FOR) || LA6_0 == IF || LA6_0 == LET || LA6_0 == NAMESPACE
                        || LA6_0 == NODE || LA6_0 == ORDERED || (LA6_0 >= PARENT && LA6_0 <= PRECEDING_SIBLING)
                        || LA6_0 == PROCESSING_INSTRUCTION || (LA6_0 >= SCHEMA_ATTRIBUTE && LA6_0 <= SOME)
                        || LA6_0 == TEXT || LA6_0 == TYPESWITCH || (LA6_0 >= UNORDERED && LA6_0 <= VARIABLE)
                        || LA6_0 == NAMESPACE_NODE || (LA6_0 >= SWITCH && LA6_0 <= TRY)
                        || (LA6_0 >= COPY && LA6_0 <= DELETE) || LA6_0 == INSERT
                        || (LA6_0 >= RENAME && LA6_0 <= REPLACE) || LA6_0 == UPDATING
                        || (LA6_0 >= BREAK && LA6_0 <= EXIT) || LA6_0 == WHILE || LA6_0 == BINARY || LA6_0 == LPAREN
                        || (LA6_0 >= DOLLAR && LA6_0 <= LBRACKET) || (LA6_0 >= STAR && LA6_0 <= SMALLER)
                        || (LA6_0 >= SLASH && LA6_0 <= DOT_DOT) || LA6_0 == ATTR_SIGN
                        || (LA6_0 >= APOS && LA6_0 <= QUOT) || (LA6_0 >= L_Pragma && LA6_0 <= L_DoubleLiteral))) {
                    s = 2;
                }

                else if ((LA6_0 == ANN_PERCENT) && ((lc(XQS)))) {
                    s = 3;
                }

                else if ((LA6_0 == IMPORT)) {
                    s = 4;
                }

                else if ((LA6_0 == EOF || (LA6_0 >= AND && LA6_0 <= AT) || (LA6_0 >= BASE_URI && LA6_0 <= CASTABLE)
                        || LA6_0 == COLLATION || (LA6_0 >= CONSTRUCTION && LA6_0 <= COPY_NAMESPACES)
                        || LA6_0 == DEFAULT || (LA6_0 >= DESCENDING && LA6_0 <= DIV) || (LA6_0 >= ELSE && LA6_0 <= EQ)
                        || (LA6_0 >= EXCEPT && LA6_0 <= EXTERNAL) || (LA6_0 >= FUNCTION && LA6_0 <= IDIV)
                        || (LA6_0 >= IN && LA6_0 <= LEAST) || (LA6_0 >= LT && LA6_0 <= MODULE)
                        || (LA6_0 >= NE && LA6_0 <= NO_PRESERVE) || (LA6_0 >= OF && LA6_0 <= ORDER)
                        || LA6_0 == ORDERING || LA6_0 == PRESERVE || (LA6_0 >= RETURN && LA6_0 <= SCHEMA)
                        || (LA6_0 >= STABLE && LA6_0 <= STRIP) || (LA6_0 >= THEN && LA6_0 <= TREAT) || LA6_0 == UNION
                        || (LA6_0 >= VERSION && LA6_0 <= MINUS_SIGN) || (LA6_0 >= NAN && LA6_0 <= START)
                        || (LA6_0 >= TUMBLING && LA6_0 <= BEFORE) || LA6_0 == FIRST
                        || (LA6_0 >= INTO && LA6_0 <= NODES) || (LA6_0 >= REVALIDATION && LA6_0 <= SKIP)
                        || (LA6_0 >= VALUE && LA6_0 <= WORDS) || (LA6_0 >= LOOP && LA6_0 <= RETURNING)
                        || (LA6_0 >= CHECK && LA6_0 <= UNIQUE) || (LA6_0 >= AMP_ER && LA6_0 <= QUOT_ER)
                        || LA6_0 == L_NCName || LA6_0 == EXPLICITLY)) {
                    s = 5;
                }

                input.seek(index6_0);
                if (s >= 0) {
                    return s;
                }
                break;
            case 1:
                int LA6_1 = input.LA(1);

                int index6_1 = input.index();
                input.rewind();
                s = -1;
                if ((LA6_1 == REVALIDATION) && ((lc(XQU)))) {
                    s = 6;
                }

                else if (((LA6_1 >= BASE_URI && LA6_1 <= BOUNDARY_SPACE)
                        || (LA6_1 >= CONSTRUCTION && LA6_1 <= COPY_NAMESPACES) || LA6_1 == DEFAULT
                        || LA6_1 == NAMESPACE || LA6_1 == ORDERING || LA6_1 == DECIMAL_FORMAT || LA6_1 == FT_OPTION)) {
                    s = 7;
                }

                else if ((LA6_1 == AND || (LA6_1 >= CAST && LA6_1 <= CASTABLE) || LA6_1 == DIV || LA6_1 == EQ
                        || LA6_1 == EXCEPT || (LA6_1 >= FUNCTION && LA6_1 <= GE) || (LA6_1 >= GT && LA6_1 <= IDIV)
                        || (LA6_1 >= INSTANCE && LA6_1 <= IS) || LA6_1 == LE || (LA6_1 >= LT && LA6_1 <= MOD)
                        || LA6_1 == NE || (LA6_1 >= OPTION && LA6_1 <= OR) || (LA6_1 >= TO && LA6_1 <= TREAT)
                        || LA6_1 == UNION || LA6_1 == VARIABLE || LA6_1 == CONTEXT || LA6_1 == UPDATING
                        || LA6_1 == CONTAINS || LA6_1 == COLLECTION || (LA6_1 >= INDEX && LA6_1 <= INTEGRITY)
                        || (LA6_1 >= CONCAT && LA6_1 <= LPAREN) || LA6_1 == LSQUARE || LA6_1 == EQUAL
                        || (LA6_1 >= NOTEQUAL && LA6_1 <= ANN_PERCENT) || LA6_1 == COMMA
                        || (LA6_1 >= STAR && LA6_1 <= SLASH_SLASH) || LA6_1 == COLON || LA6_1 == VBAR)) {
                    s = 5;
                }

                else if ((LA6_1 == SEMICOLON) && ((lc(XQS)))) {
                    s = 8;
                }

                else if ((LA6_1 == EOF)) {
                    s = 9;
                }

                input.seek(index6_1);
                if (s >= 0) {
                    return s;
                }
                break;
            case 2:
                int LA6_4 = input.LA(1);

                int index6_4 = input.index();
                input.rewind();
                s = -1;
                if ((LA6_4 == EOF || LA6_4 == AND || (LA6_4 >= CAST && LA6_4 <= CASTABLE) || LA6_4 == DIV
                        || LA6_4 == EQ || LA6_4 == EXCEPT || LA6_4 == GE || (LA6_4 >= GT && LA6_4 <= IDIV)
                        || (LA6_4 >= INSTANCE && LA6_4 <= IS) || LA6_4 == LE || (LA6_4 >= LT && LA6_4 <= MOD)
                        || LA6_4 == NE || LA6_4 == OR || (LA6_4 >= TO && LA6_4 <= TREAT) || LA6_4 == UNION
                        || LA6_4 == CONTAINS || (LA6_4 >= CONCAT && LA6_4 <= LPAREN) || LA6_4 == LSQUARE
                        || LA6_4 == EQUAL || LA6_4 == NOTEQUAL || LA6_4 == COMMA
                        || (LA6_4 >= STAR && LA6_4 <= SLASH_SLASH) || LA6_4 == COLON || LA6_4 == VBAR)) {
                    s = 9;
                }

                else if ((LA6_4 == SEMICOLON) && ((lc(XQS)))) {
                    s = 8;
                }

                else if ((LA6_4 == MODULE || LA6_4 == SCHEMA)) {
                    s = 7;
                }

                input.seek(index6_4);
                if (s >= 0) {
                    return s;
                }
                break;
            }
            if (state.backtracking > 0) {
                state.failed = true;
                return -1;
            }
            NoViableAltException nvae = new NoViableAltException(getDescription(), 6, _s, input);
            error(nvae);
            throw nvae;
        }
    }

    static final String DFA9_eotS = "\14\uffff";
    static final String DFA9_eofS = "\14\uffff";
    static final String DFA9_minS = "\1\42\1\27\2\uffff\1\36\7\uffff";
    static final String DFA9_maxS = "\1\42\1\u0099\2\uffff\1\164\7\uffff";
    static final String DFA9_acceptS = "\2\uffff\1\7\1\1\1\uffff\1\3\1\4\1\5\1\10\1\11\1\2\1\6";
    static final String DFA9_specialS = "\1\uffff\1\0\12\uffff}>";
    static final String[] DFA9_transitionS = { "\1\1",
            "\1\5\1\3\7\uffff\1\6\1\10\1\uffff\1\4\60\uffff\1\7\37\uffff" + "\1\11\44\uffff\1\2", "", "",
            "\1\12\63\uffff\1\13\41\uffff\1\11", "", "", "", "", "", "", "" };

    static final short[] DFA9_eot = DFA.unpackEncodedString(DFA9_eotS);
    static final short[] DFA9_eof = DFA.unpackEncodedString(DFA9_eofS);
    static final char[] DFA9_min = DFA.unpackEncodedStringToUnsignedChars(DFA9_minS);
    static final char[] DFA9_max = DFA.unpackEncodedStringToUnsignedChars(DFA9_maxS);
    static final short[] DFA9_accept = DFA.unpackEncodedString(DFA9_acceptS);
    static final short[] DFA9_special = DFA.unpackEncodedString(DFA9_specialS);
    static final short[][] DFA9_transition;

    static {
        int numStates = DFA9_transitionS.length;
        DFA9_transition = new short[numStates][];
        for (int i = 0; i < numStates; i++) {
            DFA9_transition[i] = DFA.unpackEncodedString(DFA9_transitionS[i]);
        }
    }

    class DFA9 extends DFA {

        public DFA9(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 9;
            this.eot = DFA9_eot;
            this.eof = DFA9_eof;
            this.min = DFA9_min;
            this.max = DFA9_max;
            this.accept = DFA9_accept;
            this.special = DFA9_special;
            this.transition = DFA9_transition;
        }

        public String getDescription() {
            return "192:1: p_Setter : ( pm_BoundarySpaceDecl | pm_DefaultCollationDecl | pm_BaseURIDecl | pm_ConstructionDecl | pm_OrderingModeDecl | pm_EmptyOrderDecl | {...}? => pm_RevalidationDecl | pm_CopyNamespacesDecl | pm_DecimalFormatDecl );";
        }

        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
            int _s = s;
            switch (s) {
            case 0:
                int LA9_1 = input.LA(1);

                int index9_1 = input.index();
                input.rewind();
                s = -1;
                if ((LA9_1 == REVALIDATION) && ((lc(XQU)))) {
                    s = 2;
                }

                else if ((LA9_1 == BOUNDARY_SPACE)) {
                    s = 3;
                }

                else if ((LA9_1 == DEFAULT)) {
                    s = 4;
                }

                else if ((LA9_1 == BASE_URI)) {
                    s = 5;
                }

                else if ((LA9_1 == CONSTRUCTION)) {
                    s = 6;
                }

                else if ((LA9_1 == ORDERING)) {
                    s = 7;
                }

                else if ((LA9_1 == COPY_NAMESPACES)) {
                    s = 8;
                }

                else if ((LA9_1 == DECIMAL_FORMAT)) {
                    s = 9;
                }

                input.seek(index9_1);
                if (s >= 0) {
                    return s;
                }
                break;
            }
            if (state.backtracking > 0) {
                state.failed = true;
                return -1;
            }
            NoViableAltException nvae = new NoViableAltException(getDescription(), 9, _s, input);
            error(nvae);
            throw nvae;
        }
    }

    static final String DFA44_eotS = "\106\uffff";
    static final String DFA44_eofS = "\1\101\105\uffff";
    static final String DFA44_minS = "\1\20\100\0\1\uffff\2\0\2\uffff";
    static final String DFA44_maxS = "\1\u0154\100\0\1\uffff\2\0\2\uffff";
    static final String DFA44_acceptS = "\101\uffff\1\1\3\uffff\1\2";
    static final String DFA44_specialS = "\1\0\1\1\1\2\1\3\1\4\1\5\1\6\1\7\1\10\1\11\1\12\1\13\1\14\1\15\1"
            + "\16\1\17\1\20\1\21\1\22\1\23\1\24\1\25\1\26\1\27\1\30\1\31\1\32"
            + "\1\33\1\34\1\35\1\36\1\37\1\40\1\41\1\42\1\43\1\44\1\45\1\46\1\47"
            + "\1\50\1\51\1\52\1\53\1\54\1\55\1\56\1\57\1\60\1\61\1\62\1\63\1\64"
            + "\1\65\1\66\1\67\1\70\1\71\1\72\1\73\1\74\1\75\1\76\1\77\1\100\1" + "\uffff\1\101\1\102\2\uffff}>";
    static final String[] DFA44_transitionS = {
            "\1\45\1\50\4\102\1\35\6\102\1\51\1\102\1\40\4\102\1\53\1\55"
                + "\2\102\1\30\1\42\1\25\2\102\1\103\2\102\1\10\2\102\1\57\1\56"
                + "\1\1\5\102\1\3\6\102\1\103\3\102\1\2\3\102\1\34\3\102\1\65\4"
                + "\102\1\24\1\102\1\43\1\47\1\46\1\102\1\41\3\102\1\63\1\62\1"
                + "\54\1\7\3\102\1\36\3\102\1\5\1\102\1\27\1\13\1\100\17\102\1"
                + "\64\11\102\1\4\1\6\7\102\1\74\1\71\1\102\1\60\4\102\1\72\1\73"
                + "\2\102\1\26\54\102\1\75\1\76\1\77\2\102\1\66\12\102\1\37\3\102"
                + "\1\uffff\1\16\1\uffff\1\22\1\44\6\uffff\1\101\4\uffff\1\67\1"
                + "\11\1\12\1\31\5\uffff\1\14\1\15\1\23\1\52\14\uffff\1\61\2\uffff"
                + "\1\21\1\20\2\uffff\1\102\6\uffff\1\70\1\32\1\33\3\17\73\uffff" + "\1\102", "\1\uffff",
            "\1\uffff", "\1\uffff", "\1\uffff", "\1\uffff", "\1\uffff", "\1\uffff", "\1\uffff", "\1\uffff", "\1\uffff",
            "\1\uffff", "\1\uffff", "\1\uffff", "\1\uffff", "\1\uffff", "\1\uffff", "\1\uffff", "\1\uffff", "\1\uffff",
            "\1\uffff", "\1\uffff", "\1\uffff", "\1\uffff", "\1\uffff", "\1\uffff", "\1\uffff", "\1\uffff", "\1\uffff",
            "\1\uffff", "\1\uffff", "\1\uffff", "\1\uffff", "\1\uffff", "\1\uffff", "\1\uffff", "\1\uffff", "\1\uffff",
            "\1\uffff", "\1\uffff", "\1\uffff", "\1\uffff", "\1\uffff", "\1\uffff", "\1\uffff", "\1\uffff", "\1\uffff",
            "\1\uffff", "\1\uffff", "\1\uffff", "\1\uffff", "\1\uffff", "\1\uffff", "\1\uffff", "\1\uffff", "\1\uffff",
            "\1\uffff", "\1\uffff", "\1\uffff", "\1\uffff", "\1\uffff", "\1\uffff", "\1\uffff", "\1\uffff", "\1\uffff",
            "", "\1\uffff", "\1\uffff", "", "" };

    static final short[] DFA44_eot = DFA.unpackEncodedString(DFA44_eotS);
    static final short[] DFA44_eof = DFA.unpackEncodedString(DFA44_eofS);
    static final char[] DFA44_min = DFA.unpackEncodedStringToUnsignedChars(DFA44_minS);
    static final char[] DFA44_max = DFA.unpackEncodedStringToUnsignedChars(DFA44_maxS);
    static final short[] DFA44_accept = DFA.unpackEncodedString(DFA44_acceptS);
    static final short[] DFA44_special = DFA.unpackEncodedString(DFA44_specialS);
    static final short[][] DFA44_transition;

    static {
        int numStates = DFA44_transitionS.length;
        DFA44_transition = new short[numStates][];
        for (int i = 0; i < numStates; i++) {
            DFA44_transition[i] = DFA.unpackEncodedString(DFA44_transitionS[i]);
        }
    }

    class DFA44 extends DFA {

        public DFA44(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 44;
            this.eot = DFA44_eot;
            this.eof = DFA44_eof;
            this.min = DFA44_min;
            this.max = DFA44_max;
            this.accept = DFA44_accept;
            this.special = DFA44_special;
            this.transition = DFA44_transition;
        }

        public String getDescription() {
            return "371:1: pm_QueryBody : ({...}? => p_Program | p_Expr[true,true] );";
        }

        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
            int _s = s;
            switch (s) {
            case 0:
                int LA44_0 = input.LA(1);

                int index44_0 = input.index();
                input.rewind();
                s = -1;
                if ((LA44_0 == FOR)) {
                    s = 1;
                }

                else if ((LA44_0 == LET)) {
                    s = 2;
                }

                else if ((LA44_0 == IF)) {
                    s = 3;
                }

                else if ((LA44_0 == SWITCH)) {
                    s = 4;
                }

                else if ((LA44_0 == TYPESWITCH)) {
                    s = 5;
                }

                else if ((LA44_0 == TRY)) {
                    s = 6;
                }

                else if ((LA44_0 == SOME)) {
                    s = 7;
                }

                else if ((LA44_0 == EVERY)) {
                    s = 8;
                }

                else if ((LA44_0 == PLUS)) {
                    s = 9;
                }

                else if ((LA44_0 == MINUS)) {
                    s = 10;
                }

                else if ((LA44_0 == VALIDATE)) {
                    s = 11;
                }

                else if ((LA44_0 == SLASH)) {
                    s = 12;
                }

                else if ((LA44_0 == SLASH_SLASH)) {
                    s = 13;
                }

                else if ((LA44_0 == LPAREN)) {
                    s = 14;
                }

                else if (((LA44_0 >= L_IntegerLiteral && LA44_0 <= L_DoubleLiteral))) {
                    s = 15;
                }

                else if ((LA44_0 == QUOT)) {
                    s = 16;
                }

                else if ((LA44_0 == APOS)) {
                    s = 17;
                }

                else if ((LA44_0 == DOLLAR)) {
                    s = 18;
                }

                else if ((LA44_0 == DOT)) {
                    s = 19;
                }

                else if ((LA44_0 == ORDERED)) {
                    s = 20;
                }

                else if ((LA44_0 == ELEMENT)) {
                    s = 21;
                }

                else if ((LA44_0 == UPDATING)) {
                    s = 22;
                }

                else if ((LA44_0 == UNORDERED)) {
                    s = 23;
                }

                else if ((LA44_0 == DOCUMENT)) {
                    s = 24;
                }

                else if ((LA44_0 == SMALLER)) {
                    s = 25;
                }

                else if ((LA44_0 == L_DirCommentConstructor)) {
                    s = 26;
                }

                else if ((LA44_0 == L_DirPIConstructor)) {
                    s = 27;
                }

                else if ((LA44_0 == NAMESPACE)) {
                    s = 28;
                }

                else if ((LA44_0 == ATTRIBUTE)) {
                    s = 29;
                }

                else if ((LA44_0 == TEXT)) {
                    s = 30;
                }

                else if ((LA44_0 == BINARY)) {
                    s = 31;
                }

                else if ((LA44_0 == COMMENT)) {
                    s = 32;
                }

                else if ((LA44_0 == PROCESSING_INSTRUCTION)) {
                    s = 33;
                }

                else if ((LA44_0 == DOCUMENT_NODE)) {
                    s = 34;
                }

                else if ((LA44_0 == PARENT)) {
                    s = 35;
                }

                else if ((LA44_0 == LBRACKET)) {
                    s = 36;
                }

                else if ((LA44_0 == ANCESTOR)) {
                    s = 37;
                }

                else if ((LA44_0 == PRECEDING_SIBLING)) {
                    s = 38;
                }

                else if ((LA44_0 == PRECEDING)) {
                    s = 39;
                }

                else if ((LA44_0 == ANCESTOR_OR_SELF)) {
                    s = 40;
                }

                else if ((LA44_0 == CHILD)) {
                    s = 41;
                }

                else if ((LA44_0 == DOT_DOT)) {
                    s = 42;
                }

                else if ((LA44_0 == DESCENDANT)) {
                    s = 43;
                }

                else if ((LA44_0 == SELF)) {
                    s = 44;
                }

                else if ((LA44_0 == DESCENDANT_OR_SELF)) {
                    s = 45;
                }

                else if ((LA44_0 == FOLLOWING_SIBLING)) {
                    s = 46;
                }

                else if ((LA44_0 == FOLLOWING)) {
                    s = 47;
                }

                else if ((LA44_0 == INSERT)) {
                    s = 48;
                }

                else if ((LA44_0 == ATTR_SIGN)) {
                    s = 49;
                }

                else if ((LA44_0 == SCHEMA_ELEMENT)) {
                    s = 50;
                }

                else if ((LA44_0 == SCHEMA_ATTRIBUTE)) {
                    s = 51;
                }

                else if ((LA44_0 == NAMESPACE_NODE)) {
                    s = 52;
                }

                else if ((LA44_0 == NODE)) {
                    s = 53;
                }

                else if ((LA44_0 == WHILE)) {
                    s = 54;
                }

                else if ((LA44_0 == STAR)) {
                    s = 55;
                }

                else if ((LA44_0 == L_Pragma)) {
                    s = 56;
                }

                else if ((LA44_0 == DELETE)) {
                    s = 57;
                }

                else if ((LA44_0 == RENAME)) {
                    s = 58;
                }

                else if ((LA44_0 == REPLACE)) {
                    s = 59;
                }

                else if ((LA44_0 == COPY)) {
                    s = 60;
                }

                else if ((LA44_0 == BREAK)) {
                    s = 61;
                }

                else if ((LA44_0 == CONTINUE)) {
                    s = 62;
                }

                else if ((LA44_0 == EXIT)) {
                    s = 63;
                }

                else if ((LA44_0 == VARIABLE)) {
                    s = 64;
                }

                else if ((LA44_0 == EOF || LA44_0 == ANN_PERCENT) && ((lc(XQS)))) {
                    s = 65;
                }

                else if (((LA44_0 >= AND && LA44_0 <= AT) || (LA44_0 >= BASE_URI && LA44_0 <= CASTABLE)
                        || LA44_0 == COLLATION || (LA44_0 >= CONSTRUCTION && LA44_0 <= DEFAULT)
                        || (LA44_0 >= DESCENDING && LA44_0 <= DIV) || (LA44_0 >= ELSE && LA44_0 <= EMPTY)
                        || (LA44_0 >= ENCODING && LA44_0 <= EQ) || (LA44_0 >= EXCEPT && LA44_0 <= EXTERNAL)
                        || (LA44_0 >= FUNCTION && LA44_0 <= IDIV) || (LA44_0 >= IMPORT && LA44_0 <= IS)
                        || (LA44_0 >= LAX && LA44_0 <= LEAST) || (LA44_0 >= LT && LA44_0 <= MODULE)
                        || (LA44_0 >= NE && LA44_0 <= NO_PRESERVE) || (LA44_0 >= OF && LA44_0 <= ORDER)
                        || LA44_0 == ORDERING || LA44_0 == PRESERVE || (LA44_0 >= RETURN && LA44_0 <= SCHEMA)
                        || (LA44_0 >= STABLE && LA44_0 <= STRIP) || (LA44_0 >= THEN && LA44_0 <= TREAT)
                        || LA44_0 == UNION || (LA44_0 >= VERSION && LA44_0 <= MINUS_SIGN)
                        || (LA44_0 >= NAN && LA44_0 <= START) || (LA44_0 >= TUMBLING && LA44_0 <= BEFORE)
                        || LA44_0 == FIRST || (LA44_0 >= INTO && LA44_0 <= NODES)
                        || (LA44_0 >= REVALIDATION && LA44_0 <= SKIP) || (LA44_0 >= VALUE && LA44_0 <= WORDS)
                        || (LA44_0 >= LOOP && LA44_0 <= RETURNING) || (LA44_0 >= CHECK && LA44_0 <= UNIQUE)
                        || (LA44_0 >= AMP_ER && LA44_0 <= QUOT_ER) || LA44_0 == L_NCName || LA44_0 == EXPLICITLY)) {
                    s = 66;
                }

                else if ((LA44_0 == EMPTY_SEQUENCE || LA44_0 == ITEM)) {
                    s = 67;
                }

                input.seek(index44_0);
                if (s >= 0) {
                    return s;
                }
                break;
            case 1:
                int LA44_1 = input.LA(1);

                int index44_1 = input.index();
                input.rewind();
                s = -1;
                if (((lc(XQS)))) {
                    s = 65;
                }

                else if ((true)) {
                    s = 69;
                }

                input.seek(index44_1);
                if (s >= 0) {
                    return s;
                }
                break;
            case 2:
                int LA44_2 = input.LA(1);

                int index44_2 = input.index();
                input.rewind();
                s = -1;
                if (((lc(XQS)))) {
                    s = 65;
                }

                else if ((true)) {
                    s = 69;
                }

                input.seek(index44_2);
                if (s >= 0) {
                    return s;
                }
                break;
            case 3:
                int LA44_3 = input.LA(1);

                int index44_3 = input.index();
                input.rewind();
                s = -1;
                if (((lc(XQS)))) {
                    s = 65;
                }

                else if ((true)) {
                    s = 69;
                }

                input.seek(index44_3);
                if (s >= 0) {
                    return s;
                }
                break;
            case 4:
                int LA44_4 = input.LA(1);

                int index44_4 = input.index();
                input.rewind();
                s = -1;
                if (((lc(XQS)))) {
                    s = 65;
                }

                else if ((true)) {
                    s = 69;
                }

                input.seek(index44_4);
                if (s >= 0) {
                    return s;
                }
                break;
            case 5:
                int LA44_5 = input.LA(1);

                int index44_5 = input.index();
                input.rewind();
                s = -1;
                if (((lc(XQS)))) {
                    s = 65;
                }

                else if ((true)) {
                    s = 69;
                }

                input.seek(index44_5);
                if (s >= 0) {
                    return s;
                }
                break;
            case 6:
                int LA44_6 = input.LA(1);

                int index44_6 = input.index();
                input.rewind();
                s = -1;
                if (((lc(XQS)))) {
                    s = 65;
                }

                else if ((true)) {
                    s = 69;
                }

                input.seek(index44_6);
                if (s >= 0) {
                    return s;
                }
                break;
            case 7:
                int LA44_7 = input.LA(1);

                int index44_7 = input.index();
                input.rewind();
                s = -1;
                if (((lc(XQS)))) {
                    s = 65;
                }

                else if ((true)) {
                    s = 69;
                }

                input.seek(index44_7);
                if (s >= 0) {
                    return s;
                }
                break;
            case 8:
                int LA44_8 = input.LA(1);

                int index44_8 = input.index();
                input.rewind();
                s = -1;
                if (((lc(XQS)))) {
                    s = 65;
                }

                else if ((true)) {
                    s = 69;
                }

                input.seek(index44_8);
                if (s >= 0) {
                    return s;
                }
                break;
            case 9:
                int LA44_9 = input.LA(1);

                int index44_9 = input.index();
                input.rewind();
                s = -1;
                if (((lc(XQS)))) {
                    s = 65;
                }

                else if ((true)) {
                    s = 69;
                }

                input.seek(index44_9);
                if (s >= 0) {
                    return s;
                }
                break;
            case 10:
                int LA44_10 = input.LA(1);

                int index44_10 = input.index();
                input.rewind();
                s = -1;
                if (((lc(XQS)))) {
                    s = 65;
                }

                else if ((true)) {
                    s = 69;
                }

                input.seek(index44_10);
                if (s >= 0) {
                    return s;
                }
                break;
            case 11:
                int LA44_11 = input.LA(1);

                int index44_11 = input.index();
                input.rewind();
                s = -1;
                if (((lc(XQS)))) {
                    s = 65;
                }

                else if ((true)) {
                    s = 69;
                }

                input.seek(index44_11);
                if (s >= 0) {
                    return s;
                }
                break;
            case 12:
                int LA44_12 = input.LA(1);

                int index44_12 = input.index();
                input.rewind();
                s = -1;
                if (((lc(XQS)))) {
                    s = 65;
                }

                else if ((true)) {
                    s = 69;
                }

                input.seek(index44_12);
                if (s >= 0) {
                    return s;
                }
                break;
            case 13:
                int LA44_13 = input.LA(1);

                int index44_13 = input.index();
                input.rewind();
                s = -1;
                if (((lc(XQS)))) {
                    s = 65;
                }

                else if ((true)) {
                    s = 69;
                }

                input.seek(index44_13);
                if (s >= 0) {
                    return s;
                }
                break;
            case 14:
                int LA44_14 = input.LA(1);

                int index44_14 = input.index();
                input.rewind();
                s = -1;
                if (((lc(XQS)))) {
                    s = 65;
                }

                else if ((true)) {
                    s = 69;
                }

                input.seek(index44_14);
                if (s >= 0) {
                    return s;
                }
                break;
            case 15:
                int LA44_15 = input.LA(1);

                int index44_15 = input.index();
                input.rewind();
                s = -1;
                if (((lc(XQS)))) {
                    s = 65;
                }

                else if ((true)) {
                    s = 69;
                }

                input.seek(index44_15);
                if (s >= 0) {
                    return s;
                }
                break;
            case 16:
                int LA44_16 = input.LA(1);

                int index44_16 = input.index();
                input.rewind();
                s = -1;
                if (((lc(XQS)))) {
                    s = 65;
                }

                else if ((true)) {
                    s = 69;
                }

                input.seek(index44_16);
                if (s >= 0) {
                    return s;
                }
                break;
            case 17:
                int LA44_17 = input.LA(1);

                int index44_17 = input.index();
                input.rewind();
                s = -1;
                if (((lc(XQS)))) {
                    s = 65;
                }

                else if ((true)) {
                    s = 69;
                }

                input.seek(index44_17);
                if (s >= 0) {
                    return s;
                }
                break;
            case 18:
                int LA44_18 = input.LA(1);

                int index44_18 = input.index();
                input.rewind();
                s = -1;
                if (((lc(XQS)))) {
                    s = 65;
                }

                else if ((true)) {
                    s = 69;
                }

                input.seek(index44_18);
                if (s >= 0) {
                    return s;
                }
                break;
            case 19:
                int LA44_19 = input.LA(1);

                int index44_19 = input.index();
                input.rewind();
                s = -1;
                if (((lc(XQS)))) {
                    s = 65;
                }

                else if ((true)) {
                    s = 69;
                }

                input.seek(index44_19);
                if (s >= 0) {
                    return s;
                }
                break;
            case 20:
                int LA44_20 = input.LA(1);

                int index44_20 = input.index();
                input.rewind();
                s = -1;
                if (((lc(XQS)))) {
                    s = 65;
                }

                else if ((true)) {
                    s = 69;
                }

                input.seek(index44_20);
                if (s >= 0) {
                    return s;
                }
                break;
            case 21:
                int LA44_21 = input.LA(1);

                int index44_21 = input.index();
                input.rewind();
                s = -1;
                if (((lc(XQS)))) {
                    s = 65;
                }

                else if ((true)) {
                    s = 69;
                }

                input.seek(index44_21);
                if (s >= 0) {
                    return s;
                }
                break;
            case 22:
                int LA44_22 = input.LA(1);

                int index44_22 = input.index();
                input.rewind();
                s = -1;
                if (((lc(XQS)))) {
                    s = 65;
                }

                else if ((true)) {
                    s = 69;
                }

                input.seek(index44_22);
                if (s >= 0) {
                    return s;
                }
                break;
            case 23:
                int LA44_23 = input.LA(1);

                int index44_23 = input.index();
                input.rewind();
                s = -1;
                if (((lc(XQS)))) {
                    s = 65;
                }

                else if ((true)) {
                    s = 69;
                }

                input.seek(index44_23);
                if (s >= 0) {
                    return s;
                }
                break;
            case 24:
                int LA44_24 = input.LA(1);

                int index44_24 = input.index();
                input.rewind();
                s = -1;
                if (((lc(XQS)))) {
                    s = 65;
                }

                else if ((true)) {
                    s = 69;
                }

                input.seek(index44_24);
                if (s >= 0) {
                    return s;
                }
                break;
            case 25:
                int LA44_25 = input.LA(1);

                int index44_25 = input.index();
                input.rewind();
                s = -1;
                if (((lc(XQS)))) {
                    s = 65;
                }

                else if ((true)) {
                    s = 69;
                }

                input.seek(index44_25);
                if (s >= 0) {
                    return s;
                }
                break;
            case 26:
                int LA44_26 = input.LA(1);

                int index44_26 = input.index();
                input.rewind();
                s = -1;
                if (((lc(XQS)))) {
                    s = 65;
                }

                else if ((true)) {
                    s = 69;
                }

                input.seek(index44_26);
                if (s >= 0) {
                    return s;
                }
                break;
            case 27:
                int LA44_27 = input.LA(1);

                int index44_27 = input.index();
                input.rewind();
                s = -1;
                if (((lc(XQS)))) {
                    s = 65;
                }

                else if ((true)) {
                    s = 69;
                }

                input.seek(index44_27);
                if (s >= 0) {
                    return s;
                }
                break;
            case 28:
                int LA44_28 = input.LA(1);

                int index44_28 = input.index();
                input.rewind();
                s = -1;
                if (((lc(XQS)))) {
                    s = 65;
                }

                else if ((true)) {
                    s = 69;
                }

                input.seek(index44_28);
                if (s >= 0) {
                    return s;
                }
                break;
            case 29:
                int LA44_29 = input.LA(1);

                int index44_29 = input.index();
                input.rewind();
                s = -1;
                if (((lc(XQS)))) {
                    s = 65;
                }

                else if ((true)) {
                    s = 69;
                }

                input.seek(index44_29);
                if (s >= 0) {
                    return s;
                }
                break;
            case 30:
                int LA44_30 = input.LA(1);

                int index44_30 = input.index();
                input.rewind();
                s = -1;
                if (((lc(XQS)))) {
                    s = 65;
                }

                else if ((true)) {
                    s = 69;
                }

                input.seek(index44_30);
                if (s >= 0) {
                    return s;
                }
                break;
            case 31:
                int LA44_31 = input.LA(1);

                int index44_31 = input.index();
                input.rewind();
                s = -1;
                if (((((lc(XQS)) && (lc(MLS))) || ((lc(XQS)) && (lc(MLS))) || ((lc(XQS)) && (lc(MLS)))
                        || ((lc(XQS)) && (lc(MLS))) || (lc(XQS))))) {
                    s = 65;
                }

                else if ((true)) {
                    s = 69;
                }

                input.seek(index44_31);
                if (s >= 0) {
                    return s;
                }
                break;
            case 32:
                int LA44_32 = input.LA(1);

                int index44_32 = input.index();
                input.rewind();
                s = -1;
                if (((lc(XQS)))) {
                    s = 65;
                }

                else if ((true)) {
                    s = 69;
                }

                input.seek(index44_32);
                if (s >= 0) {
                    return s;
                }
                break;
            case 33:
                int LA44_33 = input.LA(1);

                int index44_33 = input.index();
                input.rewind();
                s = -1;
                if (((lc(XQS)))) {
                    s = 65;
                }

                else if ((true)) {
                    s = 69;
                }

                input.seek(index44_33);
                if (s >= 0) {
                    return s;
                }
                break;
            case 34:
                int LA44_34 = input.LA(1);

                int index44_34 = input.index();
                input.rewind();
                s = -1;
                if (((lc(XQS)))) {
                    s = 65;
                }

                else if ((true)) {
                    s = 69;
                }

                input.seek(index44_34);
                if (s >= 0) {
                    return s;
                }
                break;
            case 35:
                int LA44_35 = input.LA(1);

                int index44_35 = input.index();
                input.rewind();
                s = -1;
                if (((lc(XQS)))) {
                    s = 65;
                }

                else if ((true)) {
                    s = 69;
                }

                input.seek(index44_35);
                if (s >= 0) {
                    return s;
                }
                break;
            case 36:
                int LA44_36 = input.LA(1);

                int index44_36 = input.index();
                input.rewind();
                s = -1;
                if (((lc(XQS)))) {
                    s = 65;
                }

                else if ((true)) {
                    s = 69;
                }

                input.seek(index44_36);
                if (s >= 0) {
                    return s;
                }
                break;
            case 37:
                int LA44_37 = input.LA(1);

                int index44_37 = input.index();
                input.rewind();
                s = -1;
                if (((lc(XQS)))) {
                    s = 65;
                }

                else if ((true)) {
                    s = 69;
                }

                input.seek(index44_37);
                if (s >= 0) {
                    return s;
                }
                break;
            case 38:
                int LA44_38 = input.LA(1);

                int index44_38 = input.index();
                input.rewind();
                s = -1;
                if (((lc(XQS)))) {
                    s = 65;
                }

                else if ((true)) {
                    s = 69;
                }

                input.seek(index44_38);
                if (s >= 0) {
                    return s;
                }
                break;
            case 39:
                int LA44_39 = input.LA(1);

                int index44_39 = input.index();
                input.rewind();
                s = -1;
                if (((lc(XQS)))) {
                    s = 65;
                }

                else if ((true)) {
                    s = 69;
                }

                input.seek(index44_39);
                if (s >= 0) {
                    return s;
                }
                break;
            case 40:
                int LA44_40 = input.LA(1);

                int index44_40 = input.index();
                input.rewind();
                s = -1;
                if (((lc(XQS)))) {
                    s = 65;
                }

                else if ((true)) {
                    s = 69;
                }

                input.seek(index44_40);
                if (s >= 0) {
                    return s;
                }
                break;
            case 41:
                int LA44_41 = input.LA(1);

                int index44_41 = input.index();
                input.rewind();
                s = -1;
                if (((lc(XQS)))) {
                    s = 65;
                }

                else if ((true)) {
                    s = 69;
                }

                input.seek(index44_41);
                if (s >= 0) {
                    return s;
                }
                break;
            case 42:
                int LA44_42 = input.LA(1);

                int index44_42 = input.index();
                input.rewind();
                s = -1;
                if (((lc(XQS)))) {
                    s = 65;
                }

                else if ((true)) {
                    s = 69;
                }

                input.seek(index44_42);
                if (s >= 0) {
                    return s;
                }
                break;
            case 43:
                int LA44_43 = input.LA(1);

                int index44_43 = input.index();
                input.rewind();
                s = -1;
                if (((lc(XQS)))) {
                    s = 65;
                }

                else if ((true)) {
                    s = 69;
                }

                input.seek(index44_43);
                if (s >= 0) {
                    return s;
                }
                break;
            case 44:
                int LA44_44 = input.LA(1);

                int index44_44 = input.index();
                input.rewind();
                s = -1;
                if (((lc(XQS)))) {
                    s = 65;
                }

                else if ((true)) {
                    s = 69;
                }

                input.seek(index44_44);
                if (s >= 0) {
                    return s;
                }
                break;
            case 45:
                int LA44_45 = input.LA(1);

                int index44_45 = input.index();
                input.rewind();
                s = -1;
                if (((lc(XQS)))) {
                    s = 65;
                }

                else if ((true)) {
                    s = 69;
                }

                input.seek(index44_45);
                if (s >= 0) {
                    return s;
                }
                break;
            case 46:
                int LA44_46 = input.LA(1);

                int index44_46 = input.index();
                input.rewind();
                s = -1;
                if (((lc(XQS)))) {
                    s = 65;
                }

                else if ((true)) {
                    s = 69;
                }

                input.seek(index44_46);
                if (s >= 0) {
                    return s;
                }
                break;
            case 47:
                int LA44_47 = input.LA(1);

                int index44_47 = input.index();
                input.rewind();
                s = -1;
                if (((lc(XQS)))) {
                    s = 65;
                }

                else if ((true)) {
                    s = 69;
                }

                input.seek(index44_47);
                if (s >= 0) {
                    return s;
                }
                break;
            case 48:
                int LA44_48 = input.LA(1);

                int index44_48 = input.index();
                input.rewind();
                s = -1;
                if ((((lc(XQS)) || ((lc(XQS)) && (lc(XQU)))))) {
                    s = 65;
                }

                else if ((true)) {
                    s = 69;
                }

                input.seek(index44_48);
                if (s >= 0) {
                    return s;
                }
                break;
            case 49:
                int LA44_49 = input.LA(1);

                int index44_49 = input.index();
                input.rewind();
                s = -1;
                if (((lc(XQS)))) {
                    s = 65;
                }

                else if ((true)) {
                    s = 69;
                }

                input.seek(index44_49);
                if (s >= 0) {
                    return s;
                }
                break;
            case 50:
                int LA44_50 = input.LA(1);

                int index44_50 = input.index();
                input.rewind();
                s = -1;
                if (((lc(XQS)))) {
                    s = 65;
                }

                else if ((true)) {
                    s = 69;
                }

                input.seek(index44_50);
                if (s >= 0) {
                    return s;
                }
                break;
            case 51:
                int LA44_51 = input.LA(1);

                int index44_51 = input.index();
                input.rewind();
                s = -1;
                if (((lc(XQS)))) {
                    s = 65;
                }

                else if ((true)) {
                    s = 69;
                }

                input.seek(index44_51);
                if (s >= 0) {
                    return s;
                }
                break;
            case 52:
                int LA44_52 = input.LA(1);

                int index44_52 = input.index();
                input.rewind();
                s = -1;
                if (((lc(XQS)))) {
                    s = 65;
                }

                else if ((true)) {
                    s = 69;
                }

                input.seek(index44_52);
                if (s >= 0) {
                    return s;
                }
                break;
            case 53:
                int LA44_53 = input.LA(1);

                int index44_53 = input.index();
                input.rewind();
                s = -1;
                if (((lc(XQS)))) {
                    s = 65;
                }

                else if ((true)) {
                    s = 69;
                }

                input.seek(index44_53);
                if (s >= 0) {
                    return s;
                }
                break;
            case 54:
                int LA44_54 = input.LA(1);

                int index44_54 = input.index();
                input.rewind();
                s = -1;
                if (((lc(XQS)))) {
                    s = 65;
                }

                else if ((true)) {
                    s = 69;
                }

                input.seek(index44_54);
                if (s >= 0) {
                    return s;
                }
                break;
            case 55:
                int LA44_55 = input.LA(1);

                int index44_55 = input.index();
                input.rewind();
                s = -1;
                if (((lc(XQS)))) {
                    s = 65;
                }

                else if ((true)) {
                    s = 69;
                }

                input.seek(index44_55);
                if (s >= 0) {
                    return s;
                }
                break;
            case 56:
                int LA44_56 = input.LA(1);

                int index44_56 = input.index();
                input.rewind();
                s = -1;
                if (((lc(XQS)))) {
                    s = 65;
                }

                else if ((true)) {
                    s = 69;
                }

                input.seek(index44_56);
                if (s >= 0) {
                    return s;
                }
                break;
            case 57:
                int LA44_57 = input.LA(1);

                int index44_57 = input.index();
                input.rewind();
                s = -1;
                if ((((lc(XQS)) || ((lc(XQS)) && (lc(XQU)))))) {
                    s = 65;
                }

                else if ((true)) {
                    s = 69;
                }

                input.seek(index44_57);
                if (s >= 0) {
                    return s;
                }
                break;
            case 58:
                int LA44_58 = input.LA(1);

                int index44_58 = input.index();
                input.rewind();
                s = -1;
                if ((((lc(XQS)) || ((lc(XQS)) && (lc(XQU)))))) {
                    s = 65;
                }

                else if ((true)) {
                    s = 69;
                }

                input.seek(index44_58);
                if (s >= 0) {
                    return s;
                }
                break;
            case 59:
                int LA44_59 = input.LA(1);

                int index44_59 = input.index();
                input.rewind();
                s = -1;
                if ((((lc(XQS)) || ((lc(XQS)) && (lc(XQU)))))) {
                    s = 65;
                }

                else if ((true)) {
                    s = 69;
                }

                input.seek(index44_59);
                if (s >= 0) {
                    return s;
                }
                break;
            case 60:
                int LA44_60 = input.LA(1);

                int index44_60 = input.index();
                input.rewind();
                s = -1;
                if ((((lc(XQS)) || ((lc(XQS)) && (lc(XQU)))))) {
                    s = 65;
                }

                else if ((true)) {
                    s = 69;
                }

                input.seek(index44_60);
                if (s >= 0) {
                    return s;
                }
                break;
            case 61:
                int LA44_61 = input.LA(1);

                int index44_61 = input.index();
                input.rewind();
                s = -1;
                if (((lc(XQS)))) {
                    s = 65;
                }

                else if ((true)) {
                    s = 69;
                }

                input.seek(index44_61);
                if (s >= 0) {
                    return s;
                }
                break;
            case 62:
                int LA44_62 = input.LA(1);

                int index44_62 = input.index();
                input.rewind();
                s = -1;
                if (((lc(XQS)))) {
                    s = 65;
                }

                else if ((true)) {
                    s = 69;
                }

                input.seek(index44_62);
                if (s >= 0) {
                    return s;
                }
                break;
            case 63:
                int LA44_63 = input.LA(1);

                int index44_63 = input.index();
                input.rewind();
                s = -1;
                if (((lc(XQS)))) {
                    s = 65;
                }

                else if ((true)) {
                    s = 69;
                }

                input.seek(index44_63);
                if (s >= 0) {
                    return s;
                }
                break;
            case 64:
                int LA44_64 = input.LA(1);

                int index44_64 = input.index();
                input.rewind();
                s = -1;
                if (((lc(XQS)))) {
                    s = 65;
                }

                else if ((true)) {
                    s = 69;
                }

                input.seek(index44_64);
                if (s >= 0) {
                    return s;
                }
                break;
            case 65:
                int LA44_66 = input.LA(1);

                int index44_66 = input.index();
                input.rewind();
                s = -1;
                if (((lc(XQS)))) {
                    s = 65;
                }

                else if ((true)) {
                    s = 69;
                }

                input.seek(index44_66);
                if (s >= 0) {
                    return s;
                }
                break;
            case 66:
                int LA44_67 = input.LA(1);

                int index44_67 = input.index();
                input.rewind();
                s = -1;
                if (((lc(XQS)))) {
                    s = 65;
                }

                else if ((true)) {
                    s = 69;
                }

                input.seek(index44_67);
                if (s >= 0) {
                    return s;
                }
                break;
            }
            if (state.backtracking > 0) {
                state.failed = true;
                return -1;
            }
            NoViableAltException nvae = new NoViableAltException(getDescription(), 44, _s, input);
            error(nvae);
            throw nvae;
        }
    }

    static final String DFA46_eotS = "\21\uffff";
    static final String DFA46_eofS = "\1\uffff\6\7\12\uffff";
    static final String DFA46_minS = "\1\20\6\22\12\uffff";
    static final String DFA46_maxS = "\1\u0154\6\u00fe\12\uffff";
    static final String DFA46_acceptS = "\7\uffff\1\6\5\1\1\2\1\3\1\4\1\5";
    static final String DFA46_specialS = "\1\uffff\1\0\1\4\1\1\1\2\1\3\1\5\12\uffff}>";
    static final String[] DFA46_transitionS = {
            "\45\7\1\1\5\7\1\3\12\7\1\2\41\7\1\5\35\7\1\4\1\6\124\7\1\uffff"
                + "\1\7\1\uffff\2\7\13\uffff\4\7\5\uffff\4\7\14\uffff\1\7\2\uffff"
                + "\2\7\2\uffff\1\7\6\uffff\6\7\73\uffff\1\7",
            "\3\7\5\uffff\3\7\1\uffff\1\7\4\uffff\1\7\2\uffff\2\7\4\uffff"
                        + "\1\7\2\uffff\1\7\1\uffff\1\7\3\uffff\1\7\1\uffff\1\7\1\uffff"
                        + "\2\7\4\uffff\3\7\2\uffff\1\7\1\uffff\3\7\2\uffff\1\7\5\uffff"
                        + "\2\7\7\uffff\2\7\5\uffff\1\7\4\uffff\2\7\1\uffff\1\7\4\uffff"
                        + "\1\7\4\uffff\1\7\3\uffff\2\7\6\uffff\1\7\4\uffff\1\12\1\7\2"
                        + "\uffff\1\11\4\uffff\2\7\4\uffff\1\7\1\uffff\1\7\7\uffff\1\7"
                        + "\2\uffff\1\7\73\uffff\3\7\1\10\1\uffff\4\7\1\uffff\1\7\3\uffff"
                        + "\1\7\1\uffff\13\7\2\uffff\1\7\3\uffff\2\7",
            "\3\7\5\uffff\3\7\1\uffff\1\7\4\uffff\1\7\2\uffff\2\7\4\uffff"
                                + "\1\7\2\uffff\1\7\1\uffff\1\7\3\uffff\1\7\1\uffff\1\7\1\uffff"
                                + "\2\7\4\uffff\3\7\2\uffff\1\7\1\uffff\3\7\2\uffff\1\7\5\uffff"
                                + "\2\7\7\uffff\2\7\5\uffff\1\7\4\uffff\2\7\1\uffff\1\7\4\uffff"
                                + "\1\7\4\uffff\1\7\3\uffff\2\7\6\uffff\1\7\5\uffff\1\7\7\uffff"
                                + "\2\7\4\uffff\1\7\1\uffff\1\7\7\uffff\1\7\2\uffff\1\7\30\uffff"
                                + "\1\14\42\uffff\3\7\1\13\1\uffff\4\7\1\uffff\1\7\3\uffff\1\7"
                                + "\1\uffff\13\7\2\uffff\1\7\3\uffff\2\7",
            "\3\7\5\uffff\3\7\1\uffff\1\7\4\uffff\1\7\2\uffff\2\7\4\uffff"
                                        + "\1\7\2\uffff\1\7\1\uffff\1\7\3\uffff\1\7\1\uffff\1\7\1\uffff"
                                        + "\2\7\4\uffff\3\7\2\uffff\1\7\1\uffff\3\7\2\uffff\1\7\5\uffff"
                                        + "\2\7\7\uffff\2\7\5\uffff\1\7\4\uffff\2\7\1\uffff\1\7\4\uffff"
                                        + "\1\7\4\uffff\1\7\3\uffff\2\7\6\uffff\1\7\5\uffff\1\7\7\uffff"
                                        + "\2\7\4\uffff\1\7\1\uffff\1\7\7\uffff\1\7\2\uffff\1\7\73\uffff"
                                        + "\1\7\1\15\1\7\2\uffff\4\7\1\uffff\1\7\3\uffff\1\7\1\uffff\13" + "\7\2\uffff\1\7\3\uffff\2\7",
            "\3\7\5\uffff\3\7\1\uffff\1\7\4\uffff\1\7\2\uffff\2\7\4\uffff"
                                                + "\1\7\2\uffff\1\7\1\uffff\1\7\3\uffff\1\7\1\uffff\1\7\1\uffff"
                                                + "\2\7\4\uffff\3\7\2\uffff\1\7\1\uffff\3\7\2\uffff\1\7\5\uffff"
                                                + "\2\7\7\uffff\2\7\5\uffff\1\7\4\uffff\2\7\1\uffff\1\7\4\uffff"
                                                + "\1\7\4\uffff\1\7\3\uffff\2\7\6\uffff\1\7\5\uffff\1\7\7\uffff"
                                                + "\2\7\4\uffff\1\7\1\uffff\1\7\7\uffff\1\7\2\uffff\1\7\73\uffff"
                                                + "\1\7\1\16\1\7\2\uffff\4\7\1\uffff\1\7\3\uffff\1\7\1\uffff\13" + "\7\2\uffff\1\7\3\uffff\2\7",
            "\3\7\5\uffff\3\7\1\uffff\1\7\4\uffff\1\7\2\uffff\2\7\4\uffff"
                                                        + "\1\7\2\uffff\1\7\1\uffff\1\7\3\uffff\1\7\1\uffff\1\7\1\uffff"
                                                        + "\2\7\4\uffff\3\7\2\uffff\1\7\1\uffff\3\7\2\uffff\1\7\5\uffff"
                                                        + "\2\7\7\uffff\2\7\5\uffff\1\7\4\uffff\2\7\1\uffff\1\7\4\uffff"
                                                        + "\1\7\4\uffff\1\7\3\uffff\2\7\6\uffff\1\7\5\uffff\1\7\7\uffff"
                                                        + "\2\7\4\uffff\1\7\1\uffff\1\7\7\uffff\1\7\2\uffff\1\7\73\uffff"
                                                        + "\1\7\1\17\1\7\2\uffff\4\7\1\uffff\1\7\3\uffff\1\7\1\uffff\13" + "\7\2\uffff\1\7\3\uffff\2\7",
            "\3\7\5\uffff\3\7\1\uffff\1\7\4\uffff\1\7\2\uffff\2\7\4\uffff"
                                                                + "\1\7\2\uffff\1\7\1\uffff\1\7\3\uffff\1\7\1\uffff\1\7\1\uffff"
                                                                + "\2\7\4\uffff\3\7\2\uffff\1\7\1\uffff\3\7\2\uffff\1\7\5\uffff"
                                                                + "\2\7\7\uffff\2\7\5\uffff\1\7\4\uffff\2\7\1\uffff\1\7\4\uffff"
                                                                + "\1\7\4\uffff\1\7\3\uffff\2\7\6\uffff\1\7\5\uffff\1\7\7\uffff"
                                                                + "\2\7\4\uffff\1\7\1\uffff\1\7\7\uffff\1\7\2\uffff\1\7\73\uffff"
                                                                + "\3\7\1\uffff\1\20\4\7\1\uffff\1\7\3\uffff\1\7\1\uffff\13\7\2" + "\uffff\1\7\3\uffff\2\7", "",
            "", "", "", "", "", "", "", "", "" };

    static final short[] DFA46_eot = DFA.unpackEncodedString(DFA46_eotS);
    static final short[] DFA46_eof = DFA.unpackEncodedString(DFA46_eofS);
    static final char[] DFA46_min = DFA.unpackEncodedStringToUnsignedChars(DFA46_minS);
    static final char[] DFA46_max = DFA.unpackEncodedStringToUnsignedChars(DFA46_maxS);
    static final short[] DFA46_accept = DFA.unpackEncodedString(DFA46_acceptS);
    static final short[] DFA46_special = DFA.unpackEncodedString(DFA46_specialS);
    static final short[][] DFA46_transition;

    static {
        int numStates = DFA46_transitionS.length;
        DFA46_transition = new short[numStates][];
        for (int i = 0; i < numStates; i++) {
            DFA46_transition[i] = DFA.unpackEncodedString(DFA46_transitionS[i]);
        }
    }

    class DFA46 extends DFA {

        public DFA46(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 46;
            this.eot = DFA46_eot;
            this.eof = DFA46_eof;
            this.min = DFA46_min;
            this.max = DFA46_max;
            this.accept = DFA46_accept;
            this.special = DFA46_special;
            this.transition = DFA46_transition;
        }

        public String getDescription() {
            return "402:1: p_ExprSingle[boolean strict] : ( ( ( ( FOR | LET ) DOLLAR ) | ( FOR ( TUMBLING | SLIDING ) ) )=> p_FLWORHybrid[$strict] | ( IF LPAREN )=> p_IfHybrid[$strict] | ( SWITCH LPAREN )=> p_SwitchHybrid[$strict] | ( TYPESWITCH LPAREN )=> p_TypeswitchHybrid[$strict] | ( TRY LBRACKET )=> p_TryCatchHybrid[$strict] | p_ExprSimple );";
        }

        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
            int _s = s;
            switch (s) {
            case 0:
                int LA46_1 = input.LA(1);

                int index46_1 = input.index();
                input.rewind();
                s = -1;
                if ((LA46_1 == DOLLAR) && (synpred1_XQueryParser())) {
                    s = 8;
                }

                else if ((LA46_1 == TUMBLING) && (synpred1_XQueryParser())) {
                    s = 9;
                }

                else if ((LA46_1 == SLIDING) && (synpred1_XQueryParser())) {
                    s = 10;
                }

                else if ((LA46_1 == EOF || (LA46_1 >= AND && LA46_1 <= ASCENDING)
                        || (LA46_1 >= CASE && LA46_1 <= CASTABLE) || LA46_1 == COLLATION || LA46_1 == DEFAULT
                        || (LA46_1 >= DESCENDING && LA46_1 <= DIV) || LA46_1 == EMPTY || LA46_1 == EQ
                        || LA46_1 == EXCEPT || LA46_1 == FOR || LA46_1 == GE || (LA46_1 >= GT && LA46_1 <= IDIV)
                        || (LA46_1 >= INSTANCE && LA46_1 <= IS) || LA46_1 == LE || (LA46_1 >= LET && LA46_1 <= MOD)
                        || LA46_1 == NE || (LA46_1 >= OR && LA46_1 <= ORDER)
                        || (LA46_1 >= RETURN && LA46_1 <= SATISFIES) || LA46_1 == STABLE
                        || (LA46_1 >= TO && LA46_1 <= TREAT) || LA46_1 == UNION || LA46_1 == WHERE || LA46_1 == COUNT
                        || (LA46_1 >= END && LA46_1 <= GROUP) || LA46_1 == ONLY || LA46_1 == START
                        || (LA46_1 >= AFTER && LA46_1 <= BEFORE) || LA46_1 == INTO || LA46_1 == MODIFY
                        || LA46_1 == WITH || LA46_1 == CONTAINS || (LA46_1 >= CONCAT && LA46_1 <= RPAREN)
                        || (LA46_1 >= RBRACKET && LA46_1 <= EQUAL) || LA46_1 == NOTEQUAL || LA46_1 == COMMA
                        || (LA46_1 >= STAR && LA46_1 <= SLASH_SLASH) || LA46_1 == COLON || (LA46_1 >= SEMICOLON && LA46_1 <= VBAR))) {
                    s = 7;
                }

                input.seek(index46_1);
                if (s >= 0) {
                    return s;
                }
                break;
            case 1:
                int LA46_3 = input.LA(1);

                int index46_3 = input.index();
                input.rewind();
                s = -1;
                if ((LA46_3 == LPAREN) && (synpred2_XQueryParser())) {
                    s = 13;
                }

                else if ((LA46_3 == EOF || (LA46_3 >= AND && LA46_3 <= ASCENDING)
                        || (LA46_3 >= CASE && LA46_3 <= CASTABLE) || LA46_3 == COLLATION || LA46_3 == DEFAULT
                        || (LA46_3 >= DESCENDING && LA46_3 <= DIV) || LA46_3 == EMPTY || LA46_3 == EQ
                        || LA46_3 == EXCEPT || LA46_3 == FOR || LA46_3 == GE || (LA46_3 >= GT && LA46_3 <= IDIV)
                        || (LA46_3 >= INSTANCE && LA46_3 <= IS) || LA46_3 == LE || (LA46_3 >= LET && LA46_3 <= MOD)
                        || LA46_3 == NE || (LA46_3 >= OR && LA46_3 <= ORDER)
                        || (LA46_3 >= RETURN && LA46_3 <= SATISFIES) || LA46_3 == STABLE
                        || (LA46_3 >= TO && LA46_3 <= TREAT) || LA46_3 == UNION || LA46_3 == WHERE || LA46_3 == COUNT
                        || (LA46_3 >= END && LA46_3 <= GROUP) || LA46_3 == ONLY || LA46_3 == START
                        || (LA46_3 >= AFTER && LA46_3 <= BEFORE) || LA46_3 == INTO || LA46_3 == MODIFY
                        || LA46_3 == WITH || LA46_3 == CONTAINS || LA46_3 == CONCAT || LA46_3 == RPAREN
                        || (LA46_3 >= RBRACKET && LA46_3 <= EQUAL) || LA46_3 == NOTEQUAL || LA46_3 == COMMA
                        || (LA46_3 >= STAR && LA46_3 <= SLASH_SLASH) || LA46_3 == COLON || (LA46_3 >= SEMICOLON && LA46_3 <= VBAR))) {
                    s = 7;
                }

                input.seek(index46_3);
                if (s >= 0) {
                    return s;
                }
                break;
            case 2:
                int LA46_4 = input.LA(1);

                int index46_4 = input.index();
                input.rewind();
                s = -1;
                if ((LA46_4 == LPAREN) && (synpred3_XQueryParser())) {
                    s = 14;
                }

                else if ((LA46_4 == EOF || (LA46_4 >= AND && LA46_4 <= ASCENDING)
                        || (LA46_4 >= CASE && LA46_4 <= CASTABLE) || LA46_4 == COLLATION || LA46_4 == DEFAULT
                        || (LA46_4 >= DESCENDING && LA46_4 <= DIV) || LA46_4 == EMPTY || LA46_4 == EQ
                        || LA46_4 == EXCEPT || LA46_4 == FOR || LA46_4 == GE || (LA46_4 >= GT && LA46_4 <= IDIV)
                        || (LA46_4 >= INSTANCE && LA46_4 <= IS) || LA46_4 == LE || (LA46_4 >= LET && LA46_4 <= MOD)
                        || LA46_4 == NE || (LA46_4 >= OR && LA46_4 <= ORDER)
                        || (LA46_4 >= RETURN && LA46_4 <= SATISFIES) || LA46_4 == STABLE
                        || (LA46_4 >= TO && LA46_4 <= TREAT) || LA46_4 == UNION || LA46_4 == WHERE || LA46_4 == COUNT
                        || (LA46_4 >= END && LA46_4 <= GROUP) || LA46_4 == ONLY || LA46_4 == START
                        || (LA46_4 >= AFTER && LA46_4 <= BEFORE) || LA46_4 == INTO || LA46_4 == MODIFY
                        || LA46_4 == WITH || LA46_4 == CONTAINS || LA46_4 == CONCAT || LA46_4 == RPAREN
                        || (LA46_4 >= RBRACKET && LA46_4 <= EQUAL) || LA46_4 == NOTEQUAL || LA46_4 == COMMA
                        || (LA46_4 >= STAR && LA46_4 <= SLASH_SLASH) || LA46_4 == COLON || (LA46_4 >= SEMICOLON && LA46_4 <= VBAR))) {
                    s = 7;
                }

                input.seek(index46_4);
                if (s >= 0) {
                    return s;
                }
                break;
            case 3:
                int LA46_5 = input.LA(1);

                int index46_5 = input.index();
                input.rewind();
                s = -1;
                if ((LA46_5 == LPAREN) && (synpred4_XQueryParser())) {
                    s = 15;
                }

                else if ((LA46_5 == EOF || (LA46_5 >= AND && LA46_5 <= ASCENDING)
                        || (LA46_5 >= CASE && LA46_5 <= CASTABLE) || LA46_5 == COLLATION || LA46_5 == DEFAULT
                        || (LA46_5 >= DESCENDING && LA46_5 <= DIV) || LA46_5 == EMPTY || LA46_5 == EQ
                        || LA46_5 == EXCEPT || LA46_5 == FOR || LA46_5 == GE || (LA46_5 >= GT && LA46_5 <= IDIV)
                        || (LA46_5 >= INSTANCE && LA46_5 <= IS) || LA46_5 == LE || (LA46_5 >= LET && LA46_5 <= MOD)
                        || LA46_5 == NE || (LA46_5 >= OR && LA46_5 <= ORDER)
                        || (LA46_5 >= RETURN && LA46_5 <= SATISFIES) || LA46_5 == STABLE
                        || (LA46_5 >= TO && LA46_5 <= TREAT) || LA46_5 == UNION || LA46_5 == WHERE || LA46_5 == COUNT
                        || (LA46_5 >= END && LA46_5 <= GROUP) || LA46_5 == ONLY || LA46_5 == START
                        || (LA46_5 >= AFTER && LA46_5 <= BEFORE) || LA46_5 == INTO || LA46_5 == MODIFY
                        || LA46_5 == WITH || LA46_5 == CONTAINS || LA46_5 == CONCAT || LA46_5 == RPAREN
                        || (LA46_5 >= RBRACKET && LA46_5 <= EQUAL) || LA46_5 == NOTEQUAL || LA46_5 == COMMA
                        || (LA46_5 >= STAR && LA46_5 <= SLASH_SLASH) || LA46_5 == COLON || (LA46_5 >= SEMICOLON && LA46_5 <= VBAR))) {
                    s = 7;
                }

                input.seek(index46_5);
                if (s >= 0) {
                    return s;
                }
                break;
            case 4:
                int LA46_2 = input.LA(1);

                int index46_2 = input.index();
                input.rewind();
                s = -1;
                if ((LA46_2 == DOLLAR) && (synpred1_XQueryParser())) {
                    s = 11;
                }

                else if ((LA46_2 == SCORE) && (synpred1_XQueryParser())) {
                    s = 12;
                }

                else if ((LA46_2 == EOF || (LA46_2 >= AND && LA46_2 <= ASCENDING)
                        || (LA46_2 >= CASE && LA46_2 <= CASTABLE) || LA46_2 == COLLATION || LA46_2 == DEFAULT
                        || (LA46_2 >= DESCENDING && LA46_2 <= DIV) || LA46_2 == EMPTY || LA46_2 == EQ
                        || LA46_2 == EXCEPT || LA46_2 == FOR || LA46_2 == GE || (LA46_2 >= GT && LA46_2 <= IDIV)
                        || (LA46_2 >= INSTANCE && LA46_2 <= IS) || LA46_2 == LE || (LA46_2 >= LET && LA46_2 <= MOD)
                        || LA46_2 == NE || (LA46_2 >= OR && LA46_2 <= ORDER)
                        || (LA46_2 >= RETURN && LA46_2 <= SATISFIES) || LA46_2 == STABLE
                        || (LA46_2 >= TO && LA46_2 <= TREAT) || LA46_2 == UNION || LA46_2 == WHERE || LA46_2 == COUNT
                        || (LA46_2 >= END && LA46_2 <= GROUP) || LA46_2 == ONLY || LA46_2 == START
                        || (LA46_2 >= AFTER && LA46_2 <= BEFORE) || LA46_2 == INTO || LA46_2 == MODIFY
                        || LA46_2 == WITH || LA46_2 == CONTAINS || (LA46_2 >= CONCAT && LA46_2 <= RPAREN)
                        || (LA46_2 >= RBRACKET && LA46_2 <= EQUAL) || LA46_2 == NOTEQUAL || LA46_2 == COMMA
                        || (LA46_2 >= STAR && LA46_2 <= SLASH_SLASH) || LA46_2 == COLON || (LA46_2 >= SEMICOLON && LA46_2 <= VBAR))) {
                    s = 7;
                }

                input.seek(index46_2);
                if (s >= 0) {
                    return s;
                }
                break;
            case 5:
                int LA46_6 = input.LA(1);

                int index46_6 = input.index();
                input.rewind();
                s = -1;
                if ((LA46_6 == LBRACKET) && (synpred5_XQueryParser())) {
                    s = 16;
                }

                else if ((LA46_6 == EOF || (LA46_6 >= AND && LA46_6 <= ASCENDING)
                        || (LA46_6 >= CASE && LA46_6 <= CASTABLE) || LA46_6 == COLLATION || LA46_6 == DEFAULT
                        || (LA46_6 >= DESCENDING && LA46_6 <= DIV) || LA46_6 == EMPTY || LA46_6 == EQ
                        || LA46_6 == EXCEPT || LA46_6 == FOR || LA46_6 == GE || (LA46_6 >= GT && LA46_6 <= IDIV)
                        || (LA46_6 >= INSTANCE && LA46_6 <= IS) || LA46_6 == LE || (LA46_6 >= LET && LA46_6 <= MOD)
                        || LA46_6 == NE || (LA46_6 >= OR && LA46_6 <= ORDER)
                        || (LA46_6 >= RETURN && LA46_6 <= SATISFIES) || LA46_6 == STABLE
                        || (LA46_6 >= TO && LA46_6 <= TREAT) || LA46_6 == UNION || LA46_6 == WHERE || LA46_6 == COUNT
                        || (LA46_6 >= END && LA46_6 <= GROUP) || LA46_6 == ONLY || LA46_6 == START
                        || (LA46_6 >= AFTER && LA46_6 <= BEFORE) || LA46_6 == INTO || LA46_6 == MODIFY
                        || LA46_6 == WITH || LA46_6 == CONTAINS || (LA46_6 >= CONCAT && LA46_6 <= RPAREN)
                        || (LA46_6 >= RBRACKET && LA46_6 <= EQUAL) || LA46_6 == NOTEQUAL || LA46_6 == COMMA
                        || (LA46_6 >= STAR && LA46_6 <= SLASH_SLASH) || LA46_6 == COLON || (LA46_6 >= SEMICOLON && LA46_6 <= VBAR))) {
                    s = 7;
                }

                input.seek(index46_6);
                if (s >= 0) {
                    return s;
                }
                break;
            }
            if (state.backtracking > 0) {
                state.failed = true;
                return -1;
            }
            NoViableAltException nvae = new NoViableAltException(getDescription(), 46, _s, input);
            error(nvae);
            throw nvae;
        }
    }

    static final String DFA115_eotS = "\57\uffff";
    static final String DFA115_eofS = "\57\uffff";
    static final String DFA115_minS = "\1\20\1\0\55\uffff";
    static final String DFA115_maxS = "\1\u0154\1\0\55\uffff";
    static final String DFA115_acceptS = "\2\uffff\1\3\1\4\51\uffff\1\1\1\2";
    static final String DFA115_specialS = "\1\uffff\1\0\55\uffff}>";
    static final String[] DFA115_transitionS = {
            "\u00cc\3\1\uffff\1\3\1\uffff\2\3\13\uffff\1\3\2\uffff\1\3\5"
                + "\uffff\1\1\1\2\2\3\14\uffff\1\3\2\uffff\2\3\2\uffff\1\3\7\uffff" + "\5\3\73\uffff\1\3",
            "\1\uffff", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "",
            "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "" };

    static final short[] DFA115_eot = DFA.unpackEncodedString(DFA115_eotS);
    static final short[] DFA115_eof = DFA.unpackEncodedString(DFA115_eofS);
    static final char[] DFA115_min = DFA.unpackEncodedStringToUnsignedChars(DFA115_minS);
    static final char[] DFA115_max = DFA.unpackEncodedStringToUnsignedChars(DFA115_maxS);
    static final short[] DFA115_accept = DFA.unpackEncodedString(DFA115_acceptS);
    static final short[] DFA115_special = DFA.unpackEncodedString(DFA115_specialS);
    static final short[][] DFA115_transition;

    static {
        int numStates = DFA115_transitionS.length;
        DFA115_transition = new short[numStates][];
        for (int i = 0; i < numStates; i++) {
            DFA115_transition[i] = DFA.unpackEncodedString(DFA115_transitionS[i]);
        }
    }

    class DFA115 extends DFA {

        public DFA115(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 115;
            this.eot = DFA115_eot;
            this.eof = DFA115_eof;
            this.min = DFA115_min;
            this.max = DFA115_max;
            this.accept = DFA115_accept;
            this.special = DFA115_special;
            this.transition = DFA115_transition;
        }

        public String getDescription() {
            return "736:1: p_PathExpr : ( ( SLASH p_RelativePathExpr )=> ( SLASH p_RelativePathExpr ) | SLASH | SLASH_SLASH p_RelativePathExpr | p_RelativePathExpr );";
        }

        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
            int _s = s;
            switch (s) {
            case 0:
                int LA115_1 = input.LA(1);

                int index115_1 = input.index();
                input.rewind();
                s = -1;
                if ((synpred7_XQueryParser())) {
                    s = 45;
                }

                else if ((true)) {
                    s = 46;
                }

                input.seek(index115_1);
                if (s >= 0) {
                    return s;
                }
                break;
            }
            if (state.backtracking > 0) {
                state.failed = true;
                return -1;
            }
            NoViableAltException nvae = new NoViableAltException(getDescription(), 115, _s, input);
            error(nvae);
            throw nvae;
        }
    }

    static final String DFA117_eotS = "\61\uffff";
    static final String DFA117_eofS = "\61\uffff";
    static final String DFA117_minS = "\1\20\52\0\6\uffff";
    static final String DFA117_maxS = "\1\u0154\52\0\6\uffff";
    static final String DFA117_acceptS = "\53\uffff\1\1\1\2\1\4\1\5\1\3\1\6";
    static final String DFA117_specialS = "\1\uffff\1\0\1\1\1\2\1\3\1\4\1\5\1\6\1\7\1\10\1\11\1\12\1\13\1\14"
            + "\1\15\1\16\1\17\1\20\1\21\1\22\1\23\1\24\1\25\1\26\1\27\1\30\1\31"
            + "\1\32\1\33\1\34\1\35\1\36\1\37\1\40\1\41\1\42\1\43\1\44\1\45\1\46" + "\1\47\1\50\1\51\6\uffff}>";
    static final String[] DFA117_transitionS = {
            "\1\30\1\33\4\43\1\20\6\43\1\34\1\43\1\23\4\43\1\36\1\40\2\43"
                + "\1\13\1\25\1\10\2\43\1\51\5\43\1\42\1\41\6\43\1\51\6\43\1\51"
                + "\7\43\1\17\3\43\1\50\4\43\1\7\1\43\1\26\1\32\1\31\1\43\1\24"
                + "\3\43\1\46\1\45\1\37\4\43\1\21\3\43\1\51\1\43\1\12\21\43\1\47"
                + "\11\43\1\51\24\43\1\11\61\43\1\51\12\43\1\22\3\43\1\uffff\1"
                + "\1\1\uffff\1\5\1\27\13\uffff\1\52\2\uffff\1\14\7\uffff\1\6\1"
                + "\35\14\uffff\1\44\2\uffff\1\4\1\3\2\uffff\1\43\7\uffff\1\15" + "\1\16\3\2\73\uffff\1\43",
            "\1\uffff", "\1\uffff", "\1\uffff", "\1\uffff", "\1\uffff", "\1\uffff", "\1\uffff", "\1\uffff", "\1\uffff",
            "\1\uffff", "\1\uffff", "\1\uffff", "\1\uffff", "\1\uffff", "\1\uffff", "\1\uffff", "\1\uffff", "\1\uffff",
            "\1\uffff", "\1\uffff", "\1\uffff", "\1\uffff", "\1\uffff", "\1\uffff", "\1\uffff", "\1\uffff", "\1\uffff",
            "\1\uffff", "\1\uffff", "\1\uffff", "\1\uffff", "\1\uffff", "\1\uffff", "\1\uffff", "\1\uffff", "\1\uffff",
            "\1\uffff", "\1\uffff", "\1\uffff", "\1\uffff", "\1\uffff", "\1\uffff", "", "", "", "", "", "" };

    static final short[] DFA117_eot = DFA.unpackEncodedString(DFA117_eotS);
    static final short[] DFA117_eof = DFA.unpackEncodedString(DFA117_eofS);
    static final char[] DFA117_min = DFA.unpackEncodedStringToUnsignedChars(DFA117_minS);
    static final char[] DFA117_max = DFA.unpackEncodedStringToUnsignedChars(DFA117_maxS);
    static final short[] DFA117_accept = DFA.unpackEncodedString(DFA117_acceptS);
    static final short[] DFA117_special = DFA.unpackEncodedString(DFA117_specialS);
    static final short[][] DFA117_transition;

    static {
        int numStates = DFA117_transitionS.length;
        DFA117_transition = new short[numStates][];
        for (int i = 0; i < numStates; i++) {
            DFA117_transition[i] = DFA.unpackEncodedString(DFA117_transitionS[i]);
        }
    }

    class DFA117 extends DFA {

        public DFA117(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 117;
            this.eot = DFA117_eot;
            this.eof = DFA117_eof;
            this.min = DFA117_min;
            this.max = DFA117_max;
            this.accept = DFA117_accept;
            this.special = DFA117_special;
            this.transition = DFA117_transition;
        }

        public String getDescription() {
            return "749:1: p_StepExpr : ( ( LBRACKET | LPAREN | SMALLER | QUOT | APOS | DOLLAR )=> p_PostfixExpr | ( ( ( ELEMENT | ATTRIBUTE ) ( p_QName )? LBRACKET ) | ( ( NAMESPACE | PROCESSING_INSTRUCTION ) ( p_NCName )? LBRACKET ) | ( ( DOCUMENT | TEXT | COMMENT ) LBRACKET ) )=> p_PostfixExpr | ( p_KindTest )=> p_AxisStep | ( p_QName LPAREN )=> p_PostfixExpr | ( p_PrimaryExpr )=> p_PostfixExpr | p_AxisStep );";
        }

        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
            int _s = s;
            switch (s) {
            case 0:
                int LA117_1 = input.LA(1);

                int index117_1 = input.index();
                input.rewind();
                s = -1;
                if ((synpred8_XQueryParser())) {
                    s = 43;
                }

                else if ((synpred9_XQueryParser())) {
                    s = 44;
                }

                else if ((synpred11_XQueryParser())) {
                    s = 45;
                }

                else if ((synpred12_XQueryParser())) {
                    s = 46;
                }

                input.seek(index117_1);
                if (s >= 0) {
                    return s;
                }
                break;
            case 1:
                int LA117_2 = input.LA(1);

                int index117_2 = input.index();
                input.rewind();
                s = -1;
                if ((synpred8_XQueryParser())) {
                    s = 43;
                }

                else if ((synpred9_XQueryParser())) {
                    s = 44;
                }

                else if ((synpred11_XQueryParser())) {
                    s = 45;
                }

                else if ((synpred12_XQueryParser())) {
                    s = 46;
                }

                input.seek(index117_2);
                if (s >= 0) {
                    return s;
                }
                break;
            case 2:
                int LA117_3 = input.LA(1);

                int index117_3 = input.index();
                input.rewind();
                s = -1;
                if ((synpred8_XQueryParser())) {
                    s = 43;
                }

                else if ((synpred9_XQueryParser())) {
                    s = 44;
                }

                else if ((synpred10_XQueryParser())) {
                    s = 47;
                }

                else if ((synpred11_XQueryParser())) {
                    s = 45;
                }

                else if ((synpred12_XQueryParser())) {
                    s = 46;
                }

                else if ((true)) {
                    s = 48;
                }

                input.seek(index117_3);
                if (s >= 0) {
                    return s;
                }
                break;
            case 3:
                int LA117_4 = input.LA(1);

                int index117_4 = input.index();
                input.rewind();
                s = -1;
                if ((synpred8_XQueryParser())) {
                    s = 43;
                }

                else if ((synpred9_XQueryParser())) {
                    s = 44;
                }

                else if ((synpred10_XQueryParser())) {
                    s = 47;
                }

                else if ((synpred11_XQueryParser())) {
                    s = 45;
                }

                else if ((synpred12_XQueryParser())) {
                    s = 46;
                }

                else if ((true)) {
                    s = 48;
                }

                input.seek(index117_4);
                if (s >= 0) {
                    return s;
                }
                break;
            case 4:
                int LA117_5 = input.LA(1);

                int index117_5 = input.index();
                input.rewind();
                s = -1;
                if ((synpred8_XQueryParser())) {
                    s = 43;
                }

                else if ((synpred9_XQueryParser())) {
                    s = 44;
                }

                else if ((synpred11_XQueryParser())) {
                    s = 45;
                }

                else if ((synpred12_XQueryParser())) {
                    s = 46;
                }

                input.seek(index117_5);
                if (s >= 0) {
                    return s;
                }
                break;
            case 5:
                int LA117_6 = input.LA(1);

                int index117_6 = input.index();
                input.rewind();
                s = -1;
                if ((synpred8_XQueryParser())) {
                    s = 43;
                }

                else if ((synpred9_XQueryParser())) {
                    s = 44;
                }

                else if ((synpred11_XQueryParser())) {
                    s = 45;
                }

                else if ((synpred12_XQueryParser())) {
                    s = 46;
                }

                input.seek(index117_6);
                if (s >= 0) {
                    return s;
                }
                break;
            case 6:
                int LA117_7 = input.LA(1);

                int index117_7 = input.index();
                input.rewind();
                s = -1;
                if ((synpred8_XQueryParser())) {
                    s = 43;
                }

                else if ((synpred9_XQueryParser())) {
                    s = 44;
                }

                else if ((synpred10_XQueryParser())) {
                    s = 47;
                }

                else if ((synpred11_XQueryParser())) {
                    s = 45;
                }

                else if ((synpred12_XQueryParser())) {
                    s = 46;
                }

                else if ((true)) {
                    s = 48;
                }

                input.seek(index117_7);
                if (s >= 0) {
                    return s;
                }
                break;
            case 7:
                int LA117_8 = input.LA(1);

                int index117_8 = input.index();
                input.rewind();
                s = -1;
                if ((synpred8_XQueryParser())) {
                    s = 43;
                }

                else if ((synpred9_XQueryParser())) {
                    s = 44;
                }

                else if ((synpred10_XQueryParser())) {
                    s = 47;
                }

                else if ((synpred11_XQueryParser())) {
                    s = 45;
                }

                else if ((synpred12_XQueryParser())) {
                    s = 46;
                }

                else if ((true)) {
                    s = 48;
                }

                input.seek(index117_8);
                if (s >= 0) {
                    return s;
                }
                break;
            case 8:
                int LA117_9 = input.LA(1);

                int index117_9 = input.index();
                input.rewind();
                s = -1;
                if ((synpred8_XQueryParser())) {
                    s = 43;
                }

                else if ((synpred9_XQueryParser())) {
                    s = 44;
                }

                else if ((synpred11_XQueryParser())) {
                    s = 45;
                }

                else if ((synpred12_XQueryParser())) {
                    s = 46;
                }

                input.seek(index117_9);
                if (s >= 0) {
                    return s;
                }
                break;
            case 9:
                int LA117_10 = input.LA(1);

                int index117_10 = input.index();
                input.rewind();
                s = -1;
                if ((synpred8_XQueryParser())) {
                    s = 43;
                }

                else if ((synpred9_XQueryParser())) {
                    s = 44;
                }

                else if ((synpred10_XQueryParser())) {
                    s = 47;
                }

                else if ((synpred11_XQueryParser())) {
                    s = 45;
                }

                else if ((synpred12_XQueryParser())) {
                    s = 46;
                }

                else if ((true)) {
                    s = 48;
                }

                input.seek(index117_10);
                if (s >= 0) {
                    return s;
                }
                break;
            case 10:
                int LA117_11 = input.LA(1);

                int index117_11 = input.index();
                input.rewind();
                s = -1;
                if ((synpred8_XQueryParser())) {
                    s = 43;
                }

                else if ((synpred9_XQueryParser())) {
                    s = 44;
                }

                else if ((synpred10_XQueryParser())) {
                    s = 47;
                }

                else if ((synpred11_XQueryParser())) {
                    s = 45;
                }

                else if ((synpred12_XQueryParser())) {
                    s = 46;
                }

                else if ((true)) {
                    s = 48;
                }

                input.seek(index117_11);
                if (s >= 0) {
                    return s;
                }
                break;
            case 11:
                int LA117_12 = input.LA(1);

                int index117_12 = input.index();
                input.rewind();
                s = -1;
                if ((synpred8_XQueryParser())) {
                    s = 43;
                }

                else if ((synpred9_XQueryParser())) {
                    s = 44;
                }

                else if ((synpred11_XQueryParser())) {
                    s = 45;
                }

                else if ((synpred12_XQueryParser())) {
                    s = 46;
                }

                input.seek(index117_12);
                if (s >= 0) {
                    return s;
                }
                break;
            case 12:
                int LA117_13 = input.LA(1);

                int index117_13 = input.index();
                input.rewind();
                s = -1;
                if ((synpred8_XQueryParser())) {
                    s = 43;
                }

                else if ((synpred9_XQueryParser())) {
                    s = 44;
                }

                else if ((synpred11_XQueryParser())) {
                    s = 45;
                }

                else if ((synpred12_XQueryParser())) {
                    s = 46;
                }

                input.seek(index117_13);
                if (s >= 0) {
                    return s;
                }
                break;
            case 13:
                int LA117_14 = input.LA(1);

                int index117_14 = input.index();
                input.rewind();
                s = -1;
                if ((synpred8_XQueryParser())) {
                    s = 43;
                }

                else if ((synpred9_XQueryParser())) {
                    s = 44;
                }

                else if ((synpred11_XQueryParser())) {
                    s = 45;
                }

                else if ((synpred12_XQueryParser())) {
                    s = 46;
                }

                input.seek(index117_14);
                if (s >= 0) {
                    return s;
                }
                break;
            case 14:
                int LA117_15 = input.LA(1);

                int index117_15 = input.index();
                input.rewind();
                s = -1;
                if ((synpred8_XQueryParser())) {
                    s = 43;
                }

                else if ((synpred9_XQueryParser())) {
                    s = 44;
                }

                else if ((synpred10_XQueryParser())) {
                    s = 47;
                }

                else if ((synpred11_XQueryParser())) {
                    s = 45;
                }

                else if ((synpred12_XQueryParser())) {
                    s = 46;
                }

                else if ((true)) {
                    s = 48;
                }

                input.seek(index117_15);
                if (s >= 0) {
                    return s;
                }
                break;
            case 15:
                int LA117_16 = input.LA(1);

                int index117_16 = input.index();
                input.rewind();
                s = -1;
                if ((synpred8_XQueryParser())) {
                    s = 43;
                }

                else if ((synpred9_XQueryParser())) {
                    s = 44;
                }

                else if ((synpred10_XQueryParser())) {
                    s = 47;
                }

                else if ((synpred11_XQueryParser())) {
                    s = 45;
                }

                else if ((synpred12_XQueryParser())) {
                    s = 46;
                }

                else if ((true)) {
                    s = 48;
                }

                input.seek(index117_16);
                if (s >= 0) {
                    return s;
                }
                break;
            case 16:
                int LA117_17 = input.LA(1);

                int index117_17 = input.index();
                input.rewind();
                s = -1;
                if ((synpred8_XQueryParser())) {
                    s = 43;
                }

                else if ((synpred9_XQueryParser())) {
                    s = 44;
                }

                else if ((synpred10_XQueryParser())) {
                    s = 47;
                }

                else if ((synpred11_XQueryParser())) {
                    s = 45;
                }

                else if ((synpred12_XQueryParser())) {
                    s = 46;
                }

                else if ((true)) {
                    s = 48;
                }

                input.seek(index117_17);
                if (s >= 0) {
                    return s;
                }
                break;
            case 17:
                int LA117_18 = input.LA(1);

                int index117_18 = input.index();
                input.rewind();
                s = -1;
                if (((synpred8_XQueryParser() || (synpred8_XQueryParser() && (lc(MLS)))))) {
                    s = 43;
                }

                else if ((((synpred9_XQueryParser() && (lc(MLS))) || synpred9_XQueryParser()))) {
                    s = 44;
                }

                else if ((synpred10_XQueryParser())) {
                    s = 47;
                }

                else if ((((synpred11_XQueryParser() && (lc(MLS))) || synpred11_XQueryParser()))) {
                    s = 45;
                }

                else if ((((synpred12_XQueryParser() && (lc(MLS))) || synpred12_XQueryParser()))) {
                    s = 46;
                }

                else if ((true)) {
                    s = 48;
                }

                input.seek(index117_18);
                if (s >= 0) {
                    return s;
                }
                break;
            case 18:
                int LA117_19 = input.LA(1);

                int index117_19 = input.index();
                input.rewind();
                s = -1;
                if ((synpred8_XQueryParser())) {
                    s = 43;
                }

                else if ((synpred9_XQueryParser())) {
                    s = 44;
                }

                else if ((synpred10_XQueryParser())) {
                    s = 47;
                }

                else if ((synpred11_XQueryParser())) {
                    s = 45;
                }

                else if ((synpred12_XQueryParser())) {
                    s = 46;
                }

                else if ((true)) {
                    s = 48;
                }

                input.seek(index117_19);
                if (s >= 0) {
                    return s;
                }
                break;
            case 19:
                int LA117_20 = input.LA(1);

                int index117_20 = input.index();
                input.rewind();
                s = -1;
                if ((synpred8_XQueryParser())) {
                    s = 43;
                }

                else if ((synpred9_XQueryParser())) {
                    s = 44;
                }

                else if ((synpred10_XQueryParser())) {
                    s = 47;
                }

                else if ((synpred11_XQueryParser())) {
                    s = 45;
                }

                else if ((synpred12_XQueryParser())) {
                    s = 46;
                }

                else if ((true)) {
                    s = 48;
                }

                input.seek(index117_20);
                if (s >= 0) {
                    return s;
                }
                break;
            case 20:
                int LA117_21 = input.LA(1);

                int index117_21 = input.index();
                input.rewind();
                s = -1;
                if ((synpred8_XQueryParser())) {
                    s = 43;
                }

                else if ((synpred9_XQueryParser())) {
                    s = 44;
                }

                else if ((synpred10_XQueryParser())) {
                    s = 47;
                }

                else if ((synpred11_XQueryParser())) {
                    s = 45;
                }

                else if ((synpred12_XQueryParser())) {
                    s = 46;
                }

                else if ((true)) {
                    s = 48;
                }

                input.seek(index117_21);
                if (s >= 0) {
                    return s;
                }
                break;
            case 21:
                int LA117_22 = input.LA(1);

                int index117_22 = input.index();
                input.rewind();
                s = -1;
                if ((synpred8_XQueryParser())) {
                    s = 43;
                }

                else if ((synpred9_XQueryParser())) {
                    s = 44;
                }

                else if ((synpred10_XQueryParser())) {
                    s = 47;
                }

                else if ((synpred11_XQueryParser())) {
                    s = 45;
                }

                else if ((synpred12_XQueryParser())) {
                    s = 46;
                }

                else if ((true)) {
                    s = 48;
                }

                input.seek(index117_22);
                if (s >= 0) {
                    return s;
                }
                break;
            case 22:
                int LA117_23 = input.LA(1);

                int index117_23 = input.index();
                input.rewind();
                s = -1;
                if ((synpred8_XQueryParser())) {
                    s = 43;
                }

                else if ((synpred9_XQueryParser())) {
                    s = 44;
                }

                else if ((synpred11_XQueryParser())) {
                    s = 45;
                }

                else if ((synpred12_XQueryParser())) {
                    s = 46;
                }

                input.seek(index117_23);
                if (s >= 0) {
                    return s;
                }
                break;
            case 23:
                int LA117_24 = input.LA(1);

                int index117_24 = input.index();
                input.rewind();
                s = -1;
                if ((synpred8_XQueryParser())) {
                    s = 43;
                }

                else if ((synpred9_XQueryParser())) {
                    s = 44;
                }

                else if ((synpred10_XQueryParser())) {
                    s = 47;
                }

                else if ((synpred11_XQueryParser())) {
                    s = 45;
                }

                else if ((synpred12_XQueryParser())) {
                    s = 46;
                }

                else if ((true)) {
                    s = 48;
                }

                input.seek(index117_24);
                if (s >= 0) {
                    return s;
                }
                break;
            case 24:
                int LA117_25 = input.LA(1);

                int index117_25 = input.index();
                input.rewind();
                s = -1;
                if ((synpred8_XQueryParser())) {
                    s = 43;
                }

                else if ((synpred9_XQueryParser())) {
                    s = 44;
                }

                else if ((synpred10_XQueryParser())) {
                    s = 47;
                }

                else if ((synpred11_XQueryParser())) {
                    s = 45;
                }

                else if ((synpred12_XQueryParser())) {
                    s = 46;
                }

                else if ((true)) {
                    s = 48;
                }

                input.seek(index117_25);
                if (s >= 0) {
                    return s;
                }
                break;
            case 25:
                int LA117_26 = input.LA(1);

                int index117_26 = input.index();
                input.rewind();
                s = -1;
                if ((synpred8_XQueryParser())) {
                    s = 43;
                }

                else if ((synpred9_XQueryParser())) {
                    s = 44;
                }

                else if ((synpred10_XQueryParser())) {
                    s = 47;
                }

                else if ((synpred11_XQueryParser())) {
                    s = 45;
                }

                else if ((synpred12_XQueryParser())) {
                    s = 46;
                }

                else if ((true)) {
                    s = 48;
                }

                input.seek(index117_26);
                if (s >= 0) {
                    return s;
                }
                break;
            case 26:
                int LA117_27 = input.LA(1);

                int index117_27 = input.index();
                input.rewind();
                s = -1;
                if ((synpred8_XQueryParser())) {
                    s = 43;
                }

                else if ((synpred9_XQueryParser())) {
                    s = 44;
                }

                else if ((synpred10_XQueryParser())) {
                    s = 47;
                }

                else if ((synpred11_XQueryParser())) {
                    s = 45;
                }

                else if ((synpred12_XQueryParser())) {
                    s = 46;
                }

                else if ((true)) {
                    s = 48;
                }

                input.seek(index117_27);
                if (s >= 0) {
                    return s;
                }
                break;
            case 27:
                int LA117_28 = input.LA(1);

                int index117_28 = input.index();
                input.rewind();
                s = -1;
                if ((synpred8_XQueryParser())) {
                    s = 43;
                }

                else if ((synpred9_XQueryParser())) {
                    s = 44;
                }

                else if ((synpred10_XQueryParser())) {
                    s = 47;
                }

                else if ((synpred11_XQueryParser())) {
                    s = 45;
                }

                else if ((synpred12_XQueryParser())) {
                    s = 46;
                }

                else if ((true)) {
                    s = 48;
                }

                input.seek(index117_28);
                if (s >= 0) {
                    return s;
                }
                break;
            case 28:
                int LA117_29 = input.LA(1);

                int index117_29 = input.index();
                input.rewind();
                s = -1;
                if ((synpred10_XQueryParser())) {
                    s = 47;
                }

                else if ((true)) {
                    s = 48;
                }

                input.seek(index117_29);
                if (s >= 0) {
                    return s;
                }
                break;
            case 29:
                int LA117_30 = input.LA(1);

                int index117_30 = input.index();
                input.rewind();
                s = -1;
                if ((synpred8_XQueryParser())) {
                    s = 43;
                }

                else if ((synpred9_XQueryParser())) {
                    s = 44;
                }

                else if ((synpred10_XQueryParser())) {
                    s = 47;
                }

                else if ((synpred11_XQueryParser())) {
                    s = 45;
                }

                else if ((synpred12_XQueryParser())) {
                    s = 46;
                }

                else if ((true)) {
                    s = 48;
                }

                input.seek(index117_30);
                if (s >= 0) {
                    return s;
                }
                break;
            case 30:
                int LA117_31 = input.LA(1);

                int index117_31 = input.index();
                input.rewind();
                s = -1;
                if ((synpred8_XQueryParser())) {
                    s = 43;
                }

                else if ((synpred9_XQueryParser())) {
                    s = 44;
                }

                else if ((synpred10_XQueryParser())) {
                    s = 47;
                }

                else if ((synpred11_XQueryParser())) {
                    s = 45;
                }

                else if ((synpred12_XQueryParser())) {
                    s = 46;
                }

                else if ((true)) {
                    s = 48;
                }

                input.seek(index117_31);
                if (s >= 0) {
                    return s;
                }
                break;
            case 31:
                int LA117_32 = input.LA(1);

                int index117_32 = input.index();
                input.rewind();
                s = -1;
                if ((synpred8_XQueryParser())) {
                    s = 43;
                }

                else if ((synpred9_XQueryParser())) {
                    s = 44;
                }

                else if ((synpred10_XQueryParser())) {
                    s = 47;
                }

                else if ((synpred11_XQueryParser())) {
                    s = 45;
                }

                else if ((synpred12_XQueryParser())) {
                    s = 46;
                }

                else if ((true)) {
                    s = 48;
                }

                input.seek(index117_32);
                if (s >= 0) {
                    return s;
                }
                break;
            case 32:
                int LA117_33 = input.LA(1);

                int index117_33 = input.index();
                input.rewind();
                s = -1;
                if ((synpred8_XQueryParser())) {
                    s = 43;
                }

                else if ((synpred9_XQueryParser())) {
                    s = 44;
                }

                else if ((synpred10_XQueryParser())) {
                    s = 47;
                }

                else if ((synpred11_XQueryParser())) {
                    s = 45;
                }

                else if ((synpred12_XQueryParser())) {
                    s = 46;
                }

                else if ((true)) {
                    s = 48;
                }

                input.seek(index117_33);
                if (s >= 0) {
                    return s;
                }
                break;
            case 33:
                int LA117_34 = input.LA(1);

                int index117_34 = input.index();
                input.rewind();
                s = -1;
                if ((synpred8_XQueryParser())) {
                    s = 43;
                }

                else if ((synpred9_XQueryParser())) {
                    s = 44;
                }

                else if ((synpred10_XQueryParser())) {
                    s = 47;
                }

                else if ((synpred11_XQueryParser())) {
                    s = 45;
                }

                else if ((synpred12_XQueryParser())) {
                    s = 46;
                }

                else if ((true)) {
                    s = 48;
                }

                input.seek(index117_34);
                if (s >= 0) {
                    return s;
                }
                break;
            case 34:
                int LA117_35 = input.LA(1);

                int index117_35 = input.index();
                input.rewind();
                s = -1;
                if ((synpred8_XQueryParser())) {
                    s = 43;
                }

                else if ((synpred9_XQueryParser())) {
                    s = 44;
                }

                else if ((synpred10_XQueryParser())) {
                    s = 47;
                }

                else if ((synpred11_XQueryParser())) {
                    s = 45;
                }

                else if ((synpred12_XQueryParser())) {
                    s = 46;
                }

                else if ((true)) {
                    s = 48;
                }

                input.seek(index117_35);
                if (s >= 0) {
                    return s;
                }
                break;
            case 35:
                int LA117_36 = input.LA(1);

                int index117_36 = input.index();
                input.rewind();
                s = -1;
                if ((synpred10_XQueryParser())) {
                    s = 47;
                }

                else if ((true)) {
                    s = 48;
                }

                input.seek(index117_36);
                if (s >= 0) {
                    return s;
                }
                break;
            case 36:
                int LA117_37 = input.LA(1);

                int index117_37 = input.index();
                input.rewind();
                s = -1;
                if ((synpred8_XQueryParser())) {
                    s = 43;
                }

                else if ((synpred9_XQueryParser())) {
                    s = 44;
                }

                else if ((synpred10_XQueryParser())) {
                    s = 47;
                }

                else if ((synpred11_XQueryParser())) {
                    s = 45;
                }

                else if ((synpred12_XQueryParser())) {
                    s = 46;
                }

                else if ((true)) {
                    s = 48;
                }

                input.seek(index117_37);
                if (s >= 0) {
                    return s;
                }
                break;
            case 37:
                int LA117_38 = input.LA(1);

                int index117_38 = input.index();
                input.rewind();
                s = -1;
                if ((synpred8_XQueryParser())) {
                    s = 43;
                }

                else if ((synpred9_XQueryParser())) {
                    s = 44;
                }

                else if ((synpred10_XQueryParser())) {
                    s = 47;
                }

                else if ((synpred11_XQueryParser())) {
                    s = 45;
                }

                else if ((synpred12_XQueryParser())) {
                    s = 46;
                }

                else if ((true)) {
                    s = 48;
                }

                input.seek(index117_38);
                if (s >= 0) {
                    return s;
                }
                break;
            case 38:
                int LA117_39 = input.LA(1);

                int index117_39 = input.index();
                input.rewind();
                s = -1;
                if ((synpred8_XQueryParser())) {
                    s = 43;
                }

                else if ((synpred9_XQueryParser())) {
                    s = 44;
                }

                else if ((synpred10_XQueryParser())) {
                    s = 47;
                }

                else if ((synpred11_XQueryParser())) {
                    s = 45;
                }

                else if ((synpred12_XQueryParser())) {
                    s = 46;
                }

                else if ((true)) {
                    s = 48;
                }

                input.seek(index117_39);
                if (s >= 0) {
                    return s;
                }
                break;
            case 39:
                int LA117_40 = input.LA(1);

                int index117_40 = input.index();
                input.rewind();
                s = -1;
                if ((synpred8_XQueryParser())) {
                    s = 43;
                }

                else if ((synpred9_XQueryParser())) {
                    s = 44;
                }

                else if ((synpred10_XQueryParser())) {
                    s = 47;
                }

                else if ((synpred11_XQueryParser())) {
                    s = 45;
                }

                else if ((synpred12_XQueryParser())) {
                    s = 46;
                }

                else if ((true)) {
                    s = 48;
                }

                input.seek(index117_40);
                if (s >= 0) {
                    return s;
                }
                break;
            case 40:
                int LA117_41 = input.LA(1);

                int index117_41 = input.index();
                input.rewind();
                s = -1;
                if ((synpred8_XQueryParser())) {
                    s = 43;
                }

                else if ((synpred9_XQueryParser())) {
                    s = 44;
                }

                else if ((synpred10_XQueryParser())) {
                    s = 47;
                }

                else if ((synpred11_XQueryParser())) {
                    s = 45;
                }

                else if ((synpred12_XQueryParser())) {
                    s = 46;
                }

                else if ((true)) {
                    s = 48;
                }

                input.seek(index117_41);
                if (s >= 0) {
                    return s;
                }
                break;
            case 41:
                int LA117_42 = input.LA(1);

                int index117_42 = input.index();
                input.rewind();
                s = -1;
                if ((synpred10_XQueryParser())) {
                    s = 47;
                }

                else if ((true)) {
                    s = 48;
                }

                input.seek(index117_42);
                if (s >= 0) {
                    return s;
                }
                break;
            }
            if (state.backtracking > 0) {
                state.failed = true;
                return -1;
            }
            NoViableAltException nvae = new NoViableAltException(getDescription(), 117, _s, input);
            error(nvae);
            throw nvae;
        }
    }

    static final String DFA119_eotS = "\12\uffff";
    static final String DFA119_eofS = "\1\uffff\7\10\2\uffff";
    static final String DFA119_minS = "\1\20\7\22\2\uffff";
    static final String DFA119_maxS = "\1\u0154\7\u00fe\2\uffff";
    static final String DFA119_acceptS = "\10\uffff\1\2\1\1";
    static final String DFA119_specialS = "\12\uffff}>";
    static final String[] DFA119_transitionS = {
            "\6\10\1\3\6\10\1\1\6\10\1\2\1\5\15\10\1\7\1\6\52\10\1\4\73\10"
                + "\1\uffff\100\10\20\uffff\1\10\30\uffff\1\10\2\uffff\2\10\2\uffff" + "\1\10\107\uffff\1\10",
            "\3\10\4\uffff\4\10\1\uffff\1\10\4\uffff\1\10\2\uffff\2\10\4"
                        + "\uffff\1\10\2\uffff\1\10\1\uffff\1\10\3\uffff\1\10\1\uffff\1"
                        + "\10\1\uffff\2\10\4\uffff\3\10\2\uffff\1\10\1\uffff\3\10\2\uffff"
                        + "\1\10\5\uffff\2\10\7\uffff\2\10\5\uffff\1\10\4\uffff\2\10\1"
                        + "\uffff\1\10\4\uffff\1\10\4\uffff\1\10\3\uffff\2\10\6\uffff\1"
                        + "\10\5\uffff\1\10\7\uffff\2\10\4\uffff\1\10\1\uffff\1\10\7\uffff"
                        + "\1\10\2\uffff\1\10\24\uffff\1\10\6\uffff\1\10\3\uffff\1\10\6"
                        + "\uffff\1\10\24\uffff\1\10\1\uffff\1\10\2\uffff\4\10\1\uffff"
                        + "\1\10\3\uffff\1\10\1\uffff\13\10\2\uffff\1\10\1\11\2\uffff\2" + "\10",
            "\3\10\4\uffff\4\10\1\uffff\1\10\4\uffff\1\10\2\uffff\2\10\4"
                                + "\uffff\1\10\2\uffff\1\10\1\uffff\1\10\3\uffff\1\10\1\uffff\1"
                                + "\10\1\uffff\2\10\4\uffff\3\10\2\uffff\1\10\1\uffff\3\10\2\uffff"
                                + "\1\10\5\uffff\2\10\7\uffff\2\10\5\uffff\1\10\4\uffff\2\10\1"
                                + "\uffff\1\10\4\uffff\1\10\4\uffff\1\10\3\uffff\2\10\6\uffff\1"
                                + "\10\5\uffff\1\10\7\uffff\2\10\4\uffff\1\10\1\uffff\1\10\7\uffff"
                                + "\1\10\2\uffff\1\10\24\uffff\1\10\6\uffff\1\10\3\uffff\1\10\6"
                                + "\uffff\1\10\24\uffff\1\10\1\uffff\1\10\2\uffff\4\10\1\uffff"
                                + "\1\10\3\uffff\1\10\1\uffff\13\10\2\uffff\1\10\1\11\2\uffff\2" + "\10",
            "\3\10\4\uffff\4\10\1\uffff\1\10\4\uffff\1\10\2\uffff\2\10\4"
                                        + "\uffff\1\10\2\uffff\1\10\1\uffff\1\10\3\uffff\1\10\1\uffff\1"
                                        + "\10\1\uffff\2\10\4\uffff\3\10\2\uffff\1\10\1\uffff\3\10\2\uffff"
                                        + "\1\10\5\uffff\2\10\7\uffff\2\10\5\uffff\1\10\4\uffff\2\10\1"
                                        + "\uffff\1\10\4\uffff\1\10\4\uffff\1\10\3\uffff\2\10\6\uffff\1"
                                        + "\10\5\uffff\1\10\7\uffff\2\10\4\uffff\1\10\1\uffff\1\10\7\uffff"
                                        + "\1\10\2\uffff\1\10\24\uffff\1\10\6\uffff\1\10\3\uffff\1\10\6"
                                        + "\uffff\1\10\24\uffff\3\10\2\uffff\4\10\1\uffff\1\10\3\uffff"
                                        + "\1\10\1\uffff\13\10\2\uffff\1\10\1\11\2\uffff\2\10",
            "\3\10\4\uffff\4\10\1\uffff\1\10\4\uffff\1\10\2\uffff\2\10\4"
                                                + "\uffff\1\10\2\uffff\1\10\1\uffff\1\10\3\uffff\1\10\1\uffff\1"
                                                + "\10\1\uffff\2\10\4\uffff\3\10\2\uffff\1\10\1\uffff\3\10\2\uffff"
                                                + "\1\10\5\uffff\2\10\7\uffff\2\10\5\uffff\1\10\4\uffff\2\10\1"
                                                + "\uffff\1\10\4\uffff\1\10\4\uffff\1\10\3\uffff\2\10\6\uffff\1"
                                                + "\10\5\uffff\1\10\7\uffff\2\10\4\uffff\1\10\1\uffff\1\10\7\uffff"
                                                + "\1\10\2\uffff\1\10\24\uffff\1\10\6\uffff\1\10\3\uffff\1\10\6"
                                                + "\uffff\1\10\24\uffff\1\10\1\uffff\1\10\2\uffff\4\10\1\uffff"
                                                + "\1\10\3\uffff\1\10\1\uffff\13\10\2\uffff\1\10\1\11\2\uffff\2" + "\10",
            "\3\10\4\uffff\4\10\1\uffff\1\10\4\uffff\1\10\2\uffff\2\10\4"
                                                        + "\uffff\1\10\2\uffff\1\10\1\uffff\1\10\3\uffff\1\10\1\uffff\1"
                                                        + "\10\1\uffff\2\10\4\uffff\3\10\2\uffff\1\10\1\uffff\3\10\2\uffff"
                                                        + "\1\10\5\uffff\2\10\7\uffff\2\10\5\uffff\1\10\4\uffff\2\10\1"
                                                        + "\uffff\1\10\4\uffff\1\10\4\uffff\1\10\3\uffff\2\10\6\uffff\1"
                                                        + "\10\5\uffff\1\10\7\uffff\2\10\4\uffff\1\10\1\uffff\1\10\7\uffff"
                                                        + "\1\10\2\uffff\1\10\24\uffff\1\10\6\uffff\1\10\3\uffff\1\10\6"
                                                        + "\uffff\1\10\24\uffff\1\10\1\uffff\1\10\2\uffff\4\10\1\uffff"
                                                        + "\1\10\3\uffff\1\10\1\uffff\13\10\2\uffff\1\10\1\11\2\uffff\2" + "\10",
            "\3\10\4\uffff\4\10\1\uffff\1\10\4\uffff\1\10\2\uffff\2\10\4"
                                                                + "\uffff\1\10\2\uffff\1\10\1\uffff\1\10\3\uffff\1\10\1\uffff\1"
                                                                + "\10\1\uffff\2\10\4\uffff\3\10\2\uffff\1\10\1\uffff\3\10\2\uffff"
                                                                + "\1\10\5\uffff\2\10\7\uffff\2\10\5\uffff\1\10\4\uffff\2\10\1"
                                                                + "\uffff\1\10\4\uffff\1\10\4\uffff\1\10\3\uffff\2\10\6\uffff\1"
                                                                + "\10\5\uffff\1\10\7\uffff\2\10\4\uffff\1\10\1\uffff\1\10\7\uffff"
                                                                + "\1\10\2\uffff\1\10\24\uffff\1\10\6\uffff\1\10\3\uffff\1\10\6"
                                                                + "\uffff\1\10\24\uffff\1\10\1\uffff\1\10\2\uffff\4\10\1\uffff"
                                                                + "\1\10\3\uffff\1\10\1\uffff\13\10\2\uffff\1\10\1\11\2\uffff\2" + "\10",
            "\3\10\4\uffff\4\10\1\uffff\1\10\4\uffff\1\10\2\uffff\2\10\4"
                                                                        + "\uffff\1\10\2\uffff\1\10\1\uffff\1\10\3\uffff\1\10\1\uffff\1"
                                                                        + "\10\1\uffff\2\10\4\uffff\3\10\2\uffff\1\10\1\uffff\3\10\2\uffff"
                                                                        + "\1\10\5\uffff\2\10\7\uffff\2\10\5\uffff\1\10\4\uffff\2\10\1"
                                                                        + "\uffff\1\10\4\uffff\1\10\4\uffff\1\10\3\uffff\2\10\6\uffff\1"
                                                                        + "\10\5\uffff\1\10\7\uffff\2\10\4\uffff\1\10\1\uffff\1\10\7\uffff"
                                                                        + "\1\10\2\uffff\1\10\24\uffff\1\10\6\uffff\1\10\3\uffff\1\10\6"
                                                                        + "\uffff\1\10\24\uffff\1\10\1\uffff\1\10\2\uffff\4\10\1\uffff"
                                                                        + "\1\10\3\uffff\1\10\1\uffff\13\10\2\uffff\1\10\1\11\2\uffff\2" + "\10", "", "" };

    static final short[] DFA119_eot = DFA.unpackEncodedString(DFA119_eotS);
    static final short[] DFA119_eof = DFA.unpackEncodedString(DFA119_eofS);
    static final char[] DFA119_min = DFA.unpackEncodedStringToUnsignedChars(DFA119_minS);
    static final char[] DFA119_max = DFA.unpackEncodedStringToUnsignedChars(DFA119_maxS);
    static final short[] DFA119_accept = DFA.unpackEncodedString(DFA119_acceptS);
    static final short[] DFA119_special = DFA.unpackEncodedString(DFA119_specialS);
    static final short[][] DFA119_transition;

    static {
        int numStates = DFA119_transitionS.length;
        DFA119_transition = new short[numStates][];
        for (int i = 0; i < numStates; i++) {
            DFA119_transition[i] = DFA.unpackEncodedString(DFA119_transitionS[i]);
        }
    }

    class DFA119 extends DFA {

        public DFA119(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 119;
            this.eot = DFA119_eot;
            this.eof = DFA119_eof;
            this.min = DFA119_min;
            this.max = DFA119_max;
            this.accept = DFA119_accept;
            this.special = DFA119_special;
            this.transition = DFA119_transition;
        }

        public String getDescription() {
            return "768:1: p_ForwardStep : ( p_ForwardAxis p_NodeTest | p_AbbrevForwardStep );";
        }
    }

    static final String DFA124_eotS = "\15\uffff";
    static final String DFA124_eofS = "\1\uffff\12\13\2\uffff";
    static final String DFA124_minS = "\1\20\12\22\2\uffff";
    static final String DFA124_maxS = "\1\u0154\12\u00fe\2\uffff";
    static final String DFA124_acceptS = "\13\uffff\1\2\1\1";
    static final String DFA124_specialS = "\15\uffff}>";
    static final String[] DFA124_transitionS = {
            "\6\13\1\3\10\13\1\7\11\13\1\1\1\2\43\13\1\12\12\13\1\6\3\13"
                + "\1\5\1\4\5\13\1\10\27\13\1\11\36\13\1\uffff\100\13\20\uffff"
                + "\1\13\33\uffff\2\13\2\uffff\1\13\107\uffff\1\13",
            "\3\13\4\uffff\4\13\1\uffff\1\13\4\uffff\1\13\2\uffff\2\13\4"
                        + "\uffff\1\13\2\uffff\1\13\1\uffff\1\13\3\uffff\1\13\1\uffff\1"
                        + "\13\1\uffff\2\13\4\uffff\3\13\2\uffff\1\13\1\uffff\3\13\2\uffff"
                        + "\1\13\5\uffff\2\13\7\uffff\2\13\5\uffff\1\13\4\uffff\2\13\1"
                        + "\uffff\1\13\4\uffff\1\13\4\uffff\1\13\3\uffff\2\13\6\uffff\1"
                        + "\13\5\uffff\1\13\7\uffff\2\13\4\uffff\1\13\1\uffff\1\13\7\uffff"
                        + "\1\13\2\uffff\1\13\24\uffff\1\13\6\uffff\1\13\3\uffff\1\13\6"
                        + "\uffff\1\13\24\uffff\1\13\1\14\1\13\2\uffff\4\13\1\uffff\1\13"
                        + "\3\uffff\1\13\1\uffff\13\13\2\uffff\1\13\3\uffff\2\13",
            "\3\13\4\uffff\4\13\1\uffff\1\13\4\uffff\1\13\2\uffff\2\13\4"
                                + "\uffff\1\13\2\uffff\1\13\1\uffff\1\13\3\uffff\1\13\1\uffff\1"
                                + "\13\1\uffff\2\13\4\uffff\3\13\2\uffff\1\13\1\uffff\3\13\2\uffff"
                                + "\1\13\5\uffff\2\13\7\uffff\2\13\5\uffff\1\13\4\uffff\2\13\1"
                                + "\uffff\1\13\4\uffff\1\13\4\uffff\1\13\3\uffff\2\13\6\uffff\1"
                                + "\13\5\uffff\1\13\7\uffff\2\13\4\uffff\1\13\1\uffff\1\13\7\uffff"
                                + "\1\13\2\uffff\1\13\24\uffff\1\13\6\uffff\1\13\3\uffff\1\13\6"
                                + "\uffff\1\13\24\uffff\1\13\1\14\1\13\2\uffff\4\13\1\uffff\1\13"
                                + "\3\uffff\1\13\1\uffff\13\13\2\uffff\1\13\3\uffff\2\13",
            "\3\13\4\uffff\4\13\1\uffff\1\13\4\uffff\1\13\2\uffff\2\13\4"
                                        + "\uffff\1\13\2\uffff\1\13\1\uffff\1\13\3\uffff\1\13\1\uffff\1"
                                        + "\13\1\uffff\2\13\4\uffff\3\13\2\uffff\1\13\1\uffff\3\13\2\uffff"
                                        + "\1\13\5\uffff\2\13\7\uffff\2\13\5\uffff\1\13\4\uffff\2\13\1"
                                        + "\uffff\1\13\4\uffff\1\13\4\uffff\1\13\3\uffff\2\13\6\uffff\1"
                                        + "\13\5\uffff\1\13\7\uffff\2\13\4\uffff\1\13\1\uffff\1\13\7\uffff"
                                        + "\1\13\2\uffff\1\13\24\uffff\1\13\6\uffff\1\13\3\uffff\1\13\6"
                                        + "\uffff\1\13\24\uffff\1\13\1\14\1\13\2\uffff\4\13\1\uffff\1\13"
                                        + "\3\uffff\1\13\1\uffff\13\13\2\uffff\1\13\3\uffff\2\13",
            "\3\13\4\uffff\4\13\1\uffff\1\13\4\uffff\1\13\2\uffff\2\13\4"
                                                + "\uffff\1\13\2\uffff\1\13\1\uffff\1\13\3\uffff\1\13\1\uffff\1"
                                                + "\13\1\uffff\2\13\4\uffff\3\13\2\uffff\1\13\1\uffff\3\13\2\uffff"
                                                + "\1\13\5\uffff\2\13\7\uffff\2\13\5\uffff\1\13\4\uffff\2\13\1"
                                                + "\uffff\1\13\4\uffff\1\13\4\uffff\1\13\3\uffff\2\13\6\uffff\1"
                                                + "\13\5\uffff\1\13\7\uffff\2\13\4\uffff\1\13\1\uffff\1\13\7\uffff"
                                                + "\1\13\2\uffff\1\13\24\uffff\1\13\6\uffff\1\13\3\uffff\1\13\6"
                                                + "\uffff\1\13\24\uffff\1\13\1\14\1\13\2\uffff\4\13\1\uffff\1\13"
                                                + "\3\uffff\1\13\1\uffff\13\13\2\uffff\1\13\3\uffff\2\13",
            "\3\13\4\uffff\4\13\1\uffff\1\13\4\uffff\1\13\2\uffff\2\13\4"
                                                        + "\uffff\1\13\2\uffff\1\13\1\uffff\1\13\3\uffff\1\13\1\uffff\1"
                                                        + "\13\1\uffff\2\13\4\uffff\3\13\2\uffff\1\13\1\uffff\3\13\2\uffff"
                                                        + "\1\13\5\uffff\2\13\7\uffff\2\13\5\uffff\1\13\4\uffff\2\13\1"
                                                        + "\uffff\1\13\4\uffff\1\13\4\uffff\1\13\3\uffff\2\13\6\uffff\1"
                                                        + "\13\5\uffff\1\13\7\uffff\2\13\4\uffff\1\13\1\uffff\1\13\7\uffff"
                                                        + "\1\13\2\uffff\1\13\24\uffff\1\13\6\uffff\1\13\3\uffff\1\13\6"
                                                        + "\uffff\1\13\24\uffff\1\13\1\14\1\13\2\uffff\4\13\1\uffff\1\13"
                                                        + "\3\uffff\1\13\1\uffff\13\13\2\uffff\1\13\3\uffff\2\13",
            "\3\13\4\uffff\4\13\1\uffff\1\13\4\uffff\1\13\2\uffff\2\13\4"
                                                                + "\uffff\1\13\2\uffff\1\13\1\uffff\1\13\3\uffff\1\13\1\uffff\1"
                                                                + "\13\1\uffff\2\13\4\uffff\3\13\2\uffff\1\13\1\uffff\3\13\2\uffff"
                                                                + "\1\13\5\uffff\2\13\7\uffff\2\13\5\uffff\1\13\4\uffff\2\13\1"
                                                                + "\uffff\1\13\4\uffff\1\13\4\uffff\1\13\3\uffff\2\13\6\uffff\1"
                                                                + "\13\5\uffff\1\13\7\uffff\2\13\4\uffff\1\13\1\uffff\1\13\7\uffff"
                                                                + "\1\13\2\uffff\1\13\24\uffff\1\13\6\uffff\1\13\3\uffff\1\13\6"
                                                                + "\uffff\1\13\24\uffff\1\13\1\14\1\13\2\uffff\4\13\1\uffff\1\13"
                                                                + "\3\uffff\1\13\1\uffff\13\13\2\uffff\1\13\3\uffff\2\13",
            "\3\13\4\uffff\4\13\1\uffff\1\13\4\uffff\1\13\2\uffff\2\13\4"
                                                                        + "\uffff\1\13\2\uffff\1\13\1\uffff\1\13\3\uffff\1\13\1\uffff\1"
                                                                        + "\13\1\uffff\2\13\4\uffff\3\13\2\uffff\1\13\1\uffff\3\13\2\uffff"
                                                                        + "\1\13\5\uffff\2\13\7\uffff\2\13\5\uffff\1\13\4\uffff\2\13\1"
                                                                        + "\uffff\1\13\4\uffff\1\13\4\uffff\1\13\3\uffff\2\13\6\uffff\1"
                                                                        + "\13\5\uffff\1\13\7\uffff\2\13\4\uffff\1\13\1\uffff\1\13\7\uffff"
                                                                        + "\1\13\2\uffff\1\13\24\uffff\1\13\6\uffff\1\13\3\uffff\1\13\6"
                                                                        + "\uffff\1\13\24\uffff\1\13\1\14\1\13\2\uffff\4\13\1\uffff\1\13"
                                                                        + "\3\uffff\1\13\1\uffff\13\13\2\uffff\1\13\3\uffff\2\13",
            "\3\13\4\uffff\4\13\1\uffff\1\13\4\uffff\1\13\2\uffff\2\13\4"
                                                                                + "\uffff\1\13\2\uffff\1\13\1\uffff\1\13\3\uffff\1\13\1\uffff\1"
                                                                                + "\13\1\uffff\2\13\4\uffff\3\13\2\uffff\1\13\1\uffff\3\13\2\uffff"
                                                                                + "\1\13\5\uffff\2\13\7\uffff\2\13\5\uffff\1\13\4\uffff\2\13\1"
                                                                                + "\uffff\1\13\4\uffff\1\13\4\uffff\1\13\3\uffff\2\13\6\uffff\1"
                                                                                + "\13\5\uffff\1\13\7\uffff\2\13\4\uffff\1\13\1\uffff\1\13\7\uffff"
                                                                                + "\1\13\2\uffff\1\13\24\uffff\1\13\6\uffff\1\13\3\uffff\1\13\6"
                                                                                + "\uffff\1\13\24\uffff\1\13\1\14\1\13\2\uffff\4\13\1\uffff\1\13"
                                                                                + "\3\uffff\1\13\1\uffff\13\13\2\uffff\1\13\3\uffff\2\13",
            "\3\13\4\uffff\4\13\1\uffff\1\13\4\uffff\1\13\2\uffff\2\13\4"
                                                                                        + "\uffff\1\13\2\uffff\1\13\1\uffff\1\13\3\uffff\1\13\1\uffff\1"
                                                                                        + "\13\1\uffff\2\13\4\uffff\3\13\2\uffff\1\13\1\uffff\3\13\2\uffff"
                                                                                        + "\1\13\5\uffff\2\13\7\uffff\2\13\5\uffff\1\13\4\uffff\2\13\1"
                                                                                        + "\uffff\1\13\4\uffff\1\13\4\uffff\1\13\3\uffff\2\13\6\uffff\1"
                                                                                        + "\13\5\uffff\1\13\7\uffff\2\13\4\uffff\1\13\1\uffff\1\13\7\uffff"
                                                                                        + "\1\13\2\uffff\1\13\24\uffff\1\13\6\uffff\1\13\3\uffff\1\13\6"
                                                                                        + "\uffff\1\13\24\uffff\1\13\1\14\1\13\2\uffff\4\13\1\uffff\1\13"
                                                                                        + "\3\uffff\1\13\1\uffff\13\13\2\uffff\1\13\3\uffff\2\13",
            "\3\13\4\uffff\4\13\1\uffff\1\13\4\uffff\1\13\2\uffff\2\13\4"
                                                                                                + "\uffff\1\13\2\uffff\1\13\1\uffff\1\13\3\uffff\1\13\1\uffff\1"
                                                                                                + "\13\1\uffff\2\13\4\uffff\3\13\2\uffff\1\13\1\uffff\3\13\2\uffff"
                                                                                                + "\1\13\5\uffff\2\13\7\uffff\2\13\5\uffff\1\13\4\uffff\2\13\1"
                                                                                                + "\uffff\1\13\4\uffff\1\13\4\uffff\1\13\3\uffff\2\13\6\uffff\1"
                                                                                                + "\13\5\uffff\1\13\7\uffff\2\13\4\uffff\1\13\1\uffff\1\13\7\uffff"
                                                                                                + "\1\13\2\uffff\1\13\24\uffff\1\13\6\uffff\1\13\3\uffff\1\13\6"
                                                                                                + "\uffff\1\13\24\uffff\1\13\1\14\1\13\2\uffff\4\13\1\uffff\1\13"
                                                                                                + "\3\uffff\1\13\1\uffff\13\13\2\uffff\1\13\3\uffff\2\13", "", "" };

    static final short[] DFA124_eot = DFA.unpackEncodedString(DFA124_eotS);
    static final short[] DFA124_eof = DFA.unpackEncodedString(DFA124_eofS);
    static final char[] DFA124_min = DFA.unpackEncodedStringToUnsignedChars(DFA124_minS);
    static final char[] DFA124_max = DFA.unpackEncodedStringToUnsignedChars(DFA124_maxS);
    static final short[] DFA124_accept = DFA.unpackEncodedString(DFA124_acceptS);
    static final short[] DFA124_special = DFA.unpackEncodedString(DFA124_specialS);
    static final short[][] DFA124_transition;

    static {
        int numStates = DFA124_transitionS.length;
        DFA124_transition = new short[numStates][];
        for (int i = 0; i < numStates; i++) {
            DFA124_transition[i] = DFA.unpackEncodedString(DFA124_transitionS[i]);
        }
    }

    class DFA124 extends DFA {

        public DFA124(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 124;
            this.eot = DFA124_eot;
            this.eof = DFA124_eof;
            this.min = DFA124_min;
            this.max = DFA124_max;
            this.accept = DFA124_accept;
            this.special = DFA124_special;
            this.transition = DFA124_transition;
        }

        public String getDescription() {
            return "810:1: p_NodeTest : ( p_KindTest | p_NameTest );";
        }
    }

    static final String DFA132_eotS = "\26\uffff";
    static final String DFA132_eofS = "\26\uffff";
    static final String DFA132_minS = "\1\20\4\uffff\1\u00dd\1\20\1\uffff\2\u00dd\1\uffff\2\20\1\u00e0"
            + "\1\u00dd\1\u00e0\1\20\5\uffff";
    static final String DFA132_maxS = "\1\u0154\4\uffff\1\u00f9\1\u0154\1\uffff\2\u00f9\1\uffff\2\u0154"
            + "\3\u00f9\1\u0154\5\uffff";
    static final String DFA132_acceptS = "\1\uffff\1\1\1\2\1\3\1\4\2\uffff\1\5\2\uffff\1\10\6\uffff\1\11\1"
            + "\6\1\7\2\10";
    static final String DFA132_specialS = "\1\1\15\uffff\1\0\7\uffff}>";
    static final String[] DFA132_transitionS = {
            "\6\7\1\14\10\7\1\17\10\7\1\11\1\7\1\6\37\7\1\13\10\7\1\5\5\7"
                + "\1\20\12\7\1\15\5\7\1\10\155\7\1\16\3\7\1\uffff\1\1\1\uffff"
                + "\1\3\1\21\16\uffff\1\12\7\uffff\1\4\20\uffff\2\2\2\uffff\1\7" + "\7\uffff\2\12\3\2\73\uffff\1\7",
            "", "", "", "", "\1\7\2\uffff\1\22\30\uffff\1\7",
            "\u008b\12\1\uffff\100\12\4\uffff\1\12\30\uffff\1\7\22\uffff" + "\1\12\107\uffff\1\12", "",
            "\1\7\2\uffff\1\23\30\uffff\1\7", "\1\7\2\uffff\1\12\30\uffff\1\7", "",
            "\u008b\12\1\uffff\100\12\1\uffff\1\7\2\uffff\1\12\30\uffff" + "\1\7\22\uffff\1\12\107\uffff\1\12",
            "\u008b\12\1\uffff\100\12\4\uffff\1\12\30\uffff\1\7\22\uffff" + "\1\12\107\uffff\1\12",
            "\1\12\30\uffff\1\7", "\1\7\2\uffff\1\24\30\uffff\1\7", "\1\25\30\uffff\1\7",
            "\u008b\25\1\uffff\100\25\4\uffff\1\25\30\uffff\1\7\22\uffff" + "\1\25\107\uffff\1\25", "", "", "", "", "" };

    static final short[] DFA132_eot = DFA.unpackEncodedString(DFA132_eotS);
    static final short[] DFA132_eof = DFA.unpackEncodedString(DFA132_eofS);
    static final char[] DFA132_min = DFA.unpackEncodedStringToUnsignedChars(DFA132_minS);
    static final char[] DFA132_max = DFA.unpackEncodedStringToUnsignedChars(DFA132_maxS);
    static final short[] DFA132_accept = DFA.unpackEncodedString(DFA132_acceptS);
    static final short[] DFA132_special = DFA.unpackEncodedString(DFA132_specialS);
    static final short[][] DFA132_transition;

    static {
        int numStates = DFA132_transitionS.length;
        DFA132_transition = new short[numStates][];
        for (int i = 0; i < numStates; i++) {
            DFA132_transition[i] = DFA.unpackEncodedString(DFA132_transitionS[i]);
        }
    }

    class DFA132 extends DFA {

        public DFA132(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 132;
            this.eot = DFA132_eot;
            this.eof = DFA132_eof;
            this.min = DFA132_min;
            this.max = DFA132_max;
            this.accept = DFA132_accept;
            this.special = DFA132_special;
            this.transition = DFA132_transition;
        }

        public String getDescription() {
            return "854:1: p_PrimaryExpr : ( ( LPAREN )=> p_ParenthesizedExpr | p_Literal | p_VarRef | p_ContextItemExpr | p_FunctionCall | p_OrderedExpr | p_UnorderedExpr | p_Constructor | p_BlockExpr );";
        }

        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
            int _s = s;
            switch (s) {
            case 0:
                int LA132_14 = input.LA(1);

                int index132_14 = input.index();
                input.rewind();
                s = -1;
                if ((LA132_14 == LPAREN || LA132_14 == COLON)) {
                    s = 7;
                }

                else if ((LA132_14 == LBRACKET) && ((lc(MLS)))) {
                    s = 20;
                }

                input.seek(index132_14);
                if (s >= 0) {
                    return s;
                }
                break;
            case 1:
                int LA132_0 = input.LA(1);

                int index132_0 = input.index();
                input.rewind();
                s = -1;
                if ((LA132_0 == LPAREN) && (synpred16_XQueryParser())) {
                    s = 1;
                }

                else if (((LA132_0 >= APOS && LA132_0 <= QUOT) || (LA132_0 >= L_IntegerLiteral && LA132_0 <= L_DoubleLiteral))) {
                    s = 2;
                }

                else if ((LA132_0 == DOLLAR)) {
                    s = 3;
                }

                else if ((LA132_0 == DOT)) {
                    s = 4;
                }

                else if ((LA132_0 == ORDERED)) {
                    s = 5;
                }

                else if ((LA132_0 == ELEMENT)) {
                    s = 6;
                }

                else if (((LA132_0 >= ANCESTOR && LA132_0 <= AT) || (LA132_0 >= BASE_URI && LA132_0 <= COLLATION)
                        || (LA132_0 >= CONSTRUCTION && LA132_0 <= DIV) || LA132_0 == DOCUMENT_NODE
                        || (LA132_0 >= ELSE && LA132_0 <= MODULE) || (LA132_0 >= NE && LA132_0 <= ORDER)
                        || (LA132_0 >= ORDERING && LA132_0 <= PRESERVE) || (LA132_0 >= RETURN && LA132_0 <= STRIP)
                        || (LA132_0 >= THEN && LA132_0 <= UNION) || (LA132_0 >= VALIDATE && LA132_0 <= UNIQUE)
                        || (LA132_0 >= AMP_ER && LA132_0 <= QUOT_ER) || LA132_0 == L_NCName || LA132_0 == EXPLICITLY)) {
                    s = 7;
                }

                else if ((LA132_0 == UNORDERED)) {
                    s = 8;
                }

                else if ((LA132_0 == DOCUMENT)) {
                    s = 9;
                }

                else if ((LA132_0 == SMALLER || (LA132_0 >= L_DirCommentConstructor && LA132_0 <= L_DirPIConstructor))) {
                    s = 10;
                }

                else if ((LA132_0 == NAMESPACE)) {
                    s = 11;
                }

                else if ((LA132_0 == ATTRIBUTE)) {
                    s = 12;
                }

                else if ((LA132_0 == TEXT)) {
                    s = 13;
                }

                else if ((LA132_0 == BINARY)) {
                    s = 14;
                }

                else if ((LA132_0 == COMMENT)) {
                    s = 15;
                }

                else if ((LA132_0 == PROCESSING_INSTRUCTION)) {
                    s = 16;
                }

                else if ((LA132_0 == LBRACKET)) {
                    s = 17;
                }

                input.seek(index132_0);
                if (s >= 0) {
                    return s;
                }
                break;
            }
            if (state.backtracking > 0) {
                state.failed = true;
                return -1;
            }
            NoViableAltException nvae = new NoViableAltException(getDescription(), 132, _s, input);
            error(nvae);
            throw nvae;
        }
    }

    static final String DFA159_eotS = "\105\uffff";
    static final String DFA159_eofS = "\1\2\104\uffff";
    static final String DFA159_minS = "\1\22\1\0\7\uffff\1\0\73\uffff";
    static final String DFA159_maxS = "\1\u00fe\1\0\7\uffff\1\0\73\uffff";
    static final String DFA159_acceptS = "\2\uffff\1\2\12\uffff\1\1\67\uffff";
    static final String DFA159_specialS = "\1\0\1\1\7\uffff\1\2\73\uffff}>";
    static final String[] DFA159_transitionS = {
            "\4\2\4\uffff\1\2\3\uffff\1\2\4\uffff\1\2\2\uffff\2\2\4\uffff"
                + "\1\2\2\uffff\1\2\1\uffff\2\2\2\uffff\1\2\1\uffff\1\2\1\uffff"
                + "\2\2\2\uffff\1\2\1\uffff\3\2\2\uffff\1\2\1\uffff\3\2\2\uffff"
                + "\1\2\5\uffff\2\2\7\uffff\2\2\5\uffff\1\2\4\uffff\1\2\2\uffff"
                + "\1\2\4\uffff\1\2\1\uffff\1\2\2\uffff\1\2\3\uffff\2\2\6\uffff"
                + "\1\2\5\uffff\1\2\7\uffff\2\2\4\uffff\1\2\1\uffff\1\2\7\uffff"
                + "\1\2\2\uffff\1\2\24\uffff\1\2\3\uffff\1\2\2\uffff\1\2\3\uffff"
                + "\1\2\6\uffff\1\2\24\uffff\1\2\1\uffff\1\2\1\uffff\2\2\1\uffff"
                + "\4\2\3\uffff\1\2\1\15\1\1\1\11\7\2\10\uffff\2\2", "\1\uffff", "", "", "", "", "", "", "",
            "\1\uffff", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "",
            "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "",
            "", "", "", "", "", "", "", "" };

    static final short[] DFA159_eot = DFA.unpackEncodedString(DFA159_eotS);
    static final short[] DFA159_eof = DFA.unpackEncodedString(DFA159_eofS);
    static final char[] DFA159_min = DFA.unpackEncodedStringToUnsignedChars(DFA159_minS);
    static final char[] DFA159_max = DFA.unpackEncodedStringToUnsignedChars(DFA159_maxS);
    static final short[] DFA159_accept = DFA.unpackEncodedString(DFA159_acceptS);
    static final short[] DFA159_special = DFA.unpackEncodedString(DFA159_specialS);
    static final short[][] DFA159_transition;

    static {
        int numStates = DFA159_transitionS.length;
        DFA159_transition = new short[numStates][];
        for (int i = 0; i < numStates; i++) {
            DFA159_transition[i] = DFA.unpackEncodedString(DFA159_transitionS[i]);
        }
    }

    class DFA159 extends DFA {

        public DFA159(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 159;
            this.eot = DFA159_eot;
            this.eof = DFA159_eof;
            this.min = DFA159_min;
            this.max = DFA159_max;
            this.accept = DFA159_accept;
            this.special = DFA159_special;
            this.transition = DFA159_transition;
        }

        public String getDescription() {
            return "1134:25: ( ( p_OccurrenceIndicator )=>oi= p_OccurrenceIndicator )?";
        }

        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
            int _s = s;
            switch (s) {
            case 0:
                int LA159_0 = input.LA(1);

                int index159_0 = input.index();
                input.rewind();
                s = -1;
                if ((LA159_0 == STAR)) {
                    s = 1;
                }

                else if ((LA159_0 == EOF || (LA159_0 >= AND && LA159_0 <= AT) || LA159_0 == CASE
                        || LA159_0 == COLLATION || LA159_0 == DEFAULT || (LA159_0 >= DESCENDING && LA159_0 <= DIV)
                        || LA159_0 == EMPTY || LA159_0 == EQ || (LA159_0 >= EXCEPT && LA159_0 <= EXTERNAL)
                        || LA159_0 == FOR || LA159_0 == GE || (LA159_0 >= GT && LA159_0 <= IDIV) || LA159_0 == IN
                        || (LA159_0 >= INSTANCE && LA159_0 <= IS) || LA159_0 == LE
                        || (LA159_0 >= LET && LA159_0 <= MOD) || LA159_0 == NE || (LA159_0 >= OR && LA159_0 <= ORDER)
                        || (LA159_0 >= RETURN && LA159_0 <= SATISFIES) || LA159_0 == STABLE || LA159_0 == TO
                        || LA159_0 == UNION || LA159_0 == WHERE || LA159_0 == ALLOWING || LA159_0 == COUNT
                        || (LA159_0 >= END && LA159_0 <= GROUP) || LA159_0 == ONLY || LA159_0 == START
                        || (LA159_0 >= AFTER && LA159_0 <= BEFORE) || LA159_0 == INTO || LA159_0 == MODIFY
                        || LA159_0 == WITH || LA159_0 == CONTAINS || LA159_0 == PARAGRAPHS || LA159_0 == SCORE
                        || LA159_0 == SENTENCES || LA159_0 == TIMES || LA159_0 == WORDS || LA159_0 == CONCAT
                        || LA159_0 == RPAREN || (LA159_0 >= LBRACKET && LA159_0 <= RBRACKET)
                        || (LA159_0 >= RSQUARE && LA159_0 <= NOTEQUAL) || LA159_0 == COMMA
                        || (LA159_0 >= MINUS && LA159_0 <= GREATER_GREATER) || (LA159_0 >= SEMICOLON && LA159_0 <= VBAR))) {
                    s = 2;
                }

                else if ((LA159_0 == PLUS)) {
                    s = 9;
                }

                else if ((LA159_0 == QUESTION) && (synpred17_XQueryParser())) {
                    s = 13;
                }

                input.seek(index159_0);
                if (s >= 0) {
                    return s;
                }
                break;
            case 1:
                int LA159_1 = input.LA(1);

                int index159_1 = input.index();
                input.rewind();
                s = -1;
                if ((synpred17_XQueryParser())) {
                    s = 13;
                }

                else if ((true)) {
                    s = 2;
                }

                input.seek(index159_1);
                if (s >= 0) {
                    return s;
                }
                break;
            case 2:
                int LA159_9 = input.LA(1);

                int index159_9 = input.index();
                input.rewind();
                s = -1;
                if ((synpred17_XQueryParser())) {
                    s = 13;
                }

                else if ((true)) {
                    s = 2;
                }

                input.seek(index159_9);
                if (s >= 0) {
                    return s;
                }
                break;
            }
            if (state.backtracking > 0) {
                state.failed = true;
                return -1;
            }
            NoViableAltException nvae = new NoViableAltException(getDescription(), 159, _s, input);
            error(nvae);
            throw nvae;
        }
    }

    static final String DFA161_eotS = "\22\uffff";
    static final String DFA161_eofS = "\1\uffff\14\15\5\uffff";
    static final String DFA161_minS = "\1\20\14\22\5\uffff";
    static final String DFA161_maxS = "\1\u0154\14\u00fe\5\uffff";
    static final String DFA161_acceptS = "\15\uffff\1\4\1\5\1\1\1\2\1\3";
    static final String DFA161_specialS = "\13\uffff\1\0\6\uffff}>";
    static final String[] DFA161_transitionS = {
            "\6\15\1\3\10\15\1\7\11\15\1\1\1\2\27\15\1\14\13\15\1\12\12\15"
                + "\1\6\3\15\1\5\1\4\5\15\1\10\27\15\1\11\36\15\1\uffff\74\15\1"
                + "\13\3\15\1\uffff\1\16\56\uffff\1\15\107\uffff\1\15",
            "\4\15\4\uffff\1\15\3\uffff\1\15\4\uffff\1\15\2\uffff\2\15\4"
                        + "\uffff\1\15\2\uffff\1\15\1\uffff\2\15\2\uffff\1\15\1\uffff\1"
                        + "\15\1\uffff\2\15\2\uffff\1\15\1\uffff\3\15\2\uffff\1\15\1\uffff"
                        + "\3\15\2\uffff\1\15\5\uffff\2\15\7\uffff\2\15\5\uffff\1\15\4"
                        + "\uffff\1\15\2\uffff\1\15\4\uffff\1\15\1\uffff\1\15\2\uffff\1"
                        + "\15\3\uffff\2\15\6\uffff\1\15\5\uffff\1\15\7\uffff\2\15\4\uffff"
                        + "\1\15\1\uffff\1\15\7\uffff\1\15\2\uffff\1\15\24\uffff\1\15\3"
                        + "\uffff\1\15\2\uffff\1\15\3\uffff\1\15\6\uffff\1\15\24\uffff"
                        + "\1\15\1\17\1\15\1\uffff\2\15\1\uffff\4\15\3\uffff\13\15\4\uffff" + "\1\15\3\uffff\2\15",
            "\4\15\4\uffff\1\15\3\uffff\1\15\4\uffff\1\15\2\uffff\2\15\4"
                                + "\uffff\1\15\2\uffff\1\15\1\uffff\2\15\2\uffff\1\15\1\uffff\1"
                                + "\15\1\uffff\2\15\2\uffff\1\15\1\uffff\3\15\2\uffff\1\15\1\uffff"
                                + "\3\15\2\uffff\1\15\5\uffff\2\15\7\uffff\2\15\5\uffff\1\15\4"
                                + "\uffff\1\15\2\uffff\1\15\4\uffff\1\15\1\uffff\1\15\2\uffff\1"
                                + "\15\3\uffff\2\15\6\uffff\1\15\5\uffff\1\15\7\uffff\2\15\4\uffff"
                                + "\1\15\1\uffff\1\15\7\uffff\1\15\2\uffff\1\15\24\uffff\1\15\3"
                                + "\uffff\1\15\2\uffff\1\15\3\uffff\1\15\6\uffff\1\15\24\uffff"
                                + "\1\15\1\17\1\15\1\uffff\2\15\1\uffff\4\15\3\uffff\13\15\4\uffff" + "\1\15\3\uffff\2\15",
            "\4\15\4\uffff\1\15\3\uffff\1\15\4\uffff\1\15\2\uffff\2\15\4"
                                        + "\uffff\1\15\2\uffff\1\15\1\uffff\2\15\2\uffff\1\15\1\uffff\1"
                                        + "\15\1\uffff\2\15\2\uffff\1\15\1\uffff\3\15\2\uffff\1\15\1\uffff"
                                        + "\3\15\2\uffff\1\15\5\uffff\2\15\7\uffff\2\15\5\uffff\1\15\4"
                                        + "\uffff\1\15\2\uffff\1\15\4\uffff\1\15\1\uffff\1\15\2\uffff\1"
                                        + "\15\3\uffff\2\15\6\uffff\1\15\5\uffff\1\15\7\uffff\2\15\4\uffff"
                                        + "\1\15\1\uffff\1\15\7\uffff\1\15\2\uffff\1\15\24\uffff\1\15\3"
                                        + "\uffff\1\15\2\uffff\1\15\3\uffff\1\15\6\uffff\1\15\24\uffff"
                                        + "\1\15\1\17\1\15\1\uffff\2\15\1\uffff\4\15\3\uffff\13\15\4\uffff" + "\1\15\3\uffff\2\15",
            "\4\15\4\uffff\1\15\3\uffff\1\15\4\uffff\1\15\2\uffff\2\15\4"
                                                + "\uffff\1\15\2\uffff\1\15\1\uffff\2\15\2\uffff\1\15\1\uffff\1"
                                                + "\15\1\uffff\2\15\2\uffff\1\15\1\uffff\3\15\2\uffff\1\15\1\uffff"
                                                + "\3\15\2\uffff\1\15\5\uffff\2\15\7\uffff\2\15\5\uffff\1\15\4"
                                                + "\uffff\1\15\2\uffff\1\15\4\uffff\1\15\1\uffff\1\15\2\uffff\1"
                                                + "\15\3\uffff\2\15\6\uffff\1\15\5\uffff\1\15\7\uffff\2\15\4\uffff"
                                                + "\1\15\1\uffff\1\15\7\uffff\1\15\2\uffff\1\15\24\uffff\1\15\3"
                                                + "\uffff\1\15\2\uffff\1\15\3\uffff\1\15\6\uffff\1\15\24\uffff"
                                                + "\1\15\1\17\1\15\1\uffff\2\15\1\uffff\4\15\3\uffff\13\15\4\uffff" + "\1\15\3\uffff\2\15",
            "\4\15\4\uffff\1\15\3\uffff\1\15\4\uffff\1\15\2\uffff\2\15\4"
                                                        + "\uffff\1\15\2\uffff\1\15\1\uffff\2\15\2\uffff\1\15\1\uffff\1"
                                                        + "\15\1\uffff\2\15\2\uffff\1\15\1\uffff\3\15\2\uffff\1\15\1\uffff"
                                                        + "\3\15\2\uffff\1\15\5\uffff\2\15\7\uffff\2\15\5\uffff\1\15\4"
                                                        + "\uffff\1\15\2\uffff\1\15\4\uffff\1\15\1\uffff\1\15\2\uffff\1"
                                                        + "\15\3\uffff\2\15\6\uffff\1\15\5\uffff\1\15\7\uffff\2\15\4\uffff"
                                                        + "\1\15\1\uffff\1\15\7\uffff\1\15\2\uffff\1\15\24\uffff\1\15\3"
                                                        + "\uffff\1\15\2\uffff\1\15\3\uffff\1\15\6\uffff\1\15\24\uffff"
                                                        + "\1\15\1\17\1\15\1\uffff\2\15\1\uffff\4\15\3\uffff\13\15\4\uffff" + "\1\15\3\uffff\2\15",
            "\4\15\4\uffff\1\15\3\uffff\1\15\4\uffff\1\15\2\uffff\2\15\4"
                                                                + "\uffff\1\15\2\uffff\1\15\1\uffff\2\15\2\uffff\1\15\1\uffff\1"
                                                                + "\15\1\uffff\2\15\2\uffff\1\15\1\uffff\3\15\2\uffff\1\15\1\uffff"
                                                                + "\3\15\2\uffff\1\15\5\uffff\2\15\7\uffff\2\15\5\uffff\1\15\4"
                                                                + "\uffff\1\15\2\uffff\1\15\4\uffff\1\15\1\uffff\1\15\2\uffff\1"
                                                                + "\15\3\uffff\2\15\6\uffff\1\15\5\uffff\1\15\7\uffff\2\15\4\uffff"
                                                                + "\1\15\1\uffff\1\15\7\uffff\1\15\2\uffff\1\15\24\uffff\1\15\3"
                                                                + "\uffff\1\15\2\uffff\1\15\3\uffff\1\15\6\uffff\1\15\24\uffff"
                                                                + "\1\15\1\17\1\15\1\uffff\2\15\1\uffff\4\15\3\uffff\13\15\4\uffff" + "\1\15\3\uffff\2\15",
            "\4\15\4\uffff\1\15\3\uffff\1\15\4\uffff\1\15\2\uffff\2\15\4"
                                                                        + "\uffff\1\15\2\uffff\1\15\1\uffff\2\15\2\uffff\1\15\1\uffff\1"
                                                                        + "\15\1\uffff\2\15\2\uffff\1\15\1\uffff\3\15\2\uffff\1\15\1\uffff"
                                                                        + "\3\15\2\uffff\1\15\5\uffff\2\15\7\uffff\2\15\5\uffff\1\15\4"
                                                                        + "\uffff\1\15\2\uffff\1\15\4\uffff\1\15\1\uffff\1\15\2\uffff\1"
                                                                        + "\15\3\uffff\2\15\6\uffff\1\15\5\uffff\1\15\7\uffff\2\15\4\uffff"
                                                                        + "\1\15\1\uffff\1\15\7\uffff\1\15\2\uffff\1\15\24\uffff\1\15\3"
                                                                        + "\uffff\1\15\2\uffff\1\15\3\uffff\1\15\6\uffff\1\15\24\uffff"
                                                                        + "\1\15\1\17\1\15\1\uffff\2\15\1\uffff\4\15\3\uffff\13\15\4\uffff" + "\1\15\3\uffff\2\15",
            "\4\15\4\uffff\1\15\3\uffff\1\15\4\uffff\1\15\2\uffff\2\15\4"
                                                                                + "\uffff\1\15\2\uffff\1\15\1\uffff\2\15\2\uffff\1\15\1\uffff\1"
                                                                                + "\15\1\uffff\2\15\2\uffff\1\15\1\uffff\3\15\2\uffff\1\15\1\uffff"
                                                                                + "\3\15\2\uffff\1\15\5\uffff\2\15\7\uffff\2\15\5\uffff\1\15\4"
                                                                                + "\uffff\1\15\2\uffff\1\15\4\uffff\1\15\1\uffff\1\15\2\uffff\1"
                                                                                + "\15\3\uffff\2\15\6\uffff\1\15\5\uffff\1\15\7\uffff\2\15\4\uffff"
                                                                                + "\1\15\1\uffff\1\15\7\uffff\1\15\2\uffff\1\15\24\uffff\1\15\3"
                                                                                + "\uffff\1\15\2\uffff\1\15\3\uffff\1\15\6\uffff\1\15\24\uffff"
                                                                                + "\1\15\1\17\1\15\1\uffff\2\15\1\uffff\4\15\3\uffff\13\15\4\uffff" + "\1\15\3\uffff\2\15",
            "\4\15\4\uffff\1\15\3\uffff\1\15\4\uffff\1\15\2\uffff\2\15\4"
                                                                                        + "\uffff\1\15\2\uffff\1\15\1\uffff\2\15\2\uffff\1\15\1\uffff\1"
                                                                                        + "\15\1\uffff\2\15\2\uffff\1\15\1\uffff\3\15\2\uffff\1\15\1\uffff"
                                                                                        + "\3\15\2\uffff\1\15\5\uffff\2\15\7\uffff\2\15\5\uffff\1\15\4"
                                                                                        + "\uffff\1\15\2\uffff\1\15\4\uffff\1\15\1\uffff\1\15\2\uffff\1"
                                                                                        + "\15\3\uffff\2\15\6\uffff\1\15\5\uffff\1\15\7\uffff\2\15\4\uffff"
                                                                                        + "\1\15\1\uffff\1\15\7\uffff\1\15\2\uffff\1\15\24\uffff\1\15\3"
                                                                                        + "\uffff\1\15\2\uffff\1\15\3\uffff\1\15\6\uffff\1\15\24\uffff"
                                                                                        + "\1\15\1\17\1\15\1\uffff\2\15\1\uffff\4\15\3\uffff\13\15\4\uffff" + "\1\15\3\uffff\2\15",
            "\4\15\4\uffff\1\15\3\uffff\1\15\4\uffff\1\15\2\uffff\2\15\4"
                                                                                                + "\uffff\1\15\2\uffff\1\15\1\uffff\2\15\2\uffff\1\15\1\uffff\1"
                                                                                                + "\15\1\uffff\2\15\2\uffff\1\15\1\uffff\3\15\2\uffff\1\15\1\uffff"
                                                                                                + "\3\15\2\uffff\1\15\5\uffff\2\15\7\uffff\2\15\5\uffff\1\15\4"
                                                                                                + "\uffff\1\15\2\uffff\1\15\4\uffff\1\15\1\uffff\1\15\2\uffff\1"
                                                                                                + "\15\3\uffff\2\15\6\uffff\1\15\5\uffff\1\15\7\uffff\2\15\4\uffff"
                                                                                                + "\1\15\1\uffff\1\15\7\uffff\1\15\2\uffff\1\15\24\uffff\1\15\3"
                                                                                                + "\uffff\1\15\2\uffff\1\15\3\uffff\1\15\6\uffff\1\15\24\uffff"
                                                                                                + "\1\15\1\17\1\15\1\uffff\2\15\1\uffff\4\15\3\uffff\13\15\4\uffff" + "\1\15\3\uffff\2\15",
            "\4\15\4\uffff\1\15\3\uffff\1\15\4\uffff\1\15\2\uffff\2\15\4"
                                                                                                        + "\uffff\1\15\2\uffff\1\15\1\uffff\2\15\2\uffff\1\15\1\uffff\1"
                                                                                                        + "\15\1\uffff\2\15\2\uffff\1\15\1\uffff\3\15\2\uffff\1\15\1\uffff"
                                                                                                        + "\3\15\2\uffff\1\15\5\uffff\2\15\7\uffff\2\15\5\uffff\1\15\4"
                                                                                                        + "\uffff\1\15\2\uffff\1\15\4\uffff\1\15\1\uffff\1\15\2\uffff\1"
                                                                                                        + "\15\3\uffff\2\15\6\uffff\1\15\5\uffff\1\15\7\uffff\2\15\4\uffff"
                                                                                                        + "\1\15\1\uffff\1\15\7\uffff\1\15\2\uffff\1\15\24\uffff\1\15\3"
                                                                                                        + "\uffff\1\15\2\uffff\1\15\3\uffff\1\15\6\uffff\1\15\24\uffff"
                                                                                                        + "\1\15\1\20\1\15\1\uffff\2\15\1\uffff\4\15\3\uffff\13\15\4\uffff" + "\1\15\3\uffff\2\15",
            "\4\15\4\uffff\1\15\3\uffff\1\15\4\uffff\1\15\2\uffff\2\15\4"
                                                                                                                + "\uffff\1\15\2\uffff\1\15\1\uffff\2\15\2\uffff\1\15\1\uffff\1"
                                                                                                                + "\15\1\uffff\2\15\2\uffff\1\15\1\uffff\3\15\2\uffff\1\15\1\uffff"
                                                                                                                + "\3\15\2\uffff\1\15\5\uffff\2\15\7\uffff\2\15\5\uffff\1\15\4"
                                                                                                                + "\uffff\1\15\2\uffff\1\15\4\uffff\1\15\1\uffff\1\15\2\uffff\1"
                                                                                                                + "\15\3\uffff\2\15\6\uffff\1\15\5\uffff\1\15\7\uffff\2\15\4\uffff"
                                                                                                                + "\1\15\1\uffff\1\15\7\uffff\1\15\2\uffff\1\15\24\uffff\1\15\3"
                                                                                                                + "\uffff\1\15\2\uffff\1\15\3\uffff\1\15\6\uffff\1\15\24\uffff"
                                                                                                                + "\1\15\1\21\1\15\1\uffff\2\15\1\uffff\4\15\3\uffff\13\15\4\uffff" + "\1\15\3\uffff\2\15", "", "",
            "", "", "" };

    static final short[] DFA161_eot = DFA.unpackEncodedString(DFA161_eotS);
    static final short[] DFA161_eof = DFA.unpackEncodedString(DFA161_eofS);
    static final char[] DFA161_min = DFA.unpackEncodedStringToUnsignedChars(DFA161_minS);
    static final char[] DFA161_max = DFA.unpackEncodedStringToUnsignedChars(DFA161_maxS);
    static final short[] DFA161_accept = DFA.unpackEncodedString(DFA161_acceptS);
    static final short[] DFA161_special = DFA.unpackEncodedString(DFA161_specialS);
    static final short[][] DFA161_transition;

    static {
        int numStates = DFA161_transitionS.length;
        DFA161_transition = new short[numStates][];
        for (int i = 0; i < numStates; i++) {
            DFA161_transition[i] = DFA.unpackEncodedString(DFA161_transitionS[i]);
        }
    }

    class DFA161 extends DFA {

        public DFA161(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 161;
            this.eot = DFA161_eot;
            this.eof = DFA161_eof;
            this.min = DFA161_min;
            this.max = DFA161_max;
            this.accept = DFA161_accept;
            this.special = DFA161_special;
            this.transition = DFA161_transition;
        }

        public String getDescription() {
            return "1144:1: p_ItemType : ( p_KindTest -> ^( KindTest p_KindTest ) | {...}? => ( BINARY LPAREN RPAREN ) -> ^( BinaryTest BINARY LPAREN RPAREN ) | ( ITEM LPAREN RPAREN ) -> ^( ItemTest ITEM LPAREN RPAREN ) | p_AtomicOrUnionType | p_ParenthesizedItemType );";
        }

        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
            int _s = s;
            switch (s) {
            case 0:
                int LA161_11 = input.LA(1);

                int index161_11 = input.index();
                input.rewind();
                s = -1;
                if ((LA161_11 == LPAREN) && ((lc(MLS)))) {
                    s = 16;
                }

                else if ((LA161_11 == EOF || (LA161_11 >= AND && LA161_11 <= AT) || LA161_11 == CASE
                        || LA161_11 == COLLATION || LA161_11 == DEFAULT || (LA161_11 >= DESCENDING && LA161_11 <= DIV)
                        || LA161_11 == EMPTY || LA161_11 == EQ || (LA161_11 >= EXCEPT && LA161_11 <= EXTERNAL)
                        || LA161_11 == FOR || LA161_11 == GE || (LA161_11 >= GT && LA161_11 <= IDIV) || LA161_11 == IN
                        || (LA161_11 >= INSTANCE && LA161_11 <= IS) || LA161_11 == LE
                        || (LA161_11 >= LET && LA161_11 <= MOD) || LA161_11 == NE
                        || (LA161_11 >= OR && LA161_11 <= ORDER) || (LA161_11 >= RETURN && LA161_11 <= SATISFIES)
                        || LA161_11 == STABLE || LA161_11 == TO || LA161_11 == UNION || LA161_11 == WHERE
                        || LA161_11 == ALLOWING || LA161_11 == COUNT || (LA161_11 >= END && LA161_11 <= GROUP)
                        || LA161_11 == ONLY || LA161_11 == START || (LA161_11 >= AFTER && LA161_11 <= BEFORE)
                        || LA161_11 == INTO || LA161_11 == MODIFY || LA161_11 == WITH || LA161_11 == CONTAINS
                        || LA161_11 == PARAGRAPHS || LA161_11 == SCORE || LA161_11 == SENTENCES || LA161_11 == TIMES
                        || LA161_11 == WORDS || LA161_11 == CONCAT || LA161_11 == RPAREN
                        || (LA161_11 >= LBRACKET && LA161_11 <= RBRACKET)
                        || (LA161_11 >= RSQUARE && LA161_11 <= NOTEQUAL)
                        || (LA161_11 >= COMMA && LA161_11 <= GREATER_GREATER) || LA161_11 == COLON || (LA161_11 >= SEMICOLON && LA161_11 <= VBAR))) {
                    s = 13;
                }

                input.seek(index161_11);
                if (s >= 0) {
                    return s;
                }
                break;
            }
            if (state.backtracking > 0) {
                state.failed = true;
                return -1;
            }
            NoViableAltException nvae = new NoViableAltException(getDescription(), 161, _s, input);
            error(nvae);
            throw nvae;
        }
    }

    static final String DFA215_eotS = "\12\uffff";
    static final String DFA215_eofS = "\12\uffff";
    static final String DFA215_minS = "\1\32\2\uffff\1\u00bd\6\uffff";
    static final String DFA215_maxS = "\1\u00c4\2\uffff\1\u00c4\6\uffff";
    static final String DFA215_acceptS = "\1\uffff\1\1\1\2\1\uffff\1\3\1\4\1\5\1\6\1\7\1\10";
    static final String DFA215_specialS = "\12\uffff}>";
    static final String[] DFA215_transitionS = {
            "\1\6\65\uffff\1\11\121\uffff\1\7\12\uffff\1\1\1\uffff\1\6\1"
                + "\uffff\1\3\13\uffff\1\5\1\10\1\4\1\uffff\1\6\2\uffff\1\2", "", "", "\1\5\1\10\1\4\4\uffff\1\2",
            "", "", "", "", "", "" };

    static final short[] DFA215_eot = DFA.unpackEncodedString(DFA215_eotS);
    static final short[] DFA215_eof = DFA.unpackEncodedString(DFA215_eofS);
    static final char[] DFA215_min = DFA.unpackEncodedStringToUnsignedChars(DFA215_minS);
    static final char[] DFA215_max = DFA.unpackEncodedStringToUnsignedChars(DFA215_maxS);
    static final short[] DFA215_accept = DFA.unpackEncodedString(DFA215_acceptS);
    static final short[] DFA215_special = DFA.unpackEncodedString(DFA215_specialS);
    static final short[][] DFA215_transition;

    static {
        int numStates = DFA215_transitionS.length;
        DFA215_transition = new short[numStates][];
        for (int i = 0; i < numStates; i++) {
            DFA215_transition[i] = DFA.unpackEncodedString(DFA215_transitionS[i]);
        }
    }

    class DFA215 extends DFA {

        public DFA215(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 215;
            this.eot = DFA215_eot;
            this.eof = DFA215_eof;
            this.min = DFA215_min;
            this.max = DFA215_max;
            this.accept = DFA215_accept;
            this.special = DFA215_special;
            this.transition = DFA215_transition;
        }

        public String getDescription() {
            return "1680:1: p_FTMatchOption : ( p_FTLanguageOption | p_FTWildCardOption | p_FTThesaurusOption | p_FTStemOption | p_FTCaseOption | p_FTDiacriticsOption | p_FTStopWordOption | p_FTExtensionOption );";
        }
    }

    static final String DFA234_eotS = "\14\uffff";
    static final String DFA234_eofS = "\14\uffff";
    static final String DFA234_minS = "\1\20\1\uffff\1\20\5\22\1\uffff\1\22\1\20\1\22";
    static final String DFA234_maxS = "\1\u0154\1\uffff\1\u0154\5\u00fe\1\uffff\1\u00fe\1\u0154\1\u00fe";
    static final String DFA234_acceptS = "\1\uffff\1\1\6\uffff\1\2\3\uffff";
    static final String DFA234_specialS = "\14\uffff}>";
    static final String[] DFA234_transitionS = {
            "\134\1\1\7\133\1\1\4\1\5\1\6\2\1\1\3\16\1\1\uffff\1\1\1\uffff"
                + "\1\2\1\1\6\uffff\1\10\4\uffff\4\1\5\uffff\4\1\14\uffff\1\1\2"
                + "\uffff\2\1\2\uffff\1\1\6\uffff\6\1\73\uffff\1\1",
            "",
            "\u008b\11\1\uffff\100\11\60\uffff\1\11\107\uffff\1\11",
            "\1\1\10\uffff\2\1\12\uffff\1\1\7\uffff\1\1\1\uffff\1\1\5\uffff"
                        + "\1\1\1\uffff\2\1\4\uffff\3\1\2\uffff\1\1\2\uffff\2\1\2\uffff"
                        + "\1\1\5\uffff\1\1\24\uffff\2\1\1\uffff\1\1\66\uffff\1\1\73\uffff"
                        + "\1\1\1\10\4\uffff\1\1\1\uffff\1\1\1\uffff\1\1\3\uffff\1\1\1"
                        + "\uffff\13\1\2\uffff\1\1\3\uffff\2\1",
            "\1\1\10\uffff\2\1\12\uffff\1\1\7\uffff\1\1\1\uffff\1\1\5\uffff"
                                + "\1\1\1\uffff\2\1\4\uffff\3\1\2\uffff\1\1\2\uffff\2\1\2\uffff"
                                + "\1\1\5\uffff\1\1\24\uffff\2\1\1\uffff\1\1\66\uffff\1\1\52\uffff"
                                + "\1\10\20\uffff\2\1\4\uffff\1\1\1\uffff\1\1\1\uffff\1\1\3\uffff"
                                + "\1\1\1\uffff\13\1\2\uffff\1\1\3\uffff\2\1",
            "\1\1\10\uffff\2\1\12\uffff\1\1\7\uffff\1\1\1\uffff\1\1\5\uffff"
                                        + "\1\1\1\uffff\2\1\4\uffff\3\1\2\uffff\1\1\2\uffff\2\1\2\uffff"
                                        + "\1\1\5\uffff\1\1\24\uffff\2\1\1\uffff\1\1\66\uffff\1\1\52\uffff"
                                        + "\1\10\20\uffff\2\1\4\uffff\1\1\1\uffff\1\1\1\uffff\1\1\3\uffff"
                                        + "\1\1\1\uffff\13\1\2\uffff\1\1\3\uffff\2\1",
            "\1\1\10\uffff\2\1\12\uffff\1\1\7\uffff\1\1\1\uffff\1\1\5\uffff"
                                                + "\1\1\1\uffff\2\1\4\uffff\3\1\2\uffff\1\1\2\uffff\2\1\2\uffff"
                                                + "\1\1\5\uffff\1\1\24\uffff\2\1\1\uffff\1\1\66\uffff\1\1\53\uffff"
                                                + "\1\10\17\uffff\2\1\4\uffff\1\1\1\uffff\1\1\1\uffff\1\1\3\uffff"
                                                + "\1\1\1\uffff\13\1\2\uffff\1\1\3\uffff\2\1",
            "\1\1\10\uffff\2\1\12\uffff\1\1\7\uffff\1\1\1\uffff\1\1\5\uffff"
                                                        + "\1\1\1\uffff\2\1\4\uffff\3\1\2\uffff\1\1\2\uffff\2\1\2\uffff"
                                                        + "\1\1\5\uffff\1\1\24\uffff\2\1\1\uffff\1\1\66\uffff\1\1\73\uffff"
                                                        + "\2\1\1\uffff\1\10\2\uffff\1\1\1\uffff\1\1\1\uffff\1\1\3\uffff"
                                                        + "\1\1\1\uffff\13\1\2\uffff\1\1\3\uffff\2\1",
            "",
            "\1\1\10\uffff\2\1\12\uffff\1\1\7\uffff\1\1\1\uffff\1\1\5\uffff"
                                                                + "\1\1\1\uffff\2\1\4\uffff\3\1\2\uffff\1\1\2\uffff\2\1\2\uffff"
                                                                + "\1\1\5\uffff\1\1\24\uffff\2\1\1\uffff\1\1\66\uffff\1\1\73\uffff"
                                                                + "\1\1\5\uffff\1\1\1\uffff\1\1\1\10\1\1\3\uffff\1\1\1\uffff\13" + "\1\2\uffff\1\12\3\uffff\2\1",
            "\u008b\13\1\uffff\100\13\60\uffff\1\13\107\uffff\1\13",
            "\1\1\10\uffff\2\1\12\uffff\1\1\7\uffff\1\1\1\uffff\1\1\5\uffff"
                                                                        + "\1\1\1\uffff\2\1\4\uffff\3\1\2\uffff\1\1\2\uffff\2\1\2\uffff"
                                                                        + "\1\1\5\uffff\1\1\24\uffff\2\1\1\uffff\1\1\66\uffff\1\1\73\uffff"
                                                                        + "\1\1\5\uffff\1\1\1\uffff\1\1\1\10\1\1\3\uffff\1\1\1\uffff\13" + "\1\6\uffff\2\1" };

    static final short[] DFA234_eot = DFA.unpackEncodedString(DFA234_eotS);
    static final short[] DFA234_eof = DFA.unpackEncodedString(DFA234_eofS);
    static final char[] DFA234_min = DFA.unpackEncodedStringToUnsignedChars(DFA234_minS);
    static final char[] DFA234_max = DFA.unpackEncodedStringToUnsignedChars(DFA234_maxS);
    static final short[] DFA234_accept = DFA.unpackEncodedString(DFA234_acceptS);
    static final short[] DFA234_special = DFA.unpackEncodedString(DFA234_specialS);
    static final short[][] DFA234_transition;

    static {
        int numStates = DFA234_transitionS.length;
        DFA234_transition = new short[numStates][];
        for (int i = 0; i < numStates; i++) {
            DFA234_transition[i] = DFA.unpackEncodedString(DFA234_transitionS[i]);
        }
    }

    class DFA234 extends DFA {

        public DFA234(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 234;
            this.eot = DFA234_eot;
            this.eof = DFA234_eof;
            this.min = DFA234_min;
            this.max = DFA234_max;
            this.accept = DFA234_accept;
            this.special = DFA234_special;
            this.transition = DFA234_transition;
        }

        public String getDescription() {
            return "1794:1: p_Hybrid[boolean strict, boolean allowConcat] : ( p_HybridExprSingle[$strict,$allowConcat] | p_Statement );";
        }
    }

    static final String DFA250_eotS = "\13\uffff";
    static final String DFA250_eofS = "\1\uffff\2\3\1\uffff\5\3\2\uffff";
    static final String DFA250_minS = "\1\20\2\22\1\uffff\5\22\2\uffff";
    static final String DFA250_maxS = "\1\u0154\2\u00fe\1\uffff\5\u00fe\2\uffff";
    static final String DFA250_acceptS = "\3\uffff\1\2\5\uffff\1\1\1\3";
    static final String DFA250_specialS = "\4\uffff\1\1\1\2\1\3\1\4\1\0\2\uffff}>";
    static final String[] DFA250_transitionS = {
            "\40\3\1\2\57\3\1\1\56\3\1\10\1\5\1\3\1\4\4\3\1\6\1\7\103\3\1"
                + "\uffff\1\3\1\uffff\2\3\13\uffff\4\3\5\uffff\4\3\14\uffff\1\3"
                + "\2\uffff\2\3\2\uffff\1\3\6\uffff\6\3\73\uffff\1\3",
            "\3\3\5\uffff\3\3\1\uffff\1\3\4\uffff\1\3\2\uffff\2\3\4\uffff"
                        + "\1\3\2\uffff\1\3\1\uffff\1\3\3\uffff\1\3\1\uffff\1\3\1\uffff"
                        + "\2\3\4\uffff\3\3\2\uffff\1\3\1\uffff\3\3\2\uffff\1\3\5\uffff"
                        + "\2\3\7\uffff\2\3\5\uffff\1\3\4\uffff\2\3\1\uffff\1\3\4\uffff"
                        + "\1\3\4\uffff\1\3\3\uffff\2\3\6\uffff\1\3\5\uffff\1\3\7\uffff"
                        + "\2\3\4\uffff\1\3\1\uffff\1\3\7\uffff\1\3\2\uffff\1\3\73\uffff"
                        + "\3\3\1\11\1\uffff\4\3\1\uffff\1\3\3\uffff\1\3\1\uffff\13\3\2" + "\uffff\1\3\3\uffff\2\3",
            "\3\3\5\uffff\3\3\1\uffff\1\3\4\uffff\1\3\2\uffff\2\3\4\uffff"
                                + "\1\3\2\uffff\1\3\1\uffff\1\3\3\uffff\1\3\1\uffff\1\3\1\uffff"
                                + "\2\3\4\uffff\3\3\2\uffff\1\3\1\uffff\3\3\2\uffff\1\3\5\uffff"
                                + "\2\3\7\uffff\2\3\5\uffff\1\3\4\uffff\2\3\1\uffff\1\3\4\uffff"
                                + "\1\3\4\uffff\1\3\3\uffff\2\3\6\uffff\1\3\5\uffff\1\3\7\uffff"
                                + "\2\3\4\uffff\1\3\1\uffff\1\3\7\uffff\1\3\2\uffff\1\3\73\uffff"
                                + "\3\3\1\11\1\uffff\4\3\1\uffff\1\3\3\uffff\1\3\1\uffff\13\3\2" + "\uffff\1\3\3\uffff\2\3",
            "",
            "\3\3\5\uffff\3\3\1\uffff\1\3\4\uffff\1\3\2\uffff\2\3\4\uffff"
                                        + "\1\3\2\uffff\1\3\1\uffff\1\3\3\uffff\1\3\1\uffff\1\3\1\uffff"
                                        + "\2\3\4\uffff\3\3\2\uffff\1\3\1\uffff\3\3\2\uffff\1\3\2\uffff"
                                        + "\1\12\2\uffff\2\3\7\uffff\2\3\5\uffff\1\3\4\uffff\2\3\1\uffff"
                                        + "\1\3\4\uffff\1\3\4\uffff\1\3\3\uffff\2\3\6\uffff\1\3\5\uffff"
                                        + "\1\3\7\uffff\2\3\4\uffff\1\3\1\uffff\1\3\1\12\6\uffff\1\3\2"
                                        + "\uffff\1\3\73\uffff\3\3\2\uffff\4\3\1\uffff\1\3\3\uffff\1\3"
                                        + "\1\uffff\13\3\2\uffff\1\3\3\uffff\2\3",
            "\3\3\5\uffff\3\3\1\uffff\1\3\4\uffff\1\3\2\uffff\2\3\4\uffff"
                                                + "\1\3\2\uffff\1\3\1\uffff\1\3\3\uffff\1\3\1\uffff\1\3\1\uffff"
                                                + "\2\3\4\uffff\3\3\2\uffff\1\3\1\uffff\3\3\2\uffff\1\3\2\uffff"
                                                + "\1\12\2\uffff\2\3\7\uffff\2\3\5\uffff\1\3\4\uffff\2\3\1\uffff"
                                                + "\1\3\4\uffff\1\3\4\uffff\1\3\3\uffff\2\3\6\uffff\1\3\5\uffff"
                                                + "\1\3\7\uffff\2\3\4\uffff\1\3\1\uffff\1\3\1\12\6\uffff\1\3\2"
                                                + "\uffff\1\3\73\uffff\3\3\2\uffff\4\3\1\uffff\1\3\3\uffff\1\3"
                                                + "\1\uffff\13\3\2\uffff\1\3\3\uffff\2\3",
            "\3\3\5\uffff\3\3\1\uffff\1\3\4\uffff\1\3\2\uffff\2\3\4\uffff"
                                                        + "\1\3\2\uffff\1\3\1\uffff\1\3\3\uffff\1\3\1\uffff\1\3\1\uffff"
                                                        + "\2\3\4\uffff\3\3\2\uffff\1\3\1\uffff\3\3\2\uffff\1\3\2\uffff"
                                                        + "\1\12\2\uffff\2\3\7\uffff\2\3\5\uffff\1\3\4\uffff\2\3\1\uffff"
                                                        + "\1\3\4\uffff\1\3\4\uffff\1\3\3\uffff\2\3\6\uffff\1\3\5\uffff"
                                                        + "\1\3\7\uffff\2\3\4\uffff\1\3\1\uffff\1\3\7\uffff\1\3\2\uffff"
                                                        + "\1\3\73\uffff\3\3\2\uffff\4\3\1\uffff\1\3\3\uffff\1\3\1\uffff" + "\13\3\2\uffff\1\3\3\uffff\2\3",
            "\3\3\5\uffff\3\3\1\uffff\1\3\4\uffff\1\3\2\uffff\2\3\4\uffff"
                                                                + "\1\3\2\uffff\1\3\1\uffff\1\3\3\uffff\1\3\1\uffff\1\3\1\uffff"
                                                                + "\2\3\4\uffff\3\3\2\uffff\1\3\1\uffff\3\3\2\uffff\1\3\2\uffff"
                                                                + "\1\12\2\uffff\2\3\7\uffff\2\3\5\uffff\1\3\4\uffff\2\3\1\uffff"
                                                                + "\1\3\4\uffff\1\3\4\uffff\1\3\3\uffff\2\3\6\uffff\1\3\5\uffff"
                                                                + "\1\3\7\uffff\2\3\4\uffff\1\3\1\uffff\1\3\6\uffff\1\12\1\3\2"
                                                                + "\uffff\1\3\73\uffff\3\3\2\uffff\4\3\1\uffff\1\3\3\uffff\1\3"
                                                                + "\1\uffff\13\3\2\uffff\1\3\3\uffff\2\3",
            "\3\3\5\uffff\3\3\1\uffff\1\3\4\uffff\1\3\2\uffff\2\3\4\uffff"
                                                                        + "\1\3\2\uffff\1\3\1\uffff\1\3\3\uffff\1\3\1\uffff\1\3\1\uffff"
                                                                        + "\2\3\4\uffff\3\3\2\uffff\1\3\1\uffff\3\3\2\uffff\1\3\5\uffff"
                                                                        + "\2\3\7\uffff\2\3\5\uffff\1\3\4\uffff\2\3\1\uffff\1\3\4\uffff"
                                                                        + "\1\3\4\uffff\1\3\3\uffff\2\3\6\uffff\1\3\5\uffff\1\3\7\uffff"
                                                                        + "\2\3\4\uffff\1\3\1\uffff\1\3\7\uffff\1\3\2\uffff\1\3\73\uffff"
                                                                        + "\3\3\1\12\1\uffff\4\3\1\uffff\1\3\3\uffff\1\3\1\uffff\13\3\2" + "\uffff\1\3\3\uffff\2\3", "", "" };

    static final short[] DFA250_eot = DFA.unpackEncodedString(DFA250_eotS);
    static final short[] DFA250_eof = DFA.unpackEncodedString(DFA250_eofS);
    static final char[] DFA250_min = DFA.unpackEncodedStringToUnsignedChars(DFA250_minS);
    static final char[] DFA250_max = DFA.unpackEncodedStringToUnsignedChars(DFA250_maxS);
    static final short[] DFA250_accept = DFA.unpackEncodedString(DFA250_acceptS);
    static final short[] DFA250_special = DFA.unpackEncodedString(DFA250_specialS);
    static final short[][] DFA250_transition;

    static {
        int numStates = DFA250_transitionS.length;
        DFA250_transition = new short[numStates][];
        for (int i = 0; i < numStates; i++) {
            DFA250_transition[i] = DFA.unpackEncodedString(DFA250_transitionS[i]);
        }
    }

    class DFA250 extends DFA {

        public DFA250(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 250;
            this.eot = DFA250_eot;
            this.eof = DFA250_eof;
            this.min = DFA250_min;
            this.max = DFA250_max;
            this.accept = DFA250_accept;
            this.special = DFA250_special;
            this.transition = DFA250_transition;
        }

        public String getDescription() {
            return "1936:1: p_ExprSimple : ( p_QuantifiedExpr | p_OrExpr | {...}? => pg_UpdateExpr );";
        }

        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
            int _s = s;
            switch (s) {
            case 0:
                int LA250_8 = input.LA(1);

                int index250_8 = input.index();
                input.rewind();
                s = -1;
                if ((LA250_8 == DOLLAR) && ((lc(XQU)))) {
                    s = 10;
                }

                else if ((LA250_8 == EOF || (LA250_8 >= AND && LA250_8 <= ASCENDING)
                        || (LA250_8 >= CASE && LA250_8 <= CASTABLE) || LA250_8 == COLLATION || LA250_8 == DEFAULT
                        || (LA250_8 >= DESCENDING && LA250_8 <= DIV) || LA250_8 == EMPTY || LA250_8 == EQ
                        || LA250_8 == EXCEPT || LA250_8 == FOR || LA250_8 == GE || (LA250_8 >= GT && LA250_8 <= IDIV)
                        || (LA250_8 >= INSTANCE && LA250_8 <= IS) || LA250_8 == LE
                        || (LA250_8 >= LET && LA250_8 <= MOD) || LA250_8 == NE || (LA250_8 >= OR && LA250_8 <= ORDER)
                        || (LA250_8 >= RETURN && LA250_8 <= SATISFIES) || LA250_8 == STABLE
                        || (LA250_8 >= TO && LA250_8 <= TREAT) || LA250_8 == UNION || LA250_8 == WHERE
                        || LA250_8 == COUNT || (LA250_8 >= END && LA250_8 <= GROUP) || LA250_8 == ONLY
                        || LA250_8 == START || (LA250_8 >= AFTER && LA250_8 <= BEFORE) || LA250_8 == INTO
                        || LA250_8 == MODIFY || LA250_8 == WITH || LA250_8 == CONTAINS
                        || (LA250_8 >= CONCAT && LA250_8 <= RPAREN) || (LA250_8 >= RBRACKET && LA250_8 <= EQUAL)
                        || LA250_8 == NOTEQUAL || LA250_8 == COMMA || (LA250_8 >= STAR && LA250_8 <= SLASH_SLASH)
                        || LA250_8 == COLON || (LA250_8 >= SEMICOLON && LA250_8 <= VBAR))) {
                    s = 3;
                }

                input.seek(index250_8);
                if (s >= 0) {
                    return s;
                }
                break;
            case 1:
                int LA250_4 = input.LA(1);

                int index250_4 = input.index();
                input.rewind();
                s = -1;
                if ((LA250_4 == EOF || (LA250_4 >= AND && LA250_4 <= ASCENDING)
                        || (LA250_4 >= CASE && LA250_4 <= CASTABLE) || LA250_4 == COLLATION || LA250_4 == DEFAULT
                        || (LA250_4 >= DESCENDING && LA250_4 <= DIV) || LA250_4 == EMPTY || LA250_4 == EQ
                        || LA250_4 == EXCEPT || LA250_4 == FOR || LA250_4 == GE || (LA250_4 >= GT && LA250_4 <= IDIV)
                        || (LA250_4 >= INSTANCE && LA250_4 <= IS) || LA250_4 == LE
                        || (LA250_4 >= LET && LA250_4 <= MOD) || LA250_4 == NE || (LA250_4 >= OR && LA250_4 <= ORDER)
                        || (LA250_4 >= RETURN && LA250_4 <= SATISFIES) || LA250_4 == STABLE
                        || (LA250_4 >= TO && LA250_4 <= TREAT) || LA250_4 == UNION || LA250_4 == WHERE
                        || LA250_4 == COUNT || (LA250_4 >= END && LA250_4 <= GROUP) || LA250_4 == ONLY
                        || LA250_4 == START || (LA250_4 >= AFTER && LA250_4 <= BEFORE) || LA250_4 == INTO
                        || LA250_4 == MODIFY || LA250_4 == WITH || LA250_4 == CONTAINS
                        || (LA250_4 >= CONCAT && LA250_4 <= RPAREN) || (LA250_4 >= RBRACKET && LA250_4 <= EQUAL)
                        || LA250_4 == NOTEQUAL || LA250_4 == COMMA || (LA250_4 >= STAR && LA250_4 <= SLASH_SLASH)
                        || LA250_4 == COLON || (LA250_4 >= SEMICOLON && LA250_4 <= VBAR))) {
                    s = 3;
                }

                else if ((LA250_4 == NODE || LA250_4 == NODES) && ((lc(XQU)))) {
                    s = 10;
                }

                input.seek(index250_4);
                if (s >= 0) {
                    return s;
                }
                break;
            case 2:
                int LA250_5 = input.LA(1);

                int index250_5 = input.index();
                input.rewind();
                s = -1;
                if ((LA250_5 == EOF || (LA250_5 >= AND && LA250_5 <= ASCENDING)
                        || (LA250_5 >= CASE && LA250_5 <= CASTABLE) || LA250_5 == COLLATION || LA250_5 == DEFAULT
                        || (LA250_5 >= DESCENDING && LA250_5 <= DIV) || LA250_5 == EMPTY || LA250_5 == EQ
                        || LA250_5 == EXCEPT || LA250_5 == FOR || LA250_5 == GE || (LA250_5 >= GT && LA250_5 <= IDIV)
                        || (LA250_5 >= INSTANCE && LA250_5 <= IS) || LA250_5 == LE
                        || (LA250_5 >= LET && LA250_5 <= MOD) || LA250_5 == NE || (LA250_5 >= OR && LA250_5 <= ORDER)
                        || (LA250_5 >= RETURN && LA250_5 <= SATISFIES) || LA250_5 == STABLE
                        || (LA250_5 >= TO && LA250_5 <= TREAT) || LA250_5 == UNION || LA250_5 == WHERE
                        || LA250_5 == COUNT || (LA250_5 >= END && LA250_5 <= GROUP) || LA250_5 == ONLY
                        || LA250_5 == START || (LA250_5 >= AFTER && LA250_5 <= BEFORE) || LA250_5 == INTO
                        || LA250_5 == MODIFY || LA250_5 == WITH || LA250_5 == CONTAINS
                        || (LA250_5 >= CONCAT && LA250_5 <= RPAREN) || (LA250_5 >= RBRACKET && LA250_5 <= EQUAL)
                        || LA250_5 == NOTEQUAL || LA250_5 == COMMA || (LA250_5 >= STAR && LA250_5 <= SLASH_SLASH)
                        || LA250_5 == COLON || (LA250_5 >= SEMICOLON && LA250_5 <= VBAR))) {
                    s = 3;
                }

                else if ((LA250_5 == NODE || LA250_5 == NODES) && ((lc(XQU)))) {
                    s = 10;
                }

                input.seek(index250_5);
                if (s >= 0) {
                    return s;
                }
                break;
            case 3:
                int LA250_6 = input.LA(1);

                int index250_6 = input.index();
                input.rewind();
                s = -1;
                if ((LA250_6 == NODE) && ((lc(XQU)))) {
                    s = 10;
                }

                else if ((LA250_6 == EOF || (LA250_6 >= AND && LA250_6 <= ASCENDING)
                        || (LA250_6 >= CASE && LA250_6 <= CASTABLE) || LA250_6 == COLLATION || LA250_6 == DEFAULT
                        || (LA250_6 >= DESCENDING && LA250_6 <= DIV) || LA250_6 == EMPTY || LA250_6 == EQ
                        || LA250_6 == EXCEPT || LA250_6 == FOR || LA250_6 == GE || (LA250_6 >= GT && LA250_6 <= IDIV)
                        || (LA250_6 >= INSTANCE && LA250_6 <= IS) || LA250_6 == LE
                        || (LA250_6 >= LET && LA250_6 <= MOD) || LA250_6 == NE || (LA250_6 >= OR && LA250_6 <= ORDER)
                        || (LA250_6 >= RETURN && LA250_6 <= SATISFIES) || LA250_6 == STABLE
                        || (LA250_6 >= TO && LA250_6 <= TREAT) || LA250_6 == UNION || LA250_6 == WHERE
                        || LA250_6 == COUNT || (LA250_6 >= END && LA250_6 <= GROUP) || LA250_6 == ONLY
                        || LA250_6 == START || (LA250_6 >= AFTER && LA250_6 <= BEFORE) || LA250_6 == INTO
                        || LA250_6 == MODIFY || LA250_6 == WITH || LA250_6 == CONTAINS
                        || (LA250_6 >= CONCAT && LA250_6 <= RPAREN) || (LA250_6 >= RBRACKET && LA250_6 <= EQUAL)
                        || LA250_6 == NOTEQUAL || LA250_6 == COMMA || (LA250_6 >= STAR && LA250_6 <= SLASH_SLASH)
                        || LA250_6 == COLON || (LA250_6 >= SEMICOLON && LA250_6 <= VBAR))) {
                    s = 3;
                }

                input.seek(index250_6);
                if (s >= 0) {
                    return s;
                }
                break;
            case 4:
                int LA250_7 = input.LA(1);

                int index250_7 = input.index();
                input.rewind();
                s = -1;
                if ((LA250_7 == EOF || (LA250_7 >= AND && LA250_7 <= ASCENDING)
                        || (LA250_7 >= CASE && LA250_7 <= CASTABLE) || LA250_7 == COLLATION || LA250_7 == DEFAULT
                        || (LA250_7 >= DESCENDING && LA250_7 <= DIV) || LA250_7 == EMPTY || LA250_7 == EQ
                        || LA250_7 == EXCEPT || LA250_7 == FOR || LA250_7 == GE || (LA250_7 >= GT && LA250_7 <= IDIV)
                        || (LA250_7 >= INSTANCE && LA250_7 <= IS) || LA250_7 == LE
                        || (LA250_7 >= LET && LA250_7 <= MOD) || LA250_7 == NE || (LA250_7 >= OR && LA250_7 <= ORDER)
                        || (LA250_7 >= RETURN && LA250_7 <= SATISFIES) || LA250_7 == STABLE
                        || (LA250_7 >= TO && LA250_7 <= TREAT) || LA250_7 == UNION || LA250_7 == WHERE
                        || LA250_7 == COUNT || (LA250_7 >= END && LA250_7 <= GROUP) || LA250_7 == ONLY
                        || LA250_7 == START || (LA250_7 >= AFTER && LA250_7 <= BEFORE) || LA250_7 == INTO
                        || LA250_7 == MODIFY || LA250_7 == WITH || LA250_7 == CONTAINS
                        || (LA250_7 >= CONCAT && LA250_7 <= RPAREN) || (LA250_7 >= RBRACKET && LA250_7 <= EQUAL)
                        || LA250_7 == NOTEQUAL || LA250_7 == COMMA || (LA250_7 >= STAR && LA250_7 <= SLASH_SLASH)
                        || LA250_7 == COLON || (LA250_7 >= SEMICOLON && LA250_7 <= VBAR))) {
                    s = 3;
                }

                else if ((LA250_7 == NODE || LA250_7 == VALUE) && ((lc(XQU)))) {
                    s = 10;
                }

                input.seek(index250_7);
                if (s >= 0) {
                    return s;
                }
                break;
            }
            if (state.backtracking > 0) {
                state.failed = true;
                return -1;
            }
            NoViableAltException nvae = new NoViableAltException(getDescription(), 250, _s, input);
            error(nvae);
            throw nvae;
        }
    }

    public static final BitSet FOLLOW_p_VersionDecl_in_p_Module508 = new BitSet(new long[] { 0xFFFFFFFFFFFF0000L,
            0xFFFFFFFFFFFFFFFFL, 0xFFFFFFFFFFFFFFFFL, 0x01E0F081AFFFFFFFL, 0x0000000001F81320L, 0x0000000000100000L });
    public static final BitSet FOLLOW_p_LibraryModule_in_p_Module541 = new BitSet(new long[] { 0x0000000000000000L });
    public static final BitSet FOLLOW_p_MainModule_in_p_Module564 = new BitSet(new long[] { 0x0000000000000000L });
    public static final BitSet FOLLOW_EOF_in_p_Module588 = new BitSet(new long[] { 0x0000000000000002L });
    public static final BitSet FOLLOW_XQUERY_in_p_VersionDecl616 = new BitSet(new long[] { 0x0000400000000000L,
            0x0000200000000000L });
    public static final BitSet FOLLOW_ENCODING_in_p_VersionDecl624 = new BitSet(new long[] { 0x0000000000000000L,
            0x0000000000000000L, 0x0000000000000000L, 0x0000000000000000L, 0x0000000001C00300L });
    public static final BitSet FOLLOW_p_StringLiteral_in_p_VersionDecl630 = new BitSet(new long[] {
            0x0000000000000000L, 0x0000000000000000L, 0x0000000000000000L, 0x2000000000000000L });
    public static final BitSet FOLLOW_VERSION_in_p_VersionDecl651 = new BitSet(new long[] { 0x0000000000000000L,
            0x0000000000000000L, 0x0000000000000000L, 0x0000000000000000L, 0x0000000001C00300L });
    public static final BitSet FOLLOW_p_StringLiteral_in_p_VersionDecl657 = new BitSet(new long[] {
            0x0000400000000000L, 0x0000000000000000L, 0x0000000000000000L, 0x2000000000000000L });
    public static final BitSet FOLLOW_ENCODING_in_p_VersionDecl664 = new BitSet(new long[] { 0x0000000000000000L,
            0x0000000000000000L, 0x0000000000000000L, 0x0000000000000000L, 0x0000000001C00300L });
    public static final BitSet FOLLOW_p_StringLiteral_in_p_VersionDecl670 = new BitSet(new long[] {
            0x0000000000000000L, 0x0000000000000000L, 0x0000000000000000L, 0x2000000000000000L });
    public static final BitSet FOLLOW_SEMICOLON_in_p_VersionDecl676 = new BitSet(new long[] { 0x0000000000000002L });
    public static final BitSet FOLLOW_pm_Prolog_in_p_MainModule742 = new BitSet(new long[] { 0xFFFFFFFFFFFF0000L,
            0xFFFFFFFFFFFFFFFFL, 0xFFFFFFFFFFFFFFFFL, 0x01E0F081AFFFFFFFL, 0x0000000001F81320L, 0x0000000000100000L });
    public static final BitSet FOLLOW_pm_QueryBody_in_p_MainModule744 = new BitSet(new long[] { 0x0000000000000002L });
    public static final BitSet FOLLOW_p_ModuleDecl_in_p_LibraryModule800 = new BitSet(
            new long[] { 0x1000000400000000L });
    public static final BitSet FOLLOW_pm_Prolog_in_p_LibraryModule802 = new BitSet(new long[] { 0x0000000000000002L });
    public static final BitSet FOLLOW_MODULE_in_p_ModuleDecl858 = new BitSet(new long[] { 0x0000000000000000L,
            0x0000000000000400L });
    public static final BitSet FOLLOW_NAMESPACE_in_p_ModuleDecl862 = new BitSet(new long[] { 0xFFFFFFFFFFFF0000L,
            0xFFFFFFFFFFFFFFFFL, 0xFFFFFFFFF7FFFFFFL, 0x000000000FFFFFFFL, 0x0000000000001000L, 0x0000000000100000L });
    public static final BitSet FOLLOW_p_NCName_in_p_ModuleDecl866 = new BitSet(new long[] { 0x0000000000000000L,
            0x0000000000000000L, 0x0000000000000000L, 0x0000001000000000L });
    public static final BitSet FOLLOW_EQUAL_in_p_ModuleDecl868 = new BitSet(new long[] { 0x0000000000000000L,
            0x0000000000000000L, 0x0000000000000000L, 0x0000000000000000L, 0x0000000001C00300L });
    public static final BitSet FOLLOW_p_StringLiteral_in_p_ModuleDecl870 = new BitSet(new long[] { 0x0000000000000000L,
            0x0000000000000000L, 0x0000000000000000L, 0x2000000000000000L });
    public static final BitSet FOLLOW_SEMICOLON_in_p_ModuleDecl872 = new BitSet(new long[] { 0x0000000000000002L });
    public static final BitSet FOLLOW_pm_DefaultNamespaceDecl_in_pm_Prolog931 = new BitSet(
            new long[] { 0x1000000400000002L });
    public static final BitSet FOLLOW_p_Setter_in_pm_Prolog937 = new BitSet(new long[] { 0x1000000400000002L });
    public static final BitSet FOLLOW_pm_NamespaceDecl_in_pm_Prolog943 = new BitSet(new long[] { 0x1000000400000002L });
    public static final BitSet FOLLOW_p_Import_in_pm_Prolog949 = new BitSet(new long[] { 0x1000000400000002L });
    public static final BitSet FOLLOW_pm_FTOptionDecl_in_pm_Prolog955 = new BitSet(new long[] { 0x1000000400000002L });
    public static final BitSet FOLLOW_pg_OrderedDecl_in_pm_Prolog962 = new BitSet(new long[] { 0x0000000400000002L });
    public static final BitSet FOLLOW_pm_ContextItemDecl_in_pg_OrderedDecl1277 = new BitSet(
            new long[] { 0x0000000000000002L });
    public static final BitSet FOLLOW_pm_AnnotatedDecl_in_pg_OrderedDecl1289 = new BitSet(
            new long[] { 0x0000000000000002L });
    public static final BitSet FOLLOW_pm_OptionDecl_in_pg_OrderedDecl1301 = new BitSet(
            new long[] { 0x0000000000000002L });
    public static final BitSet FOLLOW_pm_BoundarySpaceDecl_in_p_Setter1331 = new BitSet(
            new long[] { 0x0000000000000002L });
    public static final BitSet FOLLOW_pm_DefaultCollationDecl_in_p_Setter1343 = new BitSet(
            new long[] { 0x0000000000000002L });
    public static final BitSet FOLLOW_pm_BaseURIDecl_in_p_Setter1355 = new BitSet(new long[] { 0x0000000000000002L });
    public static final BitSet FOLLOW_pm_ConstructionDecl_in_p_Setter1367 = new BitSet(
            new long[] { 0x0000000000000002L });
    public static final BitSet FOLLOW_pm_OrderingModeDecl_in_p_Setter1379 = new BitSet(
            new long[] { 0x0000000000000002L });
    public static final BitSet FOLLOW_pm_EmptyOrderDecl_in_p_Setter1391 = new BitSet(new long[] { 0x0000000000000002L });
    public static final BitSet FOLLOW_pm_RevalidationDecl_in_p_Setter1406 = new BitSet(
            new long[] { 0x0000000000000002L });
    public static final BitSet FOLLOW_pm_CopyNamespacesDecl_in_p_Setter1418 = new BitSet(
            new long[] { 0x0000000000000002L });
    public static final BitSet FOLLOW_pm_DecimalFormatDecl_in_p_Setter1430 = new BitSet(
            new long[] { 0x0000000000000002L });
    public static final BitSet FOLLOW_DECLARE_in_pm_BoundarySpaceDecl1462 = new BitSet(
            new long[] { 0x0000000001000000L });
    public static final BitSet FOLLOW_BOUNDARY_SPACE_in_pm_BoundarySpaceDecl1468 = new BitSet(new long[] {
            0x0000000000000000L, 0x0000000801000000L });
    public static final BitSet FOLLOW_PRESERVE_in_pm_BoundarySpaceDecl1477 = new BitSet(new long[] {
            0x0000000000000000L, 0x0000000000000000L, 0x0000000000000000L, 0x2000000000000000L });
    public static final BitSet FOLLOW_STRIP_in_pm_BoundarySpaceDecl1487 = new BitSet(new long[] { 0x0000000000000000L,
            0x0000000000000000L, 0x0000000000000000L, 0x2000000000000000L });
    public static final BitSet FOLLOW_SEMICOLON_in_pm_BoundarySpaceDecl1494 = new BitSet(
            new long[] { 0x0000000000000002L });
    public static final BitSet FOLLOW_DECLARE_in_pm_DefaultCollationDecl1522 = new BitSet(
            new long[] { 0x0000000800000000L });
    public static final BitSet FOLLOW_DEFAULT_in_pm_DefaultCollationDecl1528 = new BitSet(
            new long[] { 0x0000000040000000L });
    public static final BitSet FOLLOW_COLLATION_in_pm_DefaultCollationDecl1534 = new BitSet(new long[] {
            0x0000000000000000L, 0x0000000000000000L, 0x0000000000000000L, 0x0000000000000000L, 0x0000000001C00300L });
    public static final BitSet FOLLOW_p_StringLiteral_in_pm_DefaultCollationDecl1538 = new BitSet(new long[] {
            0x0000000000000000L, 0x0000000000000000L, 0x0000000000000000L, 0x2000000000000000L });
    public static final BitSet FOLLOW_SEMICOLON_in_pm_DefaultCollationDecl1540 = new BitSet(
            new long[] { 0x0000000000000002L });
    public static final BitSet FOLLOW_DECLARE_in_pm_BaseURIDecl1576 = new BitSet(new long[] { 0x0000000000800000L });
    public static final BitSet FOLLOW_BASE_URI_in_pm_BaseURIDecl1582 = new BitSet(new long[] { 0x0000000000000000L,
            0x0000000000000000L, 0x0000000000000000L, 0x0000000000000000L, 0x0000000001C00300L });
    public static final BitSet FOLLOW_p_StringLiteral_in_pm_BaseURIDecl1588 = new BitSet(new long[] {
            0x0000000000000000L, 0x0000000000000000L, 0x0000000000000000L, 0x2000000000000000L });
    public static final BitSet FOLLOW_SEMICOLON_in_pm_BaseURIDecl1590 = new BitSet(new long[] { 0x0000000000000002L });
    public static final BitSet FOLLOW_DECLARE_in_pm_ConstructionDecl1643 = new BitSet(
            new long[] { 0x0000000100000000L });
    public static final BitSet FOLLOW_CONSTRUCTION_in_pm_ConstructionDecl1649 = new BitSet(new long[] {
            0x0000000000000000L, 0x0000000801000000L });
    public static final BitSet FOLLOW_STRIP_in_pm_ConstructionDecl1658 = new BitSet(new long[] { 0x0000000000000000L,
            0x0000000000000000L, 0x0000000000000000L, 0x2000000000000000L });
    public static final BitSet FOLLOW_PRESERVE_in_pm_ConstructionDecl1664 = new BitSet(new long[] {
            0x0000000000000000L, 0x0000000000000000L, 0x0000000000000000L, 0x2000000000000000L });
    public static final BitSet FOLLOW_SEMICOLON_in_pm_ConstructionDecl1671 = new BitSet(
            new long[] { 0x0000000000000002L });
    public static final BitSet FOLLOW_DECLARE_in_pm_OrderingModeDecl1699 = new BitSet(new long[] { 0x0000000000000000L,
            0x0000000000100000L });
    public static final BitSet FOLLOW_ORDERING_in_pm_OrderingModeDecl1705 = new BitSet(new long[] {
            0x0000000000000000L, 0x0000040000080000L });
    public static final BitSet FOLLOW_ORDERED_in_pm_OrderingModeDecl1714 = new BitSet(new long[] { 0x0000000000000000L,
            0x0000000000000000L, 0x0000000000000000L, 0x2000000000000000L });
    public static final BitSet FOLLOW_UNORDERED_in_pm_OrderingModeDecl1720 = new BitSet(new long[] {
            0x0000000000000000L, 0x0000000000000000L, 0x0000000000000000L, 0x2000000000000000L });
    public static final BitSet FOLLOW_SEMICOLON_in_pm_OrderingModeDecl1727 = new BitSet(
            new long[] { 0x0000000000000002L });
    public static final BitSet FOLLOW_DECLARE_in_pm_EmptyOrderDecl1755 = new BitSet(new long[] { 0x0000000800000000L });
    public static final BitSet FOLLOW_DEFAULT_in_pm_EmptyOrderDecl1761 = new BitSet(new long[] { 0x0000000000000000L,
            0x0000000000040000L });
    public static final BitSet FOLLOW_ORDER_in_pm_EmptyOrderDecl1767 = new BitSet(new long[] { 0x0000100000000000L });
    public static final BitSet FOLLOW_EMPTY_in_pm_EmptyOrderDecl1773 = new BitSet(new long[] { 0x0100000000000000L,
            0x0000000000000020L });
    public static final BitSet FOLLOW_GREATEST_in_pm_EmptyOrderDecl1782 = new BitSet(new long[] { 0x0000000000000000L,
            0x0000000000000000L, 0x0000000000000000L, 0x2000000000000000L });
    public static final BitSet FOLLOW_LEAST_in_pm_EmptyOrderDecl1788 = new BitSet(new long[] { 0x0000000000000000L,
            0x0000000000000000L, 0x0000000000000000L, 0x2000000000000000L });
    public static final BitSet FOLLOW_SEMICOLON_in_pm_EmptyOrderDecl1795 = new BitSet(
            new long[] { 0x0000000000000002L });
    public static final BitSet FOLLOW_DECLARE_in_pm_CopyNamespacesDecl1823 = new BitSet(
            new long[] { 0x0000000200000000L });
    public static final BitSet FOLLOW_COPY_NAMESPACES_in_pm_CopyNamespacesDecl1829 = new BitSet(new long[] {
            0x0000000000000000L, 0x0000000001002000L });
    public static final BitSet FOLLOW_p_PreserveMode_in_pm_CopyNamespacesDecl1833 = new BitSet(new long[] {
            0x0000000000000000L, 0x0000000000000000L, 0x0000000000000000L, 0x0000040000000000L });
    public static final BitSet FOLLOW_COMMA_in_pm_CopyNamespacesDecl1835 = new BitSet(new long[] { 0x4000000000000000L,
            0x0000000000001000L });
    public static final BitSet FOLLOW_p_InheritMode_in_pm_CopyNamespacesDecl1837 = new BitSet(new long[] {
            0x0000000000000000L, 0x0000000000000000L, 0x0000000000000000L, 0x2000000000000000L });
    public static final BitSet FOLLOW_SEMICOLON_in_pm_CopyNamespacesDecl1839 = new BitSet(
            new long[] { 0x0000000000000002L });
    public static final BitSet FOLLOW_PRESERVE_in_p_PreserveMode1868 = new BitSet(new long[] { 0x0000000000000002L });
    public static final BitSet FOLLOW_NO_PRESERVE_in_p_PreserveMode1874 = new BitSet(new long[] { 0x0000000000000002L });
    public static final BitSet FOLLOW_INHERIT_in_p_InheritMode1906 = new BitSet(new long[] { 0x0000000000000002L });
    public static final BitSet FOLLOW_NO_INHERIT_in_p_InheritMode1912 = new BitSet(new long[] { 0x0000000000000002L });
    public static final BitSet FOLLOW_DECLARE_in_pm_DecimalFormatDecl1951 = new BitSet(new long[] {
            0x0000000800000000L, 0x0010000000000000L });
    public static final BitSet FOLLOW_DECIMAL_FORMAT_in_pm_DecimalFormatDecl1959 = new BitSet(new long[] {
            0xFFFFFFFFFFFF0000L, 0xFFFFFFFFFFFFFFFFL, 0xFFFFFFFFF7FFFFFFL, 0x000000000FFFFFFFL, 0x0000000000001000L,
            0x0000000000100000L });
    public static final BitSet FOLLOW_p_QName_in_pm_DecimalFormatDecl1963 = new BitSet(new long[] {
            0x0000000000000000L, 0x2E60000000000000L, 0x0000000000001007L, 0x2000000000000000L });
    public static final BitSet FOLLOW_DEFAULT_in_pm_DecimalFormatDecl1971 = new BitSet(new long[] {
            0x0000000000000000L, 0x0010000000000000L });
    public static final BitSet FOLLOW_DECIMAL_FORMAT_in_pm_DecimalFormatDecl1977 = new BitSet(new long[] {
            0x0000000000000000L, 0x2E60000000000000L, 0x0000000000001007L, 0x2000000000000000L });
    public static final BitSet FOLLOW_p_DFPropertyName_in_pm_DecimalFormatDecl1984 = new BitSet(new long[] {
            0x0000000000000000L, 0x0000000000000000L, 0x0000000000000000L, 0x0000001000000000L });
    public static final BitSet FOLLOW_EQUAL_in_pm_DecimalFormatDecl1986 = new BitSet(new long[] { 0x0000000000000000L,
            0x0000000000000000L, 0x0000000000000000L, 0x0000000000000000L, 0x0000000001C00300L });
    public static final BitSet FOLLOW_p_StringLiteral_in_pm_DecimalFormatDecl1988 = new BitSet(new long[] {
            0x0000000000000000L, 0x2E60000000000000L, 0x0000000000001007L, 0x2000000000000000L });
    public static final BitSet FOLLOW_SEMICOLON_in_pm_DecimalFormatDecl1992 = new BitSet(
            new long[] { 0x0000000000000002L });
    public static final BitSet FOLLOW_DECIMAL_SEPARATOR_in_p_DFPropertyName2021 = new BitSet(
            new long[] { 0x0000000000000002L });
    public static final BitSet FOLLOW_GROUPING_SEPARATOR_in_p_DFPropertyName2027 = new BitSet(
            new long[] { 0x0000000000000002L });
    public static final BitSet FOLLOW_INFINITY_in_p_DFPropertyName2033 = new BitSet(new long[] { 0x0000000000000002L });
    public static final BitSet FOLLOW_MINUS_SIGN_in_p_DFPropertyName2039 = new BitSet(
            new long[] { 0x0000000000000002L });
    public static final BitSet FOLLOW_NAN_in_p_DFPropertyName2045 = new BitSet(new long[] { 0x0000000000000002L });
    public static final BitSet FOLLOW_PERCENT_in_p_DFPropertyName2051 = new BitSet(new long[] { 0x0000000000000002L });
    public static final BitSet FOLLOW_PER_MILLE_in_p_DFPropertyName2057 = new BitSet(new long[] { 0x0000000000000002L });
    public static final BitSet FOLLOW_ZERO_DIGIT_in_p_DFPropertyName2063 = new BitSet(
            new long[] { 0x0000000000000002L });
    public static final BitSet FOLLOW_DIGIT_in_p_DFPropertyName2069 = new BitSet(new long[] { 0x0000000000000002L });
    public static final BitSet FOLLOW_PATTERN_SEPARATOR_in_p_DFPropertyName2075 = new BitSet(
            new long[] { 0x0000000000000002L });
    public static final BitSet FOLLOW_pm_SchemaImport_in_p_Import2104 = new BitSet(new long[] { 0x0000000000000002L });
    public static final BitSet FOLLOW_pm_ModuleImport_in_p_Import2108 = new BitSet(new long[] { 0x0000000000000002L });
    public static final BitSet FOLLOW_IMPORT_in_pm_SchemaImport2144 = new BitSet(new long[] { 0x0000000000000000L,
            0x0000000010000000L });
    public static final BitSet FOLLOW_SCHEMA_in_pm_SchemaImport2150 = new BitSet(new long[] { 0x0000000800000000L,
            0x0000000000000400L, 0x0000000000000000L, 0x0000000000000000L, 0x0000000001C00300L });
    public static final BitSet FOLLOW_p_SchemaPrefix_in_pm_SchemaImport2156 = new BitSet(new long[] {
            0x0000000000000000L, 0x0000000000000000L, 0x0000000000000000L, 0x0000000000000000L, 0x0000000001C00300L });
    public static final BitSet FOLLOW_p_StringLiteral_in_pm_SchemaImport2161 = new BitSet(new long[] {
            0x0000000000200000L, 0x0000000000000000L, 0x0000000000000000L, 0x2000000000000000L });
    public static final BitSet FOLLOW_AT_in_pm_SchemaImport2166 = new BitSet(new long[] { 0x0000000000000000L,
            0x0000000000000000L, 0x0000000000000000L, 0x0000000000000000L, 0x0000000001C00300L });
    public static final BitSet FOLLOW_p_StringLiteral_in_pm_SchemaImport2172 = new BitSet(new long[] {
            0x0000000000000000L, 0x0000000000000000L, 0x0000000000000000L, 0x2000040000000000L });
    public static final BitSet FOLLOW_COMMA_in_pm_SchemaImport2175 = new BitSet(new long[] { 0x0000000000000000L,
            0x0000000000000000L, 0x0000000000000000L, 0x0000000000000000L, 0x0000000001C00300L });
    public static final BitSet FOLLOW_p_StringLiteral_in_pm_SchemaImport2179 = new BitSet(new long[] {
            0x0000000000000000L, 0x0000000000000000L, 0x0000000000000000L, 0x2000040000000000L });
    public static final BitSet FOLLOW_SEMICOLON_in_pm_SchemaImport2185 = new BitSet(new long[] { 0x0000000000000002L });
    public static final BitSet FOLLOW_NAMESPACE_in_p_SchemaPrefix2255 = new BitSet(new long[] { 0xFFFFFFFFFFFF0000L,
            0xFFFFFFFFFFFFFFFFL, 0xFFFFFFFFF7FFFFFFL, 0x000000000FFFFFFFL, 0x0000000000001000L, 0x0000000000100000L });
    public static final BitSet FOLLOW_p_NCName_in_p_SchemaPrefix2261 = new BitSet(new long[] { 0x0000000000000000L,
            0x0000000000000000L, 0x0000000000000000L, 0x0000001000000000L });
    public static final BitSet FOLLOW_EQUAL_in_p_SchemaPrefix2263 = new BitSet(new long[] { 0x0000000000000002L });
    public static final BitSet FOLLOW_DEFAULT_in_p_SchemaPrefix2302 = new BitSet(new long[] { 0x0000040000000000L });
    public static final BitSet FOLLOW_ELEMENT_in_p_SchemaPrefix2308 = new BitSet(new long[] { 0x0000000000000000L,
            0x0000000000000400L });
    public static final BitSet FOLLOW_NAMESPACE_in_p_SchemaPrefix2314 = new BitSet(new long[] { 0x0000000000000002L });
    public static final BitSet FOLLOW_IMPORT_in_pm_ModuleImport2364 = new BitSet(new long[] { 0x0000000000000000L,
            0x0000000000000200L });
    public static final BitSet FOLLOW_MODULE_in_pm_ModuleImport2370 = new BitSet(new long[] { 0x0000000000000000L,
            0x0000000000000400L, 0x0000000000000000L, 0x0000000000000000L, 0x0000000001C00300L });
    public static final BitSet FOLLOW_NAMESPACE_in_pm_ModuleImport2377 = new BitSet(new long[] { 0xFFFFFFFFFFFF0000L,
            0xFFFFFFFFFFFFFFFFL, 0xFFFFFFFFF7FFFFFFL, 0x000000000FFFFFFFL, 0x0000000000001000L, 0x0000000000100000L });
    public static final BitSet FOLLOW_p_NCName_in_pm_ModuleImport2383 = new BitSet(new long[] { 0x0000000000000000L,
            0x0000000000000000L, 0x0000000000000000L, 0x0000001000000000L });
    public static final BitSet FOLLOW_EQUAL_in_pm_ModuleImport2385 = new BitSet(new long[] { 0x0000000000000000L,
            0x0000000000000000L, 0x0000000000000000L, 0x0000000000000000L, 0x0000000001C00300L });
    public static final BitSet FOLLOW_p_StringLiteral_in_pm_ModuleImport2391 = new BitSet(new long[] {
            0x0000000000200000L, 0x0000000000000000L, 0x0000000000000000L, 0x2000000000000000L });
    public static final BitSet FOLLOW_AT_in_pm_ModuleImport2396 = new BitSet(new long[] { 0x0000000000000000L,
            0x0000000000000000L, 0x0000000000000000L, 0x0000000000000000L, 0x0000000001C00300L });
    public static final BitSet FOLLOW_p_StringLiteral_in_pm_ModuleImport2402 = new BitSet(new long[] {
            0x0000000000000000L, 0x0000000000000000L, 0x0000000000000000L, 0x2000040000000000L });
    public static final BitSet FOLLOW_COMMA_in_pm_ModuleImport2405 = new BitSet(new long[] { 0x0000000000000000L,
            0x0000000000000000L, 0x0000000000000000L, 0x0000000000000000L, 0x0000000001C00300L });
    public static final BitSet FOLLOW_p_StringLiteral_in_pm_ModuleImport2409 = new BitSet(new long[] {
            0x0000000000000000L, 0x0000000000000000L, 0x0000000000000000L, 0x2000040000000000L });
    public static final BitSet FOLLOW_SEMICOLON_in_pm_ModuleImport2415 = new BitSet(new long[] { 0x0000000000000002L });
    public static final BitSet FOLLOW_DECLARE_in_pm_NamespaceDecl2484 = new BitSet(new long[] { 0x0000000000000000L,
            0x0000000000000400L });
    public static final BitSet FOLLOW_NAMESPACE_in_pm_NamespaceDecl2490 = new BitSet(new long[] { 0xFFFFFFFFFFFF0000L,
            0xFFFFFFFFFFFFFFFFL, 0xFFFFFFFFF7FFFFFFL, 0x000000000FFFFFFFL, 0x0000000000001000L, 0x0000000000100000L });
    public static final BitSet FOLLOW_p_NCName_in_pm_NamespaceDecl2496 = new BitSet(new long[] { 0x0000000000000000L,
            0x0000000000000000L, 0x0000000000000000L, 0x0000001000000000L });
    public static final BitSet FOLLOW_EQUAL_in_pm_NamespaceDecl2498 = new BitSet(new long[] { 0x0000000000000000L,
            0x0000000000000000L, 0x0000000000000000L, 0x0000000000000000L, 0x0000000001C00300L });
    public static final BitSet FOLLOW_p_StringLiteral_in_pm_NamespaceDecl2502 = new BitSet(new long[] {
            0x0000000000000000L, 0x0000000000000000L, 0x0000000000000000L, 0x2000000000000000L });
    public static final BitSet FOLLOW_SEMICOLON_in_pm_NamespaceDecl2504 = new BitSet(new long[] { 0x0000000000000002L });
    public static final BitSet FOLLOW_DECLARE_in_pm_DefaultNamespaceDecl2561 = new BitSet(
            new long[] { 0x0000000800000000L });
    public static final BitSet FOLLOW_DEFAULT_in_pm_DefaultNamespaceDecl2567 = new BitSet(
            new long[] { 0x0040040000000000L });
    public static final BitSet FOLLOW_ELEMENT_in_pm_DefaultNamespaceDecl2574 = new BitSet(new long[] {
            0x0000000000000000L, 0x0000000000000400L });
    public static final BitSet FOLLOW_FUNCTION_in_pm_DefaultNamespaceDecl2580 = new BitSet(new long[] {
            0x0000000000000000L, 0x0000000000000400L });
    public static final BitSet FOLLOW_NAMESPACE_in_pm_DefaultNamespaceDecl2587 = new BitSet(new long[] {
            0x0000000000000000L, 0x0000000000000000L, 0x0000000000000000L, 0x0000000000000000L, 0x0000000001C00300L });
    public static final BitSet FOLLOW_p_StringLiteral_in_pm_DefaultNamespaceDecl2591 = new BitSet(new long[] {
            0x0000000000000000L, 0x0000000000000000L, 0x0000000000000000L, 0x2000000000000000L });
    public static final BitSet FOLLOW_SEMICOLON_in_pm_DefaultNamespaceDecl2593 = new BitSet(
            new long[] { 0x0000000000000002L });
    public static final BitSet FOLLOW_DECLARE_in_pm_AnnotatedDecl2621 = new BitSet(new long[] { 0x0040000000000000L,
            0x0000100000000000L, 0x0000000008000000L, 0x0000008000188000L });
    public static final BitSet FOLLOW_p_Annotation_in_pm_AnnotatedDecl2625 = new BitSet(new long[] {
            0x0040000000000000L, 0x0000100000000000L, 0x0000000008000000L, 0x0000008000188000L });
    public static final BitSet FOLLOW_pg_AnnotatedDecl_in_pm_AnnotatedDecl2628 = new BitSet(new long[] {
            0x0000000000000000L, 0x0000000000000000L, 0x0000000000000000L, 0x2000000000000000L });
    public static final BitSet FOLLOW_SEMICOLON_in_pm_AnnotatedDecl2630 = new BitSet(new long[] { 0x0000000000000002L });
    public static final BitSet FOLLOW_p_VarDecl_in_pg_AnnotatedDecl2654 = new BitSet(new long[] { 0x0000000000000002L });
    public static final BitSet FOLLOW_pm_FunctionDecl_in_pg_AnnotatedDecl2666 = new BitSet(
            new long[] { 0x0000000000000002L });
    public static final BitSet FOLLOW_p_CollectionDecl_in_pg_AnnotatedDecl2681 = new BitSet(
            new long[] { 0x0000000000000002L });
    public static final BitSet FOLLOW_p_IndexDecl_in_pg_AnnotatedDecl2696 = new BitSet(
            new long[] { 0x0000000000000002L });
    public static final BitSet FOLLOW_p_ICDecl_in_pg_AnnotatedDecl2711 = new BitSet(new long[] { 0x0000000000000002L });
    public static final BitSet FOLLOW_ANN_PERCENT_in_p_Annotation2737 = new BitSet(new long[] { 0xFFFFFFFFFFFF0000L,
            0xFFFFFFFFFFFFFFFFL, 0xFFFFFFFFF7FFFFFFL, 0x000000000FFFFFFFL, 0x0000000000001000L, 0x0000000000100000L });
    public static final BitSet FOLLOW_p_QName_in_p_Annotation2739 = new BitSet(new long[] { 0x0000000000000002L,
            0x0000000000000000L, 0x0000000000000000L, 0x0000000020000000L });
    public static final BitSet FOLLOW_LPAREN_in_p_Annotation2742 = new BitSet(new long[] { 0x0000000000000000L,
            0x0000000000000000L, 0x0000000000000000L, 0x0000000000000000L, 0x0000000001C00300L });
    public static final BitSet FOLLOW_p_Literal_in_p_Annotation2744 = new BitSet(new long[] { 0x0000000000000000L,
            0x0000000000000000L, 0x0000000000000000L, 0x0000040040000000L });
    public static final BitSet FOLLOW_COMMA_in_p_Annotation2747 = new BitSet(new long[] { 0x0000000000000000L,
            0x0000000000000000L, 0x0000000000000000L, 0x0000000000000000L, 0x0000000001C00300L });
    public static final BitSet FOLLOW_p_Literal_in_p_Annotation2749 = new BitSet(new long[] { 0x0000000000000000L,
            0x0000000000000000L, 0x0000000000000000L, 0x0000040040000000L });
    public static final BitSet FOLLOW_RPAREN_in_p_Annotation2753 = new BitSet(new long[] { 0x0000000000000002L });
    public static final BitSet FOLLOW_VARIABLE_in_p_VarDecl2783 = new BitSet(new long[] { 0x0000000000000000L,
            0x0000000000000000L, 0x0000000000000000L, 0x0000000080000000L });
    public static final BitSet FOLLOW_DOLLAR_in_p_VarDecl2787 = new BitSet(new long[] { 0xFFFFFFFFFFFF0000L,
            0xFFFFFFFFFFFFFFFFL, 0xFFFFFFFFF7FFFFFFL, 0x000000000FFFFFFFL, 0x0000000000001000L, 0x0000000000100000L });
    public static final BitSet FOLLOW_p_QName_in_p_VarDecl2791 = new BitSet(new long[] { 0x0004000000080000L,
            0x0000000000000000L, 0x0000000000000000L, 0x0000002000000000L });
    public static final BitSet FOLLOW_p_TypeDeclaration_in_p_VarDecl2795 = new BitSet(new long[] { 0x0004000000000000L,
            0x0000000000000000L, 0x0000000000000000L, 0x0000002000000000L });
    public static final BitSet FOLLOW_BIND_in_p_VarDecl2800 = new BitSet(new long[] { 0xFFFFFFFFFFFF0000L,
            0xFFFFFFFFFFFFFFFFL, 0xFFFFFFFFFFFFFFFFL, 0x01E0F001AFFFFFFFL, 0x0000000001F81320L, 0x0000000000100000L });
    public static final BitSet FOLLOW_p_VarValue_in_p_VarDecl2804 = new BitSet(new long[] { 0x0000000000000002L });
    public static final BitSet FOLLOW_EXTERNAL_in_p_VarDecl2812 = new BitSet(new long[] { 0x0000000000000002L,
            0x0000000000000000L, 0x0000000000000000L, 0x0000002000000000L });
    public static final BitSet FOLLOW_BIND_in_p_VarDecl2817 = new BitSet(new long[] { 0xFFFFFFFFFFFF0000L,
            0xFFFFFFFFFFFFFFFFL, 0xFFFFFFFFFFFFFFFFL, 0x01E0F001AFFFFFFFL, 0x0000000001F81320L, 0x0000000000100000L });
    public static final BitSet FOLLOW_p_VarDefaultValue_in_p_VarDecl2821 = new BitSet(
            new long[] { 0x0000000000000002L });
    public static final BitSet FOLLOW_p_ExprSingle_in_p_VarValue2900 = new BitSet(new long[] { 0x0000000000000002L });
    public static final BitSet FOLLOW_p_ExprSingle_in_p_VarDefaultValue2927 = new BitSet(
            new long[] { 0x0000000000000002L });
    public static final BitSet FOLLOW_DECLARE_in_pm_ContextItemDecl2956 = new BitSet(new long[] { 0x0000000000000000L,
            0x0004000000000000L });
    public static final BitSet FOLLOW_CONTEXT_in_pm_ContextItemDecl2962 = new BitSet(new long[] { 0x0000000000000000L,
            0x0000000000000004L });
    public static final BitSet FOLLOW_ITEM_in_pm_ContextItemDecl2968 = new BitSet(new long[] { 0x0004000000080000L,
            0x0000000000000000L, 0x0000000000000000L, 0x0000002000000000L });
    public static final BitSet FOLLOW_AS_in_pm_ContextItemDecl2975 = new BitSet(new long[] { 0xFFFFFFFFFFFF0000L,
            0xFFFFFFFFFFFFFFFFL, 0xFFFFFFFFF7FFFFFFL, 0x000000002FFFFFFFL, 0x0000000000001000L, 0x0000000000100000L });
    public static final BitSet FOLLOW_p_ItemType_in_pm_ContextItemDecl2979 = new BitSet(new long[] {
            0x0004000000000000L, 0x0000000000000000L, 0x0000000000000000L, 0x0000002000000000L });
    public static final BitSet FOLLOW_BIND_in_pm_ContextItemDecl2985 = new BitSet(new long[] { 0xFFFFFFFFFFFF0000L,
            0xFFFFFFFFFFFFFFFFL, 0xFFFFFFFFFFFFFFFFL, 0x01E0F001AFFFFFFFL, 0x0000000001F81320L, 0x0000000000100000L });
    public static final BitSet FOLLOW_p_VarValue_in_pm_ContextItemDecl2987 = new BitSet(new long[] {
            0x0000000000000000L, 0x0000000000000000L, 0x0000000000000000L, 0x2000000000000000L });
    public static final BitSet FOLLOW_EXTERNAL_in_pm_ContextItemDecl2995 = new BitSet(new long[] { 0x0000000000000000L,
            0x0000000000000000L, 0x0000000000000000L, 0x2000002000000000L });
    public static final BitSet FOLLOW_BIND_in_pm_ContextItemDecl3000 = new BitSet(new long[] { 0xFFFFFFFFFFFF0000L,
            0xFFFFFFFFFFFFFFFFL, 0xFFFFFFFFFFFFFFFFL, 0x01E0F001AFFFFFFFL, 0x0000000001F81320L, 0x0000000000100000L });
    public static final BitSet FOLLOW_p_VarDefaultValue_in_pm_ContextItemDecl3002 = new BitSet(new long[] {
            0x0000000000000000L, 0x0000000000000000L, 0x0000000000000000L, 0x2000000000000000L });
    public static final BitSet FOLLOW_SEMICOLON_in_pm_ContextItemDecl3008 = new BitSet(
            new long[] { 0x0000000000000002L });
    public static final BitSet FOLLOW_UPDATING_in_pm_FunctionDecl3041 = new BitSet(new long[] { 0x0040000000000000L });
    public static final BitSet FOLLOW_FUNCTION_in_pm_FunctionDecl3049 = new BitSet(new long[] { 0xFFFFFFFFFFFF0000L,
            0xFFFFFFFFFFFFFFFFL, 0xFFFFFFFFFFFFFFFFL, 0x000000000FFFFFFFL, 0x0000000000001000L, 0x0000000000100000L });
    public static final BitSet FOLLOW_pg_FQName_in_pm_FunctionDecl3055 = new BitSet(new long[] { 0x0000000000000000L,
            0x0000000000000000L, 0x0000000000000000L, 0x0000000020000000L });
    public static final BitSet FOLLOW_LPAREN_in_pm_FunctionDecl3057 = new BitSet(new long[] { 0x0000000000000000L,
            0x0000000000000000L, 0x0000000000000000L, 0x00000000C0000000L });
    public static final BitSet FOLLOW_p_ParamList_in_pm_FunctionDecl3061 = new BitSet(new long[] { 0x0000000000000000L,
            0x0000000000000000L, 0x0000000000000000L, 0x0000000040000000L });
    public static final BitSet FOLLOW_RPAREN_in_pm_FunctionDecl3064 = new BitSet(new long[] { 0x0004000000080000L,
            0x0000000000000000L, 0x0000000000000000L, 0x0000000100000000L });
    public static final BitSet FOLLOW_AS_in_pm_FunctionDecl3069 = new BitSet(new long[] { 0xFFFFFFFFFFFF0000L,
            0xFFFFFFFFFFFFFFFFL, 0xFFFFFFFFF7FFFFFFL, 0x000000002FFFFFFFL, 0x0000000000001000L, 0x0000000000100000L });
    public static final BitSet FOLLOW_p_SequenceType_in_pm_FunctionDecl3075 = new BitSet(new long[] {
            0x0004000000000000L, 0x0000000000000000L, 0x0000000000000000L, 0x0000000100000000L });
    public static final BitSet FOLLOW_LBRACKET_in_pm_FunctionDecl3080 = new BitSet(new long[] { 0xFFFFFFFFFFFF0000L,
            0xFFFFFFFFFFFFFFFFL, 0xFFFFFFFFFFFFFFFFL, 0x01E0F081AFFFFFFFL, 0x0000000001F81320L, 0x0000000000100000L });
    public static final BitSet FOLLOW_p_StatementsAndOptionalExpr_in_pm_FunctionDecl3084 = new BitSet(new long[] {
            0x0000000000000000L, 0x0000000000000000L, 0x0000000000000000L, 0x0000000200000000L });
    public static final BitSet FOLLOW_RBRACKET_in_pm_FunctionDecl3086 = new BitSet(new long[] { 0x0000000000000002L });
    public static final BitSet FOLLOW_EXTERNAL_in_pm_FunctionDecl3092 = new BitSet(new long[] { 0x0000000000000002L });
    public static final BitSet FOLLOW_p_Param_in_p_ParamList3169 = new BitSet(new long[] { 0x0000000000000002L,
            0x0000000000000000L, 0x0000000000000000L, 0x0000040000000000L });
    public static final BitSet FOLLOW_COMMA_in_p_ParamList3172 = new BitSet(new long[] { 0x0000000000000000L,
            0x0000000000000000L, 0x0000000000000000L, 0x0000000080000000L });
    public static final BitSet FOLLOW_p_Param_in_p_ParamList3176 = new BitSet(new long[] { 0x0000000000000002L,
            0x0000000000000000L, 0x0000000000000000L, 0x0000040000000000L });
    public static final BitSet FOLLOW_DOLLAR_in_p_Param3234 = new BitSet(new long[] { 0xFFFFFFFFFFFF0000L,
            0xFFFFFFFFFFFFFFFFL, 0xFFFFFFFFF7FFFFFFL, 0x000000000FFFFFFFL, 0x0000000000001000L, 0x0000000000100000L });
    public static final BitSet FOLLOW_p_QName_in_p_Param3238 = new BitSet(new long[] { 0x0000000000080002L });
    public static final BitSet FOLLOW_p_TypeDeclaration_in_p_Param3242 = new BitSet(new long[] { 0x0000000000000002L });
    public static final BitSet FOLLOW_p_EnclosedExpr_in_pm_FunctionBody3298 = new BitSet(
            new long[] { 0x0000000000000002L });
    public static final BitSet FOLLOW_LBRACKET_in_p_EnclosedExpr3325 = new BitSet(new long[] { 0xFFFFFFFFFFFF0000L,
            0xFFFFFFFFFFFFFFFFL, 0xFFFFFFFFFFFFFFFFL, 0x01E0F001AFFFFFFFL, 0x0000000001F81320L, 0x0000000000100000L });
    public static final BitSet FOLLOW_p_Expr_in_p_EnclosedExpr3327 = new BitSet(new long[] { 0x0000000000000000L,
            0x0000000000000000L, 0x0000000000000000L, 0x0000000200000000L });
    public static final BitSet FOLLOW_RBRACKET_in_p_EnclosedExpr3330 = new BitSet(new long[] { 0x0000000000000002L });
    public static final BitSet FOLLOW_DECLARE_in_pm_OptionDecl3382 = new BitSet(new long[] { 0x0000000000000000L,
            0x0000000000010000L });
    public static final BitSet FOLLOW_OPTION_in_pm_OptionDecl3388 = new BitSet(new long[] { 0xFFFFFFFFFFFF0000L,
            0xFFFFFFFFFFFFFFFFL, 0xFFFFFFFFF7FFFFFFL, 0x000000000FFFFFFFL, 0x0000000000001000L, 0x0000000000100000L });
    public static final BitSet FOLLOW_p_QName_in_pm_OptionDecl3392 = new BitSet(new long[] { 0x0000000000000000L,
            0x0000000000000000L, 0x0000000000000000L, 0x0000000000000000L, 0x0000000001C00300L });
    public static final BitSet FOLLOW_p_StringLiteral_in_pm_OptionDecl3394 = new BitSet(new long[] {
            0x0000000000000000L, 0x0000000000000000L, 0x0000000000000000L, 0x2000000000000000L });
    public static final BitSet FOLLOW_SEMICOLON_in_pm_OptionDecl3396 = new BitSet(new long[] { 0x0000000000000002L });
    public static final BitSet FOLLOW_p_Program_in_pm_QueryBody3425 = new BitSet(new long[] { 0x0000000000000002L });
    public static final BitSet FOLLOW_p_Expr_in_pm_QueryBody3437 = new BitSet(new long[] { 0x0000000000000002L });
    public static final BitSet FOLLOW_p_ExprSingle_in_p_Expr3473 = new BitSet(new long[] { 0x0000000000000002L,
            0x0000000000000000L, 0x0000000000000000L, 0x0000040000000000L });
    public static final BitSet FOLLOW_COMMA_in_p_Expr3489 = new BitSet(new long[] { 0xFFFFFFFFFFFF0000L,
            0xFFFFFFFFFFFFFFFFL, 0xFFFFFFFFFFFFFFFFL, 0x01E0F001AFFFFFFFL, 0x0000000001F81320L, 0x0000000000100000L });
    public static final BitSet FOLLOW_p_ExprSingle_in_p_Expr3491 = new BitSet(new long[] { 0x0000000000000002L,
            0x0000000000000000L, 0x0000000000000000L, 0x0000040000000000L });
    public static final BitSet FOLLOW_p_FLWORHybrid_in_p_ExprSingle3564 = new BitSet(new long[] { 0x0000000000000002L });
    public static final BitSet FOLLOW_p_IfHybrid_in_p_ExprSingle3594 = new BitSet(new long[] { 0x0000000000000002L });
    public static final BitSet FOLLOW_p_SwitchHybrid_in_p_ExprSingle3620 = new BitSet(
            new long[] { 0x0000000000000002L });
    public static final BitSet FOLLOW_p_TypeswitchHybrid_in_p_ExprSingle3642 = new BitSet(
            new long[] { 0x0000000000000002L });
    public static final BitSet FOLLOW_p_TryCatchHybrid_in_p_ExprSingle3669 = new BitSet(
            new long[] { 0x0000000000000002L });
    public static final BitSet FOLLOW_p_ExprSimple_in_p_ExprSingle3682 = new BitSet(new long[] { 0x0000000000000002L });
    public static final BitSet FOLLOW_p_InitialClause_in_p_FLWORHybrid3709 = new BitSet(new long[] {
            0x0020000000000000L, 0x0108400204040040L });
    public static final BitSet FOLLOW_p_IntermediateClause_in_p_FLWORHybrid3711 = new BitSet(new long[] {
            0x0020000000000000L, 0x0108400204040040L });
    public static final BitSet FOLLOW_p_ReturnHybrid_in_p_FLWORHybrid3714 = new BitSet(
            new long[] { 0x0000000000000002L });
    public static final BitSet FOLLOW_p_ForClause_in_p_InitialClause3741 = new BitSet(
            new long[] { 0x0000000000000002L });
    public static final BitSet FOLLOW_p_LetClause_in_p_InitialClause3745 = new BitSet(
            new long[] { 0x0000000000000002L });
    public static final BitSet FOLLOW_p_WindowClause_in_p_InitialClause3749 = new BitSet(
            new long[] { 0x0000000000000002L });
    public static final BitSet FOLLOW_p_InitialClause_in_p_IntermediateClause3775 = new BitSet(
            new long[] { 0x0000000000000002L });
    public static final BitSet FOLLOW_p_WhereClause_in_p_IntermediateClause3779 = new BitSet(
            new long[] { 0x0000000000000002L });
    public static final BitSet FOLLOW_p_GroupByClause_in_p_IntermediateClause3783 = new BitSet(
            new long[] { 0x0000000000000002L });
    public static final BitSet FOLLOW_p_OrderByClause_in_p_IntermediateClause3787 = new BitSet(
            new long[] { 0x0000000000000002L });
    public static final BitSet FOLLOW_p_CountClause_in_p_IntermediateClause3791 = new BitSet(
            new long[] { 0x0000000000000002L });
    public static final BitSet FOLLOW_FOR_in_p_ForClause3820 = new BitSet(new long[] { 0x0000000000000000L,
            0x0000000000000000L, 0x0000000000000000L, 0x0000000080000000L });
    public static final BitSet FOLLOW_p_ForBinding_in_p_ForClause3824 = new BitSet(new long[] { 0x0000000000000002L,
            0x0000000000000000L, 0x0000000000000000L, 0x0000040000000000L });
    public static final BitSet FOLLOW_COMMA_in_p_ForClause3827 = new BitSet(new long[] { 0x0000000000000000L,
            0x0000000000000000L, 0x0000000000000000L, 0x0000000080000000L });
    public static final BitSet FOLLOW_p_ForBinding_in_p_ForClause3829 = new BitSet(new long[] { 0x0000000000000002L,
            0x0000000000000000L, 0x0000000000000000L, 0x0000040000000000L });
    public static final BitSet FOLLOW_DOLLAR_in_p_ForBinding3857 = new BitSet(new long[] { 0xFFFFFFFFFFFF0000L,
            0xFFFFFFFFFFFFFFFFL, 0xFFFFFFFFF7FFFFFFL, 0x000000000FFFFFFFL, 0x0000000000001000L, 0x0000000000100000L });
    public static final BitSet FOLLOW_p_VarName_in_p_ForBinding3859 = new BitSet(new long[] { 0x2000000000280000L,
            0x0001000000000000L, 0x0200000000000000L });
    public static final BitSet FOLLOW_p_TypeDeclaration_in_p_ForBinding3861 = new BitSet(new long[] {
            0x2000000000200000L, 0x0001000000000000L, 0x0200000000000000L });
    public static final BitSet FOLLOW_p_AllowingEmpty_in_p_ForBinding3864 = new BitSet(new long[] {
            0x2000000000200000L, 0x0000000000000000L, 0x0200000000000000L });
    public static final BitSet FOLLOW_p_PositionalVar_in_p_ForBinding3867 = new BitSet(new long[] {
            0x2000000000000000L, 0x0000000000000000L, 0x0200000000000000L });
    public static final BitSet FOLLOW_p_FTScoreVar_in_p_ForBinding3870 = new BitSet(new long[] { 0x2000000000000000L });
    public static final BitSet FOLLOW_IN_in_p_ForBinding3875 = new BitSet(new long[] { 0xFFFFFFFFFFFF0000L,
            0xFFFFFFFFFFFFFFFFL, 0xFFFFFFFFFFFFFFFFL, 0x01E0F001AFFFFFFFL, 0x0000000001F81320L, 0x0000000000100000L });
    public static final BitSet FOLLOW_p_ExprSingle_in_p_ForBinding3879 = new BitSet(new long[] { 0x0000000000000002L });
    public static final BitSet FOLLOW_ALLOWING_in_p_AllowingEmpty3908 = new BitSet(new long[] { 0x0000100000000000L });
    public static final BitSet FOLLOW_EMPTY_in_p_AllowingEmpty3914 = new BitSet(new long[] { 0x0000000000000002L });
    public static final BitSet FOLLOW_AT_in_p_PositionalVar3944 = new BitSet(new long[] { 0x0000000000000000L,
            0x0000000000000000L, 0x0000000000000000L, 0x0000000080000000L });
    public static final BitSet FOLLOW_DOLLAR_in_p_PositionalVar3948 = new BitSet(new long[] { 0xFFFFFFFFFFFF0000L,
            0xFFFFFFFFFFFFFFFFL, 0xFFFFFFFFF7FFFFFFL, 0x000000000FFFFFFFL, 0x0000000000001000L, 0x0000000000100000L });
    public static final BitSet FOLLOW_p_VarName_in_p_PositionalVar3950 = new BitSet(new long[] { 0x0000000000000002L });
    public static final BitSet FOLLOW_LET_in_p_LetClause3978 = new BitSet(new long[] { 0x0000000000000000L,
            0x0000000000000000L, 0x0200000000000000L, 0x0000000080000000L });
    public static final BitSet FOLLOW_p_LetBinding_in_p_LetClause3982 = new BitSet(new long[] { 0x0000000000000002L,
            0x0000000000000000L, 0x0000000000000000L, 0x0000040000000000L });
    public static final BitSet FOLLOW_COMMA_in_p_LetClause3985 = new BitSet(new long[] { 0x0000000000000000L,
            0x0000000000000000L, 0x0200000000000000L, 0x0000000080000000L });
    public static final BitSet FOLLOW_p_LetBinding_in_p_LetClause3987 = new BitSet(new long[] { 0x0000000000000002L,
            0x0000000000000000L, 0x0000000000000000L, 0x0000040000000000L });
    public static final BitSet FOLLOW_DOLLAR_in_p_LetBinding4019 = new BitSet(new long[] { 0xFFFFFFFFFFFF0000L,
            0xFFFFFFFFFFFFFFFFL, 0xFFFFFFFFF7FFFFFFL, 0x000000000FFFFFFFL, 0x0000000000001000L, 0x0000000000100000L });
    public static final BitSet FOLLOW_p_VarName_in_p_LetBinding4021 = new BitSet(new long[] { 0x0000000000080000L,
            0x0000000000000000L, 0x0000000000000000L, 0x0000002000000000L });
    public static final BitSet FOLLOW_p_TypeDeclaration_in_p_LetBinding4023 = new BitSet(new long[] {
            0x0000000000000000L, 0x0000000000000000L, 0x0000000000000000L, 0x0000002000000000L });
    public static final BitSet FOLLOW_p_FTScoreVar_in_p_LetBinding4029 = new BitSet(new long[] { 0x0000000000000000L,
            0x0000000000000000L, 0x0000000000000000L, 0x0000002000000000L });
    public static final BitSet FOLLOW_BIND_in_p_LetBinding4033 = new BitSet(new long[] { 0xFFFFFFFFFFFF0000L,
            0xFFFFFFFFFFFFFFFFL, 0xFFFFFFFFFFFFFFFFL, 0x01E0F001AFFFFFFFL, 0x0000000001F81320L, 0x0000000000100000L });
    public static final BitSet FOLLOW_p_ExprSingle_in_p_LetBinding4035 = new BitSet(new long[] { 0x0000000000000002L });
    public static final BitSet FOLLOW_FOR_in_p_WindowClause4064 = new BitSet(new long[] { 0x0000000000000000L,
            0x0000000000000000L, 0x0000000000000110L });
    public static final BitSet FOLLOW_p_TumblingWindowClause_in_p_WindowClause4069 = new BitSet(
            new long[] { 0x0000000000000002L });
    public static final BitSet FOLLOW_p_SlidingWindowClause_in_p_WindowClause4073 = new BitSet(
            new long[] { 0x0000000000000002L });
    public static final BitSet FOLLOW_TUMBLING_in_p_TumblingWindowClause4110 = new BitSet(new long[] {
            0x0000000000000000L, 0x0000000000000000L, 0x0000000000000800L });
    public static final BitSet FOLLOW_WINDOW_in_p_TumblingWindowClause4116 = new BitSet(new long[] {
            0x0000000000000000L, 0x0000000000000000L, 0x0000000000000000L, 0x0000000080000000L });
    public static final BitSet FOLLOW_DOLLAR_in_p_TumblingWindowClause4120 = new BitSet(new long[] {
            0xFFFFFFFFFFFF0000L, 0xFFFFFFFFFFFFFFFFL, 0xFFFFFFFFF7FFFFFFL, 0x000000000FFFFFFFL, 0x0000000000001000L,
            0x0000000000100000L });
    public static final BitSet FOLLOW_p_VarName_in_p_TumblingWindowClause4122 = new BitSet(
            new long[] { 0x2000000000080000L });
    public static final BitSet FOLLOW_p_TypeDeclaration_in_p_TumblingWindowClause4124 = new BitSet(
            new long[] { 0x2000000000000000L });
    public static final BitSet FOLLOW_IN_in_p_TumblingWindowClause4129 = new BitSet(new long[] { 0xFFFFFFFFFFFF0000L,
            0xFFFFFFFFFFFFFFFFL, 0xFFFFFFFFFFFFFFFFL, 0x01E0F001AFFFFFFFL, 0x0000000001F81320L, 0x0000000000100000L });
    public static final BitSet FOLLOW_p_ExprSingle_in_p_TumblingWindowClause4133 = new BitSet(new long[] {
            0x0000000000000000L, 0x0000000000000000L, 0x0000000000000020L });
    public static final BitSet FOLLOW_p_WindowStartCondition_in_p_TumblingWindowClause4136 = new BitSet(new long[] {
            0x0000000000000002L, 0x8080000000000000L });
    public static final BitSet FOLLOW_p_WindowEndCondition_in_p_TumblingWindowClause4138 = new BitSet(
            new long[] { 0x0000000000000002L });
    public static final BitSet FOLLOW_SLIDING_in_p_SlidingWindowClause4167 = new BitSet(new long[] {
            0x0000000000000000L, 0x0000000000000000L, 0x0000000000000800L });
    public static final BitSet FOLLOW_WINDOW_in_p_SlidingWindowClause4173 = new BitSet(new long[] {
            0x0000000000000000L, 0x0000000000000000L, 0x0000000000000000L, 0x0000000080000000L });
    public static final BitSet FOLLOW_DOLLAR_in_p_SlidingWindowClause4177 = new BitSet(new long[] {
            0xFFFFFFFFFFFF0000L, 0xFFFFFFFFFFFFFFFFL, 0xFFFFFFFFF7FFFFFFL, 0x000000000FFFFFFFL, 0x0000000000001000L,
            0x0000000000100000L });
    public static final BitSet FOLLOW_p_VarName_in_p_SlidingWindowClause4179 = new BitSet(
            new long[] { 0x2000000000080000L });
    public static final BitSet FOLLOW_p_TypeDeclaration_in_p_SlidingWindowClause4181 = new BitSet(
            new long[] { 0x2000000000000000L });
    public static final BitSet FOLLOW_IN_in_p_SlidingWindowClause4186 = new BitSet(new long[] { 0xFFFFFFFFFFFF0000L,
            0xFFFFFFFFFFFFFFFFL, 0xFFFFFFFFFFFFFFFFL, 0x01E0F001AFFFFFFFL, 0x0000000001F81320L, 0x0000000000100000L });
    public static final BitSet FOLLOW_p_ExprSingle_in_p_SlidingWindowClause4190 = new BitSet(new long[] {
            0x0000000000000000L, 0x0000000000000000L, 0x0000000000000020L });
    public static final BitSet FOLLOW_p_WindowStartCondition_in_p_SlidingWindowClause4193 = new BitSet(new long[] {
            0x0000000000000002L, 0x8080000000000000L });
    public static final BitSet FOLLOW_p_WindowEndCondition_in_p_SlidingWindowClause4195 = new BitSet(
            new long[] { 0x0000000000000002L });
    public static final BitSet FOLLOW_START_in_p_WindowStartCondition4224 = new BitSet(new long[] {
            0x0000000000200000L, 0x4000000000000000L, 0x0000000000000408L, 0x0000000080000000L });
    public static final BitSet FOLLOW_p_WindowVars_in_p_WindowStartCondition4228 = new BitSet(new long[] {
            0x0000000000000000L, 0x0000000000000000L, 0x0000000000000400L });
    public static final BitSet FOLLOW_WHEN_in_p_WindowStartCondition4232 = new BitSet(new long[] { 0xFFFFFFFFFFFF0000L,
            0xFFFFFFFFFFFFFFFFL, 0xFFFFFFFFFFFFFFFFL, 0x01E0F001AFFFFFFFL, 0x0000000001F81320L, 0x0000000000100000L });
    public static final BitSet FOLLOW_p_ExprSingle_in_p_WindowStartCondition4236 = new BitSet(
            new long[] { 0x0000000000000002L });
    public static final BitSet FOLLOW_ONLY_in_p_WindowEndCondition4266 = new BitSet(new long[] { 0x0000000000000000L,
            0x0080000000000000L });
    public static final BitSet FOLLOW_END_in_p_WindowEndCondition4274 = new BitSet(new long[] { 0x0000000000200000L,
            0x4000000000000000L, 0x0000000000000408L, 0x0000000080000000L });
    public static final BitSet FOLLOW_p_WindowVars_in_p_WindowEndCondition4278 = new BitSet(new long[] {
            0x0000000000000000L, 0x0000000000000000L, 0x0000000000000400L });
    public static final BitSet FOLLOW_WHEN_in_p_WindowEndCondition4282 = new BitSet(new long[] { 0xFFFFFFFFFFFF0000L,
            0xFFFFFFFFFFFFFFFFL, 0xFFFFFFFFFFFFFFFFL, 0x01E0F001AFFFFFFFL, 0x0000000001F81320L, 0x0000000000100000L });
    public static final BitSet FOLLOW_p_ExprSingle_in_p_WindowEndCondition4286 = new BitSet(
            new long[] { 0x0000000000000002L });
    public static final BitSet FOLLOW_DOLLAR_in_p_WindowVars4314 = new BitSet(new long[] { 0xFFFFFFFFFFFF0000L,
            0xFFFFFFFFFFFFFFFFL, 0xFFFFFFFFF7FFFFFFL, 0x000000000FFFFFFFL, 0x0000000000001000L, 0x0000000000100000L });
    public static final BitSet FOLLOW_p_CurrentItem_in_p_WindowVars4316 = new BitSet(new long[] { 0x0000000000200002L,
            0x4000000000000000L, 0x0000000000000008L });
    public static final BitSet FOLLOW_p_PositionalVar_in_p_WindowVars4320 = new BitSet(new long[] {
            0x0000000000000002L, 0x4000000000000000L, 0x0000000000000008L });
    public static final BitSet FOLLOW_PREVIOUS_in_p_WindowVars4326 = new BitSet(new long[] { 0x0000000000000000L,
            0x0000000000000000L, 0x0000000000000000L, 0x0000000080000000L });
    public static final BitSet FOLLOW_DOLLAR_in_p_WindowVars4330 = new BitSet(new long[] { 0xFFFFFFFFFFFF0000L,
            0xFFFFFFFFFFFFFFFFL, 0xFFFFFFFFF7FFFFFFL, 0x000000000FFFFFFFL, 0x0000000000001000L, 0x0000000000100000L });
    public static final BitSet FOLLOW_p_PreviousItem_in_p_WindowVars4332 = new BitSet(new long[] { 0x0000000000000002L,
            0x4000000000000000L });
    public static final BitSet FOLLOW_NEXT_in_p_WindowVars4339 = new BitSet(new long[] { 0x0000000000000000L,
            0x0000000000000000L, 0x0000000000000000L, 0x0000000080000000L });
    public static final BitSet FOLLOW_DOLLAR_in_p_WindowVars4343 = new BitSet(new long[] { 0xFFFFFFFFFFFF0000L,
            0xFFFFFFFFFFFFFFFFL, 0xFFFFFFFFF7FFFFFFL, 0x000000000FFFFFFFL, 0x0000000000001000L, 0x0000000000100000L });
    public static final BitSet FOLLOW_p_NextItem_in_p_WindowVars4345 = new BitSet(new long[] { 0x0000000000000002L });
    public static final BitSet FOLLOW_p_QName_in_p_CurrentItem4373 = new BitSet(new long[] { 0x0000000000000002L });
    public static final BitSet FOLLOW_p_QName_in_p_PreviousItem4399 = new BitSet(new long[] { 0x0000000000000002L });
    public static final BitSet FOLLOW_p_QName_in_p_NextItem4425 = new BitSet(new long[] { 0x0000000000000002L });
    public static final BitSet FOLLOW_COUNT_in_p_CountClause4453 = new BitSet(new long[] { 0x0000000000000000L,
            0x0000000000000000L, 0x0000000000000000L, 0x0000000080000000L });
    public static final BitSet FOLLOW_DOLLAR_in_p_CountClause4457 = new BitSet(new long[] { 0xFFFFFFFFFFFF0000L,
            0xFFFFFFFFFFFFFFFFL, 0xFFFFFFFFF7FFFFFFL, 0x000000000FFFFFFFL, 0x0000000000001000L, 0x0000000000100000L });
    public static final BitSet FOLLOW_p_VarName_in_p_CountClause4459 = new BitSet(new long[] { 0x0000000000000002L });
    public static final BitSet FOLLOW_WHERE_in_p_WhereClause4495 = new BitSet(new long[] { 0xFFFFFFFFFFFF0000L,
            0xFFFFFFFFFFFFFFFFL, 0xFFFFFFFFFFFFFFFFL, 0x01E0F001AFFFFFFFL, 0x0000000001F81320L, 0x0000000000100000L });
    public static final BitSet FOLLOW_p_ExprSingle_in_p_WhereClause4499 = new BitSet(new long[] { 0x0000000000000002L });
    public static final BitSet FOLLOW_GROUP_in_p_GroupByClause4528 = new BitSet(new long[] { 0x0000000002000000L });
    public static final BitSet FOLLOW_BY_in_p_GroupByClause4534 = new BitSet(new long[] { 0x0000000000000000L,
            0x0000000000000000L, 0x0000000000000000L, 0x0000000080000000L });
    public static final BitSet FOLLOW_p_GroupingSpecList_in_p_GroupByClause4538 = new BitSet(
            new long[] { 0x0000000000000002L });
    public static final BitSet FOLLOW_p_GroupingSpec_in_p_GroupingSpecList4564 = new BitSet(new long[] {
            0x0000000000000002L, 0x0000000000000000L, 0x0000000000000000L, 0x0000040000000000L });
    public static final BitSet FOLLOW_COMMA_in_p_GroupingSpecList4567 = new BitSet(new long[] { 0x0000000000000000L,
            0x0000000000000000L, 0x0000000000000000L, 0x0000000080000000L });
    public static final BitSet FOLLOW_p_GroupingSpec_in_p_GroupingSpecList4569 = new BitSet(new long[] {
            0x0000000000000002L, 0x0000000000000000L, 0x0000000000000000L, 0x0000040000000000L });
    public static final BitSet FOLLOW_DOLLAR_in_p_GroupingSpec4597 = new BitSet(new long[] { 0xFFFFFFFFFFFF0000L,
            0xFFFFFFFFFFFFFFFFL, 0xFFFFFFFFF7FFFFFFL, 0x000000000FFFFFFFL, 0x0000000000001000L, 0x0000000000100000L });
    public static final BitSet FOLLOW_p_VarName_in_p_GroupingSpec4599 = new BitSet(new long[] { 0x0000000040000002L });
    public static final BitSet FOLLOW_COLLATION_in_p_GroupingSpec4604 = new BitSet(new long[] { 0x0000000000000000L,
            0x0000000000000000L, 0x0000000000000000L, 0x0000000000000000L, 0x0000000001C00300L });
    public static final BitSet FOLLOW_p_StringLiteral_in_p_GroupingSpec4608 = new BitSet(
            new long[] { 0x0000000000000002L });
    public static final BitSet FOLLOW_ORDER_in_p_OrderByClause4640 = new BitSet(new long[] { 0x0000000002000000L });
    public static final BitSet FOLLOW_BY_in_p_OrderByClause4644 = new BitSet(new long[] { 0xFFFFFFFFFFFF0000L,
            0xFFFFFFFFFFFFFFFFL, 0xFFFFFFFFFFFFFFFFL, 0x01E0F001AFFFFFFFL, 0x0000000001F81320L, 0x0000000000100000L });
    public static final BitSet FOLLOW_STABLE_in_p_OrderByClause4652 = new BitSet(new long[] { 0x0000000000000000L,
            0x0000000000040000L });
    public static final BitSet FOLLOW_ORDER_in_p_OrderByClause4656 = new BitSet(new long[] { 0x0000000002000000L });
    public static final BitSet FOLLOW_BY_in_p_OrderByClause4660 = new BitSet(new long[] { 0xFFFFFFFFFFFF0000L,
            0xFFFFFFFFFFFFFFFFL, 0xFFFFFFFFFFFFFFFFL, 0x01E0F001AFFFFFFFL, 0x0000000001F81320L, 0x0000000000100000L });
    public static final BitSet FOLLOW_p_OrderSpecList_in_p_OrderByClause4666 = new BitSet(
            new long[] { 0x0000000000000002L });
    public static final BitSet FOLLOW_p_OrderSpec_in_p_OrderSpecList4692 = new BitSet(new long[] { 0x0000000000000002L,
            0x0000000000000000L, 0x0000000000000000L, 0x0000040000000000L });
    public static final BitSet FOLLOW_COMMA_in_p_OrderSpecList4695 = new BitSet(new long[] { 0xFFFFFFFFFFFF0000L,
            0xFFFFFFFFFFFFFFFFL, 0xFFFFFFFFFFFFFFFFL, 0x01E0F001AFFFFFFFL, 0x0000000001F81320L, 0x0000000000100000L });
    public static final BitSet FOLLOW_p_OrderSpec_in_p_OrderSpecList4697 = new BitSet(new long[] { 0x0000000000000002L,
            0x0000000000000000L, 0x0000000000000000L, 0x0000040000000000L });
    public static final BitSet FOLLOW_p_ExprSingle_in_p_OrderSpec4725 = new BitSet(new long[] { 0x0000104040100000L });
    public static final BitSet FOLLOW_p_OrderModifier_in_p_OrderSpec4728 = new BitSet(
            new long[] { 0x0000000000000002L });
    public static final BitSet FOLLOW_ASCENDING_in_p_OrderModifier4757 = new BitSet(new long[] { 0x0000100040000002L });
    public static final BitSet FOLLOW_DESCENDING_in_p_OrderModifier4763 = new BitSet(new long[] { 0x0000100040000002L });
    public static final BitSet FOLLOW_EMPTY_in_p_OrderModifier4770 = new BitSet(new long[] { 0x0100000000000000L,
            0x0000000000000020L });
    public static final BitSet FOLLOW_GREATEST_in_p_OrderModifier4775 = new BitSet(new long[] { 0x0000000040000002L });
    public static final BitSet FOLLOW_LEAST_in_p_OrderModifier4781 = new BitSet(new long[] { 0x0000000040000002L });
    public static final BitSet FOLLOW_COLLATION_in_p_OrderModifier4789 = new BitSet(new long[] { 0x0000000000000000L,
            0x0000000000000000L, 0x0000000000000000L, 0x0000000000000000L, 0x0000000001C00300L });
    public static final BitSet FOLLOW_p_StringLiteral_in_p_OrderModifier4791 = new BitSet(
            new long[] { 0x0000000000000002L });
    public static final BitSet FOLLOW_RETURN_in_p_ReturnHybrid4824 = new BitSet(new long[] { 0xFFFFFFFFFFFF0000L,
            0xFFFFFFFFFFFFFFFFL, 0xFFFFFFFFFFFFFFFFL, 0x01E0F081AFFFFFFFL, 0x0000000001F81320L, 0x0000000000100000L });
    public static final BitSet FOLLOW_p_Hybrid_in_p_ReturnHybrid4828 = new BitSet(new long[] { 0x0000000000000002L });
    public static final BitSet FOLLOW_SOME_in_p_QuantifiedExpr4858 = new BitSet(new long[] { 0x0000000000000000L,
            0x0000000000000000L, 0x0000000000000000L, 0x0000000080000000L });
    public static final BitSet FOLLOW_EVERY_in_p_QuantifiedExpr4864 = new BitSet(new long[] { 0x0000000000000000L,
            0x0000000000000000L, 0x0000000000000000L, 0x0000000080000000L });
    public static final BitSet FOLLOW_DOLLAR_in_p_QuantifiedExpr4869 = new BitSet(new long[] { 0xFFFFFFFFFFFF0000L,
            0xFFFFFFFFFFFFFFFFL, 0xFFFFFFFFF7FFFFFFL, 0x000000000FFFFFFFL, 0x0000000000001000L, 0x0000000000100000L });
    public static final BitSet FOLLOW_p_VarName_in_p_QuantifiedExpr4871 = new BitSet(new long[] { 0x2000000000080000L });
    public static final BitSet FOLLOW_p_TypeDeclaration_in_p_QuantifiedExpr4873 = new BitSet(
            new long[] { 0x2000000000000000L });
    public static final BitSet FOLLOW_IN_in_p_QuantifiedExpr4878 = new BitSet(new long[] { 0xFFFFFFFFFFFF0000L,
            0xFFFFFFFFFFFFFFFFL, 0xFFFFFFFFFFFFFFFFL, 0x01E0F001AFFFFFFFL, 0x0000000001F81320L, 0x0000000000100000L });
    public static final BitSet FOLLOW_p_ExprSingle_in_p_QuantifiedExpr4882 = new BitSet(new long[] {
            0x0000000000000000L, 0x0000000008000000L, 0x0000000000000000L, 0x0000040000000000L });
    public static final BitSet FOLLOW_COMMA_in_p_QuantifiedExpr4886 = new BitSet(new long[] { 0x0000000000000000L,
            0x0000000000000000L, 0x0000000000000000L, 0x0000000080000000L });
    public static final BitSet FOLLOW_DOLLAR_in_p_QuantifiedExpr4888 = new BitSet(new long[] { 0xFFFFFFFFFFFF0000L,
            0xFFFFFFFFFFFFFFFFL, 0xFFFFFFFFF7FFFFFFL, 0x000000000FFFFFFFL, 0x0000000000001000L, 0x0000000000100000L });
    public static final BitSet FOLLOW_p_QName_in_p_QuantifiedExpr4890 = new BitSet(new long[] { 0x2000000000080000L });
    public static final BitSet FOLLOW_p_TypeDeclaration_in_p_QuantifiedExpr4892 = new BitSet(
            new long[] { 0x2000000000000000L });
    public static final BitSet FOLLOW_IN_in_p_QuantifiedExpr4897 = new BitSet(new long[] { 0xFFFFFFFFFFFF0000L,
            0xFFFFFFFFFFFFFFFFL, 0xFFFFFFFFFFFFFFFFL, 0x01E0F001AFFFFFFFL, 0x0000000001F81320L, 0x0000000000100000L });
    public static final BitSet FOLLOW_p_ExprSingle_in_p_QuantifiedExpr4901 = new BitSet(new long[] {
            0x0000000000000000L, 0x0000000008000000L, 0x0000000000000000L, 0x0000040000000000L });
    public static final BitSet FOLLOW_SATISFIES_in_p_QuantifiedExpr4908 = new BitSet(new long[] { 0xFFFFFFFFFFFF0000L,
            0xFFFFFFFFFFFFFFFFL, 0xFFFFFFFFFFFFFFFFL, 0x01E0F001AFFFFFFFL, 0x0000000001F81320L, 0x0000000000100000L });
    public static final BitSet FOLLOW_p_ExprSingle_in_p_QuantifiedExpr4912 = new BitSet(
            new long[] { 0x0000000000000002L });
    public static final BitSet FOLLOW_SWITCH_in_p_SwitchHybrid4942 = new BitSet(new long[] { 0x0000000000000000L,
            0x0000000000000000L, 0x0000000000000000L, 0x0000000020000000L });
    public static final BitSet FOLLOW_LPAREN_in_p_SwitchHybrid4946 = new BitSet(new long[] { 0xFFFFFFFFFFFF0000L,
            0xFFFFFFFFFFFFFFFFL, 0xFFFFFFFFFFFFFFFFL, 0x01E0F001AFFFFFFFL, 0x0000000001F81320L, 0x0000000000100000L });
    public static final BitSet FOLLOW_p_Expr_in_p_SwitchHybrid4948 = new BitSet(new long[] { 0x0000000000000000L,
            0x0000000000000000L, 0x0000000000000000L, 0x0000000040000000L });
    public static final BitSet FOLLOW_RPAREN_in_p_SwitchHybrid4951 = new BitSet(new long[] { 0x0000000004000000L });
    public static final BitSet FOLLOW_p_SwitchCaseHybrid_in_p_SwitchHybrid4953 = new BitSet(
            new long[] { 0x0000000804000000L });
    public static final BitSet FOLLOW_DEFAULT_in_p_SwitchHybrid4959 = new BitSet(new long[] { 0x0000000000000000L,
            0x0000000004000000L });
    public static final BitSet FOLLOW_RETURN_in_p_SwitchHybrid4965 = new BitSet(new long[] { 0xFFFFFFFFFFFF0000L,
            0xFFFFFFFFFFFFFFFFL, 0xFFFFFFFFFFFFFFFFL, 0x01E0F081AFFFFFFFL, 0x0000000001F81320L, 0x0000000000100000L });
    public static final BitSet FOLLOW_p_Hybrid_in_p_SwitchHybrid4969 = new BitSet(new long[] { 0x0000000000000002L });
    public static final BitSet FOLLOW_CASE_in_p_SwitchCaseHybrid5000 = new BitSet(new long[] { 0xFFFFFFFFFFFF0000L,
            0xFFFFFFFFFFFFFFFFL, 0xFFFFFFFFFFFFFFFFL, 0x01E0F001AFFFFFFFL, 0x0000000001F81320L, 0x0000000000100000L });
    public static final BitSet FOLLOW_p_SwitchCaseOperand_in_p_SwitchCaseHybrid5004 = new BitSet(new long[] {
            0x0000000004000000L, 0x0000000004000000L });
    public static final BitSet FOLLOW_RETURN_in_p_SwitchCaseHybrid5010 = new BitSet(new long[] { 0xFFFFFFFFFFFF0000L,
            0xFFFFFFFFFFFFFFFFL, 0xFFFFFFFFFFFFFFFFL, 0x01E0F081AFFFFFFFL, 0x0000000001F81320L, 0x0000000000100000L });
    public static final BitSet FOLLOW_p_Hybrid_in_p_SwitchCaseHybrid5014 = new BitSet(
            new long[] { 0x0000000000000002L });
    public static final BitSet FOLLOW_p_ExprSingle_in_p_SwitchCaseOperand5041 = new BitSet(
            new long[] { 0x0000000000000002L });
    public static final BitSet FOLLOW_TYPESWITCH_in_p_TypeswitchHybrid5071 = new BitSet(new long[] {
            0x0000000000000000L, 0x0000000000000000L, 0x0000000000000000L, 0x0000000020000000L });
    public static final BitSet FOLLOW_LPAREN_in_p_TypeswitchHybrid5075 = new BitSet(new long[] { 0xFFFFFFFFFFFF0000L,
            0xFFFFFFFFFFFFFFFFL, 0xFFFFFFFFFFFFFFFFL, 0x01E0F001AFFFFFFFL, 0x0000000001F81320L, 0x0000000000100000L });
    public static final BitSet FOLLOW_p_Expr_in_p_TypeswitchHybrid5077 = new BitSet(new long[] { 0x0000000000000000L,
            0x0000000000000000L, 0x0000000000000000L, 0x0000000040000000L });
    public static final BitSet FOLLOW_RPAREN_in_p_TypeswitchHybrid5080 = new BitSet(new long[] { 0x0000000004000000L });
    public static final BitSet FOLLOW_p_CaseHybrid_in_p_TypeswitchHybrid5082 = new BitSet(
            new long[] { 0x0000000804000000L });
    public static final BitSet FOLLOW_DEFAULT_in_p_TypeswitchHybrid5088 = new BitSet(new long[] { 0x0000000000000000L,
            0x0000000004000000L, 0x0000000000000000L, 0x0000000080000000L });
    public static final BitSet FOLLOW_DOLLAR_in_p_TypeswitchHybrid5093 = new BitSet(new long[] { 0xFFFFFFFFFFFF0000L,
            0xFFFFFFFFFFFFFFFFL, 0xFFFFFFFFF7FFFFFFL, 0x000000000FFFFFFFL, 0x0000000000001000L, 0x0000000000100000L });
    public static final BitSet FOLLOW_p_VarName_in_p_TypeswitchHybrid5095 = new BitSet(new long[] {
            0x0000000000000000L, 0x0000000004000000L });
    public static final BitSet FOLLOW_RETURN_in_p_TypeswitchHybrid5101 = new BitSet(new long[] { 0xFFFFFFFFFFFF0000L,
            0xFFFFFFFFFFFFFFFFL, 0xFFFFFFFFFFFFFFFFL, 0x01E0F081AFFFFFFFL, 0x0000000001F81320L, 0x0000000000100000L });
    public static final BitSet FOLLOW_p_Hybrid_in_p_TypeswitchHybrid5105 = new BitSet(
            new long[] { 0x0000000000000002L });
    public static final BitSet FOLLOW_CASE_in_p_CaseHybrid5135 = new BitSet(new long[] { 0xFFFFFFFFFFFF0000L,
            0xFFFFFFFFFFFFFFFFL, 0xFFFFFFFFF7FFFFFFL, 0x00000000AFFFFFFFL, 0x0000000000001000L, 0x0000000000100000L });
    public static final BitSet FOLLOW_DOLLAR_in_p_CaseHybrid5140 = new BitSet(new long[] { 0xFFFFFFFFFFFF0000L,
            0xFFFFFFFFFFFFFFFFL, 0xFFFFFFFFF7FFFFFFL, 0x000000000FFFFFFFL, 0x0000000000001000L, 0x0000000000100000L });
    public static final BitSet FOLLOW_p_VarName_in_p_CaseHybrid5142 = new BitSet(new long[] { 0x0000000000080000L });
    public static final BitSet FOLLOW_AS_in_p_CaseHybrid5146 = new BitSet(new long[] { 0xFFFFFFFFFFFF0000L,
            0xFFFFFFFFFFFFFFFFL, 0xFFFFFFFFF7FFFFFFL, 0x00000000AFFFFFFFL, 0x0000000000001000L, 0x0000000000100000L });
    public static final BitSet FOLLOW_p_SequenceTypeUnion_in_p_CaseHybrid5152 = new BitSet(new long[] {
            0x0000000000000000L, 0x0000000004000000L });
    public static final BitSet FOLLOW_RETURN_in_p_CaseHybrid5156 = new BitSet(new long[] { 0xFFFFFFFFFFFF0000L,
            0xFFFFFFFFFFFFFFFFL, 0xFFFFFFFFFFFFFFFFL, 0x01E0F001AFFFFFFFL, 0x0000000001F81320L, 0x0000000000100000L });
    public static final BitSet FOLLOW_p_ExprSingle_in_p_CaseHybrid5160 = new BitSet(new long[] { 0x0000000000000002L });
    public static final BitSet FOLLOW_p_SequenceType_in_p_SequenceTypeUnion5187 = new BitSet(new long[] {
            0x0000000000000002L, 0x0000000000000000L, 0x0000000000000000L, 0x4000000000000000L });
    public static final BitSet FOLLOW_VBAR_in_p_SequenceTypeUnion5190 = new BitSet(new long[] { 0xFFFFFFFFFFFF0000L,
            0xFFFFFFFFFFFFFFFFL, 0xFFFFFFFFF7FFFFFFL, 0x000000002FFFFFFFL, 0x0000000000001000L, 0x0000000000100000L });
    public static final BitSet FOLLOW_p_SequenceType_in_p_SequenceTypeUnion5192 = new BitSet(new long[] {
            0x0000000000000002L, 0x0000000000000000L, 0x0000000000000000L, 0x4000000000000000L });
    public static final BitSet FOLLOW_IF_in_p_IfHybrid5223 = new BitSet(new long[] { 0x0000000000000000L,
            0x0000000000000000L, 0x0000000000000000L, 0x0000000020000000L });
    public static final BitSet FOLLOW_LPAREN_in_p_IfHybrid5227 = new BitSet(new long[] { 0xFFFFFFFFFFFF0000L,
            0xFFFFFFFFFFFFFFFFL, 0xFFFFFFFFFFFFFFFFL, 0x01E0F001AFFFFFFFL, 0x0000000001F81320L, 0x0000000000100000L });
    public static final BitSet FOLLOW_p_Expr_in_p_IfHybrid5229 = new BitSet(new long[] { 0x0000000000000000L,
            0x0000000000000000L, 0x0000000000000000L, 0x0000000040000000L });
    public static final BitSet FOLLOW_RPAREN_in_p_IfHybrid5232 = new BitSet(new long[] { 0x0000000000000000L,
            0x0000002000000000L });
    public static final BitSet FOLLOW_THEN_in_p_IfHybrid5236 = new BitSet(new long[] { 0xFFFFFFFFFFFF0000L,
            0xFFFFFFFFFFFFFFFFL, 0xFFFFFFFFFFFFFFFFL, 0x01E0F081AFFFFFFFL, 0x0000000001F81320L, 0x0000000000100000L });
    public static final BitSet FOLLOW_p_Hybrid_in_p_IfHybrid5240 = new BitSet(new long[] { 0x0000080000000000L });
    public static final BitSet FOLLOW_ELSE_in_p_IfHybrid5245 = new BitSet(new long[] { 0xFFFFFFFFFFFF0000L,
            0xFFFFFFFFFFFFFFFFL, 0xFFFFFFFFFFFFFFFFL, 0x01E0F081AFFFFFFFL, 0x0000000001F81320L, 0x0000000000100000L });
    public static final BitSet FOLLOW_p_Hybrid_in_p_IfHybrid5249 = new BitSet(new long[] { 0x0000000000000002L });
    public static final BitSet FOLLOW_p_TryClause_in_p_TryCatchExpr5276 = new BitSet(new long[] { 0x0000000000000000L,
            0x0002000000000000L });
    public static final BitSet FOLLOW_p_CatchClause_in_p_TryCatchExpr5278 = new BitSet(new long[] {
            0x0000000000000002L, 0x0002000000000000L });
    public static final BitSet FOLLOW_TRY_in_p_TryClause5307 = new BitSet(new long[] { 0x0000000000000000L,
            0x0000000000000000L, 0x0000000000000000L, 0x0000000100000000L });
    public static final BitSet FOLLOW_LBRACKET_in_p_TryClause5311 = new BitSet(new long[] { 0xFFFFFFFFFFFF0000L,
            0xFFFFFFFFFFFFFFFFL, 0xFFFFFFFFFFFFFFFFL, 0x01E0F001AFFFFFFFL, 0x0000000001F81320L, 0x0000000000100000L });
    public static final BitSet FOLLOW_p_TryTargetExpr_in_p_TryClause5313 = new BitSet(new long[] { 0x0000000000000000L,
            0x0000000000000000L, 0x0000000000000000L, 0x0000000200000000L });
    public static final BitSet FOLLOW_RBRACKET_in_p_TryClause5315 = new BitSet(new long[] { 0x0000000000000002L });
    public static final BitSet FOLLOW_p_Expr_in_p_TryTargetExpr5341 = new BitSet(new long[] { 0x0000000000000002L });
    public static final BitSet FOLLOW_CATCH_in_p_CatchClause5370 = new BitSet(new long[] { 0xFFFFFFFFFFFF0000L,
            0xFFFFFFFFFFFFFFFFL, 0xFFFFFFFFF7FFFFFFL, 0x010010010FFFFFFFL, 0x0000000001C01320L, 0x0000000000100000L });
    public static final BitSet FOLLOW_p_CatchErrorList_in_p_CatchClause5374 = new BitSet(new long[] {
            0x0000000000000000L, 0x0000000000000000L, 0x0000000000000000L, 0x0000000100000000L });
    public static final BitSet FOLLOW_LBRACKET_in_p_CatchClause5376 = new BitSet(new long[] { 0xFFFFFFFFFFFF0000L,
            0xFFFFFFFFFFFFFFFFL, 0xFFFFFFFFFFFFFFFFL, 0x01E0F001AFFFFFFFL, 0x0000000001F81320L, 0x0000000000100000L });
    public static final BitSet FOLLOW_p_Expr_in_p_CatchClause5378 = new BitSet(new long[] { 0x0000000000000000L,
            0x0000000000000000L, 0x0000000000000000L, 0x0000000200000000L });
    public static final BitSet FOLLOW_RBRACKET_in_p_CatchClause5381 = new BitSet(new long[] { 0x0000000000000002L });
    public static final BitSet FOLLOW_p_NameTest_in_p_CatchErrorList5407 = new BitSet(new long[] { 0x0000000000000002L,
            0x0000000000000000L, 0x0000000000000000L, 0x4000000000000000L });
    public static final BitSet FOLLOW_VBAR_in_p_CatchErrorList5410 = new BitSet(new long[] { 0xFFFFFFFFFFFF0000L,
            0xFFFFFFFFFFFFFFFFL, 0xFFFFFFFFF7FFFFFFL, 0x010010000FFFFFFFL, 0x0000000001C01320L, 0x0000000000100000L });
    public static final BitSet FOLLOW_p_NameTest_in_p_CatchErrorList5412 = new BitSet(new long[] { 0x0000000000000002L,
            0x0000000000000000L, 0x0000000000000000L, 0x4000000000000000L });
    public static final BitSet FOLLOW_p_AndExpr_in_p_OrExpr5457 = new BitSet(new long[] { 0x0000000000000002L,
            0x0000000000020000L });
    public static final BitSet FOLLOW_OR_in_p_OrExpr5463 = new BitSet(new long[] { 0xFFFFFFFFFFFF0000L,
            0xFFFFFFFFFFFFFFFFL, 0xFFFFFFFFFFFFFFFFL, 0x01E0F001AFFFFFFFL, 0x0000000001F81320L, 0x0000000000100000L });
    public static final BitSet FOLLOW_p_AndExpr_in_p_OrExpr5467 = new BitSet(new long[] { 0x0000000000000002L,
            0x0000000000020000L });
    public static final BitSet FOLLOW_p_ComparisonExpr_in_p_AndExpr5496 = new BitSet(new long[] { 0x0000000000040002L });
    public static final BitSet FOLLOW_AND_in_p_AndExpr5502 = new BitSet(new long[] { 0xFFFFFFFFFFFF0000L,
            0xFFFFFFFFFFFFFFFFL, 0xFFFFFFFFFFFFFFFFL, 0x01E0F001AFFFFFFFL, 0x0000000001F81320L, 0x0000000000100000L });
    public static final BitSet FOLLOW_p_ComparisonExpr_in_p_AndExpr5506 = new BitSet(new long[] { 0x0000000000040002L });
    public static final BitSet FOLLOW_p_FTContainsExpr_in_p_ComparisonExpr5536 = new BitSet(new long[] {
            0x0280800000000002L, 0x0000000000000892L, 0x0000000000000000L, 0x001F805000000000L });
    public static final BitSet FOLLOW_p_ValueComp_in_p_ComparisonExpr5541 = new BitSet(new long[] {
            0xFFFFFFFFFFFF0000L, 0xFFFFFFFFFFFFFFFFL, 0xFFFFFFFFFFFFFFFFL, 0x01E0F001AFFFFFFFL, 0x0000000001F81320L,
            0x0000000000100000L });
    public static final BitSet FOLLOW_p_GeneralComp_in_p_ComparisonExpr5545 = new BitSet(new long[] {
            0xFFFFFFFFFFFF0000L, 0xFFFFFFFFFFFFFFFFL, 0xFFFFFFFFFFFFFFFFL, 0x01E0F001AFFFFFFFL, 0x0000000001F81320L,
            0x0000000000100000L });
    public static final BitSet FOLLOW_p_NodeComp_in_p_ComparisonExpr5549 = new BitSet(new long[] { 0xFFFFFFFFFFFF0000L,
            0xFFFFFFFFFFFFFFFFL, 0xFFFFFFFFFFFFFFFFL, 0x01E0F001AFFFFFFFL, 0x0000000001F81320L, 0x0000000000100000L });
    public static final BitSet FOLLOW_p_FTContainsExpr_in_p_ComparisonExpr5552 = new BitSet(
            new long[] { 0x0000000000000002L });
    public static final BitSet FOLLOW_p_RangeExpr_in_p_StringConcatExpr5580 = new BitSet(new long[] {
            0x0000000000000002L, 0x0000000000000000L, 0x0000000000000000L, 0x0000000010000000L });
    public static final BitSet FOLLOW_CONCAT_in_p_StringConcatExpr5584 = new BitSet(new long[] { 0xFFFFFFFFFFFF0000L,
            0xFFFFFFFFFFFFFFFFL, 0xFFFFFFFFFFFFFFFFL, 0x01E0F001AFFFFFFFL, 0x0000000001F81320L, 0x0000000000100000L });
    public static final BitSet FOLLOW_p_RangeExpr_in_p_StringConcatExpr5586 = new BitSet(new long[] {
            0x0000000000000002L, 0x0000000000000000L, 0x0000000000000000L, 0x0000000010000000L });
    public static final BitSet FOLLOW_p_AdditiveExpr_in_p_RangeExpr5615 = new BitSet(new long[] { 0x0000000000000002L,
            0x0000004000000000L });
    public static final BitSet FOLLOW_TO_in_p_RangeExpr5621 = new BitSet(new long[] { 0xFFFFFFFFFFFF0000L,
            0xFFFFFFFFFFFFFFFFL, 0xFFFFFFFFFFFFFFFFL, 0x01E0F001AFFFFFFFL, 0x0000000001F81320L, 0x0000000000100000L });
    public static final BitSet FOLLOW_p_AdditiveExpr_in_p_RangeExpr5625 = new BitSet(new long[] { 0x0000000000000002L });
    public static final BitSet FOLLOW_p_MultiplicativeExpr_in_p_AdditiveExpr5654 = new BitSet(new long[] {
            0x0000000000000002L, 0x0000000000000000L, 0x0000000000000000L, 0x0000600000000000L });
    public static final BitSet FOLLOW_set_in_p_AdditiveExpr5658 = new BitSet(new long[] { 0xFFFFFFFFFFFF0000L,
            0xFFFFFFFFFFFFFFFFL, 0xFFFFFFFFFFFFFFFFL, 0x01E0F001AFFFFFFFL, 0x0000000001F81320L, 0x0000000000100000L });
    public static final BitSet FOLLOW_p_MultiplicativeExpr_in_p_AdditiveExpr5666 = new BitSet(new long[] {
            0x0000000000000002L, 0x0000000000000000L, 0x0000000000000000L, 0x0000600000000000L });
    public static final BitSet FOLLOW_p_UnionExpr_in_p_MultiplicativeExpr5695 = new BitSet(new long[] {
            0x0400008000000002L, 0x0000000000000100L, 0x0000000000000000L, 0x0000100000000000L });
    public static final BitSet FOLLOW_STAR_in_p_MultiplicativeExpr5700 = new BitSet(new long[] { 0xFFFFFFFFFFFF0000L,
            0xFFFFFFFFFFFFFFFFL, 0xFFFFFFFFFFFFFFFFL, 0x01E0F001AFFFFFFFL, 0x0000000001F81320L, 0x0000000000100000L });
    public static final BitSet FOLLOW_DIV_in_p_MultiplicativeExpr5707 = new BitSet(new long[] { 0xFFFFFFFFFFFF0000L,
            0xFFFFFFFFFFFFFFFFL, 0xFFFFFFFFFFFFFFFFL, 0x01E0F001AFFFFFFFL, 0x0000000001F81320L, 0x0000000000100000L });
    public static final BitSet FOLLOW_IDIV_in_p_MultiplicativeExpr5713 = new BitSet(new long[] { 0xFFFFFFFFFFFF0000L,
            0xFFFFFFFFFFFFFFFFL, 0xFFFFFFFFFFFFFFFFL, 0x01E0F001AFFFFFFFL, 0x0000000001F81320L, 0x0000000000100000L });
    public static final BitSet FOLLOW_MOD_in_p_MultiplicativeExpr5719 = new BitSet(new long[] { 0xFFFFFFFFFFFF0000L,
            0xFFFFFFFFFFFFFFFFL, 0xFFFFFFFFFFFFFFFFL, 0x01E0F001AFFFFFFFL, 0x0000000001F81320L, 0x0000000000100000L });
    public static final BitSet FOLLOW_p_UnionExpr_in_p_MultiplicativeExpr5725 = new BitSet(new long[] {
            0x0400008000000002L, 0x0000000000000100L, 0x0000000000000000L, 0x0000100000000000L });
    public static final BitSet FOLLOW_p_IntersectExceptExpr_in_p_UnionExpr5754 = new BitSet(new long[] {
            0x0000000000000002L, 0x0000020000000000L, 0x0000000000000000L, 0x4000000000000000L });
    public static final BitSet FOLLOW_UNION_in_p_UnionExpr5761 = new BitSet(new long[] { 0xFFFFFFFFFFFF0000L,
            0xFFFFFFFFFFFFFFFFL, 0xFFFFFFFFFFFFFFFFL, 0x01E0F001AFFFFFFFL, 0x0000000001F81320L, 0x0000000000100000L });
    public static final BitSet FOLLOW_VBAR_in_p_UnionExpr5767 = new BitSet(new long[] { 0xFFFFFFFFFFFF0000L,
            0xFFFFFFFFFFFFFFFFL, 0xFFFFFFFFFFFFFFFFL, 0x01E0F001AFFFFFFFL, 0x0000000001F81320L, 0x0000000000100000L });
    public static final BitSet FOLLOW_p_IntersectExceptExpr_in_p_UnionExpr5770 = new BitSet(new long[] {
            0x0000000000000002L, 0x0000020000000000L, 0x0000000000000000L, 0x4000000000000000L });
    public static final BitSet FOLLOW_p_InstanceofExpr_in_p_IntersectExceptExpr5799 = new BitSet(new long[] {
            0x0002000000000002L, 0x0000000000000001L });
    public static final BitSet FOLLOW_INTERSECT_in_p_IntersectExceptExpr5806 = new BitSet(new long[] {
            0xFFFFFFFFFFFF0000L, 0xFFFFFFFFFFFFFFFFL, 0xFFFFFFFFFFFFFFFFL, 0x01E0F001AFFFFFFFL, 0x0000000001F81320L,
            0x0000000000100000L });
    public static final BitSet FOLLOW_EXCEPT_in_p_IntersectExceptExpr5812 = new BitSet(new long[] {
            0xFFFFFFFFFFFF0000L, 0xFFFFFFFFFFFFFFFFL, 0xFFFFFFFFFFFFFFFFL, 0x01E0F001AFFFFFFFL, 0x0000000001F81320L,
            0x0000000000100000L });
    public static final BitSet FOLLOW_p_InstanceofExpr_in_p_IntersectExceptExpr5817 = new BitSet(new long[] {
            0x0002000000000002L, 0x0000000000000001L });
    public static final BitSet FOLLOW_p_TreatExpr_in_p_InstanceofExpr5846 = new BitSet(
            new long[] { 0x8000000000000002L });
    public static final BitSet FOLLOW_INSTANCE_in_p_InstanceofExpr5852 = new BitSet(new long[] { 0x0000000000000000L,
            0x0000000000008000L });
    public static final BitSet FOLLOW_OF_in_p_InstanceofExpr5858 = new BitSet(new long[] { 0xFFFFFFFFFFFF0000L,
            0xFFFFFFFFFFFFFFFFL, 0xFFFFFFFFF7FFFFFFL, 0x000000002FFFFFFFL, 0x0000000000001000L, 0x0000000000100000L });
    public static final BitSet FOLLOW_p_SequenceType_in_p_InstanceofExpr5862 = new BitSet(
            new long[] { 0x0000000000000002L });
    public static final BitSet FOLLOW_p_CastableExpr_in_p_TreatExpr5890 = new BitSet(new long[] { 0x0000000000000002L,
            0x0000008000000000L });
    public static final BitSet FOLLOW_TREAT_in_p_TreatExpr5896 = new BitSet(new long[] { 0x0000000000080000L });
    public static final BitSet FOLLOW_AS_in_p_TreatExpr5902 = new BitSet(new long[] { 0xFFFFFFFFFFFF0000L,
            0xFFFFFFFFFFFFFFFFL, 0xFFFFFFFFF7FFFFFFL, 0x000000002FFFFFFFL, 0x0000000000001000L, 0x0000000000100000L });
    public static final BitSet FOLLOW_p_SequenceType_in_p_TreatExpr5906 = new BitSet(new long[] { 0x0000000000000002L });
    public static final BitSet FOLLOW_p_CastExpr_in_p_CastableExpr5943 = new BitSet(new long[] { 0x0000000010000002L });
    public static final BitSet FOLLOW_CASTABLE_in_p_CastableExpr5949 = new BitSet(new long[] { 0x0000000000080000L });
    public static final BitSet FOLLOW_AS_in_p_CastableExpr5955 = new BitSet(new long[] { 0xFFFFFFFFFFFF0000L,
            0xFFFFFFFFFFFFFFFFL, 0xFFFFFFFFF7FFFFFFL, 0x000000000FFFFFFFL, 0x0000000000001000L, 0x0000000000100000L });
    public static final BitSet FOLLOW_p_SingleType_in_p_CastableExpr5959 = new BitSet(
            new long[] { 0x0000000000000002L });
    public static final BitSet FOLLOW_p_UnaryExpr_in_p_CastExpr5996 = new BitSet(new long[] { 0x0000000008000002L });
    public static final BitSet FOLLOW_CAST_in_p_CastExpr6002 = new BitSet(new long[] { 0x0000000000080000L });
    public static final BitSet FOLLOW_AS_in_p_CastExpr6008 = new BitSet(new long[] { 0xFFFFFFFFFFFF0000L,
            0xFFFFFFFFFFFFFFFFL, 0xFFFFFFFFF7FFFFFFL, 0x000000000FFFFFFFL, 0x0000000000001000L, 0x0000000000100000L });
    public static final BitSet FOLLOW_p_SingleType_in_p_CastExpr6012 = new BitSet(new long[] { 0x0000000000000002L });
    public static final BitSet FOLLOW_PLUS_in_p_UnaryExpr6042 = new BitSet(new long[] { 0xFFFFFFFFFFFF0000L,
            0xFFFFFFFFFFFFFFFFL, 0xFFFFFFFFFFFFFFFFL, 0x01E0F001AFFFFFFFL, 0x0000000001F81320L, 0x0000000000100000L });
    public static final BitSet FOLLOW_MINUS_in_p_UnaryExpr6046 = new BitSet(new long[] { 0xFFFFFFFFFFFF0000L,
            0xFFFFFFFFFFFFFFFFL, 0xFFFFFFFFFFFFFFFFL, 0x01E0F001AFFFFFFFL, 0x0000000001F81320L, 0x0000000000100000L });
    public static final BitSet FOLLOW_p_ValueExpr_in_p_UnaryExpr6050 = new BitSet(new long[] { 0x0000000000000002L });
    public static final BitSet FOLLOW_p_ValidateExpr_in_p_ValueExpr6120 = new BitSet(new long[] { 0x0000000000000002L });
    public static final BitSet FOLLOW_p_PathExpr_in_p_ValueExpr6132 = new BitSet(new long[] { 0x0000000000000002L });
    public static final BitSet FOLLOW_p_ExtensionExpr_in_p_ValueExpr6144 = new BitSet(
            new long[] { 0x0000000000000002L });
    public static final BitSet FOLLOW_set_in_p_GeneralComp0 = new BitSet(new long[] { 0x0000000000000002L });
    public static final BitSet FOLLOW_EQ_in_p_ValueComp6219 = new BitSet(new long[] { 0x0000000000000002L });
    public static final BitSet FOLLOW_NE_in_p_ValueComp6225 = new BitSet(new long[] { 0x0000000000000002L });
    public static final BitSet FOLLOW_LT_in_p_ValueComp6231 = new BitSet(new long[] { 0x0000000000000002L });
    public static final BitSet FOLLOW_LE_in_p_ValueComp6237 = new BitSet(new long[] { 0x0000000000000002L });
    public static final BitSet FOLLOW_GT_in_p_ValueComp6243 = new BitSet(new long[] { 0x0000000000000002L });
    public static final BitSet FOLLOW_GE_in_p_ValueComp6249 = new BitSet(new long[] { 0x0000000000000002L });
    public static final BitSet FOLLOW_IS_in_p_NodeComp6280 = new BitSet(new long[] { 0x0000000000000002L });
    public static final BitSet FOLLOW_SMALLER_SMALLER_in_p_NodeComp6286 = new BitSet(new long[] { 0x0000000000000002L });
    public static final BitSet FOLLOW_GREATER_GREATER_in_p_NodeComp6290 = new BitSet(new long[] { 0x0000000000000002L });
    public static final BitSet FOLLOW_VALIDATE_in_p_ValidateExpr6318 = new BitSet(new long[] { 0x0000000000000000L,
            0x0000000400000008L, 0x0000000000000200L, 0x0000000100000000L });
    public static final BitSet FOLLOW_p_ValidationMode_in_p_ValidateExpr6324 = new BitSet(new long[] {
            0x0000000000000000L, 0x0000000000000000L, 0x0000000000000000L, 0x0000000100000000L });
    public static final BitSet FOLLOW_TYPE_in_p_ValidateExpr6330 = new BitSet(new long[] { 0xFFFFFFFFFFFF0000L,
            0xFFFFFFFFFFFFFFFFL, 0xFFFFFFFFF7FFFFFFL, 0x000000000FFFFFFFL, 0x0000000000001000L, 0x0000000000100000L });
    public static final BitSet FOLLOW_p_TypeName_in_p_ValidateExpr6334 = new BitSet(new long[] { 0x0000000000000000L,
            0x0000000000000000L, 0x0000000000000000L, 0x0000000100000000L });
    public static final BitSet FOLLOW_LBRACKET_in_p_ValidateExpr6339 = new BitSet(new long[] { 0xFFFFFFFFFFFF0000L,
            0xFFFFFFFFFFFFFFFFL, 0xFFFFFFFFFFFFFFFFL, 0x01E0F001AFFFFFFFL, 0x0000000001F81320L, 0x0000000000100000L });
    public static final BitSet FOLLOW_p_Expr_in_p_ValidateExpr6341 = new BitSet(new long[] { 0x0000000000000000L,
            0x0000000000000000L, 0x0000000000000000L, 0x0000000200000000L });
    public static final BitSet FOLLOW_RBRACKET_in_p_ValidateExpr6344 = new BitSet(new long[] { 0x0000000000000002L });
    public static final BitSet FOLLOW_LAX_in_p_ValidationMode6373 = new BitSet(new long[] { 0x0000000000000002L });
    public static final BitSet FOLLOW_STRICT_in_p_ValidationMode6379 = new BitSet(new long[] { 0x0000000000000002L });
    public static final BitSet FOLLOW_L_Pragma_in_p_ExtensionExpr6408 = new BitSet(new long[] { 0x0000000000000000L,
            0x0000000000000000L, 0x0000000000000000L, 0x0000000100000000L, 0x0000000000080000L });
    public static final BitSet FOLLOW_LBRACKET_in_p_ExtensionExpr6411 = new BitSet(new long[] { 0xFFFFFFFFFFFF0000L,
            0xFFFFFFFFFFFFFFFFL, 0xFFFFFFFFFFFFFFFFL, 0x01E0F003AFFFFFFFL, 0x0000000001F81320L, 0x0000000000100000L });
    public static final BitSet FOLLOW_p_Expr_in_p_ExtensionExpr6413 = new BitSet(new long[] { 0x0000000000000000L,
            0x0000000000000000L, 0x0000000000000000L, 0x0000000200000000L });
    public static final BitSet FOLLOW_RBRACKET_in_p_ExtensionExpr6417 = new BitSet(new long[] { 0x0000000000000002L });
    public static final BitSet FOLLOW_SLASH_in_p_PathExpr6460 = new BitSet(new long[] { 0xFFFFFFFFFFFF0000L,
            0xFFFFFFFFFFFFFFFFL, 0xFFFFFFFFFFFFFFFFL, 0x01E09001AFFFFFFFL, 0x0000000001F01320L, 0x0000000000100000L });
    public static final BitSet FOLLOW_p_RelativePathExpr_in_p_PathExpr6462 = new BitSet(
            new long[] { 0x0000000000000002L });
    public static final BitSet FOLLOW_SLASH_in_p_PathExpr6475 = new BitSet(new long[] { 0x0000000000000002L });
    public static final BitSet FOLLOW_SLASH_SLASH_in_p_PathExpr6487 = new BitSet(new long[] { 0xFFFFFFFFFFFF0000L,
            0xFFFFFFFFFFFFFFFFL, 0xFFFFFFFFFFFFFFFFL, 0x01E09001AFFFFFFFL, 0x0000000001F01320L, 0x0000000000100000L });
    public static final BitSet FOLLOW_p_RelativePathExpr_in_p_PathExpr6489 = new BitSet(
            new long[] { 0x0000000000000002L });
    public static final BitSet FOLLOW_p_RelativePathExpr_in_p_PathExpr6501 = new BitSet(
            new long[] { 0x0000000000000002L });
    public static final BitSet FOLLOW_p_StepExpr_in_p_RelativePathExpr6529 = new BitSet(new long[] {
            0x0000000000000002L, 0x0000000000000000L, 0x0000000000000000L, 0x0060000000000000L });
    public static final BitSet FOLLOW_set_in_p_RelativePathExpr6532 = new BitSet(new long[] { 0xFFFFFFFFFFFF0000L,
            0xFFFFFFFFFFFFFFFFL, 0xFFFFFFFFFFFFFFFFL, 0x01E09001AFFFFFFFL, 0x0000000001F01320L, 0x0000000000100000L });
    public static final BitSet FOLLOW_p_StepExpr_in_p_RelativePathExpr6540 = new BitSet(new long[] {
            0x0000000000000002L, 0x0000000000000000L, 0x0000000000000000L, 0x0060000000000000L });
    public static final BitSet FOLLOW_p_PostfixExpr_in_p_StepExpr6594 = new BitSet(new long[] { 0x0000000000000002L });
    public static final BitSet FOLLOW_p_PostfixExpr_in_p_StepExpr6708 = new BitSet(new long[] { 0x0000000000000002L });
    public static final BitSet FOLLOW_p_AxisStep_in_p_StepExpr6726 = new BitSet(new long[] { 0x0000000000000002L });
    public static final BitSet FOLLOW_p_PostfixExpr_in_p_StepExpr6747 = new BitSet(new long[] { 0x0000000000000002L });
    public static final BitSet FOLLOW_p_PostfixExpr_in_p_StepExpr6765 = new BitSet(new long[] { 0x0000000000000002L });
    public static final BitSet FOLLOW_p_AxisStep_in_p_StepExpr6777 = new BitSet(new long[] { 0x0000000000000002L });
    public static final BitSet FOLLOW_p_ReverseStep_in_p_AxisStep6804 = new BitSet(new long[] { 0x0000000000000000L,
            0x0000000000000000L, 0x0000000000000000L, 0x0000000400000000L });
    public static final BitSet FOLLOW_p_ForwardStep_in_p_AxisStep6808 = new BitSet(new long[] { 0x0000000000000000L,
            0x0000000000000000L, 0x0000000000000000L, 0x0000000400000000L });
    public static final BitSet FOLLOW_p_PredicateList_in_p_AxisStep6811 = new BitSet(new long[] { 0x0000000000000002L });
    public static final BitSet FOLLOW_p_ForwardAxis_in_p_ForwardStep6837 = new BitSet(new long[] { 0xFFFFFFFFFFFF0000L,
            0xFFFFFFFFFFFFFFFFL, 0xFFFFFFFFF7FFFFFFL, 0x010010000FFFFFFFL, 0x0000000001C01320L, 0x0000000000100000L });
    public static final BitSet FOLLOW_p_NodeTest_in_p_ForwardStep6839 = new BitSet(new long[] { 0x0000000000000002L });
    public static final BitSet FOLLOW_p_AbbrevForwardStep_in_p_ForwardStep6851 = new BitSet(
            new long[] { 0x0000000000000002L });
    public static final BitSet FOLLOW_CHILD_in_p_ForwardAxis6877 = new BitSet(new long[] { 0x0000000000000000L,
            0x0000000000000000L, 0x0000000000000000L, 0x0400000000000000L });
    public static final BitSet FOLLOW_COLON_COLON_in_p_ForwardAxis6879 = new BitSet(new long[] { 0x0000000000000002L });
    public static final BitSet FOLLOW_DESCENDANT_in_p_ForwardAxis6891 = new BitSet(new long[] { 0x0000000000000000L,
            0x0000000000000000L, 0x0000000000000000L, 0x0400000000000000L });
    public static final BitSet FOLLOW_COLON_COLON_in_p_ForwardAxis6893 = new BitSet(new long[] { 0x0000000000000002L });
    public static final BitSet FOLLOW_ATTRIBUTE_in_p_ForwardAxis6905 = new BitSet(new long[] { 0x0000000000000000L,
            0x0000000000000000L, 0x0000000000000000L, 0x0400000000000000L });
    public static final BitSet FOLLOW_COLON_COLON_in_p_ForwardAxis6907 = new BitSet(new long[] { 0x0000000000000002L });
    public static final BitSet FOLLOW_SELF_in_p_ForwardAxis6919 = new BitSet(new long[] { 0x0000000000000000L,
            0x0000000000000000L, 0x0000000000000000L, 0x0400000000000000L });
    public static final BitSet FOLLOW_COLON_COLON_in_p_ForwardAxis6921 = new BitSet(new long[] { 0x0000000000000002L });
    public static final BitSet FOLLOW_DESCENDANT_OR_SELF_in_p_ForwardAxis6933 = new BitSet(new long[] {
            0x0000000000000000L, 0x0000000000000000L, 0x0000000000000000L, 0x0400000000000000L });
    public static final BitSet FOLLOW_COLON_COLON_in_p_ForwardAxis6935 = new BitSet(new long[] { 0x0000000000000002L });
    public static final BitSet FOLLOW_FOLLOWING_SIBLING_in_p_ForwardAxis6947 = new BitSet(new long[] {
            0x0000000000000000L, 0x0000000000000000L, 0x0000000000000000L, 0x0400000000000000L });
    public static final BitSet FOLLOW_COLON_COLON_in_p_ForwardAxis6949 = new BitSet(new long[] { 0x0000000000000002L });
    public static final BitSet FOLLOW_FOLLOWING_in_p_ForwardAxis6961 = new BitSet(new long[] { 0x0000000000000000L,
            0x0000000000000000L, 0x0000000000000000L, 0x0400000000000000L });
    public static final BitSet FOLLOW_COLON_COLON_in_p_ForwardAxis6963 = new BitSet(new long[] { 0x0000000000000002L });
    public static final BitSet FOLLOW_ATTR_SIGN_in_p_AbbrevForwardStep6989 = new BitSet(new long[] {
            0xFFFFFFFFFFFF0000L, 0xFFFFFFFFFFFFFFFFL, 0xFFFFFFFFF7FFFFFFL, 0x010010000FFFFFFFL, 0x0000000001C01320L,
            0x0000000000100000L });
    public static final BitSet FOLLOW_p_NodeTest_in_p_AbbrevForwardStep6992 = new BitSet(
            new long[] { 0x0000000000000002L });
    public static final BitSet FOLLOW_p_ReverseAxis_in_p_ReverseStep7018 = new BitSet(new long[] { 0xFFFFFFFFFFFF0000L,
            0xFFFFFFFFFFFFFFFFL, 0xFFFFFFFFF7FFFFFFL, 0x010010000FFFFFFFL, 0x0000000001C01320L, 0x0000000000100000L });
    public static final BitSet FOLLOW_p_NodeTest_in_p_ReverseStep7020 = new BitSet(new long[] { 0x0000000000000002L });
    public static final BitSet FOLLOW_p_AbbrevReverseStep_in_p_ReverseStep7032 = new BitSet(
            new long[] { 0x0000000000000002L });
    public static final BitSet FOLLOW_PARENT_in_p_ReverseAxis7058 = new BitSet(new long[] { 0x0000000000000000L,
            0x0000000000000000L, 0x0000000000000000L, 0x0400000000000000L });
    public static final BitSet FOLLOW_COLON_COLON_in_p_ReverseAxis7060 = new BitSet(new long[] { 0x0000000000000002L });
    public static final BitSet FOLLOW_ANCESTOR_in_p_ReverseAxis7072 = new BitSet(new long[] { 0x0000000000000000L,
            0x0000000000000000L, 0x0000000000000000L, 0x0400000000000000L });
    public static final BitSet FOLLOW_COLON_COLON_in_p_ReverseAxis7074 = new BitSet(new long[] { 0x0000000000000002L });
    public static final BitSet FOLLOW_PRECEDING_SIBLING_in_p_ReverseAxis7086 = new BitSet(new long[] {
            0x0000000000000000L, 0x0000000000000000L, 0x0000000000000000L, 0x0400000000000000L });
    public static final BitSet FOLLOW_COLON_COLON_in_p_ReverseAxis7088 = new BitSet(new long[] { 0x0000000000000002L });
    public static final BitSet FOLLOW_PRECEDING_in_p_ReverseAxis7100 = new BitSet(new long[] { 0x0000000000000000L,
            0x0000000000000000L, 0x0000000000000000L, 0x0400000000000000L });
    public static final BitSet FOLLOW_COLON_COLON_in_p_ReverseAxis7102 = new BitSet(new long[] { 0x0000000000000002L });
    public static final BitSet FOLLOW_ANCESTOR_OR_SELF_in_p_ReverseAxis7114 = new BitSet(new long[] {
            0x0000000000000000L, 0x0000000000000000L, 0x0000000000000000L, 0x0400000000000000L });
    public static final BitSet FOLLOW_COLON_COLON_in_p_ReverseAxis7116 = new BitSet(new long[] { 0x0000000000000002L });
    public static final BitSet FOLLOW_DOT_DOT_in_p_AbbrevReverseStep7142 = new BitSet(
            new long[] { 0x0000000000000002L });
    public static final BitSet FOLLOW_p_KindTest_in_p_NodeTest7168 = new BitSet(new long[] { 0x0000000000000002L });
    public static final BitSet FOLLOW_p_NameTest_in_p_NodeTest7172 = new BitSet(new long[] { 0x0000000000000002L });
    public static final BitSet FOLLOW_p_Wildcard_in_p_NameTest7204 = new BitSet(new long[] { 0x0000000000000002L });
    public static final BitSet FOLLOW_p_QName_in_p_NameTest7225 = new BitSet(new long[] { 0x0000000000000002L });
    public static final BitSet FOLLOW_p_QName_in_p_NameTest7243 = new BitSet(new long[] { 0x0000000000000002L });
    public static final BitSet FOLLOW_STAR_in_p_Wildcard7273 = new BitSet(new long[] { 0x0000000000000002L,
            0x0000000000000000L, 0x0000000000000000L, 0x0200000000000000L });
    public static final BitSet FOLLOW_COLON_in_p_Wildcard7276 = new BitSet(new long[] { 0xFFFFFFFFFFFF0000L,
            0xFFFFFFFFFFFFFFFFL, 0xFFFFFFFFF7FFFFFFL, 0x000000000FFFFFFFL, 0x0000000000001000L, 0x0000000000100000L });
    public static final BitSet FOLLOW_p_NCName_in_p_Wildcard7278 = new BitSet(new long[] { 0x0000000000000002L });
    public static final BitSet FOLLOW_p_NCName_in_p_Wildcard7292 = new BitSet(new long[] { 0x0000000000000000L,
            0x0000000000000000L, 0x0000000000000000L, 0x0200000000000000L });
    public static final BitSet FOLLOW_COLON_in_p_Wildcard7294 = new BitSet(new long[] { 0x0000000000000000L,
            0x0000000000000000L, 0x0000000000000000L, 0x0000100000000000L });
    public static final BitSet FOLLOW_STAR_in_p_Wildcard7296 = new BitSet(new long[] { 0x0000000000000002L });
    public static final BitSet FOLLOW_p_StringLiteral_in_p_Wildcard7308 = new BitSet(new long[] { 0x0000000000000000L,
            0x0000000000000000L, 0x0000000000000000L, 0x0200000000000000L });
    public static final BitSet FOLLOW_COLON_in_p_Wildcard7310 = new BitSet(new long[] { 0x0000000000000000L,
            0x0000000000000000L, 0x0000000000000000L, 0x0000100000000000L });
    public static final BitSet FOLLOW_STAR_in_p_Wildcard7312 = new BitSet(new long[] { 0x0000000000000002L });
    public static final BitSet FOLLOW_p_PrimaryExpr_in_p_PostfixExpr7350 = new BitSet(new long[] { 0x0000000000000002L,
            0x0000000000000000L, 0x0000000000000000L, 0x0000000400000000L });
    public static final BitSet FOLLOW_p_Predicate_in_p_PostfixExpr7353 = new BitSet(new long[] { 0x0000000000000002L,
            0x0000000000000000L, 0x0000000000000000L, 0x0000000400000000L });
    public static final BitSet FOLLOW_LPAREN_in_p_ArgumentList7394 = new BitSet(new long[] { 0xFFFFFFFFFFFF0000L,
            0xFFFFFFFFFFFFFFFFL, 0xFFFFFFFFFFFFFFFFL, 0x01E0F801EFFFFFFFL, 0x0000000001F81320L, 0x0000000000100000L });
    public static final BitSet FOLLOW_p_Argument_in_p_ArgumentList7397 = new BitSet(new long[] { 0x0000000000000000L,
            0x0000000000000000L, 0x0000000000000000L, 0x0000040040000000L });
    public static final BitSet FOLLOW_COMMA_in_p_ArgumentList7400 = new BitSet(new long[] { 0xFFFFFFFFFFFF0000L,
            0xFFFFFFFFFFFFFFFFL, 0xFFFFFFFFFFFFFFFFL, 0x01E0F801AFFFFFFFL, 0x0000000001F81320L, 0x0000000000100000L });
    public static final BitSet FOLLOW_p_Argument_in_p_ArgumentList7402 = new BitSet(new long[] { 0x0000000000000000L,
            0x0000000000000000L, 0x0000000000000000L, 0x0000040040000000L });
    public static final BitSet FOLLOW_RPAREN_in_p_ArgumentList7408 = new BitSet(new long[] { 0x0000000000000002L });
    public static final BitSet FOLLOW_p_Predicate_in_p_PredicateList7434 = new BitSet(new long[] { 0x0000000000000002L,
            0x0000000000000000L, 0x0000000000000000L, 0x0000000400000000L });
    public static final BitSet FOLLOW_LSQUARE_in_p_Predicate7461 = new BitSet(new long[] { 0xFFFFFFFFFFFF0000L,
            0xFFFFFFFFFFFFFFFFL, 0xFFFFFFFFFFFFFFFFL, 0x01E0F001AFFFFFFFL, 0x0000000001F81320L, 0x0000000000100000L });
    public static final BitSet FOLLOW_p_Expr_in_p_Predicate7463 = new BitSet(new long[] { 0x0000000000000000L,
            0x0000000000000000L, 0x0000000000000000L, 0x0000000800000000L });
    public static final BitSet FOLLOW_RSQUARE_in_p_Predicate7466 = new BitSet(new long[] { 0x0000000000000002L });
    public static final BitSet FOLLOW_p_ParenthesizedExpr_in_p_PrimaryExpr7499 = new BitSet(
            new long[] { 0x0000000000000002L });
    public static final BitSet FOLLOW_p_Literal_in_p_PrimaryExpr7511 = new BitSet(new long[] { 0x0000000000000002L });
    public static final BitSet FOLLOW_p_VarRef_in_p_PrimaryExpr7523 = new BitSet(new long[] { 0x0000000000000002L });
    public static final BitSet FOLLOW_p_ContextItemExpr_in_p_PrimaryExpr7535 = new BitSet(
            new long[] { 0x0000000000000002L });
    public static final BitSet FOLLOW_p_FunctionCall_in_p_PrimaryExpr7547 = new BitSet(
            new long[] { 0x0000000000000002L });
    public static final BitSet FOLLOW_p_OrderedExpr_in_p_PrimaryExpr7559 = new BitSet(
            new long[] { 0x0000000000000002L });
    public static final BitSet FOLLOW_p_UnorderedExpr_in_p_PrimaryExpr7571 = new BitSet(
            new long[] { 0x0000000000000002L });
    public static final BitSet FOLLOW_p_Constructor_in_p_PrimaryExpr7583 = new BitSet(
            new long[] { 0x0000000000000002L });
    public static final BitSet FOLLOW_p_BlockExpr_in_p_PrimaryExpr7597 = new BitSet(new long[] { 0x0000000000000002L });
    public static final BitSet FOLLOW_p_NumericLiteral_in_p_Literal7623 = new BitSet(new long[] { 0x0000000000000002L });
    public static final BitSet FOLLOW_p_StringLiteral_in_p_Literal7627 = new BitSet(new long[] { 0x0000000000000002L });
    public static final BitSet FOLLOW_set_in_p_NumericLiteral0 = new BitSet(new long[] { 0x0000000000000002L });
    public static final BitSet FOLLOW_DOLLAR_in_p_VarRef7695 = new BitSet(new long[] { 0xFFFFFFFFFFFF0000L,
            0xFFFFFFFFFFFFFFFFL, 0xFFFFFFFFF7FFFFFFL, 0x000000000FFFFFFFL, 0x0000000000001000L, 0x0000000000100000L });
    public static final BitSet FOLLOW_p_VarName_in_p_VarRef7697 = new BitSet(new long[] { 0x0000000000000002L });
    public static final BitSet FOLLOW_p_QName_in_p_VarName7723 = new BitSet(new long[] { 0x0000000000000002L });
    public static final BitSet FOLLOW_LPAREN_in_p_ParenthesizedExpr7749 = new BitSet(new long[] { 0xFFFFFFFFFFFF0000L,
            0xFFFFFFFFFFFFFFFFL, 0xFFFFFFFFFFFFFFFFL, 0x01E0F001EFFFFFFFL, 0x0000000001F81320L, 0x0000000000100000L });
    public static final BitSet FOLLOW_p_Expr_in_p_ParenthesizedExpr7751 = new BitSet(new long[] { 0x0000000000000000L,
            0x0000000000000000L, 0x0000000000000000L, 0x0000000040000000L });
    public static final BitSet FOLLOW_RPAREN_in_p_ParenthesizedExpr7755 = new BitSet(new long[] { 0x0000000000000002L });
    public static final BitSet FOLLOW_DOT_in_p_ContextItemExpr7781 = new BitSet(new long[] { 0x0000000000000002L });
    public static final BitSet FOLLOW_ORDERED_in_p_OrderedExpr7809 = new BitSet(new long[] { 0x0000000000000000L,
            0x0000000000000000L, 0x0000000000000000L, 0x0000000100000000L });
    public static final BitSet FOLLOW_LBRACKET_in_p_OrderedExpr7813 = new BitSet(new long[] { 0xFFFFFFFFFFFF0000L,
            0xFFFFFFFFFFFFFFFFL, 0xFFFFFFFFFFFFFFFFL, 0x01E0F001AFFFFFFFL, 0x0000000001F81320L, 0x0000000000100000L });
    public static final BitSet FOLLOW_p_Expr_in_p_OrderedExpr7815 = new BitSet(new long[] { 0x0000000000000000L,
            0x0000000000000000L, 0x0000000000000000L, 0x0000000200000000L });
    public static final BitSet FOLLOW_RBRACKET_in_p_OrderedExpr7818 = new BitSet(new long[] { 0x0000000000000002L });
    public static final BitSet FOLLOW_UNORDERED_in_p_UnorderedExpr7846 = new BitSet(new long[] { 0x0000000000000000L,
            0x0000000000000000L, 0x0000000000000000L, 0x0000000100000000L });
    public static final BitSet FOLLOW_LBRACKET_in_p_UnorderedExpr7850 = new BitSet(new long[] { 0xFFFFFFFFFFFF0000L,
            0xFFFFFFFFFFFFFFFFL, 0xFFFFFFFFFFFFFFFFL, 0x01E0F001AFFFFFFFL, 0x0000000001F81320L, 0x0000000000100000L });
    public static final BitSet FOLLOW_p_Expr_in_p_UnorderedExpr7852 = new BitSet(new long[] { 0x0000000000000000L,
            0x0000000000000000L, 0x0000000000000000L, 0x0000000200000000L });
    public static final BitSet FOLLOW_RBRACKET_in_p_UnorderedExpr7855 = new BitSet(new long[] { 0x0000000000000002L });
    public static final BitSet FOLLOW_pg_FQName_in_p_FunctionCall7882 = new BitSet(new long[] { 0x0000000000000000L,
            0x0000000000000000L, 0x0000000000000000L, 0x0000000020000000L });
    public static final BitSet FOLLOW_p_ArgumentList_in_p_FunctionCall7884 = new BitSet(
            new long[] { 0x0000000000000002L });
    public static final BitSet FOLLOW_p_ExprSingle_in_p_Argument7910 = new BitSet(new long[] { 0x0000000000000002L });
    public static final BitSet FOLLOW_p_ArgumentPlaceholder_in_p_Argument7915 = new BitSet(
            new long[] { 0x0000000000000002L });
    public static final BitSet FOLLOW_QUESTION_in_p_ArgumentPlaceholder7941 = new BitSet(
            new long[] { 0x0000000000000002L });
    public static final BitSet FOLLOW_p_DirectConstructor_in_p_Constructor7967 = new BitSet(
            new long[] { 0x0000000000000002L });
    public static final BitSet FOLLOW_p_ComputedConstructor_in_p_Constructor7979 = new BitSet(
            new long[] { 0x0000000000000002L });
    public static final BitSet FOLLOW_p_DirElemConstructor_in_p_DirectConstructor8005 = new BitSet(
            new long[] { 0x0000000000000002L });
    public static final BitSet FOLLOW_p_DirCommentConstructor_in_p_DirectConstructor8017 = new BitSet(
            new long[] { 0x0000000000000002L });
    public static final BitSet FOLLOW_p_DirPIConstructor_in_p_DirectConstructor8029 = new BitSet(
            new long[] { 0x0000000000000002L });
    public static final BitSet FOLLOW_SMALLER_in_p_DirElemConstructor8056 = new BitSet(new long[] {
            0xFFFFFFFFFFFF0000L, 0xFFFFFFFFFFFFFFFFL, 0xFFFFFFFFF7FFFFFFL, 0x000000000FFFFFFFL, 0x0000000000001000L,
            0x0000000000100000L });
    public static final BitSet FOLLOW_p_QName_in_p_DirElemConstructor8070 = new BitSet(new long[] {
            0x0000000000000000L, 0x0000000000000000L, 0x0000000000000000L, 0x0801000000000000L, 0x0000000000020000L });
    public static final BitSet FOLLOW_p_DirAttributeList_in_p_DirElemConstructor8072 = new BitSet(new long[] {
            0x0000000000000000L, 0x0000000000000000L, 0x0000000000000000L, 0x0801000000000000L });
    public static final BitSet FOLLOW_EMPTY_CLOSE_TAG_in_p_DirElemConstructor8086 = new BitSet(
            new long[] { 0x0000000000000002L });
    public static final BitSet FOLLOW_GREATER_in_p_DirElemConstructor8091 = new BitSet(new long[] {
            0x0000000000000FC0L, 0x0000000000000000L, 0x0000000000000000L, 0x1000800100000000L, 0x0000000000300000L });
    public static final BitSet FOLLOW_pm_DirElemContent_in_p_DirElemConstructor8093 = new BitSet(new long[] {
            0x0000000000000FC0L, 0x0000000000000000L, 0x0000000000000000L, 0x1000800100000000L, 0x0000000000300000L });
    public static final BitSet FOLLOW_CLOSE_TAG_in_p_DirElemConstructor8096 = new BitSet(new long[] {
            0xFFFFFFFFFFFF0000L, 0xFFFFFFFFFFFFFFFFL, 0xFFFFFFFFF7FFFFFFL, 0x000000000FFFFFFFL, 0x0000000000001000L,
            0x0000000000100000L });
    public static final BitSet FOLLOW_p_QName_in_p_DirElemConstructor8098 = new BitSet(new long[] {
            0x0000000000000000L, 0x0000000000000000L, 0x0000000000000000L, 0x0001000000000000L, 0x0000000000020000L });
    public static final BitSet FOLLOW_S_in_p_DirElemConstructor8100 = new BitSet(new long[] { 0x0000000000000000L,
            0x0000000000000000L, 0x0000000000000000L, 0x0001000000000000L });
    public static final BitSet FOLLOW_GREATER_in_p_DirElemConstructor8103 = new BitSet(
            new long[] { 0x0000000000000002L });
    public static final BitSet FOLLOW_S_in_p_DirAttributeList8180 = new BitSet(new long[] { 0xFFFFFFFFFFFF0002L,
            0xFFFFFFFFFFFFFFFFL, 0xFFFFFFFFF7FFFFFFL, 0x000000000FFFFFFFL, 0x0000000000021000L, 0x0000000000100000L });
    public static final BitSet FOLLOW_p_QName_in_p_DirAttributeList8183 = new BitSet(new long[] { 0x0000000000000000L,
            0x0000000000000000L, 0x0000000000000000L, 0x0000001000000000L, 0x0000000000020000L });
    public static final BitSet FOLLOW_S_in_p_DirAttributeList8185 = new BitSet(new long[] { 0x0000000000000000L,
            0x0000000000000000L, 0x0000000000000000L, 0x0000001000000000L });
    public static final BitSet FOLLOW_EQUAL_in_p_DirAttributeList8188 = new BitSet(new long[] { 0x0000000000000000L,
            0x0000000000000000L, 0x0000000000000000L, 0x0000000000000000L, 0x0000000000020300L });
    public static final BitSet FOLLOW_S_in_p_DirAttributeList8190 = new BitSet(new long[] { 0x0000000000000000L,
            0x0000000000000000L, 0x0000000000000000L, 0x0000000000000000L, 0x0000000000020300L });
    public static final BitSet FOLLOW_p_DirAttributeValue_in_p_DirAttributeList8193 = new BitSet(new long[] {
            0x0000000000000002L, 0x0000000000000000L, 0x0000000000000000L, 0x0000000000000000L, 0x0000000000020000L });
    public static final BitSet FOLLOW_QUOT_in_p_DirAttributeValue8224 = new BitSet(new long[] { 0x0000000000002F10L,
            0x0000000000000000L, 0x0000000000000000L, 0x0000000100000000L, 0x0000000000000300L });
    public static final BitSet FOLLOW_ESCAPE_QUOT_in_p_DirAttributeValue8227 = new BitSet(new long[] {
            0x0000000000002F10L, 0x0000000000000000L, 0x0000000000000000L, 0x0000000100000000L, 0x0000000000000300L });
    public static final BitSet FOLLOW_APOS_in_p_DirAttributeValue8231 = new BitSet(new long[] { 0x0000000000002F10L,
            0x0000000000000000L, 0x0000000000000000L, 0x0000000100000000L, 0x0000000000000300L });
    public static final BitSet FOLLOW_p_QuotAttrValueContent_in_p_DirAttributeValue8235 = new BitSet(new long[] {
            0x0000000000002F10L, 0x0000000000000000L, 0x0000000000000000L, 0x0000000100000000L, 0x0000000000000300L });
    public static final BitSet FOLLOW_QUOT_in_p_DirAttributeValue8239 = new BitSet(new long[] { 0x0000000000000002L });
    public static final BitSet FOLLOW_APOS_in_p_DirAttributeValue8278 = new BitSet(new long[] { 0x0000000000001F20L,
            0x0000000000000000L, 0x0000000000000000L, 0x0000000100000000L, 0x0000000000000300L });
    public static final BitSet FOLLOW_ESCAPE_APOS_in_p_DirAttributeValue8281 = new BitSet(new long[] {
            0x0000000000001F20L, 0x0000000000000000L, 0x0000000000000000L, 0x0000000100000000L, 0x0000000000000300L });
    public static final BitSet FOLLOW_QUOT_in_p_DirAttributeValue8285 = new BitSet(new long[] { 0x0000000000001F20L,
            0x0000000000000000L, 0x0000000000000000L, 0x0000000100000000L, 0x0000000000000300L });
    public static final BitSet FOLLOW_p_AposAttrValueContent_in_p_DirAttributeValue8289 = new BitSet(new long[] {
            0x0000000000001F20L, 0x0000000000000000L, 0x0000000000000000L, 0x0000000100000000L, 0x0000000000000300L });
    public static final BitSet FOLLOW_APOS_in_p_DirAttributeValue8293 = new BitSet(new long[] { 0x0000000000000002L });
    public static final BitSet FOLLOW_p_QuotAttrContentChar_in_p_QuotAttrValueContent8345 = new BitSet(
            new long[] { 0x0000000000000002L });
    public static final BitSet FOLLOW_pm_CommonContent_in_p_QuotAttrValueContent8349 = new BitSet(
            new long[] { 0x0000000000000002L });
    public static final BitSet FOLLOW_p_AposAttrContentChar_in_p_AposAttrValueContent8375 = new BitSet(
            new long[] { 0x0000000000000002L });
    public static final BitSet FOLLOW_pm_CommonContent_in_p_AposAttrValueContent8379 = new BitSet(
            new long[] { 0x0000000000000002L });
    public static final BitSet FOLLOW_p_DirectConstructor_in_pm_DirElemContent8405 = new BitSet(
            new long[] { 0x0000000000000002L });
    public static final BitSet FOLLOW_p_CDataSection_in_pm_DirElemContent8417 = new BitSet(
            new long[] { 0x0000000000000002L });
    public static final BitSet FOLLOW_pm_CommonContent_in_pm_DirElemContent8429 = new BitSet(
            new long[] { 0x0000000000000002L });
    public static final BitSet FOLLOW_p_ElementContentChar_in_pm_DirElemContent8441 = new BitSet(
            new long[] { 0x0000000000000002L });
    public static final BitSet FOLLOW_L_PredefinedEntityRef_in_pm_CommonContent8469 = new BitSet(
            new long[] { 0x0000000000000002L });
    public static final BitSet FOLLOW_L_CharRef_in_pm_CommonContent8481 = new BitSet(new long[] { 0x0000000000000002L });
    public static final BitSet FOLLOW_ESCAPE_LBRACKET_in_pm_CommonContent8493 = new BitSet(
            new long[] { 0x0000000000000002L });
    public static final BitSet FOLLOW_ESCAPE_RBRACKET_in_pm_CommonContent8505 = new BitSet(
            new long[] { 0x0000000000000002L });
    public static final BitSet FOLLOW_pg_EnclosedExprXml_in_pm_CommonContent8517 = new BitSet(
            new long[] { 0x0000000000000002L });
    public static final BitSet FOLLOW_LBRACKET_in_pg_EnclosedExprXml8549 = new BitSet(new long[] { 0xFFFFFFFFFFFF0000L,
            0xFFFFFFFFFFFFFFFFL, 0xFFFFFFFFFFFFFFFFL, 0x01E0F081AFFFFFFFL, 0x0000000001F81320L, 0x0000000000100000L });
    public static final BitSet FOLLOW_p_StatementsAndOptionalExpr_in_pg_EnclosedExprXml8565 = new BitSet(new long[] {
            0x0000000000000000L, 0x0000000000000000L, 0x0000000000000000L, 0x0000000200000000L });
    public static final BitSet FOLLOW_RBRACKET_in_pg_EnclosedExprXml8579 = new BitSet(
            new long[] { 0x0000000000000002L });
    public static final BitSet FOLLOW_L_DirCommentConstructor_in_p_DirCommentConstructor8608 = new BitSet(
            new long[] { 0x0000000000000002L });
    public static final BitSet FOLLOW_L_DirPIConstructor_in_p_DirPIConstructor8640 = new BitSet(
            new long[] { 0x0000000000000002L });
    public static final BitSet FOLLOW_L_CDataSection_in_p_CDataSection8673 = new BitSet(
            new long[] { 0x0000000000000002L });
    public static final BitSet FOLLOW_pm_CompDocConstructor_in_p_ComputedConstructor8705 = new BitSet(
            new long[] { 0x0000000000000002L });
    public static final BitSet FOLLOW_pm_CompElemConstructor_in_p_ComputedConstructor8717 = new BitSet(
            new long[] { 0x0000000000000002L });
    public static final BitSet FOLLOW_pm_CompAttrConstructor_in_p_ComputedConstructor8729 = new BitSet(
            new long[] { 0x0000000000000002L });
    public static final BitSet FOLLOW_p_CompNamespaceConstructor_in_p_ComputedConstructor8741 = new BitSet(
            new long[] { 0x0000000000000002L });
    public static final BitSet FOLLOW_p_CompTextConstructor_in_p_ComputedConstructor8753 = new BitSet(
            new long[] { 0x0000000000000002L });
    public static final BitSet FOLLOW_pm_CompCommentConstructor_in_p_ComputedConstructor8765 = new BitSet(
            new long[] { 0x0000000000000002L });
    public static final BitSet FOLLOW_pm_CompPIConstructor_in_p_ComputedConstructor8777 = new BitSet(
            new long[] { 0x0000000000000002L });
    public static final BitSet FOLLOW_p_CompBinaryConstructor_in_p_ComputedConstructor8792 = new BitSet(
            new long[] { 0x0000000000000002L });
    public static final BitSet FOLLOW_DOCUMENT_in_pm_CompDocConstructor8821 = new BitSet(new long[] {
            0x0000000000000000L, 0x0000000000000000L, 0x0000000000000000L, 0x0000000100000000L });
    public static final BitSet FOLLOW_LBRACKET_in_pm_CompDocConstructor8825 = new BitSet(new long[] {
            0xFFFFFFFFFFFF0000L, 0xFFFFFFFFFFFFFFFFL, 0xFFFFFFFFFFFFFFFFL, 0x01E0F081AFFFFFFFL, 0x0000000001F81320L,
            0x0000000000100000L });
    public static final BitSet FOLLOW_p_StatementsAndOptionalExpr_in_pm_CompDocConstructor8827 = new BitSet(new long[] {
            0x0000000000000000L, 0x0000000000000000L, 0x0000000000000000L, 0x0000000200000000L });
    public static final BitSet FOLLOW_RBRACKET_in_pm_CompDocConstructor8829 = new BitSet(
            new long[] { 0x0000000000000002L });
    public static final BitSet FOLLOW_ELEMENT_in_pm_CompElemConstructor8865 = new BitSet(new long[] {
            0xFFFFFFFFFFFF0000L, 0xFFFFFFFFFFFFFFFFL, 0xFFFFFFFFF7FFFFFFL, 0x000000010FFFFFFFL, 0x0000000000001000L,
            0x0000000000100000L });
    public static final BitSet FOLLOW_p_QName_in_pm_CompElemConstructor8870 = new BitSet(new long[] {
            0x0000000000000000L, 0x0000000000000000L, 0x0000000000000000L, 0x0000000100000000L });
    public static final BitSet FOLLOW_LBRACKET_in_pm_CompElemConstructor8875 = new BitSet(new long[] {
            0xFFFFFFFFFFFF0000L, 0xFFFFFFFFFFFFFFFFL, 0xFFFFFFFFFFFFFFFFL, 0x01E0F001AFFFFFFFL, 0x0000000001F81320L,
            0x0000000000100000L });
    public static final BitSet FOLLOW_p_Expr_in_pm_CompElemConstructor8877 = new BitSet(new long[] {
            0x0000000000000000L, 0x0000000000000000L, 0x0000000000000000L, 0x0000000200000000L });
    public static final BitSet FOLLOW_RBRACKET_in_pm_CompElemConstructor8880 = new BitSet(new long[] {
            0x0000000000000000L, 0x0000000000000000L, 0x0000000000000000L, 0x0000000100000000L });
    public static final BitSet FOLLOW_LBRACKET_in_pm_CompElemConstructor8884 = new BitSet(new long[] {
            0xFFFFFFFFFFFF0000L, 0xFFFFFFFFFFFFFFFFL, 0xFFFFFFFFFFFFFFFFL, 0x01E0F081AFFFFFFFL, 0x0000000001F81320L,
            0x0000000000100000L });
    public static final BitSet FOLLOW_pm_ContentExpr_in_pm_CompElemConstructor8886 = new BitSet(new long[] {
            0x0000000000000000L, 0x0000000000000000L, 0x0000000000000000L, 0x0000000200000000L });
    public static final BitSet FOLLOW_RBRACKET_in_pm_CompElemConstructor8888 = new BitSet(
            new long[] { 0x0000000000000002L });
    public static final BitSet FOLLOW_p_StatementsAndOptionalExpr_in_pm_ContentExpr8915 = new BitSet(
            new long[] { 0x0000000000000002L });
    public static final BitSet FOLLOW_ATTRIBUTE_in_pm_CompAttrConstructor8944 = new BitSet(new long[] {
            0xFFFFFFFFFFFF0000L, 0xFFFFFFFFFFFFFFFFL, 0xFFFFFFFFF7FFFFFFL, 0x000000010FFFFFFFL, 0x0000000000001000L,
            0x0000000000100000L });
    public static final BitSet FOLLOW_p_QName_in_pm_CompAttrConstructor8949 = new BitSet(new long[] {
            0x0000000000000000L, 0x0000000000000000L, 0x0000000000000000L, 0x0000000100000000L });
    public static final BitSet FOLLOW_LBRACKET_in_pm_CompAttrConstructor8954 = new BitSet(new long[] {
            0xFFFFFFFFFFFF0000L, 0xFFFFFFFFFFFFFFFFL, 0xFFFFFFFFFFFFFFFFL, 0x01E0F001AFFFFFFFL, 0x0000000001F81320L,
            0x0000000000100000L });
    public static final BitSet FOLLOW_p_Expr_in_pm_CompAttrConstructor8956 = new BitSet(new long[] {
            0x0000000000000000L, 0x0000000000000000L, 0x0000000000000000L, 0x0000000200000000L });
    public static final BitSet FOLLOW_RBRACKET_in_pm_CompAttrConstructor8959 = new BitSet(new long[] {
            0x0000000000000000L, 0x0000000000000000L, 0x0000000000000000L, 0x0000000100000000L });
    public static final BitSet FOLLOW_LBRACKET_in_pm_CompAttrConstructor8963 = new BitSet(new long[] {
            0xFFFFFFFFFFFF0000L, 0xFFFFFFFFFFFFFFFFL, 0xFFFFFFFFFFFFFFFFL, 0x01E0F081AFFFFFFFL, 0x0000000001F81320L,
            0x0000000000100000L });
    public static final BitSet FOLLOW_p_StatementsAndOptionalExpr_in_pm_CompAttrConstructor8965 = new BitSet(
            new long[] { 0x0000000000000000L, 0x0000000000000000L, 0x0000000000000000L, 0x0000000200000000L });
    public static final BitSet FOLLOW_RBRACKET_in_pm_CompAttrConstructor8967 = new BitSet(
            new long[] { 0x0000000000000002L });
    public static final BitSet FOLLOW_NAMESPACE_in_p_CompNamespaceConstructor8995 = new BitSet(new long[] {
            0xFFFFFFFFFFFF0000L, 0xFFFFFFFFFFFFFFFFL, 0xFFFFFFFFF7FFFFFFL, 0x000000010FFFFFFFL, 0x0000000000001000L,
            0x0000000000100000L });
    public static final BitSet FOLLOW_p_Prefix_in_p_CompNamespaceConstructor9000 = new BitSet(new long[] {
            0x0000000000000000L, 0x0000000000000000L, 0x0000000000000000L, 0x0000000100000000L });
    public static final BitSet FOLLOW_LBRACKET_in_p_CompNamespaceConstructor9005 = new BitSet(new long[] {
            0xFFFFFFFFFFFF0000L, 0xFFFFFFFFFFFFFFFFL, 0xFFFFFFFFFFFFFFFFL, 0x01E0F001AFFFFFFFL, 0x0000000001F81320L,
            0x0000000000100000L });
    public static final BitSet FOLLOW_p_PrefixExpr_in_p_CompNamespaceConstructor9007 = new BitSet(new long[] {
            0x0000000000000000L, 0x0000000000000000L, 0x0000000000000000L, 0x0000000200000000L });
    public static final BitSet FOLLOW_RBRACKET_in_p_CompNamespaceConstructor9009 = new BitSet(new long[] {
            0x0000000000000000L, 0x0000000000000000L, 0x0000000000000000L, 0x0000000100000000L });
    public static final BitSet FOLLOW_LBRACKET_in_p_CompNamespaceConstructor9013 = new BitSet(new long[] {
            0xFFFFFFFFFFFF0000L, 0xFFFFFFFFFFFFFFFFL, 0xFFFFFFFFFFFFFFFFL, 0x01E0F003AFFFFFFFL, 0x0000000001F81320L,
            0x0000000000100000L });
    public static final BitSet FOLLOW_p_URIExpr_in_p_CompNamespaceConstructor9015 = new BitSet(new long[] {
            0x0000000000000000L, 0x0000000000000000L, 0x0000000000000000L, 0x0000000200000000L });
    public static final BitSet FOLLOW_RBRACKET_in_p_CompNamespaceConstructor9018 = new BitSet(
            new long[] { 0x0000000000000002L });
    public static final BitSet FOLLOW_p_NCName_in_p_Prefix9044 = new BitSet(new long[] { 0x0000000000000002L });
    public static final BitSet FOLLOW_p_Expr_in_p_PrefixExpr9070 = new BitSet(new long[] { 0x0000000000000002L });
    public static final BitSet FOLLOW_p_Expr_in_p_URIExpr9097 = new BitSet(new long[] { 0x0000000000000002L });
    public static final BitSet FOLLOW_TEXT_in_p_CompTextConstructor9126 = new BitSet(new long[] { 0x0000000000000000L,
            0x0000000000000000L, 0x0000000000000000L, 0x0000000100000000L });
    public static final BitSet FOLLOW_LBRACKET_in_p_CompTextConstructor9130 = new BitSet(new long[] {
            0xFFFFFFFFFFFF0000L, 0xFFFFFFFFFFFFFFFFL, 0xFFFFFFFFFFFFFFFFL, 0x01E0F001AFFFFFFFL, 0x0000000001F81320L,
            0x0000000000100000L });
    public static final BitSet FOLLOW_p_Expr_in_p_CompTextConstructor9132 = new BitSet(new long[] {
            0x0000000000000000L, 0x0000000000000000L, 0x0000000000000000L, 0x0000000200000000L });
    public static final BitSet FOLLOW_RBRACKET_in_p_CompTextConstructor9135 = new BitSet(
            new long[] { 0x0000000000000002L });
    public static final BitSet FOLLOW_BINARY_in_p_CompBinaryConstructor9163 = new BitSet(new long[] {
            0x0000000000000000L, 0x0000000000000000L, 0x0000000000000000L, 0x0000000100000000L });
    public static final BitSet FOLLOW_LBRACKET_in_p_CompBinaryConstructor9167 = new BitSet(new long[] {
            0xFFFFFFFFFFFF0000L, 0xFFFFFFFFFFFFFFFFL, 0xFFFFFFFFFFFFFFFFL, 0x01E0F001AFFFFFFFL, 0x0000000001F81320L,
            0x0000000000100000L });
    public static final BitSet FOLLOW_p_Expr_in_p_CompBinaryConstructor9169 = new BitSet(new long[] {
            0x0000000000000000L, 0x0000000000000000L, 0x0000000000000000L, 0x0000000200000000L });
    public static final BitSet FOLLOW_RBRACKET_in_p_CompBinaryConstructor9172 = new BitSet(
            new long[] { 0x0000000000000002L });
    public static final BitSet FOLLOW_COMMENT_in_pm_CompCommentConstructor9201 = new BitSet(new long[] {
            0x0000000000000000L, 0x0000000000000000L, 0x0000000000000000L, 0x0000000100000000L });
    public static final BitSet FOLLOW_LBRACKET_in_pm_CompCommentConstructor9205 = new BitSet(new long[] {
            0xFFFFFFFFFFFF0000L, 0xFFFFFFFFFFFFFFFFL, 0xFFFFFFFFFFFFFFFFL, 0x01E0F081AFFFFFFFL, 0x0000000001F81320L,
            0x0000000000100000L });
    public static final BitSet FOLLOW_p_StatementsAndOptionalExpr_in_pm_CompCommentConstructor9207 = new BitSet(
            new long[] { 0x0000000000000000L, 0x0000000000000000L, 0x0000000000000000L, 0x0000000200000000L });
    public static final BitSet FOLLOW_RBRACKET_in_pm_CompCommentConstructor9209 = new BitSet(
            new long[] { 0x0000000000000002L });
    public static final BitSet FOLLOW_PROCESSING_INSTRUCTION_in_pm_CompPIConstructor9238 = new BitSet(new long[] {
            0xFFFFFFFFFFFF0000L, 0xFFFFFFFFFFFFFFFFL, 0xFFFFFFFFF7FFFFFFL, 0x000000010FFFFFFFL, 0x0000000000001000L,
            0x0000000000100000L });
    public static final BitSet FOLLOW_p_NCName_in_pm_CompPIConstructor9243 = new BitSet(new long[] {
            0x0000000000000000L, 0x0000000000000000L, 0x0000000000000000L, 0x0000000100000000L });
    public static final BitSet FOLLOW_LBRACKET_in_pm_CompPIConstructor9248 = new BitSet(new long[] {
            0xFFFFFFFFFFFF0000L, 0xFFFFFFFFFFFFFFFFL, 0xFFFFFFFFFFFFFFFFL, 0x01E0F001AFFFFFFFL, 0x0000000001F81320L,
            0x0000000000100000L });
    public static final BitSet FOLLOW_p_Expr_in_pm_CompPIConstructor9250 = new BitSet(new long[] { 0x0000000000000000L,
            0x0000000000000000L, 0x0000000000000000L, 0x0000000200000000L });
    public static final BitSet FOLLOW_RBRACKET_in_pm_CompPIConstructor9253 = new BitSet(new long[] {
            0x0000000000000000L, 0x0000000000000000L, 0x0000000000000000L, 0x0000000100000000L });
    public static final BitSet FOLLOW_LBRACKET_in_pm_CompPIConstructor9257 = new BitSet(new long[] {
            0xFFFFFFFFFFFF0000L, 0xFFFFFFFFFFFFFFFFL, 0xFFFFFFFFFFFFFFFFL, 0x01E0F081AFFFFFFFL, 0x0000000001F81320L,
            0x0000000000100000L });
    public static final BitSet FOLLOW_p_StatementsAndOptionalExpr_in_pm_CompPIConstructor9259 = new BitSet(new long[] {
            0x0000000000000000L, 0x0000000000000000L, 0x0000000000000000L, 0x0000000200000000L });
    public static final BitSet FOLLOW_RBRACKET_in_pm_CompPIConstructor9261 = new BitSet(
            new long[] { 0x0000000000000002L });
    public static final BitSet FOLLOW_p_AtomicOrUnionType_in_p_SingleType9305 = new BitSet(new long[] {
            0x0000000000000002L, 0x0000000000000000L, 0x0000000000000000L, 0x0000080000000000L });
    public static final BitSet FOLLOW_QUESTION_in_p_SingleType9307 = new BitSet(new long[] { 0x0000000000000002L });
    public static final BitSet FOLLOW_AS_in_p_TypeDeclaration9336 = new BitSet(new long[] { 0xFFFFFFFFFFFF0000L,
            0xFFFFFFFFFFFFFFFFL, 0xFFFFFFFFF7FFFFFFL, 0x000000002FFFFFFFL, 0x0000000000001000L, 0x0000000000100000L });
    public static final BitSet FOLLOW_p_SequenceType_in_p_TypeDeclaration9342 = new BitSet(
            new long[] { 0x0000000000000002L });
    public static final BitSet FOLLOW_EMPTY_SEQUENCE_in_p_SequenceType9395 = new BitSet(new long[] {
            0x0000000000000000L, 0x0000000000000000L, 0x0000000000000000L, 0x0000000020000000L });
    public static final BitSet FOLLOW_LPAREN_in_p_SequenceType9401 = new BitSet(new long[] { 0x0000000000000000L,
            0x0000000000000000L, 0x0000000000000000L, 0x0000000040000000L });
    public static final BitSet FOLLOW_RPAREN_in_p_SequenceType9405 = new BitSet(new long[] { 0x0000000000000002L });
    public static final BitSet FOLLOW_p_ItemType_in_p_SequenceType9454 = new BitSet(new long[] { 0x0000000000000002L,
            0x0000000000000000L, 0x0000000000000000L, 0x0000380000000000L });
    public static final BitSet FOLLOW_p_OccurrenceIndicator_in_p_SequenceType9465 = new BitSet(
            new long[] { 0x0000000000000002L });
    public static final BitSet FOLLOW_set_in_p_OccurrenceIndicator0 = new BitSet(new long[] { 0x0000000000000002L });
    public static final BitSet FOLLOW_p_KindTest_in_p_ItemType9567 = new BitSet(new long[] { 0x0000000000000002L });
    public static final BitSet FOLLOW_BINARY_in_p_ItemType9607 = new BitSet(new long[] { 0x0000000000000000L,
            0x0000000000000000L, 0x0000000000000000L, 0x0000000020000000L });
    public static final BitSet FOLLOW_LPAREN_in_p_ItemType9609 = new BitSet(new long[] { 0x0000000000000000L,
            0x0000000000000000L, 0x0000000000000000L, 0x0000000040000000L });
    public static final BitSet FOLLOW_RPAREN_in_p_ItemType9611 = new BitSet(new long[] { 0x0000000000000002L });
    public static final BitSet FOLLOW_ITEM_in_p_ItemType9653 = new BitSet(new long[] { 0x0000000000000000L,
            0x0000000000000000L, 0x0000000000000000L, 0x0000000020000000L });
    public static final BitSet FOLLOW_LPAREN_in_p_ItemType9655 = new BitSet(new long[] { 0x0000000000000000L,
            0x0000000000000000L, 0x0000000000000000L, 0x0000000040000000L });
    public static final BitSet FOLLOW_RPAREN_in_p_ItemType9657 = new BitSet(new long[] { 0x0000000000000002L });
    public static final BitSet FOLLOW_p_AtomicOrUnionType_in_p_ItemType9701 = new BitSet(
            new long[] { 0x0000000000000002L });
    public static final BitSet FOLLOW_p_ParenthesizedItemType_in_p_ItemType9713 = new BitSet(
            new long[] { 0x0000000000000002L });
    public static final BitSet FOLLOW_p_QName_in_p_AtomicOrUnionType9739 = new BitSet(
            new long[] { 0x0000000000000002L });
    public static final BitSet FOLLOW_p_DocumentTest_in_p_KindTest9789 = new BitSet(new long[] { 0x0000000000000002L });
    public static final BitSet FOLLOW_p_ElementTest_in_p_KindTest9801 = new BitSet(new long[] { 0x0000000000000002L });
    public static final BitSet FOLLOW_p_AttributeTest_in_p_KindTest9813 = new BitSet(new long[] { 0x0000000000000002L });
    public static final BitSet FOLLOW_p_SchemaElementTest_in_p_KindTest9825 = new BitSet(
            new long[] { 0x0000000000000002L });
    public static final BitSet FOLLOW_p_SchemaAttributeTest_in_p_KindTest9837 = new BitSet(
            new long[] { 0x0000000000000002L });
    public static final BitSet FOLLOW_p_PITest_in_p_KindTest9849 = new BitSet(new long[] { 0x0000000000000002L });
    public static final BitSet FOLLOW_p_CommentTest_in_p_KindTest9861 = new BitSet(new long[] { 0x0000000000000002L });
    public static final BitSet FOLLOW_p_TextTest_in_p_KindTest9873 = new BitSet(new long[] { 0x0000000000000002L });
    public static final BitSet FOLLOW_p_NamespaceNodeTest_in_p_KindTest9885 = new BitSet(
            new long[] { 0x0000000000000002L });
    public static final BitSet FOLLOW_p_AnyKindTest_in_p_KindTest9897 = new BitSet(new long[] { 0x0000000000000002L });
    public static final BitSet FOLLOW_NODE_in_p_AnyKindTest9923 = new BitSet(new long[] { 0x0000000000000000L,
            0x0000000000000000L, 0x0000000000000000L, 0x0000000020000000L });
    public static final BitSet FOLLOW_LPAREN_in_p_AnyKindTest9925 = new BitSet(new long[] { 0x0000000000000000L,
            0x0000000000000000L, 0x0000000000000000L, 0x0000000040000000L });
    public static final BitSet FOLLOW_RPAREN_in_p_AnyKindTest9927 = new BitSet(new long[] { 0x0000000000000002L });
    public static final BitSet FOLLOW_DOCUMENT_NODE_in_p_DocumentTest9953 = new BitSet(new long[] {
            0x0000000000000000L, 0x0000000000000000L, 0x0000000000000000L, 0x0000000020000000L });
    public static final BitSet FOLLOW_LPAREN_in_p_DocumentTest9955 = new BitSet(new long[] { 0x0000040000000000L,
            0x0000000040000000L, 0x0000000000000000L, 0x0000000040000000L });
    public static final BitSet FOLLOW_p_ElementTest_in_p_DocumentTest9958 = new BitSet(new long[] {
            0x0000000000000000L, 0x0000000000000000L, 0x0000000000000000L, 0x0000000040000000L });
    public static final BitSet FOLLOW_p_SchemaElementTest_in_p_DocumentTest9962 = new BitSet(new long[] {
            0x0000000000000000L, 0x0000000000000000L, 0x0000000000000000L, 0x0000000040000000L });
    public static final BitSet FOLLOW_RPAREN_in_p_DocumentTest9966 = new BitSet(new long[] { 0x0000000000000002L });
    public static final BitSet FOLLOW_TEXT_in_p_TextTest9992 = new BitSet(new long[] { 0x0000000000000000L,
            0x0000000000000000L, 0x0000000000000000L, 0x0000000020000000L });
    public static final BitSet FOLLOW_LPAREN_in_p_TextTest9994 = new BitSet(new long[] { 0x0000000000000000L,
            0x0000000000000000L, 0x0000000000000000L, 0x0000000040000000L });
    public static final BitSet FOLLOW_RPAREN_in_p_TextTest9996 = new BitSet(new long[] { 0x0000000000000002L });
    public static final BitSet FOLLOW_COMMENT_in_p_CommentTest10022 = new BitSet(new long[] { 0x0000000000000000L,
            0x0000000000000000L, 0x0000000000000000L, 0x0000000020000000L });
    public static final BitSet FOLLOW_LPAREN_in_p_CommentTest10024 = new BitSet(new long[] { 0x0000000000000000L,
            0x0000000000000000L, 0x0000000000000000L, 0x0000000040000000L });
    public static final BitSet FOLLOW_RPAREN_in_p_CommentTest10026 = new BitSet(new long[] { 0x0000000000000002L });
    public static final BitSet FOLLOW_NAMESPACE_NODE_in_p_NamespaceNodeTest10052 = new BitSet(new long[] {
            0x0000000000000000L, 0x0000000000000000L, 0x0000000000000000L, 0x0000000020000000L });
    public static final BitSet FOLLOW_LPAREN_in_p_NamespaceNodeTest10054 = new BitSet(new long[] { 0x0000000000000000L,
            0x0000000000000000L, 0x0000000000000000L, 0x0000000040000000L });
    public static final BitSet FOLLOW_RPAREN_in_p_NamespaceNodeTest10056 = new BitSet(
            new long[] { 0x0000000000000002L });
    public static final BitSet FOLLOW_PROCESSING_INSTRUCTION_in_p_PITest10082 = new BitSet(new long[] {
            0x0000000000000000L, 0x0000000000000000L, 0x0000000000000000L, 0x0000000020000000L });
    public static final BitSet FOLLOW_LPAREN_in_p_PITest10084 = new BitSet(new long[] { 0xFFFFFFFFFFFF0000L,
            0xFFFFFFFFFFFFFFFFL, 0xFFFFFFFFF7FFFFFFL, 0x000000004FFFFFFFL, 0x0000000001C01300L, 0x0000000000100000L });
    public static final BitSet FOLLOW_p_NCName_in_p_PITest10087 = new BitSet(new long[] { 0x0000000000000000L,
            0x0000000000000000L, 0x0000000000000000L, 0x0000000040000000L });
    public static final BitSet FOLLOW_p_StringLiteral_in_p_PITest10091 = new BitSet(new long[] { 0x0000000000000000L,
            0x0000000000000000L, 0x0000000000000000L, 0x0000000040000000L });
    public static final BitSet FOLLOW_RPAREN_in_p_PITest10095 = new BitSet(new long[] { 0x0000000000000002L });
    public static final BitSet FOLLOW_ATTRIBUTE_in_p_AttributeTest10121 = new BitSet(new long[] { 0x0000000000000000L,
            0x0000000000000000L, 0x0000000000000000L, 0x0000000020000000L });
    public static final BitSet FOLLOW_LPAREN_in_p_AttributeTest10123 = new BitSet(new long[] { 0xFFFFFFFFFFFF0000L,
            0xFFFFFFFFFFFFFFFFL, 0xFFFFFFFFF7FFFFFFL, 0x000010004FFFFFFFL, 0x0000000000001000L, 0x0000000000100000L });
    public static final BitSet FOLLOW_p_AttribNameOrWildcard_in_p_AttributeTest10126 = new BitSet(new long[] {
            0x0000000000000000L, 0x0000000000000000L, 0x0000000000000000L, 0x0000040040000000L });
    public static final BitSet FOLLOW_COMMA_in_p_AttributeTest10129 = new BitSet(new long[] { 0xFFFFFFFFFFFF0000L,
            0xFFFFFFFFFFFFFFFFL, 0xFFFFFFFFF7FFFFFFL, 0x000000000FFFFFFFL, 0x0000000000001000L, 0x0000000000100000L });
    public static final BitSet FOLLOW_p_TypeName_in_p_AttributeTest10131 = new BitSet(new long[] { 0x0000000000000000L,
            0x0000000000000000L, 0x0000000000000000L, 0x0000000040000000L });
    public static final BitSet FOLLOW_RPAREN_in_p_AttributeTest10137 = new BitSet(new long[] { 0x0000000000000002L });
    public static final BitSet FOLLOW_p_AttributeName_in_p_AttribNameOrWildcard10165 = new BitSet(
            new long[] { 0x0000000000000002L });
    public static final BitSet FOLLOW_STAR_in_p_AttribNameOrWildcard10169 = new BitSet(
            new long[] { 0x0000000000000002L });
    public static final BitSet FOLLOW_SCHEMA_ATTRIBUTE_in_p_SchemaAttributeTest10195 = new BitSet(new long[] {
            0x0000000000000000L, 0x0000000000000000L, 0x0000000000000000L, 0x0000000020000000L });
    public static final BitSet FOLLOW_LPAREN_in_p_SchemaAttributeTest10197 = new BitSet(new long[] {
            0xFFFFFFFFFFFF0000L, 0xFFFFFFFFFFFFFFFFL, 0xFFFFFFFFF7FFFFFFL, 0x000000000FFFFFFFL, 0x0000000000001000L,
            0x0000000000100000L });
    public static final BitSet FOLLOW_p_AttributeDeclaration_in_p_SchemaAttributeTest10199 = new BitSet(new long[] {
            0x0000000000000000L, 0x0000000000000000L, 0x0000000000000000L, 0x0000000040000000L });
    public static final BitSet FOLLOW_RPAREN_in_p_SchemaAttributeTest10201 = new BitSet(
            new long[] { 0x0000000000000002L });
    public static final BitSet FOLLOW_p_AttributeName_in_p_AttributeDeclaration10227 = new BitSet(
            new long[] { 0x0000000000000002L });
    public static final BitSet FOLLOW_ELEMENT_in_p_ElementTest10253 = new BitSet(new long[] { 0x0000000000000000L,
            0x0000000000000000L, 0x0000000000000000L, 0x0000000020000000L });
    public static final BitSet FOLLOW_LPAREN_in_p_ElementTest10255 = new BitSet(new long[] { 0xFFFFFFFFFFFF0000L,
            0xFFFFFFFFFFFFFFFFL, 0xFFFFFFFFF7FFFFFFL, 0x000010004FFFFFFFL, 0x0000000000001000L, 0x0000000000100000L });
    public static final BitSet FOLLOW_p_ElementNameOrWildcard_in_p_ElementTest10258 = new BitSet(new long[] {
            0x0000000000000000L, 0x0000000000000000L, 0x0000000000000000L, 0x0000040040000000L });
    public static final BitSet FOLLOW_COMMA_in_p_ElementTest10261 = new BitSet(new long[] { 0xFFFFFFFFFFFF0000L,
            0xFFFFFFFFFFFFFFFFL, 0xFFFFFFFFF7FFFFFFL, 0x000000000FFFFFFFL, 0x0000000000001000L, 0x0000000000100000L });
    public static final BitSet FOLLOW_p_TypeName_in_p_ElementTest10263 = new BitSet(new long[] { 0x0000000000000000L,
            0x0000000000000000L, 0x0000000000000000L, 0x0000080040000000L });
    public static final BitSet FOLLOW_QUESTION_in_p_ElementTest10265 = new BitSet(new long[] { 0x0000000000000000L,
            0x0000000000000000L, 0x0000000000000000L, 0x0000000040000000L });
    public static final BitSet FOLLOW_RPAREN_in_p_ElementTest10272 = new BitSet(new long[] { 0x0000000000000002L });
    public static final BitSet FOLLOW_p_QName_in_p_ElementNameOrWildcard10298 = new BitSet(
            new long[] { 0x0000000000000002L });
    public static final BitSet FOLLOW_STAR_in_p_ElementNameOrWildcard10302 = new BitSet(
            new long[] { 0x0000000000000002L });
    public static final BitSet FOLLOW_SCHEMA_ELEMENT_in_p_SchemaElementTest10320 = new BitSet(new long[] {
            0x0000000000000000L, 0x0000000000000000L, 0x0000000000000000L, 0x0000000020000000L });
    public static final BitSet FOLLOW_LPAREN_in_p_SchemaElementTest10322 = new BitSet(new long[] { 0xFFFFFFFFFFFF0000L,
            0xFFFFFFFFFFFFFFFFL, 0xFFFFFFFFF7FFFFFFL, 0x000000000FFFFFFFL, 0x0000000000001000L, 0x0000000000100000L });
    public static final BitSet FOLLOW_p_ElementDeclaration_in_p_SchemaElementTest10324 = new BitSet(new long[] {
            0x0000000000000000L, 0x0000000000000000L, 0x0000000000000000L, 0x0000000040000000L });
    public static final BitSet FOLLOW_RPAREN_in_p_SchemaElementTest10326 = new BitSet(
            new long[] { 0x0000000000000002L });
    public static final BitSet FOLLOW_p_ElementName_in_p_ElementDeclaration10352 = new BitSet(
            new long[] { 0x0000000000000002L });
    public static final BitSet FOLLOW_p_QName_in_p_AttributeName10378 = new BitSet(new long[] { 0x0000000000000002L });
    public static final BitSet FOLLOW_p_QName_in_p_ElementName10404 = new BitSet(new long[] { 0x0000000000000002L });
    public static final BitSet FOLLOW_p_QName_in_p_TypeName10430 = new BitSet(new long[] { 0x0000000000000002L });
    public static final BitSet FOLLOW_p_Annotation_in_p_FunctionTest10456 = new BitSet(new long[] {
            0x0040000000000000L, 0x0000000000000000L, 0x0000000000000000L, 0x0000008000000000L });
    public static final BitSet FOLLOW_p_AnyFunctionTest_in_p_FunctionTest10460 = new BitSet(
            new long[] { 0x0000000000000002L });
    public static final BitSet FOLLOW_p_TypedFunctionTest_in_p_FunctionTest10464 = new BitSet(
            new long[] { 0x0000000000000002L });
    public static final BitSet FOLLOW_FUNCTION_in_p_AnyFunctionTest10491 = new BitSet(new long[] { 0x0000000000000000L,
            0x0000000000000000L, 0x0000000000000000L, 0x0000000020000000L });
    public static final BitSet FOLLOW_LPAREN_in_p_AnyFunctionTest10493 = new BitSet(new long[] { 0x0000000000000000L,
            0x0000000000000000L, 0x0000000000000000L, 0x0000100000000000L });
    public static final BitSet FOLLOW_STAR_in_p_AnyFunctionTest10495 = new BitSet(new long[] { 0x0000000000000000L,
            0x0000000000000000L, 0x0000000000000000L, 0x0000000040000000L });
    public static final BitSet FOLLOW_RPAREN_in_p_AnyFunctionTest10497 = new BitSet(new long[] { 0x0000000000000002L });
    public static final BitSet FOLLOW_FUNCTION_in_p_TypedFunctionTest10523 = new BitSet(new long[] {
            0x0000000000000000L, 0x0000000000000000L, 0x0000000000000000L, 0x0000000020000000L });
    public static final BitSet FOLLOW_LPAREN_in_p_TypedFunctionTest10525 = new BitSet(new long[] { 0xFFFFFFFFFFFF0000L,
            0xFFFFFFFFFFFFFFFFL, 0xFFFFFFFFF7FFFFFFL, 0x000000006FFFFFFFL, 0x0000000000001000L, 0x0000000000100000L });
    public static final BitSet FOLLOW_p_SequenceType_in_p_TypedFunctionTest10528 = new BitSet(new long[] {
            0x0000000000000000L, 0x0000000000000000L, 0x0000000000000000L, 0x0000040040000000L });
    public static final BitSet FOLLOW_COMMA_in_p_TypedFunctionTest10531 = new BitSet(new long[] { 0xFFFFFFFFFFFF0000L,
            0xFFFFFFFFFFFFFFFFL, 0xFFFFFFFFF7FFFFFFL, 0x000000002FFFFFFFL, 0x0000000000001000L, 0x0000000000100000L });
    public static final BitSet FOLLOW_p_SequenceType_in_p_TypedFunctionTest10533 = new BitSet(new long[] {
            0x0000000000000000L, 0x0000000000000000L, 0x0000000000000000L, 0x0000040040000000L });
    public static final BitSet FOLLOW_RPAREN_in_p_TypedFunctionTest10539 = new BitSet(
            new long[] { 0x0000000000080000L });
    public static final BitSet FOLLOW_AS_in_p_TypedFunctionTest10541 = new BitSet(new long[] { 0xFFFFFFFFFFFF0000L,
            0xFFFFFFFFFFFFFFFFL, 0xFFFFFFFFF7FFFFFFL, 0x000000002FFFFFFFL, 0x0000000000001000L, 0x0000000000100000L });
    public static final BitSet FOLLOW_p_SequenceType_in_p_TypedFunctionTest10543 = new BitSet(
            new long[] { 0x0000000000000002L });
    public static final BitSet FOLLOW_LPAREN_in_p_ParenthesizedItemType10569 = new BitSet(new long[] {
            0xFFFFFFFFFFFF0000L, 0xFFFFFFFFFFFFFFFFL, 0xFFFFFFFFF7FFFFFFL, 0x000000002FFFFFFFL, 0x0000000000001000L,
            0x0000000000100000L });
    public static final BitSet FOLLOW_p_ItemType_in_p_ParenthesizedItemType10571 = new BitSet(new long[] {
            0x0000000000000000L, 0x0000000000000000L, 0x0000000000000000L, 0x0000000040000000L });
    public static final BitSet FOLLOW_RPAREN_in_p_ParenthesizedItemType10573 = new BitSet(
            new long[] { 0x0000000000000002L });
    public static final BitSet FOLLOW_QUOT_in_p_StringLiteral10624 = new BitSet(new long[] { 0xFFFFFFFFFFFFFFF0L,
            0xFFFFFFFFFFFFFFFFL, 0xFFFFFFFFFFFFFFFFL, 0xFFFFFDFFFFFFFFFFL, 0xFFFFFFFFFFFFFFFFL, 0x00000000001FFFFFL });
    public static final BitSet FOLLOW_pg_QuotStringLiteralContent_in_p_StringLiteral10628 = new BitSet(new long[] {
            0x0000000000000000L, 0x0000000000000000L, 0x0000000000000000L, 0x0000000000000000L, 0x0000000000000200L });
    public static final BitSet FOLLOW_QUOT_in_p_StringLiteral10630 = new BitSet(new long[] { 0x0000000000000002L });
    public static final BitSet FOLLOW_APOS_in_p_StringLiteral10669 = new BitSet(new long[] { 0xFFFFFFFFFFFFFFF0L,
            0xFFFFFFFFFFFFFFFFL, 0xFFFFFFFFFFFFFFFFL, 0xFFFFFDFFFFFFFFFFL, 0xFFFFFFFFFFFFFFFFL, 0x00000000001FFFFFL });
    public static final BitSet FOLLOW_pg_AposStringLiteralContent_in_p_StringLiteral10673 = new BitSet(new long[] {
            0x0000000000000000L, 0x0000000000000000L, 0x0000000000000000L, 0x0000000000000000L, 0x0000000000000100L });
    public static final BitSet FOLLOW_APOS_in_p_StringLiteral10675 = new BitSet(new long[] { 0x0000000000000002L });
    public static final BitSet FOLLOW_set_in_pg_QuotStringLiteralContent10730 = new BitSet(new long[] {
            0xFFFFFFFFFFFFFFF2L, 0xFFFFFFFFFFFFFFFFL, 0xFFFFFFFFFFFFFFFFL, 0xFFFFFDFFFFFFFFFFL, 0xFFFFFFFFFFFFFDFFL,
            0x00000000001FFFFFL });
    public static final BitSet FOLLOW_set_in_pg_AposStringLiteralContent10781 = new BitSet(new long[] {
            0xFFFFFFFFFFFFFFF2L, 0xFFFFFFFFFFFFFFFFL, 0xFFFFFFFFFFFFFFFFL, 0xFFFFFDFFFFFFFFFFL, 0xFFFFFFFFFFFFFEFFL,
            0x00000000001FFFFFL });
    public static final BitSet FOLLOW_L_ElementContentChar_in_p_ElementContentChar10839 = new BitSet(
            new long[] { 0x0000000000000002L });
    public static final BitSet FOLLOW_L_QuotAttrContentChar_in_p_QuotAttrContentChar10865 = new BitSet(
            new long[] { 0x0000000000000002L });
    public static final BitSet FOLLOW_L_AposAttrContentChar_in_p_AposAttrContentChar10915 = new BitSet(
            new long[] { 0x0000000000000002L });
    public static final BitSet FOLLOW_pg_QName_in_p_QName11001 = new BitSet(new long[] { 0x0000000000000002L });
    public static final BitSet FOLLOW_p_NCName_in_p_QName11013 = new BitSet(new long[] { 0x0000000000000002L });
    public static final BitSet FOLLOW_pg_QName_in_pg_FQName11074 = new BitSet(new long[] { 0x0000000000000002L });
    public static final BitSet FOLLOW_p_FNCName_in_pg_FQName11086 = new BitSet(new long[] { 0x0000000000000002L });
    public static final BitSet FOLLOW_p_NCName_in_pg_QName11130 = new BitSet(new long[] { 0x0000000000000000L,
            0x0000000000000000L, 0x0000000000000000L, 0x0200000000000000L });
    public static final BitSet FOLLOW_COLON_in_pg_QName11132 = new BitSet(new long[] { 0xFFFFFFFFFFFF0000L,
            0xFFFFFFFFFFFFFFFFL, 0xFFFFFFFFF7FFFFFFL, 0x000000000FFFFFFFL, 0x0000000000001000L, 0x0000000000100000L });
    public static final BitSet FOLLOW_p_NCName_in_pg_QName11136 = new BitSet(new long[] { 0x0000000000000002L });
    public static final BitSet FOLLOW_set_in_p_NCName0 = new BitSet(new long[] { 0x0000000000000002L });
    public static final BitSet FOLLOW_set_in_p_FNCName0 = new BitSet(new long[] { 0x0000000000000002L });
    public static final BitSet FOLLOW_p_InsertExpr_in_pg_UpdateExpr13127 = new BitSet(
            new long[] { 0x0000000000000002L });
    public static final BitSet FOLLOW_p_DeleteExpr_in_pg_UpdateExpr13139 = new BitSet(
            new long[] { 0x0000000000000002L });
    public static final BitSet FOLLOW_p_RenameExpr_in_pg_UpdateExpr13151 = new BitSet(
            new long[] { 0x0000000000000002L });
    public static final BitSet FOLLOW_p_ReplaceExpr_in_pg_UpdateExpr13163 = new BitSet(
            new long[] { 0x0000000000000002L });
    public static final BitSet FOLLOW_p_TransformExpr_in_pg_UpdateExpr13175 = new BitSet(
            new long[] { 0x0000000000000002L });
    public static final BitSet FOLLOW_DECLARE_in_pm_RevalidationDecl13203 = new BitSet(new long[] {
            0x0000000000000000L, 0x0000000000000000L, 0x0000000002000000L });
    public static final BitSet FOLLOW_REVALIDATION_in_pm_RevalidationDecl13207 = new BitSet(new long[] {
            0x0000000000000000L, 0x0000000400000008L, 0x0000000004000000L });
    public static final BitSet FOLLOW_STRICT_in_pm_RevalidationDecl13212 = new BitSet(new long[] { 0x0000000000000000L,
            0x0000000000000000L, 0x0000000000000000L, 0x2000000000000000L });
    public static final BitSet FOLLOW_LAX_in_pm_RevalidationDecl13218 = new BitSet(new long[] { 0x0000000000000000L,
            0x0000000000000000L, 0x0000000000000000L, 0x2000000000000000L });
    public static final BitSet FOLLOW_SKIP_in_pm_RevalidationDecl13224 = new BitSet(new long[] { 0x0000000000000000L,
            0x0000000000000000L, 0x0000000000000000L, 0x2000000000000000L });
    public static final BitSet FOLLOW_SEMICOLON_in_pm_RevalidationDecl13229 = new BitSet(
            new long[] { 0x0000000000000002L });
    public static final BitSet FOLLOW_AS_in_p_InsertExprTargetChoice13259 = new BitSet(new long[] {
            0x0000000000000000L, 0x0000000000000000L, 0x0000000000120000L });
    public static final BitSet FOLLOW_FIRST_in_p_InsertExprTargetChoice13264 = new BitSet(new long[] {
            0x0000000000000000L, 0x0000000000000000L, 0x0000000000080000L });
    public static final BitSet FOLLOW_LAST_in_p_InsertExprTargetChoice13270 = new BitSet(new long[] {
            0x0000000000000000L, 0x0000000000000000L, 0x0000000000080000L });
    public static final BitSet FOLLOW_INTO_in_p_InsertExprTargetChoice13277 = new BitSet(
            new long[] { 0x0000000000000002L });
    public static final BitSet FOLLOW_AFTER_in_p_InsertExprTargetChoice13294 = new BitSet(
            new long[] { 0x0000000000000002L });
    public static final BitSet FOLLOW_BEFORE_in_p_InsertExprTargetChoice13310 = new BitSet(
            new long[] { 0x0000000000000002L });
    public static final BitSet FOLLOW_INSERT_in_p_InsertExpr13340 = new BitSet(new long[] { 0x0000000000000000L,
            0x0000000000004000L, 0x0000000000400000L });
    public static final BitSet FOLLOW_NODE_in_p_InsertExpr13345 = new BitSet(new long[] { 0xFFFFFFFFFFFF0000L,
            0xFFFFFFFFFFFFFFFFL, 0xFFFFFFFFFFFFFFFFL, 0x01E0F001AFFFFFFFL, 0x0000000001F81320L, 0x0000000000100000L });
    public static final BitSet FOLLOW_NODES_in_p_InsertExpr13351 = new BitSet(new long[] { 0xFFFFFFFFFFFF0000L,
            0xFFFFFFFFFFFFFFFFL, 0xFFFFFFFFFFFFFFFFL, 0x01E0F001AFFFFFFFL, 0x0000000001F81320L, 0x0000000000100000L });
    public static final BitSet FOLLOW_p_SourceExpr_in_p_InsertExpr13354 = new BitSet(new long[] { 0x0000000000080000L,
            0x0000000000000000L, 0x0000000000086000L });
    public static final BitSet FOLLOW_p_InsertExprTargetChoice_in_p_InsertExpr13356 = new BitSet(new long[] {
            0xFFFFFFFFFFFF0000L, 0xFFFFFFFFFFFFFFFFL, 0xFFFFFFFFFFFFFFFFL, 0x01E0F001AFFFFFFFL, 0x0000000001F81320L,
            0x0000000000100000L });
    public static final BitSet FOLLOW_p_TargetExpr_in_p_InsertExpr13358 = new BitSet(new long[] { 0x0000000000000002L });
    public static final BitSet FOLLOW_DELETE_in_p_DeleteExpr13388 = new BitSet(new long[] { 0x0000000000000000L,
            0x0000000000004000L, 0x0000000000400000L });
    public static final BitSet FOLLOW_NODE_in_p_DeleteExpr13393 = new BitSet(new long[] { 0xFFFFFFFFFFFF0000L,
            0xFFFFFFFFFFFFFFFFL, 0xFFFFFFFFFFFFFFFFL, 0x01E0F001AFFFFFFFL, 0x0000000001F81320L, 0x0000000000100000L });
    public static final BitSet FOLLOW_NODES_in_p_DeleteExpr13399 = new BitSet(new long[] { 0xFFFFFFFFFFFF0000L,
            0xFFFFFFFFFFFFFFFFL, 0xFFFFFFFFFFFFFFFFL, 0x01E0F001AFFFFFFFL, 0x0000000001F81320L, 0x0000000000100000L });
    public static final BitSet FOLLOW_p_TargetExpr_in_p_DeleteExpr13402 = new BitSet(new long[] { 0x0000000000000002L });
    public static final BitSet FOLLOW_REPLACE_in_p_ReplaceExpr13432 = new BitSet(new long[] { 0x0000000000000000L,
            0x0000000000004000L, 0x0000000010000000L });
    public static final BitSet FOLLOW_VALUE_in_p_ReplaceExpr13437 = new BitSet(new long[] { 0x0000000000000000L,
            0x0000000000008000L });
    public static final BitSet FOLLOW_OF_in_p_ReplaceExpr13441 = new BitSet(new long[] { 0x0000000000000000L,
            0x0000000000004000L });
    public static final BitSet FOLLOW_NODE_in_p_ReplaceExpr13447 = new BitSet(new long[] { 0xFFFFFFFFFFFF0000L,
            0xFFFFFFFFFFFFFFFFL, 0xFFFFFFFFFFFFFFFFL, 0x01E0F001AFFFFFFFL, 0x0000000001F81320L, 0x0000000000100000L });
    public static final BitSet FOLLOW_p_ExprSingle_in_p_ReplaceExpr13449 = new BitSet(new long[] { 0x0000000000000000L,
            0x0000000000000000L, 0x0000000020000000L });
    public static final BitSet FOLLOW_WITH_in_p_ReplaceExpr13454 = new BitSet(new long[] { 0xFFFFFFFFFFFF0000L,
            0xFFFFFFFFFFFFFFFFL, 0xFFFFFFFFFFFFFFFFL, 0x01E0F001AFFFFFFFL, 0x0000000001F81320L, 0x0000000000100000L });
    public static final BitSet FOLLOW_p_ExprSingle_in_p_ReplaceExpr13456 = new BitSet(
            new long[] { 0x0000000000000002L });
    public static final BitSet FOLLOW_RENAME_in_p_RenameExpr13487 = new BitSet(new long[] { 0x0000000000000000L,
            0x0000000000004000L });
    public static final BitSet FOLLOW_NODE_in_p_RenameExpr13491 = new BitSet(new long[] { 0xFFFFFFFFFFFF0000L,
            0xFFFFFFFFFFFFFFFFL, 0xFFFFFFFFFFFFFFFFL, 0x01E0F001AFFFFFFFL, 0x0000000001F81320L, 0x0000000000100000L });
    public static final BitSet FOLLOW_p_TargetExpr_in_p_RenameExpr13493 = new BitSet(new long[] { 0x0000000000080000L });
    public static final BitSet FOLLOW_AS_in_p_RenameExpr13495 = new BitSet(new long[] { 0xFFFFFFFFFFFF0000L,
            0xFFFFFFFFFFFFFFFFL, 0xFFFFFFFFFFFFFFFFL, 0x01E0F001AFFFFFFFL, 0x0000000001F81320L, 0x0000000000100000L });
    public static final BitSet FOLLOW_p_NewNameExpr_in_p_RenameExpr13497 = new BitSet(
            new long[] { 0x0000000000000002L });
    public static final BitSet FOLLOW_p_ExprSingle_in_p_SourceExpr13525 = new BitSet(new long[] { 0x0000000000000002L });
    public static final BitSet FOLLOW_p_ExprSingle_in_p_TargetExpr13552 = new BitSet(new long[] { 0x0000000000000002L });
    public static final BitSet FOLLOW_p_ExprSingle_in_p_NewNameExpr13579 = new BitSet(
            new long[] { 0x0000000000000002L });
    public static final BitSet FOLLOW_COPY_in_p_TransformExpr13608 = new BitSet(new long[] { 0x0000000000000000L,
            0x0000000000000000L, 0x0000000000000000L, 0x0000000080000000L });
    public static final BitSet FOLLOW_DOLLAR_in_p_TransformExpr13610 = new BitSet(new long[] { 0xFFFFFFFFFFFF0000L,
            0xFFFFFFFFFFFFFFFFL, 0xFFFFFFFFF7FFFFFFL, 0x000000000FFFFFFFL, 0x0000000000001000L, 0x0000000000100000L });
    public static final BitSet FOLLOW_p_VarName_in_p_TransformExpr13612 = new BitSet(new long[] { 0x0000000000000000L,
            0x0000000000000000L, 0x0000000000000000L, 0x0000002000000000L });
    public static final BitSet FOLLOW_BIND_in_p_TransformExpr13614 = new BitSet(new long[] { 0xFFFFFFFFFFFF0000L,
            0xFFFFFFFFFFFFFFFFL, 0xFFFFFFFFFFFFFFFFL, 0x01E0F001AFFFFFFFL, 0x0000000001F81320L, 0x0000000000100000L });
    public static final BitSet FOLLOW_p_ExprSingle_in_p_TransformExpr13616 = new BitSet(new long[] {
            0x0000000000000000L, 0x0000000000000000L, 0x0000000000200000L, 0x0000040000000000L });
    public static final BitSet FOLLOW_COMMA_in_p_TransformExpr13620 = new BitSet(new long[] { 0x0000000000000000L,
            0x0000000000000000L, 0x0000000000000000L, 0x0000000080000000L });
    public static final BitSet FOLLOW_DOLLAR_in_p_TransformExpr13622 = new BitSet(new long[] { 0xFFFFFFFFFFFF0000L,
            0xFFFFFFFFFFFFFFFFL, 0xFFFFFFFFF7FFFFFFL, 0x000000000FFFFFFFL, 0x0000000000001000L, 0x0000000000100000L });
    public static final BitSet FOLLOW_p_VarName_in_p_TransformExpr13624 = new BitSet(new long[] { 0x0000000000000000L,
            0x0000000000000000L, 0x0000000000000000L, 0x0000002000000000L });
    public static final BitSet FOLLOW_BIND_in_p_TransformExpr13626 = new BitSet(new long[] { 0xFFFFFFFFFFFF0000L,
            0xFFFFFFFFFFFFFFFFL, 0xFFFFFFFFFFFFFFFFL, 0x01E0F001AFFFFFFFL, 0x0000000001F81320L, 0x0000000000100000L });
    public static final BitSet FOLLOW_p_ExprSingle_in_p_TransformExpr13628 = new BitSet(new long[] {
            0x0000000000000000L, 0x0000000000000000L, 0x0000000000200000L, 0x0000040000000000L });
    public static final BitSet FOLLOW_MODIFY_in_p_TransformExpr13635 = new BitSet(new long[] { 0xFFFFFFFFFFFF0000L,
            0xFFFFFFFFFFFFFFFFL, 0xFFFFFFFFFFFFFFFFL, 0x01E0F001AFFFFFFFL, 0x0000000001F81320L, 0x0000000000100000L });
    public static final BitSet FOLLOW_p_ExprSingle_in_p_TransformExpr13637 = new BitSet(new long[] {
            0x0000000000000000L, 0x0000000004000000L });
    public static final BitSet FOLLOW_RETURN_in_p_TransformExpr13642 = new BitSet(new long[] { 0xFFFFFFFFFFFF0000L,
            0xFFFFFFFFFFFFFFFFL, 0xFFFFFFFFFFFFFFFFL, 0x01E0F001AFFFFFFFL, 0x0000000001F81320L, 0x0000000000100000L });
    public static final BitSet FOLLOW_p_ExprSingle_in_p_TransformExpr13644 = new BitSet(
            new long[] { 0x0000000000000002L });
    public static final BitSet FOLLOW_DECLARE_in_pm_FTOptionDecl13682 = new BitSet(new long[] { 0x0000000000000000L,
            0x0000000000000000L, 0x0000010000000000L });
    public static final BitSet FOLLOW_FT_OPTION_in_pm_FTOptionDecl13686 = new BitSet(new long[] { 0x0000000000000000L,
            0x0000000000000000L, 0x0000000000000000L, 0x0000000000000004L });
    public static final BitSet FOLLOW_p_FTMatchOptions_in_pm_FTOptionDecl13688 = new BitSet(new long[] {
            0x0000000000000000L, 0x0000000000000000L, 0x0000000000000000L, 0x2000000000000000L });
    public static final BitSet FOLLOW_SEMICOLON_in_pm_FTOptionDecl13690 = new BitSet(new long[] { 0x0000000000000002L });
    public static final BitSet FOLLOW_SCORE_in_p_FTScoreVar13720 = new BitSet(new long[] { 0x0000000000000000L,
            0x0000000000000000L, 0x0000000000000000L, 0x0000000080000000L });
    public static final BitSet FOLLOW_DOLLAR_in_p_FTScoreVar13724 = new BitSet(new long[] { 0xFFFFFFFFFFFF0000L,
            0xFFFFFFFFFFFFFFFFL, 0xFFFFFFFFF7FFFFFFL, 0x000000000FFFFFFFL, 0x0000000000001000L, 0x0000000000100000L });
    public static final BitSet FOLLOW_p_VarName_in_p_FTScoreVar13726 = new BitSet(new long[] { 0x0000000000000002L });
    public static final BitSet FOLLOW_p_StringConcatExpr_in_p_FTContainsExpr13752 = new BitSet(new long[] {
            0x0000000000000002L, 0x0000000000000000L, 0x0000000100000000L });
    public static final BitSet FOLLOW_CONTAINS_in_p_FTContainsExpr13758 = new BitSet(new long[] { 0x0000000000000000L,
            0x0000001000000000L });
    public static final BitSet FOLLOW_TEXT_in_p_FTContainsExpr13762 = new BitSet(new long[] { 0x0000000000000000L,
            0x0000000000000000L, 0x0000040000000000L, 0x0000000120000000L, 0x0000000001C80300L });
    public static final BitSet FOLLOW_p_FTSelection_in_p_FTContainsExpr13766 = new BitSet(new long[] {
            0x0000000000000002L, 0x0000000000000000L, 0x0000000000000000L, 0x0000000000000020L });
    public static final BitSet FOLLOW_p_FTIgnoreOption_in_p_FTContainsExpr13768 = new BitSet(
            new long[] { 0x0000000000000002L });
    public static final BitSet FOLLOW_p_FTOr_in_p_FTSelection13798 = new BitSet(new long[] { 0x0000000000200002L,
            0x0000000000080000L, 0x0100003800000800L });
    public static final BitSet FOLLOW_p_FTPosFilter_in_p_FTSelection13800 = new BitSet(new long[] {
            0x0000000000200002L, 0x0000000000080000L, 0x0100003800000800L });
    public static final BitSet FOLLOW_WEIGHT_in_p_FTWeight13829 = new BitSet(new long[] { 0x0000000000000000L,
            0x0000000000000000L, 0x0000000000000000L, 0x0000000100000000L });
    public static final BitSet FOLLOW_LBRACKET_in_p_FTWeight13833 = new BitSet(new long[] { 0xFFFFFFFFFFFF0000L,
            0xFFFFFFFFFFFFFFFFL, 0xFFFFFFFFFFFFFFFFL, 0x01E0F001AFFFFFFFL, 0x0000000001F81320L, 0x0000000000100000L });
    public static final BitSet FOLLOW_p_Expr_in_p_FTWeight13835 = new BitSet(new long[] { 0x0000000000000000L,
            0x0000000000000000L, 0x0000000000000000L, 0x0000000200000000L });
    public static final BitSet FOLLOW_RBRACKET_in_p_FTWeight13838 = new BitSet(new long[] { 0x0000000000000002L });
    public static final BitSet FOLLOW_p_FTAnd_in_p_FTOr13864 = new BitSet(new long[] { 0x0000000000000002L,
            0x0000000000000000L, 0x0000080000000000L });
    public static final BitSet FOLLOW_FTOR_in_p_FTOr13870 = new BitSet(new long[] { 0x0000000000000000L,
            0x0000000000000000L, 0x0000040000000000L, 0x0000000120000000L, 0x0000000001C80300L });
    public static final BitSet FOLLOW_p_FTAnd_in_p_FTOr13874 = new BitSet(new long[] { 0x0000000000000002L,
            0x0000000000000000L, 0x0000080000000000L });
    public static final BitSet FOLLOW_p_FTMildNot_in_p_FTAnd13903 = new BitSet(new long[] { 0x0000000000000002L,
            0x0000000000000000L, 0x0000020000000000L });
    public static final BitSet FOLLOW_FTAND_in_p_FTAnd13909 = new BitSet(new long[] { 0x0000000000000000L,
            0x0000000000000000L, 0x0000040000000000L, 0x0000000120000000L, 0x0000000001C80300L });
    public static final BitSet FOLLOW_p_FTMildNot_in_p_FTAnd13913 = new BitSet(new long[] { 0x0000000000000002L,
            0x0000000000000000L, 0x0000020000000000L });
    public static final BitSet FOLLOW_p_FTUnaryNot_in_p_FTMildNot13942 = new BitSet(new long[] { 0x0000000000000002L,
            0x0000000000000000L, 0x0004000000000000L });
    public static final BitSet FOLLOW_NOT_in_p_FTMildNot13948 = new BitSet(new long[] { 0x2000000000000000L });
    public static final BitSet FOLLOW_IN_in_p_FTMildNot13952 = new BitSet(new long[] { 0x0000000000000000L,
            0x0000000000000000L, 0x0000040000000000L, 0x0000000120000000L, 0x0000000001C80300L });
    public static final BitSet FOLLOW_p_FTUnaryNot_in_p_FTMildNot13956 = new BitSet(new long[] { 0x0000000000000002L,
            0x0000000000000000L, 0x0004000000000000L });
    public static final BitSet FOLLOW_FTNOT_in_p_FTUnaryNot13989 = new BitSet(new long[] { 0x0000000000000000L,
            0x0000000000000000L, 0x0000040000000000L, 0x0000000120000000L, 0x0000000001C80300L });
    public static final BitSet FOLLOW_p_FTPrimaryWithOptions_in_p_FTUnaryNot13996 = new BitSet(
            new long[] { 0x0000000000000002L });
    public static final BitSet FOLLOW_p_FTPrimary_in_p_FTPrimaryWithOptions14022 = new BitSet(new long[] {
            0x0000000000000002L, 0x0000000000000000L, 0x0000000000000000L, 0x000000000000000CL });
    public static final BitSet FOLLOW_p_FTMatchOptions_in_p_FTPrimaryWithOptions14024 = new BitSet(new long[] {
            0x0000000000000002L, 0x0000000000000000L, 0x0000000000000000L, 0x0000000000000008L });
    public static final BitSet FOLLOW_p_FTWeight_in_p_FTPrimaryWithOptions14027 = new BitSet(
            new long[] { 0x0000000000000002L });
    public static final BitSet FOLLOW_p_FTWords_in_p_FTPrimary14058 = new BitSet(new long[] { 0x0000000000000002L,
            0x0000000000000000L, 0x0008000000000000L });
    public static final BitSet FOLLOW_p_FTTimes_in_p_FTPrimary14060 = new BitSet(new long[] { 0x0000000000000002L });
    public static final BitSet FOLLOW_LPAREN_in_p_FTPrimary14075 = new BitSet(new long[] { 0x0000000000000000L,
            0x0000000000000000L, 0x0000040000000000L, 0x0000000120000000L, 0x0000000001C80300L });
    public static final BitSet FOLLOW_p_FTSelection_in_p_FTPrimary14077 = new BitSet(new long[] { 0x0000000000000000L,
            0x0000000000000000L, 0x0000000000000000L, 0x0000000040000000L });
    public static final BitSet FOLLOW_RPAREN_in_p_FTPrimary14079 = new BitSet(new long[] { 0x0000000000000002L });
    public static final BitSet FOLLOW_p_FTExtensionSelection_in_p_FTPrimary14092 = new BitSet(
            new long[] { 0x0000000000000002L });
    public static final BitSet FOLLOW_p_FTWordsValue_in_p_FTWords14118 = new BitSet(new long[] { 0x0000000000000002L,
            0x0000000000000000L, 0x00400000C0000000L });
    public static final BitSet FOLLOW_p_FTAnyallOption_in_p_FTWords14120 = new BitSet(
            new long[] { 0x0000000000000002L });
    public static final BitSet FOLLOW_p_StringLiteral_in_p_FTWordsValue14147 = new BitSet(
            new long[] { 0x0000000000000002L });
    public static final BitSet FOLLOW_LBRACKET_in_p_FTWordsValue14160 = new BitSet(new long[] { 0xFFFFFFFFFFFF0000L,
            0xFFFFFFFFFFFFFFFFL, 0xFFFFFFFFFFFFFFFFL, 0x01E0F001AFFFFFFFL, 0x0000000001F81320L, 0x0000000000100000L });
    public static final BitSet FOLLOW_p_Expr_in_p_FTWordsValue14162 = new BitSet(new long[] { 0x0000000000000000L,
            0x0000000000000000L, 0x0000000000000000L, 0x0000000200000000L });
    public static final BitSet FOLLOW_RBRACKET_in_p_FTWordsValue14165 = new BitSet(new long[] { 0x0000000000000002L });
    public static final BitSet FOLLOW_L_Pragma_in_p_FTExtensionSelection14192 = new BitSet(new long[] {
            0x0000000000000000L, 0x0000000000000000L, 0x0000000000000000L, 0x0000000100000000L, 0x0000000000080000L });
    public static final BitSet FOLLOW_LBRACKET_in_p_FTExtensionSelection14195 = new BitSet(new long[] {
            0x0000000000000000L, 0x0000000000000000L, 0x0000040000000000L, 0x0000000320000000L, 0x0000000001C80300L });
    public static final BitSet FOLLOW_p_FTSelection_in_p_FTExtensionSelection14197 = new BitSet(new long[] {
            0x0000000000000000L, 0x0000000000000000L, 0x0000000000000000L, 0x0000000200000000L });
    public static final BitSet FOLLOW_RBRACKET_in_p_FTExtensionSelection14200 = new BitSet(
            new long[] { 0x0000000000000002L });
    public static final BitSet FOLLOW_ANY_in_p_FTAnyallOption14231 = new BitSet(new long[] { 0x0000000000000002L,
            0x0000000000000000L, 0x0000000000000000L, 0x0000000000000040L });
    public static final BitSet FOLLOW_WORD_in_p_FTAnyallOption14235 = new BitSet(new long[] { 0x0000000000000002L });
    public static final BitSet FOLLOW_ALL_in_p_FTAnyallOption14244 = new BitSet(new long[] { 0x0000000000000002L,
            0x0000000000000000L, 0x0000000000000000L, 0x0000000000000080L });
    public static final BitSet FOLLOW_WORDS_in_p_FTAnyallOption14246 = new BitSet(new long[] { 0x0000000000000002L });
    public static final BitSet FOLLOW_PHRASE_in_p_FTAnyallOption14254 = new BitSet(new long[] { 0x0000000000000002L });
    public static final BitSet FOLLOW_OCCURS_in_p_FTTimes14286 = new BitSet(new long[] { 0x0000000000200000L,
            0x0000000000000000L, 0x000000C000000000L });
    public static final BitSet FOLLOW_p_FTRange_in_p_FTTimes14288 = new BitSet(new long[] { 0x0000000000000000L,
            0x0000000000000000L, 0x0000000000000000L, 0x0000000000000001L });
    public static final BitSet FOLLOW_TIMES_in_p_FTTimes14292 = new BitSet(new long[] { 0x0000000000000002L });
    public static final BitSet FOLLOW_EXACTLY_in_p_FTRange14325 = new BitSet(new long[] { 0xFFFFFFFFFFFF0000L,
            0xFFFFFFFFFFFFFFFFL, 0xFFFFFFFFFFFFFFFFL, 0x01E0F001AFFFFFFFL, 0x0000000001F81320L, 0x0000000000100000L });
    public static final BitSet FOLLOW_p_AdditiveExpr_in_p_FTRange14327 = new BitSet(new long[] { 0x0000000000000002L });
    public static final BitSet FOLLOW_AT_in_p_FTRange14345 = new BitSet(new long[] { 0x0000000000000000L,
            0x0000000000000020L });
    public static final BitSet FOLLOW_LEAST_in_p_FTRange14349 = new BitSet(new long[] { 0xFFFFFFFFFFFF0000L,
            0xFFFFFFFFFFFFFFFFL, 0xFFFFFFFFFFFFFFFFL, 0x01E0F001AFFFFFFFL, 0x0000000001F81320L, 0x0000000000100000L });
    public static final BitSet FOLLOW_p_AdditiveExpr_in_p_FTRange14351 = new BitSet(new long[] { 0x0000000000000002L });
    public static final BitSet FOLLOW_AT_in_p_FTRange14369 = new BitSet(new long[] { 0x0000000000000000L,
            0x0000000000000000L, 0x0001000000000000L });
    public static final BitSet FOLLOW_MOST_in_p_FTRange14373 = new BitSet(new long[] { 0xFFFFFFFFFFFF0000L,
            0xFFFFFFFFFFFFFFFFL, 0xFFFFFFFFFFFFFFFFL, 0x01E0F001AFFFFFFFL, 0x0000000001F81320L, 0x0000000000100000L });
    public static final BitSet FOLLOW_p_AdditiveExpr_in_p_FTRange14375 = new BitSet(new long[] { 0x0000000000000002L });
    public static final BitSet FOLLOW_FROM_in_p_FTRange14393 = new BitSet(new long[] { 0xFFFFFFFFFFFF0000L,
            0xFFFFFFFFFFFFFFFFL, 0xFFFFFFFFFFFFFFFFL, 0x01E0F001AFFFFFFFL, 0x0000000001F81320L, 0x0000000000100000L });
    public static final BitSet FOLLOW_p_AdditiveExpr_in_p_FTRange14395 = new BitSet(new long[] { 0x0000000000000000L,
            0x0000004000000000L });
    public static final BitSet FOLLOW_TO_in_p_FTRange14399 = new BitSet(new long[] { 0xFFFFFFFFFFFF0000L,
            0xFFFFFFFFFFFFFFFFL, 0xFFFFFFFFFFFFFFFFL, 0x01E0F001AFFFFFFFL, 0x0000000001F81320L, 0x0000000000100000L });
    public static final BitSet FOLLOW_p_AdditiveExpr_in_p_FTRange14401 = new BitSet(new long[] { 0x0000000000000002L });
    public static final BitSet FOLLOW_p_FTOrder_in_p_FTPosFilter14432 = new BitSet(new long[] { 0x0000000000000002L });
    public static final BitSet FOLLOW_p_FTWindow_in_p_FTPosFilter14436 = new BitSet(new long[] { 0x0000000000000002L });
    public static final BitSet FOLLOW_p_FTDistance_in_p_FTPosFilter14440 = new BitSet(
            new long[] { 0x0000000000000002L });
    public static final BitSet FOLLOW_p_FTScope_in_p_FTPosFilter14444 = new BitSet(new long[] { 0x0000000000000002L });
    public static final BitSet FOLLOW_p_FTContent_in_p_FTPosFilter14448 = new BitSet(new long[] { 0x0000000000000002L });
    public static final BitSet FOLLOW_ORDERED_in_p_FTOrder14476 = new BitSet(new long[] { 0x0000000000000002L });
    public static final BitSet FOLLOW_WINDOW_in_p_FTWindow14506 = new BitSet(new long[] { 0xFFFFFFFFFFFF0000L,
            0xFFFFFFFFFFFFFFFFL, 0xFFFFFFFFFFFFFFFFL, 0x01E0F001AFFFFFFFL, 0x0000000001F81320L, 0x0000000000100000L });
    public static final BitSet FOLLOW_p_AdditiveExpr_in_p_FTWindow14510 = new BitSet(new long[] { 0x0000000000000000L,
            0x0000000000000000L, 0x1020000000000000L, 0x0000000000000080L });
    public static final BitSet FOLLOW_p_FTUnit_in_p_FTWindow14512 = new BitSet(new long[] { 0x0000000000000002L });
    public static final BitSet FOLLOW_DISTANCE_in_p_FTDistance14540 = new BitSet(new long[] { 0x0000000000200000L,
            0x0000000000000000L, 0x000000C000000000L });
    public static final BitSet FOLLOW_p_FTRange_in_p_FTDistance14544 = new BitSet(new long[] { 0x0000000000000000L,
            0x0000000000000000L, 0x1020000000000000L, 0x0000000000000080L });
    public static final BitSet FOLLOW_p_FTUnit_in_p_FTDistance14546 = new BitSet(new long[] { 0x0000000000000002L });
    public static final BitSet FOLLOW_WORDS_in_p_FTUnit14576 = new BitSet(new long[] { 0x0000000000000002L });
    public static final BitSet FOLLOW_SENTENCES_in_p_FTUnit14582 = new BitSet(new long[] { 0x0000000000000002L });
    public static final BitSet FOLLOW_PARAGRAPHS_in_p_FTUnit14588 = new BitSet(new long[] { 0x0000000000000002L });
    public static final BitSet FOLLOW_SAME_in_p_FTScope14621 = new BitSet(new long[] { 0x0000000000000000L,
            0x0000000000000000L, 0x0810000000000000L });
    public static final BitSet FOLLOW_DIFFERENT_in_p_FTScope14627 = new BitSet(new long[] { 0x0000000000000000L,
            0x0000000000000000L, 0x0810000000000000L });
    public static final BitSet FOLLOW_p_FTBigUnit_in_p_FTScope14632 = new BitSet(new long[] { 0x0000000000000002L });
    public static final BitSet FOLLOW_SENTENCE_in_p_FTBigUnit14662 = new BitSet(new long[] { 0x0000000000000002L });
    public static final BitSet FOLLOW_PARAGRAPH_in_p_FTBigUnit14668 = new BitSet(new long[] { 0x0000000000000002L });
    public static final BitSet FOLLOW_AT_in_p_FTContent14703 = new BitSet(new long[] { 0x0000000000000000L,
            0x0000000000000000L, 0x0000000000000020L });
    public static final BitSet FOLLOW_START_in_p_FTContent14707 = new BitSet(new long[] { 0x0000000000000002L });
    public static final BitSet FOLLOW_AT_in_p_FTContent14715 = new BitSet(new long[] { 0x0000000000000000L,
            0x0080000000000000L });
    public static final BitSet FOLLOW_END_in_p_FTContent14719 = new BitSet(new long[] { 0x0000000000000002L });
    public static final BitSet FOLLOW_ENTIRE_in_p_FTContent14727 = new BitSet(new long[] { 0x0000000000000000L,
            0x0000000000000000L, 0x0000000200000000L });
    public static final BitSet FOLLOW_CONTENT_in_p_FTContent14731 = new BitSet(new long[] { 0x0000000000000002L });
    public static final BitSet FOLLOW_USING_in_p_FTMatchOptions14765 = new BitSet(new long[] { 0x0000000004000000L,
            0x0000000000010000L, 0xE002A00400000000L, 0x0000000000000012L });
    public static final BitSet FOLLOW_p_FTMatchOption_in_p_FTMatchOptions14769 = new BitSet(new long[] {
            0x0000000000000002L, 0x0000000000000000L, 0x0000000000000000L, 0x0000000000000004L });
    public static final BitSet FOLLOW_p_FTLanguageOption_in_p_FTMatchOption14797 = new BitSet(
            new long[] { 0x0000000000000002L });
    public static final BitSet FOLLOW_p_FTWildCardOption_in_p_FTMatchOption14809 = new BitSet(
            new long[] { 0x0000000000000002L });
    public static final BitSet FOLLOW_p_FTThesaurusOption_in_p_FTMatchOption14821 = new BitSet(
            new long[] { 0x0000000000000002L });
    public static final BitSet FOLLOW_p_FTStemOption_in_p_FTMatchOption14833 = new BitSet(
            new long[] { 0x0000000000000002L });
    public static final BitSet FOLLOW_p_FTCaseOption_in_p_FTMatchOption14845 = new BitSet(
            new long[] { 0x0000000000000002L });
    public static final BitSet FOLLOW_p_FTDiacriticsOption_in_p_FTMatchOption14857 = new BitSet(
            new long[] { 0x0000000000000002L });
    public static final BitSet FOLLOW_p_FTStopWordOption_in_p_FTMatchOption14869 = new BitSet(
            new long[] { 0x0000000000000002L });
    public static final BitSet FOLLOW_p_FTExtensionOption_in_p_FTMatchOption14881 = new BitSet(
            new long[] { 0x0000000000000002L });
    public static final BitSet FOLLOW_CASE_in_p_FTCaseOption14912 = new BitSet(new long[] { 0x0000000000000000L,
            0x0000000000000000L, 0x0000100000000000L });
    public static final BitSet FOLLOW_INSENSITIVE_in_p_FTCaseOption14916 = new BitSet(
            new long[] { 0x0000000000000002L });
    public static final BitSet FOLLOW_CASE_in_p_FTCaseOption14934 = new BitSet(new long[] { 0x0000000000000000L,
            0x0000000000000000L, 0x0400000000000000L });
    public static final BitSet FOLLOW_SENSITIVE_in_p_FTCaseOption14938 = new BitSet(new long[] { 0x0000000000000002L });
    public static final BitSet FOLLOW_LOWERCASE_in_p_FTCaseOption14955 = new BitSet(new long[] { 0x0000000000000002L });
    public static final BitSet FOLLOW_UPPERCASE_in_p_FTCaseOption14971 = new BitSet(new long[] { 0x0000000000000002L });
    public static final BitSet FOLLOW_DIACRITICS_in_p_FTDiacriticsOption15006 = new BitSet(new long[] {
            0x0000000000000000L, 0x0000000000000000L, 0x0000100000000000L });
    public static final BitSet FOLLOW_INSENSITIVE_in_p_FTDiacriticsOption15010 = new BitSet(
            new long[] { 0x0000000000000002L });
    public static final BitSet FOLLOW_DIACRITICS_in_p_FTDiacriticsOption15028 = new BitSet(new long[] {
            0x0000000000000000L, 0x0000000000000000L, 0x0400000000000000L });
    public static final BitSet FOLLOW_SENSITIVE_in_p_FTDiacriticsOption15032 = new BitSet(
            new long[] { 0x0000000000000002L });
    public static final BitSet FOLLOW_STEMMING_in_p_FTStemOption15067 = new BitSet(new long[] { 0x0000000000000002L });
    public static final BitSet FOLLOW_NO_in_p_FTStemOption15074 = new BitSet(new long[] { 0x0000000000000000L,
            0x0000000000000000L, 0x2000000000000000L });
    public static final BitSet FOLLOW_STEMMING_in_p_FTStemOption15078 = new BitSet(new long[] { 0x0000000000000002L });
    public static final BitSet FOLLOW_THESAURUS_in_p_FTThesaurusOption15114 = new BitSet(
            new long[] { 0x0000000800200000L });
    public static final BitSet FOLLOW_p_FTThesaurusID_in_p_FTThesaurusOption15117 = new BitSet(
            new long[] { 0x0000000000000002L });
    public static final BitSet FOLLOW_DEFAULT_in_p_FTThesaurusOption15123 = new BitSet(
            new long[] { 0x0000000000000002L });
    public static final BitSet FOLLOW_THESAURUS_in_p_FTThesaurusOption15142 = new BitSet(new long[] {
            0x0000000000000000L, 0x0000000000000000L, 0x0000000000000000L, 0x0000000020000000L });
    public static final BitSet FOLLOW_LPAREN_in_p_FTThesaurusOption15144 = new BitSet(
            new long[] { 0x0000000800200000L });
    public static final BitSet FOLLOW_p_FTThesaurusID_in_p_FTThesaurusOption15147 = new BitSet(new long[] {
            0x0000000000000000L, 0x0000000000000000L, 0x0000000000000000L, 0x0000040040000000L });
    public static final BitSet FOLLOW_DEFAULT_in_p_FTThesaurusOption15153 = new BitSet(new long[] {
            0x0000000000000000L, 0x0000000000000000L, 0x0000000000000000L, 0x0000040040000000L });
    public static final BitSet FOLLOW_COMMA_in_p_FTThesaurusOption15157 = new BitSet(new long[] { 0x0000000000200000L });
    public static final BitSet FOLLOW_p_FTThesaurusID_in_p_FTThesaurusOption15159 = new BitSet(new long[] {
            0x0000000000000000L, 0x0000000000000000L, 0x0000000000000000L, 0x0000040040000000L });
    public static final BitSet FOLLOW_RPAREN_in_p_FTThesaurusOption15163 = new BitSet(
            new long[] { 0x0000000000000002L });
    public static final BitSet FOLLOW_NO_in_p_FTThesaurusOption15181 = new BitSet(new long[] { 0x0000000000000000L,
            0x0000000000000000L, 0x8000000000000000L });
    public static final BitSet FOLLOW_THESAURUS_in_p_FTThesaurusOption15185 = new BitSet(
            new long[] { 0x0000000000000002L });
    public static final BitSet FOLLOW_AT_in_p_FTThesaurusID15218 = new BitSet(new long[] { 0x0000000000000000L,
            0x0000000000000000L, 0x0000000000000000L, 0x0000000000000000L, 0x0000000001C00300L });
    public static final BitSet FOLLOW_p_StringLiteral_in_p_FTThesaurusID15220 = new BitSet(new long[] {
            0x0000000000200002L, 0x0000000000000000L, 0x008000C000000000L });
    public static final BitSet FOLLOW_RELATIONSHIP_in_p_FTThesaurusID15225 = new BitSet(new long[] {
            0x0000000000000000L, 0x0000000000000000L, 0x0000000000000000L, 0x0000000000000000L, 0x0000000001C00300L });
    public static final BitSet FOLLOW_p_StringLiteral_in_p_FTThesaurusID15227 = new BitSet(new long[] {
            0x0000000000200002L, 0x0000000000000000L, 0x000000C000000000L });
    public static final BitSet FOLLOW_p_FTLiteralRange_in_p_FTThesaurusID15232 = new BitSet(new long[] {
            0x0000000000000000L, 0x0000000000000000L, 0x0000400000000000L });
    public static final BitSet FOLLOW_LEVELS_in_p_FTThesaurusID15236 = new BitSet(new long[] { 0x0000000000000002L });
    public static final BitSet FOLLOW_EXACTLY_in_p_FTLiteralRange15271 = new BitSet(new long[] { 0x0000000000000000L,
            0x0000000000000000L, 0x0000000000000000L, 0x0000000000000000L, 0x0000000000400000L });
    public static final BitSet FOLLOW_L_IntegerLiteral_in_p_FTLiteralRange15273 = new BitSet(
            new long[] { 0x0000000000000002L });
    public static final BitSet FOLLOW_AT_in_p_FTLiteralRange15291 = new BitSet(new long[] { 0x0000000000000000L,
            0x0000000000000020L });
    public static final BitSet FOLLOW_LEAST_in_p_FTLiteralRange15295 = new BitSet(new long[] { 0x0000000000000000L,
            0x0000000000000000L, 0x0000000000000000L, 0x0000000000000000L, 0x0000000000400000L });
    public static final BitSet FOLLOW_L_IntegerLiteral_in_p_FTLiteralRange15297 = new BitSet(
            new long[] { 0x0000000000000002L });
    public static final BitSet FOLLOW_AT_in_p_FTLiteralRange15315 = new BitSet(new long[] { 0x0000000000000000L,
            0x0000000000000000L, 0x0001000000000000L });
    public static final BitSet FOLLOW_MOST_in_p_FTLiteralRange15319 = new BitSet(new long[] { 0x0000000000000000L,
            0x0000000000000000L, 0x0000000000000000L, 0x0000000000000000L, 0x0000000000400000L });
    public static final BitSet FOLLOW_L_IntegerLiteral_in_p_FTLiteralRange15321 = new BitSet(
            new long[] { 0x0000000000000002L });
    public static final BitSet FOLLOW_FROM_in_p_FTLiteralRange15339 = new BitSet(new long[] { 0x0000000000000000L,
            0x0000000000000000L, 0x0000000000000000L, 0x0000000000000000L, 0x0000000000400000L });
    public static final BitSet FOLLOW_L_IntegerLiteral_in_p_FTLiteralRange15341 = new BitSet(new long[] {
            0x0000000000000000L, 0x0000004000000000L });
    public static final BitSet FOLLOW_TO_in_p_FTLiteralRange15343 = new BitSet(new long[] { 0x0000000000000000L,
            0x0000000000000000L, 0x0000000000000000L, 0x0000000000000000L, 0x0000000000400000L });
    public static final BitSet FOLLOW_L_IntegerLiteral_in_p_FTLiteralRange15345 = new BitSet(
            new long[] { 0x0000000000000002L });
    public static final BitSet FOLLOW_STOP_in_p_FTStopWordOption15381 = new BitSet(new long[] { 0x0000000000000000L,
            0x0000000000000000L, 0x0000000000000000L, 0x0000000000000080L });
    public static final BitSet FOLLOW_WORDS_in_p_FTStopWordOption15385 = new BitSet(new long[] { 0x0000000000200000L,
            0x0000000000000000L, 0x0000000000000000L, 0x0000000020000000L });
    public static final BitSet FOLLOW_p_FTStopWords_in_p_FTStopWordOption15387 = new BitSet(new long[] {
            0x0002000000000002L, 0x0000020000000000L });
    public static final BitSet FOLLOW_p_FTStopWordsInclExcl_in_p_FTStopWordOption15389 = new BitSet(new long[] {
            0x0002000000000002L, 0x0000020000000000L });
    public static final BitSet FOLLOW_STOP_in_p_FTStopWordOption15408 = new BitSet(new long[] { 0x0000000000000000L,
            0x0000000000000000L, 0x0000000000000000L, 0x0000000000000080L });
    public static final BitSet FOLLOW_WORDS_in_p_FTStopWordOption15412 = new BitSet(new long[] { 0x0000000800000000L });
    public static final BitSet FOLLOW_DEFAULT_in_p_FTStopWordOption15416 = new BitSet(new long[] { 0x0002000000000002L,
            0x0000020000000000L });
    public static final BitSet FOLLOW_p_FTStopWordsInclExcl_in_p_FTStopWordOption15418 = new BitSet(new long[] {
            0x0002000000000002L, 0x0000020000000000L });
    public static final BitSet FOLLOW_NO_in_p_FTStopWordOption15437 = new BitSet(new long[] { 0x0000000000000000L,
            0x0000000000000000L, 0x4000000000000000L });
    public static final BitSet FOLLOW_STOP_in_p_FTStopWordOption15441 = new BitSet(new long[] { 0x0000000000000000L,
            0x0000000000000000L, 0x0000000000000000L, 0x0000000000000080L });
    public static final BitSet FOLLOW_WORDS_in_p_FTStopWordOption15445 = new BitSet(new long[] { 0x0000000000000002L });
    public static final BitSet FOLLOW_AT_in_p_FTStopWords15479 = new BitSet(new long[] { 0x0000000000000000L,
            0x0000000000000000L, 0x0000000000000000L, 0x0000000000000000L, 0x0000000001C00300L });
    public static final BitSet FOLLOW_p_StringLiteral_in_p_FTStopWords15483 = new BitSet(
            new long[] { 0x0000000000000002L });
    public static final BitSet FOLLOW_LPAREN_in_p_FTStopWords15497 = new BitSet(new long[] { 0x0000000000000000L,
            0x0000000000000000L, 0x0000000000000000L, 0x0000000000000000L, 0x0000000001C00300L });
    public static final BitSet FOLLOW_p_StringLiteral_in_p_FTStopWords15499 = new BitSet(new long[] {
            0x0000000000000000L, 0x0000000000000000L, 0x0000000000000000L, 0x0000040040000000L });
    public static final BitSet FOLLOW_COMMA_in_p_FTStopWords15502 = new BitSet(new long[] { 0x0000000000000000L,
            0x0000000000000000L, 0x0000000000000000L, 0x0000000000000000L, 0x0000000001C00300L });
    public static final BitSet FOLLOW_p_StringLiteral_in_p_FTStopWords15504 = new BitSet(new long[] {
            0x0000000000000000L, 0x0000000000000000L, 0x0000000000000000L, 0x0000040040000000L });
    public static final BitSet FOLLOW_RPAREN_in_p_FTStopWords15508 = new BitSet(new long[] { 0x0000000000000002L });
    public static final BitSet FOLLOW_UNION_in_p_FTStopWordsInclExcl15540 = new BitSet(new long[] {
            0x0000000000200000L, 0x0000000000000000L, 0x0000000000000000L, 0x0000000020000000L });
    public static final BitSet FOLLOW_EXCEPT_in_p_FTStopWordsInclExcl15546 = new BitSet(new long[] {
            0x0000000000200000L, 0x0000000000000000L, 0x0000000000000000L, 0x0000000020000000L });
    public static final BitSet FOLLOW_p_FTStopWords_in_p_FTStopWordsInclExcl15549 = new BitSet(
            new long[] { 0x0000000000000002L });
    public static final BitSet FOLLOW_LANGUAGE_in_p_FTLanguageOption15581 = new BitSet(new long[] {
            0x0000000000000000L, 0x0000000000000000L, 0x0000000000000000L, 0x0000000000000000L, 0x0000000001C00300L });
    public static final BitSet FOLLOW_p_StringLiteral_in_p_FTLanguageOption15585 = new BitSet(
            new long[] { 0x0000000000000002L });
    public static final BitSet FOLLOW_WILDCARDS_in_p_FTWildCardOption15615 = new BitSet(
            new long[] { 0x0000000000000002L });
    public static final BitSet FOLLOW_NO_in_p_FTWildCardOption15622 = new BitSet(new long[] { 0x0000000000000000L,
            0x0000000000000000L, 0x0000000000000000L, 0x0000000000000010L });
    public static final BitSet FOLLOW_WILDCARDS_in_p_FTWildCardOption15626 = new BitSet(
            new long[] { 0x0000000000000002L });
    public static final BitSet FOLLOW_OPTION_in_p_FTExtensionOption15659 = new BitSet(new long[] { 0xFFFFFFFFFFFF0000L,
            0xFFFFFFFFFFFFFFFFL, 0xFFFFFFFFF7FFFFFFL, 0x000000000FFFFFFFL, 0x0000000000001000L, 0x0000000000100000L });
    public static final BitSet FOLLOW_p_QName_in_p_FTExtensionOption15663 = new BitSet(new long[] {
            0x0000000000000000L, 0x0000000000000000L, 0x0000000000000000L, 0x0000000000000000L, 0x0000000001C00300L });
    public static final BitSet FOLLOW_p_StringLiteral_in_p_FTExtensionOption15665 = new BitSet(
            new long[] { 0x0000000000000002L });
    public static final BitSet FOLLOW_WITHOUT_in_p_FTIgnoreOption15693 = new BitSet(new long[] { 0x0000000000000000L,
            0x0000000000000000L, 0x0000000200000000L });
    public static final BitSet FOLLOW_CONTENT_in_p_FTIgnoreOption15697 = new BitSet(new long[] { 0xFFFFFFFFFFFF0000L,
            0xFFFFFFFFFFFFFFFFL, 0xFFFFFFFFFFFFFFFFL, 0x01E0F001AFFFFFFFL, 0x0000000001F81320L, 0x0000000000100000L });
    public static final BitSet FOLLOW_p_UnionExpr_in_p_FTIgnoreOption15701 = new BitSet(
            new long[] { 0x0000000000000002L });
    public static final BitSet FOLLOW_p_StatementsAndOptionalExpr_in_p_Program15733 = new BitSet(
            new long[] { 0x0000000000000002L });
    public static final BitSet FOLLOW_p_Hybrid_in_p_Statements15760 = new BitSet(new long[] { 0xFFFFFFFFFFFF0002L,
            0xFFFFFFFFFFFFFFFFL, 0xFFFFFFFFFFFFFFFFL, 0x01E0F081AFFFFFFFL, 0x0000000001F81320L, 0x0000000000100000L });
    public static final BitSet FOLLOW_p_Statements_in_p_StatementsAndExpr15788 = new BitSet(
            new long[] { 0x0000000000000002L });
    public static final BitSet FOLLOW_p_Statements_in_p_StatementsAndOptionalExpr15815 = new BitSet(
            new long[] { 0x0000000000000002L });
    public static final BitSet FOLLOW_p_HybridExprSingle_in_p_Hybrid15842 = new BitSet(
            new long[] { 0x0000000000000002L });
    public static final BitSet FOLLOW_p_Statement_in_p_Hybrid15855 = new BitSet(new long[] { 0x0000000000000002L });
    public static final BitSet FOLLOW_p_AssignStatement_in_p_Statement15886 = new BitSet(
            new long[] { 0x0000000000000002L });
    public static final BitSet FOLLOW_p_BreakStatement_in_p_Statement15898 = new BitSet(
            new long[] { 0x0000000000000002L });
    public static final BitSet FOLLOW_p_ContinueStatement_in_p_Statement15910 = new BitSet(
            new long[] { 0x0000000000000002L });
    public static final BitSet FOLLOW_p_ExitStatement_in_p_Statement15922 = new BitSet(
            new long[] { 0x0000000000000002L });
    public static final BitSet FOLLOW_p_VarDeclStatement_in_p_Statement15934 = new BitSet(
            new long[] { 0x0000000000000002L });
    public static final BitSet FOLLOW_p_WhileStatement_in_p_Statement15946 = new BitSet(
            new long[] { 0x0000000000000002L });
    public static final BitSet FOLLOW_p_Expr_in_p_HybridExprSingle15973 = new BitSet(new long[] { 0x0000000000000000L,
            0x0000000000000000L, 0x0000000000000000L, 0x2000000000000000L });
    public static final BitSet FOLLOW_SEMICOLON_in_p_HybridExprSingle15988 = new BitSet(
            new long[] { 0x0000000000000002L });
    public static final BitSet FOLLOW_p_ExprSimple_in_p_ApplyStatement16038 = new BitSet(new long[] {
            0x0000000000000000L, 0x0000000000000000L, 0x0000000000000000L, 0x2000000000000000L });
    public static final BitSet FOLLOW_SEMICOLON_in_p_ApplyStatement16040 = new BitSet(
            new long[] { 0x0000000000000002L });
    public static final BitSet FOLLOW_DOLLAR_in_p_AssignStatement16066 = new BitSet(new long[] { 0xFFFFFFFFFFFF0000L,
            0xFFFFFFFFFFFFFFFFL, 0xFFFFFFFFF7FFFFFFL, 0x000000000FFFFFFFL, 0x0000000000001000L, 0x0000000000100000L });
    public static final BitSet FOLLOW_p_VarName_in_p_AssignStatement16068 = new BitSet(new long[] {
            0x0000000000000000L, 0x0000000000000000L, 0x0000000000000000L, 0x0000002000000000L });
    public static final BitSet FOLLOW_BIND_in_p_AssignStatement16070 = new BitSet(new long[] { 0xFFFFFFFFFFFF0000L,
            0xFFFFFFFFFFFFFFFFL, 0xFFFFFFFFFFFFFFFFL, 0x01E0F001AFFFFFFFL, 0x0000000001F81320L, 0x0000000000100000L });
    public static final BitSet FOLLOW_p_ExprSingle_in_p_AssignStatement16072 = new BitSet(new long[] {
            0x0000000000000000L, 0x0000000000000000L, 0x0000000000000000L, 0x2000000000000000L });
    public static final BitSet FOLLOW_SEMICOLON_in_p_AssignStatement16075 = new BitSet(
            new long[] { 0x0000000000000002L });
    public static final BitSet FOLLOW_LBRACKET_in_p_BlockStatement16101 = new BitSet(new long[] { 0xFFFFFFFFFFFF0000L,
            0xFFFFFFFFFFFFFFFFL, 0xFFFFFFFFFFFFFFFFL, 0x01E0F083AFFFFFFFL, 0x0000000001F81320L, 0x0000000000100000L });
    public static final BitSet FOLLOW_p_Statements_in_p_BlockStatement16103 = new BitSet(new long[] {
            0x0000000000000000L, 0x0000000000000000L, 0x0000000000000000L, 0x0000000200000000L });
    public static final BitSet FOLLOW_RBRACKET_in_p_BlockStatement16106 = new BitSet(new long[] { 0x0000000000000002L });
    public static final BitSet FOLLOW_LBRACKET_in_p_BlockHybrid16132 = new BitSet(new long[] { 0xFFFFFFFFFFFF0000L,
            0xFFFFFFFFFFFFFFFFL, 0xFFFFFFFFFFFFFFFFL, 0x01E0F083AFFFFFFFL, 0x0000000001F81320L, 0x0000000000100000L });
    public static final BitSet FOLLOW_p_Statements_in_p_BlockHybrid16134 = new BitSet(new long[] { 0x0000000000000000L,
            0x0000000000000000L, 0x0000000000000000L, 0x0000000200000000L });
    public static final BitSet FOLLOW_RBRACKET_in_p_BlockHybrid16137 = new BitSet(new long[] { 0x0000000000000002L });
    public static final BitSet FOLLOW_BREAK_in_p_BreakStatement16165 = new BitSet(new long[] { 0x0000000000000000L,
            0x0000000000000000L, 0x0000000000000000L, 0x0000000000000800L });
    public static final BitSet FOLLOW_LOOP_in_p_BreakStatement16171 = new BitSet(new long[] { 0x0000000000000000L,
            0x0000000000000000L, 0x0000000000000000L, 0x2000000000000000L });
    public static final BitSet FOLLOW_SEMICOLON_in_p_BreakStatement16175 = new BitSet(
            new long[] { 0x0000000000000002L });
    public static final BitSet FOLLOW_CONTINUE_in_p_ContinueStatement16203 = new BitSet(new long[] {
            0x0000000000000000L, 0x0000000000000000L, 0x0000000000000000L, 0x0000000000000800L });
    public static final BitSet FOLLOW_LOOP_in_p_ContinueStatement16209 = new BitSet(new long[] { 0x0000000000000000L,
            0x0000000000000000L, 0x0000000000000000L, 0x2000000000000000L });
    public static final BitSet FOLLOW_SEMICOLON_in_p_ContinueStatement16213 = new BitSet(
            new long[] { 0x0000000000000002L });
    public static final BitSet FOLLOW_EXIT_in_p_ExitStatement16241 = new BitSet(new long[] { 0x0000000000000000L,
            0x0000000000000000L, 0x0000000000000000L, 0x0000000000001000L });
    public static final BitSet FOLLOW_RETURNING_in_p_ExitStatement16247 = new BitSet(new long[] { 0xFFFFFFFFFFFF0000L,
            0xFFFFFFFFFFFFFFFFL, 0xFFFFFFFFFFFFFFFFL, 0x01E0F001AFFFFFFFL, 0x0000000001F81320L, 0x0000000000100000L });
    public static final BitSet FOLLOW_p_ExprSingle_in_p_ExitStatement16251 = new BitSet(new long[] {
            0x0000000000000000L, 0x0000000000000000L, 0x0000000000000000L, 0x2000000000000000L });
    public static final BitSet FOLLOW_SEMICOLON_in_p_ExitStatement16254 = new BitSet(new long[] { 0x0000000000000002L });
    public static final BitSet FOLLOW_p_InitialClause_in_p_FLWORStatement16280 = new BitSet(new long[] {
            0x0020000000000000L, 0x0108400204040040L });
    public static final BitSet FOLLOW_p_IntermediateClause_in_p_FLWORStatement16282 = new BitSet(new long[] {
            0x0020000000000000L, 0x0108400204040040L });
    public static final BitSet FOLLOW_p_ReturnStatement_in_p_FLWORStatement16285 = new BitSet(
            new long[] { 0x0000000000000002L });
    public static final BitSet FOLLOW_RETURN_in_p_ReturnStatement16317 = new BitSet(new long[] { 0xFFFFFFFFFFFF0000L,
            0xFFFFFFFFFFFFFFFFL, 0xFFFFFFFFFFFFFFFFL, 0x01E0F081AFFFFFFFL, 0x0000000001F81320L, 0x0000000000100000L });
    public static final BitSet FOLLOW_p_Hybrid_in_p_ReturnStatement16321 = new BitSet(
            new long[] { 0x0000000000000002L });
    public static final BitSet FOLLOW_IF_in_p_IfStatement16350 = new BitSet(new long[] { 0x0000000000000000L,
            0x0000000000000000L, 0x0000000000000000L, 0x0000000020000000L });
    public static final BitSet FOLLOW_LPAREN_in_p_IfStatement16354 = new BitSet(new long[] { 0xFFFFFFFFFFFF0000L,
            0xFFFFFFFFFFFFFFFFL, 0xFFFFFFFFFFFFFFFFL, 0x01E0F001AFFFFFFFL, 0x0000000001F81320L, 0x0000000000100000L });
    public static final BitSet FOLLOW_p_Expr_in_p_IfStatement16356 = new BitSet(new long[] { 0x0000000000000000L,
            0x0000000000000000L, 0x0000000000000000L, 0x0000000040000000L });
    public static final BitSet FOLLOW_RPAREN_in_p_IfStatement16359 = new BitSet(new long[] { 0x0000000000000000L,
            0x0000002000000000L });
    public static final BitSet FOLLOW_THEN_in_p_IfStatement16363 = new BitSet(new long[] { 0xFFFFFFFFFFFF0000L,
            0xFFFFFFFFFFFFFFFFL, 0xFFFFFFFFFFFFFFFFL, 0x01E0F081AFFFFFFFL, 0x0000000001F81320L, 0x0000000000100000L });
    public static final BitSet FOLLOW_p_Hybrid_in_p_IfStatement16367 = new BitSet(new long[] { 0x0000080000000000L });
    public static final BitSet FOLLOW_ELSE_in_p_IfStatement16372 = new BitSet(new long[] { 0xFFFFFFFFFFFF0000L,
            0xFFFFFFFFFFFFFFFFL, 0xFFFFFFFFFFFFFFFFL, 0x01E0F081AFFFFFFFL, 0x0000000001F81320L, 0x0000000000100000L });
    public static final BitSet FOLLOW_p_Hybrid_in_p_IfStatement16376 = new BitSet(new long[] { 0x0000000000000002L });
    public static final BitSet FOLLOW_SWITCH_in_p_SwitchStatement16405 = new BitSet(new long[] { 0x0000000000000000L,
            0x0000000000000000L, 0x0000000000000000L, 0x0000000020000000L });
    public static final BitSet FOLLOW_LPAREN_in_p_SwitchStatement16409 = new BitSet(new long[] { 0xFFFFFFFFFFFF0000L,
            0xFFFFFFFFFFFFFFFFL, 0xFFFFFFFFFFFFFFFFL, 0x01E0F001AFFFFFFFL, 0x0000000001F81320L, 0x0000000000100000L });
    public static final BitSet FOLLOW_p_Expr_in_p_SwitchStatement16411 = new BitSet(new long[] { 0x0000000000000000L,
            0x0000000000000000L, 0x0000000000000000L, 0x0000000040000000L });
    public static final BitSet FOLLOW_RPAREN_in_p_SwitchStatement16414 = new BitSet(new long[] { 0x0000000004000000L });
    public static final BitSet FOLLOW_p_SwitchCaseStatement_in_p_SwitchStatement16416 = new BitSet(
            new long[] { 0x0000000804000000L });
    public static final BitSet FOLLOW_DEFAULT_in_p_SwitchStatement16421 = new BitSet(new long[] { 0x0000000000000000L,
            0x0000000004000000L });
    public static final BitSet FOLLOW_RETURN_in_p_SwitchStatement16427 = new BitSet(new long[] { 0xFFFFFFFFFFFF0000L,
            0xFFFFFFFFFFFFFFFFL, 0xFFFFFFFFFFFFFFFFL, 0x01E0F081AFFFFFFFL, 0x0000000001F81320L, 0x0000000000100000L });
    public static final BitSet FOLLOW_p_Hybrid_in_p_SwitchStatement16431 = new BitSet(
            new long[] { 0x0000000000000002L });
    public static final BitSet FOLLOW_CASE_in_p_SwitchCaseStatement16461 = new BitSet(new long[] { 0xFFFFFFFFFFFF0000L,
            0xFFFFFFFFFFFFFFFFL, 0xFFFFFFFFFFFFFFFFL, 0x01E0F001AFFFFFFFL, 0x0000000001F81320L, 0x0000000000100000L });
    public static final BitSet FOLLOW_p_SwitchCaseOperand_in_p_SwitchCaseStatement16465 = new BitSet(new long[] {
            0x0000000004000000L, 0x0000000004000000L });
    public static final BitSet FOLLOW_RETURN_in_p_SwitchCaseStatement16471 = new BitSet(new long[] {
            0xFFFFFFFFFFFF0000L, 0xFFFFFFFFFFFFFFFFL, 0xFFFFFFFFFFFFFFFFL, 0x01E0F081AFFFFFFFL, 0x0000000001F81320L,
            0x0000000000100000L });
    public static final BitSet FOLLOW_p_Hybrid_in_p_SwitchCaseStatement16475 = new BitSet(
            new long[] { 0x0000000000000002L });
    public static final BitSet FOLLOW_TRY_in_p_TryCatchStatement16504 = new BitSet(new long[] { 0x0000000000000000L,
            0x0000000000000000L, 0x0000000000000000L, 0x0000000100000000L });
    public static final BitSet FOLLOW_p_BlockStatement_in_p_TryCatchStatement16508 = new BitSet(new long[] {
            0x0000000000000000L, 0x0002000000000000L });
    public static final BitSet FOLLOW_CATCH_in_p_TryCatchStatement16513 = new BitSet(new long[] { 0xFFFFFFFFFFFF0000L,
            0xFFFFFFFFFFFFFFFFL, 0xFFFFFFFFF7FFFFFFL, 0x010010010FFFFFFFL, 0x0000000001C01320L, 0x0000000000100000L });
    public static final BitSet FOLLOW_p_CatchErrorList_in_p_TryCatchStatement16517 = new BitSet(new long[] {
            0x0000000000000000L, 0x0000000000000000L, 0x0000000000000000L, 0x0000000100000000L });
    public static final BitSet FOLLOW_p_BlockStatement_in_p_TryCatchStatement16519 = new BitSet(new long[] {
            0x0000000000000002L, 0x0002000000000000L });
    public static final BitSet FOLLOW_TRY_in_p_TryCatchHybrid16551 = new BitSet(new long[] { 0x0000000000000000L,
            0x0000000000000000L, 0x0000000000000000L, 0x0000000100000000L });
    public static final BitSet FOLLOW_p_BlockHybrid_in_p_TryCatchHybrid16555 = new BitSet(new long[] {
            0x0000000000000000L, 0x0002000000000000L });
    public static final BitSet FOLLOW_CATCH_in_p_TryCatchHybrid16561 = new BitSet(new long[] { 0xFFFFFFFFFFFF0000L,
            0xFFFFFFFFFFFFFFFFL, 0xFFFFFFFFF7FFFFFFL, 0x010010010FFFFFFFL, 0x0000000001C01320L, 0x0000000000100000L });
    public static final BitSet FOLLOW_p_CatchErrorList_in_p_TryCatchHybrid16565 = new BitSet(new long[] {
            0x0000000000000000L, 0x0000000000000000L, 0x0000000000000000L, 0x0000000100000000L });
    public static final BitSet FOLLOW_p_BlockHybrid_in_p_TryCatchHybrid16567 = new BitSet(new long[] {
            0x0000000000000002L, 0x0002000000000000L });
    public static final BitSet FOLLOW_TYPESWITCH_in_p_TypeswitchStatement16600 = new BitSet(new long[] {
            0x0000000000000000L, 0x0000000000000000L, 0x0000000000000000L, 0x0000000020000000L });
    public static final BitSet FOLLOW_LPAREN_in_p_TypeswitchStatement16604 = new BitSet(new long[] {
            0xFFFFFFFFFFFF0000L, 0xFFFFFFFFFFFFFFFFL, 0xFFFFFFFFFFFFFFFFL, 0x01E0F001AFFFFFFFL, 0x0000000001F81320L,
            0x0000000000100000L });
    public static final BitSet FOLLOW_p_Expr_in_p_TypeswitchStatement16606 = new BitSet(new long[] {
            0x0000000000000000L, 0x0000000000000000L, 0x0000000000000000L, 0x0000000040000000L });
    public static final BitSet FOLLOW_RPAREN_in_p_TypeswitchStatement16609 = new BitSet(
            new long[] { 0x0000000004000000L });
    public static final BitSet FOLLOW_p_CaseStatement_in_p_TypeswitchStatement16611 = new BitSet(
            new long[] { 0x0000000804000000L });
    public static final BitSet FOLLOW_DEFAULT_in_p_TypeswitchStatement16616 = new BitSet(new long[] {
            0x0000000000000000L, 0x0000000004000000L, 0x0000000000000000L, 0x0000000080000000L });
    public static final BitSet FOLLOW_DOLLAR_in_p_TypeswitchStatement16621 = new BitSet(new long[] {
            0xFFFFFFFFFFFF0000L, 0xFFFFFFFFFFFFFFFFL, 0xFFFFFFFFF7FFFFFFL, 0x000000000FFFFFFFL, 0x0000000000001000L,
            0x0000000000100000L });
    public static final BitSet FOLLOW_p_VarName_in_p_TypeswitchStatement16623 = new BitSet(new long[] {
            0x0000000000000000L, 0x0000000004000000L });
    public static final BitSet FOLLOW_RETURN_in_p_TypeswitchStatement16629 = new BitSet(new long[] {
            0xFFFFFFFFFFFF0000L, 0xFFFFFFFFFFFFFFFFL, 0xFFFFFFFFFFFFFFFFL, 0x01E0F081AFFFFFFFL, 0x0000000001F81320L,
            0x0000000000100000L });
    public static final BitSet FOLLOW_p_Hybrid_in_p_TypeswitchStatement16633 = new BitSet(
            new long[] { 0x0000000000000002L });
    public static final BitSet FOLLOW_CASE_in_p_CaseStatement16662 = new BitSet(new long[] { 0xFFFFFFFFFFFF0000L,
            0xFFFFFFFFFFFFFFFFL, 0xFFFFFFFFF7FFFFFFL, 0x00000000AFFFFFFFL, 0x0000000000001000L, 0x0000000000100000L });
    public static final BitSet FOLLOW_DOLLAR_in_p_CaseStatement16667 = new BitSet(new long[] { 0xFFFFFFFFFFFF0000L,
            0xFFFFFFFFFFFFFFFFL, 0xFFFFFFFFF7FFFFFFL, 0x000000000FFFFFFFL, 0x0000000000001000L, 0x0000000000100000L });
    public static final BitSet FOLLOW_p_VarName_in_p_CaseStatement16669 = new BitSet(new long[] { 0x0000000000080000L });
    public static final BitSet FOLLOW_AS_in_p_CaseStatement16671 = new BitSet(new long[] { 0xFFFFFFFFFFFF0000L,
            0xFFFFFFFFFFFFFFFFL, 0xFFFFFFFFF7FFFFFFL, 0x000000002FFFFFFFL, 0x0000000000001000L, 0x0000000000100000L });
    public static final BitSet FOLLOW_p_SequenceType_in_p_CaseStatement16675 = new BitSet(new long[] {
            0x0000000000000000L, 0x0000000004000000L });
    public static final BitSet FOLLOW_RETURN_in_p_CaseStatement16679 = new BitSet(new long[] { 0xFFFFFFFFFFFF0000L,
            0xFFFFFFFFFFFFFFFFL, 0xFFFFFFFFFFFFFFFFL, 0x01E0F081AFFFFFFFL, 0x0000000001F81320L, 0x0000000000100000L });
    public static final BitSet FOLLOW_p_Hybrid_in_p_CaseStatement16683 = new BitSet(new long[] { 0x0000000000000002L });
    public static final BitSet FOLLOW_p_Annotation_in_p_VarDeclStatement16710 = new BitSet(new long[] {
            0x0000000000000000L, 0x0000100000000000L, 0x0000000000000000L, 0x0000008000000000L });
    public static final BitSet FOLLOW_VARIABLE_in_p_VarDeclStatement16715 = new BitSet(new long[] {
            0x0000000000000000L, 0x0000000000000000L, 0x0000000000000000L, 0x0000000080000000L });
    public static final BitSet FOLLOW_DOLLAR_in_p_VarDeclStatement16719 = new BitSet(new long[] { 0xFFFFFFFFFFFF0000L,
            0xFFFFFFFFFFFFFFFFL, 0xFFFFFFFFF7FFFFFFL, 0x000000000FFFFFFFL, 0x0000000000001000L, 0x0000000000100000L });
    public static final BitSet FOLLOW_p_VarName_in_p_VarDeclStatement16721 = new BitSet(new long[] {
            0x0000000000080000L, 0x0000000000000000L, 0x0000000000000000L, 0x2000042000000000L });
    public static final BitSet FOLLOW_p_TypeDeclaration_in_p_VarDeclStatement16723 = new BitSet(new long[] {
            0x0000000000000000L, 0x0000000000000000L, 0x0000000000000000L, 0x2000042000000000L });
    public static final BitSet FOLLOW_BIND_in_p_VarDeclStatement16727 = new BitSet(new long[] { 0xFFFFFFFFFFFF0000L,
            0xFFFFFFFFFFFFFFFFL, 0xFFFFFFFFFFFFFFFFL, 0x01E0F001AFFFFFFFL, 0x0000000001F81320L, 0x0000000000100000L });
    public static final BitSet FOLLOW_p_ExprSingle_in_p_VarDeclStatement16729 = new BitSet(new long[] {
            0x0000000000000000L, 0x0000000000000000L, 0x0000000000000000L, 0x2000040000000000L });
    public static final BitSet FOLLOW_COMMA_in_p_VarDeclStatement16745 = new BitSet(new long[] { 0x0000000000000000L,
            0x0000000000000000L, 0x0000000000000000L, 0x0000000080000000L });
    public static final BitSet FOLLOW_DOLLAR_in_p_VarDeclStatement16747 = new BitSet(new long[] { 0xFFFFFFFFFFFF0000L,
            0xFFFFFFFFFFFFFFFFL, 0xFFFFFFFFF7FFFFFFL, 0x000000000FFFFFFFL, 0x0000000000001000L, 0x0000000000100000L });
    public static final BitSet FOLLOW_p_VarName_in_p_VarDeclStatement16749 = new BitSet(new long[] {
            0x0000000000080000L, 0x0000000000000000L, 0x0000000000000000L, 0x2000042000000000L });
    public static final BitSet FOLLOW_p_TypeDeclaration_in_p_VarDeclStatement16751 = new BitSet(new long[] {
            0x0000000000000000L, 0x0000000000000000L, 0x0000000000000000L, 0x2000042000000000L });
    public static final BitSet FOLLOW_BIND_in_p_VarDeclStatement16755 = new BitSet(new long[] { 0xFFFFFFFFFFFF0000L,
            0xFFFFFFFFFFFFFFFFL, 0xFFFFFFFFFFFFFFFFL, 0x01E0F001AFFFFFFFL, 0x0000000001F81320L, 0x0000000000100000L });
    public static final BitSet FOLLOW_p_ExprSingle_in_p_VarDeclStatement16757 = new BitSet(new long[] {
            0x0000000000000000L, 0x0000000000000000L, 0x0000000000000000L, 0x2000040000000000L });
    public static final BitSet FOLLOW_SEMICOLON_in_p_VarDeclStatement16774 = new BitSet(
            new long[] { 0x0000000000000002L });
    public static final BitSet FOLLOW_WHILE_in_p_WhileStatement16802 = new BitSet(new long[] { 0x0000000000000000L,
            0x0000000000000000L, 0x0000000000000000L, 0x0000000020000000L });
    public static final BitSet FOLLOW_LPAREN_in_p_WhileStatement16806 = new BitSet(new long[] { 0xFFFFFFFFFFFF0000L,
            0xFFFFFFFFFFFFFFFFL, 0xFFFFFFFFFFFFFFFFL, 0x01E0F001AFFFFFFFL, 0x0000000001F81320L, 0x0000000000100000L });
    public static final BitSet FOLLOW_p_Expr_in_p_WhileStatement16808 = new BitSet(new long[] { 0x0000000000000000L,
            0x0000000000000000L, 0x0000000000000000L, 0x0000000040000000L });
    public static final BitSet FOLLOW_RPAREN_in_p_WhileStatement16811 = new BitSet(new long[] { 0xFFFFFFFFFFFF0000L,
            0xFFFFFFFFFFFFFFFFL, 0xFFFFFFFFFFFFFFFFL, 0x01E0F081AFFFFFFFL, 0x0000000001F81320L, 0x0000000000100000L });
    public static final BitSet FOLLOW_p_Hybrid_in_p_WhileStatement16813 = new BitSet(new long[] { 0x0000000000000002L });
    public static final BitSet FOLLOW_p_QuantifiedExpr_in_p_ExprSimple16840 = new BitSet(
            new long[] { 0x0000000000000002L });
    public static final BitSet FOLLOW_p_OrExpr_in_p_ExprSimple16852 = new BitSet(new long[] { 0x0000000000000002L });
    public static final BitSet FOLLOW_pg_UpdateExpr_in_p_ExprSimple16867 = new BitSet(
            new long[] { 0x0000000000000002L });
    public static final BitSet FOLLOW_LBRACKET_in_p_BlockExpr16893 = new BitSet(new long[] { 0xFFFFFFFFFFFF0000L,
            0xFFFFFFFFFFFFFFFFL, 0xFFFFFFFFFFFFFFFFL, 0x01E0F081AFFFFFFFL, 0x0000000001F81320L, 0x0000000000100000L });
    public static final BitSet FOLLOW_p_StatementsAndExpr_in_p_BlockExpr16895 = new BitSet(new long[] {
            0x0000000000000000L, 0x0000000000000000L, 0x0000000000000000L, 0x0000000200000000L });
    public static final BitSet FOLLOW_RBRACKET_in_p_BlockExpr16897 = new BitSet(new long[] { 0x0000000000000002L });
    public static final BitSet FOLLOW_COLLECTION_in_p_CollectionDecl16928 = new BitSet(new long[] {
            0xFFFFFFFFFFFF0000L, 0xFFFFFFFFFFFFFFFFL, 0xFFFFFFFFF7FFFFFFL, 0x000000000FFFFFFFL, 0x0000000000001000L,
            0x0000000000100000L });
    public static final BitSet FOLLOW_p_QName_in_p_CollectionDecl16932 = new BitSet(new long[] { 0x0000000000080002L });
    public static final BitSet FOLLOW_p_CollectionTypeDecl_in_p_CollectionDecl16934 = new BitSet(
            new long[] { 0x0000000000000002L });
    public static final BitSet FOLLOW_AS_in_p_CollectionTypeDecl16963 = new BitSet(new long[] { 0x0000060080400000L,
            0x1000001062004000L });
    public static final BitSet FOLLOW_p_KindTest_in_p_CollectionTypeDecl16967 = new BitSet(new long[] {
            0x0000000000000002L, 0x0000000000000000L, 0x0000000000000000L, 0x0000380000000000L });
    public static final BitSet FOLLOW_p_OccurrenceIndicator_in_p_CollectionTypeDecl16976 = new BitSet(
            new long[] { 0x0000000000000002L });
    public static final BitSet FOLLOW_INDEX_in_p_IndexDecl17006 = new BitSet(new long[] { 0xFFFFFFFFFFFF0000L,
            0xFFFFFFFFFFFFFFFFL, 0xFFFFFFFFF7FFFFFFL, 0x000000000FFFFFFFL, 0x0000000000001000L, 0x0000000000100000L });
    public static final BitSet FOLLOW_p_IndexName_in_p_IndexDecl17010 = new BitSet(new long[] { 0x0000000000000000L,
            0x0000000000000000L, 0x0000000000000000L, 0x0000000000400000L });
    public static final BitSet FOLLOW_ON_in_p_IndexDecl17014 = new BitSet(new long[] { 0x0000000000000000L,
            0x0000000000000000L, 0x0000000000400000L });
    public static final BitSet FOLLOW_NODES_in_p_IndexDecl17020 = new BitSet(new long[] { 0xFFFFFFFFFFFF0000L,
            0xFFFFFFFFFFFFFFFFL, 0xFFFFFFFFFFFFFFFFL, 0x01E09001AFFFFFFFL, 0x0000000001F01320L, 0x0000000000100000L });
    public static final BitSet FOLLOW_p_IndexDomainExpr_in_p_IndexDecl17024 = new BitSet(
            new long[] { 0x0000000002000000L });
    public static final BitSet FOLLOW_BY_in_p_IndexDecl17028 = new BitSet(new long[] { 0xFFFFFFFFFFFF0000L,
            0xFFFFFFFFFFFFFFFFL, 0xFFFFFFFFFFFFFFFFL, 0x01E09001AFFFFFFFL, 0x0000000001F01320L, 0x0000000000100000L });
    public static final BitSet FOLLOW_p_IndexKeySpec_in_p_IndexDecl17032 = new BitSet(new long[] { 0x0000000000000002L,
            0x0000000000000000L, 0x0000000000000000L, 0x0000040000000000L });
    public static final BitSet FOLLOW_COMMA_in_p_IndexDecl17035 = new BitSet(new long[] { 0xFFFFFFFFFFFF0000L,
            0xFFFFFFFFFFFFFFFFL, 0xFFFFFFFFFFFFFFFFL, 0x01E09001AFFFFFFFL, 0x0000000001F01320L, 0x0000000000100000L });
    public static final BitSet FOLLOW_p_IndexKeySpec_in_p_IndexDecl17037 = new BitSet(new long[] { 0x0000000000000002L,
            0x0000000000000000L, 0x0000000000000000L, 0x0000040000000000L });
    public static final BitSet FOLLOW_p_QName_in_p_IndexName17064 = new BitSet(new long[] { 0x0000000000000002L });
    public static final BitSet FOLLOW_p_PathExpr_in_p_IndexDomainExpr17089 = new BitSet(
            new long[] { 0x0000000000000002L });
    public static final BitSet FOLLOW_p_IndexKeyExpr_in_p_IndexKeySpec17114 = new BitSet(
            new long[] { 0x0000000040080002L });
    public static final BitSet FOLLOW_p_IndexKeyTypeDecl_in_p_IndexKeySpec17116 = new BitSet(
            new long[] { 0x0000000040000002L });
    public static final BitSet FOLLOW_p_IndexKeyCollation_in_p_IndexKeySpec17119 = new BitSet(
            new long[] { 0x0000000000000002L });
    public static final BitSet FOLLOW_p_PathExpr_in_p_IndexKeyExpr17145 = new BitSet(new long[] { 0x0000000000000002L });
    public static final BitSet FOLLOW_AS_in_p_IndexKeyTypeDecl17172 = new BitSet(new long[] { 0xFFFFFFFFFFFF0000L,
            0xFFFFFFFFFFFFFFFFL, 0xFFFFFFFFF7FFFFFFL, 0x000000000FFFFFFFL, 0x0000000000001000L, 0x0000000000100000L });
    public static final BitSet FOLLOW_p_AtomicType_in_p_IndexKeyTypeDecl17176 = new BitSet(new long[] {
            0x0000000000000002L, 0x0000000000000000L, 0x0000000000000000L, 0x0000380000000000L });
    public static final BitSet FOLLOW_p_OccurrenceIndicator_in_p_IndexKeyTypeDecl17178 = new BitSet(
            new long[] { 0x0000000000000002L });
    public static final BitSet FOLLOW_p_QName_in_p_AtomicType17204 = new BitSet(new long[] { 0x0000000000000002L });
    public static final BitSet FOLLOW_COLLATION_in_p_IndexKeyCollation17231 = new BitSet(new long[] {
            0x0000000000000000L, 0x0000000000000000L, 0x0000000000000000L, 0x0000000000000000L, 0x0000000001C00300L });
    public static final BitSet FOLLOW_p_StringLiteral_in_p_IndexKeyCollation17235 = new BitSet(
            new long[] { 0x0000000000000002L });
    public static final BitSet FOLLOW_INTEGRITY_in_p_ICDecl17262 = new BitSet(new long[] { 0x0000000000000000L,
            0x0000000000000000L, 0x0000000000000000L, 0x0000000000010000L });
    public static final BitSet FOLLOW_CONSTRAINT_in_p_ICDecl17268 = new BitSet(new long[] { 0xFFFFFFFFFFFF0000L,
            0xFFFFFFFFFFFFFFFFL, 0xFFFFFFFFF7FFFFFFL, 0x000000000FFFFFFFL, 0x0000000000001000L, 0x0000000000100000L });
    public static final BitSet FOLLOW_p_QName_in_p_ICDecl17272 = new BitSet(new long[] { 0x0000000000000000L,
            0x0000000000000000L, 0x0000000000000000L, 0x0000000000440000L });
    public static final BitSet FOLLOW_p_ICCollection_in_p_ICDecl17275 = new BitSet(new long[] { 0x0000000000000002L });
    public static final BitSet FOLLOW_p_ICForeignKey_in_p_ICDecl17279 = new BitSet(new long[] { 0x0000000000000002L });
    public static final BitSet FOLLOW_ON_in_p_ICCollection17307 = new BitSet(new long[] { 0x0000000000000000L,
            0x0000000000000000L, 0x0000000000000000L, 0x0000000000008000L });
    public static final BitSet FOLLOW_COLLECTION_in_p_ICCollection17313 = new BitSet(new long[] { 0xFFFFFFFFFFFF0000L,
            0xFFFFFFFFFFFFFFFFL, 0xFFFFFFFFF7FFFFFFL, 0x000000000FFFFFFFL, 0x0000000000001000L, 0x0000000000100000L });
    public static final BitSet FOLLOW_p_QName_in_p_ICCollection17317 = new BitSet(new long[] { 0x0000000000000000L,
            0x0000000000004000L, 0x0000000000000000L, 0x0000000080020000L });
    public static final BitSet FOLLOW_p_ICCollSequence_in_p_ICCollection17320 = new BitSet(
            new long[] { 0x0000000000000002L });
    public static final BitSet FOLLOW_p_ICCollSequenceUnique_in_p_ICCollection17324 = new BitSet(
            new long[] { 0x0000000000000002L });
    public static final BitSet FOLLOW_p_ICCollNode_in_p_ICCollection17328 = new BitSet(
            new long[] { 0x0000000000000002L });
    public static final BitSet FOLLOW_DOLLAR_in_p_ICCollSequence17354 = new BitSet(new long[] { 0xFFFFFFFFFFFF0000L,
            0xFFFFFFFFFFFFFFFFL, 0xFFFFFFFFF7FFFFFFL, 0x000000000FFFFFFFL, 0x0000000000001000L, 0x0000000000100000L });
    public static final BitSet FOLLOW_p_QName_in_p_ICCollSequence17356 = new BitSet(new long[] { 0x0000000000000000L,
            0x0000000000000000L, 0x0000000000000000L, 0x0000000000004000L });
    public static final BitSet FOLLOW_CHECK_in_p_ICCollSequence17360 = new BitSet(new long[] { 0xFFFFFFFFFFFF0000L,
            0xFFFFFFFFFFFFFFFFL, 0xFFFFFFFFFFFFFFFFL, 0x01E0F001AFFFFFFFL, 0x0000000001F81320L, 0x0000000000100000L });
    public static final BitSet FOLLOW_p_ExprSingle_in_p_ICCollSequence17364 = new BitSet(
            new long[] { 0x0000000000000002L });
    public static final BitSet FOLLOW_NODE_in_p_ICCollSequenceUnique17392 = new BitSet(new long[] {
            0x0000000000000000L, 0x0000000000000000L, 0x0000000000000000L, 0x0000000080000000L });
    public static final BitSet FOLLOW_DOLLAR_in_p_ICCollSequenceUnique17396 = new BitSet(new long[] {
            0xFFFFFFFFFFFF0000L, 0xFFFFFFFFFFFFFFFFL, 0xFFFFFFFFF7FFFFFFL, 0x000000000FFFFFFFL, 0x0000000000001000L,
            0x0000000000100000L });
    public static final BitSet FOLLOW_p_QName_in_p_ICCollSequenceUnique17398 = new BitSet(new long[] {
            0x0000000000000000L, 0x0000000000000000L, 0x0000000000000000L, 0x0000000000004000L });
    public static final BitSet FOLLOW_CHECK_in_p_ICCollSequenceUnique17402 = new BitSet(new long[] {
            0x0000000000000000L, 0x0000000000000000L, 0x0000000000000000L, 0x0000000000800000L });
    public static final BitSet FOLLOW_UNIQUE_in_p_ICCollSequenceUnique17408 = new BitSet(new long[] {
            0x0000000000000000L, 0x0000000000000000L, 0x0000000000000000L, 0x0000000000200000L });
    public static final BitSet FOLLOW_KEY_in_p_ICCollSequenceUnique17414 = new BitSet(new long[] { 0xFFFFFFFFFFFF0000L,
            0xFFFFFFFFFFFFFFFFL, 0xFFFFFFFFFFFFFFFFL, 0x01E09001AFFFFFFFL, 0x0000000001F01320L, 0x0000000000100000L });
    public static final BitSet FOLLOW_p_PathExpr_in_p_ICCollSequenceUnique17418 = new BitSet(
            new long[] { 0x0000000000000002L });
    public static final BitSet FOLLOW_FOREACH_in_p_ICCollNode17445 = new BitSet(new long[] { 0x0000000000000000L,
            0x0000000000004000L });
    public static final BitSet FOLLOW_NODE_in_p_ICCollNode17451 = new BitSet(new long[] { 0x0000000000000000L,
            0x0000000000000000L, 0x0000000000000000L, 0x0000000080000000L });
    public static final BitSet FOLLOW_DOLLAR_in_p_ICCollNode17455 = new BitSet(new long[] { 0xFFFFFFFFFFFF0000L,
            0xFFFFFFFFFFFFFFFFL, 0xFFFFFFFFF7FFFFFFL, 0x000000000FFFFFFFL, 0x0000000000001000L, 0x0000000000100000L });
    public static final BitSet FOLLOW_p_QName_in_p_ICCollNode17457 = new BitSet(new long[] { 0x0000000000000000L,
            0x0000000000000000L, 0x0000000000000000L, 0x0000000000004000L });
    public static final BitSet FOLLOW_CHECK_in_p_ICCollNode17461 = new BitSet(new long[] { 0xFFFFFFFFFFFF0000L,
            0xFFFFFFFFFFFFFFFFL, 0xFFFFFFFFFFFFFFFFL, 0x01E0F001AFFFFFFFL, 0x0000000001F81320L, 0x0000000000100000L });
    public static final BitSet FOLLOW_p_ExprSingle_in_p_ICCollNode17465 = new BitSet(new long[] { 0x0000000000000002L });
    public static final BitSet FOLLOW_FOREIGN_in_p_ICForeignKey17493 = new BitSet(new long[] { 0x0000000000000000L,
            0x0000000000000000L, 0x0000000000000000L, 0x0000000000200000L });
    public static final BitSet FOLLOW_KEY_in_p_ICForeignKey17499 = new BitSet(new long[] { 0x0000000000000000L,
            0x0000000000000000L, 0x0000008000000000L });
    public static final BitSet FOLLOW_p_ICForeignKeySource_in_p_ICForeignKey17503 = new BitSet(new long[] {
            0x0000000000000000L, 0x0000004000000000L });
    public static final BitSet FOLLOW_p_ICForeignKeyTarget_in_p_ICForeignKey17505 = new BitSet(
            new long[] { 0x0000000000000002L });
    public static final BitSet FOLLOW_FROM_in_p_ICForeignKeySource17532 = new BitSet(new long[] { 0x0000000000000000L,
            0x0000000000000000L, 0x0000000000000000L, 0x0000000000008000L });
    public static final BitSet FOLLOW_p_ICForeignKeyValues_in_p_ICForeignKeySource17536 = new BitSet(
            new long[] { 0x0000000000000002L });
    public static final BitSet FOLLOW_TO_in_p_ICForeignKeyTarget17563 = new BitSet(new long[] { 0x0000000000000000L,
            0x0000000000000000L, 0x0000000000000000L, 0x0000000000008000L });
    public static final BitSet FOLLOW_p_ICForeignKeyValues_in_p_ICForeignKeyTarget17567 = new BitSet(
            new long[] { 0x0000000000000002L });
    public static final BitSet FOLLOW_COLLECTION_in_p_ICForeignKeyValues17594 = new BitSet(new long[] {
            0xFFFFFFFFFFFF0000L, 0xFFFFFFFFFFFFFFFFL, 0xFFFFFFFFF7FFFFFFL, 0x000000000FFFFFFFL, 0x0000000000001000L,
            0x0000000000100000L });
    public static final BitSet FOLLOW_p_QName_in_p_ICForeignKeyValues17598 = new BitSet(new long[] {
            0x0000000000000000L, 0x0000000000004000L });
    public static final BitSet FOLLOW_NODE_in_p_ICForeignKeyValues17602 = new BitSet(new long[] { 0x0000000000000000L,
            0x0000000000000000L, 0x0000000000000000L, 0x0000000080000000L });
    public static final BitSet FOLLOW_DOLLAR_in_p_ICForeignKeyValues17606 = new BitSet(new long[] {
            0xFFFFFFFFFFFF0000L, 0xFFFFFFFFFFFFFFFFL, 0xFFFFFFFFF7FFFFFFL, 0x000000000FFFFFFFL, 0x0000000000001000L,
            0x0000000000100000L });
    public static final BitSet FOLLOW_p_QName_in_p_ICForeignKeyValues17608 = new BitSet(new long[] {
            0x0000000000000000L, 0x0000000000000000L, 0x0000000000000000L, 0x0000000000200000L });
    public static final BitSet FOLLOW_KEY_in_p_ICForeignKeyValues17612 = new BitSet(new long[] { 0xFFFFFFFFFFFF0000L,
            0xFFFFFFFFFFFFFFFFL, 0xFFFFFFFFFFFFFFFFL, 0x01E09001AFFFFFFFL, 0x0000000001F01320L, 0x0000000000100000L });
    public static final BitSet FOLLOW_p_PathExpr_in_p_ICForeignKeyValues17616 = new BitSet(
            new long[] { 0x0000000000000002L });
    public static final BitSet FOLLOW_set_in_synpred1_XQueryParser3536 = new BitSet(new long[] { 0x0000000000000000L,
            0x0000000000000000L, 0x0000000000000000L, 0x0000000080000000L });
    public static final BitSet FOLLOW_DOLLAR_in_synpred1_XQueryParser3544 = new BitSet(
            new long[] { 0x0000000000000002L });
    public static final BitSet FOLLOW_FOR_in_synpred1_XQueryParser3550 = new BitSet(new long[] { 0x0000000000000000L,
            0x0000000000000000L, 0x0000000000000110L });
    public static final BitSet FOLLOW_set_in_synpred1_XQueryParser3552 = new BitSet(new long[] { 0x0000000000000002L });
    public static final BitSet FOLLOW_IF_in_synpred2_XQueryParser3578 = new BitSet(new long[] { 0x0000000000000000L,
            0x0000000000000000L, 0x0000000000000000L, 0x0000000020000000L });
    public static final BitSet FOLLOW_LPAREN_in_synpred2_XQueryParser3580 = new BitSet(
            new long[] { 0x0000000000000002L });
    public static final BitSet FOLLOW_SWITCH_in_synpred3_XQueryParser3608 = new BitSet(new long[] {
            0x0000000000000000L, 0x0000000000000000L, 0x0000000000000000L, 0x0000000020000000L });
    public static final BitSet FOLLOW_LPAREN_in_synpred3_XQueryParser3610 = new BitSet(
            new long[] { 0x0000000000000002L });
    public static final BitSet FOLLOW_TYPESWITCH_in_synpred4_XQueryParser3634 = new BitSet(new long[] {
            0x0000000000000000L, 0x0000000000000000L, 0x0000000000000000L, 0x0000000020000000L });
    public static final BitSet FOLLOW_LPAREN_in_synpred4_XQueryParser3636 = new BitSet(
            new long[] { 0x0000000000000002L });
    public static final BitSet FOLLOW_TRY_in_synpred5_XQueryParser3656 = new BitSet(new long[] { 0x0000000000000000L,
            0x0000000000000000L, 0x0000000000000000L, 0x0000000100000000L });
    public static final BitSet FOLLOW_LBRACKET_in_synpred5_XQueryParser3658 = new BitSet(
            new long[] { 0x0000000000000002L });
    public static final BitSet FOLLOW_VALIDATE_in_synpred6_XQueryParser6104 = new BitSet(new long[] {
            0x0000000000000002L, 0x0000000400000008L, 0x0000000000000200L });
    public static final BitSet FOLLOW_p_ValidationMode_in_synpred6_XQueryParser6108 = new BitSet(
            new long[] { 0x0000000000000002L });
    public static final BitSet FOLLOW_TYPE_in_synpred6_XQueryParser6112 = new BitSet(new long[] { 0x0000000000000002L });
    public static final BitSet FOLLOW_SLASH_in_synpred7_XQueryParser6452 = new BitSet(new long[] { 0xFFFFFFFFFFFF0000L,
            0xFFFFFFFFFFFFFFFFL, 0xFFFFFFFFFFFFFFFFL, 0x01E09001AFFFFFFFL, 0x0000000001F01320L, 0x0000000000100000L });
    public static final BitSet FOLLOW_p_RelativePathExpr_in_synpred7_XQueryParser6454 = new BitSet(
            new long[] { 0x0000000000000002L });
    public static final BitSet FOLLOW_set_in_synpred8_XQueryParser6568 = new BitSet(new long[] { 0x0000000000000002L });
    public static final BitSet FOLLOW_set_in_synpred9_XQueryParser6621 = new BitSet(new long[] { 0xFFFFFFFFFFFF0000L,
            0xFFFFFFFFFFFFFFFFL, 0xFFFFFFFFF7FFFFFFL, 0x000000010FFFFFFFL, 0x0000000000001000L, 0x0000000000100000L });
    public static final BitSet FOLLOW_p_QName_in_synpred9_XQueryParser6629 = new BitSet(new long[] {
            0x0000000000000000L, 0x0000000000000000L, 0x0000000000000000L, 0x0000000100000000L });
    public static final BitSet FOLLOW_LBRACKET_in_synpred9_XQueryParser6632 = new BitSet(
            new long[] { 0x0000000000000002L });
    public static final BitSet FOLLOW_set_in_synpred9_XQueryParser6650 = new BitSet(new long[] { 0xFFFFFFFFFFFF0000L,
            0xFFFFFFFFFFFFFFFFL, 0xFFFFFFFFF7FFFFFFL, 0x000000010FFFFFFFL, 0x0000000000001000L, 0x0000000000100000L });
    public static final BitSet FOLLOW_p_NCName_in_synpred9_XQueryParser6658 = new BitSet(new long[] {
            0x0000000000000000L, 0x0000000000000000L, 0x0000000000000000L, 0x0000000100000000L });
    public static final BitSet FOLLOW_LBRACKET_in_synpred9_XQueryParser6661 = new BitSet(
            new long[] { 0x0000000000000002L });
    public static final BitSet FOLLOW_set_in_synpred9_XQueryParser6679 = new BitSet(new long[] { 0x0000000000000000L,
            0x0000000000000000L, 0x0000000000000000L, 0x0000000100000000L });
    public static final BitSet FOLLOW_LBRACKET_in_synpred9_XQueryParser6691 = new BitSet(
            new long[] { 0x0000000000000002L });
    public static final BitSet FOLLOW_p_KindTest_in_synpred10_XQueryParser6721 = new BitSet(
            new long[] { 0x0000000000000002L });
    public static final BitSet FOLLOW_p_QName_in_synpred11_XQueryParser6740 = new BitSet(new long[] {
            0x0000000000000000L, 0x0000000000000000L, 0x0000000000000000L, 0x0000000020000000L });
    public static final BitSet FOLLOW_LPAREN_in_synpred11_XQueryParser6742 = new BitSet(
            new long[] { 0x0000000000000002L });
    public static final BitSet FOLLOW_p_PrimaryExpr_in_synpred12_XQueryParser6760 = new BitSet(
            new long[] { 0x0000000000000002L });
    public static final BitSet FOLLOW_p_Wildcard_in_synpred13_XQueryParser7199 = new BitSet(
            new long[] { 0x0000000000000002L });
    public static final BitSet FOLLOW_p_NCName_in_synpred14_XQueryParser7218 = new BitSet(new long[] {
            0x0000000000000000L, 0x0000000000000000L, 0x0000000000000000L, 0x0200000000000000L });
    public static final BitSet FOLLOW_COLON_in_synpred14_XQueryParser7220 = new BitSet(
            new long[] { 0x0000000000000002L });
    public static final BitSet FOLLOW_p_NCName_in_synpred15_XQueryParser7238 = new BitSet(
            new long[] { 0x0000000000000002L });
    public static final BitSet FOLLOW_LPAREN_in_synpred16_XQueryParser7494 = new BitSet(
            new long[] { 0x0000000000000002L });
    public static final BitSet FOLLOW_p_OccurrenceIndicator_in_synpred17_XQueryParser9458 = new BitSet(
            new long[] { 0x0000000000000002L });
    public static final BitSet FOLLOW_p_OccurrenceIndicator_in_synpred18_XQueryParser16971 = new BitSet(
            new long[] { 0x0000000000000002L });

}