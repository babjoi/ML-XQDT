// $ANTLR 3.2 Sep 23, 2009 12:02:23 XQueryParser.g 2011-07-24 13:08:46

/*******************************************************************************
 * Copyright (c) 2008, 2009 28msec Inc. and others.
 * All rights reserved. This program and the accompanying materials
 * are made available under the terms of the Eclipse Public License v1.0
 * which accompanies this distribution, and is available at
 * http://www.eclipse.org/legal/epl-v10.html
 *
 * Contributors:
 *     Gabriel Petrovay (28msec) - initial API and implementation
 *     Sam Neth (Mark Logic)
 *******************************************************************************/
package org.eclipse.wst.xquery.internal.core.parser.antlr;


import org.antlr.runtime.*;
import java.util.Stack;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;

import org.antlr.runtime.tree.*;

public class XQueryParser extends XQDTParser {
    public static final String[] tokenNames = new String[] {
        "<invalid>", "<EOR>", "<DOWN>", "<UP>", "L_QuotAttrContentChar", "L_AposAttrContentChar", "L_ElementContentChar", "L_CDataSection", "L_PredefinedEntityRef", "L_CharRef", "ESCAPE_LBRACKET", "ESCAPE_RBRACKET", "ESCAPE_APOS", "ESCAPE_QUOT", "CDATA_START", "CDATA_END", "ANCESTOR", "ANCESTOR_OR_SELF", "AND", "AS", "ASCENDING", "AT", "ATTRIBUTE", "BASE_URI", "BOUNDARY_SPACE", "BY", "CASE", "CAST", "CASTABLE", "CHILD", "COLLATION", "COMMENT", "CONSTRUCTION", "COPY_NAMESPACES", "DECLARE", "DEFAULT", "DESCENDANT", "DESCENDANT_OR_SELF", "DESCENDING", "DIV", "DOCUMENT", "DOCUMENT_NODE", "ELEMENT", "ELSE", "EMPTY", "EMPTY_SEQUENCE", "ENCODING", "EQ", "EVERY", "EXCEPT", "EXTERNAL", "FOLLOWING", "FOLLOWING_SIBLING", "FOR", "FUNCTION", "GE", "GREATEST", "GT", "IDIV", "IF", "IMPORT", "IN", "INHERIT", "INSTANCE", "INTERSECT", "IS", "ITEM", "LAX", "LE", "LEAST", "LET", "LT", "MOD", "MODULE", "NAMESPACE", "NE", "NO_INHERIT", "NO_PRESERVE", "NODE", "OF", "OPTION", "OR", "ORDER", "ORDERED", "ORDERING", "PARENT", "PRECEDING", "PRECEDING_SIBLING", "PRESERVE", "PROCESSING_INSTRUCTION", "RETURN", "SATISFIES", "SCHEMA", "SCHEMA_ATTRIBUTE", "SCHEMA_ELEMENT", "SELF", "SOME", "STABLE", "STRICT", "STRIP", "TEXT", "THEN", "TO", "TREAT", "TYPESWITCH", "UNION", "UNORDERED", "VALIDATE", "VARIABLE", "VERSION", "WHERE", "XQUERY", "CATCH", "CONTEXT", "COUNT", "DECIMAL_FORMAT", "DECIMAL_SEPARATOR", "DETERMINISTIC", "DIGIT", "END", "GROUP", "GROUPING_SEPARATOR", "INFINITY", "MINUS_SIGN", "NAMESPACE_NODE", "NAN", "NEXT", "NONDETERMINISTIC", "ONLY", "OUTER", "PATTERN_SEPARATOR", "PERCENT", "PER_MILLE", "PRIVATE", "PUBLIC", "PREVIOUS", "SLIDING", "START", "SWITCH", "TRY", "TUMBLING", "WHEN", "WINDOW", "ZERO_DIGIT", "AFTER", "BEFORE", "COPY", "DELETE", "FIRST", "INSERT", "INTO", "LAST", "MODIFY", "NODES", "RENAME", "REPLACE", "REVALIDATION", "SKIP", "UPDATING", "VALUE", "WITH", "ALL", "ANY", "CONTAINS", "CONTENT", "DIACRITICS", "DIFFERENT", "DISTANCE", "ENTIRE", "EXACTLY", "FROM", "FT_OPTION", "FTAND", "FTNOT", "FTOR", "INSENSITIVE", "LANGUAGE", "LEVELS", "LOWERCASE", "MOST", "NO", "NOT", "OCCURS", "PARAGRAPH", "PARAGRAPHS", "PHRASE", "RELATIONSHIP", "SAME", "SCORE", "SENSITIVE", "SENTENCE", "SENTENCES", "STEMMING", "STOP", "THESAURUS", "TIMES", "UPPERCASE", "USING", "WEIGHT", "WILDCARDS", "WITHOUT", "WORD", "WORDS", "BLOCK", "CONSTANT", "EXIT", "RETURNING", "SEQUENTIAL", "SET", "SIMPLE", "WHILE", "EVAL", "APPEND_ONLY", "AUTOMATICALLY", "CHECK", "COLLECTION", "CONSTRAINT", "CONST", "EQUALITY", "FOREACH", "FOREIGN", "INDEX", "INTEGRITY", "KEY", "MAINTAINED", "MANUALLY", "MUTABLE", "NON", "ON", "QUEUE", "RANGE", "READ_ONLY", "UNIQUE", "BINARY", "AMP_ER", "APOS_ER", "QUOT_ER", "LPAREN", "RPAREN", "DOLLAR", "LBRACKET", "RBRACKET", "LSQUARE", "RSQUARE", "EQUAL", "BIND", "NOTEQUAL", "AMP", "COMMA", "QUESTION", "STAR", "PLUS", "MINUS", "SMALLER", "GREATER", "SMALLEREQ", "GREATEREQ", "SMALLER_SMALLER", "GREATER_GREATER", "SLASH", "SLASH_SLASH", "DOT", "DOT_DOT", "COLON", "COLON_COLON", "EMPTY_CLOSE_TAG", "CLOSE_TAG", "SEMICOLON", "VBAR", "PRAGMA_START", "PRAGMA_END", "XML_COMMENT_START", "XML_COMMENT_END", "PI_START", "PI_END", "ATTR_SIGN", "CHARREF_DEC", "CHARREF_HEX", "APOS", "QUOT", "NCNameStartChar", "NCNameChar", "L_NCName", "Letter", "HexLetter", "Digit", "Digits", "S", "SU", "L_Pragma", "L_DirCommentConstructor", "L_DirPIConstructor", "L_IntegerLiteral", "L_DecimalLiteral", "L_DoubleLiteral", "L_Comment", "L_AnyChar", "L_QuotStringLiteralChar", "L_AposStringLiteralChar", "LibraryModule", "MainModule", "VersionDecl", "VersionDeclEncoding", "VersionDeclVersion", "ModuleDecl", "Prolog", "DefaultNamespaceDecls", "DefaultNamespaceDecl", "Setters", "Setter", "NamespaceDecls", "NamespaceDecl", "Imports", "FTOptionDecls", "SchemaImport", "SchemaPrefix", "NamespaceName", "DefaultElementNamespace", "AtHints", "ModuleImport", "BaseURIDecl", "OrderedDecls", "VarDecl", "VarType", "VarValue", "VarDefaultValue", "VarConstantDecl", "VarVariableDecl", "FunctionDecl", "ParamList", "ReturnType", "OptionDecl", "TypeDeclaration", "Param", "EnclosedExpr", "QueryBody", "UnaryExpr", "DirElemConstructor", "DirAttributeList", "DirAttributeValue", "DirElemContent", "CommonContent", "SequenceType", "EmptySequenceTest", "KindTest", "ItemTest", "AtomicType", "AtomicOrUnionType", "StringLiteral", "ElementContentChar", "AttributeValueChar", "QName", "Block", "BlockDecls", "BlockVarDecl", "BinaryTest", "EXPLICITLY"
    };
    public static final int INDEX=221;
    public static final int L_CDataSection=7;
    public static final int MINUS=252;
    public static final int NAMESPACE_NODE=124;
    public static final int VarDefaultValue=325;
    public static final int Setters=308;
    public static final int END=119;
    public static final int INTO=150;
    public static final int PATTERN_SEPARATOR=130;
    public static final int VarType=323;
    public static final int GREATER_GREATER=258;
    public static final int ReturnType=330;
    public static final int RENAME=154;
    public static final int INSTANCE=63;
    public static final int TypeDeclaration=332;
    public static final int CONTENT=164;
    public static final int LAX=67;
    public static final int STOP=193;
    public static final int IMPORT=60;
    public static final int BINARY=233;
    public static final int BaseURIDecl=320;
    public static final int ON=228;
    public static final int DOT=261;
    public static final int CONSTRAINT=216;
    public static final int Letter=283;
    public static final int ORDER=82;
    public static final int CASTABLE=28;
    public static final int DIACRITICS=165;
    public static final int Prolog=305;
    public static final int CONSTANT=204;
    public static final int DETERMINISTIC=117;
    public static final int EMPTY_CLOSE_TAG=265;
    public static final int TYPESWITCH=104;
    public static final int MODULE=73;
    public static final int ESCAPE_RBRACKET=11;
    public static final int AMP=247;
    public static final int RPAREN=238;
    public static final int VERSION=109;
    public static final int DefaultElementNamespace=317;
    public static final int DirAttributeList=338;
    public static final int AttributeValueChar=350;
    public static final int XML_COMMENT_START=271;
    public static final int EXACTLY=169;
    public static final int FTNOT=173;
    public static final int DECLARE=34;
    public static final int SchemaPrefix=315;
    public static final int BOUNDARY_SPACE=24;
    public static final int CLOSE_TAG=266;
    public static final int ElementContentChar=349;
    public static final int NONDETERMINISTIC=127;
    public static final int OCCURS=182;
    public static final int UNION=105;
    public static final int STRIP=99;
    public static final int GROUPING_SEPARATOR=121;
    public static final int RANGE=230;
    public static final int HexLetter=284;
    public static final int SAME=187;
    public static final int WHEN=141;
    public static final int DESCENDING=38;
    public static final int DOCUMENT_NODE=41;
    public static final int Imports=312;
    public static final int ANCESTOR_OR_SELF=17;
    public static final int MUTABLE=226;
    public static final int SMALLER_SMALLER=257;
    public static final int RELATIONSHIP=186;
    public static final int ANY=162;
    public static final int CATCH=112;
    public static final int GE=55;
    public static final int ATTR_SIGN=275;
    public static final int ELSE=43;
    public static final int WORD=201;
    public static final int SU=288;
    public static final int PRAGMA_START=269;
    public static final int L_ElementContentChar=6;
    public static final int SENSITIVE=189;
    public static final int EVAL=211;
    public static final int SELF=95;
    public static final int DISTANCE=167;
    public static final int NamespaceName=316;
    public static final int COUNT=114;
    public static final int TEXT=100;
    public static final int COLON=263;
    public static final int PARENT=85;
    public static final int SET=208;
    public static final int FTOR=174;
    public static final int SCORE=188;
    public static final int AtomicOrUnionType=347;
    public static final int UNIQUE=232;
    public static final int FOREACH=219;
    public static final int PUBLIC=134;
    public static final int PERCENT=131;
    public static final int EMPTY_SEQUENCE=45;
    public static final int EXTERNAL=50;
    public static final int Digit=285;
    public static final int LAST=151;
    public static final int COLLECTION=215;
    public static final int DOT_DOT=262;
    public static final int DECIMAL_SEPARATOR=116;
    public static final int CAST=27;
    public static final int L_CharRef=9;
    public static final int AUTOMATICALLY=213;
    public static final int OptionDecl=331;
    public static final int LBRACKET=240;
    public static final int MOD=72;
    public static final int EXCEPT=49;
    public static final int QUESTION=249;
    public static final int OR=81;
    public static final int KindTest=344;
    public static final int AFTER=144;
    public static final int S=287;
    public static final int SMALLEREQ=255;
    public static final int BLOCK=203;
    public static final int Setter=309;
    public static final int BY=25;
    public static final int SCHEMA_ELEMENT=94;
    public static final int INFINITY=122;
    public static final int EnclosedExpr=334;
    public static final int WEIGHT=198;
    public static final int TUMBLING=140;
    public static final int NO_INHERIT=76;
    public static final int LPAREN=237;
    public static final int UPPERCASE=196;
    public static final int PRECEDING_SIBLING=87;
    public static final int L_DecimalLiteral=293;
    public static final int EXIT=205;
    public static final int PI_START=273;
    public static final int APOS=278;
    public static final int SKIP=157;
    public static final int STEMMING=192;
    public static final int FROM=170;
    public static final int DELETE=147;
    public static final int TIMES=195;
    public static final int EMPTY=44;
    public static final int NamespaceDecl=311;
    public static final int ASCENDING=20;
    public static final int NamespaceDecls=310;
    public static final int QUEUE=229;
    public static final int WHILE=210;
    public static final int ESCAPE_QUOT=13;
    public static final int ONLY=128;
    public static final int SchemaImport=314;
    public static final int SENTENCES=191;
    public static final int APOS_ER=235;
    public static final int NE=75;
    public static final int COMMENT=31;
    public static final int Param=333;
    public static final int RETURNING=206;
    public static final int L_AnyChar=296;
    public static final int RSQUARE=243;
    public static final int ESCAPE_APOS=12;
    public static final int NCNameChar=281;
    public static final int EQUALITY=218;
    public static final int ENTIRE=168;
    public static final int WITH=160;
    public static final int IN=61;
    public static final int DirElemContent=340;
    public static final int SOME=96;
    public static final int MOST=179;
    public static final int NEXT=126;
    public static final int RETURN=90;
    public static final int LET=70;
    public static final int IF=59;
    public static final int QName=351;
    public static final int NODE=78;
    public static final int PER_MILLE=132;
    public static final int FOR=53;
    public static final int CHARREF_HEX=277;
    public static final int PRESERVE=88;
    public static final int DEFAULT=35;
    public static final int L_AposAttrContentChar=5;
    public static final int LEVELS=177;
    public static final int BEFORE=145;
    public static final int ATTRIBUTE=22;
    public static final int CHILD=29;
    public static final int Digits=286;
    public static final int CDATA_START=14;
    public static final int TRY=139;
    public static final int NOT=181;
    public static final int OPTION=80;
    public static final int L_DirCommentConstructor=290;
    public static final int COMMA=248;
    public static final int CONST=217;
    public static final int ELEMENT=42;
    public static final int INSENSITIVE=175;
    public static final int AS=19;
    public static final int DOCUMENT=40;
    public static final int ENCODING=46;
    public static final int NAN=125;
    public static final int AtomicType=346;
    public static final int TREAT=103;
    public static final int NAMESPACE=74;
    public static final int LEAST=69;
    public static final int THEN=101;
    public static final int PI_END=274;
    public static final int GREATEREQ=256;
    public static final int WORDS=202;
    public static final int SequenceType=342;
    public static final int FOREIGN=220;
    public static final int FTOptionDecls=313;
    public static final int PARAGRAPHS=184;
    public static final int OrderedDecls=321;
    public static final int NCNameStartChar=280;
    public static final int PRIVATE=133;
    public static final int AND=18;
    public static final int BASE_URI=23;
    public static final int TO=102;
    public static final int DefaultNamespaceDecls=306;
    public static final int ItemTest=345;
    public static final int FUNCTION=54;
    public static final int L_Pragma=289;
    public static final int READ_ONLY=231;
    public static final int ParamList=329;
    public static final int LANGUAGE=176;
    public static final int QueryBody=335;
    public static final int RBRACKET=241;
    public static final int LE=68;
    public static final int LOWERCASE=178;
    public static final int SCHEMA=92;
    public static final int CONSTRUCTION=32;
    public static final int WILDCARDS=199;
    public static final int VersionDecl=301;
    public static final int PLUS=251;
    public static final int VarDecl=322;
    public static final int DIFFERENT=166;
    public static final int L_DoubleLiteral=294;
    public static final int NON=227;
    public static final int AT=21;
    public static final int INTERSECT=64;
    public static final int AtHints=318;
    public static final int L_QuotAttrContentChar=4;
    public static final int LSQUARE=242;
    public static final int GREATEST=56;
    public static final int APPEND_ONLY=212;
    public static final int MAINTAINED=224;
    public static final int EQ=47;
    public static final int L_AposStringLiteralChar=298;
    public static final int ESCAPE_LBRACKET=10;
    public static final int LT=71;
    public static final int OF=79;
    public static final int DOLLAR=239;
    public static final int WINDOW=142;
    public static final int FOLLOWING=51;
    public static final int CASE=26;
    public static final int CDATA_END=15;
    public static final int UnaryExpr=336;
    public static final int DESCENDANT_OR_SELF=37;
    public static final int EQUAL=244;
    public static final int SEMICOLON=267;
    public static final int THESAURUS=194;
    public static final int CHECK=214;
    public static final int KEY=223;
    public static final int FTAND=172;
    public static final int FIRST=148;
    public static final int SIMPLE=209;
    public static final int PARAGRAPH=183;
    public static final int DIV=39;
    public static final int BlockVarDecl=354;
    public static final int ALL=161;
    public static final int FT_OPTION=171;
    public static final int REVALIDATION=156;
    public static final int INSERT=149;
    public static final int QUOT=279;
    public static final int VersionDeclVersion=303;
    public static final int WHERE=110;
    public static final int DefaultNamespaceDecl=307;
    public static final int COPY=146;
    public static final int PREVIOUS=135;
    public static final int WITHOUT=200;
    public static final int AMP_ER=234;
    public static final int USING=197;
    public static final int SCHEMA_ATTRIBUTE=93;
    public static final int EVERY=48;
    public static final int CONTEXT=113;
    public static final int XQUERY=111;
    public static final int INTEGRITY=222;
    public static final int SLIDING=136;
    public static final int MainModule=300;
    public static final int UPDATING=158;
    public static final int IDIV=58;
    public static final int PRAGMA_END=270;
    public static final int BlockDecls=353;
    public static final int SATISFIES=91;
    public static final int EXPLICITLY=356;
    public static final int VALUE=159;
    public static final int DESCENDANT=36;
    public static final int VarVariableDecl=327;
    public static final int STRICT=98;
    public static final int NOTEQUAL=246;
    public static final int COLON_COLON=264;
    public static final int L_PredefinedEntityRef=8;
    public static final int L_IntegerLiteral=292;
    public static final int ModuleImport=319;
    public static final int FOLLOWING_SIBLING=52;
    public static final int STABLE=97;
    public static final int CHARREF_DEC=276;
    public static final int ModuleDecl=304;
    public static final int DECIMAL_FORMAT=115;
    public static final int START=137;
    public static final int EmptySequenceTest=343;
    public static final int GROUP=120;
    public static final int VALIDATE=107;
    public static final int VarValue=324;
    public static final int CONTAINS=163;
    public static final int PRECEDING=86;
    public static final int ZERO_DIGIT=143;
    public static final int MINUS_SIGN=123;
    public static final int GREATER=254;
    public static final int VBAR=268;
    public static final int DIGIT=118;
    public static final int COPY_NAMESPACES=33;
    public static final int ORDERING=84;
    public static final int NO_PRESERVE=77;
    public static final int UNORDERED=106;
    public static final int OUTER=129;
    public static final int DirAttributeValue=339;
    public static final int VarConstantDecl=326;
    public static final int SENTENCE=190;
    public static final int L_NCName=282;
    public static final int INHERIT=62;
    public static final int SLASH=259;
    public static final int SWITCH=138;
    public static final int LibraryModule=299;
    public static final int L_DirPIConstructor=291;
    public static final int IS=65;
    public static final int REPLACE=155;
    public static final int NO=180;
    public static final int GT=57;
    public static final int PHRASE=185;
    public static final int StringLiteral=348;
    public static final int L_QuotStringLiteralChar=297;
    public static final int DirElemConstructor=337;
    public static final int ITEM=66;
    public static final int ORDERED=83;
    public static final int PROCESSING_INSTRUCTION=89;
    public static final int Block=352;
    public static final int CommonContent=341;
    public static final int COLLATION=30;
    public static final int SLASH_SLASH=260;
    public static final int ANCESTOR=16;
    public static final int SEQUENTIAL=207;
    public static final int SMALLER=253;
    public static final int NODES=153;
    public static final int MANUALLY=225;
    public static final int BinaryTest=355;
    public static final int VersionDeclEncoding=302;
    public static final int VARIABLE=108;
    public static final int EOF=-1;
    public static final int MODIFY=152;
    public static final int QUOT_ER=236;
    public static final int STAR=250;
    public static final int BIND=245;
    public static final int L_Comment=295;
    public static final int FunctionDecl=328;
    public static final int XML_COMMENT_END=272;

    // delegates
    // delegators


        public XQueryParser(TokenStream input) {
            this(input, new RecognizerSharedState());
        }
        public XQueryParser(TokenStream input, RecognizerSharedState state) {
            super(input, state);
             
        }
        
    protected TreeAdaptor adaptor = new CommonTreeAdaptor();

    public void setTreeAdaptor(TreeAdaptor adaptor) {
        this.adaptor = adaptor;
    }
    public TreeAdaptor getTreeAdaptor() {
        return adaptor;
    }

    public String[] getTokenNames() { return XQueryParser.tokenNames; }
    public String getGrammarFileName() { return "XQueryParser.g"; }


    // dummy list for warning elimination
    List<Stack<Object>> dummy1 = new ArrayList<Stack<Object>>();
    Map<Object, Object> dummy2 = new HashMap<Object, Object>();


    public static class p_Module_return extends ParserRuleReturnScope {
        XQDTCommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "p_Module"
    // XQueryParser.g:130:1: p_Module : (vd= p_VersionDecl )? (lm= p_LibraryModule[$vd.tree] -> | mm= p_MainModule[$vd.tree] ->) EOF ;
    public final XQueryParser.p_Module_return p_Module() throws RecognitionException {
        XQueryParser.p_Module_return retval = new XQueryParser.p_Module_return();
        retval.start = input.LT(1);

        XQDTCommonTree root_0 = null;

        CommonToken EOF1=null;
        XQueryParser.p_VersionDecl_return vd = null;

        XQueryParser.p_LibraryModule_return lm = null;

        XQueryParser.p_MainModule_return mm = null;


        XQDTCommonTree EOF1_tree=null;
        RewriteRuleTokenStream stream_EOF=new RewriteRuleTokenStream(adaptor,"token EOF");
        RewriteRuleSubtreeStream stream_p_MainModule=new RewriteRuleSubtreeStream(adaptor,"rule p_MainModule");
        RewriteRuleSubtreeStream stream_p_LibraryModule=new RewriteRuleSubtreeStream(adaptor,"rule p_LibraryModule");
        RewriteRuleSubtreeStream stream_p_VersionDecl=new RewriteRuleSubtreeStream(adaptor,"rule p_VersionDecl");
        try {
            // XQueryParser.g:131:9: ( (vd= p_VersionDecl )? (lm= p_LibraryModule[$vd.tree] -> | mm= p_MainModule[$vd.tree] ->) EOF )
            // XQueryParser.g:131:11: (vd= p_VersionDecl )? (lm= p_LibraryModule[$vd.tree] -> | mm= p_MainModule[$vd.tree] ->) EOF
            {
            // XQueryParser.g:131:13: (vd= p_VersionDecl )?
            int alt1=2;
            int LA1_0 = input.LA(1);

            if ( (LA1_0==XQUERY) ) {
                int LA1_1 = input.LA(2);

                if ( (LA1_1==ENCODING||LA1_1==VERSION) ) {
                    alt1=1;
                }
            }
            switch (alt1) {
                case 1 :
                    // XQueryParser.g:131:13: vd= p_VersionDecl
                    {
                    pushFollow(FOLLOW_p_VersionDecl_in_p_Module560);
                    vd=p_VersionDecl();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_p_VersionDecl.add(vd.getTree());

                    }
                    break;

            }

            // XQueryParser.g:132:13: (lm= p_LibraryModule[$vd.tree] -> | mm= p_MainModule[$vd.tree] ->)
            int alt2=2;
            int LA2_0 = input.LA(1);

            if ( (LA2_0==MODULE) ) {
                int LA2_1 = input.LA(2);

                if ( (LA2_1==NAMESPACE) ) {
                    alt2=1;
                }
                else if ( (LA2_1==EOF||LA2_1==AND||(LA2_1>=CAST && LA2_1<=CASTABLE)||LA2_1==DIV||LA2_1==EQ||LA2_1==EXCEPT||LA2_1==GE||(LA2_1>=GT && LA2_1<=IDIV)||(LA2_1>=INSTANCE && LA2_1<=IS)||LA2_1==LE||(LA2_1>=LT && LA2_1<=MOD)||LA2_1==NE||LA2_1==OR||(LA2_1>=TO && LA2_1<=TREAT)||LA2_1==UNION||LA2_1==CONTAINS||LA2_1==LPAREN||LA2_1==LSQUARE||LA2_1==EQUAL||LA2_1==NOTEQUAL||LA2_1==COMMA||(LA2_1>=STAR && LA2_1<=SLASH_SLASH)||LA2_1==COLON||(LA2_1>=SEMICOLON && LA2_1<=VBAR)) ) {
                    alt2=2;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 2, 1, input);

                    throw nvae;
                }
            }
            else if ( ((LA2_0>=ANCESTOR && LA2_0<=MOD)||(LA2_0>=NAMESPACE && LA2_0<=DECIMAL_SEPARATOR)||(LA2_0>=DIGIT && LA2_0<=NEXT)||(LA2_0>=ONLY && LA2_0<=EXIT)||(LA2_0>=SEQUENTIAL && LA2_0<=MAINTAINED)||(LA2_0>=MUTABLE && LA2_0<=LPAREN)||LA2_0==DOLLAR||(LA2_0>=STAR && LA2_0<=SMALLER)||(LA2_0>=SLASH && LA2_0<=DOT_DOT)||LA2_0==ATTR_SIGN||(LA2_0>=APOS && LA2_0<=QUOT)||LA2_0==L_NCName||(LA2_0>=L_Pragma && LA2_0<=L_DoubleLiteral)||LA2_0==EXPLICITLY) ) {
                alt2=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 2, 0, input);

                throw nvae;
            }
            switch (alt2) {
                case 1 :
                    // XQueryParser.g:133:17: lm= p_LibraryModule[$vd.tree]
                    {
                    pushFollow(FOLLOW_p_LibraryModule_in_p_Module595);
                    lm=p_LibraryModule((vd!=null?((XQDTCommonTree)vd.tree):null));

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_p_LibraryModule.add(lm.getTree());


                    // AST REWRITE
                    // elements: 
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (XQDTCommonTree)adaptor.nil();
                    // 133:49: ->
                    {
                        adaptor.addChild(root_0, (lm!=null?((XQDTCommonTree)lm.tree):null));

                    }

                    retval.tree = root_0;}
                    }
                    break;
                case 2 :
                    // XQueryParser.g:134:15: mm= p_MainModule[$vd.tree]
                    {
                    pushFollow(FOLLOW_p_MainModule_in_p_Module621);
                    mm=p_MainModule((vd!=null?((XQDTCommonTree)vd.tree):null));

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_p_MainModule.add(mm.getTree());


                    // AST REWRITE
                    // elements: 
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (XQDTCommonTree)adaptor.nil();
                    // 134:49: ->
                    {
                        adaptor.addChild(root_0, (mm!=null?((XQDTCommonTree)mm.tree):null));

                    }

                    retval.tree = root_0;}
                    }
                    break;

            }

            EOF1=(CommonToken)match(input,EOF,FOLLOW_EOF_in_p_Module650); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_EOF.add(EOF1);


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (XQDTCommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (XQDTCommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "p_Module"

    public static class p_VersionDecl_return extends ParserRuleReturnScope {
        XQDTCommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "p_VersionDecl"
    // XQueryParser.g:139:1: p_VersionDecl : k+= XQUERY ( (k+= ENCODING enc= p_StringLiteral ) | (k+= VERSION ver= p_StringLiteral (k+= ENCODING enc= p_StringLiteral )? ) ) SEMICOLON -> ^( VersionDecl ^( VersionDeclVersion ( $ver)? ) ^( VersionDeclEncoding ( $enc)? ) ) ;
    public final XQueryParser.p_VersionDecl_return p_VersionDecl() throws RecognitionException {
        XQueryParser.p_VersionDecl_return retval = new XQueryParser.p_VersionDecl_return();
        retval.start = input.LT(1);

        XQDTCommonTree root_0 = null;

        CommonToken SEMICOLON2=null;
        CommonToken k=null;
        List list_k=null;
        XQueryParser.p_StringLiteral_return enc = null;

        XQueryParser.p_StringLiteral_return ver = null;


        XQDTCommonTree SEMICOLON2_tree=null;
        XQDTCommonTree k_tree=null;
        RewriteRuleTokenStream stream_VERSION=new RewriteRuleTokenStream(adaptor,"token VERSION");
        RewriteRuleTokenStream stream_ENCODING=new RewriteRuleTokenStream(adaptor,"token ENCODING");
        RewriteRuleTokenStream stream_SEMICOLON=new RewriteRuleTokenStream(adaptor,"token SEMICOLON");
        RewriteRuleTokenStream stream_XQUERY=new RewriteRuleTokenStream(adaptor,"token XQUERY");
        RewriteRuleSubtreeStream stream_p_StringLiteral=new RewriteRuleSubtreeStream(adaptor,"rule p_StringLiteral");
        try {
            // XQueryParser.g:140:9: (k+= XQUERY ( (k+= ENCODING enc= p_StringLiteral ) | (k+= VERSION ver= p_StringLiteral (k+= ENCODING enc= p_StringLiteral )? ) ) SEMICOLON -> ^( VersionDecl ^( VersionDeclVersion ( $ver)? ) ^( VersionDeclEncoding ( $enc)? ) ) )
            // XQueryParser.g:140:11: k+= XQUERY ( (k+= ENCODING enc= p_StringLiteral ) | (k+= VERSION ver= p_StringLiteral (k+= ENCODING enc= p_StringLiteral )? ) ) SEMICOLON
            {
            k=(CommonToken)match(input,XQUERY,FOLLOW_XQUERY_in_p_VersionDecl678); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_XQUERY.add(k);

            if (list_k==null) list_k=new ArrayList();
            list_k.add(k);

            // XQueryParser.g:140:21: ( (k+= ENCODING enc= p_StringLiteral ) | (k+= VERSION ver= p_StringLiteral (k+= ENCODING enc= p_StringLiteral )? ) )
            int alt4=2;
            int LA4_0 = input.LA(1);

            if ( (LA4_0==ENCODING) ) {
                alt4=1;
            }
            else if ( (LA4_0==VERSION) ) {
                alt4=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 4, 0, input);

                throw nvae;
            }
            switch (alt4) {
                case 1 :
                    // XQueryParser.g:140:22: (k+= ENCODING enc= p_StringLiteral )
                    {
                    // XQueryParser.g:140:22: (k+= ENCODING enc= p_StringLiteral )
                    // XQueryParser.g:140:23: k+= ENCODING enc= p_StringLiteral
                    {
                    k=(CommonToken)match(input,ENCODING,FOLLOW_ENCODING_in_p_VersionDecl684); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_ENCODING.add(k);

                    if (list_k==null) list_k=new ArrayList();
                    list_k.add(k);

                    pushFollow(FOLLOW_p_StringLiteral_in_p_VersionDecl688);
                    enc=p_StringLiteral();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_p_StringLiteral.add(enc.getTree());

                    }


                    }
                    break;
                case 2 :
                    // XQueryParser.g:141:13: (k+= VERSION ver= p_StringLiteral (k+= ENCODING enc= p_StringLiteral )? )
                    {
                    // XQueryParser.g:141:13: (k+= VERSION ver= p_StringLiteral (k+= ENCODING enc= p_StringLiteral )? )
                    // XQueryParser.g:141:14: k+= VERSION ver= p_StringLiteral (k+= ENCODING enc= p_StringLiteral )?
                    {
                    k=(CommonToken)match(input,VERSION,FOLLOW_VERSION_in_p_VersionDecl709); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_VERSION.add(k);

                    if (list_k==null) list_k=new ArrayList();
                    list_k.add(k);

                    pushFollow(FOLLOW_p_StringLiteral_in_p_VersionDecl713);
                    ver=p_StringLiteral();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_p_StringLiteral.add(ver.getTree());
                    if ( state.backtracking==0 ) {
                      setLanguageVersion(((XQDTCommonTree)ver.getTree()).getChild(0).getText());
                    }
                    // XQueryParser.g:141:122: (k+= ENCODING enc= p_StringLiteral )?
                    int alt3=2;
                    int LA3_0 = input.LA(1);

                    if ( (LA3_0==ENCODING) ) {
                        alt3=1;
                    }
                    switch (alt3) {
                        case 1 :
                            // XQueryParser.g:141:123: k+= ENCODING enc= p_StringLiteral
                            {
                            k=(CommonToken)match(input,ENCODING,FOLLOW_ENCODING_in_p_VersionDecl720); if (state.failed) return retval; 
                            if ( state.backtracking==0 ) stream_ENCODING.add(k);

                            if (list_k==null) list_k=new ArrayList();
                            list_k.add(k);

                            pushFollow(FOLLOW_p_StringLiteral_in_p_VersionDecl724);
                            enc=p_StringLiteral();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_p_StringLiteral.add(enc.getTree());

                            }
                            break;

                    }


                    }


                    }
                    break;

            }

            SEMICOLON2=(CommonToken)match(input,SEMICOLON,FOLLOW_SEMICOLON_in_p_VersionDecl730); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_SEMICOLON.add(SEMICOLON2);

            if ( state.backtracking==0 ) {
              ak(list_k);
            }


            // AST REWRITE
            // elements: enc, ver
            // token labels: 
            // rule labels: ver, retval, enc
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_ver=new RewriteRuleSubtreeStream(adaptor,"rule ver",ver!=null?ver.tree:null);
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
            RewriteRuleSubtreeStream stream_enc=new RewriteRuleSubtreeStream(adaptor,"rule enc",enc!=null?enc.tree:null);

            root_0 = (XQDTCommonTree)adaptor.nil();
            // 142:17: -> ^( VersionDecl ^( VersionDeclVersion ( $ver)? ) ^( VersionDeclEncoding ( $enc)? ) )
            {
                // XQueryParser.g:142:20: ^( VersionDecl ^( VersionDeclVersion ( $ver)? ) ^( VersionDeclEncoding ( $enc)? ) )
                {
                XQDTCommonTree root_1 = (XQDTCommonTree)adaptor.nil();
                root_1 = (XQDTCommonTree)adaptor.becomeRoot((XQDTCommonTree)adaptor.create(VersionDecl, "VersionDecl"), root_1);

                // XQueryParser.g:142:34: ^( VersionDeclVersion ( $ver)? )
                {
                XQDTCommonTree root_2 = (XQDTCommonTree)adaptor.nil();
                root_2 = (XQDTCommonTree)adaptor.becomeRoot((XQDTCommonTree)adaptor.create(VersionDeclVersion, "VersionDeclVersion"), root_2);

                // XQueryParser.g:142:55: ( $ver)?
                if ( stream_ver.hasNext() ) {
                    adaptor.addChild(root_2, stream_ver.nextTree());

                }
                stream_ver.reset();

                adaptor.addChild(root_1, root_2);
                }
                // XQueryParser.g:142:62: ^( VersionDeclEncoding ( $enc)? )
                {
                XQDTCommonTree root_2 = (XQDTCommonTree)adaptor.nil();
                root_2 = (XQDTCommonTree)adaptor.becomeRoot((XQDTCommonTree)adaptor.create(VersionDeclEncoding, "VersionDeclEncoding"), root_2);

                // XQueryParser.g:142:84: ( $enc)?
                if ( stream_enc.hasNext() ) {
                    adaptor.addChild(root_2, stream_enc.nextTree());

                }
                stream_enc.reset();

                adaptor.addChild(root_1, root_2);
                }

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (XQDTCommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (XQDTCommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "p_VersionDecl"

    public static class p_MainModule_return extends ParserRuleReturnScope {
        XQDTCommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "p_MainModule"
    // XQueryParser.g:146:1: p_MainModule[CommonTree vd] : pm_Prolog p_QueryBody -> ^( MainModule pm_Prolog p_QueryBody ) ;
    public final XQueryParser.p_MainModule_return p_MainModule(CommonTree vd) throws RecognitionException {
        XQueryParser.p_MainModule_return retval = new XQueryParser.p_MainModule_return();
        retval.start = input.LT(1);

        XQDTCommonTree root_0 = null;

        XQueryParser.pm_Prolog_return pm_Prolog3 = null;

        XQueryParser.p_QueryBody_return p_QueryBody4 = null;


        RewriteRuleSubtreeStream stream_pm_Prolog=new RewriteRuleSubtreeStream(adaptor,"rule pm_Prolog");
        RewriteRuleSubtreeStream stream_p_QueryBody=new RewriteRuleSubtreeStream(adaptor,"rule p_QueryBody");
        try {
            // XQueryParser.g:147:9: ( pm_Prolog p_QueryBody -> ^( MainModule pm_Prolog p_QueryBody ) )
            // XQueryParser.g:147:11: pm_Prolog p_QueryBody
            {
            pushFollow(FOLLOW_pm_Prolog_in_p_MainModule798);
            pm_Prolog3=pm_Prolog();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_pm_Prolog.add(pm_Prolog3.getTree());
            pushFollow(FOLLOW_p_QueryBody_in_p_MainModule800);
            p_QueryBody4=p_QueryBody();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_p_QueryBody.add(p_QueryBody4.getTree());


            // AST REWRITE
            // elements: p_QueryBody, pm_Prolog
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (XQDTCommonTree)adaptor.nil();
            // 148:17: -> ^( MainModule pm_Prolog p_QueryBody )
            {
                // XQueryParser.g:148:20: ^( MainModule pm_Prolog p_QueryBody )
                {
                XQDTCommonTree root_1 = (XQDTCommonTree)adaptor.nil();
                root_1 = (XQDTCommonTree)adaptor.becomeRoot((XQDTCommonTree)adaptor.create(MainModule, "MainModule"), root_1);

                adaptor.addChild(root_1, vd);
                adaptor.addChild(root_1, stream_pm_Prolog.nextTree());
                adaptor.addChild(root_1, stream_p_QueryBody.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (XQDTCommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (XQDTCommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "p_MainModule"

    public static class p_LibraryModule_return extends ParserRuleReturnScope {
        XQDTCommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "p_LibraryModule"
    // XQueryParser.g:152:1: p_LibraryModule[CommonTree vd] : p_ModuleDecl pm_Prolog -> ^( LibraryModule p_ModuleDecl pm_Prolog ) ;
    public final XQueryParser.p_LibraryModule_return p_LibraryModule(CommonTree vd) throws RecognitionException {
        XQueryParser.p_LibraryModule_return retval = new XQueryParser.p_LibraryModule_return();
        retval.start = input.LT(1);

        XQDTCommonTree root_0 = null;

        XQueryParser.p_ModuleDecl_return p_ModuleDecl5 = null;

        XQueryParser.pm_Prolog_return pm_Prolog6 = null;


        RewriteRuleSubtreeStream stream_pm_Prolog=new RewriteRuleSubtreeStream(adaptor,"rule pm_Prolog");
        RewriteRuleSubtreeStream stream_p_ModuleDecl=new RewriteRuleSubtreeStream(adaptor,"rule p_ModuleDecl");
        try {
            // XQueryParser.g:153:9: ( p_ModuleDecl pm_Prolog -> ^( LibraryModule p_ModuleDecl pm_Prolog ) )
            // XQueryParser.g:153:11: p_ModuleDecl pm_Prolog
            {
            pushFollow(FOLLOW_p_ModuleDecl_in_p_LibraryModule856);
            p_ModuleDecl5=p_ModuleDecl();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_p_ModuleDecl.add(p_ModuleDecl5.getTree());
            pushFollow(FOLLOW_pm_Prolog_in_p_LibraryModule858);
            pm_Prolog6=pm_Prolog();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_pm_Prolog.add(pm_Prolog6.getTree());


            // AST REWRITE
            // elements: pm_Prolog, p_ModuleDecl
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (XQDTCommonTree)adaptor.nil();
            // 154:17: -> ^( LibraryModule p_ModuleDecl pm_Prolog )
            {
                // XQueryParser.g:154:20: ^( LibraryModule p_ModuleDecl pm_Prolog )
                {
                XQDTCommonTree root_1 = (XQDTCommonTree)adaptor.nil();
                root_1 = (XQDTCommonTree)adaptor.becomeRoot((XQDTCommonTree)adaptor.create(LibraryModule, "LibraryModule"), root_1);

                adaptor.addChild(root_1, vd);
                adaptor.addChild(root_1, stream_p_ModuleDecl.nextTree());
                adaptor.addChild(root_1, stream_pm_Prolog.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (XQDTCommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (XQDTCommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "p_LibraryModule"

    public static class p_ModuleDecl_return extends ParserRuleReturnScope {
        XQDTCommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "p_ModuleDecl"
    // XQueryParser.g:158:1: p_ModuleDecl : k+= MODULE k+= NAMESPACE p_NCName EQUAL p_StringLiteral SEMICOLON -> ^( ModuleDecl p_NCName p_StringLiteral ) ;
    public final XQueryParser.p_ModuleDecl_return p_ModuleDecl() throws RecognitionException {
        XQueryParser.p_ModuleDecl_return retval = new XQueryParser.p_ModuleDecl_return();
        retval.start = input.LT(1);

        XQDTCommonTree root_0 = null;

        CommonToken EQUAL8=null;
        CommonToken SEMICOLON10=null;
        CommonToken k=null;
        List list_k=null;
        XQueryParser.p_NCName_return p_NCName7 = null;

        XQueryParser.p_StringLiteral_return p_StringLiteral9 = null;


        XQDTCommonTree EQUAL8_tree=null;
        XQDTCommonTree SEMICOLON10_tree=null;
        XQDTCommonTree k_tree=null;
        RewriteRuleTokenStream stream_NAMESPACE=new RewriteRuleTokenStream(adaptor,"token NAMESPACE");
        RewriteRuleTokenStream stream_EQUAL=new RewriteRuleTokenStream(adaptor,"token EQUAL");
        RewriteRuleTokenStream stream_SEMICOLON=new RewriteRuleTokenStream(adaptor,"token SEMICOLON");
        RewriteRuleTokenStream stream_MODULE=new RewriteRuleTokenStream(adaptor,"token MODULE");
        RewriteRuleSubtreeStream stream_p_NCName=new RewriteRuleSubtreeStream(adaptor,"rule p_NCName");
        RewriteRuleSubtreeStream stream_p_StringLiteral=new RewriteRuleSubtreeStream(adaptor,"rule p_StringLiteral");
        try {
            // XQueryParser.g:159:9: (k+= MODULE k+= NAMESPACE p_NCName EQUAL p_StringLiteral SEMICOLON -> ^( ModuleDecl p_NCName p_StringLiteral ) )
            // XQueryParser.g:159:11: k+= MODULE k+= NAMESPACE p_NCName EQUAL p_StringLiteral SEMICOLON
            {
            k=(CommonToken)match(input,MODULE,FOLLOW_MODULE_in_p_ModuleDecl914); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_MODULE.add(k);

            if (list_k==null) list_k=new ArrayList();
            list_k.add(k);

            k=(CommonToken)match(input,NAMESPACE,FOLLOW_NAMESPACE_in_p_ModuleDecl918); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_NAMESPACE.add(k);

            if (list_k==null) list_k=new ArrayList();
            list_k.add(k);

            pushFollow(FOLLOW_p_NCName_in_p_ModuleDecl920);
            p_NCName7=p_NCName();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_p_NCName.add(p_NCName7.getTree());
            EQUAL8=(CommonToken)match(input,EQUAL,FOLLOW_EQUAL_in_p_ModuleDecl922); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_EQUAL.add(EQUAL8);

            pushFollow(FOLLOW_p_StringLiteral_in_p_ModuleDecl924);
            p_StringLiteral9=p_StringLiteral();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_p_StringLiteral.add(p_StringLiteral9.getTree());
            SEMICOLON10=(CommonToken)match(input,SEMICOLON,FOLLOW_SEMICOLON_in_p_ModuleDecl926); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_SEMICOLON.add(SEMICOLON10);

            if ( state.backtracking==0 ) {
              ak(list_k);
            }


            // AST REWRITE
            // elements: p_NCName, p_StringLiteral
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (XQDTCommonTree)adaptor.nil();
            // 160:17: -> ^( ModuleDecl p_NCName p_StringLiteral )
            {
                // XQueryParser.g:160:21: ^( ModuleDecl p_NCName p_StringLiteral )
                {
                XQDTCommonTree root_1 = (XQDTCommonTree)adaptor.nil();
                root_1 = (XQDTCommonTree)adaptor.becomeRoot((XQDTCommonTree)adaptor.create(ModuleDecl, "ModuleDecl"), root_1);

                adaptor.addChild(root_1, stream_p_NCName.nextTree());
                adaptor.addChild(root_1, stream_p_StringLiteral.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (XQDTCommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (XQDTCommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "p_ModuleDecl"

    public static class pm_Prolog_return extends ParserRuleReturnScope {
        XQDTCommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "pm_Prolog"
    // XQueryParser.g:166:1: pm_Prolog : ( (dnd+= pm_DefaultNamespaceDecl | s+= p_Setter | nd+= pm_NamespaceDecl | i+= p_Import | fto+= pm_FTOptionDecl ) )* od= pg_OrderedDecl -> ^( Prolog ^( DefaultNamespaceDecls ( $dnd)* ) ^( Setters ( $s)* ) ^( NamespaceDecls ( $nd)* ) ^( Imports ( $i)* ) ^( FTOptionDecls ( $fto)* ) ^( OrderedDecls ( $od)* ) ) ;
    public final XQueryParser.pm_Prolog_return pm_Prolog() throws RecognitionException {
        XQueryParser.pm_Prolog_return retval = new XQueryParser.pm_Prolog_return();
        retval.start = input.LT(1);

        XQDTCommonTree root_0 = null;

        List list_dnd=null;
        List list_s=null;
        List list_nd=null;
        List list_i=null;
        List list_fto=null;
        XQueryParser.pg_OrderedDecl_return od = null;

        RuleReturnScope dnd = null;
        RuleReturnScope s = null;
        RuleReturnScope nd = null;
        RuleReturnScope i = null;
        RuleReturnScope fto = null;
        RewriteRuleSubtreeStream stream_p_Import=new RewriteRuleSubtreeStream(adaptor,"rule p_Import");
        RewriteRuleSubtreeStream stream_pg_OrderedDecl=new RewriteRuleSubtreeStream(adaptor,"rule pg_OrderedDecl");
        RewriteRuleSubtreeStream stream_pm_DefaultNamespaceDecl=new RewriteRuleSubtreeStream(adaptor,"rule pm_DefaultNamespaceDecl");
        RewriteRuleSubtreeStream stream_pm_NamespaceDecl=new RewriteRuleSubtreeStream(adaptor,"rule pm_NamespaceDecl");
        RewriteRuleSubtreeStream stream_pm_FTOptionDecl=new RewriteRuleSubtreeStream(adaptor,"rule pm_FTOptionDecl");
        RewriteRuleSubtreeStream stream_p_Setter=new RewriteRuleSubtreeStream(adaptor,"rule p_Setter");
        try {
            // XQueryParser.g:167:9: ( ( (dnd+= pm_DefaultNamespaceDecl | s+= p_Setter | nd+= pm_NamespaceDecl | i+= p_Import | fto+= pm_FTOptionDecl ) )* od= pg_OrderedDecl -> ^( Prolog ^( DefaultNamespaceDecls ( $dnd)* ) ^( Setters ( $s)* ) ^( NamespaceDecls ( $nd)* ) ^( Imports ( $i)* ) ^( FTOptionDecls ( $fto)* ) ^( OrderedDecls ( $od)* ) ) )
            // XQueryParser.g:167:11: ( (dnd+= pm_DefaultNamespaceDecl | s+= p_Setter | nd+= pm_NamespaceDecl | i+= p_Import | fto+= pm_FTOptionDecl ) )* od= pg_OrderedDecl
            {
            // XQueryParser.g:167:11: ( (dnd+= pm_DefaultNamespaceDecl | s+= p_Setter | nd+= pm_NamespaceDecl | i+= p_Import | fto+= pm_FTOptionDecl ) )*
            loop6:
            do {
                int alt6=2;
                alt6 = dfa6.predict(input);
                switch (alt6) {
            	case 1 :
            	    // XQueryParser.g:167:12: (dnd+= pm_DefaultNamespaceDecl | s+= p_Setter | nd+= pm_NamespaceDecl | i+= p_Import | fto+= pm_FTOptionDecl )
            	    {
            	    // XQueryParser.g:167:12: (dnd+= pm_DefaultNamespaceDecl | s+= p_Setter | nd+= pm_NamespaceDecl | i+= p_Import | fto+= pm_FTOptionDecl )
            	    int alt5=5;
            	    alt5 = dfa5.predict(input);
            	    switch (alt5) {
            	        case 1 :
            	            // XQueryParser.g:167:13: dnd+= pm_DefaultNamespaceDecl
            	            {
            	            pushFollow(FOLLOW_pm_DefaultNamespaceDecl_in_pm_Prolog987);
            	            dnd=pm_DefaultNamespaceDecl();

            	            state._fsp--;
            	            if (state.failed) return retval;
            	            if ( state.backtracking==0 ) stream_pm_DefaultNamespaceDecl.add(dnd.getTree());
            	            if (list_dnd==null) list_dnd=new ArrayList();
            	            list_dnd.add(dnd.getTree());


            	            }
            	            break;
            	        case 2 :
            	            // XQueryParser.g:167:44: s+= p_Setter
            	            {
            	            pushFollow(FOLLOW_p_Setter_in_pm_Prolog993);
            	            s=p_Setter();

            	            state._fsp--;
            	            if (state.failed) return retval;
            	            if ( state.backtracking==0 ) stream_p_Setter.add(s.getTree());
            	            if (list_s==null) list_s=new ArrayList();
            	            list_s.add(s.getTree());


            	            }
            	            break;
            	        case 3 :
            	            // XQueryParser.g:167:58: nd+= pm_NamespaceDecl
            	            {
            	            pushFollow(FOLLOW_pm_NamespaceDecl_in_pm_Prolog999);
            	            nd=pm_NamespaceDecl();

            	            state._fsp--;
            	            if (state.failed) return retval;
            	            if ( state.backtracking==0 ) stream_pm_NamespaceDecl.add(nd.getTree());
            	            if (list_nd==null) list_nd=new ArrayList();
            	            list_nd.add(nd.getTree());


            	            }
            	            break;
            	        case 4 :
            	            // XQueryParser.g:167:81: i+= p_Import
            	            {
            	            pushFollow(FOLLOW_p_Import_in_pm_Prolog1005);
            	            i=p_Import();

            	            state._fsp--;
            	            if (state.failed) return retval;
            	            if ( state.backtracking==0 ) stream_p_Import.add(i.getTree());
            	            if (list_i==null) list_i=new ArrayList();
            	            list_i.add(i.getTree());


            	            }
            	            break;
            	        case 5 :
            	            // XQueryParser.g:167:95: fto+= pm_FTOptionDecl
            	            {
            	            pushFollow(FOLLOW_pm_FTOptionDecl_in_pm_Prolog1011);
            	            fto=pm_FTOptionDecl();

            	            state._fsp--;
            	            if (state.failed) return retval;
            	            if ( state.backtracking==0 ) stream_pm_FTOptionDecl.add(fto.getTree());
            	            if (list_fto==null) list_fto=new ArrayList();
            	            list_fto.add(fto.getTree());


            	            }
            	            break;

            	    }


            	    }
            	    break;

            	default :
            	    break loop6;
                }
            } while (true);

            pushFollow(FOLLOW_pg_OrderedDecl_in_pm_Prolog1018);
            od=pg_OrderedDecl();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_pg_OrderedDecl.add(od.getTree());


            // AST REWRITE
            // elements: i, fto, od, nd, s, dnd
            // token labels: 
            // rule labels: od, retval
            // token list labels: 
            // rule list labels: i, fto, dnd, nd, s
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_od=new RewriteRuleSubtreeStream(adaptor,"rule od",od!=null?od.tree:null);
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
            RewriteRuleSubtreeStream stream_i=new RewriteRuleSubtreeStream(adaptor,"token i",list_i);
            RewriteRuleSubtreeStream stream_fto=new RewriteRuleSubtreeStream(adaptor,"token fto",list_fto);
            RewriteRuleSubtreeStream stream_dnd=new RewriteRuleSubtreeStream(adaptor,"token dnd",list_dnd);
            RewriteRuleSubtreeStream stream_nd=new RewriteRuleSubtreeStream(adaptor,"token nd",list_nd);
            RewriteRuleSubtreeStream stream_s=new RewriteRuleSubtreeStream(adaptor,"token s",list_s);
            root_0 = (XQDTCommonTree)adaptor.nil();
            // 168:17: -> ^( Prolog ^( DefaultNamespaceDecls ( $dnd)* ) ^( Setters ( $s)* ) ^( NamespaceDecls ( $nd)* ) ^( Imports ( $i)* ) ^( FTOptionDecls ( $fto)* ) ^( OrderedDecls ( $od)* ) )
            {
                // XQueryParser.g:168:21: ^( Prolog ^( DefaultNamespaceDecls ( $dnd)* ) ^( Setters ( $s)* ) ^( NamespaceDecls ( $nd)* ) ^( Imports ( $i)* ) ^( FTOptionDecls ( $fto)* ) ^( OrderedDecls ( $od)* ) )
                {
                XQDTCommonTree root_1 = (XQDTCommonTree)adaptor.nil();
                root_1 = (XQDTCommonTree)adaptor.becomeRoot((XQDTCommonTree)adaptor.create(Prolog, "Prolog"), root_1);

                // XQueryParser.g:169:33: ^( DefaultNamespaceDecls ( $dnd)* )
                {
                XQDTCommonTree root_2 = (XQDTCommonTree)adaptor.nil();
                root_2 = (XQDTCommonTree)adaptor.becomeRoot((XQDTCommonTree)adaptor.create(DefaultNamespaceDecls, "DefaultNamespaceDecls"), root_2);

                // XQueryParser.g:169:57: ( $dnd)*
                while ( stream_dnd.hasNext() ) {
                    adaptor.addChild(root_2, stream_dnd.nextTree());

                }
                stream_dnd.reset();

                adaptor.addChild(root_1, root_2);
                }
                // XQueryParser.g:170:33: ^( Setters ( $s)* )
                {
                XQDTCommonTree root_2 = (XQDTCommonTree)adaptor.nil();
                root_2 = (XQDTCommonTree)adaptor.becomeRoot((XQDTCommonTree)adaptor.create(Setters, "Setters"), root_2);

                // XQueryParser.g:170:43: ( $s)*
                while ( stream_s.hasNext() ) {
                    adaptor.addChild(root_2, stream_s.nextTree());

                }
                stream_s.reset();

                adaptor.addChild(root_1, root_2);
                }
                // XQueryParser.g:171:33: ^( NamespaceDecls ( $nd)* )
                {
                XQDTCommonTree root_2 = (XQDTCommonTree)adaptor.nil();
                root_2 = (XQDTCommonTree)adaptor.becomeRoot((XQDTCommonTree)adaptor.create(NamespaceDecls, "NamespaceDecls"), root_2);

                // XQueryParser.g:171:50: ( $nd)*
                while ( stream_nd.hasNext() ) {
                    adaptor.addChild(root_2, stream_nd.nextTree());

                }
                stream_nd.reset();

                adaptor.addChild(root_1, root_2);
                }
                // XQueryParser.g:172:33: ^( Imports ( $i)* )
                {
                XQDTCommonTree root_2 = (XQDTCommonTree)adaptor.nil();
                root_2 = (XQDTCommonTree)adaptor.becomeRoot((XQDTCommonTree)adaptor.create(Imports, "Imports"), root_2);

                // XQueryParser.g:172:43: ( $i)*
                while ( stream_i.hasNext() ) {
                    adaptor.addChild(root_2, stream_i.nextTree());

                }
                stream_i.reset();

                adaptor.addChild(root_1, root_2);
                }
                // XQueryParser.g:173:33: ^( FTOptionDecls ( $fto)* )
                {
                XQDTCommonTree root_2 = (XQDTCommonTree)adaptor.nil();
                root_2 = (XQDTCommonTree)adaptor.becomeRoot((XQDTCommonTree)adaptor.create(FTOptionDecls, "FTOptionDecls"), root_2);

                // XQueryParser.g:173:49: ( $fto)*
                while ( stream_fto.hasNext() ) {
                    adaptor.addChild(root_2, stream_fto.nextTree());

                }
                stream_fto.reset();

                adaptor.addChild(root_1, root_2);
                }
                // XQueryParser.g:174:33: ^( OrderedDecls ( $od)* )
                {
                XQDTCommonTree root_2 = (XQDTCommonTree)adaptor.nil();
                root_2 = (XQDTCommonTree)adaptor.becomeRoot((XQDTCommonTree)adaptor.create(OrderedDecls, "OrderedDecls"), root_2);

                // XQueryParser.g:174:48: ( $od)*
                while ( stream_od.hasNext() ) {
                    adaptor.addChild(root_2, stream_od.nextTree());

                }
                stream_od.reset();

                adaptor.addChild(root_1, root_2);
                }

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (XQDTCommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (XQDTCommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "pm_Prolog"

    public static class pg_OrderedDecl_return extends ParserRuleReturnScope {
        XQDTCommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "pg_OrderedDecl"
    // XQueryParser.g:182:1: pg_OrderedDecl : ( pm_VarDecl | pm_ContextItemDecl | pm_FunctionDecl | pm_OptionDecl | {...}? => p_CollectionDecl | {...}? => p_IndexDecl | {...}? => p_ICDecl )* ;
    public final XQueryParser.pg_OrderedDecl_return pg_OrderedDecl() throws RecognitionException {
        XQueryParser.pg_OrderedDecl_return retval = new XQueryParser.pg_OrderedDecl_return();
        retval.start = input.LT(1);

        XQDTCommonTree root_0 = null;

        XQueryParser.pm_VarDecl_return pm_VarDecl11 = null;

        XQueryParser.pm_ContextItemDecl_return pm_ContextItemDecl12 = null;

        XQueryParser.pm_FunctionDecl_return pm_FunctionDecl13 = null;

        XQueryParser.pm_OptionDecl_return pm_OptionDecl14 = null;

        XQueryParser.p_CollectionDecl_return p_CollectionDecl15 = null;

        XQueryParser.p_IndexDecl_return p_IndexDecl16 = null;

        XQueryParser.p_ICDecl_return p_ICDecl17 = null;



        try {
            // XQueryParser.g:183:9: ( ( pm_VarDecl | pm_ContextItemDecl | pm_FunctionDecl | pm_OptionDecl | {...}? => p_CollectionDecl | {...}? => p_IndexDecl | {...}? => p_ICDecl )* )
            // XQueryParser.g:183:11: ( pm_VarDecl | pm_ContextItemDecl | pm_FunctionDecl | pm_OptionDecl | {...}? => p_CollectionDecl | {...}? => p_IndexDecl | {...}? => p_ICDecl )*
            {
            root_0 = (XQDTCommonTree)adaptor.nil();

            // XQueryParser.g:183:11: ( pm_VarDecl | pm_ContextItemDecl | pm_FunctionDecl | pm_OptionDecl | {...}? => p_CollectionDecl | {...}? => p_IndexDecl | {...}? => p_ICDecl )*
            loop7:
            do {
                int alt7=8;
                alt7 = dfa7.predict(input);
                switch (alt7) {
            	case 1 :
            	    // XQueryParser.g:183:12: pm_VarDecl
            	    {
            	    pushFollow(FOLLOW_pm_VarDecl_in_pg_OrderedDecl1336);
            	    pm_VarDecl11=pm_VarDecl();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, pm_VarDecl11.getTree());

            	    }
            	    break;
            	case 2 :
            	    // XQueryParser.g:183:25: pm_ContextItemDecl
            	    {
            	    pushFollow(FOLLOW_pm_ContextItemDecl_in_pg_OrderedDecl1340);
            	    pm_ContextItemDecl12=pm_ContextItemDecl();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, pm_ContextItemDecl12.getTree());

            	    }
            	    break;
            	case 3 :
            	    // XQueryParser.g:183:46: pm_FunctionDecl
            	    {
            	    pushFollow(FOLLOW_pm_FunctionDecl_in_pg_OrderedDecl1344);
            	    pm_FunctionDecl13=pm_FunctionDecl();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, pm_FunctionDecl13.getTree());

            	    }
            	    break;
            	case 4 :
            	    // XQueryParser.g:183:64: pm_OptionDecl
            	    {
            	    pushFollow(FOLLOW_pm_OptionDecl_in_pg_OrderedDecl1348);
            	    pm_OptionDecl14=pm_OptionDecl();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, pm_OptionDecl14.getTree());

            	    }
            	    break;
            	case 5 :
            	    // XQueryParser.g:184:11: {...}? => p_CollectionDecl
            	    {
            	    if ( !((lc(ZORBA))) ) {
            	        if (state.backtracking>0) {state.failed=true; return retval;}
            	        throw new FailedPredicateException(input, "pg_OrderedDecl", "lc(ZORBA)");
            	    }
            	    pushFollow(FOLLOW_p_CollectionDecl_in_pg_OrderedDecl1363);
            	    p_CollectionDecl15=p_CollectionDecl();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, p_CollectionDecl15.getTree());

            	    }
            	    break;
            	case 6 :
            	    // XQueryParser.g:185:11: {...}? => p_IndexDecl
            	    {
            	    if ( !((lc(ZORBA))) ) {
            	        if (state.backtracking>0) {state.failed=true; return retval;}
            	        throw new FailedPredicateException(input, "pg_OrderedDecl", "lc(ZORBA)");
            	    }
            	    pushFollow(FOLLOW_p_IndexDecl_in_pg_OrderedDecl1378);
            	    p_IndexDecl16=p_IndexDecl();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, p_IndexDecl16.getTree());

            	    }
            	    break;
            	case 7 :
            	    // XQueryParser.g:186:11: {...}? => p_ICDecl
            	    {
            	    if ( !((lc(ZORBA))) ) {
            	        if (state.backtracking>0) {state.failed=true; return retval;}
            	        throw new FailedPredicateException(input, "pg_OrderedDecl", "lc(ZORBA)");
            	    }
            	    pushFollow(FOLLOW_p_ICDecl_in_pg_OrderedDecl1393);
            	    p_ICDecl17=p_ICDecl();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, p_ICDecl17.getTree());

            	    }
            	    break;

            	default :
            	    break loop7;
                }
            } while (true);


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (XQDTCommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (XQDTCommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "pg_OrderedDecl"

    public static class p_Setter_return extends ParserRuleReturnScope {
        XQDTCommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "p_Setter"
    // XQueryParser.g:191:1: p_Setter : ( pm_BoundarySpaceDecl | pm_DefaultCollationDecl | pm_BaseURIDecl | pm_ConstructionDecl | pm_OrderingModeDecl | pm_EmptyOrderDecl | {...}? => pm_RevalidationDecl | pm_CopyNamespacesDecl );
    public final XQueryParser.p_Setter_return p_Setter() throws RecognitionException {
        XQueryParser.p_Setter_return retval = new XQueryParser.p_Setter_return();
        retval.start = input.LT(1);

        XQDTCommonTree root_0 = null;

        XQueryParser.pm_BoundarySpaceDecl_return pm_BoundarySpaceDecl18 = null;

        XQueryParser.pm_DefaultCollationDecl_return pm_DefaultCollationDecl19 = null;

        XQueryParser.pm_BaseURIDecl_return pm_BaseURIDecl20 = null;

        XQueryParser.pm_ConstructionDecl_return pm_ConstructionDecl21 = null;

        XQueryParser.pm_OrderingModeDecl_return pm_OrderingModeDecl22 = null;

        XQueryParser.pm_EmptyOrderDecl_return pm_EmptyOrderDecl23 = null;

        XQueryParser.pm_RevalidationDecl_return pm_RevalidationDecl24 = null;

        XQueryParser.pm_CopyNamespacesDecl_return pm_CopyNamespacesDecl25 = null;



        try {
            // XQueryParser.g:192:9: ( pm_BoundarySpaceDecl | pm_DefaultCollationDecl | pm_BaseURIDecl | pm_ConstructionDecl | pm_OrderingModeDecl | pm_EmptyOrderDecl | {...}? => pm_RevalidationDecl | pm_CopyNamespacesDecl )
            int alt8=8;
            alt8 = dfa8.predict(input);
            switch (alt8) {
                case 1 :
                    // XQueryParser.g:192:11: pm_BoundarySpaceDecl
                    {
                    root_0 = (XQDTCommonTree)adaptor.nil();

                    pushFollow(FOLLOW_pm_BoundarySpaceDecl_in_p_Setter1422);
                    pm_BoundarySpaceDecl18=pm_BoundarySpaceDecl();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, pm_BoundarySpaceDecl18.getTree());

                    }
                    break;
                case 2 :
                    // XQueryParser.g:193:11: pm_DefaultCollationDecl
                    {
                    root_0 = (XQDTCommonTree)adaptor.nil();

                    pushFollow(FOLLOW_pm_DefaultCollationDecl_in_p_Setter1434);
                    pm_DefaultCollationDecl19=pm_DefaultCollationDecl();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, pm_DefaultCollationDecl19.getTree());

                    }
                    break;
                case 3 :
                    // XQueryParser.g:194:11: pm_BaseURIDecl
                    {
                    root_0 = (XQDTCommonTree)adaptor.nil();

                    pushFollow(FOLLOW_pm_BaseURIDecl_in_p_Setter1446);
                    pm_BaseURIDecl20=pm_BaseURIDecl();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, pm_BaseURIDecl20.getTree());

                    }
                    break;
                case 4 :
                    // XQueryParser.g:195:11: pm_ConstructionDecl
                    {
                    root_0 = (XQDTCommonTree)adaptor.nil();

                    pushFollow(FOLLOW_pm_ConstructionDecl_in_p_Setter1458);
                    pm_ConstructionDecl21=pm_ConstructionDecl();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, pm_ConstructionDecl21.getTree());

                    }
                    break;
                case 5 :
                    // XQueryParser.g:196:11: pm_OrderingModeDecl
                    {
                    root_0 = (XQDTCommonTree)adaptor.nil();

                    pushFollow(FOLLOW_pm_OrderingModeDecl_in_p_Setter1470);
                    pm_OrderingModeDecl22=pm_OrderingModeDecl();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, pm_OrderingModeDecl22.getTree());

                    }
                    break;
                case 6 :
                    // XQueryParser.g:197:11: pm_EmptyOrderDecl
                    {
                    root_0 = (XQDTCommonTree)adaptor.nil();

                    pushFollow(FOLLOW_pm_EmptyOrderDecl_in_p_Setter1482);
                    pm_EmptyOrderDecl23=pm_EmptyOrderDecl();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, pm_EmptyOrderDecl23.getTree());

                    }
                    break;
                case 7 :
                    // XQueryParser.g:198:11: {...}? => pm_RevalidationDecl
                    {
                    root_0 = (XQDTCommonTree)adaptor.nil();

                    if ( !((lc(XQU))) ) {
                        if (state.backtracking>0) {state.failed=true; return retval;}
                        throw new FailedPredicateException(input, "p_Setter", "lc(XQU)");
                    }
                    pushFollow(FOLLOW_pm_RevalidationDecl_in_p_Setter1497);
                    pm_RevalidationDecl24=pm_RevalidationDecl();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, pm_RevalidationDecl24.getTree());

                    }
                    break;
                case 8 :
                    // XQueryParser.g:199:11: pm_CopyNamespacesDecl
                    {
                    root_0 = (XQDTCommonTree)adaptor.nil();

                    pushFollow(FOLLOW_pm_CopyNamespacesDecl_in_p_Setter1509);
                    pm_CopyNamespacesDecl25=pm_CopyNamespacesDecl();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, pm_CopyNamespacesDecl25.getTree());

                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (XQDTCommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (XQDTCommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "p_Setter"

    public static class p_Import_return extends ParserRuleReturnScope {
        XQDTCommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "p_Import"
    // XQueryParser.g:203:1: p_Import : ( pm_SchemaImport | pm_ModuleImport );
    public final XQueryParser.p_Import_return p_Import() throws RecognitionException {
        XQueryParser.p_Import_return retval = new XQueryParser.p_Import_return();
        retval.start = input.LT(1);

        XQDTCommonTree root_0 = null;

        XQueryParser.pm_SchemaImport_return pm_SchemaImport26 = null;

        XQueryParser.pm_ModuleImport_return pm_ModuleImport27 = null;



        try {
            // XQueryParser.g:204:9: ( pm_SchemaImport | pm_ModuleImport )
            int alt9=2;
            int LA9_0 = input.LA(1);

            if ( (LA9_0==IMPORT) ) {
                int LA9_1 = input.LA(2);

                if ( (LA9_1==SCHEMA) ) {
                    alt9=1;
                }
                else if ( (LA9_1==MODULE) ) {
                    alt9=2;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 9, 1, input);

                    throw nvae;
                }
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 9, 0, input);

                throw nvae;
            }
            switch (alt9) {
                case 1 :
                    // XQueryParser.g:204:11: pm_SchemaImport
                    {
                    root_0 = (XQDTCommonTree)adaptor.nil();

                    pushFollow(FOLLOW_pm_SchemaImport_in_p_Import1535);
                    pm_SchemaImport26=pm_SchemaImport();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, pm_SchemaImport26.getTree());

                    }
                    break;
                case 2 :
                    // XQueryParser.g:204:29: pm_ModuleImport
                    {
                    root_0 = (XQDTCommonTree)adaptor.nil();

                    pushFollow(FOLLOW_pm_ModuleImport_in_p_Import1539);
                    pm_ModuleImport27=pm_ModuleImport();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, pm_ModuleImport27.getTree());

                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (XQDTCommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (XQDTCommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "p_Import"

    public static class pm_NamespaceDecl_return extends ParserRuleReturnScope {
        XQDTCommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "pm_NamespaceDecl"
    // XQueryParser.g:211:1: pm_NamespaceDecl : k+= DECLARE k+= NAMESPACE nn= p_NCName EQUAL us= p_StringLiteral SEMICOLON -> ^( NamespaceDecl $nn $us) ;
    public final XQueryParser.pm_NamespaceDecl_return pm_NamespaceDecl() throws RecognitionException {
        XQueryParser.pm_NamespaceDecl_return retval = new XQueryParser.pm_NamespaceDecl_return();
        retval.start = input.LT(1);

        XQDTCommonTree root_0 = null;

        CommonToken EQUAL28=null;
        CommonToken SEMICOLON29=null;
        CommonToken k=null;
        List list_k=null;
        XQueryParser.p_NCName_return nn = null;

        XQueryParser.p_StringLiteral_return us = null;


        XQDTCommonTree EQUAL28_tree=null;
        XQDTCommonTree SEMICOLON29_tree=null;
        XQDTCommonTree k_tree=null;
        RewriteRuleTokenStream stream_NAMESPACE=new RewriteRuleTokenStream(adaptor,"token NAMESPACE");
        RewriteRuleTokenStream stream_EQUAL=new RewriteRuleTokenStream(adaptor,"token EQUAL");
        RewriteRuleTokenStream stream_SEMICOLON=new RewriteRuleTokenStream(adaptor,"token SEMICOLON");
        RewriteRuleTokenStream stream_DECLARE=new RewriteRuleTokenStream(adaptor,"token DECLARE");
        RewriteRuleSubtreeStream stream_p_NCName=new RewriteRuleSubtreeStream(adaptor,"rule p_NCName");
        RewriteRuleSubtreeStream stream_p_StringLiteral=new RewriteRuleSubtreeStream(adaptor,"rule p_StringLiteral");
        try {
            // XQueryParser.g:212:9: (k+= DECLARE k+= NAMESPACE nn= p_NCName EQUAL us= p_StringLiteral SEMICOLON -> ^( NamespaceDecl $nn $us) )
            // XQueryParser.g:212:11: k+= DECLARE k+= NAMESPACE nn= p_NCName EQUAL us= p_StringLiteral SEMICOLON
            {
            k=(CommonToken)match(input,DECLARE,FOLLOW_DECLARE_in_pm_NamespaceDecl1570); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_DECLARE.add(k);

            if (list_k==null) list_k=new ArrayList();
            list_k.add(k);

            k=(CommonToken)match(input,NAMESPACE,FOLLOW_NAMESPACE_in_pm_NamespaceDecl1574); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_NAMESPACE.add(k);

            if (list_k==null) list_k=new ArrayList();
            list_k.add(k);

            pushFollow(FOLLOW_p_NCName_in_pm_NamespaceDecl1578);
            nn=p_NCName();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_p_NCName.add(nn.getTree());
            EQUAL28=(CommonToken)match(input,EQUAL,FOLLOW_EQUAL_in_pm_NamespaceDecl1580); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_EQUAL.add(EQUAL28);

            pushFollow(FOLLOW_p_StringLiteral_in_pm_NamespaceDecl1584);
            us=p_StringLiteral();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_p_StringLiteral.add(us.getTree());
            SEMICOLON29=(CommonToken)match(input,SEMICOLON,FOLLOW_SEMICOLON_in_pm_NamespaceDecl1586); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_SEMICOLON.add(SEMICOLON29);

            if ( state.backtracking==0 ) {
              ak(list_k);
            }


            // AST REWRITE
            // elements: us, nn
            // token labels: 
            // rule labels: us, nn, retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_us=new RewriteRuleSubtreeStream(adaptor,"rule us",us!=null?us.tree:null);
            RewriteRuleSubtreeStream stream_nn=new RewriteRuleSubtreeStream(adaptor,"rule nn",nn!=null?nn.tree:null);
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (XQDTCommonTree)adaptor.nil();
            // 213:17: -> ^( NamespaceDecl $nn $us)
            {
                // XQueryParser.g:213:20: ^( NamespaceDecl $nn $us)
                {
                XQDTCommonTree root_1 = (XQDTCommonTree)adaptor.nil();
                root_1 = (XQDTCommonTree)adaptor.becomeRoot((XQDTCommonTree)adaptor.create(NamespaceDecl, "NamespaceDecl"), root_1);

                adaptor.addChild(root_1, stream_nn.nextTree());
                adaptor.addChild(root_1, stream_us.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (XQDTCommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (XQDTCommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "pm_NamespaceDecl"

    public static class pm_BoundarySpaceDecl_return extends ParserRuleReturnScope {
        XQDTCommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "pm_BoundarySpaceDecl"
    // XQueryParser.g:217:1: pm_BoundarySpaceDecl : k+= DECLARE k+= BOUNDARY_SPACE (k+= PRESERVE | k+= STRIP ) SEMICOLON ;
    public final XQueryParser.pm_BoundarySpaceDecl_return pm_BoundarySpaceDecl() throws RecognitionException {
        XQueryParser.pm_BoundarySpaceDecl_return retval = new XQueryParser.pm_BoundarySpaceDecl_return();
        retval.start = input.LT(1);

        XQDTCommonTree root_0 = null;

        CommonToken SEMICOLON30=null;
        CommonToken k=null;
        List list_k=null;

        XQDTCommonTree SEMICOLON30_tree=null;
        XQDTCommonTree k_tree=null;

        try {
            // XQueryParser.g:218:9: (k+= DECLARE k+= BOUNDARY_SPACE (k+= PRESERVE | k+= STRIP ) SEMICOLON )
            // XQueryParser.g:218:13: k+= DECLARE k+= BOUNDARY_SPACE (k+= PRESERVE | k+= STRIP ) SEMICOLON
            {
            root_0 = (XQDTCommonTree)adaptor.nil();

            k=(CommonToken)match(input,DECLARE,FOLLOW_DECLARE_in_pm_BoundarySpaceDecl1651); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            k_tree = (XQDTCommonTree)adaptor.create(k);
            adaptor.addChild(root_0, k_tree);
            }
            if (list_k==null) list_k=new ArrayList();
            list_k.add(k);

            k=(CommonToken)match(input,BOUNDARY_SPACE,FOLLOW_BOUNDARY_SPACE_in_pm_BoundarySpaceDecl1655); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            k_tree = (XQDTCommonTree)adaptor.create(k);
            adaptor.addChild(root_0, k_tree);
            }
            if (list_k==null) list_k=new ArrayList();
            list_k.add(k);

            // XQueryParser.g:218:42: (k+= PRESERVE | k+= STRIP )
            int alt10=2;
            int LA10_0 = input.LA(1);

            if ( (LA10_0==PRESERVE) ) {
                alt10=1;
            }
            else if ( (LA10_0==STRIP) ) {
                alt10=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 10, 0, input);

                throw nvae;
            }
            switch (alt10) {
                case 1 :
                    // XQueryParser.g:218:43: k+= PRESERVE
                    {
                    k=(CommonToken)match(input,PRESERVE,FOLLOW_PRESERVE_in_pm_BoundarySpaceDecl1660); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    k_tree = (XQDTCommonTree)adaptor.create(k);
                    adaptor.addChild(root_0, k_tree);
                    }
                    if (list_k==null) list_k=new ArrayList();
                    list_k.add(k);


                    }
                    break;
                case 2 :
                    // XQueryParser.g:218:57: k+= STRIP
                    {
                    k=(CommonToken)match(input,STRIP,FOLLOW_STRIP_in_pm_BoundarySpaceDecl1666); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    k_tree = (XQDTCommonTree)adaptor.create(k);
                    adaptor.addChild(root_0, k_tree);
                    }
                    if (list_k==null) list_k=new ArrayList();
                    list_k.add(k);


                    }
                    break;

            }

            SEMICOLON30=(CommonToken)match(input,SEMICOLON,FOLLOW_SEMICOLON_in_pm_BoundarySpaceDecl1669); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            SEMICOLON30_tree = (XQDTCommonTree)adaptor.create(SEMICOLON30);
            adaptor.addChild(root_0, SEMICOLON30_tree);
            }
            if ( state.backtracking==0 ) {
              ak(list_k);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (XQDTCommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (XQDTCommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "pm_BoundarySpaceDecl"

    public static class pm_DefaultNamespaceDecl_return extends ParserRuleReturnScope {
        XQDTCommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "pm_DefaultNamespaceDecl"
    // XQueryParser.g:222:1: pm_DefaultNamespaceDecl : k+= DECLARE k+= DEFAULT (k+= ELEMENT | k+= FUNCTION ) k+= NAMESPACE p_StringLiteral SEMICOLON ;
    public final XQueryParser.pm_DefaultNamespaceDecl_return pm_DefaultNamespaceDecl() throws RecognitionException {
        XQueryParser.pm_DefaultNamespaceDecl_return retval = new XQueryParser.pm_DefaultNamespaceDecl_return();
        retval.start = input.LT(1);

        XQDTCommonTree root_0 = null;

        CommonToken SEMICOLON32=null;
        CommonToken k=null;
        List list_k=null;
        XQueryParser.p_StringLiteral_return p_StringLiteral31 = null;


        XQDTCommonTree SEMICOLON32_tree=null;
        XQDTCommonTree k_tree=null;

        try {
            // XQueryParser.g:223:9: (k+= DECLARE k+= DEFAULT (k+= ELEMENT | k+= FUNCTION ) k+= NAMESPACE p_StringLiteral SEMICOLON )
            // XQueryParser.g:223:11: k+= DECLARE k+= DEFAULT (k+= ELEMENT | k+= FUNCTION ) k+= NAMESPACE p_StringLiteral SEMICOLON
            {
            root_0 = (XQDTCommonTree)adaptor.nil();

            k=(CommonToken)match(input,DECLARE,FOLLOW_DECLARE_in_pm_DefaultNamespaceDecl1699); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            k_tree = (XQDTCommonTree)adaptor.create(k);
            adaptor.addChild(root_0, k_tree);
            }
            if (list_k==null) list_k=new ArrayList();
            list_k.add(k);

            k=(CommonToken)match(input,DEFAULT,FOLLOW_DEFAULT_in_pm_DefaultNamespaceDecl1703); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            k_tree = (XQDTCommonTree)adaptor.create(k);
            adaptor.addChild(root_0, k_tree);
            }
            if (list_k==null) list_k=new ArrayList();
            list_k.add(k);

            // XQueryParser.g:223:33: (k+= ELEMENT | k+= FUNCTION )
            int alt11=2;
            int LA11_0 = input.LA(1);

            if ( (LA11_0==ELEMENT) ) {
                alt11=1;
            }
            else if ( (LA11_0==FUNCTION) ) {
                alt11=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 11, 0, input);

                throw nvae;
            }
            switch (alt11) {
                case 1 :
                    // XQueryParser.g:223:34: k+= ELEMENT
                    {
                    k=(CommonToken)match(input,ELEMENT,FOLLOW_ELEMENT_in_pm_DefaultNamespaceDecl1708); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    k_tree = (XQDTCommonTree)adaptor.create(k);
                    adaptor.addChild(root_0, k_tree);
                    }
                    if (list_k==null) list_k=new ArrayList();
                    list_k.add(k);


                    }
                    break;
                case 2 :
                    // XQueryParser.g:223:47: k+= FUNCTION
                    {
                    k=(CommonToken)match(input,FUNCTION,FOLLOW_FUNCTION_in_pm_DefaultNamespaceDecl1714); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    k_tree = (XQDTCommonTree)adaptor.create(k);
                    adaptor.addChild(root_0, k_tree);
                    }
                    if (list_k==null) list_k=new ArrayList();
                    list_k.add(k);


                    }
                    break;

            }

            k=(CommonToken)match(input,NAMESPACE,FOLLOW_NAMESPACE_in_pm_DefaultNamespaceDecl1719); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            k_tree = (XQDTCommonTree)adaptor.create(k);
            adaptor.addChild(root_0, k_tree);
            }
            if (list_k==null) list_k=new ArrayList();
            list_k.add(k);

            pushFollow(FOLLOW_p_StringLiteral_in_pm_DefaultNamespaceDecl1721);
            p_StringLiteral31=p_StringLiteral();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, p_StringLiteral31.getTree());
            SEMICOLON32=(CommonToken)match(input,SEMICOLON,FOLLOW_SEMICOLON_in_pm_DefaultNamespaceDecl1723); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            SEMICOLON32_tree = (XQDTCommonTree)adaptor.create(SEMICOLON32);
            adaptor.addChild(root_0, SEMICOLON32_tree);
            }
            if ( state.backtracking==0 ) {
              ak(list_k);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (XQDTCommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (XQDTCommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "pm_DefaultNamespaceDecl"

    public static class pm_OptionDecl_return extends ParserRuleReturnScope {
        XQDTCommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "pm_OptionDecl"
    // XQueryParser.g:227:1: pm_OptionDecl : k+= DECLARE k+= OPTION p_QName p_StringLiteral SEMICOLON ;
    public final XQueryParser.pm_OptionDecl_return pm_OptionDecl() throws RecognitionException {
        XQueryParser.pm_OptionDecl_return retval = new XQueryParser.pm_OptionDecl_return();
        retval.start = input.LT(1);

        XQDTCommonTree root_0 = null;

        CommonToken SEMICOLON35=null;
        CommonToken k=null;
        List list_k=null;
        XQueryParser.p_QName_return p_QName33 = null;

        XQueryParser.p_StringLiteral_return p_StringLiteral34 = null;


        XQDTCommonTree SEMICOLON35_tree=null;
        XQDTCommonTree k_tree=null;

        try {
            // XQueryParser.g:228:9: (k+= DECLARE k+= OPTION p_QName p_StringLiteral SEMICOLON )
            // XQueryParser.g:228:13: k+= DECLARE k+= OPTION p_QName p_StringLiteral SEMICOLON
            {
            root_0 = (XQDTCommonTree)adaptor.nil();

            k=(CommonToken)match(input,DECLARE,FOLLOW_DECLARE_in_pm_OptionDecl1755); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            k_tree = (XQDTCommonTree)adaptor.create(k);
            adaptor.addChild(root_0, k_tree);
            }
            if (list_k==null) list_k=new ArrayList();
            list_k.add(k);

            k=(CommonToken)match(input,OPTION,FOLLOW_OPTION_in_pm_OptionDecl1759); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            k_tree = (XQDTCommonTree)adaptor.create(k);
            adaptor.addChild(root_0, k_tree);
            }
            if (list_k==null) list_k=new ArrayList();
            list_k.add(k);

            pushFollow(FOLLOW_p_QName_in_pm_OptionDecl1761);
            p_QName33=p_QName();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, p_QName33.getTree());
            pushFollow(FOLLOW_p_StringLiteral_in_pm_OptionDecl1763);
            p_StringLiteral34=p_StringLiteral();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, p_StringLiteral34.getTree());
            SEMICOLON35=(CommonToken)match(input,SEMICOLON,FOLLOW_SEMICOLON_in_pm_OptionDecl1765); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            SEMICOLON35_tree = (XQDTCommonTree)adaptor.create(SEMICOLON35);
            adaptor.addChild(root_0, SEMICOLON35_tree);
            }
            if ( state.backtracking==0 ) {
              ak(list_k);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (XQDTCommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (XQDTCommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "pm_OptionDecl"

    public static class pm_OrderingModeDecl_return extends ParserRuleReturnScope {
        XQDTCommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "pm_OrderingModeDecl"
    // XQueryParser.g:232:1: pm_OrderingModeDecl : k+= DECLARE k+= ORDERING (k+= ORDERED | k+= UNORDERED ) SEMICOLON ;
    public final XQueryParser.pm_OrderingModeDecl_return pm_OrderingModeDecl() throws RecognitionException {
        XQueryParser.pm_OrderingModeDecl_return retval = new XQueryParser.pm_OrderingModeDecl_return();
        retval.start = input.LT(1);

        XQDTCommonTree root_0 = null;

        CommonToken SEMICOLON36=null;
        CommonToken k=null;
        List list_k=null;

        XQDTCommonTree SEMICOLON36_tree=null;
        XQDTCommonTree k_tree=null;

        try {
            // XQueryParser.g:233:9: (k+= DECLARE k+= ORDERING (k+= ORDERED | k+= UNORDERED ) SEMICOLON )
            // XQueryParser.g:233:13: k+= DECLARE k+= ORDERING (k+= ORDERED | k+= UNORDERED ) SEMICOLON
            {
            root_0 = (XQDTCommonTree)adaptor.nil();

            k=(CommonToken)match(input,DECLARE,FOLLOW_DECLARE_in_pm_OrderingModeDecl1797); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            k_tree = (XQDTCommonTree)adaptor.create(k);
            adaptor.addChild(root_0, k_tree);
            }
            if (list_k==null) list_k=new ArrayList();
            list_k.add(k);

            k=(CommonToken)match(input,ORDERING,FOLLOW_ORDERING_in_pm_OrderingModeDecl1801); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            k_tree = (XQDTCommonTree)adaptor.create(k);
            adaptor.addChild(root_0, k_tree);
            }
            if (list_k==null) list_k=new ArrayList();
            list_k.add(k);

            // XQueryParser.g:233:36: (k+= ORDERED | k+= UNORDERED )
            int alt12=2;
            int LA12_0 = input.LA(1);

            if ( (LA12_0==ORDERED) ) {
                alt12=1;
            }
            else if ( (LA12_0==UNORDERED) ) {
                alt12=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 12, 0, input);

                throw nvae;
            }
            switch (alt12) {
                case 1 :
                    // XQueryParser.g:233:37: k+= ORDERED
                    {
                    k=(CommonToken)match(input,ORDERED,FOLLOW_ORDERED_in_pm_OrderingModeDecl1806); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    k_tree = (XQDTCommonTree)adaptor.create(k);
                    adaptor.addChild(root_0, k_tree);
                    }
                    if (list_k==null) list_k=new ArrayList();
                    list_k.add(k);


                    }
                    break;
                case 2 :
                    // XQueryParser.g:233:50: k+= UNORDERED
                    {
                    k=(CommonToken)match(input,UNORDERED,FOLLOW_UNORDERED_in_pm_OrderingModeDecl1812); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    k_tree = (XQDTCommonTree)adaptor.create(k);
                    adaptor.addChild(root_0, k_tree);
                    }
                    if (list_k==null) list_k=new ArrayList();
                    list_k.add(k);


                    }
                    break;

            }

            SEMICOLON36=(CommonToken)match(input,SEMICOLON,FOLLOW_SEMICOLON_in_pm_OrderingModeDecl1815); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            SEMICOLON36_tree = (XQDTCommonTree)adaptor.create(SEMICOLON36);
            adaptor.addChild(root_0, SEMICOLON36_tree);
            }
            if ( state.backtracking==0 ) {
              ak(list_k);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (XQDTCommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (XQDTCommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "pm_OrderingModeDecl"

    public static class pm_EmptyOrderDecl_return extends ParserRuleReturnScope {
        XQDTCommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "pm_EmptyOrderDecl"
    // XQueryParser.g:237:1: pm_EmptyOrderDecl : k+= DECLARE k+= DEFAULT k+= ORDER k+= EMPTY (k+= GREATEST | k+= LEAST ) SEMICOLON ;
    public final XQueryParser.pm_EmptyOrderDecl_return pm_EmptyOrderDecl() throws RecognitionException {
        XQueryParser.pm_EmptyOrderDecl_return retval = new XQueryParser.pm_EmptyOrderDecl_return();
        retval.start = input.LT(1);

        XQDTCommonTree root_0 = null;

        CommonToken SEMICOLON37=null;
        CommonToken k=null;
        List list_k=null;

        XQDTCommonTree SEMICOLON37_tree=null;
        XQDTCommonTree k_tree=null;

        try {
            // XQueryParser.g:238:9: (k+= DECLARE k+= DEFAULT k+= ORDER k+= EMPTY (k+= GREATEST | k+= LEAST ) SEMICOLON )
            // XQueryParser.g:238:13: k+= DECLARE k+= DEFAULT k+= ORDER k+= EMPTY (k+= GREATEST | k+= LEAST ) SEMICOLON
            {
            root_0 = (XQDTCommonTree)adaptor.nil();

            k=(CommonToken)match(input,DECLARE,FOLLOW_DECLARE_in_pm_EmptyOrderDecl1847); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            k_tree = (XQDTCommonTree)adaptor.create(k);
            adaptor.addChild(root_0, k_tree);
            }
            if (list_k==null) list_k=new ArrayList();
            list_k.add(k);

            k=(CommonToken)match(input,DEFAULT,FOLLOW_DEFAULT_in_pm_EmptyOrderDecl1851); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            k_tree = (XQDTCommonTree)adaptor.create(k);
            adaptor.addChild(root_0, k_tree);
            }
            if (list_k==null) list_k=new ArrayList();
            list_k.add(k);

            k=(CommonToken)match(input,ORDER,FOLLOW_ORDER_in_pm_EmptyOrderDecl1855); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            k_tree = (XQDTCommonTree)adaptor.create(k);
            adaptor.addChild(root_0, k_tree);
            }
            if (list_k==null) list_k=new ArrayList();
            list_k.add(k);

            k=(CommonToken)match(input,EMPTY,FOLLOW_EMPTY_in_pm_EmptyOrderDecl1859); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            k_tree = (XQDTCommonTree)adaptor.create(k);
            adaptor.addChild(root_0, k_tree);
            }
            if (list_k==null) list_k=new ArrayList();
            list_k.add(k);

            // XQueryParser.g:238:53: (k+= GREATEST | k+= LEAST )
            int alt13=2;
            int LA13_0 = input.LA(1);

            if ( (LA13_0==GREATEST) ) {
                alt13=1;
            }
            else if ( (LA13_0==LEAST) ) {
                alt13=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 13, 0, input);

                throw nvae;
            }
            switch (alt13) {
                case 1 :
                    // XQueryParser.g:238:54: k+= GREATEST
                    {
                    k=(CommonToken)match(input,GREATEST,FOLLOW_GREATEST_in_pm_EmptyOrderDecl1864); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    k_tree = (XQDTCommonTree)adaptor.create(k);
                    adaptor.addChild(root_0, k_tree);
                    }
                    if (list_k==null) list_k=new ArrayList();
                    list_k.add(k);


                    }
                    break;
                case 2 :
                    // XQueryParser.g:238:68: k+= LEAST
                    {
                    k=(CommonToken)match(input,LEAST,FOLLOW_LEAST_in_pm_EmptyOrderDecl1870); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    k_tree = (XQDTCommonTree)adaptor.create(k);
                    adaptor.addChild(root_0, k_tree);
                    }
                    if (list_k==null) list_k=new ArrayList();
                    list_k.add(k);


                    }
                    break;

            }

            SEMICOLON37=(CommonToken)match(input,SEMICOLON,FOLLOW_SEMICOLON_in_pm_EmptyOrderDecl1873); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            SEMICOLON37_tree = (XQDTCommonTree)adaptor.create(SEMICOLON37);
            adaptor.addChild(root_0, SEMICOLON37_tree);
            }
            if ( state.backtracking==0 ) {
              ak(list_k);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (XQDTCommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (XQDTCommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "pm_EmptyOrderDecl"

    public static class pm_CopyNamespacesDecl_return extends ParserRuleReturnScope {
        XQDTCommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "pm_CopyNamespacesDecl"
    // XQueryParser.g:242:1: pm_CopyNamespacesDecl : k+= DECLARE k+= COPY_NAMESPACES p_PreserveMode COMMA p_InheritMode SEMICOLON ;
    public final XQueryParser.pm_CopyNamespacesDecl_return pm_CopyNamespacesDecl() throws RecognitionException {
        XQueryParser.pm_CopyNamespacesDecl_return retval = new XQueryParser.pm_CopyNamespacesDecl_return();
        retval.start = input.LT(1);

        XQDTCommonTree root_0 = null;

        CommonToken COMMA39=null;
        CommonToken SEMICOLON41=null;
        CommonToken k=null;
        List list_k=null;
        XQueryParser.p_PreserveMode_return p_PreserveMode38 = null;

        XQueryParser.p_InheritMode_return p_InheritMode40 = null;


        XQDTCommonTree COMMA39_tree=null;
        XQDTCommonTree SEMICOLON41_tree=null;
        XQDTCommonTree k_tree=null;

        try {
            // XQueryParser.g:243:9: (k+= DECLARE k+= COPY_NAMESPACES p_PreserveMode COMMA p_InheritMode SEMICOLON )
            // XQueryParser.g:243:13: k+= DECLARE k+= COPY_NAMESPACES p_PreserveMode COMMA p_InheritMode SEMICOLON
            {
            root_0 = (XQDTCommonTree)adaptor.nil();

            k=(CommonToken)match(input,DECLARE,FOLLOW_DECLARE_in_pm_CopyNamespacesDecl1905); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            k_tree = (XQDTCommonTree)adaptor.create(k);
            adaptor.addChild(root_0, k_tree);
            }
            if (list_k==null) list_k=new ArrayList();
            list_k.add(k);

            k=(CommonToken)match(input,COPY_NAMESPACES,FOLLOW_COPY_NAMESPACES_in_pm_CopyNamespacesDecl1909); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            k_tree = (XQDTCommonTree)adaptor.create(k);
            adaptor.addChild(root_0, k_tree);
            }
            if (list_k==null) list_k=new ArrayList();
            list_k.add(k);

            pushFollow(FOLLOW_p_PreserveMode_in_pm_CopyNamespacesDecl1911);
            p_PreserveMode38=p_PreserveMode();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, p_PreserveMode38.getTree());
            COMMA39=(CommonToken)match(input,COMMA,FOLLOW_COMMA_in_pm_CopyNamespacesDecl1913); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            COMMA39_tree = (XQDTCommonTree)adaptor.create(COMMA39);
            adaptor.addChild(root_0, COMMA39_tree);
            }
            pushFollow(FOLLOW_p_InheritMode_in_pm_CopyNamespacesDecl1915);
            p_InheritMode40=p_InheritMode();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, p_InheritMode40.getTree());
            SEMICOLON41=(CommonToken)match(input,SEMICOLON,FOLLOW_SEMICOLON_in_pm_CopyNamespacesDecl1917); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            SEMICOLON41_tree = (XQDTCommonTree)adaptor.create(SEMICOLON41);
            adaptor.addChild(root_0, SEMICOLON41_tree);
            }
            if ( state.backtracking==0 ) {
              ak(list_k);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (XQDTCommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (XQDTCommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "pm_CopyNamespacesDecl"

    public static class p_DecimalFormatDecl_return extends ParserRuleReturnScope {
        XQDTCommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "p_DecimalFormatDecl"
    // XQueryParser.g:247:1: p_DecimalFormatDecl : k+= DECLARE ( ( DECIMAL_FORMAT p_QName ) | ( DEFAULT DECIMAL_FORMAT ) ) ( p_DFPropertyName ) EQ p_StringLiteral SEMICOLON ;
    public final XQueryParser.p_DecimalFormatDecl_return p_DecimalFormatDecl() throws RecognitionException {
        XQueryParser.p_DecimalFormatDecl_return retval = new XQueryParser.p_DecimalFormatDecl_return();
        retval.start = input.LT(1);

        XQDTCommonTree root_0 = null;

        CommonToken DECIMAL_FORMAT42=null;
        CommonToken DEFAULT44=null;
        CommonToken DECIMAL_FORMAT45=null;
        CommonToken EQ47=null;
        CommonToken SEMICOLON49=null;
        CommonToken k=null;
        List list_k=null;
        XQueryParser.p_QName_return p_QName43 = null;

        XQueryParser.p_DFPropertyName_return p_DFPropertyName46 = null;

        XQueryParser.p_StringLiteral_return p_StringLiteral48 = null;


        XQDTCommonTree DECIMAL_FORMAT42_tree=null;
        XQDTCommonTree DEFAULT44_tree=null;
        XQDTCommonTree DECIMAL_FORMAT45_tree=null;
        XQDTCommonTree EQ47_tree=null;
        XQDTCommonTree SEMICOLON49_tree=null;
        XQDTCommonTree k_tree=null;

        try {
            // XQueryParser.g:248:9: (k+= DECLARE ( ( DECIMAL_FORMAT p_QName ) | ( DEFAULT DECIMAL_FORMAT ) ) ( p_DFPropertyName ) EQ p_StringLiteral SEMICOLON )
            // XQueryParser.g:248:13: k+= DECLARE ( ( DECIMAL_FORMAT p_QName ) | ( DEFAULT DECIMAL_FORMAT ) ) ( p_DFPropertyName ) EQ p_StringLiteral SEMICOLON
            {
            root_0 = (XQDTCommonTree)adaptor.nil();

            k=(CommonToken)match(input,DECLARE,FOLLOW_DECLARE_in_p_DecimalFormatDecl1949); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            k_tree = (XQDTCommonTree)adaptor.create(k);
            adaptor.addChild(root_0, k_tree);
            }
            if (list_k==null) list_k=new ArrayList();
            list_k.add(k);

            // XQueryParser.g:248:24: ( ( DECIMAL_FORMAT p_QName ) | ( DEFAULT DECIMAL_FORMAT ) )
            int alt14=2;
            int LA14_0 = input.LA(1);

            if ( (LA14_0==DECIMAL_FORMAT) ) {
                alt14=1;
            }
            else if ( (LA14_0==DEFAULT) ) {
                alt14=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 14, 0, input);

                throw nvae;
            }
            switch (alt14) {
                case 1 :
                    // XQueryParser.g:248:25: ( DECIMAL_FORMAT p_QName )
                    {
                    // XQueryParser.g:248:25: ( DECIMAL_FORMAT p_QName )
                    // XQueryParser.g:248:26: DECIMAL_FORMAT p_QName
                    {
                    DECIMAL_FORMAT42=(CommonToken)match(input,DECIMAL_FORMAT,FOLLOW_DECIMAL_FORMAT_in_p_DecimalFormatDecl1953); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    DECIMAL_FORMAT42_tree = (XQDTCommonTree)adaptor.create(DECIMAL_FORMAT42);
                    adaptor.addChild(root_0, DECIMAL_FORMAT42_tree);
                    }
                    pushFollow(FOLLOW_p_QName_in_p_DecimalFormatDecl1955);
                    p_QName43=p_QName();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, p_QName43.getTree());

                    }


                    }
                    break;
                case 2 :
                    // XQueryParser.g:248:52: ( DEFAULT DECIMAL_FORMAT )
                    {
                    // XQueryParser.g:248:52: ( DEFAULT DECIMAL_FORMAT )
                    // XQueryParser.g:248:53: DEFAULT DECIMAL_FORMAT
                    {
                    DEFAULT44=(CommonToken)match(input,DEFAULT,FOLLOW_DEFAULT_in_p_DecimalFormatDecl1961); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    DEFAULT44_tree = (XQDTCommonTree)adaptor.create(DEFAULT44);
                    adaptor.addChild(root_0, DEFAULT44_tree);
                    }
                    DECIMAL_FORMAT45=(CommonToken)match(input,DECIMAL_FORMAT,FOLLOW_DECIMAL_FORMAT_in_p_DecimalFormatDecl1963); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    DECIMAL_FORMAT45_tree = (XQDTCommonTree)adaptor.create(DECIMAL_FORMAT45);
                    adaptor.addChild(root_0, DECIMAL_FORMAT45_tree);
                    }

                    }


                    }
                    break;

            }

            // XQueryParser.g:248:78: ( p_DFPropertyName )
            // XQueryParser.g:248:79: p_DFPropertyName
            {
            pushFollow(FOLLOW_p_DFPropertyName_in_p_DecimalFormatDecl1968);
            p_DFPropertyName46=p_DFPropertyName();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, p_DFPropertyName46.getTree());

            }

            EQ47=(CommonToken)match(input,EQ,FOLLOW_EQ_in_p_DecimalFormatDecl1971); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            EQ47_tree = (XQDTCommonTree)adaptor.create(EQ47);
            adaptor.addChild(root_0, EQ47_tree);
            }
            pushFollow(FOLLOW_p_StringLiteral_in_p_DecimalFormatDecl1973);
            p_StringLiteral48=p_StringLiteral();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, p_StringLiteral48.getTree());
            SEMICOLON49=(CommonToken)match(input,SEMICOLON,FOLLOW_SEMICOLON_in_p_DecimalFormatDecl1975); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            SEMICOLON49_tree = (XQDTCommonTree)adaptor.create(SEMICOLON49);
            adaptor.addChild(root_0, SEMICOLON49_tree);
            }
            if ( state.backtracking==0 ) {
              ak(list_k);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (XQDTCommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (XQDTCommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "p_DecimalFormatDecl"

    public static class p_DFPropertyName_return extends ParserRuleReturnScope {
        XQDTCommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "p_DFPropertyName"
    // XQueryParser.g:252:1: p_DFPropertyName : (k= DECIMAL_SEPARATOR | k= GROUPING_SEPARATOR | k= INFINITY | k= MINUS_SIGN | k= NAN | k= PERCENT | k= PER_MILLE | k= ZERO_DIGIT | k= DIGIT | k= PATTERN_SEPARATOR );
    public final XQueryParser.p_DFPropertyName_return p_DFPropertyName() throws RecognitionException {
        XQueryParser.p_DFPropertyName_return retval = new XQueryParser.p_DFPropertyName_return();
        retval.start = input.LT(1);

        XQDTCommonTree root_0 = null;

        CommonToken k=null;

        XQDTCommonTree k_tree=null;

        try {
            // XQueryParser.g:253:9: (k= DECIMAL_SEPARATOR | k= GROUPING_SEPARATOR | k= INFINITY | k= MINUS_SIGN | k= NAN | k= PERCENT | k= PER_MILLE | k= ZERO_DIGIT | k= DIGIT | k= PATTERN_SEPARATOR )
            int alt15=10;
            switch ( input.LA(1) ) {
            case DECIMAL_SEPARATOR:
                {
                alt15=1;
                }
                break;
            case GROUPING_SEPARATOR:
                {
                alt15=2;
                }
                break;
            case INFINITY:
                {
                alt15=3;
                }
                break;
            case MINUS_SIGN:
                {
                alt15=4;
                }
                break;
            case NAN:
                {
                alt15=5;
                }
                break;
            case PERCENT:
                {
                alt15=6;
                }
                break;
            case PER_MILLE:
                {
                alt15=7;
                }
                break;
            case ZERO_DIGIT:
                {
                alt15=8;
                }
                break;
            case DIGIT:
                {
                alt15=9;
                }
                break;
            case PATTERN_SEPARATOR:
                {
                alt15=10;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 15, 0, input);

                throw nvae;
            }

            switch (alt15) {
                case 1 :
                    // XQueryParser.g:253:11: k= DECIMAL_SEPARATOR
                    {
                    root_0 = (XQDTCommonTree)adaptor.nil();

                    k=(CommonToken)match(input,DECIMAL_SEPARATOR,FOLLOW_DECIMAL_SEPARATOR_in_p_DFPropertyName2005); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    k_tree = (XQDTCommonTree)adaptor.create(k);
                    adaptor.addChild(root_0, k_tree);
                    }

                    }
                    break;
                case 2 :
                    // XQueryParser.g:253:33: k= GROUPING_SEPARATOR
                    {
                    root_0 = (XQDTCommonTree)adaptor.nil();

                    k=(CommonToken)match(input,GROUPING_SEPARATOR,FOLLOW_GROUPING_SEPARATOR_in_p_DFPropertyName2011); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    k_tree = (XQDTCommonTree)adaptor.create(k);
                    adaptor.addChild(root_0, k_tree);
                    }

                    }
                    break;
                case 3 :
                    // XQueryParser.g:253:56: k= INFINITY
                    {
                    root_0 = (XQDTCommonTree)adaptor.nil();

                    k=(CommonToken)match(input,INFINITY,FOLLOW_INFINITY_in_p_DFPropertyName2017); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    k_tree = (XQDTCommonTree)adaptor.create(k);
                    adaptor.addChild(root_0, k_tree);
                    }

                    }
                    break;
                case 4 :
                    // XQueryParser.g:253:69: k= MINUS_SIGN
                    {
                    root_0 = (XQDTCommonTree)adaptor.nil();

                    k=(CommonToken)match(input,MINUS_SIGN,FOLLOW_MINUS_SIGN_in_p_DFPropertyName2023); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    k_tree = (XQDTCommonTree)adaptor.create(k);
                    adaptor.addChild(root_0, k_tree);
                    }

                    }
                    break;
                case 5 :
                    // XQueryParser.g:253:84: k= NAN
                    {
                    root_0 = (XQDTCommonTree)adaptor.nil();

                    k=(CommonToken)match(input,NAN,FOLLOW_NAN_in_p_DFPropertyName2029); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    k_tree = (XQDTCommonTree)adaptor.create(k);
                    adaptor.addChild(root_0, k_tree);
                    }

                    }
                    break;
                case 6 :
                    // XQueryParser.g:253:92: k= PERCENT
                    {
                    root_0 = (XQDTCommonTree)adaptor.nil();

                    k=(CommonToken)match(input,PERCENT,FOLLOW_PERCENT_in_p_DFPropertyName2035); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    k_tree = (XQDTCommonTree)adaptor.create(k);
                    adaptor.addChild(root_0, k_tree);
                    }

                    }
                    break;
                case 7 :
                    // XQueryParser.g:253:104: k= PER_MILLE
                    {
                    root_0 = (XQDTCommonTree)adaptor.nil();

                    k=(CommonToken)match(input,PER_MILLE,FOLLOW_PER_MILLE_in_p_DFPropertyName2041); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    k_tree = (XQDTCommonTree)adaptor.create(k);
                    adaptor.addChild(root_0, k_tree);
                    }

                    }
                    break;
                case 8 :
                    // XQueryParser.g:253:118: k= ZERO_DIGIT
                    {
                    root_0 = (XQDTCommonTree)adaptor.nil();

                    k=(CommonToken)match(input,ZERO_DIGIT,FOLLOW_ZERO_DIGIT_in_p_DFPropertyName2047); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    k_tree = (XQDTCommonTree)adaptor.create(k);
                    adaptor.addChild(root_0, k_tree);
                    }

                    }
                    break;
                case 9 :
                    // XQueryParser.g:253:133: k= DIGIT
                    {
                    root_0 = (XQDTCommonTree)adaptor.nil();

                    k=(CommonToken)match(input,DIGIT,FOLLOW_DIGIT_in_p_DFPropertyName2053); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    k_tree = (XQDTCommonTree)adaptor.create(k);
                    adaptor.addChild(root_0, k_tree);
                    }

                    }
                    break;
                case 10 :
                    // XQueryParser.g:253:143: k= PATTERN_SEPARATOR
                    {
                    root_0 = (XQDTCommonTree)adaptor.nil();

                    k=(CommonToken)match(input,PATTERN_SEPARATOR,FOLLOW_PATTERN_SEPARATOR_in_p_DFPropertyName2059); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    k_tree = (XQDTCommonTree)adaptor.create(k);
                    adaptor.addChild(root_0, k_tree);
                    }
                    if ( state.backtracking==0 ) {
                      ak(k);
                    }

                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (XQDTCommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (XQDTCommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "p_DFPropertyName"

    public static class p_PreserveMode_return extends ParserRuleReturnScope {
        XQDTCommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "p_PreserveMode"
    // XQueryParser.g:257:1: p_PreserveMode : (k+= PRESERVE | k+= NO_PRESERVE ) ;
    public final XQueryParser.p_PreserveMode_return p_PreserveMode() throws RecognitionException {
        XQueryParser.p_PreserveMode_return retval = new XQueryParser.p_PreserveMode_return();
        retval.start = input.LT(1);

        XQDTCommonTree root_0 = null;

        CommonToken k=null;
        List list_k=null;

        XQDTCommonTree k_tree=null;

        try {
            // XQueryParser.g:258:9: ( (k+= PRESERVE | k+= NO_PRESERVE ) )
            // XQueryParser.g:258:13: (k+= PRESERVE | k+= NO_PRESERVE )
            {
            root_0 = (XQDTCommonTree)adaptor.nil();

            // XQueryParser.g:258:13: (k+= PRESERVE | k+= NO_PRESERVE )
            int alt16=2;
            int LA16_0 = input.LA(1);

            if ( (LA16_0==PRESERVE) ) {
                alt16=1;
            }
            else if ( (LA16_0==NO_PRESERVE) ) {
                alt16=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 16, 0, input);

                throw nvae;
            }
            switch (alt16) {
                case 1 :
                    // XQueryParser.g:258:14: k+= PRESERVE
                    {
                    k=(CommonToken)match(input,PRESERVE,FOLLOW_PRESERVE_in_p_PreserveMode2092); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    k_tree = (XQDTCommonTree)adaptor.create(k);
                    adaptor.addChild(root_0, k_tree);
                    }
                    if (list_k==null) list_k=new ArrayList();
                    list_k.add(k);


                    }
                    break;
                case 2 :
                    // XQueryParser.g:258:28: k+= NO_PRESERVE
                    {
                    k=(CommonToken)match(input,NO_PRESERVE,FOLLOW_NO_PRESERVE_in_p_PreserveMode2098); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    k_tree = (XQDTCommonTree)adaptor.create(k);
                    adaptor.addChild(root_0, k_tree);
                    }
                    if (list_k==null) list_k=new ArrayList();
                    list_k.add(k);


                    }
                    break;

            }

            if ( state.backtracking==0 ) {
              ak(list_k);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (XQDTCommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (XQDTCommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "p_PreserveMode"

    public static class p_InheritMode_return extends ParserRuleReturnScope {
        XQDTCommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "p_InheritMode"
    // XQueryParser.g:262:1: p_InheritMode : (k+= INHERIT | k+= NO_INHERIT ) ;
    public final XQueryParser.p_InheritMode_return p_InheritMode() throws RecognitionException {
        XQueryParser.p_InheritMode_return retval = new XQueryParser.p_InheritMode_return();
        retval.start = input.LT(1);

        XQDTCommonTree root_0 = null;

        CommonToken k=null;
        List list_k=null;

        XQDTCommonTree k_tree=null;

        try {
            // XQueryParser.g:263:9: ( (k+= INHERIT | k+= NO_INHERIT ) )
            // XQueryParser.g:263:13: (k+= INHERIT | k+= NO_INHERIT )
            {
            root_0 = (XQDTCommonTree)adaptor.nil();

            // XQueryParser.g:263:13: (k+= INHERIT | k+= NO_INHERIT )
            int alt17=2;
            int LA17_0 = input.LA(1);

            if ( (LA17_0==INHERIT) ) {
                alt17=1;
            }
            else if ( (LA17_0==NO_INHERIT) ) {
                alt17=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 17, 0, input);

                throw nvae;
            }
            switch (alt17) {
                case 1 :
                    // XQueryParser.g:263:14: k+= INHERIT
                    {
                    k=(CommonToken)match(input,INHERIT,FOLLOW_INHERIT_in_p_InheritMode2132); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    k_tree = (XQDTCommonTree)adaptor.create(k);
                    adaptor.addChild(root_0, k_tree);
                    }
                    if (list_k==null) list_k=new ArrayList();
                    list_k.add(k);


                    }
                    break;
                case 2 :
                    // XQueryParser.g:263:27: k+= NO_INHERIT
                    {
                    k=(CommonToken)match(input,NO_INHERIT,FOLLOW_NO_INHERIT_in_p_InheritMode2138); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    k_tree = (XQDTCommonTree)adaptor.create(k);
                    adaptor.addChild(root_0, k_tree);
                    }
                    if (list_k==null) list_k=new ArrayList();
                    list_k.add(k);


                    }
                    break;

            }

            if ( state.backtracking==0 ) {
              ak(list_k);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (XQDTCommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (XQDTCommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "p_InheritMode"

    public static class pm_DefaultCollationDecl_return extends ParserRuleReturnScope {
        XQDTCommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "pm_DefaultCollationDecl"
    // XQueryParser.g:267:1: pm_DefaultCollationDecl : k+= DECLARE k+= DEFAULT k+= COLLATION p_StringLiteral SEMICOLON ;
    public final XQueryParser.pm_DefaultCollationDecl_return pm_DefaultCollationDecl() throws RecognitionException {
        XQueryParser.pm_DefaultCollationDecl_return retval = new XQueryParser.pm_DefaultCollationDecl_return();
        retval.start = input.LT(1);

        XQDTCommonTree root_0 = null;

        CommonToken SEMICOLON51=null;
        CommonToken k=null;
        List list_k=null;
        XQueryParser.p_StringLiteral_return p_StringLiteral50 = null;


        XQDTCommonTree SEMICOLON51_tree=null;
        XQDTCommonTree k_tree=null;

        try {
            // XQueryParser.g:268:9: (k+= DECLARE k+= DEFAULT k+= COLLATION p_StringLiteral SEMICOLON )
            // XQueryParser.g:268:13: k+= DECLARE k+= DEFAULT k+= COLLATION p_StringLiteral SEMICOLON
            {
            root_0 = (XQDTCommonTree)adaptor.nil();

            k=(CommonToken)match(input,DECLARE,FOLLOW_DECLARE_in_pm_DefaultCollationDecl2179); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            k_tree = (XQDTCommonTree)adaptor.create(k);
            adaptor.addChild(root_0, k_tree);
            }
            if (list_k==null) list_k=new ArrayList();
            list_k.add(k);

            k=(CommonToken)match(input,DEFAULT,FOLLOW_DEFAULT_in_pm_DefaultCollationDecl2183); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            k_tree = (XQDTCommonTree)adaptor.create(k);
            adaptor.addChild(root_0, k_tree);
            }
            if (list_k==null) list_k=new ArrayList();
            list_k.add(k);

            k=(CommonToken)match(input,COLLATION,FOLLOW_COLLATION_in_pm_DefaultCollationDecl2187); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            k_tree = (XQDTCommonTree)adaptor.create(k);
            adaptor.addChild(root_0, k_tree);
            }
            if (list_k==null) list_k=new ArrayList();
            list_k.add(k);

            pushFollow(FOLLOW_p_StringLiteral_in_pm_DefaultCollationDecl2189);
            p_StringLiteral50=p_StringLiteral();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, p_StringLiteral50.getTree());
            SEMICOLON51=(CommonToken)match(input,SEMICOLON,FOLLOW_SEMICOLON_in_pm_DefaultCollationDecl2191); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            SEMICOLON51_tree = (XQDTCommonTree)adaptor.create(SEMICOLON51);
            adaptor.addChild(root_0, SEMICOLON51_tree);
            }
            if ( state.backtracking==0 ) {
              ak(list_k);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (XQDTCommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (XQDTCommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "pm_DefaultCollationDecl"

    public static class pm_BaseURIDecl_return extends ParserRuleReturnScope {
        XQDTCommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "pm_BaseURIDecl"
    // XQueryParser.g:272:1: pm_BaseURIDecl : k+= DECLARE k+= BASE_URI sl= p_StringLiteral SEMICOLON -> ^( BaseURIDecl $sl) ;
    public final XQueryParser.pm_BaseURIDecl_return pm_BaseURIDecl() throws RecognitionException {
        XQueryParser.pm_BaseURIDecl_return retval = new XQueryParser.pm_BaseURIDecl_return();
        retval.start = input.LT(1);

        XQDTCommonTree root_0 = null;

        CommonToken SEMICOLON52=null;
        CommonToken k=null;
        List list_k=null;
        XQueryParser.p_StringLiteral_return sl = null;


        XQDTCommonTree SEMICOLON52_tree=null;
        XQDTCommonTree k_tree=null;
        RewriteRuleTokenStream stream_BASE_URI=new RewriteRuleTokenStream(adaptor,"token BASE_URI");
        RewriteRuleTokenStream stream_SEMICOLON=new RewriteRuleTokenStream(adaptor,"token SEMICOLON");
        RewriteRuleTokenStream stream_DECLARE=new RewriteRuleTokenStream(adaptor,"token DECLARE");
        RewriteRuleSubtreeStream stream_p_StringLiteral=new RewriteRuleSubtreeStream(adaptor,"rule p_StringLiteral");
        try {
            // XQueryParser.g:273:9: (k+= DECLARE k+= BASE_URI sl= p_StringLiteral SEMICOLON -> ^( BaseURIDecl $sl) )
            // XQueryParser.g:273:13: k+= DECLARE k+= BASE_URI sl= p_StringLiteral SEMICOLON
            {
            k=(CommonToken)match(input,DECLARE,FOLLOW_DECLARE_in_pm_BaseURIDecl2231); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_DECLARE.add(k);

            if (list_k==null) list_k=new ArrayList();
            list_k.add(k);

            k=(CommonToken)match(input,BASE_URI,FOLLOW_BASE_URI_in_pm_BaseURIDecl2235); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_BASE_URI.add(k);

            if (list_k==null) list_k=new ArrayList();
            list_k.add(k);

            pushFollow(FOLLOW_p_StringLiteral_in_pm_BaseURIDecl2239);
            sl=p_StringLiteral();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_p_StringLiteral.add(sl.getTree());
            SEMICOLON52=(CommonToken)match(input,SEMICOLON,FOLLOW_SEMICOLON_in_pm_BaseURIDecl2241); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_SEMICOLON.add(SEMICOLON52);

            if ( state.backtracking==0 ) {
              ak(list_k);
            }


            // AST REWRITE
            // elements: sl
            // token labels: 
            // rule labels: sl, retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_sl=new RewriteRuleSubtreeStream(adaptor,"rule sl",sl!=null?sl.tree:null);
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (XQDTCommonTree)adaptor.nil();
            // 274:17: -> ^( BaseURIDecl $sl)
            {
                // XQueryParser.g:274:20: ^( BaseURIDecl $sl)
                {
                XQDTCommonTree root_1 = (XQDTCommonTree)adaptor.nil();
                root_1 = (XQDTCommonTree)adaptor.becomeRoot((XQDTCommonTree)adaptor.create(BaseURIDecl, "BaseURIDecl"), root_1);

                adaptor.addChild(root_1, stream_sl.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (XQDTCommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (XQDTCommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "pm_BaseURIDecl"

    public static class pm_SchemaImport_return extends ParserRuleReturnScope {
        XQDTCommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "pm_SchemaImport"
    // XQueryParser.g:278:1: pm_SchemaImport : k+= IMPORT k+= SCHEMA (sp= p_SchemaPrefix )? us= p_StringLiteral (k+= AT ah+= p_StringLiteral ( COMMA ah+= p_StringLiteral )* )? SEMICOLON -> ^( SchemaImport ^( SchemaPrefix ( $sp)? ) $us ^( AtHints ( $ah)* ) ) ;
    public final XQueryParser.pm_SchemaImport_return pm_SchemaImport() throws RecognitionException {
        XQueryParser.pm_SchemaImport_return retval = new XQueryParser.pm_SchemaImport_return();
        retval.start = input.LT(1);

        XQDTCommonTree root_0 = null;

        CommonToken COMMA53=null;
        CommonToken SEMICOLON54=null;
        CommonToken k=null;
        List list_k=null;
        List list_ah=null;
        XQueryParser.p_SchemaPrefix_return sp = null;

        XQueryParser.p_StringLiteral_return us = null;

        RuleReturnScope ah = null;
        XQDTCommonTree COMMA53_tree=null;
        XQDTCommonTree SEMICOLON54_tree=null;
        XQDTCommonTree k_tree=null;
        RewriteRuleTokenStream stream_COMMA=new RewriteRuleTokenStream(adaptor,"token COMMA");
        RewriteRuleTokenStream stream_SCHEMA=new RewriteRuleTokenStream(adaptor,"token SCHEMA");
        RewriteRuleTokenStream stream_SEMICOLON=new RewriteRuleTokenStream(adaptor,"token SEMICOLON");
        RewriteRuleTokenStream stream_IMPORT=new RewriteRuleTokenStream(adaptor,"token IMPORT");
        RewriteRuleTokenStream stream_AT=new RewriteRuleTokenStream(adaptor,"token AT");
        RewriteRuleSubtreeStream stream_p_StringLiteral=new RewriteRuleSubtreeStream(adaptor,"rule p_StringLiteral");
        RewriteRuleSubtreeStream stream_p_SchemaPrefix=new RewriteRuleSubtreeStream(adaptor,"rule p_SchemaPrefix");
        try {
            // XQueryParser.g:279:9: (k+= IMPORT k+= SCHEMA (sp= p_SchemaPrefix )? us= p_StringLiteral (k+= AT ah+= p_StringLiteral ( COMMA ah+= p_StringLiteral )* )? SEMICOLON -> ^( SchemaImport ^( SchemaPrefix ( $sp)? ) $us ^( AtHints ( $ah)* ) ) )
            // XQueryParser.g:279:11: k+= IMPORT k+= SCHEMA (sp= p_SchemaPrefix )? us= p_StringLiteral (k+= AT ah+= p_StringLiteral ( COMMA ah+= p_StringLiteral )* )? SEMICOLON
            {
            k=(CommonToken)match(input,IMPORT,FOLLOW_IMPORT_in_pm_SchemaImport2296); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_IMPORT.add(k);

            if (list_k==null) list_k=new ArrayList();
            list_k.add(k);

            k=(CommonToken)match(input,SCHEMA,FOLLOW_SCHEMA_in_pm_SchemaImport2300); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_SCHEMA.add(k);

            if (list_k==null) list_k=new ArrayList();
            list_k.add(k);

            // XQueryParser.g:279:33: (sp= p_SchemaPrefix )?
            int alt18=2;
            int LA18_0 = input.LA(1);

            if ( (LA18_0==DEFAULT||LA18_0==NAMESPACE) ) {
                alt18=1;
            }
            switch (alt18) {
                case 1 :
                    // XQueryParser.g:279:33: sp= p_SchemaPrefix
                    {
                    pushFollow(FOLLOW_p_SchemaPrefix_in_pm_SchemaImport2304);
                    sp=p_SchemaPrefix();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_p_SchemaPrefix.add(sp.getTree());

                    }
                    break;

            }

            pushFollow(FOLLOW_p_StringLiteral_in_pm_SchemaImport2309);
            us=p_StringLiteral();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_p_StringLiteral.add(us.getTree());
            // XQueryParser.g:279:69: (k+= AT ah+= p_StringLiteral ( COMMA ah+= p_StringLiteral )* )?
            int alt20=2;
            int LA20_0 = input.LA(1);

            if ( (LA20_0==AT) ) {
                alt20=1;
            }
            switch (alt20) {
                case 1 :
                    // XQueryParser.g:279:70: k+= AT ah+= p_StringLiteral ( COMMA ah+= p_StringLiteral )*
                    {
                    k=(CommonToken)match(input,AT,FOLLOW_AT_in_pm_SchemaImport2314); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_AT.add(k);

                    if (list_k==null) list_k=new ArrayList();
                    list_k.add(k);

                    pushFollow(FOLLOW_p_StringLiteral_in_pm_SchemaImport2318);
                    ah=p_StringLiteral();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_p_StringLiteral.add(ah.getTree());
                    if (list_ah==null) list_ah=new ArrayList();
                    list_ah.add(ah.getTree());

                    // XQueryParser.g:279:96: ( COMMA ah+= p_StringLiteral )*
                    loop19:
                    do {
                        int alt19=2;
                        int LA19_0 = input.LA(1);

                        if ( (LA19_0==COMMA) ) {
                            alt19=1;
                        }


                        switch (alt19) {
                    	case 1 :
                    	    // XQueryParser.g:279:97: COMMA ah+= p_StringLiteral
                    	    {
                    	    COMMA53=(CommonToken)match(input,COMMA,FOLLOW_COMMA_in_pm_SchemaImport2321); if (state.failed) return retval; 
                    	    if ( state.backtracking==0 ) stream_COMMA.add(COMMA53);

                    	    pushFollow(FOLLOW_p_StringLiteral_in_pm_SchemaImport2325);
                    	    ah=p_StringLiteral();

                    	    state._fsp--;
                    	    if (state.failed) return retval;
                    	    if ( state.backtracking==0 ) stream_p_StringLiteral.add(ah.getTree());
                    	    if (list_ah==null) list_ah=new ArrayList();
                    	    list_ah.add(ah.getTree());


                    	    }
                    	    break;

                    	default :
                    	    break loop19;
                        }
                    } while (true);


                    }
                    break;

            }

            SEMICOLON54=(CommonToken)match(input,SEMICOLON,FOLLOW_SEMICOLON_in_pm_SchemaImport2331); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_SEMICOLON.add(SEMICOLON54);

            if ( state.backtracking==0 ) {
              ak(list_k);
            }


            // AST REWRITE
            // elements: us, sp, ah
            // token labels: 
            // rule labels: sp, us, retval
            // token list labels: 
            // rule list labels: ah
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_sp=new RewriteRuleSubtreeStream(adaptor,"rule sp",sp!=null?sp.tree:null);
            RewriteRuleSubtreeStream stream_us=new RewriteRuleSubtreeStream(adaptor,"rule us",us!=null?us.tree:null);
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
            RewriteRuleSubtreeStream stream_ah=new RewriteRuleSubtreeStream(adaptor,"token ah",list_ah);
            root_0 = (XQDTCommonTree)adaptor.nil();
            // 280:17: -> ^( SchemaImport ^( SchemaPrefix ( $sp)? ) $us ^( AtHints ( $ah)* ) )
            {
                // XQueryParser.g:280:20: ^( SchemaImport ^( SchemaPrefix ( $sp)? ) $us ^( AtHints ( $ah)* ) )
                {
                XQDTCommonTree root_1 = (XQDTCommonTree)adaptor.nil();
                root_1 = (XQDTCommonTree)adaptor.becomeRoot((XQDTCommonTree)adaptor.create(SchemaImport, "SchemaImport"), root_1);

                // XQueryParser.g:280:35: ^( SchemaPrefix ( $sp)? )
                {
                XQDTCommonTree root_2 = (XQDTCommonTree)adaptor.nil();
                root_2 = (XQDTCommonTree)adaptor.becomeRoot((XQDTCommonTree)adaptor.create(SchemaPrefix, "SchemaPrefix"), root_2);

                // XQueryParser.g:280:50: ( $sp)?
                if ( stream_sp.hasNext() ) {
                    adaptor.addChild(root_2, stream_sp.nextTree());

                }
                stream_sp.reset();

                adaptor.addChild(root_1, root_2);
                }
                adaptor.addChild(root_1, stream_us.nextTree());
                // XQueryParser.g:280:60: ^( AtHints ( $ah)* )
                {
                XQDTCommonTree root_2 = (XQDTCommonTree)adaptor.nil();
                root_2 = (XQDTCommonTree)adaptor.becomeRoot((XQDTCommonTree)adaptor.create(AtHints, "AtHints"), root_2);

                // XQueryParser.g:280:70: ( $ah)*
                while ( stream_ah.hasNext() ) {
                    adaptor.addChild(root_2, stream_ah.nextTree());

                }
                stream_ah.reset();

                adaptor.addChild(root_1, root_2);
                }

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (XQDTCommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (XQDTCommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "pm_SchemaImport"

    public static class p_SchemaPrefix_return extends ParserRuleReturnScope {
        XQDTCommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "p_SchemaPrefix"
    // XQueryParser.g:284:1: p_SchemaPrefix : (k+= NAMESPACE nn= p_NCName EQUAL -> ^( NamespaceName $nn) | k+= DEFAULT k+= ELEMENT k+= NAMESPACE -> DefaultElementNamespace );
    public final XQueryParser.p_SchemaPrefix_return p_SchemaPrefix() throws RecognitionException {
        XQueryParser.p_SchemaPrefix_return retval = new XQueryParser.p_SchemaPrefix_return();
        retval.start = input.LT(1);

        XQDTCommonTree root_0 = null;

        CommonToken EQUAL55=null;
        CommonToken k=null;
        List list_k=null;
        XQueryParser.p_NCName_return nn = null;


        XQDTCommonTree EQUAL55_tree=null;
        XQDTCommonTree k_tree=null;
        RewriteRuleTokenStream stream_NAMESPACE=new RewriteRuleTokenStream(adaptor,"token NAMESPACE");
        RewriteRuleTokenStream stream_DEFAULT=new RewriteRuleTokenStream(adaptor,"token DEFAULT");
        RewriteRuleTokenStream stream_ELEMENT=new RewriteRuleTokenStream(adaptor,"token ELEMENT");
        RewriteRuleTokenStream stream_EQUAL=new RewriteRuleTokenStream(adaptor,"token EQUAL");
        RewriteRuleSubtreeStream stream_p_NCName=new RewriteRuleSubtreeStream(adaptor,"rule p_NCName");
        try {
            // XQueryParser.g:285:9: (k+= NAMESPACE nn= p_NCName EQUAL -> ^( NamespaceName $nn) | k+= DEFAULT k+= ELEMENT k+= NAMESPACE -> DefaultElementNamespace )
            int alt21=2;
            int LA21_0 = input.LA(1);

            if ( (LA21_0==NAMESPACE) ) {
                alt21=1;
            }
            else if ( (LA21_0==DEFAULT) ) {
                alt21=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 21, 0, input);

                throw nvae;
            }
            switch (alt21) {
                case 1 :
                    // XQueryParser.g:285:11: k+= NAMESPACE nn= p_NCName EQUAL
                    {
                    k=(CommonToken)match(input,NAMESPACE,FOLLOW_NAMESPACE_in_p_SchemaPrefix2403); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_NAMESPACE.add(k);

                    if (list_k==null) list_k=new ArrayList();
                    list_k.add(k);

                    pushFollow(FOLLOW_p_NCName_in_p_SchemaPrefix2407);
                    nn=p_NCName();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_p_NCName.add(nn.getTree());
                    EQUAL55=(CommonToken)match(input,EQUAL,FOLLOW_EQUAL_in_p_SchemaPrefix2409); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_EQUAL.add(EQUAL55);

                    if ( state.backtracking==0 ) {
                      ak(list_k);
                    }


                    // AST REWRITE
                    // elements: nn
                    // token labels: 
                    // rule labels: nn, retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_nn=new RewriteRuleSubtreeStream(adaptor,"rule nn",nn!=null?nn.tree:null);
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (XQDTCommonTree)adaptor.nil();
                    // 286:17: -> ^( NamespaceName $nn)
                    {
                        // XQueryParser.g:286:20: ^( NamespaceName $nn)
                        {
                        XQDTCommonTree root_1 = (XQDTCommonTree)adaptor.nil();
                        root_1 = (XQDTCommonTree)adaptor.becomeRoot((XQDTCommonTree)adaptor.create(NamespaceName, "NamespaceName"), root_1);

                        adaptor.addChild(root_1, stream_nn.nextTree());

                        adaptor.addChild(root_0, root_1);
                        }

                    }

                    retval.tree = root_0;}
                    }
                    break;
                case 2 :
                    // XQueryParser.g:287:11: k+= DEFAULT k+= ELEMENT k+= NAMESPACE
                    {
                    k=(CommonToken)match(input,DEFAULT,FOLLOW_DEFAULT_in_p_SchemaPrefix2450); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_DEFAULT.add(k);

                    if (list_k==null) list_k=new ArrayList();
                    list_k.add(k);

                    k=(CommonToken)match(input,ELEMENT,FOLLOW_ELEMENT_in_p_SchemaPrefix2454); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_ELEMENT.add(k);

                    if (list_k==null) list_k=new ArrayList();
                    list_k.add(k);

                    k=(CommonToken)match(input,NAMESPACE,FOLLOW_NAMESPACE_in_p_SchemaPrefix2458); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_NAMESPACE.add(k);

                    if (list_k==null) list_k=new ArrayList();
                    list_k.add(k);

                    if ( state.backtracking==0 ) {
                      ak(list_k);
                    }


                    // AST REWRITE
                    // elements: 
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (XQDTCommonTree)adaptor.nil();
                    // 288:17: -> DefaultElementNamespace
                    {
                        adaptor.addChild(root_0, (XQDTCommonTree)adaptor.create(DefaultElementNamespace, "DefaultElementNamespace"));

                    }

                    retval.tree = root_0;}
                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (XQDTCommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (XQDTCommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "p_SchemaPrefix"

    public static class pm_ModuleImport_return extends ParserRuleReturnScope {
        XQDTCommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "pm_ModuleImport"
    // XQueryParser.g:292:1: pm_ModuleImport : k+= IMPORT k+= MODULE (k+= NAMESPACE nn= p_NCName EQUAL )? us= p_StringLiteral (k+= AT ah+= p_StringLiteral ( COMMA ah+= p_StringLiteral )* )? SEMICOLON -> ^( ModuleImport ^( NamespaceName ( $nn)? ) $us ^( AtHints ( $ah)* ) ) ;
    public final XQueryParser.pm_ModuleImport_return pm_ModuleImport() throws RecognitionException {
        XQueryParser.pm_ModuleImport_return retval = new XQueryParser.pm_ModuleImport_return();
        retval.start = input.LT(1);

        XQDTCommonTree root_0 = null;

        CommonToken EQUAL56=null;
        CommonToken COMMA57=null;
        CommonToken SEMICOLON58=null;
        CommonToken k=null;
        List list_k=null;
        List list_ah=null;
        XQueryParser.p_NCName_return nn = null;

        XQueryParser.p_StringLiteral_return us = null;

        RuleReturnScope ah = null;
        XQDTCommonTree EQUAL56_tree=null;
        XQDTCommonTree COMMA57_tree=null;
        XQDTCommonTree SEMICOLON58_tree=null;
        XQDTCommonTree k_tree=null;
        RewriteRuleTokenStream stream_NAMESPACE=new RewriteRuleTokenStream(adaptor,"token NAMESPACE");
        RewriteRuleTokenStream stream_COMMA=new RewriteRuleTokenStream(adaptor,"token COMMA");
        RewriteRuleTokenStream stream_EQUAL=new RewriteRuleTokenStream(adaptor,"token EQUAL");
        RewriteRuleTokenStream stream_SEMICOLON=new RewriteRuleTokenStream(adaptor,"token SEMICOLON");
        RewriteRuleTokenStream stream_IMPORT=new RewriteRuleTokenStream(adaptor,"token IMPORT");
        RewriteRuleTokenStream stream_MODULE=new RewriteRuleTokenStream(adaptor,"token MODULE");
        RewriteRuleTokenStream stream_AT=new RewriteRuleTokenStream(adaptor,"token AT");
        RewriteRuleSubtreeStream stream_p_NCName=new RewriteRuleSubtreeStream(adaptor,"rule p_NCName");
        RewriteRuleSubtreeStream stream_p_StringLiteral=new RewriteRuleSubtreeStream(adaptor,"rule p_StringLiteral");
        try {
            // XQueryParser.g:293:9: (k+= IMPORT k+= MODULE (k+= NAMESPACE nn= p_NCName EQUAL )? us= p_StringLiteral (k+= AT ah+= p_StringLiteral ( COMMA ah+= p_StringLiteral )* )? SEMICOLON -> ^( ModuleImport ^( NamespaceName ( $nn)? ) $us ^( AtHints ( $ah)* ) ) )
            // XQueryParser.g:293:11: k+= IMPORT k+= MODULE (k+= NAMESPACE nn= p_NCName EQUAL )? us= p_StringLiteral (k+= AT ah+= p_StringLiteral ( COMMA ah+= p_StringLiteral )* )? SEMICOLON
            {
            k=(CommonToken)match(input,IMPORT,FOLLOW_IMPORT_in_pm_ModuleImport2508); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_IMPORT.add(k);

            if (list_k==null) list_k=new ArrayList();
            list_k.add(k);

            k=(CommonToken)match(input,MODULE,FOLLOW_MODULE_in_pm_ModuleImport2512); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_MODULE.add(k);

            if (list_k==null) list_k=new ArrayList();
            list_k.add(k);

            // XQueryParser.g:293:31: (k+= NAMESPACE nn= p_NCName EQUAL )?
            int alt22=2;
            int LA22_0 = input.LA(1);

            if ( (LA22_0==NAMESPACE) ) {
                alt22=1;
            }
            switch (alt22) {
                case 1 :
                    // XQueryParser.g:293:32: k+= NAMESPACE nn= p_NCName EQUAL
                    {
                    k=(CommonToken)match(input,NAMESPACE,FOLLOW_NAMESPACE_in_pm_ModuleImport2517); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_NAMESPACE.add(k);

                    if (list_k==null) list_k=new ArrayList();
                    list_k.add(k);

                    pushFollow(FOLLOW_p_NCName_in_pm_ModuleImport2521);
                    nn=p_NCName();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_p_NCName.add(nn.getTree());
                    EQUAL56=(CommonToken)match(input,EQUAL,FOLLOW_EQUAL_in_pm_ModuleImport2523); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_EQUAL.add(EQUAL56);


                    }
                    break;

            }

            pushFollow(FOLLOW_p_StringLiteral_in_pm_ModuleImport2529);
            us=p_StringLiteral();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_p_StringLiteral.add(us.getTree());
            // XQueryParser.g:293:84: (k+= AT ah+= p_StringLiteral ( COMMA ah+= p_StringLiteral )* )?
            int alt24=2;
            int LA24_0 = input.LA(1);

            if ( (LA24_0==AT) ) {
                alt24=1;
            }
            switch (alt24) {
                case 1 :
                    // XQueryParser.g:293:85: k+= AT ah+= p_StringLiteral ( COMMA ah+= p_StringLiteral )*
                    {
                    k=(CommonToken)match(input,AT,FOLLOW_AT_in_pm_ModuleImport2534); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_AT.add(k);

                    if (list_k==null) list_k=new ArrayList();
                    list_k.add(k);

                    pushFollow(FOLLOW_p_StringLiteral_in_pm_ModuleImport2538);
                    ah=p_StringLiteral();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_p_StringLiteral.add(ah.getTree());
                    if (list_ah==null) list_ah=new ArrayList();
                    list_ah.add(ah.getTree());

                    // XQueryParser.g:293:111: ( COMMA ah+= p_StringLiteral )*
                    loop23:
                    do {
                        int alt23=2;
                        int LA23_0 = input.LA(1);

                        if ( (LA23_0==COMMA) ) {
                            alt23=1;
                        }


                        switch (alt23) {
                    	case 1 :
                    	    // XQueryParser.g:293:112: COMMA ah+= p_StringLiteral
                    	    {
                    	    COMMA57=(CommonToken)match(input,COMMA,FOLLOW_COMMA_in_pm_ModuleImport2541); if (state.failed) return retval; 
                    	    if ( state.backtracking==0 ) stream_COMMA.add(COMMA57);

                    	    pushFollow(FOLLOW_p_StringLiteral_in_pm_ModuleImport2545);
                    	    ah=p_StringLiteral();

                    	    state._fsp--;
                    	    if (state.failed) return retval;
                    	    if ( state.backtracking==0 ) stream_p_StringLiteral.add(ah.getTree());
                    	    if (list_ah==null) list_ah=new ArrayList();
                    	    list_ah.add(ah.getTree());


                    	    }
                    	    break;

                    	default :
                    	    break loop23;
                        }
                    } while (true);


                    }
                    break;

            }

            SEMICOLON58=(CommonToken)match(input,SEMICOLON,FOLLOW_SEMICOLON_in_pm_ModuleImport2551); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_SEMICOLON.add(SEMICOLON58);

            if ( state.backtracking==0 ) {
              ak(list_k);
            }


            // AST REWRITE
            // elements: nn, ah, us
            // token labels: 
            // rule labels: us, nn, retval
            // token list labels: 
            // rule list labels: ah
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_us=new RewriteRuleSubtreeStream(adaptor,"rule us",us!=null?us.tree:null);
            RewriteRuleSubtreeStream stream_nn=new RewriteRuleSubtreeStream(adaptor,"rule nn",nn!=null?nn.tree:null);
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
            RewriteRuleSubtreeStream stream_ah=new RewriteRuleSubtreeStream(adaptor,"token ah",list_ah);
            root_0 = (XQDTCommonTree)adaptor.nil();
            // 294:17: -> ^( ModuleImport ^( NamespaceName ( $nn)? ) $us ^( AtHints ( $ah)* ) )
            {
                // XQueryParser.g:294:20: ^( ModuleImport ^( NamespaceName ( $nn)? ) $us ^( AtHints ( $ah)* ) )
                {
                XQDTCommonTree root_1 = (XQDTCommonTree)adaptor.nil();
                root_1 = (XQDTCommonTree)adaptor.becomeRoot((XQDTCommonTree)adaptor.create(ModuleImport, "ModuleImport"), root_1);

                // XQueryParser.g:294:35: ^( NamespaceName ( $nn)? )
                {
                XQDTCommonTree root_2 = (XQDTCommonTree)adaptor.nil();
                root_2 = (XQDTCommonTree)adaptor.becomeRoot((XQDTCommonTree)adaptor.create(NamespaceName, "NamespaceName"), root_2);

                // XQueryParser.g:294:51: ( $nn)?
                if ( stream_nn.hasNext() ) {
                    adaptor.addChild(root_2, stream_nn.nextTree());

                }
                stream_nn.reset();

                adaptor.addChild(root_1, root_2);
                }
                adaptor.addChild(root_1, stream_us.nextTree());
                // XQueryParser.g:294:61: ^( AtHints ( $ah)* )
                {
                XQDTCommonTree root_2 = (XQDTCommonTree)adaptor.nil();
                root_2 = (XQDTCommonTree)adaptor.becomeRoot((XQDTCommonTree)adaptor.create(AtHints, "AtHints"), root_2);

                // XQueryParser.g:294:71: ( $ah)*
                while ( stream_ah.hasNext() ) {
                    adaptor.addChild(root_2, stream_ah.nextTree());

                }
                stream_ah.reset();

                adaptor.addChild(root_1, root_2);
                }

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (XQDTCommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (XQDTCommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "pm_ModuleImport"

    public static class pm_FTOptionDecl_return extends ParserRuleReturnScope {
        XQDTCommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "pm_FTOptionDecl"
    // XQueryParser.g:298:1: pm_FTOptionDecl : k+= DECLARE k+= FT_OPTION p_FTMatchOptions SEMICOLON ;
    public final XQueryParser.pm_FTOptionDecl_return pm_FTOptionDecl() throws RecognitionException {
        XQueryParser.pm_FTOptionDecl_return retval = new XQueryParser.pm_FTOptionDecl_return();
        retval.start = input.LT(1);

        XQDTCommonTree root_0 = null;

        CommonToken SEMICOLON60=null;
        CommonToken k=null;
        List list_k=null;
        XQueryParser.p_FTMatchOptions_return p_FTMatchOptions59 = null;


        XQDTCommonTree SEMICOLON60_tree=null;
        XQDTCommonTree k_tree=null;

        try {
            // XQueryParser.g:299:9: (k+= DECLARE k+= FT_OPTION p_FTMatchOptions SEMICOLON )
            // XQueryParser.g:299:11: k+= DECLARE k+= FT_OPTION p_FTMatchOptions SEMICOLON
            {
            root_0 = (XQDTCommonTree)adaptor.nil();

            k=(CommonToken)match(input,DECLARE,FOLLOW_DECLARE_in_pm_FTOptionDecl2622); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            k_tree = (XQDTCommonTree)adaptor.create(k);
            adaptor.addChild(root_0, k_tree);
            }
            if (list_k==null) list_k=new ArrayList();
            list_k.add(k);

            k=(CommonToken)match(input,FT_OPTION,FOLLOW_FT_OPTION_in_pm_FTOptionDecl2626); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            k_tree = (XQDTCommonTree)adaptor.create(k);
            adaptor.addChild(root_0, k_tree);
            }
            if (list_k==null) list_k=new ArrayList();
            list_k.add(k);

            pushFollow(FOLLOW_p_FTMatchOptions_in_pm_FTOptionDecl2628);
            p_FTMatchOptions59=p_FTMatchOptions();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, p_FTMatchOptions59.getTree());
            SEMICOLON60=(CommonToken)match(input,SEMICOLON,FOLLOW_SEMICOLON_in_pm_FTOptionDecl2630); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            SEMICOLON60_tree = (XQDTCommonTree)adaptor.create(SEMICOLON60);
            adaptor.addChild(root_0, SEMICOLON60_tree);
            }
            if ( state.backtracking==0 ) {
              ak(list_k);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (XQDTCommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (XQDTCommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "pm_FTOptionDecl"

    public static class pm_VarDecl_return extends ParserRuleReturnScope {
        XQDTCommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "pm_VarDecl"
    // XQueryParser.g:303:1: pm_VarDecl : k+= DECLARE pg_PrivateVarOption vdt= pg_VarDeclType DOLLAR qn= p_QName (td= p_TypeDeclaration )? ( ( BIND es= p_ExprSingle ) | (k+= EXTERNAL ( BIND des= p_ExprSingle )? ) ) SEMICOLON -> ^( VarDecl $vdt $qn ^( VarType ( $td)? ) ^( VarValue ( $es)? ^( VarDefaultValue ( $des)? ) ) ) ;
    public final XQueryParser.pm_VarDecl_return pm_VarDecl() throws RecognitionException {
        XQueryParser.pm_VarDecl_return retval = new XQueryParser.pm_VarDecl_return();
        retval.start = input.LT(1);

        XQDTCommonTree root_0 = null;

        CommonToken DOLLAR62=null;
        CommonToken BIND63=null;
        CommonToken BIND64=null;
        CommonToken SEMICOLON65=null;
        CommonToken k=null;
        List list_k=null;
        XQueryParser.pg_VarDeclType_return vdt = null;

        XQueryParser.p_QName_return qn = null;

        XQueryParser.p_TypeDeclaration_return td = null;

        XQueryParser.p_ExprSingle_return es = null;

        XQueryParser.p_ExprSingle_return des = null;

        XQueryParser.pg_PrivateVarOption_return pg_PrivateVarOption61 = null;


        XQDTCommonTree DOLLAR62_tree=null;
        XQDTCommonTree BIND63_tree=null;
        XQDTCommonTree BIND64_tree=null;
        XQDTCommonTree SEMICOLON65_tree=null;
        XQDTCommonTree k_tree=null;
        RewriteRuleTokenStream stream_DOLLAR=new RewriteRuleTokenStream(adaptor,"token DOLLAR");
        RewriteRuleTokenStream stream_EXTERNAL=new RewriteRuleTokenStream(adaptor,"token EXTERNAL");
        RewriteRuleTokenStream stream_SEMICOLON=new RewriteRuleTokenStream(adaptor,"token SEMICOLON");
        RewriteRuleTokenStream stream_BIND=new RewriteRuleTokenStream(adaptor,"token BIND");
        RewriteRuleTokenStream stream_DECLARE=new RewriteRuleTokenStream(adaptor,"token DECLARE");
        RewriteRuleSubtreeStream stream_pg_VarDeclType=new RewriteRuleSubtreeStream(adaptor,"rule pg_VarDeclType");
        RewriteRuleSubtreeStream stream_p_ExprSingle=new RewriteRuleSubtreeStream(adaptor,"rule p_ExprSingle");
        RewriteRuleSubtreeStream stream_p_TypeDeclaration=new RewriteRuleSubtreeStream(adaptor,"rule p_TypeDeclaration");
        RewriteRuleSubtreeStream stream_pg_PrivateVarOption=new RewriteRuleSubtreeStream(adaptor,"rule pg_PrivateVarOption");
        RewriteRuleSubtreeStream stream_p_QName=new RewriteRuleSubtreeStream(adaptor,"rule p_QName");
        try {
            // XQueryParser.g:304:9: (k+= DECLARE pg_PrivateVarOption vdt= pg_VarDeclType DOLLAR qn= p_QName (td= p_TypeDeclaration )? ( ( BIND es= p_ExprSingle ) | (k+= EXTERNAL ( BIND des= p_ExprSingle )? ) ) SEMICOLON -> ^( VarDecl $vdt $qn ^( VarType ( $td)? ) ^( VarValue ( $es)? ^( VarDefaultValue ( $des)? ) ) ) )
            // XQueryParser.g:304:11: k+= DECLARE pg_PrivateVarOption vdt= pg_VarDeclType DOLLAR qn= p_QName (td= p_TypeDeclaration )? ( ( BIND es= p_ExprSingle ) | (k+= EXTERNAL ( BIND des= p_ExprSingle )? ) ) SEMICOLON
            {
            k=(CommonToken)match(input,DECLARE,FOLLOW_DECLARE_in_pm_VarDecl2664); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_DECLARE.add(k);

            if (list_k==null) list_k=new ArrayList();
            list_k.add(k);

            pushFollow(FOLLOW_pg_PrivateVarOption_in_pm_VarDecl2666);
            pg_PrivateVarOption61=pg_PrivateVarOption();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_pg_PrivateVarOption.add(pg_PrivateVarOption61.getTree());
            pushFollow(FOLLOW_pg_VarDeclType_in_pm_VarDecl2670);
            vdt=pg_VarDeclType();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_pg_VarDeclType.add(vdt.getTree());
            DOLLAR62=(CommonToken)match(input,DOLLAR,FOLLOW_DOLLAR_in_pm_VarDecl2672); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_DOLLAR.add(DOLLAR62);

            pushFollow(FOLLOW_p_QName_in_pm_VarDecl2676);
            qn=p_QName();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_p_QName.add(qn.getTree());
            // XQueryParser.g:304:81: (td= p_TypeDeclaration )?
            int alt25=2;
            int LA25_0 = input.LA(1);

            if ( (LA25_0==AS) ) {
                alt25=1;
            }
            switch (alt25) {
                case 1 :
                    // XQueryParser.g:304:81: td= p_TypeDeclaration
                    {
                    pushFollow(FOLLOW_p_TypeDeclaration_in_pm_VarDecl2680);
                    td=p_TypeDeclaration();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_p_TypeDeclaration.add(td.getTree());

                    }
                    break;

            }

            // XQueryParser.g:304:101: ( ( BIND es= p_ExprSingle ) | (k+= EXTERNAL ( BIND des= p_ExprSingle )? ) )
            int alt27=2;
            int LA27_0 = input.LA(1);

            if ( (LA27_0==BIND) ) {
                alt27=1;
            }
            else if ( (LA27_0==EXTERNAL) ) {
                alt27=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 27, 0, input);

                throw nvae;
            }
            switch (alt27) {
                case 1 :
                    // XQueryParser.g:304:102: ( BIND es= p_ExprSingle )
                    {
                    // XQueryParser.g:304:102: ( BIND es= p_ExprSingle )
                    // XQueryParser.g:304:103: BIND es= p_ExprSingle
                    {
                    BIND63=(CommonToken)match(input,BIND,FOLLOW_BIND_in_pm_VarDecl2685); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_BIND.add(BIND63);

                    pushFollow(FOLLOW_p_ExprSingle_in_pm_VarDecl2689);
                    es=p_ExprSingle();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_p_ExprSingle.add(es.getTree());

                    }


                    }
                    break;
                case 2 :
                    // XQueryParser.g:304:127: (k+= EXTERNAL ( BIND des= p_ExprSingle )? )
                    {
                    // XQueryParser.g:304:127: (k+= EXTERNAL ( BIND des= p_ExprSingle )? )
                    // XQueryParser.g:304:128: k+= EXTERNAL ( BIND des= p_ExprSingle )?
                    {
                    k=(CommonToken)match(input,EXTERNAL,FOLLOW_EXTERNAL_in_pm_VarDecl2697); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_EXTERNAL.add(k);

                    if (list_k==null) list_k=new ArrayList();
                    list_k.add(k);

                    // XQueryParser.g:304:140: ( BIND des= p_ExprSingle )?
                    int alt26=2;
                    int LA26_0 = input.LA(1);

                    if ( (LA26_0==BIND) ) {
                        alt26=1;
                    }
                    switch (alt26) {
                        case 1 :
                            // XQueryParser.g:304:141: BIND des= p_ExprSingle
                            {
                            BIND64=(CommonToken)match(input,BIND,FOLLOW_BIND_in_pm_VarDecl2700); if (state.failed) return retval; 
                            if ( state.backtracking==0 ) stream_BIND.add(BIND64);

                            pushFollow(FOLLOW_p_ExprSingle_in_pm_VarDecl2704);
                            des=p_ExprSingle();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_p_ExprSingle.add(des.getTree());

                            }
                            break;

                    }


                    }


                    }
                    break;

            }

            SEMICOLON65=(CommonToken)match(input,SEMICOLON,FOLLOW_SEMICOLON_in_pm_VarDecl2710); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_SEMICOLON.add(SEMICOLON65);

            if ( state.backtracking==0 ) {
              ak(list_k);
            }


            // AST REWRITE
            // elements: qn, vdt, td, des, es
            // token labels: 
            // rule labels: td, qn, es, retval, vdt, des
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_td=new RewriteRuleSubtreeStream(adaptor,"rule td",td!=null?td.tree:null);
            RewriteRuleSubtreeStream stream_qn=new RewriteRuleSubtreeStream(adaptor,"rule qn",qn!=null?qn.tree:null);
            RewriteRuleSubtreeStream stream_es=new RewriteRuleSubtreeStream(adaptor,"rule es",es!=null?es.tree:null);
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
            RewriteRuleSubtreeStream stream_vdt=new RewriteRuleSubtreeStream(adaptor,"rule vdt",vdt!=null?vdt.tree:null);
            RewriteRuleSubtreeStream stream_des=new RewriteRuleSubtreeStream(adaptor,"rule des",des!=null?des.tree:null);

            root_0 = (XQDTCommonTree)adaptor.nil();
            // 305:17: -> ^( VarDecl $vdt $qn ^( VarType ( $td)? ) ^( VarValue ( $es)? ^( VarDefaultValue ( $des)? ) ) )
            {
                // XQueryParser.g:305:20: ^( VarDecl $vdt $qn ^( VarType ( $td)? ) ^( VarValue ( $es)? ^( VarDefaultValue ( $des)? ) ) )
                {
                XQDTCommonTree root_1 = (XQDTCommonTree)adaptor.nil();
                root_1 = (XQDTCommonTree)adaptor.becomeRoot((XQDTCommonTree)adaptor.create(VarDecl, "VarDecl"), root_1);

                adaptor.addChild(root_1, stream_vdt.nextTree());
                adaptor.addChild(root_1, stream_qn.nextTree());
                // XQueryParser.g:305:39: ^( VarType ( $td)? )
                {
                XQDTCommonTree root_2 = (XQDTCommonTree)adaptor.nil();
                root_2 = (XQDTCommonTree)adaptor.becomeRoot((XQDTCommonTree)adaptor.create(VarType, "VarType"), root_2);

                // XQueryParser.g:305:49: ( $td)?
                if ( stream_td.hasNext() ) {
                    adaptor.addChild(root_2, stream_td.nextTree());

                }
                stream_td.reset();

                adaptor.addChild(root_1, root_2);
                }
                // XQueryParser.g:305:55: ^( VarValue ( $es)? ^( VarDefaultValue ( $des)? ) )
                {
                XQDTCommonTree root_2 = (XQDTCommonTree)adaptor.nil();
                root_2 = (XQDTCommonTree)adaptor.becomeRoot((XQDTCommonTree)adaptor.create(VarValue, "VarValue"), root_2);

                // XQueryParser.g:305:66: ( $es)?
                if ( stream_es.hasNext() ) {
                    adaptor.addChild(root_2, stream_es.nextTree());

                }
                stream_es.reset();
                // XQueryParser.g:305:71: ^( VarDefaultValue ( $des)? )
                {
                XQDTCommonTree root_3 = (XQDTCommonTree)adaptor.nil();
                root_3 = (XQDTCommonTree)adaptor.becomeRoot((XQDTCommonTree)adaptor.create(VarDefaultValue, "VarDefaultValue"), root_3);

                // XQueryParser.g:305:89: ( $des)?
                if ( stream_des.hasNext() ) {
                    adaptor.addChild(root_3, stream_des.nextTree());

                }
                stream_des.reset();

                adaptor.addChild(root_2, root_3);
                }

                adaptor.addChild(root_1, root_2);
                }

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (XQDTCommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (XQDTCommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "pm_VarDecl"

    public static class pg_VarDeclType_return extends ParserRuleReturnScope {
        XQDTCommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "pg_VarDeclType"
    // XQueryParser.g:312:1: pg_VarDeclType : ({...}? =>kc= CONSTANT -> VarConstantDecl | kv= VARIABLE -> VarVariableDecl );
    public final XQueryParser.pg_VarDeclType_return pg_VarDeclType() throws RecognitionException {
        XQueryParser.pg_VarDeclType_return retval = new XQueryParser.pg_VarDeclType_return();
        retval.start = input.LT(1);

        XQDTCommonTree root_0 = null;

        CommonToken kc=null;
        CommonToken kv=null;

        XQDTCommonTree kc_tree=null;
        XQDTCommonTree kv_tree=null;
        RewriteRuleTokenStream stream_CONSTANT=new RewriteRuleTokenStream(adaptor,"token CONSTANT");
        RewriteRuleTokenStream stream_VARIABLE=new RewriteRuleTokenStream(adaptor,"token VARIABLE");

        try {
            // XQueryParser.g:313:9: ({...}? =>kc= CONSTANT -> VarConstantDecl | kv= VARIABLE -> VarVariableDecl )
            int alt28=2;
            int LA28_0 = input.LA(1);

            if ( (LA28_0==CONSTANT) && ((lc(XQS)))) {
                alt28=1;
            }
            else if ( (LA28_0==VARIABLE) ) {
                alt28=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 28, 0, input);

                throw nvae;
            }
            switch (alt28) {
                case 1 :
                    // XQueryParser.g:313:11: {...}? =>kc= CONSTANT
                    {
                    if ( !((lc(XQS))) ) {
                        if (state.backtracking>0) {state.failed=true; return retval;}
                        throw new FailedPredicateException(input, "pg_VarDeclType", "lc(XQS)");
                    }
                    kc=(CommonToken)match(input,CONSTANT,FOLLOW_CONSTANT_in_pg_VarDeclType2798); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_CONSTANT.add(kc);

                    if ( state.backtracking==0 ) {
                      ak(kc);
                    }


                    // AST REWRITE
                    // elements: 
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (XQDTCommonTree)adaptor.nil();
                    // 314:17: -> VarConstantDecl
                    {
                        adaptor.addChild(root_0, (XQDTCommonTree)adaptor.create(VarConstantDecl, "VarConstantDecl"));

                    }

                    retval.tree = root_0;}
                    }
                    break;
                case 2 :
                    // XQueryParser.g:315:11: kv= VARIABLE
                    {
                    kv=(CommonToken)match(input,VARIABLE,FOLLOW_VARIABLE_in_pg_VarDeclType2834); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_VARIABLE.add(kv);

                    if ( state.backtracking==0 ) {
                      ak(kv);
                    }


                    // AST REWRITE
                    // elements: 
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (XQDTCommonTree)adaptor.nil();
                    // 316:17: -> VarVariableDecl
                    {
                        adaptor.addChild(root_0, (XQDTCommonTree)adaptor.create(VarVariableDecl, "VarVariableDecl"));

                    }

                    retval.tree = root_0;}
                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (XQDTCommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (XQDTCommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "pg_VarDeclType"

    public static class pg_PrivateVarOption_return extends ParserRuleReturnScope {
        XQDTCommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "pg_PrivateVarOption"
    // XQueryParser.g:323:1: pg_PrivateVarOption : ({...}? =>kp= PRIVATE | );
    public final XQueryParser.pg_PrivateVarOption_return pg_PrivateVarOption() throws RecognitionException {
        XQueryParser.pg_PrivateVarOption_return retval = new XQueryParser.pg_PrivateVarOption_return();
        retval.start = input.LT(1);

        XQDTCommonTree root_0 = null;

        CommonToken kp=null;

        XQDTCommonTree kp_tree=null;

        try {
            // XQueryParser.g:324:9: ({...}? =>kp= PRIVATE | )
            int alt29=2;
            int LA29_0 = input.LA(1);

            if ( (LA29_0==PRIVATE) && ((lc(MLS)))) {
                alt29=1;
            }
            else if ( (LA29_0==CONSTANT) && ((lc(XQS)))) {
                alt29=2;
            }
            else if ( (LA29_0==VARIABLE) ) {
                alt29=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 29, 0, input);

                throw nvae;
            }
            switch (alt29) {
                case 1 :
                    // XQueryParser.g:324:11: {...}? =>kp= PRIVATE
                    {
                    root_0 = (XQDTCommonTree)adaptor.nil();

                    if ( !((lc(MLS))) ) {
                        if (state.backtracking>0) {state.failed=true; return retval;}
                        throw new FailedPredicateException(input, "pg_PrivateVarOption", "lc(MLS)");
                    }
                    kp=(CommonToken)match(input,PRIVATE,FOLLOW_PRIVATE_in_pg_PrivateVarOption2890); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    kp_tree = (XQDTCommonTree)adaptor.create(kp);
                    adaptor.addChild(root_0, kp_tree);
                    }
                    if ( state.backtracking==0 ) {
                      ak(kp);
                    }

                    }
                    break;
                case 2 :
                    // XQueryParser.g:326:9: 
                    {
                    root_0 = (XQDTCommonTree)adaptor.nil();

                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (XQDTCommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (XQDTCommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "pg_PrivateVarOption"

    public static class pm_ContextItemDecl_return extends ParserRuleReturnScope {
        XQDTCommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "pm_ContextItemDecl"
    // XQueryParser.g:336:1: pm_ContextItemDecl : k+= DECLARE k+= CONTEXT k+= ITEM (k+= AS p_ItemType )? ( ( BIND p_ExprSingle ) | (k+= EXTERNAL ( BIND p_ExprSingle )? ) ) SEMICOLON ;
    public final XQueryParser.pm_ContextItemDecl_return pm_ContextItemDecl() throws RecognitionException {
        XQueryParser.pm_ContextItemDecl_return retval = new XQueryParser.pm_ContextItemDecl_return();
        retval.start = input.LT(1);

        XQDTCommonTree root_0 = null;

        CommonToken BIND67=null;
        CommonToken BIND69=null;
        CommonToken SEMICOLON71=null;
        CommonToken k=null;
        List list_k=null;
        XQueryParser.p_ItemType_return p_ItemType66 = null;

        XQueryParser.p_ExprSingle_return p_ExprSingle68 = null;

        XQueryParser.p_ExprSingle_return p_ExprSingle70 = null;


        XQDTCommonTree BIND67_tree=null;
        XQDTCommonTree BIND69_tree=null;
        XQDTCommonTree SEMICOLON71_tree=null;
        XQDTCommonTree k_tree=null;

        try {
            // XQueryParser.g:337:9: (k+= DECLARE k+= CONTEXT k+= ITEM (k+= AS p_ItemType )? ( ( BIND p_ExprSingle ) | (k+= EXTERNAL ( BIND p_ExprSingle )? ) ) SEMICOLON )
            // XQueryParser.g:337:13: k+= DECLARE k+= CONTEXT k+= ITEM (k+= AS p_ItemType )? ( ( BIND p_ExprSingle ) | (k+= EXTERNAL ( BIND p_ExprSingle )? ) ) SEMICOLON
            {
            root_0 = (XQDTCommonTree)adaptor.nil();

            k=(CommonToken)match(input,DECLARE,FOLLOW_DECLARE_in_pm_ContextItemDecl2941); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            k_tree = (XQDTCommonTree)adaptor.create(k);
            adaptor.addChild(root_0, k_tree);
            }
            if (list_k==null) list_k=new ArrayList();
            list_k.add(k);

            k=(CommonToken)match(input,CONTEXT,FOLLOW_CONTEXT_in_pm_ContextItemDecl2945); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            k_tree = (XQDTCommonTree)adaptor.create(k);
            adaptor.addChild(root_0, k_tree);
            }
            if (list_k==null) list_k=new ArrayList();
            list_k.add(k);

            k=(CommonToken)match(input,ITEM,FOLLOW_ITEM_in_pm_ContextItemDecl2949); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            k_tree = (XQDTCommonTree)adaptor.create(k);
            adaptor.addChild(root_0, k_tree);
            }
            if (list_k==null) list_k=new ArrayList();
            list_k.add(k);

            // XQueryParser.g:337:43: (k+= AS p_ItemType )?
            int alt30=2;
            int LA30_0 = input.LA(1);

            if ( (LA30_0==AS) ) {
                alt30=1;
            }
            switch (alt30) {
                case 1 :
                    // XQueryParser.g:337:44: k+= AS p_ItemType
                    {
                    k=(CommonToken)match(input,AS,FOLLOW_AS_in_pm_ContextItemDecl2954); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    k_tree = (XQDTCommonTree)adaptor.create(k);
                    adaptor.addChild(root_0, k_tree);
                    }
                    if (list_k==null) list_k=new ArrayList();
                    list_k.add(k);

                    pushFollow(FOLLOW_p_ItemType_in_pm_ContextItemDecl2956);
                    p_ItemType66=p_ItemType();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, p_ItemType66.getTree());

                    }
                    break;

            }

            // XQueryParser.g:337:63: ( ( BIND p_ExprSingle ) | (k+= EXTERNAL ( BIND p_ExprSingle )? ) )
            int alt32=2;
            int LA32_0 = input.LA(1);

            if ( (LA32_0==BIND) ) {
                alt32=1;
            }
            else if ( (LA32_0==EXTERNAL) ) {
                alt32=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 32, 0, input);

                throw nvae;
            }
            switch (alt32) {
                case 1 :
                    // XQueryParser.g:337:64: ( BIND p_ExprSingle )
                    {
                    // XQueryParser.g:337:64: ( BIND p_ExprSingle )
                    // XQueryParser.g:337:65: BIND p_ExprSingle
                    {
                    BIND67=(CommonToken)match(input,BIND,FOLLOW_BIND_in_pm_ContextItemDecl2962); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    BIND67_tree = (XQDTCommonTree)adaptor.create(BIND67);
                    adaptor.addChild(root_0, BIND67_tree);
                    }
                    pushFollow(FOLLOW_p_ExprSingle_in_pm_ContextItemDecl2964);
                    p_ExprSingle68=p_ExprSingle();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, p_ExprSingle68.getTree());

                    }


                    }
                    break;
                case 2 :
                    // XQueryParser.g:337:86: (k+= EXTERNAL ( BIND p_ExprSingle )? )
                    {
                    // XQueryParser.g:337:86: (k+= EXTERNAL ( BIND p_ExprSingle )? )
                    // XQueryParser.g:337:87: k+= EXTERNAL ( BIND p_ExprSingle )?
                    {
                    k=(CommonToken)match(input,EXTERNAL,FOLLOW_EXTERNAL_in_pm_ContextItemDecl2972); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    k_tree = (XQDTCommonTree)adaptor.create(k);
                    adaptor.addChild(root_0, k_tree);
                    }
                    if (list_k==null) list_k=new ArrayList();
                    list_k.add(k);

                    // XQueryParser.g:337:99: ( BIND p_ExprSingle )?
                    int alt31=2;
                    int LA31_0 = input.LA(1);

                    if ( (LA31_0==BIND) ) {
                        alt31=1;
                    }
                    switch (alt31) {
                        case 1 :
                            // XQueryParser.g:337:100: BIND p_ExprSingle
                            {
                            BIND69=(CommonToken)match(input,BIND,FOLLOW_BIND_in_pm_ContextItemDecl2975); if (state.failed) return retval;
                            if ( state.backtracking==0 ) {
                            BIND69_tree = (XQDTCommonTree)adaptor.create(BIND69);
                            adaptor.addChild(root_0, BIND69_tree);
                            }
                            pushFollow(FOLLOW_p_ExprSingle_in_pm_ContextItemDecl2977);
                            p_ExprSingle70=p_ExprSingle();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) adaptor.addChild(root_0, p_ExprSingle70.getTree());

                            }
                            break;

                    }


                    }


                    }
                    break;

            }

            SEMICOLON71=(CommonToken)match(input,SEMICOLON,FOLLOW_SEMICOLON_in_pm_ContextItemDecl2983); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            SEMICOLON71_tree = (XQDTCommonTree)adaptor.create(SEMICOLON71);
            adaptor.addChild(root_0, SEMICOLON71_tree);
            }
            if ( state.backtracking==0 ) {
              ak(list_k);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (XQDTCommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (XQDTCommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "pm_ContextItemDecl"

    public static class pm_ConstructionDecl_return extends ParserRuleReturnScope {
        XQDTCommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "pm_ConstructionDecl"
    // XQueryParser.g:344:1: pm_ConstructionDecl : k+= DECLARE k+= CONSTRUCTION (k+= STRIP | k+= PRESERVE ) SEMICOLON ;
    public final XQueryParser.pm_ConstructionDecl_return pm_ConstructionDecl() throws RecognitionException {
        XQueryParser.pm_ConstructionDecl_return retval = new XQueryParser.pm_ConstructionDecl_return();
        retval.start = input.LT(1);

        XQDTCommonTree root_0 = null;

        CommonToken SEMICOLON72=null;
        CommonToken k=null;
        List list_k=null;

        XQDTCommonTree SEMICOLON72_tree=null;
        XQDTCommonTree k_tree=null;

        try {
            // XQueryParser.g:345:9: (k+= DECLARE k+= CONSTRUCTION (k+= STRIP | k+= PRESERVE ) SEMICOLON )
            // XQueryParser.g:345:13: k+= DECLARE k+= CONSTRUCTION (k+= STRIP | k+= PRESERVE ) SEMICOLON
            {
            root_0 = (XQDTCommonTree)adaptor.nil();

            k=(CommonToken)match(input,DECLARE,FOLLOW_DECLARE_in_pm_ConstructionDecl3018); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            k_tree = (XQDTCommonTree)adaptor.create(k);
            adaptor.addChild(root_0, k_tree);
            }
            if (list_k==null) list_k=new ArrayList();
            list_k.add(k);

            k=(CommonToken)match(input,CONSTRUCTION,FOLLOW_CONSTRUCTION_in_pm_ConstructionDecl3022); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            k_tree = (XQDTCommonTree)adaptor.create(k);
            adaptor.addChild(root_0, k_tree);
            }
            if (list_k==null) list_k=new ArrayList();
            list_k.add(k);

            // XQueryParser.g:345:40: (k+= STRIP | k+= PRESERVE )
            int alt33=2;
            int LA33_0 = input.LA(1);

            if ( (LA33_0==STRIP) ) {
                alt33=1;
            }
            else if ( (LA33_0==PRESERVE) ) {
                alt33=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 33, 0, input);

                throw nvae;
            }
            switch (alt33) {
                case 1 :
                    // XQueryParser.g:345:41: k+= STRIP
                    {
                    k=(CommonToken)match(input,STRIP,FOLLOW_STRIP_in_pm_ConstructionDecl3027); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    k_tree = (XQDTCommonTree)adaptor.create(k);
                    adaptor.addChild(root_0, k_tree);
                    }
                    if (list_k==null) list_k=new ArrayList();
                    list_k.add(k);


                    }
                    break;
                case 2 :
                    // XQueryParser.g:345:52: k+= PRESERVE
                    {
                    k=(CommonToken)match(input,PRESERVE,FOLLOW_PRESERVE_in_pm_ConstructionDecl3033); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    k_tree = (XQDTCommonTree)adaptor.create(k);
                    adaptor.addChild(root_0, k_tree);
                    }
                    if (list_k==null) list_k=new ArrayList();
                    list_k.add(k);


                    }
                    break;

            }

            SEMICOLON72=(CommonToken)match(input,SEMICOLON,FOLLOW_SEMICOLON_in_pm_ConstructionDecl3036); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            SEMICOLON72_tree = (XQDTCommonTree)adaptor.create(SEMICOLON72);
            adaptor.addChild(root_0, SEMICOLON72_tree);
            }
            if ( state.backtracking==0 ) {
              ak(list_k);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (XQDTCommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (XQDTCommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "pm_ConstructionDecl"

    public static class pm_FunctionDecl_return extends ParserRuleReturnScope {
        XQDTCommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "pm_FunctionDecl"
    // XQueryParser.g:351:1: pm_FunctionDecl : ({...}? =>k+= DECLARE k+= SEQUENTIAL k+= FUNCTION qn= p_QName LPAREN (pl= p_ParamList )? RPAREN (td= p_TypeDeclaration )? (b= p_Block | k+= EXTERNAL ) SEMICOLON -> ^( FunctionDecl $qn ^( ParamList ( $pl)? ) ^( ReturnType ( $td)? ) ( $b)? ) | k+= DECLARE p_FunctionOption p_FunctionType k+= FUNCTION qn= p_QName LPAREN (pl= p_ParamList )? RPAREN (td= p_TypeDeclaration )? (ee= p_EnclosedExpr | k+= EXTERNAL ) SEMICOLON -> ^( FunctionDecl $qn ^( ParamList ( $pl)? ) ^( ReturnType ( $td)? ) ( $ee)? ) );
    public final XQueryParser.pm_FunctionDecl_return pm_FunctionDecl() throws RecognitionException {
        XQueryParser.pm_FunctionDecl_return retval = new XQueryParser.pm_FunctionDecl_return();
        retval.start = input.LT(1);

        XQDTCommonTree root_0 = null;

        CommonToken LPAREN73=null;
        CommonToken RPAREN74=null;
        CommonToken SEMICOLON75=null;
        CommonToken LPAREN78=null;
        CommonToken RPAREN79=null;
        CommonToken SEMICOLON80=null;
        CommonToken k=null;
        List list_k=null;
        XQueryParser.p_QName_return qn = null;

        XQueryParser.p_ParamList_return pl = null;

        XQueryParser.p_TypeDeclaration_return td = null;

        XQueryParser.p_Block_return b = null;

        XQueryParser.p_EnclosedExpr_return ee = null;

        XQueryParser.p_FunctionOption_return p_FunctionOption76 = null;

        XQueryParser.p_FunctionType_return p_FunctionType77 = null;


        XQDTCommonTree LPAREN73_tree=null;
        XQDTCommonTree RPAREN74_tree=null;
        XQDTCommonTree SEMICOLON75_tree=null;
        XQDTCommonTree LPAREN78_tree=null;
        XQDTCommonTree RPAREN79_tree=null;
        XQDTCommonTree SEMICOLON80_tree=null;
        XQDTCommonTree k_tree=null;
        RewriteRuleTokenStream stream_RPAREN=new RewriteRuleTokenStream(adaptor,"token RPAREN");
        RewriteRuleTokenStream stream_LPAREN=new RewriteRuleTokenStream(adaptor,"token LPAREN");
        RewriteRuleTokenStream stream_SEQUENTIAL=new RewriteRuleTokenStream(adaptor,"token SEQUENTIAL");
        RewriteRuleTokenStream stream_FUNCTION=new RewriteRuleTokenStream(adaptor,"token FUNCTION");
        RewriteRuleTokenStream stream_EXTERNAL=new RewriteRuleTokenStream(adaptor,"token EXTERNAL");
        RewriteRuleTokenStream stream_SEMICOLON=new RewriteRuleTokenStream(adaptor,"token SEMICOLON");
        RewriteRuleTokenStream stream_DECLARE=new RewriteRuleTokenStream(adaptor,"token DECLARE");
        RewriteRuleSubtreeStream stream_p_ParamList=new RewriteRuleSubtreeStream(adaptor,"rule p_ParamList");
        RewriteRuleSubtreeStream stream_p_TypeDeclaration=new RewriteRuleSubtreeStream(adaptor,"rule p_TypeDeclaration");
        RewriteRuleSubtreeStream stream_p_Block=new RewriteRuleSubtreeStream(adaptor,"rule p_Block");
        RewriteRuleSubtreeStream stream_p_FunctionOption=new RewriteRuleSubtreeStream(adaptor,"rule p_FunctionOption");
        RewriteRuleSubtreeStream stream_p_FunctionType=new RewriteRuleSubtreeStream(adaptor,"rule p_FunctionType");
        RewriteRuleSubtreeStream stream_p_QName=new RewriteRuleSubtreeStream(adaptor,"rule p_QName");
        RewriteRuleSubtreeStream stream_p_EnclosedExpr=new RewriteRuleSubtreeStream(adaptor,"rule p_EnclosedExpr");
        try {
            // XQueryParser.g:352:9: ({...}? =>k+= DECLARE k+= SEQUENTIAL k+= FUNCTION qn= p_QName LPAREN (pl= p_ParamList )? RPAREN (td= p_TypeDeclaration )? (b= p_Block | k+= EXTERNAL ) SEMICOLON -> ^( FunctionDecl $qn ^( ParamList ( $pl)? ) ^( ReturnType ( $td)? ) ( $b)? ) | k+= DECLARE p_FunctionOption p_FunctionType k+= FUNCTION qn= p_QName LPAREN (pl= p_ParamList )? RPAREN (td= p_TypeDeclaration )? (ee= p_EnclosedExpr | k+= EXTERNAL ) SEMICOLON -> ^( FunctionDecl $qn ^( ParamList ( $pl)? ) ^( ReturnType ( $td)? ) ( $ee)? ) )
            int alt40=2;
            int LA40_0 = input.LA(1);

            if ( (LA40_0==DECLARE) ) {
                int LA40_1 = input.LA(2);

                if ( (LA40_1==SEQUENTIAL) && ((lc(XQS)))) {
                    alt40=1;
                }
                else if ( (LA40_1==FUNCTION||LA40_1==DETERMINISTIC||LA40_1==NONDETERMINISTIC||(LA40_1>=PRIVATE && LA40_1<=PUBLIC)||LA40_1==UPDATING||LA40_1==SIMPLE) ) {
                    alt40=2;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 40, 1, input);

                    throw nvae;
                }
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 40, 0, input);

                throw nvae;
            }
            switch (alt40) {
                case 1 :
                    // XQueryParser.g:352:13: {...}? =>k+= DECLARE k+= SEQUENTIAL k+= FUNCTION qn= p_QName LPAREN (pl= p_ParamList )? RPAREN (td= p_TypeDeclaration )? (b= p_Block | k+= EXTERNAL ) SEMICOLON
                    {
                    if ( !((lc(XQS))) ) {
                        if (state.backtracking>0) {state.failed=true; return retval;}
                        throw new FailedPredicateException(input, "pm_FunctionDecl", "lc(XQS)");
                    }
                    k=(CommonToken)match(input,DECLARE,FOLLOW_DECLARE_in_pm_FunctionDecl3073); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_DECLARE.add(k);

                    if (list_k==null) list_k=new ArrayList();
                    list_k.add(k);

                    k=(CommonToken)match(input,SEQUENTIAL,FOLLOW_SEQUENTIAL_in_pm_FunctionDecl3077); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_SEQUENTIAL.add(k);

                    if (list_k==null) list_k=new ArrayList();
                    list_k.add(k);

                    k=(CommonToken)match(input,FUNCTION,FOLLOW_FUNCTION_in_pm_FunctionDecl3081); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_FUNCTION.add(k);

                    if (list_k==null) list_k=new ArrayList();
                    list_k.add(k);

                    pushFollow(FOLLOW_p_QName_in_pm_FunctionDecl3085);
                    qn=p_QName();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_p_QName.add(qn.getTree());
                    LPAREN73=(CommonToken)match(input,LPAREN,FOLLOW_LPAREN_in_pm_FunctionDecl3087); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_LPAREN.add(LPAREN73);

                    // XQueryParser.g:352:83: (pl= p_ParamList )?
                    int alt34=2;
                    int LA34_0 = input.LA(1);

                    if ( (LA34_0==DOLLAR) ) {
                        alt34=1;
                    }
                    switch (alt34) {
                        case 1 :
                            // XQueryParser.g:352:83: pl= p_ParamList
                            {
                            pushFollow(FOLLOW_p_ParamList_in_pm_FunctionDecl3091);
                            pl=p_ParamList();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_p_ParamList.add(pl.getTree());

                            }
                            break;

                    }

                    RPAREN74=(CommonToken)match(input,RPAREN,FOLLOW_RPAREN_in_pm_FunctionDecl3094); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_RPAREN.add(RPAREN74);

                    // XQueryParser.g:352:106: (td= p_TypeDeclaration )?
                    int alt35=2;
                    int LA35_0 = input.LA(1);

                    if ( (LA35_0==AS) ) {
                        alt35=1;
                    }
                    switch (alt35) {
                        case 1 :
                            // XQueryParser.g:352:106: td= p_TypeDeclaration
                            {
                            pushFollow(FOLLOW_p_TypeDeclaration_in_pm_FunctionDecl3098);
                            td=p_TypeDeclaration();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_p_TypeDeclaration.add(td.getTree());

                            }
                            break;

                    }

                    // XQueryParser.g:352:126: (b= p_Block | k+= EXTERNAL )
                    int alt36=2;
                    int LA36_0 = input.LA(1);

                    if ( (LA36_0==LBRACKET) ) {
                        alt36=1;
                    }
                    else if ( (LA36_0==EXTERNAL) ) {
                        alt36=2;
                    }
                    else {
                        if (state.backtracking>0) {state.failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("", 36, 0, input);

                        throw nvae;
                    }
                    switch (alt36) {
                        case 1 :
                            // XQueryParser.g:352:127: b= p_Block
                            {
                            pushFollow(FOLLOW_p_Block_in_pm_FunctionDecl3104);
                            b=p_Block();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_p_Block.add(b.getTree());

                            }
                            break;
                        case 2 :
                            // XQueryParser.g:352:139: k+= EXTERNAL
                            {
                            k=(CommonToken)match(input,EXTERNAL,FOLLOW_EXTERNAL_in_pm_FunctionDecl3110); if (state.failed) return retval; 
                            if ( state.backtracking==0 ) stream_EXTERNAL.add(k);

                            if (list_k==null) list_k=new ArrayList();
                            list_k.add(k);


                            }
                            break;

                    }

                    SEMICOLON75=(CommonToken)match(input,SEMICOLON,FOLLOW_SEMICOLON_in_pm_FunctionDecl3113); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_SEMICOLON.add(SEMICOLON75);

                    if ( state.backtracking==0 ) {
                      ak(list_k);
                    }


                    // AST REWRITE
                    // elements: pl, qn, b, td
                    // token labels: 
                    // rule labels: td, pl, qn, retval, b
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_td=new RewriteRuleSubtreeStream(adaptor,"rule td",td!=null?td.tree:null);
                    RewriteRuleSubtreeStream stream_pl=new RewriteRuleSubtreeStream(adaptor,"rule pl",pl!=null?pl.tree:null);
                    RewriteRuleSubtreeStream stream_qn=new RewriteRuleSubtreeStream(adaptor,"rule qn",qn!=null?qn.tree:null);
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
                    RewriteRuleSubtreeStream stream_b=new RewriteRuleSubtreeStream(adaptor,"rule b",b!=null?b.tree:null);

                    root_0 = (XQDTCommonTree)adaptor.nil();
                    // 353:17: -> ^( FunctionDecl $qn ^( ParamList ( $pl)? ) ^( ReturnType ( $td)? ) ( $b)? )
                    {
                        // XQueryParser.g:353:20: ^( FunctionDecl $qn ^( ParamList ( $pl)? ) ^( ReturnType ( $td)? ) ( $b)? )
                        {
                        XQDTCommonTree root_1 = (XQDTCommonTree)adaptor.nil();
                        root_1 = (XQDTCommonTree)adaptor.becomeRoot((XQDTCommonTree)adaptor.create(FunctionDecl, "FunctionDecl"), root_1);

                        adaptor.addChild(root_1, stream_qn.nextTree());
                        // XQueryParser.g:353:39: ^( ParamList ( $pl)? )
                        {
                        XQDTCommonTree root_2 = (XQDTCommonTree)adaptor.nil();
                        root_2 = (XQDTCommonTree)adaptor.becomeRoot((XQDTCommonTree)adaptor.create(ParamList, "ParamList"), root_2);

                        // XQueryParser.g:353:51: ( $pl)?
                        if ( stream_pl.hasNext() ) {
                            adaptor.addChild(root_2, stream_pl.nextTree());

                        }
                        stream_pl.reset();

                        adaptor.addChild(root_1, root_2);
                        }
                        // XQueryParser.g:353:57: ^( ReturnType ( $td)? )
                        {
                        XQDTCommonTree root_2 = (XQDTCommonTree)adaptor.nil();
                        root_2 = (XQDTCommonTree)adaptor.becomeRoot((XQDTCommonTree)adaptor.create(ReturnType, "ReturnType"), root_2);

                        // XQueryParser.g:353:70: ( $td)?
                        if ( stream_td.hasNext() ) {
                            adaptor.addChild(root_2, stream_td.nextTree());

                        }
                        stream_td.reset();

                        adaptor.addChild(root_1, root_2);
                        }
                        // XQueryParser.g:353:76: ( $b)?
                        if ( stream_b.hasNext() ) {
                            adaptor.addChild(root_1, stream_b.nextTree());

                        }
                        stream_b.reset();

                        adaptor.addChild(root_0, root_1);
                        }

                    }

                    retval.tree = root_0;}
                    }
                    break;
                case 2 :
                    // XQueryParser.g:354:13: k+= DECLARE p_FunctionOption p_FunctionType k+= FUNCTION qn= p_QName LPAREN (pl= p_ParamList )? RPAREN (td= p_TypeDeclaration )? (ee= p_EnclosedExpr | k+= EXTERNAL ) SEMICOLON
                    {
                    k=(CommonToken)match(input,DECLARE,FOLLOW_DECLARE_in_pm_FunctionDecl3176); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_DECLARE.add(k);

                    if (list_k==null) list_k=new ArrayList();
                    list_k.add(k);

                    pushFollow(FOLLOW_p_FunctionOption_in_pm_FunctionDecl3178);
                    p_FunctionOption76=p_FunctionOption();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_p_FunctionOption.add(p_FunctionOption76.getTree());
                    pushFollow(FOLLOW_p_FunctionType_in_pm_FunctionDecl3180);
                    p_FunctionType77=p_FunctionType();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_p_FunctionType.add(p_FunctionType77.getTree());
                    k=(CommonToken)match(input,FUNCTION,FOLLOW_FUNCTION_in_pm_FunctionDecl3184); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_FUNCTION.add(k);

                    if (list_k==null) list_k=new ArrayList();
                    list_k.add(k);

                    pushFollow(FOLLOW_p_QName_in_pm_FunctionDecl3188);
                    qn=p_QName();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_p_QName.add(qn.getTree());
                    LPAREN78=(CommonToken)match(input,LPAREN,FOLLOW_LPAREN_in_pm_FunctionDecl3190); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_LPAREN.add(LPAREN78);

                    // XQueryParser.g:354:88: (pl= p_ParamList )?
                    int alt37=2;
                    int LA37_0 = input.LA(1);

                    if ( (LA37_0==DOLLAR) ) {
                        alt37=1;
                    }
                    switch (alt37) {
                        case 1 :
                            // XQueryParser.g:354:88: pl= p_ParamList
                            {
                            pushFollow(FOLLOW_p_ParamList_in_pm_FunctionDecl3194);
                            pl=p_ParamList();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_p_ParamList.add(pl.getTree());

                            }
                            break;

                    }

                    RPAREN79=(CommonToken)match(input,RPAREN,FOLLOW_RPAREN_in_pm_FunctionDecl3197); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_RPAREN.add(RPAREN79);

                    // XQueryParser.g:354:111: (td= p_TypeDeclaration )?
                    int alt38=2;
                    int LA38_0 = input.LA(1);

                    if ( (LA38_0==AS) ) {
                        alt38=1;
                    }
                    switch (alt38) {
                        case 1 :
                            // XQueryParser.g:354:111: td= p_TypeDeclaration
                            {
                            pushFollow(FOLLOW_p_TypeDeclaration_in_pm_FunctionDecl3201);
                            td=p_TypeDeclaration();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_p_TypeDeclaration.add(td.getTree());

                            }
                            break;

                    }

                    // XQueryParser.g:354:131: (ee= p_EnclosedExpr | k+= EXTERNAL )
                    int alt39=2;
                    int LA39_0 = input.LA(1);

                    if ( (LA39_0==LBRACKET) ) {
                        alt39=1;
                    }
                    else if ( (LA39_0==EXTERNAL) ) {
                        alt39=2;
                    }
                    else {
                        if (state.backtracking>0) {state.failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("", 39, 0, input);

                        throw nvae;
                    }
                    switch (alt39) {
                        case 1 :
                            // XQueryParser.g:354:132: ee= p_EnclosedExpr
                            {
                            pushFollow(FOLLOW_p_EnclosedExpr_in_pm_FunctionDecl3207);
                            ee=p_EnclosedExpr();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_p_EnclosedExpr.add(ee.getTree());

                            }
                            break;
                        case 2 :
                            // XQueryParser.g:354:152: k+= EXTERNAL
                            {
                            k=(CommonToken)match(input,EXTERNAL,FOLLOW_EXTERNAL_in_pm_FunctionDecl3213); if (state.failed) return retval; 
                            if ( state.backtracking==0 ) stream_EXTERNAL.add(k);

                            if (list_k==null) list_k=new ArrayList();
                            list_k.add(k);


                            }
                            break;

                    }

                    SEMICOLON80=(CommonToken)match(input,SEMICOLON,FOLLOW_SEMICOLON_in_pm_FunctionDecl3216); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_SEMICOLON.add(SEMICOLON80);

                    if ( state.backtracking==0 ) {
                      ak(list_k);
                    }


                    // AST REWRITE
                    // elements: qn, td, pl, ee
                    // token labels: 
                    // rule labels: pl, td, ee, qn, retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_pl=new RewriteRuleSubtreeStream(adaptor,"rule pl",pl!=null?pl.tree:null);
                    RewriteRuleSubtreeStream stream_td=new RewriteRuleSubtreeStream(adaptor,"rule td",td!=null?td.tree:null);
                    RewriteRuleSubtreeStream stream_ee=new RewriteRuleSubtreeStream(adaptor,"rule ee",ee!=null?ee.tree:null);
                    RewriteRuleSubtreeStream stream_qn=new RewriteRuleSubtreeStream(adaptor,"rule qn",qn!=null?qn.tree:null);
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (XQDTCommonTree)adaptor.nil();
                    // 355:17: -> ^( FunctionDecl $qn ^( ParamList ( $pl)? ) ^( ReturnType ( $td)? ) ( $ee)? )
                    {
                        // XQueryParser.g:355:20: ^( FunctionDecl $qn ^( ParamList ( $pl)? ) ^( ReturnType ( $td)? ) ( $ee)? )
                        {
                        XQDTCommonTree root_1 = (XQDTCommonTree)adaptor.nil();
                        root_1 = (XQDTCommonTree)adaptor.becomeRoot((XQDTCommonTree)adaptor.create(FunctionDecl, "FunctionDecl"), root_1);

                        adaptor.addChild(root_1, stream_qn.nextTree());
                        // XQueryParser.g:355:39: ^( ParamList ( $pl)? )
                        {
                        XQDTCommonTree root_2 = (XQDTCommonTree)adaptor.nil();
                        root_2 = (XQDTCommonTree)adaptor.becomeRoot((XQDTCommonTree)adaptor.create(ParamList, "ParamList"), root_2);

                        // XQueryParser.g:355:51: ( $pl)?
                        if ( stream_pl.hasNext() ) {
                            adaptor.addChild(root_2, stream_pl.nextTree());

                        }
                        stream_pl.reset();

                        adaptor.addChild(root_1, root_2);
                        }
                        // XQueryParser.g:355:57: ^( ReturnType ( $td)? )
                        {
                        XQDTCommonTree root_2 = (XQDTCommonTree)adaptor.nil();
                        root_2 = (XQDTCommonTree)adaptor.becomeRoot((XQDTCommonTree)adaptor.create(ReturnType, "ReturnType"), root_2);

                        // XQueryParser.g:355:70: ( $td)?
                        if ( stream_td.hasNext() ) {
                            adaptor.addChild(root_2, stream_td.nextTree());

                        }
                        stream_td.reset();

                        adaptor.addChild(root_1, root_2);
                        }
                        // XQueryParser.g:355:76: ( $ee)?
                        if ( stream_ee.hasNext() ) {
                            adaptor.addChild(root_1, stream_ee.nextTree());

                        }
                        stream_ee.reset();

                        adaptor.addChild(root_0, root_1);
                        }

                    }

                    retval.tree = root_0;}
                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (XQDTCommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (XQDTCommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "pm_FunctionDecl"

    public static class p_FunctionType_return extends ParserRuleReturnScope {
        XQDTCommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "p_FunctionType"
    // XQueryParser.g:362:1: p_FunctionType : ({...}? =>ku= UPDATING | {...}? =>ks= SIMPLE | );
    public final XQueryParser.p_FunctionType_return p_FunctionType() throws RecognitionException {
        XQueryParser.p_FunctionType_return retval = new XQueryParser.p_FunctionType_return();
        retval.start = input.LT(1);

        XQDTCommonTree root_0 = null;

        CommonToken ku=null;
        CommonToken ks=null;

        XQDTCommonTree ku_tree=null;
        XQDTCommonTree ks_tree=null;

        try {
            // XQueryParser.g:363:9: ({...}? =>ku= UPDATING | {...}? =>ks= SIMPLE | )
            int alt41=3;
            int LA41_0 = input.LA(1);

            if ( (LA41_0==UPDATING) && ((lc(XQU)))) {
                alt41=1;
            }
            else if ( (LA41_0==SIMPLE) && ((lc(XQS)))) {
                alt41=2;
            }
            else if ( (LA41_0==FUNCTION) ) {
                alt41=3;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 41, 0, input);

                throw nvae;
            }
            switch (alt41) {
                case 1 :
                    // XQueryParser.g:363:11: {...}? =>ku= UPDATING
                    {
                    root_0 = (XQDTCommonTree)adaptor.nil();

                    if ( !((lc(XQU))) ) {
                        if (state.backtracking>0) {state.failed=true; return retval;}
                        throw new FailedPredicateException(input, "p_FunctionType", "lc(XQU)");
                    }
                    ku=(CommonToken)match(input,UPDATING,FOLLOW_UPDATING_in_p_FunctionType3297); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    ku_tree = (XQDTCommonTree)adaptor.create(ku);
                    adaptor.addChild(root_0, ku_tree);
                    }
                    if ( state.backtracking==0 ) {
                      ak(ku);
                    }

                    }
                    break;
                case 2 :
                    // XQueryParser.g:364:11: {...}? =>ks= SIMPLE
                    {
                    root_0 = (XQDTCommonTree)adaptor.nil();

                    if ( !((lc(XQS))) ) {
                        if (state.backtracking>0) {state.failed=true; return retval;}
                        throw new FailedPredicateException(input, "p_FunctionType", "lc(XQS)");
                    }
                    ks=(CommonToken)match(input,SIMPLE,FOLLOW_SIMPLE_in_p_FunctionType3316); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    ks_tree = (XQDTCommonTree)adaptor.create(ks);
                    adaptor.addChild(root_0, ks_tree);
                    }
                    if ( state.backtracking==0 ) {
                      ak(ks);
                    }

                    }
                    break;
                case 3 :
                    // XQueryParser.g:366:9: 
                    {
                    root_0 = (XQDTCommonTree)adaptor.nil();

                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (XQDTCommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (XQDTCommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "p_FunctionType"

    public static class p_FunctionOption_return extends ParserRuleReturnScope {
        XQDTCommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "p_FunctionOption"
    // XQueryParser.g:369:1: p_FunctionOption : ( p_PrivateOption | p_DeterministicOption )* ;
    public final XQueryParser.p_FunctionOption_return p_FunctionOption() throws RecognitionException {
        XQueryParser.p_FunctionOption_return retval = new XQueryParser.p_FunctionOption_return();
        retval.start = input.LT(1);

        XQDTCommonTree root_0 = null;

        XQueryParser.p_PrivateOption_return p_PrivateOption81 = null;

        XQueryParser.p_DeterministicOption_return p_DeterministicOption82 = null;



        try {
            // XQueryParser.g:370:9: ( ( p_PrivateOption | p_DeterministicOption )* )
            // XQueryParser.g:370:11: ( p_PrivateOption | p_DeterministicOption )*
            {
            root_0 = (XQDTCommonTree)adaptor.nil();

            // XQueryParser.g:370:11: ( p_PrivateOption | p_DeterministicOption )*
            loop42:
            do {
                int alt42=3;
                int LA42_0 = input.LA(1);

                if ( ((LA42_0>=PRIVATE && LA42_0<=PUBLIC)) ) {
                    alt42=1;
                }
                else if ( (LA42_0==DETERMINISTIC||LA42_0==NONDETERMINISTIC) ) {
                    alt42=2;
                }


                switch (alt42) {
            	case 1 :
            	    // XQueryParser.g:370:12: p_PrivateOption
            	    {
            	    pushFollow(FOLLOW_p_PrivateOption_in_p_FunctionOption3357);
            	    p_PrivateOption81=p_PrivateOption();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, p_PrivateOption81.getTree());

            	    }
            	    break;
            	case 2 :
            	    // XQueryParser.g:370:30: p_DeterministicOption
            	    {
            	    pushFollow(FOLLOW_p_DeterministicOption_in_p_FunctionOption3361);
            	    p_DeterministicOption82=p_DeterministicOption();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, p_DeterministicOption82.getTree());

            	    }
            	    break;

            	default :
            	    break loop42;
                }
            } while (true);


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (XQDTCommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (XQDTCommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "p_FunctionOption"

    public static class p_PrivateOption_return extends ParserRuleReturnScope {
        XQDTCommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "p_PrivateOption"
    // XQueryParser.g:373:1: p_PrivateOption : (k= PRIVATE | k= PUBLIC ) ;
    public final XQueryParser.p_PrivateOption_return p_PrivateOption() throws RecognitionException {
        XQueryParser.p_PrivateOption_return retval = new XQueryParser.p_PrivateOption_return();
        retval.start = input.LT(1);

        XQDTCommonTree root_0 = null;

        CommonToken k=null;

        XQDTCommonTree k_tree=null;

        try {
            // XQueryParser.g:374:9: ( (k= PRIVATE | k= PUBLIC ) )
            // XQueryParser.g:374:11: (k= PRIVATE | k= PUBLIC )
            {
            root_0 = (XQDTCommonTree)adaptor.nil();

            // XQueryParser.g:374:11: (k= PRIVATE | k= PUBLIC )
            int alt43=2;
            int LA43_0 = input.LA(1);

            if ( (LA43_0==PRIVATE) ) {
                alt43=1;
            }
            else if ( (LA43_0==PUBLIC) ) {
                alt43=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 43, 0, input);

                throw nvae;
            }
            switch (alt43) {
                case 1 :
                    // XQueryParser.g:374:12: k= PRIVATE
                    {
                    k=(CommonToken)match(input,PRIVATE,FOLLOW_PRIVATE_in_p_PrivateOption3391); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    k_tree = (XQDTCommonTree)adaptor.create(k);
                    adaptor.addChild(root_0, k_tree);
                    }

                    }
                    break;
                case 2 :
                    // XQueryParser.g:374:24: k= PUBLIC
                    {
                    k=(CommonToken)match(input,PUBLIC,FOLLOW_PUBLIC_in_p_PrivateOption3397); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    k_tree = (XQDTCommonTree)adaptor.create(k);
                    adaptor.addChild(root_0, k_tree);
                    }

                    }
                    break;

            }

            if ( state.backtracking==0 ) {
              ak(k);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (XQDTCommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (XQDTCommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "p_PrivateOption"

    public static class p_DeterministicOption_return extends ParserRuleReturnScope {
        XQDTCommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "p_DeterministicOption"
    // XQueryParser.g:377:1: p_DeterministicOption : (k= DETERMINISTIC | k= NONDETERMINISTIC ) ;
    public final XQueryParser.p_DeterministicOption_return p_DeterministicOption() throws RecognitionException {
        XQueryParser.p_DeterministicOption_return retval = new XQueryParser.p_DeterministicOption_return();
        retval.start = input.LT(1);

        XQDTCommonTree root_0 = null;

        CommonToken k=null;

        XQDTCommonTree k_tree=null;

        try {
            // XQueryParser.g:378:9: ( (k= DETERMINISTIC | k= NONDETERMINISTIC ) )
            // XQueryParser.g:378:11: (k= DETERMINISTIC | k= NONDETERMINISTIC )
            {
            root_0 = (XQDTCommonTree)adaptor.nil();

            // XQueryParser.g:378:11: (k= DETERMINISTIC | k= NONDETERMINISTIC )
            int alt44=2;
            int LA44_0 = input.LA(1);

            if ( (LA44_0==DETERMINISTIC) ) {
                alt44=1;
            }
            else if ( (LA44_0==NONDETERMINISTIC) ) {
                alt44=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 44, 0, input);

                throw nvae;
            }
            switch (alt44) {
                case 1 :
                    // XQueryParser.g:378:12: k= DETERMINISTIC
                    {
                    k=(CommonToken)match(input,DETERMINISTIC,FOLLOW_DETERMINISTIC_in_p_DeterministicOption3428); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    k_tree = (XQDTCommonTree)adaptor.create(k);
                    adaptor.addChild(root_0, k_tree);
                    }

                    }
                    break;
                case 2 :
                    // XQueryParser.g:378:30: k= NONDETERMINISTIC
                    {
                    k=(CommonToken)match(input,NONDETERMINISTIC,FOLLOW_NONDETERMINISTIC_in_p_DeterministicOption3434); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    k_tree = (XQDTCommonTree)adaptor.create(k);
                    adaptor.addChild(root_0, k_tree);
                    }

                    }
                    break;

            }

            if ( state.backtracking==0 ) {
              ak(k);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (XQDTCommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (XQDTCommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "p_DeterministicOption"

    public static class p_ParamList_return extends ParserRuleReturnScope {
        XQDTCommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "p_ParamList"
    // XQueryParser.g:385:1: p_ParamList : p+= p_Param ( COMMA p+= p_Param )* -> ( $p)+ ;
    public final XQueryParser.p_ParamList_return p_ParamList() throws RecognitionException {
        XQueryParser.p_ParamList_return retval = new XQueryParser.p_ParamList_return();
        retval.start = input.LT(1);

        XQDTCommonTree root_0 = null;

        CommonToken COMMA83=null;
        List list_p=null;
        RuleReturnScope p = null;
        XQDTCommonTree COMMA83_tree=null;
        RewriteRuleTokenStream stream_COMMA=new RewriteRuleTokenStream(adaptor,"token COMMA");
        RewriteRuleSubtreeStream stream_p_Param=new RewriteRuleSubtreeStream(adaptor,"rule p_Param");
        try {
            // XQueryParser.g:386:9: (p+= p_Param ( COMMA p+= p_Param )* -> ( $p)+ )
            // XQueryParser.g:386:11: p+= p_Param ( COMMA p+= p_Param )*
            {
            pushFollow(FOLLOW_p_Param_in_p_ParamList3468);
            p=p_Param();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_p_Param.add(p.getTree());
            if (list_p==null) list_p=new ArrayList();
            list_p.add(p.getTree());

            // XQueryParser.g:386:22: ( COMMA p+= p_Param )*
            loop45:
            do {
                int alt45=2;
                int LA45_0 = input.LA(1);

                if ( (LA45_0==COMMA) ) {
                    alt45=1;
                }


                switch (alt45) {
            	case 1 :
            	    // XQueryParser.g:386:23: COMMA p+= p_Param
            	    {
            	    COMMA83=(CommonToken)match(input,COMMA,FOLLOW_COMMA_in_p_ParamList3471); if (state.failed) return retval; 
            	    if ( state.backtracking==0 ) stream_COMMA.add(COMMA83);

            	    pushFollow(FOLLOW_p_Param_in_p_ParamList3475);
            	    p=p_Param();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) stream_p_Param.add(p.getTree());
            	    if (list_p==null) list_p=new ArrayList();
            	    list_p.add(p.getTree());


            	    }
            	    break;

            	default :
            	    break loop45;
                }
            } while (true);



            // AST REWRITE
            // elements: p
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: p
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
            RewriteRuleSubtreeStream stream_p=new RewriteRuleSubtreeStream(adaptor,"token p",list_p);
            root_0 = (XQDTCommonTree)adaptor.nil();
            // 387:17: -> ( $p)+
            {
                if ( !(stream_p.hasNext()) ) {
                    throw new RewriteEarlyExitException();
                }
                while ( stream_p.hasNext() ) {
                    adaptor.addChild(root_0, stream_p.nextTree());

                }
                stream_p.reset();

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (XQDTCommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (XQDTCommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "p_ParamList"

    public static class p_Param_return extends ParserRuleReturnScope {
        XQDTCommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "p_Param"
    // XQueryParser.g:391:1: p_Param : DOLLAR qn= p_QName (td= p_TypeDeclaration )? -> ^( Param $qn ( $td)? ) ;
    public final XQueryParser.p_Param_return p_Param() throws RecognitionException {
        XQueryParser.p_Param_return retval = new XQueryParser.p_Param_return();
        retval.start = input.LT(1);

        XQDTCommonTree root_0 = null;

        CommonToken DOLLAR84=null;
        XQueryParser.p_QName_return qn = null;

        XQueryParser.p_TypeDeclaration_return td = null;


        XQDTCommonTree DOLLAR84_tree=null;
        RewriteRuleTokenStream stream_DOLLAR=new RewriteRuleTokenStream(adaptor,"token DOLLAR");
        RewriteRuleSubtreeStream stream_p_TypeDeclaration=new RewriteRuleSubtreeStream(adaptor,"rule p_TypeDeclaration");
        RewriteRuleSubtreeStream stream_p_QName=new RewriteRuleSubtreeStream(adaptor,"rule p_QName");
        try {
            // XQueryParser.g:392:9: ( DOLLAR qn= p_QName (td= p_TypeDeclaration )? -> ^( Param $qn ( $td)? ) )
            // XQueryParser.g:392:11: DOLLAR qn= p_QName (td= p_TypeDeclaration )?
            {
            DOLLAR84=(CommonToken)match(input,DOLLAR,FOLLOW_DOLLAR_in_p_Param3533); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_DOLLAR.add(DOLLAR84);

            pushFollow(FOLLOW_p_QName_in_p_Param3537);
            qn=p_QName();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_p_QName.add(qn.getTree());
            // XQueryParser.g:392:31: (td= p_TypeDeclaration )?
            int alt46=2;
            int LA46_0 = input.LA(1);

            if ( (LA46_0==AS) ) {
                alt46=1;
            }
            switch (alt46) {
                case 1 :
                    // XQueryParser.g:392:31: td= p_TypeDeclaration
                    {
                    pushFollow(FOLLOW_p_TypeDeclaration_in_p_Param3541);
                    td=p_TypeDeclaration();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_p_TypeDeclaration.add(td.getTree());

                    }
                    break;

            }



            // AST REWRITE
            // elements: qn, td
            // token labels: 
            // rule labels: td, qn, retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_td=new RewriteRuleSubtreeStream(adaptor,"rule td",td!=null?td.tree:null);
            RewriteRuleSubtreeStream stream_qn=new RewriteRuleSubtreeStream(adaptor,"rule qn",qn!=null?qn.tree:null);
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (XQDTCommonTree)adaptor.nil();
            // 393:17: -> ^( Param $qn ( $td)? )
            {
                // XQueryParser.g:393:20: ^( Param $qn ( $td)? )
                {
                XQDTCommonTree root_1 = (XQDTCommonTree)adaptor.nil();
                root_1 = (XQDTCommonTree)adaptor.becomeRoot((XQDTCommonTree)adaptor.create(Param, "Param"), root_1);

                adaptor.addChild(root_1, stream_qn.nextTree());
                // XQueryParser.g:393:32: ( $td)?
                if ( stream_td.hasNext() ) {
                    adaptor.addChild(root_1, stream_td.nextTree());

                }
                stream_td.reset();

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (XQDTCommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (XQDTCommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "p_Param"

    public static class p_EnclosedExpr_return extends ParserRuleReturnScope {
        XQDTCommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "p_EnclosedExpr"
    // XQueryParser.g:397:1: p_EnclosedExpr : LBRACKET pm_Expr RBRACKET -> ^( EnclosedExpr pm_Expr ) ;
    public final XQueryParser.p_EnclosedExpr_return p_EnclosedExpr() throws RecognitionException {
        XQueryParser.p_EnclosedExpr_return retval = new XQueryParser.p_EnclosedExpr_return();
        retval.start = input.LT(1);

        XQDTCommonTree root_0 = null;

        CommonToken LBRACKET85=null;
        CommonToken RBRACKET87=null;
        XQueryParser.pm_Expr_return pm_Expr86 = null;


        XQDTCommonTree LBRACKET85_tree=null;
        XQDTCommonTree RBRACKET87_tree=null;
        RewriteRuleTokenStream stream_LBRACKET=new RewriteRuleTokenStream(adaptor,"token LBRACKET");
        RewriteRuleTokenStream stream_RBRACKET=new RewriteRuleTokenStream(adaptor,"token RBRACKET");
        RewriteRuleSubtreeStream stream_pm_Expr=new RewriteRuleSubtreeStream(adaptor,"rule pm_Expr");
        try {
            // XQueryParser.g:398:9: ( LBRACKET pm_Expr RBRACKET -> ^( EnclosedExpr pm_Expr ) )
            // XQueryParser.g:398:11: LBRACKET pm_Expr RBRACKET
            {
            LBRACKET85=(CommonToken)match(input,LBRACKET,FOLLOW_LBRACKET_in_p_EnclosedExpr3597); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_LBRACKET.add(LBRACKET85);

            pushFollow(FOLLOW_pm_Expr_in_p_EnclosedExpr3599);
            pm_Expr86=pm_Expr();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_pm_Expr.add(pm_Expr86.getTree());
            RBRACKET87=(CommonToken)match(input,RBRACKET,FOLLOW_RBRACKET_in_p_EnclosedExpr3601); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_RBRACKET.add(RBRACKET87);



            // AST REWRITE
            // elements: pm_Expr
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (XQDTCommonTree)adaptor.nil();
            // 399:17: -> ^( EnclosedExpr pm_Expr )
            {
                // XQueryParser.g:399:20: ^( EnclosedExpr pm_Expr )
                {
                XQDTCommonTree root_1 = (XQDTCommonTree)adaptor.nil();
                root_1 = (XQDTCommonTree)adaptor.becomeRoot((XQDTCommonTree)adaptor.create(EnclosedExpr, "EnclosedExpr"), root_1);

                adaptor.addChild(root_1, stream_pm_Expr.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (XQDTCommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (XQDTCommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "p_EnclosedExpr"

    public static class p_QueryBody_return extends ParserRuleReturnScope {
        XQDTCommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "p_QueryBody"
    // XQueryParser.g:403:1: p_QueryBody : pm_Expr -> ^( QueryBody pm_Expr ) ;
    public final XQueryParser.p_QueryBody_return p_QueryBody() throws RecognitionException {
        XQueryParser.p_QueryBody_return retval = new XQueryParser.p_QueryBody_return();
        retval.start = input.LT(1);

        XQDTCommonTree root_0 = null;

        XQueryParser.pm_Expr_return pm_Expr88 = null;


        RewriteRuleSubtreeStream stream_pm_Expr=new RewriteRuleSubtreeStream(adaptor,"rule pm_Expr");
        try {
            // XQueryParser.g:404:9: ( pm_Expr -> ^( QueryBody pm_Expr ) )
            // XQueryParser.g:404:11: pm_Expr
            {
            pushFollow(FOLLOW_pm_Expr_in_p_QueryBody3651);
            pm_Expr88=pm_Expr();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_pm_Expr.add(pm_Expr88.getTree());


            // AST REWRITE
            // elements: pm_Expr
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (XQDTCommonTree)adaptor.nil();
            // 405:17: -> ^( QueryBody pm_Expr )
            {
                // XQueryParser.g:405:20: ^( QueryBody pm_Expr )
                {
                XQDTCommonTree root_1 = (XQDTCommonTree)adaptor.nil();
                root_1 = (XQDTCommonTree)adaptor.becomeRoot((XQDTCommonTree)adaptor.create(QueryBody, "QueryBody"), root_1);

                adaptor.addChild(root_1, stream_pm_Expr.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (XQDTCommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (XQDTCommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "p_QueryBody"

    public static class pm_Expr_return extends ParserRuleReturnScope {
        XQDTCommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "pm_Expr"
    // XQueryParser.g:410:1: pm_Expr : p_ConcatExpr ({...}? => ( SEMICOLON ( pm_ApplyExpr )* )? | ) ({...}? => ( SEMICOLON p_ConcatExpr )+ | ) ;
    public final XQueryParser.pm_Expr_return pm_Expr() throws RecognitionException {
        XQueryParser.pm_Expr_return retval = new XQueryParser.pm_Expr_return();
        retval.start = input.LT(1);

        XQDTCommonTree root_0 = null;

        CommonToken SEMICOLON90=null;
        CommonToken SEMICOLON92=null;
        XQueryParser.p_ConcatExpr_return p_ConcatExpr89 = null;

        XQueryParser.pm_ApplyExpr_return pm_ApplyExpr91 = null;

        XQueryParser.p_ConcatExpr_return p_ConcatExpr93 = null;


        XQDTCommonTree SEMICOLON90_tree=null;
        XQDTCommonTree SEMICOLON92_tree=null;

        try {
            // XQueryParser.g:411:9: ( p_ConcatExpr ({...}? => ( SEMICOLON ( pm_ApplyExpr )* )? | ) ({...}? => ( SEMICOLON p_ConcatExpr )+ | ) )
            // XQueryParser.g:411:11: p_ConcatExpr ({...}? => ( SEMICOLON ( pm_ApplyExpr )* )? | ) ({...}? => ( SEMICOLON p_ConcatExpr )+ | )
            {
            root_0 = (XQDTCommonTree)adaptor.nil();

            pushFollow(FOLLOW_p_ConcatExpr_in_pm_Expr3702);
            p_ConcatExpr89=p_ConcatExpr();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, p_ConcatExpr89.getTree());
            // XQueryParser.g:412:11: ({...}? => ( SEMICOLON ( pm_ApplyExpr )* )? | )
            int alt49=2;
            int LA49_0 = input.LA(1);

            if ( (LA49_0==SEMICOLON) && ((((lc(XQS))&&(lc(MLS)))||((lc(XQS))&&(lc(MLS)))||((lc(XQS))&&(lc(MLS)))||((lc(XQS))&&(lc(MLS)))||((lc(XQS))&&(lc(MLS)))||((lc(XQS))&&(lc(MLS)))||((lc(XQS))&&(lc(MLS)))||((lc(XQS))&&(lc(MLS)))||((lc(XQS))&&(lc(MLS)))||((lc(XQS))&&(lc(MLS)))||((lc(XQS))&&(lc(MLS)))||((lc(XQS))&&(lc(MLS)))||((lc(XQS))&&(lc(MLS)))||((lc(XQS))&&(lc(MLS)))||((lc(XQS))&&(lc(MLS)))||((lc(XQS))&&(lc(MLS)))||((lc(XQS))&&(lc(MLS)))||((lc(XQS))&&(lc(MLS)))||((lc(XQS))&&(lc(MLS)))||((lc(XQS))&&(lc(MLS)))||((lc(XQS))&&(lc(MLS)))||((lc(XQS))&&(lc(MLS)))||((lc(XQS))&&(lc(MLS)))||((lc(XQS))&&(lc(MLS)))||((lc(XQS))&&(lc(MLS)))||((lc(XQS))&&(lc(MLS)))||((lc(XQS))&&(lc(MLS)))||((lc(XQS))&&(lc(MLS)))||((lc(XQS))&&(lc(MLS)))||((lc(XQS))&&(lc(MLS)))||((lc(XQS))&&(lc(MLS)))||((lc(XQS))&&(lc(MLS)))||((lc(XQS))&&(lc(MLS)))||((lc(XQS))&&(lc(MLS)))||((lc(XQS))&&(lc(MLS)))||((lc(XQS))&&(lc(MLS)))||((lc(XQS))&&(lc(MLS)))||((lc(XQS))&&(lc(MLS)))||((lc(XQS))&&(lc(MLS)))||((lc(XQS))&&(lc(MLS)))||((lc(XQS))&&(lc(MLS)))||((lc(XQS))&&(lc(MLS)))||((lc(XQS))&&(lc(MLS)))||((lc(XQS))&&(lc(MLS)))||((lc(XQS))&&(lc(MLS)))||((lc(XQS))&&(lc(MLS)))||((lc(XQS))&&(lc(MLS)))||((lc(XQS))&&(lc(MLS)))||((lc(XQS))&&(lc(MLS)))||((lc(XQS))&&(lc(MLS)))||((lc(XQS))&&(lc(MLS)))||((lc(XQS))&&(lc(MLS)))||((lc(XQS))&&(lc(MLS)))||((lc(XQS))&&(lc(MLS)))||((lc(XQS))&&(lc(MLS)))||((lc(XQS))&&(lc(MLS)))||((lc(XQS))&&(lc(MLS)))||((lc(XQS))&&(lc(MLS)))||((lc(XQS))&&(lc(MLS)))||((lc(XQS))&&(lc(MLS)))||((lc(XQS))&&(lc(MLS)))||((lc(XQS))&&(lc(MLS)))||((lc(XQS))&&(lc(MLS)))||((lc(XQS))&&(lc(MLS)))||((lc(XQS))&&(lc(MLS)))||((lc(XQS))&&(lc(MLS)))||((lc(XQS))&&(lc(MLS)))||((lc(XQS))&&(lc(MLS)))||((lc(XQS))&&(lc(MLS)))||((lc(XQS))&&(lc(MLS)))||((lc(XQS))&&(lc(MLS)))||((lc(XQS))&&(lc(MLS)))||((lc(XQS))&&(lc(MLS)))||((lc(XQS))&&(lc(MLS)))||((lc(XQS))&&(lc(MLS)))||((lc(XQS))&&(lc(MLS)))||((lc(XQS))&&(lc(MLS)))||((lc(XQS))&&(lc(MLS)))||((lc(XQS))&&(lc(MLS)))||((lc(XQS))&&(lc(MLS)))||((lc(XQS))&&(lc(MLS)))||((lc(XQS))&&(lc(MLS)))||((lc(XQS))&&(lc(MLS)))||((lc(XQS))&&(lc(MLS)))||((lc(XQS))&&(lc(MLS)))||((lc(XQS))&&(lc(MLS)))||((lc(XQS))&&(lc(MLS)))||((lc(XQS))&&(lc(MLS)))||((lc(XQS))&&(lc(MLS)))||((lc(XQS))&&(lc(MLS)))||((lc(XQS))&&(lc(MLS)))||((lc(XQS))&&(lc(MLS)))||((lc(XQS))&&(lc(MLS)))||((lc(XQS))&&(lc(MLS)))||((lc(XQS))&&(lc(MLS)))||((lc(XQS))&&(lc(MLS)))||((lc(XQS))&&(lc(MLS)))||((lc(XQS))&&(lc(MLS)))||((lc(XQS))&&(lc(MLS)))||((lc(XQS))&&(lc(MLS)))||((lc(XQS))&&(lc(MLS)))||((lc(XQS))&&(lc(MLS)))||((lc(XQS))&&(lc(MLS)))||((lc(XQS))&&(lc(MLS)))||((lc(XQS))&&(lc(MLS)))||((lc(XQS))&&(lc(MLS)))||((lc(XQS))&&(lc(MLS)))||((lc(XQS))&&(lc(MLS)))||((lc(XQS))&&(lc(MLS)))||((lc(XQS))&&(lc(MLS)))||((lc(XQS))&&(lc(MLS)))||((lc(XQS))&&(lc(MLS)))||((lc(XQS))&&(lc(MLS)))||((lc(XQS))&&(lc(MLS)))||((lc(XQS))&&(lc(MLS)))||((lc(XQS))&&(lc(MLS)))||((lc(XQS))&&(lc(MLS)))||((lc(XQS))&&(lc(MLS)))||((lc(XQS))&&(lc(MLS)))||((lc(XQS))&&(lc(MLS)))||((lc(XQS))&&(lc(MLS)))||((lc(XQS))&&(lc(MLS)))||((lc(XQS))&&(lc(MLS)))||((lc(XQS))&&(lc(MLS)))||((lc(XQS))&&(lc(MLS)))||((lc(XQS))&&(lc(MLS)))||((lc(XQS))&&(lc(MLS)))||((lc(XQS))&&(lc(MLS)))||((lc(XQS))&&(lc(MLS)))||((lc(XQS))&&(lc(MLS)))||((lc(XQS))&&(lc(MLS)))||((lc(XQS))&&(lc(MLS)))||((lc(XQS))&&(lc(MLS)))||((lc(XQS))&&(lc(MLS)))||((lc(XQS))&&(lc(MLS)))||((lc(XQS))&&(lc(MLS)))||((lc(XQS))&&(lc(MLS)))||((lc(XQS))&&(lc(MLS)))||((lc(XQS))&&(lc(MLS)))||((lc(XQS))&&(lc(MLS)))||((lc(XQS))&&(lc(MLS)))||((lc(XQS))&&(lc(MLS)))||((lc(XQS))&&(lc(MLS)))||((lc(XQS))&&(lc(MLS)))||((lc(XQS))&&(lc(MLS)))||((lc(XQS))&&(lc(MLS)))||((lc(XQS))&&(lc(MLS)))||((lc(XQS))&&(lc(MLS)))||((lc(XQS))&&(lc(MLS)))||((lc(XQS))&&(lc(MLS)))||((lc(XQS))&&(lc(MLS)))||((lc(XQS))&&(lc(MLS)))||((lc(XQS))&&(lc(MLS)))||((lc(XQS))&&(lc(MLS)))||((lc(XQS))&&(lc(MLS)))||((lc(XQS))&&(lc(MLS)))||((lc(XQS))&&(lc(MLS)))||((lc(XQS))&&(lc(MLS)))||((lc(XQS))&&(lc(MLS)))||((lc(XQS))&&(lc(MLS)))||((lc(XQS))&&(lc(MLS)))||((lc(XQS))&&(lc(MLS)))||((lc(XQS))&&(lc(MLS)))||((lc(XQS))&&(lc(MLS)))||((lc(XQS))&&(lc(MLS)))||((lc(XQS))&&(lc(MLS)))||((lc(XQS))&&(lc(MLS)))||((lc(XQS))&&(lc(MLS)))||((lc(XQS))&&(lc(MLS)))||((lc(XQS))&&(lc(MLS)))||((lc(XQS))&&(lc(MLS)))||((lc(XQS))&&(lc(MLS)))||((lc(XQS))&&(lc(MLS)))||((lc(XQS))&&(lc(MLS)))||((lc(XQS))&&(lc(MLS)))||((lc(XQS))&&(lc(MLS)))||((lc(XQS))&&(lc(MLS)))||((lc(XQS))&&(lc(MLS)))||((lc(XQS))&&(lc(MLS)))||((lc(XQS))&&(lc(MLS)))||((lc(XQS))&&(lc(MLS)))||((lc(XQS))&&(lc(MLS)))||((lc(XQS))&&(lc(MLS)))||((lc(XQS))&&(lc(MLS)))||((lc(XQS))&&(lc(MLS)))||((lc(XQS))&&(lc(MLS)))||((lc(XQS))&&(lc(MLS)))||((lc(XQS))&&(lc(MLS)))||((lc(XQS))&&(lc(MLS)))||((lc(XQS))&&(lc(MLS)))||((lc(XQS))&&(lc(MLS)))||((lc(XQS))&&(lc(MLS)))||((lc(XQS))&&(lc(MLS)))||((lc(XQS))&&(lc(MLS)))||((lc(XQS))&&(lc(MLS)))||((lc(XQS))&&(lc(MLS)))||((lc(XQS))&&(lc(MLS)))||((lc(XQS))&&(lc(MLS)))||((lc(XQS))&&(lc(MLS)))||((lc(XQS))&&(lc(MLS)))||((lc(XQS))&&(lc(MLS)))||((lc(XQS))&&(lc(MLS)))||((lc(XQS))&&(lc(MLS)))||((lc(XQS))&&(lc(MLS)))||((lc(XQS))&&(lc(MLS)))||((lc(XQS))&&(lc(MLS)))||((lc(XQS))&&(lc(MLS)))||((lc(XQS))&&(lc(MLS)))||((lc(XQS))&&(lc(MLS)))||((lc(XQS))&&(lc(MLS)))||((lc(XQS))&&(lc(MLS)))||((lc(XQS))&&(lc(MLS)))||((lc(XQS))&&(lc(MLS)))||((lc(XQS))&&(lc(MLS)))||((lc(XQS))&&(lc(MLS)))||((lc(XQS))&&(lc(MLS)))||((lc(XQS))&&(lc(MLS)))||((lc(XQS))&&(lc(MLS)))||((lc(XQS))&&(lc(MLS)))||((lc(XQS))&&(lc(MLS)))||((lc(XQS))&&(lc(MLS)))||((lc(XQS))&&(lc(MLS)))||((lc(XQS))&&(lc(MLS)))||((lc(XQS))&&(lc(MLS)))||((lc(XQS))&&(lc(MLS)))||((lc(XQS))&&(lc(MLS)))||((lc(XQS))&&(lc(MLS)))||((lc(XQS))&&(lc(MLS)))||((lc(XQS))&&(lc(MLS)))||((lc(XQS))&&(lc(MLS)))||((lc(XQS))&&(lc(MLS)))||((lc(XQS))&&(lc(MLS)))||((lc(XQS))&&(lc(MLS)))||((lc(XQS))&&(lc(MLS)))||((lc(XQS))&&(lc(MLS)))||((lc(XQS))&&(lc(MLS)))||((lc(XQS))&&(lc(MLS)))||((lc(XQS))&&(lc(MLS)))||((lc(XQS))&&(lc(MLS)))||((lc(XQS))&&(lc(MLS)))||((lc(XQS))&&(lc(MLS)))||((lc(XQS))&&(lc(MLS)))||((lc(XQS))&&(lc(MLS)))||((lc(XQS))&&(lc(MLS)))||((lc(XQS))&&(lc(MLS)))||((lc(XQS))&&(lc(MLS)))||((lc(XQS))&&(lc(MLS)))||((lc(XQS))&&(lc(MLS)))||((lc(XQS))&&(lc(MLS)))||((lc(XQS))&&(lc(MLS)))||((lc(XQS))&&(lc(MLS)))||((lc(XQS))&&(lc(MLS)))||((lc(XQS))&&(lc(MLS)))||((lc(XQS))&&(lc(MLS)))||((lc(XQS))&&(lc(MLS)))||((lc(XQS))&&(lc(MLS)))||((lc(XQS))&&(lc(MLS)))||((lc(XQS))&&(lc(MLS)))||((lc(XQS))&&(lc(MLS)))||((lc(XQS))&&(lc(MLS)))||((lc(XQS))&&(lc(MLS)))||((lc(XQS))&&(lc(MLS)))||((lc(XQS))&&(lc(MLS)))||((lc(XQS))&&(lc(MLS)))||((lc(XQS))&&(lc(MLS)))||((lc(XQS))&&(lc(MLS)))||((lc(XQS))&&(lc(MLS)))||((lc(XQS))&&(lc(MLS)))||((lc(XQS))&&(lc(MLS)))||((lc(XQS))&&(lc(MLS)))||((lc(XQS))&&(lc(MLS)))||((lc(XQS))&&(lc(MLS)))||((lc(XQS))&&(lc(MLS)))||((lc(XQS))&&(lc(MLS)))||((lc(XQS))&&(lc(MLS)))||((lc(XQS))&&(lc(MLS)))||((lc(XQS))&&(lc(MLS)))||((lc(XQS))&&(lc(MLS)))||((lc(XQS))&&(lc(MLS)))||((lc(XQS))&&(lc(MLS)))||((lc(XQS))&&(lc(MLS)))||((lc(XQS))&&(lc(MLS)))||((lc(XQS))&&(lc(MLS)))||((lc(XQS))&&(lc(MLS)))||((lc(XQS))&&(lc(MLS)))||((lc(XQS))&&(lc(MLS)))||((lc(XQS))&&(lc(MLS)))||((lc(XQS))&&(lc(MLS)))||((lc(XQS))&&(lc(MLS)))||((lc(XQS))&&(lc(MLS)))||((lc(XQS))&&(lc(MLS)))||((lc(XQS))&&(lc(MLS)))||((lc(XQS))&&(lc(MLS)))||((lc(XQS))&&(lc(MLS)))||((lc(XQS))&&(lc(MLS)))||((lc(XQS))&&(lc(MLS)))||((lc(XQS))&&(lc(MLS)))||((lc(XQS))&&(lc(MLS)))||((lc(XQS))&&(lc(MLS)))||((lc(XQS))&&(lc(MLS)))||((lc(XQS))&&(lc(MLS)))||((lc(XQS))&&(lc(MLS)))||((lc(XQS))&&(lc(MLS)))||((lc(XQS))&&(lc(MLS)))||((lc(XQS))&&(lc(MLS)))||((lc(XQS))&&(lc(MLS)))||((lc(XQS))&&(lc(MLS)))||((lc(XQS))&&(lc(MLS)))||((lc(XQS))&&(lc(MLS)))||((lc(XQS))&&(lc(MLS)))||((lc(XQS))&&(lc(MLS)))||((lc(XQS))&&(lc(MLS)))||((lc(XQS))&&(lc(MLS)))||((lc(XQS))&&(lc(MLS)))||((lc(XQS))&&(lc(MLS)))||((lc(XQS))&&(lc(MLS)))||((lc(XQS))&&(lc(MLS)))||((lc(XQS))&&(lc(MLS)))||((lc(XQS))&&(lc(MLS)))||((lc(XQS))&&(lc(MLS)))||((lc(XQS))&&(lc(MLS)))||((lc(XQS))&&(lc(MLS)))||((lc(XQS))&&(lc(MLS)))||((lc(XQS))&&(lc(MLS)))||((lc(XQS))&&(lc(MLS)))||((lc(XQS))&&(lc(MLS)))||((lc(XQS))&&(lc(MLS)))||((lc(XQS))&&(lc(MLS)))||((lc(XQS))&&(lc(MLS)))||((lc(XQS))&&(lc(MLS)))||((lc(XQS))&&(lc(MLS)))||((lc(XQS))&&(lc(MLS)))||(lc(MLS))||((lc(XQS))&&(lc(MLS)))||((lc(XQS))&&(lc(MLS)))||((lc(XQS))&&(lc(MLS)))||((lc(XQS))&&(lc(MLS)))||((lc(XQS))&&(lc(MLS)))||((lc(XQS))&&(lc(MLS)))||((lc(XQS))&&(lc(MLS)))||((lc(XQS))&&(lc(MLS)))||((lc(XQS))&&(lc(MLS)))||((lc(XQS))&&(lc(MLS)))||((lc(XQS))&&(lc(MLS)))||((lc(XQS))&&(lc(MLS)))||((lc(XQS))&&(lc(MLS)))||((lc(XQS))&&(lc(MLS)))||((lc(XQS))&&(lc(MLS)))||((lc(XQS))&&(lc(MLS)))||((lc(XQS))&&(lc(MLS)))||((lc(XQS))&&(lc(MLS)))||((lc(XQS))&&(lc(MLS)))||((lc(XQS))&&(lc(MLS)))||((lc(XQS))&&(lc(MLS)))||((lc(XQS))&&(lc(MLS)))||((lc(XQS))&&(lc(MLS)))||((lc(XQS))&&(lc(MLS)))||((lc(XQS))&&(lc(MLS)))||((lc(XQS))&&(lc(MLS)))||((lc(XQS))&&(lc(MLS)))||((lc(XQS))&&(lc(MLS)))||((lc(XQS))&&(lc(MLS)))||((lc(XQS))&&(lc(MLS)))||((lc(XQS))&&(lc(MLS)))||((lc(XQS))&&(lc(MLS)))||((lc(XQS))&&(lc(MLS)))||((lc(XQS))&&(lc(MLS)))||((lc(XQS))&&(lc(MLS)))||((lc(XQS))&&(lc(MLS)))||((lc(XQS))&&(lc(MLS)))||((lc(XQS))&&(lc(MLS)))||((lc(XQS))&&(lc(MLS)))||((lc(XQS))&&(lc(MLS)))||((lc(XQS))&&(lc(MLS)))||((lc(XQS))&&(lc(MLS)))||((lc(XQS))&&(lc(MLS)))||((lc(XQS))&&(lc(MLS)))||((lc(XQS))&&(lc(MLS)))||((lc(XQS))&&(lc(MLS)))||((lc(XQS))&&(lc(MLS)))||((lc(XQS))&&(lc(MLS)))||((lc(XQS))&&(lc(MLS)))||((lc(XQS))&&(lc(MLS)))||((lc(XQS))&&(lc(MLS)))||((lc(XQS))&&(lc(MLS)))||((lc(XQS))&&(lc(MLS)))||((lc(XQS))&&(lc(MLS)))||((lc(XQS))&&(lc(MLS)))||((lc(XQS))&&(lc(MLS)))||((lc(XQS))&&(lc(MLS)))||((lc(XQS))&&(lc(MLS)))||((lc(XQS))&&(lc(MLS)))||((lc(XQS))&&(lc(MLS)))||((lc(XQS))&&(lc(MLS)))||((lc(XQS))&&(lc(MLS)))||((lc(XQS))&&(lc(MLS)))||((lc(XQS))&&(lc(MLS)))||((lc(XQS))&&(lc(MLS)))||((lc(XQS))&&(lc(MLS)))||((lc(XQS))&&(lc(MLS)))||((lc(XQS))&&(lc(MLS)))||((lc(XQS))&&(lc(MLS)))||((lc(XQS))&&(lc(MLS)))||((lc(XQS))&&(lc(MLS)))||((lc(XQS))&&(lc(MLS)))||((lc(XQS))&&(lc(MLS)))||((lc(XQS))&&(lc(MLS)))||((lc(XQS))&&(lc(MLS)))||((lc(XQS))&&(lc(MLS)))||((lc(XQS))&&(lc(MLS)))||((lc(XQS))&&(lc(MLS)))||((lc(XQS))&&(lc(MLS)))||((lc(XQS))&&(lc(MLS)))||((lc(XQS))&&(lc(MLS)))||((lc(XQS))&&(lc(MLS)))||((lc(XQS))&&(lc(MLS)))||((lc(XQS))&&(lc(MLS)))||((lc(XQS))&&(lc(MLS)))||((lc(XQS))&&(lc(MLS)))||((lc(XQS))&&(lc(MLS)))||((lc(XQS))&&(lc(MLS)))||((lc(XQS))&&(lc(MLS)))||((lc(XQS))&&(lc(MLS)))||((lc(XQS))&&(lc(MLS)))||((lc(XQS))&&(lc(MLS)))||((lc(XQS))&&(lc(MLS)))||((lc(XQS))&&(lc(MLS)))||(lc(XQS))||((lc(XQS))&&(lc(MLS)))||((lc(XQS))&&(lc(MLS)))||((lc(XQS))&&(lc(MLS)))||((lc(XQS))&&(lc(MLS)))||((lc(XQS))&&(lc(MLS)))||((lc(XQS))&&(lc(MLS)))||((lc(XQS))&&(lc(MLS)))||((lc(XQS))&&(lc(MLS)))||((lc(XQS))&&(lc(MLS)))||((lc(XQS))&&(lc(MLS)))||((lc(XQS))&&(lc(MLS)))||((lc(XQS))&&(lc(MLS)))||((lc(XQS))&&(lc(MLS)))||((lc(XQS))&&(lc(MLS)))||((lc(XQS))&&(lc(MLS)))||((lc(XQS))&&(lc(MLS)))||((lc(XQS))&&(lc(MLS)))||((lc(XQS))&&(lc(MLS)))||((lc(XQS))&&(lc(MLS)))||((lc(XQS))&&(lc(MLS)))||((lc(XQS))&&(lc(MLS)))||((lc(XQS))&&(lc(MLS)))||((lc(XQS))&&(lc(MLS)))))) {
                int LA49_1 = input.LA(2);

                if ( ((((lc(XQS))&&(lc(MLS)))||(lc(XQS)))) ) {
                    alt49=1;
                }
                else if ( ((lc(MLS))) ) {
                    alt49=2;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 49, 1, input);

                    throw nvae;
                }
            }
            else if ( (LA49_0==RBRACKET) ) {
                int LA49_2 = input.LA(2);

                if ( ((lc(XQS))) ) {
                    alt49=1;
                }
                else if ( (true) ) {
                    alt49=2;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 49, 2, input);

                    throw nvae;
                }
            }
            else if ( (LA49_0==EOF) ) {
                int LA49_3 = input.LA(2);

                if ( ((lc(XQS))) ) {
                    alt49=1;
                }
                else if ( (true) ) {
                    alt49=2;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 49, 3, input);

                    throw nvae;
                }
            }
            else if ( (LA49_0==RPAREN) ) {
                int LA49_4 = input.LA(2);

                if ( ((lc(XQS))) ) {
                    alt49=1;
                }
                else if ( (true) ) {
                    alt49=2;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 49, 4, input);

                    throw nvae;
                }
            }
            else if ( (LA49_0==RSQUARE) ) {
                int LA49_5 = input.LA(2);

                if ( ((lc(XQS))) ) {
                    alt49=1;
                }
                else if ( (true) ) {
                    alt49=2;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 49, 5, input);

                    throw nvae;
                }
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 49, 0, input);

                throw nvae;
            }
            switch (alt49) {
                case 1 :
                    // XQueryParser.g:412:12: {...}? => ( SEMICOLON ( pm_ApplyExpr )* )?
                    {
                    if ( !((lc(XQS))) ) {
                        if (state.backtracking>0) {state.failed=true; return retval;}
                        throw new FailedPredicateException(input, "pm_Expr", "lc(XQS)");
                    }
                    // XQueryParser.g:412:25: ( SEMICOLON ( pm_ApplyExpr )* )?
                    int alt48=2;
                    int LA48_0 = input.LA(1);

                    if ( (LA48_0==SEMICOLON) ) {
                        int LA48_1 = input.LA(2);

                        if ( (!(((lc(MLS))))) ) {
                            alt48=1;
                        }
                    }
                    switch (alt48) {
                        case 1 :
                            // XQueryParser.g:412:26: SEMICOLON ( pm_ApplyExpr )*
                            {
                            SEMICOLON90=(CommonToken)match(input,SEMICOLON,FOLLOW_SEMICOLON_in_pm_Expr3719); if (state.failed) return retval;
                            if ( state.backtracking==0 ) {
                            SEMICOLON90_tree = (XQDTCommonTree)adaptor.create(SEMICOLON90);
                            adaptor.addChild(root_0, SEMICOLON90_tree);
                            }
                            // XQueryParser.g:412:36: ( pm_ApplyExpr )*
                            loop47:
                            do {
                                int alt47=2;
                                int LA47_0 = input.LA(1);

                                if ( ((LA47_0>=ANCESTOR && LA47_0<=DECIMAL_SEPARATOR)||(LA47_0>=DIGIT && LA47_0<=NEXT)||(LA47_0>=ONLY && LA47_0<=EXIT)||(LA47_0>=SEQUENTIAL && LA47_0<=MAINTAINED)||(LA47_0>=MUTABLE && LA47_0<=LPAREN)||LA47_0==DOLLAR||(LA47_0>=STAR && LA47_0<=SMALLER)||(LA47_0>=SLASH && LA47_0<=DOT_DOT)||LA47_0==ATTR_SIGN||(LA47_0>=APOS && LA47_0<=QUOT)||LA47_0==L_NCName||(LA47_0>=L_Pragma && LA47_0<=L_DoubleLiteral)||LA47_0==EXPLICITLY) ) {
                                    alt47=1;
                                }


                                switch (alt47) {
                            	case 1 :
                            	    // XQueryParser.g:412:36: pm_ApplyExpr
                            	    {
                            	    pushFollow(FOLLOW_pm_ApplyExpr_in_pm_Expr3721);
                            	    pm_ApplyExpr91=pm_ApplyExpr();

                            	    state._fsp--;
                            	    if (state.failed) return retval;
                            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, pm_ApplyExpr91.getTree());

                            	    }
                            	    break;

                            	default :
                            	    break loop47;
                                }
                            } while (true);


                            }
                            break;

                    }


                    }
                    break;
                case 2 :
                    // XQueryParser.g:412:67: 
                    {
                    }
                    break;

            }

            // XQueryParser.g:413:11: ({...}? => ( SEMICOLON p_ConcatExpr )+ | )
            int alt51=2;
            int LA51_0 = input.LA(1);

            if ( (LA51_0==SEMICOLON) && ((lc(MLS)))) {
                alt51=1;
            }
            else if ( (LA51_0==EOF||LA51_0==RPAREN||LA51_0==RBRACKET||LA51_0==RSQUARE) ) {
                alt51=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 51, 0, input);

                throw nvae;
            }
            switch (alt51) {
                case 1 :
                    // XQueryParser.g:413:12: {...}? => ( SEMICOLON p_ConcatExpr )+
                    {
                    if ( !((lc(MLS))) ) {
                        if (state.backtracking>0) {state.failed=true; return retval;}
                        throw new FailedPredicateException(input, "pm_Expr", "lc(MLS)");
                    }
                    // XQueryParser.g:413:25: ( SEMICOLON p_ConcatExpr )+
                    int cnt50=0;
                    loop50:
                    do {
                        int alt50=2;
                        int LA50_0 = input.LA(1);

                        if ( (LA50_0==SEMICOLON) ) {
                            alt50=1;
                        }


                        switch (alt50) {
                    	case 1 :
                    	    // XQueryParser.g:413:26: SEMICOLON p_ConcatExpr
                    	    {
                    	    SEMICOLON92=(CommonToken)match(input,SEMICOLON,FOLLOW_SEMICOLON_in_pm_Expr3746); if (state.failed) return retval;
                    	    if ( state.backtracking==0 ) {
                    	    SEMICOLON92_tree = (XQDTCommonTree)adaptor.create(SEMICOLON92);
                    	    adaptor.addChild(root_0, SEMICOLON92_tree);
                    	    }
                    	    pushFollow(FOLLOW_p_ConcatExpr_in_pm_Expr3748);
                    	    p_ConcatExpr93=p_ConcatExpr();

                    	    state._fsp--;
                    	    if (state.failed) return retval;
                    	    if ( state.backtracking==0 ) adaptor.addChild(root_0, p_ConcatExpr93.getTree());

                    	    }
                    	    break;

                    	default :
                    	    if ( cnt50 >= 1 ) break loop50;
                    	    if (state.backtracking>0) {state.failed=true; return retval;}
                                EarlyExitException eee =
                                    new EarlyExitException(50, input);
                                throw eee;
                        }
                        cnt50++;
                    } while (true);


                    }
                    break;
                case 2 :
                    // XQueryParser.g:413:66: 
                    {
                    }
                    break;

            }


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (XQDTCommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (XQDTCommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "pm_Expr"

    public static class p_ExprSingle_return extends ParserRuleReturnScope {
        XQDTCommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "p_ExprSingle"
    // XQueryParser.g:418:1: p_ExprSingle : ( p_FLWORExpr | p_QuantifiedExpr | p_SwitchExpr | p_TypeswitchExpr | p_IfExpr | p_TryCatchExpr | {...}? => p_EvalExpr | {...}? => p_InsertExpr | {...}? => p_DeleteExpr | {...}? => p_RenameExpr | {...}? => p_ReplaceExpr | {...}? => p_TransformExpr | {...}? => p_BlockExpr | {...}? => p_AssignmentExpr | {...}? => p_ExitExpr | {...}? => p_WhileExpr | p_OrExpr );
    public final XQueryParser.p_ExprSingle_return p_ExprSingle() throws RecognitionException {
        XQueryParser.p_ExprSingle_return retval = new XQueryParser.p_ExprSingle_return();
        retval.start = input.LT(1);

        XQDTCommonTree root_0 = null;

        XQueryParser.p_FLWORExpr_return p_FLWORExpr94 = null;

        XQueryParser.p_QuantifiedExpr_return p_QuantifiedExpr95 = null;

        XQueryParser.p_SwitchExpr_return p_SwitchExpr96 = null;

        XQueryParser.p_TypeswitchExpr_return p_TypeswitchExpr97 = null;

        XQueryParser.p_IfExpr_return p_IfExpr98 = null;

        XQueryParser.p_TryCatchExpr_return p_TryCatchExpr99 = null;

        XQueryParser.p_EvalExpr_return p_EvalExpr100 = null;

        XQueryParser.p_InsertExpr_return p_InsertExpr101 = null;

        XQueryParser.p_DeleteExpr_return p_DeleteExpr102 = null;

        XQueryParser.p_RenameExpr_return p_RenameExpr103 = null;

        XQueryParser.p_ReplaceExpr_return p_ReplaceExpr104 = null;

        XQueryParser.p_TransformExpr_return p_TransformExpr105 = null;

        XQueryParser.p_BlockExpr_return p_BlockExpr106 = null;

        XQueryParser.p_AssignmentExpr_return p_AssignmentExpr107 = null;

        XQueryParser.p_ExitExpr_return p_ExitExpr108 = null;

        XQueryParser.p_WhileExpr_return p_WhileExpr109 = null;

        XQueryParser.p_OrExpr_return p_OrExpr110 = null;



        try {
            // XQueryParser.g:419:9: ( p_FLWORExpr | p_QuantifiedExpr | p_SwitchExpr | p_TypeswitchExpr | p_IfExpr | p_TryCatchExpr | {...}? => p_EvalExpr | {...}? => p_InsertExpr | {...}? => p_DeleteExpr | {...}? => p_RenameExpr | {...}? => p_ReplaceExpr | {...}? => p_TransformExpr | {...}? => p_BlockExpr | {...}? => p_AssignmentExpr | {...}? => p_ExitExpr | {...}? => p_WhileExpr | p_OrExpr )
            int alt52=17;
            alt52 = dfa52.predict(input);
            switch (alt52) {
                case 1 :
                    // XQueryParser.g:419:11: p_FLWORExpr
                    {
                    root_0 = (XQDTCommonTree)adaptor.nil();

                    pushFollow(FOLLOW_p_FLWORExpr_in_p_ExprSingle3782);
                    p_FLWORExpr94=p_FLWORExpr();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, p_FLWORExpr94.getTree());

                    }
                    break;
                case 2 :
                    // XQueryParser.g:420:11: p_QuantifiedExpr
                    {
                    root_0 = (XQDTCommonTree)adaptor.nil();

                    pushFollow(FOLLOW_p_QuantifiedExpr_in_p_ExprSingle3794);
                    p_QuantifiedExpr95=p_QuantifiedExpr();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, p_QuantifiedExpr95.getTree());

                    }
                    break;
                case 3 :
                    // XQueryParser.g:421:11: p_SwitchExpr
                    {
                    root_0 = (XQDTCommonTree)adaptor.nil();

                    pushFollow(FOLLOW_p_SwitchExpr_in_p_ExprSingle3806);
                    p_SwitchExpr96=p_SwitchExpr();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, p_SwitchExpr96.getTree());

                    }
                    break;
                case 4 :
                    // XQueryParser.g:422:11: p_TypeswitchExpr
                    {
                    root_0 = (XQDTCommonTree)adaptor.nil();

                    pushFollow(FOLLOW_p_TypeswitchExpr_in_p_ExprSingle3818);
                    p_TypeswitchExpr97=p_TypeswitchExpr();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, p_TypeswitchExpr97.getTree());

                    }
                    break;
                case 5 :
                    // XQueryParser.g:423:11: p_IfExpr
                    {
                    root_0 = (XQDTCommonTree)adaptor.nil();

                    pushFollow(FOLLOW_p_IfExpr_in_p_ExprSingle3830);
                    p_IfExpr98=p_IfExpr();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, p_IfExpr98.getTree());

                    }
                    break;
                case 6 :
                    // XQueryParser.g:424:11: p_TryCatchExpr
                    {
                    root_0 = (XQDTCommonTree)adaptor.nil();

                    pushFollow(FOLLOW_p_TryCatchExpr_in_p_ExprSingle3842);
                    p_TryCatchExpr99=p_TryCatchExpr();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, p_TryCatchExpr99.getTree());

                    }
                    break;
                case 7 :
                    // XQueryParser.g:425:11: {...}? => p_EvalExpr
                    {
                    root_0 = (XQDTCommonTree)adaptor.nil();

                    if ( !((lc(ZORBA))) ) {
                        if (state.backtracking>0) {state.failed=true; return retval;}
                        throw new FailedPredicateException(input, "p_ExprSingle", "lc(ZORBA)");
                    }
                    pushFollow(FOLLOW_p_EvalExpr_in_p_ExprSingle3857);
                    p_EvalExpr100=p_EvalExpr();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, p_EvalExpr100.getTree());

                    }
                    break;
                case 8 :
                    // XQueryParser.g:426:11: {...}? => p_InsertExpr
                    {
                    root_0 = (XQDTCommonTree)adaptor.nil();

                    if ( !((lc(XQU))) ) {
                        if (state.backtracking>0) {state.failed=true; return retval;}
                        throw new FailedPredicateException(input, "p_ExprSingle", "lc(XQU)");
                    }
                    pushFollow(FOLLOW_p_InsertExpr_in_p_ExprSingle3872);
                    p_InsertExpr101=p_InsertExpr();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, p_InsertExpr101.getTree());

                    }
                    break;
                case 9 :
                    // XQueryParser.g:427:11: {...}? => p_DeleteExpr
                    {
                    root_0 = (XQDTCommonTree)adaptor.nil();

                    if ( !((lc(XQU))) ) {
                        if (state.backtracking>0) {state.failed=true; return retval;}
                        throw new FailedPredicateException(input, "p_ExprSingle", "lc(XQU)");
                    }
                    pushFollow(FOLLOW_p_DeleteExpr_in_p_ExprSingle3887);
                    p_DeleteExpr102=p_DeleteExpr();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, p_DeleteExpr102.getTree());

                    }
                    break;
                case 10 :
                    // XQueryParser.g:428:11: {...}? => p_RenameExpr
                    {
                    root_0 = (XQDTCommonTree)adaptor.nil();

                    if ( !((lc(XQU))) ) {
                        if (state.backtracking>0) {state.failed=true; return retval;}
                        throw new FailedPredicateException(input, "p_ExprSingle", "lc(XQU)");
                    }
                    pushFollow(FOLLOW_p_RenameExpr_in_p_ExprSingle3902);
                    p_RenameExpr103=p_RenameExpr();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, p_RenameExpr103.getTree());

                    }
                    break;
                case 11 :
                    // XQueryParser.g:429:11: {...}? => p_ReplaceExpr
                    {
                    root_0 = (XQDTCommonTree)adaptor.nil();

                    if ( !((lc(XQU))) ) {
                        if (state.backtracking>0) {state.failed=true; return retval;}
                        throw new FailedPredicateException(input, "p_ExprSingle", "lc(XQU)");
                    }
                    pushFollow(FOLLOW_p_ReplaceExpr_in_p_ExprSingle3917);
                    p_ReplaceExpr104=p_ReplaceExpr();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, p_ReplaceExpr104.getTree());

                    }
                    break;
                case 12 :
                    // XQueryParser.g:430:11: {...}? => p_TransformExpr
                    {
                    root_0 = (XQDTCommonTree)adaptor.nil();

                    if ( !((lc(XQU))) ) {
                        if (state.backtracking>0) {state.failed=true; return retval;}
                        throw new FailedPredicateException(input, "p_ExprSingle", "lc(XQU)");
                    }
                    pushFollow(FOLLOW_p_TransformExpr_in_p_ExprSingle3932);
                    p_TransformExpr105=p_TransformExpr();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, p_TransformExpr105.getTree());

                    }
                    break;
                case 13 :
                    // XQueryParser.g:431:11: {...}? => p_BlockExpr
                    {
                    root_0 = (XQDTCommonTree)adaptor.nil();

                    if ( !((lc(XQS))) ) {
                        if (state.backtracking>0) {state.failed=true; return retval;}
                        throw new FailedPredicateException(input, "p_ExprSingle", "lc(XQS)");
                    }
                    pushFollow(FOLLOW_p_BlockExpr_in_p_ExprSingle3947);
                    p_BlockExpr106=p_BlockExpr();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, p_BlockExpr106.getTree());

                    }
                    break;
                case 14 :
                    // XQueryParser.g:432:11: {...}? => p_AssignmentExpr
                    {
                    root_0 = (XQDTCommonTree)adaptor.nil();

                    if ( !((lc(XQS))) ) {
                        if (state.backtracking>0) {state.failed=true; return retval;}
                        throw new FailedPredicateException(input, "p_ExprSingle", "lc(XQS)");
                    }
                    pushFollow(FOLLOW_p_AssignmentExpr_in_p_ExprSingle3962);
                    p_AssignmentExpr107=p_AssignmentExpr();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, p_AssignmentExpr107.getTree());

                    }
                    break;
                case 15 :
                    // XQueryParser.g:433:11: {...}? => p_ExitExpr
                    {
                    root_0 = (XQDTCommonTree)adaptor.nil();

                    if ( !((lc(XQS))) ) {
                        if (state.backtracking>0) {state.failed=true; return retval;}
                        throw new FailedPredicateException(input, "p_ExprSingle", "lc(XQS)");
                    }
                    pushFollow(FOLLOW_p_ExitExpr_in_p_ExprSingle3977);
                    p_ExitExpr108=p_ExitExpr();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, p_ExitExpr108.getTree());

                    }
                    break;
                case 16 :
                    // XQueryParser.g:434:11: {...}? => p_WhileExpr
                    {
                    root_0 = (XQDTCommonTree)adaptor.nil();

                    if ( !((lc(XQS))) ) {
                        if (state.backtracking>0) {state.failed=true; return retval;}
                        throw new FailedPredicateException(input, "p_ExprSingle", "lc(XQS)");
                    }
                    pushFollow(FOLLOW_p_WhileExpr_in_p_ExprSingle3992);
                    p_WhileExpr109=p_WhileExpr();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, p_WhileExpr109.getTree());

                    }
                    break;
                case 17 :
                    // XQueryParser.g:435:11: p_OrExpr
                    {
                    root_0 = (XQDTCommonTree)adaptor.nil();

                    pushFollow(FOLLOW_p_OrExpr_in_p_ExprSingle4004);
                    p_OrExpr110=p_OrExpr();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, p_OrExpr110.getTree());

                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (XQDTCommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (XQDTCommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "p_ExprSingle"

    public static class p_FLWORExpr_return extends ParserRuleReturnScope {
        XQDTCommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "p_FLWORExpr"
    // XQueryParser.g:439:1: p_FLWORExpr : p_InitialClause ( p_IntermediateClause )* p_ReturnClause ;
    public final XQueryParser.p_FLWORExpr_return p_FLWORExpr() throws RecognitionException {
        XQueryParser.p_FLWORExpr_return retval = new XQueryParser.p_FLWORExpr_return();
        retval.start = input.LT(1);

        XQDTCommonTree root_0 = null;

        XQueryParser.p_InitialClause_return p_InitialClause111 = null;

        XQueryParser.p_IntermediateClause_return p_IntermediateClause112 = null;

        XQueryParser.p_ReturnClause_return p_ReturnClause113 = null;



        try {
            // XQueryParser.g:440:9: ( p_InitialClause ( p_IntermediateClause )* p_ReturnClause )
            // XQueryParser.g:440:11: p_InitialClause ( p_IntermediateClause )* p_ReturnClause
            {
            root_0 = (XQDTCommonTree)adaptor.nil();

            pushFollow(FOLLOW_p_InitialClause_in_p_FLWORExpr4030);
            p_InitialClause111=p_InitialClause();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, p_InitialClause111.getTree());
            // XQueryParser.g:440:27: ( p_IntermediateClause )*
            loop53:
            do {
                int alt53=2;
                int LA53_0 = input.LA(1);

                if ( (LA53_0==FOR||LA53_0==LET||LA53_0==ORDER||LA53_0==STABLE||LA53_0==WHERE||LA53_0==COUNT||LA53_0==GROUP) ) {
                    alt53=1;
                }


                switch (alt53) {
            	case 1 :
            	    // XQueryParser.g:440:27: p_IntermediateClause
            	    {
            	    pushFollow(FOLLOW_p_IntermediateClause_in_p_FLWORExpr4032);
            	    p_IntermediateClause112=p_IntermediateClause();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, p_IntermediateClause112.getTree());

            	    }
            	    break;

            	default :
            	    break loop53;
                }
            } while (true);

            pushFollow(FOLLOW_p_ReturnClause_in_p_FLWORExpr4035);
            p_ReturnClause113=p_ReturnClause();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, p_ReturnClause113.getTree());

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (XQDTCommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (XQDTCommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "p_FLWORExpr"

    public static class p_InitialClause_return extends ParserRuleReturnScope {
        XQDTCommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "p_InitialClause"
    // XQueryParser.g:444:1: p_InitialClause : ( p_ForClause | p_LetClause | p_WindowClause );
    public final XQueryParser.p_InitialClause_return p_InitialClause() throws RecognitionException {
        XQueryParser.p_InitialClause_return retval = new XQueryParser.p_InitialClause_return();
        retval.start = input.LT(1);

        XQDTCommonTree root_0 = null;

        XQueryParser.p_ForClause_return p_ForClause114 = null;

        XQueryParser.p_LetClause_return p_LetClause115 = null;

        XQueryParser.p_WindowClause_return p_WindowClause116 = null;



        try {
            // XQueryParser.g:445:9: ( p_ForClause | p_LetClause | p_WindowClause )
            int alt54=3;
            int LA54_0 = input.LA(1);

            if ( (LA54_0==FOR) ) {
                int LA54_1 = input.LA(2);

                if ( (LA54_1==DOLLAR) ) {
                    alt54=1;
                }
                else if ( (LA54_1==SLIDING||LA54_1==TUMBLING) ) {
                    alt54=3;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 54, 1, input);

                    throw nvae;
                }
            }
            else if ( (LA54_0==LET) ) {
                alt54=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 54, 0, input);

                throw nvae;
            }
            switch (alt54) {
                case 1 :
                    // XQueryParser.g:445:11: p_ForClause
                    {
                    root_0 = (XQDTCommonTree)adaptor.nil();

                    pushFollow(FOLLOW_p_ForClause_in_p_InitialClause4061);
                    p_ForClause114=p_ForClause();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, p_ForClause114.getTree());

                    }
                    break;
                case 2 :
                    // XQueryParser.g:445:25: p_LetClause
                    {
                    root_0 = (XQDTCommonTree)adaptor.nil();

                    pushFollow(FOLLOW_p_LetClause_in_p_InitialClause4065);
                    p_LetClause115=p_LetClause();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, p_LetClause115.getTree());

                    }
                    break;
                case 3 :
                    // XQueryParser.g:445:39: p_WindowClause
                    {
                    root_0 = (XQDTCommonTree)adaptor.nil();

                    pushFollow(FOLLOW_p_WindowClause_in_p_InitialClause4069);
                    p_WindowClause116=p_WindowClause();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, p_WindowClause116.getTree());

                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (XQDTCommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (XQDTCommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "p_InitialClause"

    public static class p_IntermediateClause_return extends ParserRuleReturnScope {
        XQDTCommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "p_IntermediateClause"
    // XQueryParser.g:449:1: p_IntermediateClause : ( p_InitialClause | p_WhereClause | p_GroupByClause | p_OrderByClause | p_CountClause );
    public final XQueryParser.p_IntermediateClause_return p_IntermediateClause() throws RecognitionException {
        XQueryParser.p_IntermediateClause_return retval = new XQueryParser.p_IntermediateClause_return();
        retval.start = input.LT(1);

        XQDTCommonTree root_0 = null;

        XQueryParser.p_InitialClause_return p_InitialClause117 = null;

        XQueryParser.p_WhereClause_return p_WhereClause118 = null;

        XQueryParser.p_GroupByClause_return p_GroupByClause119 = null;

        XQueryParser.p_OrderByClause_return p_OrderByClause120 = null;

        XQueryParser.p_CountClause_return p_CountClause121 = null;



        try {
            // XQueryParser.g:450:9: ( p_InitialClause | p_WhereClause | p_GroupByClause | p_OrderByClause | p_CountClause )
            int alt55=5;
            switch ( input.LA(1) ) {
            case FOR:
            case LET:
                {
                alt55=1;
                }
                break;
            case WHERE:
                {
                alt55=2;
                }
                break;
            case GROUP:
                {
                alt55=3;
                }
                break;
            case ORDER:
            case STABLE:
                {
                alt55=4;
                }
                break;
            case COUNT:
                {
                alt55=5;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 55, 0, input);

                throw nvae;
            }

            switch (alt55) {
                case 1 :
                    // XQueryParser.g:450:11: p_InitialClause
                    {
                    root_0 = (XQDTCommonTree)adaptor.nil();

                    pushFollow(FOLLOW_p_InitialClause_in_p_IntermediateClause4095);
                    p_InitialClause117=p_InitialClause();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, p_InitialClause117.getTree());

                    }
                    break;
                case 2 :
                    // XQueryParser.g:450:29: p_WhereClause
                    {
                    root_0 = (XQDTCommonTree)adaptor.nil();

                    pushFollow(FOLLOW_p_WhereClause_in_p_IntermediateClause4099);
                    p_WhereClause118=p_WhereClause();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, p_WhereClause118.getTree());

                    }
                    break;
                case 3 :
                    // XQueryParser.g:450:45: p_GroupByClause
                    {
                    root_0 = (XQDTCommonTree)adaptor.nil();

                    pushFollow(FOLLOW_p_GroupByClause_in_p_IntermediateClause4103);
                    p_GroupByClause119=p_GroupByClause();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, p_GroupByClause119.getTree());

                    }
                    break;
                case 4 :
                    // XQueryParser.g:450:63: p_OrderByClause
                    {
                    root_0 = (XQDTCommonTree)adaptor.nil();

                    pushFollow(FOLLOW_p_OrderByClause_in_p_IntermediateClause4107);
                    p_OrderByClause120=p_OrderByClause();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, p_OrderByClause120.getTree());

                    }
                    break;
                case 5 :
                    // XQueryParser.g:450:81: p_CountClause
                    {
                    root_0 = (XQDTCommonTree)adaptor.nil();

                    pushFollow(FOLLOW_p_CountClause_in_p_IntermediateClause4111);
                    p_CountClause121=p_CountClause();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, p_CountClause121.getTree());

                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (XQDTCommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (XQDTCommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "p_IntermediateClause"

    public static class p_ForClause_return extends ParserRuleReturnScope {
        XQDTCommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "p_ForClause"
    // XQueryParser.g:455:1: p_ForClause : k+= FOR DOLLAR p_VarName ( p_TypeDeclaration )? ( p_PositionalVar )? ( p_FTScoreVar )? k+= IN p_ExprSingle ( COMMA DOLLAR p_VarName ( p_TypeDeclaration )? ( p_PositionalVar )? ( p_FTScoreVar )? k+= IN p_ExprSingle )* ;
    public final XQueryParser.p_ForClause_return p_ForClause() throws RecognitionException {
        XQueryParser.p_ForClause_return retval = new XQueryParser.p_ForClause_return();
        retval.start = input.LT(1);

        XQDTCommonTree root_0 = null;

        CommonToken DOLLAR122=null;
        CommonToken COMMA128=null;
        CommonToken DOLLAR129=null;
        CommonToken k=null;
        List list_k=null;
        XQueryParser.p_VarName_return p_VarName123 = null;

        XQueryParser.p_TypeDeclaration_return p_TypeDeclaration124 = null;

        XQueryParser.p_PositionalVar_return p_PositionalVar125 = null;

        XQueryParser.p_FTScoreVar_return p_FTScoreVar126 = null;

        XQueryParser.p_ExprSingle_return p_ExprSingle127 = null;

        XQueryParser.p_VarName_return p_VarName130 = null;

        XQueryParser.p_TypeDeclaration_return p_TypeDeclaration131 = null;

        XQueryParser.p_PositionalVar_return p_PositionalVar132 = null;

        XQueryParser.p_FTScoreVar_return p_FTScoreVar133 = null;

        XQueryParser.p_ExprSingle_return p_ExprSingle134 = null;


        XQDTCommonTree DOLLAR122_tree=null;
        XQDTCommonTree COMMA128_tree=null;
        XQDTCommonTree DOLLAR129_tree=null;
        XQDTCommonTree k_tree=null;

        try {
            // XQueryParser.g:456:9: (k+= FOR DOLLAR p_VarName ( p_TypeDeclaration )? ( p_PositionalVar )? ( p_FTScoreVar )? k+= IN p_ExprSingle ( COMMA DOLLAR p_VarName ( p_TypeDeclaration )? ( p_PositionalVar )? ( p_FTScoreVar )? k+= IN p_ExprSingle )* )
            // XQueryParser.g:456:11: k+= FOR DOLLAR p_VarName ( p_TypeDeclaration )? ( p_PositionalVar )? ( p_FTScoreVar )? k+= IN p_ExprSingle ( COMMA DOLLAR p_VarName ( p_TypeDeclaration )? ( p_PositionalVar )? ( p_FTScoreVar )? k+= IN p_ExprSingle )*
            {
            root_0 = (XQDTCommonTree)adaptor.nil();

            k=(CommonToken)match(input,FOR,FOLLOW_FOR_in_p_ForClause4140); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            k_tree = (XQDTCommonTree)adaptor.create(k);
            adaptor.addChild(root_0, k_tree);
            }
            if (list_k==null) list_k=new ArrayList();
            list_k.add(k);

            DOLLAR122=(CommonToken)match(input,DOLLAR,FOLLOW_DOLLAR_in_p_ForClause4142); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            DOLLAR122_tree = (XQDTCommonTree)adaptor.create(DOLLAR122);
            adaptor.addChild(root_0, DOLLAR122_tree);
            }
            pushFollow(FOLLOW_p_VarName_in_p_ForClause4144);
            p_VarName123=p_VarName();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, p_VarName123.getTree());
            // XQueryParser.g:456:35: ( p_TypeDeclaration )?
            int alt56=2;
            int LA56_0 = input.LA(1);

            if ( (LA56_0==AS) ) {
                alt56=1;
            }
            switch (alt56) {
                case 1 :
                    // XQueryParser.g:456:35: p_TypeDeclaration
                    {
                    pushFollow(FOLLOW_p_TypeDeclaration_in_p_ForClause4146);
                    p_TypeDeclaration124=p_TypeDeclaration();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, p_TypeDeclaration124.getTree());

                    }
                    break;

            }

            // XQueryParser.g:456:54: ( p_PositionalVar )?
            int alt57=2;
            int LA57_0 = input.LA(1);

            if ( (LA57_0==AT) ) {
                alt57=1;
            }
            switch (alt57) {
                case 1 :
                    // XQueryParser.g:456:54: p_PositionalVar
                    {
                    pushFollow(FOLLOW_p_PositionalVar_in_p_ForClause4149);
                    p_PositionalVar125=p_PositionalVar();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, p_PositionalVar125.getTree());

                    }
                    break;

            }

            // XQueryParser.g:456:71: ( p_FTScoreVar )?
            int alt58=2;
            int LA58_0 = input.LA(1);

            if ( (LA58_0==SCORE) ) {
                alt58=1;
            }
            switch (alt58) {
                case 1 :
                    // XQueryParser.g:456:71: p_FTScoreVar
                    {
                    pushFollow(FOLLOW_p_FTScoreVar_in_p_ForClause4152);
                    p_FTScoreVar126=p_FTScoreVar();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, p_FTScoreVar126.getTree());

                    }
                    break;

            }

            k=(CommonToken)match(input,IN,FOLLOW_IN_in_p_ForClause4157); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            k_tree = (XQDTCommonTree)adaptor.create(k);
            adaptor.addChild(root_0, k_tree);
            }
            if (list_k==null) list_k=new ArrayList();
            list_k.add(k);

            pushFollow(FOLLOW_p_ExprSingle_in_p_ForClause4159);
            p_ExprSingle127=p_ExprSingle();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, p_ExprSingle127.getTree());
            // XQueryParser.g:456:104: ( COMMA DOLLAR p_VarName ( p_TypeDeclaration )? ( p_PositionalVar )? ( p_FTScoreVar )? k+= IN p_ExprSingle )*
            loop62:
            do {
                int alt62=2;
                int LA62_0 = input.LA(1);

                if ( (LA62_0==COMMA) ) {
                    alt62=1;
                }


                switch (alt62) {
            	case 1 :
            	    // XQueryParser.g:456:105: COMMA DOLLAR p_VarName ( p_TypeDeclaration )? ( p_PositionalVar )? ( p_FTScoreVar )? k+= IN p_ExprSingle
            	    {
            	    COMMA128=(CommonToken)match(input,COMMA,FOLLOW_COMMA_in_p_ForClause4162); if (state.failed) return retval;
            	    if ( state.backtracking==0 ) {
            	    COMMA128_tree = (XQDTCommonTree)adaptor.create(COMMA128);
            	    adaptor.addChild(root_0, COMMA128_tree);
            	    }
            	    DOLLAR129=(CommonToken)match(input,DOLLAR,FOLLOW_DOLLAR_in_p_ForClause4164); if (state.failed) return retval;
            	    if ( state.backtracking==0 ) {
            	    DOLLAR129_tree = (XQDTCommonTree)adaptor.create(DOLLAR129);
            	    adaptor.addChild(root_0, DOLLAR129_tree);
            	    }
            	    pushFollow(FOLLOW_p_VarName_in_p_ForClause4166);
            	    p_VarName130=p_VarName();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, p_VarName130.getTree());
            	    // XQueryParser.g:456:128: ( p_TypeDeclaration )?
            	    int alt59=2;
            	    int LA59_0 = input.LA(1);

            	    if ( (LA59_0==AS) ) {
            	        alt59=1;
            	    }
            	    switch (alt59) {
            	        case 1 :
            	            // XQueryParser.g:456:128: p_TypeDeclaration
            	            {
            	            pushFollow(FOLLOW_p_TypeDeclaration_in_p_ForClause4168);
            	            p_TypeDeclaration131=p_TypeDeclaration();

            	            state._fsp--;
            	            if (state.failed) return retval;
            	            if ( state.backtracking==0 ) adaptor.addChild(root_0, p_TypeDeclaration131.getTree());

            	            }
            	            break;

            	    }

            	    // XQueryParser.g:456:147: ( p_PositionalVar )?
            	    int alt60=2;
            	    int LA60_0 = input.LA(1);

            	    if ( (LA60_0==AT) ) {
            	        alt60=1;
            	    }
            	    switch (alt60) {
            	        case 1 :
            	            // XQueryParser.g:456:147: p_PositionalVar
            	            {
            	            pushFollow(FOLLOW_p_PositionalVar_in_p_ForClause4171);
            	            p_PositionalVar132=p_PositionalVar();

            	            state._fsp--;
            	            if (state.failed) return retval;
            	            if ( state.backtracking==0 ) adaptor.addChild(root_0, p_PositionalVar132.getTree());

            	            }
            	            break;

            	    }

            	    // XQueryParser.g:456:164: ( p_FTScoreVar )?
            	    int alt61=2;
            	    int LA61_0 = input.LA(1);

            	    if ( (LA61_0==SCORE) ) {
            	        alt61=1;
            	    }
            	    switch (alt61) {
            	        case 1 :
            	            // XQueryParser.g:456:164: p_FTScoreVar
            	            {
            	            pushFollow(FOLLOW_p_FTScoreVar_in_p_ForClause4174);
            	            p_FTScoreVar133=p_FTScoreVar();

            	            state._fsp--;
            	            if (state.failed) return retval;
            	            if ( state.backtracking==0 ) adaptor.addChild(root_0, p_FTScoreVar133.getTree());

            	            }
            	            break;

            	    }

            	    k=(CommonToken)match(input,IN,FOLLOW_IN_in_p_ForClause4179); if (state.failed) return retval;
            	    if ( state.backtracking==0 ) {
            	    k_tree = (XQDTCommonTree)adaptor.create(k);
            	    adaptor.addChild(root_0, k_tree);
            	    }
            	    if (list_k==null) list_k=new ArrayList();
            	    list_k.add(k);

            	    pushFollow(FOLLOW_p_ExprSingle_in_p_ForClause4181);
            	    p_ExprSingle134=p_ExprSingle();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, p_ExprSingle134.getTree());

            	    }
            	    break;

            	default :
            	    break loop62;
                }
            } while (true);

            if ( state.backtracking==0 ) {
              ak(list_k);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (XQDTCommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (XQDTCommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "p_ForClause"

    public static class p_PositionalVar_return extends ParserRuleReturnScope {
        XQDTCommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "p_PositionalVar"
    // XQueryParser.g:460:1: p_PositionalVar : ka= AT DOLLAR p_VarName ;
    public final XQueryParser.p_PositionalVar_return p_PositionalVar() throws RecognitionException {
        XQueryParser.p_PositionalVar_return retval = new XQueryParser.p_PositionalVar_return();
        retval.start = input.LT(1);

        XQDTCommonTree root_0 = null;

        CommonToken ka=null;
        CommonToken DOLLAR135=null;
        XQueryParser.p_VarName_return p_VarName136 = null;


        XQDTCommonTree ka_tree=null;
        XQDTCommonTree DOLLAR135_tree=null;

        try {
            // XQueryParser.g:461:9: (ka= AT DOLLAR p_VarName )
            // XQueryParser.g:461:11: ka= AT DOLLAR p_VarName
            {
            root_0 = (XQDTCommonTree)adaptor.nil();

            ka=(CommonToken)match(input,AT,FOLLOW_AT_in_p_PositionalVar4213); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            ka_tree = (XQDTCommonTree)adaptor.create(ka);
            adaptor.addChild(root_0, ka_tree);
            }
            if ( state.backtracking==0 ) {
              ak(ka);
            }
            DOLLAR135=(CommonToken)match(input,DOLLAR,FOLLOW_DOLLAR_in_p_PositionalVar4217); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            DOLLAR135_tree = (XQDTCommonTree)adaptor.create(DOLLAR135);
            adaptor.addChild(root_0, DOLLAR135_tree);
            }
            pushFollow(FOLLOW_p_VarName_in_p_PositionalVar4219);
            p_VarName136=p_VarName();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, p_VarName136.getTree());

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (XQDTCommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (XQDTCommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "p_PositionalVar"

    public static class p_FTScoreVar_return extends ParserRuleReturnScope {
        XQDTCommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "p_FTScoreVar"
    // XQueryParser.g:465:1: p_FTScoreVar : ks= SCORE DOLLAR p_VarName ;
    public final XQueryParser.p_FTScoreVar_return p_FTScoreVar() throws RecognitionException {
        XQueryParser.p_FTScoreVar_return retval = new XQueryParser.p_FTScoreVar_return();
        retval.start = input.LT(1);

        XQDTCommonTree root_0 = null;

        CommonToken ks=null;
        CommonToken DOLLAR137=null;
        XQueryParser.p_VarName_return p_VarName138 = null;


        XQDTCommonTree ks_tree=null;
        XQDTCommonTree DOLLAR137_tree=null;

        try {
            // XQueryParser.g:466:9: (ks= SCORE DOLLAR p_VarName )
            // XQueryParser.g:466:11: ks= SCORE DOLLAR p_VarName
            {
            root_0 = (XQDTCommonTree)adaptor.nil();

            ks=(CommonToken)match(input,SCORE,FOLLOW_SCORE_in_p_FTScoreVar4247); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            ks_tree = (XQDTCommonTree)adaptor.create(ks);
            adaptor.addChild(root_0, ks_tree);
            }
            if ( state.backtracking==0 ) {
              ak(ks);
            }
            DOLLAR137=(CommonToken)match(input,DOLLAR,FOLLOW_DOLLAR_in_p_FTScoreVar4251); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            DOLLAR137_tree = (XQDTCommonTree)adaptor.create(DOLLAR137);
            adaptor.addChild(root_0, DOLLAR137_tree);
            }
            pushFollow(FOLLOW_p_VarName_in_p_FTScoreVar4253);
            p_VarName138=p_VarName();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, p_VarName138.getTree());

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (XQDTCommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (XQDTCommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "p_FTScoreVar"

    public static class p_LetClause_return extends ParserRuleReturnScope {
        XQDTCommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "p_LetClause"
    // XQueryParser.g:471:1: p_LetClause : kl= LET ( ( DOLLAR p_VarName ( p_TypeDeclaration )? ) | p_FTScoreVar ) BIND p_ExprSingle ( COMMA ( ( DOLLAR p_VarName ( p_TypeDeclaration )? ) | ( p_FTScoreVar )? ) BIND p_ExprSingle )* ;
    public final XQueryParser.p_LetClause_return p_LetClause() throws RecognitionException {
        XQueryParser.p_LetClause_return retval = new XQueryParser.p_LetClause_return();
        retval.start = input.LT(1);

        XQDTCommonTree root_0 = null;

        CommonToken kl=null;
        CommonToken DOLLAR139=null;
        CommonToken BIND143=null;
        CommonToken COMMA145=null;
        CommonToken DOLLAR146=null;
        CommonToken BIND150=null;
        XQueryParser.p_VarName_return p_VarName140 = null;

        XQueryParser.p_TypeDeclaration_return p_TypeDeclaration141 = null;

        XQueryParser.p_FTScoreVar_return p_FTScoreVar142 = null;

        XQueryParser.p_ExprSingle_return p_ExprSingle144 = null;

        XQueryParser.p_VarName_return p_VarName147 = null;

        XQueryParser.p_TypeDeclaration_return p_TypeDeclaration148 = null;

        XQueryParser.p_FTScoreVar_return p_FTScoreVar149 = null;

        XQueryParser.p_ExprSingle_return p_ExprSingle151 = null;


        XQDTCommonTree kl_tree=null;
        XQDTCommonTree DOLLAR139_tree=null;
        XQDTCommonTree BIND143_tree=null;
        XQDTCommonTree COMMA145_tree=null;
        XQDTCommonTree DOLLAR146_tree=null;
        XQDTCommonTree BIND150_tree=null;

        try {
            // XQueryParser.g:472:9: (kl= LET ( ( DOLLAR p_VarName ( p_TypeDeclaration )? ) | p_FTScoreVar ) BIND p_ExprSingle ( COMMA ( ( DOLLAR p_VarName ( p_TypeDeclaration )? ) | ( p_FTScoreVar )? ) BIND p_ExprSingle )* )
            // XQueryParser.g:472:11: kl= LET ( ( DOLLAR p_VarName ( p_TypeDeclaration )? ) | p_FTScoreVar ) BIND p_ExprSingle ( COMMA ( ( DOLLAR p_VarName ( p_TypeDeclaration )? ) | ( p_FTScoreVar )? ) BIND p_ExprSingle )*
            {
            root_0 = (XQDTCommonTree)adaptor.nil();

            kl=(CommonToken)match(input,LET,FOLLOW_LET_in_p_LetClause4282); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            kl_tree = (XQDTCommonTree)adaptor.create(kl);
            adaptor.addChild(root_0, kl_tree);
            }
            if ( state.backtracking==0 ) {
              ak(kl);
            }
            // XQueryParser.g:472:29: ( ( DOLLAR p_VarName ( p_TypeDeclaration )? ) | p_FTScoreVar )
            int alt64=2;
            int LA64_0 = input.LA(1);

            if ( (LA64_0==DOLLAR) ) {
                alt64=1;
            }
            else if ( (LA64_0==SCORE) ) {
                alt64=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 64, 0, input);

                throw nvae;
            }
            switch (alt64) {
                case 1 :
                    // XQueryParser.g:472:31: ( DOLLAR p_VarName ( p_TypeDeclaration )? )
                    {
                    // XQueryParser.g:472:31: ( DOLLAR p_VarName ( p_TypeDeclaration )? )
                    // XQueryParser.g:472:32: DOLLAR p_VarName ( p_TypeDeclaration )?
                    {
                    DOLLAR139=(CommonToken)match(input,DOLLAR,FOLLOW_DOLLAR_in_p_LetClause4289); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    DOLLAR139_tree = (XQDTCommonTree)adaptor.create(DOLLAR139);
                    adaptor.addChild(root_0, DOLLAR139_tree);
                    }
                    pushFollow(FOLLOW_p_VarName_in_p_LetClause4291);
                    p_VarName140=p_VarName();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, p_VarName140.getTree());
                    // XQueryParser.g:472:49: ( p_TypeDeclaration )?
                    int alt63=2;
                    int LA63_0 = input.LA(1);

                    if ( (LA63_0==AS) ) {
                        alt63=1;
                    }
                    switch (alt63) {
                        case 1 :
                            // XQueryParser.g:472:49: p_TypeDeclaration
                            {
                            pushFollow(FOLLOW_p_TypeDeclaration_in_p_LetClause4293);
                            p_TypeDeclaration141=p_TypeDeclaration();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) adaptor.addChild(root_0, p_TypeDeclaration141.getTree());

                            }
                            break;

                    }


                    }


                    }
                    break;
                case 2 :
                    // XQueryParser.g:472:71: p_FTScoreVar
                    {
                    pushFollow(FOLLOW_p_FTScoreVar_in_p_LetClause4299);
                    p_FTScoreVar142=p_FTScoreVar();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, p_FTScoreVar142.getTree());

                    }
                    break;

            }

            BIND143=(CommonToken)match(input,BIND,FOLLOW_BIND_in_p_LetClause4303); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            BIND143_tree = (XQDTCommonTree)adaptor.create(BIND143);
            adaptor.addChild(root_0, BIND143_tree);
            }
            pushFollow(FOLLOW_p_ExprSingle_in_p_LetClause4305);
            p_ExprSingle144=p_ExprSingle();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, p_ExprSingle144.getTree());
            // XQueryParser.g:472:104: ( COMMA ( ( DOLLAR p_VarName ( p_TypeDeclaration )? ) | ( p_FTScoreVar )? ) BIND p_ExprSingle )*
            loop68:
            do {
                int alt68=2;
                int LA68_0 = input.LA(1);

                if ( (LA68_0==COMMA) ) {
                    alt68=1;
                }


                switch (alt68) {
            	case 1 :
            	    // XQueryParser.g:472:105: COMMA ( ( DOLLAR p_VarName ( p_TypeDeclaration )? ) | ( p_FTScoreVar )? ) BIND p_ExprSingle
            	    {
            	    COMMA145=(CommonToken)match(input,COMMA,FOLLOW_COMMA_in_p_LetClause4308); if (state.failed) return retval;
            	    if ( state.backtracking==0 ) {
            	    COMMA145_tree = (XQDTCommonTree)adaptor.create(COMMA145);
            	    adaptor.addChild(root_0, COMMA145_tree);
            	    }
            	    // XQueryParser.g:472:111: ( ( DOLLAR p_VarName ( p_TypeDeclaration )? ) | ( p_FTScoreVar )? )
            	    int alt67=2;
            	    int LA67_0 = input.LA(1);

            	    if ( (LA67_0==DOLLAR) ) {
            	        alt67=1;
            	    }
            	    else if ( (LA67_0==SCORE||LA67_0==BIND) ) {
            	        alt67=2;
            	    }
            	    else {
            	        if (state.backtracking>0) {state.failed=true; return retval;}
            	        NoViableAltException nvae =
            	            new NoViableAltException("", 67, 0, input);

            	        throw nvae;
            	    }
            	    switch (alt67) {
            	        case 1 :
            	            // XQueryParser.g:472:113: ( DOLLAR p_VarName ( p_TypeDeclaration )? )
            	            {
            	            // XQueryParser.g:472:113: ( DOLLAR p_VarName ( p_TypeDeclaration )? )
            	            // XQueryParser.g:472:114: DOLLAR p_VarName ( p_TypeDeclaration )?
            	            {
            	            DOLLAR146=(CommonToken)match(input,DOLLAR,FOLLOW_DOLLAR_in_p_LetClause4313); if (state.failed) return retval;
            	            if ( state.backtracking==0 ) {
            	            DOLLAR146_tree = (XQDTCommonTree)adaptor.create(DOLLAR146);
            	            adaptor.addChild(root_0, DOLLAR146_tree);
            	            }
            	            pushFollow(FOLLOW_p_VarName_in_p_LetClause4315);
            	            p_VarName147=p_VarName();

            	            state._fsp--;
            	            if (state.failed) return retval;
            	            if ( state.backtracking==0 ) adaptor.addChild(root_0, p_VarName147.getTree());
            	            // XQueryParser.g:472:131: ( p_TypeDeclaration )?
            	            int alt65=2;
            	            int LA65_0 = input.LA(1);

            	            if ( (LA65_0==AS) ) {
            	                alt65=1;
            	            }
            	            switch (alt65) {
            	                case 1 :
            	                    // XQueryParser.g:472:131: p_TypeDeclaration
            	                    {
            	                    pushFollow(FOLLOW_p_TypeDeclaration_in_p_LetClause4317);
            	                    p_TypeDeclaration148=p_TypeDeclaration();

            	                    state._fsp--;
            	                    if (state.failed) return retval;
            	                    if ( state.backtracking==0 ) adaptor.addChild(root_0, p_TypeDeclaration148.getTree());

            	                    }
            	                    break;

            	            }


            	            }


            	            }
            	            break;
            	        case 2 :
            	            // XQueryParser.g:472:153: ( p_FTScoreVar )?
            	            {
            	            // XQueryParser.g:472:153: ( p_FTScoreVar )?
            	            int alt66=2;
            	            int LA66_0 = input.LA(1);

            	            if ( (LA66_0==SCORE) ) {
            	                alt66=1;
            	            }
            	            switch (alt66) {
            	                case 1 :
            	                    // XQueryParser.g:472:153: p_FTScoreVar
            	                    {
            	                    pushFollow(FOLLOW_p_FTScoreVar_in_p_LetClause4323);
            	                    p_FTScoreVar149=p_FTScoreVar();

            	                    state._fsp--;
            	                    if (state.failed) return retval;
            	                    if ( state.backtracking==0 ) adaptor.addChild(root_0, p_FTScoreVar149.getTree());

            	                    }
            	                    break;

            	            }


            	            }
            	            break;

            	    }

            	    BIND150=(CommonToken)match(input,BIND,FOLLOW_BIND_in_p_LetClause4328); if (state.failed) return retval;
            	    if ( state.backtracking==0 ) {
            	    BIND150_tree = (XQDTCommonTree)adaptor.create(BIND150);
            	    adaptor.addChild(root_0, BIND150_tree);
            	    }
            	    pushFollow(FOLLOW_p_ExprSingle_in_p_LetClause4330);
            	    p_ExprSingle151=p_ExprSingle();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, p_ExprSingle151.getTree());

            	    }
            	    break;

            	default :
            	    break loop68;
                }
            } while (true);


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (XQDTCommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (XQDTCommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "p_LetClause"

    public static class p_WindowClause_return extends ParserRuleReturnScope {
        XQDTCommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "p_WindowClause"
    // XQueryParser.g:476:1: p_WindowClause : kf= FOR ( p_TumblingWindowClause | p_SlidingWindowClause ) ;
    public final XQueryParser.p_WindowClause_return p_WindowClause() throws RecognitionException {
        XQueryParser.p_WindowClause_return retval = new XQueryParser.p_WindowClause_return();
        retval.start = input.LT(1);

        XQDTCommonTree root_0 = null;

        CommonToken kf=null;
        XQueryParser.p_TumblingWindowClause_return p_TumblingWindowClause152 = null;

        XQueryParser.p_SlidingWindowClause_return p_SlidingWindowClause153 = null;


        XQDTCommonTree kf_tree=null;

        try {
            // XQueryParser.g:477:9: (kf= FOR ( p_TumblingWindowClause | p_SlidingWindowClause ) )
            // XQueryParser.g:477:11: kf= FOR ( p_TumblingWindowClause | p_SlidingWindowClause )
            {
            root_0 = (XQDTCommonTree)adaptor.nil();

            kf=(CommonToken)match(input,FOR,FOLLOW_FOR_in_p_WindowClause4360); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            kf_tree = (XQDTCommonTree)adaptor.create(kf);
            adaptor.addChild(root_0, kf_tree);
            }
            if ( state.backtracking==0 ) {
              ak(kf);
            }
            // XQueryParser.g:477:29: ( p_TumblingWindowClause | p_SlidingWindowClause )
            int alt69=2;
            int LA69_0 = input.LA(1);

            if ( (LA69_0==TUMBLING) ) {
                alt69=1;
            }
            else if ( (LA69_0==SLIDING) ) {
                alt69=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 69, 0, input);

                throw nvae;
            }
            switch (alt69) {
                case 1 :
                    // XQueryParser.g:477:30: p_TumblingWindowClause
                    {
                    pushFollow(FOLLOW_p_TumblingWindowClause_in_p_WindowClause4365);
                    p_TumblingWindowClause152=p_TumblingWindowClause();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, p_TumblingWindowClause152.getTree());

                    }
                    break;
                case 2 :
                    // XQueryParser.g:477:55: p_SlidingWindowClause
                    {
                    pushFollow(FOLLOW_p_SlidingWindowClause_in_p_WindowClause4369);
                    p_SlidingWindowClause153=p_SlidingWindowClause();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, p_SlidingWindowClause153.getTree());

                    }
                    break;

            }


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (XQDTCommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (XQDTCommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "p_WindowClause"

    public static class p_TumblingWindowClause_return extends ParserRuleReturnScope {
        XQDTCommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "p_TumblingWindowClause"
    // XQueryParser.g:481:1: p_TumblingWindowClause : k+= TUMBLING k+= WINDOW DOLLAR p_VarName ( p_TypeDeclaration )? IN p_ExprSingle p_WindowStartCondition ( p_WindowEndCondition )? ;
    public final XQueryParser.p_TumblingWindowClause_return p_TumblingWindowClause() throws RecognitionException {
        XQueryParser.p_TumblingWindowClause_return retval = new XQueryParser.p_TumblingWindowClause_return();
        retval.start = input.LT(1);

        XQDTCommonTree root_0 = null;

        CommonToken DOLLAR154=null;
        CommonToken IN157=null;
        CommonToken k=null;
        List list_k=null;
        XQueryParser.p_VarName_return p_VarName155 = null;

        XQueryParser.p_TypeDeclaration_return p_TypeDeclaration156 = null;

        XQueryParser.p_ExprSingle_return p_ExprSingle158 = null;

        XQueryParser.p_WindowStartCondition_return p_WindowStartCondition159 = null;

        XQueryParser.p_WindowEndCondition_return p_WindowEndCondition160 = null;


        XQDTCommonTree DOLLAR154_tree=null;
        XQDTCommonTree IN157_tree=null;
        XQDTCommonTree k_tree=null;

        try {
            // XQueryParser.g:482:9: (k+= TUMBLING k+= WINDOW DOLLAR p_VarName ( p_TypeDeclaration )? IN p_ExprSingle p_WindowStartCondition ( p_WindowEndCondition )? )
            // XQueryParser.g:482:11: k+= TUMBLING k+= WINDOW DOLLAR p_VarName ( p_TypeDeclaration )? IN p_ExprSingle p_WindowStartCondition ( p_WindowEndCondition )?
            {
            root_0 = (XQDTCommonTree)adaptor.nil();

            k=(CommonToken)match(input,TUMBLING,FOLLOW_TUMBLING_in_p_TumblingWindowClause4406); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            k_tree = (XQDTCommonTree)adaptor.create(k);
            adaptor.addChild(root_0, k_tree);
            }
            if (list_k==null) list_k=new ArrayList();
            list_k.add(k);

            k=(CommonToken)match(input,WINDOW,FOLLOW_WINDOW_in_p_TumblingWindowClause4410); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            k_tree = (XQDTCommonTree)adaptor.create(k);
            adaptor.addChild(root_0, k_tree);
            }
            if (list_k==null) list_k=new ArrayList();
            list_k.add(k);

            DOLLAR154=(CommonToken)match(input,DOLLAR,FOLLOW_DOLLAR_in_p_TumblingWindowClause4412); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            DOLLAR154_tree = (XQDTCommonTree)adaptor.create(DOLLAR154);
            adaptor.addChild(root_0, DOLLAR154_tree);
            }
            pushFollow(FOLLOW_p_VarName_in_p_TumblingWindowClause4414);
            p_VarName155=p_VarName();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, p_VarName155.getTree());
            // XQueryParser.g:482:50: ( p_TypeDeclaration )?
            int alt70=2;
            int LA70_0 = input.LA(1);

            if ( (LA70_0==AS) ) {
                alt70=1;
            }
            switch (alt70) {
                case 1 :
                    // XQueryParser.g:482:50: p_TypeDeclaration
                    {
                    pushFollow(FOLLOW_p_TypeDeclaration_in_p_TumblingWindowClause4416);
                    p_TypeDeclaration156=p_TypeDeclaration();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, p_TypeDeclaration156.getTree());

                    }
                    break;

            }

            IN157=(CommonToken)match(input,IN,FOLLOW_IN_in_p_TumblingWindowClause4419); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            IN157_tree = (XQDTCommonTree)adaptor.create(IN157);
            adaptor.addChild(root_0, IN157_tree);
            }
            pushFollow(FOLLOW_p_ExprSingle_in_p_TumblingWindowClause4421);
            p_ExprSingle158=p_ExprSingle();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, p_ExprSingle158.getTree());
            pushFollow(FOLLOW_p_WindowStartCondition_in_p_TumblingWindowClause4423);
            p_WindowStartCondition159=p_WindowStartCondition();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, p_WindowStartCondition159.getTree());
            // XQueryParser.g:482:108: ( p_WindowEndCondition )?
            int alt71=2;
            int LA71_0 = input.LA(1);

            if ( (LA71_0==END||LA71_0==ONLY) ) {
                alt71=1;
            }
            switch (alt71) {
                case 1 :
                    // XQueryParser.g:482:108: p_WindowEndCondition
                    {
                    pushFollow(FOLLOW_p_WindowEndCondition_in_p_TumblingWindowClause4425);
                    p_WindowEndCondition160=p_WindowEndCondition();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, p_WindowEndCondition160.getTree());

                    }
                    break;

            }

            if ( state.backtracking==0 ) {
              ak(list_k);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (XQDTCommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (XQDTCommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "p_TumblingWindowClause"

    public static class p_SlidingWindowClause_return extends ParserRuleReturnScope {
        XQDTCommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "p_SlidingWindowClause"
    // XQueryParser.g:486:1: p_SlidingWindowClause : k+= SLIDING k+= WINDOW DOLLAR p_VarName ( p_TypeDeclaration )? IN p_ExprSingle p_WindowStartCondition ( p_WindowEndCondition )? ;
    public final XQueryParser.p_SlidingWindowClause_return p_SlidingWindowClause() throws RecognitionException {
        XQueryParser.p_SlidingWindowClause_return retval = new XQueryParser.p_SlidingWindowClause_return();
        retval.start = input.LT(1);

        XQDTCommonTree root_0 = null;

        CommonToken DOLLAR161=null;
        CommonToken IN164=null;
        CommonToken k=null;
        List list_k=null;
        XQueryParser.p_VarName_return p_VarName162 = null;

        XQueryParser.p_TypeDeclaration_return p_TypeDeclaration163 = null;

        XQueryParser.p_ExprSingle_return p_ExprSingle165 = null;

        XQueryParser.p_WindowStartCondition_return p_WindowStartCondition166 = null;

        XQueryParser.p_WindowEndCondition_return p_WindowEndCondition167 = null;


        XQDTCommonTree DOLLAR161_tree=null;
        XQDTCommonTree IN164_tree=null;
        XQDTCommonTree k_tree=null;

        try {
            // XQueryParser.g:487:9: (k+= SLIDING k+= WINDOW DOLLAR p_VarName ( p_TypeDeclaration )? IN p_ExprSingle p_WindowStartCondition ( p_WindowEndCondition )? )
            // XQueryParser.g:487:11: k+= SLIDING k+= WINDOW DOLLAR p_VarName ( p_TypeDeclaration )? IN p_ExprSingle p_WindowStartCondition ( p_WindowEndCondition )?
            {
            root_0 = (XQDTCommonTree)adaptor.nil();

            k=(CommonToken)match(input,SLIDING,FOLLOW_SLIDING_in_p_SlidingWindowClause4456); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            k_tree = (XQDTCommonTree)adaptor.create(k);
            adaptor.addChild(root_0, k_tree);
            }
            if (list_k==null) list_k=new ArrayList();
            list_k.add(k);

            k=(CommonToken)match(input,WINDOW,FOLLOW_WINDOW_in_p_SlidingWindowClause4460); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            k_tree = (XQDTCommonTree)adaptor.create(k);
            adaptor.addChild(root_0, k_tree);
            }
            if (list_k==null) list_k=new ArrayList();
            list_k.add(k);

            DOLLAR161=(CommonToken)match(input,DOLLAR,FOLLOW_DOLLAR_in_p_SlidingWindowClause4462); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            DOLLAR161_tree = (XQDTCommonTree)adaptor.create(DOLLAR161);
            adaptor.addChild(root_0, DOLLAR161_tree);
            }
            pushFollow(FOLLOW_p_VarName_in_p_SlidingWindowClause4464);
            p_VarName162=p_VarName();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, p_VarName162.getTree());
            // XQueryParser.g:487:49: ( p_TypeDeclaration )?
            int alt72=2;
            int LA72_0 = input.LA(1);

            if ( (LA72_0==AS) ) {
                alt72=1;
            }
            switch (alt72) {
                case 1 :
                    // XQueryParser.g:487:49: p_TypeDeclaration
                    {
                    pushFollow(FOLLOW_p_TypeDeclaration_in_p_SlidingWindowClause4466);
                    p_TypeDeclaration163=p_TypeDeclaration();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, p_TypeDeclaration163.getTree());

                    }
                    break;

            }

            IN164=(CommonToken)match(input,IN,FOLLOW_IN_in_p_SlidingWindowClause4469); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            IN164_tree = (XQDTCommonTree)adaptor.create(IN164);
            adaptor.addChild(root_0, IN164_tree);
            }
            pushFollow(FOLLOW_p_ExprSingle_in_p_SlidingWindowClause4471);
            p_ExprSingle165=p_ExprSingle();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, p_ExprSingle165.getTree());
            pushFollow(FOLLOW_p_WindowStartCondition_in_p_SlidingWindowClause4473);
            p_WindowStartCondition166=p_WindowStartCondition();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, p_WindowStartCondition166.getTree());
            // XQueryParser.g:487:107: ( p_WindowEndCondition )?
            int alt73=2;
            int LA73_0 = input.LA(1);

            if ( (LA73_0==END||LA73_0==ONLY) ) {
                alt73=1;
            }
            switch (alt73) {
                case 1 :
                    // XQueryParser.g:487:107: p_WindowEndCondition
                    {
                    pushFollow(FOLLOW_p_WindowEndCondition_in_p_SlidingWindowClause4475);
                    p_WindowEndCondition167=p_WindowEndCondition();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, p_WindowEndCondition167.getTree());

                    }
                    break;

            }

            if ( state.backtracking==0 ) {
              ak(list_k);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (XQDTCommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (XQDTCommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "p_SlidingWindowClause"

    public static class p_WindowStartCondition_return extends ParserRuleReturnScope {
        XQDTCommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "p_WindowStartCondition"
    // XQueryParser.g:491:1: p_WindowStartCondition : k+= START p_WindowVars k+= WHEN p_ExprSingle ;
    public final XQueryParser.p_WindowStartCondition_return p_WindowStartCondition() throws RecognitionException {
        XQueryParser.p_WindowStartCondition_return retval = new XQueryParser.p_WindowStartCondition_return();
        retval.start = input.LT(1);

        XQDTCommonTree root_0 = null;

        CommonToken k=null;
        List list_k=null;
        XQueryParser.p_WindowVars_return p_WindowVars168 = null;

        XQueryParser.p_ExprSingle_return p_ExprSingle169 = null;


        XQDTCommonTree k_tree=null;

        try {
            // XQueryParser.g:492:9: (k+= START p_WindowVars k+= WHEN p_ExprSingle )
            // XQueryParser.g:492:11: k+= START p_WindowVars k+= WHEN p_ExprSingle
            {
            root_0 = (XQDTCommonTree)adaptor.nil();

            k=(CommonToken)match(input,START,FOLLOW_START_in_p_WindowStartCondition4506); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            k_tree = (XQDTCommonTree)adaptor.create(k);
            adaptor.addChild(root_0, k_tree);
            }
            if (list_k==null) list_k=new ArrayList();
            list_k.add(k);

            pushFollow(FOLLOW_p_WindowVars_in_p_WindowStartCondition4508);
            p_WindowVars168=p_WindowVars();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, p_WindowVars168.getTree());
            k=(CommonToken)match(input,WHEN,FOLLOW_WHEN_in_p_WindowStartCondition4512); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            k_tree = (XQDTCommonTree)adaptor.create(k);
            adaptor.addChild(root_0, k_tree);
            }
            if (list_k==null) list_k=new ArrayList();
            list_k.add(k);

            pushFollow(FOLLOW_p_ExprSingle_in_p_WindowStartCondition4514);
            p_ExprSingle169=p_ExprSingle();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, p_ExprSingle169.getTree());
            if ( state.backtracking==0 ) {
              ak(list_k);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (XQDTCommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (XQDTCommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "p_WindowStartCondition"

    public static class p_WindowEndCondition_return extends ParserRuleReturnScope {
        XQDTCommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "p_WindowEndCondition"
    // XQueryParser.g:496:1: p_WindowEndCondition : (k+= ONLY )? k+= END p_WindowVars k+= WHEN p_ExprSingle ;
    public final XQueryParser.p_WindowEndCondition_return p_WindowEndCondition() throws RecognitionException {
        XQueryParser.p_WindowEndCondition_return retval = new XQueryParser.p_WindowEndCondition_return();
        retval.start = input.LT(1);

        XQDTCommonTree root_0 = null;

        CommonToken k=null;
        List list_k=null;
        XQueryParser.p_WindowVars_return p_WindowVars170 = null;

        XQueryParser.p_ExprSingle_return p_ExprSingle171 = null;


        XQDTCommonTree k_tree=null;

        try {
            // XQueryParser.g:497:9: ( (k+= ONLY )? k+= END p_WindowVars k+= WHEN p_ExprSingle )
            // XQueryParser.g:497:11: (k+= ONLY )? k+= END p_WindowVars k+= WHEN p_ExprSingle
            {
            root_0 = (XQDTCommonTree)adaptor.nil();

            // XQueryParser.g:497:12: (k+= ONLY )?
            int alt74=2;
            int LA74_0 = input.LA(1);

            if ( (LA74_0==ONLY) ) {
                alt74=1;
            }
            switch (alt74) {
                case 1 :
                    // XQueryParser.g:497:12: k+= ONLY
                    {
                    k=(CommonToken)match(input,ONLY,FOLLOW_ONLY_in_p_WindowEndCondition4544); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    k_tree = (XQDTCommonTree)adaptor.create(k);
                    adaptor.addChild(root_0, k_tree);
                    }
                    if (list_k==null) list_k=new ArrayList();
                    list_k.add(k);


                    }
                    break;

            }

            k=(CommonToken)match(input,END,FOLLOW_END_in_p_WindowEndCondition4549); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            k_tree = (XQDTCommonTree)adaptor.create(k);
            adaptor.addChild(root_0, k_tree);
            }
            if (list_k==null) list_k=new ArrayList();
            list_k.add(k);

            pushFollow(FOLLOW_p_WindowVars_in_p_WindowEndCondition4551);
            p_WindowVars170=p_WindowVars();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, p_WindowVars170.getTree());
            k=(CommonToken)match(input,WHEN,FOLLOW_WHEN_in_p_WindowEndCondition4555); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            k_tree = (XQDTCommonTree)adaptor.create(k);
            adaptor.addChild(root_0, k_tree);
            }
            if (list_k==null) list_k=new ArrayList();
            list_k.add(k);

            pushFollow(FOLLOW_p_ExprSingle_in_p_WindowEndCondition4557);
            p_ExprSingle171=p_ExprSingle();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, p_ExprSingle171.getTree());
            if ( state.backtracking==0 ) {
              ak(list_k);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (XQDTCommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (XQDTCommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "p_WindowEndCondition"

    public static class p_WindowVars_return extends ParserRuleReturnScope {
        XQDTCommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "p_WindowVars"
    // XQueryParser.g:501:1: p_WindowVars : ( DOLLAR p_QName )? ( p_PositionalVar )? (k+= PREVIOUS DOLLAR p_QName )? (k+= NEXT DOLLAR p_QName )? ;
    public final XQueryParser.p_WindowVars_return p_WindowVars() throws RecognitionException {
        XQueryParser.p_WindowVars_return retval = new XQueryParser.p_WindowVars_return();
        retval.start = input.LT(1);

        XQDTCommonTree root_0 = null;

        CommonToken DOLLAR172=null;
        CommonToken DOLLAR175=null;
        CommonToken DOLLAR177=null;
        CommonToken k=null;
        List list_k=null;
        XQueryParser.p_QName_return p_QName173 = null;

        XQueryParser.p_PositionalVar_return p_PositionalVar174 = null;

        XQueryParser.p_QName_return p_QName176 = null;

        XQueryParser.p_QName_return p_QName178 = null;


        XQDTCommonTree DOLLAR172_tree=null;
        XQDTCommonTree DOLLAR175_tree=null;
        XQDTCommonTree DOLLAR177_tree=null;
        XQDTCommonTree k_tree=null;

        try {
            // XQueryParser.g:502:9: ( ( DOLLAR p_QName )? ( p_PositionalVar )? (k+= PREVIOUS DOLLAR p_QName )? (k+= NEXT DOLLAR p_QName )? )
            // XQueryParser.g:502:11: ( DOLLAR p_QName )? ( p_PositionalVar )? (k+= PREVIOUS DOLLAR p_QName )? (k+= NEXT DOLLAR p_QName )?
            {
            root_0 = (XQDTCommonTree)adaptor.nil();

            // XQueryParser.g:502:11: ( DOLLAR p_QName )?
            int alt75=2;
            int LA75_0 = input.LA(1);

            if ( (LA75_0==DOLLAR) ) {
                alt75=1;
            }
            switch (alt75) {
                case 1 :
                    // XQueryParser.g:502:12: DOLLAR p_QName
                    {
                    DOLLAR172=(CommonToken)match(input,DOLLAR,FOLLOW_DOLLAR_in_p_WindowVars4586); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    DOLLAR172_tree = (XQDTCommonTree)adaptor.create(DOLLAR172);
                    adaptor.addChild(root_0, DOLLAR172_tree);
                    }
                    pushFollow(FOLLOW_p_QName_in_p_WindowVars4588);
                    p_QName173=p_QName();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, p_QName173.getTree());

                    }
                    break;

            }

            // XQueryParser.g:502:29: ( p_PositionalVar )?
            int alt76=2;
            int LA76_0 = input.LA(1);

            if ( (LA76_0==AT) ) {
                alt76=1;
            }
            switch (alt76) {
                case 1 :
                    // XQueryParser.g:502:29: p_PositionalVar
                    {
                    pushFollow(FOLLOW_p_PositionalVar_in_p_WindowVars4592);
                    p_PositionalVar174=p_PositionalVar();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, p_PositionalVar174.getTree());

                    }
                    break;

            }

            // XQueryParser.g:502:46: (k+= PREVIOUS DOLLAR p_QName )?
            int alt77=2;
            int LA77_0 = input.LA(1);

            if ( (LA77_0==PREVIOUS) ) {
                alt77=1;
            }
            switch (alt77) {
                case 1 :
                    // XQueryParser.g:502:47: k+= PREVIOUS DOLLAR p_QName
                    {
                    k=(CommonToken)match(input,PREVIOUS,FOLLOW_PREVIOUS_in_p_WindowVars4598); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    k_tree = (XQDTCommonTree)adaptor.create(k);
                    adaptor.addChild(root_0, k_tree);
                    }
                    if (list_k==null) list_k=new ArrayList();
                    list_k.add(k);

                    DOLLAR175=(CommonToken)match(input,DOLLAR,FOLLOW_DOLLAR_in_p_WindowVars4600); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    DOLLAR175_tree = (XQDTCommonTree)adaptor.create(DOLLAR175);
                    adaptor.addChild(root_0, DOLLAR175_tree);
                    }
                    pushFollow(FOLLOW_p_QName_in_p_WindowVars4602);
                    p_QName176=p_QName();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, p_QName176.getTree());

                    }
                    break;

            }

            // XQueryParser.g:502:76: (k+= NEXT DOLLAR p_QName )?
            int alt78=2;
            int LA78_0 = input.LA(1);

            if ( (LA78_0==NEXT) ) {
                alt78=1;
            }
            switch (alt78) {
                case 1 :
                    // XQueryParser.g:502:77: k+= NEXT DOLLAR p_QName
                    {
                    k=(CommonToken)match(input,NEXT,FOLLOW_NEXT_in_p_WindowVars4609); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    k_tree = (XQDTCommonTree)adaptor.create(k);
                    adaptor.addChild(root_0, k_tree);
                    }
                    if (list_k==null) list_k=new ArrayList();
                    list_k.add(k);

                    DOLLAR177=(CommonToken)match(input,DOLLAR,FOLLOW_DOLLAR_in_p_WindowVars4611); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    DOLLAR177_tree = (XQDTCommonTree)adaptor.create(DOLLAR177);
                    adaptor.addChild(root_0, DOLLAR177_tree);
                    }
                    pushFollow(FOLLOW_p_QName_in_p_WindowVars4613);
                    p_QName178=p_QName();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, p_QName178.getTree());

                    }
                    break;

            }

            if ( state.backtracking==0 ) {
              ak(list_k);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (XQDTCommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (XQDTCommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "p_WindowVars"

    public static class p_CountClause_return extends ParserRuleReturnScope {
        XQDTCommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "p_CountClause"
    // XQueryParser.g:515:1: p_CountClause : kc+= COUNT DOLLAR p_VarName ;
    public final XQueryParser.p_CountClause_return p_CountClause() throws RecognitionException {
        XQueryParser.p_CountClause_return retval = new XQueryParser.p_CountClause_return();
        retval.start = input.LT(1);

        XQDTCommonTree root_0 = null;

        CommonToken DOLLAR179=null;
        CommonToken kc=null;
        List list_kc=null;
        XQueryParser.p_VarName_return p_VarName180 = null;


        XQDTCommonTree DOLLAR179_tree=null;
        XQDTCommonTree kc_tree=null;

        try {
            // XQueryParser.g:516:9: (kc+= COUNT DOLLAR p_VarName )
            // XQueryParser.g:516:11: kc+= COUNT DOLLAR p_VarName
            {
            root_0 = (XQDTCommonTree)adaptor.nil();

            kc=(CommonToken)match(input,COUNT,FOLLOW_COUNT_in_p_CountClause4654); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            kc_tree = (XQDTCommonTree)adaptor.create(kc);
            adaptor.addChild(root_0, kc_tree);
            }
            if (list_kc==null) list_kc=new ArrayList();
            list_kc.add(kc);

            if ( state.backtracking==0 ) {
              ak(list_kc);
            }
            DOLLAR179=(CommonToken)match(input,DOLLAR,FOLLOW_DOLLAR_in_p_CountClause4658); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            DOLLAR179_tree = (XQDTCommonTree)adaptor.create(DOLLAR179);
            adaptor.addChild(root_0, DOLLAR179_tree);
            }
            pushFollow(FOLLOW_p_VarName_in_p_CountClause4660);
            p_VarName180=p_VarName();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, p_VarName180.getTree());

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (XQDTCommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (XQDTCommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "p_CountClause"

    public static class p_WhereClause_return extends ParserRuleReturnScope {
        XQDTCommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "p_WhereClause"
    // XQueryParser.g:520:1: p_WhereClause : kw+= WHERE p_ExprSingle ;
    public final XQueryParser.p_WhereClause_return p_WhereClause() throws RecognitionException {
        XQueryParser.p_WhereClause_return retval = new XQueryParser.p_WhereClause_return();
        retval.start = input.LT(1);

        XQDTCommonTree root_0 = null;

        CommonToken kw=null;
        List list_kw=null;
        XQueryParser.p_ExprSingle_return p_ExprSingle181 = null;


        XQDTCommonTree kw_tree=null;

        try {
            // XQueryParser.g:521:9: (kw+= WHERE p_ExprSingle )
            // XQueryParser.g:521:11: kw+= WHERE p_ExprSingle
            {
            root_0 = (XQDTCommonTree)adaptor.nil();

            kw=(CommonToken)match(input,WHERE,FOLLOW_WHERE_in_p_WhereClause4696); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            kw_tree = (XQDTCommonTree)adaptor.create(kw);
            adaptor.addChild(root_0, kw_tree);
            }
            if (list_kw==null) list_kw=new ArrayList();
            list_kw.add(kw);

            if ( state.backtracking==0 ) {
              ak(list_kw);
            }
            pushFollow(FOLLOW_p_ExprSingle_in_p_WhereClause4700);
            p_ExprSingle181=p_ExprSingle();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, p_ExprSingle181.getTree());

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (XQDTCommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (XQDTCommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "p_WhereClause"

    public static class p_GroupByClause_return extends ParserRuleReturnScope {
        XQDTCommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "p_GroupByClause"
    // XQueryParser.g:525:1: p_GroupByClause : k+= GROUP k+= BY p_GroupingSpecList ;
    public final XQueryParser.p_GroupByClause_return p_GroupByClause() throws RecognitionException {
        XQueryParser.p_GroupByClause_return retval = new XQueryParser.p_GroupByClause_return();
        retval.start = input.LT(1);

        XQDTCommonTree root_0 = null;

        CommonToken k=null;
        List list_k=null;
        XQueryParser.p_GroupingSpecList_return p_GroupingSpecList182 = null;


        XQDTCommonTree k_tree=null;

        try {
            // XQueryParser.g:526:9: (k+= GROUP k+= BY p_GroupingSpecList )
            // XQueryParser.g:526:13: k+= GROUP k+= BY p_GroupingSpecList
            {
            root_0 = (XQDTCommonTree)adaptor.nil();

            k=(CommonToken)match(input,GROUP,FOLLOW_GROUP_in_p_GroupByClause4730); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            k_tree = (XQDTCommonTree)adaptor.create(k);
            adaptor.addChild(root_0, k_tree);
            }
            if (list_k==null) list_k=new ArrayList();
            list_k.add(k);

            k=(CommonToken)match(input,BY,FOLLOW_BY_in_p_GroupByClause4734); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            k_tree = (XQDTCommonTree)adaptor.create(k);
            adaptor.addChild(root_0, k_tree);
            }
            if (list_k==null) list_k=new ArrayList();
            list_k.add(k);

            pushFollow(FOLLOW_p_GroupingSpecList_in_p_GroupByClause4736);
            p_GroupingSpecList182=p_GroupingSpecList();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, p_GroupingSpecList182.getTree());
            if ( state.backtracking==0 ) {
              ak(list_k);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (XQDTCommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (XQDTCommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "p_GroupByClause"

    public static class p_GroupingSpecList_return extends ParserRuleReturnScope {
        XQDTCommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "p_GroupingSpecList"
    // XQueryParser.g:530:1: p_GroupingSpecList : p_GroupingSpec ( COMMA p_GroupingSpec )* ;
    public final XQueryParser.p_GroupingSpecList_return p_GroupingSpecList() throws RecognitionException {
        XQueryParser.p_GroupingSpecList_return retval = new XQueryParser.p_GroupingSpecList_return();
        retval.start = input.LT(1);

        XQDTCommonTree root_0 = null;

        CommonToken COMMA184=null;
        XQueryParser.p_GroupingSpec_return p_GroupingSpec183 = null;

        XQueryParser.p_GroupingSpec_return p_GroupingSpec185 = null;


        XQDTCommonTree COMMA184_tree=null;

        try {
            // XQueryParser.g:531:9: ( p_GroupingSpec ( COMMA p_GroupingSpec )* )
            // XQueryParser.g:531:13: p_GroupingSpec ( COMMA p_GroupingSpec )*
            {
            root_0 = (XQDTCommonTree)adaptor.nil();

            pushFollow(FOLLOW_p_GroupingSpec_in_p_GroupingSpecList4766);
            p_GroupingSpec183=p_GroupingSpec();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, p_GroupingSpec183.getTree());
            // XQueryParser.g:531:28: ( COMMA p_GroupingSpec )*
            loop79:
            do {
                int alt79=2;
                int LA79_0 = input.LA(1);

                if ( (LA79_0==COMMA) ) {
                    alt79=1;
                }


                switch (alt79) {
            	case 1 :
            	    // XQueryParser.g:531:29: COMMA p_GroupingSpec
            	    {
            	    COMMA184=(CommonToken)match(input,COMMA,FOLLOW_COMMA_in_p_GroupingSpecList4769); if (state.failed) return retval;
            	    if ( state.backtracking==0 ) {
            	    COMMA184_tree = (XQDTCommonTree)adaptor.create(COMMA184);
            	    adaptor.addChild(root_0, COMMA184_tree);
            	    }
            	    pushFollow(FOLLOW_p_GroupingSpec_in_p_GroupingSpecList4771);
            	    p_GroupingSpec185=p_GroupingSpec();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, p_GroupingSpec185.getTree());

            	    }
            	    break;

            	default :
            	    break loop79;
                }
            } while (true);


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (XQDTCommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (XQDTCommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "p_GroupingSpecList"

    public static class p_GroupingSpec_return extends ParserRuleReturnScope {
        XQDTCommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "p_GroupingSpec"
    // XQueryParser.g:535:1: p_GroupingSpec : DOLLAR p_VarName (kc= COLLATION p_StringLiteral )? ;
    public final XQueryParser.p_GroupingSpec_return p_GroupingSpec() throws RecognitionException {
        XQueryParser.p_GroupingSpec_return retval = new XQueryParser.p_GroupingSpec_return();
        retval.start = input.LT(1);

        XQDTCommonTree root_0 = null;

        CommonToken kc=null;
        CommonToken DOLLAR186=null;
        XQueryParser.p_VarName_return p_VarName187 = null;

        XQueryParser.p_StringLiteral_return p_StringLiteral188 = null;


        XQDTCommonTree kc_tree=null;
        XQDTCommonTree DOLLAR186_tree=null;

        try {
            // XQueryParser.g:536:9: ( DOLLAR p_VarName (kc= COLLATION p_StringLiteral )? )
            // XQueryParser.g:536:13: DOLLAR p_VarName (kc= COLLATION p_StringLiteral )?
            {
            root_0 = (XQDTCommonTree)adaptor.nil();

            DOLLAR186=(CommonToken)match(input,DOLLAR,FOLLOW_DOLLAR_in_p_GroupingSpec4801); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            DOLLAR186_tree = (XQDTCommonTree)adaptor.create(DOLLAR186);
            adaptor.addChild(root_0, DOLLAR186_tree);
            }
            pushFollow(FOLLOW_p_VarName_in_p_GroupingSpec4803);
            p_VarName187=p_VarName();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, p_VarName187.getTree());
            // XQueryParser.g:536:30: (kc= COLLATION p_StringLiteral )?
            int alt80=2;
            int LA80_0 = input.LA(1);

            if ( (LA80_0==COLLATION) ) {
                alt80=1;
            }
            switch (alt80) {
                case 1 :
                    // XQueryParser.g:536:31: kc= COLLATION p_StringLiteral
                    {
                    kc=(CommonToken)match(input,COLLATION,FOLLOW_COLLATION_in_p_GroupingSpec4808); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    kc_tree = (XQDTCommonTree)adaptor.create(kc);
                    adaptor.addChild(root_0, kc_tree);
                    }
                    pushFollow(FOLLOW_p_StringLiteral_in_p_GroupingSpec4810);
                    p_StringLiteral188=p_StringLiteral();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, p_StringLiteral188.getTree());
                    if ( state.backtracking==0 ) {
                      ak(kc);
                    }

                    }
                    break;

            }


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (XQDTCommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (XQDTCommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "p_GroupingSpec"

    public static class p_OrderByClause_return extends ParserRuleReturnScope {
        XQDTCommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "p_OrderByClause"
    // XQueryParser.g:540:1: p_OrderByClause : ( (k+= ORDER k+= BY ) | (k+= STABLE k+= ORDER k+= BY ) ) p_OrderSpecList ;
    public final XQueryParser.p_OrderByClause_return p_OrderByClause() throws RecognitionException {
        XQueryParser.p_OrderByClause_return retval = new XQueryParser.p_OrderByClause_return();
        retval.start = input.LT(1);

        XQDTCommonTree root_0 = null;

        CommonToken k=null;
        List list_k=null;
        XQueryParser.p_OrderSpecList_return p_OrderSpecList189 = null;


        XQDTCommonTree k_tree=null;

        try {
            // XQueryParser.g:541:9: ( ( (k+= ORDER k+= BY ) | (k+= STABLE k+= ORDER k+= BY ) ) p_OrderSpecList )
            // XQueryParser.g:541:13: ( (k+= ORDER k+= BY ) | (k+= STABLE k+= ORDER k+= BY ) ) p_OrderSpecList
            {
            root_0 = (XQDTCommonTree)adaptor.nil();

            // XQueryParser.g:541:13: ( (k+= ORDER k+= BY ) | (k+= STABLE k+= ORDER k+= BY ) )
            int alt81=2;
            int LA81_0 = input.LA(1);

            if ( (LA81_0==ORDER) ) {
                alt81=1;
            }
            else if ( (LA81_0==STABLE) ) {
                alt81=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 81, 0, input);

                throw nvae;
            }
            switch (alt81) {
                case 1 :
                    // XQueryParser.g:541:14: (k+= ORDER k+= BY )
                    {
                    // XQueryParser.g:541:14: (k+= ORDER k+= BY )
                    // XQueryParser.g:541:15: k+= ORDER k+= BY
                    {
                    k=(CommonToken)match(input,ORDER,FOLLOW_ORDER_in_p_OrderByClause4846); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    k_tree = (XQDTCommonTree)adaptor.create(k);
                    adaptor.addChild(root_0, k_tree);
                    }
                    if (list_k==null) list_k=new ArrayList();
                    list_k.add(k);

                    k=(CommonToken)match(input,BY,FOLLOW_BY_in_p_OrderByClause4850); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    k_tree = (XQDTCommonTree)adaptor.create(k);
                    adaptor.addChild(root_0, k_tree);
                    }
                    if (list_k==null) list_k=new ArrayList();
                    list_k.add(k);


                    }


                    }
                    break;
                case 2 :
                    // XQueryParser.g:541:33: (k+= STABLE k+= ORDER k+= BY )
                    {
                    // XQueryParser.g:541:33: (k+= STABLE k+= ORDER k+= BY )
                    // XQueryParser.g:541:34: k+= STABLE k+= ORDER k+= BY
                    {
                    k=(CommonToken)match(input,STABLE,FOLLOW_STABLE_in_p_OrderByClause4858); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    k_tree = (XQDTCommonTree)adaptor.create(k);
                    adaptor.addChild(root_0, k_tree);
                    }
                    if (list_k==null) list_k=new ArrayList();
                    list_k.add(k);

                    k=(CommonToken)match(input,ORDER,FOLLOW_ORDER_in_p_OrderByClause4862); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    k_tree = (XQDTCommonTree)adaptor.create(k);
                    adaptor.addChild(root_0, k_tree);
                    }
                    if (list_k==null) list_k=new ArrayList();
                    list_k.add(k);

                    k=(CommonToken)match(input,BY,FOLLOW_BY_in_p_OrderByClause4866); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    k_tree = (XQDTCommonTree)adaptor.create(k);
                    adaptor.addChild(root_0, k_tree);
                    }
                    if (list_k==null) list_k=new ArrayList();
                    list_k.add(k);


                    }


                    }
                    break;

            }

            pushFollow(FOLLOW_p_OrderSpecList_in_p_OrderByClause4870);
            p_OrderSpecList189=p_OrderSpecList();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, p_OrderSpecList189.getTree());
            if ( state.backtracking==0 ) {
              ak(list_k);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (XQDTCommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (XQDTCommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "p_OrderByClause"

    public static class p_OrderSpecList_return extends ParserRuleReturnScope {
        XQDTCommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "p_OrderSpecList"
    // XQueryParser.g:545:1: p_OrderSpecList : p_OrderSpec ( COMMA p_OrderSpec )* ;
    public final XQueryParser.p_OrderSpecList_return p_OrderSpecList() throws RecognitionException {
        XQueryParser.p_OrderSpecList_return retval = new XQueryParser.p_OrderSpecList_return();
        retval.start = input.LT(1);

        XQDTCommonTree root_0 = null;

        CommonToken COMMA191=null;
        XQueryParser.p_OrderSpec_return p_OrderSpec190 = null;

        XQueryParser.p_OrderSpec_return p_OrderSpec192 = null;


        XQDTCommonTree COMMA191_tree=null;

        try {
            // XQueryParser.g:546:9: ( p_OrderSpec ( COMMA p_OrderSpec )* )
            // XQueryParser.g:546:13: p_OrderSpec ( COMMA p_OrderSpec )*
            {
            root_0 = (XQDTCommonTree)adaptor.nil();

            pushFollow(FOLLOW_p_OrderSpec_in_p_OrderSpecList4900);
            p_OrderSpec190=p_OrderSpec();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, p_OrderSpec190.getTree());
            // XQueryParser.g:546:25: ( COMMA p_OrderSpec )*
            loop82:
            do {
                int alt82=2;
                int LA82_0 = input.LA(1);

                if ( (LA82_0==COMMA) ) {
                    alt82=1;
                }


                switch (alt82) {
            	case 1 :
            	    // XQueryParser.g:546:26: COMMA p_OrderSpec
            	    {
            	    COMMA191=(CommonToken)match(input,COMMA,FOLLOW_COMMA_in_p_OrderSpecList4903); if (state.failed) return retval;
            	    if ( state.backtracking==0 ) {
            	    COMMA191_tree = (XQDTCommonTree)adaptor.create(COMMA191);
            	    adaptor.addChild(root_0, COMMA191_tree);
            	    }
            	    pushFollow(FOLLOW_p_OrderSpec_in_p_OrderSpecList4905);
            	    p_OrderSpec192=p_OrderSpec();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, p_OrderSpec192.getTree());

            	    }
            	    break;

            	default :
            	    break loop82;
                }
            } while (true);


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (XQDTCommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (XQDTCommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "p_OrderSpecList"

    public static class p_OrderSpec_return extends ParserRuleReturnScope {
        XQDTCommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "p_OrderSpec"
    // XQueryParser.g:550:1: p_OrderSpec : p_ExprSingle p_OrderModifier ;
    public final XQueryParser.p_OrderSpec_return p_OrderSpec() throws RecognitionException {
        XQueryParser.p_OrderSpec_return retval = new XQueryParser.p_OrderSpec_return();
        retval.start = input.LT(1);

        XQDTCommonTree root_0 = null;

        XQueryParser.p_ExprSingle_return p_ExprSingle193 = null;

        XQueryParser.p_OrderModifier_return p_OrderModifier194 = null;



        try {
            // XQueryParser.g:551:9: ( p_ExprSingle p_OrderModifier )
            // XQueryParser.g:551:13: p_ExprSingle p_OrderModifier
            {
            root_0 = (XQDTCommonTree)adaptor.nil();

            pushFollow(FOLLOW_p_ExprSingle_in_p_OrderSpec4935);
            p_ExprSingle193=p_ExprSingle();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, p_ExprSingle193.getTree());
            pushFollow(FOLLOW_p_OrderModifier_in_p_OrderSpec4937);
            p_OrderModifier194=p_OrderModifier();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, p_OrderModifier194.getTree());

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (XQDTCommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (XQDTCommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "p_OrderSpec"

    public static class p_OrderModifier_return extends ParserRuleReturnScope {
        XQDTCommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "p_OrderModifier"
    // XQueryParser.g:555:1: p_OrderModifier : (ka= ASCENDING | k+= DESCENDING )? (k+= EMPTY (k+= GREATEST | k+= LEAST ) )? (k+= COLLATION p_StringLiteral )? ;
    public final XQueryParser.p_OrderModifier_return p_OrderModifier() throws RecognitionException {
        XQueryParser.p_OrderModifier_return retval = new XQueryParser.p_OrderModifier_return();
        retval.start = input.LT(1);

        XQDTCommonTree root_0 = null;

        CommonToken ka=null;
        CommonToken k=null;
        List list_k=null;
        XQueryParser.p_StringLiteral_return p_StringLiteral195 = null;


        XQDTCommonTree ka_tree=null;
        XQDTCommonTree k_tree=null;

        try {
            // XQueryParser.g:556:9: ( (ka= ASCENDING | k+= DESCENDING )? (k+= EMPTY (k+= GREATEST | k+= LEAST ) )? (k+= COLLATION p_StringLiteral )? )
            // XQueryParser.g:556:11: (ka= ASCENDING | k+= DESCENDING )? (k+= EMPTY (k+= GREATEST | k+= LEAST ) )? (k+= COLLATION p_StringLiteral )?
            {
            root_0 = (XQDTCommonTree)adaptor.nil();

            // XQueryParser.g:556:11: (ka= ASCENDING | k+= DESCENDING )?
            int alt83=3;
            int LA83_0 = input.LA(1);

            if ( (LA83_0==ASCENDING) ) {
                alt83=1;
            }
            else if ( (LA83_0==DESCENDING) ) {
                alt83=2;
            }
            switch (alt83) {
                case 1 :
                    // XQueryParser.g:556:12: ka= ASCENDING
                    {
                    ka=(CommonToken)match(input,ASCENDING,FOLLOW_ASCENDING_in_p_OrderModifier4966); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    ka_tree = (XQDTCommonTree)adaptor.create(ka);
                    adaptor.addChild(root_0, ka_tree);
                    }

                    }
                    break;
                case 2 :
                    // XQueryParser.g:556:27: k+= DESCENDING
                    {
                    k=(CommonToken)match(input,DESCENDING,FOLLOW_DESCENDING_in_p_OrderModifier4972); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    k_tree = (XQDTCommonTree)adaptor.create(k);
                    adaptor.addChild(root_0, k_tree);
                    }
                    if (list_k==null) list_k=new ArrayList();
                    list_k.add(k);


                    }
                    break;

            }

            // XQueryParser.g:556:43: (k+= EMPTY (k+= GREATEST | k+= LEAST ) )?
            int alt85=2;
            int LA85_0 = input.LA(1);

            if ( (LA85_0==EMPTY) ) {
                alt85=1;
            }
            switch (alt85) {
                case 1 :
                    // XQueryParser.g:556:44: k+= EMPTY (k+= GREATEST | k+= LEAST )
                    {
                    k=(CommonToken)match(input,EMPTY,FOLLOW_EMPTY_in_p_OrderModifier4979); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    k_tree = (XQDTCommonTree)adaptor.create(k);
                    adaptor.addChild(root_0, k_tree);
                    }
                    if (list_k==null) list_k=new ArrayList();
                    list_k.add(k);

                    // XQueryParser.g:556:53: (k+= GREATEST | k+= LEAST )
                    int alt84=2;
                    int LA84_0 = input.LA(1);

                    if ( (LA84_0==GREATEST) ) {
                        alt84=1;
                    }
                    else if ( (LA84_0==LEAST) ) {
                        alt84=2;
                    }
                    else {
                        if (state.backtracking>0) {state.failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("", 84, 0, input);

                        throw nvae;
                    }
                    switch (alt84) {
                        case 1 :
                            // XQueryParser.g:556:54: k+= GREATEST
                            {
                            k=(CommonToken)match(input,GREATEST,FOLLOW_GREATEST_in_p_OrderModifier4984); if (state.failed) return retval;
                            if ( state.backtracking==0 ) {
                            k_tree = (XQDTCommonTree)adaptor.create(k);
                            adaptor.addChild(root_0, k_tree);
                            }
                            if (list_k==null) list_k=new ArrayList();
                            list_k.add(k);


                            }
                            break;
                        case 2 :
                            // XQueryParser.g:556:68: k+= LEAST
                            {
                            k=(CommonToken)match(input,LEAST,FOLLOW_LEAST_in_p_OrderModifier4990); if (state.failed) return retval;
                            if ( state.backtracking==0 ) {
                            k_tree = (XQDTCommonTree)adaptor.create(k);
                            adaptor.addChild(root_0, k_tree);
                            }
                            if (list_k==null) list_k=new ArrayList();
                            list_k.add(k);


                            }
                            break;

                    }


                    }
                    break;

            }

            // XQueryParser.g:556:80: (k+= COLLATION p_StringLiteral )?
            int alt86=2;
            int LA86_0 = input.LA(1);

            if ( (LA86_0==COLLATION) ) {
                alt86=1;
            }
            switch (alt86) {
                case 1 :
                    // XQueryParser.g:556:81: k+= COLLATION p_StringLiteral
                    {
                    k=(CommonToken)match(input,COLLATION,FOLLOW_COLLATION_in_p_OrderModifier4998); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    k_tree = (XQDTCommonTree)adaptor.create(k);
                    adaptor.addChild(root_0, k_tree);
                    }
                    if (list_k==null) list_k=new ArrayList();
                    list_k.add(k);

                    pushFollow(FOLLOW_p_StringLiteral_in_p_OrderModifier5000);
                    p_StringLiteral195=p_StringLiteral();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, p_StringLiteral195.getTree());

                    }
                    break;

            }

            if ( state.backtracking==0 ) {
              ak(list_k);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (XQDTCommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (XQDTCommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "p_OrderModifier"

    public static class p_ReturnClause_return extends ParserRuleReturnScope {
        XQDTCommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "p_ReturnClause"
    // XQueryParser.g:560:1: p_ReturnClause : kr= RETURN p_ExprSingle ;
    public final XQueryParser.p_ReturnClause_return p_ReturnClause() throws RecognitionException {
        XQueryParser.p_ReturnClause_return retval = new XQueryParser.p_ReturnClause_return();
        retval.start = input.LT(1);

        XQDTCommonTree root_0 = null;

        CommonToken kr=null;
        XQueryParser.p_ExprSingle_return p_ExprSingle196 = null;


        XQDTCommonTree kr_tree=null;

        try {
            // XQueryParser.g:561:9: (kr= RETURN p_ExprSingle )
            // XQueryParser.g:561:11: kr= RETURN p_ExprSingle
            {
            root_0 = (XQDTCommonTree)adaptor.nil();

            kr=(CommonToken)match(input,RETURN,FOLLOW_RETURN_in_p_ReturnClause5032); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            kr_tree = (XQDTCommonTree)adaptor.create(kr);
            adaptor.addChild(root_0, kr_tree);
            }
            if ( state.backtracking==0 ) {
              ak(kr);
            }
            pushFollow(FOLLOW_p_ExprSingle_in_p_ReturnClause5036);
            p_ExprSingle196=p_ExprSingle();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, p_ExprSingle196.getTree());

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (XQDTCommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (XQDTCommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "p_ReturnClause"

    public static class p_QuantifiedExpr_return extends ParserRuleReturnScope {
        XQDTCommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "p_QuantifiedExpr"
    // XQueryParser.g:565:1: p_QuantifiedExpr : (k+= SOME | k+= EVERY ) DOLLAR p_VarName ( p_TypeDeclaration )? k+= IN p_ExprSingle ( COMMA DOLLAR p_QName ( p_TypeDeclaration )? k+= IN p_ExprSingle )* k+= SATISFIES p_ExprSingle ;
    public final XQueryParser.p_QuantifiedExpr_return p_QuantifiedExpr() throws RecognitionException {
        XQueryParser.p_QuantifiedExpr_return retval = new XQueryParser.p_QuantifiedExpr_return();
        retval.start = input.LT(1);

        XQDTCommonTree root_0 = null;

        CommonToken DOLLAR197=null;
        CommonToken COMMA201=null;
        CommonToken DOLLAR202=null;
        CommonToken k=null;
        List list_k=null;
        XQueryParser.p_VarName_return p_VarName198 = null;

        XQueryParser.p_TypeDeclaration_return p_TypeDeclaration199 = null;

        XQueryParser.p_ExprSingle_return p_ExprSingle200 = null;

        XQueryParser.p_QName_return p_QName203 = null;

        XQueryParser.p_TypeDeclaration_return p_TypeDeclaration204 = null;

        XQueryParser.p_ExprSingle_return p_ExprSingle205 = null;

        XQueryParser.p_ExprSingle_return p_ExprSingle206 = null;


        XQDTCommonTree DOLLAR197_tree=null;
        XQDTCommonTree COMMA201_tree=null;
        XQDTCommonTree DOLLAR202_tree=null;
        XQDTCommonTree k_tree=null;

        try {
            // XQueryParser.g:566:9: ( (k+= SOME | k+= EVERY ) DOLLAR p_VarName ( p_TypeDeclaration )? k+= IN p_ExprSingle ( COMMA DOLLAR p_QName ( p_TypeDeclaration )? k+= IN p_ExprSingle )* k+= SATISFIES p_ExprSingle )
            // XQueryParser.g:566:13: (k+= SOME | k+= EVERY ) DOLLAR p_VarName ( p_TypeDeclaration )? k+= IN p_ExprSingle ( COMMA DOLLAR p_QName ( p_TypeDeclaration )? k+= IN p_ExprSingle )* k+= SATISFIES p_ExprSingle
            {
            root_0 = (XQDTCommonTree)adaptor.nil();

            // XQueryParser.g:566:13: (k+= SOME | k+= EVERY )
            int alt87=2;
            int LA87_0 = input.LA(1);

            if ( (LA87_0==SOME) ) {
                alt87=1;
            }
            else if ( (LA87_0==EVERY) ) {
                alt87=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 87, 0, input);

                throw nvae;
            }
            switch (alt87) {
                case 1 :
                    // XQueryParser.g:566:14: k+= SOME
                    {
                    k=(CommonToken)match(input,SOME,FOLLOW_SOME_in_p_QuantifiedExpr5067); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    k_tree = (XQDTCommonTree)adaptor.create(k);
                    adaptor.addChild(root_0, k_tree);
                    }
                    if (list_k==null) list_k=new ArrayList();
                    list_k.add(k);


                    }
                    break;
                case 2 :
                    // XQueryParser.g:566:24: k+= EVERY
                    {
                    k=(CommonToken)match(input,EVERY,FOLLOW_EVERY_in_p_QuantifiedExpr5073); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    k_tree = (XQDTCommonTree)adaptor.create(k);
                    adaptor.addChild(root_0, k_tree);
                    }
                    if (list_k==null) list_k=new ArrayList();
                    list_k.add(k);


                    }
                    break;

            }

            DOLLAR197=(CommonToken)match(input,DOLLAR,FOLLOW_DOLLAR_in_p_QuantifiedExpr5076); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            DOLLAR197_tree = (XQDTCommonTree)adaptor.create(DOLLAR197);
            adaptor.addChild(root_0, DOLLAR197_tree);
            }
            pushFollow(FOLLOW_p_VarName_in_p_QuantifiedExpr5078);
            p_VarName198=p_VarName();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, p_VarName198.getTree());
            // XQueryParser.g:566:51: ( p_TypeDeclaration )?
            int alt88=2;
            int LA88_0 = input.LA(1);

            if ( (LA88_0==AS) ) {
                alt88=1;
            }
            switch (alt88) {
                case 1 :
                    // XQueryParser.g:566:51: p_TypeDeclaration
                    {
                    pushFollow(FOLLOW_p_TypeDeclaration_in_p_QuantifiedExpr5080);
                    p_TypeDeclaration199=p_TypeDeclaration();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, p_TypeDeclaration199.getTree());

                    }
                    break;

            }

            k=(CommonToken)match(input,IN,FOLLOW_IN_in_p_QuantifiedExpr5085); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            k_tree = (XQDTCommonTree)adaptor.create(k);
            adaptor.addChild(root_0, k_tree);
            }
            if (list_k==null) list_k=new ArrayList();
            list_k.add(k);

            pushFollow(FOLLOW_p_ExprSingle_in_p_QuantifiedExpr5087);
            p_ExprSingle200=p_ExprSingle();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, p_ExprSingle200.getTree());
            // XQueryParser.g:566:89: ( COMMA DOLLAR p_QName ( p_TypeDeclaration )? k+= IN p_ExprSingle )*
            loop90:
            do {
                int alt90=2;
                int LA90_0 = input.LA(1);

                if ( (LA90_0==COMMA) ) {
                    alt90=1;
                }


                switch (alt90) {
            	case 1 :
            	    // XQueryParser.g:566:90: COMMA DOLLAR p_QName ( p_TypeDeclaration )? k+= IN p_ExprSingle
            	    {
            	    COMMA201=(CommonToken)match(input,COMMA,FOLLOW_COMMA_in_p_QuantifiedExpr5090); if (state.failed) return retval;
            	    if ( state.backtracking==0 ) {
            	    COMMA201_tree = (XQDTCommonTree)adaptor.create(COMMA201);
            	    adaptor.addChild(root_0, COMMA201_tree);
            	    }
            	    DOLLAR202=(CommonToken)match(input,DOLLAR,FOLLOW_DOLLAR_in_p_QuantifiedExpr5092); if (state.failed) return retval;
            	    if ( state.backtracking==0 ) {
            	    DOLLAR202_tree = (XQDTCommonTree)adaptor.create(DOLLAR202);
            	    adaptor.addChild(root_0, DOLLAR202_tree);
            	    }
            	    pushFollow(FOLLOW_p_QName_in_p_QuantifiedExpr5094);
            	    p_QName203=p_QName();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, p_QName203.getTree());
            	    // XQueryParser.g:566:111: ( p_TypeDeclaration )?
            	    int alt89=2;
            	    int LA89_0 = input.LA(1);

            	    if ( (LA89_0==AS) ) {
            	        alt89=1;
            	    }
            	    switch (alt89) {
            	        case 1 :
            	            // XQueryParser.g:566:111: p_TypeDeclaration
            	            {
            	            pushFollow(FOLLOW_p_TypeDeclaration_in_p_QuantifiedExpr5096);
            	            p_TypeDeclaration204=p_TypeDeclaration();

            	            state._fsp--;
            	            if (state.failed) return retval;
            	            if ( state.backtracking==0 ) adaptor.addChild(root_0, p_TypeDeclaration204.getTree());

            	            }
            	            break;

            	    }

            	    k=(CommonToken)match(input,IN,FOLLOW_IN_in_p_QuantifiedExpr5101); if (state.failed) return retval;
            	    if ( state.backtracking==0 ) {
            	    k_tree = (XQDTCommonTree)adaptor.create(k);
            	    adaptor.addChild(root_0, k_tree);
            	    }
            	    if (list_k==null) list_k=new ArrayList();
            	    list_k.add(k);

            	    pushFollow(FOLLOW_p_ExprSingle_in_p_QuantifiedExpr5103);
            	    p_ExprSingle205=p_ExprSingle();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, p_ExprSingle205.getTree());

            	    }
            	    break;

            	default :
            	    break loop90;
                }
            } while (true);

            k=(CommonToken)match(input,SATISFIES,FOLLOW_SATISFIES_in_p_QuantifiedExpr5109); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            k_tree = (XQDTCommonTree)adaptor.create(k);
            adaptor.addChild(root_0, k_tree);
            }
            if (list_k==null) list_k=new ArrayList();
            list_k.add(k);

            pushFollow(FOLLOW_p_ExprSingle_in_p_QuantifiedExpr5111);
            p_ExprSingle206=p_ExprSingle();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, p_ExprSingle206.getTree());
            if ( state.backtracking==0 ) {
              ak(list_k);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (XQDTCommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (XQDTCommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "p_QuantifiedExpr"

    public static class p_TypeswitchExpr_return extends ParserRuleReturnScope {
        XQDTCommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "p_TypeswitchExpr"
    // XQueryParser.g:570:1: p_TypeswitchExpr : k+= TYPESWITCH LPAREN pm_Expr RPAREN ( p_CaseClause )+ k+= DEFAULT ( DOLLAR p_VarName )? k+= RETURN p_ExprSingle ;
    public final XQueryParser.p_TypeswitchExpr_return p_TypeswitchExpr() throws RecognitionException {
        XQueryParser.p_TypeswitchExpr_return retval = new XQueryParser.p_TypeswitchExpr_return();
        retval.start = input.LT(1);

        XQDTCommonTree root_0 = null;

        CommonToken LPAREN207=null;
        CommonToken RPAREN209=null;
        CommonToken DOLLAR211=null;
        CommonToken k=null;
        List list_k=null;
        XQueryParser.pm_Expr_return pm_Expr208 = null;

        XQueryParser.p_CaseClause_return p_CaseClause210 = null;

        XQueryParser.p_VarName_return p_VarName212 = null;

        XQueryParser.p_ExprSingle_return p_ExprSingle213 = null;


        XQDTCommonTree LPAREN207_tree=null;
        XQDTCommonTree RPAREN209_tree=null;
        XQDTCommonTree DOLLAR211_tree=null;
        XQDTCommonTree k_tree=null;

        try {
            // XQueryParser.g:571:9: (k+= TYPESWITCH LPAREN pm_Expr RPAREN ( p_CaseClause )+ k+= DEFAULT ( DOLLAR p_VarName )? k+= RETURN p_ExprSingle )
            // XQueryParser.g:571:11: k+= TYPESWITCH LPAREN pm_Expr RPAREN ( p_CaseClause )+ k+= DEFAULT ( DOLLAR p_VarName )? k+= RETURN p_ExprSingle
            {
            root_0 = (XQDTCommonTree)adaptor.nil();

            k=(CommonToken)match(input,TYPESWITCH,FOLLOW_TYPESWITCH_in_p_TypeswitchExpr5141); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            k_tree = (XQDTCommonTree)adaptor.create(k);
            adaptor.addChild(root_0, k_tree);
            }
            if (list_k==null) list_k=new ArrayList();
            list_k.add(k);

            LPAREN207=(CommonToken)match(input,LPAREN,FOLLOW_LPAREN_in_p_TypeswitchExpr5143); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            LPAREN207_tree = (XQDTCommonTree)adaptor.create(LPAREN207);
            adaptor.addChild(root_0, LPAREN207_tree);
            }
            pushFollow(FOLLOW_pm_Expr_in_p_TypeswitchExpr5145);
            pm_Expr208=pm_Expr();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, pm_Expr208.getTree());
            RPAREN209=(CommonToken)match(input,RPAREN,FOLLOW_RPAREN_in_p_TypeswitchExpr5147); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            RPAREN209_tree = (XQDTCommonTree)adaptor.create(RPAREN209);
            adaptor.addChild(root_0, RPAREN209_tree);
            }
            // XQueryParser.g:571:47: ( p_CaseClause )+
            int cnt91=0;
            loop91:
            do {
                int alt91=2;
                int LA91_0 = input.LA(1);

                if ( (LA91_0==CASE) ) {
                    alt91=1;
                }


                switch (alt91) {
            	case 1 :
            	    // XQueryParser.g:571:47: p_CaseClause
            	    {
            	    pushFollow(FOLLOW_p_CaseClause_in_p_TypeswitchExpr5149);
            	    p_CaseClause210=p_CaseClause();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, p_CaseClause210.getTree());

            	    }
            	    break;

            	default :
            	    if ( cnt91 >= 1 ) break loop91;
            	    if (state.backtracking>0) {state.failed=true; return retval;}
                        EarlyExitException eee =
                            new EarlyExitException(91, input);
                        throw eee;
                }
                cnt91++;
            } while (true);

            k=(CommonToken)match(input,DEFAULT,FOLLOW_DEFAULT_in_p_TypeswitchExpr5154); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            k_tree = (XQDTCommonTree)adaptor.create(k);
            adaptor.addChild(root_0, k_tree);
            }
            if (list_k==null) list_k=new ArrayList();
            list_k.add(k);

            // XQueryParser.g:571:72: ( DOLLAR p_VarName )?
            int alt92=2;
            int LA92_0 = input.LA(1);

            if ( (LA92_0==DOLLAR) ) {
                alt92=1;
            }
            switch (alt92) {
                case 1 :
                    // XQueryParser.g:571:73: DOLLAR p_VarName
                    {
                    DOLLAR211=(CommonToken)match(input,DOLLAR,FOLLOW_DOLLAR_in_p_TypeswitchExpr5157); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    DOLLAR211_tree = (XQDTCommonTree)adaptor.create(DOLLAR211);
                    adaptor.addChild(root_0, DOLLAR211_tree);
                    }
                    pushFollow(FOLLOW_p_VarName_in_p_TypeswitchExpr5159);
                    p_VarName212=p_VarName();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, p_VarName212.getTree());

                    }
                    break;

            }

            k=(CommonToken)match(input,RETURN,FOLLOW_RETURN_in_p_TypeswitchExpr5165); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            k_tree = (XQDTCommonTree)adaptor.create(k);
            adaptor.addChild(root_0, k_tree);
            }
            if (list_k==null) list_k=new ArrayList();
            list_k.add(k);

            pushFollow(FOLLOW_p_ExprSingle_in_p_TypeswitchExpr5167);
            p_ExprSingle213=p_ExprSingle();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, p_ExprSingle213.getTree());
            if ( state.backtracking==0 ) {
              ak(list_k);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (XQDTCommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (XQDTCommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "p_TypeswitchExpr"

    public static class p_CaseClause_return extends ParserRuleReturnScope {
        XQDTCommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "p_CaseClause"
    // XQueryParser.g:575:1: p_CaseClause : k+= CASE ( DOLLAR p_VarName k+= AS )? p_SequenceType k+= RETURN p_ExprSingle ;
    public final XQueryParser.p_CaseClause_return p_CaseClause() throws RecognitionException {
        XQueryParser.p_CaseClause_return retval = new XQueryParser.p_CaseClause_return();
        retval.start = input.LT(1);

        XQDTCommonTree root_0 = null;

        CommonToken DOLLAR214=null;
        CommonToken k=null;
        List list_k=null;
        XQueryParser.p_VarName_return p_VarName215 = null;

        XQueryParser.p_SequenceType_return p_SequenceType216 = null;

        XQueryParser.p_ExprSingle_return p_ExprSingle217 = null;


        XQDTCommonTree DOLLAR214_tree=null;
        XQDTCommonTree k_tree=null;

        try {
            // XQueryParser.g:576:9: (k+= CASE ( DOLLAR p_VarName k+= AS )? p_SequenceType k+= RETURN p_ExprSingle )
            // XQueryParser.g:576:11: k+= CASE ( DOLLAR p_VarName k+= AS )? p_SequenceType k+= RETURN p_ExprSingle
            {
            root_0 = (XQDTCommonTree)adaptor.nil();

            k=(CommonToken)match(input,CASE,FOLLOW_CASE_in_p_CaseClause5197); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            k_tree = (XQDTCommonTree)adaptor.create(k);
            adaptor.addChild(root_0, k_tree);
            }
            if (list_k==null) list_k=new ArrayList();
            list_k.add(k);

            // XQueryParser.g:576:19: ( DOLLAR p_VarName k+= AS )?
            int alt93=2;
            int LA93_0 = input.LA(1);

            if ( (LA93_0==DOLLAR) ) {
                alt93=1;
            }
            switch (alt93) {
                case 1 :
                    // XQueryParser.g:576:20: DOLLAR p_VarName k+= AS
                    {
                    DOLLAR214=(CommonToken)match(input,DOLLAR,FOLLOW_DOLLAR_in_p_CaseClause5200); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    DOLLAR214_tree = (XQDTCommonTree)adaptor.create(DOLLAR214);
                    adaptor.addChild(root_0, DOLLAR214_tree);
                    }
                    pushFollow(FOLLOW_p_VarName_in_p_CaseClause5202);
                    p_VarName215=p_VarName();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, p_VarName215.getTree());
                    k=(CommonToken)match(input,AS,FOLLOW_AS_in_p_CaseClause5206); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    k_tree = (XQDTCommonTree)adaptor.create(k);
                    adaptor.addChild(root_0, k_tree);
                    }
                    if (list_k==null) list_k=new ArrayList();
                    list_k.add(k);


                    }
                    break;

            }

            pushFollow(FOLLOW_p_SequenceType_in_p_CaseClause5210);
            p_SequenceType216=p_SequenceType();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, p_SequenceType216.getTree());
            k=(CommonToken)match(input,RETURN,FOLLOW_RETURN_in_p_CaseClause5214); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            k_tree = (XQDTCommonTree)adaptor.create(k);
            adaptor.addChild(root_0, k_tree);
            }
            if (list_k==null) list_k=new ArrayList();
            list_k.add(k);

            pushFollow(FOLLOW_p_ExprSingle_in_p_CaseClause5216);
            p_ExprSingle217=p_ExprSingle();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, p_ExprSingle217.getTree());
            if ( state.backtracking==0 ) {
              ak(list_k);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (XQDTCommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (XQDTCommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "p_CaseClause"

    public static class p_IfExpr_return extends ParserRuleReturnScope {
        XQDTCommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "p_IfExpr"
    // XQueryParser.g:580:1: p_IfExpr : k+= IF LPAREN pm_Expr RPAREN k+= THEN p_ExprSingle k+= ELSE p_ExprSingle ;
    public final XQueryParser.p_IfExpr_return p_IfExpr() throws RecognitionException {
        XQueryParser.p_IfExpr_return retval = new XQueryParser.p_IfExpr_return();
        retval.start = input.LT(1);

        XQDTCommonTree root_0 = null;

        CommonToken LPAREN218=null;
        CommonToken RPAREN220=null;
        CommonToken k=null;
        List list_k=null;
        XQueryParser.pm_Expr_return pm_Expr219 = null;

        XQueryParser.p_ExprSingle_return p_ExprSingle221 = null;

        XQueryParser.p_ExprSingle_return p_ExprSingle222 = null;


        XQDTCommonTree LPAREN218_tree=null;
        XQDTCommonTree RPAREN220_tree=null;
        XQDTCommonTree k_tree=null;

        try {
            // XQueryParser.g:581:9: (k+= IF LPAREN pm_Expr RPAREN k+= THEN p_ExprSingle k+= ELSE p_ExprSingle )
            // XQueryParser.g:581:11: k+= IF LPAREN pm_Expr RPAREN k+= THEN p_ExprSingle k+= ELSE p_ExprSingle
            {
            root_0 = (XQDTCommonTree)adaptor.nil();

            k=(CommonToken)match(input,IF,FOLLOW_IF_in_p_IfExpr5246); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            k_tree = (XQDTCommonTree)adaptor.create(k);
            adaptor.addChild(root_0, k_tree);
            }
            if (list_k==null) list_k=new ArrayList();
            list_k.add(k);

            LPAREN218=(CommonToken)match(input,LPAREN,FOLLOW_LPAREN_in_p_IfExpr5248); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            LPAREN218_tree = (XQDTCommonTree)adaptor.create(LPAREN218);
            adaptor.addChild(root_0, LPAREN218_tree);
            }
            pushFollow(FOLLOW_pm_Expr_in_p_IfExpr5250);
            pm_Expr219=pm_Expr();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, pm_Expr219.getTree());
            RPAREN220=(CommonToken)match(input,RPAREN,FOLLOW_RPAREN_in_p_IfExpr5252); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            RPAREN220_tree = (XQDTCommonTree)adaptor.create(RPAREN220);
            adaptor.addChild(root_0, RPAREN220_tree);
            }
            k=(CommonToken)match(input,THEN,FOLLOW_THEN_in_p_IfExpr5256); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            k_tree = (XQDTCommonTree)adaptor.create(k);
            adaptor.addChild(root_0, k_tree);
            }
            if (list_k==null) list_k=new ArrayList();
            list_k.add(k);

            pushFollow(FOLLOW_p_ExprSingle_in_p_IfExpr5258);
            p_ExprSingle221=p_ExprSingle();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, p_ExprSingle221.getTree());
            k=(CommonToken)match(input,ELSE,FOLLOW_ELSE_in_p_IfExpr5262); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            k_tree = (XQDTCommonTree)adaptor.create(k);
            adaptor.addChild(root_0, k_tree);
            }
            if (list_k==null) list_k=new ArrayList();
            list_k.add(k);

            pushFollow(FOLLOW_p_ExprSingle_in_p_IfExpr5264);
            p_ExprSingle222=p_ExprSingle();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, p_ExprSingle222.getTree());
            if ( state.backtracking==0 ) {
              ak(list_k);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (XQDTCommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (XQDTCommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "p_IfExpr"

    public static class p_OrExpr_return extends ParserRuleReturnScope {
        XQDTCommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "p_OrExpr"
    // XQueryParser.g:585:1: p_OrExpr : p_AndExpr (k= OR p_AndExpr )* ;
    public final XQueryParser.p_OrExpr_return p_OrExpr() throws RecognitionException {
        XQueryParser.p_OrExpr_return retval = new XQueryParser.p_OrExpr_return();
        retval.start = input.LT(1);

        XQDTCommonTree root_0 = null;

        CommonToken k=null;
        XQueryParser.p_AndExpr_return p_AndExpr223 = null;

        XQueryParser.p_AndExpr_return p_AndExpr224 = null;


        XQDTCommonTree k_tree=null;

        try {
            // XQueryParser.g:586:9: ( p_AndExpr (k= OR p_AndExpr )* )
            // XQueryParser.g:586:11: p_AndExpr (k= OR p_AndExpr )*
            {
            root_0 = (XQDTCommonTree)adaptor.nil();

            pushFollow(FOLLOW_p_AndExpr_in_p_OrExpr5292);
            p_AndExpr223=p_AndExpr();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, p_AndExpr223.getTree());
            // XQueryParser.g:586:21: (k= OR p_AndExpr )*
            loop94:
            do {
                int alt94=2;
                int LA94_0 = input.LA(1);

                if ( (LA94_0==OR) ) {
                    alt94=1;
                }


                switch (alt94) {
            	case 1 :
            	    // XQueryParser.g:586:23: k= OR p_AndExpr
            	    {
            	    k=(CommonToken)match(input,OR,FOLLOW_OR_in_p_OrExpr5298); if (state.failed) return retval;
            	    if ( state.backtracking==0 ) {
            	    k_tree = (XQDTCommonTree)adaptor.create(k);
            	    adaptor.addChild(root_0, k_tree);
            	    }
            	    if ( state.backtracking==0 ) {
            	      ak(k);
            	    }
            	    pushFollow(FOLLOW_p_AndExpr_in_p_OrExpr5302);
            	    p_AndExpr224=p_AndExpr();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, p_AndExpr224.getTree());

            	    }
            	    break;

            	default :
            	    break loop94;
                }
            } while (true);


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (XQDTCommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (XQDTCommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "p_OrExpr"

    public static class p_AndExpr_return extends ParserRuleReturnScope {
        XQDTCommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "p_AndExpr"
    // XQueryParser.g:590:1: p_AndExpr : p_ComparisonExpr (k= AND p_ComparisonExpr )* ;
    public final XQueryParser.p_AndExpr_return p_AndExpr() throws RecognitionException {
        XQueryParser.p_AndExpr_return retval = new XQueryParser.p_AndExpr_return();
        retval.start = input.LT(1);

        XQDTCommonTree root_0 = null;

        CommonToken k=null;
        XQueryParser.p_ComparisonExpr_return p_ComparisonExpr225 = null;

        XQueryParser.p_ComparisonExpr_return p_ComparisonExpr226 = null;


        XQDTCommonTree k_tree=null;

        try {
            // XQueryParser.g:591:9: ( p_ComparisonExpr (k= AND p_ComparisonExpr )* )
            // XQueryParser.g:591:13: p_ComparisonExpr (k= AND p_ComparisonExpr )*
            {
            root_0 = (XQDTCommonTree)adaptor.nil();

            pushFollow(FOLLOW_p_ComparisonExpr_in_p_AndExpr5333);
            p_ComparisonExpr225=p_ComparisonExpr();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, p_ComparisonExpr225.getTree());
            // XQueryParser.g:591:30: (k= AND p_ComparisonExpr )*
            loop95:
            do {
                int alt95=2;
                int LA95_0 = input.LA(1);

                if ( (LA95_0==AND) ) {
                    alt95=1;
                }


                switch (alt95) {
            	case 1 :
            	    // XQueryParser.g:591:32: k= AND p_ComparisonExpr
            	    {
            	    k=(CommonToken)match(input,AND,FOLLOW_AND_in_p_AndExpr5339); if (state.failed) return retval;
            	    if ( state.backtracking==0 ) {
            	    k_tree = (XQDTCommonTree)adaptor.create(k);
            	    adaptor.addChild(root_0, k_tree);
            	    }
            	    if ( state.backtracking==0 ) {
            	      ak(k);
            	    }
            	    pushFollow(FOLLOW_p_ComparisonExpr_in_p_AndExpr5343);
            	    p_ComparisonExpr226=p_ComparisonExpr();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, p_ComparisonExpr226.getTree());

            	    }
            	    break;

            	default :
            	    break loop95;
                }
            } while (true);


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (XQDTCommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (XQDTCommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "p_AndExpr"

    public static class p_ComparisonExpr_return extends ParserRuleReturnScope {
        XQDTCommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "p_ComparisonExpr"
    // XQueryParser.g:596:1: p_ComparisonExpr : p_FTContainsExpr ( ( p_ValueComp | p_GeneralComp | p_NodeComp ) p_FTContainsExpr )? ;
    public final XQueryParser.p_ComparisonExpr_return p_ComparisonExpr() throws RecognitionException {
        XQueryParser.p_ComparisonExpr_return retval = new XQueryParser.p_ComparisonExpr_return();
        retval.start = input.LT(1);

        XQDTCommonTree root_0 = null;

        XQueryParser.p_FTContainsExpr_return p_FTContainsExpr227 = null;

        XQueryParser.p_ValueComp_return p_ValueComp228 = null;

        XQueryParser.p_GeneralComp_return p_GeneralComp229 = null;

        XQueryParser.p_NodeComp_return p_NodeComp230 = null;

        XQueryParser.p_FTContainsExpr_return p_FTContainsExpr231 = null;



        try {
            // XQueryParser.g:597:9: ( p_FTContainsExpr ( ( p_ValueComp | p_GeneralComp | p_NodeComp ) p_FTContainsExpr )? )
            // XQueryParser.g:597:13: p_FTContainsExpr ( ( p_ValueComp | p_GeneralComp | p_NodeComp ) p_FTContainsExpr )?
            {
            root_0 = (XQDTCommonTree)adaptor.nil();

            pushFollow(FOLLOW_p_FTContainsExpr_in_p_ComparisonExpr5375);
            p_FTContainsExpr227=p_FTContainsExpr();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, p_FTContainsExpr227.getTree());
            // XQueryParser.g:597:30: ( ( p_ValueComp | p_GeneralComp | p_NodeComp ) p_FTContainsExpr )?
            int alt97=2;
            int LA97_0 = input.LA(1);

            if ( (LA97_0==EQ||LA97_0==GE||LA97_0==GT||LA97_0==IS||LA97_0==LE||LA97_0==LT||LA97_0==NE||LA97_0==EQUAL||LA97_0==NOTEQUAL||(LA97_0>=SMALLER && LA97_0<=GREATER_GREATER)) ) {
                alt97=1;
            }
            switch (alt97) {
                case 1 :
                    // XQueryParser.g:597:32: ( p_ValueComp | p_GeneralComp | p_NodeComp ) p_FTContainsExpr
                    {
                    // XQueryParser.g:597:32: ( p_ValueComp | p_GeneralComp | p_NodeComp )
                    int alt96=3;
                    switch ( input.LA(1) ) {
                    case EQ:
                    case GE:
                    case GT:
                    case LE:
                    case LT:
                    case NE:
                        {
                        alt96=1;
                        }
                        break;
                    case EQUAL:
                    case NOTEQUAL:
                    case SMALLER:
                    case GREATER:
                    case SMALLEREQ:
                    case GREATEREQ:
                        {
                        alt96=2;
                        }
                        break;
                    case IS:
                    case SMALLER_SMALLER:
                    case GREATER_GREATER:
                        {
                        alt96=3;
                        }
                        break;
                    default:
                        if (state.backtracking>0) {state.failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("", 96, 0, input);

                        throw nvae;
                    }

                    switch (alt96) {
                        case 1 :
                            // XQueryParser.g:597:33: p_ValueComp
                            {
                            pushFollow(FOLLOW_p_ValueComp_in_p_ComparisonExpr5380);
                            p_ValueComp228=p_ValueComp();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) adaptor.addChild(root_0, p_ValueComp228.getTree());

                            }
                            break;
                        case 2 :
                            // XQueryParser.g:597:47: p_GeneralComp
                            {
                            pushFollow(FOLLOW_p_GeneralComp_in_p_ComparisonExpr5384);
                            p_GeneralComp229=p_GeneralComp();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) adaptor.addChild(root_0, p_GeneralComp229.getTree());

                            }
                            break;
                        case 3 :
                            // XQueryParser.g:597:63: p_NodeComp
                            {
                            pushFollow(FOLLOW_p_NodeComp_in_p_ComparisonExpr5388);
                            p_NodeComp230=p_NodeComp();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) adaptor.addChild(root_0, p_NodeComp230.getTree());

                            }
                            break;

                    }

                    pushFollow(FOLLOW_p_FTContainsExpr_in_p_ComparisonExpr5391);
                    p_FTContainsExpr231=p_FTContainsExpr();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, p_FTContainsExpr231.getTree());

                    }
                    break;

            }


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (XQDTCommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (XQDTCommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "p_ComparisonExpr"

    public static class p_FTContainsExpr_return extends ParserRuleReturnScope {
        XQDTCommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "p_FTContainsExpr"
    // XQueryParser.g:601:1: p_FTContainsExpr : p_RangeExpr (k+= CONTAINS k+= TEXT p_FTSelection ( p_FTIgnoreOption )? )? ;
    public final XQueryParser.p_FTContainsExpr_return p_FTContainsExpr() throws RecognitionException {
        XQueryParser.p_FTContainsExpr_return retval = new XQueryParser.p_FTContainsExpr_return();
        retval.start = input.LT(1);

        XQDTCommonTree root_0 = null;

        CommonToken k=null;
        List list_k=null;
        XQueryParser.p_RangeExpr_return p_RangeExpr232 = null;

        XQueryParser.p_FTSelection_return p_FTSelection233 = null;

        XQueryParser.p_FTIgnoreOption_return p_FTIgnoreOption234 = null;


        XQDTCommonTree k_tree=null;

        try {
            // XQueryParser.g:602:9: ( p_RangeExpr (k+= CONTAINS k+= TEXT p_FTSelection ( p_FTIgnoreOption )? )? )
            // XQueryParser.g:602:13: p_RangeExpr (k+= CONTAINS k+= TEXT p_FTSelection ( p_FTIgnoreOption )? )?
            {
            root_0 = (XQDTCommonTree)adaptor.nil();

            pushFollow(FOLLOW_p_RangeExpr_in_p_FTContainsExpr5422);
            p_RangeExpr232=p_RangeExpr();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, p_RangeExpr232.getTree());
            // XQueryParser.g:602:25: (k+= CONTAINS k+= TEXT p_FTSelection ( p_FTIgnoreOption )? )?
            int alt99=2;
            int LA99_0 = input.LA(1);

            if ( (LA99_0==CONTAINS) ) {
                alt99=1;
            }
            switch (alt99) {
                case 1 :
                    // XQueryParser.g:602:27: k+= CONTAINS k+= TEXT p_FTSelection ( p_FTIgnoreOption )?
                    {
                    k=(CommonToken)match(input,CONTAINS,FOLLOW_CONTAINS_in_p_FTContainsExpr5428); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    k_tree = (XQDTCommonTree)adaptor.create(k);
                    adaptor.addChild(root_0, k_tree);
                    }
                    if (list_k==null) list_k=new ArrayList();
                    list_k.add(k);

                    k=(CommonToken)match(input,TEXT,FOLLOW_TEXT_in_p_FTContainsExpr5432); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    k_tree = (XQDTCommonTree)adaptor.create(k);
                    adaptor.addChild(root_0, k_tree);
                    }
                    if (list_k==null) list_k=new ArrayList();
                    list_k.add(k);

                    if ( state.backtracking==0 ) {
                      ak(list_k);
                    }
                    pushFollow(FOLLOW_p_FTSelection_in_p_FTContainsExpr5436);
                    p_FTSelection233=p_FTSelection();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, p_FTSelection233.getTree());
                    // XQueryParser.g:602:71: ( p_FTIgnoreOption )?
                    int alt98=2;
                    int LA98_0 = input.LA(1);

                    if ( (LA98_0==WITHOUT) ) {
                        alt98=1;
                    }
                    switch (alt98) {
                        case 1 :
                            // XQueryParser.g:602:71: p_FTIgnoreOption
                            {
                            pushFollow(FOLLOW_p_FTIgnoreOption_in_p_FTContainsExpr5438);
                            p_FTIgnoreOption234=p_FTIgnoreOption();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) adaptor.addChild(root_0, p_FTIgnoreOption234.getTree());

                            }
                            break;

                    }


                    }
                    break;

            }


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (XQDTCommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (XQDTCommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "p_FTContainsExpr"

    public static class p_RangeExpr_return extends ParserRuleReturnScope {
        XQDTCommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "p_RangeExpr"
    // XQueryParser.g:606:1: p_RangeExpr : p_AdditiveExpr (kt= TO p_AdditiveExpr )? ;
    public final XQueryParser.p_RangeExpr_return p_RangeExpr() throws RecognitionException {
        XQueryParser.p_RangeExpr_return retval = new XQueryParser.p_RangeExpr_return();
        retval.start = input.LT(1);

        XQDTCommonTree root_0 = null;

        CommonToken kt=null;
        XQueryParser.p_AdditiveExpr_return p_AdditiveExpr235 = null;

        XQueryParser.p_AdditiveExpr_return p_AdditiveExpr236 = null;


        XQDTCommonTree kt_tree=null;

        try {
            // XQueryParser.g:607:9: ( p_AdditiveExpr (kt= TO p_AdditiveExpr )? )
            // XQueryParser.g:607:13: p_AdditiveExpr (kt= TO p_AdditiveExpr )?
            {
            root_0 = (XQDTCommonTree)adaptor.nil();

            pushFollow(FOLLOW_p_AdditiveExpr_in_p_RangeExpr5470);
            p_AdditiveExpr235=p_AdditiveExpr();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, p_AdditiveExpr235.getTree());
            // XQueryParser.g:607:28: (kt= TO p_AdditiveExpr )?
            int alt100=2;
            int LA100_0 = input.LA(1);

            if ( (LA100_0==TO) ) {
                alt100=1;
            }
            switch (alt100) {
                case 1 :
                    // XQueryParser.g:607:30: kt= TO p_AdditiveExpr
                    {
                    kt=(CommonToken)match(input,TO,FOLLOW_TO_in_p_RangeExpr5476); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    kt_tree = (XQDTCommonTree)adaptor.create(kt);
                    adaptor.addChild(root_0, kt_tree);
                    }
                    if ( state.backtracking==0 ) {
                      ak(kt);
                    }
                    pushFollow(FOLLOW_p_AdditiveExpr_in_p_RangeExpr5480);
                    p_AdditiveExpr236=p_AdditiveExpr();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, p_AdditiveExpr236.getTree());

                    }
                    break;

            }


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (XQDTCommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (XQDTCommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "p_RangeExpr"

    public static class p_AdditiveExpr_return extends ParserRuleReturnScope {
        XQDTCommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "p_AdditiveExpr"
    // XQueryParser.g:611:1: p_AdditiveExpr : p_MultiplicativeExpr ( ( PLUS | MINUS ) p_MultiplicativeExpr )* ;
    public final XQueryParser.p_AdditiveExpr_return p_AdditiveExpr() throws RecognitionException {
        XQueryParser.p_AdditiveExpr_return retval = new XQueryParser.p_AdditiveExpr_return();
        retval.start = input.LT(1);

        XQDTCommonTree root_0 = null;

        CommonToken set238=null;
        XQueryParser.p_MultiplicativeExpr_return p_MultiplicativeExpr237 = null;

        XQueryParser.p_MultiplicativeExpr_return p_MultiplicativeExpr239 = null;


        XQDTCommonTree set238_tree=null;

        try {
            // XQueryParser.g:612:9: ( p_MultiplicativeExpr ( ( PLUS | MINUS ) p_MultiplicativeExpr )* )
            // XQueryParser.g:612:13: p_MultiplicativeExpr ( ( PLUS | MINUS ) p_MultiplicativeExpr )*
            {
            root_0 = (XQDTCommonTree)adaptor.nil();

            pushFollow(FOLLOW_p_MultiplicativeExpr_in_p_AdditiveExpr5511);
            p_MultiplicativeExpr237=p_MultiplicativeExpr();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, p_MultiplicativeExpr237.getTree());
            // XQueryParser.g:612:34: ( ( PLUS | MINUS ) p_MultiplicativeExpr )*
            loop101:
            do {
                int alt101=2;
                int LA101_0 = input.LA(1);

                if ( ((LA101_0>=PLUS && LA101_0<=MINUS)) ) {
                    alt101=1;
                }


                switch (alt101) {
            	case 1 :
            	    // XQueryParser.g:612:36: ( PLUS | MINUS ) p_MultiplicativeExpr
            	    {
            	    set238=(CommonToken)input.LT(1);
            	    if ( (input.LA(1)>=PLUS && input.LA(1)<=MINUS) ) {
            	        input.consume();
            	        if ( state.backtracking==0 ) adaptor.addChild(root_0, (XQDTCommonTree)adaptor.create(set238));
            	        state.errorRecovery=false;state.failed=false;
            	    }
            	    else {
            	        if (state.backtracking>0) {state.failed=true; return retval;}
            	        MismatchedSetException mse = new MismatchedSetException(null,input);
            	        throw mse;
            	    }

            	    pushFollow(FOLLOW_p_MultiplicativeExpr_in_p_AdditiveExpr5523);
            	    p_MultiplicativeExpr239=p_MultiplicativeExpr();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, p_MultiplicativeExpr239.getTree());

            	    }
            	    break;

            	default :
            	    break loop101;
                }
            } while (true);


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (XQDTCommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (XQDTCommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "p_AdditiveExpr"

    public static class p_MultiplicativeExpr_return extends ParserRuleReturnScope {
        XQDTCommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "p_MultiplicativeExpr"
    // XQueryParser.g:616:1: p_MultiplicativeExpr : p_UnionExpr ( ( STAR | kd= DIV | ki= IDIV | km= MOD ) p_UnionExpr )* ;
    public final XQueryParser.p_MultiplicativeExpr_return p_MultiplicativeExpr() throws RecognitionException {
        XQueryParser.p_MultiplicativeExpr_return retval = new XQueryParser.p_MultiplicativeExpr_return();
        retval.start = input.LT(1);

        XQDTCommonTree root_0 = null;

        CommonToken kd=null;
        CommonToken ki=null;
        CommonToken km=null;
        CommonToken STAR241=null;
        XQueryParser.p_UnionExpr_return p_UnionExpr240 = null;

        XQueryParser.p_UnionExpr_return p_UnionExpr242 = null;


        XQDTCommonTree kd_tree=null;
        XQDTCommonTree ki_tree=null;
        XQDTCommonTree km_tree=null;
        XQDTCommonTree STAR241_tree=null;

        try {
            // XQueryParser.g:617:9: ( p_UnionExpr ( ( STAR | kd= DIV | ki= IDIV | km= MOD ) p_UnionExpr )* )
            // XQueryParser.g:617:13: p_UnionExpr ( ( STAR | kd= DIV | ki= IDIV | km= MOD ) p_UnionExpr )*
            {
            root_0 = (XQDTCommonTree)adaptor.nil();

            pushFollow(FOLLOW_p_UnionExpr_in_p_MultiplicativeExpr5554);
            p_UnionExpr240=p_UnionExpr();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, p_UnionExpr240.getTree());
            // XQueryParser.g:617:25: ( ( STAR | kd= DIV | ki= IDIV | km= MOD ) p_UnionExpr )*
            loop103:
            do {
                int alt103=2;
                int LA103_0 = input.LA(1);

                if ( (LA103_0==DIV||LA103_0==IDIV||LA103_0==MOD||LA103_0==STAR) ) {
                    alt103=1;
                }


                switch (alt103) {
            	case 1 :
            	    // XQueryParser.g:617:27: ( STAR | kd= DIV | ki= IDIV | km= MOD ) p_UnionExpr
            	    {
            	    // XQueryParser.g:617:27: ( STAR | kd= DIV | ki= IDIV | km= MOD )
            	    int alt102=4;
            	    switch ( input.LA(1) ) {
            	    case STAR:
            	        {
            	        alt102=1;
            	        }
            	        break;
            	    case DIV:
            	        {
            	        alt102=2;
            	        }
            	        break;
            	    case IDIV:
            	        {
            	        alt102=3;
            	        }
            	        break;
            	    case MOD:
            	        {
            	        alt102=4;
            	        }
            	        break;
            	    default:
            	        if (state.backtracking>0) {state.failed=true; return retval;}
            	        NoViableAltException nvae =
            	            new NoViableAltException("", 102, 0, input);

            	        throw nvae;
            	    }

            	    switch (alt102) {
            	        case 1 :
            	            // XQueryParser.g:617:28: STAR
            	            {
            	            STAR241=(CommonToken)match(input,STAR,FOLLOW_STAR_in_p_MultiplicativeExpr5559); if (state.failed) return retval;
            	            if ( state.backtracking==0 ) {
            	            STAR241_tree = (XQDTCommonTree)adaptor.create(STAR241);
            	            adaptor.addChild(root_0, STAR241_tree);
            	            }

            	            }
            	            break;
            	        case 2 :
            	            // XQueryParser.g:617:35: kd= DIV
            	            {
            	            kd=(CommonToken)match(input,DIV,FOLLOW_DIV_in_p_MultiplicativeExpr5565); if (state.failed) return retval;
            	            if ( state.backtracking==0 ) {
            	            kd_tree = (XQDTCommonTree)adaptor.create(kd);
            	            adaptor.addChild(root_0, kd_tree);
            	            }
            	            if ( state.backtracking==0 ) {
            	              ak(kd);
            	            }

            	            }
            	            break;
            	        case 3 :
            	            // XQueryParser.g:617:55: ki= IDIV
            	            {
            	            ki=(CommonToken)match(input,IDIV,FOLLOW_IDIV_in_p_MultiplicativeExpr5573); if (state.failed) return retval;
            	            if ( state.backtracking==0 ) {
            	            ki_tree = (XQDTCommonTree)adaptor.create(ki);
            	            adaptor.addChild(root_0, ki_tree);
            	            }
            	            if ( state.backtracking==0 ) {
            	              ak(ki);
            	            }

            	            }
            	            break;
            	        case 4 :
            	            // XQueryParser.g:617:76: km= MOD
            	            {
            	            km=(CommonToken)match(input,MOD,FOLLOW_MOD_in_p_MultiplicativeExpr5581); if (state.failed) return retval;
            	            if ( state.backtracking==0 ) {
            	            km_tree = (XQDTCommonTree)adaptor.create(km);
            	            adaptor.addChild(root_0, km_tree);
            	            }
            	            if ( state.backtracking==0 ) {
            	              ak(km);
            	            }

            	            }
            	            break;

            	    }

            	    pushFollow(FOLLOW_p_UnionExpr_in_p_MultiplicativeExpr5586);
            	    p_UnionExpr242=p_UnionExpr();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, p_UnionExpr242.getTree());

            	    }
            	    break;

            	default :
            	    break loop103;
                }
            } while (true);


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (XQDTCommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (XQDTCommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "p_MultiplicativeExpr"

    public static class p_UnionExpr_return extends ParserRuleReturnScope {
        XQDTCommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "p_UnionExpr"
    // XQueryParser.g:621:1: p_UnionExpr : p_IntersectExceptExpr ( (ku= UNION | VBAR ) p_IntersectExceptExpr )* ;
    public final XQueryParser.p_UnionExpr_return p_UnionExpr() throws RecognitionException {
        XQueryParser.p_UnionExpr_return retval = new XQueryParser.p_UnionExpr_return();
        retval.start = input.LT(1);

        XQDTCommonTree root_0 = null;

        CommonToken ku=null;
        CommonToken VBAR244=null;
        XQueryParser.p_IntersectExceptExpr_return p_IntersectExceptExpr243 = null;

        XQueryParser.p_IntersectExceptExpr_return p_IntersectExceptExpr245 = null;


        XQDTCommonTree ku_tree=null;
        XQDTCommonTree VBAR244_tree=null;

        try {
            // XQueryParser.g:622:9: ( p_IntersectExceptExpr ( (ku= UNION | VBAR ) p_IntersectExceptExpr )* )
            // XQueryParser.g:622:13: p_IntersectExceptExpr ( (ku= UNION | VBAR ) p_IntersectExceptExpr )*
            {
            root_0 = (XQDTCommonTree)adaptor.nil();

            pushFollow(FOLLOW_p_IntersectExceptExpr_in_p_UnionExpr5617);
            p_IntersectExceptExpr243=p_IntersectExceptExpr();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, p_IntersectExceptExpr243.getTree());
            // XQueryParser.g:622:35: ( (ku= UNION | VBAR ) p_IntersectExceptExpr )*
            loop105:
            do {
                int alt105=2;
                int LA105_0 = input.LA(1);

                if ( (LA105_0==UNION||LA105_0==VBAR) ) {
                    alt105=1;
                }


                switch (alt105) {
            	case 1 :
            	    // XQueryParser.g:622:37: (ku= UNION | VBAR ) p_IntersectExceptExpr
            	    {
            	    // XQueryParser.g:622:37: (ku= UNION | VBAR )
            	    int alt104=2;
            	    int LA104_0 = input.LA(1);

            	    if ( (LA104_0==UNION) ) {
            	        alt104=1;
            	    }
            	    else if ( (LA104_0==VBAR) ) {
            	        alt104=2;
            	    }
            	    else {
            	        if (state.backtracking>0) {state.failed=true; return retval;}
            	        NoViableAltException nvae =
            	            new NoViableAltException("", 104, 0, input);

            	        throw nvae;
            	    }
            	    switch (alt104) {
            	        case 1 :
            	            // XQueryParser.g:622:38: ku= UNION
            	            {
            	            ku=(CommonToken)match(input,UNION,FOLLOW_UNION_in_p_UnionExpr5624); if (state.failed) return retval;
            	            if ( state.backtracking==0 ) {
            	            ku_tree = (XQDTCommonTree)adaptor.create(ku);
            	            adaptor.addChild(root_0, ku_tree);
            	            }
            	            if ( state.backtracking==0 ) {
            	              ak(ku);
            	            }

            	            }
            	            break;
            	        case 2 :
            	            // XQueryParser.g:622:60: VBAR
            	            {
            	            VBAR244=(CommonToken)match(input,VBAR,FOLLOW_VBAR_in_p_UnionExpr5630); if (state.failed) return retval;
            	            if ( state.backtracking==0 ) {
            	            VBAR244_tree = (XQDTCommonTree)adaptor.create(VBAR244);
            	            adaptor.addChild(root_0, VBAR244_tree);
            	            }

            	            }
            	            break;

            	    }

            	    pushFollow(FOLLOW_p_IntersectExceptExpr_in_p_UnionExpr5633);
            	    p_IntersectExceptExpr245=p_IntersectExceptExpr();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, p_IntersectExceptExpr245.getTree());

            	    }
            	    break;

            	default :
            	    break loop105;
                }
            } while (true);


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (XQDTCommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (XQDTCommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "p_UnionExpr"

    public static class p_IntersectExceptExpr_return extends ParserRuleReturnScope {
        XQDTCommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "p_IntersectExceptExpr"
    // XQueryParser.g:626:1: p_IntersectExceptExpr : p_InstanceofExpr ( (k= INTERSECT | k= EXCEPT ) p_InstanceofExpr )* ;
    public final XQueryParser.p_IntersectExceptExpr_return p_IntersectExceptExpr() throws RecognitionException {
        XQueryParser.p_IntersectExceptExpr_return retval = new XQueryParser.p_IntersectExceptExpr_return();
        retval.start = input.LT(1);

        XQDTCommonTree root_0 = null;

        CommonToken k=null;
        XQueryParser.p_InstanceofExpr_return p_InstanceofExpr246 = null;

        XQueryParser.p_InstanceofExpr_return p_InstanceofExpr247 = null;


        XQDTCommonTree k_tree=null;

        try {
            // XQueryParser.g:627:9: ( p_InstanceofExpr ( (k= INTERSECT | k= EXCEPT ) p_InstanceofExpr )* )
            // XQueryParser.g:627:13: p_InstanceofExpr ( (k= INTERSECT | k= EXCEPT ) p_InstanceofExpr )*
            {
            root_0 = (XQDTCommonTree)adaptor.nil();

            pushFollow(FOLLOW_p_InstanceofExpr_in_p_IntersectExceptExpr5664);
            p_InstanceofExpr246=p_InstanceofExpr();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, p_InstanceofExpr246.getTree());
            // XQueryParser.g:627:30: ( (k= INTERSECT | k= EXCEPT ) p_InstanceofExpr )*
            loop107:
            do {
                int alt107=2;
                int LA107_0 = input.LA(1);

                if ( (LA107_0==EXCEPT||LA107_0==INTERSECT) ) {
                    alt107=1;
                }


                switch (alt107) {
            	case 1 :
            	    // XQueryParser.g:627:32: (k= INTERSECT | k= EXCEPT ) p_InstanceofExpr
            	    {
            	    // XQueryParser.g:627:32: (k= INTERSECT | k= EXCEPT )
            	    int alt106=2;
            	    int LA106_0 = input.LA(1);

            	    if ( (LA106_0==INTERSECT) ) {
            	        alt106=1;
            	    }
            	    else if ( (LA106_0==EXCEPT) ) {
            	        alt106=2;
            	    }
            	    else {
            	        if (state.backtracking>0) {state.failed=true; return retval;}
            	        NoViableAltException nvae =
            	            new NoViableAltException("", 106, 0, input);

            	        throw nvae;
            	    }
            	    switch (alt106) {
            	        case 1 :
            	            // XQueryParser.g:627:33: k= INTERSECT
            	            {
            	            k=(CommonToken)match(input,INTERSECT,FOLLOW_INTERSECT_in_p_IntersectExceptExpr5671); if (state.failed) return retval;
            	            if ( state.backtracking==0 ) {
            	            k_tree = (XQDTCommonTree)adaptor.create(k);
            	            adaptor.addChild(root_0, k_tree);
            	            }

            	            }
            	            break;
            	        case 2 :
            	            // XQueryParser.g:627:47: k= EXCEPT
            	            {
            	            k=(CommonToken)match(input,EXCEPT,FOLLOW_EXCEPT_in_p_IntersectExceptExpr5677); if (state.failed) return retval;
            	            if ( state.backtracking==0 ) {
            	            k_tree = (XQDTCommonTree)adaptor.create(k);
            	            adaptor.addChild(root_0, k_tree);
            	            }

            	            }
            	            break;

            	    }

            	    if ( state.backtracking==0 ) {
            	      ak(k);
            	    }
            	    pushFollow(FOLLOW_p_InstanceofExpr_in_p_IntersectExceptExpr5682);
            	    p_InstanceofExpr247=p_InstanceofExpr();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, p_InstanceofExpr247.getTree());

            	    }
            	    break;

            	default :
            	    break loop107;
                }
            } while (true);


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (XQDTCommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (XQDTCommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "p_IntersectExceptExpr"

    public static class p_InstanceofExpr_return extends ParserRuleReturnScope {
        XQDTCommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "p_InstanceofExpr"
    // XQueryParser.g:631:1: p_InstanceofExpr : p_TreatExpr (ki= INSTANCE ko= OF p_SequenceType )? ;
    public final XQueryParser.p_InstanceofExpr_return p_InstanceofExpr() throws RecognitionException {
        XQueryParser.p_InstanceofExpr_return retval = new XQueryParser.p_InstanceofExpr_return();
        retval.start = input.LT(1);

        XQDTCommonTree root_0 = null;

        CommonToken ki=null;
        CommonToken ko=null;
        XQueryParser.p_TreatExpr_return p_TreatExpr248 = null;

        XQueryParser.p_SequenceType_return p_SequenceType249 = null;


        XQDTCommonTree ki_tree=null;
        XQDTCommonTree ko_tree=null;

        try {
            // XQueryParser.g:632:9: ( p_TreatExpr (ki= INSTANCE ko= OF p_SequenceType )? )
            // XQueryParser.g:632:13: p_TreatExpr (ki= INSTANCE ko= OF p_SequenceType )?
            {
            root_0 = (XQDTCommonTree)adaptor.nil();

            pushFollow(FOLLOW_p_TreatExpr_in_p_InstanceofExpr5713);
            p_TreatExpr248=p_TreatExpr();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, p_TreatExpr248.getTree());
            // XQueryParser.g:632:25: (ki= INSTANCE ko= OF p_SequenceType )?
            int alt108=2;
            int LA108_0 = input.LA(1);

            if ( (LA108_0==INSTANCE) ) {
                alt108=1;
            }
            switch (alt108) {
                case 1 :
                    // XQueryParser.g:632:27: ki= INSTANCE ko= OF p_SequenceType
                    {
                    ki=(CommonToken)match(input,INSTANCE,FOLLOW_INSTANCE_in_p_InstanceofExpr5719); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    ki_tree = (XQDTCommonTree)adaptor.create(ki);
                    adaptor.addChild(root_0, ki_tree);
                    }
                    if ( state.backtracking==0 ) {
                      ak(ki);
                    }
                    ko=(CommonToken)match(input,OF,FOLLOW_OF_in_p_InstanceofExpr5725); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    ko_tree = (XQDTCommonTree)adaptor.create(ko);
                    adaptor.addChild(root_0, ko_tree);
                    }
                    if ( state.backtracking==0 ) {
                      ak(ko);
                    }
                    pushFollow(FOLLOW_p_SequenceType_in_p_InstanceofExpr5729);
                    p_SequenceType249=p_SequenceType();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, p_SequenceType249.getTree());

                    }
                    break;

            }


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (XQDTCommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (XQDTCommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "p_InstanceofExpr"

    public static class p_TreatExpr_return extends ParserRuleReturnScope {
        XQDTCommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "p_TreatExpr"
    // XQueryParser.g:636:1: p_TreatExpr : p_CastableExpr (kt= TREAT ka= AS p_SequenceType )? ;
    public final XQueryParser.p_TreatExpr_return p_TreatExpr() throws RecognitionException {
        XQueryParser.p_TreatExpr_return retval = new XQueryParser.p_TreatExpr_return();
        retval.start = input.LT(1);

        XQDTCommonTree root_0 = null;

        CommonToken kt=null;
        CommonToken ka=null;
        XQueryParser.p_CastableExpr_return p_CastableExpr250 = null;

        XQueryParser.p_SequenceType_return p_SequenceType251 = null;


        XQDTCommonTree kt_tree=null;
        XQDTCommonTree ka_tree=null;

        try {
            // XQueryParser.g:637:9: ( p_CastableExpr (kt= TREAT ka= AS p_SequenceType )? )
            // XQueryParser.g:637:13: p_CastableExpr (kt= TREAT ka= AS p_SequenceType )?
            {
            root_0 = (XQDTCommonTree)adaptor.nil();

            pushFollow(FOLLOW_p_CastableExpr_in_p_TreatExpr5759);
            p_CastableExpr250=p_CastableExpr();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, p_CastableExpr250.getTree());
            // XQueryParser.g:637:28: (kt= TREAT ka= AS p_SequenceType )?
            int alt109=2;
            int LA109_0 = input.LA(1);

            if ( (LA109_0==TREAT) ) {
                alt109=1;
            }
            switch (alt109) {
                case 1 :
                    // XQueryParser.g:637:30: kt= TREAT ka= AS p_SequenceType
                    {
                    kt=(CommonToken)match(input,TREAT,FOLLOW_TREAT_in_p_TreatExpr5765); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    kt_tree = (XQDTCommonTree)adaptor.create(kt);
                    adaptor.addChild(root_0, kt_tree);
                    }
                    if ( state.backtracking==0 ) {
                      ak(kt);
                    }
                    ka=(CommonToken)match(input,AS,FOLLOW_AS_in_p_TreatExpr5771); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    ka_tree = (XQDTCommonTree)adaptor.create(ka);
                    adaptor.addChild(root_0, ka_tree);
                    }
                    if ( state.backtracking==0 ) {
                      ak(ka);
                    }
                    pushFollow(FOLLOW_p_SequenceType_in_p_TreatExpr5775);
                    p_SequenceType251=p_SequenceType();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, p_SequenceType251.getTree());

                    }
                    break;

            }


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (XQDTCommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (XQDTCommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "p_TreatExpr"

    public static class p_CastableExpr_return extends ParserRuleReturnScope {
        XQDTCommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "p_CastableExpr"
    // XQueryParser.g:641:1: p_CastableExpr : p_CastExpr (kc= CASTABLE ka= AS p_SingleType )? ;
    public final XQueryParser.p_CastableExpr_return p_CastableExpr() throws RecognitionException {
        XQueryParser.p_CastableExpr_return retval = new XQueryParser.p_CastableExpr_return();
        retval.start = input.LT(1);

        XQDTCommonTree root_0 = null;

        CommonToken kc=null;
        CommonToken ka=null;
        XQueryParser.p_CastExpr_return p_CastExpr252 = null;

        XQueryParser.p_SingleType_return p_SingleType253 = null;


        XQDTCommonTree kc_tree=null;
        XQDTCommonTree ka_tree=null;

        try {
            // XQueryParser.g:642:9: ( p_CastExpr (kc= CASTABLE ka= AS p_SingleType )? )
            // XQueryParser.g:642:13: p_CastExpr (kc= CASTABLE ka= AS p_SingleType )?
            {
            root_0 = (XQDTCommonTree)adaptor.nil();

            pushFollow(FOLLOW_p_CastExpr_in_p_CastableExpr5814);
            p_CastExpr252=p_CastExpr();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, p_CastExpr252.getTree());
            // XQueryParser.g:642:24: (kc= CASTABLE ka= AS p_SingleType )?
            int alt110=2;
            int LA110_0 = input.LA(1);

            if ( (LA110_0==CASTABLE) ) {
                alt110=1;
            }
            switch (alt110) {
                case 1 :
                    // XQueryParser.g:642:26: kc= CASTABLE ka= AS p_SingleType
                    {
                    kc=(CommonToken)match(input,CASTABLE,FOLLOW_CASTABLE_in_p_CastableExpr5820); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    kc_tree = (XQDTCommonTree)adaptor.create(kc);
                    adaptor.addChild(root_0, kc_tree);
                    }
                    if ( state.backtracking==0 ) {
                      ak(kc);
                    }
                    ka=(CommonToken)match(input,AS,FOLLOW_AS_in_p_CastableExpr5826); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    ka_tree = (XQDTCommonTree)adaptor.create(ka);
                    adaptor.addChild(root_0, ka_tree);
                    }
                    if ( state.backtracking==0 ) {
                      ak(ka);
                    }
                    pushFollow(FOLLOW_p_SingleType_in_p_CastableExpr5830);
                    p_SingleType253=p_SingleType();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, p_SingleType253.getTree());

                    }
                    break;

            }


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (XQDTCommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (XQDTCommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "p_CastableExpr"

    public static class p_CastExpr_return extends ParserRuleReturnScope {
        XQDTCommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "p_CastExpr"
    // XQueryParser.g:646:1: p_CastExpr : p_UnaryExpr (kc= CAST ka= AS p_SingleType )? ;
    public final XQueryParser.p_CastExpr_return p_CastExpr() throws RecognitionException {
        XQueryParser.p_CastExpr_return retval = new XQueryParser.p_CastExpr_return();
        retval.start = input.LT(1);

        XQDTCommonTree root_0 = null;

        CommonToken kc=null;
        CommonToken ka=null;
        XQueryParser.p_UnaryExpr_return p_UnaryExpr254 = null;

        XQueryParser.p_SingleType_return p_SingleType255 = null;


        XQDTCommonTree kc_tree=null;
        XQDTCommonTree ka_tree=null;

        try {
            // XQueryParser.g:647:9: ( p_UnaryExpr (kc= CAST ka= AS p_SingleType )? )
            // XQueryParser.g:647:13: p_UnaryExpr (kc= CAST ka= AS p_SingleType )?
            {
            root_0 = (XQDTCommonTree)adaptor.nil();

            pushFollow(FOLLOW_p_UnaryExpr_in_p_CastExpr5869);
            p_UnaryExpr254=p_UnaryExpr();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, p_UnaryExpr254.getTree());
            // XQueryParser.g:647:25: (kc= CAST ka= AS p_SingleType )?
            int alt111=2;
            int LA111_0 = input.LA(1);

            if ( (LA111_0==CAST) ) {
                alt111=1;
            }
            switch (alt111) {
                case 1 :
                    // XQueryParser.g:647:27: kc= CAST ka= AS p_SingleType
                    {
                    kc=(CommonToken)match(input,CAST,FOLLOW_CAST_in_p_CastExpr5875); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    kc_tree = (XQDTCommonTree)adaptor.create(kc);
                    adaptor.addChild(root_0, kc_tree);
                    }
                    if ( state.backtracking==0 ) {
                      ak(kc);
                    }
                    ka=(CommonToken)match(input,AS,FOLLOW_AS_in_p_CastExpr5881); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    ka_tree = (XQDTCommonTree)adaptor.create(ka);
                    adaptor.addChild(root_0, ka_tree);
                    }
                    if ( state.backtracking==0 ) {
                      ak(ka);
                    }
                    pushFollow(FOLLOW_p_SingleType_in_p_CastExpr5885);
                    p_SingleType255=p_SingleType();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, p_SingleType255.getTree());

                    }
                    break;

            }


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (XQDTCommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (XQDTCommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "p_CastExpr"

    public static class p_UnaryExpr_return extends ParserRuleReturnScope {
        XQDTCommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "p_UnaryExpr"
    // XQueryParser.g:651:1: p_UnaryExpr : ( PLUS | MINUS )* p_ValueExpr -> ^( UnaryExpr ( PLUS )* p_ValueExpr ) ;
    public final XQueryParser.p_UnaryExpr_return p_UnaryExpr() throws RecognitionException {
        XQueryParser.p_UnaryExpr_return retval = new XQueryParser.p_UnaryExpr_return();
        retval.start = input.LT(1);

        XQDTCommonTree root_0 = null;

        CommonToken PLUS256=null;
        CommonToken MINUS257=null;
        XQueryParser.p_ValueExpr_return p_ValueExpr258 = null;


        XQDTCommonTree PLUS256_tree=null;
        XQDTCommonTree MINUS257_tree=null;
        RewriteRuleTokenStream stream_MINUS=new RewriteRuleTokenStream(adaptor,"token MINUS");
        RewriteRuleTokenStream stream_PLUS=new RewriteRuleTokenStream(adaptor,"token PLUS");
        RewriteRuleSubtreeStream stream_p_ValueExpr=new RewriteRuleSubtreeStream(adaptor,"rule p_ValueExpr");
        try {
            // XQueryParser.g:652:9: ( ( PLUS | MINUS )* p_ValueExpr -> ^( UnaryExpr ( PLUS )* p_ValueExpr ) )
            // XQueryParser.g:652:13: ( PLUS | MINUS )* p_ValueExpr
            {
            // XQueryParser.g:652:13: ( PLUS | MINUS )*
            loop112:
            do {
                int alt112=3;
                int LA112_0 = input.LA(1);

                if ( (LA112_0==PLUS) ) {
                    alt112=1;
                }
                else if ( (LA112_0==MINUS) ) {
                    alt112=2;
                }


                switch (alt112) {
            	case 1 :
            	    // XQueryParser.g:652:14: PLUS
            	    {
            	    PLUS256=(CommonToken)match(input,PLUS,FOLLOW_PLUS_in_p_UnaryExpr5917); if (state.failed) return retval; 
            	    if ( state.backtracking==0 ) stream_PLUS.add(PLUS256);


            	    }
            	    break;
            	case 2 :
            	    // XQueryParser.g:652:21: MINUS
            	    {
            	    MINUS257=(CommonToken)match(input,MINUS,FOLLOW_MINUS_in_p_UnaryExpr5921); if (state.failed) return retval; 
            	    if ( state.backtracking==0 ) stream_MINUS.add(MINUS257);


            	    }
            	    break;

            	default :
            	    break loop112;
                }
            } while (true);

            pushFollow(FOLLOW_p_ValueExpr_in_p_UnaryExpr5925);
            p_ValueExpr258=p_ValueExpr();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_p_ValueExpr.add(p_ValueExpr258.getTree());


            // AST REWRITE
            // elements: p_ValueExpr, PLUS
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (XQDTCommonTree)adaptor.nil();
            // 653:17: -> ^( UnaryExpr ( PLUS )* p_ValueExpr )
            {
                // XQueryParser.g:653:20: ^( UnaryExpr ( PLUS )* p_ValueExpr )
                {
                XQDTCommonTree root_1 = (XQDTCommonTree)adaptor.nil();
                root_1 = (XQDTCommonTree)adaptor.becomeRoot((XQDTCommonTree)adaptor.create(UnaryExpr, "UnaryExpr"), root_1);

                // XQueryParser.g:653:32: ( PLUS )*
                while ( stream_PLUS.hasNext() ) {
                    adaptor.addChild(root_1, stream_PLUS.nextNode());

                }
                stream_PLUS.reset();
                adaptor.addChild(root_1, stream_p_ValueExpr.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (XQDTCommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (XQDTCommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "p_UnaryExpr"

    public static class p_ValueExpr_return extends ParserRuleReturnScope {
        XQDTCommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "p_ValueExpr"
    // XQueryParser.g:660:1: p_ValueExpr : ( ( VALIDATE p_ValidationMode LBRACKET )=> p_ValidateExpr | p_PathExpr | p_ExtensionExpr );
    public final XQueryParser.p_ValueExpr_return p_ValueExpr() throws RecognitionException {
        XQueryParser.p_ValueExpr_return retval = new XQueryParser.p_ValueExpr_return();
        retval.start = input.LT(1);

        XQDTCommonTree root_0 = null;

        XQueryParser.p_ValidateExpr_return p_ValidateExpr259 = null;

        XQueryParser.p_PathExpr_return p_PathExpr260 = null;

        XQueryParser.p_ExtensionExpr_return p_ExtensionExpr261 = null;



        try {
            // XQueryParser.g:661:9: ( ( VALIDATE p_ValidationMode LBRACKET )=> p_ValidateExpr | p_PathExpr | p_ExtensionExpr )
            int alt113=3;
            alt113 = dfa113.predict(input);
            switch (alt113) {
                case 1 :
                    // XQueryParser.g:661:11: ( VALIDATE p_ValidationMode LBRACKET )=> p_ValidateExpr
                    {
                    root_0 = (XQDTCommonTree)adaptor.nil();

                    pushFollow(FOLLOW_p_ValidateExpr_in_p_ValueExpr5991);
                    p_ValidateExpr259=p_ValidateExpr();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, p_ValidateExpr259.getTree());

                    }
                    break;
                case 2 :
                    // XQueryParser.g:662:11: p_PathExpr
                    {
                    root_0 = (XQDTCommonTree)adaptor.nil();

                    pushFollow(FOLLOW_p_PathExpr_in_p_ValueExpr6003);
                    p_PathExpr260=p_PathExpr();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, p_PathExpr260.getTree());

                    }
                    break;
                case 3 :
                    // XQueryParser.g:663:11: p_ExtensionExpr
                    {
                    root_0 = (XQDTCommonTree)adaptor.nil();

                    pushFollow(FOLLOW_p_ExtensionExpr_in_p_ValueExpr6015);
                    p_ExtensionExpr261=p_ExtensionExpr();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, p_ExtensionExpr261.getTree());

                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (XQDTCommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (XQDTCommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "p_ValueExpr"

    public static class p_GeneralComp_return extends ParserRuleReturnScope {
        XQDTCommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "p_GeneralComp"
    // XQueryParser.g:667:1: p_GeneralComp : ( EQUAL | NOTEQUAL | SMALLER | SMALLEREQ | GREATER | GREATEREQ );
    public final XQueryParser.p_GeneralComp_return p_GeneralComp() throws RecognitionException {
        XQueryParser.p_GeneralComp_return retval = new XQueryParser.p_GeneralComp_return();
        retval.start = input.LT(1);

        XQDTCommonTree root_0 = null;

        CommonToken set262=null;

        XQDTCommonTree set262_tree=null;

        try {
            // XQueryParser.g:668:9: ( EQUAL | NOTEQUAL | SMALLER | SMALLEREQ | GREATER | GREATEREQ )
            // XQueryParser.g:
            {
            root_0 = (XQDTCommonTree)adaptor.nil();

            set262=(CommonToken)input.LT(1);
            if ( input.LA(1)==EQUAL||input.LA(1)==NOTEQUAL||(input.LA(1)>=SMALLER && input.LA(1)<=GREATEREQ) ) {
                input.consume();
                if ( state.backtracking==0 ) adaptor.addChild(root_0, (XQDTCommonTree)adaptor.create(set262));
                state.errorRecovery=false;state.failed=false;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                MismatchedSetException mse = new MismatchedSetException(null,input);
                throw mse;
            }


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (XQDTCommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (XQDTCommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "p_GeneralComp"

    public static class p_ValueComp_return extends ParserRuleReturnScope {
        XQDTCommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "p_ValueComp"
    // XQueryParser.g:672:1: p_ValueComp : (k= EQ | k= NE | k= LT | k= LE | k= GT | k= GE ) ;
    public final XQueryParser.p_ValueComp_return p_ValueComp() throws RecognitionException {
        XQueryParser.p_ValueComp_return retval = new XQueryParser.p_ValueComp_return();
        retval.start = input.LT(1);

        XQDTCommonTree root_0 = null;

        CommonToken k=null;

        XQDTCommonTree k_tree=null;

        try {
            // XQueryParser.g:673:9: ( (k= EQ | k= NE | k= LT | k= LE | k= GT | k= GE ) )
            // XQueryParser.g:673:13: (k= EQ | k= NE | k= LT | k= LE | k= GT | k= GE )
            {
            root_0 = (XQDTCommonTree)adaptor.nil();

            // XQueryParser.g:673:13: (k= EQ | k= NE | k= LT | k= LE | k= GT | k= GE )
            int alt114=6;
            switch ( input.LA(1) ) {
            case EQ:
                {
                alt114=1;
                }
                break;
            case NE:
                {
                alt114=2;
                }
                break;
            case LT:
                {
                alt114=3;
                }
                break;
            case LE:
                {
                alt114=4;
                }
                break;
            case GT:
                {
                alt114=5;
                }
                break;
            case GE:
                {
                alt114=6;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 114, 0, input);

                throw nvae;
            }

            switch (alt114) {
                case 1 :
                    // XQueryParser.g:673:14: k= EQ
                    {
                    k=(CommonToken)match(input,EQ,FOLLOW_EQ_in_p_ValueComp6094); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    k_tree = (XQDTCommonTree)adaptor.create(k);
                    adaptor.addChild(root_0, k_tree);
                    }

                    }
                    break;
                case 2 :
                    // XQueryParser.g:673:21: k= NE
                    {
                    k=(CommonToken)match(input,NE,FOLLOW_NE_in_p_ValueComp6100); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    k_tree = (XQDTCommonTree)adaptor.create(k);
                    adaptor.addChild(root_0, k_tree);
                    }

                    }
                    break;
                case 3 :
                    // XQueryParser.g:673:28: k= LT
                    {
                    k=(CommonToken)match(input,LT,FOLLOW_LT_in_p_ValueComp6106); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    k_tree = (XQDTCommonTree)adaptor.create(k);
                    adaptor.addChild(root_0, k_tree);
                    }

                    }
                    break;
                case 4 :
                    // XQueryParser.g:673:35: k= LE
                    {
                    k=(CommonToken)match(input,LE,FOLLOW_LE_in_p_ValueComp6112); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    k_tree = (XQDTCommonTree)adaptor.create(k);
                    adaptor.addChild(root_0, k_tree);
                    }

                    }
                    break;
                case 5 :
                    // XQueryParser.g:673:42: k= GT
                    {
                    k=(CommonToken)match(input,GT,FOLLOW_GT_in_p_ValueComp6118); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    k_tree = (XQDTCommonTree)adaptor.create(k);
                    adaptor.addChild(root_0, k_tree);
                    }

                    }
                    break;
                case 6 :
                    // XQueryParser.g:673:49: k= GE
                    {
                    k=(CommonToken)match(input,GE,FOLLOW_GE_in_p_ValueComp6124); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    k_tree = (XQDTCommonTree)adaptor.create(k);
                    adaptor.addChild(root_0, k_tree);
                    }

                    }
                    break;

            }

            if ( state.backtracking==0 ) {
              ak(k);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (XQDTCommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (XQDTCommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "p_ValueComp"

    public static class p_NodeComp_return extends ParserRuleReturnScope {
        XQDTCommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "p_NodeComp"
    // XQueryParser.g:677:1: p_NodeComp : (ki= IS | SMALLER_SMALLER | GREATER_GREATER );
    public final XQueryParser.p_NodeComp_return p_NodeComp() throws RecognitionException {
        XQueryParser.p_NodeComp_return retval = new XQueryParser.p_NodeComp_return();
        retval.start = input.LT(1);

        XQDTCommonTree root_0 = null;

        CommonToken ki=null;
        CommonToken SMALLER_SMALLER263=null;
        CommonToken GREATER_GREATER264=null;

        XQDTCommonTree ki_tree=null;
        XQDTCommonTree SMALLER_SMALLER263_tree=null;
        XQDTCommonTree GREATER_GREATER264_tree=null;

        try {
            // XQueryParser.g:678:9: (ki= IS | SMALLER_SMALLER | GREATER_GREATER )
            int alt115=3;
            switch ( input.LA(1) ) {
            case IS:
                {
                alt115=1;
                }
                break;
            case SMALLER_SMALLER:
                {
                alt115=2;
                }
                break;
            case GREATER_GREATER:
                {
                alt115=3;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 115, 0, input);

                throw nvae;
            }

            switch (alt115) {
                case 1 :
                    // XQueryParser.g:678:13: ki= IS
                    {
                    root_0 = (XQDTCommonTree)adaptor.nil();

                    ki=(CommonToken)match(input,IS,FOLLOW_IS_in_p_NodeComp6157); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    ki_tree = (XQDTCommonTree)adaptor.create(ki);
                    adaptor.addChild(root_0, ki_tree);
                    }
                    if ( state.backtracking==0 ) {
                      ak(ki);
                    }

                    }
                    break;
                case 2 :
                    // XQueryParser.g:678:32: SMALLER_SMALLER
                    {
                    root_0 = (XQDTCommonTree)adaptor.nil();

                    SMALLER_SMALLER263=(CommonToken)match(input,SMALLER_SMALLER,FOLLOW_SMALLER_SMALLER_in_p_NodeComp6163); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    SMALLER_SMALLER263_tree = (XQDTCommonTree)adaptor.create(SMALLER_SMALLER263);
                    adaptor.addChild(root_0, SMALLER_SMALLER263_tree);
                    }

                    }
                    break;
                case 3 :
                    // XQueryParser.g:678:50: GREATER_GREATER
                    {
                    root_0 = (XQDTCommonTree)adaptor.nil();

                    GREATER_GREATER264=(CommonToken)match(input,GREATER_GREATER,FOLLOW_GREATER_GREATER_in_p_NodeComp6167); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    GREATER_GREATER264_tree = (XQDTCommonTree)adaptor.create(GREATER_GREATER264);
                    adaptor.addChild(root_0, GREATER_GREATER264_tree);
                    }

                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (XQDTCommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (XQDTCommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "p_NodeComp"

    public static class p_ValidateExpr_return extends ParserRuleReturnScope {
        XQDTCommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "p_ValidateExpr"
    // XQueryParser.g:682:1: p_ValidateExpr : kv= VALIDATE ( p_ValidationMode )? LBRACKET pm_Expr RBRACKET ;
    public final XQueryParser.p_ValidateExpr_return p_ValidateExpr() throws RecognitionException {
        XQueryParser.p_ValidateExpr_return retval = new XQueryParser.p_ValidateExpr_return();
        retval.start = input.LT(1);

        XQDTCommonTree root_0 = null;

        CommonToken kv=null;
        CommonToken LBRACKET266=null;
        CommonToken RBRACKET268=null;
        XQueryParser.p_ValidationMode_return p_ValidationMode265 = null;

        XQueryParser.pm_Expr_return pm_Expr267 = null;


        XQDTCommonTree kv_tree=null;
        XQDTCommonTree LBRACKET266_tree=null;
        XQDTCommonTree RBRACKET268_tree=null;

        try {
            // XQueryParser.g:683:9: (kv= VALIDATE ( p_ValidationMode )? LBRACKET pm_Expr RBRACKET )
            // XQueryParser.g:683:13: kv= VALIDATE ( p_ValidationMode )? LBRACKET pm_Expr RBRACKET
            {
            root_0 = (XQDTCommonTree)adaptor.nil();

            kv=(CommonToken)match(input,VALIDATE,FOLLOW_VALIDATE_in_p_ValidateExpr6197); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            kv_tree = (XQDTCommonTree)adaptor.create(kv);
            adaptor.addChild(root_0, kv_tree);
            }
            if ( state.backtracking==0 ) {
              ak(kv);
            }
            // XQueryParser.g:683:36: ( p_ValidationMode )?
            int alt116=2;
            int LA116_0 = input.LA(1);

            if ( (LA116_0==AS||LA116_0==LAX||LA116_0==STRICT) ) {
                alt116=1;
            }
            switch (alt116) {
                case 1 :
                    // XQueryParser.g:683:36: p_ValidationMode
                    {
                    pushFollow(FOLLOW_p_ValidationMode_in_p_ValidateExpr6201);
                    p_ValidationMode265=p_ValidationMode();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, p_ValidationMode265.getTree());

                    }
                    break;

            }

            LBRACKET266=(CommonToken)match(input,LBRACKET,FOLLOW_LBRACKET_in_p_ValidateExpr6204); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            LBRACKET266_tree = (XQDTCommonTree)adaptor.create(LBRACKET266);
            adaptor.addChild(root_0, LBRACKET266_tree);
            }
            pushFollow(FOLLOW_pm_Expr_in_p_ValidateExpr6206);
            pm_Expr267=pm_Expr();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, pm_Expr267.getTree());
            RBRACKET268=(CommonToken)match(input,RBRACKET,FOLLOW_RBRACKET_in_p_ValidateExpr6208); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            RBRACKET268_tree = (XQDTCommonTree)adaptor.create(RBRACKET268);
            adaptor.addChild(root_0, RBRACKET268_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (XQDTCommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (XQDTCommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "p_ValidateExpr"

    public static class p_ValidationMode_return extends ParserRuleReturnScope {
        XQDTCommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "p_ValidationMode"
    // XQueryParser.g:687:1: p_ValidationMode : (k= LAX | k= STRICT | (k= AS p_QName ) ) ;
    public final XQueryParser.p_ValidationMode_return p_ValidationMode() throws RecognitionException {
        XQueryParser.p_ValidationMode_return retval = new XQueryParser.p_ValidationMode_return();
        retval.start = input.LT(1);

        XQDTCommonTree root_0 = null;

        CommonToken k=null;
        XQueryParser.p_QName_return p_QName269 = null;


        XQDTCommonTree k_tree=null;

        try {
            // XQueryParser.g:688:9: ( (k= LAX | k= STRICT | (k= AS p_QName ) ) )
            // XQueryParser.g:688:13: (k= LAX | k= STRICT | (k= AS p_QName ) )
            {
            root_0 = (XQDTCommonTree)adaptor.nil();

            // XQueryParser.g:688:13: (k= LAX | k= STRICT | (k= AS p_QName ) )
            int alt117=3;
            switch ( input.LA(1) ) {
            case LAX:
                {
                alt117=1;
                }
                break;
            case STRICT:
                {
                alt117=2;
                }
                break;
            case AS:
                {
                alt117=3;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 117, 0, input);

                throw nvae;
            }

            switch (alt117) {
                case 1 :
                    // XQueryParser.g:688:14: k= LAX
                    {
                    k=(CommonToken)match(input,LAX,FOLLOW_LAX_in_p_ValidationMode6239); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    k_tree = (XQDTCommonTree)adaptor.create(k);
                    adaptor.addChild(root_0, k_tree);
                    }

                    }
                    break;
                case 2 :
                    // XQueryParser.g:688:22: k= STRICT
                    {
                    k=(CommonToken)match(input,STRICT,FOLLOW_STRICT_in_p_ValidationMode6245); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    k_tree = (XQDTCommonTree)adaptor.create(k);
                    adaptor.addChild(root_0, k_tree);
                    }

                    }
                    break;
                case 3 :
                    // XQueryParser.g:688:33: (k= AS p_QName )
                    {
                    // XQueryParser.g:688:33: (k= AS p_QName )
                    // XQueryParser.g:688:34: k= AS p_QName
                    {
                    k=(CommonToken)match(input,AS,FOLLOW_AS_in_p_ValidationMode6252); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    k_tree = (XQDTCommonTree)adaptor.create(k);
                    adaptor.addChild(root_0, k_tree);
                    }
                    pushFollow(FOLLOW_p_QName_in_p_ValidationMode6254);
                    p_QName269=p_QName();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, p_QName269.getTree());

                    }


                    }
                    break;

            }

            if ( state.backtracking==0 ) {
              ak(k);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (XQDTCommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (XQDTCommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "p_ValidationMode"

    public static class p_ExtensionExpr_return extends ParserRuleReturnScope {
        XQDTCommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "p_ExtensionExpr"
    // XQueryParser.g:692:1: p_ExtensionExpr : ( L_Pragma )+ LBRACKET ( pm_Expr )? RBRACKET ;
    public final XQueryParser.p_ExtensionExpr_return p_ExtensionExpr() throws RecognitionException {
        XQueryParser.p_ExtensionExpr_return retval = new XQueryParser.p_ExtensionExpr_return();
        retval.start = input.LT(1);

        XQDTCommonTree root_0 = null;

        CommonToken L_Pragma270=null;
        CommonToken LBRACKET271=null;
        CommonToken RBRACKET273=null;
        XQueryParser.pm_Expr_return pm_Expr272 = null;


        XQDTCommonTree L_Pragma270_tree=null;
        XQDTCommonTree LBRACKET271_tree=null;
        XQDTCommonTree RBRACKET273_tree=null;

        try {
            // XQueryParser.g:693:9: ( ( L_Pragma )+ LBRACKET ( pm_Expr )? RBRACKET )
            // XQueryParser.g:693:13: ( L_Pragma )+ LBRACKET ( pm_Expr )? RBRACKET
            {
            root_0 = (XQDTCommonTree)adaptor.nil();

            // XQueryParser.g:693:13: ( L_Pragma )+
            int cnt118=0;
            loop118:
            do {
                int alt118=2;
                int LA118_0 = input.LA(1);

                if ( (LA118_0==L_Pragma) ) {
                    alt118=1;
                }


                switch (alt118) {
            	case 1 :
            	    // XQueryParser.g:693:13: L_Pragma
            	    {
            	    L_Pragma270=(CommonToken)match(input,L_Pragma,FOLLOW_L_Pragma_in_p_ExtensionExpr6286); if (state.failed) return retval;
            	    if ( state.backtracking==0 ) {
            	    L_Pragma270_tree = (XQDTCommonTree)adaptor.create(L_Pragma270);
            	    adaptor.addChild(root_0, L_Pragma270_tree);
            	    }

            	    }
            	    break;

            	default :
            	    if ( cnt118 >= 1 ) break loop118;
            	    if (state.backtracking>0) {state.failed=true; return retval;}
                        EarlyExitException eee =
                            new EarlyExitException(118, input);
                        throw eee;
                }
                cnt118++;
            } while (true);

            LBRACKET271=(CommonToken)match(input,LBRACKET,FOLLOW_LBRACKET_in_p_ExtensionExpr6289); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            LBRACKET271_tree = (XQDTCommonTree)adaptor.create(LBRACKET271);
            adaptor.addChild(root_0, LBRACKET271_tree);
            }
            // XQueryParser.g:693:32: ( pm_Expr )?
            int alt119=2;
            int LA119_0 = input.LA(1);

            if ( ((LA119_0>=ANCESTOR && LA119_0<=DECIMAL_SEPARATOR)||(LA119_0>=DIGIT && LA119_0<=NEXT)||(LA119_0>=ONLY && LA119_0<=EXIT)||(LA119_0>=SEQUENTIAL && LA119_0<=MAINTAINED)||(LA119_0>=MUTABLE && LA119_0<=LPAREN)||LA119_0==DOLLAR||(LA119_0>=STAR && LA119_0<=SMALLER)||(LA119_0>=SLASH && LA119_0<=DOT_DOT)||LA119_0==ATTR_SIGN||(LA119_0>=APOS && LA119_0<=QUOT)||LA119_0==L_NCName||(LA119_0>=L_Pragma && LA119_0<=L_DoubleLiteral)||LA119_0==EXPLICITLY) ) {
                alt119=1;
            }
            switch (alt119) {
                case 1 :
                    // XQueryParser.g:693:32: pm_Expr
                    {
                    pushFollow(FOLLOW_pm_Expr_in_p_ExtensionExpr6291);
                    pm_Expr272=pm_Expr();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, pm_Expr272.getTree());

                    }
                    break;

            }

            RBRACKET273=(CommonToken)match(input,RBRACKET,FOLLOW_RBRACKET_in_p_ExtensionExpr6294); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            RBRACKET273_tree = (XQDTCommonTree)adaptor.create(RBRACKET273);
            adaptor.addChild(root_0, RBRACKET273_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (XQDTCommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (XQDTCommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "p_ExtensionExpr"

    public static class p_PathExpr_return extends ParserRuleReturnScope {
        XQDTCommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "p_PathExpr"
    // XQueryParser.g:704:1: p_PathExpr : ( ( SLASH p_RelativePathExpr )=> ( SLASH p_RelativePathExpr ) | SLASH | SLASH_SLASH p_RelativePathExpr | p_RelativePathExpr );
    public final XQueryParser.p_PathExpr_return p_PathExpr() throws RecognitionException {
        XQueryParser.p_PathExpr_return retval = new XQueryParser.p_PathExpr_return();
        retval.start = input.LT(1);

        XQDTCommonTree root_0 = null;

        CommonToken SLASH274=null;
        CommonToken SLASH276=null;
        CommonToken SLASH_SLASH277=null;
        XQueryParser.p_RelativePathExpr_return p_RelativePathExpr275 = null;

        XQueryParser.p_RelativePathExpr_return p_RelativePathExpr278 = null;

        XQueryParser.p_RelativePathExpr_return p_RelativePathExpr279 = null;


        XQDTCommonTree SLASH274_tree=null;
        XQDTCommonTree SLASH276_tree=null;
        XQDTCommonTree SLASH_SLASH277_tree=null;

        try {
            // XQueryParser.g:705:9: ( ( SLASH p_RelativePathExpr )=> ( SLASH p_RelativePathExpr ) | SLASH | SLASH_SLASH p_RelativePathExpr | p_RelativePathExpr )
            int alt120=4;
            alt120 = dfa120.predict(input);
            switch (alt120) {
                case 1 :
                    // XQueryParser.g:705:11: ( SLASH p_RelativePathExpr )=> ( SLASH p_RelativePathExpr )
                    {
                    root_0 = (XQDTCommonTree)adaptor.nil();

                    // XQueryParser.g:705:41: ( SLASH p_RelativePathExpr )
                    // XQueryParser.g:705:42: SLASH p_RelativePathExpr
                    {
                    SLASH274=(CommonToken)match(input,SLASH,FOLLOW_SLASH_in_p_PathExpr6336); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    SLASH274_tree = (XQDTCommonTree)adaptor.create(SLASH274);
                    adaptor.addChild(root_0, SLASH274_tree);
                    }
                    pushFollow(FOLLOW_p_RelativePathExpr_in_p_PathExpr6338);
                    p_RelativePathExpr275=p_RelativePathExpr();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, p_RelativePathExpr275.getTree());

                    }


                    }
                    break;
                case 2 :
                    // XQueryParser.g:706:11: SLASH
                    {
                    root_0 = (XQDTCommonTree)adaptor.nil();

                    SLASH276=(CommonToken)match(input,SLASH,FOLLOW_SLASH_in_p_PathExpr6351); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    SLASH276_tree = (XQDTCommonTree)adaptor.create(SLASH276);
                    adaptor.addChild(root_0, SLASH276_tree);
                    }

                    }
                    break;
                case 3 :
                    // XQueryParser.g:707:11: SLASH_SLASH p_RelativePathExpr
                    {
                    root_0 = (XQDTCommonTree)adaptor.nil();

                    SLASH_SLASH277=(CommonToken)match(input,SLASH_SLASH,FOLLOW_SLASH_SLASH_in_p_PathExpr6363); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    SLASH_SLASH277_tree = (XQDTCommonTree)adaptor.create(SLASH_SLASH277);
                    adaptor.addChild(root_0, SLASH_SLASH277_tree);
                    }
                    pushFollow(FOLLOW_p_RelativePathExpr_in_p_PathExpr6365);
                    p_RelativePathExpr278=p_RelativePathExpr();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, p_RelativePathExpr278.getTree());

                    }
                    break;
                case 4 :
                    // XQueryParser.g:708:11: p_RelativePathExpr
                    {
                    root_0 = (XQDTCommonTree)adaptor.nil();

                    pushFollow(FOLLOW_p_RelativePathExpr_in_p_PathExpr6377);
                    p_RelativePathExpr279=p_RelativePathExpr();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, p_RelativePathExpr279.getTree());

                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (XQDTCommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (XQDTCommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "p_PathExpr"

    public static class p_RelativePathExpr_return extends ParserRuleReturnScope {
        XQDTCommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "p_RelativePathExpr"
    // XQueryParser.g:712:1: p_RelativePathExpr : p_StepExpr ( ( SLASH | SLASH_SLASH ) p_StepExpr )* ;
    public final XQueryParser.p_RelativePathExpr_return p_RelativePathExpr() throws RecognitionException {
        XQueryParser.p_RelativePathExpr_return retval = new XQueryParser.p_RelativePathExpr_return();
        retval.start = input.LT(1);

        XQDTCommonTree root_0 = null;

        CommonToken set281=null;
        XQueryParser.p_StepExpr_return p_StepExpr280 = null;

        XQueryParser.p_StepExpr_return p_StepExpr282 = null;


        XQDTCommonTree set281_tree=null;

        try {
            // XQueryParser.g:713:9: ( p_StepExpr ( ( SLASH | SLASH_SLASH ) p_StepExpr )* )
            // XQueryParser.g:713:11: p_StepExpr ( ( SLASH | SLASH_SLASH ) p_StepExpr )*
            {
            root_0 = (XQDTCommonTree)adaptor.nil();

            pushFollow(FOLLOW_p_StepExpr_in_p_RelativePathExpr6405);
            p_StepExpr280=p_StepExpr();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, p_StepExpr280.getTree());
            // XQueryParser.g:713:22: ( ( SLASH | SLASH_SLASH ) p_StepExpr )*
            loop121:
            do {
                int alt121=2;
                int LA121_0 = input.LA(1);

                if ( ((LA121_0>=SLASH && LA121_0<=SLASH_SLASH)) ) {
                    alt121=1;
                }


                switch (alt121) {
            	case 1 :
            	    // XQueryParser.g:713:23: ( SLASH | SLASH_SLASH ) p_StepExpr
            	    {
            	    set281=(CommonToken)input.LT(1);
            	    if ( (input.LA(1)>=SLASH && input.LA(1)<=SLASH_SLASH) ) {
            	        input.consume();
            	        if ( state.backtracking==0 ) adaptor.addChild(root_0, (XQDTCommonTree)adaptor.create(set281));
            	        state.errorRecovery=false;state.failed=false;
            	    }
            	    else {
            	        if (state.backtracking>0) {state.failed=true; return retval;}
            	        MismatchedSetException mse = new MismatchedSetException(null,input);
            	        throw mse;
            	    }

            	    pushFollow(FOLLOW_p_StepExpr_in_p_RelativePathExpr6416);
            	    p_StepExpr282=p_StepExpr();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, p_StepExpr282.getTree());

            	    }
            	    break;

            	default :
            	    break loop121;
                }
            } while (true);


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (XQDTCommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (XQDTCommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "p_RelativePathExpr"

    public static class p_StepExpr_return extends ParserRuleReturnScope {
        XQDTCommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "p_StepExpr"
    // XQueryParser.g:717:1: p_StepExpr : ( p_AxisStep | p_FilterExpr );
    public final XQueryParser.p_StepExpr_return p_StepExpr() throws RecognitionException {
        XQueryParser.p_StepExpr_return retval = new XQueryParser.p_StepExpr_return();
        retval.start = input.LT(1);

        XQDTCommonTree root_0 = null;

        XQueryParser.p_AxisStep_return p_AxisStep283 = null;

        XQueryParser.p_FilterExpr_return p_FilterExpr284 = null;



        try {
            // XQueryParser.g:718:9: ( p_AxisStep | p_FilterExpr )
            int alt122=2;
            alt122 = dfa122.predict(input);
            switch (alt122) {
                case 1 :
                    // XQueryParser.g:718:11: p_AxisStep
                    {
                    root_0 = (XQDTCommonTree)adaptor.nil();

                    pushFollow(FOLLOW_p_AxisStep_in_p_StepExpr6444);
                    p_AxisStep283=p_AxisStep();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, p_AxisStep283.getTree());

                    }
                    break;
                case 2 :
                    // XQueryParser.g:719:11: p_FilterExpr
                    {
                    root_0 = (XQDTCommonTree)adaptor.nil();

                    pushFollow(FOLLOW_p_FilterExpr_in_p_StepExpr6456);
                    p_FilterExpr284=p_FilterExpr();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, p_FilterExpr284.getTree());

                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (XQDTCommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (XQDTCommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "p_StepExpr"

    public static class p_AxisStep_return extends ParserRuleReturnScope {
        XQDTCommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "p_AxisStep"
    // XQueryParser.g:723:1: p_AxisStep : ( p_ReverseStep | p_ForwardStep ) p_PredicateList ;
    public final XQueryParser.p_AxisStep_return p_AxisStep() throws RecognitionException {
        XQueryParser.p_AxisStep_return retval = new XQueryParser.p_AxisStep_return();
        retval.start = input.LT(1);

        XQDTCommonTree root_0 = null;

        XQueryParser.p_ReverseStep_return p_ReverseStep285 = null;

        XQueryParser.p_ForwardStep_return p_ForwardStep286 = null;

        XQueryParser.p_PredicateList_return p_PredicateList287 = null;



        try {
            // XQueryParser.g:724:9: ( ( p_ReverseStep | p_ForwardStep ) p_PredicateList )
            // XQueryParser.g:724:11: ( p_ReverseStep | p_ForwardStep ) p_PredicateList
            {
            root_0 = (XQDTCommonTree)adaptor.nil();

            // XQueryParser.g:724:11: ( p_ReverseStep | p_ForwardStep )
            int alt123=2;
            switch ( input.LA(1) ) {
            case PARENT:
                {
                int LA123_1 = input.LA(2);

                if ( (LA123_1==COLON_COLON) ) {
                    alt123=1;
                }
                else if ( (LA123_1==EOF||(LA123_1>=AND && LA123_1<=ASCENDING)||(LA123_1>=BY && LA123_1<=CASTABLE)||LA123_1==COLLATION||LA123_1==DEFAULT||(LA123_1>=DESCENDING && LA123_1<=DIV)||(LA123_1>=ELSE && LA123_1<=EMPTY)||LA123_1==EQ||LA123_1==EXCEPT||LA123_1==FOR||LA123_1==GE||(LA123_1>=GT && LA123_1<=IDIV)||(LA123_1>=INSTANCE && LA123_1<=IS)||LA123_1==LE||(LA123_1>=LET && LA123_1<=MOD)||LA123_1==NE||(LA123_1>=OR && LA123_1<=ORDER)||(LA123_1>=RETURN && LA123_1<=SATISFIES)||LA123_1==STABLE||(LA123_1>=TO && LA123_1<=TREAT)||LA123_1==UNION||LA123_1==WHERE||LA123_1==COUNT||(LA123_1>=END && LA123_1<=GROUP)||LA123_1==ONLY||LA123_1==START||(LA123_1>=AFTER && LA123_1<=BEFORE)||LA123_1==INTO||LA123_1==MODIFY||LA123_1==WITH||LA123_1==CONTAINS||LA123_1==PARAGRAPHS||LA123_1==SENTENCES||LA123_1==TIMES||LA123_1==WORDS||LA123_1==RPAREN||(LA123_1>=RBRACKET && LA123_1<=EQUAL)||LA123_1==NOTEQUAL||LA123_1==COMMA||(LA123_1>=STAR && LA123_1<=SLASH_SLASH)||LA123_1==COLON||(LA123_1>=SEMICOLON && LA123_1<=VBAR)) ) {
                    alt123=2;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 123, 1, input);

                    throw nvae;
                }
                }
                break;
            case ANCESTOR:
                {
                int LA123_2 = input.LA(2);

                if ( (LA123_2==COLON_COLON) ) {
                    alt123=1;
                }
                else if ( (LA123_2==EOF||(LA123_2>=AND && LA123_2<=ASCENDING)||(LA123_2>=BY && LA123_2<=CASTABLE)||LA123_2==COLLATION||LA123_2==DEFAULT||(LA123_2>=DESCENDING && LA123_2<=DIV)||(LA123_2>=ELSE && LA123_2<=EMPTY)||LA123_2==EQ||LA123_2==EXCEPT||LA123_2==FOR||LA123_2==GE||(LA123_2>=GT && LA123_2<=IDIV)||(LA123_2>=INSTANCE && LA123_2<=IS)||LA123_2==LE||(LA123_2>=LET && LA123_2<=MOD)||LA123_2==NE||(LA123_2>=OR && LA123_2<=ORDER)||(LA123_2>=RETURN && LA123_2<=SATISFIES)||LA123_2==STABLE||(LA123_2>=TO && LA123_2<=TREAT)||LA123_2==UNION||LA123_2==WHERE||LA123_2==COUNT||(LA123_2>=END && LA123_2<=GROUP)||LA123_2==ONLY||LA123_2==START||(LA123_2>=AFTER && LA123_2<=BEFORE)||LA123_2==INTO||LA123_2==MODIFY||LA123_2==WITH||LA123_2==CONTAINS||LA123_2==PARAGRAPHS||LA123_2==SENTENCES||LA123_2==TIMES||LA123_2==WORDS||LA123_2==RPAREN||(LA123_2>=RBRACKET && LA123_2<=EQUAL)||LA123_2==NOTEQUAL||LA123_2==COMMA||(LA123_2>=STAR && LA123_2<=SLASH_SLASH)||LA123_2==COLON||(LA123_2>=SEMICOLON && LA123_2<=VBAR)) ) {
                    alt123=2;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 123, 2, input);

                    throw nvae;
                }
                }
                break;
            case PRECEDING_SIBLING:
                {
                int LA123_3 = input.LA(2);

                if ( (LA123_3==COLON_COLON) ) {
                    alt123=1;
                }
                else if ( (LA123_3==EOF||(LA123_3>=AND && LA123_3<=ASCENDING)||(LA123_3>=BY && LA123_3<=CASTABLE)||LA123_3==COLLATION||LA123_3==DEFAULT||(LA123_3>=DESCENDING && LA123_3<=DIV)||(LA123_3>=ELSE && LA123_3<=EMPTY)||LA123_3==EQ||LA123_3==EXCEPT||LA123_3==FOR||LA123_3==GE||(LA123_3>=GT && LA123_3<=IDIV)||(LA123_3>=INSTANCE && LA123_3<=IS)||LA123_3==LE||(LA123_3>=LET && LA123_3<=MOD)||LA123_3==NE||(LA123_3>=OR && LA123_3<=ORDER)||(LA123_3>=RETURN && LA123_3<=SATISFIES)||LA123_3==STABLE||(LA123_3>=TO && LA123_3<=TREAT)||LA123_3==UNION||LA123_3==WHERE||LA123_3==COUNT||(LA123_3>=END && LA123_3<=GROUP)||LA123_3==ONLY||LA123_3==START||(LA123_3>=AFTER && LA123_3<=BEFORE)||LA123_3==INTO||LA123_3==MODIFY||LA123_3==WITH||LA123_3==CONTAINS||LA123_3==PARAGRAPHS||LA123_3==SENTENCES||LA123_3==TIMES||LA123_3==WORDS||LA123_3==RPAREN||(LA123_3>=RBRACKET && LA123_3<=EQUAL)||LA123_3==NOTEQUAL||LA123_3==COMMA||(LA123_3>=STAR && LA123_3<=SLASH_SLASH)||LA123_3==COLON||(LA123_3>=SEMICOLON && LA123_3<=VBAR)) ) {
                    alt123=2;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 123, 3, input);

                    throw nvae;
                }
                }
                break;
            case PRECEDING:
                {
                int LA123_4 = input.LA(2);

                if ( (LA123_4==COLON_COLON) ) {
                    alt123=1;
                }
                else if ( (LA123_4==EOF||(LA123_4>=AND && LA123_4<=ASCENDING)||(LA123_4>=BY && LA123_4<=CASTABLE)||LA123_4==COLLATION||LA123_4==DEFAULT||(LA123_4>=DESCENDING && LA123_4<=DIV)||(LA123_4>=ELSE && LA123_4<=EMPTY)||LA123_4==EQ||LA123_4==EXCEPT||LA123_4==FOR||LA123_4==GE||(LA123_4>=GT && LA123_4<=IDIV)||(LA123_4>=INSTANCE && LA123_4<=IS)||LA123_4==LE||(LA123_4>=LET && LA123_4<=MOD)||LA123_4==NE||(LA123_4>=OR && LA123_4<=ORDER)||(LA123_4>=RETURN && LA123_4<=SATISFIES)||LA123_4==STABLE||(LA123_4>=TO && LA123_4<=TREAT)||LA123_4==UNION||LA123_4==WHERE||LA123_4==COUNT||(LA123_4>=END && LA123_4<=GROUP)||LA123_4==ONLY||LA123_4==START||(LA123_4>=AFTER && LA123_4<=BEFORE)||LA123_4==INTO||LA123_4==MODIFY||LA123_4==WITH||LA123_4==CONTAINS||LA123_4==PARAGRAPHS||LA123_4==SENTENCES||LA123_4==TIMES||LA123_4==WORDS||LA123_4==RPAREN||(LA123_4>=RBRACKET && LA123_4<=EQUAL)||LA123_4==NOTEQUAL||LA123_4==COMMA||(LA123_4>=STAR && LA123_4<=SLASH_SLASH)||LA123_4==COLON||(LA123_4>=SEMICOLON && LA123_4<=VBAR)) ) {
                    alt123=2;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 123, 4, input);

                    throw nvae;
                }
                }
                break;
            case ANCESTOR_OR_SELF:
                {
                int LA123_5 = input.LA(2);

                if ( (LA123_5==COLON_COLON) ) {
                    alt123=1;
                }
                else if ( (LA123_5==EOF||(LA123_5>=AND && LA123_5<=ASCENDING)||(LA123_5>=BY && LA123_5<=CASTABLE)||LA123_5==COLLATION||LA123_5==DEFAULT||(LA123_5>=DESCENDING && LA123_5<=DIV)||(LA123_5>=ELSE && LA123_5<=EMPTY)||LA123_5==EQ||LA123_5==EXCEPT||LA123_5==FOR||LA123_5==GE||(LA123_5>=GT && LA123_5<=IDIV)||(LA123_5>=INSTANCE && LA123_5<=IS)||LA123_5==LE||(LA123_5>=LET && LA123_5<=MOD)||LA123_5==NE||(LA123_5>=OR && LA123_5<=ORDER)||(LA123_5>=RETURN && LA123_5<=SATISFIES)||LA123_5==STABLE||(LA123_5>=TO && LA123_5<=TREAT)||LA123_5==UNION||LA123_5==WHERE||LA123_5==COUNT||(LA123_5>=END && LA123_5<=GROUP)||LA123_5==ONLY||LA123_5==START||(LA123_5>=AFTER && LA123_5<=BEFORE)||LA123_5==INTO||LA123_5==MODIFY||LA123_5==WITH||LA123_5==CONTAINS||LA123_5==PARAGRAPHS||LA123_5==SENTENCES||LA123_5==TIMES||LA123_5==WORDS||LA123_5==RPAREN||(LA123_5>=RBRACKET && LA123_5<=EQUAL)||LA123_5==NOTEQUAL||LA123_5==COMMA||(LA123_5>=STAR && LA123_5<=SLASH_SLASH)||LA123_5==COLON||(LA123_5>=SEMICOLON && LA123_5<=VBAR)) ) {
                    alt123=2;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 123, 5, input);

                    throw nvae;
                }
                }
                break;
            case DOT_DOT:
                {
                alt123=1;
                }
                break;
            case AND:
            case AS:
            case ASCENDING:
            case AT:
            case ATTRIBUTE:
            case BASE_URI:
            case BOUNDARY_SPACE:
            case BY:
            case CASE:
            case CAST:
            case CASTABLE:
            case CHILD:
            case COLLATION:
            case COMMENT:
            case CONSTRUCTION:
            case COPY_NAMESPACES:
            case DECLARE:
            case DEFAULT:
            case DESCENDANT:
            case DESCENDANT_OR_SELF:
            case DESCENDING:
            case DIV:
            case DOCUMENT:
            case DOCUMENT_NODE:
            case ELEMENT:
            case ELSE:
            case EMPTY:
            case EMPTY_SEQUENCE:
            case ENCODING:
            case EQ:
            case EVERY:
            case EXCEPT:
            case EXTERNAL:
            case FOLLOWING:
            case FOLLOWING_SIBLING:
            case FOR:
            case FUNCTION:
            case GE:
            case GREATEST:
            case GT:
            case IDIV:
            case IF:
            case IMPORT:
            case IN:
            case INHERIT:
            case INSTANCE:
            case INTERSECT:
            case IS:
            case ITEM:
            case LAX:
            case LE:
            case LEAST:
            case LET:
            case LT:
            case MOD:
            case MODULE:
            case NAMESPACE:
            case NE:
            case NO_INHERIT:
            case NO_PRESERVE:
            case NODE:
            case OF:
            case OPTION:
            case OR:
            case ORDER:
            case ORDERED:
            case ORDERING:
            case PRESERVE:
            case PROCESSING_INSTRUCTION:
            case RETURN:
            case SATISFIES:
            case SCHEMA:
            case SCHEMA_ATTRIBUTE:
            case SCHEMA_ELEMENT:
            case SELF:
            case SOME:
            case STABLE:
            case STRICT:
            case STRIP:
            case TEXT:
            case THEN:
            case TO:
            case TREAT:
            case TYPESWITCH:
            case UNION:
            case UNORDERED:
            case VALIDATE:
            case VARIABLE:
            case VERSION:
            case WHERE:
            case XQUERY:
            case CATCH:
            case CONTEXT:
            case COUNT:
            case DECIMAL_FORMAT:
            case DECIMAL_SEPARATOR:
            case DIGIT:
            case END:
            case GROUP:
            case GROUPING_SEPARATOR:
            case INFINITY:
            case MINUS_SIGN:
            case NAMESPACE_NODE:
            case NAN:
            case NEXT:
            case ONLY:
            case OUTER:
            case PATTERN_SEPARATOR:
            case PERCENT:
            case PER_MILLE:
            case PRIVATE:
            case PUBLIC:
            case PREVIOUS:
            case SLIDING:
            case START:
            case SWITCH:
            case TRY:
            case TUMBLING:
            case WHEN:
            case WINDOW:
            case ZERO_DIGIT:
            case AFTER:
            case BEFORE:
            case COPY:
            case DELETE:
            case FIRST:
            case INSERT:
            case INTO:
            case LAST:
            case MODIFY:
            case NODES:
            case RENAME:
            case REPLACE:
            case REVALIDATION:
            case SKIP:
            case UPDATING:
            case VALUE:
            case WITH:
            case ALL:
            case ANY:
            case CONTAINS:
            case CONTENT:
            case DIACRITICS:
            case DIFFERENT:
            case DISTANCE:
            case ENTIRE:
            case EXACTLY:
            case FROM:
            case FT_OPTION:
            case FTAND:
            case FTNOT:
            case FTOR:
            case INSENSITIVE:
            case LANGUAGE:
            case LEVELS:
            case LOWERCASE:
            case MOST:
            case NO:
            case NOT:
            case OCCURS:
            case PARAGRAPH:
            case PARAGRAPHS:
            case PHRASE:
            case RELATIONSHIP:
            case SAME:
            case SCORE:
            case SENSITIVE:
            case SENTENCE:
            case SENTENCES:
            case STEMMING:
            case STOP:
            case THESAURUS:
            case TIMES:
            case UPPERCASE:
            case USING:
            case WEIGHT:
            case WILDCARDS:
            case WITHOUT:
            case WORD:
            case WORDS:
            case BLOCK:
            case CONSTANT:
            case EXIT:
            case SEQUENTIAL:
            case SET:
            case SIMPLE:
            case WHILE:
            case EVAL:
            case APPEND_ONLY:
            case AUTOMATICALLY:
            case CHECK:
            case COLLECTION:
            case CONSTRAINT:
            case CONST:
            case EQUALITY:
            case FOREACH:
            case FOREIGN:
            case INDEX:
            case INTEGRITY:
            case KEY:
            case MAINTAINED:
            case MUTABLE:
            case NON:
            case ON:
            case QUEUE:
            case RANGE:
            case READ_ONLY:
            case UNIQUE:
            case BINARY:
            case AMP_ER:
            case APOS_ER:
            case QUOT_ER:
            case STAR:
            case ATTR_SIGN:
            case L_NCName:
            case EXPLICITLY:
                {
                alt123=2;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 123, 0, input);

                throw nvae;
            }

            switch (alt123) {
                case 1 :
                    // XQueryParser.g:724:12: p_ReverseStep
                    {
                    pushFollow(FOLLOW_p_ReverseStep_in_p_AxisStep6483);
                    p_ReverseStep285=p_ReverseStep();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, p_ReverseStep285.getTree());

                    }
                    break;
                case 2 :
                    // XQueryParser.g:724:28: p_ForwardStep
                    {
                    pushFollow(FOLLOW_p_ForwardStep_in_p_AxisStep6487);
                    p_ForwardStep286=p_ForwardStep();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, p_ForwardStep286.getTree());

                    }
                    break;

            }

            pushFollow(FOLLOW_p_PredicateList_in_p_AxisStep6490);
            p_PredicateList287=p_PredicateList();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, p_PredicateList287.getTree());

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (XQDTCommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (XQDTCommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "p_AxisStep"

    public static class p_ForwardStep_return extends ParserRuleReturnScope {
        XQDTCommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "p_ForwardStep"
    // XQueryParser.g:728:1: p_ForwardStep : ( ( p_ForwardAxis p_NodeTest ) | p_AbbrevForwardStep );
    public final XQueryParser.p_ForwardStep_return p_ForwardStep() throws RecognitionException {
        XQueryParser.p_ForwardStep_return retval = new XQueryParser.p_ForwardStep_return();
        retval.start = input.LT(1);

        XQDTCommonTree root_0 = null;

        XQueryParser.p_ForwardAxis_return p_ForwardAxis288 = null;

        XQueryParser.p_NodeTest_return p_NodeTest289 = null;

        XQueryParser.p_AbbrevForwardStep_return p_AbbrevForwardStep290 = null;



        try {
            // XQueryParser.g:729:9: ( ( p_ForwardAxis p_NodeTest ) | p_AbbrevForwardStep )
            int alt124=2;
            alt124 = dfa124.predict(input);
            switch (alt124) {
                case 1 :
                    // XQueryParser.g:729:11: ( p_ForwardAxis p_NodeTest )
                    {
                    root_0 = (XQDTCommonTree)adaptor.nil();

                    // XQueryParser.g:729:11: ( p_ForwardAxis p_NodeTest )
                    // XQueryParser.g:729:12: p_ForwardAxis p_NodeTest
                    {
                    pushFollow(FOLLOW_p_ForwardAxis_in_p_ForwardStep6517);
                    p_ForwardAxis288=p_ForwardAxis();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, p_ForwardAxis288.getTree());
                    pushFollow(FOLLOW_p_NodeTest_in_p_ForwardStep6519);
                    p_NodeTest289=p_NodeTest();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, p_NodeTest289.getTree());

                    }


                    }
                    break;
                case 2 :
                    // XQueryParser.g:729:40: p_AbbrevForwardStep
                    {
                    root_0 = (XQDTCommonTree)adaptor.nil();

                    pushFollow(FOLLOW_p_AbbrevForwardStep_in_p_ForwardStep6524);
                    p_AbbrevForwardStep290=p_AbbrevForwardStep();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, p_AbbrevForwardStep290.getTree());

                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (XQDTCommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (XQDTCommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "p_ForwardStep"

    public static class p_ForwardAxis_return extends ParserRuleReturnScope {
        XQDTCommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "p_ForwardAxis"
    // XQueryParser.g:733:1: p_ForwardAxis : ( CHILD COLON_COLON | DESCENDANT COLON_COLON | ATTRIBUTE COLON_COLON | SELF COLON_COLON | DESCENDANT_OR_SELF COLON_COLON | FOLLOWING_SIBLING COLON_COLON | FOLLOWING COLON_COLON );
    public final XQueryParser.p_ForwardAxis_return p_ForwardAxis() throws RecognitionException {
        XQueryParser.p_ForwardAxis_return retval = new XQueryParser.p_ForwardAxis_return();
        retval.start = input.LT(1);

        XQDTCommonTree root_0 = null;

        CommonToken CHILD291=null;
        CommonToken COLON_COLON292=null;
        CommonToken DESCENDANT293=null;
        CommonToken COLON_COLON294=null;
        CommonToken ATTRIBUTE295=null;
        CommonToken COLON_COLON296=null;
        CommonToken SELF297=null;
        CommonToken COLON_COLON298=null;
        CommonToken DESCENDANT_OR_SELF299=null;
        CommonToken COLON_COLON300=null;
        CommonToken FOLLOWING_SIBLING301=null;
        CommonToken COLON_COLON302=null;
        CommonToken FOLLOWING303=null;
        CommonToken COLON_COLON304=null;

        XQDTCommonTree CHILD291_tree=null;
        XQDTCommonTree COLON_COLON292_tree=null;
        XQDTCommonTree DESCENDANT293_tree=null;
        XQDTCommonTree COLON_COLON294_tree=null;
        XQDTCommonTree ATTRIBUTE295_tree=null;
        XQDTCommonTree COLON_COLON296_tree=null;
        XQDTCommonTree SELF297_tree=null;
        XQDTCommonTree COLON_COLON298_tree=null;
        XQDTCommonTree DESCENDANT_OR_SELF299_tree=null;
        XQDTCommonTree COLON_COLON300_tree=null;
        XQDTCommonTree FOLLOWING_SIBLING301_tree=null;
        XQDTCommonTree COLON_COLON302_tree=null;
        XQDTCommonTree FOLLOWING303_tree=null;
        XQDTCommonTree COLON_COLON304_tree=null;

        try {
            // XQueryParser.g:734:9: ( CHILD COLON_COLON | DESCENDANT COLON_COLON | ATTRIBUTE COLON_COLON | SELF COLON_COLON | DESCENDANT_OR_SELF COLON_COLON | FOLLOWING_SIBLING COLON_COLON | FOLLOWING COLON_COLON )
            int alt125=7;
            switch ( input.LA(1) ) {
            case CHILD:
                {
                alt125=1;
                }
                break;
            case DESCENDANT:
                {
                alt125=2;
                }
                break;
            case ATTRIBUTE:
                {
                alt125=3;
                }
                break;
            case SELF:
                {
                alt125=4;
                }
                break;
            case DESCENDANT_OR_SELF:
                {
                alt125=5;
                }
                break;
            case FOLLOWING_SIBLING:
                {
                alt125=6;
                }
                break;
            case FOLLOWING:
                {
                alt125=7;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 125, 0, input);

                throw nvae;
            }

            switch (alt125) {
                case 1 :
                    // XQueryParser.g:734:11: CHILD COLON_COLON
                    {
                    root_0 = (XQDTCommonTree)adaptor.nil();

                    CHILD291=(CommonToken)match(input,CHILD,FOLLOW_CHILD_in_p_ForwardAxis6550); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    CHILD291_tree = (XQDTCommonTree)adaptor.create(CHILD291);
                    adaptor.addChild(root_0, CHILD291_tree);
                    }
                    COLON_COLON292=(CommonToken)match(input,COLON_COLON,FOLLOW_COLON_COLON_in_p_ForwardAxis6552); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    COLON_COLON292_tree = (XQDTCommonTree)adaptor.create(COLON_COLON292);
                    adaptor.addChild(root_0, COLON_COLON292_tree);
                    }

                    }
                    break;
                case 2 :
                    // XQueryParser.g:735:11: DESCENDANT COLON_COLON
                    {
                    root_0 = (XQDTCommonTree)adaptor.nil();

                    DESCENDANT293=(CommonToken)match(input,DESCENDANT,FOLLOW_DESCENDANT_in_p_ForwardAxis6564); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    DESCENDANT293_tree = (XQDTCommonTree)adaptor.create(DESCENDANT293);
                    adaptor.addChild(root_0, DESCENDANT293_tree);
                    }
                    COLON_COLON294=(CommonToken)match(input,COLON_COLON,FOLLOW_COLON_COLON_in_p_ForwardAxis6566); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    COLON_COLON294_tree = (XQDTCommonTree)adaptor.create(COLON_COLON294);
                    adaptor.addChild(root_0, COLON_COLON294_tree);
                    }

                    }
                    break;
                case 3 :
                    // XQueryParser.g:736:11: ATTRIBUTE COLON_COLON
                    {
                    root_0 = (XQDTCommonTree)adaptor.nil();

                    ATTRIBUTE295=(CommonToken)match(input,ATTRIBUTE,FOLLOW_ATTRIBUTE_in_p_ForwardAxis6578); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    ATTRIBUTE295_tree = (XQDTCommonTree)adaptor.create(ATTRIBUTE295);
                    adaptor.addChild(root_0, ATTRIBUTE295_tree);
                    }
                    COLON_COLON296=(CommonToken)match(input,COLON_COLON,FOLLOW_COLON_COLON_in_p_ForwardAxis6580); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    COLON_COLON296_tree = (XQDTCommonTree)adaptor.create(COLON_COLON296);
                    adaptor.addChild(root_0, COLON_COLON296_tree);
                    }

                    }
                    break;
                case 4 :
                    // XQueryParser.g:737:11: SELF COLON_COLON
                    {
                    root_0 = (XQDTCommonTree)adaptor.nil();

                    SELF297=(CommonToken)match(input,SELF,FOLLOW_SELF_in_p_ForwardAxis6592); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    SELF297_tree = (XQDTCommonTree)adaptor.create(SELF297);
                    adaptor.addChild(root_0, SELF297_tree);
                    }
                    COLON_COLON298=(CommonToken)match(input,COLON_COLON,FOLLOW_COLON_COLON_in_p_ForwardAxis6594); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    COLON_COLON298_tree = (XQDTCommonTree)adaptor.create(COLON_COLON298);
                    adaptor.addChild(root_0, COLON_COLON298_tree);
                    }

                    }
                    break;
                case 5 :
                    // XQueryParser.g:738:11: DESCENDANT_OR_SELF COLON_COLON
                    {
                    root_0 = (XQDTCommonTree)adaptor.nil();

                    DESCENDANT_OR_SELF299=(CommonToken)match(input,DESCENDANT_OR_SELF,FOLLOW_DESCENDANT_OR_SELF_in_p_ForwardAxis6606); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    DESCENDANT_OR_SELF299_tree = (XQDTCommonTree)adaptor.create(DESCENDANT_OR_SELF299);
                    adaptor.addChild(root_0, DESCENDANT_OR_SELF299_tree);
                    }
                    COLON_COLON300=(CommonToken)match(input,COLON_COLON,FOLLOW_COLON_COLON_in_p_ForwardAxis6608); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    COLON_COLON300_tree = (XQDTCommonTree)adaptor.create(COLON_COLON300);
                    adaptor.addChild(root_0, COLON_COLON300_tree);
                    }

                    }
                    break;
                case 6 :
                    // XQueryParser.g:739:11: FOLLOWING_SIBLING COLON_COLON
                    {
                    root_0 = (XQDTCommonTree)adaptor.nil();

                    FOLLOWING_SIBLING301=(CommonToken)match(input,FOLLOWING_SIBLING,FOLLOW_FOLLOWING_SIBLING_in_p_ForwardAxis6620); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    FOLLOWING_SIBLING301_tree = (XQDTCommonTree)adaptor.create(FOLLOWING_SIBLING301);
                    adaptor.addChild(root_0, FOLLOWING_SIBLING301_tree);
                    }
                    COLON_COLON302=(CommonToken)match(input,COLON_COLON,FOLLOW_COLON_COLON_in_p_ForwardAxis6622); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    COLON_COLON302_tree = (XQDTCommonTree)adaptor.create(COLON_COLON302);
                    adaptor.addChild(root_0, COLON_COLON302_tree);
                    }

                    }
                    break;
                case 7 :
                    // XQueryParser.g:740:11: FOLLOWING COLON_COLON
                    {
                    root_0 = (XQDTCommonTree)adaptor.nil();

                    FOLLOWING303=(CommonToken)match(input,FOLLOWING,FOLLOW_FOLLOWING_in_p_ForwardAxis6634); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    FOLLOWING303_tree = (XQDTCommonTree)adaptor.create(FOLLOWING303);
                    adaptor.addChild(root_0, FOLLOWING303_tree);
                    }
                    COLON_COLON304=(CommonToken)match(input,COLON_COLON,FOLLOW_COLON_COLON_in_p_ForwardAxis6636); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    COLON_COLON304_tree = (XQDTCommonTree)adaptor.create(COLON_COLON304);
                    adaptor.addChild(root_0, COLON_COLON304_tree);
                    }

                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (XQDTCommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (XQDTCommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "p_ForwardAxis"

    public static class p_AbbrevForwardStep_return extends ParserRuleReturnScope {
        XQDTCommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "p_AbbrevForwardStep"
    // XQueryParser.g:744:1: p_AbbrevForwardStep : ( ATTR_SIGN )? p_NodeTest ;
    public final XQueryParser.p_AbbrevForwardStep_return p_AbbrevForwardStep() throws RecognitionException {
        XQueryParser.p_AbbrevForwardStep_return retval = new XQueryParser.p_AbbrevForwardStep_return();
        retval.start = input.LT(1);

        XQDTCommonTree root_0 = null;

        CommonToken ATTR_SIGN305=null;
        XQueryParser.p_NodeTest_return p_NodeTest306 = null;


        XQDTCommonTree ATTR_SIGN305_tree=null;

        try {
            // XQueryParser.g:745:9: ( ( ATTR_SIGN )? p_NodeTest )
            // XQueryParser.g:745:11: ( ATTR_SIGN )? p_NodeTest
            {
            root_0 = (XQDTCommonTree)adaptor.nil();

            // XQueryParser.g:745:11: ( ATTR_SIGN )?
            int alt126=2;
            int LA126_0 = input.LA(1);

            if ( (LA126_0==ATTR_SIGN) ) {
                alt126=1;
            }
            switch (alt126) {
                case 1 :
                    // XQueryParser.g:745:11: ATTR_SIGN
                    {
                    ATTR_SIGN305=(CommonToken)match(input,ATTR_SIGN,FOLLOW_ATTR_SIGN_in_p_AbbrevForwardStep6662); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    ATTR_SIGN305_tree = (XQDTCommonTree)adaptor.create(ATTR_SIGN305);
                    adaptor.addChild(root_0, ATTR_SIGN305_tree);
                    }

                    }
                    break;

            }

            pushFollow(FOLLOW_p_NodeTest_in_p_AbbrevForwardStep6665);
            p_NodeTest306=p_NodeTest();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, p_NodeTest306.getTree());

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (XQDTCommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (XQDTCommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "p_AbbrevForwardStep"

    public static class p_ReverseStep_return extends ParserRuleReturnScope {
        XQDTCommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "p_ReverseStep"
    // XQueryParser.g:749:1: p_ReverseStep : ( ( p_ReverseAxis p_NodeTest ) | p_AbbrevReverseStep );
    public final XQueryParser.p_ReverseStep_return p_ReverseStep() throws RecognitionException {
        XQueryParser.p_ReverseStep_return retval = new XQueryParser.p_ReverseStep_return();
        retval.start = input.LT(1);

        XQDTCommonTree root_0 = null;

        XQueryParser.p_ReverseAxis_return p_ReverseAxis307 = null;

        XQueryParser.p_NodeTest_return p_NodeTest308 = null;

        XQueryParser.p_AbbrevReverseStep_return p_AbbrevReverseStep309 = null;



        try {
            // XQueryParser.g:750:9: ( ( p_ReverseAxis p_NodeTest ) | p_AbbrevReverseStep )
            int alt127=2;
            int LA127_0 = input.LA(1);

            if ( ((LA127_0>=ANCESTOR && LA127_0<=ANCESTOR_OR_SELF)||(LA127_0>=PARENT && LA127_0<=PRECEDING_SIBLING)) ) {
                alt127=1;
            }
            else if ( (LA127_0==DOT_DOT) ) {
                alt127=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 127, 0, input);

                throw nvae;
            }
            switch (alt127) {
                case 1 :
                    // XQueryParser.g:750:11: ( p_ReverseAxis p_NodeTest )
                    {
                    root_0 = (XQDTCommonTree)adaptor.nil();

                    // XQueryParser.g:750:11: ( p_ReverseAxis p_NodeTest )
                    // XQueryParser.g:750:12: p_ReverseAxis p_NodeTest
                    {
                    pushFollow(FOLLOW_p_ReverseAxis_in_p_ReverseStep6692);
                    p_ReverseAxis307=p_ReverseAxis();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, p_ReverseAxis307.getTree());
                    pushFollow(FOLLOW_p_NodeTest_in_p_ReverseStep6694);
                    p_NodeTest308=p_NodeTest();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, p_NodeTest308.getTree());

                    }


                    }
                    break;
                case 2 :
                    // XQueryParser.g:750:40: p_AbbrevReverseStep
                    {
                    root_0 = (XQDTCommonTree)adaptor.nil();

                    pushFollow(FOLLOW_p_AbbrevReverseStep_in_p_ReverseStep6699);
                    p_AbbrevReverseStep309=p_AbbrevReverseStep();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, p_AbbrevReverseStep309.getTree());

                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (XQDTCommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (XQDTCommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "p_ReverseStep"

    public static class p_ReverseAxis_return extends ParserRuleReturnScope {
        XQDTCommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "p_ReverseAxis"
    // XQueryParser.g:754:1: p_ReverseAxis : ( PARENT COLON_COLON | ANCESTOR COLON_COLON | PRECEDING_SIBLING COLON_COLON | PRECEDING COLON_COLON | ANCESTOR_OR_SELF COLON_COLON );
    public final XQueryParser.p_ReverseAxis_return p_ReverseAxis() throws RecognitionException {
        XQueryParser.p_ReverseAxis_return retval = new XQueryParser.p_ReverseAxis_return();
        retval.start = input.LT(1);

        XQDTCommonTree root_0 = null;

        CommonToken PARENT310=null;
        CommonToken COLON_COLON311=null;
        CommonToken ANCESTOR312=null;
        CommonToken COLON_COLON313=null;
        CommonToken PRECEDING_SIBLING314=null;
        CommonToken COLON_COLON315=null;
        CommonToken PRECEDING316=null;
        CommonToken COLON_COLON317=null;
        CommonToken ANCESTOR_OR_SELF318=null;
        CommonToken COLON_COLON319=null;

        XQDTCommonTree PARENT310_tree=null;
        XQDTCommonTree COLON_COLON311_tree=null;
        XQDTCommonTree ANCESTOR312_tree=null;
        XQDTCommonTree COLON_COLON313_tree=null;
        XQDTCommonTree PRECEDING_SIBLING314_tree=null;
        XQDTCommonTree COLON_COLON315_tree=null;
        XQDTCommonTree PRECEDING316_tree=null;
        XQDTCommonTree COLON_COLON317_tree=null;
        XQDTCommonTree ANCESTOR_OR_SELF318_tree=null;
        XQDTCommonTree COLON_COLON319_tree=null;

        try {
            // XQueryParser.g:755:9: ( PARENT COLON_COLON | ANCESTOR COLON_COLON | PRECEDING_SIBLING COLON_COLON | PRECEDING COLON_COLON | ANCESTOR_OR_SELF COLON_COLON )
            int alt128=5;
            switch ( input.LA(1) ) {
            case PARENT:
                {
                alt128=1;
                }
                break;
            case ANCESTOR:
                {
                alt128=2;
                }
                break;
            case PRECEDING_SIBLING:
                {
                alt128=3;
                }
                break;
            case PRECEDING:
                {
                alt128=4;
                }
                break;
            case ANCESTOR_OR_SELF:
                {
                alt128=5;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 128, 0, input);

                throw nvae;
            }

            switch (alt128) {
                case 1 :
                    // XQueryParser.g:755:11: PARENT COLON_COLON
                    {
                    root_0 = (XQDTCommonTree)adaptor.nil();

                    PARENT310=(CommonToken)match(input,PARENT,FOLLOW_PARENT_in_p_ReverseAxis6725); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    PARENT310_tree = (XQDTCommonTree)adaptor.create(PARENT310);
                    adaptor.addChild(root_0, PARENT310_tree);
                    }
                    COLON_COLON311=(CommonToken)match(input,COLON_COLON,FOLLOW_COLON_COLON_in_p_ReverseAxis6727); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    COLON_COLON311_tree = (XQDTCommonTree)adaptor.create(COLON_COLON311);
                    adaptor.addChild(root_0, COLON_COLON311_tree);
                    }

                    }
                    break;
                case 2 :
                    // XQueryParser.g:756:11: ANCESTOR COLON_COLON
                    {
                    root_0 = (XQDTCommonTree)adaptor.nil();

                    ANCESTOR312=(CommonToken)match(input,ANCESTOR,FOLLOW_ANCESTOR_in_p_ReverseAxis6739); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    ANCESTOR312_tree = (XQDTCommonTree)adaptor.create(ANCESTOR312);
                    adaptor.addChild(root_0, ANCESTOR312_tree);
                    }
                    COLON_COLON313=(CommonToken)match(input,COLON_COLON,FOLLOW_COLON_COLON_in_p_ReverseAxis6741); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    COLON_COLON313_tree = (XQDTCommonTree)adaptor.create(COLON_COLON313);
                    adaptor.addChild(root_0, COLON_COLON313_tree);
                    }

                    }
                    break;
                case 3 :
                    // XQueryParser.g:757:11: PRECEDING_SIBLING COLON_COLON
                    {
                    root_0 = (XQDTCommonTree)adaptor.nil();

                    PRECEDING_SIBLING314=(CommonToken)match(input,PRECEDING_SIBLING,FOLLOW_PRECEDING_SIBLING_in_p_ReverseAxis6753); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    PRECEDING_SIBLING314_tree = (XQDTCommonTree)adaptor.create(PRECEDING_SIBLING314);
                    adaptor.addChild(root_0, PRECEDING_SIBLING314_tree);
                    }
                    COLON_COLON315=(CommonToken)match(input,COLON_COLON,FOLLOW_COLON_COLON_in_p_ReverseAxis6755); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    COLON_COLON315_tree = (XQDTCommonTree)adaptor.create(COLON_COLON315);
                    adaptor.addChild(root_0, COLON_COLON315_tree);
                    }

                    }
                    break;
                case 4 :
                    // XQueryParser.g:758:11: PRECEDING COLON_COLON
                    {
                    root_0 = (XQDTCommonTree)adaptor.nil();

                    PRECEDING316=(CommonToken)match(input,PRECEDING,FOLLOW_PRECEDING_in_p_ReverseAxis6767); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    PRECEDING316_tree = (XQDTCommonTree)adaptor.create(PRECEDING316);
                    adaptor.addChild(root_0, PRECEDING316_tree);
                    }
                    COLON_COLON317=(CommonToken)match(input,COLON_COLON,FOLLOW_COLON_COLON_in_p_ReverseAxis6769); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    COLON_COLON317_tree = (XQDTCommonTree)adaptor.create(COLON_COLON317);
                    adaptor.addChild(root_0, COLON_COLON317_tree);
                    }

                    }
                    break;
                case 5 :
                    // XQueryParser.g:759:11: ANCESTOR_OR_SELF COLON_COLON
                    {
                    root_0 = (XQDTCommonTree)adaptor.nil();

                    ANCESTOR_OR_SELF318=(CommonToken)match(input,ANCESTOR_OR_SELF,FOLLOW_ANCESTOR_OR_SELF_in_p_ReverseAxis6781); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    ANCESTOR_OR_SELF318_tree = (XQDTCommonTree)adaptor.create(ANCESTOR_OR_SELF318);
                    adaptor.addChild(root_0, ANCESTOR_OR_SELF318_tree);
                    }
                    COLON_COLON319=(CommonToken)match(input,COLON_COLON,FOLLOW_COLON_COLON_in_p_ReverseAxis6783); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    COLON_COLON319_tree = (XQDTCommonTree)adaptor.create(COLON_COLON319);
                    adaptor.addChild(root_0, COLON_COLON319_tree);
                    }

                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (XQDTCommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (XQDTCommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "p_ReverseAxis"

    public static class p_AbbrevReverseStep_return extends ParserRuleReturnScope {
        XQDTCommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "p_AbbrevReverseStep"
    // XQueryParser.g:763:1: p_AbbrevReverseStep : DOT_DOT ;
    public final XQueryParser.p_AbbrevReverseStep_return p_AbbrevReverseStep() throws RecognitionException {
        XQueryParser.p_AbbrevReverseStep_return retval = new XQueryParser.p_AbbrevReverseStep_return();
        retval.start = input.LT(1);

        XQDTCommonTree root_0 = null;

        CommonToken DOT_DOT320=null;

        XQDTCommonTree DOT_DOT320_tree=null;

        try {
            // XQueryParser.g:764:9: ( DOT_DOT )
            // XQueryParser.g:764:11: DOT_DOT
            {
            root_0 = (XQDTCommonTree)adaptor.nil();

            DOT_DOT320=(CommonToken)match(input,DOT_DOT,FOLLOW_DOT_DOT_in_p_AbbrevReverseStep6809); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            DOT_DOT320_tree = (XQDTCommonTree)adaptor.create(DOT_DOT320);
            adaptor.addChild(root_0, DOT_DOT320_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (XQDTCommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (XQDTCommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "p_AbbrevReverseStep"

    public static class p_NodeTest_return extends ParserRuleReturnScope {
        XQDTCommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "p_NodeTest"
    // XQueryParser.g:768:1: p_NodeTest : ( p_KindTest | p_NameTest );
    public final XQueryParser.p_NodeTest_return p_NodeTest() throws RecognitionException {
        XQueryParser.p_NodeTest_return retval = new XQueryParser.p_NodeTest_return();
        retval.start = input.LT(1);

        XQDTCommonTree root_0 = null;

        XQueryParser.p_KindTest_return p_KindTest321 = null;

        XQueryParser.p_NameTest_return p_NameTest322 = null;



        try {
            // XQueryParser.g:769:9: ( p_KindTest | p_NameTest )
            int alt129=2;
            alt129 = dfa129.predict(input);
            switch (alt129) {
                case 1 :
                    // XQueryParser.g:769:11: p_KindTest
                    {
                    root_0 = (XQDTCommonTree)adaptor.nil();

                    pushFollow(FOLLOW_p_KindTest_in_p_NodeTest6835);
                    p_KindTest321=p_KindTest();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, p_KindTest321.getTree());

                    }
                    break;
                case 2 :
                    // XQueryParser.g:769:24: p_NameTest
                    {
                    root_0 = (XQDTCommonTree)adaptor.nil();

                    pushFollow(FOLLOW_p_NameTest_in_p_NodeTest6839);
                    p_NameTest322=p_NameTest();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, p_NameTest322.getTree());

                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (XQDTCommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (XQDTCommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "p_NodeTest"

    public static class p_NameTest_return extends ParserRuleReturnScope {
        XQDTCommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "p_NameTest"
    // XQueryParser.g:773:1: p_NameTest : ( p_QName | p_Wildcard );
    public final XQueryParser.p_NameTest_return p_NameTest() throws RecognitionException {
        XQueryParser.p_NameTest_return retval = new XQueryParser.p_NameTest_return();
        retval.start = input.LT(1);

        XQDTCommonTree root_0 = null;

        XQueryParser.p_QName_return p_QName323 = null;

        XQueryParser.p_Wildcard_return p_Wildcard324 = null;



        try {
            // XQueryParser.g:774:9: ( p_QName | p_Wildcard )
            int alt130=2;
            int LA130_0 = input.LA(1);

            if ( ((LA130_0>=ANCESTOR && LA130_0<=DECIMAL_SEPARATOR)||(LA130_0>=DIGIT && LA130_0<=NEXT)||(LA130_0>=ONLY && LA130_0<=EXIT)||(LA130_0>=SEQUENTIAL && LA130_0<=MAINTAINED)||(LA130_0>=MUTABLE && LA130_0<=QUOT_ER)||LA130_0==L_NCName||LA130_0==EXPLICITLY) ) {
                int LA130_1 = input.LA(2);

                if ( (LA130_1==COLON) ) {
                    int LA130_3 = input.LA(3);

                    if ( (LA130_3==STAR) ) {
                        alt130=2;
                    }
                    else if ( ((LA130_3>=ANCESTOR && LA130_3<=DECIMAL_SEPARATOR)||(LA130_3>=DIGIT && LA130_3<=NEXT)||(LA130_3>=ONLY && LA130_3<=EXIT)||(LA130_3>=SEQUENTIAL && LA130_3<=MAINTAINED)||(LA130_3>=MUTABLE && LA130_3<=QUOT_ER)||LA130_3==L_NCName||LA130_3==EXPLICITLY) ) {
                        alt130=1;
                    }
                    else {
                        if (state.backtracking>0) {state.failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("", 130, 3, input);

                        throw nvae;
                    }
                }
                else if ( (LA130_1==EOF||(LA130_1>=AND && LA130_1<=ASCENDING)||(LA130_1>=BY && LA130_1<=CASTABLE)||LA130_1==COLLATION||LA130_1==DEFAULT||(LA130_1>=DESCENDING && LA130_1<=DIV)||(LA130_1>=ELSE && LA130_1<=EMPTY)||LA130_1==EQ||LA130_1==EXCEPT||LA130_1==FOR||LA130_1==GE||(LA130_1>=GT && LA130_1<=IDIV)||(LA130_1>=INSTANCE && LA130_1<=IS)||LA130_1==LE||(LA130_1>=LET && LA130_1<=MOD)||LA130_1==NE||(LA130_1>=OR && LA130_1<=ORDER)||(LA130_1>=RETURN && LA130_1<=SATISFIES)||LA130_1==STABLE||(LA130_1>=TO && LA130_1<=TREAT)||LA130_1==UNION||LA130_1==WHERE||LA130_1==COUNT||(LA130_1>=END && LA130_1<=GROUP)||LA130_1==ONLY||LA130_1==START||(LA130_1>=AFTER && LA130_1<=BEFORE)||LA130_1==INTO||LA130_1==MODIFY||LA130_1==WITH||LA130_1==CONTAINS||LA130_1==PARAGRAPHS||LA130_1==SENTENCES||LA130_1==TIMES||LA130_1==WORDS||(LA130_1>=LPAREN && LA130_1<=RPAREN)||(LA130_1>=LBRACKET && LA130_1<=EQUAL)||LA130_1==NOTEQUAL||LA130_1==COMMA||(LA130_1>=STAR && LA130_1<=SLASH_SLASH)||(LA130_1>=SEMICOLON && LA130_1<=VBAR)) ) {
                    alt130=1;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 130, 1, input);

                    throw nvae;
                }
            }
            else if ( (LA130_0==STAR) ) {
                alt130=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 130, 0, input);

                throw nvae;
            }
            switch (alt130) {
                case 1 :
                    // XQueryParser.g:774:11: p_QName
                    {
                    root_0 = (XQDTCommonTree)adaptor.nil();

                    pushFollow(FOLLOW_p_QName_in_p_NameTest6865);
                    p_QName323=p_QName();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, p_QName323.getTree());

                    }
                    break;
                case 2 :
                    // XQueryParser.g:774:21: p_Wildcard
                    {
                    root_0 = (XQDTCommonTree)adaptor.nil();

                    pushFollow(FOLLOW_p_Wildcard_in_p_NameTest6869);
                    p_Wildcard324=p_Wildcard();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, p_Wildcard324.getTree());

                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (XQDTCommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (XQDTCommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "p_NameTest"

    public static class p_Wildcard_return extends ParserRuleReturnScope {
        XQDTCommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "p_Wildcard"
    // XQueryParser.g:778:1: p_Wildcard : ( STAR ( COLON p_NCName )? | ( p_NCName COLON STAR ) );
    public final XQueryParser.p_Wildcard_return p_Wildcard() throws RecognitionException {
        XQueryParser.p_Wildcard_return retval = new XQueryParser.p_Wildcard_return();
        retval.start = input.LT(1);

        XQDTCommonTree root_0 = null;

        CommonToken STAR325=null;
        CommonToken COLON326=null;
        CommonToken COLON329=null;
        CommonToken STAR330=null;
        XQueryParser.p_NCName_return p_NCName327 = null;

        XQueryParser.p_NCName_return p_NCName328 = null;


        XQDTCommonTree STAR325_tree=null;
        XQDTCommonTree COLON326_tree=null;
        XQDTCommonTree COLON329_tree=null;
        XQDTCommonTree STAR330_tree=null;

        setWsExplicit(true);
        try {
            // XQueryParser.g:779:9: ( STAR ( COLON p_NCName )? | ( p_NCName COLON STAR ) )
            int alt132=2;
            int LA132_0 = input.LA(1);

            if ( (LA132_0==STAR) ) {
                alt132=1;
            }
            else if ( ((LA132_0>=ANCESTOR && LA132_0<=DECIMAL_SEPARATOR)||(LA132_0>=DIGIT && LA132_0<=NEXT)||(LA132_0>=ONLY && LA132_0<=EXIT)||(LA132_0>=SEQUENTIAL && LA132_0<=MAINTAINED)||(LA132_0>=MUTABLE && LA132_0<=QUOT_ER)||LA132_0==L_NCName||LA132_0==EXPLICITLY) ) {
                alt132=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 132, 0, input);

                throw nvae;
            }
            switch (alt132) {
                case 1 :
                    // XQueryParser.g:779:11: STAR ( COLON p_NCName )?
                    {
                    root_0 = (XQDTCommonTree)adaptor.nil();

                    STAR325=(CommonToken)match(input,STAR,FOLLOW_STAR_in_p_Wildcard6899); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    STAR325_tree = (XQDTCommonTree)adaptor.create(STAR325);
                    adaptor.addChild(root_0, STAR325_tree);
                    }
                    // XQueryParser.g:779:16: ( COLON p_NCName )?
                    int alt131=2;
                    int LA131_0 = input.LA(1);

                    if ( (LA131_0==COLON) ) {
                        alt131=1;
                    }
                    switch (alt131) {
                        case 1 :
                            // XQueryParser.g:779:17: COLON p_NCName
                            {
                            COLON326=(CommonToken)match(input,COLON,FOLLOW_COLON_in_p_Wildcard6902); if (state.failed) return retval;
                            if ( state.backtracking==0 ) {
                            COLON326_tree = (XQDTCommonTree)adaptor.create(COLON326);
                            adaptor.addChild(root_0, COLON326_tree);
                            }
                            pushFollow(FOLLOW_p_NCName_in_p_Wildcard6904);
                            p_NCName327=p_NCName();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) adaptor.addChild(root_0, p_NCName327.getTree());

                            }
                            break;

                    }


                    }
                    break;
                case 2 :
                    // XQueryParser.g:779:36: ( p_NCName COLON STAR )
                    {
                    root_0 = (XQDTCommonTree)adaptor.nil();

                    // XQueryParser.g:779:36: ( p_NCName COLON STAR )
                    // XQueryParser.g:779:37: p_NCName COLON STAR
                    {
                    pushFollow(FOLLOW_p_NCName_in_p_Wildcard6911);
                    p_NCName328=p_NCName();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, p_NCName328.getTree());
                    COLON329=(CommonToken)match(input,COLON,FOLLOW_COLON_in_p_Wildcard6913); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    COLON329_tree = (XQDTCommonTree)adaptor.create(COLON329);
                    adaptor.addChild(root_0, COLON329_tree);
                    }
                    STAR330=(CommonToken)match(input,STAR,FOLLOW_STAR_in_p_Wildcard6915); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    STAR330_tree = (XQDTCommonTree)adaptor.create(STAR330);
                    adaptor.addChild(root_0, STAR330_tree);
                    }

                    }


                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (XQDTCommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (XQDTCommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            setWsExplicit(false);
        }
        return retval;
    }
    // $ANTLR end "p_Wildcard"

    public static class p_FilterExpr_return extends ParserRuleReturnScope {
        XQDTCommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "p_FilterExpr"
    // XQueryParser.g:784:1: p_FilterExpr : p_PrimaryExpr p_PredicateList ;
    public final XQueryParser.p_FilterExpr_return p_FilterExpr() throws RecognitionException {
        XQueryParser.p_FilterExpr_return retval = new XQueryParser.p_FilterExpr_return();
        retval.start = input.LT(1);

        XQDTCommonTree root_0 = null;

        XQueryParser.p_PrimaryExpr_return p_PrimaryExpr331 = null;

        XQueryParser.p_PredicateList_return p_PredicateList332 = null;



        try {
            // XQueryParser.g:785:9: ( p_PrimaryExpr p_PredicateList )
            // XQueryParser.g:785:13: p_PrimaryExpr p_PredicateList
            {
            root_0 = (XQDTCommonTree)adaptor.nil();

            pushFollow(FOLLOW_p_PrimaryExpr_in_p_FilterExpr6956);
            p_PrimaryExpr331=p_PrimaryExpr();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, p_PrimaryExpr331.getTree());
            pushFollow(FOLLOW_p_PredicateList_in_p_FilterExpr6958);
            p_PredicateList332=p_PredicateList();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, p_PredicateList332.getTree());

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (XQDTCommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (XQDTCommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "p_FilterExpr"

    public static class p_PredicateList_return extends ParserRuleReturnScope {
        XQDTCommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "p_PredicateList"
    // XQueryParser.g:789:1: p_PredicateList : ( p_Predicate )* ;
    public final XQueryParser.p_PredicateList_return p_PredicateList() throws RecognitionException {
        XQueryParser.p_PredicateList_return retval = new XQueryParser.p_PredicateList_return();
        retval.start = input.LT(1);

        XQDTCommonTree root_0 = null;

        XQueryParser.p_Predicate_return p_Predicate333 = null;



        try {
            // XQueryParser.g:790:9: ( ( p_Predicate )* )
            // XQueryParser.g:790:13: ( p_Predicate )*
            {
            root_0 = (XQDTCommonTree)adaptor.nil();

            // XQueryParser.g:790:13: ( p_Predicate )*
            loop133:
            do {
                int alt133=2;
                int LA133_0 = input.LA(1);

                if ( (LA133_0==LSQUARE) ) {
                    alt133=1;
                }


                switch (alt133) {
            	case 1 :
            	    // XQueryParser.g:790:13: p_Predicate
            	    {
            	    pushFollow(FOLLOW_p_Predicate_in_p_PredicateList6986);
            	    p_Predicate333=p_Predicate();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, p_Predicate333.getTree());

            	    }
            	    break;

            	default :
            	    break loop133;
                }
            } while (true);


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (XQDTCommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (XQDTCommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "p_PredicateList"

    public static class p_Predicate_return extends ParserRuleReturnScope {
        XQDTCommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "p_Predicate"
    // XQueryParser.g:794:1: p_Predicate : LSQUARE pm_Expr RSQUARE ;
    public final XQueryParser.p_Predicate_return p_Predicate() throws RecognitionException {
        XQueryParser.p_Predicate_return retval = new XQueryParser.p_Predicate_return();
        retval.start = input.LT(1);

        XQDTCommonTree root_0 = null;

        CommonToken LSQUARE334=null;
        CommonToken RSQUARE336=null;
        XQueryParser.pm_Expr_return pm_Expr335 = null;


        XQDTCommonTree LSQUARE334_tree=null;
        XQDTCommonTree RSQUARE336_tree=null;

        try {
            // XQueryParser.g:795:9: ( LSQUARE pm_Expr RSQUARE )
            // XQueryParser.g:795:13: LSQUARE pm_Expr RSQUARE
            {
            root_0 = (XQDTCommonTree)adaptor.nil();

            LSQUARE334=(CommonToken)match(input,LSQUARE,FOLLOW_LSQUARE_in_p_Predicate7015); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            LSQUARE334_tree = (XQDTCommonTree)adaptor.create(LSQUARE334);
            adaptor.addChild(root_0, LSQUARE334_tree);
            }
            pushFollow(FOLLOW_pm_Expr_in_p_Predicate7017);
            pm_Expr335=pm_Expr();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, pm_Expr335.getTree());
            RSQUARE336=(CommonToken)match(input,RSQUARE,FOLLOW_RSQUARE_in_p_Predicate7019); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            RSQUARE336_tree = (XQDTCommonTree)adaptor.create(RSQUARE336);
            adaptor.addChild(root_0, RSQUARE336_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (XQDTCommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (XQDTCommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "p_Predicate"

    public static class p_PrimaryExpr_return extends ParserRuleReturnScope {
        XQDTCommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "p_PrimaryExpr"
    // XQueryParser.g:799:1: p_PrimaryExpr : ( p_Literal | p_VarRef | p_ParenthesizedExpr | p_ContextItemExpr | p_FunctionCall | p_OrderedExpr | p_UnorderedExpr | p_Constructor );
    public final XQueryParser.p_PrimaryExpr_return p_PrimaryExpr() throws RecognitionException {
        XQueryParser.p_PrimaryExpr_return retval = new XQueryParser.p_PrimaryExpr_return();
        retval.start = input.LT(1);

        XQDTCommonTree root_0 = null;

        XQueryParser.p_Literal_return p_Literal337 = null;

        XQueryParser.p_VarRef_return p_VarRef338 = null;

        XQueryParser.p_ParenthesizedExpr_return p_ParenthesizedExpr339 = null;

        XQueryParser.p_ContextItemExpr_return p_ContextItemExpr340 = null;

        XQueryParser.p_FunctionCall_return p_FunctionCall341 = null;

        XQueryParser.p_OrderedExpr_return p_OrderedExpr342 = null;

        XQueryParser.p_UnorderedExpr_return p_UnorderedExpr343 = null;

        XQueryParser.p_Constructor_return p_Constructor344 = null;



        try {
            // XQueryParser.g:800:9: ( p_Literal | p_VarRef | p_ParenthesizedExpr | p_ContextItemExpr | p_FunctionCall | p_OrderedExpr | p_UnorderedExpr | p_Constructor )
            int alt134=8;
            alt134 = dfa134.predict(input);
            switch (alt134) {
                case 1 :
                    // XQueryParser.g:800:13: p_Literal
                    {
                    root_0 = (XQDTCommonTree)adaptor.nil();

                    pushFollow(FOLLOW_p_Literal_in_p_PrimaryExpr7047);
                    p_Literal337=p_Literal();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, p_Literal337.getTree());

                    }
                    break;
                case 2 :
                    // XQueryParser.g:801:11: p_VarRef
                    {
                    root_0 = (XQDTCommonTree)adaptor.nil();

                    pushFollow(FOLLOW_p_VarRef_in_p_PrimaryExpr7059);
                    p_VarRef338=p_VarRef();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, p_VarRef338.getTree());

                    }
                    break;
                case 3 :
                    // XQueryParser.g:802:11: p_ParenthesizedExpr
                    {
                    root_0 = (XQDTCommonTree)adaptor.nil();

                    pushFollow(FOLLOW_p_ParenthesizedExpr_in_p_PrimaryExpr7071);
                    p_ParenthesizedExpr339=p_ParenthesizedExpr();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, p_ParenthesizedExpr339.getTree());

                    }
                    break;
                case 4 :
                    // XQueryParser.g:803:11: p_ContextItemExpr
                    {
                    root_0 = (XQDTCommonTree)adaptor.nil();

                    pushFollow(FOLLOW_p_ContextItemExpr_in_p_PrimaryExpr7083);
                    p_ContextItemExpr340=p_ContextItemExpr();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, p_ContextItemExpr340.getTree());

                    }
                    break;
                case 5 :
                    // XQueryParser.g:804:11: p_FunctionCall
                    {
                    root_0 = (XQDTCommonTree)adaptor.nil();

                    pushFollow(FOLLOW_p_FunctionCall_in_p_PrimaryExpr7095);
                    p_FunctionCall341=p_FunctionCall();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, p_FunctionCall341.getTree());

                    }
                    break;
                case 6 :
                    // XQueryParser.g:805:11: p_OrderedExpr
                    {
                    root_0 = (XQDTCommonTree)adaptor.nil();

                    pushFollow(FOLLOW_p_OrderedExpr_in_p_PrimaryExpr7107);
                    p_OrderedExpr342=p_OrderedExpr();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, p_OrderedExpr342.getTree());

                    }
                    break;
                case 7 :
                    // XQueryParser.g:806:11: p_UnorderedExpr
                    {
                    root_0 = (XQDTCommonTree)adaptor.nil();

                    pushFollow(FOLLOW_p_UnorderedExpr_in_p_PrimaryExpr7119);
                    p_UnorderedExpr343=p_UnorderedExpr();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, p_UnorderedExpr343.getTree());

                    }
                    break;
                case 8 :
                    // XQueryParser.g:807:11: p_Constructor
                    {
                    root_0 = (XQDTCommonTree)adaptor.nil();

                    pushFollow(FOLLOW_p_Constructor_in_p_PrimaryExpr7131);
                    p_Constructor344=p_Constructor();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, p_Constructor344.getTree());

                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (XQDTCommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (XQDTCommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "p_PrimaryExpr"

    public static class p_Literal_return extends ParserRuleReturnScope {
        XQDTCommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "p_Literal"
    // XQueryParser.g:811:1: p_Literal : ( p_NumericLiteral | p_StringLiteral );
    public final XQueryParser.p_Literal_return p_Literal() throws RecognitionException {
        XQueryParser.p_Literal_return retval = new XQueryParser.p_Literal_return();
        retval.start = input.LT(1);

        XQDTCommonTree root_0 = null;

        XQueryParser.p_NumericLiteral_return p_NumericLiteral345 = null;

        XQueryParser.p_StringLiteral_return p_StringLiteral346 = null;



        try {
            // XQueryParser.g:812:9: ( p_NumericLiteral | p_StringLiteral )
            int alt135=2;
            int LA135_0 = input.LA(1);

            if ( ((LA135_0>=L_IntegerLiteral && LA135_0<=L_DoubleLiteral)) ) {
                alt135=1;
            }
            else if ( ((LA135_0>=APOS && LA135_0<=QUOT)) ) {
                alt135=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 135, 0, input);

                throw nvae;
            }
            switch (alt135) {
                case 1 :
                    // XQueryParser.g:812:13: p_NumericLiteral
                    {
                    root_0 = (XQDTCommonTree)adaptor.nil();

                    pushFollow(FOLLOW_p_NumericLiteral_in_p_Literal7159);
                    p_NumericLiteral345=p_NumericLiteral();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, p_NumericLiteral345.getTree());

                    }
                    break;
                case 2 :
                    // XQueryParser.g:812:32: p_StringLiteral
                    {
                    root_0 = (XQDTCommonTree)adaptor.nil();

                    pushFollow(FOLLOW_p_StringLiteral_in_p_Literal7163);
                    p_StringLiteral346=p_StringLiteral();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, p_StringLiteral346.getTree());

                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (XQDTCommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (XQDTCommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "p_Literal"

    public static class p_NumericLiteral_return extends ParserRuleReturnScope {
        XQDTCommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "p_NumericLiteral"
    // XQueryParser.g:816:1: p_NumericLiteral : ( L_IntegerLiteral | L_DecimalLiteral | L_DoubleLiteral );
    public final XQueryParser.p_NumericLiteral_return p_NumericLiteral() throws RecognitionException {
        XQueryParser.p_NumericLiteral_return retval = new XQueryParser.p_NumericLiteral_return();
        retval.start = input.LT(1);

        XQDTCommonTree root_0 = null;

        CommonToken set347=null;

        XQDTCommonTree set347_tree=null;

        try {
            // XQueryParser.g:817:9: ( L_IntegerLiteral | L_DecimalLiteral | L_DoubleLiteral )
            // XQueryParser.g:
            {
            root_0 = (XQDTCommonTree)adaptor.nil();

            set347=(CommonToken)input.LT(1);
            if ( (input.LA(1)>=L_IntegerLiteral && input.LA(1)<=L_DoubleLiteral) ) {
                input.consume();
                if ( state.backtracking==0 ) adaptor.addChild(root_0, (XQDTCommonTree)adaptor.create(set347));
                state.errorRecovery=false;state.failed=false;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                MismatchedSetException mse = new MismatchedSetException(null,input);
                throw mse;
            }


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (XQDTCommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (XQDTCommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "p_NumericLiteral"

    public static class p_VarRef_return extends ParserRuleReturnScope {
        XQDTCommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "p_VarRef"
    // XQueryParser.g:821:1: p_VarRef : DOLLAR p_VarName ;
    public final XQueryParser.p_VarRef_return p_VarRef() throws RecognitionException {
        XQueryParser.p_VarRef_return retval = new XQueryParser.p_VarRef_return();
        retval.start = input.LT(1);

        XQDTCommonTree root_0 = null;

        CommonToken DOLLAR348=null;
        XQueryParser.p_VarName_return p_VarName349 = null;


        XQDTCommonTree DOLLAR348_tree=null;

        try {
            // XQueryParser.g:822:9: ( DOLLAR p_VarName )
            // XQueryParser.g:822:13: DOLLAR p_VarName
            {
            root_0 = (XQDTCommonTree)adaptor.nil();

            DOLLAR348=(CommonToken)match(input,DOLLAR,FOLLOW_DOLLAR_in_p_VarRef7235); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            DOLLAR348_tree = (XQDTCommonTree)adaptor.create(DOLLAR348);
            adaptor.addChild(root_0, DOLLAR348_tree);
            }
            pushFollow(FOLLOW_p_VarName_in_p_VarRef7237);
            p_VarName349=p_VarName();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, p_VarName349.getTree());

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (XQDTCommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (XQDTCommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "p_VarRef"

    public static class p_VarName_return extends ParserRuleReturnScope {
        XQDTCommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "p_VarName"
    // XQueryParser.g:826:1: p_VarName : p_QName ;
    public final XQueryParser.p_VarName_return p_VarName() throws RecognitionException {
        XQueryParser.p_VarName_return retval = new XQueryParser.p_VarName_return();
        retval.start = input.LT(1);

        XQDTCommonTree root_0 = null;

        XQueryParser.p_QName_return p_QName350 = null;



        try {
            // XQueryParser.g:827:9: ( p_QName )
            // XQueryParser.g:827:13: p_QName
            {
            root_0 = (XQDTCommonTree)adaptor.nil();

            pushFollow(FOLLOW_p_QName_in_p_VarName7265);
            p_QName350=p_QName();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, p_QName350.getTree());

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (XQDTCommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (XQDTCommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "p_VarName"

    public static class p_ParenthesizedExpr_return extends ParserRuleReturnScope {
        XQDTCommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "p_ParenthesizedExpr"
    // XQueryParser.g:831:1: p_ParenthesizedExpr : LPAREN ( pm_Expr )? RPAREN ;
    public final XQueryParser.p_ParenthesizedExpr_return p_ParenthesizedExpr() throws RecognitionException {
        XQueryParser.p_ParenthesizedExpr_return retval = new XQueryParser.p_ParenthesizedExpr_return();
        retval.start = input.LT(1);

        XQDTCommonTree root_0 = null;

        CommonToken LPAREN351=null;
        CommonToken RPAREN353=null;
        XQueryParser.pm_Expr_return pm_Expr352 = null;


        XQDTCommonTree LPAREN351_tree=null;
        XQDTCommonTree RPAREN353_tree=null;

        try {
            // XQueryParser.g:832:9: ( LPAREN ( pm_Expr )? RPAREN )
            // XQueryParser.g:832:13: LPAREN ( pm_Expr )? RPAREN
            {
            root_0 = (XQDTCommonTree)adaptor.nil();

            LPAREN351=(CommonToken)match(input,LPAREN,FOLLOW_LPAREN_in_p_ParenthesizedExpr7293); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            LPAREN351_tree = (XQDTCommonTree)adaptor.create(LPAREN351);
            adaptor.addChild(root_0, LPAREN351_tree);
            }
            // XQueryParser.g:832:20: ( pm_Expr )?
            int alt136=2;
            int LA136_0 = input.LA(1);

            if ( ((LA136_0>=ANCESTOR && LA136_0<=DECIMAL_SEPARATOR)||(LA136_0>=DIGIT && LA136_0<=NEXT)||(LA136_0>=ONLY && LA136_0<=EXIT)||(LA136_0>=SEQUENTIAL && LA136_0<=MAINTAINED)||(LA136_0>=MUTABLE && LA136_0<=LPAREN)||LA136_0==DOLLAR||(LA136_0>=STAR && LA136_0<=SMALLER)||(LA136_0>=SLASH && LA136_0<=DOT_DOT)||LA136_0==ATTR_SIGN||(LA136_0>=APOS && LA136_0<=QUOT)||LA136_0==L_NCName||(LA136_0>=L_Pragma && LA136_0<=L_DoubleLiteral)||LA136_0==EXPLICITLY) ) {
                alt136=1;
            }
            switch (alt136) {
                case 1 :
                    // XQueryParser.g:832:20: pm_Expr
                    {
                    pushFollow(FOLLOW_pm_Expr_in_p_ParenthesizedExpr7295);
                    pm_Expr352=pm_Expr();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, pm_Expr352.getTree());

                    }
                    break;

            }

            RPAREN353=(CommonToken)match(input,RPAREN,FOLLOW_RPAREN_in_p_ParenthesizedExpr7298); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            RPAREN353_tree = (XQDTCommonTree)adaptor.create(RPAREN353);
            adaptor.addChild(root_0, RPAREN353_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (XQDTCommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (XQDTCommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "p_ParenthesizedExpr"

    public static class p_ContextItemExpr_return extends ParserRuleReturnScope {
        XQDTCommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "p_ContextItemExpr"
    // XQueryParser.g:836:1: p_ContextItemExpr : DOT ;
    public final XQueryParser.p_ContextItemExpr_return p_ContextItemExpr() throws RecognitionException {
        XQueryParser.p_ContextItemExpr_return retval = new XQueryParser.p_ContextItemExpr_return();
        retval.start = input.LT(1);

        XQDTCommonTree root_0 = null;

        CommonToken DOT354=null;

        XQDTCommonTree DOT354_tree=null;

        try {
            // XQueryParser.g:837:9: ( DOT )
            // XQueryParser.g:837:13: DOT
            {
            root_0 = (XQDTCommonTree)adaptor.nil();

            DOT354=(CommonToken)match(input,DOT,FOLLOW_DOT_in_p_ContextItemExpr7326); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            DOT354_tree = (XQDTCommonTree)adaptor.create(DOT354);
            adaptor.addChild(root_0, DOT354_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (XQDTCommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (XQDTCommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "p_ContextItemExpr"

    public static class p_OrderedExpr_return extends ParserRuleReturnScope {
        XQDTCommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "p_OrderedExpr"
    // XQueryParser.g:841:1: p_OrderedExpr : k= ORDERED LBRACKET pm_Expr RBRACKET ;
    public final XQueryParser.p_OrderedExpr_return p_OrderedExpr() throws RecognitionException {
        XQueryParser.p_OrderedExpr_return retval = new XQueryParser.p_OrderedExpr_return();
        retval.start = input.LT(1);

        XQDTCommonTree root_0 = null;

        CommonToken k=null;
        CommonToken LBRACKET355=null;
        CommonToken RBRACKET357=null;
        XQueryParser.pm_Expr_return pm_Expr356 = null;


        XQDTCommonTree k_tree=null;
        XQDTCommonTree LBRACKET355_tree=null;
        XQDTCommonTree RBRACKET357_tree=null;

        try {
            // XQueryParser.g:842:9: (k= ORDERED LBRACKET pm_Expr RBRACKET )
            // XQueryParser.g:842:13: k= ORDERED LBRACKET pm_Expr RBRACKET
            {
            root_0 = (XQDTCommonTree)adaptor.nil();

            k=(CommonToken)match(input,ORDERED,FOLLOW_ORDERED_in_p_OrderedExpr7356); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            k_tree = (XQDTCommonTree)adaptor.create(k);
            adaptor.addChild(root_0, k_tree);
            }
            if ( state.backtracking==0 ) {
              ak(k);
            }
            LBRACKET355=(CommonToken)match(input,LBRACKET,FOLLOW_LBRACKET_in_p_OrderedExpr7360); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            LBRACKET355_tree = (XQDTCommonTree)adaptor.create(LBRACKET355);
            adaptor.addChild(root_0, LBRACKET355_tree);
            }
            pushFollow(FOLLOW_pm_Expr_in_p_OrderedExpr7362);
            pm_Expr356=pm_Expr();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, pm_Expr356.getTree());
            RBRACKET357=(CommonToken)match(input,RBRACKET,FOLLOW_RBRACKET_in_p_OrderedExpr7364); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            RBRACKET357_tree = (XQDTCommonTree)adaptor.create(RBRACKET357);
            adaptor.addChild(root_0, RBRACKET357_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (XQDTCommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (XQDTCommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "p_OrderedExpr"

    public static class p_UnorderedExpr_return extends ParserRuleReturnScope {
        XQDTCommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "p_UnorderedExpr"
    // XQueryParser.g:846:1: p_UnorderedExpr : k= UNORDERED LBRACKET pm_Expr RBRACKET ;
    public final XQueryParser.p_UnorderedExpr_return p_UnorderedExpr() throws RecognitionException {
        XQueryParser.p_UnorderedExpr_return retval = new XQueryParser.p_UnorderedExpr_return();
        retval.start = input.LT(1);

        XQDTCommonTree root_0 = null;

        CommonToken k=null;
        CommonToken LBRACKET358=null;
        CommonToken RBRACKET360=null;
        XQueryParser.pm_Expr_return pm_Expr359 = null;


        XQDTCommonTree k_tree=null;
        XQDTCommonTree LBRACKET358_tree=null;
        XQDTCommonTree RBRACKET360_tree=null;

        try {
            // XQueryParser.g:847:9: (k= UNORDERED LBRACKET pm_Expr RBRACKET )
            // XQueryParser.g:847:13: k= UNORDERED LBRACKET pm_Expr RBRACKET
            {
            root_0 = (XQDTCommonTree)adaptor.nil();

            k=(CommonToken)match(input,UNORDERED,FOLLOW_UNORDERED_in_p_UnorderedExpr7394); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            k_tree = (XQDTCommonTree)adaptor.create(k);
            adaptor.addChild(root_0, k_tree);
            }
            if ( state.backtracking==0 ) {
              ak(k);
            }
            LBRACKET358=(CommonToken)match(input,LBRACKET,FOLLOW_LBRACKET_in_p_UnorderedExpr7398); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            LBRACKET358_tree = (XQDTCommonTree)adaptor.create(LBRACKET358);
            adaptor.addChild(root_0, LBRACKET358_tree);
            }
            pushFollow(FOLLOW_pm_Expr_in_p_UnorderedExpr7400);
            pm_Expr359=pm_Expr();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, pm_Expr359.getTree());
            RBRACKET360=(CommonToken)match(input,RBRACKET,FOLLOW_RBRACKET_in_p_UnorderedExpr7402); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            RBRACKET360_tree = (XQDTCommonTree)adaptor.create(RBRACKET360);
            adaptor.addChild(root_0, RBRACKET360_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (XQDTCommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (XQDTCommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "p_UnorderedExpr"

    public static class p_FunctionCall_return extends ParserRuleReturnScope {
        XQDTCommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "p_FunctionCall"
    // XQueryParser.g:852:1: p_FunctionCall : p_FQName LPAREN ( p_ExprSingle ( COMMA p_ExprSingle )* )? RPAREN ;
    public final XQueryParser.p_FunctionCall_return p_FunctionCall() throws RecognitionException {
        XQueryParser.p_FunctionCall_return retval = new XQueryParser.p_FunctionCall_return();
        retval.start = input.LT(1);

        XQDTCommonTree root_0 = null;

        CommonToken LPAREN362=null;
        CommonToken COMMA364=null;
        CommonToken RPAREN366=null;
        XQueryParser.p_FQName_return p_FQName361 = null;

        XQueryParser.p_ExprSingle_return p_ExprSingle363 = null;

        XQueryParser.p_ExprSingle_return p_ExprSingle365 = null;


        XQDTCommonTree LPAREN362_tree=null;
        XQDTCommonTree COMMA364_tree=null;
        XQDTCommonTree RPAREN366_tree=null;

        try {
            // XQueryParser.g:853:9: ( p_FQName LPAREN ( p_ExprSingle ( COMMA p_ExprSingle )* )? RPAREN )
            // XQueryParser.g:853:13: p_FQName LPAREN ( p_ExprSingle ( COMMA p_ExprSingle )* )? RPAREN
            {
            root_0 = (XQDTCommonTree)adaptor.nil();

            pushFollow(FOLLOW_p_FQName_in_p_FunctionCall7431);
            p_FQName361=p_FQName();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, p_FQName361.getTree());
            LPAREN362=(CommonToken)match(input,LPAREN,FOLLOW_LPAREN_in_p_FunctionCall7433); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            LPAREN362_tree = (XQDTCommonTree)adaptor.create(LPAREN362);
            adaptor.addChild(root_0, LPAREN362_tree);
            }
            // XQueryParser.g:853:29: ( p_ExprSingle ( COMMA p_ExprSingle )* )?
            int alt138=2;
            int LA138_0 = input.LA(1);

            if ( ((LA138_0>=ANCESTOR && LA138_0<=DECIMAL_SEPARATOR)||(LA138_0>=DIGIT && LA138_0<=NEXT)||(LA138_0>=ONLY && LA138_0<=EXIT)||(LA138_0>=SEQUENTIAL && LA138_0<=MAINTAINED)||(LA138_0>=MUTABLE && LA138_0<=LPAREN)||LA138_0==DOLLAR||(LA138_0>=STAR && LA138_0<=SMALLER)||(LA138_0>=SLASH && LA138_0<=DOT_DOT)||LA138_0==ATTR_SIGN||(LA138_0>=APOS && LA138_0<=QUOT)||LA138_0==L_NCName||(LA138_0>=L_Pragma && LA138_0<=L_DoubleLiteral)||LA138_0==EXPLICITLY) ) {
                alt138=1;
            }
            switch (alt138) {
                case 1 :
                    // XQueryParser.g:853:30: p_ExprSingle ( COMMA p_ExprSingle )*
                    {
                    pushFollow(FOLLOW_p_ExprSingle_in_p_FunctionCall7436);
                    p_ExprSingle363=p_ExprSingle();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, p_ExprSingle363.getTree());
                    // XQueryParser.g:853:43: ( COMMA p_ExprSingle )*
                    loop137:
                    do {
                        int alt137=2;
                        int LA137_0 = input.LA(1);

                        if ( (LA137_0==COMMA) ) {
                            alt137=1;
                        }


                        switch (alt137) {
                    	case 1 :
                    	    // XQueryParser.g:853:44: COMMA p_ExprSingle
                    	    {
                    	    COMMA364=(CommonToken)match(input,COMMA,FOLLOW_COMMA_in_p_FunctionCall7439); if (state.failed) return retval;
                    	    if ( state.backtracking==0 ) {
                    	    COMMA364_tree = (XQDTCommonTree)adaptor.create(COMMA364);
                    	    adaptor.addChild(root_0, COMMA364_tree);
                    	    }
                    	    pushFollow(FOLLOW_p_ExprSingle_in_p_FunctionCall7441);
                    	    p_ExprSingle365=p_ExprSingle();

                    	    state._fsp--;
                    	    if (state.failed) return retval;
                    	    if ( state.backtracking==0 ) adaptor.addChild(root_0, p_ExprSingle365.getTree());

                    	    }
                    	    break;

                    	default :
                    	    break loop137;
                        }
                    } while (true);


                    }
                    break;

            }

            RPAREN366=(CommonToken)match(input,RPAREN,FOLLOW_RPAREN_in_p_FunctionCall7447); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            RPAREN366_tree = (XQDTCommonTree)adaptor.create(RPAREN366);
            adaptor.addChild(root_0, RPAREN366_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (XQDTCommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (XQDTCommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "p_FunctionCall"

    public static class p_Constructor_return extends ParserRuleReturnScope {
        XQDTCommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "p_Constructor"
    // XQueryParser.g:857:1: p_Constructor : ( p_DirectConstructor | p_ComputedConstructor );
    public final XQueryParser.p_Constructor_return p_Constructor() throws RecognitionException {
        XQueryParser.p_Constructor_return retval = new XQueryParser.p_Constructor_return();
        retval.start = input.LT(1);

        XQDTCommonTree root_0 = null;

        XQueryParser.p_DirectConstructor_return p_DirectConstructor367 = null;

        XQueryParser.p_ComputedConstructor_return p_ComputedConstructor368 = null;



        try {
            // XQueryParser.g:858:9: ( p_DirectConstructor | p_ComputedConstructor )
            int alt139=2;
            int LA139_0 = input.LA(1);

            if ( (LA139_0==SMALLER||(LA139_0>=L_DirCommentConstructor && LA139_0<=L_DirPIConstructor)) ) {
                alt139=1;
            }
            else if ( (LA139_0==ATTRIBUTE||LA139_0==COMMENT||LA139_0==DOCUMENT||LA139_0==ELEMENT||LA139_0==NAMESPACE||LA139_0==PROCESSING_INSTRUCTION||LA139_0==TEXT) ) {
                alt139=2;
            }
            else if ( (LA139_0==BINARY) && ((lc(MLS)))) {
                alt139=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 139, 0, input);

                throw nvae;
            }
            switch (alt139) {
                case 1 :
                    // XQueryParser.g:858:13: p_DirectConstructor
                    {
                    root_0 = (XQDTCommonTree)adaptor.nil();

                    pushFollow(FOLLOW_p_DirectConstructor_in_p_Constructor7479);
                    p_DirectConstructor367=p_DirectConstructor();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, p_DirectConstructor367.getTree());

                    }
                    break;
                case 2 :
                    // XQueryParser.g:858:35: p_ComputedConstructor
                    {
                    root_0 = (XQDTCommonTree)adaptor.nil();

                    pushFollow(FOLLOW_p_ComputedConstructor_in_p_Constructor7483);
                    p_ComputedConstructor368=p_ComputedConstructor();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, p_ComputedConstructor368.getTree());

                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (XQDTCommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (XQDTCommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "p_Constructor"

    public static class p_DirectConstructor_return extends ParserRuleReturnScope {
        XQDTCommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "p_DirectConstructor"
    // XQueryParser.g:862:1: p_DirectConstructor : ( p_DirElemConstructor | L_DirCommentConstructor | L_DirPIConstructor );
    public final XQueryParser.p_DirectConstructor_return p_DirectConstructor() throws RecognitionException {
        XQueryParser.p_DirectConstructor_return retval = new XQueryParser.p_DirectConstructor_return();
        retval.start = input.LT(1);

        XQDTCommonTree root_0 = null;

        CommonToken L_DirCommentConstructor370=null;
        CommonToken L_DirPIConstructor371=null;
        XQueryParser.p_DirElemConstructor_return p_DirElemConstructor369 = null;


        XQDTCommonTree L_DirCommentConstructor370_tree=null;
        XQDTCommonTree L_DirPIConstructor371_tree=null;

        try {
            // XQueryParser.g:863:9: ( p_DirElemConstructor | L_DirCommentConstructor | L_DirPIConstructor )
            int alt140=3;
            switch ( input.LA(1) ) {
            case SMALLER:
                {
                alt140=1;
                }
                break;
            case L_DirCommentConstructor:
                {
                alt140=2;
                }
                break;
            case L_DirPIConstructor:
                {
                alt140=3;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 140, 0, input);

                throw nvae;
            }

            switch (alt140) {
                case 1 :
                    // XQueryParser.g:863:13: p_DirElemConstructor
                    {
                    root_0 = (XQDTCommonTree)adaptor.nil();

                    pushFollow(FOLLOW_p_DirElemConstructor_in_p_DirectConstructor7511);
                    p_DirElemConstructor369=p_DirElemConstructor();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, p_DirElemConstructor369.getTree());

                    }
                    break;
                case 2 :
                    // XQueryParser.g:864:11: L_DirCommentConstructor
                    {
                    root_0 = (XQDTCommonTree)adaptor.nil();

                    L_DirCommentConstructor370=(CommonToken)match(input,L_DirCommentConstructor,FOLLOW_L_DirCommentConstructor_in_p_DirectConstructor7523); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    L_DirCommentConstructor370_tree = (XQDTCommonTree)adaptor.create(L_DirCommentConstructor370);
                    adaptor.addChild(root_0, L_DirCommentConstructor370_tree);
                    }

                    }
                    break;
                case 3 :
                    // XQueryParser.g:865:11: L_DirPIConstructor
                    {
                    root_0 = (XQDTCommonTree)adaptor.nil();

                    L_DirPIConstructor371=(CommonToken)match(input,L_DirPIConstructor,FOLLOW_L_DirPIConstructor_in_p_DirectConstructor7535); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    L_DirPIConstructor371_tree = (XQDTCommonTree)adaptor.create(L_DirPIConstructor371);
                    adaptor.addChild(root_0, L_DirPIConstructor371_tree);
                    }

                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (XQDTCommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (XQDTCommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "p_DirectConstructor"

    public static class p_DirElemConstructor_return extends ParserRuleReturnScope {
        XQDTCommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "p_DirElemConstructor"
    // XQueryParser.g:869:1: p_DirElemConstructor : SMALLER p_QName p_DirAttributeList ( EMPTY_CLOSE_TAG | ( GREATER ( pm_DirElemContent )* CLOSE_TAG p_QName ( S )? GREATER ) ) -> ^( DirElemConstructor ^( DirAttributeList ( p_DirAttributeList )* ) ^( DirElemContent ( pm_DirElemContent )* ) ) ;
    public final XQueryParser.p_DirElemConstructor_return p_DirElemConstructor() throws RecognitionException {
        XQueryParser.p_DirElemConstructor_return retval = new XQueryParser.p_DirElemConstructor_return();
        retval.start = input.LT(1);

        XQDTCommonTree root_0 = null;

        CommonToken SMALLER372=null;
        CommonToken EMPTY_CLOSE_TAG375=null;
        CommonToken GREATER376=null;
        CommonToken CLOSE_TAG378=null;
        CommonToken S380=null;
        CommonToken GREATER381=null;
        XQueryParser.p_QName_return p_QName373 = null;

        XQueryParser.p_DirAttributeList_return p_DirAttributeList374 = null;

        XQueryParser.pm_DirElemContent_return pm_DirElemContent377 = null;

        XQueryParser.p_QName_return p_QName379 = null;


        XQDTCommonTree SMALLER372_tree=null;
        XQDTCommonTree EMPTY_CLOSE_TAG375_tree=null;
        XQDTCommonTree GREATER376_tree=null;
        XQDTCommonTree CLOSE_TAG378_tree=null;
        XQDTCommonTree S380_tree=null;
        XQDTCommonTree GREATER381_tree=null;
        RewriteRuleTokenStream stream_S=new RewriteRuleTokenStream(adaptor,"token S");
        RewriteRuleTokenStream stream_GREATER=new RewriteRuleTokenStream(adaptor,"token GREATER");
        RewriteRuleTokenStream stream_SMALLER=new RewriteRuleTokenStream(adaptor,"token SMALLER");
        RewriteRuleTokenStream stream_EMPTY_CLOSE_TAG=new RewriteRuleTokenStream(adaptor,"token EMPTY_CLOSE_TAG");
        RewriteRuleTokenStream stream_CLOSE_TAG=new RewriteRuleTokenStream(adaptor,"token CLOSE_TAG");
        RewriteRuleSubtreeStream stream_p_DirAttributeList=new RewriteRuleSubtreeStream(adaptor,"rule p_DirAttributeList");
        RewriteRuleSubtreeStream stream_p_QName=new RewriteRuleSubtreeStream(adaptor,"rule p_QName");
        RewriteRuleSubtreeStream stream_pm_DirElemContent=new RewriteRuleSubtreeStream(adaptor,"rule pm_DirElemContent");
        try {
            // XQueryParser.g:870:9: ( SMALLER p_QName p_DirAttributeList ( EMPTY_CLOSE_TAG | ( GREATER ( pm_DirElemContent )* CLOSE_TAG p_QName ( S )? GREATER ) ) -> ^( DirElemConstructor ^( DirAttributeList ( p_DirAttributeList )* ) ^( DirElemContent ( pm_DirElemContent )* ) ) )
            // XQueryParser.g:870:13: SMALLER p_QName p_DirAttributeList ( EMPTY_CLOSE_TAG | ( GREATER ( pm_DirElemContent )* CLOSE_TAG p_QName ( S )? GREATER ) )
            {
            SMALLER372=(CommonToken)match(input,SMALLER,FOLLOW_SMALLER_in_p_DirElemConstructor7564); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_SMALLER.add(SMALLER372);

            if ( state.backtracking==0 ) {
              pushXMLLexer();
            }
            pushFollow(FOLLOW_p_QName_in_p_DirElemConstructor7580);
            p_QName373=p_QName();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_p_QName.add(p_QName373.getTree());
            pushFollow(FOLLOW_p_DirAttributeList_in_p_DirElemConstructor7582);
            p_DirAttributeList374=p_DirAttributeList();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_p_DirAttributeList.add(p_DirAttributeList374.getTree());
            // XQueryParser.g:872:13: ( EMPTY_CLOSE_TAG | ( GREATER ( pm_DirElemContent )* CLOSE_TAG p_QName ( S )? GREATER ) )
            int alt143=2;
            int LA143_0 = input.LA(1);

            if ( (LA143_0==EMPTY_CLOSE_TAG) ) {
                alt143=1;
            }
            else if ( (LA143_0==GREATER) ) {
                alt143=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 143, 0, input);

                throw nvae;
            }
            switch (alt143) {
                case 1 :
                    // XQueryParser.g:872:14: EMPTY_CLOSE_TAG
                    {
                    EMPTY_CLOSE_TAG375=(CommonToken)match(input,EMPTY_CLOSE_TAG,FOLLOW_EMPTY_CLOSE_TAG_in_p_DirElemConstructor7598); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_EMPTY_CLOSE_TAG.add(EMPTY_CLOSE_TAG375);


                    }
                    break;
                case 2 :
                    // XQueryParser.g:872:32: ( GREATER ( pm_DirElemContent )* CLOSE_TAG p_QName ( S )? GREATER )
                    {
                    // XQueryParser.g:872:32: ( GREATER ( pm_DirElemContent )* CLOSE_TAG p_QName ( S )? GREATER )
                    // XQueryParser.g:872:33: GREATER ( pm_DirElemContent )* CLOSE_TAG p_QName ( S )? GREATER
                    {
                    GREATER376=(CommonToken)match(input,GREATER,FOLLOW_GREATER_in_p_DirElemConstructor7603); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_GREATER.add(GREATER376);

                    // XQueryParser.g:872:41: ( pm_DirElemContent )*
                    loop141:
                    do {
                        int alt141=2;
                        int LA141_0 = input.LA(1);

                        if ( ((LA141_0>=L_ElementContentChar && LA141_0<=ESCAPE_RBRACKET)||LA141_0==LBRACKET||LA141_0==SMALLER||(LA141_0>=L_DirCommentConstructor && LA141_0<=L_DirPIConstructor)) ) {
                            alt141=1;
                        }


                        switch (alt141) {
                    	case 1 :
                    	    // XQueryParser.g:872:41: pm_DirElemContent
                    	    {
                    	    pushFollow(FOLLOW_pm_DirElemContent_in_p_DirElemConstructor7605);
                    	    pm_DirElemContent377=pm_DirElemContent();

                    	    state._fsp--;
                    	    if (state.failed) return retval;
                    	    if ( state.backtracking==0 ) stream_pm_DirElemContent.add(pm_DirElemContent377.getTree());

                    	    }
                    	    break;

                    	default :
                    	    break loop141;
                        }
                    } while (true);

                    CLOSE_TAG378=(CommonToken)match(input,CLOSE_TAG,FOLLOW_CLOSE_TAG_in_p_DirElemConstructor7608); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_CLOSE_TAG.add(CLOSE_TAG378);

                    pushFollow(FOLLOW_p_QName_in_p_DirElemConstructor7610);
                    p_QName379=p_QName();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_p_QName.add(p_QName379.getTree());
                    // XQueryParser.g:872:78: ( S )?
                    int alt142=2;
                    int LA142_0 = input.LA(1);

                    if ( (LA142_0==S) ) {
                        alt142=1;
                    }
                    switch (alt142) {
                        case 1 :
                            // XQueryParser.g:872:78: S
                            {
                            S380=(CommonToken)match(input,S,FOLLOW_S_in_p_DirElemConstructor7612); if (state.failed) return retval; 
                            if ( state.backtracking==0 ) stream_S.add(S380);


                            }
                            break;

                    }

                    GREATER381=(CommonToken)match(input,GREATER,FOLLOW_GREATER_in_p_DirElemConstructor7615); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_GREATER.add(GREATER381);


                    }


                    }
                    break;

            }



            // AST REWRITE
            // elements: pm_DirElemContent, p_DirAttributeList
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (XQDTCommonTree)adaptor.nil();
            // 873:17: -> ^( DirElemConstructor ^( DirAttributeList ( p_DirAttributeList )* ) ^( DirElemContent ( pm_DirElemContent )* ) )
            {
                // XQueryParser.g:873:20: ^( DirElemConstructor ^( DirAttributeList ( p_DirAttributeList )* ) ^( DirElemContent ( pm_DirElemContent )* ) )
                {
                XQDTCommonTree root_1 = (XQDTCommonTree)adaptor.nil();
                root_1 = (XQDTCommonTree)adaptor.becomeRoot((XQDTCommonTree)adaptor.create(DirElemConstructor, "DirElemConstructor"), root_1);

                // XQueryParser.g:873:41: ^( DirAttributeList ( p_DirAttributeList )* )
                {
                XQDTCommonTree root_2 = (XQDTCommonTree)adaptor.nil();
                root_2 = (XQDTCommonTree)adaptor.becomeRoot((XQDTCommonTree)adaptor.create(DirAttributeList, "DirAttributeList"), root_2);

                // XQueryParser.g:873:60: ( p_DirAttributeList )*
                while ( stream_p_DirAttributeList.hasNext() ) {
                    adaptor.addChild(root_2, stream_p_DirAttributeList.nextTree());

                }
                stream_p_DirAttributeList.reset();

                adaptor.addChild(root_1, root_2);
                }
                // XQueryParser.g:873:81: ^( DirElemContent ( pm_DirElemContent )* )
                {
                XQDTCommonTree root_2 = (XQDTCommonTree)adaptor.nil();
                root_2 = (XQDTCommonTree)adaptor.becomeRoot((XQDTCommonTree)adaptor.create(DirElemContent, "DirElemContent"), root_2);

                // XQueryParser.g:873:98: ( pm_DirElemContent )*
                while ( stream_pm_DirElemContent.hasNext() ) {
                    adaptor.addChild(root_2, stream_pm_DirElemContent.nextTree());

                }
                stream_pm_DirElemContent.reset();

                adaptor.addChild(root_1, root_2);
                }

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (XQDTCommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (XQDTCommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            popLexer();
        }
        return retval;
    }
    // $ANTLR end "p_DirElemConstructor"

    public static class p_DirAttributeList_return extends ParserRuleReturnScope {
        XQDTCommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "p_DirAttributeList"
    // XQueryParser.g:878:1: p_DirAttributeList : ( S ( p_QName ( S )? EQUAL ( S )? p_DirAttributeValue )? )* ;
    public final XQueryParser.p_DirAttributeList_return p_DirAttributeList() throws RecognitionException {
        XQueryParser.p_DirAttributeList_return retval = new XQueryParser.p_DirAttributeList_return();
        retval.start = input.LT(1);

        XQDTCommonTree root_0 = null;

        CommonToken S382=null;
        CommonToken S384=null;
        CommonToken EQUAL385=null;
        CommonToken S386=null;
        XQueryParser.p_QName_return p_QName383 = null;

        XQueryParser.p_DirAttributeValue_return p_DirAttributeValue387 = null;


        XQDTCommonTree S382_tree=null;
        XQDTCommonTree S384_tree=null;
        XQDTCommonTree EQUAL385_tree=null;
        XQDTCommonTree S386_tree=null;

        try {
            // XQueryParser.g:879:9: ( ( S ( p_QName ( S )? EQUAL ( S )? p_DirAttributeValue )? )* )
            // XQueryParser.g:879:11: ( S ( p_QName ( S )? EQUAL ( S )? p_DirAttributeValue )? )*
            {
            root_0 = (XQDTCommonTree)adaptor.nil();

            // XQueryParser.g:879:11: ( S ( p_QName ( S )? EQUAL ( S )? p_DirAttributeValue )? )*
            loop147:
            do {
                int alt147=2;
                int LA147_0 = input.LA(1);

                if ( (LA147_0==S) ) {
                    alt147=1;
                }


                switch (alt147) {
            	case 1 :
            	    // XQueryParser.g:879:12: S ( p_QName ( S )? EQUAL ( S )? p_DirAttributeValue )?
            	    {
            	    S382=(CommonToken)match(input,S,FOLLOW_S_in_p_DirAttributeList7692); if (state.failed) return retval;
            	    if ( state.backtracking==0 ) {
            	    S382_tree = (XQDTCommonTree)adaptor.create(S382);
            	    adaptor.addChild(root_0, S382_tree);
            	    }
            	    // XQueryParser.g:879:14: ( p_QName ( S )? EQUAL ( S )? p_DirAttributeValue )?
            	    int alt146=2;
            	    int LA146_0 = input.LA(1);

            	    if ( ((LA146_0>=ANCESTOR && LA146_0<=DECIMAL_SEPARATOR)||(LA146_0>=DIGIT && LA146_0<=NEXT)||(LA146_0>=ONLY && LA146_0<=EXIT)||(LA146_0>=SEQUENTIAL && LA146_0<=MAINTAINED)||(LA146_0>=MUTABLE && LA146_0<=QUOT_ER)||LA146_0==L_NCName||LA146_0==EXPLICITLY) ) {
            	        alt146=1;
            	    }
            	    switch (alt146) {
            	        case 1 :
            	            // XQueryParser.g:879:15: p_QName ( S )? EQUAL ( S )? p_DirAttributeValue
            	            {
            	            pushFollow(FOLLOW_p_QName_in_p_DirAttributeList7695);
            	            p_QName383=p_QName();

            	            state._fsp--;
            	            if (state.failed) return retval;
            	            if ( state.backtracking==0 ) adaptor.addChild(root_0, p_QName383.getTree());
            	            // XQueryParser.g:879:23: ( S )?
            	            int alt144=2;
            	            int LA144_0 = input.LA(1);

            	            if ( (LA144_0==S) ) {
            	                alt144=1;
            	            }
            	            switch (alt144) {
            	                case 1 :
            	                    // XQueryParser.g:879:23: S
            	                    {
            	                    S384=(CommonToken)match(input,S,FOLLOW_S_in_p_DirAttributeList7697); if (state.failed) return retval;
            	                    if ( state.backtracking==0 ) {
            	                    S384_tree = (XQDTCommonTree)adaptor.create(S384);
            	                    adaptor.addChild(root_0, S384_tree);
            	                    }

            	                    }
            	                    break;

            	            }

            	            EQUAL385=(CommonToken)match(input,EQUAL,FOLLOW_EQUAL_in_p_DirAttributeList7700); if (state.failed) return retval;
            	            if ( state.backtracking==0 ) {
            	            EQUAL385_tree = (XQDTCommonTree)adaptor.create(EQUAL385);
            	            adaptor.addChild(root_0, EQUAL385_tree);
            	            }
            	            // XQueryParser.g:879:32: ( S )?
            	            int alt145=2;
            	            int LA145_0 = input.LA(1);

            	            if ( (LA145_0==S) ) {
            	                alt145=1;
            	            }
            	            switch (alt145) {
            	                case 1 :
            	                    // XQueryParser.g:879:32: S
            	                    {
            	                    S386=(CommonToken)match(input,S,FOLLOW_S_in_p_DirAttributeList7702); if (state.failed) return retval;
            	                    if ( state.backtracking==0 ) {
            	                    S386_tree = (XQDTCommonTree)adaptor.create(S386);
            	                    adaptor.addChild(root_0, S386_tree);
            	                    }

            	                    }
            	                    break;

            	            }

            	            pushFollow(FOLLOW_p_DirAttributeValue_in_p_DirAttributeList7705);
            	            p_DirAttributeValue387=p_DirAttributeValue();

            	            state._fsp--;
            	            if (state.failed) return retval;
            	            if ( state.backtracking==0 ) adaptor.addChild(root_0, p_DirAttributeValue387.getTree());

            	            }
            	            break;

            	    }


            	    }
            	    break;

            	default :
            	    break loop147;
                }
            } while (true);


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (XQDTCommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (XQDTCommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "p_DirAttributeList"

    public static class p_DirAttributeValue_return extends ParserRuleReturnScope {
        XQDTCommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "p_DirAttributeValue"
    // XQueryParser.g:883:1: p_DirAttributeValue : ( ( QUOT ( ESCAPE_QUOT | APOS | pm_QuotAttrValueContent )* QUOT ) -> ^( DirAttributeValue ( pm_QuotAttrValueContent )* ) | ( APOS ( ESCAPE_APOS | QUOT | pm_AposAttrValueContent )* APOS ) -> ^( DirAttributeValue ( pm_AposAttrValueContent )* ) );
    public final XQueryParser.p_DirAttributeValue_return p_DirAttributeValue() throws RecognitionException {
        XQueryParser.p_DirAttributeValue_return retval = new XQueryParser.p_DirAttributeValue_return();
        retval.start = input.LT(1);

        XQDTCommonTree root_0 = null;

        CommonToken QUOT388=null;
        CommonToken ESCAPE_QUOT389=null;
        CommonToken APOS390=null;
        CommonToken QUOT392=null;
        CommonToken APOS393=null;
        CommonToken ESCAPE_APOS394=null;
        CommonToken QUOT395=null;
        CommonToken APOS397=null;
        XQueryParser.pm_QuotAttrValueContent_return pm_QuotAttrValueContent391 = null;

        XQueryParser.pm_AposAttrValueContent_return pm_AposAttrValueContent396 = null;


        XQDTCommonTree QUOT388_tree=null;
        XQDTCommonTree ESCAPE_QUOT389_tree=null;
        XQDTCommonTree APOS390_tree=null;
        XQDTCommonTree QUOT392_tree=null;
        XQDTCommonTree APOS393_tree=null;
        XQDTCommonTree ESCAPE_APOS394_tree=null;
        XQDTCommonTree QUOT395_tree=null;
        XQDTCommonTree APOS397_tree=null;
        RewriteRuleTokenStream stream_ESCAPE_APOS=new RewriteRuleTokenStream(adaptor,"token ESCAPE_APOS");
        RewriteRuleTokenStream stream_QUOT=new RewriteRuleTokenStream(adaptor,"token QUOT");
        RewriteRuleTokenStream stream_APOS=new RewriteRuleTokenStream(adaptor,"token APOS");
        RewriteRuleTokenStream stream_ESCAPE_QUOT=new RewriteRuleTokenStream(adaptor,"token ESCAPE_QUOT");
        RewriteRuleSubtreeStream stream_pm_AposAttrValueContent=new RewriteRuleSubtreeStream(adaptor,"rule pm_AposAttrValueContent");
        RewriteRuleSubtreeStream stream_pm_QuotAttrValueContent=new RewriteRuleSubtreeStream(adaptor,"rule pm_QuotAttrValueContent");
        try {
            // XQueryParser.g:884:9: ( ( QUOT ( ESCAPE_QUOT | APOS | pm_QuotAttrValueContent )* QUOT ) -> ^( DirAttributeValue ( pm_QuotAttrValueContent )* ) | ( APOS ( ESCAPE_APOS | QUOT | pm_AposAttrValueContent )* APOS ) -> ^( DirAttributeValue ( pm_AposAttrValueContent )* ) )
            int alt150=2;
            int LA150_0 = input.LA(1);

            if ( (LA150_0==QUOT) ) {
                alt150=1;
            }
            else if ( (LA150_0==APOS) ) {
                alt150=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 150, 0, input);

                throw nvae;
            }
            switch (alt150) {
                case 1 :
                    // XQueryParser.g:884:11: ( QUOT ( ESCAPE_QUOT | APOS | pm_QuotAttrValueContent )* QUOT )
                    {
                    // XQueryParser.g:884:11: ( QUOT ( ESCAPE_QUOT | APOS | pm_QuotAttrValueContent )* QUOT )
                    // XQueryParser.g:884:12: QUOT ( ESCAPE_QUOT | APOS | pm_QuotAttrValueContent )* QUOT
                    {
                    QUOT388=(CommonToken)match(input,QUOT,FOLLOW_QUOT_in_p_DirAttributeValue7736); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_QUOT.add(QUOT388);

                    // XQueryParser.g:884:17: ( ESCAPE_QUOT | APOS | pm_QuotAttrValueContent )*
                    loop148:
                    do {
                        int alt148=4;
                        switch ( input.LA(1) ) {
                        case ESCAPE_QUOT:
                            {
                            alt148=1;
                            }
                            break;
                        case APOS:
                            {
                            alt148=2;
                            }
                            break;
                        case L_QuotAttrContentChar:
                        case L_PredefinedEntityRef:
                        case L_CharRef:
                        case ESCAPE_LBRACKET:
                        case ESCAPE_RBRACKET:
                        case LBRACKET:
                            {
                            alt148=3;
                            }
                            break;

                        }

                        switch (alt148) {
                    	case 1 :
                    	    // XQueryParser.g:884:18: ESCAPE_QUOT
                    	    {
                    	    ESCAPE_QUOT389=(CommonToken)match(input,ESCAPE_QUOT,FOLLOW_ESCAPE_QUOT_in_p_DirAttributeValue7739); if (state.failed) return retval; 
                    	    if ( state.backtracking==0 ) stream_ESCAPE_QUOT.add(ESCAPE_QUOT389);


                    	    }
                    	    break;
                    	case 2 :
                    	    // XQueryParser.g:884:32: APOS
                    	    {
                    	    APOS390=(CommonToken)match(input,APOS,FOLLOW_APOS_in_p_DirAttributeValue7743); if (state.failed) return retval; 
                    	    if ( state.backtracking==0 ) stream_APOS.add(APOS390);


                    	    }
                    	    break;
                    	case 3 :
                    	    // XQueryParser.g:884:39: pm_QuotAttrValueContent
                    	    {
                    	    pushFollow(FOLLOW_pm_QuotAttrValueContent_in_p_DirAttributeValue7747);
                    	    pm_QuotAttrValueContent391=pm_QuotAttrValueContent();

                    	    state._fsp--;
                    	    if (state.failed) return retval;
                    	    if ( state.backtracking==0 ) stream_pm_QuotAttrValueContent.add(pm_QuotAttrValueContent391.getTree());

                    	    }
                    	    break;

                    	default :
                    	    break loop148;
                        }
                    } while (true);

                    QUOT392=(CommonToken)match(input,QUOT,FOLLOW_QUOT_in_p_DirAttributeValue7751); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_QUOT.add(QUOT392);


                    }



                    // AST REWRITE
                    // elements: pm_QuotAttrValueContent
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (XQDTCommonTree)adaptor.nil();
                    // 885:17: -> ^( DirAttributeValue ( pm_QuotAttrValueContent )* )
                    {
                        // XQueryParser.g:885:20: ^( DirAttributeValue ( pm_QuotAttrValueContent )* )
                        {
                        XQDTCommonTree root_1 = (XQDTCommonTree)adaptor.nil();
                        root_1 = (XQDTCommonTree)adaptor.becomeRoot((XQDTCommonTree)adaptor.create(DirAttributeValue, "DirAttributeValue"), root_1);

                        // XQueryParser.g:885:40: ( pm_QuotAttrValueContent )*
                        while ( stream_pm_QuotAttrValueContent.hasNext() ) {
                            adaptor.addChild(root_1, stream_pm_QuotAttrValueContent.nextTree());

                        }
                        stream_pm_QuotAttrValueContent.reset();

                        adaptor.addChild(root_0, root_1);
                        }

                    }

                    retval.tree = root_0;}
                    }
                    break;
                case 2 :
                    // XQueryParser.g:886:11: ( APOS ( ESCAPE_APOS | QUOT | pm_AposAttrValueContent )* APOS )
                    {
                    // XQueryParser.g:886:11: ( APOS ( ESCAPE_APOS | QUOT | pm_AposAttrValueContent )* APOS )
                    // XQueryParser.g:886:12: APOS ( ESCAPE_APOS | QUOT | pm_AposAttrValueContent )* APOS
                    {
                    APOS393=(CommonToken)match(input,APOS,FOLLOW_APOS_in_p_DirAttributeValue7790); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_APOS.add(APOS393);

                    // XQueryParser.g:886:17: ( ESCAPE_APOS | QUOT | pm_AposAttrValueContent )*
                    loop149:
                    do {
                        int alt149=4;
                        switch ( input.LA(1) ) {
                        case ESCAPE_APOS:
                            {
                            alt149=1;
                            }
                            break;
                        case QUOT:
                            {
                            alt149=2;
                            }
                            break;
                        case L_AposAttrContentChar:
                        case L_PredefinedEntityRef:
                        case L_CharRef:
                        case ESCAPE_LBRACKET:
                        case ESCAPE_RBRACKET:
                        case LBRACKET:
                            {
                            alt149=3;
                            }
                            break;

                        }

                        switch (alt149) {
                    	case 1 :
                    	    // XQueryParser.g:886:18: ESCAPE_APOS
                    	    {
                    	    ESCAPE_APOS394=(CommonToken)match(input,ESCAPE_APOS,FOLLOW_ESCAPE_APOS_in_p_DirAttributeValue7793); if (state.failed) return retval; 
                    	    if ( state.backtracking==0 ) stream_ESCAPE_APOS.add(ESCAPE_APOS394);


                    	    }
                    	    break;
                    	case 2 :
                    	    // XQueryParser.g:886:32: QUOT
                    	    {
                    	    QUOT395=(CommonToken)match(input,QUOT,FOLLOW_QUOT_in_p_DirAttributeValue7797); if (state.failed) return retval; 
                    	    if ( state.backtracking==0 ) stream_QUOT.add(QUOT395);


                    	    }
                    	    break;
                    	case 3 :
                    	    // XQueryParser.g:886:39: pm_AposAttrValueContent
                    	    {
                    	    pushFollow(FOLLOW_pm_AposAttrValueContent_in_p_DirAttributeValue7801);
                    	    pm_AposAttrValueContent396=pm_AposAttrValueContent();

                    	    state._fsp--;
                    	    if (state.failed) return retval;
                    	    if ( state.backtracking==0 ) stream_pm_AposAttrValueContent.add(pm_AposAttrValueContent396.getTree());

                    	    }
                    	    break;

                    	default :
                    	    break loop149;
                        }
                    } while (true);

                    APOS397=(CommonToken)match(input,APOS,FOLLOW_APOS_in_p_DirAttributeValue7805); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_APOS.add(APOS397);


                    }



                    // AST REWRITE
                    // elements: pm_AposAttrValueContent
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (XQDTCommonTree)adaptor.nil();
                    // 887:17: -> ^( DirAttributeValue ( pm_AposAttrValueContent )* )
                    {
                        // XQueryParser.g:887:20: ^( DirAttributeValue ( pm_AposAttrValueContent )* )
                        {
                        XQDTCommonTree root_1 = (XQDTCommonTree)adaptor.nil();
                        root_1 = (XQDTCommonTree)adaptor.becomeRoot((XQDTCommonTree)adaptor.create(DirAttributeValue, "DirAttributeValue"), root_1);

                        // XQueryParser.g:887:40: ( pm_AposAttrValueContent )*
                        while ( stream_pm_AposAttrValueContent.hasNext() ) {
                            adaptor.addChild(root_1, stream_pm_AposAttrValueContent.nextTree());

                        }
                        stream_pm_AposAttrValueContent.reset();

                        adaptor.addChild(root_0, root_1);
                        }

                    }

                    retval.tree = root_0;}
                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (XQDTCommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (XQDTCommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "p_DirAttributeValue"

    public static class pm_QuotAttrValueContent_return extends ParserRuleReturnScope {
        XQDTCommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "pm_QuotAttrValueContent"
    // XQueryParser.g:891:1: pm_QuotAttrValueContent : ( pg_QuotAttrContentChar | pg_CommonContent | p_ElemEnclosedExpr );
    public final XQueryParser.pm_QuotAttrValueContent_return pm_QuotAttrValueContent() throws RecognitionException {
        XQueryParser.pm_QuotAttrValueContent_return retval = new XQueryParser.pm_QuotAttrValueContent_return();
        retval.start = input.LT(1);

        XQDTCommonTree root_0 = null;

        XQueryParser.pg_QuotAttrContentChar_return pg_QuotAttrContentChar398 = null;

        XQueryParser.pg_CommonContent_return pg_CommonContent399 = null;

        XQueryParser.p_ElemEnclosedExpr_return p_ElemEnclosedExpr400 = null;



        try {
            // XQueryParser.g:892:9: ( pg_QuotAttrContentChar | pg_CommonContent | p_ElemEnclosedExpr )
            int alt151=3;
            switch ( input.LA(1) ) {
            case L_QuotAttrContentChar:
                {
                alt151=1;
                }
                break;
            case L_PredefinedEntityRef:
            case L_CharRef:
            case ESCAPE_LBRACKET:
            case ESCAPE_RBRACKET:
                {
                alt151=2;
                }
                break;
            case LBRACKET:
                {
                alt151=3;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 151, 0, input);

                throw nvae;
            }

            switch (alt151) {
                case 1 :
                    // XQueryParser.g:892:11: pg_QuotAttrContentChar
                    {
                    root_0 = (XQDTCommonTree)adaptor.nil();

                    pushFollow(FOLLOW_pg_QuotAttrContentChar_in_pm_QuotAttrValueContent7857);
                    pg_QuotAttrContentChar398=pg_QuotAttrContentChar();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, pg_QuotAttrContentChar398.getTree());

                    }
                    break;
                case 2 :
                    // XQueryParser.g:892:36: pg_CommonContent
                    {
                    root_0 = (XQDTCommonTree)adaptor.nil();

                    pushFollow(FOLLOW_pg_CommonContent_in_pm_QuotAttrValueContent7861);
                    pg_CommonContent399=pg_CommonContent();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, pg_CommonContent399.getTree());

                    }
                    break;
                case 3 :
                    // XQueryParser.g:892:55: p_ElemEnclosedExpr
                    {
                    root_0 = (XQDTCommonTree)adaptor.nil();

                    pushFollow(FOLLOW_p_ElemEnclosedExpr_in_pm_QuotAttrValueContent7865);
                    p_ElemEnclosedExpr400=p_ElemEnclosedExpr();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, p_ElemEnclosedExpr400.getTree());

                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (XQDTCommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (XQDTCommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "pm_QuotAttrValueContent"

    public static class pg_QuotAttrContentChar_return extends ParserRuleReturnScope {
        XQDTCommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "pg_QuotAttrContentChar"
    // XQueryParser.g:899:1: pg_QuotAttrContentChar : L_QuotAttrContentChar -> ^( AttributeValueChar L_QuotAttrContentChar ) ;
    public final XQueryParser.pg_QuotAttrContentChar_return pg_QuotAttrContentChar() throws RecognitionException {
        XQueryParser.pg_QuotAttrContentChar_return retval = new XQueryParser.pg_QuotAttrContentChar_return();
        retval.start = input.LT(1);

        XQDTCommonTree root_0 = null;

        CommonToken L_QuotAttrContentChar401=null;

        XQDTCommonTree L_QuotAttrContentChar401_tree=null;
        RewriteRuleTokenStream stream_L_QuotAttrContentChar=new RewriteRuleTokenStream(adaptor,"token L_QuotAttrContentChar");

        try {
            // XQueryParser.g:900:9: ( L_QuotAttrContentChar -> ^( AttributeValueChar L_QuotAttrContentChar ) )
            // XQueryParser.g:900:11: L_QuotAttrContentChar
            {
            L_QuotAttrContentChar401=(CommonToken)match(input,L_QuotAttrContentChar,FOLLOW_L_QuotAttrContentChar_in_pg_QuotAttrContentChar7894); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_L_QuotAttrContentChar.add(L_QuotAttrContentChar401);



            // AST REWRITE
            // elements: L_QuotAttrContentChar
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (XQDTCommonTree)adaptor.nil();
            // 901:17: -> ^( AttributeValueChar L_QuotAttrContentChar )
            {
                // XQueryParser.g:901:20: ^( AttributeValueChar L_QuotAttrContentChar )
                {
                XQDTCommonTree root_1 = (XQDTCommonTree)adaptor.nil();
                root_1 = (XQDTCommonTree)adaptor.becomeRoot((XQDTCommonTree)adaptor.create(AttributeValueChar, "AttributeValueChar"), root_1);

                adaptor.addChild(root_1, stream_L_QuotAttrContentChar.nextNode());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (XQDTCommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (XQDTCommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "pg_QuotAttrContentChar"

    public static class pm_AposAttrValueContent_return extends ParserRuleReturnScope {
        XQDTCommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "pm_AposAttrValueContent"
    // XQueryParser.g:906:1: pm_AposAttrValueContent : ( pg_AposAttrContentChar | pg_CommonContent | p_ElemEnclosedExpr );
    public final XQueryParser.pm_AposAttrValueContent_return pm_AposAttrValueContent() throws RecognitionException {
        XQueryParser.pm_AposAttrValueContent_return retval = new XQueryParser.pm_AposAttrValueContent_return();
        retval.start = input.LT(1);

        XQDTCommonTree root_0 = null;

        XQueryParser.pg_AposAttrContentChar_return pg_AposAttrContentChar402 = null;

        XQueryParser.pg_CommonContent_return pg_CommonContent403 = null;

        XQueryParser.p_ElemEnclosedExpr_return p_ElemEnclosedExpr404 = null;



        try {
            // XQueryParser.g:907:9: ( pg_AposAttrContentChar | pg_CommonContent | p_ElemEnclosedExpr )
            int alt152=3;
            switch ( input.LA(1) ) {
            case L_AposAttrContentChar:
                {
                alt152=1;
                }
                break;
            case L_PredefinedEntityRef:
            case L_CharRef:
            case ESCAPE_LBRACKET:
            case ESCAPE_RBRACKET:
                {
                alt152=2;
                }
                break;
            case LBRACKET:
                {
                alt152=3;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 152, 0, input);

                throw nvae;
            }

            switch (alt152) {
                case 1 :
                    // XQueryParser.g:907:13: pg_AposAttrContentChar
                    {
                    root_0 = (XQDTCommonTree)adaptor.nil();

                    pushFollow(FOLLOW_pg_AposAttrContentChar_in_pm_AposAttrValueContent7947);
                    pg_AposAttrContentChar402=pg_AposAttrContentChar();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, pg_AposAttrContentChar402.getTree());

                    }
                    break;
                case 2 :
                    // XQueryParser.g:907:38: pg_CommonContent
                    {
                    root_0 = (XQDTCommonTree)adaptor.nil();

                    pushFollow(FOLLOW_pg_CommonContent_in_pm_AposAttrValueContent7951);
                    pg_CommonContent403=pg_CommonContent();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, pg_CommonContent403.getTree());

                    }
                    break;
                case 3 :
                    // XQueryParser.g:907:57: p_ElemEnclosedExpr
                    {
                    root_0 = (XQDTCommonTree)adaptor.nil();

                    pushFollow(FOLLOW_p_ElemEnclosedExpr_in_pm_AposAttrValueContent7955);
                    p_ElemEnclosedExpr404=p_ElemEnclosedExpr();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, p_ElemEnclosedExpr404.getTree());

                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (XQDTCommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (XQDTCommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "pm_AposAttrValueContent"

    public static class pg_AposAttrContentChar_return extends ParserRuleReturnScope {
        XQDTCommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "pg_AposAttrContentChar"
    // XQueryParser.g:914:1: pg_AposAttrContentChar : L_AposAttrContentChar -> ^( AttributeValueChar L_AposAttrContentChar ) ;
    public final XQueryParser.pg_AposAttrContentChar_return pg_AposAttrContentChar() throws RecognitionException {
        XQueryParser.pg_AposAttrContentChar_return retval = new XQueryParser.pg_AposAttrContentChar_return();
        retval.start = input.LT(1);

        XQDTCommonTree root_0 = null;

        CommonToken L_AposAttrContentChar405=null;

        XQDTCommonTree L_AposAttrContentChar405_tree=null;
        RewriteRuleTokenStream stream_L_AposAttrContentChar=new RewriteRuleTokenStream(adaptor,"token L_AposAttrContentChar");

        try {
            // XQueryParser.g:915:9: ( L_AposAttrContentChar -> ^( AttributeValueChar L_AposAttrContentChar ) )
            // XQueryParser.g:915:11: L_AposAttrContentChar
            {
            L_AposAttrContentChar405=(CommonToken)match(input,L_AposAttrContentChar,FOLLOW_L_AposAttrContentChar_in_pg_AposAttrContentChar7984); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_L_AposAttrContentChar.add(L_AposAttrContentChar405);



            // AST REWRITE
            // elements: L_AposAttrContentChar
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (XQDTCommonTree)adaptor.nil();
            // 916:17: -> ^( AttributeValueChar L_AposAttrContentChar )
            {
                // XQueryParser.g:916:20: ^( AttributeValueChar L_AposAttrContentChar )
                {
                XQDTCommonTree root_1 = (XQDTCommonTree)adaptor.nil();
                root_1 = (XQDTCommonTree)adaptor.becomeRoot((XQDTCommonTree)adaptor.create(AttributeValueChar, "AttributeValueChar"), root_1);

                adaptor.addChild(root_1, stream_L_AposAttrContentChar.nextNode());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (XQDTCommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (XQDTCommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "pg_AposAttrContentChar"

    public static class pm_DirElemContent_return extends ParserRuleReturnScope {
        XQDTCommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "pm_DirElemContent"
    // XQueryParser.g:921:1: pm_DirElemContent : ( p_DirectConstructor | L_CDataSection | p_ElemEnclosedExpr | pg_CommonContent | pg_ElementContentChar );
    public final XQueryParser.pm_DirElemContent_return pm_DirElemContent() throws RecognitionException {
        XQueryParser.pm_DirElemContent_return retval = new XQueryParser.pm_DirElemContent_return();
        retval.start = input.LT(1);

        XQDTCommonTree root_0 = null;

        CommonToken L_CDataSection407=null;
        XQueryParser.p_DirectConstructor_return p_DirectConstructor406 = null;

        XQueryParser.p_ElemEnclosedExpr_return p_ElemEnclosedExpr408 = null;

        XQueryParser.pg_CommonContent_return pg_CommonContent409 = null;

        XQueryParser.pg_ElementContentChar_return pg_ElementContentChar410 = null;


        XQDTCommonTree L_CDataSection407_tree=null;

        try {
            // XQueryParser.g:922:9: ( p_DirectConstructor | L_CDataSection | p_ElemEnclosedExpr | pg_CommonContent | pg_ElementContentChar )
            int alt153=5;
            switch ( input.LA(1) ) {
            case SMALLER:
            case L_DirCommentConstructor:
            case L_DirPIConstructor:
                {
                alt153=1;
                }
                break;
            case L_CDataSection:
                {
                alt153=2;
                }
                break;
            case LBRACKET:
                {
                alt153=3;
                }
                break;
            case L_PredefinedEntityRef:
            case L_CharRef:
            case ESCAPE_LBRACKET:
            case ESCAPE_RBRACKET:
                {
                alt153=4;
                }
                break;
            case L_ElementContentChar:
                {
                alt153=5;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 153, 0, input);

                throw nvae;
            }

            switch (alt153) {
                case 1 :
                    // XQueryParser.g:922:11: p_DirectConstructor
                    {
                    root_0 = (XQDTCommonTree)adaptor.nil();

                    pushFollow(FOLLOW_p_DirectConstructor_in_pm_DirElemContent8035);
                    p_DirectConstructor406=p_DirectConstructor();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, p_DirectConstructor406.getTree());

                    }
                    break;
                case 2 :
                    // XQueryParser.g:923:11: L_CDataSection
                    {
                    root_0 = (XQDTCommonTree)adaptor.nil();

                    L_CDataSection407=(CommonToken)match(input,L_CDataSection,FOLLOW_L_CDataSection_in_pm_DirElemContent8047); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    L_CDataSection407_tree = (XQDTCommonTree)adaptor.create(L_CDataSection407);
                    adaptor.addChild(root_0, L_CDataSection407_tree);
                    }

                    }
                    break;
                case 3 :
                    // XQueryParser.g:924:11: p_ElemEnclosedExpr
                    {
                    root_0 = (XQDTCommonTree)adaptor.nil();

                    pushFollow(FOLLOW_p_ElemEnclosedExpr_in_pm_DirElemContent8059);
                    p_ElemEnclosedExpr408=p_ElemEnclosedExpr();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, p_ElemEnclosedExpr408.getTree());

                    }
                    break;
                case 4 :
                    // XQueryParser.g:925:11: pg_CommonContent
                    {
                    root_0 = (XQDTCommonTree)adaptor.nil();

                    pushFollow(FOLLOW_pg_CommonContent_in_pm_DirElemContent8071);
                    pg_CommonContent409=pg_CommonContent();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, pg_CommonContent409.getTree());

                    }
                    break;
                case 5 :
                    // XQueryParser.g:926:11: pg_ElementContentChar
                    {
                    root_0 = (XQDTCommonTree)adaptor.nil();

                    pushFollow(FOLLOW_pg_ElementContentChar_in_pm_DirElemContent8083);
                    pg_ElementContentChar410=pg_ElementContentChar();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, pg_ElementContentChar410.getTree());

                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (XQDTCommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (XQDTCommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "pm_DirElemContent"

    public static class pg_ElementContentChar_return extends ParserRuleReturnScope {
        XQDTCommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "pg_ElementContentChar"
    // XQueryParser.g:933:1: pg_ElementContentChar : L_ElementContentChar -> ^( ElementContentChar L_ElementContentChar ) ;
    public final XQueryParser.pg_ElementContentChar_return pg_ElementContentChar() throws RecognitionException {
        XQueryParser.pg_ElementContentChar_return retval = new XQueryParser.pg_ElementContentChar_return();
        retval.start = input.LT(1);

        XQDTCommonTree root_0 = null;

        CommonToken L_ElementContentChar411=null;

        XQDTCommonTree L_ElementContentChar411_tree=null;
        RewriteRuleTokenStream stream_L_ElementContentChar=new RewriteRuleTokenStream(adaptor,"token L_ElementContentChar");

        try {
            // XQueryParser.g:934:9: ( L_ElementContentChar -> ^( ElementContentChar L_ElementContentChar ) )
            // XQueryParser.g:934:11: L_ElementContentChar
            {
            L_ElementContentChar411=(CommonToken)match(input,L_ElementContentChar,FOLLOW_L_ElementContentChar_in_pg_ElementContentChar8112); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_L_ElementContentChar.add(L_ElementContentChar411);



            // AST REWRITE
            // elements: L_ElementContentChar
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (XQDTCommonTree)adaptor.nil();
            // 935:17: -> ^( ElementContentChar L_ElementContentChar )
            {
                // XQueryParser.g:935:20: ^( ElementContentChar L_ElementContentChar )
                {
                XQDTCommonTree root_1 = (XQDTCommonTree)adaptor.nil();
                root_1 = (XQDTCommonTree)adaptor.becomeRoot((XQDTCommonTree)adaptor.create(ElementContentChar, "ElementContentChar"), root_1);

                adaptor.addChild(root_1, stream_L_ElementContentChar.nextNode());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (XQDTCommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (XQDTCommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "pg_ElementContentChar"

    public static class pg_CommonContent_return extends ParserRuleReturnScope {
        XQDTCommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "pg_CommonContent"
    // XQueryParser.g:943:1: pg_CommonContent : pm_CommonContent -> ^( CommonContent pm_CommonContent ) ;
    public final XQueryParser.pg_CommonContent_return pg_CommonContent() throws RecognitionException {
        XQueryParser.pg_CommonContent_return retval = new XQueryParser.pg_CommonContent_return();
        retval.start = input.LT(1);

        XQDTCommonTree root_0 = null;

        XQueryParser.pm_CommonContent_return pm_CommonContent412 = null;


        RewriteRuleSubtreeStream stream_pm_CommonContent=new RewriteRuleSubtreeStream(adaptor,"rule pm_CommonContent");
        try {
            // XQueryParser.g:944:9: ( pm_CommonContent -> ^( CommonContent pm_CommonContent ) )
            // XQueryParser.g:944:13: pm_CommonContent
            {
            pushFollow(FOLLOW_pm_CommonContent_in_pg_CommonContent8168);
            pm_CommonContent412=pm_CommonContent();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_pm_CommonContent.add(pm_CommonContent412.getTree());


            // AST REWRITE
            // elements: pm_CommonContent
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (XQDTCommonTree)adaptor.nil();
            // 945:17: -> ^( CommonContent pm_CommonContent )
            {
                // XQueryParser.g:945:20: ^( CommonContent pm_CommonContent )
                {
                XQDTCommonTree root_1 = (XQDTCommonTree)adaptor.nil();
                root_1 = (XQDTCommonTree)adaptor.becomeRoot((XQDTCommonTree)adaptor.create(CommonContent, "CommonContent"), root_1);

                adaptor.addChild(root_1, stream_pm_CommonContent.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (XQDTCommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (XQDTCommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "pg_CommonContent"

    public static class pm_CommonContent_return extends ParserRuleReturnScope {
        XQDTCommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "pm_CommonContent"
    // XQueryParser.g:950:1: pm_CommonContent : ( L_PredefinedEntityRef | L_CharRef | ESCAPE_LBRACKET | ESCAPE_RBRACKET );
    public final XQueryParser.pm_CommonContent_return pm_CommonContent() throws RecognitionException {
        XQueryParser.pm_CommonContent_return retval = new XQueryParser.pm_CommonContent_return();
        retval.start = input.LT(1);

        XQDTCommonTree root_0 = null;

        CommonToken set413=null;

        XQDTCommonTree set413_tree=null;

        try {
            // XQueryParser.g:951:9: ( L_PredefinedEntityRef | L_CharRef | ESCAPE_LBRACKET | ESCAPE_RBRACKET )
            // XQueryParser.g:
            {
            root_0 = (XQDTCommonTree)adaptor.nil();

            set413=(CommonToken)input.LT(1);
            if ( (input.LA(1)>=L_PredefinedEntityRef && input.LA(1)<=ESCAPE_RBRACKET) ) {
                input.consume();
                if ( state.backtracking==0 ) adaptor.addChild(root_0, (XQDTCommonTree)adaptor.create(set413));
                state.errorRecovery=false;state.failed=false;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                MismatchedSetException mse = new MismatchedSetException(null,input);
                throw mse;
            }


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (XQDTCommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (XQDTCommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "pm_CommonContent"

    public static class p_ElemEnclosedExpr_return extends ParserRuleReturnScope {
        XQDTCommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "p_ElemEnclosedExpr"
    // XQueryParser.g:958:1: p_ElemEnclosedExpr : LBRACKET pm_Expr RBRACKET ;
    public final XQueryParser.p_ElemEnclosedExpr_return p_ElemEnclosedExpr() throws RecognitionException {
        XQueryParser.p_ElemEnclosedExpr_return retval = new XQueryParser.p_ElemEnclosedExpr_return();
        retval.start = input.LT(1);

        XQDTCommonTree root_0 = null;

        CommonToken LBRACKET414=null;
        CommonToken RBRACKET416=null;
        XQueryParser.pm_Expr_return pm_Expr415 = null;


        XQDTCommonTree LBRACKET414_tree=null;
        XQDTCommonTree RBRACKET416_tree=null;

        try {
            // XQueryParser.g:959:9: ( LBRACKET pm_Expr RBRACKET )
            // XQueryParser.g:959:13: LBRACKET pm_Expr RBRACKET
            {
            root_0 = (XQDTCommonTree)adaptor.nil();

            LBRACKET414=(CommonToken)match(input,LBRACKET,FOLLOW_LBRACKET_in_p_ElemEnclosedExpr8264); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            LBRACKET414_tree = (XQDTCommonTree)adaptor.create(LBRACKET414);
            adaptor.addChild(root_0, LBRACKET414_tree);
            }
            if ( state.backtracking==0 ) {
              pushXQueryLexer();
            }
            pushFollow(FOLLOW_pm_Expr_in_p_ElemEnclosedExpr8280);
            pm_Expr415=pm_Expr();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, pm_Expr415.getTree());
            RBRACKET416=(CommonToken)match(input,RBRACKET,FOLLOW_RBRACKET_in_p_ElemEnclosedExpr8294); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            RBRACKET416_tree = (XQDTCommonTree)adaptor.create(RBRACKET416);
            adaptor.addChild(root_0, RBRACKET416_tree);
            }
            if ( state.backtracking==0 ) {
              popLexer();
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (XQDTCommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (XQDTCommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "p_ElemEnclosedExpr"

    public static class p_ComputedConstructor_return extends ParserRuleReturnScope {
        XQDTCommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "p_ComputedConstructor"
    // XQueryParser.g:984:1: p_ComputedConstructor : ( p_CompDocConstructor | p_CompElemConstructor | p_CompAttrConstructor | p_CompNamespaceConstructor | p_CompTextConstructor | p_CompCommentConstructor | p_CompPIConstructor | {...}? => p_CompBinaryConstructor );
    public final XQueryParser.p_ComputedConstructor_return p_ComputedConstructor() throws RecognitionException {
        XQueryParser.p_ComputedConstructor_return retval = new XQueryParser.p_ComputedConstructor_return();
        retval.start = input.LT(1);

        XQDTCommonTree root_0 = null;

        XQueryParser.p_CompDocConstructor_return p_CompDocConstructor417 = null;

        XQueryParser.p_CompElemConstructor_return p_CompElemConstructor418 = null;

        XQueryParser.p_CompAttrConstructor_return p_CompAttrConstructor419 = null;

        XQueryParser.p_CompNamespaceConstructor_return p_CompNamespaceConstructor420 = null;

        XQueryParser.p_CompTextConstructor_return p_CompTextConstructor421 = null;

        XQueryParser.p_CompCommentConstructor_return p_CompCommentConstructor422 = null;

        XQueryParser.p_CompPIConstructor_return p_CompPIConstructor423 = null;

        XQueryParser.p_CompBinaryConstructor_return p_CompBinaryConstructor424 = null;



        try {
            // XQueryParser.g:985:9: ( p_CompDocConstructor | p_CompElemConstructor | p_CompAttrConstructor | p_CompNamespaceConstructor | p_CompTextConstructor | p_CompCommentConstructor | p_CompPIConstructor | {...}? => p_CompBinaryConstructor )
            int alt154=8;
            int LA154_0 = input.LA(1);

            if ( (LA154_0==DOCUMENT) ) {
                alt154=1;
            }
            else if ( (LA154_0==ELEMENT) ) {
                alt154=2;
            }
            else if ( (LA154_0==ATTRIBUTE) ) {
                alt154=3;
            }
            else if ( (LA154_0==NAMESPACE) ) {
                alt154=4;
            }
            else if ( (LA154_0==TEXT) ) {
                alt154=5;
            }
            else if ( (LA154_0==COMMENT) ) {
                alt154=6;
            }
            else if ( (LA154_0==PROCESSING_INSTRUCTION) ) {
                alt154=7;
            }
            else if ( (LA154_0==BINARY) && ((lc(MLS)))) {
                alt154=8;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 154, 0, input);

                throw nvae;
            }
            switch (alt154) {
                case 1 :
                    // XQueryParser.g:985:13: p_CompDocConstructor
                    {
                    root_0 = (XQDTCommonTree)adaptor.nil();

                    pushFollow(FOLLOW_p_CompDocConstructor_in_p_ComputedConstructor8346);
                    p_CompDocConstructor417=p_CompDocConstructor();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, p_CompDocConstructor417.getTree());

                    }
                    break;
                case 2 :
                    // XQueryParser.g:986:11: p_CompElemConstructor
                    {
                    root_0 = (XQDTCommonTree)adaptor.nil();

                    pushFollow(FOLLOW_p_CompElemConstructor_in_p_ComputedConstructor8358);
                    p_CompElemConstructor418=p_CompElemConstructor();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, p_CompElemConstructor418.getTree());

                    }
                    break;
                case 3 :
                    // XQueryParser.g:987:11: p_CompAttrConstructor
                    {
                    root_0 = (XQDTCommonTree)adaptor.nil();

                    pushFollow(FOLLOW_p_CompAttrConstructor_in_p_ComputedConstructor8370);
                    p_CompAttrConstructor419=p_CompAttrConstructor();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, p_CompAttrConstructor419.getTree());

                    }
                    break;
                case 4 :
                    // XQueryParser.g:988:11: p_CompNamespaceConstructor
                    {
                    root_0 = (XQDTCommonTree)adaptor.nil();

                    pushFollow(FOLLOW_p_CompNamespaceConstructor_in_p_ComputedConstructor8382);
                    p_CompNamespaceConstructor420=p_CompNamespaceConstructor();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, p_CompNamespaceConstructor420.getTree());

                    }
                    break;
                case 5 :
                    // XQueryParser.g:989:11: p_CompTextConstructor
                    {
                    root_0 = (XQDTCommonTree)adaptor.nil();

                    pushFollow(FOLLOW_p_CompTextConstructor_in_p_ComputedConstructor8394);
                    p_CompTextConstructor421=p_CompTextConstructor();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, p_CompTextConstructor421.getTree());

                    }
                    break;
                case 6 :
                    // XQueryParser.g:990:11: p_CompCommentConstructor
                    {
                    root_0 = (XQDTCommonTree)adaptor.nil();

                    pushFollow(FOLLOW_p_CompCommentConstructor_in_p_ComputedConstructor8406);
                    p_CompCommentConstructor422=p_CompCommentConstructor();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, p_CompCommentConstructor422.getTree());

                    }
                    break;
                case 7 :
                    // XQueryParser.g:991:11: p_CompPIConstructor
                    {
                    root_0 = (XQDTCommonTree)adaptor.nil();

                    pushFollow(FOLLOW_p_CompPIConstructor_in_p_ComputedConstructor8418);
                    p_CompPIConstructor423=p_CompPIConstructor();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, p_CompPIConstructor423.getTree());

                    }
                    break;
                case 8 :
                    // XQueryParser.g:992:11: {...}? => p_CompBinaryConstructor
                    {
                    root_0 = (XQDTCommonTree)adaptor.nil();

                    if ( !((lc(MLS))) ) {
                        if (state.backtracking>0) {state.failed=true; return retval;}
                        throw new FailedPredicateException(input, "p_ComputedConstructor", "lc(MLS)");
                    }
                    pushFollow(FOLLOW_p_CompBinaryConstructor_in_p_ComputedConstructor8433);
                    p_CompBinaryConstructor424=p_CompBinaryConstructor();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, p_CompBinaryConstructor424.getTree());

                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (XQDTCommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (XQDTCommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "p_ComputedConstructor"

    public static class p_CompDocConstructor_return extends ParserRuleReturnScope {
        XQDTCommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "p_CompDocConstructor"
    // XQueryParser.g:996:1: p_CompDocConstructor : k= DOCUMENT LBRACKET pm_Expr RBRACKET ;
    public final XQueryParser.p_CompDocConstructor_return p_CompDocConstructor() throws RecognitionException {
        XQueryParser.p_CompDocConstructor_return retval = new XQueryParser.p_CompDocConstructor_return();
        retval.start = input.LT(1);

        XQDTCommonTree root_0 = null;

        CommonToken k=null;
        CommonToken LBRACKET425=null;
        CommonToken RBRACKET427=null;
        XQueryParser.pm_Expr_return pm_Expr426 = null;


        XQDTCommonTree k_tree=null;
        XQDTCommonTree LBRACKET425_tree=null;
        XQDTCommonTree RBRACKET427_tree=null;

        try {
            // XQueryParser.g:997:9: (k= DOCUMENT LBRACKET pm_Expr RBRACKET )
            // XQueryParser.g:997:13: k= DOCUMENT LBRACKET pm_Expr RBRACKET
            {
            root_0 = (XQDTCommonTree)adaptor.nil();

            k=(CommonToken)match(input,DOCUMENT,FOLLOW_DOCUMENT_in_p_CompDocConstructor8467); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            k_tree = (XQDTCommonTree)adaptor.create(k);
            adaptor.addChild(root_0, k_tree);
            }
            if ( state.backtracking==0 ) {
              ak(k);
            }
            LBRACKET425=(CommonToken)match(input,LBRACKET,FOLLOW_LBRACKET_in_p_CompDocConstructor8471); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            LBRACKET425_tree = (XQDTCommonTree)adaptor.create(LBRACKET425);
            adaptor.addChild(root_0, LBRACKET425_tree);
            }
            pushFollow(FOLLOW_pm_Expr_in_p_CompDocConstructor8473);
            pm_Expr426=pm_Expr();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, pm_Expr426.getTree());
            RBRACKET427=(CommonToken)match(input,RBRACKET,FOLLOW_RBRACKET_in_p_CompDocConstructor8475); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            RBRACKET427_tree = (XQDTCommonTree)adaptor.create(RBRACKET427);
            adaptor.addChild(root_0, RBRACKET427_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (XQDTCommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (XQDTCommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "p_CompDocConstructor"

    public static class p_CompElemConstructor_return extends ParserRuleReturnScope {
        XQDTCommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "p_CompElemConstructor"
    // XQueryParser.g:1001:1: p_CompElemConstructor : k= ELEMENT ( p_QName | ( LBRACKET pm_Expr RBRACKET ) ) LBRACKET ( pm_Expr )? RBRACKET ;
    public final XQueryParser.p_CompElemConstructor_return p_CompElemConstructor() throws RecognitionException {
        XQueryParser.p_CompElemConstructor_return retval = new XQueryParser.p_CompElemConstructor_return();
        retval.start = input.LT(1);

        XQDTCommonTree root_0 = null;

        CommonToken k=null;
        CommonToken LBRACKET429=null;
        CommonToken RBRACKET431=null;
        CommonToken LBRACKET432=null;
        CommonToken RBRACKET434=null;
        XQueryParser.p_QName_return p_QName428 = null;

        XQueryParser.pm_Expr_return pm_Expr430 = null;

        XQueryParser.pm_Expr_return pm_Expr433 = null;


        XQDTCommonTree k_tree=null;
        XQDTCommonTree LBRACKET429_tree=null;
        XQDTCommonTree RBRACKET431_tree=null;
        XQDTCommonTree LBRACKET432_tree=null;
        XQDTCommonTree RBRACKET434_tree=null;

        try {
            // XQueryParser.g:1002:9: (k= ELEMENT ( p_QName | ( LBRACKET pm_Expr RBRACKET ) ) LBRACKET ( pm_Expr )? RBRACKET )
            // XQueryParser.g:1002:13: k= ELEMENT ( p_QName | ( LBRACKET pm_Expr RBRACKET ) ) LBRACKET ( pm_Expr )? RBRACKET
            {
            root_0 = (XQDTCommonTree)adaptor.nil();

            k=(CommonToken)match(input,ELEMENT,FOLLOW_ELEMENT_in_p_CompElemConstructor8516); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            k_tree = (XQDTCommonTree)adaptor.create(k);
            adaptor.addChild(root_0, k_tree);
            }
            if ( state.backtracking==0 ) {
              ak(k);
            }
            // XQueryParser.g:1002:33: ( p_QName | ( LBRACKET pm_Expr RBRACKET ) )
            int alt155=2;
            int LA155_0 = input.LA(1);

            if ( ((LA155_0>=ANCESTOR && LA155_0<=DECIMAL_SEPARATOR)||(LA155_0>=DIGIT && LA155_0<=NEXT)||(LA155_0>=ONLY && LA155_0<=EXIT)||(LA155_0>=SEQUENTIAL && LA155_0<=MAINTAINED)||(LA155_0>=MUTABLE && LA155_0<=QUOT_ER)||LA155_0==L_NCName||LA155_0==EXPLICITLY) ) {
                alt155=1;
            }
            else if ( (LA155_0==LBRACKET) ) {
                alt155=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 155, 0, input);

                throw nvae;
            }
            switch (alt155) {
                case 1 :
                    // XQueryParser.g:1002:34: p_QName
                    {
                    pushFollow(FOLLOW_p_QName_in_p_CompElemConstructor8521);
                    p_QName428=p_QName();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, p_QName428.getTree());

                    }
                    break;
                case 2 :
                    // XQueryParser.g:1002:44: ( LBRACKET pm_Expr RBRACKET )
                    {
                    // XQueryParser.g:1002:44: ( LBRACKET pm_Expr RBRACKET )
                    // XQueryParser.g:1002:45: LBRACKET pm_Expr RBRACKET
                    {
                    LBRACKET429=(CommonToken)match(input,LBRACKET,FOLLOW_LBRACKET_in_p_CompElemConstructor8526); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    LBRACKET429_tree = (XQDTCommonTree)adaptor.create(LBRACKET429);
                    adaptor.addChild(root_0, LBRACKET429_tree);
                    }
                    pushFollow(FOLLOW_pm_Expr_in_p_CompElemConstructor8528);
                    pm_Expr430=pm_Expr();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, pm_Expr430.getTree());
                    RBRACKET431=(CommonToken)match(input,RBRACKET,FOLLOW_RBRACKET_in_p_CompElemConstructor8530); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    RBRACKET431_tree = (XQDTCommonTree)adaptor.create(RBRACKET431);
                    adaptor.addChild(root_0, RBRACKET431_tree);
                    }

                    }


                    }
                    break;

            }

            LBRACKET432=(CommonToken)match(input,LBRACKET,FOLLOW_LBRACKET_in_p_CompElemConstructor8534); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            LBRACKET432_tree = (XQDTCommonTree)adaptor.create(LBRACKET432);
            adaptor.addChild(root_0, LBRACKET432_tree);
            }
            // XQueryParser.g:1002:82: ( pm_Expr )?
            int alt156=2;
            int LA156_0 = input.LA(1);

            if ( ((LA156_0>=ANCESTOR && LA156_0<=DECIMAL_SEPARATOR)||(LA156_0>=DIGIT && LA156_0<=NEXT)||(LA156_0>=ONLY && LA156_0<=EXIT)||(LA156_0>=SEQUENTIAL && LA156_0<=MAINTAINED)||(LA156_0>=MUTABLE && LA156_0<=LPAREN)||LA156_0==DOLLAR||(LA156_0>=STAR && LA156_0<=SMALLER)||(LA156_0>=SLASH && LA156_0<=DOT_DOT)||LA156_0==ATTR_SIGN||(LA156_0>=APOS && LA156_0<=QUOT)||LA156_0==L_NCName||(LA156_0>=L_Pragma && LA156_0<=L_DoubleLiteral)||LA156_0==EXPLICITLY) ) {
                alt156=1;
            }
            switch (alt156) {
                case 1 :
                    // XQueryParser.g:1002:82: pm_Expr
                    {
                    pushFollow(FOLLOW_pm_Expr_in_p_CompElemConstructor8536);
                    pm_Expr433=pm_Expr();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, pm_Expr433.getTree());

                    }
                    break;

            }

            RBRACKET434=(CommonToken)match(input,RBRACKET,FOLLOW_RBRACKET_in_p_CompElemConstructor8539); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            RBRACKET434_tree = (XQDTCommonTree)adaptor.create(RBRACKET434);
            adaptor.addChild(root_0, RBRACKET434_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (XQDTCommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (XQDTCommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "p_CompElemConstructor"

    public static class p_CompAttrConstructor_return extends ParserRuleReturnScope {
        XQDTCommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "p_CompAttrConstructor"
    // XQueryParser.g:1009:1: p_CompAttrConstructor : k= ATTRIBUTE ( p_QName | ( LBRACKET pm_Expr RBRACKET ) ) LBRACKET ( pm_Expr )? RBRACKET ;
    public final XQueryParser.p_CompAttrConstructor_return p_CompAttrConstructor() throws RecognitionException {
        XQueryParser.p_CompAttrConstructor_return retval = new XQueryParser.p_CompAttrConstructor_return();
        retval.start = input.LT(1);

        XQDTCommonTree root_0 = null;

        CommonToken k=null;
        CommonToken LBRACKET436=null;
        CommonToken RBRACKET438=null;
        CommonToken LBRACKET439=null;
        CommonToken RBRACKET441=null;
        XQueryParser.p_QName_return p_QName435 = null;

        XQueryParser.pm_Expr_return pm_Expr437 = null;

        XQueryParser.pm_Expr_return pm_Expr440 = null;


        XQDTCommonTree k_tree=null;
        XQDTCommonTree LBRACKET436_tree=null;
        XQDTCommonTree RBRACKET438_tree=null;
        XQDTCommonTree LBRACKET439_tree=null;
        XQDTCommonTree RBRACKET441_tree=null;

        try {
            // XQueryParser.g:1010:9: (k= ATTRIBUTE ( p_QName | ( LBRACKET pm_Expr RBRACKET ) ) LBRACKET ( pm_Expr )? RBRACKET )
            // XQueryParser.g:1010:13: k= ATTRIBUTE ( p_QName | ( LBRACKET pm_Expr RBRACKET ) ) LBRACKET ( pm_Expr )? RBRACKET
            {
            root_0 = (XQDTCommonTree)adaptor.nil();

            k=(CommonToken)match(input,ATTRIBUTE,FOLLOW_ATTRIBUTE_in_p_CompAttrConstructor8572); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            k_tree = (XQDTCommonTree)adaptor.create(k);
            adaptor.addChild(root_0, k_tree);
            }
            if ( state.backtracking==0 ) {
              ak(k);
            }
            // XQueryParser.g:1010:35: ( p_QName | ( LBRACKET pm_Expr RBRACKET ) )
            int alt157=2;
            int LA157_0 = input.LA(1);

            if ( ((LA157_0>=ANCESTOR && LA157_0<=DECIMAL_SEPARATOR)||(LA157_0>=DIGIT && LA157_0<=NEXT)||(LA157_0>=ONLY && LA157_0<=EXIT)||(LA157_0>=SEQUENTIAL && LA157_0<=MAINTAINED)||(LA157_0>=MUTABLE && LA157_0<=QUOT_ER)||LA157_0==L_NCName||LA157_0==EXPLICITLY) ) {
                alt157=1;
            }
            else if ( (LA157_0==LBRACKET) ) {
                alt157=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 157, 0, input);

                throw nvae;
            }
            switch (alt157) {
                case 1 :
                    // XQueryParser.g:1010:36: p_QName
                    {
                    pushFollow(FOLLOW_p_QName_in_p_CompAttrConstructor8577);
                    p_QName435=p_QName();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, p_QName435.getTree());

                    }
                    break;
                case 2 :
                    // XQueryParser.g:1010:46: ( LBRACKET pm_Expr RBRACKET )
                    {
                    // XQueryParser.g:1010:46: ( LBRACKET pm_Expr RBRACKET )
                    // XQueryParser.g:1010:47: LBRACKET pm_Expr RBRACKET
                    {
                    LBRACKET436=(CommonToken)match(input,LBRACKET,FOLLOW_LBRACKET_in_p_CompAttrConstructor8582); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    LBRACKET436_tree = (XQDTCommonTree)adaptor.create(LBRACKET436);
                    adaptor.addChild(root_0, LBRACKET436_tree);
                    }
                    pushFollow(FOLLOW_pm_Expr_in_p_CompAttrConstructor8584);
                    pm_Expr437=pm_Expr();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, pm_Expr437.getTree());
                    RBRACKET438=(CommonToken)match(input,RBRACKET,FOLLOW_RBRACKET_in_p_CompAttrConstructor8586); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    RBRACKET438_tree = (XQDTCommonTree)adaptor.create(RBRACKET438);
                    adaptor.addChild(root_0, RBRACKET438_tree);
                    }

                    }


                    }
                    break;

            }

            LBRACKET439=(CommonToken)match(input,LBRACKET,FOLLOW_LBRACKET_in_p_CompAttrConstructor8590); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            LBRACKET439_tree = (XQDTCommonTree)adaptor.create(LBRACKET439);
            adaptor.addChild(root_0, LBRACKET439_tree);
            }
            // XQueryParser.g:1010:84: ( pm_Expr )?
            int alt158=2;
            int LA158_0 = input.LA(1);

            if ( ((LA158_0>=ANCESTOR && LA158_0<=DECIMAL_SEPARATOR)||(LA158_0>=DIGIT && LA158_0<=NEXT)||(LA158_0>=ONLY && LA158_0<=EXIT)||(LA158_0>=SEQUENTIAL && LA158_0<=MAINTAINED)||(LA158_0>=MUTABLE && LA158_0<=LPAREN)||LA158_0==DOLLAR||(LA158_0>=STAR && LA158_0<=SMALLER)||(LA158_0>=SLASH && LA158_0<=DOT_DOT)||LA158_0==ATTR_SIGN||(LA158_0>=APOS && LA158_0<=QUOT)||LA158_0==L_NCName||(LA158_0>=L_Pragma && LA158_0<=L_DoubleLiteral)||LA158_0==EXPLICITLY) ) {
                alt158=1;
            }
            switch (alt158) {
                case 1 :
                    // XQueryParser.g:1010:84: pm_Expr
                    {
                    pushFollow(FOLLOW_pm_Expr_in_p_CompAttrConstructor8592);
                    pm_Expr440=pm_Expr();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, pm_Expr440.getTree());

                    }
                    break;

            }

            RBRACKET441=(CommonToken)match(input,RBRACKET,FOLLOW_RBRACKET_in_p_CompAttrConstructor8595); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            RBRACKET441_tree = (XQDTCommonTree)adaptor.create(RBRACKET441);
            adaptor.addChild(root_0, RBRACKET441_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (XQDTCommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (XQDTCommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "p_CompAttrConstructor"

    public static class p_CompNamespaceConstructor_return extends ParserRuleReturnScope {
        XQDTCommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "p_CompNamespaceConstructor"
    // XQueryParser.g:1014:1: p_CompNamespaceConstructor : k= NAMESPACE ( p_NCName | ( LBRACKET pm_Expr RBRACKET ) ) LBRACKET ( pm_Expr )? RBRACKET ;
    public final XQueryParser.p_CompNamespaceConstructor_return p_CompNamespaceConstructor() throws RecognitionException {
        XQueryParser.p_CompNamespaceConstructor_return retval = new XQueryParser.p_CompNamespaceConstructor_return();
        retval.start = input.LT(1);

        XQDTCommonTree root_0 = null;

        CommonToken k=null;
        CommonToken LBRACKET443=null;
        CommonToken RBRACKET445=null;
        CommonToken LBRACKET446=null;
        CommonToken RBRACKET448=null;
        XQueryParser.p_NCName_return p_NCName442 = null;

        XQueryParser.pm_Expr_return pm_Expr444 = null;

        XQueryParser.pm_Expr_return pm_Expr447 = null;


        XQDTCommonTree k_tree=null;
        XQDTCommonTree LBRACKET443_tree=null;
        XQDTCommonTree RBRACKET445_tree=null;
        XQDTCommonTree LBRACKET446_tree=null;
        XQDTCommonTree RBRACKET448_tree=null;

        try {
            // XQueryParser.g:1015:9: (k= NAMESPACE ( p_NCName | ( LBRACKET pm_Expr RBRACKET ) ) LBRACKET ( pm_Expr )? RBRACKET )
            // XQueryParser.g:1015:11: k= NAMESPACE ( p_NCName | ( LBRACKET pm_Expr RBRACKET ) ) LBRACKET ( pm_Expr )? RBRACKET
            {
            root_0 = (XQDTCommonTree)adaptor.nil();

            k=(CommonToken)match(input,NAMESPACE,FOLLOW_NAMESPACE_in_p_CompNamespaceConstructor8623); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            k_tree = (XQDTCommonTree)adaptor.create(k);
            adaptor.addChild(root_0, k_tree);
            }
            if ( state.backtracking==0 ) {
              ak(k);
            }
            // XQueryParser.g:1015:33: ( p_NCName | ( LBRACKET pm_Expr RBRACKET ) )
            int alt159=2;
            int LA159_0 = input.LA(1);

            if ( ((LA159_0>=ANCESTOR && LA159_0<=DECIMAL_SEPARATOR)||(LA159_0>=DIGIT && LA159_0<=NEXT)||(LA159_0>=ONLY && LA159_0<=EXIT)||(LA159_0>=SEQUENTIAL && LA159_0<=MAINTAINED)||(LA159_0>=MUTABLE && LA159_0<=QUOT_ER)||LA159_0==L_NCName||LA159_0==EXPLICITLY) ) {
                alt159=1;
            }
            else if ( (LA159_0==LBRACKET) ) {
                alt159=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 159, 0, input);

                throw nvae;
            }
            switch (alt159) {
                case 1 :
                    // XQueryParser.g:1015:34: p_NCName
                    {
                    pushFollow(FOLLOW_p_NCName_in_p_CompNamespaceConstructor8628);
                    p_NCName442=p_NCName();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, p_NCName442.getTree());

                    }
                    break;
                case 2 :
                    // XQueryParser.g:1015:45: ( LBRACKET pm_Expr RBRACKET )
                    {
                    // XQueryParser.g:1015:45: ( LBRACKET pm_Expr RBRACKET )
                    // XQueryParser.g:1015:46: LBRACKET pm_Expr RBRACKET
                    {
                    LBRACKET443=(CommonToken)match(input,LBRACKET,FOLLOW_LBRACKET_in_p_CompNamespaceConstructor8633); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    LBRACKET443_tree = (XQDTCommonTree)adaptor.create(LBRACKET443);
                    adaptor.addChild(root_0, LBRACKET443_tree);
                    }
                    pushFollow(FOLLOW_pm_Expr_in_p_CompNamespaceConstructor8635);
                    pm_Expr444=pm_Expr();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, pm_Expr444.getTree());
                    RBRACKET445=(CommonToken)match(input,RBRACKET,FOLLOW_RBRACKET_in_p_CompNamespaceConstructor8637); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    RBRACKET445_tree = (XQDTCommonTree)adaptor.create(RBRACKET445);
                    adaptor.addChild(root_0, RBRACKET445_tree);
                    }

                    }


                    }
                    break;

            }

            LBRACKET446=(CommonToken)match(input,LBRACKET,FOLLOW_LBRACKET_in_p_CompNamespaceConstructor8641); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            LBRACKET446_tree = (XQDTCommonTree)adaptor.create(LBRACKET446);
            adaptor.addChild(root_0, LBRACKET446_tree);
            }
            // XQueryParser.g:1015:83: ( pm_Expr )?
            int alt160=2;
            int LA160_0 = input.LA(1);

            if ( ((LA160_0>=ANCESTOR && LA160_0<=DECIMAL_SEPARATOR)||(LA160_0>=DIGIT && LA160_0<=NEXT)||(LA160_0>=ONLY && LA160_0<=EXIT)||(LA160_0>=SEQUENTIAL && LA160_0<=MAINTAINED)||(LA160_0>=MUTABLE && LA160_0<=LPAREN)||LA160_0==DOLLAR||(LA160_0>=STAR && LA160_0<=SMALLER)||(LA160_0>=SLASH && LA160_0<=DOT_DOT)||LA160_0==ATTR_SIGN||(LA160_0>=APOS && LA160_0<=QUOT)||LA160_0==L_NCName||(LA160_0>=L_Pragma && LA160_0<=L_DoubleLiteral)||LA160_0==EXPLICITLY) ) {
                alt160=1;
            }
            switch (alt160) {
                case 1 :
                    // XQueryParser.g:1015:83: pm_Expr
                    {
                    pushFollow(FOLLOW_pm_Expr_in_p_CompNamespaceConstructor8643);
                    pm_Expr447=pm_Expr();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, pm_Expr447.getTree());

                    }
                    break;

            }

            RBRACKET448=(CommonToken)match(input,RBRACKET,FOLLOW_RBRACKET_in_p_CompNamespaceConstructor8646); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            RBRACKET448_tree = (XQDTCommonTree)adaptor.create(RBRACKET448);
            adaptor.addChild(root_0, RBRACKET448_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (XQDTCommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (XQDTCommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "p_CompNamespaceConstructor"

    public static class p_CompTextConstructor_return extends ParserRuleReturnScope {
        XQDTCommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "p_CompTextConstructor"
    // XQueryParser.g:1025:1: p_CompTextConstructor : k= TEXT LBRACKET pm_Expr RBRACKET ;
    public final XQueryParser.p_CompTextConstructor_return p_CompTextConstructor() throws RecognitionException {
        XQueryParser.p_CompTextConstructor_return retval = new XQueryParser.p_CompTextConstructor_return();
        retval.start = input.LT(1);

        XQDTCommonTree root_0 = null;

        CommonToken k=null;
        CommonToken LBRACKET449=null;
        CommonToken RBRACKET451=null;
        XQueryParser.pm_Expr_return pm_Expr450 = null;


        XQDTCommonTree k_tree=null;
        XQDTCommonTree LBRACKET449_tree=null;
        XQDTCommonTree RBRACKET451_tree=null;

        try {
            // XQueryParser.g:1026:9: (k= TEXT LBRACKET pm_Expr RBRACKET )
            // XQueryParser.g:1026:13: k= TEXT LBRACKET pm_Expr RBRACKET
            {
            root_0 = (XQDTCommonTree)adaptor.nil();

            k=(CommonToken)match(input,TEXT,FOLLOW_TEXT_in_p_CompTextConstructor8682); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            k_tree = (XQDTCommonTree)adaptor.create(k);
            adaptor.addChild(root_0, k_tree);
            }
            if ( state.backtracking==0 ) {
              ak(k);
            }
            LBRACKET449=(CommonToken)match(input,LBRACKET,FOLLOW_LBRACKET_in_p_CompTextConstructor8686); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            LBRACKET449_tree = (XQDTCommonTree)adaptor.create(LBRACKET449);
            adaptor.addChild(root_0, LBRACKET449_tree);
            }
            pushFollow(FOLLOW_pm_Expr_in_p_CompTextConstructor8688);
            pm_Expr450=pm_Expr();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, pm_Expr450.getTree());
            RBRACKET451=(CommonToken)match(input,RBRACKET,FOLLOW_RBRACKET_in_p_CompTextConstructor8690); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            RBRACKET451_tree = (XQDTCommonTree)adaptor.create(RBRACKET451);
            adaptor.addChild(root_0, RBRACKET451_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (XQDTCommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (XQDTCommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "p_CompTextConstructor"

    public static class p_CompBinaryConstructor_return extends ParserRuleReturnScope {
        XQDTCommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "p_CompBinaryConstructor"
    // XQueryParser.g:1030:1: p_CompBinaryConstructor : k= BINARY LBRACKET pm_Expr RBRACKET ;
    public final XQueryParser.p_CompBinaryConstructor_return p_CompBinaryConstructor() throws RecognitionException {
        XQueryParser.p_CompBinaryConstructor_return retval = new XQueryParser.p_CompBinaryConstructor_return();
        retval.start = input.LT(1);

        XQDTCommonTree root_0 = null;

        CommonToken k=null;
        CommonToken LBRACKET452=null;
        CommonToken RBRACKET454=null;
        XQueryParser.pm_Expr_return pm_Expr453 = null;


        XQDTCommonTree k_tree=null;
        XQDTCommonTree LBRACKET452_tree=null;
        XQDTCommonTree RBRACKET454_tree=null;

        try {
            // XQueryParser.g:1031:9: (k= BINARY LBRACKET pm_Expr RBRACKET )
            // XQueryParser.g:1031:13: k= BINARY LBRACKET pm_Expr RBRACKET
            {
            root_0 = (XQDTCommonTree)adaptor.nil();

            k=(CommonToken)match(input,BINARY,FOLLOW_BINARY_in_p_CompBinaryConstructor8720); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            k_tree = (XQDTCommonTree)adaptor.create(k);
            adaptor.addChild(root_0, k_tree);
            }
            if ( state.backtracking==0 ) {
              ak(k);
            }
            LBRACKET452=(CommonToken)match(input,LBRACKET,FOLLOW_LBRACKET_in_p_CompBinaryConstructor8724); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            LBRACKET452_tree = (XQDTCommonTree)adaptor.create(LBRACKET452);
            adaptor.addChild(root_0, LBRACKET452_tree);
            }
            pushFollow(FOLLOW_pm_Expr_in_p_CompBinaryConstructor8726);
            pm_Expr453=pm_Expr();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, pm_Expr453.getTree());
            RBRACKET454=(CommonToken)match(input,RBRACKET,FOLLOW_RBRACKET_in_p_CompBinaryConstructor8728); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            RBRACKET454_tree = (XQDTCommonTree)adaptor.create(RBRACKET454);
            adaptor.addChild(root_0, RBRACKET454_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (XQDTCommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (XQDTCommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "p_CompBinaryConstructor"

    public static class p_CompCommentConstructor_return extends ParserRuleReturnScope {
        XQDTCommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "p_CompCommentConstructor"
    // XQueryParser.g:1035:1: p_CompCommentConstructor : k= COMMENT LBRACKET pm_Expr RBRACKET ;
    public final XQueryParser.p_CompCommentConstructor_return p_CompCommentConstructor() throws RecognitionException {
        XQueryParser.p_CompCommentConstructor_return retval = new XQueryParser.p_CompCommentConstructor_return();
        retval.start = input.LT(1);

        XQDTCommonTree root_0 = null;

        CommonToken k=null;
        CommonToken LBRACKET455=null;
        CommonToken RBRACKET457=null;
        XQueryParser.pm_Expr_return pm_Expr456 = null;


        XQDTCommonTree k_tree=null;
        XQDTCommonTree LBRACKET455_tree=null;
        XQDTCommonTree RBRACKET457_tree=null;

        try {
            // XQueryParser.g:1036:9: (k= COMMENT LBRACKET pm_Expr RBRACKET )
            // XQueryParser.g:1036:13: k= COMMENT LBRACKET pm_Expr RBRACKET
            {
            root_0 = (XQDTCommonTree)adaptor.nil();

            k=(CommonToken)match(input,COMMENT,FOLLOW_COMMENT_in_p_CompCommentConstructor8758); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            k_tree = (XQDTCommonTree)adaptor.create(k);
            adaptor.addChild(root_0, k_tree);
            }
            if ( state.backtracking==0 ) {
              ak(k);
            }
            LBRACKET455=(CommonToken)match(input,LBRACKET,FOLLOW_LBRACKET_in_p_CompCommentConstructor8762); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            LBRACKET455_tree = (XQDTCommonTree)adaptor.create(LBRACKET455);
            adaptor.addChild(root_0, LBRACKET455_tree);
            }
            pushFollow(FOLLOW_pm_Expr_in_p_CompCommentConstructor8764);
            pm_Expr456=pm_Expr();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, pm_Expr456.getTree());
            RBRACKET457=(CommonToken)match(input,RBRACKET,FOLLOW_RBRACKET_in_p_CompCommentConstructor8766); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            RBRACKET457_tree = (XQDTCommonTree)adaptor.create(RBRACKET457);
            adaptor.addChild(root_0, RBRACKET457_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (XQDTCommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (XQDTCommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "p_CompCommentConstructor"

    public static class p_CompPIConstructor_return extends ParserRuleReturnScope {
        XQDTCommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "p_CompPIConstructor"
    // XQueryParser.g:1040:1: p_CompPIConstructor : k= PROCESSING_INSTRUCTION ( p_NCName | ( LBRACKET pm_Expr RBRACKET ) ) LBRACKET ( pm_Expr )? RBRACKET ;
    public final XQueryParser.p_CompPIConstructor_return p_CompPIConstructor() throws RecognitionException {
        XQueryParser.p_CompPIConstructor_return retval = new XQueryParser.p_CompPIConstructor_return();
        retval.start = input.LT(1);

        XQDTCommonTree root_0 = null;

        CommonToken k=null;
        CommonToken LBRACKET459=null;
        CommonToken RBRACKET461=null;
        CommonToken LBRACKET462=null;
        CommonToken RBRACKET464=null;
        XQueryParser.p_NCName_return p_NCName458 = null;

        XQueryParser.pm_Expr_return pm_Expr460 = null;

        XQueryParser.pm_Expr_return pm_Expr463 = null;


        XQDTCommonTree k_tree=null;
        XQDTCommonTree LBRACKET459_tree=null;
        XQDTCommonTree RBRACKET461_tree=null;
        XQDTCommonTree LBRACKET462_tree=null;
        XQDTCommonTree RBRACKET464_tree=null;

        try {
            // XQueryParser.g:1041:9: (k= PROCESSING_INSTRUCTION ( p_NCName | ( LBRACKET pm_Expr RBRACKET ) ) LBRACKET ( pm_Expr )? RBRACKET )
            // XQueryParser.g:1041:13: k= PROCESSING_INSTRUCTION ( p_NCName | ( LBRACKET pm_Expr RBRACKET ) ) LBRACKET ( pm_Expr )? RBRACKET
            {
            root_0 = (XQDTCommonTree)adaptor.nil();

            k=(CommonToken)match(input,PROCESSING_INSTRUCTION,FOLLOW_PROCESSING_INSTRUCTION_in_p_CompPIConstructor8797); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            k_tree = (XQDTCommonTree)adaptor.create(k);
            adaptor.addChild(root_0, k_tree);
            }
            if ( state.backtracking==0 ) {
              ak(k);
            }
            // XQueryParser.g:1041:48: ( p_NCName | ( LBRACKET pm_Expr RBRACKET ) )
            int alt161=2;
            int LA161_0 = input.LA(1);

            if ( ((LA161_0>=ANCESTOR && LA161_0<=DECIMAL_SEPARATOR)||(LA161_0>=DIGIT && LA161_0<=NEXT)||(LA161_0>=ONLY && LA161_0<=EXIT)||(LA161_0>=SEQUENTIAL && LA161_0<=MAINTAINED)||(LA161_0>=MUTABLE && LA161_0<=QUOT_ER)||LA161_0==L_NCName||LA161_0==EXPLICITLY) ) {
                alt161=1;
            }
            else if ( (LA161_0==LBRACKET) ) {
                alt161=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 161, 0, input);

                throw nvae;
            }
            switch (alt161) {
                case 1 :
                    // XQueryParser.g:1041:49: p_NCName
                    {
                    pushFollow(FOLLOW_p_NCName_in_p_CompPIConstructor8802);
                    p_NCName458=p_NCName();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, p_NCName458.getTree());

                    }
                    break;
                case 2 :
                    // XQueryParser.g:1041:60: ( LBRACKET pm_Expr RBRACKET )
                    {
                    // XQueryParser.g:1041:60: ( LBRACKET pm_Expr RBRACKET )
                    // XQueryParser.g:1041:61: LBRACKET pm_Expr RBRACKET
                    {
                    LBRACKET459=(CommonToken)match(input,LBRACKET,FOLLOW_LBRACKET_in_p_CompPIConstructor8807); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    LBRACKET459_tree = (XQDTCommonTree)adaptor.create(LBRACKET459);
                    adaptor.addChild(root_0, LBRACKET459_tree);
                    }
                    pushFollow(FOLLOW_pm_Expr_in_p_CompPIConstructor8809);
                    pm_Expr460=pm_Expr();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, pm_Expr460.getTree());
                    RBRACKET461=(CommonToken)match(input,RBRACKET,FOLLOW_RBRACKET_in_p_CompPIConstructor8811); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    RBRACKET461_tree = (XQDTCommonTree)adaptor.create(RBRACKET461);
                    adaptor.addChild(root_0, RBRACKET461_tree);
                    }

                    }


                    }
                    break;

            }

            LBRACKET462=(CommonToken)match(input,LBRACKET,FOLLOW_LBRACKET_in_p_CompPIConstructor8815); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            LBRACKET462_tree = (XQDTCommonTree)adaptor.create(LBRACKET462);
            adaptor.addChild(root_0, LBRACKET462_tree);
            }
            // XQueryParser.g:1041:98: ( pm_Expr )?
            int alt162=2;
            int LA162_0 = input.LA(1);

            if ( ((LA162_0>=ANCESTOR && LA162_0<=DECIMAL_SEPARATOR)||(LA162_0>=DIGIT && LA162_0<=NEXT)||(LA162_0>=ONLY && LA162_0<=EXIT)||(LA162_0>=SEQUENTIAL && LA162_0<=MAINTAINED)||(LA162_0>=MUTABLE && LA162_0<=LPAREN)||LA162_0==DOLLAR||(LA162_0>=STAR && LA162_0<=SMALLER)||(LA162_0>=SLASH && LA162_0<=DOT_DOT)||LA162_0==ATTR_SIGN||(LA162_0>=APOS && LA162_0<=QUOT)||LA162_0==L_NCName||(LA162_0>=L_Pragma && LA162_0<=L_DoubleLiteral)||LA162_0==EXPLICITLY) ) {
                alt162=1;
            }
            switch (alt162) {
                case 1 :
                    // XQueryParser.g:1041:98: pm_Expr
                    {
                    pushFollow(FOLLOW_pm_Expr_in_p_CompPIConstructor8817);
                    pm_Expr463=pm_Expr();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, pm_Expr463.getTree());

                    }
                    break;

            }

            RBRACKET464=(CommonToken)match(input,RBRACKET,FOLLOW_RBRACKET_in_p_CompPIConstructor8820); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            RBRACKET464_tree = (XQDTCommonTree)adaptor.create(RBRACKET464);
            adaptor.addChild(root_0, RBRACKET464_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (XQDTCommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (XQDTCommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "p_CompPIConstructor"

    public static class p_SingleType_return extends ParserRuleReturnScope {
        XQDTCommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "p_SingleType"
    // XQueryParser.g:1045:1: p_SingleType : p_AtomicType ( QUESTION )? ;
    public final XQueryParser.p_SingleType_return p_SingleType() throws RecognitionException {
        XQueryParser.p_SingleType_return retval = new XQueryParser.p_SingleType_return();
        retval.start = input.LT(1);

        XQDTCommonTree root_0 = null;

        CommonToken QUESTION466=null;
        XQueryParser.p_AtomicType_return p_AtomicType465 = null;


        XQDTCommonTree QUESTION466_tree=null;

        try {
            // XQueryParser.g:1046:9: ( p_AtomicType ( QUESTION )? )
            // XQueryParser.g:1046:13: p_AtomicType ( QUESTION )?
            {
            root_0 = (XQDTCommonTree)adaptor.nil();

            pushFollow(FOLLOW_p_AtomicType_in_p_SingleType8848);
            p_AtomicType465=p_AtomicType();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, p_AtomicType465.getTree());
            // XQueryParser.g:1046:26: ( QUESTION )?
            int alt163=2;
            int LA163_0 = input.LA(1);

            if ( (LA163_0==QUESTION) ) {
                alt163=1;
            }
            switch (alt163) {
                case 1 :
                    // XQueryParser.g:1046:26: QUESTION
                    {
                    QUESTION466=(CommonToken)match(input,QUESTION,FOLLOW_QUESTION_in_p_SingleType8850); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    QUESTION466_tree = (XQDTCommonTree)adaptor.create(QUESTION466);
                    adaptor.addChild(root_0, QUESTION466_tree);
                    }

                    }
                    break;

            }


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (XQDTCommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (XQDTCommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "p_SingleType"

    public static class p_TypeDeclaration_return extends ParserRuleReturnScope {
        XQDTCommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "p_TypeDeclaration"
    // XQueryParser.g:1050:1: p_TypeDeclaration : k= AS st= p_SequenceType -> ^( TypeDeclaration $st) ;
    public final XQueryParser.p_TypeDeclaration_return p_TypeDeclaration() throws RecognitionException {
        XQueryParser.p_TypeDeclaration_return retval = new XQueryParser.p_TypeDeclaration_return();
        retval.start = input.LT(1);

        XQDTCommonTree root_0 = null;

        CommonToken k=null;
        XQueryParser.p_SequenceType_return st = null;


        XQDTCommonTree k_tree=null;
        RewriteRuleTokenStream stream_AS=new RewriteRuleTokenStream(adaptor,"token AS");
        RewriteRuleSubtreeStream stream_p_SequenceType=new RewriteRuleSubtreeStream(adaptor,"rule p_SequenceType");
        try {
            // XQueryParser.g:1051:9: (k= AS st= p_SequenceType -> ^( TypeDeclaration $st) )
            // XQueryParser.g:1051:13: k= AS st= p_SequenceType
            {
            k=(CommonToken)match(input,AS,FOLLOW_AS_in_p_TypeDeclaration8881); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_AS.add(k);

            if ( state.backtracking==0 ) {
              ak(k);
            }
            pushFollow(FOLLOW_p_SequenceType_in_p_TypeDeclaration8887);
            st=p_SequenceType();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_p_SequenceType.add(st.getTree());


            // AST REWRITE
            // elements: st
            // token labels: 
            // rule labels: retval, st
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
            RewriteRuleSubtreeStream stream_st=new RewriteRuleSubtreeStream(adaptor,"rule st",st!=null?st.tree:null);

            root_0 = (XQDTCommonTree)adaptor.nil();
            // 1052:17: -> ^( TypeDeclaration $st)
            {
                // XQueryParser.g:1052:20: ^( TypeDeclaration $st)
                {
                XQDTCommonTree root_1 = (XQDTCommonTree)adaptor.nil();
                root_1 = (XQDTCommonTree)adaptor.becomeRoot((XQDTCommonTree)adaptor.create(TypeDeclaration, "TypeDeclaration"), root_1);

                adaptor.addChild(root_1, stream_st.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (XQDTCommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (XQDTCommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "p_TypeDeclaration"

    public static class p_SequenceType_return extends ParserRuleReturnScope {
        XQDTCommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "p_SequenceType"
    // XQueryParser.g:1056:1: p_SequenceType : (k= EMPTY_SEQUENCE l= LPAREN r= RPAREN -> ^( SequenceType ^( EmptySequenceTest $k $l $r) ) | it= p_ItemType ( ( p_OccurrenceIndicator )=>oi= p_OccurrenceIndicator )? -> ^( SequenceType $it ( $oi)? ) );
    public final XQueryParser.p_SequenceType_return p_SequenceType() throws RecognitionException {
        XQueryParser.p_SequenceType_return retval = new XQueryParser.p_SequenceType_return();
        retval.start = input.LT(1);

        XQDTCommonTree root_0 = null;

        CommonToken k=null;
        CommonToken l=null;
        CommonToken r=null;
        XQueryParser.p_ItemType_return it = null;

        XQueryParser.p_OccurrenceIndicator_return oi = null;


        XQDTCommonTree k_tree=null;
        XQDTCommonTree l_tree=null;
        XQDTCommonTree r_tree=null;
        RewriteRuleTokenStream stream_RPAREN=new RewriteRuleTokenStream(adaptor,"token RPAREN");
        RewriteRuleTokenStream stream_LPAREN=new RewriteRuleTokenStream(adaptor,"token LPAREN");
        RewriteRuleTokenStream stream_EMPTY_SEQUENCE=new RewriteRuleTokenStream(adaptor,"token EMPTY_SEQUENCE");
        RewriteRuleSubtreeStream stream_p_OccurrenceIndicator=new RewriteRuleSubtreeStream(adaptor,"rule p_OccurrenceIndicator");
        RewriteRuleSubtreeStream stream_p_ItemType=new RewriteRuleSubtreeStream(adaptor,"rule p_ItemType");
        try {
            // XQueryParser.g:1057:9: (k= EMPTY_SEQUENCE l= LPAREN r= RPAREN -> ^( SequenceType ^( EmptySequenceTest $k $l $r) ) | it= p_ItemType ( ( p_OccurrenceIndicator )=>oi= p_OccurrenceIndicator )? -> ^( SequenceType $it ( $oi)? ) )
            int alt165=2;
            int LA165_0 = input.LA(1);

            if ( (LA165_0==EMPTY_SEQUENCE) ) {
                int LA165_1 = input.LA(2);

                if ( (LA165_1==LPAREN) ) {
                    alt165=1;
                }
                else if ( (LA165_1==EOF||(LA165_1>=AND && LA165_1<=AT)||LA165_1==CASE||LA165_1==COLLATION||LA165_1==DEFAULT||(LA165_1>=DESCENDING && LA165_1<=DIV)||(LA165_1>=ELSE && LA165_1<=EMPTY)||LA165_1==EQ||(LA165_1>=EXCEPT && LA165_1<=EXTERNAL)||LA165_1==FOR||LA165_1==GE||(LA165_1>=GT && LA165_1<=IDIV)||LA165_1==IN||(LA165_1>=INSTANCE && LA165_1<=IS)||LA165_1==LE||(LA165_1>=LET && LA165_1<=MOD)||LA165_1==NE||(LA165_1>=OR && LA165_1<=ORDER)||(LA165_1>=RETURN && LA165_1<=SATISFIES)||LA165_1==STABLE||LA165_1==TO||LA165_1==UNION||LA165_1==WHERE||LA165_1==COUNT||(LA165_1>=END && LA165_1<=GROUP)||LA165_1==ONLY||LA165_1==START||(LA165_1>=AFTER && LA165_1<=BEFORE)||LA165_1==INTO||LA165_1==MODIFY||LA165_1==WITH||LA165_1==CONTAINS||LA165_1==PARAGRAPHS||LA165_1==SCORE||LA165_1==SENTENCES||LA165_1==TIMES||LA165_1==WORDS||LA165_1==RPAREN||(LA165_1>=LBRACKET && LA165_1<=RBRACKET)||(LA165_1>=RSQUARE && LA165_1<=NOTEQUAL)||(LA165_1>=COMMA && LA165_1<=GREATER_GREATER)||LA165_1==COLON||(LA165_1>=SEMICOLON && LA165_1<=VBAR)) ) {
                    alt165=2;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 165, 1, input);

                    throw nvae;
                }
            }
            else if ( ((LA165_0>=ANCESTOR && LA165_0<=EMPTY)||(LA165_0>=ENCODING && LA165_0<=DECIMAL_SEPARATOR)||(LA165_0>=DIGIT && LA165_0<=NEXT)||(LA165_0>=ONLY && LA165_0<=EXIT)||(LA165_0>=SEQUENTIAL && LA165_0<=MAINTAINED)||(LA165_0>=MUTABLE && LA165_0<=QUOT_ER)||LA165_0==L_NCName||LA165_0==EXPLICITLY) ) {
                alt165=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 165, 0, input);

                throw nvae;
            }
            switch (alt165) {
                case 1 :
                    // XQueryParser.g:1057:13: k= EMPTY_SEQUENCE l= LPAREN r= RPAREN
                    {
                    k=(CommonToken)match(input,EMPTY_SEQUENCE,FOLLOW_EMPTY_SEQUENCE_in_p_SequenceType8942); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_EMPTY_SEQUENCE.add(k);

                    if ( state.backtracking==0 ) {
                      ak(k);
                    }
                    l=(CommonToken)match(input,LPAREN,FOLLOW_LPAREN_in_p_SequenceType8948); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_LPAREN.add(l);

                    r=(CommonToken)match(input,RPAREN,FOLLOW_RPAREN_in_p_SequenceType8952); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_RPAREN.add(r);



                    // AST REWRITE
                    // elements: l, k, r
                    // token labels: k, r, l
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleTokenStream stream_k=new RewriteRuleTokenStream(adaptor,"token k",k);
                    RewriteRuleTokenStream stream_r=new RewriteRuleTokenStream(adaptor,"token r",r);
                    RewriteRuleTokenStream stream_l=new RewriteRuleTokenStream(adaptor,"token l",l);
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (XQDTCommonTree)adaptor.nil();
                    // 1058:17: -> ^( SequenceType ^( EmptySequenceTest $k $l $r) )
                    {
                        // XQueryParser.g:1058:20: ^( SequenceType ^( EmptySequenceTest $k $l $r) )
                        {
                        XQDTCommonTree root_1 = (XQDTCommonTree)adaptor.nil();
                        root_1 = (XQDTCommonTree)adaptor.becomeRoot((XQDTCommonTree)adaptor.create(SequenceType, "SequenceType"), root_1);

                        // XQueryParser.g:1058:35: ^( EmptySequenceTest $k $l $r)
                        {
                        XQDTCommonTree root_2 = (XQDTCommonTree)adaptor.nil();
                        root_2 = (XQDTCommonTree)adaptor.becomeRoot((XQDTCommonTree)adaptor.create(EmptySequenceTest, "EmptySequenceTest"), root_2);

                        adaptor.addChild(root_2, stream_k.nextNode());
                        adaptor.addChild(root_2, stream_l.nextNode());
                        adaptor.addChild(root_2, stream_r.nextNode());

                        adaptor.addChild(root_1, root_2);
                        }

                        adaptor.addChild(root_0, root_1);
                        }

                    }

                    retval.tree = root_0;}
                    }
                    break;
                case 2 :
                    // XQueryParser.g:1059:11: it= p_ItemType ( ( p_OccurrenceIndicator )=>oi= p_OccurrenceIndicator )?
                    {
                    pushFollow(FOLLOW_p_ItemType_in_p_SequenceType9001);
                    it=p_ItemType();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_p_ItemType.add(it.getTree());
                    // XQueryParser.g:1059:25: ( ( p_OccurrenceIndicator )=>oi= p_OccurrenceIndicator )?
                    int alt164=2;
                    alt164 = dfa164.predict(input);
                    switch (alt164) {
                        case 1 :
                            // XQueryParser.g:1059:26: ( p_OccurrenceIndicator )=>oi= p_OccurrenceIndicator
                            {
                            pushFollow(FOLLOW_p_OccurrenceIndicator_in_p_SequenceType9012);
                            oi=p_OccurrenceIndicator();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_p_OccurrenceIndicator.add(oi.getTree());

                            }
                            break;

                    }



                    // AST REWRITE
                    // elements: it, oi
                    // token labels: 
                    // rule labels: oi, it, retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_oi=new RewriteRuleSubtreeStream(adaptor,"rule oi",oi!=null?oi.tree:null);
                    RewriteRuleSubtreeStream stream_it=new RewriteRuleSubtreeStream(adaptor,"rule it",it!=null?it.tree:null);
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (XQDTCommonTree)adaptor.nil();
                    // 1060:17: -> ^( SequenceType $it ( $oi)? )
                    {
                        // XQueryParser.g:1060:20: ^( SequenceType $it ( $oi)? )
                        {
                        XQDTCommonTree root_1 = (XQDTCommonTree)adaptor.nil();
                        root_1 = (XQDTCommonTree)adaptor.becomeRoot((XQDTCommonTree)adaptor.create(SequenceType, "SequenceType"), root_1);

                        adaptor.addChild(root_1, stream_it.nextTree());
                        // XQueryParser.g:1060:39: ( $oi)?
                        if ( stream_oi.hasNext() ) {
                            adaptor.addChild(root_1, stream_oi.nextTree());

                        }
                        stream_oi.reset();

                        adaptor.addChild(root_0, root_1);
                        }

                    }

                    retval.tree = root_0;}
                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (XQDTCommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (XQDTCommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "p_SequenceType"

    public static class p_OccurrenceIndicator_return extends ParserRuleReturnScope {
        XQDTCommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "p_OccurrenceIndicator"
    // XQueryParser.g:1064:1: p_OccurrenceIndicator : ( QUESTION | STAR | PLUS );
    public final XQueryParser.p_OccurrenceIndicator_return p_OccurrenceIndicator() throws RecognitionException {
        XQueryParser.p_OccurrenceIndicator_return retval = new XQueryParser.p_OccurrenceIndicator_return();
        retval.start = input.LT(1);

        XQDTCommonTree root_0 = null;

        CommonToken set467=null;

        XQDTCommonTree set467_tree=null;

        try {
            // XQueryParser.g:1065:9: ( QUESTION | STAR | PLUS )
            // XQueryParser.g:
            {
            root_0 = (XQDTCommonTree)adaptor.nil();

            set467=(CommonToken)input.LT(1);
            if ( (input.LA(1)>=QUESTION && input.LA(1)<=PLUS) ) {
                input.consume();
                if ( state.backtracking==0 ) adaptor.addChild(root_0, (XQDTCommonTree)adaptor.create(set467));
                state.errorRecovery=false;state.failed=false;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                MismatchedSetException mse = new MismatchedSetException(null,input);
                throw mse;
            }


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (XQDTCommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (XQDTCommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "p_OccurrenceIndicator"

    public static class p_ItemType_return extends ParserRuleReturnScope {
        XQDTCommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "p_ItemType"
    // XQueryParser.g:1069:1: p_ItemType : ( p_KindTest -> ^( KindTest p_KindTest ) | {...}? => ( BINARY LPAREN RPAREN ) -> ^( BinaryTest BINARY LPAREN RPAREN ) | ( ITEM LPAREN RPAREN ) -> ^( ItemTest ITEM LPAREN RPAREN ) | p_AtomicType );
    public final XQueryParser.p_ItemType_return p_ItemType() throws RecognitionException {
        XQueryParser.p_ItemType_return retval = new XQueryParser.p_ItemType_return();
        retval.start = input.LT(1);

        XQDTCommonTree root_0 = null;

        CommonToken BINARY469=null;
        CommonToken LPAREN470=null;
        CommonToken RPAREN471=null;
        CommonToken ITEM472=null;
        CommonToken LPAREN473=null;
        CommonToken RPAREN474=null;
        XQueryParser.p_KindTest_return p_KindTest468 = null;

        XQueryParser.p_AtomicType_return p_AtomicType475 = null;


        XQDTCommonTree BINARY469_tree=null;
        XQDTCommonTree LPAREN470_tree=null;
        XQDTCommonTree RPAREN471_tree=null;
        XQDTCommonTree ITEM472_tree=null;
        XQDTCommonTree LPAREN473_tree=null;
        XQDTCommonTree RPAREN474_tree=null;
        RewriteRuleTokenStream stream_RPAREN=new RewriteRuleTokenStream(adaptor,"token RPAREN");
        RewriteRuleTokenStream stream_LPAREN=new RewriteRuleTokenStream(adaptor,"token LPAREN");
        RewriteRuleTokenStream stream_ITEM=new RewriteRuleTokenStream(adaptor,"token ITEM");
        RewriteRuleTokenStream stream_BINARY=new RewriteRuleTokenStream(adaptor,"token BINARY");
        RewriteRuleSubtreeStream stream_p_KindTest=new RewriteRuleSubtreeStream(adaptor,"rule p_KindTest");
        try {
            // XQueryParser.g:1070:9: ( p_KindTest -> ^( KindTest p_KindTest ) | {...}? => ( BINARY LPAREN RPAREN ) -> ^( BinaryTest BINARY LPAREN RPAREN ) | ( ITEM LPAREN RPAREN ) -> ^( ItemTest ITEM LPAREN RPAREN ) | p_AtomicType )
            int alt166=4;
            alt166 = dfa166.predict(input);
            switch (alt166) {
                case 1 :
                    // XQueryParser.g:1070:11: p_KindTest
                    {
                    pushFollow(FOLLOW_p_KindTest_in_p_ItemType9114);
                    p_KindTest468=p_KindTest();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_p_KindTest.add(p_KindTest468.getTree());


                    // AST REWRITE
                    // elements: p_KindTest
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (XQDTCommonTree)adaptor.nil();
                    // 1071:17: -> ^( KindTest p_KindTest )
                    {
                        // XQueryParser.g:1071:20: ^( KindTest p_KindTest )
                        {
                        XQDTCommonTree root_1 = (XQDTCommonTree)adaptor.nil();
                        root_1 = (XQDTCommonTree)adaptor.becomeRoot((XQDTCommonTree)adaptor.create(KindTest, "KindTest"), root_1);

                        adaptor.addChild(root_1, stream_p_KindTest.nextTree());

                        adaptor.addChild(root_0, root_1);
                        }

                    }

                    retval.tree = root_0;}
                    }
                    break;
                case 2 :
                    // XQueryParser.g:1072:11: {...}? => ( BINARY LPAREN RPAREN )
                    {
                    if ( !((lc(MLS))) ) {
                        if (state.backtracking>0) {state.failed=true; return retval;}
                        throw new FailedPredicateException(input, "p_ItemType", "lc(MLS)");
                    }
                    // XQueryParser.g:1072:24: ( BINARY LPAREN RPAREN )
                    // XQueryParser.g:1072:25: BINARY LPAREN RPAREN
                    {
                    BINARY469=(CommonToken)match(input,BINARY,FOLLOW_BINARY_in_p_ItemType9154); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_BINARY.add(BINARY469);

                    LPAREN470=(CommonToken)match(input,LPAREN,FOLLOW_LPAREN_in_p_ItemType9156); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_LPAREN.add(LPAREN470);

                    RPAREN471=(CommonToken)match(input,RPAREN,FOLLOW_RPAREN_in_p_ItemType9158); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_RPAREN.add(RPAREN471);


                    }



                    // AST REWRITE
                    // elements: LPAREN, BINARY, RPAREN
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (XQDTCommonTree)adaptor.nil();
                    // 1073:17: -> ^( BinaryTest BINARY LPAREN RPAREN )
                    {
                        // XQueryParser.g:1073:20: ^( BinaryTest BINARY LPAREN RPAREN )
                        {
                        XQDTCommonTree root_1 = (XQDTCommonTree)adaptor.nil();
                        root_1 = (XQDTCommonTree)adaptor.becomeRoot((XQDTCommonTree)adaptor.create(BinaryTest, "BinaryTest"), root_1);

                        adaptor.addChild(root_1, stream_BINARY.nextNode());
                        adaptor.addChild(root_1, stream_LPAREN.nextNode());
                        adaptor.addChild(root_1, stream_RPAREN.nextNode());

                        adaptor.addChild(root_0, root_1);
                        }

                    }

                    retval.tree = root_0;}
                    }
                    break;
                case 3 :
                    // XQueryParser.g:1074:11: ( ITEM LPAREN RPAREN )
                    {
                    // XQueryParser.g:1074:11: ( ITEM LPAREN RPAREN )
                    // XQueryParser.g:1074:12: ITEM LPAREN RPAREN
                    {
                    ITEM472=(CommonToken)match(input,ITEM,FOLLOW_ITEM_in_p_ItemType9200); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_ITEM.add(ITEM472);

                    LPAREN473=(CommonToken)match(input,LPAREN,FOLLOW_LPAREN_in_p_ItemType9202); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_LPAREN.add(LPAREN473);

                    RPAREN474=(CommonToken)match(input,RPAREN,FOLLOW_RPAREN_in_p_ItemType9204); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_RPAREN.add(RPAREN474);


                    }



                    // AST REWRITE
                    // elements: ITEM, RPAREN, LPAREN
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (XQDTCommonTree)adaptor.nil();
                    // 1075:17: -> ^( ItemTest ITEM LPAREN RPAREN )
                    {
                        // XQueryParser.g:1075:20: ^( ItemTest ITEM LPAREN RPAREN )
                        {
                        XQDTCommonTree root_1 = (XQDTCommonTree)adaptor.nil();
                        root_1 = (XQDTCommonTree)adaptor.becomeRoot((XQDTCommonTree)adaptor.create(ItemTest, "ItemTest"), root_1);

                        adaptor.addChild(root_1, stream_ITEM.nextNode());
                        adaptor.addChild(root_1, stream_LPAREN.nextNode());
                        adaptor.addChild(root_1, stream_RPAREN.nextNode());

                        adaptor.addChild(root_0, root_1);
                        }

                    }

                    retval.tree = root_0;}
                    }
                    break;
                case 4 :
                    // XQueryParser.g:1076:11: p_AtomicType
                    {
                    root_0 = (XQDTCommonTree)adaptor.nil();

                    pushFollow(FOLLOW_p_AtomicType_in_p_ItemType9245);
                    p_AtomicType475=p_AtomicType();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, p_AtomicType475.getTree());

                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (XQDTCommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (XQDTCommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "p_ItemType"

    public static class p_AtomicType_return extends ParserRuleReturnScope {
        XQDTCommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "p_AtomicType"
    // XQueryParser.g:1080:1: p_AtomicType : p_QName -> ^( AtomicType p_QName ) ;
    public final XQueryParser.p_AtomicType_return p_AtomicType() throws RecognitionException {
        XQueryParser.p_AtomicType_return retval = new XQueryParser.p_AtomicType_return();
        retval.start = input.LT(1);

        XQDTCommonTree root_0 = null;

        XQueryParser.p_QName_return p_QName476 = null;


        RewriteRuleSubtreeStream stream_p_QName=new RewriteRuleSubtreeStream(adaptor,"rule p_QName");
        try {
            // XQueryParser.g:1081:9: ( p_QName -> ^( AtomicType p_QName ) )
            // XQueryParser.g:1081:11: p_QName
            {
            pushFollow(FOLLOW_p_QName_in_p_AtomicType9271);
            p_QName476=p_QName();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_p_QName.add(p_QName476.getTree());


            // AST REWRITE
            // elements: p_QName
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (XQDTCommonTree)adaptor.nil();
            // 1082:17: -> ^( AtomicType p_QName )
            {
                // XQueryParser.g:1082:20: ^( AtomicType p_QName )
                {
                XQDTCommonTree root_1 = (XQDTCommonTree)adaptor.nil();
                root_1 = (XQDTCommonTree)adaptor.becomeRoot((XQDTCommonTree)adaptor.create(AtomicType, "AtomicType"), root_1);

                adaptor.addChild(root_1, stream_p_QName.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (XQDTCommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (XQDTCommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "p_AtomicType"

    public static class p_KindTest_return extends ParserRuleReturnScope {
        XQDTCommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "p_KindTest"
    // XQueryParser.g:1086:1: p_KindTest : ( p_DocumentTest | p_ElementTest | p_AttributeTest | p_SchemaElementTest | p_SchemaAttributeTest | p_NamespaceNodeTest | p_PITest | p_CommentTest | p_TextTest | p_AnyKindTest );
    public final XQueryParser.p_KindTest_return p_KindTest() throws RecognitionException {
        XQueryParser.p_KindTest_return retval = new XQueryParser.p_KindTest_return();
        retval.start = input.LT(1);

        XQDTCommonTree root_0 = null;

        XQueryParser.p_DocumentTest_return p_DocumentTest477 = null;

        XQueryParser.p_ElementTest_return p_ElementTest478 = null;

        XQueryParser.p_AttributeTest_return p_AttributeTest479 = null;

        XQueryParser.p_SchemaElementTest_return p_SchemaElementTest480 = null;

        XQueryParser.p_SchemaAttributeTest_return p_SchemaAttributeTest481 = null;

        XQueryParser.p_NamespaceNodeTest_return p_NamespaceNodeTest482 = null;

        XQueryParser.p_PITest_return p_PITest483 = null;

        XQueryParser.p_CommentTest_return p_CommentTest484 = null;

        XQueryParser.p_TextTest_return p_TextTest485 = null;

        XQueryParser.p_AnyKindTest_return p_AnyKindTest486 = null;



        try {
            // XQueryParser.g:1087:9: ( p_DocumentTest | p_ElementTest | p_AttributeTest | p_SchemaElementTest | p_SchemaAttributeTest | p_NamespaceNodeTest | p_PITest | p_CommentTest | p_TextTest | p_AnyKindTest )
            int alt167=10;
            switch ( input.LA(1) ) {
            case DOCUMENT_NODE:
                {
                alt167=1;
                }
                break;
            case ELEMENT:
                {
                alt167=2;
                }
                break;
            case ATTRIBUTE:
                {
                alt167=3;
                }
                break;
            case SCHEMA_ELEMENT:
                {
                alt167=4;
                }
                break;
            case SCHEMA_ATTRIBUTE:
                {
                alt167=5;
                }
                break;
            case NAMESPACE_NODE:
                {
                alt167=6;
                }
                break;
            case PROCESSING_INSTRUCTION:
                {
                alt167=7;
                }
                break;
            case COMMENT:
                {
                alt167=8;
                }
                break;
            case TEXT:
                {
                alt167=9;
                }
                break;
            case NODE:
                {
                alt167=10;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 167, 0, input);

                throw nvae;
            }

            switch (alt167) {
                case 1 :
                    // XQueryParser.g:1087:11: p_DocumentTest
                    {
                    root_0 = (XQDTCommonTree)adaptor.nil();

                    pushFollow(FOLLOW_p_DocumentTest_in_p_KindTest9321);
                    p_DocumentTest477=p_DocumentTest();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, p_DocumentTest477.getTree());

                    }
                    break;
                case 2 :
                    // XQueryParser.g:1088:11: p_ElementTest
                    {
                    root_0 = (XQDTCommonTree)adaptor.nil();

                    pushFollow(FOLLOW_p_ElementTest_in_p_KindTest9333);
                    p_ElementTest478=p_ElementTest();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, p_ElementTest478.getTree());

                    }
                    break;
                case 3 :
                    // XQueryParser.g:1089:11: p_AttributeTest
                    {
                    root_0 = (XQDTCommonTree)adaptor.nil();

                    pushFollow(FOLLOW_p_AttributeTest_in_p_KindTest9345);
                    p_AttributeTest479=p_AttributeTest();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, p_AttributeTest479.getTree());

                    }
                    break;
                case 4 :
                    // XQueryParser.g:1090:11: p_SchemaElementTest
                    {
                    root_0 = (XQDTCommonTree)adaptor.nil();

                    pushFollow(FOLLOW_p_SchemaElementTest_in_p_KindTest9357);
                    p_SchemaElementTest480=p_SchemaElementTest();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, p_SchemaElementTest480.getTree());

                    }
                    break;
                case 5 :
                    // XQueryParser.g:1091:11: p_SchemaAttributeTest
                    {
                    root_0 = (XQDTCommonTree)adaptor.nil();

                    pushFollow(FOLLOW_p_SchemaAttributeTest_in_p_KindTest9369);
                    p_SchemaAttributeTest481=p_SchemaAttributeTest();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, p_SchemaAttributeTest481.getTree());

                    }
                    break;
                case 6 :
                    // XQueryParser.g:1092:11: p_NamespaceNodeTest
                    {
                    root_0 = (XQDTCommonTree)adaptor.nil();

                    pushFollow(FOLLOW_p_NamespaceNodeTest_in_p_KindTest9381);
                    p_NamespaceNodeTest482=p_NamespaceNodeTest();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, p_NamespaceNodeTest482.getTree());

                    }
                    break;
                case 7 :
                    // XQueryParser.g:1093:11: p_PITest
                    {
                    root_0 = (XQDTCommonTree)adaptor.nil();

                    pushFollow(FOLLOW_p_PITest_in_p_KindTest9393);
                    p_PITest483=p_PITest();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, p_PITest483.getTree());

                    }
                    break;
                case 8 :
                    // XQueryParser.g:1094:11: p_CommentTest
                    {
                    root_0 = (XQDTCommonTree)adaptor.nil();

                    pushFollow(FOLLOW_p_CommentTest_in_p_KindTest9405);
                    p_CommentTest484=p_CommentTest();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, p_CommentTest484.getTree());

                    }
                    break;
                case 9 :
                    // XQueryParser.g:1095:11: p_TextTest
                    {
                    root_0 = (XQDTCommonTree)adaptor.nil();

                    pushFollow(FOLLOW_p_TextTest_in_p_KindTest9417);
                    p_TextTest485=p_TextTest();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, p_TextTest485.getTree());

                    }
                    break;
                case 10 :
                    // XQueryParser.g:1096:11: p_AnyKindTest
                    {
                    root_0 = (XQDTCommonTree)adaptor.nil();

                    pushFollow(FOLLOW_p_AnyKindTest_in_p_KindTest9429);
                    p_AnyKindTest486=p_AnyKindTest();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, p_AnyKindTest486.getTree());

                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (XQDTCommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (XQDTCommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "p_KindTest"

    public static class p_AnyKindTest_return extends ParserRuleReturnScope {
        XQDTCommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "p_AnyKindTest"
    // XQueryParser.g:1100:1: p_AnyKindTest : NODE LPAREN RPAREN ;
    public final XQueryParser.p_AnyKindTest_return p_AnyKindTest() throws RecognitionException {
        XQueryParser.p_AnyKindTest_return retval = new XQueryParser.p_AnyKindTest_return();
        retval.start = input.LT(1);

        XQDTCommonTree root_0 = null;

        CommonToken NODE487=null;
        CommonToken LPAREN488=null;
        CommonToken RPAREN489=null;

        XQDTCommonTree NODE487_tree=null;
        XQDTCommonTree LPAREN488_tree=null;
        XQDTCommonTree RPAREN489_tree=null;

        try {
            // XQueryParser.g:1101:9: ( NODE LPAREN RPAREN )
            // XQueryParser.g:1101:13: NODE LPAREN RPAREN
            {
            root_0 = (XQDTCommonTree)adaptor.nil();

            NODE487=(CommonToken)match(input,NODE,FOLLOW_NODE_in_p_AnyKindTest9457); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            NODE487_tree = (XQDTCommonTree)adaptor.create(NODE487);
            adaptor.addChild(root_0, NODE487_tree);
            }
            LPAREN488=(CommonToken)match(input,LPAREN,FOLLOW_LPAREN_in_p_AnyKindTest9459); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            LPAREN488_tree = (XQDTCommonTree)adaptor.create(LPAREN488);
            adaptor.addChild(root_0, LPAREN488_tree);
            }
            RPAREN489=(CommonToken)match(input,RPAREN,FOLLOW_RPAREN_in_p_AnyKindTest9461); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            RPAREN489_tree = (XQDTCommonTree)adaptor.create(RPAREN489);
            adaptor.addChild(root_0, RPAREN489_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (XQDTCommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (XQDTCommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "p_AnyKindTest"

    public static class p_DocumentTest_return extends ParserRuleReturnScope {
        XQDTCommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "p_DocumentTest"
    // XQueryParser.g:1105:1: p_DocumentTest : DOCUMENT_NODE LPAREN ( p_ElementTest | p_SchemaElementTest )? RPAREN ;
    public final XQueryParser.p_DocumentTest_return p_DocumentTest() throws RecognitionException {
        XQueryParser.p_DocumentTest_return retval = new XQueryParser.p_DocumentTest_return();
        retval.start = input.LT(1);

        XQDTCommonTree root_0 = null;

        CommonToken DOCUMENT_NODE490=null;
        CommonToken LPAREN491=null;
        CommonToken RPAREN494=null;
        XQueryParser.p_ElementTest_return p_ElementTest492 = null;

        XQueryParser.p_SchemaElementTest_return p_SchemaElementTest493 = null;


        XQDTCommonTree DOCUMENT_NODE490_tree=null;
        XQDTCommonTree LPAREN491_tree=null;
        XQDTCommonTree RPAREN494_tree=null;

        try {
            // XQueryParser.g:1106:9: ( DOCUMENT_NODE LPAREN ( p_ElementTest | p_SchemaElementTest )? RPAREN )
            // XQueryParser.g:1106:13: DOCUMENT_NODE LPAREN ( p_ElementTest | p_SchemaElementTest )? RPAREN
            {
            root_0 = (XQDTCommonTree)adaptor.nil();

            DOCUMENT_NODE490=(CommonToken)match(input,DOCUMENT_NODE,FOLLOW_DOCUMENT_NODE_in_p_DocumentTest9489); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            DOCUMENT_NODE490_tree = (XQDTCommonTree)adaptor.create(DOCUMENT_NODE490);
            adaptor.addChild(root_0, DOCUMENT_NODE490_tree);
            }
            LPAREN491=(CommonToken)match(input,LPAREN,FOLLOW_LPAREN_in_p_DocumentTest9491); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            LPAREN491_tree = (XQDTCommonTree)adaptor.create(LPAREN491);
            adaptor.addChild(root_0, LPAREN491_tree);
            }
            // XQueryParser.g:1106:34: ( p_ElementTest | p_SchemaElementTest )?
            int alt168=3;
            int LA168_0 = input.LA(1);

            if ( (LA168_0==ELEMENT) ) {
                alt168=1;
            }
            else if ( (LA168_0==SCHEMA_ELEMENT) ) {
                alt168=2;
            }
            switch (alt168) {
                case 1 :
                    // XQueryParser.g:1106:35: p_ElementTest
                    {
                    pushFollow(FOLLOW_p_ElementTest_in_p_DocumentTest9494);
                    p_ElementTest492=p_ElementTest();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, p_ElementTest492.getTree());

                    }
                    break;
                case 2 :
                    // XQueryParser.g:1106:51: p_SchemaElementTest
                    {
                    pushFollow(FOLLOW_p_SchemaElementTest_in_p_DocumentTest9498);
                    p_SchemaElementTest493=p_SchemaElementTest();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, p_SchemaElementTest493.getTree());

                    }
                    break;

            }

            RPAREN494=(CommonToken)match(input,RPAREN,FOLLOW_RPAREN_in_p_DocumentTest9502); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            RPAREN494_tree = (XQDTCommonTree)adaptor.create(RPAREN494);
            adaptor.addChild(root_0, RPAREN494_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (XQDTCommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (XQDTCommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "p_DocumentTest"

    public static class p_TextTest_return extends ParserRuleReturnScope {
        XQDTCommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "p_TextTest"
    // XQueryParser.g:1109:1: p_TextTest : TEXT LPAREN RPAREN ;
    public final XQueryParser.p_TextTest_return p_TextTest() throws RecognitionException {
        XQueryParser.p_TextTest_return retval = new XQueryParser.p_TextTest_return();
        retval.start = input.LT(1);

        XQDTCommonTree root_0 = null;

        CommonToken TEXT495=null;
        CommonToken LPAREN496=null;
        CommonToken RPAREN497=null;

        XQDTCommonTree TEXT495_tree=null;
        XQDTCommonTree LPAREN496_tree=null;
        XQDTCommonTree RPAREN497_tree=null;

        try {
            // XQueryParser.g:1110:9: ( TEXT LPAREN RPAREN )
            // XQueryParser.g:1110:13: TEXT LPAREN RPAREN
            {
            root_0 = (XQDTCommonTree)adaptor.nil();

            TEXT495=(CommonToken)match(input,TEXT,FOLLOW_TEXT_in_p_TextTest9522); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            TEXT495_tree = (XQDTCommonTree)adaptor.create(TEXT495);
            adaptor.addChild(root_0, TEXT495_tree);
            }
            LPAREN496=(CommonToken)match(input,LPAREN,FOLLOW_LPAREN_in_p_TextTest9524); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            LPAREN496_tree = (XQDTCommonTree)adaptor.create(LPAREN496);
            adaptor.addChild(root_0, LPAREN496_tree);
            }
            RPAREN497=(CommonToken)match(input,RPAREN,FOLLOW_RPAREN_in_p_TextTest9526); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            RPAREN497_tree = (XQDTCommonTree)adaptor.create(RPAREN497);
            adaptor.addChild(root_0, RPAREN497_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (XQDTCommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (XQDTCommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "p_TextTest"

    public static class p_CommentTest_return extends ParserRuleReturnScope {
        XQDTCommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "p_CommentTest"
    // XQueryParser.g:1114:1: p_CommentTest : COMMENT LPAREN RPAREN ;
    public final XQueryParser.p_CommentTest_return p_CommentTest() throws RecognitionException {
        XQueryParser.p_CommentTest_return retval = new XQueryParser.p_CommentTest_return();
        retval.start = input.LT(1);

        XQDTCommonTree root_0 = null;

        CommonToken COMMENT498=null;
        CommonToken LPAREN499=null;
        CommonToken RPAREN500=null;

        XQDTCommonTree COMMENT498_tree=null;
        XQDTCommonTree LPAREN499_tree=null;
        XQDTCommonTree RPAREN500_tree=null;

        try {
            // XQueryParser.g:1115:9: ( COMMENT LPAREN RPAREN )
            // XQueryParser.g:1115:13: COMMENT LPAREN RPAREN
            {
            root_0 = (XQDTCommonTree)adaptor.nil();

            COMMENT498=(CommonToken)match(input,COMMENT,FOLLOW_COMMENT_in_p_CommentTest9554); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            COMMENT498_tree = (XQDTCommonTree)adaptor.create(COMMENT498);
            adaptor.addChild(root_0, COMMENT498_tree);
            }
            LPAREN499=(CommonToken)match(input,LPAREN,FOLLOW_LPAREN_in_p_CommentTest9556); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            LPAREN499_tree = (XQDTCommonTree)adaptor.create(LPAREN499);
            adaptor.addChild(root_0, LPAREN499_tree);
            }
            RPAREN500=(CommonToken)match(input,RPAREN,FOLLOW_RPAREN_in_p_CommentTest9558); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            RPAREN500_tree = (XQDTCommonTree)adaptor.create(RPAREN500);
            adaptor.addChild(root_0, RPAREN500_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (XQDTCommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (XQDTCommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "p_CommentTest"

    public static class p_NamespaceNodeTest_return extends ParserRuleReturnScope {
        XQDTCommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "p_NamespaceNodeTest"
    // XQueryParser.g:1119:1: p_NamespaceNodeTest : NAMESPACE_NODE LPAREN RPAREN ;
    public final XQueryParser.p_NamespaceNodeTest_return p_NamespaceNodeTest() throws RecognitionException {
        XQueryParser.p_NamespaceNodeTest_return retval = new XQueryParser.p_NamespaceNodeTest_return();
        retval.start = input.LT(1);

        XQDTCommonTree root_0 = null;

        CommonToken NAMESPACE_NODE501=null;
        CommonToken LPAREN502=null;
        CommonToken RPAREN503=null;

        XQDTCommonTree NAMESPACE_NODE501_tree=null;
        XQDTCommonTree LPAREN502_tree=null;
        XQDTCommonTree RPAREN503_tree=null;

        try {
            // XQueryParser.g:1120:9: ( NAMESPACE_NODE LPAREN RPAREN )
            // XQueryParser.g:1120:11: NAMESPACE_NODE LPAREN RPAREN
            {
            root_0 = (XQDTCommonTree)adaptor.nil();

            NAMESPACE_NODE501=(CommonToken)match(input,NAMESPACE_NODE,FOLLOW_NAMESPACE_NODE_in_p_NamespaceNodeTest9584); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            NAMESPACE_NODE501_tree = (XQDTCommonTree)adaptor.create(NAMESPACE_NODE501);
            adaptor.addChild(root_0, NAMESPACE_NODE501_tree);
            }
            LPAREN502=(CommonToken)match(input,LPAREN,FOLLOW_LPAREN_in_p_NamespaceNodeTest9586); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            LPAREN502_tree = (XQDTCommonTree)adaptor.create(LPAREN502);
            adaptor.addChild(root_0, LPAREN502_tree);
            }
            RPAREN503=(CommonToken)match(input,RPAREN,FOLLOW_RPAREN_in_p_NamespaceNodeTest9588); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            RPAREN503_tree = (XQDTCommonTree)adaptor.create(RPAREN503);
            adaptor.addChild(root_0, RPAREN503_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (XQDTCommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (XQDTCommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "p_NamespaceNodeTest"

    public static class p_PITest_return extends ParserRuleReturnScope {
        XQDTCommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "p_PITest"
    // XQueryParser.g:1124:1: p_PITest : PROCESSING_INSTRUCTION LPAREN ( p_NCName | p_StringLiteral )? RPAREN ;
    public final XQueryParser.p_PITest_return p_PITest() throws RecognitionException {
        XQueryParser.p_PITest_return retval = new XQueryParser.p_PITest_return();
        retval.start = input.LT(1);

        XQDTCommonTree root_0 = null;

        CommonToken PROCESSING_INSTRUCTION504=null;
        CommonToken LPAREN505=null;
        CommonToken RPAREN508=null;
        XQueryParser.p_NCName_return p_NCName506 = null;

        XQueryParser.p_StringLiteral_return p_StringLiteral507 = null;


        XQDTCommonTree PROCESSING_INSTRUCTION504_tree=null;
        XQDTCommonTree LPAREN505_tree=null;
        XQDTCommonTree RPAREN508_tree=null;

        try {
            // XQueryParser.g:1125:9: ( PROCESSING_INSTRUCTION LPAREN ( p_NCName | p_StringLiteral )? RPAREN )
            // XQueryParser.g:1125:13: PROCESSING_INSTRUCTION LPAREN ( p_NCName | p_StringLiteral )? RPAREN
            {
            root_0 = (XQDTCommonTree)adaptor.nil();

            PROCESSING_INSTRUCTION504=(CommonToken)match(input,PROCESSING_INSTRUCTION,FOLLOW_PROCESSING_INSTRUCTION_in_p_PITest9616); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            PROCESSING_INSTRUCTION504_tree = (XQDTCommonTree)adaptor.create(PROCESSING_INSTRUCTION504);
            adaptor.addChild(root_0, PROCESSING_INSTRUCTION504_tree);
            }
            LPAREN505=(CommonToken)match(input,LPAREN,FOLLOW_LPAREN_in_p_PITest9618); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            LPAREN505_tree = (XQDTCommonTree)adaptor.create(LPAREN505);
            adaptor.addChild(root_0, LPAREN505_tree);
            }
            // XQueryParser.g:1125:43: ( p_NCName | p_StringLiteral )?
            int alt169=3;
            int LA169_0 = input.LA(1);

            if ( ((LA169_0>=ANCESTOR && LA169_0<=DECIMAL_SEPARATOR)||(LA169_0>=DIGIT && LA169_0<=NEXT)||(LA169_0>=ONLY && LA169_0<=EXIT)||(LA169_0>=SEQUENTIAL && LA169_0<=MAINTAINED)||(LA169_0>=MUTABLE && LA169_0<=QUOT_ER)||LA169_0==L_NCName||LA169_0==EXPLICITLY) ) {
                alt169=1;
            }
            else if ( ((LA169_0>=APOS && LA169_0<=QUOT)) ) {
                alt169=2;
            }
            switch (alt169) {
                case 1 :
                    // XQueryParser.g:1125:44: p_NCName
                    {
                    pushFollow(FOLLOW_p_NCName_in_p_PITest9621);
                    p_NCName506=p_NCName();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, p_NCName506.getTree());

                    }
                    break;
                case 2 :
                    // XQueryParser.g:1125:55: p_StringLiteral
                    {
                    pushFollow(FOLLOW_p_StringLiteral_in_p_PITest9625);
                    p_StringLiteral507=p_StringLiteral();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, p_StringLiteral507.getTree());

                    }
                    break;

            }

            RPAREN508=(CommonToken)match(input,RPAREN,FOLLOW_RPAREN_in_p_PITest9629); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            RPAREN508_tree = (XQDTCommonTree)adaptor.create(RPAREN508);
            adaptor.addChild(root_0, RPAREN508_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (XQDTCommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (XQDTCommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "p_PITest"

    public static class p_AttributeTest_return extends ParserRuleReturnScope {
        XQDTCommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "p_AttributeTest"
    // XQueryParser.g:1129:1: p_AttributeTest : ATTRIBUTE LPAREN ( p_AttribNameOrWildcard ( COMMA p_TypeName )? )? RPAREN ;
    public final XQueryParser.p_AttributeTest_return p_AttributeTest() throws RecognitionException {
        XQueryParser.p_AttributeTest_return retval = new XQueryParser.p_AttributeTest_return();
        retval.start = input.LT(1);

        XQDTCommonTree root_0 = null;

        CommonToken ATTRIBUTE509=null;
        CommonToken LPAREN510=null;
        CommonToken COMMA512=null;
        CommonToken RPAREN514=null;
        XQueryParser.p_AttribNameOrWildcard_return p_AttribNameOrWildcard511 = null;

        XQueryParser.p_TypeName_return p_TypeName513 = null;


        XQDTCommonTree ATTRIBUTE509_tree=null;
        XQDTCommonTree LPAREN510_tree=null;
        XQDTCommonTree COMMA512_tree=null;
        XQDTCommonTree RPAREN514_tree=null;

        try {
            // XQueryParser.g:1130:9: ( ATTRIBUTE LPAREN ( p_AttribNameOrWildcard ( COMMA p_TypeName )? )? RPAREN )
            // XQueryParser.g:1130:13: ATTRIBUTE LPAREN ( p_AttribNameOrWildcard ( COMMA p_TypeName )? )? RPAREN
            {
            root_0 = (XQDTCommonTree)adaptor.nil();

            ATTRIBUTE509=(CommonToken)match(input,ATTRIBUTE,FOLLOW_ATTRIBUTE_in_p_AttributeTest9657); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            ATTRIBUTE509_tree = (XQDTCommonTree)adaptor.create(ATTRIBUTE509);
            adaptor.addChild(root_0, ATTRIBUTE509_tree);
            }
            LPAREN510=(CommonToken)match(input,LPAREN,FOLLOW_LPAREN_in_p_AttributeTest9659); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            LPAREN510_tree = (XQDTCommonTree)adaptor.create(LPAREN510);
            adaptor.addChild(root_0, LPAREN510_tree);
            }
            // XQueryParser.g:1130:30: ( p_AttribNameOrWildcard ( COMMA p_TypeName )? )?
            int alt171=2;
            int LA171_0 = input.LA(1);

            if ( ((LA171_0>=ANCESTOR && LA171_0<=DECIMAL_SEPARATOR)||(LA171_0>=DIGIT && LA171_0<=NEXT)||(LA171_0>=ONLY && LA171_0<=EXIT)||(LA171_0>=SEQUENTIAL && LA171_0<=MAINTAINED)||(LA171_0>=MUTABLE && LA171_0<=QUOT_ER)||LA171_0==STAR||LA171_0==L_NCName||LA171_0==EXPLICITLY) ) {
                alt171=1;
            }
            switch (alt171) {
                case 1 :
                    // XQueryParser.g:1130:31: p_AttribNameOrWildcard ( COMMA p_TypeName )?
                    {
                    pushFollow(FOLLOW_p_AttribNameOrWildcard_in_p_AttributeTest9662);
                    p_AttribNameOrWildcard511=p_AttribNameOrWildcard();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, p_AttribNameOrWildcard511.getTree());
                    // XQueryParser.g:1130:54: ( COMMA p_TypeName )?
                    int alt170=2;
                    int LA170_0 = input.LA(1);

                    if ( (LA170_0==COMMA) ) {
                        alt170=1;
                    }
                    switch (alt170) {
                        case 1 :
                            // XQueryParser.g:1130:55: COMMA p_TypeName
                            {
                            COMMA512=(CommonToken)match(input,COMMA,FOLLOW_COMMA_in_p_AttributeTest9665); if (state.failed) return retval;
                            if ( state.backtracking==0 ) {
                            COMMA512_tree = (XQDTCommonTree)adaptor.create(COMMA512);
                            adaptor.addChild(root_0, COMMA512_tree);
                            }
                            pushFollow(FOLLOW_p_TypeName_in_p_AttributeTest9667);
                            p_TypeName513=p_TypeName();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) adaptor.addChild(root_0, p_TypeName513.getTree());

                            }
                            break;

                    }


                    }
                    break;

            }

            RPAREN514=(CommonToken)match(input,RPAREN,FOLLOW_RPAREN_in_p_AttributeTest9673); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            RPAREN514_tree = (XQDTCommonTree)adaptor.create(RPAREN514);
            adaptor.addChild(root_0, RPAREN514_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (XQDTCommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (XQDTCommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "p_AttributeTest"

    public static class p_AttribNameOrWildcard_return extends ParserRuleReturnScope {
        XQDTCommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "p_AttribNameOrWildcard"
    // XQueryParser.g:1134:1: p_AttribNameOrWildcard : ( p_QName | STAR );
    public final XQueryParser.p_AttribNameOrWildcard_return p_AttribNameOrWildcard() throws RecognitionException {
        XQueryParser.p_AttribNameOrWildcard_return retval = new XQueryParser.p_AttribNameOrWildcard_return();
        retval.start = input.LT(1);

        XQDTCommonTree root_0 = null;

        CommonToken STAR516=null;
        XQueryParser.p_QName_return p_QName515 = null;


        XQDTCommonTree STAR516_tree=null;

        try {
            // XQueryParser.g:1135:9: ( p_QName | STAR )
            int alt172=2;
            int LA172_0 = input.LA(1);

            if ( ((LA172_0>=ANCESTOR && LA172_0<=DECIMAL_SEPARATOR)||(LA172_0>=DIGIT && LA172_0<=NEXT)||(LA172_0>=ONLY && LA172_0<=EXIT)||(LA172_0>=SEQUENTIAL && LA172_0<=MAINTAINED)||(LA172_0>=MUTABLE && LA172_0<=QUOT_ER)||LA172_0==L_NCName||LA172_0==EXPLICITLY) ) {
                alt172=1;
            }
            else if ( (LA172_0==STAR) ) {
                alt172=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 172, 0, input);

                throw nvae;
            }
            switch (alt172) {
                case 1 :
                    // XQueryParser.g:1135:13: p_QName
                    {
                    root_0 = (XQDTCommonTree)adaptor.nil();

                    pushFollow(FOLLOW_p_QName_in_p_AttribNameOrWildcard9703);
                    p_QName515=p_QName();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, p_QName515.getTree());

                    }
                    break;
                case 2 :
                    // XQueryParser.g:1135:23: STAR
                    {
                    root_0 = (XQDTCommonTree)adaptor.nil();

                    STAR516=(CommonToken)match(input,STAR,FOLLOW_STAR_in_p_AttribNameOrWildcard9707); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    STAR516_tree = (XQDTCommonTree)adaptor.create(STAR516);
                    adaptor.addChild(root_0, STAR516_tree);
                    }

                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (XQDTCommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (XQDTCommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "p_AttribNameOrWildcard"

    public static class p_SchemaAttributeTest_return extends ParserRuleReturnScope {
        XQDTCommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "p_SchemaAttributeTest"
    // XQueryParser.g:1139:1: p_SchemaAttributeTest : SCHEMA_ATTRIBUTE LPAREN p_AttributeDeclaration RPAREN ;
    public final XQueryParser.p_SchemaAttributeTest_return p_SchemaAttributeTest() throws RecognitionException {
        XQueryParser.p_SchemaAttributeTest_return retval = new XQueryParser.p_SchemaAttributeTest_return();
        retval.start = input.LT(1);

        XQDTCommonTree root_0 = null;

        CommonToken SCHEMA_ATTRIBUTE517=null;
        CommonToken LPAREN518=null;
        CommonToken RPAREN520=null;
        XQueryParser.p_AttributeDeclaration_return p_AttributeDeclaration519 = null;


        XQDTCommonTree SCHEMA_ATTRIBUTE517_tree=null;
        XQDTCommonTree LPAREN518_tree=null;
        XQDTCommonTree RPAREN520_tree=null;

        try {
            // XQueryParser.g:1140:9: ( SCHEMA_ATTRIBUTE LPAREN p_AttributeDeclaration RPAREN )
            // XQueryParser.g:1140:13: SCHEMA_ATTRIBUTE LPAREN p_AttributeDeclaration RPAREN
            {
            root_0 = (XQDTCommonTree)adaptor.nil();

            SCHEMA_ATTRIBUTE517=(CommonToken)match(input,SCHEMA_ATTRIBUTE,FOLLOW_SCHEMA_ATTRIBUTE_in_p_SchemaAttributeTest9735); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            SCHEMA_ATTRIBUTE517_tree = (XQDTCommonTree)adaptor.create(SCHEMA_ATTRIBUTE517);
            adaptor.addChild(root_0, SCHEMA_ATTRIBUTE517_tree);
            }
            LPAREN518=(CommonToken)match(input,LPAREN,FOLLOW_LPAREN_in_p_SchemaAttributeTest9737); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            LPAREN518_tree = (XQDTCommonTree)adaptor.create(LPAREN518);
            adaptor.addChild(root_0, LPAREN518_tree);
            }
            pushFollow(FOLLOW_p_AttributeDeclaration_in_p_SchemaAttributeTest9739);
            p_AttributeDeclaration519=p_AttributeDeclaration();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, p_AttributeDeclaration519.getTree());
            RPAREN520=(CommonToken)match(input,RPAREN,FOLLOW_RPAREN_in_p_SchemaAttributeTest9741); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            RPAREN520_tree = (XQDTCommonTree)adaptor.create(RPAREN520);
            adaptor.addChild(root_0, RPAREN520_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (XQDTCommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (XQDTCommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "p_SchemaAttributeTest"

    public static class p_AttributeDeclaration_return extends ParserRuleReturnScope {
        XQDTCommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "p_AttributeDeclaration"
    // XQueryParser.g:1144:1: p_AttributeDeclaration : p_AttributeName ;
    public final XQueryParser.p_AttributeDeclaration_return p_AttributeDeclaration() throws RecognitionException {
        XQueryParser.p_AttributeDeclaration_return retval = new XQueryParser.p_AttributeDeclaration_return();
        retval.start = input.LT(1);

        XQDTCommonTree root_0 = null;

        XQueryParser.p_AttributeName_return p_AttributeName521 = null;



        try {
            // XQueryParser.g:1145:9: ( p_AttributeName )
            // XQueryParser.g:1145:11: p_AttributeName
            {
            root_0 = (XQDTCommonTree)adaptor.nil();

            pushFollow(FOLLOW_p_AttributeName_in_p_AttributeDeclaration9767);
            p_AttributeName521=p_AttributeName();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, p_AttributeName521.getTree());

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (XQDTCommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (XQDTCommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "p_AttributeDeclaration"

    public static class p_ElementTest_return extends ParserRuleReturnScope {
        XQDTCommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "p_ElementTest"
    // XQueryParser.g:1149:1: p_ElementTest : ELEMENT LPAREN ( p_ElementNameOrWildcard ( COMMA p_TypeName ( QUESTION )? )? )? RPAREN ;
    public final XQueryParser.p_ElementTest_return p_ElementTest() throws RecognitionException {
        XQueryParser.p_ElementTest_return retval = new XQueryParser.p_ElementTest_return();
        retval.start = input.LT(1);

        XQDTCommonTree root_0 = null;

        CommonToken ELEMENT522=null;
        CommonToken LPAREN523=null;
        CommonToken COMMA525=null;
        CommonToken QUESTION527=null;
        CommonToken RPAREN528=null;
        XQueryParser.p_ElementNameOrWildcard_return p_ElementNameOrWildcard524 = null;

        XQueryParser.p_TypeName_return p_TypeName526 = null;


        XQDTCommonTree ELEMENT522_tree=null;
        XQDTCommonTree LPAREN523_tree=null;
        XQDTCommonTree COMMA525_tree=null;
        XQDTCommonTree QUESTION527_tree=null;
        XQDTCommonTree RPAREN528_tree=null;

        try {
            // XQueryParser.g:1150:9: ( ELEMENT LPAREN ( p_ElementNameOrWildcard ( COMMA p_TypeName ( QUESTION )? )? )? RPAREN )
            // XQueryParser.g:1150:13: ELEMENT LPAREN ( p_ElementNameOrWildcard ( COMMA p_TypeName ( QUESTION )? )? )? RPAREN
            {
            root_0 = (XQDTCommonTree)adaptor.nil();

            ELEMENT522=(CommonToken)match(input,ELEMENT,FOLLOW_ELEMENT_in_p_ElementTest9795); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            ELEMENT522_tree = (XQDTCommonTree)adaptor.create(ELEMENT522);
            adaptor.addChild(root_0, ELEMENT522_tree);
            }
            LPAREN523=(CommonToken)match(input,LPAREN,FOLLOW_LPAREN_in_p_ElementTest9797); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            LPAREN523_tree = (XQDTCommonTree)adaptor.create(LPAREN523);
            adaptor.addChild(root_0, LPAREN523_tree);
            }
            // XQueryParser.g:1150:28: ( p_ElementNameOrWildcard ( COMMA p_TypeName ( QUESTION )? )? )?
            int alt175=2;
            int LA175_0 = input.LA(1);

            if ( ((LA175_0>=ANCESTOR && LA175_0<=DECIMAL_SEPARATOR)||(LA175_0>=DIGIT && LA175_0<=NEXT)||(LA175_0>=ONLY && LA175_0<=EXIT)||(LA175_0>=SEQUENTIAL && LA175_0<=MAINTAINED)||(LA175_0>=MUTABLE && LA175_0<=QUOT_ER)||LA175_0==STAR||LA175_0==L_NCName||LA175_0==EXPLICITLY) ) {
                alt175=1;
            }
            switch (alt175) {
                case 1 :
                    // XQueryParser.g:1150:29: p_ElementNameOrWildcard ( COMMA p_TypeName ( QUESTION )? )?
                    {
                    pushFollow(FOLLOW_p_ElementNameOrWildcard_in_p_ElementTest9800);
                    p_ElementNameOrWildcard524=p_ElementNameOrWildcard();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, p_ElementNameOrWildcard524.getTree());
                    // XQueryParser.g:1150:53: ( COMMA p_TypeName ( QUESTION )? )?
                    int alt174=2;
                    int LA174_0 = input.LA(1);

                    if ( (LA174_0==COMMA) ) {
                        alt174=1;
                    }
                    switch (alt174) {
                        case 1 :
                            // XQueryParser.g:1150:54: COMMA p_TypeName ( QUESTION )?
                            {
                            COMMA525=(CommonToken)match(input,COMMA,FOLLOW_COMMA_in_p_ElementTest9803); if (state.failed) return retval;
                            if ( state.backtracking==0 ) {
                            COMMA525_tree = (XQDTCommonTree)adaptor.create(COMMA525);
                            adaptor.addChild(root_0, COMMA525_tree);
                            }
                            pushFollow(FOLLOW_p_TypeName_in_p_ElementTest9805);
                            p_TypeName526=p_TypeName();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) adaptor.addChild(root_0, p_TypeName526.getTree());
                            // XQueryParser.g:1150:71: ( QUESTION )?
                            int alt173=2;
                            int LA173_0 = input.LA(1);

                            if ( (LA173_0==QUESTION) ) {
                                alt173=1;
                            }
                            switch (alt173) {
                                case 1 :
                                    // XQueryParser.g:1150:71: QUESTION
                                    {
                                    QUESTION527=(CommonToken)match(input,QUESTION,FOLLOW_QUESTION_in_p_ElementTest9807); if (state.failed) return retval;
                                    if ( state.backtracking==0 ) {
                                    QUESTION527_tree = (XQDTCommonTree)adaptor.create(QUESTION527);
                                    adaptor.addChild(root_0, QUESTION527_tree);
                                    }

                                    }
                                    break;

                            }


                            }
                            break;

                    }


                    }
                    break;

            }

            RPAREN528=(CommonToken)match(input,RPAREN,FOLLOW_RPAREN_in_p_ElementTest9814); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            RPAREN528_tree = (XQDTCommonTree)adaptor.create(RPAREN528);
            adaptor.addChild(root_0, RPAREN528_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (XQDTCommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (XQDTCommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "p_ElementTest"

    public static class p_ElementNameOrWildcard_return extends ParserRuleReturnScope {
        XQDTCommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "p_ElementNameOrWildcard"
    // XQueryParser.g:1154:1: p_ElementNameOrWildcard : ( p_QName | STAR );
    public final XQueryParser.p_ElementNameOrWildcard_return p_ElementNameOrWildcard() throws RecognitionException {
        XQueryParser.p_ElementNameOrWildcard_return retval = new XQueryParser.p_ElementNameOrWildcard_return();
        retval.start = input.LT(1);

        XQDTCommonTree root_0 = null;

        CommonToken STAR530=null;
        XQueryParser.p_QName_return p_QName529 = null;


        XQDTCommonTree STAR530_tree=null;

        try {
            // XQueryParser.g:1155:9: ( p_QName | STAR )
            int alt176=2;
            int LA176_0 = input.LA(1);

            if ( ((LA176_0>=ANCESTOR && LA176_0<=DECIMAL_SEPARATOR)||(LA176_0>=DIGIT && LA176_0<=NEXT)||(LA176_0>=ONLY && LA176_0<=EXIT)||(LA176_0>=SEQUENTIAL && LA176_0<=MAINTAINED)||(LA176_0>=MUTABLE && LA176_0<=QUOT_ER)||LA176_0==L_NCName||LA176_0==EXPLICITLY) ) {
                alt176=1;
            }
            else if ( (LA176_0==STAR) ) {
                alt176=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 176, 0, input);

                throw nvae;
            }
            switch (alt176) {
                case 1 :
                    // XQueryParser.g:1155:13: p_QName
                    {
                    root_0 = (XQDTCommonTree)adaptor.nil();

                    pushFollow(FOLLOW_p_QName_in_p_ElementNameOrWildcard9842);
                    p_QName529=p_QName();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, p_QName529.getTree());

                    }
                    break;
                case 2 :
                    // XQueryParser.g:1155:23: STAR
                    {
                    root_0 = (XQDTCommonTree)adaptor.nil();

                    STAR530=(CommonToken)match(input,STAR,FOLLOW_STAR_in_p_ElementNameOrWildcard9846); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    STAR530_tree = (XQDTCommonTree)adaptor.create(STAR530);
                    adaptor.addChild(root_0, STAR530_tree);
                    }

                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (XQDTCommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (XQDTCommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "p_ElementNameOrWildcard"

    public static class p_SchemaElementTest_return extends ParserRuleReturnScope {
        XQDTCommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "p_SchemaElementTest"
    // XQueryParser.g:1158:1: p_SchemaElementTest : SCHEMA_ELEMENT LPAREN p_ElementDeclaration RPAREN ;
    public final XQueryParser.p_SchemaElementTest_return p_SchemaElementTest() throws RecognitionException {
        XQueryParser.p_SchemaElementTest_return retval = new XQueryParser.p_SchemaElementTest_return();
        retval.start = input.LT(1);

        XQDTCommonTree root_0 = null;

        CommonToken SCHEMA_ELEMENT531=null;
        CommonToken LPAREN532=null;
        CommonToken RPAREN534=null;
        XQueryParser.p_ElementDeclaration_return p_ElementDeclaration533 = null;


        XQDTCommonTree SCHEMA_ELEMENT531_tree=null;
        XQDTCommonTree LPAREN532_tree=null;
        XQDTCommonTree RPAREN534_tree=null;

        try {
            // XQueryParser.g:1159:9: ( SCHEMA_ELEMENT LPAREN p_ElementDeclaration RPAREN )
            // XQueryParser.g:1159:13: SCHEMA_ELEMENT LPAREN p_ElementDeclaration RPAREN
            {
            root_0 = (XQDTCommonTree)adaptor.nil();

            SCHEMA_ELEMENT531=(CommonToken)match(input,SCHEMA_ELEMENT,FOLLOW_SCHEMA_ELEMENT_in_p_SchemaElementTest9866); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            SCHEMA_ELEMENT531_tree = (XQDTCommonTree)adaptor.create(SCHEMA_ELEMENT531);
            adaptor.addChild(root_0, SCHEMA_ELEMENT531_tree);
            }
            LPAREN532=(CommonToken)match(input,LPAREN,FOLLOW_LPAREN_in_p_SchemaElementTest9868); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            LPAREN532_tree = (XQDTCommonTree)adaptor.create(LPAREN532);
            adaptor.addChild(root_0, LPAREN532_tree);
            }
            pushFollow(FOLLOW_p_ElementDeclaration_in_p_SchemaElementTest9870);
            p_ElementDeclaration533=p_ElementDeclaration();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, p_ElementDeclaration533.getTree());
            RPAREN534=(CommonToken)match(input,RPAREN,FOLLOW_RPAREN_in_p_SchemaElementTest9872); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            RPAREN534_tree = (XQDTCommonTree)adaptor.create(RPAREN534);
            adaptor.addChild(root_0, RPAREN534_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (XQDTCommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (XQDTCommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "p_SchemaElementTest"

    public static class p_ElementDeclaration_return extends ParserRuleReturnScope {
        XQDTCommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "p_ElementDeclaration"
    // XQueryParser.g:1163:1: p_ElementDeclaration : p_ElementName ;
    public final XQueryParser.p_ElementDeclaration_return p_ElementDeclaration() throws RecognitionException {
        XQueryParser.p_ElementDeclaration_return retval = new XQueryParser.p_ElementDeclaration_return();
        retval.start = input.LT(1);

        XQDTCommonTree root_0 = null;

        XQueryParser.p_ElementName_return p_ElementName535 = null;



        try {
            // XQueryParser.g:1164:9: ( p_ElementName )
            // XQueryParser.g:1164:11: p_ElementName
            {
            root_0 = (XQDTCommonTree)adaptor.nil();

            pushFollow(FOLLOW_p_ElementName_in_p_ElementDeclaration9898);
            p_ElementName535=p_ElementName();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, p_ElementName535.getTree());

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (XQDTCommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (XQDTCommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "p_ElementDeclaration"

    public static class p_AttributeName_return extends ParserRuleReturnScope {
        XQDTCommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "p_AttributeName"
    // XQueryParser.g:1168:1: p_AttributeName : p_QName ;
    public final XQueryParser.p_AttributeName_return p_AttributeName() throws RecognitionException {
        XQueryParser.p_AttributeName_return retval = new XQueryParser.p_AttributeName_return();
        retval.start = input.LT(1);

        XQDTCommonTree root_0 = null;

        XQueryParser.p_QName_return p_QName536 = null;



        try {
            // XQueryParser.g:1169:9: ( p_QName )
            // XQueryParser.g:1169:13: p_QName
            {
            root_0 = (XQDTCommonTree)adaptor.nil();

            pushFollow(FOLLOW_p_QName_in_p_AttributeName9926);
            p_QName536=p_QName();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, p_QName536.getTree());

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (XQDTCommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (XQDTCommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "p_AttributeName"

    public static class p_ElementName_return extends ParserRuleReturnScope {
        XQDTCommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "p_ElementName"
    // XQueryParser.g:1173:1: p_ElementName : p_QName ;
    public final XQueryParser.p_ElementName_return p_ElementName() throws RecognitionException {
        XQueryParser.p_ElementName_return retval = new XQueryParser.p_ElementName_return();
        retval.start = input.LT(1);

        XQDTCommonTree root_0 = null;

        XQueryParser.p_QName_return p_QName537 = null;



        try {
            // XQueryParser.g:1174:9: ( p_QName )
            // XQueryParser.g:1174:13: p_QName
            {
            root_0 = (XQDTCommonTree)adaptor.nil();

            pushFollow(FOLLOW_p_QName_in_p_ElementName9954);
            p_QName537=p_QName();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, p_QName537.getTree());

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (XQDTCommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (XQDTCommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "p_ElementName"

    public static class p_TypeName_return extends ParserRuleReturnScope {
        XQDTCommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "p_TypeName"
    // XQueryParser.g:1178:1: p_TypeName : p_QName ;
    public final XQueryParser.p_TypeName_return p_TypeName() throws RecognitionException {
        XQueryParser.p_TypeName_return retval = new XQueryParser.p_TypeName_return();
        retval.start = input.LT(1);

        XQDTCommonTree root_0 = null;

        XQueryParser.p_QName_return p_QName538 = null;



        try {
            // XQueryParser.g:1179:9: ( p_QName )
            // XQueryParser.g:1179:13: p_QName
            {
            root_0 = (XQDTCommonTree)adaptor.nil();

            pushFollow(FOLLOW_p_QName_in_p_TypeName9982);
            p_QName538=p_QName();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, p_QName538.getTree());

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (XQDTCommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (XQDTCommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "p_TypeName"

    public static class p_FTSelection_return extends ParserRuleReturnScope {
        XQDTCommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "p_FTSelection"
    // XQueryParser.g:1186:1: p_FTSelection : p_FTOr ( p_FTPosFilter )* ;
    public final XQueryParser.p_FTSelection_return p_FTSelection() throws RecognitionException {
        XQueryParser.p_FTSelection_return retval = new XQueryParser.p_FTSelection_return();
        retval.start = input.LT(1);

        XQDTCommonTree root_0 = null;

        XQueryParser.p_FTOr_return p_FTOr539 = null;

        XQueryParser.p_FTPosFilter_return p_FTPosFilter540 = null;



        try {
            // XQueryParser.g:1187:9: ( p_FTOr ( p_FTPosFilter )* )
            // XQueryParser.g:1187:11: p_FTOr ( p_FTPosFilter )*
            {
            root_0 = (XQDTCommonTree)adaptor.nil();

            pushFollow(FOLLOW_p_FTOr_in_p_FTSelection10011);
            p_FTOr539=p_FTOr();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, p_FTOr539.getTree());
            // XQueryParser.g:1187:18: ( p_FTPosFilter )*
            loop177:
            do {
                int alt177=2;
                int LA177_0 = input.LA(1);

                if ( (LA177_0==AT||LA177_0==ORDERED||LA177_0==WINDOW||(LA177_0>=DIFFERENT && LA177_0<=ENTIRE)||LA177_0==SAME) ) {
                    alt177=1;
                }


                switch (alt177) {
            	case 1 :
            	    // XQueryParser.g:1187:18: p_FTPosFilter
            	    {
            	    pushFollow(FOLLOW_p_FTPosFilter_in_p_FTSelection10013);
            	    p_FTPosFilter540=p_FTPosFilter();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, p_FTPosFilter540.getTree());

            	    }
            	    break;

            	default :
            	    break loop177;
                }
            } while (true);


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (XQDTCommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (XQDTCommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "p_FTSelection"

    public static class p_FTWeight_return extends ParserRuleReturnScope {
        XQDTCommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "p_FTWeight"
    // XQueryParser.g:1191:1: p_FTWeight : kw= WEIGHT LBRACKET pm_Expr RBRACKET ;
    public final XQueryParser.p_FTWeight_return p_FTWeight() throws RecognitionException {
        XQueryParser.p_FTWeight_return retval = new XQueryParser.p_FTWeight_return();
        retval.start = input.LT(1);

        XQDTCommonTree root_0 = null;

        CommonToken kw=null;
        CommonToken LBRACKET541=null;
        CommonToken RBRACKET543=null;
        XQueryParser.pm_Expr_return pm_Expr542 = null;


        XQDTCommonTree kw_tree=null;
        XQDTCommonTree LBRACKET541_tree=null;
        XQDTCommonTree RBRACKET543_tree=null;

        try {
            // XQueryParser.g:1192:9: (kw= WEIGHT LBRACKET pm_Expr RBRACKET )
            // XQueryParser.g:1192:11: kw= WEIGHT LBRACKET pm_Expr RBRACKET
            {
            root_0 = (XQDTCommonTree)adaptor.nil();

            kw=(CommonToken)match(input,WEIGHT,FOLLOW_WEIGHT_in_p_FTWeight10042); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            kw_tree = (XQDTCommonTree)adaptor.create(kw);
            adaptor.addChild(root_0, kw_tree);
            }
            if ( state.backtracking==0 ) {
              ak(kw);
            }
            LBRACKET541=(CommonToken)match(input,LBRACKET,FOLLOW_LBRACKET_in_p_FTWeight10046); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            LBRACKET541_tree = (XQDTCommonTree)adaptor.create(LBRACKET541);
            adaptor.addChild(root_0, LBRACKET541_tree);
            }
            pushFollow(FOLLOW_pm_Expr_in_p_FTWeight10048);
            pm_Expr542=pm_Expr();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, pm_Expr542.getTree());
            RBRACKET543=(CommonToken)match(input,RBRACKET,FOLLOW_RBRACKET_in_p_FTWeight10050); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            RBRACKET543_tree = (XQDTCommonTree)adaptor.create(RBRACKET543);
            adaptor.addChild(root_0, RBRACKET543_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (XQDTCommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (XQDTCommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "p_FTWeight"

    public static class p_FTOr_return extends ParserRuleReturnScope {
        XQDTCommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "p_FTOr"
    // XQueryParser.g:1196:1: p_FTOr : p_FTAnd (ko= FTOR p_FTAnd )* ;
    public final XQueryParser.p_FTOr_return p_FTOr() throws RecognitionException {
        XQueryParser.p_FTOr_return retval = new XQueryParser.p_FTOr_return();
        retval.start = input.LT(1);

        XQDTCommonTree root_0 = null;

        CommonToken ko=null;
        XQueryParser.p_FTAnd_return p_FTAnd544 = null;

        XQueryParser.p_FTAnd_return p_FTAnd545 = null;


        XQDTCommonTree ko_tree=null;

        try {
            // XQueryParser.g:1197:9: ( p_FTAnd (ko= FTOR p_FTAnd )* )
            // XQueryParser.g:1197:11: p_FTAnd (ko= FTOR p_FTAnd )*
            {
            root_0 = (XQDTCommonTree)adaptor.nil();

            pushFollow(FOLLOW_p_FTAnd_in_p_FTOr10076);
            p_FTAnd544=p_FTAnd();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, p_FTAnd544.getTree());
            // XQueryParser.g:1197:19: (ko= FTOR p_FTAnd )*
            loop178:
            do {
                int alt178=2;
                int LA178_0 = input.LA(1);

                if ( (LA178_0==FTOR) ) {
                    alt178=1;
                }


                switch (alt178) {
            	case 1 :
            	    // XQueryParser.g:1197:21: ko= FTOR p_FTAnd
            	    {
            	    ko=(CommonToken)match(input,FTOR,FOLLOW_FTOR_in_p_FTOr10082); if (state.failed) return retval;
            	    if ( state.backtracking==0 ) {
            	    ko_tree = (XQDTCommonTree)adaptor.create(ko);
            	    adaptor.addChild(root_0, ko_tree);
            	    }
            	    if ( state.backtracking==0 ) {
            	      ak(ko);
            	    }
            	    pushFollow(FOLLOW_p_FTAnd_in_p_FTOr10086);
            	    p_FTAnd545=p_FTAnd();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, p_FTAnd545.getTree());

            	    }
            	    break;

            	default :
            	    break loop178;
                }
            } while (true);


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (XQDTCommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (XQDTCommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "p_FTOr"

    public static class p_FTAnd_return extends ParserRuleReturnScope {
        XQDTCommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "p_FTAnd"
    // XQueryParser.g:1201:1: p_FTAnd : p_FTMildNot (ka= FTAND p_FTMildNot )* ;
    public final XQueryParser.p_FTAnd_return p_FTAnd() throws RecognitionException {
        XQueryParser.p_FTAnd_return retval = new XQueryParser.p_FTAnd_return();
        retval.start = input.LT(1);

        XQDTCommonTree root_0 = null;

        CommonToken ka=null;
        XQueryParser.p_FTMildNot_return p_FTMildNot546 = null;

        XQueryParser.p_FTMildNot_return p_FTMildNot547 = null;


        XQDTCommonTree ka_tree=null;

        try {
            // XQueryParser.g:1202:9: ( p_FTMildNot (ka= FTAND p_FTMildNot )* )
            // XQueryParser.g:1202:11: p_FTMildNot (ka= FTAND p_FTMildNot )*
            {
            root_0 = (XQDTCommonTree)adaptor.nil();

            pushFollow(FOLLOW_p_FTMildNot_in_p_FTAnd10115);
            p_FTMildNot546=p_FTMildNot();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, p_FTMildNot546.getTree());
            // XQueryParser.g:1202:23: (ka= FTAND p_FTMildNot )*
            loop179:
            do {
                int alt179=2;
                int LA179_0 = input.LA(1);

                if ( (LA179_0==FTAND) ) {
                    alt179=1;
                }


                switch (alt179) {
            	case 1 :
            	    // XQueryParser.g:1202:25: ka= FTAND p_FTMildNot
            	    {
            	    ka=(CommonToken)match(input,FTAND,FOLLOW_FTAND_in_p_FTAnd10121); if (state.failed) return retval;
            	    if ( state.backtracking==0 ) {
            	    ka_tree = (XQDTCommonTree)adaptor.create(ka);
            	    adaptor.addChild(root_0, ka_tree);
            	    }
            	    if ( state.backtracking==0 ) {
            	      ak(ka);
            	    }
            	    pushFollow(FOLLOW_p_FTMildNot_in_p_FTAnd10125);
            	    p_FTMildNot547=p_FTMildNot();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, p_FTMildNot547.getTree());

            	    }
            	    break;

            	default :
            	    break loop179;
                }
            } while (true);


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (XQDTCommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (XQDTCommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "p_FTAnd"

    public static class p_FTMildNot_return extends ParserRuleReturnScope {
        XQDTCommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "p_FTMildNot"
    // XQueryParser.g:1206:1: p_FTMildNot : p_FTUnaryNot (k+= NOT k+= IN p_FTUnaryNot )* ;
    public final XQueryParser.p_FTMildNot_return p_FTMildNot() throws RecognitionException {
        XQueryParser.p_FTMildNot_return retval = new XQueryParser.p_FTMildNot_return();
        retval.start = input.LT(1);

        XQDTCommonTree root_0 = null;

        CommonToken k=null;
        List list_k=null;
        XQueryParser.p_FTUnaryNot_return p_FTUnaryNot548 = null;

        XQueryParser.p_FTUnaryNot_return p_FTUnaryNot549 = null;


        XQDTCommonTree k_tree=null;

        try {
            // XQueryParser.g:1207:9: ( p_FTUnaryNot (k+= NOT k+= IN p_FTUnaryNot )* )
            // XQueryParser.g:1207:11: p_FTUnaryNot (k+= NOT k+= IN p_FTUnaryNot )*
            {
            root_0 = (XQDTCommonTree)adaptor.nil();

            pushFollow(FOLLOW_p_FTUnaryNot_in_p_FTMildNot10154);
            p_FTUnaryNot548=p_FTUnaryNot();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, p_FTUnaryNot548.getTree());
            // XQueryParser.g:1207:24: (k+= NOT k+= IN p_FTUnaryNot )*
            loop180:
            do {
                int alt180=2;
                int LA180_0 = input.LA(1);

                if ( (LA180_0==NOT) ) {
                    alt180=1;
                }


                switch (alt180) {
            	case 1 :
            	    // XQueryParser.g:1207:26: k+= NOT k+= IN p_FTUnaryNot
            	    {
            	    k=(CommonToken)match(input,NOT,FOLLOW_NOT_in_p_FTMildNot10160); if (state.failed) return retval;
            	    if ( state.backtracking==0 ) {
            	    k_tree = (XQDTCommonTree)adaptor.create(k);
            	    adaptor.addChild(root_0, k_tree);
            	    }
            	    if (list_k==null) list_k=new ArrayList();
            	    list_k.add(k);

            	    k=(CommonToken)match(input,IN,FOLLOW_IN_in_p_FTMildNot10164); if (state.failed) return retval;
            	    if ( state.backtracking==0 ) {
            	    k_tree = (XQDTCommonTree)adaptor.create(k);
            	    adaptor.addChild(root_0, k_tree);
            	    }
            	    if (list_k==null) list_k=new ArrayList();
            	    list_k.add(k);

            	    if ( state.backtracking==0 ) {
            	      ak(list_k);
            	    }
            	    pushFollow(FOLLOW_p_FTUnaryNot_in_p_FTMildNot10168);
            	    p_FTUnaryNot549=p_FTUnaryNot();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, p_FTUnaryNot549.getTree());

            	    }
            	    break;

            	default :
            	    break loop180;
                }
            } while (true);


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (XQDTCommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (XQDTCommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "p_FTMildNot"

    public static class p_FTUnaryNot_return extends ParserRuleReturnScope {
        XQDTCommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "p_FTUnaryNot"
    // XQueryParser.g:1211:1: p_FTUnaryNot : (kn= FTNOT )? p_FTPrimaryWithOptions ;
    public final XQueryParser.p_FTUnaryNot_return p_FTUnaryNot() throws RecognitionException {
        XQueryParser.p_FTUnaryNot_return retval = new XQueryParser.p_FTUnaryNot_return();
        retval.start = input.LT(1);

        XQDTCommonTree root_0 = null;

        CommonToken kn=null;
        XQueryParser.p_FTPrimaryWithOptions_return p_FTPrimaryWithOptions550 = null;


        XQDTCommonTree kn_tree=null;

        try {
            // XQueryParser.g:1212:9: ( (kn= FTNOT )? p_FTPrimaryWithOptions )
            // XQueryParser.g:1212:11: (kn= FTNOT )? p_FTPrimaryWithOptions
            {
            root_0 = (XQDTCommonTree)adaptor.nil();

            // XQueryParser.g:1212:11: (kn= FTNOT )?
            int alt181=2;
            int LA181_0 = input.LA(1);

            if ( (LA181_0==FTNOT) ) {
                alt181=1;
            }
            switch (alt181) {
                case 1 :
                    // XQueryParser.g:1212:13: kn= FTNOT
                    {
                    kn=(CommonToken)match(input,FTNOT,FOLLOW_FTNOT_in_p_FTUnaryNot10201); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    kn_tree = (XQDTCommonTree)adaptor.create(kn);
                    adaptor.addChild(root_0, kn_tree);
                    }
                    if ( state.backtracking==0 ) {
                      ak(kn);
                    }

                    }
                    break;

            }

            pushFollow(FOLLOW_p_FTPrimaryWithOptions_in_p_FTUnaryNot10208);
            p_FTPrimaryWithOptions550=p_FTPrimaryWithOptions();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, p_FTPrimaryWithOptions550.getTree());

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (XQDTCommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (XQDTCommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "p_FTUnaryNot"

    public static class p_FTPrimaryWithOptions_return extends ParserRuleReturnScope {
        XQDTCommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "p_FTPrimaryWithOptions"
    // XQueryParser.g:1216:1: p_FTPrimaryWithOptions : p_FTPrimary ( p_FTMatchOptions )? ( p_FTWeight )? ;
    public final XQueryParser.p_FTPrimaryWithOptions_return p_FTPrimaryWithOptions() throws RecognitionException {
        XQueryParser.p_FTPrimaryWithOptions_return retval = new XQueryParser.p_FTPrimaryWithOptions_return();
        retval.start = input.LT(1);

        XQDTCommonTree root_0 = null;

        XQueryParser.p_FTPrimary_return p_FTPrimary551 = null;

        XQueryParser.p_FTMatchOptions_return p_FTMatchOptions552 = null;

        XQueryParser.p_FTWeight_return p_FTWeight553 = null;



        try {
            // XQueryParser.g:1217:9: ( p_FTPrimary ( p_FTMatchOptions )? ( p_FTWeight )? )
            // XQueryParser.g:1217:11: p_FTPrimary ( p_FTMatchOptions )? ( p_FTWeight )?
            {
            root_0 = (XQDTCommonTree)adaptor.nil();

            pushFollow(FOLLOW_p_FTPrimary_in_p_FTPrimaryWithOptions10234);
            p_FTPrimary551=p_FTPrimary();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, p_FTPrimary551.getTree());
            // XQueryParser.g:1217:23: ( p_FTMatchOptions )?
            int alt182=2;
            int LA182_0 = input.LA(1);

            if ( (LA182_0==USING) ) {
                alt182=1;
            }
            switch (alt182) {
                case 1 :
                    // XQueryParser.g:1217:23: p_FTMatchOptions
                    {
                    pushFollow(FOLLOW_p_FTMatchOptions_in_p_FTPrimaryWithOptions10236);
                    p_FTMatchOptions552=p_FTMatchOptions();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, p_FTMatchOptions552.getTree());

                    }
                    break;

            }

            // XQueryParser.g:1217:41: ( p_FTWeight )?
            int alt183=2;
            int LA183_0 = input.LA(1);

            if ( (LA183_0==WEIGHT) ) {
                alt183=1;
            }
            switch (alt183) {
                case 1 :
                    // XQueryParser.g:1217:41: p_FTWeight
                    {
                    pushFollow(FOLLOW_p_FTWeight_in_p_FTPrimaryWithOptions10239);
                    p_FTWeight553=p_FTWeight();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, p_FTWeight553.getTree());

                    }
                    break;

            }


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (XQDTCommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (XQDTCommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "p_FTPrimaryWithOptions"

    public static class p_TryCatchExpr_return extends ParserRuleReturnScope {
        XQDTCommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "p_TryCatchExpr"
    // XQueryParser.g:1226:1: p_TryCatchExpr : p_TryClause ( p_CatchClause )+ ;
    public final XQueryParser.p_TryCatchExpr_return p_TryCatchExpr() throws RecognitionException {
        XQueryParser.p_TryCatchExpr_return retval = new XQueryParser.p_TryCatchExpr_return();
        retval.start = input.LT(1);

        XQDTCommonTree root_0 = null;

        XQueryParser.p_TryClause_return p_TryClause554 = null;

        XQueryParser.p_CatchClause_return p_CatchClause555 = null;



        try {
            // XQueryParser.g:1227:9: ( p_TryClause ( p_CatchClause )+ )
            // XQueryParser.g:1227:11: p_TryClause ( p_CatchClause )+
            {
            root_0 = (XQDTCommonTree)adaptor.nil();

            pushFollow(FOLLOW_p_TryClause_in_p_TryCatchExpr10271);
            p_TryClause554=p_TryClause();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, p_TryClause554.getTree());
            // XQueryParser.g:1227:23: ( p_CatchClause )+
            int cnt184=0;
            loop184:
            do {
                int alt184=2;
                int LA184_0 = input.LA(1);

                if ( (LA184_0==CATCH) ) {
                    alt184=1;
                }


                switch (alt184) {
            	case 1 :
            	    // XQueryParser.g:1227:23: p_CatchClause
            	    {
            	    pushFollow(FOLLOW_p_CatchClause_in_p_TryCatchExpr10273);
            	    p_CatchClause555=p_CatchClause();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, p_CatchClause555.getTree());

            	    }
            	    break;

            	default :
            	    if ( cnt184 >= 1 ) break loop184;
            	    if (state.backtracking>0) {state.failed=true; return retval;}
                        EarlyExitException eee =
                            new EarlyExitException(184, input);
                        throw eee;
                }
                cnt184++;
            } while (true);


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (XQDTCommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (XQDTCommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "p_TryCatchExpr"

    public static class p_FTPrimary_return extends ParserRuleReturnScope {
        XQDTCommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "p_FTPrimary"
    // XQueryParser.g:1231:1: p_FTPrimary : ( ( p_FTWords ( p_FTTimes )? ) | ( LPAREN p_FTSelection RPAREN ) );
    public final XQueryParser.p_FTPrimary_return p_FTPrimary() throws RecognitionException {
        XQueryParser.p_FTPrimary_return retval = new XQueryParser.p_FTPrimary_return();
        retval.start = input.LT(1);

        XQDTCommonTree root_0 = null;

        CommonToken LPAREN558=null;
        CommonToken RPAREN560=null;
        XQueryParser.p_FTWords_return p_FTWords556 = null;

        XQueryParser.p_FTTimes_return p_FTTimes557 = null;

        XQueryParser.p_FTSelection_return p_FTSelection559 = null;


        XQDTCommonTree LPAREN558_tree=null;
        XQDTCommonTree RPAREN560_tree=null;

        try {
            // XQueryParser.g:1232:9: ( ( p_FTWords ( p_FTTimes )? ) | ( LPAREN p_FTSelection RPAREN ) )
            int alt186=2;
            int LA186_0 = input.LA(1);

            if ( (LA186_0==LBRACKET||(LA186_0>=APOS && LA186_0<=QUOT)) ) {
                alt186=1;
            }
            else if ( (LA186_0==LPAREN) ) {
                alt186=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 186, 0, input);

                throw nvae;
            }
            switch (alt186) {
                case 1 :
                    // XQueryParser.g:1232:11: ( p_FTWords ( p_FTTimes )? )
                    {
                    root_0 = (XQDTCommonTree)adaptor.nil();

                    // XQueryParser.g:1232:11: ( p_FTWords ( p_FTTimes )? )
                    // XQueryParser.g:1232:12: p_FTWords ( p_FTTimes )?
                    {
                    pushFollow(FOLLOW_p_FTWords_in_p_FTPrimary10301);
                    p_FTWords556=p_FTWords();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, p_FTWords556.getTree());
                    // XQueryParser.g:1232:22: ( p_FTTimes )?
                    int alt185=2;
                    int LA185_0 = input.LA(1);

                    if ( (LA185_0==OCCURS) ) {
                        alt185=1;
                    }
                    switch (alt185) {
                        case 1 :
                            // XQueryParser.g:1232:22: p_FTTimes
                            {
                            pushFollow(FOLLOW_p_FTTimes_in_p_FTPrimary10303);
                            p_FTTimes557=p_FTTimes();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) adaptor.addChild(root_0, p_FTTimes557.getTree());

                            }
                            break;

                    }


                    }


                    }
                    break;
                case 2 :
                    // XQueryParser.g:1233:11: ( LPAREN p_FTSelection RPAREN )
                    {
                    root_0 = (XQDTCommonTree)adaptor.nil();

                    // XQueryParser.g:1233:11: ( LPAREN p_FTSelection RPAREN )
                    // XQueryParser.g:1233:12: LPAREN p_FTSelection RPAREN
                    {
                    LPAREN558=(CommonToken)match(input,LPAREN,FOLLOW_LPAREN_in_p_FTPrimary10318); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    LPAREN558_tree = (XQDTCommonTree)adaptor.create(LPAREN558);
                    adaptor.addChild(root_0, LPAREN558_tree);
                    }
                    pushFollow(FOLLOW_p_FTSelection_in_p_FTPrimary10320);
                    p_FTSelection559=p_FTSelection();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, p_FTSelection559.getTree());
                    RPAREN560=(CommonToken)match(input,RPAREN,FOLLOW_RPAREN_in_p_FTPrimary10322); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    RPAREN560_tree = (XQDTCommonTree)adaptor.create(RPAREN560);
                    adaptor.addChild(root_0, RPAREN560_tree);
                    }

                    }


                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (XQDTCommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (XQDTCommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "p_FTPrimary"

    public static class p_FTWords_return extends ParserRuleReturnScope {
        XQDTCommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "p_FTWords"
    // XQueryParser.g:1239:1: p_FTWords : p_FTWordsValue ( p_FTAnyallOption )? ;
    public final XQueryParser.p_FTWords_return p_FTWords() throws RecognitionException {
        XQueryParser.p_FTWords_return retval = new XQueryParser.p_FTWords_return();
        retval.start = input.LT(1);

        XQDTCommonTree root_0 = null;

        XQueryParser.p_FTWordsValue_return p_FTWordsValue561 = null;

        XQueryParser.p_FTAnyallOption_return p_FTAnyallOption562 = null;



        try {
            // XQueryParser.g:1240:9: ( p_FTWordsValue ( p_FTAnyallOption )? )
            // XQueryParser.g:1240:11: p_FTWordsValue ( p_FTAnyallOption )?
            {
            root_0 = (XQDTCommonTree)adaptor.nil();

            pushFollow(FOLLOW_p_FTWordsValue_in_p_FTWords10351);
            p_FTWordsValue561=p_FTWordsValue();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, p_FTWordsValue561.getTree());
            // XQueryParser.g:1240:26: ( p_FTAnyallOption )?
            int alt187=2;
            int LA187_0 = input.LA(1);

            if ( ((LA187_0>=ALL && LA187_0<=ANY)||LA187_0==PHRASE) ) {
                alt187=1;
            }
            switch (alt187) {
                case 1 :
                    // XQueryParser.g:1240:26: p_FTAnyallOption
                    {
                    pushFollow(FOLLOW_p_FTAnyallOption_in_p_FTWords10353);
                    p_FTAnyallOption562=p_FTAnyallOption();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, p_FTAnyallOption562.getTree());

                    }
                    break;

            }


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (XQDTCommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (XQDTCommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "p_FTWords"

    public static class p_FTWordsValue_return extends ParserRuleReturnScope {
        XQDTCommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "p_FTWordsValue"
    // XQueryParser.g:1244:1: p_FTWordsValue : ( p_StringLiteral | ( LBRACKET pm_Expr RBRACKET ) );
    public final XQueryParser.p_FTWordsValue_return p_FTWordsValue() throws RecognitionException {
        XQueryParser.p_FTWordsValue_return retval = new XQueryParser.p_FTWordsValue_return();
        retval.start = input.LT(1);

        XQDTCommonTree root_0 = null;

        CommonToken LBRACKET564=null;
        CommonToken RBRACKET566=null;
        XQueryParser.p_StringLiteral_return p_StringLiteral563 = null;

        XQueryParser.pm_Expr_return pm_Expr565 = null;


        XQDTCommonTree LBRACKET564_tree=null;
        XQDTCommonTree RBRACKET566_tree=null;

        try {
            // XQueryParser.g:1245:9: ( p_StringLiteral | ( LBRACKET pm_Expr RBRACKET ) )
            int alt188=2;
            int LA188_0 = input.LA(1);

            if ( ((LA188_0>=APOS && LA188_0<=QUOT)) ) {
                alt188=1;
            }
            else if ( (LA188_0==LBRACKET) ) {
                alt188=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 188, 0, input);

                throw nvae;
            }
            switch (alt188) {
                case 1 :
                    // XQueryParser.g:1245:11: p_StringLiteral
                    {
                    root_0 = (XQDTCommonTree)adaptor.nil();

                    pushFollow(FOLLOW_p_StringLiteral_in_p_FTWordsValue10380);
                    p_StringLiteral563=p_StringLiteral();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, p_StringLiteral563.getTree());

                    }
                    break;
                case 2 :
                    // XQueryParser.g:1246:11: ( LBRACKET pm_Expr RBRACKET )
                    {
                    root_0 = (XQDTCommonTree)adaptor.nil();

                    // XQueryParser.g:1246:11: ( LBRACKET pm_Expr RBRACKET )
                    // XQueryParser.g:1246:12: LBRACKET pm_Expr RBRACKET
                    {
                    LBRACKET564=(CommonToken)match(input,LBRACKET,FOLLOW_LBRACKET_in_p_FTWordsValue10393); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    LBRACKET564_tree = (XQDTCommonTree)adaptor.create(LBRACKET564);
                    adaptor.addChild(root_0, LBRACKET564_tree);
                    }
                    pushFollow(FOLLOW_pm_Expr_in_p_FTWordsValue10395);
                    pm_Expr565=pm_Expr();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, pm_Expr565.getTree());
                    RBRACKET566=(CommonToken)match(input,RBRACKET,FOLLOW_RBRACKET_in_p_FTWordsValue10397); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    RBRACKET566_tree = (XQDTCommonTree)adaptor.create(RBRACKET566);
                    adaptor.addChild(root_0, RBRACKET566_tree);
                    }

                    }


                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (XQDTCommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (XQDTCommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "p_FTWordsValue"

    public static class p_FTAnyallOption_return extends ParserRuleReturnScope {
        XQDTCommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "p_FTAnyallOption"
    // XQueryParser.g:1260:1: p_FTAnyallOption : ( (k+= ANY (k+= WORD )? ) | (k+= ALL ( WORDS )? ) | k+= PHRASE ) ;
    public final XQueryParser.p_FTAnyallOption_return p_FTAnyallOption() throws RecognitionException {
        XQueryParser.p_FTAnyallOption_return retval = new XQueryParser.p_FTAnyallOption_return();
        retval.start = input.LT(1);

        XQDTCommonTree root_0 = null;

        CommonToken WORDS567=null;
        CommonToken k=null;
        List list_k=null;

        XQDTCommonTree WORDS567_tree=null;
        XQDTCommonTree k_tree=null;

        try {
            // XQueryParser.g:1261:9: ( ( (k+= ANY (k+= WORD )? ) | (k+= ALL ( WORDS )? ) | k+= PHRASE ) )
            // XQueryParser.g:1261:11: ( (k+= ANY (k+= WORD )? ) | (k+= ALL ( WORDS )? ) | k+= PHRASE )
            {
            root_0 = (XQDTCommonTree)adaptor.nil();

            // XQueryParser.g:1261:11: ( (k+= ANY (k+= WORD )? ) | (k+= ALL ( WORDS )? ) | k+= PHRASE )
            int alt191=3;
            switch ( input.LA(1) ) {
            case ANY:
                {
                alt191=1;
                }
                break;
            case ALL:
                {
                alt191=2;
                }
                break;
            case PHRASE:
                {
                alt191=3;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 191, 0, input);

                throw nvae;
            }

            switch (alt191) {
                case 1 :
                    // XQueryParser.g:1261:13: (k+= ANY (k+= WORD )? )
                    {
                    // XQueryParser.g:1261:13: (k+= ANY (k+= WORD )? )
                    // XQueryParser.g:1261:14: k+= ANY (k+= WORD )?
                    {
                    k=(CommonToken)match(input,ANY,FOLLOW_ANY_in_p_FTAnyallOption10439); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    k_tree = (XQDTCommonTree)adaptor.create(k);
                    adaptor.addChild(root_0, k_tree);
                    }
                    if (list_k==null) list_k=new ArrayList();
                    list_k.add(k);

                    // XQueryParser.g:1261:22: (k+= WORD )?
                    int alt189=2;
                    int LA189_0 = input.LA(1);

                    if ( (LA189_0==WORD) ) {
                        alt189=1;
                    }
                    switch (alt189) {
                        case 1 :
                            // XQueryParser.g:1261:22: k+= WORD
                            {
                            k=(CommonToken)match(input,WORD,FOLLOW_WORD_in_p_FTAnyallOption10443); if (state.failed) return retval;
                            if ( state.backtracking==0 ) {
                            k_tree = (XQDTCommonTree)adaptor.create(k);
                            adaptor.addChild(root_0, k_tree);
                            }
                            if (list_k==null) list_k=new ArrayList();
                            list_k.add(k);


                            }
                            break;

                    }


                    }


                    }
                    break;
                case 2 :
                    // XQueryParser.g:1261:33: (k+= ALL ( WORDS )? )
                    {
                    // XQueryParser.g:1261:33: (k+= ALL ( WORDS )? )
                    // XQueryParser.g:1261:34: k+= ALL ( WORDS )?
                    {
                    k=(CommonToken)match(input,ALL,FOLLOW_ALL_in_p_FTAnyallOption10452); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    k_tree = (XQDTCommonTree)adaptor.create(k);
                    adaptor.addChild(root_0, k_tree);
                    }
                    if (list_k==null) list_k=new ArrayList();
                    list_k.add(k);

                    // XQueryParser.g:1261:41: ( WORDS )?
                    int alt190=2;
                    int LA190_0 = input.LA(1);

                    if ( (LA190_0==WORDS) ) {
                        alt190=1;
                    }
                    switch (alt190) {
                        case 1 :
                            // XQueryParser.g:1261:41: WORDS
                            {
                            WORDS567=(CommonToken)match(input,WORDS,FOLLOW_WORDS_in_p_FTAnyallOption10454); if (state.failed) return retval;
                            if ( state.backtracking==0 ) {
                            WORDS567_tree = (XQDTCommonTree)adaptor.create(WORDS567);
                            adaptor.addChild(root_0, WORDS567_tree);
                            }

                            }
                            break;

                    }


                    }


                    }
                    break;
                case 3 :
                    // XQueryParser.g:1261:51: k+= PHRASE
                    {
                    k=(CommonToken)match(input,PHRASE,FOLLOW_PHRASE_in_p_FTAnyallOption10462); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    k_tree = (XQDTCommonTree)adaptor.create(k);
                    adaptor.addChild(root_0, k_tree);
                    }
                    if (list_k==null) list_k=new ArrayList();
                    list_k.add(k);


                    }
                    break;

            }

            if ( state.backtracking==0 ) {
              ak(list_k);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (XQDTCommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (XQDTCommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "p_FTAnyallOption"

    public static class p_FTTimes_return extends ParserRuleReturnScope {
        XQDTCommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "p_FTTimes"
    // XQueryParser.g:1265:1: p_FTTimes : k+= OCCURS p_FTRange k+= TIMES ;
    public final XQueryParser.p_FTTimes_return p_FTTimes() throws RecognitionException {
        XQueryParser.p_FTTimes_return retval = new XQueryParser.p_FTTimes_return();
        retval.start = input.LT(1);

        XQDTCommonTree root_0 = null;

        CommonToken k=null;
        List list_k=null;
        XQueryParser.p_FTRange_return p_FTRange568 = null;


        XQDTCommonTree k_tree=null;

        try {
            // XQueryParser.g:1266:9: (k+= OCCURS p_FTRange k+= TIMES )
            // XQueryParser.g:1266:11: k+= OCCURS p_FTRange k+= TIMES
            {
            root_0 = (XQDTCommonTree)adaptor.nil();

            k=(CommonToken)match(input,OCCURS,FOLLOW_OCCURS_in_p_FTTimes10494); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            k_tree = (XQDTCommonTree)adaptor.create(k);
            adaptor.addChild(root_0, k_tree);
            }
            if (list_k==null) list_k=new ArrayList();
            list_k.add(k);

            pushFollow(FOLLOW_p_FTRange_in_p_FTTimes10496);
            p_FTRange568=p_FTRange();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, p_FTRange568.getTree());
            k=(CommonToken)match(input,TIMES,FOLLOW_TIMES_in_p_FTTimes10500); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            k_tree = (XQDTCommonTree)adaptor.create(k);
            adaptor.addChild(root_0, k_tree);
            }
            if (list_k==null) list_k=new ArrayList();
            list_k.add(k);

            if ( state.backtracking==0 ) {
              ak(list_k);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (XQDTCommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (XQDTCommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "p_FTTimes"

    public static class p_FTRange_return extends ParserRuleReturnScope {
        XQDTCommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "p_FTRange"
    // XQueryParser.g:1270:1: p_FTRange : ( (k+= EXACTLY p_AdditiveExpr ) | (k+= AT k+= LEAST p_AdditiveExpr ) | (k+= AT k+= MOST p_AdditiveExpr ) | (k+= FROM p_AdditiveExpr k+= TO p_AdditiveExpr ) ) ;
    public final XQueryParser.p_FTRange_return p_FTRange() throws RecognitionException {
        XQueryParser.p_FTRange_return retval = new XQueryParser.p_FTRange_return();
        retval.start = input.LT(1);

        XQDTCommonTree root_0 = null;

        CommonToken k=null;
        List list_k=null;
        XQueryParser.p_AdditiveExpr_return p_AdditiveExpr569 = null;

        XQueryParser.p_AdditiveExpr_return p_AdditiveExpr570 = null;

        XQueryParser.p_AdditiveExpr_return p_AdditiveExpr571 = null;

        XQueryParser.p_AdditiveExpr_return p_AdditiveExpr572 = null;

        XQueryParser.p_AdditiveExpr_return p_AdditiveExpr573 = null;


        XQDTCommonTree k_tree=null;

        try {
            // XQueryParser.g:1271:9: ( ( (k+= EXACTLY p_AdditiveExpr ) | (k+= AT k+= LEAST p_AdditiveExpr ) | (k+= AT k+= MOST p_AdditiveExpr ) | (k+= FROM p_AdditiveExpr k+= TO p_AdditiveExpr ) ) )
            // XQueryParser.g:1271:11: ( (k+= EXACTLY p_AdditiveExpr ) | (k+= AT k+= LEAST p_AdditiveExpr ) | (k+= AT k+= MOST p_AdditiveExpr ) | (k+= FROM p_AdditiveExpr k+= TO p_AdditiveExpr ) )
            {
            root_0 = (XQDTCommonTree)adaptor.nil();

            // XQueryParser.g:1271:11: ( (k+= EXACTLY p_AdditiveExpr ) | (k+= AT k+= LEAST p_AdditiveExpr ) | (k+= AT k+= MOST p_AdditiveExpr ) | (k+= FROM p_AdditiveExpr k+= TO p_AdditiveExpr ) )
            int alt192=4;
            switch ( input.LA(1) ) {
            case EXACTLY:
                {
                alt192=1;
                }
                break;
            case AT:
                {
                int LA192_2 = input.LA(2);

                if ( (LA192_2==LEAST) ) {
                    alt192=2;
                }
                else if ( (LA192_2==MOST) ) {
                    alt192=3;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 192, 2, input);

                    throw nvae;
                }
                }
                break;
            case FROM:
                {
                alt192=4;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 192, 0, input);

                throw nvae;
            }

            switch (alt192) {
                case 1 :
                    // XQueryParser.g:1271:13: (k+= EXACTLY p_AdditiveExpr )
                    {
                    // XQueryParser.g:1271:13: (k+= EXACTLY p_AdditiveExpr )
                    // XQueryParser.g:1271:14: k+= EXACTLY p_AdditiveExpr
                    {
                    k=(CommonToken)match(input,EXACTLY,FOLLOW_EXACTLY_in_p_FTRange10533); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    k_tree = (XQDTCommonTree)adaptor.create(k);
                    adaptor.addChild(root_0, k_tree);
                    }
                    if (list_k==null) list_k=new ArrayList();
                    list_k.add(k);

                    pushFollow(FOLLOW_p_AdditiveExpr_in_p_FTRange10535);
                    p_AdditiveExpr569=p_AdditiveExpr();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, p_AdditiveExpr569.getTree());

                    }


                    }
                    break;
                case 2 :
                    // XQueryParser.g:1272:13: (k+= AT k+= LEAST p_AdditiveExpr )
                    {
                    // XQueryParser.g:1272:13: (k+= AT k+= LEAST p_AdditiveExpr )
                    // XQueryParser.g:1272:14: k+= AT k+= LEAST p_AdditiveExpr
                    {
                    k=(CommonToken)match(input,AT,FOLLOW_AT_in_p_FTRange10553); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    k_tree = (XQDTCommonTree)adaptor.create(k);
                    adaptor.addChild(root_0, k_tree);
                    }
                    if (list_k==null) list_k=new ArrayList();
                    list_k.add(k);

                    k=(CommonToken)match(input,LEAST,FOLLOW_LEAST_in_p_FTRange10557); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    k_tree = (XQDTCommonTree)adaptor.create(k);
                    adaptor.addChild(root_0, k_tree);
                    }
                    if (list_k==null) list_k=new ArrayList();
                    list_k.add(k);

                    pushFollow(FOLLOW_p_AdditiveExpr_in_p_FTRange10559);
                    p_AdditiveExpr570=p_AdditiveExpr();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, p_AdditiveExpr570.getTree());

                    }


                    }
                    break;
                case 3 :
                    // XQueryParser.g:1273:13: (k+= AT k+= MOST p_AdditiveExpr )
                    {
                    // XQueryParser.g:1273:13: (k+= AT k+= MOST p_AdditiveExpr )
                    // XQueryParser.g:1273:14: k+= AT k+= MOST p_AdditiveExpr
                    {
                    k=(CommonToken)match(input,AT,FOLLOW_AT_in_p_FTRange10577); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    k_tree = (XQDTCommonTree)adaptor.create(k);
                    adaptor.addChild(root_0, k_tree);
                    }
                    if (list_k==null) list_k=new ArrayList();
                    list_k.add(k);

                    k=(CommonToken)match(input,MOST,FOLLOW_MOST_in_p_FTRange10581); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    k_tree = (XQDTCommonTree)adaptor.create(k);
                    adaptor.addChild(root_0, k_tree);
                    }
                    if (list_k==null) list_k=new ArrayList();
                    list_k.add(k);

                    pushFollow(FOLLOW_p_AdditiveExpr_in_p_FTRange10583);
                    p_AdditiveExpr571=p_AdditiveExpr();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, p_AdditiveExpr571.getTree());

                    }


                    }
                    break;
                case 4 :
                    // XQueryParser.g:1274:13: (k+= FROM p_AdditiveExpr k+= TO p_AdditiveExpr )
                    {
                    // XQueryParser.g:1274:13: (k+= FROM p_AdditiveExpr k+= TO p_AdditiveExpr )
                    // XQueryParser.g:1274:14: k+= FROM p_AdditiveExpr k+= TO p_AdditiveExpr
                    {
                    k=(CommonToken)match(input,FROM,FOLLOW_FROM_in_p_FTRange10601); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    k_tree = (XQDTCommonTree)adaptor.create(k);
                    adaptor.addChild(root_0, k_tree);
                    }
                    if (list_k==null) list_k=new ArrayList();
                    list_k.add(k);

                    pushFollow(FOLLOW_p_AdditiveExpr_in_p_FTRange10603);
                    p_AdditiveExpr572=p_AdditiveExpr();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, p_AdditiveExpr572.getTree());
                    k=(CommonToken)match(input,TO,FOLLOW_TO_in_p_FTRange10607); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    k_tree = (XQDTCommonTree)adaptor.create(k);
                    adaptor.addChild(root_0, k_tree);
                    }
                    if (list_k==null) list_k=new ArrayList();
                    list_k.add(k);

                    pushFollow(FOLLOW_p_AdditiveExpr_in_p_FTRange10609);
                    p_AdditiveExpr573=p_AdditiveExpr();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, p_AdditiveExpr573.getTree());

                    }


                    }
                    break;

            }

            if ( state.backtracking==0 ) {
              ak(list_k);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (XQDTCommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (XQDTCommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "p_FTRange"

    public static class p_FTPosFilter_return extends ParserRuleReturnScope {
        XQDTCommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "p_FTPosFilter"
    // XQueryParser.g:1278:1: p_FTPosFilter : ( p_FTOrder | p_FTWindow | p_FTDistance | p_FTScope | p_FTContent );
    public final XQueryParser.p_FTPosFilter_return p_FTPosFilter() throws RecognitionException {
        XQueryParser.p_FTPosFilter_return retval = new XQueryParser.p_FTPosFilter_return();
        retval.start = input.LT(1);

        XQDTCommonTree root_0 = null;

        XQueryParser.p_FTOrder_return p_FTOrder574 = null;

        XQueryParser.p_FTWindow_return p_FTWindow575 = null;

        XQueryParser.p_FTDistance_return p_FTDistance576 = null;

        XQueryParser.p_FTScope_return p_FTScope577 = null;

        XQueryParser.p_FTContent_return p_FTContent578 = null;



        try {
            // XQueryParser.g:1279:9: ( p_FTOrder | p_FTWindow | p_FTDistance | p_FTScope | p_FTContent )
            int alt193=5;
            switch ( input.LA(1) ) {
            case ORDERED:
                {
                alt193=1;
                }
                break;
            case WINDOW:
                {
                alt193=2;
                }
                break;
            case DISTANCE:
                {
                alt193=3;
                }
                break;
            case DIFFERENT:
            case SAME:
                {
                alt193=4;
                }
                break;
            case AT:
            case ENTIRE:
                {
                alt193=5;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 193, 0, input);

                throw nvae;
            }

            switch (alt193) {
                case 1 :
                    // XQueryParser.g:1279:11: p_FTOrder
                    {
                    root_0 = (XQDTCommonTree)adaptor.nil();

                    pushFollow(FOLLOW_p_FTOrder_in_p_FTPosFilter10640);
                    p_FTOrder574=p_FTOrder();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, p_FTOrder574.getTree());

                    }
                    break;
                case 2 :
                    // XQueryParser.g:1279:23: p_FTWindow
                    {
                    root_0 = (XQDTCommonTree)adaptor.nil();

                    pushFollow(FOLLOW_p_FTWindow_in_p_FTPosFilter10644);
                    p_FTWindow575=p_FTWindow();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, p_FTWindow575.getTree());

                    }
                    break;
                case 3 :
                    // XQueryParser.g:1279:36: p_FTDistance
                    {
                    root_0 = (XQDTCommonTree)adaptor.nil();

                    pushFollow(FOLLOW_p_FTDistance_in_p_FTPosFilter10648);
                    p_FTDistance576=p_FTDistance();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, p_FTDistance576.getTree());

                    }
                    break;
                case 4 :
                    // XQueryParser.g:1279:51: p_FTScope
                    {
                    root_0 = (XQDTCommonTree)adaptor.nil();

                    pushFollow(FOLLOW_p_FTScope_in_p_FTPosFilter10652);
                    p_FTScope577=p_FTScope();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, p_FTScope577.getTree());

                    }
                    break;
                case 5 :
                    // XQueryParser.g:1279:63: p_FTContent
                    {
                    root_0 = (XQDTCommonTree)adaptor.nil();

                    pushFollow(FOLLOW_p_FTContent_in_p_FTPosFilter10656);
                    p_FTContent578=p_FTContent();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, p_FTContent578.getTree());

                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (XQDTCommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (XQDTCommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "p_FTPosFilter"

    public static class p_FTOrder_return extends ParserRuleReturnScope {
        XQDTCommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "p_FTOrder"
    // XQueryParser.g:1283:1: p_FTOrder : ko= ORDERED ;
    public final XQueryParser.p_FTOrder_return p_FTOrder() throws RecognitionException {
        XQueryParser.p_FTOrder_return retval = new XQueryParser.p_FTOrder_return();
        retval.start = input.LT(1);

        XQDTCommonTree root_0 = null;

        CommonToken ko=null;

        XQDTCommonTree ko_tree=null;

        try {
            // XQueryParser.g:1284:9: (ko= ORDERED )
            // XQueryParser.g:1284:11: ko= ORDERED
            {
            root_0 = (XQDTCommonTree)adaptor.nil();

            ko=(CommonToken)match(input,ORDERED,FOLLOW_ORDERED_in_p_FTOrder10684); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            ko_tree = (XQDTCommonTree)adaptor.create(ko);
            adaptor.addChild(root_0, ko_tree);
            }
            if ( state.backtracking==0 ) {
              ak(ko);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (XQDTCommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (XQDTCommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "p_FTOrder"

    public static class p_FTWindow_return extends ParserRuleReturnScope {
        XQDTCommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "p_FTWindow"
    // XQueryParser.g:1288:1: p_FTWindow : kw= WINDOW p_AdditiveExpr p_FTUnit ;
    public final XQueryParser.p_FTWindow_return p_FTWindow() throws RecognitionException {
        XQueryParser.p_FTWindow_return retval = new XQueryParser.p_FTWindow_return();
        retval.start = input.LT(1);

        XQDTCommonTree root_0 = null;

        CommonToken kw=null;
        XQueryParser.p_AdditiveExpr_return p_AdditiveExpr579 = null;

        XQueryParser.p_FTUnit_return p_FTUnit580 = null;


        XQDTCommonTree kw_tree=null;

        try {
            // XQueryParser.g:1289:9: (kw= WINDOW p_AdditiveExpr p_FTUnit )
            // XQueryParser.g:1289:11: kw= WINDOW p_AdditiveExpr p_FTUnit
            {
            root_0 = (XQDTCommonTree)adaptor.nil();

            kw=(CommonToken)match(input,WINDOW,FOLLOW_WINDOW_in_p_FTWindow10714); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            kw_tree = (XQDTCommonTree)adaptor.create(kw);
            adaptor.addChild(root_0, kw_tree);
            }
            if ( state.backtracking==0 ) {
              ak(kw);
            }
            pushFollow(FOLLOW_p_AdditiveExpr_in_p_FTWindow10718);
            p_AdditiveExpr579=p_AdditiveExpr();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, p_AdditiveExpr579.getTree());
            pushFollow(FOLLOW_p_FTUnit_in_p_FTWindow10720);
            p_FTUnit580=p_FTUnit();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, p_FTUnit580.getTree());

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (XQDTCommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (XQDTCommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "p_FTWindow"

    public static class p_FTDistance_return extends ParserRuleReturnScope {
        XQDTCommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "p_FTDistance"
    // XQueryParser.g:1293:1: p_FTDistance : kd= DISTANCE p_FTRange p_FTUnit ;
    public final XQueryParser.p_FTDistance_return p_FTDistance() throws RecognitionException {
        XQueryParser.p_FTDistance_return retval = new XQueryParser.p_FTDistance_return();
        retval.start = input.LT(1);

        XQDTCommonTree root_0 = null;

        CommonToken kd=null;
        XQueryParser.p_FTRange_return p_FTRange581 = null;

        XQueryParser.p_FTUnit_return p_FTUnit582 = null;


        XQDTCommonTree kd_tree=null;

        try {
            // XQueryParser.g:1294:9: (kd= DISTANCE p_FTRange p_FTUnit )
            // XQueryParser.g:1294:11: kd= DISTANCE p_FTRange p_FTUnit
            {
            root_0 = (XQDTCommonTree)adaptor.nil();

            kd=(CommonToken)match(input,DISTANCE,FOLLOW_DISTANCE_in_p_FTDistance10748); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            kd_tree = (XQDTCommonTree)adaptor.create(kd);
            adaptor.addChild(root_0, kd_tree);
            }
            if ( state.backtracking==0 ) {
              ak(kd);
            }
            pushFollow(FOLLOW_p_FTRange_in_p_FTDistance10752);
            p_FTRange581=p_FTRange();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, p_FTRange581.getTree());
            pushFollow(FOLLOW_p_FTUnit_in_p_FTDistance10754);
            p_FTUnit582=p_FTUnit();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, p_FTUnit582.getTree());

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (XQDTCommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (XQDTCommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "p_FTDistance"

    public static class p_FTUnit_return extends ParserRuleReturnScope {
        XQDTCommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "p_FTUnit"
    // XQueryParser.g:1298:1: p_FTUnit : (k+= WORDS | k+= SENTENCES | k+= PARAGRAPHS ) ;
    public final XQueryParser.p_FTUnit_return p_FTUnit() throws RecognitionException {
        XQueryParser.p_FTUnit_return retval = new XQueryParser.p_FTUnit_return();
        retval.start = input.LT(1);

        XQDTCommonTree root_0 = null;

        CommonToken k=null;
        List list_k=null;

        XQDTCommonTree k_tree=null;

        try {
            // XQueryParser.g:1299:9: ( (k+= WORDS | k+= SENTENCES | k+= PARAGRAPHS ) )
            // XQueryParser.g:1299:11: (k+= WORDS | k+= SENTENCES | k+= PARAGRAPHS )
            {
            root_0 = (XQDTCommonTree)adaptor.nil();

            // XQueryParser.g:1299:11: (k+= WORDS | k+= SENTENCES | k+= PARAGRAPHS )
            int alt194=3;
            switch ( input.LA(1) ) {
            case WORDS:
                {
                alt194=1;
                }
                break;
            case SENTENCES:
                {
                alt194=2;
                }
                break;
            case PARAGRAPHS:
                {
                alt194=3;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 194, 0, input);

                throw nvae;
            }

            switch (alt194) {
                case 1 :
                    // XQueryParser.g:1299:13: k+= WORDS
                    {
                    k=(CommonToken)match(input,WORDS,FOLLOW_WORDS_in_p_FTUnit10784); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    k_tree = (XQDTCommonTree)adaptor.create(k);
                    adaptor.addChild(root_0, k_tree);
                    }
                    if (list_k==null) list_k=new ArrayList();
                    list_k.add(k);


                    }
                    break;
                case 2 :
                    // XQueryParser.g:1299:24: k+= SENTENCES
                    {
                    k=(CommonToken)match(input,SENTENCES,FOLLOW_SENTENCES_in_p_FTUnit10790); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    k_tree = (XQDTCommonTree)adaptor.create(k);
                    adaptor.addChild(root_0, k_tree);
                    }
                    if (list_k==null) list_k=new ArrayList();
                    list_k.add(k);


                    }
                    break;
                case 3 :
                    // XQueryParser.g:1299:39: k+= PARAGRAPHS
                    {
                    k=(CommonToken)match(input,PARAGRAPHS,FOLLOW_PARAGRAPHS_in_p_FTUnit10796); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    k_tree = (XQDTCommonTree)adaptor.create(k);
                    adaptor.addChild(root_0, k_tree);
                    }
                    if (list_k==null) list_k=new ArrayList();
                    list_k.add(k);


                    }
                    break;

            }

            if ( state.backtracking==0 ) {
              ak(list_k);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (XQDTCommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (XQDTCommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "p_FTUnit"

    public static class p_FTScope_return extends ParserRuleReturnScope {
        XQDTCommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "p_FTScope"
    // XQueryParser.g:1303:1: p_FTScope : (k+= SAME | k+= DIFFERENT ) p_FTBigUnit ;
    public final XQueryParser.p_FTScope_return p_FTScope() throws RecognitionException {
        XQueryParser.p_FTScope_return retval = new XQueryParser.p_FTScope_return();
        retval.start = input.LT(1);

        XQDTCommonTree root_0 = null;

        CommonToken k=null;
        List list_k=null;
        XQueryParser.p_FTBigUnit_return p_FTBigUnit583 = null;


        XQDTCommonTree k_tree=null;

        try {
            // XQueryParser.g:1304:9: ( (k+= SAME | k+= DIFFERENT ) p_FTBigUnit )
            // XQueryParser.g:1304:11: (k+= SAME | k+= DIFFERENT ) p_FTBigUnit
            {
            root_0 = (XQDTCommonTree)adaptor.nil();

            // XQueryParser.g:1304:11: (k+= SAME | k+= DIFFERENT )
            int alt195=2;
            int LA195_0 = input.LA(1);

            if ( (LA195_0==SAME) ) {
                alt195=1;
            }
            else if ( (LA195_0==DIFFERENT) ) {
                alt195=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 195, 0, input);

                throw nvae;
            }
            switch (alt195) {
                case 1 :
                    // XQueryParser.g:1304:12: k+= SAME
                    {
                    k=(CommonToken)match(input,SAME,FOLLOW_SAME_in_p_FTScope10829); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    k_tree = (XQDTCommonTree)adaptor.create(k);
                    adaptor.addChild(root_0, k_tree);
                    }
                    if (list_k==null) list_k=new ArrayList();
                    list_k.add(k);


                    }
                    break;
                case 2 :
                    // XQueryParser.g:1304:22: k+= DIFFERENT
                    {
                    k=(CommonToken)match(input,DIFFERENT,FOLLOW_DIFFERENT_in_p_FTScope10835); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    k_tree = (XQDTCommonTree)adaptor.create(k);
                    adaptor.addChild(root_0, k_tree);
                    }
                    if (list_k==null) list_k=new ArrayList();
                    list_k.add(k);


                    }
                    break;

            }

            if ( state.backtracking==0 ) {
              ak(list_k);
            }
            pushFollow(FOLLOW_p_FTBigUnit_in_p_FTScope10840);
            p_FTBigUnit583=p_FTBigUnit();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, p_FTBigUnit583.getTree());

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (XQDTCommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (XQDTCommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "p_FTScope"

    public static class p_FTBigUnit_return extends ParserRuleReturnScope {
        XQDTCommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "p_FTBigUnit"
    // XQueryParser.g:1308:1: p_FTBigUnit : (k+= SENTENCE | k+= PARAGRAPH ) ;
    public final XQueryParser.p_FTBigUnit_return p_FTBigUnit() throws RecognitionException {
        XQueryParser.p_FTBigUnit_return retval = new XQueryParser.p_FTBigUnit_return();
        retval.start = input.LT(1);

        XQDTCommonTree root_0 = null;

        CommonToken k=null;
        List list_k=null;

        XQDTCommonTree k_tree=null;

        try {
            // XQueryParser.g:1309:9: ( (k+= SENTENCE | k+= PARAGRAPH ) )
            // XQueryParser.g:1309:11: (k+= SENTENCE | k+= PARAGRAPH )
            {
            root_0 = (XQDTCommonTree)adaptor.nil();

            // XQueryParser.g:1309:11: (k+= SENTENCE | k+= PARAGRAPH )
            int alt196=2;
            int LA196_0 = input.LA(1);

            if ( (LA196_0==SENTENCE) ) {
                alt196=1;
            }
            else if ( (LA196_0==PARAGRAPH) ) {
                alt196=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 196, 0, input);

                throw nvae;
            }
            switch (alt196) {
                case 1 :
                    // XQueryParser.g:1309:13: k+= SENTENCE
                    {
                    k=(CommonToken)match(input,SENTENCE,FOLLOW_SENTENCE_in_p_FTBigUnit10870); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    k_tree = (XQDTCommonTree)adaptor.create(k);
                    adaptor.addChild(root_0, k_tree);
                    }
                    if (list_k==null) list_k=new ArrayList();
                    list_k.add(k);


                    }
                    break;
                case 2 :
                    // XQueryParser.g:1309:27: k+= PARAGRAPH
                    {
                    k=(CommonToken)match(input,PARAGRAPH,FOLLOW_PARAGRAPH_in_p_FTBigUnit10876); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    k_tree = (XQDTCommonTree)adaptor.create(k);
                    adaptor.addChild(root_0, k_tree);
                    }
                    if (list_k==null) list_k=new ArrayList();
                    list_k.add(k);


                    }
                    break;

            }

            if ( state.backtracking==0 ) {
              ak(list_k);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (XQDTCommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (XQDTCommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "p_FTBigUnit"

    public static class p_FTContent_return extends ParserRuleReturnScope {
        XQDTCommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "p_FTContent"
    // XQueryParser.g:1313:1: p_FTContent : ( (k+= AT k+= START ) | (k+= AT k+= END ) | (k+= ENTIRE k+= CONTENT ) ) ;
    public final XQueryParser.p_FTContent_return p_FTContent() throws RecognitionException {
        XQueryParser.p_FTContent_return retval = new XQueryParser.p_FTContent_return();
        retval.start = input.LT(1);

        XQDTCommonTree root_0 = null;

        CommonToken k=null;
        List list_k=null;

        XQDTCommonTree k_tree=null;

        try {
            // XQueryParser.g:1314:9: ( ( (k+= AT k+= START ) | (k+= AT k+= END ) | (k+= ENTIRE k+= CONTENT ) ) )
            // XQueryParser.g:1314:11: ( (k+= AT k+= START ) | (k+= AT k+= END ) | (k+= ENTIRE k+= CONTENT ) )
            {
            root_0 = (XQDTCommonTree)adaptor.nil();

            // XQueryParser.g:1314:11: ( (k+= AT k+= START ) | (k+= AT k+= END ) | (k+= ENTIRE k+= CONTENT ) )
            int alt197=3;
            int LA197_0 = input.LA(1);

            if ( (LA197_0==AT) ) {
                int LA197_1 = input.LA(2);

                if ( (LA197_1==START) ) {
                    alt197=1;
                }
                else if ( (LA197_1==END) ) {
                    alt197=2;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 197, 1, input);

                    throw nvae;
                }
            }
            else if ( (LA197_0==ENTIRE) ) {
                alt197=3;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 197, 0, input);

                throw nvae;
            }
            switch (alt197) {
                case 1 :
                    // XQueryParser.g:1314:13: (k+= AT k+= START )
                    {
                    // XQueryParser.g:1314:13: (k+= AT k+= START )
                    // XQueryParser.g:1314:14: k+= AT k+= START
                    {
                    k=(CommonToken)match(input,AT,FOLLOW_AT_in_p_FTContent10911); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    k_tree = (XQDTCommonTree)adaptor.create(k);
                    adaptor.addChild(root_0, k_tree);
                    }
                    if (list_k==null) list_k=new ArrayList();
                    list_k.add(k);

                    k=(CommonToken)match(input,START,FOLLOW_START_in_p_FTContent10915); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    k_tree = (XQDTCommonTree)adaptor.create(k);
                    adaptor.addChild(root_0, k_tree);
                    }
                    if (list_k==null) list_k=new ArrayList();
                    list_k.add(k);


                    }


                    }
                    break;
                case 2 :
                    // XQueryParser.g:1314:32: (k+= AT k+= END )
                    {
                    // XQueryParser.g:1314:32: (k+= AT k+= END )
                    // XQueryParser.g:1314:33: k+= AT k+= END
                    {
                    k=(CommonToken)match(input,AT,FOLLOW_AT_in_p_FTContent10923); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    k_tree = (XQDTCommonTree)adaptor.create(k);
                    adaptor.addChild(root_0, k_tree);
                    }
                    if (list_k==null) list_k=new ArrayList();
                    list_k.add(k);

                    k=(CommonToken)match(input,END,FOLLOW_END_in_p_FTContent10927); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    k_tree = (XQDTCommonTree)adaptor.create(k);
                    adaptor.addChild(root_0, k_tree);
                    }
                    if (list_k==null) list_k=new ArrayList();
                    list_k.add(k);


                    }


                    }
                    break;
                case 3 :
                    // XQueryParser.g:1314:49: (k+= ENTIRE k+= CONTENT )
                    {
                    // XQueryParser.g:1314:49: (k+= ENTIRE k+= CONTENT )
                    // XQueryParser.g:1314:50: k+= ENTIRE k+= CONTENT
                    {
                    k=(CommonToken)match(input,ENTIRE,FOLLOW_ENTIRE_in_p_FTContent10935); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    k_tree = (XQDTCommonTree)adaptor.create(k);
                    adaptor.addChild(root_0, k_tree);
                    }
                    if (list_k==null) list_k=new ArrayList();
                    list_k.add(k);

                    k=(CommonToken)match(input,CONTENT,FOLLOW_CONTENT_in_p_FTContent10939); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    k_tree = (XQDTCommonTree)adaptor.create(k);
                    adaptor.addChild(root_0, k_tree);
                    }
                    if (list_k==null) list_k=new ArrayList();
                    list_k.add(k);


                    }


                    }
                    break;

            }

            if ( state.backtracking==0 ) {
              ak(list_k);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (XQDTCommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (XQDTCommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "p_FTContent"

    public static class p_FTMatchOptions_return extends ParserRuleReturnScope {
        XQDTCommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "p_FTMatchOptions"
    // XQueryParser.g:1318:1: p_FTMatchOptions : (ku= USING p_FTMatchOption )+ ;
    public final XQueryParser.p_FTMatchOptions_return p_FTMatchOptions() throws RecognitionException {
        XQueryParser.p_FTMatchOptions_return retval = new XQueryParser.p_FTMatchOptions_return();
        retval.start = input.LT(1);

        XQDTCommonTree root_0 = null;

        CommonToken ku=null;
        XQueryParser.p_FTMatchOption_return p_FTMatchOption584 = null;


        XQDTCommonTree ku_tree=null;

        try {
            // XQueryParser.g:1319:9: ( (ku= USING p_FTMatchOption )+ )
            // XQueryParser.g:1319:11: (ku= USING p_FTMatchOption )+
            {
            root_0 = (XQDTCommonTree)adaptor.nil();

            // XQueryParser.g:1319:11: (ku= USING p_FTMatchOption )+
            int cnt198=0;
            loop198:
            do {
                int alt198=2;
                int LA198_0 = input.LA(1);

                if ( (LA198_0==USING) ) {
                    alt198=1;
                }


                switch (alt198) {
            	case 1 :
            	    // XQueryParser.g:1319:12: ku= USING p_FTMatchOption
            	    {
            	    ku=(CommonToken)match(input,USING,FOLLOW_USING_in_p_FTMatchOptions10973); if (state.failed) return retval;
            	    if ( state.backtracking==0 ) {
            	    ku_tree = (XQDTCommonTree)adaptor.create(ku);
            	    adaptor.addChild(root_0, ku_tree);
            	    }
            	    if ( state.backtracking==0 ) {
            	      ak(ku);
            	    }
            	    pushFollow(FOLLOW_p_FTMatchOption_in_p_FTMatchOptions10977);
            	    p_FTMatchOption584=p_FTMatchOption();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, p_FTMatchOption584.getTree());

            	    }
            	    break;

            	default :
            	    if ( cnt198 >= 1 ) break loop198;
            	    if (state.backtracking>0) {state.failed=true; return retval;}
                        EarlyExitException eee =
                            new EarlyExitException(198, input);
                        throw eee;
                }
                cnt198++;
            } while (true);


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (XQDTCommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (XQDTCommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "p_FTMatchOptions"

    public static class p_FTMatchOption_return extends ParserRuleReturnScope {
        XQDTCommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "p_FTMatchOption"
    // XQueryParser.g:1323:1: p_FTMatchOption : ( p_FTLanguageOption | p_FTWildCardOption | p_FTThesaurusOption | p_FTStemOption | p_FTCaseOption | p_FTDiacriticsOption | p_FTStopWordOption | p_FTExtensionOption );
    public final XQueryParser.p_FTMatchOption_return p_FTMatchOption() throws RecognitionException {
        XQueryParser.p_FTMatchOption_return retval = new XQueryParser.p_FTMatchOption_return();
        retval.start = input.LT(1);

        XQDTCommonTree root_0 = null;

        XQueryParser.p_FTLanguageOption_return p_FTLanguageOption585 = null;

        XQueryParser.p_FTWildCardOption_return p_FTWildCardOption586 = null;

        XQueryParser.p_FTThesaurusOption_return p_FTThesaurusOption587 = null;

        XQueryParser.p_FTStemOption_return p_FTStemOption588 = null;

        XQueryParser.p_FTCaseOption_return p_FTCaseOption589 = null;

        XQueryParser.p_FTDiacriticsOption_return p_FTDiacriticsOption590 = null;

        XQueryParser.p_FTStopWordOption_return p_FTStopWordOption591 = null;

        XQueryParser.p_FTExtensionOption_return p_FTExtensionOption592 = null;



        try {
            // XQueryParser.g:1324:9: ( p_FTLanguageOption | p_FTWildCardOption | p_FTThesaurusOption | p_FTStemOption | p_FTCaseOption | p_FTDiacriticsOption | p_FTStopWordOption | p_FTExtensionOption )
            int alt199=8;
            alt199 = dfa199.predict(input);
            switch (alt199) {
                case 1 :
                    // XQueryParser.g:1324:11: p_FTLanguageOption
                    {
                    root_0 = (XQDTCommonTree)adaptor.nil();

                    pushFollow(FOLLOW_p_FTLanguageOption_in_p_FTMatchOption11005);
                    p_FTLanguageOption585=p_FTLanguageOption();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, p_FTLanguageOption585.getTree());

                    }
                    break;
                case 2 :
                    // XQueryParser.g:1325:11: p_FTWildCardOption
                    {
                    root_0 = (XQDTCommonTree)adaptor.nil();

                    pushFollow(FOLLOW_p_FTWildCardOption_in_p_FTMatchOption11017);
                    p_FTWildCardOption586=p_FTWildCardOption();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, p_FTWildCardOption586.getTree());

                    }
                    break;
                case 3 :
                    // XQueryParser.g:1326:11: p_FTThesaurusOption
                    {
                    root_0 = (XQDTCommonTree)adaptor.nil();

                    pushFollow(FOLLOW_p_FTThesaurusOption_in_p_FTMatchOption11029);
                    p_FTThesaurusOption587=p_FTThesaurusOption();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, p_FTThesaurusOption587.getTree());

                    }
                    break;
                case 4 :
                    // XQueryParser.g:1327:11: p_FTStemOption
                    {
                    root_0 = (XQDTCommonTree)adaptor.nil();

                    pushFollow(FOLLOW_p_FTStemOption_in_p_FTMatchOption11041);
                    p_FTStemOption588=p_FTStemOption();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, p_FTStemOption588.getTree());

                    }
                    break;
                case 5 :
                    // XQueryParser.g:1328:11: p_FTCaseOption
                    {
                    root_0 = (XQDTCommonTree)adaptor.nil();

                    pushFollow(FOLLOW_p_FTCaseOption_in_p_FTMatchOption11053);
                    p_FTCaseOption589=p_FTCaseOption();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, p_FTCaseOption589.getTree());

                    }
                    break;
                case 6 :
                    // XQueryParser.g:1329:11: p_FTDiacriticsOption
                    {
                    root_0 = (XQDTCommonTree)adaptor.nil();

                    pushFollow(FOLLOW_p_FTDiacriticsOption_in_p_FTMatchOption11065);
                    p_FTDiacriticsOption590=p_FTDiacriticsOption();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, p_FTDiacriticsOption590.getTree());

                    }
                    break;
                case 7 :
                    // XQueryParser.g:1330:11: p_FTStopWordOption
                    {
                    root_0 = (XQDTCommonTree)adaptor.nil();

                    pushFollow(FOLLOW_p_FTStopWordOption_in_p_FTMatchOption11077);
                    p_FTStopWordOption591=p_FTStopWordOption();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, p_FTStopWordOption591.getTree());

                    }
                    break;
                case 8 :
                    // XQueryParser.g:1331:11: p_FTExtensionOption
                    {
                    root_0 = (XQDTCommonTree)adaptor.nil();

                    pushFollow(FOLLOW_p_FTExtensionOption_in_p_FTMatchOption11089);
                    p_FTExtensionOption592=p_FTExtensionOption();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, p_FTExtensionOption592.getTree());

                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (XQDTCommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (XQDTCommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "p_FTMatchOption"

    public static class p_FTCaseOption_return extends ParserRuleReturnScope {
        XQDTCommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "p_FTCaseOption"
    // XQueryParser.g:1335:1: p_FTCaseOption : ( (k+= CASE k+= INSENSITIVE ) | (k+= CASE k+= SENSITIVE ) | k+= LOWERCASE | k+= UPPERCASE ) ;
    public final XQueryParser.p_FTCaseOption_return p_FTCaseOption() throws RecognitionException {
        XQueryParser.p_FTCaseOption_return retval = new XQueryParser.p_FTCaseOption_return();
        retval.start = input.LT(1);

        XQDTCommonTree root_0 = null;

        CommonToken k=null;
        List list_k=null;

        XQDTCommonTree k_tree=null;

        try {
            // XQueryParser.g:1336:9: ( ( (k+= CASE k+= INSENSITIVE ) | (k+= CASE k+= SENSITIVE ) | k+= LOWERCASE | k+= UPPERCASE ) )
            // XQueryParser.g:1336:11: ( (k+= CASE k+= INSENSITIVE ) | (k+= CASE k+= SENSITIVE ) | k+= LOWERCASE | k+= UPPERCASE )
            {
            root_0 = (XQDTCommonTree)adaptor.nil();

            // XQueryParser.g:1336:11: ( (k+= CASE k+= INSENSITIVE ) | (k+= CASE k+= SENSITIVE ) | k+= LOWERCASE | k+= UPPERCASE )
            int alt200=4;
            switch ( input.LA(1) ) {
            case CASE:
                {
                int LA200_1 = input.LA(2);

                if ( (LA200_1==INSENSITIVE) ) {
                    alt200=1;
                }
                else if ( (LA200_1==SENSITIVE) ) {
                    alt200=2;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 200, 1, input);

                    throw nvae;
                }
                }
                break;
            case LOWERCASE:
                {
                alt200=3;
                }
                break;
            case UPPERCASE:
                {
                alt200=4;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 200, 0, input);

                throw nvae;
            }

            switch (alt200) {
                case 1 :
                    // XQueryParser.g:1336:13: (k+= CASE k+= INSENSITIVE )
                    {
                    // XQueryParser.g:1336:13: (k+= CASE k+= INSENSITIVE )
                    // XQueryParser.g:1336:14: k+= CASE k+= INSENSITIVE
                    {
                    k=(CommonToken)match(input,CASE,FOLLOW_CASE_in_p_FTCaseOption11120); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    k_tree = (XQDTCommonTree)adaptor.create(k);
                    adaptor.addChild(root_0, k_tree);
                    }
                    if (list_k==null) list_k=new ArrayList();
                    list_k.add(k);

                    k=(CommonToken)match(input,INSENSITIVE,FOLLOW_INSENSITIVE_in_p_FTCaseOption11124); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    k_tree = (XQDTCommonTree)adaptor.create(k);
                    adaptor.addChild(root_0, k_tree);
                    }
                    if (list_k==null) list_k=new ArrayList();
                    list_k.add(k);


                    }


                    }
                    break;
                case 2 :
                    // XQueryParser.g:1337:13: (k+= CASE k+= SENSITIVE )
                    {
                    // XQueryParser.g:1337:13: (k+= CASE k+= SENSITIVE )
                    // XQueryParser.g:1337:14: k+= CASE k+= SENSITIVE
                    {
                    k=(CommonToken)match(input,CASE,FOLLOW_CASE_in_p_FTCaseOption11142); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    k_tree = (XQDTCommonTree)adaptor.create(k);
                    adaptor.addChild(root_0, k_tree);
                    }
                    if (list_k==null) list_k=new ArrayList();
                    list_k.add(k);

                    k=(CommonToken)match(input,SENSITIVE,FOLLOW_SENSITIVE_in_p_FTCaseOption11146); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    k_tree = (XQDTCommonTree)adaptor.create(k);
                    adaptor.addChild(root_0, k_tree);
                    }
                    if (list_k==null) list_k=new ArrayList();
                    list_k.add(k);


                    }


                    }
                    break;
                case 3 :
                    // XQueryParser.g:1338:13: k+= LOWERCASE
                    {
                    k=(CommonToken)match(input,LOWERCASE,FOLLOW_LOWERCASE_in_p_FTCaseOption11163); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    k_tree = (XQDTCommonTree)adaptor.create(k);
                    adaptor.addChild(root_0, k_tree);
                    }
                    if (list_k==null) list_k=new ArrayList();
                    list_k.add(k);


                    }
                    break;
                case 4 :
                    // XQueryParser.g:1339:13: k+= UPPERCASE
                    {
                    k=(CommonToken)match(input,UPPERCASE,FOLLOW_UPPERCASE_in_p_FTCaseOption11179); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    k_tree = (XQDTCommonTree)adaptor.create(k);
                    adaptor.addChild(root_0, k_tree);
                    }
                    if (list_k==null) list_k=new ArrayList();
                    list_k.add(k);


                    }
                    break;

            }

            if ( state.backtracking==0 ) {
              ak(list_k);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (XQDTCommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (XQDTCommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "p_FTCaseOption"

    public static class p_FTDiacriticsOption_return extends ParserRuleReturnScope {
        XQDTCommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "p_FTDiacriticsOption"
    // XQueryParser.g:1343:1: p_FTDiacriticsOption : ( (k+= DIACRITICS k+= INSENSITIVE ) | (k+= DIACRITICS k+= SENSITIVE ) ) ;
    public final XQueryParser.p_FTDiacriticsOption_return p_FTDiacriticsOption() throws RecognitionException {
        XQueryParser.p_FTDiacriticsOption_return retval = new XQueryParser.p_FTDiacriticsOption_return();
        retval.start = input.LT(1);

        XQDTCommonTree root_0 = null;

        CommonToken k=null;
        List list_k=null;

        XQDTCommonTree k_tree=null;

        try {
            // XQueryParser.g:1344:9: ( ( (k+= DIACRITICS k+= INSENSITIVE ) | (k+= DIACRITICS k+= SENSITIVE ) ) )
            // XQueryParser.g:1344:11: ( (k+= DIACRITICS k+= INSENSITIVE ) | (k+= DIACRITICS k+= SENSITIVE ) )
            {
            root_0 = (XQDTCommonTree)adaptor.nil();

            // XQueryParser.g:1344:11: ( (k+= DIACRITICS k+= INSENSITIVE ) | (k+= DIACRITICS k+= SENSITIVE ) )
            int alt201=2;
            int LA201_0 = input.LA(1);

            if ( (LA201_0==DIACRITICS) ) {
                int LA201_1 = input.LA(2);

                if ( (LA201_1==INSENSITIVE) ) {
                    alt201=1;
                }
                else if ( (LA201_1==SENSITIVE) ) {
                    alt201=2;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 201, 1, input);

                    throw nvae;
                }
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 201, 0, input);

                throw nvae;
            }
            switch (alt201) {
                case 1 :
                    // XQueryParser.g:1344:13: (k+= DIACRITICS k+= INSENSITIVE )
                    {
                    // XQueryParser.g:1344:13: (k+= DIACRITICS k+= INSENSITIVE )
                    // XQueryParser.g:1344:14: k+= DIACRITICS k+= INSENSITIVE
                    {
                    k=(CommonToken)match(input,DIACRITICS,FOLLOW_DIACRITICS_in_p_FTDiacriticsOption11214); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    k_tree = (XQDTCommonTree)adaptor.create(k);
                    adaptor.addChild(root_0, k_tree);
                    }
                    if (list_k==null) list_k=new ArrayList();
                    list_k.add(k);

                    k=(CommonToken)match(input,INSENSITIVE,FOLLOW_INSENSITIVE_in_p_FTDiacriticsOption11218); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    k_tree = (XQDTCommonTree)adaptor.create(k);
                    adaptor.addChild(root_0, k_tree);
                    }
                    if (list_k==null) list_k=new ArrayList();
                    list_k.add(k);


                    }


                    }
                    break;
                case 2 :
                    // XQueryParser.g:1345:13: (k+= DIACRITICS k+= SENSITIVE )
                    {
                    // XQueryParser.g:1345:13: (k+= DIACRITICS k+= SENSITIVE )
                    // XQueryParser.g:1345:14: k+= DIACRITICS k+= SENSITIVE
                    {
                    k=(CommonToken)match(input,DIACRITICS,FOLLOW_DIACRITICS_in_p_FTDiacriticsOption11236); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    k_tree = (XQDTCommonTree)adaptor.create(k);
                    adaptor.addChild(root_0, k_tree);
                    }
                    if (list_k==null) list_k=new ArrayList();
                    list_k.add(k);

                    k=(CommonToken)match(input,SENSITIVE,FOLLOW_SENSITIVE_in_p_FTDiacriticsOption11240); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    k_tree = (XQDTCommonTree)adaptor.create(k);
                    adaptor.addChild(root_0, k_tree);
                    }
                    if (list_k==null) list_k=new ArrayList();
                    list_k.add(k);


                    }


                    }
                    break;

            }

            if ( state.backtracking==0 ) {
              ak(list_k);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (XQDTCommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (XQDTCommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "p_FTDiacriticsOption"

    public static class p_FTStemOption_return extends ParserRuleReturnScope {
        XQDTCommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "p_FTStemOption"
    // XQueryParser.g:1349:1: p_FTStemOption : (k+= STEMMING | (k+= NO k+= STEMMING ) ) ;
    public final XQueryParser.p_FTStemOption_return p_FTStemOption() throws RecognitionException {
        XQueryParser.p_FTStemOption_return retval = new XQueryParser.p_FTStemOption_return();
        retval.start = input.LT(1);

        XQDTCommonTree root_0 = null;

        CommonToken k=null;
        List list_k=null;

        XQDTCommonTree k_tree=null;

        try {
            // XQueryParser.g:1350:9: ( (k+= STEMMING | (k+= NO k+= STEMMING ) ) )
            // XQueryParser.g:1350:11: (k+= STEMMING | (k+= NO k+= STEMMING ) )
            {
            root_0 = (XQDTCommonTree)adaptor.nil();

            // XQueryParser.g:1350:11: (k+= STEMMING | (k+= NO k+= STEMMING ) )
            int alt202=2;
            int LA202_0 = input.LA(1);

            if ( (LA202_0==STEMMING) ) {
                alt202=1;
            }
            else if ( (LA202_0==NO) ) {
                alt202=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 202, 0, input);

                throw nvae;
            }
            switch (alt202) {
                case 1 :
                    // XQueryParser.g:1350:13: k+= STEMMING
                    {
                    k=(CommonToken)match(input,STEMMING,FOLLOW_STEMMING_in_p_FTStemOption11275); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    k_tree = (XQDTCommonTree)adaptor.create(k);
                    adaptor.addChild(root_0, k_tree);
                    }
                    if (list_k==null) list_k=new ArrayList();
                    list_k.add(k);


                    }
                    break;
                case 2 :
                    // XQueryParser.g:1350:27: (k+= NO k+= STEMMING )
                    {
                    // XQueryParser.g:1350:27: (k+= NO k+= STEMMING )
                    // XQueryParser.g:1350:28: k+= NO k+= STEMMING
                    {
                    k=(CommonToken)match(input,NO,FOLLOW_NO_in_p_FTStemOption11282); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    k_tree = (XQDTCommonTree)adaptor.create(k);
                    adaptor.addChild(root_0, k_tree);
                    }
                    if (list_k==null) list_k=new ArrayList();
                    list_k.add(k);

                    k=(CommonToken)match(input,STEMMING,FOLLOW_STEMMING_in_p_FTStemOption11286); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    k_tree = (XQDTCommonTree)adaptor.create(k);
                    adaptor.addChild(root_0, k_tree);
                    }
                    if (list_k==null) list_k=new ArrayList();
                    list_k.add(k);


                    }


                    }
                    break;

            }

            if ( state.backtracking==0 ) {
              ak(list_k);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (XQDTCommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (XQDTCommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "p_FTStemOption"

    public static class p_FTThesaurusOption_return extends ParserRuleReturnScope {
        XQDTCommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "p_FTThesaurusOption"
    // XQueryParser.g:1354:1: p_FTThesaurusOption : ( (k+= THESAURUS ( p_FTThesaurusID | k+= DEFAULT ) ) | (k+= THESAURUS LPAREN ( p_FTThesaurusID | k+= DEFAULT ) ( COMMA p_FTThesaurusID )* RPAREN ) | (k+= NO k+= THESAURUS ) ) ;
    public final XQueryParser.p_FTThesaurusOption_return p_FTThesaurusOption() throws RecognitionException {
        XQueryParser.p_FTThesaurusOption_return retval = new XQueryParser.p_FTThesaurusOption_return();
        retval.start = input.LT(1);

        XQDTCommonTree root_0 = null;

        CommonToken LPAREN594=null;
        CommonToken COMMA596=null;
        CommonToken RPAREN598=null;
        CommonToken k=null;
        List list_k=null;
        XQueryParser.p_FTThesaurusID_return p_FTThesaurusID593 = null;

        XQueryParser.p_FTThesaurusID_return p_FTThesaurusID595 = null;

        XQueryParser.p_FTThesaurusID_return p_FTThesaurusID597 = null;


        XQDTCommonTree LPAREN594_tree=null;
        XQDTCommonTree COMMA596_tree=null;
        XQDTCommonTree RPAREN598_tree=null;
        XQDTCommonTree k_tree=null;

        try {
            // XQueryParser.g:1355:9: ( ( (k+= THESAURUS ( p_FTThesaurusID | k+= DEFAULT ) ) | (k+= THESAURUS LPAREN ( p_FTThesaurusID | k+= DEFAULT ) ( COMMA p_FTThesaurusID )* RPAREN ) | (k+= NO k+= THESAURUS ) ) )
            // XQueryParser.g:1355:11: ( (k+= THESAURUS ( p_FTThesaurusID | k+= DEFAULT ) ) | (k+= THESAURUS LPAREN ( p_FTThesaurusID | k+= DEFAULT ) ( COMMA p_FTThesaurusID )* RPAREN ) | (k+= NO k+= THESAURUS ) )
            {
            root_0 = (XQDTCommonTree)adaptor.nil();

            // XQueryParser.g:1355:11: ( (k+= THESAURUS ( p_FTThesaurusID | k+= DEFAULT ) ) | (k+= THESAURUS LPAREN ( p_FTThesaurusID | k+= DEFAULT ) ( COMMA p_FTThesaurusID )* RPAREN ) | (k+= NO k+= THESAURUS ) )
            int alt206=3;
            int LA206_0 = input.LA(1);

            if ( (LA206_0==THESAURUS) ) {
                int LA206_1 = input.LA(2);

                if ( (LA206_1==LPAREN) ) {
                    alt206=2;
                }
                else if ( (LA206_1==AT||LA206_1==DEFAULT) ) {
                    alt206=1;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 206, 1, input);

                    throw nvae;
                }
            }
            else if ( (LA206_0==NO) ) {
                alt206=3;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 206, 0, input);

                throw nvae;
            }
            switch (alt206) {
                case 1 :
                    // XQueryParser.g:1355:13: (k+= THESAURUS ( p_FTThesaurusID | k+= DEFAULT ) )
                    {
                    // XQueryParser.g:1355:13: (k+= THESAURUS ( p_FTThesaurusID | k+= DEFAULT ) )
                    // XQueryParser.g:1355:14: k+= THESAURUS ( p_FTThesaurusID | k+= DEFAULT )
                    {
                    k=(CommonToken)match(input,THESAURUS,FOLLOW_THESAURUS_in_p_FTThesaurusOption11322); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    k_tree = (XQDTCommonTree)adaptor.create(k);
                    adaptor.addChild(root_0, k_tree);
                    }
                    if (list_k==null) list_k=new ArrayList();
                    list_k.add(k);

                    // XQueryParser.g:1355:27: ( p_FTThesaurusID | k+= DEFAULT )
                    int alt203=2;
                    int LA203_0 = input.LA(1);

                    if ( (LA203_0==AT) ) {
                        alt203=1;
                    }
                    else if ( (LA203_0==DEFAULT) ) {
                        alt203=2;
                    }
                    else {
                        if (state.backtracking>0) {state.failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("", 203, 0, input);

                        throw nvae;
                    }
                    switch (alt203) {
                        case 1 :
                            // XQueryParser.g:1355:28: p_FTThesaurusID
                            {
                            pushFollow(FOLLOW_p_FTThesaurusID_in_p_FTThesaurusOption11325);
                            p_FTThesaurusID593=p_FTThesaurusID();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) adaptor.addChild(root_0, p_FTThesaurusID593.getTree());

                            }
                            break;
                        case 2 :
                            // XQueryParser.g:1355:46: k+= DEFAULT
                            {
                            k=(CommonToken)match(input,DEFAULT,FOLLOW_DEFAULT_in_p_FTThesaurusOption11331); if (state.failed) return retval;
                            if ( state.backtracking==0 ) {
                            k_tree = (XQDTCommonTree)adaptor.create(k);
                            adaptor.addChild(root_0, k_tree);
                            }
                            if (list_k==null) list_k=new ArrayList();
                            list_k.add(k);


                            }
                            break;

                    }


                    }


                    }
                    break;
                case 2 :
                    // XQueryParser.g:1356:13: (k+= THESAURUS LPAREN ( p_FTThesaurusID | k+= DEFAULT ) ( COMMA p_FTThesaurusID )* RPAREN )
                    {
                    // XQueryParser.g:1356:13: (k+= THESAURUS LPAREN ( p_FTThesaurusID | k+= DEFAULT ) ( COMMA p_FTThesaurusID )* RPAREN )
                    // XQueryParser.g:1356:14: k+= THESAURUS LPAREN ( p_FTThesaurusID | k+= DEFAULT ) ( COMMA p_FTThesaurusID )* RPAREN
                    {
                    k=(CommonToken)match(input,THESAURUS,FOLLOW_THESAURUS_in_p_FTThesaurusOption11350); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    k_tree = (XQDTCommonTree)adaptor.create(k);
                    adaptor.addChild(root_0, k_tree);
                    }
                    if (list_k==null) list_k=new ArrayList();
                    list_k.add(k);

                    LPAREN594=(CommonToken)match(input,LPAREN,FOLLOW_LPAREN_in_p_FTThesaurusOption11352); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    LPAREN594_tree = (XQDTCommonTree)adaptor.create(LPAREN594);
                    adaptor.addChild(root_0, LPAREN594_tree);
                    }
                    // XQueryParser.g:1356:34: ( p_FTThesaurusID | k+= DEFAULT )
                    int alt204=2;
                    int LA204_0 = input.LA(1);

                    if ( (LA204_0==AT) ) {
                        alt204=1;
                    }
                    else if ( (LA204_0==DEFAULT) ) {
                        alt204=2;
                    }
                    else {
                        if (state.backtracking>0) {state.failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("", 204, 0, input);

                        throw nvae;
                    }
                    switch (alt204) {
                        case 1 :
                            // XQueryParser.g:1356:35: p_FTThesaurusID
                            {
                            pushFollow(FOLLOW_p_FTThesaurusID_in_p_FTThesaurusOption11355);
                            p_FTThesaurusID595=p_FTThesaurusID();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) adaptor.addChild(root_0, p_FTThesaurusID595.getTree());

                            }
                            break;
                        case 2 :
                            // XQueryParser.g:1356:53: k+= DEFAULT
                            {
                            k=(CommonToken)match(input,DEFAULT,FOLLOW_DEFAULT_in_p_FTThesaurusOption11361); if (state.failed) return retval;
                            if ( state.backtracking==0 ) {
                            k_tree = (XQDTCommonTree)adaptor.create(k);
                            adaptor.addChild(root_0, k_tree);
                            }
                            if (list_k==null) list_k=new ArrayList();
                            list_k.add(k);


                            }
                            break;

                    }

                    // XQueryParser.g:1356:65: ( COMMA p_FTThesaurusID )*
                    loop205:
                    do {
                        int alt205=2;
                        int LA205_0 = input.LA(1);

                        if ( (LA205_0==COMMA) ) {
                            alt205=1;
                        }


                        switch (alt205) {
                    	case 1 :
                    	    // XQueryParser.g:1356:66: COMMA p_FTThesaurusID
                    	    {
                    	    COMMA596=(CommonToken)match(input,COMMA,FOLLOW_COMMA_in_p_FTThesaurusOption11365); if (state.failed) return retval;
                    	    if ( state.backtracking==0 ) {
                    	    COMMA596_tree = (XQDTCommonTree)adaptor.create(COMMA596);
                    	    adaptor.addChild(root_0, COMMA596_tree);
                    	    }
                    	    pushFollow(FOLLOW_p_FTThesaurusID_in_p_FTThesaurusOption11367);
                    	    p_FTThesaurusID597=p_FTThesaurusID();

                    	    state._fsp--;
                    	    if (state.failed) return retval;
                    	    if ( state.backtracking==0 ) adaptor.addChild(root_0, p_FTThesaurusID597.getTree());

                    	    }
                    	    break;

                    	default :
                    	    break loop205;
                        }
                    } while (true);

                    RPAREN598=(CommonToken)match(input,RPAREN,FOLLOW_RPAREN_in_p_FTThesaurusOption11371); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    RPAREN598_tree = (XQDTCommonTree)adaptor.create(RPAREN598);
                    adaptor.addChild(root_0, RPAREN598_tree);
                    }

                    }


                    }
                    break;
                case 3 :
                    // XQueryParser.g:1357:13: (k+= NO k+= THESAURUS )
                    {
                    // XQueryParser.g:1357:13: (k+= NO k+= THESAURUS )
                    // XQueryParser.g:1357:14: k+= NO k+= THESAURUS
                    {
                    k=(CommonToken)match(input,NO,FOLLOW_NO_in_p_FTThesaurusOption11389); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    k_tree = (XQDTCommonTree)adaptor.create(k);
                    adaptor.addChild(root_0, k_tree);
                    }
                    if (list_k==null) list_k=new ArrayList();
                    list_k.add(k);

                    k=(CommonToken)match(input,THESAURUS,FOLLOW_THESAURUS_in_p_FTThesaurusOption11393); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    k_tree = (XQDTCommonTree)adaptor.create(k);
                    adaptor.addChild(root_0, k_tree);
                    }
                    if (list_k==null) list_k=new ArrayList();
                    list_k.add(k);


                    }


                    }
                    break;

            }

            if ( state.backtracking==0 ) {
              ak(list_k);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (XQDTCommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (XQDTCommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "p_FTThesaurusOption"

    public static class p_FTThesaurusID_return extends ParserRuleReturnScope {
        XQDTCommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "p_FTThesaurusID"
    // XQueryParser.g:1361:1: p_FTThesaurusID : k+= AT p_StringLiteral (k+= RELATIONSHIP p_StringLiteral )? ( p_FTLiteralRange k+= LEVELS )? ;
    public final XQueryParser.p_FTThesaurusID_return p_FTThesaurusID() throws RecognitionException {
        XQueryParser.p_FTThesaurusID_return retval = new XQueryParser.p_FTThesaurusID_return();
        retval.start = input.LT(1);

        XQDTCommonTree root_0 = null;

        CommonToken k=null;
        List list_k=null;
        XQueryParser.p_StringLiteral_return p_StringLiteral599 = null;

        XQueryParser.p_StringLiteral_return p_StringLiteral600 = null;

        XQueryParser.p_FTLiteralRange_return p_FTLiteralRange601 = null;


        XQDTCommonTree k_tree=null;

        try {
            // XQueryParser.g:1362:9: (k+= AT p_StringLiteral (k+= RELATIONSHIP p_StringLiteral )? ( p_FTLiteralRange k+= LEVELS )? )
            // XQueryParser.g:1362:11: k+= AT p_StringLiteral (k+= RELATIONSHIP p_StringLiteral )? ( p_FTLiteralRange k+= LEVELS )?
            {
            root_0 = (XQDTCommonTree)adaptor.nil();

            k=(CommonToken)match(input,AT,FOLLOW_AT_in_p_FTThesaurusID11426); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            k_tree = (XQDTCommonTree)adaptor.create(k);
            adaptor.addChild(root_0, k_tree);
            }
            if (list_k==null) list_k=new ArrayList();
            list_k.add(k);

            pushFollow(FOLLOW_p_StringLiteral_in_p_FTThesaurusID11428);
            p_StringLiteral599=p_StringLiteral();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, p_StringLiteral599.getTree());
            // XQueryParser.g:1362:33: (k+= RELATIONSHIP p_StringLiteral )?
            int alt207=2;
            int LA207_0 = input.LA(1);

            if ( (LA207_0==RELATIONSHIP) ) {
                alt207=1;
            }
            switch (alt207) {
                case 1 :
                    // XQueryParser.g:1362:34: k+= RELATIONSHIP p_StringLiteral
                    {
                    k=(CommonToken)match(input,RELATIONSHIP,FOLLOW_RELATIONSHIP_in_p_FTThesaurusID11433); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    k_tree = (XQDTCommonTree)adaptor.create(k);
                    adaptor.addChild(root_0, k_tree);
                    }
                    if (list_k==null) list_k=new ArrayList();
                    list_k.add(k);

                    pushFollow(FOLLOW_p_StringLiteral_in_p_FTThesaurusID11435);
                    p_StringLiteral600=p_StringLiteral();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, p_StringLiteral600.getTree());

                    }
                    break;

            }

            // XQueryParser.g:1362:68: ( p_FTLiteralRange k+= LEVELS )?
            int alt208=2;
            int LA208_0 = input.LA(1);

            if ( ((LA208_0>=EXACTLY && LA208_0<=FROM)) ) {
                alt208=1;
            }
            else if ( (LA208_0==AT) ) {
                int LA208_2 = input.LA(2);

                if ( (LA208_2==LEAST||LA208_2==MOST) ) {
                    alt208=1;
                }
            }
            switch (alt208) {
                case 1 :
                    // XQueryParser.g:1362:69: p_FTLiteralRange k+= LEVELS
                    {
                    pushFollow(FOLLOW_p_FTLiteralRange_in_p_FTThesaurusID11440);
                    p_FTLiteralRange601=p_FTLiteralRange();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, p_FTLiteralRange601.getTree());
                    k=(CommonToken)match(input,LEVELS,FOLLOW_LEVELS_in_p_FTThesaurusID11444); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    k_tree = (XQDTCommonTree)adaptor.create(k);
                    adaptor.addChild(root_0, k_tree);
                    }
                    if (list_k==null) list_k=new ArrayList();
                    list_k.add(k);


                    }
                    break;

            }

            if ( state.backtracking==0 ) {
              ak(list_k);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (XQDTCommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (XQDTCommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "p_FTThesaurusID"

    public static class p_FTLiteralRange_return extends ParserRuleReturnScope {
        XQDTCommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "p_FTLiteralRange"
    // XQueryParser.g:1366:1: p_FTLiteralRange : ( (k+= EXACTLY L_IntegerLiteral ) | (k+= AT k+= LEAST L_IntegerLiteral ) | (k+= AT k+= MOST L_IntegerLiteral ) | (k+= FROM L_IntegerLiteral TO L_IntegerLiteral ) ) ;
    public final XQueryParser.p_FTLiteralRange_return p_FTLiteralRange() throws RecognitionException {
        XQueryParser.p_FTLiteralRange_return retval = new XQueryParser.p_FTLiteralRange_return();
        retval.start = input.LT(1);

        XQDTCommonTree root_0 = null;

        CommonToken L_IntegerLiteral602=null;
        CommonToken L_IntegerLiteral603=null;
        CommonToken L_IntegerLiteral604=null;
        CommonToken L_IntegerLiteral605=null;
        CommonToken TO606=null;
        CommonToken L_IntegerLiteral607=null;
        CommonToken k=null;
        List list_k=null;

        XQDTCommonTree L_IntegerLiteral602_tree=null;
        XQDTCommonTree L_IntegerLiteral603_tree=null;
        XQDTCommonTree L_IntegerLiteral604_tree=null;
        XQDTCommonTree L_IntegerLiteral605_tree=null;
        XQDTCommonTree TO606_tree=null;
        XQDTCommonTree L_IntegerLiteral607_tree=null;
        XQDTCommonTree k_tree=null;

        try {
            // XQueryParser.g:1367:9: ( ( (k+= EXACTLY L_IntegerLiteral ) | (k+= AT k+= LEAST L_IntegerLiteral ) | (k+= AT k+= MOST L_IntegerLiteral ) | (k+= FROM L_IntegerLiteral TO L_IntegerLiteral ) ) )
            // XQueryParser.g:1367:11: ( (k+= EXACTLY L_IntegerLiteral ) | (k+= AT k+= LEAST L_IntegerLiteral ) | (k+= AT k+= MOST L_IntegerLiteral ) | (k+= FROM L_IntegerLiteral TO L_IntegerLiteral ) )
            {
            root_0 = (XQDTCommonTree)adaptor.nil();

            // XQueryParser.g:1367:11: ( (k+= EXACTLY L_IntegerLiteral ) | (k+= AT k+= LEAST L_IntegerLiteral ) | (k+= AT k+= MOST L_IntegerLiteral ) | (k+= FROM L_IntegerLiteral TO L_IntegerLiteral ) )
            int alt209=4;
            switch ( input.LA(1) ) {
            case EXACTLY:
                {
                alt209=1;
                }
                break;
            case AT:
                {
                int LA209_2 = input.LA(2);

                if ( (LA209_2==LEAST) ) {
                    alt209=2;
                }
                else if ( (LA209_2==MOST) ) {
                    alt209=3;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 209, 2, input);

                    throw nvae;
                }
                }
                break;
            case FROM:
                {
                alt209=4;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 209, 0, input);

                throw nvae;
            }

            switch (alt209) {
                case 1 :
                    // XQueryParser.g:1367:13: (k+= EXACTLY L_IntegerLiteral )
                    {
                    // XQueryParser.g:1367:13: (k+= EXACTLY L_IntegerLiteral )
                    // XQueryParser.g:1367:14: k+= EXACTLY L_IntegerLiteral
                    {
                    k=(CommonToken)match(input,EXACTLY,FOLLOW_EXACTLY_in_p_FTLiteralRange11479); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    k_tree = (XQDTCommonTree)adaptor.create(k);
                    adaptor.addChild(root_0, k_tree);
                    }
                    if (list_k==null) list_k=new ArrayList();
                    list_k.add(k);

                    L_IntegerLiteral602=(CommonToken)match(input,L_IntegerLiteral,FOLLOW_L_IntegerLiteral_in_p_FTLiteralRange11481); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    L_IntegerLiteral602_tree = (XQDTCommonTree)adaptor.create(L_IntegerLiteral602);
                    adaptor.addChild(root_0, L_IntegerLiteral602_tree);
                    }

                    }


                    }
                    break;
                case 2 :
                    // XQueryParser.g:1368:13: (k+= AT k+= LEAST L_IntegerLiteral )
                    {
                    // XQueryParser.g:1368:13: (k+= AT k+= LEAST L_IntegerLiteral )
                    // XQueryParser.g:1368:14: k+= AT k+= LEAST L_IntegerLiteral
                    {
                    k=(CommonToken)match(input,AT,FOLLOW_AT_in_p_FTLiteralRange11499); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    k_tree = (XQDTCommonTree)adaptor.create(k);
                    adaptor.addChild(root_0, k_tree);
                    }
                    if (list_k==null) list_k=new ArrayList();
                    list_k.add(k);

                    k=(CommonToken)match(input,LEAST,FOLLOW_LEAST_in_p_FTLiteralRange11503); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    k_tree = (XQDTCommonTree)adaptor.create(k);
                    adaptor.addChild(root_0, k_tree);
                    }
                    if (list_k==null) list_k=new ArrayList();
                    list_k.add(k);

                    L_IntegerLiteral603=(CommonToken)match(input,L_IntegerLiteral,FOLLOW_L_IntegerLiteral_in_p_FTLiteralRange11505); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    L_IntegerLiteral603_tree = (XQDTCommonTree)adaptor.create(L_IntegerLiteral603);
                    adaptor.addChild(root_0, L_IntegerLiteral603_tree);
                    }

                    }


                    }
                    break;
                case 3 :
                    // XQueryParser.g:1369:13: (k+= AT k+= MOST L_IntegerLiteral )
                    {
                    // XQueryParser.g:1369:13: (k+= AT k+= MOST L_IntegerLiteral )
                    // XQueryParser.g:1369:14: k+= AT k+= MOST L_IntegerLiteral
                    {
                    k=(CommonToken)match(input,AT,FOLLOW_AT_in_p_FTLiteralRange11523); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    k_tree = (XQDTCommonTree)adaptor.create(k);
                    adaptor.addChild(root_0, k_tree);
                    }
                    if (list_k==null) list_k=new ArrayList();
                    list_k.add(k);

                    k=(CommonToken)match(input,MOST,FOLLOW_MOST_in_p_FTLiteralRange11527); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    k_tree = (XQDTCommonTree)adaptor.create(k);
                    adaptor.addChild(root_0, k_tree);
                    }
                    if (list_k==null) list_k=new ArrayList();
                    list_k.add(k);

                    L_IntegerLiteral604=(CommonToken)match(input,L_IntegerLiteral,FOLLOW_L_IntegerLiteral_in_p_FTLiteralRange11529); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    L_IntegerLiteral604_tree = (XQDTCommonTree)adaptor.create(L_IntegerLiteral604);
                    adaptor.addChild(root_0, L_IntegerLiteral604_tree);
                    }

                    }


                    }
                    break;
                case 4 :
                    // XQueryParser.g:1370:13: (k+= FROM L_IntegerLiteral TO L_IntegerLiteral )
                    {
                    // XQueryParser.g:1370:13: (k+= FROM L_IntegerLiteral TO L_IntegerLiteral )
                    // XQueryParser.g:1370:14: k+= FROM L_IntegerLiteral TO L_IntegerLiteral
                    {
                    k=(CommonToken)match(input,FROM,FOLLOW_FROM_in_p_FTLiteralRange11547); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    k_tree = (XQDTCommonTree)adaptor.create(k);
                    adaptor.addChild(root_0, k_tree);
                    }
                    if (list_k==null) list_k=new ArrayList();
                    list_k.add(k);

                    L_IntegerLiteral605=(CommonToken)match(input,L_IntegerLiteral,FOLLOW_L_IntegerLiteral_in_p_FTLiteralRange11549); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    L_IntegerLiteral605_tree = (XQDTCommonTree)adaptor.create(L_IntegerLiteral605);
                    adaptor.addChild(root_0, L_IntegerLiteral605_tree);
                    }
                    TO606=(CommonToken)match(input,TO,FOLLOW_TO_in_p_FTLiteralRange11551); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    TO606_tree = (XQDTCommonTree)adaptor.create(TO606);
                    adaptor.addChild(root_0, TO606_tree);
                    }
                    L_IntegerLiteral607=(CommonToken)match(input,L_IntegerLiteral,FOLLOW_L_IntegerLiteral_in_p_FTLiteralRange11553); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    L_IntegerLiteral607_tree = (XQDTCommonTree)adaptor.create(L_IntegerLiteral607);
                    adaptor.addChild(root_0, L_IntegerLiteral607_tree);
                    }

                    }


                    }
                    break;

            }

            if ( state.backtracking==0 ) {
              ak(list_k);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (XQDTCommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (XQDTCommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "p_FTLiteralRange"

    public static class p_FTStopWordOption_return extends ParserRuleReturnScope {
        XQDTCommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "p_FTStopWordOption"
    // XQueryParser.g:1374:1: p_FTStopWordOption : ( (k+= STOP k+= WORDS p_FTStopWords ( p_FTStopWordsInclExcl )* ) | (k+= STOP k+= WORDS k+= DEFAULT ( p_FTStopWordsInclExcl )* ) | (k+= NO k+= STOP k+= WORDS ) ) ;
    public final XQueryParser.p_FTStopWordOption_return p_FTStopWordOption() throws RecognitionException {
        XQueryParser.p_FTStopWordOption_return retval = new XQueryParser.p_FTStopWordOption_return();
        retval.start = input.LT(1);

        XQDTCommonTree root_0 = null;

        CommonToken k=null;
        List list_k=null;
        XQueryParser.p_FTStopWords_return p_FTStopWords608 = null;

        XQueryParser.p_FTStopWordsInclExcl_return p_FTStopWordsInclExcl609 = null;

        XQueryParser.p_FTStopWordsInclExcl_return p_FTStopWordsInclExcl610 = null;


        XQDTCommonTree k_tree=null;

        try {
            // XQueryParser.g:1375:9: ( ( (k+= STOP k+= WORDS p_FTStopWords ( p_FTStopWordsInclExcl )* ) | (k+= STOP k+= WORDS k+= DEFAULT ( p_FTStopWordsInclExcl )* ) | (k+= NO k+= STOP k+= WORDS ) ) )
            // XQueryParser.g:1375:11: ( (k+= STOP k+= WORDS p_FTStopWords ( p_FTStopWordsInclExcl )* ) | (k+= STOP k+= WORDS k+= DEFAULT ( p_FTStopWordsInclExcl )* ) | (k+= NO k+= STOP k+= WORDS ) )
            {
            root_0 = (XQDTCommonTree)adaptor.nil();

            // XQueryParser.g:1375:11: ( (k+= STOP k+= WORDS p_FTStopWords ( p_FTStopWordsInclExcl )* ) | (k+= STOP k+= WORDS k+= DEFAULT ( p_FTStopWordsInclExcl )* ) | (k+= NO k+= STOP k+= WORDS ) )
            int alt212=3;
            int LA212_0 = input.LA(1);

            if ( (LA212_0==STOP) ) {
                int LA212_1 = input.LA(2);

                if ( (LA212_1==WORDS) ) {
                    int LA212_3 = input.LA(3);

                    if ( (LA212_3==DEFAULT) ) {
                        alt212=2;
                    }
                    else if ( (LA212_3==AT||LA212_3==LPAREN) ) {
                        alt212=1;
                    }
                    else {
                        if (state.backtracking>0) {state.failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("", 212, 3, input);

                        throw nvae;
                    }
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 212, 1, input);

                    throw nvae;
                }
            }
            else if ( (LA212_0==NO) ) {
                alt212=3;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 212, 0, input);

                throw nvae;
            }
            switch (alt212) {
                case 1 :
                    // XQueryParser.g:1375:13: (k+= STOP k+= WORDS p_FTStopWords ( p_FTStopWordsInclExcl )* )
                    {
                    // XQueryParser.g:1375:13: (k+= STOP k+= WORDS p_FTStopWords ( p_FTStopWordsInclExcl )* )
                    // XQueryParser.g:1375:14: k+= STOP k+= WORDS p_FTStopWords ( p_FTStopWordsInclExcl )*
                    {
                    k=(CommonToken)match(input,STOP,FOLLOW_STOP_in_p_FTStopWordOption11589); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    k_tree = (XQDTCommonTree)adaptor.create(k);
                    adaptor.addChild(root_0, k_tree);
                    }
                    if (list_k==null) list_k=new ArrayList();
                    list_k.add(k);

                    k=(CommonToken)match(input,WORDS,FOLLOW_WORDS_in_p_FTStopWordOption11593); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    k_tree = (XQDTCommonTree)adaptor.create(k);
                    adaptor.addChild(root_0, k_tree);
                    }
                    if (list_k==null) list_k=new ArrayList();
                    list_k.add(k);

                    pushFollow(FOLLOW_p_FTStopWords_in_p_FTStopWordOption11595);
                    p_FTStopWords608=p_FTStopWords();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, p_FTStopWords608.getTree());
                    // XQueryParser.g:1375:45: ( p_FTStopWordsInclExcl )*
                    loop210:
                    do {
                        int alt210=2;
                        int LA210_0 = input.LA(1);

                        if ( (LA210_0==EXCEPT||LA210_0==UNION) ) {
                            alt210=1;
                        }


                        switch (alt210) {
                    	case 1 :
                    	    // XQueryParser.g:1375:45: p_FTStopWordsInclExcl
                    	    {
                    	    pushFollow(FOLLOW_p_FTStopWordsInclExcl_in_p_FTStopWordOption11597);
                    	    p_FTStopWordsInclExcl609=p_FTStopWordsInclExcl();

                    	    state._fsp--;
                    	    if (state.failed) return retval;
                    	    if ( state.backtracking==0 ) adaptor.addChild(root_0, p_FTStopWordsInclExcl609.getTree());

                    	    }
                    	    break;

                    	default :
                    	    break loop210;
                        }
                    } while (true);


                    }


                    }
                    break;
                case 2 :
                    // XQueryParser.g:1376:13: (k+= STOP k+= WORDS k+= DEFAULT ( p_FTStopWordsInclExcl )* )
                    {
                    // XQueryParser.g:1376:13: (k+= STOP k+= WORDS k+= DEFAULT ( p_FTStopWordsInclExcl )* )
                    // XQueryParser.g:1376:14: k+= STOP k+= WORDS k+= DEFAULT ( p_FTStopWordsInclExcl )*
                    {
                    k=(CommonToken)match(input,STOP,FOLLOW_STOP_in_p_FTStopWordOption11616); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    k_tree = (XQDTCommonTree)adaptor.create(k);
                    adaptor.addChild(root_0, k_tree);
                    }
                    if (list_k==null) list_k=new ArrayList();
                    list_k.add(k);

                    k=(CommonToken)match(input,WORDS,FOLLOW_WORDS_in_p_FTStopWordOption11620); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    k_tree = (XQDTCommonTree)adaptor.create(k);
                    adaptor.addChild(root_0, k_tree);
                    }
                    if (list_k==null) list_k=new ArrayList();
                    list_k.add(k);

                    k=(CommonToken)match(input,DEFAULT,FOLLOW_DEFAULT_in_p_FTStopWordOption11624); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    k_tree = (XQDTCommonTree)adaptor.create(k);
                    adaptor.addChild(root_0, k_tree);
                    }
                    if (list_k==null) list_k=new ArrayList();
                    list_k.add(k);

                    // XQueryParser.g:1376:42: ( p_FTStopWordsInclExcl )*
                    loop211:
                    do {
                        int alt211=2;
                        int LA211_0 = input.LA(1);

                        if ( (LA211_0==EXCEPT||LA211_0==UNION) ) {
                            alt211=1;
                        }


                        switch (alt211) {
                    	case 1 :
                    	    // XQueryParser.g:1376:42: p_FTStopWordsInclExcl
                    	    {
                    	    pushFollow(FOLLOW_p_FTStopWordsInclExcl_in_p_FTStopWordOption11626);
                    	    p_FTStopWordsInclExcl610=p_FTStopWordsInclExcl();

                    	    state._fsp--;
                    	    if (state.failed) return retval;
                    	    if ( state.backtracking==0 ) adaptor.addChild(root_0, p_FTStopWordsInclExcl610.getTree());

                    	    }
                    	    break;

                    	default :
                    	    break loop211;
                        }
                    } while (true);


                    }


                    }
                    break;
                case 3 :
                    // XQueryParser.g:1377:13: (k+= NO k+= STOP k+= WORDS )
                    {
                    // XQueryParser.g:1377:13: (k+= NO k+= STOP k+= WORDS )
                    // XQueryParser.g:1377:14: k+= NO k+= STOP k+= WORDS
                    {
                    k=(CommonToken)match(input,NO,FOLLOW_NO_in_p_FTStopWordOption11645); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    k_tree = (XQDTCommonTree)adaptor.create(k);
                    adaptor.addChild(root_0, k_tree);
                    }
                    if (list_k==null) list_k=new ArrayList();
                    list_k.add(k);

                    k=(CommonToken)match(input,STOP,FOLLOW_STOP_in_p_FTStopWordOption11649); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    k_tree = (XQDTCommonTree)adaptor.create(k);
                    adaptor.addChild(root_0, k_tree);
                    }
                    if (list_k==null) list_k=new ArrayList();
                    list_k.add(k);

                    k=(CommonToken)match(input,WORDS,FOLLOW_WORDS_in_p_FTStopWordOption11653); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    k_tree = (XQDTCommonTree)adaptor.create(k);
                    adaptor.addChild(root_0, k_tree);
                    }
                    if (list_k==null) list_k=new ArrayList();
                    list_k.add(k);


                    }


                    }
                    break;

            }

            if ( state.backtracking==0 ) {
              ak(list_k);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (XQDTCommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (XQDTCommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "p_FTStopWordOption"

    public static class p_FTStopWords_return extends ParserRuleReturnScope {
        XQDTCommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "p_FTStopWords"
    // XQueryParser.g:1381:1: p_FTStopWords : ( (ka= AT p_StringLiteral ) | ( LPAREN p_StringLiteral ( COMMA p_StringLiteral )* RPAREN ) );
    public final XQueryParser.p_FTStopWords_return p_FTStopWords() throws RecognitionException {
        XQueryParser.p_FTStopWords_return retval = new XQueryParser.p_FTStopWords_return();
        retval.start = input.LT(1);

        XQDTCommonTree root_0 = null;

        CommonToken ka=null;
        CommonToken LPAREN612=null;
        CommonToken COMMA614=null;
        CommonToken RPAREN616=null;
        XQueryParser.p_StringLiteral_return p_StringLiteral611 = null;

        XQueryParser.p_StringLiteral_return p_StringLiteral613 = null;

        XQueryParser.p_StringLiteral_return p_StringLiteral615 = null;


        XQDTCommonTree ka_tree=null;
        XQDTCommonTree LPAREN612_tree=null;
        XQDTCommonTree COMMA614_tree=null;
        XQDTCommonTree RPAREN616_tree=null;

        try {
            // XQueryParser.g:1382:9: ( (ka= AT p_StringLiteral ) | ( LPAREN p_StringLiteral ( COMMA p_StringLiteral )* RPAREN ) )
            int alt214=2;
            int LA214_0 = input.LA(1);

            if ( (LA214_0==AT) ) {
                alt214=1;
            }
            else if ( (LA214_0==LPAREN) ) {
                alt214=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 214, 0, input);

                throw nvae;
            }
            switch (alt214) {
                case 1 :
                    // XQueryParser.g:1382:11: (ka= AT p_StringLiteral )
                    {
                    root_0 = (XQDTCommonTree)adaptor.nil();

                    // XQueryParser.g:1382:11: (ka= AT p_StringLiteral )
                    // XQueryParser.g:1382:12: ka= AT p_StringLiteral
                    {
                    ka=(CommonToken)match(input,AT,FOLLOW_AT_in_p_FTStopWords11687); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    ka_tree = (XQDTCommonTree)adaptor.create(ka);
                    adaptor.addChild(root_0, ka_tree);
                    }
                    if ( state.backtracking==0 ) {
                      ak(ka);
                    }
                    pushFollow(FOLLOW_p_StringLiteral_in_p_FTStopWords11691);
                    p_StringLiteral611=p_StringLiteral();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, p_StringLiteral611.getTree());

                    }


                    }
                    break;
                case 2 :
                    // XQueryParser.g:1383:11: ( LPAREN p_StringLiteral ( COMMA p_StringLiteral )* RPAREN )
                    {
                    root_0 = (XQDTCommonTree)adaptor.nil();

                    // XQueryParser.g:1383:11: ( LPAREN p_StringLiteral ( COMMA p_StringLiteral )* RPAREN )
                    // XQueryParser.g:1383:12: LPAREN p_StringLiteral ( COMMA p_StringLiteral )* RPAREN
                    {
                    LPAREN612=(CommonToken)match(input,LPAREN,FOLLOW_LPAREN_in_p_FTStopWords11705); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    LPAREN612_tree = (XQDTCommonTree)adaptor.create(LPAREN612);
                    adaptor.addChild(root_0, LPAREN612_tree);
                    }
                    pushFollow(FOLLOW_p_StringLiteral_in_p_FTStopWords11707);
                    p_StringLiteral613=p_StringLiteral();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, p_StringLiteral613.getTree());
                    // XQueryParser.g:1383:35: ( COMMA p_StringLiteral )*
                    loop213:
                    do {
                        int alt213=2;
                        int LA213_0 = input.LA(1);

                        if ( (LA213_0==COMMA) ) {
                            alt213=1;
                        }


                        switch (alt213) {
                    	case 1 :
                    	    // XQueryParser.g:1383:36: COMMA p_StringLiteral
                    	    {
                    	    COMMA614=(CommonToken)match(input,COMMA,FOLLOW_COMMA_in_p_FTStopWords11710); if (state.failed) return retval;
                    	    if ( state.backtracking==0 ) {
                    	    COMMA614_tree = (XQDTCommonTree)adaptor.create(COMMA614);
                    	    adaptor.addChild(root_0, COMMA614_tree);
                    	    }
                    	    pushFollow(FOLLOW_p_StringLiteral_in_p_FTStopWords11712);
                    	    p_StringLiteral615=p_StringLiteral();

                    	    state._fsp--;
                    	    if (state.failed) return retval;
                    	    if ( state.backtracking==0 ) adaptor.addChild(root_0, p_StringLiteral615.getTree());

                    	    }
                    	    break;

                    	default :
                    	    break loop213;
                        }
                    } while (true);

                    RPAREN616=(CommonToken)match(input,RPAREN,FOLLOW_RPAREN_in_p_FTStopWords11716); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    RPAREN616_tree = (XQDTCommonTree)adaptor.create(RPAREN616);
                    adaptor.addChild(root_0, RPAREN616_tree);
                    }

                    }


                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (XQDTCommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (XQDTCommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "p_FTStopWords"

    public static class p_FTStopWordsInclExcl_return extends ParserRuleReturnScope {
        XQDTCommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "p_FTStopWordsInclExcl"
    // XQueryParser.g:1387:1: p_FTStopWordsInclExcl : ( (k+= UNION | k+= EXCEPT ) p_FTStopWords ) ;
    public final XQueryParser.p_FTStopWordsInclExcl_return p_FTStopWordsInclExcl() throws RecognitionException {
        XQueryParser.p_FTStopWordsInclExcl_return retval = new XQueryParser.p_FTStopWordsInclExcl_return();
        retval.start = input.LT(1);

        XQDTCommonTree root_0 = null;

        CommonToken k=null;
        List list_k=null;
        XQueryParser.p_FTStopWords_return p_FTStopWords617 = null;


        XQDTCommonTree k_tree=null;

        try {
            // XQueryParser.g:1388:9: ( ( (k+= UNION | k+= EXCEPT ) p_FTStopWords ) )
            // XQueryParser.g:1388:11: ( (k+= UNION | k+= EXCEPT ) p_FTStopWords )
            {
            root_0 = (XQDTCommonTree)adaptor.nil();

            // XQueryParser.g:1388:11: ( (k+= UNION | k+= EXCEPT ) p_FTStopWords )
            // XQueryParser.g:1388:13: (k+= UNION | k+= EXCEPT ) p_FTStopWords
            {
            // XQueryParser.g:1388:13: (k+= UNION | k+= EXCEPT )
            int alt215=2;
            int LA215_0 = input.LA(1);

            if ( (LA215_0==UNION) ) {
                alt215=1;
            }
            else if ( (LA215_0==EXCEPT) ) {
                alt215=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 215, 0, input);

                throw nvae;
            }
            switch (alt215) {
                case 1 :
                    // XQueryParser.g:1388:14: k+= UNION
                    {
                    k=(CommonToken)match(input,UNION,FOLLOW_UNION_in_p_FTStopWordsInclExcl11748); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    k_tree = (XQDTCommonTree)adaptor.create(k);
                    adaptor.addChild(root_0, k_tree);
                    }
                    if (list_k==null) list_k=new ArrayList();
                    list_k.add(k);


                    }
                    break;
                case 2 :
                    // XQueryParser.g:1388:25: k+= EXCEPT
                    {
                    k=(CommonToken)match(input,EXCEPT,FOLLOW_EXCEPT_in_p_FTStopWordsInclExcl11754); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    k_tree = (XQDTCommonTree)adaptor.create(k);
                    adaptor.addChild(root_0, k_tree);
                    }
                    if (list_k==null) list_k=new ArrayList();
                    list_k.add(k);


                    }
                    break;

            }

            pushFollow(FOLLOW_p_FTStopWords_in_p_FTStopWordsInclExcl11757);
            p_FTStopWords617=p_FTStopWords();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, p_FTStopWords617.getTree());

            }

            if ( state.backtracking==0 ) {
              ak(list_k);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (XQDTCommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (XQDTCommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "p_FTStopWordsInclExcl"

    public static class p_FTLanguageOption_return extends ParserRuleReturnScope {
        XQDTCommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "p_FTLanguageOption"
    // XQueryParser.g:1392:1: p_FTLanguageOption : kl= LANGUAGE p_StringLiteral ;
    public final XQueryParser.p_FTLanguageOption_return p_FTLanguageOption() throws RecognitionException {
        XQueryParser.p_FTLanguageOption_return retval = new XQueryParser.p_FTLanguageOption_return();
        retval.start = input.LT(1);

        XQDTCommonTree root_0 = null;

        CommonToken kl=null;
        XQueryParser.p_StringLiteral_return p_StringLiteral618 = null;


        XQDTCommonTree kl_tree=null;

        try {
            // XQueryParser.g:1393:9: (kl= LANGUAGE p_StringLiteral )
            // XQueryParser.g:1393:11: kl= LANGUAGE p_StringLiteral
            {
            root_0 = (XQDTCommonTree)adaptor.nil();

            kl=(CommonToken)match(input,LANGUAGE,FOLLOW_LANGUAGE_in_p_FTLanguageOption11789); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            kl_tree = (XQDTCommonTree)adaptor.create(kl);
            adaptor.addChild(root_0, kl_tree);
            }
            if ( state.backtracking==0 ) {
              ak(kl);
            }
            pushFollow(FOLLOW_p_StringLiteral_in_p_FTLanguageOption11793);
            p_StringLiteral618=p_StringLiteral();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, p_StringLiteral618.getTree());

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (XQDTCommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (XQDTCommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "p_FTLanguageOption"

    public static class p_FTWildCardOption_return extends ParserRuleReturnScope {
        XQDTCommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "p_FTWildCardOption"
    // XQueryParser.g:1397:1: p_FTWildCardOption : (k+= WILDCARDS | (k+= NO k+= WILDCARDS ) ) ;
    public final XQueryParser.p_FTWildCardOption_return p_FTWildCardOption() throws RecognitionException {
        XQueryParser.p_FTWildCardOption_return retval = new XQueryParser.p_FTWildCardOption_return();
        retval.start = input.LT(1);

        XQDTCommonTree root_0 = null;

        CommonToken k=null;
        List list_k=null;

        XQDTCommonTree k_tree=null;

        try {
            // XQueryParser.g:1398:9: ( (k+= WILDCARDS | (k+= NO k+= WILDCARDS ) ) )
            // XQueryParser.g:1398:11: (k+= WILDCARDS | (k+= NO k+= WILDCARDS ) )
            {
            root_0 = (XQDTCommonTree)adaptor.nil();

            // XQueryParser.g:1398:11: (k+= WILDCARDS | (k+= NO k+= WILDCARDS ) )
            int alt216=2;
            int LA216_0 = input.LA(1);

            if ( (LA216_0==WILDCARDS) ) {
                alt216=1;
            }
            else if ( (LA216_0==NO) ) {
                alt216=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 216, 0, input);

                throw nvae;
            }
            switch (alt216) {
                case 1 :
                    // XQueryParser.g:1398:13: k+= WILDCARDS
                    {
                    k=(CommonToken)match(input,WILDCARDS,FOLLOW_WILDCARDS_in_p_FTWildCardOption11823); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    k_tree = (XQDTCommonTree)adaptor.create(k);
                    adaptor.addChild(root_0, k_tree);
                    }
                    if (list_k==null) list_k=new ArrayList();
                    list_k.add(k);


                    }
                    break;
                case 2 :
                    // XQueryParser.g:1398:28: (k+= NO k+= WILDCARDS )
                    {
                    // XQueryParser.g:1398:28: (k+= NO k+= WILDCARDS )
                    // XQueryParser.g:1398:29: k+= NO k+= WILDCARDS
                    {
                    k=(CommonToken)match(input,NO,FOLLOW_NO_in_p_FTWildCardOption11830); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    k_tree = (XQDTCommonTree)adaptor.create(k);
                    adaptor.addChild(root_0, k_tree);
                    }
                    if (list_k==null) list_k=new ArrayList();
                    list_k.add(k);

                    k=(CommonToken)match(input,WILDCARDS,FOLLOW_WILDCARDS_in_p_FTWildCardOption11834); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    k_tree = (XQDTCommonTree)adaptor.create(k);
                    adaptor.addChild(root_0, k_tree);
                    }
                    if (list_k==null) list_k=new ArrayList();
                    list_k.add(k);


                    }


                    }
                    break;

            }

            if ( state.backtracking==0 ) {
              ak(list_k);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (XQDTCommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (XQDTCommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "p_FTWildCardOption"

    public static class p_FTExtensionOption_return extends ParserRuleReturnScope {
        XQDTCommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "p_FTExtensionOption"
    // XQueryParser.g:1402:1: p_FTExtensionOption : ko= OPTION p_QName p_StringLiteral ;
    public final XQueryParser.p_FTExtensionOption_return p_FTExtensionOption() throws RecognitionException {
        XQueryParser.p_FTExtensionOption_return retval = new XQueryParser.p_FTExtensionOption_return();
        retval.start = input.LT(1);

        XQDTCommonTree root_0 = null;

        CommonToken ko=null;
        XQueryParser.p_QName_return p_QName619 = null;

        XQueryParser.p_StringLiteral_return p_StringLiteral620 = null;


        XQDTCommonTree ko_tree=null;

        try {
            // XQueryParser.g:1403:9: (ko= OPTION p_QName p_StringLiteral )
            // XQueryParser.g:1403:11: ko= OPTION p_QName p_StringLiteral
            {
            root_0 = (XQDTCommonTree)adaptor.nil();

            ko=(CommonToken)match(input,OPTION,FOLLOW_OPTION_in_p_FTExtensionOption11867); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            ko_tree = (XQDTCommonTree)adaptor.create(ko);
            adaptor.addChild(root_0, ko_tree);
            }
            if ( state.backtracking==0 ) {
              ak(ko);
            }
            pushFollow(FOLLOW_p_QName_in_p_FTExtensionOption11871);
            p_QName619=p_QName();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, p_QName619.getTree());
            pushFollow(FOLLOW_p_StringLiteral_in_p_FTExtensionOption11873);
            p_StringLiteral620=p_StringLiteral();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, p_StringLiteral620.getTree());

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (XQDTCommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (XQDTCommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "p_FTExtensionOption"

    public static class p_FTIgnoreOption_return extends ParserRuleReturnScope {
        XQDTCommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "p_FTIgnoreOption"
    // XQueryParser.g:1407:1: p_FTIgnoreOption : k+= WITHOUT k+= CONTENT p_UnionExpr ;
    public final XQueryParser.p_FTIgnoreOption_return p_FTIgnoreOption() throws RecognitionException {
        XQueryParser.p_FTIgnoreOption_return retval = new XQueryParser.p_FTIgnoreOption_return();
        retval.start = input.LT(1);

        XQDTCommonTree root_0 = null;

        CommonToken k=null;
        List list_k=null;
        XQueryParser.p_UnionExpr_return p_UnionExpr621 = null;


        XQDTCommonTree k_tree=null;

        try {
            // XQueryParser.g:1408:9: (k+= WITHOUT k+= CONTENT p_UnionExpr )
            // XQueryParser.g:1408:11: k+= WITHOUT k+= CONTENT p_UnionExpr
            {
            root_0 = (XQDTCommonTree)adaptor.nil();

            k=(CommonToken)match(input,WITHOUT,FOLLOW_WITHOUT_in_p_FTIgnoreOption11901); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            k_tree = (XQDTCommonTree)adaptor.create(k);
            adaptor.addChild(root_0, k_tree);
            }
            if (list_k==null) list_k=new ArrayList();
            list_k.add(k);

            k=(CommonToken)match(input,CONTENT,FOLLOW_CONTENT_in_p_FTIgnoreOption11905); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            k_tree = (XQDTCommonTree)adaptor.create(k);
            adaptor.addChild(root_0, k_tree);
            }
            if (list_k==null) list_k=new ArrayList();
            list_k.add(k);

            if ( state.backtracking==0 ) {
              ak(list_k);
            }
            pushFollow(FOLLOW_p_UnionExpr_in_p_FTIgnoreOption11909);
            p_UnionExpr621=p_UnionExpr();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, p_UnionExpr621.getTree());

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (XQDTCommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (XQDTCommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "p_FTIgnoreOption"

    public static class p_TryClause_return extends ParserRuleReturnScope {
        XQDTCommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "p_TryClause"
    // XQueryParser.g:1412:1: p_TryClause : kc= TRY LBRACKET pm_Expr RBRACKET ;
    public final XQueryParser.p_TryClause_return p_TryClause() throws RecognitionException {
        XQueryParser.p_TryClause_return retval = new XQueryParser.p_TryClause_return();
        retval.start = input.LT(1);

        XQDTCommonTree root_0 = null;

        CommonToken kc=null;
        CommonToken LBRACKET622=null;
        CommonToken RBRACKET624=null;
        XQueryParser.pm_Expr_return pm_Expr623 = null;


        XQDTCommonTree kc_tree=null;
        XQDTCommonTree LBRACKET622_tree=null;
        XQDTCommonTree RBRACKET624_tree=null;

        try {
            // XQueryParser.g:1413:9: (kc= TRY LBRACKET pm_Expr RBRACKET )
            // XQueryParser.g:1413:11: kc= TRY LBRACKET pm_Expr RBRACKET
            {
            root_0 = (XQDTCommonTree)adaptor.nil();

            kc=(CommonToken)match(input,TRY,FOLLOW_TRY_in_p_TryClause11937); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            kc_tree = (XQDTCommonTree)adaptor.create(kc);
            adaptor.addChild(root_0, kc_tree);
            }
            if ( state.backtracking==0 ) {
              ak(kc);
            }
            LBRACKET622=(CommonToken)match(input,LBRACKET,FOLLOW_LBRACKET_in_p_TryClause11941); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            LBRACKET622_tree = (XQDTCommonTree)adaptor.create(LBRACKET622);
            adaptor.addChild(root_0, LBRACKET622_tree);
            }
            pushFollow(FOLLOW_pm_Expr_in_p_TryClause11943);
            pm_Expr623=pm_Expr();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, pm_Expr623.getTree());
            RBRACKET624=(CommonToken)match(input,RBRACKET,FOLLOW_RBRACKET_in_p_TryClause11945); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            RBRACKET624_tree = (XQDTCommonTree)adaptor.create(RBRACKET624);
            adaptor.addChild(root_0, RBRACKET624_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (XQDTCommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (XQDTCommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "p_TryClause"

    public static class p_CatchClause_return extends ParserRuleReturnScope {
        XQDTCommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "p_CatchClause"
    // XQueryParser.g:1420:1: p_CatchClause : kc= CATCH p_CatchErrorList ( p_CatchVars )? LBRACKET pm_Expr RBRACKET ;
    public final XQueryParser.p_CatchClause_return p_CatchClause() throws RecognitionException {
        XQueryParser.p_CatchClause_return retval = new XQueryParser.p_CatchClause_return();
        retval.start = input.LT(1);

        XQDTCommonTree root_0 = null;

        CommonToken kc=null;
        CommonToken LBRACKET627=null;
        CommonToken RBRACKET629=null;
        XQueryParser.p_CatchErrorList_return p_CatchErrorList625 = null;

        XQueryParser.p_CatchVars_return p_CatchVars626 = null;

        XQueryParser.pm_Expr_return pm_Expr628 = null;


        XQDTCommonTree kc_tree=null;
        XQDTCommonTree LBRACKET627_tree=null;
        XQDTCommonTree RBRACKET629_tree=null;

        try {
            // XQueryParser.g:1421:9: (kc= CATCH p_CatchErrorList ( p_CatchVars )? LBRACKET pm_Expr RBRACKET )
            // XQueryParser.g:1421:11: kc= CATCH p_CatchErrorList ( p_CatchVars )? LBRACKET pm_Expr RBRACKET
            {
            root_0 = (XQDTCommonTree)adaptor.nil();

            kc=(CommonToken)match(input,CATCH,FOLLOW_CATCH_in_p_CatchClause11976); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            kc_tree = (XQDTCommonTree)adaptor.create(kc);
            adaptor.addChild(root_0, kc_tree);
            }
            if ( state.backtracking==0 ) {
              ak(kc);
            }
            pushFollow(FOLLOW_p_CatchErrorList_in_p_CatchClause11980);
            p_CatchErrorList625=p_CatchErrorList();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, p_CatchErrorList625.getTree());
            // XQueryParser.g:1421:48: ( p_CatchVars )?
            int alt217=2;
            int LA217_0 = input.LA(1);

            if ( (LA217_0==LPAREN) ) {
                alt217=1;
            }
            switch (alt217) {
                case 1 :
                    // XQueryParser.g:1421:48: p_CatchVars
                    {
                    pushFollow(FOLLOW_p_CatchVars_in_p_CatchClause11982);
                    p_CatchVars626=p_CatchVars();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, p_CatchVars626.getTree());

                    }
                    break;

            }

            LBRACKET627=(CommonToken)match(input,LBRACKET,FOLLOW_LBRACKET_in_p_CatchClause11985); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            LBRACKET627_tree = (XQDTCommonTree)adaptor.create(LBRACKET627);
            adaptor.addChild(root_0, LBRACKET627_tree);
            }
            pushFollow(FOLLOW_pm_Expr_in_p_CatchClause11987);
            pm_Expr628=pm_Expr();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, pm_Expr628.getTree());
            RBRACKET629=(CommonToken)match(input,RBRACKET,FOLLOW_RBRACKET_in_p_CatchClause11989); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            RBRACKET629_tree = (XQDTCommonTree)adaptor.create(RBRACKET629);
            adaptor.addChild(root_0, RBRACKET629_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (XQDTCommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (XQDTCommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "p_CatchClause"

    public static class p_CatchErrorList_return extends ParserRuleReturnScope {
        XQDTCommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "p_CatchErrorList"
    // XQueryParser.g:1425:1: p_CatchErrorList : ( p_NameTest ( VBAR p_NameTest )* | {...}? => () );
    public final XQueryParser.p_CatchErrorList_return p_CatchErrorList() throws RecognitionException {
        XQueryParser.p_CatchErrorList_return retval = new XQueryParser.p_CatchErrorList_return();
        retval.start = input.LT(1);

        XQDTCommonTree root_0 = null;

        CommonToken VBAR631=null;
        XQueryParser.p_NameTest_return p_NameTest630 = null;

        XQueryParser.p_NameTest_return p_NameTest632 = null;


        XQDTCommonTree VBAR631_tree=null;

        try {
            // XQueryParser.g:1426:9: ( p_NameTest ( VBAR p_NameTest )* | {...}? => () )
            int alt219=2;
            int LA219_0 = input.LA(1);

            if ( ((LA219_0>=ANCESTOR && LA219_0<=DECIMAL_SEPARATOR)||(LA219_0>=DIGIT && LA219_0<=NEXT)||(LA219_0>=ONLY && LA219_0<=EXIT)||(LA219_0>=SEQUENTIAL && LA219_0<=MAINTAINED)||(LA219_0>=MUTABLE && LA219_0<=QUOT_ER)||LA219_0==STAR||LA219_0==L_NCName||LA219_0==EXPLICITLY) ) {
                alt219=1;
            }
            else if ( (LA219_0==LPAREN||LA219_0==LBRACKET) && ((lc(MLS)))) {
                alt219=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 219, 0, input);

                throw nvae;
            }
            switch (alt219) {
                case 1 :
                    // XQueryParser.g:1426:11: p_NameTest ( VBAR p_NameTest )*
                    {
                    root_0 = (XQDTCommonTree)adaptor.nil();

                    pushFollow(FOLLOW_p_NameTest_in_p_CatchErrorList12015);
                    p_NameTest630=p_NameTest();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, p_NameTest630.getTree());
                    // XQueryParser.g:1426:22: ( VBAR p_NameTest )*
                    loop218:
                    do {
                        int alt218=2;
                        int LA218_0 = input.LA(1);

                        if ( (LA218_0==VBAR) ) {
                            alt218=1;
                        }


                        switch (alt218) {
                    	case 1 :
                    	    // XQueryParser.g:1426:23: VBAR p_NameTest
                    	    {
                    	    VBAR631=(CommonToken)match(input,VBAR,FOLLOW_VBAR_in_p_CatchErrorList12018); if (state.failed) return retval;
                    	    if ( state.backtracking==0 ) {
                    	    VBAR631_tree = (XQDTCommonTree)adaptor.create(VBAR631);
                    	    adaptor.addChild(root_0, VBAR631_tree);
                    	    }
                    	    pushFollow(FOLLOW_p_NameTest_in_p_CatchErrorList12020);
                    	    p_NameTest632=p_NameTest();

                    	    state._fsp--;
                    	    if (state.failed) return retval;
                    	    if ( state.backtracking==0 ) adaptor.addChild(root_0, p_NameTest632.getTree());

                    	    }
                    	    break;

                    	default :
                    	    break loop218;
                        }
                    } while (true);


                    }
                    break;
                case 2 :
                    // XQueryParser.g:1427:11: {...}? => ()
                    {
                    root_0 = (XQDTCommonTree)adaptor.nil();

                    if ( !((lc(MLS))) ) {
                        if (state.backtracking>0) {state.failed=true; return retval;}
                        throw new FailedPredicateException(input, "p_CatchErrorList", "lc(MLS)");
                    }
                    // XQueryParser.g:1427:24: ()
                    // XQueryParser.g:1427:38: 
                    {
                    }


                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (XQDTCommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (XQDTCommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "p_CatchErrorList"

    public static class p_CatchVars_return extends ParserRuleReturnScope {
        XQDTCommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "p_CatchVars"
    // XQueryParser.g:1431:2: p_CatchVars : LPAREN DOLLAR p_VarName ( COMMA DOLLAR p_VarName ( COMMA DOLLAR p_VarName )? )? RPAREN ;
    public final XQueryParser.p_CatchVars_return p_CatchVars() throws RecognitionException {
        XQueryParser.p_CatchVars_return retval = new XQueryParser.p_CatchVars_return();
        retval.start = input.LT(1);

        XQDTCommonTree root_0 = null;

        CommonToken LPAREN633=null;
        CommonToken DOLLAR634=null;
        CommonToken COMMA636=null;
        CommonToken DOLLAR637=null;
        CommonToken COMMA639=null;
        CommonToken DOLLAR640=null;
        CommonToken RPAREN642=null;
        XQueryParser.p_VarName_return p_VarName635 = null;

        XQueryParser.p_VarName_return p_VarName638 = null;

        XQueryParser.p_VarName_return p_VarName641 = null;


        XQDTCommonTree LPAREN633_tree=null;
        XQDTCommonTree DOLLAR634_tree=null;
        XQDTCommonTree COMMA636_tree=null;
        XQDTCommonTree DOLLAR637_tree=null;
        XQDTCommonTree COMMA639_tree=null;
        XQDTCommonTree DOLLAR640_tree=null;
        XQDTCommonTree RPAREN642_tree=null;

        try {
            // XQueryParser.g:1432:9: ( LPAREN DOLLAR p_VarName ( COMMA DOLLAR p_VarName ( COMMA DOLLAR p_VarName )? )? RPAREN )
            // XQueryParser.g:1432:11: LPAREN DOLLAR p_VarName ( COMMA DOLLAR p_VarName ( COMMA DOLLAR p_VarName )? )? RPAREN
            {
            root_0 = (XQDTCommonTree)adaptor.nil();

            LPAREN633=(CommonToken)match(input,LPAREN,FOLLOW_LPAREN_in_p_CatchVars12066); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            LPAREN633_tree = (XQDTCommonTree)adaptor.create(LPAREN633);
            adaptor.addChild(root_0, LPAREN633_tree);
            }
            DOLLAR634=(CommonToken)match(input,DOLLAR,FOLLOW_DOLLAR_in_p_CatchVars12068); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            DOLLAR634_tree = (XQDTCommonTree)adaptor.create(DOLLAR634);
            adaptor.addChild(root_0, DOLLAR634_tree);
            }
            pushFollow(FOLLOW_p_VarName_in_p_CatchVars12070);
            p_VarName635=p_VarName();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, p_VarName635.getTree());
            // XQueryParser.g:1432:35: ( COMMA DOLLAR p_VarName ( COMMA DOLLAR p_VarName )? )?
            int alt221=2;
            int LA221_0 = input.LA(1);

            if ( (LA221_0==COMMA) ) {
                alt221=1;
            }
            switch (alt221) {
                case 1 :
                    // XQueryParser.g:1432:36: COMMA DOLLAR p_VarName ( COMMA DOLLAR p_VarName )?
                    {
                    COMMA636=(CommonToken)match(input,COMMA,FOLLOW_COMMA_in_p_CatchVars12073); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    COMMA636_tree = (XQDTCommonTree)adaptor.create(COMMA636);
                    adaptor.addChild(root_0, COMMA636_tree);
                    }
                    DOLLAR637=(CommonToken)match(input,DOLLAR,FOLLOW_DOLLAR_in_p_CatchVars12075); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    DOLLAR637_tree = (XQDTCommonTree)adaptor.create(DOLLAR637);
                    adaptor.addChild(root_0, DOLLAR637_tree);
                    }
                    pushFollow(FOLLOW_p_VarName_in_p_CatchVars12077);
                    p_VarName638=p_VarName();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, p_VarName638.getTree());
                    // XQueryParser.g:1432:59: ( COMMA DOLLAR p_VarName )?
                    int alt220=2;
                    int LA220_0 = input.LA(1);

                    if ( (LA220_0==COMMA) ) {
                        alt220=1;
                    }
                    switch (alt220) {
                        case 1 :
                            // XQueryParser.g:1432:60: COMMA DOLLAR p_VarName
                            {
                            COMMA639=(CommonToken)match(input,COMMA,FOLLOW_COMMA_in_p_CatchVars12080); if (state.failed) return retval;
                            if ( state.backtracking==0 ) {
                            COMMA639_tree = (XQDTCommonTree)adaptor.create(COMMA639);
                            adaptor.addChild(root_0, COMMA639_tree);
                            }
                            DOLLAR640=(CommonToken)match(input,DOLLAR,FOLLOW_DOLLAR_in_p_CatchVars12082); if (state.failed) return retval;
                            if ( state.backtracking==0 ) {
                            DOLLAR640_tree = (XQDTCommonTree)adaptor.create(DOLLAR640);
                            adaptor.addChild(root_0, DOLLAR640_tree);
                            }
                            pushFollow(FOLLOW_p_VarName_in_p_CatchVars12084);
                            p_VarName641=p_VarName();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) adaptor.addChild(root_0, p_VarName641.getTree());

                            }
                            break;

                    }


                    }
                    break;

            }

            RPAREN642=(CommonToken)match(input,RPAREN,FOLLOW_RPAREN_in_p_CatchVars12090); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            RPAREN642_tree = (XQDTCommonTree)adaptor.create(RPAREN642);
            adaptor.addChild(root_0, RPAREN642_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (XQDTCommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (XQDTCommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "p_CatchVars"

    public static class p_StringLiteral_return extends ParserRuleReturnScope {
        XQDTCommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "p_StringLiteral"
    // XQueryParser.g:1458:1: p_StringLiteral : ( QUOT p_QuotStringLiteralContent QUOT -> ^( StringLiteral ( p_QuotStringLiteralContent )* ) | APOS p_AposStringLiteralContent APOS -> ^( StringLiteral ( p_AposStringLiteralContent )* ) );
    public final XQueryParser.p_StringLiteral_return p_StringLiteral() throws RecognitionException {
        XQueryParser.p_StringLiteral_return retval = new XQueryParser.p_StringLiteral_return();
        retval.start = input.LT(1);

        XQDTCommonTree root_0 = null;

        CommonToken QUOT643=null;
        CommonToken QUOT645=null;
        CommonToken APOS646=null;
        CommonToken APOS648=null;
        XQueryParser.p_QuotStringLiteralContent_return p_QuotStringLiteralContent644 = null;

        XQueryParser.p_AposStringLiteralContent_return p_AposStringLiteralContent647 = null;


        XQDTCommonTree QUOT643_tree=null;
        XQDTCommonTree QUOT645_tree=null;
        XQDTCommonTree APOS646_tree=null;
        XQDTCommonTree APOS648_tree=null;
        RewriteRuleTokenStream stream_APOS=new RewriteRuleTokenStream(adaptor,"token APOS");
        RewriteRuleTokenStream stream_QUOT=new RewriteRuleTokenStream(adaptor,"token QUOT");
        RewriteRuleSubtreeStream stream_p_QuotStringLiteralContent=new RewriteRuleSubtreeStream(adaptor,"rule p_QuotStringLiteralContent");
        RewriteRuleSubtreeStream stream_p_AposStringLiteralContent=new RewriteRuleSubtreeStream(adaptor,"rule p_AposStringLiteralContent");
        try {
            // XQueryParser.g:1459:9: ( QUOT p_QuotStringLiteralContent QUOT -> ^( StringLiteral ( p_QuotStringLiteralContent )* ) | APOS p_AposStringLiteralContent APOS -> ^( StringLiteral ( p_AposStringLiteralContent )* ) )
            int alt222=2;
            int LA222_0 = input.LA(1);

            if ( (LA222_0==QUOT) ) {
                alt222=1;
            }
            else if ( (LA222_0==APOS) ) {
                alt222=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 222, 0, input);

                throw nvae;
            }
            switch (alt222) {
                case 1 :
                    // XQueryParser.g:1459:11: QUOT p_QuotStringLiteralContent QUOT
                    {
                    QUOT643=(CommonToken)match(input,QUOT,FOLLOW_QUOT_in_p_StringLiteral12139); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_QUOT.add(QUOT643);

                    if ( state.backtracking==0 ) {
                      pushStringLexer(false);
                    }
                    pushFollow(FOLLOW_p_QuotStringLiteralContent_in_p_StringLiteral12143);
                    p_QuotStringLiteralContent644=p_QuotStringLiteralContent();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_p_QuotStringLiteralContent.add(p_QuotStringLiteralContent644.getTree());
                    QUOT645=(CommonToken)match(input,QUOT,FOLLOW_QUOT_in_p_StringLiteral12145); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_QUOT.add(QUOT645);

                    if ( state.backtracking==0 ) {
                       popLexer(); 
                    }


                    // AST REWRITE
                    // elements: p_QuotStringLiteralContent
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (XQDTCommonTree)adaptor.nil();
                    // 1460:17: -> ^( StringLiteral ( p_QuotStringLiteralContent )* )
                    {
                        // XQueryParser.g:1460:20: ^( StringLiteral ( p_QuotStringLiteralContent )* )
                        {
                        XQDTCommonTree root_1 = (XQDTCommonTree)adaptor.nil();
                        root_1 = (XQDTCommonTree)adaptor.becomeRoot((XQDTCommonTree)adaptor.create(StringLiteral, "StringLiteral"), root_1);

                        // XQueryParser.g:1460:36: ( p_QuotStringLiteralContent )*
                        while ( stream_p_QuotStringLiteralContent.hasNext() ) {
                            adaptor.addChild(root_1, stream_p_QuotStringLiteralContent.nextTree());

                        }
                        stream_p_QuotStringLiteralContent.reset();

                        adaptor.addChild(root_0, root_1);
                        }

                    }

                    retval.tree = root_0;}
                    }
                    break;
                case 2 :
                    // XQueryParser.g:1461:13: APOS p_AposStringLiteralContent APOS
                    {
                    APOS646=(CommonToken)match(input,APOS,FOLLOW_APOS_in_p_StringLiteral12186); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_APOS.add(APOS646);

                    if ( state.backtracking==0 ) {
                      pushStringLexer(true);
                    }
                    pushFollow(FOLLOW_p_AposStringLiteralContent_in_p_StringLiteral12190);
                    p_AposStringLiteralContent647=p_AposStringLiteralContent();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_p_AposStringLiteralContent.add(p_AposStringLiteralContent647.getTree());
                    APOS648=(CommonToken)match(input,APOS,FOLLOW_APOS_in_p_StringLiteral12192); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_APOS.add(APOS648);

                    if ( state.backtracking==0 ) {
                       popLexer(); 
                    }


                    // AST REWRITE
                    // elements: p_AposStringLiteralContent
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (XQDTCommonTree)adaptor.nil();
                    // 1462:17: -> ^( StringLiteral ( p_AposStringLiteralContent )* )
                    {
                        // XQueryParser.g:1462:20: ^( StringLiteral ( p_AposStringLiteralContent )* )
                        {
                        XQDTCommonTree root_1 = (XQDTCommonTree)adaptor.nil();
                        root_1 = (XQDTCommonTree)adaptor.becomeRoot((XQDTCommonTree)adaptor.create(StringLiteral, "StringLiteral"), root_1);

                        // XQueryParser.g:1462:36: ( p_AposStringLiteralContent )*
                        while ( stream_p_AposStringLiteralContent.hasNext() ) {
                            adaptor.addChild(root_1, stream_p_AposStringLiteralContent.nextTree());

                        }
                        stream_p_AposStringLiteralContent.reset();

                        adaptor.addChild(root_0, root_1);
                        }

                    }

                    retval.tree = root_0;}
                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (XQDTCommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (XQDTCommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "p_StringLiteral"

    public static class p_QuotStringLiteralContent_return extends ParserRuleReturnScope {
        XQDTCommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "p_QuotStringLiteralContent"
    // XQueryParser.g:1469:1: p_QuotStringLiteralContent : ( ESCAPE_QUOT | L_CharRef | L_PredefinedEntityRef | ~ ( QUOT | AMP ) )* ;
    public final XQueryParser.p_QuotStringLiteralContent_return p_QuotStringLiteralContent() throws RecognitionException {
        XQueryParser.p_QuotStringLiteralContent_return retval = new XQueryParser.p_QuotStringLiteralContent_return();
        retval.start = input.LT(1);

        XQDTCommonTree root_0 = null;

        CommonToken set649=null;

        XQDTCommonTree set649_tree=null;

        try {
            // XQueryParser.g:1470:9: ( ( ESCAPE_QUOT | L_CharRef | L_PredefinedEntityRef | ~ ( QUOT | AMP ) )* )
            // XQueryParser.g:1470:11: ( ESCAPE_QUOT | L_CharRef | L_PredefinedEntityRef | ~ ( QUOT | AMP ) )*
            {
            root_0 = (XQDTCommonTree)adaptor.nil();

            // XQueryParser.g:1470:11: ( ESCAPE_QUOT | L_CharRef | L_PredefinedEntityRef | ~ ( QUOT | AMP ) )*
            loop223:
            do {
                int alt223=2;
                int LA223_0 = input.LA(1);

                if ( ((LA223_0>=L_QuotAttrContentChar && LA223_0<=NOTEQUAL)||(LA223_0>=COMMA && LA223_0<=APOS)||(LA223_0>=NCNameStartChar && LA223_0<=EXPLICITLY)) ) {
                    alt223=1;
                }


                switch (alt223) {
            	case 1 :
            	    // XQueryParser.g:
            	    {
            	    set649=(CommonToken)input.LT(1);
            	    if ( (input.LA(1)>=L_QuotAttrContentChar && input.LA(1)<=NOTEQUAL)||(input.LA(1)>=COMMA && input.LA(1)<=APOS)||(input.LA(1)>=NCNameStartChar && input.LA(1)<=EXPLICITLY) ) {
            	        input.consume();
            	        if ( state.backtracking==0 ) adaptor.addChild(root_0, (XQDTCommonTree)adaptor.create(set649));
            	        state.errorRecovery=false;state.failed=false;
            	    }
            	    else {
            	        if (state.backtracking>0) {state.failed=true; return retval;}
            	        MismatchedSetException mse = new MismatchedSetException(null,input);
            	        throw mse;
            	    }


            	    }
            	    break;

            	default :
            	    break loop223;
                }
            } while (true);


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (XQDTCommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (XQDTCommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "p_QuotStringLiteralContent"

    public static class p_AposStringLiteralContent_return extends ParserRuleReturnScope {
        XQDTCommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "p_AposStringLiteralContent"
    // XQueryParser.g:1478:1: p_AposStringLiteralContent : ( ESCAPE_QUOT | L_CharRef | L_PredefinedEntityRef | ~ ( APOS | AMP ) )* ;
    public final XQueryParser.p_AposStringLiteralContent_return p_AposStringLiteralContent() throws RecognitionException {
        XQueryParser.p_AposStringLiteralContent_return retval = new XQueryParser.p_AposStringLiteralContent_return();
        retval.start = input.LT(1);

        XQDTCommonTree root_0 = null;

        CommonToken set650=null;

        XQDTCommonTree set650_tree=null;

        try {
            // XQueryParser.g:1479:9: ( ( ESCAPE_QUOT | L_CharRef | L_PredefinedEntityRef | ~ ( APOS | AMP ) )* )
            // XQueryParser.g:1479:11: ( ESCAPE_QUOT | L_CharRef | L_PredefinedEntityRef | ~ ( APOS | AMP ) )*
            {
            root_0 = (XQDTCommonTree)adaptor.nil();

            // XQueryParser.g:1479:11: ( ESCAPE_QUOT | L_CharRef | L_PredefinedEntityRef | ~ ( APOS | AMP ) )*
            loop224:
            do {
                int alt224=2;
                int LA224_0 = input.LA(1);

                if ( ((LA224_0>=L_QuotAttrContentChar && LA224_0<=NOTEQUAL)||(LA224_0>=COMMA && LA224_0<=CHARREF_HEX)||(LA224_0>=QUOT && LA224_0<=EXPLICITLY)) ) {
                    alt224=1;
                }


                switch (alt224) {
            	case 1 :
            	    // XQueryParser.g:
            	    {
            	    set650=(CommonToken)input.LT(1);
            	    if ( (input.LA(1)>=L_QuotAttrContentChar && input.LA(1)<=NOTEQUAL)||(input.LA(1)>=COMMA && input.LA(1)<=CHARREF_HEX)||(input.LA(1)>=QUOT && input.LA(1)<=EXPLICITLY) ) {
            	        input.consume();
            	        if ( state.backtracking==0 ) adaptor.addChild(root_0, (XQDTCommonTree)adaptor.create(set650));
            	        state.errorRecovery=false;state.failed=false;
            	    }
            	    else {
            	        if (state.backtracking>0) {state.failed=true; return retval;}
            	        MismatchedSetException mse = new MismatchedSetException(null,input);
            	        throw mse;
            	    }


            	    }
            	    break;

            	default :
            	    break loop224;
                }
            } while (true);


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (XQDTCommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (XQDTCommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "p_AposStringLiteralContent"

    public static class p_QName_return extends ParserRuleReturnScope {
        XQDTCommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "p_QName"
    // XQueryParser.g:1512:1: p_QName : p_NCName p_LocalNCName -> ^( QName p_NCName ( p_LocalNCName )? ) ;
    public final XQueryParser.p_QName_return p_QName() throws RecognitionException {
        XQueryParser.p_QName_return retval = new XQueryParser.p_QName_return();
        retval.start = input.LT(1);

        XQDTCommonTree root_0 = null;

        XQueryParser.p_NCName_return p_NCName651 = null;

        XQueryParser.p_LocalNCName_return p_LocalNCName652 = null;


        RewriteRuleSubtreeStream stream_p_LocalNCName=new RewriteRuleSubtreeStream(adaptor,"rule p_LocalNCName");
        RewriteRuleSubtreeStream stream_p_NCName=new RewriteRuleSubtreeStream(adaptor,"rule p_NCName");
        setWsExplicit(true);
        try {
            // XQueryParser.g:1513:9: ( p_NCName p_LocalNCName -> ^( QName p_NCName ( p_LocalNCName )? ) )
            // XQueryParser.g:1513:11: p_NCName p_LocalNCName
            {
            pushFollow(FOLLOW_p_NCName_in_p_QName12390);
            p_NCName651=p_NCName();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_p_NCName.add(p_NCName651.getTree());
            pushFollow(FOLLOW_p_LocalNCName_in_p_QName12392);
            p_LocalNCName652=p_LocalNCName();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_p_LocalNCName.add(p_LocalNCName652.getTree());


            // AST REWRITE
            // elements: p_LocalNCName, p_NCName
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (XQDTCommonTree)adaptor.nil();
            // 1514:17: -> ^( QName p_NCName ( p_LocalNCName )? )
            {
                // XQueryParser.g:1514:20: ^( QName p_NCName ( p_LocalNCName )? )
                {
                XQDTCommonTree root_1 = (XQDTCommonTree)adaptor.nil();
                root_1 = (XQDTCommonTree)adaptor.becomeRoot((XQDTCommonTree)adaptor.create(QName, "QName"), root_1);

                adaptor.addChild(root_1, stream_p_NCName.nextTree());
                // XQueryParser.g:1514:37: ( p_LocalNCName )?
                if ( stream_p_LocalNCName.hasNext() ) {
                    adaptor.addChild(root_1, stream_p_LocalNCName.nextTree());

                }
                stream_p_LocalNCName.reset();

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (XQDTCommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (XQDTCommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "p_QName"

    public static class p_LocalNCName_return extends ParserRuleReturnScope {
        XQDTCommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "p_LocalNCName"
    // XQueryParser.g:1519:1: p_LocalNCName : ( COLON p_NCName )? ;
    public final XQueryParser.p_LocalNCName_return p_LocalNCName() throws RecognitionException {
        XQueryParser.p_LocalNCName_return retval = new XQueryParser.p_LocalNCName_return();
        retval.start = input.LT(1);

        XQDTCommonTree root_0 = null;

        CommonToken COLON653=null;
        XQueryParser.p_NCName_return p_NCName654 = null;


        XQDTCommonTree COLON653_tree=null;

        try {
            // XQueryParser.g:1520:9: ( ( COLON p_NCName )? )
            // XQueryParser.g:1520:11: ( COLON p_NCName )?
            {
            root_0 = (XQDTCommonTree)adaptor.nil();

            // XQueryParser.g:1520:11: ( COLON p_NCName )?
            int alt225=2;
            int LA225_0 = input.LA(1);

            if ( (LA225_0==COLON) ) {
                alt225=1;
            }
            switch (alt225) {
                case 1 :
                    // XQueryParser.g:1520:12: COLON p_NCName
                    {
                    COLON653=(CommonToken)match(input,COLON,FOLLOW_COLON_in_p_LocalNCName12447); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    COLON653_tree = (XQDTCommonTree)adaptor.create(COLON653);
                    adaptor.addChild(root_0, COLON653_tree);
                    }
                    pushFollow(FOLLOW_p_NCName_in_p_LocalNCName12449);
                    p_NCName654=p_NCName();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, p_NCName654.getTree());

                    }
                    break;

            }


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (XQDTCommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (XQDTCommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            setWsExplicit(false);
        }
        return retval;
    }
    // $ANTLR end "p_LocalNCName"

    public static class p_FQName_return extends ParserRuleReturnScope {
        XQDTCommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "p_FQName"
    // XQueryParser.g:1527:1: p_FQName : p_FNCName p_LocalFNCName ;
    public final XQueryParser.p_FQName_return p_FQName() throws RecognitionException {
        XQueryParser.p_FQName_return retval = new XQueryParser.p_FQName_return();
        retval.start = input.LT(1);

        XQDTCommonTree root_0 = null;

        XQueryParser.p_FNCName_return p_FNCName655 = null;

        XQueryParser.p_LocalFNCName_return p_LocalFNCName656 = null;



        setWsExplicit(true);
        try {
            // XQueryParser.g:1528:9: ( p_FNCName p_LocalFNCName )
            // XQueryParser.g:1528:11: p_FNCName p_LocalFNCName
            {
            root_0 = (XQDTCommonTree)adaptor.nil();

            pushFollow(FOLLOW_p_FNCName_in_p_FQName12496);
            p_FNCName655=p_FNCName();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, p_FNCName655.getTree());
            pushFollow(FOLLOW_p_LocalFNCName_in_p_FQName12498);
            p_LocalFNCName656=p_LocalFNCName();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, p_LocalFNCName656.getTree());

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (XQDTCommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (XQDTCommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "p_FQName"

    public static class p_LocalFNCName_return extends ParserRuleReturnScope {
        XQDTCommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "p_LocalFNCName"
    // XQueryParser.g:1533:1: p_LocalFNCName : ( COLON p_NCName )? ;
    public final XQueryParser.p_LocalFNCName_return p_LocalFNCName() throws RecognitionException {
        XQueryParser.p_LocalFNCName_return retval = new XQueryParser.p_LocalFNCName_return();
        retval.start = input.LT(1);

        XQDTCommonTree root_0 = null;

        CommonToken COLON657=null;
        XQueryParser.p_NCName_return p_NCName658 = null;


        XQDTCommonTree COLON657_tree=null;

        try {
            // XQueryParser.g:1534:9: ( ( COLON p_NCName )? )
            // XQueryParser.g:1534:11: ( COLON p_NCName )?
            {
            root_0 = (XQDTCommonTree)adaptor.nil();

            // XQueryParser.g:1534:11: ( COLON p_NCName )?
            int alt226=2;
            int LA226_0 = input.LA(1);

            if ( (LA226_0==COLON) ) {
                alt226=1;
            }
            switch (alt226) {
                case 1 :
                    // XQueryParser.g:1534:12: COLON p_NCName
                    {
                    COLON657=(CommonToken)match(input,COLON,FOLLOW_COLON_in_p_LocalFNCName12526); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    COLON657_tree = (XQDTCommonTree)adaptor.create(COLON657);
                    adaptor.addChild(root_0, COLON657_tree);
                    }
                    pushFollow(FOLLOW_p_NCName_in_p_LocalFNCName12528);
                    p_NCName658=p_NCName();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, p_NCName658.getTree());

                    }
                    break;

            }


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (XQDTCommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (XQDTCommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            setWsExplicit(false);
        }
        return retval;
    }
    // $ANTLR end "p_LocalFNCName"

    public static class p_NCName_return extends ParserRuleReturnScope {
        XQDTCommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "p_NCName"
    // XQueryParser.g:1540:1: p_NCName : ( L_NCName | ANCESTOR | ANCESTOR_OR_SELF | AND | AS | ASCENDING | AT | ATTRIBUTE | BASE_URI | BOUNDARY_SPACE | BY | CASE | CAST | CASTABLE | CHILD | COLLATION | COMMENT | CONSTRUCTION | COPY_NAMESPACES | DECLARE | DEFAULT | DESCENDANT | DESCENDANT_OR_SELF | DESCENDING | DIV | DOCUMENT | DOCUMENT_NODE | ELEMENT | ELSE | EMPTY | EMPTY_SEQUENCE | ENCODING | EQ | EVERY | EXCEPT | EXTERNAL | FOLLOWING | FOLLOWING_SIBLING | FOR | FUNCTION | GE | GREATEST | GT | IDIV | IF | IMPORT | IN | INHERIT | INSTANCE | INTERSECT | IS | ITEM | LAX | LE | LEAST | LET | LT | MOD | MODULE | NAMESPACE | NE | NO_INHERIT | NO_PRESERVE | NODE | OF | OPTION | OR | ORDER | ORDERED | ORDERING | PARENT | PRECEDING | PRECEDING_SIBLING | PRESERVE | PROCESSING_INSTRUCTION | RETURN | SATISFIES | SCHEMA | SCHEMA_ATTRIBUTE | SCHEMA_ELEMENT | SELF | SOME | STABLE | STRICT | STRIP | TEXT | THEN | TO | TREAT | TYPESWITCH | UNION | UNORDERED | VALIDATE | VARIABLE | VERSION | WHERE | XQUERY | CATCH | CONTEXT | COUNT | DECIMAL_FORMAT | DECIMAL_SEPARATOR | DIGIT | END | GROUP | GROUPING_SEPARATOR | INFINITY | MINUS_SIGN | NAMESPACE_NODE | NAN | NEXT | ONLY | OUTER | PATTERN_SEPARATOR | PERCENT | PER_MILLE | PREVIOUS | PRIVATE | PUBLIC | SLIDING | START | SWITCH | TRY | TUMBLING | WHEN | WINDOW | ZERO_DIGIT | AFTER | BEFORE | COPY | DELETE | FIRST | INSERT | INTO | LAST | MODIFY | NODES | RENAME | REPLACE | REVALIDATION | SKIP | UPDATING | VALUE | WITH | ALL | ANY | CONTAINS | CONTENT | DIACRITICS | DIFFERENT | DISTANCE | ENTIRE | EXACTLY | FROM | FT_OPTION | FTAND | FTNOT | FTOR | INSENSITIVE | LANGUAGE | LEVELS | LOWERCASE | MOST | NO | NOT | OCCURS | PARAGRAPH | PARAGRAPHS | PHRASE | RELATIONSHIP | SAME | SCORE | SENSITIVE | SENTENCE | SENTENCES | STEMMING | STOP | THESAURUS | TIMES | UPPERCASE | USING | WEIGHT | WILDCARDS | WITHOUT | WORD | WORDS | BLOCK | CONSTANT | EXIT | SEQUENTIAL | SET | SIMPLE | WHILE | EVAL | APPEND_ONLY | AUTOMATICALLY | CHECK | COLLECTION | CONSTRAINT | CONST | EQUALITY | EXPLICITLY | FOREACH | FOREIGN | INDEX | INTEGRITY | KEY | MAINTAINED | MUTABLE | NON | ON | QUEUE | RANGE | READ_ONLY | UNIQUE | BINARY | AMP_ER | APOS_ER | QUOT_ER );
    public final XQueryParser.p_NCName_return p_NCName() throws RecognitionException {
        XQueryParser.p_NCName_return retval = new XQueryParser.p_NCName_return();
        retval.start = input.LT(1);

        XQDTCommonTree root_0 = null;

        CommonToken set659=null;

        XQDTCommonTree set659_tree=null;

        try {
            // XQueryParser.g:1541:9: ( L_NCName | ANCESTOR | ANCESTOR_OR_SELF | AND | AS | ASCENDING | AT | ATTRIBUTE | BASE_URI | BOUNDARY_SPACE | BY | CASE | CAST | CASTABLE | CHILD | COLLATION | COMMENT | CONSTRUCTION | COPY_NAMESPACES | DECLARE | DEFAULT | DESCENDANT | DESCENDANT_OR_SELF | DESCENDING | DIV | DOCUMENT | DOCUMENT_NODE | ELEMENT | ELSE | EMPTY | EMPTY_SEQUENCE | ENCODING | EQ | EVERY | EXCEPT | EXTERNAL | FOLLOWING | FOLLOWING_SIBLING | FOR | FUNCTION | GE | GREATEST | GT | IDIV | IF | IMPORT | IN | INHERIT | INSTANCE | INTERSECT | IS | ITEM | LAX | LE | LEAST | LET | LT | MOD | MODULE | NAMESPACE | NE | NO_INHERIT | NO_PRESERVE | NODE | OF | OPTION | OR | ORDER | ORDERED | ORDERING | PARENT | PRECEDING | PRECEDING_SIBLING | PRESERVE | PROCESSING_INSTRUCTION | RETURN | SATISFIES | SCHEMA | SCHEMA_ATTRIBUTE | SCHEMA_ELEMENT | SELF | SOME | STABLE | STRICT | STRIP | TEXT | THEN | TO | TREAT | TYPESWITCH | UNION | UNORDERED | VALIDATE | VARIABLE | VERSION | WHERE | XQUERY | CATCH | CONTEXT | COUNT | DECIMAL_FORMAT | DECIMAL_SEPARATOR | DIGIT | END | GROUP | GROUPING_SEPARATOR | INFINITY | MINUS_SIGN | NAMESPACE_NODE | NAN | NEXT | ONLY | OUTER | PATTERN_SEPARATOR | PERCENT | PER_MILLE | PREVIOUS | PRIVATE | PUBLIC | SLIDING | START | SWITCH | TRY | TUMBLING | WHEN | WINDOW | ZERO_DIGIT | AFTER | BEFORE | COPY | DELETE | FIRST | INSERT | INTO | LAST | MODIFY | NODES | RENAME | REPLACE | REVALIDATION | SKIP | UPDATING | VALUE | WITH | ALL | ANY | CONTAINS | CONTENT | DIACRITICS | DIFFERENT | DISTANCE | ENTIRE | EXACTLY | FROM | FT_OPTION | FTAND | FTNOT | FTOR | INSENSITIVE | LANGUAGE | LEVELS | LOWERCASE | MOST | NO | NOT | OCCURS | PARAGRAPH | PARAGRAPHS | PHRASE | RELATIONSHIP | SAME | SCORE | SENSITIVE | SENTENCE | SENTENCES | STEMMING | STOP | THESAURUS | TIMES | UPPERCASE | USING | WEIGHT | WILDCARDS | WITHOUT | WORD | WORDS | BLOCK | CONSTANT | EXIT | SEQUENTIAL | SET | SIMPLE | WHILE | EVAL | APPEND_ONLY | AUTOMATICALLY | CHECK | COLLECTION | CONSTRAINT | CONST | EQUALITY | EXPLICITLY | FOREACH | FOREIGN | INDEX | INTEGRITY | KEY | MAINTAINED | MUTABLE | NON | ON | QUEUE | RANGE | READ_ONLY | UNIQUE | BINARY | AMP_ER | APOS_ER | QUOT_ER )
            // XQueryParser.g:
            {
            root_0 = (XQDTCommonTree)adaptor.nil();

            set659=(CommonToken)input.LT(1);
            if ( (input.LA(1)>=ANCESTOR && input.LA(1)<=DECIMAL_SEPARATOR)||(input.LA(1)>=DIGIT && input.LA(1)<=NEXT)||(input.LA(1)>=ONLY && input.LA(1)<=EXIT)||(input.LA(1)>=SEQUENTIAL && input.LA(1)<=MAINTAINED)||(input.LA(1)>=MUTABLE && input.LA(1)<=QUOT_ER)||input.LA(1)==L_NCName||input.LA(1)==EXPLICITLY ) {
                input.consume();
                if ( state.backtracking==0 ) adaptor.addChild(root_0, (XQDTCommonTree)adaptor.create(set659));
                state.errorRecovery=false;state.failed=false;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                MismatchedSetException mse = new MismatchedSetException(null,input);
                throw mse;
            }


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (XQDTCommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (XQDTCommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "p_NCName"

    public static class p_FNCName_return extends ParserRuleReturnScope {
        XQDTCommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "p_FNCName"
    // XQueryParser.g:1561:1: p_FNCName : ( L_NCName | ANCESTOR | ANCESTOR_OR_SELF | AND | AS | ASCENDING | AT | BASE_URI | BOUNDARY_SPACE | BY | CASE | CAST | CASTABLE | CHILD | COLLATION | CONSTRUCTION | COPY_NAMESPACES | DECLARE | DEFAULT | DESCENDANT | DESCENDANT_OR_SELF | DESCENDING | DIV | DOCUMENT | ELSE | EMPTY | ENCODING | EQ | EVERY | EXCEPT | EXTERNAL | FOLLOWING | FOLLOWING_SIBLING | FOR | FUNCTION | GE | GREATEST | GT | IDIV | IMPORT | IN | INHERIT | INSTANCE | INTERSECT | IS | LAX | LE | LEAST | LET | LT | MOD | MODULE | NAMESPACE | NE | NO_INHERIT | NO_PRESERVE | OF | OPTION | OR | ORDER | ORDERED | ORDERING | PARENT | PRECEDING | PRECEDING_SIBLING | PRESERVE | RETURN | SATISFIES | SCHEMA | SELF | SOME | STABLE | STRICT | STRIP | THEN | TO | TREAT | UNION | UNORDERED | VALIDATE | VARIABLE | VERSION | WHERE | XQUERY | CATCH | CONTEXT | COUNT | DECIMAL_FORMAT | DECIMAL_SEPARATOR | DIGIT | END | GROUP | GROUPING_SEPARATOR | INFINITY | MINUS_SIGN | NAN | NEXT | ONLY | OUTER | PATTERN_SEPARATOR | PERCENT | PER_MILLE | PREVIOUS | PRIVATE | PUBLIC | SLIDING | START | TRY | TUMBLING | WHEN | WINDOW | ZERO_DIGIT | AFTER | BEFORE | COPY | DELETE | FIRST | INSERT | INTO | LAST | MODIFY | NODES | RENAME | REPLACE | REVALIDATION | SKIP | UPDATING | VALUE | WITH | ALL | ANY | CONTAINS | CONTENT | DIACRITICS | DIFFERENT | DISTANCE | ENTIRE | EXACTLY | FROM | FT_OPTION | FTAND | FTNOT | FTOR | INSENSITIVE | LANGUAGE | LEVELS | LOWERCASE | MOST | NO | NOT | OCCURS | PARAGRAPH | PARAGRAPHS | PHRASE | RELATIONSHIP | SAME | SCORE | SENSITIVE | SENTENCE | SENTENCES | STEMMING | STOP | THESAURUS | TIMES | UPPERCASE | USING | WEIGHT | WILDCARDS | WITHOUT | WORD | WORDS | BLOCK | CONSTANT | EXIT | SEQUENTIAL | SET | SIMPLE | EVAL | APPEND_ONLY | AUTOMATICALLY | CHECK | COLLECTION | CONSTRAINT | CONST | EQUALITY | EXPLICITLY | FOREACH | FOREIGN | INDEX | INTEGRITY | KEY | MAINTAINED | MUTABLE | NON | ON | QUEUE | RANGE | READ_ONLY | UNIQUE | BINARY | AMP_ER | APOS_ER | QUOT_ER );
    public final XQueryParser.p_FNCName_return p_FNCName() throws RecognitionException {
        XQueryParser.p_FNCName_return retval = new XQueryParser.p_FNCName_return();
        retval.start = input.LT(1);

        XQDTCommonTree root_0 = null;

        CommonToken set660=null;

        XQDTCommonTree set660_tree=null;

        try {
            // XQueryParser.g:1562:9: ( L_NCName | ANCESTOR | ANCESTOR_OR_SELF | AND | AS | ASCENDING | AT | BASE_URI | BOUNDARY_SPACE | BY | CASE | CAST | CASTABLE | CHILD | COLLATION | CONSTRUCTION | COPY_NAMESPACES | DECLARE | DEFAULT | DESCENDANT | DESCENDANT_OR_SELF | DESCENDING | DIV | DOCUMENT | ELSE | EMPTY | ENCODING | EQ | EVERY | EXCEPT | EXTERNAL | FOLLOWING | FOLLOWING_SIBLING | FOR | FUNCTION | GE | GREATEST | GT | IDIV | IMPORT | IN | INHERIT | INSTANCE | INTERSECT | IS | LAX | LE | LEAST | LET | LT | MOD | MODULE | NAMESPACE | NE | NO_INHERIT | NO_PRESERVE | OF | OPTION | OR | ORDER | ORDERED | ORDERING | PARENT | PRECEDING | PRECEDING_SIBLING | PRESERVE | RETURN | SATISFIES | SCHEMA | SELF | SOME | STABLE | STRICT | STRIP | THEN | TO | TREAT | UNION | UNORDERED | VALIDATE | VARIABLE | VERSION | WHERE | XQUERY | CATCH | CONTEXT | COUNT | DECIMAL_FORMAT | DECIMAL_SEPARATOR | DIGIT | END | GROUP | GROUPING_SEPARATOR | INFINITY | MINUS_SIGN | NAN | NEXT | ONLY | OUTER | PATTERN_SEPARATOR | PERCENT | PER_MILLE | PREVIOUS | PRIVATE | PUBLIC | SLIDING | START | TRY | TUMBLING | WHEN | WINDOW | ZERO_DIGIT | AFTER | BEFORE | COPY | DELETE | FIRST | INSERT | INTO | LAST | MODIFY | NODES | RENAME | REPLACE | REVALIDATION | SKIP | UPDATING | VALUE | WITH | ALL | ANY | CONTAINS | CONTENT | DIACRITICS | DIFFERENT | DISTANCE | ENTIRE | EXACTLY | FROM | FT_OPTION | FTAND | FTNOT | FTOR | INSENSITIVE | LANGUAGE | LEVELS | LOWERCASE | MOST | NO | NOT | OCCURS | PARAGRAPH | PARAGRAPHS | PHRASE | RELATIONSHIP | SAME | SCORE | SENSITIVE | SENTENCE | SENTENCES | STEMMING | STOP | THESAURUS | TIMES | UPPERCASE | USING | WEIGHT | WILDCARDS | WITHOUT | WORD | WORDS | BLOCK | CONSTANT | EXIT | SEQUENTIAL | SET | SIMPLE | EVAL | APPEND_ONLY | AUTOMATICALLY | CHECK | COLLECTION | CONSTRAINT | CONST | EQUALITY | EXPLICITLY | FOREACH | FOREIGN | INDEX | INTEGRITY | KEY | MAINTAINED | MUTABLE | NON | ON | QUEUE | RANGE | READ_ONLY | UNIQUE | BINARY | AMP_ER | APOS_ER | QUOT_ER )
            // XQueryParser.g:
            {
            root_0 = (XQDTCommonTree)adaptor.nil();

            set660=(CommonToken)input.LT(1);
            if ( (input.LA(1)>=ANCESTOR && input.LA(1)<=AT)||(input.LA(1)>=BASE_URI && input.LA(1)<=COLLATION)||(input.LA(1)>=CONSTRUCTION && input.LA(1)<=DOCUMENT)||(input.LA(1)>=ELSE && input.LA(1)<=EMPTY)||(input.LA(1)>=ENCODING && input.LA(1)<=IDIV)||(input.LA(1)>=IMPORT && input.LA(1)<=IS)||(input.LA(1)>=LAX && input.LA(1)<=NO_PRESERVE)||(input.LA(1)>=OF && input.LA(1)<=PRESERVE)||(input.LA(1)>=RETURN && input.LA(1)<=SCHEMA)||(input.LA(1)>=SELF && input.LA(1)<=STRIP)||(input.LA(1)>=THEN && input.LA(1)<=TREAT)||(input.LA(1)>=UNION && input.LA(1)<=DECIMAL_SEPARATOR)||(input.LA(1)>=DIGIT && input.LA(1)<=MINUS_SIGN)||(input.LA(1)>=NAN && input.LA(1)<=NEXT)||(input.LA(1)>=ONLY && input.LA(1)<=START)||(input.LA(1)>=TRY && input.LA(1)<=EXIT)||(input.LA(1)>=SEQUENTIAL && input.LA(1)<=SIMPLE)||(input.LA(1)>=EVAL && input.LA(1)<=MAINTAINED)||(input.LA(1)>=MUTABLE && input.LA(1)<=QUOT_ER)||input.LA(1)==L_NCName||input.LA(1)==EXPLICITLY ) {
                input.consume();
                if ( state.backtracking==0 ) adaptor.addChild(root_0, (XQDTCommonTree)adaptor.create(set660));
                state.errorRecovery=false;state.failed=false;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                MismatchedSetException mse = new MismatchedSetException(null,input);
                throw mse;
            }


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (XQDTCommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (XQDTCommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "p_FNCName"

    public static class pm_RevalidationDecl_return extends ParserRuleReturnScope {
        XQDTCommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "pm_RevalidationDecl"
    // XQueryParser.g:1597:1: pm_RevalidationDecl : k+= DECLARE k+= REVALIDATION (k+= STRICT | k+= LAX | k+= SKIP ) ;
    public final XQueryParser.pm_RevalidationDecl_return pm_RevalidationDecl() throws RecognitionException {
        XQueryParser.pm_RevalidationDecl_return retval = new XQueryParser.pm_RevalidationDecl_return();
        retval.start = input.LT(1);

        XQDTCommonTree root_0 = null;

        CommonToken k=null;
        List list_k=null;

        XQDTCommonTree k_tree=null;

        try {
            // XQueryParser.g:1598:9: (k+= DECLARE k+= REVALIDATION (k+= STRICT | k+= LAX | k+= SKIP ) )
            // XQueryParser.g:1598:11: k+= DECLARE k+= REVALIDATION (k+= STRICT | k+= LAX | k+= SKIP )
            {
            root_0 = (XQDTCommonTree)adaptor.nil();

            k=(CommonToken)match(input,DECLARE,FOLLOW_DECLARE_in_pm_RevalidationDecl14618); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            k_tree = (XQDTCommonTree)adaptor.create(k);
            adaptor.addChild(root_0, k_tree);
            }
            if (list_k==null) list_k=new ArrayList();
            list_k.add(k);

            k=(CommonToken)match(input,REVALIDATION,FOLLOW_REVALIDATION_in_pm_RevalidationDecl14622); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            k_tree = (XQDTCommonTree)adaptor.create(k);
            adaptor.addChild(root_0, k_tree);
            }
            if (list_k==null) list_k=new ArrayList();
            list_k.add(k);

            // XQueryParser.g:1598:38: (k+= STRICT | k+= LAX | k+= SKIP )
            int alt227=3;
            switch ( input.LA(1) ) {
            case STRICT:
                {
                alt227=1;
                }
                break;
            case LAX:
                {
                alt227=2;
                }
                break;
            case SKIP:
                {
                alt227=3;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 227, 0, input);

                throw nvae;
            }

            switch (alt227) {
                case 1 :
                    // XQueryParser.g:1598:39: k+= STRICT
                    {
                    k=(CommonToken)match(input,STRICT,FOLLOW_STRICT_in_pm_RevalidationDecl14627); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    k_tree = (XQDTCommonTree)adaptor.create(k);
                    adaptor.addChild(root_0, k_tree);
                    }
                    if (list_k==null) list_k=new ArrayList();
                    list_k.add(k);


                    }
                    break;
                case 2 :
                    // XQueryParser.g:1598:51: k+= LAX
                    {
                    k=(CommonToken)match(input,LAX,FOLLOW_LAX_in_pm_RevalidationDecl14633); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    k_tree = (XQDTCommonTree)adaptor.create(k);
                    adaptor.addChild(root_0, k_tree);
                    }
                    if (list_k==null) list_k=new ArrayList();
                    list_k.add(k);


                    }
                    break;
                case 3 :
                    // XQueryParser.g:1598:60: k+= SKIP
                    {
                    k=(CommonToken)match(input,SKIP,FOLLOW_SKIP_in_pm_RevalidationDecl14639); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    k_tree = (XQDTCommonTree)adaptor.create(k);
                    adaptor.addChild(root_0, k_tree);
                    }
                    if (list_k==null) list_k=new ArrayList();
                    list_k.add(k);


                    }
                    break;

            }

            if ( state.backtracking==0 ) {
              ak(list_k);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (XQDTCommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (XQDTCommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "pm_RevalidationDecl"

    public static class p_InsertExprTargetChoice_return extends ParserRuleReturnScope {
        XQDTCommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "p_InsertExprTargetChoice"
    // XQueryParser.g:1602:1: p_InsertExprTargetChoice : ( ( (k+= AS (k+= FIRST | k+= LAST ) )? k+= INTO ) | ka= AFTER | kb= BEFORE );
    public final XQueryParser.p_InsertExprTargetChoice_return p_InsertExprTargetChoice() throws RecognitionException {
        XQueryParser.p_InsertExprTargetChoice_return retval = new XQueryParser.p_InsertExprTargetChoice_return();
        retval.start = input.LT(1);

        XQDTCommonTree root_0 = null;

        CommonToken ka=null;
        CommonToken kb=null;
        CommonToken k=null;
        List list_k=null;

        XQDTCommonTree ka_tree=null;
        XQDTCommonTree kb_tree=null;
        XQDTCommonTree k_tree=null;

        try {
            // XQueryParser.g:1603:9: ( ( (k+= AS (k+= FIRST | k+= LAST ) )? k+= INTO ) | ka= AFTER | kb= BEFORE )
            int alt230=3;
            switch ( input.LA(1) ) {
            case AS:
            case INTO:
                {
                alt230=1;
                }
                break;
            case AFTER:
                {
                alt230=2;
                }
                break;
            case BEFORE:
                {
                alt230=3;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 230, 0, input);

                throw nvae;
            }

            switch (alt230) {
                case 1 :
                    // XQueryParser.g:1603:11: ( (k+= AS (k+= FIRST | k+= LAST ) )? k+= INTO )
                    {
                    root_0 = (XQDTCommonTree)adaptor.nil();

                    // XQueryParser.g:1603:11: ( (k+= AS (k+= FIRST | k+= LAST ) )? k+= INTO )
                    // XQueryParser.g:1603:12: (k+= AS (k+= FIRST | k+= LAST ) )? k+= INTO
                    {
                    // XQueryParser.g:1603:12: (k+= AS (k+= FIRST | k+= LAST ) )?
                    int alt229=2;
                    int LA229_0 = input.LA(1);

                    if ( (LA229_0==AS) ) {
                        alt229=1;
                    }
                    switch (alt229) {
                        case 1 :
                            // XQueryParser.g:1603:13: k+= AS (k+= FIRST | k+= LAST )
                            {
                            k=(CommonToken)match(input,AS,FOLLOW_AS_in_p_InsertExprTargetChoice14672); if (state.failed) return retval;
                            if ( state.backtracking==0 ) {
                            k_tree = (XQDTCommonTree)adaptor.create(k);
                            adaptor.addChild(root_0, k_tree);
                            }
                            if (list_k==null) list_k=new ArrayList();
                            list_k.add(k);

                            // XQueryParser.g:1603:19: (k+= FIRST | k+= LAST )
                            int alt228=2;
                            int LA228_0 = input.LA(1);

                            if ( (LA228_0==FIRST) ) {
                                alt228=1;
                            }
                            else if ( (LA228_0==LAST) ) {
                                alt228=2;
                            }
                            else {
                                if (state.backtracking>0) {state.failed=true; return retval;}
                                NoViableAltException nvae =
                                    new NoViableAltException("", 228, 0, input);

                                throw nvae;
                            }
                            switch (alt228) {
                                case 1 :
                                    // XQueryParser.g:1603:20: k+= FIRST
                                    {
                                    k=(CommonToken)match(input,FIRST,FOLLOW_FIRST_in_p_InsertExprTargetChoice14677); if (state.failed) return retval;
                                    if ( state.backtracking==0 ) {
                                    k_tree = (XQDTCommonTree)adaptor.create(k);
                                    adaptor.addChild(root_0, k_tree);
                                    }
                                    if (list_k==null) list_k=new ArrayList();
                                    list_k.add(k);


                                    }
                                    break;
                                case 2 :
                                    // XQueryParser.g:1603:31: k+= LAST
                                    {
                                    k=(CommonToken)match(input,LAST,FOLLOW_LAST_in_p_InsertExprTargetChoice14683); if (state.failed) return retval;
                                    if ( state.backtracking==0 ) {
                                    k_tree = (XQDTCommonTree)adaptor.create(k);
                                    adaptor.addChild(root_0, k_tree);
                                    }
                                    if (list_k==null) list_k=new ArrayList();
                                    list_k.add(k);


                                    }
                                    break;

                            }


                            }
                            break;

                    }

                    k=(CommonToken)match(input,INTO,FOLLOW_INTO_in_p_InsertExprTargetChoice14690); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    k_tree = (XQDTCommonTree)adaptor.create(k);
                    adaptor.addChild(root_0, k_tree);
                    }
                    if (list_k==null) list_k=new ArrayList();
                    list_k.add(k);


                    }

                    if ( state.backtracking==0 ) {
                      ak(list_k);
                    }

                    }
                    break;
                case 2 :
                    // XQueryParser.g:1604:11: ka= AFTER
                    {
                    root_0 = (XQDTCommonTree)adaptor.nil();

                    ka=(CommonToken)match(input,AFTER,FOLLOW_AFTER_in_p_InsertExprTargetChoice14707); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    ka_tree = (XQDTCommonTree)adaptor.create(ka);
                    adaptor.addChild(root_0, ka_tree);
                    }
                    if ( state.backtracking==0 ) {
                      ak(ka);
                    }

                    }
                    break;
                case 3 :
                    // XQueryParser.g:1605:11: kb= BEFORE
                    {
                    root_0 = (XQDTCommonTree)adaptor.nil();

                    kb=(CommonToken)match(input,BEFORE,FOLLOW_BEFORE_in_p_InsertExprTargetChoice14723); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    kb_tree = (XQDTCommonTree)adaptor.create(kb);
                    adaptor.addChild(root_0, kb_tree);
                    }
                    if ( state.backtracking==0 ) {
                      ak(kb);
                    }

                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (XQDTCommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (XQDTCommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "p_InsertExprTargetChoice"

    public static class p_InsertExpr_return extends ParserRuleReturnScope {
        XQDTCommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "p_InsertExpr"
    // XQueryParser.g:1609:1: p_InsertExpr : k+= INSERT (k+= NODE | k+= NODES ) p_SourceExpr p_InsertExprTargetChoice p_TargetExpr ;
    public final XQueryParser.p_InsertExpr_return p_InsertExpr() throws RecognitionException {
        XQueryParser.p_InsertExpr_return retval = new XQueryParser.p_InsertExpr_return();
        retval.start = input.LT(1);

        XQDTCommonTree root_0 = null;

        CommonToken k=null;
        List list_k=null;
        XQueryParser.p_SourceExpr_return p_SourceExpr661 = null;

        XQueryParser.p_InsertExprTargetChoice_return p_InsertExprTargetChoice662 = null;

        XQueryParser.p_TargetExpr_return p_TargetExpr663 = null;


        XQDTCommonTree k_tree=null;

        try {
            // XQueryParser.g:1610:9: (k+= INSERT (k+= NODE | k+= NODES ) p_SourceExpr p_InsertExprTargetChoice p_TargetExpr )
            // XQueryParser.g:1610:11: k+= INSERT (k+= NODE | k+= NODES ) p_SourceExpr p_InsertExprTargetChoice p_TargetExpr
            {
            root_0 = (XQDTCommonTree)adaptor.nil();

            k=(CommonToken)match(input,INSERT,FOLLOW_INSERT_in_p_InsertExpr14753); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            k_tree = (XQDTCommonTree)adaptor.create(k);
            adaptor.addChild(root_0, k_tree);
            }
            if (list_k==null) list_k=new ArrayList();
            list_k.add(k);

            // XQueryParser.g:1610:21: (k+= NODE | k+= NODES )
            int alt231=2;
            int LA231_0 = input.LA(1);

            if ( (LA231_0==NODE) ) {
                alt231=1;
            }
            else if ( (LA231_0==NODES) ) {
                alt231=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 231, 0, input);

                throw nvae;
            }
            switch (alt231) {
                case 1 :
                    // XQueryParser.g:1610:22: k+= NODE
                    {
                    k=(CommonToken)match(input,NODE,FOLLOW_NODE_in_p_InsertExpr14758); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    k_tree = (XQDTCommonTree)adaptor.create(k);
                    adaptor.addChild(root_0, k_tree);
                    }
                    if (list_k==null) list_k=new ArrayList();
                    list_k.add(k);


                    }
                    break;
                case 2 :
                    // XQueryParser.g:1610:32: k+= NODES
                    {
                    k=(CommonToken)match(input,NODES,FOLLOW_NODES_in_p_InsertExpr14764); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    k_tree = (XQDTCommonTree)adaptor.create(k);
                    adaptor.addChild(root_0, k_tree);
                    }
                    if (list_k==null) list_k=new ArrayList();
                    list_k.add(k);


                    }
                    break;

            }

            pushFollow(FOLLOW_p_SourceExpr_in_p_InsertExpr14767);
            p_SourceExpr661=p_SourceExpr();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, p_SourceExpr661.getTree());
            pushFollow(FOLLOW_p_InsertExprTargetChoice_in_p_InsertExpr14769);
            p_InsertExprTargetChoice662=p_InsertExprTargetChoice();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, p_InsertExprTargetChoice662.getTree());
            pushFollow(FOLLOW_p_TargetExpr_in_p_InsertExpr14771);
            p_TargetExpr663=p_TargetExpr();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, p_TargetExpr663.getTree());
            if ( state.backtracking==0 ) {
              ak(list_k);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (XQDTCommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (XQDTCommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "p_InsertExpr"

    public static class p_DeleteExpr_return extends ParserRuleReturnScope {
        XQDTCommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "p_DeleteExpr"
    // XQueryParser.g:1614:1: p_DeleteExpr : k+= DELETE (k+= NODE | k+= NODES ) p_TargetExpr ;
    public final XQueryParser.p_DeleteExpr_return p_DeleteExpr() throws RecognitionException {
        XQueryParser.p_DeleteExpr_return retval = new XQueryParser.p_DeleteExpr_return();
        retval.start = input.LT(1);

        XQDTCommonTree root_0 = null;

        CommonToken k=null;
        List list_k=null;
        XQueryParser.p_TargetExpr_return p_TargetExpr664 = null;


        XQDTCommonTree k_tree=null;

        try {
            // XQueryParser.g:1615:9: (k+= DELETE (k+= NODE | k+= NODES ) p_TargetExpr )
            // XQueryParser.g:1615:11: k+= DELETE (k+= NODE | k+= NODES ) p_TargetExpr
            {
            root_0 = (XQDTCommonTree)adaptor.nil();

            k=(CommonToken)match(input,DELETE,FOLLOW_DELETE_in_p_DeleteExpr14801); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            k_tree = (XQDTCommonTree)adaptor.create(k);
            adaptor.addChild(root_0, k_tree);
            }
            if (list_k==null) list_k=new ArrayList();
            list_k.add(k);

            // XQueryParser.g:1615:21: (k+= NODE | k+= NODES )
            int alt232=2;
            int LA232_0 = input.LA(1);

            if ( (LA232_0==NODE) ) {
                alt232=1;
            }
            else if ( (LA232_0==NODES) ) {
                alt232=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 232, 0, input);

                throw nvae;
            }
            switch (alt232) {
                case 1 :
                    // XQueryParser.g:1615:22: k+= NODE
                    {
                    k=(CommonToken)match(input,NODE,FOLLOW_NODE_in_p_DeleteExpr14806); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    k_tree = (XQDTCommonTree)adaptor.create(k);
                    adaptor.addChild(root_0, k_tree);
                    }
                    if (list_k==null) list_k=new ArrayList();
                    list_k.add(k);


                    }
                    break;
                case 2 :
                    // XQueryParser.g:1615:32: k+= NODES
                    {
                    k=(CommonToken)match(input,NODES,FOLLOW_NODES_in_p_DeleteExpr14812); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    k_tree = (XQDTCommonTree)adaptor.create(k);
                    adaptor.addChild(root_0, k_tree);
                    }
                    if (list_k==null) list_k=new ArrayList();
                    list_k.add(k);


                    }
                    break;

            }

            pushFollow(FOLLOW_p_TargetExpr_in_p_DeleteExpr14815);
            p_TargetExpr664=p_TargetExpr();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, p_TargetExpr664.getTree());
            if ( state.backtracking==0 ) {
              ak(list_k);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (XQDTCommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (XQDTCommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "p_DeleteExpr"

    public static class p_ReplaceExpr_return extends ParserRuleReturnScope {
        XQDTCommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "p_ReplaceExpr"
    // XQueryParser.g:1619:1: p_ReplaceExpr : k+= REPLACE (k+= VALUE k+= OF )? k+= NODE p_ExprSingle k+= WITH p_ExprSingle ;
    public final XQueryParser.p_ReplaceExpr_return p_ReplaceExpr() throws RecognitionException {
        XQueryParser.p_ReplaceExpr_return retval = new XQueryParser.p_ReplaceExpr_return();
        retval.start = input.LT(1);

        XQDTCommonTree root_0 = null;

        CommonToken k=null;
        List list_k=null;
        XQueryParser.p_ExprSingle_return p_ExprSingle665 = null;

        XQueryParser.p_ExprSingle_return p_ExprSingle666 = null;


        XQDTCommonTree k_tree=null;

        try {
            // XQueryParser.g:1620:9: (k+= REPLACE (k+= VALUE k+= OF )? k+= NODE p_ExprSingle k+= WITH p_ExprSingle )
            // XQueryParser.g:1620:11: k+= REPLACE (k+= VALUE k+= OF )? k+= NODE p_ExprSingle k+= WITH p_ExprSingle
            {
            root_0 = (XQDTCommonTree)adaptor.nil();

            k=(CommonToken)match(input,REPLACE,FOLLOW_REPLACE_in_p_ReplaceExpr14845); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            k_tree = (XQDTCommonTree)adaptor.create(k);
            adaptor.addChild(root_0, k_tree);
            }
            if (list_k==null) list_k=new ArrayList();
            list_k.add(k);

            // XQueryParser.g:1620:22: (k+= VALUE k+= OF )?
            int alt233=2;
            int LA233_0 = input.LA(1);

            if ( (LA233_0==VALUE) ) {
                alt233=1;
            }
            switch (alt233) {
                case 1 :
                    // XQueryParser.g:1620:23: k+= VALUE k+= OF
                    {
                    k=(CommonToken)match(input,VALUE,FOLLOW_VALUE_in_p_ReplaceExpr14850); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    k_tree = (XQDTCommonTree)adaptor.create(k);
                    adaptor.addChild(root_0, k_tree);
                    }
                    if (list_k==null) list_k=new ArrayList();
                    list_k.add(k);

                    k=(CommonToken)match(input,OF,FOLLOW_OF_in_p_ReplaceExpr14854); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    k_tree = (XQDTCommonTree)adaptor.create(k);
                    adaptor.addChild(root_0, k_tree);
                    }
                    if (list_k==null) list_k=new ArrayList();
                    list_k.add(k);


                    }
                    break;

            }

            k=(CommonToken)match(input,NODE,FOLLOW_NODE_in_p_ReplaceExpr14860); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            k_tree = (XQDTCommonTree)adaptor.create(k);
            adaptor.addChild(root_0, k_tree);
            }
            if (list_k==null) list_k=new ArrayList();
            list_k.add(k);

            pushFollow(FOLLOW_p_ExprSingle_in_p_ReplaceExpr14862);
            p_ExprSingle665=p_ExprSingle();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, p_ExprSingle665.getTree());
            k=(CommonToken)match(input,WITH,FOLLOW_WITH_in_p_ReplaceExpr14866); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            k_tree = (XQDTCommonTree)adaptor.create(k);
            adaptor.addChild(root_0, k_tree);
            }
            if (list_k==null) list_k=new ArrayList();
            list_k.add(k);

            pushFollow(FOLLOW_p_ExprSingle_in_p_ReplaceExpr14868);
            p_ExprSingle666=p_ExprSingle();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, p_ExprSingle666.getTree());
            if ( state.backtracking==0 ) {
              ak(list_k);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (XQDTCommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (XQDTCommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "p_ReplaceExpr"

    public static class p_RenameExpr_return extends ParserRuleReturnScope {
        XQDTCommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "p_RenameExpr"
    // XQueryParser.g:1624:1: p_RenameExpr : k+= RENAME k+= NODE p_TargetExpr AS p_NewNameExpr ;
    public final XQueryParser.p_RenameExpr_return p_RenameExpr() throws RecognitionException {
        XQueryParser.p_RenameExpr_return retval = new XQueryParser.p_RenameExpr_return();
        retval.start = input.LT(1);

        XQDTCommonTree root_0 = null;

        CommonToken AS668=null;
        CommonToken k=null;
        List list_k=null;
        XQueryParser.p_TargetExpr_return p_TargetExpr667 = null;

        XQueryParser.p_NewNameExpr_return p_NewNameExpr669 = null;


        XQDTCommonTree AS668_tree=null;
        XQDTCommonTree k_tree=null;

        try {
            // XQueryParser.g:1625:9: (k+= RENAME k+= NODE p_TargetExpr AS p_NewNameExpr )
            // XQueryParser.g:1625:11: k+= RENAME k+= NODE p_TargetExpr AS p_NewNameExpr
            {
            root_0 = (XQDTCommonTree)adaptor.nil();

            k=(CommonToken)match(input,RENAME,FOLLOW_RENAME_in_p_RenameExpr14898); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            k_tree = (XQDTCommonTree)adaptor.create(k);
            adaptor.addChild(root_0, k_tree);
            }
            if (list_k==null) list_k=new ArrayList();
            list_k.add(k);

            k=(CommonToken)match(input,NODE,FOLLOW_NODE_in_p_RenameExpr14902); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            k_tree = (XQDTCommonTree)adaptor.create(k);
            adaptor.addChild(root_0, k_tree);
            }
            if (list_k==null) list_k=new ArrayList();
            list_k.add(k);

            pushFollow(FOLLOW_p_TargetExpr_in_p_RenameExpr14904);
            p_TargetExpr667=p_TargetExpr();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, p_TargetExpr667.getTree());
            AS668=(CommonToken)match(input,AS,FOLLOW_AS_in_p_RenameExpr14906); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            AS668_tree = (XQDTCommonTree)adaptor.create(AS668);
            adaptor.addChild(root_0, AS668_tree);
            }
            pushFollow(FOLLOW_p_NewNameExpr_in_p_RenameExpr14908);
            p_NewNameExpr669=p_NewNameExpr();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, p_NewNameExpr669.getTree());
            if ( state.backtracking==0 ) {
              ak(list_k);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (XQDTCommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (XQDTCommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "p_RenameExpr"

    public static class p_SourceExpr_return extends ParserRuleReturnScope {
        XQDTCommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "p_SourceExpr"
    // XQueryParser.g:1629:1: p_SourceExpr : p_ExprSingle ;
    public final XQueryParser.p_SourceExpr_return p_SourceExpr() throws RecognitionException {
        XQueryParser.p_SourceExpr_return retval = new XQueryParser.p_SourceExpr_return();
        retval.start = input.LT(1);

        XQDTCommonTree root_0 = null;

        XQueryParser.p_ExprSingle_return p_ExprSingle670 = null;



        try {
            // XQueryParser.g:1630:9: ( p_ExprSingle )
            // XQueryParser.g:1630:11: p_ExprSingle
            {
            root_0 = (XQDTCommonTree)adaptor.nil();

            pushFollow(FOLLOW_p_ExprSingle_in_p_SourceExpr14936);
            p_ExprSingle670=p_ExprSingle();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, p_ExprSingle670.getTree());

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (XQDTCommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (XQDTCommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "p_SourceExpr"

    public static class p_TargetExpr_return extends ParserRuleReturnScope {
        XQDTCommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "p_TargetExpr"
    // XQueryParser.g:1634:1: p_TargetExpr : p_ExprSingle ;
    public final XQueryParser.p_TargetExpr_return p_TargetExpr() throws RecognitionException {
        XQueryParser.p_TargetExpr_return retval = new XQueryParser.p_TargetExpr_return();
        retval.start = input.LT(1);

        XQDTCommonTree root_0 = null;

        XQueryParser.p_ExprSingle_return p_ExprSingle671 = null;



        try {
            // XQueryParser.g:1635:9: ( p_ExprSingle )
            // XQueryParser.g:1635:11: p_ExprSingle
            {
            root_0 = (XQDTCommonTree)adaptor.nil();

            pushFollow(FOLLOW_p_ExprSingle_in_p_TargetExpr14962);
            p_ExprSingle671=p_ExprSingle();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, p_ExprSingle671.getTree());

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (XQDTCommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (XQDTCommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "p_TargetExpr"

    public static class p_NewNameExpr_return extends ParserRuleReturnScope {
        XQDTCommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "p_NewNameExpr"
    // XQueryParser.g:1639:1: p_NewNameExpr : p_ExprSingle ;
    public final XQueryParser.p_NewNameExpr_return p_NewNameExpr() throws RecognitionException {
        XQueryParser.p_NewNameExpr_return retval = new XQueryParser.p_NewNameExpr_return();
        retval.start = input.LT(1);

        XQDTCommonTree root_0 = null;

        XQueryParser.p_ExprSingle_return p_ExprSingle672 = null;



        try {
            // XQueryParser.g:1640:9: ( p_ExprSingle )
            // XQueryParser.g:1640:11: p_ExprSingle
            {
            root_0 = (XQDTCommonTree)adaptor.nil();

            pushFollow(FOLLOW_p_ExprSingle_in_p_NewNameExpr14988);
            p_ExprSingle672=p_ExprSingle();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, p_ExprSingle672.getTree());

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (XQDTCommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (XQDTCommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "p_NewNameExpr"

    public static class p_TransformExpr_return extends ParserRuleReturnScope {
        XQDTCommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "p_TransformExpr"
    // XQueryParser.g:1644:1: p_TransformExpr : k+= COPY DOLLAR p_VarName BIND p_ExprSingle ( COMMA DOLLAR p_VarName BIND p_ExprSingle )* k+= MODIFY p_ExprSingle k+= RETURN p_ExprSingle ;
    public final XQueryParser.p_TransformExpr_return p_TransformExpr() throws RecognitionException {
        XQueryParser.p_TransformExpr_return retval = new XQueryParser.p_TransformExpr_return();
        retval.start = input.LT(1);

        XQDTCommonTree root_0 = null;

        CommonToken DOLLAR673=null;
        CommonToken BIND675=null;
        CommonToken COMMA677=null;
        CommonToken DOLLAR678=null;
        CommonToken BIND680=null;
        CommonToken k=null;
        List list_k=null;
        XQueryParser.p_VarName_return p_VarName674 = null;

        XQueryParser.p_ExprSingle_return p_ExprSingle676 = null;

        XQueryParser.p_VarName_return p_VarName679 = null;

        XQueryParser.p_ExprSingle_return p_ExprSingle681 = null;

        XQueryParser.p_ExprSingle_return p_ExprSingle682 = null;

        XQueryParser.p_ExprSingle_return p_ExprSingle683 = null;


        XQDTCommonTree DOLLAR673_tree=null;
        XQDTCommonTree BIND675_tree=null;
        XQDTCommonTree COMMA677_tree=null;
        XQDTCommonTree DOLLAR678_tree=null;
        XQDTCommonTree BIND680_tree=null;
        XQDTCommonTree k_tree=null;

        try {
            // XQueryParser.g:1645:9: (k+= COPY DOLLAR p_VarName BIND p_ExprSingle ( COMMA DOLLAR p_VarName BIND p_ExprSingle )* k+= MODIFY p_ExprSingle k+= RETURN p_ExprSingle )
            // XQueryParser.g:1645:11: k+= COPY DOLLAR p_VarName BIND p_ExprSingle ( COMMA DOLLAR p_VarName BIND p_ExprSingle )* k+= MODIFY p_ExprSingle k+= RETURN p_ExprSingle
            {
            root_0 = (XQDTCommonTree)adaptor.nil();

            k=(CommonToken)match(input,COPY,FOLLOW_COPY_in_p_TransformExpr15016); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            k_tree = (XQDTCommonTree)adaptor.create(k);
            adaptor.addChild(root_0, k_tree);
            }
            if (list_k==null) list_k=new ArrayList();
            list_k.add(k);

            DOLLAR673=(CommonToken)match(input,DOLLAR,FOLLOW_DOLLAR_in_p_TransformExpr15018); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            DOLLAR673_tree = (XQDTCommonTree)adaptor.create(DOLLAR673);
            adaptor.addChild(root_0, DOLLAR673_tree);
            }
            pushFollow(FOLLOW_p_VarName_in_p_TransformExpr15020);
            p_VarName674=p_VarName();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, p_VarName674.getTree());
            BIND675=(CommonToken)match(input,BIND,FOLLOW_BIND_in_p_TransformExpr15022); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            BIND675_tree = (XQDTCommonTree)adaptor.create(BIND675);
            adaptor.addChild(root_0, BIND675_tree);
            }
            pushFollow(FOLLOW_p_ExprSingle_in_p_TransformExpr15024);
            p_ExprSingle676=p_ExprSingle();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, p_ExprSingle676.getTree());
            // XQueryParser.g:1645:54: ( COMMA DOLLAR p_VarName BIND p_ExprSingle )*
            loop234:
            do {
                int alt234=2;
                int LA234_0 = input.LA(1);

                if ( (LA234_0==COMMA) ) {
                    alt234=1;
                }


                switch (alt234) {
            	case 1 :
            	    // XQueryParser.g:1645:55: COMMA DOLLAR p_VarName BIND p_ExprSingle
            	    {
            	    COMMA677=(CommonToken)match(input,COMMA,FOLLOW_COMMA_in_p_TransformExpr15027); if (state.failed) return retval;
            	    if ( state.backtracking==0 ) {
            	    COMMA677_tree = (XQDTCommonTree)adaptor.create(COMMA677);
            	    adaptor.addChild(root_0, COMMA677_tree);
            	    }
            	    DOLLAR678=(CommonToken)match(input,DOLLAR,FOLLOW_DOLLAR_in_p_TransformExpr15029); if (state.failed) return retval;
            	    if ( state.backtracking==0 ) {
            	    DOLLAR678_tree = (XQDTCommonTree)adaptor.create(DOLLAR678);
            	    adaptor.addChild(root_0, DOLLAR678_tree);
            	    }
            	    pushFollow(FOLLOW_p_VarName_in_p_TransformExpr15031);
            	    p_VarName679=p_VarName();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, p_VarName679.getTree());
            	    BIND680=(CommonToken)match(input,BIND,FOLLOW_BIND_in_p_TransformExpr15033); if (state.failed) return retval;
            	    if ( state.backtracking==0 ) {
            	    BIND680_tree = (XQDTCommonTree)adaptor.create(BIND680);
            	    adaptor.addChild(root_0, BIND680_tree);
            	    }
            	    pushFollow(FOLLOW_p_ExprSingle_in_p_TransformExpr15035);
            	    p_ExprSingle681=p_ExprSingle();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, p_ExprSingle681.getTree());

            	    }
            	    break;

            	default :
            	    break loop234;
                }
            } while (true);

            k=(CommonToken)match(input,MODIFY,FOLLOW_MODIFY_in_p_TransformExpr15041); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            k_tree = (XQDTCommonTree)adaptor.create(k);
            adaptor.addChild(root_0, k_tree);
            }
            if (list_k==null) list_k=new ArrayList();
            list_k.add(k);

            pushFollow(FOLLOW_p_ExprSingle_in_p_TransformExpr15043);
            p_ExprSingle682=p_ExprSingle();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, p_ExprSingle682.getTree());
            k=(CommonToken)match(input,RETURN,FOLLOW_RETURN_in_p_TransformExpr15047); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            k_tree = (XQDTCommonTree)adaptor.create(k);
            adaptor.addChild(root_0, k_tree);
            }
            if (list_k==null) list_k=new ArrayList();
            list_k.add(k);

            pushFollow(FOLLOW_p_ExprSingle_in_p_TransformExpr15049);
            p_ExprSingle683=p_ExprSingle();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, p_ExprSingle683.getTree());
            if ( state.backtracking==0 ) {
              ak(list_k);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (XQDTCommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (XQDTCommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "p_TransformExpr"

    public static class pm_ApplyExpr_return extends ParserRuleReturnScope {
        XQDTCommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "pm_ApplyExpr"
    // XQueryParser.g:1655:1: pm_ApplyExpr : p_ConcatExpr SEMICOLON ;
    public final XQueryParser.pm_ApplyExpr_return pm_ApplyExpr() throws RecognitionException {
        XQueryParser.pm_ApplyExpr_return retval = new XQueryParser.pm_ApplyExpr_return();
        retval.start = input.LT(1);

        XQDTCommonTree root_0 = null;

        CommonToken SEMICOLON685=null;
        XQueryParser.p_ConcatExpr_return p_ConcatExpr684 = null;


        XQDTCommonTree SEMICOLON685_tree=null;

        try {
            // XQueryParser.g:1656:9: ( p_ConcatExpr SEMICOLON )
            // XQueryParser.g:1656:11: p_ConcatExpr SEMICOLON
            {
            root_0 = (XQDTCommonTree)adaptor.nil();

            pushFollow(FOLLOW_p_ConcatExpr_in_pm_ApplyExpr15084);
            p_ConcatExpr684=p_ConcatExpr();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, p_ConcatExpr684.getTree());
            SEMICOLON685=(CommonToken)match(input,SEMICOLON,FOLLOW_SEMICOLON_in_pm_ApplyExpr15086); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            SEMICOLON685_tree = (XQDTCommonTree)adaptor.create(SEMICOLON685);
            adaptor.addChild(root_0, SEMICOLON685_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (XQDTCommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (XQDTCommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "pm_ApplyExpr"

    public static class p_ConcatExpr_return extends ParserRuleReturnScope {
        XQDTCommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "p_ConcatExpr"
    // XQueryParser.g:1660:1: p_ConcatExpr : p_ExprSingle ( COMMA p_ExprSingle )* ;
    public final XQueryParser.p_ConcatExpr_return p_ConcatExpr() throws RecognitionException {
        XQueryParser.p_ConcatExpr_return retval = new XQueryParser.p_ConcatExpr_return();
        retval.start = input.LT(1);

        XQDTCommonTree root_0 = null;

        CommonToken COMMA687=null;
        XQueryParser.p_ExprSingle_return p_ExprSingle686 = null;

        XQueryParser.p_ExprSingle_return p_ExprSingle688 = null;


        XQDTCommonTree COMMA687_tree=null;

        try {
            // XQueryParser.g:1661:9: ( p_ExprSingle ( COMMA p_ExprSingle )* )
            // XQueryParser.g:1661:11: p_ExprSingle ( COMMA p_ExprSingle )*
            {
            root_0 = (XQDTCommonTree)adaptor.nil();

            pushFollow(FOLLOW_p_ExprSingle_in_p_ConcatExpr15112);
            p_ExprSingle686=p_ExprSingle();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, p_ExprSingle686.getTree());
            // XQueryParser.g:1661:24: ( COMMA p_ExprSingle )*
            loop235:
            do {
                int alt235=2;
                int LA235_0 = input.LA(1);

                if ( (LA235_0==COMMA) ) {
                    alt235=1;
                }


                switch (alt235) {
            	case 1 :
            	    // XQueryParser.g:1661:25: COMMA p_ExprSingle
            	    {
            	    COMMA687=(CommonToken)match(input,COMMA,FOLLOW_COMMA_in_p_ConcatExpr15115); if (state.failed) return retval;
            	    if ( state.backtracking==0 ) {
            	    COMMA687_tree = (XQDTCommonTree)adaptor.create(COMMA687);
            	    adaptor.addChild(root_0, COMMA687_tree);
            	    }
            	    pushFollow(FOLLOW_p_ExprSingle_in_p_ConcatExpr15117);
            	    p_ExprSingle688=p_ExprSingle();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, p_ExprSingle688.getTree());

            	    }
            	    break;

            	default :
            	    break loop235;
                }
            } while (true);


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (XQDTCommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (XQDTCommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "p_ConcatExpr"

    public static class p_BlockExpr_return extends ParserRuleReturnScope {
        XQDTCommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "p_BlockExpr"
    // XQueryParser.g:1665:1: p_BlockExpr : kb= BLOCK p_Block ;
    public final XQueryParser.p_BlockExpr_return p_BlockExpr() throws RecognitionException {
        XQueryParser.p_BlockExpr_return retval = new XQueryParser.p_BlockExpr_return();
        retval.start = input.LT(1);

        XQDTCommonTree root_0 = null;

        CommonToken kb=null;
        XQueryParser.p_Block_return p_Block689 = null;


        XQDTCommonTree kb_tree=null;

        try {
            // XQueryParser.g:1666:9: (kb= BLOCK p_Block )
            // XQueryParser.g:1666:11: kb= BLOCK p_Block
            {
            root_0 = (XQDTCommonTree)adaptor.nil();

            kb=(CommonToken)match(input,BLOCK,FOLLOW_BLOCK_in_p_BlockExpr15147); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            kb_tree = (XQDTCommonTree)adaptor.create(kb);
            adaptor.addChild(root_0, kb_tree);
            }
            if ( state.backtracking==0 ) {
              ak(kb);
            }
            pushFollow(FOLLOW_p_Block_in_p_BlockExpr15151);
            p_Block689=p_Block();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, p_Block689.getTree());

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (XQDTCommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (XQDTCommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "p_BlockExpr"

    public static class p_Block_return extends ParserRuleReturnScope {
        XQDTCommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "p_Block"
    // XQueryParser.g:1670:1: p_Block : LBRACKET bd= pm_BlockDecls bb= p_BlockBody RBRACKET -> ^( Block $bd $bb) ;
    public final XQueryParser.p_Block_return p_Block() throws RecognitionException {
        XQueryParser.p_Block_return retval = new XQueryParser.p_Block_return();
        retval.start = input.LT(1);

        XQDTCommonTree root_0 = null;

        CommonToken LBRACKET690=null;
        CommonToken RBRACKET691=null;
        XQueryParser.pm_BlockDecls_return bd = null;

        XQueryParser.p_BlockBody_return bb = null;


        XQDTCommonTree LBRACKET690_tree=null;
        XQDTCommonTree RBRACKET691_tree=null;
        RewriteRuleTokenStream stream_LBRACKET=new RewriteRuleTokenStream(adaptor,"token LBRACKET");
        RewriteRuleTokenStream stream_RBRACKET=new RewriteRuleTokenStream(adaptor,"token RBRACKET");
        RewriteRuleSubtreeStream stream_pm_BlockDecls=new RewriteRuleSubtreeStream(adaptor,"rule pm_BlockDecls");
        RewriteRuleSubtreeStream stream_p_BlockBody=new RewriteRuleSubtreeStream(adaptor,"rule p_BlockBody");
        try {
            // XQueryParser.g:1671:9: ( LBRACKET bd= pm_BlockDecls bb= p_BlockBody RBRACKET -> ^( Block $bd $bb) )
            // XQueryParser.g:1671:11: LBRACKET bd= pm_BlockDecls bb= p_BlockBody RBRACKET
            {
            LBRACKET690=(CommonToken)match(input,LBRACKET,FOLLOW_LBRACKET_in_p_Block15177); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_LBRACKET.add(LBRACKET690);

            pushFollow(FOLLOW_pm_BlockDecls_in_p_Block15181);
            bd=pm_BlockDecls();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_pm_BlockDecls.add(bd.getTree());
            pushFollow(FOLLOW_p_BlockBody_in_p_Block15185);
            bb=p_BlockBody();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_p_BlockBody.add(bb.getTree());
            RBRACKET691=(CommonToken)match(input,RBRACKET,FOLLOW_RBRACKET_in_p_Block15187); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_RBRACKET.add(RBRACKET691);



            // AST REWRITE
            // elements: bd, bb
            // token labels: 
            // rule labels: bb, retval, bd
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_bb=new RewriteRuleSubtreeStream(adaptor,"rule bb",bb!=null?bb.tree:null);
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
            RewriteRuleSubtreeStream stream_bd=new RewriteRuleSubtreeStream(adaptor,"rule bd",bd!=null?bd.tree:null);

            root_0 = (XQDTCommonTree)adaptor.nil();
            // 1672:17: -> ^( Block $bd $bb)
            {
                // XQueryParser.g:1672:20: ^( Block $bd $bb)
                {
                XQDTCommonTree root_1 = (XQDTCommonTree)adaptor.nil();
                root_1 = (XQDTCommonTree)adaptor.becomeRoot((XQDTCommonTree)adaptor.create(Block, "Block"), root_1);

                adaptor.addChild(root_1, stream_bd.nextTree());
                adaptor.addChild(root_1, stream_bb.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (XQDTCommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (XQDTCommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "p_Block"

    public static class pm_BlockDecls_return extends ParserRuleReturnScope {
        XQDTCommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "pm_BlockDecls"
    // XQueryParser.g:1676:1: pm_BlockDecls : (bvd+= pm_BlockVarDecl )* -> ^( BlockDecls ( $bvd)* ) ;
    public final XQueryParser.pm_BlockDecls_return pm_BlockDecls() throws RecognitionException {
        XQueryParser.pm_BlockDecls_return retval = new XQueryParser.pm_BlockDecls_return();
        retval.start = input.LT(1);

        XQDTCommonTree root_0 = null;

        List list_bvd=null;
        RuleReturnScope bvd = null;
        RewriteRuleSubtreeStream stream_pm_BlockVarDecl=new RewriteRuleSubtreeStream(adaptor,"rule pm_BlockVarDecl");
        try {
            // XQueryParser.g:1677:9: ( (bvd+= pm_BlockVarDecl )* -> ^( BlockDecls ( $bvd)* ) )
            // XQueryParser.g:1677:11: (bvd+= pm_BlockVarDecl )*
            {
            // XQueryParser.g:1677:14: (bvd+= pm_BlockVarDecl )*
            loop236:
            do {
                int alt236=2;
                int LA236_0 = input.LA(1);

                if ( (LA236_0==DECLARE) ) {
                    int LA236_2 = input.LA(2);

                    if ( (LA236_2==DOLLAR) ) {
                        alt236=1;
                    }


                }


                switch (alt236) {
            	case 1 :
            	    // XQueryParser.g:1677:14: bvd+= pm_BlockVarDecl
            	    {
            	    pushFollow(FOLLOW_pm_BlockVarDecl_in_pm_BlockDecls15243);
            	    bvd=pm_BlockVarDecl();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) stream_pm_BlockVarDecl.add(bvd.getTree());
            	    if (list_bvd==null) list_bvd=new ArrayList();
            	    list_bvd.add(bvd.getTree());


            	    }
            	    break;

            	default :
            	    break loop236;
                }
            } while (true);



            // AST REWRITE
            // elements: bvd
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: bvd
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
            RewriteRuleSubtreeStream stream_bvd=new RewriteRuleSubtreeStream(adaptor,"token bvd",list_bvd);
            root_0 = (XQDTCommonTree)adaptor.nil();
            // 1678:17: -> ^( BlockDecls ( $bvd)* )
            {
                // XQueryParser.g:1678:20: ^( BlockDecls ( $bvd)* )
                {
                XQDTCommonTree root_1 = (XQDTCommonTree)adaptor.nil();
                root_1 = (XQDTCommonTree)adaptor.becomeRoot((XQDTCommonTree)adaptor.create(BlockDecls, "BlockDecls"), root_1);

                // XQueryParser.g:1678:33: ( $bvd)*
                while ( stream_bvd.hasNext() ) {
                    adaptor.addChild(root_1, stream_bvd.nextTree());

                }
                stream_bvd.reset();

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (XQDTCommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (XQDTCommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "pm_BlockDecls"

    public static class pm_BlockVarDecl_return extends ParserRuleReturnScope {
        XQDTCommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "pm_BlockVarDecl"
    // XQueryParser.g:1682:1: pm_BlockVarDecl : kd= DECLARE DOLLAR qn= p_VarName (td= p_TypeDeclaration )? ( BIND es= p_ExprSingle )? ( COMMA DOLLAR p_VarName ( p_TypeDeclaration )? ( BIND p_ExprSingle )? )* SEMICOLON -> ^( BlockVarDecl $qn ( $td)? ( $es)? ) ;
    public final XQueryParser.pm_BlockVarDecl_return pm_BlockVarDecl() throws RecognitionException {
        XQueryParser.pm_BlockVarDecl_return retval = new XQueryParser.pm_BlockVarDecl_return();
        retval.start = input.LT(1);

        XQDTCommonTree root_0 = null;

        CommonToken kd=null;
        CommonToken DOLLAR692=null;
        CommonToken BIND693=null;
        CommonToken COMMA694=null;
        CommonToken DOLLAR695=null;
        CommonToken BIND698=null;
        CommonToken SEMICOLON700=null;
        XQueryParser.p_VarName_return qn = null;

        XQueryParser.p_TypeDeclaration_return td = null;

        XQueryParser.p_ExprSingle_return es = null;

        XQueryParser.p_VarName_return p_VarName696 = null;

        XQueryParser.p_TypeDeclaration_return p_TypeDeclaration697 = null;

        XQueryParser.p_ExprSingle_return p_ExprSingle699 = null;


        XQDTCommonTree kd_tree=null;
        XQDTCommonTree DOLLAR692_tree=null;
        XQDTCommonTree BIND693_tree=null;
        XQDTCommonTree COMMA694_tree=null;
        XQDTCommonTree DOLLAR695_tree=null;
        XQDTCommonTree BIND698_tree=null;
        XQDTCommonTree SEMICOLON700_tree=null;
        RewriteRuleTokenStream stream_COMMA=new RewriteRuleTokenStream(adaptor,"token COMMA");
        RewriteRuleTokenStream stream_DOLLAR=new RewriteRuleTokenStream(adaptor,"token DOLLAR");
        RewriteRuleTokenStream stream_SEMICOLON=new RewriteRuleTokenStream(adaptor,"token SEMICOLON");
        RewriteRuleTokenStream stream_BIND=new RewriteRuleTokenStream(adaptor,"token BIND");
        RewriteRuleTokenStream stream_DECLARE=new RewriteRuleTokenStream(adaptor,"token DECLARE");
        RewriteRuleSubtreeStream stream_p_ExprSingle=new RewriteRuleSubtreeStream(adaptor,"rule p_ExprSingle");
        RewriteRuleSubtreeStream stream_p_TypeDeclaration=new RewriteRuleSubtreeStream(adaptor,"rule p_TypeDeclaration");
        RewriteRuleSubtreeStream stream_p_VarName=new RewriteRuleSubtreeStream(adaptor,"rule p_VarName");
        try {
            // XQueryParser.g:1683:9: (kd= DECLARE DOLLAR qn= p_VarName (td= p_TypeDeclaration )? ( BIND es= p_ExprSingle )? ( COMMA DOLLAR p_VarName ( p_TypeDeclaration )? ( BIND p_ExprSingle )? )* SEMICOLON -> ^( BlockVarDecl $qn ( $td)? ( $es)? ) )
            // XQueryParser.g:1683:11: kd= DECLARE DOLLAR qn= p_VarName (td= p_TypeDeclaration )? ( BIND es= p_ExprSingle )? ( COMMA DOLLAR p_VarName ( p_TypeDeclaration )? ( BIND p_ExprSingle )? )* SEMICOLON
            {
            kd=(CommonToken)match(input,DECLARE,FOLLOW_DECLARE_in_pm_BlockVarDecl15298); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_DECLARE.add(kd);

            if ( state.backtracking==0 ) {
              ak(kd);
            }
            DOLLAR692=(CommonToken)match(input,DOLLAR,FOLLOW_DOLLAR_in_pm_BlockVarDecl15302); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_DOLLAR.add(DOLLAR692);

            pushFollow(FOLLOW_p_VarName_in_pm_BlockVarDecl15306);
            qn=p_VarName();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_p_VarName.add(qn.getTree());
            // XQueryParser.g:1683:55: (td= p_TypeDeclaration )?
            int alt237=2;
            int LA237_0 = input.LA(1);

            if ( (LA237_0==AS) ) {
                alt237=1;
            }
            switch (alt237) {
                case 1 :
                    // XQueryParser.g:1683:55: td= p_TypeDeclaration
                    {
                    pushFollow(FOLLOW_p_TypeDeclaration_in_pm_BlockVarDecl15310);
                    td=p_TypeDeclaration();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_p_TypeDeclaration.add(td.getTree());

                    }
                    break;

            }

            // XQueryParser.g:1683:75: ( BIND es= p_ExprSingle )?
            int alt238=2;
            int LA238_0 = input.LA(1);

            if ( (LA238_0==BIND) ) {
                alt238=1;
            }
            switch (alt238) {
                case 1 :
                    // XQueryParser.g:1683:76: BIND es= p_ExprSingle
                    {
                    BIND693=(CommonToken)match(input,BIND,FOLLOW_BIND_in_pm_BlockVarDecl15314); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_BIND.add(BIND693);

                    pushFollow(FOLLOW_p_ExprSingle_in_pm_BlockVarDecl15318);
                    es=p_ExprSingle();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_p_ExprSingle.add(es.getTree());

                    }
                    break;

            }

            // XQueryParser.g:1683:99: ( COMMA DOLLAR p_VarName ( p_TypeDeclaration )? ( BIND p_ExprSingle )? )*
            loop241:
            do {
                int alt241=2;
                int LA241_0 = input.LA(1);

                if ( (LA241_0==COMMA) ) {
                    alt241=1;
                }


                switch (alt241) {
            	case 1 :
            	    // XQueryParser.g:1683:100: COMMA DOLLAR p_VarName ( p_TypeDeclaration )? ( BIND p_ExprSingle )?
            	    {
            	    COMMA694=(CommonToken)match(input,COMMA,FOLLOW_COMMA_in_pm_BlockVarDecl15323); if (state.failed) return retval; 
            	    if ( state.backtracking==0 ) stream_COMMA.add(COMMA694);

            	    DOLLAR695=(CommonToken)match(input,DOLLAR,FOLLOW_DOLLAR_in_pm_BlockVarDecl15325); if (state.failed) return retval; 
            	    if ( state.backtracking==0 ) stream_DOLLAR.add(DOLLAR695);

            	    pushFollow(FOLLOW_p_VarName_in_pm_BlockVarDecl15327);
            	    p_VarName696=p_VarName();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) stream_p_VarName.add(p_VarName696.getTree());
            	    // XQueryParser.g:1683:123: ( p_TypeDeclaration )?
            	    int alt239=2;
            	    int LA239_0 = input.LA(1);

            	    if ( (LA239_0==AS) ) {
            	        alt239=1;
            	    }
            	    switch (alt239) {
            	        case 1 :
            	            // XQueryParser.g:1683:123: p_TypeDeclaration
            	            {
            	            pushFollow(FOLLOW_p_TypeDeclaration_in_pm_BlockVarDecl15329);
            	            p_TypeDeclaration697=p_TypeDeclaration();

            	            state._fsp--;
            	            if (state.failed) return retval;
            	            if ( state.backtracking==0 ) stream_p_TypeDeclaration.add(p_TypeDeclaration697.getTree());

            	            }
            	            break;

            	    }

            	    // XQueryParser.g:1683:142: ( BIND p_ExprSingle )?
            	    int alt240=2;
            	    int LA240_0 = input.LA(1);

            	    if ( (LA240_0==BIND) ) {
            	        alt240=1;
            	    }
            	    switch (alt240) {
            	        case 1 :
            	            // XQueryParser.g:1683:143: BIND p_ExprSingle
            	            {
            	            BIND698=(CommonToken)match(input,BIND,FOLLOW_BIND_in_pm_BlockVarDecl15333); if (state.failed) return retval; 
            	            if ( state.backtracking==0 ) stream_BIND.add(BIND698);

            	            pushFollow(FOLLOW_p_ExprSingle_in_pm_BlockVarDecl15335);
            	            p_ExprSingle699=p_ExprSingle();

            	            state._fsp--;
            	            if (state.failed) return retval;
            	            if ( state.backtracking==0 ) stream_p_ExprSingle.add(p_ExprSingle699.getTree());

            	            }
            	            break;

            	    }


            	    }
            	    break;

            	default :
            	    break loop241;
                }
            } while (true);

            SEMICOLON700=(CommonToken)match(input,SEMICOLON,FOLLOW_SEMICOLON_in_pm_BlockVarDecl15341); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_SEMICOLON.add(SEMICOLON700);



            // AST REWRITE
            // elements: td, qn, es
            // token labels: 
            // rule labels: td, qn, es, retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_td=new RewriteRuleSubtreeStream(adaptor,"rule td",td!=null?td.tree:null);
            RewriteRuleSubtreeStream stream_qn=new RewriteRuleSubtreeStream(adaptor,"rule qn",qn!=null?qn.tree:null);
            RewriteRuleSubtreeStream stream_es=new RewriteRuleSubtreeStream(adaptor,"rule es",es!=null?es.tree:null);
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (XQDTCommonTree)adaptor.nil();
            // 1684:17: -> ^( BlockVarDecl $qn ( $td)? ( $es)? )
            {
                // XQueryParser.g:1684:21: ^( BlockVarDecl $qn ( $td)? ( $es)? )
                {
                XQDTCommonTree root_1 = (XQDTCommonTree)adaptor.nil();
                root_1 = (XQDTCommonTree)adaptor.becomeRoot((XQDTCommonTree)adaptor.create(BlockVarDecl, "BlockVarDecl"), root_1);

                adaptor.addChild(root_1, stream_qn.nextTree());
                // XQueryParser.g:1684:40: ( $td)?
                if ( stream_td.hasNext() ) {
                    adaptor.addChild(root_1, stream_td.nextTree());

                }
                stream_td.reset();
                // XQueryParser.g:1684:45: ( $es)?
                if ( stream_es.hasNext() ) {
                    adaptor.addChild(root_1, stream_es.nextTree());

                }
                stream_es.reset();

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (XQDTCommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (XQDTCommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "pm_BlockVarDecl"

    public static class p_BlockBody_return extends ParserRuleReturnScope {
        XQDTCommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "p_BlockBody"
    // XQueryParser.g:1688:1: p_BlockBody : pm_Expr ;
    public final XQueryParser.p_BlockBody_return p_BlockBody() throws RecognitionException {
        XQueryParser.p_BlockBody_return retval = new XQueryParser.p_BlockBody_return();
        retval.start = input.LT(1);

        XQDTCommonTree root_0 = null;

        XQueryParser.pm_Expr_return pm_Expr701 = null;



        try {
            // XQueryParser.g:1689:9: ( pm_Expr )
            // XQueryParser.g:1689:11: pm_Expr
            {
            root_0 = (XQDTCommonTree)adaptor.nil();

            pushFollow(FOLLOW_pm_Expr_in_p_BlockBody15401);
            pm_Expr701=pm_Expr();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, pm_Expr701.getTree());

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (XQDTCommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (XQDTCommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "p_BlockBody"

    public static class p_AssignmentExpr_return extends ParserRuleReturnScope {
        XQDTCommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "p_AssignmentExpr"
    // XQueryParser.g:1693:1: p_AssignmentExpr : ks= SET DOLLAR p_VarName BIND p_ExprSingle ;
    public final XQueryParser.p_AssignmentExpr_return p_AssignmentExpr() throws RecognitionException {
        XQueryParser.p_AssignmentExpr_return retval = new XQueryParser.p_AssignmentExpr_return();
        retval.start = input.LT(1);

        XQDTCommonTree root_0 = null;

        CommonToken ks=null;
        CommonToken DOLLAR702=null;
        CommonToken BIND704=null;
        XQueryParser.p_VarName_return p_VarName703 = null;

        XQueryParser.p_ExprSingle_return p_ExprSingle705 = null;


        XQDTCommonTree ks_tree=null;
        XQDTCommonTree DOLLAR702_tree=null;
        XQDTCommonTree BIND704_tree=null;

        try {
            // XQueryParser.g:1694:9: (ks= SET DOLLAR p_VarName BIND p_ExprSingle )
            // XQueryParser.g:1694:11: ks= SET DOLLAR p_VarName BIND p_ExprSingle
            {
            root_0 = (XQDTCommonTree)adaptor.nil();

            ks=(CommonToken)match(input,SET,FOLLOW_SET_in_p_AssignmentExpr15429); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            ks_tree = (XQDTCommonTree)adaptor.create(ks);
            adaptor.addChild(root_0, ks_tree);
            }
            if ( state.backtracking==0 ) {
              ak(ks);
            }
            DOLLAR702=(CommonToken)match(input,DOLLAR,FOLLOW_DOLLAR_in_p_AssignmentExpr15433); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            DOLLAR702_tree = (XQDTCommonTree)adaptor.create(DOLLAR702);
            adaptor.addChild(root_0, DOLLAR702_tree);
            }
            pushFollow(FOLLOW_p_VarName_in_p_AssignmentExpr15435);
            p_VarName703=p_VarName();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, p_VarName703.getTree());
            BIND704=(CommonToken)match(input,BIND,FOLLOW_BIND_in_p_AssignmentExpr15437); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            BIND704_tree = (XQDTCommonTree)adaptor.create(BIND704);
            adaptor.addChild(root_0, BIND704_tree);
            }
            pushFollow(FOLLOW_p_ExprSingle_in_p_AssignmentExpr15439);
            p_ExprSingle705=p_ExprSingle();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, p_ExprSingle705.getTree());

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (XQDTCommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (XQDTCommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "p_AssignmentExpr"

    public static class p_ExitExpr_return extends ParserRuleReturnScope {
        XQDTCommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "p_ExitExpr"
    // XQueryParser.g:1698:1: p_ExitExpr : ke= EXIT kr= RETURNING p_ExprSingle ;
    public final XQueryParser.p_ExitExpr_return p_ExitExpr() throws RecognitionException {
        XQueryParser.p_ExitExpr_return retval = new XQueryParser.p_ExitExpr_return();
        retval.start = input.LT(1);

        XQDTCommonTree root_0 = null;

        CommonToken ke=null;
        CommonToken kr=null;
        XQueryParser.p_ExprSingle_return p_ExprSingle706 = null;


        XQDTCommonTree ke_tree=null;
        XQDTCommonTree kr_tree=null;

        try {
            // XQueryParser.g:1699:9: (ke= EXIT kr= RETURNING p_ExprSingle )
            // XQueryParser.g:1699:11: ke= EXIT kr= RETURNING p_ExprSingle
            {
            root_0 = (XQDTCommonTree)adaptor.nil();

            ke=(CommonToken)match(input,EXIT,FOLLOW_EXIT_in_p_ExitExpr15467); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            ke_tree = (XQDTCommonTree)adaptor.create(ke);
            adaptor.addChild(root_0, ke_tree);
            }
            if ( state.backtracking==0 ) {
              ak(ke);
            }
            kr=(CommonToken)match(input,RETURNING,FOLLOW_RETURNING_in_p_ExitExpr15473); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            kr_tree = (XQDTCommonTree)adaptor.create(kr);
            adaptor.addChild(root_0, kr_tree);
            }
            if ( state.backtracking==0 ) {
              ak(kr);
            }
            pushFollow(FOLLOW_p_ExprSingle_in_p_ExitExpr15477);
            p_ExprSingle706=p_ExprSingle();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, p_ExprSingle706.getTree());

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (XQDTCommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (XQDTCommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "p_ExitExpr"

    public static class p_WhileExpr_return extends ParserRuleReturnScope {
        XQDTCommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "p_WhileExpr"
    // XQueryParser.g:1703:1: p_WhileExpr : kw= WHILE LPAREN p_ExprSingle RPAREN p_WhileBody ;
    public final XQueryParser.p_WhileExpr_return p_WhileExpr() throws RecognitionException {
        XQueryParser.p_WhileExpr_return retval = new XQueryParser.p_WhileExpr_return();
        retval.start = input.LT(1);

        XQDTCommonTree root_0 = null;

        CommonToken kw=null;
        CommonToken LPAREN707=null;
        CommonToken RPAREN709=null;
        XQueryParser.p_ExprSingle_return p_ExprSingle708 = null;

        XQueryParser.p_WhileBody_return p_WhileBody710 = null;


        XQDTCommonTree kw_tree=null;
        XQDTCommonTree LPAREN707_tree=null;
        XQDTCommonTree RPAREN709_tree=null;

        try {
            // XQueryParser.g:1704:9: (kw= WHILE LPAREN p_ExprSingle RPAREN p_WhileBody )
            // XQueryParser.g:1704:11: kw= WHILE LPAREN p_ExprSingle RPAREN p_WhileBody
            {
            root_0 = (XQDTCommonTree)adaptor.nil();

            kw=(CommonToken)match(input,WHILE,FOLLOW_WHILE_in_p_WhileExpr15505); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            kw_tree = (XQDTCommonTree)adaptor.create(kw);
            adaptor.addChild(root_0, kw_tree);
            }
            if ( state.backtracking==0 ) {
              ak(kw);
            }
            LPAREN707=(CommonToken)match(input,LPAREN,FOLLOW_LPAREN_in_p_WhileExpr15509); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            LPAREN707_tree = (XQDTCommonTree)adaptor.create(LPAREN707);
            adaptor.addChild(root_0, LPAREN707_tree);
            }
            pushFollow(FOLLOW_p_ExprSingle_in_p_WhileExpr15511);
            p_ExprSingle708=p_ExprSingle();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, p_ExprSingle708.getTree());
            RPAREN709=(CommonToken)match(input,RPAREN,FOLLOW_RPAREN_in_p_WhileExpr15513); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            RPAREN709_tree = (XQDTCommonTree)adaptor.create(RPAREN709);
            adaptor.addChild(root_0, RPAREN709_tree);
            }
            pushFollow(FOLLOW_p_WhileBody_in_p_WhileExpr15515);
            p_WhileBody710=p_WhileBody();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, p_WhileBody710.getTree());

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (XQDTCommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (XQDTCommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "p_WhileExpr"

    public static class p_WhileBody_return extends ParserRuleReturnScope {
        XQDTCommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "p_WhileBody"
    // XQueryParser.g:1708:1: p_WhileBody : p_Block ;
    public final XQueryParser.p_WhileBody_return p_WhileBody() throws RecognitionException {
        XQueryParser.p_WhileBody_return retval = new XQueryParser.p_WhileBody_return();
        retval.start = input.LT(1);

        XQDTCommonTree root_0 = null;

        XQueryParser.p_Block_return p_Block711 = null;



        try {
            // XQueryParser.g:1709:9: ( p_Block )
            // XQueryParser.g:1709:11: p_Block
            {
            root_0 = (XQDTCommonTree)adaptor.nil();

            pushFollow(FOLLOW_p_Block_in_p_WhileBody15541);
            p_Block711=p_Block();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, p_Block711.getTree());

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (XQDTCommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (XQDTCommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "p_WhileBody"

    public static class p_SwitchExpr_return extends ParserRuleReturnScope {
        XQDTCommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "p_SwitchExpr"
    // XQueryParser.g:1718:1: p_SwitchExpr : k+= SWITCH LPAREN pm_Expr RPAREN ( p_SwitchCaseClause )+ k+= DEFAULT k+= RETURN p_ExprSingle ;
    public final XQueryParser.p_SwitchExpr_return p_SwitchExpr() throws RecognitionException {
        XQueryParser.p_SwitchExpr_return retval = new XQueryParser.p_SwitchExpr_return();
        retval.start = input.LT(1);

        XQDTCommonTree root_0 = null;

        CommonToken LPAREN712=null;
        CommonToken RPAREN714=null;
        CommonToken k=null;
        List list_k=null;
        XQueryParser.pm_Expr_return pm_Expr713 = null;

        XQueryParser.p_SwitchCaseClause_return p_SwitchCaseClause715 = null;

        XQueryParser.p_ExprSingle_return p_ExprSingle716 = null;


        XQDTCommonTree LPAREN712_tree=null;
        XQDTCommonTree RPAREN714_tree=null;
        XQDTCommonTree k_tree=null;

        try {
            // XQueryParser.g:1719:9: (k+= SWITCH LPAREN pm_Expr RPAREN ( p_SwitchCaseClause )+ k+= DEFAULT k+= RETURN p_ExprSingle )
            // XQueryParser.g:1719:11: k+= SWITCH LPAREN pm_Expr RPAREN ( p_SwitchCaseClause )+ k+= DEFAULT k+= RETURN p_ExprSingle
            {
            root_0 = (XQDTCommonTree)adaptor.nil();

            k=(CommonToken)match(input,SWITCH,FOLLOW_SWITCH_in_p_SwitchExpr15574); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            k_tree = (XQDTCommonTree)adaptor.create(k);
            adaptor.addChild(root_0, k_tree);
            }
            if (list_k==null) list_k=new ArrayList();
            list_k.add(k);

            LPAREN712=(CommonToken)match(input,LPAREN,FOLLOW_LPAREN_in_p_SwitchExpr15576); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            LPAREN712_tree = (XQDTCommonTree)adaptor.create(LPAREN712);
            adaptor.addChild(root_0, LPAREN712_tree);
            }
            pushFollow(FOLLOW_pm_Expr_in_p_SwitchExpr15578);
            pm_Expr713=pm_Expr();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, pm_Expr713.getTree());
            RPAREN714=(CommonToken)match(input,RPAREN,FOLLOW_RPAREN_in_p_SwitchExpr15580); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            RPAREN714_tree = (XQDTCommonTree)adaptor.create(RPAREN714);
            adaptor.addChild(root_0, RPAREN714_tree);
            }
            // XQueryParser.g:1719:43: ( p_SwitchCaseClause )+
            int cnt242=0;
            loop242:
            do {
                int alt242=2;
                int LA242_0 = input.LA(1);

                if ( (LA242_0==CASE) ) {
                    alt242=1;
                }


                switch (alt242) {
            	case 1 :
            	    // XQueryParser.g:1719:43: p_SwitchCaseClause
            	    {
            	    pushFollow(FOLLOW_p_SwitchCaseClause_in_p_SwitchExpr15582);
            	    p_SwitchCaseClause715=p_SwitchCaseClause();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, p_SwitchCaseClause715.getTree());

            	    }
            	    break;

            	default :
            	    if ( cnt242 >= 1 ) break loop242;
            	    if (state.backtracking>0) {state.failed=true; return retval;}
                        EarlyExitException eee =
                            new EarlyExitException(242, input);
                        throw eee;
                }
                cnt242++;
            } while (true);

            k=(CommonToken)match(input,DEFAULT,FOLLOW_DEFAULT_in_p_SwitchExpr15587); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            k_tree = (XQDTCommonTree)adaptor.create(k);
            adaptor.addChild(root_0, k_tree);
            }
            if (list_k==null) list_k=new ArrayList();
            list_k.add(k);

            k=(CommonToken)match(input,RETURN,FOLLOW_RETURN_in_p_SwitchExpr15591); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            k_tree = (XQDTCommonTree)adaptor.create(k);
            adaptor.addChild(root_0, k_tree);
            }
            if (list_k==null) list_k=new ArrayList();
            list_k.add(k);

            pushFollow(FOLLOW_p_ExprSingle_in_p_SwitchExpr15593);
            p_ExprSingle716=p_ExprSingle();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, p_ExprSingle716.getTree());
            if ( state.backtracking==0 ) {
              ak(list_k);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (XQDTCommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (XQDTCommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "p_SwitchExpr"

    public static class p_SwitchCaseClause_return extends ParserRuleReturnScope {
        XQDTCommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "p_SwitchCaseClause"
    // XQueryParser.g:1723:1: p_SwitchCaseClause : (k+= CASE p_SwitchCaseOperand )+ k+= RETURN p_ExprSingle ;
    public final XQueryParser.p_SwitchCaseClause_return p_SwitchCaseClause() throws RecognitionException {
        XQueryParser.p_SwitchCaseClause_return retval = new XQueryParser.p_SwitchCaseClause_return();
        retval.start = input.LT(1);

        XQDTCommonTree root_0 = null;

        CommonToken k=null;
        List list_k=null;
        XQueryParser.p_SwitchCaseOperand_return p_SwitchCaseOperand717 = null;

        XQueryParser.p_ExprSingle_return p_ExprSingle718 = null;


        XQDTCommonTree k_tree=null;

        try {
            // XQueryParser.g:1724:9: ( (k+= CASE p_SwitchCaseOperand )+ k+= RETURN p_ExprSingle )
            // XQueryParser.g:1724:11: (k+= CASE p_SwitchCaseOperand )+ k+= RETURN p_ExprSingle
            {
            root_0 = (XQDTCommonTree)adaptor.nil();

            // XQueryParser.g:1724:11: (k+= CASE p_SwitchCaseOperand )+
            int cnt243=0;
            loop243:
            do {
                int alt243=2;
                int LA243_0 = input.LA(1);

                if ( (LA243_0==CASE) ) {
                    alt243=1;
                }


                switch (alt243) {
            	case 1 :
            	    // XQueryParser.g:1724:12: k+= CASE p_SwitchCaseOperand
            	    {
            	    k=(CommonToken)match(input,CASE,FOLLOW_CASE_in_p_SwitchCaseClause15624); if (state.failed) return retval;
            	    if ( state.backtracking==0 ) {
            	    k_tree = (XQDTCommonTree)adaptor.create(k);
            	    adaptor.addChild(root_0, k_tree);
            	    }
            	    if (list_k==null) list_k=new ArrayList();
            	    list_k.add(k);

            	    pushFollow(FOLLOW_p_SwitchCaseOperand_in_p_SwitchCaseClause15626);
            	    p_SwitchCaseOperand717=p_SwitchCaseOperand();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, p_SwitchCaseOperand717.getTree());

            	    }
            	    break;

            	default :
            	    if ( cnt243 >= 1 ) break loop243;
            	    if (state.backtracking>0) {state.failed=true; return retval;}
                        EarlyExitException eee =
                            new EarlyExitException(243, input);
                        throw eee;
                }
                cnt243++;
            } while (true);

            k=(CommonToken)match(input,RETURN,FOLLOW_RETURN_in_p_SwitchCaseClause15632); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            k_tree = (XQDTCommonTree)adaptor.create(k);
            adaptor.addChild(root_0, k_tree);
            }
            if (list_k==null) list_k=new ArrayList();
            list_k.add(k);

            pushFollow(FOLLOW_p_ExprSingle_in_p_SwitchCaseClause15634);
            p_ExprSingle718=p_ExprSingle();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, p_ExprSingle718.getTree());
            if ( state.backtracking==0 ) {
              ak(list_k);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (XQDTCommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (XQDTCommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "p_SwitchCaseClause"

    public static class p_SwitchCaseOperand_return extends ParserRuleReturnScope {
        XQDTCommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "p_SwitchCaseOperand"
    // XQueryParser.g:1728:1: p_SwitchCaseOperand : p_ExprSingle ;
    public final XQueryParser.p_SwitchCaseOperand_return p_SwitchCaseOperand() throws RecognitionException {
        XQueryParser.p_SwitchCaseOperand_return retval = new XQueryParser.p_SwitchCaseOperand_return();
        retval.start = input.LT(1);

        XQDTCommonTree root_0 = null;

        XQueryParser.p_ExprSingle_return p_ExprSingle719 = null;



        try {
            // XQueryParser.g:1729:9: ( p_ExprSingle )
            // XQueryParser.g:1729:11: p_ExprSingle
            {
            root_0 = (XQDTCommonTree)adaptor.nil();

            pushFollow(FOLLOW_p_ExprSingle_in_p_SwitchCaseOperand15662);
            p_ExprSingle719=p_ExprSingle();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, p_ExprSingle719.getTree());

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (XQDTCommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (XQDTCommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "p_SwitchCaseOperand"

    public static class p_EvalExpr_return extends ParserRuleReturnScope {
        XQDTCommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "p_EvalExpr"
    // XQueryParser.g:1737:1: p_EvalExpr : ( p_UsingClause )? ke= EVAL LBRACKET p_ExprSingle RBRACKET ;
    public final XQueryParser.p_EvalExpr_return p_EvalExpr() throws RecognitionException {
        XQueryParser.p_EvalExpr_return retval = new XQueryParser.p_EvalExpr_return();
        retval.start = input.LT(1);

        XQDTCommonTree root_0 = null;

        CommonToken ke=null;
        CommonToken LBRACKET721=null;
        CommonToken RBRACKET723=null;
        XQueryParser.p_UsingClause_return p_UsingClause720 = null;

        XQueryParser.p_ExprSingle_return p_ExprSingle722 = null;


        XQDTCommonTree ke_tree=null;
        XQDTCommonTree LBRACKET721_tree=null;
        XQDTCommonTree RBRACKET723_tree=null;

        try {
            // XQueryParser.g:1738:9: ( ( p_UsingClause )? ke= EVAL LBRACKET p_ExprSingle RBRACKET )
            // XQueryParser.g:1738:11: ( p_UsingClause )? ke= EVAL LBRACKET p_ExprSingle RBRACKET
            {
            root_0 = (XQDTCommonTree)adaptor.nil();

            // XQueryParser.g:1738:11: ( p_UsingClause )?
            int alt244=2;
            int LA244_0 = input.LA(1);

            if ( (LA244_0==USING) ) {
                alt244=1;
            }
            switch (alt244) {
                case 1 :
                    // XQueryParser.g:1738:11: p_UsingClause
                    {
                    pushFollow(FOLLOW_p_UsingClause_in_p_EvalExpr15692);
                    p_UsingClause720=p_UsingClause();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, p_UsingClause720.getTree());

                    }
                    break;

            }

            ke=(CommonToken)match(input,EVAL,FOLLOW_EVAL_in_p_EvalExpr15697); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            ke_tree = (XQDTCommonTree)adaptor.create(ke);
            adaptor.addChild(root_0, ke_tree);
            }
            if ( state.backtracking==0 ) {
              ak(ke);
            }
            LBRACKET721=(CommonToken)match(input,LBRACKET,FOLLOW_LBRACKET_in_p_EvalExpr15701); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            LBRACKET721_tree = (XQDTCommonTree)adaptor.create(LBRACKET721);
            adaptor.addChild(root_0, LBRACKET721_tree);
            }
            pushFollow(FOLLOW_p_ExprSingle_in_p_EvalExpr15703);
            p_ExprSingle722=p_ExprSingle();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, p_ExprSingle722.getTree());
            RBRACKET723=(CommonToken)match(input,RBRACKET,FOLLOW_RBRACKET_in_p_EvalExpr15705); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            RBRACKET723_tree = (XQDTCommonTree)adaptor.create(RBRACKET723);
            adaptor.addChild(root_0, RBRACKET723_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (XQDTCommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (XQDTCommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "p_EvalExpr"

    public static class p_UsingClause_return extends ParserRuleReturnScope {
        XQDTCommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "p_UsingClause"
    // XQueryParser.g:1741:1: p_UsingClause : ku= USING DOLLAR p_VarName ( COMMA DOLLAR p_VarName )* ;
    public final XQueryParser.p_UsingClause_return p_UsingClause() throws RecognitionException {
        XQueryParser.p_UsingClause_return retval = new XQueryParser.p_UsingClause_return();
        retval.start = input.LT(1);

        XQDTCommonTree root_0 = null;

        CommonToken ku=null;
        CommonToken DOLLAR724=null;
        CommonToken COMMA726=null;
        CommonToken DOLLAR727=null;
        XQueryParser.p_VarName_return p_VarName725 = null;

        XQueryParser.p_VarName_return p_VarName728 = null;


        XQDTCommonTree ku_tree=null;
        XQDTCommonTree DOLLAR724_tree=null;
        XQDTCommonTree COMMA726_tree=null;
        XQDTCommonTree DOLLAR727_tree=null;

        try {
            // XQueryParser.g:1742:9: (ku= USING DOLLAR p_VarName ( COMMA DOLLAR p_VarName )* )
            // XQueryParser.g:1742:11: ku= USING DOLLAR p_VarName ( COMMA DOLLAR p_VarName )*
            {
            root_0 = (XQDTCommonTree)adaptor.nil();

            ku=(CommonToken)match(input,USING,FOLLOW_USING_in_p_UsingClause15732); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            ku_tree = (XQDTCommonTree)adaptor.create(ku);
            adaptor.addChild(root_0, ku_tree);
            }
            if ( state.backtracking==0 ) {
              ak(ku);
            }
            DOLLAR724=(CommonToken)match(input,DOLLAR,FOLLOW_DOLLAR_in_p_UsingClause15736); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            DOLLAR724_tree = (XQDTCommonTree)adaptor.create(DOLLAR724);
            adaptor.addChild(root_0, DOLLAR724_tree);
            }
            pushFollow(FOLLOW_p_VarName_in_p_UsingClause15738);
            p_VarName725=p_VarName();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, p_VarName725.getTree());
            // XQueryParser.g:1742:48: ( COMMA DOLLAR p_VarName )*
            loop245:
            do {
                int alt245=2;
                int LA245_0 = input.LA(1);

                if ( (LA245_0==COMMA) ) {
                    alt245=1;
                }


                switch (alt245) {
            	case 1 :
            	    // XQueryParser.g:1742:49: COMMA DOLLAR p_VarName
            	    {
            	    COMMA726=(CommonToken)match(input,COMMA,FOLLOW_COMMA_in_p_UsingClause15741); if (state.failed) return retval;
            	    if ( state.backtracking==0 ) {
            	    COMMA726_tree = (XQDTCommonTree)adaptor.create(COMMA726);
            	    adaptor.addChild(root_0, COMMA726_tree);
            	    }
            	    DOLLAR727=(CommonToken)match(input,DOLLAR,FOLLOW_DOLLAR_in_p_UsingClause15743); if (state.failed) return retval;
            	    if ( state.backtracking==0 ) {
            	    DOLLAR727_tree = (XQDTCommonTree)adaptor.create(DOLLAR727);
            	    adaptor.addChild(root_0, DOLLAR727_tree);
            	    }
            	    pushFollow(FOLLOW_p_VarName_in_p_UsingClause15745);
            	    p_VarName728=p_VarName();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, p_VarName728.getTree());

            	    }
            	    break;

            	default :
            	    break loop245;
                }
            } while (true);


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (XQDTCommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (XQDTCommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "p_UsingClause"

    public static class p_CollectionDecl_return extends ParserRuleReturnScope {
        XQDTCommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "p_CollectionDecl"
    // XQueryParser.g:1751:1: p_CollectionDecl : k+= DECLARE p_CollProperties k+= COLLECTION p_QName ( p_CollectionTypeDecl )? (k+= WITH p_NodeModifier k+= NODES )? SEMICOLON ;
    public final XQueryParser.p_CollectionDecl_return p_CollectionDecl() throws RecognitionException {
        XQueryParser.p_CollectionDecl_return retval = new XQueryParser.p_CollectionDecl_return();
        retval.start = input.LT(1);

        XQDTCommonTree root_0 = null;

        CommonToken SEMICOLON733=null;
        CommonToken k=null;
        List list_k=null;
        XQueryParser.p_CollProperties_return p_CollProperties729 = null;

        XQueryParser.p_QName_return p_QName730 = null;

        XQueryParser.p_CollectionTypeDecl_return p_CollectionTypeDecl731 = null;

        XQueryParser.p_NodeModifier_return p_NodeModifier732 = null;


        XQDTCommonTree SEMICOLON733_tree=null;
        XQDTCommonTree k_tree=null;

        try {
            // XQueryParser.g:1752:9: (k+= DECLARE p_CollProperties k+= COLLECTION p_QName ( p_CollectionTypeDecl )? (k+= WITH p_NodeModifier k+= NODES )? SEMICOLON )
            // XQueryParser.g:1752:11: k+= DECLARE p_CollProperties k+= COLLECTION p_QName ( p_CollectionTypeDecl )? (k+= WITH p_NodeModifier k+= NODES )? SEMICOLON
            {
            root_0 = (XQDTCommonTree)adaptor.nil();

            k=(CommonToken)match(input,DECLARE,FOLLOW_DECLARE_in_p_CollectionDecl15780); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            k_tree = (XQDTCommonTree)adaptor.create(k);
            adaptor.addChild(root_0, k_tree);
            }
            if (list_k==null) list_k=new ArrayList();
            list_k.add(k);

            pushFollow(FOLLOW_p_CollProperties_in_p_CollectionDecl15782);
            p_CollProperties729=p_CollProperties();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, p_CollProperties729.getTree());
            k=(CommonToken)match(input,COLLECTION,FOLLOW_COLLECTION_in_p_CollectionDecl15786); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            k_tree = (XQDTCommonTree)adaptor.create(k);
            adaptor.addChild(root_0, k_tree);
            }
            if (list_k==null) list_k=new ArrayList();
            list_k.add(k);

            pushFollow(FOLLOW_p_QName_in_p_CollectionDecl15788);
            p_QName730=p_QName();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, p_QName730.getTree());
            // XQueryParser.g:1752:61: ( p_CollectionTypeDecl )?
            int alt246=2;
            int LA246_0 = input.LA(1);

            if ( (LA246_0==AS) ) {
                alt246=1;
            }
            switch (alt246) {
                case 1 :
                    // XQueryParser.g:1752:61: p_CollectionTypeDecl
                    {
                    pushFollow(FOLLOW_p_CollectionTypeDecl_in_p_CollectionDecl15790);
                    p_CollectionTypeDecl731=p_CollectionTypeDecl();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, p_CollectionTypeDecl731.getTree());

                    }
                    break;

            }

            // XQueryParser.g:1752:83: (k+= WITH p_NodeModifier k+= NODES )?
            int alt247=2;
            int LA247_0 = input.LA(1);

            if ( (LA247_0==WITH) ) {
                alt247=1;
            }
            switch (alt247) {
                case 1 :
                    // XQueryParser.g:1752:84: k+= WITH p_NodeModifier k+= NODES
                    {
                    k=(CommonToken)match(input,WITH,FOLLOW_WITH_in_p_CollectionDecl15796); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    k_tree = (XQDTCommonTree)adaptor.create(k);
                    adaptor.addChild(root_0, k_tree);
                    }
                    if (list_k==null) list_k=new ArrayList();
                    list_k.add(k);

                    pushFollow(FOLLOW_p_NodeModifier_in_p_CollectionDecl15798);
                    p_NodeModifier732=p_NodeModifier();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, p_NodeModifier732.getTree());
                    k=(CommonToken)match(input,NODES,FOLLOW_NODES_in_p_CollectionDecl15802); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    k_tree = (XQDTCommonTree)adaptor.create(k);
                    adaptor.addChild(root_0, k_tree);
                    }
                    if (list_k==null) list_k=new ArrayList();
                    list_k.add(k);


                    }
                    break;

            }

            SEMICOLON733=(CommonToken)match(input,SEMICOLON,FOLLOW_SEMICOLON_in_p_CollectionDecl15806); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            SEMICOLON733_tree = (XQDTCommonTree)adaptor.create(SEMICOLON733);
            adaptor.addChild(root_0, SEMICOLON733_tree);
            }
            if ( state.backtracking==0 ) {
              ak(list_k);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (XQDTCommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (XQDTCommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "p_CollectionDecl"

    public static class p_CollProperties_return extends ParserRuleReturnScope {
        XQDTCommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "p_CollProperties"
    // XQueryParser.g:1755:1: p_CollProperties : ( (k+= CONST | k+= MUTABLE | k+= APPEND_ONLY | k+= QUEUE | k+= ORDERED | k+= UNORDERED )* ) ;
    public final XQueryParser.p_CollProperties_return p_CollProperties() throws RecognitionException {
        XQueryParser.p_CollProperties_return retval = new XQueryParser.p_CollProperties_return();
        retval.start = input.LT(1);

        XQDTCommonTree root_0 = null;

        CommonToken k=null;
        List list_k=null;

        XQDTCommonTree k_tree=null;

        try {
            // XQueryParser.g:1756:9: ( ( (k+= CONST | k+= MUTABLE | k+= APPEND_ONLY | k+= QUEUE | k+= ORDERED | k+= UNORDERED )* ) )
            // XQueryParser.g:1756:11: ( (k+= CONST | k+= MUTABLE | k+= APPEND_ONLY | k+= QUEUE | k+= ORDERED | k+= UNORDERED )* )
            {
            root_0 = (XQDTCommonTree)adaptor.nil();

            // XQueryParser.g:1756:11: ( (k+= CONST | k+= MUTABLE | k+= APPEND_ONLY | k+= QUEUE | k+= ORDERED | k+= UNORDERED )* )
            // XQueryParser.g:1756:12: (k+= CONST | k+= MUTABLE | k+= APPEND_ONLY | k+= QUEUE | k+= ORDERED | k+= UNORDERED )*
            {
            // XQueryParser.g:1756:12: (k+= CONST | k+= MUTABLE | k+= APPEND_ONLY | k+= QUEUE | k+= ORDERED | k+= UNORDERED )*
            loop248:
            do {
                int alt248=7;
                switch ( input.LA(1) ) {
                case CONST:
                    {
                    alt248=1;
                    }
                    break;
                case MUTABLE:
                    {
                    alt248=2;
                    }
                    break;
                case APPEND_ONLY:
                    {
                    alt248=3;
                    }
                    break;
                case QUEUE:
                    {
                    alt248=4;
                    }
                    break;
                case ORDERED:
                    {
                    alt248=5;
                    }
                    break;
                case UNORDERED:
                    {
                    alt248=6;
                    }
                    break;

                }

                switch (alt248) {
            	case 1 :
            	    // XQueryParser.g:1756:13: k+= CONST
            	    {
            	    k=(CommonToken)match(input,CONST,FOLLOW_CONST_in_p_CollProperties15837); if (state.failed) return retval;
            	    if ( state.backtracking==0 ) {
            	    k_tree = (XQDTCommonTree)adaptor.create(k);
            	    adaptor.addChild(root_0, k_tree);
            	    }
            	    if (list_k==null) list_k=new ArrayList();
            	    list_k.add(k);


            	    }
            	    break;
            	case 2 :
            	    // XQueryParser.g:1756:24: k+= MUTABLE
            	    {
            	    k=(CommonToken)match(input,MUTABLE,FOLLOW_MUTABLE_in_p_CollProperties15843); if (state.failed) return retval;
            	    if ( state.backtracking==0 ) {
            	    k_tree = (XQDTCommonTree)adaptor.create(k);
            	    adaptor.addChild(root_0, k_tree);
            	    }
            	    if (list_k==null) list_k=new ArrayList();
            	    list_k.add(k);


            	    }
            	    break;
            	case 3 :
            	    // XQueryParser.g:1757:11: k+= APPEND_ONLY
            	    {
            	    k=(CommonToken)match(input,APPEND_ONLY,FOLLOW_APPEND_ONLY_in_p_CollProperties15857); if (state.failed) return retval;
            	    if ( state.backtracking==0 ) {
            	    k_tree = (XQDTCommonTree)adaptor.create(k);
            	    adaptor.addChild(root_0, k_tree);
            	    }
            	    if (list_k==null) list_k=new ArrayList();
            	    list_k.add(k);


            	    }
            	    break;
            	case 4 :
            	    // XQueryParser.g:1757:28: k+= QUEUE
            	    {
            	    k=(CommonToken)match(input,QUEUE,FOLLOW_QUEUE_in_p_CollProperties15863); if (state.failed) return retval;
            	    if ( state.backtracking==0 ) {
            	    k_tree = (XQDTCommonTree)adaptor.create(k);
            	    adaptor.addChild(root_0, k_tree);
            	    }
            	    if (list_k==null) list_k=new ArrayList();
            	    list_k.add(k);


            	    }
            	    break;
            	case 5 :
            	    // XQueryParser.g:1758:11: k+= ORDERED
            	    {
            	    k=(CommonToken)match(input,ORDERED,FOLLOW_ORDERED_in_p_CollProperties15877); if (state.failed) return retval;
            	    if ( state.backtracking==0 ) {
            	    k_tree = (XQDTCommonTree)adaptor.create(k);
            	    adaptor.addChild(root_0, k_tree);
            	    }
            	    if (list_k==null) list_k=new ArrayList();
            	    list_k.add(k);


            	    }
            	    break;
            	case 6 :
            	    // XQueryParser.g:1758:24: k+= UNORDERED
            	    {
            	    k=(CommonToken)match(input,UNORDERED,FOLLOW_UNORDERED_in_p_CollProperties15883); if (state.failed) return retval;
            	    if ( state.backtracking==0 ) {
            	    k_tree = (XQDTCommonTree)adaptor.create(k);
            	    adaptor.addChild(root_0, k_tree);
            	    }
            	    if (list_k==null) list_k=new ArrayList();
            	    list_k.add(k);


            	    }
            	    break;

            	default :
            	    break loop248;
                }
            } while (true);


            }

            if ( state.backtracking==0 ) {
              ak(list_k);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (XQDTCommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (XQDTCommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "p_CollProperties"

    public static class p_CollectionTypeDecl_return extends ParserRuleReturnScope {
        XQDTCommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "p_CollectionTypeDecl"
    // XQueryParser.g:1761:1: p_CollectionTypeDecl : (ka= AS p_KindTest ( ( p_OccurrenceIndicator )=> p_OccurrenceIndicator )? ) ;
    public final XQueryParser.p_CollectionTypeDecl_return p_CollectionTypeDecl() throws RecognitionException {
        XQueryParser.p_CollectionTypeDecl_return retval = new XQueryParser.p_CollectionTypeDecl_return();
        retval.start = input.LT(1);

        XQDTCommonTree root_0 = null;

        CommonToken ka=null;
        XQueryParser.p_KindTest_return p_KindTest734 = null;

        XQueryParser.p_OccurrenceIndicator_return p_OccurrenceIndicator735 = null;


        XQDTCommonTree ka_tree=null;

        try {
            // XQueryParser.g:1762:9: ( (ka= AS p_KindTest ( ( p_OccurrenceIndicator )=> p_OccurrenceIndicator )? ) )
            // XQueryParser.g:1762:11: (ka= AS p_KindTest ( ( p_OccurrenceIndicator )=> p_OccurrenceIndicator )? )
            {
            root_0 = (XQDTCommonTree)adaptor.nil();

            // XQueryParser.g:1762:11: (ka= AS p_KindTest ( ( p_OccurrenceIndicator )=> p_OccurrenceIndicator )? )
            // XQueryParser.g:1762:12: ka= AS p_KindTest ( ( p_OccurrenceIndicator )=> p_OccurrenceIndicator )?
            {
            ka=(CommonToken)match(input,AS,FOLLOW_AS_in_p_CollectionTypeDecl15916); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            ka_tree = (XQDTCommonTree)adaptor.create(ka);
            adaptor.addChild(root_0, ka_tree);
            }
            if ( state.backtracking==0 ) {
              ak(ka);
            }
            pushFollow(FOLLOW_p_KindTest_in_p_CollectionTypeDecl15920);
            p_KindTest734=p_KindTest();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, p_KindTest734.getTree());
            // XQueryParser.g:1762:40: ( ( p_OccurrenceIndicator )=> p_OccurrenceIndicator )?
            int alt249=2;
            int LA249_0 = input.LA(1);

            if ( ((LA249_0>=QUESTION && LA249_0<=PLUS)) && (synpred4_XQueryParser())) {
                alt249=1;
            }
            switch (alt249) {
                case 1 :
                    // XQueryParser.g:1762:41: ( p_OccurrenceIndicator )=> p_OccurrenceIndicator
                    {
                    pushFollow(FOLLOW_p_OccurrenceIndicator_in_p_CollectionTypeDecl15929);
                    p_OccurrenceIndicator735=p_OccurrenceIndicator();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, p_OccurrenceIndicator735.getTree());

                    }
                    break;

            }


            }


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (XQDTCommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (XQDTCommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "p_CollectionTypeDecl"

    public static class p_NodeModifier_return extends ParserRuleReturnScope {
        XQDTCommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "p_NodeModifier"
    // XQueryParser.g:1765:1: p_NodeModifier : (k+= READ_ONLY | k+= MUTABLE ) ;
    public final XQueryParser.p_NodeModifier_return p_NodeModifier() throws RecognitionException {
        XQueryParser.p_NodeModifier_return retval = new XQueryParser.p_NodeModifier_return();
        retval.start = input.LT(1);

        XQDTCommonTree root_0 = null;

        CommonToken k=null;
        List list_k=null;

        XQDTCommonTree k_tree=null;

        try {
            // XQueryParser.g:1766:9: ( (k+= READ_ONLY | k+= MUTABLE ) )
            // XQueryParser.g:1766:11: (k+= READ_ONLY | k+= MUTABLE )
            {
            root_0 = (XQDTCommonTree)adaptor.nil();

            // XQueryParser.g:1766:11: (k+= READ_ONLY | k+= MUTABLE )
            int alt250=2;
            int LA250_0 = input.LA(1);

            if ( (LA250_0==READ_ONLY) ) {
                alt250=1;
            }
            else if ( (LA250_0==MUTABLE) ) {
                alt250=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 250, 0, input);

                throw nvae;
            }
            switch (alt250) {
                case 1 :
                    // XQueryParser.g:1766:12: k+= READ_ONLY
                    {
                    k=(CommonToken)match(input,READ_ONLY,FOLLOW_READ_ONLY_in_p_NodeModifier15960); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    k_tree = (XQDTCommonTree)adaptor.create(k);
                    adaptor.addChild(root_0, k_tree);
                    }
                    if (list_k==null) list_k=new ArrayList();
                    list_k.add(k);


                    }
                    break;
                case 2 :
                    // XQueryParser.g:1766:27: k+= MUTABLE
                    {
                    k=(CommonToken)match(input,MUTABLE,FOLLOW_MUTABLE_in_p_NodeModifier15966); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    k_tree = (XQDTCommonTree)adaptor.create(k);
                    adaptor.addChild(root_0, k_tree);
                    }
                    if (list_k==null) list_k=new ArrayList();
                    list_k.add(k);


                    }
                    break;

            }

            if ( state.backtracking==0 ) {
              ak(list_k);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (XQDTCommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (XQDTCommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "p_NodeModifier"

    public static class p_IndexDecl_return extends ParserRuleReturnScope {
        XQDTCommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "p_IndexDecl"
    // XQueryParser.g:1769:1: p_IndexDecl : k+= DECLARE p_IndexProperties k+= INDEX p_IndexName k+= ON k+= NODES p_IndexDomainExpr k+= BY p_IndexKeySpec ( COMMA p_IndexKeySpec )* SEMICOLON ;
    public final XQueryParser.p_IndexDecl_return p_IndexDecl() throws RecognitionException {
        XQueryParser.p_IndexDecl_return retval = new XQueryParser.p_IndexDecl_return();
        retval.start = input.LT(1);

        XQDTCommonTree root_0 = null;

        CommonToken COMMA740=null;
        CommonToken SEMICOLON742=null;
        CommonToken k=null;
        List list_k=null;
        XQueryParser.p_IndexProperties_return p_IndexProperties736 = null;

        XQueryParser.p_IndexName_return p_IndexName737 = null;

        XQueryParser.p_IndexDomainExpr_return p_IndexDomainExpr738 = null;

        XQueryParser.p_IndexKeySpec_return p_IndexKeySpec739 = null;

        XQueryParser.p_IndexKeySpec_return p_IndexKeySpec741 = null;


        XQDTCommonTree COMMA740_tree=null;
        XQDTCommonTree SEMICOLON742_tree=null;
        XQDTCommonTree k_tree=null;

        try {
            // XQueryParser.g:1770:9: (k+= DECLARE p_IndexProperties k+= INDEX p_IndexName k+= ON k+= NODES p_IndexDomainExpr k+= BY p_IndexKeySpec ( COMMA p_IndexKeySpec )* SEMICOLON )
            // XQueryParser.g:1770:11: k+= DECLARE p_IndexProperties k+= INDEX p_IndexName k+= ON k+= NODES p_IndexDomainExpr k+= BY p_IndexKeySpec ( COMMA p_IndexKeySpec )* SEMICOLON
            {
            root_0 = (XQDTCommonTree)adaptor.nil();

            k=(CommonToken)match(input,DECLARE,FOLLOW_DECLARE_in_p_IndexDecl15996); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            k_tree = (XQDTCommonTree)adaptor.create(k);
            adaptor.addChild(root_0, k_tree);
            }
            if (list_k==null) list_k=new ArrayList();
            list_k.add(k);

            pushFollow(FOLLOW_p_IndexProperties_in_p_IndexDecl15998);
            p_IndexProperties736=p_IndexProperties();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, p_IndexProperties736.getTree());
            k=(CommonToken)match(input,INDEX,FOLLOW_INDEX_in_p_IndexDecl16002); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            k_tree = (XQDTCommonTree)adaptor.create(k);
            adaptor.addChild(root_0, k_tree);
            }
            if (list_k==null) list_k=new ArrayList();
            list_k.add(k);

            pushFollow(FOLLOW_p_IndexName_in_p_IndexDecl16004);
            p_IndexName737=p_IndexName();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, p_IndexName737.getTree());
            k=(CommonToken)match(input,ON,FOLLOW_ON_in_p_IndexDecl16008); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            k_tree = (XQDTCommonTree)adaptor.create(k);
            adaptor.addChild(root_0, k_tree);
            }
            if (list_k==null) list_k=new ArrayList();
            list_k.add(k);

            k=(CommonToken)match(input,NODES,FOLLOW_NODES_in_p_IndexDecl16012); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            k_tree = (XQDTCommonTree)adaptor.create(k);
            adaptor.addChild(root_0, k_tree);
            }
            if (list_k==null) list_k=new ArrayList();
            list_k.add(k);

            pushFollow(FOLLOW_p_IndexDomainExpr_in_p_IndexDecl16014);
            p_IndexDomainExpr738=p_IndexDomainExpr();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, p_IndexDomainExpr738.getTree());
            k=(CommonToken)match(input,BY,FOLLOW_BY_in_p_IndexDecl16018); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            k_tree = (XQDTCommonTree)adaptor.create(k);
            adaptor.addChild(root_0, k_tree);
            }
            if (list_k==null) list_k=new ArrayList();
            list_k.add(k);

            pushFollow(FOLLOW_p_IndexKeySpec_in_p_IndexDecl16020);
            p_IndexKeySpec739=p_IndexKeySpec();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, p_IndexKeySpec739.getTree());
            // XQueryParser.g:1770:115: ( COMMA p_IndexKeySpec )*
            loop251:
            do {
                int alt251=2;
                int LA251_0 = input.LA(1);

                if ( (LA251_0==COMMA) ) {
                    alt251=1;
                }


                switch (alt251) {
            	case 1 :
            	    // XQueryParser.g:1770:116: COMMA p_IndexKeySpec
            	    {
            	    COMMA740=(CommonToken)match(input,COMMA,FOLLOW_COMMA_in_p_IndexDecl16023); if (state.failed) return retval;
            	    if ( state.backtracking==0 ) {
            	    COMMA740_tree = (XQDTCommonTree)adaptor.create(COMMA740);
            	    adaptor.addChild(root_0, COMMA740_tree);
            	    }
            	    pushFollow(FOLLOW_p_IndexKeySpec_in_p_IndexDecl16025);
            	    p_IndexKeySpec741=p_IndexKeySpec();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, p_IndexKeySpec741.getTree());

            	    }
            	    break;

            	default :
            	    break loop251;
                }
            } while (true);

            SEMICOLON742=(CommonToken)match(input,SEMICOLON,FOLLOW_SEMICOLON_in_p_IndexDecl16029); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            SEMICOLON742_tree = (XQDTCommonTree)adaptor.create(SEMICOLON742);
            adaptor.addChild(root_0, SEMICOLON742_tree);
            }
            if ( state.backtracking==0 ) {
              ak(list_k);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (XQDTCommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (XQDTCommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "p_IndexDecl"

    public static class p_IndexName_return extends ParserRuleReturnScope {
        XQDTCommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "p_IndexName"
    // XQueryParser.g:1773:1: p_IndexName : p_QName ;
    public final XQueryParser.p_IndexName_return p_IndexName() throws RecognitionException {
        XQueryParser.p_IndexName_return retval = new XQueryParser.p_IndexName_return();
        retval.start = input.LT(1);

        XQDTCommonTree root_0 = null;

        XQueryParser.p_QName_return p_QName743 = null;



        try {
            // XQueryParser.g:1774:9: ( p_QName )
            // XQueryParser.g:1774:11: p_QName
            {
            root_0 = (XQDTCommonTree)adaptor.nil();

            pushFollow(FOLLOW_p_QName_in_p_IndexName16056);
            p_QName743=p_QName();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, p_QName743.getTree());

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (XQDTCommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (XQDTCommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "p_IndexName"

    public static class p_IndexProperties_return extends ParserRuleReturnScope {
        XQDTCommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "p_IndexProperties"
    // XQueryParser.g:1777:1: p_IndexProperties : ( (k+= UNIQUE | k+= NON k+= UNIQUE | k+= VALUE k+= RANGE | k+= VALUE k+= EQUALITY | k+= AUTOMATICALLY k+= MAINTAINED | k+= MANUALLY k+= MAINTAINED )* ) ;
    public final XQueryParser.p_IndexProperties_return p_IndexProperties() throws RecognitionException {
        XQueryParser.p_IndexProperties_return retval = new XQueryParser.p_IndexProperties_return();
        retval.start = input.LT(1);

        XQDTCommonTree root_0 = null;

        CommonToken k=null;
        List list_k=null;

        XQDTCommonTree k_tree=null;

        try {
            // XQueryParser.g:1778:9: ( ( (k+= UNIQUE | k+= NON k+= UNIQUE | k+= VALUE k+= RANGE | k+= VALUE k+= EQUALITY | k+= AUTOMATICALLY k+= MAINTAINED | k+= MANUALLY k+= MAINTAINED )* ) )
            // XQueryParser.g:1778:11: ( (k+= UNIQUE | k+= NON k+= UNIQUE | k+= VALUE k+= RANGE | k+= VALUE k+= EQUALITY | k+= AUTOMATICALLY k+= MAINTAINED | k+= MANUALLY k+= MAINTAINED )* )
            {
            root_0 = (XQDTCommonTree)adaptor.nil();

            // XQueryParser.g:1778:11: ( (k+= UNIQUE | k+= NON k+= UNIQUE | k+= VALUE k+= RANGE | k+= VALUE k+= EQUALITY | k+= AUTOMATICALLY k+= MAINTAINED | k+= MANUALLY k+= MAINTAINED )* )
            // XQueryParser.g:1778:12: (k+= UNIQUE | k+= NON k+= UNIQUE | k+= VALUE k+= RANGE | k+= VALUE k+= EQUALITY | k+= AUTOMATICALLY k+= MAINTAINED | k+= MANUALLY k+= MAINTAINED )*
            {
            // XQueryParser.g:1778:12: (k+= UNIQUE | k+= NON k+= UNIQUE | k+= VALUE k+= RANGE | k+= VALUE k+= EQUALITY | k+= AUTOMATICALLY k+= MAINTAINED | k+= MANUALLY k+= MAINTAINED )*
            loop252:
            do {
                int alt252=7;
                switch ( input.LA(1) ) {
                case UNIQUE:
                    {
                    alt252=1;
                    }
                    break;
                case NON:
                    {
                    alt252=2;
                    }
                    break;
                case VALUE:
                    {
                    int LA252_4 = input.LA(2);

                    if ( (LA252_4==RANGE) ) {
                        alt252=3;
                    }
                    else if ( (LA252_4==EQUALITY) ) {
                        alt252=4;
                    }


                    }
                    break;
                case AUTOMATICALLY:
                    {
                    alt252=5;
                    }
                    break;
                case MANUALLY:
                    {
                    alt252=6;
                    }
                    break;

                }

                switch (alt252) {
            	case 1 :
            	    // XQueryParser.g:1778:13: k+= UNIQUE
            	    {
            	    k=(CommonToken)match(input,UNIQUE,FOLLOW_UNIQUE_in_p_IndexProperties16085); if (state.failed) return retval;
            	    if ( state.backtracking==0 ) {
            	    k_tree = (XQDTCommonTree)adaptor.create(k);
            	    adaptor.addChild(root_0, k_tree);
            	    }
            	    if (list_k==null) list_k=new ArrayList();
            	    list_k.add(k);


            	    }
            	    break;
            	case 2 :
            	    // XQueryParser.g:1778:25: k+= NON k+= UNIQUE
            	    {
            	    k=(CommonToken)match(input,NON,FOLLOW_NON_in_p_IndexProperties16091); if (state.failed) return retval;
            	    if ( state.backtracking==0 ) {
            	    k_tree = (XQDTCommonTree)adaptor.create(k);
            	    adaptor.addChild(root_0, k_tree);
            	    }
            	    if (list_k==null) list_k=new ArrayList();
            	    list_k.add(k);

            	    k=(CommonToken)match(input,UNIQUE,FOLLOW_UNIQUE_in_p_IndexProperties16095); if (state.failed) return retval;
            	    if ( state.backtracking==0 ) {
            	    k_tree = (XQDTCommonTree)adaptor.create(k);
            	    adaptor.addChild(root_0, k_tree);
            	    }
            	    if (list_k==null) list_k=new ArrayList();
            	    list_k.add(k);


            	    }
            	    break;
            	case 3 :
            	    // XQueryParser.g:1779:11: k+= VALUE k+= RANGE
            	    {
            	    k=(CommonToken)match(input,VALUE,FOLLOW_VALUE_in_p_IndexProperties16109); if (state.failed) return retval;
            	    if ( state.backtracking==0 ) {
            	    k_tree = (XQDTCommonTree)adaptor.create(k);
            	    adaptor.addChild(root_0, k_tree);
            	    }
            	    if (list_k==null) list_k=new ArrayList();
            	    list_k.add(k);

            	    k=(CommonToken)match(input,RANGE,FOLLOW_RANGE_in_p_IndexProperties16113); if (state.failed) return retval;
            	    if ( state.backtracking==0 ) {
            	    k_tree = (XQDTCommonTree)adaptor.create(k);
            	    adaptor.addChild(root_0, k_tree);
            	    }
            	    if (list_k==null) list_k=new ArrayList();
            	    list_k.add(k);


            	    }
            	    break;
            	case 4 :
            	    // XQueryParser.g:1779:31: k+= VALUE k+= EQUALITY
            	    {
            	    k=(CommonToken)match(input,VALUE,FOLLOW_VALUE_in_p_IndexProperties16119); if (state.failed) return retval;
            	    if ( state.backtracking==0 ) {
            	    k_tree = (XQDTCommonTree)adaptor.create(k);
            	    adaptor.addChild(root_0, k_tree);
            	    }
            	    if (list_k==null) list_k=new ArrayList();
            	    list_k.add(k);

            	    k=(CommonToken)match(input,EQUALITY,FOLLOW_EQUALITY_in_p_IndexProperties16123); if (state.failed) return retval;
            	    if ( state.backtracking==0 ) {
            	    k_tree = (XQDTCommonTree)adaptor.create(k);
            	    adaptor.addChild(root_0, k_tree);
            	    }
            	    if (list_k==null) list_k=new ArrayList();
            	    list_k.add(k);


            	    }
            	    break;
            	case 5 :
            	    // XQueryParser.g:1780:11: k+= AUTOMATICALLY k+= MAINTAINED
            	    {
            	    k=(CommonToken)match(input,AUTOMATICALLY,FOLLOW_AUTOMATICALLY_in_p_IndexProperties16137); if (state.failed) return retval;
            	    if ( state.backtracking==0 ) {
            	    k_tree = (XQDTCommonTree)adaptor.create(k);
            	    adaptor.addChild(root_0, k_tree);
            	    }
            	    if (list_k==null) list_k=new ArrayList();
            	    list_k.add(k);

            	    k=(CommonToken)match(input,MAINTAINED,FOLLOW_MAINTAINED_in_p_IndexProperties16141); if (state.failed) return retval;
            	    if ( state.backtracking==0 ) {
            	    k_tree = (XQDTCommonTree)adaptor.create(k);
            	    adaptor.addChild(root_0, k_tree);
            	    }
            	    if (list_k==null) list_k=new ArrayList();
            	    list_k.add(k);


            	    }
            	    break;
            	case 6 :
            	    // XQueryParser.g:1780:44: k+= MANUALLY k+= MAINTAINED
            	    {
            	    k=(CommonToken)match(input,MANUALLY,FOLLOW_MANUALLY_in_p_IndexProperties16147); if (state.failed) return retval;
            	    if ( state.backtracking==0 ) {
            	    k_tree = (XQDTCommonTree)adaptor.create(k);
            	    adaptor.addChild(root_0, k_tree);
            	    }
            	    if (list_k==null) list_k=new ArrayList();
            	    list_k.add(k);

            	    k=(CommonToken)match(input,MAINTAINED,FOLLOW_MAINTAINED_in_p_IndexProperties16151); if (state.failed) return retval;
            	    if ( state.backtracking==0 ) {
            	    k_tree = (XQDTCommonTree)adaptor.create(k);
            	    adaptor.addChild(root_0, k_tree);
            	    }
            	    if (list_k==null) list_k=new ArrayList();
            	    list_k.add(k);


            	    }
            	    break;

            	default :
            	    break loop252;
                }
            } while (true);


            }

            if ( state.backtracking==0 ) {
              ak(list_k);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (XQDTCommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (XQDTCommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "p_IndexProperties"

    public static class p_IndexDomainExpr_return extends ParserRuleReturnScope {
        XQDTCommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "p_IndexDomainExpr"
    // XQueryParser.g:1783:1: p_IndexDomainExpr : p_PathExpr ;
    public final XQueryParser.p_IndexDomainExpr_return p_IndexDomainExpr() throws RecognitionException {
        XQueryParser.p_IndexDomainExpr_return retval = new XQueryParser.p_IndexDomainExpr_return();
        retval.start = input.LT(1);

        XQDTCommonTree root_0 = null;

        XQueryParser.p_PathExpr_return p_PathExpr744 = null;



        try {
            // XQueryParser.g:1784:9: ( p_PathExpr )
            // XQueryParser.g:1784:11: p_PathExpr
            {
            root_0 = (XQDTCommonTree)adaptor.nil();

            pushFollow(FOLLOW_p_PathExpr_in_p_IndexDomainExpr16181);
            p_PathExpr744=p_PathExpr();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, p_PathExpr744.getTree());

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (XQDTCommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (XQDTCommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "p_IndexDomainExpr"

    public static class p_IndexKeySpec_return extends ParserRuleReturnScope {
        XQDTCommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "p_IndexKeySpec"
    // XQueryParser.g:1787:1: p_IndexKeySpec : p_IndexKeyExpr p_TypeDeclaration p_OrderModifier ;
    public final XQueryParser.p_IndexKeySpec_return p_IndexKeySpec() throws RecognitionException {
        XQueryParser.p_IndexKeySpec_return retval = new XQueryParser.p_IndexKeySpec_return();
        retval.start = input.LT(1);

        XQDTCommonTree root_0 = null;

        XQueryParser.p_IndexKeyExpr_return p_IndexKeyExpr745 = null;

        XQueryParser.p_TypeDeclaration_return p_TypeDeclaration746 = null;

        XQueryParser.p_OrderModifier_return p_OrderModifier747 = null;



        try {
            // XQueryParser.g:1788:9: ( p_IndexKeyExpr p_TypeDeclaration p_OrderModifier )
            // XQueryParser.g:1788:11: p_IndexKeyExpr p_TypeDeclaration p_OrderModifier
            {
            root_0 = (XQDTCommonTree)adaptor.nil();

            pushFollow(FOLLOW_p_IndexKeyExpr_in_p_IndexKeySpec16206);
            p_IndexKeyExpr745=p_IndexKeyExpr();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, p_IndexKeyExpr745.getTree());
            pushFollow(FOLLOW_p_TypeDeclaration_in_p_IndexKeySpec16208);
            p_TypeDeclaration746=p_TypeDeclaration();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, p_TypeDeclaration746.getTree());
            pushFollow(FOLLOW_p_OrderModifier_in_p_IndexKeySpec16210);
            p_OrderModifier747=p_OrderModifier();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, p_OrderModifier747.getTree());

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (XQDTCommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (XQDTCommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "p_IndexKeySpec"

    public static class p_IndexKeyExpr_return extends ParserRuleReturnScope {
        XQDTCommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "p_IndexKeyExpr"
    // XQueryParser.g:1791:1: p_IndexKeyExpr : p_PathExpr ;
    public final XQueryParser.p_IndexKeyExpr_return p_IndexKeyExpr() throws RecognitionException {
        XQueryParser.p_IndexKeyExpr_return retval = new XQueryParser.p_IndexKeyExpr_return();
        retval.start = input.LT(1);

        XQDTCommonTree root_0 = null;

        XQueryParser.p_PathExpr_return p_PathExpr748 = null;



        try {
            // XQueryParser.g:1792:9: ( p_PathExpr )
            // XQueryParser.g:1792:11: p_PathExpr
            {
            root_0 = (XQDTCommonTree)adaptor.nil();

            pushFollow(FOLLOW_p_PathExpr_in_p_IndexKeyExpr16235);
            p_PathExpr748=p_PathExpr();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, p_PathExpr748.getTree());

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (XQDTCommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (XQDTCommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "p_IndexKeyExpr"

    public static class p_ICDecl_return extends ParserRuleReturnScope {
        XQDTCommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "p_ICDecl"
    // XQueryParser.g:1795:1: p_ICDecl : k+= DECLARE k+= INTEGRITY k+= CONSTRAINT p_QName ( p_ICCollection | p_ICForeignKey ) SEMICOLON ;
    public final XQueryParser.p_ICDecl_return p_ICDecl() throws RecognitionException {
        XQueryParser.p_ICDecl_return retval = new XQueryParser.p_ICDecl_return();
        retval.start = input.LT(1);

        XQDTCommonTree root_0 = null;

        CommonToken SEMICOLON752=null;
        CommonToken k=null;
        List list_k=null;
        XQueryParser.p_QName_return p_QName749 = null;

        XQueryParser.p_ICCollection_return p_ICCollection750 = null;

        XQueryParser.p_ICForeignKey_return p_ICForeignKey751 = null;


        XQDTCommonTree SEMICOLON752_tree=null;
        XQDTCommonTree k_tree=null;

        try {
            // XQueryParser.g:1796:9: (k+= DECLARE k+= INTEGRITY k+= CONSTRAINT p_QName ( p_ICCollection | p_ICForeignKey ) SEMICOLON )
            // XQueryParser.g:1796:11: k+= DECLARE k+= INTEGRITY k+= CONSTRAINT p_QName ( p_ICCollection | p_ICForeignKey ) SEMICOLON
            {
            root_0 = (XQDTCommonTree)adaptor.nil();

            k=(CommonToken)match(input,DECLARE,FOLLOW_DECLARE_in_p_ICDecl16262); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            k_tree = (XQDTCommonTree)adaptor.create(k);
            adaptor.addChild(root_0, k_tree);
            }
            if (list_k==null) list_k=new ArrayList();
            list_k.add(k);

            k=(CommonToken)match(input,INTEGRITY,FOLLOW_INTEGRITY_in_p_ICDecl16266); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            k_tree = (XQDTCommonTree)adaptor.create(k);
            adaptor.addChild(root_0, k_tree);
            }
            if (list_k==null) list_k=new ArrayList();
            list_k.add(k);

            k=(CommonToken)match(input,CONSTRAINT,FOLLOW_CONSTRAINT_in_p_ICDecl16270); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            k_tree = (XQDTCommonTree)adaptor.create(k);
            adaptor.addChild(root_0, k_tree);
            }
            if (list_k==null) list_k=new ArrayList();
            list_k.add(k);

            if ( state.backtracking==0 ) {
              ak(list_k);
            }
            pushFollow(FOLLOW_p_QName_in_p_ICDecl16274);
            p_QName749=p_QName();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, p_QName749.getTree());
            // XQueryParser.g:1796:67: ( p_ICCollection | p_ICForeignKey )
            int alt253=2;
            int LA253_0 = input.LA(1);

            if ( (LA253_0==ON) ) {
                alt253=1;
            }
            else if ( (LA253_0==FOREIGN) ) {
                alt253=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 253, 0, input);

                throw nvae;
            }
            switch (alt253) {
                case 1 :
                    // XQueryParser.g:1796:68: p_ICCollection
                    {
                    pushFollow(FOLLOW_p_ICCollection_in_p_ICDecl16277);
                    p_ICCollection750=p_ICCollection();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, p_ICCollection750.getTree());

                    }
                    break;
                case 2 :
                    // XQueryParser.g:1796:85: p_ICForeignKey
                    {
                    pushFollow(FOLLOW_p_ICForeignKey_in_p_ICDecl16281);
                    p_ICForeignKey751=p_ICForeignKey();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, p_ICForeignKey751.getTree());

                    }
                    break;

            }

            SEMICOLON752=(CommonToken)match(input,SEMICOLON,FOLLOW_SEMICOLON_in_p_ICDecl16284); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            SEMICOLON752_tree = (XQDTCommonTree)adaptor.create(SEMICOLON752);
            adaptor.addChild(root_0, SEMICOLON752_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (XQDTCommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (XQDTCommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "p_ICDecl"

    public static class p_ICCollection_return extends ParserRuleReturnScope {
        XQDTCommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "p_ICCollection"
    // XQueryParser.g:1799:1: p_ICCollection : k+= ON k+= COLLECTION p_QName ( p_ICCollSequence | p_ICCollSequenceUnique | p_ICCollNode ) ;
    public final XQueryParser.p_ICCollection_return p_ICCollection() throws RecognitionException {
        XQueryParser.p_ICCollection_return retval = new XQueryParser.p_ICCollection_return();
        retval.start = input.LT(1);

        XQDTCommonTree root_0 = null;

        CommonToken k=null;
        List list_k=null;
        XQueryParser.p_QName_return p_QName753 = null;

        XQueryParser.p_ICCollSequence_return p_ICCollSequence754 = null;

        XQueryParser.p_ICCollSequenceUnique_return p_ICCollSequenceUnique755 = null;

        XQueryParser.p_ICCollNode_return p_ICCollNode756 = null;


        XQDTCommonTree k_tree=null;

        try {
            // XQueryParser.g:1800:9: (k+= ON k+= COLLECTION p_QName ( p_ICCollSequence | p_ICCollSequenceUnique | p_ICCollNode ) )
            // XQueryParser.g:1800:11: k+= ON k+= COLLECTION p_QName ( p_ICCollSequence | p_ICCollSequenceUnique | p_ICCollNode )
            {
            root_0 = (XQDTCommonTree)adaptor.nil();

            k=(CommonToken)match(input,ON,FOLLOW_ON_in_p_ICCollection16311); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            k_tree = (XQDTCommonTree)adaptor.create(k);
            adaptor.addChild(root_0, k_tree);
            }
            if (list_k==null) list_k=new ArrayList();
            list_k.add(k);

            k=(CommonToken)match(input,COLLECTION,FOLLOW_COLLECTION_in_p_ICCollection16315); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            k_tree = (XQDTCommonTree)adaptor.create(k);
            adaptor.addChild(root_0, k_tree);
            }
            if (list_k==null) list_k=new ArrayList();
            list_k.add(k);

            if ( state.backtracking==0 ) {
              ak(list_k);
            }
            pushFollow(FOLLOW_p_QName_in_p_ICCollection16319);
            p_QName753=p_QName();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, p_QName753.getTree());
            // XQueryParser.g:1800:49: ( p_ICCollSequence | p_ICCollSequenceUnique | p_ICCollNode )
            int alt254=3;
            switch ( input.LA(1) ) {
            case DOLLAR:
                {
                alt254=1;
                }
                break;
            case NODE:
                {
                alt254=2;
                }
                break;
            case FOREACH:
                {
                alt254=3;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 254, 0, input);

                throw nvae;
            }

            switch (alt254) {
                case 1 :
                    // XQueryParser.g:1800:50: p_ICCollSequence
                    {
                    pushFollow(FOLLOW_p_ICCollSequence_in_p_ICCollection16322);
                    p_ICCollSequence754=p_ICCollSequence();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, p_ICCollSequence754.getTree());

                    }
                    break;
                case 2 :
                    // XQueryParser.g:1800:69: p_ICCollSequenceUnique
                    {
                    pushFollow(FOLLOW_p_ICCollSequenceUnique_in_p_ICCollection16326);
                    p_ICCollSequenceUnique755=p_ICCollSequenceUnique();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, p_ICCollSequenceUnique755.getTree());

                    }
                    break;
                case 3 :
                    // XQueryParser.g:1800:94: p_ICCollNode
                    {
                    pushFollow(FOLLOW_p_ICCollNode_in_p_ICCollection16330);
                    p_ICCollNode756=p_ICCollNode();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, p_ICCollNode756.getTree());

                    }
                    break;

            }


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (XQDTCommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (XQDTCommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "p_ICCollection"

    public static class p_ICCollSequence_return extends ParserRuleReturnScope {
        XQDTCommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "p_ICCollSequence"
    // XQueryParser.g:1803:1: p_ICCollSequence : DOLLAR p_QName kc= CHECK p_ExprSingle ;
    public final XQueryParser.p_ICCollSequence_return p_ICCollSequence() throws RecognitionException {
        XQueryParser.p_ICCollSequence_return retval = new XQueryParser.p_ICCollSequence_return();
        retval.start = input.LT(1);

        XQDTCommonTree root_0 = null;

        CommonToken kc=null;
        CommonToken DOLLAR757=null;
        XQueryParser.p_QName_return p_QName758 = null;

        XQueryParser.p_ExprSingle_return p_ExprSingle759 = null;


        XQDTCommonTree kc_tree=null;
        XQDTCommonTree DOLLAR757_tree=null;

        try {
            // XQueryParser.g:1804:9: ( DOLLAR p_QName kc= CHECK p_ExprSingle )
            // XQueryParser.g:1804:11: DOLLAR p_QName kc= CHECK p_ExprSingle
            {
            root_0 = (XQDTCommonTree)adaptor.nil();

            DOLLAR757=(CommonToken)match(input,DOLLAR,FOLLOW_DOLLAR_in_p_ICCollSequence16356); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            DOLLAR757_tree = (XQDTCommonTree)adaptor.create(DOLLAR757);
            adaptor.addChild(root_0, DOLLAR757_tree);
            }
            pushFollow(FOLLOW_p_QName_in_p_ICCollSequence16358);
            p_QName758=p_QName();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, p_QName758.getTree());
            kc=(CommonToken)match(input,CHECK,FOLLOW_CHECK_in_p_ICCollSequence16362); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            kc_tree = (XQDTCommonTree)adaptor.create(kc);
            adaptor.addChild(root_0, kc_tree);
            }
            if ( state.backtracking==0 ) {
              ak(kc);
            }
            pushFollow(FOLLOW_p_ExprSingle_in_p_ICCollSequence16366);
            p_ExprSingle759=p_ExprSingle();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, p_ExprSingle759.getTree());

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (XQDTCommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (XQDTCommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "p_ICCollSequence"

    public static class p_ICCollSequenceUnique_return extends ParserRuleReturnScope {
        XQDTCommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "p_ICCollSequenceUnique"
    // XQueryParser.g:1807:1: p_ICCollSequenceUnique : k+= NODE k+= DOLLAR p_QName k+= CHECK k+= UNIQUE k+= KEY p_PathExpr ;
    public final XQueryParser.p_ICCollSequenceUnique_return p_ICCollSequenceUnique() throws RecognitionException {
        XQueryParser.p_ICCollSequenceUnique_return retval = new XQueryParser.p_ICCollSequenceUnique_return();
        retval.start = input.LT(1);

        XQDTCommonTree root_0 = null;

        CommonToken k=null;
        List list_k=null;
        XQueryParser.p_QName_return p_QName760 = null;

        XQueryParser.p_PathExpr_return p_PathExpr761 = null;


        XQDTCommonTree k_tree=null;

        try {
            // XQueryParser.g:1808:9: (k+= NODE k+= DOLLAR p_QName k+= CHECK k+= UNIQUE k+= KEY p_PathExpr )
            // XQueryParser.g:1808:11: k+= NODE k+= DOLLAR p_QName k+= CHECK k+= UNIQUE k+= KEY p_PathExpr
            {
            root_0 = (XQDTCommonTree)adaptor.nil();

            k=(CommonToken)match(input,NODE,FOLLOW_NODE_in_p_ICCollSequenceUnique16393); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            k_tree = (XQDTCommonTree)adaptor.create(k);
            adaptor.addChild(root_0, k_tree);
            }
            if (list_k==null) list_k=new ArrayList();
            list_k.add(k);

            k=(CommonToken)match(input,DOLLAR,FOLLOW_DOLLAR_in_p_ICCollSequenceUnique16397); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            k_tree = (XQDTCommonTree)adaptor.create(k);
            adaptor.addChild(root_0, k_tree);
            }
            if (list_k==null) list_k=new ArrayList();
            list_k.add(k);

            pushFollow(FOLLOW_p_QName_in_p_ICCollSequenceUnique16399);
            p_QName760=p_QName();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, p_QName760.getTree());
            k=(CommonToken)match(input,CHECK,FOLLOW_CHECK_in_p_ICCollSequenceUnique16403); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            k_tree = (XQDTCommonTree)adaptor.create(k);
            adaptor.addChild(root_0, k_tree);
            }
            if (list_k==null) list_k=new ArrayList();
            list_k.add(k);

            k=(CommonToken)match(input,UNIQUE,FOLLOW_UNIQUE_in_p_ICCollSequenceUnique16407); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            k_tree = (XQDTCommonTree)adaptor.create(k);
            adaptor.addChild(root_0, k_tree);
            }
            if (list_k==null) list_k=new ArrayList();
            list_k.add(k);

            k=(CommonToken)match(input,KEY,FOLLOW_KEY_in_p_ICCollSequenceUnique16411); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            k_tree = (XQDTCommonTree)adaptor.create(k);
            adaptor.addChild(root_0, k_tree);
            }
            if (list_k==null) list_k=new ArrayList();
            list_k.add(k);

            pushFollow(FOLLOW_p_PathExpr_in_p_ICCollSequenceUnique16413);
            p_PathExpr761=p_PathExpr();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, p_PathExpr761.getTree());
            if ( state.backtracking==0 ) {
              ak(list_k);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (XQDTCommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (XQDTCommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "p_ICCollSequenceUnique"

    public static class p_ICCollNode_return extends ParserRuleReturnScope {
        XQDTCommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "p_ICCollNode"
    // XQueryParser.g:1811:1: p_ICCollNode : k+= FOREACH k+= NODE DOLLAR p_QName k+= CHECK p_ExprSingle ;
    public final XQueryParser.p_ICCollNode_return p_ICCollNode() throws RecognitionException {
        XQueryParser.p_ICCollNode_return retval = new XQueryParser.p_ICCollNode_return();
        retval.start = input.LT(1);

        XQDTCommonTree root_0 = null;

        CommonToken DOLLAR762=null;
        CommonToken k=null;
        List list_k=null;
        XQueryParser.p_QName_return p_QName763 = null;

        XQueryParser.p_ExprSingle_return p_ExprSingle764 = null;


        XQDTCommonTree DOLLAR762_tree=null;
        XQDTCommonTree k_tree=null;

        try {
            // XQueryParser.g:1812:9: (k+= FOREACH k+= NODE DOLLAR p_QName k+= CHECK p_ExprSingle )
            // XQueryParser.g:1812:11: k+= FOREACH k+= NODE DOLLAR p_QName k+= CHECK p_ExprSingle
            {
            root_0 = (XQDTCommonTree)adaptor.nil();

            k=(CommonToken)match(input,FOREACH,FOLLOW_FOREACH_in_p_ICCollNode16442); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            k_tree = (XQDTCommonTree)adaptor.create(k);
            adaptor.addChild(root_0, k_tree);
            }
            if (list_k==null) list_k=new ArrayList();
            list_k.add(k);

            k=(CommonToken)match(input,NODE,FOLLOW_NODE_in_p_ICCollNode16446); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            k_tree = (XQDTCommonTree)adaptor.create(k);
            adaptor.addChild(root_0, k_tree);
            }
            if (list_k==null) list_k=new ArrayList();
            list_k.add(k);

            DOLLAR762=(CommonToken)match(input,DOLLAR,FOLLOW_DOLLAR_in_p_ICCollNode16448); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            DOLLAR762_tree = (XQDTCommonTree)adaptor.create(DOLLAR762);
            adaptor.addChild(root_0, DOLLAR762_tree);
            }
            pushFollow(FOLLOW_p_QName_in_p_ICCollNode16450);
            p_QName763=p_QName();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, p_QName763.getTree());
            k=(CommonToken)match(input,CHECK,FOLLOW_CHECK_in_p_ICCollNode16454); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            k_tree = (XQDTCommonTree)adaptor.create(k);
            adaptor.addChild(root_0, k_tree);
            }
            if (list_k==null) list_k=new ArrayList();
            list_k.add(k);

            pushFollow(FOLLOW_p_ExprSingle_in_p_ICCollNode16456);
            p_ExprSingle764=p_ExprSingle();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, p_ExprSingle764.getTree());
            if ( state.backtracking==0 ) {
              ak(list_k);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (XQDTCommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (XQDTCommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "p_ICCollNode"

    public static class p_ICForeignKey_return extends ParserRuleReturnScope {
        XQDTCommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "p_ICForeignKey"
    // XQueryParser.g:1815:1: p_ICForeignKey : k+= FOREIGN k+= KEY p_ICForeignKeySource p_ICForeignKeyTarget ;
    public final XQueryParser.p_ICForeignKey_return p_ICForeignKey() throws RecognitionException {
        XQueryParser.p_ICForeignKey_return retval = new XQueryParser.p_ICForeignKey_return();
        retval.start = input.LT(1);

        XQDTCommonTree root_0 = null;

        CommonToken k=null;
        List list_k=null;
        XQueryParser.p_ICForeignKeySource_return p_ICForeignKeySource765 = null;

        XQueryParser.p_ICForeignKeyTarget_return p_ICForeignKeyTarget766 = null;


        XQDTCommonTree k_tree=null;

        try {
            // XQueryParser.g:1816:9: (k+= FOREIGN k+= KEY p_ICForeignKeySource p_ICForeignKeyTarget )
            // XQueryParser.g:1816:11: k+= FOREIGN k+= KEY p_ICForeignKeySource p_ICForeignKeyTarget
            {
            root_0 = (XQDTCommonTree)adaptor.nil();

            k=(CommonToken)match(input,FOREIGN,FOLLOW_FOREIGN_in_p_ICForeignKey16485); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            k_tree = (XQDTCommonTree)adaptor.create(k);
            adaptor.addChild(root_0, k_tree);
            }
            if (list_k==null) list_k=new ArrayList();
            list_k.add(k);

            k=(CommonToken)match(input,KEY,FOLLOW_KEY_in_p_ICForeignKey16489); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            k_tree = (XQDTCommonTree)adaptor.create(k);
            adaptor.addChild(root_0, k_tree);
            }
            if (list_k==null) list_k=new ArrayList();
            list_k.add(k);

            pushFollow(FOLLOW_p_ICForeignKeySource_in_p_ICForeignKey16491);
            p_ICForeignKeySource765=p_ICForeignKeySource();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, p_ICForeignKeySource765.getTree());
            pushFollow(FOLLOW_p_ICForeignKeyTarget_in_p_ICForeignKey16493);
            p_ICForeignKeyTarget766=p_ICForeignKeyTarget();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, p_ICForeignKeyTarget766.getTree());
            if ( state.backtracking==0 ) {
              ak(list_k);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (XQDTCommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (XQDTCommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "p_ICForeignKey"

    public static class p_ICForeignKeySource_return extends ParserRuleReturnScope {
        XQDTCommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "p_ICForeignKeySource"
    // XQueryParser.g:1819:1: p_ICForeignKeySource : kf= FROM p_ICForeignKeyValues ;
    public final XQueryParser.p_ICForeignKeySource_return p_ICForeignKeySource() throws RecognitionException {
        XQueryParser.p_ICForeignKeySource_return retval = new XQueryParser.p_ICForeignKeySource_return();
        retval.start = input.LT(1);

        XQDTCommonTree root_0 = null;

        CommonToken kf=null;
        XQueryParser.p_ICForeignKeyValues_return p_ICForeignKeyValues767 = null;


        XQDTCommonTree kf_tree=null;

        try {
            // XQueryParser.g:1820:9: (kf= FROM p_ICForeignKeyValues )
            // XQueryParser.g:1820:11: kf= FROM p_ICForeignKeyValues
            {
            root_0 = (XQDTCommonTree)adaptor.nil();

            kf=(CommonToken)match(input,FROM,FOLLOW_FROM_in_p_ICForeignKeySource16522); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            kf_tree = (XQDTCommonTree)adaptor.create(kf);
            adaptor.addChild(root_0, kf_tree);
            }
            if ( state.backtracking==0 ) {
              ak(kf);
            }
            pushFollow(FOLLOW_p_ICForeignKeyValues_in_p_ICForeignKeySource16526);
            p_ICForeignKeyValues767=p_ICForeignKeyValues();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, p_ICForeignKeyValues767.getTree());

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (XQDTCommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (XQDTCommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "p_ICForeignKeySource"

    public static class p_ICForeignKeyTarget_return extends ParserRuleReturnScope {
        XQDTCommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "p_ICForeignKeyTarget"
    // XQueryParser.g:1823:1: p_ICForeignKeyTarget : kt= TO p_ICForeignKeyValues ;
    public final XQueryParser.p_ICForeignKeyTarget_return p_ICForeignKeyTarget() throws RecognitionException {
        XQueryParser.p_ICForeignKeyTarget_return retval = new XQueryParser.p_ICForeignKeyTarget_return();
        retval.start = input.LT(1);

        XQDTCommonTree root_0 = null;

        CommonToken kt=null;
        XQueryParser.p_ICForeignKeyValues_return p_ICForeignKeyValues768 = null;


        XQDTCommonTree kt_tree=null;

        try {
            // XQueryParser.g:1824:9: (kt= TO p_ICForeignKeyValues )
            // XQueryParser.g:1824:11: kt= TO p_ICForeignKeyValues
            {
            root_0 = (XQDTCommonTree)adaptor.nil();

            kt=(CommonToken)match(input,TO,FOLLOW_TO_in_p_ICForeignKeyTarget16553); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            kt_tree = (XQDTCommonTree)adaptor.create(kt);
            adaptor.addChild(root_0, kt_tree);
            }
            if ( state.backtracking==0 ) {
              ak(kt);
            }
            pushFollow(FOLLOW_p_ICForeignKeyValues_in_p_ICForeignKeyTarget16557);
            p_ICForeignKeyValues768=p_ICForeignKeyValues();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, p_ICForeignKeyValues768.getTree());

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (XQDTCommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (XQDTCommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "p_ICForeignKeyTarget"

    public static class p_ICForeignKeyValues_return extends ParserRuleReturnScope {
        XQDTCommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "p_ICForeignKeyValues"
    // XQueryParser.g:1827:1: p_ICForeignKeyValues : k+= COLLECTION p_QName k+= NODE DOLLAR p_QName k+= KEY p_PathExpr ;
    public final XQueryParser.p_ICForeignKeyValues_return p_ICForeignKeyValues() throws RecognitionException {
        XQueryParser.p_ICForeignKeyValues_return retval = new XQueryParser.p_ICForeignKeyValues_return();
        retval.start = input.LT(1);

        XQDTCommonTree root_0 = null;

        CommonToken DOLLAR770=null;
        CommonToken k=null;
        List list_k=null;
        XQueryParser.p_QName_return p_QName769 = null;

        XQueryParser.p_QName_return p_QName771 = null;

        XQueryParser.p_PathExpr_return p_PathExpr772 = null;


        XQDTCommonTree DOLLAR770_tree=null;
        XQDTCommonTree k_tree=null;

        try {
            // XQueryParser.g:1828:9: (k+= COLLECTION p_QName k+= NODE DOLLAR p_QName k+= KEY p_PathExpr )
            // XQueryParser.g:1828:11: k+= COLLECTION p_QName k+= NODE DOLLAR p_QName k+= KEY p_PathExpr
            {
            root_0 = (XQDTCommonTree)adaptor.nil();

            k=(CommonToken)match(input,COLLECTION,FOLLOW_COLLECTION_in_p_ICForeignKeyValues16584); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            k_tree = (XQDTCommonTree)adaptor.create(k);
            adaptor.addChild(root_0, k_tree);
            }
            if (list_k==null) list_k=new ArrayList();
            list_k.add(k);

            pushFollow(FOLLOW_p_QName_in_p_ICForeignKeyValues16586);
            p_QName769=p_QName();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, p_QName769.getTree());
            k=(CommonToken)match(input,NODE,FOLLOW_NODE_in_p_ICForeignKeyValues16590); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            k_tree = (XQDTCommonTree)adaptor.create(k);
            adaptor.addChild(root_0, k_tree);
            }
            if (list_k==null) list_k=new ArrayList();
            list_k.add(k);

            DOLLAR770=(CommonToken)match(input,DOLLAR,FOLLOW_DOLLAR_in_p_ICForeignKeyValues16592); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            DOLLAR770_tree = (XQDTCommonTree)adaptor.create(DOLLAR770);
            adaptor.addChild(root_0, DOLLAR770_tree);
            }
            pushFollow(FOLLOW_p_QName_in_p_ICForeignKeyValues16594);
            p_QName771=p_QName();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, p_QName771.getTree());
            k=(CommonToken)match(input,KEY,FOLLOW_KEY_in_p_ICForeignKeyValues16598); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            k_tree = (XQDTCommonTree)adaptor.create(k);
            adaptor.addChild(root_0, k_tree);
            }
            if (list_k==null) list_k=new ArrayList();
            list_k.add(k);

            pushFollow(FOLLOW_p_PathExpr_in_p_ICForeignKeyValues16600);
            p_PathExpr772=p_PathExpr();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, p_PathExpr772.getTree());
            if ( state.backtracking==0 ) {
              ak(list_k);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (XQDTCommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (XQDTCommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "p_ICForeignKeyValues"

    // $ANTLR start synpred1_XQueryParser
    public final void synpred1_XQueryParser_fragment() throws RecognitionException {   
        // XQueryParser.g:661:11: ( VALIDATE p_ValidationMode LBRACKET )
        // XQueryParser.g:661:12: VALIDATE p_ValidationMode LBRACKET
        {
        match(input,VALIDATE,FOLLOW_VALIDATE_in_synpred1_XQueryParser5982); if (state.failed) return ;
        pushFollow(FOLLOW_p_ValidationMode_in_synpred1_XQueryParser5984);
        p_ValidationMode();

        state._fsp--;
        if (state.failed) return ;
        match(input,LBRACKET,FOLLOW_LBRACKET_in_synpred1_XQueryParser5986); if (state.failed) return ;

        }
    }
    // $ANTLR end synpred1_XQueryParser

    // $ANTLR start synpred2_XQueryParser
    public final void synpred2_XQueryParser_fragment() throws RecognitionException {   
        // XQueryParser.g:705:11: ( SLASH p_RelativePathExpr )
        // XQueryParser.g:705:12: SLASH p_RelativePathExpr
        {
        match(input,SLASH,FOLLOW_SLASH_in_synpred2_XQueryParser6328); if (state.failed) return ;
        pushFollow(FOLLOW_p_RelativePathExpr_in_synpred2_XQueryParser6330);
        p_RelativePathExpr();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred2_XQueryParser

    // $ANTLR start synpred3_XQueryParser
    public final void synpred3_XQueryParser_fragment() throws RecognitionException {   
        // XQueryParser.g:1059:26: ( p_OccurrenceIndicator )
        // XQueryParser.g:1059:27: p_OccurrenceIndicator
        {
        pushFollow(FOLLOW_p_OccurrenceIndicator_in_synpred3_XQueryParser9005);
        p_OccurrenceIndicator();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred3_XQueryParser

    // $ANTLR start synpred4_XQueryParser
    public final void synpred4_XQueryParser_fragment() throws RecognitionException {   
        // XQueryParser.g:1762:41: ( p_OccurrenceIndicator )
        // XQueryParser.g:1762:42: p_OccurrenceIndicator
        {
        pushFollow(FOLLOW_p_OccurrenceIndicator_in_synpred4_XQueryParser15924);
        p_OccurrenceIndicator();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred4_XQueryParser

    // Delegated rules

    public final boolean synpred4_XQueryParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred4_XQueryParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred2_XQueryParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred2_XQueryParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred1_XQueryParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred1_XQueryParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred3_XQueryParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred3_XQueryParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }


    protected DFA6 dfa6 = new DFA6(this);
    protected DFA5 dfa5 = new DFA5(this);
    protected DFA7 dfa7 = new DFA7(this);
    protected DFA8 dfa8 = new DFA8(this);
    protected DFA52 dfa52 = new DFA52(this);
    protected DFA113 dfa113 = new DFA113(this);
    protected DFA120 dfa120 = new DFA120(this);
    protected DFA122 dfa122 = new DFA122(this);
    protected DFA124 dfa124 = new DFA124(this);
    protected DFA129 dfa129 = new DFA129(this);
    protected DFA134 dfa134 = new DFA134(this);
    protected DFA164 dfa164 = new DFA164(this);
    protected DFA166 dfa166 = new DFA166(this);
    protected DFA199 dfa199 = new DFA199(this);
    static final String DFA6_eotS =
        "\15\uffff";
    static final String DFA6_eofS =
        "\1\2\1\14\1\uffff\1\14\11\uffff";
    static final String DFA6_minS =
        "\1\20\1\22\1\uffff\1\22\11\uffff";
    static final String DFA6_maxS =
        "\1\u0164\1\u010c\1\uffff\1\u010c\11\uffff";
    static final String DFA6_acceptS =
        "\2\uffff\1\2\1\uffff\3\2\3\1\3\2";
    static final String DFA6_specialS =
        "\1\uffff\1\0\13\uffff}>";
    static final String[] DFA6_transitionS = {
            "\22\2\1\1\31\2\1\3\70\2\1\uffff\11\2\1\uffff\116\2\1\uffff"+
            "\22\2\1\uffff\14\2\1\uffff\1\2\12\uffff\4\2\5\uffff\4\2\14\uffff"+
            "\1\2\2\uffff\2\2\2\uffff\1\2\6\uffff\6\2\75\uffff\1\2",
            "\1\14\4\uffff\2\7\2\uffff\2\14\3\uffff\1\7\1\11\1\uffff\1"+
            "\7\3\uffff\1\14\7\uffff\1\14\1\uffff\1\14\4\uffff\2\14\1\uffff"+
            "\2\14\4\uffff\3\14\2\uffff\1\14\2\uffff\2\14\1\uffff\1\11\1"+
            "\14\4\uffff\1\5\1\14\1\uffff\1\6\1\7\21\uffff\2\14\1\uffff\1"+
            "\14\1\6\1\uffff\1\12\4\uffff\1\2\3\uffff\1\14\11\uffff\1\14"+
            "\5\uffff\1\12\1\14\25\uffff\1\10\1\uffff\1\14\1\13\3\uffff\1"+
            "\14\7\uffff\1\11\40\uffff\1\12\2\uffff\1\4\1\uffff\1\14\2\uffff"+
            "\1\6\1\13\1\uffff\1\6\1\uffff\1\6\3\uffff\1\13\1\6\2\uffff\1"+
            "\13\1\6\1\13\1\uffff\1\6\2\uffff\1\13\4\uffff\1\14\4\uffff\1"+
            "\14\1\uffff\1\14\1\uffff\1\14\1\uffff\1\14\1\uffff\13\14\2\uffff"+
            "\1\14\3\uffff\2\14",
            "",
            "\1\14\10\uffff\2\14\12\uffff\1\14\7\uffff\1\14\1\uffff\1\14"+
            "\5\uffff\1\14\1\uffff\2\14\4\uffff\3\14\2\uffff\1\14\2\uffff"+
            "\2\14\1\11\1\uffff\1\14\5\uffff\1\14\12\uffff\1\11\11\uffff"+
            "\2\14\1\uffff\1\14\71\uffff\1\14\111\uffff\1\14\4\uffff\1\14"+
            "\1\uffff\1\14\1\uffff\1\14\1\uffff\1\14\1\uffff\13\14\2\uffff"+
            "\1\14\3\uffff\2\14",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };

    static final short[] DFA6_eot = DFA.unpackEncodedString(DFA6_eotS);
    static final short[] DFA6_eof = DFA.unpackEncodedString(DFA6_eofS);
    static final char[] DFA6_min = DFA.unpackEncodedStringToUnsignedChars(DFA6_minS);
    static final char[] DFA6_max = DFA.unpackEncodedStringToUnsignedChars(DFA6_maxS);
    static final short[] DFA6_accept = DFA.unpackEncodedString(DFA6_acceptS);
    static final short[] DFA6_special = DFA.unpackEncodedString(DFA6_specialS);
    static final short[][] DFA6_transition;

    static {
        int numStates = DFA6_transitionS.length;
        DFA6_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA6_transition[i] = DFA.unpackEncodedString(DFA6_transitionS[i]);
        }
    }

    class DFA6 extends DFA {

        public DFA6(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 6;
            this.eot = DFA6_eot;
            this.eof = DFA6_eof;
            this.min = DFA6_min;
            this.max = DFA6_max;
            this.accept = DFA6_accept;
            this.special = DFA6_special;
            this.transition = DFA6_transition;
        }
        public String getDescription() {
            return "()* loopback of 167:11: ( (dnd+= pm_DefaultNamespaceDecl | s+= p_Setter | nd+= pm_NamespaceDecl | i+= p_Import | fto+= pm_FTOptionDecl ) )*";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA6_1 = input.LA(1);

                         
                        int index6_1 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA6_1==CONTEXT) ) {s = 2;}

                        else if ( (LA6_1==SEQUENTIAL) && ((lc(XQS)))) {s = 4;}

                        else if ( (LA6_1==OPTION) ) {s = 5;}

                        else if ( (LA6_1==ORDERED||LA6_1==UNORDERED||LA6_1==APPEND_ONLY||LA6_1==COLLECTION||LA6_1==CONST||LA6_1==INTEGRITY||LA6_1==MUTABLE||LA6_1==QUEUE) && ((lc(ZORBA)))) {s = 6;}

                        else if ( ((LA6_1>=BASE_URI && LA6_1<=BOUNDARY_SPACE)||LA6_1==CONSTRUCTION||LA6_1==DEFAULT||LA6_1==ORDERING) ) {s = 7;}

                        else if ( (LA6_1==REVALIDATION) && ((lc(XQU)))) {s = 8;}

                        else if ( (LA6_1==COPY_NAMESPACES||LA6_1==NAMESPACE||LA6_1==FT_OPTION) ) {s = 9;}

                        else if ( (LA6_1==VARIABLE||LA6_1==PRIVATE||LA6_1==CONSTANT) ) {s = 10;}

                        else if ( (LA6_1==VALUE||LA6_1==AUTOMATICALLY||LA6_1==INDEX||LA6_1==MANUALLY||LA6_1==NON||LA6_1==UNIQUE) && ((lc(ZORBA)))) {s = 11;}

                        else if ( (LA6_1==EOF||LA6_1==AND||(LA6_1>=CAST && LA6_1<=CASTABLE)||LA6_1==DIV||LA6_1==EQ||LA6_1==EXCEPT||(LA6_1>=FUNCTION && LA6_1<=GE)||(LA6_1>=GT && LA6_1<=IDIV)||(LA6_1>=INSTANCE && LA6_1<=IS)||LA6_1==LE||(LA6_1>=LT && LA6_1<=MOD)||LA6_1==NE||LA6_1==OR||(LA6_1>=TO && LA6_1<=TREAT)||LA6_1==UNION||LA6_1==DETERMINISTIC||LA6_1==NONDETERMINISTIC||LA6_1==PUBLIC||LA6_1==UPDATING||LA6_1==CONTAINS||LA6_1==SIMPLE||LA6_1==LPAREN||LA6_1==LSQUARE||LA6_1==EQUAL||LA6_1==NOTEQUAL||LA6_1==COMMA||(LA6_1>=STAR && LA6_1<=SLASH_SLASH)||LA6_1==COLON||(LA6_1>=SEMICOLON && LA6_1<=VBAR)) ) {s = 12;}

                         
                        input.seek(index6_1);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 6, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static final String DFA5_eotS =
        "\12\uffff";
    static final String DFA5_eofS =
        "\12\uffff";
    static final String DFA5_minS =
        "\1\42\1\27\1\uffff\1\36\6\uffff";
    static final String DFA5_maxS =
        "\1\74\1\u00ab\1\uffff\1\122\6\uffff";
    static final String DFA5_acceptS =
        "\2\uffff\1\4\1\uffff\3\2\1\3\1\5\1\1";
    static final String DFA5_specialS =
        "\1\uffff\1\0\10\uffff}>";
    static final String[] DFA5_transitionS = {
            "\1\1\31\uffff\1\2",
            "\2\4\7\uffff\1\4\1\6\1\uffff\1\3\46\uffff\1\7\11\uffff\1\4"+
            "\107\uffff\1\5\16\uffff\1\10",
            "",
            "\1\6\13\uffff\1\11\13\uffff\1\11\33\uffff\1\6",
            "",
            "",
            "",
            "",
            "",
            ""
    };

    static final short[] DFA5_eot = DFA.unpackEncodedString(DFA5_eotS);
    static final short[] DFA5_eof = DFA.unpackEncodedString(DFA5_eofS);
    static final char[] DFA5_min = DFA.unpackEncodedStringToUnsignedChars(DFA5_minS);
    static final char[] DFA5_max = DFA.unpackEncodedStringToUnsignedChars(DFA5_maxS);
    static final short[] DFA5_accept = DFA.unpackEncodedString(DFA5_acceptS);
    static final short[] DFA5_special = DFA.unpackEncodedString(DFA5_specialS);
    static final short[][] DFA5_transition;

    static {
        int numStates = DFA5_transitionS.length;
        DFA5_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA5_transition[i] = DFA.unpackEncodedString(DFA5_transitionS[i]);
        }
    }

    class DFA5 extends DFA {

        public DFA5(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 5;
            this.eot = DFA5_eot;
            this.eof = DFA5_eof;
            this.min = DFA5_min;
            this.max = DFA5_max;
            this.accept = DFA5_accept;
            this.special = DFA5_special;
            this.transition = DFA5_transition;
        }
        public String getDescription() {
            return "167:12: (dnd+= pm_DefaultNamespaceDecl | s+= p_Setter | nd+= pm_NamespaceDecl | i+= p_Import | fto+= pm_FTOptionDecl )";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA5_1 = input.LA(1);

                         
                        int index5_1 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA5_1==DEFAULT) ) {s = 3;}

                        else if ( ((LA5_1>=BASE_URI && LA5_1<=BOUNDARY_SPACE)||LA5_1==CONSTRUCTION||LA5_1==ORDERING) ) {s = 4;}

                        else if ( (LA5_1==REVALIDATION) && ((lc(XQU)))) {s = 5;}

                        else if ( (LA5_1==COPY_NAMESPACES) ) {s = 6;}

                        else if ( (LA5_1==NAMESPACE) ) {s = 7;}

                        else if ( (LA5_1==FT_OPTION) ) {s = 8;}

                         
                        input.seek(index5_1);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 5, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static final String DFA7_eotS =
        "\14\uffff";
    static final String DFA7_eofS =
        "\1\1\1\uffff\1\1\11\uffff";
    static final String DFA7_minS =
        "\1\20\1\uffff\1\22\5\uffff\1\66\3\uffff";
    static final String DFA7_maxS =
        "\1\u0164\1\uffff\1\u010c\5\uffff\1\u00d1\3\uffff";
    static final String DFA7_acceptS =
        "\1\uffff\1\10\1\uffff\1\2\1\3\1\4\1\7\1\5\1\uffff\1\1\1\3\1\6";
    static final String DFA7_specialS =
        "\2\uffff\1\0\11\uffff}>";
    static final String[] DFA7_transitionS = {
            "\22\1\1\2\122\1\1\uffff\11\1\1\uffff\116\1\1\uffff\22\1\1\uffff"+
            "\14\1\1\uffff\1\1\12\uffff\4\1\5\uffff\4\1\14\uffff\1\1\2\uffff"+
            "\2\1\2\uffff\1\1\6\uffff\6\1\75\uffff\1\1",
            "",
            "\1\1\10\uffff\2\1\12\uffff\1\1\7\uffff\1\1\1\uffff\1\1\4\uffff"+
            "\1\12\1\1\1\uffff\2\1\4\uffff\3\1\2\uffff\1\1\2\uffff\2\1\2"+
            "\uffff\1\1\4\uffff\1\5\1\1\1\uffff\1\7\22\uffff\2\1\1\uffff"+
            "\1\1\1\7\1\uffff\1\11\4\uffff\1\3\3\uffff\1\12\11\uffff\1\12"+
            "\5\uffff\1\10\1\12\27\uffff\1\12\1\13\3\uffff\1\1\50\uffff\1"+
            "\11\2\uffff\1\4\1\uffff\1\12\2\uffff\1\7\1\13\1\uffff\1\7\1"+
            "\uffff\1\7\3\uffff\1\13\1\6\2\uffff\1\13\1\7\1\13\1\uffff\1"+
            "\7\2\uffff\1\13\4\uffff\1\1\4\uffff\1\1\1\uffff\1\1\1\uffff"+
            "\1\1\1\uffff\1\1\1\uffff\13\1\2\uffff\1\1\3\uffff\2\1",
            "",
            "",
            "",
            "",
            "",
            "\1\12\65\uffff\1\11\10\uffff\1\12\11\uffff\1\12\5\uffff\2"+
            "\12\27\uffff\1\12\55\uffff\1\11\4\uffff\1\12",
            "",
            "",
            ""
    };

    static final short[] DFA7_eot = DFA.unpackEncodedString(DFA7_eotS);
    static final short[] DFA7_eof = DFA.unpackEncodedString(DFA7_eofS);
    static final char[] DFA7_min = DFA.unpackEncodedStringToUnsignedChars(DFA7_minS);
    static final char[] DFA7_max = DFA.unpackEncodedStringToUnsignedChars(DFA7_maxS);
    static final short[] DFA7_accept = DFA.unpackEncodedString(DFA7_acceptS);
    static final short[] DFA7_special = DFA.unpackEncodedString(DFA7_specialS);
    static final short[][] DFA7_transition;

    static {
        int numStates = DFA7_transitionS.length;
        DFA7_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA7_transition[i] = DFA.unpackEncodedString(DFA7_transitionS[i]);
        }
    }

    class DFA7 extends DFA {

        public DFA7(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 7;
            this.eot = DFA7_eot;
            this.eof = DFA7_eof;
            this.min = DFA7_min;
            this.max = DFA7_max;
            this.accept = DFA7_accept;
            this.special = DFA7_special;
            this.transition = DFA7_transition;
        }
        public String getDescription() {
            return "()* loopback of 183:11: ( pm_VarDecl | pm_ContextItemDecl | pm_FunctionDecl | pm_OptionDecl | {...}? => p_CollectionDecl | {...}? => p_IndexDecl | {...}? => p_ICDecl )*";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA7_2 = input.LA(1);

                         
                        int index7_2 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA7_2==CONTEXT) ) {s = 3;}

                        else if ( (LA7_2==SEQUENTIAL) && ((lc(XQS)))) {s = 4;}

                        else if ( (LA7_2==OPTION) ) {s = 5;}

                        else if ( (LA7_2==INTEGRITY) && ((lc(ZORBA)))) {s = 6;}

                        else if ( (LA7_2==EOF||LA7_2==AND||(LA7_2>=CAST && LA7_2<=CASTABLE)||LA7_2==DIV||LA7_2==EQ||LA7_2==EXCEPT||LA7_2==GE||(LA7_2>=GT && LA7_2<=IDIV)||(LA7_2>=INSTANCE && LA7_2<=IS)||LA7_2==LE||(LA7_2>=LT && LA7_2<=MOD)||LA7_2==NE||LA7_2==OR||(LA7_2>=TO && LA7_2<=TREAT)||LA7_2==UNION||LA7_2==CONTAINS||LA7_2==LPAREN||LA7_2==LSQUARE||LA7_2==EQUAL||LA7_2==NOTEQUAL||LA7_2==COMMA||(LA7_2>=STAR && LA7_2<=SLASH_SLASH)||LA7_2==COLON||(LA7_2>=SEMICOLON && LA7_2<=VBAR)) ) {s = 1;}

                        else if ( (LA7_2==ORDERED||LA7_2==UNORDERED||LA7_2==APPEND_ONLY||LA7_2==COLLECTION||LA7_2==CONST||LA7_2==MUTABLE||LA7_2==QUEUE) && ((lc(ZORBA)))) {s = 7;}

                        else if ( (LA7_2==PRIVATE) ) {s = 8;}

                        else if ( (LA7_2==VARIABLE||LA7_2==CONSTANT) ) {s = 9;}

                        else if ( (LA7_2==FUNCTION||LA7_2==DETERMINISTIC||LA7_2==NONDETERMINISTIC||LA7_2==PUBLIC||LA7_2==UPDATING||LA7_2==SIMPLE) ) {s = 10;}

                        else if ( (LA7_2==VALUE||LA7_2==AUTOMATICALLY||LA7_2==INDEX||LA7_2==MANUALLY||LA7_2==NON||LA7_2==UNIQUE) && ((lc(ZORBA)))) {s = 11;}

                         
                        input.seek(index7_2);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 7, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static final String DFA8_eotS =
        "\13\uffff";
    static final String DFA8_eofS =
        "\13\uffff";
    static final String DFA8_minS =
        "\1\42\1\27\1\uffff\1\36\7\uffff";
    static final String DFA8_maxS =
        "\1\42\1\u009c\1\uffff\1\122\7\uffff";
    static final String DFA8_acceptS =
        "\2\uffff\1\1\1\uffff\1\3\1\4\1\5\1\7\1\10\1\2\1\6";
    static final String DFA8_specialS =
        "\1\uffff\1\0\11\uffff}>";
    static final String[] DFA8_transitionS = {
            "\1\1",
            "\1\4\1\2\7\uffff\1\5\1\10\1\uffff\1\3\60\uffff\1\6\107\uffff"+
            "\1\7",
            "",
            "\1\11\63\uffff\1\12",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };

    static final short[] DFA8_eot = DFA.unpackEncodedString(DFA8_eotS);
    static final short[] DFA8_eof = DFA.unpackEncodedString(DFA8_eofS);
    static final char[] DFA8_min = DFA.unpackEncodedStringToUnsignedChars(DFA8_minS);
    static final char[] DFA8_max = DFA.unpackEncodedStringToUnsignedChars(DFA8_maxS);
    static final short[] DFA8_accept = DFA.unpackEncodedString(DFA8_acceptS);
    static final short[] DFA8_special = DFA.unpackEncodedString(DFA8_specialS);
    static final short[][] DFA8_transition;

    static {
        int numStates = DFA8_transitionS.length;
        DFA8_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA8_transition[i] = DFA.unpackEncodedString(DFA8_transitionS[i]);
        }
    }

    class DFA8 extends DFA {

        public DFA8(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 8;
            this.eot = DFA8_eot;
            this.eof = DFA8_eof;
            this.min = DFA8_min;
            this.max = DFA8_max;
            this.accept = DFA8_accept;
            this.special = DFA8_special;
            this.transition = DFA8_transition;
        }
        public String getDescription() {
            return "191:1: p_Setter : ( pm_BoundarySpaceDecl | pm_DefaultCollationDecl | pm_BaseURIDecl | pm_ConstructionDecl | pm_OrderingModeDecl | pm_EmptyOrderDecl | {...}? => pm_RevalidationDecl | pm_CopyNamespacesDecl );";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA8_1 = input.LA(1);

                         
                        int index8_1 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA8_1==BOUNDARY_SPACE) ) {s = 2;}

                        else if ( (LA8_1==DEFAULT) ) {s = 3;}

                        else if ( (LA8_1==BASE_URI) ) {s = 4;}

                        else if ( (LA8_1==CONSTRUCTION) ) {s = 5;}

                        else if ( (LA8_1==ORDERING) ) {s = 6;}

                        else if ( (LA8_1==REVALIDATION) && ((lc(XQU)))) {s = 7;}

                        else if ( (LA8_1==COPY_NAMESPACES) ) {s = 8;}

                         
                        input.seek(index8_1);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 8, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static final String DFA52_eotS =
        "\45\uffff";
    static final String DFA52_eofS =
        "\1\uffff\23\24\21\uffff";
    static final String DFA52_minS =
        "\1\20\23\22\21\uffff";
    static final String DFA52_maxS =
        "\1\u0164\23\u010c\21\uffff";
    static final String DFA52_acceptS =
        "\24\uffff\1\21\1\1\1\2\1\3\1\4\1\5\1\6\1\7\1\10\1\11\1\12\1\13"+
        "\1\14\1\15\1\16\1\17\1\20";
    static final String DFA52_specialS =
        "\11\uffff\1\2\1\1\1\0\1\12\1\4\1\3\1\10\1\7\1\5\1\6\1\11\21\uffff}>";
    static final String[] DFA52_transitionS = {
            "\40\24\1\4\4\24\1\1\5\24\1\7\12\24\1\2\31\24\1\3\7\24\1\6\14"+
            "\24\1\uffff\11\24\1\uffff\12\24\1\5\1\10\6\24\1\17\1\14\1\24"+
            "\1\13\4\24\1\15\1\16\51\24\1\11\5\24\1\20\1\24\1\22\1\uffff"+
            "\1\24\1\21\1\24\1\23\1\12\15\24\1\uffff\14\24\1\uffff\1\24\12"+
            "\uffff\4\24\5\uffff\4\24\14\uffff\1\24\2\uffff\2\24\2\uffff"+
            "\1\24\6\uffff\6\24\75\uffff\1\24",
            "\3\24\5\uffff\3\24\1\uffff\1\24\4\uffff\1\24\2\uffff\2\24"+
            "\3\uffff\2\24\2\uffff\1\24\1\uffff\1\24\3\uffff\1\24\1\uffff"+
            "\1\24\1\uffff\2\24\4\uffff\3\24\2\uffff\1\24\1\uffff\3\24\2"+
            "\uffff\1\24\5\uffff\2\24\7\uffff\2\24\5\uffff\1\24\4\uffff\2"+
            "\24\1\uffff\1\24\4\uffff\1\24\3\uffff\1\24\4\uffff\2\24\7\uffff"+
            "\1\24\7\uffff\1\25\1\24\2\uffff\1\25\3\uffff\2\24\4\uffff\1"+
            "\24\1\uffff\1\24\7\uffff\1\24\2\uffff\1\24\111\uffff\2\24\1"+
            "\25\1\uffff\4\24\1\uffff\1\24\1\uffff\1\24\1\uffff\13\24\2\uffff"+
            "\1\24\3\uffff\2\24",
            "\3\24\5\uffff\3\24\1\uffff\1\24\4\uffff\1\24\2\uffff\2\24"+
            "\3\uffff\2\24\2\uffff\1\24\1\uffff\1\24\3\uffff\1\24\1\uffff"+
            "\1\24\1\uffff\2\24\4\uffff\3\24\2\uffff\1\24\1\uffff\3\24\2"+
            "\uffff\1\24\5\uffff\2\24\7\uffff\2\24\5\uffff\1\24\4\uffff\2"+
            "\24\1\uffff\1\24\4\uffff\1\24\3\uffff\1\24\4\uffff\2\24\7\uffff"+
            "\1\24\10\uffff\1\24\6\uffff\2\24\4\uffff\1\24\1\uffff\1\24\7"+
            "\uffff\1\24\2\uffff\1\24\30\uffff\1\25\60\uffff\2\24\1\25\1"+
            "\uffff\4\24\1\uffff\1\24\1\uffff\1\24\1\uffff\13\24\2\uffff"+
            "\1\24\3\uffff\2\24",
            "\3\24\5\uffff\3\24\1\uffff\1\24\4\uffff\1\24\2\uffff\2\24"+
            "\3\uffff\2\24\2\uffff\1\24\1\uffff\1\24\3\uffff\1\24\1\uffff"+
            "\1\24\1\uffff\2\24\4\uffff\3\24\2\uffff\1\24\1\uffff\3\24\2"+
            "\uffff\1\24\5\uffff\2\24\7\uffff\2\24\5\uffff\1\24\4\uffff\2"+
            "\24\1\uffff\1\24\4\uffff\1\24\3\uffff\1\24\4\uffff\2\24\7\uffff"+
            "\1\24\10\uffff\1\24\6\uffff\2\24\4\uffff\1\24\1\uffff\1\24\7"+
            "\uffff\1\24\2\uffff\1\24\111\uffff\2\24\1\26\1\uffff\4\24\1"+
            "\uffff\1\24\1\uffff\1\24\1\uffff\13\24\2\uffff\1\24\3\uffff"+
            "\2\24",
            "\3\24\5\uffff\3\24\1\uffff\1\24\4\uffff\1\24\2\uffff\2\24"+
            "\3\uffff\2\24\2\uffff\1\24\1\uffff\1\24\3\uffff\1\24\1\uffff"+
            "\1\24\1\uffff\2\24\4\uffff\3\24\2\uffff\1\24\1\uffff\3\24\2"+
            "\uffff\1\24\5\uffff\2\24\7\uffff\2\24\5\uffff\1\24\4\uffff\2"+
            "\24\1\uffff\1\24\4\uffff\1\24\3\uffff\1\24\4\uffff\2\24\7\uffff"+
            "\1\24\10\uffff\1\24\6\uffff\2\24\4\uffff\1\24\1\uffff\1\24\7"+
            "\uffff\1\24\2\uffff\1\24\111\uffff\2\24\1\26\1\uffff\4\24\1"+
            "\uffff\1\24\1\uffff\1\24\1\uffff\13\24\2\uffff\1\24\3\uffff"+
            "\2\24",
            "\3\24\5\uffff\3\24\1\uffff\1\24\4\uffff\1\24\2\uffff\2\24"+
            "\3\uffff\2\24\2\uffff\1\24\1\uffff\1\24\3\uffff\1\24\1\uffff"+
            "\1\24\1\uffff\2\24\4\uffff\3\24\2\uffff\1\24\1\uffff\3\24\2"+
            "\uffff\1\24\5\uffff\2\24\7\uffff\2\24\5\uffff\1\24\4\uffff\2"+
            "\24\1\uffff\1\24\4\uffff\1\24\3\uffff\1\24\4\uffff\2\24\7\uffff"+
            "\1\24\10\uffff\1\24\6\uffff\2\24\4\uffff\1\24\1\uffff\1\24\7"+
            "\uffff\1\24\2\uffff\1\24\111\uffff\1\27\1\24\2\uffff\4\24\1"+
            "\uffff\1\24\1\uffff\1\24\1\uffff\13\24\2\uffff\1\24\3\uffff"+
            "\2\24",
            "\3\24\5\uffff\3\24\1\uffff\1\24\4\uffff\1\24\2\uffff\2\24"+
            "\3\uffff\2\24\2\uffff\1\24\1\uffff\1\24\3\uffff\1\24\1\uffff"+
            "\1\24\1\uffff\2\24\4\uffff\3\24\2\uffff\1\24\1\uffff\3\24\2"+
            "\uffff\1\24\5\uffff\2\24\7\uffff\2\24\5\uffff\1\24\4\uffff\2"+
            "\24\1\uffff\1\24\4\uffff\1\24\3\uffff\1\24\4\uffff\2\24\7\uffff"+
            "\1\24\10\uffff\1\24\6\uffff\2\24\4\uffff\1\24\1\uffff\1\24\7"+
            "\uffff\1\24\2\uffff\1\24\111\uffff\1\30\1\24\2\uffff\4\24\1"+
            "\uffff\1\24\1\uffff\1\24\1\uffff\13\24\2\uffff\1\24\3\uffff"+
            "\2\24",
            "\3\24\5\uffff\3\24\1\uffff\1\24\4\uffff\1\24\2\uffff\2\24"+
            "\3\uffff\2\24\2\uffff\1\24\1\uffff\1\24\3\uffff\1\24\1\uffff"+
            "\1\24\1\uffff\2\24\4\uffff\3\24\2\uffff\1\24\1\uffff\3\24\2"+
            "\uffff\1\24\5\uffff\2\24\7\uffff\2\24\5\uffff\1\24\4\uffff\2"+
            "\24\1\uffff\1\24\4\uffff\1\24\3\uffff\1\24\4\uffff\2\24\7\uffff"+
            "\1\24\10\uffff\1\24\6\uffff\2\24\4\uffff\1\24\1\uffff\1\24\7"+
            "\uffff\1\24\2\uffff\1\24\111\uffff\1\31\1\24\2\uffff\4\24\1"+
            "\uffff\1\24\1\uffff\1\24\1\uffff\13\24\2\uffff\1\24\3\uffff"+
            "\2\24",
            "\3\24\5\uffff\3\24\1\uffff\1\24\4\uffff\1\24\2\uffff\2\24"+
            "\3\uffff\2\24\2\uffff\1\24\1\uffff\1\24\3\uffff\1\24\1\uffff"+
            "\1\24\1\uffff\2\24\4\uffff\3\24\2\uffff\1\24\1\uffff\3\24\2"+
            "\uffff\1\24\5\uffff\2\24\7\uffff\2\24\5\uffff\1\24\4\uffff\2"+
            "\24\1\uffff\1\24\4\uffff\1\24\3\uffff\1\24\4\uffff\2\24\7\uffff"+
            "\1\24\10\uffff\1\24\6\uffff\2\24\4\uffff\1\24\1\uffff\1\24\7"+
            "\uffff\1\24\2\uffff\1\24\111\uffff\2\24\1\uffff\1\32\4\24\1"+
            "\uffff\1\24\1\uffff\1\24\1\uffff\13\24\2\uffff\1\24\3\uffff"+
            "\2\24",
            "\3\24\5\uffff\3\24\1\uffff\1\24\4\uffff\1\24\2\uffff\2\24"+
            "\3\uffff\2\24\2\uffff\1\24\1\uffff\1\24\3\uffff\1\24\1\uffff"+
            "\1\24\1\uffff\2\24\4\uffff\3\24\2\uffff\1\24\1\uffff\3\24\2"+
            "\uffff\1\24\5\uffff\2\24\7\uffff\2\24\5\uffff\1\24\4\uffff\2"+
            "\24\1\uffff\1\24\4\uffff\1\24\3\uffff\1\24\4\uffff\2\24\7\uffff"+
            "\1\24\10\uffff\1\24\6\uffff\2\24\4\uffff\1\24\1\uffff\1\24\7"+
            "\uffff\1\24\2\uffff\1\24\111\uffff\2\24\1\33\1\uffff\4\24\1"+
            "\uffff\1\24\1\uffff\1\24\1\uffff\13\24\2\uffff\1\24\3\uffff"+
            "\2\24",
            "\3\24\5\uffff\3\24\1\uffff\1\24\4\uffff\1\24\2\uffff\2\24"+
            "\3\uffff\2\24\2\uffff\1\24\1\uffff\1\24\3\uffff\1\24\1\uffff"+
            "\1\24\1\uffff\2\24\4\uffff\3\24\2\uffff\1\24\1\uffff\3\24\2"+
            "\uffff\1\24\5\uffff\2\24\7\uffff\2\24\5\uffff\1\24\4\uffff\2"+
            "\24\1\uffff\1\24\4\uffff\1\24\3\uffff\1\24\4\uffff\2\24\7\uffff"+
            "\1\24\10\uffff\1\24\6\uffff\2\24\4\uffff\1\24\1\uffff\1\24\7"+
            "\uffff\1\24\2\uffff\1\24\111\uffff\2\24\1\uffff\1\33\4\24\1"+
            "\uffff\1\24\1\uffff\1\24\1\uffff\13\24\2\uffff\1\24\3\uffff"+
            "\2\24",
            "\3\24\5\uffff\3\24\1\uffff\1\24\4\uffff\1\24\2\uffff\2\24"+
            "\3\uffff\2\24\2\uffff\1\24\1\uffff\1\24\3\uffff\1\24\1\uffff"+
            "\1\24\1\uffff\2\24\4\uffff\3\24\2\uffff\1\24\1\uffff\3\24\2"+
            "\uffff\1\24\2\uffff\1\34\2\uffff\2\24\7\uffff\2\24\5\uffff\1"+
            "\24\4\uffff\2\24\1\uffff\1\24\4\uffff\1\24\3\uffff\1\24\4\uffff"+
            "\2\24\7\uffff\1\24\10\uffff\1\24\6\uffff\2\24\4\uffff\1\24\1"+
            "\uffff\1\24\1\34\6\uffff\1\24\2\uffff\1\24\111\uffff\2\24\2"+
            "\uffff\4\24\1\uffff\1\24\1\uffff\1\24\1\uffff\13\24\2\uffff"+
            "\1\24\3\uffff\2\24",
            "\3\24\5\uffff\3\24\1\uffff\1\24\4\uffff\1\24\2\uffff\2\24"+
            "\3\uffff\2\24\2\uffff\1\24\1\uffff\1\24\3\uffff\1\24\1\uffff"+
            "\1\24\1\uffff\2\24\4\uffff\3\24\2\uffff\1\24\1\uffff\3\24\2"+
            "\uffff\1\24\2\uffff\1\35\2\uffff\2\24\7\uffff\2\24\5\uffff\1"+
            "\24\4\uffff\2\24\1\uffff\1\24\4\uffff\1\24\3\uffff\1\24\4\uffff"+
            "\2\24\7\uffff\1\24\10\uffff\1\24\6\uffff\2\24\4\uffff\1\24\1"+
            "\uffff\1\24\1\35\6\uffff\1\24\2\uffff\1\24\111\uffff\2\24\2"+
            "\uffff\4\24\1\uffff\1\24\1\uffff\1\24\1\uffff\13\24\2\uffff"+
            "\1\24\3\uffff\2\24",
            "\3\24\5\uffff\3\24\1\uffff\1\24\4\uffff\1\24\2\uffff\2\24"+
            "\3\uffff\2\24\2\uffff\1\24\1\uffff\1\24\3\uffff\1\24\1\uffff"+
            "\1\24\1\uffff\2\24\4\uffff\3\24\2\uffff\1\24\1\uffff\3\24\2"+
            "\uffff\1\24\2\uffff\1\36\2\uffff\2\24\7\uffff\2\24\5\uffff\1"+
            "\24\4\uffff\2\24\1\uffff\1\24\4\uffff\1\24\3\uffff\1\24\4\uffff"+
            "\2\24\7\uffff\1\24\10\uffff\1\24\6\uffff\2\24\4\uffff\1\24\1"+
            "\uffff\1\24\7\uffff\1\24\2\uffff\1\24\111\uffff\2\24\2\uffff"+
            "\4\24\1\uffff\1\24\1\uffff\1\24\1\uffff\13\24\2\uffff\1\24\3"+
            "\uffff\2\24",
            "\3\24\5\uffff\3\24\1\uffff\1\24\4\uffff\1\24\2\uffff\2\24"+
            "\3\uffff\2\24\2\uffff\1\24\1\uffff\1\24\3\uffff\1\24\1\uffff"+
            "\1\24\1\uffff\2\24\4\uffff\3\24\2\uffff\1\24\1\uffff\3\24\2"+
            "\uffff\1\24\2\uffff\1\37\2\uffff\2\24\7\uffff\2\24\5\uffff\1"+
            "\24\4\uffff\2\24\1\uffff\1\24\4\uffff\1\24\3\uffff\1\24\4\uffff"+
            "\2\24\7\uffff\1\24\10\uffff\1\24\6\uffff\2\24\4\uffff\1\24\1"+
            "\uffff\1\24\6\uffff\1\37\1\24\2\uffff\1\24\111\uffff\2\24\2"+
            "\uffff\4\24\1\uffff\1\24\1\uffff\1\24\1\uffff\13\24\2\uffff"+
            "\1\24\3\uffff\2\24",
            "\3\24\5\uffff\3\24\1\uffff\1\24\4\uffff\1\24\2\uffff\2\24"+
            "\3\uffff\2\24\2\uffff\1\24\1\uffff\1\24\3\uffff\1\24\1\uffff"+
            "\1\24\1\uffff\2\24\4\uffff\3\24\2\uffff\1\24\1\uffff\3\24\2"+
            "\uffff\1\24\5\uffff\2\24\7\uffff\2\24\5\uffff\1\24\4\uffff\2"+
            "\24\1\uffff\1\24\4\uffff\1\24\3\uffff\1\24\4\uffff\2\24\7\uffff"+
            "\1\24\10\uffff\1\24\6\uffff\2\24\4\uffff\1\24\1\uffff\1\24\7"+
            "\uffff\1\24\2\uffff\1\24\111\uffff\2\24\1\40\1\uffff\4\24\1"+
            "\uffff\1\24\1\uffff\1\24\1\uffff\13\24\2\uffff\1\24\3\uffff"+
            "\2\24",
            "\3\24\5\uffff\3\24\1\uffff\1\24\4\uffff\1\24\2\uffff\2\24"+
            "\3\uffff\2\24\2\uffff\1\24\1\uffff\1\24\3\uffff\1\24\1\uffff"+
            "\1\24\1\uffff\2\24\4\uffff\3\24\2\uffff\1\24\1\uffff\3\24\2"+
            "\uffff\1\24\5\uffff\2\24\7\uffff\2\24\5\uffff\1\24\4\uffff\2"+
            "\24\1\uffff\1\24\4\uffff\1\24\3\uffff\1\24\4\uffff\2\24\7\uffff"+
            "\1\24\10\uffff\1\24\6\uffff\2\24\4\uffff\1\24\1\uffff\1\24\7"+
            "\uffff\1\24\2\uffff\1\24\111\uffff\2\24\1\uffff\1\41\4\24\1"+
            "\uffff\1\24\1\uffff\1\24\1\uffff\13\24\2\uffff\1\24\3\uffff"+
            "\2\24",
            "\3\24\5\uffff\3\24\1\uffff\1\24\4\uffff\1\24\2\uffff\2\24"+
            "\3\uffff\2\24\2\uffff\1\24\1\uffff\1\24\3\uffff\1\24\1\uffff"+
            "\1\24\1\uffff\2\24\4\uffff\3\24\2\uffff\1\24\1\uffff\3\24\2"+
            "\uffff\1\24\5\uffff\2\24\7\uffff\2\24\5\uffff\1\24\4\uffff\2"+
            "\24\1\uffff\1\24\4\uffff\1\24\3\uffff\1\24\4\uffff\2\24\7\uffff"+
            "\1\24\10\uffff\1\24\6\uffff\2\24\4\uffff\1\24\1\uffff\1\24\7"+
            "\uffff\1\24\2\uffff\1\24\111\uffff\2\24\1\42\1\uffff\4\24\1"+
            "\uffff\1\24\1\uffff\1\24\1\uffff\13\24\2\uffff\1\24\3\uffff"+
            "\2\24",
            "\3\24\5\uffff\3\24\1\uffff\1\24\4\uffff\1\24\2\uffff\2\24"+
            "\3\uffff\2\24\2\uffff\1\24\1\uffff\1\24\3\uffff\1\24\1\uffff"+
            "\1\24\1\uffff\2\24\4\uffff\3\24\2\uffff\1\24\1\uffff\3\24\2"+
            "\uffff\1\24\5\uffff\2\24\7\uffff\2\24\5\uffff\1\24\4\uffff\2"+
            "\24\1\uffff\1\24\4\uffff\1\24\3\uffff\1\24\4\uffff\2\24\7\uffff"+
            "\1\24\10\uffff\1\24\6\uffff\2\24\4\uffff\1\24\1\uffff\1\24\7"+
            "\uffff\1\24\2\uffff\1\24\52\uffff\1\43\36\uffff\2\24\2\uffff"+
            "\4\24\1\uffff\1\24\1\uffff\1\24\1\uffff\13\24\2\uffff\1\24\3"+
            "\uffff\2\24",
            "\3\24\5\uffff\3\24\1\uffff\1\24\4\uffff\1\24\2\uffff\2\24"+
            "\3\uffff\2\24\2\uffff\1\24\1\uffff\1\24\3\uffff\1\24\1\uffff"+
            "\1\24\1\uffff\2\24\4\uffff\3\24\2\uffff\1\24\1\uffff\3\24\2"+
            "\uffff\1\24\5\uffff\2\24\7\uffff\2\24\5\uffff\1\24\4\uffff\2"+
            "\24\1\uffff\1\24\4\uffff\1\24\3\uffff\1\24\4\uffff\2\24\7\uffff"+
            "\1\24\10\uffff\1\24\6\uffff\2\24\4\uffff\1\24\1\uffff\1\24\7"+
            "\uffff\1\24\2\uffff\1\24\111\uffff\1\44\1\24\2\uffff\4\24\1"+
            "\uffff\1\24\1\uffff\1\24\1\uffff\13\24\2\uffff\1\24\3\uffff"+
            "\2\24",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };

    static final short[] DFA52_eot = DFA.unpackEncodedString(DFA52_eotS);
    static final short[] DFA52_eof = DFA.unpackEncodedString(DFA52_eofS);
    static final char[] DFA52_min = DFA.unpackEncodedStringToUnsignedChars(DFA52_minS);
    static final char[] DFA52_max = DFA.unpackEncodedStringToUnsignedChars(DFA52_maxS);
    static final short[] DFA52_accept = DFA.unpackEncodedString(DFA52_acceptS);
    static final short[] DFA52_special = DFA.unpackEncodedString(DFA52_specialS);
    static final short[][] DFA52_transition;

    static {
        int numStates = DFA52_transitionS.length;
        DFA52_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA52_transition[i] = DFA.unpackEncodedString(DFA52_transitionS[i]);
        }
    }

    class DFA52 extends DFA {

        public DFA52(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 52;
            this.eot = DFA52_eot;
            this.eof = DFA52_eof;
            this.min = DFA52_min;
            this.max = DFA52_max;
            this.accept = DFA52_accept;
            this.special = DFA52_special;
            this.transition = DFA52_transition;
        }
        public String getDescription() {
            return "418:1: p_ExprSingle : ( p_FLWORExpr | p_QuantifiedExpr | p_SwitchExpr | p_TypeswitchExpr | p_IfExpr | p_TryCatchExpr | {...}? => p_EvalExpr | {...}? => p_InsertExpr | {...}? => p_DeleteExpr | {...}? => p_RenameExpr | {...}? => p_ReplaceExpr | {...}? => p_TransformExpr | {...}? => p_BlockExpr | {...}? => p_AssignmentExpr | {...}? => p_ExitExpr | {...}? => p_WhileExpr | p_OrExpr );";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA52_11 = input.LA(1);

                         
                        int index52_11 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA52_11==EOF||(LA52_11>=AND && LA52_11<=ASCENDING)||(LA52_11>=CASE && LA52_11<=CASTABLE)||LA52_11==COLLATION||LA52_11==DEFAULT||(LA52_11>=DESCENDING && LA52_11<=DIV)||(LA52_11>=ELSE && LA52_11<=EMPTY)||LA52_11==EQ||LA52_11==EXCEPT||LA52_11==FOR||LA52_11==GE||(LA52_11>=GT && LA52_11<=IDIV)||(LA52_11>=INSTANCE && LA52_11<=IS)||LA52_11==LE||(LA52_11>=LET && LA52_11<=MOD)||LA52_11==NE||(LA52_11>=OR && LA52_11<=ORDER)||(LA52_11>=RETURN && LA52_11<=SATISFIES)||LA52_11==STABLE||(LA52_11>=TO && LA52_11<=TREAT)||LA52_11==UNION||LA52_11==WHERE||LA52_11==COUNT||(LA52_11>=END && LA52_11<=GROUP)||LA52_11==ONLY||LA52_11==START||(LA52_11>=AFTER && LA52_11<=BEFORE)||LA52_11==INTO||LA52_11==MODIFY||LA52_11==WITH||LA52_11==CONTAINS||(LA52_11>=LPAREN && LA52_11<=RPAREN)||(LA52_11>=RBRACKET && LA52_11<=EQUAL)||LA52_11==NOTEQUAL||LA52_11==COMMA||(LA52_11>=STAR && LA52_11<=SLASH_SLASH)||LA52_11==COLON||(LA52_11>=SEMICOLON && LA52_11<=VBAR)) ) {s = 20;}

                        else if ( (LA52_11==NODE||LA52_11==NODES) && ((lc(XQU)))) {s = 28;}

                         
                        input.seek(index52_11);
                        if ( s>=0 ) return s;
                        break;
                    case 1 : 
                        int LA52_10 = input.LA(1);

                         
                        int index52_10 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA52_10==EOF||(LA52_10>=AND && LA52_10<=ASCENDING)||(LA52_10>=CASE && LA52_10<=CASTABLE)||LA52_10==COLLATION||LA52_10==DEFAULT||(LA52_10>=DESCENDING && LA52_10<=DIV)||(LA52_10>=ELSE && LA52_10<=EMPTY)||LA52_10==EQ||LA52_10==EXCEPT||LA52_10==FOR||LA52_10==GE||(LA52_10>=GT && LA52_10<=IDIV)||(LA52_10>=INSTANCE && LA52_10<=IS)||LA52_10==LE||(LA52_10>=LET && LA52_10<=MOD)||LA52_10==NE||(LA52_10>=OR && LA52_10<=ORDER)||(LA52_10>=RETURN && LA52_10<=SATISFIES)||LA52_10==STABLE||(LA52_10>=TO && LA52_10<=TREAT)||LA52_10==UNION||LA52_10==WHERE||LA52_10==COUNT||(LA52_10>=END && LA52_10<=GROUP)||LA52_10==ONLY||LA52_10==START||(LA52_10>=AFTER && LA52_10<=BEFORE)||LA52_10==INTO||LA52_10==MODIFY||LA52_10==WITH||LA52_10==CONTAINS||(LA52_10>=LPAREN && LA52_10<=RPAREN)||(LA52_10>=RBRACKET && LA52_10<=EQUAL)||LA52_10==NOTEQUAL||LA52_10==COMMA||(LA52_10>=STAR && LA52_10<=SLASH_SLASH)||LA52_10==COLON||(LA52_10>=SEMICOLON && LA52_10<=VBAR)) ) {s = 20;}

                        else if ( (LA52_10==LBRACKET) && ((lc(ZORBA)))) {s = 27;}

                         
                        input.seek(index52_10);
                        if ( s>=0 ) return s;
                        break;
                    case 2 : 
                        int LA52_9 = input.LA(1);

                         
                        int index52_9 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA52_9==EOF||(LA52_9>=AND && LA52_9<=ASCENDING)||(LA52_9>=CASE && LA52_9<=CASTABLE)||LA52_9==COLLATION||LA52_9==DEFAULT||(LA52_9>=DESCENDING && LA52_9<=DIV)||(LA52_9>=ELSE && LA52_9<=EMPTY)||LA52_9==EQ||LA52_9==EXCEPT||LA52_9==FOR||LA52_9==GE||(LA52_9>=GT && LA52_9<=IDIV)||(LA52_9>=INSTANCE && LA52_9<=IS)||LA52_9==LE||(LA52_9>=LET && LA52_9<=MOD)||LA52_9==NE||(LA52_9>=OR && LA52_9<=ORDER)||(LA52_9>=RETURN && LA52_9<=SATISFIES)||LA52_9==STABLE||(LA52_9>=TO && LA52_9<=TREAT)||LA52_9==UNION||LA52_9==WHERE||LA52_9==COUNT||(LA52_9>=END && LA52_9<=GROUP)||LA52_9==ONLY||LA52_9==START||(LA52_9>=AFTER && LA52_9<=BEFORE)||LA52_9==INTO||LA52_9==MODIFY||LA52_9==WITH||LA52_9==CONTAINS||(LA52_9>=LPAREN && LA52_9<=RPAREN)||(LA52_9>=RBRACKET && LA52_9<=EQUAL)||LA52_9==NOTEQUAL||LA52_9==COMMA||(LA52_9>=STAR && LA52_9<=SLASH_SLASH)||LA52_9==COLON||(LA52_9>=SEMICOLON && LA52_9<=VBAR)) ) {s = 20;}

                        else if ( (LA52_9==DOLLAR) && ((lc(ZORBA)))) {s = 27;}

                         
                        input.seek(index52_9);
                        if ( s>=0 ) return s;
                        break;
                    case 3 : 
                        int LA52_14 = input.LA(1);

                         
                        int index52_14 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA52_14==EOF||(LA52_14>=AND && LA52_14<=ASCENDING)||(LA52_14>=CASE && LA52_14<=CASTABLE)||LA52_14==COLLATION||LA52_14==DEFAULT||(LA52_14>=DESCENDING && LA52_14<=DIV)||(LA52_14>=ELSE && LA52_14<=EMPTY)||LA52_14==EQ||LA52_14==EXCEPT||LA52_14==FOR||LA52_14==GE||(LA52_14>=GT && LA52_14<=IDIV)||(LA52_14>=INSTANCE && LA52_14<=IS)||LA52_14==LE||(LA52_14>=LET && LA52_14<=MOD)||LA52_14==NE||(LA52_14>=OR && LA52_14<=ORDER)||(LA52_14>=RETURN && LA52_14<=SATISFIES)||LA52_14==STABLE||(LA52_14>=TO && LA52_14<=TREAT)||LA52_14==UNION||LA52_14==WHERE||LA52_14==COUNT||(LA52_14>=END && LA52_14<=GROUP)||LA52_14==ONLY||LA52_14==START||(LA52_14>=AFTER && LA52_14<=BEFORE)||LA52_14==INTO||LA52_14==MODIFY||LA52_14==WITH||LA52_14==CONTAINS||(LA52_14>=LPAREN && LA52_14<=RPAREN)||(LA52_14>=RBRACKET && LA52_14<=EQUAL)||LA52_14==NOTEQUAL||LA52_14==COMMA||(LA52_14>=STAR && LA52_14<=SLASH_SLASH)||LA52_14==COLON||(LA52_14>=SEMICOLON && LA52_14<=VBAR)) ) {s = 20;}

                        else if ( (LA52_14==NODE||LA52_14==VALUE) && ((lc(XQU)))) {s = 31;}

                         
                        input.seek(index52_14);
                        if ( s>=0 ) return s;
                        break;
                    case 4 : 
                        int LA52_13 = input.LA(1);

                         
                        int index52_13 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA52_13==NODE) && ((lc(XQU)))) {s = 30;}

                        else if ( (LA52_13==EOF||(LA52_13>=AND && LA52_13<=ASCENDING)||(LA52_13>=CASE && LA52_13<=CASTABLE)||LA52_13==COLLATION||LA52_13==DEFAULT||(LA52_13>=DESCENDING && LA52_13<=DIV)||(LA52_13>=ELSE && LA52_13<=EMPTY)||LA52_13==EQ||LA52_13==EXCEPT||LA52_13==FOR||LA52_13==GE||(LA52_13>=GT && LA52_13<=IDIV)||(LA52_13>=INSTANCE && LA52_13<=IS)||LA52_13==LE||(LA52_13>=LET && LA52_13<=MOD)||LA52_13==NE||(LA52_13>=OR && LA52_13<=ORDER)||(LA52_13>=RETURN && LA52_13<=SATISFIES)||LA52_13==STABLE||(LA52_13>=TO && LA52_13<=TREAT)||LA52_13==UNION||LA52_13==WHERE||LA52_13==COUNT||(LA52_13>=END && LA52_13<=GROUP)||LA52_13==ONLY||LA52_13==START||(LA52_13>=AFTER && LA52_13<=BEFORE)||LA52_13==INTO||LA52_13==MODIFY||LA52_13==WITH||LA52_13==CONTAINS||(LA52_13>=LPAREN && LA52_13<=RPAREN)||(LA52_13>=RBRACKET && LA52_13<=EQUAL)||LA52_13==NOTEQUAL||LA52_13==COMMA||(LA52_13>=STAR && LA52_13<=SLASH_SLASH)||LA52_13==COLON||(LA52_13>=SEMICOLON && LA52_13<=VBAR)) ) {s = 20;}

                         
                        input.seek(index52_13);
                        if ( s>=0 ) return s;
                        break;
                    case 5 : 
                        int LA52_17 = input.LA(1);

                         
                        int index52_17 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA52_17==EOF||(LA52_17>=AND && LA52_17<=ASCENDING)||(LA52_17>=CASE && LA52_17<=CASTABLE)||LA52_17==COLLATION||LA52_17==DEFAULT||(LA52_17>=DESCENDING && LA52_17<=DIV)||(LA52_17>=ELSE && LA52_17<=EMPTY)||LA52_17==EQ||LA52_17==EXCEPT||LA52_17==FOR||LA52_17==GE||(LA52_17>=GT && LA52_17<=IDIV)||(LA52_17>=INSTANCE && LA52_17<=IS)||LA52_17==LE||(LA52_17>=LET && LA52_17<=MOD)||LA52_17==NE||(LA52_17>=OR && LA52_17<=ORDER)||(LA52_17>=RETURN && LA52_17<=SATISFIES)||LA52_17==STABLE||(LA52_17>=TO && LA52_17<=TREAT)||LA52_17==UNION||LA52_17==WHERE||LA52_17==COUNT||(LA52_17>=END && LA52_17<=GROUP)||LA52_17==ONLY||LA52_17==START||(LA52_17>=AFTER && LA52_17<=BEFORE)||LA52_17==INTO||LA52_17==MODIFY||LA52_17==WITH||LA52_17==CONTAINS||(LA52_17>=LPAREN && LA52_17<=RPAREN)||(LA52_17>=RBRACKET && LA52_17<=EQUAL)||LA52_17==NOTEQUAL||LA52_17==COMMA||(LA52_17>=STAR && LA52_17<=SLASH_SLASH)||LA52_17==COLON||(LA52_17>=SEMICOLON && LA52_17<=VBAR)) ) {s = 20;}

                        else if ( (LA52_17==DOLLAR) && ((lc(XQS)))) {s = 34;}

                         
                        input.seek(index52_17);
                        if ( s>=0 ) return s;
                        break;
                    case 6 : 
                        int LA52_18 = input.LA(1);

                         
                        int index52_18 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA52_18==EOF||(LA52_18>=AND && LA52_18<=ASCENDING)||(LA52_18>=CASE && LA52_18<=CASTABLE)||LA52_18==COLLATION||LA52_18==DEFAULT||(LA52_18>=DESCENDING && LA52_18<=DIV)||(LA52_18>=ELSE && LA52_18<=EMPTY)||LA52_18==EQ||LA52_18==EXCEPT||LA52_18==FOR||LA52_18==GE||(LA52_18>=GT && LA52_18<=IDIV)||(LA52_18>=INSTANCE && LA52_18<=IS)||LA52_18==LE||(LA52_18>=LET && LA52_18<=MOD)||LA52_18==NE||(LA52_18>=OR && LA52_18<=ORDER)||(LA52_18>=RETURN && LA52_18<=SATISFIES)||LA52_18==STABLE||(LA52_18>=TO && LA52_18<=TREAT)||LA52_18==UNION||LA52_18==WHERE||LA52_18==COUNT||(LA52_18>=END && LA52_18<=GROUP)||LA52_18==ONLY||LA52_18==START||(LA52_18>=AFTER && LA52_18<=BEFORE)||LA52_18==INTO||LA52_18==MODIFY||LA52_18==WITH||LA52_18==CONTAINS||(LA52_18>=LPAREN && LA52_18<=RPAREN)||(LA52_18>=RBRACKET && LA52_18<=EQUAL)||LA52_18==NOTEQUAL||LA52_18==COMMA||(LA52_18>=STAR && LA52_18<=SLASH_SLASH)||LA52_18==COLON||(LA52_18>=SEMICOLON && LA52_18<=VBAR)) ) {s = 20;}

                        else if ( (LA52_18==RETURNING) && ((lc(XQS)))) {s = 35;}

                         
                        input.seek(index52_18);
                        if ( s>=0 ) return s;
                        break;
                    case 7 : 
                        int LA52_16 = input.LA(1);

                         
                        int index52_16 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA52_16==EOF||(LA52_16>=AND && LA52_16<=ASCENDING)||(LA52_16>=CASE && LA52_16<=CASTABLE)||LA52_16==COLLATION||LA52_16==DEFAULT||(LA52_16>=DESCENDING && LA52_16<=DIV)||(LA52_16>=ELSE && LA52_16<=EMPTY)||LA52_16==EQ||LA52_16==EXCEPT||LA52_16==FOR||LA52_16==GE||(LA52_16>=GT && LA52_16<=IDIV)||(LA52_16>=INSTANCE && LA52_16<=IS)||LA52_16==LE||(LA52_16>=LET && LA52_16<=MOD)||LA52_16==NE||(LA52_16>=OR && LA52_16<=ORDER)||(LA52_16>=RETURN && LA52_16<=SATISFIES)||LA52_16==STABLE||(LA52_16>=TO && LA52_16<=TREAT)||LA52_16==UNION||LA52_16==WHERE||LA52_16==COUNT||(LA52_16>=END && LA52_16<=GROUP)||LA52_16==ONLY||LA52_16==START||(LA52_16>=AFTER && LA52_16<=BEFORE)||LA52_16==INTO||LA52_16==MODIFY||LA52_16==WITH||LA52_16==CONTAINS||(LA52_16>=LPAREN && LA52_16<=RPAREN)||(LA52_16>=RBRACKET && LA52_16<=EQUAL)||LA52_16==NOTEQUAL||LA52_16==COMMA||(LA52_16>=STAR && LA52_16<=SLASH_SLASH)||LA52_16==COLON||(LA52_16>=SEMICOLON && LA52_16<=VBAR)) ) {s = 20;}

                        else if ( (LA52_16==LBRACKET) && ((lc(XQS)))) {s = 33;}

                         
                        input.seek(index52_16);
                        if ( s>=0 ) return s;
                        break;
                    case 8 : 
                        int LA52_15 = input.LA(1);

                         
                        int index52_15 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA52_15==DOLLAR) && ((lc(XQU)))) {s = 32;}

                        else if ( (LA52_15==EOF||(LA52_15>=AND && LA52_15<=ASCENDING)||(LA52_15>=CASE && LA52_15<=CASTABLE)||LA52_15==COLLATION||LA52_15==DEFAULT||(LA52_15>=DESCENDING && LA52_15<=DIV)||(LA52_15>=ELSE && LA52_15<=EMPTY)||LA52_15==EQ||LA52_15==EXCEPT||LA52_15==FOR||LA52_15==GE||(LA52_15>=GT && LA52_15<=IDIV)||(LA52_15>=INSTANCE && LA52_15<=IS)||LA52_15==LE||(LA52_15>=LET && LA52_15<=MOD)||LA52_15==NE||(LA52_15>=OR && LA52_15<=ORDER)||(LA52_15>=RETURN && LA52_15<=SATISFIES)||LA52_15==STABLE||(LA52_15>=TO && LA52_15<=TREAT)||LA52_15==UNION||LA52_15==WHERE||LA52_15==COUNT||(LA52_15>=END && LA52_15<=GROUP)||LA52_15==ONLY||LA52_15==START||(LA52_15>=AFTER && LA52_15<=BEFORE)||LA52_15==INTO||LA52_15==MODIFY||LA52_15==WITH||LA52_15==CONTAINS||(LA52_15>=LPAREN && LA52_15<=RPAREN)||(LA52_15>=RBRACKET && LA52_15<=EQUAL)||LA52_15==NOTEQUAL||LA52_15==COMMA||(LA52_15>=STAR && LA52_15<=SLASH_SLASH)||LA52_15==COLON||(LA52_15>=SEMICOLON && LA52_15<=VBAR)) ) {s = 20;}

                         
                        input.seek(index52_15);
                        if ( s>=0 ) return s;
                        break;
                    case 9 : 
                        int LA52_19 = input.LA(1);

                         
                        int index52_19 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA52_19==EOF||(LA52_19>=AND && LA52_19<=ASCENDING)||(LA52_19>=CASE && LA52_19<=CASTABLE)||LA52_19==COLLATION||LA52_19==DEFAULT||(LA52_19>=DESCENDING && LA52_19<=DIV)||(LA52_19>=ELSE && LA52_19<=EMPTY)||LA52_19==EQ||LA52_19==EXCEPT||LA52_19==FOR||LA52_19==GE||(LA52_19>=GT && LA52_19<=IDIV)||(LA52_19>=INSTANCE && LA52_19<=IS)||LA52_19==LE||(LA52_19>=LET && LA52_19<=MOD)||LA52_19==NE||(LA52_19>=OR && LA52_19<=ORDER)||(LA52_19>=RETURN && LA52_19<=SATISFIES)||LA52_19==STABLE||(LA52_19>=TO && LA52_19<=TREAT)||LA52_19==UNION||LA52_19==WHERE||LA52_19==COUNT||(LA52_19>=END && LA52_19<=GROUP)||LA52_19==ONLY||LA52_19==START||(LA52_19>=AFTER && LA52_19<=BEFORE)||LA52_19==INTO||LA52_19==MODIFY||LA52_19==WITH||LA52_19==CONTAINS||LA52_19==RPAREN||(LA52_19>=RBRACKET && LA52_19<=EQUAL)||LA52_19==NOTEQUAL||LA52_19==COMMA||(LA52_19>=STAR && LA52_19<=SLASH_SLASH)||LA52_19==COLON||(LA52_19>=SEMICOLON && LA52_19<=VBAR)) ) {s = 20;}

                        else if ( (LA52_19==LPAREN) && ((lc(XQS)))) {s = 36;}

                         
                        input.seek(index52_19);
                        if ( s>=0 ) return s;
                        break;
                    case 10 : 
                        int LA52_12 = input.LA(1);

                         
                        int index52_12 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA52_12==EOF||(LA52_12>=AND && LA52_12<=ASCENDING)||(LA52_12>=CASE && LA52_12<=CASTABLE)||LA52_12==COLLATION||LA52_12==DEFAULT||(LA52_12>=DESCENDING && LA52_12<=DIV)||(LA52_12>=ELSE && LA52_12<=EMPTY)||LA52_12==EQ||LA52_12==EXCEPT||LA52_12==FOR||LA52_12==GE||(LA52_12>=GT && LA52_12<=IDIV)||(LA52_12>=INSTANCE && LA52_12<=IS)||LA52_12==LE||(LA52_12>=LET && LA52_12<=MOD)||LA52_12==NE||(LA52_12>=OR && LA52_12<=ORDER)||(LA52_12>=RETURN && LA52_12<=SATISFIES)||LA52_12==STABLE||(LA52_12>=TO && LA52_12<=TREAT)||LA52_12==UNION||LA52_12==WHERE||LA52_12==COUNT||(LA52_12>=END && LA52_12<=GROUP)||LA52_12==ONLY||LA52_12==START||(LA52_12>=AFTER && LA52_12<=BEFORE)||LA52_12==INTO||LA52_12==MODIFY||LA52_12==WITH||LA52_12==CONTAINS||(LA52_12>=LPAREN && LA52_12<=RPAREN)||(LA52_12>=RBRACKET && LA52_12<=EQUAL)||LA52_12==NOTEQUAL||LA52_12==COMMA||(LA52_12>=STAR && LA52_12<=SLASH_SLASH)||LA52_12==COLON||(LA52_12>=SEMICOLON && LA52_12<=VBAR)) ) {s = 20;}

                        else if ( (LA52_12==NODE||LA52_12==NODES) && ((lc(XQU)))) {s = 29;}

                         
                        input.seek(index52_12);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 52, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static final String DFA113_eotS =
        "\56\uffff";
    static final String DFA113_eofS =
        "\56\uffff";
    static final String DFA113_minS =
        "\1\20\1\0\54\uffff";
    static final String DFA113_maxS =
        "\1\u0164\1\0\54\uffff";
    static final String DFA113_acceptS =
        "\2\uffff\1\2\51\uffff\1\3\1\1";
    static final String DFA113_specialS =
        "\1\uffff\1\0\54\uffff}>";
    static final String[] DFA113_transitionS = {
            "\133\2\1\1\11\2\1\uffff\11\2\1\uffff\116\2\1\uffff\22\2\1\uffff"+
            "\14\2\1\uffff\1\2\12\uffff\1\2\2\uffff\1\2\5\uffff\4\2\14\uffff"+
            "\1\2\2\uffff\2\2\2\uffff\1\2\6\uffff\1\54\5\2\75\uffff\1\2",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };

    static final short[] DFA113_eot = DFA.unpackEncodedString(DFA113_eotS);
    static final short[] DFA113_eof = DFA.unpackEncodedString(DFA113_eofS);
    static final char[] DFA113_min = DFA.unpackEncodedStringToUnsignedChars(DFA113_minS);
    static final char[] DFA113_max = DFA.unpackEncodedStringToUnsignedChars(DFA113_maxS);
    static final short[] DFA113_accept = DFA.unpackEncodedString(DFA113_acceptS);
    static final short[] DFA113_special = DFA.unpackEncodedString(DFA113_specialS);
    static final short[][] DFA113_transition;

    static {
        int numStates = DFA113_transitionS.length;
        DFA113_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA113_transition[i] = DFA.unpackEncodedString(DFA113_transitionS[i]);
        }
    }

    class DFA113 extends DFA {

        public DFA113(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 113;
            this.eot = DFA113_eot;
            this.eof = DFA113_eof;
            this.min = DFA113_min;
            this.max = DFA113_max;
            this.accept = DFA113_accept;
            this.special = DFA113_special;
            this.transition = DFA113_transition;
        }
        public String getDescription() {
            return "660:1: p_ValueExpr : ( ( VALIDATE p_ValidationMode LBRACKET )=> p_ValidateExpr | p_PathExpr | p_ExtensionExpr );";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA113_1 = input.LA(1);

                         
                        int index113_1 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred1_XQueryParser()) ) {s = 45;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index113_1);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 113, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static final String DFA120_eotS =
        "\55\uffff";
    static final String DFA120_eofS =
        "\55\uffff";
    static final String DFA120_minS =
        "\1\20\1\0\53\uffff";
    static final String DFA120_maxS =
        "\1\u0164\1\0\53\uffff";
    static final String DFA120_acceptS =
        "\2\uffff\1\3\1\4\47\uffff\1\1\1\2";
    static final String DFA120_specialS =
        "\1\uffff\1\0\53\uffff}>";
    static final String[] DFA120_transitionS = {
            "\145\3\1\uffff\11\3\1\uffff\116\3\1\uffff\22\3\1\uffff\14\3"+
            "\1\uffff\1\3\12\uffff\1\3\2\uffff\1\3\5\uffff\1\1\1\2\2\3\14"+
            "\uffff\1\3\2\uffff\2\3\2\uffff\1\3\7\uffff\5\3\75\uffff\1\3",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };

    static final short[] DFA120_eot = DFA.unpackEncodedString(DFA120_eotS);
    static final short[] DFA120_eof = DFA.unpackEncodedString(DFA120_eofS);
    static final char[] DFA120_min = DFA.unpackEncodedStringToUnsignedChars(DFA120_minS);
    static final char[] DFA120_max = DFA.unpackEncodedStringToUnsignedChars(DFA120_maxS);
    static final short[] DFA120_accept = DFA.unpackEncodedString(DFA120_acceptS);
    static final short[] DFA120_special = DFA.unpackEncodedString(DFA120_specialS);
    static final short[][] DFA120_transition;

    static {
        int numStates = DFA120_transitionS.length;
        DFA120_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA120_transition[i] = DFA.unpackEncodedString(DFA120_transitionS[i]);
        }
    }

    class DFA120 extends DFA {

        public DFA120(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 120;
            this.eot = DFA120_eot;
            this.eof = DFA120_eof;
            this.min = DFA120_min;
            this.max = DFA120_max;
            this.accept = DFA120_accept;
            this.special = DFA120_special;
            this.transition = DFA120_transition;
        }
        public String getDescription() {
            return "704:1: p_PathExpr : ( ( SLASH p_RelativePathExpr )=> ( SLASH p_RelativePathExpr ) | SLASH | SLASH_SLASH p_RelativePathExpr | p_RelativePathExpr );";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA120_1 = input.LA(1);

                         
                        int index120_1 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred2_XQueryParser()) ) {s = 43;}

                        else if ( (true) ) {s = 44;}

                         
                        input.seek(index120_1);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 120, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static final String DFA122_eotS =
        "\u00e9\uffff";
    static final String DFA122_eofS =
        "\1\uffff\5\6\1\uffff\14\6\1\uffff\5\6\57\uffff\4\6\57\uffff\4\6"+
        "\57\uffff\4\6\57\uffff\4\6\3\uffff\1\6";
    static final String DFA122_minS =
        "\1\20\5\22\1\uffff\2\22\1\20\4\22\2\20\3\22\1\uffff\2\22\1\20\2"+
        "\22\1\20\3\23\1\117\7\20\1\144\11\20\1\u0088\1\u00bc\1\20\2\31\1"+
        "\122\1\u00ef\1\20\1\25\1\167\1\25\2\36\1\70\1\u00f0\1\20\1\132\10"+
        "\20\4\22\1\20\3\23\1\117\7\20\1\144\11\20\1\u0088\1\u00bc\1\20\2"+
        "\31\1\122\1\u00ef\1\20\1\25\1\167\1\25\2\36\1\70\1\u00f0\1\20\1"+
        "\132\10\20\4\22\1\20\3\23\1\117\7\20\1\144\11\20\1\u0088\1\u00bc"+
        "\1\20\2\31\1\122\1\u00ef\1\20\1\25\1\167\1\25\2\36\1\70\1\u00f0"+
        "\1\20\1\132\10\20\4\22\1\20\3\23\1\117\7\20\1\144\11\20\1\u0088"+
        "\1\u00bc\1\20\2\31\1\122\1\u00ef\1\20\1\25\1\167\1\25\2\36\1\70"+
        "\1\u00f0\1\20\1\132\10\20\4\22\1\20\2\uffff\1\22";
    static final String DFA122_maxS =
        "\1\u0164\5\u010c\1\uffff\2\u010c\1\u0164\4\u010c\2\u0164\3\u010c"+
        "\1\uffff\2\u010c\1\u0164\2\u010c\1\u0164\4\u0107\7\u0164\1\u0107"+
        "\11\u0164\2\u0107\1\u0164\4\u0107\1\u0164\6\u0107\1\u0117\1\u0164"+
        "\1\u0107\10\u0164\4\u010b\1\u0164\4\u0107\7\u0164\1\u0107\11\u0164"+
        "\2\u0107\1\u0164\4\u0107\1\u0164\6\u0107\1\u0117\1\u0164\1\u0107"+
        "\10\u0164\4\u010b\1\u0164\4\u00f0\7\u0164\1\u00f0\11\u0164\2\u00f0"+
        "\1\u0164\4\u00f0\1\u0164\3\u00f0\2\u00f8\1\u00f0\1\u0117\1\u0164"+
        "\1\u00f0\10\u0164\4\u010b\1\u0164\4\u00f0\7\u0164\1\u00f0\11\u0164"+
        "\2\u00f0\1\u0164\4\u00f0\1\u0164\3\u00f0\2\u00f8\1\u00f0\1\u0117"+
        "\1\u0164\1\u00f0\10\u0164\4\u010b\1\u0164\2\uffff\1\u010c";
    static final String DFA122_acceptS =
        "\6\uffff\1\1\14\uffff\1\2\u00d2\uffff\2\2\1\uffff";
    static final String DFA122_specialS =
        "\27\uffff\1\0\u00d1\uffff}>";
    static final String[] DFA122_transitionS = {
            "\1\2\1\5\4\30\1\11\6\30\1\7\1\30\1\20\4\30\1\10\1\13\2\30\1"+
            "\25\1\6\1\16\2\30\1\6\5\30\1\15\1\14\6\30\1\6\6\30\1\6\7\30"+
            "\1\26\3\30\1\6\4\30\1\22\1\30\1\1\1\4\1\3\1\30\1\17\3\30\2\6"+
            "\1\12\4\30\1\21\3\30\1\6\1\30\1\24\12\30\1\uffff\6\30\1\6\2"+
            "\30\1\uffff\12\30\1\6\103\30\1\uffff\3\30\1\6\16\30\1\uffff"+
            "\7\30\1\27\3\30\1\23\1\uffff\1\23\12\uffff\1\6\2\uffff\1\23"+
            "\7\uffff\1\23\1\6\14\uffff\1\6\2\uffff\2\23\2\uffff\1\30\7\uffff"+
            "\5\23\75\uffff\1\30",
            "\3\6\4\uffff\4\6\1\uffff\1\6\4\uffff\1\6\2\uffff\2\6\3\uffff"+
            "\2\6\2\uffff\1\6\1\uffff\1\6\3\uffff\1\6\1\uffff\1\6\1\uffff"+
            "\2\6\4\uffff\3\6\2\uffff\1\6\1\uffff\3\6\2\uffff\1\6\5\uffff"+
            "\2\6\7\uffff\2\6\5\uffff\1\6\4\uffff\2\6\1\uffff\1\6\4\uffff"+
            "\1\6\3\uffff\1\6\4\uffff\2\6\7\uffff\1\6\10\uffff\1\6\6\uffff"+
            "\2\6\4\uffff\1\6\1\uffff\1\6\7\uffff\1\6\2\uffff\1\6\24\uffff"+
            "\1\6\6\uffff\1\6\3\uffff\1\6\6\uffff\1\6\42\uffff\1\23\1\6\2"+
            "\uffff\4\6\1\uffff\1\6\1\uffff\1\6\1\uffff\13\6\2\uffff\1\31"+
            "\1\6\2\uffff\2\6",
            "\3\6\4\uffff\4\6\1\uffff\1\6\4\uffff\1\6\2\uffff\2\6\3\uffff"+
            "\2\6\2\uffff\1\6\1\uffff\1\6\3\uffff\1\6\1\uffff\1\6\1\uffff"+
            "\2\6\4\uffff\3\6\2\uffff\1\6\1\uffff\3\6\2\uffff\1\6\5\uffff"+
            "\2\6\7\uffff\2\6\5\uffff\1\6\4\uffff\2\6\1\uffff\1\6\4\uffff"+
            "\1\6\3\uffff\1\6\4\uffff\2\6\7\uffff\1\6\10\uffff\1\6\6\uffff"+
            "\2\6\4\uffff\1\6\1\uffff\1\6\7\uffff\1\6\2\uffff\1\6\24\uffff"+
            "\1\6\6\uffff\1\6\3\uffff\1\6\6\uffff\1\6\42\uffff\1\23\1\6\2"+
            "\uffff\4\6\1\uffff\1\6\1\uffff\1\6\1\uffff\13\6\2\uffff\1\31"+
            "\1\6\2\uffff\2\6",
            "\3\6\4\uffff\4\6\1\uffff\1\6\4\uffff\1\6\2\uffff\2\6\3\uffff"+
            "\2\6\2\uffff\1\6\1\uffff\1\6\3\uffff\1\6\1\uffff\1\6\1\uffff"+
            "\2\6\4\uffff\3\6\2\uffff\1\6\1\uffff\3\6\2\uffff\1\6\5\uffff"+
            "\2\6\7\uffff\2\6\5\uffff\1\6\4\uffff\2\6\1\uffff\1\6\4\uffff"+
            "\1\6\3\uffff\1\6\4\uffff\2\6\7\uffff\1\6\10\uffff\1\6\6\uffff"+
            "\2\6\4\uffff\1\6\1\uffff\1\6\7\uffff\1\6\2\uffff\1\6\24\uffff"+
            "\1\6\6\uffff\1\6\3\uffff\1\6\6\uffff\1\6\42\uffff\1\23\1\6\2"+
            "\uffff\4\6\1\uffff\1\6\1\uffff\1\6\1\uffff\13\6\2\uffff\1\31"+
            "\1\6\2\uffff\2\6",
            "\3\6\4\uffff\4\6\1\uffff\1\6\4\uffff\1\6\2\uffff\2\6\3\uffff"+
            "\2\6\2\uffff\1\6\1\uffff\1\6\3\uffff\1\6\1\uffff\1\6\1\uffff"+
            "\2\6\4\uffff\3\6\2\uffff\1\6\1\uffff\3\6\2\uffff\1\6\5\uffff"+
            "\2\6\7\uffff\2\6\5\uffff\1\6\4\uffff\2\6\1\uffff\1\6\4\uffff"+
            "\1\6\3\uffff\1\6\4\uffff\2\6\7\uffff\1\6\10\uffff\1\6\6\uffff"+
            "\2\6\4\uffff\1\6\1\uffff\1\6\7\uffff\1\6\2\uffff\1\6\24\uffff"+
            "\1\6\6\uffff\1\6\3\uffff\1\6\6\uffff\1\6\42\uffff\1\23\1\6\2"+
            "\uffff\4\6\1\uffff\1\6\1\uffff\1\6\1\uffff\13\6\2\uffff\1\31"+
            "\1\6\2\uffff\2\6",
            "\3\6\4\uffff\4\6\1\uffff\1\6\4\uffff\1\6\2\uffff\2\6\3\uffff"+
            "\2\6\2\uffff\1\6\1\uffff\1\6\3\uffff\1\6\1\uffff\1\6\1\uffff"+
            "\2\6\4\uffff\3\6\2\uffff\1\6\1\uffff\3\6\2\uffff\1\6\5\uffff"+
            "\2\6\7\uffff\2\6\5\uffff\1\6\4\uffff\2\6\1\uffff\1\6\4\uffff"+
            "\1\6\3\uffff\1\6\4\uffff\2\6\7\uffff\1\6\10\uffff\1\6\6\uffff"+
            "\2\6\4\uffff\1\6\1\uffff\1\6\7\uffff\1\6\2\uffff\1\6\24\uffff"+
            "\1\6\6\uffff\1\6\3\uffff\1\6\6\uffff\1\6\42\uffff\1\23\1\6\2"+
            "\uffff\4\6\1\uffff\1\6\1\uffff\1\6\1\uffff\13\6\2\uffff\1\31"+
            "\1\6\2\uffff\2\6",
            "",
            "\3\6\4\uffff\4\6\1\uffff\1\6\4\uffff\1\6\2\uffff\2\6\3\uffff"+
            "\2\6\2\uffff\1\6\1\uffff\1\6\3\uffff\1\6\1\uffff\1\6\1\uffff"+
            "\2\6\4\uffff\3\6\2\uffff\1\6\1\uffff\3\6\2\uffff\1\6\5\uffff"+
            "\2\6\7\uffff\2\6\5\uffff\1\6\4\uffff\2\6\1\uffff\1\6\4\uffff"+
            "\1\6\3\uffff\1\6\4\uffff\2\6\7\uffff\1\6\10\uffff\1\6\6\uffff"+
            "\2\6\4\uffff\1\6\1\uffff\1\6\7\uffff\1\6\2\uffff\1\6\24\uffff"+
            "\1\6\6\uffff\1\6\3\uffff\1\6\6\uffff\1\6\42\uffff\1\23\1\6\2"+
            "\uffff\4\6\1\uffff\1\6\1\uffff\1\6\1\uffff\13\6\2\uffff\1\31"+
            "\1\6\2\uffff\2\6",
            "\3\6\4\uffff\4\6\1\uffff\1\6\4\uffff\1\6\2\uffff\2\6\3\uffff"+
            "\2\6\2\uffff\1\6\1\uffff\1\6\3\uffff\1\6\1\uffff\1\6\1\uffff"+
            "\2\6\4\uffff\3\6\2\uffff\1\6\1\uffff\3\6\2\uffff\1\6\5\uffff"+
            "\2\6\7\uffff\2\6\5\uffff\1\6\4\uffff\2\6\1\uffff\1\6\4\uffff"+
            "\1\6\3\uffff\1\6\4\uffff\2\6\7\uffff\1\6\10\uffff\1\6\6\uffff"+
            "\2\6\4\uffff\1\6\1\uffff\1\6\7\uffff\1\6\2\uffff\1\6\24\uffff"+
            "\1\6\6\uffff\1\6\3\uffff\1\6\6\uffff\1\6\42\uffff\1\23\1\6\2"+
            "\uffff\4\6\1\uffff\1\6\1\uffff\1\6\1\uffff\13\6\2\uffff\1\31"+
            "\1\6\2\uffff\2\6",
            "\2\23\1\55\1\103\1\72\4\23\1\114\1\100\1\32\1\33\1\23\1\75"+
            "\4\23\1\77\2\23\1\73\1\41\3\23\1\101\1\74\2\23\1\46\1\23\1\37"+
            "\3\23\1\57\1\23\1\53\1\23\1\52\1\42\4\23\1\35\1\36\1\54\2\23"+
            "\1\51\1\23\1\60\1\50\1\43\2\23\1\47\5\23\1\56\1\63\7\23\1\66"+
            "\1\76\5\23\1\64\4\23\1\44\1\34\1\23\1\40\4\23\1\61\3\23\1\65"+
            "\2\23\1\uffff\1\23\1\71\1\62\6\23\1\uffff\1\70\10\23\1\67\6"+
            "\23\1\105\1\106\4\23\1\104\1\23\1\107\7\23\1\102\2\23\1\45\24"+
            "\23\1\113\6\23\1\112\3\23\1\110\6\23\1\111\3\23\1\uffff\22\23"+
            "\1\uffff\13\23\2\6\1\uffff\1\23\4\6\1\uffff\1\6\1\uffff\1\6"+
            "\1\uffff\13\6\2\uffff\2\6\2\uffff\2\6\15\uffff\1\23\111\uffff"+
            "\1\23",
            "\3\6\4\uffff\4\6\1\uffff\1\6\4\uffff\1\6\2\uffff\2\6\3\uffff"+
            "\2\6\2\uffff\1\6\1\uffff\1\6\3\uffff\1\6\1\uffff\1\6\1\uffff"+
            "\2\6\4\uffff\3\6\2\uffff\1\6\1\uffff\3\6\2\uffff\1\6\5\uffff"+
            "\2\6\7\uffff\2\6\5\uffff\1\6\4\uffff\2\6\1\uffff\1\6\4\uffff"+
            "\1\6\3\uffff\1\6\4\uffff\2\6\7\uffff\1\6\10\uffff\1\6\6\uffff"+
            "\2\6\4\uffff\1\6\1\uffff\1\6\7\uffff\1\6\2\uffff\1\6\24\uffff"+
            "\1\6\6\uffff\1\6\3\uffff\1\6\6\uffff\1\6\42\uffff\1\23\1\6\2"+
            "\uffff\4\6\1\uffff\1\6\1\uffff\1\6\1\uffff\13\6\2\uffff\1\31"+
            "\1\6\2\uffff\2\6",
            "\3\6\4\uffff\4\6\1\uffff\1\6\4\uffff\1\6\2\uffff\2\6\3\uffff"+
            "\2\6\2\uffff\1\6\1\uffff\1\6\3\uffff\1\6\1\uffff\1\6\1\uffff"+
            "\2\6\4\uffff\3\6\2\uffff\1\6\1\uffff\3\6\2\uffff\1\6\5\uffff"+
            "\2\6\7\uffff\2\6\5\uffff\1\6\4\uffff\2\6\1\uffff\1\6\4\uffff"+
            "\1\6\3\uffff\1\6\4\uffff\2\6\7\uffff\1\6\10\uffff\1\6\6\uffff"+
            "\2\6\4\uffff\1\6\1\uffff\1\6\7\uffff\1\6\2\uffff\1\6\24\uffff"+
            "\1\6\6\uffff\1\6\3\uffff\1\6\6\uffff\1\6\42\uffff\1\23\1\6\2"+
            "\uffff\4\6\1\uffff\1\6\1\uffff\1\6\1\uffff\13\6\2\uffff\1\31"+
            "\1\6\2\uffff\2\6",
            "\3\6\4\uffff\4\6\1\uffff\1\6\4\uffff\1\6\2\uffff\2\6\3\uffff"+
            "\2\6\2\uffff\1\6\1\uffff\1\6\3\uffff\1\6\1\uffff\1\6\1\uffff"+
            "\2\6\4\uffff\3\6\2\uffff\1\6\1\uffff\3\6\2\uffff\1\6\5\uffff"+
            "\2\6\7\uffff\2\6\5\uffff\1\6\4\uffff\2\6\1\uffff\1\6\4\uffff"+
            "\1\6\3\uffff\1\6\4\uffff\2\6\7\uffff\1\6\10\uffff\1\6\6\uffff"+
            "\2\6\4\uffff\1\6\1\uffff\1\6\7\uffff\1\6\2\uffff\1\6\24\uffff"+
            "\1\6\6\uffff\1\6\3\uffff\1\6\6\uffff\1\6\42\uffff\1\23\1\6\2"+
            "\uffff\4\6\1\uffff\1\6\1\uffff\1\6\1\uffff\13\6\2\uffff\1\31"+
            "\1\6\2\uffff\2\6",
            "\3\6\4\uffff\4\6\1\uffff\1\6\4\uffff\1\6\2\uffff\2\6\3\uffff"+
            "\2\6\2\uffff\1\6\1\uffff\1\6\3\uffff\1\6\1\uffff\1\6\1\uffff"+
            "\2\6\4\uffff\3\6\2\uffff\1\6\1\uffff\3\6\2\uffff\1\6\5\uffff"+
            "\2\6\7\uffff\2\6\5\uffff\1\6\4\uffff\2\6\1\uffff\1\6\4\uffff"+
            "\1\6\3\uffff\1\6\4\uffff\2\6\7\uffff\1\6\10\uffff\1\6\6\uffff"+
            "\2\6\4\uffff\1\6\1\uffff\1\6\7\uffff\1\6\2\uffff\1\6\24\uffff"+
            "\1\6\6\uffff\1\6\3\uffff\1\6\6\uffff\1\6\42\uffff\1\23\1\6\2"+
            "\uffff\4\6\1\uffff\1\6\1\uffff\1\6\1\uffff\13\6\2\uffff\1\31"+
            "\1\6\2\uffff\2\6",
            "\2\23\1\140\1\166\1\155\4\23\1\177\1\163\1\115\1\116\1\23"+
            "\1\160\4\23\1\162\2\23\1\156\1\124\3\23\1\164\1\157\2\23\1\131"+
            "\1\23\1\122\3\23\1\142\1\23\1\136\1\23\1\135\1\125\4\23\1\120"+
            "\1\121\1\137\2\23\1\134\1\23\1\143\1\133\1\126\2\23\1\132\5"+
            "\23\1\141\1\146\7\23\1\151\1\161\5\23\1\147\4\23\1\127\1\117"+
            "\1\23\1\123\4\23\1\144\3\23\1\150\2\23\1\uffff\1\23\1\154\1"+
            "\145\6\23\1\uffff\1\153\10\23\1\152\6\23\1\170\1\171\4\23\1"+
            "\167\1\23\1\172\7\23\1\165\2\23\1\130\24\23\1\176\6\23\1\175"+
            "\3\23\1\173\6\23\1\174\3\23\1\uffff\22\23\1\uffff\13\23\2\6"+
            "\1\uffff\1\23\4\6\1\uffff\1\6\1\uffff\1\6\1\uffff\13\6\2\uffff"+
            "\1\6\3\uffff\2\6\15\uffff\1\23\111\uffff\1\23",
            "\2\23\1\u0093\1\u00a9\1\u00a0\4\23\1\u00b2\1\u00a6\1\u0080"+
            "\1\u0081\1\23\1\u00a3\4\23\1\u00a5\2\23\1\u00a1\1\u0087\3\23"+
            "\1\u00a7\1\u00a2\2\23\1\u008c\1\23\1\u0085\3\23\1\u0095\1\23"+
            "\1\u0091\1\23\1\u0090\1\u0088\4\23\1\u0083\1\u0084\1\u0092\2"+
            "\23\1\u008f\1\23\1\u0096\1\u008e\1\u0089\2\23\1\u008d\5\23\1"+
            "\u0094\1\u0099\7\23\1\u009c\1\u00a4\5\23\1\u009a\4\23\1\u008a"+
            "\1\u0082\1\23\1\u0086\4\23\1\u0097\3\23\1\u009b\2\23\1\uffff"+
            "\1\23\1\u009f\1\u0098\6\23\1\uffff\1\u009e\10\23\1\u009d\6\23"+
            "\1\u00ab\1\u00ac\4\23\1\u00aa\1\23\1\u00ad\7\23\1\u00a8\2\23"+
            "\1\u008b\24\23\1\u00b1\6\23\1\u00b0\3\23\1\u00ae\6\23\1\u00af"+
            "\3\23\1\uffff\22\23\1\uffff\13\23\2\6\1\uffff\1\23\4\6\1\uffff"+
            "\1\6\1\uffff\1\6\1\uffff\13\6\2\uffff\1\6\3\uffff\2\6\15\uffff"+
            "\1\23\111\uffff\1\23",
            "\3\6\4\uffff\4\6\1\uffff\1\6\4\uffff\1\6\2\uffff\2\6\3\uffff"+
            "\2\6\2\uffff\1\6\1\uffff\1\6\3\uffff\1\6\1\uffff\1\6\1\uffff"+
            "\2\6\4\uffff\3\6\2\uffff\1\6\1\uffff\3\6\2\uffff\1\6\5\uffff"+
            "\2\6\7\uffff\2\6\5\uffff\1\6\4\uffff\2\6\1\uffff\1\6\4\uffff"+
            "\1\6\3\uffff\1\6\4\uffff\2\6\7\uffff\1\6\10\uffff\1\6\6\uffff"+
            "\2\6\4\uffff\1\6\1\uffff\1\6\7\uffff\1\6\2\uffff\1\6\24\uffff"+
            "\1\6\6\uffff\1\6\3\uffff\1\6\6\uffff\1\6\42\uffff\2\6\1\uffff"+
            "\1\23\4\6\1\uffff\1\6\1\uffff\1\6\1\uffff\13\6\2\uffff\1\6\3"+
            "\uffff\2\6",
            "\3\6\4\uffff\4\6\1\uffff\1\6\4\uffff\1\6\2\uffff\2\6\3\uffff"+
            "\2\6\2\uffff\1\6\1\uffff\1\6\3\uffff\1\6\1\uffff\1\6\1\uffff"+
            "\2\6\4\uffff\3\6\2\uffff\1\6\1\uffff\3\6\2\uffff\1\6\5\uffff"+
            "\2\6\7\uffff\2\6\5\uffff\1\6\4\uffff\2\6\1\uffff\1\6\4\uffff"+
            "\1\6\3\uffff\1\6\4\uffff\2\6\7\uffff\1\6\10\uffff\1\6\6\uffff"+
            "\2\6\4\uffff\1\6\1\uffff\1\6\7\uffff\1\6\2\uffff\1\6\24\uffff"+
            "\1\6\6\uffff\1\6\3\uffff\1\6\6\uffff\1\6\42\uffff\2\6\1\uffff"+
            "\1\23\4\6\1\uffff\1\6\1\uffff\1\6\1\uffff\13\6\2\uffff\1\6\3"+
            "\uffff\2\6",
            "\3\6\4\uffff\4\6\1\uffff\1\6\4\uffff\1\6\2\uffff\2\6\3\uffff"+
            "\2\6\2\uffff\1\6\1\uffff\1\6\3\uffff\1\6\1\uffff\1\6\1\uffff"+
            "\2\6\4\uffff\3\6\2\uffff\1\6\1\uffff\3\6\2\uffff\1\6\5\uffff"+
            "\2\6\7\uffff\2\6\5\uffff\1\6\4\uffff\2\6\1\uffff\1\6\4\uffff"+
            "\1\6\3\uffff\1\6\4\uffff\2\6\7\uffff\1\6\10\uffff\1\6\6\uffff"+
            "\2\6\4\uffff\1\6\1\uffff\1\6\7\uffff\1\6\2\uffff\1\6\24\uffff"+
            "\1\6\6\uffff\1\6\3\uffff\1\6\6\uffff\1\6\42\uffff\1\23\1\6\1"+
            "\uffff\1\23\4\6\1\uffff\1\6\1\uffff\1\6\1\uffff\13\6\2\uffff"+
            "\1\31\3\uffff\2\6",
            "",
            "\3\6\4\uffff\4\6\1\uffff\1\6\4\uffff\1\6\2\uffff\2\6\3\uffff"+
            "\2\6\2\uffff\1\6\1\uffff\1\6\3\uffff\1\6\1\uffff\1\6\1\uffff"+
            "\2\6\4\uffff\3\6\2\uffff\1\6\1\uffff\3\6\2\uffff\1\6\5\uffff"+
            "\2\6\7\uffff\2\6\5\uffff\1\6\4\uffff\2\6\1\uffff\1\6\4\uffff"+
            "\1\6\3\uffff\1\6\4\uffff\2\6\7\uffff\1\6\10\uffff\1\6\6\uffff"+
            "\2\6\4\uffff\1\6\1\uffff\1\6\7\uffff\1\6\2\uffff\1\6\24\uffff"+
            "\1\6\6\uffff\1\6\3\uffff\1\6\6\uffff\1\6\42\uffff\1\23\1\6\1"+
            "\uffff\1\23\4\6\1\uffff\1\6\1\uffff\1\6\1\uffff\13\6\2\uffff"+
            "\1\31\3\uffff\2\6",
            "\3\6\4\uffff\4\6\1\uffff\1\6\4\uffff\1\6\2\uffff\2\6\3\uffff"+
            "\2\6\2\uffff\1\6\1\uffff\1\6\3\uffff\1\6\1\uffff\1\6\1\uffff"+
            "\2\6\4\uffff\3\6\2\uffff\1\6\1\uffff\3\6\2\uffff\1\6\5\uffff"+
            "\2\6\7\uffff\2\6\5\uffff\1\6\4\uffff\2\6\1\uffff\1\6\4\uffff"+
            "\1\6\3\uffff\1\6\4\uffff\2\6\7\uffff\1\6\10\uffff\1\6\6\uffff"+
            "\2\6\4\uffff\1\6\1\uffff\1\6\7\uffff\1\6\2\uffff\1\6\24\uffff"+
            "\1\6\6\uffff\1\6\3\uffff\1\6\6\uffff\1\6\42\uffff\1\23\1\6\1"+
            "\uffff\1\23\4\6\1\uffff\1\6\1\uffff\1\6\1\uffff\13\6\2\uffff"+
            "\1\31\3\uffff\2\6",
            "\2\23\1\u00c6\1\u00dc\1\u00d3\4\23\1\u00e5\1\u00d9\1\u00b3"+
            "\1\u00b4\1\23\1\u00d6\4\23\1\u00d8\2\23\1\u00d4\1\u00ba\3\23"+
            "\1\u00da\1\u00d5\2\23\1\u00bf\1\23\1\u00b8\3\23\1\u00c8\1\23"+
            "\1\u00c4\1\23\1\u00c3\1\u00bb\4\23\1\u00b6\1\u00b7\1\u00c5\2"+
            "\23\1\u00c2\1\23\1\u00c9\1\u00c1\1\u00bc\2\23\1\u00c0\5\23\1"+
            "\u00c7\1\u00cc\7\23\1\u00cf\1\u00d7\5\23\1\u00cd\4\23\1\u00bd"+
            "\1\u00b5\1\23\1\u00b9\4\23\1\u00ca\3\23\1\u00ce\2\23\1\uffff"+
            "\1\23\1\u00d2\1\u00cb\6\23\1\uffff\1\u00d1\10\23\1\u00d0\6\23"+
            "\1\u00de\1\u00df\4\23\1\u00dd\1\23\1\u00e0\7\23\1\u00db\2\23"+
            "\1\u00be\24\23\1\u00e4\6\23\1\u00e3\3\23\1\u00e1\6\23\1\u00e2"+
            "\3\23\1\uffff\22\23\1\uffff\14\23\1\6\1\uffff\1\23\4\6\1\uffff"+
            "\1\6\1\uffff\1\6\1\uffff\13\6\2\uffff\1\31\3\uffff\2\6\15\uffff"+
            "\1\23\111\uffff\1\23",
            "\3\6\4\uffff\4\6\1\uffff\1\6\4\uffff\1\6\2\uffff\2\6\3\uffff"+
            "\2\6\2\uffff\1\6\1\uffff\1\6\3\uffff\1\6\1\uffff\1\6\1\uffff"+
            "\2\6\4\uffff\3\6\2\uffff\1\6\1\uffff\3\6\2\uffff\1\6\5\uffff"+
            "\2\6\7\uffff\2\6\5\uffff\1\6\4\uffff\2\6\1\uffff\1\6\4\uffff"+
            "\1\6\3\uffff\1\6\4\uffff\2\6\7\uffff\1\6\10\uffff\1\6\6\uffff"+
            "\2\6\4\uffff\1\6\1\uffff\1\6\7\uffff\1\6\2\uffff\1\6\24\uffff"+
            "\1\6\6\uffff\1\6\3\uffff\1\6\6\uffff\1\6\42\uffff\1\u00e7\1"+
            "\6\1\uffff\1\u00e6\4\6\1\uffff\1\6\1\uffff\1\6\1\uffff\13\6"+
            "\2\uffff\1\31\3\uffff\2\6",
            "\3\6\4\uffff\4\6\1\uffff\1\6\4\uffff\1\6\2\uffff\2\6\3\uffff"+
            "\2\6\2\uffff\1\6\1\uffff\1\6\3\uffff\1\6\1\uffff\1\6\1\uffff"+
            "\2\6\4\uffff\3\6\2\uffff\1\6\1\uffff\3\6\2\uffff\1\6\5\uffff"+
            "\2\6\7\uffff\2\6\5\uffff\1\6\4\uffff\2\6\1\uffff\1\6\4\uffff"+
            "\1\6\3\uffff\1\6\4\uffff\2\6\7\uffff\1\6\10\uffff\1\6\6\uffff"+
            "\2\6\4\uffff\1\6\1\uffff\1\6\7\uffff\1\6\2\uffff\1\6\24\uffff"+
            "\1\6\6\uffff\1\6\3\uffff\1\6\6\uffff\1\6\42\uffff\1\u00e7\1"+
            "\6\2\uffff\4\6\1\uffff\1\6\1\uffff\1\6\1\uffff\13\6\2\uffff"+
            "\1\31\3\uffff\2\6",
            "\145\u00e8\1\uffff\11\u00e8\1\uffff\116\u00e8\1\uffff\22\u00e8"+
            "\1\uffff\13\u00e8\15\uffff\1\6\37\uffff\1\u00e8\111\uffff\1"+
            "\u00e8",
            "\1\6\u00dc\uffff\1\u00e7\26\uffff\1\u00e7",
            "\1\6\u00dc\uffff\1\u00e7\26\uffff\1\u00e7",
            "\1\6\u00dc\uffff\1\u00e7\26\uffff\1\u00e7",
            "\1\6\u00a0\uffff\1\u00e7\26\uffff\1\u00e7",
            "\145\6\1\uffff\11\6\1\uffff\116\6\1\uffff\22\6\1\uffff\14"+
            "\6\1\uffff\1\6\1\u00e7\11\uffff\4\6\5\uffff\4\6\1\u00e7\13\uffff"+
            "\1\6\2\uffff\2\6\2\uffff\1\6\6\uffff\6\6\75\uffff\1\6",
            "\145\6\1\uffff\11\6\1\uffff\116\6\1\uffff\22\6\1\uffff\14"+
            "\6\1\uffff\1\6\1\u00e7\11\uffff\4\6\5\uffff\4\6\1\u00e7\13\uffff"+
            "\1\6\2\uffff\2\6\2\uffff\1\6\6\uffff\6\6\75\uffff\1\6",
            "\145\6\1\uffff\11\6\1\uffff\116\6\1\uffff\22\6\1\uffff\14"+
            "\6\1\uffff\1\6\1\u00e7\11\uffff\4\6\5\uffff\4\6\1\u00e7\13\uffff"+
            "\1\6\2\uffff\2\6\2\uffff\1\6\6\uffff\6\6\75\uffff\1\6",
            "\145\6\1\uffff\11\6\1\uffff\116\6\1\uffff\22\6\1\uffff\14"+
            "\6\1\uffff\1\6\1\u00e7\11\uffff\4\6\5\uffff\4\6\1\u00e7\13\uffff"+
            "\1\6\2\uffff\2\6\2\uffff\1\6\6\uffff\6\6\75\uffff\1\6",
            "\145\6\1\uffff\11\6\1\uffff\116\6\1\uffff\22\6\1\uffff\14"+
            "\6\1\uffff\1\6\1\u00e7\11\uffff\4\6\5\uffff\4\6\1\u00e7\13\uffff"+
            "\1\6\2\uffff\2\6\2\uffff\1\6\6\uffff\6\6\75\uffff\1\6",
            "\145\6\1\uffff\11\6\1\uffff\116\6\1\uffff\22\6\1\uffff\14"+
            "\6\1\uffff\1\6\1\u00e7\11\uffff\4\6\5\uffff\4\6\1\u00e7\13\uffff"+
            "\1\6\2\uffff\2\6\2\uffff\1\6\6\uffff\6\6\75\uffff\1\6",
            "\145\6\1\uffff\11\6\1\uffff\116\6\1\uffff\22\6\1\uffff\14"+
            "\6\1\uffff\1\6\1\u00e7\11\uffff\4\6\5\uffff\4\6\1\u00e7\13\uffff"+
            "\1\6\2\uffff\2\6\2\uffff\1\6\6\uffff\6\6\75\uffff\1\6",
            "\1\6\u008b\uffff\1\u00e7\26\uffff\1\u00e7",
            "\145\6\1\uffff\11\6\1\uffff\116\6\1\uffff\22\6\1\uffff\14"+
            "\6\1\uffff\1\6\1\u00e7\11\uffff\4\6\5\uffff\4\6\1\u00e7\13\uffff"+
            "\1\6\2\uffff\2\6\2\uffff\1\6\6\uffff\6\6\75\uffff\1\6",
            "\145\6\1\uffff\11\6\1\uffff\116\6\1\uffff\22\6\1\uffff\14"+
            "\6\1\uffff\1\6\1\u00e7\11\uffff\4\6\5\uffff\4\6\1\u00e7\13\uffff"+
            "\1\6\2\uffff\2\6\2\uffff\1\6\6\uffff\6\6\75\uffff\1\6",
            "\145\6\1\uffff\11\6\1\uffff\116\6\1\uffff\22\6\1\uffff\14"+
            "\6\1\uffff\1\6\1\u00e7\11\uffff\4\6\5\uffff\4\6\1\u00e7\13\uffff"+
            "\1\6\2\uffff\2\6\2\uffff\1\6\6\uffff\6\6\75\uffff\1\6",
            "\145\6\1\uffff\11\6\1\uffff\116\6\1\uffff\22\6\1\uffff\14"+
            "\6\1\uffff\1\6\1\u00e7\11\uffff\4\6\5\uffff\4\6\1\u00e7\13\uffff"+
            "\1\6\2\uffff\2\6\2\uffff\1\6\6\uffff\6\6\75\uffff\1\6",
            "\145\6\1\uffff\11\6\1\uffff\116\6\1\uffff\22\6\1\uffff\14"+
            "\6\1\uffff\1\6\1\u00e7\11\uffff\4\6\5\uffff\4\6\1\u00e7\13\uffff"+
            "\1\6\2\uffff\2\6\2\uffff\1\6\6\uffff\6\6\75\uffff\1\6",
            "\145\6\1\uffff\11\6\1\uffff\116\6\1\uffff\22\6\1\uffff\14"+
            "\6\1\uffff\1\6\1\u00e7\11\uffff\4\6\5\uffff\4\6\1\u00e7\13\uffff"+
            "\1\6\2\uffff\2\6\2\uffff\1\6\6\uffff\6\6\75\uffff\1\6",
            "\145\6\1\uffff\11\6\1\uffff\116\6\1\uffff\22\6\1\uffff\14"+
            "\6\1\uffff\1\6\1\u00e7\11\uffff\4\6\5\uffff\4\6\1\u00e7\13\uffff"+
            "\1\6\2\uffff\2\6\2\uffff\1\6\6\uffff\6\6\75\uffff\1\6",
            "\145\6\1\uffff\11\6\1\uffff\116\6\1\uffff\22\6\1\uffff\14"+
            "\6\1\uffff\1\6\1\u00e7\11\uffff\4\6\5\uffff\4\6\1\u00e7\13\uffff"+
            "\1\6\2\uffff\2\6\2\uffff\1\6\6\uffff\6\6\75\uffff\1\6",
            "\145\6\1\uffff\11\6\1\uffff\116\6\1\uffff\22\6\1\uffff\14"+
            "\6\1\uffff\1\6\1\u00e7\11\uffff\4\6\5\uffff\4\6\1\u00e7\13\uffff"+
            "\1\6\2\uffff\2\6\2\uffff\1\6\6\uffff\6\6\75\uffff\1\6",
            "\1\6\3\uffff\1\6\142\uffff\1\6\1\u00e7\26\uffff\1\u00e7",
            "\1\6\62\uffff\1\6\1\u00e7\26\uffff\1\u00e7",
            "\145\6\1\uffff\11\6\1\uffff\116\6\1\uffff\22\6\1\uffff\14"+
            "\6\1\uffff\1\6\1\u00e7\11\uffff\4\6\5\uffff\4\6\1\u00e7\13\uffff"+
            "\1\6\2\uffff\2\6\2\uffff\1\6\6\uffff\6\6\75\uffff\1\6",
            "\1\6\u00d6\uffff\1\u00e7\26\uffff\1\u00e7",
            "\1\6\u00d6\uffff\1\u00e7\26\uffff\1\u00e7",
            "\1\6\u009d\uffff\1\u00e7\26\uffff\1\u00e7",
            "\1\6\1\u00e7\26\uffff\1\u00e7",
            "\145\6\1\uffff\11\6\1\uffff\116\6\1\uffff\22\6\1\uffff\14"+
            "\6\1\uffff\1\6\1\u00e7\11\uffff\4\6\5\uffff\4\6\1\u00e7\13\uffff"+
            "\1\6\2\uffff\2\6\2\uffff\1\6\6\uffff\6\6\75\uffff\1\6",
            "\1\6\150\uffff\1\6\10\uffff\1\6\5\uffff\1\6\141\uffff\1\6"+
            "\1\u00e7\26\uffff\1\u00e7",
            "\1\6\170\uffff\1\u00e7\26\uffff\1\u00e7",
            "\1\6\150\uffff\1\6\10\uffff\1\6\5\uffff\1\6\141\uffff\1\6"+
            "\1\u00e7\26\uffff\1\u00e7",
            "\1\6\15\uffff\1\6\10\uffff\1\6\20\uffff\1\6\13\uffff\1\6\7"+
            "\uffff\1\6\6\uffff\1\6\14\uffff\1\6\3\uffff\1\6\5\uffff\1\6"+
            "\167\uffff\1\u00e7\7\uffff\1\6\16\uffff\1\u00e7",
            "\1\6\15\uffff\1\6\10\uffff\1\6\20\uffff\1\6\13\uffff\1\6\7"+
            "\uffff\1\6\6\uffff\1\6\14\uffff\1\6\3\uffff\1\6\5\uffff\1\6"+
            "\167\uffff\1\u00e7\7\uffff\1\6\16\uffff\1\u00e7",
            "\1\6\14\uffff\1\6\u00aa\uffff\1\u00e7\26\uffff\1\u00e7",
            "\1\u00e7\26\uffff\1\u00e7\16\uffff\2\6",
            "\145\6\1\uffff\11\6\1\uffff\116\6\1\uffff\22\6\1\uffff\14"+
            "\6\1\uffff\1\6\1\u00e7\11\uffff\4\6\5\uffff\4\6\1\u00e7\13\uffff"+
            "\1\6\2\uffff\2\6\2\uffff\1\6\6\uffff\6\6\75\uffff\1\6",
            "\1\6\u0094\uffff\1\6\1\u00e7\26\uffff\1\u00e7",
            "\145\6\1\uffff\11\6\1\uffff\116\6\1\uffff\22\6\1\uffff\14"+
            "\6\1\uffff\1\6\1\u00e7\11\uffff\4\6\5\uffff\4\6\1\u00e7\13\uffff"+
            "\1\6\2\uffff\2\6\2\uffff\1\6\6\uffff\6\6\75\uffff\1\6",
            "\145\6\1\uffff\11\6\1\uffff\116\6\1\uffff\22\6\1\uffff\14"+
            "\6\1\uffff\1\6\1\u00e7\11\uffff\4\6\5\uffff\4\6\1\u00e7\13\uffff"+
            "\1\6\2\uffff\2\6\2\uffff\1\6\6\uffff\6\6\75\uffff\1\6",
            "\145\6\1\uffff\11\6\1\uffff\116\6\1\uffff\22\6\1\uffff\14"+
            "\6\1\uffff\1\6\1\u00e7\11\uffff\4\6\5\uffff\4\6\1\u00e7\13\uffff"+
            "\1\6\2\uffff\2\6\2\uffff\1\6\6\uffff\6\6\75\uffff\1\6",
            "\145\6\1\uffff\11\6\1\uffff\116\6\1\uffff\22\6\1\uffff\14"+
            "\6\1\uffff\1\6\1\u00e7\11\uffff\4\6\5\uffff\4\6\1\u00e7\13\uffff"+
            "\1\6\2\uffff\2\6\2\uffff\1\6\6\uffff\6\6\75\uffff\1\6",
            "\145\6\1\uffff\11\6\1\uffff\116\6\1\uffff\22\6\1\uffff\14"+
            "\6\1\uffff\1\6\1\u00e7\11\uffff\4\6\5\uffff\4\6\1\u00e7\13\uffff"+
            "\1\6\2\uffff\2\6\2\uffff\1\6\6\uffff\6\6\75\uffff\1\6",
            "\145\6\1\uffff\11\6\1\uffff\116\6\1\uffff\22\6\1\uffff\14"+
            "\6\1\uffff\1\6\1\u00e7\11\uffff\4\6\5\uffff\4\6\1\u00e7\13\uffff"+
            "\1\6\2\uffff\2\6\2\uffff\1\6\6\uffff\6\6\75\uffff\1\6",
            "\145\6\1\uffff\11\6\1\uffff\116\6\1\uffff\22\6\1\uffff\14"+
            "\6\1\uffff\1\6\1\u00e7\11\uffff\4\6\5\uffff\4\6\1\u00e7\13\uffff"+
            "\1\6\2\uffff\2\6\2\uffff\1\6\6\uffff\6\6\75\uffff\1\6",
            "\145\6\1\uffff\11\6\1\uffff\116\6\1\uffff\22\6\1\uffff\14"+
            "\6\1\uffff\1\6\1\u00e7\11\uffff\4\6\5\uffff\4\6\1\u00e7\13\uffff"+
            "\1\6\2\uffff\2\6\2\uffff\1\6\6\uffff\6\6\75\uffff\1\6",
            "\4\6\4\uffff\1\6\3\uffff\1\6\4\uffff\1\6\2\uffff\1\6\4\uffff"+
            "\2\6\2\uffff\1\6\5\uffff\1\6\1\uffff\1\6\1\uffff\1\6\7\uffff"+
            "\1\6\2\uffff\1\6\1\uffff\2\6\3\uffff\1\6\5\uffff\3\6\6\uffff"+
            "\2\6\5\uffff\1\6\14\uffff\1\6\3\uffff\1\6\4\uffff\2\6\7\uffff"+
            "\1\6\10\uffff\1\6\4\uffff\1\6\1\uffff\2\6\4\uffff\1\6\1\uffff"+
            "\1\6\7\uffff\1\6\5\uffff\3\6\3\uffff\1\6\1\uffff\1\6\6\uffff"+
            "\1\6\5\uffff\1\6\11\uffff\2\6\1\uffff\1\6\45\uffff\1\6\1\uffff"+
            "\1\u00e7\1\6\1\uffff\2\6\1\uffff\1\6\1\uffff\1\6\4\uffff\6\6"+
            "\4\uffff\1\u00e7\3\uffff\1\6",
            "\4\6\4\uffff\1\6\3\uffff\1\6\4\uffff\1\6\2\uffff\1\6\4\uffff"+
            "\2\6\2\uffff\1\6\5\uffff\1\6\1\uffff\1\6\1\uffff\1\6\7\uffff"+
            "\1\6\2\uffff\1\6\1\uffff\2\6\3\uffff\1\6\5\uffff\3\6\6\uffff"+
            "\2\6\5\uffff\1\6\14\uffff\1\6\3\uffff\1\6\4\uffff\2\6\7\uffff"+
            "\1\6\10\uffff\1\6\4\uffff\1\6\1\uffff\2\6\4\uffff\1\6\1\uffff"+
            "\1\6\7\uffff\1\6\5\uffff\3\6\22\uffff\1\6\14\uffff\1\6\45\uffff"+
            "\1\6\1\uffff\1\u00e7\1\6\1\uffff\2\6\1\uffff\1\6\1\uffff\1\6"+
            "\4\uffff\6\6\4\uffff\1\u00e7\3\uffff\1\6",
            "\4\6\4\uffff\1\6\3\uffff\1\6\4\uffff\1\6\2\uffff\1\6\4\uffff"+
            "\2\6\2\uffff\1\6\5\uffff\1\6\1\uffff\1\6\1\uffff\1\6\7\uffff"+
            "\1\6\2\uffff\1\6\1\uffff\2\6\3\uffff\1\6\5\uffff\3\6\6\uffff"+
            "\2\6\5\uffff\1\6\14\uffff\1\6\3\uffff\1\6\4\uffff\2\6\7\uffff"+
            "\1\6\10\uffff\1\6\4\uffff\1\6\1\uffff\2\6\4\uffff\1\6\1\uffff"+
            "\1\6\7\uffff\1\6\5\uffff\3\6\22\uffff\1\6\14\uffff\1\6\45\uffff"+
            "\1\6\1\uffff\1\u00e7\1\6\1\uffff\2\6\1\uffff\1\6\1\uffff\1\6"+
            "\4\uffff\6\6\4\uffff\1\u00e7\3\uffff\1\6",
            "\4\6\4\uffff\1\6\3\uffff\1\6\4\uffff\1\6\2\uffff\1\6\4\uffff"+
            "\2\6\2\uffff\1\6\5\uffff\1\6\1\uffff\1\6\1\uffff\1\6\7\uffff"+
            "\1\6\2\uffff\1\6\1\uffff\2\6\3\uffff\1\6\5\uffff\3\6\6\uffff"+
            "\2\6\5\uffff\1\6\14\uffff\1\6\3\uffff\1\6\4\uffff\2\6\7\uffff"+
            "\1\6\10\uffff\1\6\4\uffff\1\6\1\uffff\2\6\4\uffff\1\6\1\uffff"+
            "\1\6\7\uffff\1\6\5\uffff\3\6\22\uffff\1\6\14\uffff\1\6\45\uffff"+
            "\1\6\1\uffff\1\u00e7\1\6\1\uffff\2\6\1\uffff\1\6\1\uffff\1\6"+
            "\4\uffff\6\6\4\uffff\1\u00e7\3\uffff\1\6",
            "\145\6\1\uffff\11\6\1\uffff\116\6\1\uffff\22\6\1\uffff\14"+
            "\6\1\uffff\1\6\1\u00e7\11\uffff\1\6\2\uffff\1\6\5\uffff\4\6"+
            "\1\u00e7\13\uffff\1\6\2\uffff\2\6\2\uffff\1\6\7\uffff\5\6\75"+
            "\uffff\1\6",
            "\1\6\u00dc\uffff\1\u00e7\26\uffff\1\u00e7",
            "\1\6\u00dc\uffff\1\u00e7\26\uffff\1\u00e7",
            "\1\6\u00dc\uffff\1\u00e7\26\uffff\1\u00e7",
            "\1\6\u00a0\uffff\1\u00e7\26\uffff\1\u00e7",
            "\145\6\1\uffff\11\6\1\uffff\116\6\1\uffff\22\6\1\uffff\14"+
            "\6\1\uffff\1\6\1\u00e7\11\uffff\4\6\5\uffff\4\6\1\u00e7\13\uffff"+
            "\1\6\2\uffff\2\6\2\uffff\1\6\6\uffff\6\6\75\uffff\1\6",
            "\145\6\1\uffff\11\6\1\uffff\116\6\1\uffff\22\6\1\uffff\14"+
            "\6\1\uffff\1\6\1\u00e7\11\uffff\4\6\5\uffff\4\6\1\u00e7\13\uffff"+
            "\1\6\2\uffff\2\6\2\uffff\1\6\6\uffff\6\6\75\uffff\1\6",
            "\145\6\1\uffff\11\6\1\uffff\116\6\1\uffff\22\6\1\uffff\14"+
            "\6\1\uffff\1\6\1\u00e7\11\uffff\4\6\5\uffff\4\6\1\u00e7\13\uffff"+
            "\1\6\2\uffff\2\6\2\uffff\1\6\6\uffff\6\6\75\uffff\1\6",
            "\145\6\1\uffff\11\6\1\uffff\116\6\1\uffff\22\6\1\uffff\14"+
            "\6\1\uffff\1\6\1\u00e7\11\uffff\4\6\5\uffff\4\6\1\u00e7\13\uffff"+
            "\1\6\2\uffff\2\6\2\uffff\1\6\6\uffff\6\6\75\uffff\1\6",
            "\145\6\1\uffff\11\6\1\uffff\116\6\1\uffff\22\6\1\uffff\14"+
            "\6\1\uffff\1\6\1\u00e7\11\uffff\4\6\5\uffff\4\6\1\u00e7\13\uffff"+
            "\1\6\2\uffff\2\6\2\uffff\1\6\6\uffff\6\6\75\uffff\1\6",
            "\145\6\1\uffff\11\6\1\uffff\116\6\1\uffff\22\6\1\uffff\14"+
            "\6\1\uffff\1\6\1\u00e7\11\uffff\4\6\5\uffff\4\6\1\u00e7\13\uffff"+
            "\1\6\2\uffff\2\6\2\uffff\1\6\6\uffff\6\6\75\uffff\1\6",
            "\145\6\1\uffff\11\6\1\uffff\116\6\1\uffff\22\6\1\uffff\14"+
            "\6\1\uffff\1\6\1\u00e7\11\uffff\4\6\5\uffff\4\6\1\u00e7\13\uffff"+
            "\1\6\2\uffff\2\6\2\uffff\1\6\6\uffff\6\6\75\uffff\1\6",
            "\1\6\u008b\uffff\1\u00e7\26\uffff\1\u00e7",
            "\145\6\1\uffff\11\6\1\uffff\116\6\1\uffff\22\6\1\uffff\14"+
            "\6\1\uffff\1\6\1\u00e7\11\uffff\4\6\5\uffff\4\6\1\u00e7\13\uffff"+
            "\1\6\2\uffff\2\6\2\uffff\1\6\6\uffff\6\6\75\uffff\1\6",
            "\145\6\1\uffff\11\6\1\uffff\116\6\1\uffff\22\6\1\uffff\14"+
            "\6\1\uffff\1\6\1\u00e7\11\uffff\4\6\5\uffff\4\6\1\u00e7\13\uffff"+
            "\1\6\2\uffff\2\6\2\uffff\1\6\6\uffff\6\6\75\uffff\1\6",
            "\145\6\1\uffff\11\6\1\uffff\116\6\1\uffff\22\6\1\uffff\14"+
            "\6\1\uffff\1\6\1\u00e7\11\uffff\4\6\5\uffff\4\6\1\u00e7\13\uffff"+
            "\1\6\2\uffff\2\6\2\uffff\1\6\6\uffff\6\6\75\uffff\1\6",
            "\145\6\1\uffff\11\6\1\uffff\116\6\1\uffff\22\6\1\uffff\14"+
            "\6\1\uffff\1\6\1\u00e7\11\uffff\4\6\5\uffff\4\6\1\u00e7\13\uffff"+
            "\1\6\2\uffff\2\6\2\uffff\1\6\6\uffff\6\6\75\uffff\1\6",
            "\145\6\1\uffff\11\6\1\uffff\116\6\1\uffff\22\6\1\uffff\14"+
            "\6\1\uffff\1\6\1\u00e7\11\uffff\4\6\5\uffff\4\6\1\u00e7\13\uffff"+
            "\1\6\2\uffff\2\6\2\uffff\1\6\6\uffff\6\6\75\uffff\1\6",
            "\145\6\1\uffff\11\6\1\uffff\116\6\1\uffff\22\6\1\uffff\14"+
            "\6\1\uffff\1\6\1\u00e7\11\uffff\4\6\5\uffff\4\6\1\u00e7\13\uffff"+
            "\1\6\2\uffff\2\6\2\uffff\1\6\6\uffff\6\6\75\uffff\1\6",
            "\145\6\1\uffff\11\6\1\uffff\116\6\1\uffff\22\6\1\uffff\14"+
            "\6\1\uffff\1\6\1\u00e7\11\uffff\4\6\5\uffff\4\6\1\u00e7\13\uffff"+
            "\1\6\2\uffff\2\6\2\uffff\1\6\6\uffff\6\6\75\uffff\1\6",
            "\145\6\1\uffff\11\6\1\uffff\116\6\1\uffff\22\6\1\uffff\14"+
            "\6\1\uffff\1\6\1\u00e7\11\uffff\4\6\5\uffff\4\6\1\u00e7\13\uffff"+
            "\1\6\2\uffff\2\6\2\uffff\1\6\6\uffff\6\6\75\uffff\1\6",
            "\145\6\1\uffff\11\6\1\uffff\116\6\1\uffff\22\6\1\uffff\14"+
            "\6\1\uffff\1\6\1\u00e7\11\uffff\4\6\5\uffff\4\6\1\u00e7\13\uffff"+
            "\1\6\2\uffff\2\6\2\uffff\1\6\6\uffff\6\6\75\uffff\1\6",
            "\1\6\3\uffff\1\6\142\uffff\1\6\1\u00e7\26\uffff\1\u00e7",
            "\1\6\62\uffff\1\6\1\u00e7\26\uffff\1\u00e7",
            "\145\6\1\uffff\11\6\1\uffff\116\6\1\uffff\22\6\1\uffff\14"+
            "\6\1\uffff\1\6\1\u00e7\11\uffff\4\6\5\uffff\4\6\1\u00e7\13\uffff"+
            "\1\6\2\uffff\2\6\2\uffff\1\6\6\uffff\6\6\75\uffff\1\6",
            "\1\6\u00d6\uffff\1\u00e7\26\uffff\1\u00e7",
            "\1\6\u00d6\uffff\1\u00e7\26\uffff\1\u00e7",
            "\1\6\u009d\uffff\1\u00e7\26\uffff\1\u00e7",
            "\1\6\1\u00e7\26\uffff\1\u00e7",
            "\145\6\1\uffff\11\6\1\uffff\116\6\1\uffff\22\6\1\uffff\14"+
            "\6\1\uffff\1\6\1\u00e7\11\uffff\4\6\5\uffff\4\6\1\u00e7\13\uffff"+
            "\1\6\2\uffff\2\6\2\uffff\1\6\6\uffff\6\6\75\uffff\1\6",
            "\1\6\150\uffff\1\6\10\uffff\1\6\5\uffff\1\6\141\uffff\1\6"+
            "\1\u00e7\26\uffff\1\u00e7",
            "\1\6\170\uffff\1\u00e7\26\uffff\1\u00e7",
            "\1\6\150\uffff\1\6\10\uffff\1\6\5\uffff\1\6\141\uffff\1\6"+
            "\1\u00e7\26\uffff\1\u00e7",
            "\1\6\15\uffff\1\6\10\uffff\1\6\20\uffff\1\6\13\uffff\1\6\7"+
            "\uffff\1\6\6\uffff\1\6\14\uffff\1\6\3\uffff\1\6\5\uffff\1\6"+
            "\167\uffff\1\u00e7\7\uffff\1\6\16\uffff\1\u00e7",
            "\1\6\15\uffff\1\6\10\uffff\1\6\20\uffff\1\6\13\uffff\1\6\7"+
            "\uffff\1\6\6\uffff\1\6\14\uffff\1\6\3\uffff\1\6\5\uffff\1\6"+
            "\167\uffff\1\u00e7\7\uffff\1\6\16\uffff\1\u00e7",
            "\1\6\14\uffff\1\6\u00aa\uffff\1\u00e7\26\uffff\1\u00e7",
            "\1\u00e7\26\uffff\1\u00e7\16\uffff\2\6",
            "\145\6\1\uffff\11\6\1\uffff\116\6\1\uffff\22\6\1\uffff\14"+
            "\6\1\uffff\1\6\1\u00e7\11\uffff\4\6\5\uffff\4\6\1\u00e7\13\uffff"+
            "\1\6\2\uffff\2\6\2\uffff\1\6\6\uffff\6\6\75\uffff\1\6",
            "\1\6\u0094\uffff\1\6\1\u00e7\26\uffff\1\u00e7",
            "\145\6\1\uffff\11\6\1\uffff\116\6\1\uffff\22\6\1\uffff\14"+
            "\6\1\uffff\1\6\1\u00e7\11\uffff\4\6\5\uffff\4\6\1\u00e7\13\uffff"+
            "\1\6\2\uffff\2\6\2\uffff\1\6\6\uffff\6\6\75\uffff\1\6",
            "\145\6\1\uffff\11\6\1\uffff\116\6\1\uffff\22\6\1\uffff\14"+
            "\6\1\uffff\1\6\1\u00e7\11\uffff\4\6\5\uffff\4\6\1\u00e7\13\uffff"+
            "\1\6\2\uffff\2\6\2\uffff\1\6\6\uffff\6\6\75\uffff\1\6",
            "\145\6\1\uffff\11\6\1\uffff\116\6\1\uffff\22\6\1\uffff\14"+
            "\6\1\uffff\1\6\1\u00e7\11\uffff\4\6\5\uffff\4\6\1\u00e7\13\uffff"+
            "\1\6\2\uffff\2\6\2\uffff\1\6\6\uffff\6\6\75\uffff\1\6",
            "\145\6\1\uffff\11\6\1\uffff\116\6\1\uffff\22\6\1\uffff\14"+
            "\6\1\uffff\1\6\1\u00e7\11\uffff\4\6\5\uffff\4\6\1\u00e7\13\uffff"+
            "\1\6\2\uffff\2\6\2\uffff\1\6\6\uffff\6\6\75\uffff\1\6",
            "\145\6\1\uffff\11\6\1\uffff\116\6\1\uffff\22\6\1\uffff\14"+
            "\6\1\uffff\1\6\1\u00e7\11\uffff\4\6\5\uffff\4\6\1\u00e7\13\uffff"+
            "\1\6\2\uffff\2\6\2\uffff\1\6\6\uffff\6\6\75\uffff\1\6",
            "\145\6\1\uffff\11\6\1\uffff\116\6\1\uffff\22\6\1\uffff\14"+
            "\6\1\uffff\1\6\1\u00e7\11\uffff\4\6\5\uffff\4\6\1\u00e7\13\uffff"+
            "\1\6\2\uffff\2\6\2\uffff\1\6\6\uffff\6\6\75\uffff\1\6",
            "\145\6\1\uffff\11\6\1\uffff\116\6\1\uffff\22\6\1\uffff\14"+
            "\6\1\uffff\1\6\1\u00e7\11\uffff\4\6\5\uffff\4\6\1\u00e7\13\uffff"+
            "\1\6\2\uffff\2\6\2\uffff\1\6\6\uffff\6\6\75\uffff\1\6",
            "\145\6\1\uffff\11\6\1\uffff\116\6\1\uffff\22\6\1\uffff\14"+
            "\6\1\uffff\1\6\1\u00e7\11\uffff\4\6\5\uffff\4\6\1\u00e7\13\uffff"+
            "\1\6\2\uffff\2\6\2\uffff\1\6\6\uffff\6\6\75\uffff\1\6",
            "\4\6\4\uffff\1\6\3\uffff\1\6\4\uffff\1\6\2\uffff\1\6\4\uffff"+
            "\2\6\2\uffff\1\6\5\uffff\1\6\1\uffff\1\6\1\uffff\1\6\7\uffff"+
            "\1\6\2\uffff\1\6\1\uffff\2\6\3\uffff\1\6\5\uffff\3\6\6\uffff"+
            "\2\6\5\uffff\1\6\14\uffff\1\6\3\uffff\1\6\4\uffff\2\6\7\uffff"+
            "\1\6\10\uffff\1\6\4\uffff\1\6\1\uffff\2\6\4\uffff\1\6\1\uffff"+
            "\1\6\7\uffff\1\6\5\uffff\3\6\3\uffff\1\6\1\uffff\1\6\6\uffff"+
            "\1\6\5\uffff\1\6\11\uffff\2\6\1\uffff\1\6\45\uffff\1\6\1\uffff"+
            "\1\u00e7\1\6\1\uffff\2\6\1\uffff\1\6\1\uffff\1\6\4\uffff\6\6"+
            "\4\uffff\1\u00e7\3\uffff\1\6",
            "\4\6\4\uffff\1\6\3\uffff\1\6\4\uffff\1\6\2\uffff\1\6\4\uffff"+
            "\2\6\2\uffff\1\6\5\uffff\1\6\1\uffff\1\6\1\uffff\1\6\7\uffff"+
            "\1\6\2\uffff\1\6\1\uffff\2\6\3\uffff\1\6\5\uffff\3\6\6\uffff"+
            "\2\6\5\uffff\1\6\14\uffff\1\6\3\uffff\1\6\4\uffff\2\6\7\uffff"+
            "\1\6\10\uffff\1\6\4\uffff\1\6\1\uffff\2\6\4\uffff\1\6\1\uffff"+
            "\1\6\7\uffff\1\6\5\uffff\3\6\22\uffff\1\6\14\uffff\1\6\45\uffff"+
            "\1\6\1\uffff\1\u00e7\1\6\1\uffff\2\6\1\uffff\1\6\1\uffff\1\6"+
            "\4\uffff\6\6\4\uffff\1\u00e7\3\uffff\1\6",
            "\4\6\4\uffff\1\6\3\uffff\1\6\4\uffff\1\6\2\uffff\1\6\4\uffff"+
            "\2\6\2\uffff\1\6\5\uffff\1\6\1\uffff\1\6\1\uffff\1\6\7\uffff"+
            "\1\6\2\uffff\1\6\1\uffff\2\6\3\uffff\1\6\5\uffff\3\6\6\uffff"+
            "\2\6\5\uffff\1\6\14\uffff\1\6\3\uffff\1\6\4\uffff\2\6\7\uffff"+
            "\1\6\10\uffff\1\6\4\uffff\1\6\1\uffff\2\6\4\uffff\1\6\1\uffff"+
            "\1\6\7\uffff\1\6\5\uffff\3\6\22\uffff\1\6\14\uffff\1\6\45\uffff"+
            "\1\6\1\uffff\1\u00e7\1\6\1\uffff\2\6\1\uffff\1\6\1\uffff\1\6"+
            "\4\uffff\6\6\4\uffff\1\u00e7\3\uffff\1\6",
            "\4\6\4\uffff\1\6\3\uffff\1\6\4\uffff\1\6\2\uffff\1\6\4\uffff"+
            "\2\6\2\uffff\1\6\5\uffff\1\6\1\uffff\1\6\1\uffff\1\6\7\uffff"+
            "\1\6\2\uffff\1\6\1\uffff\2\6\3\uffff\1\6\5\uffff\3\6\6\uffff"+
            "\2\6\5\uffff\1\6\14\uffff\1\6\3\uffff\1\6\4\uffff\2\6\7\uffff"+
            "\1\6\10\uffff\1\6\4\uffff\1\6\1\uffff\2\6\4\uffff\1\6\1\uffff"+
            "\1\6\7\uffff\1\6\5\uffff\3\6\22\uffff\1\6\14\uffff\1\6\45\uffff"+
            "\1\6\1\uffff\1\u00e7\1\6\1\uffff\2\6\1\uffff\1\6\1\uffff\1\6"+
            "\4\uffff\6\6\4\uffff\1\u00e7\3\uffff\1\6",
            "\145\6\1\uffff\11\6\1\uffff\116\6\1\uffff\22\6\1\uffff\14"+
            "\6\1\uffff\1\6\1\u00e7\11\uffff\1\6\2\uffff\1\6\5\uffff\4\6"+
            "\1\u00e7\13\uffff\1\6\2\uffff\2\6\2\uffff\1\6\7\uffff\5\6\75"+
            "\uffff\1\6",
            "\1\6\u00dc\uffff\1\u00e7",
            "\1\6\u00dc\uffff\1\u00e7",
            "\1\6\u00dc\uffff\1\u00e7",
            "\1\6\u00a0\uffff\1\u00e7",
            "\145\6\1\uffff\11\6\1\uffff\116\6\1\uffff\22\6\1\uffff\14"+
            "\6\1\uffff\1\6\1\u00e7\11\uffff\4\6\5\uffff\4\6\14\uffff\1\6"+
            "\2\uffff\2\6\2\uffff\1\6\6\uffff\6\6\75\uffff\1\6",
            "\145\6\1\uffff\11\6\1\uffff\116\6\1\uffff\22\6\1\uffff\14"+
            "\6\1\uffff\1\6\1\u00e7\11\uffff\4\6\5\uffff\4\6\14\uffff\1\6"+
            "\2\uffff\2\6\2\uffff\1\6\6\uffff\6\6\75\uffff\1\6",
            "\145\6\1\uffff\11\6\1\uffff\116\6\1\uffff\22\6\1\uffff\14"+
            "\6\1\uffff\1\6\1\u00e7\11\uffff\4\6\5\uffff\4\6\14\uffff\1\6"+
            "\2\uffff\2\6\2\uffff\1\6\6\uffff\6\6\75\uffff\1\6",
            "\145\6\1\uffff\11\6\1\uffff\116\6\1\uffff\22\6\1\uffff\14"+
            "\6\1\uffff\1\6\1\u00e7\11\uffff\4\6\5\uffff\4\6\14\uffff\1\6"+
            "\2\uffff\2\6\2\uffff\1\6\6\uffff\6\6\75\uffff\1\6",
            "\145\6\1\uffff\11\6\1\uffff\116\6\1\uffff\22\6\1\uffff\14"+
            "\6\1\uffff\1\6\1\u00e7\11\uffff\4\6\5\uffff\4\6\14\uffff\1\6"+
            "\2\uffff\2\6\2\uffff\1\6\6\uffff\6\6\75\uffff\1\6",
            "\145\6\1\uffff\11\6\1\uffff\116\6\1\uffff\22\6\1\uffff\14"+
            "\6\1\uffff\1\6\1\u00e7\11\uffff\4\6\5\uffff\4\6\14\uffff\1\6"+
            "\2\uffff\2\6\2\uffff\1\6\6\uffff\6\6\75\uffff\1\6",
            "\145\6\1\uffff\11\6\1\uffff\116\6\1\uffff\22\6\1\uffff\14"+
            "\6\1\uffff\1\6\1\u00e7\11\uffff\4\6\5\uffff\4\6\14\uffff\1\6"+
            "\2\uffff\2\6\2\uffff\1\6\6\uffff\6\6\75\uffff\1\6",
            "\1\6\u008b\uffff\1\u00e7",
            "\145\6\1\uffff\11\6\1\uffff\116\6\1\uffff\22\6\1\uffff\14"+
            "\6\1\uffff\1\6\1\u00e7\11\uffff\4\6\5\uffff\4\6\14\uffff\1\6"+
            "\2\uffff\2\6\2\uffff\1\6\6\uffff\6\6\75\uffff\1\6",
            "\145\6\1\uffff\11\6\1\uffff\116\6\1\uffff\22\6\1\uffff\14"+
            "\6\1\uffff\1\6\1\u00e7\11\uffff\4\6\5\uffff\4\6\14\uffff\1\6"+
            "\2\uffff\2\6\2\uffff\1\6\6\uffff\6\6\75\uffff\1\6",
            "\145\6\1\uffff\11\6\1\uffff\116\6\1\uffff\22\6\1\uffff\14"+
            "\6\1\uffff\1\6\1\u00e7\11\uffff\4\6\5\uffff\4\6\14\uffff\1\6"+
            "\2\uffff\2\6\2\uffff\1\6\6\uffff\6\6\75\uffff\1\6",
            "\145\6\1\uffff\11\6\1\uffff\116\6\1\uffff\22\6\1\uffff\14"+
            "\6\1\uffff\1\6\1\u00e7\11\uffff\4\6\5\uffff\4\6\14\uffff\1\6"+
            "\2\uffff\2\6\2\uffff\1\6\6\uffff\6\6\75\uffff\1\6",
            "\145\6\1\uffff\11\6\1\uffff\116\6\1\uffff\22\6\1\uffff\14"+
            "\6\1\uffff\1\6\1\u00e7\11\uffff\4\6\5\uffff\4\6\14\uffff\1\6"+
            "\2\uffff\2\6\2\uffff\1\6\6\uffff\6\6\75\uffff\1\6",
            "\145\6\1\uffff\11\6\1\uffff\116\6\1\uffff\22\6\1\uffff\14"+
            "\6\1\uffff\1\6\1\u00e7\11\uffff\4\6\5\uffff\4\6\14\uffff\1\6"+
            "\2\uffff\2\6\2\uffff\1\6\6\uffff\6\6\75\uffff\1\6",
            "\145\6\1\uffff\11\6\1\uffff\116\6\1\uffff\22\6\1\uffff\14"+
            "\6\1\uffff\1\6\1\u00e7\11\uffff\4\6\5\uffff\4\6\14\uffff\1\6"+
            "\2\uffff\2\6\2\uffff\1\6\6\uffff\6\6\75\uffff\1\6",
            "\145\6\1\uffff\11\6\1\uffff\116\6\1\uffff\22\6\1\uffff\14"+
            "\6\1\uffff\1\6\1\u00e7\11\uffff\4\6\5\uffff\4\6\14\uffff\1\6"+
            "\2\uffff\2\6\2\uffff\1\6\6\uffff\6\6\75\uffff\1\6",
            "\145\6\1\uffff\11\6\1\uffff\116\6\1\uffff\22\6\1\uffff\14"+
            "\6\1\uffff\1\6\1\u00e7\11\uffff\4\6\5\uffff\4\6\14\uffff\1\6"+
            "\2\uffff\2\6\2\uffff\1\6\6\uffff\6\6\75\uffff\1\6",
            "\1\6\3\uffff\1\6\142\uffff\1\6\1\u00e7",
            "\1\6\62\uffff\1\6\1\u00e7",
            "\145\6\1\uffff\11\6\1\uffff\116\6\1\uffff\22\6\1\uffff\14"+
            "\6\1\uffff\1\6\1\u00e7\11\uffff\4\6\5\uffff\4\6\14\uffff\1\6"+
            "\2\uffff\2\6\2\uffff\1\6\6\uffff\6\6\75\uffff\1\6",
            "\1\6\u00d6\uffff\1\u00e7",
            "\1\6\u00d6\uffff\1\u00e7",
            "\1\6\u009d\uffff\1\u00e7",
            "\1\6\1\u00e7",
            "\145\6\1\uffff\11\6\1\uffff\116\6\1\uffff\22\6\1\uffff\14"+
            "\6\1\uffff\1\6\1\u00e7\11\uffff\4\6\5\uffff\4\6\14\uffff\1\6"+
            "\2\uffff\2\6\2\uffff\1\6\6\uffff\6\6\75\uffff\1\6",
            "\1\6\150\uffff\1\6\10\uffff\1\6\5\uffff\1\6\141\uffff\1\6"+
            "\1\u00e7",
            "\1\6\170\uffff\1\u00e7",
            "\1\6\150\uffff\1\6\10\uffff\1\6\5\uffff\1\6\141\uffff\1\6"+
            "\1\u00e7",
            "\1\6\15\uffff\1\6\10\uffff\1\6\20\uffff\1\6\13\uffff\1\6\7"+
            "\uffff\1\6\6\uffff\1\6\14\uffff\1\6\3\uffff\1\6\5\uffff\1\6"+
            "\167\uffff\1\u00e7\7\uffff\1\6",
            "\1\6\15\uffff\1\6\10\uffff\1\6\20\uffff\1\6\13\uffff\1\6\7"+
            "\uffff\1\6\6\uffff\1\6\14\uffff\1\6\3\uffff\1\6\5\uffff\1\6"+
            "\167\uffff\1\u00e7\7\uffff\1\6",
            "\1\6\14\uffff\1\6\u00aa\uffff\1\u00e7",
            "\1\u00e7\45\uffff\2\6",
            "\145\6\1\uffff\11\6\1\uffff\116\6\1\uffff\22\6\1\uffff\14"+
            "\6\1\uffff\1\6\1\u00e7\11\uffff\4\6\5\uffff\4\6\14\uffff\1\6"+
            "\2\uffff\2\6\2\uffff\1\6\6\uffff\6\6\75\uffff\1\6",
            "\1\6\u0094\uffff\1\6\1\u00e7",
            "\145\6\1\uffff\11\6\1\uffff\116\6\1\uffff\22\6\1\uffff\14"+
            "\6\1\uffff\1\6\1\u00e7\11\uffff\4\6\5\uffff\4\6\14\uffff\1\6"+
            "\2\uffff\2\6\2\uffff\1\6\6\uffff\6\6\75\uffff\1\6",
            "\145\6\1\uffff\11\6\1\uffff\116\6\1\uffff\22\6\1\uffff\14"+
            "\6\1\uffff\1\6\1\u00e7\11\uffff\4\6\5\uffff\4\6\14\uffff\1\6"+
            "\2\uffff\2\6\2\uffff\1\6\6\uffff\6\6\75\uffff\1\6",
            "\145\6\1\uffff\11\6\1\uffff\116\6\1\uffff\22\6\1\uffff\14"+
            "\6\1\uffff\1\6\1\u00e7\11\uffff\4\6\5\uffff\4\6\14\uffff\1\6"+
            "\2\uffff\2\6\2\uffff\1\6\6\uffff\6\6\75\uffff\1\6",
            "\145\6\1\uffff\11\6\1\uffff\116\6\1\uffff\22\6\1\uffff\14"+
            "\6\1\uffff\1\6\1\u00e7\11\uffff\4\6\5\uffff\4\6\14\uffff\1\6"+
            "\2\uffff\2\6\2\uffff\1\6\6\uffff\6\6\75\uffff\1\6",
            "\145\6\1\uffff\11\6\1\uffff\116\6\1\uffff\22\6\1\uffff\14"+
            "\6\1\uffff\1\6\1\u00e7\11\uffff\4\6\5\uffff\4\6\14\uffff\1\6"+
            "\2\uffff\2\6\2\uffff\1\6\6\uffff\6\6\75\uffff\1\6",
            "\145\6\1\uffff\11\6\1\uffff\116\6\1\uffff\22\6\1\uffff\14"+
            "\6\1\uffff\1\6\1\u00e7\11\uffff\4\6\5\uffff\4\6\14\uffff\1\6"+
            "\2\uffff\2\6\2\uffff\1\6\6\uffff\6\6\75\uffff\1\6",
            "\145\6\1\uffff\11\6\1\uffff\116\6\1\uffff\22\6\1\uffff\14"+
            "\6\1\uffff\1\6\1\u00e7\11\uffff\4\6\5\uffff\4\6\14\uffff\1\6"+
            "\2\uffff\2\6\2\uffff\1\6\6\uffff\6\6\75\uffff\1\6",
            "\145\6\1\uffff\11\6\1\uffff\116\6\1\uffff\22\6\1\uffff\14"+
            "\6\1\uffff\1\6\1\u00e7\11\uffff\4\6\5\uffff\4\6\14\uffff\1\6"+
            "\2\uffff\2\6\2\uffff\1\6\6\uffff\6\6\75\uffff\1\6",
            "\4\6\4\uffff\1\6\3\uffff\1\6\4\uffff\1\6\2\uffff\1\6\4\uffff"+
            "\2\6\2\uffff\1\6\5\uffff\1\6\1\uffff\1\6\1\uffff\1\6\7\uffff"+
            "\1\6\2\uffff\1\6\1\uffff\2\6\3\uffff\1\6\5\uffff\3\6\6\uffff"+
            "\2\6\5\uffff\1\6\14\uffff\1\6\3\uffff\1\6\4\uffff\2\6\7\uffff"+
            "\1\6\10\uffff\1\6\4\uffff\1\6\1\uffff\2\6\4\uffff\1\6\1\uffff"+
            "\1\6\7\uffff\1\6\5\uffff\3\6\3\uffff\1\6\1\uffff\1\6\6\uffff"+
            "\1\6\5\uffff\1\6\11\uffff\2\6\1\uffff\1\6\45\uffff\1\6\1\uffff"+
            "\1\u00e7\1\6\1\uffff\2\6\1\uffff\1\6\1\uffff\1\6\4\uffff\6\6"+
            "\10\uffff\1\6",
            "\4\6\4\uffff\1\6\3\uffff\1\6\4\uffff\1\6\2\uffff\1\6\4\uffff"+
            "\2\6\2\uffff\1\6\5\uffff\1\6\1\uffff\1\6\1\uffff\1\6\7\uffff"+
            "\1\6\2\uffff\1\6\1\uffff\2\6\3\uffff\1\6\5\uffff\3\6\6\uffff"+
            "\2\6\5\uffff\1\6\14\uffff\1\6\3\uffff\1\6\4\uffff\2\6\7\uffff"+
            "\1\6\10\uffff\1\6\4\uffff\1\6\1\uffff\2\6\4\uffff\1\6\1\uffff"+
            "\1\6\7\uffff\1\6\5\uffff\3\6\22\uffff\1\6\14\uffff\1\6\45\uffff"+
            "\1\6\1\uffff\1\u00e7\1\6\1\uffff\2\6\1\uffff\1\6\1\uffff\1\6"+
            "\4\uffff\6\6\10\uffff\1\6",
            "\4\6\4\uffff\1\6\3\uffff\1\6\4\uffff\1\6\2\uffff\1\6\4\uffff"+
            "\2\6\2\uffff\1\6\5\uffff\1\6\1\uffff\1\6\1\uffff\1\6\7\uffff"+
            "\1\6\2\uffff\1\6\1\uffff\2\6\3\uffff\1\6\5\uffff\3\6\6\uffff"+
            "\2\6\5\uffff\1\6\14\uffff\1\6\3\uffff\1\6\4\uffff\2\6\7\uffff"+
            "\1\6\10\uffff\1\6\4\uffff\1\6\1\uffff\2\6\4\uffff\1\6\1\uffff"+
            "\1\6\7\uffff\1\6\5\uffff\3\6\22\uffff\1\6\14\uffff\1\6\45\uffff"+
            "\1\6\1\uffff\1\u00e7\1\6\1\uffff\2\6\1\uffff\1\6\1\uffff\1\6"+
            "\4\uffff\6\6\10\uffff\1\6",
            "\4\6\4\uffff\1\6\3\uffff\1\6\4\uffff\1\6\2\uffff\1\6\4\uffff"+
            "\2\6\2\uffff\1\6\5\uffff\1\6\1\uffff\1\6\1\uffff\1\6\7\uffff"+
            "\1\6\2\uffff\1\6\1\uffff\2\6\3\uffff\1\6\5\uffff\3\6\6\uffff"+
            "\2\6\5\uffff\1\6\14\uffff\1\6\3\uffff\1\6\4\uffff\2\6\7\uffff"+
            "\1\6\10\uffff\1\6\4\uffff\1\6\1\uffff\2\6\4\uffff\1\6\1\uffff"+
            "\1\6\7\uffff\1\6\5\uffff\3\6\22\uffff\1\6\14\uffff\1\6\45\uffff"+
            "\1\6\1\uffff\1\u00e7\1\6\1\uffff\2\6\1\uffff\1\6\1\uffff\1\6"+
            "\4\uffff\6\6\10\uffff\1\6",
            "\145\6\1\uffff\11\6\1\uffff\116\6\1\uffff\22\6\1\uffff\14"+
            "\6\1\uffff\1\6\1\u00e7\11\uffff\1\6\2\uffff\1\6\5\uffff\4\6"+
            "\14\uffff\1\6\2\uffff\2\6\2\uffff\1\6\7\uffff\5\6\75\uffff\1"+
            "\6",
            "\1\6\u00dc\uffff\1\u00e7",
            "\1\6\u00dc\uffff\1\u00e7",
            "\1\6\u00dc\uffff\1\u00e7",
            "\1\6\u00a0\uffff\1\u00e7",
            "\145\6\1\uffff\11\6\1\uffff\116\6\1\uffff\22\6\1\uffff\14"+
            "\6\1\uffff\1\6\1\u00e7\11\uffff\4\6\5\uffff\4\6\14\uffff\1\6"+
            "\2\uffff\2\6\2\uffff\1\6\6\uffff\6\6\75\uffff\1\6",
            "\145\6\1\uffff\11\6\1\uffff\116\6\1\uffff\22\6\1\uffff\14"+
            "\6\1\uffff\1\6\1\u00e7\11\uffff\4\6\5\uffff\4\6\14\uffff\1\6"+
            "\2\uffff\2\6\2\uffff\1\6\6\uffff\6\6\75\uffff\1\6",
            "\145\6\1\uffff\11\6\1\uffff\116\6\1\uffff\22\6\1\uffff\14"+
            "\6\1\uffff\1\6\1\u00e7\11\uffff\4\6\5\uffff\4\6\14\uffff\1\6"+
            "\2\uffff\2\6\2\uffff\1\6\6\uffff\6\6\75\uffff\1\6",
            "\145\6\1\uffff\11\6\1\uffff\116\6\1\uffff\22\6\1\uffff\14"+
            "\6\1\uffff\1\6\1\u00e7\11\uffff\4\6\5\uffff\4\6\14\uffff\1\6"+
            "\2\uffff\2\6\2\uffff\1\6\6\uffff\6\6\75\uffff\1\6",
            "\145\6\1\uffff\11\6\1\uffff\116\6\1\uffff\22\6\1\uffff\14"+
            "\6\1\uffff\1\6\1\u00e7\11\uffff\4\6\5\uffff\4\6\14\uffff\1\6"+
            "\2\uffff\2\6\2\uffff\1\6\6\uffff\6\6\75\uffff\1\6",
            "\145\6\1\uffff\11\6\1\uffff\116\6\1\uffff\22\6\1\uffff\14"+
            "\6\1\uffff\1\6\1\u00e7\11\uffff\4\6\5\uffff\4\6\14\uffff\1\6"+
            "\2\uffff\2\6\2\uffff\1\6\6\uffff\6\6\75\uffff\1\6",
            "\145\6\1\uffff\11\6\1\uffff\116\6\1\uffff\22\6\1\uffff\14"+
            "\6\1\uffff\1\6\1\u00e7\11\uffff\4\6\5\uffff\4\6\14\uffff\1\6"+
            "\2\uffff\2\6\2\uffff\1\6\6\uffff\6\6\75\uffff\1\6",
            "\1\6\u008b\uffff\1\u00e7",
            "\145\6\1\uffff\11\6\1\uffff\116\6\1\uffff\22\6\1\uffff\14"+
            "\6\1\uffff\1\6\1\u00e7\11\uffff\4\6\5\uffff\4\6\14\uffff\1\6"+
            "\2\uffff\2\6\2\uffff\1\6\6\uffff\6\6\75\uffff\1\6",
            "\145\6\1\uffff\11\6\1\uffff\116\6\1\uffff\22\6\1\uffff\14"+
            "\6\1\uffff\1\6\1\u00e7\11\uffff\4\6\5\uffff\4\6\14\uffff\1\6"+
            "\2\uffff\2\6\2\uffff\1\6\6\uffff\6\6\75\uffff\1\6",
            "\145\6\1\uffff\11\6\1\uffff\116\6\1\uffff\22\6\1\uffff\14"+
            "\6\1\uffff\1\6\1\u00e7\11\uffff\4\6\5\uffff\4\6\14\uffff\1\6"+
            "\2\uffff\2\6\2\uffff\1\6\6\uffff\6\6\75\uffff\1\6",
            "\145\6\1\uffff\11\6\1\uffff\116\6\1\uffff\22\6\1\uffff\14"+
            "\6\1\uffff\1\6\1\u00e7\11\uffff\4\6\5\uffff\4\6\14\uffff\1\6"+
            "\2\uffff\2\6\2\uffff\1\6\6\uffff\6\6\75\uffff\1\6",
            "\145\6\1\uffff\11\6\1\uffff\116\6\1\uffff\22\6\1\uffff\14"+
            "\6\1\uffff\1\6\1\u00e7\11\uffff\4\6\5\uffff\4\6\14\uffff\1\6"+
            "\2\uffff\2\6\2\uffff\1\6\6\uffff\6\6\75\uffff\1\6",
            "\145\6\1\uffff\11\6\1\uffff\116\6\1\uffff\22\6\1\uffff\14"+
            "\6\1\uffff\1\6\1\u00e7\11\uffff\4\6\5\uffff\4\6\14\uffff\1\6"+
            "\2\uffff\2\6\2\uffff\1\6\6\uffff\6\6\75\uffff\1\6",
            "\145\6\1\uffff\11\6\1\uffff\116\6\1\uffff\22\6\1\uffff\14"+
            "\6\1\uffff\1\6\1\u00e7\11\uffff\4\6\5\uffff\4\6\14\uffff\1\6"+
            "\2\uffff\2\6\2\uffff\1\6\6\uffff\6\6\75\uffff\1\6",
            "\145\6\1\uffff\11\6\1\uffff\116\6\1\uffff\22\6\1\uffff\14"+
            "\6\1\uffff\1\6\1\u00e7\11\uffff\4\6\5\uffff\4\6\14\uffff\1\6"+
            "\2\uffff\2\6\2\uffff\1\6\6\uffff\6\6\75\uffff\1\6",
            "\145\6\1\uffff\11\6\1\uffff\116\6\1\uffff\22\6\1\uffff\14"+
            "\6\1\uffff\1\6\1\u00e7\11\uffff\4\6\5\uffff\4\6\14\uffff\1\6"+
            "\2\uffff\2\6\2\uffff\1\6\6\uffff\6\6\75\uffff\1\6",
            "\1\6\3\uffff\1\6\142\uffff\1\6\1\u00e7",
            "\1\6\62\uffff\1\6\1\u00e7",
            "\145\6\1\uffff\11\6\1\uffff\116\6\1\uffff\22\6\1\uffff\14"+
            "\6\1\uffff\1\6\1\u00e7\11\uffff\4\6\5\uffff\4\6\14\uffff\1\6"+
            "\2\uffff\2\6\2\uffff\1\6\6\uffff\6\6\75\uffff\1\6",
            "\1\6\u00d6\uffff\1\u00e7",
            "\1\6\u00d6\uffff\1\u00e7",
            "\1\6\u009d\uffff\1\u00e7",
            "\1\6\1\u00e7",
            "\145\6\1\uffff\11\6\1\uffff\116\6\1\uffff\22\6\1\uffff\14"+
            "\6\1\uffff\1\6\1\u00e7\11\uffff\4\6\5\uffff\4\6\14\uffff\1\6"+
            "\2\uffff\2\6\2\uffff\1\6\6\uffff\6\6\75\uffff\1\6",
            "\1\6\150\uffff\1\6\10\uffff\1\6\5\uffff\1\6\141\uffff\1\6"+
            "\1\u00e7",
            "\1\6\170\uffff\1\u00e7",
            "\1\6\150\uffff\1\6\10\uffff\1\6\5\uffff\1\6\141\uffff\1\6"+
            "\1\u00e7",
            "\1\6\15\uffff\1\6\10\uffff\1\6\20\uffff\1\6\13\uffff\1\6\7"+
            "\uffff\1\6\6\uffff\1\6\14\uffff\1\6\3\uffff\1\6\5\uffff\1\6"+
            "\167\uffff\1\u00e7\7\uffff\1\6",
            "\1\6\15\uffff\1\6\10\uffff\1\6\20\uffff\1\6\13\uffff\1\6\7"+
            "\uffff\1\6\6\uffff\1\6\14\uffff\1\6\3\uffff\1\6\5\uffff\1\6"+
            "\167\uffff\1\u00e7\7\uffff\1\6",
            "\1\6\14\uffff\1\6\u00aa\uffff\1\u00e7",
            "\1\u00e7\45\uffff\2\6",
            "\145\6\1\uffff\11\6\1\uffff\116\6\1\uffff\22\6\1\uffff\14"+
            "\6\1\uffff\1\6\1\u00e7\11\uffff\4\6\5\uffff\4\6\14\uffff\1\6"+
            "\2\uffff\2\6\2\uffff\1\6\6\uffff\6\6\75\uffff\1\6",
            "\1\6\u0094\uffff\1\6\1\u00e7",
            "\145\6\1\uffff\11\6\1\uffff\116\6\1\uffff\22\6\1\uffff\14"+
            "\6\1\uffff\1\6\1\u00e7\11\uffff\4\6\5\uffff\4\6\14\uffff\1\6"+
            "\2\uffff\2\6\2\uffff\1\6\6\uffff\6\6\75\uffff\1\6",
            "\145\6\1\uffff\11\6\1\uffff\116\6\1\uffff\22\6\1\uffff\14"+
            "\6\1\uffff\1\6\1\u00e7\11\uffff\4\6\5\uffff\4\6\14\uffff\1\6"+
            "\2\uffff\2\6\2\uffff\1\6\6\uffff\6\6\75\uffff\1\6",
            "\145\6\1\uffff\11\6\1\uffff\116\6\1\uffff\22\6\1\uffff\14"+
            "\6\1\uffff\1\6\1\u00e7\11\uffff\4\6\5\uffff\4\6\14\uffff\1\6"+
            "\2\uffff\2\6\2\uffff\1\6\6\uffff\6\6\75\uffff\1\6",
            "\145\6\1\uffff\11\6\1\uffff\116\6\1\uffff\22\6\1\uffff\14"+
            "\6\1\uffff\1\6\1\u00e7\11\uffff\4\6\5\uffff\4\6\14\uffff\1\6"+
            "\2\uffff\2\6\2\uffff\1\6\6\uffff\6\6\75\uffff\1\6",
            "\145\6\1\uffff\11\6\1\uffff\116\6\1\uffff\22\6\1\uffff\14"+
            "\6\1\uffff\1\6\1\u00e7\11\uffff\4\6\5\uffff\4\6\14\uffff\1\6"+
            "\2\uffff\2\6\2\uffff\1\6\6\uffff\6\6\75\uffff\1\6",
            "\145\6\1\uffff\11\6\1\uffff\116\6\1\uffff\22\6\1\uffff\14"+
            "\6\1\uffff\1\6\1\u00e7\11\uffff\4\6\5\uffff\4\6\14\uffff\1\6"+
            "\2\uffff\2\6\2\uffff\1\6\6\uffff\6\6\75\uffff\1\6",
            "\145\6\1\uffff\11\6\1\uffff\116\6\1\uffff\22\6\1\uffff\14"+
            "\6\1\uffff\1\6\1\u00e7\11\uffff\4\6\5\uffff\4\6\14\uffff\1\6"+
            "\2\uffff\2\6\2\uffff\1\6\6\uffff\6\6\75\uffff\1\6",
            "\145\6\1\uffff\11\6\1\uffff\116\6\1\uffff\22\6\1\uffff\14"+
            "\6\1\uffff\1\6\1\u00e7\11\uffff\4\6\5\uffff\4\6\14\uffff\1\6"+
            "\2\uffff\2\6\2\uffff\1\6\6\uffff\6\6\75\uffff\1\6",
            "\4\6\4\uffff\1\6\3\uffff\1\6\4\uffff\1\6\2\uffff\1\6\4\uffff"+
            "\2\6\2\uffff\1\6\5\uffff\1\6\1\uffff\1\6\1\uffff\1\6\7\uffff"+
            "\1\6\2\uffff\1\6\1\uffff\2\6\3\uffff\1\6\5\uffff\3\6\6\uffff"+
            "\2\6\5\uffff\1\6\14\uffff\1\6\3\uffff\1\6\4\uffff\2\6\7\uffff"+
            "\1\6\10\uffff\1\6\4\uffff\1\6\1\uffff\2\6\4\uffff\1\6\1\uffff"+
            "\1\6\7\uffff\1\6\5\uffff\3\6\3\uffff\1\6\1\uffff\1\6\6\uffff"+
            "\1\6\5\uffff\1\6\11\uffff\2\6\1\uffff\1\6\45\uffff\1\6\1\uffff"+
            "\1\u00e7\1\6\1\uffff\2\6\1\uffff\1\6\1\uffff\1\6\4\uffff\6\6"+
            "\10\uffff\1\6",
            "\4\6\4\uffff\1\6\3\uffff\1\6\4\uffff\1\6\2\uffff\1\6\4\uffff"+
            "\2\6\2\uffff\1\6\5\uffff\1\6\1\uffff\1\6\1\uffff\1\6\7\uffff"+
            "\1\6\2\uffff\1\6\1\uffff\2\6\3\uffff\1\6\5\uffff\3\6\6\uffff"+
            "\2\6\5\uffff\1\6\14\uffff\1\6\3\uffff\1\6\4\uffff\2\6\7\uffff"+
            "\1\6\10\uffff\1\6\4\uffff\1\6\1\uffff\2\6\4\uffff\1\6\1\uffff"+
            "\1\6\7\uffff\1\6\5\uffff\3\6\22\uffff\1\6\14\uffff\1\6\45\uffff"+
            "\1\6\1\uffff\1\u00e7\1\6\1\uffff\2\6\1\uffff\1\6\1\uffff\1\6"+
            "\4\uffff\6\6\10\uffff\1\6",
            "\4\6\4\uffff\1\6\3\uffff\1\6\4\uffff\1\6\2\uffff\1\6\4\uffff"+
            "\2\6\2\uffff\1\6\5\uffff\1\6\1\uffff\1\6\1\uffff\1\6\7\uffff"+
            "\1\6\2\uffff\1\6\1\uffff\2\6\3\uffff\1\6\5\uffff\3\6\6\uffff"+
            "\2\6\5\uffff\1\6\14\uffff\1\6\3\uffff\1\6\4\uffff\2\6\7\uffff"+
            "\1\6\10\uffff\1\6\4\uffff\1\6\1\uffff\2\6\4\uffff\1\6\1\uffff"+
            "\1\6\7\uffff\1\6\5\uffff\3\6\22\uffff\1\6\14\uffff\1\6\45\uffff"+
            "\1\6\1\uffff\1\u00e7\1\6\1\uffff\2\6\1\uffff\1\6\1\uffff\1\6"+
            "\4\uffff\6\6\10\uffff\1\6",
            "\4\6\4\uffff\1\6\3\uffff\1\6\4\uffff\1\6\2\uffff\1\6\4\uffff"+
            "\2\6\2\uffff\1\6\5\uffff\1\6\1\uffff\1\6\1\uffff\1\6\7\uffff"+
            "\1\6\2\uffff\1\6\1\uffff\2\6\3\uffff\1\6\5\uffff\3\6\6\uffff"+
            "\2\6\5\uffff\1\6\14\uffff\1\6\3\uffff\1\6\4\uffff\2\6\7\uffff"+
            "\1\6\10\uffff\1\6\4\uffff\1\6\1\uffff\2\6\4\uffff\1\6\1\uffff"+
            "\1\6\7\uffff\1\6\5\uffff\3\6\22\uffff\1\6\14\uffff\1\6\45\uffff"+
            "\1\6\1\uffff\1\u00e7\1\6\1\uffff\2\6\1\uffff\1\6\1\uffff\1\6"+
            "\4\uffff\6\6\10\uffff\1\6",
            "\145\6\1\uffff\11\6\1\uffff\116\6\1\uffff\22\6\1\uffff\14"+
            "\6\1\uffff\1\6\1\u00e7\11\uffff\1\6\2\uffff\1\6\5\uffff\4\6"+
            "\14\uffff\1\6\2\uffff\2\6\2\uffff\1\6\7\uffff\5\6\75\uffff\1"+
            "\6",
            "",
            "",
            "\3\6\4\uffff\4\6\1\uffff\1\6\4\uffff\1\6\2\uffff\2\6\3\uffff"+
            "\2\6\2\uffff\1\6\1\uffff\1\6\3\uffff\1\6\1\uffff\1\6\1\uffff"+
            "\2\6\4\uffff\3\6\2\uffff\1\6\1\uffff\3\6\2\uffff\1\6\5\uffff"+
            "\2\6\7\uffff\2\6\5\uffff\1\6\4\uffff\2\6\1\uffff\1\6\4\uffff"+
            "\1\6\3\uffff\1\6\4\uffff\2\6\7\uffff\1\6\10\uffff\1\6\6\uffff"+
            "\2\6\4\uffff\1\6\1\uffff\1\6\7\uffff\1\6\2\uffff\1\6\24\uffff"+
            "\1\6\6\uffff\1\6\3\uffff\1\6\6\uffff\1\6\42\uffff\1\u00e7\1"+
            "\6\2\uffff\4\6\1\uffff\1\6\1\uffff\1\6\1\uffff\13\6\6\uffff"+
            "\2\6"
    };

    static final short[] DFA122_eot = DFA.unpackEncodedString(DFA122_eotS);
    static final short[] DFA122_eof = DFA.unpackEncodedString(DFA122_eofS);
    static final char[] DFA122_min = DFA.unpackEncodedStringToUnsignedChars(DFA122_minS);
    static final char[] DFA122_max = DFA.unpackEncodedStringToUnsignedChars(DFA122_maxS);
    static final short[] DFA122_accept = DFA.unpackEncodedString(DFA122_acceptS);
    static final short[] DFA122_special = DFA.unpackEncodedString(DFA122_specialS);
    static final short[][] DFA122_transition;

    static {
        int numStates = DFA122_transitionS.length;
        DFA122_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA122_transition[i] = DFA.unpackEncodedString(DFA122_transitionS[i]);
        }
    }

    class DFA122 extends DFA {

        public DFA122(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 122;
            this.eot = DFA122_eot;
            this.eof = DFA122_eof;
            this.min = DFA122_min;
            this.max = DFA122_max;
            this.accept = DFA122_accept;
            this.special = DFA122_special;
            this.transition = DFA122_transition;
        }
        public String getDescription() {
            return "717:1: p_StepExpr : ( p_AxisStep | p_FilterExpr );";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA122_23 = input.LA(1);

                         
                        int index122_23 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA122_23==COLON) ) {s = 25;}

                        else if ( (LA122_23==LBRACKET) && ((lc(MLS)))) {s = 230;}

                        else if ( (LA122_23==EOF||(LA122_23>=AND && LA122_23<=ASCENDING)||(LA122_23>=BY && LA122_23<=CASTABLE)||LA122_23==COLLATION||LA122_23==DEFAULT||(LA122_23>=DESCENDING && LA122_23<=DIV)||(LA122_23>=ELSE && LA122_23<=EMPTY)||LA122_23==EQ||LA122_23==EXCEPT||LA122_23==FOR||LA122_23==GE||(LA122_23>=GT && LA122_23<=IDIV)||(LA122_23>=INSTANCE && LA122_23<=IS)||LA122_23==LE||(LA122_23>=LET && LA122_23<=MOD)||LA122_23==NE||(LA122_23>=OR && LA122_23<=ORDER)||(LA122_23>=RETURN && LA122_23<=SATISFIES)||LA122_23==STABLE||(LA122_23>=TO && LA122_23<=TREAT)||LA122_23==UNION||LA122_23==WHERE||LA122_23==COUNT||(LA122_23>=END && LA122_23<=GROUP)||LA122_23==ONLY||LA122_23==START||(LA122_23>=AFTER && LA122_23<=BEFORE)||LA122_23==INTO||LA122_23==MODIFY||LA122_23==WITH||LA122_23==CONTAINS||LA122_23==PARAGRAPHS||LA122_23==SENTENCES||LA122_23==TIMES||LA122_23==WORDS||LA122_23==RPAREN||(LA122_23>=RBRACKET && LA122_23<=EQUAL)||LA122_23==NOTEQUAL||LA122_23==COMMA||(LA122_23>=STAR && LA122_23<=SLASH_SLASH)||(LA122_23>=SEMICOLON && LA122_23<=VBAR)) ) {s = 6;}

                        else if ( (LA122_23==LPAREN) ) {s = 231;}

                         
                        input.seek(index122_23);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 122, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static final String DFA124_eotS =
        "\12\uffff";
    static final String DFA124_eofS =
        "\1\uffff\7\10\2\uffff";
    static final String DFA124_minS =
        "\1\20\7\22\2\uffff";
    static final String DFA124_maxS =
        "\1\u0164\7\u010c\2\uffff";
    static final String DFA124_acceptS =
        "\10\uffff\1\2\1\1";
    static final String DFA124_specialS =
        "\12\uffff}>";
    static final String[] DFA124_transitionS = {
            "\6\10\1\3\6\10\1\1\6\10\1\2\1\5\15\10\1\7\1\6\52\10\1\4\25"+
            "\10\1\uffff\11\10\1\uffff\116\10\1\uffff\22\10\1\uffff\13\10"+
            "\15\uffff\1\10\30\uffff\1\10\6\uffff\1\10\111\uffff\1\10",
            "\3\10\4\uffff\4\10\1\uffff\1\10\4\uffff\1\10\2\uffff\2\10"+
            "\3\uffff\2\10\2\uffff\1\10\1\uffff\1\10\3\uffff\1\10\1\uffff"+
            "\1\10\1\uffff\2\10\4\uffff\3\10\2\uffff\1\10\1\uffff\3\10\2"+
            "\uffff\1\10\5\uffff\2\10\7\uffff\2\10\5\uffff\1\10\4\uffff\2"+
            "\10\1\uffff\1\10\4\uffff\1\10\3\uffff\1\10\4\uffff\2\10\7\uffff"+
            "\1\10\10\uffff\1\10\6\uffff\2\10\4\uffff\1\10\1\uffff\1\10\7"+
            "\uffff\1\10\2\uffff\1\10\24\uffff\1\10\6\uffff\1\10\3\uffff"+
            "\1\10\6\uffff\1\10\43\uffff\1\10\2\uffff\4\10\1\uffff\1\10\1"+
            "\uffff\1\10\1\uffff\13\10\2\uffff\1\10\1\11\2\uffff\2\10",
            "\3\10\4\uffff\4\10\1\uffff\1\10\4\uffff\1\10\2\uffff\2\10"+
            "\3\uffff\2\10\2\uffff\1\10\1\uffff\1\10\3\uffff\1\10\1\uffff"+
            "\1\10\1\uffff\2\10\4\uffff\3\10\2\uffff\1\10\1\uffff\3\10\2"+
            "\uffff\1\10\5\uffff\2\10\7\uffff\2\10\5\uffff\1\10\4\uffff\2"+
            "\10\1\uffff\1\10\4\uffff\1\10\3\uffff\1\10\4\uffff\2\10\7\uffff"+
            "\1\10\10\uffff\1\10\6\uffff\2\10\4\uffff\1\10\1\uffff\1\10\7"+
            "\uffff\1\10\2\uffff\1\10\24\uffff\1\10\6\uffff\1\10\3\uffff"+
            "\1\10\6\uffff\1\10\43\uffff\1\10\2\uffff\4\10\1\uffff\1\10\1"+
            "\uffff\1\10\1\uffff\13\10\2\uffff\1\10\1\11\2\uffff\2\10",
            "\3\10\4\uffff\4\10\1\uffff\1\10\4\uffff\1\10\2\uffff\2\10"+
            "\3\uffff\2\10\2\uffff\1\10\1\uffff\1\10\3\uffff\1\10\1\uffff"+
            "\1\10\1\uffff\2\10\4\uffff\3\10\2\uffff\1\10\1\uffff\3\10\2"+
            "\uffff\1\10\5\uffff\2\10\7\uffff\2\10\5\uffff\1\10\4\uffff\2"+
            "\10\1\uffff\1\10\4\uffff\1\10\3\uffff\1\10\4\uffff\2\10\7\uffff"+
            "\1\10\10\uffff\1\10\6\uffff\2\10\4\uffff\1\10\1\uffff\1\10\7"+
            "\uffff\1\10\2\uffff\1\10\24\uffff\1\10\6\uffff\1\10\3\uffff"+
            "\1\10\6\uffff\1\10\42\uffff\2\10\2\uffff\4\10\1\uffff\1\10\1"+
            "\uffff\1\10\1\uffff\13\10\2\uffff\1\10\1\11\2\uffff\2\10",
            "\3\10\4\uffff\4\10\1\uffff\1\10\4\uffff\1\10\2\uffff\2\10"+
            "\3\uffff\2\10\2\uffff\1\10\1\uffff\1\10\3\uffff\1\10\1\uffff"+
            "\1\10\1\uffff\2\10\4\uffff\3\10\2\uffff\1\10\1\uffff\3\10\2"+
            "\uffff\1\10\5\uffff\2\10\7\uffff\2\10\5\uffff\1\10\4\uffff\2"+
            "\10\1\uffff\1\10\4\uffff\1\10\3\uffff\1\10\4\uffff\2\10\7\uffff"+
            "\1\10\10\uffff\1\10\6\uffff\2\10\4\uffff\1\10\1\uffff\1\10\7"+
            "\uffff\1\10\2\uffff\1\10\24\uffff\1\10\6\uffff\1\10\3\uffff"+
            "\1\10\6\uffff\1\10\43\uffff\1\10\2\uffff\4\10\1\uffff\1\10\1"+
            "\uffff\1\10\1\uffff\13\10\2\uffff\1\10\1\11\2\uffff\2\10",
            "\3\10\4\uffff\4\10\1\uffff\1\10\4\uffff\1\10\2\uffff\2\10"+
            "\3\uffff\2\10\2\uffff\1\10\1\uffff\1\10\3\uffff\1\10\1\uffff"+
            "\1\10\1\uffff\2\10\4\uffff\3\10\2\uffff\1\10\1\uffff\3\10\2"+
            "\uffff\1\10\5\uffff\2\10\7\uffff\2\10\5\uffff\1\10\4\uffff\2"+
            "\10\1\uffff\1\10\4\uffff\1\10\3\uffff\1\10\4\uffff\2\10\7\uffff"+
            "\1\10\10\uffff\1\10\6\uffff\2\10\4\uffff\1\10\1\uffff\1\10\7"+
            "\uffff\1\10\2\uffff\1\10\24\uffff\1\10\6\uffff\1\10\3\uffff"+
            "\1\10\6\uffff\1\10\43\uffff\1\10\2\uffff\4\10\1\uffff\1\10\1"+
            "\uffff\1\10\1\uffff\13\10\2\uffff\1\10\1\11\2\uffff\2\10",
            "\3\10\4\uffff\4\10\1\uffff\1\10\4\uffff\1\10\2\uffff\2\10"+
            "\3\uffff\2\10\2\uffff\1\10\1\uffff\1\10\3\uffff\1\10\1\uffff"+
            "\1\10\1\uffff\2\10\4\uffff\3\10\2\uffff\1\10\1\uffff\3\10\2"+
            "\uffff\1\10\5\uffff\2\10\7\uffff\2\10\5\uffff\1\10\4\uffff\2"+
            "\10\1\uffff\1\10\4\uffff\1\10\3\uffff\1\10\4\uffff\2\10\7\uffff"+
            "\1\10\10\uffff\1\10\6\uffff\2\10\4\uffff\1\10\1\uffff\1\10\7"+
            "\uffff\1\10\2\uffff\1\10\24\uffff\1\10\6\uffff\1\10\3\uffff"+
            "\1\10\6\uffff\1\10\43\uffff\1\10\2\uffff\4\10\1\uffff\1\10\1"+
            "\uffff\1\10\1\uffff\13\10\2\uffff\1\10\1\11\2\uffff\2\10",
            "\3\10\4\uffff\4\10\1\uffff\1\10\4\uffff\1\10\2\uffff\2\10"+
            "\3\uffff\2\10\2\uffff\1\10\1\uffff\1\10\3\uffff\1\10\1\uffff"+
            "\1\10\1\uffff\2\10\4\uffff\3\10\2\uffff\1\10\1\uffff\3\10\2"+
            "\uffff\1\10\5\uffff\2\10\7\uffff\2\10\5\uffff\1\10\4\uffff\2"+
            "\10\1\uffff\1\10\4\uffff\1\10\3\uffff\1\10\4\uffff\2\10\7\uffff"+
            "\1\10\10\uffff\1\10\6\uffff\2\10\4\uffff\1\10\1\uffff\1\10\7"+
            "\uffff\1\10\2\uffff\1\10\24\uffff\1\10\6\uffff\1\10\3\uffff"+
            "\1\10\6\uffff\1\10\43\uffff\1\10\2\uffff\4\10\1\uffff\1\10\1"+
            "\uffff\1\10\1\uffff\13\10\2\uffff\1\10\1\11\2\uffff\2\10",
            "",
            ""
    };

    static final short[] DFA124_eot = DFA.unpackEncodedString(DFA124_eotS);
    static final short[] DFA124_eof = DFA.unpackEncodedString(DFA124_eofS);
    static final char[] DFA124_min = DFA.unpackEncodedStringToUnsignedChars(DFA124_minS);
    static final char[] DFA124_max = DFA.unpackEncodedStringToUnsignedChars(DFA124_maxS);
    static final short[] DFA124_accept = DFA.unpackEncodedString(DFA124_acceptS);
    static final short[] DFA124_special = DFA.unpackEncodedString(DFA124_specialS);
    static final short[][] DFA124_transition;

    static {
        int numStates = DFA124_transitionS.length;
        DFA124_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA124_transition[i] = DFA.unpackEncodedString(DFA124_transitionS[i]);
        }
    }

    class DFA124 extends DFA {

        public DFA124(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 124;
            this.eot = DFA124_eot;
            this.eof = DFA124_eof;
            this.min = DFA124_min;
            this.max = DFA124_max;
            this.accept = DFA124_accept;
            this.special = DFA124_special;
            this.transition = DFA124_transition;
        }
        public String getDescription() {
            return "728:1: p_ForwardStep : ( ( p_ForwardAxis p_NodeTest ) | p_AbbrevForwardStep );";
        }
    }
    static final String DFA129_eotS =
        "\15\uffff";
    static final String DFA129_eofS =
        "\1\uffff\12\13\2\uffff";
    static final String DFA129_minS =
        "\1\20\12\22\2\uffff";
    static final String DFA129_maxS =
        "\1\u0164\12\u010c\2\uffff";
    static final String DFA129_acceptS =
        "\13\uffff\1\2\1\1";
    static final String DFA129_specialS =
        "\15\uffff}>";
    static final String[] DFA129_transitionS = {
            "\6\13\1\3\10\13\1\10\11\13\1\1\1\2\43\13\1\12\12\13\1\7\3\13"+
            "\1\5\1\4\5\13\1\11\20\13\1\uffff\6\13\1\6\2\13\1\uffff\116\13"+
            "\1\uffff\22\13\1\uffff\13\13\15\uffff\1\13\37\uffff\1\13\111"+
            "\uffff\1\13",
            "\3\13\4\uffff\4\13\1\uffff\1\13\4\uffff\1\13\2\uffff\2\13"+
            "\3\uffff\2\13\2\uffff\1\13\1\uffff\1\13\3\uffff\1\13\1\uffff"+
            "\1\13\1\uffff\2\13\4\uffff\3\13\2\uffff\1\13\1\uffff\3\13\2"+
            "\uffff\1\13\5\uffff\2\13\7\uffff\2\13\5\uffff\1\13\4\uffff\2"+
            "\13\1\uffff\1\13\4\uffff\1\13\3\uffff\1\13\4\uffff\2\13\7\uffff"+
            "\1\13\10\uffff\1\13\6\uffff\2\13\4\uffff\1\13\1\uffff\1\13\7"+
            "\uffff\1\13\2\uffff\1\13\24\uffff\1\13\6\uffff\1\13\3\uffff"+
            "\1\13\6\uffff\1\13\42\uffff\1\14\1\13\2\uffff\4\13\1\uffff\1"+
            "\13\1\uffff\1\13\1\uffff\13\13\2\uffff\1\13\3\uffff\2\13",
            "\3\13\4\uffff\4\13\1\uffff\1\13\4\uffff\1\13\2\uffff\2\13"+
            "\3\uffff\2\13\2\uffff\1\13\1\uffff\1\13\3\uffff\1\13\1\uffff"+
            "\1\13\1\uffff\2\13\4\uffff\3\13\2\uffff\1\13\1\uffff\3\13\2"+
            "\uffff\1\13\5\uffff\2\13\7\uffff\2\13\5\uffff\1\13\4\uffff\2"+
            "\13\1\uffff\1\13\4\uffff\1\13\3\uffff\1\13\4\uffff\2\13\7\uffff"+
            "\1\13\10\uffff\1\13\6\uffff\2\13\4\uffff\1\13\1\uffff\1\13\7"+
            "\uffff\1\13\2\uffff\1\13\24\uffff\1\13\6\uffff\1\13\3\uffff"+
            "\1\13\6\uffff\1\13\42\uffff\1\14\1\13\2\uffff\4\13\1\uffff\1"+
            "\13\1\uffff\1\13\1\uffff\13\13\2\uffff\1\13\3\uffff\2\13",
            "\3\13\4\uffff\4\13\1\uffff\1\13\4\uffff\1\13\2\uffff\2\13"+
            "\3\uffff\2\13\2\uffff\1\13\1\uffff\1\13\3\uffff\1\13\1\uffff"+
            "\1\13\1\uffff\2\13\4\uffff\3\13\2\uffff\1\13\1\uffff\3\13\2"+
            "\uffff\1\13\5\uffff\2\13\7\uffff\2\13\5\uffff\1\13\4\uffff\2"+
            "\13\1\uffff\1\13\4\uffff\1\13\3\uffff\1\13\4\uffff\2\13\7\uffff"+
            "\1\13\10\uffff\1\13\6\uffff\2\13\4\uffff\1\13\1\uffff\1\13\7"+
            "\uffff\1\13\2\uffff\1\13\24\uffff\1\13\6\uffff\1\13\3\uffff"+
            "\1\13\6\uffff\1\13\42\uffff\1\14\1\13\2\uffff\4\13\1\uffff\1"+
            "\13\1\uffff\1\13\1\uffff\13\13\2\uffff\1\13\3\uffff\2\13",
            "\3\13\4\uffff\4\13\1\uffff\1\13\4\uffff\1\13\2\uffff\2\13"+
            "\3\uffff\2\13\2\uffff\1\13\1\uffff\1\13\3\uffff\1\13\1\uffff"+
            "\1\13\1\uffff\2\13\4\uffff\3\13\2\uffff\1\13\1\uffff\3\13\2"+
            "\uffff\1\13\5\uffff\2\13\7\uffff\2\13\5\uffff\1\13\4\uffff\2"+
            "\13\1\uffff\1\13\4\uffff\1\13\3\uffff\1\13\4\uffff\2\13\7\uffff"+
            "\1\13\10\uffff\1\13\6\uffff\2\13\4\uffff\1\13\1\uffff\1\13\7"+
            "\uffff\1\13\2\uffff\1\13\24\uffff\1\13\6\uffff\1\13\3\uffff"+
            "\1\13\6\uffff\1\13\42\uffff\1\14\1\13\2\uffff\4\13\1\uffff\1"+
            "\13\1\uffff\1\13\1\uffff\13\13\2\uffff\1\13\3\uffff\2\13",
            "\3\13\4\uffff\4\13\1\uffff\1\13\4\uffff\1\13\2\uffff\2\13"+
            "\3\uffff\2\13\2\uffff\1\13\1\uffff\1\13\3\uffff\1\13\1\uffff"+
            "\1\13\1\uffff\2\13\4\uffff\3\13\2\uffff\1\13\1\uffff\3\13\2"+
            "\uffff\1\13\5\uffff\2\13\7\uffff\2\13\5\uffff\1\13\4\uffff\2"+
            "\13\1\uffff\1\13\4\uffff\1\13\3\uffff\1\13\4\uffff\2\13\7\uffff"+
            "\1\13\10\uffff\1\13\6\uffff\2\13\4\uffff\1\13\1\uffff\1\13\7"+
            "\uffff\1\13\2\uffff\1\13\24\uffff\1\13\6\uffff\1\13\3\uffff"+
            "\1\13\6\uffff\1\13\42\uffff\1\14\1\13\2\uffff\4\13\1\uffff\1"+
            "\13\1\uffff\1\13\1\uffff\13\13\2\uffff\1\13\3\uffff\2\13",
            "\3\13\4\uffff\4\13\1\uffff\1\13\4\uffff\1\13\2\uffff\2\13"+
            "\3\uffff\2\13\2\uffff\1\13\1\uffff\1\13\3\uffff\1\13\1\uffff"+
            "\1\13\1\uffff\2\13\4\uffff\3\13\2\uffff\1\13\1\uffff\3\13\2"+
            "\uffff\1\13\5\uffff\2\13\7\uffff\2\13\5\uffff\1\13\4\uffff\2"+
            "\13\1\uffff\1\13\4\uffff\1\13\3\uffff\1\13\4\uffff\2\13\7\uffff"+
            "\1\13\10\uffff\1\13\6\uffff\2\13\4\uffff\1\13\1\uffff\1\13\7"+
            "\uffff\1\13\2\uffff\1\13\24\uffff\1\13\6\uffff\1\13\3\uffff"+
            "\1\13\6\uffff\1\13\42\uffff\1\14\1\13\2\uffff\4\13\1\uffff\1"+
            "\13\1\uffff\1\13\1\uffff\13\13\2\uffff\1\13\3\uffff\2\13",
            "\3\13\4\uffff\4\13\1\uffff\1\13\4\uffff\1\13\2\uffff\2\13"+
            "\3\uffff\2\13\2\uffff\1\13\1\uffff\1\13\3\uffff\1\13\1\uffff"+
            "\1\13\1\uffff\2\13\4\uffff\3\13\2\uffff\1\13\1\uffff\3\13\2"+
            "\uffff\1\13\5\uffff\2\13\7\uffff\2\13\5\uffff\1\13\4\uffff\2"+
            "\13\1\uffff\1\13\4\uffff\1\13\3\uffff\1\13\4\uffff\2\13\7\uffff"+
            "\1\13\10\uffff\1\13\6\uffff\2\13\4\uffff\1\13\1\uffff\1\13\7"+
            "\uffff\1\13\2\uffff\1\13\24\uffff\1\13\6\uffff\1\13\3\uffff"+
            "\1\13\6\uffff\1\13\42\uffff\1\14\1\13\2\uffff\4\13\1\uffff\1"+
            "\13\1\uffff\1\13\1\uffff\13\13\2\uffff\1\13\3\uffff\2\13",
            "\3\13\4\uffff\4\13\1\uffff\1\13\4\uffff\1\13\2\uffff\2\13"+
            "\3\uffff\2\13\2\uffff\1\13\1\uffff\1\13\3\uffff\1\13\1\uffff"+
            "\1\13\1\uffff\2\13\4\uffff\3\13\2\uffff\1\13\1\uffff\3\13\2"+
            "\uffff\1\13\5\uffff\2\13\7\uffff\2\13\5\uffff\1\13\4\uffff\2"+
            "\13\1\uffff\1\13\4\uffff\1\13\3\uffff\1\13\4\uffff\2\13\7\uffff"+
            "\1\13\10\uffff\1\13\6\uffff\2\13\4\uffff\1\13\1\uffff\1\13\7"+
            "\uffff\1\13\2\uffff\1\13\24\uffff\1\13\6\uffff\1\13\3\uffff"+
            "\1\13\6\uffff\1\13\42\uffff\1\14\1\13\2\uffff\4\13\1\uffff\1"+
            "\13\1\uffff\1\13\1\uffff\13\13\2\uffff\1\13\3\uffff\2\13",
            "\3\13\4\uffff\4\13\1\uffff\1\13\4\uffff\1\13\2\uffff\2\13"+
            "\3\uffff\2\13\2\uffff\1\13\1\uffff\1\13\3\uffff\1\13\1\uffff"+
            "\1\13\1\uffff\2\13\4\uffff\3\13\2\uffff\1\13\1\uffff\3\13\2"+
            "\uffff\1\13\5\uffff\2\13\7\uffff\2\13\5\uffff\1\13\4\uffff\2"+
            "\13\1\uffff\1\13\4\uffff\1\13\3\uffff\1\13\4\uffff\2\13\7\uffff"+
            "\1\13\10\uffff\1\13\6\uffff\2\13\4\uffff\1\13\1\uffff\1\13\7"+
            "\uffff\1\13\2\uffff\1\13\24\uffff\1\13\6\uffff\1\13\3\uffff"+
            "\1\13\6\uffff\1\13\42\uffff\1\14\1\13\2\uffff\4\13\1\uffff\1"+
            "\13\1\uffff\1\13\1\uffff\13\13\2\uffff\1\13\3\uffff\2\13",
            "\3\13\4\uffff\4\13\1\uffff\1\13\4\uffff\1\13\2\uffff\2\13"+
            "\3\uffff\2\13\2\uffff\1\13\1\uffff\1\13\3\uffff\1\13\1\uffff"+
            "\1\13\1\uffff\2\13\4\uffff\3\13\2\uffff\1\13\1\uffff\3\13\2"+
            "\uffff\1\13\5\uffff\2\13\7\uffff\2\13\5\uffff\1\13\4\uffff\2"+
            "\13\1\uffff\1\13\4\uffff\1\13\3\uffff\1\13\4\uffff\2\13\7\uffff"+
            "\1\13\10\uffff\1\13\6\uffff\2\13\4\uffff\1\13\1\uffff\1\13\7"+
            "\uffff\1\13\2\uffff\1\13\24\uffff\1\13\6\uffff\1\13\3\uffff"+
            "\1\13\6\uffff\1\13\42\uffff\1\14\1\13\2\uffff\4\13\1\uffff\1"+
            "\13\1\uffff\1\13\1\uffff\13\13\2\uffff\1\13\3\uffff\2\13",
            "",
            ""
    };

    static final short[] DFA129_eot = DFA.unpackEncodedString(DFA129_eotS);
    static final short[] DFA129_eof = DFA.unpackEncodedString(DFA129_eofS);
    static final char[] DFA129_min = DFA.unpackEncodedStringToUnsignedChars(DFA129_minS);
    static final char[] DFA129_max = DFA.unpackEncodedStringToUnsignedChars(DFA129_maxS);
    static final short[] DFA129_accept = DFA.unpackEncodedString(DFA129_acceptS);
    static final short[] DFA129_special = DFA.unpackEncodedString(DFA129_specialS);
    static final short[][] DFA129_transition;

    static {
        int numStates = DFA129_transitionS.length;
        DFA129_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA129_transition[i] = DFA.unpackEncodedString(DFA129_transitionS[i]);
        }
    }

    class DFA129 extends DFA {

        public DFA129(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 129;
            this.eot = DFA129_eot;
            this.eof = DFA129_eof;
            this.min = DFA129_min;
            this.max = DFA129_max;
            this.accept = DFA129_accept;
            this.special = DFA129_special;
            this.transition = DFA129_transition;
        }
        public String getDescription() {
            return "768:1: p_NodeTest : ( p_KindTest | p_NameTest );";
        }
    }
    static final String DFA134_eotS =
        "\17\uffff";
    static final String DFA134_eofS =
        "\17\uffff";
    static final String DFA134_minS =
        "\1\20\4\uffff\3\u00ed\1\uffff\1\20\1\u00ed\4\uffff";
    static final String DFA134_maxS =
        "\1\u0164\4\uffff\3\u0107\1\uffff\1\u0164\1\u0107\4\uffff";
    static final String DFA134_acceptS =
        "\1\uffff\1\1\1\2\1\3\1\4\3\uffff\1\10\2\uffff\1\5\1\6\1\7\1\10";
    static final String DFA134_specialS =
        "\12\uffff\1\0\4\uffff}>";
    static final String[] DFA134_transitionS = {
            "\6\13\1\10\10\13\1\10\10\13\1\7\1\uffff\1\10\2\13\1\uffff\15"+
            "\13\1\uffff\6\13\1\uffff\7\13\1\11\3\13\1\uffff\4\13\1\5\5\13"+
            "\1\10\3\13\2\uffff\5\13\1\10\3\13\1\uffff\1\13\1\6\12\13\1\uffff"+
            "\6\13\1\uffff\2\13\1\uffff\12\13\1\uffff\103\13\1\uffff\3\13"+
            "\1\uffff\16\13\1\uffff\7\13\1\12\3\13\1\3\1\uffff\1\2\15\uffff"+
            "\1\10\7\uffff\1\4\20\uffff\2\1\2\uffff\1\13\7\uffff\2\10\3\1"+
            "\75\uffff\1\13",
            "",
            "",
            "",
            "",
            "\1\13\2\uffff\1\14\26\uffff\1\13",
            "\1\13\2\uffff\1\15\26\uffff\1\13",
            "\1\13\2\uffff\1\10\26\uffff\1\13",
            "",
            "\145\10\1\uffff\11\10\1\uffff\116\10\1\uffff\22\10\1\uffff"+
            "\13\10\1\13\2\uffff\1\10\26\uffff\1\13\22\uffff\1\10\111\uffff"+
            "\1\10",
            "\1\13\2\uffff\1\16\26\uffff\1\13",
            "",
            "",
            "",
            ""
    };

    static final short[] DFA134_eot = DFA.unpackEncodedString(DFA134_eotS);
    static final short[] DFA134_eof = DFA.unpackEncodedString(DFA134_eofS);
    static final char[] DFA134_min = DFA.unpackEncodedStringToUnsignedChars(DFA134_minS);
    static final char[] DFA134_max = DFA.unpackEncodedStringToUnsignedChars(DFA134_maxS);
    static final short[] DFA134_accept = DFA.unpackEncodedString(DFA134_acceptS);
    static final short[] DFA134_special = DFA.unpackEncodedString(DFA134_specialS);
    static final short[][] DFA134_transition;

    static {
        int numStates = DFA134_transitionS.length;
        DFA134_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA134_transition[i] = DFA.unpackEncodedString(DFA134_transitionS[i]);
        }
    }

    class DFA134 extends DFA {

        public DFA134(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 134;
            this.eot = DFA134_eot;
            this.eof = DFA134_eof;
            this.min = DFA134_min;
            this.max = DFA134_max;
            this.accept = DFA134_accept;
            this.special = DFA134_special;
            this.transition = DFA134_transition;
        }
        public String getDescription() {
            return "799:1: p_PrimaryExpr : ( p_Literal | p_VarRef | p_ParenthesizedExpr | p_ContextItemExpr | p_FunctionCall | p_OrderedExpr | p_UnorderedExpr | p_Constructor );";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA134_10 = input.LA(1);

                         
                        int index134_10 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA134_10==LBRACKET) && ((lc(MLS)))) {s = 14;}

                        else if ( (LA134_10==LPAREN||LA134_10==COLON) ) {s = 11;}

                         
                        input.seek(index134_10);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 134, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static final String DFA164_eotS =
        "\104\uffff";
    static final String DFA164_eofS =
        "\1\2\103\uffff";
    static final String DFA164_minS =
        "\1\22\1\0\5\uffff\1\0\74\uffff";
    static final String DFA164_maxS =
        "\1\u010c\1\0\5\uffff\1\0\74\uffff";
    static final String DFA164_acceptS =
        "\2\uffff\1\2\10\uffff\1\1\70\uffff";
    static final String DFA164_specialS =
        "\1\0\1\1\5\uffff\1\2\74\uffff}>";
    static final String[] DFA164_transitionS = {
            "\4\2\4\uffff\1\2\3\uffff\1\2\4\uffff\1\2\2\uffff\2\2\3\uffff"+
            "\2\2\2\uffff\1\2\1\uffff\2\2\2\uffff\1\2\1\uffff\1\2\1\uffff"+
            "\2\2\2\uffff\1\2\1\uffff\3\2\2\uffff\1\2\1\uffff\3\2\2\uffff"+
            "\1\2\5\uffff\2\2\7\uffff\2\2\5\uffff\1\2\4\uffff\1\2\2\uffff"+
            "\1\2\4\uffff\1\2\3\uffff\1\2\4\uffff\2\2\7\uffff\1\2\10\uffff"+
            "\1\2\6\uffff\2\2\4\uffff\1\2\1\uffff\1\2\7\uffff\1\2\2\uffff"+
            "\1\2\24\uffff\1\2\3\uffff\1\2\2\uffff\1\2\3\uffff\1\2\6\uffff"+
            "\1\2\43\uffff\1\2\1\uffff\2\2\1\uffff\4\2\1\uffff\1\2\1\13\1"+
            "\1\1\7\7\2\10\uffff\2\2",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };

    static final short[] DFA164_eot = DFA.unpackEncodedString(DFA164_eotS);
    static final short[] DFA164_eof = DFA.unpackEncodedString(DFA164_eofS);
    static final char[] DFA164_min = DFA.unpackEncodedStringToUnsignedChars(DFA164_minS);
    static final char[] DFA164_max = DFA.unpackEncodedStringToUnsignedChars(DFA164_maxS);
    static final short[] DFA164_accept = DFA.unpackEncodedString(DFA164_acceptS);
    static final short[] DFA164_special = DFA.unpackEncodedString(DFA164_specialS);
    static final short[][] DFA164_transition;

    static {
        int numStates = DFA164_transitionS.length;
        DFA164_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA164_transition[i] = DFA.unpackEncodedString(DFA164_transitionS[i]);
        }
    }

    class DFA164 extends DFA {

        public DFA164(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 164;
            this.eot = DFA164_eot;
            this.eof = DFA164_eof;
            this.min = DFA164_min;
            this.max = DFA164_max;
            this.accept = DFA164_accept;
            this.special = DFA164_special;
            this.transition = DFA164_transition;
        }
        public String getDescription() {
            return "1059:25: ( ( p_OccurrenceIndicator )=>oi= p_OccurrenceIndicator )?";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA164_0 = input.LA(1);

                         
                        int index164_0 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA164_0==STAR) ) {s = 1;}

                        else if ( (LA164_0==EOF||(LA164_0>=AND && LA164_0<=AT)||LA164_0==CASE||LA164_0==COLLATION||LA164_0==DEFAULT||(LA164_0>=DESCENDING && LA164_0<=DIV)||(LA164_0>=ELSE && LA164_0<=EMPTY)||LA164_0==EQ||(LA164_0>=EXCEPT && LA164_0<=EXTERNAL)||LA164_0==FOR||LA164_0==GE||(LA164_0>=GT && LA164_0<=IDIV)||LA164_0==IN||(LA164_0>=INSTANCE && LA164_0<=IS)||LA164_0==LE||(LA164_0>=LET && LA164_0<=MOD)||LA164_0==NE||(LA164_0>=OR && LA164_0<=ORDER)||(LA164_0>=RETURN && LA164_0<=SATISFIES)||LA164_0==STABLE||LA164_0==TO||LA164_0==UNION||LA164_0==WHERE||LA164_0==COUNT||(LA164_0>=END && LA164_0<=GROUP)||LA164_0==ONLY||LA164_0==START||(LA164_0>=AFTER && LA164_0<=BEFORE)||LA164_0==INTO||LA164_0==MODIFY||LA164_0==WITH||LA164_0==CONTAINS||LA164_0==PARAGRAPHS||LA164_0==SCORE||LA164_0==SENTENCES||LA164_0==TIMES||LA164_0==WORDS||LA164_0==RPAREN||(LA164_0>=LBRACKET && LA164_0<=RBRACKET)||(LA164_0>=RSQUARE && LA164_0<=NOTEQUAL)||LA164_0==COMMA||(LA164_0>=MINUS && LA164_0<=GREATER_GREATER)||(LA164_0>=SEMICOLON && LA164_0<=VBAR)) ) {s = 2;}

                        else if ( (LA164_0==PLUS) ) {s = 7;}

                        else if ( (LA164_0==QUESTION) && (synpred3_XQueryParser())) {s = 11;}

                         
                        input.seek(index164_0);
                        if ( s>=0 ) return s;
                        break;
                    case 1 : 
                        int LA164_1 = input.LA(1);

                         
                        int index164_1 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred3_XQueryParser()) ) {s = 11;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index164_1);
                        if ( s>=0 ) return s;
                        break;
                    case 2 : 
                        int LA164_7 = input.LA(1);

                         
                        int index164_7 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred3_XQueryParser()) ) {s = 11;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index164_7);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 164, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static final String DFA166_eotS =
        "\21\uffff";
    static final String DFA166_eofS =
        "\1\uffff\14\15\4\uffff";
    static final String DFA166_minS =
        "\1\20\14\22\4\uffff";
    static final String DFA166_maxS =
        "\1\u0164\14\u010c\4\uffff";
    static final String DFA166_acceptS =
        "\15\uffff\1\4\1\1\1\2\1\3";
    static final String DFA166_specialS =
        "\13\uffff\1\0\5\uffff}>";
    static final String[] DFA166_transitionS = {
            "\6\15\1\3\10\15\1\10\11\15\1\1\1\2\27\15\1\14\13\15\1\12\12"+
            "\15\1\7\3\15\1\5\1\4\5\15\1\11\20\15\1\uffff\6\15\1\6\2\15\1"+
            "\uffff\116\15\1\uffff\22\15\1\uffff\7\15\1\13\3\15\55\uffff"+
            "\1\15\111\uffff\1\15",
            "\4\15\4\uffff\1\15\3\uffff\1\15\4\uffff\1\15\2\uffff\2\15"+
            "\3\uffff\2\15\2\uffff\1\15\1\uffff\2\15\2\uffff\1\15\1\uffff"+
            "\1\15\1\uffff\2\15\2\uffff\1\15\1\uffff\3\15\2\uffff\1\15\1"+
            "\uffff\3\15\2\uffff\1\15\5\uffff\2\15\7\uffff\2\15\5\uffff\1"+
            "\15\4\uffff\1\15\2\uffff\1\15\4\uffff\1\15\3\uffff\1\15\4\uffff"+
            "\2\15\7\uffff\1\15\10\uffff\1\15\6\uffff\2\15\4\uffff\1\15\1"+
            "\uffff\1\15\7\uffff\1\15\2\uffff\1\15\24\uffff\1\15\3\uffff"+
            "\1\15\2\uffff\1\15\3\uffff\1\15\6\uffff\1\15\42\uffff\1\16\1"+
            "\15\1\uffff\2\15\1\uffff\4\15\1\uffff\13\15\4\uffff\1\15\3\uffff"+
            "\2\15",
            "\4\15\4\uffff\1\15\3\uffff\1\15\4\uffff\1\15\2\uffff\2\15"+
            "\3\uffff\2\15\2\uffff\1\15\1\uffff\2\15\2\uffff\1\15\1\uffff"+
            "\1\15\1\uffff\2\15\2\uffff\1\15\1\uffff\3\15\2\uffff\1\15\1"+
            "\uffff\3\15\2\uffff\1\15\5\uffff\2\15\7\uffff\2\15\5\uffff\1"+
            "\15\4\uffff\1\15\2\uffff\1\15\4\uffff\1\15\3\uffff\1\15\4\uffff"+
            "\2\15\7\uffff\1\15\10\uffff\1\15\6\uffff\2\15\4\uffff\1\15\1"+
            "\uffff\1\15\7\uffff\1\15\2\uffff\1\15\24\uffff\1\15\3\uffff"+
            "\1\15\2\uffff\1\15\3\uffff\1\15\6\uffff\1\15\42\uffff\1\16\1"+
            "\15\1\uffff\2\15\1\uffff\4\15\1\uffff\13\15\4\uffff\1\15\3\uffff"+
            "\2\15",
            "\4\15\4\uffff\1\15\3\uffff\1\15\4\uffff\1\15\2\uffff\2\15"+
            "\3\uffff\2\15\2\uffff\1\15\1\uffff\2\15\2\uffff\1\15\1\uffff"+
            "\1\15\1\uffff\2\15\2\uffff\1\15\1\uffff\3\15\2\uffff\1\15\1"+
            "\uffff\3\15\2\uffff\1\15\5\uffff\2\15\7\uffff\2\15\5\uffff\1"+
            "\15\4\uffff\1\15\2\uffff\1\15\4\uffff\1\15\3\uffff\1\15\4\uffff"+
            "\2\15\7\uffff\1\15\10\uffff\1\15\6\uffff\2\15\4\uffff\1\15\1"+
            "\uffff\1\15\7\uffff\1\15\2\uffff\1\15\24\uffff\1\15\3\uffff"+
            "\1\15\2\uffff\1\15\3\uffff\1\15\6\uffff\1\15\42\uffff\1\16\1"+
            "\15\1\uffff\2\15\1\uffff\4\15\1\uffff\13\15\4\uffff\1\15\3\uffff"+
            "\2\15",
            "\4\15\4\uffff\1\15\3\uffff\1\15\4\uffff\1\15\2\uffff\2\15"+
            "\3\uffff\2\15\2\uffff\1\15\1\uffff\2\15\2\uffff\1\15\1\uffff"+
            "\1\15\1\uffff\2\15\2\uffff\1\15\1\uffff\3\15\2\uffff\1\15\1"+
            "\uffff\3\15\2\uffff\1\15\5\uffff\2\15\7\uffff\2\15\5\uffff\1"+
            "\15\4\uffff\1\15\2\uffff\1\15\4\uffff\1\15\3\uffff\1\15\4\uffff"+
            "\2\15\7\uffff\1\15\10\uffff\1\15\6\uffff\2\15\4\uffff\1\15\1"+
            "\uffff\1\15\7\uffff\1\15\2\uffff\1\15\24\uffff\1\15\3\uffff"+
            "\1\15\2\uffff\1\15\3\uffff\1\15\6\uffff\1\15\42\uffff\1\16\1"+
            "\15\1\uffff\2\15\1\uffff\4\15\1\uffff\13\15\4\uffff\1\15\3\uffff"+
            "\2\15",
            "\4\15\4\uffff\1\15\3\uffff\1\15\4\uffff\1\15\2\uffff\2\15"+
            "\3\uffff\2\15\2\uffff\1\15\1\uffff\2\15\2\uffff\1\15\1\uffff"+
            "\1\15\1\uffff\2\15\2\uffff\1\15\1\uffff\3\15\2\uffff\1\15\1"+
            "\uffff\3\15\2\uffff\1\15\5\uffff\2\15\7\uffff\2\15\5\uffff\1"+
            "\15\4\uffff\1\15\2\uffff\1\15\4\uffff\1\15\3\uffff\1\15\4\uffff"+
            "\2\15\7\uffff\1\15\10\uffff\1\15\6\uffff\2\15\4\uffff\1\15\1"+
            "\uffff\1\15\7\uffff\1\15\2\uffff\1\15\24\uffff\1\15\3\uffff"+
            "\1\15\2\uffff\1\15\3\uffff\1\15\6\uffff\1\15\42\uffff\1\16\1"+
            "\15\1\uffff\2\15\1\uffff\4\15\1\uffff\13\15\4\uffff\1\15\3\uffff"+
            "\2\15",
            "\4\15\4\uffff\1\15\3\uffff\1\15\4\uffff\1\15\2\uffff\2\15"+
            "\3\uffff\2\15\2\uffff\1\15\1\uffff\2\15\2\uffff\1\15\1\uffff"+
            "\1\15\1\uffff\2\15\2\uffff\1\15\1\uffff\3\15\2\uffff\1\15\1"+
            "\uffff\3\15\2\uffff\1\15\5\uffff\2\15\7\uffff\2\15\5\uffff\1"+
            "\15\4\uffff\1\15\2\uffff\1\15\4\uffff\1\15\3\uffff\1\15\4\uffff"+
            "\2\15\7\uffff\1\15\10\uffff\1\15\6\uffff\2\15\4\uffff\1\15\1"+
            "\uffff\1\15\7\uffff\1\15\2\uffff\1\15\24\uffff\1\15\3\uffff"+
            "\1\15\2\uffff\1\15\3\uffff\1\15\6\uffff\1\15\42\uffff\1\16\1"+
            "\15\1\uffff\2\15\1\uffff\4\15\1\uffff\13\15\4\uffff\1\15\3\uffff"+
            "\2\15",
            "\4\15\4\uffff\1\15\3\uffff\1\15\4\uffff\1\15\2\uffff\2\15"+
            "\3\uffff\2\15\2\uffff\1\15\1\uffff\2\15\2\uffff\1\15\1\uffff"+
            "\1\15\1\uffff\2\15\2\uffff\1\15\1\uffff\3\15\2\uffff\1\15\1"+
            "\uffff\3\15\2\uffff\1\15\5\uffff\2\15\7\uffff\2\15\5\uffff\1"+
            "\15\4\uffff\1\15\2\uffff\1\15\4\uffff\1\15\3\uffff\1\15\4\uffff"+
            "\2\15\7\uffff\1\15\10\uffff\1\15\6\uffff\2\15\4\uffff\1\15\1"+
            "\uffff\1\15\7\uffff\1\15\2\uffff\1\15\24\uffff\1\15\3\uffff"+
            "\1\15\2\uffff\1\15\3\uffff\1\15\6\uffff\1\15\42\uffff\1\16\1"+
            "\15\1\uffff\2\15\1\uffff\4\15\1\uffff\13\15\4\uffff\1\15\3\uffff"+
            "\2\15",
            "\4\15\4\uffff\1\15\3\uffff\1\15\4\uffff\1\15\2\uffff\2\15"+
            "\3\uffff\2\15\2\uffff\1\15\1\uffff\2\15\2\uffff\1\15\1\uffff"+
            "\1\15\1\uffff\2\15\2\uffff\1\15\1\uffff\3\15\2\uffff\1\15\1"+
            "\uffff\3\15\2\uffff\1\15\5\uffff\2\15\7\uffff\2\15\5\uffff\1"+
            "\15\4\uffff\1\15\2\uffff\1\15\4\uffff\1\15\3\uffff\1\15\4\uffff"+
            "\2\15\7\uffff\1\15\10\uffff\1\15\6\uffff\2\15\4\uffff\1\15\1"+
            "\uffff\1\15\7\uffff\1\15\2\uffff\1\15\24\uffff\1\15\3\uffff"+
            "\1\15\2\uffff\1\15\3\uffff\1\15\6\uffff\1\15\42\uffff\1\16\1"+
            "\15\1\uffff\2\15\1\uffff\4\15\1\uffff\13\15\4\uffff\1\15\3\uffff"+
            "\2\15",
            "\4\15\4\uffff\1\15\3\uffff\1\15\4\uffff\1\15\2\uffff\2\15"+
            "\3\uffff\2\15\2\uffff\1\15\1\uffff\2\15\2\uffff\1\15\1\uffff"+
            "\1\15\1\uffff\2\15\2\uffff\1\15\1\uffff\3\15\2\uffff\1\15\1"+
            "\uffff\3\15\2\uffff\1\15\5\uffff\2\15\7\uffff\2\15\5\uffff\1"+
            "\15\4\uffff\1\15\2\uffff\1\15\4\uffff\1\15\3\uffff\1\15\4\uffff"+
            "\2\15\7\uffff\1\15\10\uffff\1\15\6\uffff\2\15\4\uffff\1\15\1"+
            "\uffff\1\15\7\uffff\1\15\2\uffff\1\15\24\uffff\1\15\3\uffff"+
            "\1\15\2\uffff\1\15\3\uffff\1\15\6\uffff\1\15\42\uffff\1\16\1"+
            "\15\1\uffff\2\15\1\uffff\4\15\1\uffff\13\15\4\uffff\1\15\3\uffff"+
            "\2\15",
            "\4\15\4\uffff\1\15\3\uffff\1\15\4\uffff\1\15\2\uffff\2\15"+
            "\3\uffff\2\15\2\uffff\1\15\1\uffff\2\15\2\uffff\1\15\1\uffff"+
            "\1\15\1\uffff\2\15\2\uffff\1\15\1\uffff\3\15\2\uffff\1\15\1"+
            "\uffff\3\15\2\uffff\1\15\5\uffff\2\15\7\uffff\2\15\5\uffff\1"+
            "\15\4\uffff\1\15\2\uffff\1\15\4\uffff\1\15\3\uffff\1\15\4\uffff"+
            "\2\15\7\uffff\1\15\10\uffff\1\15\6\uffff\2\15\4\uffff\1\15\1"+
            "\uffff\1\15\7\uffff\1\15\2\uffff\1\15\24\uffff\1\15\3\uffff"+
            "\1\15\2\uffff\1\15\3\uffff\1\15\6\uffff\1\15\42\uffff\1\16\1"+
            "\15\1\uffff\2\15\1\uffff\4\15\1\uffff\13\15\4\uffff\1\15\3\uffff"+
            "\2\15",
            "\4\15\4\uffff\1\15\3\uffff\1\15\4\uffff\1\15\2\uffff\2\15"+
            "\3\uffff\2\15\2\uffff\1\15\1\uffff\2\15\2\uffff\1\15\1\uffff"+
            "\1\15\1\uffff\2\15\2\uffff\1\15\1\uffff\3\15\2\uffff\1\15\1"+
            "\uffff\3\15\2\uffff\1\15\5\uffff\2\15\7\uffff\2\15\5\uffff\1"+
            "\15\4\uffff\1\15\2\uffff\1\15\4\uffff\1\15\3\uffff\1\15\4\uffff"+
            "\2\15\7\uffff\1\15\10\uffff\1\15\6\uffff\2\15\4\uffff\1\15\1"+
            "\uffff\1\15\7\uffff\1\15\2\uffff\1\15\24\uffff\1\15\3\uffff"+
            "\1\15\2\uffff\1\15\3\uffff\1\15\6\uffff\1\15\42\uffff\1\17\1"+
            "\15\1\uffff\2\15\1\uffff\4\15\1\uffff\13\15\4\uffff\1\15\3\uffff"+
            "\2\15",
            "\4\15\4\uffff\1\15\3\uffff\1\15\4\uffff\1\15\2\uffff\2\15"+
            "\3\uffff\2\15\2\uffff\1\15\1\uffff\2\15\2\uffff\1\15\1\uffff"+
            "\1\15\1\uffff\2\15\2\uffff\1\15\1\uffff\3\15\2\uffff\1\15\1"+
            "\uffff\3\15\2\uffff\1\15\5\uffff\2\15\7\uffff\2\15\5\uffff\1"+
            "\15\4\uffff\1\15\2\uffff\1\15\4\uffff\1\15\3\uffff\1\15\4\uffff"+
            "\2\15\7\uffff\1\15\10\uffff\1\15\6\uffff\2\15\4\uffff\1\15\1"+
            "\uffff\1\15\7\uffff\1\15\2\uffff\1\15\24\uffff\1\15\3\uffff"+
            "\1\15\2\uffff\1\15\3\uffff\1\15\6\uffff\1\15\42\uffff\1\20\1"+
            "\15\1\uffff\2\15\1\uffff\4\15\1\uffff\13\15\4\uffff\1\15\3\uffff"+
            "\2\15",
            "",
            "",
            "",
            ""
    };

    static final short[] DFA166_eot = DFA.unpackEncodedString(DFA166_eotS);
    static final short[] DFA166_eof = DFA.unpackEncodedString(DFA166_eofS);
    static final char[] DFA166_min = DFA.unpackEncodedStringToUnsignedChars(DFA166_minS);
    static final char[] DFA166_max = DFA.unpackEncodedStringToUnsignedChars(DFA166_maxS);
    static final short[] DFA166_accept = DFA.unpackEncodedString(DFA166_acceptS);
    static final short[] DFA166_special = DFA.unpackEncodedString(DFA166_specialS);
    static final short[][] DFA166_transition;

    static {
        int numStates = DFA166_transitionS.length;
        DFA166_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA166_transition[i] = DFA.unpackEncodedString(DFA166_transitionS[i]);
        }
    }

    class DFA166 extends DFA {

        public DFA166(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 166;
            this.eot = DFA166_eot;
            this.eof = DFA166_eof;
            this.min = DFA166_min;
            this.max = DFA166_max;
            this.accept = DFA166_accept;
            this.special = DFA166_special;
            this.transition = DFA166_transition;
        }
        public String getDescription() {
            return "1069:1: p_ItemType : ( p_KindTest -> ^( KindTest p_KindTest ) | {...}? => ( BINARY LPAREN RPAREN ) -> ^( BinaryTest BINARY LPAREN RPAREN ) | ( ITEM LPAREN RPAREN ) -> ^( ItemTest ITEM LPAREN RPAREN ) | p_AtomicType );";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA166_11 = input.LA(1);

                         
                        int index166_11 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA166_11==LPAREN) && ((lc(MLS)))) {s = 15;}

                        else if ( (LA166_11==EOF||(LA166_11>=AND && LA166_11<=AT)||LA166_11==CASE||LA166_11==COLLATION||LA166_11==DEFAULT||(LA166_11>=DESCENDING && LA166_11<=DIV)||(LA166_11>=ELSE && LA166_11<=EMPTY)||LA166_11==EQ||(LA166_11>=EXCEPT && LA166_11<=EXTERNAL)||LA166_11==FOR||LA166_11==GE||(LA166_11>=GT && LA166_11<=IDIV)||LA166_11==IN||(LA166_11>=INSTANCE && LA166_11<=IS)||LA166_11==LE||(LA166_11>=LET && LA166_11<=MOD)||LA166_11==NE||(LA166_11>=OR && LA166_11<=ORDER)||(LA166_11>=RETURN && LA166_11<=SATISFIES)||LA166_11==STABLE||LA166_11==TO||LA166_11==UNION||LA166_11==WHERE||LA166_11==COUNT||(LA166_11>=END && LA166_11<=GROUP)||LA166_11==ONLY||LA166_11==START||(LA166_11>=AFTER && LA166_11<=BEFORE)||LA166_11==INTO||LA166_11==MODIFY||LA166_11==WITH||LA166_11==CONTAINS||LA166_11==PARAGRAPHS||LA166_11==SCORE||LA166_11==SENTENCES||LA166_11==TIMES||LA166_11==WORDS||LA166_11==RPAREN||(LA166_11>=LBRACKET && LA166_11<=RBRACKET)||(LA166_11>=RSQUARE && LA166_11<=NOTEQUAL)||(LA166_11>=COMMA && LA166_11<=GREATER_GREATER)||LA166_11==COLON||(LA166_11>=SEMICOLON && LA166_11<=VBAR)) ) {s = 13;}

                         
                        input.seek(index166_11);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 166, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static final String DFA199_eotS =
        "\12\uffff";
    static final String DFA199_eofS =
        "\12\uffff";
    static final String DFA199_minS =
        "\1\32\2\uffff\1\u00c0\6\uffff";
    static final String DFA199_maxS =
        "\1\u00c7\2\uffff\1\u00c7\6\uffff";
    static final String DFA199_acceptS =
        "\1\uffff\1\1\1\2\1\uffff\1\3\1\4\1\5\1\6\1\7\1\10";
    static final String DFA199_specialS =
        "\12\uffff}>";
    static final String[] DFA199_transitionS = {
            "\1\6\65\uffff\1\11\124\uffff\1\7\12\uffff\1\1\1\uffff\1\6\1"+
            "\uffff\1\3\13\uffff\1\5\1\10\1\4\1\uffff\1\6\2\uffff\1\2",
            "",
            "",
            "\1\5\1\10\1\4\4\uffff\1\2",
            "",
            "",
            "",
            "",
            "",
            ""
    };

    static final short[] DFA199_eot = DFA.unpackEncodedString(DFA199_eotS);
    static final short[] DFA199_eof = DFA.unpackEncodedString(DFA199_eofS);
    static final char[] DFA199_min = DFA.unpackEncodedStringToUnsignedChars(DFA199_minS);
    static final char[] DFA199_max = DFA.unpackEncodedStringToUnsignedChars(DFA199_maxS);
    static final short[] DFA199_accept = DFA.unpackEncodedString(DFA199_acceptS);
    static final short[] DFA199_special = DFA.unpackEncodedString(DFA199_specialS);
    static final short[][] DFA199_transition;

    static {
        int numStates = DFA199_transitionS.length;
        DFA199_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA199_transition[i] = DFA.unpackEncodedString(DFA199_transitionS[i]);
        }
    }

    class DFA199 extends DFA {

        public DFA199(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 199;
            this.eot = DFA199_eot;
            this.eof = DFA199_eof;
            this.min = DFA199_min;
            this.max = DFA199_max;
            this.accept = DFA199_accept;
            this.special = DFA199_special;
            this.transition = DFA199_transition;
        }
        public String getDescription() {
            return "1323:1: p_FTMatchOption : ( p_FTLanguageOption | p_FTWildCardOption | p_FTThesaurusOption | p_FTStemOption | p_FTCaseOption | p_FTDiacriticsOption | p_FTStopWordOption | p_FTExtensionOption );";
        }
    }
 

    public static final BitSet FOLLOW_p_VersionDecl_in_p_Module560 = new BitSet(new long[]{0x1000000400000000L,0x0000000000000200L});
    public static final BitSet FOLLOW_p_LibraryModule_in_p_Module595 = new BitSet(new long[]{0x0000000000000000L});
    public static final BitSet FOLLOW_p_MainModule_in_p_Module621 = new BitSet(new long[]{0x0000000000000000L});
    public static final BitSet FOLLOW_EOF_in_p_Module650 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_XQUERY_in_p_VersionDecl678 = new BitSet(new long[]{0x0000400000000000L,0x0000200000000000L});
    public static final BitSet FOLLOW_ENCODING_in_p_VersionDecl684 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000C00000L});
    public static final BitSet FOLLOW_p_StringLiteral_in_p_VersionDecl688 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000800L});
    public static final BitSet FOLLOW_VERSION_in_p_VersionDecl709 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000C00000L});
    public static final BitSet FOLLOW_p_StringLiteral_in_p_VersionDecl713 = new BitSet(new long[]{0x0000400000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000800L});
    public static final BitSet FOLLOW_ENCODING_in_p_VersionDecl720 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000C00000L});
    public static final BitSet FOLLOW_p_StringLiteral_in_p_VersionDecl724 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000800L});
    public static final BitSet FOLLOW_SEMICOLON_in_p_VersionDecl730 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_pm_Prolog_in_p_MainModule798 = new BitSet(new long[]{0xFFFFFFFFFFFF0000L,0x7FDFFFFFFFFFFFFFL,0xFFFFFFFFFFFFFFFFL,0x3C00BFFDFFFFBFFFL,0x0000007E04C80078L,0x0000001000000000L});
    public static final BitSet FOLLOW_p_QueryBody_in_p_MainModule800 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_p_ModuleDecl_in_p_LibraryModule856 = new BitSet(new long[]{0x1000000400000000L,0x0000000000000200L});
    public static final BitSet FOLLOW_pm_Prolog_in_p_LibraryModule858 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_MODULE_in_p_ModuleDecl914 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000400L});
    public static final BitSet FOLLOW_NAMESPACE_in_p_ModuleDecl918 = new BitSet(new long[]{0xFFFFFFFFFFFF0000L,0x7FDFFFFFFFFFFFFFL,0xFFFFFFFFFFFFFFFFL,0x00001FFDFFFFBFFFL,0x0000000004000000L,0x0000001000000000L});
    public static final BitSet FOLLOW_p_NCName_in_p_ModuleDecl920 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0010000000000000L});
    public static final BitSet FOLLOW_EQUAL_in_p_ModuleDecl922 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000C00000L});
    public static final BitSet FOLLOW_p_StringLiteral_in_p_ModuleDecl924 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000800L});
    public static final BitSet FOLLOW_SEMICOLON_in_p_ModuleDecl926 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_pm_DefaultNamespaceDecl_in_pm_Prolog987 = new BitSet(new long[]{0x1000000400000000L});
    public static final BitSet FOLLOW_p_Setter_in_pm_Prolog993 = new BitSet(new long[]{0x1000000400000000L});
    public static final BitSet FOLLOW_pm_NamespaceDecl_in_pm_Prolog999 = new BitSet(new long[]{0x1000000400000000L});
    public static final BitSet FOLLOW_p_Import_in_pm_Prolog1005 = new BitSet(new long[]{0x1000000400000000L});
    public static final BitSet FOLLOW_pm_FTOptionDecl_in_pm_Prolog1011 = new BitSet(new long[]{0x1000000400000000L});
    public static final BitSet FOLLOW_pg_OrderedDecl_in_pm_Prolog1018 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_pm_VarDecl_in_pg_OrderedDecl1336 = new BitSet(new long[]{0x0000000400000002L});
    public static final BitSet FOLLOW_pm_ContextItemDecl_in_pg_OrderedDecl1340 = new BitSet(new long[]{0x0000000400000002L});
    public static final BitSet FOLLOW_pm_FunctionDecl_in_pg_OrderedDecl1344 = new BitSet(new long[]{0x0000000400000002L});
    public static final BitSet FOLLOW_pm_OptionDecl_in_pg_OrderedDecl1348 = new BitSet(new long[]{0x0000000400000002L});
    public static final BitSet FOLLOW_p_CollectionDecl_in_pg_OrderedDecl1363 = new BitSet(new long[]{0x0000000400000002L});
    public static final BitSet FOLLOW_p_IndexDecl_in_pg_OrderedDecl1378 = new BitSet(new long[]{0x0000000400000002L});
    public static final BitSet FOLLOW_p_ICDecl_in_pg_OrderedDecl1393 = new BitSet(new long[]{0x0000000400000002L});
    public static final BitSet FOLLOW_pm_BoundarySpaceDecl_in_p_Setter1422 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_pm_DefaultCollationDecl_in_p_Setter1434 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_pm_BaseURIDecl_in_p_Setter1446 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_pm_ConstructionDecl_in_p_Setter1458 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_pm_OrderingModeDecl_in_p_Setter1470 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_pm_EmptyOrderDecl_in_p_Setter1482 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_pm_RevalidationDecl_in_p_Setter1497 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_pm_CopyNamespacesDecl_in_p_Setter1509 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_pm_SchemaImport_in_p_Import1535 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_pm_ModuleImport_in_p_Import1539 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_DECLARE_in_pm_NamespaceDecl1570 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000400L});
    public static final BitSet FOLLOW_NAMESPACE_in_pm_NamespaceDecl1574 = new BitSet(new long[]{0xFFFFFFFFFFFF0000L,0x7FDFFFFFFFFFFFFFL,0xFFFFFFFFFFFFFFFFL,0x00001FFDFFFFBFFFL,0x0000000004000000L,0x0000001000000000L});
    public static final BitSet FOLLOW_p_NCName_in_pm_NamespaceDecl1578 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0010000000000000L});
    public static final BitSet FOLLOW_EQUAL_in_pm_NamespaceDecl1580 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000C00000L});
    public static final BitSet FOLLOW_p_StringLiteral_in_pm_NamespaceDecl1584 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000800L});
    public static final BitSet FOLLOW_SEMICOLON_in_pm_NamespaceDecl1586 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_DECLARE_in_pm_BoundarySpaceDecl1651 = new BitSet(new long[]{0x0000000001000000L});
    public static final BitSet FOLLOW_BOUNDARY_SPACE_in_pm_BoundarySpaceDecl1655 = new BitSet(new long[]{0x0000000000000000L,0x0000000801000000L});
    public static final BitSet FOLLOW_PRESERVE_in_pm_BoundarySpaceDecl1660 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000800L});
    public static final BitSet FOLLOW_STRIP_in_pm_BoundarySpaceDecl1666 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000800L});
    public static final BitSet FOLLOW_SEMICOLON_in_pm_BoundarySpaceDecl1669 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_DECLARE_in_pm_DefaultNamespaceDecl1699 = new BitSet(new long[]{0x0000000800000000L});
    public static final BitSet FOLLOW_DEFAULT_in_pm_DefaultNamespaceDecl1703 = new BitSet(new long[]{0x0040040000000000L});
    public static final BitSet FOLLOW_ELEMENT_in_pm_DefaultNamespaceDecl1708 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000400L});
    public static final BitSet FOLLOW_FUNCTION_in_pm_DefaultNamespaceDecl1714 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000400L});
    public static final BitSet FOLLOW_NAMESPACE_in_pm_DefaultNamespaceDecl1719 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000C00000L});
    public static final BitSet FOLLOW_p_StringLiteral_in_pm_DefaultNamespaceDecl1721 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000800L});
    public static final BitSet FOLLOW_SEMICOLON_in_pm_DefaultNamespaceDecl1723 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_DECLARE_in_pm_OptionDecl1755 = new BitSet(new long[]{0x0000000000000000L,0x0000000000010000L});
    public static final BitSet FOLLOW_OPTION_in_pm_OptionDecl1759 = new BitSet(new long[]{0xFFFFFFFFFFFF0000L,0x7FDFFFFFFFFFFFFFL,0xFFFFFFFFFFFFFFFFL,0x00001FFDFFFFBFFFL,0x0000000004000000L,0x0000001000000000L});
    public static final BitSet FOLLOW_p_QName_in_pm_OptionDecl1761 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000C00000L});
    public static final BitSet FOLLOW_p_StringLiteral_in_pm_OptionDecl1763 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000800L});
    public static final BitSet FOLLOW_SEMICOLON_in_pm_OptionDecl1765 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_DECLARE_in_pm_OrderingModeDecl1797 = new BitSet(new long[]{0x0000000000000000L,0x0000000000100000L});
    public static final BitSet FOLLOW_ORDERING_in_pm_OrderingModeDecl1801 = new BitSet(new long[]{0x0000000000000000L,0x0000040000080000L});
    public static final BitSet FOLLOW_ORDERED_in_pm_OrderingModeDecl1806 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000800L});
    public static final BitSet FOLLOW_UNORDERED_in_pm_OrderingModeDecl1812 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000800L});
    public static final BitSet FOLLOW_SEMICOLON_in_pm_OrderingModeDecl1815 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_DECLARE_in_pm_EmptyOrderDecl1847 = new BitSet(new long[]{0x0000000800000000L});
    public static final BitSet FOLLOW_DEFAULT_in_pm_EmptyOrderDecl1851 = new BitSet(new long[]{0x0000000000000000L,0x0000000000040000L});
    public static final BitSet FOLLOW_ORDER_in_pm_EmptyOrderDecl1855 = new BitSet(new long[]{0x0000100000000000L});
    public static final BitSet FOLLOW_EMPTY_in_pm_EmptyOrderDecl1859 = new BitSet(new long[]{0x0100000000000000L,0x0000000000000020L});
    public static final BitSet FOLLOW_GREATEST_in_pm_EmptyOrderDecl1864 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000800L});
    public static final BitSet FOLLOW_LEAST_in_pm_EmptyOrderDecl1870 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000800L});
    public static final BitSet FOLLOW_SEMICOLON_in_pm_EmptyOrderDecl1873 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_DECLARE_in_pm_CopyNamespacesDecl1905 = new BitSet(new long[]{0x0000000200000000L});
    public static final BitSet FOLLOW_COPY_NAMESPACES_in_pm_CopyNamespacesDecl1909 = new BitSet(new long[]{0x0000000000000000L,0x0000000001002000L});
    public static final BitSet FOLLOW_p_PreserveMode_in_pm_CopyNamespacesDecl1911 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0100000000000000L});
    public static final BitSet FOLLOW_COMMA_in_pm_CopyNamespacesDecl1913 = new BitSet(new long[]{0x4000000000000000L,0x0000000000001000L});
    public static final BitSet FOLLOW_p_InheritMode_in_pm_CopyNamespacesDecl1915 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000800L});
    public static final BitSet FOLLOW_SEMICOLON_in_pm_CopyNamespacesDecl1917 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_DECLARE_in_p_DecimalFormatDecl1949 = new BitSet(new long[]{0x0000000800000000L,0x0008000000000000L});
    public static final BitSet FOLLOW_DECIMAL_FORMAT_in_p_DecimalFormatDecl1953 = new BitSet(new long[]{0xFFFFFFFFFFFF0000L,0x7FDFFFFFFFFFFFFFL,0xFFFFFFFFFFFFFFFFL,0x00001FFDFFFFBFFFL,0x0000000004000000L,0x0000001000000000L});
    public static final BitSet FOLLOW_p_QName_in_p_DecimalFormatDecl1955 = new BitSet(new long[]{0x0000000000000000L,0x2E50000000000000L,0x000000000000801CL});
    public static final BitSet FOLLOW_DEFAULT_in_p_DecimalFormatDecl1961 = new BitSet(new long[]{0x0000000000000000L,0x0008000000000000L});
    public static final BitSet FOLLOW_DECIMAL_FORMAT_in_p_DecimalFormatDecl1963 = new BitSet(new long[]{0x0000000000000000L,0x2E50000000000000L,0x000000000000801CL});
    public static final BitSet FOLLOW_p_DFPropertyName_in_p_DecimalFormatDecl1968 = new BitSet(new long[]{0x0000800000000000L});
    public static final BitSet FOLLOW_EQ_in_p_DecimalFormatDecl1971 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000C00000L});
    public static final BitSet FOLLOW_p_StringLiteral_in_p_DecimalFormatDecl1973 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000800L});
    public static final BitSet FOLLOW_SEMICOLON_in_p_DecimalFormatDecl1975 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_DECIMAL_SEPARATOR_in_p_DFPropertyName2005 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_GROUPING_SEPARATOR_in_p_DFPropertyName2011 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_INFINITY_in_p_DFPropertyName2017 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_MINUS_SIGN_in_p_DFPropertyName2023 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_NAN_in_p_DFPropertyName2029 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_PERCENT_in_p_DFPropertyName2035 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_PER_MILLE_in_p_DFPropertyName2041 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ZERO_DIGIT_in_p_DFPropertyName2047 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_DIGIT_in_p_DFPropertyName2053 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_PATTERN_SEPARATOR_in_p_DFPropertyName2059 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_PRESERVE_in_p_PreserveMode2092 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_NO_PRESERVE_in_p_PreserveMode2098 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_INHERIT_in_p_InheritMode2132 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_NO_INHERIT_in_p_InheritMode2138 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_DECLARE_in_pm_DefaultCollationDecl2179 = new BitSet(new long[]{0x0000000800000000L});
    public static final BitSet FOLLOW_DEFAULT_in_pm_DefaultCollationDecl2183 = new BitSet(new long[]{0x0000000040000000L});
    public static final BitSet FOLLOW_COLLATION_in_pm_DefaultCollationDecl2187 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000C00000L});
    public static final BitSet FOLLOW_p_StringLiteral_in_pm_DefaultCollationDecl2189 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000800L});
    public static final BitSet FOLLOW_SEMICOLON_in_pm_DefaultCollationDecl2191 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_DECLARE_in_pm_BaseURIDecl2231 = new BitSet(new long[]{0x0000000000800000L});
    public static final BitSet FOLLOW_BASE_URI_in_pm_BaseURIDecl2235 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000C00000L});
    public static final BitSet FOLLOW_p_StringLiteral_in_pm_BaseURIDecl2239 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000800L});
    public static final BitSet FOLLOW_SEMICOLON_in_pm_BaseURIDecl2241 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_IMPORT_in_pm_SchemaImport2296 = new BitSet(new long[]{0x0000000000000000L,0x0000000010000000L});
    public static final BitSet FOLLOW_SCHEMA_in_pm_SchemaImport2300 = new BitSet(new long[]{0x0000000800000000L,0x0000000000000400L,0x0000000000000000L,0x0000000000000000L,0x0000000000C00000L});
    public static final BitSet FOLLOW_p_SchemaPrefix_in_pm_SchemaImport2304 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000C00000L});
    public static final BitSet FOLLOW_p_StringLiteral_in_pm_SchemaImport2309 = new BitSet(new long[]{0x0000000000200000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000800L});
    public static final BitSet FOLLOW_AT_in_pm_SchemaImport2314 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000C00000L});
    public static final BitSet FOLLOW_p_StringLiteral_in_pm_SchemaImport2318 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0100000000000000L,0x0000000000000800L});
    public static final BitSet FOLLOW_COMMA_in_pm_SchemaImport2321 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000C00000L});
    public static final BitSet FOLLOW_p_StringLiteral_in_pm_SchemaImport2325 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0100000000000000L,0x0000000000000800L});
    public static final BitSet FOLLOW_SEMICOLON_in_pm_SchemaImport2331 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_NAMESPACE_in_p_SchemaPrefix2403 = new BitSet(new long[]{0xFFFFFFFFFFFF0000L,0x7FDFFFFFFFFFFFFFL,0xFFFFFFFFFFFFFFFFL,0x00001FFDFFFFBFFFL,0x0000000004000000L,0x0000001000000000L});
    public static final BitSet FOLLOW_p_NCName_in_p_SchemaPrefix2407 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0010000000000000L});
    public static final BitSet FOLLOW_EQUAL_in_p_SchemaPrefix2409 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_DEFAULT_in_p_SchemaPrefix2450 = new BitSet(new long[]{0x0000040000000000L});
    public static final BitSet FOLLOW_ELEMENT_in_p_SchemaPrefix2454 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000400L});
    public static final BitSet FOLLOW_NAMESPACE_in_p_SchemaPrefix2458 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_IMPORT_in_pm_ModuleImport2508 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000200L});
    public static final BitSet FOLLOW_MODULE_in_pm_ModuleImport2512 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000400L,0x0000000000000000L,0x0000000000000000L,0x0000000000C00000L});
    public static final BitSet FOLLOW_NAMESPACE_in_pm_ModuleImport2517 = new BitSet(new long[]{0xFFFFFFFFFFFF0000L,0x7FDFFFFFFFFFFFFFL,0xFFFFFFFFFFFFFFFFL,0x00001FFDFFFFBFFFL,0x0000000004000000L,0x0000001000000000L});
    public static final BitSet FOLLOW_p_NCName_in_pm_ModuleImport2521 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0010000000000000L});
    public static final BitSet FOLLOW_EQUAL_in_pm_ModuleImport2523 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000C00000L});
    public static final BitSet FOLLOW_p_StringLiteral_in_pm_ModuleImport2529 = new BitSet(new long[]{0x0000000000200000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000800L});
    public static final BitSet FOLLOW_AT_in_pm_ModuleImport2534 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000C00000L});
    public static final BitSet FOLLOW_p_StringLiteral_in_pm_ModuleImport2538 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0100000000000000L,0x0000000000000800L});
    public static final BitSet FOLLOW_COMMA_in_pm_ModuleImport2541 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000C00000L});
    public static final BitSet FOLLOW_p_StringLiteral_in_pm_ModuleImport2545 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0100000000000000L,0x0000000000000800L});
    public static final BitSet FOLLOW_SEMICOLON_in_pm_ModuleImport2551 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_DECLARE_in_pm_FTOptionDecl2622 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000080000000000L});
    public static final BitSet FOLLOW_FT_OPTION_in_pm_FTOptionDecl2626 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000020L});
    public static final BitSet FOLLOW_p_FTMatchOptions_in_pm_FTOptionDecl2628 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000800L});
    public static final BitSet FOLLOW_SEMICOLON_in_pm_FTOptionDecl2630 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_DECLARE_in_pm_VarDecl2664 = new BitSet(new long[]{0x0000000000000000L,0x0000100000000000L,0x0000000000000020L,0x0000000000001000L});
    public static final BitSet FOLLOW_pg_PrivateVarOption_in_pm_VarDecl2666 = new BitSet(new long[]{0x0000000000000000L,0x0000100000000000L,0x0000000000000020L,0x0000000000001000L});
    public static final BitSet FOLLOW_pg_VarDeclType_in_pm_VarDecl2670 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000800000000000L});
    public static final BitSet FOLLOW_DOLLAR_in_pm_VarDecl2672 = new BitSet(new long[]{0xFFFFFFFFFFFF0000L,0x7FDFFFFFFFFFFFFFL,0xFFFFFFFFFFFFFFFFL,0x00001FFDFFFFBFFFL,0x0000000004000000L,0x0000001000000000L});
    public static final BitSet FOLLOW_p_QName_in_pm_VarDecl2676 = new BitSet(new long[]{0x0004000000080000L,0x0000000000000000L,0x0000000000000000L,0x0020000000000000L});
    public static final BitSet FOLLOW_p_TypeDeclaration_in_pm_VarDecl2680 = new BitSet(new long[]{0x0004000000000000L,0x0000000000000000L,0x0000000000000000L,0x0020000000000000L});
    public static final BitSet FOLLOW_BIND_in_pm_VarDecl2685 = new BitSet(new long[]{0xFFFFFFFFFFFF0000L,0x7FDFFFFFFFFFFFFFL,0xFFFFFFFFFFFFFFFFL,0x3C00BFFDFFFFBFFFL,0x0000007E04C80078L,0x0000001000000000L});
    public static final BitSet FOLLOW_p_ExprSingle_in_pm_VarDecl2689 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000800L});
    public static final BitSet FOLLOW_EXTERNAL_in_pm_VarDecl2697 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0020000000000000L,0x0000000000000800L});
    public static final BitSet FOLLOW_BIND_in_pm_VarDecl2700 = new BitSet(new long[]{0xFFFFFFFFFFFF0000L,0x7FDFFFFFFFFFFFFFL,0xFFFFFFFFFFFFFFFFL,0x3C00BFFDFFFFBFFFL,0x0000007E04C80078L,0x0000001000000000L});
    public static final BitSet FOLLOW_p_ExprSingle_in_pm_VarDecl2704 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000800L});
    public static final BitSet FOLLOW_SEMICOLON_in_pm_VarDecl2710 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_CONSTANT_in_pg_VarDeclType2798 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_VARIABLE_in_pg_VarDeclType2834 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_PRIVATE_in_pg_PrivateVarOption2890 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_DECLARE_in_pm_ContextItemDecl2941 = new BitSet(new long[]{0x0000000000000000L,0x0002000000000000L});
    public static final BitSet FOLLOW_CONTEXT_in_pm_ContextItemDecl2945 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000004L});
    public static final BitSet FOLLOW_ITEM_in_pm_ContextItemDecl2949 = new BitSet(new long[]{0x0004000000080000L,0x0000000000000000L,0x0000000000000000L,0x0020000000000000L});
    public static final BitSet FOLLOW_AS_in_pm_ContextItemDecl2954 = new BitSet(new long[]{0xFFFFFFFFFFFF0000L,0x7FDFFFFFFFFFFFFFL,0xFFFFFFFFFFFFFFFFL,0x00001FFDFFFFBFFFL,0x0000000004000000L,0x0000001000000000L});
    public static final BitSet FOLLOW_p_ItemType_in_pm_ContextItemDecl2956 = new BitSet(new long[]{0x0004000000000000L,0x0000000000000000L,0x0000000000000000L,0x0020000000000000L});
    public static final BitSet FOLLOW_BIND_in_pm_ContextItemDecl2962 = new BitSet(new long[]{0xFFFFFFFFFFFF0000L,0x7FDFFFFFFFFFFFFFL,0xFFFFFFFFFFFFFFFFL,0x3C00BFFDFFFFBFFFL,0x0000007E04C80078L,0x0000001000000000L});
    public static final BitSet FOLLOW_p_ExprSingle_in_pm_ContextItemDecl2964 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000800L});
    public static final BitSet FOLLOW_EXTERNAL_in_pm_ContextItemDecl2972 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0020000000000000L,0x0000000000000800L});
    public static final BitSet FOLLOW_BIND_in_pm_ContextItemDecl2975 = new BitSet(new long[]{0xFFFFFFFFFFFF0000L,0x7FDFFFFFFFFFFFFFL,0xFFFFFFFFFFFFFFFFL,0x3C00BFFDFFFFBFFFL,0x0000007E04C80078L,0x0000001000000000L});
    public static final BitSet FOLLOW_p_ExprSingle_in_pm_ContextItemDecl2977 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000800L});
    public static final BitSet FOLLOW_SEMICOLON_in_pm_ContextItemDecl2983 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_DECLARE_in_pm_ConstructionDecl3018 = new BitSet(new long[]{0x0000000100000000L});
    public static final BitSet FOLLOW_CONSTRUCTION_in_pm_ConstructionDecl3022 = new BitSet(new long[]{0x0000000000000000L,0x0000000801000000L});
    public static final BitSet FOLLOW_STRIP_in_pm_ConstructionDecl3027 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000800L});
    public static final BitSet FOLLOW_PRESERVE_in_pm_ConstructionDecl3033 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000800L});
    public static final BitSet FOLLOW_SEMICOLON_in_pm_ConstructionDecl3036 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_DECLARE_in_pm_FunctionDecl3073 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000008000L});
    public static final BitSet FOLLOW_SEQUENTIAL_in_pm_FunctionDecl3077 = new BitSet(new long[]{0x0040000000000000L});
    public static final BitSet FOLLOW_FUNCTION_in_pm_FunctionDecl3081 = new BitSet(new long[]{0xFFFFFFFFFFFF0000L,0x7FDFFFFFFFFFFFFFL,0xFFFFFFFFFFFFFFFFL,0x00001FFDFFFFBFFFL,0x0000000004000000L,0x0000001000000000L});
    public static final BitSet FOLLOW_p_QName_in_pm_FunctionDecl3085 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000200000000000L});
    public static final BitSet FOLLOW_LPAREN_in_pm_FunctionDecl3087 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000C00000000000L});
    public static final BitSet FOLLOW_p_ParamList_in_pm_FunctionDecl3091 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000400000000000L});
    public static final BitSet FOLLOW_RPAREN_in_pm_FunctionDecl3094 = new BitSet(new long[]{0x0004000000080000L,0x0000000000000000L,0x0000000000000000L,0x0001000000000000L});
    public static final BitSet FOLLOW_p_TypeDeclaration_in_pm_FunctionDecl3098 = new BitSet(new long[]{0x0004000000000000L,0x0000000000000000L,0x0000000000000000L,0x0001000000000000L});
    public static final BitSet FOLLOW_p_Block_in_pm_FunctionDecl3104 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000800L});
    public static final BitSet FOLLOW_EXTERNAL_in_pm_FunctionDecl3110 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000800L});
    public static final BitSet FOLLOW_SEMICOLON_in_pm_FunctionDecl3113 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_DECLARE_in_pm_FunctionDecl3176 = new BitSet(new long[]{0x0040000000000000L,0x8020000000000000L,0x0000000040000060L,0x0000000000020000L});
    public static final BitSet FOLLOW_p_FunctionOption_in_pm_FunctionDecl3178 = new BitSet(new long[]{0x0040000000000000L,0x0000000000000000L,0x0000000040000000L,0x0000000000020000L});
    public static final BitSet FOLLOW_p_FunctionType_in_pm_FunctionDecl3180 = new BitSet(new long[]{0x0040000000000000L});
    public static final BitSet FOLLOW_FUNCTION_in_pm_FunctionDecl3184 = new BitSet(new long[]{0xFFFFFFFFFFFF0000L,0x7FDFFFFFFFFFFFFFL,0xFFFFFFFFFFFFFFFFL,0x00001FFDFFFFBFFFL,0x0000000004000000L,0x0000001000000000L});
    public static final BitSet FOLLOW_p_QName_in_pm_FunctionDecl3188 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000200000000000L});
    public static final BitSet FOLLOW_LPAREN_in_pm_FunctionDecl3190 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000C00000000000L});
    public static final BitSet FOLLOW_p_ParamList_in_pm_FunctionDecl3194 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000400000000000L});
    public static final BitSet FOLLOW_RPAREN_in_pm_FunctionDecl3197 = new BitSet(new long[]{0x0004000000080000L,0x0000000000000000L,0x0000000000000000L,0x0001000000000000L});
    public static final BitSet FOLLOW_p_TypeDeclaration_in_pm_FunctionDecl3201 = new BitSet(new long[]{0x0004000000000000L,0x0000000000000000L,0x0000000000000000L,0x0001000000000000L});
    public static final BitSet FOLLOW_p_EnclosedExpr_in_pm_FunctionDecl3207 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000800L});
    public static final BitSet FOLLOW_EXTERNAL_in_pm_FunctionDecl3213 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000800L});
    public static final BitSet FOLLOW_SEMICOLON_in_pm_FunctionDecl3216 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_UPDATING_in_p_FunctionType3297 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_SIMPLE_in_p_FunctionType3316 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_p_PrivateOption_in_p_FunctionOption3357 = new BitSet(new long[]{0x0000000000000002L,0x8020000000000000L,0x0000000000000060L});
    public static final BitSet FOLLOW_p_DeterministicOption_in_p_FunctionOption3361 = new BitSet(new long[]{0x0000000000000002L,0x8020000000000000L,0x0000000000000060L});
    public static final BitSet FOLLOW_PRIVATE_in_p_PrivateOption3391 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_PUBLIC_in_p_PrivateOption3397 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_DETERMINISTIC_in_p_DeterministicOption3428 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_NONDETERMINISTIC_in_p_DeterministicOption3434 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_p_Param_in_p_ParamList3468 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0100000000000000L});
    public static final BitSet FOLLOW_COMMA_in_p_ParamList3471 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000800000000000L});
    public static final BitSet FOLLOW_p_Param_in_p_ParamList3475 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0100000000000000L});
    public static final BitSet FOLLOW_DOLLAR_in_p_Param3533 = new BitSet(new long[]{0xFFFFFFFFFFFF0000L,0x7FDFFFFFFFFFFFFFL,0xFFFFFFFFFFFFFFFFL,0x00001FFDFFFFBFFFL,0x0000000004000000L,0x0000001000000000L});
    public static final BitSet FOLLOW_p_QName_in_p_Param3537 = new BitSet(new long[]{0x0000000000080002L});
    public static final BitSet FOLLOW_p_TypeDeclaration_in_p_Param3541 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_LBRACKET_in_p_EnclosedExpr3597 = new BitSet(new long[]{0xFFFFFFFFFFFF0000L,0x7FDFFFFFFFFFFFFFL,0xFFFFFFFFFFFFFFFFL,0x3C00BFFDFFFFBFFFL,0x0000007E04C80078L,0x0000001000000000L});
    public static final BitSet FOLLOW_pm_Expr_in_p_EnclosedExpr3599 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0002000000000000L});
    public static final BitSet FOLLOW_RBRACKET_in_p_EnclosedExpr3601 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_pm_Expr_in_p_QueryBody3651 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_p_ConcatExpr_in_pm_Expr3702 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000800L});
    public static final BitSet FOLLOW_SEMICOLON_in_pm_Expr3719 = new BitSet(new long[]{0xFFFFFFFFFFFF0002L,0x7FDFFFFFFFFFFFFFL,0xFFFFFFFFFFFFFFFFL,0x3C00BFFDFFFFBFFFL,0x0000007E04C80878L,0x0000001000000000L});
    public static final BitSet FOLLOW_pm_ApplyExpr_in_pm_Expr3721 = new BitSet(new long[]{0xFFFFFFFFFFFF0002L,0x7FDFFFFFFFFFFFFFL,0xFFFFFFFFFFFFFFFFL,0x3C00BFFDFFFFBFFFL,0x0000007E04C80878L,0x0000001000000000L});
    public static final BitSet FOLLOW_SEMICOLON_in_pm_Expr3746 = new BitSet(new long[]{0xFFFFFFFFFFFF0000L,0x7FDFFFFFFFFFFFFFL,0xFFFFFFFFFFFFFFFFL,0x3C00BFFDFFFFBFFFL,0x0000007E04C80078L,0x0000001000000000L});
    public static final BitSet FOLLOW_p_ConcatExpr_in_pm_Expr3748 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000800L});
    public static final BitSet FOLLOW_p_FLWORExpr_in_p_ExprSingle3782 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_p_QuantifiedExpr_in_p_ExprSingle3794 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_p_SwitchExpr_in_p_ExprSingle3806 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_p_TypeswitchExpr_in_p_ExprSingle3818 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_p_IfExpr_in_p_ExprSingle3830 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_p_TryCatchExpr_in_p_ExprSingle3842 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_p_EvalExpr_in_p_ExprSingle3857 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_p_InsertExpr_in_p_ExprSingle3872 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_p_DeleteExpr_in_p_ExprSingle3887 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_p_RenameExpr_in_p_ExprSingle3902 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_p_ReplaceExpr_in_p_ExprSingle3917 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_p_TransformExpr_in_p_ExprSingle3932 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_p_BlockExpr_in_p_ExprSingle3947 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_p_AssignmentExpr_in_p_ExprSingle3962 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_p_ExitExpr_in_p_ExprSingle3977 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_p_WhileExpr_in_p_ExprSingle3992 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_p_OrExpr_in_p_ExprSingle4004 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_p_InitialClause_in_p_FLWORExpr4030 = new BitSet(new long[]{0x0020000000000000L,0x0104400204040040L});
    public static final BitSet FOLLOW_p_IntermediateClause_in_p_FLWORExpr4032 = new BitSet(new long[]{0x0020000000000000L,0x0104400204040040L});
    public static final BitSet FOLLOW_p_ReturnClause_in_p_FLWORExpr4035 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_p_ForClause_in_p_InitialClause4061 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_p_LetClause_in_p_InitialClause4065 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_p_WindowClause_in_p_InitialClause4069 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_p_InitialClause_in_p_IntermediateClause4095 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_p_WhereClause_in_p_IntermediateClause4099 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_p_GroupByClause_in_p_IntermediateClause4103 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_p_OrderByClause_in_p_IntermediateClause4107 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_p_CountClause_in_p_IntermediateClause4111 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_FOR_in_p_ForClause4140 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000800000000000L});
    public static final BitSet FOLLOW_DOLLAR_in_p_ForClause4142 = new BitSet(new long[]{0xFFFFFFFFFFFF0000L,0x7FDFFFFFFFFFFFFFL,0xFFFFFFFFFFFFFFFFL,0x00001FFDFFFFBFFFL,0x0000000004000000L,0x0000001000000000L});
    public static final BitSet FOLLOW_p_VarName_in_p_ForClause4144 = new BitSet(new long[]{0x2000000000280000L,0x0000000000000000L,0x1000000000000000L});
    public static final BitSet FOLLOW_p_TypeDeclaration_in_p_ForClause4146 = new BitSet(new long[]{0x2000000000200000L,0x0000000000000000L,0x1000000000000000L});
    public static final BitSet FOLLOW_p_PositionalVar_in_p_ForClause4149 = new BitSet(new long[]{0x2000000000000000L,0x0000000000000000L,0x1000000000000000L});
    public static final BitSet FOLLOW_p_FTScoreVar_in_p_ForClause4152 = new BitSet(new long[]{0x2000000000000000L});
    public static final BitSet FOLLOW_IN_in_p_ForClause4157 = new BitSet(new long[]{0xFFFFFFFFFFFF0000L,0x7FDFFFFFFFFFFFFFL,0xFFFFFFFFFFFFFFFFL,0x3C00BFFDFFFFBFFFL,0x0000007E04C80078L,0x0000001000000000L});
    public static final BitSet FOLLOW_p_ExprSingle_in_p_ForClause4159 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0100000000000000L});
    public static final BitSet FOLLOW_COMMA_in_p_ForClause4162 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000800000000000L});
    public static final BitSet FOLLOW_DOLLAR_in_p_ForClause4164 = new BitSet(new long[]{0xFFFFFFFFFFFF0000L,0x7FDFFFFFFFFFFFFFL,0xFFFFFFFFFFFFFFFFL,0x00001FFDFFFFBFFFL,0x0000000004000000L,0x0000001000000000L});
    public static final BitSet FOLLOW_p_VarName_in_p_ForClause4166 = new BitSet(new long[]{0x2000000000280000L,0x0000000000000000L,0x1000000000000000L});
    public static final BitSet FOLLOW_p_TypeDeclaration_in_p_ForClause4168 = new BitSet(new long[]{0x2000000000200000L,0x0000000000000000L,0x1000000000000000L});
    public static final BitSet FOLLOW_p_PositionalVar_in_p_ForClause4171 = new BitSet(new long[]{0x2000000000000000L,0x0000000000000000L,0x1000000000000000L});
    public static final BitSet FOLLOW_p_FTScoreVar_in_p_ForClause4174 = new BitSet(new long[]{0x2000000000000000L});
    public static final BitSet FOLLOW_IN_in_p_ForClause4179 = new BitSet(new long[]{0xFFFFFFFFFFFF0000L,0x7FDFFFFFFFFFFFFFL,0xFFFFFFFFFFFFFFFFL,0x3C00BFFDFFFFBFFFL,0x0000007E04C80078L,0x0000001000000000L});
    public static final BitSet FOLLOW_p_ExprSingle_in_p_ForClause4181 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0100000000000000L});
    public static final BitSet FOLLOW_AT_in_p_PositionalVar4213 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000800000000000L});
    public static final BitSet FOLLOW_DOLLAR_in_p_PositionalVar4217 = new BitSet(new long[]{0xFFFFFFFFFFFF0000L,0x7FDFFFFFFFFFFFFFL,0xFFFFFFFFFFFFFFFFL,0x00001FFDFFFFBFFFL,0x0000000004000000L,0x0000001000000000L});
    public static final BitSet FOLLOW_p_VarName_in_p_PositionalVar4219 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_SCORE_in_p_FTScoreVar4247 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000800000000000L});
    public static final BitSet FOLLOW_DOLLAR_in_p_FTScoreVar4251 = new BitSet(new long[]{0xFFFFFFFFFFFF0000L,0x7FDFFFFFFFFFFFFFL,0xFFFFFFFFFFFFFFFFL,0x00001FFDFFFFBFFFL,0x0000000004000000L,0x0000001000000000L});
    public static final BitSet FOLLOW_p_VarName_in_p_FTScoreVar4253 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_LET_in_p_LetClause4282 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x1000000000000000L,0x0000800000000000L});
    public static final BitSet FOLLOW_DOLLAR_in_p_LetClause4289 = new BitSet(new long[]{0xFFFFFFFFFFFF0000L,0x7FDFFFFFFFFFFFFFL,0xFFFFFFFFFFFFFFFFL,0x00001FFDFFFFBFFFL,0x0000000004000000L,0x0000001000000000L});
    public static final BitSet FOLLOW_p_VarName_in_p_LetClause4291 = new BitSet(new long[]{0x0000000000080000L,0x0000000000000000L,0x0000000000000000L,0x0020000000000000L});
    public static final BitSet FOLLOW_p_TypeDeclaration_in_p_LetClause4293 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0020000000000000L});
    public static final BitSet FOLLOW_p_FTScoreVar_in_p_LetClause4299 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0020000000000000L});
    public static final BitSet FOLLOW_BIND_in_p_LetClause4303 = new BitSet(new long[]{0xFFFFFFFFFFFF0000L,0x7FDFFFFFFFFFFFFFL,0xFFFFFFFFFFFFFFFFL,0x3C00BFFDFFFFBFFFL,0x0000007E04C80078L,0x0000001000000000L});
    public static final BitSet FOLLOW_p_ExprSingle_in_p_LetClause4305 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0100000000000000L});
    public static final BitSet FOLLOW_COMMA_in_p_LetClause4308 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x1000000000000000L,0x0020800000000000L});
    public static final BitSet FOLLOW_DOLLAR_in_p_LetClause4313 = new BitSet(new long[]{0xFFFFFFFFFFFF0000L,0x7FDFFFFFFFFFFFFFL,0xFFFFFFFFFFFFFFFFL,0x00001FFDFFFFBFFFL,0x0000000004000000L,0x0000001000000000L});
    public static final BitSet FOLLOW_p_VarName_in_p_LetClause4315 = new BitSet(new long[]{0x0000000000080000L,0x0000000000000000L,0x0000000000000000L,0x0020000000000000L});
    public static final BitSet FOLLOW_p_TypeDeclaration_in_p_LetClause4317 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0020000000000000L});
    public static final BitSet FOLLOW_p_FTScoreVar_in_p_LetClause4323 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0020000000000000L});
    public static final BitSet FOLLOW_BIND_in_p_LetClause4328 = new BitSet(new long[]{0xFFFFFFFFFFFF0000L,0x7FDFFFFFFFFFFFFFL,0xFFFFFFFFFFFFFFFFL,0x3C00BFFDFFFFBFFFL,0x0000007E04C80078L,0x0000001000000000L});
    public static final BitSet FOLLOW_p_ExprSingle_in_p_LetClause4330 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0100000000000000L});
    public static final BitSet FOLLOW_FOR_in_p_WindowClause4360 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000001100L});
    public static final BitSet FOLLOW_p_TumblingWindowClause_in_p_WindowClause4365 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_p_SlidingWindowClause_in_p_WindowClause4369 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_TUMBLING_in_p_TumblingWindowClause4406 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000004000L});
    public static final BitSet FOLLOW_WINDOW_in_p_TumblingWindowClause4410 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000800000000000L});
    public static final BitSet FOLLOW_DOLLAR_in_p_TumblingWindowClause4412 = new BitSet(new long[]{0xFFFFFFFFFFFF0000L,0x7FDFFFFFFFFFFFFFL,0xFFFFFFFFFFFFFFFFL,0x00001FFDFFFFBFFFL,0x0000000004000000L,0x0000001000000000L});
    public static final BitSet FOLLOW_p_VarName_in_p_TumblingWindowClause4414 = new BitSet(new long[]{0x2000000000080000L});
    public static final BitSet FOLLOW_p_TypeDeclaration_in_p_TumblingWindowClause4416 = new BitSet(new long[]{0x2000000000000000L});
    public static final BitSet FOLLOW_IN_in_p_TumblingWindowClause4419 = new BitSet(new long[]{0xFFFFFFFFFFFF0000L,0x7FDFFFFFFFFFFFFFL,0xFFFFFFFFFFFFFFFFL,0x3C00BFFDFFFFBFFFL,0x0000007E04C80078L,0x0000001000000000L});
    public static final BitSet FOLLOW_p_ExprSingle_in_p_TumblingWindowClause4421 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000200L});
    public static final BitSet FOLLOW_p_WindowStartCondition_in_p_TumblingWindowClause4423 = new BitSet(new long[]{0x0000000000000002L,0x0080000000000000L,0x0000000000000001L});
    public static final BitSet FOLLOW_p_WindowEndCondition_in_p_TumblingWindowClause4425 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_SLIDING_in_p_SlidingWindowClause4456 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000004000L});
    public static final BitSet FOLLOW_WINDOW_in_p_SlidingWindowClause4460 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000800000000000L});
    public static final BitSet FOLLOW_DOLLAR_in_p_SlidingWindowClause4462 = new BitSet(new long[]{0xFFFFFFFFFFFF0000L,0x7FDFFFFFFFFFFFFFL,0xFFFFFFFFFFFFFFFFL,0x00001FFDFFFFBFFFL,0x0000000004000000L,0x0000001000000000L});
    public static final BitSet FOLLOW_p_VarName_in_p_SlidingWindowClause4464 = new BitSet(new long[]{0x2000000000080000L});
    public static final BitSet FOLLOW_p_TypeDeclaration_in_p_SlidingWindowClause4466 = new BitSet(new long[]{0x2000000000000000L});
    public static final BitSet FOLLOW_IN_in_p_SlidingWindowClause4469 = new BitSet(new long[]{0xFFFFFFFFFFFF0000L,0x7FDFFFFFFFFFFFFFL,0xFFFFFFFFFFFFFFFFL,0x3C00BFFDFFFFBFFFL,0x0000007E04C80078L,0x0000001000000000L});
    public static final BitSet FOLLOW_p_ExprSingle_in_p_SlidingWindowClause4471 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000200L});
    public static final BitSet FOLLOW_p_WindowStartCondition_in_p_SlidingWindowClause4473 = new BitSet(new long[]{0x0000000000000002L,0x0080000000000000L,0x0000000000000001L});
    public static final BitSet FOLLOW_p_WindowEndCondition_in_p_SlidingWindowClause4475 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_START_in_p_WindowStartCondition4506 = new BitSet(new long[]{0x0000000000200000L,0x4000000000000000L,0x0000000000002080L,0x0000800000000000L});
    public static final BitSet FOLLOW_p_WindowVars_in_p_WindowStartCondition4508 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000002000L});
    public static final BitSet FOLLOW_WHEN_in_p_WindowStartCondition4512 = new BitSet(new long[]{0xFFFFFFFFFFFF0000L,0x7FDFFFFFFFFFFFFFL,0xFFFFFFFFFFFFFFFFL,0x3C00BFFDFFFFBFFFL,0x0000007E04C80078L,0x0000001000000000L});
    public static final BitSet FOLLOW_p_ExprSingle_in_p_WindowStartCondition4514 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ONLY_in_p_WindowEndCondition4544 = new BitSet(new long[]{0x0000000000000000L,0x0080000000000000L});
    public static final BitSet FOLLOW_END_in_p_WindowEndCondition4549 = new BitSet(new long[]{0x0000000000200000L,0x4000000000000000L,0x0000000000002080L,0x0000800000000000L});
    public static final BitSet FOLLOW_p_WindowVars_in_p_WindowEndCondition4551 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000002000L});
    public static final BitSet FOLLOW_WHEN_in_p_WindowEndCondition4555 = new BitSet(new long[]{0xFFFFFFFFFFFF0000L,0x7FDFFFFFFFFFFFFFL,0xFFFFFFFFFFFFFFFFL,0x3C00BFFDFFFFBFFFL,0x0000007E04C80078L,0x0000001000000000L});
    public static final BitSet FOLLOW_p_ExprSingle_in_p_WindowEndCondition4557 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_DOLLAR_in_p_WindowVars4586 = new BitSet(new long[]{0xFFFFFFFFFFFF0000L,0x7FDFFFFFFFFFFFFFL,0xFFFFFFFFFFFFFFFFL,0x00001FFDFFFFBFFFL,0x0000000004000000L,0x0000001000000000L});
    public static final BitSet FOLLOW_p_QName_in_p_WindowVars4588 = new BitSet(new long[]{0x0000000000200002L,0x4000000000000000L,0x0000000000000080L});
    public static final BitSet FOLLOW_p_PositionalVar_in_p_WindowVars4592 = new BitSet(new long[]{0x0000000000000002L,0x4000000000000000L,0x0000000000000080L});
    public static final BitSet FOLLOW_PREVIOUS_in_p_WindowVars4598 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000800000000000L});
    public static final BitSet FOLLOW_DOLLAR_in_p_WindowVars4600 = new BitSet(new long[]{0xFFFFFFFFFFFF0000L,0x7FDFFFFFFFFFFFFFL,0xFFFFFFFFFFFFFFFFL,0x00001FFDFFFFBFFFL,0x0000000004000000L,0x0000001000000000L});
    public static final BitSet FOLLOW_p_QName_in_p_WindowVars4602 = new BitSet(new long[]{0x0000000000000002L,0x4000000000000000L});
    public static final BitSet FOLLOW_NEXT_in_p_WindowVars4609 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000800000000000L});
    public static final BitSet FOLLOW_DOLLAR_in_p_WindowVars4611 = new BitSet(new long[]{0xFFFFFFFFFFFF0000L,0x7FDFFFFFFFFFFFFFL,0xFFFFFFFFFFFFFFFFL,0x00001FFDFFFFBFFFL,0x0000000004000000L,0x0000001000000000L});
    public static final BitSet FOLLOW_p_QName_in_p_WindowVars4613 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_COUNT_in_p_CountClause4654 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000800000000000L});
    public static final BitSet FOLLOW_DOLLAR_in_p_CountClause4658 = new BitSet(new long[]{0xFFFFFFFFFFFF0000L,0x7FDFFFFFFFFFFFFFL,0xFFFFFFFFFFFFFFFFL,0x00001FFDFFFFBFFFL,0x0000000004000000L,0x0000001000000000L});
    public static final BitSet FOLLOW_p_VarName_in_p_CountClause4660 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_WHERE_in_p_WhereClause4696 = new BitSet(new long[]{0xFFFFFFFFFFFF0000L,0x7FDFFFFFFFFFFFFFL,0xFFFFFFFFFFFFFFFFL,0x3C00BFFDFFFFBFFFL,0x0000007E04C80078L,0x0000001000000000L});
    public static final BitSet FOLLOW_p_ExprSingle_in_p_WhereClause4700 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_GROUP_in_p_GroupByClause4730 = new BitSet(new long[]{0x0000000002000000L});
    public static final BitSet FOLLOW_BY_in_p_GroupByClause4734 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000800000000000L});
    public static final BitSet FOLLOW_p_GroupingSpecList_in_p_GroupByClause4736 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_p_GroupingSpec_in_p_GroupingSpecList4766 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0100000000000000L});
    public static final BitSet FOLLOW_COMMA_in_p_GroupingSpecList4769 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000800000000000L});
    public static final BitSet FOLLOW_p_GroupingSpec_in_p_GroupingSpecList4771 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0100000000000000L});
    public static final BitSet FOLLOW_DOLLAR_in_p_GroupingSpec4801 = new BitSet(new long[]{0xFFFFFFFFFFFF0000L,0x7FDFFFFFFFFFFFFFL,0xFFFFFFFFFFFFFFFFL,0x00001FFDFFFFBFFFL,0x0000000004000000L,0x0000001000000000L});
    public static final BitSet FOLLOW_p_VarName_in_p_GroupingSpec4803 = new BitSet(new long[]{0x0000000040000002L});
    public static final BitSet FOLLOW_COLLATION_in_p_GroupingSpec4808 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000C00000L});
    public static final BitSet FOLLOW_p_StringLiteral_in_p_GroupingSpec4810 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ORDER_in_p_OrderByClause4846 = new BitSet(new long[]{0x0000000002000000L});
    public static final BitSet FOLLOW_BY_in_p_OrderByClause4850 = new BitSet(new long[]{0xFFFFFFFFFFFF0000L,0x7FDFFFFFFFFFFFFFL,0xFFFFFFFFFFFFFFFFL,0x3C00BFFDFFFFBFFFL,0x0000007E04C80078L,0x0000001000000000L});
    public static final BitSet FOLLOW_STABLE_in_p_OrderByClause4858 = new BitSet(new long[]{0x0000000000000000L,0x0000000000040000L});
    public static final BitSet FOLLOW_ORDER_in_p_OrderByClause4862 = new BitSet(new long[]{0x0000000002000000L});
    public static final BitSet FOLLOW_BY_in_p_OrderByClause4866 = new BitSet(new long[]{0xFFFFFFFFFFFF0000L,0x7FDFFFFFFFFFFFFFL,0xFFFFFFFFFFFFFFFFL,0x3C00BFFDFFFFBFFFL,0x0000007E04C80078L,0x0000001000000000L});
    public static final BitSet FOLLOW_p_OrderSpecList_in_p_OrderByClause4870 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_p_OrderSpec_in_p_OrderSpecList4900 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0100000000000000L});
    public static final BitSet FOLLOW_COMMA_in_p_OrderSpecList4903 = new BitSet(new long[]{0xFFFFFFFFFFFF0000L,0x7FDFFFFFFFFFFFFFL,0xFFFFFFFFFFFFFFFFL,0x3C00BFFDFFFFBFFFL,0x0000007E04C80078L,0x0000001000000000L});
    public static final BitSet FOLLOW_p_OrderSpec_in_p_OrderSpecList4905 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0100000000000000L});
    public static final BitSet FOLLOW_p_ExprSingle_in_p_OrderSpec4935 = new BitSet(new long[]{0x0000104040100000L});
    public static final BitSet FOLLOW_p_OrderModifier_in_p_OrderSpec4937 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ASCENDING_in_p_OrderModifier4966 = new BitSet(new long[]{0x0000100040000002L});
    public static final BitSet FOLLOW_DESCENDING_in_p_OrderModifier4972 = new BitSet(new long[]{0x0000100040000002L});
    public static final BitSet FOLLOW_EMPTY_in_p_OrderModifier4979 = new BitSet(new long[]{0x0100000000000000L,0x0000000000000020L});
    public static final BitSet FOLLOW_GREATEST_in_p_OrderModifier4984 = new BitSet(new long[]{0x0000000040000002L});
    public static final BitSet FOLLOW_LEAST_in_p_OrderModifier4990 = new BitSet(new long[]{0x0000000040000002L});
    public static final BitSet FOLLOW_COLLATION_in_p_OrderModifier4998 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000C00000L});
    public static final BitSet FOLLOW_p_StringLiteral_in_p_OrderModifier5000 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_RETURN_in_p_ReturnClause5032 = new BitSet(new long[]{0xFFFFFFFFFFFF0000L,0x7FDFFFFFFFFFFFFFL,0xFFFFFFFFFFFFFFFFL,0x3C00BFFDFFFFBFFFL,0x0000007E04C80078L,0x0000001000000000L});
    public static final BitSet FOLLOW_p_ExprSingle_in_p_ReturnClause5036 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_SOME_in_p_QuantifiedExpr5067 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000800000000000L});
    public static final BitSet FOLLOW_EVERY_in_p_QuantifiedExpr5073 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000800000000000L});
    public static final BitSet FOLLOW_DOLLAR_in_p_QuantifiedExpr5076 = new BitSet(new long[]{0xFFFFFFFFFFFF0000L,0x7FDFFFFFFFFFFFFFL,0xFFFFFFFFFFFFFFFFL,0x00001FFDFFFFBFFFL,0x0000000004000000L,0x0000001000000000L});
    public static final BitSet FOLLOW_p_VarName_in_p_QuantifiedExpr5078 = new BitSet(new long[]{0x2000000000080000L});
    public static final BitSet FOLLOW_p_TypeDeclaration_in_p_QuantifiedExpr5080 = new BitSet(new long[]{0x2000000000000000L});
    public static final BitSet FOLLOW_IN_in_p_QuantifiedExpr5085 = new BitSet(new long[]{0xFFFFFFFFFFFF0000L,0x7FDFFFFFFFFFFFFFL,0xFFFFFFFFFFFFFFFFL,0x3C00BFFDFFFFBFFFL,0x0000007E04C80078L,0x0000001000000000L});
    public static final BitSet FOLLOW_p_ExprSingle_in_p_QuantifiedExpr5087 = new BitSet(new long[]{0x0000000000000000L,0x0000000008000000L,0x0000000000000000L,0x0100000000000000L});
    public static final BitSet FOLLOW_COMMA_in_p_QuantifiedExpr5090 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000800000000000L});
    public static final BitSet FOLLOW_DOLLAR_in_p_QuantifiedExpr5092 = new BitSet(new long[]{0xFFFFFFFFFFFF0000L,0x7FDFFFFFFFFFFFFFL,0xFFFFFFFFFFFFFFFFL,0x00001FFDFFFFBFFFL,0x0000000004000000L,0x0000001000000000L});
    public static final BitSet FOLLOW_p_QName_in_p_QuantifiedExpr5094 = new BitSet(new long[]{0x2000000000080000L});
    public static final BitSet FOLLOW_p_TypeDeclaration_in_p_QuantifiedExpr5096 = new BitSet(new long[]{0x2000000000000000L});
    public static final BitSet FOLLOW_IN_in_p_QuantifiedExpr5101 = new BitSet(new long[]{0xFFFFFFFFFFFF0000L,0x7FDFFFFFFFFFFFFFL,0xFFFFFFFFFFFFFFFFL,0x3C00BFFDFFFFBFFFL,0x0000007E04C80078L,0x0000001000000000L});
    public static final BitSet FOLLOW_p_ExprSingle_in_p_QuantifiedExpr5103 = new BitSet(new long[]{0x0000000000000000L,0x0000000008000000L,0x0000000000000000L,0x0100000000000000L});
    public static final BitSet FOLLOW_SATISFIES_in_p_QuantifiedExpr5109 = new BitSet(new long[]{0xFFFFFFFFFFFF0000L,0x7FDFFFFFFFFFFFFFL,0xFFFFFFFFFFFFFFFFL,0x3C00BFFDFFFFBFFFL,0x0000007E04C80078L,0x0000001000000000L});
    public static final BitSet FOLLOW_p_ExprSingle_in_p_QuantifiedExpr5111 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_TYPESWITCH_in_p_TypeswitchExpr5141 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000200000000000L});
    public static final BitSet FOLLOW_LPAREN_in_p_TypeswitchExpr5143 = new BitSet(new long[]{0xFFFFFFFFFFFF0000L,0x7FDFFFFFFFFFFFFFL,0xFFFFFFFFFFFFFFFFL,0x3C00BFFDFFFFBFFFL,0x0000007E04C80078L,0x0000001000000000L});
    public static final BitSet FOLLOW_pm_Expr_in_p_TypeswitchExpr5145 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000400000000000L});
    public static final BitSet FOLLOW_RPAREN_in_p_TypeswitchExpr5147 = new BitSet(new long[]{0x0000000004000000L});
    public static final BitSet FOLLOW_p_CaseClause_in_p_TypeswitchExpr5149 = new BitSet(new long[]{0x0000000804000000L});
    public static final BitSet FOLLOW_DEFAULT_in_p_TypeswitchExpr5154 = new BitSet(new long[]{0x0000000000000000L,0x0000000004000000L,0x0000000000000000L,0x0000800000000000L});
    public static final BitSet FOLLOW_DOLLAR_in_p_TypeswitchExpr5157 = new BitSet(new long[]{0xFFFFFFFFFFFF0000L,0x7FDFFFFFFFFFFFFFL,0xFFFFFFFFFFFFFFFFL,0x00001FFDFFFFBFFFL,0x0000000004000000L,0x0000001000000000L});
    public static final BitSet FOLLOW_p_VarName_in_p_TypeswitchExpr5159 = new BitSet(new long[]{0x0000000000000000L,0x0000000004000000L});
    public static final BitSet FOLLOW_RETURN_in_p_TypeswitchExpr5165 = new BitSet(new long[]{0xFFFFFFFFFFFF0000L,0x7FDFFFFFFFFFFFFFL,0xFFFFFFFFFFFFFFFFL,0x3C00BFFDFFFFBFFFL,0x0000007E04C80078L,0x0000001000000000L});
    public static final BitSet FOLLOW_p_ExprSingle_in_p_TypeswitchExpr5167 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_CASE_in_p_CaseClause5197 = new BitSet(new long[]{0xFFFFFFFFFFFF0000L,0x7FDFFFFFFFFFFFFFL,0xFFFFFFFFFFFFFFFFL,0x00009FFDFFFFBFFFL,0x0000000004000000L,0x0000001000000000L});
    public static final BitSet FOLLOW_DOLLAR_in_p_CaseClause5200 = new BitSet(new long[]{0xFFFFFFFFFFFF0000L,0x7FDFFFFFFFFFFFFFL,0xFFFFFFFFFFFFFFFFL,0x00001FFDFFFFBFFFL,0x0000000004000000L,0x0000001000000000L});
    public static final BitSet FOLLOW_p_VarName_in_p_CaseClause5202 = new BitSet(new long[]{0x0000000000080000L});
    public static final BitSet FOLLOW_AS_in_p_CaseClause5206 = new BitSet(new long[]{0xFFFFFFFFFFFF0000L,0x7FDFFFFFFFFFFFFFL,0xFFFFFFFFFFFFFFFFL,0x00009FFDFFFFBFFFL,0x0000000004000000L,0x0000001000000000L});
    public static final BitSet FOLLOW_p_SequenceType_in_p_CaseClause5210 = new BitSet(new long[]{0x0000000000000000L,0x0000000004000000L});
    public static final BitSet FOLLOW_RETURN_in_p_CaseClause5214 = new BitSet(new long[]{0xFFFFFFFFFFFF0000L,0x7FDFFFFFFFFFFFFFL,0xFFFFFFFFFFFFFFFFL,0x3C00BFFDFFFFBFFFL,0x0000007E04C80078L,0x0000001000000000L});
    public static final BitSet FOLLOW_p_ExprSingle_in_p_CaseClause5216 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_IF_in_p_IfExpr5246 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000200000000000L});
    public static final BitSet FOLLOW_LPAREN_in_p_IfExpr5248 = new BitSet(new long[]{0xFFFFFFFFFFFF0000L,0x7FDFFFFFFFFFFFFFL,0xFFFFFFFFFFFFFFFFL,0x3C00BFFDFFFFBFFFL,0x0000007E04C80078L,0x0000001000000000L});
    public static final BitSet FOLLOW_pm_Expr_in_p_IfExpr5250 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000400000000000L});
    public static final BitSet FOLLOW_RPAREN_in_p_IfExpr5252 = new BitSet(new long[]{0x0000000000000000L,0x0000002000000000L});
    public static final BitSet FOLLOW_THEN_in_p_IfExpr5256 = new BitSet(new long[]{0xFFFFFFFFFFFF0000L,0x7FDFFFFFFFFFFFFFL,0xFFFFFFFFFFFFFFFFL,0x3C00BFFDFFFFBFFFL,0x0000007E04C80078L,0x0000001000000000L});
    public static final BitSet FOLLOW_p_ExprSingle_in_p_IfExpr5258 = new BitSet(new long[]{0x0000080000000000L});
    public static final BitSet FOLLOW_ELSE_in_p_IfExpr5262 = new BitSet(new long[]{0xFFFFFFFFFFFF0000L,0x7FDFFFFFFFFFFFFFL,0xFFFFFFFFFFFFFFFFL,0x3C00BFFDFFFFBFFFL,0x0000007E04C80078L,0x0000001000000000L});
    public static final BitSet FOLLOW_p_ExprSingle_in_p_IfExpr5264 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_p_AndExpr_in_p_OrExpr5292 = new BitSet(new long[]{0x0000000000000002L,0x0000000000020000L});
    public static final BitSet FOLLOW_OR_in_p_OrExpr5298 = new BitSet(new long[]{0xFFFFFFFFFFFF0000L,0x7FDFFFFFFFFFFFFFL,0xFFFFFFFFFFFFFFFFL,0x3C00BFFDFFFFBFFFL,0x0000007E04C80078L,0x0000001000000000L});
    public static final BitSet FOLLOW_p_AndExpr_in_p_OrExpr5302 = new BitSet(new long[]{0x0000000000000002L,0x0000000000020000L});
    public static final BitSet FOLLOW_p_ComparisonExpr_in_p_AndExpr5333 = new BitSet(new long[]{0x0000000000040002L});
    public static final BitSet FOLLOW_AND_in_p_AndExpr5339 = new BitSet(new long[]{0xFFFFFFFFFFFF0000L,0x7FDFFFFFFFFFFFFFL,0xFFFFFFFFFFFFFFFFL,0x3C00BFFDFFFFBFFFL,0x0000007E04C80078L,0x0000001000000000L});
    public static final BitSet FOLLOW_p_ComparisonExpr_in_p_AndExpr5343 = new BitSet(new long[]{0x0000000000040002L});
    public static final BitSet FOLLOW_p_FTContainsExpr_in_p_ComparisonExpr5375 = new BitSet(new long[]{0x0280800000000002L,0x0000000000000892L,0x0000000000000000L,0xE050000000000000L,0x0000000000000007L});
    public static final BitSet FOLLOW_p_ValueComp_in_p_ComparisonExpr5380 = new BitSet(new long[]{0xFFFFFFFFFFFF0000L,0x7FDFFFFFFFFFFFFFL,0xFFFFFFFFFFFFFFFFL,0x3C00BFFDFFFFBFFFL,0x0000007E04C80078L,0x0000001000000000L});
    public static final BitSet FOLLOW_p_GeneralComp_in_p_ComparisonExpr5384 = new BitSet(new long[]{0xFFFFFFFFFFFF0000L,0x7FDFFFFFFFFFFFFFL,0xFFFFFFFFFFFFFFFFL,0x3C00BFFDFFFFBFFFL,0x0000007E04C80078L,0x0000001000000000L});
    public static final BitSet FOLLOW_p_NodeComp_in_p_ComparisonExpr5388 = new BitSet(new long[]{0xFFFFFFFFFFFF0000L,0x7FDFFFFFFFFFFFFFL,0xFFFFFFFFFFFFFFFFL,0x3C00BFFDFFFFBFFFL,0x0000007E04C80078L,0x0000001000000000L});
    public static final BitSet FOLLOW_p_FTContainsExpr_in_p_ComparisonExpr5391 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_p_RangeExpr_in_p_FTContainsExpr5422 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000800000000L});
    public static final BitSet FOLLOW_CONTAINS_in_p_FTContainsExpr5428 = new BitSet(new long[]{0x0000000000000000L,0x0000001000000000L});
    public static final BitSet FOLLOW_TEXT_in_p_FTContainsExpr5432 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000200000000000L,0x0001200000000000L,0x0000000000C00000L});
    public static final BitSet FOLLOW_p_FTSelection_in_p_FTContainsExpr5436 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000100L});
    public static final BitSet FOLLOW_p_FTIgnoreOption_in_p_FTContainsExpr5438 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_p_AdditiveExpr_in_p_RangeExpr5470 = new BitSet(new long[]{0x0000000000000002L,0x0000004000000000L});
    public static final BitSet FOLLOW_TO_in_p_RangeExpr5476 = new BitSet(new long[]{0xFFFFFFFFFFFF0000L,0x7FDFFFFFFFFFFFFFL,0xFFFFFFFFFFFFFFFFL,0x3C00BFFDFFFFBFFFL,0x0000007E04C80078L,0x0000001000000000L});
    public static final BitSet FOLLOW_p_AdditiveExpr_in_p_RangeExpr5480 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_p_MultiplicativeExpr_in_p_AdditiveExpr5511 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x1800000000000000L});
    public static final BitSet FOLLOW_set_in_p_AdditiveExpr5515 = new BitSet(new long[]{0xFFFFFFFFFFFF0000L,0x7FDFFFFFFFFFFFFFL,0xFFFFFFFFFFFFFFFFL,0x3C00BFFDFFFFBFFFL,0x0000007E04C80078L,0x0000001000000000L});
    public static final BitSet FOLLOW_p_MultiplicativeExpr_in_p_AdditiveExpr5523 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x1800000000000000L});
    public static final BitSet FOLLOW_p_UnionExpr_in_p_MultiplicativeExpr5554 = new BitSet(new long[]{0x0400008000000002L,0x0000000000000100L,0x0000000000000000L,0x0400000000000000L});
    public static final BitSet FOLLOW_STAR_in_p_MultiplicativeExpr5559 = new BitSet(new long[]{0xFFFFFFFFFFFF0000L,0x7FDFFFFFFFFFFFFFL,0xFFFFFFFFFFFFFFFFL,0x3C00BFFDFFFFBFFFL,0x0000007E04C80078L,0x0000001000000000L});
    public static final BitSet FOLLOW_DIV_in_p_MultiplicativeExpr5565 = new BitSet(new long[]{0xFFFFFFFFFFFF0000L,0x7FDFFFFFFFFFFFFFL,0xFFFFFFFFFFFFFFFFL,0x3C00BFFDFFFFBFFFL,0x0000007E04C80078L,0x0000001000000000L});
    public static final BitSet FOLLOW_IDIV_in_p_MultiplicativeExpr5573 = new BitSet(new long[]{0xFFFFFFFFFFFF0000L,0x7FDFFFFFFFFFFFFFL,0xFFFFFFFFFFFFFFFFL,0x3C00BFFDFFFFBFFFL,0x0000007E04C80078L,0x0000001000000000L});
    public static final BitSet FOLLOW_MOD_in_p_MultiplicativeExpr5581 = new BitSet(new long[]{0xFFFFFFFFFFFF0000L,0x7FDFFFFFFFFFFFFFL,0xFFFFFFFFFFFFFFFFL,0x3C00BFFDFFFFBFFFL,0x0000007E04C80078L,0x0000001000000000L});
    public static final BitSet FOLLOW_p_UnionExpr_in_p_MultiplicativeExpr5586 = new BitSet(new long[]{0x0400008000000002L,0x0000000000000100L,0x0000000000000000L,0x0400000000000000L});
    public static final BitSet FOLLOW_p_IntersectExceptExpr_in_p_UnionExpr5617 = new BitSet(new long[]{0x0000000000000002L,0x0000020000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000001000L});
    public static final BitSet FOLLOW_UNION_in_p_UnionExpr5624 = new BitSet(new long[]{0xFFFFFFFFFFFF0000L,0x7FDFFFFFFFFFFFFFL,0xFFFFFFFFFFFFFFFFL,0x3C00BFFDFFFFBFFFL,0x0000007E04C80078L,0x0000001000000000L});
    public static final BitSet FOLLOW_VBAR_in_p_UnionExpr5630 = new BitSet(new long[]{0xFFFFFFFFFFFF0000L,0x7FDFFFFFFFFFFFFFL,0xFFFFFFFFFFFFFFFFL,0x3C00BFFDFFFFBFFFL,0x0000007E04C80078L,0x0000001000000000L});
    public static final BitSet FOLLOW_p_IntersectExceptExpr_in_p_UnionExpr5633 = new BitSet(new long[]{0x0000000000000002L,0x0000020000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000001000L});
    public static final BitSet FOLLOW_p_InstanceofExpr_in_p_IntersectExceptExpr5664 = new BitSet(new long[]{0x0002000000000002L,0x0000000000000001L});
    public static final BitSet FOLLOW_INTERSECT_in_p_IntersectExceptExpr5671 = new BitSet(new long[]{0xFFFFFFFFFFFF0000L,0x7FDFFFFFFFFFFFFFL,0xFFFFFFFFFFFFFFFFL,0x3C00BFFDFFFFBFFFL,0x0000007E04C80078L,0x0000001000000000L});
    public static final BitSet FOLLOW_EXCEPT_in_p_IntersectExceptExpr5677 = new BitSet(new long[]{0xFFFFFFFFFFFF0000L,0x7FDFFFFFFFFFFFFFL,0xFFFFFFFFFFFFFFFFL,0x3C00BFFDFFFFBFFFL,0x0000007E04C80078L,0x0000001000000000L});
    public static final BitSet FOLLOW_p_InstanceofExpr_in_p_IntersectExceptExpr5682 = new BitSet(new long[]{0x0002000000000002L,0x0000000000000001L});
    public static final BitSet FOLLOW_p_TreatExpr_in_p_InstanceofExpr5713 = new BitSet(new long[]{0x8000000000000002L});
    public static final BitSet FOLLOW_INSTANCE_in_p_InstanceofExpr5719 = new BitSet(new long[]{0x0000000000000000L,0x0000000000008000L});
    public static final BitSet FOLLOW_OF_in_p_InstanceofExpr5725 = new BitSet(new long[]{0xFFFFFFFFFFFF0000L,0x7FDFFFFFFFFFFFFFL,0xFFFFFFFFFFFFFFFFL,0x00009FFDFFFFBFFFL,0x0000000004000000L,0x0000001000000000L});
    public static final BitSet FOLLOW_p_SequenceType_in_p_InstanceofExpr5729 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_p_CastableExpr_in_p_TreatExpr5759 = new BitSet(new long[]{0x0000000000000002L,0x0000008000000000L});
    public static final BitSet FOLLOW_TREAT_in_p_TreatExpr5765 = new BitSet(new long[]{0x0000000000080000L});
    public static final BitSet FOLLOW_AS_in_p_TreatExpr5771 = new BitSet(new long[]{0xFFFFFFFFFFFF0000L,0x7FDFFFFFFFFFFFFFL,0xFFFFFFFFFFFFFFFFL,0x00009FFDFFFFBFFFL,0x0000000004000000L,0x0000001000000000L});
    public static final BitSet FOLLOW_p_SequenceType_in_p_TreatExpr5775 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_p_CastExpr_in_p_CastableExpr5814 = new BitSet(new long[]{0x0000000010000002L});
    public static final BitSet FOLLOW_CASTABLE_in_p_CastableExpr5820 = new BitSet(new long[]{0x0000000000080000L});
    public static final BitSet FOLLOW_AS_in_p_CastableExpr5826 = new BitSet(new long[]{0xFFFFFFFFFFFF0000L,0x7FDFFFFFFFFFFFFFL,0xFFFFFFFFFFFFFFFFL,0x00001FFDFFFFBFFFL,0x0000000004000000L,0x0000001000000000L});
    public static final BitSet FOLLOW_p_SingleType_in_p_CastableExpr5830 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_p_UnaryExpr_in_p_CastExpr5869 = new BitSet(new long[]{0x0000000008000002L});
    public static final BitSet FOLLOW_CAST_in_p_CastExpr5875 = new BitSet(new long[]{0x0000000000080000L});
    public static final BitSet FOLLOW_AS_in_p_CastExpr5881 = new BitSet(new long[]{0xFFFFFFFFFFFF0000L,0x7FDFFFFFFFFFFFFFL,0xFFFFFFFFFFFFFFFFL,0x00001FFDFFFFBFFFL,0x0000000004000000L,0x0000001000000000L});
    public static final BitSet FOLLOW_p_SingleType_in_p_CastExpr5885 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_PLUS_in_p_UnaryExpr5917 = new BitSet(new long[]{0xFFFFFFFFFFFF0000L,0x7FDFFFFFFFFFFFFFL,0xFFFFFFFFFFFFFFFFL,0x3C00BFFDFFFFBFFFL,0x0000007E04C80078L,0x0000001000000000L});
    public static final BitSet FOLLOW_MINUS_in_p_UnaryExpr5921 = new BitSet(new long[]{0xFFFFFFFFFFFF0000L,0x7FDFFFFFFFFFFFFFL,0xFFFFFFFFFFFFFFFFL,0x3C00BFFDFFFFBFFFL,0x0000007E04C80078L,0x0000001000000000L});
    public static final BitSet FOLLOW_p_ValueExpr_in_p_UnaryExpr5925 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_p_ValidateExpr_in_p_ValueExpr5991 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_p_PathExpr_in_p_ValueExpr6003 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_p_ExtensionExpr_in_p_ValueExpr6015 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_set_in_p_GeneralComp0 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_EQ_in_p_ValueComp6094 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_NE_in_p_ValueComp6100 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_LT_in_p_ValueComp6106 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_LE_in_p_ValueComp6112 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_GT_in_p_ValueComp6118 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_GE_in_p_ValueComp6124 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_IS_in_p_NodeComp6157 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_SMALLER_SMALLER_in_p_NodeComp6163 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_GREATER_GREATER_in_p_NodeComp6167 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_VALIDATE_in_p_ValidateExpr6197 = new BitSet(new long[]{0x0000000000080000L,0x0000000400000008L,0x0000000000000000L,0x0001000000000000L});
    public static final BitSet FOLLOW_p_ValidationMode_in_p_ValidateExpr6201 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0001000000000000L});
    public static final BitSet FOLLOW_LBRACKET_in_p_ValidateExpr6204 = new BitSet(new long[]{0xFFFFFFFFFFFF0000L,0x7FDFFFFFFFFFFFFFL,0xFFFFFFFFFFFFFFFFL,0x3C00BFFDFFFFBFFFL,0x0000007E04C80078L,0x0000001000000000L});
    public static final BitSet FOLLOW_pm_Expr_in_p_ValidateExpr6206 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0002000000000000L});
    public static final BitSet FOLLOW_RBRACKET_in_p_ValidateExpr6208 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_LAX_in_p_ValidationMode6239 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_STRICT_in_p_ValidationMode6245 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_AS_in_p_ValidationMode6252 = new BitSet(new long[]{0xFFFFFFFFFFFF0000L,0x7FDFFFFFFFFFFFFFL,0xFFFFFFFFFFFFFFFFL,0x00001FFDFFFFBFFFL,0x0000000004000000L,0x0000001000000000L});
    public static final BitSet FOLLOW_p_QName_in_p_ValidationMode6254 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_L_Pragma_in_p_ExtensionExpr6286 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0001000000000000L,0x0000000200000000L});
    public static final BitSet FOLLOW_LBRACKET_in_p_ExtensionExpr6289 = new BitSet(new long[]{0xFFFFFFFFFFFF0000L,0x7FDFFFFFFFFFFFFFL,0xFFFFFFFFFFFFFFFFL,0x3C02BFFDFFFFBFFFL,0x0000007E04C80078L,0x0000001000000000L});
    public static final BitSet FOLLOW_pm_Expr_in_p_ExtensionExpr6291 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0002000000000000L});
    public static final BitSet FOLLOW_RBRACKET_in_p_ExtensionExpr6294 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_SLASH_in_p_PathExpr6336 = new BitSet(new long[]{0xFFFFFFFFFFFF0000L,0x7FDFFFFFFFFFFFFFL,0xFFFFFFFFFFFFFFFFL,0x2400BFFDFFFFBFFFL,0x0000007C04C80078L,0x0000001000000000L});
    public static final BitSet FOLLOW_p_RelativePathExpr_in_p_PathExpr6338 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_SLASH_in_p_PathExpr6351 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_SLASH_SLASH_in_p_PathExpr6363 = new BitSet(new long[]{0xFFFFFFFFFFFF0000L,0x7FDFFFFFFFFFFFFFL,0xFFFFFFFFFFFFFFFFL,0x2400BFFDFFFFBFFFL,0x0000007C04C80078L,0x0000001000000000L});
    public static final BitSet FOLLOW_p_RelativePathExpr_in_p_PathExpr6365 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_p_RelativePathExpr_in_p_PathExpr6377 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_p_StepExpr_in_p_RelativePathExpr6405 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000018L});
    public static final BitSet FOLLOW_set_in_p_RelativePathExpr6408 = new BitSet(new long[]{0xFFFFFFFFFFFF0000L,0x7FDFFFFFFFFFFFFFL,0xFFFFFFFFFFFFFFFFL,0x2400BFFDFFFFBFFFL,0x0000007C04C80078L,0x0000001000000000L});
    public static final BitSet FOLLOW_p_StepExpr_in_p_RelativePathExpr6416 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000018L});
    public static final BitSet FOLLOW_p_AxisStep_in_p_StepExpr6444 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_p_FilterExpr_in_p_StepExpr6456 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_p_ReverseStep_in_p_AxisStep6483 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0004000000000000L});
    public static final BitSet FOLLOW_p_ForwardStep_in_p_AxisStep6487 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0004000000000000L});
    public static final BitSet FOLLOW_p_PredicateList_in_p_AxisStep6490 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_p_ForwardAxis_in_p_ForwardStep6517 = new BitSet(new long[]{0xFFFFFFFFFFFF0000L,0x7FDFFFFFFFFFFFFFL,0xFFFFFFFFFFFFFFFFL,0x04001FFDFFFFBFFFL,0x0000000004080040L,0x0000001000000000L});
    public static final BitSet FOLLOW_p_NodeTest_in_p_ForwardStep6519 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_p_AbbrevForwardStep_in_p_ForwardStep6524 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_CHILD_in_p_ForwardAxis6550 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000100L});
    public static final BitSet FOLLOW_COLON_COLON_in_p_ForwardAxis6552 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_DESCENDANT_in_p_ForwardAxis6564 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000100L});
    public static final BitSet FOLLOW_COLON_COLON_in_p_ForwardAxis6566 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ATTRIBUTE_in_p_ForwardAxis6578 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000100L});
    public static final BitSet FOLLOW_COLON_COLON_in_p_ForwardAxis6580 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_SELF_in_p_ForwardAxis6592 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000100L});
    public static final BitSet FOLLOW_COLON_COLON_in_p_ForwardAxis6594 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_DESCENDANT_OR_SELF_in_p_ForwardAxis6606 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000100L});
    public static final BitSet FOLLOW_COLON_COLON_in_p_ForwardAxis6608 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_FOLLOWING_SIBLING_in_p_ForwardAxis6620 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000100L});
    public static final BitSet FOLLOW_COLON_COLON_in_p_ForwardAxis6622 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_FOLLOWING_in_p_ForwardAxis6634 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000100L});
    public static final BitSet FOLLOW_COLON_COLON_in_p_ForwardAxis6636 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ATTR_SIGN_in_p_AbbrevForwardStep6662 = new BitSet(new long[]{0xFFFFFFFFFFFF0000L,0x7FDFFFFFFFFFFFFFL,0xFFFFFFFFFFFFFFFFL,0x04001FFDFFFFBFFFL,0x0000000004080040L,0x0000001000000000L});
    public static final BitSet FOLLOW_p_NodeTest_in_p_AbbrevForwardStep6665 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_p_ReverseAxis_in_p_ReverseStep6692 = new BitSet(new long[]{0xFFFFFFFFFFFF0000L,0x7FDFFFFFFFFFFFFFL,0xFFFFFFFFFFFFFFFFL,0x04001FFDFFFFBFFFL,0x0000000004080040L,0x0000001000000000L});
    public static final BitSet FOLLOW_p_NodeTest_in_p_ReverseStep6694 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_p_AbbrevReverseStep_in_p_ReverseStep6699 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_PARENT_in_p_ReverseAxis6725 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000100L});
    public static final BitSet FOLLOW_COLON_COLON_in_p_ReverseAxis6727 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ANCESTOR_in_p_ReverseAxis6739 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000100L});
    public static final BitSet FOLLOW_COLON_COLON_in_p_ReverseAxis6741 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_PRECEDING_SIBLING_in_p_ReverseAxis6753 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000100L});
    public static final BitSet FOLLOW_COLON_COLON_in_p_ReverseAxis6755 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_PRECEDING_in_p_ReverseAxis6767 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000100L});
    public static final BitSet FOLLOW_COLON_COLON_in_p_ReverseAxis6769 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ANCESTOR_OR_SELF_in_p_ReverseAxis6781 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000100L});
    public static final BitSet FOLLOW_COLON_COLON_in_p_ReverseAxis6783 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_DOT_DOT_in_p_AbbrevReverseStep6809 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_p_KindTest_in_p_NodeTest6835 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_p_NameTest_in_p_NodeTest6839 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_p_QName_in_p_NameTest6865 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_p_Wildcard_in_p_NameTest6869 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_STAR_in_p_Wildcard6899 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000080L});
    public static final BitSet FOLLOW_COLON_in_p_Wildcard6902 = new BitSet(new long[]{0xFFFFFFFFFFFF0000L,0x7FDFFFFFFFFFFFFFL,0xFFFFFFFFFFFFFFFFL,0x00001FFDFFFFBFFFL,0x0000000004000000L,0x0000001000000000L});
    public static final BitSet FOLLOW_p_NCName_in_p_Wildcard6904 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_p_NCName_in_p_Wildcard6911 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000080L});
    public static final BitSet FOLLOW_COLON_in_p_Wildcard6913 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0400000000000000L});
    public static final BitSet FOLLOW_STAR_in_p_Wildcard6915 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_p_PrimaryExpr_in_p_FilterExpr6956 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0004000000000000L});
    public static final BitSet FOLLOW_p_PredicateList_in_p_FilterExpr6958 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_p_Predicate_in_p_PredicateList6986 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0004000000000000L});
    public static final BitSet FOLLOW_LSQUARE_in_p_Predicate7015 = new BitSet(new long[]{0xFFFFFFFFFFFF0000L,0x7FDFFFFFFFFFFFFFL,0xFFFFFFFFFFFFFFFFL,0x3C00BFFDFFFFBFFFL,0x0000007E04C80078L,0x0000001000000000L});
    public static final BitSet FOLLOW_pm_Expr_in_p_Predicate7017 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0008000000000000L});
    public static final BitSet FOLLOW_RSQUARE_in_p_Predicate7019 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_p_Literal_in_p_PrimaryExpr7047 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_p_VarRef_in_p_PrimaryExpr7059 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_p_ParenthesizedExpr_in_p_PrimaryExpr7071 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_p_ContextItemExpr_in_p_PrimaryExpr7083 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_p_FunctionCall_in_p_PrimaryExpr7095 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_p_OrderedExpr_in_p_PrimaryExpr7107 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_p_UnorderedExpr_in_p_PrimaryExpr7119 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_p_Constructor_in_p_PrimaryExpr7131 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_p_NumericLiteral_in_p_Literal7159 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_p_StringLiteral_in_p_Literal7163 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_set_in_p_NumericLiteral0 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_DOLLAR_in_p_VarRef7235 = new BitSet(new long[]{0xFFFFFFFFFFFF0000L,0x7FDFFFFFFFFFFFFFL,0xFFFFFFFFFFFFFFFFL,0x00001FFDFFFFBFFFL,0x0000000004000000L,0x0000001000000000L});
    public static final BitSet FOLLOW_p_VarName_in_p_VarRef7237 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_p_QName_in_p_VarName7265 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_LPAREN_in_p_ParenthesizedExpr7293 = new BitSet(new long[]{0xFFFFFFFFFFFF0000L,0x7FDFFFFFFFFFFFFFL,0xFFFFFFFFFFFFFFFFL,0x3C00FFFDFFFFBFFFL,0x0000007E04C80078L,0x0000001000000000L});
    public static final BitSet FOLLOW_pm_Expr_in_p_ParenthesizedExpr7295 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000400000000000L});
    public static final BitSet FOLLOW_RPAREN_in_p_ParenthesizedExpr7298 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_DOT_in_p_ContextItemExpr7326 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ORDERED_in_p_OrderedExpr7356 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0001000000000000L});
    public static final BitSet FOLLOW_LBRACKET_in_p_OrderedExpr7360 = new BitSet(new long[]{0xFFFFFFFFFFFF0000L,0x7FDFFFFFFFFFFFFFL,0xFFFFFFFFFFFFFFFFL,0x3C00BFFDFFFFBFFFL,0x0000007E04C80078L,0x0000001000000000L});
    public static final BitSet FOLLOW_pm_Expr_in_p_OrderedExpr7362 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0002000000000000L});
    public static final BitSet FOLLOW_RBRACKET_in_p_OrderedExpr7364 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_UNORDERED_in_p_UnorderedExpr7394 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0001000000000000L});
    public static final BitSet FOLLOW_LBRACKET_in_p_UnorderedExpr7398 = new BitSet(new long[]{0xFFFFFFFFFFFF0000L,0x7FDFFFFFFFFFFFFFL,0xFFFFFFFFFFFFFFFFL,0x3C00BFFDFFFFBFFFL,0x0000007E04C80078L,0x0000001000000000L});
    public static final BitSet FOLLOW_pm_Expr_in_p_UnorderedExpr7400 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0002000000000000L});
    public static final BitSet FOLLOW_RBRACKET_in_p_UnorderedExpr7402 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_p_FQName_in_p_FunctionCall7431 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000200000000000L});
    public static final BitSet FOLLOW_LPAREN_in_p_FunctionCall7433 = new BitSet(new long[]{0xFFFFFFFFFFFF0000L,0x7FDFFFFFFFFFFFFFL,0xFFFFFFFFFFFFFFFFL,0x3C00FFFDFFFFBFFFL,0x0000007E04C80078L,0x0000001000000000L});
    public static final BitSet FOLLOW_p_ExprSingle_in_p_FunctionCall7436 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0100400000000000L});
    public static final BitSet FOLLOW_COMMA_in_p_FunctionCall7439 = new BitSet(new long[]{0xFFFFFFFFFFFF0000L,0x7FDFFFFFFFFFFFFFL,0xFFFFFFFFFFFFFFFFL,0x3C00BFFDFFFFBFFFL,0x0000007E04C80078L,0x0000001000000000L});
    public static final BitSet FOLLOW_p_ExprSingle_in_p_FunctionCall7441 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0100400000000000L});
    public static final BitSet FOLLOW_RPAREN_in_p_FunctionCall7447 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_p_DirectConstructor_in_p_Constructor7479 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_p_ComputedConstructor_in_p_Constructor7483 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_p_DirElemConstructor_in_p_DirectConstructor7511 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_L_DirCommentConstructor_in_p_DirectConstructor7523 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_L_DirPIConstructor_in_p_DirectConstructor7535 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_SMALLER_in_p_DirElemConstructor7564 = new BitSet(new long[]{0xFFFFFFFFFFFF0000L,0x7FDFFFFFFFFFFFFFL,0xFFFFFFFFFFFFFFFFL,0x00001FFDFFFFBFFFL,0x0000000004000000L,0x0000001000000000L});
    public static final BitSet FOLLOW_p_QName_in_p_DirElemConstructor7580 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x4000000000000000L,0x0000000080000200L});
    public static final BitSet FOLLOW_p_DirAttributeList_in_p_DirElemConstructor7582 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x4000000000000000L,0x0000000000000200L});
    public static final BitSet FOLLOW_EMPTY_CLOSE_TAG_in_p_DirElemConstructor7598 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_GREATER_in_p_DirElemConstructor7603 = new BitSet(new long[]{0x0000000000000FC0L,0x0000000000000000L,0x0000000000000000L,0x2001000000000000L,0x0000000C00000400L});
    public static final BitSet FOLLOW_pm_DirElemContent_in_p_DirElemConstructor7605 = new BitSet(new long[]{0x0000000000000FC0L,0x0000000000000000L,0x0000000000000000L,0x2001000000000000L,0x0000000C00000400L});
    public static final BitSet FOLLOW_CLOSE_TAG_in_p_DirElemConstructor7608 = new BitSet(new long[]{0xFFFFFFFFFFFF0000L,0x7FDFFFFFFFFFFFFFL,0xFFFFFFFFFFFFFFFFL,0x00001FFDFFFFBFFFL,0x0000000004000000L,0x0000001000000000L});
    public static final BitSet FOLLOW_p_QName_in_p_DirElemConstructor7610 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x4000000000000000L,0x0000000080000000L});
    public static final BitSet FOLLOW_S_in_p_DirElemConstructor7612 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x4000000000000000L});
    public static final BitSet FOLLOW_GREATER_in_p_DirElemConstructor7615 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_S_in_p_DirAttributeList7692 = new BitSet(new long[]{0xFFFFFFFFFFFF0002L,0x7FDFFFFFFFFFFFFFL,0xFFFFFFFFFFFFFFFFL,0x00001FFDFFFFBFFFL,0x0000000084000000L,0x0000001000000000L});
    public static final BitSet FOLLOW_p_QName_in_p_DirAttributeList7695 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0010000000000000L,0x0000000080000000L});
    public static final BitSet FOLLOW_S_in_p_DirAttributeList7697 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0010000000000000L});
    public static final BitSet FOLLOW_EQUAL_in_p_DirAttributeList7700 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000080C00000L});
    public static final BitSet FOLLOW_S_in_p_DirAttributeList7702 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000080C00000L});
    public static final BitSet FOLLOW_p_DirAttributeValue_in_p_DirAttributeList7705 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000080000000L});
    public static final BitSet FOLLOW_QUOT_in_p_DirAttributeValue7736 = new BitSet(new long[]{0x0000000000002F10L,0x0000000000000000L,0x0000000000000000L,0x0001000000000000L,0x0000000000C00000L});
    public static final BitSet FOLLOW_ESCAPE_QUOT_in_p_DirAttributeValue7739 = new BitSet(new long[]{0x0000000000002F10L,0x0000000000000000L,0x0000000000000000L,0x0001000000000000L,0x0000000000C00000L});
    public static final BitSet FOLLOW_APOS_in_p_DirAttributeValue7743 = new BitSet(new long[]{0x0000000000002F10L,0x0000000000000000L,0x0000000000000000L,0x0001000000000000L,0x0000000000C00000L});
    public static final BitSet FOLLOW_pm_QuotAttrValueContent_in_p_DirAttributeValue7747 = new BitSet(new long[]{0x0000000000002F10L,0x0000000000000000L,0x0000000000000000L,0x0001000000000000L,0x0000000000C00000L});
    public static final BitSet FOLLOW_QUOT_in_p_DirAttributeValue7751 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_APOS_in_p_DirAttributeValue7790 = new BitSet(new long[]{0x0000000000001F20L,0x0000000000000000L,0x0000000000000000L,0x0001000000000000L,0x0000000000C00000L});
    public static final BitSet FOLLOW_ESCAPE_APOS_in_p_DirAttributeValue7793 = new BitSet(new long[]{0x0000000000001F20L,0x0000000000000000L,0x0000000000000000L,0x0001000000000000L,0x0000000000C00000L});
    public static final BitSet FOLLOW_QUOT_in_p_DirAttributeValue7797 = new BitSet(new long[]{0x0000000000001F20L,0x0000000000000000L,0x0000000000000000L,0x0001000000000000L,0x0000000000C00000L});
    public static final BitSet FOLLOW_pm_AposAttrValueContent_in_p_DirAttributeValue7801 = new BitSet(new long[]{0x0000000000001F20L,0x0000000000000000L,0x0000000000000000L,0x0001000000000000L,0x0000000000C00000L});
    public static final BitSet FOLLOW_APOS_in_p_DirAttributeValue7805 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_pg_QuotAttrContentChar_in_pm_QuotAttrValueContent7857 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_pg_CommonContent_in_pm_QuotAttrValueContent7861 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_p_ElemEnclosedExpr_in_pm_QuotAttrValueContent7865 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_L_QuotAttrContentChar_in_pg_QuotAttrContentChar7894 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_pg_AposAttrContentChar_in_pm_AposAttrValueContent7947 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_pg_CommonContent_in_pm_AposAttrValueContent7951 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_p_ElemEnclosedExpr_in_pm_AposAttrValueContent7955 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_L_AposAttrContentChar_in_pg_AposAttrContentChar7984 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_p_DirectConstructor_in_pm_DirElemContent8035 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_L_CDataSection_in_pm_DirElemContent8047 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_p_ElemEnclosedExpr_in_pm_DirElemContent8059 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_pg_CommonContent_in_pm_DirElemContent8071 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_pg_ElementContentChar_in_pm_DirElemContent8083 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_L_ElementContentChar_in_pg_ElementContentChar8112 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_pm_CommonContent_in_pg_CommonContent8168 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_set_in_pm_CommonContent0 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_LBRACKET_in_p_ElemEnclosedExpr8264 = new BitSet(new long[]{0xFFFFFFFFFFFF0000L,0x7FDFFFFFFFFFFFFFL,0xFFFFFFFFFFFFFFFFL,0x3C00BFFDFFFFBFFFL,0x0000007E04C80078L,0x0000001000000000L});
    public static final BitSet FOLLOW_pm_Expr_in_p_ElemEnclosedExpr8280 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0002000000000000L});
    public static final BitSet FOLLOW_RBRACKET_in_p_ElemEnclosedExpr8294 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_p_CompDocConstructor_in_p_ComputedConstructor8346 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_p_CompElemConstructor_in_p_ComputedConstructor8358 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_p_CompAttrConstructor_in_p_ComputedConstructor8370 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_p_CompNamespaceConstructor_in_p_ComputedConstructor8382 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_p_CompTextConstructor_in_p_ComputedConstructor8394 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_p_CompCommentConstructor_in_p_ComputedConstructor8406 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_p_CompPIConstructor_in_p_ComputedConstructor8418 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_p_CompBinaryConstructor_in_p_ComputedConstructor8433 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_DOCUMENT_in_p_CompDocConstructor8467 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0001000000000000L});
    public static final BitSet FOLLOW_LBRACKET_in_p_CompDocConstructor8471 = new BitSet(new long[]{0xFFFFFFFFFFFF0000L,0x7FDFFFFFFFFFFFFFL,0xFFFFFFFFFFFFFFFFL,0x3C00BFFDFFFFBFFFL,0x0000007E04C80078L,0x0000001000000000L});
    public static final BitSet FOLLOW_pm_Expr_in_p_CompDocConstructor8473 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0002000000000000L});
    public static final BitSet FOLLOW_RBRACKET_in_p_CompDocConstructor8475 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ELEMENT_in_p_CompElemConstructor8516 = new BitSet(new long[]{0xFFFFFFFFFFFF0000L,0x7FDFFFFFFFFFFFFFL,0xFFFFFFFFFFFFFFFFL,0x00011FFDFFFFBFFFL,0x0000000004000000L,0x0000001000000000L});
    public static final BitSet FOLLOW_p_QName_in_p_CompElemConstructor8521 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0001000000000000L});
    public static final BitSet FOLLOW_LBRACKET_in_p_CompElemConstructor8526 = new BitSet(new long[]{0xFFFFFFFFFFFF0000L,0x7FDFFFFFFFFFFFFFL,0xFFFFFFFFFFFFFFFFL,0x3C00BFFDFFFFBFFFL,0x0000007E04C80078L,0x0000001000000000L});
    public static final BitSet FOLLOW_pm_Expr_in_p_CompElemConstructor8528 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0002000000000000L});
    public static final BitSet FOLLOW_RBRACKET_in_p_CompElemConstructor8530 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0001000000000000L});
    public static final BitSet FOLLOW_LBRACKET_in_p_CompElemConstructor8534 = new BitSet(new long[]{0xFFFFFFFFFFFF0000L,0x7FDFFFFFFFFFFFFFL,0xFFFFFFFFFFFFFFFFL,0x3C02BFFDFFFFBFFFL,0x0000007E04C80078L,0x0000001000000000L});
    public static final BitSet FOLLOW_pm_Expr_in_p_CompElemConstructor8536 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0002000000000000L});
    public static final BitSet FOLLOW_RBRACKET_in_p_CompElemConstructor8539 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ATTRIBUTE_in_p_CompAttrConstructor8572 = new BitSet(new long[]{0xFFFFFFFFFFFF0000L,0x7FDFFFFFFFFFFFFFL,0xFFFFFFFFFFFFFFFFL,0x00011FFDFFFFBFFFL,0x0000000004000000L,0x0000001000000000L});
    public static final BitSet FOLLOW_p_QName_in_p_CompAttrConstructor8577 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0001000000000000L});
    public static final BitSet FOLLOW_LBRACKET_in_p_CompAttrConstructor8582 = new BitSet(new long[]{0xFFFFFFFFFFFF0000L,0x7FDFFFFFFFFFFFFFL,0xFFFFFFFFFFFFFFFFL,0x3C00BFFDFFFFBFFFL,0x0000007E04C80078L,0x0000001000000000L});
    public static final BitSet FOLLOW_pm_Expr_in_p_CompAttrConstructor8584 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0002000000000000L});
    public static final BitSet FOLLOW_RBRACKET_in_p_CompAttrConstructor8586 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0001000000000000L});
    public static final BitSet FOLLOW_LBRACKET_in_p_CompAttrConstructor8590 = new BitSet(new long[]{0xFFFFFFFFFFFF0000L,0x7FDFFFFFFFFFFFFFL,0xFFFFFFFFFFFFFFFFL,0x3C02BFFDFFFFBFFFL,0x0000007E04C80078L,0x0000001000000000L});
    public static final BitSet FOLLOW_pm_Expr_in_p_CompAttrConstructor8592 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0002000000000000L});
    public static final BitSet FOLLOW_RBRACKET_in_p_CompAttrConstructor8595 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_NAMESPACE_in_p_CompNamespaceConstructor8623 = new BitSet(new long[]{0xFFFFFFFFFFFF0000L,0x7FDFFFFFFFFFFFFFL,0xFFFFFFFFFFFFFFFFL,0x00011FFDFFFFBFFFL,0x0000000004000000L,0x0000001000000000L});
    public static final BitSet FOLLOW_p_NCName_in_p_CompNamespaceConstructor8628 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0001000000000000L});
    public static final BitSet FOLLOW_LBRACKET_in_p_CompNamespaceConstructor8633 = new BitSet(new long[]{0xFFFFFFFFFFFF0000L,0x7FDFFFFFFFFFFFFFL,0xFFFFFFFFFFFFFFFFL,0x3C00BFFDFFFFBFFFL,0x0000007E04C80078L,0x0000001000000000L});
    public static final BitSet FOLLOW_pm_Expr_in_p_CompNamespaceConstructor8635 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0002000000000000L});
    public static final BitSet FOLLOW_RBRACKET_in_p_CompNamespaceConstructor8637 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0001000000000000L});
    public static final BitSet FOLLOW_LBRACKET_in_p_CompNamespaceConstructor8641 = new BitSet(new long[]{0xFFFFFFFFFFFF0000L,0x7FDFFFFFFFFFFFFFL,0xFFFFFFFFFFFFFFFFL,0x3C02BFFDFFFFBFFFL,0x0000007E04C80078L,0x0000001000000000L});
    public static final BitSet FOLLOW_pm_Expr_in_p_CompNamespaceConstructor8643 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0002000000000000L});
    public static final BitSet FOLLOW_RBRACKET_in_p_CompNamespaceConstructor8646 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_TEXT_in_p_CompTextConstructor8682 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0001000000000000L});
    public static final BitSet FOLLOW_LBRACKET_in_p_CompTextConstructor8686 = new BitSet(new long[]{0xFFFFFFFFFFFF0000L,0x7FDFFFFFFFFFFFFFL,0xFFFFFFFFFFFFFFFFL,0x3C00BFFDFFFFBFFFL,0x0000007E04C80078L,0x0000001000000000L});
    public static final BitSet FOLLOW_pm_Expr_in_p_CompTextConstructor8688 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0002000000000000L});
    public static final BitSet FOLLOW_RBRACKET_in_p_CompTextConstructor8690 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_BINARY_in_p_CompBinaryConstructor8720 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0001000000000000L});
    public static final BitSet FOLLOW_LBRACKET_in_p_CompBinaryConstructor8724 = new BitSet(new long[]{0xFFFFFFFFFFFF0000L,0x7FDFFFFFFFFFFFFFL,0xFFFFFFFFFFFFFFFFL,0x3C00BFFDFFFFBFFFL,0x0000007E04C80078L,0x0000001000000000L});
    public static final BitSet FOLLOW_pm_Expr_in_p_CompBinaryConstructor8726 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0002000000000000L});
    public static final BitSet FOLLOW_RBRACKET_in_p_CompBinaryConstructor8728 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_COMMENT_in_p_CompCommentConstructor8758 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0001000000000000L});
    public static final BitSet FOLLOW_LBRACKET_in_p_CompCommentConstructor8762 = new BitSet(new long[]{0xFFFFFFFFFFFF0000L,0x7FDFFFFFFFFFFFFFL,0xFFFFFFFFFFFFFFFFL,0x3C00BFFDFFFFBFFFL,0x0000007E04C80078L,0x0000001000000000L});
    public static final BitSet FOLLOW_pm_Expr_in_p_CompCommentConstructor8764 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0002000000000000L});
    public static final BitSet FOLLOW_RBRACKET_in_p_CompCommentConstructor8766 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_PROCESSING_INSTRUCTION_in_p_CompPIConstructor8797 = new BitSet(new long[]{0xFFFFFFFFFFFF0000L,0x7FDFFFFFFFFFFFFFL,0xFFFFFFFFFFFFFFFFL,0x00011FFDFFFFBFFFL,0x0000000004000000L,0x0000001000000000L});
    public static final BitSet FOLLOW_p_NCName_in_p_CompPIConstructor8802 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0001000000000000L});
    public static final BitSet FOLLOW_LBRACKET_in_p_CompPIConstructor8807 = new BitSet(new long[]{0xFFFFFFFFFFFF0000L,0x7FDFFFFFFFFFFFFFL,0xFFFFFFFFFFFFFFFFL,0x3C00BFFDFFFFBFFFL,0x0000007E04C80078L,0x0000001000000000L});
    public static final BitSet FOLLOW_pm_Expr_in_p_CompPIConstructor8809 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0002000000000000L});
    public static final BitSet FOLLOW_RBRACKET_in_p_CompPIConstructor8811 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0001000000000000L});
    public static final BitSet FOLLOW_LBRACKET_in_p_CompPIConstructor8815 = new BitSet(new long[]{0xFFFFFFFFFFFF0000L,0x7FDFFFFFFFFFFFFFL,0xFFFFFFFFFFFFFFFFL,0x3C02BFFDFFFFBFFFL,0x0000007E04C80078L,0x0000001000000000L});
    public static final BitSet FOLLOW_pm_Expr_in_p_CompPIConstructor8817 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0002000000000000L});
    public static final BitSet FOLLOW_RBRACKET_in_p_CompPIConstructor8820 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_p_AtomicType_in_p_SingleType8848 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0200000000000000L});
    public static final BitSet FOLLOW_QUESTION_in_p_SingleType8850 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_AS_in_p_TypeDeclaration8881 = new BitSet(new long[]{0xFFFFFFFFFFFF0000L,0x7FDFFFFFFFFFFFFFL,0xFFFFFFFFFFFFFFFFL,0x00009FFDFFFFBFFFL,0x0000000004000000L,0x0000001000000000L});
    public static final BitSet FOLLOW_p_SequenceType_in_p_TypeDeclaration8887 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_EMPTY_SEQUENCE_in_p_SequenceType8942 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000200000000000L});
    public static final BitSet FOLLOW_LPAREN_in_p_SequenceType8948 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000400000000000L});
    public static final BitSet FOLLOW_RPAREN_in_p_SequenceType8952 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_p_ItemType_in_p_SequenceType9001 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0E00000000000000L});
    public static final BitSet FOLLOW_p_OccurrenceIndicator_in_p_SequenceType9012 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_set_in_p_OccurrenceIndicator0 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_p_KindTest_in_p_ItemType9114 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_BINARY_in_p_ItemType9154 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000200000000000L});
    public static final BitSet FOLLOW_LPAREN_in_p_ItemType9156 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000400000000000L});
    public static final BitSet FOLLOW_RPAREN_in_p_ItemType9158 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ITEM_in_p_ItemType9200 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000200000000000L});
    public static final BitSet FOLLOW_LPAREN_in_p_ItemType9202 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000400000000000L});
    public static final BitSet FOLLOW_RPAREN_in_p_ItemType9204 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_p_AtomicType_in_p_ItemType9245 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_p_QName_in_p_AtomicType9271 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_p_DocumentTest_in_p_KindTest9321 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_p_ElementTest_in_p_KindTest9333 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_p_AttributeTest_in_p_KindTest9345 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_p_SchemaElementTest_in_p_KindTest9357 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_p_SchemaAttributeTest_in_p_KindTest9369 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_p_NamespaceNodeTest_in_p_KindTest9381 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_p_PITest_in_p_KindTest9393 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_p_CommentTest_in_p_KindTest9405 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_p_TextTest_in_p_KindTest9417 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_p_AnyKindTest_in_p_KindTest9429 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_NODE_in_p_AnyKindTest9457 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000200000000000L});
    public static final BitSet FOLLOW_LPAREN_in_p_AnyKindTest9459 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000400000000000L});
    public static final BitSet FOLLOW_RPAREN_in_p_AnyKindTest9461 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_DOCUMENT_NODE_in_p_DocumentTest9489 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000200000000000L});
    public static final BitSet FOLLOW_LPAREN_in_p_DocumentTest9491 = new BitSet(new long[]{0x0000040000000000L,0x0000000040000000L,0x0000000000000000L,0x0000400000000000L});
    public static final BitSet FOLLOW_p_ElementTest_in_p_DocumentTest9494 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000400000000000L});
    public static final BitSet FOLLOW_p_SchemaElementTest_in_p_DocumentTest9498 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000400000000000L});
    public static final BitSet FOLLOW_RPAREN_in_p_DocumentTest9502 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_TEXT_in_p_TextTest9522 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000200000000000L});
    public static final BitSet FOLLOW_LPAREN_in_p_TextTest9524 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000400000000000L});
    public static final BitSet FOLLOW_RPAREN_in_p_TextTest9526 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_COMMENT_in_p_CommentTest9554 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000200000000000L});
    public static final BitSet FOLLOW_LPAREN_in_p_CommentTest9556 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000400000000000L});
    public static final BitSet FOLLOW_RPAREN_in_p_CommentTest9558 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_NAMESPACE_NODE_in_p_NamespaceNodeTest9584 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000200000000000L});
    public static final BitSet FOLLOW_LPAREN_in_p_NamespaceNodeTest9586 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000400000000000L});
    public static final BitSet FOLLOW_RPAREN_in_p_NamespaceNodeTest9588 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_PROCESSING_INSTRUCTION_in_p_PITest9616 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000200000000000L});
    public static final BitSet FOLLOW_LPAREN_in_p_PITest9618 = new BitSet(new long[]{0xFFFFFFFFFFFF0000L,0x7FDFFFFFFFFFFFFFL,0xFFFFFFFFFFFFFFFFL,0x00005FFDFFFFBFFFL,0x0000000004C00000L,0x0000001000000000L});
    public static final BitSet FOLLOW_p_NCName_in_p_PITest9621 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000400000000000L});
    public static final BitSet FOLLOW_p_StringLiteral_in_p_PITest9625 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000400000000000L});
    public static final BitSet FOLLOW_RPAREN_in_p_PITest9629 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ATTRIBUTE_in_p_AttributeTest9657 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000200000000000L});
    public static final BitSet FOLLOW_LPAREN_in_p_AttributeTest9659 = new BitSet(new long[]{0xFFFFFFFFFFFF0000L,0x7FDFFFFFFFFFFFFFL,0xFFFFFFFFFFFFFFFFL,0x04005FFDFFFFBFFFL,0x0000000004000000L,0x0000001000000000L});
    public static final BitSet FOLLOW_p_AttribNameOrWildcard_in_p_AttributeTest9662 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0100400000000000L});
    public static final BitSet FOLLOW_COMMA_in_p_AttributeTest9665 = new BitSet(new long[]{0xFFFFFFFFFFFF0000L,0x7FDFFFFFFFFFFFFFL,0xFFFFFFFFFFFFFFFFL,0x00001FFDFFFFBFFFL,0x0000000004000000L,0x0000001000000000L});
    public static final BitSet FOLLOW_p_TypeName_in_p_AttributeTest9667 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000400000000000L});
    public static final BitSet FOLLOW_RPAREN_in_p_AttributeTest9673 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_p_QName_in_p_AttribNameOrWildcard9703 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_STAR_in_p_AttribNameOrWildcard9707 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_SCHEMA_ATTRIBUTE_in_p_SchemaAttributeTest9735 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000200000000000L});
    public static final BitSet FOLLOW_LPAREN_in_p_SchemaAttributeTest9737 = new BitSet(new long[]{0xFFFFFFFFFFFF0000L,0x7FDFFFFFFFFFFFFFL,0xFFFFFFFFFFFFFFFFL,0x00001FFDFFFFBFFFL,0x0000000004000000L,0x0000001000000000L});
    public static final BitSet FOLLOW_p_AttributeDeclaration_in_p_SchemaAttributeTest9739 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000400000000000L});
    public static final BitSet FOLLOW_RPAREN_in_p_SchemaAttributeTest9741 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_p_AttributeName_in_p_AttributeDeclaration9767 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ELEMENT_in_p_ElementTest9795 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000200000000000L});
    public static final BitSet FOLLOW_LPAREN_in_p_ElementTest9797 = new BitSet(new long[]{0xFFFFFFFFFFFF0000L,0x7FDFFFFFFFFFFFFFL,0xFFFFFFFFFFFFFFFFL,0x04005FFDFFFFBFFFL,0x0000000004000000L,0x0000001000000000L});
    public static final BitSet FOLLOW_p_ElementNameOrWildcard_in_p_ElementTest9800 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0100400000000000L});
    public static final BitSet FOLLOW_COMMA_in_p_ElementTest9803 = new BitSet(new long[]{0xFFFFFFFFFFFF0000L,0x7FDFFFFFFFFFFFFFL,0xFFFFFFFFFFFFFFFFL,0x00001FFDFFFFBFFFL,0x0000000004000000L,0x0000001000000000L});
    public static final BitSet FOLLOW_p_TypeName_in_p_ElementTest9805 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0200400000000000L});
    public static final BitSet FOLLOW_QUESTION_in_p_ElementTest9807 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000400000000000L});
    public static final BitSet FOLLOW_RPAREN_in_p_ElementTest9814 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_p_QName_in_p_ElementNameOrWildcard9842 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_STAR_in_p_ElementNameOrWildcard9846 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_SCHEMA_ELEMENT_in_p_SchemaElementTest9866 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000200000000000L});
    public static final BitSet FOLLOW_LPAREN_in_p_SchemaElementTest9868 = new BitSet(new long[]{0xFFFFFFFFFFFF0000L,0x7FDFFFFFFFFFFFFFL,0xFFFFFFFFFFFFFFFFL,0x00001FFDFFFFBFFFL,0x0000000004000000L,0x0000001000000000L});
    public static final BitSet FOLLOW_p_ElementDeclaration_in_p_SchemaElementTest9870 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000400000000000L});
    public static final BitSet FOLLOW_RPAREN_in_p_SchemaElementTest9872 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_p_ElementName_in_p_ElementDeclaration9898 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_p_QName_in_p_AttributeName9926 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_p_QName_in_p_ElementName9954 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_p_QName_in_p_TypeName9982 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_p_FTOr_in_p_FTSelection10011 = new BitSet(new long[]{0x0000000000200002L,0x0000000000080000L,0x080001C000004000L});
    public static final BitSet FOLLOW_p_FTPosFilter_in_p_FTSelection10013 = new BitSet(new long[]{0x0000000000200002L,0x0000000000080000L,0x080001C000004000L});
    public static final BitSet FOLLOW_WEIGHT_in_p_FTWeight10042 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0001000000000000L});
    public static final BitSet FOLLOW_LBRACKET_in_p_FTWeight10046 = new BitSet(new long[]{0xFFFFFFFFFFFF0000L,0x7FDFFFFFFFFFFFFFL,0xFFFFFFFFFFFFFFFFL,0x3C00BFFDFFFFBFFFL,0x0000007E04C80078L,0x0000001000000000L});
    public static final BitSet FOLLOW_pm_Expr_in_p_FTWeight10048 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0002000000000000L});
    public static final BitSet FOLLOW_RBRACKET_in_p_FTWeight10050 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_p_FTAnd_in_p_FTOr10076 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000400000000000L});
    public static final BitSet FOLLOW_FTOR_in_p_FTOr10082 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000200000000000L,0x0001200000000000L,0x0000000000C00000L});
    public static final BitSet FOLLOW_p_FTAnd_in_p_FTOr10086 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000400000000000L});
    public static final BitSet FOLLOW_p_FTMildNot_in_p_FTAnd10115 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000100000000000L});
    public static final BitSet FOLLOW_FTAND_in_p_FTAnd10121 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000200000000000L,0x0001200000000000L,0x0000000000C00000L});
    public static final BitSet FOLLOW_p_FTMildNot_in_p_FTAnd10125 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000100000000000L});
    public static final BitSet FOLLOW_p_FTUnaryNot_in_p_FTMildNot10154 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0020000000000000L});
    public static final BitSet FOLLOW_NOT_in_p_FTMildNot10160 = new BitSet(new long[]{0x2000000000000000L});
    public static final BitSet FOLLOW_IN_in_p_FTMildNot10164 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000200000000000L,0x0001200000000000L,0x0000000000C00000L});
    public static final BitSet FOLLOW_p_FTUnaryNot_in_p_FTMildNot10168 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0020000000000000L});
    public static final BitSet FOLLOW_FTNOT_in_p_FTUnaryNot10201 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000200000000000L,0x0001200000000000L,0x0000000000C00000L});
    public static final BitSet FOLLOW_p_FTPrimaryWithOptions_in_p_FTUnaryNot10208 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_p_FTPrimary_in_p_FTPrimaryWithOptions10234 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000060L});
    public static final BitSet FOLLOW_p_FTMatchOptions_in_p_FTPrimaryWithOptions10236 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000040L});
    public static final BitSet FOLLOW_p_FTWeight_in_p_FTPrimaryWithOptions10239 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_p_TryClause_in_p_TryCatchExpr10271 = new BitSet(new long[]{0x0000000000000000L,0x0001000000000000L});
    public static final BitSet FOLLOW_p_CatchClause_in_p_TryCatchExpr10273 = new BitSet(new long[]{0x0000000000000002L,0x0001000000000000L});
    public static final BitSet FOLLOW_p_FTWords_in_p_FTPrimary10301 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0040000000000000L});
    public static final BitSet FOLLOW_p_FTTimes_in_p_FTPrimary10303 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_LPAREN_in_p_FTPrimary10318 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000200000000000L,0x0001200000000000L,0x0000000000C00000L});
    public static final BitSet FOLLOW_p_FTSelection_in_p_FTPrimary10320 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000400000000000L});
    public static final BitSet FOLLOW_RPAREN_in_p_FTPrimary10322 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_p_FTWordsValue_in_p_FTWords10351 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0200000600000000L});
    public static final BitSet FOLLOW_p_FTAnyallOption_in_p_FTWords10353 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_p_StringLiteral_in_p_FTWordsValue10380 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_LBRACKET_in_p_FTWordsValue10393 = new BitSet(new long[]{0xFFFFFFFFFFFF0000L,0x7FDFFFFFFFFFFFFFL,0xFFFFFFFFFFFFFFFFL,0x3C00BFFDFFFFBFFFL,0x0000007E04C80078L,0x0000001000000000L});
    public static final BitSet FOLLOW_pm_Expr_in_p_FTWordsValue10395 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0002000000000000L});
    public static final BitSet FOLLOW_RBRACKET_in_p_FTWordsValue10397 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ANY_in_p_FTAnyallOption10439 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000200L});
    public static final BitSet FOLLOW_WORD_in_p_FTAnyallOption10443 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ALL_in_p_FTAnyallOption10452 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000400L});
    public static final BitSet FOLLOW_WORDS_in_p_FTAnyallOption10454 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_PHRASE_in_p_FTAnyallOption10462 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_OCCURS_in_p_FTTimes10494 = new BitSet(new long[]{0x0000000000200000L,0x0000000000000000L,0x0000060000000000L});
    public static final BitSet FOLLOW_p_FTRange_in_p_FTTimes10496 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000008L});
    public static final BitSet FOLLOW_TIMES_in_p_FTTimes10500 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_EXACTLY_in_p_FTRange10533 = new BitSet(new long[]{0xFFFFFFFFFFFF0000L,0x7FDFFFFFFFFFFFFFL,0xFFFFFFFFFFFFFFFFL,0x3C00BFFDFFFFBFFFL,0x0000007E04C80078L,0x0000001000000000L});
    public static final BitSet FOLLOW_p_AdditiveExpr_in_p_FTRange10535 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_AT_in_p_FTRange10553 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000020L});
    public static final BitSet FOLLOW_LEAST_in_p_FTRange10557 = new BitSet(new long[]{0xFFFFFFFFFFFF0000L,0x7FDFFFFFFFFFFFFFL,0xFFFFFFFFFFFFFFFFL,0x3C00BFFDFFFFBFFFL,0x0000007E04C80078L,0x0000001000000000L});
    public static final BitSet FOLLOW_p_AdditiveExpr_in_p_FTRange10559 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_AT_in_p_FTRange10577 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0008000000000000L});
    public static final BitSet FOLLOW_MOST_in_p_FTRange10581 = new BitSet(new long[]{0xFFFFFFFFFFFF0000L,0x7FDFFFFFFFFFFFFFL,0xFFFFFFFFFFFFFFFFL,0x3C00BFFDFFFFBFFFL,0x0000007E04C80078L,0x0000001000000000L});
    public static final BitSet FOLLOW_p_AdditiveExpr_in_p_FTRange10583 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_FROM_in_p_FTRange10601 = new BitSet(new long[]{0xFFFFFFFFFFFF0000L,0x7FDFFFFFFFFFFFFFL,0xFFFFFFFFFFFFFFFFL,0x3C00BFFDFFFFBFFFL,0x0000007E04C80078L,0x0000001000000000L});
    public static final BitSet FOLLOW_p_AdditiveExpr_in_p_FTRange10603 = new BitSet(new long[]{0x0000000000000000L,0x0000004000000000L});
    public static final BitSet FOLLOW_TO_in_p_FTRange10607 = new BitSet(new long[]{0xFFFFFFFFFFFF0000L,0x7FDFFFFFFFFFFFFFL,0xFFFFFFFFFFFFFFFFL,0x3C00BFFDFFFFBFFFL,0x0000007E04C80078L,0x0000001000000000L});
    public static final BitSet FOLLOW_p_AdditiveExpr_in_p_FTRange10609 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_p_FTOrder_in_p_FTPosFilter10640 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_p_FTWindow_in_p_FTPosFilter10644 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_p_FTDistance_in_p_FTPosFilter10648 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_p_FTScope_in_p_FTPosFilter10652 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_p_FTContent_in_p_FTPosFilter10656 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ORDERED_in_p_FTOrder10684 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_WINDOW_in_p_FTWindow10714 = new BitSet(new long[]{0xFFFFFFFFFFFF0000L,0x7FDFFFFFFFFFFFFFL,0xFFFFFFFFFFFFFFFFL,0x3C00BFFDFFFFBFFFL,0x0000007E04C80078L,0x0000001000000000L});
    public static final BitSet FOLLOW_p_AdditiveExpr_in_p_FTWindow10718 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x8100000000000000L,0x0000000000000400L});
    public static final BitSet FOLLOW_p_FTUnit_in_p_FTWindow10720 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_DISTANCE_in_p_FTDistance10748 = new BitSet(new long[]{0x0000000000200000L,0x0000000000000000L,0x0000060000000000L});
    public static final BitSet FOLLOW_p_FTRange_in_p_FTDistance10752 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x8100000000000000L,0x0000000000000400L});
    public static final BitSet FOLLOW_p_FTUnit_in_p_FTDistance10754 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_WORDS_in_p_FTUnit10784 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_SENTENCES_in_p_FTUnit10790 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_PARAGRAPHS_in_p_FTUnit10796 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_SAME_in_p_FTScope10829 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x4080000000000000L});
    public static final BitSet FOLLOW_DIFFERENT_in_p_FTScope10835 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x4080000000000000L});
    public static final BitSet FOLLOW_p_FTBigUnit_in_p_FTScope10840 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_SENTENCE_in_p_FTBigUnit10870 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_PARAGRAPH_in_p_FTBigUnit10876 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_AT_in_p_FTContent10911 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000200L});
    public static final BitSet FOLLOW_START_in_p_FTContent10915 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_AT_in_p_FTContent10923 = new BitSet(new long[]{0x0000000000000000L,0x0080000000000000L});
    public static final BitSet FOLLOW_END_in_p_FTContent10927 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ENTIRE_in_p_FTContent10935 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000001000000000L});
    public static final BitSet FOLLOW_CONTENT_in_p_FTContent10939 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_USING_in_p_FTMatchOptions10973 = new BitSet(new long[]{0x0000000004000000L,0x0000000000010000L,0x0015002000000000L,0x0000000000000097L});
    public static final BitSet FOLLOW_p_FTMatchOption_in_p_FTMatchOptions10977 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000020L});
    public static final BitSet FOLLOW_p_FTLanguageOption_in_p_FTMatchOption11005 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_p_FTWildCardOption_in_p_FTMatchOption11017 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_p_FTThesaurusOption_in_p_FTMatchOption11029 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_p_FTStemOption_in_p_FTMatchOption11041 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_p_FTCaseOption_in_p_FTMatchOption11053 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_p_FTDiacriticsOption_in_p_FTMatchOption11065 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_p_FTStopWordOption_in_p_FTMatchOption11077 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_p_FTExtensionOption_in_p_FTMatchOption11089 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_CASE_in_p_FTCaseOption11120 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000800000000000L});
    public static final BitSet FOLLOW_INSENSITIVE_in_p_FTCaseOption11124 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_CASE_in_p_FTCaseOption11142 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x2000000000000000L});
    public static final BitSet FOLLOW_SENSITIVE_in_p_FTCaseOption11146 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_LOWERCASE_in_p_FTCaseOption11163 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_UPPERCASE_in_p_FTCaseOption11179 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_DIACRITICS_in_p_FTDiacriticsOption11214 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000800000000000L});
    public static final BitSet FOLLOW_INSENSITIVE_in_p_FTDiacriticsOption11218 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_DIACRITICS_in_p_FTDiacriticsOption11236 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x2000000000000000L});
    public static final BitSet FOLLOW_SENSITIVE_in_p_FTDiacriticsOption11240 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_STEMMING_in_p_FTStemOption11275 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_NO_in_p_FTStemOption11282 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000001L});
    public static final BitSet FOLLOW_STEMMING_in_p_FTStemOption11286 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_THESAURUS_in_p_FTThesaurusOption11322 = new BitSet(new long[]{0x0000000800200000L});
    public static final BitSet FOLLOW_p_FTThesaurusID_in_p_FTThesaurusOption11325 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_DEFAULT_in_p_FTThesaurusOption11331 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_THESAURUS_in_p_FTThesaurusOption11350 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000200000000000L});
    public static final BitSet FOLLOW_LPAREN_in_p_FTThesaurusOption11352 = new BitSet(new long[]{0x0000000800200000L});
    public static final BitSet FOLLOW_p_FTThesaurusID_in_p_FTThesaurusOption11355 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0100400000000000L});
    public static final BitSet FOLLOW_DEFAULT_in_p_FTThesaurusOption11361 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0100400000000000L});
    public static final BitSet FOLLOW_COMMA_in_p_FTThesaurusOption11365 = new BitSet(new long[]{0x0000000000200000L});
    public static final BitSet FOLLOW_p_FTThesaurusID_in_p_FTThesaurusOption11367 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0100400000000000L});
    public static final BitSet FOLLOW_RPAREN_in_p_FTThesaurusOption11371 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_NO_in_p_FTThesaurusOption11389 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000004L});
    public static final BitSet FOLLOW_THESAURUS_in_p_FTThesaurusOption11393 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_AT_in_p_FTThesaurusID11426 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000C00000L});
    public static final BitSet FOLLOW_p_StringLiteral_in_p_FTThesaurusID11428 = new BitSet(new long[]{0x0000000000200002L,0x0000000000000000L,0x0400060000000000L});
    public static final BitSet FOLLOW_RELATIONSHIP_in_p_FTThesaurusID11433 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000C00000L});
    public static final BitSet FOLLOW_p_StringLiteral_in_p_FTThesaurusID11435 = new BitSet(new long[]{0x0000000000200002L,0x0000000000000000L,0x0000060000000000L});
    public static final BitSet FOLLOW_p_FTLiteralRange_in_p_FTThesaurusID11440 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0002000000000000L});
    public static final BitSet FOLLOW_LEVELS_in_p_FTThesaurusID11444 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_EXACTLY_in_p_FTLiteralRange11479 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000001000000000L});
    public static final BitSet FOLLOW_L_IntegerLiteral_in_p_FTLiteralRange11481 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_AT_in_p_FTLiteralRange11499 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000020L});
    public static final BitSet FOLLOW_LEAST_in_p_FTLiteralRange11503 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000001000000000L});
    public static final BitSet FOLLOW_L_IntegerLiteral_in_p_FTLiteralRange11505 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_AT_in_p_FTLiteralRange11523 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0008000000000000L});
    public static final BitSet FOLLOW_MOST_in_p_FTLiteralRange11527 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000001000000000L});
    public static final BitSet FOLLOW_L_IntegerLiteral_in_p_FTLiteralRange11529 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_FROM_in_p_FTLiteralRange11547 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000001000000000L});
    public static final BitSet FOLLOW_L_IntegerLiteral_in_p_FTLiteralRange11549 = new BitSet(new long[]{0x0000000000000000L,0x0000004000000000L});
    public static final BitSet FOLLOW_TO_in_p_FTLiteralRange11551 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000001000000000L});
    public static final BitSet FOLLOW_L_IntegerLiteral_in_p_FTLiteralRange11553 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_STOP_in_p_FTStopWordOption11589 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000400L});
    public static final BitSet FOLLOW_WORDS_in_p_FTStopWordOption11593 = new BitSet(new long[]{0x0000000000200000L,0x0000000000000000L,0x0000000000000000L,0x0000200000000000L});
    public static final BitSet FOLLOW_p_FTStopWords_in_p_FTStopWordOption11595 = new BitSet(new long[]{0x0002000000000002L,0x0000020000000000L});
    public static final BitSet FOLLOW_p_FTStopWordsInclExcl_in_p_FTStopWordOption11597 = new BitSet(new long[]{0x0002000000000002L,0x0000020000000000L});
    public static final BitSet FOLLOW_STOP_in_p_FTStopWordOption11616 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000400L});
    public static final BitSet FOLLOW_WORDS_in_p_FTStopWordOption11620 = new BitSet(new long[]{0x0000000800000000L});
    public static final BitSet FOLLOW_DEFAULT_in_p_FTStopWordOption11624 = new BitSet(new long[]{0x0002000000000002L,0x0000020000000000L});
    public static final BitSet FOLLOW_p_FTStopWordsInclExcl_in_p_FTStopWordOption11626 = new BitSet(new long[]{0x0002000000000002L,0x0000020000000000L});
    public static final BitSet FOLLOW_NO_in_p_FTStopWordOption11645 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000002L});
    public static final BitSet FOLLOW_STOP_in_p_FTStopWordOption11649 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000400L});
    public static final BitSet FOLLOW_WORDS_in_p_FTStopWordOption11653 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_AT_in_p_FTStopWords11687 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000C00000L});
    public static final BitSet FOLLOW_p_StringLiteral_in_p_FTStopWords11691 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_LPAREN_in_p_FTStopWords11705 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000C00000L});
    public static final BitSet FOLLOW_p_StringLiteral_in_p_FTStopWords11707 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0100400000000000L});
    public static final BitSet FOLLOW_COMMA_in_p_FTStopWords11710 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000C00000L});
    public static final BitSet FOLLOW_p_StringLiteral_in_p_FTStopWords11712 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0100400000000000L});
    public static final BitSet FOLLOW_RPAREN_in_p_FTStopWords11716 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_UNION_in_p_FTStopWordsInclExcl11748 = new BitSet(new long[]{0x0000000000200000L,0x0000000000000000L,0x0000000000000000L,0x0000200000000000L});
    public static final BitSet FOLLOW_EXCEPT_in_p_FTStopWordsInclExcl11754 = new BitSet(new long[]{0x0000000000200000L,0x0000000000000000L,0x0000000000000000L,0x0000200000000000L});
    public static final BitSet FOLLOW_p_FTStopWords_in_p_FTStopWordsInclExcl11757 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_LANGUAGE_in_p_FTLanguageOption11789 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000C00000L});
    public static final BitSet FOLLOW_p_StringLiteral_in_p_FTLanguageOption11793 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_WILDCARDS_in_p_FTWildCardOption11823 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_NO_in_p_FTWildCardOption11830 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000080L});
    public static final BitSet FOLLOW_WILDCARDS_in_p_FTWildCardOption11834 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_OPTION_in_p_FTExtensionOption11867 = new BitSet(new long[]{0xFFFFFFFFFFFF0000L,0x7FDFFFFFFFFFFFFFL,0xFFFFFFFFFFFFFFFFL,0x00001FFDFFFFBFFFL,0x0000000004000000L,0x0000001000000000L});
    public static final BitSet FOLLOW_p_QName_in_p_FTExtensionOption11871 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000C00000L});
    public static final BitSet FOLLOW_p_StringLiteral_in_p_FTExtensionOption11873 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_WITHOUT_in_p_FTIgnoreOption11901 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000001000000000L});
    public static final BitSet FOLLOW_CONTENT_in_p_FTIgnoreOption11905 = new BitSet(new long[]{0xFFFFFFFFFFFF0000L,0x7FDFFFFFFFFFFFFFL,0xFFFFFFFFFFFFFFFFL,0x3C00BFFDFFFFBFFFL,0x0000007E04C80078L,0x0000001000000000L});
    public static final BitSet FOLLOW_p_UnionExpr_in_p_FTIgnoreOption11909 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_TRY_in_p_TryClause11937 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0001000000000000L});
    public static final BitSet FOLLOW_LBRACKET_in_p_TryClause11941 = new BitSet(new long[]{0xFFFFFFFFFFFF0000L,0x7FDFFFFFFFFFFFFFL,0xFFFFFFFFFFFFFFFFL,0x3C00BFFDFFFFBFFFL,0x0000007E04C80078L,0x0000001000000000L});
    public static final BitSet FOLLOW_pm_Expr_in_p_TryClause11943 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0002000000000000L});
    public static final BitSet FOLLOW_RBRACKET_in_p_TryClause11945 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_CATCH_in_p_CatchClause11976 = new BitSet(new long[]{0xFFFFFFFFFFFF0000L,0x7FDFFFFFFFFFFFFFL,0xFFFFFFFFFFFFFFFFL,0x04013FFDFFFFBFFFL,0x0000000004080040L,0x0000001000000000L});
    public static final BitSet FOLLOW_p_CatchErrorList_in_p_CatchClause11980 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0001200000000000L});
    public static final BitSet FOLLOW_p_CatchVars_in_p_CatchClause11982 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0001000000000000L});
    public static final BitSet FOLLOW_LBRACKET_in_p_CatchClause11985 = new BitSet(new long[]{0xFFFFFFFFFFFF0000L,0x7FDFFFFFFFFFFFFFL,0xFFFFFFFFFFFFFFFFL,0x3C00BFFDFFFFBFFFL,0x0000007E04C80078L,0x0000001000000000L});
    public static final BitSet FOLLOW_pm_Expr_in_p_CatchClause11987 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0002000000000000L});
    public static final BitSet FOLLOW_RBRACKET_in_p_CatchClause11989 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_p_NameTest_in_p_CatchErrorList12015 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000001000L});
    public static final BitSet FOLLOW_VBAR_in_p_CatchErrorList12018 = new BitSet(new long[]{0xFFFFFFFFFFFF0000L,0x7FDFFFFFFFFFFFFFL,0xFFFFFFFFFFFFFFFFL,0x04001FFDFFFFBFFFL,0x0000000004080040L,0x0000001000000000L});
    public static final BitSet FOLLOW_p_NameTest_in_p_CatchErrorList12020 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000001000L});
    public static final BitSet FOLLOW_LPAREN_in_p_CatchVars12066 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000800000000000L});
    public static final BitSet FOLLOW_DOLLAR_in_p_CatchVars12068 = new BitSet(new long[]{0xFFFFFFFFFFFF0000L,0x7FDFFFFFFFFFFFFFL,0xFFFFFFFFFFFFFFFFL,0x00001FFDFFFFBFFFL,0x0000000004000000L,0x0000001000000000L});
    public static final BitSet FOLLOW_p_VarName_in_p_CatchVars12070 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0100400000000000L});
    public static final BitSet FOLLOW_COMMA_in_p_CatchVars12073 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000800000000000L});
    public static final BitSet FOLLOW_DOLLAR_in_p_CatchVars12075 = new BitSet(new long[]{0xFFFFFFFFFFFF0000L,0x7FDFFFFFFFFFFFFFL,0xFFFFFFFFFFFFFFFFL,0x00001FFDFFFFBFFFL,0x0000000004000000L,0x0000001000000000L});
    public static final BitSet FOLLOW_p_VarName_in_p_CatchVars12077 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0100400000000000L});
    public static final BitSet FOLLOW_COMMA_in_p_CatchVars12080 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000800000000000L});
    public static final BitSet FOLLOW_DOLLAR_in_p_CatchVars12082 = new BitSet(new long[]{0xFFFFFFFFFFFF0000L,0x7FDFFFFFFFFFFFFFL,0xFFFFFFFFFFFFFFFFL,0x00001FFDFFFFBFFFL,0x0000000004000000L,0x0000001000000000L});
    public static final BitSet FOLLOW_p_VarName_in_p_CatchVars12084 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000400000000000L});
    public static final BitSet FOLLOW_RPAREN_in_p_CatchVars12090 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_QUOT_in_p_StringLiteral12139 = new BitSet(new long[]{0xFFFFFFFFFFFFFFF0L,0xFFFFFFFFFFFFFFFFL,0xFFFFFFFFFFFFFFFFL,0xFF7FFFFFFFFFFFFFL,0xFFFFFFFFFFFFFFFFL,0x0000001FFFFFFFFFL});
    public static final BitSet FOLLOW_p_QuotStringLiteralContent_in_p_StringLiteral12143 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000800000L});
    public static final BitSet FOLLOW_QUOT_in_p_StringLiteral12145 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_APOS_in_p_StringLiteral12186 = new BitSet(new long[]{0xFFFFFFFFFFFFFFF0L,0xFFFFFFFFFFFFFFFFL,0xFFFFFFFFFFFFFFFFL,0xFF7FFFFFFFFFFFFFL,0xFFFFFFFFFFFFFFFFL,0x0000001FFFFFFFFFL});
    public static final BitSet FOLLOW_p_AposStringLiteralContent_in_p_StringLiteral12190 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000400000L});
    public static final BitSet FOLLOW_APOS_in_p_StringLiteral12192 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_set_in_p_QuotStringLiteralContent12248 = new BitSet(new long[]{0xFFFFFFFFFFFFFFF2L,0xFFFFFFFFFFFFFFFFL,0xFFFFFFFFFFFFFFFFL,0xFF7FFFFFFFFFFFFFL,0xFFFFFFFFFF7FFFFFL,0x0000001FFFFFFFFFL});
    public static final BitSet FOLLOW_set_in_p_AposStringLiteralContent12300 = new BitSet(new long[]{0xFFFFFFFFFFFFFFF2L,0xFFFFFFFFFFFFFFFFL,0xFFFFFFFFFFFFFFFFL,0xFF7FFFFFFFFFFFFFL,0xFFFFFFFFFFBFFFFFL,0x0000001FFFFFFFFFL});
    public static final BitSet FOLLOW_p_NCName_in_p_QName12390 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000080L});
    public static final BitSet FOLLOW_p_LocalNCName_in_p_QName12392 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_COLON_in_p_LocalNCName12447 = new BitSet(new long[]{0xFFFFFFFFFFFF0000L,0x7FDFFFFFFFFFFFFFL,0xFFFFFFFFFFFFFFFFL,0x00001FFDFFFFBFFFL,0x0000000004000000L,0x0000001000000000L});
    public static final BitSet FOLLOW_p_NCName_in_p_LocalNCName12449 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_p_FNCName_in_p_FQName12496 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000080L});
    public static final BitSet FOLLOW_p_LocalFNCName_in_p_FQName12498 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_COLON_in_p_LocalFNCName12526 = new BitSet(new long[]{0xFFFFFFFFFFFF0000L,0x7FDFFFFFFFFFFFFFL,0xFFFFFFFFFFFFFFFFL,0x00001FFDFFFFBFFFL,0x0000000004000000L,0x0000001000000000L});
    public static final BitSet FOLLOW_p_NCName_in_p_LocalFNCName12528 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_set_in_p_NCName0 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_set_in_p_FNCName0 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_DECLARE_in_pm_RevalidationDecl14618 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000010000000L});
    public static final BitSet FOLLOW_REVALIDATION_in_pm_RevalidationDecl14622 = new BitSet(new long[]{0x0000000000000000L,0x0000000400000008L,0x0000000020000000L});
    public static final BitSet FOLLOW_STRICT_in_pm_RevalidationDecl14627 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_LAX_in_pm_RevalidationDecl14633 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_SKIP_in_pm_RevalidationDecl14639 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_AS_in_p_InsertExprTargetChoice14672 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000900000L});
    public static final BitSet FOLLOW_FIRST_in_p_InsertExprTargetChoice14677 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000400000L});
    public static final BitSet FOLLOW_LAST_in_p_InsertExprTargetChoice14683 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000400000L});
    public static final BitSet FOLLOW_INTO_in_p_InsertExprTargetChoice14690 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_AFTER_in_p_InsertExprTargetChoice14707 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_BEFORE_in_p_InsertExprTargetChoice14723 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_INSERT_in_p_InsertExpr14753 = new BitSet(new long[]{0x0000000000000000L,0x0000000000004000L,0x0000000002000000L});
    public static final BitSet FOLLOW_NODE_in_p_InsertExpr14758 = new BitSet(new long[]{0xFFFFFFFFFFFF0000L,0x7FDFFFFFFFFFFFFFL,0xFFFFFFFFFFFFFFFFL,0x3C00BFFDFFFFBFFFL,0x0000007E04C80078L,0x0000001000000000L});
    public static final BitSet FOLLOW_NODES_in_p_InsertExpr14764 = new BitSet(new long[]{0xFFFFFFFFFFFF0000L,0x7FDFFFFFFFFFFFFFL,0xFFFFFFFFFFFFFFFFL,0x3C00BFFDFFFFBFFFL,0x0000007E04C80078L,0x0000001000000000L});
    public static final BitSet FOLLOW_p_SourceExpr_in_p_InsertExpr14767 = new BitSet(new long[]{0x0000000000080000L,0x0000000000000000L,0x0000000000430000L});
    public static final BitSet FOLLOW_p_InsertExprTargetChoice_in_p_InsertExpr14769 = new BitSet(new long[]{0xFFFFFFFFFFFF0000L,0x7FDFFFFFFFFFFFFFL,0xFFFFFFFFFFFFFFFFL,0x3C00BFFDFFFFBFFFL,0x0000007E04C80078L,0x0000001000000000L});
    public static final BitSet FOLLOW_p_TargetExpr_in_p_InsertExpr14771 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_DELETE_in_p_DeleteExpr14801 = new BitSet(new long[]{0x0000000000000000L,0x0000000000004000L,0x0000000002000000L});
    public static final BitSet FOLLOW_NODE_in_p_DeleteExpr14806 = new BitSet(new long[]{0xFFFFFFFFFFFF0000L,0x7FDFFFFFFFFFFFFFL,0xFFFFFFFFFFFFFFFFL,0x3C00BFFDFFFFBFFFL,0x0000007E04C80078L,0x0000001000000000L});
    public static final BitSet FOLLOW_NODES_in_p_DeleteExpr14812 = new BitSet(new long[]{0xFFFFFFFFFFFF0000L,0x7FDFFFFFFFFFFFFFL,0xFFFFFFFFFFFFFFFFL,0x3C00BFFDFFFFBFFFL,0x0000007E04C80078L,0x0000001000000000L});
    public static final BitSet FOLLOW_p_TargetExpr_in_p_DeleteExpr14815 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_REPLACE_in_p_ReplaceExpr14845 = new BitSet(new long[]{0x0000000000000000L,0x0000000000004000L,0x0000000080000000L});
    public static final BitSet FOLLOW_VALUE_in_p_ReplaceExpr14850 = new BitSet(new long[]{0x0000000000000000L,0x0000000000008000L});
    public static final BitSet FOLLOW_OF_in_p_ReplaceExpr14854 = new BitSet(new long[]{0x0000000000000000L,0x0000000000004000L});
    public static final BitSet FOLLOW_NODE_in_p_ReplaceExpr14860 = new BitSet(new long[]{0xFFFFFFFFFFFF0000L,0x7FDFFFFFFFFFFFFFL,0xFFFFFFFFFFFFFFFFL,0x3C00BFFDFFFFBFFFL,0x0000007E04C80078L,0x0000001000000000L});
    public static final BitSet FOLLOW_p_ExprSingle_in_p_ReplaceExpr14862 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000100000000L});
    public static final BitSet FOLLOW_WITH_in_p_ReplaceExpr14866 = new BitSet(new long[]{0xFFFFFFFFFFFF0000L,0x7FDFFFFFFFFFFFFFL,0xFFFFFFFFFFFFFFFFL,0x3C00BFFDFFFFBFFFL,0x0000007E04C80078L,0x0000001000000000L});
    public static final BitSet FOLLOW_p_ExprSingle_in_p_ReplaceExpr14868 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_RENAME_in_p_RenameExpr14898 = new BitSet(new long[]{0x0000000000000000L,0x0000000000004000L});
    public static final BitSet FOLLOW_NODE_in_p_RenameExpr14902 = new BitSet(new long[]{0xFFFFFFFFFFFF0000L,0x7FDFFFFFFFFFFFFFL,0xFFFFFFFFFFFFFFFFL,0x3C00BFFDFFFFBFFFL,0x0000007E04C80078L,0x0000001000000000L});
    public static final BitSet FOLLOW_p_TargetExpr_in_p_RenameExpr14904 = new BitSet(new long[]{0x0000000000080000L});
    public static final BitSet FOLLOW_AS_in_p_RenameExpr14906 = new BitSet(new long[]{0xFFFFFFFFFFFF0000L,0x7FDFFFFFFFFFFFFFL,0xFFFFFFFFFFFFFFFFL,0x3C00BFFDFFFFBFFFL,0x0000007E04C80078L,0x0000001000000000L});
    public static final BitSet FOLLOW_p_NewNameExpr_in_p_RenameExpr14908 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_p_ExprSingle_in_p_SourceExpr14936 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_p_ExprSingle_in_p_TargetExpr14962 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_p_ExprSingle_in_p_NewNameExpr14988 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_COPY_in_p_TransformExpr15016 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000800000000000L});
    public static final BitSet FOLLOW_DOLLAR_in_p_TransformExpr15018 = new BitSet(new long[]{0xFFFFFFFFFFFF0000L,0x7FDFFFFFFFFFFFFFL,0xFFFFFFFFFFFFFFFFL,0x00001FFDFFFFBFFFL,0x0000000004000000L,0x0000001000000000L});
    public static final BitSet FOLLOW_p_VarName_in_p_TransformExpr15020 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0020000000000000L});
    public static final BitSet FOLLOW_BIND_in_p_TransformExpr15022 = new BitSet(new long[]{0xFFFFFFFFFFFF0000L,0x7FDFFFFFFFFFFFFFL,0xFFFFFFFFFFFFFFFFL,0x3C00BFFDFFFFBFFFL,0x0000007E04C80078L,0x0000001000000000L});
    public static final BitSet FOLLOW_p_ExprSingle_in_p_TransformExpr15024 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000001000000L,0x0100000000000000L});
    public static final BitSet FOLLOW_COMMA_in_p_TransformExpr15027 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000800000000000L});
    public static final BitSet FOLLOW_DOLLAR_in_p_TransformExpr15029 = new BitSet(new long[]{0xFFFFFFFFFFFF0000L,0x7FDFFFFFFFFFFFFFL,0xFFFFFFFFFFFFFFFFL,0x00001FFDFFFFBFFFL,0x0000000004000000L,0x0000001000000000L});
    public static final BitSet FOLLOW_p_VarName_in_p_TransformExpr15031 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0020000000000000L});
    public static final BitSet FOLLOW_BIND_in_p_TransformExpr15033 = new BitSet(new long[]{0xFFFFFFFFFFFF0000L,0x7FDFFFFFFFFFFFFFL,0xFFFFFFFFFFFFFFFFL,0x3C00BFFDFFFFBFFFL,0x0000007E04C80078L,0x0000001000000000L});
    public static final BitSet FOLLOW_p_ExprSingle_in_p_TransformExpr15035 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000001000000L,0x0100000000000000L});
    public static final BitSet FOLLOW_MODIFY_in_p_TransformExpr15041 = new BitSet(new long[]{0xFFFFFFFFFFFF0000L,0x7FDFFFFFFFFFFFFFL,0xFFFFFFFFFFFFFFFFL,0x3C00BFFDFFFFBFFFL,0x0000007E04C80078L,0x0000001000000000L});
    public static final BitSet FOLLOW_p_ExprSingle_in_p_TransformExpr15043 = new BitSet(new long[]{0x0000000000000000L,0x0000000004000000L});
    public static final BitSet FOLLOW_RETURN_in_p_TransformExpr15047 = new BitSet(new long[]{0xFFFFFFFFFFFF0000L,0x7FDFFFFFFFFFFFFFL,0xFFFFFFFFFFFFFFFFL,0x3C00BFFDFFFFBFFFL,0x0000007E04C80078L,0x0000001000000000L});
    public static final BitSet FOLLOW_p_ExprSingle_in_p_TransformExpr15049 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_p_ConcatExpr_in_pm_ApplyExpr15084 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000800L});
    public static final BitSet FOLLOW_SEMICOLON_in_pm_ApplyExpr15086 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_p_ExprSingle_in_p_ConcatExpr15112 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0100000000000000L});
    public static final BitSet FOLLOW_COMMA_in_p_ConcatExpr15115 = new BitSet(new long[]{0xFFFFFFFFFFFF0000L,0x7FDFFFFFFFFFFFFFL,0xFFFFFFFFFFFFFFFFL,0x3C00BFFDFFFFBFFFL,0x0000007E04C80078L,0x0000001000000000L});
    public static final BitSet FOLLOW_p_ExprSingle_in_p_ConcatExpr15117 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0100000000000000L});
    public static final BitSet FOLLOW_BLOCK_in_p_BlockExpr15147 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0001000000000000L});
    public static final BitSet FOLLOW_p_Block_in_p_BlockExpr15151 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_LBRACKET_in_p_Block15177 = new BitSet(new long[]{0xFFFFFFFFFFFF0000L,0x7FDFFFFFFFFFFFFFL,0xFFFFFFFFFFFFFFFFL,0x3C00BFFDFFFFBFFFL,0x0000007E04C80078L,0x0000001000000000L});
    public static final BitSet FOLLOW_pm_BlockDecls_in_p_Block15181 = new BitSet(new long[]{0xFFFFFFFFFFFF0000L,0x7FDFFFFFFFFFFFFFL,0xFFFFFFFFFFFFFFFFL,0x3C00BFFDFFFFBFFFL,0x0000007E04C80078L,0x0000001000000000L});
    public static final BitSet FOLLOW_p_BlockBody_in_p_Block15185 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0002000000000000L});
    public static final BitSet FOLLOW_RBRACKET_in_p_Block15187 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_pm_BlockVarDecl_in_pm_BlockDecls15243 = new BitSet(new long[]{0x0000000400000002L});
    public static final BitSet FOLLOW_DECLARE_in_pm_BlockVarDecl15298 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000800000000000L});
    public static final BitSet FOLLOW_DOLLAR_in_pm_BlockVarDecl15302 = new BitSet(new long[]{0xFFFFFFFFFFFF0000L,0x7FDFFFFFFFFFFFFFL,0xFFFFFFFFFFFFFFFFL,0x00001FFDFFFFBFFFL,0x0000000004000000L,0x0000001000000000L});
    public static final BitSet FOLLOW_p_VarName_in_pm_BlockVarDecl15306 = new BitSet(new long[]{0x0000000000080000L,0x0000000000000000L,0x0000000000000000L,0x0120000000000000L,0x0000000000000800L});
    public static final BitSet FOLLOW_p_TypeDeclaration_in_pm_BlockVarDecl15310 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0120000000000000L,0x0000000000000800L});
    public static final BitSet FOLLOW_BIND_in_pm_BlockVarDecl15314 = new BitSet(new long[]{0xFFFFFFFFFFFF0000L,0x7FDFFFFFFFFFFFFFL,0xFFFFFFFFFFFFFFFFL,0x3C00BFFDFFFFBFFFL,0x0000007E04C80078L,0x0000001000000000L});
    public static final BitSet FOLLOW_p_ExprSingle_in_pm_BlockVarDecl15318 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0100000000000000L,0x0000000000000800L});
    public static final BitSet FOLLOW_COMMA_in_pm_BlockVarDecl15323 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000800000000000L});
    public static final BitSet FOLLOW_DOLLAR_in_pm_BlockVarDecl15325 = new BitSet(new long[]{0xFFFFFFFFFFFF0000L,0x7FDFFFFFFFFFFFFFL,0xFFFFFFFFFFFFFFFFL,0x00001FFDFFFFBFFFL,0x0000000004000000L,0x0000001000000000L});
    public static final BitSet FOLLOW_p_VarName_in_pm_BlockVarDecl15327 = new BitSet(new long[]{0x0000000000080000L,0x0000000000000000L,0x0000000000000000L,0x0120000000000000L,0x0000000000000800L});
    public static final BitSet FOLLOW_p_TypeDeclaration_in_pm_BlockVarDecl15329 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0120000000000000L,0x0000000000000800L});
    public static final BitSet FOLLOW_BIND_in_pm_BlockVarDecl15333 = new BitSet(new long[]{0xFFFFFFFFFFFF0000L,0x7FDFFFFFFFFFFFFFL,0xFFFFFFFFFFFFFFFFL,0x3C00BFFDFFFFBFFFL,0x0000007E04C80078L,0x0000001000000000L});
    public static final BitSet FOLLOW_p_ExprSingle_in_pm_BlockVarDecl15335 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0100000000000000L,0x0000000000000800L});
    public static final BitSet FOLLOW_SEMICOLON_in_pm_BlockVarDecl15341 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_pm_Expr_in_p_BlockBody15401 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_SET_in_p_AssignmentExpr15429 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000800000000000L});
    public static final BitSet FOLLOW_DOLLAR_in_p_AssignmentExpr15433 = new BitSet(new long[]{0xFFFFFFFFFFFF0000L,0x7FDFFFFFFFFFFFFFL,0xFFFFFFFFFFFFFFFFL,0x00001FFDFFFFBFFFL,0x0000000004000000L,0x0000001000000000L});
    public static final BitSet FOLLOW_p_VarName_in_p_AssignmentExpr15435 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0020000000000000L});
    public static final BitSet FOLLOW_BIND_in_p_AssignmentExpr15437 = new BitSet(new long[]{0xFFFFFFFFFFFF0000L,0x7FDFFFFFFFFFFFFFL,0xFFFFFFFFFFFFFFFFL,0x3C00BFFDFFFFBFFFL,0x0000007E04C80078L,0x0000001000000000L});
    public static final BitSet FOLLOW_p_ExprSingle_in_p_AssignmentExpr15439 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_EXIT_in_p_ExitExpr15467 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000004000L});
    public static final BitSet FOLLOW_RETURNING_in_p_ExitExpr15473 = new BitSet(new long[]{0xFFFFFFFFFFFF0000L,0x7FDFFFFFFFFFFFFFL,0xFFFFFFFFFFFFFFFFL,0x3C00BFFDFFFFBFFFL,0x0000007E04C80078L,0x0000001000000000L});
    public static final BitSet FOLLOW_p_ExprSingle_in_p_ExitExpr15477 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_WHILE_in_p_WhileExpr15505 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000200000000000L});
    public static final BitSet FOLLOW_LPAREN_in_p_WhileExpr15509 = new BitSet(new long[]{0xFFFFFFFFFFFF0000L,0x7FDFFFFFFFFFFFFFL,0xFFFFFFFFFFFFFFFFL,0x3C00BFFDFFFFBFFFL,0x0000007E04C80078L,0x0000001000000000L});
    public static final BitSet FOLLOW_p_ExprSingle_in_p_WhileExpr15511 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000400000000000L});
    public static final BitSet FOLLOW_RPAREN_in_p_WhileExpr15513 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0001000000000000L});
    public static final BitSet FOLLOW_p_WhileBody_in_p_WhileExpr15515 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_p_Block_in_p_WhileBody15541 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_SWITCH_in_p_SwitchExpr15574 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000200000000000L});
    public static final BitSet FOLLOW_LPAREN_in_p_SwitchExpr15576 = new BitSet(new long[]{0xFFFFFFFFFFFF0000L,0x7FDFFFFFFFFFFFFFL,0xFFFFFFFFFFFFFFFFL,0x3C00BFFDFFFFBFFFL,0x0000007E04C80078L,0x0000001000000000L});
    public static final BitSet FOLLOW_pm_Expr_in_p_SwitchExpr15578 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000400000000000L});
    public static final BitSet FOLLOW_RPAREN_in_p_SwitchExpr15580 = new BitSet(new long[]{0x0000000004000000L});
    public static final BitSet FOLLOW_p_SwitchCaseClause_in_p_SwitchExpr15582 = new BitSet(new long[]{0x0000000804000000L});
    public static final BitSet FOLLOW_DEFAULT_in_p_SwitchExpr15587 = new BitSet(new long[]{0x0000000000000000L,0x0000000004000000L});
    public static final BitSet FOLLOW_RETURN_in_p_SwitchExpr15591 = new BitSet(new long[]{0xFFFFFFFFFFFF0000L,0x7FDFFFFFFFFFFFFFL,0xFFFFFFFFFFFFFFFFL,0x3C00BFFDFFFFBFFFL,0x0000007E04C80078L,0x0000001000000000L});
    public static final BitSet FOLLOW_p_ExprSingle_in_p_SwitchExpr15593 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_CASE_in_p_SwitchCaseClause15624 = new BitSet(new long[]{0xFFFFFFFFFFFF0000L,0x7FDFFFFFFFFFFFFFL,0xFFFFFFFFFFFFFFFFL,0x3C00BFFDFFFFBFFFL,0x0000007E04C80078L,0x0000001000000000L});
    public static final BitSet FOLLOW_p_SwitchCaseOperand_in_p_SwitchCaseClause15626 = new BitSet(new long[]{0x0000000004000000L,0x0000000004000000L});
    public static final BitSet FOLLOW_RETURN_in_p_SwitchCaseClause15632 = new BitSet(new long[]{0xFFFFFFFFFFFF0000L,0x7FDFFFFFFFFFFFFFL,0xFFFFFFFFFFFFFFFFL,0x3C00BFFDFFFFBFFFL,0x0000007E04C80078L,0x0000001000000000L});
    public static final BitSet FOLLOW_p_ExprSingle_in_p_SwitchCaseClause15634 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_p_ExprSingle_in_p_SwitchCaseOperand15662 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_p_UsingClause_in_p_EvalExpr15692 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000080000L});
    public static final BitSet FOLLOW_EVAL_in_p_EvalExpr15697 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0001000000000000L});
    public static final BitSet FOLLOW_LBRACKET_in_p_EvalExpr15701 = new BitSet(new long[]{0xFFFFFFFFFFFF0000L,0x7FDFFFFFFFFFFFFFL,0xFFFFFFFFFFFFFFFFL,0x3C00BFFDFFFFBFFFL,0x0000007E04C80078L,0x0000001000000000L});
    public static final BitSet FOLLOW_p_ExprSingle_in_p_EvalExpr15703 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0002000000000000L});
    public static final BitSet FOLLOW_RBRACKET_in_p_EvalExpr15705 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_USING_in_p_UsingClause15732 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000800000000000L});
    public static final BitSet FOLLOW_DOLLAR_in_p_UsingClause15736 = new BitSet(new long[]{0xFFFFFFFFFFFF0000L,0x7FDFFFFFFFFFFFFFL,0xFFFFFFFFFFFFFFFFL,0x00001FFDFFFFBFFFL,0x0000000004000000L,0x0000001000000000L});
    public static final BitSet FOLLOW_p_VarName_in_p_UsingClause15738 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0100000000000000L});
    public static final BitSet FOLLOW_COMMA_in_p_UsingClause15741 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000800000000000L});
    public static final BitSet FOLLOW_DOLLAR_in_p_UsingClause15743 = new BitSet(new long[]{0xFFFFFFFFFFFF0000L,0x7FDFFFFFFFFFFFFFL,0xFFFFFFFFFFFFFFFFL,0x00001FFDFFFFBFFFL,0x0000000004000000L,0x0000001000000000L});
    public static final BitSet FOLLOW_p_VarName_in_p_UsingClause15745 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0100000000000000L});
    public static final BitSet FOLLOW_DECLARE_in_p_CollectionDecl15780 = new BitSet(new long[]{0x0000000000000000L,0x0000040000080000L,0x0000000000000000L,0x0000002402900000L});
    public static final BitSet FOLLOW_p_CollProperties_in_p_CollectionDecl15782 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000800000L});
    public static final BitSet FOLLOW_COLLECTION_in_p_CollectionDecl15786 = new BitSet(new long[]{0xFFFFFFFFFFFF0000L,0x7FDFFFFFFFFFFFFFL,0xFFFFFFFFFFFFFFFFL,0x00001FFDFFFFBFFFL,0x0000000004000000L,0x0000001000000000L});
    public static final BitSet FOLLOW_p_QName_in_p_CollectionDecl15788 = new BitSet(new long[]{0x0000000000080000L,0x0000000000000000L,0x0000000100000000L,0x0000000000000000L,0x0000000000000800L});
    public static final BitSet FOLLOW_p_CollectionTypeDecl_in_p_CollectionDecl15790 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000100000000L,0x0000000000000000L,0x0000000000000800L});
    public static final BitSet FOLLOW_WITH_in_p_CollectionDecl15796 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000008400000000L});
    public static final BitSet FOLLOW_p_NodeModifier_in_p_CollectionDecl15798 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000002000000L});
    public static final BitSet FOLLOW_NODES_in_p_CollectionDecl15802 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000800L});
    public static final BitSet FOLLOW_SEMICOLON_in_p_CollectionDecl15806 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_CONST_in_p_CollProperties15837 = new BitSet(new long[]{0x0000000000000002L,0x0000040000080000L,0x0000000000000000L,0x0000002402100000L});
    public static final BitSet FOLLOW_MUTABLE_in_p_CollProperties15843 = new BitSet(new long[]{0x0000000000000002L,0x0000040000080000L,0x0000000000000000L,0x0000002402100000L});
    public static final BitSet FOLLOW_APPEND_ONLY_in_p_CollProperties15857 = new BitSet(new long[]{0x0000000000000002L,0x0000040000080000L,0x0000000000000000L,0x0000002402100000L});
    public static final BitSet FOLLOW_QUEUE_in_p_CollProperties15863 = new BitSet(new long[]{0x0000000000000002L,0x0000040000080000L,0x0000000000000000L,0x0000002402100000L});
    public static final BitSet FOLLOW_ORDERED_in_p_CollProperties15877 = new BitSet(new long[]{0x0000000000000002L,0x0000040000080000L,0x0000000000000000L,0x0000002402100000L});
    public static final BitSet FOLLOW_UNORDERED_in_p_CollProperties15883 = new BitSet(new long[]{0x0000000000000002L,0x0000040000080000L,0x0000000000000000L,0x0000002402100000L});
    public static final BitSet FOLLOW_AS_in_p_CollectionTypeDecl15916 = new BitSet(new long[]{0x0000060080400000L,0x1000001062004000L});
    public static final BitSet FOLLOW_p_KindTest_in_p_CollectionTypeDecl15920 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0E00000000000000L});
    public static final BitSet FOLLOW_p_OccurrenceIndicator_in_p_CollectionTypeDecl15929 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_READ_ONLY_in_p_NodeModifier15960 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_MUTABLE_in_p_NodeModifier15966 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_DECLARE_in_p_IndexDecl15996 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000080000000L,0x0000010A20200000L});
    public static final BitSet FOLLOW_p_IndexProperties_in_p_IndexDecl15998 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000020000000L});
    public static final BitSet FOLLOW_INDEX_in_p_IndexDecl16002 = new BitSet(new long[]{0xFFFFFFFFFFFF0000L,0x7FDFFFFFFFFFFFFFL,0xFFFFFFFFFFFFFFFFL,0x00001FFDFFFFBFFFL,0x0000000004000000L,0x0000001000000000L});
    public static final BitSet FOLLOW_p_IndexName_in_p_IndexDecl16004 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000001000000000L});
    public static final BitSet FOLLOW_ON_in_p_IndexDecl16008 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000002000000L});
    public static final BitSet FOLLOW_NODES_in_p_IndexDecl16012 = new BitSet(new long[]{0xFFFFFFFFFFFF0000L,0x7FDFFFFFFFFFFFFFL,0xFFFFFFFFFFFFFFFFL,0x2400BFFDFFFFBFFFL,0x0000007C04C80078L,0x0000001000000000L});
    public static final BitSet FOLLOW_p_IndexDomainExpr_in_p_IndexDecl16014 = new BitSet(new long[]{0x0000000002000000L});
    public static final BitSet FOLLOW_BY_in_p_IndexDecl16018 = new BitSet(new long[]{0xFFFFFFFFFFFF0000L,0x7FDFFFFFFFFFFFFFL,0xFFFFFFFFFFFFFFFFL,0x2400BFFDFFFFBFFFL,0x0000007C04C80078L,0x0000001000000000L});
    public static final BitSet FOLLOW_p_IndexKeySpec_in_p_IndexDecl16020 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0100000000000000L,0x0000000000000800L});
    public static final BitSet FOLLOW_COMMA_in_p_IndexDecl16023 = new BitSet(new long[]{0xFFFFFFFFFFFF0000L,0x7FDFFFFFFFFFFFFFL,0xFFFFFFFFFFFFFFFFL,0x2400BFFDFFFFBFFFL,0x0000007C04C80078L,0x0000001000000000L});
    public static final BitSet FOLLOW_p_IndexKeySpec_in_p_IndexDecl16025 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0100000000000000L,0x0000000000000800L});
    public static final BitSet FOLLOW_SEMICOLON_in_p_IndexDecl16029 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_p_QName_in_p_IndexName16056 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_UNIQUE_in_p_IndexProperties16085 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000080000000L,0x0000010A00200000L});
    public static final BitSet FOLLOW_NON_in_p_IndexProperties16091 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000010000000000L});
    public static final BitSet FOLLOW_UNIQUE_in_p_IndexProperties16095 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000080000000L,0x0000010A00200000L});
    public static final BitSet FOLLOW_VALUE_in_p_IndexProperties16109 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000004000000000L});
    public static final BitSet FOLLOW_RANGE_in_p_IndexProperties16113 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000080000000L,0x0000010A00200000L});
    public static final BitSet FOLLOW_VALUE_in_p_IndexProperties16119 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000004000000L});
    public static final BitSet FOLLOW_EQUALITY_in_p_IndexProperties16123 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000080000000L,0x0000010A00200000L});
    public static final BitSet FOLLOW_AUTOMATICALLY_in_p_IndexProperties16137 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000100000000L});
    public static final BitSet FOLLOW_MAINTAINED_in_p_IndexProperties16141 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000080000000L,0x0000010A00200000L});
    public static final BitSet FOLLOW_MANUALLY_in_p_IndexProperties16147 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000100000000L});
    public static final BitSet FOLLOW_MAINTAINED_in_p_IndexProperties16151 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000080000000L,0x0000010A00200000L});
    public static final BitSet FOLLOW_p_PathExpr_in_p_IndexDomainExpr16181 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_p_IndexKeyExpr_in_p_IndexKeySpec16206 = new BitSet(new long[]{0x0000000000080000L});
    public static final BitSet FOLLOW_p_TypeDeclaration_in_p_IndexKeySpec16208 = new BitSet(new long[]{0x0000104040100000L});
    public static final BitSet FOLLOW_p_OrderModifier_in_p_IndexKeySpec16210 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_p_PathExpr_in_p_IndexKeyExpr16235 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_DECLARE_in_p_ICDecl16262 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000040000000L});
    public static final BitSet FOLLOW_INTEGRITY_in_p_ICDecl16266 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000001000000L});
    public static final BitSet FOLLOW_CONSTRAINT_in_p_ICDecl16270 = new BitSet(new long[]{0xFFFFFFFFFFFF0000L,0x7FDFFFFFFFFFFFFFL,0xFFFFFFFFFFFFFFFFL,0x00001FFDFFFFBFFFL,0x0000000004000000L,0x0000001000000000L});
    public static final BitSet FOLLOW_p_QName_in_p_ICDecl16274 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000001010000000L});
    public static final BitSet FOLLOW_p_ICCollection_in_p_ICDecl16277 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000800L});
    public static final BitSet FOLLOW_p_ICForeignKey_in_p_ICDecl16281 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000800L});
    public static final BitSet FOLLOW_SEMICOLON_in_p_ICDecl16284 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ON_in_p_ICCollection16311 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000800000L});
    public static final BitSet FOLLOW_COLLECTION_in_p_ICCollection16315 = new BitSet(new long[]{0xFFFFFFFFFFFF0000L,0x7FDFFFFFFFFFFFFFL,0xFFFFFFFFFFFFFFFFL,0x00001FFDFFFFBFFFL,0x0000000004000000L,0x0000001000000000L});
    public static final BitSet FOLLOW_p_QName_in_p_ICCollection16319 = new BitSet(new long[]{0x0000000000000000L,0x0000000000004000L,0x0000000000000000L,0x0000800008000000L});
    public static final BitSet FOLLOW_p_ICCollSequence_in_p_ICCollection16322 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_p_ICCollSequenceUnique_in_p_ICCollection16326 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_p_ICCollNode_in_p_ICCollection16330 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_DOLLAR_in_p_ICCollSequence16356 = new BitSet(new long[]{0xFFFFFFFFFFFF0000L,0x7FDFFFFFFFFFFFFFL,0xFFFFFFFFFFFFFFFFL,0x00001FFDFFFFBFFFL,0x0000000004000000L,0x0000001000000000L});
    public static final BitSet FOLLOW_p_QName_in_p_ICCollSequence16358 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000400000L});
    public static final BitSet FOLLOW_CHECK_in_p_ICCollSequence16362 = new BitSet(new long[]{0xFFFFFFFFFFFF0000L,0x7FDFFFFFFFFFFFFFL,0xFFFFFFFFFFFFFFFFL,0x3C00BFFDFFFFBFFFL,0x0000007E04C80078L,0x0000001000000000L});
    public static final BitSet FOLLOW_p_ExprSingle_in_p_ICCollSequence16366 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_NODE_in_p_ICCollSequenceUnique16393 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000800000000000L});
    public static final BitSet FOLLOW_DOLLAR_in_p_ICCollSequenceUnique16397 = new BitSet(new long[]{0xFFFFFFFFFFFF0000L,0x7FDFFFFFFFFFFFFFL,0xFFFFFFFFFFFFFFFFL,0x00001FFDFFFFBFFFL,0x0000000004000000L,0x0000001000000000L});
    public static final BitSet FOLLOW_p_QName_in_p_ICCollSequenceUnique16399 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000400000L});
    public static final BitSet FOLLOW_CHECK_in_p_ICCollSequenceUnique16403 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000010000000000L});
    public static final BitSet FOLLOW_UNIQUE_in_p_ICCollSequenceUnique16407 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000080000000L});
    public static final BitSet FOLLOW_KEY_in_p_ICCollSequenceUnique16411 = new BitSet(new long[]{0xFFFFFFFFFFFF0000L,0x7FDFFFFFFFFFFFFFL,0xFFFFFFFFFFFFFFFFL,0x2400BFFDFFFFBFFFL,0x0000007C04C80078L,0x0000001000000000L});
    public static final BitSet FOLLOW_p_PathExpr_in_p_ICCollSequenceUnique16413 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_FOREACH_in_p_ICCollNode16442 = new BitSet(new long[]{0x0000000000000000L,0x0000000000004000L});
    public static final BitSet FOLLOW_NODE_in_p_ICCollNode16446 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000800000000000L});
    public static final BitSet FOLLOW_DOLLAR_in_p_ICCollNode16448 = new BitSet(new long[]{0xFFFFFFFFFFFF0000L,0x7FDFFFFFFFFFFFFFL,0xFFFFFFFFFFFFFFFFL,0x00001FFDFFFFBFFFL,0x0000000004000000L,0x0000001000000000L});
    public static final BitSet FOLLOW_p_QName_in_p_ICCollNode16450 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000400000L});
    public static final BitSet FOLLOW_CHECK_in_p_ICCollNode16454 = new BitSet(new long[]{0xFFFFFFFFFFFF0000L,0x7FDFFFFFFFFFFFFFL,0xFFFFFFFFFFFFFFFFL,0x3C00BFFDFFFFBFFFL,0x0000007E04C80078L,0x0000001000000000L});
    public static final BitSet FOLLOW_p_ExprSingle_in_p_ICCollNode16456 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_FOREIGN_in_p_ICForeignKey16485 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000080000000L});
    public static final BitSet FOLLOW_KEY_in_p_ICForeignKey16489 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000040000000000L});
    public static final BitSet FOLLOW_p_ICForeignKeySource_in_p_ICForeignKey16491 = new BitSet(new long[]{0x0000000000000000L,0x0000004000000000L});
    public static final BitSet FOLLOW_p_ICForeignKeyTarget_in_p_ICForeignKey16493 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_FROM_in_p_ICForeignKeySource16522 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000800000L});
    public static final BitSet FOLLOW_p_ICForeignKeyValues_in_p_ICForeignKeySource16526 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_TO_in_p_ICForeignKeyTarget16553 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000800000L});
    public static final BitSet FOLLOW_p_ICForeignKeyValues_in_p_ICForeignKeyTarget16557 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_COLLECTION_in_p_ICForeignKeyValues16584 = new BitSet(new long[]{0xFFFFFFFFFFFF0000L,0x7FDFFFFFFFFFFFFFL,0xFFFFFFFFFFFFFFFFL,0x00001FFDFFFFBFFFL,0x0000000004000000L,0x0000001000000000L});
    public static final BitSet FOLLOW_p_QName_in_p_ICForeignKeyValues16586 = new BitSet(new long[]{0x0000000000000000L,0x0000000000004000L});
    public static final BitSet FOLLOW_NODE_in_p_ICForeignKeyValues16590 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000800000000000L});
    public static final BitSet FOLLOW_DOLLAR_in_p_ICForeignKeyValues16592 = new BitSet(new long[]{0xFFFFFFFFFFFF0000L,0x7FDFFFFFFFFFFFFFL,0xFFFFFFFFFFFFFFFFL,0x00001FFDFFFFBFFFL,0x0000000004000000L,0x0000001000000000L});
    public static final BitSet FOLLOW_p_QName_in_p_ICForeignKeyValues16594 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000080000000L});
    public static final BitSet FOLLOW_KEY_in_p_ICForeignKeyValues16598 = new BitSet(new long[]{0xFFFFFFFFFFFF0000L,0x7FDFFFFFFFFFFFFFL,0xFFFFFFFFFFFFFFFFL,0x2400BFFDFFFFBFFFL,0x0000007C04C80078L,0x0000001000000000L});
    public static final BitSet FOLLOW_p_PathExpr_in_p_ICForeignKeyValues16600 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_VALIDATE_in_synpred1_XQueryParser5982 = new BitSet(new long[]{0x0000000000080000L,0x0000000400000008L});
    public static final BitSet FOLLOW_p_ValidationMode_in_synpred1_XQueryParser5984 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0001000000000000L});
    public static final BitSet FOLLOW_LBRACKET_in_synpred1_XQueryParser5986 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_SLASH_in_synpred2_XQueryParser6328 = new BitSet(new long[]{0xFFFFFFFFFFFF0000L,0x7FDFFFFFFFFFFFFFL,0xFFFFFFFFFFFFFFFFL,0x2400BFFDFFFFBFFFL,0x0000007C04C80078L,0x0000001000000000L});
    public static final BitSet FOLLOW_p_RelativePathExpr_in_synpred2_XQueryParser6330 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_p_OccurrenceIndicator_in_synpred3_XQueryParser9005 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_p_OccurrenceIndicator_in_synpred4_XQueryParser15924 = new BitSet(new long[]{0x0000000000000002L});

}