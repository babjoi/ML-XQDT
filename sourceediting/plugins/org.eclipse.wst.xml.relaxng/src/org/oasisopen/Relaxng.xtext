// *******************************************************************************
// * Copyright (c) 2009 Standards for Technology in Automotive Retail and others.
// * All rights reserved. This program and the accompanying materials
// * are made available under the terms of the Eclipse Public License v1.0
// * which accompanies this distribution, and is available at
// * http://www.eclipse.org/legal/epl-v10.html
// *
// * Contributors:
// *     David Carver (STAR) - initial implementation
// *       Based on the OASIS RelaxNG EBNF Compact Syntax grammar definition.
// *       Written for XText grammar.
// *       http://www.oasis-open.org/committees/relax-ng/compact-20021121.html
// *******************************************************************************/


grammar org.oasisopen.Relaxng with org.eclipse.xtext.common.Terminals

generate relaxng "http://www.oasis-open.org/relaxng"

TopLevel:
    decls+=Decl* (pattern=Pattern | grammarContent+=GrammarContent*);
    
Decl:
   'namespace' prefix=ID '=' uri=STRING |
   'default' 'namespace' prefix=ID '=' uri=STRING |
   'datatypes' datatypeId=ID '=' value=STRING;


Pattern:
  (val=(Element | Attribute))+   |
   'list' '{' pattern+=Pattern* '}' |
   'mixed' '{' pattern+=Pattern* '}' |
  ID ('=')?|
   'parent' ID |
   'empty' |
   'text' |
   '|' |
   (value=DataTypeValue)+ |
   DataTypeName ('{' param+=Param* '}')* (exceptPattern=ExceptPattern)* |
   'notAllowed' |
   'external'uri=AnyURILiteral (inherit=Inherit)* |
   'grammar' '{' grammarContent+=GrammarContent* '}' |
   '(' group+=Pattern* ')' (continue=',')?
;

Element:
    'element' elemName=NameClass '{' pattern+=Pattern* '}' (cardinality=('?' | '+' | '*'))?  (continue=(',' | '&' | '|'))?;

Attribute:
    'attribute' attrName=NameClass '{' pattern+=Pattern* '}' (cardinality='?')? (continue=(',' | '|'))?; 
  
   
Param:
	IdentifierOrKeyWord '=' parmValue=Literal;

ExceptPattern:
	'-' Pattern;

GrammarContent:
	Start | Define |
	'div' '{' grammarContenGrammarContent+=GrammarContent* '}' |
	'include' AnyURILiteral (inherit=Inherit) ('{' includeContent+=IncludeContent* '}');

IncludeContent:
	Define | Start |
	'div' '{' includeGrammarContent+=GrammarContent* '}';

Start:
	'start' ('=' | '|=' | '&=') (ID | pattern=Pattern);

Define:
	ID ('=' | '|=' | '&=') pattern=Pattern;

Name:
	IdentifierOrKeyWord | CName;

ExceptNameClass:
	'-' NameClass;

NameClass:
	Name |
	ID (exceptClassName=ExceptNameClass)? |
	AnyName (exceptClassName=ExceptNameClass)? |
    '|' nc=NameClass |
	'(' nc=NameClass ')';

DataTypeName:
	CName |
	'string' |
	'token';

DataTypeValue:
	Literal;

AnyURILiteral:
	Literal;

NamespaceURILiteral:
	Literal | 'inherit';

Inherit:
	'inherit' '=' IdentifierOrKeyWord;

IdentifierOrKeyWord:
	Identifier | KeyWord;


Identifier:
	(ID keyWord=KeyWord) |
	QuotedIdentifier;

QuotedIdentifier:
	"\\" ID;
	
CName:
	ID ':' ID;


AnyName:
	'*';

Literal:
   STRING ('~' literalSegment=STRING)+;
	
KeyWord:
	"attribute"
	| "default"
	| "datatypes"
	| "div"
	| "element"
	| "empty"
	| "external"
	| "grammar"
	| "include"
	| "inherit"
	| "list"
	| "mixed"
	| "namespace"
	| "notAllowed"
	| "parent"
	| "start"
	| "string"
	| "text"
	| "token";
	