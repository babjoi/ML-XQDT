/*
* generated by Xtext
*/
package org.oasisopen.parseTreeConstruction;

import org.eclipse.emf.ecore.*;
import org.eclipse.xtext.*;
import org.eclipse.xtext.parsetree.reconstr.IInstanceDescription;
import org.eclipse.xtext.parsetree.reconstr.impl.AbstractParseTreeConstructor;

import org.oasisopen.services.RelaxngGrammarAccess;

import com.google.inject.Inject;

public class RelaxngParsetreeConstructor extends AbstractParseTreeConstructor {
		
	@Inject
	private RelaxngGrammarAccess grammarAccess;
		
	public RelaxngGrammarAccess getGrammarAccess() {
		return grammarAccess;
	}

	protected AbstractToken getRootToken(IInstanceDescription inst) {
		return new ThisRootNode(inst);	
	}
	
protected class ThisRootNode extends RootToken {
	public ThisRootNode(IInstanceDescription inst) {
		super(inst);
	}
	
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new TopLevel_Group(this, this, 0, inst);
			case 1: return new Decl_Alternatives(this, this, 1, inst);
			case 2: return new Pattern_Alternatives(this, this, 2, inst);
			case 3: return new Element_Group(this, this, 3, inst);
			case 4: return new Attribute_Group(this, this, 4, inst);
			case 5: return new Param_Group(this, this, 5, inst);
			case 6: return new ExceptPattern_Group(this, this, 6, inst);
			case 7: return new GrammarContent_Alternatives(this, this, 7, inst);
			case 8: return new IncludeContent_Alternatives(this, this, 8, inst);
			case 9: return new Start_Group(this, this, 9, inst);
			case 10: return new Define_Group(this, this, 10, inst);
			case 11: return new Name_Alternatives(this, this, 11, inst);
			case 12: return new ExceptNameClass_Group(this, this, 12, inst);
			case 13: return new NameClass_Alternatives(this, this, 13, inst);
			case 14: return new DataTypeValue_LiteralParserRuleCall(this, this, 14, inst);
			case 15: return new AnyURILiteral_LiteralParserRuleCall(this, this, 15, inst);
			case 16: return new NamespaceURILiteral_Alternatives(this, this, 16, inst);
			case 17: return new Inherit_Group(this, this, 17, inst);
			case 18: return new IdentifierOrKeyWord_Alternatives(this, this, 18, inst);
			case 19: return new Identifier_Alternatives(this, this, 19, inst);
			case 20: return new AnyName_AsteriskKeyword(this, this, 20, inst);
			case 21: return new Literal_Group(this, this, 21, inst);
			case 22: return new KeyWord_Alternatives(this, this, 22, inst);
			default: return null;
		}	
	}	
}
	

/************ begin Rule TopLevel ****************
 *
 * TopLevel:
 *   decls+=Decl* (pattern=Pattern|grammarContent+=GrammarContent*);
 *
 **/

// decls+=Decl* (pattern=Pattern|grammarContent+=GrammarContent*)
protected class TopLevel_Group extends GroupToken {
	
	public TopLevel_Group(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Group getGrammarElement() {
		return grammarAccess.getTopLevelAccess().getGroup();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new TopLevel_Alternatives_1(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
	public IInstanceDescription tryConsume() {
		if(!current.isInstanceOf(grammarAccess.getTopLevelRule().getType().getClassifier())) return null;
		return tryConsumeVal();
	}
}

// decls+=Decl*
protected class TopLevel_DeclsAssignment_0 extends AssignmentToken  {
	
	public TopLevel_DeclsAssignment_0(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Assignment getGrammarElement() {
		return grammarAccess.getTopLevelAccess().getDeclsAssignment_0();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new Decl_Alternatives(this, this, 0, inst);
			default: return null;
		}	
	}	
		
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("decls",false)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("decls");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IInstanceDescription param = getDescr((EObject)value);
			if(param.isInstanceOf(grammarAccess.getDeclRule().getType().getClassifier())) {
				type = AssignmentType.PRC;
				element = grammarAccess.getTopLevelAccess().getDeclsDeclParserRuleCall_0_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

	public AbstractToken createParentFollower(AbstractToken next,	int actIndex, int index, IInstanceDescription inst) {
		if(value == inst.getDelegate() && !inst.isConsumed()) return null;
		switch(index) {
			case 0: return new TopLevel_DeclsAssignment_0(parent, next, actIndex, consumed);
			default: return parent.createParentFollower(next, actIndex , index - 1, consumed);
		}	
	}	
}

// pattern=Pattern|grammarContent+=GrammarContent*
protected class TopLevel_Alternatives_1 extends AlternativesToken {

	public TopLevel_Alternatives_1(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Alternatives getGrammarElement() {
		return grammarAccess.getTopLevelAccess().getAlternatives_1();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new TopLevel_PatternAssignment_1_0(parent, this, 0, inst);
			case 1: return new TopLevel_GrammarContentAssignment_1_1(parent, this, 1, inst);
			default: return null;
		}	
	}	
		
}

// pattern=Pattern
protected class TopLevel_PatternAssignment_1_0 extends AssignmentToken  {
	
	public TopLevel_PatternAssignment_1_0(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Assignment getGrammarElement() {
		return grammarAccess.getTopLevelAccess().getPatternAssignment_1_0();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new Pattern_Alternatives(this, this, 0, inst);
			default: return null;
		}	
	}	
		
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("pattern",true)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("pattern");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IInstanceDescription param = getDescr((EObject)value);
			if(param.isInstanceOf(grammarAccess.getPatternRule().getType().getClassifier())) {
				type = AssignmentType.PRC;
				element = grammarAccess.getTopLevelAccess().getPatternPatternParserRuleCall_1_0_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

	public AbstractToken createParentFollower(AbstractToken next,	int actIndex, int index, IInstanceDescription inst) {
		if(value == inst.getDelegate() && !inst.isConsumed()) return null;
		switch(index) {
			case 0: return new TopLevel_DeclsAssignment_0(parent, next, actIndex, consumed);
			default: return parent.createParentFollower(next, actIndex , index - 1, consumed);
		}	
	}	
}

// grammarContent+=GrammarContent*
protected class TopLevel_GrammarContentAssignment_1_1 extends AssignmentToken  {
	
	public TopLevel_GrammarContentAssignment_1_1(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Assignment getGrammarElement() {
		return grammarAccess.getTopLevelAccess().getGrammarContentAssignment_1_1();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new GrammarContent_Alternatives(this, this, 0, inst);
			default: return null;
		}	
	}	
		
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("grammarContent",false)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("grammarContent");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IInstanceDescription param = getDescr((EObject)value);
			if(param.isInstanceOf(grammarAccess.getGrammarContentRule().getType().getClassifier())) {
				type = AssignmentType.PRC;
				element = grammarAccess.getTopLevelAccess().getGrammarContentGrammarContentParserRuleCall_1_1_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

	public AbstractToken createParentFollower(AbstractToken next,	int actIndex, int index, IInstanceDescription inst) {
		if(value == inst.getDelegate() && !inst.isConsumed()) return null;
		switch(index) {
			case 0: return new TopLevel_GrammarContentAssignment_1_1(parent, next, actIndex, consumed);
			case 1: return new TopLevel_DeclsAssignment_0(parent, next, actIndex, consumed);
			default: return parent.createParentFollower(next, actIndex , index - 2, consumed);
		}	
	}	
}



/************ end Rule TopLevel ****************/


/************ begin Rule Decl ****************
 *
 * Decl:
 *   "namespace" prefix=ID "=" uri=STRING|"default" "namespace" prefix=ID "=" uri=STRING|
 *   "datatypes" datatypeId=ID "=" value=STRING;
 *
 **/

// "namespace" prefix=ID "=" uri=STRING|"default" "namespace" prefix=ID "=" uri=STRING|
// "datatypes" datatypeId=ID "=" value=STRING
protected class Decl_Alternatives extends AlternativesToken {

	public Decl_Alternatives(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Alternatives getGrammarElement() {
		return grammarAccess.getDeclAccess().getAlternatives();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new Decl_Group_0(parent, this, 0, inst);
			case 1: return new Decl_Group_1(parent, this, 1, inst);
			case 2: return new Decl_Group_2(parent, this, 2, inst);
			default: return null;
		}	
	}	
		
	public IInstanceDescription tryConsume() {
		if(!current.isInstanceOf(grammarAccess.getDeclRule().getType().getClassifier())) return null;
		return tryConsumeVal();
	}
}

// "namespace" prefix=ID "=" uri=STRING
protected class Decl_Group_0 extends GroupToken {
	
	public Decl_Group_0(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Group getGrammarElement() {
		return grammarAccess.getDeclAccess().getGroup_0();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new Decl_UriAssignment_0_3(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
}

// "namespace"
protected class Decl_NamespaceKeyword_0_0 extends KeywordToken  {
	
	public Decl_NamespaceKeyword_0_0(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Keyword getGrammarElement() {
		return grammarAccess.getDeclAccess().getNamespaceKeyword_0_0();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			default: return parent.createParentFollower(this, index, index, inst);
		}	
	}	
		
}

// prefix=ID
protected class Decl_PrefixAssignment_0_1 extends AssignmentToken  {
	
	public Decl_PrefixAssignment_0_1(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Assignment getGrammarElement() {
		return grammarAccess.getDeclAccess().getPrefixAssignment_0_1();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new Decl_NamespaceKeyword_0_0(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("prefix",true)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("prefix");
		if(Boolean.TRUE.booleanValue()) { // org::eclipse::xtext::impl::RuleCallImpl FIXME: check if value is valid for lexer rule
			type = AssignmentType.LRC;
			element = grammarAccess.getDeclAccess().getPrefixIDTerminalRuleCall_0_1_0();
			return obj;
		}
		return null;
	}

}

// "="
protected class Decl_EqualsSignKeyword_0_2 extends KeywordToken  {
	
	public Decl_EqualsSignKeyword_0_2(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Keyword getGrammarElement() {
		return grammarAccess.getDeclAccess().getEqualsSignKeyword_0_2();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new Decl_PrefixAssignment_0_1(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
}

// uri=STRING
protected class Decl_UriAssignment_0_3 extends AssignmentToken  {
	
	public Decl_UriAssignment_0_3(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Assignment getGrammarElement() {
		return grammarAccess.getDeclAccess().getUriAssignment_0_3();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new Decl_EqualsSignKeyword_0_2(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("uri",true)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("uri");
		if(Boolean.TRUE.booleanValue()) { // org::eclipse::xtext::impl::RuleCallImpl FIXME: check if value is valid for lexer rule
			type = AssignmentType.LRC;
			element = grammarAccess.getDeclAccess().getUriSTRINGTerminalRuleCall_0_3_0();
			return obj;
		}
		return null;
	}

}


// "default" "namespace" prefix=ID "=" uri=STRING
protected class Decl_Group_1 extends GroupToken {
	
	public Decl_Group_1(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Group getGrammarElement() {
		return grammarAccess.getDeclAccess().getGroup_1();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new Decl_UriAssignment_1_4(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
}

// "default"
protected class Decl_DefaultKeyword_1_0 extends KeywordToken  {
	
	public Decl_DefaultKeyword_1_0(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Keyword getGrammarElement() {
		return grammarAccess.getDeclAccess().getDefaultKeyword_1_0();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			default: return parent.createParentFollower(this, index, index, inst);
		}	
	}	
		
}

// "namespace"
protected class Decl_NamespaceKeyword_1_1 extends KeywordToken  {
	
	public Decl_NamespaceKeyword_1_1(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Keyword getGrammarElement() {
		return grammarAccess.getDeclAccess().getNamespaceKeyword_1_1();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new Decl_DefaultKeyword_1_0(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
}

// prefix=ID
protected class Decl_PrefixAssignment_1_2 extends AssignmentToken  {
	
	public Decl_PrefixAssignment_1_2(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Assignment getGrammarElement() {
		return grammarAccess.getDeclAccess().getPrefixAssignment_1_2();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new Decl_NamespaceKeyword_1_1(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("prefix",true)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("prefix");
		if(Boolean.TRUE.booleanValue()) { // org::eclipse::xtext::impl::RuleCallImpl FIXME: check if value is valid for lexer rule
			type = AssignmentType.LRC;
			element = grammarAccess.getDeclAccess().getPrefixIDTerminalRuleCall_1_2_0();
			return obj;
		}
		return null;
	}

}

// "="
protected class Decl_EqualsSignKeyword_1_3 extends KeywordToken  {
	
	public Decl_EqualsSignKeyword_1_3(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Keyword getGrammarElement() {
		return grammarAccess.getDeclAccess().getEqualsSignKeyword_1_3();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new Decl_PrefixAssignment_1_2(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
}

// uri=STRING
protected class Decl_UriAssignment_1_4 extends AssignmentToken  {
	
	public Decl_UriAssignment_1_4(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Assignment getGrammarElement() {
		return grammarAccess.getDeclAccess().getUriAssignment_1_4();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new Decl_EqualsSignKeyword_1_3(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("uri",true)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("uri");
		if(Boolean.TRUE.booleanValue()) { // org::eclipse::xtext::impl::RuleCallImpl FIXME: check if value is valid for lexer rule
			type = AssignmentType.LRC;
			element = grammarAccess.getDeclAccess().getUriSTRINGTerminalRuleCall_1_4_0();
			return obj;
		}
		return null;
	}

}


// "datatypes" datatypeId=ID "=" value=STRING
protected class Decl_Group_2 extends GroupToken {
	
	public Decl_Group_2(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Group getGrammarElement() {
		return grammarAccess.getDeclAccess().getGroup_2();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new Decl_ValueAssignment_2_3(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
}

// "datatypes"
protected class Decl_DatatypesKeyword_2_0 extends KeywordToken  {
	
	public Decl_DatatypesKeyword_2_0(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Keyword getGrammarElement() {
		return grammarAccess.getDeclAccess().getDatatypesKeyword_2_0();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			default: return parent.createParentFollower(this, index, index, inst);
		}	
	}	
		
}

// datatypeId=ID
protected class Decl_DatatypeIdAssignment_2_1 extends AssignmentToken  {
	
	public Decl_DatatypeIdAssignment_2_1(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Assignment getGrammarElement() {
		return grammarAccess.getDeclAccess().getDatatypeIdAssignment_2_1();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new Decl_DatatypesKeyword_2_0(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("datatypeId",true)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("datatypeId");
		if(Boolean.TRUE.booleanValue()) { // org::eclipse::xtext::impl::RuleCallImpl FIXME: check if value is valid for lexer rule
			type = AssignmentType.LRC;
			element = grammarAccess.getDeclAccess().getDatatypeIdIDTerminalRuleCall_2_1_0();
			return obj;
		}
		return null;
	}

}

// "="
protected class Decl_EqualsSignKeyword_2_2 extends KeywordToken  {
	
	public Decl_EqualsSignKeyword_2_2(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Keyword getGrammarElement() {
		return grammarAccess.getDeclAccess().getEqualsSignKeyword_2_2();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new Decl_DatatypeIdAssignment_2_1(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
}

// value=STRING
protected class Decl_ValueAssignment_2_3 extends AssignmentToken  {
	
	public Decl_ValueAssignment_2_3(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Assignment getGrammarElement() {
		return grammarAccess.getDeclAccess().getValueAssignment_2_3();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new Decl_EqualsSignKeyword_2_2(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("value",true)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("value");
		if(Boolean.TRUE.booleanValue()) { // org::eclipse::xtext::impl::RuleCallImpl FIXME: check if value is valid for lexer rule
			type = AssignmentType.LRC;
			element = grammarAccess.getDeclAccess().getValueSTRINGTerminalRuleCall_2_3_0();
			return obj;
		}
		return null;
	}

}



/************ end Rule Decl ****************/


/************ begin Rule Pattern ****************
 *
 * Pattern:
 *   val=( Element | Attribute )+|"list" "{" pattern+=Pattern* "}"|"mixed" "{" pattern+=
 *   Pattern* "}"|ID "="?|"parent" ID|"empty"|"text"|"|"|value=DataTypeValue+|
 *   DataTypeName ("{" param+=Param* "}")* exceptPattern=ExceptPattern*|"notAllowed"|
 *   "external" uri=AnyURILiteral inherit=Inherit*|"grammar" "{" grammarContent+=
 *   GrammarContent* "}"|"(" group+=Pattern* ")" continue=","?;
 *
 **/

// val=( Element | Attribute )+|"list" "{" pattern+=Pattern* "}"|"mixed" "{" pattern+=
// Pattern* "}"|ID "="?|"parent" ID|"empty"|"text"|"|"|value=DataTypeValue+|
// DataTypeName ("{" param+=Param* "}")* exceptPattern=ExceptPattern*|"notAllowed"|
// "external" uri=AnyURILiteral inherit=Inherit*|"grammar" "{" grammarContent+=
// GrammarContent* "}"|"(" group+=Pattern* ")" continue=","?
protected class Pattern_Alternatives extends AlternativesToken {

	public Pattern_Alternatives(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Alternatives getGrammarElement() {
		return grammarAccess.getPatternAccess().getAlternatives();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new Pattern_ValAssignment_0(parent, this, 0, inst);
			case 1: return new Pattern_Group_1(parent, this, 1, inst);
			case 2: return new Pattern_Group_2(parent, this, 2, inst);
			case 3: return new Pattern_Group_3(parent, this, 3, inst);
			case 4: return new Pattern_Group_4(parent, this, 4, inst);
			case 5: return new Pattern_EmptyKeyword_5(parent, this, 5, inst);
			case 6: return new Pattern_TextKeyword_6(parent, this, 6, inst);
			case 7: return new Pattern_VerticalLineKeyword_7(parent, this, 7, inst);
			case 8: return new Pattern_ValueAssignment_8(parent, this, 8, inst);
			case 9: return new Pattern_Group_9(parent, this, 9, inst);
			case 10: return new Pattern_NotAllowedKeyword_10(parent, this, 10, inst);
			case 11: return new Pattern_Group_11(parent, this, 11, inst);
			case 12: return new Pattern_Group_12(parent, this, 12, inst);
			case 13: return new Pattern_Group_13(parent, this, 13, inst);
			default: return null;
		}	
	}	
		
	public IInstanceDescription tryConsume() {
		if(!current.isInstanceOf(grammarAccess.getPatternRule().getType().getClassifier())) return null;
		return tryConsumeVal();
	}
}

// val=( Element | Attribute )+
protected class Pattern_ValAssignment_0 extends AssignmentToken  {
	
	public Pattern_ValAssignment_0(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Assignment getGrammarElement() {
		return grammarAccess.getPatternAccess().getValAssignment_0();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new Element_Group(this, this, 0, inst);
			case 1: return new Attribute_Group(this, this, 1, inst);
			default: return null;
		}	
	}	
		
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("val",true)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("val");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IInstanceDescription param = getDescr((EObject)value);
			if(param.isInstanceOf(grammarAccess.getElementRule().getType().getClassifier())) {
				type = AssignmentType.PRC;
				element = grammarAccess.getPatternAccess().getValElementParserRuleCall_0_0_0(); 
				consumed = obj;
				return param;
			}
		}
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IInstanceDescription param = getDescr((EObject)value);
			if(param.isInstanceOf(grammarAccess.getAttributeRule().getType().getClassifier())) {
				type = AssignmentType.PRC;
				element = grammarAccess.getPatternAccess().getValAttributeParserRuleCall_0_0_1(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

	public AbstractToken createParentFollower(AbstractToken next,	int actIndex, int index, IInstanceDescription inst) {
		if(value == inst.getDelegate() && !inst.isConsumed()) return null;
		switch(index) {
			case 0: return new Pattern_ValAssignment_0(parent, next, actIndex, consumed);
			default: return parent.createParentFollower(next, actIndex , index - 1, consumed);
		}	
	}	
}

// "list" "{" pattern+=Pattern* "}"
protected class Pattern_Group_1 extends GroupToken {
	
	public Pattern_Group_1(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Group getGrammarElement() {
		return grammarAccess.getPatternAccess().getGroup_1();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new Pattern_RightCurlyBracketKeyword_1_3(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
}

// "list"
protected class Pattern_ListKeyword_1_0 extends KeywordToken  {
	
	public Pattern_ListKeyword_1_0(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Keyword getGrammarElement() {
		return grammarAccess.getPatternAccess().getListKeyword_1_0();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			default: return parent.createParentFollower(this, index, index, inst);
		}	
	}	
		
}

// "{"
protected class Pattern_LeftCurlyBracketKeyword_1_1 extends KeywordToken  {
	
	public Pattern_LeftCurlyBracketKeyword_1_1(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Keyword getGrammarElement() {
		return grammarAccess.getPatternAccess().getLeftCurlyBracketKeyword_1_1();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new Pattern_ListKeyword_1_0(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
}

// pattern+=Pattern*
protected class Pattern_PatternAssignment_1_2 extends AssignmentToken  {
	
	public Pattern_PatternAssignment_1_2(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Assignment getGrammarElement() {
		return grammarAccess.getPatternAccess().getPatternAssignment_1_2();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new Pattern_Alternatives(this, this, 0, inst);
			default: return null;
		}	
	}	
		
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("pattern",false)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("pattern");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IInstanceDescription param = getDescr((EObject)value);
			if(param.isInstanceOf(grammarAccess.getPatternRule().getType().getClassifier())) {
				type = AssignmentType.PRC;
				element = grammarAccess.getPatternAccess().getPatternPatternParserRuleCall_1_2_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

	public AbstractToken createParentFollower(AbstractToken next,	int actIndex, int index, IInstanceDescription inst) {
		if(value == inst.getDelegate() && !inst.isConsumed()) return null;
		switch(index) {
			case 0: return new Pattern_PatternAssignment_1_2(parent, next, actIndex, consumed);
			case 1: return new Pattern_LeftCurlyBracketKeyword_1_1(parent, next, actIndex, consumed);
			default: return null;
		}	
	}	
}

// "}"
protected class Pattern_RightCurlyBracketKeyword_1_3 extends KeywordToken  {
	
	public Pattern_RightCurlyBracketKeyword_1_3(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Keyword getGrammarElement() {
		return grammarAccess.getPatternAccess().getRightCurlyBracketKeyword_1_3();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new Pattern_PatternAssignment_1_2(parent, this, 0, inst);
			case 1: return new Pattern_LeftCurlyBracketKeyword_1_1(parent, this, 1, inst);
			default: return null;
		}	
	}	
		
}


// "mixed" "{" pattern+=Pattern* "}"
protected class Pattern_Group_2 extends GroupToken {
	
	public Pattern_Group_2(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Group getGrammarElement() {
		return grammarAccess.getPatternAccess().getGroup_2();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new Pattern_RightCurlyBracketKeyword_2_3(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
}

// "mixed"
protected class Pattern_MixedKeyword_2_0 extends KeywordToken  {
	
	public Pattern_MixedKeyword_2_0(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Keyword getGrammarElement() {
		return grammarAccess.getPatternAccess().getMixedKeyword_2_0();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			default: return parent.createParentFollower(this, index, index, inst);
		}	
	}	
		
}

// "{"
protected class Pattern_LeftCurlyBracketKeyword_2_1 extends KeywordToken  {
	
	public Pattern_LeftCurlyBracketKeyword_2_1(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Keyword getGrammarElement() {
		return grammarAccess.getPatternAccess().getLeftCurlyBracketKeyword_2_1();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new Pattern_MixedKeyword_2_0(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
}

// pattern+=Pattern*
protected class Pattern_PatternAssignment_2_2 extends AssignmentToken  {
	
	public Pattern_PatternAssignment_2_2(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Assignment getGrammarElement() {
		return grammarAccess.getPatternAccess().getPatternAssignment_2_2();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new Pattern_Alternatives(this, this, 0, inst);
			default: return null;
		}	
	}	
		
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("pattern",false)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("pattern");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IInstanceDescription param = getDescr((EObject)value);
			if(param.isInstanceOf(grammarAccess.getPatternRule().getType().getClassifier())) {
				type = AssignmentType.PRC;
				element = grammarAccess.getPatternAccess().getPatternPatternParserRuleCall_2_2_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

	public AbstractToken createParentFollower(AbstractToken next,	int actIndex, int index, IInstanceDescription inst) {
		if(value == inst.getDelegate() && !inst.isConsumed()) return null;
		switch(index) {
			case 0: return new Pattern_PatternAssignment_2_2(parent, next, actIndex, consumed);
			case 1: return new Pattern_LeftCurlyBracketKeyword_2_1(parent, next, actIndex, consumed);
			default: return null;
		}	
	}	
}

// "}"
protected class Pattern_RightCurlyBracketKeyword_2_3 extends KeywordToken  {
	
	public Pattern_RightCurlyBracketKeyword_2_3(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Keyword getGrammarElement() {
		return grammarAccess.getPatternAccess().getRightCurlyBracketKeyword_2_3();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new Pattern_PatternAssignment_2_2(parent, this, 0, inst);
			case 1: return new Pattern_LeftCurlyBracketKeyword_2_1(parent, this, 1, inst);
			default: return null;
		}	
	}	
		
}


// ID "="?
protected class Pattern_Group_3 extends GroupToken {
	
	public Pattern_Group_3(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Group getGrammarElement() {
		return grammarAccess.getPatternAccess().getGroup_3();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new Pattern_EqualsSignKeyword_3_1(parent, this, 0, inst);
			case 1: return new Pattern_IDTerminalRuleCall_3_0(parent, this, 1, inst);
			default: return null;
		}	
	}	
		
}

// ID
protected class Pattern_IDTerminalRuleCall_3_0 extends UnassignedTextToken {

	public Pattern_IDTerminalRuleCall_3_0(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public RuleCall getGrammarElement() {
		return grammarAccess.getPatternAccess().getIDTerminalRuleCall_3_0();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			default: return parent.createParentFollower(this, index, index, inst);
		}	
	}	
		
}

// "="?
protected class Pattern_EqualsSignKeyword_3_1 extends KeywordToken  {
	
	public Pattern_EqualsSignKeyword_3_1(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Keyword getGrammarElement() {
		return grammarAccess.getPatternAccess().getEqualsSignKeyword_3_1();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new Pattern_IDTerminalRuleCall_3_0(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
}


// "parent" ID
protected class Pattern_Group_4 extends GroupToken {
	
	public Pattern_Group_4(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Group getGrammarElement() {
		return grammarAccess.getPatternAccess().getGroup_4();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new Pattern_IDTerminalRuleCall_4_1(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
}

// "parent"
protected class Pattern_ParentKeyword_4_0 extends KeywordToken  {
	
	public Pattern_ParentKeyword_4_0(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Keyword getGrammarElement() {
		return grammarAccess.getPatternAccess().getParentKeyword_4_0();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			default: return parent.createParentFollower(this, index, index, inst);
		}	
	}	
		
}

// ID
protected class Pattern_IDTerminalRuleCall_4_1 extends UnassignedTextToken {

	public Pattern_IDTerminalRuleCall_4_1(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public RuleCall getGrammarElement() {
		return grammarAccess.getPatternAccess().getIDTerminalRuleCall_4_1();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new Pattern_ParentKeyword_4_0(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
}


// "empty"
protected class Pattern_EmptyKeyword_5 extends KeywordToken  {
	
	public Pattern_EmptyKeyword_5(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Keyword getGrammarElement() {
		return grammarAccess.getPatternAccess().getEmptyKeyword_5();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			default: return parent.createParentFollower(this, index, index, inst);
		}	
	}	
		
}

// "text"
protected class Pattern_TextKeyword_6 extends KeywordToken  {
	
	public Pattern_TextKeyword_6(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Keyword getGrammarElement() {
		return grammarAccess.getPatternAccess().getTextKeyword_6();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			default: return parent.createParentFollower(this, index, index, inst);
		}	
	}	
		
}

// "|"
protected class Pattern_VerticalLineKeyword_7 extends KeywordToken  {
	
	public Pattern_VerticalLineKeyword_7(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Keyword getGrammarElement() {
		return grammarAccess.getPatternAccess().getVerticalLineKeyword_7();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			default: return parent.createParentFollower(this, index, index, inst);
		}	
	}	
		
}

// value=DataTypeValue+
protected class Pattern_ValueAssignment_8 extends AssignmentToken  {
	
	public Pattern_ValueAssignment_8(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Assignment getGrammarElement() {
		return grammarAccess.getPatternAccess().getValueAssignment_8();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new DataTypeValue_LiteralParserRuleCall(this, this, 0, inst);
			default: return null;
		}	
	}	
		
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("value",true)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("value");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IInstanceDescription param = getDescr((EObject)value);
			if(param.isInstanceOf(grammarAccess.getDataTypeValueRule().getType().getClassifier())) {
				type = AssignmentType.PRC;
				element = grammarAccess.getPatternAccess().getValueDataTypeValueParserRuleCall_8_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

	public AbstractToken createParentFollower(AbstractToken next,	int actIndex, int index, IInstanceDescription inst) {
		if(value == inst.getDelegate() && !inst.isConsumed()) return null;
		switch(index) {
			case 0: return new Pattern_ValueAssignment_8(parent, next, actIndex, consumed);
			default: return parent.createParentFollower(next, actIndex , index - 1, consumed);
		}	
	}	
}

// DataTypeName ("{" param+=Param* "}")* exceptPattern=ExceptPattern*
protected class Pattern_Group_9 extends GroupToken {
	
	public Pattern_Group_9(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Group getGrammarElement() {
		return grammarAccess.getPatternAccess().getGroup_9();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new Pattern_ExceptPatternAssignment_9_2(parent, this, 0, inst);
			case 1: return new Pattern_Group_9_1(parent, this, 1, inst);
			case 2: return new Pattern_DataTypeNameParserRuleCall_9_0(parent, this, 2, inst);
			default: return null;
		}	
	}	
		
}

// DataTypeName
protected class Pattern_DataTypeNameParserRuleCall_9_0 extends UnassignedTextToken {

	public Pattern_DataTypeNameParserRuleCall_9_0(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public RuleCall getGrammarElement() {
		return grammarAccess.getPatternAccess().getDataTypeNameParserRuleCall_9_0();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			default: return parent.createParentFollower(this, index, index, inst);
		}	
	}	
		
}

// ("{" param+=Param* "}")*
protected class Pattern_Group_9_1 extends GroupToken {
	
	public Pattern_Group_9_1(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Group getGrammarElement() {
		return grammarAccess.getPatternAccess().getGroup_9_1();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new Pattern_RightCurlyBracketKeyword_9_1_2(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
}

// "{"
protected class Pattern_LeftCurlyBracketKeyword_9_1_0 extends KeywordToken  {
	
	public Pattern_LeftCurlyBracketKeyword_9_1_0(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Keyword getGrammarElement() {
		return grammarAccess.getPatternAccess().getLeftCurlyBracketKeyword_9_1_0();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new Pattern_Group_9_1(parent, this, 0, inst);
			case 1: return new Pattern_DataTypeNameParserRuleCall_9_0(parent, this, 1, inst);
			default: return null;
		}	
	}	
		
}

// param+=Param*
protected class Pattern_ParamAssignment_9_1_1 extends AssignmentToken  {
	
	public Pattern_ParamAssignment_9_1_1(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Assignment getGrammarElement() {
		return grammarAccess.getPatternAccess().getParamAssignment_9_1_1();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new Param_Group(this, this, 0, inst);
			default: return null;
		}	
	}	
		
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("param",false)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("param");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IInstanceDescription param = getDescr((EObject)value);
			if(param.isInstanceOf(grammarAccess.getParamRule().getType().getClassifier())) {
				type = AssignmentType.PRC;
				element = grammarAccess.getPatternAccess().getParamParamParserRuleCall_9_1_1_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

	public AbstractToken createParentFollower(AbstractToken next,	int actIndex, int index, IInstanceDescription inst) {
		if(value == inst.getDelegate() && !inst.isConsumed()) return null;
		switch(index) {
			case 0: return new Pattern_ParamAssignment_9_1_1(parent, next, actIndex, consumed);
			case 1: return new Pattern_LeftCurlyBracketKeyword_9_1_0(parent, next, actIndex, consumed);
			default: return null;
		}	
	}	
}

// "}"
protected class Pattern_RightCurlyBracketKeyword_9_1_2 extends KeywordToken  {
	
	public Pattern_RightCurlyBracketKeyword_9_1_2(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Keyword getGrammarElement() {
		return grammarAccess.getPatternAccess().getRightCurlyBracketKeyword_9_1_2();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new Pattern_ParamAssignment_9_1_1(parent, this, 0, inst);
			case 1: return new Pattern_LeftCurlyBracketKeyword_9_1_0(parent, this, 1, inst);
			default: return null;
		}	
	}	
		
}


// exceptPattern=ExceptPattern*
protected class Pattern_ExceptPatternAssignment_9_2 extends AssignmentToken  {
	
	public Pattern_ExceptPatternAssignment_9_2(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Assignment getGrammarElement() {
		return grammarAccess.getPatternAccess().getExceptPatternAssignment_9_2();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new ExceptPattern_Group(this, this, 0, inst);
			default: return null;
		}	
	}	
		
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("exceptPattern",false)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("exceptPattern");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IInstanceDescription param = getDescr((EObject)value);
			if(param.isInstanceOf(grammarAccess.getExceptPatternRule().getType().getClassifier())) {
				type = AssignmentType.PRC;
				element = grammarAccess.getPatternAccess().getExceptPatternExceptPatternParserRuleCall_9_2_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

	public AbstractToken createParentFollower(AbstractToken next,	int actIndex, int index, IInstanceDescription inst) {
		if(value == inst.getDelegate() && !inst.isConsumed()) return null;
		switch(index) {
			case 0: return new Pattern_ExceptPatternAssignment_9_2(parent, next, actIndex, consumed);
			case 1: return new Pattern_Group_9_1(parent, next, actIndex, consumed);
			case 2: return new Pattern_DataTypeNameParserRuleCall_9_0(parent, next, actIndex, consumed);
			default: return null;
		}	
	}	
}


// "notAllowed"
protected class Pattern_NotAllowedKeyword_10 extends KeywordToken  {
	
	public Pattern_NotAllowedKeyword_10(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Keyword getGrammarElement() {
		return grammarAccess.getPatternAccess().getNotAllowedKeyword_10();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			default: return parent.createParentFollower(this, index, index, inst);
		}	
	}	
		
}

// "external" uri=AnyURILiteral inherit=Inherit*
protected class Pattern_Group_11 extends GroupToken {
	
	public Pattern_Group_11(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Group getGrammarElement() {
		return grammarAccess.getPatternAccess().getGroup_11();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new Pattern_InheritAssignment_11_2(parent, this, 0, inst);
			case 1: return new Pattern_UriAssignment_11_1(parent, this, 1, inst);
			default: return null;
		}	
	}	
		
}

// "external"
protected class Pattern_ExternalKeyword_11_0 extends KeywordToken  {
	
	public Pattern_ExternalKeyword_11_0(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Keyword getGrammarElement() {
		return grammarAccess.getPatternAccess().getExternalKeyword_11_0();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			default: return parent.createParentFollower(this, index, index, inst);
		}	
	}	
		
}

// uri=AnyURILiteral
protected class Pattern_UriAssignment_11_1 extends AssignmentToken  {
	
	public Pattern_UriAssignment_11_1(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Assignment getGrammarElement() {
		return grammarAccess.getPatternAccess().getUriAssignment_11_1();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new AnyURILiteral_LiteralParserRuleCall(this, this, 0, inst);
			default: return null;
		}	
	}	
		
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("uri",true)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("uri");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IInstanceDescription param = getDescr((EObject)value);
			if(param.isInstanceOf(grammarAccess.getAnyURILiteralRule().getType().getClassifier())) {
				type = AssignmentType.PRC;
				element = grammarAccess.getPatternAccess().getUriAnyURILiteralParserRuleCall_11_1_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

	public AbstractToken createParentFollower(AbstractToken next,	int actIndex, int index, IInstanceDescription inst) {
		if(value == inst.getDelegate() && !inst.isConsumed()) return null;
		switch(index) {
			case 0: return new Pattern_ExternalKeyword_11_0(parent, next, actIndex, consumed);
			default: return null;
		}	
	}	
}

// inherit=Inherit*
protected class Pattern_InheritAssignment_11_2 extends AssignmentToken  {
	
	public Pattern_InheritAssignment_11_2(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Assignment getGrammarElement() {
		return grammarAccess.getPatternAccess().getInheritAssignment_11_2();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new Inherit_Group(this, this, 0, inst);
			default: return null;
		}	
	}	
		
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("inherit",false)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("inherit");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IInstanceDescription param = getDescr((EObject)value);
			if(param.isInstanceOf(grammarAccess.getInheritRule().getType().getClassifier())) {
				type = AssignmentType.PRC;
				element = grammarAccess.getPatternAccess().getInheritInheritParserRuleCall_11_2_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

	public AbstractToken createParentFollower(AbstractToken next,	int actIndex, int index, IInstanceDescription inst) {
		if(value == inst.getDelegate() && !inst.isConsumed()) return null;
		switch(index) {
			case 0: return new Pattern_InheritAssignment_11_2(parent, next, actIndex, consumed);
			case 1: return new Pattern_UriAssignment_11_1(parent, next, actIndex, consumed);
			default: return null;
		}	
	}	
}


// "grammar" "{" grammarContent+=GrammarContent* "}"
protected class Pattern_Group_12 extends GroupToken {
	
	public Pattern_Group_12(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Group getGrammarElement() {
		return grammarAccess.getPatternAccess().getGroup_12();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new Pattern_RightCurlyBracketKeyword_12_3(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
}

// "grammar"
protected class Pattern_GrammarKeyword_12_0 extends KeywordToken  {
	
	public Pattern_GrammarKeyword_12_0(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Keyword getGrammarElement() {
		return grammarAccess.getPatternAccess().getGrammarKeyword_12_0();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			default: return parent.createParentFollower(this, index, index, inst);
		}	
	}	
		
}

// "{"
protected class Pattern_LeftCurlyBracketKeyword_12_1 extends KeywordToken  {
	
	public Pattern_LeftCurlyBracketKeyword_12_1(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Keyword getGrammarElement() {
		return grammarAccess.getPatternAccess().getLeftCurlyBracketKeyword_12_1();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new Pattern_GrammarKeyword_12_0(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
}

// grammarContent+=GrammarContent*
protected class Pattern_GrammarContentAssignment_12_2 extends AssignmentToken  {
	
	public Pattern_GrammarContentAssignment_12_2(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Assignment getGrammarElement() {
		return grammarAccess.getPatternAccess().getGrammarContentAssignment_12_2();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new GrammarContent_Alternatives(this, this, 0, inst);
			default: return null;
		}	
	}	
		
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("grammarContent",false)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("grammarContent");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IInstanceDescription param = getDescr((EObject)value);
			if(param.isInstanceOf(grammarAccess.getGrammarContentRule().getType().getClassifier())) {
				type = AssignmentType.PRC;
				element = grammarAccess.getPatternAccess().getGrammarContentGrammarContentParserRuleCall_12_2_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

	public AbstractToken createParentFollower(AbstractToken next,	int actIndex, int index, IInstanceDescription inst) {
		if(value == inst.getDelegate() && !inst.isConsumed()) return null;
		switch(index) {
			case 0: return new Pattern_GrammarContentAssignment_12_2(parent, next, actIndex, consumed);
			case 1: return new Pattern_LeftCurlyBracketKeyword_12_1(parent, next, actIndex, consumed);
			default: return null;
		}	
	}	
}

// "}"
protected class Pattern_RightCurlyBracketKeyword_12_3 extends KeywordToken  {
	
	public Pattern_RightCurlyBracketKeyword_12_3(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Keyword getGrammarElement() {
		return grammarAccess.getPatternAccess().getRightCurlyBracketKeyword_12_3();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new Pattern_GrammarContentAssignment_12_2(parent, this, 0, inst);
			case 1: return new Pattern_LeftCurlyBracketKeyword_12_1(parent, this, 1, inst);
			default: return null;
		}	
	}	
		
}


// "(" group+=Pattern* ")" continue=","?
protected class Pattern_Group_13 extends GroupToken {
	
	public Pattern_Group_13(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Group getGrammarElement() {
		return grammarAccess.getPatternAccess().getGroup_13();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new Pattern_ContinueAssignment_13_3(parent, this, 0, inst);
			case 1: return new Pattern_RightParenthesisKeyword_13_2(parent, this, 1, inst);
			default: return null;
		}	
	}	
		
}

// "("
protected class Pattern_LeftParenthesisKeyword_13_0 extends KeywordToken  {
	
	public Pattern_LeftParenthesisKeyword_13_0(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Keyword getGrammarElement() {
		return grammarAccess.getPatternAccess().getLeftParenthesisKeyword_13_0();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			default: return parent.createParentFollower(this, index, index, inst);
		}	
	}	
		
}

// group+=Pattern*
protected class Pattern_GroupAssignment_13_1 extends AssignmentToken  {
	
	public Pattern_GroupAssignment_13_1(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Assignment getGrammarElement() {
		return grammarAccess.getPatternAccess().getGroupAssignment_13_1();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new Pattern_Alternatives(this, this, 0, inst);
			default: return null;
		}	
	}	
		
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("group",false)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("group");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IInstanceDescription param = getDescr((EObject)value);
			if(param.isInstanceOf(grammarAccess.getPatternRule().getType().getClassifier())) {
				type = AssignmentType.PRC;
				element = grammarAccess.getPatternAccess().getGroupPatternParserRuleCall_13_1_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

	public AbstractToken createParentFollower(AbstractToken next,	int actIndex, int index, IInstanceDescription inst) {
		if(value == inst.getDelegate() && !inst.isConsumed()) return null;
		switch(index) {
			case 0: return new Pattern_GroupAssignment_13_1(parent, next, actIndex, consumed);
			case 1: return new Pattern_LeftParenthesisKeyword_13_0(parent, next, actIndex, consumed);
			default: return null;
		}	
	}	
}

// ")"
protected class Pattern_RightParenthesisKeyword_13_2 extends KeywordToken  {
	
	public Pattern_RightParenthesisKeyword_13_2(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Keyword getGrammarElement() {
		return grammarAccess.getPatternAccess().getRightParenthesisKeyword_13_2();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new Pattern_GroupAssignment_13_1(parent, this, 0, inst);
			case 1: return new Pattern_LeftParenthesisKeyword_13_0(parent, this, 1, inst);
			default: return null;
		}	
	}	
		
}

// continue=","?
protected class Pattern_ContinueAssignment_13_3 extends AssignmentToken  {
	
	public Pattern_ContinueAssignment_13_3(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Assignment getGrammarElement() {
		return grammarAccess.getPatternAccess().getContinueAssignment_13_3();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new Pattern_RightParenthesisKeyword_13_2(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("continue",false)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("continue");
		if(",".equals(value)) { // org::eclipse::xtext::impl::KeywordImpl
			type = AssignmentType.KW;
			element = grammarAccess.getPatternAccess().getContinueCommaKeyword_13_3_0();
			return obj;
		}
		return null;
	}

}



/************ end Rule Pattern ****************/


/************ begin Rule Element ****************
 *
 * Element:
 *   "element" name=NameClass "{" pattern+=Pattern* "}" cardinality=( "?" | "+" | "*" )? continue
 *   =( "," | "&" | "|" )?;
 *
 **/

// "element" name=NameClass "{" pattern+=Pattern* "}" cardinality=( "?" | "+" | "*" )? continue
// =( "," | "&" | "|" )?
protected class Element_Group extends GroupToken {
	
	public Element_Group(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Group getGrammarElement() {
		return grammarAccess.getElementAccess().getGroup();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new Element_ContinueAssignment_6(parent, this, 0, inst);
			case 1: return new Element_CardinalityAssignment_5(parent, this, 1, inst);
			case 2: return new Element_RightCurlyBracketKeyword_4(parent, this, 2, inst);
			default: return null;
		}	
	}	
		
	public IInstanceDescription tryConsume() {
		if(!current.isInstanceOf(grammarAccess.getElementRule().getType().getClassifier())) return null;
		return tryConsumeVal();
	}
}

// "element"
protected class Element_ElementKeyword_0 extends KeywordToken  {
	
	public Element_ElementKeyword_0(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Keyword getGrammarElement() {
		return grammarAccess.getElementAccess().getElementKeyword_0();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			default: return parent.createParentFollower(this, index, index, inst);
		}	
	}	
		
}

// name=NameClass
protected class Element_NameAssignment_1 extends AssignmentToken  {
	
	public Element_NameAssignment_1(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Assignment getGrammarElement() {
		return grammarAccess.getElementAccess().getNameAssignment_1();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new NameClass_Alternatives(this, this, 0, inst);
			default: return null;
		}	
	}	
		
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("name",true)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("name");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IInstanceDescription param = getDescr((EObject)value);
			if(param.isInstanceOf(grammarAccess.getNameClassRule().getType().getClassifier())) {
				type = AssignmentType.PRC;
				element = grammarAccess.getElementAccess().getNameNameClassParserRuleCall_1_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

	public AbstractToken createParentFollower(AbstractToken next,	int actIndex, int index, IInstanceDescription inst) {
		if(value == inst.getDelegate() && !inst.isConsumed()) return null;
		switch(index) {
			case 0: return new Element_ElementKeyword_0(parent, next, actIndex, consumed);
			default: return null;
		}	
	}	
}

// "{"
protected class Element_LeftCurlyBracketKeyword_2 extends KeywordToken  {
	
	public Element_LeftCurlyBracketKeyword_2(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Keyword getGrammarElement() {
		return grammarAccess.getElementAccess().getLeftCurlyBracketKeyword_2();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new Element_NameAssignment_1(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
}

// pattern+=Pattern*
protected class Element_PatternAssignment_3 extends AssignmentToken  {
	
	public Element_PatternAssignment_3(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Assignment getGrammarElement() {
		return grammarAccess.getElementAccess().getPatternAssignment_3();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new Pattern_Alternatives(this, this, 0, inst);
			default: return null;
		}	
	}	
		
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("pattern",false)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("pattern");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IInstanceDescription param = getDescr((EObject)value);
			if(param.isInstanceOf(grammarAccess.getPatternRule().getType().getClassifier())) {
				type = AssignmentType.PRC;
				element = grammarAccess.getElementAccess().getPatternPatternParserRuleCall_3_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

	public AbstractToken createParentFollower(AbstractToken next,	int actIndex, int index, IInstanceDescription inst) {
		if(value == inst.getDelegate() && !inst.isConsumed()) return null;
		switch(index) {
			case 0: return new Element_PatternAssignment_3(parent, next, actIndex, consumed);
			case 1: return new Element_LeftCurlyBracketKeyword_2(parent, next, actIndex, consumed);
			default: return null;
		}	
	}	
}

// "}"
protected class Element_RightCurlyBracketKeyword_4 extends KeywordToken  {
	
	public Element_RightCurlyBracketKeyword_4(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Keyword getGrammarElement() {
		return grammarAccess.getElementAccess().getRightCurlyBracketKeyword_4();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new Element_PatternAssignment_3(parent, this, 0, inst);
			case 1: return new Element_LeftCurlyBracketKeyword_2(parent, this, 1, inst);
			default: return null;
		}	
	}	
		
}

// cardinality=( "?" | "+" | "*" )?
protected class Element_CardinalityAssignment_5 extends AssignmentToken  {
	
	public Element_CardinalityAssignment_5(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Assignment getGrammarElement() {
		return grammarAccess.getElementAccess().getCardinalityAssignment_5();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new Element_RightCurlyBracketKeyword_4(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("cardinality",false)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("cardinality");
		if("?".equals(value)) { // org::eclipse::xtext::impl::KeywordImpl
			type = AssignmentType.KW;
			element = grammarAccess.getElementAccess().getCardinalityQuestionMarkKeyword_5_0_0();
			return obj;
		}
		if("+".equals(value)) { // org::eclipse::xtext::impl::KeywordImpl
			type = AssignmentType.KW;
			element = grammarAccess.getElementAccess().getCardinalityPlusSignKeyword_5_0_1();
			return obj;
		}
		if("*".equals(value)) { // org::eclipse::xtext::impl::KeywordImpl
			type = AssignmentType.KW;
			element = grammarAccess.getElementAccess().getCardinalityAsteriskKeyword_5_0_2();
			return obj;
		}
		return null;
	}

}

// continue=( "," | "&" | "|" )?
protected class Element_ContinueAssignment_6 extends AssignmentToken  {
	
	public Element_ContinueAssignment_6(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Assignment getGrammarElement() {
		return grammarAccess.getElementAccess().getContinueAssignment_6();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new Element_CardinalityAssignment_5(parent, this, 0, inst);
			case 1: return new Element_RightCurlyBracketKeyword_4(parent, this, 1, inst);
			default: return null;
		}	
	}	
		
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("continue",false)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("continue");
		if(",".equals(value)) { // org::eclipse::xtext::impl::KeywordImpl
			type = AssignmentType.KW;
			element = grammarAccess.getElementAccess().getContinueCommaKeyword_6_0_0();
			return obj;
		}
		if("&".equals(value)) { // org::eclipse::xtext::impl::KeywordImpl
			type = AssignmentType.KW;
			element = grammarAccess.getElementAccess().getContinueAmpersandKeyword_6_0_1();
			return obj;
		}
		if("|".equals(value)) { // org::eclipse::xtext::impl::KeywordImpl
			type = AssignmentType.KW;
			element = grammarAccess.getElementAccess().getContinueVerticalLineKeyword_6_0_2();
			return obj;
		}
		return null;
	}

}


/************ end Rule Element ****************/


/************ begin Rule Attribute ****************
 *
 * Attribute:
 *   "attribute" name=NameClass "{" pattern+=Pattern* "}" cardinality="?"? continue=( "," |
 *   "|" )?;
 *
 **/

// "attribute" name=NameClass "{" pattern+=Pattern* "}" cardinality="?"? continue=( "," |
// "|" )?
protected class Attribute_Group extends GroupToken {
	
	public Attribute_Group(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Group getGrammarElement() {
		return grammarAccess.getAttributeAccess().getGroup();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new Attribute_ContinueAssignment_6(parent, this, 0, inst);
			case 1: return new Attribute_CardinalityAssignment_5(parent, this, 1, inst);
			case 2: return new Attribute_RightCurlyBracketKeyword_4(parent, this, 2, inst);
			default: return null;
		}	
	}	
		
	public IInstanceDescription tryConsume() {
		if(!current.isInstanceOf(grammarAccess.getAttributeRule().getType().getClassifier())) return null;
		return tryConsumeVal();
	}
}

// "attribute"
protected class Attribute_AttributeKeyword_0 extends KeywordToken  {
	
	public Attribute_AttributeKeyword_0(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Keyword getGrammarElement() {
		return grammarAccess.getAttributeAccess().getAttributeKeyword_0();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			default: return parent.createParentFollower(this, index, index, inst);
		}	
	}	
		
}

// name=NameClass
protected class Attribute_NameAssignment_1 extends AssignmentToken  {
	
	public Attribute_NameAssignment_1(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Assignment getGrammarElement() {
		return grammarAccess.getAttributeAccess().getNameAssignment_1();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new NameClass_Alternatives(this, this, 0, inst);
			default: return null;
		}	
	}	
		
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("name",true)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("name");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IInstanceDescription param = getDescr((EObject)value);
			if(param.isInstanceOf(grammarAccess.getNameClassRule().getType().getClassifier())) {
				type = AssignmentType.PRC;
				element = grammarAccess.getAttributeAccess().getNameNameClassParserRuleCall_1_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

	public AbstractToken createParentFollower(AbstractToken next,	int actIndex, int index, IInstanceDescription inst) {
		if(value == inst.getDelegate() && !inst.isConsumed()) return null;
		switch(index) {
			case 0: return new Attribute_AttributeKeyword_0(parent, next, actIndex, consumed);
			default: return null;
		}	
	}	
}

// "{"
protected class Attribute_LeftCurlyBracketKeyword_2 extends KeywordToken  {
	
	public Attribute_LeftCurlyBracketKeyword_2(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Keyword getGrammarElement() {
		return grammarAccess.getAttributeAccess().getLeftCurlyBracketKeyword_2();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new Attribute_NameAssignment_1(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
}

// pattern+=Pattern*
protected class Attribute_PatternAssignment_3 extends AssignmentToken  {
	
	public Attribute_PatternAssignment_3(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Assignment getGrammarElement() {
		return grammarAccess.getAttributeAccess().getPatternAssignment_3();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new Pattern_Alternatives(this, this, 0, inst);
			default: return null;
		}	
	}	
		
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("pattern",false)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("pattern");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IInstanceDescription param = getDescr((EObject)value);
			if(param.isInstanceOf(grammarAccess.getPatternRule().getType().getClassifier())) {
				type = AssignmentType.PRC;
				element = grammarAccess.getAttributeAccess().getPatternPatternParserRuleCall_3_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

	public AbstractToken createParentFollower(AbstractToken next,	int actIndex, int index, IInstanceDescription inst) {
		if(value == inst.getDelegate() && !inst.isConsumed()) return null;
		switch(index) {
			case 0: return new Attribute_PatternAssignment_3(parent, next, actIndex, consumed);
			case 1: return new Attribute_LeftCurlyBracketKeyword_2(parent, next, actIndex, consumed);
			default: return null;
		}	
	}	
}

// "}"
protected class Attribute_RightCurlyBracketKeyword_4 extends KeywordToken  {
	
	public Attribute_RightCurlyBracketKeyword_4(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Keyword getGrammarElement() {
		return grammarAccess.getAttributeAccess().getRightCurlyBracketKeyword_4();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new Attribute_PatternAssignment_3(parent, this, 0, inst);
			case 1: return new Attribute_LeftCurlyBracketKeyword_2(parent, this, 1, inst);
			default: return null;
		}	
	}	
		
}

// cardinality="?"?
protected class Attribute_CardinalityAssignment_5 extends AssignmentToken  {
	
	public Attribute_CardinalityAssignment_5(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Assignment getGrammarElement() {
		return grammarAccess.getAttributeAccess().getCardinalityAssignment_5();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new Attribute_RightCurlyBracketKeyword_4(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("cardinality",false)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("cardinality");
		if("?".equals(value)) { // org::eclipse::xtext::impl::KeywordImpl
			type = AssignmentType.KW;
			element = grammarAccess.getAttributeAccess().getCardinalityQuestionMarkKeyword_5_0();
			return obj;
		}
		return null;
	}

}

// continue=( "," | "|" )?
protected class Attribute_ContinueAssignment_6 extends AssignmentToken  {
	
	public Attribute_ContinueAssignment_6(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Assignment getGrammarElement() {
		return grammarAccess.getAttributeAccess().getContinueAssignment_6();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new Attribute_CardinalityAssignment_5(parent, this, 0, inst);
			case 1: return new Attribute_RightCurlyBracketKeyword_4(parent, this, 1, inst);
			default: return null;
		}	
	}	
		
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("continue",false)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("continue");
		if(",".equals(value)) { // org::eclipse::xtext::impl::KeywordImpl
			type = AssignmentType.KW;
			element = grammarAccess.getAttributeAccess().getContinueCommaKeyword_6_0_0();
			return obj;
		}
		if("|".equals(value)) { // org::eclipse::xtext::impl::KeywordImpl
			type = AssignmentType.KW;
			element = grammarAccess.getAttributeAccess().getContinueVerticalLineKeyword_6_0_1();
			return obj;
		}
		return null;
	}

}


/************ end Rule Attribute ****************/


/************ begin Rule Param ****************
 *
 * Param:
 *   IdentifierOrKeyWord "=" parmValue=Literal;
 *
 **/

// IdentifierOrKeyWord "=" parmValue=Literal
protected class Param_Group extends GroupToken {
	
	public Param_Group(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Group getGrammarElement() {
		return grammarAccess.getParamAccess().getGroup();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new Param_ParmValueAssignment_2(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
	public IInstanceDescription tryConsume() {
		if(!current.isInstanceOf(grammarAccess.getParamRule().getType().getClassifier())) return null;
		return tryConsumeVal();
	}
}

// IdentifierOrKeyWord
protected class Param_IdentifierOrKeyWordParserRuleCall_0 extends RuleCallToken {
	
	public Param_IdentifierOrKeyWordParserRuleCall_0(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public RuleCall getGrammarElement() {
		return grammarAccess.getParamAccess().getIdentifierOrKeyWordParserRuleCall_0();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new IdentifierOrKeyWord_Alternatives(this, this, 0, inst);
			default: return null;
		}	
	}	
		
	protected IInstanceDescription tryConsumeVal() {
		if(checkForRecursion(IdentifierOrKeyWord_Alternatives.class, current)) return null;
		if(!current.isInstanceOf(grammarAccess.getIdentifierOrKeyWordRule().getType().getClassifier())) return null;
		return current;
	}
	
	public AbstractToken createParentFollower(AbstractToken next,	int actIndex, int index, IInstanceDescription inst) {
		switch(index) {
			default: return parent.createParentFollower(next, actIndex , index, inst);
		}	
	}	
}

// "="
protected class Param_EqualsSignKeyword_1 extends KeywordToken  {
	
	public Param_EqualsSignKeyword_1(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Keyword getGrammarElement() {
		return grammarAccess.getParamAccess().getEqualsSignKeyword_1();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new Param_IdentifierOrKeyWordParserRuleCall_0(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
}

// parmValue=Literal
protected class Param_ParmValueAssignment_2 extends AssignmentToken  {
	
	public Param_ParmValueAssignment_2(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Assignment getGrammarElement() {
		return grammarAccess.getParamAccess().getParmValueAssignment_2();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new Literal_Group(this, this, 0, inst);
			default: return null;
		}	
	}	
		
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("parmValue",true)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("parmValue");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IInstanceDescription param = getDescr((EObject)value);
			if(param.isInstanceOf(grammarAccess.getLiteralRule().getType().getClassifier())) {
				type = AssignmentType.PRC;
				element = grammarAccess.getParamAccess().getParmValueLiteralParserRuleCall_2_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

	public AbstractToken createParentFollower(AbstractToken next,	int actIndex, int index, IInstanceDescription inst) {
		if(value == inst.getDelegate() && !inst.isConsumed()) return null;
		switch(index) {
			case 0: return new Param_EqualsSignKeyword_1(parent, next, actIndex, consumed);
			default: return null;
		}	
	}	
}


/************ end Rule Param ****************/


/************ begin Rule ExceptPattern ****************
 *
 * ExceptPattern:
 *   "-" Pattern;
 *
 **/

// "-" Pattern
protected class ExceptPattern_Group extends GroupToken {
	
	public ExceptPattern_Group(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Group getGrammarElement() {
		return grammarAccess.getExceptPatternAccess().getGroup();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new ExceptPattern_PatternParserRuleCall_1(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
	public IInstanceDescription tryConsume() {
		if(!current.isInstanceOf(grammarAccess.getExceptPatternRule().getType().getClassifier())) return null;
		return tryConsumeVal();
	}
}

// "-"
protected class ExceptPattern_HyphenMinusKeyword_0 extends KeywordToken  {
	
	public ExceptPattern_HyphenMinusKeyword_0(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Keyword getGrammarElement() {
		return grammarAccess.getExceptPatternAccess().getHyphenMinusKeyword_0();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			default: return parent.createParentFollower(this, index, index, inst);
		}	
	}	
		
}

// Pattern
protected class ExceptPattern_PatternParserRuleCall_1 extends RuleCallToken {
	
	public ExceptPattern_PatternParserRuleCall_1(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public RuleCall getGrammarElement() {
		return grammarAccess.getExceptPatternAccess().getPatternParserRuleCall_1();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new Pattern_Alternatives(this, this, 0, inst);
			default: return null;
		}	
	}	
		
	protected IInstanceDescription tryConsumeVal() {
		if(checkForRecursion(Pattern_Alternatives.class, current)) return null;
		if(!current.isInstanceOf(grammarAccess.getPatternRule().getType().getClassifier())) return null;
		return current;
	}
	
	public AbstractToken createParentFollower(AbstractToken next,	int actIndex, int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new ExceptPattern_HyphenMinusKeyword_0(parent, next, actIndex, inst);
			default: return null;
		}	
	}	
}


/************ end Rule ExceptPattern ****************/


/************ begin Rule GrammarContent ****************
 *
 * GrammarContent:
 *   Start|Define|"div" "{" grammarContenGrammarContent+=GrammarContent* "}"|"include"
 *   AnyURILiteral inherit=Inherit ("{" includeContent+=IncludeContent* "}");
 *
 **/

// Start|Define|"div" "{" grammarContenGrammarContent+=GrammarContent* "}"|"include"
// AnyURILiteral inherit=Inherit ("{" includeContent+=IncludeContent* "}")
protected class GrammarContent_Alternatives extends AlternativesToken {

	public GrammarContent_Alternatives(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Alternatives getGrammarElement() {
		return grammarAccess.getGrammarContentAccess().getAlternatives();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new GrammarContent_StartParserRuleCall_0(parent, this, 0, inst);
			case 1: return new GrammarContent_DefineParserRuleCall_1(parent, this, 1, inst);
			case 2: return new GrammarContent_Group_2(parent, this, 2, inst);
			case 3: return new GrammarContent_Group_3(parent, this, 3, inst);
			default: return null;
		}	
	}	
		
	public IInstanceDescription tryConsume() {
		if(!current.isInstanceOf(grammarAccess.getGrammarContentRule().getType().getClassifier())) return null;
		return tryConsumeVal();
	}
}

// Start
protected class GrammarContent_StartParserRuleCall_0 extends RuleCallToken {
	
	public GrammarContent_StartParserRuleCall_0(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public RuleCall getGrammarElement() {
		return grammarAccess.getGrammarContentAccess().getStartParserRuleCall_0();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new Start_Group(this, this, 0, inst);
			default: return null;
		}	
	}	
		
	protected IInstanceDescription tryConsumeVal() {
		if(checkForRecursion(Start_Group.class, current)) return null;
		if(!current.isInstanceOf(grammarAccess.getStartRule().getType().getClassifier())) return null;
		return current;
	}
	
	public AbstractToken createParentFollower(AbstractToken next,	int actIndex, int index, IInstanceDescription inst) {
		switch(index) {
			default: return parent.createParentFollower(next, actIndex , index, inst);
		}	
	}	
}

// Define
protected class GrammarContent_DefineParserRuleCall_1 extends RuleCallToken {
	
	public GrammarContent_DefineParserRuleCall_1(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public RuleCall getGrammarElement() {
		return grammarAccess.getGrammarContentAccess().getDefineParserRuleCall_1();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new Define_Group(this, this, 0, inst);
			default: return null;
		}	
	}	
		
	protected IInstanceDescription tryConsumeVal() {
		if(checkForRecursion(Define_Group.class, current)) return null;
		if(!current.isInstanceOf(grammarAccess.getDefineRule().getType().getClassifier())) return null;
		return current;
	}
	
	public AbstractToken createParentFollower(AbstractToken next,	int actIndex, int index, IInstanceDescription inst) {
		switch(index) {
			default: return parent.createParentFollower(next, actIndex , index, inst);
		}	
	}	
}

// "div" "{" grammarContenGrammarContent+=GrammarContent* "}"
protected class GrammarContent_Group_2 extends GroupToken {
	
	public GrammarContent_Group_2(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Group getGrammarElement() {
		return grammarAccess.getGrammarContentAccess().getGroup_2();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new GrammarContent_RightCurlyBracketKeyword_2_3(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
}

// "div"
protected class GrammarContent_DivKeyword_2_0 extends KeywordToken  {
	
	public GrammarContent_DivKeyword_2_0(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Keyword getGrammarElement() {
		return grammarAccess.getGrammarContentAccess().getDivKeyword_2_0();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			default: return parent.createParentFollower(this, index, index, inst);
		}	
	}	
		
}

// "{"
protected class GrammarContent_LeftCurlyBracketKeyword_2_1 extends KeywordToken  {
	
	public GrammarContent_LeftCurlyBracketKeyword_2_1(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Keyword getGrammarElement() {
		return grammarAccess.getGrammarContentAccess().getLeftCurlyBracketKeyword_2_1();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new GrammarContent_DivKeyword_2_0(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
}

// grammarContenGrammarContent+=GrammarContent*
protected class GrammarContent_GrammarContenGrammarContentAssignment_2_2 extends AssignmentToken  {
	
	public GrammarContent_GrammarContenGrammarContentAssignment_2_2(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Assignment getGrammarElement() {
		return grammarAccess.getGrammarContentAccess().getGrammarContenGrammarContentAssignment_2_2();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new GrammarContent_Alternatives(this, this, 0, inst);
			default: return null;
		}	
	}	
		
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("grammarContenGrammarContent",false)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("grammarContenGrammarContent");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IInstanceDescription param = getDescr((EObject)value);
			if(param.isInstanceOf(grammarAccess.getGrammarContentRule().getType().getClassifier())) {
				type = AssignmentType.PRC;
				element = grammarAccess.getGrammarContentAccess().getGrammarContenGrammarContentGrammarContentParserRuleCall_2_2_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

	public AbstractToken createParentFollower(AbstractToken next,	int actIndex, int index, IInstanceDescription inst) {
		if(value == inst.getDelegate() && !inst.isConsumed()) return null;
		switch(index) {
			case 0: return new GrammarContent_GrammarContenGrammarContentAssignment_2_2(parent, next, actIndex, consumed);
			case 1: return new GrammarContent_LeftCurlyBracketKeyword_2_1(parent, next, actIndex, consumed);
			default: return null;
		}	
	}	
}

// "}"
protected class GrammarContent_RightCurlyBracketKeyword_2_3 extends KeywordToken  {
	
	public GrammarContent_RightCurlyBracketKeyword_2_3(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Keyword getGrammarElement() {
		return grammarAccess.getGrammarContentAccess().getRightCurlyBracketKeyword_2_3();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new GrammarContent_GrammarContenGrammarContentAssignment_2_2(parent, this, 0, inst);
			case 1: return new GrammarContent_LeftCurlyBracketKeyword_2_1(parent, this, 1, inst);
			default: return null;
		}	
	}	
		
}


// "include" AnyURILiteral inherit=Inherit ("{" includeContent+=IncludeContent* "}")
protected class GrammarContent_Group_3 extends GroupToken {
	
	public GrammarContent_Group_3(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Group getGrammarElement() {
		return grammarAccess.getGrammarContentAccess().getGroup_3();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new GrammarContent_Group_3_3(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
}

// "include"
protected class GrammarContent_IncludeKeyword_3_0 extends KeywordToken  {
	
	public GrammarContent_IncludeKeyword_3_0(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Keyword getGrammarElement() {
		return grammarAccess.getGrammarContentAccess().getIncludeKeyword_3_0();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			default: return parent.createParentFollower(this, index, index, inst);
		}	
	}	
		
}

// AnyURILiteral
protected class GrammarContent_AnyURILiteralParserRuleCall_3_1 extends RuleCallToken {
	
	public GrammarContent_AnyURILiteralParserRuleCall_3_1(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public RuleCall getGrammarElement() {
		return grammarAccess.getGrammarContentAccess().getAnyURILiteralParserRuleCall_3_1();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new AnyURILiteral_LiteralParserRuleCall(this, this, 0, inst);
			default: return null;
		}	
	}	
		
	protected IInstanceDescription tryConsumeVal() {
		if(checkForRecursion(AnyURILiteral_LiteralParserRuleCall.class, current)) return null;
		if(!current.isInstanceOf(grammarAccess.getAnyURILiteralRule().getType().getClassifier())) return null;
		return current;
	}
	
	public AbstractToken createParentFollower(AbstractToken next,	int actIndex, int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new GrammarContent_IncludeKeyword_3_0(parent, next, actIndex, inst);
			default: return null;
		}	
	}	
}

// inherit=Inherit
protected class GrammarContent_InheritAssignment_3_2 extends AssignmentToken  {
	
	public GrammarContent_InheritAssignment_3_2(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Assignment getGrammarElement() {
		return grammarAccess.getGrammarContentAccess().getInheritAssignment_3_2();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new Inherit_Group(this, this, 0, inst);
			default: return null;
		}	
	}	
		
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("inherit",true)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("inherit");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IInstanceDescription param = getDescr((EObject)value);
			if(param.isInstanceOf(grammarAccess.getInheritRule().getType().getClassifier())) {
				type = AssignmentType.PRC;
				element = grammarAccess.getGrammarContentAccess().getInheritInheritParserRuleCall_3_2_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

	public AbstractToken createParentFollower(AbstractToken next,	int actIndex, int index, IInstanceDescription inst) {
		if(value == inst.getDelegate() && !inst.isConsumed()) return null;
		switch(index) {
			case 0: return new GrammarContent_AnyURILiteralParserRuleCall_3_1(parent, next, actIndex, consumed);
			default: return null;
		}	
	}	
}

// "{" includeContent+=IncludeContent* "}"
protected class GrammarContent_Group_3_3 extends GroupToken {
	
	public GrammarContent_Group_3_3(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Group getGrammarElement() {
		return grammarAccess.getGrammarContentAccess().getGroup_3_3();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new GrammarContent_RightCurlyBracketKeyword_3_3_2(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
}

// "{"
protected class GrammarContent_LeftCurlyBracketKeyword_3_3_0 extends KeywordToken  {
	
	public GrammarContent_LeftCurlyBracketKeyword_3_3_0(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Keyword getGrammarElement() {
		return grammarAccess.getGrammarContentAccess().getLeftCurlyBracketKeyword_3_3_0();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new GrammarContent_InheritAssignment_3_2(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
}

// includeContent+=IncludeContent*
protected class GrammarContent_IncludeContentAssignment_3_3_1 extends AssignmentToken  {
	
	public GrammarContent_IncludeContentAssignment_3_3_1(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Assignment getGrammarElement() {
		return grammarAccess.getGrammarContentAccess().getIncludeContentAssignment_3_3_1();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new IncludeContent_Alternatives(this, this, 0, inst);
			default: return null;
		}	
	}	
		
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("includeContent",false)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("includeContent");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IInstanceDescription param = getDescr((EObject)value);
			if(param.isInstanceOf(grammarAccess.getIncludeContentRule().getType().getClassifier())) {
				type = AssignmentType.PRC;
				element = grammarAccess.getGrammarContentAccess().getIncludeContentIncludeContentParserRuleCall_3_3_1_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

	public AbstractToken createParentFollower(AbstractToken next,	int actIndex, int index, IInstanceDescription inst) {
		if(value == inst.getDelegate() && !inst.isConsumed()) return null;
		switch(index) {
			case 0: return new GrammarContent_IncludeContentAssignment_3_3_1(parent, next, actIndex, consumed);
			case 1: return new GrammarContent_LeftCurlyBracketKeyword_3_3_0(parent, next, actIndex, consumed);
			default: return null;
		}	
	}	
}

// "}"
protected class GrammarContent_RightCurlyBracketKeyword_3_3_2 extends KeywordToken  {
	
	public GrammarContent_RightCurlyBracketKeyword_3_3_2(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Keyword getGrammarElement() {
		return grammarAccess.getGrammarContentAccess().getRightCurlyBracketKeyword_3_3_2();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new GrammarContent_IncludeContentAssignment_3_3_1(parent, this, 0, inst);
			case 1: return new GrammarContent_LeftCurlyBracketKeyword_3_3_0(parent, this, 1, inst);
			default: return null;
		}	
	}	
		
}




/************ end Rule GrammarContent ****************/


/************ begin Rule IncludeContent ****************
 *
 * IncludeContent:
 *   Define|Start|"div" "{" includeGrammarContent+=GrammarContent* "}";
 *
 **/

// Define|Start|"div" "{" includeGrammarContent+=GrammarContent* "}"
protected class IncludeContent_Alternatives extends AlternativesToken {

	public IncludeContent_Alternatives(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Alternatives getGrammarElement() {
		return grammarAccess.getIncludeContentAccess().getAlternatives();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new IncludeContent_DefineParserRuleCall_0(parent, this, 0, inst);
			case 1: return new IncludeContent_StartParserRuleCall_1(parent, this, 1, inst);
			case 2: return new IncludeContent_Group_2(parent, this, 2, inst);
			default: return null;
		}	
	}	
		
	public IInstanceDescription tryConsume() {
		if(!current.isInstanceOf(grammarAccess.getIncludeContentRule().getType().getClassifier())) return null;
		return tryConsumeVal();
	}
}

// Define
protected class IncludeContent_DefineParserRuleCall_0 extends RuleCallToken {
	
	public IncludeContent_DefineParserRuleCall_0(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public RuleCall getGrammarElement() {
		return grammarAccess.getIncludeContentAccess().getDefineParserRuleCall_0();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new Define_Group(this, this, 0, inst);
			default: return null;
		}	
	}	
		
	protected IInstanceDescription tryConsumeVal() {
		if(checkForRecursion(Define_Group.class, current)) return null;
		if(!current.isInstanceOf(grammarAccess.getDefineRule().getType().getClassifier())) return null;
		return current;
	}
	
	public AbstractToken createParentFollower(AbstractToken next,	int actIndex, int index, IInstanceDescription inst) {
		switch(index) {
			default: return parent.createParentFollower(next, actIndex , index, inst);
		}	
	}	
}

// Start
protected class IncludeContent_StartParserRuleCall_1 extends RuleCallToken {
	
	public IncludeContent_StartParserRuleCall_1(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public RuleCall getGrammarElement() {
		return grammarAccess.getIncludeContentAccess().getStartParserRuleCall_1();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new Start_Group(this, this, 0, inst);
			default: return null;
		}	
	}	
		
	protected IInstanceDescription tryConsumeVal() {
		if(checkForRecursion(Start_Group.class, current)) return null;
		if(!current.isInstanceOf(grammarAccess.getStartRule().getType().getClassifier())) return null;
		return current;
	}
	
	public AbstractToken createParentFollower(AbstractToken next,	int actIndex, int index, IInstanceDescription inst) {
		switch(index) {
			default: return parent.createParentFollower(next, actIndex , index, inst);
		}	
	}	
}

// "div" "{" includeGrammarContent+=GrammarContent* "}"
protected class IncludeContent_Group_2 extends GroupToken {
	
	public IncludeContent_Group_2(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Group getGrammarElement() {
		return grammarAccess.getIncludeContentAccess().getGroup_2();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new IncludeContent_RightCurlyBracketKeyword_2_3(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
}

// "div"
protected class IncludeContent_DivKeyword_2_0 extends KeywordToken  {
	
	public IncludeContent_DivKeyword_2_0(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Keyword getGrammarElement() {
		return grammarAccess.getIncludeContentAccess().getDivKeyword_2_0();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			default: return parent.createParentFollower(this, index, index, inst);
		}	
	}	
		
}

// "{"
protected class IncludeContent_LeftCurlyBracketKeyword_2_1 extends KeywordToken  {
	
	public IncludeContent_LeftCurlyBracketKeyword_2_1(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Keyword getGrammarElement() {
		return grammarAccess.getIncludeContentAccess().getLeftCurlyBracketKeyword_2_1();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new IncludeContent_DivKeyword_2_0(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
}

// includeGrammarContent+=GrammarContent*
protected class IncludeContent_IncludeGrammarContentAssignment_2_2 extends AssignmentToken  {
	
	public IncludeContent_IncludeGrammarContentAssignment_2_2(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Assignment getGrammarElement() {
		return grammarAccess.getIncludeContentAccess().getIncludeGrammarContentAssignment_2_2();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new GrammarContent_Alternatives(this, this, 0, inst);
			default: return null;
		}	
	}	
		
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("includeGrammarContent",false)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("includeGrammarContent");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IInstanceDescription param = getDescr((EObject)value);
			if(param.isInstanceOf(grammarAccess.getGrammarContentRule().getType().getClassifier())) {
				type = AssignmentType.PRC;
				element = grammarAccess.getIncludeContentAccess().getIncludeGrammarContentGrammarContentParserRuleCall_2_2_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

	public AbstractToken createParentFollower(AbstractToken next,	int actIndex, int index, IInstanceDescription inst) {
		if(value == inst.getDelegate() && !inst.isConsumed()) return null;
		switch(index) {
			case 0: return new IncludeContent_IncludeGrammarContentAssignment_2_2(parent, next, actIndex, consumed);
			case 1: return new IncludeContent_LeftCurlyBracketKeyword_2_1(parent, next, actIndex, consumed);
			default: return null;
		}	
	}	
}

// "}"
protected class IncludeContent_RightCurlyBracketKeyword_2_3 extends KeywordToken  {
	
	public IncludeContent_RightCurlyBracketKeyword_2_3(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Keyword getGrammarElement() {
		return grammarAccess.getIncludeContentAccess().getRightCurlyBracketKeyword_2_3();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new IncludeContent_IncludeGrammarContentAssignment_2_2(parent, this, 0, inst);
			case 1: return new IncludeContent_LeftCurlyBracketKeyword_2_1(parent, this, 1, inst);
			default: return null;
		}	
	}	
		
}



/************ end Rule IncludeContent ****************/


/************ begin Rule Start ****************
 *
 * Start:
 *   "start" ("="|"|="|"&=") (ID|pattern=Pattern);
 *
 **/

// "start" ("="|"|="|"&=") (ID|pattern=Pattern)
protected class Start_Group extends GroupToken {
	
	public Start_Group(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Group getGrammarElement() {
		return grammarAccess.getStartAccess().getGroup();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new Start_Alternatives_2(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
	public IInstanceDescription tryConsume() {
		if(!current.isInstanceOf(grammarAccess.getStartRule().getType().getClassifier())) return null;
		return tryConsumeVal();
	}
}

// "start"
protected class Start_StartKeyword_0 extends KeywordToken  {
	
	public Start_StartKeyword_0(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Keyword getGrammarElement() {
		return grammarAccess.getStartAccess().getStartKeyword_0();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			default: return parent.createParentFollower(this, index, index, inst);
		}	
	}	
		
}

// "="|"|="|"&="
protected class Start_Alternatives_1 extends AlternativesToken {

	public Start_Alternatives_1(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Alternatives getGrammarElement() {
		return grammarAccess.getStartAccess().getAlternatives_1();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new Start_EqualsSignKeyword_1_0(parent, this, 0, inst);
			case 1: return new Start_VerticalLineEqualsSignKeyword_1_1(parent, this, 1, inst);
			case 2: return new Start_AmpersandEqualsSignKeyword_1_2(parent, this, 2, inst);
			default: return null;
		}	
	}	
		
}

// "="
protected class Start_EqualsSignKeyword_1_0 extends KeywordToken  {
	
	public Start_EqualsSignKeyword_1_0(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Keyword getGrammarElement() {
		return grammarAccess.getStartAccess().getEqualsSignKeyword_1_0();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new Start_StartKeyword_0(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
}

// "|="
protected class Start_VerticalLineEqualsSignKeyword_1_1 extends KeywordToken  {
	
	public Start_VerticalLineEqualsSignKeyword_1_1(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Keyword getGrammarElement() {
		return grammarAccess.getStartAccess().getVerticalLineEqualsSignKeyword_1_1();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new Start_StartKeyword_0(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
}

// "&="
protected class Start_AmpersandEqualsSignKeyword_1_2 extends KeywordToken  {
	
	public Start_AmpersandEqualsSignKeyword_1_2(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Keyword getGrammarElement() {
		return grammarAccess.getStartAccess().getAmpersandEqualsSignKeyword_1_2();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new Start_StartKeyword_0(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
}


// ID|pattern=Pattern
protected class Start_Alternatives_2 extends AlternativesToken {

	public Start_Alternatives_2(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Alternatives getGrammarElement() {
		return grammarAccess.getStartAccess().getAlternatives_2();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new Start_IDTerminalRuleCall_2_0(parent, this, 0, inst);
			case 1: return new Start_PatternAssignment_2_1(parent, this, 1, inst);
			default: return null;
		}	
	}	
		
}

// ID
protected class Start_IDTerminalRuleCall_2_0 extends UnassignedTextToken {

	public Start_IDTerminalRuleCall_2_0(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public RuleCall getGrammarElement() {
		return grammarAccess.getStartAccess().getIDTerminalRuleCall_2_0();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new Start_Alternatives_1(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
}

// pattern=Pattern
protected class Start_PatternAssignment_2_1 extends AssignmentToken  {
	
	public Start_PatternAssignment_2_1(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Assignment getGrammarElement() {
		return grammarAccess.getStartAccess().getPatternAssignment_2_1();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new Pattern_Alternatives(this, this, 0, inst);
			default: return null;
		}	
	}	
		
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("pattern",true)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("pattern");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IInstanceDescription param = getDescr((EObject)value);
			if(param.isInstanceOf(grammarAccess.getPatternRule().getType().getClassifier())) {
				type = AssignmentType.PRC;
				element = grammarAccess.getStartAccess().getPatternPatternParserRuleCall_2_1_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

	public AbstractToken createParentFollower(AbstractToken next,	int actIndex, int index, IInstanceDescription inst) {
		if(value == inst.getDelegate() && !inst.isConsumed()) return null;
		switch(index) {
			case 0: return new Start_Alternatives_1(parent, next, actIndex, consumed);
			default: return null;
		}	
	}	
}



/************ end Rule Start ****************/


/************ begin Rule Define ****************
 *
 * Define:
 *   ID ("="|"|="|"&=") pattern=Pattern;
 *
 **/

// ID ("="|"|="|"&=") pattern=Pattern
protected class Define_Group extends GroupToken {
	
	public Define_Group(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Group getGrammarElement() {
		return grammarAccess.getDefineAccess().getGroup();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new Define_PatternAssignment_2(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
	public IInstanceDescription tryConsume() {
		if(!current.isInstanceOf(grammarAccess.getDefineRule().getType().getClassifier())) return null;
		return tryConsumeVal();
	}
}

// ID
protected class Define_IDTerminalRuleCall_0 extends UnassignedTextToken {

	public Define_IDTerminalRuleCall_0(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public RuleCall getGrammarElement() {
		return grammarAccess.getDefineAccess().getIDTerminalRuleCall_0();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			default: return parent.createParentFollower(this, index, index, inst);
		}	
	}	
		
}

// "="|"|="|"&="
protected class Define_Alternatives_1 extends AlternativesToken {

	public Define_Alternatives_1(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Alternatives getGrammarElement() {
		return grammarAccess.getDefineAccess().getAlternatives_1();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new Define_EqualsSignKeyword_1_0(parent, this, 0, inst);
			case 1: return new Define_VerticalLineEqualsSignKeyword_1_1(parent, this, 1, inst);
			case 2: return new Define_AmpersandEqualsSignKeyword_1_2(parent, this, 2, inst);
			default: return null;
		}	
	}	
		
}

// "="
protected class Define_EqualsSignKeyword_1_0 extends KeywordToken  {
	
	public Define_EqualsSignKeyword_1_0(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Keyword getGrammarElement() {
		return grammarAccess.getDefineAccess().getEqualsSignKeyword_1_0();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new Define_IDTerminalRuleCall_0(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
}

// "|="
protected class Define_VerticalLineEqualsSignKeyword_1_1 extends KeywordToken  {
	
	public Define_VerticalLineEqualsSignKeyword_1_1(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Keyword getGrammarElement() {
		return grammarAccess.getDefineAccess().getVerticalLineEqualsSignKeyword_1_1();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new Define_IDTerminalRuleCall_0(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
}

// "&="
protected class Define_AmpersandEqualsSignKeyword_1_2 extends KeywordToken  {
	
	public Define_AmpersandEqualsSignKeyword_1_2(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Keyword getGrammarElement() {
		return grammarAccess.getDefineAccess().getAmpersandEqualsSignKeyword_1_2();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new Define_IDTerminalRuleCall_0(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
}


// pattern=Pattern
protected class Define_PatternAssignment_2 extends AssignmentToken  {
	
	public Define_PatternAssignment_2(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Assignment getGrammarElement() {
		return grammarAccess.getDefineAccess().getPatternAssignment_2();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new Pattern_Alternatives(this, this, 0, inst);
			default: return null;
		}	
	}	
		
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("pattern",true)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("pattern");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IInstanceDescription param = getDescr((EObject)value);
			if(param.isInstanceOf(grammarAccess.getPatternRule().getType().getClassifier())) {
				type = AssignmentType.PRC;
				element = grammarAccess.getDefineAccess().getPatternPatternParserRuleCall_2_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

	public AbstractToken createParentFollower(AbstractToken next,	int actIndex, int index, IInstanceDescription inst) {
		if(value == inst.getDelegate() && !inst.isConsumed()) return null;
		switch(index) {
			case 0: return new Define_Alternatives_1(parent, next, actIndex, consumed);
			default: return null;
		}	
	}	
}


/************ end Rule Define ****************/


/************ begin Rule Name ****************
 *
 * Name:
 *   IdentifierOrKeyWord|CName;
 *
 **/

// IdentifierOrKeyWord|CName
protected class Name_Alternatives extends AlternativesToken {

	public Name_Alternatives(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Alternatives getGrammarElement() {
		return grammarAccess.getNameAccess().getAlternatives();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new Name_IdentifierOrKeyWordParserRuleCall_0(parent, this, 0, inst);
			case 1: return new Name_CNameParserRuleCall_1(parent, this, 1, inst);
			default: return null;
		}	
	}	
		
	public IInstanceDescription tryConsume() {
		if(!current.isInstanceOf(grammarAccess.getNameRule().getType().getClassifier())) return null;
		return tryConsumeVal();
	}
}

// IdentifierOrKeyWord
protected class Name_IdentifierOrKeyWordParserRuleCall_0 extends RuleCallToken {
	
	public Name_IdentifierOrKeyWordParserRuleCall_0(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public RuleCall getGrammarElement() {
		return grammarAccess.getNameAccess().getIdentifierOrKeyWordParserRuleCall_0();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new IdentifierOrKeyWord_Alternatives(this, this, 0, inst);
			default: return null;
		}	
	}	
		
	protected IInstanceDescription tryConsumeVal() {
		if(checkForRecursion(IdentifierOrKeyWord_Alternatives.class, current)) return null;
		if(!current.isInstanceOf(grammarAccess.getIdentifierOrKeyWordRule().getType().getClassifier())) return null;
		return current;
	}
	
	public AbstractToken createParentFollower(AbstractToken next,	int actIndex, int index, IInstanceDescription inst) {
		switch(index) {
			default: return parent.createParentFollower(next, actIndex , index, inst);
		}	
	}	
}

// CName
protected class Name_CNameParserRuleCall_1 extends UnassignedTextToken {

	public Name_CNameParserRuleCall_1(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public RuleCall getGrammarElement() {
		return grammarAccess.getNameAccess().getCNameParserRuleCall_1();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			default: return parent.createParentFollower(this, index, index, inst);
		}	
	}	
		
}


/************ end Rule Name ****************/


/************ begin Rule ExceptNameClass ****************
 *
 * ExceptNameClass:
 *   "-" NameClass;
 *
 **/

// "-" NameClass
protected class ExceptNameClass_Group extends GroupToken {
	
	public ExceptNameClass_Group(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Group getGrammarElement() {
		return grammarAccess.getExceptNameClassAccess().getGroup();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new ExceptNameClass_NameClassParserRuleCall_1(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
	public IInstanceDescription tryConsume() {
		if(!current.isInstanceOf(grammarAccess.getExceptNameClassRule().getType().getClassifier())) return null;
		return tryConsumeVal();
	}
}

// "-"
protected class ExceptNameClass_HyphenMinusKeyword_0 extends KeywordToken  {
	
	public ExceptNameClass_HyphenMinusKeyword_0(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Keyword getGrammarElement() {
		return grammarAccess.getExceptNameClassAccess().getHyphenMinusKeyword_0();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			default: return parent.createParentFollower(this, index, index, inst);
		}	
	}	
		
}

// NameClass
protected class ExceptNameClass_NameClassParserRuleCall_1 extends RuleCallToken {
	
	public ExceptNameClass_NameClassParserRuleCall_1(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public RuleCall getGrammarElement() {
		return grammarAccess.getExceptNameClassAccess().getNameClassParserRuleCall_1();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new NameClass_Alternatives(this, this, 0, inst);
			default: return null;
		}	
	}	
		
	protected IInstanceDescription tryConsumeVal() {
		if(checkForRecursion(NameClass_Alternatives.class, current)) return null;
		if(!current.isInstanceOf(grammarAccess.getNameClassRule().getType().getClassifier())) return null;
		return current;
	}
	
	public AbstractToken createParentFollower(AbstractToken next,	int actIndex, int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new ExceptNameClass_HyphenMinusKeyword_0(parent, next, actIndex, inst);
			default: return null;
		}	
	}	
}


/************ end Rule ExceptNameClass ****************/


/************ begin Rule NameClass ****************
 *
 * NameClass:
 *   Name|ID exceptClassName=ExceptNameClass?|AnyName exceptClassName=ExceptNameClass?|
 *   "|" nc=NameClass|"(" nc=NameClass ")";
 *
 **/

// Name|ID exceptClassName=ExceptNameClass?|AnyName exceptClassName=ExceptNameClass?|
// "|" nc=NameClass|"(" nc=NameClass ")"
protected class NameClass_Alternatives extends AlternativesToken {

	public NameClass_Alternatives(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Alternatives getGrammarElement() {
		return grammarAccess.getNameClassAccess().getAlternatives();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new NameClass_NameParserRuleCall_0(parent, this, 0, inst);
			case 1: return new NameClass_Group_1(parent, this, 1, inst);
			case 2: return new NameClass_Group_2(parent, this, 2, inst);
			case 3: return new NameClass_Group_3(parent, this, 3, inst);
			case 4: return new NameClass_Group_4(parent, this, 4, inst);
			default: return null;
		}	
	}	
		
	public IInstanceDescription tryConsume() {
		if(!current.isInstanceOf(grammarAccess.getNameClassRule().getType().getClassifier())) return null;
		return tryConsumeVal();
	}
}

// Name
protected class NameClass_NameParserRuleCall_0 extends RuleCallToken {
	
	public NameClass_NameParserRuleCall_0(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public RuleCall getGrammarElement() {
		return grammarAccess.getNameClassAccess().getNameParserRuleCall_0();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new Name_Alternatives(this, this, 0, inst);
			default: return null;
		}	
	}	
		
	protected IInstanceDescription tryConsumeVal() {
		if(checkForRecursion(Name_Alternatives.class, current)) return null;
		if(!current.isInstanceOf(grammarAccess.getNameRule().getType().getClassifier())) return null;
		return current;
	}
	
	public AbstractToken createParentFollower(AbstractToken next,	int actIndex, int index, IInstanceDescription inst) {
		switch(index) {
			default: return parent.createParentFollower(next, actIndex , index, inst);
		}	
	}	
}

// ID exceptClassName=ExceptNameClass?
protected class NameClass_Group_1 extends GroupToken {
	
	public NameClass_Group_1(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Group getGrammarElement() {
		return grammarAccess.getNameClassAccess().getGroup_1();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new NameClass_ExceptClassNameAssignment_1_1(parent, this, 0, inst);
			case 1: return new NameClass_IDTerminalRuleCall_1_0(parent, this, 1, inst);
			default: return null;
		}	
	}	
		
}

// ID
protected class NameClass_IDTerminalRuleCall_1_0 extends UnassignedTextToken {

	public NameClass_IDTerminalRuleCall_1_0(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public RuleCall getGrammarElement() {
		return grammarAccess.getNameClassAccess().getIDTerminalRuleCall_1_0();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			default: return parent.createParentFollower(this, index, index, inst);
		}	
	}	
		
}

// exceptClassName=ExceptNameClass?
protected class NameClass_ExceptClassNameAssignment_1_1 extends AssignmentToken  {
	
	public NameClass_ExceptClassNameAssignment_1_1(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Assignment getGrammarElement() {
		return grammarAccess.getNameClassAccess().getExceptClassNameAssignment_1_1();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new ExceptNameClass_Group(this, this, 0, inst);
			default: return null;
		}	
	}	
		
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("exceptClassName",false)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("exceptClassName");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IInstanceDescription param = getDescr((EObject)value);
			if(param.isInstanceOf(grammarAccess.getExceptNameClassRule().getType().getClassifier())) {
				type = AssignmentType.PRC;
				element = grammarAccess.getNameClassAccess().getExceptClassNameExceptNameClassParserRuleCall_1_1_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

	public AbstractToken createParentFollower(AbstractToken next,	int actIndex, int index, IInstanceDescription inst) {
		if(value == inst.getDelegate() && !inst.isConsumed()) return null;
		switch(index) {
			case 0: return new NameClass_IDTerminalRuleCall_1_0(parent, next, actIndex, consumed);
			default: return null;
		}	
	}	
}


// AnyName exceptClassName=ExceptNameClass?
protected class NameClass_Group_2 extends GroupToken {
	
	public NameClass_Group_2(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Group getGrammarElement() {
		return grammarAccess.getNameClassAccess().getGroup_2();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new NameClass_ExceptClassNameAssignment_2_1(parent, this, 0, inst);
			case 1: return new NameClass_AnyNameParserRuleCall_2_0(parent, this, 1, inst);
			default: return null;
		}	
	}	
		
}

// AnyName
protected class NameClass_AnyNameParserRuleCall_2_0 extends RuleCallToken {
	
	public NameClass_AnyNameParserRuleCall_2_0(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public RuleCall getGrammarElement() {
		return grammarAccess.getNameClassAccess().getAnyNameParserRuleCall_2_0();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new AnyName_AsteriskKeyword(this, this, 0, inst);
			default: return null;
		}	
	}	
		
	protected IInstanceDescription tryConsumeVal() {
		if(checkForRecursion(AnyName_AsteriskKeyword.class, current)) return null;
		if(!current.isInstanceOf(grammarAccess.getAnyNameRule().getType().getClassifier())) return null;
		return current;
	}
	
	public AbstractToken createParentFollower(AbstractToken next,	int actIndex, int index, IInstanceDescription inst) {
		switch(index) {
			default: return parent.createParentFollower(next, actIndex , index, inst);
		}	
	}	
}

// exceptClassName=ExceptNameClass?
protected class NameClass_ExceptClassNameAssignment_2_1 extends AssignmentToken  {
	
	public NameClass_ExceptClassNameAssignment_2_1(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Assignment getGrammarElement() {
		return grammarAccess.getNameClassAccess().getExceptClassNameAssignment_2_1();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new ExceptNameClass_Group(this, this, 0, inst);
			default: return null;
		}	
	}	
		
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("exceptClassName",false)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("exceptClassName");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IInstanceDescription param = getDescr((EObject)value);
			if(param.isInstanceOf(grammarAccess.getExceptNameClassRule().getType().getClassifier())) {
				type = AssignmentType.PRC;
				element = grammarAccess.getNameClassAccess().getExceptClassNameExceptNameClassParserRuleCall_2_1_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

	public AbstractToken createParentFollower(AbstractToken next,	int actIndex, int index, IInstanceDescription inst) {
		if(value == inst.getDelegate() && !inst.isConsumed()) return null;
		switch(index) {
			case 0: return new NameClass_AnyNameParserRuleCall_2_0(parent, next, actIndex, consumed);
			default: return null;
		}	
	}	
}


// "|" nc=NameClass
protected class NameClass_Group_3 extends GroupToken {
	
	public NameClass_Group_3(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Group getGrammarElement() {
		return grammarAccess.getNameClassAccess().getGroup_3();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new NameClass_NcAssignment_3_1(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
}

// "|"
protected class NameClass_VerticalLineKeyword_3_0 extends KeywordToken  {
	
	public NameClass_VerticalLineKeyword_3_0(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Keyword getGrammarElement() {
		return grammarAccess.getNameClassAccess().getVerticalLineKeyword_3_0();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			default: return parent.createParentFollower(this, index, index, inst);
		}	
	}	
		
}

// nc=NameClass
protected class NameClass_NcAssignment_3_1 extends AssignmentToken  {
	
	public NameClass_NcAssignment_3_1(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Assignment getGrammarElement() {
		return grammarAccess.getNameClassAccess().getNcAssignment_3_1();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new NameClass_Alternatives(this, this, 0, inst);
			default: return null;
		}	
	}	
		
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("nc",true)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("nc");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IInstanceDescription param = getDescr((EObject)value);
			if(param.isInstanceOf(grammarAccess.getNameClassRule().getType().getClassifier())) {
				type = AssignmentType.PRC;
				element = grammarAccess.getNameClassAccess().getNcNameClassParserRuleCall_3_1_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

	public AbstractToken createParentFollower(AbstractToken next,	int actIndex, int index, IInstanceDescription inst) {
		if(value == inst.getDelegate() && !inst.isConsumed()) return null;
		switch(index) {
			case 0: return new NameClass_VerticalLineKeyword_3_0(parent, next, actIndex, consumed);
			default: return null;
		}	
	}	
}


// "(" nc=NameClass ")"
protected class NameClass_Group_4 extends GroupToken {
	
	public NameClass_Group_4(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Group getGrammarElement() {
		return grammarAccess.getNameClassAccess().getGroup_4();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new NameClass_RightParenthesisKeyword_4_2(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
}

// "("
protected class NameClass_LeftParenthesisKeyword_4_0 extends KeywordToken  {
	
	public NameClass_LeftParenthesisKeyword_4_0(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Keyword getGrammarElement() {
		return grammarAccess.getNameClassAccess().getLeftParenthesisKeyword_4_0();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			default: return parent.createParentFollower(this, index, index, inst);
		}	
	}	
		
}

// nc=NameClass
protected class NameClass_NcAssignment_4_1 extends AssignmentToken  {
	
	public NameClass_NcAssignment_4_1(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Assignment getGrammarElement() {
		return grammarAccess.getNameClassAccess().getNcAssignment_4_1();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new NameClass_Alternatives(this, this, 0, inst);
			default: return null;
		}	
	}	
		
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("nc",true)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("nc");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IInstanceDescription param = getDescr((EObject)value);
			if(param.isInstanceOf(grammarAccess.getNameClassRule().getType().getClassifier())) {
				type = AssignmentType.PRC;
				element = grammarAccess.getNameClassAccess().getNcNameClassParserRuleCall_4_1_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

	public AbstractToken createParentFollower(AbstractToken next,	int actIndex, int index, IInstanceDescription inst) {
		if(value == inst.getDelegate() && !inst.isConsumed()) return null;
		switch(index) {
			case 0: return new NameClass_LeftParenthesisKeyword_4_0(parent, next, actIndex, consumed);
			default: return null;
		}	
	}	
}

// ")"
protected class NameClass_RightParenthesisKeyword_4_2 extends KeywordToken  {
	
	public NameClass_RightParenthesisKeyword_4_2(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Keyword getGrammarElement() {
		return grammarAccess.getNameClassAccess().getRightParenthesisKeyword_4_2();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new NameClass_NcAssignment_4_1(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
}



/************ end Rule NameClass ****************/



/************ begin Rule DataTypeValue ****************
 *
 * DataTypeValue:
 *   Literal;
 *
 **/

// Literal
protected class DataTypeValue_LiteralParserRuleCall extends RuleCallToken {
	
	public DataTypeValue_LiteralParserRuleCall(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public RuleCall getGrammarElement() {
		return grammarAccess.getDataTypeValueAccess().getLiteralParserRuleCall();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new Literal_Group(this, this, 0, inst);
			default: return null;
		}	
	}	
		
	public IInstanceDescription tryConsume() {
		if(!current.isInstanceOf(grammarAccess.getDataTypeValueRule().getType().getClassifier())) return null;
		return tryConsumeVal();
	}
	protected IInstanceDescription tryConsumeVal() {
		if(checkForRecursion(Literal_Group.class, current)) return null;
		if(!current.isInstanceOf(grammarAccess.getLiteralRule().getType().getClassifier())) return null;
		return current;
	}
	
	public AbstractToken createParentFollower(AbstractToken next,	int actIndex, int index, IInstanceDescription inst) {
		switch(index) {
			default: return parent.createParentFollower(next, actIndex , index, inst);
		}	
	}	
}

/************ end Rule DataTypeValue ****************/


/************ begin Rule AnyURILiteral ****************
 *
 * AnyURILiteral:
 *   Literal;
 *
 **/

// Literal
protected class AnyURILiteral_LiteralParserRuleCall extends RuleCallToken {
	
	public AnyURILiteral_LiteralParserRuleCall(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public RuleCall getGrammarElement() {
		return grammarAccess.getAnyURILiteralAccess().getLiteralParserRuleCall();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new Literal_Group(this, this, 0, inst);
			default: return null;
		}	
	}	
		
	public IInstanceDescription tryConsume() {
		if(!current.isInstanceOf(grammarAccess.getAnyURILiteralRule().getType().getClassifier())) return null;
		return tryConsumeVal();
	}
	protected IInstanceDescription tryConsumeVal() {
		if(checkForRecursion(Literal_Group.class, current)) return null;
		if(!current.isInstanceOf(grammarAccess.getLiteralRule().getType().getClassifier())) return null;
		return current;
	}
	
	public AbstractToken createParentFollower(AbstractToken next,	int actIndex, int index, IInstanceDescription inst) {
		switch(index) {
			default: return parent.createParentFollower(next, actIndex , index, inst);
		}	
	}	
}

/************ end Rule AnyURILiteral ****************/


/************ begin Rule NamespaceURILiteral ****************
 *
 * NamespaceURILiteral:
 *   Literal|"inherit";
 *
 **/

// Literal|"inherit"
protected class NamespaceURILiteral_Alternatives extends AlternativesToken {

	public NamespaceURILiteral_Alternatives(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Alternatives getGrammarElement() {
		return grammarAccess.getNamespaceURILiteralAccess().getAlternatives();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new NamespaceURILiteral_LiteralParserRuleCall_0(parent, this, 0, inst);
			case 1: return new NamespaceURILiteral_InheritKeyword_1(parent, this, 1, inst);
			default: return null;
		}	
	}	
		
	public IInstanceDescription tryConsume() {
		if(!current.isInstanceOf(grammarAccess.getNamespaceURILiteralRule().getType().getClassifier())) return null;
		return tryConsumeVal();
	}
}

// Literal
protected class NamespaceURILiteral_LiteralParserRuleCall_0 extends RuleCallToken {
	
	public NamespaceURILiteral_LiteralParserRuleCall_0(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public RuleCall getGrammarElement() {
		return grammarAccess.getNamespaceURILiteralAccess().getLiteralParserRuleCall_0();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new Literal_Group(this, this, 0, inst);
			default: return null;
		}	
	}	
		
	protected IInstanceDescription tryConsumeVal() {
		if(checkForRecursion(Literal_Group.class, current)) return null;
		if(!current.isInstanceOf(grammarAccess.getLiteralRule().getType().getClassifier())) return null;
		return current;
	}
	
	public AbstractToken createParentFollower(AbstractToken next,	int actIndex, int index, IInstanceDescription inst) {
		switch(index) {
			default: return parent.createParentFollower(next, actIndex , index, inst);
		}	
	}	
}

// "inherit"
protected class NamespaceURILiteral_InheritKeyword_1 extends KeywordToken  {
	
	public NamespaceURILiteral_InheritKeyword_1(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Keyword getGrammarElement() {
		return grammarAccess.getNamespaceURILiteralAccess().getInheritKeyword_1();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			default: return parent.createParentFollower(this, index, index, inst);
		}	
	}	
		
}


/************ end Rule NamespaceURILiteral ****************/


/************ begin Rule Inherit ****************
 *
 * Inherit:
 *   "inherit" "=" IdentifierOrKeyWord;
 *
 **/

// "inherit" "=" IdentifierOrKeyWord
protected class Inherit_Group extends GroupToken {
	
	public Inherit_Group(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Group getGrammarElement() {
		return grammarAccess.getInheritAccess().getGroup();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new Inherit_IdentifierOrKeyWordParserRuleCall_2(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
	public IInstanceDescription tryConsume() {
		if(!current.isInstanceOf(grammarAccess.getInheritRule().getType().getClassifier())) return null;
		return tryConsumeVal();
	}
}

// "inherit"
protected class Inherit_InheritKeyword_0 extends KeywordToken  {
	
	public Inherit_InheritKeyword_0(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Keyword getGrammarElement() {
		return grammarAccess.getInheritAccess().getInheritKeyword_0();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			default: return parent.createParentFollower(this, index, index, inst);
		}	
	}	
		
}

// "="
protected class Inherit_EqualsSignKeyword_1 extends KeywordToken  {
	
	public Inherit_EqualsSignKeyword_1(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Keyword getGrammarElement() {
		return grammarAccess.getInheritAccess().getEqualsSignKeyword_1();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new Inherit_InheritKeyword_0(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
}

// IdentifierOrKeyWord
protected class Inherit_IdentifierOrKeyWordParserRuleCall_2 extends RuleCallToken {
	
	public Inherit_IdentifierOrKeyWordParserRuleCall_2(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public RuleCall getGrammarElement() {
		return grammarAccess.getInheritAccess().getIdentifierOrKeyWordParserRuleCall_2();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new IdentifierOrKeyWord_Alternatives(this, this, 0, inst);
			default: return null;
		}	
	}	
		
	protected IInstanceDescription tryConsumeVal() {
		if(checkForRecursion(IdentifierOrKeyWord_Alternatives.class, current)) return null;
		if(!current.isInstanceOf(grammarAccess.getIdentifierOrKeyWordRule().getType().getClassifier())) return null;
		return current;
	}
	
	public AbstractToken createParentFollower(AbstractToken next,	int actIndex, int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new Inherit_EqualsSignKeyword_1(parent, next, actIndex, inst);
			default: return null;
		}	
	}	
}


/************ end Rule Inherit ****************/


/************ begin Rule IdentifierOrKeyWord ****************
 *
 * IdentifierOrKeyWord:
 *   Identifier|KeyWord;
 *
 **/

// Identifier|KeyWord
protected class IdentifierOrKeyWord_Alternatives extends AlternativesToken {

	public IdentifierOrKeyWord_Alternatives(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Alternatives getGrammarElement() {
		return grammarAccess.getIdentifierOrKeyWordAccess().getAlternatives();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new IdentifierOrKeyWord_IdentifierParserRuleCall_0(parent, this, 0, inst);
			case 1: return new IdentifierOrKeyWord_KeyWordParserRuleCall_1(parent, this, 1, inst);
			default: return null;
		}	
	}	
		
	public IInstanceDescription tryConsume() {
		if(!current.isInstanceOf(grammarAccess.getIdentifierOrKeyWordRule().getType().getClassifier())) return null;
		return tryConsumeVal();
	}
}

// Identifier
protected class IdentifierOrKeyWord_IdentifierParserRuleCall_0 extends RuleCallToken {
	
	public IdentifierOrKeyWord_IdentifierParserRuleCall_0(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public RuleCall getGrammarElement() {
		return grammarAccess.getIdentifierOrKeyWordAccess().getIdentifierParserRuleCall_0();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new Identifier_Alternatives(this, this, 0, inst);
			default: return null;
		}	
	}	
		
	protected IInstanceDescription tryConsumeVal() {
		if(checkForRecursion(Identifier_Alternatives.class, current)) return null;
		if(!current.isInstanceOf(grammarAccess.getIdentifierRule().getType().getClassifier())) return null;
		return current;
	}
	
	public AbstractToken createParentFollower(AbstractToken next,	int actIndex, int index, IInstanceDescription inst) {
		switch(index) {
			default: return parent.createParentFollower(next, actIndex , index, inst);
		}	
	}	
}

// KeyWord
protected class IdentifierOrKeyWord_KeyWordParserRuleCall_1 extends RuleCallToken {
	
	public IdentifierOrKeyWord_KeyWordParserRuleCall_1(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public RuleCall getGrammarElement() {
		return grammarAccess.getIdentifierOrKeyWordAccess().getKeyWordParserRuleCall_1();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new KeyWord_Alternatives(this, this, 0, inst);
			default: return null;
		}	
	}	
		
	protected IInstanceDescription tryConsumeVal() {
		if(checkForRecursion(KeyWord_Alternatives.class, current)) return null;
		if(!current.isInstanceOf(grammarAccess.getKeyWordRule().getType().getClassifier())) return null;
		return current;
	}
	
	public AbstractToken createParentFollower(AbstractToken next,	int actIndex, int index, IInstanceDescription inst) {
		switch(index) {
			default: return parent.createParentFollower(next, actIndex , index, inst);
		}	
	}	
}


/************ end Rule IdentifierOrKeyWord ****************/


/************ begin Rule Identifier ****************
 *
 * Identifier:
 *   ID keyWord=KeyWord|QuotedIdentifier;
 *
 **/

// ID keyWord=KeyWord|QuotedIdentifier
protected class Identifier_Alternatives extends AlternativesToken {

	public Identifier_Alternatives(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Alternatives getGrammarElement() {
		return grammarAccess.getIdentifierAccess().getAlternatives();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new Identifier_Group_0(parent, this, 0, inst);
			case 1: return new Identifier_QuotedIdentifierParserRuleCall_1(parent, this, 1, inst);
			default: return null;
		}	
	}	
		
	public IInstanceDescription tryConsume() {
		if(!current.isInstanceOf(grammarAccess.getIdentifierRule().getType().getClassifier())) return null;
		return tryConsumeVal();
	}
}

// ID keyWord=KeyWord
protected class Identifier_Group_0 extends GroupToken {
	
	public Identifier_Group_0(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Group getGrammarElement() {
		return grammarAccess.getIdentifierAccess().getGroup_0();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new Identifier_KeyWordAssignment_0_1(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
}

// ID
protected class Identifier_IDTerminalRuleCall_0_0 extends UnassignedTextToken {

	public Identifier_IDTerminalRuleCall_0_0(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public RuleCall getGrammarElement() {
		return grammarAccess.getIdentifierAccess().getIDTerminalRuleCall_0_0();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			default: return parent.createParentFollower(this, index, index, inst);
		}	
	}	
		
}

// keyWord=KeyWord
protected class Identifier_KeyWordAssignment_0_1 extends AssignmentToken  {
	
	public Identifier_KeyWordAssignment_0_1(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Assignment getGrammarElement() {
		return grammarAccess.getIdentifierAccess().getKeyWordAssignment_0_1();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new KeyWord_Alternatives(this, this, 0, inst);
			default: return null;
		}	
	}	
		
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("keyWord",true)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("keyWord");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IInstanceDescription param = getDescr((EObject)value);
			if(param.isInstanceOf(grammarAccess.getKeyWordRule().getType().getClassifier())) {
				type = AssignmentType.PRC;
				element = grammarAccess.getIdentifierAccess().getKeyWordKeyWordParserRuleCall_0_1_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

	public AbstractToken createParentFollower(AbstractToken next,	int actIndex, int index, IInstanceDescription inst) {
		if(value == inst.getDelegate() && !inst.isConsumed()) return null;
		switch(index) {
			case 0: return new Identifier_IDTerminalRuleCall_0_0(parent, next, actIndex, consumed);
			default: return null;
		}	
	}	
}


// QuotedIdentifier
protected class Identifier_QuotedIdentifierParserRuleCall_1 extends UnassignedTextToken {

	public Identifier_QuotedIdentifierParserRuleCall_1(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public RuleCall getGrammarElement() {
		return grammarAccess.getIdentifierAccess().getQuotedIdentifierParserRuleCall_1();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			default: return parent.createParentFollower(this, index, index, inst);
		}	
	}	
		
}


/************ end Rule Identifier ****************/




/************ begin Rule AnyName ****************
 *
 * AnyName:
 *   "*"; 
 * 
 * 
 * 
 * 	
 * 
 * //Literal:
 * //	LiteralSegment ('~' literalSegment=LiteralSegment)+;
 *
 **/

// "*"
protected class AnyName_AsteriskKeyword extends KeywordToken  {
	
	public AnyName_AsteriskKeyword(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Keyword getGrammarElement() {
		return grammarAccess.getAnyNameAccess().getAsteriskKeyword();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			default: return parent.createParentFollower(this, index, index, inst);
		}	
	}	
		
	public IInstanceDescription tryConsume() {
		if(!current.isInstanceOf(grammarAccess.getAnyNameRule().getType().getClassifier())) return null;
		return tryConsumeVal();
	}
}

/************ end Rule AnyName ****************/


/************ begin Rule Literal ****************
 *
 * Literal:
 *   STRING ("~" literalSegment=STRING)+; 
 * 
 * //Literal:
 * //	LiteralSegment ('~' literalSegment=LiteralSegment)+;
 * 
 *        
 * 	
 * //terminal CHAR: "A".."Z" | "a".."z";
 * //terminal NewLine: "\n" | "\r" | "\n\r";
 * 
 * //LiteralSegment:
 * //	'"' (CHAR  ('"' | NewLine))* '"' |
 * //	"'" (CHAR  ("'" | NewLine))* "'" |
 * //	'"''"''"' (('"')? ('"')? (CHAR  '"'))* '"''"''"'
 * //	"'''" (("'")? ("'")? (CHAR  "'"))* "'''";
 *
 **/

// STRING ("~" literalSegment=STRING)+
protected class Literal_Group extends GroupToken {
	
	public Literal_Group(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Group getGrammarElement() {
		return grammarAccess.getLiteralAccess().getGroup();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new Literal_Group_1(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
	public IInstanceDescription tryConsume() {
		if(!current.isInstanceOf(grammarAccess.getLiteralRule().getType().getClassifier())) return null;
		return tryConsumeVal();
	}
}

// STRING
protected class Literal_STRINGTerminalRuleCall_0 extends UnassignedTextToken {

	public Literal_STRINGTerminalRuleCall_0(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public RuleCall getGrammarElement() {
		return grammarAccess.getLiteralAccess().getSTRINGTerminalRuleCall_0();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			default: return parent.createParentFollower(this, index, index, inst);
		}	
	}	
		
}

// ("~" literalSegment=STRING)+
protected class Literal_Group_1 extends GroupToken {
	
	public Literal_Group_1(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Group getGrammarElement() {
		return grammarAccess.getLiteralAccess().getGroup_1();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new Literal_LiteralSegmentAssignment_1_1(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
}

// "~"
protected class Literal_TildeKeyword_1_0 extends KeywordToken  {
	
	public Literal_TildeKeyword_1_0(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Keyword getGrammarElement() {
		return grammarAccess.getLiteralAccess().getTildeKeyword_1_0();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new Literal_Group_1(parent, this, 0, inst);
			case 1: return new Literal_STRINGTerminalRuleCall_0(parent, this, 1, inst);
			default: return null;
		}	
	}	
		
}

// literalSegment=STRING
protected class Literal_LiteralSegmentAssignment_1_1 extends AssignmentToken  {
	
	public Literal_LiteralSegmentAssignment_1_1(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Assignment getGrammarElement() {
		return grammarAccess.getLiteralAccess().getLiteralSegmentAssignment_1_1();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new Literal_TildeKeyword_1_0(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("literalSegment",true)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("literalSegment");
		if(Boolean.TRUE.booleanValue()) { // org::eclipse::xtext::impl::RuleCallImpl FIXME: check if value is valid for lexer rule
			type = AssignmentType.LRC;
			element = grammarAccess.getLiteralAccess().getLiteralSegmentSTRINGTerminalRuleCall_1_1_0();
			return obj;
		}
		return null;
	}

}



/************ end Rule Literal ****************/


/************ begin Rule KeyWord ****************
 *
 * KeyWord:
 *   "attribute"|"default"|"datatypes"|"div"|"element"|"empty"|"external"|"grammar"|
 *   "include"|"inherit"|"list"|"mixed"|"namespace"|"notAllowed"|"parent"|"start"|
 *   "string"|"text"|"token"; 
 * 	
 * //terminal CHAR: "A".."Z" | "a".."z";
 * //terminal NewLine: "\n" | "\r" | "\n\r";
 * 
 * //LiteralSegment:
 * //	'"' (CHAR  ('"' | NewLine))* '"' |
 * //	"'" (CHAR  ("'" | NewLine))* "'" |
 * //	'"''"''"' (('"')? ('"')? (CHAR  '"'))* '"''"''"'
 * //	"'''" (("'")? ("'")? (CHAR  "'"))* "'''";
 *
 **/

// "attribute"|"default"|"datatypes"|"div"|"element"|"empty"|"external"|"grammar"|
// "include"|"inherit"|"list"|"mixed"|"namespace"|"notAllowed"|"parent"|"start"|
// "string"|"text"|"token" 
// 	
// //terminal CHAR: "A".."Z" | "a".."z";
// //terminal NewLine: "\n" | "\r" | "\n\r";
// 
// //LiteralSegment:
// //	'"' (CHAR  ('"' | NewLine))* '"' |
// //	"'" (CHAR  ("'" | NewLine))* "'" |
// //	'"''"''"' (('"')? ('"')? (CHAR  '"'))* '"''"''"'
// //	"'''" (("'")? ("'")? (CHAR  "'"))* "'''";
protected class KeyWord_Alternatives extends AlternativesToken {

	public KeyWord_Alternatives(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Alternatives getGrammarElement() {
		return grammarAccess.getKeyWordAccess().getAlternatives();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new KeyWord_AttributeKeyword_0(parent, this, 0, inst);
			case 1: return new KeyWord_DefaultKeyword_1(parent, this, 1, inst);
			case 2: return new KeyWord_DatatypesKeyword_2(parent, this, 2, inst);
			case 3: return new KeyWord_DivKeyword_3(parent, this, 3, inst);
			case 4: return new KeyWord_ElementKeyword_4(parent, this, 4, inst);
			case 5: return new KeyWord_EmptyKeyword_5(parent, this, 5, inst);
			case 6: return new KeyWord_ExternalKeyword_6(parent, this, 6, inst);
			case 7: return new KeyWord_GrammarKeyword_7(parent, this, 7, inst);
			case 8: return new KeyWord_IncludeKeyword_8(parent, this, 8, inst);
			case 9: return new KeyWord_InheritKeyword_9(parent, this, 9, inst);
			case 10: return new KeyWord_ListKeyword_10(parent, this, 10, inst);
			case 11: return new KeyWord_MixedKeyword_11(parent, this, 11, inst);
			case 12: return new KeyWord_NamespaceKeyword_12(parent, this, 12, inst);
			case 13: return new KeyWord_NotAllowedKeyword_13(parent, this, 13, inst);
			case 14: return new KeyWord_ParentKeyword_14(parent, this, 14, inst);
			case 15: return new KeyWord_StartKeyword_15(parent, this, 15, inst);
			case 16: return new KeyWord_StringKeyword_16(parent, this, 16, inst);
			case 17: return new KeyWord_TextKeyword_17(parent, this, 17, inst);
			case 18: return new KeyWord_TokenKeyword_18(parent, this, 18, inst);
			default: return null;
		}	
	}	
		
	public IInstanceDescription tryConsume() {
		if(!current.isInstanceOf(grammarAccess.getKeyWordRule().getType().getClassifier())) return null;
		return tryConsumeVal();
	}
}

// "attribute"
protected class KeyWord_AttributeKeyword_0 extends KeywordToken  {
	
	public KeyWord_AttributeKeyword_0(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Keyword getGrammarElement() {
		return grammarAccess.getKeyWordAccess().getAttributeKeyword_0();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			default: return parent.createParentFollower(this, index, index, inst);
		}	
	}	
		
}

// "default"
protected class KeyWord_DefaultKeyword_1 extends KeywordToken  {
	
	public KeyWord_DefaultKeyword_1(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Keyword getGrammarElement() {
		return grammarAccess.getKeyWordAccess().getDefaultKeyword_1();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			default: return parent.createParentFollower(this, index, index, inst);
		}	
	}	
		
}

// "datatypes"
protected class KeyWord_DatatypesKeyword_2 extends KeywordToken  {
	
	public KeyWord_DatatypesKeyword_2(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Keyword getGrammarElement() {
		return grammarAccess.getKeyWordAccess().getDatatypesKeyword_2();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			default: return parent.createParentFollower(this, index, index, inst);
		}	
	}	
		
}

// "div"
protected class KeyWord_DivKeyword_3 extends KeywordToken  {
	
	public KeyWord_DivKeyword_3(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Keyword getGrammarElement() {
		return grammarAccess.getKeyWordAccess().getDivKeyword_3();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			default: return parent.createParentFollower(this, index, index, inst);
		}	
	}	
		
}

// "element"
protected class KeyWord_ElementKeyword_4 extends KeywordToken  {
	
	public KeyWord_ElementKeyword_4(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Keyword getGrammarElement() {
		return grammarAccess.getKeyWordAccess().getElementKeyword_4();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			default: return parent.createParentFollower(this, index, index, inst);
		}	
	}	
		
}

// "empty"
protected class KeyWord_EmptyKeyword_5 extends KeywordToken  {
	
	public KeyWord_EmptyKeyword_5(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Keyword getGrammarElement() {
		return grammarAccess.getKeyWordAccess().getEmptyKeyword_5();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			default: return parent.createParentFollower(this, index, index, inst);
		}	
	}	
		
}

// "external"
protected class KeyWord_ExternalKeyword_6 extends KeywordToken  {
	
	public KeyWord_ExternalKeyword_6(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Keyword getGrammarElement() {
		return grammarAccess.getKeyWordAccess().getExternalKeyword_6();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			default: return parent.createParentFollower(this, index, index, inst);
		}	
	}	
		
}

// "grammar"
protected class KeyWord_GrammarKeyword_7 extends KeywordToken  {
	
	public KeyWord_GrammarKeyword_7(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Keyword getGrammarElement() {
		return grammarAccess.getKeyWordAccess().getGrammarKeyword_7();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			default: return parent.createParentFollower(this, index, index, inst);
		}	
	}	
		
}

// "include"
protected class KeyWord_IncludeKeyword_8 extends KeywordToken  {
	
	public KeyWord_IncludeKeyword_8(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Keyword getGrammarElement() {
		return grammarAccess.getKeyWordAccess().getIncludeKeyword_8();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			default: return parent.createParentFollower(this, index, index, inst);
		}	
	}	
		
}

// "inherit"
protected class KeyWord_InheritKeyword_9 extends KeywordToken  {
	
	public KeyWord_InheritKeyword_9(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Keyword getGrammarElement() {
		return grammarAccess.getKeyWordAccess().getInheritKeyword_9();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			default: return parent.createParentFollower(this, index, index, inst);
		}	
	}	
		
}

// "list"
protected class KeyWord_ListKeyword_10 extends KeywordToken  {
	
	public KeyWord_ListKeyword_10(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Keyword getGrammarElement() {
		return grammarAccess.getKeyWordAccess().getListKeyword_10();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			default: return parent.createParentFollower(this, index, index, inst);
		}	
	}	
		
}

// "mixed"
protected class KeyWord_MixedKeyword_11 extends KeywordToken  {
	
	public KeyWord_MixedKeyword_11(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Keyword getGrammarElement() {
		return grammarAccess.getKeyWordAccess().getMixedKeyword_11();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			default: return parent.createParentFollower(this, index, index, inst);
		}	
	}	
		
}

// "namespace"
protected class KeyWord_NamespaceKeyword_12 extends KeywordToken  {
	
	public KeyWord_NamespaceKeyword_12(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Keyword getGrammarElement() {
		return grammarAccess.getKeyWordAccess().getNamespaceKeyword_12();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			default: return parent.createParentFollower(this, index, index, inst);
		}	
	}	
		
}

// "notAllowed"
protected class KeyWord_NotAllowedKeyword_13 extends KeywordToken  {
	
	public KeyWord_NotAllowedKeyword_13(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Keyword getGrammarElement() {
		return grammarAccess.getKeyWordAccess().getNotAllowedKeyword_13();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			default: return parent.createParentFollower(this, index, index, inst);
		}	
	}	
		
}

// "parent"
protected class KeyWord_ParentKeyword_14 extends KeywordToken  {
	
	public KeyWord_ParentKeyword_14(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Keyword getGrammarElement() {
		return grammarAccess.getKeyWordAccess().getParentKeyword_14();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			default: return parent.createParentFollower(this, index, index, inst);
		}	
	}	
		
}

// "start"
protected class KeyWord_StartKeyword_15 extends KeywordToken  {
	
	public KeyWord_StartKeyword_15(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Keyword getGrammarElement() {
		return grammarAccess.getKeyWordAccess().getStartKeyword_15();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			default: return parent.createParentFollower(this, index, index, inst);
		}	
	}	
		
}

// "string"
protected class KeyWord_StringKeyword_16 extends KeywordToken  {
	
	public KeyWord_StringKeyword_16(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Keyword getGrammarElement() {
		return grammarAccess.getKeyWordAccess().getStringKeyword_16();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			default: return parent.createParentFollower(this, index, index, inst);
		}	
	}	
		
}

// "text"
protected class KeyWord_TextKeyword_17 extends KeywordToken  {
	
	public KeyWord_TextKeyword_17(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Keyword getGrammarElement() {
		return grammarAccess.getKeyWordAccess().getTextKeyword_17();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			default: return parent.createParentFollower(this, index, index, inst);
		}	
	}	
		
}

// "token"
protected class KeyWord_TokenKeyword_18 extends KeywordToken  {
	
	public KeyWord_TokenKeyword_18(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Keyword getGrammarElement() {
		return grammarAccess.getKeyWordAccess().getTokenKeyword_18();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			default: return parent.createParentFollower(this, index, index, inst);
		}	
	}	
		
}


/************ end Rule KeyWord ****************/

}
