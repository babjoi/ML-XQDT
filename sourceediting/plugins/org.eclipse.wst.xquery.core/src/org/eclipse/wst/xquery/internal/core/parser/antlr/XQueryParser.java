// $ANTLR 3.1.2 XQueryParser.g 2010-07-13 22:09:19

/*******************************************************************************
 * Copyright (c) 2008, 2009 28msec Inc. and others.
 * All rights reserved. This program and the accompanying materials
 * are made available under the terms of the Eclipse Public License v1.0
 * which accompanies this distribution, and is available at
 * http://www.eclipse.org/legal/epl-v10.html
 *
 * Contributors:
 *     Gabriel Petrovay (28msec) - initial API and implementation
 *     Sam Neth (Mark Logic)
 *******************************************************************************/
package org.eclipse.wst.xquery.internal.core.parser.antlr;


import org.antlr.runtime.*;
import java.util.Stack;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;

import org.antlr.runtime.tree.*;

@SuppressWarnings( { "rawtypes", "unchecked", "unused" } )
public class XQueryParser extends XQDTParser {
    public static final String[] tokenNames = new String[] {
        "<invalid>", "<EOR>", "<DOWN>", "<UP>", "L_QuotAttrContentChar", "L_AposAttrContentChar", "L_ElementContentChar", "L_CDataSection", "L_PredefinedEntityRef", "L_CharRef", "ESCAPE_LBRACKET", "ESCAPE_RBRACKET", "ESCAPE_APOS", "ESCAPE_QUOT", "CDATA_START", "CDATA_END", "ANCESTOR", "ANCESTOR_OR_SELF", "AND", "AS", "ASCENDING", "AT", "ATTRIBUTE", "BASE_URI", "BOUNDARY_SPACE", "BY", "CASE", "CAST", "CASTABLE", "CHILD", "COLLATION", "COMMENT", "CONSTRUCTION", "COPY_NAMESPACES", "DECLARE", "DEFAULT", "DESCENDANT", "DESCENDANT_OR_SELF", "DESCENDING", "DIV", "DOCUMENT", "DOCUMENT_NODE", "ELEMENT", "ELSE", "EMPTY", "EMPTY_SEQUENCE", "ENCODING", "EQ", "EVERY", "EXCEPT", "EXTERNAL", "FOLLOWING", "FOLLOWING_SIBLING", "FOR", "FUNCTION", "GE", "GREATEST", "GT", "IDIV", "IF", "IMPORT", "IN", "INHERIT", "INSTANCE", "INTERSECT", "IS", "ITEM", "LAX", "LE", "LEAST", "LET", "LT", "MOD", "MODULE", "NAMESPACE", "NE", "NO_INHERIT", "NO_PRESERVE", "NODE", "OF", "OPTION", "OR", "ORDER", "ORDERED", "ORDERING", "PARENT", "PRECEDING", "PRECEDING_SIBLING", "PRESERVE", "PROCESSING_INSTRUCTION", "RETURN", "SATISFIES", "SCHEMA", "SCHEMA_ATTRIBUTE", "SCHEMA_ELEMENT", "SELF", "SOME", "STABLE", "STRICT", "STRIP", "TEXT", "THEN", "TO", "TREAT", "TYPESWITCH", "UNION", "UNORDERED", "VALIDATE", "VARIABLE", "VERSION", "WHERE", "XQUERY", "CATCH", "CONTEXT", "COUNT", "DECIMAL_FORMAT", "DECIMAL_SEPARATOR", "DIGIT", "END", "GROUP", "GROUPING_SEPARATOR", "INFINITY", "MINUS_SIGN", "NAMESPACE_NODE", "NAN", "NEXT", "ONLY", "OUTER", "PATTERN_SEPARATOR", "PERCENT", "PER_MILLE", "PREVIOUS", "SLIDING", "START", "TRY", "TUMBLING", "WHEN", "WINDOW", "ZERO_DIGIT", "AFTER", "BEFORE", "COPY", "DELETE", "FIRST", "INSERT", "INTO", "LAST", "MODIFY", "NODES", "RENAME", "REPLACE", "REVALIDATION", "SKIP", "UPDATING", "VALUE", "WITH", "BLOCK", "CONSTANT", "EXIT", "RETURNING", "SEQUENTIAL", "SET", "SIMPLE", "WHILE", "EVAL", "USING", "APPEND_ONLY", "AUTOMATICALLY", "CHECK", "COLLECTION", "CONSTRAINT", "CONST", "EQUALITY", "FOREACH", "FOREIGN", "FROM", "INDEX", "INTEGRITY", "KEY", "MAINTAINED", "MANUALLY", "MUTABLE", "NON", "ON", "QUEUE", "RANGE", "READ_ONLY", "UNIQUE", "BINARY", "PRIVATE", "AMP_ER", "APOS_ER", "QUOT_ER", "LPAREN", "RPAREN", "DOLLAR", "LBRACKET", "RBRACKET", "LSQUARE", "RSQUARE", "EQUAL", "BIND", "NOTEQUAL", "AMP", "COMMA", "QUESTION", "STAR", "PLUS", "MINUS", "SMALLER", "GREATER", "SMALLEREQ", "GREATEREQ", "SMALLER_SMALLER", "GREATER_GREATER", "SLASH", "SLASH_SLASH", "DOT", "DOT_DOT", "COLON", "COLON_COLON", "EMPTY_CLOSE_TAG", "CLOSE_TAG", "SEMICOLON", "VBAR", "PRAGMA_START", "PRAGMA_END", "XML_COMMENT_START", "XML_COMMENT_END", "PI_START", "PI_END", "ATTR_SIGN", "CHARREF_DEC", "CHARREF_HEX", "APOS", "QUOT", "NCNameStartChar", "NCNameChar", "L_NCName", "Letter", "HexLetter", "Digit", "Digits", "S", "SU", "L_Pragma", "L_DirCommentConstructor", "L_DirPIConstructor", "L_IntegerLiteral", "L_DecimalLiteral", "L_DoubleLiteral", "L_Comment", "L_AnyChar", "L_QuotStringLiteralChar", "L_AposStringLiteralChar", "LibraryModule", "MainModule", "VersionDecl", "VersionDeclEncoding", "VersionDeclVersion", "ModuleDecl", "Prolog", "DefaultNamespaceDecls", "DefaultNamespaceDecl", "Setters", "Setter", "NamespaceDecls", "NamespaceDecl", "Imports", "SchemaImport", "SchemaPrefix", "NamespaceName", "DefaultElementNamespace", "AtHints", "ModuleImport", "BaseURIDecl", "OrderedDecls", "VarDecl", "VarType", "VarValue", "VarDefaultValue", "VarConstantDecl", "VarVariableDecl", "FunctionDecl", "ParamList", "ReturnType", "OptionDecl", "TypeDeclaration", "Param", "EnclosedExpr", "QueryBody", "UnaryExpr", "DirElemConstructor", "DirAttributeList", "DirAttributeValue", "DirElemContent", "CommonContent", "SequenceType", "EmptySequenceTest", "KindTest", "ItemTest", "AtomicType", "StringLiteral", "ElementContentChar", "AttributeValueChar", "QName", "Block", "BlockDecls", "BlockVarDecl", "BinaryTest", "EXPLICITLY"
    };
    public static final int FUNCTION=54;
    public static final int APOS=234;
    public static final int STAR=206;
    public static final int LSQUARE=198;
    public static final int L_AnyChar=252;
    public static final int NON=182;
    public static final int PER_MILLE=130;
    public static final int MOD=72;
    public static final int CONST=171;
    public static final int PATTERN_SEPARATOR=128;
    public static final int VersionDeclEncoding=258;
    public static final int DirAttributeList=293;
    public static final int VarVariableDecl=282;
    public static final int EXCEPT=49;
    public static final int FOREIGN=174;
    public static final int EOF=-1;
    public static final int AttributeValueChar=304;
    public static final int L_DirPIConstructor=247;
    public static final int PI_END=230;
    public static final int LBRACKET=196;
    public static final int VBAR=224;
    public static final int BaseURIDecl=275;
    public static final int RPAREN=194;
    public static final int SLASH_SLASH=216;
    public static final int IMPORT=60;
    public static final int CDATA_END=15;
    public static final int USING=165;
    public static final int SchemaImport=269;
    public static final int BIND=201;
    public static final int PRECEDING=86;
    public static final int RETURN=90;
    public static final int ELEMENT=42;
    public static final int EQ=47;
    public static final int READ_ONLY=186;
    public static final int CHILD=29;
    public static final int GE=55;
    public static final int STRICT=98;
    public static final int PRESERVE=88;
    public static final int L_AposStringLiteralChar=254;
    public static final int KEY=178;
    public static final int LibraryModule=255;
    public static final int ELSE=43;
    public static final int TYPESWITCH=104;
    public static final int KindTest=299;
    public static final int SEMICOLON=223;
    public static final int APPEND_ONLY=166;
    public static final int S=243;
    public static final int EMPTY_CLOSE_TAG=221;
    public static final int VALUE=154;
    public static final int ParamList=284;
    public static final int Block=306;
    public static final int EMPTY=44;
    public static final int DefaultNamespaceDecls=262;
    public static final int GROUP=119;
    public static final int INTERSECT=64;
    public static final int BlockDecls=307;
    public static final int ReturnType=285;
    public static final int Setter=265;
    public static final int SCHEMA_ELEMENT=94;
    public static final int NO_PRESERVE=77;
    public static final int CONSTANT=157;
    public static final int GT=57;
    public static final int MAINTAINED=179;
    public static final int FunctionDecl=283;
    public static final int END=118;
    public static final int VersionDeclVersion=259;
    public static final int CONSTRAINT=170;
    public static final int L_QuotAttrContentChar=4;
    public static final int NAN=124;
    public static final int RENAME=149;
    public static final int EQUALITY=172;
    public static final int MODIFY=147;
    public static final int VarDefaultValue=280;
    public static final int OPTION=80;
    public static final int BOUNDARY_SPACE=24;
    public static final int ONLY=126;
    public static final int OrderedDecls=276;
    public static final int VERSION=109;
    public static final int SATISFIES=91;
    public static final int IDIV=58;
    public static final int L_DirCommentConstructor=246;
    public static final int ASCENDING=20;
    public static final int LPAREN=193;
    public static final int UPDATING=153;
    public static final int AT=21;
    public static final int AS=19;
    public static final int EMPTY_SEQUENCE=45;
    public static final int PARENT=85;
    public static final int CONSTRUCTION=32;
    public static final int SLASH=215;
    public static final int THEN=101;
    public static final int TypeDeclaration=287;
    public static final int DOCUMENT=40;
    public static final int COLLATION=30;
    public static final int REPLACE=150;
    public static final int MINUS_SIGN=122;
    public static final int PREVIOUS=131;
    public static final int MANUALLY=180;
    public static final int ANCESTOR=16;
    public static final int NODES=148;
    public static final int SequenceType=297;
    public static final int PLUS=207;
    public static final int DefaultElementNamespace=272;
    public static final int NamespaceName=271;
    public static final int CASTABLE=28;
    public static final int DOT_DOT=218;
    public static final int PRAGMA_START=225;
    public static final int GREATEREQ=212;
    public static final int OUTER=127;
    public static final int BlockVarDecl=308;
    public static final int BY=25;
    public static final int L_DoubleLiteral=250;
    public static final int NCNameChar=237;
    public static final int QName=305;
    public static final int ITEM=66;
    public static final int TO=102;
    public static final int ESCAPE_RBRACKET=11;
    public static final int L_DecimalLiteral=249;
    public static final int INHERIT=62;
    public static final int QUOT=235;
    public static final int ANCESTOR_OR_SELF=17;
    public static final int SU=244;
    public static final int SET=161;
    public static final int COLON_COLON=220;
    public static final int MINUS=208;
    public static final int TEXT=100;
    public static final int Imports=268;
    public static final int MODULE=73;
    public static final int NamespaceDecl=267;
    public static final int ORDERED=83;
    public static final int ESCAPE_LBRACKET=10;
    public static final int NAMESPACE_NODE=123;
    public static final int UNION=105;
    public static final int SCHEMA_ATTRIBUTE=93;
    public static final int StringLiteral=302;
    public static final int COLON=219;
    public static final int FOLLOWING_SIBLING=52;
    public static final int APOS_ER=191;
    public static final int SCHEMA=92;
    public static final int WHEN=136;
    public static final int INSTANCE=63;
    public static final int VALIDATE=107;
    public static final int INFINITY=121;
    public static final int BLOCK=156;
    public static final int DECLARE=34;
    public static final int START=133;
    public static final int MainModule=256;
    public static final int DIV=39;
    public static final int DESCENDING=38;
    public static final int SEQUENTIAL=160;
    public static final int SELF=95;
    public static final int MUTABLE=181;
    public static final int FIRST=143;
    public static final int CAST=27;
    public static final int XML_COMMENT_END=228;
    public static final int EXTERNAL=50;
    public static final int LT=71;
    public static final int WHILE=163;
    public static final int CASE=26;
    public static final int ENCODING=46;
    public static final int COUNT=114;
    public static final int AtomicType=301;
    public static final int DOCUMENT_NODE=41;
    public static final int NOTEQUAL=202;
    public static final int ModuleDecl=260;
    public static final int L_NCName=238;
    public static final int L_Comment=251;
    public static final int GREATER=210;
    public static final int GREATER_GREATER=214;
    public static final int QUOT_ER=192;
    public static final int INSERT=144;
    public static final int XML_COMMENT_START=227;
    public static final int UnaryExpr=291;
    public static final int Digits=242;
    public static final int RETURNING=159;
    public static final int L_Pragma=245;
    public static final int QUEUE=184;
    public static final int ZERO_DIGIT=138;
    public static final int VarValue=279;
    public static final int LAST=146;
    public static final int COMMENT=31;
    public static final int L_QuotStringLiteralChar=253;
    public static final int PRAGMA_END=226;
    public static final int INTO=145;
    public static final int REVALIDATION=151;
    public static final int NE=75;
    public static final int EXIT=158;
    public static final int NO_INHERIT=76;
    public static final int UNIQUE=187;
    public static final int CHARREF_HEX=233;
    public static final int DirElemConstructor=292;
    public static final int NODE=78;
    public static final int L_ElementContentChar=6;
    public static final int EmptySequenceTest=298;
    public static final int ModuleImport=274;
    public static final int CHARREF_DEC=232;
    public static final int PRIVATE=189;
    public static final int DECIMAL_FORMAT=115;
    public static final int GREATEST=56;
    public static final int EVERY=48;
    public static final int ON=183;
    public static final int PROCESSING_INSTRUCTION=89;
    public static final int DELETE=142;
    public static final int OF=79;
    public static final int TRY=134;
    public static final int NAMESPACE=74;
    public static final int SKIP=152;
    public static final int VARIABLE=108;
    public static final int Setters=264;
    public static final int EVAL=164;
    public static final int DESCENDANT_OR_SELF=37;
    public static final int BASE_URI=23;
    public static final int CDATA_START=14;
    public static final int OR=81;
    public static final int DirAttributeValue=294;
    public static final int CHECK=168;
    public static final int FOREACH=173;
    public static final int CATCH=112;
    public static final int FROM=175;
    public static final int PRECEDING_SIBLING=87;
    public static final int Letter=239;
    public static final int SIMPLE=162;
    public static final int ESCAPE_APOS=12;
    public static final int CommonContent=296;
    public static final int DOLLAR=195;
    public static final int EXPLICITLY=310;
    public static final int WHERE=110;
    public static final int LAX=67;
    public static final int ORDER=82;
    public static final int AMP=203;
    public static final int DefaultNamespaceDecl=263;
    public static final int ATTRIBUTE=22;
    public static final int ESCAPE_QUOT=13;
    public static final int SchemaPrefix=270;
    public static final int FOR=53;
    public static final int SMALLER_SMALLER=213;
    public static final int VarDecl=277;
    public static final int AND=18;
    public static final int FOLLOWING=51;
    public static final int SMALLER=209;
    public static final int ItemTest=300;
    public static final int DECIMAL_SEPARATOR=116;
    public static final int L_CharRef=9;
    public static final int CONTEXT=113;
    public static final int IF=59;
    public static final int ATTR_SIGN=231;
    public static final int INDEX=176;
    public static final int Param=288;
    public static final int IN=61;
    public static final int COPY_NAMESPACES=33;
    public static final int OptionDecl=286;
    public static final int COMMA=204;
    public static final int IS=65;
    public static final int VarType=278;
    public static final int COPY=141;
    public static final int SOME=96;
    public static final int EQUAL=200;
    public static final int BinaryTest=309;
    public static final int L_CDataSection=7;
    public static final int L_PredefinedEntityRef=8;
    public static final int VarConstantDecl=281;
    public static final int NEXT=125;
    public static final int STRIP=99;
    public static final int COLLECTION=169;
    public static final int DIGIT=117;
    public static final int RBRACKET=197;
    public static final int Prolog=261;
    public static final int DOT=217;
    public static final int INTEGRITY=177;
    public static final int SLIDING=132;
    public static final int STABLE=97;
    public static final int AUTOMATICALLY=167;
    public static final int WITH=155;
    public static final int NCNameStartChar=236;
    public static final int PERCENT=129;
    public static final int XQUERY=111;
    public static final int L_IntegerLiteral=248;
    public static final int QueryBody=290;
    public static final int DirElemContent=295;
    public static final int DEFAULT=35;
    public static final int DESCENDANT=36;
    public static final int RANGE=185;
    public static final int TUMBLING=135;
    public static final int BEFORE=140;
    public static final int CLOSE_TAG=222;
    public static final int PI_START=229;
    public static final int AFTER=139;
    public static final int RSQUARE=199;
    public static final int HexLetter=240;
    public static final int Digit=241;
    public static final int GROUPING_SEPARATOR=120;
    public static final int UNORDERED=106;
    public static final int ElementContentChar=303;
    public static final int L_AposAttrContentChar=5;
    public static final int QUESTION=205;
    public static final int ORDERING=84;
    public static final int AtHints=273;
    public static final int AMP_ER=190;
    public static final int NamespaceDecls=266;
    public static final int LEAST=69;
    public static final int WINDOW=137;
    public static final int SMALLEREQ=211;
    public static final int BINARY=188;
    public static final int VersionDecl=257;
    public static final int TREAT=103;
    public static final int LE=68;
    public static final int LET=70;
    public static final int EnclosedExpr=289;

    // delegates
    // delegators


        public XQueryParser(TokenStream input) {
            this(input, new RecognizerSharedState());
        }
        public XQueryParser(TokenStream input, RecognizerSharedState state) {
            super(input, state);
             
        }
        
    protected TreeAdaptor adaptor = new CommonTreeAdaptor();

    public void setTreeAdaptor(TreeAdaptor adaptor) {
        this.adaptor = adaptor;
    }
    public TreeAdaptor getTreeAdaptor() {
        return adaptor;
    }

    public String[] getTokenNames() { return XQueryParser.tokenNames; }
    public String getGrammarFileName() { return "XQueryParser.g"; }


    // dummy list for warning elimination
    List<Stack<Object>> dummy1 = new ArrayList<Stack<Object>>();
    Map<Object, Object> dummy2 = new HashMap<Object, Object>();


    public static class p_Module_return extends ParserRuleReturnScope {
        XQDTCommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "p_Module"
    // XQueryParser.g:128:1: p_Module : (vd= p_VersionDecl )? (lm= p_LibraryModule[$vd.tree] -> | mm= p_MainModule[$vd.tree] ->) EOF ;
    public final XQueryParser.p_Module_return p_Module() throws RecognitionException {
        XQueryParser.p_Module_return retval = new XQueryParser.p_Module_return();
        retval.start = input.LT(1);

        XQDTCommonTree root_0 = null;

        CommonToken EOF1=null;
        XQueryParser.p_VersionDecl_return vd = null;

        XQueryParser.p_LibraryModule_return lm = null;

        XQueryParser.p_MainModule_return mm = null;


        XQDTCommonTree EOF1_tree=null;
        RewriteRuleTokenStream stream_EOF=new RewriteRuleTokenStream(adaptor,"token EOF");
        RewriteRuleSubtreeStream stream_p_VersionDecl=new RewriteRuleSubtreeStream(adaptor,"rule p_VersionDecl");
        RewriteRuleSubtreeStream stream_p_LibraryModule=new RewriteRuleSubtreeStream(adaptor,"rule p_LibraryModule");
        RewriteRuleSubtreeStream stream_p_MainModule=new RewriteRuleSubtreeStream(adaptor,"rule p_MainModule");
        try {
            // XQueryParser.g:129:9: ( (vd= p_VersionDecl )? (lm= p_LibraryModule[$vd.tree] -> | mm= p_MainModule[$vd.tree] ->) EOF )
            // XQueryParser.g:129:11: (vd= p_VersionDecl )? (lm= p_LibraryModule[$vd.tree] -> | mm= p_MainModule[$vd.tree] ->) EOF
            {
            // XQueryParser.g:129:13: (vd= p_VersionDecl )?
            int alt1=2;
            int LA1_0 = input.LA(1);

            if ( (LA1_0==XQUERY) ) {
                int LA1_1 = input.LA(2);

                if ( (LA1_1==ENCODING||LA1_1==VERSION) ) {
                    alt1=1;
                }
            }
            switch (alt1) {
                case 1 :
                    // XQueryParser.g:129:13: vd= p_VersionDecl
                    {
                    pushFollow(FOLLOW_p_VersionDecl_in_p_Module538);
                    vd=p_VersionDecl();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_p_VersionDecl.add(vd.getTree());

                    }
                    break;

            }

            // XQueryParser.g:130:13: (lm= p_LibraryModule[$vd.tree] -> | mm= p_MainModule[$vd.tree] ->)
            int alt2=2;
            int LA2_0 = input.LA(1);

            if ( (LA2_0==MODULE) ) {
                int LA2_1 = input.LA(2);

                if ( (LA2_1==NAMESPACE) ) {
                    alt2=1;
                }
                else if ( (LA2_1==EOF||LA2_1==AND||(LA2_1>=CAST && LA2_1<=CASTABLE)||LA2_1==DIV||LA2_1==EQ||LA2_1==EXCEPT||LA2_1==GE||(LA2_1>=GT && LA2_1<=IDIV)||(LA2_1>=INSTANCE && LA2_1<=IS)||LA2_1==LE||(LA2_1>=LT && LA2_1<=MOD)||LA2_1==NE||LA2_1==OR||(LA2_1>=TO && LA2_1<=TREAT)||LA2_1==UNION||LA2_1==LPAREN||LA2_1==LSQUARE||LA2_1==EQUAL||LA2_1==NOTEQUAL||LA2_1==COMMA||(LA2_1>=STAR && LA2_1<=SLASH_SLASH)||LA2_1==COLON||(LA2_1>=SEMICOLON && LA2_1<=VBAR)) ) {
                    alt2=2;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 2, 1, input);

                    throw nvae;
                }
            }
            else if ( ((LA2_0>=ANCESTOR && LA2_0<=MOD)||(LA2_0>=NAMESPACE && LA2_0<=EXIT)||(LA2_0>=SEQUENTIAL && LA2_0<=MAINTAINED)||(LA2_0>=MUTABLE && LA2_0<=LPAREN)||LA2_0==DOLLAR||(LA2_0>=STAR && LA2_0<=SMALLER)||(LA2_0>=SLASH && LA2_0<=DOT_DOT)||LA2_0==ATTR_SIGN||(LA2_0>=APOS && LA2_0<=QUOT)||LA2_0==L_NCName||(LA2_0>=L_Pragma && LA2_0<=L_DoubleLiteral)||LA2_0==EXPLICITLY) ) {
                alt2=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 2, 0, input);

                throw nvae;
            }
            switch (alt2) {
                case 1 :
                    // XQueryParser.g:131:17: lm= p_LibraryModule[$vd.tree]
                    {
                    pushFollow(FOLLOW_p_LibraryModule_in_p_Module573);
                    lm=p_LibraryModule((vd!=null?((XQDTCommonTree)vd.tree):null));

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_p_LibraryModule.add(lm.getTree());


                    // AST REWRITE
                    // elements: 
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (XQDTCommonTree)adaptor.nil();
                    // 131:49: ->
                    {
                        adaptor.addChild(root_0, (lm!=null?((XQDTCommonTree)lm.tree):null));

                    }

                    retval.tree = root_0;}
                    }
                    break;
                case 2 :
                    // XQueryParser.g:132:15: mm= p_MainModule[$vd.tree]
                    {
                    pushFollow(FOLLOW_p_MainModule_in_p_Module599);
                    mm=p_MainModule((vd!=null?((XQDTCommonTree)vd.tree):null));

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_p_MainModule.add(mm.getTree());


                    // AST REWRITE
                    // elements: 
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (XQDTCommonTree)adaptor.nil();
                    // 132:49: ->
                    {
                        adaptor.addChild(root_0, (mm!=null?((XQDTCommonTree)mm.tree):null));

                    }

                    retval.tree = root_0;}
                    }
                    break;

            }

            EOF1=(CommonToken)match(input,EOF,FOLLOW_EOF_in_p_Module628); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_EOF.add(EOF1);


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (XQDTCommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (XQDTCommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "p_Module"

    public static class p_VersionDecl_return extends ParserRuleReturnScope {
        XQDTCommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "p_VersionDecl"
    // XQueryParser.g:137:1: p_VersionDecl : k+= XQUERY ( (k+= ENCODING enc= p_StringLiteral ) | (k+= VERSION ver= p_StringLiteral (k+= ENCODING enc= p_StringLiteral )? ) ) SEMICOLON -> ^( VersionDecl ^( VersionDeclVersion ( $ver)? ) ^( VersionDeclEncoding ( $enc)? ) ) ;
    public final XQueryParser.p_VersionDecl_return p_VersionDecl() throws RecognitionException {
        XQueryParser.p_VersionDecl_return retval = new XQueryParser.p_VersionDecl_return();
        retval.start = input.LT(1);

        XQDTCommonTree root_0 = null;

        CommonToken SEMICOLON2=null;
        CommonToken k=null;
        List list_k=null;
        XQueryParser.p_StringLiteral_return enc = null;

        XQueryParser.p_StringLiteral_return ver = null;


        XQDTCommonTree SEMICOLON2_tree=null;
        XQDTCommonTree k_tree=null;
        RewriteRuleTokenStream stream_ENCODING=new RewriteRuleTokenStream(adaptor,"token ENCODING");
        RewriteRuleTokenStream stream_VERSION=new RewriteRuleTokenStream(adaptor,"token VERSION");
        RewriteRuleTokenStream stream_SEMICOLON=new RewriteRuleTokenStream(adaptor,"token SEMICOLON");
        RewriteRuleTokenStream stream_XQUERY=new RewriteRuleTokenStream(adaptor,"token XQUERY");
        RewriteRuleSubtreeStream stream_p_StringLiteral=new RewriteRuleSubtreeStream(adaptor,"rule p_StringLiteral");
        try {
            // XQueryParser.g:138:9: (k+= XQUERY ( (k+= ENCODING enc= p_StringLiteral ) | (k+= VERSION ver= p_StringLiteral (k+= ENCODING enc= p_StringLiteral )? ) ) SEMICOLON -> ^( VersionDecl ^( VersionDeclVersion ( $ver)? ) ^( VersionDeclEncoding ( $enc)? ) ) )
            // XQueryParser.g:138:11: k+= XQUERY ( (k+= ENCODING enc= p_StringLiteral ) | (k+= VERSION ver= p_StringLiteral (k+= ENCODING enc= p_StringLiteral )? ) ) SEMICOLON
            {
            k=(CommonToken)match(input,XQUERY,FOLLOW_XQUERY_in_p_VersionDecl656); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_XQUERY.add(k);

            if (list_k==null) list_k=new ArrayList();
            list_k.add(k);

            // XQueryParser.g:138:21: ( (k+= ENCODING enc= p_StringLiteral ) | (k+= VERSION ver= p_StringLiteral (k+= ENCODING enc= p_StringLiteral )? ) )
            int alt4=2;
            int LA4_0 = input.LA(1);

            if ( (LA4_0==ENCODING) ) {
                alt4=1;
            }
            else if ( (LA4_0==VERSION) ) {
                alt4=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 4, 0, input);

                throw nvae;
            }
            switch (alt4) {
                case 1 :
                    // XQueryParser.g:138:22: (k+= ENCODING enc= p_StringLiteral )
                    {
                    // XQueryParser.g:138:22: (k+= ENCODING enc= p_StringLiteral )
                    // XQueryParser.g:138:23: k+= ENCODING enc= p_StringLiteral
                    {
                    k=(CommonToken)match(input,ENCODING,FOLLOW_ENCODING_in_p_VersionDecl662); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_ENCODING.add(k);

                    if (list_k==null) list_k=new ArrayList();
                    list_k.add(k);

                    pushFollow(FOLLOW_p_StringLiteral_in_p_VersionDecl666);
                    enc=p_StringLiteral();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_p_StringLiteral.add(enc.getTree());

                    }


                    }
                    break;
                case 2 :
                    // XQueryParser.g:139:13: (k+= VERSION ver= p_StringLiteral (k+= ENCODING enc= p_StringLiteral )? )
                    {
                    // XQueryParser.g:139:13: (k+= VERSION ver= p_StringLiteral (k+= ENCODING enc= p_StringLiteral )? )
                    // XQueryParser.g:139:14: k+= VERSION ver= p_StringLiteral (k+= ENCODING enc= p_StringLiteral )?
                    {
                    k=(CommonToken)match(input,VERSION,FOLLOW_VERSION_in_p_VersionDecl687); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_VERSION.add(k);

                    if (list_k==null) list_k=new ArrayList();
                    list_k.add(k);

                    pushFollow(FOLLOW_p_StringLiteral_in_p_VersionDecl691);
                    ver=p_StringLiteral();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_p_StringLiteral.add(ver.getTree());
                    if ( state.backtracking==0 ) {
                      setLanguageVersion(((XQDTCommonTree)ver.getTree()).getChild(0).getText());
                    }
                    // XQueryParser.g:139:122: (k+= ENCODING enc= p_StringLiteral )?
                    int alt3=2;
                    int LA3_0 = input.LA(1);

                    if ( (LA3_0==ENCODING) ) {
                        alt3=1;
                    }
                    switch (alt3) {
                        case 1 :
                            // XQueryParser.g:139:123: k+= ENCODING enc= p_StringLiteral
                            {
                            k=(CommonToken)match(input,ENCODING,FOLLOW_ENCODING_in_p_VersionDecl698); if (state.failed) return retval; 
                            if ( state.backtracking==0 ) stream_ENCODING.add(k);

                            if (list_k==null) list_k=new ArrayList();
                            list_k.add(k);

                            pushFollow(FOLLOW_p_StringLiteral_in_p_VersionDecl702);
                            enc=p_StringLiteral();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_p_StringLiteral.add(enc.getTree());

                            }
                            break;

                    }


                    }


                    }
                    break;

            }

            SEMICOLON2=(CommonToken)match(input,SEMICOLON,FOLLOW_SEMICOLON_in_p_VersionDecl708); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_SEMICOLON.add(SEMICOLON2);

            if ( state.backtracking==0 ) {
              ak(list_k);
            }


            // AST REWRITE
            // elements: ver, enc
            // token labels: 
            // rule labels: retval, ver, enc
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
            RewriteRuleSubtreeStream stream_ver=new RewriteRuleSubtreeStream(adaptor,"rule ver",ver!=null?ver.tree:null);
            RewriteRuleSubtreeStream stream_enc=new RewriteRuleSubtreeStream(adaptor,"rule enc",enc!=null?enc.tree:null);

            root_0 = (XQDTCommonTree)adaptor.nil();
            // 140:17: -> ^( VersionDecl ^( VersionDeclVersion ( $ver)? ) ^( VersionDeclEncoding ( $enc)? ) )
            {
                // XQueryParser.g:140:20: ^( VersionDecl ^( VersionDeclVersion ( $ver)? ) ^( VersionDeclEncoding ( $enc)? ) )
                {
                XQDTCommonTree root_1 = (XQDTCommonTree)adaptor.nil();
                root_1 = (XQDTCommonTree)adaptor.becomeRoot((XQDTCommonTree)adaptor.create(VersionDecl, "VersionDecl"), root_1);

                // XQueryParser.g:140:34: ^( VersionDeclVersion ( $ver)? )
                {
                XQDTCommonTree root_2 = (XQDTCommonTree)adaptor.nil();
                root_2 = (XQDTCommonTree)adaptor.becomeRoot((XQDTCommonTree)adaptor.create(VersionDeclVersion, "VersionDeclVersion"), root_2);

                // XQueryParser.g:140:55: ( $ver)?
                if ( stream_ver.hasNext() ) {
                    adaptor.addChild(root_2, stream_ver.nextTree());

                }
                stream_ver.reset();

                adaptor.addChild(root_1, root_2);
                }
                // XQueryParser.g:140:62: ^( VersionDeclEncoding ( $enc)? )
                {
                XQDTCommonTree root_2 = (XQDTCommonTree)adaptor.nil();
                root_2 = (XQDTCommonTree)adaptor.becomeRoot((XQDTCommonTree)adaptor.create(VersionDeclEncoding, "VersionDeclEncoding"), root_2);

                // XQueryParser.g:140:84: ( $enc)?
                if ( stream_enc.hasNext() ) {
                    adaptor.addChild(root_2, stream_enc.nextTree());

                }
                stream_enc.reset();

                adaptor.addChild(root_1, root_2);
                }

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (XQDTCommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (XQDTCommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "p_VersionDecl"

    public static class p_MainModule_return extends ParserRuleReturnScope {
        XQDTCommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "p_MainModule"
    // XQueryParser.g:144:1: p_MainModule[CommonTree vd] : pm_Prolog p_QueryBody -> ^( MainModule pm_Prolog p_QueryBody ) ;
    public final XQueryParser.p_MainModule_return p_MainModule(CommonTree vd) throws RecognitionException {
        XQueryParser.p_MainModule_return retval = new XQueryParser.p_MainModule_return();
        retval.start = input.LT(1);

        XQDTCommonTree root_0 = null;

        XQueryParser.pm_Prolog_return pm_Prolog3 = null;

        XQueryParser.p_QueryBody_return p_QueryBody4 = null;


        RewriteRuleSubtreeStream stream_p_QueryBody=new RewriteRuleSubtreeStream(adaptor,"rule p_QueryBody");
        RewriteRuleSubtreeStream stream_pm_Prolog=new RewriteRuleSubtreeStream(adaptor,"rule pm_Prolog");
        try {
            // XQueryParser.g:145:9: ( pm_Prolog p_QueryBody -> ^( MainModule pm_Prolog p_QueryBody ) )
            // XQueryParser.g:145:11: pm_Prolog p_QueryBody
            {
            pushFollow(FOLLOW_pm_Prolog_in_p_MainModule776);
            pm_Prolog3=pm_Prolog();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_pm_Prolog.add(pm_Prolog3.getTree());
            pushFollow(FOLLOW_p_QueryBody_in_p_MainModule778);
            p_QueryBody4=p_QueryBody();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_p_QueryBody.add(p_QueryBody4.getTree());


            // AST REWRITE
            // elements: p_QueryBody, pm_Prolog
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (XQDTCommonTree)adaptor.nil();
            // 146:17: -> ^( MainModule pm_Prolog p_QueryBody )
            {
                // XQueryParser.g:146:20: ^( MainModule pm_Prolog p_QueryBody )
                {
                XQDTCommonTree root_1 = (XQDTCommonTree)adaptor.nil();
                root_1 = (XQDTCommonTree)adaptor.becomeRoot((XQDTCommonTree)adaptor.create(MainModule, "MainModule"), root_1);

                adaptor.addChild(root_1, vd);
                adaptor.addChild(root_1, stream_pm_Prolog.nextTree());
                adaptor.addChild(root_1, stream_p_QueryBody.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (XQDTCommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (XQDTCommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "p_MainModule"

    public static class p_LibraryModule_return extends ParserRuleReturnScope {
        XQDTCommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "p_LibraryModule"
    // XQueryParser.g:150:1: p_LibraryModule[CommonTree vd] : p_ModuleDecl pm_Prolog -> ^( LibraryModule p_ModuleDecl pm_Prolog ) ;
    public final XQueryParser.p_LibraryModule_return p_LibraryModule(CommonTree vd) throws RecognitionException {
        XQueryParser.p_LibraryModule_return retval = new XQueryParser.p_LibraryModule_return();
        retval.start = input.LT(1);

        XQDTCommonTree root_0 = null;

        XQueryParser.p_ModuleDecl_return p_ModuleDecl5 = null;

        XQueryParser.pm_Prolog_return pm_Prolog6 = null;


        RewriteRuleSubtreeStream stream_pm_Prolog=new RewriteRuleSubtreeStream(adaptor,"rule pm_Prolog");
        RewriteRuleSubtreeStream stream_p_ModuleDecl=new RewriteRuleSubtreeStream(adaptor,"rule p_ModuleDecl");
        try {
            // XQueryParser.g:151:9: ( p_ModuleDecl pm_Prolog -> ^( LibraryModule p_ModuleDecl pm_Prolog ) )
            // XQueryParser.g:151:11: p_ModuleDecl pm_Prolog
            {
            pushFollow(FOLLOW_p_ModuleDecl_in_p_LibraryModule834);
            p_ModuleDecl5=p_ModuleDecl();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_p_ModuleDecl.add(p_ModuleDecl5.getTree());
            pushFollow(FOLLOW_pm_Prolog_in_p_LibraryModule836);
            pm_Prolog6=pm_Prolog();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_pm_Prolog.add(pm_Prolog6.getTree());


            // AST REWRITE
            // elements: pm_Prolog, p_ModuleDecl
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (XQDTCommonTree)adaptor.nil();
            // 152:17: -> ^( LibraryModule p_ModuleDecl pm_Prolog )
            {
                // XQueryParser.g:152:20: ^( LibraryModule p_ModuleDecl pm_Prolog )
                {
                XQDTCommonTree root_1 = (XQDTCommonTree)adaptor.nil();
                root_1 = (XQDTCommonTree)adaptor.becomeRoot((XQDTCommonTree)adaptor.create(LibraryModule, "LibraryModule"), root_1);

                adaptor.addChild(root_1, vd);
                adaptor.addChild(root_1, stream_p_ModuleDecl.nextTree());
                adaptor.addChild(root_1, stream_pm_Prolog.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (XQDTCommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (XQDTCommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "p_LibraryModule"

    public static class p_ModuleDecl_return extends ParserRuleReturnScope {
        XQDTCommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "p_ModuleDecl"
    // XQueryParser.g:156:1: p_ModuleDecl : k+= MODULE k+= NAMESPACE p_NCName EQUAL p_StringLiteral SEMICOLON -> ^( ModuleDecl p_NCName p_StringLiteral ) ;
    public final XQueryParser.p_ModuleDecl_return p_ModuleDecl() throws RecognitionException {
        XQueryParser.p_ModuleDecl_return retval = new XQueryParser.p_ModuleDecl_return();
        retval.start = input.LT(1);

        XQDTCommonTree root_0 = null;

        CommonToken EQUAL8=null;
        CommonToken SEMICOLON10=null;
        CommonToken k=null;
        List list_k=null;
        XQueryParser.p_NCName_return p_NCName7 = null;

        XQueryParser.p_StringLiteral_return p_StringLiteral9 = null;


        XQDTCommonTree EQUAL8_tree=null;
        XQDTCommonTree SEMICOLON10_tree=null;
        XQDTCommonTree k_tree=null;
        RewriteRuleTokenStream stream_SEMICOLON=new RewriteRuleTokenStream(adaptor,"token SEMICOLON");
        RewriteRuleTokenStream stream_MODULE=new RewriteRuleTokenStream(adaptor,"token MODULE");
        RewriteRuleTokenStream stream_NAMESPACE=new RewriteRuleTokenStream(adaptor,"token NAMESPACE");
        RewriteRuleTokenStream stream_EQUAL=new RewriteRuleTokenStream(adaptor,"token EQUAL");
        RewriteRuleSubtreeStream stream_p_NCName=new RewriteRuleSubtreeStream(adaptor,"rule p_NCName");
        RewriteRuleSubtreeStream stream_p_StringLiteral=new RewriteRuleSubtreeStream(adaptor,"rule p_StringLiteral");
        try {
            // XQueryParser.g:157:9: (k+= MODULE k+= NAMESPACE p_NCName EQUAL p_StringLiteral SEMICOLON -> ^( ModuleDecl p_NCName p_StringLiteral ) )
            // XQueryParser.g:157:11: k+= MODULE k+= NAMESPACE p_NCName EQUAL p_StringLiteral SEMICOLON
            {
            k=(CommonToken)match(input,MODULE,FOLLOW_MODULE_in_p_ModuleDecl892); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_MODULE.add(k);

            if (list_k==null) list_k=new ArrayList();
            list_k.add(k);

            k=(CommonToken)match(input,NAMESPACE,FOLLOW_NAMESPACE_in_p_ModuleDecl896); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_NAMESPACE.add(k);

            if (list_k==null) list_k=new ArrayList();
            list_k.add(k);

            pushFollow(FOLLOW_p_NCName_in_p_ModuleDecl898);
            p_NCName7=p_NCName();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_p_NCName.add(p_NCName7.getTree());
            EQUAL8=(CommonToken)match(input,EQUAL,FOLLOW_EQUAL_in_p_ModuleDecl900); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_EQUAL.add(EQUAL8);

            pushFollow(FOLLOW_p_StringLiteral_in_p_ModuleDecl902);
            p_StringLiteral9=p_StringLiteral();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_p_StringLiteral.add(p_StringLiteral9.getTree());
            SEMICOLON10=(CommonToken)match(input,SEMICOLON,FOLLOW_SEMICOLON_in_p_ModuleDecl904); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_SEMICOLON.add(SEMICOLON10);

            if ( state.backtracking==0 ) {
              ak(list_k);
            }


            // AST REWRITE
            // elements: p_StringLiteral, p_NCName
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (XQDTCommonTree)adaptor.nil();
            // 158:17: -> ^( ModuleDecl p_NCName p_StringLiteral )
            {
                // XQueryParser.g:158:21: ^( ModuleDecl p_NCName p_StringLiteral )
                {
                XQDTCommonTree root_1 = (XQDTCommonTree)adaptor.nil();
                root_1 = (XQDTCommonTree)adaptor.becomeRoot((XQDTCommonTree)adaptor.create(ModuleDecl, "ModuleDecl"), root_1);

                adaptor.addChild(root_1, stream_p_NCName.nextTree());
                adaptor.addChild(root_1, stream_p_StringLiteral.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (XQDTCommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (XQDTCommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "p_ModuleDecl"

    public static class pm_Prolog_return extends ParserRuleReturnScope {
        XQDTCommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "pm_Prolog"
    // XQueryParser.g:164:1: pm_Prolog : ( (dnd+= pm_DefaultNamespaceDecl | s+= p_Setter | nd+= pm_NamespaceDecl | i+= p_Import ) )* od= pg_OrderedDecl -> ^( Prolog ^( DefaultNamespaceDecls ( $dnd)* ) ^( Setters ( $s)* ) ^( NamespaceDecls ( $nd)* ) ^( Imports ( $i)* ) ^( OrderedDecls ( $od)* ) ) ;
    public final XQueryParser.pm_Prolog_return pm_Prolog() throws RecognitionException {
        XQueryParser.pm_Prolog_return retval = new XQueryParser.pm_Prolog_return();
        retval.start = input.LT(1);

        XQDTCommonTree root_0 = null;

        List list_dnd=null;
        List list_s=null;
        List list_nd=null;
        List list_i=null;
        XQueryParser.pg_OrderedDecl_return od = null;

        XQueryParser.pm_DefaultNamespaceDecl_return dnd = null;
         dnd = null;
        XQueryParser.p_Setter_return s = null;
         s = null;
        XQueryParser.pm_NamespaceDecl_return nd = null;
         nd = null;
        XQueryParser.p_Import_return i = null;
         i = null;
        RewriteRuleSubtreeStream stream_pm_NamespaceDecl=new RewriteRuleSubtreeStream(adaptor,"rule pm_NamespaceDecl");
        RewriteRuleSubtreeStream stream_p_Import=new RewriteRuleSubtreeStream(adaptor,"rule p_Import");
        RewriteRuleSubtreeStream stream_p_Setter=new RewriteRuleSubtreeStream(adaptor,"rule p_Setter");
        RewriteRuleSubtreeStream stream_pm_DefaultNamespaceDecl=new RewriteRuleSubtreeStream(adaptor,"rule pm_DefaultNamespaceDecl");
        RewriteRuleSubtreeStream stream_pg_OrderedDecl=new RewriteRuleSubtreeStream(adaptor,"rule pg_OrderedDecl");
        try {
            // XQueryParser.g:165:9: ( ( (dnd+= pm_DefaultNamespaceDecl | s+= p_Setter | nd+= pm_NamespaceDecl | i+= p_Import ) )* od= pg_OrderedDecl -> ^( Prolog ^( DefaultNamespaceDecls ( $dnd)* ) ^( Setters ( $s)* ) ^( NamespaceDecls ( $nd)* ) ^( Imports ( $i)* ) ^( OrderedDecls ( $od)* ) ) )
            // XQueryParser.g:165:11: ( (dnd+= pm_DefaultNamespaceDecl | s+= p_Setter | nd+= pm_NamespaceDecl | i+= p_Import ) )* od= pg_OrderedDecl
            {
            // XQueryParser.g:165:11: ( (dnd+= pm_DefaultNamespaceDecl | s+= p_Setter | nd+= pm_NamespaceDecl | i+= p_Import ) )*
            loop6:
            do {
                int alt6=2;
                alt6 = dfa6.predict(input);
                switch (alt6) {
            	case 1 :
            	    // XQueryParser.g:165:12: (dnd+= pm_DefaultNamespaceDecl | s+= p_Setter | nd+= pm_NamespaceDecl | i+= p_Import )
            	    {
            	    // XQueryParser.g:165:12: (dnd+= pm_DefaultNamespaceDecl | s+= p_Setter | nd+= pm_NamespaceDecl | i+= p_Import )
            	    int alt5=4;
            	    int LA5_0 = input.LA(1);

            	    if ( (LA5_0==DECLARE) ) {
            	        int LA5_1 = input.LA(2);

            	        if ( (LA5_1==DEFAULT) ) {
            	            int LA5_3 = input.LA(3);

            	            if ( (LA5_3==COLLATION||LA5_3==ORDER) ) {
            	                alt5=2;
            	            }
            	            else if ( (LA5_3==ELEMENT||LA5_3==FUNCTION) ) {
            	                alt5=1;
            	            }
            	            else {
            	                if (state.backtracking>0) {state.failed=true; return retval;}
            	                NoViableAltException nvae =
            	                    new NoViableAltException("", 5, 3, input);

            	                throw nvae;
            	            }
            	        }
            	        else if ( ((LA5_1>=BASE_URI && LA5_1<=BOUNDARY_SPACE)||LA5_1==CONSTRUCTION||LA5_1==ORDERING) ) {
            	            alt5=2;
            	        }
            	        else if ( (LA5_1==REVALIDATION) && ((lc(XQU)))) {
            	            alt5=2;
            	        }
            	        else if ( (LA5_1==COPY_NAMESPACES) ) {
            	            alt5=2;
            	        }
            	        else if ( (LA5_1==NAMESPACE) ) {
            	            alt5=3;
            	        }
            	        else {
            	            if (state.backtracking>0) {state.failed=true; return retval;}
            	            NoViableAltException nvae =
            	                new NoViableAltException("", 5, 1, input);

            	            throw nvae;
            	        }
            	    }
            	    else if ( (LA5_0==IMPORT) ) {
            	        alt5=4;
            	    }
            	    else {
            	        if (state.backtracking>0) {state.failed=true; return retval;}
            	        NoViableAltException nvae =
            	            new NoViableAltException("", 5, 0, input);

            	        throw nvae;
            	    }
            	    switch (alt5) {
            	        case 1 :
            	            // XQueryParser.g:165:13: dnd+= pm_DefaultNamespaceDecl
            	            {
            	            pushFollow(FOLLOW_pm_DefaultNamespaceDecl_in_pm_Prolog965);
            	            dnd=pm_DefaultNamespaceDecl();

            	            state._fsp--;
            	            if (state.failed) return retval;
            	            if ( state.backtracking==0 ) stream_pm_DefaultNamespaceDecl.add(dnd.getTree());
            	            if (list_dnd==null) list_dnd=new ArrayList();
            	            list_dnd.add(dnd.getTree());


            	            }
            	            break;
            	        case 2 :
            	            // XQueryParser.g:165:44: s+= p_Setter
            	            {
            	            pushFollow(FOLLOW_p_Setter_in_pm_Prolog971);
            	            s=p_Setter();

            	            state._fsp--;
            	            if (state.failed) return retval;
            	            if ( state.backtracking==0 ) stream_p_Setter.add(s.getTree());
            	            if (list_s==null) list_s=new ArrayList();
            	            list_s.add(s.getTree());


            	            }
            	            break;
            	        case 3 :
            	            // XQueryParser.g:165:58: nd+= pm_NamespaceDecl
            	            {
            	            pushFollow(FOLLOW_pm_NamespaceDecl_in_pm_Prolog977);
            	            nd=pm_NamespaceDecl();

            	            state._fsp--;
            	            if (state.failed) return retval;
            	            if ( state.backtracking==0 ) stream_pm_NamespaceDecl.add(nd.getTree());
            	            if (list_nd==null) list_nd=new ArrayList();
            	            list_nd.add(nd.getTree());


            	            }
            	            break;
            	        case 4 :
            	            // XQueryParser.g:165:81: i+= p_Import
            	            {
            	            pushFollow(FOLLOW_p_Import_in_pm_Prolog983);
            	            i=p_Import();

            	            state._fsp--;
            	            if (state.failed) return retval;
            	            if ( state.backtracking==0 ) stream_p_Import.add(i.getTree());
            	            if (list_i==null) list_i=new ArrayList();
            	            list_i.add(i.getTree());


            	            }
            	            break;

            	    }


            	    }
            	    break;

            	default :
            	    break loop6;
                }
            } while (true);

            pushFollow(FOLLOW_pg_OrderedDecl_in_pm_Prolog990);
            od=pg_OrderedDecl();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_pg_OrderedDecl.add(od.getTree());


            // AST REWRITE
            // elements: s, od, dnd, i, nd
            // token labels: 
            // rule labels: retval, od
            // token list labels: 
            // rule list labels: s, nd, dnd, i
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
            RewriteRuleSubtreeStream stream_od=new RewriteRuleSubtreeStream(adaptor,"rule od",od!=null?od.tree:null);
            RewriteRuleSubtreeStream stream_s=new RewriteRuleSubtreeStream(adaptor,"token s",list_s);
            RewriteRuleSubtreeStream stream_nd=new RewriteRuleSubtreeStream(adaptor,"token nd",list_nd);
            RewriteRuleSubtreeStream stream_dnd=new RewriteRuleSubtreeStream(adaptor,"token dnd",list_dnd);
            RewriteRuleSubtreeStream stream_i=new RewriteRuleSubtreeStream(adaptor,"token i",list_i);
            root_0 = (XQDTCommonTree)adaptor.nil();
            // 166:17: -> ^( Prolog ^( DefaultNamespaceDecls ( $dnd)* ) ^( Setters ( $s)* ) ^( NamespaceDecls ( $nd)* ) ^( Imports ( $i)* ) ^( OrderedDecls ( $od)* ) )
            {
                // XQueryParser.g:166:21: ^( Prolog ^( DefaultNamespaceDecls ( $dnd)* ) ^( Setters ( $s)* ) ^( NamespaceDecls ( $nd)* ) ^( Imports ( $i)* ) ^( OrderedDecls ( $od)* ) )
                {
                XQDTCommonTree root_1 = (XQDTCommonTree)adaptor.nil();
                root_1 = (XQDTCommonTree)adaptor.becomeRoot((XQDTCommonTree)adaptor.create(Prolog, "Prolog"), root_1);

                // XQueryParser.g:167:33: ^( DefaultNamespaceDecls ( $dnd)* )
                {
                XQDTCommonTree root_2 = (XQDTCommonTree)adaptor.nil();
                root_2 = (XQDTCommonTree)adaptor.becomeRoot((XQDTCommonTree)adaptor.create(DefaultNamespaceDecls, "DefaultNamespaceDecls"), root_2);

                // XQueryParser.g:167:57: ( $dnd)*
                while ( stream_dnd.hasNext() ) {
                    adaptor.addChild(root_2, stream_dnd.nextTree());

                }
                stream_dnd.reset();

                adaptor.addChild(root_1, root_2);
                }
                // XQueryParser.g:168:33: ^( Setters ( $s)* )
                {
                XQDTCommonTree root_2 = (XQDTCommonTree)adaptor.nil();
                root_2 = (XQDTCommonTree)adaptor.becomeRoot((XQDTCommonTree)adaptor.create(Setters, "Setters"), root_2);

                // XQueryParser.g:168:43: ( $s)*
                while ( stream_s.hasNext() ) {
                    adaptor.addChild(root_2, stream_s.nextTree());

                }
                stream_s.reset();

                adaptor.addChild(root_1, root_2);
                }
                // XQueryParser.g:169:33: ^( NamespaceDecls ( $nd)* )
                {
                XQDTCommonTree root_2 = (XQDTCommonTree)adaptor.nil();
                root_2 = (XQDTCommonTree)adaptor.becomeRoot((XQDTCommonTree)adaptor.create(NamespaceDecls, "NamespaceDecls"), root_2);

                // XQueryParser.g:169:50: ( $nd)*
                while ( stream_nd.hasNext() ) {
                    adaptor.addChild(root_2, stream_nd.nextTree());

                }
                stream_nd.reset();

                adaptor.addChild(root_1, root_2);
                }
                // XQueryParser.g:170:33: ^( Imports ( $i)* )
                {
                XQDTCommonTree root_2 = (XQDTCommonTree)adaptor.nil();
                root_2 = (XQDTCommonTree)adaptor.becomeRoot((XQDTCommonTree)adaptor.create(Imports, "Imports"), root_2);

                // XQueryParser.g:170:43: ( $i)*
                while ( stream_i.hasNext() ) {
                    adaptor.addChild(root_2, stream_i.nextTree());

                }
                stream_i.reset();

                adaptor.addChild(root_1, root_2);
                }
                // XQueryParser.g:171:33: ^( OrderedDecls ( $od)* )
                {
                XQDTCommonTree root_2 = (XQDTCommonTree)adaptor.nil();
                root_2 = (XQDTCommonTree)adaptor.becomeRoot((XQDTCommonTree)adaptor.create(OrderedDecls, "OrderedDecls"), root_2);

                // XQueryParser.g:171:48: ( $od)*
                while ( stream_od.hasNext() ) {
                    adaptor.addChild(root_2, stream_od.nextTree());

                }
                stream_od.reset();

                adaptor.addChild(root_1, root_2);
                }

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (XQDTCommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (XQDTCommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "pm_Prolog"

    public static class pg_OrderedDecl_return extends ParserRuleReturnScope {
        XQDTCommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "pg_OrderedDecl"
    // XQueryParser.g:179:1: pg_OrderedDecl : ( pm_VarDecl | pm_ContextItemDecl | pm_FunctionDecl | pm_OptionDecl | {...}? => p_CollectionDecl | {...}? => p_IndexDecl | {...}? => p_ICDecl )* ;
    public final XQueryParser.pg_OrderedDecl_return pg_OrderedDecl() throws RecognitionException {
        XQueryParser.pg_OrderedDecl_return retval = new XQueryParser.pg_OrderedDecl_return();
        retval.start = input.LT(1);

        XQDTCommonTree root_0 = null;

        XQueryParser.pm_VarDecl_return pm_VarDecl11 = null;

        XQueryParser.pm_ContextItemDecl_return pm_ContextItemDecl12 = null;

        XQueryParser.pm_FunctionDecl_return pm_FunctionDecl13 = null;

        XQueryParser.pm_OptionDecl_return pm_OptionDecl14 = null;

        XQueryParser.p_CollectionDecl_return p_CollectionDecl15 = null;

        XQueryParser.p_IndexDecl_return p_IndexDecl16 = null;

        XQueryParser.p_ICDecl_return p_ICDecl17 = null;



        try {
            // XQueryParser.g:180:9: ( ( pm_VarDecl | pm_ContextItemDecl | pm_FunctionDecl | pm_OptionDecl | {...}? => p_CollectionDecl | {...}? => p_IndexDecl | {...}? => p_ICDecl )* )
            // XQueryParser.g:180:11: ( pm_VarDecl | pm_ContextItemDecl | pm_FunctionDecl | pm_OptionDecl | {...}? => p_CollectionDecl | {...}? => p_IndexDecl | {...}? => p_ICDecl )*
            {
            root_0 = (XQDTCommonTree)adaptor.nil();

            // XQueryParser.g:180:11: ( pm_VarDecl | pm_ContextItemDecl | pm_FunctionDecl | pm_OptionDecl | {...}? => p_CollectionDecl | {...}? => p_IndexDecl | {...}? => p_ICDecl )*
            loop7:
            do {
                int alt7=8;
                alt7 = dfa7.predict(input);
                switch (alt7) {
            	case 1 :
            	    // XQueryParser.g:180:12: pm_VarDecl
            	    {
            	    pushFollow(FOLLOW_pm_VarDecl_in_pg_OrderedDecl1268);
            	    pm_VarDecl11=pm_VarDecl();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, pm_VarDecl11.getTree());

            	    }
            	    break;
            	case 2 :
            	    // XQueryParser.g:180:25: pm_ContextItemDecl
            	    {
            	    pushFollow(FOLLOW_pm_ContextItemDecl_in_pg_OrderedDecl1272);
            	    pm_ContextItemDecl12=pm_ContextItemDecl();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, pm_ContextItemDecl12.getTree());

            	    }
            	    break;
            	case 3 :
            	    // XQueryParser.g:180:46: pm_FunctionDecl
            	    {
            	    pushFollow(FOLLOW_pm_FunctionDecl_in_pg_OrderedDecl1276);
            	    pm_FunctionDecl13=pm_FunctionDecl();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, pm_FunctionDecl13.getTree());

            	    }
            	    break;
            	case 4 :
            	    // XQueryParser.g:180:64: pm_OptionDecl
            	    {
            	    pushFollow(FOLLOW_pm_OptionDecl_in_pg_OrderedDecl1280);
            	    pm_OptionDecl14=pm_OptionDecl();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, pm_OptionDecl14.getTree());

            	    }
            	    break;
            	case 5 :
            	    // XQueryParser.g:181:11: {...}? => p_CollectionDecl
            	    {
            	    if ( !((lc(ZORBA))) ) {
            	        if (state.backtracking>0) {state.failed=true; return retval;}
            	        throw new FailedPredicateException(input, "pg_OrderedDecl", "lc(ZORBA)");
            	    }
            	    pushFollow(FOLLOW_p_CollectionDecl_in_pg_OrderedDecl1295);
            	    p_CollectionDecl15=p_CollectionDecl();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, p_CollectionDecl15.getTree());

            	    }
            	    break;
            	case 6 :
            	    // XQueryParser.g:182:11: {...}? => p_IndexDecl
            	    {
            	    if ( !((lc(ZORBA))) ) {
            	        if (state.backtracking>0) {state.failed=true; return retval;}
            	        throw new FailedPredicateException(input, "pg_OrderedDecl", "lc(ZORBA)");
            	    }
            	    pushFollow(FOLLOW_p_IndexDecl_in_pg_OrderedDecl1310);
            	    p_IndexDecl16=p_IndexDecl();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, p_IndexDecl16.getTree());

            	    }
            	    break;
            	case 7 :
            	    // XQueryParser.g:183:11: {...}? => p_ICDecl
            	    {
            	    if ( !((lc(ZORBA))) ) {
            	        if (state.backtracking>0) {state.failed=true; return retval;}
            	        throw new FailedPredicateException(input, "pg_OrderedDecl", "lc(ZORBA)");
            	    }
            	    pushFollow(FOLLOW_p_ICDecl_in_pg_OrderedDecl1325);
            	    p_ICDecl17=p_ICDecl();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, p_ICDecl17.getTree());

            	    }
            	    break;

            	default :
            	    break loop7;
                }
            } while (true);


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (XQDTCommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (XQDTCommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "pg_OrderedDecl"

    public static class p_Setter_return extends ParserRuleReturnScope {
        XQDTCommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "p_Setter"
    // XQueryParser.g:188:1: p_Setter : ( pm_BoundarySpaceDecl | pm_DefaultCollationDecl | pm_BaseURIDecl | pm_ConstructionDecl | pm_OrderingModeDecl | pm_EmptyOrderDecl | {...}? => pm_RevalidationDecl | pm_CopyNamespacesDecl );
    public final XQueryParser.p_Setter_return p_Setter() throws RecognitionException {
        XQueryParser.p_Setter_return retval = new XQueryParser.p_Setter_return();
        retval.start = input.LT(1);

        XQDTCommonTree root_0 = null;

        XQueryParser.pm_BoundarySpaceDecl_return pm_BoundarySpaceDecl18 = null;

        XQueryParser.pm_DefaultCollationDecl_return pm_DefaultCollationDecl19 = null;

        XQueryParser.pm_BaseURIDecl_return pm_BaseURIDecl20 = null;

        XQueryParser.pm_ConstructionDecl_return pm_ConstructionDecl21 = null;

        XQueryParser.pm_OrderingModeDecl_return pm_OrderingModeDecl22 = null;

        XQueryParser.pm_EmptyOrderDecl_return pm_EmptyOrderDecl23 = null;

        XQueryParser.pm_RevalidationDecl_return pm_RevalidationDecl24 = null;

        XQueryParser.pm_CopyNamespacesDecl_return pm_CopyNamespacesDecl25 = null;



        try {
            // XQueryParser.g:189:9: ( pm_BoundarySpaceDecl | pm_DefaultCollationDecl | pm_BaseURIDecl | pm_ConstructionDecl | pm_OrderingModeDecl | pm_EmptyOrderDecl | {...}? => pm_RevalidationDecl | pm_CopyNamespacesDecl )
            int alt8=8;
            alt8 = dfa8.predict(input);
            switch (alt8) {
                case 1 :
                    // XQueryParser.g:189:11: pm_BoundarySpaceDecl
                    {
                    root_0 = (XQDTCommonTree)adaptor.nil();

                    pushFollow(FOLLOW_pm_BoundarySpaceDecl_in_p_Setter1354);
                    pm_BoundarySpaceDecl18=pm_BoundarySpaceDecl();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, pm_BoundarySpaceDecl18.getTree());

                    }
                    break;
                case 2 :
                    // XQueryParser.g:190:11: pm_DefaultCollationDecl
                    {
                    root_0 = (XQDTCommonTree)adaptor.nil();

                    pushFollow(FOLLOW_pm_DefaultCollationDecl_in_p_Setter1366);
                    pm_DefaultCollationDecl19=pm_DefaultCollationDecl();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, pm_DefaultCollationDecl19.getTree());

                    }
                    break;
                case 3 :
                    // XQueryParser.g:191:11: pm_BaseURIDecl
                    {
                    root_0 = (XQDTCommonTree)adaptor.nil();

                    pushFollow(FOLLOW_pm_BaseURIDecl_in_p_Setter1378);
                    pm_BaseURIDecl20=pm_BaseURIDecl();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, pm_BaseURIDecl20.getTree());

                    }
                    break;
                case 4 :
                    // XQueryParser.g:192:11: pm_ConstructionDecl
                    {
                    root_0 = (XQDTCommonTree)adaptor.nil();

                    pushFollow(FOLLOW_pm_ConstructionDecl_in_p_Setter1390);
                    pm_ConstructionDecl21=pm_ConstructionDecl();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, pm_ConstructionDecl21.getTree());

                    }
                    break;
                case 5 :
                    // XQueryParser.g:193:11: pm_OrderingModeDecl
                    {
                    root_0 = (XQDTCommonTree)adaptor.nil();

                    pushFollow(FOLLOW_pm_OrderingModeDecl_in_p_Setter1402);
                    pm_OrderingModeDecl22=pm_OrderingModeDecl();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, pm_OrderingModeDecl22.getTree());

                    }
                    break;
                case 6 :
                    // XQueryParser.g:194:11: pm_EmptyOrderDecl
                    {
                    root_0 = (XQDTCommonTree)adaptor.nil();

                    pushFollow(FOLLOW_pm_EmptyOrderDecl_in_p_Setter1414);
                    pm_EmptyOrderDecl23=pm_EmptyOrderDecl();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, pm_EmptyOrderDecl23.getTree());

                    }
                    break;
                case 7 :
                    // XQueryParser.g:195:11: {...}? => pm_RevalidationDecl
                    {
                    root_0 = (XQDTCommonTree)adaptor.nil();

                    if ( !((lc(XQU))) ) {
                        if (state.backtracking>0) {state.failed=true; return retval;}
                        throw new FailedPredicateException(input, "p_Setter", "lc(XQU)");
                    }
                    pushFollow(FOLLOW_pm_RevalidationDecl_in_p_Setter1429);
                    pm_RevalidationDecl24=pm_RevalidationDecl();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, pm_RevalidationDecl24.getTree());

                    }
                    break;
                case 8 :
                    // XQueryParser.g:196:11: pm_CopyNamespacesDecl
                    {
                    root_0 = (XQDTCommonTree)adaptor.nil();

                    pushFollow(FOLLOW_pm_CopyNamespacesDecl_in_p_Setter1441);
                    pm_CopyNamespacesDecl25=pm_CopyNamespacesDecl();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, pm_CopyNamespacesDecl25.getTree());

                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (XQDTCommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (XQDTCommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "p_Setter"

    public static class p_Import_return extends ParserRuleReturnScope {
        XQDTCommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "p_Import"
    // XQueryParser.g:200:1: p_Import : ( pm_SchemaImport | pm_ModuleImport );
    public final XQueryParser.p_Import_return p_Import() throws RecognitionException {
        XQueryParser.p_Import_return retval = new XQueryParser.p_Import_return();
        retval.start = input.LT(1);

        XQDTCommonTree root_0 = null;

        XQueryParser.pm_SchemaImport_return pm_SchemaImport26 = null;

        XQueryParser.pm_ModuleImport_return pm_ModuleImport27 = null;



        try {
            // XQueryParser.g:201:9: ( pm_SchemaImport | pm_ModuleImport )
            int alt9=2;
            int LA9_0 = input.LA(1);

            if ( (LA9_0==IMPORT) ) {
                int LA9_1 = input.LA(2);

                if ( (LA9_1==SCHEMA) ) {
                    alt9=1;
                }
                else if ( (LA9_1==MODULE) ) {
                    alt9=2;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 9, 1, input);

                    throw nvae;
                }
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 9, 0, input);

                throw nvae;
            }
            switch (alt9) {
                case 1 :
                    // XQueryParser.g:201:11: pm_SchemaImport
                    {
                    root_0 = (XQDTCommonTree)adaptor.nil();

                    pushFollow(FOLLOW_pm_SchemaImport_in_p_Import1467);
                    pm_SchemaImport26=pm_SchemaImport();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, pm_SchemaImport26.getTree());

                    }
                    break;
                case 2 :
                    // XQueryParser.g:201:29: pm_ModuleImport
                    {
                    root_0 = (XQDTCommonTree)adaptor.nil();

                    pushFollow(FOLLOW_pm_ModuleImport_in_p_Import1471);
                    pm_ModuleImport27=pm_ModuleImport();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, pm_ModuleImport27.getTree());

                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (XQDTCommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (XQDTCommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "p_Import"

    public static class pm_NamespaceDecl_return extends ParserRuleReturnScope {
        XQDTCommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "pm_NamespaceDecl"
    // XQueryParser.g:208:1: pm_NamespaceDecl : k+= DECLARE k+= NAMESPACE nn= p_NCName EQUAL us= p_StringLiteral SEMICOLON -> ^( NamespaceDecl $nn $us) ;
    public final XQueryParser.pm_NamespaceDecl_return pm_NamespaceDecl() throws RecognitionException {
        XQueryParser.pm_NamespaceDecl_return retval = new XQueryParser.pm_NamespaceDecl_return();
        retval.start = input.LT(1);

        XQDTCommonTree root_0 = null;

        CommonToken EQUAL28=null;
        CommonToken SEMICOLON29=null;
        CommonToken k=null;
        List list_k=null;
        XQueryParser.p_NCName_return nn = null;

        XQueryParser.p_StringLiteral_return us = null;


        XQDTCommonTree EQUAL28_tree=null;
        XQDTCommonTree SEMICOLON29_tree=null;
        XQDTCommonTree k_tree=null;
        RewriteRuleTokenStream stream_DECLARE=new RewriteRuleTokenStream(adaptor,"token DECLARE");
        RewriteRuleTokenStream stream_SEMICOLON=new RewriteRuleTokenStream(adaptor,"token SEMICOLON");
        RewriteRuleTokenStream stream_NAMESPACE=new RewriteRuleTokenStream(adaptor,"token NAMESPACE");
        RewriteRuleTokenStream stream_EQUAL=new RewriteRuleTokenStream(adaptor,"token EQUAL");
        RewriteRuleSubtreeStream stream_p_NCName=new RewriteRuleSubtreeStream(adaptor,"rule p_NCName");
        RewriteRuleSubtreeStream stream_p_StringLiteral=new RewriteRuleSubtreeStream(adaptor,"rule p_StringLiteral");
        try {
            // XQueryParser.g:209:9: (k+= DECLARE k+= NAMESPACE nn= p_NCName EQUAL us= p_StringLiteral SEMICOLON -> ^( NamespaceDecl $nn $us) )
            // XQueryParser.g:209:11: k+= DECLARE k+= NAMESPACE nn= p_NCName EQUAL us= p_StringLiteral SEMICOLON
            {
            k=(CommonToken)match(input,DECLARE,FOLLOW_DECLARE_in_pm_NamespaceDecl1502); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_DECLARE.add(k);

            if (list_k==null) list_k=new ArrayList();
            list_k.add(k);

            k=(CommonToken)match(input,NAMESPACE,FOLLOW_NAMESPACE_in_pm_NamespaceDecl1506); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_NAMESPACE.add(k);

            if (list_k==null) list_k=new ArrayList();
            list_k.add(k);

            pushFollow(FOLLOW_p_NCName_in_pm_NamespaceDecl1510);
            nn=p_NCName();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_p_NCName.add(nn.getTree());
            EQUAL28=(CommonToken)match(input,EQUAL,FOLLOW_EQUAL_in_pm_NamespaceDecl1512); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_EQUAL.add(EQUAL28);

            pushFollow(FOLLOW_p_StringLiteral_in_pm_NamespaceDecl1516);
            us=p_StringLiteral();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_p_StringLiteral.add(us.getTree());
            SEMICOLON29=(CommonToken)match(input,SEMICOLON,FOLLOW_SEMICOLON_in_pm_NamespaceDecl1518); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_SEMICOLON.add(SEMICOLON29);

            if ( state.backtracking==0 ) {
              ak(list_k);
            }


            // AST REWRITE
            // elements: nn, us
            // token labels: 
            // rule labels: retval, nn, us
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
            RewriteRuleSubtreeStream stream_nn=new RewriteRuleSubtreeStream(adaptor,"rule nn",nn!=null?nn.tree:null);
            RewriteRuleSubtreeStream stream_us=new RewriteRuleSubtreeStream(adaptor,"rule us",us!=null?us.tree:null);

            root_0 = (XQDTCommonTree)adaptor.nil();
            // 210:17: -> ^( NamespaceDecl $nn $us)
            {
                // XQueryParser.g:210:20: ^( NamespaceDecl $nn $us)
                {
                XQDTCommonTree root_1 = (XQDTCommonTree)adaptor.nil();
                root_1 = (XQDTCommonTree)adaptor.becomeRoot((XQDTCommonTree)adaptor.create(NamespaceDecl, "NamespaceDecl"), root_1);

                adaptor.addChild(root_1, stream_nn.nextTree());
                adaptor.addChild(root_1, stream_us.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (XQDTCommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (XQDTCommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "pm_NamespaceDecl"

    public static class pm_BoundarySpaceDecl_return extends ParserRuleReturnScope {
        XQDTCommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "pm_BoundarySpaceDecl"
    // XQueryParser.g:214:1: pm_BoundarySpaceDecl : k+= DECLARE k+= BOUNDARY_SPACE (k+= PRESERVE | k+= STRIP ) SEMICOLON ;
    public final XQueryParser.pm_BoundarySpaceDecl_return pm_BoundarySpaceDecl() throws RecognitionException {
        XQueryParser.pm_BoundarySpaceDecl_return retval = new XQueryParser.pm_BoundarySpaceDecl_return();
        retval.start = input.LT(1);

        XQDTCommonTree root_0 = null;

        CommonToken SEMICOLON30=null;
        CommonToken k=null;
        List list_k=null;

        XQDTCommonTree SEMICOLON30_tree=null;
        XQDTCommonTree k_tree=null;

        try {
            // XQueryParser.g:215:9: (k+= DECLARE k+= BOUNDARY_SPACE (k+= PRESERVE | k+= STRIP ) SEMICOLON )
            // XQueryParser.g:215:13: k+= DECLARE k+= BOUNDARY_SPACE (k+= PRESERVE | k+= STRIP ) SEMICOLON
            {
            root_0 = (XQDTCommonTree)adaptor.nil();

            k=(CommonToken)match(input,DECLARE,FOLLOW_DECLARE_in_pm_BoundarySpaceDecl1583); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            k_tree = (XQDTCommonTree)adaptor.create(k);
            adaptor.addChild(root_0, k_tree);
            }
            if (list_k==null) list_k=new ArrayList();
            list_k.add(k);

            k=(CommonToken)match(input,BOUNDARY_SPACE,FOLLOW_BOUNDARY_SPACE_in_pm_BoundarySpaceDecl1587); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            k_tree = (XQDTCommonTree)adaptor.create(k);
            adaptor.addChild(root_0, k_tree);
            }
            if (list_k==null) list_k=new ArrayList();
            list_k.add(k);

            // XQueryParser.g:215:42: (k+= PRESERVE | k+= STRIP )
            int alt10=2;
            int LA10_0 = input.LA(1);

            if ( (LA10_0==PRESERVE) ) {
                alt10=1;
            }
            else if ( (LA10_0==STRIP) ) {
                alt10=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 10, 0, input);

                throw nvae;
            }
            switch (alt10) {
                case 1 :
                    // XQueryParser.g:215:43: k+= PRESERVE
                    {
                    k=(CommonToken)match(input,PRESERVE,FOLLOW_PRESERVE_in_pm_BoundarySpaceDecl1592); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    k_tree = (XQDTCommonTree)adaptor.create(k);
                    adaptor.addChild(root_0, k_tree);
                    }
                    if (list_k==null) list_k=new ArrayList();
                    list_k.add(k);


                    }
                    break;
                case 2 :
                    // XQueryParser.g:215:57: k+= STRIP
                    {
                    k=(CommonToken)match(input,STRIP,FOLLOW_STRIP_in_pm_BoundarySpaceDecl1598); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    k_tree = (XQDTCommonTree)adaptor.create(k);
                    adaptor.addChild(root_0, k_tree);
                    }
                    if (list_k==null) list_k=new ArrayList();
                    list_k.add(k);


                    }
                    break;

            }

            SEMICOLON30=(CommonToken)match(input,SEMICOLON,FOLLOW_SEMICOLON_in_pm_BoundarySpaceDecl1601); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            SEMICOLON30_tree = (XQDTCommonTree)adaptor.create(SEMICOLON30);
            adaptor.addChild(root_0, SEMICOLON30_tree);
            }
            if ( state.backtracking==0 ) {
              ak(list_k);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (XQDTCommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (XQDTCommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "pm_BoundarySpaceDecl"

    public static class pm_DefaultNamespaceDecl_return extends ParserRuleReturnScope {
        XQDTCommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "pm_DefaultNamespaceDecl"
    // XQueryParser.g:219:1: pm_DefaultNamespaceDecl : k+= DECLARE k+= DEFAULT (k+= ELEMENT | k+= FUNCTION ) k+= NAMESPACE p_StringLiteral SEMICOLON ;
    public final XQueryParser.pm_DefaultNamespaceDecl_return pm_DefaultNamespaceDecl() throws RecognitionException {
        XQueryParser.pm_DefaultNamespaceDecl_return retval = new XQueryParser.pm_DefaultNamespaceDecl_return();
        retval.start = input.LT(1);

        XQDTCommonTree root_0 = null;

        CommonToken SEMICOLON32=null;
        CommonToken k=null;
        List list_k=null;
        XQueryParser.p_StringLiteral_return p_StringLiteral31 = null;


        XQDTCommonTree SEMICOLON32_tree=null;
        XQDTCommonTree k_tree=null;

        try {
            // XQueryParser.g:220:9: (k+= DECLARE k+= DEFAULT (k+= ELEMENT | k+= FUNCTION ) k+= NAMESPACE p_StringLiteral SEMICOLON )
            // XQueryParser.g:220:11: k+= DECLARE k+= DEFAULT (k+= ELEMENT | k+= FUNCTION ) k+= NAMESPACE p_StringLiteral SEMICOLON
            {
            root_0 = (XQDTCommonTree)adaptor.nil();

            k=(CommonToken)match(input,DECLARE,FOLLOW_DECLARE_in_pm_DefaultNamespaceDecl1631); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            k_tree = (XQDTCommonTree)adaptor.create(k);
            adaptor.addChild(root_0, k_tree);
            }
            if (list_k==null) list_k=new ArrayList();
            list_k.add(k);

            k=(CommonToken)match(input,DEFAULT,FOLLOW_DEFAULT_in_pm_DefaultNamespaceDecl1635); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            k_tree = (XQDTCommonTree)adaptor.create(k);
            adaptor.addChild(root_0, k_tree);
            }
            if (list_k==null) list_k=new ArrayList();
            list_k.add(k);

            // XQueryParser.g:220:33: (k+= ELEMENT | k+= FUNCTION )
            int alt11=2;
            int LA11_0 = input.LA(1);

            if ( (LA11_0==ELEMENT) ) {
                alt11=1;
            }
            else if ( (LA11_0==FUNCTION) ) {
                alt11=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 11, 0, input);

                throw nvae;
            }
            switch (alt11) {
                case 1 :
                    // XQueryParser.g:220:34: k+= ELEMENT
                    {
                    k=(CommonToken)match(input,ELEMENT,FOLLOW_ELEMENT_in_pm_DefaultNamespaceDecl1640); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    k_tree = (XQDTCommonTree)adaptor.create(k);
                    adaptor.addChild(root_0, k_tree);
                    }
                    if (list_k==null) list_k=new ArrayList();
                    list_k.add(k);


                    }
                    break;
                case 2 :
                    // XQueryParser.g:220:47: k+= FUNCTION
                    {
                    k=(CommonToken)match(input,FUNCTION,FOLLOW_FUNCTION_in_pm_DefaultNamespaceDecl1646); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    k_tree = (XQDTCommonTree)adaptor.create(k);
                    adaptor.addChild(root_0, k_tree);
                    }
                    if (list_k==null) list_k=new ArrayList();
                    list_k.add(k);


                    }
                    break;

            }

            k=(CommonToken)match(input,NAMESPACE,FOLLOW_NAMESPACE_in_pm_DefaultNamespaceDecl1651); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            k_tree = (XQDTCommonTree)adaptor.create(k);
            adaptor.addChild(root_0, k_tree);
            }
            if (list_k==null) list_k=new ArrayList();
            list_k.add(k);

            pushFollow(FOLLOW_p_StringLiteral_in_pm_DefaultNamespaceDecl1653);
            p_StringLiteral31=p_StringLiteral();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, p_StringLiteral31.getTree());
            SEMICOLON32=(CommonToken)match(input,SEMICOLON,FOLLOW_SEMICOLON_in_pm_DefaultNamespaceDecl1655); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            SEMICOLON32_tree = (XQDTCommonTree)adaptor.create(SEMICOLON32);
            adaptor.addChild(root_0, SEMICOLON32_tree);
            }
            if ( state.backtracking==0 ) {
              ak(list_k);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (XQDTCommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (XQDTCommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "pm_DefaultNamespaceDecl"

    public static class pm_OptionDecl_return extends ParserRuleReturnScope {
        XQDTCommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "pm_OptionDecl"
    // XQueryParser.g:224:1: pm_OptionDecl : k+= DECLARE k+= OPTION p_QName p_StringLiteral SEMICOLON ;
    public final XQueryParser.pm_OptionDecl_return pm_OptionDecl() throws RecognitionException {
        XQueryParser.pm_OptionDecl_return retval = new XQueryParser.pm_OptionDecl_return();
        retval.start = input.LT(1);

        XQDTCommonTree root_0 = null;

        CommonToken SEMICOLON35=null;
        CommonToken k=null;
        List list_k=null;
        XQueryParser.p_QName_return p_QName33 = null;

        XQueryParser.p_StringLiteral_return p_StringLiteral34 = null;


        XQDTCommonTree SEMICOLON35_tree=null;
        XQDTCommonTree k_tree=null;

        try {
            // XQueryParser.g:225:9: (k+= DECLARE k+= OPTION p_QName p_StringLiteral SEMICOLON )
            // XQueryParser.g:225:13: k+= DECLARE k+= OPTION p_QName p_StringLiteral SEMICOLON
            {
            root_0 = (XQDTCommonTree)adaptor.nil();

            k=(CommonToken)match(input,DECLARE,FOLLOW_DECLARE_in_pm_OptionDecl1687); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            k_tree = (XQDTCommonTree)adaptor.create(k);
            adaptor.addChild(root_0, k_tree);
            }
            if (list_k==null) list_k=new ArrayList();
            list_k.add(k);

            k=(CommonToken)match(input,OPTION,FOLLOW_OPTION_in_pm_OptionDecl1691); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            k_tree = (XQDTCommonTree)adaptor.create(k);
            adaptor.addChild(root_0, k_tree);
            }
            if (list_k==null) list_k=new ArrayList();
            list_k.add(k);

            pushFollow(FOLLOW_p_QName_in_pm_OptionDecl1693);
            p_QName33=p_QName();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, p_QName33.getTree());
            pushFollow(FOLLOW_p_StringLiteral_in_pm_OptionDecl1695);
            p_StringLiteral34=p_StringLiteral();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, p_StringLiteral34.getTree());
            SEMICOLON35=(CommonToken)match(input,SEMICOLON,FOLLOW_SEMICOLON_in_pm_OptionDecl1697); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            SEMICOLON35_tree = (XQDTCommonTree)adaptor.create(SEMICOLON35);
            adaptor.addChild(root_0, SEMICOLON35_tree);
            }
            if ( state.backtracking==0 ) {
              ak(list_k);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (XQDTCommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (XQDTCommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "pm_OptionDecl"

    public static class pm_OrderingModeDecl_return extends ParserRuleReturnScope {
        XQDTCommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "pm_OrderingModeDecl"
    // XQueryParser.g:229:1: pm_OrderingModeDecl : k+= DECLARE k+= ORDERING (k+= ORDERED | k+= UNORDERED ) SEMICOLON ;
    public final XQueryParser.pm_OrderingModeDecl_return pm_OrderingModeDecl() throws RecognitionException {
        XQueryParser.pm_OrderingModeDecl_return retval = new XQueryParser.pm_OrderingModeDecl_return();
        retval.start = input.LT(1);

        XQDTCommonTree root_0 = null;

        CommonToken SEMICOLON36=null;
        CommonToken k=null;
        List list_k=null;

        XQDTCommonTree SEMICOLON36_tree=null;
        XQDTCommonTree k_tree=null;

        try {
            // XQueryParser.g:230:9: (k+= DECLARE k+= ORDERING (k+= ORDERED | k+= UNORDERED ) SEMICOLON )
            // XQueryParser.g:230:13: k+= DECLARE k+= ORDERING (k+= ORDERED | k+= UNORDERED ) SEMICOLON
            {
            root_0 = (XQDTCommonTree)adaptor.nil();

            k=(CommonToken)match(input,DECLARE,FOLLOW_DECLARE_in_pm_OrderingModeDecl1729); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            k_tree = (XQDTCommonTree)adaptor.create(k);
            adaptor.addChild(root_0, k_tree);
            }
            if (list_k==null) list_k=new ArrayList();
            list_k.add(k);

            k=(CommonToken)match(input,ORDERING,FOLLOW_ORDERING_in_pm_OrderingModeDecl1733); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            k_tree = (XQDTCommonTree)adaptor.create(k);
            adaptor.addChild(root_0, k_tree);
            }
            if (list_k==null) list_k=new ArrayList();
            list_k.add(k);

            // XQueryParser.g:230:36: (k+= ORDERED | k+= UNORDERED )
            int alt12=2;
            int LA12_0 = input.LA(1);

            if ( (LA12_0==ORDERED) ) {
                alt12=1;
            }
            else if ( (LA12_0==UNORDERED) ) {
                alt12=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 12, 0, input);

                throw nvae;
            }
            switch (alt12) {
                case 1 :
                    // XQueryParser.g:230:37: k+= ORDERED
                    {
                    k=(CommonToken)match(input,ORDERED,FOLLOW_ORDERED_in_pm_OrderingModeDecl1738); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    k_tree = (XQDTCommonTree)adaptor.create(k);
                    adaptor.addChild(root_0, k_tree);
                    }
                    if (list_k==null) list_k=new ArrayList();
                    list_k.add(k);


                    }
                    break;
                case 2 :
                    // XQueryParser.g:230:50: k+= UNORDERED
                    {
                    k=(CommonToken)match(input,UNORDERED,FOLLOW_UNORDERED_in_pm_OrderingModeDecl1744); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    k_tree = (XQDTCommonTree)adaptor.create(k);
                    adaptor.addChild(root_0, k_tree);
                    }
                    if (list_k==null) list_k=new ArrayList();
                    list_k.add(k);


                    }
                    break;

            }

            SEMICOLON36=(CommonToken)match(input,SEMICOLON,FOLLOW_SEMICOLON_in_pm_OrderingModeDecl1747); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            SEMICOLON36_tree = (XQDTCommonTree)adaptor.create(SEMICOLON36);
            adaptor.addChild(root_0, SEMICOLON36_tree);
            }
            if ( state.backtracking==0 ) {
              ak(list_k);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (XQDTCommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (XQDTCommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "pm_OrderingModeDecl"

    public static class pm_EmptyOrderDecl_return extends ParserRuleReturnScope {
        XQDTCommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "pm_EmptyOrderDecl"
    // XQueryParser.g:234:1: pm_EmptyOrderDecl : k+= DECLARE k+= DEFAULT k+= ORDER k+= EMPTY (k+= GREATEST | k+= LEAST ) SEMICOLON ;
    public final XQueryParser.pm_EmptyOrderDecl_return pm_EmptyOrderDecl() throws RecognitionException {
        XQueryParser.pm_EmptyOrderDecl_return retval = new XQueryParser.pm_EmptyOrderDecl_return();
        retval.start = input.LT(1);

        XQDTCommonTree root_0 = null;

        CommonToken SEMICOLON37=null;
        CommonToken k=null;
        List list_k=null;

        XQDTCommonTree SEMICOLON37_tree=null;
        XQDTCommonTree k_tree=null;

        try {
            // XQueryParser.g:235:9: (k+= DECLARE k+= DEFAULT k+= ORDER k+= EMPTY (k+= GREATEST | k+= LEAST ) SEMICOLON )
            // XQueryParser.g:235:13: k+= DECLARE k+= DEFAULT k+= ORDER k+= EMPTY (k+= GREATEST | k+= LEAST ) SEMICOLON
            {
            root_0 = (XQDTCommonTree)adaptor.nil();

            k=(CommonToken)match(input,DECLARE,FOLLOW_DECLARE_in_pm_EmptyOrderDecl1779); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            k_tree = (XQDTCommonTree)adaptor.create(k);
            adaptor.addChild(root_0, k_tree);
            }
            if (list_k==null) list_k=new ArrayList();
            list_k.add(k);

            k=(CommonToken)match(input,DEFAULT,FOLLOW_DEFAULT_in_pm_EmptyOrderDecl1783); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            k_tree = (XQDTCommonTree)adaptor.create(k);
            adaptor.addChild(root_0, k_tree);
            }
            if (list_k==null) list_k=new ArrayList();
            list_k.add(k);

            k=(CommonToken)match(input,ORDER,FOLLOW_ORDER_in_pm_EmptyOrderDecl1787); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            k_tree = (XQDTCommonTree)adaptor.create(k);
            adaptor.addChild(root_0, k_tree);
            }
            if (list_k==null) list_k=new ArrayList();
            list_k.add(k);

            k=(CommonToken)match(input,EMPTY,FOLLOW_EMPTY_in_pm_EmptyOrderDecl1791); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            k_tree = (XQDTCommonTree)adaptor.create(k);
            adaptor.addChild(root_0, k_tree);
            }
            if (list_k==null) list_k=new ArrayList();
            list_k.add(k);

            // XQueryParser.g:235:53: (k+= GREATEST | k+= LEAST )
            int alt13=2;
            int LA13_0 = input.LA(1);

            if ( (LA13_0==GREATEST) ) {
                alt13=1;
            }
            else if ( (LA13_0==LEAST) ) {
                alt13=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 13, 0, input);

                throw nvae;
            }
            switch (alt13) {
                case 1 :
                    // XQueryParser.g:235:54: k+= GREATEST
                    {
                    k=(CommonToken)match(input,GREATEST,FOLLOW_GREATEST_in_pm_EmptyOrderDecl1796); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    k_tree = (XQDTCommonTree)adaptor.create(k);
                    adaptor.addChild(root_0, k_tree);
                    }
                    if (list_k==null) list_k=new ArrayList();
                    list_k.add(k);


                    }
                    break;
                case 2 :
                    // XQueryParser.g:235:68: k+= LEAST
                    {
                    k=(CommonToken)match(input,LEAST,FOLLOW_LEAST_in_pm_EmptyOrderDecl1802); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    k_tree = (XQDTCommonTree)adaptor.create(k);
                    adaptor.addChild(root_0, k_tree);
                    }
                    if (list_k==null) list_k=new ArrayList();
                    list_k.add(k);


                    }
                    break;

            }

            SEMICOLON37=(CommonToken)match(input,SEMICOLON,FOLLOW_SEMICOLON_in_pm_EmptyOrderDecl1805); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            SEMICOLON37_tree = (XQDTCommonTree)adaptor.create(SEMICOLON37);
            adaptor.addChild(root_0, SEMICOLON37_tree);
            }
            if ( state.backtracking==0 ) {
              ak(list_k);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (XQDTCommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (XQDTCommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "pm_EmptyOrderDecl"

    public static class pm_CopyNamespacesDecl_return extends ParserRuleReturnScope {
        XQDTCommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "pm_CopyNamespacesDecl"
    // XQueryParser.g:239:1: pm_CopyNamespacesDecl : k+= DECLARE k+= COPY_NAMESPACES p_PreserveMode COMMA p_InheritMode SEMICOLON ;
    public final XQueryParser.pm_CopyNamespacesDecl_return pm_CopyNamespacesDecl() throws RecognitionException {
        XQueryParser.pm_CopyNamespacesDecl_return retval = new XQueryParser.pm_CopyNamespacesDecl_return();
        retval.start = input.LT(1);

        XQDTCommonTree root_0 = null;

        CommonToken COMMA39=null;
        CommonToken SEMICOLON41=null;
        CommonToken k=null;
        List list_k=null;
        XQueryParser.p_PreserveMode_return p_PreserveMode38 = null;

        XQueryParser.p_InheritMode_return p_InheritMode40 = null;


        XQDTCommonTree COMMA39_tree=null;
        XQDTCommonTree SEMICOLON41_tree=null;
        XQDTCommonTree k_tree=null;

        try {
            // XQueryParser.g:240:9: (k+= DECLARE k+= COPY_NAMESPACES p_PreserveMode COMMA p_InheritMode SEMICOLON )
            // XQueryParser.g:240:13: k+= DECLARE k+= COPY_NAMESPACES p_PreserveMode COMMA p_InheritMode SEMICOLON
            {
            root_0 = (XQDTCommonTree)adaptor.nil();

            k=(CommonToken)match(input,DECLARE,FOLLOW_DECLARE_in_pm_CopyNamespacesDecl1837); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            k_tree = (XQDTCommonTree)adaptor.create(k);
            adaptor.addChild(root_0, k_tree);
            }
            if (list_k==null) list_k=new ArrayList();
            list_k.add(k);

            k=(CommonToken)match(input,COPY_NAMESPACES,FOLLOW_COPY_NAMESPACES_in_pm_CopyNamespacesDecl1841); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            k_tree = (XQDTCommonTree)adaptor.create(k);
            adaptor.addChild(root_0, k_tree);
            }
            if (list_k==null) list_k=new ArrayList();
            list_k.add(k);

            pushFollow(FOLLOW_p_PreserveMode_in_pm_CopyNamespacesDecl1843);
            p_PreserveMode38=p_PreserveMode();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, p_PreserveMode38.getTree());
            COMMA39=(CommonToken)match(input,COMMA,FOLLOW_COMMA_in_pm_CopyNamespacesDecl1845); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            COMMA39_tree = (XQDTCommonTree)adaptor.create(COMMA39);
            adaptor.addChild(root_0, COMMA39_tree);
            }
            pushFollow(FOLLOW_p_InheritMode_in_pm_CopyNamespacesDecl1847);
            p_InheritMode40=p_InheritMode();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, p_InheritMode40.getTree());
            SEMICOLON41=(CommonToken)match(input,SEMICOLON,FOLLOW_SEMICOLON_in_pm_CopyNamespacesDecl1849); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            SEMICOLON41_tree = (XQDTCommonTree)adaptor.create(SEMICOLON41);
            adaptor.addChild(root_0, SEMICOLON41_tree);
            }
            if ( state.backtracking==0 ) {
              ak(list_k);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (XQDTCommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (XQDTCommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "pm_CopyNamespacesDecl"

    public static class p_DecimalFormatDecl_return extends ParserRuleReturnScope {
        XQDTCommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "p_DecimalFormatDecl"
    // XQueryParser.g:244:1: p_DecimalFormatDecl : k+= DECLARE ( ( DECIMAL_FORMAT p_QName ) | ( DEFAULT DECIMAL_FORMAT ) ) ( p_DFPropertyName ) EQ p_StringLiteral SEMICOLON ;
    public final XQueryParser.p_DecimalFormatDecl_return p_DecimalFormatDecl() throws RecognitionException {
        XQueryParser.p_DecimalFormatDecl_return retval = new XQueryParser.p_DecimalFormatDecl_return();
        retval.start = input.LT(1);

        XQDTCommonTree root_0 = null;

        CommonToken DECIMAL_FORMAT42=null;
        CommonToken DEFAULT44=null;
        CommonToken DECIMAL_FORMAT45=null;
        CommonToken EQ47=null;
        CommonToken SEMICOLON49=null;
        CommonToken k=null;
        List list_k=null;
        XQueryParser.p_QName_return p_QName43 = null;

        XQueryParser.p_DFPropertyName_return p_DFPropertyName46 = null;

        XQueryParser.p_StringLiteral_return p_StringLiteral48 = null;


        XQDTCommonTree DECIMAL_FORMAT42_tree=null;
        XQDTCommonTree DEFAULT44_tree=null;
        XQDTCommonTree DECIMAL_FORMAT45_tree=null;
        XQDTCommonTree EQ47_tree=null;
        XQDTCommonTree SEMICOLON49_tree=null;
        XQDTCommonTree k_tree=null;

        try {
            // XQueryParser.g:245:9: (k+= DECLARE ( ( DECIMAL_FORMAT p_QName ) | ( DEFAULT DECIMAL_FORMAT ) ) ( p_DFPropertyName ) EQ p_StringLiteral SEMICOLON )
            // XQueryParser.g:245:13: k+= DECLARE ( ( DECIMAL_FORMAT p_QName ) | ( DEFAULT DECIMAL_FORMAT ) ) ( p_DFPropertyName ) EQ p_StringLiteral SEMICOLON
            {
            root_0 = (XQDTCommonTree)adaptor.nil();

            k=(CommonToken)match(input,DECLARE,FOLLOW_DECLARE_in_p_DecimalFormatDecl1881); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            k_tree = (XQDTCommonTree)adaptor.create(k);
            adaptor.addChild(root_0, k_tree);
            }
            if (list_k==null) list_k=new ArrayList();
            list_k.add(k);

            // XQueryParser.g:245:24: ( ( DECIMAL_FORMAT p_QName ) | ( DEFAULT DECIMAL_FORMAT ) )
            int alt14=2;
            int LA14_0 = input.LA(1);

            if ( (LA14_0==DECIMAL_FORMAT) ) {
                alt14=1;
            }
            else if ( (LA14_0==DEFAULT) ) {
                alt14=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 14, 0, input);

                throw nvae;
            }
            switch (alt14) {
                case 1 :
                    // XQueryParser.g:245:25: ( DECIMAL_FORMAT p_QName )
                    {
                    // XQueryParser.g:245:25: ( DECIMAL_FORMAT p_QName )
                    // XQueryParser.g:245:26: DECIMAL_FORMAT p_QName
                    {
                    DECIMAL_FORMAT42=(CommonToken)match(input,DECIMAL_FORMAT,FOLLOW_DECIMAL_FORMAT_in_p_DecimalFormatDecl1885); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    DECIMAL_FORMAT42_tree = (XQDTCommonTree)adaptor.create(DECIMAL_FORMAT42);
                    adaptor.addChild(root_0, DECIMAL_FORMAT42_tree);
                    }
                    pushFollow(FOLLOW_p_QName_in_p_DecimalFormatDecl1887);
                    p_QName43=p_QName();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, p_QName43.getTree());

                    }


                    }
                    break;
                case 2 :
                    // XQueryParser.g:245:52: ( DEFAULT DECIMAL_FORMAT )
                    {
                    // XQueryParser.g:245:52: ( DEFAULT DECIMAL_FORMAT )
                    // XQueryParser.g:245:53: DEFAULT DECIMAL_FORMAT
                    {
                    DEFAULT44=(CommonToken)match(input,DEFAULT,FOLLOW_DEFAULT_in_p_DecimalFormatDecl1893); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    DEFAULT44_tree = (XQDTCommonTree)adaptor.create(DEFAULT44);
                    adaptor.addChild(root_0, DEFAULT44_tree);
                    }
                    DECIMAL_FORMAT45=(CommonToken)match(input,DECIMAL_FORMAT,FOLLOW_DECIMAL_FORMAT_in_p_DecimalFormatDecl1895); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    DECIMAL_FORMAT45_tree = (XQDTCommonTree)adaptor.create(DECIMAL_FORMAT45);
                    adaptor.addChild(root_0, DECIMAL_FORMAT45_tree);
                    }

                    }


                    }
                    break;

            }

            // XQueryParser.g:245:78: ( p_DFPropertyName )
            // XQueryParser.g:245:79: p_DFPropertyName
            {
            pushFollow(FOLLOW_p_DFPropertyName_in_p_DecimalFormatDecl1900);
            p_DFPropertyName46=p_DFPropertyName();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, p_DFPropertyName46.getTree());

            }

            EQ47=(CommonToken)match(input,EQ,FOLLOW_EQ_in_p_DecimalFormatDecl1903); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            EQ47_tree = (XQDTCommonTree)adaptor.create(EQ47);
            adaptor.addChild(root_0, EQ47_tree);
            }
            pushFollow(FOLLOW_p_StringLiteral_in_p_DecimalFormatDecl1905);
            p_StringLiteral48=p_StringLiteral();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, p_StringLiteral48.getTree());
            SEMICOLON49=(CommonToken)match(input,SEMICOLON,FOLLOW_SEMICOLON_in_p_DecimalFormatDecl1907); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            SEMICOLON49_tree = (XQDTCommonTree)adaptor.create(SEMICOLON49);
            adaptor.addChild(root_0, SEMICOLON49_tree);
            }
            if ( state.backtracking==0 ) {
              ak(list_k);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (XQDTCommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (XQDTCommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "p_DecimalFormatDecl"

    public static class p_DFPropertyName_return extends ParserRuleReturnScope {
        XQDTCommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "p_DFPropertyName"
    // XQueryParser.g:249:1: p_DFPropertyName : (k= DECIMAL_SEPARATOR | k= GROUPING_SEPARATOR | k= INFINITY | k= MINUS_SIGN | k= NAN | k= PERCENT | k= PER_MILLE | k= ZERO_DIGIT | k= DIGIT | k= PATTERN_SEPARATOR );
    public final XQueryParser.p_DFPropertyName_return p_DFPropertyName() throws RecognitionException {
        XQueryParser.p_DFPropertyName_return retval = new XQueryParser.p_DFPropertyName_return();
        retval.start = input.LT(1);

        XQDTCommonTree root_0 = null;

        CommonToken k=null;

        XQDTCommonTree k_tree=null;

        try {
            // XQueryParser.g:250:9: (k= DECIMAL_SEPARATOR | k= GROUPING_SEPARATOR | k= INFINITY | k= MINUS_SIGN | k= NAN | k= PERCENT | k= PER_MILLE | k= ZERO_DIGIT | k= DIGIT | k= PATTERN_SEPARATOR )
            int alt15=10;
            switch ( input.LA(1) ) {
            case DECIMAL_SEPARATOR:
                {
                alt15=1;
                }
                break;
            case GROUPING_SEPARATOR:
                {
                alt15=2;
                }
                break;
            case INFINITY:
                {
                alt15=3;
                }
                break;
            case MINUS_SIGN:
                {
                alt15=4;
                }
                break;
            case NAN:
                {
                alt15=5;
                }
                break;
            case PERCENT:
                {
                alt15=6;
                }
                break;
            case PER_MILLE:
                {
                alt15=7;
                }
                break;
            case ZERO_DIGIT:
                {
                alt15=8;
                }
                break;
            case DIGIT:
                {
                alt15=9;
                }
                break;
            case PATTERN_SEPARATOR:
                {
                alt15=10;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 15, 0, input);

                throw nvae;
            }

            switch (alt15) {
                case 1 :
                    // XQueryParser.g:250:11: k= DECIMAL_SEPARATOR
                    {
                    root_0 = (XQDTCommonTree)adaptor.nil();

                    k=(CommonToken)match(input,DECIMAL_SEPARATOR,FOLLOW_DECIMAL_SEPARATOR_in_p_DFPropertyName1937); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    k_tree = (XQDTCommonTree)adaptor.create(k);
                    adaptor.addChild(root_0, k_tree);
                    }

                    }
                    break;
                case 2 :
                    // XQueryParser.g:250:33: k= GROUPING_SEPARATOR
                    {
                    root_0 = (XQDTCommonTree)adaptor.nil();

                    k=(CommonToken)match(input,GROUPING_SEPARATOR,FOLLOW_GROUPING_SEPARATOR_in_p_DFPropertyName1943); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    k_tree = (XQDTCommonTree)adaptor.create(k);
                    adaptor.addChild(root_0, k_tree);
                    }

                    }
                    break;
                case 3 :
                    // XQueryParser.g:250:56: k= INFINITY
                    {
                    root_0 = (XQDTCommonTree)adaptor.nil();

                    k=(CommonToken)match(input,INFINITY,FOLLOW_INFINITY_in_p_DFPropertyName1949); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    k_tree = (XQDTCommonTree)adaptor.create(k);
                    adaptor.addChild(root_0, k_tree);
                    }

                    }
                    break;
                case 4 :
                    // XQueryParser.g:250:69: k= MINUS_SIGN
                    {
                    root_0 = (XQDTCommonTree)adaptor.nil();

                    k=(CommonToken)match(input,MINUS_SIGN,FOLLOW_MINUS_SIGN_in_p_DFPropertyName1955); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    k_tree = (XQDTCommonTree)adaptor.create(k);
                    adaptor.addChild(root_0, k_tree);
                    }

                    }
                    break;
                case 5 :
                    // XQueryParser.g:250:84: k= NAN
                    {
                    root_0 = (XQDTCommonTree)adaptor.nil();

                    k=(CommonToken)match(input,NAN,FOLLOW_NAN_in_p_DFPropertyName1961); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    k_tree = (XQDTCommonTree)adaptor.create(k);
                    adaptor.addChild(root_0, k_tree);
                    }

                    }
                    break;
                case 6 :
                    // XQueryParser.g:250:92: k= PERCENT
                    {
                    root_0 = (XQDTCommonTree)adaptor.nil();

                    k=(CommonToken)match(input,PERCENT,FOLLOW_PERCENT_in_p_DFPropertyName1967); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    k_tree = (XQDTCommonTree)adaptor.create(k);
                    adaptor.addChild(root_0, k_tree);
                    }

                    }
                    break;
                case 7 :
                    // XQueryParser.g:250:104: k= PER_MILLE
                    {
                    root_0 = (XQDTCommonTree)adaptor.nil();

                    k=(CommonToken)match(input,PER_MILLE,FOLLOW_PER_MILLE_in_p_DFPropertyName1973); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    k_tree = (XQDTCommonTree)adaptor.create(k);
                    adaptor.addChild(root_0, k_tree);
                    }

                    }
                    break;
                case 8 :
                    // XQueryParser.g:250:118: k= ZERO_DIGIT
                    {
                    root_0 = (XQDTCommonTree)adaptor.nil();

                    k=(CommonToken)match(input,ZERO_DIGIT,FOLLOW_ZERO_DIGIT_in_p_DFPropertyName1979); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    k_tree = (XQDTCommonTree)adaptor.create(k);
                    adaptor.addChild(root_0, k_tree);
                    }

                    }
                    break;
                case 9 :
                    // XQueryParser.g:250:133: k= DIGIT
                    {
                    root_0 = (XQDTCommonTree)adaptor.nil();

                    k=(CommonToken)match(input,DIGIT,FOLLOW_DIGIT_in_p_DFPropertyName1985); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    k_tree = (XQDTCommonTree)adaptor.create(k);
                    adaptor.addChild(root_0, k_tree);
                    }

                    }
                    break;
                case 10 :
                    // XQueryParser.g:250:143: k= PATTERN_SEPARATOR
                    {
                    root_0 = (XQDTCommonTree)adaptor.nil();

                    k=(CommonToken)match(input,PATTERN_SEPARATOR,FOLLOW_PATTERN_SEPARATOR_in_p_DFPropertyName1991); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    k_tree = (XQDTCommonTree)adaptor.create(k);
                    adaptor.addChild(root_0, k_tree);
                    }
                    if ( state.backtracking==0 ) {
                      ak(k);
                    }

                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (XQDTCommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (XQDTCommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "p_DFPropertyName"

    public static class p_PreserveMode_return extends ParserRuleReturnScope {
        XQDTCommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "p_PreserveMode"
    // XQueryParser.g:254:1: p_PreserveMode : (k+= PRESERVE | k+= NO_PRESERVE ) ;
    public final XQueryParser.p_PreserveMode_return p_PreserveMode() throws RecognitionException {
        XQueryParser.p_PreserveMode_return retval = new XQueryParser.p_PreserveMode_return();
        retval.start = input.LT(1);

        XQDTCommonTree root_0 = null;

        CommonToken k=null;
        List list_k=null;

        XQDTCommonTree k_tree=null;

        try {
            // XQueryParser.g:255:9: ( (k+= PRESERVE | k+= NO_PRESERVE ) )
            // XQueryParser.g:255:13: (k+= PRESERVE | k+= NO_PRESERVE )
            {
            root_0 = (XQDTCommonTree)adaptor.nil();

            // XQueryParser.g:255:13: (k+= PRESERVE | k+= NO_PRESERVE )
            int alt16=2;
            int LA16_0 = input.LA(1);

            if ( (LA16_0==PRESERVE) ) {
                alt16=1;
            }
            else if ( (LA16_0==NO_PRESERVE) ) {
                alt16=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 16, 0, input);

                throw nvae;
            }
            switch (alt16) {
                case 1 :
                    // XQueryParser.g:255:14: k+= PRESERVE
                    {
                    k=(CommonToken)match(input,PRESERVE,FOLLOW_PRESERVE_in_p_PreserveMode2024); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    k_tree = (XQDTCommonTree)adaptor.create(k);
                    adaptor.addChild(root_0, k_tree);
                    }
                    if (list_k==null) list_k=new ArrayList();
                    list_k.add(k);


                    }
                    break;
                case 2 :
                    // XQueryParser.g:255:28: k+= NO_PRESERVE
                    {
                    k=(CommonToken)match(input,NO_PRESERVE,FOLLOW_NO_PRESERVE_in_p_PreserveMode2030); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    k_tree = (XQDTCommonTree)adaptor.create(k);
                    adaptor.addChild(root_0, k_tree);
                    }
                    if (list_k==null) list_k=new ArrayList();
                    list_k.add(k);


                    }
                    break;

            }

            if ( state.backtracking==0 ) {
              ak(list_k);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (XQDTCommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (XQDTCommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "p_PreserveMode"

    public static class p_InheritMode_return extends ParserRuleReturnScope {
        XQDTCommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "p_InheritMode"
    // XQueryParser.g:259:1: p_InheritMode : (k+= INHERIT | k+= NO_INHERIT ) ;
    public final XQueryParser.p_InheritMode_return p_InheritMode() throws RecognitionException {
        XQueryParser.p_InheritMode_return retval = new XQueryParser.p_InheritMode_return();
        retval.start = input.LT(1);

        XQDTCommonTree root_0 = null;

        CommonToken k=null;
        List list_k=null;

        XQDTCommonTree k_tree=null;

        try {
            // XQueryParser.g:260:9: ( (k+= INHERIT | k+= NO_INHERIT ) )
            // XQueryParser.g:260:13: (k+= INHERIT | k+= NO_INHERIT )
            {
            root_0 = (XQDTCommonTree)adaptor.nil();

            // XQueryParser.g:260:13: (k+= INHERIT | k+= NO_INHERIT )
            int alt17=2;
            int LA17_0 = input.LA(1);

            if ( (LA17_0==INHERIT) ) {
                alt17=1;
            }
            else if ( (LA17_0==NO_INHERIT) ) {
                alt17=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 17, 0, input);

                throw nvae;
            }
            switch (alt17) {
                case 1 :
                    // XQueryParser.g:260:14: k+= INHERIT
                    {
                    k=(CommonToken)match(input,INHERIT,FOLLOW_INHERIT_in_p_InheritMode2064); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    k_tree = (XQDTCommonTree)adaptor.create(k);
                    adaptor.addChild(root_0, k_tree);
                    }
                    if (list_k==null) list_k=new ArrayList();
                    list_k.add(k);


                    }
                    break;
                case 2 :
                    // XQueryParser.g:260:27: k+= NO_INHERIT
                    {
                    k=(CommonToken)match(input,NO_INHERIT,FOLLOW_NO_INHERIT_in_p_InheritMode2070); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    k_tree = (XQDTCommonTree)adaptor.create(k);
                    adaptor.addChild(root_0, k_tree);
                    }
                    if (list_k==null) list_k=new ArrayList();
                    list_k.add(k);


                    }
                    break;

            }

            if ( state.backtracking==0 ) {
              ak(list_k);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (XQDTCommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (XQDTCommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "p_InheritMode"

    public static class pm_DefaultCollationDecl_return extends ParserRuleReturnScope {
        XQDTCommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "pm_DefaultCollationDecl"
    // XQueryParser.g:264:1: pm_DefaultCollationDecl : k+= DECLARE k+= DEFAULT k+= COLLATION p_StringLiteral SEMICOLON ;
    public final XQueryParser.pm_DefaultCollationDecl_return pm_DefaultCollationDecl() throws RecognitionException {
        XQueryParser.pm_DefaultCollationDecl_return retval = new XQueryParser.pm_DefaultCollationDecl_return();
        retval.start = input.LT(1);

        XQDTCommonTree root_0 = null;

        CommonToken SEMICOLON51=null;
        CommonToken k=null;
        List list_k=null;
        XQueryParser.p_StringLiteral_return p_StringLiteral50 = null;


        XQDTCommonTree SEMICOLON51_tree=null;
        XQDTCommonTree k_tree=null;

        try {
            // XQueryParser.g:265:9: (k+= DECLARE k+= DEFAULT k+= COLLATION p_StringLiteral SEMICOLON )
            // XQueryParser.g:265:13: k+= DECLARE k+= DEFAULT k+= COLLATION p_StringLiteral SEMICOLON
            {
            root_0 = (XQDTCommonTree)adaptor.nil();

            k=(CommonToken)match(input,DECLARE,FOLLOW_DECLARE_in_pm_DefaultCollationDecl2111); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            k_tree = (XQDTCommonTree)adaptor.create(k);
            adaptor.addChild(root_0, k_tree);
            }
            if (list_k==null) list_k=new ArrayList();
            list_k.add(k);

            k=(CommonToken)match(input,DEFAULT,FOLLOW_DEFAULT_in_pm_DefaultCollationDecl2115); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            k_tree = (XQDTCommonTree)adaptor.create(k);
            adaptor.addChild(root_0, k_tree);
            }
            if (list_k==null) list_k=new ArrayList();
            list_k.add(k);

            k=(CommonToken)match(input,COLLATION,FOLLOW_COLLATION_in_pm_DefaultCollationDecl2119); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            k_tree = (XQDTCommonTree)adaptor.create(k);
            adaptor.addChild(root_0, k_tree);
            }
            if (list_k==null) list_k=new ArrayList();
            list_k.add(k);

            pushFollow(FOLLOW_p_StringLiteral_in_pm_DefaultCollationDecl2121);
            p_StringLiteral50=p_StringLiteral();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, p_StringLiteral50.getTree());
            SEMICOLON51=(CommonToken)match(input,SEMICOLON,FOLLOW_SEMICOLON_in_pm_DefaultCollationDecl2123); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            SEMICOLON51_tree = (XQDTCommonTree)adaptor.create(SEMICOLON51);
            adaptor.addChild(root_0, SEMICOLON51_tree);
            }
            if ( state.backtracking==0 ) {
              ak(list_k);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (XQDTCommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (XQDTCommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "pm_DefaultCollationDecl"

    public static class pm_BaseURIDecl_return extends ParserRuleReturnScope {
        XQDTCommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "pm_BaseURIDecl"
    // XQueryParser.g:269:1: pm_BaseURIDecl : k+= DECLARE k+= BASE_URI sl= p_StringLiteral SEMICOLON -> ^( BaseURIDecl $sl) ;
    public final XQueryParser.pm_BaseURIDecl_return pm_BaseURIDecl() throws RecognitionException {
        XQueryParser.pm_BaseURIDecl_return retval = new XQueryParser.pm_BaseURIDecl_return();
        retval.start = input.LT(1);

        XQDTCommonTree root_0 = null;

        CommonToken SEMICOLON52=null;
        CommonToken k=null;
        List list_k=null;
        XQueryParser.p_StringLiteral_return sl = null;


        XQDTCommonTree SEMICOLON52_tree=null;
        XQDTCommonTree k_tree=null;
        RewriteRuleTokenStream stream_DECLARE=new RewriteRuleTokenStream(adaptor,"token DECLARE");
        RewriteRuleTokenStream stream_SEMICOLON=new RewriteRuleTokenStream(adaptor,"token SEMICOLON");
        RewriteRuleTokenStream stream_BASE_URI=new RewriteRuleTokenStream(adaptor,"token BASE_URI");
        RewriteRuleSubtreeStream stream_p_StringLiteral=new RewriteRuleSubtreeStream(adaptor,"rule p_StringLiteral");
        try {
            // XQueryParser.g:270:9: (k+= DECLARE k+= BASE_URI sl= p_StringLiteral SEMICOLON -> ^( BaseURIDecl $sl) )
            // XQueryParser.g:270:13: k+= DECLARE k+= BASE_URI sl= p_StringLiteral SEMICOLON
            {
            k=(CommonToken)match(input,DECLARE,FOLLOW_DECLARE_in_pm_BaseURIDecl2163); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_DECLARE.add(k);

            if (list_k==null) list_k=new ArrayList();
            list_k.add(k);

            k=(CommonToken)match(input,BASE_URI,FOLLOW_BASE_URI_in_pm_BaseURIDecl2167); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_BASE_URI.add(k);

            if (list_k==null) list_k=new ArrayList();
            list_k.add(k);

            pushFollow(FOLLOW_p_StringLiteral_in_pm_BaseURIDecl2171);
            sl=p_StringLiteral();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_p_StringLiteral.add(sl.getTree());
            SEMICOLON52=(CommonToken)match(input,SEMICOLON,FOLLOW_SEMICOLON_in_pm_BaseURIDecl2173); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_SEMICOLON.add(SEMICOLON52);

            if ( state.backtracking==0 ) {
              ak(list_k);
            }


            // AST REWRITE
            // elements: sl
            // token labels: 
            // rule labels: sl, retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_sl=new RewriteRuleSubtreeStream(adaptor,"rule sl",sl!=null?sl.tree:null);
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (XQDTCommonTree)adaptor.nil();
            // 271:17: -> ^( BaseURIDecl $sl)
            {
                // XQueryParser.g:271:20: ^( BaseURIDecl $sl)
                {
                XQDTCommonTree root_1 = (XQDTCommonTree)adaptor.nil();
                root_1 = (XQDTCommonTree)adaptor.becomeRoot((XQDTCommonTree)adaptor.create(BaseURIDecl, "BaseURIDecl"), root_1);

                adaptor.addChild(root_1, stream_sl.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (XQDTCommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (XQDTCommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "pm_BaseURIDecl"

    public static class pm_SchemaImport_return extends ParserRuleReturnScope {
        XQDTCommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "pm_SchemaImport"
    // XQueryParser.g:275:1: pm_SchemaImport : k+= IMPORT k+= SCHEMA (sp= p_SchemaPrefix )? us= p_StringLiteral (k+= AT ah+= p_StringLiteral ( COMMA ah+= p_StringLiteral )* )? SEMICOLON -> ^( SchemaImport ^( SchemaPrefix ( $sp)? ) $us ^( AtHints ( $ah)* ) ) ;
    public final XQueryParser.pm_SchemaImport_return pm_SchemaImport() throws RecognitionException {
        XQueryParser.pm_SchemaImport_return retval = new XQueryParser.pm_SchemaImport_return();
        retval.start = input.LT(1);

        XQDTCommonTree root_0 = null;

        CommonToken COMMA53=null;
        CommonToken SEMICOLON54=null;
        CommonToken k=null;
        List list_k=null;
        List list_ah=null;
        XQueryParser.p_SchemaPrefix_return sp = null;

        XQueryParser.p_StringLiteral_return us = null;

        XQueryParser.p_StringLiteral_return ah = null;
         ah = null;
        XQDTCommonTree COMMA53_tree=null;
        XQDTCommonTree SEMICOLON54_tree=null;
        XQDTCommonTree k_tree=null;
        RewriteRuleTokenStream stream_AT=new RewriteRuleTokenStream(adaptor,"token AT");
        RewriteRuleTokenStream stream_IMPORT=new RewriteRuleTokenStream(adaptor,"token IMPORT");
        RewriteRuleTokenStream stream_SCHEMA=new RewriteRuleTokenStream(adaptor,"token SCHEMA");
        RewriteRuleTokenStream stream_SEMICOLON=new RewriteRuleTokenStream(adaptor,"token SEMICOLON");
        RewriteRuleTokenStream stream_COMMA=new RewriteRuleTokenStream(adaptor,"token COMMA");
        RewriteRuleSubtreeStream stream_p_SchemaPrefix=new RewriteRuleSubtreeStream(adaptor,"rule p_SchemaPrefix");
        RewriteRuleSubtreeStream stream_p_StringLiteral=new RewriteRuleSubtreeStream(adaptor,"rule p_StringLiteral");
        try {
            // XQueryParser.g:276:9: (k+= IMPORT k+= SCHEMA (sp= p_SchemaPrefix )? us= p_StringLiteral (k+= AT ah+= p_StringLiteral ( COMMA ah+= p_StringLiteral )* )? SEMICOLON -> ^( SchemaImport ^( SchemaPrefix ( $sp)? ) $us ^( AtHints ( $ah)* ) ) )
            // XQueryParser.g:276:11: k+= IMPORT k+= SCHEMA (sp= p_SchemaPrefix )? us= p_StringLiteral (k+= AT ah+= p_StringLiteral ( COMMA ah+= p_StringLiteral )* )? SEMICOLON
            {
            k=(CommonToken)match(input,IMPORT,FOLLOW_IMPORT_in_pm_SchemaImport2228); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_IMPORT.add(k);

            if (list_k==null) list_k=new ArrayList();
            list_k.add(k);

            k=(CommonToken)match(input,SCHEMA,FOLLOW_SCHEMA_in_pm_SchemaImport2232); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_SCHEMA.add(k);

            if (list_k==null) list_k=new ArrayList();
            list_k.add(k);

            // XQueryParser.g:276:33: (sp= p_SchemaPrefix )?
            int alt18=2;
            int LA18_0 = input.LA(1);

            if ( (LA18_0==DEFAULT||LA18_0==NAMESPACE) ) {
                alt18=1;
            }
            switch (alt18) {
                case 1 :
                    // XQueryParser.g:276:33: sp= p_SchemaPrefix
                    {
                    pushFollow(FOLLOW_p_SchemaPrefix_in_pm_SchemaImport2236);
                    sp=p_SchemaPrefix();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_p_SchemaPrefix.add(sp.getTree());

                    }
                    break;

            }

            pushFollow(FOLLOW_p_StringLiteral_in_pm_SchemaImport2241);
            us=p_StringLiteral();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_p_StringLiteral.add(us.getTree());
            // XQueryParser.g:276:69: (k+= AT ah+= p_StringLiteral ( COMMA ah+= p_StringLiteral )* )?
            int alt20=2;
            int LA20_0 = input.LA(1);

            if ( (LA20_0==AT) ) {
                alt20=1;
            }
            switch (alt20) {
                case 1 :
                    // XQueryParser.g:276:70: k+= AT ah+= p_StringLiteral ( COMMA ah+= p_StringLiteral )*
                    {
                    k=(CommonToken)match(input,AT,FOLLOW_AT_in_pm_SchemaImport2246); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_AT.add(k);

                    if (list_k==null) list_k=new ArrayList();
                    list_k.add(k);

                    pushFollow(FOLLOW_p_StringLiteral_in_pm_SchemaImport2250);
                    ah=p_StringLiteral();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_p_StringLiteral.add(ah.getTree());
                    if (list_ah==null) list_ah=new ArrayList();
                    list_ah.add(ah.getTree());

                    // XQueryParser.g:276:96: ( COMMA ah+= p_StringLiteral )*
                    loop19:
                    do {
                        int alt19=2;
                        int LA19_0 = input.LA(1);

                        if ( (LA19_0==COMMA) ) {
                            alt19=1;
                        }


                        switch (alt19) {
                    	case 1 :
                    	    // XQueryParser.g:276:97: COMMA ah+= p_StringLiteral
                    	    {
                    	    COMMA53=(CommonToken)match(input,COMMA,FOLLOW_COMMA_in_pm_SchemaImport2253); if (state.failed) return retval; 
                    	    if ( state.backtracking==0 ) stream_COMMA.add(COMMA53);

                    	    pushFollow(FOLLOW_p_StringLiteral_in_pm_SchemaImport2257);
                    	    ah=p_StringLiteral();

                    	    state._fsp--;
                    	    if (state.failed) return retval;
                    	    if ( state.backtracking==0 ) stream_p_StringLiteral.add(ah.getTree());
                    	    if (list_ah==null) list_ah=new ArrayList();
                    	    list_ah.add(ah.getTree());


                    	    }
                    	    break;

                    	default :
                    	    break loop19;
                        }
                    } while (true);


                    }
                    break;

            }

            SEMICOLON54=(CommonToken)match(input,SEMICOLON,FOLLOW_SEMICOLON_in_pm_SchemaImport2263); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_SEMICOLON.add(SEMICOLON54);

            if ( state.backtracking==0 ) {
              ak(list_k);
            }


            // AST REWRITE
            // elements: sp, us, ah
            // token labels: 
            // rule labels: retval, sp, us
            // token list labels: 
            // rule list labels: ah
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
            RewriteRuleSubtreeStream stream_sp=new RewriteRuleSubtreeStream(adaptor,"rule sp",sp!=null?sp.tree:null);
            RewriteRuleSubtreeStream stream_us=new RewriteRuleSubtreeStream(adaptor,"rule us",us!=null?us.tree:null);
            RewriteRuleSubtreeStream stream_ah=new RewriteRuleSubtreeStream(adaptor,"token ah",list_ah);
            root_0 = (XQDTCommonTree)adaptor.nil();
            // 277:17: -> ^( SchemaImport ^( SchemaPrefix ( $sp)? ) $us ^( AtHints ( $ah)* ) )
            {
                // XQueryParser.g:277:20: ^( SchemaImport ^( SchemaPrefix ( $sp)? ) $us ^( AtHints ( $ah)* ) )
                {
                XQDTCommonTree root_1 = (XQDTCommonTree)adaptor.nil();
                root_1 = (XQDTCommonTree)adaptor.becomeRoot((XQDTCommonTree)adaptor.create(SchemaImport, "SchemaImport"), root_1);

                // XQueryParser.g:277:35: ^( SchemaPrefix ( $sp)? )
                {
                XQDTCommonTree root_2 = (XQDTCommonTree)adaptor.nil();
                root_2 = (XQDTCommonTree)adaptor.becomeRoot((XQDTCommonTree)adaptor.create(SchemaPrefix, "SchemaPrefix"), root_2);

                // XQueryParser.g:277:50: ( $sp)?
                if ( stream_sp.hasNext() ) {
                    adaptor.addChild(root_2, stream_sp.nextTree());

                }
                stream_sp.reset();

                adaptor.addChild(root_1, root_2);
                }
                adaptor.addChild(root_1, stream_us.nextTree());
                // XQueryParser.g:277:60: ^( AtHints ( $ah)* )
                {
                XQDTCommonTree root_2 = (XQDTCommonTree)adaptor.nil();
                root_2 = (XQDTCommonTree)adaptor.becomeRoot((XQDTCommonTree)adaptor.create(AtHints, "AtHints"), root_2);

                // XQueryParser.g:277:70: ( $ah)*
                while ( stream_ah.hasNext() ) {
                    adaptor.addChild(root_2, stream_ah.nextTree());

                }
                stream_ah.reset();

                adaptor.addChild(root_1, root_2);
                }

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (XQDTCommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (XQDTCommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "pm_SchemaImport"

    public static class p_SchemaPrefix_return extends ParserRuleReturnScope {
        XQDTCommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "p_SchemaPrefix"
    // XQueryParser.g:281:1: p_SchemaPrefix : (k+= NAMESPACE nn= p_NCName EQUAL -> ^( NamespaceName $nn) | k+= DEFAULT k+= ELEMENT k+= NAMESPACE -> DefaultElementNamespace );
    public final XQueryParser.p_SchemaPrefix_return p_SchemaPrefix() throws RecognitionException {
        XQueryParser.p_SchemaPrefix_return retval = new XQueryParser.p_SchemaPrefix_return();
        retval.start = input.LT(1);

        XQDTCommonTree root_0 = null;

        CommonToken EQUAL55=null;
        CommonToken k=null;
        List list_k=null;
        XQueryParser.p_NCName_return nn = null;


        XQDTCommonTree EQUAL55_tree=null;
        XQDTCommonTree k_tree=null;
        RewriteRuleTokenStream stream_ELEMENT=new RewriteRuleTokenStream(adaptor,"token ELEMENT");
        RewriteRuleTokenStream stream_NAMESPACE=new RewriteRuleTokenStream(adaptor,"token NAMESPACE");
        RewriteRuleTokenStream stream_EQUAL=new RewriteRuleTokenStream(adaptor,"token EQUAL");
        RewriteRuleTokenStream stream_DEFAULT=new RewriteRuleTokenStream(adaptor,"token DEFAULT");
        RewriteRuleSubtreeStream stream_p_NCName=new RewriteRuleSubtreeStream(adaptor,"rule p_NCName");
        try {
            // XQueryParser.g:282:9: (k+= NAMESPACE nn= p_NCName EQUAL -> ^( NamespaceName $nn) | k+= DEFAULT k+= ELEMENT k+= NAMESPACE -> DefaultElementNamespace )
            int alt21=2;
            int LA21_0 = input.LA(1);

            if ( (LA21_0==NAMESPACE) ) {
                alt21=1;
            }
            else if ( (LA21_0==DEFAULT) ) {
                alt21=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 21, 0, input);

                throw nvae;
            }
            switch (alt21) {
                case 1 :
                    // XQueryParser.g:282:11: k+= NAMESPACE nn= p_NCName EQUAL
                    {
                    k=(CommonToken)match(input,NAMESPACE,FOLLOW_NAMESPACE_in_p_SchemaPrefix2335); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_NAMESPACE.add(k);

                    if (list_k==null) list_k=new ArrayList();
                    list_k.add(k);

                    pushFollow(FOLLOW_p_NCName_in_p_SchemaPrefix2339);
                    nn=p_NCName();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_p_NCName.add(nn.getTree());
                    EQUAL55=(CommonToken)match(input,EQUAL,FOLLOW_EQUAL_in_p_SchemaPrefix2341); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_EQUAL.add(EQUAL55);

                    if ( state.backtracking==0 ) {
                      ak(list_k);
                    }


                    // AST REWRITE
                    // elements: nn
                    // token labels: 
                    // rule labels: retval, nn
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
                    RewriteRuleSubtreeStream stream_nn=new RewriteRuleSubtreeStream(adaptor,"rule nn",nn!=null?nn.tree:null);

                    root_0 = (XQDTCommonTree)adaptor.nil();
                    // 283:17: -> ^( NamespaceName $nn)
                    {
                        // XQueryParser.g:283:20: ^( NamespaceName $nn)
                        {
                        XQDTCommonTree root_1 = (XQDTCommonTree)adaptor.nil();
                        root_1 = (XQDTCommonTree)adaptor.becomeRoot((XQDTCommonTree)adaptor.create(NamespaceName, "NamespaceName"), root_1);

                        adaptor.addChild(root_1, stream_nn.nextTree());

                        adaptor.addChild(root_0, root_1);
                        }

                    }

                    retval.tree = root_0;}
                    }
                    break;
                case 2 :
                    // XQueryParser.g:284:11: k+= DEFAULT k+= ELEMENT k+= NAMESPACE
                    {
                    k=(CommonToken)match(input,DEFAULT,FOLLOW_DEFAULT_in_p_SchemaPrefix2382); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_DEFAULT.add(k);

                    if (list_k==null) list_k=new ArrayList();
                    list_k.add(k);

                    k=(CommonToken)match(input,ELEMENT,FOLLOW_ELEMENT_in_p_SchemaPrefix2386); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_ELEMENT.add(k);

                    if (list_k==null) list_k=new ArrayList();
                    list_k.add(k);

                    k=(CommonToken)match(input,NAMESPACE,FOLLOW_NAMESPACE_in_p_SchemaPrefix2390); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_NAMESPACE.add(k);

                    if (list_k==null) list_k=new ArrayList();
                    list_k.add(k);

                    if ( state.backtracking==0 ) {
                      ak(list_k);
                    }


                    // AST REWRITE
                    // elements: 
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (XQDTCommonTree)adaptor.nil();
                    // 285:17: -> DefaultElementNamespace
                    {
                        adaptor.addChild(root_0, (XQDTCommonTree)adaptor.create(DefaultElementNamespace, "DefaultElementNamespace"));

                    }

                    retval.tree = root_0;}
                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (XQDTCommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (XQDTCommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "p_SchemaPrefix"

    public static class pm_ModuleImport_return extends ParserRuleReturnScope {
        XQDTCommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "pm_ModuleImport"
    // XQueryParser.g:289:1: pm_ModuleImport : k+= IMPORT k+= MODULE (k+= NAMESPACE nn= p_NCName EQUAL )? us= p_StringLiteral (k+= AT ah+= p_StringLiteral ( COMMA ah+= p_StringLiteral )* )? SEMICOLON -> ^( ModuleImport ^( NamespaceName ( $nn)? ) $us ^( AtHints ( $ah)* ) ) ;
    public final XQueryParser.pm_ModuleImport_return pm_ModuleImport() throws RecognitionException {
        XQueryParser.pm_ModuleImport_return retval = new XQueryParser.pm_ModuleImport_return();
        retval.start = input.LT(1);

        XQDTCommonTree root_0 = null;

        CommonToken EQUAL56=null;
        CommonToken COMMA57=null;
        CommonToken SEMICOLON58=null;
        CommonToken k=null;
        List list_k=null;
        List list_ah=null;
        XQueryParser.p_NCName_return nn = null;

        XQueryParser.p_StringLiteral_return us = null;

        XQueryParser.p_StringLiteral_return ah = null;
         ah = null;
        XQDTCommonTree EQUAL56_tree=null;
        XQDTCommonTree COMMA57_tree=null;
        XQDTCommonTree SEMICOLON58_tree=null;
        XQDTCommonTree k_tree=null;
        RewriteRuleTokenStream stream_AT=new RewriteRuleTokenStream(adaptor,"token AT");
        RewriteRuleTokenStream stream_IMPORT=new RewriteRuleTokenStream(adaptor,"token IMPORT");
        RewriteRuleTokenStream stream_SEMICOLON=new RewriteRuleTokenStream(adaptor,"token SEMICOLON");
        RewriteRuleTokenStream stream_MODULE=new RewriteRuleTokenStream(adaptor,"token MODULE");
        RewriteRuleTokenStream stream_COMMA=new RewriteRuleTokenStream(adaptor,"token COMMA");
        RewriteRuleTokenStream stream_NAMESPACE=new RewriteRuleTokenStream(adaptor,"token NAMESPACE");
        RewriteRuleTokenStream stream_EQUAL=new RewriteRuleTokenStream(adaptor,"token EQUAL");
        RewriteRuleSubtreeStream stream_p_NCName=new RewriteRuleSubtreeStream(adaptor,"rule p_NCName");
        RewriteRuleSubtreeStream stream_p_StringLiteral=new RewriteRuleSubtreeStream(adaptor,"rule p_StringLiteral");
        try {
            // XQueryParser.g:290:9: (k+= IMPORT k+= MODULE (k+= NAMESPACE nn= p_NCName EQUAL )? us= p_StringLiteral (k+= AT ah+= p_StringLiteral ( COMMA ah+= p_StringLiteral )* )? SEMICOLON -> ^( ModuleImport ^( NamespaceName ( $nn)? ) $us ^( AtHints ( $ah)* ) ) )
            // XQueryParser.g:290:11: k+= IMPORT k+= MODULE (k+= NAMESPACE nn= p_NCName EQUAL )? us= p_StringLiteral (k+= AT ah+= p_StringLiteral ( COMMA ah+= p_StringLiteral )* )? SEMICOLON
            {
            k=(CommonToken)match(input,IMPORT,FOLLOW_IMPORT_in_pm_ModuleImport2440); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_IMPORT.add(k);

            if (list_k==null) list_k=new ArrayList();
            list_k.add(k);

            k=(CommonToken)match(input,MODULE,FOLLOW_MODULE_in_pm_ModuleImport2444); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_MODULE.add(k);

            if (list_k==null) list_k=new ArrayList();
            list_k.add(k);

            // XQueryParser.g:290:31: (k+= NAMESPACE nn= p_NCName EQUAL )?
            int alt22=2;
            int LA22_0 = input.LA(1);

            if ( (LA22_0==NAMESPACE) ) {
                alt22=1;
            }
            switch (alt22) {
                case 1 :
                    // XQueryParser.g:290:32: k+= NAMESPACE nn= p_NCName EQUAL
                    {
                    k=(CommonToken)match(input,NAMESPACE,FOLLOW_NAMESPACE_in_pm_ModuleImport2449); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_NAMESPACE.add(k);

                    if (list_k==null) list_k=new ArrayList();
                    list_k.add(k);

                    pushFollow(FOLLOW_p_NCName_in_pm_ModuleImport2453);
                    nn=p_NCName();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_p_NCName.add(nn.getTree());
                    EQUAL56=(CommonToken)match(input,EQUAL,FOLLOW_EQUAL_in_pm_ModuleImport2455); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_EQUAL.add(EQUAL56);


                    }
                    break;

            }

            pushFollow(FOLLOW_p_StringLiteral_in_pm_ModuleImport2461);
            us=p_StringLiteral();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_p_StringLiteral.add(us.getTree());
            // XQueryParser.g:290:84: (k+= AT ah+= p_StringLiteral ( COMMA ah+= p_StringLiteral )* )?
            int alt24=2;
            int LA24_0 = input.LA(1);

            if ( (LA24_0==AT) ) {
                alt24=1;
            }
            switch (alt24) {
                case 1 :
                    // XQueryParser.g:290:85: k+= AT ah+= p_StringLiteral ( COMMA ah+= p_StringLiteral )*
                    {
                    k=(CommonToken)match(input,AT,FOLLOW_AT_in_pm_ModuleImport2466); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_AT.add(k);

                    if (list_k==null) list_k=new ArrayList();
                    list_k.add(k);

                    pushFollow(FOLLOW_p_StringLiteral_in_pm_ModuleImport2470);
                    ah=p_StringLiteral();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_p_StringLiteral.add(ah.getTree());
                    if (list_ah==null) list_ah=new ArrayList();
                    list_ah.add(ah.getTree());

                    // XQueryParser.g:290:111: ( COMMA ah+= p_StringLiteral )*
                    loop23:
                    do {
                        int alt23=2;
                        int LA23_0 = input.LA(1);

                        if ( (LA23_0==COMMA) ) {
                            alt23=1;
                        }


                        switch (alt23) {
                    	case 1 :
                    	    // XQueryParser.g:290:112: COMMA ah+= p_StringLiteral
                    	    {
                    	    COMMA57=(CommonToken)match(input,COMMA,FOLLOW_COMMA_in_pm_ModuleImport2473); if (state.failed) return retval; 
                    	    if ( state.backtracking==0 ) stream_COMMA.add(COMMA57);

                    	    pushFollow(FOLLOW_p_StringLiteral_in_pm_ModuleImport2477);
                    	    ah=p_StringLiteral();

                    	    state._fsp--;
                    	    if (state.failed) return retval;
                    	    if ( state.backtracking==0 ) stream_p_StringLiteral.add(ah.getTree());
                    	    if (list_ah==null) list_ah=new ArrayList();
                    	    list_ah.add(ah.getTree());


                    	    }
                    	    break;

                    	default :
                    	    break loop23;
                        }
                    } while (true);


                    }
                    break;

            }

            SEMICOLON58=(CommonToken)match(input,SEMICOLON,FOLLOW_SEMICOLON_in_pm_ModuleImport2483); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_SEMICOLON.add(SEMICOLON58);

            if ( state.backtracking==0 ) {
              ak(list_k);
            }


            // AST REWRITE
            // elements: ah, nn, us
            // token labels: 
            // rule labels: retval, nn, us
            // token list labels: 
            // rule list labels: ah
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
            RewriteRuleSubtreeStream stream_nn=new RewriteRuleSubtreeStream(adaptor,"rule nn",nn!=null?nn.tree:null);
            RewriteRuleSubtreeStream stream_us=new RewriteRuleSubtreeStream(adaptor,"rule us",us!=null?us.tree:null);
            RewriteRuleSubtreeStream stream_ah=new RewriteRuleSubtreeStream(adaptor,"token ah",list_ah);
            root_0 = (XQDTCommonTree)adaptor.nil();
            // 291:17: -> ^( ModuleImport ^( NamespaceName ( $nn)? ) $us ^( AtHints ( $ah)* ) )
            {
                // XQueryParser.g:291:20: ^( ModuleImport ^( NamespaceName ( $nn)? ) $us ^( AtHints ( $ah)* ) )
                {
                XQDTCommonTree root_1 = (XQDTCommonTree)adaptor.nil();
                root_1 = (XQDTCommonTree)adaptor.becomeRoot((XQDTCommonTree)adaptor.create(ModuleImport, "ModuleImport"), root_1);

                // XQueryParser.g:291:35: ^( NamespaceName ( $nn)? )
                {
                XQDTCommonTree root_2 = (XQDTCommonTree)adaptor.nil();
                root_2 = (XQDTCommonTree)adaptor.becomeRoot((XQDTCommonTree)adaptor.create(NamespaceName, "NamespaceName"), root_2);

                // XQueryParser.g:291:51: ( $nn)?
                if ( stream_nn.hasNext() ) {
                    adaptor.addChild(root_2, stream_nn.nextTree());

                }
                stream_nn.reset();

                adaptor.addChild(root_1, root_2);
                }
                adaptor.addChild(root_1, stream_us.nextTree());
                // XQueryParser.g:291:61: ^( AtHints ( $ah)* )
                {
                XQDTCommonTree root_2 = (XQDTCommonTree)adaptor.nil();
                root_2 = (XQDTCommonTree)adaptor.becomeRoot((XQDTCommonTree)adaptor.create(AtHints, "AtHints"), root_2);

                // XQueryParser.g:291:71: ( $ah)*
                while ( stream_ah.hasNext() ) {
                    adaptor.addChild(root_2, stream_ah.nextTree());

                }
                stream_ah.reset();

                adaptor.addChild(root_1, root_2);
                }

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (XQDTCommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (XQDTCommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "pm_ModuleImport"

    public static class pm_VarDecl_return extends ParserRuleReturnScope {
        XQDTCommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "pm_VarDecl"
    // XQueryParser.g:295:1: pm_VarDecl : k+= DECLARE p_PrivateOption vdt= pg_VarDeclType DOLLAR qn= p_QName (td= p_TypeDeclaration )? ( ( BIND es= p_ExprSingle ) | (k+= EXTERNAL ( BIND des= p_ExprSingle )? ) ) SEMICOLON -> ^( VarDecl $vdt $qn ^( VarType ( $td)? ) ^( VarValue ( $es)? ^( VarDefaultValue ( $des)? ) ) ) ;
    public final XQueryParser.pm_VarDecl_return pm_VarDecl() throws RecognitionException {
        XQueryParser.pm_VarDecl_return retval = new XQueryParser.pm_VarDecl_return();
        retval.start = input.LT(1);

        XQDTCommonTree root_0 = null;

        CommonToken DOLLAR60=null;
        CommonToken BIND61=null;
        CommonToken BIND62=null;
        CommonToken SEMICOLON63=null;
        CommonToken k=null;
        List list_k=null;
        XQueryParser.pg_VarDeclType_return vdt = null;

        XQueryParser.p_QName_return qn = null;

        XQueryParser.p_TypeDeclaration_return td = null;

        XQueryParser.p_ExprSingle_return es = null;

        XQueryParser.p_ExprSingle_return des = null;

        XQueryParser.p_PrivateOption_return p_PrivateOption59 = null;


        XQDTCommonTree DOLLAR60_tree=null;
        XQDTCommonTree BIND61_tree=null;
        XQDTCommonTree BIND62_tree=null;
        XQDTCommonTree SEMICOLON63_tree=null;
        XQDTCommonTree k_tree=null;
        RewriteRuleTokenStream stream_DOLLAR=new RewriteRuleTokenStream(adaptor,"token DOLLAR");
        RewriteRuleTokenStream stream_DECLARE=new RewriteRuleTokenStream(adaptor,"token DECLARE");
        RewriteRuleTokenStream stream_EXTERNAL=new RewriteRuleTokenStream(adaptor,"token EXTERNAL");
        RewriteRuleTokenStream stream_SEMICOLON=new RewriteRuleTokenStream(adaptor,"token SEMICOLON");
        RewriteRuleTokenStream stream_BIND=new RewriteRuleTokenStream(adaptor,"token BIND");
        RewriteRuleSubtreeStream stream_p_TypeDeclaration=new RewriteRuleSubtreeStream(adaptor,"rule p_TypeDeclaration");
        RewriteRuleSubtreeStream stream_p_QName=new RewriteRuleSubtreeStream(adaptor,"rule p_QName");
        RewriteRuleSubtreeStream stream_p_PrivateOption=new RewriteRuleSubtreeStream(adaptor,"rule p_PrivateOption");
        RewriteRuleSubtreeStream stream_p_ExprSingle=new RewriteRuleSubtreeStream(adaptor,"rule p_ExprSingle");
        RewriteRuleSubtreeStream stream_pg_VarDeclType=new RewriteRuleSubtreeStream(adaptor,"rule pg_VarDeclType");
        try {
            // XQueryParser.g:296:9: (k+= DECLARE p_PrivateOption vdt= pg_VarDeclType DOLLAR qn= p_QName (td= p_TypeDeclaration )? ( ( BIND es= p_ExprSingle ) | (k+= EXTERNAL ( BIND des= p_ExprSingle )? ) ) SEMICOLON -> ^( VarDecl $vdt $qn ^( VarType ( $td)? ) ^( VarValue ( $es)? ^( VarDefaultValue ( $des)? ) ) ) )
            // XQueryParser.g:296:11: k+= DECLARE p_PrivateOption vdt= pg_VarDeclType DOLLAR qn= p_QName (td= p_TypeDeclaration )? ( ( BIND es= p_ExprSingle ) | (k+= EXTERNAL ( BIND des= p_ExprSingle )? ) ) SEMICOLON
            {
            k=(CommonToken)match(input,DECLARE,FOLLOW_DECLARE_in_pm_VarDecl2554); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_DECLARE.add(k);

            if (list_k==null) list_k=new ArrayList();
            list_k.add(k);

            pushFollow(FOLLOW_p_PrivateOption_in_pm_VarDecl2556);
            p_PrivateOption59=p_PrivateOption();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_p_PrivateOption.add(p_PrivateOption59.getTree());
            pushFollow(FOLLOW_pg_VarDeclType_in_pm_VarDecl2560);
            vdt=pg_VarDeclType();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_pg_VarDeclType.add(vdt.getTree());
            DOLLAR60=(CommonToken)match(input,DOLLAR,FOLLOW_DOLLAR_in_pm_VarDecl2562); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_DOLLAR.add(DOLLAR60);

            pushFollow(FOLLOW_p_QName_in_pm_VarDecl2566);
            qn=p_QName();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_p_QName.add(qn.getTree());
            // XQueryParser.g:296:77: (td= p_TypeDeclaration )?
            int alt25=2;
            int LA25_0 = input.LA(1);

            if ( (LA25_0==AS) ) {
                alt25=1;
            }
            switch (alt25) {
                case 1 :
                    // XQueryParser.g:296:77: td= p_TypeDeclaration
                    {
                    pushFollow(FOLLOW_p_TypeDeclaration_in_pm_VarDecl2570);
                    td=p_TypeDeclaration();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_p_TypeDeclaration.add(td.getTree());

                    }
                    break;

            }

            // XQueryParser.g:296:97: ( ( BIND es= p_ExprSingle ) | (k+= EXTERNAL ( BIND des= p_ExprSingle )? ) )
            int alt27=2;
            int LA27_0 = input.LA(1);

            if ( (LA27_0==BIND) ) {
                alt27=1;
            }
            else if ( (LA27_0==EXTERNAL) ) {
                alt27=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 27, 0, input);

                throw nvae;
            }
            switch (alt27) {
                case 1 :
                    // XQueryParser.g:296:98: ( BIND es= p_ExprSingle )
                    {
                    // XQueryParser.g:296:98: ( BIND es= p_ExprSingle )
                    // XQueryParser.g:296:99: BIND es= p_ExprSingle
                    {
                    BIND61=(CommonToken)match(input,BIND,FOLLOW_BIND_in_pm_VarDecl2575); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_BIND.add(BIND61);

                    pushFollow(FOLLOW_p_ExprSingle_in_pm_VarDecl2579);
                    es=p_ExprSingle();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_p_ExprSingle.add(es.getTree());

                    }


                    }
                    break;
                case 2 :
                    // XQueryParser.g:296:123: (k+= EXTERNAL ( BIND des= p_ExprSingle )? )
                    {
                    // XQueryParser.g:296:123: (k+= EXTERNAL ( BIND des= p_ExprSingle )? )
                    // XQueryParser.g:296:124: k+= EXTERNAL ( BIND des= p_ExprSingle )?
                    {
                    k=(CommonToken)match(input,EXTERNAL,FOLLOW_EXTERNAL_in_pm_VarDecl2587); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_EXTERNAL.add(k);

                    if (list_k==null) list_k=new ArrayList();
                    list_k.add(k);

                    // XQueryParser.g:296:136: ( BIND des= p_ExprSingle )?
                    int alt26=2;
                    int LA26_0 = input.LA(1);

                    if ( (LA26_0==BIND) ) {
                        alt26=1;
                    }
                    switch (alt26) {
                        case 1 :
                            // XQueryParser.g:296:137: BIND des= p_ExprSingle
                            {
                            BIND62=(CommonToken)match(input,BIND,FOLLOW_BIND_in_pm_VarDecl2590); if (state.failed) return retval; 
                            if ( state.backtracking==0 ) stream_BIND.add(BIND62);

                            pushFollow(FOLLOW_p_ExprSingle_in_pm_VarDecl2594);
                            des=p_ExprSingle();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_p_ExprSingle.add(des.getTree());

                            }
                            break;

                    }


                    }


                    }
                    break;

            }

            SEMICOLON63=(CommonToken)match(input,SEMICOLON,FOLLOW_SEMICOLON_in_pm_VarDecl2600); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_SEMICOLON.add(SEMICOLON63);

            if ( state.backtracking==0 ) {
              ak(list_k);
            }


            // AST REWRITE
            // elements: des, es, td, qn, vdt
            // token labels: 
            // rule labels: qn, retval, des, td, vdt, es
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_qn=new RewriteRuleSubtreeStream(adaptor,"rule qn",qn!=null?qn.tree:null);
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
            RewriteRuleSubtreeStream stream_des=new RewriteRuleSubtreeStream(adaptor,"rule des",des!=null?des.tree:null);
            RewriteRuleSubtreeStream stream_td=new RewriteRuleSubtreeStream(adaptor,"rule td",td!=null?td.tree:null);
            RewriteRuleSubtreeStream stream_vdt=new RewriteRuleSubtreeStream(adaptor,"rule vdt",vdt!=null?vdt.tree:null);
            RewriteRuleSubtreeStream stream_es=new RewriteRuleSubtreeStream(adaptor,"rule es",es!=null?es.tree:null);

            root_0 = (XQDTCommonTree)adaptor.nil();
            // 297:17: -> ^( VarDecl $vdt $qn ^( VarType ( $td)? ) ^( VarValue ( $es)? ^( VarDefaultValue ( $des)? ) ) )
            {
                // XQueryParser.g:297:20: ^( VarDecl $vdt $qn ^( VarType ( $td)? ) ^( VarValue ( $es)? ^( VarDefaultValue ( $des)? ) ) )
                {
                XQDTCommonTree root_1 = (XQDTCommonTree)adaptor.nil();
                root_1 = (XQDTCommonTree)adaptor.becomeRoot((XQDTCommonTree)adaptor.create(VarDecl, "VarDecl"), root_1);

                adaptor.addChild(root_1, stream_vdt.nextTree());
                adaptor.addChild(root_1, stream_qn.nextTree());
                // XQueryParser.g:297:39: ^( VarType ( $td)? )
                {
                XQDTCommonTree root_2 = (XQDTCommonTree)adaptor.nil();
                root_2 = (XQDTCommonTree)adaptor.becomeRoot((XQDTCommonTree)adaptor.create(VarType, "VarType"), root_2);

                // XQueryParser.g:297:49: ( $td)?
                if ( stream_td.hasNext() ) {
                    adaptor.addChild(root_2, stream_td.nextTree());

                }
                stream_td.reset();

                adaptor.addChild(root_1, root_2);
                }
                // XQueryParser.g:297:55: ^( VarValue ( $es)? ^( VarDefaultValue ( $des)? ) )
                {
                XQDTCommonTree root_2 = (XQDTCommonTree)adaptor.nil();
                root_2 = (XQDTCommonTree)adaptor.becomeRoot((XQDTCommonTree)adaptor.create(VarValue, "VarValue"), root_2);

                // XQueryParser.g:297:66: ( $es)?
                if ( stream_es.hasNext() ) {
                    adaptor.addChild(root_2, stream_es.nextTree());

                }
                stream_es.reset();
                // XQueryParser.g:297:71: ^( VarDefaultValue ( $des)? )
                {
                XQDTCommonTree root_3 = (XQDTCommonTree)adaptor.nil();
                root_3 = (XQDTCommonTree)adaptor.becomeRoot((XQDTCommonTree)adaptor.create(VarDefaultValue, "VarDefaultValue"), root_3);

                // XQueryParser.g:297:89: ( $des)?
                if ( stream_des.hasNext() ) {
                    adaptor.addChild(root_3, stream_des.nextTree());

                }
                stream_des.reset();

                adaptor.addChild(root_2, root_3);
                }

                adaptor.addChild(root_1, root_2);
                }

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (XQDTCommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (XQDTCommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "pm_VarDecl"

    public static class pg_VarDeclType_return extends ParserRuleReturnScope {
        XQDTCommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "pg_VarDeclType"
    // XQueryParser.g:304:1: pg_VarDeclType : ({...}? =>ku= CONSTANT -> VarConstantDecl | kv= VARIABLE -> VarVariableDecl );
    public final XQueryParser.pg_VarDeclType_return pg_VarDeclType() throws RecognitionException {
        XQueryParser.pg_VarDeclType_return retval = new XQueryParser.pg_VarDeclType_return();
        retval.start = input.LT(1);

        XQDTCommonTree root_0 = null;

        CommonToken ku=null;
        CommonToken kv=null;

        XQDTCommonTree ku_tree=null;
        XQDTCommonTree kv_tree=null;
        RewriteRuleTokenStream stream_CONSTANT=new RewriteRuleTokenStream(adaptor,"token CONSTANT");
        RewriteRuleTokenStream stream_VARIABLE=new RewriteRuleTokenStream(adaptor,"token VARIABLE");

        try {
            // XQueryParser.g:305:9: ({...}? =>ku= CONSTANT -> VarConstantDecl | kv= VARIABLE -> VarVariableDecl )
            int alt28=2;
            int LA28_0 = input.LA(1);

            if ( (LA28_0==CONSTANT) && ((lc(XQS)))) {
                alt28=1;
            }
            else if ( (LA28_0==VARIABLE) ) {
                alt28=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 28, 0, input);

                throw nvae;
            }
            switch (alt28) {
                case 1 :
                    // XQueryParser.g:305:11: {...}? =>ku= CONSTANT
                    {
                    if ( !((lc(XQS))) ) {
                        if (state.backtracking>0) {state.failed=true; return retval;}
                        throw new FailedPredicateException(input, "pg_VarDeclType", "lc(XQS)");
                    }
                    ku=(CommonToken)match(input,CONSTANT,FOLLOW_CONSTANT_in_pg_VarDeclType2688); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_CONSTANT.add(ku);

                    if ( state.backtracking==0 ) {
                      ak(ku);
                    }


                    // AST REWRITE
                    // elements: 
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (XQDTCommonTree)adaptor.nil();
                    // 306:17: -> VarConstantDecl
                    {
                        adaptor.addChild(root_0, (XQDTCommonTree)adaptor.create(VarConstantDecl, "VarConstantDecl"));

                    }

                    retval.tree = root_0;}
                    }
                    break;
                case 2 :
                    // XQueryParser.g:307:11: kv= VARIABLE
                    {
                    kv=(CommonToken)match(input,VARIABLE,FOLLOW_VARIABLE_in_pg_VarDeclType2724); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_VARIABLE.add(kv);

                    if ( state.backtracking==0 ) {
                      ak(kv);
                    }


                    // AST REWRITE
                    // elements: 
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (XQDTCommonTree)adaptor.nil();
                    // 308:17: -> VarVariableDecl
                    {
                        adaptor.addChild(root_0, (XQDTCommonTree)adaptor.create(VarVariableDecl, "VarVariableDecl"));

                    }

                    retval.tree = root_0;}
                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (XQDTCommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (XQDTCommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "pg_VarDeclType"

    public static class pm_ContextItemDecl_return extends ParserRuleReturnScope {
        XQDTCommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "pm_ContextItemDecl"
    // XQueryParser.g:319:1: pm_ContextItemDecl : k+= DECLARE k+= CONTEXT k+= ITEM (k+= AS p_ItemType )? ( ( BIND p_ExprSingle ) | (k+= EXTERNAL ( BIND p_ExprSingle )? ) ) SEMICOLON ;
    public final XQueryParser.pm_ContextItemDecl_return pm_ContextItemDecl() throws RecognitionException {
        XQueryParser.pm_ContextItemDecl_return retval = new XQueryParser.pm_ContextItemDecl_return();
        retval.start = input.LT(1);

        XQDTCommonTree root_0 = null;

        CommonToken BIND65=null;
        CommonToken BIND67=null;
        CommonToken SEMICOLON69=null;
        CommonToken k=null;
        List list_k=null;
        XQueryParser.p_ItemType_return p_ItemType64 = null;

        XQueryParser.p_ExprSingle_return p_ExprSingle66 = null;

        XQueryParser.p_ExprSingle_return p_ExprSingle68 = null;


        XQDTCommonTree BIND65_tree=null;
        XQDTCommonTree BIND67_tree=null;
        XQDTCommonTree SEMICOLON69_tree=null;
        XQDTCommonTree k_tree=null;

        try {
            // XQueryParser.g:320:9: (k+= DECLARE k+= CONTEXT k+= ITEM (k+= AS p_ItemType )? ( ( BIND p_ExprSingle ) | (k+= EXTERNAL ( BIND p_ExprSingle )? ) ) SEMICOLON )
            // XQueryParser.g:320:13: k+= DECLARE k+= CONTEXT k+= ITEM (k+= AS p_ItemType )? ( ( BIND p_ExprSingle ) | (k+= EXTERNAL ( BIND p_ExprSingle )? ) ) SEMICOLON
            {
            root_0 = (XQDTCommonTree)adaptor.nil();

            k=(CommonToken)match(input,DECLARE,FOLLOW_DECLARE_in_pm_ContextItemDecl2783); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            k_tree = (XQDTCommonTree)adaptor.create(k);
            adaptor.addChild(root_0, k_tree);
            }
            if (list_k==null) list_k=new ArrayList();
            list_k.add(k);

            k=(CommonToken)match(input,CONTEXT,FOLLOW_CONTEXT_in_pm_ContextItemDecl2787); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            k_tree = (XQDTCommonTree)adaptor.create(k);
            adaptor.addChild(root_0, k_tree);
            }
            if (list_k==null) list_k=new ArrayList();
            list_k.add(k);

            k=(CommonToken)match(input,ITEM,FOLLOW_ITEM_in_pm_ContextItemDecl2791); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            k_tree = (XQDTCommonTree)adaptor.create(k);
            adaptor.addChild(root_0, k_tree);
            }
            if (list_k==null) list_k=new ArrayList();
            list_k.add(k);

            // XQueryParser.g:320:43: (k+= AS p_ItemType )?
            int alt29=2;
            int LA29_0 = input.LA(1);

            if ( (LA29_0==AS) ) {
                alt29=1;
            }
            switch (alt29) {
                case 1 :
                    // XQueryParser.g:320:44: k+= AS p_ItemType
                    {
                    k=(CommonToken)match(input,AS,FOLLOW_AS_in_pm_ContextItemDecl2796); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    k_tree = (XQDTCommonTree)adaptor.create(k);
                    adaptor.addChild(root_0, k_tree);
                    }
                    if (list_k==null) list_k=new ArrayList();
                    list_k.add(k);

                    pushFollow(FOLLOW_p_ItemType_in_pm_ContextItemDecl2798);
                    p_ItemType64=p_ItemType();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, p_ItemType64.getTree());

                    }
                    break;

            }

            // XQueryParser.g:320:63: ( ( BIND p_ExprSingle ) | (k+= EXTERNAL ( BIND p_ExprSingle )? ) )
            int alt31=2;
            int LA31_0 = input.LA(1);

            if ( (LA31_0==BIND) ) {
                alt31=1;
            }
            else if ( (LA31_0==EXTERNAL) ) {
                alt31=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 31, 0, input);

                throw nvae;
            }
            switch (alt31) {
                case 1 :
                    // XQueryParser.g:320:64: ( BIND p_ExprSingle )
                    {
                    // XQueryParser.g:320:64: ( BIND p_ExprSingle )
                    // XQueryParser.g:320:65: BIND p_ExprSingle
                    {
                    BIND65=(CommonToken)match(input,BIND,FOLLOW_BIND_in_pm_ContextItemDecl2804); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    BIND65_tree = (XQDTCommonTree)adaptor.create(BIND65);
                    adaptor.addChild(root_0, BIND65_tree);
                    }
                    pushFollow(FOLLOW_p_ExprSingle_in_pm_ContextItemDecl2806);
                    p_ExprSingle66=p_ExprSingle();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, p_ExprSingle66.getTree());

                    }


                    }
                    break;
                case 2 :
                    // XQueryParser.g:320:86: (k+= EXTERNAL ( BIND p_ExprSingle )? )
                    {
                    // XQueryParser.g:320:86: (k+= EXTERNAL ( BIND p_ExprSingle )? )
                    // XQueryParser.g:320:87: k+= EXTERNAL ( BIND p_ExprSingle )?
                    {
                    k=(CommonToken)match(input,EXTERNAL,FOLLOW_EXTERNAL_in_pm_ContextItemDecl2814); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    k_tree = (XQDTCommonTree)adaptor.create(k);
                    adaptor.addChild(root_0, k_tree);
                    }
                    if (list_k==null) list_k=new ArrayList();
                    list_k.add(k);

                    // XQueryParser.g:320:99: ( BIND p_ExprSingle )?
                    int alt30=2;
                    int LA30_0 = input.LA(1);

                    if ( (LA30_0==BIND) ) {
                        alt30=1;
                    }
                    switch (alt30) {
                        case 1 :
                            // XQueryParser.g:320:100: BIND p_ExprSingle
                            {
                            BIND67=(CommonToken)match(input,BIND,FOLLOW_BIND_in_pm_ContextItemDecl2817); if (state.failed) return retval;
                            if ( state.backtracking==0 ) {
                            BIND67_tree = (XQDTCommonTree)adaptor.create(BIND67);
                            adaptor.addChild(root_0, BIND67_tree);
                            }
                            pushFollow(FOLLOW_p_ExprSingle_in_pm_ContextItemDecl2819);
                            p_ExprSingle68=p_ExprSingle();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) adaptor.addChild(root_0, p_ExprSingle68.getTree());

                            }
                            break;

                    }


                    }


                    }
                    break;

            }

            SEMICOLON69=(CommonToken)match(input,SEMICOLON,FOLLOW_SEMICOLON_in_pm_ContextItemDecl2825); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            SEMICOLON69_tree = (XQDTCommonTree)adaptor.create(SEMICOLON69);
            adaptor.addChild(root_0, SEMICOLON69_tree);
            }
            if ( state.backtracking==0 ) {
              ak(list_k);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (XQDTCommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (XQDTCommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "pm_ContextItemDecl"

    public static class pm_ConstructionDecl_return extends ParserRuleReturnScope {
        XQDTCommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "pm_ConstructionDecl"
    // XQueryParser.g:327:1: pm_ConstructionDecl : k+= DECLARE k+= CONSTRUCTION (k+= STRIP | k+= PRESERVE ) SEMICOLON ;
    public final XQueryParser.pm_ConstructionDecl_return pm_ConstructionDecl() throws RecognitionException {
        XQueryParser.pm_ConstructionDecl_return retval = new XQueryParser.pm_ConstructionDecl_return();
        retval.start = input.LT(1);

        XQDTCommonTree root_0 = null;

        CommonToken SEMICOLON70=null;
        CommonToken k=null;
        List list_k=null;

        XQDTCommonTree SEMICOLON70_tree=null;
        XQDTCommonTree k_tree=null;

        try {
            // XQueryParser.g:328:9: (k+= DECLARE k+= CONSTRUCTION (k+= STRIP | k+= PRESERVE ) SEMICOLON )
            // XQueryParser.g:328:13: k+= DECLARE k+= CONSTRUCTION (k+= STRIP | k+= PRESERVE ) SEMICOLON
            {
            root_0 = (XQDTCommonTree)adaptor.nil();

            k=(CommonToken)match(input,DECLARE,FOLLOW_DECLARE_in_pm_ConstructionDecl2860); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            k_tree = (XQDTCommonTree)adaptor.create(k);
            adaptor.addChild(root_0, k_tree);
            }
            if (list_k==null) list_k=new ArrayList();
            list_k.add(k);

            k=(CommonToken)match(input,CONSTRUCTION,FOLLOW_CONSTRUCTION_in_pm_ConstructionDecl2864); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            k_tree = (XQDTCommonTree)adaptor.create(k);
            adaptor.addChild(root_0, k_tree);
            }
            if (list_k==null) list_k=new ArrayList();
            list_k.add(k);

            // XQueryParser.g:328:40: (k+= STRIP | k+= PRESERVE )
            int alt32=2;
            int LA32_0 = input.LA(1);

            if ( (LA32_0==STRIP) ) {
                alt32=1;
            }
            else if ( (LA32_0==PRESERVE) ) {
                alt32=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 32, 0, input);

                throw nvae;
            }
            switch (alt32) {
                case 1 :
                    // XQueryParser.g:328:41: k+= STRIP
                    {
                    k=(CommonToken)match(input,STRIP,FOLLOW_STRIP_in_pm_ConstructionDecl2869); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    k_tree = (XQDTCommonTree)adaptor.create(k);
                    adaptor.addChild(root_0, k_tree);
                    }
                    if (list_k==null) list_k=new ArrayList();
                    list_k.add(k);


                    }
                    break;
                case 2 :
                    // XQueryParser.g:328:52: k+= PRESERVE
                    {
                    k=(CommonToken)match(input,PRESERVE,FOLLOW_PRESERVE_in_pm_ConstructionDecl2875); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    k_tree = (XQDTCommonTree)adaptor.create(k);
                    adaptor.addChild(root_0, k_tree);
                    }
                    if (list_k==null) list_k=new ArrayList();
                    list_k.add(k);


                    }
                    break;

            }

            SEMICOLON70=(CommonToken)match(input,SEMICOLON,FOLLOW_SEMICOLON_in_pm_ConstructionDecl2878); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            SEMICOLON70_tree = (XQDTCommonTree)adaptor.create(SEMICOLON70);
            adaptor.addChild(root_0, SEMICOLON70_tree);
            }
            if ( state.backtracking==0 ) {
              ak(list_k);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (XQDTCommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (XQDTCommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "pm_ConstructionDecl"

    public static class pm_FunctionDecl_return extends ParserRuleReturnScope {
        XQDTCommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "pm_FunctionDecl"
    // XQueryParser.g:334:1: pm_FunctionDecl : ({...}? =>k+= DECLARE k+= SEQUENTIAL k+= FUNCTION qn= p_QName LPAREN (pl= p_ParamList )? RPAREN (td= p_TypeDeclaration )? (b= p_Block | k+= EXTERNAL ) SEMICOLON -> ^( FunctionDecl $qn ^( ParamList ( $pl)? ) ^( ReturnType ( $td)? ) ( $b)? ) | k+= DECLARE p_PrivateOption p_FunctionType k+= FUNCTION qn= p_QName LPAREN (pl= p_ParamList )? RPAREN (td= p_TypeDeclaration )? (ee= p_EnclosedExpr | k+= EXTERNAL ) SEMICOLON -> ^( FunctionDecl $qn ^( ParamList ( $pl)? ) ^( ReturnType ( $td)? ) ( $ee)? ) );
    public final XQueryParser.pm_FunctionDecl_return pm_FunctionDecl() throws RecognitionException {
        XQueryParser.pm_FunctionDecl_return retval = new XQueryParser.pm_FunctionDecl_return();
        retval.start = input.LT(1);

        XQDTCommonTree root_0 = null;

        CommonToken LPAREN71=null;
        CommonToken RPAREN72=null;
        CommonToken SEMICOLON73=null;
        CommonToken LPAREN76=null;
        CommonToken RPAREN77=null;
        CommonToken SEMICOLON78=null;
        CommonToken k=null;
        List list_k=null;
        XQueryParser.p_QName_return qn = null;

        XQueryParser.p_ParamList_return pl = null;

        XQueryParser.p_TypeDeclaration_return td = null;

        XQueryParser.p_Block_return b = null;

        XQueryParser.p_EnclosedExpr_return ee = null;

        XQueryParser.p_PrivateOption_return p_PrivateOption74 = null;

        XQueryParser.p_FunctionType_return p_FunctionType75 = null;


        XQDTCommonTree LPAREN71_tree=null;
        XQDTCommonTree RPAREN72_tree=null;
        XQDTCommonTree SEMICOLON73_tree=null;
        XQDTCommonTree LPAREN76_tree=null;
        XQDTCommonTree RPAREN77_tree=null;
        XQDTCommonTree SEMICOLON78_tree=null;
        XQDTCommonTree k_tree=null;
        RewriteRuleTokenStream stream_FUNCTION=new RewriteRuleTokenStream(adaptor,"token FUNCTION");
        RewriteRuleTokenStream stream_DECLARE=new RewriteRuleTokenStream(adaptor,"token DECLARE");
        RewriteRuleTokenStream stream_RPAREN=new RewriteRuleTokenStream(adaptor,"token RPAREN");
        RewriteRuleTokenStream stream_EXTERNAL=new RewriteRuleTokenStream(adaptor,"token EXTERNAL");
        RewriteRuleTokenStream stream_SEMICOLON=new RewriteRuleTokenStream(adaptor,"token SEMICOLON");
        RewriteRuleTokenStream stream_SEQUENTIAL=new RewriteRuleTokenStream(adaptor,"token SEQUENTIAL");
        RewriteRuleTokenStream stream_LPAREN=new RewriteRuleTokenStream(adaptor,"token LPAREN");
        RewriteRuleSubtreeStream stream_p_Block=new RewriteRuleSubtreeStream(adaptor,"rule p_Block");
        RewriteRuleSubtreeStream stream_p_TypeDeclaration=new RewriteRuleSubtreeStream(adaptor,"rule p_TypeDeclaration");
        RewriteRuleSubtreeStream stream_p_QName=new RewriteRuleSubtreeStream(adaptor,"rule p_QName");
        RewriteRuleSubtreeStream stream_p_ParamList=new RewriteRuleSubtreeStream(adaptor,"rule p_ParamList");
        RewriteRuleSubtreeStream stream_p_PrivateOption=new RewriteRuleSubtreeStream(adaptor,"rule p_PrivateOption");
        RewriteRuleSubtreeStream stream_p_FunctionType=new RewriteRuleSubtreeStream(adaptor,"rule p_FunctionType");
        RewriteRuleSubtreeStream stream_p_EnclosedExpr=new RewriteRuleSubtreeStream(adaptor,"rule p_EnclosedExpr");
        try {
            // XQueryParser.g:335:9: ({...}? =>k+= DECLARE k+= SEQUENTIAL k+= FUNCTION qn= p_QName LPAREN (pl= p_ParamList )? RPAREN (td= p_TypeDeclaration )? (b= p_Block | k+= EXTERNAL ) SEMICOLON -> ^( FunctionDecl $qn ^( ParamList ( $pl)? ) ^( ReturnType ( $td)? ) ( $b)? ) | k+= DECLARE p_PrivateOption p_FunctionType k+= FUNCTION qn= p_QName LPAREN (pl= p_ParamList )? RPAREN (td= p_TypeDeclaration )? (ee= p_EnclosedExpr | k+= EXTERNAL ) SEMICOLON -> ^( FunctionDecl $qn ^( ParamList ( $pl)? ) ^( ReturnType ( $td)? ) ( $ee)? ) )
            int alt39=2;
            int LA39_0 = input.LA(1);

            if ( (LA39_0==DECLARE) ) {
                int LA39_1 = input.LA(2);

                if ( (LA39_1==SEQUENTIAL) && ((lc(XQS)))) {
                    alt39=1;
                }
                else if ( (LA39_1==FUNCTION||LA39_1==UPDATING||LA39_1==SIMPLE||LA39_1==PRIVATE) ) {
                    alt39=2;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 39, 1, input);

                    throw nvae;
                }
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 39, 0, input);

                throw nvae;
            }
            switch (alt39) {
                case 1 :
                    // XQueryParser.g:335:13: {...}? =>k+= DECLARE k+= SEQUENTIAL k+= FUNCTION qn= p_QName LPAREN (pl= p_ParamList )? RPAREN (td= p_TypeDeclaration )? (b= p_Block | k+= EXTERNAL ) SEMICOLON
                    {
                    if ( !((lc(XQS))) ) {
                        if (state.backtracking>0) {state.failed=true; return retval;}
                        throw new FailedPredicateException(input, "pm_FunctionDecl", "lc(XQS)");
                    }
                    k=(CommonToken)match(input,DECLARE,FOLLOW_DECLARE_in_pm_FunctionDecl2915); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_DECLARE.add(k);

                    if (list_k==null) list_k=new ArrayList();
                    list_k.add(k);

                    k=(CommonToken)match(input,SEQUENTIAL,FOLLOW_SEQUENTIAL_in_pm_FunctionDecl2919); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_SEQUENTIAL.add(k);

                    if (list_k==null) list_k=new ArrayList();
                    list_k.add(k);

                    k=(CommonToken)match(input,FUNCTION,FOLLOW_FUNCTION_in_pm_FunctionDecl2923); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_FUNCTION.add(k);

                    if (list_k==null) list_k=new ArrayList();
                    list_k.add(k);

                    pushFollow(FOLLOW_p_QName_in_pm_FunctionDecl2927);
                    qn=p_QName();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_p_QName.add(qn.getTree());
                    LPAREN71=(CommonToken)match(input,LPAREN,FOLLOW_LPAREN_in_pm_FunctionDecl2929); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_LPAREN.add(LPAREN71);

                    // XQueryParser.g:335:83: (pl= p_ParamList )?
                    int alt33=2;
                    int LA33_0 = input.LA(1);

                    if ( (LA33_0==DOLLAR) ) {
                        alt33=1;
                    }
                    switch (alt33) {
                        case 1 :
                            // XQueryParser.g:335:83: pl= p_ParamList
                            {
                            pushFollow(FOLLOW_p_ParamList_in_pm_FunctionDecl2933);
                            pl=p_ParamList();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_p_ParamList.add(pl.getTree());

                            }
                            break;

                    }

                    RPAREN72=(CommonToken)match(input,RPAREN,FOLLOW_RPAREN_in_pm_FunctionDecl2936); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_RPAREN.add(RPAREN72);

                    // XQueryParser.g:335:106: (td= p_TypeDeclaration )?
                    int alt34=2;
                    int LA34_0 = input.LA(1);

                    if ( (LA34_0==AS) ) {
                        alt34=1;
                    }
                    switch (alt34) {
                        case 1 :
                            // XQueryParser.g:335:106: td= p_TypeDeclaration
                            {
                            pushFollow(FOLLOW_p_TypeDeclaration_in_pm_FunctionDecl2940);
                            td=p_TypeDeclaration();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_p_TypeDeclaration.add(td.getTree());

                            }
                            break;

                    }

                    // XQueryParser.g:335:126: (b= p_Block | k+= EXTERNAL )
                    int alt35=2;
                    int LA35_0 = input.LA(1);

                    if ( (LA35_0==LBRACKET) ) {
                        alt35=1;
                    }
                    else if ( (LA35_0==EXTERNAL) ) {
                        alt35=2;
                    }
                    else {
                        if (state.backtracking>0) {state.failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("", 35, 0, input);

                        throw nvae;
                    }
                    switch (alt35) {
                        case 1 :
                            // XQueryParser.g:335:127: b= p_Block
                            {
                            pushFollow(FOLLOW_p_Block_in_pm_FunctionDecl2946);
                            b=p_Block();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_p_Block.add(b.getTree());

                            }
                            break;
                        case 2 :
                            // XQueryParser.g:335:139: k+= EXTERNAL
                            {
                            k=(CommonToken)match(input,EXTERNAL,FOLLOW_EXTERNAL_in_pm_FunctionDecl2952); if (state.failed) return retval; 
                            if ( state.backtracking==0 ) stream_EXTERNAL.add(k);

                            if (list_k==null) list_k=new ArrayList();
                            list_k.add(k);


                            }
                            break;

                    }

                    SEMICOLON73=(CommonToken)match(input,SEMICOLON,FOLLOW_SEMICOLON_in_pm_FunctionDecl2955); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_SEMICOLON.add(SEMICOLON73);

                    if ( state.backtracking==0 ) {
                      ak(list_k);
                    }


                    // AST REWRITE
                    // elements: b, td, pl, qn
                    // token labels: 
                    // rule labels: qn, retval, b, pl, td
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_qn=new RewriteRuleSubtreeStream(adaptor,"rule qn",qn!=null?qn.tree:null);
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
                    RewriteRuleSubtreeStream stream_b=new RewriteRuleSubtreeStream(adaptor,"rule b",b!=null?b.tree:null);
                    RewriteRuleSubtreeStream stream_pl=new RewriteRuleSubtreeStream(adaptor,"rule pl",pl!=null?pl.tree:null);
                    RewriteRuleSubtreeStream stream_td=new RewriteRuleSubtreeStream(adaptor,"rule td",td!=null?td.tree:null);

                    root_0 = (XQDTCommonTree)adaptor.nil();
                    // 336:17: -> ^( FunctionDecl $qn ^( ParamList ( $pl)? ) ^( ReturnType ( $td)? ) ( $b)? )
                    {
                        // XQueryParser.g:336:20: ^( FunctionDecl $qn ^( ParamList ( $pl)? ) ^( ReturnType ( $td)? ) ( $b)? )
                        {
                        XQDTCommonTree root_1 = (XQDTCommonTree)adaptor.nil();
                        root_1 = (XQDTCommonTree)adaptor.becomeRoot((XQDTCommonTree)adaptor.create(FunctionDecl, "FunctionDecl"), root_1);

                        adaptor.addChild(root_1, stream_qn.nextTree());
                        // XQueryParser.g:336:39: ^( ParamList ( $pl)? )
                        {
                        XQDTCommonTree root_2 = (XQDTCommonTree)adaptor.nil();
                        root_2 = (XQDTCommonTree)adaptor.becomeRoot((XQDTCommonTree)adaptor.create(ParamList, "ParamList"), root_2);

                        // XQueryParser.g:336:51: ( $pl)?
                        if ( stream_pl.hasNext() ) {
                            adaptor.addChild(root_2, stream_pl.nextTree());

                        }
                        stream_pl.reset();

                        adaptor.addChild(root_1, root_2);
                        }
                        // XQueryParser.g:336:57: ^( ReturnType ( $td)? )
                        {
                        XQDTCommonTree root_2 = (XQDTCommonTree)adaptor.nil();
                        root_2 = (XQDTCommonTree)adaptor.becomeRoot((XQDTCommonTree)adaptor.create(ReturnType, "ReturnType"), root_2);

                        // XQueryParser.g:336:70: ( $td)?
                        if ( stream_td.hasNext() ) {
                            adaptor.addChild(root_2, stream_td.nextTree());

                        }
                        stream_td.reset();

                        adaptor.addChild(root_1, root_2);
                        }
                        // XQueryParser.g:336:76: ( $b)?
                        if ( stream_b.hasNext() ) {
                            adaptor.addChild(root_1, stream_b.nextTree());

                        }
                        stream_b.reset();

                        adaptor.addChild(root_0, root_1);
                        }

                    }

                    retval.tree = root_0;}
                    }
                    break;
                case 2 :
                    // XQueryParser.g:337:13: k+= DECLARE p_PrivateOption p_FunctionType k+= FUNCTION qn= p_QName LPAREN (pl= p_ParamList )? RPAREN (td= p_TypeDeclaration )? (ee= p_EnclosedExpr | k+= EXTERNAL ) SEMICOLON
                    {
                    k=(CommonToken)match(input,DECLARE,FOLLOW_DECLARE_in_pm_FunctionDecl3018); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_DECLARE.add(k);

                    if (list_k==null) list_k=new ArrayList();
                    list_k.add(k);

                    pushFollow(FOLLOW_p_PrivateOption_in_pm_FunctionDecl3020);
                    p_PrivateOption74=p_PrivateOption();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_p_PrivateOption.add(p_PrivateOption74.getTree());
                    pushFollow(FOLLOW_p_FunctionType_in_pm_FunctionDecl3022);
                    p_FunctionType75=p_FunctionType();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_p_FunctionType.add(p_FunctionType75.getTree());
                    k=(CommonToken)match(input,FUNCTION,FOLLOW_FUNCTION_in_pm_FunctionDecl3026); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_FUNCTION.add(k);

                    if (list_k==null) list_k=new ArrayList();
                    list_k.add(k);

                    pushFollow(FOLLOW_p_QName_in_pm_FunctionDecl3030);
                    qn=p_QName();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_p_QName.add(qn.getTree());
                    LPAREN76=(CommonToken)match(input,LPAREN,FOLLOW_LPAREN_in_pm_FunctionDecl3032); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_LPAREN.add(LPAREN76);

                    // XQueryParser.g:337:87: (pl= p_ParamList )?
                    int alt36=2;
                    int LA36_0 = input.LA(1);

                    if ( (LA36_0==DOLLAR) ) {
                        alt36=1;
                    }
                    switch (alt36) {
                        case 1 :
                            // XQueryParser.g:337:87: pl= p_ParamList
                            {
                            pushFollow(FOLLOW_p_ParamList_in_pm_FunctionDecl3036);
                            pl=p_ParamList();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_p_ParamList.add(pl.getTree());

                            }
                            break;

                    }

                    RPAREN77=(CommonToken)match(input,RPAREN,FOLLOW_RPAREN_in_pm_FunctionDecl3039); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_RPAREN.add(RPAREN77);

                    // XQueryParser.g:337:110: (td= p_TypeDeclaration )?
                    int alt37=2;
                    int LA37_0 = input.LA(1);

                    if ( (LA37_0==AS) ) {
                        alt37=1;
                    }
                    switch (alt37) {
                        case 1 :
                            // XQueryParser.g:337:110: td= p_TypeDeclaration
                            {
                            pushFollow(FOLLOW_p_TypeDeclaration_in_pm_FunctionDecl3043);
                            td=p_TypeDeclaration();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_p_TypeDeclaration.add(td.getTree());

                            }
                            break;

                    }

                    // XQueryParser.g:337:130: (ee= p_EnclosedExpr | k+= EXTERNAL )
                    int alt38=2;
                    int LA38_0 = input.LA(1);

                    if ( (LA38_0==LBRACKET) ) {
                        alt38=1;
                    }
                    else if ( (LA38_0==EXTERNAL) ) {
                        alt38=2;
                    }
                    else {
                        if (state.backtracking>0) {state.failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("", 38, 0, input);

                        throw nvae;
                    }
                    switch (alt38) {
                        case 1 :
                            // XQueryParser.g:337:131: ee= p_EnclosedExpr
                            {
                            pushFollow(FOLLOW_p_EnclosedExpr_in_pm_FunctionDecl3049);
                            ee=p_EnclosedExpr();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_p_EnclosedExpr.add(ee.getTree());

                            }
                            break;
                        case 2 :
                            // XQueryParser.g:337:151: k+= EXTERNAL
                            {
                            k=(CommonToken)match(input,EXTERNAL,FOLLOW_EXTERNAL_in_pm_FunctionDecl3055); if (state.failed) return retval; 
                            if ( state.backtracking==0 ) stream_EXTERNAL.add(k);

                            if (list_k==null) list_k=new ArrayList();
                            list_k.add(k);


                            }
                            break;

                    }

                    SEMICOLON78=(CommonToken)match(input,SEMICOLON,FOLLOW_SEMICOLON_in_pm_FunctionDecl3058); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_SEMICOLON.add(SEMICOLON78);

                    if ( state.backtracking==0 ) {
                      ak(list_k);
                    }


                    // AST REWRITE
                    // elements: td, ee, qn, pl
                    // token labels: 
                    // rule labels: qn, retval, ee, pl, td
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_qn=new RewriteRuleSubtreeStream(adaptor,"rule qn",qn!=null?qn.tree:null);
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
                    RewriteRuleSubtreeStream stream_ee=new RewriteRuleSubtreeStream(adaptor,"rule ee",ee!=null?ee.tree:null);
                    RewriteRuleSubtreeStream stream_pl=new RewriteRuleSubtreeStream(adaptor,"rule pl",pl!=null?pl.tree:null);
                    RewriteRuleSubtreeStream stream_td=new RewriteRuleSubtreeStream(adaptor,"rule td",td!=null?td.tree:null);

                    root_0 = (XQDTCommonTree)adaptor.nil();
                    // 338:17: -> ^( FunctionDecl $qn ^( ParamList ( $pl)? ) ^( ReturnType ( $td)? ) ( $ee)? )
                    {
                        // XQueryParser.g:338:20: ^( FunctionDecl $qn ^( ParamList ( $pl)? ) ^( ReturnType ( $td)? ) ( $ee)? )
                        {
                        XQDTCommonTree root_1 = (XQDTCommonTree)adaptor.nil();
                        root_1 = (XQDTCommonTree)adaptor.becomeRoot((XQDTCommonTree)adaptor.create(FunctionDecl, "FunctionDecl"), root_1);

                        adaptor.addChild(root_1, stream_qn.nextTree());
                        // XQueryParser.g:338:39: ^( ParamList ( $pl)? )
                        {
                        XQDTCommonTree root_2 = (XQDTCommonTree)adaptor.nil();
                        root_2 = (XQDTCommonTree)adaptor.becomeRoot((XQDTCommonTree)adaptor.create(ParamList, "ParamList"), root_2);

                        // XQueryParser.g:338:51: ( $pl)?
                        if ( stream_pl.hasNext() ) {
                            adaptor.addChild(root_2, stream_pl.nextTree());

                        }
                        stream_pl.reset();

                        adaptor.addChild(root_1, root_2);
                        }
                        // XQueryParser.g:338:57: ^( ReturnType ( $td)? )
                        {
                        XQDTCommonTree root_2 = (XQDTCommonTree)adaptor.nil();
                        root_2 = (XQDTCommonTree)adaptor.becomeRoot((XQDTCommonTree)adaptor.create(ReturnType, "ReturnType"), root_2);

                        // XQueryParser.g:338:70: ( $td)?
                        if ( stream_td.hasNext() ) {
                            adaptor.addChild(root_2, stream_td.nextTree());

                        }
                        stream_td.reset();

                        adaptor.addChild(root_1, root_2);
                        }
                        // XQueryParser.g:338:76: ( $ee)?
                        if ( stream_ee.hasNext() ) {
                            adaptor.addChild(root_1, stream_ee.nextTree());

                        }
                        stream_ee.reset();

                        adaptor.addChild(root_0, root_1);
                        }

                    }

                    retval.tree = root_0;}
                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (XQDTCommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (XQDTCommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "pm_FunctionDecl"

    public static class p_FunctionType_return extends ParserRuleReturnScope {
        XQDTCommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "p_FunctionType"
    // XQueryParser.g:345:1: p_FunctionType : ({...}? =>ku= UPDATING | {...}? =>ks= SIMPLE | );
    public final XQueryParser.p_FunctionType_return p_FunctionType() throws RecognitionException {
        XQueryParser.p_FunctionType_return retval = new XQueryParser.p_FunctionType_return();
        retval.start = input.LT(1);

        XQDTCommonTree root_0 = null;

        CommonToken ku=null;
        CommonToken ks=null;

        XQDTCommonTree ku_tree=null;
        XQDTCommonTree ks_tree=null;

        try {
            // XQueryParser.g:346:9: ({...}? =>ku= UPDATING | {...}? =>ks= SIMPLE | )
            int alt40=3;
            int LA40_0 = input.LA(1);

            if ( (LA40_0==UPDATING) && ((lc(XQU)))) {
                alt40=1;
            }
            else if ( (LA40_0==SIMPLE) && ((lc(XQS)))) {
                alt40=2;
            }
            else if ( (LA40_0==FUNCTION) ) {
                alt40=3;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 40, 0, input);

                throw nvae;
            }
            switch (alt40) {
                case 1 :
                    // XQueryParser.g:346:11: {...}? =>ku= UPDATING
                    {
                    root_0 = (XQDTCommonTree)adaptor.nil();

                    if ( !((lc(XQU))) ) {
                        if (state.backtracking>0) {state.failed=true; return retval;}
                        throw new FailedPredicateException(input, "p_FunctionType", "lc(XQU)");
                    }
                    ku=(CommonToken)match(input,UPDATING,FOLLOW_UPDATING_in_p_FunctionType3139); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    ku_tree = (XQDTCommonTree)adaptor.create(ku);
                    adaptor.addChild(root_0, ku_tree);
                    }
                    if ( state.backtracking==0 ) {
                      ak(ku);
                    }

                    }
                    break;
                case 2 :
                    // XQueryParser.g:347:11: {...}? =>ks= SIMPLE
                    {
                    root_0 = (XQDTCommonTree)adaptor.nil();

                    if ( !((lc(XQS))) ) {
                        if (state.backtracking>0) {state.failed=true; return retval;}
                        throw new FailedPredicateException(input, "p_FunctionType", "lc(XQS)");
                    }
                    ks=(CommonToken)match(input,SIMPLE,FOLLOW_SIMPLE_in_p_FunctionType3158); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    ks_tree = (XQDTCommonTree)adaptor.create(ks);
                    adaptor.addChild(root_0, ks_tree);
                    }
                    if ( state.backtracking==0 ) {
                      ak(ks);
                    }

                    }
                    break;
                case 3 :
                    // XQueryParser.g:349:9: 
                    {
                    root_0 = (XQDTCommonTree)adaptor.nil();

                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (XQDTCommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (XQDTCommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "p_FunctionType"

    public static class p_PrivateOption_return extends ParserRuleReturnScope {
        XQDTCommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "p_PrivateOption"
    // XQueryParser.g:351:1: p_PrivateOption : ({...}? =>kv= PRIVATE | );
    public final XQueryParser.p_PrivateOption_return p_PrivateOption() throws RecognitionException {
        XQueryParser.p_PrivateOption_return retval = new XQueryParser.p_PrivateOption_return();
        retval.start = input.LT(1);

        XQDTCommonTree root_0 = null;

        CommonToken kv=null;

        XQDTCommonTree kv_tree=null;

        try {
            // XQueryParser.g:352:9: ({...}? =>kv= PRIVATE | )
            int alt41=2;
            int LA41_0 = input.LA(1);

            if ( (LA41_0==PRIVATE) && ((lc(MLS)))) {
                alt41=1;
            }
            else if ( (LA41_0==CONSTANT) && ((lc(XQS)))) {
                alt41=2;
            }
            else if ( (LA41_0==VARIABLE) ) {
                alt41=2;
            }
            else if ( (LA41_0==UPDATING) && ((lc(XQU)))) {
                alt41=2;
            }
            else if ( (LA41_0==SIMPLE) && ((lc(XQS)))) {
                alt41=2;
            }
            else if ( (LA41_0==FUNCTION) ) {
                alt41=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 41, 0, input);

                throw nvae;
            }
            switch (alt41) {
                case 1 :
                    // XQueryParser.g:352:11: {...}? =>kv= PRIVATE
                    {
                    root_0 = (XQDTCommonTree)adaptor.nil();

                    if ( !((lc(MLS))) ) {
                        if (state.backtracking>0) {state.failed=true; return retval;}
                        throw new FailedPredicateException(input, "p_PrivateOption", "lc(MLS)");
                    }
                    kv=(CommonToken)match(input,PRIVATE,FOLLOW_PRIVATE_in_p_PrivateOption3202); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    kv_tree = (XQDTCommonTree)adaptor.create(kv);
                    adaptor.addChild(root_0, kv_tree);
                    }
                    if ( state.backtracking==0 ) {
                      ak(kv);
                    }

                    }
                    break;
                case 2 :
                    // XQueryParser.g:354:9: 
                    {
                    root_0 = (XQDTCommonTree)adaptor.nil();

                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (XQDTCommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (XQDTCommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "p_PrivateOption"

    public static class p_ParamList_return extends ParserRuleReturnScope {
        XQDTCommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "p_ParamList"
    // XQueryParser.g:360:1: p_ParamList : p+= p_Param ( COMMA p+= p_Param )* -> ( $p)+ ;
    public final XQueryParser.p_ParamList_return p_ParamList() throws RecognitionException {
        XQueryParser.p_ParamList_return retval = new XQueryParser.p_ParamList_return();
        retval.start = input.LT(1);

        XQDTCommonTree root_0 = null;

        CommonToken COMMA79=null;
        List list_p=null;
        XQueryParser.p_Param_return p = null;
         p = null;
        XQDTCommonTree COMMA79_tree=null;
        RewriteRuleTokenStream stream_COMMA=new RewriteRuleTokenStream(adaptor,"token COMMA");
        RewriteRuleSubtreeStream stream_p_Param=new RewriteRuleSubtreeStream(adaptor,"rule p_Param");
        try {
            // XQueryParser.g:361:9: (p+= p_Param ( COMMA p+= p_Param )* -> ( $p)+ )
            // XQueryParser.g:361:11: p+= p_Param ( COMMA p+= p_Param )*
            {
            pushFollow(FOLLOW_p_Param_in_p_ParamList3247);
            p=p_Param();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_p_Param.add(p.getTree());
            if (list_p==null) list_p=new ArrayList();
            list_p.add(p.getTree());

            // XQueryParser.g:361:22: ( COMMA p+= p_Param )*
            loop42:
            do {
                int alt42=2;
                int LA42_0 = input.LA(1);

                if ( (LA42_0==COMMA) ) {
                    alt42=1;
                }


                switch (alt42) {
            	case 1 :
            	    // XQueryParser.g:361:23: COMMA p+= p_Param
            	    {
            	    COMMA79=(CommonToken)match(input,COMMA,FOLLOW_COMMA_in_p_ParamList3250); if (state.failed) return retval; 
            	    if ( state.backtracking==0 ) stream_COMMA.add(COMMA79);

            	    pushFollow(FOLLOW_p_Param_in_p_ParamList3254);
            	    p=p_Param();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) stream_p_Param.add(p.getTree());
            	    if (list_p==null) list_p=new ArrayList();
            	    list_p.add(p.getTree());


            	    }
            	    break;

            	default :
            	    break loop42;
                }
            } while (true);



            // AST REWRITE
            // elements: p
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: p
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
            RewriteRuleSubtreeStream stream_p=new RewriteRuleSubtreeStream(adaptor,"token p",list_p);
            root_0 = (XQDTCommonTree)adaptor.nil();
            // 362:17: -> ( $p)+
            {
                if ( !(stream_p.hasNext()) ) {
                    throw new RewriteEarlyExitException();
                }
                while ( stream_p.hasNext() ) {
                    adaptor.addChild(root_0, stream_p.nextTree());

                }
                stream_p.reset();

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (XQDTCommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (XQDTCommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "p_ParamList"

    public static class p_Param_return extends ParserRuleReturnScope {
        XQDTCommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "p_Param"
    // XQueryParser.g:366:1: p_Param : DOLLAR qn= p_QName (td= p_TypeDeclaration )? -> ^( Param $qn ( $td)? ) ;
    public final XQueryParser.p_Param_return p_Param() throws RecognitionException {
        XQueryParser.p_Param_return retval = new XQueryParser.p_Param_return();
        retval.start = input.LT(1);

        XQDTCommonTree root_0 = null;

        CommonToken DOLLAR80=null;
        XQueryParser.p_QName_return qn = null;

        XQueryParser.p_TypeDeclaration_return td = null;


        XQDTCommonTree DOLLAR80_tree=null;
        RewriteRuleTokenStream stream_DOLLAR=new RewriteRuleTokenStream(adaptor,"token DOLLAR");
        RewriteRuleSubtreeStream stream_p_TypeDeclaration=new RewriteRuleSubtreeStream(adaptor,"rule p_TypeDeclaration");
        RewriteRuleSubtreeStream stream_p_QName=new RewriteRuleSubtreeStream(adaptor,"rule p_QName");
        try {
            // XQueryParser.g:367:9: ( DOLLAR qn= p_QName (td= p_TypeDeclaration )? -> ^( Param $qn ( $td)? ) )
            // XQueryParser.g:367:11: DOLLAR qn= p_QName (td= p_TypeDeclaration )?
            {
            DOLLAR80=(CommonToken)match(input,DOLLAR,FOLLOW_DOLLAR_in_p_Param3312); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_DOLLAR.add(DOLLAR80);

            pushFollow(FOLLOW_p_QName_in_p_Param3316);
            qn=p_QName();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_p_QName.add(qn.getTree());
            // XQueryParser.g:367:31: (td= p_TypeDeclaration )?
            int alt43=2;
            int LA43_0 = input.LA(1);

            if ( (LA43_0==AS) ) {
                alt43=1;
            }
            switch (alt43) {
                case 1 :
                    // XQueryParser.g:367:31: td= p_TypeDeclaration
                    {
                    pushFollow(FOLLOW_p_TypeDeclaration_in_p_Param3320);
                    td=p_TypeDeclaration();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_p_TypeDeclaration.add(td.getTree());

                    }
                    break;

            }



            // AST REWRITE
            // elements: qn, td
            // token labels: 
            // rule labels: qn, retval, td
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_qn=new RewriteRuleSubtreeStream(adaptor,"rule qn",qn!=null?qn.tree:null);
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
            RewriteRuleSubtreeStream stream_td=new RewriteRuleSubtreeStream(adaptor,"rule td",td!=null?td.tree:null);

            root_0 = (XQDTCommonTree)adaptor.nil();
            // 368:17: -> ^( Param $qn ( $td)? )
            {
                // XQueryParser.g:368:20: ^( Param $qn ( $td)? )
                {
                XQDTCommonTree root_1 = (XQDTCommonTree)adaptor.nil();
                root_1 = (XQDTCommonTree)adaptor.becomeRoot((XQDTCommonTree)adaptor.create(Param, "Param"), root_1);

                adaptor.addChild(root_1, stream_qn.nextTree());
                // XQueryParser.g:368:32: ( $td)?
                if ( stream_td.hasNext() ) {
                    adaptor.addChild(root_1, stream_td.nextTree());

                }
                stream_td.reset();

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (XQDTCommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (XQDTCommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "p_Param"

    public static class p_EnclosedExpr_return extends ParserRuleReturnScope {
        XQDTCommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "p_EnclosedExpr"
    // XQueryParser.g:372:1: p_EnclosedExpr : LBRACKET pm_Expr RBRACKET -> ^( EnclosedExpr pm_Expr ) ;
    public final XQueryParser.p_EnclosedExpr_return p_EnclosedExpr() throws RecognitionException {
        XQueryParser.p_EnclosedExpr_return retval = new XQueryParser.p_EnclosedExpr_return();
        retval.start = input.LT(1);

        XQDTCommonTree root_0 = null;

        CommonToken LBRACKET81=null;
        CommonToken RBRACKET83=null;
        XQueryParser.pm_Expr_return pm_Expr82 = null;


        XQDTCommonTree LBRACKET81_tree=null;
        XQDTCommonTree RBRACKET83_tree=null;
        RewriteRuleTokenStream stream_LBRACKET=new RewriteRuleTokenStream(adaptor,"token LBRACKET");
        RewriteRuleTokenStream stream_RBRACKET=new RewriteRuleTokenStream(adaptor,"token RBRACKET");
        RewriteRuleSubtreeStream stream_pm_Expr=new RewriteRuleSubtreeStream(adaptor,"rule pm_Expr");
        try {
            // XQueryParser.g:373:9: ( LBRACKET pm_Expr RBRACKET -> ^( EnclosedExpr pm_Expr ) )
            // XQueryParser.g:373:11: LBRACKET pm_Expr RBRACKET
            {
            LBRACKET81=(CommonToken)match(input,LBRACKET,FOLLOW_LBRACKET_in_p_EnclosedExpr3376); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_LBRACKET.add(LBRACKET81);

            pushFollow(FOLLOW_pm_Expr_in_p_EnclosedExpr3378);
            pm_Expr82=pm_Expr();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_pm_Expr.add(pm_Expr82.getTree());
            RBRACKET83=(CommonToken)match(input,RBRACKET,FOLLOW_RBRACKET_in_p_EnclosedExpr3380); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_RBRACKET.add(RBRACKET83);



            // AST REWRITE
            // elements: pm_Expr
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (XQDTCommonTree)adaptor.nil();
            // 374:17: -> ^( EnclosedExpr pm_Expr )
            {
                // XQueryParser.g:374:20: ^( EnclosedExpr pm_Expr )
                {
                XQDTCommonTree root_1 = (XQDTCommonTree)adaptor.nil();
                root_1 = (XQDTCommonTree)adaptor.becomeRoot((XQDTCommonTree)adaptor.create(EnclosedExpr, "EnclosedExpr"), root_1);

                adaptor.addChild(root_1, stream_pm_Expr.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (XQDTCommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (XQDTCommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "p_EnclosedExpr"

    public static class p_QueryBody_return extends ParserRuleReturnScope {
        XQDTCommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "p_QueryBody"
    // XQueryParser.g:378:1: p_QueryBody : pm_Expr -> ^( QueryBody pm_Expr ) ;
    public final XQueryParser.p_QueryBody_return p_QueryBody() throws RecognitionException {
        XQueryParser.p_QueryBody_return retval = new XQueryParser.p_QueryBody_return();
        retval.start = input.LT(1);

        XQDTCommonTree root_0 = null;

        XQueryParser.pm_Expr_return pm_Expr84 = null;


        RewriteRuleSubtreeStream stream_pm_Expr=new RewriteRuleSubtreeStream(adaptor,"rule pm_Expr");
        try {
            // XQueryParser.g:379:9: ( pm_Expr -> ^( QueryBody pm_Expr ) )
            // XQueryParser.g:379:11: pm_Expr
            {
            pushFollow(FOLLOW_pm_Expr_in_p_QueryBody3430);
            pm_Expr84=pm_Expr();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_pm_Expr.add(pm_Expr84.getTree());


            // AST REWRITE
            // elements: pm_Expr
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (XQDTCommonTree)adaptor.nil();
            // 380:17: -> ^( QueryBody pm_Expr )
            {
                // XQueryParser.g:380:20: ^( QueryBody pm_Expr )
                {
                XQDTCommonTree root_1 = (XQDTCommonTree)adaptor.nil();
                root_1 = (XQDTCommonTree)adaptor.becomeRoot((XQDTCommonTree)adaptor.create(QueryBody, "QueryBody"), root_1);

                adaptor.addChild(root_1, stream_pm_Expr.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (XQDTCommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (XQDTCommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "p_QueryBody"

    public static class pm_Expr_return extends ParserRuleReturnScope {
        XQDTCommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "pm_Expr"
    // XQueryParser.g:385:1: pm_Expr : p_ConcatExpr ({...}? => ( SEMICOLON ( pm_ApplyExpr )* )? | ) ({...}? => ( SEMICOLON p_ConcatExpr )+ | ) ;
    public final XQueryParser.pm_Expr_return pm_Expr() throws RecognitionException {
        XQueryParser.pm_Expr_return retval = new XQueryParser.pm_Expr_return();
        retval.start = input.LT(1);

        XQDTCommonTree root_0 = null;

        CommonToken SEMICOLON86=null;
        CommonToken SEMICOLON88=null;
        XQueryParser.p_ConcatExpr_return p_ConcatExpr85 = null;

        XQueryParser.pm_ApplyExpr_return pm_ApplyExpr87 = null;

        XQueryParser.p_ConcatExpr_return p_ConcatExpr89 = null;


        XQDTCommonTree SEMICOLON86_tree=null;
        XQDTCommonTree SEMICOLON88_tree=null;

        try {
            // XQueryParser.g:386:9: ( p_ConcatExpr ({...}? => ( SEMICOLON ( pm_ApplyExpr )* )? | ) ({...}? => ( SEMICOLON p_ConcatExpr )+ | ) )
            // XQueryParser.g:386:11: p_ConcatExpr ({...}? => ( SEMICOLON ( pm_ApplyExpr )* )? | ) ({...}? => ( SEMICOLON p_ConcatExpr )+ | )
            {
            root_0 = (XQDTCommonTree)adaptor.nil();

            pushFollow(FOLLOW_p_ConcatExpr_in_pm_Expr3481);
            p_ConcatExpr85=p_ConcatExpr();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, p_ConcatExpr85.getTree());
            // XQueryParser.g:387:11: ({...}? => ( SEMICOLON ( pm_ApplyExpr )* )? | )
            int alt46=2;
            int LA46_0 = input.LA(1);

            if ( (LA46_0==SEMICOLON) && ((((lc(XQS))&&(lc(MLS)))||((lc(XQS))&&(lc(MLS)))||((lc(XQS))&&(lc(MLS)))||((lc(XQS))&&(lc(MLS)))||((lc(XQS))&&(lc(MLS)))||((lc(XQS))&&(lc(MLS)))||((lc(XQS))&&(lc(MLS)))||((lc(XQS))&&(lc(MLS)))||((lc(XQS))&&(lc(MLS)))||((lc(XQS))&&(lc(MLS)))||((lc(XQS))&&(lc(MLS)))||((lc(XQS))&&(lc(MLS)))||((lc(XQS))&&(lc(MLS)))||((lc(XQS))&&(lc(MLS)))||((lc(XQS))&&(lc(MLS)))||((lc(XQS))&&(lc(MLS)))||((lc(XQS))&&(lc(MLS)))||((lc(XQS))&&(lc(MLS)))||((lc(XQS))&&(lc(MLS)))||((lc(XQS))&&(lc(MLS)))||((lc(XQS))&&(lc(MLS)))||((lc(XQS))&&(lc(MLS)))||((lc(XQS))&&(lc(MLS)))||((lc(XQS))&&(lc(MLS)))||((lc(XQS))&&(lc(MLS)))||((lc(XQS))&&(lc(MLS)))||((lc(XQS))&&(lc(MLS)))||((lc(XQS))&&(lc(MLS)))||((lc(XQS))&&(lc(MLS)))||((lc(XQS))&&(lc(MLS)))||((lc(XQS))&&(lc(MLS)))||((lc(XQS))&&(lc(MLS)))||((lc(XQS))&&(lc(MLS)))||((lc(XQS))&&(lc(MLS)))||((lc(XQS))&&(lc(MLS)))||((lc(XQS))&&(lc(MLS)))||((lc(XQS))&&(lc(MLS)))||((lc(XQS))&&(lc(MLS)))||((lc(XQS))&&(lc(MLS)))||((lc(XQS))&&(lc(MLS)))||((lc(XQS))&&(lc(MLS)))||((lc(XQS))&&(lc(MLS)))||((lc(XQS))&&(lc(MLS)))||((lc(XQS))&&(lc(MLS)))||((lc(XQS))&&(lc(MLS)))||((lc(XQS))&&(lc(MLS)))||((lc(XQS))&&(lc(MLS)))||((lc(XQS))&&(lc(MLS)))||((lc(XQS))&&(lc(MLS)))||((lc(XQS))&&(lc(MLS)))||((lc(XQS))&&(lc(MLS)))||((lc(XQS))&&(lc(MLS)))||((lc(XQS))&&(lc(MLS)))||((lc(XQS))&&(lc(MLS)))||((lc(XQS))&&(lc(MLS)))||((lc(XQS))&&(lc(MLS)))||((lc(XQS))&&(lc(MLS)))||((lc(XQS))&&(lc(MLS)))||((lc(XQS))&&(lc(MLS)))||((lc(XQS))&&(lc(MLS)))||((lc(XQS))&&(lc(MLS)))||((lc(XQS))&&(lc(MLS)))||((lc(XQS))&&(lc(MLS)))||((lc(XQS))&&(lc(MLS)))||((lc(XQS))&&(lc(MLS)))||((lc(XQS))&&(lc(MLS)))||((lc(XQS))&&(lc(MLS)))||((lc(XQS))&&(lc(MLS)))||((lc(XQS))&&(lc(MLS)))||((lc(XQS))&&(lc(MLS)))||((lc(XQS))&&(lc(MLS)))||((lc(XQS))&&(lc(MLS)))||((lc(XQS))&&(lc(MLS)))||((lc(XQS))&&(lc(MLS)))||((lc(XQS))&&(lc(MLS)))||((lc(XQS))&&(lc(MLS)))||((lc(XQS))&&(lc(MLS)))||((lc(XQS))&&(lc(MLS)))||((lc(XQS))&&(lc(MLS)))||((lc(XQS))&&(lc(MLS)))||((lc(XQS))&&(lc(MLS)))||((lc(XQS))&&(lc(MLS)))||((lc(XQS))&&(lc(MLS)))||((lc(XQS))&&(lc(MLS)))||((lc(XQS))&&(lc(MLS)))||((lc(XQS))&&(lc(MLS)))||((lc(XQS))&&(lc(MLS)))||((lc(XQS))&&(lc(MLS)))||((lc(XQS))&&(lc(MLS)))||((lc(XQS))&&(lc(MLS)))||((lc(XQS))&&(lc(MLS)))||((lc(XQS))&&(lc(MLS)))||((lc(XQS))&&(lc(MLS)))||((lc(XQS))&&(lc(MLS)))||((lc(XQS))&&(lc(MLS)))||((lc(XQS))&&(lc(MLS)))||((lc(XQS))&&(lc(MLS)))||((lc(XQS))&&(lc(MLS)))||((lc(XQS))&&(lc(MLS)))||((lc(XQS))&&(lc(MLS)))||((lc(XQS))&&(lc(MLS)))||((lc(XQS))&&(lc(MLS)))||((lc(XQS))&&(lc(MLS)))||((lc(XQS))&&(lc(MLS)))||((lc(XQS))&&(lc(MLS)))||((lc(XQS))&&(lc(MLS)))||((lc(XQS))&&(lc(MLS)))||((lc(XQS))&&(lc(MLS)))||((lc(XQS))&&(lc(MLS)))||((lc(XQS))&&(lc(MLS)))||((lc(XQS))&&(lc(MLS)))||((lc(XQS))&&(lc(MLS)))||((lc(XQS))&&(lc(MLS)))||((lc(XQS))&&(lc(MLS)))||((lc(XQS))&&(lc(MLS)))||((lc(XQS))&&(lc(MLS)))||((lc(XQS))&&(lc(MLS)))||((lc(XQS))&&(lc(MLS)))||((lc(XQS))&&(lc(MLS)))||((lc(XQS))&&(lc(MLS)))||((lc(XQS))&&(lc(MLS)))||((lc(XQS))&&(lc(MLS)))||((lc(XQS))&&(lc(MLS)))||((lc(XQS))&&(lc(MLS)))||((lc(XQS))&&(lc(MLS)))||((lc(XQS))&&(lc(MLS)))||((lc(XQS))&&(lc(MLS)))||((lc(XQS))&&(lc(MLS)))||((lc(XQS))&&(lc(MLS)))||((lc(XQS))&&(lc(MLS)))||((lc(XQS))&&(lc(MLS)))||((lc(XQS))&&(lc(MLS)))||((lc(XQS))&&(lc(MLS)))||((lc(XQS))&&(lc(MLS)))||((lc(XQS))&&(lc(MLS)))||((lc(XQS))&&(lc(MLS)))||((lc(XQS))&&(lc(MLS)))||((lc(XQS))&&(lc(MLS)))||((lc(XQS))&&(lc(MLS)))||((lc(XQS))&&(lc(MLS)))||((lc(XQS))&&(lc(MLS)))||((lc(XQS))&&(lc(MLS)))||((lc(XQS))&&(lc(MLS)))||((lc(XQS))&&(lc(MLS)))||((lc(XQS))&&(lc(MLS)))||((lc(XQS))&&(lc(MLS)))||((lc(XQS))&&(lc(MLS)))||((lc(XQS))&&(lc(MLS)))||((lc(XQS))&&(lc(MLS)))||((lc(XQS))&&(lc(MLS)))||((lc(XQS))&&(lc(MLS)))||((lc(XQS))&&(lc(MLS)))||((lc(XQS))&&(lc(MLS)))||((lc(XQS))&&(lc(MLS)))||((lc(XQS))&&(lc(MLS)))||((lc(XQS))&&(lc(MLS)))||((lc(XQS))&&(lc(MLS)))||((lc(XQS))&&(lc(MLS)))||((lc(XQS))&&(lc(MLS)))||((lc(XQS))&&(lc(MLS)))||((lc(XQS))&&(lc(MLS)))||((lc(XQS))&&(lc(MLS)))||((lc(XQS))&&(lc(MLS)))||((lc(XQS))&&(lc(MLS)))||((lc(XQS))&&(lc(MLS)))||((lc(XQS))&&(lc(MLS)))||((lc(XQS))&&(lc(MLS)))||((lc(XQS))&&(lc(MLS)))||((lc(XQS))&&(lc(MLS)))||((lc(XQS))&&(lc(MLS)))||((lc(XQS))&&(lc(MLS)))||((lc(XQS))&&(lc(MLS)))||((lc(XQS))&&(lc(MLS)))||((lc(XQS))&&(lc(MLS)))||((lc(XQS))&&(lc(MLS)))||((lc(XQS))&&(lc(MLS)))||((lc(XQS))&&(lc(MLS)))||((lc(XQS))&&(lc(MLS)))||((lc(XQS))&&(lc(MLS)))||((lc(XQS))&&(lc(MLS)))||((lc(XQS))&&(lc(MLS)))||((lc(XQS))&&(lc(MLS)))||((lc(XQS))&&(lc(MLS)))||((lc(XQS))&&(lc(MLS)))||((lc(XQS))&&(lc(MLS)))||((lc(XQS))&&(lc(MLS)))||((lc(XQS))&&(lc(MLS)))||((lc(XQS))&&(lc(MLS)))||((lc(XQS))&&(lc(MLS)))||((lc(XQS))&&(lc(MLS)))||((lc(XQS))&&(lc(MLS)))||((lc(XQS))&&(lc(MLS)))||((lc(XQS))&&(lc(MLS)))||((lc(XQS))&&(lc(MLS)))||((lc(XQS))&&(lc(MLS)))||((lc(XQS))&&(lc(MLS)))||((lc(XQS))&&(lc(MLS)))||((lc(XQS))&&(lc(MLS)))||((lc(XQS))&&(lc(MLS)))||((lc(XQS))&&(lc(MLS)))||((lc(XQS))&&(lc(MLS)))||((lc(XQS))&&(lc(MLS)))||((lc(XQS))&&(lc(MLS)))||((lc(XQS))&&(lc(MLS)))||((lc(XQS))&&(lc(MLS)))||((lc(XQS))&&(lc(MLS)))||((lc(XQS))&&(lc(MLS)))||((lc(XQS))&&(lc(MLS)))||((lc(XQS))&&(lc(MLS)))||((lc(XQS))&&(lc(MLS)))||((lc(XQS))&&(lc(MLS)))||((lc(XQS))&&(lc(MLS)))||((lc(XQS))&&(lc(MLS)))||((lc(XQS))&&(lc(MLS)))||((lc(XQS))&&(lc(MLS)))||((lc(XQS))&&(lc(MLS)))||((lc(XQS))&&(lc(MLS)))||((lc(XQS))&&(lc(MLS)))||((lc(XQS))&&(lc(MLS)))||((lc(XQS))&&(lc(MLS)))||((lc(XQS))&&(lc(MLS)))||((lc(XQS))&&(lc(MLS)))||((lc(XQS))&&(lc(MLS)))||((lc(XQS))&&(lc(MLS)))||((lc(XQS))&&(lc(MLS)))||((lc(XQS))&&(lc(MLS)))||((lc(XQS))&&(lc(MLS)))||((lc(XQS))&&(lc(MLS)))||((lc(XQS))&&(lc(MLS)))||((lc(XQS))&&(lc(MLS)))||((lc(XQS))&&(lc(MLS)))||((lc(XQS))&&(lc(MLS)))||((lc(XQS))&&(lc(MLS)))||((lc(XQS))&&(lc(MLS)))||((lc(XQS))&&(lc(MLS)))||((lc(XQS))&&(lc(MLS)))||((lc(XQS))&&(lc(MLS)))||((lc(XQS))&&(lc(MLS)))||((lc(XQS))&&(lc(MLS)))||((lc(XQS))&&(lc(MLS)))||((lc(XQS))&&(lc(MLS)))||((lc(XQS))&&(lc(MLS)))||((lc(XQS))&&(lc(MLS)))||((lc(XQS))&&(lc(MLS)))||((lc(XQS))&&(lc(MLS)))||((lc(XQS))&&(lc(MLS)))||((lc(XQS))&&(lc(MLS)))||((lc(XQS))&&(lc(MLS)))||((lc(XQS))&&(lc(MLS)))||((lc(XQS))&&(lc(MLS)))||((lc(XQS))&&(lc(MLS)))||((lc(XQS))&&(lc(MLS)))||((lc(XQS))&&(lc(MLS)))||((lc(XQS))&&(lc(MLS)))||((lc(XQS))&&(lc(MLS)))||((lc(XQS))&&(lc(MLS)))||((lc(XQS))&&(lc(MLS)))||((lc(XQS))&&(lc(MLS)))||((lc(XQS))&&(lc(MLS)))||((lc(XQS))&&(lc(MLS)))||((lc(XQS))&&(lc(MLS)))||((lc(XQS))&&(lc(MLS)))||((lc(XQS))&&(lc(MLS)))||((lc(XQS))&&(lc(MLS)))||((lc(XQS))&&(lc(MLS)))||((lc(XQS))&&(lc(MLS)))||((lc(XQS))&&(lc(MLS)))||((lc(XQS))&&(lc(MLS)))||((lc(XQS))&&(lc(MLS)))||((lc(XQS))&&(lc(MLS)))||((lc(XQS))&&(lc(MLS)))||((lc(XQS))&&(lc(MLS)))||((lc(XQS))&&(lc(MLS)))||((lc(XQS))&&(lc(MLS)))||((lc(XQS))&&(lc(MLS)))||((lc(XQS))&&(lc(MLS)))||((lc(XQS))&&(lc(MLS)))||((lc(XQS))&&(lc(MLS)))||((lc(XQS))&&(lc(MLS)))||((lc(XQS))&&(lc(MLS)))||((lc(XQS))&&(lc(MLS)))||((lc(XQS))&&(lc(MLS)))||((lc(XQS))&&(lc(MLS)))||((lc(XQS))&&(lc(MLS)))||((lc(XQS))&&(lc(MLS)))||((lc(XQS))&&(lc(MLS)))||((lc(XQS))&&(lc(MLS)))||((lc(XQS))&&(lc(MLS)))||((lc(XQS))&&(lc(MLS)))||((lc(XQS))&&(lc(MLS)))||((lc(XQS))&&(lc(MLS)))||((lc(XQS))&&(lc(MLS)))||((lc(XQS))&&(lc(MLS)))||((lc(XQS))&&(lc(MLS)))||((lc(XQS))&&(lc(MLS)))||((lc(XQS))&&(lc(MLS)))||((lc(XQS))&&(lc(MLS)))||((lc(XQS))&&(lc(MLS)))||((lc(XQS))&&(lc(MLS)))||((lc(XQS))&&(lc(MLS)))||((lc(XQS))&&(lc(MLS)))||((lc(XQS))&&(lc(MLS)))||((lc(XQS))&&(lc(MLS)))||((lc(XQS))&&(lc(MLS)))||((lc(XQS))&&(lc(MLS)))||((lc(XQS))&&(lc(MLS)))||((lc(XQS))&&(lc(MLS)))||((lc(XQS))&&(lc(MLS)))||((lc(XQS))&&(lc(MLS)))||((lc(XQS))&&(lc(MLS)))||((lc(XQS))&&(lc(MLS)))||((lc(XQS))&&(lc(MLS)))||((lc(XQS))&&(lc(MLS)))||((lc(XQS))&&(lc(MLS)))||((lc(XQS))&&(lc(MLS)))||((lc(XQS))&&(lc(MLS)))||((lc(XQS))&&(lc(MLS)))||((lc(XQS))&&(lc(MLS)))||((lc(XQS))&&(lc(MLS)))||((lc(XQS))&&(lc(MLS)))||((lc(XQS))&&(lc(MLS)))||((lc(XQS))&&(lc(MLS)))||((lc(XQS))&&(lc(MLS)))||((lc(XQS))&&(lc(MLS)))||((lc(XQS))&&(lc(MLS)))||((lc(XQS))&&(lc(MLS)))||((lc(XQS))&&(lc(MLS)))||((lc(XQS))&&(lc(MLS)))||((lc(XQS))&&(lc(MLS)))||((lc(XQS))&&(lc(MLS)))||((lc(XQS))&&(lc(MLS)))||((lc(XQS))&&(lc(MLS)))||((lc(XQS))&&(lc(MLS)))||((lc(XQS))&&(lc(MLS)))||((lc(XQS))&&(lc(MLS)))||((lc(XQS))&&(lc(MLS)))||((lc(XQS))&&(lc(MLS)))||((lc(XQS))&&(lc(MLS)))||((lc(XQS))&&(lc(MLS)))||((lc(XQS))&&(lc(MLS)))||((lc(XQS))&&(lc(MLS)))||((lc(XQS))&&(lc(MLS)))||((lc(XQS))&&(lc(MLS)))||((lc(XQS))&&(lc(MLS)))||((lc(XQS))&&(lc(MLS)))||((lc(XQS))&&(lc(MLS)))||((lc(XQS))&&(lc(MLS)))||((lc(XQS))&&(lc(MLS)))||((lc(XQS))&&(lc(MLS)))||((lc(XQS))&&(lc(MLS)))||((lc(XQS))&&(lc(MLS)))||((lc(XQS))&&(lc(MLS)))||((lc(XQS))&&(lc(MLS)))||((lc(XQS))&&(lc(MLS)))||((lc(XQS))&&(lc(MLS)))||((lc(XQS))&&(lc(MLS)))||((lc(XQS))&&(lc(MLS)))||((lc(XQS))&&(lc(MLS)))||((lc(XQS))&&(lc(MLS)))||((lc(XQS))&&(lc(MLS)))||((lc(XQS))&&(lc(MLS)))||((lc(XQS))&&(lc(MLS)))||((lc(XQS))&&(lc(MLS)))||((lc(XQS))&&(lc(MLS)))||((lc(XQS))&&(lc(MLS)))||((lc(XQS))&&(lc(MLS)))||((lc(XQS))&&(lc(MLS)))||((lc(XQS))&&(lc(MLS)))||((lc(XQS))&&(lc(MLS)))||((lc(XQS))&&(lc(MLS)))||((lc(XQS))&&(lc(MLS)))||((lc(XQS))&&(lc(MLS)))||((lc(XQS))&&(lc(MLS)))||((lc(XQS))&&(lc(MLS)))||((lc(XQS))&&(lc(MLS)))||((lc(XQS))&&(lc(MLS)))||((lc(XQS))&&(lc(MLS)))||((lc(XQS))&&(lc(MLS)))||((lc(XQS))&&(lc(MLS)))||((lc(XQS))&&(lc(MLS)))||((lc(XQS))&&(lc(MLS)))||((lc(XQS))&&(lc(MLS)))||((lc(XQS))&&(lc(MLS)))||((lc(XQS))&&(lc(MLS)))||((lc(XQS))&&(lc(MLS)))||((lc(XQS))&&(lc(MLS)))||((lc(XQS))&&(lc(MLS)))||((lc(XQS))&&(lc(MLS)))||((lc(XQS))&&(lc(MLS)))||((lc(XQS))&&(lc(MLS)))||(lc(XQS))||((lc(XQS))&&(lc(MLS)))||((lc(XQS))&&(lc(MLS)))||((lc(XQS))&&(lc(MLS)))||((lc(XQS))&&(lc(MLS)))||((lc(XQS))&&(lc(MLS)))||((lc(XQS))&&(lc(MLS)))||((lc(XQS))&&(lc(MLS)))||((lc(XQS))&&(lc(MLS)))||((lc(XQS))&&(lc(MLS)))||((lc(XQS))&&(lc(MLS)))||((lc(XQS))&&(lc(MLS)))||((lc(XQS))&&(lc(MLS)))||((lc(XQS))&&(lc(MLS)))||((lc(XQS))&&(lc(MLS)))||((lc(XQS))&&(lc(MLS)))||((lc(XQS))&&(lc(MLS)))||((lc(XQS))&&(lc(MLS)))||((lc(XQS))&&(lc(MLS)))||((lc(XQS))&&(lc(MLS)))||((lc(XQS))&&(lc(MLS)))||((lc(XQS))&&(lc(MLS)))||((lc(XQS))&&(lc(MLS)))||((lc(XQS))&&(lc(MLS)))||((lc(XQS))&&(lc(MLS)))||((lc(XQS))&&(lc(MLS)))||((lc(XQS))&&(lc(MLS)))||((lc(XQS))&&(lc(MLS)))||((lc(XQS))&&(lc(MLS)))||((lc(XQS))&&(lc(MLS)))||((lc(XQS))&&(lc(MLS)))||(lc(MLS))||((lc(XQS))&&(lc(MLS)))||((lc(XQS))&&(lc(MLS)))||((lc(XQS))&&(lc(MLS)))||((lc(XQS))&&(lc(MLS)))||((lc(XQS))&&(lc(MLS)))||((lc(XQS))&&(lc(MLS)))||((lc(XQS))&&(lc(MLS)))||((lc(XQS))&&(lc(MLS)))||((lc(XQS))&&(lc(MLS)))||((lc(XQS))&&(lc(MLS)))||((lc(XQS))&&(lc(MLS)))||((lc(XQS))&&(lc(MLS)))||((lc(XQS))&&(lc(MLS)))||((lc(XQS))&&(lc(MLS)))||((lc(XQS))&&(lc(MLS)))||((lc(XQS))&&(lc(MLS)))||((lc(XQS))&&(lc(MLS)))||((lc(XQS))&&(lc(MLS)))||((lc(XQS))&&(lc(MLS)))||((lc(XQS))&&(lc(MLS)))))) {
                int LA46_1 = input.LA(2);

                if ( (((lc(XQS))||((lc(XQS))&&(lc(MLS))))) ) {
                    alt46=1;
                }
                else if ( ((lc(MLS))) ) {
                    alt46=2;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 46, 1, input);

                    throw nvae;
                }
            }
            else if ( (LA46_0==RBRACKET) ) {
                int LA46_2 = input.LA(2);

                if ( ((lc(XQS))) ) {
                    alt46=1;
                }
                else if ( (true) ) {
                    alt46=2;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 46, 2, input);

                    throw nvae;
                }
            }
            else if ( (LA46_0==EOF) ) {
                int LA46_3 = input.LA(2);

                if ( ((lc(XQS))) ) {
                    alt46=1;
                }
                else if ( (true) ) {
                    alt46=2;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 46, 3, input);

                    throw nvae;
                }
            }
            else if ( (LA46_0==RPAREN) ) {
                int LA46_4 = input.LA(2);

                if ( ((lc(XQS))) ) {
                    alt46=1;
                }
                else if ( (true) ) {
                    alt46=2;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 46, 4, input);

                    throw nvae;
                }
            }
            else if ( (LA46_0==RSQUARE) ) {
                int LA46_5 = input.LA(2);

                if ( ((lc(XQS))) ) {
                    alt46=1;
                }
                else if ( (true) ) {
                    alt46=2;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 46, 5, input);

                    throw nvae;
                }
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 46, 0, input);

                throw nvae;
            }
            switch (alt46) {
                case 1 :
                    // XQueryParser.g:387:12: {...}? => ( SEMICOLON ( pm_ApplyExpr )* )?
                    {
                    if ( !((lc(XQS))) ) {
                        if (state.backtracking>0) {state.failed=true; return retval;}
                        throw new FailedPredicateException(input, "pm_Expr", "lc(XQS)");
                    }
                    // XQueryParser.g:387:25: ( SEMICOLON ( pm_ApplyExpr )* )?
                    int alt45=2;
                    int LA45_0 = input.LA(1);

                    if ( (LA45_0==SEMICOLON) ) {
                        int LA45_1 = input.LA(2);

                        if ( (!(((lc(MLS))))) ) {
                            alt45=1;
                        }
                    }
                    switch (alt45) {
                        case 1 :
                            // XQueryParser.g:387:26: SEMICOLON ( pm_ApplyExpr )*
                            {
                            SEMICOLON86=(CommonToken)match(input,SEMICOLON,FOLLOW_SEMICOLON_in_pm_Expr3498); if (state.failed) return retval;
                            if ( state.backtracking==0 ) {
                            SEMICOLON86_tree = (XQDTCommonTree)adaptor.create(SEMICOLON86);
                            adaptor.addChild(root_0, SEMICOLON86_tree);
                            }
                            // XQueryParser.g:387:36: ( pm_ApplyExpr )*
                            loop44:
                            do {
                                int alt44=2;
                                int LA44_0 = input.LA(1);

                                if ( ((LA44_0>=ANCESTOR && LA44_0<=EXIT)||(LA44_0>=SEQUENTIAL && LA44_0<=MAINTAINED)||(LA44_0>=MUTABLE && LA44_0<=LPAREN)||LA44_0==DOLLAR||(LA44_0>=STAR && LA44_0<=SMALLER)||(LA44_0>=SLASH && LA44_0<=DOT_DOT)||LA44_0==ATTR_SIGN||(LA44_0>=APOS && LA44_0<=QUOT)||LA44_0==L_NCName||(LA44_0>=L_Pragma && LA44_0<=L_DoubleLiteral)||LA44_0==EXPLICITLY) ) {
                                    alt44=1;
                                }


                                switch (alt44) {
                            	case 1 :
                            	    // XQueryParser.g:387:36: pm_ApplyExpr
                            	    {
                            	    pushFollow(FOLLOW_pm_ApplyExpr_in_pm_Expr3500);
                            	    pm_ApplyExpr87=pm_ApplyExpr();

                            	    state._fsp--;
                            	    if (state.failed) return retval;
                            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, pm_ApplyExpr87.getTree());

                            	    }
                            	    break;

                            	default :
                            	    break loop44;
                                }
                            } while (true);


                            }
                            break;

                    }


                    }
                    break;
                case 2 :
                    // XQueryParser.g:387:67: 
                    {
                    }
                    break;

            }

            // XQueryParser.g:388:11: ({...}? => ( SEMICOLON p_ConcatExpr )+ | )
            int alt48=2;
            int LA48_0 = input.LA(1);

            if ( (LA48_0==SEMICOLON) && ((lc(MLS)))) {
                alt48=1;
            }
            else if ( (LA48_0==EOF||LA48_0==RPAREN||LA48_0==RBRACKET||LA48_0==RSQUARE) ) {
                alt48=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 48, 0, input);

                throw nvae;
            }
            switch (alt48) {
                case 1 :
                    // XQueryParser.g:388:12: {...}? => ( SEMICOLON p_ConcatExpr )+
                    {
                    if ( !((lc(MLS))) ) {
                        if (state.backtracking>0) {state.failed=true; return retval;}
                        throw new FailedPredicateException(input, "pm_Expr", "lc(MLS)");
                    }
                    // XQueryParser.g:388:25: ( SEMICOLON p_ConcatExpr )+
                    int cnt47=0;
                    loop47:
                    do {
                        int alt47=2;
                        int LA47_0 = input.LA(1);

                        if ( (LA47_0==SEMICOLON) ) {
                            alt47=1;
                        }


                        switch (alt47) {
                    	case 1 :
                    	    // XQueryParser.g:388:26: SEMICOLON p_ConcatExpr
                    	    {
                    	    SEMICOLON88=(CommonToken)match(input,SEMICOLON,FOLLOW_SEMICOLON_in_pm_Expr3525); if (state.failed) return retval;
                    	    if ( state.backtracking==0 ) {
                    	    SEMICOLON88_tree = (XQDTCommonTree)adaptor.create(SEMICOLON88);
                    	    adaptor.addChild(root_0, SEMICOLON88_tree);
                    	    }
                    	    pushFollow(FOLLOW_p_ConcatExpr_in_pm_Expr3527);
                    	    p_ConcatExpr89=p_ConcatExpr();

                    	    state._fsp--;
                    	    if (state.failed) return retval;
                    	    if ( state.backtracking==0 ) adaptor.addChild(root_0, p_ConcatExpr89.getTree());

                    	    }
                    	    break;

                    	default :
                    	    if ( cnt47 >= 1 ) break loop47;
                    	    if (state.backtracking>0) {state.failed=true; return retval;}
                                EarlyExitException eee =
                                    new EarlyExitException(47, input);
                                throw eee;
                        }
                        cnt47++;
                    } while (true);


                    }
                    break;
                case 2 :
                    // XQueryParser.g:388:66: 
                    {
                    }
                    break;

            }


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (XQDTCommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (XQDTCommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "pm_Expr"

    public static class p_ExprSingle_return extends ParserRuleReturnScope {
        XQDTCommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "p_ExprSingle"
    // XQueryParser.g:393:1: p_ExprSingle : ( p_FLWORExpr | p_QuantifiedExpr | p_TypeswitchExpr | p_IfExpr | p_TryCatchExpr | {...}? => p_EvalExpr | {...}? => p_InsertExpr | {...}? => p_DeleteExpr | {...}? => p_RenameExpr | {...}? => p_ReplaceExpr | {...}? => p_TransformExpr | {...}? => p_BlockExpr | {...}? => p_AssignmentExpr | {...}? => p_ExitExpr | {...}? => p_WhileExpr | p_OrExpr );
    public final XQueryParser.p_ExprSingle_return p_ExprSingle() throws RecognitionException {
        XQueryParser.p_ExprSingle_return retval = new XQueryParser.p_ExprSingle_return();
        retval.start = input.LT(1);

        XQDTCommonTree root_0 = null;

        XQueryParser.p_FLWORExpr_return p_FLWORExpr90 = null;

        XQueryParser.p_QuantifiedExpr_return p_QuantifiedExpr91 = null;

        XQueryParser.p_TypeswitchExpr_return p_TypeswitchExpr92 = null;

        XQueryParser.p_IfExpr_return p_IfExpr93 = null;

        XQueryParser.p_TryCatchExpr_return p_TryCatchExpr94 = null;

        XQueryParser.p_EvalExpr_return p_EvalExpr95 = null;

        XQueryParser.p_InsertExpr_return p_InsertExpr96 = null;

        XQueryParser.p_DeleteExpr_return p_DeleteExpr97 = null;

        XQueryParser.p_RenameExpr_return p_RenameExpr98 = null;

        XQueryParser.p_ReplaceExpr_return p_ReplaceExpr99 = null;

        XQueryParser.p_TransformExpr_return p_TransformExpr100 = null;

        XQueryParser.p_BlockExpr_return p_BlockExpr101 = null;

        XQueryParser.p_AssignmentExpr_return p_AssignmentExpr102 = null;

        XQueryParser.p_ExitExpr_return p_ExitExpr103 = null;

        XQueryParser.p_WhileExpr_return p_WhileExpr104 = null;

        XQueryParser.p_OrExpr_return p_OrExpr105 = null;



        try {
            // XQueryParser.g:394:9: ( p_FLWORExpr | p_QuantifiedExpr | p_TypeswitchExpr | p_IfExpr | p_TryCatchExpr | {...}? => p_EvalExpr | {...}? => p_InsertExpr | {...}? => p_DeleteExpr | {...}? => p_RenameExpr | {...}? => p_ReplaceExpr | {...}? => p_TransformExpr | {...}? => p_BlockExpr | {...}? => p_AssignmentExpr | {...}? => p_ExitExpr | {...}? => p_WhileExpr | p_OrExpr )
            int alt49=16;
            alt49 = dfa49.predict(input);
            switch (alt49) {
                case 1 :
                    // XQueryParser.g:394:11: p_FLWORExpr
                    {
                    root_0 = (XQDTCommonTree)adaptor.nil();

                    pushFollow(FOLLOW_p_FLWORExpr_in_p_ExprSingle3561);
                    p_FLWORExpr90=p_FLWORExpr();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, p_FLWORExpr90.getTree());

                    }
                    break;
                case 2 :
                    // XQueryParser.g:395:11: p_QuantifiedExpr
                    {
                    root_0 = (XQDTCommonTree)adaptor.nil();

                    pushFollow(FOLLOW_p_QuantifiedExpr_in_p_ExprSingle3573);
                    p_QuantifiedExpr91=p_QuantifiedExpr();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, p_QuantifiedExpr91.getTree());

                    }
                    break;
                case 3 :
                    // XQueryParser.g:396:11: p_TypeswitchExpr
                    {
                    root_0 = (XQDTCommonTree)adaptor.nil();

                    pushFollow(FOLLOW_p_TypeswitchExpr_in_p_ExprSingle3585);
                    p_TypeswitchExpr92=p_TypeswitchExpr();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, p_TypeswitchExpr92.getTree());

                    }
                    break;
                case 4 :
                    // XQueryParser.g:397:11: p_IfExpr
                    {
                    root_0 = (XQDTCommonTree)adaptor.nil();

                    pushFollow(FOLLOW_p_IfExpr_in_p_ExprSingle3597);
                    p_IfExpr93=p_IfExpr();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, p_IfExpr93.getTree());

                    }
                    break;
                case 5 :
                    // XQueryParser.g:398:11: p_TryCatchExpr
                    {
                    root_0 = (XQDTCommonTree)adaptor.nil();

                    pushFollow(FOLLOW_p_TryCatchExpr_in_p_ExprSingle3609);
                    p_TryCatchExpr94=p_TryCatchExpr();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, p_TryCatchExpr94.getTree());

                    }
                    break;
                case 6 :
                    // XQueryParser.g:399:11: {...}? => p_EvalExpr
                    {
                    root_0 = (XQDTCommonTree)adaptor.nil();

                    if ( !((lc(ZORBA))) ) {
                        if (state.backtracking>0) {state.failed=true; return retval;}
                        throw new FailedPredicateException(input, "p_ExprSingle", "lc(ZORBA)");
                    }
                    pushFollow(FOLLOW_p_EvalExpr_in_p_ExprSingle3624);
                    p_EvalExpr95=p_EvalExpr();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, p_EvalExpr95.getTree());

                    }
                    break;
                case 7 :
                    // XQueryParser.g:400:11: {...}? => p_InsertExpr
                    {
                    root_0 = (XQDTCommonTree)adaptor.nil();

                    if ( !((lc(XQU))) ) {
                        if (state.backtracking>0) {state.failed=true; return retval;}
                        throw new FailedPredicateException(input, "p_ExprSingle", "lc(XQU)");
                    }
                    pushFollow(FOLLOW_p_InsertExpr_in_p_ExprSingle3639);
                    p_InsertExpr96=p_InsertExpr();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, p_InsertExpr96.getTree());

                    }
                    break;
                case 8 :
                    // XQueryParser.g:401:11: {...}? => p_DeleteExpr
                    {
                    root_0 = (XQDTCommonTree)adaptor.nil();

                    if ( !((lc(XQU))) ) {
                        if (state.backtracking>0) {state.failed=true; return retval;}
                        throw new FailedPredicateException(input, "p_ExprSingle", "lc(XQU)");
                    }
                    pushFollow(FOLLOW_p_DeleteExpr_in_p_ExprSingle3654);
                    p_DeleteExpr97=p_DeleteExpr();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, p_DeleteExpr97.getTree());

                    }
                    break;
                case 9 :
                    // XQueryParser.g:402:11: {...}? => p_RenameExpr
                    {
                    root_0 = (XQDTCommonTree)adaptor.nil();

                    if ( !((lc(XQU))) ) {
                        if (state.backtracking>0) {state.failed=true; return retval;}
                        throw new FailedPredicateException(input, "p_ExprSingle", "lc(XQU)");
                    }
                    pushFollow(FOLLOW_p_RenameExpr_in_p_ExprSingle3669);
                    p_RenameExpr98=p_RenameExpr();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, p_RenameExpr98.getTree());

                    }
                    break;
                case 10 :
                    // XQueryParser.g:403:11: {...}? => p_ReplaceExpr
                    {
                    root_0 = (XQDTCommonTree)adaptor.nil();

                    if ( !((lc(XQU))) ) {
                        if (state.backtracking>0) {state.failed=true; return retval;}
                        throw new FailedPredicateException(input, "p_ExprSingle", "lc(XQU)");
                    }
                    pushFollow(FOLLOW_p_ReplaceExpr_in_p_ExprSingle3684);
                    p_ReplaceExpr99=p_ReplaceExpr();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, p_ReplaceExpr99.getTree());

                    }
                    break;
                case 11 :
                    // XQueryParser.g:404:11: {...}? => p_TransformExpr
                    {
                    root_0 = (XQDTCommonTree)adaptor.nil();

                    if ( !((lc(XQU))) ) {
                        if (state.backtracking>0) {state.failed=true; return retval;}
                        throw new FailedPredicateException(input, "p_ExprSingle", "lc(XQU)");
                    }
                    pushFollow(FOLLOW_p_TransformExpr_in_p_ExprSingle3699);
                    p_TransformExpr100=p_TransformExpr();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, p_TransformExpr100.getTree());

                    }
                    break;
                case 12 :
                    // XQueryParser.g:405:11: {...}? => p_BlockExpr
                    {
                    root_0 = (XQDTCommonTree)adaptor.nil();

                    if ( !((lc(XQS))) ) {
                        if (state.backtracking>0) {state.failed=true; return retval;}
                        throw new FailedPredicateException(input, "p_ExprSingle", "lc(XQS)");
                    }
                    pushFollow(FOLLOW_p_BlockExpr_in_p_ExprSingle3714);
                    p_BlockExpr101=p_BlockExpr();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, p_BlockExpr101.getTree());

                    }
                    break;
                case 13 :
                    // XQueryParser.g:406:11: {...}? => p_AssignmentExpr
                    {
                    root_0 = (XQDTCommonTree)adaptor.nil();

                    if ( !((lc(XQS))) ) {
                        if (state.backtracking>0) {state.failed=true; return retval;}
                        throw new FailedPredicateException(input, "p_ExprSingle", "lc(XQS)");
                    }
                    pushFollow(FOLLOW_p_AssignmentExpr_in_p_ExprSingle3729);
                    p_AssignmentExpr102=p_AssignmentExpr();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, p_AssignmentExpr102.getTree());

                    }
                    break;
                case 14 :
                    // XQueryParser.g:407:11: {...}? => p_ExitExpr
                    {
                    root_0 = (XQDTCommonTree)adaptor.nil();

                    if ( !((lc(XQS))) ) {
                        if (state.backtracking>0) {state.failed=true; return retval;}
                        throw new FailedPredicateException(input, "p_ExprSingle", "lc(XQS)");
                    }
                    pushFollow(FOLLOW_p_ExitExpr_in_p_ExprSingle3744);
                    p_ExitExpr103=p_ExitExpr();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, p_ExitExpr103.getTree());

                    }
                    break;
                case 15 :
                    // XQueryParser.g:408:11: {...}? => p_WhileExpr
                    {
                    root_0 = (XQDTCommonTree)adaptor.nil();

                    if ( !((lc(XQS))) ) {
                        if (state.backtracking>0) {state.failed=true; return retval;}
                        throw new FailedPredicateException(input, "p_ExprSingle", "lc(XQS)");
                    }
                    pushFollow(FOLLOW_p_WhileExpr_in_p_ExprSingle3759);
                    p_WhileExpr104=p_WhileExpr();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, p_WhileExpr104.getTree());

                    }
                    break;
                case 16 :
                    // XQueryParser.g:409:11: p_OrExpr
                    {
                    root_0 = (XQDTCommonTree)adaptor.nil();

                    pushFollow(FOLLOW_p_OrExpr_in_p_ExprSingle3771);
                    p_OrExpr105=p_OrExpr();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, p_OrExpr105.getTree());

                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (XQDTCommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (XQDTCommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "p_ExprSingle"

    public static class p_FLWORExpr_return extends ParserRuleReturnScope {
        XQDTCommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "p_FLWORExpr"
    // XQueryParser.g:413:1: p_FLWORExpr : p_InitialClause ( p_IntermediateClause )* p_ReturnClause ;
    public final XQueryParser.p_FLWORExpr_return p_FLWORExpr() throws RecognitionException {
        XQueryParser.p_FLWORExpr_return retval = new XQueryParser.p_FLWORExpr_return();
        retval.start = input.LT(1);

        XQDTCommonTree root_0 = null;

        XQueryParser.p_InitialClause_return p_InitialClause106 = null;

        XQueryParser.p_IntermediateClause_return p_IntermediateClause107 = null;

        XQueryParser.p_ReturnClause_return p_ReturnClause108 = null;



        try {
            // XQueryParser.g:414:9: ( p_InitialClause ( p_IntermediateClause )* p_ReturnClause )
            // XQueryParser.g:414:11: p_InitialClause ( p_IntermediateClause )* p_ReturnClause
            {
            root_0 = (XQDTCommonTree)adaptor.nil();

            pushFollow(FOLLOW_p_InitialClause_in_p_FLWORExpr3797);
            p_InitialClause106=p_InitialClause();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, p_InitialClause106.getTree());
            // XQueryParser.g:414:27: ( p_IntermediateClause )*
            loop50:
            do {
                int alt50=2;
                int LA50_0 = input.LA(1);

                if ( (LA50_0==FOR||LA50_0==LET||LA50_0==ORDER||LA50_0==STABLE||LA50_0==WHERE||LA50_0==COUNT||LA50_0==GROUP) ) {
                    alt50=1;
                }


                switch (alt50) {
            	case 1 :
            	    // XQueryParser.g:414:27: p_IntermediateClause
            	    {
            	    pushFollow(FOLLOW_p_IntermediateClause_in_p_FLWORExpr3799);
            	    p_IntermediateClause107=p_IntermediateClause();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, p_IntermediateClause107.getTree());

            	    }
            	    break;

            	default :
            	    break loop50;
                }
            } while (true);

            pushFollow(FOLLOW_p_ReturnClause_in_p_FLWORExpr3802);
            p_ReturnClause108=p_ReturnClause();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, p_ReturnClause108.getTree());

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (XQDTCommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (XQDTCommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "p_FLWORExpr"

    public static class p_InitialClause_return extends ParserRuleReturnScope {
        XQDTCommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "p_InitialClause"
    // XQueryParser.g:418:1: p_InitialClause : ( p_ForClause | p_LetClause | p_WindowClause );
    public final XQueryParser.p_InitialClause_return p_InitialClause() throws RecognitionException {
        XQueryParser.p_InitialClause_return retval = new XQueryParser.p_InitialClause_return();
        retval.start = input.LT(1);

        XQDTCommonTree root_0 = null;

        XQueryParser.p_ForClause_return p_ForClause109 = null;

        XQueryParser.p_LetClause_return p_LetClause110 = null;

        XQueryParser.p_WindowClause_return p_WindowClause111 = null;



        try {
            // XQueryParser.g:419:9: ( p_ForClause | p_LetClause | p_WindowClause )
            int alt51=3;
            int LA51_0 = input.LA(1);

            if ( (LA51_0==FOR) ) {
                int LA51_1 = input.LA(2);

                if ( (LA51_1==DOLLAR) ) {
                    alt51=1;
                }
                else if ( (LA51_1==SLIDING||LA51_1==TUMBLING) ) {
                    alt51=3;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 51, 1, input);

                    throw nvae;
                }
            }
            else if ( (LA51_0==LET) ) {
                alt51=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 51, 0, input);

                throw nvae;
            }
            switch (alt51) {
                case 1 :
                    // XQueryParser.g:419:11: p_ForClause
                    {
                    root_0 = (XQDTCommonTree)adaptor.nil();

                    pushFollow(FOLLOW_p_ForClause_in_p_InitialClause3828);
                    p_ForClause109=p_ForClause();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, p_ForClause109.getTree());

                    }
                    break;
                case 2 :
                    // XQueryParser.g:419:25: p_LetClause
                    {
                    root_0 = (XQDTCommonTree)adaptor.nil();

                    pushFollow(FOLLOW_p_LetClause_in_p_InitialClause3832);
                    p_LetClause110=p_LetClause();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, p_LetClause110.getTree());

                    }
                    break;
                case 3 :
                    // XQueryParser.g:419:39: p_WindowClause
                    {
                    root_0 = (XQDTCommonTree)adaptor.nil();

                    pushFollow(FOLLOW_p_WindowClause_in_p_InitialClause3836);
                    p_WindowClause111=p_WindowClause();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, p_WindowClause111.getTree());

                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (XQDTCommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (XQDTCommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "p_InitialClause"

    public static class p_IntermediateClause_return extends ParserRuleReturnScope {
        XQDTCommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "p_IntermediateClause"
    // XQueryParser.g:423:1: p_IntermediateClause : ( p_InitialClause | p_WhereClause | p_GroupByClause | p_OrderByClause | p_CountClause );
    public final XQueryParser.p_IntermediateClause_return p_IntermediateClause() throws RecognitionException {
        XQueryParser.p_IntermediateClause_return retval = new XQueryParser.p_IntermediateClause_return();
        retval.start = input.LT(1);

        XQDTCommonTree root_0 = null;

        XQueryParser.p_InitialClause_return p_InitialClause112 = null;

        XQueryParser.p_WhereClause_return p_WhereClause113 = null;

        XQueryParser.p_GroupByClause_return p_GroupByClause114 = null;

        XQueryParser.p_OrderByClause_return p_OrderByClause115 = null;

        XQueryParser.p_CountClause_return p_CountClause116 = null;



        try {
            // XQueryParser.g:424:9: ( p_InitialClause | p_WhereClause | p_GroupByClause | p_OrderByClause | p_CountClause )
            int alt52=5;
            switch ( input.LA(1) ) {
            case FOR:
            case LET:
                {
                alt52=1;
                }
                break;
            case WHERE:
                {
                alt52=2;
                }
                break;
            case GROUP:
                {
                alt52=3;
                }
                break;
            case ORDER:
            case STABLE:
                {
                alt52=4;
                }
                break;
            case COUNT:
                {
                alt52=5;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 52, 0, input);

                throw nvae;
            }

            switch (alt52) {
                case 1 :
                    // XQueryParser.g:424:11: p_InitialClause
                    {
                    root_0 = (XQDTCommonTree)adaptor.nil();

                    pushFollow(FOLLOW_p_InitialClause_in_p_IntermediateClause3862);
                    p_InitialClause112=p_InitialClause();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, p_InitialClause112.getTree());

                    }
                    break;
                case 2 :
                    // XQueryParser.g:424:29: p_WhereClause
                    {
                    root_0 = (XQDTCommonTree)adaptor.nil();

                    pushFollow(FOLLOW_p_WhereClause_in_p_IntermediateClause3866);
                    p_WhereClause113=p_WhereClause();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, p_WhereClause113.getTree());

                    }
                    break;
                case 3 :
                    // XQueryParser.g:424:45: p_GroupByClause
                    {
                    root_0 = (XQDTCommonTree)adaptor.nil();

                    pushFollow(FOLLOW_p_GroupByClause_in_p_IntermediateClause3870);
                    p_GroupByClause114=p_GroupByClause();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, p_GroupByClause114.getTree());

                    }
                    break;
                case 4 :
                    // XQueryParser.g:424:63: p_OrderByClause
                    {
                    root_0 = (XQDTCommonTree)adaptor.nil();

                    pushFollow(FOLLOW_p_OrderByClause_in_p_IntermediateClause3874);
                    p_OrderByClause115=p_OrderByClause();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, p_OrderByClause115.getTree());

                    }
                    break;
                case 5 :
                    // XQueryParser.g:424:81: p_CountClause
                    {
                    root_0 = (XQDTCommonTree)adaptor.nil();

                    pushFollow(FOLLOW_p_CountClause_in_p_IntermediateClause3878);
                    p_CountClause116=p_CountClause();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, p_CountClause116.getTree());

                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (XQDTCommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (XQDTCommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "p_IntermediateClause"

    public static class p_ForClause_return extends ParserRuleReturnScope {
        XQDTCommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "p_ForClause"
    // XQueryParser.g:428:1: p_ForClause : k+= FOR DOLLAR p_VarName ( p_TypeDeclaration )? ( p_PositionalVar )? k+= IN p_ExprSingle ( COMMA DOLLAR p_VarName ( p_TypeDeclaration )? ( p_PositionalVar )? k+= IN p_ExprSingle )* ;
    public final XQueryParser.p_ForClause_return p_ForClause() throws RecognitionException {
        XQueryParser.p_ForClause_return retval = new XQueryParser.p_ForClause_return();
        retval.start = input.LT(1);

        XQDTCommonTree root_0 = null;

        CommonToken DOLLAR117=null;
        CommonToken COMMA122=null;
        CommonToken DOLLAR123=null;
        CommonToken k=null;
        List list_k=null;
        XQueryParser.p_VarName_return p_VarName118 = null;

        XQueryParser.p_TypeDeclaration_return p_TypeDeclaration119 = null;

        XQueryParser.p_PositionalVar_return p_PositionalVar120 = null;

        XQueryParser.p_ExprSingle_return p_ExprSingle121 = null;

        XQueryParser.p_VarName_return p_VarName124 = null;

        XQueryParser.p_TypeDeclaration_return p_TypeDeclaration125 = null;

        XQueryParser.p_PositionalVar_return p_PositionalVar126 = null;

        XQueryParser.p_ExprSingle_return p_ExprSingle127 = null;


        XQDTCommonTree DOLLAR117_tree=null;
        XQDTCommonTree COMMA122_tree=null;
        XQDTCommonTree DOLLAR123_tree=null;
        XQDTCommonTree k_tree=null;

        try {
            // XQueryParser.g:429:9: (k+= FOR DOLLAR p_VarName ( p_TypeDeclaration )? ( p_PositionalVar )? k+= IN p_ExprSingle ( COMMA DOLLAR p_VarName ( p_TypeDeclaration )? ( p_PositionalVar )? k+= IN p_ExprSingle )* )
            // XQueryParser.g:429:11: k+= FOR DOLLAR p_VarName ( p_TypeDeclaration )? ( p_PositionalVar )? k+= IN p_ExprSingle ( COMMA DOLLAR p_VarName ( p_TypeDeclaration )? ( p_PositionalVar )? k+= IN p_ExprSingle )*
            {
            root_0 = (XQDTCommonTree)adaptor.nil();

            k=(CommonToken)match(input,FOR,FOLLOW_FOR_in_p_ForClause3906); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            k_tree = (XQDTCommonTree)adaptor.create(k);
            adaptor.addChild(root_0, k_tree);
            }
            if (list_k==null) list_k=new ArrayList();
            list_k.add(k);

            DOLLAR117=(CommonToken)match(input,DOLLAR,FOLLOW_DOLLAR_in_p_ForClause3908); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            DOLLAR117_tree = (XQDTCommonTree)adaptor.create(DOLLAR117);
            adaptor.addChild(root_0, DOLLAR117_tree);
            }
            pushFollow(FOLLOW_p_VarName_in_p_ForClause3910);
            p_VarName118=p_VarName();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, p_VarName118.getTree());
            // XQueryParser.g:429:35: ( p_TypeDeclaration )?
            int alt53=2;
            int LA53_0 = input.LA(1);

            if ( (LA53_0==AS) ) {
                alt53=1;
            }
            switch (alt53) {
                case 1 :
                    // XQueryParser.g:429:35: p_TypeDeclaration
                    {
                    pushFollow(FOLLOW_p_TypeDeclaration_in_p_ForClause3912);
                    p_TypeDeclaration119=p_TypeDeclaration();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, p_TypeDeclaration119.getTree());

                    }
                    break;

            }

            // XQueryParser.g:429:54: ( p_PositionalVar )?
            int alt54=2;
            int LA54_0 = input.LA(1);

            if ( (LA54_0==AT) ) {
                alt54=1;
            }
            switch (alt54) {
                case 1 :
                    // XQueryParser.g:429:54: p_PositionalVar
                    {
                    pushFollow(FOLLOW_p_PositionalVar_in_p_ForClause3915);
                    p_PositionalVar120=p_PositionalVar();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, p_PositionalVar120.getTree());

                    }
                    break;

            }

            k=(CommonToken)match(input,IN,FOLLOW_IN_in_p_ForClause3920); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            k_tree = (XQDTCommonTree)adaptor.create(k);
            adaptor.addChild(root_0, k_tree);
            }
            if (list_k==null) list_k=new ArrayList();
            list_k.add(k);

            pushFollow(FOLLOW_p_ExprSingle_in_p_ForClause3922);
            p_ExprSingle121=p_ExprSingle();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, p_ExprSingle121.getTree());
            // XQueryParser.g:429:90: ( COMMA DOLLAR p_VarName ( p_TypeDeclaration )? ( p_PositionalVar )? k+= IN p_ExprSingle )*
            loop57:
            do {
                int alt57=2;
                int LA57_0 = input.LA(1);

                if ( (LA57_0==COMMA) ) {
                    alt57=1;
                }


                switch (alt57) {
            	case 1 :
            	    // XQueryParser.g:429:91: COMMA DOLLAR p_VarName ( p_TypeDeclaration )? ( p_PositionalVar )? k+= IN p_ExprSingle
            	    {
            	    COMMA122=(CommonToken)match(input,COMMA,FOLLOW_COMMA_in_p_ForClause3925); if (state.failed) return retval;
            	    if ( state.backtracking==0 ) {
            	    COMMA122_tree = (XQDTCommonTree)adaptor.create(COMMA122);
            	    adaptor.addChild(root_0, COMMA122_tree);
            	    }
            	    DOLLAR123=(CommonToken)match(input,DOLLAR,FOLLOW_DOLLAR_in_p_ForClause3927); if (state.failed) return retval;
            	    if ( state.backtracking==0 ) {
            	    DOLLAR123_tree = (XQDTCommonTree)adaptor.create(DOLLAR123);
            	    adaptor.addChild(root_0, DOLLAR123_tree);
            	    }
            	    pushFollow(FOLLOW_p_VarName_in_p_ForClause3929);
            	    p_VarName124=p_VarName();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, p_VarName124.getTree());
            	    // XQueryParser.g:429:114: ( p_TypeDeclaration )?
            	    int alt55=2;
            	    int LA55_0 = input.LA(1);

            	    if ( (LA55_0==AS) ) {
            	        alt55=1;
            	    }
            	    switch (alt55) {
            	        case 1 :
            	            // XQueryParser.g:429:114: p_TypeDeclaration
            	            {
            	            pushFollow(FOLLOW_p_TypeDeclaration_in_p_ForClause3931);
            	            p_TypeDeclaration125=p_TypeDeclaration();

            	            state._fsp--;
            	            if (state.failed) return retval;
            	            if ( state.backtracking==0 ) adaptor.addChild(root_0, p_TypeDeclaration125.getTree());

            	            }
            	            break;

            	    }

            	    // XQueryParser.g:429:133: ( p_PositionalVar )?
            	    int alt56=2;
            	    int LA56_0 = input.LA(1);

            	    if ( (LA56_0==AT) ) {
            	        alt56=1;
            	    }
            	    switch (alt56) {
            	        case 1 :
            	            // XQueryParser.g:429:133: p_PositionalVar
            	            {
            	            pushFollow(FOLLOW_p_PositionalVar_in_p_ForClause3934);
            	            p_PositionalVar126=p_PositionalVar();

            	            state._fsp--;
            	            if (state.failed) return retval;
            	            if ( state.backtracking==0 ) adaptor.addChild(root_0, p_PositionalVar126.getTree());

            	            }
            	            break;

            	    }

            	    k=(CommonToken)match(input,IN,FOLLOW_IN_in_p_ForClause3939); if (state.failed) return retval;
            	    if ( state.backtracking==0 ) {
            	    k_tree = (XQDTCommonTree)adaptor.create(k);
            	    adaptor.addChild(root_0, k_tree);
            	    }
            	    if (list_k==null) list_k=new ArrayList();
            	    list_k.add(k);

            	    pushFollow(FOLLOW_p_ExprSingle_in_p_ForClause3941);
            	    p_ExprSingle127=p_ExprSingle();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, p_ExprSingle127.getTree());

            	    }
            	    break;

            	default :
            	    break loop57;
                }
            } while (true);

            if ( state.backtracking==0 ) {
              ak(list_k);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (XQDTCommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (XQDTCommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "p_ForClause"

    public static class p_PositionalVar_return extends ParserRuleReturnScope {
        XQDTCommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "p_PositionalVar"
    // XQueryParser.g:433:1: p_PositionalVar : ka= AT DOLLAR p_VarName ;
    public final XQueryParser.p_PositionalVar_return p_PositionalVar() throws RecognitionException {
        XQueryParser.p_PositionalVar_return retval = new XQueryParser.p_PositionalVar_return();
        retval.start = input.LT(1);

        XQDTCommonTree root_0 = null;

        CommonToken ka=null;
        CommonToken DOLLAR128=null;
        XQueryParser.p_VarName_return p_VarName129 = null;


        XQDTCommonTree ka_tree=null;
        XQDTCommonTree DOLLAR128_tree=null;

        try {
            // XQueryParser.g:434:9: (ka= AT DOLLAR p_VarName )
            // XQueryParser.g:434:11: ka= AT DOLLAR p_VarName
            {
            root_0 = (XQDTCommonTree)adaptor.nil();

            ka=(CommonToken)match(input,AT,FOLLOW_AT_in_p_PositionalVar3973); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            ka_tree = (XQDTCommonTree)adaptor.create(ka);
            adaptor.addChild(root_0, ka_tree);
            }
            if ( state.backtracking==0 ) {
              ak(ka);
            }
            DOLLAR128=(CommonToken)match(input,DOLLAR,FOLLOW_DOLLAR_in_p_PositionalVar3977); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            DOLLAR128_tree = (XQDTCommonTree)adaptor.create(DOLLAR128);
            adaptor.addChild(root_0, DOLLAR128_tree);
            }
            pushFollow(FOLLOW_p_VarName_in_p_PositionalVar3979);
            p_VarName129=p_VarName();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, p_VarName129.getTree());

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (XQDTCommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (XQDTCommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "p_PositionalVar"

    public static class p_LetClause_return extends ParserRuleReturnScope {
        XQDTCommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "p_LetClause"
    // XQueryParser.g:438:1: p_LetClause : kl= LET DOLLAR p_VarName ( p_TypeDeclaration )? BIND p_ExprSingle ( COMMA DOLLAR p_VarName ( p_TypeDeclaration )? BIND p_ExprSingle )* ;
    public final XQueryParser.p_LetClause_return p_LetClause() throws RecognitionException {
        XQueryParser.p_LetClause_return retval = new XQueryParser.p_LetClause_return();
        retval.start = input.LT(1);

        XQDTCommonTree root_0 = null;

        CommonToken kl=null;
        CommonToken DOLLAR130=null;
        CommonToken BIND133=null;
        CommonToken COMMA135=null;
        CommonToken DOLLAR136=null;
        CommonToken BIND139=null;
        XQueryParser.p_VarName_return p_VarName131 = null;

        XQueryParser.p_TypeDeclaration_return p_TypeDeclaration132 = null;

        XQueryParser.p_ExprSingle_return p_ExprSingle134 = null;

        XQueryParser.p_VarName_return p_VarName137 = null;

        XQueryParser.p_TypeDeclaration_return p_TypeDeclaration138 = null;

        XQueryParser.p_ExprSingle_return p_ExprSingle140 = null;


        XQDTCommonTree kl_tree=null;
        XQDTCommonTree DOLLAR130_tree=null;
        XQDTCommonTree BIND133_tree=null;
        XQDTCommonTree COMMA135_tree=null;
        XQDTCommonTree DOLLAR136_tree=null;
        XQDTCommonTree BIND139_tree=null;

        try {
            // XQueryParser.g:439:9: (kl= LET DOLLAR p_VarName ( p_TypeDeclaration )? BIND p_ExprSingle ( COMMA DOLLAR p_VarName ( p_TypeDeclaration )? BIND p_ExprSingle )* )
            // XQueryParser.g:439:11: kl= LET DOLLAR p_VarName ( p_TypeDeclaration )? BIND p_ExprSingle ( COMMA DOLLAR p_VarName ( p_TypeDeclaration )? BIND p_ExprSingle )*
            {
            root_0 = (XQDTCommonTree)adaptor.nil();

            kl=(CommonToken)match(input,LET,FOLLOW_LET_in_p_LetClause4007); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            kl_tree = (XQDTCommonTree)adaptor.create(kl);
            adaptor.addChild(root_0, kl_tree);
            }
            if ( state.backtracking==0 ) {
              ak(kl);
            }
            DOLLAR130=(CommonToken)match(input,DOLLAR,FOLLOW_DOLLAR_in_p_LetClause4011); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            DOLLAR130_tree = (XQDTCommonTree)adaptor.create(DOLLAR130);
            adaptor.addChild(root_0, DOLLAR130_tree);
            }
            pushFollow(FOLLOW_p_VarName_in_p_LetClause4013);
            p_VarName131=p_VarName();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, p_VarName131.getTree());
            // XQueryParser.g:439:46: ( p_TypeDeclaration )?
            int alt58=2;
            int LA58_0 = input.LA(1);

            if ( (LA58_0==AS) ) {
                alt58=1;
            }
            switch (alt58) {
                case 1 :
                    // XQueryParser.g:439:46: p_TypeDeclaration
                    {
                    pushFollow(FOLLOW_p_TypeDeclaration_in_p_LetClause4015);
                    p_TypeDeclaration132=p_TypeDeclaration();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, p_TypeDeclaration132.getTree());

                    }
                    break;

            }

            BIND133=(CommonToken)match(input,BIND,FOLLOW_BIND_in_p_LetClause4018); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            BIND133_tree = (XQDTCommonTree)adaptor.create(BIND133);
            adaptor.addChild(root_0, BIND133_tree);
            }
            pushFollow(FOLLOW_p_ExprSingle_in_p_LetClause4020);
            p_ExprSingle134=p_ExprSingle();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, p_ExprSingle134.getTree());
            // XQueryParser.g:439:83: ( COMMA DOLLAR p_VarName ( p_TypeDeclaration )? BIND p_ExprSingle )*
            loop60:
            do {
                int alt60=2;
                int LA60_0 = input.LA(1);

                if ( (LA60_0==COMMA) ) {
                    alt60=1;
                }


                switch (alt60) {
            	case 1 :
            	    // XQueryParser.g:439:84: COMMA DOLLAR p_VarName ( p_TypeDeclaration )? BIND p_ExprSingle
            	    {
            	    COMMA135=(CommonToken)match(input,COMMA,FOLLOW_COMMA_in_p_LetClause4023); if (state.failed) return retval;
            	    if ( state.backtracking==0 ) {
            	    COMMA135_tree = (XQDTCommonTree)adaptor.create(COMMA135);
            	    adaptor.addChild(root_0, COMMA135_tree);
            	    }
            	    DOLLAR136=(CommonToken)match(input,DOLLAR,FOLLOW_DOLLAR_in_p_LetClause4025); if (state.failed) return retval;
            	    if ( state.backtracking==0 ) {
            	    DOLLAR136_tree = (XQDTCommonTree)adaptor.create(DOLLAR136);
            	    adaptor.addChild(root_0, DOLLAR136_tree);
            	    }
            	    pushFollow(FOLLOW_p_VarName_in_p_LetClause4027);
            	    p_VarName137=p_VarName();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, p_VarName137.getTree());
            	    // XQueryParser.g:439:107: ( p_TypeDeclaration )?
            	    int alt59=2;
            	    int LA59_0 = input.LA(1);

            	    if ( (LA59_0==AS) ) {
            	        alt59=1;
            	    }
            	    switch (alt59) {
            	        case 1 :
            	            // XQueryParser.g:439:107: p_TypeDeclaration
            	            {
            	            pushFollow(FOLLOW_p_TypeDeclaration_in_p_LetClause4029);
            	            p_TypeDeclaration138=p_TypeDeclaration();

            	            state._fsp--;
            	            if (state.failed) return retval;
            	            if ( state.backtracking==0 ) adaptor.addChild(root_0, p_TypeDeclaration138.getTree());

            	            }
            	            break;

            	    }

            	    BIND139=(CommonToken)match(input,BIND,FOLLOW_BIND_in_p_LetClause4032); if (state.failed) return retval;
            	    if ( state.backtracking==0 ) {
            	    BIND139_tree = (XQDTCommonTree)adaptor.create(BIND139);
            	    adaptor.addChild(root_0, BIND139_tree);
            	    }
            	    pushFollow(FOLLOW_p_ExprSingle_in_p_LetClause4034);
            	    p_ExprSingle140=p_ExprSingle();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, p_ExprSingle140.getTree());

            	    }
            	    break;

            	default :
            	    break loop60;
                }
            } while (true);


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (XQDTCommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (XQDTCommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "p_LetClause"

    public static class p_WindowClause_return extends ParserRuleReturnScope {
        XQDTCommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "p_WindowClause"
    // XQueryParser.g:443:1: p_WindowClause : kf= FOR ( p_TumblingWindowClause | p_SlidingWindowClause ) ;
    public final XQueryParser.p_WindowClause_return p_WindowClause() throws RecognitionException {
        XQueryParser.p_WindowClause_return retval = new XQueryParser.p_WindowClause_return();
        retval.start = input.LT(1);

        XQDTCommonTree root_0 = null;

        CommonToken kf=null;
        XQueryParser.p_TumblingWindowClause_return p_TumblingWindowClause141 = null;

        XQueryParser.p_SlidingWindowClause_return p_SlidingWindowClause142 = null;


        XQDTCommonTree kf_tree=null;

        try {
            // XQueryParser.g:444:9: (kf= FOR ( p_TumblingWindowClause | p_SlidingWindowClause ) )
            // XQueryParser.g:444:11: kf= FOR ( p_TumblingWindowClause | p_SlidingWindowClause )
            {
            root_0 = (XQDTCommonTree)adaptor.nil();

            kf=(CommonToken)match(input,FOR,FOLLOW_FOR_in_p_WindowClause4064); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            kf_tree = (XQDTCommonTree)adaptor.create(kf);
            adaptor.addChild(root_0, kf_tree);
            }
            if ( state.backtracking==0 ) {
              ak(kf);
            }
            // XQueryParser.g:444:29: ( p_TumblingWindowClause | p_SlidingWindowClause )
            int alt61=2;
            int LA61_0 = input.LA(1);

            if ( (LA61_0==TUMBLING) ) {
                alt61=1;
            }
            else if ( (LA61_0==SLIDING) ) {
                alt61=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 61, 0, input);

                throw nvae;
            }
            switch (alt61) {
                case 1 :
                    // XQueryParser.g:444:30: p_TumblingWindowClause
                    {
                    pushFollow(FOLLOW_p_TumblingWindowClause_in_p_WindowClause4069);
                    p_TumblingWindowClause141=p_TumblingWindowClause();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, p_TumblingWindowClause141.getTree());

                    }
                    break;
                case 2 :
                    // XQueryParser.g:444:55: p_SlidingWindowClause
                    {
                    pushFollow(FOLLOW_p_SlidingWindowClause_in_p_WindowClause4073);
                    p_SlidingWindowClause142=p_SlidingWindowClause();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, p_SlidingWindowClause142.getTree());

                    }
                    break;

            }


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (XQDTCommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (XQDTCommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "p_WindowClause"

    public static class p_TumblingWindowClause_return extends ParserRuleReturnScope {
        XQDTCommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "p_TumblingWindowClause"
    // XQueryParser.g:448:1: p_TumblingWindowClause : k+= TUMBLING k+= WINDOW DOLLAR p_VarName ( p_TypeDeclaration )? IN p_ExprSingle p_WindowStartCondition ( p_WindowEndCondition )? ;
    public final XQueryParser.p_TumblingWindowClause_return p_TumblingWindowClause() throws RecognitionException {
        XQueryParser.p_TumblingWindowClause_return retval = new XQueryParser.p_TumblingWindowClause_return();
        retval.start = input.LT(1);

        XQDTCommonTree root_0 = null;

        CommonToken DOLLAR143=null;
        CommonToken IN146=null;
        CommonToken k=null;
        List list_k=null;
        XQueryParser.p_VarName_return p_VarName144 = null;

        XQueryParser.p_TypeDeclaration_return p_TypeDeclaration145 = null;

        XQueryParser.p_ExprSingle_return p_ExprSingle147 = null;

        XQueryParser.p_WindowStartCondition_return p_WindowStartCondition148 = null;

        XQueryParser.p_WindowEndCondition_return p_WindowEndCondition149 = null;


        XQDTCommonTree DOLLAR143_tree=null;
        XQDTCommonTree IN146_tree=null;
        XQDTCommonTree k_tree=null;

        try {
            // XQueryParser.g:449:9: (k+= TUMBLING k+= WINDOW DOLLAR p_VarName ( p_TypeDeclaration )? IN p_ExprSingle p_WindowStartCondition ( p_WindowEndCondition )? )
            // XQueryParser.g:449:11: k+= TUMBLING k+= WINDOW DOLLAR p_VarName ( p_TypeDeclaration )? IN p_ExprSingle p_WindowStartCondition ( p_WindowEndCondition )?
            {
            root_0 = (XQDTCommonTree)adaptor.nil();

            k=(CommonToken)match(input,TUMBLING,FOLLOW_TUMBLING_in_p_TumblingWindowClause4110); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            k_tree = (XQDTCommonTree)adaptor.create(k);
            adaptor.addChild(root_0, k_tree);
            }
            if (list_k==null) list_k=new ArrayList();
            list_k.add(k);

            k=(CommonToken)match(input,WINDOW,FOLLOW_WINDOW_in_p_TumblingWindowClause4114); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            k_tree = (XQDTCommonTree)adaptor.create(k);
            adaptor.addChild(root_0, k_tree);
            }
            if (list_k==null) list_k=new ArrayList();
            list_k.add(k);

            DOLLAR143=(CommonToken)match(input,DOLLAR,FOLLOW_DOLLAR_in_p_TumblingWindowClause4116); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            DOLLAR143_tree = (XQDTCommonTree)adaptor.create(DOLLAR143);
            adaptor.addChild(root_0, DOLLAR143_tree);
            }
            pushFollow(FOLLOW_p_VarName_in_p_TumblingWindowClause4118);
            p_VarName144=p_VarName();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, p_VarName144.getTree());
            // XQueryParser.g:449:50: ( p_TypeDeclaration )?
            int alt62=2;
            int LA62_0 = input.LA(1);

            if ( (LA62_0==AS) ) {
                alt62=1;
            }
            switch (alt62) {
                case 1 :
                    // XQueryParser.g:449:50: p_TypeDeclaration
                    {
                    pushFollow(FOLLOW_p_TypeDeclaration_in_p_TumblingWindowClause4120);
                    p_TypeDeclaration145=p_TypeDeclaration();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, p_TypeDeclaration145.getTree());

                    }
                    break;

            }

            IN146=(CommonToken)match(input,IN,FOLLOW_IN_in_p_TumblingWindowClause4123); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            IN146_tree = (XQDTCommonTree)adaptor.create(IN146);
            adaptor.addChild(root_0, IN146_tree);
            }
            pushFollow(FOLLOW_p_ExprSingle_in_p_TumblingWindowClause4125);
            p_ExprSingle147=p_ExprSingle();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, p_ExprSingle147.getTree());
            pushFollow(FOLLOW_p_WindowStartCondition_in_p_TumblingWindowClause4127);
            p_WindowStartCondition148=p_WindowStartCondition();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, p_WindowStartCondition148.getTree());
            // XQueryParser.g:449:108: ( p_WindowEndCondition )?
            int alt63=2;
            int LA63_0 = input.LA(1);

            if ( (LA63_0==END||LA63_0==ONLY) ) {
                alt63=1;
            }
            switch (alt63) {
                case 1 :
                    // XQueryParser.g:449:108: p_WindowEndCondition
                    {
                    pushFollow(FOLLOW_p_WindowEndCondition_in_p_TumblingWindowClause4129);
                    p_WindowEndCondition149=p_WindowEndCondition();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, p_WindowEndCondition149.getTree());

                    }
                    break;

            }

            if ( state.backtracking==0 ) {
              ak(list_k);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (XQDTCommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (XQDTCommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "p_TumblingWindowClause"

    public static class p_SlidingWindowClause_return extends ParserRuleReturnScope {
        XQDTCommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "p_SlidingWindowClause"
    // XQueryParser.g:453:1: p_SlidingWindowClause : k+= SLIDING k+= WINDOW DOLLAR p_VarName ( p_TypeDeclaration )? IN p_ExprSingle p_WindowStartCondition ( p_WindowEndCondition )? ;
    public final XQueryParser.p_SlidingWindowClause_return p_SlidingWindowClause() throws RecognitionException {
        XQueryParser.p_SlidingWindowClause_return retval = new XQueryParser.p_SlidingWindowClause_return();
        retval.start = input.LT(1);

        XQDTCommonTree root_0 = null;

        CommonToken DOLLAR150=null;
        CommonToken IN153=null;
        CommonToken k=null;
        List list_k=null;
        XQueryParser.p_VarName_return p_VarName151 = null;

        XQueryParser.p_TypeDeclaration_return p_TypeDeclaration152 = null;

        XQueryParser.p_ExprSingle_return p_ExprSingle154 = null;

        XQueryParser.p_WindowStartCondition_return p_WindowStartCondition155 = null;

        XQueryParser.p_WindowEndCondition_return p_WindowEndCondition156 = null;


        XQDTCommonTree DOLLAR150_tree=null;
        XQDTCommonTree IN153_tree=null;
        XQDTCommonTree k_tree=null;

        try {
            // XQueryParser.g:454:9: (k+= SLIDING k+= WINDOW DOLLAR p_VarName ( p_TypeDeclaration )? IN p_ExprSingle p_WindowStartCondition ( p_WindowEndCondition )? )
            // XQueryParser.g:454:11: k+= SLIDING k+= WINDOW DOLLAR p_VarName ( p_TypeDeclaration )? IN p_ExprSingle p_WindowStartCondition ( p_WindowEndCondition )?
            {
            root_0 = (XQDTCommonTree)adaptor.nil();

            k=(CommonToken)match(input,SLIDING,FOLLOW_SLIDING_in_p_SlidingWindowClause4160); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            k_tree = (XQDTCommonTree)adaptor.create(k);
            adaptor.addChild(root_0, k_tree);
            }
            if (list_k==null) list_k=new ArrayList();
            list_k.add(k);

            k=(CommonToken)match(input,WINDOW,FOLLOW_WINDOW_in_p_SlidingWindowClause4164); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            k_tree = (XQDTCommonTree)adaptor.create(k);
            adaptor.addChild(root_0, k_tree);
            }
            if (list_k==null) list_k=new ArrayList();
            list_k.add(k);

            DOLLAR150=(CommonToken)match(input,DOLLAR,FOLLOW_DOLLAR_in_p_SlidingWindowClause4166); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            DOLLAR150_tree = (XQDTCommonTree)adaptor.create(DOLLAR150);
            adaptor.addChild(root_0, DOLLAR150_tree);
            }
            pushFollow(FOLLOW_p_VarName_in_p_SlidingWindowClause4168);
            p_VarName151=p_VarName();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, p_VarName151.getTree());
            // XQueryParser.g:454:49: ( p_TypeDeclaration )?
            int alt64=2;
            int LA64_0 = input.LA(1);

            if ( (LA64_0==AS) ) {
                alt64=1;
            }
            switch (alt64) {
                case 1 :
                    // XQueryParser.g:454:49: p_TypeDeclaration
                    {
                    pushFollow(FOLLOW_p_TypeDeclaration_in_p_SlidingWindowClause4170);
                    p_TypeDeclaration152=p_TypeDeclaration();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, p_TypeDeclaration152.getTree());

                    }
                    break;

            }

            IN153=(CommonToken)match(input,IN,FOLLOW_IN_in_p_SlidingWindowClause4173); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            IN153_tree = (XQDTCommonTree)adaptor.create(IN153);
            adaptor.addChild(root_0, IN153_tree);
            }
            pushFollow(FOLLOW_p_ExprSingle_in_p_SlidingWindowClause4175);
            p_ExprSingle154=p_ExprSingle();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, p_ExprSingle154.getTree());
            pushFollow(FOLLOW_p_WindowStartCondition_in_p_SlidingWindowClause4177);
            p_WindowStartCondition155=p_WindowStartCondition();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, p_WindowStartCondition155.getTree());
            // XQueryParser.g:454:107: ( p_WindowEndCondition )?
            int alt65=2;
            int LA65_0 = input.LA(1);

            if ( (LA65_0==END||LA65_0==ONLY) ) {
                alt65=1;
            }
            switch (alt65) {
                case 1 :
                    // XQueryParser.g:454:107: p_WindowEndCondition
                    {
                    pushFollow(FOLLOW_p_WindowEndCondition_in_p_SlidingWindowClause4179);
                    p_WindowEndCondition156=p_WindowEndCondition();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, p_WindowEndCondition156.getTree());

                    }
                    break;

            }

            if ( state.backtracking==0 ) {
              ak(list_k);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (XQDTCommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (XQDTCommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "p_SlidingWindowClause"

    public static class p_WindowStartCondition_return extends ParserRuleReturnScope {
        XQDTCommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "p_WindowStartCondition"
    // XQueryParser.g:458:1: p_WindowStartCondition : k+= START p_WindowVars k+= WHEN p_ExprSingle ;
    public final XQueryParser.p_WindowStartCondition_return p_WindowStartCondition() throws RecognitionException {
        XQueryParser.p_WindowStartCondition_return retval = new XQueryParser.p_WindowStartCondition_return();
        retval.start = input.LT(1);

        XQDTCommonTree root_0 = null;

        CommonToken k=null;
        List list_k=null;
        XQueryParser.p_WindowVars_return p_WindowVars157 = null;

        XQueryParser.p_ExprSingle_return p_ExprSingle158 = null;


        XQDTCommonTree k_tree=null;

        try {
            // XQueryParser.g:459:9: (k+= START p_WindowVars k+= WHEN p_ExprSingle )
            // XQueryParser.g:459:11: k+= START p_WindowVars k+= WHEN p_ExprSingle
            {
            root_0 = (XQDTCommonTree)adaptor.nil();

            k=(CommonToken)match(input,START,FOLLOW_START_in_p_WindowStartCondition4210); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            k_tree = (XQDTCommonTree)adaptor.create(k);
            adaptor.addChild(root_0, k_tree);
            }
            if (list_k==null) list_k=new ArrayList();
            list_k.add(k);

            pushFollow(FOLLOW_p_WindowVars_in_p_WindowStartCondition4212);
            p_WindowVars157=p_WindowVars();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, p_WindowVars157.getTree());
            k=(CommonToken)match(input,WHEN,FOLLOW_WHEN_in_p_WindowStartCondition4216); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            k_tree = (XQDTCommonTree)adaptor.create(k);
            adaptor.addChild(root_0, k_tree);
            }
            if (list_k==null) list_k=new ArrayList();
            list_k.add(k);

            pushFollow(FOLLOW_p_ExprSingle_in_p_WindowStartCondition4218);
            p_ExprSingle158=p_ExprSingle();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, p_ExprSingle158.getTree());
            if ( state.backtracking==0 ) {
              ak(list_k);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (XQDTCommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (XQDTCommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "p_WindowStartCondition"

    public static class p_WindowEndCondition_return extends ParserRuleReturnScope {
        XQDTCommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "p_WindowEndCondition"
    // XQueryParser.g:463:1: p_WindowEndCondition : (k+= ONLY )? k+= END p_WindowVars k+= WHEN p_ExprSingle ;
    public final XQueryParser.p_WindowEndCondition_return p_WindowEndCondition() throws RecognitionException {
        XQueryParser.p_WindowEndCondition_return retval = new XQueryParser.p_WindowEndCondition_return();
        retval.start = input.LT(1);

        XQDTCommonTree root_0 = null;

        CommonToken k=null;
        List list_k=null;
        XQueryParser.p_WindowVars_return p_WindowVars159 = null;

        XQueryParser.p_ExprSingle_return p_ExprSingle160 = null;


        XQDTCommonTree k_tree=null;

        try {
            // XQueryParser.g:464:9: ( (k+= ONLY )? k+= END p_WindowVars k+= WHEN p_ExprSingle )
            // XQueryParser.g:464:11: (k+= ONLY )? k+= END p_WindowVars k+= WHEN p_ExprSingle
            {
            root_0 = (XQDTCommonTree)adaptor.nil();

            // XQueryParser.g:464:12: (k+= ONLY )?
            int alt66=2;
            int LA66_0 = input.LA(1);

            if ( (LA66_0==ONLY) ) {
                alt66=1;
            }
            switch (alt66) {
                case 1 :
                    // XQueryParser.g:464:12: k+= ONLY
                    {
                    k=(CommonToken)match(input,ONLY,FOLLOW_ONLY_in_p_WindowEndCondition4248); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    k_tree = (XQDTCommonTree)adaptor.create(k);
                    adaptor.addChild(root_0, k_tree);
                    }
                    if (list_k==null) list_k=new ArrayList();
                    list_k.add(k);


                    }
                    break;

            }

            k=(CommonToken)match(input,END,FOLLOW_END_in_p_WindowEndCondition4253); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            k_tree = (XQDTCommonTree)adaptor.create(k);
            adaptor.addChild(root_0, k_tree);
            }
            if (list_k==null) list_k=new ArrayList();
            list_k.add(k);

            pushFollow(FOLLOW_p_WindowVars_in_p_WindowEndCondition4255);
            p_WindowVars159=p_WindowVars();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, p_WindowVars159.getTree());
            k=(CommonToken)match(input,WHEN,FOLLOW_WHEN_in_p_WindowEndCondition4259); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            k_tree = (XQDTCommonTree)adaptor.create(k);
            adaptor.addChild(root_0, k_tree);
            }
            if (list_k==null) list_k=new ArrayList();
            list_k.add(k);

            pushFollow(FOLLOW_p_ExprSingle_in_p_WindowEndCondition4261);
            p_ExprSingle160=p_ExprSingle();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, p_ExprSingle160.getTree());
            if ( state.backtracking==0 ) {
              ak(list_k);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (XQDTCommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (XQDTCommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "p_WindowEndCondition"

    public static class p_WindowVars_return extends ParserRuleReturnScope {
        XQDTCommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "p_WindowVars"
    // XQueryParser.g:468:1: p_WindowVars : ( DOLLAR p_QName )? ( p_PositionalVar )? (k+= PREVIOUS DOLLAR p_QName )? (k+= NEXT DOLLAR p_QName )? ;
    public final XQueryParser.p_WindowVars_return p_WindowVars() throws RecognitionException {
        XQueryParser.p_WindowVars_return retval = new XQueryParser.p_WindowVars_return();
        retval.start = input.LT(1);

        XQDTCommonTree root_0 = null;

        CommonToken DOLLAR161=null;
        CommonToken DOLLAR164=null;
        CommonToken DOLLAR166=null;
        CommonToken k=null;
        List list_k=null;
        XQueryParser.p_QName_return p_QName162 = null;

        XQueryParser.p_PositionalVar_return p_PositionalVar163 = null;

        XQueryParser.p_QName_return p_QName165 = null;

        XQueryParser.p_QName_return p_QName167 = null;


        XQDTCommonTree DOLLAR161_tree=null;
        XQDTCommonTree DOLLAR164_tree=null;
        XQDTCommonTree DOLLAR166_tree=null;
        XQDTCommonTree k_tree=null;

        try {
            // XQueryParser.g:469:9: ( ( DOLLAR p_QName )? ( p_PositionalVar )? (k+= PREVIOUS DOLLAR p_QName )? (k+= NEXT DOLLAR p_QName )? )
            // XQueryParser.g:469:11: ( DOLLAR p_QName )? ( p_PositionalVar )? (k+= PREVIOUS DOLLAR p_QName )? (k+= NEXT DOLLAR p_QName )?
            {
            root_0 = (XQDTCommonTree)adaptor.nil();

            // XQueryParser.g:469:11: ( DOLLAR p_QName )?
            int alt67=2;
            int LA67_0 = input.LA(1);

            if ( (LA67_0==DOLLAR) ) {
                alt67=1;
            }
            switch (alt67) {
                case 1 :
                    // XQueryParser.g:469:12: DOLLAR p_QName
                    {
                    DOLLAR161=(CommonToken)match(input,DOLLAR,FOLLOW_DOLLAR_in_p_WindowVars4290); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    DOLLAR161_tree = (XQDTCommonTree)adaptor.create(DOLLAR161);
                    adaptor.addChild(root_0, DOLLAR161_tree);
                    }
                    pushFollow(FOLLOW_p_QName_in_p_WindowVars4292);
                    p_QName162=p_QName();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, p_QName162.getTree());

                    }
                    break;

            }

            // XQueryParser.g:469:29: ( p_PositionalVar )?
            int alt68=2;
            int LA68_0 = input.LA(1);

            if ( (LA68_0==AT) ) {
                alt68=1;
            }
            switch (alt68) {
                case 1 :
                    // XQueryParser.g:469:29: p_PositionalVar
                    {
                    pushFollow(FOLLOW_p_PositionalVar_in_p_WindowVars4296);
                    p_PositionalVar163=p_PositionalVar();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, p_PositionalVar163.getTree());

                    }
                    break;

            }

            // XQueryParser.g:469:46: (k+= PREVIOUS DOLLAR p_QName )?
            int alt69=2;
            int LA69_0 = input.LA(1);

            if ( (LA69_0==PREVIOUS) ) {
                alt69=1;
            }
            switch (alt69) {
                case 1 :
                    // XQueryParser.g:469:47: k+= PREVIOUS DOLLAR p_QName
                    {
                    k=(CommonToken)match(input,PREVIOUS,FOLLOW_PREVIOUS_in_p_WindowVars4302); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    k_tree = (XQDTCommonTree)adaptor.create(k);
                    adaptor.addChild(root_0, k_tree);
                    }
                    if (list_k==null) list_k=new ArrayList();
                    list_k.add(k);

                    DOLLAR164=(CommonToken)match(input,DOLLAR,FOLLOW_DOLLAR_in_p_WindowVars4304); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    DOLLAR164_tree = (XQDTCommonTree)adaptor.create(DOLLAR164);
                    adaptor.addChild(root_0, DOLLAR164_tree);
                    }
                    pushFollow(FOLLOW_p_QName_in_p_WindowVars4306);
                    p_QName165=p_QName();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, p_QName165.getTree());

                    }
                    break;

            }

            // XQueryParser.g:469:76: (k+= NEXT DOLLAR p_QName )?
            int alt70=2;
            int LA70_0 = input.LA(1);

            if ( (LA70_0==NEXT) ) {
                alt70=1;
            }
            switch (alt70) {
                case 1 :
                    // XQueryParser.g:469:77: k+= NEXT DOLLAR p_QName
                    {
                    k=(CommonToken)match(input,NEXT,FOLLOW_NEXT_in_p_WindowVars4313); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    k_tree = (XQDTCommonTree)adaptor.create(k);
                    adaptor.addChild(root_0, k_tree);
                    }
                    if (list_k==null) list_k=new ArrayList();
                    list_k.add(k);

                    DOLLAR166=(CommonToken)match(input,DOLLAR,FOLLOW_DOLLAR_in_p_WindowVars4315); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    DOLLAR166_tree = (XQDTCommonTree)adaptor.create(DOLLAR166);
                    adaptor.addChild(root_0, DOLLAR166_tree);
                    }
                    pushFollow(FOLLOW_p_QName_in_p_WindowVars4317);
                    p_QName167=p_QName();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, p_QName167.getTree());

                    }
                    break;

            }

            if ( state.backtracking==0 ) {
              ak(list_k);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (XQDTCommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (XQDTCommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "p_WindowVars"

    public static class p_CountClause_return extends ParserRuleReturnScope {
        XQDTCommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "p_CountClause"
    // XQueryParser.g:482:1: p_CountClause : kc+= COUNT DOLLAR p_VarName ;
    public final XQueryParser.p_CountClause_return p_CountClause() throws RecognitionException {
        XQueryParser.p_CountClause_return retval = new XQueryParser.p_CountClause_return();
        retval.start = input.LT(1);

        XQDTCommonTree root_0 = null;

        CommonToken DOLLAR168=null;
        CommonToken kc=null;
        List list_kc=null;
        XQueryParser.p_VarName_return p_VarName169 = null;


        XQDTCommonTree DOLLAR168_tree=null;
        XQDTCommonTree kc_tree=null;

        try {
            // XQueryParser.g:483:9: (kc+= COUNT DOLLAR p_VarName )
            // XQueryParser.g:483:11: kc+= COUNT DOLLAR p_VarName
            {
            root_0 = (XQDTCommonTree)adaptor.nil();

            kc=(CommonToken)match(input,COUNT,FOLLOW_COUNT_in_p_CountClause4358); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            kc_tree = (XQDTCommonTree)adaptor.create(kc);
            adaptor.addChild(root_0, kc_tree);
            }
            if (list_kc==null) list_kc=new ArrayList();
            list_kc.add(kc);

            if ( state.backtracking==0 ) {
              ak(list_kc);
            }
            DOLLAR168=(CommonToken)match(input,DOLLAR,FOLLOW_DOLLAR_in_p_CountClause4362); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            DOLLAR168_tree = (XQDTCommonTree)adaptor.create(DOLLAR168);
            adaptor.addChild(root_0, DOLLAR168_tree);
            }
            pushFollow(FOLLOW_p_VarName_in_p_CountClause4364);
            p_VarName169=p_VarName();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, p_VarName169.getTree());

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (XQDTCommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (XQDTCommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "p_CountClause"

    public static class p_WhereClause_return extends ParserRuleReturnScope {
        XQDTCommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "p_WhereClause"
    // XQueryParser.g:487:1: p_WhereClause : kw+= WHERE p_ExprSingle ;
    public final XQueryParser.p_WhereClause_return p_WhereClause() throws RecognitionException {
        XQueryParser.p_WhereClause_return retval = new XQueryParser.p_WhereClause_return();
        retval.start = input.LT(1);

        XQDTCommonTree root_0 = null;

        CommonToken kw=null;
        List list_kw=null;
        XQueryParser.p_ExprSingle_return p_ExprSingle170 = null;


        XQDTCommonTree kw_tree=null;

        try {
            // XQueryParser.g:488:9: (kw+= WHERE p_ExprSingle )
            // XQueryParser.g:488:11: kw+= WHERE p_ExprSingle
            {
            root_0 = (XQDTCommonTree)adaptor.nil();

            kw=(CommonToken)match(input,WHERE,FOLLOW_WHERE_in_p_WhereClause4400); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            kw_tree = (XQDTCommonTree)adaptor.create(kw);
            adaptor.addChild(root_0, kw_tree);
            }
            if (list_kw==null) list_kw=new ArrayList();
            list_kw.add(kw);

            if ( state.backtracking==0 ) {
              ak(list_kw);
            }
            pushFollow(FOLLOW_p_ExprSingle_in_p_WhereClause4404);
            p_ExprSingle170=p_ExprSingle();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, p_ExprSingle170.getTree());

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (XQDTCommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (XQDTCommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "p_WhereClause"

    public static class p_GroupByClause_return extends ParserRuleReturnScope {
        XQDTCommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "p_GroupByClause"
    // XQueryParser.g:492:1: p_GroupByClause : k+= GROUP k+= BY p_GroupingSpecList ;
    public final XQueryParser.p_GroupByClause_return p_GroupByClause() throws RecognitionException {
        XQueryParser.p_GroupByClause_return retval = new XQueryParser.p_GroupByClause_return();
        retval.start = input.LT(1);

        XQDTCommonTree root_0 = null;

        CommonToken k=null;
        List list_k=null;
        XQueryParser.p_GroupingSpecList_return p_GroupingSpecList171 = null;


        XQDTCommonTree k_tree=null;

        try {
            // XQueryParser.g:493:9: (k+= GROUP k+= BY p_GroupingSpecList )
            // XQueryParser.g:493:13: k+= GROUP k+= BY p_GroupingSpecList
            {
            root_0 = (XQDTCommonTree)adaptor.nil();

            k=(CommonToken)match(input,GROUP,FOLLOW_GROUP_in_p_GroupByClause4434); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            k_tree = (XQDTCommonTree)adaptor.create(k);
            adaptor.addChild(root_0, k_tree);
            }
            if (list_k==null) list_k=new ArrayList();
            list_k.add(k);

            k=(CommonToken)match(input,BY,FOLLOW_BY_in_p_GroupByClause4438); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            k_tree = (XQDTCommonTree)adaptor.create(k);
            adaptor.addChild(root_0, k_tree);
            }
            if (list_k==null) list_k=new ArrayList();
            list_k.add(k);

            pushFollow(FOLLOW_p_GroupingSpecList_in_p_GroupByClause4440);
            p_GroupingSpecList171=p_GroupingSpecList();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, p_GroupingSpecList171.getTree());
            if ( state.backtracking==0 ) {
              ak(list_k);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (XQDTCommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (XQDTCommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "p_GroupByClause"

    public static class p_GroupingSpecList_return extends ParserRuleReturnScope {
        XQDTCommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "p_GroupingSpecList"
    // XQueryParser.g:497:1: p_GroupingSpecList : p_GroupingSpec ( COMMA p_GroupingSpec )* ;
    public final XQueryParser.p_GroupingSpecList_return p_GroupingSpecList() throws RecognitionException {
        XQueryParser.p_GroupingSpecList_return retval = new XQueryParser.p_GroupingSpecList_return();
        retval.start = input.LT(1);

        XQDTCommonTree root_0 = null;

        CommonToken COMMA173=null;
        XQueryParser.p_GroupingSpec_return p_GroupingSpec172 = null;

        XQueryParser.p_GroupingSpec_return p_GroupingSpec174 = null;


        XQDTCommonTree COMMA173_tree=null;

        try {
            // XQueryParser.g:498:9: ( p_GroupingSpec ( COMMA p_GroupingSpec )* )
            // XQueryParser.g:498:13: p_GroupingSpec ( COMMA p_GroupingSpec )*
            {
            root_0 = (XQDTCommonTree)adaptor.nil();

            pushFollow(FOLLOW_p_GroupingSpec_in_p_GroupingSpecList4470);
            p_GroupingSpec172=p_GroupingSpec();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, p_GroupingSpec172.getTree());
            // XQueryParser.g:498:28: ( COMMA p_GroupingSpec )*
            loop71:
            do {
                int alt71=2;
                int LA71_0 = input.LA(1);

                if ( (LA71_0==COMMA) ) {
                    alt71=1;
                }


                switch (alt71) {
            	case 1 :
            	    // XQueryParser.g:498:29: COMMA p_GroupingSpec
            	    {
            	    COMMA173=(CommonToken)match(input,COMMA,FOLLOW_COMMA_in_p_GroupingSpecList4473); if (state.failed) return retval;
            	    if ( state.backtracking==0 ) {
            	    COMMA173_tree = (XQDTCommonTree)adaptor.create(COMMA173);
            	    adaptor.addChild(root_0, COMMA173_tree);
            	    }
            	    pushFollow(FOLLOW_p_GroupingSpec_in_p_GroupingSpecList4475);
            	    p_GroupingSpec174=p_GroupingSpec();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, p_GroupingSpec174.getTree());

            	    }
            	    break;

            	default :
            	    break loop71;
                }
            } while (true);


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (XQDTCommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (XQDTCommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "p_GroupingSpecList"

    public static class p_GroupingSpec_return extends ParserRuleReturnScope {
        XQDTCommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "p_GroupingSpec"
    // XQueryParser.g:502:1: p_GroupingSpec : DOLLAR p_VarName (kc= COLLATION p_StringLiteral )? ;
    public final XQueryParser.p_GroupingSpec_return p_GroupingSpec() throws RecognitionException {
        XQueryParser.p_GroupingSpec_return retval = new XQueryParser.p_GroupingSpec_return();
        retval.start = input.LT(1);

        XQDTCommonTree root_0 = null;

        CommonToken kc=null;
        CommonToken DOLLAR175=null;
        XQueryParser.p_VarName_return p_VarName176 = null;

        XQueryParser.p_StringLiteral_return p_StringLiteral177 = null;


        XQDTCommonTree kc_tree=null;
        XQDTCommonTree DOLLAR175_tree=null;

        try {
            // XQueryParser.g:503:9: ( DOLLAR p_VarName (kc= COLLATION p_StringLiteral )? )
            // XQueryParser.g:503:13: DOLLAR p_VarName (kc= COLLATION p_StringLiteral )?
            {
            root_0 = (XQDTCommonTree)adaptor.nil();

            DOLLAR175=(CommonToken)match(input,DOLLAR,FOLLOW_DOLLAR_in_p_GroupingSpec4505); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            DOLLAR175_tree = (XQDTCommonTree)adaptor.create(DOLLAR175);
            adaptor.addChild(root_0, DOLLAR175_tree);
            }
            pushFollow(FOLLOW_p_VarName_in_p_GroupingSpec4507);
            p_VarName176=p_VarName();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, p_VarName176.getTree());
            // XQueryParser.g:503:30: (kc= COLLATION p_StringLiteral )?
            int alt72=2;
            int LA72_0 = input.LA(1);

            if ( (LA72_0==COLLATION) ) {
                alt72=1;
            }
            switch (alt72) {
                case 1 :
                    // XQueryParser.g:503:31: kc= COLLATION p_StringLiteral
                    {
                    kc=(CommonToken)match(input,COLLATION,FOLLOW_COLLATION_in_p_GroupingSpec4512); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    kc_tree = (XQDTCommonTree)adaptor.create(kc);
                    adaptor.addChild(root_0, kc_tree);
                    }
                    pushFollow(FOLLOW_p_StringLiteral_in_p_GroupingSpec4514);
                    p_StringLiteral177=p_StringLiteral();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, p_StringLiteral177.getTree());
                    if ( state.backtracking==0 ) {
                      ak(kc);
                    }

                    }
                    break;

            }


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (XQDTCommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (XQDTCommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "p_GroupingSpec"

    public static class p_OrderByClause_return extends ParserRuleReturnScope {
        XQDTCommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "p_OrderByClause"
    // XQueryParser.g:507:1: p_OrderByClause : ( (k+= ORDER k+= BY ) | (k+= STABLE k+= ORDER k+= BY ) ) p_OrderSpecList ;
    public final XQueryParser.p_OrderByClause_return p_OrderByClause() throws RecognitionException {
        XQueryParser.p_OrderByClause_return retval = new XQueryParser.p_OrderByClause_return();
        retval.start = input.LT(1);

        XQDTCommonTree root_0 = null;

        CommonToken k=null;
        List list_k=null;
        XQueryParser.p_OrderSpecList_return p_OrderSpecList178 = null;


        XQDTCommonTree k_tree=null;

        try {
            // XQueryParser.g:508:9: ( ( (k+= ORDER k+= BY ) | (k+= STABLE k+= ORDER k+= BY ) ) p_OrderSpecList )
            // XQueryParser.g:508:13: ( (k+= ORDER k+= BY ) | (k+= STABLE k+= ORDER k+= BY ) ) p_OrderSpecList
            {
            root_0 = (XQDTCommonTree)adaptor.nil();

            // XQueryParser.g:508:13: ( (k+= ORDER k+= BY ) | (k+= STABLE k+= ORDER k+= BY ) )
            int alt73=2;
            int LA73_0 = input.LA(1);

            if ( (LA73_0==ORDER) ) {
                alt73=1;
            }
            else if ( (LA73_0==STABLE) ) {
                alt73=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 73, 0, input);

                throw nvae;
            }
            switch (alt73) {
                case 1 :
                    // XQueryParser.g:508:14: (k+= ORDER k+= BY )
                    {
                    // XQueryParser.g:508:14: (k+= ORDER k+= BY )
                    // XQueryParser.g:508:15: k+= ORDER k+= BY
                    {
                    k=(CommonToken)match(input,ORDER,FOLLOW_ORDER_in_p_OrderByClause4550); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    k_tree = (XQDTCommonTree)adaptor.create(k);
                    adaptor.addChild(root_0, k_tree);
                    }
                    if (list_k==null) list_k=new ArrayList();
                    list_k.add(k);

                    k=(CommonToken)match(input,BY,FOLLOW_BY_in_p_OrderByClause4554); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    k_tree = (XQDTCommonTree)adaptor.create(k);
                    adaptor.addChild(root_0, k_tree);
                    }
                    if (list_k==null) list_k=new ArrayList();
                    list_k.add(k);


                    }


                    }
                    break;
                case 2 :
                    // XQueryParser.g:508:33: (k+= STABLE k+= ORDER k+= BY )
                    {
                    // XQueryParser.g:508:33: (k+= STABLE k+= ORDER k+= BY )
                    // XQueryParser.g:508:34: k+= STABLE k+= ORDER k+= BY
                    {
                    k=(CommonToken)match(input,STABLE,FOLLOW_STABLE_in_p_OrderByClause4562); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    k_tree = (XQDTCommonTree)adaptor.create(k);
                    adaptor.addChild(root_0, k_tree);
                    }
                    if (list_k==null) list_k=new ArrayList();
                    list_k.add(k);

                    k=(CommonToken)match(input,ORDER,FOLLOW_ORDER_in_p_OrderByClause4566); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    k_tree = (XQDTCommonTree)adaptor.create(k);
                    adaptor.addChild(root_0, k_tree);
                    }
                    if (list_k==null) list_k=new ArrayList();
                    list_k.add(k);

                    k=(CommonToken)match(input,BY,FOLLOW_BY_in_p_OrderByClause4570); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    k_tree = (XQDTCommonTree)adaptor.create(k);
                    adaptor.addChild(root_0, k_tree);
                    }
                    if (list_k==null) list_k=new ArrayList();
                    list_k.add(k);


                    }


                    }
                    break;

            }

            pushFollow(FOLLOW_p_OrderSpecList_in_p_OrderByClause4574);
            p_OrderSpecList178=p_OrderSpecList();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, p_OrderSpecList178.getTree());
            if ( state.backtracking==0 ) {
              ak(list_k);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (XQDTCommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (XQDTCommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "p_OrderByClause"

    public static class p_OrderSpecList_return extends ParserRuleReturnScope {
        XQDTCommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "p_OrderSpecList"
    // XQueryParser.g:512:1: p_OrderSpecList : p_OrderSpec ( COMMA p_OrderSpec )* ;
    public final XQueryParser.p_OrderSpecList_return p_OrderSpecList() throws RecognitionException {
        XQueryParser.p_OrderSpecList_return retval = new XQueryParser.p_OrderSpecList_return();
        retval.start = input.LT(1);

        XQDTCommonTree root_0 = null;

        CommonToken COMMA180=null;
        XQueryParser.p_OrderSpec_return p_OrderSpec179 = null;

        XQueryParser.p_OrderSpec_return p_OrderSpec181 = null;


        XQDTCommonTree COMMA180_tree=null;

        try {
            // XQueryParser.g:513:9: ( p_OrderSpec ( COMMA p_OrderSpec )* )
            // XQueryParser.g:513:13: p_OrderSpec ( COMMA p_OrderSpec )*
            {
            root_0 = (XQDTCommonTree)adaptor.nil();

            pushFollow(FOLLOW_p_OrderSpec_in_p_OrderSpecList4604);
            p_OrderSpec179=p_OrderSpec();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, p_OrderSpec179.getTree());
            // XQueryParser.g:513:25: ( COMMA p_OrderSpec )*
            loop74:
            do {
                int alt74=2;
                int LA74_0 = input.LA(1);

                if ( (LA74_0==COMMA) ) {
                    alt74=1;
                }


                switch (alt74) {
            	case 1 :
            	    // XQueryParser.g:513:26: COMMA p_OrderSpec
            	    {
            	    COMMA180=(CommonToken)match(input,COMMA,FOLLOW_COMMA_in_p_OrderSpecList4607); if (state.failed) return retval;
            	    if ( state.backtracking==0 ) {
            	    COMMA180_tree = (XQDTCommonTree)adaptor.create(COMMA180);
            	    adaptor.addChild(root_0, COMMA180_tree);
            	    }
            	    pushFollow(FOLLOW_p_OrderSpec_in_p_OrderSpecList4609);
            	    p_OrderSpec181=p_OrderSpec();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, p_OrderSpec181.getTree());

            	    }
            	    break;

            	default :
            	    break loop74;
                }
            } while (true);


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (XQDTCommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (XQDTCommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "p_OrderSpecList"

    public static class p_OrderSpec_return extends ParserRuleReturnScope {
        XQDTCommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "p_OrderSpec"
    // XQueryParser.g:517:1: p_OrderSpec : p_ExprSingle p_OrderModifier ;
    public final XQueryParser.p_OrderSpec_return p_OrderSpec() throws RecognitionException {
        XQueryParser.p_OrderSpec_return retval = new XQueryParser.p_OrderSpec_return();
        retval.start = input.LT(1);

        XQDTCommonTree root_0 = null;

        XQueryParser.p_ExprSingle_return p_ExprSingle182 = null;

        XQueryParser.p_OrderModifier_return p_OrderModifier183 = null;



        try {
            // XQueryParser.g:518:9: ( p_ExprSingle p_OrderModifier )
            // XQueryParser.g:518:13: p_ExprSingle p_OrderModifier
            {
            root_0 = (XQDTCommonTree)adaptor.nil();

            pushFollow(FOLLOW_p_ExprSingle_in_p_OrderSpec4639);
            p_ExprSingle182=p_ExprSingle();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, p_ExprSingle182.getTree());
            pushFollow(FOLLOW_p_OrderModifier_in_p_OrderSpec4641);
            p_OrderModifier183=p_OrderModifier();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, p_OrderModifier183.getTree());

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (XQDTCommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (XQDTCommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "p_OrderSpec"

    public static class p_OrderModifier_return extends ParserRuleReturnScope {
        XQDTCommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "p_OrderModifier"
    // XQueryParser.g:522:1: p_OrderModifier : (ka= ASCENDING | k+= DESCENDING )? (k+= EMPTY (k+= GREATEST | k+= LEAST ) )? (k+= COLLATION p_StringLiteral )? ;
    public final XQueryParser.p_OrderModifier_return p_OrderModifier() throws RecognitionException {
        XQueryParser.p_OrderModifier_return retval = new XQueryParser.p_OrderModifier_return();
        retval.start = input.LT(1);

        XQDTCommonTree root_0 = null;

        CommonToken ka=null;
        CommonToken k=null;
        List list_k=null;
        XQueryParser.p_StringLiteral_return p_StringLiteral184 = null;


        XQDTCommonTree ka_tree=null;
        XQDTCommonTree k_tree=null;

        try {
            // XQueryParser.g:523:9: ( (ka= ASCENDING | k+= DESCENDING )? (k+= EMPTY (k+= GREATEST | k+= LEAST ) )? (k+= COLLATION p_StringLiteral )? )
            // XQueryParser.g:523:11: (ka= ASCENDING | k+= DESCENDING )? (k+= EMPTY (k+= GREATEST | k+= LEAST ) )? (k+= COLLATION p_StringLiteral )?
            {
            root_0 = (XQDTCommonTree)adaptor.nil();

            // XQueryParser.g:523:11: (ka= ASCENDING | k+= DESCENDING )?
            int alt75=3;
            int LA75_0 = input.LA(1);

            if ( (LA75_0==ASCENDING) ) {
                alt75=1;
            }
            else if ( (LA75_0==DESCENDING) ) {
                alt75=2;
            }
            switch (alt75) {
                case 1 :
                    // XQueryParser.g:523:12: ka= ASCENDING
                    {
                    ka=(CommonToken)match(input,ASCENDING,FOLLOW_ASCENDING_in_p_OrderModifier4670); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    ka_tree = (XQDTCommonTree)adaptor.create(ka);
                    adaptor.addChild(root_0, ka_tree);
                    }

                    }
                    break;
                case 2 :
                    // XQueryParser.g:523:27: k+= DESCENDING
                    {
                    k=(CommonToken)match(input,DESCENDING,FOLLOW_DESCENDING_in_p_OrderModifier4676); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    k_tree = (XQDTCommonTree)adaptor.create(k);
                    adaptor.addChild(root_0, k_tree);
                    }
                    if (list_k==null) list_k=new ArrayList();
                    list_k.add(k);


                    }
                    break;

            }

            // XQueryParser.g:523:43: (k+= EMPTY (k+= GREATEST | k+= LEAST ) )?
            int alt77=2;
            int LA77_0 = input.LA(1);

            if ( (LA77_0==EMPTY) ) {
                alt77=1;
            }
            switch (alt77) {
                case 1 :
                    // XQueryParser.g:523:44: k+= EMPTY (k+= GREATEST | k+= LEAST )
                    {
                    k=(CommonToken)match(input,EMPTY,FOLLOW_EMPTY_in_p_OrderModifier4683); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    k_tree = (XQDTCommonTree)adaptor.create(k);
                    adaptor.addChild(root_0, k_tree);
                    }
                    if (list_k==null) list_k=new ArrayList();
                    list_k.add(k);

                    // XQueryParser.g:523:53: (k+= GREATEST | k+= LEAST )
                    int alt76=2;
                    int LA76_0 = input.LA(1);

                    if ( (LA76_0==GREATEST) ) {
                        alt76=1;
                    }
                    else if ( (LA76_0==LEAST) ) {
                        alt76=2;
                    }
                    else {
                        if (state.backtracking>0) {state.failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("", 76, 0, input);

                        throw nvae;
                    }
                    switch (alt76) {
                        case 1 :
                            // XQueryParser.g:523:54: k+= GREATEST
                            {
                            k=(CommonToken)match(input,GREATEST,FOLLOW_GREATEST_in_p_OrderModifier4688); if (state.failed) return retval;
                            if ( state.backtracking==0 ) {
                            k_tree = (XQDTCommonTree)adaptor.create(k);
                            adaptor.addChild(root_0, k_tree);
                            }
                            if (list_k==null) list_k=new ArrayList();
                            list_k.add(k);


                            }
                            break;
                        case 2 :
                            // XQueryParser.g:523:68: k+= LEAST
                            {
                            k=(CommonToken)match(input,LEAST,FOLLOW_LEAST_in_p_OrderModifier4694); if (state.failed) return retval;
                            if ( state.backtracking==0 ) {
                            k_tree = (XQDTCommonTree)adaptor.create(k);
                            adaptor.addChild(root_0, k_tree);
                            }
                            if (list_k==null) list_k=new ArrayList();
                            list_k.add(k);


                            }
                            break;

                    }


                    }
                    break;

            }

            // XQueryParser.g:523:80: (k+= COLLATION p_StringLiteral )?
            int alt78=2;
            int LA78_0 = input.LA(1);

            if ( (LA78_0==COLLATION) ) {
                alt78=1;
            }
            switch (alt78) {
                case 1 :
                    // XQueryParser.g:523:81: k+= COLLATION p_StringLiteral
                    {
                    k=(CommonToken)match(input,COLLATION,FOLLOW_COLLATION_in_p_OrderModifier4702); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    k_tree = (XQDTCommonTree)adaptor.create(k);
                    adaptor.addChild(root_0, k_tree);
                    }
                    if (list_k==null) list_k=new ArrayList();
                    list_k.add(k);

                    pushFollow(FOLLOW_p_StringLiteral_in_p_OrderModifier4704);
                    p_StringLiteral184=p_StringLiteral();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, p_StringLiteral184.getTree());

                    }
                    break;

            }

            if ( state.backtracking==0 ) {
              ak(list_k);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (XQDTCommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (XQDTCommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "p_OrderModifier"

    public static class p_ReturnClause_return extends ParserRuleReturnScope {
        XQDTCommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "p_ReturnClause"
    // XQueryParser.g:527:1: p_ReturnClause : kr= RETURN p_ExprSingle ;
    public final XQueryParser.p_ReturnClause_return p_ReturnClause() throws RecognitionException {
        XQueryParser.p_ReturnClause_return retval = new XQueryParser.p_ReturnClause_return();
        retval.start = input.LT(1);

        XQDTCommonTree root_0 = null;

        CommonToken kr=null;
        XQueryParser.p_ExprSingle_return p_ExprSingle185 = null;


        XQDTCommonTree kr_tree=null;

        try {
            // XQueryParser.g:528:9: (kr= RETURN p_ExprSingle )
            // XQueryParser.g:528:11: kr= RETURN p_ExprSingle
            {
            root_0 = (XQDTCommonTree)adaptor.nil();

            kr=(CommonToken)match(input,RETURN,FOLLOW_RETURN_in_p_ReturnClause4736); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            kr_tree = (XQDTCommonTree)adaptor.create(kr);
            adaptor.addChild(root_0, kr_tree);
            }
            if ( state.backtracking==0 ) {
              ak(kr);
            }
            pushFollow(FOLLOW_p_ExprSingle_in_p_ReturnClause4740);
            p_ExprSingle185=p_ExprSingle();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, p_ExprSingle185.getTree());

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (XQDTCommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (XQDTCommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "p_ReturnClause"

    public static class p_QuantifiedExpr_return extends ParserRuleReturnScope {
        XQDTCommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "p_QuantifiedExpr"
    // XQueryParser.g:532:1: p_QuantifiedExpr : (k+= SOME | k+= EVERY ) DOLLAR p_VarName ( p_TypeDeclaration )? k+= IN p_ExprSingle ( COMMA DOLLAR p_QName ( p_TypeDeclaration )? k+= IN p_ExprSingle )* k+= SATISFIES p_ExprSingle ;
    public final XQueryParser.p_QuantifiedExpr_return p_QuantifiedExpr() throws RecognitionException {
        XQueryParser.p_QuantifiedExpr_return retval = new XQueryParser.p_QuantifiedExpr_return();
        retval.start = input.LT(1);

        XQDTCommonTree root_0 = null;

        CommonToken DOLLAR186=null;
        CommonToken COMMA190=null;
        CommonToken DOLLAR191=null;
        CommonToken k=null;
        List list_k=null;
        XQueryParser.p_VarName_return p_VarName187 = null;

        XQueryParser.p_TypeDeclaration_return p_TypeDeclaration188 = null;

        XQueryParser.p_ExprSingle_return p_ExprSingle189 = null;

        XQueryParser.p_QName_return p_QName192 = null;

        XQueryParser.p_TypeDeclaration_return p_TypeDeclaration193 = null;

        XQueryParser.p_ExprSingle_return p_ExprSingle194 = null;

        XQueryParser.p_ExprSingle_return p_ExprSingle195 = null;


        XQDTCommonTree DOLLAR186_tree=null;
        XQDTCommonTree COMMA190_tree=null;
        XQDTCommonTree DOLLAR191_tree=null;
        XQDTCommonTree k_tree=null;

        try {
            // XQueryParser.g:533:9: ( (k+= SOME | k+= EVERY ) DOLLAR p_VarName ( p_TypeDeclaration )? k+= IN p_ExprSingle ( COMMA DOLLAR p_QName ( p_TypeDeclaration )? k+= IN p_ExprSingle )* k+= SATISFIES p_ExprSingle )
            // XQueryParser.g:533:13: (k+= SOME | k+= EVERY ) DOLLAR p_VarName ( p_TypeDeclaration )? k+= IN p_ExprSingle ( COMMA DOLLAR p_QName ( p_TypeDeclaration )? k+= IN p_ExprSingle )* k+= SATISFIES p_ExprSingle
            {
            root_0 = (XQDTCommonTree)adaptor.nil();

            // XQueryParser.g:533:13: (k+= SOME | k+= EVERY )
            int alt79=2;
            int LA79_0 = input.LA(1);

            if ( (LA79_0==SOME) ) {
                alt79=1;
            }
            else if ( (LA79_0==EVERY) ) {
                alt79=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 79, 0, input);

                throw nvae;
            }
            switch (alt79) {
                case 1 :
                    // XQueryParser.g:533:14: k+= SOME
                    {
                    k=(CommonToken)match(input,SOME,FOLLOW_SOME_in_p_QuantifiedExpr4771); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    k_tree = (XQDTCommonTree)adaptor.create(k);
                    adaptor.addChild(root_0, k_tree);
                    }
                    if (list_k==null) list_k=new ArrayList();
                    list_k.add(k);


                    }
                    break;
                case 2 :
                    // XQueryParser.g:533:24: k+= EVERY
                    {
                    k=(CommonToken)match(input,EVERY,FOLLOW_EVERY_in_p_QuantifiedExpr4777); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    k_tree = (XQDTCommonTree)adaptor.create(k);
                    adaptor.addChild(root_0, k_tree);
                    }
                    if (list_k==null) list_k=new ArrayList();
                    list_k.add(k);


                    }
                    break;

            }

            DOLLAR186=(CommonToken)match(input,DOLLAR,FOLLOW_DOLLAR_in_p_QuantifiedExpr4780); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            DOLLAR186_tree = (XQDTCommonTree)adaptor.create(DOLLAR186);
            adaptor.addChild(root_0, DOLLAR186_tree);
            }
            pushFollow(FOLLOW_p_VarName_in_p_QuantifiedExpr4782);
            p_VarName187=p_VarName();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, p_VarName187.getTree());
            // XQueryParser.g:533:51: ( p_TypeDeclaration )?
            int alt80=2;
            int LA80_0 = input.LA(1);

            if ( (LA80_0==AS) ) {
                alt80=1;
            }
            switch (alt80) {
                case 1 :
                    // XQueryParser.g:533:51: p_TypeDeclaration
                    {
                    pushFollow(FOLLOW_p_TypeDeclaration_in_p_QuantifiedExpr4784);
                    p_TypeDeclaration188=p_TypeDeclaration();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, p_TypeDeclaration188.getTree());

                    }
                    break;

            }

            k=(CommonToken)match(input,IN,FOLLOW_IN_in_p_QuantifiedExpr4789); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            k_tree = (XQDTCommonTree)adaptor.create(k);
            adaptor.addChild(root_0, k_tree);
            }
            if (list_k==null) list_k=new ArrayList();
            list_k.add(k);

            pushFollow(FOLLOW_p_ExprSingle_in_p_QuantifiedExpr4791);
            p_ExprSingle189=p_ExprSingle();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, p_ExprSingle189.getTree());
            // XQueryParser.g:533:89: ( COMMA DOLLAR p_QName ( p_TypeDeclaration )? k+= IN p_ExprSingle )*
            loop82:
            do {
                int alt82=2;
                int LA82_0 = input.LA(1);

                if ( (LA82_0==COMMA) ) {
                    alt82=1;
                }


                switch (alt82) {
            	case 1 :
            	    // XQueryParser.g:533:90: COMMA DOLLAR p_QName ( p_TypeDeclaration )? k+= IN p_ExprSingle
            	    {
            	    COMMA190=(CommonToken)match(input,COMMA,FOLLOW_COMMA_in_p_QuantifiedExpr4794); if (state.failed) return retval;
            	    if ( state.backtracking==0 ) {
            	    COMMA190_tree = (XQDTCommonTree)adaptor.create(COMMA190);
            	    adaptor.addChild(root_0, COMMA190_tree);
            	    }
            	    DOLLAR191=(CommonToken)match(input,DOLLAR,FOLLOW_DOLLAR_in_p_QuantifiedExpr4796); if (state.failed) return retval;
            	    if ( state.backtracking==0 ) {
            	    DOLLAR191_tree = (XQDTCommonTree)adaptor.create(DOLLAR191);
            	    adaptor.addChild(root_0, DOLLAR191_tree);
            	    }
            	    pushFollow(FOLLOW_p_QName_in_p_QuantifiedExpr4798);
            	    p_QName192=p_QName();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, p_QName192.getTree());
            	    // XQueryParser.g:533:111: ( p_TypeDeclaration )?
            	    int alt81=2;
            	    int LA81_0 = input.LA(1);

            	    if ( (LA81_0==AS) ) {
            	        alt81=1;
            	    }
            	    switch (alt81) {
            	        case 1 :
            	            // XQueryParser.g:533:111: p_TypeDeclaration
            	            {
            	            pushFollow(FOLLOW_p_TypeDeclaration_in_p_QuantifiedExpr4800);
            	            p_TypeDeclaration193=p_TypeDeclaration();

            	            state._fsp--;
            	            if (state.failed) return retval;
            	            if ( state.backtracking==0 ) adaptor.addChild(root_0, p_TypeDeclaration193.getTree());

            	            }
            	            break;

            	    }

            	    k=(CommonToken)match(input,IN,FOLLOW_IN_in_p_QuantifiedExpr4805); if (state.failed) return retval;
            	    if ( state.backtracking==0 ) {
            	    k_tree = (XQDTCommonTree)adaptor.create(k);
            	    adaptor.addChild(root_0, k_tree);
            	    }
            	    if (list_k==null) list_k=new ArrayList();
            	    list_k.add(k);

            	    pushFollow(FOLLOW_p_ExprSingle_in_p_QuantifiedExpr4807);
            	    p_ExprSingle194=p_ExprSingle();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, p_ExprSingle194.getTree());

            	    }
            	    break;

            	default :
            	    break loop82;
                }
            } while (true);

            k=(CommonToken)match(input,SATISFIES,FOLLOW_SATISFIES_in_p_QuantifiedExpr4813); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            k_tree = (XQDTCommonTree)adaptor.create(k);
            adaptor.addChild(root_0, k_tree);
            }
            if (list_k==null) list_k=new ArrayList();
            list_k.add(k);

            pushFollow(FOLLOW_p_ExprSingle_in_p_QuantifiedExpr4815);
            p_ExprSingle195=p_ExprSingle();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, p_ExprSingle195.getTree());
            if ( state.backtracking==0 ) {
              ak(list_k);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (XQDTCommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (XQDTCommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "p_QuantifiedExpr"

    public static class p_TypeswitchExpr_return extends ParserRuleReturnScope {
        XQDTCommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "p_TypeswitchExpr"
    // XQueryParser.g:537:1: p_TypeswitchExpr : k+= TYPESWITCH LPAREN pm_Expr RPAREN ( p_CaseClause )+ k+= DEFAULT ( DOLLAR p_VarName )? k+= RETURN p_ExprSingle ;
    public final XQueryParser.p_TypeswitchExpr_return p_TypeswitchExpr() throws RecognitionException {
        XQueryParser.p_TypeswitchExpr_return retval = new XQueryParser.p_TypeswitchExpr_return();
        retval.start = input.LT(1);

        XQDTCommonTree root_0 = null;

        CommonToken LPAREN196=null;
        CommonToken RPAREN198=null;
        CommonToken DOLLAR200=null;
        CommonToken k=null;
        List list_k=null;
        XQueryParser.pm_Expr_return pm_Expr197 = null;

        XQueryParser.p_CaseClause_return p_CaseClause199 = null;

        XQueryParser.p_VarName_return p_VarName201 = null;

        XQueryParser.p_ExprSingle_return p_ExprSingle202 = null;


        XQDTCommonTree LPAREN196_tree=null;
        XQDTCommonTree RPAREN198_tree=null;
        XQDTCommonTree DOLLAR200_tree=null;
        XQDTCommonTree k_tree=null;

        try {
            // XQueryParser.g:538:9: (k+= TYPESWITCH LPAREN pm_Expr RPAREN ( p_CaseClause )+ k+= DEFAULT ( DOLLAR p_VarName )? k+= RETURN p_ExprSingle )
            // XQueryParser.g:538:11: k+= TYPESWITCH LPAREN pm_Expr RPAREN ( p_CaseClause )+ k+= DEFAULT ( DOLLAR p_VarName )? k+= RETURN p_ExprSingle
            {
            root_0 = (XQDTCommonTree)adaptor.nil();

            k=(CommonToken)match(input,TYPESWITCH,FOLLOW_TYPESWITCH_in_p_TypeswitchExpr4845); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            k_tree = (XQDTCommonTree)adaptor.create(k);
            adaptor.addChild(root_0, k_tree);
            }
            if (list_k==null) list_k=new ArrayList();
            list_k.add(k);

            LPAREN196=(CommonToken)match(input,LPAREN,FOLLOW_LPAREN_in_p_TypeswitchExpr4847); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            LPAREN196_tree = (XQDTCommonTree)adaptor.create(LPAREN196);
            adaptor.addChild(root_0, LPAREN196_tree);
            }
            pushFollow(FOLLOW_pm_Expr_in_p_TypeswitchExpr4849);
            pm_Expr197=pm_Expr();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, pm_Expr197.getTree());
            RPAREN198=(CommonToken)match(input,RPAREN,FOLLOW_RPAREN_in_p_TypeswitchExpr4851); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            RPAREN198_tree = (XQDTCommonTree)adaptor.create(RPAREN198);
            adaptor.addChild(root_0, RPAREN198_tree);
            }
            // XQueryParser.g:538:47: ( p_CaseClause )+
            int cnt83=0;
            loop83:
            do {
                int alt83=2;
                int LA83_0 = input.LA(1);

                if ( (LA83_0==CASE) ) {
                    alt83=1;
                }


                switch (alt83) {
            	case 1 :
            	    // XQueryParser.g:538:47: p_CaseClause
            	    {
            	    pushFollow(FOLLOW_p_CaseClause_in_p_TypeswitchExpr4853);
            	    p_CaseClause199=p_CaseClause();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, p_CaseClause199.getTree());

            	    }
            	    break;

            	default :
            	    if ( cnt83 >= 1 ) break loop83;
            	    if (state.backtracking>0) {state.failed=true; return retval;}
                        EarlyExitException eee =
                            new EarlyExitException(83, input);
                        throw eee;
                }
                cnt83++;
            } while (true);

            k=(CommonToken)match(input,DEFAULT,FOLLOW_DEFAULT_in_p_TypeswitchExpr4858); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            k_tree = (XQDTCommonTree)adaptor.create(k);
            adaptor.addChild(root_0, k_tree);
            }
            if (list_k==null) list_k=new ArrayList();
            list_k.add(k);

            // XQueryParser.g:538:72: ( DOLLAR p_VarName )?
            int alt84=2;
            int LA84_0 = input.LA(1);

            if ( (LA84_0==DOLLAR) ) {
                alt84=1;
            }
            switch (alt84) {
                case 1 :
                    // XQueryParser.g:538:73: DOLLAR p_VarName
                    {
                    DOLLAR200=(CommonToken)match(input,DOLLAR,FOLLOW_DOLLAR_in_p_TypeswitchExpr4861); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    DOLLAR200_tree = (XQDTCommonTree)adaptor.create(DOLLAR200);
                    adaptor.addChild(root_0, DOLLAR200_tree);
                    }
                    pushFollow(FOLLOW_p_VarName_in_p_TypeswitchExpr4863);
                    p_VarName201=p_VarName();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, p_VarName201.getTree());

                    }
                    break;

            }

            k=(CommonToken)match(input,RETURN,FOLLOW_RETURN_in_p_TypeswitchExpr4869); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            k_tree = (XQDTCommonTree)adaptor.create(k);
            adaptor.addChild(root_0, k_tree);
            }
            if (list_k==null) list_k=new ArrayList();
            list_k.add(k);

            pushFollow(FOLLOW_p_ExprSingle_in_p_TypeswitchExpr4871);
            p_ExprSingle202=p_ExprSingle();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, p_ExprSingle202.getTree());
            if ( state.backtracking==0 ) {
              ak(list_k);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (XQDTCommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (XQDTCommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "p_TypeswitchExpr"

    public static class p_CaseClause_return extends ParserRuleReturnScope {
        XQDTCommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "p_CaseClause"
    // XQueryParser.g:542:1: p_CaseClause : k+= CASE ( DOLLAR p_VarName k+= AS )? p_SequenceType k+= RETURN p_ExprSingle ;
    public final XQueryParser.p_CaseClause_return p_CaseClause() throws RecognitionException {
        XQueryParser.p_CaseClause_return retval = new XQueryParser.p_CaseClause_return();
        retval.start = input.LT(1);

        XQDTCommonTree root_0 = null;

        CommonToken DOLLAR203=null;
        CommonToken k=null;
        List list_k=null;
        XQueryParser.p_VarName_return p_VarName204 = null;

        XQueryParser.p_SequenceType_return p_SequenceType205 = null;

        XQueryParser.p_ExprSingle_return p_ExprSingle206 = null;


        XQDTCommonTree DOLLAR203_tree=null;
        XQDTCommonTree k_tree=null;

        try {
            // XQueryParser.g:543:9: (k+= CASE ( DOLLAR p_VarName k+= AS )? p_SequenceType k+= RETURN p_ExprSingle )
            // XQueryParser.g:543:11: k+= CASE ( DOLLAR p_VarName k+= AS )? p_SequenceType k+= RETURN p_ExprSingle
            {
            root_0 = (XQDTCommonTree)adaptor.nil();

            k=(CommonToken)match(input,CASE,FOLLOW_CASE_in_p_CaseClause4901); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            k_tree = (XQDTCommonTree)adaptor.create(k);
            adaptor.addChild(root_0, k_tree);
            }
            if (list_k==null) list_k=new ArrayList();
            list_k.add(k);

            // XQueryParser.g:543:19: ( DOLLAR p_VarName k+= AS )?
            int alt85=2;
            int LA85_0 = input.LA(1);

            if ( (LA85_0==DOLLAR) ) {
                alt85=1;
            }
            switch (alt85) {
                case 1 :
                    // XQueryParser.g:543:20: DOLLAR p_VarName k+= AS
                    {
                    DOLLAR203=(CommonToken)match(input,DOLLAR,FOLLOW_DOLLAR_in_p_CaseClause4904); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    DOLLAR203_tree = (XQDTCommonTree)adaptor.create(DOLLAR203);
                    adaptor.addChild(root_0, DOLLAR203_tree);
                    }
                    pushFollow(FOLLOW_p_VarName_in_p_CaseClause4906);
                    p_VarName204=p_VarName();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, p_VarName204.getTree());
                    k=(CommonToken)match(input,AS,FOLLOW_AS_in_p_CaseClause4910); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    k_tree = (XQDTCommonTree)adaptor.create(k);
                    adaptor.addChild(root_0, k_tree);
                    }
                    if (list_k==null) list_k=new ArrayList();
                    list_k.add(k);


                    }
                    break;

            }

            pushFollow(FOLLOW_p_SequenceType_in_p_CaseClause4914);
            p_SequenceType205=p_SequenceType();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, p_SequenceType205.getTree());
            k=(CommonToken)match(input,RETURN,FOLLOW_RETURN_in_p_CaseClause4918); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            k_tree = (XQDTCommonTree)adaptor.create(k);
            adaptor.addChild(root_0, k_tree);
            }
            if (list_k==null) list_k=new ArrayList();
            list_k.add(k);

            pushFollow(FOLLOW_p_ExprSingle_in_p_CaseClause4920);
            p_ExprSingle206=p_ExprSingle();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, p_ExprSingle206.getTree());
            if ( state.backtracking==0 ) {
              ak(list_k);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (XQDTCommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (XQDTCommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "p_CaseClause"

    public static class p_IfExpr_return extends ParserRuleReturnScope {
        XQDTCommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "p_IfExpr"
    // XQueryParser.g:547:1: p_IfExpr : k+= IF LPAREN pm_Expr RPAREN k+= THEN p_ExprSingle k+= ELSE p_ExprSingle ;
    public final XQueryParser.p_IfExpr_return p_IfExpr() throws RecognitionException {
        XQueryParser.p_IfExpr_return retval = new XQueryParser.p_IfExpr_return();
        retval.start = input.LT(1);

        XQDTCommonTree root_0 = null;

        CommonToken LPAREN207=null;
        CommonToken RPAREN209=null;
        CommonToken k=null;
        List list_k=null;
        XQueryParser.pm_Expr_return pm_Expr208 = null;

        XQueryParser.p_ExprSingle_return p_ExprSingle210 = null;

        XQueryParser.p_ExprSingle_return p_ExprSingle211 = null;


        XQDTCommonTree LPAREN207_tree=null;
        XQDTCommonTree RPAREN209_tree=null;
        XQDTCommonTree k_tree=null;

        try {
            // XQueryParser.g:548:9: (k+= IF LPAREN pm_Expr RPAREN k+= THEN p_ExprSingle k+= ELSE p_ExprSingle )
            // XQueryParser.g:548:11: k+= IF LPAREN pm_Expr RPAREN k+= THEN p_ExprSingle k+= ELSE p_ExprSingle
            {
            root_0 = (XQDTCommonTree)adaptor.nil();

            k=(CommonToken)match(input,IF,FOLLOW_IF_in_p_IfExpr4950); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            k_tree = (XQDTCommonTree)adaptor.create(k);
            adaptor.addChild(root_0, k_tree);
            }
            if (list_k==null) list_k=new ArrayList();
            list_k.add(k);

            LPAREN207=(CommonToken)match(input,LPAREN,FOLLOW_LPAREN_in_p_IfExpr4952); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            LPAREN207_tree = (XQDTCommonTree)adaptor.create(LPAREN207);
            adaptor.addChild(root_0, LPAREN207_tree);
            }
            pushFollow(FOLLOW_pm_Expr_in_p_IfExpr4954);
            pm_Expr208=pm_Expr();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, pm_Expr208.getTree());
            RPAREN209=(CommonToken)match(input,RPAREN,FOLLOW_RPAREN_in_p_IfExpr4956); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            RPAREN209_tree = (XQDTCommonTree)adaptor.create(RPAREN209);
            adaptor.addChild(root_0, RPAREN209_tree);
            }
            k=(CommonToken)match(input,THEN,FOLLOW_THEN_in_p_IfExpr4960); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            k_tree = (XQDTCommonTree)adaptor.create(k);
            adaptor.addChild(root_0, k_tree);
            }
            if (list_k==null) list_k=new ArrayList();
            list_k.add(k);

            pushFollow(FOLLOW_p_ExprSingle_in_p_IfExpr4962);
            p_ExprSingle210=p_ExprSingle();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, p_ExprSingle210.getTree());
            k=(CommonToken)match(input,ELSE,FOLLOW_ELSE_in_p_IfExpr4966); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            k_tree = (XQDTCommonTree)adaptor.create(k);
            adaptor.addChild(root_0, k_tree);
            }
            if (list_k==null) list_k=new ArrayList();
            list_k.add(k);

            pushFollow(FOLLOW_p_ExprSingle_in_p_IfExpr4968);
            p_ExprSingle211=p_ExprSingle();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, p_ExprSingle211.getTree());
            if ( state.backtracking==0 ) {
              ak(list_k);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (XQDTCommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (XQDTCommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "p_IfExpr"

    public static class p_OrExpr_return extends ParserRuleReturnScope {
        XQDTCommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "p_OrExpr"
    // XQueryParser.g:552:1: p_OrExpr : p_AndExpr (k= OR p_AndExpr )* ;
    public final XQueryParser.p_OrExpr_return p_OrExpr() throws RecognitionException {
        XQueryParser.p_OrExpr_return retval = new XQueryParser.p_OrExpr_return();
        retval.start = input.LT(1);

        XQDTCommonTree root_0 = null;

        CommonToken k=null;
        XQueryParser.p_AndExpr_return p_AndExpr212 = null;

        XQueryParser.p_AndExpr_return p_AndExpr213 = null;


        XQDTCommonTree k_tree=null;

        try {
            // XQueryParser.g:553:9: ( p_AndExpr (k= OR p_AndExpr )* )
            // XQueryParser.g:553:11: p_AndExpr (k= OR p_AndExpr )*
            {
            root_0 = (XQDTCommonTree)adaptor.nil();

            pushFollow(FOLLOW_p_AndExpr_in_p_OrExpr4996);
            p_AndExpr212=p_AndExpr();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, p_AndExpr212.getTree());
            // XQueryParser.g:553:21: (k= OR p_AndExpr )*
            loop86:
            do {
                int alt86=2;
                int LA86_0 = input.LA(1);

                if ( (LA86_0==OR) ) {
                    alt86=1;
                }


                switch (alt86) {
            	case 1 :
            	    // XQueryParser.g:553:23: k= OR p_AndExpr
            	    {
            	    k=(CommonToken)match(input,OR,FOLLOW_OR_in_p_OrExpr5002); if (state.failed) return retval;
            	    if ( state.backtracking==0 ) {
            	    k_tree = (XQDTCommonTree)adaptor.create(k);
            	    adaptor.addChild(root_0, k_tree);
            	    }
            	    if ( state.backtracking==0 ) {
            	      ak(k);
            	    }
            	    pushFollow(FOLLOW_p_AndExpr_in_p_OrExpr5006);
            	    p_AndExpr213=p_AndExpr();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, p_AndExpr213.getTree());

            	    }
            	    break;

            	default :
            	    break loop86;
                }
            } while (true);


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (XQDTCommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (XQDTCommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "p_OrExpr"

    public static class p_AndExpr_return extends ParserRuleReturnScope {
        XQDTCommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "p_AndExpr"
    // XQueryParser.g:557:1: p_AndExpr : p_ComparisonExpr (k= AND p_ComparisonExpr )* ;
    public final XQueryParser.p_AndExpr_return p_AndExpr() throws RecognitionException {
        XQueryParser.p_AndExpr_return retval = new XQueryParser.p_AndExpr_return();
        retval.start = input.LT(1);

        XQDTCommonTree root_0 = null;

        CommonToken k=null;
        XQueryParser.p_ComparisonExpr_return p_ComparisonExpr214 = null;

        XQueryParser.p_ComparisonExpr_return p_ComparisonExpr215 = null;


        XQDTCommonTree k_tree=null;

        try {
            // XQueryParser.g:558:9: ( p_ComparisonExpr (k= AND p_ComparisonExpr )* )
            // XQueryParser.g:558:13: p_ComparisonExpr (k= AND p_ComparisonExpr )*
            {
            root_0 = (XQDTCommonTree)adaptor.nil();

            pushFollow(FOLLOW_p_ComparisonExpr_in_p_AndExpr5037);
            p_ComparisonExpr214=p_ComparisonExpr();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, p_ComparisonExpr214.getTree());
            // XQueryParser.g:558:30: (k= AND p_ComparisonExpr )*
            loop87:
            do {
                int alt87=2;
                int LA87_0 = input.LA(1);

                if ( (LA87_0==AND) ) {
                    alt87=1;
                }


                switch (alt87) {
            	case 1 :
            	    // XQueryParser.g:558:32: k= AND p_ComparisonExpr
            	    {
            	    k=(CommonToken)match(input,AND,FOLLOW_AND_in_p_AndExpr5043); if (state.failed) return retval;
            	    if ( state.backtracking==0 ) {
            	    k_tree = (XQDTCommonTree)adaptor.create(k);
            	    adaptor.addChild(root_0, k_tree);
            	    }
            	    if ( state.backtracking==0 ) {
            	      ak(k);
            	    }
            	    pushFollow(FOLLOW_p_ComparisonExpr_in_p_AndExpr5047);
            	    p_ComparisonExpr215=p_ComparisonExpr();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, p_ComparisonExpr215.getTree());

            	    }
            	    break;

            	default :
            	    break loop87;
                }
            } while (true);


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (XQDTCommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (XQDTCommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "p_AndExpr"

    public static class p_ComparisonExpr_return extends ParserRuleReturnScope {
        XQDTCommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "p_ComparisonExpr"
    // XQueryParser.g:562:1: p_ComparisonExpr : p_RangeExpr ( ( p_ValueComp | p_GeneralComp | p_NodeComp ) p_RangeExpr )? ;
    public final XQueryParser.p_ComparisonExpr_return p_ComparisonExpr() throws RecognitionException {
        XQueryParser.p_ComparisonExpr_return retval = new XQueryParser.p_ComparisonExpr_return();
        retval.start = input.LT(1);

        XQDTCommonTree root_0 = null;

        XQueryParser.p_RangeExpr_return p_RangeExpr216 = null;

        XQueryParser.p_ValueComp_return p_ValueComp217 = null;

        XQueryParser.p_GeneralComp_return p_GeneralComp218 = null;

        XQueryParser.p_NodeComp_return p_NodeComp219 = null;

        XQueryParser.p_RangeExpr_return p_RangeExpr220 = null;



        try {
            // XQueryParser.g:563:9: ( p_RangeExpr ( ( p_ValueComp | p_GeneralComp | p_NodeComp ) p_RangeExpr )? )
            // XQueryParser.g:563:13: p_RangeExpr ( ( p_ValueComp | p_GeneralComp | p_NodeComp ) p_RangeExpr )?
            {
            root_0 = (XQDTCommonTree)adaptor.nil();

            pushFollow(FOLLOW_p_RangeExpr_in_p_ComparisonExpr5078);
            p_RangeExpr216=p_RangeExpr();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, p_RangeExpr216.getTree());
            // XQueryParser.g:563:25: ( ( p_ValueComp | p_GeneralComp | p_NodeComp ) p_RangeExpr )?
            int alt89=2;
            int LA89_0 = input.LA(1);

            if ( (LA89_0==EQ||LA89_0==GE||LA89_0==GT||LA89_0==IS||LA89_0==LE||LA89_0==LT||LA89_0==NE||LA89_0==EQUAL||LA89_0==NOTEQUAL||(LA89_0>=SMALLER && LA89_0<=GREATER_GREATER)) ) {
                alt89=1;
            }
            switch (alt89) {
                case 1 :
                    // XQueryParser.g:563:27: ( p_ValueComp | p_GeneralComp | p_NodeComp ) p_RangeExpr
                    {
                    // XQueryParser.g:563:27: ( p_ValueComp | p_GeneralComp | p_NodeComp )
                    int alt88=3;
                    switch ( input.LA(1) ) {
                    case EQ:
                    case GE:
                    case GT:
                    case LE:
                    case LT:
                    case NE:
                        {
                        alt88=1;
                        }
                        break;
                    case EQUAL:
                    case NOTEQUAL:
                    case SMALLER:
                    case GREATER:
                    case SMALLEREQ:
                    case GREATEREQ:
                        {
                        alt88=2;
                        }
                        break;
                    case IS:
                    case SMALLER_SMALLER:
                    case GREATER_GREATER:
                        {
                        alt88=3;
                        }
                        break;
                    default:
                        if (state.backtracking>0) {state.failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("", 88, 0, input);

                        throw nvae;
                    }

                    switch (alt88) {
                        case 1 :
                            // XQueryParser.g:563:28: p_ValueComp
                            {
                            pushFollow(FOLLOW_p_ValueComp_in_p_ComparisonExpr5083);
                            p_ValueComp217=p_ValueComp();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) adaptor.addChild(root_0, p_ValueComp217.getTree());

                            }
                            break;
                        case 2 :
                            // XQueryParser.g:563:42: p_GeneralComp
                            {
                            pushFollow(FOLLOW_p_GeneralComp_in_p_ComparisonExpr5087);
                            p_GeneralComp218=p_GeneralComp();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) adaptor.addChild(root_0, p_GeneralComp218.getTree());

                            }
                            break;
                        case 3 :
                            // XQueryParser.g:563:58: p_NodeComp
                            {
                            pushFollow(FOLLOW_p_NodeComp_in_p_ComparisonExpr5091);
                            p_NodeComp219=p_NodeComp();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) adaptor.addChild(root_0, p_NodeComp219.getTree());

                            }
                            break;

                    }

                    pushFollow(FOLLOW_p_RangeExpr_in_p_ComparisonExpr5094);
                    p_RangeExpr220=p_RangeExpr();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, p_RangeExpr220.getTree());

                    }
                    break;

            }


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (XQDTCommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (XQDTCommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "p_ComparisonExpr"

    public static class p_RangeExpr_return extends ParserRuleReturnScope {
        XQDTCommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "p_RangeExpr"
    // XQueryParser.g:567:1: p_RangeExpr : p_AdditiveExpr (k= TO p_AdditiveExpr )? ;
    public final XQueryParser.p_RangeExpr_return p_RangeExpr() throws RecognitionException {
        XQueryParser.p_RangeExpr_return retval = new XQueryParser.p_RangeExpr_return();
        retval.start = input.LT(1);

        XQDTCommonTree root_0 = null;

        CommonToken k=null;
        XQueryParser.p_AdditiveExpr_return p_AdditiveExpr221 = null;

        XQueryParser.p_AdditiveExpr_return p_AdditiveExpr222 = null;


        XQDTCommonTree k_tree=null;

        try {
            // XQueryParser.g:568:9: ( p_AdditiveExpr (k= TO p_AdditiveExpr )? )
            // XQueryParser.g:568:13: p_AdditiveExpr (k= TO p_AdditiveExpr )?
            {
            root_0 = (XQDTCommonTree)adaptor.nil();

            pushFollow(FOLLOW_p_AdditiveExpr_in_p_RangeExpr5125);
            p_AdditiveExpr221=p_AdditiveExpr();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, p_AdditiveExpr221.getTree());
            // XQueryParser.g:568:28: (k= TO p_AdditiveExpr )?
            int alt90=2;
            int LA90_0 = input.LA(1);

            if ( (LA90_0==TO) ) {
                alt90=1;
            }
            switch (alt90) {
                case 1 :
                    // XQueryParser.g:568:30: k= TO p_AdditiveExpr
                    {
                    k=(CommonToken)match(input,TO,FOLLOW_TO_in_p_RangeExpr5131); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    k_tree = (XQDTCommonTree)adaptor.create(k);
                    adaptor.addChild(root_0, k_tree);
                    }
                    if ( state.backtracking==0 ) {
                      ak(k);
                    }
                    pushFollow(FOLLOW_p_AdditiveExpr_in_p_RangeExpr5135);
                    p_AdditiveExpr222=p_AdditiveExpr();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, p_AdditiveExpr222.getTree());

                    }
                    break;

            }


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (XQDTCommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (XQDTCommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "p_RangeExpr"

    public static class p_AdditiveExpr_return extends ParserRuleReturnScope {
        XQDTCommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "p_AdditiveExpr"
    // XQueryParser.g:572:1: p_AdditiveExpr : p_MultiplicativeExpr ( ( PLUS | MINUS ) p_MultiplicativeExpr )* ;
    public final XQueryParser.p_AdditiveExpr_return p_AdditiveExpr() throws RecognitionException {
        XQueryParser.p_AdditiveExpr_return retval = new XQueryParser.p_AdditiveExpr_return();
        retval.start = input.LT(1);

        XQDTCommonTree root_0 = null;

        CommonToken set224=null;
        XQueryParser.p_MultiplicativeExpr_return p_MultiplicativeExpr223 = null;

        XQueryParser.p_MultiplicativeExpr_return p_MultiplicativeExpr225 = null;


        XQDTCommonTree set224_tree=null;

        try {
            // XQueryParser.g:573:9: ( p_MultiplicativeExpr ( ( PLUS | MINUS ) p_MultiplicativeExpr )* )
            // XQueryParser.g:573:13: p_MultiplicativeExpr ( ( PLUS | MINUS ) p_MultiplicativeExpr )*
            {
            root_0 = (XQDTCommonTree)adaptor.nil();

            pushFollow(FOLLOW_p_MultiplicativeExpr_in_p_AdditiveExpr5166);
            p_MultiplicativeExpr223=p_MultiplicativeExpr();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, p_MultiplicativeExpr223.getTree());
            // XQueryParser.g:573:34: ( ( PLUS | MINUS ) p_MultiplicativeExpr )*
            loop91:
            do {
                int alt91=2;
                int LA91_0 = input.LA(1);

                if ( ((LA91_0>=PLUS && LA91_0<=MINUS)) ) {
                    alt91=1;
                }


                switch (alt91) {
            	case 1 :
            	    // XQueryParser.g:573:36: ( PLUS | MINUS ) p_MultiplicativeExpr
            	    {
            	    set224=(CommonToken)input.LT(1);
            	    if ( (input.LA(1)>=PLUS && input.LA(1)<=MINUS) ) {
            	        input.consume();
            	        if ( state.backtracking==0 ) adaptor.addChild(root_0, (XQDTCommonTree)adaptor.create(set224));
            	        state.errorRecovery=false;state.failed=false;
            	    }
            	    else {
            	        if (state.backtracking>0) {state.failed=true; return retval;}
            	        MismatchedSetException mse = new MismatchedSetException(null,input);
            	        throw mse;
            	    }

            	    pushFollow(FOLLOW_p_MultiplicativeExpr_in_p_AdditiveExpr5178);
            	    p_MultiplicativeExpr225=p_MultiplicativeExpr();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, p_MultiplicativeExpr225.getTree());

            	    }
            	    break;

            	default :
            	    break loop91;
                }
            } while (true);


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (XQDTCommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (XQDTCommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "p_AdditiveExpr"

    public static class p_MultiplicativeExpr_return extends ParserRuleReturnScope {
        XQDTCommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "p_MultiplicativeExpr"
    // XQueryParser.g:577:1: p_MultiplicativeExpr : p_UnionExpr ( ( STAR | kd= DIV | ki= IDIV | km= MOD ) p_UnionExpr )* ;
    public final XQueryParser.p_MultiplicativeExpr_return p_MultiplicativeExpr() throws RecognitionException {
        XQueryParser.p_MultiplicativeExpr_return retval = new XQueryParser.p_MultiplicativeExpr_return();
        retval.start = input.LT(1);

        XQDTCommonTree root_0 = null;

        CommonToken kd=null;
        CommonToken ki=null;
        CommonToken km=null;
        CommonToken STAR227=null;
        XQueryParser.p_UnionExpr_return p_UnionExpr226 = null;

        XQueryParser.p_UnionExpr_return p_UnionExpr228 = null;


        XQDTCommonTree kd_tree=null;
        XQDTCommonTree ki_tree=null;
        XQDTCommonTree km_tree=null;
        XQDTCommonTree STAR227_tree=null;

        try {
            // XQueryParser.g:578:9: ( p_UnionExpr ( ( STAR | kd= DIV | ki= IDIV | km= MOD ) p_UnionExpr )* )
            // XQueryParser.g:578:13: p_UnionExpr ( ( STAR | kd= DIV | ki= IDIV | km= MOD ) p_UnionExpr )*
            {
            root_0 = (XQDTCommonTree)adaptor.nil();

            pushFollow(FOLLOW_p_UnionExpr_in_p_MultiplicativeExpr5209);
            p_UnionExpr226=p_UnionExpr();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, p_UnionExpr226.getTree());
            // XQueryParser.g:578:25: ( ( STAR | kd= DIV | ki= IDIV | km= MOD ) p_UnionExpr )*
            loop93:
            do {
                int alt93=2;
                int LA93_0 = input.LA(1);

                if ( (LA93_0==DIV||LA93_0==IDIV||LA93_0==MOD||LA93_0==STAR) ) {
                    alt93=1;
                }


                switch (alt93) {
            	case 1 :
            	    // XQueryParser.g:578:27: ( STAR | kd= DIV | ki= IDIV | km= MOD ) p_UnionExpr
            	    {
            	    // XQueryParser.g:578:27: ( STAR | kd= DIV | ki= IDIV | km= MOD )
            	    int alt92=4;
            	    switch ( input.LA(1) ) {
            	    case STAR:
            	        {
            	        alt92=1;
            	        }
            	        break;
            	    case DIV:
            	        {
            	        alt92=2;
            	        }
            	        break;
            	    case IDIV:
            	        {
            	        alt92=3;
            	        }
            	        break;
            	    case MOD:
            	        {
            	        alt92=4;
            	        }
            	        break;
            	    default:
            	        if (state.backtracking>0) {state.failed=true; return retval;}
            	        NoViableAltException nvae =
            	            new NoViableAltException("", 92, 0, input);

            	        throw nvae;
            	    }

            	    switch (alt92) {
            	        case 1 :
            	            // XQueryParser.g:578:28: STAR
            	            {
            	            STAR227=(CommonToken)match(input,STAR,FOLLOW_STAR_in_p_MultiplicativeExpr5214); if (state.failed) return retval;
            	            if ( state.backtracking==0 ) {
            	            STAR227_tree = (XQDTCommonTree)adaptor.create(STAR227);
            	            adaptor.addChild(root_0, STAR227_tree);
            	            }

            	            }
            	            break;
            	        case 2 :
            	            // XQueryParser.g:578:35: kd= DIV
            	            {
            	            kd=(CommonToken)match(input,DIV,FOLLOW_DIV_in_p_MultiplicativeExpr5220); if (state.failed) return retval;
            	            if ( state.backtracking==0 ) {
            	            kd_tree = (XQDTCommonTree)adaptor.create(kd);
            	            adaptor.addChild(root_0, kd_tree);
            	            }
            	            if ( state.backtracking==0 ) {
            	              ak(kd);
            	            }

            	            }
            	            break;
            	        case 3 :
            	            // XQueryParser.g:578:55: ki= IDIV
            	            {
            	            ki=(CommonToken)match(input,IDIV,FOLLOW_IDIV_in_p_MultiplicativeExpr5228); if (state.failed) return retval;
            	            if ( state.backtracking==0 ) {
            	            ki_tree = (XQDTCommonTree)adaptor.create(ki);
            	            adaptor.addChild(root_0, ki_tree);
            	            }
            	            if ( state.backtracking==0 ) {
            	              ak(ki);
            	            }

            	            }
            	            break;
            	        case 4 :
            	            // XQueryParser.g:578:76: km= MOD
            	            {
            	            km=(CommonToken)match(input,MOD,FOLLOW_MOD_in_p_MultiplicativeExpr5236); if (state.failed) return retval;
            	            if ( state.backtracking==0 ) {
            	            km_tree = (XQDTCommonTree)adaptor.create(km);
            	            adaptor.addChild(root_0, km_tree);
            	            }
            	            if ( state.backtracking==0 ) {
            	              ak(km);
            	            }

            	            }
            	            break;

            	    }

            	    pushFollow(FOLLOW_p_UnionExpr_in_p_MultiplicativeExpr5241);
            	    p_UnionExpr228=p_UnionExpr();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, p_UnionExpr228.getTree());

            	    }
            	    break;

            	default :
            	    break loop93;
                }
            } while (true);


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (XQDTCommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (XQDTCommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "p_MultiplicativeExpr"

    public static class p_UnionExpr_return extends ParserRuleReturnScope {
        XQDTCommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "p_UnionExpr"
    // XQueryParser.g:582:1: p_UnionExpr : p_IntersectExceptExpr ( (ku= UNION | VBAR ) p_IntersectExceptExpr )* ;
    public final XQueryParser.p_UnionExpr_return p_UnionExpr() throws RecognitionException {
        XQueryParser.p_UnionExpr_return retval = new XQueryParser.p_UnionExpr_return();
        retval.start = input.LT(1);

        XQDTCommonTree root_0 = null;

        CommonToken ku=null;
        CommonToken VBAR230=null;
        XQueryParser.p_IntersectExceptExpr_return p_IntersectExceptExpr229 = null;

        XQueryParser.p_IntersectExceptExpr_return p_IntersectExceptExpr231 = null;


        XQDTCommonTree ku_tree=null;
        XQDTCommonTree VBAR230_tree=null;

        try {
            // XQueryParser.g:583:9: ( p_IntersectExceptExpr ( (ku= UNION | VBAR ) p_IntersectExceptExpr )* )
            // XQueryParser.g:583:13: p_IntersectExceptExpr ( (ku= UNION | VBAR ) p_IntersectExceptExpr )*
            {
            root_0 = (XQDTCommonTree)adaptor.nil();

            pushFollow(FOLLOW_p_IntersectExceptExpr_in_p_UnionExpr5272);
            p_IntersectExceptExpr229=p_IntersectExceptExpr();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, p_IntersectExceptExpr229.getTree());
            // XQueryParser.g:583:35: ( (ku= UNION | VBAR ) p_IntersectExceptExpr )*
            loop95:
            do {
                int alt95=2;
                int LA95_0 = input.LA(1);

                if ( (LA95_0==UNION||LA95_0==VBAR) ) {
                    alt95=1;
                }


                switch (alt95) {
            	case 1 :
            	    // XQueryParser.g:583:37: (ku= UNION | VBAR ) p_IntersectExceptExpr
            	    {
            	    // XQueryParser.g:583:37: (ku= UNION | VBAR )
            	    int alt94=2;
            	    int LA94_0 = input.LA(1);

            	    if ( (LA94_0==UNION) ) {
            	        alt94=1;
            	    }
            	    else if ( (LA94_0==VBAR) ) {
            	        alt94=2;
            	    }
            	    else {
            	        if (state.backtracking>0) {state.failed=true; return retval;}
            	        NoViableAltException nvae =
            	            new NoViableAltException("", 94, 0, input);

            	        throw nvae;
            	    }
            	    switch (alt94) {
            	        case 1 :
            	            // XQueryParser.g:583:38: ku= UNION
            	            {
            	            ku=(CommonToken)match(input,UNION,FOLLOW_UNION_in_p_UnionExpr5279); if (state.failed) return retval;
            	            if ( state.backtracking==0 ) {
            	            ku_tree = (XQDTCommonTree)adaptor.create(ku);
            	            adaptor.addChild(root_0, ku_tree);
            	            }
            	            if ( state.backtracking==0 ) {
            	              ak(ku);
            	            }

            	            }
            	            break;
            	        case 2 :
            	            // XQueryParser.g:583:60: VBAR
            	            {
            	            VBAR230=(CommonToken)match(input,VBAR,FOLLOW_VBAR_in_p_UnionExpr5285); if (state.failed) return retval;
            	            if ( state.backtracking==0 ) {
            	            VBAR230_tree = (XQDTCommonTree)adaptor.create(VBAR230);
            	            adaptor.addChild(root_0, VBAR230_tree);
            	            }

            	            }
            	            break;

            	    }

            	    pushFollow(FOLLOW_p_IntersectExceptExpr_in_p_UnionExpr5288);
            	    p_IntersectExceptExpr231=p_IntersectExceptExpr();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, p_IntersectExceptExpr231.getTree());

            	    }
            	    break;

            	default :
            	    break loop95;
                }
            } while (true);


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (XQDTCommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (XQDTCommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "p_UnionExpr"

    public static class p_IntersectExceptExpr_return extends ParserRuleReturnScope {
        XQDTCommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "p_IntersectExceptExpr"
    // XQueryParser.g:587:1: p_IntersectExceptExpr : p_InstanceofExpr ( (k= INTERSECT | k= EXCEPT ) p_InstanceofExpr )* ;
    public final XQueryParser.p_IntersectExceptExpr_return p_IntersectExceptExpr() throws RecognitionException {
        XQueryParser.p_IntersectExceptExpr_return retval = new XQueryParser.p_IntersectExceptExpr_return();
        retval.start = input.LT(1);

        XQDTCommonTree root_0 = null;

        CommonToken k=null;
        XQueryParser.p_InstanceofExpr_return p_InstanceofExpr232 = null;

        XQueryParser.p_InstanceofExpr_return p_InstanceofExpr233 = null;


        XQDTCommonTree k_tree=null;

        try {
            // XQueryParser.g:588:9: ( p_InstanceofExpr ( (k= INTERSECT | k= EXCEPT ) p_InstanceofExpr )* )
            // XQueryParser.g:588:13: p_InstanceofExpr ( (k= INTERSECT | k= EXCEPT ) p_InstanceofExpr )*
            {
            root_0 = (XQDTCommonTree)adaptor.nil();

            pushFollow(FOLLOW_p_InstanceofExpr_in_p_IntersectExceptExpr5319);
            p_InstanceofExpr232=p_InstanceofExpr();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, p_InstanceofExpr232.getTree());
            // XQueryParser.g:588:30: ( (k= INTERSECT | k= EXCEPT ) p_InstanceofExpr )*
            loop97:
            do {
                int alt97=2;
                int LA97_0 = input.LA(1);

                if ( (LA97_0==EXCEPT||LA97_0==INTERSECT) ) {
                    alt97=1;
                }


                switch (alt97) {
            	case 1 :
            	    // XQueryParser.g:588:32: (k= INTERSECT | k= EXCEPT ) p_InstanceofExpr
            	    {
            	    // XQueryParser.g:588:32: (k= INTERSECT | k= EXCEPT )
            	    int alt96=2;
            	    int LA96_0 = input.LA(1);

            	    if ( (LA96_0==INTERSECT) ) {
            	        alt96=1;
            	    }
            	    else if ( (LA96_0==EXCEPT) ) {
            	        alt96=2;
            	    }
            	    else {
            	        if (state.backtracking>0) {state.failed=true; return retval;}
            	        NoViableAltException nvae =
            	            new NoViableAltException("", 96, 0, input);

            	        throw nvae;
            	    }
            	    switch (alt96) {
            	        case 1 :
            	            // XQueryParser.g:588:33: k= INTERSECT
            	            {
            	            k=(CommonToken)match(input,INTERSECT,FOLLOW_INTERSECT_in_p_IntersectExceptExpr5326); if (state.failed) return retval;
            	            if ( state.backtracking==0 ) {
            	            k_tree = (XQDTCommonTree)adaptor.create(k);
            	            adaptor.addChild(root_0, k_tree);
            	            }

            	            }
            	            break;
            	        case 2 :
            	            // XQueryParser.g:588:47: k= EXCEPT
            	            {
            	            k=(CommonToken)match(input,EXCEPT,FOLLOW_EXCEPT_in_p_IntersectExceptExpr5332); if (state.failed) return retval;
            	            if ( state.backtracking==0 ) {
            	            k_tree = (XQDTCommonTree)adaptor.create(k);
            	            adaptor.addChild(root_0, k_tree);
            	            }

            	            }
            	            break;

            	    }

            	    if ( state.backtracking==0 ) {
            	      ak(k);
            	    }
            	    pushFollow(FOLLOW_p_InstanceofExpr_in_p_IntersectExceptExpr5337);
            	    p_InstanceofExpr233=p_InstanceofExpr();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, p_InstanceofExpr233.getTree());

            	    }
            	    break;

            	default :
            	    break loop97;
                }
            } while (true);


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (XQDTCommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (XQDTCommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "p_IntersectExceptExpr"

    public static class p_InstanceofExpr_return extends ParserRuleReturnScope {
        XQDTCommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "p_InstanceofExpr"
    // XQueryParser.g:592:1: p_InstanceofExpr : p_TreatExpr (ki= INSTANCE ko= OF p_SequenceType )? ;
    public final XQueryParser.p_InstanceofExpr_return p_InstanceofExpr() throws RecognitionException {
        XQueryParser.p_InstanceofExpr_return retval = new XQueryParser.p_InstanceofExpr_return();
        retval.start = input.LT(1);

        XQDTCommonTree root_0 = null;

        CommonToken ki=null;
        CommonToken ko=null;
        XQueryParser.p_TreatExpr_return p_TreatExpr234 = null;

        XQueryParser.p_SequenceType_return p_SequenceType235 = null;


        XQDTCommonTree ki_tree=null;
        XQDTCommonTree ko_tree=null;

        try {
            // XQueryParser.g:593:9: ( p_TreatExpr (ki= INSTANCE ko= OF p_SequenceType )? )
            // XQueryParser.g:593:13: p_TreatExpr (ki= INSTANCE ko= OF p_SequenceType )?
            {
            root_0 = (XQDTCommonTree)adaptor.nil();

            pushFollow(FOLLOW_p_TreatExpr_in_p_InstanceofExpr5368);
            p_TreatExpr234=p_TreatExpr();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, p_TreatExpr234.getTree());
            // XQueryParser.g:593:25: (ki= INSTANCE ko= OF p_SequenceType )?
            int alt98=2;
            int LA98_0 = input.LA(1);

            if ( (LA98_0==INSTANCE) ) {
                alt98=1;
            }
            switch (alt98) {
                case 1 :
                    // XQueryParser.g:593:27: ki= INSTANCE ko= OF p_SequenceType
                    {
                    ki=(CommonToken)match(input,INSTANCE,FOLLOW_INSTANCE_in_p_InstanceofExpr5374); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    ki_tree = (XQDTCommonTree)adaptor.create(ki);
                    adaptor.addChild(root_0, ki_tree);
                    }
                    if ( state.backtracking==0 ) {
                      ak(ki);
                    }
                    ko=(CommonToken)match(input,OF,FOLLOW_OF_in_p_InstanceofExpr5380); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    ko_tree = (XQDTCommonTree)adaptor.create(ko);
                    adaptor.addChild(root_0, ko_tree);
                    }
                    if ( state.backtracking==0 ) {
                      ak(ko);
                    }
                    pushFollow(FOLLOW_p_SequenceType_in_p_InstanceofExpr5384);
                    p_SequenceType235=p_SequenceType();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, p_SequenceType235.getTree());

                    }
                    break;

            }


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (XQDTCommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (XQDTCommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "p_InstanceofExpr"

    public static class p_TreatExpr_return extends ParserRuleReturnScope {
        XQDTCommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "p_TreatExpr"
    // XQueryParser.g:597:1: p_TreatExpr : p_CastableExpr (kt= TREAT ka= AS p_SequenceType )? ;
    public final XQueryParser.p_TreatExpr_return p_TreatExpr() throws RecognitionException {
        XQueryParser.p_TreatExpr_return retval = new XQueryParser.p_TreatExpr_return();
        retval.start = input.LT(1);

        XQDTCommonTree root_0 = null;

        CommonToken kt=null;
        CommonToken ka=null;
        XQueryParser.p_CastableExpr_return p_CastableExpr236 = null;

        XQueryParser.p_SequenceType_return p_SequenceType237 = null;


        XQDTCommonTree kt_tree=null;
        XQDTCommonTree ka_tree=null;

        try {
            // XQueryParser.g:598:9: ( p_CastableExpr (kt= TREAT ka= AS p_SequenceType )? )
            // XQueryParser.g:598:13: p_CastableExpr (kt= TREAT ka= AS p_SequenceType )?
            {
            root_0 = (XQDTCommonTree)adaptor.nil();

            pushFollow(FOLLOW_p_CastableExpr_in_p_TreatExpr5414);
            p_CastableExpr236=p_CastableExpr();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, p_CastableExpr236.getTree());
            // XQueryParser.g:598:28: (kt= TREAT ka= AS p_SequenceType )?
            int alt99=2;
            int LA99_0 = input.LA(1);

            if ( (LA99_0==TREAT) ) {
                alt99=1;
            }
            switch (alt99) {
                case 1 :
                    // XQueryParser.g:598:30: kt= TREAT ka= AS p_SequenceType
                    {
                    kt=(CommonToken)match(input,TREAT,FOLLOW_TREAT_in_p_TreatExpr5420); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    kt_tree = (XQDTCommonTree)adaptor.create(kt);
                    adaptor.addChild(root_0, kt_tree);
                    }
                    if ( state.backtracking==0 ) {
                      ak(kt);
                    }
                    ka=(CommonToken)match(input,AS,FOLLOW_AS_in_p_TreatExpr5426); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    ka_tree = (XQDTCommonTree)adaptor.create(ka);
                    adaptor.addChild(root_0, ka_tree);
                    }
                    if ( state.backtracking==0 ) {
                      ak(ka);
                    }
                    pushFollow(FOLLOW_p_SequenceType_in_p_TreatExpr5430);
                    p_SequenceType237=p_SequenceType();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, p_SequenceType237.getTree());

                    }
                    break;

            }


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (XQDTCommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (XQDTCommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "p_TreatExpr"

    public static class p_CastableExpr_return extends ParserRuleReturnScope {
        XQDTCommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "p_CastableExpr"
    // XQueryParser.g:602:1: p_CastableExpr : p_CastExpr (kc= CASTABLE ka= AS p_SingleType )? ;
    public final XQueryParser.p_CastableExpr_return p_CastableExpr() throws RecognitionException {
        XQueryParser.p_CastableExpr_return retval = new XQueryParser.p_CastableExpr_return();
        retval.start = input.LT(1);

        XQDTCommonTree root_0 = null;

        CommonToken kc=null;
        CommonToken ka=null;
        XQueryParser.p_CastExpr_return p_CastExpr238 = null;

        XQueryParser.p_SingleType_return p_SingleType239 = null;


        XQDTCommonTree kc_tree=null;
        XQDTCommonTree ka_tree=null;

        try {
            // XQueryParser.g:603:9: ( p_CastExpr (kc= CASTABLE ka= AS p_SingleType )? )
            // XQueryParser.g:603:13: p_CastExpr (kc= CASTABLE ka= AS p_SingleType )?
            {
            root_0 = (XQDTCommonTree)adaptor.nil();

            pushFollow(FOLLOW_p_CastExpr_in_p_CastableExpr5469);
            p_CastExpr238=p_CastExpr();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, p_CastExpr238.getTree());
            // XQueryParser.g:603:24: (kc= CASTABLE ka= AS p_SingleType )?
            int alt100=2;
            int LA100_0 = input.LA(1);

            if ( (LA100_0==CASTABLE) ) {
                alt100=1;
            }
            switch (alt100) {
                case 1 :
                    // XQueryParser.g:603:26: kc= CASTABLE ka= AS p_SingleType
                    {
                    kc=(CommonToken)match(input,CASTABLE,FOLLOW_CASTABLE_in_p_CastableExpr5475); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    kc_tree = (XQDTCommonTree)adaptor.create(kc);
                    adaptor.addChild(root_0, kc_tree);
                    }
                    if ( state.backtracking==0 ) {
                      ak(kc);
                    }
                    ka=(CommonToken)match(input,AS,FOLLOW_AS_in_p_CastableExpr5481); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    ka_tree = (XQDTCommonTree)adaptor.create(ka);
                    adaptor.addChild(root_0, ka_tree);
                    }
                    if ( state.backtracking==0 ) {
                      ak(ka);
                    }
                    pushFollow(FOLLOW_p_SingleType_in_p_CastableExpr5485);
                    p_SingleType239=p_SingleType();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, p_SingleType239.getTree());

                    }
                    break;

            }


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (XQDTCommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (XQDTCommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "p_CastableExpr"

    public static class p_CastExpr_return extends ParserRuleReturnScope {
        XQDTCommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "p_CastExpr"
    // XQueryParser.g:607:1: p_CastExpr : p_UnaryExpr (kc= CAST ka= AS p_SingleType )? ;
    public final XQueryParser.p_CastExpr_return p_CastExpr() throws RecognitionException {
        XQueryParser.p_CastExpr_return retval = new XQueryParser.p_CastExpr_return();
        retval.start = input.LT(1);

        XQDTCommonTree root_0 = null;

        CommonToken kc=null;
        CommonToken ka=null;
        XQueryParser.p_UnaryExpr_return p_UnaryExpr240 = null;

        XQueryParser.p_SingleType_return p_SingleType241 = null;


        XQDTCommonTree kc_tree=null;
        XQDTCommonTree ka_tree=null;

        try {
            // XQueryParser.g:608:9: ( p_UnaryExpr (kc= CAST ka= AS p_SingleType )? )
            // XQueryParser.g:608:13: p_UnaryExpr (kc= CAST ka= AS p_SingleType )?
            {
            root_0 = (XQDTCommonTree)adaptor.nil();

            pushFollow(FOLLOW_p_UnaryExpr_in_p_CastExpr5524);
            p_UnaryExpr240=p_UnaryExpr();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, p_UnaryExpr240.getTree());
            // XQueryParser.g:608:25: (kc= CAST ka= AS p_SingleType )?
            int alt101=2;
            int LA101_0 = input.LA(1);

            if ( (LA101_0==CAST) ) {
                alt101=1;
            }
            switch (alt101) {
                case 1 :
                    // XQueryParser.g:608:27: kc= CAST ka= AS p_SingleType
                    {
                    kc=(CommonToken)match(input,CAST,FOLLOW_CAST_in_p_CastExpr5530); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    kc_tree = (XQDTCommonTree)adaptor.create(kc);
                    adaptor.addChild(root_0, kc_tree);
                    }
                    if ( state.backtracking==0 ) {
                      ak(kc);
                    }
                    ka=(CommonToken)match(input,AS,FOLLOW_AS_in_p_CastExpr5536); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    ka_tree = (XQDTCommonTree)adaptor.create(ka);
                    adaptor.addChild(root_0, ka_tree);
                    }
                    if ( state.backtracking==0 ) {
                      ak(ka);
                    }
                    pushFollow(FOLLOW_p_SingleType_in_p_CastExpr5540);
                    p_SingleType241=p_SingleType();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, p_SingleType241.getTree());

                    }
                    break;

            }


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (XQDTCommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (XQDTCommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "p_CastExpr"

    public static class p_UnaryExpr_return extends ParserRuleReturnScope {
        XQDTCommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "p_UnaryExpr"
    // XQueryParser.g:612:1: p_UnaryExpr : ( PLUS | MINUS )* p_ValueExpr -> ^( UnaryExpr ( PLUS )* p_ValueExpr ) ;
    public final XQueryParser.p_UnaryExpr_return p_UnaryExpr() throws RecognitionException {
        XQueryParser.p_UnaryExpr_return retval = new XQueryParser.p_UnaryExpr_return();
        retval.start = input.LT(1);

        XQDTCommonTree root_0 = null;

        CommonToken PLUS242=null;
        CommonToken MINUS243=null;
        XQueryParser.p_ValueExpr_return p_ValueExpr244 = null;


        XQDTCommonTree PLUS242_tree=null;
        XQDTCommonTree MINUS243_tree=null;
        RewriteRuleTokenStream stream_PLUS=new RewriteRuleTokenStream(adaptor,"token PLUS");
        RewriteRuleTokenStream stream_MINUS=new RewriteRuleTokenStream(adaptor,"token MINUS");
        RewriteRuleSubtreeStream stream_p_ValueExpr=new RewriteRuleSubtreeStream(adaptor,"rule p_ValueExpr");
        try {
            // XQueryParser.g:613:9: ( ( PLUS | MINUS )* p_ValueExpr -> ^( UnaryExpr ( PLUS )* p_ValueExpr ) )
            // XQueryParser.g:613:13: ( PLUS | MINUS )* p_ValueExpr
            {
            // XQueryParser.g:613:13: ( PLUS | MINUS )*
            loop102:
            do {
                int alt102=3;
                int LA102_0 = input.LA(1);

                if ( (LA102_0==PLUS) ) {
                    alt102=1;
                }
                else if ( (LA102_0==MINUS) ) {
                    alt102=2;
                }


                switch (alt102) {
            	case 1 :
            	    // XQueryParser.g:613:14: PLUS
            	    {
            	    PLUS242=(CommonToken)match(input,PLUS,FOLLOW_PLUS_in_p_UnaryExpr5572); if (state.failed) return retval; 
            	    if ( state.backtracking==0 ) stream_PLUS.add(PLUS242);


            	    }
            	    break;
            	case 2 :
            	    // XQueryParser.g:613:21: MINUS
            	    {
            	    MINUS243=(CommonToken)match(input,MINUS,FOLLOW_MINUS_in_p_UnaryExpr5576); if (state.failed) return retval; 
            	    if ( state.backtracking==0 ) stream_MINUS.add(MINUS243);


            	    }
            	    break;

            	default :
            	    break loop102;
                }
            } while (true);

            pushFollow(FOLLOW_p_ValueExpr_in_p_UnaryExpr5580);
            p_ValueExpr244=p_ValueExpr();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_p_ValueExpr.add(p_ValueExpr244.getTree());


            // AST REWRITE
            // elements: p_ValueExpr, PLUS
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (XQDTCommonTree)adaptor.nil();
            // 614:17: -> ^( UnaryExpr ( PLUS )* p_ValueExpr )
            {
                // XQueryParser.g:614:20: ^( UnaryExpr ( PLUS )* p_ValueExpr )
                {
                XQDTCommonTree root_1 = (XQDTCommonTree)adaptor.nil();
                root_1 = (XQDTCommonTree)adaptor.becomeRoot((XQDTCommonTree)adaptor.create(UnaryExpr, "UnaryExpr"), root_1);

                // XQueryParser.g:614:32: ( PLUS )*
                while ( stream_PLUS.hasNext() ) {
                    adaptor.addChild(root_1, stream_PLUS.nextNode());

                }
                stream_PLUS.reset();
                adaptor.addChild(root_1, stream_p_ValueExpr.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (XQDTCommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (XQDTCommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "p_UnaryExpr"

    public static class p_ValueExpr_return extends ParserRuleReturnScope {
        XQDTCommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "p_ValueExpr"
    // XQueryParser.g:621:1: p_ValueExpr : ( p_ValidateExpr | p_PathExpr | p_ExtensionExpr );
    public final XQueryParser.p_ValueExpr_return p_ValueExpr() throws RecognitionException {
        XQueryParser.p_ValueExpr_return retval = new XQueryParser.p_ValueExpr_return();
        retval.start = input.LT(1);

        XQDTCommonTree root_0 = null;

        XQueryParser.p_ValidateExpr_return p_ValidateExpr245 = null;

        XQueryParser.p_PathExpr_return p_PathExpr246 = null;

        XQueryParser.p_ExtensionExpr_return p_ExtensionExpr247 = null;



        try {
            // XQueryParser.g:622:9: ( p_ValidateExpr | p_PathExpr | p_ExtensionExpr )
            int alt103=3;
            alt103 = dfa103.predict(input);
            switch (alt103) {
                case 1 :
                    // XQueryParser.g:622:11: p_ValidateExpr
                    {
                    root_0 = (XQDTCommonTree)adaptor.nil();

                    pushFollow(FOLLOW_p_ValidateExpr_in_p_ValueExpr5636);
                    p_ValidateExpr245=p_ValidateExpr();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, p_ValidateExpr245.getTree());

                    }
                    break;
                case 2 :
                    // XQueryParser.g:623:11: p_PathExpr
                    {
                    root_0 = (XQDTCommonTree)adaptor.nil();

                    pushFollow(FOLLOW_p_PathExpr_in_p_ValueExpr5648);
                    p_PathExpr246=p_PathExpr();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, p_PathExpr246.getTree());

                    }
                    break;
                case 3 :
                    // XQueryParser.g:624:11: p_ExtensionExpr
                    {
                    root_0 = (XQDTCommonTree)adaptor.nil();

                    pushFollow(FOLLOW_p_ExtensionExpr_in_p_ValueExpr5660);
                    p_ExtensionExpr247=p_ExtensionExpr();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, p_ExtensionExpr247.getTree());

                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (XQDTCommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (XQDTCommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "p_ValueExpr"

    public static class p_GeneralComp_return extends ParserRuleReturnScope {
        XQDTCommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "p_GeneralComp"
    // XQueryParser.g:628:1: p_GeneralComp : ( EQUAL | NOTEQUAL | SMALLER | SMALLEREQ | GREATER | GREATEREQ );
    public final XQueryParser.p_GeneralComp_return p_GeneralComp() throws RecognitionException {
        XQueryParser.p_GeneralComp_return retval = new XQueryParser.p_GeneralComp_return();
        retval.start = input.LT(1);

        XQDTCommonTree root_0 = null;

        CommonToken set248=null;

        XQDTCommonTree set248_tree=null;

        try {
            // XQueryParser.g:629:9: ( EQUAL | NOTEQUAL | SMALLER | SMALLEREQ | GREATER | GREATEREQ )
            // XQueryParser.g:
            {
            root_0 = (XQDTCommonTree)adaptor.nil();

            set248=(CommonToken)input.LT(1);
            if ( input.LA(1)==EQUAL||input.LA(1)==NOTEQUAL||(input.LA(1)>=SMALLER && input.LA(1)<=GREATEREQ) ) {
                input.consume();
                if ( state.backtracking==0 ) adaptor.addChild(root_0, (XQDTCommonTree)adaptor.create(set248));
                state.errorRecovery=false;state.failed=false;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                MismatchedSetException mse = new MismatchedSetException(null,input);
                throw mse;
            }


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (XQDTCommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (XQDTCommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "p_GeneralComp"

    public static class p_ValueComp_return extends ParserRuleReturnScope {
        XQDTCommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "p_ValueComp"
    // XQueryParser.g:633:1: p_ValueComp : (k= EQ | k= NE | k= LT | k= LE | k= GT | k= GE ) ;
    public final XQueryParser.p_ValueComp_return p_ValueComp() throws RecognitionException {
        XQueryParser.p_ValueComp_return retval = new XQueryParser.p_ValueComp_return();
        retval.start = input.LT(1);

        XQDTCommonTree root_0 = null;

        CommonToken k=null;

        XQDTCommonTree k_tree=null;

        try {
            // XQueryParser.g:634:9: ( (k= EQ | k= NE | k= LT | k= LE | k= GT | k= GE ) )
            // XQueryParser.g:634:13: (k= EQ | k= NE | k= LT | k= LE | k= GT | k= GE )
            {
            root_0 = (XQDTCommonTree)adaptor.nil();

            // XQueryParser.g:634:13: (k= EQ | k= NE | k= LT | k= LE | k= GT | k= GE )
            int alt104=6;
            switch ( input.LA(1) ) {
            case EQ:
                {
                alt104=1;
                }
                break;
            case NE:
                {
                alt104=2;
                }
                break;
            case LT:
                {
                alt104=3;
                }
                break;
            case LE:
                {
                alt104=4;
                }
                break;
            case GT:
                {
                alt104=5;
                }
                break;
            case GE:
                {
                alt104=6;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 104, 0, input);

                throw nvae;
            }

            switch (alt104) {
                case 1 :
                    // XQueryParser.g:634:14: k= EQ
                    {
                    k=(CommonToken)match(input,EQ,FOLLOW_EQ_in_p_ValueComp5739); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    k_tree = (XQDTCommonTree)adaptor.create(k);
                    adaptor.addChild(root_0, k_tree);
                    }

                    }
                    break;
                case 2 :
                    // XQueryParser.g:634:21: k= NE
                    {
                    k=(CommonToken)match(input,NE,FOLLOW_NE_in_p_ValueComp5745); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    k_tree = (XQDTCommonTree)adaptor.create(k);
                    adaptor.addChild(root_0, k_tree);
                    }

                    }
                    break;
                case 3 :
                    // XQueryParser.g:634:28: k= LT
                    {
                    k=(CommonToken)match(input,LT,FOLLOW_LT_in_p_ValueComp5751); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    k_tree = (XQDTCommonTree)adaptor.create(k);
                    adaptor.addChild(root_0, k_tree);
                    }

                    }
                    break;
                case 4 :
                    // XQueryParser.g:634:35: k= LE
                    {
                    k=(CommonToken)match(input,LE,FOLLOW_LE_in_p_ValueComp5757); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    k_tree = (XQDTCommonTree)adaptor.create(k);
                    adaptor.addChild(root_0, k_tree);
                    }

                    }
                    break;
                case 5 :
                    // XQueryParser.g:634:42: k= GT
                    {
                    k=(CommonToken)match(input,GT,FOLLOW_GT_in_p_ValueComp5763); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    k_tree = (XQDTCommonTree)adaptor.create(k);
                    adaptor.addChild(root_0, k_tree);
                    }

                    }
                    break;
                case 6 :
                    // XQueryParser.g:634:49: k= GE
                    {
                    k=(CommonToken)match(input,GE,FOLLOW_GE_in_p_ValueComp5769); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    k_tree = (XQDTCommonTree)adaptor.create(k);
                    adaptor.addChild(root_0, k_tree);
                    }

                    }
                    break;

            }

            if ( state.backtracking==0 ) {
              ak(k);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (XQDTCommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (XQDTCommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "p_ValueComp"

    public static class p_NodeComp_return extends ParserRuleReturnScope {
        XQDTCommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "p_NodeComp"
    // XQueryParser.g:638:1: p_NodeComp : (ki= IS | SMALLER_SMALLER | GREATER_GREATER );
    public final XQueryParser.p_NodeComp_return p_NodeComp() throws RecognitionException {
        XQueryParser.p_NodeComp_return retval = new XQueryParser.p_NodeComp_return();
        retval.start = input.LT(1);

        XQDTCommonTree root_0 = null;

        CommonToken ki=null;
        CommonToken SMALLER_SMALLER249=null;
        CommonToken GREATER_GREATER250=null;

        XQDTCommonTree ki_tree=null;
        XQDTCommonTree SMALLER_SMALLER249_tree=null;
        XQDTCommonTree GREATER_GREATER250_tree=null;

        try {
            // XQueryParser.g:639:9: (ki= IS | SMALLER_SMALLER | GREATER_GREATER )
            int alt105=3;
            switch ( input.LA(1) ) {
            case IS:
                {
                alt105=1;
                }
                break;
            case SMALLER_SMALLER:
                {
                alt105=2;
                }
                break;
            case GREATER_GREATER:
                {
                alt105=3;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 105, 0, input);

                throw nvae;
            }

            switch (alt105) {
                case 1 :
                    // XQueryParser.g:639:13: ki= IS
                    {
                    root_0 = (XQDTCommonTree)adaptor.nil();

                    ki=(CommonToken)match(input,IS,FOLLOW_IS_in_p_NodeComp5802); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    ki_tree = (XQDTCommonTree)adaptor.create(ki);
                    adaptor.addChild(root_0, ki_tree);
                    }
                    if ( state.backtracking==0 ) {
                      ak(ki);
                    }

                    }
                    break;
                case 2 :
                    // XQueryParser.g:639:32: SMALLER_SMALLER
                    {
                    root_0 = (XQDTCommonTree)adaptor.nil();

                    SMALLER_SMALLER249=(CommonToken)match(input,SMALLER_SMALLER,FOLLOW_SMALLER_SMALLER_in_p_NodeComp5808); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    SMALLER_SMALLER249_tree = (XQDTCommonTree)adaptor.create(SMALLER_SMALLER249);
                    adaptor.addChild(root_0, SMALLER_SMALLER249_tree);
                    }

                    }
                    break;
                case 3 :
                    // XQueryParser.g:639:50: GREATER_GREATER
                    {
                    root_0 = (XQDTCommonTree)adaptor.nil();

                    GREATER_GREATER250=(CommonToken)match(input,GREATER_GREATER,FOLLOW_GREATER_GREATER_in_p_NodeComp5812); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    GREATER_GREATER250_tree = (XQDTCommonTree)adaptor.create(GREATER_GREATER250);
                    adaptor.addChild(root_0, GREATER_GREATER250_tree);
                    }

                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (XQDTCommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (XQDTCommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "p_NodeComp"

    public static class p_ValidateExpr_return extends ParserRuleReturnScope {
        XQDTCommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "p_ValidateExpr"
    // XQueryParser.g:643:1: p_ValidateExpr : kv= VALIDATE ( p_ValidationMode )? LBRACKET pm_Expr RBRACKET ;
    public final XQueryParser.p_ValidateExpr_return p_ValidateExpr() throws RecognitionException {
        XQueryParser.p_ValidateExpr_return retval = new XQueryParser.p_ValidateExpr_return();
        retval.start = input.LT(1);

        XQDTCommonTree root_0 = null;

        CommonToken kv=null;
        CommonToken LBRACKET252=null;
        CommonToken RBRACKET254=null;
        XQueryParser.p_ValidationMode_return p_ValidationMode251 = null;

        XQueryParser.pm_Expr_return pm_Expr253 = null;


        XQDTCommonTree kv_tree=null;
        XQDTCommonTree LBRACKET252_tree=null;
        XQDTCommonTree RBRACKET254_tree=null;

        try {
            // XQueryParser.g:644:9: (kv= VALIDATE ( p_ValidationMode )? LBRACKET pm_Expr RBRACKET )
            // XQueryParser.g:644:13: kv= VALIDATE ( p_ValidationMode )? LBRACKET pm_Expr RBRACKET
            {
            root_0 = (XQDTCommonTree)adaptor.nil();

            kv=(CommonToken)match(input,VALIDATE,FOLLOW_VALIDATE_in_p_ValidateExpr5842); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            kv_tree = (XQDTCommonTree)adaptor.create(kv);
            adaptor.addChild(root_0, kv_tree);
            }
            if ( state.backtracking==0 ) {
              ak(kv);
            }
            // XQueryParser.g:644:36: ( p_ValidationMode )?
            int alt106=2;
            int LA106_0 = input.LA(1);

            if ( (LA106_0==AS||LA106_0==LAX||LA106_0==STRICT) ) {
                alt106=1;
            }
            switch (alt106) {
                case 1 :
                    // XQueryParser.g:644:36: p_ValidationMode
                    {
                    pushFollow(FOLLOW_p_ValidationMode_in_p_ValidateExpr5846);
                    p_ValidationMode251=p_ValidationMode();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, p_ValidationMode251.getTree());

                    }
                    break;

            }

            LBRACKET252=(CommonToken)match(input,LBRACKET,FOLLOW_LBRACKET_in_p_ValidateExpr5849); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            LBRACKET252_tree = (XQDTCommonTree)adaptor.create(LBRACKET252);
            adaptor.addChild(root_0, LBRACKET252_tree);
            }
            pushFollow(FOLLOW_pm_Expr_in_p_ValidateExpr5851);
            pm_Expr253=pm_Expr();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, pm_Expr253.getTree());
            RBRACKET254=(CommonToken)match(input,RBRACKET,FOLLOW_RBRACKET_in_p_ValidateExpr5853); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            RBRACKET254_tree = (XQDTCommonTree)adaptor.create(RBRACKET254);
            adaptor.addChild(root_0, RBRACKET254_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (XQDTCommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (XQDTCommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "p_ValidateExpr"

    public static class p_ValidationMode_return extends ParserRuleReturnScope {
        XQDTCommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "p_ValidationMode"
    // XQueryParser.g:648:1: p_ValidationMode : (k= LAX | k= STRICT | (k= AS p_QName ) ) ;
    public final XQueryParser.p_ValidationMode_return p_ValidationMode() throws RecognitionException {
        XQueryParser.p_ValidationMode_return retval = new XQueryParser.p_ValidationMode_return();
        retval.start = input.LT(1);

        XQDTCommonTree root_0 = null;

        CommonToken k=null;
        XQueryParser.p_QName_return p_QName255 = null;


        XQDTCommonTree k_tree=null;

        try {
            // XQueryParser.g:649:9: ( (k= LAX | k= STRICT | (k= AS p_QName ) ) )
            // XQueryParser.g:649:13: (k= LAX | k= STRICT | (k= AS p_QName ) )
            {
            root_0 = (XQDTCommonTree)adaptor.nil();

            // XQueryParser.g:649:13: (k= LAX | k= STRICT | (k= AS p_QName ) )
            int alt107=3;
            switch ( input.LA(1) ) {
            case LAX:
                {
                alt107=1;
                }
                break;
            case STRICT:
                {
                alt107=2;
                }
                break;
            case AS:
                {
                alt107=3;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 107, 0, input);

                throw nvae;
            }

            switch (alt107) {
                case 1 :
                    // XQueryParser.g:649:14: k= LAX
                    {
                    k=(CommonToken)match(input,LAX,FOLLOW_LAX_in_p_ValidationMode5884); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    k_tree = (XQDTCommonTree)adaptor.create(k);
                    adaptor.addChild(root_0, k_tree);
                    }

                    }
                    break;
                case 2 :
                    // XQueryParser.g:649:22: k= STRICT
                    {
                    k=(CommonToken)match(input,STRICT,FOLLOW_STRICT_in_p_ValidationMode5890); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    k_tree = (XQDTCommonTree)adaptor.create(k);
                    adaptor.addChild(root_0, k_tree);
                    }

                    }
                    break;
                case 3 :
                    // XQueryParser.g:649:33: (k= AS p_QName )
                    {
                    // XQueryParser.g:649:33: (k= AS p_QName )
                    // XQueryParser.g:649:34: k= AS p_QName
                    {
                    k=(CommonToken)match(input,AS,FOLLOW_AS_in_p_ValidationMode5897); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    k_tree = (XQDTCommonTree)adaptor.create(k);
                    adaptor.addChild(root_0, k_tree);
                    }
                    pushFollow(FOLLOW_p_QName_in_p_ValidationMode5899);
                    p_QName255=p_QName();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, p_QName255.getTree());

                    }


                    }
                    break;

            }

            if ( state.backtracking==0 ) {
              ak(k);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (XQDTCommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (XQDTCommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "p_ValidationMode"

    public static class p_ExtensionExpr_return extends ParserRuleReturnScope {
        XQDTCommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "p_ExtensionExpr"
    // XQueryParser.g:653:1: p_ExtensionExpr : ( L_Pragma )+ LBRACKET ( pm_Expr )? RBRACKET ;
    public final XQueryParser.p_ExtensionExpr_return p_ExtensionExpr() throws RecognitionException {
        XQueryParser.p_ExtensionExpr_return retval = new XQueryParser.p_ExtensionExpr_return();
        retval.start = input.LT(1);

        XQDTCommonTree root_0 = null;

        CommonToken L_Pragma256=null;
        CommonToken LBRACKET257=null;
        CommonToken RBRACKET259=null;
        XQueryParser.pm_Expr_return pm_Expr258 = null;


        XQDTCommonTree L_Pragma256_tree=null;
        XQDTCommonTree LBRACKET257_tree=null;
        XQDTCommonTree RBRACKET259_tree=null;

        try {
            // XQueryParser.g:654:9: ( ( L_Pragma )+ LBRACKET ( pm_Expr )? RBRACKET )
            // XQueryParser.g:654:13: ( L_Pragma )+ LBRACKET ( pm_Expr )? RBRACKET
            {
            root_0 = (XQDTCommonTree)adaptor.nil();

            // XQueryParser.g:654:13: ( L_Pragma )+
            int cnt108=0;
            loop108:
            do {
                int alt108=2;
                int LA108_0 = input.LA(1);

                if ( (LA108_0==L_Pragma) ) {
                    alt108=1;
                }


                switch (alt108) {
            	case 1 :
            	    // XQueryParser.g:654:13: L_Pragma
            	    {
            	    L_Pragma256=(CommonToken)match(input,L_Pragma,FOLLOW_L_Pragma_in_p_ExtensionExpr5931); if (state.failed) return retval;
            	    if ( state.backtracking==0 ) {
            	    L_Pragma256_tree = (XQDTCommonTree)adaptor.create(L_Pragma256);
            	    adaptor.addChild(root_0, L_Pragma256_tree);
            	    }

            	    }
            	    break;

            	default :
            	    if ( cnt108 >= 1 ) break loop108;
            	    if (state.backtracking>0) {state.failed=true; return retval;}
                        EarlyExitException eee =
                            new EarlyExitException(108, input);
                        throw eee;
                }
                cnt108++;
            } while (true);

            LBRACKET257=(CommonToken)match(input,LBRACKET,FOLLOW_LBRACKET_in_p_ExtensionExpr5934); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            LBRACKET257_tree = (XQDTCommonTree)adaptor.create(LBRACKET257);
            adaptor.addChild(root_0, LBRACKET257_tree);
            }
            // XQueryParser.g:654:32: ( pm_Expr )?
            int alt109=2;
            int LA109_0 = input.LA(1);

            if ( ((LA109_0>=ANCESTOR && LA109_0<=EXIT)||(LA109_0>=SEQUENTIAL && LA109_0<=MAINTAINED)||(LA109_0>=MUTABLE && LA109_0<=LPAREN)||LA109_0==DOLLAR||(LA109_0>=STAR && LA109_0<=SMALLER)||(LA109_0>=SLASH && LA109_0<=DOT_DOT)||LA109_0==ATTR_SIGN||(LA109_0>=APOS && LA109_0<=QUOT)||LA109_0==L_NCName||(LA109_0>=L_Pragma && LA109_0<=L_DoubleLiteral)||LA109_0==EXPLICITLY) ) {
                alt109=1;
            }
            switch (alt109) {
                case 1 :
                    // XQueryParser.g:654:32: pm_Expr
                    {
                    pushFollow(FOLLOW_pm_Expr_in_p_ExtensionExpr5936);
                    pm_Expr258=pm_Expr();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, pm_Expr258.getTree());

                    }
                    break;

            }

            RBRACKET259=(CommonToken)match(input,RBRACKET,FOLLOW_RBRACKET_in_p_ExtensionExpr5939); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            RBRACKET259_tree = (XQDTCommonTree)adaptor.create(RBRACKET259);
            adaptor.addChild(root_0, RBRACKET259_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (XQDTCommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (XQDTCommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "p_ExtensionExpr"

    public static class p_PathExpr_return extends ParserRuleReturnScope {
        XQDTCommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "p_PathExpr"
    // XQueryParser.g:665:1: p_PathExpr : ( ( SLASH p_RelativePathExpr )=> ( SLASH p_RelativePathExpr ) | SLASH | SLASH_SLASH p_RelativePathExpr | p_RelativePathExpr );
    public final XQueryParser.p_PathExpr_return p_PathExpr() throws RecognitionException {
        XQueryParser.p_PathExpr_return retval = new XQueryParser.p_PathExpr_return();
        retval.start = input.LT(1);

        XQDTCommonTree root_0 = null;

        CommonToken SLASH260=null;
        CommonToken SLASH262=null;
        CommonToken SLASH_SLASH263=null;
        XQueryParser.p_RelativePathExpr_return p_RelativePathExpr261 = null;

        XQueryParser.p_RelativePathExpr_return p_RelativePathExpr264 = null;

        XQueryParser.p_RelativePathExpr_return p_RelativePathExpr265 = null;


        XQDTCommonTree SLASH260_tree=null;
        XQDTCommonTree SLASH262_tree=null;
        XQDTCommonTree SLASH_SLASH263_tree=null;

        try {
            // XQueryParser.g:666:9: ( ( SLASH p_RelativePathExpr )=> ( SLASH p_RelativePathExpr ) | SLASH | SLASH_SLASH p_RelativePathExpr | p_RelativePathExpr )
            int alt110=4;
            alt110 = dfa110.predict(input);
            switch (alt110) {
                case 1 :
                    // XQueryParser.g:666:11: ( SLASH p_RelativePathExpr )=> ( SLASH p_RelativePathExpr )
                    {
                    root_0 = (XQDTCommonTree)adaptor.nil();

                    // XQueryParser.g:666:41: ( SLASH p_RelativePathExpr )
                    // XQueryParser.g:666:42: SLASH p_RelativePathExpr
                    {
                    SLASH260=(CommonToken)match(input,SLASH,FOLLOW_SLASH_in_p_PathExpr5981); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    SLASH260_tree = (XQDTCommonTree)adaptor.create(SLASH260);
                    adaptor.addChild(root_0, SLASH260_tree);
                    }
                    pushFollow(FOLLOW_p_RelativePathExpr_in_p_PathExpr5983);
                    p_RelativePathExpr261=p_RelativePathExpr();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, p_RelativePathExpr261.getTree());

                    }


                    }
                    break;
                case 2 :
                    // XQueryParser.g:667:11: SLASH
                    {
                    root_0 = (XQDTCommonTree)adaptor.nil();

                    SLASH262=(CommonToken)match(input,SLASH,FOLLOW_SLASH_in_p_PathExpr5996); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    SLASH262_tree = (XQDTCommonTree)adaptor.create(SLASH262);
                    adaptor.addChild(root_0, SLASH262_tree);
                    }

                    }
                    break;
                case 3 :
                    // XQueryParser.g:668:11: SLASH_SLASH p_RelativePathExpr
                    {
                    root_0 = (XQDTCommonTree)adaptor.nil();

                    SLASH_SLASH263=(CommonToken)match(input,SLASH_SLASH,FOLLOW_SLASH_SLASH_in_p_PathExpr6008); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    SLASH_SLASH263_tree = (XQDTCommonTree)adaptor.create(SLASH_SLASH263);
                    adaptor.addChild(root_0, SLASH_SLASH263_tree);
                    }
                    pushFollow(FOLLOW_p_RelativePathExpr_in_p_PathExpr6010);
                    p_RelativePathExpr264=p_RelativePathExpr();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, p_RelativePathExpr264.getTree());

                    }
                    break;
                case 4 :
                    // XQueryParser.g:669:11: p_RelativePathExpr
                    {
                    root_0 = (XQDTCommonTree)adaptor.nil();

                    pushFollow(FOLLOW_p_RelativePathExpr_in_p_PathExpr6022);
                    p_RelativePathExpr265=p_RelativePathExpr();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, p_RelativePathExpr265.getTree());

                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (XQDTCommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (XQDTCommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "p_PathExpr"

    public static class p_RelativePathExpr_return extends ParserRuleReturnScope {
        XQDTCommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "p_RelativePathExpr"
    // XQueryParser.g:673:1: p_RelativePathExpr : p_StepExpr ( ( SLASH | SLASH_SLASH ) p_StepExpr )* ;
    public final XQueryParser.p_RelativePathExpr_return p_RelativePathExpr() throws RecognitionException {
        XQueryParser.p_RelativePathExpr_return retval = new XQueryParser.p_RelativePathExpr_return();
        retval.start = input.LT(1);

        XQDTCommonTree root_0 = null;

        CommonToken set267=null;
        XQueryParser.p_StepExpr_return p_StepExpr266 = null;

        XQueryParser.p_StepExpr_return p_StepExpr268 = null;


        XQDTCommonTree set267_tree=null;

        try {
            // XQueryParser.g:674:9: ( p_StepExpr ( ( SLASH | SLASH_SLASH ) p_StepExpr )* )
            // XQueryParser.g:674:11: p_StepExpr ( ( SLASH | SLASH_SLASH ) p_StepExpr )*
            {
            root_0 = (XQDTCommonTree)adaptor.nil();

            pushFollow(FOLLOW_p_StepExpr_in_p_RelativePathExpr6050);
            p_StepExpr266=p_StepExpr();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, p_StepExpr266.getTree());
            // XQueryParser.g:674:22: ( ( SLASH | SLASH_SLASH ) p_StepExpr )*
            loop111:
            do {
                int alt111=2;
                int LA111_0 = input.LA(1);

                if ( ((LA111_0>=SLASH && LA111_0<=SLASH_SLASH)) ) {
                    alt111=1;
                }


                switch (alt111) {
            	case 1 :
            	    // XQueryParser.g:674:23: ( SLASH | SLASH_SLASH ) p_StepExpr
            	    {
            	    set267=(CommonToken)input.LT(1);
            	    if ( (input.LA(1)>=SLASH && input.LA(1)<=SLASH_SLASH) ) {
            	        input.consume();
            	        if ( state.backtracking==0 ) adaptor.addChild(root_0, (XQDTCommonTree)adaptor.create(set267));
            	        state.errorRecovery=false;state.failed=false;
            	    }
            	    else {
            	        if (state.backtracking>0) {state.failed=true; return retval;}
            	        MismatchedSetException mse = new MismatchedSetException(null,input);
            	        throw mse;
            	    }

            	    pushFollow(FOLLOW_p_StepExpr_in_p_RelativePathExpr6061);
            	    p_StepExpr268=p_StepExpr();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, p_StepExpr268.getTree());

            	    }
            	    break;

            	default :
            	    break loop111;
                }
            } while (true);


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (XQDTCommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (XQDTCommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "p_RelativePathExpr"

    public static class p_StepExpr_return extends ParserRuleReturnScope {
        XQDTCommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "p_StepExpr"
    // XQueryParser.g:678:1: p_StepExpr : ( p_AxisStep | p_FilterExpr );
    public final XQueryParser.p_StepExpr_return p_StepExpr() throws RecognitionException {
        XQueryParser.p_StepExpr_return retval = new XQueryParser.p_StepExpr_return();
        retval.start = input.LT(1);

        XQDTCommonTree root_0 = null;

        XQueryParser.p_AxisStep_return p_AxisStep269 = null;

        XQueryParser.p_FilterExpr_return p_FilterExpr270 = null;



        try {
            // XQueryParser.g:679:9: ( p_AxisStep | p_FilterExpr )
            int alt112=2;
            alt112 = dfa112.predict(input);
            switch (alt112) {
                case 1 :
                    // XQueryParser.g:679:11: p_AxisStep
                    {
                    root_0 = (XQDTCommonTree)adaptor.nil();

                    pushFollow(FOLLOW_p_AxisStep_in_p_StepExpr6089);
                    p_AxisStep269=p_AxisStep();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, p_AxisStep269.getTree());

                    }
                    break;
                case 2 :
                    // XQueryParser.g:680:11: p_FilterExpr
                    {
                    root_0 = (XQDTCommonTree)adaptor.nil();

                    pushFollow(FOLLOW_p_FilterExpr_in_p_StepExpr6101);
                    p_FilterExpr270=p_FilterExpr();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, p_FilterExpr270.getTree());

                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (XQDTCommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (XQDTCommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "p_StepExpr"

    public static class p_AxisStep_return extends ParserRuleReturnScope {
        XQDTCommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "p_AxisStep"
    // XQueryParser.g:684:1: p_AxisStep : ( p_ReverseStep | p_ForwardStep ) p_PredicateList ;
    public final XQueryParser.p_AxisStep_return p_AxisStep() throws RecognitionException {
        XQueryParser.p_AxisStep_return retval = new XQueryParser.p_AxisStep_return();
        retval.start = input.LT(1);

        XQDTCommonTree root_0 = null;

        XQueryParser.p_ReverseStep_return p_ReverseStep271 = null;

        XQueryParser.p_ForwardStep_return p_ForwardStep272 = null;

        XQueryParser.p_PredicateList_return p_PredicateList273 = null;



        try {
            // XQueryParser.g:685:9: ( ( p_ReverseStep | p_ForwardStep ) p_PredicateList )
            // XQueryParser.g:685:11: ( p_ReverseStep | p_ForwardStep ) p_PredicateList
            {
            root_0 = (XQDTCommonTree)adaptor.nil();

            // XQueryParser.g:685:11: ( p_ReverseStep | p_ForwardStep )
            int alt113=2;
            switch ( input.LA(1) ) {
            case PARENT:
                {
                int LA113_1 = input.LA(2);

                if ( (LA113_1==COLON_COLON) ) {
                    alt113=1;
                }
                else if ( (LA113_1==EOF||(LA113_1>=AND && LA113_1<=ASCENDING)||(LA113_1>=BY && LA113_1<=CASTABLE)||LA113_1==COLLATION||LA113_1==DEFAULT||(LA113_1>=DESCENDING && LA113_1<=DIV)||(LA113_1>=ELSE && LA113_1<=EMPTY)||LA113_1==EQ||LA113_1==EXCEPT||LA113_1==FOR||LA113_1==GE||(LA113_1>=GT && LA113_1<=IDIV)||(LA113_1>=INSTANCE && LA113_1<=IS)||LA113_1==LE||(LA113_1>=LET && LA113_1<=MOD)||LA113_1==NE||(LA113_1>=OR && LA113_1<=ORDER)||(LA113_1>=RETURN && LA113_1<=SATISFIES)||LA113_1==STABLE||(LA113_1>=TO && LA113_1<=TREAT)||LA113_1==UNION||LA113_1==WHERE||LA113_1==COUNT||(LA113_1>=END && LA113_1<=GROUP)||LA113_1==ONLY||LA113_1==START||(LA113_1>=AFTER && LA113_1<=BEFORE)||LA113_1==INTO||LA113_1==MODIFY||LA113_1==WITH||LA113_1==RPAREN||(LA113_1>=RBRACKET && LA113_1<=EQUAL)||LA113_1==NOTEQUAL||LA113_1==COMMA||(LA113_1>=STAR && LA113_1<=SLASH_SLASH)||LA113_1==COLON||(LA113_1>=SEMICOLON && LA113_1<=VBAR)) ) {
                    alt113=2;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 113, 1, input);

                    throw nvae;
                }
                }
                break;
            case ANCESTOR:
                {
                int LA113_2 = input.LA(2);

                if ( (LA113_2==COLON_COLON) ) {
                    alt113=1;
                }
                else if ( (LA113_2==EOF||(LA113_2>=AND && LA113_2<=ASCENDING)||(LA113_2>=BY && LA113_2<=CASTABLE)||LA113_2==COLLATION||LA113_2==DEFAULT||(LA113_2>=DESCENDING && LA113_2<=DIV)||(LA113_2>=ELSE && LA113_2<=EMPTY)||LA113_2==EQ||LA113_2==EXCEPT||LA113_2==FOR||LA113_2==GE||(LA113_2>=GT && LA113_2<=IDIV)||(LA113_2>=INSTANCE && LA113_2<=IS)||LA113_2==LE||(LA113_2>=LET && LA113_2<=MOD)||LA113_2==NE||(LA113_2>=OR && LA113_2<=ORDER)||(LA113_2>=RETURN && LA113_2<=SATISFIES)||LA113_2==STABLE||(LA113_2>=TO && LA113_2<=TREAT)||LA113_2==UNION||LA113_2==WHERE||LA113_2==COUNT||(LA113_2>=END && LA113_2<=GROUP)||LA113_2==ONLY||LA113_2==START||(LA113_2>=AFTER && LA113_2<=BEFORE)||LA113_2==INTO||LA113_2==MODIFY||LA113_2==WITH||LA113_2==RPAREN||(LA113_2>=RBRACKET && LA113_2<=EQUAL)||LA113_2==NOTEQUAL||LA113_2==COMMA||(LA113_2>=STAR && LA113_2<=SLASH_SLASH)||LA113_2==COLON||(LA113_2>=SEMICOLON && LA113_2<=VBAR)) ) {
                    alt113=2;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 113, 2, input);

                    throw nvae;
                }
                }
                break;
            case PRECEDING_SIBLING:
                {
                int LA113_3 = input.LA(2);

                if ( (LA113_3==COLON_COLON) ) {
                    alt113=1;
                }
                else if ( (LA113_3==EOF||(LA113_3>=AND && LA113_3<=ASCENDING)||(LA113_3>=BY && LA113_3<=CASTABLE)||LA113_3==COLLATION||LA113_3==DEFAULT||(LA113_3>=DESCENDING && LA113_3<=DIV)||(LA113_3>=ELSE && LA113_3<=EMPTY)||LA113_3==EQ||LA113_3==EXCEPT||LA113_3==FOR||LA113_3==GE||(LA113_3>=GT && LA113_3<=IDIV)||(LA113_3>=INSTANCE && LA113_3<=IS)||LA113_3==LE||(LA113_3>=LET && LA113_3<=MOD)||LA113_3==NE||(LA113_3>=OR && LA113_3<=ORDER)||(LA113_3>=RETURN && LA113_3<=SATISFIES)||LA113_3==STABLE||(LA113_3>=TO && LA113_3<=TREAT)||LA113_3==UNION||LA113_3==WHERE||LA113_3==COUNT||(LA113_3>=END && LA113_3<=GROUP)||LA113_3==ONLY||LA113_3==START||(LA113_3>=AFTER && LA113_3<=BEFORE)||LA113_3==INTO||LA113_3==MODIFY||LA113_3==WITH||LA113_3==RPAREN||(LA113_3>=RBRACKET && LA113_3<=EQUAL)||LA113_3==NOTEQUAL||LA113_3==COMMA||(LA113_3>=STAR && LA113_3<=SLASH_SLASH)||LA113_3==COLON||(LA113_3>=SEMICOLON && LA113_3<=VBAR)) ) {
                    alt113=2;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 113, 3, input);

                    throw nvae;
                }
                }
                break;
            case PRECEDING:
                {
                int LA113_4 = input.LA(2);

                if ( (LA113_4==COLON_COLON) ) {
                    alt113=1;
                }
                else if ( (LA113_4==EOF||(LA113_4>=AND && LA113_4<=ASCENDING)||(LA113_4>=BY && LA113_4<=CASTABLE)||LA113_4==COLLATION||LA113_4==DEFAULT||(LA113_4>=DESCENDING && LA113_4<=DIV)||(LA113_4>=ELSE && LA113_4<=EMPTY)||LA113_4==EQ||LA113_4==EXCEPT||LA113_4==FOR||LA113_4==GE||(LA113_4>=GT && LA113_4<=IDIV)||(LA113_4>=INSTANCE && LA113_4<=IS)||LA113_4==LE||(LA113_4>=LET && LA113_4<=MOD)||LA113_4==NE||(LA113_4>=OR && LA113_4<=ORDER)||(LA113_4>=RETURN && LA113_4<=SATISFIES)||LA113_4==STABLE||(LA113_4>=TO && LA113_4<=TREAT)||LA113_4==UNION||LA113_4==WHERE||LA113_4==COUNT||(LA113_4>=END && LA113_4<=GROUP)||LA113_4==ONLY||LA113_4==START||(LA113_4>=AFTER && LA113_4<=BEFORE)||LA113_4==INTO||LA113_4==MODIFY||LA113_4==WITH||LA113_4==RPAREN||(LA113_4>=RBRACKET && LA113_4<=EQUAL)||LA113_4==NOTEQUAL||LA113_4==COMMA||(LA113_4>=STAR && LA113_4<=SLASH_SLASH)||LA113_4==COLON||(LA113_4>=SEMICOLON && LA113_4<=VBAR)) ) {
                    alt113=2;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 113, 4, input);

                    throw nvae;
                }
                }
                break;
            case ANCESTOR_OR_SELF:
                {
                int LA113_5 = input.LA(2);

                if ( (LA113_5==COLON_COLON) ) {
                    alt113=1;
                }
                else if ( (LA113_5==EOF||(LA113_5>=AND && LA113_5<=ASCENDING)||(LA113_5>=BY && LA113_5<=CASTABLE)||LA113_5==COLLATION||LA113_5==DEFAULT||(LA113_5>=DESCENDING && LA113_5<=DIV)||(LA113_5>=ELSE && LA113_5<=EMPTY)||LA113_5==EQ||LA113_5==EXCEPT||LA113_5==FOR||LA113_5==GE||(LA113_5>=GT && LA113_5<=IDIV)||(LA113_5>=INSTANCE && LA113_5<=IS)||LA113_5==LE||(LA113_5>=LET && LA113_5<=MOD)||LA113_5==NE||(LA113_5>=OR && LA113_5<=ORDER)||(LA113_5>=RETURN && LA113_5<=SATISFIES)||LA113_5==STABLE||(LA113_5>=TO && LA113_5<=TREAT)||LA113_5==UNION||LA113_5==WHERE||LA113_5==COUNT||(LA113_5>=END && LA113_5<=GROUP)||LA113_5==ONLY||LA113_5==START||(LA113_5>=AFTER && LA113_5<=BEFORE)||LA113_5==INTO||LA113_5==MODIFY||LA113_5==WITH||LA113_5==RPAREN||(LA113_5>=RBRACKET && LA113_5<=EQUAL)||LA113_5==NOTEQUAL||LA113_5==COMMA||(LA113_5>=STAR && LA113_5<=SLASH_SLASH)||LA113_5==COLON||(LA113_5>=SEMICOLON && LA113_5<=VBAR)) ) {
                    alt113=2;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 113, 5, input);

                    throw nvae;
                }
                }
                break;
            case DOT_DOT:
                {
                alt113=1;
                }
                break;
            case AND:
            case AS:
            case ASCENDING:
            case AT:
            case ATTRIBUTE:
            case BASE_URI:
            case BOUNDARY_SPACE:
            case BY:
            case CASE:
            case CAST:
            case CASTABLE:
            case CHILD:
            case COLLATION:
            case COMMENT:
            case CONSTRUCTION:
            case COPY_NAMESPACES:
            case DECLARE:
            case DEFAULT:
            case DESCENDANT:
            case DESCENDANT_OR_SELF:
            case DESCENDING:
            case DIV:
            case DOCUMENT:
            case DOCUMENT_NODE:
            case ELEMENT:
            case ELSE:
            case EMPTY:
            case EMPTY_SEQUENCE:
            case ENCODING:
            case EQ:
            case EVERY:
            case EXCEPT:
            case EXTERNAL:
            case FOLLOWING:
            case FOLLOWING_SIBLING:
            case FOR:
            case FUNCTION:
            case GE:
            case GREATEST:
            case GT:
            case IDIV:
            case IF:
            case IMPORT:
            case IN:
            case INHERIT:
            case INSTANCE:
            case INTERSECT:
            case IS:
            case ITEM:
            case LAX:
            case LE:
            case LEAST:
            case LET:
            case LT:
            case MOD:
            case MODULE:
            case NAMESPACE:
            case NE:
            case NO_INHERIT:
            case NO_PRESERVE:
            case NODE:
            case OF:
            case OPTION:
            case OR:
            case ORDER:
            case ORDERED:
            case ORDERING:
            case PRESERVE:
            case PROCESSING_INSTRUCTION:
            case RETURN:
            case SATISFIES:
            case SCHEMA:
            case SCHEMA_ATTRIBUTE:
            case SCHEMA_ELEMENT:
            case SELF:
            case SOME:
            case STABLE:
            case STRICT:
            case STRIP:
            case TEXT:
            case THEN:
            case TO:
            case TREAT:
            case TYPESWITCH:
            case UNION:
            case UNORDERED:
            case VALIDATE:
            case VARIABLE:
            case VERSION:
            case WHERE:
            case XQUERY:
            case CATCH:
            case CONTEXT:
            case COUNT:
            case DECIMAL_FORMAT:
            case DECIMAL_SEPARATOR:
            case DIGIT:
            case END:
            case GROUP:
            case GROUPING_SEPARATOR:
            case INFINITY:
            case MINUS_SIGN:
            case NAMESPACE_NODE:
            case NAN:
            case NEXT:
            case ONLY:
            case OUTER:
            case PATTERN_SEPARATOR:
            case PERCENT:
            case PER_MILLE:
            case PREVIOUS:
            case SLIDING:
            case START:
            case TRY:
            case TUMBLING:
            case WHEN:
            case WINDOW:
            case ZERO_DIGIT:
            case AFTER:
            case BEFORE:
            case COPY:
            case DELETE:
            case FIRST:
            case INSERT:
            case INTO:
            case LAST:
            case MODIFY:
            case NODES:
            case RENAME:
            case REPLACE:
            case REVALIDATION:
            case SKIP:
            case UPDATING:
            case VALUE:
            case WITH:
            case BLOCK:
            case CONSTANT:
            case EXIT:
            case SEQUENTIAL:
            case SET:
            case SIMPLE:
            case WHILE:
            case EVAL:
            case USING:
            case APPEND_ONLY:
            case AUTOMATICALLY:
            case CHECK:
            case COLLECTION:
            case CONSTRAINT:
            case CONST:
            case EQUALITY:
            case FOREACH:
            case FOREIGN:
            case FROM:
            case INDEX:
            case INTEGRITY:
            case KEY:
            case MAINTAINED:
            case MUTABLE:
            case NON:
            case ON:
            case QUEUE:
            case RANGE:
            case READ_ONLY:
            case UNIQUE:
            case BINARY:
            case PRIVATE:
            case AMP_ER:
            case APOS_ER:
            case QUOT_ER:
            case STAR:
            case ATTR_SIGN:
            case L_NCName:
            case EXPLICITLY:
                {
                alt113=2;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 113, 0, input);

                throw nvae;
            }

            switch (alt113) {
                case 1 :
                    // XQueryParser.g:685:12: p_ReverseStep
                    {
                    pushFollow(FOLLOW_p_ReverseStep_in_p_AxisStep6128);
                    p_ReverseStep271=p_ReverseStep();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, p_ReverseStep271.getTree());

                    }
                    break;
                case 2 :
                    // XQueryParser.g:685:28: p_ForwardStep
                    {
                    pushFollow(FOLLOW_p_ForwardStep_in_p_AxisStep6132);
                    p_ForwardStep272=p_ForwardStep();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, p_ForwardStep272.getTree());

                    }
                    break;

            }

            pushFollow(FOLLOW_p_PredicateList_in_p_AxisStep6135);
            p_PredicateList273=p_PredicateList();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, p_PredicateList273.getTree());

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (XQDTCommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (XQDTCommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "p_AxisStep"

    public static class p_ForwardStep_return extends ParserRuleReturnScope {
        XQDTCommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "p_ForwardStep"
    // XQueryParser.g:689:1: p_ForwardStep : ( ( p_ForwardAxis p_NodeTest ) | p_AbbrevForwardStep );
    public final XQueryParser.p_ForwardStep_return p_ForwardStep() throws RecognitionException {
        XQueryParser.p_ForwardStep_return retval = new XQueryParser.p_ForwardStep_return();
        retval.start = input.LT(1);

        XQDTCommonTree root_0 = null;

        XQueryParser.p_ForwardAxis_return p_ForwardAxis274 = null;

        XQueryParser.p_NodeTest_return p_NodeTest275 = null;

        XQueryParser.p_AbbrevForwardStep_return p_AbbrevForwardStep276 = null;



        try {
            // XQueryParser.g:690:9: ( ( p_ForwardAxis p_NodeTest ) | p_AbbrevForwardStep )
            int alt114=2;
            alt114 = dfa114.predict(input);
            switch (alt114) {
                case 1 :
                    // XQueryParser.g:690:11: ( p_ForwardAxis p_NodeTest )
                    {
                    root_0 = (XQDTCommonTree)adaptor.nil();

                    // XQueryParser.g:690:11: ( p_ForwardAxis p_NodeTest )
                    // XQueryParser.g:690:12: p_ForwardAxis p_NodeTest
                    {
                    pushFollow(FOLLOW_p_ForwardAxis_in_p_ForwardStep6162);
                    p_ForwardAxis274=p_ForwardAxis();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, p_ForwardAxis274.getTree());
                    pushFollow(FOLLOW_p_NodeTest_in_p_ForwardStep6164);
                    p_NodeTest275=p_NodeTest();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, p_NodeTest275.getTree());

                    }


                    }
                    break;
                case 2 :
                    // XQueryParser.g:690:40: p_AbbrevForwardStep
                    {
                    root_0 = (XQDTCommonTree)adaptor.nil();

                    pushFollow(FOLLOW_p_AbbrevForwardStep_in_p_ForwardStep6169);
                    p_AbbrevForwardStep276=p_AbbrevForwardStep();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, p_AbbrevForwardStep276.getTree());

                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (XQDTCommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (XQDTCommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "p_ForwardStep"

    public static class p_ForwardAxis_return extends ParserRuleReturnScope {
        XQDTCommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "p_ForwardAxis"
    // XQueryParser.g:694:1: p_ForwardAxis : ( CHILD COLON_COLON | DESCENDANT COLON_COLON | ATTRIBUTE COLON_COLON | SELF COLON_COLON | DESCENDANT_OR_SELF COLON_COLON | FOLLOWING_SIBLING COLON_COLON | FOLLOWING COLON_COLON );
    public final XQueryParser.p_ForwardAxis_return p_ForwardAxis() throws RecognitionException {
        XQueryParser.p_ForwardAxis_return retval = new XQueryParser.p_ForwardAxis_return();
        retval.start = input.LT(1);

        XQDTCommonTree root_0 = null;

        CommonToken CHILD277=null;
        CommonToken COLON_COLON278=null;
        CommonToken DESCENDANT279=null;
        CommonToken COLON_COLON280=null;
        CommonToken ATTRIBUTE281=null;
        CommonToken COLON_COLON282=null;
        CommonToken SELF283=null;
        CommonToken COLON_COLON284=null;
        CommonToken DESCENDANT_OR_SELF285=null;
        CommonToken COLON_COLON286=null;
        CommonToken FOLLOWING_SIBLING287=null;
        CommonToken COLON_COLON288=null;
        CommonToken FOLLOWING289=null;
        CommonToken COLON_COLON290=null;

        XQDTCommonTree CHILD277_tree=null;
        XQDTCommonTree COLON_COLON278_tree=null;
        XQDTCommonTree DESCENDANT279_tree=null;
        XQDTCommonTree COLON_COLON280_tree=null;
        XQDTCommonTree ATTRIBUTE281_tree=null;
        XQDTCommonTree COLON_COLON282_tree=null;
        XQDTCommonTree SELF283_tree=null;
        XQDTCommonTree COLON_COLON284_tree=null;
        XQDTCommonTree DESCENDANT_OR_SELF285_tree=null;
        XQDTCommonTree COLON_COLON286_tree=null;
        XQDTCommonTree FOLLOWING_SIBLING287_tree=null;
        XQDTCommonTree COLON_COLON288_tree=null;
        XQDTCommonTree FOLLOWING289_tree=null;
        XQDTCommonTree COLON_COLON290_tree=null;

        try {
            // XQueryParser.g:695:9: ( CHILD COLON_COLON | DESCENDANT COLON_COLON | ATTRIBUTE COLON_COLON | SELF COLON_COLON | DESCENDANT_OR_SELF COLON_COLON | FOLLOWING_SIBLING COLON_COLON | FOLLOWING COLON_COLON )
            int alt115=7;
            switch ( input.LA(1) ) {
            case CHILD:
                {
                alt115=1;
                }
                break;
            case DESCENDANT:
                {
                alt115=2;
                }
                break;
            case ATTRIBUTE:
                {
                alt115=3;
                }
                break;
            case SELF:
                {
                alt115=4;
                }
                break;
            case DESCENDANT_OR_SELF:
                {
                alt115=5;
                }
                break;
            case FOLLOWING_SIBLING:
                {
                alt115=6;
                }
                break;
            case FOLLOWING:
                {
                alt115=7;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 115, 0, input);

                throw nvae;
            }

            switch (alt115) {
                case 1 :
                    // XQueryParser.g:695:11: CHILD COLON_COLON
                    {
                    root_0 = (XQDTCommonTree)adaptor.nil();

                    CHILD277=(CommonToken)match(input,CHILD,FOLLOW_CHILD_in_p_ForwardAxis6195); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    CHILD277_tree = (XQDTCommonTree)adaptor.create(CHILD277);
                    adaptor.addChild(root_0, CHILD277_tree);
                    }
                    COLON_COLON278=(CommonToken)match(input,COLON_COLON,FOLLOW_COLON_COLON_in_p_ForwardAxis6197); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    COLON_COLON278_tree = (XQDTCommonTree)adaptor.create(COLON_COLON278);
                    adaptor.addChild(root_0, COLON_COLON278_tree);
                    }

                    }
                    break;
                case 2 :
                    // XQueryParser.g:696:11: DESCENDANT COLON_COLON
                    {
                    root_0 = (XQDTCommonTree)adaptor.nil();

                    DESCENDANT279=(CommonToken)match(input,DESCENDANT,FOLLOW_DESCENDANT_in_p_ForwardAxis6209); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    DESCENDANT279_tree = (XQDTCommonTree)adaptor.create(DESCENDANT279);
                    adaptor.addChild(root_0, DESCENDANT279_tree);
                    }
                    COLON_COLON280=(CommonToken)match(input,COLON_COLON,FOLLOW_COLON_COLON_in_p_ForwardAxis6211); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    COLON_COLON280_tree = (XQDTCommonTree)adaptor.create(COLON_COLON280);
                    adaptor.addChild(root_0, COLON_COLON280_tree);
                    }

                    }
                    break;
                case 3 :
                    // XQueryParser.g:697:11: ATTRIBUTE COLON_COLON
                    {
                    root_0 = (XQDTCommonTree)adaptor.nil();

                    ATTRIBUTE281=(CommonToken)match(input,ATTRIBUTE,FOLLOW_ATTRIBUTE_in_p_ForwardAxis6223); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    ATTRIBUTE281_tree = (XQDTCommonTree)adaptor.create(ATTRIBUTE281);
                    adaptor.addChild(root_0, ATTRIBUTE281_tree);
                    }
                    COLON_COLON282=(CommonToken)match(input,COLON_COLON,FOLLOW_COLON_COLON_in_p_ForwardAxis6225); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    COLON_COLON282_tree = (XQDTCommonTree)adaptor.create(COLON_COLON282);
                    adaptor.addChild(root_0, COLON_COLON282_tree);
                    }

                    }
                    break;
                case 4 :
                    // XQueryParser.g:698:11: SELF COLON_COLON
                    {
                    root_0 = (XQDTCommonTree)adaptor.nil();

                    SELF283=(CommonToken)match(input,SELF,FOLLOW_SELF_in_p_ForwardAxis6237); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    SELF283_tree = (XQDTCommonTree)adaptor.create(SELF283);
                    adaptor.addChild(root_0, SELF283_tree);
                    }
                    COLON_COLON284=(CommonToken)match(input,COLON_COLON,FOLLOW_COLON_COLON_in_p_ForwardAxis6239); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    COLON_COLON284_tree = (XQDTCommonTree)adaptor.create(COLON_COLON284);
                    adaptor.addChild(root_0, COLON_COLON284_tree);
                    }

                    }
                    break;
                case 5 :
                    // XQueryParser.g:699:11: DESCENDANT_OR_SELF COLON_COLON
                    {
                    root_0 = (XQDTCommonTree)adaptor.nil();

                    DESCENDANT_OR_SELF285=(CommonToken)match(input,DESCENDANT_OR_SELF,FOLLOW_DESCENDANT_OR_SELF_in_p_ForwardAxis6251); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    DESCENDANT_OR_SELF285_tree = (XQDTCommonTree)adaptor.create(DESCENDANT_OR_SELF285);
                    adaptor.addChild(root_0, DESCENDANT_OR_SELF285_tree);
                    }
                    COLON_COLON286=(CommonToken)match(input,COLON_COLON,FOLLOW_COLON_COLON_in_p_ForwardAxis6253); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    COLON_COLON286_tree = (XQDTCommonTree)adaptor.create(COLON_COLON286);
                    adaptor.addChild(root_0, COLON_COLON286_tree);
                    }

                    }
                    break;
                case 6 :
                    // XQueryParser.g:700:11: FOLLOWING_SIBLING COLON_COLON
                    {
                    root_0 = (XQDTCommonTree)adaptor.nil();

                    FOLLOWING_SIBLING287=(CommonToken)match(input,FOLLOWING_SIBLING,FOLLOW_FOLLOWING_SIBLING_in_p_ForwardAxis6265); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    FOLLOWING_SIBLING287_tree = (XQDTCommonTree)adaptor.create(FOLLOWING_SIBLING287);
                    adaptor.addChild(root_0, FOLLOWING_SIBLING287_tree);
                    }
                    COLON_COLON288=(CommonToken)match(input,COLON_COLON,FOLLOW_COLON_COLON_in_p_ForwardAxis6267); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    COLON_COLON288_tree = (XQDTCommonTree)adaptor.create(COLON_COLON288);
                    adaptor.addChild(root_0, COLON_COLON288_tree);
                    }

                    }
                    break;
                case 7 :
                    // XQueryParser.g:701:11: FOLLOWING COLON_COLON
                    {
                    root_0 = (XQDTCommonTree)adaptor.nil();

                    FOLLOWING289=(CommonToken)match(input,FOLLOWING,FOLLOW_FOLLOWING_in_p_ForwardAxis6279); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    FOLLOWING289_tree = (XQDTCommonTree)adaptor.create(FOLLOWING289);
                    adaptor.addChild(root_0, FOLLOWING289_tree);
                    }
                    COLON_COLON290=(CommonToken)match(input,COLON_COLON,FOLLOW_COLON_COLON_in_p_ForwardAxis6281); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    COLON_COLON290_tree = (XQDTCommonTree)adaptor.create(COLON_COLON290);
                    adaptor.addChild(root_0, COLON_COLON290_tree);
                    }

                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (XQDTCommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (XQDTCommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "p_ForwardAxis"

    public static class p_AbbrevForwardStep_return extends ParserRuleReturnScope {
        XQDTCommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "p_AbbrevForwardStep"
    // XQueryParser.g:705:1: p_AbbrevForwardStep : ( ATTR_SIGN )? p_NodeTest ;
    public final XQueryParser.p_AbbrevForwardStep_return p_AbbrevForwardStep() throws RecognitionException {
        XQueryParser.p_AbbrevForwardStep_return retval = new XQueryParser.p_AbbrevForwardStep_return();
        retval.start = input.LT(1);

        XQDTCommonTree root_0 = null;

        CommonToken ATTR_SIGN291=null;
        XQueryParser.p_NodeTest_return p_NodeTest292 = null;


        XQDTCommonTree ATTR_SIGN291_tree=null;

        try {
            // XQueryParser.g:706:9: ( ( ATTR_SIGN )? p_NodeTest )
            // XQueryParser.g:706:11: ( ATTR_SIGN )? p_NodeTest
            {
            root_0 = (XQDTCommonTree)adaptor.nil();

            // XQueryParser.g:706:11: ( ATTR_SIGN )?
            int alt116=2;
            int LA116_0 = input.LA(1);

            if ( (LA116_0==ATTR_SIGN) ) {
                alt116=1;
            }
            switch (alt116) {
                case 1 :
                    // XQueryParser.g:706:11: ATTR_SIGN
                    {
                    ATTR_SIGN291=(CommonToken)match(input,ATTR_SIGN,FOLLOW_ATTR_SIGN_in_p_AbbrevForwardStep6307); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    ATTR_SIGN291_tree = (XQDTCommonTree)adaptor.create(ATTR_SIGN291);
                    adaptor.addChild(root_0, ATTR_SIGN291_tree);
                    }

                    }
                    break;

            }

            pushFollow(FOLLOW_p_NodeTest_in_p_AbbrevForwardStep6310);
            p_NodeTest292=p_NodeTest();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, p_NodeTest292.getTree());

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (XQDTCommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (XQDTCommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "p_AbbrevForwardStep"

    public static class p_ReverseStep_return extends ParserRuleReturnScope {
        XQDTCommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "p_ReverseStep"
    // XQueryParser.g:710:1: p_ReverseStep : ( ( p_ReverseAxis p_NodeTest ) | p_AbbrevReverseStep );
    public final XQueryParser.p_ReverseStep_return p_ReverseStep() throws RecognitionException {
        XQueryParser.p_ReverseStep_return retval = new XQueryParser.p_ReverseStep_return();
        retval.start = input.LT(1);

        XQDTCommonTree root_0 = null;

        XQueryParser.p_ReverseAxis_return p_ReverseAxis293 = null;

        XQueryParser.p_NodeTest_return p_NodeTest294 = null;

        XQueryParser.p_AbbrevReverseStep_return p_AbbrevReverseStep295 = null;



        try {
            // XQueryParser.g:711:9: ( ( p_ReverseAxis p_NodeTest ) | p_AbbrevReverseStep )
            int alt117=2;
            int LA117_0 = input.LA(1);

            if ( ((LA117_0>=ANCESTOR && LA117_0<=ANCESTOR_OR_SELF)||(LA117_0>=PARENT && LA117_0<=PRECEDING_SIBLING)) ) {
                alt117=1;
            }
            else if ( (LA117_0==DOT_DOT) ) {
                alt117=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 117, 0, input);

                throw nvae;
            }
            switch (alt117) {
                case 1 :
                    // XQueryParser.g:711:11: ( p_ReverseAxis p_NodeTest )
                    {
                    root_0 = (XQDTCommonTree)adaptor.nil();

                    // XQueryParser.g:711:11: ( p_ReverseAxis p_NodeTest )
                    // XQueryParser.g:711:12: p_ReverseAxis p_NodeTest
                    {
                    pushFollow(FOLLOW_p_ReverseAxis_in_p_ReverseStep6337);
                    p_ReverseAxis293=p_ReverseAxis();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, p_ReverseAxis293.getTree());
                    pushFollow(FOLLOW_p_NodeTest_in_p_ReverseStep6339);
                    p_NodeTest294=p_NodeTest();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, p_NodeTest294.getTree());

                    }


                    }
                    break;
                case 2 :
                    // XQueryParser.g:711:40: p_AbbrevReverseStep
                    {
                    root_0 = (XQDTCommonTree)adaptor.nil();

                    pushFollow(FOLLOW_p_AbbrevReverseStep_in_p_ReverseStep6344);
                    p_AbbrevReverseStep295=p_AbbrevReverseStep();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, p_AbbrevReverseStep295.getTree());

                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (XQDTCommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (XQDTCommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "p_ReverseStep"

    public static class p_ReverseAxis_return extends ParserRuleReturnScope {
        XQDTCommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "p_ReverseAxis"
    // XQueryParser.g:715:1: p_ReverseAxis : ( PARENT COLON_COLON | ANCESTOR COLON_COLON | PRECEDING_SIBLING COLON_COLON | PRECEDING COLON_COLON | ANCESTOR_OR_SELF COLON_COLON );
    public final XQueryParser.p_ReverseAxis_return p_ReverseAxis() throws RecognitionException {
        XQueryParser.p_ReverseAxis_return retval = new XQueryParser.p_ReverseAxis_return();
        retval.start = input.LT(1);

        XQDTCommonTree root_0 = null;

        CommonToken PARENT296=null;
        CommonToken COLON_COLON297=null;
        CommonToken ANCESTOR298=null;
        CommonToken COLON_COLON299=null;
        CommonToken PRECEDING_SIBLING300=null;
        CommonToken COLON_COLON301=null;
        CommonToken PRECEDING302=null;
        CommonToken COLON_COLON303=null;
        CommonToken ANCESTOR_OR_SELF304=null;
        CommonToken COLON_COLON305=null;

        XQDTCommonTree PARENT296_tree=null;
        XQDTCommonTree COLON_COLON297_tree=null;
        XQDTCommonTree ANCESTOR298_tree=null;
        XQDTCommonTree COLON_COLON299_tree=null;
        XQDTCommonTree PRECEDING_SIBLING300_tree=null;
        XQDTCommonTree COLON_COLON301_tree=null;
        XQDTCommonTree PRECEDING302_tree=null;
        XQDTCommonTree COLON_COLON303_tree=null;
        XQDTCommonTree ANCESTOR_OR_SELF304_tree=null;
        XQDTCommonTree COLON_COLON305_tree=null;

        try {
            // XQueryParser.g:716:9: ( PARENT COLON_COLON | ANCESTOR COLON_COLON | PRECEDING_SIBLING COLON_COLON | PRECEDING COLON_COLON | ANCESTOR_OR_SELF COLON_COLON )
            int alt118=5;
            switch ( input.LA(1) ) {
            case PARENT:
                {
                alt118=1;
                }
                break;
            case ANCESTOR:
                {
                alt118=2;
                }
                break;
            case PRECEDING_SIBLING:
                {
                alt118=3;
                }
                break;
            case PRECEDING:
                {
                alt118=4;
                }
                break;
            case ANCESTOR_OR_SELF:
                {
                alt118=5;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 118, 0, input);

                throw nvae;
            }

            switch (alt118) {
                case 1 :
                    // XQueryParser.g:716:11: PARENT COLON_COLON
                    {
                    root_0 = (XQDTCommonTree)adaptor.nil();

                    PARENT296=(CommonToken)match(input,PARENT,FOLLOW_PARENT_in_p_ReverseAxis6370); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    PARENT296_tree = (XQDTCommonTree)adaptor.create(PARENT296);
                    adaptor.addChild(root_0, PARENT296_tree);
                    }
                    COLON_COLON297=(CommonToken)match(input,COLON_COLON,FOLLOW_COLON_COLON_in_p_ReverseAxis6372); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    COLON_COLON297_tree = (XQDTCommonTree)adaptor.create(COLON_COLON297);
                    adaptor.addChild(root_0, COLON_COLON297_tree);
                    }

                    }
                    break;
                case 2 :
                    // XQueryParser.g:717:11: ANCESTOR COLON_COLON
                    {
                    root_0 = (XQDTCommonTree)adaptor.nil();

                    ANCESTOR298=(CommonToken)match(input,ANCESTOR,FOLLOW_ANCESTOR_in_p_ReverseAxis6384); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    ANCESTOR298_tree = (XQDTCommonTree)adaptor.create(ANCESTOR298);
                    adaptor.addChild(root_0, ANCESTOR298_tree);
                    }
                    COLON_COLON299=(CommonToken)match(input,COLON_COLON,FOLLOW_COLON_COLON_in_p_ReverseAxis6386); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    COLON_COLON299_tree = (XQDTCommonTree)adaptor.create(COLON_COLON299);
                    adaptor.addChild(root_0, COLON_COLON299_tree);
                    }

                    }
                    break;
                case 3 :
                    // XQueryParser.g:718:11: PRECEDING_SIBLING COLON_COLON
                    {
                    root_0 = (XQDTCommonTree)adaptor.nil();

                    PRECEDING_SIBLING300=(CommonToken)match(input,PRECEDING_SIBLING,FOLLOW_PRECEDING_SIBLING_in_p_ReverseAxis6398); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    PRECEDING_SIBLING300_tree = (XQDTCommonTree)adaptor.create(PRECEDING_SIBLING300);
                    adaptor.addChild(root_0, PRECEDING_SIBLING300_tree);
                    }
                    COLON_COLON301=(CommonToken)match(input,COLON_COLON,FOLLOW_COLON_COLON_in_p_ReverseAxis6400); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    COLON_COLON301_tree = (XQDTCommonTree)adaptor.create(COLON_COLON301);
                    adaptor.addChild(root_0, COLON_COLON301_tree);
                    }

                    }
                    break;
                case 4 :
                    // XQueryParser.g:719:11: PRECEDING COLON_COLON
                    {
                    root_0 = (XQDTCommonTree)adaptor.nil();

                    PRECEDING302=(CommonToken)match(input,PRECEDING,FOLLOW_PRECEDING_in_p_ReverseAxis6412); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    PRECEDING302_tree = (XQDTCommonTree)adaptor.create(PRECEDING302);
                    adaptor.addChild(root_0, PRECEDING302_tree);
                    }
                    COLON_COLON303=(CommonToken)match(input,COLON_COLON,FOLLOW_COLON_COLON_in_p_ReverseAxis6414); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    COLON_COLON303_tree = (XQDTCommonTree)adaptor.create(COLON_COLON303);
                    adaptor.addChild(root_0, COLON_COLON303_tree);
                    }

                    }
                    break;
                case 5 :
                    // XQueryParser.g:720:11: ANCESTOR_OR_SELF COLON_COLON
                    {
                    root_0 = (XQDTCommonTree)adaptor.nil();

                    ANCESTOR_OR_SELF304=(CommonToken)match(input,ANCESTOR_OR_SELF,FOLLOW_ANCESTOR_OR_SELF_in_p_ReverseAxis6426); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    ANCESTOR_OR_SELF304_tree = (XQDTCommonTree)adaptor.create(ANCESTOR_OR_SELF304);
                    adaptor.addChild(root_0, ANCESTOR_OR_SELF304_tree);
                    }
                    COLON_COLON305=(CommonToken)match(input,COLON_COLON,FOLLOW_COLON_COLON_in_p_ReverseAxis6428); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    COLON_COLON305_tree = (XQDTCommonTree)adaptor.create(COLON_COLON305);
                    adaptor.addChild(root_0, COLON_COLON305_tree);
                    }

                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (XQDTCommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (XQDTCommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "p_ReverseAxis"

    public static class p_AbbrevReverseStep_return extends ParserRuleReturnScope {
        XQDTCommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "p_AbbrevReverseStep"
    // XQueryParser.g:724:1: p_AbbrevReverseStep : DOT_DOT ;
    public final XQueryParser.p_AbbrevReverseStep_return p_AbbrevReverseStep() throws RecognitionException {
        XQueryParser.p_AbbrevReverseStep_return retval = new XQueryParser.p_AbbrevReverseStep_return();
        retval.start = input.LT(1);

        XQDTCommonTree root_0 = null;

        CommonToken DOT_DOT306=null;

        XQDTCommonTree DOT_DOT306_tree=null;

        try {
            // XQueryParser.g:725:9: ( DOT_DOT )
            // XQueryParser.g:725:11: DOT_DOT
            {
            root_0 = (XQDTCommonTree)adaptor.nil();

            DOT_DOT306=(CommonToken)match(input,DOT_DOT,FOLLOW_DOT_DOT_in_p_AbbrevReverseStep6454); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            DOT_DOT306_tree = (XQDTCommonTree)adaptor.create(DOT_DOT306);
            adaptor.addChild(root_0, DOT_DOT306_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (XQDTCommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (XQDTCommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "p_AbbrevReverseStep"

    public static class p_NodeTest_return extends ParserRuleReturnScope {
        XQDTCommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "p_NodeTest"
    // XQueryParser.g:729:1: p_NodeTest : ( p_KindTest | p_NameTest );
    public final XQueryParser.p_NodeTest_return p_NodeTest() throws RecognitionException {
        XQueryParser.p_NodeTest_return retval = new XQueryParser.p_NodeTest_return();
        retval.start = input.LT(1);

        XQDTCommonTree root_0 = null;

        XQueryParser.p_KindTest_return p_KindTest307 = null;

        XQueryParser.p_NameTest_return p_NameTest308 = null;



        try {
            // XQueryParser.g:730:9: ( p_KindTest | p_NameTest )
            int alt119=2;
            alt119 = dfa119.predict(input);
            switch (alt119) {
                case 1 :
                    // XQueryParser.g:730:11: p_KindTest
                    {
                    root_0 = (XQDTCommonTree)adaptor.nil();

                    pushFollow(FOLLOW_p_KindTest_in_p_NodeTest6480);
                    p_KindTest307=p_KindTest();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, p_KindTest307.getTree());

                    }
                    break;
                case 2 :
                    // XQueryParser.g:730:24: p_NameTest
                    {
                    root_0 = (XQDTCommonTree)adaptor.nil();

                    pushFollow(FOLLOW_p_NameTest_in_p_NodeTest6484);
                    p_NameTest308=p_NameTest();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, p_NameTest308.getTree());

                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (XQDTCommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (XQDTCommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "p_NodeTest"

    public static class p_NameTest_return extends ParserRuleReturnScope {
        XQDTCommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "p_NameTest"
    // XQueryParser.g:734:1: p_NameTest : ( p_QName | p_Wildcard );
    public final XQueryParser.p_NameTest_return p_NameTest() throws RecognitionException {
        XQueryParser.p_NameTest_return retval = new XQueryParser.p_NameTest_return();
        retval.start = input.LT(1);

        XQDTCommonTree root_0 = null;

        XQueryParser.p_QName_return p_QName309 = null;

        XQueryParser.p_Wildcard_return p_Wildcard310 = null;



        try {
            // XQueryParser.g:735:9: ( p_QName | p_Wildcard )
            int alt120=2;
            int LA120_0 = input.LA(1);

            if ( ((LA120_0>=ANCESTOR && LA120_0<=EXIT)||(LA120_0>=SEQUENTIAL && LA120_0<=MAINTAINED)||(LA120_0>=MUTABLE && LA120_0<=QUOT_ER)||LA120_0==L_NCName||LA120_0==EXPLICITLY) ) {
                int LA120_1 = input.LA(2);

                if ( (LA120_1==COLON) ) {
                    int LA120_3 = input.LA(3);

                    if ( (LA120_3==STAR) ) {
                        alt120=2;
                    }
                    else if ( ((LA120_3>=ANCESTOR && LA120_3<=EXIT)||(LA120_3>=SEQUENTIAL && LA120_3<=MAINTAINED)||(LA120_3>=MUTABLE && LA120_3<=QUOT_ER)||LA120_3==L_NCName||LA120_3==EXPLICITLY) ) {
                        alt120=1;
                    }
                    else {
                        if (state.backtracking>0) {state.failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("", 120, 3, input);

                        throw nvae;
                    }
                }
                else if ( (LA120_1==EOF||(LA120_1>=AND && LA120_1<=ASCENDING)||(LA120_1>=BY && LA120_1<=CASTABLE)||LA120_1==COLLATION||LA120_1==DEFAULT||(LA120_1>=DESCENDING && LA120_1<=DIV)||(LA120_1>=ELSE && LA120_1<=EMPTY)||LA120_1==EQ||LA120_1==EXCEPT||LA120_1==FOR||LA120_1==GE||(LA120_1>=GT && LA120_1<=IDIV)||(LA120_1>=INSTANCE && LA120_1<=IS)||LA120_1==LE||(LA120_1>=LET && LA120_1<=MOD)||LA120_1==NE||(LA120_1>=OR && LA120_1<=ORDER)||(LA120_1>=RETURN && LA120_1<=SATISFIES)||LA120_1==STABLE||(LA120_1>=TO && LA120_1<=TREAT)||LA120_1==UNION||LA120_1==WHERE||LA120_1==COUNT||(LA120_1>=END && LA120_1<=GROUP)||LA120_1==ONLY||LA120_1==START||(LA120_1>=AFTER && LA120_1<=BEFORE)||LA120_1==INTO||LA120_1==MODIFY||LA120_1==WITH||(LA120_1>=LPAREN && LA120_1<=RPAREN)||(LA120_1>=LBRACKET && LA120_1<=EQUAL)||LA120_1==NOTEQUAL||LA120_1==COMMA||(LA120_1>=STAR && LA120_1<=SLASH_SLASH)||(LA120_1>=SEMICOLON && LA120_1<=VBAR)) ) {
                    alt120=1;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 120, 1, input);

                    throw nvae;
                }
            }
            else if ( (LA120_0==STAR) ) {
                alt120=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 120, 0, input);

                throw nvae;
            }
            switch (alt120) {
                case 1 :
                    // XQueryParser.g:735:11: p_QName
                    {
                    root_0 = (XQDTCommonTree)adaptor.nil();

                    pushFollow(FOLLOW_p_QName_in_p_NameTest6510);
                    p_QName309=p_QName();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, p_QName309.getTree());

                    }
                    break;
                case 2 :
                    // XQueryParser.g:735:21: p_Wildcard
                    {
                    root_0 = (XQDTCommonTree)adaptor.nil();

                    pushFollow(FOLLOW_p_Wildcard_in_p_NameTest6514);
                    p_Wildcard310=p_Wildcard();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, p_Wildcard310.getTree());

                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (XQDTCommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (XQDTCommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "p_NameTest"

    public static class p_Wildcard_return extends ParserRuleReturnScope {
        XQDTCommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "p_Wildcard"
    // XQueryParser.g:739:1: p_Wildcard : ( STAR ( COLON p_NCName )? | ( p_NCName COLON STAR ) );
    public final XQueryParser.p_Wildcard_return p_Wildcard() throws RecognitionException {
        XQueryParser.p_Wildcard_return retval = new XQueryParser.p_Wildcard_return();
        retval.start = input.LT(1);

        XQDTCommonTree root_0 = null;

        CommonToken STAR311=null;
        CommonToken COLON312=null;
        CommonToken COLON315=null;
        CommonToken STAR316=null;
        XQueryParser.p_NCName_return p_NCName313 = null;

        XQueryParser.p_NCName_return p_NCName314 = null;


        XQDTCommonTree STAR311_tree=null;
        XQDTCommonTree COLON312_tree=null;
        XQDTCommonTree COLON315_tree=null;
        XQDTCommonTree STAR316_tree=null;

        setWsExplicit(true);
        try {
            // XQueryParser.g:740:9: ( STAR ( COLON p_NCName )? | ( p_NCName COLON STAR ) )
            int alt122=2;
            int LA122_0 = input.LA(1);

            if ( (LA122_0==STAR) ) {
                alt122=1;
            }
            else if ( ((LA122_0>=ANCESTOR && LA122_0<=EXIT)||(LA122_0>=SEQUENTIAL && LA122_0<=MAINTAINED)||(LA122_0>=MUTABLE && LA122_0<=QUOT_ER)||LA122_0==L_NCName||LA122_0==EXPLICITLY) ) {
                alt122=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 122, 0, input);

                throw nvae;
            }
            switch (alt122) {
                case 1 :
                    // XQueryParser.g:740:11: STAR ( COLON p_NCName )?
                    {
                    root_0 = (XQDTCommonTree)adaptor.nil();

                    STAR311=(CommonToken)match(input,STAR,FOLLOW_STAR_in_p_Wildcard6544); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    STAR311_tree = (XQDTCommonTree)adaptor.create(STAR311);
                    adaptor.addChild(root_0, STAR311_tree);
                    }
                    // XQueryParser.g:740:16: ( COLON p_NCName )?
                    int alt121=2;
                    int LA121_0 = input.LA(1);

                    if ( (LA121_0==COLON) ) {
                        alt121=1;
                    }
                    switch (alt121) {
                        case 1 :
                            // XQueryParser.g:740:17: COLON p_NCName
                            {
                            COLON312=(CommonToken)match(input,COLON,FOLLOW_COLON_in_p_Wildcard6547); if (state.failed) return retval;
                            if ( state.backtracking==0 ) {
                            COLON312_tree = (XQDTCommonTree)adaptor.create(COLON312);
                            adaptor.addChild(root_0, COLON312_tree);
                            }
                            pushFollow(FOLLOW_p_NCName_in_p_Wildcard6549);
                            p_NCName313=p_NCName();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) adaptor.addChild(root_0, p_NCName313.getTree());

                            }
                            break;

                    }


                    }
                    break;
                case 2 :
                    // XQueryParser.g:740:36: ( p_NCName COLON STAR )
                    {
                    root_0 = (XQDTCommonTree)adaptor.nil();

                    // XQueryParser.g:740:36: ( p_NCName COLON STAR )
                    // XQueryParser.g:740:37: p_NCName COLON STAR
                    {
                    pushFollow(FOLLOW_p_NCName_in_p_Wildcard6556);
                    p_NCName314=p_NCName();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, p_NCName314.getTree());
                    COLON315=(CommonToken)match(input,COLON,FOLLOW_COLON_in_p_Wildcard6558); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    COLON315_tree = (XQDTCommonTree)adaptor.create(COLON315);
                    adaptor.addChild(root_0, COLON315_tree);
                    }
                    STAR316=(CommonToken)match(input,STAR,FOLLOW_STAR_in_p_Wildcard6560); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    STAR316_tree = (XQDTCommonTree)adaptor.create(STAR316);
                    adaptor.addChild(root_0, STAR316_tree);
                    }

                    }


                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (XQDTCommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (XQDTCommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            setWsExplicit(false);
        }
        return retval;
    }
    // $ANTLR end "p_Wildcard"

    public static class p_FilterExpr_return extends ParserRuleReturnScope {
        XQDTCommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "p_FilterExpr"
    // XQueryParser.g:745:1: p_FilterExpr : p_PrimaryExpr p_PredicateList ;
    public final XQueryParser.p_FilterExpr_return p_FilterExpr() throws RecognitionException {
        XQueryParser.p_FilterExpr_return retval = new XQueryParser.p_FilterExpr_return();
        retval.start = input.LT(1);

        XQDTCommonTree root_0 = null;

        XQueryParser.p_PrimaryExpr_return p_PrimaryExpr317 = null;

        XQueryParser.p_PredicateList_return p_PredicateList318 = null;



        try {
            // XQueryParser.g:746:9: ( p_PrimaryExpr p_PredicateList )
            // XQueryParser.g:746:13: p_PrimaryExpr p_PredicateList
            {
            root_0 = (XQDTCommonTree)adaptor.nil();

            pushFollow(FOLLOW_p_PrimaryExpr_in_p_FilterExpr6601);
            p_PrimaryExpr317=p_PrimaryExpr();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, p_PrimaryExpr317.getTree());
            pushFollow(FOLLOW_p_PredicateList_in_p_FilterExpr6603);
            p_PredicateList318=p_PredicateList();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, p_PredicateList318.getTree());

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (XQDTCommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (XQDTCommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "p_FilterExpr"

    public static class p_PredicateList_return extends ParserRuleReturnScope {
        XQDTCommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "p_PredicateList"
    // XQueryParser.g:750:1: p_PredicateList : ( p_Predicate )* ;
    public final XQueryParser.p_PredicateList_return p_PredicateList() throws RecognitionException {
        XQueryParser.p_PredicateList_return retval = new XQueryParser.p_PredicateList_return();
        retval.start = input.LT(1);

        XQDTCommonTree root_0 = null;

        XQueryParser.p_Predicate_return p_Predicate319 = null;



        try {
            // XQueryParser.g:751:9: ( ( p_Predicate )* )
            // XQueryParser.g:751:13: ( p_Predicate )*
            {
            root_0 = (XQDTCommonTree)adaptor.nil();

            // XQueryParser.g:751:13: ( p_Predicate )*
            loop123:
            do {
                int alt123=2;
                int LA123_0 = input.LA(1);

                if ( (LA123_0==LSQUARE) ) {
                    alt123=1;
                }


                switch (alt123) {
            	case 1 :
            	    // XQueryParser.g:751:13: p_Predicate
            	    {
            	    pushFollow(FOLLOW_p_Predicate_in_p_PredicateList6631);
            	    p_Predicate319=p_Predicate();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, p_Predicate319.getTree());

            	    }
            	    break;

            	default :
            	    break loop123;
                }
            } while (true);


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (XQDTCommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (XQDTCommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "p_PredicateList"

    public static class p_Predicate_return extends ParserRuleReturnScope {
        XQDTCommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "p_Predicate"
    // XQueryParser.g:755:1: p_Predicate : LSQUARE pm_Expr RSQUARE ;
    public final XQueryParser.p_Predicate_return p_Predicate() throws RecognitionException {
        XQueryParser.p_Predicate_return retval = new XQueryParser.p_Predicate_return();
        retval.start = input.LT(1);

        XQDTCommonTree root_0 = null;

        CommonToken LSQUARE320=null;
        CommonToken RSQUARE322=null;
        XQueryParser.pm_Expr_return pm_Expr321 = null;


        XQDTCommonTree LSQUARE320_tree=null;
        XQDTCommonTree RSQUARE322_tree=null;

        try {
            // XQueryParser.g:756:9: ( LSQUARE pm_Expr RSQUARE )
            // XQueryParser.g:756:13: LSQUARE pm_Expr RSQUARE
            {
            root_0 = (XQDTCommonTree)adaptor.nil();

            LSQUARE320=(CommonToken)match(input,LSQUARE,FOLLOW_LSQUARE_in_p_Predicate6660); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            LSQUARE320_tree = (XQDTCommonTree)adaptor.create(LSQUARE320);
            adaptor.addChild(root_0, LSQUARE320_tree);
            }
            pushFollow(FOLLOW_pm_Expr_in_p_Predicate6662);
            pm_Expr321=pm_Expr();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, pm_Expr321.getTree());
            RSQUARE322=(CommonToken)match(input,RSQUARE,FOLLOW_RSQUARE_in_p_Predicate6664); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            RSQUARE322_tree = (XQDTCommonTree)adaptor.create(RSQUARE322);
            adaptor.addChild(root_0, RSQUARE322_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (XQDTCommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (XQDTCommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "p_Predicate"

    public static class p_PrimaryExpr_return extends ParserRuleReturnScope {
        XQDTCommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "p_PrimaryExpr"
    // XQueryParser.g:760:1: p_PrimaryExpr : ( p_Literal | p_VarRef | p_ParenthesizedExpr | p_ContextItemExpr | p_FunctionCall | p_OrderedExpr | p_UnorderedExpr | p_Constructor );
    public final XQueryParser.p_PrimaryExpr_return p_PrimaryExpr() throws RecognitionException {
        XQueryParser.p_PrimaryExpr_return retval = new XQueryParser.p_PrimaryExpr_return();
        retval.start = input.LT(1);

        XQDTCommonTree root_0 = null;

        XQueryParser.p_Literal_return p_Literal323 = null;

        XQueryParser.p_VarRef_return p_VarRef324 = null;

        XQueryParser.p_ParenthesizedExpr_return p_ParenthesizedExpr325 = null;

        XQueryParser.p_ContextItemExpr_return p_ContextItemExpr326 = null;

        XQueryParser.p_FunctionCall_return p_FunctionCall327 = null;

        XQueryParser.p_OrderedExpr_return p_OrderedExpr328 = null;

        XQueryParser.p_UnorderedExpr_return p_UnorderedExpr329 = null;

        XQueryParser.p_Constructor_return p_Constructor330 = null;



        try {
            // XQueryParser.g:761:9: ( p_Literal | p_VarRef | p_ParenthesizedExpr | p_ContextItemExpr | p_FunctionCall | p_OrderedExpr | p_UnorderedExpr | p_Constructor )
            int alt124=8;
            alt124 = dfa124.predict(input);
            switch (alt124) {
                case 1 :
                    // XQueryParser.g:761:13: p_Literal
                    {
                    root_0 = (XQDTCommonTree)adaptor.nil();

                    pushFollow(FOLLOW_p_Literal_in_p_PrimaryExpr6692);
                    p_Literal323=p_Literal();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, p_Literal323.getTree());

                    }
                    break;
                case 2 :
                    // XQueryParser.g:762:11: p_VarRef
                    {
                    root_0 = (XQDTCommonTree)adaptor.nil();

                    pushFollow(FOLLOW_p_VarRef_in_p_PrimaryExpr6704);
                    p_VarRef324=p_VarRef();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, p_VarRef324.getTree());

                    }
                    break;
                case 3 :
                    // XQueryParser.g:763:11: p_ParenthesizedExpr
                    {
                    root_0 = (XQDTCommonTree)adaptor.nil();

                    pushFollow(FOLLOW_p_ParenthesizedExpr_in_p_PrimaryExpr6716);
                    p_ParenthesizedExpr325=p_ParenthesizedExpr();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, p_ParenthesizedExpr325.getTree());

                    }
                    break;
                case 4 :
                    // XQueryParser.g:764:11: p_ContextItemExpr
                    {
                    root_0 = (XQDTCommonTree)adaptor.nil();

                    pushFollow(FOLLOW_p_ContextItemExpr_in_p_PrimaryExpr6728);
                    p_ContextItemExpr326=p_ContextItemExpr();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, p_ContextItemExpr326.getTree());

                    }
                    break;
                case 5 :
                    // XQueryParser.g:765:11: p_FunctionCall
                    {
                    root_0 = (XQDTCommonTree)adaptor.nil();

                    pushFollow(FOLLOW_p_FunctionCall_in_p_PrimaryExpr6740);
                    p_FunctionCall327=p_FunctionCall();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, p_FunctionCall327.getTree());

                    }
                    break;
                case 6 :
                    // XQueryParser.g:766:11: p_OrderedExpr
                    {
                    root_0 = (XQDTCommonTree)adaptor.nil();

                    pushFollow(FOLLOW_p_OrderedExpr_in_p_PrimaryExpr6752);
                    p_OrderedExpr328=p_OrderedExpr();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, p_OrderedExpr328.getTree());

                    }
                    break;
                case 7 :
                    // XQueryParser.g:767:11: p_UnorderedExpr
                    {
                    root_0 = (XQDTCommonTree)adaptor.nil();

                    pushFollow(FOLLOW_p_UnorderedExpr_in_p_PrimaryExpr6764);
                    p_UnorderedExpr329=p_UnorderedExpr();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, p_UnorderedExpr329.getTree());

                    }
                    break;
                case 8 :
                    // XQueryParser.g:768:11: p_Constructor
                    {
                    root_0 = (XQDTCommonTree)adaptor.nil();

                    pushFollow(FOLLOW_p_Constructor_in_p_PrimaryExpr6776);
                    p_Constructor330=p_Constructor();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, p_Constructor330.getTree());

                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (XQDTCommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (XQDTCommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "p_PrimaryExpr"

    public static class p_Literal_return extends ParserRuleReturnScope {
        XQDTCommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "p_Literal"
    // XQueryParser.g:772:1: p_Literal : ( p_NumericLiteral | p_StringLiteral );
    public final XQueryParser.p_Literal_return p_Literal() throws RecognitionException {
        XQueryParser.p_Literal_return retval = new XQueryParser.p_Literal_return();
        retval.start = input.LT(1);

        XQDTCommonTree root_0 = null;

        XQueryParser.p_NumericLiteral_return p_NumericLiteral331 = null;

        XQueryParser.p_StringLiteral_return p_StringLiteral332 = null;



        try {
            // XQueryParser.g:773:9: ( p_NumericLiteral | p_StringLiteral )
            int alt125=2;
            int LA125_0 = input.LA(1);

            if ( ((LA125_0>=L_IntegerLiteral && LA125_0<=L_DoubleLiteral)) ) {
                alt125=1;
            }
            else if ( ((LA125_0>=APOS && LA125_0<=QUOT)) ) {
                alt125=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 125, 0, input);

                throw nvae;
            }
            switch (alt125) {
                case 1 :
                    // XQueryParser.g:773:13: p_NumericLiteral
                    {
                    root_0 = (XQDTCommonTree)adaptor.nil();

                    pushFollow(FOLLOW_p_NumericLiteral_in_p_Literal6804);
                    p_NumericLiteral331=p_NumericLiteral();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, p_NumericLiteral331.getTree());

                    }
                    break;
                case 2 :
                    // XQueryParser.g:773:32: p_StringLiteral
                    {
                    root_0 = (XQDTCommonTree)adaptor.nil();

                    pushFollow(FOLLOW_p_StringLiteral_in_p_Literal6808);
                    p_StringLiteral332=p_StringLiteral();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, p_StringLiteral332.getTree());

                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (XQDTCommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (XQDTCommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "p_Literal"

    public static class p_NumericLiteral_return extends ParserRuleReturnScope {
        XQDTCommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "p_NumericLiteral"
    // XQueryParser.g:777:1: p_NumericLiteral : ( L_IntegerLiteral | L_DecimalLiteral | L_DoubleLiteral );
    public final XQueryParser.p_NumericLiteral_return p_NumericLiteral() throws RecognitionException {
        XQueryParser.p_NumericLiteral_return retval = new XQueryParser.p_NumericLiteral_return();
        retval.start = input.LT(1);

        XQDTCommonTree root_0 = null;

        CommonToken set333=null;

        XQDTCommonTree set333_tree=null;

        try {
            // XQueryParser.g:778:9: ( L_IntegerLiteral | L_DecimalLiteral | L_DoubleLiteral )
            // XQueryParser.g:
            {
            root_0 = (XQDTCommonTree)adaptor.nil();

            set333=(CommonToken)input.LT(1);
            if ( (input.LA(1)>=L_IntegerLiteral && input.LA(1)<=L_DoubleLiteral) ) {
                input.consume();
                if ( state.backtracking==0 ) adaptor.addChild(root_0, (XQDTCommonTree)adaptor.create(set333));
                state.errorRecovery=false;state.failed=false;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                MismatchedSetException mse = new MismatchedSetException(null,input);
                throw mse;
            }


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (XQDTCommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (XQDTCommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "p_NumericLiteral"

    public static class p_VarRef_return extends ParserRuleReturnScope {
        XQDTCommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "p_VarRef"
    // XQueryParser.g:782:1: p_VarRef : DOLLAR p_VarName ;
    public final XQueryParser.p_VarRef_return p_VarRef() throws RecognitionException {
        XQueryParser.p_VarRef_return retval = new XQueryParser.p_VarRef_return();
        retval.start = input.LT(1);

        XQDTCommonTree root_0 = null;

        CommonToken DOLLAR334=null;
        XQueryParser.p_VarName_return p_VarName335 = null;


        XQDTCommonTree DOLLAR334_tree=null;

        try {
            // XQueryParser.g:783:9: ( DOLLAR p_VarName )
            // XQueryParser.g:783:13: DOLLAR p_VarName
            {
            root_0 = (XQDTCommonTree)adaptor.nil();

            DOLLAR334=(CommonToken)match(input,DOLLAR,FOLLOW_DOLLAR_in_p_VarRef6880); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            DOLLAR334_tree = (XQDTCommonTree)adaptor.create(DOLLAR334);
            adaptor.addChild(root_0, DOLLAR334_tree);
            }
            pushFollow(FOLLOW_p_VarName_in_p_VarRef6882);
            p_VarName335=p_VarName();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, p_VarName335.getTree());

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (XQDTCommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (XQDTCommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "p_VarRef"

    public static class p_VarName_return extends ParserRuleReturnScope {
        XQDTCommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "p_VarName"
    // XQueryParser.g:787:1: p_VarName : p_QName ;
    public final XQueryParser.p_VarName_return p_VarName() throws RecognitionException {
        XQueryParser.p_VarName_return retval = new XQueryParser.p_VarName_return();
        retval.start = input.LT(1);

        XQDTCommonTree root_0 = null;

        XQueryParser.p_QName_return p_QName336 = null;



        try {
            // XQueryParser.g:788:9: ( p_QName )
            // XQueryParser.g:788:13: p_QName
            {
            root_0 = (XQDTCommonTree)adaptor.nil();

            pushFollow(FOLLOW_p_QName_in_p_VarName6910);
            p_QName336=p_QName();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, p_QName336.getTree());

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (XQDTCommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (XQDTCommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "p_VarName"

    public static class p_ParenthesizedExpr_return extends ParserRuleReturnScope {
        XQDTCommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "p_ParenthesizedExpr"
    // XQueryParser.g:792:1: p_ParenthesizedExpr : LPAREN ( pm_Expr )? RPAREN ;
    public final XQueryParser.p_ParenthesizedExpr_return p_ParenthesizedExpr() throws RecognitionException {
        XQueryParser.p_ParenthesizedExpr_return retval = new XQueryParser.p_ParenthesizedExpr_return();
        retval.start = input.LT(1);

        XQDTCommonTree root_0 = null;

        CommonToken LPAREN337=null;
        CommonToken RPAREN339=null;
        XQueryParser.pm_Expr_return pm_Expr338 = null;


        XQDTCommonTree LPAREN337_tree=null;
        XQDTCommonTree RPAREN339_tree=null;

        try {
            // XQueryParser.g:793:9: ( LPAREN ( pm_Expr )? RPAREN )
            // XQueryParser.g:793:13: LPAREN ( pm_Expr )? RPAREN
            {
            root_0 = (XQDTCommonTree)adaptor.nil();

            LPAREN337=(CommonToken)match(input,LPAREN,FOLLOW_LPAREN_in_p_ParenthesizedExpr6938); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            LPAREN337_tree = (XQDTCommonTree)adaptor.create(LPAREN337);
            adaptor.addChild(root_0, LPAREN337_tree);
            }
            // XQueryParser.g:793:20: ( pm_Expr )?
            int alt126=2;
            int LA126_0 = input.LA(1);

            if ( ((LA126_0>=ANCESTOR && LA126_0<=EXIT)||(LA126_0>=SEQUENTIAL && LA126_0<=MAINTAINED)||(LA126_0>=MUTABLE && LA126_0<=LPAREN)||LA126_0==DOLLAR||(LA126_0>=STAR && LA126_0<=SMALLER)||(LA126_0>=SLASH && LA126_0<=DOT_DOT)||LA126_0==ATTR_SIGN||(LA126_0>=APOS && LA126_0<=QUOT)||LA126_0==L_NCName||(LA126_0>=L_Pragma && LA126_0<=L_DoubleLiteral)||LA126_0==EXPLICITLY) ) {
                alt126=1;
            }
            switch (alt126) {
                case 1 :
                    // XQueryParser.g:793:20: pm_Expr
                    {
                    pushFollow(FOLLOW_pm_Expr_in_p_ParenthesizedExpr6940);
                    pm_Expr338=pm_Expr();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, pm_Expr338.getTree());

                    }
                    break;

            }

            RPAREN339=(CommonToken)match(input,RPAREN,FOLLOW_RPAREN_in_p_ParenthesizedExpr6943); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            RPAREN339_tree = (XQDTCommonTree)adaptor.create(RPAREN339);
            adaptor.addChild(root_0, RPAREN339_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (XQDTCommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (XQDTCommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "p_ParenthesizedExpr"

    public static class p_ContextItemExpr_return extends ParserRuleReturnScope {
        XQDTCommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "p_ContextItemExpr"
    // XQueryParser.g:797:1: p_ContextItemExpr : DOT ;
    public final XQueryParser.p_ContextItemExpr_return p_ContextItemExpr() throws RecognitionException {
        XQueryParser.p_ContextItemExpr_return retval = new XQueryParser.p_ContextItemExpr_return();
        retval.start = input.LT(1);

        XQDTCommonTree root_0 = null;

        CommonToken DOT340=null;

        XQDTCommonTree DOT340_tree=null;

        try {
            // XQueryParser.g:798:9: ( DOT )
            // XQueryParser.g:798:13: DOT
            {
            root_0 = (XQDTCommonTree)adaptor.nil();

            DOT340=(CommonToken)match(input,DOT,FOLLOW_DOT_in_p_ContextItemExpr6971); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            DOT340_tree = (XQDTCommonTree)adaptor.create(DOT340);
            adaptor.addChild(root_0, DOT340_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (XQDTCommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (XQDTCommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "p_ContextItemExpr"

    public static class p_OrderedExpr_return extends ParserRuleReturnScope {
        XQDTCommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "p_OrderedExpr"
    // XQueryParser.g:802:1: p_OrderedExpr : k= ORDERED LBRACKET pm_Expr RBRACKET ;
    public final XQueryParser.p_OrderedExpr_return p_OrderedExpr() throws RecognitionException {
        XQueryParser.p_OrderedExpr_return retval = new XQueryParser.p_OrderedExpr_return();
        retval.start = input.LT(1);

        XQDTCommonTree root_0 = null;

        CommonToken k=null;
        CommonToken LBRACKET341=null;
        CommonToken RBRACKET343=null;
        XQueryParser.pm_Expr_return pm_Expr342 = null;


        XQDTCommonTree k_tree=null;
        XQDTCommonTree LBRACKET341_tree=null;
        XQDTCommonTree RBRACKET343_tree=null;

        try {
            // XQueryParser.g:803:9: (k= ORDERED LBRACKET pm_Expr RBRACKET )
            // XQueryParser.g:803:13: k= ORDERED LBRACKET pm_Expr RBRACKET
            {
            root_0 = (XQDTCommonTree)adaptor.nil();

            k=(CommonToken)match(input,ORDERED,FOLLOW_ORDERED_in_p_OrderedExpr7001); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            k_tree = (XQDTCommonTree)adaptor.create(k);
            adaptor.addChild(root_0, k_tree);
            }
            if ( state.backtracking==0 ) {
              ak(k);
            }
            LBRACKET341=(CommonToken)match(input,LBRACKET,FOLLOW_LBRACKET_in_p_OrderedExpr7005); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            LBRACKET341_tree = (XQDTCommonTree)adaptor.create(LBRACKET341);
            adaptor.addChild(root_0, LBRACKET341_tree);
            }
            pushFollow(FOLLOW_pm_Expr_in_p_OrderedExpr7007);
            pm_Expr342=pm_Expr();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, pm_Expr342.getTree());
            RBRACKET343=(CommonToken)match(input,RBRACKET,FOLLOW_RBRACKET_in_p_OrderedExpr7009); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            RBRACKET343_tree = (XQDTCommonTree)adaptor.create(RBRACKET343);
            adaptor.addChild(root_0, RBRACKET343_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (XQDTCommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (XQDTCommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "p_OrderedExpr"

    public static class p_UnorderedExpr_return extends ParserRuleReturnScope {
        XQDTCommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "p_UnorderedExpr"
    // XQueryParser.g:807:1: p_UnorderedExpr : k= UNORDERED LBRACKET pm_Expr RBRACKET ;
    public final XQueryParser.p_UnorderedExpr_return p_UnorderedExpr() throws RecognitionException {
        XQueryParser.p_UnorderedExpr_return retval = new XQueryParser.p_UnorderedExpr_return();
        retval.start = input.LT(1);

        XQDTCommonTree root_0 = null;

        CommonToken k=null;
        CommonToken LBRACKET344=null;
        CommonToken RBRACKET346=null;
        XQueryParser.pm_Expr_return pm_Expr345 = null;


        XQDTCommonTree k_tree=null;
        XQDTCommonTree LBRACKET344_tree=null;
        XQDTCommonTree RBRACKET346_tree=null;

        try {
            // XQueryParser.g:808:9: (k= UNORDERED LBRACKET pm_Expr RBRACKET )
            // XQueryParser.g:808:13: k= UNORDERED LBRACKET pm_Expr RBRACKET
            {
            root_0 = (XQDTCommonTree)adaptor.nil();

            k=(CommonToken)match(input,UNORDERED,FOLLOW_UNORDERED_in_p_UnorderedExpr7039); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            k_tree = (XQDTCommonTree)adaptor.create(k);
            adaptor.addChild(root_0, k_tree);
            }
            if ( state.backtracking==0 ) {
              ak(k);
            }
            LBRACKET344=(CommonToken)match(input,LBRACKET,FOLLOW_LBRACKET_in_p_UnorderedExpr7043); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            LBRACKET344_tree = (XQDTCommonTree)adaptor.create(LBRACKET344);
            adaptor.addChild(root_0, LBRACKET344_tree);
            }
            pushFollow(FOLLOW_pm_Expr_in_p_UnorderedExpr7045);
            pm_Expr345=pm_Expr();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, pm_Expr345.getTree());
            RBRACKET346=(CommonToken)match(input,RBRACKET,FOLLOW_RBRACKET_in_p_UnorderedExpr7047); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            RBRACKET346_tree = (XQDTCommonTree)adaptor.create(RBRACKET346);
            adaptor.addChild(root_0, RBRACKET346_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (XQDTCommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (XQDTCommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "p_UnorderedExpr"

    public static class p_FunctionCall_return extends ParserRuleReturnScope {
        XQDTCommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "p_FunctionCall"
    // XQueryParser.g:813:1: p_FunctionCall : p_FQName LPAREN ( p_ExprSingle ( COMMA p_ExprSingle )* )? RPAREN ;
    public final XQueryParser.p_FunctionCall_return p_FunctionCall() throws RecognitionException {
        XQueryParser.p_FunctionCall_return retval = new XQueryParser.p_FunctionCall_return();
        retval.start = input.LT(1);

        XQDTCommonTree root_0 = null;

        CommonToken LPAREN348=null;
        CommonToken COMMA350=null;
        CommonToken RPAREN352=null;
        XQueryParser.p_FQName_return p_FQName347 = null;

        XQueryParser.p_ExprSingle_return p_ExprSingle349 = null;

        XQueryParser.p_ExprSingle_return p_ExprSingle351 = null;


        XQDTCommonTree LPAREN348_tree=null;
        XQDTCommonTree COMMA350_tree=null;
        XQDTCommonTree RPAREN352_tree=null;

        try {
            // XQueryParser.g:814:9: ( p_FQName LPAREN ( p_ExprSingle ( COMMA p_ExprSingle )* )? RPAREN )
            // XQueryParser.g:814:13: p_FQName LPAREN ( p_ExprSingle ( COMMA p_ExprSingle )* )? RPAREN
            {
            root_0 = (XQDTCommonTree)adaptor.nil();

            pushFollow(FOLLOW_p_FQName_in_p_FunctionCall7076);
            p_FQName347=p_FQName();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, p_FQName347.getTree());
            LPAREN348=(CommonToken)match(input,LPAREN,FOLLOW_LPAREN_in_p_FunctionCall7078); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            LPAREN348_tree = (XQDTCommonTree)adaptor.create(LPAREN348);
            adaptor.addChild(root_0, LPAREN348_tree);
            }
            // XQueryParser.g:814:29: ( p_ExprSingle ( COMMA p_ExprSingle )* )?
            int alt128=2;
            int LA128_0 = input.LA(1);

            if ( ((LA128_0>=ANCESTOR && LA128_0<=EXIT)||(LA128_0>=SEQUENTIAL && LA128_0<=MAINTAINED)||(LA128_0>=MUTABLE && LA128_0<=LPAREN)||LA128_0==DOLLAR||(LA128_0>=STAR && LA128_0<=SMALLER)||(LA128_0>=SLASH && LA128_0<=DOT_DOT)||LA128_0==ATTR_SIGN||(LA128_0>=APOS && LA128_0<=QUOT)||LA128_0==L_NCName||(LA128_0>=L_Pragma && LA128_0<=L_DoubleLiteral)||LA128_0==EXPLICITLY) ) {
                alt128=1;
            }
            switch (alt128) {
                case 1 :
                    // XQueryParser.g:814:30: p_ExprSingle ( COMMA p_ExprSingle )*
                    {
                    pushFollow(FOLLOW_p_ExprSingle_in_p_FunctionCall7081);
                    p_ExprSingle349=p_ExprSingle();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, p_ExprSingle349.getTree());
                    // XQueryParser.g:814:43: ( COMMA p_ExprSingle )*
                    loop127:
                    do {
                        int alt127=2;
                        int LA127_0 = input.LA(1);

                        if ( (LA127_0==COMMA) ) {
                            alt127=1;
                        }


                        switch (alt127) {
                    	case 1 :
                    	    // XQueryParser.g:814:44: COMMA p_ExprSingle
                    	    {
                    	    COMMA350=(CommonToken)match(input,COMMA,FOLLOW_COMMA_in_p_FunctionCall7084); if (state.failed) return retval;
                    	    if ( state.backtracking==0 ) {
                    	    COMMA350_tree = (XQDTCommonTree)adaptor.create(COMMA350);
                    	    adaptor.addChild(root_0, COMMA350_tree);
                    	    }
                    	    pushFollow(FOLLOW_p_ExprSingle_in_p_FunctionCall7086);
                    	    p_ExprSingle351=p_ExprSingle();

                    	    state._fsp--;
                    	    if (state.failed) return retval;
                    	    if ( state.backtracking==0 ) adaptor.addChild(root_0, p_ExprSingle351.getTree());

                    	    }
                    	    break;

                    	default :
                    	    break loop127;
                        }
                    } while (true);


                    }
                    break;

            }

            RPAREN352=(CommonToken)match(input,RPAREN,FOLLOW_RPAREN_in_p_FunctionCall7092); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            RPAREN352_tree = (XQDTCommonTree)adaptor.create(RPAREN352);
            adaptor.addChild(root_0, RPAREN352_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (XQDTCommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (XQDTCommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "p_FunctionCall"

    public static class p_Constructor_return extends ParserRuleReturnScope {
        XQDTCommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "p_Constructor"
    // XQueryParser.g:818:1: p_Constructor : ( p_DirectConstructor | p_ComputedConstructor );
    public final XQueryParser.p_Constructor_return p_Constructor() throws RecognitionException {
        XQueryParser.p_Constructor_return retval = new XQueryParser.p_Constructor_return();
        retval.start = input.LT(1);

        XQDTCommonTree root_0 = null;

        XQueryParser.p_DirectConstructor_return p_DirectConstructor353 = null;

        XQueryParser.p_ComputedConstructor_return p_ComputedConstructor354 = null;



        try {
            // XQueryParser.g:819:9: ( p_DirectConstructor | p_ComputedConstructor )
            int alt129=2;
            int LA129_0 = input.LA(1);

            if ( (LA129_0==SMALLER||(LA129_0>=L_DirCommentConstructor && LA129_0<=L_DirPIConstructor)) ) {
                alt129=1;
            }
            else if ( (LA129_0==ATTRIBUTE||LA129_0==COMMENT||LA129_0==DOCUMENT||LA129_0==ELEMENT||LA129_0==NAMESPACE||LA129_0==PROCESSING_INSTRUCTION||LA129_0==TEXT) ) {
                alt129=2;
            }
            else if ( (LA129_0==BINARY) && ((lc(MLS)))) {
                alt129=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 129, 0, input);

                throw nvae;
            }
            switch (alt129) {
                case 1 :
                    // XQueryParser.g:819:13: p_DirectConstructor
                    {
                    root_0 = (XQDTCommonTree)adaptor.nil();

                    pushFollow(FOLLOW_p_DirectConstructor_in_p_Constructor7124);
                    p_DirectConstructor353=p_DirectConstructor();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, p_DirectConstructor353.getTree());

                    }
                    break;
                case 2 :
                    // XQueryParser.g:819:35: p_ComputedConstructor
                    {
                    root_0 = (XQDTCommonTree)adaptor.nil();

                    pushFollow(FOLLOW_p_ComputedConstructor_in_p_Constructor7128);
                    p_ComputedConstructor354=p_ComputedConstructor();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, p_ComputedConstructor354.getTree());

                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (XQDTCommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (XQDTCommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "p_Constructor"

    public static class p_DirectConstructor_return extends ParserRuleReturnScope {
        XQDTCommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "p_DirectConstructor"
    // XQueryParser.g:823:1: p_DirectConstructor : ( p_DirElemConstructor | L_DirCommentConstructor | L_DirPIConstructor );
    public final XQueryParser.p_DirectConstructor_return p_DirectConstructor() throws RecognitionException {
        XQueryParser.p_DirectConstructor_return retval = new XQueryParser.p_DirectConstructor_return();
        retval.start = input.LT(1);

        XQDTCommonTree root_0 = null;

        CommonToken L_DirCommentConstructor356=null;
        CommonToken L_DirPIConstructor357=null;
        XQueryParser.p_DirElemConstructor_return p_DirElemConstructor355 = null;


        XQDTCommonTree L_DirCommentConstructor356_tree=null;
        XQDTCommonTree L_DirPIConstructor357_tree=null;

        try {
            // XQueryParser.g:824:9: ( p_DirElemConstructor | L_DirCommentConstructor | L_DirPIConstructor )
            int alt130=3;
            switch ( input.LA(1) ) {
            case SMALLER:
                {
                alt130=1;
                }
                break;
            case L_DirCommentConstructor:
                {
                alt130=2;
                }
                break;
            case L_DirPIConstructor:
                {
                alt130=3;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 130, 0, input);

                throw nvae;
            }

            switch (alt130) {
                case 1 :
                    // XQueryParser.g:824:13: p_DirElemConstructor
                    {
                    root_0 = (XQDTCommonTree)adaptor.nil();

                    pushFollow(FOLLOW_p_DirElemConstructor_in_p_DirectConstructor7156);
                    p_DirElemConstructor355=p_DirElemConstructor();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, p_DirElemConstructor355.getTree());

                    }
                    break;
                case 2 :
                    // XQueryParser.g:825:11: L_DirCommentConstructor
                    {
                    root_0 = (XQDTCommonTree)adaptor.nil();

                    L_DirCommentConstructor356=(CommonToken)match(input,L_DirCommentConstructor,FOLLOW_L_DirCommentConstructor_in_p_DirectConstructor7168); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    L_DirCommentConstructor356_tree = (XQDTCommonTree)adaptor.create(L_DirCommentConstructor356);
                    adaptor.addChild(root_0, L_DirCommentConstructor356_tree);
                    }

                    }
                    break;
                case 3 :
                    // XQueryParser.g:826:11: L_DirPIConstructor
                    {
                    root_0 = (XQDTCommonTree)adaptor.nil();

                    L_DirPIConstructor357=(CommonToken)match(input,L_DirPIConstructor,FOLLOW_L_DirPIConstructor_in_p_DirectConstructor7180); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    L_DirPIConstructor357_tree = (XQDTCommonTree)adaptor.create(L_DirPIConstructor357);
                    adaptor.addChild(root_0, L_DirPIConstructor357_tree);
                    }

                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (XQDTCommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (XQDTCommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "p_DirectConstructor"

    public static class p_DirElemConstructor_return extends ParserRuleReturnScope {
        XQDTCommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "p_DirElemConstructor"
    // XQueryParser.g:830:1: p_DirElemConstructor : SMALLER p_QName p_DirAttributeList ( EMPTY_CLOSE_TAG | ( GREATER ( pm_DirElemContent )* CLOSE_TAG p_QName ( S )? GREATER ) ) -> ^( DirElemConstructor ^( DirAttributeList ( p_DirAttributeList )* ) ^( DirElemContent ( pm_DirElemContent )* ) ) ;
    public final XQueryParser.p_DirElemConstructor_return p_DirElemConstructor() throws RecognitionException {
        XQueryParser.p_DirElemConstructor_return retval = new XQueryParser.p_DirElemConstructor_return();
        retval.start = input.LT(1);

        XQDTCommonTree root_0 = null;

        CommonToken SMALLER358=null;
        CommonToken EMPTY_CLOSE_TAG361=null;
        CommonToken GREATER362=null;
        CommonToken CLOSE_TAG364=null;
        CommonToken S366=null;
        CommonToken GREATER367=null;
        XQueryParser.p_QName_return p_QName359 = null;

        XQueryParser.p_DirAttributeList_return p_DirAttributeList360 = null;

        XQueryParser.pm_DirElemContent_return pm_DirElemContent363 = null;

        XQueryParser.p_QName_return p_QName365 = null;


        XQDTCommonTree SMALLER358_tree=null;
        XQDTCommonTree EMPTY_CLOSE_TAG361_tree=null;
        XQDTCommonTree GREATER362_tree=null;
        XQDTCommonTree CLOSE_TAG364_tree=null;
        XQDTCommonTree S366_tree=null;
        XQDTCommonTree GREATER367_tree=null;
        RewriteRuleTokenStream stream_CLOSE_TAG=new RewriteRuleTokenStream(adaptor,"token CLOSE_TAG");
        RewriteRuleTokenStream stream_GREATER=new RewriteRuleTokenStream(adaptor,"token GREATER");
        RewriteRuleTokenStream stream_S=new RewriteRuleTokenStream(adaptor,"token S");
        RewriteRuleTokenStream stream_EMPTY_CLOSE_TAG=new RewriteRuleTokenStream(adaptor,"token EMPTY_CLOSE_TAG");
        RewriteRuleTokenStream stream_SMALLER=new RewriteRuleTokenStream(adaptor,"token SMALLER");
        RewriteRuleSubtreeStream stream_p_DirAttributeList=new RewriteRuleSubtreeStream(adaptor,"rule p_DirAttributeList");
        RewriteRuleSubtreeStream stream_pm_DirElemContent=new RewriteRuleSubtreeStream(adaptor,"rule pm_DirElemContent");
        RewriteRuleSubtreeStream stream_p_QName=new RewriteRuleSubtreeStream(adaptor,"rule p_QName");
        try {
            // XQueryParser.g:831:9: ( SMALLER p_QName p_DirAttributeList ( EMPTY_CLOSE_TAG | ( GREATER ( pm_DirElemContent )* CLOSE_TAG p_QName ( S )? GREATER ) ) -> ^( DirElemConstructor ^( DirAttributeList ( p_DirAttributeList )* ) ^( DirElemContent ( pm_DirElemContent )* ) ) )
            // XQueryParser.g:831:13: SMALLER p_QName p_DirAttributeList ( EMPTY_CLOSE_TAG | ( GREATER ( pm_DirElemContent )* CLOSE_TAG p_QName ( S )? GREATER ) )
            {
            SMALLER358=(CommonToken)match(input,SMALLER,FOLLOW_SMALLER_in_p_DirElemConstructor7209); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_SMALLER.add(SMALLER358);

            if ( state.backtracking==0 ) {
              pushXMLLexer();
            }
            pushFollow(FOLLOW_p_QName_in_p_DirElemConstructor7225);
            p_QName359=p_QName();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_p_QName.add(p_QName359.getTree());
            pushFollow(FOLLOW_p_DirAttributeList_in_p_DirElemConstructor7227);
            p_DirAttributeList360=p_DirAttributeList();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_p_DirAttributeList.add(p_DirAttributeList360.getTree());
            // XQueryParser.g:833:13: ( EMPTY_CLOSE_TAG | ( GREATER ( pm_DirElemContent )* CLOSE_TAG p_QName ( S )? GREATER ) )
            int alt133=2;
            int LA133_0 = input.LA(1);

            if ( (LA133_0==EMPTY_CLOSE_TAG) ) {
                alt133=1;
            }
            else if ( (LA133_0==GREATER) ) {
                alt133=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 133, 0, input);

                throw nvae;
            }
            switch (alt133) {
                case 1 :
                    // XQueryParser.g:833:14: EMPTY_CLOSE_TAG
                    {
                    EMPTY_CLOSE_TAG361=(CommonToken)match(input,EMPTY_CLOSE_TAG,FOLLOW_EMPTY_CLOSE_TAG_in_p_DirElemConstructor7243); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_EMPTY_CLOSE_TAG.add(EMPTY_CLOSE_TAG361);


                    }
                    break;
                case 2 :
                    // XQueryParser.g:833:32: ( GREATER ( pm_DirElemContent )* CLOSE_TAG p_QName ( S )? GREATER )
                    {
                    // XQueryParser.g:833:32: ( GREATER ( pm_DirElemContent )* CLOSE_TAG p_QName ( S )? GREATER )
                    // XQueryParser.g:833:33: GREATER ( pm_DirElemContent )* CLOSE_TAG p_QName ( S )? GREATER
                    {
                    GREATER362=(CommonToken)match(input,GREATER,FOLLOW_GREATER_in_p_DirElemConstructor7248); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_GREATER.add(GREATER362);

                    // XQueryParser.g:833:41: ( pm_DirElemContent )*
                    loop131:
                    do {
                        int alt131=2;
                        int LA131_0 = input.LA(1);

                        if ( ((LA131_0>=L_ElementContentChar && LA131_0<=ESCAPE_RBRACKET)||LA131_0==LBRACKET||LA131_0==SMALLER||(LA131_0>=L_DirCommentConstructor && LA131_0<=L_DirPIConstructor)) ) {
                            alt131=1;
                        }


                        switch (alt131) {
                    	case 1 :
                    	    // XQueryParser.g:833:41: pm_DirElemContent
                    	    {
                    	    pushFollow(FOLLOW_pm_DirElemContent_in_p_DirElemConstructor7250);
                    	    pm_DirElemContent363=pm_DirElemContent();

                    	    state._fsp--;
                    	    if (state.failed) return retval;
                    	    if ( state.backtracking==0 ) stream_pm_DirElemContent.add(pm_DirElemContent363.getTree());

                    	    }
                    	    break;

                    	default :
                    	    break loop131;
                        }
                    } while (true);

                    CLOSE_TAG364=(CommonToken)match(input,CLOSE_TAG,FOLLOW_CLOSE_TAG_in_p_DirElemConstructor7253); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_CLOSE_TAG.add(CLOSE_TAG364);

                    pushFollow(FOLLOW_p_QName_in_p_DirElemConstructor7255);
                    p_QName365=p_QName();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_p_QName.add(p_QName365.getTree());
                    // XQueryParser.g:833:78: ( S )?
                    int alt132=2;
                    int LA132_0 = input.LA(1);

                    if ( (LA132_0==S) ) {
                        alt132=1;
                    }
                    switch (alt132) {
                        case 1 :
                            // XQueryParser.g:833:78: S
                            {
                            S366=(CommonToken)match(input,S,FOLLOW_S_in_p_DirElemConstructor7257); if (state.failed) return retval; 
                            if ( state.backtracking==0 ) stream_S.add(S366);


                            }
                            break;

                    }

                    GREATER367=(CommonToken)match(input,GREATER,FOLLOW_GREATER_in_p_DirElemConstructor7260); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_GREATER.add(GREATER367);


                    }


                    }
                    break;

            }



            // AST REWRITE
            // elements: p_DirAttributeList, pm_DirElemContent
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (XQDTCommonTree)adaptor.nil();
            // 834:17: -> ^( DirElemConstructor ^( DirAttributeList ( p_DirAttributeList )* ) ^( DirElemContent ( pm_DirElemContent )* ) )
            {
                // XQueryParser.g:834:20: ^( DirElemConstructor ^( DirAttributeList ( p_DirAttributeList )* ) ^( DirElemContent ( pm_DirElemContent )* ) )
                {
                XQDTCommonTree root_1 = (XQDTCommonTree)adaptor.nil();
                root_1 = (XQDTCommonTree)adaptor.becomeRoot((XQDTCommonTree)adaptor.create(DirElemConstructor, "DirElemConstructor"), root_1);

                // XQueryParser.g:834:41: ^( DirAttributeList ( p_DirAttributeList )* )
                {
                XQDTCommonTree root_2 = (XQDTCommonTree)adaptor.nil();
                root_2 = (XQDTCommonTree)adaptor.becomeRoot((XQDTCommonTree)adaptor.create(DirAttributeList, "DirAttributeList"), root_2);

                // XQueryParser.g:834:60: ( p_DirAttributeList )*
                while ( stream_p_DirAttributeList.hasNext() ) {
                    adaptor.addChild(root_2, stream_p_DirAttributeList.nextTree());

                }
                stream_p_DirAttributeList.reset();

                adaptor.addChild(root_1, root_2);
                }
                // XQueryParser.g:834:81: ^( DirElemContent ( pm_DirElemContent )* )
                {
                XQDTCommonTree root_2 = (XQDTCommonTree)adaptor.nil();
                root_2 = (XQDTCommonTree)adaptor.becomeRoot((XQDTCommonTree)adaptor.create(DirElemContent, "DirElemContent"), root_2);

                // XQueryParser.g:834:98: ( pm_DirElemContent )*
                while ( stream_pm_DirElemContent.hasNext() ) {
                    adaptor.addChild(root_2, stream_pm_DirElemContent.nextTree());

                }
                stream_pm_DirElemContent.reset();

                adaptor.addChild(root_1, root_2);
                }

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (XQDTCommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (XQDTCommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            popLexer();
        }
        return retval;
    }
    // $ANTLR end "p_DirElemConstructor"

    public static class p_DirAttributeList_return extends ParserRuleReturnScope {
        XQDTCommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "p_DirAttributeList"
    // XQueryParser.g:839:1: p_DirAttributeList : ( S ( p_QName ( S )? EQUAL ( S )? p_DirAttributeValue )? )* ;
    public final XQueryParser.p_DirAttributeList_return p_DirAttributeList() throws RecognitionException {
        XQueryParser.p_DirAttributeList_return retval = new XQueryParser.p_DirAttributeList_return();
        retval.start = input.LT(1);

        XQDTCommonTree root_0 = null;

        CommonToken S368=null;
        CommonToken S370=null;
        CommonToken EQUAL371=null;
        CommonToken S372=null;
        XQueryParser.p_QName_return p_QName369 = null;

        XQueryParser.p_DirAttributeValue_return p_DirAttributeValue373 = null;


        XQDTCommonTree S368_tree=null;
        XQDTCommonTree S370_tree=null;
        XQDTCommonTree EQUAL371_tree=null;
        XQDTCommonTree S372_tree=null;

        try {
            // XQueryParser.g:840:9: ( ( S ( p_QName ( S )? EQUAL ( S )? p_DirAttributeValue )? )* )
            // XQueryParser.g:840:11: ( S ( p_QName ( S )? EQUAL ( S )? p_DirAttributeValue )? )*
            {
            root_0 = (XQDTCommonTree)adaptor.nil();

            // XQueryParser.g:840:11: ( S ( p_QName ( S )? EQUAL ( S )? p_DirAttributeValue )? )*
            loop137:
            do {
                int alt137=2;
                int LA137_0 = input.LA(1);

                if ( (LA137_0==S) ) {
                    alt137=1;
                }


                switch (alt137) {
            	case 1 :
            	    // XQueryParser.g:840:12: S ( p_QName ( S )? EQUAL ( S )? p_DirAttributeValue )?
            	    {
            	    S368=(CommonToken)match(input,S,FOLLOW_S_in_p_DirAttributeList7337); if (state.failed) return retval;
            	    if ( state.backtracking==0 ) {
            	    S368_tree = (XQDTCommonTree)adaptor.create(S368);
            	    adaptor.addChild(root_0, S368_tree);
            	    }
            	    // XQueryParser.g:840:14: ( p_QName ( S )? EQUAL ( S )? p_DirAttributeValue )?
            	    int alt136=2;
            	    int LA136_0 = input.LA(1);

            	    if ( ((LA136_0>=ANCESTOR && LA136_0<=EXIT)||(LA136_0>=SEQUENTIAL && LA136_0<=MAINTAINED)||(LA136_0>=MUTABLE && LA136_0<=QUOT_ER)||LA136_0==L_NCName||LA136_0==EXPLICITLY) ) {
            	        alt136=1;
            	    }
            	    switch (alt136) {
            	        case 1 :
            	            // XQueryParser.g:840:15: p_QName ( S )? EQUAL ( S )? p_DirAttributeValue
            	            {
            	            pushFollow(FOLLOW_p_QName_in_p_DirAttributeList7340);
            	            p_QName369=p_QName();

            	            state._fsp--;
            	            if (state.failed) return retval;
            	            if ( state.backtracking==0 ) adaptor.addChild(root_0, p_QName369.getTree());
            	            // XQueryParser.g:840:23: ( S )?
            	            int alt134=2;
            	            int LA134_0 = input.LA(1);

            	            if ( (LA134_0==S) ) {
            	                alt134=1;
            	            }
            	            switch (alt134) {
            	                case 1 :
            	                    // XQueryParser.g:840:23: S
            	                    {
            	                    S370=(CommonToken)match(input,S,FOLLOW_S_in_p_DirAttributeList7342); if (state.failed) return retval;
            	                    if ( state.backtracking==0 ) {
            	                    S370_tree = (XQDTCommonTree)adaptor.create(S370);
            	                    adaptor.addChild(root_0, S370_tree);
            	                    }

            	                    }
            	                    break;

            	            }

            	            EQUAL371=(CommonToken)match(input,EQUAL,FOLLOW_EQUAL_in_p_DirAttributeList7345); if (state.failed) return retval;
            	            if ( state.backtracking==0 ) {
            	            EQUAL371_tree = (XQDTCommonTree)adaptor.create(EQUAL371);
            	            adaptor.addChild(root_0, EQUAL371_tree);
            	            }
            	            // XQueryParser.g:840:32: ( S )?
            	            int alt135=2;
            	            int LA135_0 = input.LA(1);

            	            if ( (LA135_0==S) ) {
            	                alt135=1;
            	            }
            	            switch (alt135) {
            	                case 1 :
            	                    // XQueryParser.g:840:32: S
            	                    {
            	                    S372=(CommonToken)match(input,S,FOLLOW_S_in_p_DirAttributeList7347); if (state.failed) return retval;
            	                    if ( state.backtracking==0 ) {
            	                    S372_tree = (XQDTCommonTree)adaptor.create(S372);
            	                    adaptor.addChild(root_0, S372_tree);
            	                    }

            	                    }
            	                    break;

            	            }

            	            pushFollow(FOLLOW_p_DirAttributeValue_in_p_DirAttributeList7350);
            	            p_DirAttributeValue373=p_DirAttributeValue();

            	            state._fsp--;
            	            if (state.failed) return retval;
            	            if ( state.backtracking==0 ) adaptor.addChild(root_0, p_DirAttributeValue373.getTree());

            	            }
            	            break;

            	    }


            	    }
            	    break;

            	default :
            	    break loop137;
                }
            } while (true);


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (XQDTCommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (XQDTCommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "p_DirAttributeList"

    public static class p_DirAttributeValue_return extends ParserRuleReturnScope {
        XQDTCommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "p_DirAttributeValue"
    // XQueryParser.g:844:1: p_DirAttributeValue : ( ( QUOT ( ESCAPE_QUOT | pm_QuotAttrValueContent )* QUOT ) -> ^( DirAttributeValue ( pm_QuotAttrValueContent )* ) | ( APOS ( ESCAPE_APOS | pm_AposAttrValueContent )* APOS ) -> ^( DirAttributeValue ( pm_AposAttrValueContent )* ) );
    public final XQueryParser.p_DirAttributeValue_return p_DirAttributeValue() throws RecognitionException {
        XQueryParser.p_DirAttributeValue_return retval = new XQueryParser.p_DirAttributeValue_return();
        retval.start = input.LT(1);

        XQDTCommonTree root_0 = null;

        CommonToken QUOT374=null;
        CommonToken ESCAPE_QUOT375=null;
        CommonToken QUOT377=null;
        CommonToken APOS378=null;
        CommonToken ESCAPE_APOS379=null;
        CommonToken APOS381=null;
        XQueryParser.pm_QuotAttrValueContent_return pm_QuotAttrValueContent376 = null;

        XQueryParser.pm_AposAttrValueContent_return pm_AposAttrValueContent380 = null;


        XQDTCommonTree QUOT374_tree=null;
        XQDTCommonTree ESCAPE_QUOT375_tree=null;
        XQDTCommonTree QUOT377_tree=null;
        XQDTCommonTree APOS378_tree=null;
        XQDTCommonTree ESCAPE_APOS379_tree=null;
        XQDTCommonTree APOS381_tree=null;
        RewriteRuleTokenStream stream_ESCAPE_QUOT=new RewriteRuleTokenStream(adaptor,"token ESCAPE_QUOT");
        RewriteRuleTokenStream stream_APOS=new RewriteRuleTokenStream(adaptor,"token APOS");
        RewriteRuleTokenStream stream_ESCAPE_APOS=new RewriteRuleTokenStream(adaptor,"token ESCAPE_APOS");
        RewriteRuleTokenStream stream_QUOT=new RewriteRuleTokenStream(adaptor,"token QUOT");
        RewriteRuleSubtreeStream stream_pm_QuotAttrValueContent=new RewriteRuleSubtreeStream(adaptor,"rule pm_QuotAttrValueContent");
        RewriteRuleSubtreeStream stream_pm_AposAttrValueContent=new RewriteRuleSubtreeStream(adaptor,"rule pm_AposAttrValueContent");
        try {
            // XQueryParser.g:845:9: ( ( QUOT ( ESCAPE_QUOT | pm_QuotAttrValueContent )* QUOT ) -> ^( DirAttributeValue ( pm_QuotAttrValueContent )* ) | ( APOS ( ESCAPE_APOS | pm_AposAttrValueContent )* APOS ) -> ^( DirAttributeValue ( pm_AposAttrValueContent )* ) )
            int alt140=2;
            int LA140_0 = input.LA(1);

            if ( (LA140_0==QUOT) ) {
                alt140=1;
            }
            else if ( (LA140_0==APOS) ) {
                alt140=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 140, 0, input);

                throw nvae;
            }
            switch (alt140) {
                case 1 :
                    // XQueryParser.g:845:11: ( QUOT ( ESCAPE_QUOT | pm_QuotAttrValueContent )* QUOT )
                    {
                    // XQueryParser.g:845:11: ( QUOT ( ESCAPE_QUOT | pm_QuotAttrValueContent )* QUOT )
                    // XQueryParser.g:845:12: QUOT ( ESCAPE_QUOT | pm_QuotAttrValueContent )* QUOT
                    {
                    QUOT374=(CommonToken)match(input,QUOT,FOLLOW_QUOT_in_p_DirAttributeValue7381); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_QUOT.add(QUOT374);

                    // XQueryParser.g:845:17: ( ESCAPE_QUOT | pm_QuotAttrValueContent )*
                    loop138:
                    do {
                        int alt138=3;
                        int LA138_0 = input.LA(1);

                        if ( (LA138_0==ESCAPE_QUOT) ) {
                            alt138=1;
                        }
                        else if ( (LA138_0==L_QuotAttrContentChar||(LA138_0>=L_PredefinedEntityRef && LA138_0<=ESCAPE_RBRACKET)||LA138_0==LBRACKET) ) {
                            alt138=2;
                        }


                        switch (alt138) {
                    	case 1 :
                    	    // XQueryParser.g:845:18: ESCAPE_QUOT
                    	    {
                    	    ESCAPE_QUOT375=(CommonToken)match(input,ESCAPE_QUOT,FOLLOW_ESCAPE_QUOT_in_p_DirAttributeValue7384); if (state.failed) return retval; 
                    	    if ( state.backtracking==0 ) stream_ESCAPE_QUOT.add(ESCAPE_QUOT375);


                    	    }
                    	    break;
                    	case 2 :
                    	    // XQueryParser.g:845:32: pm_QuotAttrValueContent
                    	    {
                    	    pushFollow(FOLLOW_pm_QuotAttrValueContent_in_p_DirAttributeValue7388);
                    	    pm_QuotAttrValueContent376=pm_QuotAttrValueContent();

                    	    state._fsp--;
                    	    if (state.failed) return retval;
                    	    if ( state.backtracking==0 ) stream_pm_QuotAttrValueContent.add(pm_QuotAttrValueContent376.getTree());

                    	    }
                    	    break;

                    	default :
                    	    break loop138;
                        }
                    } while (true);

                    QUOT377=(CommonToken)match(input,QUOT,FOLLOW_QUOT_in_p_DirAttributeValue7392); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_QUOT.add(QUOT377);


                    }



                    // AST REWRITE
                    // elements: pm_QuotAttrValueContent
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (XQDTCommonTree)adaptor.nil();
                    // 846:17: -> ^( DirAttributeValue ( pm_QuotAttrValueContent )* )
                    {
                        // XQueryParser.g:846:20: ^( DirAttributeValue ( pm_QuotAttrValueContent )* )
                        {
                        XQDTCommonTree root_1 = (XQDTCommonTree)adaptor.nil();
                        root_1 = (XQDTCommonTree)adaptor.becomeRoot((XQDTCommonTree)adaptor.create(DirAttributeValue, "DirAttributeValue"), root_1);

                        // XQueryParser.g:846:40: ( pm_QuotAttrValueContent )*
                        while ( stream_pm_QuotAttrValueContent.hasNext() ) {
                            adaptor.addChild(root_1, stream_pm_QuotAttrValueContent.nextTree());

                        }
                        stream_pm_QuotAttrValueContent.reset();

                        adaptor.addChild(root_0, root_1);
                        }

                    }

                    retval.tree = root_0;}
                    }
                    break;
                case 2 :
                    // XQueryParser.g:847:11: ( APOS ( ESCAPE_APOS | pm_AposAttrValueContent )* APOS )
                    {
                    // XQueryParser.g:847:11: ( APOS ( ESCAPE_APOS | pm_AposAttrValueContent )* APOS )
                    // XQueryParser.g:847:12: APOS ( ESCAPE_APOS | pm_AposAttrValueContent )* APOS
                    {
                    APOS378=(CommonToken)match(input,APOS,FOLLOW_APOS_in_p_DirAttributeValue7431); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_APOS.add(APOS378);

                    // XQueryParser.g:847:17: ( ESCAPE_APOS | pm_AposAttrValueContent )*
                    loop139:
                    do {
                        int alt139=3;
                        int LA139_0 = input.LA(1);

                        if ( (LA139_0==ESCAPE_APOS) ) {
                            alt139=1;
                        }
                        else if ( (LA139_0==L_AposAttrContentChar||(LA139_0>=L_PredefinedEntityRef && LA139_0<=ESCAPE_RBRACKET)||LA139_0==LBRACKET) ) {
                            alt139=2;
                        }


                        switch (alt139) {
                    	case 1 :
                    	    // XQueryParser.g:847:18: ESCAPE_APOS
                    	    {
                    	    ESCAPE_APOS379=(CommonToken)match(input,ESCAPE_APOS,FOLLOW_ESCAPE_APOS_in_p_DirAttributeValue7434); if (state.failed) return retval; 
                    	    if ( state.backtracking==0 ) stream_ESCAPE_APOS.add(ESCAPE_APOS379);


                    	    }
                    	    break;
                    	case 2 :
                    	    // XQueryParser.g:847:32: pm_AposAttrValueContent
                    	    {
                    	    pushFollow(FOLLOW_pm_AposAttrValueContent_in_p_DirAttributeValue7438);
                    	    pm_AposAttrValueContent380=pm_AposAttrValueContent();

                    	    state._fsp--;
                    	    if (state.failed) return retval;
                    	    if ( state.backtracking==0 ) stream_pm_AposAttrValueContent.add(pm_AposAttrValueContent380.getTree());

                    	    }
                    	    break;

                    	default :
                    	    break loop139;
                        }
                    } while (true);

                    APOS381=(CommonToken)match(input,APOS,FOLLOW_APOS_in_p_DirAttributeValue7442); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_APOS.add(APOS381);


                    }



                    // AST REWRITE
                    // elements: pm_AposAttrValueContent
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (XQDTCommonTree)adaptor.nil();
                    // 848:17: -> ^( DirAttributeValue ( pm_AposAttrValueContent )* )
                    {
                        // XQueryParser.g:848:20: ^( DirAttributeValue ( pm_AposAttrValueContent )* )
                        {
                        XQDTCommonTree root_1 = (XQDTCommonTree)adaptor.nil();
                        root_1 = (XQDTCommonTree)adaptor.becomeRoot((XQDTCommonTree)adaptor.create(DirAttributeValue, "DirAttributeValue"), root_1);

                        // XQueryParser.g:848:40: ( pm_AposAttrValueContent )*
                        while ( stream_pm_AposAttrValueContent.hasNext() ) {
                            adaptor.addChild(root_1, stream_pm_AposAttrValueContent.nextTree());

                        }
                        stream_pm_AposAttrValueContent.reset();

                        adaptor.addChild(root_0, root_1);
                        }

                    }

                    retval.tree = root_0;}
                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (XQDTCommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (XQDTCommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "p_DirAttributeValue"

    public static class pm_QuotAttrValueContent_return extends ParserRuleReturnScope {
        XQDTCommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "pm_QuotAttrValueContent"
    // XQueryParser.g:852:1: pm_QuotAttrValueContent : ( pg_QuotAttrContentChar | pg_CommonContent | p_ElemEnclosedExpr );
    public final XQueryParser.pm_QuotAttrValueContent_return pm_QuotAttrValueContent() throws RecognitionException {
        XQueryParser.pm_QuotAttrValueContent_return retval = new XQueryParser.pm_QuotAttrValueContent_return();
        retval.start = input.LT(1);

        XQDTCommonTree root_0 = null;

        XQueryParser.pg_QuotAttrContentChar_return pg_QuotAttrContentChar382 = null;

        XQueryParser.pg_CommonContent_return pg_CommonContent383 = null;

        XQueryParser.p_ElemEnclosedExpr_return p_ElemEnclosedExpr384 = null;



        try {
            // XQueryParser.g:853:9: ( pg_QuotAttrContentChar | pg_CommonContent | p_ElemEnclosedExpr )
            int alt141=3;
            switch ( input.LA(1) ) {
            case L_QuotAttrContentChar:
                {
                alt141=1;
                }
                break;
            case L_PredefinedEntityRef:
            case L_CharRef:
            case ESCAPE_LBRACKET:
            case ESCAPE_RBRACKET:
                {
                alt141=2;
                }
                break;
            case LBRACKET:
                {
                alt141=3;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 141, 0, input);

                throw nvae;
            }

            switch (alt141) {
                case 1 :
                    // XQueryParser.g:853:11: pg_QuotAttrContentChar
                    {
                    root_0 = (XQDTCommonTree)adaptor.nil();

                    pushFollow(FOLLOW_pg_QuotAttrContentChar_in_pm_QuotAttrValueContent7494);
                    pg_QuotAttrContentChar382=pg_QuotAttrContentChar();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, pg_QuotAttrContentChar382.getTree());

                    }
                    break;
                case 2 :
                    // XQueryParser.g:853:36: pg_CommonContent
                    {
                    root_0 = (XQDTCommonTree)adaptor.nil();

                    pushFollow(FOLLOW_pg_CommonContent_in_pm_QuotAttrValueContent7498);
                    pg_CommonContent383=pg_CommonContent();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, pg_CommonContent383.getTree());

                    }
                    break;
                case 3 :
                    // XQueryParser.g:853:55: p_ElemEnclosedExpr
                    {
                    root_0 = (XQDTCommonTree)adaptor.nil();

                    pushFollow(FOLLOW_p_ElemEnclosedExpr_in_pm_QuotAttrValueContent7502);
                    p_ElemEnclosedExpr384=p_ElemEnclosedExpr();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, p_ElemEnclosedExpr384.getTree());

                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (XQDTCommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (XQDTCommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "pm_QuotAttrValueContent"

    public static class pg_QuotAttrContentChar_return extends ParserRuleReturnScope {
        XQDTCommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "pg_QuotAttrContentChar"
    // XQueryParser.g:860:1: pg_QuotAttrContentChar : L_QuotAttrContentChar -> ^( AttributeValueChar L_QuotAttrContentChar ) ;
    public final XQueryParser.pg_QuotAttrContentChar_return pg_QuotAttrContentChar() throws RecognitionException {
        XQueryParser.pg_QuotAttrContentChar_return retval = new XQueryParser.pg_QuotAttrContentChar_return();
        retval.start = input.LT(1);

        XQDTCommonTree root_0 = null;

        CommonToken L_QuotAttrContentChar385=null;

        XQDTCommonTree L_QuotAttrContentChar385_tree=null;
        RewriteRuleTokenStream stream_L_QuotAttrContentChar=new RewriteRuleTokenStream(adaptor,"token L_QuotAttrContentChar");

        try {
            // XQueryParser.g:861:9: ( L_QuotAttrContentChar -> ^( AttributeValueChar L_QuotAttrContentChar ) )
            // XQueryParser.g:861:11: L_QuotAttrContentChar
            {
            L_QuotAttrContentChar385=(CommonToken)match(input,L_QuotAttrContentChar,FOLLOW_L_QuotAttrContentChar_in_pg_QuotAttrContentChar7531); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_L_QuotAttrContentChar.add(L_QuotAttrContentChar385);



            // AST REWRITE
            // elements: L_QuotAttrContentChar
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (XQDTCommonTree)adaptor.nil();
            // 862:17: -> ^( AttributeValueChar L_QuotAttrContentChar )
            {
                // XQueryParser.g:862:20: ^( AttributeValueChar L_QuotAttrContentChar )
                {
                XQDTCommonTree root_1 = (XQDTCommonTree)adaptor.nil();
                root_1 = (XQDTCommonTree)adaptor.becomeRoot((XQDTCommonTree)adaptor.create(AttributeValueChar, "AttributeValueChar"), root_1);

                adaptor.addChild(root_1, stream_L_QuotAttrContentChar.nextNode());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (XQDTCommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (XQDTCommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "pg_QuotAttrContentChar"

    public static class pm_AposAttrValueContent_return extends ParserRuleReturnScope {
        XQDTCommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "pm_AposAttrValueContent"
    // XQueryParser.g:867:1: pm_AposAttrValueContent : ( pg_AposAttrContentChar | pg_CommonContent | p_ElemEnclosedExpr );
    public final XQueryParser.pm_AposAttrValueContent_return pm_AposAttrValueContent() throws RecognitionException {
        XQueryParser.pm_AposAttrValueContent_return retval = new XQueryParser.pm_AposAttrValueContent_return();
        retval.start = input.LT(1);

        XQDTCommonTree root_0 = null;

        XQueryParser.pg_AposAttrContentChar_return pg_AposAttrContentChar386 = null;

        XQueryParser.pg_CommonContent_return pg_CommonContent387 = null;

        XQueryParser.p_ElemEnclosedExpr_return p_ElemEnclosedExpr388 = null;



        try {
            // XQueryParser.g:868:9: ( pg_AposAttrContentChar | pg_CommonContent | p_ElemEnclosedExpr )
            int alt142=3;
            switch ( input.LA(1) ) {
            case L_AposAttrContentChar:
                {
                alt142=1;
                }
                break;
            case L_PredefinedEntityRef:
            case L_CharRef:
            case ESCAPE_LBRACKET:
            case ESCAPE_RBRACKET:
                {
                alt142=2;
                }
                break;
            case LBRACKET:
                {
                alt142=3;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 142, 0, input);

                throw nvae;
            }

            switch (alt142) {
                case 1 :
                    // XQueryParser.g:868:13: pg_AposAttrContentChar
                    {
                    root_0 = (XQDTCommonTree)adaptor.nil();

                    pushFollow(FOLLOW_pg_AposAttrContentChar_in_pm_AposAttrValueContent7584);
                    pg_AposAttrContentChar386=pg_AposAttrContentChar();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, pg_AposAttrContentChar386.getTree());

                    }
                    break;
                case 2 :
                    // XQueryParser.g:868:38: pg_CommonContent
                    {
                    root_0 = (XQDTCommonTree)adaptor.nil();

                    pushFollow(FOLLOW_pg_CommonContent_in_pm_AposAttrValueContent7588);
                    pg_CommonContent387=pg_CommonContent();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, pg_CommonContent387.getTree());

                    }
                    break;
                case 3 :
                    // XQueryParser.g:868:57: p_ElemEnclosedExpr
                    {
                    root_0 = (XQDTCommonTree)adaptor.nil();

                    pushFollow(FOLLOW_p_ElemEnclosedExpr_in_pm_AposAttrValueContent7592);
                    p_ElemEnclosedExpr388=p_ElemEnclosedExpr();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, p_ElemEnclosedExpr388.getTree());

                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (XQDTCommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (XQDTCommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "pm_AposAttrValueContent"

    public static class pg_AposAttrContentChar_return extends ParserRuleReturnScope {
        XQDTCommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "pg_AposAttrContentChar"
    // XQueryParser.g:875:1: pg_AposAttrContentChar : L_AposAttrContentChar -> ^( AttributeValueChar L_AposAttrContentChar ) ;
    public final XQueryParser.pg_AposAttrContentChar_return pg_AposAttrContentChar() throws RecognitionException {
        XQueryParser.pg_AposAttrContentChar_return retval = new XQueryParser.pg_AposAttrContentChar_return();
        retval.start = input.LT(1);

        XQDTCommonTree root_0 = null;

        CommonToken L_AposAttrContentChar389=null;

        XQDTCommonTree L_AposAttrContentChar389_tree=null;
        RewriteRuleTokenStream stream_L_AposAttrContentChar=new RewriteRuleTokenStream(adaptor,"token L_AposAttrContentChar");

        try {
            // XQueryParser.g:876:9: ( L_AposAttrContentChar -> ^( AttributeValueChar L_AposAttrContentChar ) )
            // XQueryParser.g:876:11: L_AposAttrContentChar
            {
            L_AposAttrContentChar389=(CommonToken)match(input,L_AposAttrContentChar,FOLLOW_L_AposAttrContentChar_in_pg_AposAttrContentChar7621); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_L_AposAttrContentChar.add(L_AposAttrContentChar389);



            // AST REWRITE
            // elements: L_AposAttrContentChar
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (XQDTCommonTree)adaptor.nil();
            // 877:17: -> ^( AttributeValueChar L_AposAttrContentChar )
            {
                // XQueryParser.g:877:20: ^( AttributeValueChar L_AposAttrContentChar )
                {
                XQDTCommonTree root_1 = (XQDTCommonTree)adaptor.nil();
                root_1 = (XQDTCommonTree)adaptor.becomeRoot((XQDTCommonTree)adaptor.create(AttributeValueChar, "AttributeValueChar"), root_1);

                adaptor.addChild(root_1, stream_L_AposAttrContentChar.nextNode());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (XQDTCommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (XQDTCommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "pg_AposAttrContentChar"

    public static class pm_DirElemContent_return extends ParserRuleReturnScope {
        XQDTCommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "pm_DirElemContent"
    // XQueryParser.g:882:1: pm_DirElemContent : ( p_DirectConstructor | L_CDataSection | p_ElemEnclosedExpr | pg_CommonContent | pg_ElementContentChar );
    public final XQueryParser.pm_DirElemContent_return pm_DirElemContent() throws RecognitionException {
        XQueryParser.pm_DirElemContent_return retval = new XQueryParser.pm_DirElemContent_return();
        retval.start = input.LT(1);

        XQDTCommonTree root_0 = null;

        CommonToken L_CDataSection391=null;
        XQueryParser.p_DirectConstructor_return p_DirectConstructor390 = null;

        XQueryParser.p_ElemEnclosedExpr_return p_ElemEnclosedExpr392 = null;

        XQueryParser.pg_CommonContent_return pg_CommonContent393 = null;

        XQueryParser.pg_ElementContentChar_return pg_ElementContentChar394 = null;


        XQDTCommonTree L_CDataSection391_tree=null;

        try {
            // XQueryParser.g:883:9: ( p_DirectConstructor | L_CDataSection | p_ElemEnclosedExpr | pg_CommonContent | pg_ElementContentChar )
            int alt143=5;
            switch ( input.LA(1) ) {
            case SMALLER:
            case L_DirCommentConstructor:
            case L_DirPIConstructor:
                {
                alt143=1;
                }
                break;
            case L_CDataSection:
                {
                alt143=2;
                }
                break;
            case LBRACKET:
                {
                alt143=3;
                }
                break;
            case L_PredefinedEntityRef:
            case L_CharRef:
            case ESCAPE_LBRACKET:
            case ESCAPE_RBRACKET:
                {
                alt143=4;
                }
                break;
            case L_ElementContentChar:
                {
                alt143=5;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 143, 0, input);

                throw nvae;
            }

            switch (alt143) {
                case 1 :
                    // XQueryParser.g:883:11: p_DirectConstructor
                    {
                    root_0 = (XQDTCommonTree)adaptor.nil();

                    pushFollow(FOLLOW_p_DirectConstructor_in_pm_DirElemContent7672);
                    p_DirectConstructor390=p_DirectConstructor();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, p_DirectConstructor390.getTree());

                    }
                    break;
                case 2 :
                    // XQueryParser.g:884:11: L_CDataSection
                    {
                    root_0 = (XQDTCommonTree)adaptor.nil();

                    L_CDataSection391=(CommonToken)match(input,L_CDataSection,FOLLOW_L_CDataSection_in_pm_DirElemContent7684); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    L_CDataSection391_tree = (XQDTCommonTree)adaptor.create(L_CDataSection391);
                    adaptor.addChild(root_0, L_CDataSection391_tree);
                    }

                    }
                    break;
                case 3 :
                    // XQueryParser.g:885:11: p_ElemEnclosedExpr
                    {
                    root_0 = (XQDTCommonTree)adaptor.nil();

                    pushFollow(FOLLOW_p_ElemEnclosedExpr_in_pm_DirElemContent7696);
                    p_ElemEnclosedExpr392=p_ElemEnclosedExpr();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, p_ElemEnclosedExpr392.getTree());

                    }
                    break;
                case 4 :
                    // XQueryParser.g:886:11: pg_CommonContent
                    {
                    root_0 = (XQDTCommonTree)adaptor.nil();

                    pushFollow(FOLLOW_pg_CommonContent_in_pm_DirElemContent7708);
                    pg_CommonContent393=pg_CommonContent();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, pg_CommonContent393.getTree());

                    }
                    break;
                case 5 :
                    // XQueryParser.g:887:11: pg_ElementContentChar
                    {
                    root_0 = (XQDTCommonTree)adaptor.nil();

                    pushFollow(FOLLOW_pg_ElementContentChar_in_pm_DirElemContent7720);
                    pg_ElementContentChar394=pg_ElementContentChar();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, pg_ElementContentChar394.getTree());

                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (XQDTCommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (XQDTCommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "pm_DirElemContent"

    public static class pg_ElementContentChar_return extends ParserRuleReturnScope {
        XQDTCommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "pg_ElementContentChar"
    // XQueryParser.g:894:1: pg_ElementContentChar : L_ElementContentChar -> ^( ElementContentChar L_ElementContentChar ) ;
    public final XQueryParser.pg_ElementContentChar_return pg_ElementContentChar() throws RecognitionException {
        XQueryParser.pg_ElementContentChar_return retval = new XQueryParser.pg_ElementContentChar_return();
        retval.start = input.LT(1);

        XQDTCommonTree root_0 = null;

        CommonToken L_ElementContentChar395=null;

        XQDTCommonTree L_ElementContentChar395_tree=null;
        RewriteRuleTokenStream stream_L_ElementContentChar=new RewriteRuleTokenStream(adaptor,"token L_ElementContentChar");

        try {
            // XQueryParser.g:895:9: ( L_ElementContentChar -> ^( ElementContentChar L_ElementContentChar ) )
            // XQueryParser.g:895:11: L_ElementContentChar
            {
            L_ElementContentChar395=(CommonToken)match(input,L_ElementContentChar,FOLLOW_L_ElementContentChar_in_pg_ElementContentChar7749); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_L_ElementContentChar.add(L_ElementContentChar395);



            // AST REWRITE
            // elements: L_ElementContentChar
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (XQDTCommonTree)adaptor.nil();
            // 896:17: -> ^( ElementContentChar L_ElementContentChar )
            {
                // XQueryParser.g:896:20: ^( ElementContentChar L_ElementContentChar )
                {
                XQDTCommonTree root_1 = (XQDTCommonTree)adaptor.nil();
                root_1 = (XQDTCommonTree)adaptor.becomeRoot((XQDTCommonTree)adaptor.create(ElementContentChar, "ElementContentChar"), root_1);

                adaptor.addChild(root_1, stream_L_ElementContentChar.nextNode());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (XQDTCommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (XQDTCommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "pg_ElementContentChar"

    public static class pg_CommonContent_return extends ParserRuleReturnScope {
        XQDTCommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "pg_CommonContent"
    // XQueryParser.g:904:1: pg_CommonContent : pm_CommonContent -> ^( CommonContent pm_CommonContent ) ;
    public final XQueryParser.pg_CommonContent_return pg_CommonContent() throws RecognitionException {
        XQueryParser.pg_CommonContent_return retval = new XQueryParser.pg_CommonContent_return();
        retval.start = input.LT(1);

        XQDTCommonTree root_0 = null;

        XQueryParser.pm_CommonContent_return pm_CommonContent396 = null;


        RewriteRuleSubtreeStream stream_pm_CommonContent=new RewriteRuleSubtreeStream(adaptor,"rule pm_CommonContent");
        try {
            // XQueryParser.g:905:9: ( pm_CommonContent -> ^( CommonContent pm_CommonContent ) )
            // XQueryParser.g:905:13: pm_CommonContent
            {
            pushFollow(FOLLOW_pm_CommonContent_in_pg_CommonContent7805);
            pm_CommonContent396=pm_CommonContent();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_pm_CommonContent.add(pm_CommonContent396.getTree());


            // AST REWRITE
            // elements: pm_CommonContent
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (XQDTCommonTree)adaptor.nil();
            // 906:17: -> ^( CommonContent pm_CommonContent )
            {
                // XQueryParser.g:906:20: ^( CommonContent pm_CommonContent )
                {
                XQDTCommonTree root_1 = (XQDTCommonTree)adaptor.nil();
                root_1 = (XQDTCommonTree)adaptor.becomeRoot((XQDTCommonTree)adaptor.create(CommonContent, "CommonContent"), root_1);

                adaptor.addChild(root_1, stream_pm_CommonContent.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (XQDTCommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (XQDTCommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "pg_CommonContent"

    public static class pm_CommonContent_return extends ParserRuleReturnScope {
        XQDTCommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "pm_CommonContent"
    // XQueryParser.g:911:1: pm_CommonContent : ( L_PredefinedEntityRef | L_CharRef | ESCAPE_LBRACKET | ESCAPE_RBRACKET );
    public final XQueryParser.pm_CommonContent_return pm_CommonContent() throws RecognitionException {
        XQueryParser.pm_CommonContent_return retval = new XQueryParser.pm_CommonContent_return();
        retval.start = input.LT(1);

        XQDTCommonTree root_0 = null;

        CommonToken set397=null;

        XQDTCommonTree set397_tree=null;

        try {
            // XQueryParser.g:912:9: ( L_PredefinedEntityRef | L_CharRef | ESCAPE_LBRACKET | ESCAPE_RBRACKET )
            // XQueryParser.g:
            {
            root_0 = (XQDTCommonTree)adaptor.nil();

            set397=(CommonToken)input.LT(1);
            if ( (input.LA(1)>=L_PredefinedEntityRef && input.LA(1)<=ESCAPE_RBRACKET) ) {
                input.consume();
                if ( state.backtracking==0 ) adaptor.addChild(root_0, (XQDTCommonTree)adaptor.create(set397));
                state.errorRecovery=false;state.failed=false;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                MismatchedSetException mse = new MismatchedSetException(null,input);
                throw mse;
            }


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (XQDTCommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (XQDTCommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "pm_CommonContent"

    public static class p_ElemEnclosedExpr_return extends ParserRuleReturnScope {
        XQDTCommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "p_ElemEnclosedExpr"
    // XQueryParser.g:919:1: p_ElemEnclosedExpr : LBRACKET ( pm_Expr ) RBRACKET ;
    public final XQueryParser.p_ElemEnclosedExpr_return p_ElemEnclosedExpr() throws RecognitionException {
        XQueryParser.p_ElemEnclosedExpr_return retval = new XQueryParser.p_ElemEnclosedExpr_return();
        retval.start = input.LT(1);

        XQDTCommonTree root_0 = null;

        CommonToken LBRACKET398=null;
        CommonToken RBRACKET400=null;
        XQueryParser.pm_Expr_return pm_Expr399 = null;


        XQDTCommonTree LBRACKET398_tree=null;
        XQDTCommonTree RBRACKET400_tree=null;

        try {
            // XQueryParser.g:920:9: ( LBRACKET ( pm_Expr ) RBRACKET )
            // XQueryParser.g:920:13: LBRACKET ( pm_Expr ) RBRACKET
            {
            root_0 = (XQDTCommonTree)adaptor.nil();

            LBRACKET398=(CommonToken)match(input,LBRACKET,FOLLOW_LBRACKET_in_p_ElemEnclosedExpr7901); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            LBRACKET398_tree = (XQDTCommonTree)adaptor.create(LBRACKET398);
            adaptor.addChild(root_0, LBRACKET398_tree);
            }
            // XQueryParser.g:921:13: ( pm_Expr )
            // XQueryParser.g:921:14: pm_Expr
            {
            if ( state.backtracking==0 ) {
              pushXQueryLexer();
            }
            pushFollow(FOLLOW_pm_Expr_in_p_ElemEnclosedExpr7918);
            pm_Expr399=pm_Expr();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, pm_Expr399.getTree());
            if ( state.backtracking==0 ) {
              popLexer();
            }

            }

            RBRACKET400=(CommonToken)match(input,RBRACKET,FOLLOW_RBRACKET_in_p_ElemEnclosedExpr7935); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            RBRACKET400_tree = (XQDTCommonTree)adaptor.create(RBRACKET400);
            adaptor.addChild(root_0, RBRACKET400_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (XQDTCommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (XQDTCommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "p_ElemEnclosedExpr"

    public static class p_ComputedConstructor_return extends ParserRuleReturnScope {
        XQDTCommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "p_ComputedConstructor"
    // XQueryParser.g:945:1: p_ComputedConstructor : ( p_CompDocConstructor | p_CompElemConstructor | p_CompAttrConstructor | p_CompNamespaceConstructor | p_CompTextConstructor | p_CompCommentConstructor | p_CompPIConstructor | {...}? => p_CompBinaryConstructor );
    public final XQueryParser.p_ComputedConstructor_return p_ComputedConstructor() throws RecognitionException {
        XQueryParser.p_ComputedConstructor_return retval = new XQueryParser.p_ComputedConstructor_return();
        retval.start = input.LT(1);

        XQDTCommonTree root_0 = null;

        XQueryParser.p_CompDocConstructor_return p_CompDocConstructor401 = null;

        XQueryParser.p_CompElemConstructor_return p_CompElemConstructor402 = null;

        XQueryParser.p_CompAttrConstructor_return p_CompAttrConstructor403 = null;

        XQueryParser.p_CompNamespaceConstructor_return p_CompNamespaceConstructor404 = null;

        XQueryParser.p_CompTextConstructor_return p_CompTextConstructor405 = null;

        XQueryParser.p_CompCommentConstructor_return p_CompCommentConstructor406 = null;

        XQueryParser.p_CompPIConstructor_return p_CompPIConstructor407 = null;

        XQueryParser.p_CompBinaryConstructor_return p_CompBinaryConstructor408 = null;



        try {
            // XQueryParser.g:946:9: ( p_CompDocConstructor | p_CompElemConstructor | p_CompAttrConstructor | p_CompNamespaceConstructor | p_CompTextConstructor | p_CompCommentConstructor | p_CompPIConstructor | {...}? => p_CompBinaryConstructor )
            int alt144=8;
            int LA144_0 = input.LA(1);

            if ( (LA144_0==DOCUMENT) ) {
                alt144=1;
            }
            else if ( (LA144_0==ELEMENT) ) {
                alt144=2;
            }
            else if ( (LA144_0==ATTRIBUTE) ) {
                alt144=3;
            }
            else if ( (LA144_0==NAMESPACE) ) {
                alt144=4;
            }
            else if ( (LA144_0==TEXT) ) {
                alt144=5;
            }
            else if ( (LA144_0==COMMENT) ) {
                alt144=6;
            }
            else if ( (LA144_0==PROCESSING_INSTRUCTION) ) {
                alt144=7;
            }
            else if ( (LA144_0==BINARY) && ((lc(MLS)))) {
                alt144=8;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 144, 0, input);

                throw nvae;
            }
            switch (alt144) {
                case 1 :
                    // XQueryParser.g:946:13: p_CompDocConstructor
                    {
                    root_0 = (XQDTCommonTree)adaptor.nil();

                    pushFollow(FOLLOW_p_CompDocConstructor_in_p_ComputedConstructor7986);
                    p_CompDocConstructor401=p_CompDocConstructor();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, p_CompDocConstructor401.getTree());

                    }
                    break;
                case 2 :
                    // XQueryParser.g:947:11: p_CompElemConstructor
                    {
                    root_0 = (XQDTCommonTree)adaptor.nil();

                    pushFollow(FOLLOW_p_CompElemConstructor_in_p_ComputedConstructor7998);
                    p_CompElemConstructor402=p_CompElemConstructor();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, p_CompElemConstructor402.getTree());

                    }
                    break;
                case 3 :
                    // XQueryParser.g:948:11: p_CompAttrConstructor
                    {
                    root_0 = (XQDTCommonTree)adaptor.nil();

                    pushFollow(FOLLOW_p_CompAttrConstructor_in_p_ComputedConstructor8010);
                    p_CompAttrConstructor403=p_CompAttrConstructor();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, p_CompAttrConstructor403.getTree());

                    }
                    break;
                case 4 :
                    // XQueryParser.g:949:11: p_CompNamespaceConstructor
                    {
                    root_0 = (XQDTCommonTree)adaptor.nil();

                    pushFollow(FOLLOW_p_CompNamespaceConstructor_in_p_ComputedConstructor8022);
                    p_CompNamespaceConstructor404=p_CompNamespaceConstructor();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, p_CompNamespaceConstructor404.getTree());

                    }
                    break;
                case 5 :
                    // XQueryParser.g:950:11: p_CompTextConstructor
                    {
                    root_0 = (XQDTCommonTree)adaptor.nil();

                    pushFollow(FOLLOW_p_CompTextConstructor_in_p_ComputedConstructor8034);
                    p_CompTextConstructor405=p_CompTextConstructor();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, p_CompTextConstructor405.getTree());

                    }
                    break;
                case 6 :
                    // XQueryParser.g:951:11: p_CompCommentConstructor
                    {
                    root_0 = (XQDTCommonTree)adaptor.nil();

                    pushFollow(FOLLOW_p_CompCommentConstructor_in_p_ComputedConstructor8046);
                    p_CompCommentConstructor406=p_CompCommentConstructor();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, p_CompCommentConstructor406.getTree());

                    }
                    break;
                case 7 :
                    // XQueryParser.g:952:11: p_CompPIConstructor
                    {
                    root_0 = (XQDTCommonTree)adaptor.nil();

                    pushFollow(FOLLOW_p_CompPIConstructor_in_p_ComputedConstructor8058);
                    p_CompPIConstructor407=p_CompPIConstructor();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, p_CompPIConstructor407.getTree());

                    }
                    break;
                case 8 :
                    // XQueryParser.g:953:11: {...}? => p_CompBinaryConstructor
                    {
                    root_0 = (XQDTCommonTree)adaptor.nil();

                    if ( !((lc(MLS))) ) {
                        if (state.backtracking>0) {state.failed=true; return retval;}
                        throw new FailedPredicateException(input, "p_ComputedConstructor", "lc(MLS)");
                    }
                    pushFollow(FOLLOW_p_CompBinaryConstructor_in_p_ComputedConstructor8073);
                    p_CompBinaryConstructor408=p_CompBinaryConstructor();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, p_CompBinaryConstructor408.getTree());

                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (XQDTCommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (XQDTCommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "p_ComputedConstructor"

    public static class p_CompDocConstructor_return extends ParserRuleReturnScope {
        XQDTCommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "p_CompDocConstructor"
    // XQueryParser.g:957:1: p_CompDocConstructor : k= DOCUMENT LBRACKET pm_Expr RBRACKET ;
    public final XQueryParser.p_CompDocConstructor_return p_CompDocConstructor() throws RecognitionException {
        XQueryParser.p_CompDocConstructor_return retval = new XQueryParser.p_CompDocConstructor_return();
        retval.start = input.LT(1);

        XQDTCommonTree root_0 = null;

        CommonToken k=null;
        CommonToken LBRACKET409=null;
        CommonToken RBRACKET411=null;
        XQueryParser.pm_Expr_return pm_Expr410 = null;


        XQDTCommonTree k_tree=null;
        XQDTCommonTree LBRACKET409_tree=null;
        XQDTCommonTree RBRACKET411_tree=null;

        try {
            // XQueryParser.g:958:9: (k= DOCUMENT LBRACKET pm_Expr RBRACKET )
            // XQueryParser.g:958:13: k= DOCUMENT LBRACKET pm_Expr RBRACKET
            {
            root_0 = (XQDTCommonTree)adaptor.nil();

            k=(CommonToken)match(input,DOCUMENT,FOLLOW_DOCUMENT_in_p_CompDocConstructor8107); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            k_tree = (XQDTCommonTree)adaptor.create(k);
            adaptor.addChild(root_0, k_tree);
            }
            if ( state.backtracking==0 ) {
              ak(k);
            }
            LBRACKET409=(CommonToken)match(input,LBRACKET,FOLLOW_LBRACKET_in_p_CompDocConstructor8111); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            LBRACKET409_tree = (XQDTCommonTree)adaptor.create(LBRACKET409);
            adaptor.addChild(root_0, LBRACKET409_tree);
            }
            pushFollow(FOLLOW_pm_Expr_in_p_CompDocConstructor8113);
            pm_Expr410=pm_Expr();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, pm_Expr410.getTree());
            RBRACKET411=(CommonToken)match(input,RBRACKET,FOLLOW_RBRACKET_in_p_CompDocConstructor8115); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            RBRACKET411_tree = (XQDTCommonTree)adaptor.create(RBRACKET411);
            adaptor.addChild(root_0, RBRACKET411_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (XQDTCommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (XQDTCommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "p_CompDocConstructor"

    public static class p_CompElemConstructor_return extends ParserRuleReturnScope {
        XQDTCommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "p_CompElemConstructor"
    // XQueryParser.g:962:1: p_CompElemConstructor : k= ELEMENT ( p_QName | ( LBRACKET pm_Expr RBRACKET ) ) LBRACKET ( pm_Expr )? RBRACKET ;
    public final XQueryParser.p_CompElemConstructor_return p_CompElemConstructor() throws RecognitionException {
        XQueryParser.p_CompElemConstructor_return retval = new XQueryParser.p_CompElemConstructor_return();
        retval.start = input.LT(1);

        XQDTCommonTree root_0 = null;

        CommonToken k=null;
        CommonToken LBRACKET413=null;
        CommonToken RBRACKET415=null;
        CommonToken LBRACKET416=null;
        CommonToken RBRACKET418=null;
        XQueryParser.p_QName_return p_QName412 = null;

        XQueryParser.pm_Expr_return pm_Expr414 = null;

        XQueryParser.pm_Expr_return pm_Expr417 = null;


        XQDTCommonTree k_tree=null;
        XQDTCommonTree LBRACKET413_tree=null;
        XQDTCommonTree RBRACKET415_tree=null;
        XQDTCommonTree LBRACKET416_tree=null;
        XQDTCommonTree RBRACKET418_tree=null;

        try {
            // XQueryParser.g:963:9: (k= ELEMENT ( p_QName | ( LBRACKET pm_Expr RBRACKET ) ) LBRACKET ( pm_Expr )? RBRACKET )
            // XQueryParser.g:963:13: k= ELEMENT ( p_QName | ( LBRACKET pm_Expr RBRACKET ) ) LBRACKET ( pm_Expr )? RBRACKET
            {
            root_0 = (XQDTCommonTree)adaptor.nil();

            k=(CommonToken)match(input,ELEMENT,FOLLOW_ELEMENT_in_p_CompElemConstructor8156); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            k_tree = (XQDTCommonTree)adaptor.create(k);
            adaptor.addChild(root_0, k_tree);
            }
            if ( state.backtracking==0 ) {
              ak(k);
            }
            // XQueryParser.g:963:33: ( p_QName | ( LBRACKET pm_Expr RBRACKET ) )
            int alt145=2;
            int LA145_0 = input.LA(1);

            if ( ((LA145_0>=ANCESTOR && LA145_0<=EXIT)||(LA145_0>=SEQUENTIAL && LA145_0<=MAINTAINED)||(LA145_0>=MUTABLE && LA145_0<=QUOT_ER)||LA145_0==L_NCName||LA145_0==EXPLICITLY) ) {
                alt145=1;
            }
            else if ( (LA145_0==LBRACKET) ) {
                alt145=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 145, 0, input);

                throw nvae;
            }
            switch (alt145) {
                case 1 :
                    // XQueryParser.g:963:34: p_QName
                    {
                    pushFollow(FOLLOW_p_QName_in_p_CompElemConstructor8161);
                    p_QName412=p_QName();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, p_QName412.getTree());

                    }
                    break;
                case 2 :
                    // XQueryParser.g:963:44: ( LBRACKET pm_Expr RBRACKET )
                    {
                    // XQueryParser.g:963:44: ( LBRACKET pm_Expr RBRACKET )
                    // XQueryParser.g:963:45: LBRACKET pm_Expr RBRACKET
                    {
                    LBRACKET413=(CommonToken)match(input,LBRACKET,FOLLOW_LBRACKET_in_p_CompElemConstructor8166); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    LBRACKET413_tree = (XQDTCommonTree)adaptor.create(LBRACKET413);
                    adaptor.addChild(root_0, LBRACKET413_tree);
                    }
                    pushFollow(FOLLOW_pm_Expr_in_p_CompElemConstructor8168);
                    pm_Expr414=pm_Expr();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, pm_Expr414.getTree());
                    RBRACKET415=(CommonToken)match(input,RBRACKET,FOLLOW_RBRACKET_in_p_CompElemConstructor8170); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    RBRACKET415_tree = (XQDTCommonTree)adaptor.create(RBRACKET415);
                    adaptor.addChild(root_0, RBRACKET415_tree);
                    }

                    }


                    }
                    break;

            }

            LBRACKET416=(CommonToken)match(input,LBRACKET,FOLLOW_LBRACKET_in_p_CompElemConstructor8174); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            LBRACKET416_tree = (XQDTCommonTree)adaptor.create(LBRACKET416);
            adaptor.addChild(root_0, LBRACKET416_tree);
            }
            // XQueryParser.g:963:82: ( pm_Expr )?
            int alt146=2;
            int LA146_0 = input.LA(1);

            if ( ((LA146_0>=ANCESTOR && LA146_0<=EXIT)||(LA146_0>=SEQUENTIAL && LA146_0<=MAINTAINED)||(LA146_0>=MUTABLE && LA146_0<=LPAREN)||LA146_0==DOLLAR||(LA146_0>=STAR && LA146_0<=SMALLER)||(LA146_0>=SLASH && LA146_0<=DOT_DOT)||LA146_0==ATTR_SIGN||(LA146_0>=APOS && LA146_0<=QUOT)||LA146_0==L_NCName||(LA146_0>=L_Pragma && LA146_0<=L_DoubleLiteral)||LA146_0==EXPLICITLY) ) {
                alt146=1;
            }
            switch (alt146) {
                case 1 :
                    // XQueryParser.g:963:82: pm_Expr
                    {
                    pushFollow(FOLLOW_pm_Expr_in_p_CompElemConstructor8176);
                    pm_Expr417=pm_Expr();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, pm_Expr417.getTree());

                    }
                    break;

            }

            RBRACKET418=(CommonToken)match(input,RBRACKET,FOLLOW_RBRACKET_in_p_CompElemConstructor8179); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            RBRACKET418_tree = (XQDTCommonTree)adaptor.create(RBRACKET418);
            adaptor.addChild(root_0, RBRACKET418_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (XQDTCommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (XQDTCommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "p_CompElemConstructor"

    public static class p_CompAttrConstructor_return extends ParserRuleReturnScope {
        XQDTCommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "p_CompAttrConstructor"
    // XQueryParser.g:970:1: p_CompAttrConstructor : k= ATTRIBUTE ( p_QName | ( LBRACKET pm_Expr RBRACKET ) ) LBRACKET ( pm_Expr )? RBRACKET ;
    public final XQueryParser.p_CompAttrConstructor_return p_CompAttrConstructor() throws RecognitionException {
        XQueryParser.p_CompAttrConstructor_return retval = new XQueryParser.p_CompAttrConstructor_return();
        retval.start = input.LT(1);

        XQDTCommonTree root_0 = null;

        CommonToken k=null;
        CommonToken LBRACKET420=null;
        CommonToken RBRACKET422=null;
        CommonToken LBRACKET423=null;
        CommonToken RBRACKET425=null;
        XQueryParser.p_QName_return p_QName419 = null;

        XQueryParser.pm_Expr_return pm_Expr421 = null;

        XQueryParser.pm_Expr_return pm_Expr424 = null;


        XQDTCommonTree k_tree=null;
        XQDTCommonTree LBRACKET420_tree=null;
        XQDTCommonTree RBRACKET422_tree=null;
        XQDTCommonTree LBRACKET423_tree=null;
        XQDTCommonTree RBRACKET425_tree=null;

        try {
            // XQueryParser.g:971:9: (k= ATTRIBUTE ( p_QName | ( LBRACKET pm_Expr RBRACKET ) ) LBRACKET ( pm_Expr )? RBRACKET )
            // XQueryParser.g:971:13: k= ATTRIBUTE ( p_QName | ( LBRACKET pm_Expr RBRACKET ) ) LBRACKET ( pm_Expr )? RBRACKET
            {
            root_0 = (XQDTCommonTree)adaptor.nil();

            k=(CommonToken)match(input,ATTRIBUTE,FOLLOW_ATTRIBUTE_in_p_CompAttrConstructor8212); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            k_tree = (XQDTCommonTree)adaptor.create(k);
            adaptor.addChild(root_0, k_tree);
            }
            if ( state.backtracking==0 ) {
              ak(k);
            }
            // XQueryParser.g:971:35: ( p_QName | ( LBRACKET pm_Expr RBRACKET ) )
            int alt147=2;
            int LA147_0 = input.LA(1);

            if ( ((LA147_0>=ANCESTOR && LA147_0<=EXIT)||(LA147_0>=SEQUENTIAL && LA147_0<=MAINTAINED)||(LA147_0>=MUTABLE && LA147_0<=QUOT_ER)||LA147_0==L_NCName||LA147_0==EXPLICITLY) ) {
                alt147=1;
            }
            else if ( (LA147_0==LBRACKET) ) {
                alt147=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 147, 0, input);

                throw nvae;
            }
            switch (alt147) {
                case 1 :
                    // XQueryParser.g:971:36: p_QName
                    {
                    pushFollow(FOLLOW_p_QName_in_p_CompAttrConstructor8217);
                    p_QName419=p_QName();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, p_QName419.getTree());

                    }
                    break;
                case 2 :
                    // XQueryParser.g:971:46: ( LBRACKET pm_Expr RBRACKET )
                    {
                    // XQueryParser.g:971:46: ( LBRACKET pm_Expr RBRACKET )
                    // XQueryParser.g:971:47: LBRACKET pm_Expr RBRACKET
                    {
                    LBRACKET420=(CommonToken)match(input,LBRACKET,FOLLOW_LBRACKET_in_p_CompAttrConstructor8222); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    LBRACKET420_tree = (XQDTCommonTree)adaptor.create(LBRACKET420);
                    adaptor.addChild(root_0, LBRACKET420_tree);
                    }
                    pushFollow(FOLLOW_pm_Expr_in_p_CompAttrConstructor8224);
                    pm_Expr421=pm_Expr();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, pm_Expr421.getTree());
                    RBRACKET422=(CommonToken)match(input,RBRACKET,FOLLOW_RBRACKET_in_p_CompAttrConstructor8226); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    RBRACKET422_tree = (XQDTCommonTree)adaptor.create(RBRACKET422);
                    adaptor.addChild(root_0, RBRACKET422_tree);
                    }

                    }


                    }
                    break;

            }

            LBRACKET423=(CommonToken)match(input,LBRACKET,FOLLOW_LBRACKET_in_p_CompAttrConstructor8230); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            LBRACKET423_tree = (XQDTCommonTree)adaptor.create(LBRACKET423);
            adaptor.addChild(root_0, LBRACKET423_tree);
            }
            // XQueryParser.g:971:84: ( pm_Expr )?
            int alt148=2;
            int LA148_0 = input.LA(1);

            if ( ((LA148_0>=ANCESTOR && LA148_0<=EXIT)||(LA148_0>=SEQUENTIAL && LA148_0<=MAINTAINED)||(LA148_0>=MUTABLE && LA148_0<=LPAREN)||LA148_0==DOLLAR||(LA148_0>=STAR && LA148_0<=SMALLER)||(LA148_0>=SLASH && LA148_0<=DOT_DOT)||LA148_0==ATTR_SIGN||(LA148_0>=APOS && LA148_0<=QUOT)||LA148_0==L_NCName||(LA148_0>=L_Pragma && LA148_0<=L_DoubleLiteral)||LA148_0==EXPLICITLY) ) {
                alt148=1;
            }
            switch (alt148) {
                case 1 :
                    // XQueryParser.g:971:84: pm_Expr
                    {
                    pushFollow(FOLLOW_pm_Expr_in_p_CompAttrConstructor8232);
                    pm_Expr424=pm_Expr();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, pm_Expr424.getTree());

                    }
                    break;

            }

            RBRACKET425=(CommonToken)match(input,RBRACKET,FOLLOW_RBRACKET_in_p_CompAttrConstructor8235); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            RBRACKET425_tree = (XQDTCommonTree)adaptor.create(RBRACKET425);
            adaptor.addChild(root_0, RBRACKET425_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (XQDTCommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (XQDTCommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "p_CompAttrConstructor"

    public static class p_CompNamespaceConstructor_return extends ParserRuleReturnScope {
        XQDTCommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "p_CompNamespaceConstructor"
    // XQueryParser.g:975:1: p_CompNamespaceConstructor : k= NAMESPACE ( p_NCName | ( LBRACKET pm_Expr RBRACKET ) ) LBRACKET ( pm_Expr )? RBRACKET ;
    public final XQueryParser.p_CompNamespaceConstructor_return p_CompNamespaceConstructor() throws RecognitionException {
        XQueryParser.p_CompNamespaceConstructor_return retval = new XQueryParser.p_CompNamespaceConstructor_return();
        retval.start = input.LT(1);

        XQDTCommonTree root_0 = null;

        CommonToken k=null;
        CommonToken LBRACKET427=null;
        CommonToken RBRACKET429=null;
        CommonToken LBRACKET430=null;
        CommonToken RBRACKET432=null;
        XQueryParser.p_NCName_return p_NCName426 = null;

        XQueryParser.pm_Expr_return pm_Expr428 = null;

        XQueryParser.pm_Expr_return pm_Expr431 = null;


        XQDTCommonTree k_tree=null;
        XQDTCommonTree LBRACKET427_tree=null;
        XQDTCommonTree RBRACKET429_tree=null;
        XQDTCommonTree LBRACKET430_tree=null;
        XQDTCommonTree RBRACKET432_tree=null;

        try {
            // XQueryParser.g:976:9: (k= NAMESPACE ( p_NCName | ( LBRACKET pm_Expr RBRACKET ) ) LBRACKET ( pm_Expr )? RBRACKET )
            // XQueryParser.g:976:11: k= NAMESPACE ( p_NCName | ( LBRACKET pm_Expr RBRACKET ) ) LBRACKET ( pm_Expr )? RBRACKET
            {
            root_0 = (XQDTCommonTree)adaptor.nil();

            k=(CommonToken)match(input,NAMESPACE,FOLLOW_NAMESPACE_in_p_CompNamespaceConstructor8263); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            k_tree = (XQDTCommonTree)adaptor.create(k);
            adaptor.addChild(root_0, k_tree);
            }
            if ( state.backtracking==0 ) {
              ak(k);
            }
            // XQueryParser.g:976:33: ( p_NCName | ( LBRACKET pm_Expr RBRACKET ) )
            int alt149=2;
            int LA149_0 = input.LA(1);

            if ( ((LA149_0>=ANCESTOR && LA149_0<=EXIT)||(LA149_0>=SEQUENTIAL && LA149_0<=MAINTAINED)||(LA149_0>=MUTABLE && LA149_0<=QUOT_ER)||LA149_0==L_NCName||LA149_0==EXPLICITLY) ) {
                alt149=1;
            }
            else if ( (LA149_0==LBRACKET) ) {
                alt149=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 149, 0, input);

                throw nvae;
            }
            switch (alt149) {
                case 1 :
                    // XQueryParser.g:976:34: p_NCName
                    {
                    pushFollow(FOLLOW_p_NCName_in_p_CompNamespaceConstructor8268);
                    p_NCName426=p_NCName();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, p_NCName426.getTree());

                    }
                    break;
                case 2 :
                    // XQueryParser.g:976:45: ( LBRACKET pm_Expr RBRACKET )
                    {
                    // XQueryParser.g:976:45: ( LBRACKET pm_Expr RBRACKET )
                    // XQueryParser.g:976:46: LBRACKET pm_Expr RBRACKET
                    {
                    LBRACKET427=(CommonToken)match(input,LBRACKET,FOLLOW_LBRACKET_in_p_CompNamespaceConstructor8273); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    LBRACKET427_tree = (XQDTCommonTree)adaptor.create(LBRACKET427);
                    adaptor.addChild(root_0, LBRACKET427_tree);
                    }
                    pushFollow(FOLLOW_pm_Expr_in_p_CompNamespaceConstructor8275);
                    pm_Expr428=pm_Expr();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, pm_Expr428.getTree());
                    RBRACKET429=(CommonToken)match(input,RBRACKET,FOLLOW_RBRACKET_in_p_CompNamespaceConstructor8277); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    RBRACKET429_tree = (XQDTCommonTree)adaptor.create(RBRACKET429);
                    adaptor.addChild(root_0, RBRACKET429_tree);
                    }

                    }


                    }
                    break;

            }

            LBRACKET430=(CommonToken)match(input,LBRACKET,FOLLOW_LBRACKET_in_p_CompNamespaceConstructor8281); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            LBRACKET430_tree = (XQDTCommonTree)adaptor.create(LBRACKET430);
            adaptor.addChild(root_0, LBRACKET430_tree);
            }
            // XQueryParser.g:976:83: ( pm_Expr )?
            int alt150=2;
            int LA150_0 = input.LA(1);

            if ( ((LA150_0>=ANCESTOR && LA150_0<=EXIT)||(LA150_0>=SEQUENTIAL && LA150_0<=MAINTAINED)||(LA150_0>=MUTABLE && LA150_0<=LPAREN)||LA150_0==DOLLAR||(LA150_0>=STAR && LA150_0<=SMALLER)||(LA150_0>=SLASH && LA150_0<=DOT_DOT)||LA150_0==ATTR_SIGN||(LA150_0>=APOS && LA150_0<=QUOT)||LA150_0==L_NCName||(LA150_0>=L_Pragma && LA150_0<=L_DoubleLiteral)||LA150_0==EXPLICITLY) ) {
                alt150=1;
            }
            switch (alt150) {
                case 1 :
                    // XQueryParser.g:976:83: pm_Expr
                    {
                    pushFollow(FOLLOW_pm_Expr_in_p_CompNamespaceConstructor8283);
                    pm_Expr431=pm_Expr();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, pm_Expr431.getTree());

                    }
                    break;

            }

            RBRACKET432=(CommonToken)match(input,RBRACKET,FOLLOW_RBRACKET_in_p_CompNamespaceConstructor8286); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            RBRACKET432_tree = (XQDTCommonTree)adaptor.create(RBRACKET432);
            adaptor.addChild(root_0, RBRACKET432_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (XQDTCommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (XQDTCommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "p_CompNamespaceConstructor"

    public static class p_CompTextConstructor_return extends ParserRuleReturnScope {
        XQDTCommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "p_CompTextConstructor"
    // XQueryParser.g:986:1: p_CompTextConstructor : k= TEXT LBRACKET pm_Expr RBRACKET ;
    public final XQueryParser.p_CompTextConstructor_return p_CompTextConstructor() throws RecognitionException {
        XQueryParser.p_CompTextConstructor_return retval = new XQueryParser.p_CompTextConstructor_return();
        retval.start = input.LT(1);

        XQDTCommonTree root_0 = null;

        CommonToken k=null;
        CommonToken LBRACKET433=null;
        CommonToken RBRACKET435=null;
        XQueryParser.pm_Expr_return pm_Expr434 = null;


        XQDTCommonTree k_tree=null;
        XQDTCommonTree LBRACKET433_tree=null;
        XQDTCommonTree RBRACKET435_tree=null;

        try {
            // XQueryParser.g:987:9: (k= TEXT LBRACKET pm_Expr RBRACKET )
            // XQueryParser.g:987:13: k= TEXT LBRACKET pm_Expr RBRACKET
            {
            root_0 = (XQDTCommonTree)adaptor.nil();

            k=(CommonToken)match(input,TEXT,FOLLOW_TEXT_in_p_CompTextConstructor8322); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            k_tree = (XQDTCommonTree)adaptor.create(k);
            adaptor.addChild(root_0, k_tree);
            }
            if ( state.backtracking==0 ) {
              ak(k);
            }
            LBRACKET433=(CommonToken)match(input,LBRACKET,FOLLOW_LBRACKET_in_p_CompTextConstructor8326); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            LBRACKET433_tree = (XQDTCommonTree)adaptor.create(LBRACKET433);
            adaptor.addChild(root_0, LBRACKET433_tree);
            }
            pushFollow(FOLLOW_pm_Expr_in_p_CompTextConstructor8328);
            pm_Expr434=pm_Expr();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, pm_Expr434.getTree());
            RBRACKET435=(CommonToken)match(input,RBRACKET,FOLLOW_RBRACKET_in_p_CompTextConstructor8330); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            RBRACKET435_tree = (XQDTCommonTree)adaptor.create(RBRACKET435);
            adaptor.addChild(root_0, RBRACKET435_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (XQDTCommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (XQDTCommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "p_CompTextConstructor"

    public static class p_CompBinaryConstructor_return extends ParserRuleReturnScope {
        XQDTCommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "p_CompBinaryConstructor"
    // XQueryParser.g:991:1: p_CompBinaryConstructor : k= BINARY LBRACKET pm_Expr RBRACKET ;
    public final XQueryParser.p_CompBinaryConstructor_return p_CompBinaryConstructor() throws RecognitionException {
        XQueryParser.p_CompBinaryConstructor_return retval = new XQueryParser.p_CompBinaryConstructor_return();
        retval.start = input.LT(1);

        XQDTCommonTree root_0 = null;

        CommonToken k=null;
        CommonToken LBRACKET436=null;
        CommonToken RBRACKET438=null;
        XQueryParser.pm_Expr_return pm_Expr437 = null;


        XQDTCommonTree k_tree=null;
        XQDTCommonTree LBRACKET436_tree=null;
        XQDTCommonTree RBRACKET438_tree=null;

        try {
            // XQueryParser.g:992:9: (k= BINARY LBRACKET pm_Expr RBRACKET )
            // XQueryParser.g:992:13: k= BINARY LBRACKET pm_Expr RBRACKET
            {
            root_0 = (XQDTCommonTree)adaptor.nil();

            k=(CommonToken)match(input,BINARY,FOLLOW_BINARY_in_p_CompBinaryConstructor8360); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            k_tree = (XQDTCommonTree)adaptor.create(k);
            adaptor.addChild(root_0, k_tree);
            }
            if ( state.backtracking==0 ) {
              ak(k);
            }
            LBRACKET436=(CommonToken)match(input,LBRACKET,FOLLOW_LBRACKET_in_p_CompBinaryConstructor8364); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            LBRACKET436_tree = (XQDTCommonTree)adaptor.create(LBRACKET436);
            adaptor.addChild(root_0, LBRACKET436_tree);
            }
            pushFollow(FOLLOW_pm_Expr_in_p_CompBinaryConstructor8366);
            pm_Expr437=pm_Expr();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, pm_Expr437.getTree());
            RBRACKET438=(CommonToken)match(input,RBRACKET,FOLLOW_RBRACKET_in_p_CompBinaryConstructor8368); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            RBRACKET438_tree = (XQDTCommonTree)adaptor.create(RBRACKET438);
            adaptor.addChild(root_0, RBRACKET438_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (XQDTCommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (XQDTCommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "p_CompBinaryConstructor"

    public static class p_CompCommentConstructor_return extends ParserRuleReturnScope {
        XQDTCommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "p_CompCommentConstructor"
    // XQueryParser.g:996:1: p_CompCommentConstructor : k= COMMENT LBRACKET pm_Expr RBRACKET ;
    public final XQueryParser.p_CompCommentConstructor_return p_CompCommentConstructor() throws RecognitionException {
        XQueryParser.p_CompCommentConstructor_return retval = new XQueryParser.p_CompCommentConstructor_return();
        retval.start = input.LT(1);

        XQDTCommonTree root_0 = null;

        CommonToken k=null;
        CommonToken LBRACKET439=null;
        CommonToken RBRACKET441=null;
        XQueryParser.pm_Expr_return pm_Expr440 = null;


        XQDTCommonTree k_tree=null;
        XQDTCommonTree LBRACKET439_tree=null;
        XQDTCommonTree RBRACKET441_tree=null;

        try {
            // XQueryParser.g:997:9: (k= COMMENT LBRACKET pm_Expr RBRACKET )
            // XQueryParser.g:997:13: k= COMMENT LBRACKET pm_Expr RBRACKET
            {
            root_0 = (XQDTCommonTree)adaptor.nil();

            k=(CommonToken)match(input,COMMENT,FOLLOW_COMMENT_in_p_CompCommentConstructor8398); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            k_tree = (XQDTCommonTree)adaptor.create(k);
            adaptor.addChild(root_0, k_tree);
            }
            if ( state.backtracking==0 ) {
              ak(k);
            }
            LBRACKET439=(CommonToken)match(input,LBRACKET,FOLLOW_LBRACKET_in_p_CompCommentConstructor8402); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            LBRACKET439_tree = (XQDTCommonTree)adaptor.create(LBRACKET439);
            adaptor.addChild(root_0, LBRACKET439_tree);
            }
            pushFollow(FOLLOW_pm_Expr_in_p_CompCommentConstructor8404);
            pm_Expr440=pm_Expr();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, pm_Expr440.getTree());
            RBRACKET441=(CommonToken)match(input,RBRACKET,FOLLOW_RBRACKET_in_p_CompCommentConstructor8406); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            RBRACKET441_tree = (XQDTCommonTree)adaptor.create(RBRACKET441);
            adaptor.addChild(root_0, RBRACKET441_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (XQDTCommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (XQDTCommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "p_CompCommentConstructor"

    public static class p_CompPIConstructor_return extends ParserRuleReturnScope {
        XQDTCommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "p_CompPIConstructor"
    // XQueryParser.g:1001:1: p_CompPIConstructor : k= PROCESSING_INSTRUCTION ( p_NCName | ( LBRACKET pm_Expr RBRACKET ) ) LBRACKET ( pm_Expr )? RBRACKET ;
    public final XQueryParser.p_CompPIConstructor_return p_CompPIConstructor() throws RecognitionException {
        XQueryParser.p_CompPIConstructor_return retval = new XQueryParser.p_CompPIConstructor_return();
        retval.start = input.LT(1);

        XQDTCommonTree root_0 = null;

        CommonToken k=null;
        CommonToken LBRACKET443=null;
        CommonToken RBRACKET445=null;
        CommonToken LBRACKET446=null;
        CommonToken RBRACKET448=null;
        XQueryParser.p_NCName_return p_NCName442 = null;

        XQueryParser.pm_Expr_return pm_Expr444 = null;

        XQueryParser.pm_Expr_return pm_Expr447 = null;


        XQDTCommonTree k_tree=null;
        XQDTCommonTree LBRACKET443_tree=null;
        XQDTCommonTree RBRACKET445_tree=null;
        XQDTCommonTree LBRACKET446_tree=null;
        XQDTCommonTree RBRACKET448_tree=null;

        try {
            // XQueryParser.g:1002:9: (k= PROCESSING_INSTRUCTION ( p_NCName | ( LBRACKET pm_Expr RBRACKET ) ) LBRACKET ( pm_Expr )? RBRACKET )
            // XQueryParser.g:1002:13: k= PROCESSING_INSTRUCTION ( p_NCName | ( LBRACKET pm_Expr RBRACKET ) ) LBRACKET ( pm_Expr )? RBRACKET
            {
            root_0 = (XQDTCommonTree)adaptor.nil();

            k=(CommonToken)match(input,PROCESSING_INSTRUCTION,FOLLOW_PROCESSING_INSTRUCTION_in_p_CompPIConstructor8437); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            k_tree = (XQDTCommonTree)adaptor.create(k);
            adaptor.addChild(root_0, k_tree);
            }
            if ( state.backtracking==0 ) {
              ak(k);
            }
            // XQueryParser.g:1002:48: ( p_NCName | ( LBRACKET pm_Expr RBRACKET ) )
            int alt151=2;
            int LA151_0 = input.LA(1);

            if ( ((LA151_0>=ANCESTOR && LA151_0<=EXIT)||(LA151_0>=SEQUENTIAL && LA151_0<=MAINTAINED)||(LA151_0>=MUTABLE && LA151_0<=QUOT_ER)||LA151_0==L_NCName||LA151_0==EXPLICITLY) ) {
                alt151=1;
            }
            else if ( (LA151_0==LBRACKET) ) {
                alt151=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 151, 0, input);

                throw nvae;
            }
            switch (alt151) {
                case 1 :
                    // XQueryParser.g:1002:49: p_NCName
                    {
                    pushFollow(FOLLOW_p_NCName_in_p_CompPIConstructor8442);
                    p_NCName442=p_NCName();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, p_NCName442.getTree());

                    }
                    break;
                case 2 :
                    // XQueryParser.g:1002:60: ( LBRACKET pm_Expr RBRACKET )
                    {
                    // XQueryParser.g:1002:60: ( LBRACKET pm_Expr RBRACKET )
                    // XQueryParser.g:1002:61: LBRACKET pm_Expr RBRACKET
                    {
                    LBRACKET443=(CommonToken)match(input,LBRACKET,FOLLOW_LBRACKET_in_p_CompPIConstructor8447); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    LBRACKET443_tree = (XQDTCommonTree)adaptor.create(LBRACKET443);
                    adaptor.addChild(root_0, LBRACKET443_tree);
                    }
                    pushFollow(FOLLOW_pm_Expr_in_p_CompPIConstructor8449);
                    pm_Expr444=pm_Expr();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, pm_Expr444.getTree());
                    RBRACKET445=(CommonToken)match(input,RBRACKET,FOLLOW_RBRACKET_in_p_CompPIConstructor8451); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    RBRACKET445_tree = (XQDTCommonTree)adaptor.create(RBRACKET445);
                    adaptor.addChild(root_0, RBRACKET445_tree);
                    }

                    }


                    }
                    break;

            }

            LBRACKET446=(CommonToken)match(input,LBRACKET,FOLLOW_LBRACKET_in_p_CompPIConstructor8455); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            LBRACKET446_tree = (XQDTCommonTree)adaptor.create(LBRACKET446);
            adaptor.addChild(root_0, LBRACKET446_tree);
            }
            // XQueryParser.g:1002:98: ( pm_Expr )?
            int alt152=2;
            int LA152_0 = input.LA(1);

            if ( ((LA152_0>=ANCESTOR && LA152_0<=EXIT)||(LA152_0>=SEQUENTIAL && LA152_0<=MAINTAINED)||(LA152_0>=MUTABLE && LA152_0<=LPAREN)||LA152_0==DOLLAR||(LA152_0>=STAR && LA152_0<=SMALLER)||(LA152_0>=SLASH && LA152_0<=DOT_DOT)||LA152_0==ATTR_SIGN||(LA152_0>=APOS && LA152_0<=QUOT)||LA152_0==L_NCName||(LA152_0>=L_Pragma && LA152_0<=L_DoubleLiteral)||LA152_0==EXPLICITLY) ) {
                alt152=1;
            }
            switch (alt152) {
                case 1 :
                    // XQueryParser.g:1002:98: pm_Expr
                    {
                    pushFollow(FOLLOW_pm_Expr_in_p_CompPIConstructor8457);
                    pm_Expr447=pm_Expr();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, pm_Expr447.getTree());

                    }
                    break;

            }

            RBRACKET448=(CommonToken)match(input,RBRACKET,FOLLOW_RBRACKET_in_p_CompPIConstructor8460); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            RBRACKET448_tree = (XQDTCommonTree)adaptor.create(RBRACKET448);
            adaptor.addChild(root_0, RBRACKET448_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (XQDTCommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (XQDTCommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "p_CompPIConstructor"

    public static class p_SingleType_return extends ParserRuleReturnScope {
        XQDTCommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "p_SingleType"
    // XQueryParser.g:1006:1: p_SingleType : p_AtomicType ( QUESTION )? ;
    public final XQueryParser.p_SingleType_return p_SingleType() throws RecognitionException {
        XQueryParser.p_SingleType_return retval = new XQueryParser.p_SingleType_return();
        retval.start = input.LT(1);

        XQDTCommonTree root_0 = null;

        CommonToken QUESTION450=null;
        XQueryParser.p_AtomicType_return p_AtomicType449 = null;


        XQDTCommonTree QUESTION450_tree=null;

        try {
            // XQueryParser.g:1007:9: ( p_AtomicType ( QUESTION )? )
            // XQueryParser.g:1007:13: p_AtomicType ( QUESTION )?
            {
            root_0 = (XQDTCommonTree)adaptor.nil();

            pushFollow(FOLLOW_p_AtomicType_in_p_SingleType8488);
            p_AtomicType449=p_AtomicType();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, p_AtomicType449.getTree());
            // XQueryParser.g:1007:26: ( QUESTION )?
            int alt153=2;
            int LA153_0 = input.LA(1);

            if ( (LA153_0==QUESTION) ) {
                alt153=1;
            }
            switch (alt153) {
                case 1 :
                    // XQueryParser.g:1007:26: QUESTION
                    {
                    QUESTION450=(CommonToken)match(input,QUESTION,FOLLOW_QUESTION_in_p_SingleType8490); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    QUESTION450_tree = (XQDTCommonTree)adaptor.create(QUESTION450);
                    adaptor.addChild(root_0, QUESTION450_tree);
                    }

                    }
                    break;

            }


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (XQDTCommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (XQDTCommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "p_SingleType"

    public static class p_TypeDeclaration_return extends ParserRuleReturnScope {
        XQDTCommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "p_TypeDeclaration"
    // XQueryParser.g:1011:1: p_TypeDeclaration : k= AS st= p_SequenceType -> ^( TypeDeclaration $st) ;
    public final XQueryParser.p_TypeDeclaration_return p_TypeDeclaration() throws RecognitionException {
        XQueryParser.p_TypeDeclaration_return retval = new XQueryParser.p_TypeDeclaration_return();
        retval.start = input.LT(1);

        XQDTCommonTree root_0 = null;

        CommonToken k=null;
        XQueryParser.p_SequenceType_return st = null;


        XQDTCommonTree k_tree=null;
        RewriteRuleTokenStream stream_AS=new RewriteRuleTokenStream(adaptor,"token AS");
        RewriteRuleSubtreeStream stream_p_SequenceType=new RewriteRuleSubtreeStream(adaptor,"rule p_SequenceType");
        try {
            // XQueryParser.g:1012:9: (k= AS st= p_SequenceType -> ^( TypeDeclaration $st) )
            // XQueryParser.g:1012:13: k= AS st= p_SequenceType
            {
            k=(CommonToken)match(input,AS,FOLLOW_AS_in_p_TypeDeclaration8521); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_AS.add(k);

            if ( state.backtracking==0 ) {
              ak(k);
            }
            pushFollow(FOLLOW_p_SequenceType_in_p_TypeDeclaration8527);
            st=p_SequenceType();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_p_SequenceType.add(st.getTree());


            // AST REWRITE
            // elements: st
            // token labels: 
            // rule labels: retval, st
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
            RewriteRuleSubtreeStream stream_st=new RewriteRuleSubtreeStream(adaptor,"rule st",st!=null?st.tree:null);

            root_0 = (XQDTCommonTree)adaptor.nil();
            // 1013:17: -> ^( TypeDeclaration $st)
            {
                // XQueryParser.g:1013:20: ^( TypeDeclaration $st)
                {
                XQDTCommonTree root_1 = (XQDTCommonTree)adaptor.nil();
                root_1 = (XQDTCommonTree)adaptor.becomeRoot((XQDTCommonTree)adaptor.create(TypeDeclaration, "TypeDeclaration"), root_1);

                adaptor.addChild(root_1, stream_st.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (XQDTCommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (XQDTCommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "p_TypeDeclaration"

    public static class p_SequenceType_return extends ParserRuleReturnScope {
        XQDTCommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "p_SequenceType"
    // XQueryParser.g:1017:1: p_SequenceType : (k= EMPTY_SEQUENCE l= LPAREN r= RPAREN -> ^( SequenceType ^( EmptySequenceTest $k $l $r) ) | it= p_ItemType ( ( p_OccurrenceIndicator )=>oi= p_OccurrenceIndicator )? -> ^( SequenceType $it ( $oi)? ) );
    public final XQueryParser.p_SequenceType_return p_SequenceType() throws RecognitionException {
        XQueryParser.p_SequenceType_return retval = new XQueryParser.p_SequenceType_return();
        retval.start = input.LT(1);

        XQDTCommonTree root_0 = null;

        CommonToken k=null;
        CommonToken l=null;
        CommonToken r=null;
        XQueryParser.p_ItemType_return it = null;

        XQueryParser.p_OccurrenceIndicator_return oi = null;


        XQDTCommonTree k_tree=null;
        XQDTCommonTree l_tree=null;
        XQDTCommonTree r_tree=null;
        RewriteRuleTokenStream stream_EMPTY_SEQUENCE=new RewriteRuleTokenStream(adaptor,"token EMPTY_SEQUENCE");
        RewriteRuleTokenStream stream_RPAREN=new RewriteRuleTokenStream(adaptor,"token RPAREN");
        RewriteRuleTokenStream stream_LPAREN=new RewriteRuleTokenStream(adaptor,"token LPAREN");
        RewriteRuleSubtreeStream stream_p_ItemType=new RewriteRuleSubtreeStream(adaptor,"rule p_ItemType");
        RewriteRuleSubtreeStream stream_p_OccurrenceIndicator=new RewriteRuleSubtreeStream(adaptor,"rule p_OccurrenceIndicator");
        try {
            // XQueryParser.g:1018:9: (k= EMPTY_SEQUENCE l= LPAREN r= RPAREN -> ^( SequenceType ^( EmptySequenceTest $k $l $r) ) | it= p_ItemType ( ( p_OccurrenceIndicator )=>oi= p_OccurrenceIndicator )? -> ^( SequenceType $it ( $oi)? ) )
            int alt155=2;
            int LA155_0 = input.LA(1);

            if ( (LA155_0==EMPTY_SEQUENCE) ) {
                int LA155_1 = input.LA(2);

                if ( (LA155_1==EOF||(LA155_1>=AND && LA155_1<=AT)||LA155_1==CASE||LA155_1==COLLATION||LA155_1==DEFAULT||(LA155_1>=DESCENDING && LA155_1<=DIV)||(LA155_1>=ELSE && LA155_1<=EMPTY)||LA155_1==EQ||(LA155_1>=EXCEPT && LA155_1<=EXTERNAL)||LA155_1==FOR||LA155_1==GE||(LA155_1>=GT && LA155_1<=IDIV)||LA155_1==IN||(LA155_1>=INSTANCE && LA155_1<=IS)||LA155_1==LE||(LA155_1>=LET && LA155_1<=MOD)||LA155_1==NE||(LA155_1>=OR && LA155_1<=ORDER)||(LA155_1>=RETURN && LA155_1<=SATISFIES)||LA155_1==STABLE||LA155_1==TO||LA155_1==UNION||LA155_1==WHERE||LA155_1==COUNT||(LA155_1>=END && LA155_1<=GROUP)||LA155_1==ONLY||LA155_1==START||(LA155_1>=AFTER && LA155_1<=BEFORE)||LA155_1==INTO||LA155_1==MODIFY||LA155_1==WITH||LA155_1==RPAREN||(LA155_1>=LBRACKET && LA155_1<=RBRACKET)||(LA155_1>=RSQUARE && LA155_1<=NOTEQUAL)||(LA155_1>=COMMA && LA155_1<=GREATER_GREATER)||LA155_1==COLON||(LA155_1>=SEMICOLON && LA155_1<=VBAR)) ) {
                    alt155=2;
                }
                else if ( (LA155_1==LPAREN) ) {
                    alt155=1;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 155, 1, input);

                    throw nvae;
                }
            }
            else if ( ((LA155_0>=ANCESTOR && LA155_0<=EMPTY)||(LA155_0>=ENCODING && LA155_0<=EXIT)||(LA155_0>=SEQUENTIAL && LA155_0<=MAINTAINED)||(LA155_0>=MUTABLE && LA155_0<=QUOT_ER)||LA155_0==L_NCName||LA155_0==EXPLICITLY) ) {
                alt155=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 155, 0, input);

                throw nvae;
            }
            switch (alt155) {
                case 1 :
                    // XQueryParser.g:1018:13: k= EMPTY_SEQUENCE l= LPAREN r= RPAREN
                    {
                    k=(CommonToken)match(input,EMPTY_SEQUENCE,FOLLOW_EMPTY_SEQUENCE_in_p_SequenceType8582); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_EMPTY_SEQUENCE.add(k);

                    if ( state.backtracking==0 ) {
                      ak(k);
                    }
                    l=(CommonToken)match(input,LPAREN,FOLLOW_LPAREN_in_p_SequenceType8588); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_LPAREN.add(l);

                    r=(CommonToken)match(input,RPAREN,FOLLOW_RPAREN_in_p_SequenceType8592); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_RPAREN.add(r);



                    // AST REWRITE
                    // elements: k, l, r
                    // token labels: r, l, k
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleTokenStream stream_r=new RewriteRuleTokenStream(adaptor,"token r",r);
                    RewriteRuleTokenStream stream_l=new RewriteRuleTokenStream(adaptor,"token l",l);
                    RewriteRuleTokenStream stream_k=new RewriteRuleTokenStream(adaptor,"token k",k);
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (XQDTCommonTree)adaptor.nil();
                    // 1019:17: -> ^( SequenceType ^( EmptySequenceTest $k $l $r) )
                    {
                        // XQueryParser.g:1019:20: ^( SequenceType ^( EmptySequenceTest $k $l $r) )
                        {
                        XQDTCommonTree root_1 = (XQDTCommonTree)adaptor.nil();
                        root_1 = (XQDTCommonTree)adaptor.becomeRoot((XQDTCommonTree)adaptor.create(SequenceType, "SequenceType"), root_1);

                        // XQueryParser.g:1019:35: ^( EmptySequenceTest $k $l $r)
                        {
                        XQDTCommonTree root_2 = (XQDTCommonTree)adaptor.nil();
                        root_2 = (XQDTCommonTree)adaptor.becomeRoot((XQDTCommonTree)adaptor.create(EmptySequenceTest, "EmptySequenceTest"), root_2);

                        adaptor.addChild(root_2, stream_k.nextNode());
                        adaptor.addChild(root_2, stream_l.nextNode());
                        adaptor.addChild(root_2, stream_r.nextNode());

                        adaptor.addChild(root_1, root_2);
                        }

                        adaptor.addChild(root_0, root_1);
                        }

                    }

                    retval.tree = root_0;}
                    }
                    break;
                case 2 :
                    // XQueryParser.g:1020:11: it= p_ItemType ( ( p_OccurrenceIndicator )=>oi= p_OccurrenceIndicator )?
                    {
                    pushFollow(FOLLOW_p_ItemType_in_p_SequenceType8641);
                    it=p_ItemType();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_p_ItemType.add(it.getTree());
                    // XQueryParser.g:1020:25: ( ( p_OccurrenceIndicator )=>oi= p_OccurrenceIndicator )?
                    int alt154=2;
                    alt154 = dfa154.predict(input);
                    switch (alt154) {
                        case 1 :
                            // XQueryParser.g:1020:26: ( p_OccurrenceIndicator )=>oi= p_OccurrenceIndicator
                            {
                            pushFollow(FOLLOW_p_OccurrenceIndicator_in_p_SequenceType8652);
                            oi=p_OccurrenceIndicator();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_p_OccurrenceIndicator.add(oi.getTree());

                            }
                            break;

                    }



                    // AST REWRITE
                    // elements: oi, it
                    // token labels: 
                    // rule labels: retval, it, oi
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
                    RewriteRuleSubtreeStream stream_it=new RewriteRuleSubtreeStream(adaptor,"rule it",it!=null?it.tree:null);
                    RewriteRuleSubtreeStream stream_oi=new RewriteRuleSubtreeStream(adaptor,"rule oi",oi!=null?oi.tree:null);

                    root_0 = (XQDTCommonTree)adaptor.nil();
                    // 1021:17: -> ^( SequenceType $it ( $oi)? )
                    {
                        // XQueryParser.g:1021:20: ^( SequenceType $it ( $oi)? )
                        {
                        XQDTCommonTree root_1 = (XQDTCommonTree)adaptor.nil();
                        root_1 = (XQDTCommonTree)adaptor.becomeRoot((XQDTCommonTree)adaptor.create(SequenceType, "SequenceType"), root_1);

                        adaptor.addChild(root_1, stream_it.nextTree());
                        // XQueryParser.g:1021:39: ( $oi)?
                        if ( stream_oi.hasNext() ) {
                            adaptor.addChild(root_1, stream_oi.nextTree());

                        }
                        stream_oi.reset();

                        adaptor.addChild(root_0, root_1);
                        }

                    }

                    retval.tree = root_0;}
                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (XQDTCommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (XQDTCommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "p_SequenceType"

    public static class p_OccurrenceIndicator_return extends ParserRuleReturnScope {
        XQDTCommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "p_OccurrenceIndicator"
    // XQueryParser.g:1025:1: p_OccurrenceIndicator : ( QUESTION | STAR | PLUS );
    public final XQueryParser.p_OccurrenceIndicator_return p_OccurrenceIndicator() throws RecognitionException {
        XQueryParser.p_OccurrenceIndicator_return retval = new XQueryParser.p_OccurrenceIndicator_return();
        retval.start = input.LT(1);

        XQDTCommonTree root_0 = null;

        CommonToken set451=null;

        XQDTCommonTree set451_tree=null;

        try {
            // XQueryParser.g:1026:9: ( QUESTION | STAR | PLUS )
            // XQueryParser.g:
            {
            root_0 = (XQDTCommonTree)adaptor.nil();

            set451=(CommonToken)input.LT(1);
            if ( (input.LA(1)>=QUESTION && input.LA(1)<=PLUS) ) {
                input.consume();
                if ( state.backtracking==0 ) adaptor.addChild(root_0, (XQDTCommonTree)adaptor.create(set451));
                state.errorRecovery=false;state.failed=false;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                MismatchedSetException mse = new MismatchedSetException(null,input);
                throw mse;
            }


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (XQDTCommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (XQDTCommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "p_OccurrenceIndicator"

    public static class p_ItemType_return extends ParserRuleReturnScope {
        XQDTCommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "p_ItemType"
    // XQueryParser.g:1030:1: p_ItemType : ( p_KindTest -> ^( KindTest p_KindTest ) | {...}? => ( BINARY LPAREN RPAREN ) -> ^( BinaryTest BINARY LPAREN RPAREN ) | ( ITEM LPAREN RPAREN ) -> ^( ItemTest ITEM LPAREN RPAREN ) | p_AtomicType );
    public final XQueryParser.p_ItemType_return p_ItemType() throws RecognitionException {
        XQueryParser.p_ItemType_return retval = new XQueryParser.p_ItemType_return();
        retval.start = input.LT(1);

        XQDTCommonTree root_0 = null;

        CommonToken BINARY453=null;
        CommonToken LPAREN454=null;
        CommonToken RPAREN455=null;
        CommonToken ITEM456=null;
        CommonToken LPAREN457=null;
        CommonToken RPAREN458=null;
        XQueryParser.p_KindTest_return p_KindTest452 = null;

        XQueryParser.p_AtomicType_return p_AtomicType459 = null;


        XQDTCommonTree BINARY453_tree=null;
        XQDTCommonTree LPAREN454_tree=null;
        XQDTCommonTree RPAREN455_tree=null;
        XQDTCommonTree ITEM456_tree=null;
        XQDTCommonTree LPAREN457_tree=null;
        XQDTCommonTree RPAREN458_tree=null;
        RewriteRuleTokenStream stream_RPAREN=new RewriteRuleTokenStream(adaptor,"token RPAREN");
        RewriteRuleTokenStream stream_ITEM=new RewriteRuleTokenStream(adaptor,"token ITEM");
        RewriteRuleTokenStream stream_BINARY=new RewriteRuleTokenStream(adaptor,"token BINARY");
        RewriteRuleTokenStream stream_LPAREN=new RewriteRuleTokenStream(adaptor,"token LPAREN");
        RewriteRuleSubtreeStream stream_p_KindTest=new RewriteRuleSubtreeStream(adaptor,"rule p_KindTest");
        try {
            // XQueryParser.g:1031:9: ( p_KindTest -> ^( KindTest p_KindTest ) | {...}? => ( BINARY LPAREN RPAREN ) -> ^( BinaryTest BINARY LPAREN RPAREN ) | ( ITEM LPAREN RPAREN ) -> ^( ItemTest ITEM LPAREN RPAREN ) | p_AtomicType )
            int alt156=4;
            alt156 = dfa156.predict(input);
            switch (alt156) {
                case 1 :
                    // XQueryParser.g:1031:11: p_KindTest
                    {
                    pushFollow(FOLLOW_p_KindTest_in_p_ItemType8754);
                    p_KindTest452=p_KindTest();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_p_KindTest.add(p_KindTest452.getTree());


                    // AST REWRITE
                    // elements: p_KindTest
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (XQDTCommonTree)adaptor.nil();
                    // 1032:17: -> ^( KindTest p_KindTest )
                    {
                        // XQueryParser.g:1032:20: ^( KindTest p_KindTest )
                        {
                        XQDTCommonTree root_1 = (XQDTCommonTree)adaptor.nil();
                        root_1 = (XQDTCommonTree)adaptor.becomeRoot((XQDTCommonTree)adaptor.create(KindTest, "KindTest"), root_1);

                        adaptor.addChild(root_1, stream_p_KindTest.nextTree());

                        adaptor.addChild(root_0, root_1);
                        }

                    }

                    retval.tree = root_0;}
                    }
                    break;
                case 2 :
                    // XQueryParser.g:1033:11: {...}? => ( BINARY LPAREN RPAREN )
                    {
                    if ( !((lc(MLS))) ) {
                        if (state.backtracking>0) {state.failed=true; return retval;}
                        throw new FailedPredicateException(input, "p_ItemType", "lc(MLS)");
                    }
                    // XQueryParser.g:1033:24: ( BINARY LPAREN RPAREN )
                    // XQueryParser.g:1033:25: BINARY LPAREN RPAREN
                    {
                    BINARY453=(CommonToken)match(input,BINARY,FOLLOW_BINARY_in_p_ItemType8794); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_BINARY.add(BINARY453);

                    LPAREN454=(CommonToken)match(input,LPAREN,FOLLOW_LPAREN_in_p_ItemType8796); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_LPAREN.add(LPAREN454);

                    RPAREN455=(CommonToken)match(input,RPAREN,FOLLOW_RPAREN_in_p_ItemType8798); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_RPAREN.add(RPAREN455);


                    }



                    // AST REWRITE
                    // elements: BINARY, LPAREN, RPAREN
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (XQDTCommonTree)adaptor.nil();
                    // 1034:17: -> ^( BinaryTest BINARY LPAREN RPAREN )
                    {
                        // XQueryParser.g:1034:20: ^( BinaryTest BINARY LPAREN RPAREN )
                        {
                        XQDTCommonTree root_1 = (XQDTCommonTree)adaptor.nil();
                        root_1 = (XQDTCommonTree)adaptor.becomeRoot((XQDTCommonTree)adaptor.create(BinaryTest, "BinaryTest"), root_1);

                        adaptor.addChild(root_1, stream_BINARY.nextNode());
                        adaptor.addChild(root_1, stream_LPAREN.nextNode());
                        adaptor.addChild(root_1, stream_RPAREN.nextNode());

                        adaptor.addChild(root_0, root_1);
                        }

                    }

                    retval.tree = root_0;}
                    }
                    break;
                case 3 :
                    // XQueryParser.g:1035:11: ( ITEM LPAREN RPAREN )
                    {
                    // XQueryParser.g:1035:11: ( ITEM LPAREN RPAREN )
                    // XQueryParser.g:1035:12: ITEM LPAREN RPAREN
                    {
                    ITEM456=(CommonToken)match(input,ITEM,FOLLOW_ITEM_in_p_ItemType8840); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_ITEM.add(ITEM456);

                    LPAREN457=(CommonToken)match(input,LPAREN,FOLLOW_LPAREN_in_p_ItemType8842); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_LPAREN.add(LPAREN457);

                    RPAREN458=(CommonToken)match(input,RPAREN,FOLLOW_RPAREN_in_p_ItemType8844); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_RPAREN.add(RPAREN458);


                    }



                    // AST REWRITE
                    // elements: ITEM, RPAREN, LPAREN
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (XQDTCommonTree)adaptor.nil();
                    // 1036:17: -> ^( ItemTest ITEM LPAREN RPAREN )
                    {
                        // XQueryParser.g:1036:20: ^( ItemTest ITEM LPAREN RPAREN )
                        {
                        XQDTCommonTree root_1 = (XQDTCommonTree)adaptor.nil();
                        root_1 = (XQDTCommonTree)adaptor.becomeRoot((XQDTCommonTree)adaptor.create(ItemTest, "ItemTest"), root_1);

                        adaptor.addChild(root_1, stream_ITEM.nextNode());
                        adaptor.addChild(root_1, stream_LPAREN.nextNode());
                        adaptor.addChild(root_1, stream_RPAREN.nextNode());

                        adaptor.addChild(root_0, root_1);
                        }

                    }

                    retval.tree = root_0;}
                    }
                    break;
                case 4 :
                    // XQueryParser.g:1037:11: p_AtomicType
                    {
                    root_0 = (XQDTCommonTree)adaptor.nil();

                    pushFollow(FOLLOW_p_AtomicType_in_p_ItemType8885);
                    p_AtomicType459=p_AtomicType();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, p_AtomicType459.getTree());

                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (XQDTCommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (XQDTCommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "p_ItemType"

    public static class p_AtomicType_return extends ParserRuleReturnScope {
        XQDTCommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "p_AtomicType"
    // XQueryParser.g:1041:1: p_AtomicType : p_QName -> ^( AtomicType p_QName ) ;
    public final XQueryParser.p_AtomicType_return p_AtomicType() throws RecognitionException {
        XQueryParser.p_AtomicType_return retval = new XQueryParser.p_AtomicType_return();
        retval.start = input.LT(1);

        XQDTCommonTree root_0 = null;

        XQueryParser.p_QName_return p_QName460 = null;


        RewriteRuleSubtreeStream stream_p_QName=new RewriteRuleSubtreeStream(adaptor,"rule p_QName");
        try {
            // XQueryParser.g:1042:9: ( p_QName -> ^( AtomicType p_QName ) )
            // XQueryParser.g:1042:11: p_QName
            {
            pushFollow(FOLLOW_p_QName_in_p_AtomicType8911);
            p_QName460=p_QName();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_p_QName.add(p_QName460.getTree());


            // AST REWRITE
            // elements: p_QName
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (XQDTCommonTree)adaptor.nil();
            // 1043:17: -> ^( AtomicType p_QName )
            {
                // XQueryParser.g:1043:20: ^( AtomicType p_QName )
                {
                XQDTCommonTree root_1 = (XQDTCommonTree)adaptor.nil();
                root_1 = (XQDTCommonTree)adaptor.becomeRoot((XQDTCommonTree)adaptor.create(AtomicType, "AtomicType"), root_1);

                adaptor.addChild(root_1, stream_p_QName.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (XQDTCommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (XQDTCommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "p_AtomicType"

    public static class p_KindTest_return extends ParserRuleReturnScope {
        XQDTCommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "p_KindTest"
    // XQueryParser.g:1047:1: p_KindTest : ( p_DocumentTest | p_ElementTest | p_AttributeTest | p_SchemaElementTest | p_SchemaAttributeTest | p_NamespaceNodeTest | p_PITest | p_CommentTest | p_TextTest | p_AnyKindTest );
    public final XQueryParser.p_KindTest_return p_KindTest() throws RecognitionException {
        XQueryParser.p_KindTest_return retval = new XQueryParser.p_KindTest_return();
        retval.start = input.LT(1);

        XQDTCommonTree root_0 = null;

        XQueryParser.p_DocumentTest_return p_DocumentTest461 = null;

        XQueryParser.p_ElementTest_return p_ElementTest462 = null;

        XQueryParser.p_AttributeTest_return p_AttributeTest463 = null;

        XQueryParser.p_SchemaElementTest_return p_SchemaElementTest464 = null;

        XQueryParser.p_SchemaAttributeTest_return p_SchemaAttributeTest465 = null;

        XQueryParser.p_NamespaceNodeTest_return p_NamespaceNodeTest466 = null;

        XQueryParser.p_PITest_return p_PITest467 = null;

        XQueryParser.p_CommentTest_return p_CommentTest468 = null;

        XQueryParser.p_TextTest_return p_TextTest469 = null;

        XQueryParser.p_AnyKindTest_return p_AnyKindTest470 = null;



        try {
            // XQueryParser.g:1048:9: ( p_DocumentTest | p_ElementTest | p_AttributeTest | p_SchemaElementTest | p_SchemaAttributeTest | p_NamespaceNodeTest | p_PITest | p_CommentTest | p_TextTest | p_AnyKindTest )
            int alt157=10;
            switch ( input.LA(1) ) {
            case DOCUMENT_NODE:
                {
                alt157=1;
                }
                break;
            case ELEMENT:
                {
                alt157=2;
                }
                break;
            case ATTRIBUTE:
                {
                alt157=3;
                }
                break;
            case SCHEMA_ELEMENT:
                {
                alt157=4;
                }
                break;
            case SCHEMA_ATTRIBUTE:
                {
                alt157=5;
                }
                break;
            case NAMESPACE_NODE:
                {
                alt157=6;
                }
                break;
            case PROCESSING_INSTRUCTION:
                {
                alt157=7;
                }
                break;
            case COMMENT:
                {
                alt157=8;
                }
                break;
            case TEXT:
                {
                alt157=9;
                }
                break;
            case NODE:
                {
                alt157=10;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 157, 0, input);

                throw nvae;
            }

            switch (alt157) {
                case 1 :
                    // XQueryParser.g:1048:11: p_DocumentTest
                    {
                    root_0 = (XQDTCommonTree)adaptor.nil();

                    pushFollow(FOLLOW_p_DocumentTest_in_p_KindTest8961);
                    p_DocumentTest461=p_DocumentTest();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, p_DocumentTest461.getTree());

                    }
                    break;
                case 2 :
                    // XQueryParser.g:1049:11: p_ElementTest
                    {
                    root_0 = (XQDTCommonTree)adaptor.nil();

                    pushFollow(FOLLOW_p_ElementTest_in_p_KindTest8973);
                    p_ElementTest462=p_ElementTest();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, p_ElementTest462.getTree());

                    }
                    break;
                case 3 :
                    // XQueryParser.g:1050:11: p_AttributeTest
                    {
                    root_0 = (XQDTCommonTree)adaptor.nil();

                    pushFollow(FOLLOW_p_AttributeTest_in_p_KindTest8985);
                    p_AttributeTest463=p_AttributeTest();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, p_AttributeTest463.getTree());

                    }
                    break;
                case 4 :
                    // XQueryParser.g:1051:11: p_SchemaElementTest
                    {
                    root_0 = (XQDTCommonTree)adaptor.nil();

                    pushFollow(FOLLOW_p_SchemaElementTest_in_p_KindTest8997);
                    p_SchemaElementTest464=p_SchemaElementTest();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, p_SchemaElementTest464.getTree());

                    }
                    break;
                case 5 :
                    // XQueryParser.g:1052:11: p_SchemaAttributeTest
                    {
                    root_0 = (XQDTCommonTree)adaptor.nil();

                    pushFollow(FOLLOW_p_SchemaAttributeTest_in_p_KindTest9009);
                    p_SchemaAttributeTest465=p_SchemaAttributeTest();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, p_SchemaAttributeTest465.getTree());

                    }
                    break;
                case 6 :
                    // XQueryParser.g:1053:11: p_NamespaceNodeTest
                    {
                    root_0 = (XQDTCommonTree)adaptor.nil();

                    pushFollow(FOLLOW_p_NamespaceNodeTest_in_p_KindTest9021);
                    p_NamespaceNodeTest466=p_NamespaceNodeTest();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, p_NamespaceNodeTest466.getTree());

                    }
                    break;
                case 7 :
                    // XQueryParser.g:1054:11: p_PITest
                    {
                    root_0 = (XQDTCommonTree)adaptor.nil();

                    pushFollow(FOLLOW_p_PITest_in_p_KindTest9033);
                    p_PITest467=p_PITest();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, p_PITest467.getTree());

                    }
                    break;
                case 8 :
                    // XQueryParser.g:1055:11: p_CommentTest
                    {
                    root_0 = (XQDTCommonTree)adaptor.nil();

                    pushFollow(FOLLOW_p_CommentTest_in_p_KindTest9045);
                    p_CommentTest468=p_CommentTest();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, p_CommentTest468.getTree());

                    }
                    break;
                case 9 :
                    // XQueryParser.g:1056:11: p_TextTest
                    {
                    root_0 = (XQDTCommonTree)adaptor.nil();

                    pushFollow(FOLLOW_p_TextTest_in_p_KindTest9057);
                    p_TextTest469=p_TextTest();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, p_TextTest469.getTree());

                    }
                    break;
                case 10 :
                    // XQueryParser.g:1057:11: p_AnyKindTest
                    {
                    root_0 = (XQDTCommonTree)adaptor.nil();

                    pushFollow(FOLLOW_p_AnyKindTest_in_p_KindTest9069);
                    p_AnyKindTest470=p_AnyKindTest();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, p_AnyKindTest470.getTree());

                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (XQDTCommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (XQDTCommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "p_KindTest"

    public static class p_AnyKindTest_return extends ParserRuleReturnScope {
        XQDTCommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "p_AnyKindTest"
    // XQueryParser.g:1061:1: p_AnyKindTest : NODE LPAREN RPAREN ;
    public final XQueryParser.p_AnyKindTest_return p_AnyKindTest() throws RecognitionException {
        XQueryParser.p_AnyKindTest_return retval = new XQueryParser.p_AnyKindTest_return();
        retval.start = input.LT(1);

        XQDTCommonTree root_0 = null;

        CommonToken NODE471=null;
        CommonToken LPAREN472=null;
        CommonToken RPAREN473=null;

        XQDTCommonTree NODE471_tree=null;
        XQDTCommonTree LPAREN472_tree=null;
        XQDTCommonTree RPAREN473_tree=null;

        try {
            // XQueryParser.g:1062:9: ( NODE LPAREN RPAREN )
            // XQueryParser.g:1062:13: NODE LPAREN RPAREN
            {
            root_0 = (XQDTCommonTree)adaptor.nil();

            NODE471=(CommonToken)match(input,NODE,FOLLOW_NODE_in_p_AnyKindTest9097); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            NODE471_tree = (XQDTCommonTree)adaptor.create(NODE471);
            adaptor.addChild(root_0, NODE471_tree);
            }
            LPAREN472=(CommonToken)match(input,LPAREN,FOLLOW_LPAREN_in_p_AnyKindTest9099); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            LPAREN472_tree = (XQDTCommonTree)adaptor.create(LPAREN472);
            adaptor.addChild(root_0, LPAREN472_tree);
            }
            RPAREN473=(CommonToken)match(input,RPAREN,FOLLOW_RPAREN_in_p_AnyKindTest9101); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            RPAREN473_tree = (XQDTCommonTree)adaptor.create(RPAREN473);
            adaptor.addChild(root_0, RPAREN473_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (XQDTCommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (XQDTCommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "p_AnyKindTest"

    public static class p_DocumentTest_return extends ParserRuleReturnScope {
        XQDTCommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "p_DocumentTest"
    // XQueryParser.g:1066:1: p_DocumentTest : DOCUMENT_NODE LPAREN ( p_ElementTest | p_SchemaElementTest )? RPAREN ;
    public final XQueryParser.p_DocumentTest_return p_DocumentTest() throws RecognitionException {
        XQueryParser.p_DocumentTest_return retval = new XQueryParser.p_DocumentTest_return();
        retval.start = input.LT(1);

        XQDTCommonTree root_0 = null;

        CommonToken DOCUMENT_NODE474=null;
        CommonToken LPAREN475=null;
        CommonToken RPAREN478=null;
        XQueryParser.p_ElementTest_return p_ElementTest476 = null;

        XQueryParser.p_SchemaElementTest_return p_SchemaElementTest477 = null;


        XQDTCommonTree DOCUMENT_NODE474_tree=null;
        XQDTCommonTree LPAREN475_tree=null;
        XQDTCommonTree RPAREN478_tree=null;

        try {
            // XQueryParser.g:1067:9: ( DOCUMENT_NODE LPAREN ( p_ElementTest | p_SchemaElementTest )? RPAREN )
            // XQueryParser.g:1067:13: DOCUMENT_NODE LPAREN ( p_ElementTest | p_SchemaElementTest )? RPAREN
            {
            root_0 = (XQDTCommonTree)adaptor.nil();

            DOCUMENT_NODE474=(CommonToken)match(input,DOCUMENT_NODE,FOLLOW_DOCUMENT_NODE_in_p_DocumentTest9129); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            DOCUMENT_NODE474_tree = (XQDTCommonTree)adaptor.create(DOCUMENT_NODE474);
            adaptor.addChild(root_0, DOCUMENT_NODE474_tree);
            }
            LPAREN475=(CommonToken)match(input,LPAREN,FOLLOW_LPAREN_in_p_DocumentTest9131); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            LPAREN475_tree = (XQDTCommonTree)adaptor.create(LPAREN475);
            adaptor.addChild(root_0, LPAREN475_tree);
            }
            // XQueryParser.g:1067:34: ( p_ElementTest | p_SchemaElementTest )?
            int alt158=3;
            int LA158_0 = input.LA(1);

            if ( (LA158_0==ELEMENT) ) {
                alt158=1;
            }
            else if ( (LA158_0==SCHEMA_ELEMENT) ) {
                alt158=2;
            }
            switch (alt158) {
                case 1 :
                    // XQueryParser.g:1067:35: p_ElementTest
                    {
                    pushFollow(FOLLOW_p_ElementTest_in_p_DocumentTest9134);
                    p_ElementTest476=p_ElementTest();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, p_ElementTest476.getTree());

                    }
                    break;
                case 2 :
                    // XQueryParser.g:1067:51: p_SchemaElementTest
                    {
                    pushFollow(FOLLOW_p_SchemaElementTest_in_p_DocumentTest9138);
                    p_SchemaElementTest477=p_SchemaElementTest();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, p_SchemaElementTest477.getTree());

                    }
                    break;

            }

            RPAREN478=(CommonToken)match(input,RPAREN,FOLLOW_RPAREN_in_p_DocumentTest9142); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            RPAREN478_tree = (XQDTCommonTree)adaptor.create(RPAREN478);
            adaptor.addChild(root_0, RPAREN478_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (XQDTCommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (XQDTCommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "p_DocumentTest"

    public static class p_TextTest_return extends ParserRuleReturnScope {
        XQDTCommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "p_TextTest"
    // XQueryParser.g:1070:1: p_TextTest : TEXT LPAREN RPAREN ;
    public final XQueryParser.p_TextTest_return p_TextTest() throws RecognitionException {
        XQueryParser.p_TextTest_return retval = new XQueryParser.p_TextTest_return();
        retval.start = input.LT(1);

        XQDTCommonTree root_0 = null;

        CommonToken TEXT479=null;
        CommonToken LPAREN480=null;
        CommonToken RPAREN481=null;

        XQDTCommonTree TEXT479_tree=null;
        XQDTCommonTree LPAREN480_tree=null;
        XQDTCommonTree RPAREN481_tree=null;

        try {
            // XQueryParser.g:1071:9: ( TEXT LPAREN RPAREN )
            // XQueryParser.g:1071:13: TEXT LPAREN RPAREN
            {
            root_0 = (XQDTCommonTree)adaptor.nil();

            TEXT479=(CommonToken)match(input,TEXT,FOLLOW_TEXT_in_p_TextTest9162); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            TEXT479_tree = (XQDTCommonTree)adaptor.create(TEXT479);
            adaptor.addChild(root_0, TEXT479_tree);
            }
            LPAREN480=(CommonToken)match(input,LPAREN,FOLLOW_LPAREN_in_p_TextTest9164); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            LPAREN480_tree = (XQDTCommonTree)adaptor.create(LPAREN480);
            adaptor.addChild(root_0, LPAREN480_tree);
            }
            RPAREN481=(CommonToken)match(input,RPAREN,FOLLOW_RPAREN_in_p_TextTest9166); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            RPAREN481_tree = (XQDTCommonTree)adaptor.create(RPAREN481);
            adaptor.addChild(root_0, RPAREN481_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (XQDTCommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (XQDTCommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "p_TextTest"

    public static class p_CommentTest_return extends ParserRuleReturnScope {
        XQDTCommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "p_CommentTest"
    // XQueryParser.g:1075:1: p_CommentTest : COMMENT LPAREN RPAREN ;
    public final XQueryParser.p_CommentTest_return p_CommentTest() throws RecognitionException {
        XQueryParser.p_CommentTest_return retval = new XQueryParser.p_CommentTest_return();
        retval.start = input.LT(1);

        XQDTCommonTree root_0 = null;

        CommonToken COMMENT482=null;
        CommonToken LPAREN483=null;
        CommonToken RPAREN484=null;

        XQDTCommonTree COMMENT482_tree=null;
        XQDTCommonTree LPAREN483_tree=null;
        XQDTCommonTree RPAREN484_tree=null;

        try {
            // XQueryParser.g:1076:9: ( COMMENT LPAREN RPAREN )
            // XQueryParser.g:1076:13: COMMENT LPAREN RPAREN
            {
            root_0 = (XQDTCommonTree)adaptor.nil();

            COMMENT482=(CommonToken)match(input,COMMENT,FOLLOW_COMMENT_in_p_CommentTest9194); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            COMMENT482_tree = (XQDTCommonTree)adaptor.create(COMMENT482);
            adaptor.addChild(root_0, COMMENT482_tree);
            }
            LPAREN483=(CommonToken)match(input,LPAREN,FOLLOW_LPAREN_in_p_CommentTest9196); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            LPAREN483_tree = (XQDTCommonTree)adaptor.create(LPAREN483);
            adaptor.addChild(root_0, LPAREN483_tree);
            }
            RPAREN484=(CommonToken)match(input,RPAREN,FOLLOW_RPAREN_in_p_CommentTest9198); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            RPAREN484_tree = (XQDTCommonTree)adaptor.create(RPAREN484);
            adaptor.addChild(root_0, RPAREN484_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (XQDTCommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (XQDTCommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "p_CommentTest"

    public static class p_NamespaceNodeTest_return extends ParserRuleReturnScope {
        XQDTCommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "p_NamespaceNodeTest"
    // XQueryParser.g:1080:1: p_NamespaceNodeTest : NAMESPACE_NODE LPAREN RPAREN ;
    public final XQueryParser.p_NamespaceNodeTest_return p_NamespaceNodeTest() throws RecognitionException {
        XQueryParser.p_NamespaceNodeTest_return retval = new XQueryParser.p_NamespaceNodeTest_return();
        retval.start = input.LT(1);

        XQDTCommonTree root_0 = null;

        CommonToken NAMESPACE_NODE485=null;
        CommonToken LPAREN486=null;
        CommonToken RPAREN487=null;

        XQDTCommonTree NAMESPACE_NODE485_tree=null;
        XQDTCommonTree LPAREN486_tree=null;
        XQDTCommonTree RPAREN487_tree=null;

        try {
            // XQueryParser.g:1081:9: ( NAMESPACE_NODE LPAREN RPAREN )
            // XQueryParser.g:1081:11: NAMESPACE_NODE LPAREN RPAREN
            {
            root_0 = (XQDTCommonTree)adaptor.nil();

            NAMESPACE_NODE485=(CommonToken)match(input,NAMESPACE_NODE,FOLLOW_NAMESPACE_NODE_in_p_NamespaceNodeTest9224); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            NAMESPACE_NODE485_tree = (XQDTCommonTree)adaptor.create(NAMESPACE_NODE485);
            adaptor.addChild(root_0, NAMESPACE_NODE485_tree);
            }
            LPAREN486=(CommonToken)match(input,LPAREN,FOLLOW_LPAREN_in_p_NamespaceNodeTest9226); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            LPAREN486_tree = (XQDTCommonTree)adaptor.create(LPAREN486);
            adaptor.addChild(root_0, LPAREN486_tree);
            }
            RPAREN487=(CommonToken)match(input,RPAREN,FOLLOW_RPAREN_in_p_NamespaceNodeTest9228); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            RPAREN487_tree = (XQDTCommonTree)adaptor.create(RPAREN487);
            adaptor.addChild(root_0, RPAREN487_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (XQDTCommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (XQDTCommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "p_NamespaceNodeTest"

    public static class p_PITest_return extends ParserRuleReturnScope {
        XQDTCommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "p_PITest"
    // XQueryParser.g:1085:1: p_PITest : PROCESSING_INSTRUCTION LPAREN ( p_NCName | p_StringLiteral )? RPAREN ;
    public final XQueryParser.p_PITest_return p_PITest() throws RecognitionException {
        XQueryParser.p_PITest_return retval = new XQueryParser.p_PITest_return();
        retval.start = input.LT(1);

        XQDTCommonTree root_0 = null;

        CommonToken PROCESSING_INSTRUCTION488=null;
        CommonToken LPAREN489=null;
        CommonToken RPAREN492=null;
        XQueryParser.p_NCName_return p_NCName490 = null;

        XQueryParser.p_StringLiteral_return p_StringLiteral491 = null;


        XQDTCommonTree PROCESSING_INSTRUCTION488_tree=null;
        XQDTCommonTree LPAREN489_tree=null;
        XQDTCommonTree RPAREN492_tree=null;

        try {
            // XQueryParser.g:1086:9: ( PROCESSING_INSTRUCTION LPAREN ( p_NCName | p_StringLiteral )? RPAREN )
            // XQueryParser.g:1086:13: PROCESSING_INSTRUCTION LPAREN ( p_NCName | p_StringLiteral )? RPAREN
            {
            root_0 = (XQDTCommonTree)adaptor.nil();

            PROCESSING_INSTRUCTION488=(CommonToken)match(input,PROCESSING_INSTRUCTION,FOLLOW_PROCESSING_INSTRUCTION_in_p_PITest9256); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            PROCESSING_INSTRUCTION488_tree = (XQDTCommonTree)adaptor.create(PROCESSING_INSTRUCTION488);
            adaptor.addChild(root_0, PROCESSING_INSTRUCTION488_tree);
            }
            LPAREN489=(CommonToken)match(input,LPAREN,FOLLOW_LPAREN_in_p_PITest9258); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            LPAREN489_tree = (XQDTCommonTree)adaptor.create(LPAREN489);
            adaptor.addChild(root_0, LPAREN489_tree);
            }
            // XQueryParser.g:1086:43: ( p_NCName | p_StringLiteral )?
            int alt159=3;
            int LA159_0 = input.LA(1);

            if ( ((LA159_0>=ANCESTOR && LA159_0<=EXIT)||(LA159_0>=SEQUENTIAL && LA159_0<=MAINTAINED)||(LA159_0>=MUTABLE && LA159_0<=QUOT_ER)||LA159_0==L_NCName||LA159_0==EXPLICITLY) ) {
                alt159=1;
            }
            else if ( ((LA159_0>=APOS && LA159_0<=QUOT)) ) {
                alt159=2;
            }
            switch (alt159) {
                case 1 :
                    // XQueryParser.g:1086:44: p_NCName
                    {
                    pushFollow(FOLLOW_p_NCName_in_p_PITest9261);
                    p_NCName490=p_NCName();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, p_NCName490.getTree());

                    }
                    break;
                case 2 :
                    // XQueryParser.g:1086:55: p_StringLiteral
                    {
                    pushFollow(FOLLOW_p_StringLiteral_in_p_PITest9265);
                    p_StringLiteral491=p_StringLiteral();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, p_StringLiteral491.getTree());

                    }
                    break;

            }

            RPAREN492=(CommonToken)match(input,RPAREN,FOLLOW_RPAREN_in_p_PITest9269); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            RPAREN492_tree = (XQDTCommonTree)adaptor.create(RPAREN492);
            adaptor.addChild(root_0, RPAREN492_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (XQDTCommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (XQDTCommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "p_PITest"

    public static class p_AttributeTest_return extends ParserRuleReturnScope {
        XQDTCommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "p_AttributeTest"
    // XQueryParser.g:1090:1: p_AttributeTest : ATTRIBUTE LPAREN ( p_AttribNameOrWildcard ( COMMA p_TypeName )? )? RPAREN ;
    public final XQueryParser.p_AttributeTest_return p_AttributeTest() throws RecognitionException {
        XQueryParser.p_AttributeTest_return retval = new XQueryParser.p_AttributeTest_return();
        retval.start = input.LT(1);

        XQDTCommonTree root_0 = null;

        CommonToken ATTRIBUTE493=null;
        CommonToken LPAREN494=null;
        CommonToken COMMA496=null;
        CommonToken RPAREN498=null;
        XQueryParser.p_AttribNameOrWildcard_return p_AttribNameOrWildcard495 = null;

        XQueryParser.p_TypeName_return p_TypeName497 = null;


        XQDTCommonTree ATTRIBUTE493_tree=null;
        XQDTCommonTree LPAREN494_tree=null;
        XQDTCommonTree COMMA496_tree=null;
        XQDTCommonTree RPAREN498_tree=null;

        try {
            // XQueryParser.g:1091:9: ( ATTRIBUTE LPAREN ( p_AttribNameOrWildcard ( COMMA p_TypeName )? )? RPAREN )
            // XQueryParser.g:1091:13: ATTRIBUTE LPAREN ( p_AttribNameOrWildcard ( COMMA p_TypeName )? )? RPAREN
            {
            root_0 = (XQDTCommonTree)adaptor.nil();

            ATTRIBUTE493=(CommonToken)match(input,ATTRIBUTE,FOLLOW_ATTRIBUTE_in_p_AttributeTest9297); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            ATTRIBUTE493_tree = (XQDTCommonTree)adaptor.create(ATTRIBUTE493);
            adaptor.addChild(root_0, ATTRIBUTE493_tree);
            }
            LPAREN494=(CommonToken)match(input,LPAREN,FOLLOW_LPAREN_in_p_AttributeTest9299); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            LPAREN494_tree = (XQDTCommonTree)adaptor.create(LPAREN494);
            adaptor.addChild(root_0, LPAREN494_tree);
            }
            // XQueryParser.g:1091:30: ( p_AttribNameOrWildcard ( COMMA p_TypeName )? )?
            int alt161=2;
            int LA161_0 = input.LA(1);

            if ( ((LA161_0>=ANCESTOR && LA161_0<=EXIT)||(LA161_0>=SEQUENTIAL && LA161_0<=MAINTAINED)||(LA161_0>=MUTABLE && LA161_0<=QUOT_ER)||LA161_0==STAR||LA161_0==L_NCName||LA161_0==EXPLICITLY) ) {
                alt161=1;
            }
            switch (alt161) {
                case 1 :
                    // XQueryParser.g:1091:31: p_AttribNameOrWildcard ( COMMA p_TypeName )?
                    {
                    pushFollow(FOLLOW_p_AttribNameOrWildcard_in_p_AttributeTest9302);
                    p_AttribNameOrWildcard495=p_AttribNameOrWildcard();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, p_AttribNameOrWildcard495.getTree());
                    // XQueryParser.g:1091:54: ( COMMA p_TypeName )?
                    int alt160=2;
                    int LA160_0 = input.LA(1);

                    if ( (LA160_0==COMMA) ) {
                        alt160=1;
                    }
                    switch (alt160) {
                        case 1 :
                            // XQueryParser.g:1091:55: COMMA p_TypeName
                            {
                            COMMA496=(CommonToken)match(input,COMMA,FOLLOW_COMMA_in_p_AttributeTest9305); if (state.failed) return retval;
                            if ( state.backtracking==0 ) {
                            COMMA496_tree = (XQDTCommonTree)adaptor.create(COMMA496);
                            adaptor.addChild(root_0, COMMA496_tree);
                            }
                            pushFollow(FOLLOW_p_TypeName_in_p_AttributeTest9307);
                            p_TypeName497=p_TypeName();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) adaptor.addChild(root_0, p_TypeName497.getTree());

                            }
                            break;

                    }


                    }
                    break;

            }

            RPAREN498=(CommonToken)match(input,RPAREN,FOLLOW_RPAREN_in_p_AttributeTest9313); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            RPAREN498_tree = (XQDTCommonTree)adaptor.create(RPAREN498);
            adaptor.addChild(root_0, RPAREN498_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (XQDTCommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (XQDTCommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "p_AttributeTest"

    public static class p_AttribNameOrWildcard_return extends ParserRuleReturnScope {
        XQDTCommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "p_AttribNameOrWildcard"
    // XQueryParser.g:1095:1: p_AttribNameOrWildcard : ( p_QName | STAR );
    public final XQueryParser.p_AttribNameOrWildcard_return p_AttribNameOrWildcard() throws RecognitionException {
        XQueryParser.p_AttribNameOrWildcard_return retval = new XQueryParser.p_AttribNameOrWildcard_return();
        retval.start = input.LT(1);

        XQDTCommonTree root_0 = null;

        CommonToken STAR500=null;
        XQueryParser.p_QName_return p_QName499 = null;


        XQDTCommonTree STAR500_tree=null;

        try {
            // XQueryParser.g:1096:9: ( p_QName | STAR )
            int alt162=2;
            int LA162_0 = input.LA(1);

            if ( ((LA162_0>=ANCESTOR && LA162_0<=EXIT)||(LA162_0>=SEQUENTIAL && LA162_0<=MAINTAINED)||(LA162_0>=MUTABLE && LA162_0<=QUOT_ER)||LA162_0==L_NCName||LA162_0==EXPLICITLY) ) {
                alt162=1;
            }
            else if ( (LA162_0==STAR) ) {
                alt162=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 162, 0, input);

                throw nvae;
            }
            switch (alt162) {
                case 1 :
                    // XQueryParser.g:1096:13: p_QName
                    {
                    root_0 = (XQDTCommonTree)adaptor.nil();

                    pushFollow(FOLLOW_p_QName_in_p_AttribNameOrWildcard9343);
                    p_QName499=p_QName();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, p_QName499.getTree());

                    }
                    break;
                case 2 :
                    // XQueryParser.g:1096:23: STAR
                    {
                    root_0 = (XQDTCommonTree)adaptor.nil();

                    STAR500=(CommonToken)match(input,STAR,FOLLOW_STAR_in_p_AttribNameOrWildcard9347); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    STAR500_tree = (XQDTCommonTree)adaptor.create(STAR500);
                    adaptor.addChild(root_0, STAR500_tree);
                    }

                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (XQDTCommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (XQDTCommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "p_AttribNameOrWildcard"

    public static class p_SchemaAttributeTest_return extends ParserRuleReturnScope {
        XQDTCommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "p_SchemaAttributeTest"
    // XQueryParser.g:1100:1: p_SchemaAttributeTest : SCHEMA_ATTRIBUTE LPAREN p_AttributeDeclaration RPAREN ;
    public final XQueryParser.p_SchemaAttributeTest_return p_SchemaAttributeTest() throws RecognitionException {
        XQueryParser.p_SchemaAttributeTest_return retval = new XQueryParser.p_SchemaAttributeTest_return();
        retval.start = input.LT(1);

        XQDTCommonTree root_0 = null;

        CommonToken SCHEMA_ATTRIBUTE501=null;
        CommonToken LPAREN502=null;
        CommonToken RPAREN504=null;
        XQueryParser.p_AttributeDeclaration_return p_AttributeDeclaration503 = null;


        XQDTCommonTree SCHEMA_ATTRIBUTE501_tree=null;
        XQDTCommonTree LPAREN502_tree=null;
        XQDTCommonTree RPAREN504_tree=null;

        try {
            // XQueryParser.g:1101:9: ( SCHEMA_ATTRIBUTE LPAREN p_AttributeDeclaration RPAREN )
            // XQueryParser.g:1101:13: SCHEMA_ATTRIBUTE LPAREN p_AttributeDeclaration RPAREN
            {
            root_0 = (XQDTCommonTree)adaptor.nil();

            SCHEMA_ATTRIBUTE501=(CommonToken)match(input,SCHEMA_ATTRIBUTE,FOLLOW_SCHEMA_ATTRIBUTE_in_p_SchemaAttributeTest9375); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            SCHEMA_ATTRIBUTE501_tree = (XQDTCommonTree)adaptor.create(SCHEMA_ATTRIBUTE501);
            adaptor.addChild(root_0, SCHEMA_ATTRIBUTE501_tree);
            }
            LPAREN502=(CommonToken)match(input,LPAREN,FOLLOW_LPAREN_in_p_SchemaAttributeTest9377); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            LPAREN502_tree = (XQDTCommonTree)adaptor.create(LPAREN502);
            adaptor.addChild(root_0, LPAREN502_tree);
            }
            pushFollow(FOLLOW_p_AttributeDeclaration_in_p_SchemaAttributeTest9379);
            p_AttributeDeclaration503=p_AttributeDeclaration();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, p_AttributeDeclaration503.getTree());
            RPAREN504=(CommonToken)match(input,RPAREN,FOLLOW_RPAREN_in_p_SchemaAttributeTest9381); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            RPAREN504_tree = (XQDTCommonTree)adaptor.create(RPAREN504);
            adaptor.addChild(root_0, RPAREN504_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (XQDTCommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (XQDTCommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "p_SchemaAttributeTest"

    public static class p_AttributeDeclaration_return extends ParserRuleReturnScope {
        XQDTCommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "p_AttributeDeclaration"
    // XQueryParser.g:1105:1: p_AttributeDeclaration : p_AttributeName ;
    public final XQueryParser.p_AttributeDeclaration_return p_AttributeDeclaration() throws RecognitionException {
        XQueryParser.p_AttributeDeclaration_return retval = new XQueryParser.p_AttributeDeclaration_return();
        retval.start = input.LT(1);

        XQDTCommonTree root_0 = null;

        XQueryParser.p_AttributeName_return p_AttributeName505 = null;



        try {
            // XQueryParser.g:1106:9: ( p_AttributeName )
            // XQueryParser.g:1106:11: p_AttributeName
            {
            root_0 = (XQDTCommonTree)adaptor.nil();

            pushFollow(FOLLOW_p_AttributeName_in_p_AttributeDeclaration9407);
            p_AttributeName505=p_AttributeName();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, p_AttributeName505.getTree());

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (XQDTCommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (XQDTCommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "p_AttributeDeclaration"

    public static class p_ElementTest_return extends ParserRuleReturnScope {
        XQDTCommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "p_ElementTest"
    // XQueryParser.g:1110:1: p_ElementTest : ELEMENT LPAREN ( p_ElementNameOrWildcard ( COMMA p_TypeName ( QUESTION )? )? )? RPAREN ;
    public final XQueryParser.p_ElementTest_return p_ElementTest() throws RecognitionException {
        XQueryParser.p_ElementTest_return retval = new XQueryParser.p_ElementTest_return();
        retval.start = input.LT(1);

        XQDTCommonTree root_0 = null;

        CommonToken ELEMENT506=null;
        CommonToken LPAREN507=null;
        CommonToken COMMA509=null;
        CommonToken QUESTION511=null;
        CommonToken RPAREN512=null;
        XQueryParser.p_ElementNameOrWildcard_return p_ElementNameOrWildcard508 = null;

        XQueryParser.p_TypeName_return p_TypeName510 = null;


        XQDTCommonTree ELEMENT506_tree=null;
        XQDTCommonTree LPAREN507_tree=null;
        XQDTCommonTree COMMA509_tree=null;
        XQDTCommonTree QUESTION511_tree=null;
        XQDTCommonTree RPAREN512_tree=null;

        try {
            // XQueryParser.g:1111:9: ( ELEMENT LPAREN ( p_ElementNameOrWildcard ( COMMA p_TypeName ( QUESTION )? )? )? RPAREN )
            // XQueryParser.g:1111:13: ELEMENT LPAREN ( p_ElementNameOrWildcard ( COMMA p_TypeName ( QUESTION )? )? )? RPAREN
            {
            root_0 = (XQDTCommonTree)adaptor.nil();

            ELEMENT506=(CommonToken)match(input,ELEMENT,FOLLOW_ELEMENT_in_p_ElementTest9435); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            ELEMENT506_tree = (XQDTCommonTree)adaptor.create(ELEMENT506);
            adaptor.addChild(root_0, ELEMENT506_tree);
            }
            LPAREN507=(CommonToken)match(input,LPAREN,FOLLOW_LPAREN_in_p_ElementTest9437); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            LPAREN507_tree = (XQDTCommonTree)adaptor.create(LPAREN507);
            adaptor.addChild(root_0, LPAREN507_tree);
            }
            // XQueryParser.g:1111:28: ( p_ElementNameOrWildcard ( COMMA p_TypeName ( QUESTION )? )? )?
            int alt165=2;
            int LA165_0 = input.LA(1);

            if ( ((LA165_0>=ANCESTOR && LA165_0<=EXIT)||(LA165_0>=SEQUENTIAL && LA165_0<=MAINTAINED)||(LA165_0>=MUTABLE && LA165_0<=QUOT_ER)||LA165_0==STAR||LA165_0==L_NCName||LA165_0==EXPLICITLY) ) {
                alt165=1;
            }
            switch (alt165) {
                case 1 :
                    // XQueryParser.g:1111:29: p_ElementNameOrWildcard ( COMMA p_TypeName ( QUESTION )? )?
                    {
                    pushFollow(FOLLOW_p_ElementNameOrWildcard_in_p_ElementTest9440);
                    p_ElementNameOrWildcard508=p_ElementNameOrWildcard();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, p_ElementNameOrWildcard508.getTree());
                    // XQueryParser.g:1111:53: ( COMMA p_TypeName ( QUESTION )? )?
                    int alt164=2;
                    int LA164_0 = input.LA(1);

                    if ( (LA164_0==COMMA) ) {
                        alt164=1;
                    }
                    switch (alt164) {
                        case 1 :
                            // XQueryParser.g:1111:54: COMMA p_TypeName ( QUESTION )?
                            {
                            COMMA509=(CommonToken)match(input,COMMA,FOLLOW_COMMA_in_p_ElementTest9443); if (state.failed) return retval;
                            if ( state.backtracking==0 ) {
                            COMMA509_tree = (XQDTCommonTree)adaptor.create(COMMA509);
                            adaptor.addChild(root_0, COMMA509_tree);
                            }
                            pushFollow(FOLLOW_p_TypeName_in_p_ElementTest9445);
                            p_TypeName510=p_TypeName();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) adaptor.addChild(root_0, p_TypeName510.getTree());
                            // XQueryParser.g:1111:71: ( QUESTION )?
                            int alt163=2;
                            int LA163_0 = input.LA(1);

                            if ( (LA163_0==QUESTION) ) {
                                alt163=1;
                            }
                            switch (alt163) {
                                case 1 :
                                    // XQueryParser.g:1111:71: QUESTION
                                    {
                                    QUESTION511=(CommonToken)match(input,QUESTION,FOLLOW_QUESTION_in_p_ElementTest9447); if (state.failed) return retval;
                                    if ( state.backtracking==0 ) {
                                    QUESTION511_tree = (XQDTCommonTree)adaptor.create(QUESTION511);
                                    adaptor.addChild(root_0, QUESTION511_tree);
                                    }

                                    }
                                    break;

                            }


                            }
                            break;

                    }


                    }
                    break;

            }

            RPAREN512=(CommonToken)match(input,RPAREN,FOLLOW_RPAREN_in_p_ElementTest9454); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            RPAREN512_tree = (XQDTCommonTree)adaptor.create(RPAREN512);
            adaptor.addChild(root_0, RPAREN512_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (XQDTCommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (XQDTCommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "p_ElementTest"

    public static class p_ElementNameOrWildcard_return extends ParserRuleReturnScope {
        XQDTCommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "p_ElementNameOrWildcard"
    // XQueryParser.g:1115:1: p_ElementNameOrWildcard : ( p_QName | STAR );
    public final XQueryParser.p_ElementNameOrWildcard_return p_ElementNameOrWildcard() throws RecognitionException {
        XQueryParser.p_ElementNameOrWildcard_return retval = new XQueryParser.p_ElementNameOrWildcard_return();
        retval.start = input.LT(1);

        XQDTCommonTree root_0 = null;

        CommonToken STAR514=null;
        XQueryParser.p_QName_return p_QName513 = null;


        XQDTCommonTree STAR514_tree=null;

        try {
            // XQueryParser.g:1116:9: ( p_QName | STAR )
            int alt166=2;
            int LA166_0 = input.LA(1);

            if ( ((LA166_0>=ANCESTOR && LA166_0<=EXIT)||(LA166_0>=SEQUENTIAL && LA166_0<=MAINTAINED)||(LA166_0>=MUTABLE && LA166_0<=QUOT_ER)||LA166_0==L_NCName||LA166_0==EXPLICITLY) ) {
                alt166=1;
            }
            else if ( (LA166_0==STAR) ) {
                alt166=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 166, 0, input);

                throw nvae;
            }
            switch (alt166) {
                case 1 :
                    // XQueryParser.g:1116:13: p_QName
                    {
                    root_0 = (XQDTCommonTree)adaptor.nil();

                    pushFollow(FOLLOW_p_QName_in_p_ElementNameOrWildcard9482);
                    p_QName513=p_QName();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, p_QName513.getTree());

                    }
                    break;
                case 2 :
                    // XQueryParser.g:1116:23: STAR
                    {
                    root_0 = (XQDTCommonTree)adaptor.nil();

                    STAR514=(CommonToken)match(input,STAR,FOLLOW_STAR_in_p_ElementNameOrWildcard9486); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    STAR514_tree = (XQDTCommonTree)adaptor.create(STAR514);
                    adaptor.addChild(root_0, STAR514_tree);
                    }

                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (XQDTCommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (XQDTCommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "p_ElementNameOrWildcard"

    public static class p_SchemaElementTest_return extends ParserRuleReturnScope {
        XQDTCommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "p_SchemaElementTest"
    // XQueryParser.g:1119:1: p_SchemaElementTest : SCHEMA_ELEMENT LPAREN p_ElementDeclaration RPAREN ;
    public final XQueryParser.p_SchemaElementTest_return p_SchemaElementTest() throws RecognitionException {
        XQueryParser.p_SchemaElementTest_return retval = new XQueryParser.p_SchemaElementTest_return();
        retval.start = input.LT(1);

        XQDTCommonTree root_0 = null;

        CommonToken SCHEMA_ELEMENT515=null;
        CommonToken LPAREN516=null;
        CommonToken RPAREN518=null;
        XQueryParser.p_ElementDeclaration_return p_ElementDeclaration517 = null;


        XQDTCommonTree SCHEMA_ELEMENT515_tree=null;
        XQDTCommonTree LPAREN516_tree=null;
        XQDTCommonTree RPAREN518_tree=null;

        try {
            // XQueryParser.g:1120:9: ( SCHEMA_ELEMENT LPAREN p_ElementDeclaration RPAREN )
            // XQueryParser.g:1120:13: SCHEMA_ELEMENT LPAREN p_ElementDeclaration RPAREN
            {
            root_0 = (XQDTCommonTree)adaptor.nil();

            SCHEMA_ELEMENT515=(CommonToken)match(input,SCHEMA_ELEMENT,FOLLOW_SCHEMA_ELEMENT_in_p_SchemaElementTest9506); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            SCHEMA_ELEMENT515_tree = (XQDTCommonTree)adaptor.create(SCHEMA_ELEMENT515);
            adaptor.addChild(root_0, SCHEMA_ELEMENT515_tree);
            }
            LPAREN516=(CommonToken)match(input,LPAREN,FOLLOW_LPAREN_in_p_SchemaElementTest9508); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            LPAREN516_tree = (XQDTCommonTree)adaptor.create(LPAREN516);
            adaptor.addChild(root_0, LPAREN516_tree);
            }
            pushFollow(FOLLOW_p_ElementDeclaration_in_p_SchemaElementTest9510);
            p_ElementDeclaration517=p_ElementDeclaration();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, p_ElementDeclaration517.getTree());
            RPAREN518=(CommonToken)match(input,RPAREN,FOLLOW_RPAREN_in_p_SchemaElementTest9512); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            RPAREN518_tree = (XQDTCommonTree)adaptor.create(RPAREN518);
            adaptor.addChild(root_0, RPAREN518_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (XQDTCommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (XQDTCommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "p_SchemaElementTest"

    public static class p_ElementDeclaration_return extends ParserRuleReturnScope {
        XQDTCommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "p_ElementDeclaration"
    // XQueryParser.g:1124:1: p_ElementDeclaration : p_ElementName ;
    public final XQueryParser.p_ElementDeclaration_return p_ElementDeclaration() throws RecognitionException {
        XQueryParser.p_ElementDeclaration_return retval = new XQueryParser.p_ElementDeclaration_return();
        retval.start = input.LT(1);

        XQDTCommonTree root_0 = null;

        XQueryParser.p_ElementName_return p_ElementName519 = null;



        try {
            // XQueryParser.g:1125:9: ( p_ElementName )
            // XQueryParser.g:1125:11: p_ElementName
            {
            root_0 = (XQDTCommonTree)adaptor.nil();

            pushFollow(FOLLOW_p_ElementName_in_p_ElementDeclaration9538);
            p_ElementName519=p_ElementName();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, p_ElementName519.getTree());

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (XQDTCommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (XQDTCommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "p_ElementDeclaration"

    public static class p_AttributeName_return extends ParserRuleReturnScope {
        XQDTCommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "p_AttributeName"
    // XQueryParser.g:1129:1: p_AttributeName : p_QName ;
    public final XQueryParser.p_AttributeName_return p_AttributeName() throws RecognitionException {
        XQueryParser.p_AttributeName_return retval = new XQueryParser.p_AttributeName_return();
        retval.start = input.LT(1);

        XQDTCommonTree root_0 = null;

        XQueryParser.p_QName_return p_QName520 = null;



        try {
            // XQueryParser.g:1130:9: ( p_QName )
            // XQueryParser.g:1130:13: p_QName
            {
            root_0 = (XQDTCommonTree)adaptor.nil();

            pushFollow(FOLLOW_p_QName_in_p_AttributeName9566);
            p_QName520=p_QName();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, p_QName520.getTree());

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (XQDTCommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (XQDTCommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "p_AttributeName"

    public static class p_ElementName_return extends ParserRuleReturnScope {
        XQDTCommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "p_ElementName"
    // XQueryParser.g:1134:1: p_ElementName : p_QName ;
    public final XQueryParser.p_ElementName_return p_ElementName() throws RecognitionException {
        XQueryParser.p_ElementName_return retval = new XQueryParser.p_ElementName_return();
        retval.start = input.LT(1);

        XQDTCommonTree root_0 = null;

        XQueryParser.p_QName_return p_QName521 = null;



        try {
            // XQueryParser.g:1135:9: ( p_QName )
            // XQueryParser.g:1135:13: p_QName
            {
            root_0 = (XQDTCommonTree)adaptor.nil();

            pushFollow(FOLLOW_p_QName_in_p_ElementName9594);
            p_QName521=p_QName();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, p_QName521.getTree());

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (XQDTCommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (XQDTCommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "p_ElementName"

    public static class p_TypeName_return extends ParserRuleReturnScope {
        XQDTCommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "p_TypeName"
    // XQueryParser.g:1139:1: p_TypeName : p_QName ;
    public final XQueryParser.p_TypeName_return p_TypeName() throws RecognitionException {
        XQueryParser.p_TypeName_return retval = new XQueryParser.p_TypeName_return();
        retval.start = input.LT(1);

        XQDTCommonTree root_0 = null;

        XQueryParser.p_QName_return p_QName522 = null;



        try {
            // XQueryParser.g:1140:9: ( p_QName )
            // XQueryParser.g:1140:13: p_QName
            {
            root_0 = (XQDTCommonTree)adaptor.nil();

            pushFollow(FOLLOW_p_QName_in_p_TypeName9622);
            p_QName522=p_QName();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, p_QName522.getTree());

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (XQDTCommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (XQDTCommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "p_TypeName"

    public static class p_TryCatchExpr_return extends ParserRuleReturnScope {
        XQDTCommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "p_TryCatchExpr"
    // XQueryParser.g:1150:1: p_TryCatchExpr : p_TryClause ( p_CatchClause )+ ;
    public final XQueryParser.p_TryCatchExpr_return p_TryCatchExpr() throws RecognitionException {
        XQueryParser.p_TryCatchExpr_return retval = new XQueryParser.p_TryCatchExpr_return();
        retval.start = input.LT(1);

        XQDTCommonTree root_0 = null;

        XQueryParser.p_TryClause_return p_TryClause523 = null;

        XQueryParser.p_CatchClause_return p_CatchClause524 = null;



        try {
            // XQueryParser.g:1151:9: ( p_TryClause ( p_CatchClause )+ )
            // XQueryParser.g:1151:11: p_TryClause ( p_CatchClause )+
            {
            root_0 = (XQDTCommonTree)adaptor.nil();

            pushFollow(FOLLOW_p_TryClause_in_p_TryCatchExpr9654);
            p_TryClause523=p_TryClause();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, p_TryClause523.getTree());
            // XQueryParser.g:1151:23: ( p_CatchClause )+
            int cnt167=0;
            loop167:
            do {
                int alt167=2;
                int LA167_0 = input.LA(1);

                if ( (LA167_0==CATCH) ) {
                    alt167=1;
                }


                switch (alt167) {
            	case 1 :
            	    // XQueryParser.g:1151:23: p_CatchClause
            	    {
            	    pushFollow(FOLLOW_p_CatchClause_in_p_TryCatchExpr9656);
            	    p_CatchClause524=p_CatchClause();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, p_CatchClause524.getTree());

            	    }
            	    break;

            	default :
            	    if ( cnt167 >= 1 ) break loop167;
            	    if (state.backtracking>0) {state.failed=true; return retval;}
                        EarlyExitException eee =
                            new EarlyExitException(167, input);
                        throw eee;
                }
                cnt167++;
            } while (true);


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (XQDTCommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (XQDTCommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "p_TryCatchExpr"

    public static class p_TryClause_return extends ParserRuleReturnScope {
        XQDTCommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "p_TryClause"
    // XQueryParser.g:1155:1: p_TryClause : kc= TRY LBRACKET pm_Expr RBRACKET ;
    public final XQueryParser.p_TryClause_return p_TryClause() throws RecognitionException {
        XQueryParser.p_TryClause_return retval = new XQueryParser.p_TryClause_return();
        retval.start = input.LT(1);

        XQDTCommonTree root_0 = null;

        CommonToken kc=null;
        CommonToken LBRACKET525=null;
        CommonToken RBRACKET527=null;
        XQueryParser.pm_Expr_return pm_Expr526 = null;


        XQDTCommonTree kc_tree=null;
        XQDTCommonTree LBRACKET525_tree=null;
        XQDTCommonTree RBRACKET527_tree=null;

        try {
            // XQueryParser.g:1156:9: (kc= TRY LBRACKET pm_Expr RBRACKET )
            // XQueryParser.g:1156:11: kc= TRY LBRACKET pm_Expr RBRACKET
            {
            root_0 = (XQDTCommonTree)adaptor.nil();

            kc=(CommonToken)match(input,TRY,FOLLOW_TRY_in_p_TryClause9685); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            kc_tree = (XQDTCommonTree)adaptor.create(kc);
            adaptor.addChild(root_0, kc_tree);
            }
            if ( state.backtracking==0 ) {
              ak(kc);
            }
            LBRACKET525=(CommonToken)match(input,LBRACKET,FOLLOW_LBRACKET_in_p_TryClause9689); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            LBRACKET525_tree = (XQDTCommonTree)adaptor.create(LBRACKET525);
            adaptor.addChild(root_0, LBRACKET525_tree);
            }
            pushFollow(FOLLOW_pm_Expr_in_p_TryClause9691);
            pm_Expr526=pm_Expr();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, pm_Expr526.getTree());
            RBRACKET527=(CommonToken)match(input,RBRACKET,FOLLOW_RBRACKET_in_p_TryClause9693); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            RBRACKET527_tree = (XQDTCommonTree)adaptor.create(RBRACKET527);
            adaptor.addChild(root_0, RBRACKET527_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (XQDTCommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (XQDTCommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "p_TryClause"

    public static class p_CatchClause_return extends ParserRuleReturnScope {
        XQDTCommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "p_CatchClause"
    // XQueryParser.g:1163:1: p_CatchClause : kc= CATCH p_CatchErrorList ( p_CatchVars )? LBRACKET pm_Expr RBRACKET ;
    public final XQueryParser.p_CatchClause_return p_CatchClause() throws RecognitionException {
        XQueryParser.p_CatchClause_return retval = new XQueryParser.p_CatchClause_return();
        retval.start = input.LT(1);

        XQDTCommonTree root_0 = null;

        CommonToken kc=null;
        CommonToken LBRACKET530=null;
        CommonToken RBRACKET532=null;
        XQueryParser.p_CatchErrorList_return p_CatchErrorList528 = null;

        XQueryParser.p_CatchVars_return p_CatchVars529 = null;

        XQueryParser.pm_Expr_return pm_Expr531 = null;


        XQDTCommonTree kc_tree=null;
        XQDTCommonTree LBRACKET530_tree=null;
        XQDTCommonTree RBRACKET532_tree=null;

        try {
            // XQueryParser.g:1164:9: (kc= CATCH p_CatchErrorList ( p_CatchVars )? LBRACKET pm_Expr RBRACKET )
            // XQueryParser.g:1164:11: kc= CATCH p_CatchErrorList ( p_CatchVars )? LBRACKET pm_Expr RBRACKET
            {
            root_0 = (XQDTCommonTree)adaptor.nil();

            kc=(CommonToken)match(input,CATCH,FOLLOW_CATCH_in_p_CatchClause9724); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            kc_tree = (XQDTCommonTree)adaptor.create(kc);
            adaptor.addChild(root_0, kc_tree);
            }
            if ( state.backtracking==0 ) {
              ak(kc);
            }
            pushFollow(FOLLOW_p_CatchErrorList_in_p_CatchClause9728);
            p_CatchErrorList528=p_CatchErrorList();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, p_CatchErrorList528.getTree());
            // XQueryParser.g:1164:48: ( p_CatchVars )?
            int alt168=2;
            int LA168_0 = input.LA(1);

            if ( (LA168_0==LPAREN) ) {
                alt168=1;
            }
            switch (alt168) {
                case 1 :
                    // XQueryParser.g:1164:48: p_CatchVars
                    {
                    pushFollow(FOLLOW_p_CatchVars_in_p_CatchClause9730);
                    p_CatchVars529=p_CatchVars();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, p_CatchVars529.getTree());

                    }
                    break;

            }

            LBRACKET530=(CommonToken)match(input,LBRACKET,FOLLOW_LBRACKET_in_p_CatchClause9733); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            LBRACKET530_tree = (XQDTCommonTree)adaptor.create(LBRACKET530);
            adaptor.addChild(root_0, LBRACKET530_tree);
            }
            pushFollow(FOLLOW_pm_Expr_in_p_CatchClause9735);
            pm_Expr531=pm_Expr();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, pm_Expr531.getTree());
            RBRACKET532=(CommonToken)match(input,RBRACKET,FOLLOW_RBRACKET_in_p_CatchClause9737); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            RBRACKET532_tree = (XQDTCommonTree)adaptor.create(RBRACKET532);
            adaptor.addChild(root_0, RBRACKET532_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (XQDTCommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (XQDTCommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "p_CatchClause"

    public static class p_CatchErrorList_return extends ParserRuleReturnScope {
        XQDTCommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "p_CatchErrorList"
    // XQueryParser.g:1168:1: p_CatchErrorList : ( p_NameTest ( VBAR p_NameTest )* | {...}? => () );
    public final XQueryParser.p_CatchErrorList_return p_CatchErrorList() throws RecognitionException {
        XQueryParser.p_CatchErrorList_return retval = new XQueryParser.p_CatchErrorList_return();
        retval.start = input.LT(1);

        XQDTCommonTree root_0 = null;

        CommonToken VBAR534=null;
        XQueryParser.p_NameTest_return p_NameTest533 = null;

        XQueryParser.p_NameTest_return p_NameTest535 = null;


        XQDTCommonTree VBAR534_tree=null;

        try {
            // XQueryParser.g:1169:9: ( p_NameTest ( VBAR p_NameTest )* | {...}? => () )
            int alt170=2;
            int LA170_0 = input.LA(1);

            if ( ((LA170_0>=ANCESTOR && LA170_0<=EXIT)||(LA170_0>=SEQUENTIAL && LA170_0<=MAINTAINED)||(LA170_0>=MUTABLE && LA170_0<=QUOT_ER)||LA170_0==STAR||LA170_0==L_NCName||LA170_0==EXPLICITLY) ) {
                alt170=1;
            }
            else if ( (LA170_0==LPAREN||LA170_0==LBRACKET) && ((lc(MLS)))) {
                alt170=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 170, 0, input);

                throw nvae;
            }
            switch (alt170) {
                case 1 :
                    // XQueryParser.g:1169:11: p_NameTest ( VBAR p_NameTest )*
                    {
                    root_0 = (XQDTCommonTree)adaptor.nil();

                    pushFollow(FOLLOW_p_NameTest_in_p_CatchErrorList9763);
                    p_NameTest533=p_NameTest();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, p_NameTest533.getTree());
                    // XQueryParser.g:1169:22: ( VBAR p_NameTest )*
                    loop169:
                    do {
                        int alt169=2;
                        int LA169_0 = input.LA(1);

                        if ( (LA169_0==VBAR) ) {
                            alt169=1;
                        }


                        switch (alt169) {
                    	case 1 :
                    	    // XQueryParser.g:1169:23: VBAR p_NameTest
                    	    {
                    	    VBAR534=(CommonToken)match(input,VBAR,FOLLOW_VBAR_in_p_CatchErrorList9766); if (state.failed) return retval;
                    	    if ( state.backtracking==0 ) {
                    	    VBAR534_tree = (XQDTCommonTree)adaptor.create(VBAR534);
                    	    adaptor.addChild(root_0, VBAR534_tree);
                    	    }
                    	    pushFollow(FOLLOW_p_NameTest_in_p_CatchErrorList9768);
                    	    p_NameTest535=p_NameTest();

                    	    state._fsp--;
                    	    if (state.failed) return retval;
                    	    if ( state.backtracking==0 ) adaptor.addChild(root_0, p_NameTest535.getTree());

                    	    }
                    	    break;

                    	default :
                    	    break loop169;
                        }
                    } while (true);


                    }
                    break;
                case 2 :
                    // XQueryParser.g:1170:11: {...}? => ()
                    {
                    root_0 = (XQDTCommonTree)adaptor.nil();

                    if ( !((lc(MLS))) ) {
                        if (state.backtracking>0) {state.failed=true; return retval;}
                        throw new FailedPredicateException(input, "p_CatchErrorList", "lc(MLS)");
                    }
                    // XQueryParser.g:1170:24: ()
                    // XQueryParser.g:1170:38: 
                    {
                    }


                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (XQDTCommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (XQDTCommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "p_CatchErrorList"

    public static class p_CatchVars_return extends ParserRuleReturnScope {
        XQDTCommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "p_CatchVars"
    // XQueryParser.g:1174:2: p_CatchVars : LPAREN DOLLAR p_VarName ( COMMA DOLLAR p_VarName ( COMMA DOLLAR p_VarName )? )? RPAREN ;
    public final XQueryParser.p_CatchVars_return p_CatchVars() throws RecognitionException {
        XQueryParser.p_CatchVars_return retval = new XQueryParser.p_CatchVars_return();
        retval.start = input.LT(1);

        XQDTCommonTree root_0 = null;

        CommonToken LPAREN536=null;
        CommonToken DOLLAR537=null;
        CommonToken COMMA539=null;
        CommonToken DOLLAR540=null;
        CommonToken COMMA542=null;
        CommonToken DOLLAR543=null;
        CommonToken RPAREN545=null;
        XQueryParser.p_VarName_return p_VarName538 = null;

        XQueryParser.p_VarName_return p_VarName541 = null;

        XQueryParser.p_VarName_return p_VarName544 = null;


        XQDTCommonTree LPAREN536_tree=null;
        XQDTCommonTree DOLLAR537_tree=null;
        XQDTCommonTree COMMA539_tree=null;
        XQDTCommonTree DOLLAR540_tree=null;
        XQDTCommonTree COMMA542_tree=null;
        XQDTCommonTree DOLLAR543_tree=null;
        XQDTCommonTree RPAREN545_tree=null;

        try {
            // XQueryParser.g:1175:9: ( LPAREN DOLLAR p_VarName ( COMMA DOLLAR p_VarName ( COMMA DOLLAR p_VarName )? )? RPAREN )
            // XQueryParser.g:1175:11: LPAREN DOLLAR p_VarName ( COMMA DOLLAR p_VarName ( COMMA DOLLAR p_VarName )? )? RPAREN
            {
            root_0 = (XQDTCommonTree)adaptor.nil();

            LPAREN536=(CommonToken)match(input,LPAREN,FOLLOW_LPAREN_in_p_CatchVars9814); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            LPAREN536_tree = (XQDTCommonTree)adaptor.create(LPAREN536);
            adaptor.addChild(root_0, LPAREN536_tree);
            }
            DOLLAR537=(CommonToken)match(input,DOLLAR,FOLLOW_DOLLAR_in_p_CatchVars9816); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            DOLLAR537_tree = (XQDTCommonTree)adaptor.create(DOLLAR537);
            adaptor.addChild(root_0, DOLLAR537_tree);
            }
            pushFollow(FOLLOW_p_VarName_in_p_CatchVars9818);
            p_VarName538=p_VarName();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, p_VarName538.getTree());
            // XQueryParser.g:1175:35: ( COMMA DOLLAR p_VarName ( COMMA DOLLAR p_VarName )? )?
            int alt172=2;
            int LA172_0 = input.LA(1);

            if ( (LA172_0==COMMA) ) {
                alt172=1;
            }
            switch (alt172) {
                case 1 :
                    // XQueryParser.g:1175:36: COMMA DOLLAR p_VarName ( COMMA DOLLAR p_VarName )?
                    {
                    COMMA539=(CommonToken)match(input,COMMA,FOLLOW_COMMA_in_p_CatchVars9821); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    COMMA539_tree = (XQDTCommonTree)adaptor.create(COMMA539);
                    adaptor.addChild(root_0, COMMA539_tree);
                    }
                    DOLLAR540=(CommonToken)match(input,DOLLAR,FOLLOW_DOLLAR_in_p_CatchVars9823); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    DOLLAR540_tree = (XQDTCommonTree)adaptor.create(DOLLAR540);
                    adaptor.addChild(root_0, DOLLAR540_tree);
                    }
                    pushFollow(FOLLOW_p_VarName_in_p_CatchVars9825);
                    p_VarName541=p_VarName();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, p_VarName541.getTree());
                    // XQueryParser.g:1175:59: ( COMMA DOLLAR p_VarName )?
                    int alt171=2;
                    int LA171_0 = input.LA(1);

                    if ( (LA171_0==COMMA) ) {
                        alt171=1;
                    }
                    switch (alt171) {
                        case 1 :
                            // XQueryParser.g:1175:60: COMMA DOLLAR p_VarName
                            {
                            COMMA542=(CommonToken)match(input,COMMA,FOLLOW_COMMA_in_p_CatchVars9828); if (state.failed) return retval;
                            if ( state.backtracking==0 ) {
                            COMMA542_tree = (XQDTCommonTree)adaptor.create(COMMA542);
                            adaptor.addChild(root_0, COMMA542_tree);
                            }
                            DOLLAR543=(CommonToken)match(input,DOLLAR,FOLLOW_DOLLAR_in_p_CatchVars9830); if (state.failed) return retval;
                            if ( state.backtracking==0 ) {
                            DOLLAR543_tree = (XQDTCommonTree)adaptor.create(DOLLAR543);
                            adaptor.addChild(root_0, DOLLAR543_tree);
                            }
                            pushFollow(FOLLOW_p_VarName_in_p_CatchVars9832);
                            p_VarName544=p_VarName();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) adaptor.addChild(root_0, p_VarName544.getTree());

                            }
                            break;

                    }


                    }
                    break;

            }

            RPAREN545=(CommonToken)match(input,RPAREN,FOLLOW_RPAREN_in_p_CatchVars9838); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            RPAREN545_tree = (XQDTCommonTree)adaptor.create(RPAREN545);
            adaptor.addChild(root_0, RPAREN545_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (XQDTCommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (XQDTCommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "p_CatchVars"

    public static class p_StringLiteral_return extends ParserRuleReturnScope {
        XQDTCommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "p_StringLiteral"
    // XQueryParser.g:1201:1: p_StringLiteral : ( QUOT p_QuotStringLiteralContent QUOT -> ^( StringLiteral ( p_QuotStringLiteralContent )* ) | APOS p_AposStringLiteralContent APOS -> ^( StringLiteral ( p_AposStringLiteralContent )* ) );
    public final XQueryParser.p_StringLiteral_return p_StringLiteral() throws RecognitionException {
        XQueryParser.p_StringLiteral_return retval = new XQueryParser.p_StringLiteral_return();
        retval.start = input.LT(1);

        XQDTCommonTree root_0 = null;

        CommonToken QUOT546=null;
        CommonToken QUOT548=null;
        CommonToken APOS549=null;
        CommonToken APOS551=null;
        XQueryParser.p_QuotStringLiteralContent_return p_QuotStringLiteralContent547 = null;

        XQueryParser.p_AposStringLiteralContent_return p_AposStringLiteralContent550 = null;


        XQDTCommonTree QUOT546_tree=null;
        XQDTCommonTree QUOT548_tree=null;
        XQDTCommonTree APOS549_tree=null;
        XQDTCommonTree APOS551_tree=null;
        RewriteRuleTokenStream stream_APOS=new RewriteRuleTokenStream(adaptor,"token APOS");
        RewriteRuleTokenStream stream_QUOT=new RewriteRuleTokenStream(adaptor,"token QUOT");
        RewriteRuleSubtreeStream stream_p_AposStringLiteralContent=new RewriteRuleSubtreeStream(adaptor,"rule p_AposStringLiteralContent");
        RewriteRuleSubtreeStream stream_p_QuotStringLiteralContent=new RewriteRuleSubtreeStream(adaptor,"rule p_QuotStringLiteralContent");
        try {
            // XQueryParser.g:1202:9: ( QUOT p_QuotStringLiteralContent QUOT -> ^( StringLiteral ( p_QuotStringLiteralContent )* ) | APOS p_AposStringLiteralContent APOS -> ^( StringLiteral ( p_AposStringLiteralContent )* ) )
            int alt173=2;
            int LA173_0 = input.LA(1);

            if ( (LA173_0==QUOT) ) {
                alt173=1;
            }
            else if ( (LA173_0==APOS) ) {
                alt173=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 173, 0, input);

                throw nvae;
            }
            switch (alt173) {
                case 1 :
                    // XQueryParser.g:1202:11: QUOT p_QuotStringLiteralContent QUOT
                    {
                    QUOT546=(CommonToken)match(input,QUOT,FOLLOW_QUOT_in_p_StringLiteral9887); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_QUOT.add(QUOT546);

                    if ( state.backtracking==0 ) {
                      pushStringLexer(false);
                    }
                    pushFollow(FOLLOW_p_QuotStringLiteralContent_in_p_StringLiteral9891);
                    p_QuotStringLiteralContent547=p_QuotStringLiteralContent();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_p_QuotStringLiteralContent.add(p_QuotStringLiteralContent547.getTree());
                    QUOT548=(CommonToken)match(input,QUOT,FOLLOW_QUOT_in_p_StringLiteral9893); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_QUOT.add(QUOT548);

                    if ( state.backtracking==0 ) {
                       popLexer(); 
                    }


                    // AST REWRITE
                    // elements: p_QuotStringLiteralContent
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (XQDTCommonTree)adaptor.nil();
                    // 1203:17: -> ^( StringLiteral ( p_QuotStringLiteralContent )* )
                    {
                        // XQueryParser.g:1203:20: ^( StringLiteral ( p_QuotStringLiteralContent )* )
                        {
                        XQDTCommonTree root_1 = (XQDTCommonTree)adaptor.nil();
                        root_1 = (XQDTCommonTree)adaptor.becomeRoot((XQDTCommonTree)adaptor.create(StringLiteral, "StringLiteral"), root_1);

                        // XQueryParser.g:1203:36: ( p_QuotStringLiteralContent )*
                        while ( stream_p_QuotStringLiteralContent.hasNext() ) {
                            adaptor.addChild(root_1, stream_p_QuotStringLiteralContent.nextTree());

                        }
                        stream_p_QuotStringLiteralContent.reset();

                        adaptor.addChild(root_0, root_1);
                        }

                    }

                    retval.tree = root_0;}
                    }
                    break;
                case 2 :
                    // XQueryParser.g:1204:13: APOS p_AposStringLiteralContent APOS
                    {
                    APOS549=(CommonToken)match(input,APOS,FOLLOW_APOS_in_p_StringLiteral9934); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_APOS.add(APOS549);

                    if ( state.backtracking==0 ) {
                      pushStringLexer(true);
                    }
                    pushFollow(FOLLOW_p_AposStringLiteralContent_in_p_StringLiteral9938);
                    p_AposStringLiteralContent550=p_AposStringLiteralContent();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_p_AposStringLiteralContent.add(p_AposStringLiteralContent550.getTree());
                    APOS551=(CommonToken)match(input,APOS,FOLLOW_APOS_in_p_StringLiteral9940); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_APOS.add(APOS551);

                    if ( state.backtracking==0 ) {
                       popLexer(); 
                    }


                    // AST REWRITE
                    // elements: p_AposStringLiteralContent
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (XQDTCommonTree)adaptor.nil();
                    // 1205:17: -> ^( StringLiteral ( p_AposStringLiteralContent )* )
                    {
                        // XQueryParser.g:1205:20: ^( StringLiteral ( p_AposStringLiteralContent )* )
                        {
                        XQDTCommonTree root_1 = (XQDTCommonTree)adaptor.nil();
                        root_1 = (XQDTCommonTree)adaptor.becomeRoot((XQDTCommonTree)adaptor.create(StringLiteral, "StringLiteral"), root_1);

                        // XQueryParser.g:1205:36: ( p_AposStringLiteralContent )*
                        while ( stream_p_AposStringLiteralContent.hasNext() ) {
                            adaptor.addChild(root_1, stream_p_AposStringLiteralContent.nextTree());

                        }
                        stream_p_AposStringLiteralContent.reset();

                        adaptor.addChild(root_0, root_1);
                        }

                    }

                    retval.tree = root_0;}
                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (XQDTCommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (XQDTCommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "p_StringLiteral"

    public static class p_QuotStringLiteralContent_return extends ParserRuleReturnScope {
        XQDTCommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "p_QuotStringLiteralContent"
    // XQueryParser.g:1212:1: p_QuotStringLiteralContent : ( ESCAPE_QUOT | L_CharRef | L_PredefinedEntityRef | ~ ( QUOT | AMP ) )* ;
    public final XQueryParser.p_QuotStringLiteralContent_return p_QuotStringLiteralContent() throws RecognitionException {
        XQueryParser.p_QuotStringLiteralContent_return retval = new XQueryParser.p_QuotStringLiteralContent_return();
        retval.start = input.LT(1);

        XQDTCommonTree root_0 = null;

        CommonToken set552=null;

        XQDTCommonTree set552_tree=null;

        try {
            // XQueryParser.g:1213:9: ( ( ESCAPE_QUOT | L_CharRef | L_PredefinedEntityRef | ~ ( QUOT | AMP ) )* )
            // XQueryParser.g:1213:11: ( ESCAPE_QUOT | L_CharRef | L_PredefinedEntityRef | ~ ( QUOT | AMP ) )*
            {
            root_0 = (XQDTCommonTree)adaptor.nil();

            // XQueryParser.g:1213:11: ( ESCAPE_QUOT | L_CharRef | L_PredefinedEntityRef | ~ ( QUOT | AMP ) )*
            loop174:
            do {
                int alt174=2;
                int LA174_0 = input.LA(1);

                if ( ((LA174_0>=L_QuotAttrContentChar && LA174_0<=NOTEQUAL)||(LA174_0>=COMMA && LA174_0<=APOS)||(LA174_0>=NCNameStartChar && LA174_0<=EXPLICITLY)) ) {
                    alt174=1;
                }


                switch (alt174) {
            	case 1 :
            	    // XQueryParser.g:
            	    {
            	    set552=(CommonToken)input.LT(1);
            	    if ( (input.LA(1)>=L_QuotAttrContentChar && input.LA(1)<=NOTEQUAL)||(input.LA(1)>=COMMA && input.LA(1)<=APOS)||(input.LA(1)>=NCNameStartChar && input.LA(1)<=EXPLICITLY) ) {
            	        input.consume();
            	        if ( state.backtracking==0 ) adaptor.addChild(root_0, (XQDTCommonTree)adaptor.create(set552));
            	        state.errorRecovery=false;state.failed=false;
            	    }
            	    else {
            	        if (state.backtracking>0) {state.failed=true; return retval;}
            	        MismatchedSetException mse = new MismatchedSetException(null,input);
            	        throw mse;
            	    }


            	    }
            	    break;

            	default :
            	    break loop174;
                }
            } while (true);


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (XQDTCommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (XQDTCommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "p_QuotStringLiteralContent"

    public static class p_AposStringLiteralContent_return extends ParserRuleReturnScope {
        XQDTCommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "p_AposStringLiteralContent"
    // XQueryParser.g:1221:1: p_AposStringLiteralContent : ( ESCAPE_QUOT | L_CharRef | L_PredefinedEntityRef | ~ ( APOS | AMP ) )* ;
    public final XQueryParser.p_AposStringLiteralContent_return p_AposStringLiteralContent() throws RecognitionException {
        XQueryParser.p_AposStringLiteralContent_return retval = new XQueryParser.p_AposStringLiteralContent_return();
        retval.start = input.LT(1);

        XQDTCommonTree root_0 = null;

        CommonToken set553=null;

        XQDTCommonTree set553_tree=null;

        try {
            // XQueryParser.g:1222:9: ( ( ESCAPE_QUOT | L_CharRef | L_PredefinedEntityRef | ~ ( APOS | AMP ) )* )
            // XQueryParser.g:1222:11: ( ESCAPE_QUOT | L_CharRef | L_PredefinedEntityRef | ~ ( APOS | AMP ) )*
            {
            root_0 = (XQDTCommonTree)adaptor.nil();

            // XQueryParser.g:1222:11: ( ESCAPE_QUOT | L_CharRef | L_PredefinedEntityRef | ~ ( APOS | AMP ) )*
            loop175:
            do {
                int alt175=2;
                int LA175_0 = input.LA(1);

                if ( ((LA175_0>=L_QuotAttrContentChar && LA175_0<=NOTEQUAL)||(LA175_0>=COMMA && LA175_0<=CHARREF_HEX)||(LA175_0>=QUOT && LA175_0<=EXPLICITLY)) ) {
                    alt175=1;
                }


                switch (alt175) {
            	case 1 :
            	    // XQueryParser.g:
            	    {
            	    set553=(CommonToken)input.LT(1);
            	    if ( (input.LA(1)>=L_QuotAttrContentChar && input.LA(1)<=NOTEQUAL)||(input.LA(1)>=COMMA && input.LA(1)<=CHARREF_HEX)||(input.LA(1)>=QUOT && input.LA(1)<=EXPLICITLY) ) {
            	        input.consume();
            	        if ( state.backtracking==0 ) adaptor.addChild(root_0, (XQDTCommonTree)adaptor.create(set553));
            	        state.errorRecovery=false;state.failed=false;
            	    }
            	    else {
            	        if (state.backtracking>0) {state.failed=true; return retval;}
            	        MismatchedSetException mse = new MismatchedSetException(null,input);
            	        throw mse;
            	    }


            	    }
            	    break;

            	default :
            	    break loop175;
                }
            } while (true);


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (XQDTCommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (XQDTCommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "p_AposStringLiteralContent"

    public static class p_QName_return extends ParserRuleReturnScope {
        XQDTCommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "p_QName"
    // XQueryParser.g:1255:1: p_QName : p_NCName p_LocalNCName -> ^( QName p_NCName ( p_LocalNCName )? ) ;
    public final XQueryParser.p_QName_return p_QName() throws RecognitionException {
        XQueryParser.p_QName_return retval = new XQueryParser.p_QName_return();
        retval.start = input.LT(1);

        XQDTCommonTree root_0 = null;

        XQueryParser.p_NCName_return p_NCName554 = null;

        XQueryParser.p_LocalNCName_return p_LocalNCName555 = null;


        RewriteRuleSubtreeStream stream_p_LocalNCName=new RewriteRuleSubtreeStream(adaptor,"rule p_LocalNCName");
        RewriteRuleSubtreeStream stream_p_NCName=new RewriteRuleSubtreeStream(adaptor,"rule p_NCName");
        setWsExplicit(true);
        try {
            // XQueryParser.g:1256:9: ( p_NCName p_LocalNCName -> ^( QName p_NCName ( p_LocalNCName )? ) )
            // XQueryParser.g:1256:11: p_NCName p_LocalNCName
            {
            pushFollow(FOLLOW_p_NCName_in_p_QName10138);
            p_NCName554=p_NCName();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_p_NCName.add(p_NCName554.getTree());
            pushFollow(FOLLOW_p_LocalNCName_in_p_QName10140);
            p_LocalNCName555=p_LocalNCName();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_p_LocalNCName.add(p_LocalNCName555.getTree());


            // AST REWRITE
            // elements: p_LocalNCName, p_NCName
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (XQDTCommonTree)adaptor.nil();
            // 1257:17: -> ^( QName p_NCName ( p_LocalNCName )? )
            {
                // XQueryParser.g:1257:20: ^( QName p_NCName ( p_LocalNCName )? )
                {
                XQDTCommonTree root_1 = (XQDTCommonTree)adaptor.nil();
                root_1 = (XQDTCommonTree)adaptor.becomeRoot((XQDTCommonTree)adaptor.create(QName, "QName"), root_1);

                adaptor.addChild(root_1, stream_p_NCName.nextTree());
                // XQueryParser.g:1257:37: ( p_LocalNCName )?
                if ( stream_p_LocalNCName.hasNext() ) {
                    adaptor.addChild(root_1, stream_p_LocalNCName.nextTree());

                }
                stream_p_LocalNCName.reset();

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (XQDTCommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (XQDTCommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "p_QName"

    public static class p_LocalNCName_return extends ParserRuleReturnScope {
        XQDTCommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "p_LocalNCName"
    // XQueryParser.g:1262:1: p_LocalNCName : ( COLON p_NCName )? ;
    public final XQueryParser.p_LocalNCName_return p_LocalNCName() throws RecognitionException {
        XQueryParser.p_LocalNCName_return retval = new XQueryParser.p_LocalNCName_return();
        retval.start = input.LT(1);

        XQDTCommonTree root_0 = null;

        CommonToken COLON556=null;
        XQueryParser.p_NCName_return p_NCName557 = null;


        XQDTCommonTree COLON556_tree=null;

        try {
            // XQueryParser.g:1263:9: ( ( COLON p_NCName )? )
            // XQueryParser.g:1263:11: ( COLON p_NCName )?
            {
            root_0 = (XQDTCommonTree)adaptor.nil();

            // XQueryParser.g:1263:11: ( COLON p_NCName )?
            int alt176=2;
            int LA176_0 = input.LA(1);

            if ( (LA176_0==COLON) ) {
                alt176=1;
            }
            switch (alt176) {
                case 1 :
                    // XQueryParser.g:1263:12: COLON p_NCName
                    {
                    COLON556=(CommonToken)match(input,COLON,FOLLOW_COLON_in_p_LocalNCName10195); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    COLON556_tree = (XQDTCommonTree)adaptor.create(COLON556);
                    adaptor.addChild(root_0, COLON556_tree);
                    }
                    pushFollow(FOLLOW_p_NCName_in_p_LocalNCName10197);
                    p_NCName557=p_NCName();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, p_NCName557.getTree());

                    }
                    break;

            }


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (XQDTCommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (XQDTCommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            setWsExplicit(false);
        }
        return retval;
    }
    // $ANTLR end "p_LocalNCName"

    public static class p_FQName_return extends ParserRuleReturnScope {
        XQDTCommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "p_FQName"
    // XQueryParser.g:1270:1: p_FQName : p_FNCName p_LocalFNCName ;
    public final XQueryParser.p_FQName_return p_FQName() throws RecognitionException {
        XQueryParser.p_FQName_return retval = new XQueryParser.p_FQName_return();
        retval.start = input.LT(1);

        XQDTCommonTree root_0 = null;

        XQueryParser.p_FNCName_return p_FNCName558 = null;

        XQueryParser.p_LocalFNCName_return p_LocalFNCName559 = null;



        setWsExplicit(true);
        try {
            // XQueryParser.g:1271:9: ( p_FNCName p_LocalFNCName )
            // XQueryParser.g:1271:11: p_FNCName p_LocalFNCName
            {
            root_0 = (XQDTCommonTree)adaptor.nil();

            pushFollow(FOLLOW_p_FNCName_in_p_FQName10244);
            p_FNCName558=p_FNCName();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, p_FNCName558.getTree());
            pushFollow(FOLLOW_p_LocalFNCName_in_p_FQName10246);
            p_LocalFNCName559=p_LocalFNCName();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, p_LocalFNCName559.getTree());

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (XQDTCommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (XQDTCommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "p_FQName"

    public static class p_LocalFNCName_return extends ParserRuleReturnScope {
        XQDTCommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "p_LocalFNCName"
    // XQueryParser.g:1276:1: p_LocalFNCName : ( COLON p_NCName )? ;
    public final XQueryParser.p_LocalFNCName_return p_LocalFNCName() throws RecognitionException {
        XQueryParser.p_LocalFNCName_return retval = new XQueryParser.p_LocalFNCName_return();
        retval.start = input.LT(1);

        XQDTCommonTree root_0 = null;

        CommonToken COLON560=null;
        XQueryParser.p_NCName_return p_NCName561 = null;


        XQDTCommonTree COLON560_tree=null;

        try {
            // XQueryParser.g:1277:9: ( ( COLON p_NCName )? )
            // XQueryParser.g:1277:11: ( COLON p_NCName )?
            {
            root_0 = (XQDTCommonTree)adaptor.nil();

            // XQueryParser.g:1277:11: ( COLON p_NCName )?
            int alt177=2;
            int LA177_0 = input.LA(1);

            if ( (LA177_0==COLON) ) {
                alt177=1;
            }
            switch (alt177) {
                case 1 :
                    // XQueryParser.g:1277:12: COLON p_NCName
                    {
                    COLON560=(CommonToken)match(input,COLON,FOLLOW_COLON_in_p_LocalFNCName10274); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    COLON560_tree = (XQDTCommonTree)adaptor.create(COLON560);
                    adaptor.addChild(root_0, COLON560_tree);
                    }
                    pushFollow(FOLLOW_p_NCName_in_p_LocalFNCName10276);
                    p_NCName561=p_NCName();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, p_NCName561.getTree());

                    }
                    break;

            }


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (XQDTCommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (XQDTCommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            setWsExplicit(false);
        }
        return retval;
    }
    // $ANTLR end "p_LocalFNCName"

    public static class p_NCName_return extends ParserRuleReturnScope {
        XQDTCommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "p_NCName"
    // XQueryParser.g:1283:1: p_NCName : ( L_NCName | ANCESTOR | ANCESTOR_OR_SELF | AND | AS | ASCENDING | AT | ATTRIBUTE | BASE_URI | BOUNDARY_SPACE | BY | CASE | CAST | CASTABLE | CHILD | COLLATION | COMMENT | CONSTRUCTION | COPY_NAMESPACES | DECLARE | DEFAULT | DESCENDANT | DESCENDANT_OR_SELF | DESCENDING | DIV | DOCUMENT | DOCUMENT_NODE | ELEMENT | ELSE | EMPTY | EMPTY_SEQUENCE | ENCODING | EQ | EVERY | EXCEPT | EXTERNAL | FOLLOWING | FOLLOWING_SIBLING | FOR | FUNCTION | GE | GREATEST | GT | IDIV | IF | IMPORT | IN | INHERIT | INSTANCE | INTERSECT | IS | ITEM | LAX | LE | LEAST | LET | LT | MOD | MODULE | NAMESPACE | NE | NO_INHERIT | NO_PRESERVE | NODE | OF | OPTION | OR | ORDER | ORDERED | ORDERING | PARENT | PRECEDING | PRECEDING_SIBLING | PRESERVE | PROCESSING_INSTRUCTION | RETURN | SATISFIES | SCHEMA | SCHEMA_ATTRIBUTE | SCHEMA_ELEMENT | SELF | SOME | STABLE | STRICT | STRIP | TEXT | THEN | TO | TREAT | TYPESWITCH | UNION | UNORDERED | VALIDATE | VARIABLE | VERSION | WHERE | XQUERY | CATCH | CONTEXT | COUNT | DECIMAL_FORMAT | DECIMAL_SEPARATOR | DIGIT | END | GROUP | GROUPING_SEPARATOR | INFINITY | MINUS_SIGN | NAMESPACE_NODE | NAN | NEXT | ONLY | OUTER | PATTERN_SEPARATOR | PERCENT | PER_MILLE | PREVIOUS | SLIDING | START | TRY | TUMBLING | WHEN | WINDOW | ZERO_DIGIT | AFTER | BEFORE | COPY | DELETE | FIRST | INSERT | INTO | LAST | MODIFY | NODES | RENAME | REPLACE | REVALIDATION | SKIP | UPDATING | VALUE | WITH | BLOCK | CONSTANT | EXIT | SEQUENTIAL | SET | SIMPLE | WHILE | EVAL | USING | APPEND_ONLY | AUTOMATICALLY | CHECK | COLLECTION | CONSTRAINT | CONST | EQUALITY | EXPLICITLY | FOREACH | FOREIGN | FROM | INDEX | INTEGRITY | KEY | MAINTAINED | MUTABLE | NON | ON | QUEUE | RANGE | READ_ONLY | UNIQUE | BINARY | PRIVATE | AMP_ER | APOS_ER | QUOT_ER );
    public final XQueryParser.p_NCName_return p_NCName() throws RecognitionException {
        XQueryParser.p_NCName_return retval = new XQueryParser.p_NCName_return();
        retval.start = input.LT(1);

        XQDTCommonTree root_0 = null;

        CommonToken set562=null;

        XQDTCommonTree set562_tree=null;

        try {
            // XQueryParser.g:1284:9: ( L_NCName | ANCESTOR | ANCESTOR_OR_SELF | AND | AS | ASCENDING | AT | ATTRIBUTE | BASE_URI | BOUNDARY_SPACE | BY | CASE | CAST | CASTABLE | CHILD | COLLATION | COMMENT | CONSTRUCTION | COPY_NAMESPACES | DECLARE | DEFAULT | DESCENDANT | DESCENDANT_OR_SELF | DESCENDING | DIV | DOCUMENT | DOCUMENT_NODE | ELEMENT | ELSE | EMPTY | EMPTY_SEQUENCE | ENCODING | EQ | EVERY | EXCEPT | EXTERNAL | FOLLOWING | FOLLOWING_SIBLING | FOR | FUNCTION | GE | GREATEST | GT | IDIV | IF | IMPORT | IN | INHERIT | INSTANCE | INTERSECT | IS | ITEM | LAX | LE | LEAST | LET | LT | MOD | MODULE | NAMESPACE | NE | NO_INHERIT | NO_PRESERVE | NODE | OF | OPTION | OR | ORDER | ORDERED | ORDERING | PARENT | PRECEDING | PRECEDING_SIBLING | PRESERVE | PROCESSING_INSTRUCTION | RETURN | SATISFIES | SCHEMA | SCHEMA_ATTRIBUTE | SCHEMA_ELEMENT | SELF | SOME | STABLE | STRICT | STRIP | TEXT | THEN | TO | TREAT | TYPESWITCH | UNION | UNORDERED | VALIDATE | VARIABLE | VERSION | WHERE | XQUERY | CATCH | CONTEXT | COUNT | DECIMAL_FORMAT | DECIMAL_SEPARATOR | DIGIT | END | GROUP | GROUPING_SEPARATOR | INFINITY | MINUS_SIGN | NAMESPACE_NODE | NAN | NEXT | ONLY | OUTER | PATTERN_SEPARATOR | PERCENT | PER_MILLE | PREVIOUS | SLIDING | START | TRY | TUMBLING | WHEN | WINDOW | ZERO_DIGIT | AFTER | BEFORE | COPY | DELETE | FIRST | INSERT | INTO | LAST | MODIFY | NODES | RENAME | REPLACE | REVALIDATION | SKIP | UPDATING | VALUE | WITH | BLOCK | CONSTANT | EXIT | SEQUENTIAL | SET | SIMPLE | WHILE | EVAL | USING | APPEND_ONLY | AUTOMATICALLY | CHECK | COLLECTION | CONSTRAINT | CONST | EQUALITY | EXPLICITLY | FOREACH | FOREIGN | FROM | INDEX | INTEGRITY | KEY | MAINTAINED | MUTABLE | NON | ON | QUEUE | RANGE | READ_ONLY | UNIQUE | BINARY | PRIVATE | AMP_ER | APOS_ER | QUOT_ER )
            // XQueryParser.g:
            {
            root_0 = (XQDTCommonTree)adaptor.nil();

            set562=(CommonToken)input.LT(1);
            if ( (input.LA(1)>=ANCESTOR && input.LA(1)<=EXIT)||(input.LA(1)>=SEQUENTIAL && input.LA(1)<=MAINTAINED)||(input.LA(1)>=MUTABLE && input.LA(1)<=QUOT_ER)||input.LA(1)==L_NCName||input.LA(1)==EXPLICITLY ) {
                input.consume();
                if ( state.backtracking==0 ) adaptor.addChild(root_0, (XQDTCommonTree)adaptor.create(set562));
                state.errorRecovery=false;state.failed=false;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                MismatchedSetException mse = new MismatchedSetException(null,input);
                throw mse;
            }


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (XQDTCommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (XQDTCommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "p_NCName"

    public static class p_FNCName_return extends ParserRuleReturnScope {
        XQDTCommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "p_FNCName"
    // XQueryParser.g:1302:1: p_FNCName : ( L_NCName | ANCESTOR | ANCESTOR_OR_SELF | AND | AS | ASCENDING | AT | BASE_URI | BOUNDARY_SPACE | BY | CASE | CAST | CASTABLE | CHILD | COLLATION | CONSTRUCTION | COPY_NAMESPACES | DECLARE | DEFAULT | DESCENDANT | DESCENDANT_OR_SELF | DESCENDING | DIV | DOCUMENT | ELSE | EMPTY | ENCODING | EQ | EVERY | EXCEPT | EXTERNAL | FOLLOWING | FOLLOWING_SIBLING | FOR | FUNCTION | GE | GREATEST | GT | IDIV | IMPORT | IN | INHERIT | INSTANCE | INTERSECT | IS | LAX | LE | LEAST | LET | LT | MOD | MODULE | NAMESPACE | NE | NO_INHERIT | NO_PRESERVE | OF | OPTION | OR | ORDER | ORDERED | ORDERING | PARENT | PRECEDING | PRECEDING_SIBLING | PRESERVE | RETURN | SATISFIES | SCHEMA | SELF | SOME | STABLE | STRICT | STRIP | THEN | TO | TREAT | UNION | UNORDERED | VALIDATE | VARIABLE | VERSION | WHERE | XQUERY | CATCH | CONTEXT | COUNT | DECIMAL_FORMAT | DECIMAL_SEPARATOR | DIGIT | END | GROUP | GROUPING_SEPARATOR | INFINITY | MINUS_SIGN | NAN | NEXT | ONLY | OUTER | PATTERN_SEPARATOR | PERCENT | PER_MILLE | PREVIOUS | SLIDING | START | TRY | TUMBLING | WHEN | WINDOW | ZERO_DIGIT | AFTER | BEFORE | COPY | DELETE | FIRST | INSERT | INTO | LAST | MODIFY | NODES | RENAME | REPLACE | REVALIDATION | SKIP | UPDATING | VALUE | WITH | BLOCK | CONSTANT | EXIT | SEQUENTIAL | SET | SIMPLE | EVAL | USING | APPEND_ONLY | AUTOMATICALLY | CHECK | COLLECTION | CONSTRAINT | CONST | EQUALITY | EXPLICITLY | FOREACH | FOREIGN | FROM | INDEX | INTEGRITY | KEY | MAINTAINED | MUTABLE | NON | ON | QUEUE | RANGE | READ_ONLY | UNIQUE | BINARY | PRIVATE | AMP_ER | APOS_ER | QUOT_ER );
    public final XQueryParser.p_FNCName_return p_FNCName() throws RecognitionException {
        XQueryParser.p_FNCName_return retval = new XQueryParser.p_FNCName_return();
        retval.start = input.LT(1);

        XQDTCommonTree root_0 = null;

        CommonToken set563=null;

        XQDTCommonTree set563_tree=null;

        try {
            // XQueryParser.g:1303:9: ( L_NCName | ANCESTOR | ANCESTOR_OR_SELF | AND | AS | ASCENDING | AT | BASE_URI | BOUNDARY_SPACE | BY | CASE | CAST | CASTABLE | CHILD | COLLATION | CONSTRUCTION | COPY_NAMESPACES | DECLARE | DEFAULT | DESCENDANT | DESCENDANT_OR_SELF | DESCENDING | DIV | DOCUMENT | ELSE | EMPTY | ENCODING | EQ | EVERY | EXCEPT | EXTERNAL | FOLLOWING | FOLLOWING_SIBLING | FOR | FUNCTION | GE | GREATEST | GT | IDIV | IMPORT | IN | INHERIT | INSTANCE | INTERSECT | IS | LAX | LE | LEAST | LET | LT | MOD | MODULE | NAMESPACE | NE | NO_INHERIT | NO_PRESERVE | OF | OPTION | OR | ORDER | ORDERED | ORDERING | PARENT | PRECEDING | PRECEDING_SIBLING | PRESERVE | RETURN | SATISFIES | SCHEMA | SELF | SOME | STABLE | STRICT | STRIP | THEN | TO | TREAT | UNION | UNORDERED | VALIDATE | VARIABLE | VERSION | WHERE | XQUERY | CATCH | CONTEXT | COUNT | DECIMAL_FORMAT | DECIMAL_SEPARATOR | DIGIT | END | GROUP | GROUPING_SEPARATOR | INFINITY | MINUS_SIGN | NAN | NEXT | ONLY | OUTER | PATTERN_SEPARATOR | PERCENT | PER_MILLE | PREVIOUS | SLIDING | START | TRY | TUMBLING | WHEN | WINDOW | ZERO_DIGIT | AFTER | BEFORE | COPY | DELETE | FIRST | INSERT | INTO | LAST | MODIFY | NODES | RENAME | REPLACE | REVALIDATION | SKIP | UPDATING | VALUE | WITH | BLOCK | CONSTANT | EXIT | SEQUENTIAL | SET | SIMPLE | EVAL | USING | APPEND_ONLY | AUTOMATICALLY | CHECK | COLLECTION | CONSTRAINT | CONST | EQUALITY | EXPLICITLY | FOREACH | FOREIGN | FROM | INDEX | INTEGRITY | KEY | MAINTAINED | MUTABLE | NON | ON | QUEUE | RANGE | READ_ONLY | UNIQUE | BINARY | PRIVATE | AMP_ER | APOS_ER | QUOT_ER )
            // XQueryParser.g:
            {
            root_0 = (XQDTCommonTree)adaptor.nil();

            set563=(CommonToken)input.LT(1);
            if ( (input.LA(1)>=ANCESTOR && input.LA(1)<=AT)||(input.LA(1)>=BASE_URI && input.LA(1)<=COLLATION)||(input.LA(1)>=CONSTRUCTION && input.LA(1)<=DOCUMENT)||(input.LA(1)>=ELSE && input.LA(1)<=EMPTY)||(input.LA(1)>=ENCODING && input.LA(1)<=IDIV)||(input.LA(1)>=IMPORT && input.LA(1)<=IS)||(input.LA(1)>=LAX && input.LA(1)<=NO_PRESERVE)||(input.LA(1)>=OF && input.LA(1)<=PRESERVE)||(input.LA(1)>=RETURN && input.LA(1)<=SCHEMA)||(input.LA(1)>=SELF && input.LA(1)<=STRIP)||(input.LA(1)>=THEN && input.LA(1)<=TREAT)||(input.LA(1)>=UNION && input.LA(1)<=MINUS_SIGN)||(input.LA(1)>=NAN && input.LA(1)<=EXIT)||(input.LA(1)>=SEQUENTIAL && input.LA(1)<=SIMPLE)||(input.LA(1)>=EVAL && input.LA(1)<=MAINTAINED)||(input.LA(1)>=MUTABLE && input.LA(1)<=QUOT_ER)||input.LA(1)==L_NCName||input.LA(1)==EXPLICITLY ) {
                input.consume();
                if ( state.backtracking==0 ) adaptor.addChild(root_0, (XQDTCommonTree)adaptor.create(set563));
                state.errorRecovery=false;state.failed=false;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                MismatchedSetException mse = new MismatchedSetException(null,input);
                throw mse;
            }


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (XQDTCommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (XQDTCommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "p_FNCName"

    public static class pm_RevalidationDecl_return extends ParserRuleReturnScope {
        XQDTCommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "pm_RevalidationDecl"
    // XQueryParser.g:1336:1: pm_RevalidationDecl : k+= DECLARE k+= REVALIDATION (k+= STRICT | k+= LAX | k+= SKIP ) ;
    public final XQueryParser.pm_RevalidationDecl_return pm_RevalidationDecl() throws RecognitionException {
        XQueryParser.pm_RevalidationDecl_return retval = new XQueryParser.pm_RevalidationDecl_return();
        retval.start = input.LT(1);

        XQDTCommonTree root_0 = null;

        CommonToken k=null;
        List list_k=null;

        XQDTCommonTree k_tree=null;

        try {
            // XQueryParser.g:1337:9: (k+= DECLARE k+= REVALIDATION (k+= STRICT | k+= LAX | k+= SKIP ) )
            // XQueryParser.g:1337:11: k+= DECLARE k+= REVALIDATION (k+= STRICT | k+= LAX | k+= SKIP )
            {
            root_0 = (XQDTCommonTree)adaptor.nil();

            k=(CommonToken)match(input,DECLARE,FOLLOW_DECLARE_in_pm_RevalidationDecl12004); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            k_tree = (XQDTCommonTree)adaptor.create(k);
            adaptor.addChild(root_0, k_tree);
            }
            if (list_k==null) list_k=new ArrayList();
            list_k.add(k);

            k=(CommonToken)match(input,REVALIDATION,FOLLOW_REVALIDATION_in_pm_RevalidationDecl12008); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            k_tree = (XQDTCommonTree)adaptor.create(k);
            adaptor.addChild(root_0, k_tree);
            }
            if (list_k==null) list_k=new ArrayList();
            list_k.add(k);

            // XQueryParser.g:1337:38: (k+= STRICT | k+= LAX | k+= SKIP )
            int alt178=3;
            switch ( input.LA(1) ) {
            case STRICT:
                {
                alt178=1;
                }
                break;
            case LAX:
                {
                alt178=2;
                }
                break;
            case SKIP:
                {
                alt178=3;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 178, 0, input);

                throw nvae;
            }

            switch (alt178) {
                case 1 :
                    // XQueryParser.g:1337:39: k+= STRICT
                    {
                    k=(CommonToken)match(input,STRICT,FOLLOW_STRICT_in_pm_RevalidationDecl12013); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    k_tree = (XQDTCommonTree)adaptor.create(k);
                    adaptor.addChild(root_0, k_tree);
                    }
                    if (list_k==null) list_k=new ArrayList();
                    list_k.add(k);


                    }
                    break;
                case 2 :
                    // XQueryParser.g:1337:51: k+= LAX
                    {
                    k=(CommonToken)match(input,LAX,FOLLOW_LAX_in_pm_RevalidationDecl12019); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    k_tree = (XQDTCommonTree)adaptor.create(k);
                    adaptor.addChild(root_0, k_tree);
                    }
                    if (list_k==null) list_k=new ArrayList();
                    list_k.add(k);


                    }
                    break;
                case 3 :
                    // XQueryParser.g:1337:60: k+= SKIP
                    {
                    k=(CommonToken)match(input,SKIP,FOLLOW_SKIP_in_pm_RevalidationDecl12025); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    k_tree = (XQDTCommonTree)adaptor.create(k);
                    adaptor.addChild(root_0, k_tree);
                    }
                    if (list_k==null) list_k=new ArrayList();
                    list_k.add(k);


                    }
                    break;

            }

            if ( state.backtracking==0 ) {
              ak(list_k);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (XQDTCommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (XQDTCommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "pm_RevalidationDecl"

    public static class p_InsertExprTargetChoice_return extends ParserRuleReturnScope {
        XQDTCommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "p_InsertExprTargetChoice"
    // XQueryParser.g:1341:1: p_InsertExprTargetChoice : ( ( (k+= AS (k+= FIRST | k+= LAST ) )? k+= INTO ) | ka= AFTER | kb= BEFORE );
    public final XQueryParser.p_InsertExprTargetChoice_return p_InsertExprTargetChoice() throws RecognitionException {
        XQueryParser.p_InsertExprTargetChoice_return retval = new XQueryParser.p_InsertExprTargetChoice_return();
        retval.start = input.LT(1);

        XQDTCommonTree root_0 = null;

        CommonToken ka=null;
        CommonToken kb=null;
        CommonToken k=null;
        List list_k=null;

        XQDTCommonTree ka_tree=null;
        XQDTCommonTree kb_tree=null;
        XQDTCommonTree k_tree=null;

        try {
            // XQueryParser.g:1342:9: ( ( (k+= AS (k+= FIRST | k+= LAST ) )? k+= INTO ) | ka= AFTER | kb= BEFORE )
            int alt181=3;
            switch ( input.LA(1) ) {
            case AS:
            case INTO:
                {
                alt181=1;
                }
                break;
            case AFTER:
                {
                alt181=2;
                }
                break;
            case BEFORE:
                {
                alt181=3;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 181, 0, input);

                throw nvae;
            }

            switch (alt181) {
                case 1 :
                    // XQueryParser.g:1342:11: ( (k+= AS (k+= FIRST | k+= LAST ) )? k+= INTO )
                    {
                    root_0 = (XQDTCommonTree)adaptor.nil();

                    // XQueryParser.g:1342:11: ( (k+= AS (k+= FIRST | k+= LAST ) )? k+= INTO )
                    // XQueryParser.g:1342:12: (k+= AS (k+= FIRST | k+= LAST ) )? k+= INTO
                    {
                    // XQueryParser.g:1342:12: (k+= AS (k+= FIRST | k+= LAST ) )?
                    int alt180=2;
                    int LA180_0 = input.LA(1);

                    if ( (LA180_0==AS) ) {
                        alt180=1;
                    }
                    switch (alt180) {
                        case 1 :
                            // XQueryParser.g:1342:13: k+= AS (k+= FIRST | k+= LAST )
                            {
                            k=(CommonToken)match(input,AS,FOLLOW_AS_in_p_InsertExprTargetChoice12058); if (state.failed) return retval;
                            if ( state.backtracking==0 ) {
                            k_tree = (XQDTCommonTree)adaptor.create(k);
                            adaptor.addChild(root_0, k_tree);
                            }
                            if (list_k==null) list_k=new ArrayList();
                            list_k.add(k);

                            // XQueryParser.g:1342:19: (k+= FIRST | k+= LAST )
                            int alt179=2;
                            int LA179_0 = input.LA(1);

                            if ( (LA179_0==FIRST) ) {
                                alt179=1;
                            }
                            else if ( (LA179_0==LAST) ) {
                                alt179=2;
                            }
                            else {
                                if (state.backtracking>0) {state.failed=true; return retval;}
                                NoViableAltException nvae =
                                    new NoViableAltException("", 179, 0, input);

                                throw nvae;
                            }
                            switch (alt179) {
                                case 1 :
                                    // XQueryParser.g:1342:20: k+= FIRST
                                    {
                                    k=(CommonToken)match(input,FIRST,FOLLOW_FIRST_in_p_InsertExprTargetChoice12063); if (state.failed) return retval;
                                    if ( state.backtracking==0 ) {
                                    k_tree = (XQDTCommonTree)adaptor.create(k);
                                    adaptor.addChild(root_0, k_tree);
                                    }
                                    if (list_k==null) list_k=new ArrayList();
                                    list_k.add(k);


                                    }
                                    break;
                                case 2 :
                                    // XQueryParser.g:1342:31: k+= LAST
                                    {
                                    k=(CommonToken)match(input,LAST,FOLLOW_LAST_in_p_InsertExprTargetChoice12069); if (state.failed) return retval;
                                    if ( state.backtracking==0 ) {
                                    k_tree = (XQDTCommonTree)adaptor.create(k);
                                    adaptor.addChild(root_0, k_tree);
                                    }
                                    if (list_k==null) list_k=new ArrayList();
                                    list_k.add(k);


                                    }
                                    break;

                            }


                            }
                            break;

                    }

                    k=(CommonToken)match(input,INTO,FOLLOW_INTO_in_p_InsertExprTargetChoice12076); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    k_tree = (XQDTCommonTree)adaptor.create(k);
                    adaptor.addChild(root_0, k_tree);
                    }
                    if (list_k==null) list_k=new ArrayList();
                    list_k.add(k);


                    }

                    if ( state.backtracking==0 ) {
                      ak(list_k);
                    }

                    }
                    break;
                case 2 :
                    // XQueryParser.g:1343:11: ka= AFTER
                    {
                    root_0 = (XQDTCommonTree)adaptor.nil();

                    ka=(CommonToken)match(input,AFTER,FOLLOW_AFTER_in_p_InsertExprTargetChoice12093); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    ka_tree = (XQDTCommonTree)adaptor.create(ka);
                    adaptor.addChild(root_0, ka_tree);
                    }
                    if ( state.backtracking==0 ) {
                      ak(ka);
                    }

                    }
                    break;
                case 3 :
                    // XQueryParser.g:1344:11: kb= BEFORE
                    {
                    root_0 = (XQDTCommonTree)adaptor.nil();

                    kb=(CommonToken)match(input,BEFORE,FOLLOW_BEFORE_in_p_InsertExprTargetChoice12109); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    kb_tree = (XQDTCommonTree)adaptor.create(kb);
                    adaptor.addChild(root_0, kb_tree);
                    }
                    if ( state.backtracking==0 ) {
                      ak(kb);
                    }

                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (XQDTCommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (XQDTCommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "p_InsertExprTargetChoice"

    public static class p_InsertExpr_return extends ParserRuleReturnScope {
        XQDTCommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "p_InsertExpr"
    // XQueryParser.g:1348:1: p_InsertExpr : k+= INSERT (k+= NODE | k+= NODES ) p_SourceExpr p_InsertExprTargetChoice p_TargetExpr ;
    public final XQueryParser.p_InsertExpr_return p_InsertExpr() throws RecognitionException {
        XQueryParser.p_InsertExpr_return retval = new XQueryParser.p_InsertExpr_return();
        retval.start = input.LT(1);

        XQDTCommonTree root_0 = null;

        CommonToken k=null;
        List list_k=null;
        XQueryParser.p_SourceExpr_return p_SourceExpr564 = null;

        XQueryParser.p_InsertExprTargetChoice_return p_InsertExprTargetChoice565 = null;

        XQueryParser.p_TargetExpr_return p_TargetExpr566 = null;


        XQDTCommonTree k_tree=null;

        try {
            // XQueryParser.g:1349:9: (k+= INSERT (k+= NODE | k+= NODES ) p_SourceExpr p_InsertExprTargetChoice p_TargetExpr )
            // XQueryParser.g:1349:11: k+= INSERT (k+= NODE | k+= NODES ) p_SourceExpr p_InsertExprTargetChoice p_TargetExpr
            {
            root_0 = (XQDTCommonTree)adaptor.nil();

            k=(CommonToken)match(input,INSERT,FOLLOW_INSERT_in_p_InsertExpr12139); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            k_tree = (XQDTCommonTree)adaptor.create(k);
            adaptor.addChild(root_0, k_tree);
            }
            if (list_k==null) list_k=new ArrayList();
            list_k.add(k);

            // XQueryParser.g:1349:21: (k+= NODE | k+= NODES )
            int alt182=2;
            int LA182_0 = input.LA(1);

            if ( (LA182_0==NODE) ) {
                alt182=1;
            }
            else if ( (LA182_0==NODES) ) {
                alt182=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 182, 0, input);

                throw nvae;
            }
            switch (alt182) {
                case 1 :
                    // XQueryParser.g:1349:22: k+= NODE
                    {
                    k=(CommonToken)match(input,NODE,FOLLOW_NODE_in_p_InsertExpr12144); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    k_tree = (XQDTCommonTree)adaptor.create(k);
                    adaptor.addChild(root_0, k_tree);
                    }
                    if (list_k==null) list_k=new ArrayList();
                    list_k.add(k);


                    }
                    break;
                case 2 :
                    // XQueryParser.g:1349:32: k+= NODES
                    {
                    k=(CommonToken)match(input,NODES,FOLLOW_NODES_in_p_InsertExpr12150); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    k_tree = (XQDTCommonTree)adaptor.create(k);
                    adaptor.addChild(root_0, k_tree);
                    }
                    if (list_k==null) list_k=new ArrayList();
                    list_k.add(k);


                    }
                    break;

            }

            pushFollow(FOLLOW_p_SourceExpr_in_p_InsertExpr12153);
            p_SourceExpr564=p_SourceExpr();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, p_SourceExpr564.getTree());
            pushFollow(FOLLOW_p_InsertExprTargetChoice_in_p_InsertExpr12155);
            p_InsertExprTargetChoice565=p_InsertExprTargetChoice();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, p_InsertExprTargetChoice565.getTree());
            pushFollow(FOLLOW_p_TargetExpr_in_p_InsertExpr12157);
            p_TargetExpr566=p_TargetExpr();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, p_TargetExpr566.getTree());
            if ( state.backtracking==0 ) {
              ak(list_k);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (XQDTCommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (XQDTCommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "p_InsertExpr"

    public static class p_DeleteExpr_return extends ParserRuleReturnScope {
        XQDTCommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "p_DeleteExpr"
    // XQueryParser.g:1353:1: p_DeleteExpr : k+= DELETE (k+= NODE | k+= NODES ) p_TargetExpr ;
    public final XQueryParser.p_DeleteExpr_return p_DeleteExpr() throws RecognitionException {
        XQueryParser.p_DeleteExpr_return retval = new XQueryParser.p_DeleteExpr_return();
        retval.start = input.LT(1);

        XQDTCommonTree root_0 = null;

        CommonToken k=null;
        List list_k=null;
        XQueryParser.p_TargetExpr_return p_TargetExpr567 = null;


        XQDTCommonTree k_tree=null;

        try {
            // XQueryParser.g:1354:9: (k+= DELETE (k+= NODE | k+= NODES ) p_TargetExpr )
            // XQueryParser.g:1354:11: k+= DELETE (k+= NODE | k+= NODES ) p_TargetExpr
            {
            root_0 = (XQDTCommonTree)adaptor.nil();

            k=(CommonToken)match(input,DELETE,FOLLOW_DELETE_in_p_DeleteExpr12187); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            k_tree = (XQDTCommonTree)adaptor.create(k);
            adaptor.addChild(root_0, k_tree);
            }
            if (list_k==null) list_k=new ArrayList();
            list_k.add(k);

            // XQueryParser.g:1354:21: (k+= NODE | k+= NODES )
            int alt183=2;
            int LA183_0 = input.LA(1);

            if ( (LA183_0==NODE) ) {
                alt183=1;
            }
            else if ( (LA183_0==NODES) ) {
                alt183=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 183, 0, input);

                throw nvae;
            }
            switch (alt183) {
                case 1 :
                    // XQueryParser.g:1354:22: k+= NODE
                    {
                    k=(CommonToken)match(input,NODE,FOLLOW_NODE_in_p_DeleteExpr12192); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    k_tree = (XQDTCommonTree)adaptor.create(k);
                    adaptor.addChild(root_0, k_tree);
                    }
                    if (list_k==null) list_k=new ArrayList();
                    list_k.add(k);


                    }
                    break;
                case 2 :
                    // XQueryParser.g:1354:32: k+= NODES
                    {
                    k=(CommonToken)match(input,NODES,FOLLOW_NODES_in_p_DeleteExpr12198); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    k_tree = (XQDTCommonTree)adaptor.create(k);
                    adaptor.addChild(root_0, k_tree);
                    }
                    if (list_k==null) list_k=new ArrayList();
                    list_k.add(k);


                    }
                    break;

            }

            pushFollow(FOLLOW_p_TargetExpr_in_p_DeleteExpr12201);
            p_TargetExpr567=p_TargetExpr();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, p_TargetExpr567.getTree());
            if ( state.backtracking==0 ) {
              ak(list_k);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (XQDTCommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (XQDTCommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "p_DeleteExpr"

    public static class p_ReplaceExpr_return extends ParserRuleReturnScope {
        XQDTCommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "p_ReplaceExpr"
    // XQueryParser.g:1358:1: p_ReplaceExpr : k+= REPLACE (k+= VALUE k+= OF )? k+= NODE p_ExprSingle k+= WITH p_ExprSingle ;
    public final XQueryParser.p_ReplaceExpr_return p_ReplaceExpr() throws RecognitionException {
        XQueryParser.p_ReplaceExpr_return retval = new XQueryParser.p_ReplaceExpr_return();
        retval.start = input.LT(1);

        XQDTCommonTree root_0 = null;

        CommonToken k=null;
        List list_k=null;
        XQueryParser.p_ExprSingle_return p_ExprSingle568 = null;

        XQueryParser.p_ExprSingle_return p_ExprSingle569 = null;


        XQDTCommonTree k_tree=null;

        try {
            // XQueryParser.g:1359:9: (k+= REPLACE (k+= VALUE k+= OF )? k+= NODE p_ExprSingle k+= WITH p_ExprSingle )
            // XQueryParser.g:1359:11: k+= REPLACE (k+= VALUE k+= OF )? k+= NODE p_ExprSingle k+= WITH p_ExprSingle
            {
            root_0 = (XQDTCommonTree)adaptor.nil();

            k=(CommonToken)match(input,REPLACE,FOLLOW_REPLACE_in_p_ReplaceExpr12231); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            k_tree = (XQDTCommonTree)adaptor.create(k);
            adaptor.addChild(root_0, k_tree);
            }
            if (list_k==null) list_k=new ArrayList();
            list_k.add(k);

            // XQueryParser.g:1359:22: (k+= VALUE k+= OF )?
            int alt184=2;
            int LA184_0 = input.LA(1);

            if ( (LA184_0==VALUE) ) {
                alt184=1;
            }
            switch (alt184) {
                case 1 :
                    // XQueryParser.g:1359:23: k+= VALUE k+= OF
                    {
                    k=(CommonToken)match(input,VALUE,FOLLOW_VALUE_in_p_ReplaceExpr12236); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    k_tree = (XQDTCommonTree)adaptor.create(k);
                    adaptor.addChild(root_0, k_tree);
                    }
                    if (list_k==null) list_k=new ArrayList();
                    list_k.add(k);

                    k=(CommonToken)match(input,OF,FOLLOW_OF_in_p_ReplaceExpr12240); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    k_tree = (XQDTCommonTree)adaptor.create(k);
                    adaptor.addChild(root_0, k_tree);
                    }
                    if (list_k==null) list_k=new ArrayList();
                    list_k.add(k);


                    }
                    break;

            }

            k=(CommonToken)match(input,NODE,FOLLOW_NODE_in_p_ReplaceExpr12246); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            k_tree = (XQDTCommonTree)adaptor.create(k);
            adaptor.addChild(root_0, k_tree);
            }
            if (list_k==null) list_k=new ArrayList();
            list_k.add(k);

            pushFollow(FOLLOW_p_ExprSingle_in_p_ReplaceExpr12248);
            p_ExprSingle568=p_ExprSingle();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, p_ExprSingle568.getTree());
            k=(CommonToken)match(input,WITH,FOLLOW_WITH_in_p_ReplaceExpr12252); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            k_tree = (XQDTCommonTree)adaptor.create(k);
            adaptor.addChild(root_0, k_tree);
            }
            if (list_k==null) list_k=new ArrayList();
            list_k.add(k);

            pushFollow(FOLLOW_p_ExprSingle_in_p_ReplaceExpr12254);
            p_ExprSingle569=p_ExprSingle();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, p_ExprSingle569.getTree());
            if ( state.backtracking==0 ) {
              ak(list_k);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (XQDTCommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (XQDTCommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "p_ReplaceExpr"

    public static class p_RenameExpr_return extends ParserRuleReturnScope {
        XQDTCommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "p_RenameExpr"
    // XQueryParser.g:1363:1: p_RenameExpr : k+= RENAME k+= NODE p_TargetExpr AS p_NewNameExpr ;
    public final XQueryParser.p_RenameExpr_return p_RenameExpr() throws RecognitionException {
        XQueryParser.p_RenameExpr_return retval = new XQueryParser.p_RenameExpr_return();
        retval.start = input.LT(1);

        XQDTCommonTree root_0 = null;

        CommonToken AS571=null;
        CommonToken k=null;
        List list_k=null;
        XQueryParser.p_TargetExpr_return p_TargetExpr570 = null;

        XQueryParser.p_NewNameExpr_return p_NewNameExpr572 = null;


        XQDTCommonTree AS571_tree=null;
        XQDTCommonTree k_tree=null;

        try {
            // XQueryParser.g:1364:9: (k+= RENAME k+= NODE p_TargetExpr AS p_NewNameExpr )
            // XQueryParser.g:1364:11: k+= RENAME k+= NODE p_TargetExpr AS p_NewNameExpr
            {
            root_0 = (XQDTCommonTree)adaptor.nil();

            k=(CommonToken)match(input,RENAME,FOLLOW_RENAME_in_p_RenameExpr12284); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            k_tree = (XQDTCommonTree)adaptor.create(k);
            adaptor.addChild(root_0, k_tree);
            }
            if (list_k==null) list_k=new ArrayList();
            list_k.add(k);

            k=(CommonToken)match(input,NODE,FOLLOW_NODE_in_p_RenameExpr12288); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            k_tree = (XQDTCommonTree)adaptor.create(k);
            adaptor.addChild(root_0, k_tree);
            }
            if (list_k==null) list_k=new ArrayList();
            list_k.add(k);

            pushFollow(FOLLOW_p_TargetExpr_in_p_RenameExpr12290);
            p_TargetExpr570=p_TargetExpr();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, p_TargetExpr570.getTree());
            AS571=(CommonToken)match(input,AS,FOLLOW_AS_in_p_RenameExpr12292); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            AS571_tree = (XQDTCommonTree)adaptor.create(AS571);
            adaptor.addChild(root_0, AS571_tree);
            }
            pushFollow(FOLLOW_p_NewNameExpr_in_p_RenameExpr12294);
            p_NewNameExpr572=p_NewNameExpr();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, p_NewNameExpr572.getTree());
            if ( state.backtracking==0 ) {
              ak(list_k);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (XQDTCommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (XQDTCommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "p_RenameExpr"

    public static class p_SourceExpr_return extends ParserRuleReturnScope {
        XQDTCommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "p_SourceExpr"
    // XQueryParser.g:1368:1: p_SourceExpr : p_ExprSingle ;
    public final XQueryParser.p_SourceExpr_return p_SourceExpr() throws RecognitionException {
        XQueryParser.p_SourceExpr_return retval = new XQueryParser.p_SourceExpr_return();
        retval.start = input.LT(1);

        XQDTCommonTree root_0 = null;

        XQueryParser.p_ExprSingle_return p_ExprSingle573 = null;



        try {
            // XQueryParser.g:1369:9: ( p_ExprSingle )
            // XQueryParser.g:1369:11: p_ExprSingle
            {
            root_0 = (XQDTCommonTree)adaptor.nil();

            pushFollow(FOLLOW_p_ExprSingle_in_p_SourceExpr12322);
            p_ExprSingle573=p_ExprSingle();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, p_ExprSingle573.getTree());

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (XQDTCommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (XQDTCommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "p_SourceExpr"

    public static class p_TargetExpr_return extends ParserRuleReturnScope {
        XQDTCommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "p_TargetExpr"
    // XQueryParser.g:1373:1: p_TargetExpr : p_ExprSingle ;
    public final XQueryParser.p_TargetExpr_return p_TargetExpr() throws RecognitionException {
        XQueryParser.p_TargetExpr_return retval = new XQueryParser.p_TargetExpr_return();
        retval.start = input.LT(1);

        XQDTCommonTree root_0 = null;

        XQueryParser.p_ExprSingle_return p_ExprSingle574 = null;



        try {
            // XQueryParser.g:1374:9: ( p_ExprSingle )
            // XQueryParser.g:1374:11: p_ExprSingle
            {
            root_0 = (XQDTCommonTree)adaptor.nil();

            pushFollow(FOLLOW_p_ExprSingle_in_p_TargetExpr12348);
            p_ExprSingle574=p_ExprSingle();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, p_ExprSingle574.getTree());

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (XQDTCommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (XQDTCommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "p_TargetExpr"

    public static class p_NewNameExpr_return extends ParserRuleReturnScope {
        XQDTCommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "p_NewNameExpr"
    // XQueryParser.g:1378:1: p_NewNameExpr : p_ExprSingle ;
    public final XQueryParser.p_NewNameExpr_return p_NewNameExpr() throws RecognitionException {
        XQueryParser.p_NewNameExpr_return retval = new XQueryParser.p_NewNameExpr_return();
        retval.start = input.LT(1);

        XQDTCommonTree root_0 = null;

        XQueryParser.p_ExprSingle_return p_ExprSingle575 = null;



        try {
            // XQueryParser.g:1379:9: ( p_ExprSingle )
            // XQueryParser.g:1379:11: p_ExprSingle
            {
            root_0 = (XQDTCommonTree)adaptor.nil();

            pushFollow(FOLLOW_p_ExprSingle_in_p_NewNameExpr12374);
            p_ExprSingle575=p_ExprSingle();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, p_ExprSingle575.getTree());

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (XQDTCommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (XQDTCommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "p_NewNameExpr"

    public static class p_TransformExpr_return extends ParserRuleReturnScope {
        XQDTCommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "p_TransformExpr"
    // XQueryParser.g:1383:1: p_TransformExpr : k+= COPY DOLLAR p_VarName BIND p_ExprSingle ( COMMA DOLLAR p_VarName BIND p_ExprSingle )* k+= MODIFY p_ExprSingle k+= RETURN p_ExprSingle ;
    public final XQueryParser.p_TransformExpr_return p_TransformExpr() throws RecognitionException {
        XQueryParser.p_TransformExpr_return retval = new XQueryParser.p_TransformExpr_return();
        retval.start = input.LT(1);

        XQDTCommonTree root_0 = null;

        CommonToken DOLLAR576=null;
        CommonToken BIND578=null;
        CommonToken COMMA580=null;
        CommonToken DOLLAR581=null;
        CommonToken BIND583=null;
        CommonToken k=null;
        List list_k=null;
        XQueryParser.p_VarName_return p_VarName577 = null;

        XQueryParser.p_ExprSingle_return p_ExprSingle579 = null;

        XQueryParser.p_VarName_return p_VarName582 = null;

        XQueryParser.p_ExprSingle_return p_ExprSingle584 = null;

        XQueryParser.p_ExprSingle_return p_ExprSingle585 = null;

        XQueryParser.p_ExprSingle_return p_ExprSingle586 = null;


        XQDTCommonTree DOLLAR576_tree=null;
        XQDTCommonTree BIND578_tree=null;
        XQDTCommonTree COMMA580_tree=null;
        XQDTCommonTree DOLLAR581_tree=null;
        XQDTCommonTree BIND583_tree=null;
        XQDTCommonTree k_tree=null;

        try {
            // XQueryParser.g:1384:9: (k+= COPY DOLLAR p_VarName BIND p_ExprSingle ( COMMA DOLLAR p_VarName BIND p_ExprSingle )* k+= MODIFY p_ExprSingle k+= RETURN p_ExprSingle )
            // XQueryParser.g:1384:11: k+= COPY DOLLAR p_VarName BIND p_ExprSingle ( COMMA DOLLAR p_VarName BIND p_ExprSingle )* k+= MODIFY p_ExprSingle k+= RETURN p_ExprSingle
            {
            root_0 = (XQDTCommonTree)adaptor.nil();

            k=(CommonToken)match(input,COPY,FOLLOW_COPY_in_p_TransformExpr12402); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            k_tree = (XQDTCommonTree)adaptor.create(k);
            adaptor.addChild(root_0, k_tree);
            }
            if (list_k==null) list_k=new ArrayList();
            list_k.add(k);

            DOLLAR576=(CommonToken)match(input,DOLLAR,FOLLOW_DOLLAR_in_p_TransformExpr12404); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            DOLLAR576_tree = (XQDTCommonTree)adaptor.create(DOLLAR576);
            adaptor.addChild(root_0, DOLLAR576_tree);
            }
            pushFollow(FOLLOW_p_VarName_in_p_TransformExpr12406);
            p_VarName577=p_VarName();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, p_VarName577.getTree());
            BIND578=(CommonToken)match(input,BIND,FOLLOW_BIND_in_p_TransformExpr12408); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            BIND578_tree = (XQDTCommonTree)adaptor.create(BIND578);
            adaptor.addChild(root_0, BIND578_tree);
            }
            pushFollow(FOLLOW_p_ExprSingle_in_p_TransformExpr12410);
            p_ExprSingle579=p_ExprSingle();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, p_ExprSingle579.getTree());
            // XQueryParser.g:1384:54: ( COMMA DOLLAR p_VarName BIND p_ExprSingle )*
            loop185:
            do {
                int alt185=2;
                int LA185_0 = input.LA(1);

                if ( (LA185_0==COMMA) ) {
                    alt185=1;
                }


                switch (alt185) {
            	case 1 :
            	    // XQueryParser.g:1384:55: COMMA DOLLAR p_VarName BIND p_ExprSingle
            	    {
            	    COMMA580=(CommonToken)match(input,COMMA,FOLLOW_COMMA_in_p_TransformExpr12413); if (state.failed) return retval;
            	    if ( state.backtracking==0 ) {
            	    COMMA580_tree = (XQDTCommonTree)adaptor.create(COMMA580);
            	    adaptor.addChild(root_0, COMMA580_tree);
            	    }
            	    DOLLAR581=(CommonToken)match(input,DOLLAR,FOLLOW_DOLLAR_in_p_TransformExpr12415); if (state.failed) return retval;
            	    if ( state.backtracking==0 ) {
            	    DOLLAR581_tree = (XQDTCommonTree)adaptor.create(DOLLAR581);
            	    adaptor.addChild(root_0, DOLLAR581_tree);
            	    }
            	    pushFollow(FOLLOW_p_VarName_in_p_TransformExpr12417);
            	    p_VarName582=p_VarName();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, p_VarName582.getTree());
            	    BIND583=(CommonToken)match(input,BIND,FOLLOW_BIND_in_p_TransformExpr12419); if (state.failed) return retval;
            	    if ( state.backtracking==0 ) {
            	    BIND583_tree = (XQDTCommonTree)adaptor.create(BIND583);
            	    adaptor.addChild(root_0, BIND583_tree);
            	    }
            	    pushFollow(FOLLOW_p_ExprSingle_in_p_TransformExpr12421);
            	    p_ExprSingle584=p_ExprSingle();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, p_ExprSingle584.getTree());

            	    }
            	    break;

            	default :
            	    break loop185;
                }
            } while (true);

            k=(CommonToken)match(input,MODIFY,FOLLOW_MODIFY_in_p_TransformExpr12427); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            k_tree = (XQDTCommonTree)adaptor.create(k);
            adaptor.addChild(root_0, k_tree);
            }
            if (list_k==null) list_k=new ArrayList();
            list_k.add(k);

            pushFollow(FOLLOW_p_ExprSingle_in_p_TransformExpr12429);
            p_ExprSingle585=p_ExprSingle();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, p_ExprSingle585.getTree());
            k=(CommonToken)match(input,RETURN,FOLLOW_RETURN_in_p_TransformExpr12433); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            k_tree = (XQDTCommonTree)adaptor.create(k);
            adaptor.addChild(root_0, k_tree);
            }
            if (list_k==null) list_k=new ArrayList();
            list_k.add(k);

            pushFollow(FOLLOW_p_ExprSingle_in_p_TransformExpr12435);
            p_ExprSingle586=p_ExprSingle();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, p_ExprSingle586.getTree());
            if ( state.backtracking==0 ) {
              ak(list_k);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (XQDTCommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (XQDTCommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "p_TransformExpr"

    public static class pm_ApplyExpr_return extends ParserRuleReturnScope {
        XQDTCommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "pm_ApplyExpr"
    // XQueryParser.g:1394:1: pm_ApplyExpr : p_ConcatExpr SEMICOLON ;
    public final XQueryParser.pm_ApplyExpr_return pm_ApplyExpr() throws RecognitionException {
        XQueryParser.pm_ApplyExpr_return retval = new XQueryParser.pm_ApplyExpr_return();
        retval.start = input.LT(1);

        XQDTCommonTree root_0 = null;

        CommonToken SEMICOLON588=null;
        XQueryParser.p_ConcatExpr_return p_ConcatExpr587 = null;


        XQDTCommonTree SEMICOLON588_tree=null;

        try {
            // XQueryParser.g:1395:9: ( p_ConcatExpr SEMICOLON )
            // XQueryParser.g:1395:11: p_ConcatExpr SEMICOLON
            {
            root_0 = (XQDTCommonTree)adaptor.nil();

            pushFollow(FOLLOW_p_ConcatExpr_in_pm_ApplyExpr12470);
            p_ConcatExpr587=p_ConcatExpr();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, p_ConcatExpr587.getTree());
            SEMICOLON588=(CommonToken)match(input,SEMICOLON,FOLLOW_SEMICOLON_in_pm_ApplyExpr12472); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            SEMICOLON588_tree = (XQDTCommonTree)adaptor.create(SEMICOLON588);
            adaptor.addChild(root_0, SEMICOLON588_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (XQDTCommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (XQDTCommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "pm_ApplyExpr"

    public static class p_ConcatExpr_return extends ParserRuleReturnScope {
        XQDTCommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "p_ConcatExpr"
    // XQueryParser.g:1399:1: p_ConcatExpr : p_ExprSingle ( COMMA p_ExprSingle )* ;
    public final XQueryParser.p_ConcatExpr_return p_ConcatExpr() throws RecognitionException {
        XQueryParser.p_ConcatExpr_return retval = new XQueryParser.p_ConcatExpr_return();
        retval.start = input.LT(1);

        XQDTCommonTree root_0 = null;

        CommonToken COMMA590=null;
        XQueryParser.p_ExprSingle_return p_ExprSingle589 = null;

        XQueryParser.p_ExprSingle_return p_ExprSingle591 = null;


        XQDTCommonTree COMMA590_tree=null;

        try {
            // XQueryParser.g:1400:9: ( p_ExprSingle ( COMMA p_ExprSingle )* )
            // XQueryParser.g:1400:11: p_ExprSingle ( COMMA p_ExprSingle )*
            {
            root_0 = (XQDTCommonTree)adaptor.nil();

            pushFollow(FOLLOW_p_ExprSingle_in_p_ConcatExpr12498);
            p_ExprSingle589=p_ExprSingle();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, p_ExprSingle589.getTree());
            // XQueryParser.g:1400:24: ( COMMA p_ExprSingle )*
            loop186:
            do {
                int alt186=2;
                int LA186_0 = input.LA(1);

                if ( (LA186_0==COMMA) ) {
                    alt186=1;
                }


                switch (alt186) {
            	case 1 :
            	    // XQueryParser.g:1400:25: COMMA p_ExprSingle
            	    {
            	    COMMA590=(CommonToken)match(input,COMMA,FOLLOW_COMMA_in_p_ConcatExpr12501); if (state.failed) return retval;
            	    if ( state.backtracking==0 ) {
            	    COMMA590_tree = (XQDTCommonTree)adaptor.create(COMMA590);
            	    adaptor.addChild(root_0, COMMA590_tree);
            	    }
            	    pushFollow(FOLLOW_p_ExprSingle_in_p_ConcatExpr12503);
            	    p_ExprSingle591=p_ExprSingle();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, p_ExprSingle591.getTree());

            	    }
            	    break;

            	default :
            	    break loop186;
                }
            } while (true);


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (XQDTCommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (XQDTCommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "p_ConcatExpr"

    public static class p_BlockExpr_return extends ParserRuleReturnScope {
        XQDTCommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "p_BlockExpr"
    // XQueryParser.g:1404:1: p_BlockExpr : kb= BLOCK p_Block ;
    public final XQueryParser.p_BlockExpr_return p_BlockExpr() throws RecognitionException {
        XQueryParser.p_BlockExpr_return retval = new XQueryParser.p_BlockExpr_return();
        retval.start = input.LT(1);

        XQDTCommonTree root_0 = null;

        CommonToken kb=null;
        XQueryParser.p_Block_return p_Block592 = null;


        XQDTCommonTree kb_tree=null;

        try {
            // XQueryParser.g:1405:9: (kb= BLOCK p_Block )
            // XQueryParser.g:1405:11: kb= BLOCK p_Block
            {
            root_0 = (XQDTCommonTree)adaptor.nil();

            kb=(CommonToken)match(input,BLOCK,FOLLOW_BLOCK_in_p_BlockExpr12533); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            kb_tree = (XQDTCommonTree)adaptor.create(kb);
            adaptor.addChild(root_0, kb_tree);
            }
            if ( state.backtracking==0 ) {
              ak(kb);
            }
            pushFollow(FOLLOW_p_Block_in_p_BlockExpr12537);
            p_Block592=p_Block();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, p_Block592.getTree());

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (XQDTCommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (XQDTCommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "p_BlockExpr"

    public static class p_Block_return extends ParserRuleReturnScope {
        XQDTCommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "p_Block"
    // XQueryParser.g:1409:1: p_Block : LBRACKET bd= pm_BlockDecls bb= p_BlockBody RBRACKET -> ^( Block $bd $bb) ;
    public final XQueryParser.p_Block_return p_Block() throws RecognitionException {
        XQueryParser.p_Block_return retval = new XQueryParser.p_Block_return();
        retval.start = input.LT(1);

        XQDTCommonTree root_0 = null;

        CommonToken LBRACKET593=null;
        CommonToken RBRACKET594=null;
        XQueryParser.pm_BlockDecls_return bd = null;

        XQueryParser.p_BlockBody_return bb = null;


        XQDTCommonTree LBRACKET593_tree=null;
        XQDTCommonTree RBRACKET594_tree=null;
        RewriteRuleTokenStream stream_LBRACKET=new RewriteRuleTokenStream(adaptor,"token LBRACKET");
        RewriteRuleTokenStream stream_RBRACKET=new RewriteRuleTokenStream(adaptor,"token RBRACKET");
        RewriteRuleSubtreeStream stream_p_BlockBody=new RewriteRuleSubtreeStream(adaptor,"rule p_BlockBody");
        RewriteRuleSubtreeStream stream_pm_BlockDecls=new RewriteRuleSubtreeStream(adaptor,"rule pm_BlockDecls");
        try {
            // XQueryParser.g:1410:9: ( LBRACKET bd= pm_BlockDecls bb= p_BlockBody RBRACKET -> ^( Block $bd $bb) )
            // XQueryParser.g:1410:11: LBRACKET bd= pm_BlockDecls bb= p_BlockBody RBRACKET
            {
            LBRACKET593=(CommonToken)match(input,LBRACKET,FOLLOW_LBRACKET_in_p_Block12563); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_LBRACKET.add(LBRACKET593);

            pushFollow(FOLLOW_pm_BlockDecls_in_p_Block12567);
            bd=pm_BlockDecls();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_pm_BlockDecls.add(bd.getTree());
            pushFollow(FOLLOW_p_BlockBody_in_p_Block12571);
            bb=p_BlockBody();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_p_BlockBody.add(bb.getTree());
            RBRACKET594=(CommonToken)match(input,RBRACKET,FOLLOW_RBRACKET_in_p_Block12573); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_RBRACKET.add(RBRACKET594);



            // AST REWRITE
            // elements: bd, bb
            // token labels: 
            // rule labels: retval, bb, bd
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
            RewriteRuleSubtreeStream stream_bb=new RewriteRuleSubtreeStream(adaptor,"rule bb",bb!=null?bb.tree:null);
            RewriteRuleSubtreeStream stream_bd=new RewriteRuleSubtreeStream(adaptor,"rule bd",bd!=null?bd.tree:null);

            root_0 = (XQDTCommonTree)adaptor.nil();
            // 1411:17: -> ^( Block $bd $bb)
            {
                // XQueryParser.g:1411:20: ^( Block $bd $bb)
                {
                XQDTCommonTree root_1 = (XQDTCommonTree)adaptor.nil();
                root_1 = (XQDTCommonTree)adaptor.becomeRoot((XQDTCommonTree)adaptor.create(Block, "Block"), root_1);

                adaptor.addChild(root_1, stream_bd.nextTree());
                adaptor.addChild(root_1, stream_bb.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (XQDTCommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (XQDTCommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "p_Block"

    public static class pm_BlockDecls_return extends ParserRuleReturnScope {
        XQDTCommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "pm_BlockDecls"
    // XQueryParser.g:1415:1: pm_BlockDecls : (bvd+= pm_BlockVarDecl )* -> ^( BlockDecls ( $bvd)* ) ;
    public final XQueryParser.pm_BlockDecls_return pm_BlockDecls() throws RecognitionException {
        XQueryParser.pm_BlockDecls_return retval = new XQueryParser.pm_BlockDecls_return();
        retval.start = input.LT(1);

        XQDTCommonTree root_0 = null;

        List list_bvd=null;
        XQueryParser.pm_BlockVarDecl_return bvd = null;
         bvd = null;
        RewriteRuleSubtreeStream stream_pm_BlockVarDecl=new RewriteRuleSubtreeStream(adaptor,"rule pm_BlockVarDecl");
        try {
            // XQueryParser.g:1416:9: ( (bvd+= pm_BlockVarDecl )* -> ^( BlockDecls ( $bvd)* ) )
            // XQueryParser.g:1416:11: (bvd+= pm_BlockVarDecl )*
            {
            // XQueryParser.g:1416:14: (bvd+= pm_BlockVarDecl )*
            loop187:
            do {
                int alt187=2;
                int LA187_0 = input.LA(1);

                if ( (LA187_0==DECLARE) ) {
                    int LA187_2 = input.LA(2);

                    if ( (LA187_2==DOLLAR) ) {
                        alt187=1;
                    }


                }


                switch (alt187) {
            	case 1 :
            	    // XQueryParser.g:1416:14: bvd+= pm_BlockVarDecl
            	    {
            	    pushFollow(FOLLOW_pm_BlockVarDecl_in_pm_BlockDecls12629);
            	    bvd=pm_BlockVarDecl();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) stream_pm_BlockVarDecl.add(bvd.getTree());
            	    if (list_bvd==null) list_bvd=new ArrayList();
            	    list_bvd.add(bvd.getTree());


            	    }
            	    break;

            	default :
            	    break loop187;
                }
            } while (true);



            // AST REWRITE
            // elements: bvd
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: bvd
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
            RewriteRuleSubtreeStream stream_bvd=new RewriteRuleSubtreeStream(adaptor,"token bvd",list_bvd);
            root_0 = (XQDTCommonTree)adaptor.nil();
            // 1417:17: -> ^( BlockDecls ( $bvd)* )
            {
                // XQueryParser.g:1417:20: ^( BlockDecls ( $bvd)* )
                {
                XQDTCommonTree root_1 = (XQDTCommonTree)adaptor.nil();
                root_1 = (XQDTCommonTree)adaptor.becomeRoot((XQDTCommonTree)adaptor.create(BlockDecls, "BlockDecls"), root_1);

                // XQueryParser.g:1417:33: ( $bvd)*
                while ( stream_bvd.hasNext() ) {
                    adaptor.addChild(root_1, stream_bvd.nextTree());

                }
                stream_bvd.reset();

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (XQDTCommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (XQDTCommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "pm_BlockDecls"

    public static class pm_BlockVarDecl_return extends ParserRuleReturnScope {
        XQDTCommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "pm_BlockVarDecl"
    // XQueryParser.g:1421:1: pm_BlockVarDecl : kd= DECLARE DOLLAR qn= p_VarName (td= p_TypeDeclaration )? ( BIND es= p_ExprSingle )? ( COMMA DOLLAR p_VarName ( p_TypeDeclaration )? ( BIND p_ExprSingle )? )* SEMICOLON -> ^( BlockVarDecl $qn ( $td)? ( $es)? ) ;
    public final XQueryParser.pm_BlockVarDecl_return pm_BlockVarDecl() throws RecognitionException {
        XQueryParser.pm_BlockVarDecl_return retval = new XQueryParser.pm_BlockVarDecl_return();
        retval.start = input.LT(1);

        XQDTCommonTree root_0 = null;

        CommonToken kd=null;
        CommonToken DOLLAR595=null;
        CommonToken BIND596=null;
        CommonToken COMMA597=null;
        CommonToken DOLLAR598=null;
        CommonToken BIND601=null;
        CommonToken SEMICOLON603=null;
        XQueryParser.p_VarName_return qn = null;

        XQueryParser.p_TypeDeclaration_return td = null;

        XQueryParser.p_ExprSingle_return es = null;

        XQueryParser.p_VarName_return p_VarName599 = null;

        XQueryParser.p_TypeDeclaration_return p_TypeDeclaration600 = null;

        XQueryParser.p_ExprSingle_return p_ExprSingle602 = null;


        XQDTCommonTree kd_tree=null;
        XQDTCommonTree DOLLAR595_tree=null;
        XQDTCommonTree BIND596_tree=null;
        XQDTCommonTree COMMA597_tree=null;
        XQDTCommonTree DOLLAR598_tree=null;
        XQDTCommonTree BIND601_tree=null;
        XQDTCommonTree SEMICOLON603_tree=null;
        RewriteRuleTokenStream stream_DOLLAR=new RewriteRuleTokenStream(adaptor,"token DOLLAR");
        RewriteRuleTokenStream stream_DECLARE=new RewriteRuleTokenStream(adaptor,"token DECLARE");
        RewriteRuleTokenStream stream_SEMICOLON=new RewriteRuleTokenStream(adaptor,"token SEMICOLON");
        RewriteRuleTokenStream stream_COMMA=new RewriteRuleTokenStream(adaptor,"token COMMA");
        RewriteRuleTokenStream stream_BIND=new RewriteRuleTokenStream(adaptor,"token BIND");
        RewriteRuleSubtreeStream stream_p_VarName=new RewriteRuleSubtreeStream(adaptor,"rule p_VarName");
        RewriteRuleSubtreeStream stream_p_TypeDeclaration=new RewriteRuleSubtreeStream(adaptor,"rule p_TypeDeclaration");
        RewriteRuleSubtreeStream stream_p_ExprSingle=new RewriteRuleSubtreeStream(adaptor,"rule p_ExprSingle");
        try {
            // XQueryParser.g:1422:9: (kd= DECLARE DOLLAR qn= p_VarName (td= p_TypeDeclaration )? ( BIND es= p_ExprSingle )? ( COMMA DOLLAR p_VarName ( p_TypeDeclaration )? ( BIND p_ExprSingle )? )* SEMICOLON -> ^( BlockVarDecl $qn ( $td)? ( $es)? ) )
            // XQueryParser.g:1422:11: kd= DECLARE DOLLAR qn= p_VarName (td= p_TypeDeclaration )? ( BIND es= p_ExprSingle )? ( COMMA DOLLAR p_VarName ( p_TypeDeclaration )? ( BIND p_ExprSingle )? )* SEMICOLON
            {
            kd=(CommonToken)match(input,DECLARE,FOLLOW_DECLARE_in_pm_BlockVarDecl12684); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_DECLARE.add(kd);

            if ( state.backtracking==0 ) {
              ak(kd);
            }
            DOLLAR595=(CommonToken)match(input,DOLLAR,FOLLOW_DOLLAR_in_pm_BlockVarDecl12688); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_DOLLAR.add(DOLLAR595);

            pushFollow(FOLLOW_p_VarName_in_pm_BlockVarDecl12692);
            qn=p_VarName();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_p_VarName.add(qn.getTree());
            // XQueryParser.g:1422:55: (td= p_TypeDeclaration )?
            int alt188=2;
            int LA188_0 = input.LA(1);

            if ( (LA188_0==AS) ) {
                alt188=1;
            }
            switch (alt188) {
                case 1 :
                    // XQueryParser.g:1422:55: td= p_TypeDeclaration
                    {
                    pushFollow(FOLLOW_p_TypeDeclaration_in_pm_BlockVarDecl12696);
                    td=p_TypeDeclaration();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_p_TypeDeclaration.add(td.getTree());

                    }
                    break;

            }

            // XQueryParser.g:1422:75: ( BIND es= p_ExprSingle )?
            int alt189=2;
            int LA189_0 = input.LA(1);

            if ( (LA189_0==BIND) ) {
                alt189=1;
            }
            switch (alt189) {
                case 1 :
                    // XQueryParser.g:1422:76: BIND es= p_ExprSingle
                    {
                    BIND596=(CommonToken)match(input,BIND,FOLLOW_BIND_in_pm_BlockVarDecl12700); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_BIND.add(BIND596);

                    pushFollow(FOLLOW_p_ExprSingle_in_pm_BlockVarDecl12704);
                    es=p_ExprSingle();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_p_ExprSingle.add(es.getTree());

                    }
                    break;

            }

            // XQueryParser.g:1422:99: ( COMMA DOLLAR p_VarName ( p_TypeDeclaration )? ( BIND p_ExprSingle )? )*
            loop192:
            do {
                int alt192=2;
                int LA192_0 = input.LA(1);

                if ( (LA192_0==COMMA) ) {
                    alt192=1;
                }


                switch (alt192) {
            	case 1 :
            	    // XQueryParser.g:1422:100: COMMA DOLLAR p_VarName ( p_TypeDeclaration )? ( BIND p_ExprSingle )?
            	    {
            	    COMMA597=(CommonToken)match(input,COMMA,FOLLOW_COMMA_in_pm_BlockVarDecl12709); if (state.failed) return retval; 
            	    if ( state.backtracking==0 ) stream_COMMA.add(COMMA597);

            	    DOLLAR598=(CommonToken)match(input,DOLLAR,FOLLOW_DOLLAR_in_pm_BlockVarDecl12711); if (state.failed) return retval; 
            	    if ( state.backtracking==0 ) stream_DOLLAR.add(DOLLAR598);

            	    pushFollow(FOLLOW_p_VarName_in_pm_BlockVarDecl12713);
            	    p_VarName599=p_VarName();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) stream_p_VarName.add(p_VarName599.getTree());
            	    // XQueryParser.g:1422:123: ( p_TypeDeclaration )?
            	    int alt190=2;
            	    int LA190_0 = input.LA(1);

            	    if ( (LA190_0==AS) ) {
            	        alt190=1;
            	    }
            	    switch (alt190) {
            	        case 1 :
            	            // XQueryParser.g:1422:123: p_TypeDeclaration
            	            {
            	            pushFollow(FOLLOW_p_TypeDeclaration_in_pm_BlockVarDecl12715);
            	            p_TypeDeclaration600=p_TypeDeclaration();

            	            state._fsp--;
            	            if (state.failed) return retval;
            	            if ( state.backtracking==0 ) stream_p_TypeDeclaration.add(p_TypeDeclaration600.getTree());

            	            }
            	            break;

            	    }

            	    // XQueryParser.g:1422:142: ( BIND p_ExprSingle )?
            	    int alt191=2;
            	    int LA191_0 = input.LA(1);

            	    if ( (LA191_0==BIND) ) {
            	        alt191=1;
            	    }
            	    switch (alt191) {
            	        case 1 :
            	            // XQueryParser.g:1422:143: BIND p_ExprSingle
            	            {
            	            BIND601=(CommonToken)match(input,BIND,FOLLOW_BIND_in_pm_BlockVarDecl12719); if (state.failed) return retval; 
            	            if ( state.backtracking==0 ) stream_BIND.add(BIND601);

            	            pushFollow(FOLLOW_p_ExprSingle_in_pm_BlockVarDecl12721);
            	            p_ExprSingle602=p_ExprSingle();

            	            state._fsp--;
            	            if (state.failed) return retval;
            	            if ( state.backtracking==0 ) stream_p_ExprSingle.add(p_ExprSingle602.getTree());

            	            }
            	            break;

            	    }


            	    }
            	    break;

            	default :
            	    break loop192;
                }
            } while (true);

            SEMICOLON603=(CommonToken)match(input,SEMICOLON,FOLLOW_SEMICOLON_in_pm_BlockVarDecl12727); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_SEMICOLON.add(SEMICOLON603);



            // AST REWRITE
            // elements: td, qn, es
            // token labels: 
            // rule labels: qn, retval, td, es
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_qn=new RewriteRuleSubtreeStream(adaptor,"rule qn",qn!=null?qn.tree:null);
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
            RewriteRuleSubtreeStream stream_td=new RewriteRuleSubtreeStream(adaptor,"rule td",td!=null?td.tree:null);
            RewriteRuleSubtreeStream stream_es=new RewriteRuleSubtreeStream(adaptor,"rule es",es!=null?es.tree:null);

            root_0 = (XQDTCommonTree)adaptor.nil();
            // 1423:17: -> ^( BlockVarDecl $qn ( $td)? ( $es)? )
            {
                // XQueryParser.g:1423:21: ^( BlockVarDecl $qn ( $td)? ( $es)? )
                {
                XQDTCommonTree root_1 = (XQDTCommonTree)adaptor.nil();
                root_1 = (XQDTCommonTree)adaptor.becomeRoot((XQDTCommonTree)adaptor.create(BlockVarDecl, "BlockVarDecl"), root_1);

                adaptor.addChild(root_1, stream_qn.nextTree());
                // XQueryParser.g:1423:40: ( $td)?
                if ( stream_td.hasNext() ) {
                    adaptor.addChild(root_1, stream_td.nextTree());

                }
                stream_td.reset();
                // XQueryParser.g:1423:45: ( $es)?
                if ( stream_es.hasNext() ) {
                    adaptor.addChild(root_1, stream_es.nextTree());

                }
                stream_es.reset();

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (XQDTCommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (XQDTCommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "pm_BlockVarDecl"

    public static class p_BlockBody_return extends ParserRuleReturnScope {
        XQDTCommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "p_BlockBody"
    // XQueryParser.g:1427:1: p_BlockBody : pm_Expr ;
    public final XQueryParser.p_BlockBody_return p_BlockBody() throws RecognitionException {
        XQueryParser.p_BlockBody_return retval = new XQueryParser.p_BlockBody_return();
        retval.start = input.LT(1);

        XQDTCommonTree root_0 = null;

        XQueryParser.pm_Expr_return pm_Expr604 = null;



        try {
            // XQueryParser.g:1428:9: ( pm_Expr )
            // XQueryParser.g:1428:11: pm_Expr
            {
            root_0 = (XQDTCommonTree)adaptor.nil();

            pushFollow(FOLLOW_pm_Expr_in_p_BlockBody12787);
            pm_Expr604=pm_Expr();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, pm_Expr604.getTree());

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (XQDTCommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (XQDTCommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "p_BlockBody"

    public static class p_AssignmentExpr_return extends ParserRuleReturnScope {
        XQDTCommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "p_AssignmentExpr"
    // XQueryParser.g:1432:1: p_AssignmentExpr : ks= SET DOLLAR p_VarName BIND p_ExprSingle ;
    public final XQueryParser.p_AssignmentExpr_return p_AssignmentExpr() throws RecognitionException {
        XQueryParser.p_AssignmentExpr_return retval = new XQueryParser.p_AssignmentExpr_return();
        retval.start = input.LT(1);

        XQDTCommonTree root_0 = null;

        CommonToken ks=null;
        CommonToken DOLLAR605=null;
        CommonToken BIND607=null;
        XQueryParser.p_VarName_return p_VarName606 = null;

        XQueryParser.p_ExprSingle_return p_ExprSingle608 = null;


        XQDTCommonTree ks_tree=null;
        XQDTCommonTree DOLLAR605_tree=null;
        XQDTCommonTree BIND607_tree=null;

        try {
            // XQueryParser.g:1433:9: (ks= SET DOLLAR p_VarName BIND p_ExprSingle )
            // XQueryParser.g:1433:11: ks= SET DOLLAR p_VarName BIND p_ExprSingle
            {
            root_0 = (XQDTCommonTree)adaptor.nil();

            ks=(CommonToken)match(input,SET,FOLLOW_SET_in_p_AssignmentExpr12815); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            ks_tree = (XQDTCommonTree)adaptor.create(ks);
            adaptor.addChild(root_0, ks_tree);
            }
            if ( state.backtracking==0 ) {
              ak(ks);
            }
            DOLLAR605=(CommonToken)match(input,DOLLAR,FOLLOW_DOLLAR_in_p_AssignmentExpr12819); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            DOLLAR605_tree = (XQDTCommonTree)adaptor.create(DOLLAR605);
            adaptor.addChild(root_0, DOLLAR605_tree);
            }
            pushFollow(FOLLOW_p_VarName_in_p_AssignmentExpr12821);
            p_VarName606=p_VarName();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, p_VarName606.getTree());
            BIND607=(CommonToken)match(input,BIND,FOLLOW_BIND_in_p_AssignmentExpr12823); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            BIND607_tree = (XQDTCommonTree)adaptor.create(BIND607);
            adaptor.addChild(root_0, BIND607_tree);
            }
            pushFollow(FOLLOW_p_ExprSingle_in_p_AssignmentExpr12825);
            p_ExprSingle608=p_ExprSingle();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, p_ExprSingle608.getTree());

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (XQDTCommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (XQDTCommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "p_AssignmentExpr"

    public static class p_ExitExpr_return extends ParserRuleReturnScope {
        XQDTCommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "p_ExitExpr"
    // XQueryParser.g:1437:1: p_ExitExpr : ke= EXIT kr= RETURNING p_ExprSingle ;
    public final XQueryParser.p_ExitExpr_return p_ExitExpr() throws RecognitionException {
        XQueryParser.p_ExitExpr_return retval = new XQueryParser.p_ExitExpr_return();
        retval.start = input.LT(1);

        XQDTCommonTree root_0 = null;

        CommonToken ke=null;
        CommonToken kr=null;
        XQueryParser.p_ExprSingle_return p_ExprSingle609 = null;


        XQDTCommonTree ke_tree=null;
        XQDTCommonTree kr_tree=null;

        try {
            // XQueryParser.g:1438:9: (ke= EXIT kr= RETURNING p_ExprSingle )
            // XQueryParser.g:1438:11: ke= EXIT kr= RETURNING p_ExprSingle
            {
            root_0 = (XQDTCommonTree)adaptor.nil();

            ke=(CommonToken)match(input,EXIT,FOLLOW_EXIT_in_p_ExitExpr12853); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            ke_tree = (XQDTCommonTree)adaptor.create(ke);
            adaptor.addChild(root_0, ke_tree);
            }
            if ( state.backtracking==0 ) {
              ak(ke);
            }
            kr=(CommonToken)match(input,RETURNING,FOLLOW_RETURNING_in_p_ExitExpr12859); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            kr_tree = (XQDTCommonTree)adaptor.create(kr);
            adaptor.addChild(root_0, kr_tree);
            }
            if ( state.backtracking==0 ) {
              ak(kr);
            }
            pushFollow(FOLLOW_p_ExprSingle_in_p_ExitExpr12863);
            p_ExprSingle609=p_ExprSingle();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, p_ExprSingle609.getTree());

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (XQDTCommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (XQDTCommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "p_ExitExpr"

    public static class p_WhileExpr_return extends ParserRuleReturnScope {
        XQDTCommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "p_WhileExpr"
    // XQueryParser.g:1442:1: p_WhileExpr : kw= WHILE LPAREN p_ExprSingle RPAREN p_WhileBody ;
    public final XQueryParser.p_WhileExpr_return p_WhileExpr() throws RecognitionException {
        XQueryParser.p_WhileExpr_return retval = new XQueryParser.p_WhileExpr_return();
        retval.start = input.LT(1);

        XQDTCommonTree root_0 = null;

        CommonToken kw=null;
        CommonToken LPAREN610=null;
        CommonToken RPAREN612=null;
        XQueryParser.p_ExprSingle_return p_ExprSingle611 = null;

        XQueryParser.p_WhileBody_return p_WhileBody613 = null;


        XQDTCommonTree kw_tree=null;
        XQDTCommonTree LPAREN610_tree=null;
        XQDTCommonTree RPAREN612_tree=null;

        try {
            // XQueryParser.g:1443:9: (kw= WHILE LPAREN p_ExprSingle RPAREN p_WhileBody )
            // XQueryParser.g:1443:11: kw= WHILE LPAREN p_ExprSingle RPAREN p_WhileBody
            {
            root_0 = (XQDTCommonTree)adaptor.nil();

            kw=(CommonToken)match(input,WHILE,FOLLOW_WHILE_in_p_WhileExpr12891); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            kw_tree = (XQDTCommonTree)adaptor.create(kw);
            adaptor.addChild(root_0, kw_tree);
            }
            if ( state.backtracking==0 ) {
              ak(kw);
            }
            LPAREN610=(CommonToken)match(input,LPAREN,FOLLOW_LPAREN_in_p_WhileExpr12895); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            LPAREN610_tree = (XQDTCommonTree)adaptor.create(LPAREN610);
            adaptor.addChild(root_0, LPAREN610_tree);
            }
            pushFollow(FOLLOW_p_ExprSingle_in_p_WhileExpr12897);
            p_ExprSingle611=p_ExprSingle();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, p_ExprSingle611.getTree());
            RPAREN612=(CommonToken)match(input,RPAREN,FOLLOW_RPAREN_in_p_WhileExpr12899); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            RPAREN612_tree = (XQDTCommonTree)adaptor.create(RPAREN612);
            adaptor.addChild(root_0, RPAREN612_tree);
            }
            pushFollow(FOLLOW_p_WhileBody_in_p_WhileExpr12901);
            p_WhileBody613=p_WhileBody();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, p_WhileBody613.getTree());

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (XQDTCommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (XQDTCommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "p_WhileExpr"

    public static class p_WhileBody_return extends ParserRuleReturnScope {
        XQDTCommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "p_WhileBody"
    // XQueryParser.g:1447:1: p_WhileBody : p_Block ;
    public final XQueryParser.p_WhileBody_return p_WhileBody() throws RecognitionException {
        XQueryParser.p_WhileBody_return retval = new XQueryParser.p_WhileBody_return();
        retval.start = input.LT(1);

        XQDTCommonTree root_0 = null;

        XQueryParser.p_Block_return p_Block614 = null;



        try {
            // XQueryParser.g:1448:9: ( p_Block )
            // XQueryParser.g:1448:11: p_Block
            {
            root_0 = (XQDTCommonTree)adaptor.nil();

            pushFollow(FOLLOW_p_Block_in_p_WhileBody12927);
            p_Block614=p_Block();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, p_Block614.getTree());

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (XQDTCommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (XQDTCommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "p_WhileBody"

    public static class p_EvalExpr_return extends ParserRuleReturnScope {
        XQDTCommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "p_EvalExpr"
    // XQueryParser.g:1456:1: p_EvalExpr : ( p_UsingClause )? ke= EVAL LBRACKET p_ExprSingle RBRACKET ;
    public final XQueryParser.p_EvalExpr_return p_EvalExpr() throws RecognitionException {
        XQueryParser.p_EvalExpr_return retval = new XQueryParser.p_EvalExpr_return();
        retval.start = input.LT(1);

        XQDTCommonTree root_0 = null;

        CommonToken ke=null;
        CommonToken LBRACKET616=null;
        CommonToken RBRACKET618=null;
        XQueryParser.p_UsingClause_return p_UsingClause615 = null;

        XQueryParser.p_ExprSingle_return p_ExprSingle617 = null;


        XQDTCommonTree ke_tree=null;
        XQDTCommonTree LBRACKET616_tree=null;
        XQDTCommonTree RBRACKET618_tree=null;

        try {
            // XQueryParser.g:1457:9: ( ( p_UsingClause )? ke= EVAL LBRACKET p_ExprSingle RBRACKET )
            // XQueryParser.g:1457:11: ( p_UsingClause )? ke= EVAL LBRACKET p_ExprSingle RBRACKET
            {
            root_0 = (XQDTCommonTree)adaptor.nil();

            // XQueryParser.g:1457:11: ( p_UsingClause )?
            int alt193=2;
            int LA193_0 = input.LA(1);

            if ( (LA193_0==USING) ) {
                alt193=1;
            }
            switch (alt193) {
                case 1 :
                    // XQueryParser.g:1457:11: p_UsingClause
                    {
                    pushFollow(FOLLOW_p_UsingClause_in_p_EvalExpr12957);
                    p_UsingClause615=p_UsingClause();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, p_UsingClause615.getTree());

                    }
                    break;

            }

            ke=(CommonToken)match(input,EVAL,FOLLOW_EVAL_in_p_EvalExpr12962); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            ke_tree = (XQDTCommonTree)adaptor.create(ke);
            adaptor.addChild(root_0, ke_tree);
            }
            if ( state.backtracking==0 ) {
              ak(ke);
            }
            LBRACKET616=(CommonToken)match(input,LBRACKET,FOLLOW_LBRACKET_in_p_EvalExpr12966); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            LBRACKET616_tree = (XQDTCommonTree)adaptor.create(LBRACKET616);
            adaptor.addChild(root_0, LBRACKET616_tree);
            }
            pushFollow(FOLLOW_p_ExprSingle_in_p_EvalExpr12968);
            p_ExprSingle617=p_ExprSingle();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, p_ExprSingle617.getTree());
            RBRACKET618=(CommonToken)match(input,RBRACKET,FOLLOW_RBRACKET_in_p_EvalExpr12970); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            RBRACKET618_tree = (XQDTCommonTree)adaptor.create(RBRACKET618);
            adaptor.addChild(root_0, RBRACKET618_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (XQDTCommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (XQDTCommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "p_EvalExpr"

    public static class p_UsingClause_return extends ParserRuleReturnScope {
        XQDTCommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "p_UsingClause"
    // XQueryParser.g:1460:1: p_UsingClause : ku= USING DOLLAR p_VarName ( COMMA DOLLAR p_VarName )* ;
    public final XQueryParser.p_UsingClause_return p_UsingClause() throws RecognitionException {
        XQueryParser.p_UsingClause_return retval = new XQueryParser.p_UsingClause_return();
        retval.start = input.LT(1);

        XQDTCommonTree root_0 = null;

        CommonToken ku=null;
        CommonToken DOLLAR619=null;
        CommonToken COMMA621=null;
        CommonToken DOLLAR622=null;
        XQueryParser.p_VarName_return p_VarName620 = null;

        XQueryParser.p_VarName_return p_VarName623 = null;


        XQDTCommonTree ku_tree=null;
        XQDTCommonTree DOLLAR619_tree=null;
        XQDTCommonTree COMMA621_tree=null;
        XQDTCommonTree DOLLAR622_tree=null;

        try {
            // XQueryParser.g:1461:9: (ku= USING DOLLAR p_VarName ( COMMA DOLLAR p_VarName )* )
            // XQueryParser.g:1461:11: ku= USING DOLLAR p_VarName ( COMMA DOLLAR p_VarName )*
            {
            root_0 = (XQDTCommonTree)adaptor.nil();

            ku=(CommonToken)match(input,USING,FOLLOW_USING_in_p_UsingClause12997); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            ku_tree = (XQDTCommonTree)adaptor.create(ku);
            adaptor.addChild(root_0, ku_tree);
            }
            if ( state.backtracking==0 ) {
              ak(ku);
            }
            DOLLAR619=(CommonToken)match(input,DOLLAR,FOLLOW_DOLLAR_in_p_UsingClause13001); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            DOLLAR619_tree = (XQDTCommonTree)adaptor.create(DOLLAR619);
            adaptor.addChild(root_0, DOLLAR619_tree);
            }
            pushFollow(FOLLOW_p_VarName_in_p_UsingClause13003);
            p_VarName620=p_VarName();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, p_VarName620.getTree());
            // XQueryParser.g:1461:48: ( COMMA DOLLAR p_VarName )*
            loop194:
            do {
                int alt194=2;
                int LA194_0 = input.LA(1);

                if ( (LA194_0==COMMA) ) {
                    alt194=1;
                }


                switch (alt194) {
            	case 1 :
            	    // XQueryParser.g:1461:49: COMMA DOLLAR p_VarName
            	    {
            	    COMMA621=(CommonToken)match(input,COMMA,FOLLOW_COMMA_in_p_UsingClause13006); if (state.failed) return retval;
            	    if ( state.backtracking==0 ) {
            	    COMMA621_tree = (XQDTCommonTree)adaptor.create(COMMA621);
            	    adaptor.addChild(root_0, COMMA621_tree);
            	    }
            	    DOLLAR622=(CommonToken)match(input,DOLLAR,FOLLOW_DOLLAR_in_p_UsingClause13008); if (state.failed) return retval;
            	    if ( state.backtracking==0 ) {
            	    DOLLAR622_tree = (XQDTCommonTree)adaptor.create(DOLLAR622);
            	    adaptor.addChild(root_0, DOLLAR622_tree);
            	    }
            	    pushFollow(FOLLOW_p_VarName_in_p_UsingClause13010);
            	    p_VarName623=p_VarName();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, p_VarName623.getTree());

            	    }
            	    break;

            	default :
            	    break loop194;
                }
            } while (true);


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (XQDTCommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (XQDTCommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "p_UsingClause"

    public static class p_CollectionDecl_return extends ParserRuleReturnScope {
        XQDTCommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "p_CollectionDecl"
    // XQueryParser.g:1470:1: p_CollectionDecl : k+= DECLARE p_CollProperties k+= COLLECTION p_QName ( p_CollectionTypeDecl )? (k+= WITH p_NodeModifier k+= NODES )? SEMICOLON ;
    public final XQueryParser.p_CollectionDecl_return p_CollectionDecl() throws RecognitionException {
        XQueryParser.p_CollectionDecl_return retval = new XQueryParser.p_CollectionDecl_return();
        retval.start = input.LT(1);

        XQDTCommonTree root_0 = null;

        CommonToken SEMICOLON628=null;
        CommonToken k=null;
        List list_k=null;
        XQueryParser.p_CollProperties_return p_CollProperties624 = null;

        XQueryParser.p_QName_return p_QName625 = null;

        XQueryParser.p_CollectionTypeDecl_return p_CollectionTypeDecl626 = null;

        XQueryParser.p_NodeModifier_return p_NodeModifier627 = null;


        XQDTCommonTree SEMICOLON628_tree=null;
        XQDTCommonTree k_tree=null;

        try {
            // XQueryParser.g:1471:9: (k+= DECLARE p_CollProperties k+= COLLECTION p_QName ( p_CollectionTypeDecl )? (k+= WITH p_NodeModifier k+= NODES )? SEMICOLON )
            // XQueryParser.g:1471:11: k+= DECLARE p_CollProperties k+= COLLECTION p_QName ( p_CollectionTypeDecl )? (k+= WITH p_NodeModifier k+= NODES )? SEMICOLON
            {
            root_0 = (XQDTCommonTree)adaptor.nil();

            k=(CommonToken)match(input,DECLARE,FOLLOW_DECLARE_in_p_CollectionDecl13045); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            k_tree = (XQDTCommonTree)adaptor.create(k);
            adaptor.addChild(root_0, k_tree);
            }
            if (list_k==null) list_k=new ArrayList();
            list_k.add(k);

            pushFollow(FOLLOW_p_CollProperties_in_p_CollectionDecl13047);
            p_CollProperties624=p_CollProperties();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, p_CollProperties624.getTree());
            k=(CommonToken)match(input,COLLECTION,FOLLOW_COLLECTION_in_p_CollectionDecl13051); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            k_tree = (XQDTCommonTree)adaptor.create(k);
            adaptor.addChild(root_0, k_tree);
            }
            if (list_k==null) list_k=new ArrayList();
            list_k.add(k);

            pushFollow(FOLLOW_p_QName_in_p_CollectionDecl13053);
            p_QName625=p_QName();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, p_QName625.getTree());
            // XQueryParser.g:1471:61: ( p_CollectionTypeDecl )?
            int alt195=2;
            int LA195_0 = input.LA(1);

            if ( (LA195_0==AS) ) {
                alt195=1;
            }
            switch (alt195) {
                case 1 :
                    // XQueryParser.g:1471:61: p_CollectionTypeDecl
                    {
                    pushFollow(FOLLOW_p_CollectionTypeDecl_in_p_CollectionDecl13055);
                    p_CollectionTypeDecl626=p_CollectionTypeDecl();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, p_CollectionTypeDecl626.getTree());

                    }
                    break;

            }

            // XQueryParser.g:1471:83: (k+= WITH p_NodeModifier k+= NODES )?
            int alt196=2;
            int LA196_0 = input.LA(1);

            if ( (LA196_0==WITH) ) {
                alt196=1;
            }
            switch (alt196) {
                case 1 :
                    // XQueryParser.g:1471:84: k+= WITH p_NodeModifier k+= NODES
                    {
                    k=(CommonToken)match(input,WITH,FOLLOW_WITH_in_p_CollectionDecl13061); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    k_tree = (XQDTCommonTree)adaptor.create(k);
                    adaptor.addChild(root_0, k_tree);
                    }
                    if (list_k==null) list_k=new ArrayList();
                    list_k.add(k);

                    pushFollow(FOLLOW_p_NodeModifier_in_p_CollectionDecl13063);
                    p_NodeModifier627=p_NodeModifier();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, p_NodeModifier627.getTree());
                    k=(CommonToken)match(input,NODES,FOLLOW_NODES_in_p_CollectionDecl13067); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    k_tree = (XQDTCommonTree)adaptor.create(k);
                    adaptor.addChild(root_0, k_tree);
                    }
                    if (list_k==null) list_k=new ArrayList();
                    list_k.add(k);


                    }
                    break;

            }

            SEMICOLON628=(CommonToken)match(input,SEMICOLON,FOLLOW_SEMICOLON_in_p_CollectionDecl13071); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            SEMICOLON628_tree = (XQDTCommonTree)adaptor.create(SEMICOLON628);
            adaptor.addChild(root_0, SEMICOLON628_tree);
            }
            if ( state.backtracking==0 ) {
              ak(list_k);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (XQDTCommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (XQDTCommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "p_CollectionDecl"

    public static class p_CollProperties_return extends ParserRuleReturnScope {
        XQDTCommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "p_CollProperties"
    // XQueryParser.g:1474:1: p_CollProperties : ( (k+= CONST | k+= MUTABLE | k+= APPEND_ONLY | k+= QUEUE | k+= ORDERED | k+= UNORDERED )* ) ;
    public final XQueryParser.p_CollProperties_return p_CollProperties() throws RecognitionException {
        XQueryParser.p_CollProperties_return retval = new XQueryParser.p_CollProperties_return();
        retval.start = input.LT(1);

        XQDTCommonTree root_0 = null;

        CommonToken k=null;
        List list_k=null;

        XQDTCommonTree k_tree=null;

        try {
            // XQueryParser.g:1475:9: ( ( (k+= CONST | k+= MUTABLE | k+= APPEND_ONLY | k+= QUEUE | k+= ORDERED | k+= UNORDERED )* ) )
            // XQueryParser.g:1475:11: ( (k+= CONST | k+= MUTABLE | k+= APPEND_ONLY | k+= QUEUE | k+= ORDERED | k+= UNORDERED )* )
            {
            root_0 = (XQDTCommonTree)adaptor.nil();

            // XQueryParser.g:1475:11: ( (k+= CONST | k+= MUTABLE | k+= APPEND_ONLY | k+= QUEUE | k+= ORDERED | k+= UNORDERED )* )
            // XQueryParser.g:1475:12: (k+= CONST | k+= MUTABLE | k+= APPEND_ONLY | k+= QUEUE | k+= ORDERED | k+= UNORDERED )*
            {
            // XQueryParser.g:1475:12: (k+= CONST | k+= MUTABLE | k+= APPEND_ONLY | k+= QUEUE | k+= ORDERED | k+= UNORDERED )*
            loop197:
            do {
                int alt197=7;
                switch ( input.LA(1) ) {
                case CONST:
                    {
                    alt197=1;
                    }
                    break;
                case MUTABLE:
                    {
                    alt197=2;
                    }
                    break;
                case APPEND_ONLY:
                    {
                    alt197=3;
                    }
                    break;
                case QUEUE:
                    {
                    alt197=4;
                    }
                    break;
                case ORDERED:
                    {
                    alt197=5;
                    }
                    break;
                case UNORDERED:
                    {
                    alt197=6;
                    }
                    break;

                }

                switch (alt197) {
            	case 1 :
            	    // XQueryParser.g:1475:13: k+= CONST
            	    {
            	    k=(CommonToken)match(input,CONST,FOLLOW_CONST_in_p_CollProperties13102); if (state.failed) return retval;
            	    if ( state.backtracking==0 ) {
            	    k_tree = (XQDTCommonTree)adaptor.create(k);
            	    adaptor.addChild(root_0, k_tree);
            	    }
            	    if (list_k==null) list_k=new ArrayList();
            	    list_k.add(k);


            	    }
            	    break;
            	case 2 :
            	    // XQueryParser.g:1475:24: k+= MUTABLE
            	    {
            	    k=(CommonToken)match(input,MUTABLE,FOLLOW_MUTABLE_in_p_CollProperties13108); if (state.failed) return retval;
            	    if ( state.backtracking==0 ) {
            	    k_tree = (XQDTCommonTree)adaptor.create(k);
            	    adaptor.addChild(root_0, k_tree);
            	    }
            	    if (list_k==null) list_k=new ArrayList();
            	    list_k.add(k);


            	    }
            	    break;
            	case 3 :
            	    // XQueryParser.g:1476:11: k+= APPEND_ONLY
            	    {
            	    k=(CommonToken)match(input,APPEND_ONLY,FOLLOW_APPEND_ONLY_in_p_CollProperties13122); if (state.failed) return retval;
            	    if ( state.backtracking==0 ) {
            	    k_tree = (XQDTCommonTree)adaptor.create(k);
            	    adaptor.addChild(root_0, k_tree);
            	    }
            	    if (list_k==null) list_k=new ArrayList();
            	    list_k.add(k);


            	    }
            	    break;
            	case 4 :
            	    // XQueryParser.g:1476:28: k+= QUEUE
            	    {
            	    k=(CommonToken)match(input,QUEUE,FOLLOW_QUEUE_in_p_CollProperties13128); if (state.failed) return retval;
            	    if ( state.backtracking==0 ) {
            	    k_tree = (XQDTCommonTree)adaptor.create(k);
            	    adaptor.addChild(root_0, k_tree);
            	    }
            	    if (list_k==null) list_k=new ArrayList();
            	    list_k.add(k);


            	    }
            	    break;
            	case 5 :
            	    // XQueryParser.g:1477:11: k+= ORDERED
            	    {
            	    k=(CommonToken)match(input,ORDERED,FOLLOW_ORDERED_in_p_CollProperties13142); if (state.failed) return retval;
            	    if ( state.backtracking==0 ) {
            	    k_tree = (XQDTCommonTree)adaptor.create(k);
            	    adaptor.addChild(root_0, k_tree);
            	    }
            	    if (list_k==null) list_k=new ArrayList();
            	    list_k.add(k);


            	    }
            	    break;
            	case 6 :
            	    // XQueryParser.g:1477:24: k+= UNORDERED
            	    {
            	    k=(CommonToken)match(input,UNORDERED,FOLLOW_UNORDERED_in_p_CollProperties13148); if (state.failed) return retval;
            	    if ( state.backtracking==0 ) {
            	    k_tree = (XQDTCommonTree)adaptor.create(k);
            	    adaptor.addChild(root_0, k_tree);
            	    }
            	    if (list_k==null) list_k=new ArrayList();
            	    list_k.add(k);


            	    }
            	    break;

            	default :
            	    break loop197;
                }
            } while (true);


            }

            if ( state.backtracking==0 ) {
              ak(list_k);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (XQDTCommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (XQDTCommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "p_CollProperties"

    public static class p_CollectionTypeDecl_return extends ParserRuleReturnScope {
        XQDTCommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "p_CollectionTypeDecl"
    // XQueryParser.g:1480:1: p_CollectionTypeDecl : (ka= AS p_KindTest ( ( p_OccurrenceIndicator )=> p_OccurrenceIndicator )? ) ;
    public final XQueryParser.p_CollectionTypeDecl_return p_CollectionTypeDecl() throws RecognitionException {
        XQueryParser.p_CollectionTypeDecl_return retval = new XQueryParser.p_CollectionTypeDecl_return();
        retval.start = input.LT(1);

        XQDTCommonTree root_0 = null;

        CommonToken ka=null;
        XQueryParser.p_KindTest_return p_KindTest629 = null;

        XQueryParser.p_OccurrenceIndicator_return p_OccurrenceIndicator630 = null;


        XQDTCommonTree ka_tree=null;

        try {
            // XQueryParser.g:1481:9: ( (ka= AS p_KindTest ( ( p_OccurrenceIndicator )=> p_OccurrenceIndicator )? ) )
            // XQueryParser.g:1481:11: (ka= AS p_KindTest ( ( p_OccurrenceIndicator )=> p_OccurrenceIndicator )? )
            {
            root_0 = (XQDTCommonTree)adaptor.nil();

            // XQueryParser.g:1481:11: (ka= AS p_KindTest ( ( p_OccurrenceIndicator )=> p_OccurrenceIndicator )? )
            // XQueryParser.g:1481:12: ka= AS p_KindTest ( ( p_OccurrenceIndicator )=> p_OccurrenceIndicator )?
            {
            ka=(CommonToken)match(input,AS,FOLLOW_AS_in_p_CollectionTypeDecl13181); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            ka_tree = (XQDTCommonTree)adaptor.create(ka);
            adaptor.addChild(root_0, ka_tree);
            }
            if ( state.backtracking==0 ) {
              ak(ka);
            }
            pushFollow(FOLLOW_p_KindTest_in_p_CollectionTypeDecl13185);
            p_KindTest629=p_KindTest();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, p_KindTest629.getTree());
            // XQueryParser.g:1481:40: ( ( p_OccurrenceIndicator )=> p_OccurrenceIndicator )?
            int alt198=2;
            int LA198_0 = input.LA(1);

            if ( ((LA198_0>=QUESTION && LA198_0<=PLUS)) && (synpred3_XQueryParser())) {
                alt198=1;
            }
            switch (alt198) {
                case 1 :
                    // XQueryParser.g:1481:41: ( p_OccurrenceIndicator )=> p_OccurrenceIndicator
                    {
                    pushFollow(FOLLOW_p_OccurrenceIndicator_in_p_CollectionTypeDecl13194);
                    p_OccurrenceIndicator630=p_OccurrenceIndicator();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, p_OccurrenceIndicator630.getTree());

                    }
                    break;

            }


            }


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (XQDTCommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (XQDTCommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "p_CollectionTypeDecl"

    public static class p_NodeModifier_return extends ParserRuleReturnScope {
        XQDTCommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "p_NodeModifier"
    // XQueryParser.g:1484:1: p_NodeModifier : (k+= READ_ONLY | k+= MUTABLE ) ;
    public final XQueryParser.p_NodeModifier_return p_NodeModifier() throws RecognitionException {
        XQueryParser.p_NodeModifier_return retval = new XQueryParser.p_NodeModifier_return();
        retval.start = input.LT(1);

        XQDTCommonTree root_0 = null;

        CommonToken k=null;
        List list_k=null;

        XQDTCommonTree k_tree=null;

        try {
            // XQueryParser.g:1485:9: ( (k+= READ_ONLY | k+= MUTABLE ) )
            // XQueryParser.g:1485:11: (k+= READ_ONLY | k+= MUTABLE )
            {
            root_0 = (XQDTCommonTree)adaptor.nil();

            // XQueryParser.g:1485:11: (k+= READ_ONLY | k+= MUTABLE )
            int alt199=2;
            int LA199_0 = input.LA(1);

            if ( (LA199_0==READ_ONLY) ) {
                alt199=1;
            }
            else if ( (LA199_0==MUTABLE) ) {
                alt199=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 199, 0, input);

                throw nvae;
            }
            switch (alt199) {
                case 1 :
                    // XQueryParser.g:1485:12: k+= READ_ONLY
                    {
                    k=(CommonToken)match(input,READ_ONLY,FOLLOW_READ_ONLY_in_p_NodeModifier13225); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    k_tree = (XQDTCommonTree)adaptor.create(k);
                    adaptor.addChild(root_0, k_tree);
                    }
                    if (list_k==null) list_k=new ArrayList();
                    list_k.add(k);


                    }
                    break;
                case 2 :
                    // XQueryParser.g:1485:27: k+= MUTABLE
                    {
                    k=(CommonToken)match(input,MUTABLE,FOLLOW_MUTABLE_in_p_NodeModifier13231); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    k_tree = (XQDTCommonTree)adaptor.create(k);
                    adaptor.addChild(root_0, k_tree);
                    }
                    if (list_k==null) list_k=new ArrayList();
                    list_k.add(k);


                    }
                    break;

            }

            if ( state.backtracking==0 ) {
              ak(list_k);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (XQDTCommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (XQDTCommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "p_NodeModifier"

    public static class p_IndexDecl_return extends ParserRuleReturnScope {
        XQDTCommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "p_IndexDecl"
    // XQueryParser.g:1488:1: p_IndexDecl : k+= DECLARE p_IndexProperties k+= INDEX p_IndexName k+= ON k+= NODES p_IndexDomainExpr k+= BY p_IndexKeySpec ( COMMA p_IndexKeySpec )* SEMICOLON ;
    public final XQueryParser.p_IndexDecl_return p_IndexDecl() throws RecognitionException {
        XQueryParser.p_IndexDecl_return retval = new XQueryParser.p_IndexDecl_return();
        retval.start = input.LT(1);

        XQDTCommonTree root_0 = null;

        CommonToken COMMA635=null;
        CommonToken SEMICOLON637=null;
        CommonToken k=null;
        List list_k=null;
        XQueryParser.p_IndexProperties_return p_IndexProperties631 = null;

        XQueryParser.p_IndexName_return p_IndexName632 = null;

        XQueryParser.p_IndexDomainExpr_return p_IndexDomainExpr633 = null;

        XQueryParser.p_IndexKeySpec_return p_IndexKeySpec634 = null;

        XQueryParser.p_IndexKeySpec_return p_IndexKeySpec636 = null;


        XQDTCommonTree COMMA635_tree=null;
        XQDTCommonTree SEMICOLON637_tree=null;
        XQDTCommonTree k_tree=null;

        try {
            // XQueryParser.g:1489:9: (k+= DECLARE p_IndexProperties k+= INDEX p_IndexName k+= ON k+= NODES p_IndexDomainExpr k+= BY p_IndexKeySpec ( COMMA p_IndexKeySpec )* SEMICOLON )
            // XQueryParser.g:1489:11: k+= DECLARE p_IndexProperties k+= INDEX p_IndexName k+= ON k+= NODES p_IndexDomainExpr k+= BY p_IndexKeySpec ( COMMA p_IndexKeySpec )* SEMICOLON
            {
            root_0 = (XQDTCommonTree)adaptor.nil();

            k=(CommonToken)match(input,DECLARE,FOLLOW_DECLARE_in_p_IndexDecl13261); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            k_tree = (XQDTCommonTree)adaptor.create(k);
            adaptor.addChild(root_0, k_tree);
            }
            if (list_k==null) list_k=new ArrayList();
            list_k.add(k);

            pushFollow(FOLLOW_p_IndexProperties_in_p_IndexDecl13263);
            p_IndexProperties631=p_IndexProperties();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, p_IndexProperties631.getTree());
            k=(CommonToken)match(input,INDEX,FOLLOW_INDEX_in_p_IndexDecl13267); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            k_tree = (XQDTCommonTree)adaptor.create(k);
            adaptor.addChild(root_0, k_tree);
            }
            if (list_k==null) list_k=new ArrayList();
            list_k.add(k);

            pushFollow(FOLLOW_p_IndexName_in_p_IndexDecl13269);
            p_IndexName632=p_IndexName();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, p_IndexName632.getTree());
            k=(CommonToken)match(input,ON,FOLLOW_ON_in_p_IndexDecl13273); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            k_tree = (XQDTCommonTree)adaptor.create(k);
            adaptor.addChild(root_0, k_tree);
            }
            if (list_k==null) list_k=new ArrayList();
            list_k.add(k);

            k=(CommonToken)match(input,NODES,FOLLOW_NODES_in_p_IndexDecl13277); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            k_tree = (XQDTCommonTree)adaptor.create(k);
            adaptor.addChild(root_0, k_tree);
            }
            if (list_k==null) list_k=new ArrayList();
            list_k.add(k);

            pushFollow(FOLLOW_p_IndexDomainExpr_in_p_IndexDecl13279);
            p_IndexDomainExpr633=p_IndexDomainExpr();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, p_IndexDomainExpr633.getTree());
            k=(CommonToken)match(input,BY,FOLLOW_BY_in_p_IndexDecl13283); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            k_tree = (XQDTCommonTree)adaptor.create(k);
            adaptor.addChild(root_0, k_tree);
            }
            if (list_k==null) list_k=new ArrayList();
            list_k.add(k);

            pushFollow(FOLLOW_p_IndexKeySpec_in_p_IndexDecl13285);
            p_IndexKeySpec634=p_IndexKeySpec();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, p_IndexKeySpec634.getTree());
            // XQueryParser.g:1489:115: ( COMMA p_IndexKeySpec )*
            loop200:
            do {
                int alt200=2;
                int LA200_0 = input.LA(1);

                if ( (LA200_0==COMMA) ) {
                    alt200=1;
                }


                switch (alt200) {
            	case 1 :
            	    // XQueryParser.g:1489:116: COMMA p_IndexKeySpec
            	    {
            	    COMMA635=(CommonToken)match(input,COMMA,FOLLOW_COMMA_in_p_IndexDecl13288); if (state.failed) return retval;
            	    if ( state.backtracking==0 ) {
            	    COMMA635_tree = (XQDTCommonTree)adaptor.create(COMMA635);
            	    adaptor.addChild(root_0, COMMA635_tree);
            	    }
            	    pushFollow(FOLLOW_p_IndexKeySpec_in_p_IndexDecl13290);
            	    p_IndexKeySpec636=p_IndexKeySpec();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, p_IndexKeySpec636.getTree());

            	    }
            	    break;

            	default :
            	    break loop200;
                }
            } while (true);

            SEMICOLON637=(CommonToken)match(input,SEMICOLON,FOLLOW_SEMICOLON_in_p_IndexDecl13294); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            SEMICOLON637_tree = (XQDTCommonTree)adaptor.create(SEMICOLON637);
            adaptor.addChild(root_0, SEMICOLON637_tree);
            }
            if ( state.backtracking==0 ) {
              ak(list_k);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (XQDTCommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (XQDTCommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "p_IndexDecl"

    public static class p_IndexName_return extends ParserRuleReturnScope {
        XQDTCommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "p_IndexName"
    // XQueryParser.g:1492:1: p_IndexName : p_QName ;
    public final XQueryParser.p_IndexName_return p_IndexName() throws RecognitionException {
        XQueryParser.p_IndexName_return retval = new XQueryParser.p_IndexName_return();
        retval.start = input.LT(1);

        XQDTCommonTree root_0 = null;

        XQueryParser.p_QName_return p_QName638 = null;



        try {
            // XQueryParser.g:1493:9: ( p_QName )
            // XQueryParser.g:1493:11: p_QName
            {
            root_0 = (XQDTCommonTree)adaptor.nil();

            pushFollow(FOLLOW_p_QName_in_p_IndexName13321);
            p_QName638=p_QName();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, p_QName638.getTree());

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (XQDTCommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (XQDTCommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "p_IndexName"

    public static class p_IndexProperties_return extends ParserRuleReturnScope {
        XQDTCommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "p_IndexProperties"
    // XQueryParser.g:1496:1: p_IndexProperties : ( (k+= UNIQUE | k+= NON k+= UNIQUE | k+= VALUE k+= RANGE | k+= VALUE k+= EQUALITY | k+= AUTOMATICALLY k+= MAINTAINED | k+= MANUALLY k+= MAINTAINED )* ) ;
    public final XQueryParser.p_IndexProperties_return p_IndexProperties() throws RecognitionException {
        XQueryParser.p_IndexProperties_return retval = new XQueryParser.p_IndexProperties_return();
        retval.start = input.LT(1);

        XQDTCommonTree root_0 = null;

        CommonToken k=null;
        List list_k=null;

        XQDTCommonTree k_tree=null;

        try {
            // XQueryParser.g:1497:9: ( ( (k+= UNIQUE | k+= NON k+= UNIQUE | k+= VALUE k+= RANGE | k+= VALUE k+= EQUALITY | k+= AUTOMATICALLY k+= MAINTAINED | k+= MANUALLY k+= MAINTAINED )* ) )
            // XQueryParser.g:1497:11: ( (k+= UNIQUE | k+= NON k+= UNIQUE | k+= VALUE k+= RANGE | k+= VALUE k+= EQUALITY | k+= AUTOMATICALLY k+= MAINTAINED | k+= MANUALLY k+= MAINTAINED )* )
            {
            root_0 = (XQDTCommonTree)adaptor.nil();

            // XQueryParser.g:1497:11: ( (k+= UNIQUE | k+= NON k+= UNIQUE | k+= VALUE k+= RANGE | k+= VALUE k+= EQUALITY | k+= AUTOMATICALLY k+= MAINTAINED | k+= MANUALLY k+= MAINTAINED )* )
            // XQueryParser.g:1497:12: (k+= UNIQUE | k+= NON k+= UNIQUE | k+= VALUE k+= RANGE | k+= VALUE k+= EQUALITY | k+= AUTOMATICALLY k+= MAINTAINED | k+= MANUALLY k+= MAINTAINED )*
            {
            // XQueryParser.g:1497:12: (k+= UNIQUE | k+= NON k+= UNIQUE | k+= VALUE k+= RANGE | k+= VALUE k+= EQUALITY | k+= AUTOMATICALLY k+= MAINTAINED | k+= MANUALLY k+= MAINTAINED )*
            loop201:
            do {
                int alt201=7;
                switch ( input.LA(1) ) {
                case UNIQUE:
                    {
                    alt201=1;
                    }
                    break;
                case NON:
                    {
                    alt201=2;
                    }
                    break;
                case VALUE:
                    {
                    int LA201_4 = input.LA(2);

                    if ( (LA201_4==RANGE) ) {
                        alt201=3;
                    }
                    else if ( (LA201_4==EQUALITY) ) {
                        alt201=4;
                    }


                    }
                    break;
                case AUTOMATICALLY:
                    {
                    alt201=5;
                    }
                    break;
                case MANUALLY:
                    {
                    alt201=6;
                    }
                    break;

                }

                switch (alt201) {
            	case 1 :
            	    // XQueryParser.g:1497:13: k+= UNIQUE
            	    {
            	    k=(CommonToken)match(input,UNIQUE,FOLLOW_UNIQUE_in_p_IndexProperties13350); if (state.failed) return retval;
            	    if ( state.backtracking==0 ) {
            	    k_tree = (XQDTCommonTree)adaptor.create(k);
            	    adaptor.addChild(root_0, k_tree);
            	    }
            	    if (list_k==null) list_k=new ArrayList();
            	    list_k.add(k);


            	    }
            	    break;
            	case 2 :
            	    // XQueryParser.g:1497:25: k+= NON k+= UNIQUE
            	    {
            	    k=(CommonToken)match(input,NON,FOLLOW_NON_in_p_IndexProperties13356); if (state.failed) return retval;
            	    if ( state.backtracking==0 ) {
            	    k_tree = (XQDTCommonTree)adaptor.create(k);
            	    adaptor.addChild(root_0, k_tree);
            	    }
            	    if (list_k==null) list_k=new ArrayList();
            	    list_k.add(k);

            	    k=(CommonToken)match(input,UNIQUE,FOLLOW_UNIQUE_in_p_IndexProperties13360); if (state.failed) return retval;
            	    if ( state.backtracking==0 ) {
            	    k_tree = (XQDTCommonTree)adaptor.create(k);
            	    adaptor.addChild(root_0, k_tree);
            	    }
            	    if (list_k==null) list_k=new ArrayList();
            	    list_k.add(k);


            	    }
            	    break;
            	case 3 :
            	    // XQueryParser.g:1498:11: k+= VALUE k+= RANGE
            	    {
            	    k=(CommonToken)match(input,VALUE,FOLLOW_VALUE_in_p_IndexProperties13374); if (state.failed) return retval;
            	    if ( state.backtracking==0 ) {
            	    k_tree = (XQDTCommonTree)adaptor.create(k);
            	    adaptor.addChild(root_0, k_tree);
            	    }
            	    if (list_k==null) list_k=new ArrayList();
            	    list_k.add(k);

            	    k=(CommonToken)match(input,RANGE,FOLLOW_RANGE_in_p_IndexProperties13378); if (state.failed) return retval;
            	    if ( state.backtracking==0 ) {
            	    k_tree = (XQDTCommonTree)adaptor.create(k);
            	    adaptor.addChild(root_0, k_tree);
            	    }
            	    if (list_k==null) list_k=new ArrayList();
            	    list_k.add(k);


            	    }
            	    break;
            	case 4 :
            	    // XQueryParser.g:1498:31: k+= VALUE k+= EQUALITY
            	    {
            	    k=(CommonToken)match(input,VALUE,FOLLOW_VALUE_in_p_IndexProperties13384); if (state.failed) return retval;
            	    if ( state.backtracking==0 ) {
            	    k_tree = (XQDTCommonTree)adaptor.create(k);
            	    adaptor.addChild(root_0, k_tree);
            	    }
            	    if (list_k==null) list_k=new ArrayList();
            	    list_k.add(k);

            	    k=(CommonToken)match(input,EQUALITY,FOLLOW_EQUALITY_in_p_IndexProperties13388); if (state.failed) return retval;
            	    if ( state.backtracking==0 ) {
            	    k_tree = (XQDTCommonTree)adaptor.create(k);
            	    adaptor.addChild(root_0, k_tree);
            	    }
            	    if (list_k==null) list_k=new ArrayList();
            	    list_k.add(k);


            	    }
            	    break;
            	case 5 :
            	    // XQueryParser.g:1499:11: k+= AUTOMATICALLY k+= MAINTAINED
            	    {
            	    k=(CommonToken)match(input,AUTOMATICALLY,FOLLOW_AUTOMATICALLY_in_p_IndexProperties13402); if (state.failed) return retval;
            	    if ( state.backtracking==0 ) {
            	    k_tree = (XQDTCommonTree)adaptor.create(k);
            	    adaptor.addChild(root_0, k_tree);
            	    }
            	    if (list_k==null) list_k=new ArrayList();
            	    list_k.add(k);

            	    k=(CommonToken)match(input,MAINTAINED,FOLLOW_MAINTAINED_in_p_IndexProperties13406); if (state.failed) return retval;
            	    if ( state.backtracking==0 ) {
            	    k_tree = (XQDTCommonTree)adaptor.create(k);
            	    adaptor.addChild(root_0, k_tree);
            	    }
            	    if (list_k==null) list_k=new ArrayList();
            	    list_k.add(k);


            	    }
            	    break;
            	case 6 :
            	    // XQueryParser.g:1499:44: k+= MANUALLY k+= MAINTAINED
            	    {
            	    k=(CommonToken)match(input,MANUALLY,FOLLOW_MANUALLY_in_p_IndexProperties13412); if (state.failed) return retval;
            	    if ( state.backtracking==0 ) {
            	    k_tree = (XQDTCommonTree)adaptor.create(k);
            	    adaptor.addChild(root_0, k_tree);
            	    }
            	    if (list_k==null) list_k=new ArrayList();
            	    list_k.add(k);

            	    k=(CommonToken)match(input,MAINTAINED,FOLLOW_MAINTAINED_in_p_IndexProperties13416); if (state.failed) return retval;
            	    if ( state.backtracking==0 ) {
            	    k_tree = (XQDTCommonTree)adaptor.create(k);
            	    adaptor.addChild(root_0, k_tree);
            	    }
            	    if (list_k==null) list_k=new ArrayList();
            	    list_k.add(k);


            	    }
            	    break;

            	default :
            	    break loop201;
                }
            } while (true);


            }

            if ( state.backtracking==0 ) {
              ak(list_k);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (XQDTCommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (XQDTCommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "p_IndexProperties"

    public static class p_IndexDomainExpr_return extends ParserRuleReturnScope {
        XQDTCommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "p_IndexDomainExpr"
    // XQueryParser.g:1502:1: p_IndexDomainExpr : p_PathExpr ;
    public final XQueryParser.p_IndexDomainExpr_return p_IndexDomainExpr() throws RecognitionException {
        XQueryParser.p_IndexDomainExpr_return retval = new XQueryParser.p_IndexDomainExpr_return();
        retval.start = input.LT(1);

        XQDTCommonTree root_0 = null;

        XQueryParser.p_PathExpr_return p_PathExpr639 = null;



        try {
            // XQueryParser.g:1503:9: ( p_PathExpr )
            // XQueryParser.g:1503:11: p_PathExpr
            {
            root_0 = (XQDTCommonTree)adaptor.nil();

            pushFollow(FOLLOW_p_PathExpr_in_p_IndexDomainExpr13446);
            p_PathExpr639=p_PathExpr();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, p_PathExpr639.getTree());

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (XQDTCommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (XQDTCommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "p_IndexDomainExpr"

    public static class p_IndexKeySpec_return extends ParserRuleReturnScope {
        XQDTCommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "p_IndexKeySpec"
    // XQueryParser.g:1506:1: p_IndexKeySpec : p_IndexKeyExpr p_IndexKeyTypeDecl ( p_IndexKeyCollation )? ;
    public final XQueryParser.p_IndexKeySpec_return p_IndexKeySpec() throws RecognitionException {
        XQueryParser.p_IndexKeySpec_return retval = new XQueryParser.p_IndexKeySpec_return();
        retval.start = input.LT(1);

        XQDTCommonTree root_0 = null;

        XQueryParser.p_IndexKeyExpr_return p_IndexKeyExpr640 = null;

        XQueryParser.p_IndexKeyTypeDecl_return p_IndexKeyTypeDecl641 = null;

        XQueryParser.p_IndexKeyCollation_return p_IndexKeyCollation642 = null;



        try {
            // XQueryParser.g:1507:9: ( p_IndexKeyExpr p_IndexKeyTypeDecl ( p_IndexKeyCollation )? )
            // XQueryParser.g:1507:11: p_IndexKeyExpr p_IndexKeyTypeDecl ( p_IndexKeyCollation )?
            {
            root_0 = (XQDTCommonTree)adaptor.nil();

            pushFollow(FOLLOW_p_IndexKeyExpr_in_p_IndexKeySpec13471);
            p_IndexKeyExpr640=p_IndexKeyExpr();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, p_IndexKeyExpr640.getTree());
            pushFollow(FOLLOW_p_IndexKeyTypeDecl_in_p_IndexKeySpec13473);
            p_IndexKeyTypeDecl641=p_IndexKeyTypeDecl();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, p_IndexKeyTypeDecl641.getTree());
            // XQueryParser.g:1507:45: ( p_IndexKeyCollation )?
            int alt202=2;
            int LA202_0 = input.LA(1);

            if ( (LA202_0==COLLATION) ) {
                alt202=1;
            }
            switch (alt202) {
                case 1 :
                    // XQueryParser.g:1507:45: p_IndexKeyCollation
                    {
                    pushFollow(FOLLOW_p_IndexKeyCollation_in_p_IndexKeySpec13475);
                    p_IndexKeyCollation642=p_IndexKeyCollation();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, p_IndexKeyCollation642.getTree());

                    }
                    break;

            }


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (XQDTCommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (XQDTCommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "p_IndexKeySpec"

    public static class p_IndexKeyExpr_return extends ParserRuleReturnScope {
        XQDTCommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "p_IndexKeyExpr"
    // XQueryParser.g:1510:1: p_IndexKeyExpr : p_PathExpr ;
    public final XQueryParser.p_IndexKeyExpr_return p_IndexKeyExpr() throws RecognitionException {
        XQueryParser.p_IndexKeyExpr_return retval = new XQueryParser.p_IndexKeyExpr_return();
        retval.start = input.LT(1);

        XQDTCommonTree root_0 = null;

        XQueryParser.p_PathExpr_return p_PathExpr643 = null;



        try {
            // XQueryParser.g:1511:9: ( p_PathExpr )
            // XQueryParser.g:1511:11: p_PathExpr
            {
            root_0 = (XQDTCommonTree)adaptor.nil();

            pushFollow(FOLLOW_p_PathExpr_in_p_IndexKeyExpr13501);
            p_PathExpr643=p_PathExpr();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, p_PathExpr643.getTree());

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (XQDTCommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (XQDTCommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "p_IndexKeyExpr"

    public static class p_IndexKeyTypeDecl_return extends ParserRuleReturnScope {
        XQDTCommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "p_IndexKeyTypeDecl"
    // XQueryParser.g:1514:1: p_IndexKeyTypeDecl : ka= AS p_AtomicType ;
    public final XQueryParser.p_IndexKeyTypeDecl_return p_IndexKeyTypeDecl() throws RecognitionException {
        XQueryParser.p_IndexKeyTypeDecl_return retval = new XQueryParser.p_IndexKeyTypeDecl_return();
        retval.start = input.LT(1);

        XQDTCommonTree root_0 = null;

        CommonToken ka=null;
        XQueryParser.p_AtomicType_return p_AtomicType644 = null;


        XQDTCommonTree ka_tree=null;

        try {
            // XQueryParser.g:1515:9: (ka= AS p_AtomicType )
            // XQueryParser.g:1515:11: ka= AS p_AtomicType
            {
            root_0 = (XQDTCommonTree)adaptor.nil();

            ka=(CommonToken)match(input,AS,FOLLOW_AS_in_p_IndexKeyTypeDecl13528); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            ka_tree = (XQDTCommonTree)adaptor.create(ka);
            adaptor.addChild(root_0, ka_tree);
            }
            if ( state.backtracking==0 ) {
              ak(ka);
            }
            pushFollow(FOLLOW_p_AtomicType_in_p_IndexKeyTypeDecl13532);
            p_AtomicType644=p_AtomicType();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, p_AtomicType644.getTree());

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (XQDTCommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (XQDTCommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "p_IndexKeyTypeDecl"

    public static class p_IndexKeyCollation_return extends ParserRuleReturnScope {
        XQDTCommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "p_IndexKeyCollation"
    // XQueryParser.g:1518:1: p_IndexKeyCollation : kc= COLLATION p_StringLiteral ;
    public final XQueryParser.p_IndexKeyCollation_return p_IndexKeyCollation() throws RecognitionException {
        XQueryParser.p_IndexKeyCollation_return retval = new XQueryParser.p_IndexKeyCollation_return();
        retval.start = input.LT(1);

        XQDTCommonTree root_0 = null;

        CommonToken kc=null;
        XQueryParser.p_StringLiteral_return p_StringLiteral645 = null;


        XQDTCommonTree kc_tree=null;

        try {
            // XQueryParser.g:1519:9: (kc= COLLATION p_StringLiteral )
            // XQueryParser.g:1519:11: kc= COLLATION p_StringLiteral
            {
            root_0 = (XQDTCommonTree)adaptor.nil();

            kc=(CommonToken)match(input,COLLATION,FOLLOW_COLLATION_in_p_IndexKeyCollation13559); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            kc_tree = (XQDTCommonTree)adaptor.create(kc);
            adaptor.addChild(root_0, kc_tree);
            }
            if ( state.backtracking==0 ) {
              ak(kc);
            }
            pushFollow(FOLLOW_p_StringLiteral_in_p_IndexKeyCollation13563);
            p_StringLiteral645=p_StringLiteral();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, p_StringLiteral645.getTree());

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (XQDTCommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (XQDTCommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "p_IndexKeyCollation"

    public static class p_ICDecl_return extends ParserRuleReturnScope {
        XQDTCommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "p_ICDecl"
    // XQueryParser.g:1522:1: p_ICDecl : k+= DECLARE k+= INTEGRITY k+= CONSTRAINT p_QName ( p_ICCollection | p_ICForeignKey ) SEMICOLON ;
    public final XQueryParser.p_ICDecl_return p_ICDecl() throws RecognitionException {
        XQueryParser.p_ICDecl_return retval = new XQueryParser.p_ICDecl_return();
        retval.start = input.LT(1);

        XQDTCommonTree root_0 = null;

        CommonToken SEMICOLON649=null;
        CommonToken k=null;
        List list_k=null;
        XQueryParser.p_QName_return p_QName646 = null;

        XQueryParser.p_ICCollection_return p_ICCollection647 = null;

        XQueryParser.p_ICForeignKey_return p_ICForeignKey648 = null;


        XQDTCommonTree SEMICOLON649_tree=null;
        XQDTCommonTree k_tree=null;

        try {
            // XQueryParser.g:1523:9: (k+= DECLARE k+= INTEGRITY k+= CONSTRAINT p_QName ( p_ICCollection | p_ICForeignKey ) SEMICOLON )
            // XQueryParser.g:1523:11: k+= DECLARE k+= INTEGRITY k+= CONSTRAINT p_QName ( p_ICCollection | p_ICForeignKey ) SEMICOLON
            {
            root_0 = (XQDTCommonTree)adaptor.nil();

            k=(CommonToken)match(input,DECLARE,FOLLOW_DECLARE_in_p_ICDecl13590); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            k_tree = (XQDTCommonTree)adaptor.create(k);
            adaptor.addChild(root_0, k_tree);
            }
            if (list_k==null) list_k=new ArrayList();
            list_k.add(k);

            k=(CommonToken)match(input,INTEGRITY,FOLLOW_INTEGRITY_in_p_ICDecl13594); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            k_tree = (XQDTCommonTree)adaptor.create(k);
            adaptor.addChild(root_0, k_tree);
            }
            if (list_k==null) list_k=new ArrayList();
            list_k.add(k);

            k=(CommonToken)match(input,CONSTRAINT,FOLLOW_CONSTRAINT_in_p_ICDecl13598); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            k_tree = (XQDTCommonTree)adaptor.create(k);
            adaptor.addChild(root_0, k_tree);
            }
            if (list_k==null) list_k=new ArrayList();
            list_k.add(k);

            if ( state.backtracking==0 ) {
              ak(list_k);
            }
            pushFollow(FOLLOW_p_QName_in_p_ICDecl13602);
            p_QName646=p_QName();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, p_QName646.getTree());
            // XQueryParser.g:1523:67: ( p_ICCollection | p_ICForeignKey )
            int alt203=2;
            int LA203_0 = input.LA(1);

            if ( (LA203_0==ON) ) {
                alt203=1;
            }
            else if ( (LA203_0==FOREIGN) ) {
                alt203=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 203, 0, input);

                throw nvae;
            }
            switch (alt203) {
                case 1 :
                    // XQueryParser.g:1523:68: p_ICCollection
                    {
                    pushFollow(FOLLOW_p_ICCollection_in_p_ICDecl13605);
                    p_ICCollection647=p_ICCollection();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, p_ICCollection647.getTree());

                    }
                    break;
                case 2 :
                    // XQueryParser.g:1523:85: p_ICForeignKey
                    {
                    pushFollow(FOLLOW_p_ICForeignKey_in_p_ICDecl13609);
                    p_ICForeignKey648=p_ICForeignKey();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, p_ICForeignKey648.getTree());

                    }
                    break;

            }

            SEMICOLON649=(CommonToken)match(input,SEMICOLON,FOLLOW_SEMICOLON_in_p_ICDecl13612); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            SEMICOLON649_tree = (XQDTCommonTree)adaptor.create(SEMICOLON649);
            adaptor.addChild(root_0, SEMICOLON649_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (XQDTCommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (XQDTCommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "p_ICDecl"

    public static class p_ICCollection_return extends ParserRuleReturnScope {
        XQDTCommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "p_ICCollection"
    // XQueryParser.g:1526:1: p_ICCollection : k+= ON k+= COLLECTION p_QName ( p_ICCollSequence | p_ICCollSequenceUnique | p_ICCollNode ) ;
    public final XQueryParser.p_ICCollection_return p_ICCollection() throws RecognitionException {
        XQueryParser.p_ICCollection_return retval = new XQueryParser.p_ICCollection_return();
        retval.start = input.LT(1);

        XQDTCommonTree root_0 = null;

        CommonToken k=null;
        List list_k=null;
        XQueryParser.p_QName_return p_QName650 = null;

        XQueryParser.p_ICCollSequence_return p_ICCollSequence651 = null;

        XQueryParser.p_ICCollSequenceUnique_return p_ICCollSequenceUnique652 = null;

        XQueryParser.p_ICCollNode_return p_ICCollNode653 = null;


        XQDTCommonTree k_tree=null;

        try {
            // XQueryParser.g:1527:9: (k+= ON k+= COLLECTION p_QName ( p_ICCollSequence | p_ICCollSequenceUnique | p_ICCollNode ) )
            // XQueryParser.g:1527:11: k+= ON k+= COLLECTION p_QName ( p_ICCollSequence | p_ICCollSequenceUnique | p_ICCollNode )
            {
            root_0 = (XQDTCommonTree)adaptor.nil();

            k=(CommonToken)match(input,ON,FOLLOW_ON_in_p_ICCollection13639); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            k_tree = (XQDTCommonTree)adaptor.create(k);
            adaptor.addChild(root_0, k_tree);
            }
            if (list_k==null) list_k=new ArrayList();
            list_k.add(k);

            k=(CommonToken)match(input,COLLECTION,FOLLOW_COLLECTION_in_p_ICCollection13643); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            k_tree = (XQDTCommonTree)adaptor.create(k);
            adaptor.addChild(root_0, k_tree);
            }
            if (list_k==null) list_k=new ArrayList();
            list_k.add(k);

            if ( state.backtracking==0 ) {
              ak(list_k);
            }
            pushFollow(FOLLOW_p_QName_in_p_ICCollection13647);
            p_QName650=p_QName();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, p_QName650.getTree());
            // XQueryParser.g:1527:49: ( p_ICCollSequence | p_ICCollSequenceUnique | p_ICCollNode )
            int alt204=3;
            switch ( input.LA(1) ) {
            case DOLLAR:
                {
                alt204=1;
                }
                break;
            case NODE:
                {
                alt204=2;
                }
                break;
            case FOREACH:
                {
                alt204=3;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 204, 0, input);

                throw nvae;
            }

            switch (alt204) {
                case 1 :
                    // XQueryParser.g:1527:50: p_ICCollSequence
                    {
                    pushFollow(FOLLOW_p_ICCollSequence_in_p_ICCollection13650);
                    p_ICCollSequence651=p_ICCollSequence();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, p_ICCollSequence651.getTree());

                    }
                    break;
                case 2 :
                    // XQueryParser.g:1527:69: p_ICCollSequenceUnique
                    {
                    pushFollow(FOLLOW_p_ICCollSequenceUnique_in_p_ICCollection13654);
                    p_ICCollSequenceUnique652=p_ICCollSequenceUnique();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, p_ICCollSequenceUnique652.getTree());

                    }
                    break;
                case 3 :
                    // XQueryParser.g:1527:94: p_ICCollNode
                    {
                    pushFollow(FOLLOW_p_ICCollNode_in_p_ICCollection13658);
                    p_ICCollNode653=p_ICCollNode();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, p_ICCollNode653.getTree());

                    }
                    break;

            }


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (XQDTCommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (XQDTCommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "p_ICCollection"

    public static class p_ICCollSequence_return extends ParserRuleReturnScope {
        XQDTCommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "p_ICCollSequence"
    // XQueryParser.g:1530:1: p_ICCollSequence : DOLLAR p_QName kc= CHECK p_ExprSingle ;
    public final XQueryParser.p_ICCollSequence_return p_ICCollSequence() throws RecognitionException {
        XQueryParser.p_ICCollSequence_return retval = new XQueryParser.p_ICCollSequence_return();
        retval.start = input.LT(1);

        XQDTCommonTree root_0 = null;

        CommonToken kc=null;
        CommonToken DOLLAR654=null;
        XQueryParser.p_QName_return p_QName655 = null;

        XQueryParser.p_ExprSingle_return p_ExprSingle656 = null;


        XQDTCommonTree kc_tree=null;
        XQDTCommonTree DOLLAR654_tree=null;

        try {
            // XQueryParser.g:1531:9: ( DOLLAR p_QName kc= CHECK p_ExprSingle )
            // XQueryParser.g:1531:11: DOLLAR p_QName kc= CHECK p_ExprSingle
            {
            root_0 = (XQDTCommonTree)adaptor.nil();

            DOLLAR654=(CommonToken)match(input,DOLLAR,FOLLOW_DOLLAR_in_p_ICCollSequence13684); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            DOLLAR654_tree = (XQDTCommonTree)adaptor.create(DOLLAR654);
            adaptor.addChild(root_0, DOLLAR654_tree);
            }
            pushFollow(FOLLOW_p_QName_in_p_ICCollSequence13686);
            p_QName655=p_QName();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, p_QName655.getTree());
            kc=(CommonToken)match(input,CHECK,FOLLOW_CHECK_in_p_ICCollSequence13690); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            kc_tree = (XQDTCommonTree)adaptor.create(kc);
            adaptor.addChild(root_0, kc_tree);
            }
            if ( state.backtracking==0 ) {
              ak(kc);
            }
            pushFollow(FOLLOW_p_ExprSingle_in_p_ICCollSequence13694);
            p_ExprSingle656=p_ExprSingle();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, p_ExprSingle656.getTree());

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (XQDTCommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (XQDTCommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "p_ICCollSequence"

    public static class p_ICCollSequenceUnique_return extends ParserRuleReturnScope {
        XQDTCommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "p_ICCollSequenceUnique"
    // XQueryParser.g:1534:1: p_ICCollSequenceUnique : k+= NODE k+= DOLLAR p_QName k+= CHECK k+= UNIQUE k+= KEY p_PathExpr ;
    public final XQueryParser.p_ICCollSequenceUnique_return p_ICCollSequenceUnique() throws RecognitionException {
        XQueryParser.p_ICCollSequenceUnique_return retval = new XQueryParser.p_ICCollSequenceUnique_return();
        retval.start = input.LT(1);

        XQDTCommonTree root_0 = null;

        CommonToken k=null;
        List list_k=null;
        XQueryParser.p_QName_return p_QName657 = null;

        XQueryParser.p_PathExpr_return p_PathExpr658 = null;


        XQDTCommonTree k_tree=null;

        try {
            // XQueryParser.g:1535:9: (k+= NODE k+= DOLLAR p_QName k+= CHECK k+= UNIQUE k+= KEY p_PathExpr )
            // XQueryParser.g:1535:11: k+= NODE k+= DOLLAR p_QName k+= CHECK k+= UNIQUE k+= KEY p_PathExpr
            {
            root_0 = (XQDTCommonTree)adaptor.nil();

            k=(CommonToken)match(input,NODE,FOLLOW_NODE_in_p_ICCollSequenceUnique13721); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            k_tree = (XQDTCommonTree)adaptor.create(k);
            adaptor.addChild(root_0, k_tree);
            }
            if (list_k==null) list_k=new ArrayList();
            list_k.add(k);

            k=(CommonToken)match(input,DOLLAR,FOLLOW_DOLLAR_in_p_ICCollSequenceUnique13725); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            k_tree = (XQDTCommonTree)adaptor.create(k);
            adaptor.addChild(root_0, k_tree);
            }
            if (list_k==null) list_k=new ArrayList();
            list_k.add(k);

            pushFollow(FOLLOW_p_QName_in_p_ICCollSequenceUnique13727);
            p_QName657=p_QName();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, p_QName657.getTree());
            k=(CommonToken)match(input,CHECK,FOLLOW_CHECK_in_p_ICCollSequenceUnique13731); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            k_tree = (XQDTCommonTree)adaptor.create(k);
            adaptor.addChild(root_0, k_tree);
            }
            if (list_k==null) list_k=new ArrayList();
            list_k.add(k);

            k=(CommonToken)match(input,UNIQUE,FOLLOW_UNIQUE_in_p_ICCollSequenceUnique13735); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            k_tree = (XQDTCommonTree)adaptor.create(k);
            adaptor.addChild(root_0, k_tree);
            }
            if (list_k==null) list_k=new ArrayList();
            list_k.add(k);

            k=(CommonToken)match(input,KEY,FOLLOW_KEY_in_p_ICCollSequenceUnique13739); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            k_tree = (XQDTCommonTree)adaptor.create(k);
            adaptor.addChild(root_0, k_tree);
            }
            if (list_k==null) list_k=new ArrayList();
            list_k.add(k);

            pushFollow(FOLLOW_p_PathExpr_in_p_ICCollSequenceUnique13741);
            p_PathExpr658=p_PathExpr();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, p_PathExpr658.getTree());
            if ( state.backtracking==0 ) {
              ak(list_k);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (XQDTCommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (XQDTCommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "p_ICCollSequenceUnique"

    public static class p_ICCollNode_return extends ParserRuleReturnScope {
        XQDTCommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "p_ICCollNode"
    // XQueryParser.g:1538:1: p_ICCollNode : k+= FOREACH k+= NODE DOLLAR p_QName k+= CHECK p_ExprSingle ;
    public final XQueryParser.p_ICCollNode_return p_ICCollNode() throws RecognitionException {
        XQueryParser.p_ICCollNode_return retval = new XQueryParser.p_ICCollNode_return();
        retval.start = input.LT(1);

        XQDTCommonTree root_0 = null;

        CommonToken DOLLAR659=null;
        CommonToken k=null;
        List list_k=null;
        XQueryParser.p_QName_return p_QName660 = null;

        XQueryParser.p_ExprSingle_return p_ExprSingle661 = null;


        XQDTCommonTree DOLLAR659_tree=null;
        XQDTCommonTree k_tree=null;

        try {
            // XQueryParser.g:1539:9: (k+= FOREACH k+= NODE DOLLAR p_QName k+= CHECK p_ExprSingle )
            // XQueryParser.g:1539:11: k+= FOREACH k+= NODE DOLLAR p_QName k+= CHECK p_ExprSingle
            {
            root_0 = (XQDTCommonTree)adaptor.nil();

            k=(CommonToken)match(input,FOREACH,FOLLOW_FOREACH_in_p_ICCollNode13770); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            k_tree = (XQDTCommonTree)adaptor.create(k);
            adaptor.addChild(root_0, k_tree);
            }
            if (list_k==null) list_k=new ArrayList();
            list_k.add(k);

            k=(CommonToken)match(input,NODE,FOLLOW_NODE_in_p_ICCollNode13774); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            k_tree = (XQDTCommonTree)adaptor.create(k);
            adaptor.addChild(root_0, k_tree);
            }
            if (list_k==null) list_k=new ArrayList();
            list_k.add(k);

            DOLLAR659=(CommonToken)match(input,DOLLAR,FOLLOW_DOLLAR_in_p_ICCollNode13776); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            DOLLAR659_tree = (XQDTCommonTree)adaptor.create(DOLLAR659);
            adaptor.addChild(root_0, DOLLAR659_tree);
            }
            pushFollow(FOLLOW_p_QName_in_p_ICCollNode13778);
            p_QName660=p_QName();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, p_QName660.getTree());
            k=(CommonToken)match(input,CHECK,FOLLOW_CHECK_in_p_ICCollNode13782); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            k_tree = (XQDTCommonTree)adaptor.create(k);
            adaptor.addChild(root_0, k_tree);
            }
            if (list_k==null) list_k=new ArrayList();
            list_k.add(k);

            pushFollow(FOLLOW_p_ExprSingle_in_p_ICCollNode13784);
            p_ExprSingle661=p_ExprSingle();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, p_ExprSingle661.getTree());
            if ( state.backtracking==0 ) {
              ak(list_k);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (XQDTCommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (XQDTCommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "p_ICCollNode"

    public static class p_ICForeignKey_return extends ParserRuleReturnScope {
        XQDTCommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "p_ICForeignKey"
    // XQueryParser.g:1542:1: p_ICForeignKey : k+= FOREIGN k+= KEY p_ICForeignKeySource p_ICForeignKeyTarget ;
    public final XQueryParser.p_ICForeignKey_return p_ICForeignKey() throws RecognitionException {
        XQueryParser.p_ICForeignKey_return retval = new XQueryParser.p_ICForeignKey_return();
        retval.start = input.LT(1);

        XQDTCommonTree root_0 = null;

        CommonToken k=null;
        List list_k=null;
        XQueryParser.p_ICForeignKeySource_return p_ICForeignKeySource662 = null;

        XQueryParser.p_ICForeignKeyTarget_return p_ICForeignKeyTarget663 = null;


        XQDTCommonTree k_tree=null;

        try {
            // XQueryParser.g:1543:9: (k+= FOREIGN k+= KEY p_ICForeignKeySource p_ICForeignKeyTarget )
            // XQueryParser.g:1543:11: k+= FOREIGN k+= KEY p_ICForeignKeySource p_ICForeignKeyTarget
            {
            root_0 = (XQDTCommonTree)adaptor.nil();

            k=(CommonToken)match(input,FOREIGN,FOLLOW_FOREIGN_in_p_ICForeignKey13813); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            k_tree = (XQDTCommonTree)adaptor.create(k);
            adaptor.addChild(root_0, k_tree);
            }
            if (list_k==null) list_k=new ArrayList();
            list_k.add(k);

            k=(CommonToken)match(input,KEY,FOLLOW_KEY_in_p_ICForeignKey13817); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            k_tree = (XQDTCommonTree)adaptor.create(k);
            adaptor.addChild(root_0, k_tree);
            }
            if (list_k==null) list_k=new ArrayList();
            list_k.add(k);

            pushFollow(FOLLOW_p_ICForeignKeySource_in_p_ICForeignKey13819);
            p_ICForeignKeySource662=p_ICForeignKeySource();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, p_ICForeignKeySource662.getTree());
            pushFollow(FOLLOW_p_ICForeignKeyTarget_in_p_ICForeignKey13821);
            p_ICForeignKeyTarget663=p_ICForeignKeyTarget();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, p_ICForeignKeyTarget663.getTree());
            if ( state.backtracking==0 ) {
              ak(list_k);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (XQDTCommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (XQDTCommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "p_ICForeignKey"

    public static class p_ICForeignKeySource_return extends ParserRuleReturnScope {
        XQDTCommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "p_ICForeignKeySource"
    // XQueryParser.g:1546:1: p_ICForeignKeySource : kf= FROM p_ICForeignKeyValues ;
    public final XQueryParser.p_ICForeignKeySource_return p_ICForeignKeySource() throws RecognitionException {
        XQueryParser.p_ICForeignKeySource_return retval = new XQueryParser.p_ICForeignKeySource_return();
        retval.start = input.LT(1);

        XQDTCommonTree root_0 = null;

        CommonToken kf=null;
        XQueryParser.p_ICForeignKeyValues_return p_ICForeignKeyValues664 = null;


        XQDTCommonTree kf_tree=null;

        try {
            // XQueryParser.g:1547:9: (kf= FROM p_ICForeignKeyValues )
            // XQueryParser.g:1547:11: kf= FROM p_ICForeignKeyValues
            {
            root_0 = (XQDTCommonTree)adaptor.nil();

            kf=(CommonToken)match(input,FROM,FOLLOW_FROM_in_p_ICForeignKeySource13850); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            kf_tree = (XQDTCommonTree)adaptor.create(kf);
            adaptor.addChild(root_0, kf_tree);
            }
            if ( state.backtracking==0 ) {
              ak(kf);
            }
            pushFollow(FOLLOW_p_ICForeignKeyValues_in_p_ICForeignKeySource13854);
            p_ICForeignKeyValues664=p_ICForeignKeyValues();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, p_ICForeignKeyValues664.getTree());

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (XQDTCommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (XQDTCommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "p_ICForeignKeySource"

    public static class p_ICForeignKeyTarget_return extends ParserRuleReturnScope {
        XQDTCommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "p_ICForeignKeyTarget"
    // XQueryParser.g:1550:1: p_ICForeignKeyTarget : kt= TO p_ICForeignKeyValues ;
    public final XQueryParser.p_ICForeignKeyTarget_return p_ICForeignKeyTarget() throws RecognitionException {
        XQueryParser.p_ICForeignKeyTarget_return retval = new XQueryParser.p_ICForeignKeyTarget_return();
        retval.start = input.LT(1);

        XQDTCommonTree root_0 = null;

        CommonToken kt=null;
        XQueryParser.p_ICForeignKeyValues_return p_ICForeignKeyValues665 = null;


        XQDTCommonTree kt_tree=null;

        try {
            // XQueryParser.g:1551:9: (kt= TO p_ICForeignKeyValues )
            // XQueryParser.g:1551:11: kt= TO p_ICForeignKeyValues
            {
            root_0 = (XQDTCommonTree)adaptor.nil();

            kt=(CommonToken)match(input,TO,FOLLOW_TO_in_p_ICForeignKeyTarget13881); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            kt_tree = (XQDTCommonTree)adaptor.create(kt);
            adaptor.addChild(root_0, kt_tree);
            }
            if ( state.backtracking==0 ) {
              ak(kt);
            }
            pushFollow(FOLLOW_p_ICForeignKeyValues_in_p_ICForeignKeyTarget13885);
            p_ICForeignKeyValues665=p_ICForeignKeyValues();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, p_ICForeignKeyValues665.getTree());

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (XQDTCommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (XQDTCommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "p_ICForeignKeyTarget"

    public static class p_ICForeignKeyValues_return extends ParserRuleReturnScope {
        XQDTCommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "p_ICForeignKeyValues"
    // XQueryParser.g:1554:1: p_ICForeignKeyValues : k+= COLLECTION p_QName k+= NODE DOLLAR p_QName k+= KEY p_PathExpr ;
    public final XQueryParser.p_ICForeignKeyValues_return p_ICForeignKeyValues() throws RecognitionException {
        XQueryParser.p_ICForeignKeyValues_return retval = new XQueryParser.p_ICForeignKeyValues_return();
        retval.start = input.LT(1);

        XQDTCommonTree root_0 = null;

        CommonToken DOLLAR667=null;
        CommonToken k=null;
        List list_k=null;
        XQueryParser.p_QName_return p_QName666 = null;

        XQueryParser.p_QName_return p_QName668 = null;

        XQueryParser.p_PathExpr_return p_PathExpr669 = null;


        XQDTCommonTree DOLLAR667_tree=null;
        XQDTCommonTree k_tree=null;

        try {
            // XQueryParser.g:1555:9: (k+= COLLECTION p_QName k+= NODE DOLLAR p_QName k+= KEY p_PathExpr )
            // XQueryParser.g:1555:11: k+= COLLECTION p_QName k+= NODE DOLLAR p_QName k+= KEY p_PathExpr
            {
            root_0 = (XQDTCommonTree)adaptor.nil();

            k=(CommonToken)match(input,COLLECTION,FOLLOW_COLLECTION_in_p_ICForeignKeyValues13912); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            k_tree = (XQDTCommonTree)adaptor.create(k);
            adaptor.addChild(root_0, k_tree);
            }
            if (list_k==null) list_k=new ArrayList();
            list_k.add(k);

            pushFollow(FOLLOW_p_QName_in_p_ICForeignKeyValues13914);
            p_QName666=p_QName();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, p_QName666.getTree());
            k=(CommonToken)match(input,NODE,FOLLOW_NODE_in_p_ICForeignKeyValues13918); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            k_tree = (XQDTCommonTree)adaptor.create(k);
            adaptor.addChild(root_0, k_tree);
            }
            if (list_k==null) list_k=new ArrayList();
            list_k.add(k);

            DOLLAR667=(CommonToken)match(input,DOLLAR,FOLLOW_DOLLAR_in_p_ICForeignKeyValues13920); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            DOLLAR667_tree = (XQDTCommonTree)adaptor.create(DOLLAR667);
            adaptor.addChild(root_0, DOLLAR667_tree);
            }
            pushFollow(FOLLOW_p_QName_in_p_ICForeignKeyValues13922);
            p_QName668=p_QName();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, p_QName668.getTree());
            k=(CommonToken)match(input,KEY,FOLLOW_KEY_in_p_ICForeignKeyValues13926); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            k_tree = (XQDTCommonTree)adaptor.create(k);
            adaptor.addChild(root_0, k_tree);
            }
            if (list_k==null) list_k=new ArrayList();
            list_k.add(k);

            pushFollow(FOLLOW_p_PathExpr_in_p_ICForeignKeyValues13928);
            p_PathExpr669=p_PathExpr();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, p_PathExpr669.getTree());
            if ( state.backtracking==0 ) {
              ak(list_k);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (XQDTCommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (XQDTCommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "p_ICForeignKeyValues"

    // $ANTLR start synpred1_XQueryParser
    public final void synpred1_XQueryParser_fragment() throws RecognitionException {   
        // XQueryParser.g:666:11: ( SLASH p_RelativePathExpr )
        // XQueryParser.g:666:12: SLASH p_RelativePathExpr
        {
        match(input,SLASH,FOLLOW_SLASH_in_synpred1_XQueryParser5973); if (state.failed) return ;
        pushFollow(FOLLOW_p_RelativePathExpr_in_synpred1_XQueryParser5975);
        p_RelativePathExpr();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred1_XQueryParser

    // $ANTLR start synpred2_XQueryParser
    public final void synpred2_XQueryParser_fragment() throws RecognitionException {   
        // XQueryParser.g:1020:26: ( p_OccurrenceIndicator )
        // XQueryParser.g:1020:27: p_OccurrenceIndicator
        {
        pushFollow(FOLLOW_p_OccurrenceIndicator_in_synpred2_XQueryParser8645);
        p_OccurrenceIndicator();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred2_XQueryParser

    // $ANTLR start synpred3_XQueryParser
    public final void synpred3_XQueryParser_fragment() throws RecognitionException {   
        // XQueryParser.g:1481:41: ( p_OccurrenceIndicator )
        // XQueryParser.g:1481:42: p_OccurrenceIndicator
        {
        pushFollow(FOLLOW_p_OccurrenceIndicator_in_synpred3_XQueryParser13189);
        p_OccurrenceIndicator();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred3_XQueryParser

    // Delegated rules

    public final boolean synpred3_XQueryParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred3_XQueryParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred1_XQueryParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred1_XQueryParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred2_XQueryParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred2_XQueryParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }


    protected DFA6 dfa6 = new DFA6(this);
    protected DFA7 dfa7 = new DFA7(this);
    protected DFA8 dfa8 = new DFA8(this);
    protected DFA49 dfa49 = new DFA49(this);
    protected DFA103 dfa103 = new DFA103(this);
    protected DFA110 dfa110 = new DFA110(this);
    protected DFA112 dfa112 = new DFA112(this);
    protected DFA114 dfa114 = new DFA114(this);
    protected DFA119 dfa119 = new DFA119(this);
    protected DFA124 dfa124 = new DFA124(this);
    protected DFA154 dfa154 = new DFA154(this);
    protected DFA156 dfa156 = new DFA156(this);
    static final String DFA6_eotS =
        "\17\uffff";
    static final String DFA6_eofS =
        "\1\2\1\14\1\uffff\1\16\13\uffff";
    static final String DFA6_minS =
        "\1\20\1\22\1\uffff\1\22\13\uffff";
    static final String DFA6_maxS =
        "\1\u0136\1\u00e0\1\uffff\1\u00e0\13\uffff";
    static final String DFA6_acceptS =
        "\2\uffff\1\2\1\uffff\3\2\3\1\5\2";
    static final String DFA6_specialS =
        "\1\uffff\1\0\15\uffff}>";
    static final String[] DFA6_transitionS = {
            "\22\2\1\1\31\2\1\3\142\2\1\uffff\24\2\1\uffff\15\2\1\uffff"+
            "\1\2\12\uffff\4\2\5\uffff\4\2\14\uffff\1\2\2\uffff\2\2\2\uffff"+
            "\1\2\6\uffff\6\2\73\uffff\1\2",
            "\1\14\4\uffff\2\7\2\uffff\2\14\3\uffff\1\7\1\11\1\uffff\1"+
            "\7\3\uffff\1\14\7\uffff\1\14\1\uffff\1\14\4\uffff\1\16\1\14"+
            "\1\uffff\2\14\4\uffff\3\14\2\uffff\1\14\2\uffff\2\14\1\uffff"+
            "\1\11\1\14\4\uffff\1\5\1\14\1\uffff\1\15\1\7\21\uffff\2\14\1"+
            "\uffff\1\14\1\15\1\uffff\1\12\4\uffff\1\2\45\uffff\1\10\1\uffff"+
            "\1\16\1\13\2\uffff\1\12\2\uffff\1\4\1\uffff\1\16\3\uffff\1\15"+
            "\1\13\1\uffff\1\15\1\uffff\1\15\4\uffff\1\13\1\6\2\uffff\1\13"+
            "\1\15\1\13\1\uffff\1\15\2\uffff\1\13\1\uffff\1\12\3\uffff\1"+
            "\14\4\uffff\1\14\1\uffff\1\14\1\uffff\1\14\1\uffff\1\14\1\uffff"+
            "\13\14\2\uffff\1\14\3\uffff\2\14",
            "",
            "\1\16\10\uffff\2\16\12\uffff\1\16\7\uffff\1\16\1\uffff\1\16"+
            "\5\uffff\1\16\1\uffff\2\16\4\uffff\3\16\2\uffff\1\16\2\uffff"+
            "\2\16\1\11\1\uffff\1\16\5\uffff\1\16\12\uffff\1\11\11\uffff"+
            "\2\16\1\uffff\1\16\127\uffff\1\16\4\uffff\1\16\1\uffff\1\16"+
            "\1\uffff\1\16\1\uffff\1\16\1\uffff\13\16\2\uffff\1\14\3\uffff"+
            "\2\16",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };

    static final short[] DFA6_eot = DFA.unpackEncodedString(DFA6_eotS);
    static final short[] DFA6_eof = DFA.unpackEncodedString(DFA6_eofS);
    static final char[] DFA6_min = DFA.unpackEncodedStringToUnsignedChars(DFA6_minS);
    static final char[] DFA6_max = DFA.unpackEncodedStringToUnsignedChars(DFA6_maxS);
    static final short[] DFA6_accept = DFA.unpackEncodedString(DFA6_acceptS);
    static final short[] DFA6_special = DFA.unpackEncodedString(DFA6_specialS);
    static final short[][] DFA6_transition;

    static {
        int numStates = DFA6_transitionS.length;
        DFA6_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA6_transition[i] = DFA.unpackEncodedString(DFA6_transitionS[i]);
        }
    }

    class DFA6 extends DFA {

        public DFA6(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 6;
            this.eot = DFA6_eot;
            this.eof = DFA6_eof;
            this.min = DFA6_min;
            this.max = DFA6_max;
            this.accept = DFA6_accept;
            this.special = DFA6_special;
            this.transition = DFA6_transition;
        }
        public String getDescription() {
            return "()* loopback of 165:11: ( (dnd+= pm_DefaultNamespaceDecl | s+= p_Setter | nd+= pm_NamespaceDecl | i+= p_Import ) )*";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA6_1 = input.LA(1);

                         
                        int index6_1 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA6_1==CONTEXT) ) {s = 2;}

                        else if ( (LA6_1==SEQUENTIAL) && ((lc(XQS)))) {s = 4;}

                        else if ( (LA6_1==OPTION) ) {s = 5;}

                        else if ( (LA6_1==INTEGRITY) && ((lc(ZORBA)))) {s = 6;}

                        else if ( ((LA6_1>=BASE_URI && LA6_1<=BOUNDARY_SPACE)||LA6_1==CONSTRUCTION||LA6_1==DEFAULT||LA6_1==ORDERING) ) {s = 7;}

                        else if ( (LA6_1==REVALIDATION) && ((lc(XQU)))) {s = 8;}

                        else if ( (LA6_1==COPY_NAMESPACES||LA6_1==NAMESPACE) ) {s = 9;}

                        else if ( (LA6_1==VARIABLE||LA6_1==CONSTANT||LA6_1==PRIVATE) ) {s = 10;}

                        else if ( (LA6_1==VALUE||LA6_1==AUTOMATICALLY||LA6_1==INDEX||LA6_1==MANUALLY||LA6_1==NON||LA6_1==UNIQUE) && ((lc(ZORBA)))) {s = 11;}

                        else if ( (LA6_1==EOF||LA6_1==AND||(LA6_1>=CAST && LA6_1<=CASTABLE)||LA6_1==DIV||LA6_1==EQ||LA6_1==EXCEPT||LA6_1==GE||(LA6_1>=GT && LA6_1<=IDIV)||(LA6_1>=INSTANCE && LA6_1<=IS)||LA6_1==LE||(LA6_1>=LT && LA6_1<=MOD)||LA6_1==NE||LA6_1==OR||(LA6_1>=TO && LA6_1<=TREAT)||LA6_1==UNION||LA6_1==LPAREN||LA6_1==LSQUARE||LA6_1==EQUAL||LA6_1==NOTEQUAL||LA6_1==COMMA||(LA6_1>=STAR && LA6_1<=SLASH_SLASH)||LA6_1==COLON||(LA6_1>=SEMICOLON && LA6_1<=VBAR)) ) {s = 12;}

                        else if ( (LA6_1==ORDERED||LA6_1==UNORDERED||LA6_1==APPEND_ONLY||LA6_1==COLLECTION||LA6_1==CONST||LA6_1==MUTABLE||LA6_1==QUEUE) && ((lc(ZORBA)))) {s = 13;}

                        else if ( (LA6_1==FUNCTION||LA6_1==UPDATING||LA6_1==SIMPLE) ) {s = 14;}

                         
                        input.seek(index6_1);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 6, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static final String DFA7_eotS =
        "\14\uffff";
    static final String DFA7_eofS =
        "\1\1\1\uffff\1\1\11\uffff";
    static final String DFA7_minS =
        "\1\20\1\uffff\1\22\4\uffff\1\66\4\uffff";
    static final String DFA7_maxS =
        "\1\u0136\1\uffff\1\u00e0\4\uffff\1\u00a2\4\uffff";
    static final String DFA7_acceptS =
        "\1\uffff\1\10\1\uffff\1\2\1\3\1\4\1\7\1\uffff\1\3\1\5\1\1\1\6";
    static final String DFA7_specialS =
        "\2\uffff\1\0\11\uffff}>";
    static final String[] DFA7_transitionS = {
            "\22\1\1\2\174\1\1\uffff\24\1\1\uffff\15\1\1\uffff\1\1\12\uffff"+
            "\4\1\5\uffff\4\1\14\uffff\1\1\2\uffff\2\1\2\uffff\1\1\6\uffff"+
            "\6\1\73\uffff\1\1",
            "",
            "\1\1\10\uffff\2\1\12\uffff\1\1\7\uffff\1\1\1\uffff\1\1\4\uffff"+
            "\1\10\1\1\1\uffff\2\1\4\uffff\3\1\2\uffff\1\1\2\uffff\2\1\2"+
            "\uffff\1\1\4\uffff\1\5\1\1\1\uffff\1\11\22\uffff\2\1\1\uffff"+
            "\1\1\1\11\1\uffff\1\12\4\uffff\1\3\47\uffff\1\10\1\13\2\uffff"+
            "\1\12\2\uffff\1\4\1\uffff\1\10\3\uffff\1\11\1\13\1\uffff\1\11"+
            "\1\uffff\1\11\4\uffff\1\13\1\6\2\uffff\1\13\1\11\1\13\1\uffff"+
            "\1\11\2\uffff\1\13\1\uffff\1\7\3\uffff\1\1\4\uffff\1\1\1\uffff"+
            "\1\1\1\uffff\1\1\1\uffff\1\1\1\uffff\13\1\2\uffff\1\1\3\uffff"+
            "\2\1",
            "",
            "",
            "",
            "",
            "\1\10\65\uffff\1\12\54\uffff\1\10\3\uffff\1\12\4\uffff\1\10",
            "",
            "",
            "",
            ""
    };

    static final short[] DFA7_eot = DFA.unpackEncodedString(DFA7_eotS);
    static final short[] DFA7_eof = DFA.unpackEncodedString(DFA7_eofS);
    static final char[] DFA7_min = DFA.unpackEncodedStringToUnsignedChars(DFA7_minS);
    static final char[] DFA7_max = DFA.unpackEncodedStringToUnsignedChars(DFA7_maxS);
    static final short[] DFA7_accept = DFA.unpackEncodedString(DFA7_acceptS);
    static final short[] DFA7_special = DFA.unpackEncodedString(DFA7_specialS);
    static final short[][] DFA7_transition;

    static {
        int numStates = DFA7_transitionS.length;
        DFA7_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA7_transition[i] = DFA.unpackEncodedString(DFA7_transitionS[i]);
        }
    }

    class DFA7 extends DFA {

        public DFA7(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 7;
            this.eot = DFA7_eot;
            this.eof = DFA7_eof;
            this.min = DFA7_min;
            this.max = DFA7_max;
            this.accept = DFA7_accept;
            this.special = DFA7_special;
            this.transition = DFA7_transition;
        }
        public String getDescription() {
            return "()* loopback of 180:11: ( pm_VarDecl | pm_ContextItemDecl | pm_FunctionDecl | pm_OptionDecl | {...}? => p_CollectionDecl | {...}? => p_IndexDecl | {...}? => p_ICDecl )*";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA7_2 = input.LA(1);

                         
                        int index7_2 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA7_2==CONTEXT) ) {s = 3;}

                        else if ( (LA7_2==SEQUENTIAL) && ((lc(XQS)))) {s = 4;}

                        else if ( (LA7_2==OPTION) ) {s = 5;}

                        else if ( (LA7_2==INTEGRITY) && ((lc(ZORBA)))) {s = 6;}

                        else if ( (LA7_2==PRIVATE) ) {s = 7;}

                        else if ( (LA7_2==FUNCTION||LA7_2==UPDATING||LA7_2==SIMPLE) ) {s = 8;}

                        else if ( (LA7_2==EOF||LA7_2==AND||(LA7_2>=CAST && LA7_2<=CASTABLE)||LA7_2==DIV||LA7_2==EQ||LA7_2==EXCEPT||LA7_2==GE||(LA7_2>=GT && LA7_2<=IDIV)||(LA7_2>=INSTANCE && LA7_2<=IS)||LA7_2==LE||(LA7_2>=LT && LA7_2<=MOD)||LA7_2==NE||LA7_2==OR||(LA7_2>=TO && LA7_2<=TREAT)||LA7_2==UNION||LA7_2==LPAREN||LA7_2==LSQUARE||LA7_2==EQUAL||LA7_2==NOTEQUAL||LA7_2==COMMA||(LA7_2>=STAR && LA7_2<=SLASH_SLASH)||LA7_2==COLON||(LA7_2>=SEMICOLON && LA7_2<=VBAR)) ) {s = 1;}

                        else if ( (LA7_2==ORDERED||LA7_2==UNORDERED||LA7_2==APPEND_ONLY||LA7_2==COLLECTION||LA7_2==CONST||LA7_2==MUTABLE||LA7_2==QUEUE) && ((lc(ZORBA)))) {s = 9;}

                        else if ( (LA7_2==VARIABLE||LA7_2==CONSTANT) ) {s = 10;}

                        else if ( (LA7_2==VALUE||LA7_2==AUTOMATICALLY||LA7_2==INDEX||LA7_2==MANUALLY||LA7_2==NON||LA7_2==UNIQUE) && ((lc(ZORBA)))) {s = 11;}

                         
                        input.seek(index7_2);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 7, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static final String DFA8_eotS =
        "\13\uffff";
    static final String DFA8_eofS =
        "\13\uffff";
    static final String DFA8_minS =
        "\1\42\1\27\1\uffff\1\36\7\uffff";
    static final String DFA8_maxS =
        "\1\42\1\u0097\1\uffff\1\122\7\uffff";
    static final String DFA8_acceptS =
        "\2\uffff\1\1\1\uffff\1\3\1\4\1\5\1\7\1\10\1\2\1\6";
    static final String DFA8_specialS =
        "\1\uffff\1\0\11\uffff}>";
    static final String[] DFA8_transitionS = {
            "\1\1",
            "\1\4\1\2\7\uffff\1\5\1\10\1\uffff\1\3\60\uffff\1\6\102\uffff"+
            "\1\7",
            "",
            "\1\11\63\uffff\1\12",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };

    static final short[] DFA8_eot = DFA.unpackEncodedString(DFA8_eotS);
    static final short[] DFA8_eof = DFA.unpackEncodedString(DFA8_eofS);
    static final char[] DFA8_min = DFA.unpackEncodedStringToUnsignedChars(DFA8_minS);
    static final char[] DFA8_max = DFA.unpackEncodedStringToUnsignedChars(DFA8_maxS);
    static final short[] DFA8_accept = DFA.unpackEncodedString(DFA8_acceptS);
    static final short[] DFA8_special = DFA.unpackEncodedString(DFA8_specialS);
    static final short[][] DFA8_transition;

    static {
        int numStates = DFA8_transitionS.length;
        DFA8_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA8_transition[i] = DFA.unpackEncodedString(DFA8_transitionS[i]);
        }
    }

    class DFA8 extends DFA {

        public DFA8(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 8;
            this.eot = DFA8_eot;
            this.eof = DFA8_eof;
            this.min = DFA8_min;
            this.max = DFA8_max;
            this.accept = DFA8_accept;
            this.special = DFA8_special;
            this.transition = DFA8_transition;
        }
        public String getDescription() {
            return "188:1: p_Setter : ( pm_BoundarySpaceDecl | pm_DefaultCollationDecl | pm_BaseURIDecl | pm_ConstructionDecl | pm_OrderingModeDecl | pm_EmptyOrderDecl | {...}? => pm_RevalidationDecl | pm_CopyNamespacesDecl );";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA8_1 = input.LA(1);

                         
                        int index8_1 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA8_1==BOUNDARY_SPACE) ) {s = 2;}

                        else if ( (LA8_1==DEFAULT) ) {s = 3;}

                        else if ( (LA8_1==BASE_URI) ) {s = 4;}

                        else if ( (LA8_1==CONSTRUCTION) ) {s = 5;}

                        else if ( (LA8_1==ORDERING) ) {s = 6;}

                        else if ( (LA8_1==REVALIDATION) && ((lc(XQU)))) {s = 7;}

                        else if ( (LA8_1==COPY_NAMESPACES) ) {s = 8;}

                         
                        input.seek(index8_1);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 8, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static final String DFA49_eotS =
        "\43\uffff";
    static final String DFA49_eofS =
        "\1\uffff\22\23\20\uffff";
    static final String DFA49_minS =
        "\1\20\22\22\20\uffff";
    static final String DFA49_maxS =
        "\1\u0136\22\u00e0\20\uffff";
    static final String DFA49_acceptS =
        "\23\uffff\1\20\1\1\1\2\1\3\1\4\1\5\1\6\1\7\1\10\1\11\1\12\1\13"+
        "\1\14\1\15\1\16\1\17";
    static final String DFA49_specialS =
        "\10\uffff\1\12\1\7\1\5\1\0\1\3\1\4\1\2\1\10\1\6\1\1\1\11\20\uffff}>";
    static final String[] DFA49_transitionS = {
            "\40\23\1\4\4\23\1\1\5\23\1\6\12\23\1\2\31\23\1\3\7\23\1\5\35"+
            "\23\1\7\6\23\1\16\1\13\1\23\1\12\4\23\1\14\1\15\5\23\1\17\1"+
            "\23\1\21\1\uffff\1\23\1\20\1\23\1\22\1\11\1\10\16\23\1\uffff"+
            "\15\23\1\uffff\1\23\12\uffff\4\23\5\uffff\4\23\14\uffff\1\23"+
            "\2\uffff\2\23\2\uffff\1\23\6\uffff\6\23\73\uffff\1\23",
            "\3\23\5\uffff\3\23\1\uffff\1\23\4\uffff\1\23\2\uffff\2\23"+
            "\3\uffff\2\23\2\uffff\1\23\1\uffff\1\23\3\uffff\1\23\1\uffff"+
            "\1\23\1\uffff\2\23\4\uffff\3\23\2\uffff\1\23\1\uffff\3\23\2"+
            "\uffff\1\23\5\uffff\2\23\7\uffff\2\23\5\uffff\1\23\4\uffff\2"+
            "\23\1\uffff\1\23\4\uffff\1\23\3\uffff\1\23\3\uffff\2\23\6\uffff"+
            "\1\23\5\uffff\1\24\1\23\1\uffff\1\24\3\uffff\2\23\4\uffff\1"+
            "\23\1\uffff\1\23\7\uffff\1\23\45\uffff\2\23\1\24\1\uffff\4\23"+
            "\1\uffff\1\23\1\uffff\1\23\1\uffff\13\23\2\uffff\1\23\3\uffff"+
            "\2\23",
            "\3\23\5\uffff\3\23\1\uffff\1\23\4\uffff\1\23\2\uffff\2\23"+
            "\3\uffff\2\23\2\uffff\1\23\1\uffff\1\23\3\uffff\1\23\1\uffff"+
            "\1\23\1\uffff\2\23\4\uffff\3\23\2\uffff\1\23\1\uffff\3\23\2"+
            "\uffff\1\23\5\uffff\2\23\7\uffff\2\23\5\uffff\1\23\4\uffff\2"+
            "\23\1\uffff\1\23\4\uffff\1\23\3\uffff\1\23\3\uffff\2\23\6\uffff"+
            "\1\23\6\uffff\1\23\5\uffff\2\23\4\uffff\1\23\1\uffff\1\23\7"+
            "\uffff\1\23\45\uffff\2\23\1\24\1\uffff\4\23\1\uffff\1\23\1\uffff"+
            "\1\23\1\uffff\13\23\2\uffff\1\23\3\uffff\2\23",
            "\3\23\5\uffff\3\23\1\uffff\1\23\4\uffff\1\23\2\uffff\2\23"+
            "\3\uffff\2\23\2\uffff\1\23\1\uffff\1\23\3\uffff\1\23\1\uffff"+
            "\1\23\1\uffff\2\23\4\uffff\3\23\2\uffff\1\23\1\uffff\3\23\2"+
            "\uffff\1\23\5\uffff\2\23\7\uffff\2\23\5\uffff\1\23\4\uffff\2"+
            "\23\1\uffff\1\23\4\uffff\1\23\3\uffff\1\23\3\uffff\2\23\6\uffff"+
            "\1\23\6\uffff\1\23\5\uffff\2\23\4\uffff\1\23\1\uffff\1\23\7"+
            "\uffff\1\23\45\uffff\2\23\1\25\1\uffff\4\23\1\uffff\1\23\1\uffff"+
            "\1\23\1\uffff\13\23\2\uffff\1\23\3\uffff\2\23",
            "\3\23\5\uffff\3\23\1\uffff\1\23\4\uffff\1\23\2\uffff\2\23"+
            "\3\uffff\2\23\2\uffff\1\23\1\uffff\1\23\3\uffff\1\23\1\uffff"+
            "\1\23\1\uffff\2\23\4\uffff\3\23\2\uffff\1\23\1\uffff\3\23\2"+
            "\uffff\1\23\5\uffff\2\23\7\uffff\2\23\5\uffff\1\23\4\uffff\2"+
            "\23\1\uffff\1\23\4\uffff\1\23\3\uffff\1\23\3\uffff\2\23\6\uffff"+
            "\1\23\6\uffff\1\23\5\uffff\2\23\4\uffff\1\23\1\uffff\1\23\7"+
            "\uffff\1\23\45\uffff\2\23\1\25\1\uffff\4\23\1\uffff\1\23\1\uffff"+
            "\1\23\1\uffff\13\23\2\uffff\1\23\3\uffff\2\23",
            "\3\23\5\uffff\3\23\1\uffff\1\23\4\uffff\1\23\2\uffff\2\23"+
            "\3\uffff\2\23\2\uffff\1\23\1\uffff\1\23\3\uffff\1\23\1\uffff"+
            "\1\23\1\uffff\2\23\4\uffff\3\23\2\uffff\1\23\1\uffff\3\23\2"+
            "\uffff\1\23\5\uffff\2\23\7\uffff\2\23\5\uffff\1\23\4\uffff\2"+
            "\23\1\uffff\1\23\4\uffff\1\23\3\uffff\1\23\3\uffff\2\23\6\uffff"+
            "\1\23\6\uffff\1\23\5\uffff\2\23\4\uffff\1\23\1\uffff\1\23\7"+
            "\uffff\1\23\45\uffff\1\26\1\23\2\uffff\4\23\1\uffff\1\23\1\uffff"+
            "\1\23\1\uffff\13\23\2\uffff\1\23\3\uffff\2\23",
            "\3\23\5\uffff\3\23\1\uffff\1\23\4\uffff\1\23\2\uffff\2\23"+
            "\3\uffff\2\23\2\uffff\1\23\1\uffff\1\23\3\uffff\1\23\1\uffff"+
            "\1\23\1\uffff\2\23\4\uffff\3\23\2\uffff\1\23\1\uffff\3\23\2"+
            "\uffff\1\23\5\uffff\2\23\7\uffff\2\23\5\uffff\1\23\4\uffff\2"+
            "\23\1\uffff\1\23\4\uffff\1\23\3\uffff\1\23\3\uffff\2\23\6\uffff"+
            "\1\23\6\uffff\1\23\5\uffff\2\23\4\uffff\1\23\1\uffff\1\23\7"+
            "\uffff\1\23\45\uffff\1\27\1\23\2\uffff\4\23\1\uffff\1\23\1\uffff"+
            "\1\23\1\uffff\13\23\2\uffff\1\23\3\uffff\2\23",
            "\3\23\5\uffff\3\23\1\uffff\1\23\4\uffff\1\23\2\uffff\2\23"+
            "\3\uffff\2\23\2\uffff\1\23\1\uffff\1\23\3\uffff\1\23\1\uffff"+
            "\1\23\1\uffff\2\23\4\uffff\3\23\2\uffff\1\23\1\uffff\3\23\2"+
            "\uffff\1\23\5\uffff\2\23\7\uffff\2\23\5\uffff\1\23\4\uffff\2"+
            "\23\1\uffff\1\23\4\uffff\1\23\3\uffff\1\23\3\uffff\2\23\6\uffff"+
            "\1\23\6\uffff\1\23\5\uffff\2\23\4\uffff\1\23\1\uffff\1\23\7"+
            "\uffff\1\23\45\uffff\2\23\1\uffff\1\30\4\23\1\uffff\1\23\1\uffff"+
            "\1\23\1\uffff\13\23\2\uffff\1\23\3\uffff\2\23",
            "\3\23\5\uffff\3\23\1\uffff\1\23\4\uffff\1\23\2\uffff\2\23"+
            "\3\uffff\2\23\2\uffff\1\23\1\uffff\1\23\3\uffff\1\23\1\uffff"+
            "\1\23\1\uffff\2\23\4\uffff\3\23\2\uffff\1\23\1\uffff\3\23\2"+
            "\uffff\1\23\5\uffff\2\23\7\uffff\2\23\5\uffff\1\23\4\uffff\2"+
            "\23\1\uffff\1\23\4\uffff\1\23\3\uffff\1\23\3\uffff\2\23\6\uffff"+
            "\1\23\6\uffff\1\23\5\uffff\2\23\4\uffff\1\23\1\uffff\1\23\7"+
            "\uffff\1\23\45\uffff\2\23\1\31\1\uffff\4\23\1\uffff\1\23\1\uffff"+
            "\1\23\1\uffff\13\23\2\uffff\1\23\3\uffff\2\23",
            "\3\23\5\uffff\3\23\1\uffff\1\23\4\uffff\1\23\2\uffff\2\23"+
            "\3\uffff\2\23\2\uffff\1\23\1\uffff\1\23\3\uffff\1\23\1\uffff"+
            "\1\23\1\uffff\2\23\4\uffff\3\23\2\uffff\1\23\1\uffff\3\23\2"+
            "\uffff\1\23\5\uffff\2\23\7\uffff\2\23\5\uffff\1\23\4\uffff\2"+
            "\23\1\uffff\1\23\4\uffff\1\23\3\uffff\1\23\3\uffff\2\23\6\uffff"+
            "\1\23\6\uffff\1\23\5\uffff\2\23\4\uffff\1\23\1\uffff\1\23\7"+
            "\uffff\1\23\45\uffff\2\23\1\uffff\1\31\4\23\1\uffff\1\23\1\uffff"+
            "\1\23\1\uffff\13\23\2\uffff\1\23\3\uffff\2\23",
            "\3\23\5\uffff\3\23\1\uffff\1\23\4\uffff\1\23\2\uffff\2\23"+
            "\3\uffff\2\23\2\uffff\1\23\1\uffff\1\23\3\uffff\1\23\1\uffff"+
            "\1\23\1\uffff\2\23\4\uffff\3\23\2\uffff\1\23\1\uffff\3\23\2"+
            "\uffff\1\23\2\uffff\1\32\2\uffff\2\23\7\uffff\2\23\5\uffff\1"+
            "\23\4\uffff\2\23\1\uffff\1\23\4\uffff\1\23\3\uffff\1\23\3\uffff"+
            "\2\23\6\uffff\1\23\6\uffff\1\23\5\uffff\2\23\4\uffff\1\23\1"+
            "\uffff\1\23\1\32\6\uffff\1\23\45\uffff\2\23\2\uffff\4\23\1\uffff"+
            "\1\23\1\uffff\1\23\1\uffff\13\23\2\uffff\1\23\3\uffff\2\23",
            "\3\23\5\uffff\3\23\1\uffff\1\23\4\uffff\1\23\2\uffff\2\23"+
            "\3\uffff\2\23\2\uffff\1\23\1\uffff\1\23\3\uffff\1\23\1\uffff"+
            "\1\23\1\uffff\2\23\4\uffff\3\23\2\uffff\1\23\1\uffff\3\23\2"+
            "\uffff\1\23\2\uffff\1\33\2\uffff\2\23\7\uffff\2\23\5\uffff\1"+
            "\23\4\uffff\2\23\1\uffff\1\23\4\uffff\1\23\3\uffff\1\23\3\uffff"+
            "\2\23\6\uffff\1\23\6\uffff\1\23\5\uffff\2\23\4\uffff\1\23\1"+
            "\uffff\1\23\1\33\6\uffff\1\23\45\uffff\2\23\2\uffff\4\23\1\uffff"+
            "\1\23\1\uffff\1\23\1\uffff\13\23\2\uffff\1\23\3\uffff\2\23",
            "\3\23\5\uffff\3\23\1\uffff\1\23\4\uffff\1\23\2\uffff\2\23"+
            "\3\uffff\2\23\2\uffff\1\23\1\uffff\1\23\3\uffff\1\23\1\uffff"+
            "\1\23\1\uffff\2\23\4\uffff\3\23\2\uffff\1\23\1\uffff\3\23\2"+
            "\uffff\1\23\2\uffff\1\34\2\uffff\2\23\7\uffff\2\23\5\uffff\1"+
            "\23\4\uffff\2\23\1\uffff\1\23\4\uffff\1\23\3\uffff\1\23\3\uffff"+
            "\2\23\6\uffff\1\23\6\uffff\1\23\5\uffff\2\23\4\uffff\1\23\1"+
            "\uffff\1\23\7\uffff\1\23\45\uffff\2\23\2\uffff\4\23\1\uffff"+
            "\1\23\1\uffff\1\23\1\uffff\13\23\2\uffff\1\23\3\uffff\2\23",
            "\3\23\5\uffff\3\23\1\uffff\1\23\4\uffff\1\23\2\uffff\2\23"+
            "\3\uffff\2\23\2\uffff\1\23\1\uffff\1\23\3\uffff\1\23\1\uffff"+
            "\1\23\1\uffff\2\23\4\uffff\3\23\2\uffff\1\23\1\uffff\3\23\2"+
            "\uffff\1\23\2\uffff\1\35\2\uffff\2\23\7\uffff\2\23\5\uffff\1"+
            "\23\4\uffff\2\23\1\uffff\1\23\4\uffff\1\23\3\uffff\1\23\3\uffff"+
            "\2\23\6\uffff\1\23\6\uffff\1\23\5\uffff\2\23\4\uffff\1\23\1"+
            "\uffff\1\23\6\uffff\1\35\1\23\45\uffff\2\23\2\uffff\4\23\1\uffff"+
            "\1\23\1\uffff\1\23\1\uffff\13\23\2\uffff\1\23\3\uffff\2\23",
            "\3\23\5\uffff\3\23\1\uffff\1\23\4\uffff\1\23\2\uffff\2\23"+
            "\3\uffff\2\23\2\uffff\1\23\1\uffff\1\23\3\uffff\1\23\1\uffff"+
            "\1\23\1\uffff\2\23\4\uffff\3\23\2\uffff\1\23\1\uffff\3\23\2"+
            "\uffff\1\23\5\uffff\2\23\7\uffff\2\23\5\uffff\1\23\4\uffff\2"+
            "\23\1\uffff\1\23\4\uffff\1\23\3\uffff\1\23\3\uffff\2\23\6\uffff"+
            "\1\23\6\uffff\1\23\5\uffff\2\23\4\uffff\1\23\1\uffff\1\23\7"+
            "\uffff\1\23\45\uffff\2\23\1\36\1\uffff\4\23\1\uffff\1\23\1\uffff"+
            "\1\23\1\uffff\13\23\2\uffff\1\23\3\uffff\2\23",
            "\3\23\5\uffff\3\23\1\uffff\1\23\4\uffff\1\23\2\uffff\2\23"+
            "\3\uffff\2\23\2\uffff\1\23\1\uffff\1\23\3\uffff\1\23\1\uffff"+
            "\1\23\1\uffff\2\23\4\uffff\3\23\2\uffff\1\23\1\uffff\3\23\2"+
            "\uffff\1\23\5\uffff\2\23\7\uffff\2\23\5\uffff\1\23\4\uffff\2"+
            "\23\1\uffff\1\23\4\uffff\1\23\3\uffff\1\23\3\uffff\2\23\6\uffff"+
            "\1\23\6\uffff\1\23\5\uffff\2\23\4\uffff\1\23\1\uffff\1\23\7"+
            "\uffff\1\23\45\uffff\2\23\1\uffff\1\37\4\23\1\uffff\1\23\1\uffff"+
            "\1\23\1\uffff\13\23\2\uffff\1\23\3\uffff\2\23",
            "\3\23\5\uffff\3\23\1\uffff\1\23\4\uffff\1\23\2\uffff\2\23"+
            "\3\uffff\2\23\2\uffff\1\23\1\uffff\1\23\3\uffff\1\23\1\uffff"+
            "\1\23\1\uffff\2\23\4\uffff\3\23\2\uffff\1\23\1\uffff\3\23\2"+
            "\uffff\1\23\5\uffff\2\23\7\uffff\2\23\5\uffff\1\23\4\uffff\2"+
            "\23\1\uffff\1\23\4\uffff\1\23\3\uffff\1\23\3\uffff\2\23\6\uffff"+
            "\1\23\6\uffff\1\23\5\uffff\2\23\4\uffff\1\23\1\uffff\1\23\7"+
            "\uffff\1\23\45\uffff\2\23\1\40\1\uffff\4\23\1\uffff\1\23\1\uffff"+
            "\1\23\1\uffff\13\23\2\uffff\1\23\3\uffff\2\23",
            "\3\23\5\uffff\3\23\1\uffff\1\23\4\uffff\1\23\2\uffff\2\23"+
            "\3\uffff\2\23\2\uffff\1\23\1\uffff\1\23\3\uffff\1\23\1\uffff"+
            "\1\23\1\uffff\2\23\4\uffff\3\23\2\uffff\1\23\1\uffff\3\23\2"+
            "\uffff\1\23\5\uffff\2\23\7\uffff\2\23\5\uffff\1\23\4\uffff\2"+
            "\23\1\uffff\1\23\4\uffff\1\23\3\uffff\1\23\3\uffff\2\23\6\uffff"+
            "\1\23\6\uffff\1\23\5\uffff\2\23\4\uffff\1\23\1\uffff\1\23\7"+
            "\uffff\1\23\3\uffff\1\41\41\uffff\2\23\2\uffff\4\23\1\uffff"+
            "\1\23\1\uffff\1\23\1\uffff\13\23\2\uffff\1\23\3\uffff\2\23",
            "\3\23\5\uffff\3\23\1\uffff\1\23\4\uffff\1\23\2\uffff\2\23"+
            "\3\uffff\2\23\2\uffff\1\23\1\uffff\1\23\3\uffff\1\23\1\uffff"+
            "\1\23\1\uffff\2\23\4\uffff\3\23\2\uffff\1\23\1\uffff\3\23\2"+
            "\uffff\1\23\5\uffff\2\23\7\uffff\2\23\5\uffff\1\23\4\uffff\2"+
            "\23\1\uffff\1\23\4\uffff\1\23\3\uffff\1\23\3\uffff\2\23\6\uffff"+
            "\1\23\6\uffff\1\23\5\uffff\2\23\4\uffff\1\23\1\uffff\1\23\7"+
            "\uffff\1\23\45\uffff\1\42\1\23\2\uffff\4\23\1\uffff\1\23\1\uffff"+
            "\1\23\1\uffff\13\23\2\uffff\1\23\3\uffff\2\23",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };

    static final short[] DFA49_eot = DFA.unpackEncodedString(DFA49_eotS);
    static final short[] DFA49_eof = DFA.unpackEncodedString(DFA49_eofS);
    static final char[] DFA49_min = DFA.unpackEncodedStringToUnsignedChars(DFA49_minS);
    static final char[] DFA49_max = DFA.unpackEncodedStringToUnsignedChars(DFA49_maxS);
    static final short[] DFA49_accept = DFA.unpackEncodedString(DFA49_acceptS);
    static final short[] DFA49_special = DFA.unpackEncodedString(DFA49_specialS);
    static final short[][] DFA49_transition;

    static {
        int numStates = DFA49_transitionS.length;
        DFA49_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA49_transition[i] = DFA.unpackEncodedString(DFA49_transitionS[i]);
        }
    }

    class DFA49 extends DFA {

        public DFA49(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 49;
            this.eot = DFA49_eot;
            this.eof = DFA49_eof;
            this.min = DFA49_min;
            this.max = DFA49_max;
            this.accept = DFA49_accept;
            this.special = DFA49_special;
            this.transition = DFA49_transition;
        }
        public String getDescription() {
            return "393:1: p_ExprSingle : ( p_FLWORExpr | p_QuantifiedExpr | p_TypeswitchExpr | p_IfExpr | p_TryCatchExpr | {...}? => p_EvalExpr | {...}? => p_InsertExpr | {...}? => p_DeleteExpr | {...}? => p_RenameExpr | {...}? => p_ReplaceExpr | {...}? => p_TransformExpr | {...}? => p_BlockExpr | {...}? => p_AssignmentExpr | {...}? => p_ExitExpr | {...}? => p_WhileExpr | p_OrExpr );";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA49_11 = input.LA(1);

                         
                        int index49_11 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA49_11==EOF||(LA49_11>=AND && LA49_11<=ASCENDING)||(LA49_11>=CASE && LA49_11<=CASTABLE)||LA49_11==COLLATION||LA49_11==DEFAULT||(LA49_11>=DESCENDING && LA49_11<=DIV)||(LA49_11>=ELSE && LA49_11<=EMPTY)||LA49_11==EQ||LA49_11==EXCEPT||LA49_11==FOR||LA49_11==GE||(LA49_11>=GT && LA49_11<=IDIV)||(LA49_11>=INSTANCE && LA49_11<=IS)||LA49_11==LE||(LA49_11>=LET && LA49_11<=MOD)||LA49_11==NE||(LA49_11>=OR && LA49_11<=ORDER)||(LA49_11>=RETURN && LA49_11<=SATISFIES)||LA49_11==STABLE||(LA49_11>=TO && LA49_11<=TREAT)||LA49_11==UNION||LA49_11==WHERE||LA49_11==COUNT||(LA49_11>=END && LA49_11<=GROUP)||LA49_11==ONLY||LA49_11==START||(LA49_11>=AFTER && LA49_11<=BEFORE)||LA49_11==INTO||LA49_11==MODIFY||LA49_11==WITH||(LA49_11>=LPAREN && LA49_11<=RPAREN)||(LA49_11>=RBRACKET && LA49_11<=EQUAL)||LA49_11==NOTEQUAL||LA49_11==COMMA||(LA49_11>=STAR && LA49_11<=SLASH_SLASH)||LA49_11==COLON||(LA49_11>=SEMICOLON && LA49_11<=VBAR)) ) {s = 19;}

                        else if ( (LA49_11==NODE||LA49_11==NODES) && ((lc(XQU)))) {s = 27;}

                         
                        input.seek(index49_11);
                        if ( s>=0 ) return s;
                        break;
                    case 1 : 
                        int LA49_17 = input.LA(1);

                         
                        int index49_17 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA49_17==EOF||(LA49_17>=AND && LA49_17<=ASCENDING)||(LA49_17>=CASE && LA49_17<=CASTABLE)||LA49_17==COLLATION||LA49_17==DEFAULT||(LA49_17>=DESCENDING && LA49_17<=DIV)||(LA49_17>=ELSE && LA49_17<=EMPTY)||LA49_17==EQ||LA49_17==EXCEPT||LA49_17==FOR||LA49_17==GE||(LA49_17>=GT && LA49_17<=IDIV)||(LA49_17>=INSTANCE && LA49_17<=IS)||LA49_17==LE||(LA49_17>=LET && LA49_17<=MOD)||LA49_17==NE||(LA49_17>=OR && LA49_17<=ORDER)||(LA49_17>=RETURN && LA49_17<=SATISFIES)||LA49_17==STABLE||(LA49_17>=TO && LA49_17<=TREAT)||LA49_17==UNION||LA49_17==WHERE||LA49_17==COUNT||(LA49_17>=END && LA49_17<=GROUP)||LA49_17==ONLY||LA49_17==START||(LA49_17>=AFTER && LA49_17<=BEFORE)||LA49_17==INTO||LA49_17==MODIFY||LA49_17==WITH||(LA49_17>=LPAREN && LA49_17<=RPAREN)||(LA49_17>=RBRACKET && LA49_17<=EQUAL)||LA49_17==NOTEQUAL||LA49_17==COMMA||(LA49_17>=STAR && LA49_17<=SLASH_SLASH)||LA49_17==COLON||(LA49_17>=SEMICOLON && LA49_17<=VBAR)) ) {s = 19;}

                        else if ( (LA49_17==RETURNING) && ((lc(XQS)))) {s = 33;}

                         
                        input.seek(index49_17);
                        if ( s>=0 ) return s;
                        break;
                    case 2 : 
                        int LA49_14 = input.LA(1);

                         
                        int index49_14 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA49_14==DOLLAR) && ((lc(XQU)))) {s = 30;}

                        else if ( (LA49_14==EOF||(LA49_14>=AND && LA49_14<=ASCENDING)||(LA49_14>=CASE && LA49_14<=CASTABLE)||LA49_14==COLLATION||LA49_14==DEFAULT||(LA49_14>=DESCENDING && LA49_14<=DIV)||(LA49_14>=ELSE && LA49_14<=EMPTY)||LA49_14==EQ||LA49_14==EXCEPT||LA49_14==FOR||LA49_14==GE||(LA49_14>=GT && LA49_14<=IDIV)||(LA49_14>=INSTANCE && LA49_14<=IS)||LA49_14==LE||(LA49_14>=LET && LA49_14<=MOD)||LA49_14==NE||(LA49_14>=OR && LA49_14<=ORDER)||(LA49_14>=RETURN && LA49_14<=SATISFIES)||LA49_14==STABLE||(LA49_14>=TO && LA49_14<=TREAT)||LA49_14==UNION||LA49_14==WHERE||LA49_14==COUNT||(LA49_14>=END && LA49_14<=GROUP)||LA49_14==ONLY||LA49_14==START||(LA49_14>=AFTER && LA49_14<=BEFORE)||LA49_14==INTO||LA49_14==MODIFY||LA49_14==WITH||(LA49_14>=LPAREN && LA49_14<=RPAREN)||(LA49_14>=RBRACKET && LA49_14<=EQUAL)||LA49_14==NOTEQUAL||LA49_14==COMMA||(LA49_14>=STAR && LA49_14<=SLASH_SLASH)||LA49_14==COLON||(LA49_14>=SEMICOLON && LA49_14<=VBAR)) ) {s = 19;}

                         
                        input.seek(index49_14);
                        if ( s>=0 ) return s;
                        break;
                    case 3 : 
                        int LA49_12 = input.LA(1);

                         
                        int index49_12 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA49_12==NODE) && ((lc(XQU)))) {s = 28;}

                        else if ( (LA49_12==EOF||(LA49_12>=AND && LA49_12<=ASCENDING)||(LA49_12>=CASE && LA49_12<=CASTABLE)||LA49_12==COLLATION||LA49_12==DEFAULT||(LA49_12>=DESCENDING && LA49_12<=DIV)||(LA49_12>=ELSE && LA49_12<=EMPTY)||LA49_12==EQ||LA49_12==EXCEPT||LA49_12==FOR||LA49_12==GE||(LA49_12>=GT && LA49_12<=IDIV)||(LA49_12>=INSTANCE && LA49_12<=IS)||LA49_12==LE||(LA49_12>=LET && LA49_12<=MOD)||LA49_12==NE||(LA49_12>=OR && LA49_12<=ORDER)||(LA49_12>=RETURN && LA49_12<=SATISFIES)||LA49_12==STABLE||(LA49_12>=TO && LA49_12<=TREAT)||LA49_12==UNION||LA49_12==WHERE||LA49_12==COUNT||(LA49_12>=END && LA49_12<=GROUP)||LA49_12==ONLY||LA49_12==START||(LA49_12>=AFTER && LA49_12<=BEFORE)||LA49_12==INTO||LA49_12==MODIFY||LA49_12==WITH||(LA49_12>=LPAREN && LA49_12<=RPAREN)||(LA49_12>=RBRACKET && LA49_12<=EQUAL)||LA49_12==NOTEQUAL||LA49_12==COMMA||(LA49_12>=STAR && LA49_12<=SLASH_SLASH)||LA49_12==COLON||(LA49_12>=SEMICOLON && LA49_12<=VBAR)) ) {s = 19;}

                         
                        input.seek(index49_12);
                        if ( s>=0 ) return s;
                        break;
                    case 4 : 
                        int LA49_13 = input.LA(1);

                         
                        int index49_13 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA49_13==NODE||LA49_13==VALUE) && ((lc(XQU)))) {s = 29;}

                        else if ( (LA49_13==EOF||(LA49_13>=AND && LA49_13<=ASCENDING)||(LA49_13>=CASE && LA49_13<=CASTABLE)||LA49_13==COLLATION||LA49_13==DEFAULT||(LA49_13>=DESCENDING && LA49_13<=DIV)||(LA49_13>=ELSE && LA49_13<=EMPTY)||LA49_13==EQ||LA49_13==EXCEPT||LA49_13==FOR||LA49_13==GE||(LA49_13>=GT && LA49_13<=IDIV)||(LA49_13>=INSTANCE && LA49_13<=IS)||LA49_13==LE||(LA49_13>=LET && LA49_13<=MOD)||LA49_13==NE||(LA49_13>=OR && LA49_13<=ORDER)||(LA49_13>=RETURN && LA49_13<=SATISFIES)||LA49_13==STABLE||(LA49_13>=TO && LA49_13<=TREAT)||LA49_13==UNION||LA49_13==WHERE||LA49_13==COUNT||(LA49_13>=END && LA49_13<=GROUP)||LA49_13==ONLY||LA49_13==START||(LA49_13>=AFTER && LA49_13<=BEFORE)||LA49_13==INTO||LA49_13==MODIFY||LA49_13==WITH||(LA49_13>=LPAREN && LA49_13<=RPAREN)||(LA49_13>=RBRACKET && LA49_13<=EQUAL)||LA49_13==NOTEQUAL||LA49_13==COMMA||(LA49_13>=STAR && LA49_13<=SLASH_SLASH)||LA49_13==COLON||(LA49_13>=SEMICOLON && LA49_13<=VBAR)) ) {s = 19;}

                         
                        input.seek(index49_13);
                        if ( s>=0 ) return s;
                        break;
                    case 5 : 
                        int LA49_10 = input.LA(1);

                         
                        int index49_10 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA49_10==EOF||(LA49_10>=AND && LA49_10<=ASCENDING)||(LA49_10>=CASE && LA49_10<=CASTABLE)||LA49_10==COLLATION||LA49_10==DEFAULT||(LA49_10>=DESCENDING && LA49_10<=DIV)||(LA49_10>=ELSE && LA49_10<=EMPTY)||LA49_10==EQ||LA49_10==EXCEPT||LA49_10==FOR||LA49_10==GE||(LA49_10>=GT && LA49_10<=IDIV)||(LA49_10>=INSTANCE && LA49_10<=IS)||LA49_10==LE||(LA49_10>=LET && LA49_10<=MOD)||LA49_10==NE||(LA49_10>=OR && LA49_10<=ORDER)||(LA49_10>=RETURN && LA49_10<=SATISFIES)||LA49_10==STABLE||(LA49_10>=TO && LA49_10<=TREAT)||LA49_10==UNION||LA49_10==WHERE||LA49_10==COUNT||(LA49_10>=END && LA49_10<=GROUP)||LA49_10==ONLY||LA49_10==START||(LA49_10>=AFTER && LA49_10<=BEFORE)||LA49_10==INTO||LA49_10==MODIFY||LA49_10==WITH||(LA49_10>=LPAREN && LA49_10<=RPAREN)||(LA49_10>=RBRACKET && LA49_10<=EQUAL)||LA49_10==NOTEQUAL||LA49_10==COMMA||(LA49_10>=STAR && LA49_10<=SLASH_SLASH)||LA49_10==COLON||(LA49_10>=SEMICOLON && LA49_10<=VBAR)) ) {s = 19;}

                        else if ( (LA49_10==NODE||LA49_10==NODES) && ((lc(XQU)))) {s = 26;}

                         
                        input.seek(index49_10);
                        if ( s>=0 ) return s;
                        break;
                    case 6 : 
                        int LA49_16 = input.LA(1);

                         
                        int index49_16 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA49_16==EOF||(LA49_16>=AND && LA49_16<=ASCENDING)||(LA49_16>=CASE && LA49_16<=CASTABLE)||LA49_16==COLLATION||LA49_16==DEFAULT||(LA49_16>=DESCENDING && LA49_16<=DIV)||(LA49_16>=ELSE && LA49_16<=EMPTY)||LA49_16==EQ||LA49_16==EXCEPT||LA49_16==FOR||LA49_16==GE||(LA49_16>=GT && LA49_16<=IDIV)||(LA49_16>=INSTANCE && LA49_16<=IS)||LA49_16==LE||(LA49_16>=LET && LA49_16<=MOD)||LA49_16==NE||(LA49_16>=OR && LA49_16<=ORDER)||(LA49_16>=RETURN && LA49_16<=SATISFIES)||LA49_16==STABLE||(LA49_16>=TO && LA49_16<=TREAT)||LA49_16==UNION||LA49_16==WHERE||LA49_16==COUNT||(LA49_16>=END && LA49_16<=GROUP)||LA49_16==ONLY||LA49_16==START||(LA49_16>=AFTER && LA49_16<=BEFORE)||LA49_16==INTO||LA49_16==MODIFY||LA49_16==WITH||(LA49_16>=LPAREN && LA49_16<=RPAREN)||(LA49_16>=RBRACKET && LA49_16<=EQUAL)||LA49_16==NOTEQUAL||LA49_16==COMMA||(LA49_16>=STAR && LA49_16<=SLASH_SLASH)||LA49_16==COLON||(LA49_16>=SEMICOLON && LA49_16<=VBAR)) ) {s = 19;}

                        else if ( (LA49_16==DOLLAR) && ((lc(XQS)))) {s = 32;}

                         
                        input.seek(index49_16);
                        if ( s>=0 ) return s;
                        break;
                    case 7 : 
                        int LA49_9 = input.LA(1);

                         
                        int index49_9 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA49_9==EOF||(LA49_9>=AND && LA49_9<=ASCENDING)||(LA49_9>=CASE && LA49_9<=CASTABLE)||LA49_9==COLLATION||LA49_9==DEFAULT||(LA49_9>=DESCENDING && LA49_9<=DIV)||(LA49_9>=ELSE && LA49_9<=EMPTY)||LA49_9==EQ||LA49_9==EXCEPT||LA49_9==FOR||LA49_9==GE||(LA49_9>=GT && LA49_9<=IDIV)||(LA49_9>=INSTANCE && LA49_9<=IS)||LA49_9==LE||(LA49_9>=LET && LA49_9<=MOD)||LA49_9==NE||(LA49_9>=OR && LA49_9<=ORDER)||(LA49_9>=RETURN && LA49_9<=SATISFIES)||LA49_9==STABLE||(LA49_9>=TO && LA49_9<=TREAT)||LA49_9==UNION||LA49_9==WHERE||LA49_9==COUNT||(LA49_9>=END && LA49_9<=GROUP)||LA49_9==ONLY||LA49_9==START||(LA49_9>=AFTER && LA49_9<=BEFORE)||LA49_9==INTO||LA49_9==MODIFY||LA49_9==WITH||(LA49_9>=LPAREN && LA49_9<=RPAREN)||(LA49_9>=RBRACKET && LA49_9<=EQUAL)||LA49_9==NOTEQUAL||LA49_9==COMMA||(LA49_9>=STAR && LA49_9<=SLASH_SLASH)||LA49_9==COLON||(LA49_9>=SEMICOLON && LA49_9<=VBAR)) ) {s = 19;}

                        else if ( (LA49_9==LBRACKET) && ((lc(ZORBA)))) {s = 25;}

                         
                        input.seek(index49_9);
                        if ( s>=0 ) return s;
                        break;
                    case 8 : 
                        int LA49_15 = input.LA(1);

                         
                        int index49_15 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA49_15==EOF||(LA49_15>=AND && LA49_15<=ASCENDING)||(LA49_15>=CASE && LA49_15<=CASTABLE)||LA49_15==COLLATION||LA49_15==DEFAULT||(LA49_15>=DESCENDING && LA49_15<=DIV)||(LA49_15>=ELSE && LA49_15<=EMPTY)||LA49_15==EQ||LA49_15==EXCEPT||LA49_15==FOR||LA49_15==GE||(LA49_15>=GT && LA49_15<=IDIV)||(LA49_15>=INSTANCE && LA49_15<=IS)||LA49_15==LE||(LA49_15>=LET && LA49_15<=MOD)||LA49_15==NE||(LA49_15>=OR && LA49_15<=ORDER)||(LA49_15>=RETURN && LA49_15<=SATISFIES)||LA49_15==STABLE||(LA49_15>=TO && LA49_15<=TREAT)||LA49_15==UNION||LA49_15==WHERE||LA49_15==COUNT||(LA49_15>=END && LA49_15<=GROUP)||LA49_15==ONLY||LA49_15==START||(LA49_15>=AFTER && LA49_15<=BEFORE)||LA49_15==INTO||LA49_15==MODIFY||LA49_15==WITH||(LA49_15>=LPAREN && LA49_15<=RPAREN)||(LA49_15>=RBRACKET && LA49_15<=EQUAL)||LA49_15==NOTEQUAL||LA49_15==COMMA||(LA49_15>=STAR && LA49_15<=SLASH_SLASH)||LA49_15==COLON||(LA49_15>=SEMICOLON && LA49_15<=VBAR)) ) {s = 19;}

                        else if ( (LA49_15==LBRACKET) && ((lc(XQS)))) {s = 31;}

                         
                        input.seek(index49_15);
                        if ( s>=0 ) return s;
                        break;
                    case 9 : 
                        int LA49_18 = input.LA(1);

                         
                        int index49_18 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA49_18==LPAREN) && ((lc(XQS)))) {s = 34;}

                        else if ( (LA49_18==EOF||(LA49_18>=AND && LA49_18<=ASCENDING)||(LA49_18>=CASE && LA49_18<=CASTABLE)||LA49_18==COLLATION||LA49_18==DEFAULT||(LA49_18>=DESCENDING && LA49_18<=DIV)||(LA49_18>=ELSE && LA49_18<=EMPTY)||LA49_18==EQ||LA49_18==EXCEPT||LA49_18==FOR||LA49_18==GE||(LA49_18>=GT && LA49_18<=IDIV)||(LA49_18>=INSTANCE && LA49_18<=IS)||LA49_18==LE||(LA49_18>=LET && LA49_18<=MOD)||LA49_18==NE||(LA49_18>=OR && LA49_18<=ORDER)||(LA49_18>=RETURN && LA49_18<=SATISFIES)||LA49_18==STABLE||(LA49_18>=TO && LA49_18<=TREAT)||LA49_18==UNION||LA49_18==WHERE||LA49_18==COUNT||(LA49_18>=END && LA49_18<=GROUP)||LA49_18==ONLY||LA49_18==START||(LA49_18>=AFTER && LA49_18<=BEFORE)||LA49_18==INTO||LA49_18==MODIFY||LA49_18==WITH||LA49_18==RPAREN||(LA49_18>=RBRACKET && LA49_18<=EQUAL)||LA49_18==NOTEQUAL||LA49_18==COMMA||(LA49_18>=STAR && LA49_18<=SLASH_SLASH)||LA49_18==COLON||(LA49_18>=SEMICOLON && LA49_18<=VBAR)) ) {s = 19;}

                         
                        input.seek(index49_18);
                        if ( s>=0 ) return s;
                        break;
                    case 10 : 
                        int LA49_8 = input.LA(1);

                         
                        int index49_8 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA49_8==EOF||(LA49_8>=AND && LA49_8<=ASCENDING)||(LA49_8>=CASE && LA49_8<=CASTABLE)||LA49_8==COLLATION||LA49_8==DEFAULT||(LA49_8>=DESCENDING && LA49_8<=DIV)||(LA49_8>=ELSE && LA49_8<=EMPTY)||LA49_8==EQ||LA49_8==EXCEPT||LA49_8==FOR||LA49_8==GE||(LA49_8>=GT && LA49_8<=IDIV)||(LA49_8>=INSTANCE && LA49_8<=IS)||LA49_8==LE||(LA49_8>=LET && LA49_8<=MOD)||LA49_8==NE||(LA49_8>=OR && LA49_8<=ORDER)||(LA49_8>=RETURN && LA49_8<=SATISFIES)||LA49_8==STABLE||(LA49_8>=TO && LA49_8<=TREAT)||LA49_8==UNION||LA49_8==WHERE||LA49_8==COUNT||(LA49_8>=END && LA49_8<=GROUP)||LA49_8==ONLY||LA49_8==START||(LA49_8>=AFTER && LA49_8<=BEFORE)||LA49_8==INTO||LA49_8==MODIFY||LA49_8==WITH||(LA49_8>=LPAREN && LA49_8<=RPAREN)||(LA49_8>=RBRACKET && LA49_8<=EQUAL)||LA49_8==NOTEQUAL||LA49_8==COMMA||(LA49_8>=STAR && LA49_8<=SLASH_SLASH)||LA49_8==COLON||(LA49_8>=SEMICOLON && LA49_8<=VBAR)) ) {s = 19;}

                        else if ( (LA49_8==DOLLAR) && ((lc(ZORBA)))) {s = 25;}

                         
                        input.seek(index49_8);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 49, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static final String DFA103_eotS =
        "\55\uffff";
    static final String DFA103_eofS =
        "\55\uffff";
    static final String DFA103_minS =
        "\1\20\54\uffff";
    static final String DFA103_maxS =
        "\1\u0136\54\uffff";
    static final String DFA103_acceptS =
        "\1\uffff\1\1\1\2\51\uffff\1\3";
    static final String DFA103_specialS =
        "\55\uffff}>";
    static final String[] DFA103_transitionS = {
            "\133\2\1\1\63\2\1\uffff\24\2\1\uffff\15\2\1\uffff\1\2\12\uffff"+
            "\1\2\2\uffff\1\2\5\uffff\4\2\14\uffff\1\2\2\uffff\2\2\2\uffff"+
            "\1\2\6\uffff\1\54\5\2\73\uffff\1\2",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };

    static final short[] DFA103_eot = DFA.unpackEncodedString(DFA103_eotS);
    static final short[] DFA103_eof = DFA.unpackEncodedString(DFA103_eofS);
    static final char[] DFA103_min = DFA.unpackEncodedStringToUnsignedChars(DFA103_minS);
    static final char[] DFA103_max = DFA.unpackEncodedStringToUnsignedChars(DFA103_maxS);
    static final short[] DFA103_accept = DFA.unpackEncodedString(DFA103_acceptS);
    static final short[] DFA103_special = DFA.unpackEncodedString(DFA103_specialS);
    static final short[][] DFA103_transition;

    static {
        int numStates = DFA103_transitionS.length;
        DFA103_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA103_transition[i] = DFA.unpackEncodedString(DFA103_transitionS[i]);
        }
    }

    class DFA103 extends DFA {

        public DFA103(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 103;
            this.eot = DFA103_eot;
            this.eof = DFA103_eof;
            this.min = DFA103_min;
            this.max = DFA103_max;
            this.accept = DFA103_accept;
            this.special = DFA103_special;
            this.transition = DFA103_transition;
        }
        public String getDescription() {
            return "621:1: p_ValueExpr : ( p_ValidateExpr | p_PathExpr | p_ExtensionExpr );";
        }
    }
    static final String DFA110_eotS =
        "\55\uffff";
    static final String DFA110_eofS =
        "\55\uffff";
    static final String DFA110_minS =
        "\1\20\1\0\53\uffff";
    static final String DFA110_maxS =
        "\1\u0136\1\0\53\uffff";
    static final String DFA110_acceptS =
        "\2\uffff\1\3\1\4\47\uffff\1\1\1\2";
    static final String DFA110_specialS =
        "\1\uffff\1\0\53\uffff}>";
    static final String[] DFA110_transitionS = {
            "\u008f\3\1\uffff\24\3\1\uffff\15\3\1\uffff\1\3\12\uffff\1\3"+
            "\2\uffff\1\3\5\uffff\1\1\1\2\2\3\14\uffff\1\3\2\uffff\2\3\2"+
            "\uffff\1\3\7\uffff\5\3\73\uffff\1\3",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };

    static final short[] DFA110_eot = DFA.unpackEncodedString(DFA110_eotS);
    static final short[] DFA110_eof = DFA.unpackEncodedString(DFA110_eofS);
    static final char[] DFA110_min = DFA.unpackEncodedStringToUnsignedChars(DFA110_minS);
    static final char[] DFA110_max = DFA.unpackEncodedStringToUnsignedChars(DFA110_maxS);
    static final short[] DFA110_accept = DFA.unpackEncodedString(DFA110_acceptS);
    static final short[] DFA110_special = DFA.unpackEncodedString(DFA110_specialS);
    static final short[][] DFA110_transition;

    static {
        int numStates = DFA110_transitionS.length;
        DFA110_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA110_transition[i] = DFA.unpackEncodedString(DFA110_transitionS[i]);
        }
    }

    class DFA110 extends DFA {

        public DFA110(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 110;
            this.eot = DFA110_eot;
            this.eof = DFA110_eof;
            this.min = DFA110_min;
            this.max = DFA110_max;
            this.accept = DFA110_accept;
            this.special = DFA110_special;
            this.transition = DFA110_transition;
        }
        public String getDescription() {
            return "665:1: p_PathExpr : ( ( SLASH p_RelativePathExpr )=> ( SLASH p_RelativePathExpr ) | SLASH | SLASH_SLASH p_RelativePathExpr | p_RelativePathExpr );";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA110_1 = input.LA(1);

                         
                        int index110_1 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred1_XQueryParser()) ) {s = 43;}

                        else if ( (true) ) {s = 44;}

                         
                        input.seek(index110_1);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 110, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static final String DFA112_eotS =
        "\u00d5\uffff";
    static final String DFA112_eofS =
        "\1\uffff\5\6\1\uffff\14\6\1\uffff\5\6\u00bb\uffff\1\6";
    static final String DFA112_minS =
        "\1\20\5\22\1\uffff\2\22\1\20\4\22\2\20\3\22\1\uffff\2\22\1\20\2"+
        "\22\1\20\3\23\1\117\20\20\1\u0084\1\u00c3\1\20\2\31\1\122\1\u00c3"+
        "\1\20\1\25\1\166\1\25\2\36\1\70\1\u00c4\1\20\1\132\11\20\3\23\1"+
        "\117\20\20\1\u0084\1\u00c3\1\20\2\31\1\122\1\u00c3\1\20\1\25\1\166"+
        "\1\25\2\36\1\70\1\u00c4\1\20\1\132\11\20\3\23\1\117\20\20\1\u0084"+
        "\1\u00c3\1\20\2\31\1\122\1\u00c3\1\20\1\25\1\166\1\25\2\36\1\70"+
        "\1\u00c4\1\20\1\132\11\20\3\23\1\117\20\20\1\u0084\1\u00c3\1\20"+
        "\2\31\1\122\1\u00c3\1\20\1\25\1\166\1\25\2\36\1\70\1\u00c4\1\20"+
        "\1\132\11\20\2\uffff\1\22";
    static final String DFA112_maxS =
        "\1\u0136\5\u00e0\1\uffff\2\u00e0\1\u0136\4\u00e0\2\u0136\3\u00e0"+
        "\1\uffff\2\u00e0\1\u0136\2\u00e0\1\u0136\4\u00db\20\u0136\2\u00db"+
        "\1\u0136\4\u00db\1\u0136\6\u00db\1\u00eb\1\u0136\1\u00db\11\u0136"+
        "\4\u00db\20\u0136\2\u00db\1\u0136\4\u00db\1\u0136\6\u00db\1\u00eb"+
        "\1\u0136\1\u00db\11\u0136\4\u00c4\20\u0136\2\u00c4\1\u0136\4\u00c4"+
        "\1\u0136\3\u00c4\2\u00cc\1\u00c4\1\u00eb\1\u0136\1\u00c4\11\u0136"+
        "\4\u00c4\20\u0136\2\u00c4\1\u0136\4\u00c4\1\u0136\3\u00c4\2\u00cc"+
        "\1\u00c4\1\u00eb\1\u0136\1\u00c4\11\u0136\2\uffff\1\u00e0";
    static final String DFA112_acceptS =
        "\6\uffff\1\1\14\uffff\1\2\u00be\uffff\2\2\1\uffff";
    static final String DFA112_specialS =
        "\27\uffff\1\0\u00bd\uffff}>";
    static final String[] DFA112_transitionS = {
            "\1\2\1\5\4\30\1\11\6\30\1\7\1\30\1\20\4\30\1\10\1\13\2\30\1"+
            "\25\1\6\1\16\2\30\1\6\5\30\1\15\1\14\6\30\1\6\6\30\1\6\7\30"+
            "\1\26\3\30\1\6\4\30\1\22\1\30\1\1\1\4\1\3\1\30\1\17\3\30\2\6"+
            "\1\12\4\30\1\21\3\30\1\6\1\30\1\24\20\30\1\6\43\30\1\uffff\3"+
            "\30\1\6\20\30\1\uffff\7\30\1\27\4\30\1\23\1\uffff\1\23\12\uffff"+
            "\1\6\2\uffff\1\23\7\uffff\1\23\1\6\14\uffff\1\6\2\uffff\2\23"+
            "\2\uffff\1\30\7\uffff\5\23\73\uffff\1\30",
            "\3\6\4\uffff\4\6\1\uffff\1\6\4\uffff\1\6\2\uffff\2\6\3\uffff"+
            "\2\6\2\uffff\1\6\1\uffff\1\6\3\uffff\1\6\1\uffff\1\6\1\uffff"+
            "\2\6\4\uffff\3\6\2\uffff\1\6\1\uffff\3\6\2\uffff\1\6\5\uffff"+
            "\2\6\7\uffff\2\6\5\uffff\1\6\4\uffff\2\6\1\uffff\1\6\4\uffff"+
            "\1\6\3\uffff\1\6\3\uffff\2\6\6\uffff\1\6\6\uffff\1\6\5\uffff"+
            "\2\6\4\uffff\1\6\1\uffff\1\6\7\uffff\1\6\45\uffff\1\23\1\6\2"+
            "\uffff\4\6\1\uffff\1\6\1\uffff\1\6\1\uffff\13\6\2\uffff\1\31"+
            "\1\6\2\uffff\2\6",
            "\3\6\4\uffff\4\6\1\uffff\1\6\4\uffff\1\6\2\uffff\2\6\3\uffff"+
            "\2\6\2\uffff\1\6\1\uffff\1\6\3\uffff\1\6\1\uffff\1\6\1\uffff"+
            "\2\6\4\uffff\3\6\2\uffff\1\6\1\uffff\3\6\2\uffff\1\6\5\uffff"+
            "\2\6\7\uffff\2\6\5\uffff\1\6\4\uffff\2\6\1\uffff\1\6\4\uffff"+
            "\1\6\3\uffff\1\6\3\uffff\2\6\6\uffff\1\6\6\uffff\1\6\5\uffff"+
            "\2\6\4\uffff\1\6\1\uffff\1\6\7\uffff\1\6\45\uffff\1\23\1\6\2"+
            "\uffff\4\6\1\uffff\1\6\1\uffff\1\6\1\uffff\13\6\2\uffff\1\31"+
            "\1\6\2\uffff\2\6",
            "\3\6\4\uffff\4\6\1\uffff\1\6\4\uffff\1\6\2\uffff\2\6\3\uffff"+
            "\2\6\2\uffff\1\6\1\uffff\1\6\3\uffff\1\6\1\uffff\1\6\1\uffff"+
            "\2\6\4\uffff\3\6\2\uffff\1\6\1\uffff\3\6\2\uffff\1\6\5\uffff"+
            "\2\6\7\uffff\2\6\5\uffff\1\6\4\uffff\2\6\1\uffff\1\6\4\uffff"+
            "\1\6\3\uffff\1\6\3\uffff\2\6\6\uffff\1\6\6\uffff\1\6\5\uffff"+
            "\2\6\4\uffff\1\6\1\uffff\1\6\7\uffff\1\6\45\uffff\1\23\1\6\2"+
            "\uffff\4\6\1\uffff\1\6\1\uffff\1\6\1\uffff\13\6\2\uffff\1\31"+
            "\1\6\2\uffff\2\6",
            "\3\6\4\uffff\4\6\1\uffff\1\6\4\uffff\1\6\2\uffff\2\6\3\uffff"+
            "\2\6\2\uffff\1\6\1\uffff\1\6\3\uffff\1\6\1\uffff\1\6\1\uffff"+
            "\2\6\4\uffff\3\6\2\uffff\1\6\1\uffff\3\6\2\uffff\1\6\5\uffff"+
            "\2\6\7\uffff\2\6\5\uffff\1\6\4\uffff\2\6\1\uffff\1\6\4\uffff"+
            "\1\6\3\uffff\1\6\3\uffff\2\6\6\uffff\1\6\6\uffff\1\6\5\uffff"+
            "\2\6\4\uffff\1\6\1\uffff\1\6\7\uffff\1\6\45\uffff\1\23\1\6\2"+
            "\uffff\4\6\1\uffff\1\6\1\uffff\1\6\1\uffff\13\6\2\uffff\1\31"+
            "\1\6\2\uffff\2\6",
            "\3\6\4\uffff\4\6\1\uffff\1\6\4\uffff\1\6\2\uffff\2\6\3\uffff"+
            "\2\6\2\uffff\1\6\1\uffff\1\6\3\uffff\1\6\1\uffff\1\6\1\uffff"+
            "\2\6\4\uffff\3\6\2\uffff\1\6\1\uffff\3\6\2\uffff\1\6\5\uffff"+
            "\2\6\7\uffff\2\6\5\uffff\1\6\4\uffff\2\6\1\uffff\1\6\4\uffff"+
            "\1\6\3\uffff\1\6\3\uffff\2\6\6\uffff\1\6\6\uffff\1\6\5\uffff"+
            "\2\6\4\uffff\1\6\1\uffff\1\6\7\uffff\1\6\45\uffff\1\23\1\6\2"+
            "\uffff\4\6\1\uffff\1\6\1\uffff\1\6\1\uffff\13\6\2\uffff\1\31"+
            "\1\6\2\uffff\2\6",
            "",
            "\3\6\4\uffff\4\6\1\uffff\1\6\4\uffff\1\6\2\uffff\2\6\3\uffff"+
            "\2\6\2\uffff\1\6\1\uffff\1\6\3\uffff\1\6\1\uffff\1\6\1\uffff"+
            "\2\6\4\uffff\3\6\2\uffff\1\6\1\uffff\3\6\2\uffff\1\6\5\uffff"+
            "\2\6\7\uffff\2\6\5\uffff\1\6\4\uffff\2\6\1\uffff\1\6\4\uffff"+
            "\1\6\3\uffff\1\6\3\uffff\2\6\6\uffff\1\6\6\uffff\1\6\5\uffff"+
            "\2\6\4\uffff\1\6\1\uffff\1\6\7\uffff\1\6\45\uffff\1\23\1\6\2"+
            "\uffff\4\6\1\uffff\1\6\1\uffff\1\6\1\uffff\13\6\2\uffff\1\31"+
            "\1\6\2\uffff\2\6",
            "\3\6\4\uffff\4\6\1\uffff\1\6\4\uffff\1\6\2\uffff\2\6\3\uffff"+
            "\2\6\2\uffff\1\6\1\uffff\1\6\3\uffff\1\6\1\uffff\1\6\1\uffff"+
            "\2\6\4\uffff\3\6\2\uffff\1\6\1\uffff\3\6\2\uffff\1\6\5\uffff"+
            "\2\6\7\uffff\2\6\5\uffff\1\6\4\uffff\2\6\1\uffff\1\6\4\uffff"+
            "\1\6\3\uffff\1\6\3\uffff\2\6\6\uffff\1\6\6\uffff\1\6\5\uffff"+
            "\2\6\4\uffff\1\6\1\uffff\1\6\7\uffff\1\6\45\uffff\1\23\1\6\2"+
            "\uffff\4\6\1\uffff\1\6\1\uffff\1\6\1\uffff\13\6\2\uffff\1\31"+
            "\1\6\2\uffff\2\6",
            "\2\23\1\54\1\102\1\71\4\23\1\107\1\77\1\32\1\33\1\23\1\74"+
            "\4\23\1\76\2\23\1\72\1\41\3\23\1\100\1\73\2\23\1\45\1\23\1\37"+
            "\3\23\1\56\1\23\1\52\1\23\1\51\1\42\4\23\1\35\1\36\1\53\2\23"+
            "\1\50\1\23\1\57\1\47\1\43\2\23\1\46\5\23\1\55\1\62\7\23\1\65"+
            "\1\75\5\23\1\63\4\23\1\44\1\34\1\23\1\40\4\23\1\60\3\23\1\64"+
            "\3\23\1\70\1\61\6\23\1\67\6\23\1\66\5\23\1\104\1\105\4\23\1"+
            "\103\1\23\1\106\7\23\1\101\3\23\1\uffff\24\23\1\uffff\14\23"+
            "\2\6\1\uffff\1\23\4\6\1\uffff\1\6\1\uffff\1\6\1\uffff\13\6\2"+
            "\uffff\2\6\2\uffff\2\6\15\uffff\1\23\107\uffff\1\23",
            "\3\6\4\uffff\4\6\1\uffff\1\6\4\uffff\1\6\2\uffff\2\6\3\uffff"+
            "\2\6\2\uffff\1\6\1\uffff\1\6\3\uffff\1\6\1\uffff\1\6\1\uffff"+
            "\2\6\4\uffff\3\6\2\uffff\1\6\1\uffff\3\6\2\uffff\1\6\5\uffff"+
            "\2\6\7\uffff\2\6\5\uffff\1\6\4\uffff\2\6\1\uffff\1\6\4\uffff"+
            "\1\6\3\uffff\1\6\3\uffff\2\6\6\uffff\1\6\6\uffff\1\6\5\uffff"+
            "\2\6\4\uffff\1\6\1\uffff\1\6\7\uffff\1\6\45\uffff\1\23\1\6\2"+
            "\uffff\4\6\1\uffff\1\6\1\uffff\1\6\1\uffff\13\6\2\uffff\1\31"+
            "\1\6\2\uffff\2\6",
            "\3\6\4\uffff\4\6\1\uffff\1\6\4\uffff\1\6\2\uffff\2\6\3\uffff"+
            "\2\6\2\uffff\1\6\1\uffff\1\6\3\uffff\1\6\1\uffff\1\6\1\uffff"+
            "\2\6\4\uffff\3\6\2\uffff\1\6\1\uffff\3\6\2\uffff\1\6\5\uffff"+
            "\2\6\7\uffff\2\6\5\uffff\1\6\4\uffff\2\6\1\uffff\1\6\4\uffff"+
            "\1\6\3\uffff\1\6\3\uffff\2\6\6\uffff\1\6\6\uffff\1\6\5\uffff"+
            "\2\6\4\uffff\1\6\1\uffff\1\6\7\uffff\1\6\45\uffff\1\23\1\6\2"+
            "\uffff\4\6\1\uffff\1\6\1\uffff\1\6\1\uffff\13\6\2\uffff\1\31"+
            "\1\6\2\uffff\2\6",
            "\3\6\4\uffff\4\6\1\uffff\1\6\4\uffff\1\6\2\uffff\2\6\3\uffff"+
            "\2\6\2\uffff\1\6\1\uffff\1\6\3\uffff\1\6\1\uffff\1\6\1\uffff"+
            "\2\6\4\uffff\3\6\2\uffff\1\6\1\uffff\3\6\2\uffff\1\6\5\uffff"+
            "\2\6\7\uffff\2\6\5\uffff\1\6\4\uffff\2\6\1\uffff\1\6\4\uffff"+
            "\1\6\3\uffff\1\6\3\uffff\2\6\6\uffff\1\6\6\uffff\1\6\5\uffff"+
            "\2\6\4\uffff\1\6\1\uffff\1\6\7\uffff\1\6\45\uffff\1\23\1\6\2"+
            "\uffff\4\6\1\uffff\1\6\1\uffff\1\6\1\uffff\13\6\2\uffff\1\31"+
            "\1\6\2\uffff\2\6",
            "\3\6\4\uffff\4\6\1\uffff\1\6\4\uffff\1\6\2\uffff\2\6\3\uffff"+
            "\2\6\2\uffff\1\6\1\uffff\1\6\3\uffff\1\6\1\uffff\1\6\1\uffff"+
            "\2\6\4\uffff\3\6\2\uffff\1\6\1\uffff\3\6\2\uffff\1\6\5\uffff"+
            "\2\6\7\uffff\2\6\5\uffff\1\6\4\uffff\2\6\1\uffff\1\6\4\uffff"+
            "\1\6\3\uffff\1\6\3\uffff\2\6\6\uffff\1\6\6\uffff\1\6\5\uffff"+
            "\2\6\4\uffff\1\6\1\uffff\1\6\7\uffff\1\6\45\uffff\1\23\1\6\2"+
            "\uffff\4\6\1\uffff\1\6\1\uffff\1\6\1\uffff\13\6\2\uffff\1\31"+
            "\1\6\2\uffff\2\6",
            "\2\23\1\132\1\160\1\147\4\23\1\165\1\155\1\110\1\111\1\23"+
            "\1\152\4\23\1\154\2\23\1\150\1\117\3\23\1\156\1\151\2\23\1\123"+
            "\1\23\1\115\3\23\1\134\1\23\1\130\1\23\1\127\1\120\4\23\1\113"+
            "\1\114\1\131\2\23\1\126\1\23\1\135\1\125\1\121\2\23\1\124\5"+
            "\23\1\133\1\140\7\23\1\143\1\153\5\23\1\141\4\23\1\122\1\112"+
            "\1\23\1\116\4\23\1\136\3\23\1\142\3\23\1\146\1\137\6\23\1\145"+
            "\6\23\1\144\5\23\1\162\1\163\4\23\1\161\1\23\1\164\7\23\1\157"+
            "\3\23\1\uffff\24\23\1\uffff\14\23\2\6\1\uffff\1\23\4\6\1\uffff"+
            "\1\6\1\uffff\1\6\1\uffff\13\6\2\uffff\1\6\3\uffff\2\6\15\uffff"+
            "\1\23\107\uffff\1\23",
            "\2\23\1\u0088\1\u009e\1\u0095\4\23\1\u00a3\1\u009b\1\166\1"+
            "\167\1\23\1\u0098\4\23\1\u009a\2\23\1\u0096\1\175\3\23\1\u009c"+
            "\1\u0097\2\23\1\u0081\1\23\1\173\3\23\1\u008a\1\23\1\u0086\1"+
            "\23\1\u0085\1\176\4\23\1\171\1\172\1\u0087\2\23\1\u0084\1\23"+
            "\1\u008b\1\u0083\1\177\2\23\1\u0082\5\23\1\u0089\1\u008e\7\23"+
            "\1\u0091\1\u0099\5\23\1\u008f\4\23\1\u0080\1\170\1\23\1\174"+
            "\4\23\1\u008c\3\23\1\u0090\3\23\1\u0094\1\u008d\6\23\1\u0093"+
            "\6\23\1\u0092\5\23\1\u00a0\1\u00a1\4\23\1\u009f\1\23\1\u00a2"+
            "\7\23\1\u009d\3\23\1\uffff\24\23\1\uffff\14\23\2\6\1\uffff\1"+
            "\23\4\6\1\uffff\1\6\1\uffff\1\6\1\uffff\13\6\2\uffff\1\6\3\uffff"+
            "\2\6\15\uffff\1\23\107\uffff\1\23",
            "\3\6\4\uffff\4\6\1\uffff\1\6\4\uffff\1\6\2\uffff\2\6\3\uffff"+
            "\2\6\2\uffff\1\6\1\uffff\1\6\3\uffff\1\6\1\uffff\1\6\1\uffff"+
            "\2\6\4\uffff\3\6\2\uffff\1\6\1\uffff\3\6\2\uffff\1\6\5\uffff"+
            "\2\6\7\uffff\2\6\5\uffff\1\6\4\uffff\2\6\1\uffff\1\6\4\uffff"+
            "\1\6\3\uffff\1\6\3\uffff\2\6\6\uffff\1\6\6\uffff\1\6\5\uffff"+
            "\2\6\4\uffff\1\6\1\uffff\1\6\7\uffff\1\6\45\uffff\2\6\1\uffff"+
            "\1\23\4\6\1\uffff\1\6\1\uffff\1\6\1\uffff\13\6\2\uffff\1\6\3"+
            "\uffff\2\6",
            "\3\6\4\uffff\4\6\1\uffff\1\6\4\uffff\1\6\2\uffff\2\6\3\uffff"+
            "\2\6\2\uffff\1\6\1\uffff\1\6\3\uffff\1\6\1\uffff\1\6\1\uffff"+
            "\2\6\4\uffff\3\6\2\uffff\1\6\1\uffff\3\6\2\uffff\1\6\5\uffff"+
            "\2\6\7\uffff\2\6\5\uffff\1\6\4\uffff\2\6\1\uffff\1\6\4\uffff"+
            "\1\6\3\uffff\1\6\3\uffff\2\6\6\uffff\1\6\6\uffff\1\6\5\uffff"+
            "\2\6\4\uffff\1\6\1\uffff\1\6\7\uffff\1\6\45\uffff\2\6\1\uffff"+
            "\1\23\4\6\1\uffff\1\6\1\uffff\1\6\1\uffff\13\6\2\uffff\1\6\3"+
            "\uffff\2\6",
            "\3\6\4\uffff\4\6\1\uffff\1\6\4\uffff\1\6\2\uffff\2\6\3\uffff"+
            "\2\6\2\uffff\1\6\1\uffff\1\6\3\uffff\1\6\1\uffff\1\6\1\uffff"+
            "\2\6\4\uffff\3\6\2\uffff\1\6\1\uffff\3\6\2\uffff\1\6\5\uffff"+
            "\2\6\7\uffff\2\6\5\uffff\1\6\4\uffff\2\6\1\uffff\1\6\4\uffff"+
            "\1\6\3\uffff\1\6\3\uffff\2\6\6\uffff\1\6\6\uffff\1\6\5\uffff"+
            "\2\6\4\uffff\1\6\1\uffff\1\6\7\uffff\1\6\45\uffff\1\23\1\6\1"+
            "\uffff\1\23\4\6\1\uffff\1\6\1\uffff\1\6\1\uffff\13\6\2\uffff"+
            "\1\31\3\uffff\2\6",
            "",
            "\3\6\4\uffff\4\6\1\uffff\1\6\4\uffff\1\6\2\uffff\2\6\3\uffff"+
            "\2\6\2\uffff\1\6\1\uffff\1\6\3\uffff\1\6\1\uffff\1\6\1\uffff"+
            "\2\6\4\uffff\3\6\2\uffff\1\6\1\uffff\3\6\2\uffff\1\6\5\uffff"+
            "\2\6\7\uffff\2\6\5\uffff\1\6\4\uffff\2\6\1\uffff\1\6\4\uffff"+
            "\1\6\3\uffff\1\6\3\uffff\2\6\6\uffff\1\6\6\uffff\1\6\5\uffff"+
            "\2\6\4\uffff\1\6\1\uffff\1\6\7\uffff\1\6\45\uffff\1\23\1\6\1"+
            "\uffff\1\23\4\6\1\uffff\1\6\1\uffff\1\6\1\uffff\13\6\2\uffff"+
            "\1\31\3\uffff\2\6",
            "\3\6\4\uffff\4\6\1\uffff\1\6\4\uffff\1\6\2\uffff\2\6\3\uffff"+
            "\2\6\2\uffff\1\6\1\uffff\1\6\3\uffff\1\6\1\uffff\1\6\1\uffff"+
            "\2\6\4\uffff\3\6\2\uffff\1\6\1\uffff\3\6\2\uffff\1\6\5\uffff"+
            "\2\6\7\uffff\2\6\5\uffff\1\6\4\uffff\2\6\1\uffff\1\6\4\uffff"+
            "\1\6\3\uffff\1\6\3\uffff\2\6\6\uffff\1\6\6\uffff\1\6\5\uffff"+
            "\2\6\4\uffff\1\6\1\uffff\1\6\7\uffff\1\6\45\uffff\1\23\1\6\1"+
            "\uffff\1\23\4\6\1\uffff\1\6\1\uffff\1\6\1\uffff\13\6\2\uffff"+
            "\1\31\3\uffff\2\6",
            "\2\23\1\u00b6\1\u00cc\1\u00c3\4\23\1\u00d1\1\u00c9\1\u00a4"+
            "\1\u00a5\1\23\1\u00c6\4\23\1\u00c8\2\23\1\u00c4\1\u00ab\3\23"+
            "\1\u00ca\1\u00c5\2\23\1\u00af\1\23\1\u00a9\3\23\1\u00b8\1\23"+
            "\1\u00b4\1\23\1\u00b3\1\u00ac\4\23\1\u00a7\1\u00a8\1\u00b5\2"+
            "\23\1\u00b2\1\23\1\u00b9\1\u00b1\1\u00ad\2\23\1\u00b0\5\23\1"+
            "\u00b7\1\u00bc\7\23\1\u00bf\1\u00c7\5\23\1\u00bd\4\23\1\u00ae"+
            "\1\u00a6\1\23\1\u00aa\4\23\1\u00ba\3\23\1\u00be\3\23\1\u00c2"+
            "\1\u00bb\6\23\1\u00c1\6\23\1\u00c0\5\23\1\u00ce\1\u00cf\4\23"+
            "\1\u00cd\1\23\1\u00d0\7\23\1\u00cb\3\23\1\uffff\24\23\1\uffff"+
            "\15\23\1\6\1\uffff\1\23\4\6\1\uffff\1\6\1\uffff\1\6\1\uffff"+
            "\13\6\2\uffff\1\31\3\uffff\2\6\15\uffff\1\23\107\uffff\1\23",
            "\3\6\4\uffff\4\6\1\uffff\1\6\4\uffff\1\6\2\uffff\2\6\3\uffff"+
            "\2\6\2\uffff\1\6\1\uffff\1\6\3\uffff\1\6\1\uffff\1\6\1\uffff"+
            "\2\6\4\uffff\3\6\2\uffff\1\6\1\uffff\3\6\2\uffff\1\6\5\uffff"+
            "\2\6\7\uffff\2\6\5\uffff\1\6\4\uffff\2\6\1\uffff\1\6\4\uffff"+
            "\1\6\3\uffff\1\6\3\uffff\2\6\6\uffff\1\6\6\uffff\1\6\5\uffff"+
            "\2\6\4\uffff\1\6\1\uffff\1\6\7\uffff\1\6\45\uffff\1\u00d3\1"+
            "\6\1\uffff\1\u00d2\4\6\1\uffff\1\6\1\uffff\1\6\1\uffff\13\6"+
            "\2\uffff\1\31\3\uffff\2\6",
            "\3\6\4\uffff\4\6\1\uffff\1\6\4\uffff\1\6\2\uffff\2\6\3\uffff"+
            "\2\6\2\uffff\1\6\1\uffff\1\6\3\uffff\1\6\1\uffff\1\6\1\uffff"+
            "\2\6\4\uffff\3\6\2\uffff\1\6\1\uffff\3\6\2\uffff\1\6\5\uffff"+
            "\2\6\7\uffff\2\6\5\uffff\1\6\4\uffff\2\6\1\uffff\1\6\4\uffff"+
            "\1\6\3\uffff\1\6\3\uffff\2\6\6\uffff\1\6\6\uffff\1\6\5\uffff"+
            "\2\6\4\uffff\1\6\1\uffff\1\6\7\uffff\1\6\45\uffff\1\u00d3\1"+
            "\6\2\uffff\4\6\1\uffff\1\6\1\uffff\1\6\1\uffff\13\6\2\uffff"+
            "\1\31\3\uffff\2\6",
            "\u008f\u00d4\1\uffff\24\u00d4\1\uffff\14\u00d4\15\uffff\1"+
            "\6\37\uffff\1\u00d4\107\uffff\1\u00d4",
            "\1\6\u00b0\uffff\1\u00d3\26\uffff\1\u00d3",
            "\1\6\u00b0\uffff\1\u00d3\26\uffff\1\u00d3",
            "\1\6\u00b0\uffff\1\u00d3\26\uffff\1\u00d3",
            "\1\6\164\uffff\1\u00d3\26\uffff\1\u00d3",
            "\u008f\6\1\uffff\24\6\1\uffff\15\6\1\uffff\1\6\1\u00d3\11"+
            "\uffff\4\6\5\uffff\4\6\1\u00d3\13\uffff\1\6\2\uffff\2\6\2\uffff"+
            "\1\6\6\uffff\6\6\73\uffff\1\6",
            "\u008f\6\1\uffff\24\6\1\uffff\15\6\1\uffff\1\6\1\u00d3\11"+
            "\uffff\4\6\5\uffff\4\6\1\u00d3\13\uffff\1\6\2\uffff\2\6\2\uffff"+
            "\1\6\6\uffff\6\6\73\uffff\1\6",
            "\u008f\6\1\uffff\24\6\1\uffff\15\6\1\uffff\1\6\1\u00d3\11"+
            "\uffff\4\6\5\uffff\4\6\1\u00d3\13\uffff\1\6\2\uffff\2\6\2\uffff"+
            "\1\6\6\uffff\6\6\73\uffff\1\6",
            "\u008f\6\1\uffff\24\6\1\uffff\15\6\1\uffff\1\6\1\u00d3\11"+
            "\uffff\4\6\5\uffff\4\6\1\u00d3\13\uffff\1\6\2\uffff\2\6\2\uffff"+
            "\1\6\6\uffff\6\6\73\uffff\1\6",
            "\u008f\6\1\uffff\24\6\1\uffff\15\6\1\uffff\1\6\1\u00d3\11"+
            "\uffff\4\6\5\uffff\4\6\1\u00d3\13\uffff\1\6\2\uffff\2\6\2\uffff"+
            "\1\6\6\uffff\6\6\73\uffff\1\6",
            "\u008f\6\1\uffff\24\6\1\uffff\15\6\1\uffff\1\6\1\u00d3\11"+
            "\uffff\4\6\5\uffff\4\6\1\u00d3\13\uffff\1\6\2\uffff\2\6\2\uffff"+
            "\1\6\6\uffff\6\6\73\uffff\1\6",
            "\u008f\6\1\uffff\24\6\1\uffff\15\6\1\uffff\1\6\1\u00d3\11"+
            "\uffff\4\6\5\uffff\4\6\1\u00d3\13\uffff\1\6\2\uffff\2\6\2\uffff"+
            "\1\6\6\uffff\6\6\73\uffff\1\6",
            "\u008f\6\1\uffff\24\6\1\uffff\15\6\1\uffff\1\6\1\u00d3\11"+
            "\uffff\4\6\5\uffff\4\6\1\u00d3\13\uffff\1\6\2\uffff\2\6\2\uffff"+
            "\1\6\6\uffff\6\6\73\uffff\1\6",
            "\u008f\6\1\uffff\24\6\1\uffff\15\6\1\uffff\1\6\1\u00d3\11"+
            "\uffff\4\6\5\uffff\4\6\1\u00d3\13\uffff\1\6\2\uffff\2\6\2\uffff"+
            "\1\6\6\uffff\6\6\73\uffff\1\6",
            "\u008f\6\1\uffff\24\6\1\uffff\15\6\1\uffff\1\6\1\u00d3\11"+
            "\uffff\4\6\5\uffff\4\6\1\u00d3\13\uffff\1\6\2\uffff\2\6\2\uffff"+
            "\1\6\6\uffff\6\6\73\uffff\1\6",
            "\u008f\6\1\uffff\24\6\1\uffff\15\6\1\uffff\1\6\1\u00d3\11"+
            "\uffff\4\6\5\uffff\4\6\1\u00d3\13\uffff\1\6\2\uffff\2\6\2\uffff"+
            "\1\6\6\uffff\6\6\73\uffff\1\6",
            "\u008f\6\1\uffff\24\6\1\uffff\15\6\1\uffff\1\6\1\u00d3\11"+
            "\uffff\4\6\5\uffff\4\6\1\u00d3\13\uffff\1\6\2\uffff\2\6\2\uffff"+
            "\1\6\6\uffff\6\6\73\uffff\1\6",
            "\u008f\6\1\uffff\24\6\1\uffff\15\6\1\uffff\1\6\1\u00d3\11"+
            "\uffff\4\6\5\uffff\4\6\1\u00d3\13\uffff\1\6\2\uffff\2\6\2\uffff"+
            "\1\6\6\uffff\6\6\73\uffff\1\6",
            "\u008f\6\1\uffff\24\6\1\uffff\15\6\1\uffff\1\6\1\u00d3\11"+
            "\uffff\4\6\5\uffff\4\6\1\u00d3\13\uffff\1\6\2\uffff\2\6\2\uffff"+
            "\1\6\6\uffff\6\6\73\uffff\1\6",
            "\u008f\6\1\uffff\24\6\1\uffff\15\6\1\uffff\1\6\1\u00d3\11"+
            "\uffff\4\6\5\uffff\4\6\1\u00d3\13\uffff\1\6\2\uffff\2\6\2\uffff"+
            "\1\6\6\uffff\6\6\73\uffff\1\6",
            "\u008f\6\1\uffff\24\6\1\uffff\15\6\1\uffff\1\6\1\u00d3\11"+
            "\uffff\4\6\5\uffff\4\6\1\u00d3\13\uffff\1\6\2\uffff\2\6\2\uffff"+
            "\1\6\6\uffff\6\6\73\uffff\1\6",
            "\1\6\2\uffff\1\6\73\uffff\1\6\1\u00d3\26\uffff\1\u00d3",
            "\1\6\1\u00d3\26\uffff\1\u00d3",
            "\u008f\6\1\uffff\24\6\1\uffff\15\6\1\uffff\1\6\1\u00d3\11"+
            "\uffff\4\6\5\uffff\4\6\1\u00d3\13\uffff\1\6\2\uffff\2\6\2\uffff"+
            "\1\6\6\uffff\6\6\73\uffff\1\6",
            "\1\6\u00aa\uffff\1\u00d3\26\uffff\1\u00d3",
            "\1\6\u00aa\uffff\1\u00d3\26\uffff\1\u00d3",
            "\1\6\161\uffff\1\u00d3\26\uffff\1\u00d3",
            "\1\6\1\u00d3\26\uffff\1\u00d3",
            "\u008f\6\1\uffff\24\6\1\uffff\15\6\1\uffff\1\6\1\u00d3\11"+
            "\uffff\4\6\5\uffff\4\6\1\u00d3\13\uffff\1\6\2\uffff\2\6\2\uffff"+
            "\1\6\6\uffff\6\6\73\uffff\1\6",
            "\1\6\147\uffff\1\6\5\uffff\1\6\4\uffff\1\6\72\uffff\1\6\1"+
            "\u00d3\26\uffff\1\u00d3",
            "\1\6\115\uffff\1\u00d3\26\uffff\1\u00d3",
            "\1\6\147\uffff\1\6\5\uffff\1\6\4\uffff\1\6\72\uffff\1\6\1"+
            "\u00d3\26\uffff\1\u00d3",
            "\1\6\15\uffff\1\6\10\uffff\1\6\20\uffff\1\6\13\uffff\1\6\7"+
            "\uffff\1\6\6\uffff\1\6\14\uffff\1\6\3\uffff\1\6\4\uffff\1\6"+
            "\114\uffff\1\u00d3\7\uffff\1\6\16\uffff\1\u00d3",
            "\1\6\15\uffff\1\6\10\uffff\1\6\20\uffff\1\6\13\uffff\1\6\7"+
            "\uffff\1\6\6\uffff\1\6\14\uffff\1\6\3\uffff\1\6\4\uffff\1\6"+
            "\114\uffff\1\u00d3\7\uffff\1\6\16\uffff\1\u00d3",
            "\1\6\14\uffff\1\6\176\uffff\1\u00d3\26\uffff\1\u00d3",
            "\1\u00d3\26\uffff\1\u00d3\16\uffff\2\6",
            "\u008f\6\1\uffff\24\6\1\uffff\15\6\1\uffff\1\6\1\u00d3\11"+
            "\uffff\4\6\5\uffff\4\6\1\u00d3\13\uffff\1\6\2\uffff\2\6\2\uffff"+
            "\1\6\6\uffff\6\6\73\uffff\1\6",
            "\1\6\150\uffff\1\6\1\u00d3\26\uffff\1\u00d3",
            "\u008f\6\1\uffff\24\6\1\uffff\14\6\2\uffff\1\6\1\u00d3\26"+
            "\uffff\1\u00d3\22\uffff\1\6\107\uffff\1\6",
            "\u008f\6\1\uffff\24\6\1\uffff\15\6\1\uffff\1\6\1\u00d3\11"+
            "\uffff\4\6\5\uffff\4\6\1\u00d3\13\uffff\1\6\2\uffff\2\6\2\uffff"+
            "\1\6\6\uffff\6\6\73\uffff\1\6",
            "\u008f\6\1\uffff\24\6\1\uffff\15\6\1\uffff\1\6\1\u00d3\11"+
            "\uffff\4\6\5\uffff\4\6\1\u00d3\13\uffff\1\6\2\uffff\2\6\2\uffff"+
            "\1\6\6\uffff\6\6\73\uffff\1\6",
            "\u008f\6\1\uffff\24\6\1\uffff\15\6\1\uffff\1\6\1\u00d3\11"+
            "\uffff\4\6\5\uffff\4\6\1\u00d3\13\uffff\1\6\2\uffff\2\6\2\uffff"+
            "\1\6\6\uffff\6\6\73\uffff\1\6",
            "\u008f\6\1\uffff\24\6\1\uffff\15\6\1\uffff\1\6\1\u00d3\11"+
            "\uffff\4\6\5\uffff\4\6\1\u00d3\13\uffff\1\6\2\uffff\2\6\2\uffff"+
            "\1\6\6\uffff\6\6\73\uffff\1\6",
            "\u008f\6\1\uffff\24\6\1\uffff\15\6\1\uffff\1\6\1\u00d3\11"+
            "\uffff\4\6\5\uffff\4\6\1\u00d3\13\uffff\1\6\2\uffff\2\6\2\uffff"+
            "\1\6\6\uffff\6\6\73\uffff\1\6",
            "\u008f\6\1\uffff\24\6\1\uffff\15\6\1\uffff\1\6\1\u00d3\11"+
            "\uffff\4\6\5\uffff\4\6\1\u00d3\13\uffff\1\6\2\uffff\2\6\2\uffff"+
            "\1\6\6\uffff\6\6\73\uffff\1\6",
            "\u008f\6\1\uffff\24\6\1\uffff\15\6\1\uffff\1\6\1\u00d3\11"+
            "\uffff\4\6\5\uffff\4\6\1\u00d3\13\uffff\1\6\2\uffff\2\6\2\uffff"+
            "\1\6\6\uffff\6\6\73\uffff\1\6",
            "\u008f\6\1\uffff\24\6\1\uffff\15\6\1\uffff\1\6\1\u00d3\11"+
            "\uffff\1\6\2\uffff\1\6\5\uffff\4\6\1\u00d3\13\uffff\1\6\2\uffff"+
            "\2\6\2\uffff\1\6\7\uffff\5\6\73\uffff\1\6",
            "\1\6\u00b0\uffff\1\u00d3\26\uffff\1\u00d3",
            "\1\6\u00b0\uffff\1\u00d3\26\uffff\1\u00d3",
            "\1\6\u00b0\uffff\1\u00d3\26\uffff\1\u00d3",
            "\1\6\164\uffff\1\u00d3\26\uffff\1\u00d3",
            "\u008f\6\1\uffff\24\6\1\uffff\15\6\1\uffff\1\6\1\u00d3\11"+
            "\uffff\4\6\5\uffff\4\6\1\u00d3\13\uffff\1\6\2\uffff\2\6\2\uffff"+
            "\1\6\6\uffff\6\6\73\uffff\1\6",
            "\u008f\6\1\uffff\24\6\1\uffff\15\6\1\uffff\1\6\1\u00d3\11"+
            "\uffff\4\6\5\uffff\4\6\1\u00d3\13\uffff\1\6\2\uffff\2\6\2\uffff"+
            "\1\6\6\uffff\6\6\73\uffff\1\6",
            "\u008f\6\1\uffff\24\6\1\uffff\15\6\1\uffff\1\6\1\u00d3\11"+
            "\uffff\4\6\5\uffff\4\6\1\u00d3\13\uffff\1\6\2\uffff\2\6\2\uffff"+
            "\1\6\6\uffff\6\6\73\uffff\1\6",
            "\u008f\6\1\uffff\24\6\1\uffff\15\6\1\uffff\1\6\1\u00d3\11"+
            "\uffff\4\6\5\uffff\4\6\1\u00d3\13\uffff\1\6\2\uffff\2\6\2\uffff"+
            "\1\6\6\uffff\6\6\73\uffff\1\6",
            "\u008f\6\1\uffff\24\6\1\uffff\15\6\1\uffff\1\6\1\u00d3\11"+
            "\uffff\4\6\5\uffff\4\6\1\u00d3\13\uffff\1\6\2\uffff\2\6\2\uffff"+
            "\1\6\6\uffff\6\6\73\uffff\1\6",
            "\u008f\6\1\uffff\24\6\1\uffff\15\6\1\uffff\1\6\1\u00d3\11"+
            "\uffff\4\6\5\uffff\4\6\1\u00d3\13\uffff\1\6\2\uffff\2\6\2\uffff"+
            "\1\6\6\uffff\6\6\73\uffff\1\6",
            "\u008f\6\1\uffff\24\6\1\uffff\15\6\1\uffff\1\6\1\u00d3\11"+
            "\uffff\4\6\5\uffff\4\6\1\u00d3\13\uffff\1\6\2\uffff\2\6\2\uffff"+
            "\1\6\6\uffff\6\6\73\uffff\1\6",
            "\u008f\6\1\uffff\24\6\1\uffff\15\6\1\uffff\1\6\1\u00d3\11"+
            "\uffff\4\6\5\uffff\4\6\1\u00d3\13\uffff\1\6\2\uffff\2\6\2\uffff"+
            "\1\6\6\uffff\6\6\73\uffff\1\6",
            "\u008f\6\1\uffff\24\6\1\uffff\15\6\1\uffff\1\6\1\u00d3\11"+
            "\uffff\4\6\5\uffff\4\6\1\u00d3\13\uffff\1\6\2\uffff\2\6\2\uffff"+
            "\1\6\6\uffff\6\6\73\uffff\1\6",
            "\u008f\6\1\uffff\24\6\1\uffff\15\6\1\uffff\1\6\1\u00d3\11"+
            "\uffff\4\6\5\uffff\4\6\1\u00d3\13\uffff\1\6\2\uffff\2\6\2\uffff"+
            "\1\6\6\uffff\6\6\73\uffff\1\6",
            "\u008f\6\1\uffff\24\6\1\uffff\15\6\1\uffff\1\6\1\u00d3\11"+
            "\uffff\4\6\5\uffff\4\6\1\u00d3\13\uffff\1\6\2\uffff\2\6\2\uffff"+
            "\1\6\6\uffff\6\6\73\uffff\1\6",
            "\u008f\6\1\uffff\24\6\1\uffff\15\6\1\uffff\1\6\1\u00d3\11"+
            "\uffff\4\6\5\uffff\4\6\1\u00d3\13\uffff\1\6\2\uffff\2\6\2\uffff"+
            "\1\6\6\uffff\6\6\73\uffff\1\6",
            "\u008f\6\1\uffff\24\6\1\uffff\15\6\1\uffff\1\6\1\u00d3\11"+
            "\uffff\4\6\5\uffff\4\6\1\u00d3\13\uffff\1\6\2\uffff\2\6\2\uffff"+
            "\1\6\6\uffff\6\6\73\uffff\1\6",
            "\u008f\6\1\uffff\24\6\1\uffff\15\6\1\uffff\1\6\1\u00d3\11"+
            "\uffff\4\6\5\uffff\4\6\1\u00d3\13\uffff\1\6\2\uffff\2\6\2\uffff"+
            "\1\6\6\uffff\6\6\73\uffff\1\6",
            "\u008f\6\1\uffff\24\6\1\uffff\15\6\1\uffff\1\6\1\u00d3\11"+
            "\uffff\4\6\5\uffff\4\6\1\u00d3\13\uffff\1\6\2\uffff\2\6\2\uffff"+
            "\1\6\6\uffff\6\6\73\uffff\1\6",
            "\u008f\6\1\uffff\24\6\1\uffff\15\6\1\uffff\1\6\1\u00d3\11"+
            "\uffff\4\6\5\uffff\4\6\1\u00d3\13\uffff\1\6\2\uffff\2\6\2\uffff"+
            "\1\6\6\uffff\6\6\73\uffff\1\6",
            "\1\6\2\uffff\1\6\73\uffff\1\6\1\u00d3\26\uffff\1\u00d3",
            "\1\6\1\u00d3\26\uffff\1\u00d3",
            "\u008f\6\1\uffff\24\6\1\uffff\15\6\1\uffff\1\6\1\u00d3\11"+
            "\uffff\4\6\5\uffff\4\6\1\u00d3\13\uffff\1\6\2\uffff\2\6\2\uffff"+
            "\1\6\6\uffff\6\6\73\uffff\1\6",
            "\1\6\u00aa\uffff\1\u00d3\26\uffff\1\u00d3",
            "\1\6\u00aa\uffff\1\u00d3\26\uffff\1\u00d3",
            "\1\6\161\uffff\1\u00d3\26\uffff\1\u00d3",
            "\1\6\1\u00d3\26\uffff\1\u00d3",
            "\u008f\6\1\uffff\24\6\1\uffff\15\6\1\uffff\1\6\1\u00d3\11"+
            "\uffff\4\6\5\uffff\4\6\1\u00d3\13\uffff\1\6\2\uffff\2\6\2\uffff"+
            "\1\6\6\uffff\6\6\73\uffff\1\6",
            "\1\6\147\uffff\1\6\5\uffff\1\6\4\uffff\1\6\72\uffff\1\6\1"+
            "\u00d3\26\uffff\1\u00d3",
            "\1\6\115\uffff\1\u00d3\26\uffff\1\u00d3",
            "\1\6\147\uffff\1\6\5\uffff\1\6\4\uffff\1\6\72\uffff\1\6\1"+
            "\u00d3\26\uffff\1\u00d3",
            "\1\6\15\uffff\1\6\10\uffff\1\6\20\uffff\1\6\13\uffff\1\6\7"+
            "\uffff\1\6\6\uffff\1\6\14\uffff\1\6\3\uffff\1\6\4\uffff\1\6"+
            "\114\uffff\1\u00d3\7\uffff\1\6\16\uffff\1\u00d3",
            "\1\6\15\uffff\1\6\10\uffff\1\6\20\uffff\1\6\13\uffff\1\6\7"+
            "\uffff\1\6\6\uffff\1\6\14\uffff\1\6\3\uffff\1\6\4\uffff\1\6"+
            "\114\uffff\1\u00d3\7\uffff\1\6\16\uffff\1\u00d3",
            "\1\6\14\uffff\1\6\176\uffff\1\u00d3\26\uffff\1\u00d3",
            "\1\u00d3\26\uffff\1\u00d3\16\uffff\2\6",
            "\u008f\6\1\uffff\24\6\1\uffff\15\6\1\uffff\1\6\1\u00d3\11"+
            "\uffff\4\6\5\uffff\4\6\1\u00d3\13\uffff\1\6\2\uffff\2\6\2\uffff"+
            "\1\6\6\uffff\6\6\73\uffff\1\6",
            "\1\6\150\uffff\1\6\1\u00d3\26\uffff\1\u00d3",
            "\u008f\6\1\uffff\24\6\1\uffff\14\6\2\uffff\1\6\1\u00d3\26"+
            "\uffff\1\u00d3\22\uffff\1\6\107\uffff\1\6",
            "\u008f\6\1\uffff\24\6\1\uffff\15\6\1\uffff\1\6\1\u00d3\11"+
            "\uffff\4\6\5\uffff\4\6\1\u00d3\13\uffff\1\6\2\uffff\2\6\2\uffff"+
            "\1\6\6\uffff\6\6\73\uffff\1\6",
            "\u008f\6\1\uffff\24\6\1\uffff\15\6\1\uffff\1\6\1\u00d3\11"+
            "\uffff\4\6\5\uffff\4\6\1\u00d3\13\uffff\1\6\2\uffff\2\6\2\uffff"+
            "\1\6\6\uffff\6\6\73\uffff\1\6",
            "\u008f\6\1\uffff\24\6\1\uffff\15\6\1\uffff\1\6\1\u00d3\11"+
            "\uffff\4\6\5\uffff\4\6\1\u00d3\13\uffff\1\6\2\uffff\2\6\2\uffff"+
            "\1\6\6\uffff\6\6\73\uffff\1\6",
            "\u008f\6\1\uffff\24\6\1\uffff\15\6\1\uffff\1\6\1\u00d3\11"+
            "\uffff\4\6\5\uffff\4\6\1\u00d3\13\uffff\1\6\2\uffff\2\6\2\uffff"+
            "\1\6\6\uffff\6\6\73\uffff\1\6",
            "\u008f\6\1\uffff\24\6\1\uffff\15\6\1\uffff\1\6\1\u00d3\11"+
            "\uffff\4\6\5\uffff\4\6\1\u00d3\13\uffff\1\6\2\uffff\2\6\2\uffff"+
            "\1\6\6\uffff\6\6\73\uffff\1\6",
            "\u008f\6\1\uffff\24\6\1\uffff\15\6\1\uffff\1\6\1\u00d3\11"+
            "\uffff\4\6\5\uffff\4\6\1\u00d3\13\uffff\1\6\2\uffff\2\6\2\uffff"+
            "\1\6\6\uffff\6\6\73\uffff\1\6",
            "\u008f\6\1\uffff\24\6\1\uffff\15\6\1\uffff\1\6\1\u00d3\11"+
            "\uffff\4\6\5\uffff\4\6\1\u00d3\13\uffff\1\6\2\uffff\2\6\2\uffff"+
            "\1\6\6\uffff\6\6\73\uffff\1\6",
            "\u008f\6\1\uffff\24\6\1\uffff\15\6\1\uffff\1\6\1\u00d3\11"+
            "\uffff\1\6\2\uffff\1\6\5\uffff\4\6\1\u00d3\13\uffff\1\6\2\uffff"+
            "\2\6\2\uffff\1\6\7\uffff\5\6\73\uffff\1\6",
            "\1\6\u00b0\uffff\1\u00d3",
            "\1\6\u00b0\uffff\1\u00d3",
            "\1\6\u00b0\uffff\1\u00d3",
            "\1\6\164\uffff\1\u00d3",
            "\u008f\6\1\uffff\24\6\1\uffff\15\6\1\uffff\1\6\1\u00d3\11"+
            "\uffff\4\6\5\uffff\4\6\14\uffff\1\6\2\uffff\2\6\2\uffff\1\6"+
            "\6\uffff\6\6\73\uffff\1\6",
            "\u008f\6\1\uffff\24\6\1\uffff\15\6\1\uffff\1\6\1\u00d3\11"+
            "\uffff\4\6\5\uffff\4\6\14\uffff\1\6\2\uffff\2\6\2\uffff\1\6"+
            "\6\uffff\6\6\73\uffff\1\6",
            "\u008f\6\1\uffff\24\6\1\uffff\15\6\1\uffff\1\6\1\u00d3\11"+
            "\uffff\4\6\5\uffff\4\6\14\uffff\1\6\2\uffff\2\6\2\uffff\1\6"+
            "\6\uffff\6\6\73\uffff\1\6",
            "\u008f\6\1\uffff\24\6\1\uffff\15\6\1\uffff\1\6\1\u00d3\11"+
            "\uffff\4\6\5\uffff\4\6\14\uffff\1\6\2\uffff\2\6\2\uffff\1\6"+
            "\6\uffff\6\6\73\uffff\1\6",
            "\u008f\6\1\uffff\24\6\1\uffff\15\6\1\uffff\1\6\1\u00d3\11"+
            "\uffff\4\6\5\uffff\4\6\14\uffff\1\6\2\uffff\2\6\2\uffff\1\6"+
            "\6\uffff\6\6\73\uffff\1\6",
            "\u008f\6\1\uffff\24\6\1\uffff\15\6\1\uffff\1\6\1\u00d3\11"+
            "\uffff\4\6\5\uffff\4\6\14\uffff\1\6\2\uffff\2\6\2\uffff\1\6"+
            "\6\uffff\6\6\73\uffff\1\6",
            "\u008f\6\1\uffff\24\6\1\uffff\15\6\1\uffff\1\6\1\u00d3\11"+
            "\uffff\4\6\5\uffff\4\6\14\uffff\1\6\2\uffff\2\6\2\uffff\1\6"+
            "\6\uffff\6\6\73\uffff\1\6",
            "\u008f\6\1\uffff\24\6\1\uffff\15\6\1\uffff\1\6\1\u00d3\11"+
            "\uffff\4\6\5\uffff\4\6\14\uffff\1\6\2\uffff\2\6\2\uffff\1\6"+
            "\6\uffff\6\6\73\uffff\1\6",
            "\u008f\6\1\uffff\24\6\1\uffff\15\6\1\uffff\1\6\1\u00d3\11"+
            "\uffff\4\6\5\uffff\4\6\14\uffff\1\6\2\uffff\2\6\2\uffff\1\6"+
            "\6\uffff\6\6\73\uffff\1\6",
            "\u008f\6\1\uffff\24\6\1\uffff\15\6\1\uffff\1\6\1\u00d3\11"+
            "\uffff\4\6\5\uffff\4\6\14\uffff\1\6\2\uffff\2\6\2\uffff\1\6"+
            "\6\uffff\6\6\73\uffff\1\6",
            "\u008f\6\1\uffff\24\6\1\uffff\15\6\1\uffff\1\6\1\u00d3\11"+
            "\uffff\4\6\5\uffff\4\6\14\uffff\1\6\2\uffff\2\6\2\uffff\1\6"+
            "\6\uffff\6\6\73\uffff\1\6",
            "\u008f\6\1\uffff\24\6\1\uffff\15\6\1\uffff\1\6\1\u00d3\11"+
            "\uffff\4\6\5\uffff\4\6\14\uffff\1\6\2\uffff\2\6\2\uffff\1\6"+
            "\6\uffff\6\6\73\uffff\1\6",
            "\u008f\6\1\uffff\24\6\1\uffff\15\6\1\uffff\1\6\1\u00d3\11"+
            "\uffff\4\6\5\uffff\4\6\14\uffff\1\6\2\uffff\2\6\2\uffff\1\6"+
            "\6\uffff\6\6\73\uffff\1\6",
            "\u008f\6\1\uffff\24\6\1\uffff\15\6\1\uffff\1\6\1\u00d3\11"+
            "\uffff\4\6\5\uffff\4\6\14\uffff\1\6\2\uffff\2\6\2\uffff\1\6"+
            "\6\uffff\6\6\73\uffff\1\6",
            "\u008f\6\1\uffff\24\6\1\uffff\15\6\1\uffff\1\6\1\u00d3\11"+
            "\uffff\4\6\5\uffff\4\6\14\uffff\1\6\2\uffff\2\6\2\uffff\1\6"+
            "\6\uffff\6\6\73\uffff\1\6",
            "\u008f\6\1\uffff\24\6\1\uffff\15\6\1\uffff\1\6\1\u00d3\11"+
            "\uffff\4\6\5\uffff\4\6\14\uffff\1\6\2\uffff\2\6\2\uffff\1\6"+
            "\6\uffff\6\6\73\uffff\1\6",
            "\1\6\2\uffff\1\6\73\uffff\1\6\1\u00d3",
            "\1\6\1\u00d3",
            "\u008f\6\1\uffff\24\6\1\uffff\15\6\1\uffff\1\6\1\u00d3\11"+
            "\uffff\4\6\5\uffff\4\6\14\uffff\1\6\2\uffff\2\6\2\uffff\1\6"+
            "\6\uffff\6\6\73\uffff\1\6",
            "\1\6\u00aa\uffff\1\u00d3",
            "\1\6\u00aa\uffff\1\u00d3",
            "\1\6\161\uffff\1\u00d3",
            "\1\6\1\u00d3",
            "\u008f\6\1\uffff\24\6\1\uffff\15\6\1\uffff\1\6\1\u00d3\11"+
            "\uffff\4\6\5\uffff\4\6\14\uffff\1\6\2\uffff\2\6\2\uffff\1\6"+
            "\6\uffff\6\6\73\uffff\1\6",
            "\1\6\147\uffff\1\6\5\uffff\1\6\4\uffff\1\6\72\uffff\1\6\1"+
            "\u00d3",
            "\1\6\115\uffff\1\u00d3",
            "\1\6\147\uffff\1\6\5\uffff\1\6\4\uffff\1\6\72\uffff\1\6\1"+
            "\u00d3",
            "\1\6\15\uffff\1\6\10\uffff\1\6\20\uffff\1\6\13\uffff\1\6\7"+
            "\uffff\1\6\6\uffff\1\6\14\uffff\1\6\3\uffff\1\6\4\uffff\1\6"+
            "\114\uffff\1\u00d3\7\uffff\1\6",
            "\1\6\15\uffff\1\6\10\uffff\1\6\20\uffff\1\6\13\uffff\1\6\7"+
            "\uffff\1\6\6\uffff\1\6\14\uffff\1\6\3\uffff\1\6\4\uffff\1\6"+
            "\114\uffff\1\u00d3\7\uffff\1\6",
            "\1\6\14\uffff\1\6\176\uffff\1\u00d3",
            "\1\u00d3\45\uffff\2\6",
            "\u008f\6\1\uffff\24\6\1\uffff\15\6\1\uffff\1\6\1\u00d3\11"+
            "\uffff\4\6\5\uffff\4\6\14\uffff\1\6\2\uffff\2\6\2\uffff\1\6"+
            "\6\uffff\6\6\73\uffff\1\6",
            "\1\6\150\uffff\1\6\1\u00d3",
            "\u008f\6\1\uffff\24\6\1\uffff\14\6\2\uffff\1\6\1\u00d3\51"+
            "\uffff\1\6\107\uffff\1\6",
            "\u008f\6\1\uffff\24\6\1\uffff\15\6\1\uffff\1\6\1\u00d3\11"+
            "\uffff\4\6\5\uffff\4\6\14\uffff\1\6\2\uffff\2\6\2\uffff\1\6"+
            "\6\uffff\6\6\73\uffff\1\6",
            "\u008f\6\1\uffff\24\6\1\uffff\15\6\1\uffff\1\6\1\u00d3\11"+
            "\uffff\4\6\5\uffff\4\6\14\uffff\1\6\2\uffff\2\6\2\uffff\1\6"+
            "\6\uffff\6\6\73\uffff\1\6",
            "\u008f\6\1\uffff\24\6\1\uffff\15\6\1\uffff\1\6\1\u00d3\11"+
            "\uffff\4\6\5\uffff\4\6\14\uffff\1\6\2\uffff\2\6\2\uffff\1\6"+
            "\6\uffff\6\6\73\uffff\1\6",
            "\u008f\6\1\uffff\24\6\1\uffff\15\6\1\uffff\1\6\1\u00d3\11"+
            "\uffff\4\6\5\uffff\4\6\14\uffff\1\6\2\uffff\2\6\2\uffff\1\6"+
            "\6\uffff\6\6\73\uffff\1\6",
            "\u008f\6\1\uffff\24\6\1\uffff\15\6\1\uffff\1\6\1\u00d3\11"+
            "\uffff\4\6\5\uffff\4\6\14\uffff\1\6\2\uffff\2\6\2\uffff\1\6"+
            "\6\uffff\6\6\73\uffff\1\6",
            "\u008f\6\1\uffff\24\6\1\uffff\15\6\1\uffff\1\6\1\u00d3\11"+
            "\uffff\4\6\5\uffff\4\6\14\uffff\1\6\2\uffff\2\6\2\uffff\1\6"+
            "\6\uffff\6\6\73\uffff\1\6",
            "\u008f\6\1\uffff\24\6\1\uffff\15\6\1\uffff\1\6\1\u00d3\11"+
            "\uffff\4\6\5\uffff\4\6\14\uffff\1\6\2\uffff\2\6\2\uffff\1\6"+
            "\6\uffff\6\6\73\uffff\1\6",
            "\u008f\6\1\uffff\24\6\1\uffff\15\6\1\uffff\1\6\1\u00d3\11"+
            "\uffff\1\6\2\uffff\1\6\5\uffff\4\6\14\uffff\1\6\2\uffff\2\6"+
            "\2\uffff\1\6\7\uffff\5\6\73\uffff\1\6",
            "\1\6\u00b0\uffff\1\u00d3",
            "\1\6\u00b0\uffff\1\u00d3",
            "\1\6\u00b0\uffff\1\u00d3",
            "\1\6\164\uffff\1\u00d3",
            "\u008f\6\1\uffff\24\6\1\uffff\15\6\1\uffff\1\6\1\u00d3\11"+
            "\uffff\4\6\5\uffff\4\6\14\uffff\1\6\2\uffff\2\6\2\uffff\1\6"+
            "\6\uffff\6\6\73\uffff\1\6",
            "\u008f\6\1\uffff\24\6\1\uffff\15\6\1\uffff\1\6\1\u00d3\11"+
            "\uffff\4\6\5\uffff\4\6\14\uffff\1\6\2\uffff\2\6\2\uffff\1\6"+
            "\6\uffff\6\6\73\uffff\1\6",
            "\u008f\6\1\uffff\24\6\1\uffff\15\6\1\uffff\1\6\1\u00d3\11"+
            "\uffff\4\6\5\uffff\4\6\14\uffff\1\6\2\uffff\2\6\2\uffff\1\6"+
            "\6\uffff\6\6\73\uffff\1\6",
            "\u008f\6\1\uffff\24\6\1\uffff\15\6\1\uffff\1\6\1\u00d3\11"+
            "\uffff\4\6\5\uffff\4\6\14\uffff\1\6\2\uffff\2\6\2\uffff\1\6"+
            "\6\uffff\6\6\73\uffff\1\6",
            "\u008f\6\1\uffff\24\6\1\uffff\15\6\1\uffff\1\6\1\u00d3\11"+
            "\uffff\4\6\5\uffff\4\6\14\uffff\1\6\2\uffff\2\6\2\uffff\1\6"+
            "\6\uffff\6\6\73\uffff\1\6",
            "\u008f\6\1\uffff\24\6\1\uffff\15\6\1\uffff\1\6\1\u00d3\11"+
            "\uffff\4\6\5\uffff\4\6\14\uffff\1\6\2\uffff\2\6\2\uffff\1\6"+
            "\6\uffff\6\6\73\uffff\1\6",
            "\u008f\6\1\uffff\24\6\1\uffff\15\6\1\uffff\1\6\1\u00d3\11"+
            "\uffff\4\6\5\uffff\4\6\14\uffff\1\6\2\uffff\2\6\2\uffff\1\6"+
            "\6\uffff\6\6\73\uffff\1\6",
            "\u008f\6\1\uffff\24\6\1\uffff\15\6\1\uffff\1\6\1\u00d3\11"+
            "\uffff\4\6\5\uffff\4\6\14\uffff\1\6\2\uffff\2\6\2\uffff\1\6"+
            "\6\uffff\6\6\73\uffff\1\6",
            "\u008f\6\1\uffff\24\6\1\uffff\15\6\1\uffff\1\6\1\u00d3\11"+
            "\uffff\4\6\5\uffff\4\6\14\uffff\1\6\2\uffff\2\6\2\uffff\1\6"+
            "\6\uffff\6\6\73\uffff\1\6",
            "\u008f\6\1\uffff\24\6\1\uffff\15\6\1\uffff\1\6\1\u00d3\11"+
            "\uffff\4\6\5\uffff\4\6\14\uffff\1\6\2\uffff\2\6\2\uffff\1\6"+
            "\6\uffff\6\6\73\uffff\1\6",
            "\u008f\6\1\uffff\24\6\1\uffff\15\6\1\uffff\1\6\1\u00d3\11"+
            "\uffff\4\6\5\uffff\4\6\14\uffff\1\6\2\uffff\2\6\2\uffff\1\6"+
            "\6\uffff\6\6\73\uffff\1\6",
            "\u008f\6\1\uffff\24\6\1\uffff\15\6\1\uffff\1\6\1\u00d3\11"+
            "\uffff\4\6\5\uffff\4\6\14\uffff\1\6\2\uffff\2\6\2\uffff\1\6"+
            "\6\uffff\6\6\73\uffff\1\6",
            "\u008f\6\1\uffff\24\6\1\uffff\15\6\1\uffff\1\6\1\u00d3\11"+
            "\uffff\4\6\5\uffff\4\6\14\uffff\1\6\2\uffff\2\6\2\uffff\1\6"+
            "\6\uffff\6\6\73\uffff\1\6",
            "\u008f\6\1\uffff\24\6\1\uffff\15\6\1\uffff\1\6\1\u00d3\11"+
            "\uffff\4\6\5\uffff\4\6\14\uffff\1\6\2\uffff\2\6\2\uffff\1\6"+
            "\6\uffff\6\6\73\uffff\1\6",
            "\u008f\6\1\uffff\24\6\1\uffff\15\6\1\uffff\1\6\1\u00d3\11"+
            "\uffff\4\6\5\uffff\4\6\14\uffff\1\6\2\uffff\2\6\2\uffff\1\6"+
            "\6\uffff\6\6\73\uffff\1\6",
            "\u008f\6\1\uffff\24\6\1\uffff\15\6\1\uffff\1\6\1\u00d3\11"+
            "\uffff\4\6\5\uffff\4\6\14\uffff\1\6\2\uffff\2\6\2\uffff\1\6"+
            "\6\uffff\6\6\73\uffff\1\6",
            "\1\6\2\uffff\1\6\73\uffff\1\6\1\u00d3",
            "\1\6\1\u00d3",
            "\u008f\6\1\uffff\24\6\1\uffff\15\6\1\uffff\1\6\1\u00d3\11"+
            "\uffff\4\6\5\uffff\4\6\14\uffff\1\6\2\uffff\2\6\2\uffff\1\6"+
            "\6\uffff\6\6\73\uffff\1\6",
            "\1\6\u00aa\uffff\1\u00d3",
            "\1\6\u00aa\uffff\1\u00d3",
            "\1\6\161\uffff\1\u00d3",
            "\1\6\1\u00d3",
            "\u008f\6\1\uffff\24\6\1\uffff\15\6\1\uffff\1\6\1\u00d3\11"+
            "\uffff\4\6\5\uffff\4\6\14\uffff\1\6\2\uffff\2\6\2\uffff\1\6"+
            "\6\uffff\6\6\73\uffff\1\6",
            "\1\6\147\uffff\1\6\5\uffff\1\6\4\uffff\1\6\72\uffff\1\6\1"+
            "\u00d3",
            "\1\6\115\uffff\1\u00d3",
            "\1\6\147\uffff\1\6\5\uffff\1\6\4\uffff\1\6\72\uffff\1\6\1"+
            "\u00d3",
            "\1\6\15\uffff\1\6\10\uffff\1\6\20\uffff\1\6\13\uffff\1\6\7"+
            "\uffff\1\6\6\uffff\1\6\14\uffff\1\6\3\uffff\1\6\4\uffff\1\6"+
            "\114\uffff\1\u00d3\7\uffff\1\6",
            "\1\6\15\uffff\1\6\10\uffff\1\6\20\uffff\1\6\13\uffff\1\6\7"+
            "\uffff\1\6\6\uffff\1\6\14\uffff\1\6\3\uffff\1\6\4\uffff\1\6"+
            "\114\uffff\1\u00d3\7\uffff\1\6",
            "\1\6\14\uffff\1\6\176\uffff\1\u00d3",
            "\1\u00d3\45\uffff\2\6",
            "\u008f\6\1\uffff\24\6\1\uffff\15\6\1\uffff\1\6\1\u00d3\11"+
            "\uffff\4\6\5\uffff\4\6\14\uffff\1\6\2\uffff\2\6\2\uffff\1\6"+
            "\6\uffff\6\6\73\uffff\1\6",
            "\1\6\150\uffff\1\6\1\u00d3",
            "\u008f\6\1\uffff\24\6\1\uffff\14\6\2\uffff\1\6\1\u00d3\51"+
            "\uffff\1\6\107\uffff\1\6",
            "\u008f\6\1\uffff\24\6\1\uffff\15\6\1\uffff\1\6\1\u00d3\11"+
            "\uffff\4\6\5\uffff\4\6\14\uffff\1\6\2\uffff\2\6\2\uffff\1\6"+
            "\6\uffff\6\6\73\uffff\1\6",
            "\u008f\6\1\uffff\24\6\1\uffff\15\6\1\uffff\1\6\1\u00d3\11"+
            "\uffff\4\6\5\uffff\4\6\14\uffff\1\6\2\uffff\2\6\2\uffff\1\6"+
            "\6\uffff\6\6\73\uffff\1\6",
            "\u008f\6\1\uffff\24\6\1\uffff\15\6\1\uffff\1\6\1\u00d3\11"+
            "\uffff\4\6\5\uffff\4\6\14\uffff\1\6\2\uffff\2\6\2\uffff\1\6"+
            "\6\uffff\6\6\73\uffff\1\6",
            "\u008f\6\1\uffff\24\6\1\uffff\15\6\1\uffff\1\6\1\u00d3\11"+
            "\uffff\4\6\5\uffff\4\6\14\uffff\1\6\2\uffff\2\6\2\uffff\1\6"+
            "\6\uffff\6\6\73\uffff\1\6",
            "\u008f\6\1\uffff\24\6\1\uffff\15\6\1\uffff\1\6\1\u00d3\11"+
            "\uffff\4\6\5\uffff\4\6\14\uffff\1\6\2\uffff\2\6\2\uffff\1\6"+
            "\6\uffff\6\6\73\uffff\1\6",
            "\u008f\6\1\uffff\24\6\1\uffff\15\6\1\uffff\1\6\1\u00d3\11"+
            "\uffff\4\6\5\uffff\4\6\14\uffff\1\6\2\uffff\2\6\2\uffff\1\6"+
            "\6\uffff\6\6\73\uffff\1\6",
            "\u008f\6\1\uffff\24\6\1\uffff\15\6\1\uffff\1\6\1\u00d3\11"+
            "\uffff\4\6\5\uffff\4\6\14\uffff\1\6\2\uffff\2\6\2\uffff\1\6"+
            "\6\uffff\6\6\73\uffff\1\6",
            "\u008f\6\1\uffff\24\6\1\uffff\15\6\1\uffff\1\6\1\u00d3\11"+
            "\uffff\1\6\2\uffff\1\6\5\uffff\4\6\14\uffff\1\6\2\uffff\2\6"+
            "\2\uffff\1\6\7\uffff\5\6\73\uffff\1\6",
            "",
            "",
            "\3\6\4\uffff\4\6\1\uffff\1\6\4\uffff\1\6\2\uffff\2\6\3\uffff"+
            "\2\6\2\uffff\1\6\1\uffff\1\6\3\uffff\1\6\1\uffff\1\6\1\uffff"+
            "\2\6\4\uffff\3\6\2\uffff\1\6\1\uffff\3\6\2\uffff\1\6\5\uffff"+
            "\2\6\7\uffff\2\6\5\uffff\1\6\4\uffff\2\6\1\uffff\1\6\4\uffff"+
            "\1\6\3\uffff\1\6\3\uffff\2\6\6\uffff\1\6\6\uffff\1\6\5\uffff"+
            "\2\6\4\uffff\1\6\1\uffff\1\6\7\uffff\1\6\45\uffff\1\u00d3\1"+
            "\6\2\uffff\4\6\1\uffff\1\6\1\uffff\1\6\1\uffff\13\6\6\uffff"+
            "\2\6"
    };

    static final short[] DFA112_eot = DFA.unpackEncodedString(DFA112_eotS);
    static final short[] DFA112_eof = DFA.unpackEncodedString(DFA112_eofS);
    static final char[] DFA112_min = DFA.unpackEncodedStringToUnsignedChars(DFA112_minS);
    static final char[] DFA112_max = DFA.unpackEncodedStringToUnsignedChars(DFA112_maxS);
    static final short[] DFA112_accept = DFA.unpackEncodedString(DFA112_acceptS);
    static final short[] DFA112_special = DFA.unpackEncodedString(DFA112_specialS);
    static final short[][] DFA112_transition;

    static {
        int numStates = DFA112_transitionS.length;
        DFA112_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA112_transition[i] = DFA.unpackEncodedString(DFA112_transitionS[i]);
        }
    }

    class DFA112 extends DFA {

        public DFA112(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 112;
            this.eot = DFA112_eot;
            this.eof = DFA112_eof;
            this.min = DFA112_min;
            this.max = DFA112_max;
            this.accept = DFA112_accept;
            this.special = DFA112_special;
            this.transition = DFA112_transition;
        }
        public String getDescription() {
            return "678:1: p_StepExpr : ( p_AxisStep | p_FilterExpr );";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA112_23 = input.LA(1);

                         
                        int index112_23 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA112_23==COLON) ) {s = 25;}

                        else if ( (LA112_23==LBRACKET) && ((lc(MLS)))) {s = 210;}

                        else if ( (LA112_23==LPAREN) ) {s = 211;}

                        else if ( (LA112_23==EOF||(LA112_23>=AND && LA112_23<=ASCENDING)||(LA112_23>=BY && LA112_23<=CASTABLE)||LA112_23==COLLATION||LA112_23==DEFAULT||(LA112_23>=DESCENDING && LA112_23<=DIV)||(LA112_23>=ELSE && LA112_23<=EMPTY)||LA112_23==EQ||LA112_23==EXCEPT||LA112_23==FOR||LA112_23==GE||(LA112_23>=GT && LA112_23<=IDIV)||(LA112_23>=INSTANCE && LA112_23<=IS)||LA112_23==LE||(LA112_23>=LET && LA112_23<=MOD)||LA112_23==NE||(LA112_23>=OR && LA112_23<=ORDER)||(LA112_23>=RETURN && LA112_23<=SATISFIES)||LA112_23==STABLE||(LA112_23>=TO && LA112_23<=TREAT)||LA112_23==UNION||LA112_23==WHERE||LA112_23==COUNT||(LA112_23>=END && LA112_23<=GROUP)||LA112_23==ONLY||LA112_23==START||(LA112_23>=AFTER && LA112_23<=BEFORE)||LA112_23==INTO||LA112_23==MODIFY||LA112_23==WITH||LA112_23==RPAREN||(LA112_23>=RBRACKET && LA112_23<=EQUAL)||LA112_23==NOTEQUAL||LA112_23==COMMA||(LA112_23>=STAR && LA112_23<=SLASH_SLASH)||(LA112_23>=SEMICOLON && LA112_23<=VBAR)) ) {s = 6;}

                         
                        input.seek(index112_23);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 112, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static final String DFA114_eotS =
        "\12\uffff";
    static final String DFA114_eofS =
        "\1\uffff\7\10\2\uffff";
    static final String DFA114_minS =
        "\1\20\7\22\2\uffff";
    static final String DFA114_maxS =
        "\1\u0136\7\u00e0\2\uffff";
    static final String DFA114_acceptS =
        "\10\uffff\1\2\1\1";
    static final String DFA114_specialS =
        "\12\uffff}>";
    static final String[] DFA114_transitionS = {
            "\6\10\1\3\6\10\1\1\6\10\1\2\1\5\15\10\1\7\1\6\52\10\1\4\77"+
            "\10\1\uffff\24\10\1\uffff\14\10\15\uffff\1\10\30\uffff\1\10"+
            "\6\uffff\1\10\107\uffff\1\10",
            "\3\10\4\uffff\4\10\1\uffff\1\10\4\uffff\1\10\2\uffff\2\10"+
            "\3\uffff\2\10\2\uffff\1\10\1\uffff\1\10\3\uffff\1\10\1\uffff"+
            "\1\10\1\uffff\2\10\4\uffff\3\10\2\uffff\1\10\1\uffff\3\10\2"+
            "\uffff\1\10\5\uffff\2\10\7\uffff\2\10\5\uffff\1\10\4\uffff\2"+
            "\10\1\uffff\1\10\4\uffff\1\10\3\uffff\1\10\3\uffff\2\10\6\uffff"+
            "\1\10\6\uffff\1\10\5\uffff\2\10\4\uffff\1\10\1\uffff\1\10\7"+
            "\uffff\1\10\46\uffff\1\10\2\uffff\4\10\1\uffff\1\10\1\uffff"+
            "\1\10\1\uffff\13\10\2\uffff\1\10\1\11\2\uffff\2\10",
            "\3\10\4\uffff\4\10\1\uffff\1\10\4\uffff\1\10\2\uffff\2\10"+
            "\3\uffff\2\10\2\uffff\1\10\1\uffff\1\10\3\uffff\1\10\1\uffff"+
            "\1\10\1\uffff\2\10\4\uffff\3\10\2\uffff\1\10\1\uffff\3\10\2"+
            "\uffff\1\10\5\uffff\2\10\7\uffff\2\10\5\uffff\1\10\4\uffff\2"+
            "\10\1\uffff\1\10\4\uffff\1\10\3\uffff\1\10\3\uffff\2\10\6\uffff"+
            "\1\10\6\uffff\1\10\5\uffff\2\10\4\uffff\1\10\1\uffff\1\10\7"+
            "\uffff\1\10\46\uffff\1\10\2\uffff\4\10\1\uffff\1\10\1\uffff"+
            "\1\10\1\uffff\13\10\2\uffff\1\10\1\11\2\uffff\2\10",
            "\3\10\4\uffff\4\10\1\uffff\1\10\4\uffff\1\10\2\uffff\2\10"+
            "\3\uffff\2\10\2\uffff\1\10\1\uffff\1\10\3\uffff\1\10\1\uffff"+
            "\1\10\1\uffff\2\10\4\uffff\3\10\2\uffff\1\10\1\uffff\3\10\2"+
            "\uffff\1\10\5\uffff\2\10\7\uffff\2\10\5\uffff\1\10\4\uffff\2"+
            "\10\1\uffff\1\10\4\uffff\1\10\3\uffff\1\10\3\uffff\2\10\6\uffff"+
            "\1\10\6\uffff\1\10\5\uffff\2\10\4\uffff\1\10\1\uffff\1\10\7"+
            "\uffff\1\10\45\uffff\2\10\2\uffff\4\10\1\uffff\1\10\1\uffff"+
            "\1\10\1\uffff\13\10\2\uffff\1\10\1\11\2\uffff\2\10",
            "\3\10\4\uffff\4\10\1\uffff\1\10\4\uffff\1\10\2\uffff\2\10"+
            "\3\uffff\2\10\2\uffff\1\10\1\uffff\1\10\3\uffff\1\10\1\uffff"+
            "\1\10\1\uffff\2\10\4\uffff\3\10\2\uffff\1\10\1\uffff\3\10\2"+
            "\uffff\1\10\5\uffff\2\10\7\uffff\2\10\5\uffff\1\10\4\uffff\2"+
            "\10\1\uffff\1\10\4\uffff\1\10\3\uffff\1\10\3\uffff\2\10\6\uffff"+
            "\1\10\6\uffff\1\10\5\uffff\2\10\4\uffff\1\10\1\uffff\1\10\7"+
            "\uffff\1\10\46\uffff\1\10\2\uffff\4\10\1\uffff\1\10\1\uffff"+
            "\1\10\1\uffff\13\10\2\uffff\1\10\1\11\2\uffff\2\10",
            "\3\10\4\uffff\4\10\1\uffff\1\10\4\uffff\1\10\2\uffff\2\10"+
            "\3\uffff\2\10\2\uffff\1\10\1\uffff\1\10\3\uffff\1\10\1\uffff"+
            "\1\10\1\uffff\2\10\4\uffff\3\10\2\uffff\1\10\1\uffff\3\10\2"+
            "\uffff\1\10\5\uffff\2\10\7\uffff\2\10\5\uffff\1\10\4\uffff\2"+
            "\10\1\uffff\1\10\4\uffff\1\10\3\uffff\1\10\3\uffff\2\10\6\uffff"+
            "\1\10\6\uffff\1\10\5\uffff\2\10\4\uffff\1\10\1\uffff\1\10\7"+
            "\uffff\1\10\46\uffff\1\10\2\uffff\4\10\1\uffff\1\10\1\uffff"+
            "\1\10\1\uffff\13\10\2\uffff\1\10\1\11\2\uffff\2\10",
            "\3\10\4\uffff\4\10\1\uffff\1\10\4\uffff\1\10\2\uffff\2\10"+
            "\3\uffff\2\10\2\uffff\1\10\1\uffff\1\10\3\uffff\1\10\1\uffff"+
            "\1\10\1\uffff\2\10\4\uffff\3\10\2\uffff\1\10\1\uffff\3\10\2"+
            "\uffff\1\10\5\uffff\2\10\7\uffff\2\10\5\uffff\1\10\4\uffff\2"+
            "\10\1\uffff\1\10\4\uffff\1\10\3\uffff\1\10\3\uffff\2\10\6\uffff"+
            "\1\10\6\uffff\1\10\5\uffff\2\10\4\uffff\1\10\1\uffff\1\10\7"+
            "\uffff\1\10\46\uffff\1\10\2\uffff\4\10\1\uffff\1\10\1\uffff"+
            "\1\10\1\uffff\13\10\2\uffff\1\10\1\11\2\uffff\2\10",
            "\3\10\4\uffff\4\10\1\uffff\1\10\4\uffff\1\10\2\uffff\2\10"+
            "\3\uffff\2\10\2\uffff\1\10\1\uffff\1\10\3\uffff\1\10\1\uffff"+
            "\1\10\1\uffff\2\10\4\uffff\3\10\2\uffff\1\10\1\uffff\3\10\2"+
            "\uffff\1\10\5\uffff\2\10\7\uffff\2\10\5\uffff\1\10\4\uffff\2"+
            "\10\1\uffff\1\10\4\uffff\1\10\3\uffff\1\10\3\uffff\2\10\6\uffff"+
            "\1\10\6\uffff\1\10\5\uffff\2\10\4\uffff\1\10\1\uffff\1\10\7"+
            "\uffff\1\10\46\uffff\1\10\2\uffff\4\10\1\uffff\1\10\1\uffff"+
            "\1\10\1\uffff\13\10\2\uffff\1\10\1\11\2\uffff\2\10",
            "",
            ""
    };

    static final short[] DFA114_eot = DFA.unpackEncodedString(DFA114_eotS);
    static final short[] DFA114_eof = DFA.unpackEncodedString(DFA114_eofS);
    static final char[] DFA114_min = DFA.unpackEncodedStringToUnsignedChars(DFA114_minS);
    static final char[] DFA114_max = DFA.unpackEncodedStringToUnsignedChars(DFA114_maxS);
    static final short[] DFA114_accept = DFA.unpackEncodedString(DFA114_acceptS);
    static final short[] DFA114_special = DFA.unpackEncodedString(DFA114_specialS);
    static final short[][] DFA114_transition;

    static {
        int numStates = DFA114_transitionS.length;
        DFA114_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA114_transition[i] = DFA.unpackEncodedString(DFA114_transitionS[i]);
        }
    }

    class DFA114 extends DFA {

        public DFA114(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 114;
            this.eot = DFA114_eot;
            this.eof = DFA114_eof;
            this.min = DFA114_min;
            this.max = DFA114_max;
            this.accept = DFA114_accept;
            this.special = DFA114_special;
            this.transition = DFA114_transition;
        }
        public String getDescription() {
            return "689:1: p_ForwardStep : ( ( p_ForwardAxis p_NodeTest ) | p_AbbrevForwardStep );";
        }
    }
    static final String DFA119_eotS =
        "\15\uffff";
    static final String DFA119_eofS =
        "\1\uffff\12\13\2\uffff";
    static final String DFA119_minS =
        "\1\20\12\22\2\uffff";
    static final String DFA119_maxS =
        "\1\u0136\12\u00e0\2\uffff";
    static final String DFA119_acceptS =
        "\13\uffff\1\2\1\1";
    static final String DFA119_specialS =
        "\15\uffff}>";
    static final String[] DFA119_transitionS = {
            "\6\13\1\3\10\13\1\10\11\13\1\1\1\2\43\13\1\12\12\13\1\7\3\13"+
            "\1\5\1\4\5\13\1\11\26\13\1\6\43\13\1\uffff\24\13\1\uffff\14"+
            "\13\15\uffff\1\13\37\uffff\1\13\107\uffff\1\13",
            "\3\13\4\uffff\4\13\1\uffff\1\13\4\uffff\1\13\2\uffff\2\13"+
            "\3\uffff\2\13\2\uffff\1\13\1\uffff\1\13\3\uffff\1\13\1\uffff"+
            "\1\13\1\uffff\2\13\4\uffff\3\13\2\uffff\1\13\1\uffff\3\13\2"+
            "\uffff\1\13\5\uffff\2\13\7\uffff\2\13\5\uffff\1\13\4\uffff\2"+
            "\13\1\uffff\1\13\4\uffff\1\13\3\uffff\1\13\3\uffff\2\13\6\uffff"+
            "\1\13\6\uffff\1\13\5\uffff\2\13\4\uffff\1\13\1\uffff\1\13\7"+
            "\uffff\1\13\45\uffff\1\14\1\13\2\uffff\4\13\1\uffff\1\13\1\uffff"+
            "\1\13\1\uffff\13\13\2\uffff\1\13\3\uffff\2\13",
            "\3\13\4\uffff\4\13\1\uffff\1\13\4\uffff\1\13\2\uffff\2\13"+
            "\3\uffff\2\13\2\uffff\1\13\1\uffff\1\13\3\uffff\1\13\1\uffff"+
            "\1\13\1\uffff\2\13\4\uffff\3\13\2\uffff\1\13\1\uffff\3\13\2"+
            "\uffff\1\13\5\uffff\2\13\7\uffff\2\13\5\uffff\1\13\4\uffff\2"+
            "\13\1\uffff\1\13\4\uffff\1\13\3\uffff\1\13\3\uffff\2\13\6\uffff"+
            "\1\13\6\uffff\1\13\5\uffff\2\13\4\uffff\1\13\1\uffff\1\13\7"+
            "\uffff\1\13\45\uffff\1\14\1\13\2\uffff\4\13\1\uffff\1\13\1\uffff"+
            "\1\13\1\uffff\13\13\2\uffff\1\13\3\uffff\2\13",
            "\3\13\4\uffff\4\13\1\uffff\1\13\4\uffff\1\13\2\uffff\2\13"+
            "\3\uffff\2\13\2\uffff\1\13\1\uffff\1\13\3\uffff\1\13\1\uffff"+
            "\1\13\1\uffff\2\13\4\uffff\3\13\2\uffff\1\13\1\uffff\3\13\2"+
            "\uffff\1\13\5\uffff\2\13\7\uffff\2\13\5\uffff\1\13\4\uffff\2"+
            "\13\1\uffff\1\13\4\uffff\1\13\3\uffff\1\13\3\uffff\2\13\6\uffff"+
            "\1\13\6\uffff\1\13\5\uffff\2\13\4\uffff\1\13\1\uffff\1\13\7"+
            "\uffff\1\13\45\uffff\1\14\1\13\2\uffff\4\13\1\uffff\1\13\1\uffff"+
            "\1\13\1\uffff\13\13\2\uffff\1\13\3\uffff\2\13",
            "\3\13\4\uffff\4\13\1\uffff\1\13\4\uffff\1\13\2\uffff\2\13"+
            "\3\uffff\2\13\2\uffff\1\13\1\uffff\1\13\3\uffff\1\13\1\uffff"+
            "\1\13\1\uffff\2\13\4\uffff\3\13\2\uffff\1\13\1\uffff\3\13\2"+
            "\uffff\1\13\5\uffff\2\13\7\uffff\2\13\5\uffff\1\13\4\uffff\2"+
            "\13\1\uffff\1\13\4\uffff\1\13\3\uffff\1\13\3\uffff\2\13\6\uffff"+
            "\1\13\6\uffff\1\13\5\uffff\2\13\4\uffff\1\13\1\uffff\1\13\7"+
            "\uffff\1\13\45\uffff\1\14\1\13\2\uffff\4\13\1\uffff\1\13\1\uffff"+
            "\1\13\1\uffff\13\13\2\uffff\1\13\3\uffff\2\13",
            "\3\13\4\uffff\4\13\1\uffff\1\13\4\uffff\1\13\2\uffff\2\13"+
            "\3\uffff\2\13\2\uffff\1\13\1\uffff\1\13\3\uffff\1\13\1\uffff"+
            "\1\13\1\uffff\2\13\4\uffff\3\13\2\uffff\1\13\1\uffff\3\13\2"+
            "\uffff\1\13\5\uffff\2\13\7\uffff\2\13\5\uffff\1\13\4\uffff\2"+
            "\13\1\uffff\1\13\4\uffff\1\13\3\uffff\1\13\3\uffff\2\13\6\uffff"+
            "\1\13\6\uffff\1\13\5\uffff\2\13\4\uffff\1\13\1\uffff\1\13\7"+
            "\uffff\1\13\45\uffff\1\14\1\13\2\uffff\4\13\1\uffff\1\13\1\uffff"+
            "\1\13\1\uffff\13\13\2\uffff\1\13\3\uffff\2\13",
            "\3\13\4\uffff\4\13\1\uffff\1\13\4\uffff\1\13\2\uffff\2\13"+
            "\3\uffff\2\13\2\uffff\1\13\1\uffff\1\13\3\uffff\1\13\1\uffff"+
            "\1\13\1\uffff\2\13\4\uffff\3\13\2\uffff\1\13\1\uffff\3\13\2"+
            "\uffff\1\13\5\uffff\2\13\7\uffff\2\13\5\uffff\1\13\4\uffff\2"+
            "\13\1\uffff\1\13\4\uffff\1\13\3\uffff\1\13\3\uffff\2\13\6\uffff"+
            "\1\13\6\uffff\1\13\5\uffff\2\13\4\uffff\1\13\1\uffff\1\13\7"+
            "\uffff\1\13\45\uffff\1\14\1\13\2\uffff\4\13\1\uffff\1\13\1\uffff"+
            "\1\13\1\uffff\13\13\2\uffff\1\13\3\uffff\2\13",
            "\3\13\4\uffff\4\13\1\uffff\1\13\4\uffff\1\13\2\uffff\2\13"+
            "\3\uffff\2\13\2\uffff\1\13\1\uffff\1\13\3\uffff\1\13\1\uffff"+
            "\1\13\1\uffff\2\13\4\uffff\3\13\2\uffff\1\13\1\uffff\3\13\2"+
            "\uffff\1\13\5\uffff\2\13\7\uffff\2\13\5\uffff\1\13\4\uffff\2"+
            "\13\1\uffff\1\13\4\uffff\1\13\3\uffff\1\13\3\uffff\2\13\6\uffff"+
            "\1\13\6\uffff\1\13\5\uffff\2\13\4\uffff\1\13\1\uffff\1\13\7"+
            "\uffff\1\13\45\uffff\1\14\1\13\2\uffff\4\13\1\uffff\1\13\1\uffff"+
            "\1\13\1\uffff\13\13\2\uffff\1\13\3\uffff\2\13",
            "\3\13\4\uffff\4\13\1\uffff\1\13\4\uffff\1\13\2\uffff\2\13"+
            "\3\uffff\2\13\2\uffff\1\13\1\uffff\1\13\3\uffff\1\13\1\uffff"+
            "\1\13\1\uffff\2\13\4\uffff\3\13\2\uffff\1\13\1\uffff\3\13\2"+
            "\uffff\1\13\5\uffff\2\13\7\uffff\2\13\5\uffff\1\13\4\uffff\2"+
            "\13\1\uffff\1\13\4\uffff\1\13\3\uffff\1\13\3\uffff\2\13\6\uffff"+
            "\1\13\6\uffff\1\13\5\uffff\2\13\4\uffff\1\13\1\uffff\1\13\7"+
            "\uffff\1\13\45\uffff\1\14\1\13\2\uffff\4\13\1\uffff\1\13\1\uffff"+
            "\1\13\1\uffff\13\13\2\uffff\1\13\3\uffff\2\13",
            "\3\13\4\uffff\4\13\1\uffff\1\13\4\uffff\1\13\2\uffff\2\13"+
            "\3\uffff\2\13\2\uffff\1\13\1\uffff\1\13\3\uffff\1\13\1\uffff"+
            "\1\13\1\uffff\2\13\4\uffff\3\13\2\uffff\1\13\1\uffff\3\13\2"+
            "\uffff\1\13\5\uffff\2\13\7\uffff\2\13\5\uffff\1\13\4\uffff\2"+
            "\13\1\uffff\1\13\4\uffff\1\13\3\uffff\1\13\3\uffff\2\13\6\uffff"+
            "\1\13\6\uffff\1\13\5\uffff\2\13\4\uffff\1\13\1\uffff\1\13\7"+
            "\uffff\1\13\45\uffff\1\14\1\13\2\uffff\4\13\1\uffff\1\13\1\uffff"+
            "\1\13\1\uffff\13\13\2\uffff\1\13\3\uffff\2\13",
            "\3\13\4\uffff\4\13\1\uffff\1\13\4\uffff\1\13\2\uffff\2\13"+
            "\3\uffff\2\13\2\uffff\1\13\1\uffff\1\13\3\uffff\1\13\1\uffff"+
            "\1\13\1\uffff\2\13\4\uffff\3\13\2\uffff\1\13\1\uffff\3\13\2"+
            "\uffff\1\13\5\uffff\2\13\7\uffff\2\13\5\uffff\1\13\4\uffff\2"+
            "\13\1\uffff\1\13\4\uffff\1\13\3\uffff\1\13\3\uffff\2\13\6\uffff"+
            "\1\13\6\uffff\1\13\5\uffff\2\13\4\uffff\1\13\1\uffff\1\13\7"+
            "\uffff\1\13\45\uffff\1\14\1\13\2\uffff\4\13\1\uffff\1\13\1\uffff"+
            "\1\13\1\uffff\13\13\2\uffff\1\13\3\uffff\2\13",
            "",
            ""
    };

    static final short[] DFA119_eot = DFA.unpackEncodedString(DFA119_eotS);
    static final short[] DFA119_eof = DFA.unpackEncodedString(DFA119_eofS);
    static final char[] DFA119_min = DFA.unpackEncodedStringToUnsignedChars(DFA119_minS);
    static final char[] DFA119_max = DFA.unpackEncodedStringToUnsignedChars(DFA119_maxS);
    static final short[] DFA119_accept = DFA.unpackEncodedString(DFA119_acceptS);
    static final short[] DFA119_special = DFA.unpackEncodedString(DFA119_specialS);
    static final short[][] DFA119_transition;

    static {
        int numStates = DFA119_transitionS.length;
        DFA119_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA119_transition[i] = DFA.unpackEncodedString(DFA119_transitionS[i]);
        }
    }

    class DFA119 extends DFA {

        public DFA119(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 119;
            this.eot = DFA119_eot;
            this.eof = DFA119_eof;
            this.min = DFA119_min;
            this.max = DFA119_max;
            this.accept = DFA119_accept;
            this.special = DFA119_special;
            this.transition = DFA119_transition;
        }
        public String getDescription() {
            return "729:1: p_NodeTest : ( p_KindTest | p_NameTest );";
        }
    }
    static final String DFA124_eotS =
        "\17\uffff";
    static final String DFA124_eofS =
        "\17\uffff";
    static final String DFA124_minS =
        "\1\20\4\uffff\3\u00c1\1\uffff\1\20\1\u00c1\4\uffff";
    static final String DFA124_maxS =
        "\1\u0136\4\uffff\3\u00db\1\uffff\1\u0136\1\u00db\4\uffff";
    static final String DFA124_acceptS =
        "\1\uffff\1\1\1\2\1\3\1\4\3\uffff\1\10\2\uffff\1\5\1\6\1\7\1\10";
    static final String DFA124_specialS =
        "\12\uffff\1\0\4\uffff}>";
    static final String[] DFA124_transitionS = {
            "\6\13\1\10\10\13\1\10\10\13\1\7\1\uffff\1\10\2\13\1\uffff\15"+
            "\13\1\uffff\6\13\1\uffff\7\13\1\11\3\13\1\uffff\4\13\1\5\5\13"+
            "\1\10\3\13\2\uffff\5\13\1\10\3\13\1\uffff\1\13\1\6\20\13\1\uffff"+
            "\43\13\1\uffff\3\13\1\uffff\20\13\1\uffff\7\13\1\12\4\13\1\3"+
            "\1\uffff\1\2\15\uffff\1\10\7\uffff\1\4\20\uffff\2\1\2\uffff"+
            "\1\13\7\uffff\2\10\3\1\73\uffff\1\13",
            "",
            "",
            "",
            "",
            "\1\13\2\uffff\1\14\26\uffff\1\13",
            "\1\13\2\uffff\1\15\26\uffff\1\13",
            "\1\13\2\uffff\1\10\26\uffff\1\13",
            "",
            "\u008f\10\1\uffff\24\10\1\uffff\14\10\1\13\2\uffff\1\10\26"+
            "\uffff\1\13\22\uffff\1\10\107\uffff\1\10",
            "\1\13\2\uffff\1\16\26\uffff\1\13",
            "",
            "",
            "",
            ""
    };

    static final short[] DFA124_eot = DFA.unpackEncodedString(DFA124_eotS);
    static final short[] DFA124_eof = DFA.unpackEncodedString(DFA124_eofS);
    static final char[] DFA124_min = DFA.unpackEncodedStringToUnsignedChars(DFA124_minS);
    static final char[] DFA124_max = DFA.unpackEncodedStringToUnsignedChars(DFA124_maxS);
    static final short[] DFA124_accept = DFA.unpackEncodedString(DFA124_acceptS);
    static final short[] DFA124_special = DFA.unpackEncodedString(DFA124_specialS);
    static final short[][] DFA124_transition;

    static {
        int numStates = DFA124_transitionS.length;
        DFA124_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA124_transition[i] = DFA.unpackEncodedString(DFA124_transitionS[i]);
        }
    }

    class DFA124 extends DFA {

        public DFA124(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 124;
            this.eot = DFA124_eot;
            this.eof = DFA124_eof;
            this.min = DFA124_min;
            this.max = DFA124_max;
            this.accept = DFA124_accept;
            this.special = DFA124_special;
            this.transition = DFA124_transition;
        }
        public String getDescription() {
            return "760:1: p_PrimaryExpr : ( p_Literal | p_VarRef | p_ParenthesizedExpr | p_ContextItemExpr | p_FunctionCall | p_OrderedExpr | p_UnorderedExpr | p_Constructor );";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA124_10 = input.LA(1);

                         
                        int index124_10 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA124_10==LPAREN||LA124_10==COLON) ) {s = 11;}

                        else if ( (LA124_10==LBRACKET) && ((lc(MLS)))) {s = 14;}

                         
                        input.seek(index124_10);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 124, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static final String DFA154_eotS =
        "\76\uffff";
    static final String DFA154_eofS =
        "\1\2\75\uffff";
    static final String DFA154_minS =
        "\1\22\1\0\5\uffff\1\0\66\uffff";
    static final String DFA154_maxS =
        "\1\u00e0\1\0\5\uffff\1\0\66\uffff";
    static final String DFA154_acceptS =
        "\2\uffff\1\2\10\uffff\1\1\62\uffff";
    static final String DFA154_specialS =
        "\1\0\1\1\5\uffff\1\2\66\uffff}>";
    static final String[] DFA154_transitionS = {
            "\4\2\4\uffff\1\2\3\uffff\1\2\4\uffff\1\2\2\uffff\2\2\3\uffff"+
            "\2\2\2\uffff\1\2\1\uffff\2\2\2\uffff\1\2\1\uffff\1\2\1\uffff"+
            "\2\2\2\uffff\1\2\1\uffff\3\2\2\uffff\1\2\1\uffff\3\2\2\uffff"+
            "\1\2\5\uffff\2\2\7\uffff\2\2\5\uffff\1\2\4\uffff\1\2\2\uffff"+
            "\1\2\4\uffff\1\2\3\uffff\1\2\3\uffff\2\2\6\uffff\1\2\6\uffff"+
            "\1\2\5\uffff\2\2\4\uffff\1\2\1\uffff\1\2\7\uffff\1\2\46\uffff"+
            "\1\2\1\uffff\2\2\1\uffff\4\2\1\uffff\1\2\1\13\1\1\1\7\7\2\10"+
            "\uffff\2\2",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };

    static final short[] DFA154_eot = DFA.unpackEncodedString(DFA154_eotS);
    static final short[] DFA154_eof = DFA.unpackEncodedString(DFA154_eofS);
    static final char[] DFA154_min = DFA.unpackEncodedStringToUnsignedChars(DFA154_minS);
    static final char[] DFA154_max = DFA.unpackEncodedStringToUnsignedChars(DFA154_maxS);
    static final short[] DFA154_accept = DFA.unpackEncodedString(DFA154_acceptS);
    static final short[] DFA154_special = DFA.unpackEncodedString(DFA154_specialS);
    static final short[][] DFA154_transition;

    static {
        int numStates = DFA154_transitionS.length;
        DFA154_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA154_transition[i] = DFA.unpackEncodedString(DFA154_transitionS[i]);
        }
    }

    class DFA154 extends DFA {

        public DFA154(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 154;
            this.eot = DFA154_eot;
            this.eof = DFA154_eof;
            this.min = DFA154_min;
            this.max = DFA154_max;
            this.accept = DFA154_accept;
            this.special = DFA154_special;
            this.transition = DFA154_transition;
        }
        public String getDescription() {
            return "1020:25: ( ( p_OccurrenceIndicator )=>oi= p_OccurrenceIndicator )?";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA154_0 = input.LA(1);

                         
                        int index154_0 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA154_0==STAR) ) {s = 1;}

                        else if ( (LA154_0==EOF||(LA154_0>=AND && LA154_0<=AT)||LA154_0==CASE||LA154_0==COLLATION||LA154_0==DEFAULT||(LA154_0>=DESCENDING && LA154_0<=DIV)||(LA154_0>=ELSE && LA154_0<=EMPTY)||LA154_0==EQ||(LA154_0>=EXCEPT && LA154_0<=EXTERNAL)||LA154_0==FOR||LA154_0==GE||(LA154_0>=GT && LA154_0<=IDIV)||LA154_0==IN||(LA154_0>=INSTANCE && LA154_0<=IS)||LA154_0==LE||(LA154_0>=LET && LA154_0<=MOD)||LA154_0==NE||(LA154_0>=OR && LA154_0<=ORDER)||(LA154_0>=RETURN && LA154_0<=SATISFIES)||LA154_0==STABLE||LA154_0==TO||LA154_0==UNION||LA154_0==WHERE||LA154_0==COUNT||(LA154_0>=END && LA154_0<=GROUP)||LA154_0==ONLY||LA154_0==START||(LA154_0>=AFTER && LA154_0<=BEFORE)||LA154_0==INTO||LA154_0==MODIFY||LA154_0==WITH||LA154_0==RPAREN||(LA154_0>=LBRACKET && LA154_0<=RBRACKET)||(LA154_0>=RSQUARE && LA154_0<=NOTEQUAL)||LA154_0==COMMA||(LA154_0>=MINUS && LA154_0<=GREATER_GREATER)||(LA154_0>=SEMICOLON && LA154_0<=VBAR)) ) {s = 2;}

                        else if ( (LA154_0==PLUS) ) {s = 7;}

                        else if ( (LA154_0==QUESTION) && (synpred2_XQueryParser())) {s = 11;}

                         
                        input.seek(index154_0);
                        if ( s>=0 ) return s;
                        break;
                    case 1 : 
                        int LA154_1 = input.LA(1);

                         
                        int index154_1 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred2_XQueryParser()) ) {s = 11;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index154_1);
                        if ( s>=0 ) return s;
                        break;
                    case 2 : 
                        int LA154_7 = input.LA(1);

                         
                        int index154_7 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred2_XQueryParser()) ) {s = 11;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index154_7);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 154, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static final String DFA156_eotS =
        "\21\uffff";
    static final String DFA156_eofS =
        "\1\uffff\14\15\4\uffff";
    static final String DFA156_minS =
        "\1\20\14\22\4\uffff";
    static final String DFA156_maxS =
        "\1\u0136\14\u00e0\4\uffff";
    static final String DFA156_acceptS =
        "\15\uffff\1\4\1\1\1\2\1\3";
    static final String DFA156_specialS =
        "\13\uffff\1\0\5\uffff}>";
    static final String[] DFA156_transitionS = {
            "\6\15\1\3\10\15\1\10\11\15\1\1\1\2\27\15\1\14\13\15\1\12\12"+
            "\15\1\7\3\15\1\5\1\4\5\15\1\11\26\15\1\6\43\15\1\uffff\24\15"+
            "\1\uffff\7\15\1\13\4\15\55\uffff\1\15\107\uffff\1\15",
            "\4\15\4\uffff\1\15\3\uffff\1\15\4\uffff\1\15\2\uffff\2\15"+
            "\3\uffff\2\15\2\uffff\1\15\1\uffff\2\15\2\uffff\1\15\1\uffff"+
            "\1\15\1\uffff\2\15\2\uffff\1\15\1\uffff\3\15\2\uffff\1\15\1"+
            "\uffff\3\15\2\uffff\1\15\5\uffff\2\15\7\uffff\2\15\5\uffff\1"+
            "\15\4\uffff\1\15\2\uffff\1\15\4\uffff\1\15\3\uffff\1\15\3\uffff"+
            "\2\15\6\uffff\1\15\6\uffff\1\15\5\uffff\2\15\4\uffff\1\15\1"+
            "\uffff\1\15\7\uffff\1\15\45\uffff\1\16\1\15\1\uffff\2\15\1\uffff"+
            "\4\15\1\uffff\13\15\4\uffff\1\15\3\uffff\2\15",
            "\4\15\4\uffff\1\15\3\uffff\1\15\4\uffff\1\15\2\uffff\2\15"+
            "\3\uffff\2\15\2\uffff\1\15\1\uffff\2\15\2\uffff\1\15\1\uffff"+
            "\1\15\1\uffff\2\15\2\uffff\1\15\1\uffff\3\15\2\uffff\1\15\1"+
            "\uffff\3\15\2\uffff\1\15\5\uffff\2\15\7\uffff\2\15\5\uffff\1"+
            "\15\4\uffff\1\15\2\uffff\1\15\4\uffff\1\15\3\uffff\1\15\3\uffff"+
            "\2\15\6\uffff\1\15\6\uffff\1\15\5\uffff\2\15\4\uffff\1\15\1"+
            "\uffff\1\15\7\uffff\1\15\45\uffff\1\16\1\15\1\uffff\2\15\1\uffff"+
            "\4\15\1\uffff\13\15\4\uffff\1\15\3\uffff\2\15",
            "\4\15\4\uffff\1\15\3\uffff\1\15\4\uffff\1\15\2\uffff\2\15"+
            "\3\uffff\2\15\2\uffff\1\15\1\uffff\2\15\2\uffff\1\15\1\uffff"+
            "\1\15\1\uffff\2\15\2\uffff\1\15\1\uffff\3\15\2\uffff\1\15\1"+
            "\uffff\3\15\2\uffff\1\15\5\uffff\2\15\7\uffff\2\15\5\uffff\1"+
            "\15\4\uffff\1\15\2\uffff\1\15\4\uffff\1\15\3\uffff\1\15\3\uffff"+
            "\2\15\6\uffff\1\15\6\uffff\1\15\5\uffff\2\15\4\uffff\1\15\1"+
            "\uffff\1\15\7\uffff\1\15\45\uffff\1\16\1\15\1\uffff\2\15\1\uffff"+
            "\4\15\1\uffff\13\15\4\uffff\1\15\3\uffff\2\15",
            "\4\15\4\uffff\1\15\3\uffff\1\15\4\uffff\1\15\2\uffff\2\15"+
            "\3\uffff\2\15\2\uffff\1\15\1\uffff\2\15\2\uffff\1\15\1\uffff"+
            "\1\15\1\uffff\2\15\2\uffff\1\15\1\uffff\3\15\2\uffff\1\15\1"+
            "\uffff\3\15\2\uffff\1\15\5\uffff\2\15\7\uffff\2\15\5\uffff\1"+
            "\15\4\uffff\1\15\2\uffff\1\15\4\uffff\1\15\3\uffff\1\15\3\uffff"+
            "\2\15\6\uffff\1\15\6\uffff\1\15\5\uffff\2\15\4\uffff\1\15\1"+
            "\uffff\1\15\7\uffff\1\15\45\uffff\1\16\1\15\1\uffff\2\15\1\uffff"+
            "\4\15\1\uffff\13\15\4\uffff\1\15\3\uffff\2\15",
            "\4\15\4\uffff\1\15\3\uffff\1\15\4\uffff\1\15\2\uffff\2\15"+
            "\3\uffff\2\15\2\uffff\1\15\1\uffff\2\15\2\uffff\1\15\1\uffff"+
            "\1\15\1\uffff\2\15\2\uffff\1\15\1\uffff\3\15\2\uffff\1\15\1"+
            "\uffff\3\15\2\uffff\1\15\5\uffff\2\15\7\uffff\2\15\5\uffff\1"+
            "\15\4\uffff\1\15\2\uffff\1\15\4\uffff\1\15\3\uffff\1\15\3\uffff"+
            "\2\15\6\uffff\1\15\6\uffff\1\15\5\uffff\2\15\4\uffff\1\15\1"+
            "\uffff\1\15\7\uffff\1\15\45\uffff\1\16\1\15\1\uffff\2\15\1\uffff"+
            "\4\15\1\uffff\13\15\4\uffff\1\15\3\uffff\2\15",
            "\4\15\4\uffff\1\15\3\uffff\1\15\4\uffff\1\15\2\uffff\2\15"+
            "\3\uffff\2\15\2\uffff\1\15\1\uffff\2\15\2\uffff\1\15\1\uffff"+
            "\1\15\1\uffff\2\15\2\uffff\1\15\1\uffff\3\15\2\uffff\1\15\1"+
            "\uffff\3\15\2\uffff\1\15\5\uffff\2\15\7\uffff\2\15\5\uffff\1"+
            "\15\4\uffff\1\15\2\uffff\1\15\4\uffff\1\15\3\uffff\1\15\3\uffff"+
            "\2\15\6\uffff\1\15\6\uffff\1\15\5\uffff\2\15\4\uffff\1\15\1"+
            "\uffff\1\15\7\uffff\1\15\45\uffff\1\16\1\15\1\uffff\2\15\1\uffff"+
            "\4\15\1\uffff\13\15\4\uffff\1\15\3\uffff\2\15",
            "\4\15\4\uffff\1\15\3\uffff\1\15\4\uffff\1\15\2\uffff\2\15"+
            "\3\uffff\2\15\2\uffff\1\15\1\uffff\2\15\2\uffff\1\15\1\uffff"+
            "\1\15\1\uffff\2\15\2\uffff\1\15\1\uffff\3\15\2\uffff\1\15\1"+
            "\uffff\3\15\2\uffff\1\15\5\uffff\2\15\7\uffff\2\15\5\uffff\1"+
            "\15\4\uffff\1\15\2\uffff\1\15\4\uffff\1\15\3\uffff\1\15\3\uffff"+
            "\2\15\6\uffff\1\15\6\uffff\1\15\5\uffff\2\15\4\uffff\1\15\1"+
            "\uffff\1\15\7\uffff\1\15\45\uffff\1\16\1\15\1\uffff\2\15\1\uffff"+
            "\4\15\1\uffff\13\15\4\uffff\1\15\3\uffff\2\15",
            "\4\15\4\uffff\1\15\3\uffff\1\15\4\uffff\1\15\2\uffff\2\15"+
            "\3\uffff\2\15\2\uffff\1\15\1\uffff\2\15\2\uffff\1\15\1\uffff"+
            "\1\15\1\uffff\2\15\2\uffff\1\15\1\uffff\3\15\2\uffff\1\15\1"+
            "\uffff\3\15\2\uffff\1\15\5\uffff\2\15\7\uffff\2\15\5\uffff\1"+
            "\15\4\uffff\1\15\2\uffff\1\15\4\uffff\1\15\3\uffff\1\15\3\uffff"+
            "\2\15\6\uffff\1\15\6\uffff\1\15\5\uffff\2\15\4\uffff\1\15\1"+
            "\uffff\1\15\7\uffff\1\15\45\uffff\1\16\1\15\1\uffff\2\15\1\uffff"+
            "\4\15\1\uffff\13\15\4\uffff\1\15\3\uffff\2\15",
            "\4\15\4\uffff\1\15\3\uffff\1\15\4\uffff\1\15\2\uffff\2\15"+
            "\3\uffff\2\15\2\uffff\1\15\1\uffff\2\15\2\uffff\1\15\1\uffff"+
            "\1\15\1\uffff\2\15\2\uffff\1\15\1\uffff\3\15\2\uffff\1\15\1"+
            "\uffff\3\15\2\uffff\1\15\5\uffff\2\15\7\uffff\2\15\5\uffff\1"+
            "\15\4\uffff\1\15\2\uffff\1\15\4\uffff\1\15\3\uffff\1\15\3\uffff"+
            "\2\15\6\uffff\1\15\6\uffff\1\15\5\uffff\2\15\4\uffff\1\15\1"+
            "\uffff\1\15\7\uffff\1\15\45\uffff\1\16\1\15\1\uffff\2\15\1\uffff"+
            "\4\15\1\uffff\13\15\4\uffff\1\15\3\uffff\2\15",
            "\4\15\4\uffff\1\15\3\uffff\1\15\4\uffff\1\15\2\uffff\2\15"+
            "\3\uffff\2\15\2\uffff\1\15\1\uffff\2\15\2\uffff\1\15\1\uffff"+
            "\1\15\1\uffff\2\15\2\uffff\1\15\1\uffff\3\15\2\uffff\1\15\1"+
            "\uffff\3\15\2\uffff\1\15\5\uffff\2\15\7\uffff\2\15\5\uffff\1"+
            "\15\4\uffff\1\15\2\uffff\1\15\4\uffff\1\15\3\uffff\1\15\3\uffff"+
            "\2\15\6\uffff\1\15\6\uffff\1\15\5\uffff\2\15\4\uffff\1\15\1"+
            "\uffff\1\15\7\uffff\1\15\45\uffff\1\16\1\15\1\uffff\2\15\1\uffff"+
            "\4\15\1\uffff\13\15\4\uffff\1\15\3\uffff\2\15",
            "\4\15\4\uffff\1\15\3\uffff\1\15\4\uffff\1\15\2\uffff\2\15"+
            "\3\uffff\2\15\2\uffff\1\15\1\uffff\2\15\2\uffff\1\15\1\uffff"+
            "\1\15\1\uffff\2\15\2\uffff\1\15\1\uffff\3\15\2\uffff\1\15\1"+
            "\uffff\3\15\2\uffff\1\15\5\uffff\2\15\7\uffff\2\15\5\uffff\1"+
            "\15\4\uffff\1\15\2\uffff\1\15\4\uffff\1\15\3\uffff\1\15\3\uffff"+
            "\2\15\6\uffff\1\15\6\uffff\1\15\5\uffff\2\15\4\uffff\1\15\1"+
            "\uffff\1\15\7\uffff\1\15\45\uffff\1\17\1\15\1\uffff\2\15\1\uffff"+
            "\4\15\1\uffff\13\15\4\uffff\1\15\3\uffff\2\15",
            "\4\15\4\uffff\1\15\3\uffff\1\15\4\uffff\1\15\2\uffff\2\15"+
            "\3\uffff\2\15\2\uffff\1\15\1\uffff\2\15\2\uffff\1\15\1\uffff"+
            "\1\15\1\uffff\2\15\2\uffff\1\15\1\uffff\3\15\2\uffff\1\15\1"+
            "\uffff\3\15\2\uffff\1\15\5\uffff\2\15\7\uffff\2\15\5\uffff\1"+
            "\15\4\uffff\1\15\2\uffff\1\15\4\uffff\1\15\3\uffff\1\15\3\uffff"+
            "\2\15\6\uffff\1\15\6\uffff\1\15\5\uffff\2\15\4\uffff\1\15\1"+
            "\uffff\1\15\7\uffff\1\15\45\uffff\1\20\1\15\1\uffff\2\15\1\uffff"+
            "\4\15\1\uffff\13\15\4\uffff\1\15\3\uffff\2\15",
            "",
            "",
            "",
            ""
    };

    static final short[] DFA156_eot = DFA.unpackEncodedString(DFA156_eotS);
    static final short[] DFA156_eof = DFA.unpackEncodedString(DFA156_eofS);
    static final char[] DFA156_min = DFA.unpackEncodedStringToUnsignedChars(DFA156_minS);
    static final char[] DFA156_max = DFA.unpackEncodedStringToUnsignedChars(DFA156_maxS);
    static final short[] DFA156_accept = DFA.unpackEncodedString(DFA156_acceptS);
    static final short[] DFA156_special = DFA.unpackEncodedString(DFA156_specialS);
    static final short[][] DFA156_transition;

    static {
        int numStates = DFA156_transitionS.length;
        DFA156_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA156_transition[i] = DFA.unpackEncodedString(DFA156_transitionS[i]);
        }
    }

    class DFA156 extends DFA {

        public DFA156(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 156;
            this.eot = DFA156_eot;
            this.eof = DFA156_eof;
            this.min = DFA156_min;
            this.max = DFA156_max;
            this.accept = DFA156_accept;
            this.special = DFA156_special;
            this.transition = DFA156_transition;
        }
        public String getDescription() {
            return "1030:1: p_ItemType : ( p_KindTest -> ^( KindTest p_KindTest ) | {...}? => ( BINARY LPAREN RPAREN ) -> ^( BinaryTest BINARY LPAREN RPAREN ) | ( ITEM LPAREN RPAREN ) -> ^( ItemTest ITEM LPAREN RPAREN ) | p_AtomicType );";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA156_11 = input.LA(1);

                         
                        int index156_11 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA156_11==LPAREN) && ((lc(MLS)))) {s = 15;}

                        else if ( (LA156_11==EOF||(LA156_11>=AND && LA156_11<=AT)||LA156_11==CASE||LA156_11==COLLATION||LA156_11==DEFAULT||(LA156_11>=DESCENDING && LA156_11<=DIV)||(LA156_11>=ELSE && LA156_11<=EMPTY)||LA156_11==EQ||(LA156_11>=EXCEPT && LA156_11<=EXTERNAL)||LA156_11==FOR||LA156_11==GE||(LA156_11>=GT && LA156_11<=IDIV)||LA156_11==IN||(LA156_11>=INSTANCE && LA156_11<=IS)||LA156_11==LE||(LA156_11>=LET && LA156_11<=MOD)||LA156_11==NE||(LA156_11>=OR && LA156_11<=ORDER)||(LA156_11>=RETURN && LA156_11<=SATISFIES)||LA156_11==STABLE||LA156_11==TO||LA156_11==UNION||LA156_11==WHERE||LA156_11==COUNT||(LA156_11>=END && LA156_11<=GROUP)||LA156_11==ONLY||LA156_11==START||(LA156_11>=AFTER && LA156_11<=BEFORE)||LA156_11==INTO||LA156_11==MODIFY||LA156_11==WITH||LA156_11==RPAREN||(LA156_11>=LBRACKET && LA156_11<=RBRACKET)||(LA156_11>=RSQUARE && LA156_11<=NOTEQUAL)||(LA156_11>=COMMA && LA156_11<=GREATER_GREATER)||LA156_11==COLON||(LA156_11>=SEMICOLON && LA156_11<=VBAR)) ) {s = 13;}

                         
                        input.seek(index156_11);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 156, _s, input);
            error(nvae);
            throw nvae;
        }
    }
 

    public static final BitSet FOLLOW_p_VersionDecl_in_p_Module538 = new BitSet(new long[]{0x1000000400000000L,0x0000000000000200L});
    public static final BitSet FOLLOW_p_LibraryModule_in_p_Module573 = new BitSet(new long[]{0x0000000000000000L});
    public static final BitSet FOLLOW_p_MainModule_in_p_Module599 = new BitSet(new long[]{0x0000000000000000L});
    public static final BitSet FOLLOW_EOF_in_p_Module628 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_XQUERY_in_p_VersionDecl656 = new BitSet(new long[]{0x0000400000000000L,0x0000200000000000L});
    public static final BitSet FOLLOW_ENCODING_in_p_VersionDecl662 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x00000C0000000000L});
    public static final BitSet FOLLOW_p_StringLiteral_in_p_VersionDecl666 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000080000000L});
    public static final BitSet FOLLOW_VERSION_in_p_VersionDecl687 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x00000C0000000000L});
    public static final BitSet FOLLOW_p_StringLiteral_in_p_VersionDecl691 = new BitSet(new long[]{0x0000400000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000080000000L});
    public static final BitSet FOLLOW_ENCODING_in_p_VersionDecl698 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x00000C0000000000L});
    public static final BitSet FOLLOW_p_StringLiteral_in_p_VersionDecl702 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000080000000L});
    public static final BitSet FOLLOW_SEMICOLON_in_p_VersionDecl708 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_pm_Prolog_in_p_MainModule776 = new BitSet(new long[]{0xFFFFFFFFFFFF0000L,0xFFFFFFFFFFFFFFFFL,0xFFEFFFFF7FFFFFFFL,0x07E04C800783C00BL,0x0040000000000000L});
    public static final BitSet FOLLOW_p_QueryBody_in_p_MainModule778 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_p_ModuleDecl_in_p_LibraryModule834 = new BitSet(new long[]{0x1000000400000000L,0x0000000000000200L});
    public static final BitSet FOLLOW_pm_Prolog_in_p_LibraryModule836 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_MODULE_in_p_ModuleDecl892 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000400L});
    public static final BitSet FOLLOW_NAMESPACE_in_p_ModuleDecl896 = new BitSet(new long[]{0xFFFFFFFFFFFF0000L,0xFFFFFFFFFFFFFFFFL,0xFFEFFFFF7FFFFFFFL,0x0000400000000001L,0x0040000000000000L});
    public static final BitSet FOLLOW_p_NCName_in_p_ModuleDecl898 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000100L});
    public static final BitSet FOLLOW_EQUAL_in_p_ModuleDecl900 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x00000C0000000000L});
    public static final BitSet FOLLOW_p_StringLiteral_in_p_ModuleDecl902 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000080000000L});
    public static final BitSet FOLLOW_SEMICOLON_in_p_ModuleDecl904 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_pm_DefaultNamespaceDecl_in_pm_Prolog965 = new BitSet(new long[]{0x1000000400000000L});
    public static final BitSet FOLLOW_p_Setter_in_pm_Prolog971 = new BitSet(new long[]{0x1000000400000000L});
    public static final BitSet FOLLOW_pm_NamespaceDecl_in_pm_Prolog977 = new BitSet(new long[]{0x1000000400000000L});
    public static final BitSet FOLLOW_p_Import_in_pm_Prolog983 = new BitSet(new long[]{0x1000000400000000L});
    public static final BitSet FOLLOW_pg_OrderedDecl_in_pm_Prolog990 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_pm_VarDecl_in_pg_OrderedDecl1268 = new BitSet(new long[]{0x0000000400000002L});
    public static final BitSet FOLLOW_pm_ContextItemDecl_in_pg_OrderedDecl1272 = new BitSet(new long[]{0x0000000400000002L});
    public static final BitSet FOLLOW_pm_FunctionDecl_in_pg_OrderedDecl1276 = new BitSet(new long[]{0x0000000400000002L});
    public static final BitSet FOLLOW_pm_OptionDecl_in_pg_OrderedDecl1280 = new BitSet(new long[]{0x0000000400000002L});
    public static final BitSet FOLLOW_p_CollectionDecl_in_pg_OrderedDecl1295 = new BitSet(new long[]{0x0000000400000002L});
    public static final BitSet FOLLOW_p_IndexDecl_in_pg_OrderedDecl1310 = new BitSet(new long[]{0x0000000400000002L});
    public static final BitSet FOLLOW_p_ICDecl_in_pg_OrderedDecl1325 = new BitSet(new long[]{0x0000000400000002L});
    public static final BitSet FOLLOW_pm_BoundarySpaceDecl_in_p_Setter1354 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_pm_DefaultCollationDecl_in_p_Setter1366 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_pm_BaseURIDecl_in_p_Setter1378 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_pm_ConstructionDecl_in_p_Setter1390 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_pm_OrderingModeDecl_in_p_Setter1402 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_pm_EmptyOrderDecl_in_p_Setter1414 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_pm_RevalidationDecl_in_p_Setter1429 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_pm_CopyNamespacesDecl_in_p_Setter1441 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_pm_SchemaImport_in_p_Import1467 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_pm_ModuleImport_in_p_Import1471 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_DECLARE_in_pm_NamespaceDecl1502 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000400L});
    public static final BitSet FOLLOW_NAMESPACE_in_pm_NamespaceDecl1506 = new BitSet(new long[]{0xFFFFFFFFFFFF0000L,0xFFFFFFFFFFFFFFFFL,0xFFEFFFFF7FFFFFFFL,0x0000400000000001L,0x0040000000000000L});
    public static final BitSet FOLLOW_p_NCName_in_pm_NamespaceDecl1510 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000100L});
    public static final BitSet FOLLOW_EQUAL_in_pm_NamespaceDecl1512 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x00000C0000000000L});
    public static final BitSet FOLLOW_p_StringLiteral_in_pm_NamespaceDecl1516 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000080000000L});
    public static final BitSet FOLLOW_SEMICOLON_in_pm_NamespaceDecl1518 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_DECLARE_in_pm_BoundarySpaceDecl1583 = new BitSet(new long[]{0x0000000001000000L});
    public static final BitSet FOLLOW_BOUNDARY_SPACE_in_pm_BoundarySpaceDecl1587 = new BitSet(new long[]{0x0000000000000000L,0x0000000801000000L});
    public static final BitSet FOLLOW_PRESERVE_in_pm_BoundarySpaceDecl1592 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000080000000L});
    public static final BitSet FOLLOW_STRIP_in_pm_BoundarySpaceDecl1598 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000080000000L});
    public static final BitSet FOLLOW_SEMICOLON_in_pm_BoundarySpaceDecl1601 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_DECLARE_in_pm_DefaultNamespaceDecl1631 = new BitSet(new long[]{0x0000000800000000L});
    public static final BitSet FOLLOW_DEFAULT_in_pm_DefaultNamespaceDecl1635 = new BitSet(new long[]{0x0040040000000000L});
    public static final BitSet FOLLOW_ELEMENT_in_pm_DefaultNamespaceDecl1640 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000400L});
    public static final BitSet FOLLOW_FUNCTION_in_pm_DefaultNamespaceDecl1646 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000400L});
    public static final BitSet FOLLOW_NAMESPACE_in_pm_DefaultNamespaceDecl1651 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x00000C0000000000L});
    public static final BitSet FOLLOW_p_StringLiteral_in_pm_DefaultNamespaceDecl1653 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000080000000L});
    public static final BitSet FOLLOW_SEMICOLON_in_pm_DefaultNamespaceDecl1655 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_DECLARE_in_pm_OptionDecl1687 = new BitSet(new long[]{0x0000000000000000L,0x0000000000010000L});
    public static final BitSet FOLLOW_OPTION_in_pm_OptionDecl1691 = new BitSet(new long[]{0xFFFFFFFFFFFF0000L,0xFFFFFFFFFFFFFFFFL,0xFFEFFFFF7FFFFFFFL,0x0000400000000001L,0x0040000000000000L});
    public static final BitSet FOLLOW_p_QName_in_pm_OptionDecl1693 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x00000C0000000000L});
    public static final BitSet FOLLOW_p_StringLiteral_in_pm_OptionDecl1695 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000080000000L});
    public static final BitSet FOLLOW_SEMICOLON_in_pm_OptionDecl1697 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_DECLARE_in_pm_OrderingModeDecl1729 = new BitSet(new long[]{0x0000000000000000L,0x0000000000100000L});
    public static final BitSet FOLLOW_ORDERING_in_pm_OrderingModeDecl1733 = new BitSet(new long[]{0x0000000000000000L,0x0000040000080000L});
    public static final BitSet FOLLOW_ORDERED_in_pm_OrderingModeDecl1738 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000080000000L});
    public static final BitSet FOLLOW_UNORDERED_in_pm_OrderingModeDecl1744 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000080000000L});
    public static final BitSet FOLLOW_SEMICOLON_in_pm_OrderingModeDecl1747 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_DECLARE_in_pm_EmptyOrderDecl1779 = new BitSet(new long[]{0x0000000800000000L});
    public static final BitSet FOLLOW_DEFAULT_in_pm_EmptyOrderDecl1783 = new BitSet(new long[]{0x0000000000000000L,0x0000000000040000L});
    public static final BitSet FOLLOW_ORDER_in_pm_EmptyOrderDecl1787 = new BitSet(new long[]{0x0000100000000000L});
    public static final BitSet FOLLOW_EMPTY_in_pm_EmptyOrderDecl1791 = new BitSet(new long[]{0x0100000000000000L,0x0000000000000020L});
    public static final BitSet FOLLOW_GREATEST_in_pm_EmptyOrderDecl1796 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000080000000L});
    public static final BitSet FOLLOW_LEAST_in_pm_EmptyOrderDecl1802 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000080000000L});
    public static final BitSet FOLLOW_SEMICOLON_in_pm_EmptyOrderDecl1805 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_DECLARE_in_pm_CopyNamespacesDecl1837 = new BitSet(new long[]{0x0000000200000000L});
    public static final BitSet FOLLOW_COPY_NAMESPACES_in_pm_CopyNamespacesDecl1841 = new BitSet(new long[]{0x0000000000000000L,0x0000000001002000L});
    public static final BitSet FOLLOW_p_PreserveMode_in_pm_CopyNamespacesDecl1843 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000001000L});
    public static final BitSet FOLLOW_COMMA_in_pm_CopyNamespacesDecl1845 = new BitSet(new long[]{0x4000000000000000L,0x0000000000001000L});
    public static final BitSet FOLLOW_p_InheritMode_in_pm_CopyNamespacesDecl1847 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000080000000L});
    public static final BitSet FOLLOW_SEMICOLON_in_pm_CopyNamespacesDecl1849 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_DECLARE_in_p_DecimalFormatDecl1881 = new BitSet(new long[]{0x0000000800000000L,0x0008000000000000L});
    public static final BitSet FOLLOW_DECIMAL_FORMAT_in_p_DecimalFormatDecl1885 = new BitSet(new long[]{0xFFFFFFFFFFFF0000L,0xFFFFFFFFFFFFFFFFL,0xFFEFFFFF7FFFFFFFL,0x0000400000000001L,0x0040000000000000L});
    public static final BitSet FOLLOW_p_QName_in_p_DecimalFormatDecl1887 = new BitSet(new long[]{0x0000000000000000L,0x1730000000000000L,0x0000000000000407L});
    public static final BitSet FOLLOW_DEFAULT_in_p_DecimalFormatDecl1893 = new BitSet(new long[]{0x0000000000000000L,0x0008000000000000L});
    public static final BitSet FOLLOW_DECIMAL_FORMAT_in_p_DecimalFormatDecl1895 = new BitSet(new long[]{0x0000000000000000L,0x1730000000000000L,0x0000000000000407L});
    public static final BitSet FOLLOW_p_DFPropertyName_in_p_DecimalFormatDecl1900 = new BitSet(new long[]{0x0000800000000000L});
    public static final BitSet FOLLOW_EQ_in_p_DecimalFormatDecl1903 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x00000C0000000000L});
    public static final BitSet FOLLOW_p_StringLiteral_in_p_DecimalFormatDecl1905 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000080000000L});
    public static final BitSet FOLLOW_SEMICOLON_in_p_DecimalFormatDecl1907 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_DECIMAL_SEPARATOR_in_p_DFPropertyName1937 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_GROUPING_SEPARATOR_in_p_DFPropertyName1943 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_INFINITY_in_p_DFPropertyName1949 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_MINUS_SIGN_in_p_DFPropertyName1955 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_NAN_in_p_DFPropertyName1961 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_PERCENT_in_p_DFPropertyName1967 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_PER_MILLE_in_p_DFPropertyName1973 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ZERO_DIGIT_in_p_DFPropertyName1979 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_DIGIT_in_p_DFPropertyName1985 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_PATTERN_SEPARATOR_in_p_DFPropertyName1991 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_PRESERVE_in_p_PreserveMode2024 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_NO_PRESERVE_in_p_PreserveMode2030 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_INHERIT_in_p_InheritMode2064 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_NO_INHERIT_in_p_InheritMode2070 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_DECLARE_in_pm_DefaultCollationDecl2111 = new BitSet(new long[]{0x0000000800000000L});
    public static final BitSet FOLLOW_DEFAULT_in_pm_DefaultCollationDecl2115 = new BitSet(new long[]{0x0000000040000000L});
    public static final BitSet FOLLOW_COLLATION_in_pm_DefaultCollationDecl2119 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x00000C0000000000L});
    public static final BitSet FOLLOW_p_StringLiteral_in_pm_DefaultCollationDecl2121 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000080000000L});
    public static final BitSet FOLLOW_SEMICOLON_in_pm_DefaultCollationDecl2123 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_DECLARE_in_pm_BaseURIDecl2163 = new BitSet(new long[]{0x0000000000800000L});
    public static final BitSet FOLLOW_BASE_URI_in_pm_BaseURIDecl2167 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x00000C0000000000L});
    public static final BitSet FOLLOW_p_StringLiteral_in_pm_BaseURIDecl2171 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000080000000L});
    public static final BitSet FOLLOW_SEMICOLON_in_pm_BaseURIDecl2173 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_IMPORT_in_pm_SchemaImport2228 = new BitSet(new long[]{0x0000000000000000L,0x0000000010000000L});
    public static final BitSet FOLLOW_SCHEMA_in_pm_SchemaImport2232 = new BitSet(new long[]{0x0000000800000000L,0x0000000000000400L,0x0000000000000000L,0x00000C0000000000L});
    public static final BitSet FOLLOW_p_SchemaPrefix_in_pm_SchemaImport2236 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x00000C0000000000L});
    public static final BitSet FOLLOW_p_StringLiteral_in_pm_SchemaImport2241 = new BitSet(new long[]{0x0000000000200000L,0x0000000000000000L,0x0000000000000000L,0x0000000080000000L});
    public static final BitSet FOLLOW_AT_in_pm_SchemaImport2246 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x00000C0000000000L});
    public static final BitSet FOLLOW_p_StringLiteral_in_pm_SchemaImport2250 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000080001000L});
    public static final BitSet FOLLOW_COMMA_in_pm_SchemaImport2253 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x00000C0000000000L});
    public static final BitSet FOLLOW_p_StringLiteral_in_pm_SchemaImport2257 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000080001000L});
    public static final BitSet FOLLOW_SEMICOLON_in_pm_SchemaImport2263 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_NAMESPACE_in_p_SchemaPrefix2335 = new BitSet(new long[]{0xFFFFFFFFFFFF0000L,0xFFFFFFFFFFFFFFFFL,0xFFEFFFFF7FFFFFFFL,0x0000400000000001L,0x0040000000000000L});
    public static final BitSet FOLLOW_p_NCName_in_p_SchemaPrefix2339 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000100L});
    public static final BitSet FOLLOW_EQUAL_in_p_SchemaPrefix2341 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_DEFAULT_in_p_SchemaPrefix2382 = new BitSet(new long[]{0x0000040000000000L});
    public static final BitSet FOLLOW_ELEMENT_in_p_SchemaPrefix2386 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000400L});
    public static final BitSet FOLLOW_NAMESPACE_in_p_SchemaPrefix2390 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_IMPORT_in_pm_ModuleImport2440 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000200L});
    public static final BitSet FOLLOW_MODULE_in_pm_ModuleImport2444 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000400L,0x0000000000000000L,0x00000C0000000000L});
    public static final BitSet FOLLOW_NAMESPACE_in_pm_ModuleImport2449 = new BitSet(new long[]{0xFFFFFFFFFFFF0000L,0xFFFFFFFFFFFFFFFFL,0xFFEFFFFF7FFFFFFFL,0x0000400000000001L,0x0040000000000000L});
    public static final BitSet FOLLOW_p_NCName_in_pm_ModuleImport2453 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000100L});
    public static final BitSet FOLLOW_EQUAL_in_pm_ModuleImport2455 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x00000C0000000000L});
    public static final BitSet FOLLOW_p_StringLiteral_in_pm_ModuleImport2461 = new BitSet(new long[]{0x0000000000200000L,0x0000000000000000L,0x0000000000000000L,0x0000000080000000L});
    public static final BitSet FOLLOW_AT_in_pm_ModuleImport2466 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x00000C0000000000L});
    public static final BitSet FOLLOW_p_StringLiteral_in_pm_ModuleImport2470 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000080001000L});
    public static final BitSet FOLLOW_COMMA_in_pm_ModuleImport2473 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x00000C0000000000L});
    public static final BitSet FOLLOW_p_StringLiteral_in_pm_ModuleImport2477 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000080001000L});
    public static final BitSet FOLLOW_SEMICOLON_in_pm_ModuleImport2483 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_DECLARE_in_pm_VarDecl2554 = new BitSet(new long[]{0x0000000000000000L,0x0000100000000000L,0x2000000020000000L});
    public static final BitSet FOLLOW_p_PrivateOption_in_pm_VarDecl2556 = new BitSet(new long[]{0x0000000000000000L,0x0000100000000000L,0x2000000020000000L});
    public static final BitSet FOLLOW_pg_VarDeclType_in_pm_VarDecl2560 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000008L});
    public static final BitSet FOLLOW_DOLLAR_in_pm_VarDecl2562 = new BitSet(new long[]{0xFFFFFFFFFFFF0000L,0xFFFFFFFFFFFFFFFFL,0xFFEFFFFF7FFFFFFFL,0x0000400000000001L,0x0040000000000000L});
    public static final BitSet FOLLOW_p_QName_in_pm_VarDecl2566 = new BitSet(new long[]{0x0004000000080000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000200L});
    public static final BitSet FOLLOW_p_TypeDeclaration_in_pm_VarDecl2570 = new BitSet(new long[]{0x0004000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000200L});
    public static final BitSet FOLLOW_BIND_in_pm_VarDecl2575 = new BitSet(new long[]{0xFFFFFFFFFFFF0000L,0xFFFFFFFFFFFFFFFFL,0xFFEFFFFF7FFFFFFFL,0x07E04C800783C00BL,0x0040000000000000L});
    public static final BitSet FOLLOW_p_ExprSingle_in_pm_VarDecl2579 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000080000000L});
    public static final BitSet FOLLOW_EXTERNAL_in_pm_VarDecl2587 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000080000200L});
    public static final BitSet FOLLOW_BIND_in_pm_VarDecl2590 = new BitSet(new long[]{0xFFFFFFFFFFFF0000L,0xFFFFFFFFFFFFFFFFL,0xFFEFFFFF7FFFFFFFL,0x07E04C800783C00BL,0x0040000000000000L});
    public static final BitSet FOLLOW_p_ExprSingle_in_pm_VarDecl2594 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000080000000L});
    public static final BitSet FOLLOW_SEMICOLON_in_pm_VarDecl2600 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_CONSTANT_in_pg_VarDeclType2688 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_VARIABLE_in_pg_VarDeclType2724 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_DECLARE_in_pm_ContextItemDecl2783 = new BitSet(new long[]{0x0000000000000000L,0x0002000000000000L});
    public static final BitSet FOLLOW_CONTEXT_in_pm_ContextItemDecl2787 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000004L});
    public static final BitSet FOLLOW_ITEM_in_pm_ContextItemDecl2791 = new BitSet(new long[]{0x0004000000080000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000200L});
    public static final BitSet FOLLOW_AS_in_pm_ContextItemDecl2796 = new BitSet(new long[]{0xFFFFFFFFFFFF0000L,0xFFFFFFFFFFFFFFFFL,0xFFEFFFFF7FFFFFFFL,0x0000400000000001L,0x0040000000000000L});
    public static final BitSet FOLLOW_p_ItemType_in_pm_ContextItemDecl2798 = new BitSet(new long[]{0x0004000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000200L});
    public static final BitSet FOLLOW_BIND_in_pm_ContextItemDecl2804 = new BitSet(new long[]{0xFFFFFFFFFFFF0000L,0xFFFFFFFFFFFFFFFFL,0xFFEFFFFF7FFFFFFFL,0x07E04C800783C00BL,0x0040000000000000L});
    public static final BitSet FOLLOW_p_ExprSingle_in_pm_ContextItemDecl2806 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000080000000L});
    public static final BitSet FOLLOW_EXTERNAL_in_pm_ContextItemDecl2814 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000080000200L});
    public static final BitSet FOLLOW_BIND_in_pm_ContextItemDecl2817 = new BitSet(new long[]{0xFFFFFFFFFFFF0000L,0xFFFFFFFFFFFFFFFFL,0xFFEFFFFF7FFFFFFFL,0x07E04C800783C00BL,0x0040000000000000L});
    public static final BitSet FOLLOW_p_ExprSingle_in_pm_ContextItemDecl2819 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000080000000L});
    public static final BitSet FOLLOW_SEMICOLON_in_pm_ContextItemDecl2825 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_DECLARE_in_pm_ConstructionDecl2860 = new BitSet(new long[]{0x0000000100000000L});
    public static final BitSet FOLLOW_CONSTRUCTION_in_pm_ConstructionDecl2864 = new BitSet(new long[]{0x0000000000000000L,0x0000000801000000L});
    public static final BitSet FOLLOW_STRIP_in_pm_ConstructionDecl2869 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000080000000L});
    public static final BitSet FOLLOW_PRESERVE_in_pm_ConstructionDecl2875 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000080000000L});
    public static final BitSet FOLLOW_SEMICOLON_in_pm_ConstructionDecl2878 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_DECLARE_in_pm_FunctionDecl2915 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000100000000L});
    public static final BitSet FOLLOW_SEQUENTIAL_in_pm_FunctionDecl2919 = new BitSet(new long[]{0x0040000000000000L});
    public static final BitSet FOLLOW_FUNCTION_in_pm_FunctionDecl2923 = new BitSet(new long[]{0xFFFFFFFFFFFF0000L,0xFFFFFFFFFFFFFFFFL,0xFFEFFFFF7FFFFFFFL,0x0000400000000001L,0x0040000000000000L});
    public static final BitSet FOLLOW_p_QName_in_pm_FunctionDecl2927 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000002L});
    public static final BitSet FOLLOW_LPAREN_in_pm_FunctionDecl2929 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x000000000000000CL});
    public static final BitSet FOLLOW_p_ParamList_in_pm_FunctionDecl2933 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000004L});
    public static final BitSet FOLLOW_RPAREN_in_pm_FunctionDecl2936 = new BitSet(new long[]{0x0004000000080000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000010L});
    public static final BitSet FOLLOW_p_TypeDeclaration_in_pm_FunctionDecl2940 = new BitSet(new long[]{0x0004000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000010L});
    public static final BitSet FOLLOW_p_Block_in_pm_FunctionDecl2946 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000080000000L});
    public static final BitSet FOLLOW_EXTERNAL_in_pm_FunctionDecl2952 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000080000000L});
    public static final BitSet FOLLOW_SEMICOLON_in_pm_FunctionDecl2955 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_DECLARE_in_pm_FunctionDecl3018 = new BitSet(new long[]{0x0040000000000000L,0x0000000000000000L,0x2000000402000000L});
    public static final BitSet FOLLOW_p_PrivateOption_in_pm_FunctionDecl3020 = new BitSet(new long[]{0x0040000000000000L,0x0000000000000000L,0x0000000402000000L});
    public static final BitSet FOLLOW_p_FunctionType_in_pm_FunctionDecl3022 = new BitSet(new long[]{0x0040000000000000L});
    public static final BitSet FOLLOW_FUNCTION_in_pm_FunctionDecl3026 = new BitSet(new long[]{0xFFFFFFFFFFFF0000L,0xFFFFFFFFFFFFFFFFL,0xFFEFFFFF7FFFFFFFL,0x0000400000000001L,0x0040000000000000L});
    public static final BitSet FOLLOW_p_QName_in_pm_FunctionDecl3030 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000002L});
    public static final BitSet FOLLOW_LPAREN_in_pm_FunctionDecl3032 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x000000000000000CL});
    public static final BitSet FOLLOW_p_ParamList_in_pm_FunctionDecl3036 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000004L});
    public static final BitSet FOLLOW_RPAREN_in_pm_FunctionDecl3039 = new BitSet(new long[]{0x0004000000080000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000010L});
    public static final BitSet FOLLOW_p_TypeDeclaration_in_pm_FunctionDecl3043 = new BitSet(new long[]{0x0004000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000010L});
    public static final BitSet FOLLOW_p_EnclosedExpr_in_pm_FunctionDecl3049 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000080000000L});
    public static final BitSet FOLLOW_EXTERNAL_in_pm_FunctionDecl3055 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000080000000L});
    public static final BitSet FOLLOW_SEMICOLON_in_pm_FunctionDecl3058 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_UPDATING_in_p_FunctionType3139 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_SIMPLE_in_p_FunctionType3158 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_PRIVATE_in_p_PrivateOption3202 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_p_Param_in_p_ParamList3247 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000001000L});
    public static final BitSet FOLLOW_COMMA_in_p_ParamList3250 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000008L});
    public static final BitSet FOLLOW_p_Param_in_p_ParamList3254 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000001000L});
    public static final BitSet FOLLOW_DOLLAR_in_p_Param3312 = new BitSet(new long[]{0xFFFFFFFFFFFF0000L,0xFFFFFFFFFFFFFFFFL,0xFFEFFFFF7FFFFFFFL,0x0000400000000001L,0x0040000000000000L});
    public static final BitSet FOLLOW_p_QName_in_p_Param3316 = new BitSet(new long[]{0x0000000000080002L});
    public static final BitSet FOLLOW_p_TypeDeclaration_in_p_Param3320 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_LBRACKET_in_p_EnclosedExpr3376 = new BitSet(new long[]{0xFFFFFFFFFFFF0000L,0xFFFFFFFFFFFFFFFFL,0xFFEFFFFF7FFFFFFFL,0x07E04C800783C00BL,0x0040000000000000L});
    public static final BitSet FOLLOW_pm_Expr_in_p_EnclosedExpr3378 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000020L});
    public static final BitSet FOLLOW_RBRACKET_in_p_EnclosedExpr3380 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_pm_Expr_in_p_QueryBody3430 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_p_ConcatExpr_in_pm_Expr3481 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000080000000L});
    public static final BitSet FOLLOW_SEMICOLON_in_pm_Expr3498 = new BitSet(new long[]{0xFFFFFFFFFFFF0002L,0xFFFFFFFFFFFFFFFFL,0xFFEFFFFF7FFFFFFFL,0x07E04C808783C00BL,0x0040000000000000L});
    public static final BitSet FOLLOW_pm_ApplyExpr_in_pm_Expr3500 = new BitSet(new long[]{0xFFFFFFFFFFFF0002L,0xFFFFFFFFFFFFFFFFL,0xFFEFFFFF7FFFFFFFL,0x07E04C808783C00BL,0x0040000000000000L});
    public static final BitSet FOLLOW_SEMICOLON_in_pm_Expr3525 = new BitSet(new long[]{0xFFFFFFFFFFFF0000L,0xFFFFFFFFFFFFFFFFL,0xFFEFFFFF7FFFFFFFL,0x07E04C800783C00BL,0x0040000000000000L});
    public static final BitSet FOLLOW_p_ConcatExpr_in_pm_Expr3527 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000080000000L});
    public static final BitSet FOLLOW_p_FLWORExpr_in_p_ExprSingle3561 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_p_QuantifiedExpr_in_p_ExprSingle3573 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_p_TypeswitchExpr_in_p_ExprSingle3585 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_p_IfExpr_in_p_ExprSingle3597 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_p_TryCatchExpr_in_p_ExprSingle3609 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_p_EvalExpr_in_p_ExprSingle3624 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_p_InsertExpr_in_p_ExprSingle3639 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_p_DeleteExpr_in_p_ExprSingle3654 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_p_RenameExpr_in_p_ExprSingle3669 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_p_ReplaceExpr_in_p_ExprSingle3684 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_p_TransformExpr_in_p_ExprSingle3699 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_p_BlockExpr_in_p_ExprSingle3714 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_p_AssignmentExpr_in_p_ExprSingle3729 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_p_ExitExpr_in_p_ExprSingle3744 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_p_WhileExpr_in_p_ExprSingle3759 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_p_OrExpr_in_p_ExprSingle3771 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_p_InitialClause_in_p_FLWORExpr3797 = new BitSet(new long[]{0x0020000000000000L,0x0084400204040040L});
    public static final BitSet FOLLOW_p_IntermediateClause_in_p_FLWORExpr3799 = new BitSet(new long[]{0x0020000000000000L,0x0084400204040040L});
    public static final BitSet FOLLOW_p_ReturnClause_in_p_FLWORExpr3802 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_p_ForClause_in_p_InitialClause3828 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_p_LetClause_in_p_InitialClause3832 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_p_WindowClause_in_p_InitialClause3836 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_p_InitialClause_in_p_IntermediateClause3862 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_p_WhereClause_in_p_IntermediateClause3866 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_p_GroupByClause_in_p_IntermediateClause3870 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_p_OrderByClause_in_p_IntermediateClause3874 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_p_CountClause_in_p_IntermediateClause3878 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_FOR_in_p_ForClause3906 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000008L});
    public static final BitSet FOLLOW_DOLLAR_in_p_ForClause3908 = new BitSet(new long[]{0xFFFFFFFFFFFF0000L,0xFFFFFFFFFFFFFFFFL,0xFFEFFFFF7FFFFFFFL,0x0000400000000001L,0x0040000000000000L});
    public static final BitSet FOLLOW_p_VarName_in_p_ForClause3910 = new BitSet(new long[]{0x2000000000280000L});
    public static final BitSet FOLLOW_p_TypeDeclaration_in_p_ForClause3912 = new BitSet(new long[]{0x2000000000200000L});
    public static final BitSet FOLLOW_p_PositionalVar_in_p_ForClause3915 = new BitSet(new long[]{0x2000000000000000L});
    public static final BitSet FOLLOW_IN_in_p_ForClause3920 = new BitSet(new long[]{0xFFFFFFFFFFFF0000L,0xFFFFFFFFFFFFFFFFL,0xFFEFFFFF7FFFFFFFL,0x07E04C800783C00BL,0x0040000000000000L});
    public static final BitSet FOLLOW_p_ExprSingle_in_p_ForClause3922 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000001000L});
    public static final BitSet FOLLOW_COMMA_in_p_ForClause3925 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000008L});
    public static final BitSet FOLLOW_DOLLAR_in_p_ForClause3927 = new BitSet(new long[]{0xFFFFFFFFFFFF0000L,0xFFFFFFFFFFFFFFFFL,0xFFEFFFFF7FFFFFFFL,0x0000400000000001L,0x0040000000000000L});
    public static final BitSet FOLLOW_p_VarName_in_p_ForClause3929 = new BitSet(new long[]{0x2000000000280000L});
    public static final BitSet FOLLOW_p_TypeDeclaration_in_p_ForClause3931 = new BitSet(new long[]{0x2000000000200000L});
    public static final BitSet FOLLOW_p_PositionalVar_in_p_ForClause3934 = new BitSet(new long[]{0x2000000000000000L});
    public static final BitSet FOLLOW_IN_in_p_ForClause3939 = new BitSet(new long[]{0xFFFFFFFFFFFF0000L,0xFFFFFFFFFFFFFFFFL,0xFFEFFFFF7FFFFFFFL,0x07E04C800783C00BL,0x0040000000000000L});
    public static final BitSet FOLLOW_p_ExprSingle_in_p_ForClause3941 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000001000L});
    public static final BitSet FOLLOW_AT_in_p_PositionalVar3973 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000008L});
    public static final BitSet FOLLOW_DOLLAR_in_p_PositionalVar3977 = new BitSet(new long[]{0xFFFFFFFFFFFF0000L,0xFFFFFFFFFFFFFFFFL,0xFFEFFFFF7FFFFFFFL,0x0000400000000001L,0x0040000000000000L});
    public static final BitSet FOLLOW_p_VarName_in_p_PositionalVar3979 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_LET_in_p_LetClause4007 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000008L});
    public static final BitSet FOLLOW_DOLLAR_in_p_LetClause4011 = new BitSet(new long[]{0xFFFFFFFFFFFF0000L,0xFFFFFFFFFFFFFFFFL,0xFFEFFFFF7FFFFFFFL,0x0000400000000001L,0x0040000000000000L});
    public static final BitSet FOLLOW_p_VarName_in_p_LetClause4013 = new BitSet(new long[]{0x0000000000080000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000200L});
    public static final BitSet FOLLOW_p_TypeDeclaration_in_p_LetClause4015 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000200L});
    public static final BitSet FOLLOW_BIND_in_p_LetClause4018 = new BitSet(new long[]{0xFFFFFFFFFFFF0000L,0xFFFFFFFFFFFFFFFFL,0xFFEFFFFF7FFFFFFFL,0x07E04C800783C00BL,0x0040000000000000L});
    public static final BitSet FOLLOW_p_ExprSingle_in_p_LetClause4020 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000001000L});
    public static final BitSet FOLLOW_COMMA_in_p_LetClause4023 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000008L});
    public static final BitSet FOLLOW_DOLLAR_in_p_LetClause4025 = new BitSet(new long[]{0xFFFFFFFFFFFF0000L,0xFFFFFFFFFFFFFFFFL,0xFFEFFFFF7FFFFFFFL,0x0000400000000001L,0x0040000000000000L});
    public static final BitSet FOLLOW_p_VarName_in_p_LetClause4027 = new BitSet(new long[]{0x0000000000080000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000200L});
    public static final BitSet FOLLOW_p_TypeDeclaration_in_p_LetClause4029 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000200L});
    public static final BitSet FOLLOW_BIND_in_p_LetClause4032 = new BitSet(new long[]{0xFFFFFFFFFFFF0000L,0xFFFFFFFFFFFFFFFFL,0xFFEFFFFF7FFFFFFFL,0x07E04C800783C00BL,0x0040000000000000L});
    public static final BitSet FOLLOW_p_ExprSingle_in_p_LetClause4034 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000001000L});
    public static final BitSet FOLLOW_FOR_in_p_WindowClause4064 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000090L});
    public static final BitSet FOLLOW_p_TumblingWindowClause_in_p_WindowClause4069 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_p_SlidingWindowClause_in_p_WindowClause4073 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_TUMBLING_in_p_TumblingWindowClause4110 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000200L});
    public static final BitSet FOLLOW_WINDOW_in_p_TumblingWindowClause4114 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000008L});
    public static final BitSet FOLLOW_DOLLAR_in_p_TumblingWindowClause4116 = new BitSet(new long[]{0xFFFFFFFFFFFF0000L,0xFFFFFFFFFFFFFFFFL,0xFFEFFFFF7FFFFFFFL,0x0000400000000001L,0x0040000000000000L});
    public static final BitSet FOLLOW_p_VarName_in_p_TumblingWindowClause4118 = new BitSet(new long[]{0x2000000000080000L});
    public static final BitSet FOLLOW_p_TypeDeclaration_in_p_TumblingWindowClause4120 = new BitSet(new long[]{0x2000000000000000L});
    public static final BitSet FOLLOW_IN_in_p_TumblingWindowClause4123 = new BitSet(new long[]{0xFFFFFFFFFFFF0000L,0xFFFFFFFFFFFFFFFFL,0xFFEFFFFF7FFFFFFFL,0x07E04C800783C00BL,0x0040000000000000L});
    public static final BitSet FOLLOW_p_ExprSingle_in_p_TumblingWindowClause4125 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000020L});
    public static final BitSet FOLLOW_p_WindowStartCondition_in_p_TumblingWindowClause4127 = new BitSet(new long[]{0x0000000000000002L,0x4040000000000000L});
    public static final BitSet FOLLOW_p_WindowEndCondition_in_p_TumblingWindowClause4129 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_SLIDING_in_p_SlidingWindowClause4160 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000200L});
    public static final BitSet FOLLOW_WINDOW_in_p_SlidingWindowClause4164 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000008L});
    public static final BitSet FOLLOW_DOLLAR_in_p_SlidingWindowClause4166 = new BitSet(new long[]{0xFFFFFFFFFFFF0000L,0xFFFFFFFFFFFFFFFFL,0xFFEFFFFF7FFFFFFFL,0x0000400000000001L,0x0040000000000000L});
    public static final BitSet FOLLOW_p_VarName_in_p_SlidingWindowClause4168 = new BitSet(new long[]{0x2000000000080000L});
    public static final BitSet FOLLOW_p_TypeDeclaration_in_p_SlidingWindowClause4170 = new BitSet(new long[]{0x2000000000000000L});
    public static final BitSet FOLLOW_IN_in_p_SlidingWindowClause4173 = new BitSet(new long[]{0xFFFFFFFFFFFF0000L,0xFFFFFFFFFFFFFFFFL,0xFFEFFFFF7FFFFFFFL,0x07E04C800783C00BL,0x0040000000000000L});
    public static final BitSet FOLLOW_p_ExprSingle_in_p_SlidingWindowClause4175 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000020L});
    public static final BitSet FOLLOW_p_WindowStartCondition_in_p_SlidingWindowClause4177 = new BitSet(new long[]{0x0000000000000002L,0x4040000000000000L});
    public static final BitSet FOLLOW_p_WindowEndCondition_in_p_SlidingWindowClause4179 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_START_in_p_WindowStartCondition4210 = new BitSet(new long[]{0x0000000000200000L,0x2000000000000000L,0x0000000000000108L,0x0000000000000008L});
    public static final BitSet FOLLOW_p_WindowVars_in_p_WindowStartCondition4212 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000100L});
    public static final BitSet FOLLOW_WHEN_in_p_WindowStartCondition4216 = new BitSet(new long[]{0xFFFFFFFFFFFF0000L,0xFFFFFFFFFFFFFFFFL,0xFFEFFFFF7FFFFFFFL,0x07E04C800783C00BL,0x0040000000000000L});
    public static final BitSet FOLLOW_p_ExprSingle_in_p_WindowStartCondition4218 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ONLY_in_p_WindowEndCondition4248 = new BitSet(new long[]{0x0000000000000000L,0x0040000000000000L});
    public static final BitSet FOLLOW_END_in_p_WindowEndCondition4253 = new BitSet(new long[]{0x0000000000200000L,0x2000000000000000L,0x0000000000000108L,0x0000000000000008L});
    public static final BitSet FOLLOW_p_WindowVars_in_p_WindowEndCondition4255 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000100L});
    public static final BitSet FOLLOW_WHEN_in_p_WindowEndCondition4259 = new BitSet(new long[]{0xFFFFFFFFFFFF0000L,0xFFFFFFFFFFFFFFFFL,0xFFEFFFFF7FFFFFFFL,0x07E04C800783C00BL,0x0040000000000000L});
    public static final BitSet FOLLOW_p_ExprSingle_in_p_WindowEndCondition4261 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_DOLLAR_in_p_WindowVars4290 = new BitSet(new long[]{0xFFFFFFFFFFFF0000L,0xFFFFFFFFFFFFFFFFL,0xFFEFFFFF7FFFFFFFL,0x0000400000000001L,0x0040000000000000L});
    public static final BitSet FOLLOW_p_QName_in_p_WindowVars4292 = new BitSet(new long[]{0x0000000000200002L,0x2000000000000000L,0x0000000000000008L});
    public static final BitSet FOLLOW_p_PositionalVar_in_p_WindowVars4296 = new BitSet(new long[]{0x0000000000000002L,0x2000000000000000L,0x0000000000000008L});
    public static final BitSet FOLLOW_PREVIOUS_in_p_WindowVars4302 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000008L});
    public static final BitSet FOLLOW_DOLLAR_in_p_WindowVars4304 = new BitSet(new long[]{0xFFFFFFFFFFFF0000L,0xFFFFFFFFFFFFFFFFL,0xFFEFFFFF7FFFFFFFL,0x0000400000000001L,0x0040000000000000L});
    public static final BitSet FOLLOW_p_QName_in_p_WindowVars4306 = new BitSet(new long[]{0x0000000000000002L,0x2000000000000000L});
    public static final BitSet FOLLOW_NEXT_in_p_WindowVars4313 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000008L});
    public static final BitSet FOLLOW_DOLLAR_in_p_WindowVars4315 = new BitSet(new long[]{0xFFFFFFFFFFFF0000L,0xFFFFFFFFFFFFFFFFL,0xFFEFFFFF7FFFFFFFL,0x0000400000000001L,0x0040000000000000L});
    public static final BitSet FOLLOW_p_QName_in_p_WindowVars4317 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_COUNT_in_p_CountClause4358 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000008L});
    public static final BitSet FOLLOW_DOLLAR_in_p_CountClause4362 = new BitSet(new long[]{0xFFFFFFFFFFFF0000L,0xFFFFFFFFFFFFFFFFL,0xFFEFFFFF7FFFFFFFL,0x0000400000000001L,0x0040000000000000L});
    public static final BitSet FOLLOW_p_VarName_in_p_CountClause4364 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_WHERE_in_p_WhereClause4400 = new BitSet(new long[]{0xFFFFFFFFFFFF0000L,0xFFFFFFFFFFFFFFFFL,0xFFEFFFFF7FFFFFFFL,0x07E04C800783C00BL,0x0040000000000000L});
    public static final BitSet FOLLOW_p_ExprSingle_in_p_WhereClause4404 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_GROUP_in_p_GroupByClause4434 = new BitSet(new long[]{0x0000000002000000L});
    public static final BitSet FOLLOW_BY_in_p_GroupByClause4438 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000008L});
    public static final BitSet FOLLOW_p_GroupingSpecList_in_p_GroupByClause4440 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_p_GroupingSpec_in_p_GroupingSpecList4470 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000001000L});
    public static final BitSet FOLLOW_COMMA_in_p_GroupingSpecList4473 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000008L});
    public static final BitSet FOLLOW_p_GroupingSpec_in_p_GroupingSpecList4475 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000001000L});
    public static final BitSet FOLLOW_DOLLAR_in_p_GroupingSpec4505 = new BitSet(new long[]{0xFFFFFFFFFFFF0000L,0xFFFFFFFFFFFFFFFFL,0xFFEFFFFF7FFFFFFFL,0x0000400000000001L,0x0040000000000000L});
    public static final BitSet FOLLOW_p_VarName_in_p_GroupingSpec4507 = new BitSet(new long[]{0x0000000040000002L});
    public static final BitSet FOLLOW_COLLATION_in_p_GroupingSpec4512 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x00000C0000000000L});
    public static final BitSet FOLLOW_p_StringLiteral_in_p_GroupingSpec4514 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ORDER_in_p_OrderByClause4550 = new BitSet(new long[]{0x0000000002000000L});
    public static final BitSet FOLLOW_BY_in_p_OrderByClause4554 = new BitSet(new long[]{0xFFFFFFFFFFFF0000L,0xFFFFFFFFFFFFFFFFL,0xFFEFFFFF7FFFFFFFL,0x07E04C800783C00BL,0x0040000000000000L});
    public static final BitSet FOLLOW_STABLE_in_p_OrderByClause4562 = new BitSet(new long[]{0x0000000000000000L,0x0000000000040000L});
    public static final BitSet FOLLOW_ORDER_in_p_OrderByClause4566 = new BitSet(new long[]{0x0000000002000000L});
    public static final BitSet FOLLOW_BY_in_p_OrderByClause4570 = new BitSet(new long[]{0xFFFFFFFFFFFF0000L,0xFFFFFFFFFFFFFFFFL,0xFFEFFFFF7FFFFFFFL,0x07E04C800783C00BL,0x0040000000000000L});
    public static final BitSet FOLLOW_p_OrderSpecList_in_p_OrderByClause4574 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_p_OrderSpec_in_p_OrderSpecList4604 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000001000L});
    public static final BitSet FOLLOW_COMMA_in_p_OrderSpecList4607 = new BitSet(new long[]{0xFFFFFFFFFFFF0000L,0xFFFFFFFFFFFFFFFFL,0xFFEFFFFF7FFFFFFFL,0x07E04C800783C00BL,0x0040000000000000L});
    public static final BitSet FOLLOW_p_OrderSpec_in_p_OrderSpecList4609 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000001000L});
    public static final BitSet FOLLOW_p_ExprSingle_in_p_OrderSpec4639 = new BitSet(new long[]{0x0000104040100000L});
    public static final BitSet FOLLOW_p_OrderModifier_in_p_OrderSpec4641 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ASCENDING_in_p_OrderModifier4670 = new BitSet(new long[]{0x0000100040000002L});
    public static final BitSet FOLLOW_DESCENDING_in_p_OrderModifier4676 = new BitSet(new long[]{0x0000100040000002L});
    public static final BitSet FOLLOW_EMPTY_in_p_OrderModifier4683 = new BitSet(new long[]{0x0100000000000000L,0x0000000000000020L});
    public static final BitSet FOLLOW_GREATEST_in_p_OrderModifier4688 = new BitSet(new long[]{0x0000000040000002L});
    public static final BitSet FOLLOW_LEAST_in_p_OrderModifier4694 = new BitSet(new long[]{0x0000000040000002L});
    public static final BitSet FOLLOW_COLLATION_in_p_OrderModifier4702 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x00000C0000000000L});
    public static final BitSet FOLLOW_p_StringLiteral_in_p_OrderModifier4704 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_RETURN_in_p_ReturnClause4736 = new BitSet(new long[]{0xFFFFFFFFFFFF0000L,0xFFFFFFFFFFFFFFFFL,0xFFEFFFFF7FFFFFFFL,0x07E04C800783C00BL,0x0040000000000000L});
    public static final BitSet FOLLOW_p_ExprSingle_in_p_ReturnClause4740 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_SOME_in_p_QuantifiedExpr4771 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000008L});
    public static final BitSet FOLLOW_EVERY_in_p_QuantifiedExpr4777 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000008L});
    public static final BitSet FOLLOW_DOLLAR_in_p_QuantifiedExpr4780 = new BitSet(new long[]{0xFFFFFFFFFFFF0000L,0xFFFFFFFFFFFFFFFFL,0xFFEFFFFF7FFFFFFFL,0x0000400000000001L,0x0040000000000000L});
    public static final BitSet FOLLOW_p_VarName_in_p_QuantifiedExpr4782 = new BitSet(new long[]{0x2000000000080000L});
    public static final BitSet FOLLOW_p_TypeDeclaration_in_p_QuantifiedExpr4784 = new BitSet(new long[]{0x2000000000000000L});
    public static final BitSet FOLLOW_IN_in_p_QuantifiedExpr4789 = new BitSet(new long[]{0xFFFFFFFFFFFF0000L,0xFFFFFFFFFFFFFFFFL,0xFFEFFFFF7FFFFFFFL,0x07E04C800783C00BL,0x0040000000000000L});
    public static final BitSet FOLLOW_p_ExprSingle_in_p_QuantifiedExpr4791 = new BitSet(new long[]{0x0000000000000000L,0x0000000008000000L,0x0000000000000000L,0x0000000000001000L});
    public static final BitSet FOLLOW_COMMA_in_p_QuantifiedExpr4794 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000008L});
    public static final BitSet FOLLOW_DOLLAR_in_p_QuantifiedExpr4796 = new BitSet(new long[]{0xFFFFFFFFFFFF0000L,0xFFFFFFFFFFFFFFFFL,0xFFEFFFFF7FFFFFFFL,0x0000400000000001L,0x0040000000000000L});
    public static final BitSet FOLLOW_p_QName_in_p_QuantifiedExpr4798 = new BitSet(new long[]{0x2000000000080000L});
    public static final BitSet FOLLOW_p_TypeDeclaration_in_p_QuantifiedExpr4800 = new BitSet(new long[]{0x2000000000000000L});
    public static final BitSet FOLLOW_IN_in_p_QuantifiedExpr4805 = new BitSet(new long[]{0xFFFFFFFFFFFF0000L,0xFFFFFFFFFFFFFFFFL,0xFFEFFFFF7FFFFFFFL,0x07E04C800783C00BL,0x0040000000000000L});
    public static final BitSet FOLLOW_p_ExprSingle_in_p_QuantifiedExpr4807 = new BitSet(new long[]{0x0000000000000000L,0x0000000008000000L,0x0000000000000000L,0x0000000000001000L});
    public static final BitSet FOLLOW_SATISFIES_in_p_QuantifiedExpr4813 = new BitSet(new long[]{0xFFFFFFFFFFFF0000L,0xFFFFFFFFFFFFFFFFL,0xFFEFFFFF7FFFFFFFL,0x07E04C800783C00BL,0x0040000000000000L});
    public static final BitSet FOLLOW_p_ExprSingle_in_p_QuantifiedExpr4815 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_TYPESWITCH_in_p_TypeswitchExpr4845 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000002L});
    public static final BitSet FOLLOW_LPAREN_in_p_TypeswitchExpr4847 = new BitSet(new long[]{0xFFFFFFFFFFFF0000L,0xFFFFFFFFFFFFFFFFL,0xFFEFFFFF7FFFFFFFL,0x07E04C800783C00BL,0x0040000000000000L});
    public static final BitSet FOLLOW_pm_Expr_in_p_TypeswitchExpr4849 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000004L});
    public static final BitSet FOLLOW_RPAREN_in_p_TypeswitchExpr4851 = new BitSet(new long[]{0x0000000004000000L});
    public static final BitSet FOLLOW_p_CaseClause_in_p_TypeswitchExpr4853 = new BitSet(new long[]{0x0000000804000000L});
    public static final BitSet FOLLOW_DEFAULT_in_p_TypeswitchExpr4858 = new BitSet(new long[]{0x0000000000000000L,0x0000000004000000L,0x0000000000000000L,0x0000000000000008L});
    public static final BitSet FOLLOW_DOLLAR_in_p_TypeswitchExpr4861 = new BitSet(new long[]{0xFFFFFFFFFFFF0000L,0xFFFFFFFFFFFFFFFFL,0xFFEFFFFF7FFFFFFFL,0x0000400000000001L,0x0040000000000000L});
    public static final BitSet FOLLOW_p_VarName_in_p_TypeswitchExpr4863 = new BitSet(new long[]{0x0000000000000000L,0x0000000004000000L});
    public static final BitSet FOLLOW_RETURN_in_p_TypeswitchExpr4869 = new BitSet(new long[]{0xFFFFFFFFFFFF0000L,0xFFFFFFFFFFFFFFFFL,0xFFEFFFFF7FFFFFFFL,0x07E04C800783C00BL,0x0040000000000000L});
    public static final BitSet FOLLOW_p_ExprSingle_in_p_TypeswitchExpr4871 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_CASE_in_p_CaseClause4901 = new BitSet(new long[]{0xFFFFFFFFFFFF0000L,0xFFFFFFFFFFFFFFFFL,0xFFEFFFFF7FFFFFFFL,0x0000400000000009L,0x0040000000000000L});
    public static final BitSet FOLLOW_DOLLAR_in_p_CaseClause4904 = new BitSet(new long[]{0xFFFFFFFFFFFF0000L,0xFFFFFFFFFFFFFFFFL,0xFFEFFFFF7FFFFFFFL,0x0000400000000001L,0x0040000000000000L});
    public static final BitSet FOLLOW_p_VarName_in_p_CaseClause4906 = new BitSet(new long[]{0x0000000000080000L});
    public static final BitSet FOLLOW_AS_in_p_CaseClause4910 = new BitSet(new long[]{0xFFFFFFFFFFFF0000L,0xFFFFFFFFFFFFFFFFL,0xFFEFFFFF7FFFFFFFL,0x0000400000000009L,0x0040000000000000L});
    public static final BitSet FOLLOW_p_SequenceType_in_p_CaseClause4914 = new BitSet(new long[]{0x0000000000000000L,0x0000000004000000L});
    public static final BitSet FOLLOW_RETURN_in_p_CaseClause4918 = new BitSet(new long[]{0xFFFFFFFFFFFF0000L,0xFFFFFFFFFFFFFFFFL,0xFFEFFFFF7FFFFFFFL,0x07E04C800783C00BL,0x0040000000000000L});
    public static final BitSet FOLLOW_p_ExprSingle_in_p_CaseClause4920 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_IF_in_p_IfExpr4950 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000002L});
    public static final BitSet FOLLOW_LPAREN_in_p_IfExpr4952 = new BitSet(new long[]{0xFFFFFFFFFFFF0000L,0xFFFFFFFFFFFFFFFFL,0xFFEFFFFF7FFFFFFFL,0x07E04C800783C00BL,0x0040000000000000L});
    public static final BitSet FOLLOW_pm_Expr_in_p_IfExpr4954 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000004L});
    public static final BitSet FOLLOW_RPAREN_in_p_IfExpr4956 = new BitSet(new long[]{0x0000000000000000L,0x0000002000000000L});
    public static final BitSet FOLLOW_THEN_in_p_IfExpr4960 = new BitSet(new long[]{0xFFFFFFFFFFFF0000L,0xFFFFFFFFFFFFFFFFL,0xFFEFFFFF7FFFFFFFL,0x07E04C800783C00BL,0x0040000000000000L});
    public static final BitSet FOLLOW_p_ExprSingle_in_p_IfExpr4962 = new BitSet(new long[]{0x0000080000000000L});
    public static final BitSet FOLLOW_ELSE_in_p_IfExpr4966 = new BitSet(new long[]{0xFFFFFFFFFFFF0000L,0xFFFFFFFFFFFFFFFFL,0xFFEFFFFF7FFFFFFFL,0x07E04C800783C00BL,0x0040000000000000L});
    public static final BitSet FOLLOW_p_ExprSingle_in_p_IfExpr4968 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_p_AndExpr_in_p_OrExpr4996 = new BitSet(new long[]{0x0000000000000002L,0x0000000000020000L});
    public static final BitSet FOLLOW_OR_in_p_OrExpr5002 = new BitSet(new long[]{0xFFFFFFFFFFFF0000L,0xFFFFFFFFFFFFFFFFL,0xFFEFFFFF7FFFFFFFL,0x07E04C800783C00BL,0x0040000000000000L});
    public static final BitSet FOLLOW_p_AndExpr_in_p_OrExpr5006 = new BitSet(new long[]{0x0000000000000002L,0x0000000000020000L});
    public static final BitSet FOLLOW_p_ComparisonExpr_in_p_AndExpr5037 = new BitSet(new long[]{0x0000000000040002L});
    public static final BitSet FOLLOW_AND_in_p_AndExpr5043 = new BitSet(new long[]{0xFFFFFFFFFFFF0000L,0xFFFFFFFFFFFFFFFFL,0xFFEFFFFF7FFFFFFFL,0x07E04C800783C00BL,0x0040000000000000L});
    public static final BitSet FOLLOW_p_ComparisonExpr_in_p_AndExpr5047 = new BitSet(new long[]{0x0000000000040002L});
    public static final BitSet FOLLOW_p_RangeExpr_in_p_ComparisonExpr5078 = new BitSet(new long[]{0x0280800000000002L,0x0000000000000892L,0x0000000000000000L,0x00000000007E0500L});
    public static final BitSet FOLLOW_p_ValueComp_in_p_ComparisonExpr5083 = new BitSet(new long[]{0xFFFFFFFFFFFF0000L,0xFFFFFFFFFFFFFFFFL,0xFFEFFFFF7FFFFFFFL,0x07E04C800783C00BL,0x0040000000000000L});
    public static final BitSet FOLLOW_p_GeneralComp_in_p_ComparisonExpr5087 = new BitSet(new long[]{0xFFFFFFFFFFFF0000L,0xFFFFFFFFFFFFFFFFL,0xFFEFFFFF7FFFFFFFL,0x07E04C800783C00BL,0x0040000000000000L});
    public static final BitSet FOLLOW_p_NodeComp_in_p_ComparisonExpr5091 = new BitSet(new long[]{0xFFFFFFFFFFFF0000L,0xFFFFFFFFFFFFFFFFL,0xFFEFFFFF7FFFFFFFL,0x07E04C800783C00BL,0x0040000000000000L});
    public static final BitSet FOLLOW_p_RangeExpr_in_p_ComparisonExpr5094 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_p_AdditiveExpr_in_p_RangeExpr5125 = new BitSet(new long[]{0x0000000000000002L,0x0000004000000000L});
    public static final BitSet FOLLOW_TO_in_p_RangeExpr5131 = new BitSet(new long[]{0xFFFFFFFFFFFF0000L,0xFFFFFFFFFFFFFFFFL,0xFFEFFFFF7FFFFFFFL,0x07E04C800783C00BL,0x0040000000000000L});
    public static final BitSet FOLLOW_p_AdditiveExpr_in_p_RangeExpr5135 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_p_MultiplicativeExpr_in_p_AdditiveExpr5166 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000018000L});
    public static final BitSet FOLLOW_set_in_p_AdditiveExpr5170 = new BitSet(new long[]{0xFFFFFFFFFFFF0000L,0xFFFFFFFFFFFFFFFFL,0xFFEFFFFF7FFFFFFFL,0x07E04C800783C00BL,0x0040000000000000L});
    public static final BitSet FOLLOW_p_MultiplicativeExpr_in_p_AdditiveExpr5178 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000018000L});
    public static final BitSet FOLLOW_p_UnionExpr_in_p_MultiplicativeExpr5209 = new BitSet(new long[]{0x0400008000000002L,0x0000000000000100L,0x0000000000000000L,0x0000000000004000L});
    public static final BitSet FOLLOW_STAR_in_p_MultiplicativeExpr5214 = new BitSet(new long[]{0xFFFFFFFFFFFF0000L,0xFFFFFFFFFFFFFFFFL,0xFFEFFFFF7FFFFFFFL,0x07E04C800783C00BL,0x0040000000000000L});
    public static final BitSet FOLLOW_DIV_in_p_MultiplicativeExpr5220 = new BitSet(new long[]{0xFFFFFFFFFFFF0000L,0xFFFFFFFFFFFFFFFFL,0xFFEFFFFF7FFFFFFFL,0x07E04C800783C00BL,0x0040000000000000L});
    public static final BitSet FOLLOW_IDIV_in_p_MultiplicativeExpr5228 = new BitSet(new long[]{0xFFFFFFFFFFFF0000L,0xFFFFFFFFFFFFFFFFL,0xFFEFFFFF7FFFFFFFL,0x07E04C800783C00BL,0x0040000000000000L});
    public static final BitSet FOLLOW_MOD_in_p_MultiplicativeExpr5236 = new BitSet(new long[]{0xFFFFFFFFFFFF0000L,0xFFFFFFFFFFFFFFFFL,0xFFEFFFFF7FFFFFFFL,0x07E04C800783C00BL,0x0040000000000000L});
    public static final BitSet FOLLOW_p_UnionExpr_in_p_MultiplicativeExpr5241 = new BitSet(new long[]{0x0400008000000002L,0x0000000000000100L,0x0000000000000000L,0x0000000000004000L});
    public static final BitSet FOLLOW_p_IntersectExceptExpr_in_p_UnionExpr5272 = new BitSet(new long[]{0x0000000000000002L,0x0000020000000000L,0x0000000000000000L,0x0000000100000000L});
    public static final BitSet FOLLOW_UNION_in_p_UnionExpr5279 = new BitSet(new long[]{0xFFFFFFFFFFFF0000L,0xFFFFFFFFFFFFFFFFL,0xFFEFFFFF7FFFFFFFL,0x07E04C800783C00BL,0x0040000000000000L});
    public static final BitSet FOLLOW_VBAR_in_p_UnionExpr5285 = new BitSet(new long[]{0xFFFFFFFFFFFF0000L,0xFFFFFFFFFFFFFFFFL,0xFFEFFFFF7FFFFFFFL,0x07E04C800783C00BL,0x0040000000000000L});
    public static final BitSet FOLLOW_p_IntersectExceptExpr_in_p_UnionExpr5288 = new BitSet(new long[]{0x0000000000000002L,0x0000020000000000L,0x0000000000000000L,0x0000000100000000L});
    public static final BitSet FOLLOW_p_InstanceofExpr_in_p_IntersectExceptExpr5319 = new BitSet(new long[]{0x0002000000000002L,0x0000000000000001L});
    public static final BitSet FOLLOW_INTERSECT_in_p_IntersectExceptExpr5326 = new BitSet(new long[]{0xFFFFFFFFFFFF0000L,0xFFFFFFFFFFFFFFFFL,0xFFEFFFFF7FFFFFFFL,0x07E04C800783C00BL,0x0040000000000000L});
    public static final BitSet FOLLOW_EXCEPT_in_p_IntersectExceptExpr5332 = new BitSet(new long[]{0xFFFFFFFFFFFF0000L,0xFFFFFFFFFFFFFFFFL,0xFFEFFFFF7FFFFFFFL,0x07E04C800783C00BL,0x0040000000000000L});
    public static final BitSet FOLLOW_p_InstanceofExpr_in_p_IntersectExceptExpr5337 = new BitSet(new long[]{0x0002000000000002L,0x0000000000000001L});
    public static final BitSet FOLLOW_p_TreatExpr_in_p_InstanceofExpr5368 = new BitSet(new long[]{0x8000000000000002L});
    public static final BitSet FOLLOW_INSTANCE_in_p_InstanceofExpr5374 = new BitSet(new long[]{0x0000000000000000L,0x0000000000008000L});
    public static final BitSet FOLLOW_OF_in_p_InstanceofExpr5380 = new BitSet(new long[]{0xFFFFFFFFFFFF0000L,0xFFFFFFFFFFFFFFFFL,0xFFEFFFFF7FFFFFFFL,0x0000400000000009L,0x0040000000000000L});
    public static final BitSet FOLLOW_p_SequenceType_in_p_InstanceofExpr5384 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_p_CastableExpr_in_p_TreatExpr5414 = new BitSet(new long[]{0x0000000000000002L,0x0000008000000000L});
    public static final BitSet FOLLOW_TREAT_in_p_TreatExpr5420 = new BitSet(new long[]{0x0000000000080000L});
    public static final BitSet FOLLOW_AS_in_p_TreatExpr5426 = new BitSet(new long[]{0xFFFFFFFFFFFF0000L,0xFFFFFFFFFFFFFFFFL,0xFFEFFFFF7FFFFFFFL,0x0000400000000009L,0x0040000000000000L});
    public static final BitSet FOLLOW_p_SequenceType_in_p_TreatExpr5430 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_p_CastExpr_in_p_CastableExpr5469 = new BitSet(new long[]{0x0000000010000002L});
    public static final BitSet FOLLOW_CASTABLE_in_p_CastableExpr5475 = new BitSet(new long[]{0x0000000000080000L});
    public static final BitSet FOLLOW_AS_in_p_CastableExpr5481 = new BitSet(new long[]{0xFFFFFFFFFFFF0000L,0xFFFFFFFFFFFFFFFFL,0xFFEFFFFF7FFFFFFFL,0x0000400000000001L,0x0040000000000000L});
    public static final BitSet FOLLOW_p_SingleType_in_p_CastableExpr5485 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_p_UnaryExpr_in_p_CastExpr5524 = new BitSet(new long[]{0x0000000008000002L});
    public static final BitSet FOLLOW_CAST_in_p_CastExpr5530 = new BitSet(new long[]{0x0000000000080000L});
    public static final BitSet FOLLOW_AS_in_p_CastExpr5536 = new BitSet(new long[]{0xFFFFFFFFFFFF0000L,0xFFFFFFFFFFFFFFFFL,0xFFEFFFFF7FFFFFFFL,0x0000400000000001L,0x0040000000000000L});
    public static final BitSet FOLLOW_p_SingleType_in_p_CastExpr5540 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_PLUS_in_p_UnaryExpr5572 = new BitSet(new long[]{0xFFFFFFFFFFFF0000L,0xFFFFFFFFFFFFFFFFL,0xFFEFFFFF7FFFFFFFL,0x07E04C800783C00BL,0x0040000000000000L});
    public static final BitSet FOLLOW_MINUS_in_p_UnaryExpr5576 = new BitSet(new long[]{0xFFFFFFFFFFFF0000L,0xFFFFFFFFFFFFFFFFL,0xFFEFFFFF7FFFFFFFL,0x07E04C800783C00BL,0x0040000000000000L});
    public static final BitSet FOLLOW_p_ValueExpr_in_p_UnaryExpr5580 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_p_ValidateExpr_in_p_ValueExpr5636 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_p_PathExpr_in_p_ValueExpr5648 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_p_ExtensionExpr_in_p_ValueExpr5660 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_set_in_p_GeneralComp0 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_EQ_in_p_ValueComp5739 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_NE_in_p_ValueComp5745 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_LT_in_p_ValueComp5751 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_LE_in_p_ValueComp5757 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_GT_in_p_ValueComp5763 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_GE_in_p_ValueComp5769 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_IS_in_p_NodeComp5802 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_SMALLER_SMALLER_in_p_NodeComp5808 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_GREATER_GREATER_in_p_NodeComp5812 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_VALIDATE_in_p_ValidateExpr5842 = new BitSet(new long[]{0x0000000000080000L,0x0000000400000008L,0x0000000000000000L,0x0000000000000010L});
    public static final BitSet FOLLOW_p_ValidationMode_in_p_ValidateExpr5846 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000010L});
    public static final BitSet FOLLOW_LBRACKET_in_p_ValidateExpr5849 = new BitSet(new long[]{0xFFFFFFFFFFFF0000L,0xFFFFFFFFFFFFFFFFL,0xFFEFFFFF7FFFFFFFL,0x07E04C800783C00BL,0x0040000000000000L});
    public static final BitSet FOLLOW_pm_Expr_in_p_ValidateExpr5851 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000020L});
    public static final BitSet FOLLOW_RBRACKET_in_p_ValidateExpr5853 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_LAX_in_p_ValidationMode5884 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_STRICT_in_p_ValidationMode5890 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_AS_in_p_ValidationMode5897 = new BitSet(new long[]{0xFFFFFFFFFFFF0000L,0xFFFFFFFFFFFFFFFFL,0xFFEFFFFF7FFFFFFFL,0x0000400000000001L,0x0040000000000000L});
    public static final BitSet FOLLOW_p_QName_in_p_ValidationMode5899 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_L_Pragma_in_p_ExtensionExpr5931 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0020000000000010L});
    public static final BitSet FOLLOW_LBRACKET_in_p_ExtensionExpr5934 = new BitSet(new long[]{0xFFFFFFFFFFFF0000L,0xFFFFFFFFFFFFFFFFL,0xFFEFFFFF7FFFFFFFL,0x07E04C800783C02BL,0x0040000000000000L});
    public static final BitSet FOLLOW_pm_Expr_in_p_ExtensionExpr5936 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000020L});
    public static final BitSet FOLLOW_RBRACKET_in_p_ExtensionExpr5939 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_SLASH_in_p_PathExpr5981 = new BitSet(new long[]{0xFFFFFFFFFFFF0000L,0xFFFFFFFFFFFFFFFFL,0xFFEFFFFF7FFFFFFFL,0x07C04C800782400BL,0x0040000000000000L});
    public static final BitSet FOLLOW_p_RelativePathExpr_in_p_PathExpr5983 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_SLASH_in_p_PathExpr5996 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_SLASH_SLASH_in_p_PathExpr6008 = new BitSet(new long[]{0xFFFFFFFFFFFF0000L,0xFFFFFFFFFFFFFFFFL,0xFFEFFFFF7FFFFFFFL,0x07C04C800782400BL,0x0040000000000000L});
    public static final BitSet FOLLOW_p_RelativePathExpr_in_p_PathExpr6010 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_p_RelativePathExpr_in_p_PathExpr6022 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_p_StepExpr_in_p_RelativePathExpr6050 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000001800000L});
    public static final BitSet FOLLOW_set_in_p_RelativePathExpr6053 = new BitSet(new long[]{0xFFFFFFFFFFFF0000L,0xFFFFFFFFFFFFFFFFL,0xFFEFFFFF7FFFFFFFL,0x07C04C800782400BL,0x0040000000000000L});
    public static final BitSet FOLLOW_p_StepExpr_in_p_RelativePathExpr6061 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000001800000L});
    public static final BitSet FOLLOW_p_AxisStep_in_p_StepExpr6089 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_p_FilterExpr_in_p_StepExpr6101 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_p_ReverseStep_in_p_AxisStep6128 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000040L});
    public static final BitSet FOLLOW_p_ForwardStep_in_p_AxisStep6132 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000040L});
    public static final BitSet FOLLOW_p_PredicateList_in_p_AxisStep6135 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_p_ForwardAxis_in_p_ForwardStep6162 = new BitSet(new long[]{0xFFFFFFFFFFFF0000L,0xFFFFFFFFFFFFFFFFL,0xFFEFFFFF7FFFFFFFL,0x0000408004004001L,0x0040000000000000L});
    public static final BitSet FOLLOW_p_NodeTest_in_p_ForwardStep6164 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_p_AbbrevForwardStep_in_p_ForwardStep6169 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_CHILD_in_p_ForwardAxis6195 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000010000000L});
    public static final BitSet FOLLOW_COLON_COLON_in_p_ForwardAxis6197 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_DESCENDANT_in_p_ForwardAxis6209 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000010000000L});
    public static final BitSet FOLLOW_COLON_COLON_in_p_ForwardAxis6211 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ATTRIBUTE_in_p_ForwardAxis6223 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000010000000L});
    public static final BitSet FOLLOW_COLON_COLON_in_p_ForwardAxis6225 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_SELF_in_p_ForwardAxis6237 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000010000000L});
    public static final BitSet FOLLOW_COLON_COLON_in_p_ForwardAxis6239 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_DESCENDANT_OR_SELF_in_p_ForwardAxis6251 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000010000000L});
    public static final BitSet FOLLOW_COLON_COLON_in_p_ForwardAxis6253 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_FOLLOWING_SIBLING_in_p_ForwardAxis6265 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000010000000L});
    public static final BitSet FOLLOW_COLON_COLON_in_p_ForwardAxis6267 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_FOLLOWING_in_p_ForwardAxis6279 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000010000000L});
    public static final BitSet FOLLOW_COLON_COLON_in_p_ForwardAxis6281 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ATTR_SIGN_in_p_AbbrevForwardStep6307 = new BitSet(new long[]{0xFFFFFFFFFFFF0000L,0xFFFFFFFFFFFFFFFFL,0xFFEFFFFF7FFFFFFFL,0x0000408004004001L,0x0040000000000000L});
    public static final BitSet FOLLOW_p_NodeTest_in_p_AbbrevForwardStep6310 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_p_ReverseAxis_in_p_ReverseStep6337 = new BitSet(new long[]{0xFFFFFFFFFFFF0000L,0xFFFFFFFFFFFFFFFFL,0xFFEFFFFF7FFFFFFFL,0x0000408004004001L,0x0040000000000000L});
    public static final BitSet FOLLOW_p_NodeTest_in_p_ReverseStep6339 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_p_AbbrevReverseStep_in_p_ReverseStep6344 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_PARENT_in_p_ReverseAxis6370 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000010000000L});
    public static final BitSet FOLLOW_COLON_COLON_in_p_ReverseAxis6372 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ANCESTOR_in_p_ReverseAxis6384 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000010000000L});
    public static final BitSet FOLLOW_COLON_COLON_in_p_ReverseAxis6386 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_PRECEDING_SIBLING_in_p_ReverseAxis6398 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000010000000L});
    public static final BitSet FOLLOW_COLON_COLON_in_p_ReverseAxis6400 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_PRECEDING_in_p_ReverseAxis6412 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000010000000L});
    public static final BitSet FOLLOW_COLON_COLON_in_p_ReverseAxis6414 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ANCESTOR_OR_SELF_in_p_ReverseAxis6426 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000010000000L});
    public static final BitSet FOLLOW_COLON_COLON_in_p_ReverseAxis6428 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_DOT_DOT_in_p_AbbrevReverseStep6454 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_p_KindTest_in_p_NodeTest6480 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_p_NameTest_in_p_NodeTest6484 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_p_QName_in_p_NameTest6510 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_p_Wildcard_in_p_NameTest6514 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_STAR_in_p_Wildcard6544 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000008000000L});
    public static final BitSet FOLLOW_COLON_in_p_Wildcard6547 = new BitSet(new long[]{0xFFFFFFFFFFFF0000L,0xFFFFFFFFFFFFFFFFL,0xFFEFFFFF7FFFFFFFL,0x0000400000000001L,0x0040000000000000L});
    public static final BitSet FOLLOW_p_NCName_in_p_Wildcard6549 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_p_NCName_in_p_Wildcard6556 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000008000000L});
    public static final BitSet FOLLOW_COLON_in_p_Wildcard6558 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000004000L});
    public static final BitSet FOLLOW_STAR_in_p_Wildcard6560 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_p_PrimaryExpr_in_p_FilterExpr6601 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000040L});
    public static final BitSet FOLLOW_p_PredicateList_in_p_FilterExpr6603 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_p_Predicate_in_p_PredicateList6631 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000040L});
    public static final BitSet FOLLOW_LSQUARE_in_p_Predicate6660 = new BitSet(new long[]{0xFFFFFFFFFFFF0000L,0xFFFFFFFFFFFFFFFFL,0xFFEFFFFF7FFFFFFFL,0x07E04C800783C00BL,0x0040000000000000L});
    public static final BitSet FOLLOW_pm_Expr_in_p_Predicate6662 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000080L});
    public static final BitSet FOLLOW_RSQUARE_in_p_Predicate6664 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_p_Literal_in_p_PrimaryExpr6692 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_p_VarRef_in_p_PrimaryExpr6704 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_p_ParenthesizedExpr_in_p_PrimaryExpr6716 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_p_ContextItemExpr_in_p_PrimaryExpr6728 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_p_FunctionCall_in_p_PrimaryExpr6740 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_p_OrderedExpr_in_p_PrimaryExpr6752 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_p_UnorderedExpr_in_p_PrimaryExpr6764 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_p_Constructor_in_p_PrimaryExpr6776 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_p_NumericLiteral_in_p_Literal6804 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_p_StringLiteral_in_p_Literal6808 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_set_in_p_NumericLiteral0 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_DOLLAR_in_p_VarRef6880 = new BitSet(new long[]{0xFFFFFFFFFFFF0000L,0xFFFFFFFFFFFFFFFFL,0xFFEFFFFF7FFFFFFFL,0x0000400000000001L,0x0040000000000000L});
    public static final BitSet FOLLOW_p_VarName_in_p_VarRef6882 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_p_QName_in_p_VarName6910 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_LPAREN_in_p_ParenthesizedExpr6938 = new BitSet(new long[]{0xFFFFFFFFFFFF0000L,0xFFFFFFFFFFFFFFFFL,0xFFEFFFFF7FFFFFFFL,0x07E04C800783C00FL,0x0040000000000000L});
    public static final BitSet FOLLOW_pm_Expr_in_p_ParenthesizedExpr6940 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000004L});
    public static final BitSet FOLLOW_RPAREN_in_p_ParenthesizedExpr6943 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_DOT_in_p_ContextItemExpr6971 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ORDERED_in_p_OrderedExpr7001 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000010L});
    public static final BitSet FOLLOW_LBRACKET_in_p_OrderedExpr7005 = new BitSet(new long[]{0xFFFFFFFFFFFF0000L,0xFFFFFFFFFFFFFFFFL,0xFFEFFFFF7FFFFFFFL,0x07E04C800783C00BL,0x0040000000000000L});
    public static final BitSet FOLLOW_pm_Expr_in_p_OrderedExpr7007 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000020L});
    public static final BitSet FOLLOW_RBRACKET_in_p_OrderedExpr7009 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_UNORDERED_in_p_UnorderedExpr7039 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000010L});
    public static final BitSet FOLLOW_LBRACKET_in_p_UnorderedExpr7043 = new BitSet(new long[]{0xFFFFFFFFFFFF0000L,0xFFFFFFFFFFFFFFFFL,0xFFEFFFFF7FFFFFFFL,0x07E04C800783C00BL,0x0040000000000000L});
    public static final BitSet FOLLOW_pm_Expr_in_p_UnorderedExpr7045 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000020L});
    public static final BitSet FOLLOW_RBRACKET_in_p_UnorderedExpr7047 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_p_FQName_in_p_FunctionCall7076 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000002L});
    public static final BitSet FOLLOW_LPAREN_in_p_FunctionCall7078 = new BitSet(new long[]{0xFFFFFFFFFFFF0000L,0xFFFFFFFFFFFFFFFFL,0xFFEFFFFF7FFFFFFFL,0x07E04C800783C00FL,0x0040000000000000L});
    public static final BitSet FOLLOW_p_ExprSingle_in_p_FunctionCall7081 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000001004L});
    public static final BitSet FOLLOW_COMMA_in_p_FunctionCall7084 = new BitSet(new long[]{0xFFFFFFFFFFFF0000L,0xFFFFFFFFFFFFFFFFL,0xFFEFFFFF7FFFFFFFL,0x07E04C800783C00BL,0x0040000000000000L});
    public static final BitSet FOLLOW_p_ExprSingle_in_p_FunctionCall7086 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000001004L});
    public static final BitSet FOLLOW_RPAREN_in_p_FunctionCall7092 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_p_DirectConstructor_in_p_Constructor7124 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_p_ComputedConstructor_in_p_Constructor7128 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_p_DirElemConstructor_in_p_DirectConstructor7156 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_L_DirCommentConstructor_in_p_DirectConstructor7168 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_L_DirPIConstructor_in_p_DirectConstructor7180 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_SMALLER_in_p_DirElemConstructor7209 = new BitSet(new long[]{0xFFFFFFFFFFFF0000L,0xFFFFFFFFFFFFFFFFL,0xFFEFFFFF7FFFFFFFL,0x0000400000000001L,0x0040000000000000L});
    public static final BitSet FOLLOW_p_QName_in_p_DirElemConstructor7225 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0008000020040000L});
    public static final BitSet FOLLOW_p_DirAttributeList_in_p_DirElemConstructor7227 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000020040000L});
    public static final BitSet FOLLOW_EMPTY_CLOSE_TAG_in_p_DirElemConstructor7243 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_GREATER_in_p_DirElemConstructor7248 = new BitSet(new long[]{0x0000000000000FC0L,0x0000000000000000L,0x0000000000000000L,0x00C0000040020010L});
    public static final BitSet FOLLOW_pm_DirElemContent_in_p_DirElemConstructor7250 = new BitSet(new long[]{0x0000000000000FC0L,0x0000000000000000L,0x0000000000000000L,0x00C0000040020010L});
    public static final BitSet FOLLOW_CLOSE_TAG_in_p_DirElemConstructor7253 = new BitSet(new long[]{0xFFFFFFFFFFFF0000L,0xFFFFFFFFFFFFFFFFL,0xFFEFFFFF7FFFFFFFL,0x0000400000000001L,0x0040000000000000L});
    public static final BitSet FOLLOW_p_QName_in_p_DirElemConstructor7255 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0008000000040000L});
    public static final BitSet FOLLOW_S_in_p_DirElemConstructor7257 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000040000L});
    public static final BitSet FOLLOW_GREATER_in_p_DirElemConstructor7260 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_S_in_p_DirAttributeList7337 = new BitSet(new long[]{0xFFFFFFFFFFFF0002L,0xFFFFFFFFFFFFFFFFL,0xFFEFFFFF7FFFFFFFL,0x0008400000000001L,0x0040000000000000L});
    public static final BitSet FOLLOW_p_QName_in_p_DirAttributeList7340 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0008000000000100L});
    public static final BitSet FOLLOW_S_in_p_DirAttributeList7342 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000100L});
    public static final BitSet FOLLOW_EQUAL_in_p_DirAttributeList7345 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x00080C0000000000L});
    public static final BitSet FOLLOW_S_in_p_DirAttributeList7347 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x00080C0000000000L});
    public static final BitSet FOLLOW_p_DirAttributeValue_in_p_DirAttributeList7350 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0008000000000000L});
    public static final BitSet FOLLOW_QUOT_in_p_DirAttributeValue7381 = new BitSet(new long[]{0x0000000000002F10L,0x0000000000000000L,0x0000000000000000L,0x0000080000000010L});
    public static final BitSet FOLLOW_ESCAPE_QUOT_in_p_DirAttributeValue7384 = new BitSet(new long[]{0x0000000000002F10L,0x0000000000000000L,0x0000000000000000L,0x0000080000000010L});
    public static final BitSet FOLLOW_pm_QuotAttrValueContent_in_p_DirAttributeValue7388 = new BitSet(new long[]{0x0000000000002F10L,0x0000000000000000L,0x0000000000000000L,0x0000080000000010L});
    public static final BitSet FOLLOW_QUOT_in_p_DirAttributeValue7392 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_APOS_in_p_DirAttributeValue7431 = new BitSet(new long[]{0x0000000000001F20L,0x0000000000000000L,0x0000000000000000L,0x0000040000000010L});
    public static final BitSet FOLLOW_ESCAPE_APOS_in_p_DirAttributeValue7434 = new BitSet(new long[]{0x0000000000001F20L,0x0000000000000000L,0x0000000000000000L,0x0000040000000010L});
    public static final BitSet FOLLOW_pm_AposAttrValueContent_in_p_DirAttributeValue7438 = new BitSet(new long[]{0x0000000000001F20L,0x0000000000000000L,0x0000000000000000L,0x0000040000000010L});
    public static final BitSet FOLLOW_APOS_in_p_DirAttributeValue7442 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_pg_QuotAttrContentChar_in_pm_QuotAttrValueContent7494 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_pg_CommonContent_in_pm_QuotAttrValueContent7498 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_p_ElemEnclosedExpr_in_pm_QuotAttrValueContent7502 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_L_QuotAttrContentChar_in_pg_QuotAttrContentChar7531 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_pg_AposAttrContentChar_in_pm_AposAttrValueContent7584 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_pg_CommonContent_in_pm_AposAttrValueContent7588 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_p_ElemEnclosedExpr_in_pm_AposAttrValueContent7592 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_L_AposAttrContentChar_in_pg_AposAttrContentChar7621 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_p_DirectConstructor_in_pm_DirElemContent7672 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_L_CDataSection_in_pm_DirElemContent7684 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_p_ElemEnclosedExpr_in_pm_DirElemContent7696 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_pg_CommonContent_in_pm_DirElemContent7708 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_pg_ElementContentChar_in_pm_DirElemContent7720 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_L_ElementContentChar_in_pg_ElementContentChar7749 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_pm_CommonContent_in_pg_CommonContent7805 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_set_in_pm_CommonContent0 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_LBRACKET_in_p_ElemEnclosedExpr7901 = new BitSet(new long[]{0xFFFFFFFFFFFF0000L,0xFFFFFFFFFFFFFFFFL,0xFFEFFFFF7FFFFFFFL,0x07E04C800783C00BL,0x0040000000000000L});
    public static final BitSet FOLLOW_pm_Expr_in_p_ElemEnclosedExpr7918 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000020L});
    public static final BitSet FOLLOW_RBRACKET_in_p_ElemEnclosedExpr7935 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_p_CompDocConstructor_in_p_ComputedConstructor7986 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_p_CompElemConstructor_in_p_ComputedConstructor7998 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_p_CompAttrConstructor_in_p_ComputedConstructor8010 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_p_CompNamespaceConstructor_in_p_ComputedConstructor8022 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_p_CompTextConstructor_in_p_ComputedConstructor8034 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_p_CompCommentConstructor_in_p_ComputedConstructor8046 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_p_CompPIConstructor_in_p_ComputedConstructor8058 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_p_CompBinaryConstructor_in_p_ComputedConstructor8073 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_DOCUMENT_in_p_CompDocConstructor8107 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000010L});
    public static final BitSet FOLLOW_LBRACKET_in_p_CompDocConstructor8111 = new BitSet(new long[]{0xFFFFFFFFFFFF0000L,0xFFFFFFFFFFFFFFFFL,0xFFEFFFFF7FFFFFFFL,0x07E04C800783C00BL,0x0040000000000000L});
    public static final BitSet FOLLOW_pm_Expr_in_p_CompDocConstructor8113 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000020L});
    public static final BitSet FOLLOW_RBRACKET_in_p_CompDocConstructor8115 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ELEMENT_in_p_CompElemConstructor8156 = new BitSet(new long[]{0xFFFFFFFFFFFF0000L,0xFFFFFFFFFFFFFFFFL,0xFFEFFFFF7FFFFFFFL,0x0000400000000011L,0x0040000000000000L});
    public static final BitSet FOLLOW_p_QName_in_p_CompElemConstructor8161 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000010L});
    public static final BitSet FOLLOW_LBRACKET_in_p_CompElemConstructor8166 = new BitSet(new long[]{0xFFFFFFFFFFFF0000L,0xFFFFFFFFFFFFFFFFL,0xFFEFFFFF7FFFFFFFL,0x07E04C800783C00BL,0x0040000000000000L});
    public static final BitSet FOLLOW_pm_Expr_in_p_CompElemConstructor8168 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000020L});
    public static final BitSet FOLLOW_RBRACKET_in_p_CompElemConstructor8170 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000010L});
    public static final BitSet FOLLOW_LBRACKET_in_p_CompElemConstructor8174 = new BitSet(new long[]{0xFFFFFFFFFFFF0000L,0xFFFFFFFFFFFFFFFFL,0xFFEFFFFF7FFFFFFFL,0x07E04C800783C02BL,0x0040000000000000L});
    public static final BitSet FOLLOW_pm_Expr_in_p_CompElemConstructor8176 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000020L});
    public static final BitSet FOLLOW_RBRACKET_in_p_CompElemConstructor8179 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ATTRIBUTE_in_p_CompAttrConstructor8212 = new BitSet(new long[]{0xFFFFFFFFFFFF0000L,0xFFFFFFFFFFFFFFFFL,0xFFEFFFFF7FFFFFFFL,0x0000400000000011L,0x0040000000000000L});
    public static final BitSet FOLLOW_p_QName_in_p_CompAttrConstructor8217 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000010L});
    public static final BitSet FOLLOW_LBRACKET_in_p_CompAttrConstructor8222 = new BitSet(new long[]{0xFFFFFFFFFFFF0000L,0xFFFFFFFFFFFFFFFFL,0xFFEFFFFF7FFFFFFFL,0x07E04C800783C00BL,0x0040000000000000L});
    public static final BitSet FOLLOW_pm_Expr_in_p_CompAttrConstructor8224 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000020L});
    public static final BitSet FOLLOW_RBRACKET_in_p_CompAttrConstructor8226 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000010L});
    public static final BitSet FOLLOW_LBRACKET_in_p_CompAttrConstructor8230 = new BitSet(new long[]{0xFFFFFFFFFFFF0000L,0xFFFFFFFFFFFFFFFFL,0xFFEFFFFF7FFFFFFFL,0x07E04C800783C02BL,0x0040000000000000L});
    public static final BitSet FOLLOW_pm_Expr_in_p_CompAttrConstructor8232 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000020L});
    public static final BitSet FOLLOW_RBRACKET_in_p_CompAttrConstructor8235 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_NAMESPACE_in_p_CompNamespaceConstructor8263 = new BitSet(new long[]{0xFFFFFFFFFFFF0000L,0xFFFFFFFFFFFFFFFFL,0xFFEFFFFF7FFFFFFFL,0x0000400000000011L,0x0040000000000000L});
    public static final BitSet FOLLOW_p_NCName_in_p_CompNamespaceConstructor8268 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000010L});
    public static final BitSet FOLLOW_LBRACKET_in_p_CompNamespaceConstructor8273 = new BitSet(new long[]{0xFFFFFFFFFFFF0000L,0xFFFFFFFFFFFFFFFFL,0xFFEFFFFF7FFFFFFFL,0x07E04C800783C00BL,0x0040000000000000L});
    public static final BitSet FOLLOW_pm_Expr_in_p_CompNamespaceConstructor8275 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000020L});
    public static final BitSet FOLLOW_RBRACKET_in_p_CompNamespaceConstructor8277 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000010L});
    public static final BitSet FOLLOW_LBRACKET_in_p_CompNamespaceConstructor8281 = new BitSet(new long[]{0xFFFFFFFFFFFF0000L,0xFFFFFFFFFFFFFFFFL,0xFFEFFFFF7FFFFFFFL,0x07E04C800783C02BL,0x0040000000000000L});
    public static final BitSet FOLLOW_pm_Expr_in_p_CompNamespaceConstructor8283 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000020L});
    public static final BitSet FOLLOW_RBRACKET_in_p_CompNamespaceConstructor8286 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_TEXT_in_p_CompTextConstructor8322 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000010L});
    public static final BitSet FOLLOW_LBRACKET_in_p_CompTextConstructor8326 = new BitSet(new long[]{0xFFFFFFFFFFFF0000L,0xFFFFFFFFFFFFFFFFL,0xFFEFFFFF7FFFFFFFL,0x07E04C800783C00BL,0x0040000000000000L});
    public static final BitSet FOLLOW_pm_Expr_in_p_CompTextConstructor8328 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000020L});
    public static final BitSet FOLLOW_RBRACKET_in_p_CompTextConstructor8330 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_BINARY_in_p_CompBinaryConstructor8360 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000010L});
    public static final BitSet FOLLOW_LBRACKET_in_p_CompBinaryConstructor8364 = new BitSet(new long[]{0xFFFFFFFFFFFF0000L,0xFFFFFFFFFFFFFFFFL,0xFFEFFFFF7FFFFFFFL,0x07E04C800783C00BL,0x0040000000000000L});
    public static final BitSet FOLLOW_pm_Expr_in_p_CompBinaryConstructor8366 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000020L});
    public static final BitSet FOLLOW_RBRACKET_in_p_CompBinaryConstructor8368 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_COMMENT_in_p_CompCommentConstructor8398 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000010L});
    public static final BitSet FOLLOW_LBRACKET_in_p_CompCommentConstructor8402 = new BitSet(new long[]{0xFFFFFFFFFFFF0000L,0xFFFFFFFFFFFFFFFFL,0xFFEFFFFF7FFFFFFFL,0x07E04C800783C00BL,0x0040000000000000L});
    public static final BitSet FOLLOW_pm_Expr_in_p_CompCommentConstructor8404 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000020L});
    public static final BitSet FOLLOW_RBRACKET_in_p_CompCommentConstructor8406 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_PROCESSING_INSTRUCTION_in_p_CompPIConstructor8437 = new BitSet(new long[]{0xFFFFFFFFFFFF0000L,0xFFFFFFFFFFFFFFFFL,0xFFEFFFFF7FFFFFFFL,0x0000400000000011L,0x0040000000000000L});
    public static final BitSet FOLLOW_p_NCName_in_p_CompPIConstructor8442 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000010L});
    public static final BitSet FOLLOW_LBRACKET_in_p_CompPIConstructor8447 = new BitSet(new long[]{0xFFFFFFFFFFFF0000L,0xFFFFFFFFFFFFFFFFL,0xFFEFFFFF7FFFFFFFL,0x07E04C800783C00BL,0x0040000000000000L});
    public static final BitSet FOLLOW_pm_Expr_in_p_CompPIConstructor8449 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000020L});
    public static final BitSet FOLLOW_RBRACKET_in_p_CompPIConstructor8451 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000010L});
    public static final BitSet FOLLOW_LBRACKET_in_p_CompPIConstructor8455 = new BitSet(new long[]{0xFFFFFFFFFFFF0000L,0xFFFFFFFFFFFFFFFFL,0xFFEFFFFF7FFFFFFFL,0x07E04C800783C02BL,0x0040000000000000L});
    public static final BitSet FOLLOW_pm_Expr_in_p_CompPIConstructor8457 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000020L});
    public static final BitSet FOLLOW_RBRACKET_in_p_CompPIConstructor8460 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_p_AtomicType_in_p_SingleType8488 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000002000L});
    public static final BitSet FOLLOW_QUESTION_in_p_SingleType8490 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_AS_in_p_TypeDeclaration8521 = new BitSet(new long[]{0xFFFFFFFFFFFF0000L,0xFFFFFFFFFFFFFFFFL,0xFFEFFFFF7FFFFFFFL,0x0000400000000009L,0x0040000000000000L});
    public static final BitSet FOLLOW_p_SequenceType_in_p_TypeDeclaration8527 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_EMPTY_SEQUENCE_in_p_SequenceType8582 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000002L});
    public static final BitSet FOLLOW_LPAREN_in_p_SequenceType8588 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000004L});
    public static final BitSet FOLLOW_RPAREN_in_p_SequenceType8592 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_p_ItemType_in_p_SequenceType8641 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x000000000000E000L});
    public static final BitSet FOLLOW_p_OccurrenceIndicator_in_p_SequenceType8652 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_set_in_p_OccurrenceIndicator0 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_p_KindTest_in_p_ItemType8754 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_BINARY_in_p_ItemType8794 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000002L});
    public static final BitSet FOLLOW_LPAREN_in_p_ItemType8796 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000004L});
    public static final BitSet FOLLOW_RPAREN_in_p_ItemType8798 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ITEM_in_p_ItemType8840 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000002L});
    public static final BitSet FOLLOW_LPAREN_in_p_ItemType8842 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000004L});
    public static final BitSet FOLLOW_RPAREN_in_p_ItemType8844 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_p_AtomicType_in_p_ItemType8885 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_p_QName_in_p_AtomicType8911 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_p_DocumentTest_in_p_KindTest8961 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_p_ElementTest_in_p_KindTest8973 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_p_AttributeTest_in_p_KindTest8985 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_p_SchemaElementTest_in_p_KindTest8997 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_p_SchemaAttributeTest_in_p_KindTest9009 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_p_NamespaceNodeTest_in_p_KindTest9021 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_p_PITest_in_p_KindTest9033 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_p_CommentTest_in_p_KindTest9045 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_p_TextTest_in_p_KindTest9057 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_p_AnyKindTest_in_p_KindTest9069 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_NODE_in_p_AnyKindTest9097 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000002L});
    public static final BitSet FOLLOW_LPAREN_in_p_AnyKindTest9099 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000004L});
    public static final BitSet FOLLOW_RPAREN_in_p_AnyKindTest9101 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_DOCUMENT_NODE_in_p_DocumentTest9129 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000002L});
    public static final BitSet FOLLOW_LPAREN_in_p_DocumentTest9131 = new BitSet(new long[]{0x0000040000000000L,0x0000000040000000L,0x0000000000000000L,0x0000000000000004L});
    public static final BitSet FOLLOW_p_ElementTest_in_p_DocumentTest9134 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000004L});
    public static final BitSet FOLLOW_p_SchemaElementTest_in_p_DocumentTest9138 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000004L});
    public static final BitSet FOLLOW_RPAREN_in_p_DocumentTest9142 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_TEXT_in_p_TextTest9162 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000002L});
    public static final BitSet FOLLOW_LPAREN_in_p_TextTest9164 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000004L});
    public static final BitSet FOLLOW_RPAREN_in_p_TextTest9166 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_COMMENT_in_p_CommentTest9194 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000002L});
    public static final BitSet FOLLOW_LPAREN_in_p_CommentTest9196 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000004L});
    public static final BitSet FOLLOW_RPAREN_in_p_CommentTest9198 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_NAMESPACE_NODE_in_p_NamespaceNodeTest9224 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000002L});
    public static final BitSet FOLLOW_LPAREN_in_p_NamespaceNodeTest9226 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000004L});
    public static final BitSet FOLLOW_RPAREN_in_p_NamespaceNodeTest9228 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_PROCESSING_INSTRUCTION_in_p_PITest9256 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000002L});
    public static final BitSet FOLLOW_LPAREN_in_p_PITest9258 = new BitSet(new long[]{0xFFFFFFFFFFFF0000L,0xFFFFFFFFFFFFFFFFL,0xFFEFFFFF7FFFFFFFL,0x00004C0000000005L,0x0040000000000000L});
    public static final BitSet FOLLOW_p_NCName_in_p_PITest9261 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000004L});
    public static final BitSet FOLLOW_p_StringLiteral_in_p_PITest9265 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000004L});
    public static final BitSet FOLLOW_RPAREN_in_p_PITest9269 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ATTRIBUTE_in_p_AttributeTest9297 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000002L});
    public static final BitSet FOLLOW_LPAREN_in_p_AttributeTest9299 = new BitSet(new long[]{0xFFFFFFFFFFFF0000L,0xFFFFFFFFFFFFFFFFL,0xFFEFFFFF7FFFFFFFL,0x0000400000004005L,0x0040000000000000L});
    public static final BitSet FOLLOW_p_AttribNameOrWildcard_in_p_AttributeTest9302 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000001004L});
    public static final BitSet FOLLOW_COMMA_in_p_AttributeTest9305 = new BitSet(new long[]{0xFFFFFFFFFFFF0000L,0xFFFFFFFFFFFFFFFFL,0xFFEFFFFF7FFFFFFFL,0x0000400000000001L,0x0040000000000000L});
    public static final BitSet FOLLOW_p_TypeName_in_p_AttributeTest9307 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000004L});
    public static final BitSet FOLLOW_RPAREN_in_p_AttributeTest9313 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_p_QName_in_p_AttribNameOrWildcard9343 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_STAR_in_p_AttribNameOrWildcard9347 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_SCHEMA_ATTRIBUTE_in_p_SchemaAttributeTest9375 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000002L});
    public static final BitSet FOLLOW_LPAREN_in_p_SchemaAttributeTest9377 = new BitSet(new long[]{0xFFFFFFFFFFFF0000L,0xFFFFFFFFFFFFFFFFL,0xFFEFFFFF7FFFFFFFL,0x0000400000000001L,0x0040000000000000L});
    public static final BitSet FOLLOW_p_AttributeDeclaration_in_p_SchemaAttributeTest9379 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000004L});
    public static final BitSet FOLLOW_RPAREN_in_p_SchemaAttributeTest9381 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_p_AttributeName_in_p_AttributeDeclaration9407 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ELEMENT_in_p_ElementTest9435 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000002L});
    public static final BitSet FOLLOW_LPAREN_in_p_ElementTest9437 = new BitSet(new long[]{0xFFFFFFFFFFFF0000L,0xFFFFFFFFFFFFFFFFL,0xFFEFFFFF7FFFFFFFL,0x0000400000004005L,0x0040000000000000L});
    public static final BitSet FOLLOW_p_ElementNameOrWildcard_in_p_ElementTest9440 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000001004L});
    public static final BitSet FOLLOW_COMMA_in_p_ElementTest9443 = new BitSet(new long[]{0xFFFFFFFFFFFF0000L,0xFFFFFFFFFFFFFFFFL,0xFFEFFFFF7FFFFFFFL,0x0000400000000001L,0x0040000000000000L});
    public static final BitSet FOLLOW_p_TypeName_in_p_ElementTest9445 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000002004L});
    public static final BitSet FOLLOW_QUESTION_in_p_ElementTest9447 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000004L});
    public static final BitSet FOLLOW_RPAREN_in_p_ElementTest9454 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_p_QName_in_p_ElementNameOrWildcard9482 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_STAR_in_p_ElementNameOrWildcard9486 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_SCHEMA_ELEMENT_in_p_SchemaElementTest9506 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000002L});
    public static final BitSet FOLLOW_LPAREN_in_p_SchemaElementTest9508 = new BitSet(new long[]{0xFFFFFFFFFFFF0000L,0xFFFFFFFFFFFFFFFFL,0xFFEFFFFF7FFFFFFFL,0x0000400000000001L,0x0040000000000000L});
    public static final BitSet FOLLOW_p_ElementDeclaration_in_p_SchemaElementTest9510 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000004L});
    public static final BitSet FOLLOW_RPAREN_in_p_SchemaElementTest9512 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_p_ElementName_in_p_ElementDeclaration9538 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_p_QName_in_p_AttributeName9566 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_p_QName_in_p_ElementName9594 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_p_QName_in_p_TypeName9622 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_p_TryClause_in_p_TryCatchExpr9654 = new BitSet(new long[]{0x0000000000000000L,0x0001000000000000L});
    public static final BitSet FOLLOW_p_CatchClause_in_p_TryCatchExpr9656 = new BitSet(new long[]{0x0000000000000002L,0x0001000000000000L});
    public static final BitSet FOLLOW_TRY_in_p_TryClause9685 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000010L});
    public static final BitSet FOLLOW_LBRACKET_in_p_TryClause9689 = new BitSet(new long[]{0xFFFFFFFFFFFF0000L,0xFFFFFFFFFFFFFFFFL,0xFFEFFFFF7FFFFFFFL,0x07E04C800783C00BL,0x0040000000000000L});
    public static final BitSet FOLLOW_pm_Expr_in_p_TryClause9691 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000020L});
    public static final BitSet FOLLOW_RBRACKET_in_p_TryClause9693 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_CATCH_in_p_CatchClause9724 = new BitSet(new long[]{0xFFFFFFFFFFFF0000L,0xFFFFFFFFFFFFFFFFL,0xFFEFFFFF7FFFFFFFL,0x0000408004004013L,0x0040000000000000L});
    public static final BitSet FOLLOW_p_CatchErrorList_in_p_CatchClause9728 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000012L});
    public static final BitSet FOLLOW_p_CatchVars_in_p_CatchClause9730 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000010L});
    public static final BitSet FOLLOW_LBRACKET_in_p_CatchClause9733 = new BitSet(new long[]{0xFFFFFFFFFFFF0000L,0xFFFFFFFFFFFFFFFFL,0xFFEFFFFF7FFFFFFFL,0x07E04C800783C00BL,0x0040000000000000L});
    public static final BitSet FOLLOW_pm_Expr_in_p_CatchClause9735 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000020L});
    public static final BitSet FOLLOW_RBRACKET_in_p_CatchClause9737 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_p_NameTest_in_p_CatchErrorList9763 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000100000000L});
    public static final BitSet FOLLOW_VBAR_in_p_CatchErrorList9766 = new BitSet(new long[]{0xFFFFFFFFFFFF0000L,0xFFFFFFFFFFFFFFFFL,0xFFEFFFFF7FFFFFFFL,0x0000408004004001L,0x0040000000000000L});
    public static final BitSet FOLLOW_p_NameTest_in_p_CatchErrorList9768 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000100000000L});
    public static final BitSet FOLLOW_LPAREN_in_p_CatchVars9814 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000008L});
    public static final BitSet FOLLOW_DOLLAR_in_p_CatchVars9816 = new BitSet(new long[]{0xFFFFFFFFFFFF0000L,0xFFFFFFFFFFFFFFFFL,0xFFEFFFFF7FFFFFFFL,0x0000400000000001L,0x0040000000000000L});
    public static final BitSet FOLLOW_p_VarName_in_p_CatchVars9818 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000001004L});
    public static final BitSet FOLLOW_COMMA_in_p_CatchVars9821 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000008L});
    public static final BitSet FOLLOW_DOLLAR_in_p_CatchVars9823 = new BitSet(new long[]{0xFFFFFFFFFFFF0000L,0xFFFFFFFFFFFFFFFFL,0xFFEFFFFF7FFFFFFFL,0x0000400000000001L,0x0040000000000000L});
    public static final BitSet FOLLOW_p_VarName_in_p_CatchVars9825 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000001004L});
    public static final BitSet FOLLOW_COMMA_in_p_CatchVars9828 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000008L});
    public static final BitSet FOLLOW_DOLLAR_in_p_CatchVars9830 = new BitSet(new long[]{0xFFFFFFFFFFFF0000L,0xFFFFFFFFFFFFFFFFL,0xFFEFFFFF7FFFFFFFL,0x0000400000000001L,0x0040000000000000L});
    public static final BitSet FOLLOW_p_VarName_in_p_CatchVars9832 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000004L});
    public static final BitSet FOLLOW_RPAREN_in_p_CatchVars9838 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_QUOT_in_p_StringLiteral9887 = new BitSet(new long[]{0xFFFFFFFFFFFFFFF0L,0xFFFFFFFFFFFFFFFFL,0xFFFFFFFFFFFFFFFFL,0xFFFFFFFFFFFFF7FFL,0x007FFFFFFFFFFFFFL});
    public static final BitSet FOLLOW_p_QuotStringLiteralContent_in_p_StringLiteral9891 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000080000000000L});
    public static final BitSet FOLLOW_QUOT_in_p_StringLiteral9893 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_APOS_in_p_StringLiteral9934 = new BitSet(new long[]{0xFFFFFFFFFFFFFFF0L,0xFFFFFFFFFFFFFFFFL,0xFFFFFFFFFFFFFFFFL,0xFFFFFFFFFFFFF7FFL,0x007FFFFFFFFFFFFFL});
    public static final BitSet FOLLOW_p_AposStringLiteralContent_in_p_StringLiteral9938 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000040000000000L});
    public static final BitSet FOLLOW_APOS_in_p_StringLiteral9940 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_set_in_p_QuotStringLiteralContent9996 = new BitSet(new long[]{0xFFFFFFFFFFFFFFF2L,0xFFFFFFFFFFFFFFFFL,0xFFFFFFFFFFFFFFFFL,0xFFFFF7FFFFFFF7FFL,0x007FFFFFFFFFFFFFL});
    public static final BitSet FOLLOW_set_in_p_AposStringLiteralContent10048 = new BitSet(new long[]{0xFFFFFFFFFFFFFFF2L,0xFFFFFFFFFFFFFFFFL,0xFFFFFFFFFFFFFFFFL,0xFFFFFBFFFFFFF7FFL,0x007FFFFFFFFFFFFFL});
    public static final BitSet FOLLOW_p_NCName_in_p_QName10138 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000008000000L});
    public static final BitSet FOLLOW_p_LocalNCName_in_p_QName10140 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_COLON_in_p_LocalNCName10195 = new BitSet(new long[]{0xFFFFFFFFFFFF0000L,0xFFFFFFFFFFFFFFFFL,0xFFEFFFFF7FFFFFFFL,0x0000400000000001L,0x0040000000000000L});
    public static final BitSet FOLLOW_p_NCName_in_p_LocalNCName10197 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_p_FNCName_in_p_FQName10244 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000008000000L});
    public static final BitSet FOLLOW_p_LocalFNCName_in_p_FQName10246 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_COLON_in_p_LocalFNCName10274 = new BitSet(new long[]{0xFFFFFFFFFFFF0000L,0xFFFFFFFFFFFFFFFFL,0xFFEFFFFF7FFFFFFFL,0x0000400000000001L,0x0040000000000000L});
    public static final BitSet FOLLOW_p_NCName_in_p_LocalFNCName10276 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_set_in_p_NCName0 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_set_in_p_FNCName0 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_DECLARE_in_pm_RevalidationDecl12004 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000800000L});
    public static final BitSet FOLLOW_REVALIDATION_in_pm_RevalidationDecl12008 = new BitSet(new long[]{0x0000000000000000L,0x0000000400000008L,0x0000000001000000L});
    public static final BitSet FOLLOW_STRICT_in_pm_RevalidationDecl12013 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_LAX_in_pm_RevalidationDecl12019 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_SKIP_in_pm_RevalidationDecl12025 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_AS_in_p_InsertExprTargetChoice12058 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000048000L});
    public static final BitSet FOLLOW_FIRST_in_p_InsertExprTargetChoice12063 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000020000L});
    public static final BitSet FOLLOW_LAST_in_p_InsertExprTargetChoice12069 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000020000L});
    public static final BitSet FOLLOW_INTO_in_p_InsertExprTargetChoice12076 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_AFTER_in_p_InsertExprTargetChoice12093 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_BEFORE_in_p_InsertExprTargetChoice12109 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_INSERT_in_p_InsertExpr12139 = new BitSet(new long[]{0x0000000000000000L,0x0000000000004000L,0x0000000000100000L});
    public static final BitSet FOLLOW_NODE_in_p_InsertExpr12144 = new BitSet(new long[]{0xFFFFFFFFFFFF0000L,0xFFFFFFFFFFFFFFFFL,0xFFEFFFFF7FFFFFFFL,0x07E04C800783C00BL,0x0040000000000000L});
    public static final BitSet FOLLOW_NODES_in_p_InsertExpr12150 = new BitSet(new long[]{0xFFFFFFFFFFFF0000L,0xFFFFFFFFFFFFFFFFL,0xFFEFFFFF7FFFFFFFL,0x07E04C800783C00BL,0x0040000000000000L});
    public static final BitSet FOLLOW_p_SourceExpr_in_p_InsertExpr12153 = new BitSet(new long[]{0x0000000000080000L,0x0000000000000000L,0x0000000000021800L});
    public static final BitSet FOLLOW_p_InsertExprTargetChoice_in_p_InsertExpr12155 = new BitSet(new long[]{0xFFFFFFFFFFFF0000L,0xFFFFFFFFFFFFFFFFL,0xFFEFFFFF7FFFFFFFL,0x07E04C800783C00BL,0x0040000000000000L});
    public static final BitSet FOLLOW_p_TargetExpr_in_p_InsertExpr12157 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_DELETE_in_p_DeleteExpr12187 = new BitSet(new long[]{0x0000000000000000L,0x0000000000004000L,0x0000000000100000L});
    public static final BitSet FOLLOW_NODE_in_p_DeleteExpr12192 = new BitSet(new long[]{0xFFFFFFFFFFFF0000L,0xFFFFFFFFFFFFFFFFL,0xFFEFFFFF7FFFFFFFL,0x07E04C800783C00BL,0x0040000000000000L});
    public static final BitSet FOLLOW_NODES_in_p_DeleteExpr12198 = new BitSet(new long[]{0xFFFFFFFFFFFF0000L,0xFFFFFFFFFFFFFFFFL,0xFFEFFFFF7FFFFFFFL,0x07E04C800783C00BL,0x0040000000000000L});
    public static final BitSet FOLLOW_p_TargetExpr_in_p_DeleteExpr12201 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_REPLACE_in_p_ReplaceExpr12231 = new BitSet(new long[]{0x0000000000000000L,0x0000000000004000L,0x0000000004000000L});
    public static final BitSet FOLLOW_VALUE_in_p_ReplaceExpr12236 = new BitSet(new long[]{0x0000000000000000L,0x0000000000008000L});
    public static final BitSet FOLLOW_OF_in_p_ReplaceExpr12240 = new BitSet(new long[]{0x0000000000000000L,0x0000000000004000L});
    public static final BitSet FOLLOW_NODE_in_p_ReplaceExpr12246 = new BitSet(new long[]{0xFFFFFFFFFFFF0000L,0xFFFFFFFFFFFFFFFFL,0xFFEFFFFF7FFFFFFFL,0x07E04C800783C00BL,0x0040000000000000L});
    public static final BitSet FOLLOW_p_ExprSingle_in_p_ReplaceExpr12248 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000008000000L});
    public static final BitSet FOLLOW_WITH_in_p_ReplaceExpr12252 = new BitSet(new long[]{0xFFFFFFFFFFFF0000L,0xFFFFFFFFFFFFFFFFL,0xFFEFFFFF7FFFFFFFL,0x07E04C800783C00BL,0x0040000000000000L});
    public static final BitSet FOLLOW_p_ExprSingle_in_p_ReplaceExpr12254 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_RENAME_in_p_RenameExpr12284 = new BitSet(new long[]{0x0000000000000000L,0x0000000000004000L});
    public static final BitSet FOLLOW_NODE_in_p_RenameExpr12288 = new BitSet(new long[]{0xFFFFFFFFFFFF0000L,0xFFFFFFFFFFFFFFFFL,0xFFEFFFFF7FFFFFFFL,0x07E04C800783C00BL,0x0040000000000000L});
    public static final BitSet FOLLOW_p_TargetExpr_in_p_RenameExpr12290 = new BitSet(new long[]{0x0000000000080000L});
    public static final BitSet FOLLOW_AS_in_p_RenameExpr12292 = new BitSet(new long[]{0xFFFFFFFFFFFF0000L,0xFFFFFFFFFFFFFFFFL,0xFFEFFFFF7FFFFFFFL,0x07E04C800783C00BL,0x0040000000000000L});
    public static final BitSet FOLLOW_p_NewNameExpr_in_p_RenameExpr12294 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_p_ExprSingle_in_p_SourceExpr12322 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_p_ExprSingle_in_p_TargetExpr12348 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_p_ExprSingle_in_p_NewNameExpr12374 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_COPY_in_p_TransformExpr12402 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000008L});
    public static final BitSet FOLLOW_DOLLAR_in_p_TransformExpr12404 = new BitSet(new long[]{0xFFFFFFFFFFFF0000L,0xFFFFFFFFFFFFFFFFL,0xFFEFFFFF7FFFFFFFL,0x0000400000000001L,0x0040000000000000L});
    public static final BitSet FOLLOW_p_VarName_in_p_TransformExpr12406 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000200L});
    public static final BitSet FOLLOW_BIND_in_p_TransformExpr12408 = new BitSet(new long[]{0xFFFFFFFFFFFF0000L,0xFFFFFFFFFFFFFFFFL,0xFFEFFFFF7FFFFFFFL,0x07E04C800783C00BL,0x0040000000000000L});
    public static final BitSet FOLLOW_p_ExprSingle_in_p_TransformExpr12410 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000080000L,0x0000000000001000L});
    public static final BitSet FOLLOW_COMMA_in_p_TransformExpr12413 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000008L});
    public static final BitSet FOLLOW_DOLLAR_in_p_TransformExpr12415 = new BitSet(new long[]{0xFFFFFFFFFFFF0000L,0xFFFFFFFFFFFFFFFFL,0xFFEFFFFF7FFFFFFFL,0x0000400000000001L,0x0040000000000000L});
    public static final BitSet FOLLOW_p_VarName_in_p_TransformExpr12417 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000200L});
    public static final BitSet FOLLOW_BIND_in_p_TransformExpr12419 = new BitSet(new long[]{0xFFFFFFFFFFFF0000L,0xFFFFFFFFFFFFFFFFL,0xFFEFFFFF7FFFFFFFL,0x07E04C800783C00BL,0x0040000000000000L});
    public static final BitSet FOLLOW_p_ExprSingle_in_p_TransformExpr12421 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000080000L,0x0000000000001000L});
    public static final BitSet FOLLOW_MODIFY_in_p_TransformExpr12427 = new BitSet(new long[]{0xFFFFFFFFFFFF0000L,0xFFFFFFFFFFFFFFFFL,0xFFEFFFFF7FFFFFFFL,0x07E04C800783C00BL,0x0040000000000000L});
    public static final BitSet FOLLOW_p_ExprSingle_in_p_TransformExpr12429 = new BitSet(new long[]{0x0000000000000000L,0x0000000004000000L});
    public static final BitSet FOLLOW_RETURN_in_p_TransformExpr12433 = new BitSet(new long[]{0xFFFFFFFFFFFF0000L,0xFFFFFFFFFFFFFFFFL,0xFFEFFFFF7FFFFFFFL,0x07E04C800783C00BL,0x0040000000000000L});
    public static final BitSet FOLLOW_p_ExprSingle_in_p_TransformExpr12435 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_p_ConcatExpr_in_pm_ApplyExpr12470 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000080000000L});
    public static final BitSet FOLLOW_SEMICOLON_in_pm_ApplyExpr12472 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_p_ExprSingle_in_p_ConcatExpr12498 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000001000L});
    public static final BitSet FOLLOW_COMMA_in_p_ConcatExpr12501 = new BitSet(new long[]{0xFFFFFFFFFFFF0000L,0xFFFFFFFFFFFFFFFFL,0xFFEFFFFF7FFFFFFFL,0x07E04C800783C00BL,0x0040000000000000L});
    public static final BitSet FOLLOW_p_ExprSingle_in_p_ConcatExpr12503 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000001000L});
    public static final BitSet FOLLOW_BLOCK_in_p_BlockExpr12533 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000010L});
    public static final BitSet FOLLOW_p_Block_in_p_BlockExpr12537 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_LBRACKET_in_p_Block12563 = new BitSet(new long[]{0xFFFFFFFFFFFF0000L,0xFFFFFFFFFFFFFFFFL,0xFFEFFFFF7FFFFFFFL,0x07E04C800783C00BL,0x0040000000000000L});
    public static final BitSet FOLLOW_pm_BlockDecls_in_p_Block12567 = new BitSet(new long[]{0xFFFFFFFFFFFF0000L,0xFFFFFFFFFFFFFFFFL,0xFFEFFFFF7FFFFFFFL,0x07E04C800783C00BL,0x0040000000000000L});
    public static final BitSet FOLLOW_p_BlockBody_in_p_Block12571 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000020L});
    public static final BitSet FOLLOW_RBRACKET_in_p_Block12573 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_pm_BlockVarDecl_in_pm_BlockDecls12629 = new BitSet(new long[]{0x0000000400000002L});
    public static final BitSet FOLLOW_DECLARE_in_pm_BlockVarDecl12684 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000008L});
    public static final BitSet FOLLOW_DOLLAR_in_pm_BlockVarDecl12688 = new BitSet(new long[]{0xFFFFFFFFFFFF0000L,0xFFFFFFFFFFFFFFFFL,0xFFEFFFFF7FFFFFFFL,0x0000400000000001L,0x0040000000000000L});
    public static final BitSet FOLLOW_p_VarName_in_pm_BlockVarDecl12692 = new BitSet(new long[]{0x0000000000080000L,0x0000000000000000L,0x0000000000000000L,0x0000000080001200L});
    public static final BitSet FOLLOW_p_TypeDeclaration_in_pm_BlockVarDecl12696 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000080001200L});
    public static final BitSet FOLLOW_BIND_in_pm_BlockVarDecl12700 = new BitSet(new long[]{0xFFFFFFFFFFFF0000L,0xFFFFFFFFFFFFFFFFL,0xFFEFFFFF7FFFFFFFL,0x07E04C800783C00BL,0x0040000000000000L});
    public static final BitSet FOLLOW_p_ExprSingle_in_pm_BlockVarDecl12704 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000080001000L});
    public static final BitSet FOLLOW_COMMA_in_pm_BlockVarDecl12709 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000008L});
    public static final BitSet FOLLOW_DOLLAR_in_pm_BlockVarDecl12711 = new BitSet(new long[]{0xFFFFFFFFFFFF0000L,0xFFFFFFFFFFFFFFFFL,0xFFEFFFFF7FFFFFFFL,0x0000400000000001L,0x0040000000000000L});
    public static final BitSet FOLLOW_p_VarName_in_pm_BlockVarDecl12713 = new BitSet(new long[]{0x0000000000080000L,0x0000000000000000L,0x0000000000000000L,0x0000000080001200L});
    public static final BitSet FOLLOW_p_TypeDeclaration_in_pm_BlockVarDecl12715 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000080001200L});
    public static final BitSet FOLLOW_BIND_in_pm_BlockVarDecl12719 = new BitSet(new long[]{0xFFFFFFFFFFFF0000L,0xFFFFFFFFFFFFFFFFL,0xFFEFFFFF7FFFFFFFL,0x07E04C800783C00BL,0x0040000000000000L});
    public static final BitSet FOLLOW_p_ExprSingle_in_pm_BlockVarDecl12721 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000080001000L});
    public static final BitSet FOLLOW_SEMICOLON_in_pm_BlockVarDecl12727 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_pm_Expr_in_p_BlockBody12787 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_SET_in_p_AssignmentExpr12815 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000008L});
    public static final BitSet FOLLOW_DOLLAR_in_p_AssignmentExpr12819 = new BitSet(new long[]{0xFFFFFFFFFFFF0000L,0xFFFFFFFFFFFFFFFFL,0xFFEFFFFF7FFFFFFFL,0x0000400000000001L,0x0040000000000000L});
    public static final BitSet FOLLOW_p_VarName_in_p_AssignmentExpr12821 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000200L});
    public static final BitSet FOLLOW_BIND_in_p_AssignmentExpr12823 = new BitSet(new long[]{0xFFFFFFFFFFFF0000L,0xFFFFFFFFFFFFFFFFL,0xFFEFFFFF7FFFFFFFL,0x07E04C800783C00BL,0x0040000000000000L});
    public static final BitSet FOLLOW_p_ExprSingle_in_p_AssignmentExpr12825 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_EXIT_in_p_ExitExpr12853 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000080000000L});
    public static final BitSet FOLLOW_RETURNING_in_p_ExitExpr12859 = new BitSet(new long[]{0xFFFFFFFFFFFF0000L,0xFFFFFFFFFFFFFFFFL,0xFFEFFFFF7FFFFFFFL,0x07E04C800783C00BL,0x0040000000000000L});
    public static final BitSet FOLLOW_p_ExprSingle_in_p_ExitExpr12863 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_WHILE_in_p_WhileExpr12891 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000002L});
    public static final BitSet FOLLOW_LPAREN_in_p_WhileExpr12895 = new BitSet(new long[]{0xFFFFFFFFFFFF0000L,0xFFFFFFFFFFFFFFFFL,0xFFEFFFFF7FFFFFFFL,0x07E04C800783C00BL,0x0040000000000000L});
    public static final BitSet FOLLOW_p_ExprSingle_in_p_WhileExpr12897 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000004L});
    public static final BitSet FOLLOW_RPAREN_in_p_WhileExpr12899 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000010L});
    public static final BitSet FOLLOW_p_WhileBody_in_p_WhileExpr12901 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_p_Block_in_p_WhileBody12927 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_p_UsingClause_in_p_EvalExpr12957 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000001000000000L});
    public static final BitSet FOLLOW_EVAL_in_p_EvalExpr12962 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000010L});
    public static final BitSet FOLLOW_LBRACKET_in_p_EvalExpr12966 = new BitSet(new long[]{0xFFFFFFFFFFFF0000L,0xFFFFFFFFFFFFFFFFL,0xFFEFFFFF7FFFFFFFL,0x07E04C800783C00BL,0x0040000000000000L});
    public static final BitSet FOLLOW_p_ExprSingle_in_p_EvalExpr12968 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000020L});
    public static final BitSet FOLLOW_RBRACKET_in_p_EvalExpr12970 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_USING_in_p_UsingClause12997 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000008L});
    public static final BitSet FOLLOW_DOLLAR_in_p_UsingClause13001 = new BitSet(new long[]{0xFFFFFFFFFFFF0000L,0xFFFFFFFFFFFFFFFFL,0xFFEFFFFF7FFFFFFFL,0x0000400000000001L,0x0040000000000000L});
    public static final BitSet FOLLOW_p_VarName_in_p_UsingClause13003 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000001000L});
    public static final BitSet FOLLOW_COMMA_in_p_UsingClause13006 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000008L});
    public static final BitSet FOLLOW_DOLLAR_in_p_UsingClause13008 = new BitSet(new long[]{0xFFFFFFFFFFFF0000L,0xFFFFFFFFFFFFFFFFL,0xFFEFFFFF7FFFFFFFL,0x0000400000000001L,0x0040000000000000L});
    public static final BitSet FOLLOW_p_VarName_in_p_UsingClause13010 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000001000L});
    public static final BitSet FOLLOW_DECLARE_in_p_CollectionDecl13045 = new BitSet(new long[]{0x0000000000000000L,0x0000040000080000L,0x01200A4000000000L});
    public static final BitSet FOLLOW_p_CollProperties_in_p_CollectionDecl13047 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000020000000000L});
    public static final BitSet FOLLOW_COLLECTION_in_p_CollectionDecl13051 = new BitSet(new long[]{0xFFFFFFFFFFFF0000L,0xFFFFFFFFFFFFFFFFL,0xFFEFFFFF7FFFFFFFL,0x0000400000000001L,0x0040000000000000L});
    public static final BitSet FOLLOW_p_QName_in_p_CollectionDecl13053 = new BitSet(new long[]{0x0000000000080000L,0x0000000000000000L,0x0000000008000000L,0x0000000080000000L});
    public static final BitSet FOLLOW_p_CollectionTypeDecl_in_p_CollectionDecl13055 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000008000000L,0x0000000080000000L});
    public static final BitSet FOLLOW_WITH_in_p_CollectionDecl13061 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0420000000000000L});
    public static final BitSet FOLLOW_p_NodeModifier_in_p_CollectionDecl13063 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000100000L});
    public static final BitSet FOLLOW_NODES_in_p_CollectionDecl13067 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000080000000L});
    public static final BitSet FOLLOW_SEMICOLON_in_p_CollectionDecl13071 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_CONST_in_p_CollProperties13102 = new BitSet(new long[]{0x0000000000000002L,0x0000040000080000L,0x0120084000000000L});
    public static final BitSet FOLLOW_MUTABLE_in_p_CollProperties13108 = new BitSet(new long[]{0x0000000000000002L,0x0000040000080000L,0x0120084000000000L});
    public static final BitSet FOLLOW_APPEND_ONLY_in_p_CollProperties13122 = new BitSet(new long[]{0x0000000000000002L,0x0000040000080000L,0x0120084000000000L});
    public static final BitSet FOLLOW_QUEUE_in_p_CollProperties13128 = new BitSet(new long[]{0x0000000000000002L,0x0000040000080000L,0x0120084000000000L});
    public static final BitSet FOLLOW_ORDERED_in_p_CollProperties13142 = new BitSet(new long[]{0x0000000000000002L,0x0000040000080000L,0x0120084000000000L});
    public static final BitSet FOLLOW_UNORDERED_in_p_CollProperties13148 = new BitSet(new long[]{0x0000000000000002L,0x0000040000080000L,0x0120084000000000L});
    public static final BitSet FOLLOW_AS_in_p_CollectionTypeDecl13181 = new BitSet(new long[]{0x0000060080400000L,0x0800001062004000L});
    public static final BitSet FOLLOW_p_KindTest_in_p_CollectionTypeDecl13185 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x000000000000E000L});
    public static final BitSet FOLLOW_p_OccurrenceIndicator_in_p_CollectionTypeDecl13194 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_READ_ONLY_in_p_NodeModifier13225 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_MUTABLE_in_p_NodeModifier13231 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_DECLARE_in_p_IndexDecl13261 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0851008004000000L});
    public static final BitSet FOLLOW_p_IndexProperties_in_p_IndexDecl13263 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0001000000000000L});
    public static final BitSet FOLLOW_INDEX_in_p_IndexDecl13267 = new BitSet(new long[]{0xFFFFFFFFFFFF0000L,0xFFFFFFFFFFFFFFFFL,0xFFEFFFFF7FFFFFFFL,0x0000400000000001L,0x0040000000000000L});
    public static final BitSet FOLLOW_p_IndexName_in_p_IndexDecl13269 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0080000000000000L});
    public static final BitSet FOLLOW_ON_in_p_IndexDecl13273 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000100000L});
    public static final BitSet FOLLOW_NODES_in_p_IndexDecl13277 = new BitSet(new long[]{0xFFFFFFFFFFFF0000L,0xFFFFFFFFFFFFFFFFL,0xFFEFFFFF7FFFFFFFL,0x07C04C800782400BL,0x0040000000000000L});
    public static final BitSet FOLLOW_p_IndexDomainExpr_in_p_IndexDecl13279 = new BitSet(new long[]{0x0000000002000000L});
    public static final BitSet FOLLOW_BY_in_p_IndexDecl13283 = new BitSet(new long[]{0xFFFFFFFFFFFF0000L,0xFFFFFFFFFFFFFFFFL,0xFFEFFFFF7FFFFFFFL,0x07C04C800782400BL,0x0040000000000000L});
    public static final BitSet FOLLOW_p_IndexKeySpec_in_p_IndexDecl13285 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000080001000L});
    public static final BitSet FOLLOW_COMMA_in_p_IndexDecl13288 = new BitSet(new long[]{0xFFFFFFFFFFFF0000L,0xFFFFFFFFFFFFFFFFL,0xFFEFFFFF7FFFFFFFL,0x07C04C800782400BL,0x0040000000000000L});
    public static final BitSet FOLLOW_p_IndexKeySpec_in_p_IndexDecl13290 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000080001000L});
    public static final BitSet FOLLOW_SEMICOLON_in_p_IndexDecl13294 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_p_QName_in_p_IndexName13321 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_UNIQUE_in_p_IndexProperties13350 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0850008004000000L});
    public static final BitSet FOLLOW_NON_in_p_IndexProperties13356 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0800000000000000L});
    public static final BitSet FOLLOW_UNIQUE_in_p_IndexProperties13360 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0850008004000000L});
    public static final BitSet FOLLOW_VALUE_in_p_IndexProperties13374 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0200000000000000L});
    public static final BitSet FOLLOW_RANGE_in_p_IndexProperties13378 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0850008004000000L});
    public static final BitSet FOLLOW_VALUE_in_p_IndexProperties13384 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000100000000000L});
    public static final BitSet FOLLOW_EQUALITY_in_p_IndexProperties13388 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0850008004000000L});
    public static final BitSet FOLLOW_AUTOMATICALLY_in_p_IndexProperties13402 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0008000000000000L});
    public static final BitSet FOLLOW_MAINTAINED_in_p_IndexProperties13406 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0850008004000000L});
    public static final BitSet FOLLOW_MANUALLY_in_p_IndexProperties13412 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0008000000000000L});
    public static final BitSet FOLLOW_MAINTAINED_in_p_IndexProperties13416 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0850008004000000L});
    public static final BitSet FOLLOW_p_PathExpr_in_p_IndexDomainExpr13446 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_p_IndexKeyExpr_in_p_IndexKeySpec13471 = new BitSet(new long[]{0x0000000000080000L});
    public static final BitSet FOLLOW_p_IndexKeyTypeDecl_in_p_IndexKeySpec13473 = new BitSet(new long[]{0x0000000040000002L});
    public static final BitSet FOLLOW_p_IndexKeyCollation_in_p_IndexKeySpec13475 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_p_PathExpr_in_p_IndexKeyExpr13501 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_AS_in_p_IndexKeyTypeDecl13528 = new BitSet(new long[]{0xFFFFFFFFFFFF0000L,0xFFFFFFFFFFFFFFFFL,0xFFEFFFFF7FFFFFFFL,0x0000400000000001L,0x0040000000000000L});
    public static final BitSet FOLLOW_p_AtomicType_in_p_IndexKeyTypeDecl13532 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_COLLATION_in_p_IndexKeyCollation13559 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x00000C0000000000L});
    public static final BitSet FOLLOW_p_StringLiteral_in_p_IndexKeyCollation13563 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_DECLARE_in_p_ICDecl13590 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0002000000000000L});
    public static final BitSet FOLLOW_INTEGRITY_in_p_ICDecl13594 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000040000000000L});
    public static final BitSet FOLLOW_CONSTRAINT_in_p_ICDecl13598 = new BitSet(new long[]{0xFFFFFFFFFFFF0000L,0xFFFFFFFFFFFFFFFFL,0xFFEFFFFF7FFFFFFFL,0x0000400000000001L,0x0040000000000000L});
    public static final BitSet FOLLOW_p_QName_in_p_ICDecl13602 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0080400000000000L});
    public static final BitSet FOLLOW_p_ICCollection_in_p_ICDecl13605 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000080000000L});
    public static final BitSet FOLLOW_p_ICForeignKey_in_p_ICDecl13609 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000080000000L});
    public static final BitSet FOLLOW_SEMICOLON_in_p_ICDecl13612 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ON_in_p_ICCollection13639 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000020000000000L});
    public static final BitSet FOLLOW_COLLECTION_in_p_ICCollection13643 = new BitSet(new long[]{0xFFFFFFFFFFFF0000L,0xFFFFFFFFFFFFFFFFL,0xFFEFFFFF7FFFFFFFL,0x0000400000000001L,0x0040000000000000L});
    public static final BitSet FOLLOW_p_QName_in_p_ICCollection13647 = new BitSet(new long[]{0x0000000000000000L,0x0000000000004000L,0x0000200000000000L,0x0000000000000008L});
    public static final BitSet FOLLOW_p_ICCollSequence_in_p_ICCollection13650 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_p_ICCollSequenceUnique_in_p_ICCollection13654 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_p_ICCollNode_in_p_ICCollection13658 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_DOLLAR_in_p_ICCollSequence13684 = new BitSet(new long[]{0xFFFFFFFFFFFF0000L,0xFFFFFFFFFFFFFFFFL,0xFFEFFFFF7FFFFFFFL,0x0000400000000001L,0x0040000000000000L});
    public static final BitSet FOLLOW_p_QName_in_p_ICCollSequence13686 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000010000000000L});
    public static final BitSet FOLLOW_CHECK_in_p_ICCollSequence13690 = new BitSet(new long[]{0xFFFFFFFFFFFF0000L,0xFFFFFFFFFFFFFFFFL,0xFFEFFFFF7FFFFFFFL,0x07E04C800783C00BL,0x0040000000000000L});
    public static final BitSet FOLLOW_p_ExprSingle_in_p_ICCollSequence13694 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_NODE_in_p_ICCollSequenceUnique13721 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000008L});
    public static final BitSet FOLLOW_DOLLAR_in_p_ICCollSequenceUnique13725 = new BitSet(new long[]{0xFFFFFFFFFFFF0000L,0xFFFFFFFFFFFFFFFFL,0xFFEFFFFF7FFFFFFFL,0x0000400000000001L,0x0040000000000000L});
    public static final BitSet FOLLOW_p_QName_in_p_ICCollSequenceUnique13727 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000010000000000L});
    public static final BitSet FOLLOW_CHECK_in_p_ICCollSequenceUnique13731 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0800000000000000L});
    public static final BitSet FOLLOW_UNIQUE_in_p_ICCollSequenceUnique13735 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0004000000000000L});
    public static final BitSet FOLLOW_KEY_in_p_ICCollSequenceUnique13739 = new BitSet(new long[]{0xFFFFFFFFFFFF0000L,0xFFFFFFFFFFFFFFFFL,0xFFEFFFFF7FFFFFFFL,0x07C04C800782400BL,0x0040000000000000L});
    public static final BitSet FOLLOW_p_PathExpr_in_p_ICCollSequenceUnique13741 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_FOREACH_in_p_ICCollNode13770 = new BitSet(new long[]{0x0000000000000000L,0x0000000000004000L});
    public static final BitSet FOLLOW_NODE_in_p_ICCollNode13774 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000008L});
    public static final BitSet FOLLOW_DOLLAR_in_p_ICCollNode13776 = new BitSet(new long[]{0xFFFFFFFFFFFF0000L,0xFFFFFFFFFFFFFFFFL,0xFFEFFFFF7FFFFFFFL,0x0000400000000001L,0x0040000000000000L});
    public static final BitSet FOLLOW_p_QName_in_p_ICCollNode13778 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000010000000000L});
    public static final BitSet FOLLOW_CHECK_in_p_ICCollNode13782 = new BitSet(new long[]{0xFFFFFFFFFFFF0000L,0xFFFFFFFFFFFFFFFFL,0xFFEFFFFF7FFFFFFFL,0x07E04C800783C00BL,0x0040000000000000L});
    public static final BitSet FOLLOW_p_ExprSingle_in_p_ICCollNode13784 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_FOREIGN_in_p_ICForeignKey13813 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0004000000000000L});
    public static final BitSet FOLLOW_KEY_in_p_ICForeignKey13817 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000800000000000L});
    public static final BitSet FOLLOW_p_ICForeignKeySource_in_p_ICForeignKey13819 = new BitSet(new long[]{0x0000000000000000L,0x0000004000000000L});
    public static final BitSet FOLLOW_p_ICForeignKeyTarget_in_p_ICForeignKey13821 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_FROM_in_p_ICForeignKeySource13850 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000020000000000L});
    public static final BitSet FOLLOW_p_ICForeignKeyValues_in_p_ICForeignKeySource13854 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_TO_in_p_ICForeignKeyTarget13881 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000020000000000L});
    public static final BitSet FOLLOW_p_ICForeignKeyValues_in_p_ICForeignKeyTarget13885 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_COLLECTION_in_p_ICForeignKeyValues13912 = new BitSet(new long[]{0xFFFFFFFFFFFF0000L,0xFFFFFFFFFFFFFFFFL,0xFFEFFFFF7FFFFFFFL,0x0000400000000001L,0x0040000000000000L});
    public static final BitSet FOLLOW_p_QName_in_p_ICForeignKeyValues13914 = new BitSet(new long[]{0x0000000000000000L,0x0000000000004000L});
    public static final BitSet FOLLOW_NODE_in_p_ICForeignKeyValues13918 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000008L});
    public static final BitSet FOLLOW_DOLLAR_in_p_ICForeignKeyValues13920 = new BitSet(new long[]{0xFFFFFFFFFFFF0000L,0xFFFFFFFFFFFFFFFFL,0xFFEFFFFF7FFFFFFFL,0x0000400000000001L,0x0040000000000000L});
    public static final BitSet FOLLOW_p_QName_in_p_ICForeignKeyValues13922 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0004000000000000L});
    public static final BitSet FOLLOW_KEY_in_p_ICForeignKeyValues13926 = new BitSet(new long[]{0xFFFFFFFFFFFF0000L,0xFFFFFFFFFFFFFFFFL,0xFFEFFFFF7FFFFFFFL,0x07C04C800782400BL,0x0040000000000000L});
    public static final BitSet FOLLOW_p_PathExpr_in_p_ICForeignKeyValues13928 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_SLASH_in_synpred1_XQueryParser5973 = new BitSet(new long[]{0xFFFFFFFFFFFF0000L,0xFFFFFFFFFFFFFFFFL,0xFFEFFFFF7FFFFFFFL,0x07C04C800782400BL,0x0040000000000000L});
    public static final BitSet FOLLOW_p_RelativePathExpr_in_synpred1_XQueryParser5975 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_p_OccurrenceIndicator_in_synpred2_XQueryParser8645 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_p_OccurrenceIndicator_in_synpred3_XQueryParser13189 = new BitSet(new long[]{0x0000000000000002L});

}